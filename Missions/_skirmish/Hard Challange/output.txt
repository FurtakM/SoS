// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10090 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10220 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11627 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13856 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 2000 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 2000
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8309 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6358 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6358 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6358 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6358 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6358 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6209 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6209 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8082 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6209 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6209 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8082 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10608 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5233
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6118 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10534 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5451 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5451 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9125 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 74258 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6358 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6499 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6574 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8481 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6358 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6913 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7521 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7812 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6209 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6209 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6209 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7960 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7960 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7960 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8082 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8082 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6118 0 1
3087: PPUSH
3088: CALL 5810 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6118 0 1
3108: PPUSH
3109: CALL 5810 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11332 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5451 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3480
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3478
// if GetLives ( ru_attack_list [ i ] ) >= 250 then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: IFFALSE 3476
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3417: LD_EXP 10
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_INT 81
3430: PUSH
3431: LD_EXP 10
3435: PUSH
3436: LD_VAR 0 1
3440: ARRAY
3441: PPUSH
3442: CALL_OW 255
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: PPUSH
3456: LD_EXP 10
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 74
3471: PPUSH
3472: CALL_OW 115
3476: GO 3393
3478: POP
3479: POP
// end ; if GetBehemoth ( 3 ) then
3480: LD_INT 3
3482: PPUSH
3483: CALL 11332 0 1
3487: IFFALSE 3859
// begin if ru_mech >= 4 then
3489: LD_EXP 22
3493: PUSH
3494: LD_INT 4
3496: GREATEREQUAL
3497: IFFALSE 3548
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3499: LD_ADDR_EXP 15
3503: PUSH
3504: LD_EXP 22
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: PUSH
3513: LD_EXP 22
3517: PUSH
3518: LD_INT 2
3520: ARRAY
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 3
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 4
3538: ARRAY
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
3546: GO 3558
// ru_behemoth_mechanic := ru_mech ;
3548: LD_ADDR_EXP 15
3552: PUSH
3553: LD_EXP 22
3557: ST_TO_ADDR
// for i = 1 to ru_mech do
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: DOUBLE
3564: LD_INT 1
3566: DEC
3567: ST_TO_ADDR
3568: LD_EXP 22
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3628
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3576: LD_EXP 22
3580: PUSH
3581: LD_VAR 0 1
3585: ARRAY
3586: PPUSH
3587: CALL_OW 310
3591: PUSH
3592: LD_EXP 22
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PUSH
3603: LD_EXP 15
3607: IN
3608: AND
3609: IFFALSE 3626
// ComExitBuilding ( ru_mech [ i ] ) ;
3611: LD_EXP 22
3615: PUSH
3616: LD_VAR 0 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 122
3626: GO 3573
3628: POP
3629: POP
// if UnitsInside ( ru_fac ) = 0 then
3630: LD_INT 14
3632: PPUSH
3633: CALL_OW 313
3637: PUSH
3638: LD_INT 0
3640: EQUAL
3641: IFFALSE 3708
// begin InitHc_All ;
3643: CALL_OW 584
// for i := 1 to 5 do
3647: LD_ADDR_VAR 0 1
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 5
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3706
// begin uc_side := 3 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 3
3670: ST_TO_ADDR
// uc_nation := 3 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 3
3678: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3679: LD_INT 0
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 7
3687: PPUSH
3688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3692: CALL_OW 44
3696: PPUSH
3697: LD_INT 14
3699: PPUSH
3700: CALL_OW 52
// end ;
3704: GO 3660
3706: POP
3707: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3708: LD_INT 12
3710: PPUSH
3711: LD_INT 22
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 21
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 70
3739: PUSH
3740: LD_INT 0
3742: GREATER
3743: IFFALSE 3803
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3745: LD_INT 3
3747: PPUSH
3748: CALL 11332 0 1
3752: PUSH
3753: LD_INT 1
3755: ARRAY
3756: PPUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 34
3769: PUSH
3770: LD_INT 49
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PPUSH
3786: LD_EXP 15
3790: PPUSH
3791: LD_INT 97
3793: PPUSH
3794: LD_INT 9
3796: PPUSH
3797: CALL 10829 0 5
3801: GO 3859
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3803: LD_INT 3
3805: PPUSH
3806: CALL 11332 0 1
3810: PUSH
3811: LD_INT 1
3813: ARRAY
3814: PPUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 49
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: PPUSH
3839: CALL_OW 69
3843: PPUSH
3844: LD_EXP 15
3848: PPUSH
3849: LD_INT 153
3851: PPUSH
3852: LD_INT 102
3854: PPUSH
3855: CALL 10829 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3859: LD_EXP 24
3863: PUSH
3864: LD_INT 0
3866: EQUAL
3867: PUSH
3868: LD_INT 44
3870: PPUSH
3871: LD_INT 3
3873: PPUSH
3874: CALL_OW 321
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3894
// ComChangeClassToBazooker ( ru_sold ) ;
3885: LD_EXP 20
3889: PPUSH
3890: CALL 9766 0 1
// if ru_bazz then
3894: LD_EXP 24
3898: IFFALSE 3912
// IntBazooka ( ru_bazz , 1 ) ;
3900: LD_EXP 24
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL 9485 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3912: LD_INT 67
3914: PPUSH
3915: LD_INT 39
3917: PPUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL_OW 440
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: PUSH
3930: LD_INT 20
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: CALL_OW 321
3940: PUSH
3941: LD_INT 2
3943: EQUAL
3944: AND
3945: IFFALSE 3966
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3947: LD_EXP 23
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_INT 67
3958: PPUSH
3959: LD_INT 39
3961: PPUSH
3962: CALL 9064 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3966: LD_INT 89
3968: PPUSH
3969: LD_INT 66
3971: PPUSH
3972: LD_INT 3
3974: PPUSH
3975: CALL_OW 440
3979: PUSH
3980: LD_INT 0
3982: EQUAL
3983: IFFALSE 4004
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
3985: LD_EXP 23
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_INT 87
3996: PPUSH
3997: LD_INT 60
3999: PPUSH
4000: CALL 9064 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4004: LD_INT 104
4006: PPUSH
4007: LD_INT 94
4009: PPUSH
4010: LD_INT 3
4012: PPUSH
4013: CALL_OW 440
4017: PUSH
4018: LD_INT 0
4020: EQUAL
4021: PUSH
4022: LD_INT 20
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: CALL_OW 321
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: AND
4037: IFFALSE 4058
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4039: LD_EXP 23
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: PPUSH
4048: LD_INT 104
4050: PPUSH
4051: LD_INT 94
4053: PPUSH
4054: CALL 9064 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4058: LD_INT 3
4060: PPUSH
4061: LD_INT 24
4063: PPUSH
4064: LD_INT 53
4066: PPUSH
4067: CALL 7960 0 3
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: PUSH
4076: LD_EXP 18
4080: AND
4081: IFFALSE 4222
// begin need_buldozer := false ;
4083: LD_ADDR_EXP 18
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4091: LD_INT 3
4093: PPUSH
4094: LD_INT 24
4096: PPUSH
4097: LD_INT 53
4099: PPUSH
4100: CALL 7960 0 3
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_INT 67
4111: PPUSH
4112: LD_INT 39
4114: PPUSH
4115: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 24
4124: PPUSH
4125: LD_INT 53
4127: PPUSH
4128: CALL 7960 0 3
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PPUSH
4137: LD_INT 71
4139: PPUSH
4140: LD_INT 10
4142: PPUSH
4143: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4147: LD_INT 3
4149: PPUSH
4150: LD_INT 24
4152: PPUSH
4153: LD_INT 53
4155: PPUSH
4156: CALL 7960 0 3
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: PPUSH
4165: LD_INT 15
4167: PPUSH
4168: CALL 5551 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 24
4177: PPUSH
4178: LD_INT 53
4180: PPUSH
4181: CALL 7960 0 3
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: PPUSH
4190: LD_INT 350
4192: PPUSH
4193: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 24
4202: PPUSH
4203: LD_INT 53
4205: PPUSH
4206: CALL 7960 0 3
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PPUSH
4215: LD_INT 14
4217: PPUSH
4218: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4222: LD_INT 67
4224: PPUSH
4225: LD_INT 39
4227: PPUSH
4228: LD_INT 3
4230: PPUSH
4231: CALL_OW 440
4235: PUSH
4236: LD_INT 67
4238: PPUSH
4239: LD_INT 39
4241: PPUSH
4242: CALL_OW 428
4246: PUSH
4247: LD_INT 0
4249: EQUAL
4250: AND
4251: PUSH
4252: LD_INT 79
4254: PPUSH
4255: LD_INT 45
4257: PPUSH
4258: CALL_OW 428
4262: PPUSH
4263: CALL_OW 266
4267: PUSH
4268: LD_INT 0
4270: EQUAL
4271: AND
4272: PUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_INT 79
4278: PPUSH
4279: LD_INT 45
4281: PPUSH
4282: CALL 5451 0 3
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: AND
4291: IFFALSE 4394
// begin for i = 1 to ru_eng do
4293: LD_ADDR_VAR 0 1
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_EXP 21
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4392
// if IsInUnit ( ru_eng [ i ] ) then
4311: LD_EXP 21
4315: PUSH
4316: LD_VAR 0 1
4320: ARRAY
4321: PPUSH
4322: CALL_OW 310
4326: IFFALSE 4345
// ComExitBuilding ( ru_eng [ i ] ) else
4328: LD_EXP 21
4332: PUSH
4333: LD_VAR 0 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 122
4343: GO 4390
// if not HasTask ( ru_eng [ i ] ) then
4345: LD_EXP 21
4349: PUSH
4350: LD_VAR 0 1
4354: ARRAY
4355: PPUSH
4356: CALL_OW 314
4360: NOT
4361: IFFALSE 4390
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: LD_INT 30
4376: PPUSH
4377: LD_INT 67
4379: PPUSH
4380: LD_INT 39
4382: PPUSH
4383: LD_INT 3
4385: PPUSH
4386: CALL_OW 145
4390: GO 4308
4392: POP
4393: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 79
4399: PPUSH
4400: LD_INT 45
4402: PPUSH
4403: CALL 5451 0 3
4407: PUSH
4408: LD_INT 0
4410: EQUAL
4411: IFFALSE 4607
// begin if HexInfo ( 79 , 45 ) = 0 then
4413: LD_INT 79
4415: PPUSH
4416: LD_INT 45
4418: PPUSH
4419: CALL_OW 428
4423: PUSH
4424: LD_INT 0
4426: EQUAL
4427: IFFALSE 4449
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4429: LD_EXP 21
4433: PPUSH
4434: LD_INT 79
4436: PPUSH
4437: LD_INT 45
4439: PPUSH
4440: LD_INT 3
4442: PPUSH
4443: CALL 6975 0 4
4447: GO 4607
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4449: LD_INT 89
4451: PPUSH
4452: LD_INT 66
4454: PPUSH
4455: CALL_OW 428
4459: PUSH
4460: LD_INT 0
4462: EQUAL
4463: PUSH
4464: LD_INT 89
4466: PPUSH
4467: LD_INT 66
4469: PPUSH
4470: LD_INT 3
4472: PPUSH
4473: CALL_OW 440
4477: AND
4478: IFFALSE 4607
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4480: LD_INT 79
4482: PPUSH
4483: LD_INT 45
4485: PPUSH
4486: CALL_OW 428
4490: PPUSH
4491: CALL_OW 274
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 100
4501: PPUSH
4502: CALL_OW 277
// for i = 1 to ru_eng do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 21
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4605
// if IsInUnit ( ru_eng [ i ] ) then
4524: LD_EXP 21
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 310
4539: IFFALSE 4558
// ComExitBuilding ( ru_eng [ i ] ) else
4541: LD_EXP 21
4545: PUSH
4546: LD_VAR 0 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 122
4556: GO 4603
// if not HasTask ( ru_eng [ i ] ) then
4558: LD_EXP 21
4562: PUSH
4563: LD_VAR 0 1
4567: ARRAY
4568: PPUSH
4569: CALL_OW 314
4573: NOT
4574: IFFALSE 4603
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: LD_INT 29
4589: PPUSH
4590: LD_INT 89
4592: PPUSH
4593: LD_INT 66
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: CALL_OW 145
4603: GO 4521
4605: POP
4606: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4607: LD_INT 3
4609: PPUSH
4610: LD_INT 29
4612: PPUSH
4613: CALL 6209 0 2
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: PUSH
4622: LD_INT 1
4624: PPUSH
4625: LD_INT 36
4627: PPUSH
4628: LD_INT 6
4630: PPUSH
4631: CALL 5451 0 3
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: AND
4640: PUSH
4641: LD_INT 3
4643: PPUSH
4644: CALL 6118 0 1
4648: PPUSH
4649: LD_INT 29
4651: PPUSH
4652: CALL 5694 0 2
4656: AND
4657: IFFALSE 4760
// begin for i = 1 to ru_eng do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_EXP 21
4673: PUSH
4674: FOR_TO
4675: IFFALSE 4758
// begin if IsInUnit ( ru_eng [ i ] ) then
4677: LD_EXP 21
4681: PUSH
4682: LD_VAR 0 1
4686: ARRAY
4687: PPUSH
4688: CALL_OW 310
4692: IFFALSE 4711
// ComExitBuilding ( ru_eng [ i ] ) else
4694: LD_EXP 21
4698: PUSH
4699: LD_VAR 0 1
4703: ARRAY
4704: PPUSH
4705: CALL_OW 122
4709: GO 4756
// if not HasTask ( ru_eng [ i ] ) then
4711: LD_EXP 21
4715: PUSH
4716: LD_VAR 0 1
4720: ARRAY
4721: PPUSH
4722: CALL_OW 314
4726: NOT
4727: IFFALSE 4756
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: LD_INT 29
4742: PPUSH
4743: LD_INT 33
4745: PPUSH
4746: LD_INT 4
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL_OW 205
// end ; end ;
4756: GO 4674
4758: POP
4759: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4760: LD_EXP 21
4764: PUSH
4765: LD_INT 79
4767: PPUSH
4768: LD_INT 45
4770: PPUSH
4771: CALL_OW 428
4775: PUSH
4776: LD_INT 0
4778: GREATER
4779: AND
4780: PUSH
4781: LD_INT 79
4783: PPUSH
4784: LD_INT 45
4786: PPUSH
4787: CALL_OW 428
4791: PPUSH
4792: CALL_OW 266
4796: PUSH
4797: LD_INT 0
4799: EQUAL
4800: AND
4801: IFFALSE 4961
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4803: LD_INT 79
4805: PPUSH
4806: LD_INT 45
4808: PPUSH
4809: CALL_OW 428
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: LD_INT 3
4821: EQUAL
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 79
4828: PPUSH
4829: LD_INT 45
4831: PPUSH
4832: CALL 5451 0 3
4836: PUSH
4837: LD_INT 0
4839: EQUAL
4840: AND
4841: PUSH
4842: LD_INT 79
4844: PPUSH
4845: LD_INT 45
4847: PPUSH
4848: CALL_OW 428
4852: PPUSH
4853: CALL_OW 274
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: CALL_OW 275
4865: PUSH
4866: LD_INT 10
4868: GREATEREQUAL
4869: AND
4870: IFFALSE 4961
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4872: LD_EXP 21
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: CALL_OW 310
4885: IFFALSE 4902
// ComExitBuilding ( ru_eng [ 1 ] ) else
4887: LD_EXP 21
4891: PUSH
4892: LD_INT 1
4894: ARRAY
4895: PPUSH
4896: CALL_OW 122
4900: GO 4961
// if not HasTask ( ru_eng [ 1 ] ) then
4902: LD_EXP 21
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: CALL_OW 314
4915: NOT
4916: IFFALSE 4961
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4918: LD_EXP 21
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_INT 79
4929: PPUSH
4930: LD_INT 45
4932: PPUSH
4933: CALL_OW 428
4937: PPUSH
4938: LD_INT 3
4940: PPUSH
4941: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4945: LD_EXP 21
4949: PUSH
4950: LD_INT 1
4952: ARRAY
4953: PPUSH
4954: LD_INT 2
4956: PPUSH
4957: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4961: LD_EXP 21
4965: PUSH
4966: LD_INT 2
4968: GREATER
4969: PUSH
4970: LD_INT 79
4972: PPUSH
4973: LD_INT 45
4975: PPUSH
4976: CALL_OW 428
4980: PUSH
4981: LD_INT 0
4983: GREATER
4984: AND
4985: PUSH
4986: LD_INT 79
4988: PPUSH
4989: LD_INT 45
4991: PPUSH
4992: CALL_OW 428
4996: PPUSH
4997: CALL_OW 266
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: IFFALSE 5166
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5008: LD_INT 79
5010: PPUSH
5011: LD_INT 45
5013: PPUSH
5014: CALL_OW 428
5018: PPUSH
5019: CALL_OW 255
5023: PUSH
5024: LD_INT 3
5026: EQUAL
5027: PUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 79
5033: PPUSH
5034: LD_INT 45
5036: PPUSH
5037: CALL 5451 0 3
5041: PUSH
5042: LD_INT 0
5044: EQUAL
5045: AND
5046: PUSH
5047: LD_INT 79
5049: PPUSH
5050: LD_INT 45
5052: PPUSH
5053: CALL_OW 428
5057: PPUSH
5058: CALL_OW 274
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 275
5070: PUSH
5071: LD_INT 20
5073: GREATER
5074: AND
5075: IFFALSE 5166
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5077: LD_EXP 21
5081: PUSH
5082: LD_INT 2
5084: ARRAY
5085: PPUSH
5086: CALL_OW 310
5090: IFFALSE 5107
// ComExitBuilding ( ru_eng [ 2 ] ) else
5092: LD_EXP 21
5096: PUSH
5097: LD_INT 2
5099: ARRAY
5100: PPUSH
5101: CALL_OW 122
5105: GO 5166
// if not HasTask ( ru_eng [ 2 ] ) then
5107: LD_EXP 21
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 314
5120: NOT
5121: IFFALSE 5166
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5123: LD_EXP 21
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_INT 79
5134: PPUSH
5135: LD_INT 45
5137: PPUSH
5138: CALL_OW 428
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5150: LD_EXP 21
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: LD_INT 2
5161: PPUSH
5162: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 59
5171: PPUSH
5172: LD_INT 60
5174: PPUSH
5175: CALL 5451 0 3
5179: PUSH
5180: LD_INT 0
5182: EQUAL
5183: PUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 67
5189: PPUSH
5190: LD_INT 76
5192: PPUSH
5193: CALL 5451 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: AND
5202: PUSH
5203: LD_INT 1
5205: PPUSH
5206: LD_INT 79
5208: PPUSH
5209: LD_INT 100
5211: PPUSH
5212: CALL 5451 0 3
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5233
// CollectCrates ( 3 , west_crates ) ;
5223: LD_INT 3
5225: PPUSH
5226: LD_INT 13
5228: PPUSH
5229: CALL 11376 0 2
// end ;
5233: PPOPN 10
5235: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5236: LD_OWVAR 1
5240: PUSH
5241: LD_INT 111300
5243: LESSEQUAL
5244: PUSH
5245: LD_EXP 30
5249: NOT
5250: OR
5251: IFFALSE 5448
5253: GO 5255
5255: DISABLE
5256: LD_INT 0
5258: PPUSH
// begin enable ;
5259: ENABLE
// uc_nation := 3 ;
5260: LD_ADDR_OWVAR 21
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_side := 3 ;
5268: LD_ADDR_OWVAR 20
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5276: LD_ADDR_OWVAR 37
5280: PUSH
5281: LD_INT 22
5283: ST_TO_ADDR
// vc_engine := engine_siberite ;
5284: LD_ADDR_OWVAR 39
5288: PUSH
5289: LD_INT 3
5291: ST_TO_ADDR
// vc_control := control_computer ;
5292: LD_ADDR_OWVAR 38
5296: PUSH
5297: LD_INT 3
5299: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5300: LD_ADDR_OWVAR 40
5304: PUSH
5305: LD_INT 51
5307: ST_TO_ADDR
// veh := CreateVehicle ;
5308: LD_ADDR_VAR 0 1
5312: PUSH
5313: CALL_OW 45
5317: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 4
5325: PPUSH
5326: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5330: LD_VAR 0 1
5334: PPUSH
5335: LD_INT 10
5337: PPUSH
5338: LD_INT 0
5340: PPUSH
5341: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_INT 1
5352: PUSH
5353: LD_INT 2
5355: PUSH
5356: LD_INT 3
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 4
5373: PPUSH
5374: CALL_OW 12
5378: ARRAY
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5387: LD_VAR 0 1
5391: PPUSH
5392: LD_INT 2
5394: PPUSH
5395: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_INT 10
5406: PPUSH
5407: CALL_OW 173
// Wait ( 0 0$10 ) ;
5411: LD_INT 350
5413: PPUSH
5414: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5418: LD_INT 35
5420: PPUSH
5421: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5425: LD_VAR 0 1
5429: PPUSH
5430: LD_INT 10
5432: PPUSH
5433: CALL_OW 308
5437: IFFALSE 5418
// RemoveUnit ( veh ) ;
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 64
// end ; end_of_file
5448: PPOPN 1
5450: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5451: LD_INT 0
5453: PPUSH
5454: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5455: LD_ADDR_VAR 0 5
5459: PUSH
5460: LD_INT 22
5462: PUSH
5463: LD_VAR 0 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 69
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 73
5491: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5492: LD_ADDR_VAR 0 4
5496: PUSH
5497: LD_VAR 0 5
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_VAR 0 3
5511: PPUSH
5512: CALL_OW 297
5516: PUSH
5517: LD_INT 15
5519: LESS
5520: PUSH
5521: LD_INT 2
5523: PPUSH
5524: LD_INT 22
5526: PUSH
5527: LD_VAR 0 1
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 70
5540: PUSH
5541: LD_INT 0
5543: GREATER
5544: OR
5545: ST_TO_ADDR
// end ;
5546: LD_VAR 0 4
5550: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5551: LD_INT 0
5553: PPUSH
5554: PPUSH
// area = ListEnvironmentArea ( area ) ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 353
5569: ST_TO_ADDR
// if bulldozer > 0 then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_INT 0
5577: GREATER
5578: IFFALSE 5689
// for i = 1 to area do
5580: LD_ADDR_VAR 0 4
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_VAR 0 2
5594: PUSH
5595: FOR_TO
5596: IFFALSE 5687
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_VAR 0 4
5607: ARRAY
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 4
5622: ARRAY
5623: PUSH
5624: LD_INT 2
5626: ARRAY
5627: PPUSH
5628: CALL_OW 351
5632: IFFALSE 5685
// if not HasTask ( bulldozer ) then
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 314
5643: NOT
5644: IFFALSE 5685
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5646: LD_VAR 0 1
5650: PPUSH
5651: LD_VAR 0 2
5655: PUSH
5656: LD_VAR 0 4
5660: ARRAY
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_VAR 0 2
5670: PUSH
5671: LD_VAR 0 4
5675: ARRAY
5676: PUSH
5677: LD_INT 2
5679: ARRAY
5680: PPUSH
5681: CALL_OW 171
5685: GO 5595
5687: POP
5688: POP
// end ;
5689: LD_VAR 0 3
5693: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
// pom := GetBase ( bdepot ) ;
5699: LD_ADDR_VAR 0 4
5703: PUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 274
5713: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5714: LD_ADDR_VAR 0 5
5718: PUSH
5719: LD_VAR 0 2
5723: PPUSH
5724: LD_VAR 0 1
5728: PPUSH
5729: CALL_OW 248
5733: PPUSH
5734: CALL_OW 450
5738: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5739: LD_VAR 0 4
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 275
5751: PUSH
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: GREATEREQUAL
5761: PUSH
5762: LD_VAR 0 4
5766: PPUSH
5767: LD_INT 3
5769: PPUSH
5770: CALL_OW 275
5774: PUSH
5775: LD_VAR 0 5
5779: PUSH
5780: LD_INT 3
5782: ARRAY
5783: GREATEREQUAL
5784: AND
5785: IFFALSE 5797
// result := true else
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
5795: GO 5805
// result := false ;
5797: LD_ADDR_VAR 0 3
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// end ;
5805: LD_VAR 0 3
5809: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
5814: PPUSH
// pom := GetBase ( bdepot ) ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 274
5829: ST_TO_ADDR
// sor := [ ] ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: EMPTY
5836: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5837: LD_ADDR_VAR 0 4
5841: PUSH
5842: LD_VAR 0 4
5846: PUSH
5847: LD_VAR 0 3
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 275
5859: ADD
5860: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_VAR 0 4
5870: PUSH
5871: LD_VAR 0 3
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: CALL_OW 275
5883: ADD
5884: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_VAR 0 4
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: CALL_OW 275
5907: ADD
5908: ST_TO_ADDR
// result := sor ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_VAR 0 4
5918: ST_TO_ADDR
// end ;
5919: LD_VAR 0 2
5923: RET
// export function Hex ( x , y ) ; begin
5924: LD_INT 0
5926: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5927: LD_VAR 0 1
5931: PPUSH
5932: LD_VAR 0 2
5936: PPUSH
5937: CALL_OW 488
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: CALL_OW 428
5956: PUSH
5957: LD_INT 0
5959: EQUAL
5960: AND
5961: IFFALSE 5973
// result := true else
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 1
5970: ST_TO_ADDR
5971: GO 5981
// result := false ;
5973: LD_ADDR_VAR 0 3
5977: PUSH
5978: LD_INT 0
5980: ST_TO_ADDR
// end ;
5981: LD_VAR 0 3
5985: RET
// export function NeedBuilding ( side , btype ) ; begin
5986: LD_INT 0
5988: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
5989: LD_INT 22
5991: PUSH
5992: LD_VAR 0 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_VAR 0 2
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 3
6015: PUSH
6016: LD_INT 57
6018: PUSH
6019: EMPTY
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PPUSH
6031: CALL_OW 69
6035: PUSH
6036: LD_INT 0
6038: EQUAL
6039: IFFALSE 6051
// result := true else
6041: LD_ADDR_VAR 0 3
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
6049: GO 6059
// result := false ;
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// end ;
6059: LD_VAR 0 3
6063: RET
// export function NeedBase ( side ) ; begin
6064: LD_INT 0
6066: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6067: LD_VAR 0 1
6071: PPUSH
6072: LD_INT 0
6074: PPUSH
6075: CALL 5986 0 2
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL 5986 0 2
6092: AND
6093: IFFALSE 6105
// result := true else
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
6103: GO 6113
// result := false ;
6105: LD_ADDR_VAR 0 2
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// end ;
6113: LD_VAR 0 2
6117: RET
// export function MyBase ( side ) ; begin
6118: LD_INT 0
6120: PPUSH
// if not NeedBase ( side ) then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL 6064 0 1
6130: NOT
6131: IFFALSE 6196
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6133: LD_ADDR_VAR 0 2
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 2
6152: PUSH
6153: LD_INT 30
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: ST_TO_ADDR
6194: GO 6204
// result := false ;
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 2
6208: RET
// export function GetBuilding ( side , btype ) ; begin
6209: LD_INT 0
6211: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6212: LD_INT 22
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 30
6226: PUSH
6227: LD_VAR 0 2
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: LD_INT 0
6247: GREATER
6248: IFFALSE 6290
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6250: LD_ADDR_VAR 0 3
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 30
6269: PUSH
6270: LD_VAR 0 2
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 69
6287: ST_TO_ADDR
6288: GO 6298
// result := false ;
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// end ;
6298: LD_VAR 0 3
6302: RET
// export function GetCrates ( side ) ; begin
6303: LD_INT 0
6305: PPUSH
// result := 0 ;
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// if MyBase ( side ) then
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL 6118 0 1
6323: IFFALSE 6353
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL 6118 0 1
6339: PPUSH
6340: CALL_OW 274
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 275
6352: ST_TO_ADDR
// end ;
6353: LD_VAR 0 2
6357: RET
// export function GetLabs ( side ) ; begin
6358: LD_INT 0
6360: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 30
6383: PUSH
6384: LD_INT 6
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 8
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 30
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: PPUSH
6424: CALL_OW 69
6428: ST_TO_ADDR
// end ;
6429: LD_VAR 0 2
6433: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
6438: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6439: LD_ADDR_VAR 0 3
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: LD_INT 1
6451: PPUSH
6452: CALL_OW 268
6456: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6457: LD_ADDR_VAR 0 4
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 2
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: LD_VAR 0 3
6484: PUSH
6485: LD_VAR 0 4
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// end ;
6494: LD_VAR 0 2
6498: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6499: LD_INT 0
6501: PPUSH
6502: PPUSH
// result := false ;
6503: LD_ADDR_VAR 0 3
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// for i = 1 to tlist do
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_VAR 0 2
6525: PUSH
6526: FOR_TO
6527: IFFALSE 6567
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6529: LD_VAR 0 2
6533: PUSH
6534: LD_VAR 0 4
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 321
6549: PUSH
6550: LD_INT 2
6552: NONEQUAL
6553: IFFALSE 6565
// begin result := true ;
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// break ;
6563: GO 6567
// end ;
6565: GO 6526
6567: POP
6568: POP
// end ;
6569: LD_VAR 0 3
6573: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
// lab := GetLabs ( side ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL 6358 0 1
6598: ST_TO_ADDR
// tmp := 0 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 0
6606: ST_TO_ADDR
// list := [ ] ;
6607: LD_ADDR_VAR 0 8
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6614: LD_ADDR_VAR 0 10
6618: PUSH
6619: LD_INT 35
6621: PUSH
6622: LD_INT 45
6624: PUSH
6625: LD_INT 46
6627: PUSH
6628: LD_INT 47
6630: PUSH
6631: LD_INT 1
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 48
6639: PUSH
6640: LD_INT 49
6642: PUSH
6643: LD_INT 50
6645: PUSH
6646: LD_INT 20
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: ST_TO_ADDR
// for i = 1 to tlist do
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 2
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6729
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_VAR 0 4
6688: ARRAY
6689: PPUSH
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 321
6699: PUSH
6700: LD_INT 2
6702: NONEQUAL
6703: IFFALSE 6727
// list := list ^ tlist [ i ] ;
6705: LD_ADDR_VAR 0 8
6709: PUSH
6710: LD_VAR 0 8
6714: PUSH
6715: LD_VAR 0 2
6719: PUSH
6720: LD_VAR 0 4
6724: ARRAY
6725: ADD
6726: ST_TO_ADDR
6727: GO 6676
6729: POP
6730: POP
// if list then
6731: LD_VAR 0 8
6735: IFFALSE 6900
// begin for i = 1 to lab do
6737: LD_ADDR_VAR 0 4
6741: PUSH
6742: DOUBLE
6743: LD_INT 1
6745: DEC
6746: ST_TO_ADDR
6747: LD_VAR 0 5
6751: PUSH
6752: FOR_TO
6753: IFFALSE 6823
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6755: LD_VAR 0 8
6759: PUSH
6760: LD_INT 1
6762: ARRAY
6763: PUSH
6764: LD_VAR 0 10
6768: IN
6769: PUSH
6770: LD_VAR 0 8
6774: PUSH
6775: LD_INT 1
6777: ARRAY
6778: PPUSH
6779: CALL_OW 481
6783: PUSH
6784: LD_VAR 0 5
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: PPUSH
6795: CALL 6434 0 1
6799: IN
6800: OR
6801: IFFALSE 6821
// begin mylab := lab [ i ] ;
6803: LD_ADDR_VAR 0 9
6807: PUSH
6808: LD_VAR 0 5
6812: PUSH
6813: LD_VAR 0 4
6817: ARRAY
6818: ST_TO_ADDR
// break ;
6819: GO 6823
// end ;
6821: GO 6752
6823: POP
6824: POP
// if mylab then
6825: LD_VAR 0 9
6829: IFFALSE 6890
// begin if BuildingStatus ( mylab ) = bs_idle then
6831: LD_VAR 0 9
6835: PPUSH
6836: CALL_OW 461
6840: PUSH
6841: LD_INT 2
6843: EQUAL
6844: IFFALSE 6888
// for i = 1 to list do
6846: LD_ADDR_VAR 0 4
6850: PUSH
6851: DOUBLE
6852: LD_INT 1
6854: DEC
6855: ST_TO_ADDR
6856: LD_VAR 0 8
6860: PUSH
6861: FOR_TO
6862: IFFALSE 6886
// AddComResearch ( mylab , list [ i ] ) ;
6864: LD_VAR 0 9
6868: PPUSH
6869: LD_VAR 0 8
6873: PUSH
6874: LD_VAR 0 4
6878: ARRAY
6879: PPUSH
6880: CALL_OW 184
6884: GO 6861
6886: POP
6887: POP
// end else
6888: GO 6898
// result := false ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// end else
6898: GO 6908
// result := false ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// end ;
6908: LD_VAR 0 3
6912: RET
// export function GetTowers ( side ) ; begin
6913: LD_INT 0
6915: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6916: LD_ADDR_VAR 0 2
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_VAR 0 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 32
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 30
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 2
6974: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
// if Hex ( x , y ) then
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_VAR 0 3
6988: PPUSH
6989: CALL 5924 0 2
6993: IFFALSE 7068
// for i = 1 to plist do
6995: LD_ADDR_VAR 0 6
6999: PUSH
7000: DOUBLE
7001: LD_INT 1
7003: DEC
7004: ST_TO_ADDR
7005: LD_VAR 0 1
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7066
// if not HasTask ( plist [ i ] ) then
7013: LD_VAR 0 1
7017: PUSH
7018: LD_VAR 0 6
7022: ARRAY
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: IFFALSE 7064
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: LD_INT 0
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: LD_VAR 0 4
7059: PPUSH
7060: CALL_OW 145
7064: GO 7010
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 5
7072: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 266
7086: PUSH
7087: LD_INT 0
7089: EQUAL
7090: PUSH
7091: LD_VAR 0 2
7095: PPUSH
7096: LD_INT 1
7098: PPUSH
7099: CALL 5694 0 2
7103: AND
7104: PUSH
7105: LD_VAR 0 1
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: CALL_OW 255
7118: PPUSH
7119: CALL_OW 345
7123: NOT
7124: AND
7125: IFFALSE 7221
// begin ComUpgrade ( bident ) ;
7127: LD_VAR 0 2
7131: PPUSH
7132: CALL_OW 146
// for i = 1 to plist do
7136: LD_ADDR_VAR 0 4
7140: PUSH
7141: DOUBLE
7142: LD_INT 1
7144: DEC
7145: ST_TO_ADDR
7146: LD_VAR 0 1
7150: PUSH
7151: FOR_TO
7152: IFFALSE 7209
// if not HasTask ( plist [ i ] ) then
7154: LD_VAR 0 1
7158: PUSH
7159: LD_VAR 0 4
7163: ARRAY
7164: PPUSH
7165: CALL_OW 314
7169: NOT
7170: IFFALSE 7207
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: CALL_OW 250
7192: PPUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 251
7202: PPUSH
7203: CALL_OW 111
7207: GO 7151
7209: POP
7210: POP
// result := true ;
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// end else
7219: GO 7229
// result := false ;
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// end ;
7229: LD_VAR 0 3
7233: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7238: LD_VAR 0 1
7242: PUSH
7243: LD_INT 1
7245: ARRAY
7246: PPUSH
7247: CALL_OW 255
7251: PPUSH
7252: CALL 6303 0 1
7256: PUSH
7257: LD_INT 20
7259: GREATEREQUAL
7260: PUSH
7261: LD_VAR 0 2
7265: PPUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL 5924 0 2
7275: AND
7276: IFFALSE 7361
// begin for i = 1 to plist do
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: DOUBLE
7284: LD_INT 1
7286: DEC
7287: ST_TO_ADDR
7288: LD_VAR 0 1
7292: PUSH
7293: FOR_TO
7294: IFFALSE 7349
// if not HasTask ( plist [ i ] ) then
7296: LD_VAR 0 1
7300: PUSH
7301: LD_VAR 0 6
7305: ARRAY
7306: PPUSH
7307: CALL_OW 314
7311: NOT
7312: IFFALSE 7347
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: LD_VAR 0 3
7337: PPUSH
7338: LD_VAR 0 4
7342: PPUSH
7343: CALL_OW 145
7347: GO 7293
7349: POP
7350: POP
// result := true ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// end else
7359: GO 7369
// result := false ;
7361: LD_ADDR_VAR 0 5
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// end ;
7369: LD_VAR 0 5
7373: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7374: LD_INT 0
7376: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7377: LD_VAR 0 1
7381: PPUSH
7382: LD_INT 1
7384: PPUSH
7385: CALL_OW 268
7389: PUSH
7390: LD_INT 9
7392: EQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: CALL_OW 268
7406: PUSH
7407: LD_INT 9
7409: EQUAL
7410: AND
7411: IFFALSE 7508
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_VAR 0 2
7422: PPUSH
7423: CALL 5694 0 2
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: CALL 5694 0 2
7442: AND
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 461
7453: PUSH
7454: LD_INT 2
7456: EQUAL
7457: AND
7458: IFFALSE 7498
// begin ComUpgradeLab ( lab , bkind1 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_VAR 0 2
7469: PPUSH
7470: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: LD_VAR 0 3
7483: PPUSH
7484: CALL_OW 207
// result := true ;
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// end else
7496: GO 7506
// result := false ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 0
7505: ST_TO_ADDR
// end else
7506: GO 7516
// result := false ;
7508: LD_ADDR_VAR 0 4
7512: PUSH
7513: LD_INT 0
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 4
7520: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7521: LD_INT 0
7523: PPUSH
7524: PPUSH
7525: PPUSH
7526: PPUSH
7527: PPUSH
// p := 1 ;
7528: LD_ADDR_VAR 0 6
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 4
7553: DIVREAL
7554: PUSH
7555: FOR_TO
7556: IFFALSE 7805
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7558: LD_VAR 0 2
7562: PUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 1
7570: PLUS
7571: ARRAY
7572: PPUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 6
7582: PUSH
7583: LD_INT 2
7585: PLUS
7586: ARRAY
7587: PPUSH
7588: CALL_OW 428
7592: PUSH
7593: LD_INT 0
7595: EQUAL
7596: PUSH
7597: LD_VAR 0 2
7601: PUSH
7602: LD_VAR 0 6
7606: PUSH
7607: LD_INT 1
7609: PLUS
7610: ARRAY
7611: PPUSH
7612: LD_VAR 0 2
7616: PUSH
7617: LD_VAR 0 6
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: ARRAY
7626: PPUSH
7627: CALL 5924 0 2
7631: AND
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PPUSH
7642: CALL_OW 255
7646: PPUSH
7647: CALL 6303 0 1
7651: PUSH
7652: LD_INT 20
7654: GREATEREQUAL
7655: AND
7656: IFFALSE 7773
// begin for c = 1 to plist do
7658: LD_ADDR_VAR 0 7
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 1
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7767
// if not HasTask ( plist [ c ] ) then
7676: LD_VAR 0 1
7680: PUSH
7681: LD_VAR 0 7
7685: ARRAY
7686: PPUSH
7687: CALL_OW 314
7691: NOT
7692: IFFALSE 7765
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: LD_VAR 0 2
7709: PUSH
7710: LD_VAR 0 6
7714: ARRAY
7715: PPUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 1
7728: PLUS
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 2
7735: PUSH
7736: LD_VAR 0 6
7740: PUSH
7741: LD_INT 2
7743: PLUS
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 6
7755: PUSH
7756: LD_INT 3
7758: PLUS
7759: ARRAY
7760: PPUSH
7761: CALL_OW 145
7765: GO 7673
7767: POP
7768: POP
// break ;
7769: GO 7805
// end else
7771: GO 7803
// if ( p + 4 < tlist ) then
7773: LD_VAR 0 6
7777: PUSH
7778: LD_INT 4
7780: PLUS
7781: PUSH
7782: LD_VAR 0 2
7786: LESS
7787: IFFALSE 7803
// p := p + 4 ;
7789: LD_ADDR_VAR 0 6
7793: PUSH
7794: LD_VAR 0 6
7798: PUSH
7799: LD_INT 4
7801: PLUS
7802: ST_TO_ADDR
// end ;
7803: GO 7555
7805: POP
7806: POP
// end ;
7807: LD_VAR 0 3
7811: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
// tmp := GetTowers ( side ) ;
7818: LD_ADDR_VAR 0 5
7822: PUSH
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL 6913 0 1
7832: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7833: LD_ADDR_VAR 0 6
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 3
7845: PPUSH
7846: CALL 6209 0 2
7850: PUSH
7851: LD_INT 1
7853: ARRAY
7854: ST_TO_ADDR
// if fac then
7855: LD_VAR 0 6
7859: IFFALSE 7955
// for i = 1 to tmp do
7861: LD_ADDR_VAR 0 4
7865: PUSH
7866: DOUBLE
7867: LD_INT 1
7869: DEC
7870: ST_TO_ADDR
7871: LD_VAR 0 5
7875: PUSH
7876: FOR_TO
7877: IFFALSE 7953
// if GetBWeapon ( tmp [ i ] ) = 0 then
7879: LD_VAR 0 5
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PPUSH
7890: CALL_OW 269
7894: PUSH
7895: LD_INT 0
7897: EQUAL
7898: IFFALSE 7951
// begin if BuildingStatus ( fac ) = bs_idle then
7900: LD_VAR 0 6
7904: PPUSH
7905: CALL_OW 461
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: IFFALSE 7949
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7915: LD_VAR 0 5
7919: PUSH
7920: LD_VAR 0 4
7924: ARRAY
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: PPUSH
7934: LD_VAR 0 2
7938: PPUSH
7939: CALL_OW 12
7943: ARRAY
7944: PPUSH
7945: CALL_OW 148
// break ;
7949: GO 7953
// end ;
7951: GO 7876
7953: POP
7954: POP
// end ;
7955: LD_VAR 0 3
7959: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7960: LD_INT 0
7962: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7963: LD_INT 22
7965: PUSH
7966: LD_VAR 0 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 34
7977: PUSH
7978: LD_VAR 0 3
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 31
7989: PUSH
7990: LD_VAR 0 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: PPUSH
8007: CALL_OW 69
8011: IFFALSE 8069
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_INT 22
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 34
8032: PUSH
8033: LD_VAR 0 3
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 31
8044: PUSH
8045: LD_VAR 0 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: ST_TO_ADDR
8067: GO 8077
// result := false ;
8069: LD_ADDR_VAR 0 4
8073: PUSH
8074: LD_INT 0
8076: ST_TO_ADDR
// end ;
8077: LD_VAR 0 4
8081: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8082: LD_INT 0
8084: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: LD_VAR 0 5
8109: PPUSH
8110: CALL_OW 448
8114: PUSH
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_VAR 0 3
8124: PPUSH
8125: LD_VAR 0 4
8129: PPUSH
8130: LD_VAR 0 5
8134: PPUSH
8135: CALL_OW 449
8139: PUSH
8140: LD_INT 1
8142: ARRAY
8143: PUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL 5810 0 1
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: LESSEQUAL
8158: AND
8159: PUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: LD_VAR 0 3
8169: PPUSH
8170: LD_VAR 0 4
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 449
8184: PUSH
8185: LD_INT 2
8187: ARRAY
8188: PUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL 5810 0 1
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: LESSEQUAL
8203: AND
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_VAR 0 3
8214: PPUSH
8215: LD_VAR 0 4
8219: PPUSH
8220: LD_VAR 0 5
8224: PPUSH
8225: CALL_OW 449
8229: PUSH
8230: LD_INT 3
8232: ARRAY
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL 5810 0 1
8243: PUSH
8244: LD_INT 3
8246: ARRAY
8247: LESSEQUAL
8248: AND
8249: IFFALSE 8296
// begin if debug then
8251: LD_EXP 1
8255: IFFALSE 8265
// display_strings := Factory work! ;
8257: LD_ADDR_OWVAR 47
8261: PUSH
8262: LD_STRING Factory work!
8264: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_VAR 0 5
8289: PPUSH
8290: CALL_OW 125
// end else
8294: GO 8304
// result := false ;
8296: LD_ADDR_VAR 0 6
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// end ;
8304: LD_VAR 0 6
8308: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8309: LD_INT 0
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8315: LD_ADDR_VAR 0 6
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 30
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PPUSH
8348: CALL_OW 69
8352: ST_TO_ADDR
// tmp := [ ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for i = 1 to filter do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_VAR 0 6
8374: PUSH
8375: FOR_TO
8376: IFFALSE 8464
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_VAR 0 5
8387: PUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_VAR 0 4
8397: ARRAY
8398: PPUSH
8399: CALL_OW 266
8403: PUSH
8404: LD_VAR 0 6
8408: PUSH
8409: LD_VAR 0 4
8413: ARRAY
8414: PPUSH
8415: CALL_OW 250
8419: PUSH
8420: LD_VAR 0 6
8424: PUSH
8425: LD_VAR 0 4
8429: ARRAY
8430: PPUSH
8431: CALL_OW 251
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_VAR 0 4
8445: ARRAY
8446: PPUSH
8447: CALL_OW 254
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: ADD
8461: ST_TO_ADDR
// end ;
8462: GO 8375
8464: POP
8465: POP
// result := tmp ;
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: LD_VAR 0 5
8475: ST_TO_ADDR
// end ;
8476: LD_VAR 0 3
8480: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8481: LD_INT 0
8483: PPUSH
8484: PPUSH
8485: PPUSH
// for i = 1 to list do
8486: LD_ADDR_VAR 0 4
8490: PUSH
8491: DOUBLE
8492: LD_INT 1
8494: DEC
8495: ST_TO_ADDR
8496: LD_VAR 0 2
8500: PUSH
8501: FOR_TO
8502: IFFALSE 9057
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8504: LD_VAR 0 2
8508: PUSH
8509: LD_VAR 0 4
8513: ARRAY
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 2
8523: PUSH
8524: LD_VAR 0 4
8528: ARRAY
8529: PUSH
8530: LD_INT 2
8532: ARRAY
8533: PPUSH
8534: CALL_OW 428
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: IFFALSE 8828
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8544: LD_VAR 0 2
8548: PUSH
8549: LD_VAR 0 4
8553: ARRAY
8554: PUSH
8555: LD_INT 1
8557: ARRAY
8558: PPUSH
8559: LD_VAR 0 2
8563: PUSH
8564: LD_VAR 0 4
8568: ARRAY
8569: PUSH
8570: LD_INT 2
8572: ARRAY
8573: PPUSH
8574: CALL_OW 428
8578: PPUSH
8579: CALL_OW 248
8583: PUSH
8584: LD_INT 3
8586: EQUAL
8587: IFFALSE 8713
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_VAR 0 4
8598: ARRAY
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_VAR 0 4
8613: ARRAY
8614: PUSH
8615: LD_INT 2
8617: ARRAY
8618: PPUSH
8619: CALL_OW 428
8623: PPUSH
8624: CALL_OW 274
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: CALL_OW 275
8636: PUSH
8637: LD_INT 15
8639: GREATEREQUAL
8640: IFFALSE 8711
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8642: LD_VAR 0 2
8646: PUSH
8647: LD_VAR 0 4
8651: ARRAY
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 2
8661: PUSH
8662: LD_VAR 0 4
8666: ARRAY
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: CALL_OW 428
8676: PPUSH
8677: LD_VAR 0 2
8681: PUSH
8682: LD_VAR 0 4
8686: ARRAY
8687: PUSH
8688: LD_INT 4
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 2
8696: PUSH
8697: LD_VAR 0 4
8701: ARRAY
8702: PUSH
8703: LD_INT 5
8705: ARRAY
8706: PPUSH
8707: CALL 7374 0 3
// end else
8711: GO 8782
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8713: LD_VAR 0 2
8717: PUSH
8718: LD_VAR 0 4
8722: ARRAY
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: LD_VAR 0 2
8732: PUSH
8733: LD_VAR 0 4
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: PPUSH
8743: CALL_OW 428
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 4
8761: ARRAY
8762: PPUSH
8763: LD_VAR 0 2
8767: PUSH
8768: LD_VAR 0 4
8772: ARRAY
8773: PUSH
8774: LD_INT 5
8776: ARRAY
8777: PPUSH
8778: CALL 7374 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8782: LD_VAR 0 1
8786: PPUSH
8787: LD_VAR 0 2
8791: PUSH
8792: LD_VAR 0 4
8796: ARRAY
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_VAR 0 4
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: PPUSH
8817: CALL_OW 428
8821: PPUSH
8822: CALL 10326 0 2
// end else
8826: GO 9055
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8828: LD_VAR 0 1
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PPUSH
8837: CALL_OW 255
8841: PPUSH
8842: CALL 6118 0 1
8846: PPUSH
8847: LD_INT 6
8849: PPUSH
8850: CALL 5694 0 2
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: CALL_OW 255
8868: PPUSH
8869: CALL 6118 0 1
8873: PPUSH
8874: LD_VAR 0 2
8878: PUSH
8879: LD_VAR 0 4
8883: ARRAY
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PPUSH
8889: CALL 5694 0 2
8893: AND
8894: PUSH
8895: LD_VAR 0 1
8899: PUSH
8900: LD_INT 1
8902: ARRAY
8903: PPUSH
8904: CALL_OW 255
8908: PPUSH
8909: CALL 6118 0 1
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: ARRAY
8924: PUSH
8925: LD_INT 5
8927: ARRAY
8928: PPUSH
8929: CALL 5694 0 2
8933: AND
8934: IFFALSE 9055
// for p = 1 to plist do
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_VAR 0 1
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9053
// if IsInUnit ( plist [ p ] ) then
8954: LD_VAR 0 1
8958: PUSH
8959: LD_VAR 0 5
8963: ARRAY
8964: PPUSH
8965: CALL_OW 310
8969: IFFALSE 8988
// ComExitBuilding ( plist [ p ] ) else
8971: LD_VAR 0 1
8975: PUSH
8976: LD_VAR 0 5
8980: ARRAY
8981: PPUSH
8982: CALL_OW 122
8986: GO 9051
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
8988: LD_VAR 0 1
8992: PUSH
8993: LD_VAR 0 5
8997: ARRAY
8998: PPUSH
8999: LD_INT 6
9001: PPUSH
9002: LD_VAR 0 2
9006: PUSH
9007: LD_VAR 0 4
9011: ARRAY
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: LD_VAR 0 2
9021: PUSH
9022: LD_VAR 0 4
9026: ARRAY
9027: PUSH
9028: LD_INT 2
9030: ARRAY
9031: PPUSH
9032: LD_VAR 0 2
9036: PUSH
9037: LD_VAR 0 4
9041: ARRAY
9042: PUSH
9043: LD_INT 3
9045: ARRAY
9046: PPUSH
9047: CALL_OW 145
9051: GO 8951
9053: POP
9054: POP
// end ;
9055: GO 8501
9057: POP
9058: POP
// end ;
9059: LD_VAR 0 3
9063: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9064: LD_INT 0
9066: PPUSH
// if IsInUnit ( sci ) then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 310
9076: IFFALSE 9089
// ComExitBuilding ( sci ) else
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 122
9087: GO 9120
// if not HasTask ( sci ) then
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 314
9098: NOT
9099: IFFALSE 9120
// begin ComMoveXY ( sci , x , y ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: CALL_OW 111
// end ; end ;
9120: LD_VAR 0 4
9124: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
9130: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_INT 22
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 21
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: PUSH
9167: LD_VAR 0 3
9171: DIFF
9172: ST_TO_ADDR
// tmp := tag_list ;
9173: LD_ADDR_VAR 0 7
9177: PUSH
9178: LD_VAR 0 2
9182: ST_TO_ADDR
// for i = 1 to filter do
9183: LD_ADDR_VAR 0 5
9187: PUSH
9188: DOUBLE
9189: LD_INT 1
9191: DEC
9192: ST_TO_ADDR
9193: LD_VAR 0 6
9197: PUSH
9198: FOR_TO
9199: IFFALSE 9468
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9201: LD_VAR 0 6
9205: PUSH
9206: LD_VAR 0 5
9210: ARRAY
9211: PPUSH
9212: CALL_OW 256
9216: PUSH
9217: LD_INT 1000
9219: EQUAL
9220: PUSH
9221: LD_VAR 0 6
9225: PUSH
9226: LD_VAR 0 5
9230: ARRAY
9231: PPUSH
9232: CALL_OW 110
9236: PUSH
9237: LD_INT 100
9239: GREATEREQUAL
9240: AND
9241: IFFALSE 9283
// begin SetTag ( filter [ i ] , 0 ) ;
9243: LD_VAR 0 6
9247: PUSH
9248: LD_VAR 0 5
9252: ARRAY
9253: PPUSH
9254: LD_INT 0
9256: PPUSH
9257: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9261: LD_ADDR_VAR 0 7
9265: PUSH
9266: LD_VAR 0 7
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_VAR 0 5
9280: ARRAY
9281: DIFF
9282: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9283: LD_VAR 0 6
9287: PUSH
9288: LD_VAR 0 5
9292: ARRAY
9293: PPUSH
9294: CALL_OW 256
9298: PUSH
9299: LD_INT 1000
9301: LESS
9302: IFFALSE 9466
// begin if not filter [ i ] in tmp then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_VAR 0 5
9313: ARRAY
9314: PUSH
9315: LD_VAR 0 7
9319: IN
9320: NOT
9321: IFFALSE 9345
// tmp := tmp ^ filter [ i ] ;
9323: LD_ADDR_VAR 0 7
9327: PUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_VAR 0 6
9337: PUSH
9338: LD_VAR 0 5
9342: ARRAY
9343: ADD
9344: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9345: LD_VAR 0 6
9349: PUSH
9350: LD_VAR 0 5
9354: ARRAY
9355: PPUSH
9356: CALL_OW 256
9360: PUSH
9361: LD_INT 250
9363: LESS
9364: IFFALSE 9386
// SetTag ( filter [ i ] , 100 ) else
9366: LD_VAR 0 6
9370: PUSH
9371: LD_VAR 0 5
9375: ARRAY
9376: PPUSH
9377: LD_INT 100
9379: PPUSH
9380: CALL_OW 109
9384: GO 9466
// if GetLives ( filter [ i ] ) < 500 then
9386: LD_VAR 0 6
9390: PUSH
9391: LD_VAR 0 5
9395: ARRAY
9396: PPUSH
9397: CALL_OW 256
9401: PUSH
9402: LD_INT 500
9404: LESS
9405: IFFALSE 9427
// SetTag ( filter [ i ] , 101 ) else
9407: LD_VAR 0 6
9411: PUSH
9412: LD_VAR 0 5
9416: ARRAY
9417: PPUSH
9418: LD_INT 101
9420: PPUSH
9421: CALL_OW 109
9425: GO 9466
// if GetLives ( filter [ i ] ) < 1000 then
9427: LD_VAR 0 6
9431: PUSH
9432: LD_VAR 0 5
9436: ARRAY
9437: PPUSH
9438: CALL_OW 256
9442: PUSH
9443: LD_INT 1000
9445: LESS
9446: IFFALSE 9466
// SetTag ( filter [ i ] , 102 ) ;
9448: LD_VAR 0 6
9452: PUSH
9453: LD_VAR 0 5
9457: ARRAY
9458: PPUSH
9459: LD_INT 102
9461: PPUSH
9462: CALL_OW 109
// end ; end ;
9466: GO 9198
9468: POP
9469: POP
// result := tmp ;
9470: LD_ADDR_VAR 0 4
9474: PUSH
9475: LD_VAR 0 7
9479: ST_TO_ADDR
// end ;
9480: LD_VAR 0 4
9484: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9492: LD_ADDR_VAR 0 7
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 3
9545: PPUSH
9546: CALL_OW 12
9550: ST_TO_ADDR
// if filter > 0 then
9551: LD_VAR 0 7
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 9761
// for i = 1 to list do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_VAR 0 1
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9759
// for ta in filter do
9579: LD_ADDR_VAR 0 4
9583: PUSH
9584: LD_VAR 0 7
9588: PUSH
9589: FOR_IN
9590: IFFALSE 9755
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9592: LD_VAR 0 1
9596: PUSH
9597: LD_VAR 0 6
9601: ARRAY
9602: PPUSH
9603: LD_VAR 0 4
9607: PPUSH
9608: CALL_OW 296
9612: PUSH
9613: LD_INT 13
9615: LESSEQUAL
9616: IFFALSE 9753
// begin case c of 1 :
9618: LD_VAR 0 5
9622: PUSH
9623: LD_INT 1
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9669
9631: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9632: LD_VAR 0 1
9636: PUSH
9637: LD_VAR 0 6
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 4
9647: PPUSH
9648: CALL_OW 250
9652: PPUSH
9653: LD_VAR 0 4
9657: PPUSH
9658: CALL_OW 251
9662: PPUSH
9663: CALL_OW 154
9667: GO 9753
9669: LD_INT 2
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9741
9677: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9678: LD_VAR 0 1
9682: PUSH
9683: LD_VAR 0 6
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 4
9693: PPUSH
9694: CALL_OW 250
9698: PUSH
9699: LD_INT 1
9701: NEG
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 12
9710: PLUS
9711: PPUSH
9712: LD_VAR 0 4
9716: PPUSH
9717: CALL_OW 251
9721: PUSH
9722: LD_INT 1
9724: NEG
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 12
9733: PLUS
9734: PPUSH
9735: CALL_OW 153
9739: GO 9753
9741: LD_INT 3
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9752
9749: POP
// ; end ;
9750: GO 9753
9752: POP
// end ; end ;
9753: GO 9589
9755: POP
9756: POP
9757: GO 9576
9759: POP
9760: POP
// end ;
9761: LD_VAR 0 3
9765: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9766: LD_INT 0
9768: PPUSH
9769: PPUSH
// for i = 1 to plist do
9770: LD_ADDR_VAR 0 3
9774: PUSH
9775: DOUBLE
9776: LD_INT 1
9778: DEC
9779: ST_TO_ADDR
9780: LD_VAR 0 1
9784: PUSH
9785: FOR_TO
9786: IFFALSE 9988
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9788: LD_VAR 0 1
9792: PUSH
9793: LD_VAR 0 3
9797: ARRAY
9798: PPUSH
9799: CALL_OW 310
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: PPUSH
9817: CALL_OW 69
9821: IN
9822: NOT
9823: IFFALSE 9968
// begin if IsInUnit ( plist [ i ] ) then
9825: LD_VAR 0 1
9829: PUSH
9830: LD_VAR 0 3
9834: ARRAY
9835: PPUSH
9836: CALL_OW 310
9840: IFFALSE 9859
// ComExitBuilding ( plist [ i ] ) else
9842: LD_VAR 0 1
9846: PUSH
9847: LD_VAR 0 3
9851: ARRAY
9852: PPUSH
9853: CALL_OW 122
9857: GO 9966
// if not HasTask ( plist [ i ] ) then
9859: LD_VAR 0 1
9863: PUSH
9864: LD_VAR 0 3
9868: ARRAY
9869: PPUSH
9870: CALL_OW 314
9874: NOT
9875: IFFALSE 9966
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: CALL_OW 255
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 30
9911: PUSH
9912: LD_INT 5
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: PPUSH
9928: LD_VAR 0 1
9932: PUSH
9933: LD_VAR 0 3
9937: ARRAY
9938: PPUSH
9939: CALL_OW 74
9943: PPUSH
9944: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9948: LD_VAR 0 1
9952: PUSH
9953: LD_VAR 0 3
9957: ARRAY
9958: PPUSH
9959: LD_INT 9
9961: PPUSH
9962: CALL_OW 183
// end ; end else
9966: GO 9986
// ComChangeProfession ( plist [ i ] , 9 ) ;
9968: LD_VAR 0 1
9972: PUSH
9973: LD_VAR 0 3
9977: ARRAY
9978: PPUSH
9979: LD_INT 9
9981: PPUSH
9982: CALL_OW 123
9986: GO 9785
9988: POP
9989: POP
// end ;
9990: LD_VAR 0 2
9994: RET
// export function GetHuman ( side ) ; begin
9995: LD_INT 0
9997: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_VAR 0 1
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 21
10017: PUSH
10018: LD_INT 1
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 25
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 25
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: ST_TO_ADDR
// end ;
10085: LD_VAR 0 2
10089: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
// uc_side := 0 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_nation := 0 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: DOUBLE
10117: LD_INT 1
10119: DEC
10120: ST_TO_ADDR
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: LD_INT 6
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: LD_OWVAR 67
10139: ARRAY
10140: PUSH
10141: FOR_TO
10142: IFFALSE 10213
// begin hc_class = class_tiger ;
10144: LD_ADDR_OWVAR 28
10148: PUSH
10149: LD_INT 14
10151: ST_TO_ADDR
// hc_gallery = sandnature ;
10152: LD_ADDR_OWVAR 33
10156: PUSH
10157: LD_STRING sandnature
10159: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10160: LD_ADDR_OWVAR 35
10164: PUSH
10165: LD_INT 0
10167: PPUSH
10168: LD_INT 50
10170: PPUSH
10171: CALL_OW 12
10175: ST_TO_ADDR
// hc_face_number = 3 ;
10176: LD_ADDR_OWVAR 34
10180: PUSH
10181: LD_INT 3
10183: ST_TO_ADDR
// tiger := CreateHuman ;
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: CALL_OW 44
10193: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: LD_INT 0
10206: PPUSH
10207: CALL_OW 49
// end ;
10211: GO 10141
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10220: LD_INT 0
10222: PPUSH
10223: PPUSH
10224: PPUSH
// uc_side := 0 ;
10225: LD_ADDR_OWVAR 20
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// uc_nation := 0 ;
10233: LD_ADDR_OWVAR 21
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// for i = 1 to 8 do
10241: LD_ADDR_VAR 0 4
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_INT 8
10253: PUSH
10254: FOR_TO
10255: IFFALSE 10319
// begin hc_class = class_apeman ;
10257: LD_ADDR_OWVAR 28
10261: PUSH
10262: LD_INT 12
10264: ST_TO_ADDR
// hc_gallery =  ;
10265: LD_ADDR_OWVAR 33
10269: PUSH
10270: LD_STRING 
10272: ST_TO_ADDR
// hc_agressivity = Rand ( - 2 , 2 ) ;
10273: LD_ADDR_OWVAR 35
10277: PUSH
10278: LD_INT 2
10280: NEG
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: CALL_OW 12
10289: ST_TO_ADDR
// ape := CreateHuman ;
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: CALL_OW 44
10299: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// end ;
10317: GO 10254
10319: POP
10320: POP
// end ;
10321: LD_VAR 0 2
10325: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// if BuildingStatus ( b ) = bs_build then
10330: LD_VAR 0 2
10334: PPUSH
10335: CALL_OW 461
10339: PUSH
10340: LD_INT 1
10342: EQUAL
10343: IFFALSE 10529
// for i = 1 to plist do
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: DOUBLE
10351: LD_INT 1
10353: DEC
10354: ST_TO_ADDR
10355: LD_VAR 0 1
10359: PUSH
10360: FOR_TO
10361: IFFALSE 10527
// if IsInUnit ( plist [ i ] ) then
10363: LD_VAR 0 1
10367: PUSH
10368: LD_VAR 0 4
10372: ARRAY
10373: PPUSH
10374: CALL_OW 310
10378: IFFALSE 10461
// begin ComExitBuilding ( plist [ i ] ) ;
10380: LD_VAR 0 1
10384: PUSH
10385: LD_VAR 0 4
10389: ARRAY
10390: PPUSH
10391: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10395: LD_VAR 0 1
10399: PUSH
10400: LD_VAR 0 4
10404: ARRAY
10405: PPUSH
10406: LD_STRING h
10408: PUSH
10409: LD_VAR 0 2
10413: PPUSH
10414: CALL_OW 250
10418: PUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 251
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: PPUSH
10455: CALL_OW 447
// end else
10459: GO 10525
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10461: LD_VAR 0 1
10465: PUSH
10466: LD_VAR 0 4
10470: ARRAY
10471: PPUSH
10472: LD_STRING h
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 251
10494: PUSH
10495: LD_VAR 0 2
10499: PUSH
10500: LD_INT 0
10502: PUSH
10503: LD_INT 0
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: PPUSH
10521: CALL_OW 446
10525: GO 10360
10527: POP
10528: POP
// end ;
10529: LD_VAR 0 3
10533: RET
// export function WantRepair ( eng ) ; begin
10534: LD_INT 0
10536: PPUSH
// if GetTaskList ( eng ) > 0 then
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 437
10546: PUSH
10547: LD_INT 0
10549: GREATER
10550: IFFALSE 10595
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 437
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PUSH
10566: LD_INT 1
10568: ARRAY
10569: PUSH
10570: LD_STRING o
10572: EQUAL
10573: IFFALSE 10585
// result := true else
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
10583: GO 10593
// result := false ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 0
10592: ST_TO_ADDR
// end else
10593: GO 10603
// result := false ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// end ;
10603: LD_VAR 0 2
10607: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// if btype = - 1 then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: NEG
10622: EQUAL
10623: IFFALSE 10663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10625: LD_ADDR_VAR 0 5
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: ST_TO_ADDR
10661: GO 10701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10663: LD_ADDR_VAR 0 5
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_VAR 0 2
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// list := [ ] ;
10701: LD_ADDR_VAR 0 6
10705: PUSH
10706: EMPTY
10707: ST_TO_ADDR
// for i = 1 to tmp do
10708: LD_ADDR_VAR 0 4
10712: PUSH
10713: DOUBLE
10714: LD_INT 1
10716: DEC
10717: ST_TO_ADDR
10718: LD_VAR 0 5
10722: PUSH
10723: FOR_TO
10724: IFFALSE 10812
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10726: LD_ADDR_VAR 0 6
10730: PUSH
10731: LD_VAR 0 6
10735: PUSH
10736: LD_VAR 0 5
10740: PUSH
10741: LD_VAR 0 4
10745: ARRAY
10746: PPUSH
10747: CALL_OW 266
10751: PUSH
10752: LD_VAR 0 5
10756: PUSH
10757: LD_VAR 0 4
10761: ARRAY
10762: PPUSH
10763: CALL_OW 250
10767: PUSH
10768: LD_VAR 0 5
10772: PUSH
10773: LD_VAR 0 4
10777: ARRAY
10778: PPUSH
10779: CALL_OW 251
10783: PUSH
10784: LD_VAR 0 5
10788: PUSH
10789: LD_VAR 0 4
10793: ARRAY
10794: PPUSH
10795: CALL_OW 254
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: ADD
10809: ST_TO_ADDR
10810: GO 10723
10812: POP
10813: POP
// result = list ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_VAR 0 6
10823: ST_TO_ADDR
// end ;
10824: LD_VAR 0 3
10828: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 81
10842: PUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 255
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PPUSH
10862: LD_VAR 0 1
10866: PPUSH
10867: CALL_OW 74
10871: PPUSH
10872: CALL_OW 296
10876: PUSH
10877: LD_INT 18
10879: LESS
10880: IFFALSE 10925
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 81
10889: PUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 255
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 69
10908: PPUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: CALL_OW 74
10918: PPUSH
10919: CALL_OW 115
10923: GO 10944
// ComMoveXY ( behemoth , x , y ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_VAR 0 4
10934: PPUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: CALL_OW 111
// if time_lapsers_list > 0 then
10944: LD_VAR 0 2
10948: PUSH
10949: LD_INT 0
10951: GREATER
10952: IFFALSE 11142
// begin for i = 1 to time_lapsers_list do
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: DOUBLE
10960: LD_INT 1
10962: DEC
10963: ST_TO_ADDR
10964: LD_VAR 0 2
10968: PUSH
10969: FOR_TO
10970: IFFALSE 11140
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10972: LD_VAR 0 2
10976: PUSH
10977: LD_VAR 0 7
10981: ARRAY
10982: PPUSH
10983: CALL_OW 256
10987: PUSH
10988: LD_INT 250
10990: GREATEREQUAL
10991: PUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 7
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 296
11012: PUSH
11013: LD_INT 9
11015: GREATER
11016: AND
11017: IFFALSE 11054
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 7
11028: ARRAY
11029: PPUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 250
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 251
11049: PPUSH
11050: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11054: LD_VAR 0 2
11058: PUSH
11059: LD_VAR 0 7
11063: ARRAY
11064: PPUSH
11065: CALL_OW 256
11069: PUSH
11070: LD_INT 500
11072: LESS
11073: PUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 256
11083: PUSH
11084: LD_INT 700
11086: GREATER
11087: AND
11088: IFFALSE 11138
// for p = 1 to mechanic_list do
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: DOUBLE
11096: LD_INT 1
11098: DEC
11099: ST_TO_ADDR
11100: LD_VAR 0 3
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11136
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11108: LD_VAR 0 3
11112: PUSH
11113: LD_VAR 0 8
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 2
11123: PUSH
11124: LD_VAR 0 7
11128: ARRAY
11129: PPUSH
11130: CALL_OW 129
11134: GO 11105
11136: POP
11137: POP
// end ;
11138: GO 10969
11140: POP
11141: POP
// end ; if mechanic_list then
11142: LD_VAR 0 3
11146: IFFALSE 11327
// begin for i = 1 to mechanic_list do
11148: LD_ADDR_VAR 0 7
11152: PUSH
11153: DOUBLE
11154: LD_INT 1
11156: DEC
11157: ST_TO_ADDR
11158: LD_VAR 0 3
11162: PUSH
11163: FOR_TO
11164: IFFALSE 11325
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 7
11175: ARRAY
11176: PPUSH
11177: CALL_OW 256
11181: PUSH
11182: LD_INT 333
11184: LESS
11185: IFFALSE 11209
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11187: LD_ADDR_EXP 15
11191: PUSH
11192: LD_EXP 15
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 7
11206: ARRAY
11207: DIFF
11208: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_VAR 0 7
11218: ARRAY
11219: PPUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 296
11229: PUSH
11230: LD_INT 9
11232: GREATER
11233: PUSH
11234: LD_VAR 0 3
11238: PUSH
11239: LD_VAR 0 7
11243: ARRAY
11244: PPUSH
11245: CALL_OW 314
11249: NOT
11250: AND
11251: IFFALSE 11288
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11253: LD_VAR 0 3
11257: PUSH
11258: LD_VAR 0 7
11262: ARRAY
11263: PPUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 250
11273: PPUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 251
11283: PPUSH
11284: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 256
11297: PUSH
11298: LD_INT 700
11300: LESS
11301: IFFALSE 11323
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11303: LD_VAR 0 3
11307: PUSH
11308: LD_VAR 0 7
11312: ARRAY
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 129
// end ;
11323: GO 11163
11325: POP
11326: POP
// end ; end ;
11327: LD_VAR 0 6
11331: RET
// export function GetBehemoth ( side ) ; begin
11332: LD_INT 0
11334: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_VAR 0 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 31
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// end ;
11371: LD_VAR 0 2
11375: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11376: LD_INT 0
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11384: LD_ADDR_VAR 0 6
11388: PUSH
11389: LD_VAR 0 2
11393: PPUSH
11394: CALL_OW 435
11398: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11399: LD_ADDR_VAR 0 5
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_VAR 0 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: ST_TO_ADDR
// if skr then
11453: LD_VAR 0 6
11457: IFFALSE 11622
// begin if engs then
11459: LD_VAR 0 5
11463: IFFALSE 11622
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11465: LD_ADDR_VAR 0 8
11469: PUSH
11470: LD_VAR 0 6
11474: PUSH
11475: LD_INT 1
11477: ARRAY
11478: PPUSH
11479: LD_VAR 0 6
11483: PUSH
11484: LD_INT 2
11486: ARRAY
11487: PPUSH
11488: CALL_OW 284
11492: ST_TO_ADDR
// if am > engs then
11493: LD_VAR 0 8
11497: PUSH
11498: LD_VAR 0 5
11502: GREATER
11503: IFFALSE 11515
// am := engs ;
11505: LD_ADDR_VAR 0 8
11509: PUSH
11510: LD_VAR 0 5
11514: ST_TO_ADDR
// for i = 1 to am do
11515: LD_ADDR_VAR 0 7
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_VAR 0 8
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11620
// begin if IsInUnit ( engs [ i ] ) then
11533: LD_VAR 0 5
11537: PUSH
11538: LD_VAR 0 7
11542: ARRAY
11543: PPUSH
11544: CALL_OW 310
11548: IFFALSE 11567
// ComExitBuilding ( engs [ i ] ) else
11550: LD_VAR 0 5
11554: PUSH
11555: LD_VAR 0 7
11559: ARRAY
11560: PPUSH
11561: CALL_OW 122
11565: GO 11618
// if not HasTask ( engs [ i ] ) then
11567: LD_VAR 0 5
11571: PUSH
11572: LD_VAR 0 7
11576: ARRAY
11577: PPUSH
11578: CALL_OW 314
11582: NOT
11583: IFFALSE 11618
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: LD_VAR 0 6
11600: PUSH
11601: LD_INT 1
11603: ARRAY
11604: PPUSH
11605: LD_VAR 0 6
11609: PUSH
11610: LD_INT 2
11612: ARRAY
11613: PPUSH
11614: CALL_OW 117
// end ;
11618: GO 11530
11620: POP
11621: POP
// end ; end ; end ; end_of_file
11622: LD_VAR 0 3
11626: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// uc_side := 1 ;
11631: LD_ADDR_OWVAR 20
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// uc_nation := 1 ;
11639: LD_ADDR_OWVAR 21
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 6
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: LD_INT 4
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: LD_OWVAR 67
11670: ARRAY
11671: ST_TO_ADDR
// game_status := false ;
11672: LD_ADDR_EXP 29
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// helps_arrive := false ;
11680: LD_ADDR_EXP 30
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// helps_can_arrive := false ;
11688: LD_ADDR_EXP 31
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// beta_come := false ;
11696: LD_ADDR_EXP 32
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// gamma_come := false ;
11704: LD_ADDR_EXP 33
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// zeta_come := false ;
11712: LD_ADDR_EXP 34
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// mine_ck := false ;
11720: LD_ADDR_EXP 35
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sib_bomb_constructed := false ;
11728: LD_ADDR_EXP 36
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// mine_constructed := false ;
11736: LD_ADDR_EXP 37
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11744: LD_INT 35
11746: PPUSH
11747: CALL_OW 274
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: LD_INT 200
11757: PUSH
11758: LD_INT 100
11760: PUSH
11761: LD_INT 70
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: PUSH
11769: LD_OWVAR 67
11773: ARRAY
11774: PPUSH
11775: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11779: LD_INT 35
11781: PPUSH
11782: LD_INT 4
11784: PPUSH
11785: CALL_OW 235
// hc_importance := 100 ;
11789: LD_ADDR_OWVAR 32
11793: PUSH
11794: LD_INT 100
11796: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 2
11802: PPUSH
11803: LD_VAR 0 2
11807: PUSH
11808: LD_INT 1
11810: PLUS
11811: PPUSH
11812: CALL_OW 380
// hc_gallery := hardch ;
11816: LD_ADDR_OWVAR 33
11820: PUSH
11821: LD_STRING hardch
11823: ST_TO_ADDR
// hc_face_number := 1 ;
11824: LD_ADDR_OWVAR 34
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// guyA := CreateHuman ;
11832: LD_ADDR_EXP 38
11836: PUSH
11837: CALL_OW 44
11841: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11842: LD_INT 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL_OW 380
// hc_face_number := 2 ;
11857: LD_ADDR_OWVAR 34
11861: PUSH
11862: LD_INT 2
11864: ST_TO_ADDR
// guyB := CreateHuman ;
11865: LD_ADDR_EXP 39
11869: PUSH
11870: CALL_OW 44
11874: ST_TO_ADDR
// hc_importance := 0 ;
11875: LD_ADDR_OWVAR 32
11879: PUSH
11880: LD_INT 0
11882: ST_TO_ADDR
// hc_gallery :=  ;
11883: LD_ADDR_OWVAR 33
11887: PUSH
11888: LD_STRING 
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
// uc_side := 4 ;
11907: LD_ADDR_OWVAR 20
11911: PUSH
11912: LD_INT 4
11914: ST_TO_ADDR
// uc_nation := 1 ;
11915: LD_ADDR_OWVAR 21
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11923: LD_ADDR_VAR 0 10
11927: PUSH
11928: LD_INT 6
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_OWVAR 67
11946: ARRAY
11947: ST_TO_ADDR
// Beta_Squad := [ ] ;
11948: LD_ADDR_EXP 40
11952: PUSH
11953: EMPTY
11954: ST_TO_ADDR
// case num of 1 :
11955: LD_VAR 0 1
11959: PUSH
11960: LD_INT 1
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12011
11968: POP
// begin sold := 2 ;
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_INT 2
11976: ST_TO_ADDR
// sci := 1 ;
11977: LD_ADDR_VAR 0 6
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// mech := 2 ;
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_INT 2
11992: ST_TO_ADDR
// tank := 1 ;
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// cargo := 1 ;
12001: LD_ADDR_VAR 0 9
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// end ; 2 :
12009: GO 12114
12011: LD_INT 2
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12062
12019: POP
// begin sold := 2 ;
12020: LD_ADDR_VAR 0 5
12024: PUSH
12025: LD_INT 2
12027: ST_TO_ADDR
// sci := 1 ;
12028: LD_ADDR_VAR 0 6
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// mech := 1 ;
12036: LD_ADDR_VAR 0 7
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// tank := 1 ;
12044: LD_ADDR_VAR 0 8
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// cargo := 0 ;
12052: LD_ADDR_VAR 0 9
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// end ; 3 :
12060: GO 12114
12062: LD_INT 3
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12113
12070: POP
// begin sold := 1 ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// sci := 1 ;
12079: LD_ADDR_VAR 0 6
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// mech := 1 ;
12087: LD_ADDR_VAR 0 7
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// tank := 1 ;
12095: LD_ADDR_VAR 0 8
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// cargo := 0 ;
12103: LD_ADDR_VAR 0 9
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// end ; end ;
12111: GO 12114
12113: POP
// for i = 1 to sold do
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_VAR 0 5
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12202
// begin if i = 1 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: EQUAL
12140: IFFALSE 12159
// PrepareHuman ( sex_male , 1 , skill ) else
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: LD_VAR 0 10
12152: PPUSH
12153: CALL_OW 380
12157: GO 12174
// PrepareHuman ( false , 1 , skill ) ;
12159: LD_INT 0
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: LD_VAR 0 10
12169: PPUSH
12170: CALL_OW 380
// un := CreateHuman ;
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: CALL_OW 44
12183: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12184: LD_ADDR_EXP 40
12188: PUSH
12189: LD_EXP 40
12193: PUSH
12194: LD_VAR 0 4
12198: ADD
12199: ST_TO_ADDR
// end ;
12200: GO 12129
12202: POP
12203: POP
// for i = 1 to mech do
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: DOUBLE
12210: LD_INT 1
12212: DEC
12213: ST_TO_ADDR
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12277
// begin PrepareHuman ( false , 3 , skill ) ;
12222: LD_INT 0
12224: PPUSH
12225: LD_INT 3
12227: PPUSH
12228: LD_VAR 0 10
12232: PPUSH
12233: CALL_OW 380
// un := CreateHuman ;
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: CALL_OW 44
12246: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12247: LD_VAR 0 4
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12259: LD_ADDR_EXP 40
12263: PUSH
12264: LD_EXP 40
12268: PUSH
12269: LD_VAR 0 4
12273: ADD
12274: ST_TO_ADDR
// end ;
12275: GO 12219
12277: POP
12278: POP
// for i = 1 to sci do
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: DOUBLE
12285: LD_INT 1
12287: DEC
12288: ST_TO_ADDR
12289: LD_VAR 0 6
12293: PUSH
12294: FOR_TO
12295: IFFALSE 12340
// begin PrepareHuman ( false , 4 , skill ) ;
12297: LD_INT 0
12299: PPUSH
12300: LD_INT 4
12302: PPUSH
12303: LD_VAR 0 10
12307: PPUSH
12308: CALL_OW 380
// un := CreateHuman ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: CALL_OW 44
12321: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12322: LD_ADDR_EXP 40
12326: PUSH
12327: LD_EXP 40
12331: PUSH
12332: LD_VAR 0 4
12336: ADD
12337: ST_TO_ADDR
// end ;
12338: GO 12294
12340: POP
12341: POP
// for i = 1 to tank do
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_VAR 0 8
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12471
// begin Randomize ;
12360: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12364: LD_ADDR_OWVAR 37
12368: PUSH
12369: LD_INT 3
12371: ST_TO_ADDR
// vc_engine := engine_solar ;
12372: LD_ADDR_OWVAR 39
12376: PUSH
12377: LD_INT 2
12379: ST_TO_ADDR
// vc_control := control_manual ;
12380: LD_ADDR_OWVAR 38
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12388: LD_ADDR_OWVAR 40
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: LD_INT 5
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 1
12405: PPUSH
12406: LD_INT 2
12408: PPUSH
12409: CALL_OW 12
12413: ARRAY
12414: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12415: LD_ADDR_OWVAR 41
12419: PUSH
12420: LD_INT 35
12422: PPUSH
12423: LD_INT 55
12425: PPUSH
12426: CALL_OW 12
12430: ST_TO_ADDR
// un := CreateVehicle ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: CALL_OW 45
12440: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12441: LD_VAR 0 4
12445: PPUSH
12446: LD_INT 5
12448: PPUSH
12449: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12453: LD_ADDR_EXP 40
12457: PUSH
12458: LD_EXP 40
12462: PUSH
12463: LD_VAR 0 4
12467: ADD
12468: ST_TO_ADDR
// end ;
12469: GO 12357
12471: POP
12472: POP
// if cargo then
12473: LD_VAR 0 9
12477: IFFALSE 12580
// begin vc_chassis := us_medium_tracked ;
12479: LD_ADDR_OWVAR 37
12483: PUSH
12484: LD_INT 3
12486: ST_TO_ADDR
// vc_engine := engine_solar ;
12487: LD_ADDR_OWVAR 39
12491: PUSH
12492: LD_INT 2
12494: ST_TO_ADDR
// vc_control := control_manual ;
12495: LD_ADDR_OWVAR 38
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12503: LD_ADDR_OWVAR 40
12507: PUSH
12508: LD_INT 12
12510: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12511: LD_ADDR_OWVAR 41
12515: PUSH
12516: LD_INT 35
12518: PPUSH
12519: LD_INT 55
12521: PPUSH
12522: CALL_OW 12
12526: ST_TO_ADDR
// un := CreateVehicle ;
12527: LD_ADDR_VAR 0 4
12531: PUSH
12532: CALL_OW 45
12536: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12537: LD_VAR 0 4
12541: PPUSH
12542: LD_INT 5
12544: PPUSH
12545: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12549: LD_ADDR_EXP 40
12553: PUSH
12554: LD_EXP 40
12558: PUSH
12559: LD_VAR 0 4
12563: ADD
12564: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12565: LD_VAR 0 4
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: LD_INT 60
12575: PPUSH
12576: CALL_OW 290
// end ; end ;
12580: LD_VAR 0 2
12584: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12585: LD_INT 0
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
// uc_side := 4 ;
12597: LD_ADDR_OWVAR 20
12601: PUSH
12602: LD_INT 4
12604: ST_TO_ADDR
// uc_nation := 1 ;
12605: LD_ADDR_OWVAR 21
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12613: LD_ADDR_VAR 0 11
12617: PUSH
12618: LD_INT 6
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: LD_INT 4
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_OWVAR 67
12636: ARRAY
12637: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12638: LD_ADDR_EXP 41
12642: PUSH
12643: EMPTY
12644: ST_TO_ADDR
// case num of 1 :
12645: LD_VAR 0 1
12649: PUSH
12650: LD_INT 1
12652: DOUBLE
12653: EQUAL
12654: IFTRUE 12658
12656: GO 12709
12658: POP
// begin sold := 2 ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_INT 2
12666: ST_TO_ADDR
// eng := 2 ;
12667: LD_ADDR_VAR 0 6
12671: PUSH
12672: LD_INT 2
12674: ST_TO_ADDR
// sci := 0 ;
12675: LD_ADDR_VAR 0 7
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// mech := 1 ;
12683: LD_ADDR_VAR 0 8
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// tank := 0 ;
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// cargo := 1 ;
12699: LD_ADDR_VAR 0 10
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// end ; 2 :
12707: GO 12828
12709: LD_INT 2
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12768
12717: POP
// begin sold := 1 ;
12718: LD_ADDR_VAR 0 5
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// eng := 2 ;
12726: LD_ADDR_VAR 0 6
12730: PUSH
12731: LD_INT 2
12733: ST_TO_ADDR
// sci := 0 ;
12734: LD_ADDR_VAR 0 7
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// mech := 1 ;
12742: LD_ADDR_VAR 0 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// tank := 0 ;
12750: LD_ADDR_VAR 0 9
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// cargo := 1 ;
12758: LD_ADDR_VAR 0 10
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// end ; 3 :
12766: GO 12828
12768: LD_INT 3
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12827
12776: POP
// begin sold := 1 ;
12777: LD_ADDR_VAR 0 5
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// eng := 1 ;
12785: LD_ADDR_VAR 0 6
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// sci := 0 ;
12793: LD_ADDR_VAR 0 7
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// mech := 1 ;
12801: LD_ADDR_VAR 0 8
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// tank := 0 ;
12809: LD_ADDR_VAR 0 9
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// cargo := 1 ;
12817: LD_ADDR_VAR 0 10
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// end ; end ;
12825: GO 12828
12827: POP
// for i = 1 to sold do
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_VAR 0 5
12842: PUSH
12843: FOR_TO
12844: IFFALSE 12916
// begin if i = 1 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 1
12853: EQUAL
12854: IFFALSE 12873
// PrepareHuman ( sex_male , 1 , skill ) else
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: LD_VAR 0 11
12866: PPUSH
12867: CALL_OW 380
12871: GO 12888
// PrepareHuman ( false , 1 , skill ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: LD_VAR 0 11
12883: PPUSH
12884: CALL_OW 380
// un := CreateHuman ;
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: CALL_OW 44
12897: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12898: LD_ADDR_EXP 41
12902: PUSH
12903: LD_EXP 41
12907: PUSH
12908: LD_VAR 0 4
12912: ADD
12913: ST_TO_ADDR
// end ;
12914: GO 12843
12916: POP
12917: POP
// for i = 1 to mech do
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: DOUBLE
12924: LD_INT 1
12926: DEC
12927: ST_TO_ADDR
12928: LD_VAR 0 8
12932: PUSH
12933: FOR_TO
12934: IFFALSE 12991
// begin PrepareHuman ( false , 3 , skill ) ;
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_VAR 0 11
12946: PPUSH
12947: CALL_OW 380
// un := CreateHuman ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: CALL_OW 44
12960: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12961: LD_VAR 0 4
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12973: LD_ADDR_EXP 41
12977: PUSH
12978: LD_EXP 41
12982: PUSH
12983: LD_VAR 0 4
12987: ADD
12988: ST_TO_ADDR
// end ;
12989: GO 12933
12991: POP
12992: POP
// for i = 1 to eng do
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: DOUBLE
12999: LD_INT 1
13001: DEC
13002: ST_TO_ADDR
13003: LD_VAR 0 6
13007: PUSH
13008: FOR_TO
13009: IFFALSE 13054
// begin PrepareHuman ( false , 2 , skill ) ;
13011: LD_INT 0
13013: PPUSH
13014: LD_INT 2
13016: PPUSH
13017: LD_VAR 0 11
13021: PPUSH
13022: CALL_OW 380
// un := CreateHuman ;
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: CALL_OW 44
13035: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13036: LD_ADDR_EXP 41
13040: PUSH
13041: LD_EXP 41
13045: PUSH
13046: LD_VAR 0 4
13050: ADD
13051: ST_TO_ADDR
// end ;
13052: GO 13008
13054: POP
13055: POP
// for i = 1 to tank do
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: DOUBLE
13062: LD_INT 1
13064: DEC
13065: ST_TO_ADDR
13066: LD_VAR 0 9
13070: PUSH
13071: FOR_TO
13072: IFFALSE 13185
// begin Randomize ;
13074: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13078: LD_ADDR_OWVAR 37
13082: PUSH
13083: LD_INT 2
13085: ST_TO_ADDR
// vc_engine := engine_siberite ;
13086: LD_ADDR_OWVAR 39
13090: PUSH
13091: LD_INT 3
13093: ST_TO_ADDR
// vc_control := control_manual ;
13094: LD_ADDR_OWVAR 38
13098: PUSH
13099: LD_INT 1
13101: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13102: LD_ADDR_OWVAR 40
13106: PUSH
13107: LD_INT 7
13109: PUSH
13110: LD_INT 9
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 1
13119: PPUSH
13120: LD_INT 2
13122: PPUSH
13123: CALL_OW 12
13127: ARRAY
13128: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13129: LD_ADDR_OWVAR 41
13133: PUSH
13134: LD_INT 35
13136: PPUSH
13137: LD_INT 55
13139: PPUSH
13140: CALL_OW 12
13144: ST_TO_ADDR
// un := CreateVehicle ;
13145: LD_ADDR_VAR 0 4
13149: PUSH
13150: CALL_OW 45
13154: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13155: LD_VAR 0 4
13159: PPUSH
13160: LD_INT 5
13162: PPUSH
13163: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13167: LD_ADDR_EXP 41
13171: PUSH
13172: LD_EXP 41
13176: PUSH
13177: LD_VAR 0 4
13181: ADD
13182: ST_TO_ADDR
// end ;
13183: GO 13071
13185: POP
13186: POP
// if cargo then
13187: LD_VAR 0 10
13191: IFFALSE 13309
// begin vc_chassis := us_medium_tracked ;
13193: LD_ADDR_OWVAR 37
13197: PUSH
13198: LD_INT 3
13200: ST_TO_ADDR
// vc_engine := engine_combustion ;
13201: LD_ADDR_OWVAR 39
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// vc_control := control_manual ;
13209: LD_ADDR_OWVAR 38
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13217: LD_ADDR_OWVAR 40
13221: PUSH
13222: LD_INT 12
13224: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13225: LD_ADDR_OWVAR 41
13229: PUSH
13230: LD_INT 35
13232: PPUSH
13233: LD_INT 55
13235: PPUSH
13236: CALL_OW 12
13240: ST_TO_ADDR
// un := CreateVehicle ;
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: CALL_OW 45
13250: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13251: LD_VAR 0 4
13255: PPUSH
13256: LD_INT 5
13258: PPUSH
13259: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13263: LD_ADDR_EXP 41
13267: PUSH
13268: LD_EXP 41
13272: PUSH
13273: LD_VAR 0 4
13277: ADD
13278: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_INT 3
13286: PPUSH
13287: LD_INT 30
13289: PPUSH
13290: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13294: LD_VAR 0 4
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: LD_INT 40
13304: PPUSH
13305: CALL_OW 290
// end ; end ;
13309: LD_VAR 0 2
13313: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
// uc_side := 4 ;
13326: LD_ADDR_OWVAR 20
13330: PUSH
13331: LD_INT 4
13333: ST_TO_ADDR
// uc_nation := 1 ;
13334: LD_ADDR_OWVAR 21
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13342: LD_ADDR_VAR 0 10
13346: PUSH
13347: LD_INT 6
13349: PUSH
13350: LD_INT 5
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: PUSH
13361: LD_OWVAR 67
13365: ARRAY
13366: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13367: LD_ADDR_EXP 42
13371: PUSH
13372: EMPTY
13373: ST_TO_ADDR
// sold := 1 ;
13374: LD_ADDR_VAR 0 4
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// eng := 0 ;
13382: LD_ADDR_VAR 0 5
13386: PUSH
13387: LD_INT 0
13389: ST_TO_ADDR
// sci := 0 ;
13390: LD_ADDR_VAR 0 6
13394: PUSH
13395: LD_INT 0
13397: ST_TO_ADDR
// mech := 3 ;
13398: LD_ADDR_VAR 0 7
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// tank := 3 ;
13406: LD_ADDR_VAR 0 8
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// cargo := 0 ;
13414: LD_ADDR_VAR 0 9
13418: PUSH
13419: LD_INT 0
13421: ST_TO_ADDR
// for i = 1 to sold do
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: DOUBLE
13428: LD_INT 1
13430: DEC
13431: ST_TO_ADDR
13432: LD_VAR 0 4
13436: PUSH
13437: FOR_TO
13438: IFFALSE 13510
// begin if i = 1 then
13440: LD_VAR 0 2
13444: PUSH
13445: LD_INT 1
13447: EQUAL
13448: IFFALSE 13467
// PrepareHuman ( sex_male , 1 , skill ) else
13450: LD_INT 1
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_VAR 0 10
13460: PPUSH
13461: CALL_OW 380
13465: GO 13482
// PrepareHuman ( false , 1 , skill ) ;
13467: LD_INT 0
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_VAR 0 10
13477: PPUSH
13478: CALL_OW 380
// un := CreateHuman ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: CALL_OW 44
13491: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13492: LD_ADDR_EXP 42
13496: PUSH
13497: LD_EXP 42
13501: PUSH
13502: LD_VAR 0 3
13506: ADD
13507: ST_TO_ADDR
// end ;
13508: GO 13437
13510: POP
13511: POP
// for i = 1 to mech do
13512: LD_ADDR_VAR 0 2
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_VAR 0 7
13526: PUSH
13527: FOR_TO
13528: IFFALSE 13585
// begin PrepareHuman ( false , 3 , skill ) ;
13530: LD_INT 0
13532: PPUSH
13533: LD_INT 3
13535: PPUSH
13536: LD_VAR 0 10
13540: PPUSH
13541: CALL_OW 380
// un := CreateHuman ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: CALL_OW 44
13554: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13567: LD_ADDR_EXP 42
13571: PUSH
13572: LD_EXP 42
13576: PUSH
13577: LD_VAR 0 3
13581: ADD
13582: ST_TO_ADDR
// end ;
13583: GO 13527
13585: POP
13586: POP
// for i = 1 to tank do
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: DOUBLE
13593: LD_INT 1
13595: DEC
13596: ST_TO_ADDR
13597: LD_VAR 0 8
13601: PUSH
13602: FOR_TO
13603: IFFALSE 13849
// begin Randomize ;
13605: CALL_OW 10
// if i < 3 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 3
13616: LESS
13617: IFFALSE 13726
// begin vc_chassis := us_medium_tracked ;
13619: LD_ADDR_OWVAR 37
13623: PUSH
13624: LD_INT 3
13626: ST_TO_ADDR
// vc_engine := engine_combustion ;
13627: LD_ADDR_OWVAR 39
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// vc_control := control_manual ;
13635: LD_ADDR_OWVAR 38
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13643: LD_ADDR_OWVAR 40
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 9
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 1
13660: PPUSH
13661: LD_INT 2
13663: PPUSH
13664: CALL_OW 12
13668: ARRAY
13669: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13670: LD_ADDR_OWVAR 41
13674: PUSH
13675: LD_INT 35
13677: PPUSH
13678: LD_INT 55
13680: PPUSH
13681: CALL_OW 12
13685: ST_TO_ADDR
// un := CreateVehicle ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: CALL_OW 45
13695: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13696: LD_VAR 0 3
13700: PPUSH
13701: LD_INT 5
13703: PPUSH
13704: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13708: LD_ADDR_EXP 42
13712: PUSH
13713: LD_EXP 42
13717: PUSH
13718: LD_VAR 0 3
13722: ADD
13723: ST_TO_ADDR
// end else
13724: GO 13847
// begin uc_nation := 3 ;
13726: LD_ADDR_OWVAR 21
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13734: LD_ADDR_OWVAR 37
13738: PUSH
13739: LD_INT 22
13741: ST_TO_ADDR
// vc_engine := engine_combustion ;
13742: LD_ADDR_OWVAR 39
13746: PUSH
13747: LD_INT 1
13749: ST_TO_ADDR
// vc_control := control_manual ;
13750: LD_ADDR_OWVAR 38
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13758: LD_ADDR_OWVAR 40
13762: PUSH
13763: LD_INT 51
13765: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13766: LD_ADDR_OWVAR 41
13770: PUSH
13771: LD_INT 35
13773: PPUSH
13774: LD_INT 55
13776: PPUSH
13777: CALL_OW 12
13781: ST_TO_ADDR
// un := CreateVehicle ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: CALL_OW 45
13791: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13792: LD_VAR 0 3
13796: PPUSH
13797: LD_INT 496
13799: PPUSH
13800: CALL_OW 234
// SetTag ( un , 5 ) ;
13804: LD_VAR 0 3
13808: PPUSH
13809: LD_INT 5
13811: PPUSH
13812: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13816: LD_VAR 0 3
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: LD_INT 100
13826: PPUSH
13827: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13831: LD_ADDR_EXP 42
13835: PUSH
13836: LD_EXP 42
13840: PUSH
13841: LD_VAR 0 3
13845: ADD
13846: ST_TO_ADDR
// end ; end ;
13847: GO 13602
13849: POP
13850: POP
// end ; end_of_file
13851: LD_VAR 0 1
13855: RET
// export function Action ; begin
13856: LD_INT 0
13858: PPUSH
// InGameOn ;
13859: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13863: LD_INT 151
13865: PPUSH
13866: LD_INT 107
13868: PPUSH
13869: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13873: LD_EXP 38
13877: PPUSH
13878: LD_INT 171
13880: PPUSH
13881: LD_INT 108
13883: PPUSH
13884: LD_INT 0
13886: PPUSH
13887: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13891: LD_EXP 39
13895: PPUSH
13896: LD_INT 172
13898: PPUSH
13899: LD_INT 110
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13909: LD_EXP 38
13913: PPUSH
13914: LD_INT 156
13916: PPUSH
13917: LD_INT 107
13919: PPUSH
13920: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13924: LD_EXP 39
13928: PPUSH
13929: LD_INT 154
13931: PPUSH
13932: LD_INT 105
13934: PPUSH
13935: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13946: LD_EXP 38
13950: PPUSH
13951: CALL_OW 250
13955: PUSH
13956: LD_INT 156
13958: EQUAL
13959: PUSH
13960: LD_EXP 38
13964: PPUSH
13965: CALL_OW 251
13969: PUSH
13970: LD_INT 107
13972: EQUAL
13973: AND
13974: IFFALSE 13939
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13976: LD_EXP 38
13980: PUSH
13981: LD_EXP 39
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
13997: LD_EXP 38
14001: PPUSH
14002: LD_STRING D1-A-1
14004: PPUSH
14005: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14009: LD_EXP 39
14013: PPUSH
14014: LD_STRING D1-B-1
14016: PPUSH
14017: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14021: LD_EXP 38
14025: PPUSH
14026: LD_STRING D1-A-2
14028: PPUSH
14029: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14033: LD_EXP 39
14037: PPUSH
14038: LD_STRING D1-B-2
14040: PPUSH
14041: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14045: LD_EXP 38
14049: PUSH
14050: LD_EXP 39
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: LD_INT 147
14061: PPUSH
14062: LD_INT 108
14064: PPUSH
14065: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14069: LD_EXP 38
14073: PPUSH
14074: LD_STRING D1-A-3
14076: PPUSH
14077: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14081: LD_INT 4
14083: PPUSH
14084: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14088: LD_EXP 38
14092: PPUSH
14093: LD_INT 35
14095: PPUSH
14096: CALL_OW 296
14100: PUSH
14101: LD_INT 8
14103: LESS
14104: IFFALSE 14081
// ComTurnUnit ( guyA , guyB ) ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_EXP 39
14115: PPUSH
14116: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14120: LD_EXP 39
14124: PPUSH
14125: LD_EXP 38
14129: PPUSH
14130: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14134: LD_EXP 38
14138: PPUSH
14139: LD_STRING D1-A-10
14141: PPUSH
14142: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14146: LD_EXP 39
14150: PPUSH
14151: LD_STRING D1-B-10
14153: PPUSH
14154: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14158: LD_EXP 38
14162: PPUSH
14163: LD_STRING D1-A-11
14165: PPUSH
14166: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14170: LD_EXP 39
14174: PPUSH
14175: LD_STRING D1-B-11
14177: PPUSH
14178: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14182: LD_EXP 38
14186: PPUSH
14187: LD_STRING D1-A-12
14189: PPUSH
14190: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14194: LD_EXP 39
14198: PPUSH
14199: LD_STRING D1-B-12
14201: PPUSH
14202: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14206: LD_EXP 38
14210: PPUSH
14211: LD_STRING D1-A-13
14213: PPUSH
14214: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14218: LD_EXP 39
14222: PPUSH
14223: LD_STRING D1-B-13
14225: PPUSH
14226: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14230: LD_EXP 38
14234: PPUSH
14235: LD_STRING D1-A-14
14237: PPUSH
14238: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14242: LD_EXP 39
14246: PPUSH
14247: LD_STRING D1-B-14
14249: PPUSH
14250: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14254: LD_EXP 38
14258: PPUSH
14259: LD_STRING D1-A-15
14261: PPUSH
14262: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14266: LD_EXP 39
14270: PPUSH
14271: LD_STRING D1-B-15
14273: PPUSH
14274: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14278: LD_EXP 38
14282: PPUSH
14283: LD_STRING D1-A-16
14285: PPUSH
14286: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14290: LD_EXP 39
14294: PPUSH
14295: LD_STRING D1-B-16
14297: PPUSH
14298: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14302: LD_EXP 38
14306: PPUSH
14307: LD_STRING D1-A-17
14309: PPUSH
14310: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14314: LD_EXP 39
14318: PPUSH
14319: LD_STRING D1-B-17
14321: PPUSH
14322: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14326: LD_EXP 38
14330: PPUSH
14331: LD_STRING D1-A-18
14333: PPUSH
14334: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14338: LD_INT 35
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14348: LD_EXP 38
14352: PUSH
14353: LD_EXP 39
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: LD_INT 35
14364: PPUSH
14365: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14369: LD_INT 4
14371: PPUSH
14372: CALL_OW 67
// until IsInUnit ( guyA ) ;
14376: LD_EXP 38
14380: PPUSH
14381: CALL_OW 310
14385: IFFALSE 14369
// Wait ( 0 0$02 ) ;
14387: LD_INT 70
14389: PPUSH
14390: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14394: LD_EXP 38
14398: PPUSH
14399: LD_STRING D1-A-19
14401: PPUSH
14402: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14406: LD_EXP 39
14410: PPUSH
14411: LD_STRING D1-B-19
14413: PPUSH
14414: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14418: LD_EXP 38
14422: PPUSH
14423: LD_STRING D1-A-20
14425: PPUSH
14426: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14430: LD_INT 10
14432: PPUSH
14433: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14437: LD_EXP 39
14441: PPUSH
14442: LD_STRING D1-B-20
14444: PPUSH
14445: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14449: LD_EXP 38
14453: PPUSH
14454: LD_STRING D1-A-21
14456: PPUSH
14457: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14461: LD_EXP 39
14465: PPUSH
14466: LD_STRING D1-B-21
14468: PPUSH
14469: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14473: LD_EXP 38
14477: PPUSH
14478: LD_STRING D1-A-22
14480: PPUSH
14481: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D1-B-22
14492: PPUSH
14493: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14497: LD_EXP 38
14501: PPUSH
14502: LD_STRING D1-A-23
14504: PPUSH
14505: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14509: LD_EXP 39
14513: PPUSH
14514: LD_STRING D1-B-23
14516: PPUSH
14517: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14521: LD_EXP 38
14525: PPUSH
14526: LD_STRING D1-A-24
14528: PPUSH
14529: CALL_OW 88
// InGameOff ;
14533: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14537: LD_STRING M_main
14539: PPUSH
14540: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14544: LD_INT 4
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 343
// game_status := true ;
14554: LD_ADDR_EXP 29
14558: PUSH
14559: LD_INT 1
14561: ST_TO_ADDR
// end ;
14562: LD_VAR 0 1
14566: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14567: LD_INT 1
14569: PPUSH
14570: CALL 6358 0 1
14574: PUSH
14575: LD_INT 0
14577: GREATER
14578: IFFALSE 14680
14580: GO 14582
14582: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14590: LD_INT 1
14592: PPUSH
14593: CALL 6358 0 1
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: CALL_OW 461
14606: PUSH
14607: LD_INT 1
14609: NONEQUAL
14610: IFFALSE 14583
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14612: LD_EXP 38
14616: PPUSH
14617: CALL_OW 300
14621: PUSH
14622: LD_EXP 39
14626: PPUSH
14627: CALL_OW 300
14631: AND
14632: PUSH
14633: LD_EXP 30
14637: NOT
14638: AND
14639: IFFALSE 14665
// begin Say ( guyA , DL-A-1 ) ;
14641: LD_EXP 38
14645: PPUSH
14646: LD_STRING DL-A-1
14648: PPUSH
14649: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14653: LD_EXP 39
14657: PPUSH
14658: LD_STRING DL-B-1
14660: PPUSH
14661: CALL_OW 88
// end ; if not helps_can_arrive then
14665: LD_EXP 31
14669: NOT
14670: IFFALSE 14680
// helps_can_arrive := true ;
14672: LD_ADDR_EXP 31
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// end ;
14680: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14681: LD_INT 1
14683: PPUSH
14684: CALL 6358 0 1
14688: PUSH
14689: LD_INT 0
14691: GREATER
14692: PUSH
14693: LD_EXP 38
14697: PPUSH
14698: CALL_OW 300
14702: AND
14703: PUSH
14704: LD_EXP 39
14708: PPUSH
14709: CALL_OW 300
14713: AND
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 25
14727: PUSH
14728: LD_INT 12
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: PUSH
14744: LD_INT 0
14746: EQUAL
14747: AND
14748: PUSH
14749: LD_INT 1
14751: PPUSH
14752: LD_INT 25
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: PPUSH
14767: LD_EXP 38
14771: PPUSH
14772: CALL_OW 74
14776: PPUSH
14777: CALL_OW 292
14781: AND
14782: IFFALSE 14823
14784: GO 14786
14786: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14787: LD_EXP 38
14791: PPUSH
14792: LD_STRING DA-A-1
14794: PPUSH
14795: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14799: LD_EXP 39
14803: PPUSH
14804: LD_STRING DA-B-1
14806: PPUSH
14807: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14811: LD_EXP 38
14815: PPUSH
14816: LD_STRING DA-A-2
14818: PPUSH
14819: CALL_OW 88
// end ;
14823: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14824: LD_EXP 29
14828: PUSH
14829: LD_EXP 38
14833: PPUSH
14834: LD_INT 6
14836: PPUSH
14837: CALL_OW 299
14841: PUSH
14842: LD_INT 7
14844: LESS
14845: AND
14846: IFFALSE 14899
14848: GO 14850
14850: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14851: LD_INT 117
14853: PPUSH
14854: LD_INT 50
14856: PPUSH
14857: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14861: LD_INT 1
14863: PPUSH
14864: CALL 9995 0 1
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_STRING D5-A-1
14875: PPUSH
14876: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14880: LD_INT 1
14882: PPUSH
14883: CALL 9995 0 1
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: LD_STRING D5-B-1
14894: PPUSH
14895: CALL_OW 88
// end ;
14899: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14900: LD_INT 7
14902: PPUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: PUSH
14918: LD_INT 0
14920: GREATER
14921: IFFALSE 15066
14923: GO 14925
14925: DISABLE
// begin Wait ( 0 0$03 ) ;
14926: LD_INT 105
14928: PPUSH
14929: CALL_OW 67
// DialogueOn ;
14933: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14937: LD_INT 1
14939: PPUSH
14940: CALL 9995 0 1
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_STRING D6-A-1
14951: PPUSH
14952: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14956: LD_INT 1
14958: PPUSH
14959: CALL 9995 0 1
14963: PUSH
14964: LD_INT 2
14966: ARRAY
14967: PPUSH
14968: LD_STRING D6-B-1
14970: PPUSH
14971: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14975: LD_INT 95
14977: PPUSH
14978: LD_INT 8
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_INT 20
14986: PPUSH
14987: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
14991: LD_INT 10
14993: PPUSH
14994: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
14998: LD_INT 1
15000: PPUSH
15001: CALL 9995 0 1
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: LD_STRING D6-A-2
15012: PPUSH
15013: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15017: LD_INT 1
15019: PPUSH
15020: CALL 9995 0 1
15024: PUSH
15025: LD_INT 2
15027: ARRAY
15028: PPUSH
15029: LD_STRING D6-B-2
15031: PPUSH
15032: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15036: LD_INT 1
15038: PPUSH
15039: CALL 9995 0 1
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_STRING D6-A-3
15050: PPUSH
15051: CALL_OW 88
// DialogueOff ;
15055: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15059: LD_STRING M_base
15061: PPUSH
15062: CALL_OW 337
// end ;
15066: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15067: LD_EXP 30
15071: NOT
15072: PUSH
15073: LD_INT 22
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_INT 0
15104: GREATER
15105: AND
15106: IFFALSE 15239
15108: GO 15110
15110: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15111: LD_INT 35
15113: PPUSH
15114: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15118: LD_INT 22
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 21
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 69
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL 9995 0 1
15154: PUSH
15155: LD_INT 1
15157: ARRAY
15158: PPUSH
15159: CALL_OW 74
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL 9995 0 1
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 296
15180: PUSH
15181: LD_INT 7
15183: LESS
15184: IFFALSE 15111
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15186: LD_INT 1
15188: PPUSH
15189: CALL 9995 0 1
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_STRING DR-A-1
15200: PPUSH
15201: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15205: LD_INT 1
15207: PPUSH
15208: CALL 9995 0 1
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_STRING DR-B-1
15219: PPUSH
15220: CALL_OW 88
// Wait ( 3 3$00 ) ;
15224: LD_INT 6300
15226: PPUSH
15227: CALL_OW 67
// ru_spotted := true ;
15231: LD_ADDR_EXP 16
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// end ;
15239: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15240: LD_INT 35
15242: PPUSH
15243: CALL_OW 300
15247: NOT
15248: IFFALSE 15272
15250: GO 15252
15252: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15253: LD_INT 1
15255: PPUSH
15256: CALL 9995 0 1
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_STRING DDR-A-1
15267: PPUSH
15268: CALL_OW 88
15272: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15273: LD_INT 1
15275: PPUSH
15276: LD_INT 30
15278: PPUSH
15279: CALL 6209 0 2
15283: IFFALSE 15365
15285: GO 15287
15287: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15288: LD_INT 35
15290: PPUSH
15291: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15295: LD_INT 1
15297: PPUSH
15298: LD_INT 30
15300: PPUSH
15301: CALL 6209 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 461
15314: PUSH
15315: LD_INT 1
15317: NONEQUAL
15318: IFFALSE 15288
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15320: LD_INT 1
15322: PPUSH
15323: CALL 9995 0 1
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: LD_STRING D8-A-1
15334: PPUSH
15335: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15339: LD_INT 1
15341: PPUSH
15342: CALL 9995 0 1
15346: PUSH
15347: LD_INT 2
15349: ARRAY
15350: PPUSH
15351: LD_STRING D8-B-1
15353: PPUSH
15354: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15358: LD_STRING M_mineok
15360: PPUSH
15361: CALL_OW 337
// end ;
15365: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15366: LD_INT 22
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 30
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 57
15391: PUSH
15392: EMPTY
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: PUSH
15409: LD_INT 1
15411: GREATER
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: LD_INT 57
15438: PUSH
15439: EMPTY
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: PUSH
15456: LD_INT 1
15458: EQUAL
15459: PUSH
15460: LD_INT 35
15462: PPUSH
15463: CALL_OW 300
15467: NOT
15468: AND
15469: OR
15470: IFFALSE 15522
15472: GO 15474
15474: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 25
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: PUSH
15504: LD_INT 1
15506: ARRAY
15507: PPUSH
15508: LD_STRING D7-A-1
15510: PPUSH
15511: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15515: LD_STRING M_baseok
15517: PPUSH
15518: CALL_OW 337
// end ;
15522: END
// every 0 0$01 trigger mine_ck do
15523: LD_EXP 35
15527: IFFALSE 15558
15529: GO 15531
15531: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15532: LD_INT 1
15534: PPUSH
15535: CALL 9995 0 1
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: PPUSH
15544: LD_STRING D9-A-1
15546: PPUSH
15547: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15551: LD_STRING M_minedest
15553: PPUSH
15554: CALL_OW 337
// end ;
15558: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15559: LD_EXP 29
15563: IFFALSE 16069
15565: GO 15567
15567: DISABLE
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15575: LD_OWVAR 67
15579: PPUSH
15580: CALL 11896 0 1
// if not helps_can_arrive then
15584: LD_EXP 31
15588: NOT
15589: IFFALSE 15617
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15591: LD_EXP 40
15595: PUSH
15596: LD_INT 1
15598: ARRAY
15599: PPUSH
15600: LD_STRING DB-Delay
15602: PPUSH
15603: CALL_OW 94
// time := 10 10$00 ;
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 21000
15614: ST_TO_ADDR
// end else
15615: GO 15625
// time := 3 3$00 ;
15617: LD_ADDR_VAR 0 1
15621: PUSH
15622: LD_INT 6300
15624: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 35
15637: MINUS
15638: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15639: LD_INT 35
15641: PPUSH
15642: CALL_OW 67
// end until time = 0 0$00 ;
15646: LD_VAR 0 1
15650: PUSH
15651: LD_INT 0
15653: EQUAL
15654: IFFALSE 15625
// helps_arrive := true ;
15656: LD_ADDR_EXP 30
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// if IsLive ( guyA ) then
15664: LD_EXP 38
15668: PPUSH
15669: CALL_OW 300
15673: IFFALSE 15687
// r := guyA else
15675: LD_ADDR_VAR 0 4
15679: PUSH
15680: LD_EXP 38
15684: ST_TO_ADDR
15685: GO 15697
// r := guyB ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_EXP 39
15696: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15697: LD_EXP 40
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: LD_STRING D2-A-1
15708: PPUSH
15709: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15713: LD_VAR 0 4
15717: PPUSH
15718: LD_STRING D2-B-1
15720: PPUSH
15721: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15725: LD_EXP 40
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PPUSH
15734: LD_STRING D2-A-2
15736: PPUSH
15737: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15741: LD_VAR 0 4
15745: PPUSH
15746: LD_STRING D2-B-2
15748: PPUSH
15749: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15753: LD_EXP 40
15757: PUSH
15758: LD_INT 1
15760: ARRAY
15761: PPUSH
15762: LD_STRING D2-A-3
15764: PPUSH
15765: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15769: LD_VAR 0 4
15773: PPUSH
15774: LD_STRING D2-B-3
15776: PPUSH
15777: CALL_OW 88
// to_veh := [ ] ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: DOUBLE
15794: LD_INT 1
15796: DEC
15797: ST_TO_ADDR
15798: LD_EXP 40
15802: PUSH
15803: FOR_TO
15804: IFFALSE 16067
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15806: LD_EXP 40
15810: PUSH
15811: LD_VAR 0 2
15815: ARRAY
15816: PPUSH
15817: CALL_OW 110
15821: PUSH
15822: LD_INT 3
15824: EQUAL
15825: IFFALSE 15851
// to_veh := to_veh ^ Beta_Squad [ i ] else
15827: LD_ADDR_VAR 0 5
15831: PUSH
15832: LD_VAR 0 5
15836: PUSH
15837: LD_EXP 40
15841: PUSH
15842: LD_VAR 0 2
15846: ARRAY
15847: ADD
15848: ST_TO_ADDR
15849: GO 15976
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 2
15860: ARRAY
15861: PPUSH
15862: CALL_OW 110
15866: PUSH
15867: LD_INT 5
15869: EQUAL
15870: IFFALSE 15955
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15872: LD_EXP 40
15876: PUSH
15877: LD_VAR 0 2
15881: ARRAY
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 5
15903: PPUSH
15904: LD_INT 0
15906: PPUSH
15907: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15911: LD_VAR 0 5
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_EXP 40
15924: PUSH
15925: LD_VAR 0 2
15929: ARRAY
15930: PPUSH
15931: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_VAR 0 5
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 3
15952: ST_TO_ADDR
// end else
15953: GO 15976
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15955: LD_EXP 40
15959: PUSH
15960: LD_VAR 0 2
15964: ARRAY
15965: PPUSH
15966: LD_INT 5
15968: PPUSH
15969: LD_INT 0
15971: PPUSH
15972: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15976: LD_EXP 40
15980: PUSH
15981: LD_VAR 0 2
15985: ARRAY
15986: PPUSH
15987: LD_INT 165
15989: PPUSH
15990: LD_INT 105
15992: PPUSH
15993: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
15997: LD_INT 70
15999: PPUSH
16000: LD_INT 140
16002: PPUSH
16003: CALL_OW 12
16007: PPUSH
16008: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16012: LD_EXP 40
16016: PUSH
16017: LD_VAR 0 2
16021: ARRAY
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 235
// if i = 1 then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: IFFALSE 16050
// CenterNowOnXY ( 168 , 109 ) ;
16040: LD_INT 168
16042: PPUSH
16043: LD_INT 109
16045: PPUSH
16046: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16050: LD_EXP 40
16054: PUSH
16055: LD_VAR 0 2
16059: ARRAY
16060: PPUSH
16061: CALL_OW 141
// end ;
16065: GO 15803
16067: POP
16068: POP
// end ;
16069: PPOPN 5
16071: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16072: LD_EXP 30
16076: IFFALSE 17105
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
// begin Wait ( 5 5$00 ) ;
16085: LD_INT 10500
16087: PPUSH
16088: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16092: LD_OWVAR 67
16096: PPUSH
16097: CALL 12585 0 1
// to_veh := [ ] ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: EMPTY
16107: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: DOUBLE
16114: LD_INT 1
16116: DEC
16117: ST_TO_ADDR
16118: LD_EXP 41
16122: PUSH
16123: FOR_TO
16124: IFFALSE 16352
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16126: LD_EXP 41
16130: PUSH
16131: LD_VAR 0 1
16135: ARRAY
16136: PPUSH
16137: CALL_OW 110
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16171
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16147: LD_ADDR_VAR 0 2
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: LD_EXP 41
16161: PUSH
16162: LD_VAR 0 1
16166: ARRAY
16167: ADD
16168: ST_TO_ADDR
16169: GO 16296
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16171: LD_EXP 41
16175: PUSH
16176: LD_VAR 0 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 110
16186: PUSH
16187: LD_INT 5
16189: EQUAL
16190: IFFALSE 16275
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16192: LD_EXP 41
16196: PUSH
16197: LD_VAR 0 1
16201: ARRAY
16202: PPUSH
16203: LD_INT 4
16205: PPUSH
16206: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 5
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: LD_EXP 41
16244: PUSH
16245: LD_VAR 0 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: CALL_OW 3
16272: ST_TO_ADDR
// end else
16273: GO 16296
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16275: LD_EXP 41
16279: PUSH
16280: LD_VAR 0 1
16284: ARRAY
16285: PPUSH
16286: LD_INT 5
16288: PPUSH
16289: LD_INT 0
16291: PPUSH
16292: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16296: LD_EXP 41
16300: PUSH
16301: LD_VAR 0 1
16305: ARRAY
16306: PPUSH
16307: LD_INT 164
16309: PPUSH
16310: LD_INT 104
16312: PPUSH
16313: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16317: LD_INT 70
16319: PPUSH
16320: LD_INT 140
16322: PPUSH
16323: CALL_OW 12
16327: PPUSH
16328: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16332: LD_EXP 41
16336: PUSH
16337: LD_VAR 0 1
16341: ARRAY
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 235
// end ;
16350: GO 16123
16352: POP
16353: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16354: LD_EXP 41
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_STRING D3-A-1
16365: PPUSH
16366: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16370: LD_INT 1
16372: PPUSH
16373: CALL 9995 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_STRING D3-B-1
16384: PPUSH
16385: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16389: LD_EXP 41
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: LD_STRING D3-A-2
16400: PPUSH
16401: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16405: LD_INT 1
16407: PPUSH
16408: CALL 9995 0 1
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_STRING D3-B-2
16419: PPUSH
16420: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16424: LD_EXP 41
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_STRING D3-A-3
16435: PPUSH
16436: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16440: LD_INT 1
16442: PPUSH
16443: CALL 9995 0 1
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: LD_STRING D3-B-3
16454: PPUSH
16455: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16459: LD_EXP 41
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: PPUSH
16468: LD_STRING D3-A-4
16470: PPUSH
16471: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16475: LD_INT 1
16477: PPUSH
16478: CALL 9995 0 1
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_STRING D3-B-4
16489: PPUSH
16490: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16494: LD_EXP 41
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: LD_STRING D3-A-5
16505: PPUSH
16506: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16510: LD_INT 1
16512: PPUSH
16513: CALL 9995 0 1
16517: PUSH
16518: LD_INT 1
16520: ARRAY
16521: PPUSH
16522: LD_STRING D3-B-5
16524: PPUSH
16525: CALL_OW 88
// for i = 1 to Gamma_Squad do
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: DOUBLE
16535: LD_INT 1
16537: DEC
16538: ST_TO_ADDR
16539: LD_EXP 41
16543: PUSH
16544: FOR_TO
16545: IFFALSE 16567
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16547: LD_EXP 41
16551: PUSH
16552: LD_VAR 0 1
16556: ARRAY
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 235
16565: GO 16544
16567: POP
16568: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16569: LD_INT 6300
16571: PUSH
16572: LD_INT 10500
16574: PUSH
16575: LD_INT 11550
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: LD_OWVAR 67
16587: ARRAY
16588: PPUSH
16589: CALL_OW 67
// AddZetaSquad ;
16593: CALL 13314 0 0
// Wait ( 0 0$10 ) ;
16597: LD_INT 350
16599: PPUSH
16600: CALL_OW 67
// to_veh := [ ] ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: EMPTY
16610: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: DOUBLE
16617: LD_INT 1
16619: DEC
16620: ST_TO_ADDR
16621: LD_EXP 42
16625: PUSH
16626: FOR_TO
16627: IFFALSE 16837
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16629: LD_EXP 42
16633: PUSH
16634: LD_VAR 0 1
16638: ARRAY
16639: PPUSH
16640: CALL_OW 110
16644: PUSH
16645: LD_INT 3
16647: EQUAL
16648: IFFALSE 16674
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_EXP 42
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: ADD
16671: ST_TO_ADDR
16672: GO 16799
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16674: LD_EXP 42
16678: PUSH
16679: LD_VAR 0 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 110
16689: PUSH
16690: LD_INT 5
16692: EQUAL
16693: IFFALSE 16778
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16695: LD_EXP 42
16699: PUSH
16700: LD_VAR 0 1
16704: ARRAY
16705: PPUSH
16706: LD_INT 4
16708: PPUSH
16709: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 5
16726: PPUSH
16727: LD_INT 0
16729: PPUSH
16730: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: PPUSH
16743: LD_EXP 42
16747: PUSH
16748: LD_VAR 0 1
16752: ARRAY
16753: PPUSH
16754: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_VAR 0 2
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 3
16775: ST_TO_ADDR
// end else
16776: GO 16799
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16778: LD_EXP 42
16782: PUSH
16783: LD_VAR 0 1
16787: ARRAY
16788: PPUSH
16789: LD_INT 5
16791: PPUSH
16792: LD_INT 0
16794: PPUSH
16795: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16799: LD_EXP 42
16803: PUSH
16804: LD_VAR 0 1
16808: ARRAY
16809: PPUSH
16810: LD_INT 165
16812: PPUSH
16813: LD_INT 105
16815: PPUSH
16816: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16820: LD_INT 70
16822: PPUSH
16823: LD_INT 140
16825: PPUSH
16826: CALL_OW 12
16830: PPUSH
16831: CALL_OW 67
// end ;
16835: GO 16626
16837: POP
16838: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16839: LD_EXP 42
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: LD_STRING D4-A-1
16850: PPUSH
16851: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16855: LD_INT 1
16857: PPUSH
16858: CALL 9995 0 1
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: LD_STRING D4-B-1
16869: PPUSH
16870: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16874: LD_EXP 42
16878: PUSH
16879: LD_INT 1
16881: ARRAY
16882: PPUSH
16883: LD_STRING D4-A-2
16885: PPUSH
16886: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16890: LD_INT 1
16892: PPUSH
16893: CALL 9995 0 1
16897: PUSH
16898: LD_INT 1
16900: ARRAY
16901: PPUSH
16902: LD_STRING D4-B-2
16904: PPUSH
16905: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16909: LD_EXP 42
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: LD_STRING D4-A-3
16920: PPUSH
16921: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16925: LD_INT 1
16927: PPUSH
16928: CALL 9995 0 1
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_STRING D4-B-3
16939: PPUSH
16940: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16944: LD_EXP 42
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PPUSH
16953: LD_STRING D4-A-4
16955: PPUSH
16956: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16960: LD_INT 1
16962: PPUSH
16963: CALL 9995 0 1
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: LD_STRING D4-B-4
16974: PPUSH
16975: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16979: LD_EXP 42
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: LD_STRING D4-A-5
16990: PPUSH
16991: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
16995: LD_INT 1
16997: PPUSH
16998: CALL 9995 0 1
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: LD_STRING D4-B-5
17009: PPUSH
17010: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17014: LD_EXP 42
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PPUSH
17023: LD_STRING D4-A-6
17025: PPUSH
17026: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17030: LD_INT 1
17032: PPUSH
17033: CALL 9995 0 1
17037: PUSH
17038: LD_INT 1
17040: ARRAY
17041: PPUSH
17042: LD_STRING D4-B-6
17044: PPUSH
17045: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17049: LD_EXP 42
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: LD_STRING D4-A-7
17060: PPUSH
17061: CALL_OW 94
// for i = 1 to Zeta_Squad do
17065: LD_ADDR_VAR 0 1
17069: PUSH
17070: DOUBLE
17071: LD_INT 1
17073: DEC
17074: ST_TO_ADDR
17075: LD_EXP 42
17079: PUSH
17080: FOR_TO
17081: IFFALSE 17103
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17083: LD_EXP 42
17087: PUSH
17088: LD_VAR 0 1
17092: ARRAY
17093: PPUSH
17094: LD_INT 1
17096: PPUSH
17097: CALL_OW 235
17101: GO 17080
17103: POP
17104: POP
// end ;
17105: PPOPN 2
17107: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17108: LD_INT 11
17110: PPUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 70
17127: PUSH
17128: LD_INT 0
17130: GREATER
17131: IFFALSE 17156
17133: GO 17135
17135: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17136: LD_EXP 38
17140: PPUSH
17141: LD_STRING D10-A-1
17143: PPUSH
17144: CALL_OW 88
// ru_spotted := true ;
17148: LD_ADDR_EXP 16
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// end ;
17156: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17157: LD_EXP 38
17161: PPUSH
17162: CALL_OW 301
17166: PUSH
17167: LD_EXP 39
17171: PPUSH
17172: CALL_OW 301
17176: OR
17177: IFFALSE 17189
17179: GO 17181
17181: DISABLE
// begin YouLost ( DieP ) ;
17182: LD_STRING DieP
17184: PPUSH
17185: CALL_OW 104
// end ;
17189: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17190: LD_INT 34
17192: PUSH
17193: LD_INT 8
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: IFFALSE 17217
17206: GO 17208
17208: DISABLE
// sib_bomb_constructed := true ;
17209: LD_ADDR_EXP 36
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
17217: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17218: LD_EXP 29
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PUSH
17238: LD_INT 0
17240: EQUAL
17241: AND
17242: IFFALSE 17445
17244: GO 17246
17246: DISABLE
17247: LD_INT 0
17249: PPUSH
// begin game_status := false ;
17250: LD_ADDR_EXP 29
17254: PUSH
17255: LD_INT 0
17257: ST_TO_ADDR
// if not depotConstructed then
17258: LD_EXP 2
17262: NOT
17263: IFFALSE 17272
// SetAchievement ( ACH_NODEPOT ) ;
17265: LD_STRING ACH_NODEPOT
17267: PPUSH
17268: CALL_OW 543
// if Difficulty = 3 then
17272: LD_OWVAR 67
17276: PUSH
17277: LD_INT 3
17279: EQUAL
17280: IFFALSE 17289
// SetAchievement ( ACH_HARD ) ;
17282: LD_STRING ACH_HARD
17284: PPUSH
17285: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17289: LD_OWVAR 1
17293: PUSH
17294: LD_INT 35
17296: DIVREAL
17297: PUSH
17298: LD_INT 60
17300: DIVREAL
17301: PUSH
17302: LD_INT 70
17304: PUSH
17305: LD_INT 60
17307: PUSH
17308: LD_INT 50
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_OWVAR 67
17320: ARRAY
17321: LESS
17322: IFFALSE 17336
// AddMedal ( play , 1 ) else
17324: LD_STRING play
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: CALL_OW 101
17334: GO 17347
// AddMedal ( play , - 1 ) ;
17336: LD_STRING play
17338: PPUSH
17339: LD_INT 1
17341: NEG
17342: PPUSH
17343: CALL_OW 101
// if sib_bomb_constructed then
17347: LD_EXP 36
17351: IFFALSE 17365
// AddMedal ( sibbomb , 1 ) else
17353: LD_STRING sibbomb
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: CALL_OW 101
17363: GO 17376
// AddMedal ( sibbomb , - 1 ) ;
17365: LD_STRING sibbomb
17367: PPUSH
17368: LD_INT 1
17370: NEG
17371: PPUSH
17372: CALL_OW 101
// if mine_constructed and not mine_ck then
17376: LD_EXP 37
17380: PUSH
17381: LD_EXP 35
17385: NOT
17386: AND
17387: IFFALSE 17399
// AddMedal ( mine , 1 ) ;
17389: LD_STRING mine
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 101
// if mine_ck then
17399: LD_EXP 35
17403: IFFALSE 17416
// AddMedal ( mine , - 1 ) ;
17405: LD_STRING mine
17407: PPUSH
17408: LD_INT 1
17410: NEG
17411: PPUSH
17412: CALL_OW 101
// if not mine_constructed then
17416: LD_EXP 37
17420: NOT
17421: IFFALSE 17434
// AddMedal ( mine , - 2 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 2
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// GiveMedals ( Main ) ;
17434: LD_STRING Main
17436: PPUSH
17437: CALL_OW 102
// YouWin ;
17441: CALL_OW 103
// end ; end_of_file
17445: PPOPN 1
17447: END
// every 0 0$03 trigger game_status do var time ;
17448: LD_EXP 29
17452: IFFALSE 17617
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_INT 1050
17467: PUSH
17468: LD_INT 1575
17470: PUSH
17471: LD_INT 2100
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: LD_OWVAR 67
17483: ARRAY
17484: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17485: LD_VAR 0 1
17489: PUSH
17490: LD_INT 0
17492: PPUSH
17493: LD_INT 420
17495: PPUSH
17496: CALL_OW 12
17500: PLUS
17501: PPUSH
17502: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 5
17511: PPUSH
17512: CALL_OW 12
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17524: LD_INT 105
17526: PPUSH
17527: LD_INT 1050
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17539: LD_INT 1
17541: PPUSH
17542: LD_INT 5
17544: PPUSH
17545: CALL_OW 12
17549: PPUSH
17550: LD_INT 148
17552: PPUSH
17553: LD_INT 107
17555: PPUSH
17556: LD_INT 20
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17566: LD_OWVAR 1
17570: PUSH
17571: LD_INT 44100
17573: PUSH
17574: LD_INT 37800
17576: PUSH
17577: LD_INT 33600
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_OWVAR 67
17589: ARRAY
17590: MOD
17591: IFFALSE 17607
// time := time + 0 0$20 ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 700
17605: PLUS
17606: ST_TO_ADDR
// end until game_status = false ;
17607: LD_EXP 29
17611: PUSH
17612: LD_INT 0
17614: EQUAL
17615: IFFALSE 17485
// end ;
17617: PPOPN 1
17619: END
// every 0 0$03 trigger game_status do var time ;
17620: LD_EXP 29
17624: IFFALSE 17778
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 700
17639: PUSH
17640: LD_INT 875
17642: PUSH
17643: LD_INT 1400
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: LD_OWVAR 67
17655: ARRAY
17656: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 0
17664: PPUSH
17665: LD_INT 385
17667: PPUSH
17668: CALL_OW 12
17672: PLUS
17673: PPUSH
17674: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17678: LD_INT 1
17680: PPUSH
17681: LD_INT 5
17683: PPUSH
17684: CALL_OW 12
17688: PPUSH
17689: LD_INT 102
17691: PPUSH
17692: LD_INT 6
17694: PPUSH
17695: LD_INT 25
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17705: LD_OWVAR 1
17709: PUSH
17710: LD_INT 52500
17712: PUSH
17713: LD_INT 46200
17715: PUSH
17716: LD_INT 42000
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: PUSH
17724: LD_OWVAR 67
17728: ARRAY
17729: MOD
17730: IFFALSE 17746
// time := time + 0 0$25 ;
17732: LD_ADDR_VAR 0 1
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 875
17744: PLUS
17745: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17746: LD_OWVAR 1
17750: PUSH
17751: LD_INT 231000
17753: MOD
17754: PUSH
17755: LD_INT 0
17757: EQUAL
17758: IFFALSE 17768
// time := 0 0$30 ;
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_INT 1050
17767: ST_TO_ADDR
// end until game_status = false ;
17768: LD_EXP 29
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17657
// end ;
17778: PPOPN 1
17780: END
// every 0 0$03 trigger game_status do var time ;
17781: LD_EXP 29
17785: IFFALSE 17921
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: LD_INT 1050
17800: PUSH
17801: LD_INT 1575
17803: PUSH
17804: LD_INT 1750
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: LD_OWVAR 67
17816: ARRAY
17817: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17818: LD_VAR 0 1
17822: PUSH
17823: LD_INT 0
17825: PPUSH
17826: LD_INT 385
17828: PPUSH
17829: CALL_OW 12
17833: PLUS
17834: PPUSH
17835: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 5
17844: PPUSH
17845: CALL_OW 12
17849: PPUSH
17850: LD_INT 51
17852: PPUSH
17853: LD_INT 74
17855: PPUSH
17856: LD_INT 25
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17866: LD_OWVAR 1
17870: PUSH
17871: LD_INT 84000
17873: PUSH
17874: LD_INT 105000
17876: PUSH
17877: LD_INT 136500
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_OWVAR 67
17889: ARRAY
17890: MOD
17891: PUSH
17892: LD_INT 0
17894: EQUAL
17895: IFFALSE 17911
// time := time + 0 0$15 ;
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 525
17909: PLUS
17910: ST_TO_ADDR
// end until game_status = false ;
17911: LD_EXP 29
17915: PUSH
17916: LD_INT 0
17918: EQUAL
17919: IFFALSE 17818
// end ; end_of_file
17921: PPOPN 1
17923: END
// every 0 0$01 trigger not debug do
17924: LD_EXP 1
17928: NOT
17929: IFFALSE 17952
17931: GO 17933
17933: DISABLE
// begin enable ;
17934: ENABLE
// Display_Strings := [ #tick , tick ] ;
17935: LD_ADDR_OWVAR 47
17939: PUSH
17940: LD_STRING #tick
17942: PUSH
17943: LD_OWVAR 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
// end ; end_of_file
17952: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
17953: LD_VAR 0 1
17957: PPUSH
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL 34667 0 2
// if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 255
17976: PUSH
17977: LD_INT 3
17979: EQUAL
17980: PUSH
17981: LD_VAR 0 1
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: LD_INT 34
17991: PUSH
17992: LD_INT 46
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 34
18001: PUSH
18002: LD_INT 47
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 34
18011: PUSH
18012: LD_INT 45
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: PUSH
18025: EMPTY
18026: LIST
18027: PPUSH
18028: CALL_OW 69
18032: IN
18033: AND
18034: IFFALSE 18052
// ru_reserve := ru_reserve ^ un ;
18036: LD_ADDR_EXP 9
18040: PUSH
18041: LD_EXP 9
18045: PUSH
18046: LD_VAR 0 1
18050: ADD
18051: ST_TO_ADDR
// if GetSide ( un ) = 3 and not GetWeapon ( un ) in [ ru_siberium_rocket , ru_crane ] then
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 255
18061: PUSH
18062: LD_INT 3
18064: EQUAL
18065: PUSH
18066: LD_VAR 0 1
18070: PPUSH
18071: CALL_OW 264
18075: PUSH
18076: LD_INT 48
18078: PUSH
18079: LD_INT 52
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: IN
18086: NOT
18087: AND
18088: IFFALSE 18105
// ComMoveXY ( un , 65 , 60 ) ;
18090: LD_VAR 0 1
18094: PPUSH
18095: LD_INT 65
18097: PPUSH
18098: LD_INT 60
18100: PPUSH
18101: CALL_OW 111
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18105: LD_VAR 0 1
18109: PUSH
18110: LD_INT 22
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 34
18122: PUSH
18123: LD_INT 48
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: IN
18139: IFFALSE 18192
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18141: LD_INT 12
18143: PPUSH
18144: LD_INT 22
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PPUSH
18154: CALL_OW 70
18158: IFFALSE 18177
// ComAttackPlace ( un , 98 , 10 ) else
18160: LD_VAR 0 1
18164: PPUSH
18165: LD_INT 98
18167: PPUSH
18168: LD_INT 10
18170: PPUSH
18171: CALL_OW 116
18175: GO 18192
// ComAttackPlace ( un , 134 , 99 ) ;
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_INT 134
18184: PPUSH
18185: LD_INT 99
18187: PPUSH
18188: CALL_OW 116
// end ;
18192: PPOPN 2
18194: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18195: LD_VAR 0 1
18199: PPUSH
18200: CALL 34547 0 1
// if GetChassis ( un ) = 25 then
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 265
18213: PUSH
18214: LD_INT 25
18216: EQUAL
18217: IFFALSE 18226
// SetAchievement ( ACH_BEH ) ;
18219: LD_STRING ACH_BEH
18221: PPUSH
18222: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18226: LD_VAR 0 1
18230: PUSH
18231: LD_INT 22
18233: PUSH
18234: LD_INT 3
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 21
18243: PUSH
18244: LD_INT 3
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PPUSH
18255: CALL_OW 69
18259: IN
18260: PUSH
18261: LD_VAR 0 1
18265: PPUSH
18266: CALL_OW 266
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: LD_INT 29
18276: PUSH
18277: LD_INT 30
18279: PUSH
18280: LD_INT 26
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: IN
18289: NOT
18290: AND
18291: IFFALSE 18377
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18293: LD_ADDR_EXP 13
18297: PUSH
18298: LD_EXP 13
18302: PUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 266
18312: ADD
18313: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18314: LD_ADDR_EXP 13
18318: PUSH
18319: LD_EXP 13
18323: PUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 250
18333: ADD
18334: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18335: LD_ADDR_EXP 13
18339: PUSH
18340: LD_EXP 13
18344: PUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 251
18354: ADD
18355: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18356: LD_ADDR_EXP 13
18360: PUSH
18361: LD_EXP 13
18365: PUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 254
18375: ADD
18376: ST_TO_ADDR
// end ; if un in ru_attack_list then
18377: LD_VAR 0 1
18381: PUSH
18382: LD_EXP 10
18386: IN
18387: IFFALSE 18405
// ru_attack_list := ru_attack_list diff un ;
18389: LD_ADDR_EXP 10
18393: PUSH
18394: LD_EXP 10
18398: PUSH
18399: LD_VAR 0 1
18403: DIFF
18404: ST_TO_ADDR
// if un in ru_protector then
18405: LD_VAR 0 1
18409: PUSH
18410: LD_EXP 17
18414: IN
18415: IFFALSE 18433
// ru_protector := ru_protector diff un ;
18417: LD_ADDR_EXP 17
18421: PUSH
18422: LD_EXP 17
18426: PUSH
18427: LD_VAR 0 1
18431: DIFF
18432: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 266
18442: PUSH
18443: LD_INT 30
18445: EQUAL
18446: PUSH
18447: LD_VAR 0 1
18451: PPUSH
18452: CALL_OW 255
18456: PUSH
18457: LD_INT 1
18459: EQUAL
18460: AND
18461: IFFALSE 18471
// mine_ck := true ;
18463: LD_ADDR_EXP 35
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// end ;
18471: PPOPN 1
18473: END
// on BuildingComplete ( un ) do var i ;
18474: LD_INT 0
18476: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 255
18486: PUSH
18487: LD_INT 1
18489: EQUAL
18490: PUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 266
18500: PUSH
18501: LD_INT 0
18503: EQUAL
18504: AND
18505: IFFALSE 18515
// depotConstructed := true ;
18507: LD_ADDR_EXP 2
18511: PUSH
18512: LD_INT 1
18514: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 255
18524: PUSH
18525: LD_INT 1
18527: EQUAL
18528: PUSH
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 266
18538: PUSH
18539: LD_INT 30
18541: EQUAL
18542: AND
18543: IFFALSE 18553
// mine_constructed := true ;
18545: LD_ADDR_EXP 37
18549: PUSH
18550: LD_INT 1
18552: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 255
18562: PUSH
18563: LD_INT 3
18565: EQUAL
18566: PUSH
18567: LD_VAR 0 1
18571: PPUSH
18572: CALL_OW 266
18576: PUSH
18577: LD_INT 0
18579: EQUAL
18580: AND
18581: IFFALSE 18638
// begin for i = 1 to 2 do
18583: LD_ADDR_VAR 0 2
18587: PUSH
18588: DOUBLE
18589: LD_INT 1
18591: DEC
18592: ST_TO_ADDR
18593: LD_INT 2
18595: PUSH
18596: FOR_TO
18597: IFFALSE 18636
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18599: LD_EXP 20
18603: PUSH
18604: LD_VAR 0 2
18608: ARRAY
18609: PPUSH
18610: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18614: LD_EXP 20
18618: PUSH
18619: LD_VAR 0 2
18623: ARRAY
18624: PPUSH
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 180
// end ;
18634: GO 18596
18636: POP
18637: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18638: LD_VAR 0 1
18642: PPUSH
18643: CALL_OW 255
18647: PUSH
18648: LD_INT 3
18650: EQUAL
18651: PUSH
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 266
18661: PUSH
18662: LD_EXP 13
18666: IN
18667: AND
18668: IFFALSE 18708
// for i = 1 to 4 do
18670: LD_ADDR_VAR 0 2
18674: PUSH
18675: DOUBLE
18676: LD_INT 1
18678: DEC
18679: ST_TO_ADDR
18680: LD_INT 4
18682: PUSH
18683: FOR_TO
18684: IFFALSE 18706
// ru_blist := Delete ( ru_blist , 1 ) ;
18686: LD_ADDR_EXP 13
18690: PUSH
18691: LD_EXP 13
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL_OW 3
18703: ST_TO_ADDR
18704: GO 18683
18706: POP
18707: POP
// end ;
18708: PPOPN 2
18710: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18711: LD_VAR 0 1
18715: PPUSH
18716: LD_VAR 0 2
18720: PPUSH
18721: LD_VAR 0 3
18725: PPUSH
18726: CALL 34643 0 3
// end ;
18730: PPOPN 3
18732: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18733: LD_VAR 0 1
18737: PPUSH
18738: CALL 34651 0 1
// end ; end_of_file end_of_file
18742: PPOPN 1
18744: END
// export globalGameSaveCounter ; every 0 0$1 do
18745: GO 18747
18747: DISABLE
// begin enable ;
18748: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18749: LD_STRING updateTimer(
18751: PUSH
18752: LD_OWVAR 1
18756: STR
18757: PUSH
18758: LD_STRING );
18760: STR
18761: PPUSH
18762: CALL_OW 559
// end ;
18766: END
// every 0 0$1 do
18767: GO 18769
18769: DISABLE
// begin globalGameSaveCounter := 0 ;
18770: LD_ADDR_EXP 43
18774: PUSH
18775: LD_INT 0
18777: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
18778: LD_STRING setGameSaveCounter(0)
18780: PPUSH
18781: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
18785: LD_STRING initStreamRollete();
18787: PPUSH
18788: CALL_OW 559
// InitStreamMode ;
18792: CALL 20118 0 0
// DefineStreamItems ( false ) ;
18796: LD_INT 0
18798: PPUSH
18799: CALL 20582 0 1
// end ;
18803: END
// export function SOS_MapStart ( ) ; begin
18804: LD_INT 0
18806: PPUSH
// if streamModeActive then
18807: LD_EXP 44
18811: IFFALSE 18820
// DefineStreamItems ( true ) ;
18813: LD_INT 1
18815: PPUSH
18816: CALL 20582 0 1
// UpdateLuaVariables ( ) ;
18820: CALL 18837 0 0
// UpdateFactoryWaypoints ( ) ;
18824: CALL 33451 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18828: CALL 33708 0 0
// end ;
18832: LD_VAR 0 1
18836: RET
// function UpdateLuaVariables ( ) ; begin
18837: LD_INT 0
18839: PPUSH
// if globalGameSaveCounter then
18840: LD_EXP 43
18844: IFFALSE 18878
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
18846: LD_ADDR_EXP 43
18850: PUSH
18851: LD_EXP 43
18855: PPUSH
18856: CALL 78338 0 1
18860: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18861: LD_STRING setGameSaveCounter(
18863: PUSH
18864: LD_EXP 43
18868: STR
18869: PUSH
18870: LD_STRING )
18872: STR
18873: PPUSH
18874: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
18878: LD_STRING setGameDifficulty(
18880: PUSH
18881: LD_OWVAR 67
18885: STR
18886: PUSH
18887: LD_STRING )
18889: STR
18890: PPUSH
18891: CALL_OW 559
// end ;
18895: LD_VAR 0 1
18899: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18900: LD_INT 0
18902: PPUSH
// if p2 = stream_mode then
18903: LD_VAR 0 2
18907: PUSH
18908: LD_INT 100
18910: EQUAL
18911: IFFALSE 19914
// begin if not StreamModeActive then
18913: LD_EXP 44
18917: NOT
18918: IFFALSE 18928
// StreamModeActive := true ;
18920: LD_ADDR_EXP 44
18924: PUSH
18925: LD_INT 1
18927: ST_TO_ADDR
// if p3 = 0 then
18928: LD_VAR 0 3
18932: PUSH
18933: LD_INT 0
18935: EQUAL
18936: IFFALSE 18942
// InitStreamMode ;
18938: CALL 20118 0 0
// if p3 = 1 then
18942: LD_VAR 0 3
18946: PUSH
18947: LD_INT 1
18949: EQUAL
18950: IFFALSE 18960
// sRocket := true ;
18952: LD_ADDR_EXP 49
18956: PUSH
18957: LD_INT 1
18959: ST_TO_ADDR
// if p3 = 2 then
18960: LD_VAR 0 3
18964: PUSH
18965: LD_INT 2
18967: EQUAL
18968: IFFALSE 18978
// sSpeed := true ;
18970: LD_ADDR_EXP 48
18974: PUSH
18975: LD_INT 1
18977: ST_TO_ADDR
// if p3 = 3 then
18978: LD_VAR 0 3
18982: PUSH
18983: LD_INT 3
18985: EQUAL
18986: IFFALSE 18996
// sEngine := true ;
18988: LD_ADDR_EXP 50
18992: PUSH
18993: LD_INT 1
18995: ST_TO_ADDR
// if p3 = 4 then
18996: LD_VAR 0 3
19000: PUSH
19001: LD_INT 4
19003: EQUAL
19004: IFFALSE 19014
// sSpec := true ;
19006: LD_ADDR_EXP 47
19010: PUSH
19011: LD_INT 1
19013: ST_TO_ADDR
// if p3 = 5 then
19014: LD_VAR 0 3
19018: PUSH
19019: LD_INT 5
19021: EQUAL
19022: IFFALSE 19032
// sLevel := true ;
19024: LD_ADDR_EXP 51
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// if p3 = 6 then
19032: LD_VAR 0 3
19036: PUSH
19037: LD_INT 6
19039: EQUAL
19040: IFFALSE 19050
// sArmoury := true ;
19042: LD_ADDR_EXP 52
19046: PUSH
19047: LD_INT 1
19049: ST_TO_ADDR
// if p3 = 7 then
19050: LD_VAR 0 3
19054: PUSH
19055: LD_INT 7
19057: EQUAL
19058: IFFALSE 19068
// sRadar := true ;
19060: LD_ADDR_EXP 53
19064: PUSH
19065: LD_INT 1
19067: ST_TO_ADDR
// if p3 = 8 then
19068: LD_VAR 0 3
19072: PUSH
19073: LD_INT 8
19075: EQUAL
19076: IFFALSE 19086
// sBunker := true ;
19078: LD_ADDR_EXP 54
19082: PUSH
19083: LD_INT 1
19085: ST_TO_ADDR
// if p3 = 9 then
19086: LD_VAR 0 3
19090: PUSH
19091: LD_INT 9
19093: EQUAL
19094: IFFALSE 19104
// sHack := true ;
19096: LD_ADDR_EXP 55
19100: PUSH
19101: LD_INT 1
19103: ST_TO_ADDR
// if p3 = 10 then
19104: LD_VAR 0 3
19108: PUSH
19109: LD_INT 10
19111: EQUAL
19112: IFFALSE 19122
// sFire := true ;
19114: LD_ADDR_EXP 56
19118: PUSH
19119: LD_INT 1
19121: ST_TO_ADDR
// if p3 = 11 then
19122: LD_VAR 0 3
19126: PUSH
19127: LD_INT 11
19129: EQUAL
19130: IFFALSE 19140
// sRefresh := true ;
19132: LD_ADDR_EXP 57
19136: PUSH
19137: LD_INT 1
19139: ST_TO_ADDR
// if p3 = 12 then
19140: LD_VAR 0 3
19144: PUSH
19145: LD_INT 12
19147: EQUAL
19148: IFFALSE 19158
// sExp := true ;
19150: LD_ADDR_EXP 58
19154: PUSH
19155: LD_INT 1
19157: ST_TO_ADDR
// if p3 = 13 then
19158: LD_VAR 0 3
19162: PUSH
19163: LD_INT 13
19165: EQUAL
19166: IFFALSE 19176
// sDepot := true ;
19168: LD_ADDR_EXP 59
19172: PUSH
19173: LD_INT 1
19175: ST_TO_ADDR
// if p3 = 14 then
19176: LD_VAR 0 3
19180: PUSH
19181: LD_INT 14
19183: EQUAL
19184: IFFALSE 19194
// sFlag := true ;
19186: LD_ADDR_EXP 60
19190: PUSH
19191: LD_INT 1
19193: ST_TO_ADDR
// if p3 = 15 then
19194: LD_VAR 0 3
19198: PUSH
19199: LD_INT 15
19201: EQUAL
19202: IFFALSE 19212
// sKamikadze := true ;
19204: LD_ADDR_EXP 68
19208: PUSH
19209: LD_INT 1
19211: ST_TO_ADDR
// if p3 = 16 then
19212: LD_VAR 0 3
19216: PUSH
19217: LD_INT 16
19219: EQUAL
19220: IFFALSE 19230
// sTroll := true ;
19222: LD_ADDR_EXP 69
19226: PUSH
19227: LD_INT 1
19229: ST_TO_ADDR
// if p3 = 17 then
19230: LD_VAR 0 3
19234: PUSH
19235: LD_INT 17
19237: EQUAL
19238: IFFALSE 19248
// sSlow := true ;
19240: LD_ADDR_EXP 70
19244: PUSH
19245: LD_INT 1
19247: ST_TO_ADDR
// if p3 = 18 then
19248: LD_VAR 0 3
19252: PUSH
19253: LD_INT 18
19255: EQUAL
19256: IFFALSE 19266
// sLack := true ;
19258: LD_ADDR_EXP 71
19262: PUSH
19263: LD_INT 1
19265: ST_TO_ADDR
// if p3 = 19 then
19266: LD_VAR 0 3
19270: PUSH
19271: LD_INT 19
19273: EQUAL
19274: IFFALSE 19284
// sTank := true ;
19276: LD_ADDR_EXP 73
19280: PUSH
19281: LD_INT 1
19283: ST_TO_ADDR
// if p3 = 20 then
19284: LD_VAR 0 3
19288: PUSH
19289: LD_INT 20
19291: EQUAL
19292: IFFALSE 19302
// sRemote := true ;
19294: LD_ADDR_EXP 74
19298: PUSH
19299: LD_INT 1
19301: ST_TO_ADDR
// if p3 = 21 then
19302: LD_VAR 0 3
19306: PUSH
19307: LD_INT 21
19309: EQUAL
19310: IFFALSE 19320
// sPowell := true ;
19312: LD_ADDR_EXP 75
19316: PUSH
19317: LD_INT 1
19319: ST_TO_ADDR
// if p3 = 22 then
19320: LD_VAR 0 3
19324: PUSH
19325: LD_INT 22
19327: EQUAL
19328: IFFALSE 19338
// sTeleport := true ;
19330: LD_ADDR_EXP 78
19334: PUSH
19335: LD_INT 1
19337: ST_TO_ADDR
// if p3 = 23 then
19338: LD_VAR 0 3
19342: PUSH
19343: LD_INT 23
19345: EQUAL
19346: IFFALSE 19356
// sOilTower := true ;
19348: LD_ADDR_EXP 80
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// if p3 = 24 then
19356: LD_VAR 0 3
19360: PUSH
19361: LD_INT 24
19363: EQUAL
19364: IFFALSE 19374
// sShovel := true ;
19366: LD_ADDR_EXP 81
19370: PUSH
19371: LD_INT 1
19373: ST_TO_ADDR
// if p3 = 25 then
19374: LD_VAR 0 3
19378: PUSH
19379: LD_INT 25
19381: EQUAL
19382: IFFALSE 19392
// sSheik := true ;
19384: LD_ADDR_EXP 82
19388: PUSH
19389: LD_INT 1
19391: ST_TO_ADDR
// if p3 = 26 then
19392: LD_VAR 0 3
19396: PUSH
19397: LD_INT 26
19399: EQUAL
19400: IFFALSE 19410
// sEarthquake := true ;
19402: LD_ADDR_EXP 84
19406: PUSH
19407: LD_INT 1
19409: ST_TO_ADDR
// if p3 = 27 then
19410: LD_VAR 0 3
19414: PUSH
19415: LD_INT 27
19417: EQUAL
19418: IFFALSE 19428
// sAI := true ;
19420: LD_ADDR_EXP 85
19424: PUSH
19425: LD_INT 1
19427: ST_TO_ADDR
// if p3 = 28 then
19428: LD_VAR 0 3
19432: PUSH
19433: LD_INT 28
19435: EQUAL
19436: IFFALSE 19446
// sCargo := true ;
19438: LD_ADDR_EXP 88
19442: PUSH
19443: LD_INT 1
19445: ST_TO_ADDR
// if p3 = 29 then
19446: LD_VAR 0 3
19450: PUSH
19451: LD_INT 29
19453: EQUAL
19454: IFFALSE 19464
// sDLaser := true ;
19456: LD_ADDR_EXP 89
19460: PUSH
19461: LD_INT 1
19463: ST_TO_ADDR
// if p3 = 30 then
19464: LD_VAR 0 3
19468: PUSH
19469: LD_INT 30
19471: EQUAL
19472: IFFALSE 19482
// sExchange := true ;
19474: LD_ADDR_EXP 90
19478: PUSH
19479: LD_INT 1
19481: ST_TO_ADDR
// if p3 = 31 then
19482: LD_VAR 0 3
19486: PUSH
19487: LD_INT 31
19489: EQUAL
19490: IFFALSE 19500
// sFac := true ;
19492: LD_ADDR_EXP 91
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// if p3 = 32 then
19500: LD_VAR 0 3
19504: PUSH
19505: LD_INT 32
19507: EQUAL
19508: IFFALSE 19518
// sPower := true ;
19510: LD_ADDR_EXP 92
19514: PUSH
19515: LD_INT 1
19517: ST_TO_ADDR
// if p3 = 33 then
19518: LD_VAR 0 3
19522: PUSH
19523: LD_INT 33
19525: EQUAL
19526: IFFALSE 19536
// sRandom := true ;
19528: LD_ADDR_EXP 93
19532: PUSH
19533: LD_INT 1
19535: ST_TO_ADDR
// if p3 = 34 then
19536: LD_VAR 0 3
19540: PUSH
19541: LD_INT 34
19543: EQUAL
19544: IFFALSE 19554
// sShield := true ;
19546: LD_ADDR_EXP 94
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// if p3 = 35 then
19554: LD_VAR 0 3
19558: PUSH
19559: LD_INT 35
19561: EQUAL
19562: IFFALSE 19572
// sTime := true ;
19564: LD_ADDR_EXP 95
19568: PUSH
19569: LD_INT 1
19571: ST_TO_ADDR
// if p3 = 36 then
19572: LD_VAR 0 3
19576: PUSH
19577: LD_INT 36
19579: EQUAL
19580: IFFALSE 19590
// sTools := true ;
19582: LD_ADDR_EXP 96
19586: PUSH
19587: LD_INT 1
19589: ST_TO_ADDR
// if p3 = 101 then
19590: LD_VAR 0 3
19594: PUSH
19595: LD_INT 101
19597: EQUAL
19598: IFFALSE 19608
// sSold := true ;
19600: LD_ADDR_EXP 61
19604: PUSH
19605: LD_INT 1
19607: ST_TO_ADDR
// if p3 = 102 then
19608: LD_VAR 0 3
19612: PUSH
19613: LD_INT 102
19615: EQUAL
19616: IFFALSE 19626
// sDiff := true ;
19618: LD_ADDR_EXP 62
19622: PUSH
19623: LD_INT 1
19625: ST_TO_ADDR
// if p3 = 103 then
19626: LD_VAR 0 3
19630: PUSH
19631: LD_INT 103
19633: EQUAL
19634: IFFALSE 19644
// sFog := true ;
19636: LD_ADDR_EXP 65
19640: PUSH
19641: LD_INT 1
19643: ST_TO_ADDR
// if p3 = 104 then
19644: LD_VAR 0 3
19648: PUSH
19649: LD_INT 104
19651: EQUAL
19652: IFFALSE 19662
// sReset := true ;
19654: LD_ADDR_EXP 66
19658: PUSH
19659: LD_INT 1
19661: ST_TO_ADDR
// if p3 = 105 then
19662: LD_VAR 0 3
19666: PUSH
19667: LD_INT 105
19669: EQUAL
19670: IFFALSE 19680
// sSun := true ;
19672: LD_ADDR_EXP 67
19676: PUSH
19677: LD_INT 1
19679: ST_TO_ADDR
// if p3 = 106 then
19680: LD_VAR 0 3
19684: PUSH
19685: LD_INT 106
19687: EQUAL
19688: IFFALSE 19698
// sTiger := true ;
19690: LD_ADDR_EXP 63
19694: PUSH
19695: LD_INT 1
19697: ST_TO_ADDR
// if p3 = 107 then
19698: LD_VAR 0 3
19702: PUSH
19703: LD_INT 107
19705: EQUAL
19706: IFFALSE 19716
// sBomb := true ;
19708: LD_ADDR_EXP 64
19712: PUSH
19713: LD_INT 1
19715: ST_TO_ADDR
// if p3 = 108 then
19716: LD_VAR 0 3
19720: PUSH
19721: LD_INT 108
19723: EQUAL
19724: IFFALSE 19734
// sWound := true ;
19726: LD_ADDR_EXP 72
19730: PUSH
19731: LD_INT 1
19733: ST_TO_ADDR
// if p3 = 109 then
19734: LD_VAR 0 3
19738: PUSH
19739: LD_INT 109
19741: EQUAL
19742: IFFALSE 19752
// sBetray := true ;
19744: LD_ADDR_EXP 76
19748: PUSH
19749: LD_INT 1
19751: ST_TO_ADDR
// if p3 = 110 then
19752: LD_VAR 0 3
19756: PUSH
19757: LD_INT 110
19759: EQUAL
19760: IFFALSE 19770
// sContamin := true ;
19762: LD_ADDR_EXP 77
19766: PUSH
19767: LD_INT 1
19769: ST_TO_ADDR
// if p3 = 111 then
19770: LD_VAR 0 3
19774: PUSH
19775: LD_INT 111
19777: EQUAL
19778: IFFALSE 19788
// sOil := true ;
19780: LD_ADDR_EXP 79
19784: PUSH
19785: LD_INT 1
19787: ST_TO_ADDR
// if p3 = 112 then
19788: LD_VAR 0 3
19792: PUSH
19793: LD_INT 112
19795: EQUAL
19796: IFFALSE 19806
// sStu := true ;
19798: LD_ADDR_EXP 83
19802: PUSH
19803: LD_INT 1
19805: ST_TO_ADDR
// if p3 = 113 then
19806: LD_VAR 0 3
19810: PUSH
19811: LD_INT 113
19813: EQUAL
19814: IFFALSE 19824
// sBazooka := true ;
19816: LD_ADDR_EXP 86
19820: PUSH
19821: LD_INT 1
19823: ST_TO_ADDR
// if p3 = 114 then
19824: LD_VAR 0 3
19828: PUSH
19829: LD_INT 114
19831: EQUAL
19832: IFFALSE 19842
// sMortar := true ;
19834: LD_ADDR_EXP 87
19838: PUSH
19839: LD_INT 1
19841: ST_TO_ADDR
// if p3 = 115 then
19842: LD_VAR 0 3
19846: PUSH
19847: LD_INT 115
19849: EQUAL
19850: IFFALSE 19860
// sRanger := true ;
19852: LD_ADDR_EXP 97
19856: PUSH
19857: LD_INT 1
19859: ST_TO_ADDR
// if p3 = 116 then
19860: LD_VAR 0 3
19864: PUSH
19865: LD_INT 116
19867: EQUAL
19868: IFFALSE 19878
// sComputer := true ;
19870: LD_ADDR_EXP 98
19874: PUSH
19875: LD_INT 1
19877: ST_TO_ADDR
// if p3 = 117 then
19878: LD_VAR 0 3
19882: PUSH
19883: LD_INT 117
19885: EQUAL
19886: IFFALSE 19896
// s30 := true ;
19888: LD_ADDR_EXP 99
19892: PUSH
19893: LD_INT 1
19895: ST_TO_ADDR
// if p3 = 118 then
19896: LD_VAR 0 3
19900: PUSH
19901: LD_INT 118
19903: EQUAL
19904: IFFALSE 19914
// s60 := true ;
19906: LD_ADDR_EXP 100
19910: PUSH
19911: LD_INT 1
19913: ST_TO_ADDR
// end ; if p2 = hack_mode then
19914: LD_VAR 0 2
19918: PUSH
19919: LD_INT 101
19921: EQUAL
19922: IFFALSE 20050
// begin case p3 of 1 :
19924: LD_VAR 0 3
19928: PUSH
19929: LD_INT 1
19931: DOUBLE
19932: EQUAL
19933: IFTRUE 19937
19935: GO 19944
19937: POP
// hHackUnlimitedResources ; 2 :
19938: CALL 32197 0 0
19942: GO 20050
19944: LD_INT 2
19946: DOUBLE
19947: EQUAL
19948: IFTRUE 19952
19950: GO 19959
19952: POP
// hHackSetLevel10 ; 3 :
19953: CALL 32330 0 0
19957: GO 20050
19959: LD_INT 3
19961: DOUBLE
19962: EQUAL
19963: IFTRUE 19967
19965: GO 19974
19967: POP
// hHackSetLevel10YourUnits ; 4 :
19968: CALL 32415 0 0
19972: GO 20050
19974: LD_INT 4
19976: DOUBLE
19977: EQUAL
19978: IFTRUE 19982
19980: GO 19989
19982: POP
// hHackInvincible ; 5 :
19983: CALL 32863 0 0
19987: GO 20050
19989: LD_INT 5
19991: DOUBLE
19992: EQUAL
19993: IFTRUE 19997
19995: GO 20004
19997: POP
// hHackInvisible ; 6 :
19998: CALL 32974 0 0
20002: GO 20050
20004: LD_INT 6
20006: DOUBLE
20007: EQUAL
20008: IFTRUE 20012
20010: GO 20019
20012: POP
// hHackChangeYourSide ; 7 :
20013: CALL 33031 0 0
20017: GO 20050
20019: LD_INT 7
20021: DOUBLE
20022: EQUAL
20023: IFTRUE 20027
20025: GO 20034
20027: POP
// hHackChangeUnitSide ; 8 :
20028: CALL 33073 0 0
20032: GO 20050
20034: LD_INT 8
20036: DOUBLE
20037: EQUAL
20038: IFTRUE 20042
20040: GO 20049
20042: POP
// hHackFog ; end ;
20043: CALL 33174 0 0
20047: GO 20050
20049: POP
// end ; if p2 = game_save_mode then
20050: LD_VAR 0 2
20054: PUSH
20055: LD_INT 102
20057: EQUAL
20058: IFFALSE 20113
// begin if p3 = 1 then
20060: LD_VAR 0 3
20064: PUSH
20065: LD_INT 1
20067: EQUAL
20068: IFFALSE 20080
// globalGameSaveCounter := p4 ;
20070: LD_ADDR_EXP 43
20074: PUSH
20075: LD_VAR 0 4
20079: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20080: LD_VAR 0 3
20084: PUSH
20085: LD_INT 2
20087: EQUAL
20088: PUSH
20089: LD_EXP 43
20093: AND
20094: IFFALSE 20113
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20096: LD_STRING setGameSaveCounter(
20098: PUSH
20099: LD_EXP 43
20103: STR
20104: PUSH
20105: LD_STRING )
20107: STR
20108: PPUSH
20109: CALL_OW 559
// end ; end ;
20113: LD_VAR 0 7
20117: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20118: LD_INT 0
20120: PPUSH
// streamModeActive := false ;
20121: LD_ADDR_EXP 44
20125: PUSH
20126: LD_INT 0
20128: ST_TO_ADDR
// normalCounter := 36 ;
20129: LD_ADDR_EXP 45
20133: PUSH
20134: LD_INT 36
20136: ST_TO_ADDR
// hardcoreCounter := 18 ;
20137: LD_ADDR_EXP 46
20141: PUSH
20142: LD_INT 18
20144: ST_TO_ADDR
// sRocket := false ;
20145: LD_ADDR_EXP 49
20149: PUSH
20150: LD_INT 0
20152: ST_TO_ADDR
// sSpeed := false ;
20153: LD_ADDR_EXP 48
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// sEngine := false ;
20161: LD_ADDR_EXP 50
20165: PUSH
20166: LD_INT 0
20168: ST_TO_ADDR
// sSpec := false ;
20169: LD_ADDR_EXP 47
20173: PUSH
20174: LD_INT 0
20176: ST_TO_ADDR
// sLevel := false ;
20177: LD_ADDR_EXP 51
20181: PUSH
20182: LD_INT 0
20184: ST_TO_ADDR
// sArmoury := false ;
20185: LD_ADDR_EXP 52
20189: PUSH
20190: LD_INT 0
20192: ST_TO_ADDR
// sRadar := false ;
20193: LD_ADDR_EXP 53
20197: PUSH
20198: LD_INT 0
20200: ST_TO_ADDR
// sBunker := false ;
20201: LD_ADDR_EXP 54
20205: PUSH
20206: LD_INT 0
20208: ST_TO_ADDR
// sHack := false ;
20209: LD_ADDR_EXP 55
20213: PUSH
20214: LD_INT 0
20216: ST_TO_ADDR
// sFire := false ;
20217: LD_ADDR_EXP 56
20221: PUSH
20222: LD_INT 0
20224: ST_TO_ADDR
// sRefresh := false ;
20225: LD_ADDR_EXP 57
20229: PUSH
20230: LD_INT 0
20232: ST_TO_ADDR
// sExp := false ;
20233: LD_ADDR_EXP 58
20237: PUSH
20238: LD_INT 0
20240: ST_TO_ADDR
// sDepot := false ;
20241: LD_ADDR_EXP 59
20245: PUSH
20246: LD_INT 0
20248: ST_TO_ADDR
// sFlag := false ;
20249: LD_ADDR_EXP 60
20253: PUSH
20254: LD_INT 0
20256: ST_TO_ADDR
// sKamikadze := false ;
20257: LD_ADDR_EXP 68
20261: PUSH
20262: LD_INT 0
20264: ST_TO_ADDR
// sTroll := false ;
20265: LD_ADDR_EXP 69
20269: PUSH
20270: LD_INT 0
20272: ST_TO_ADDR
// sSlow := false ;
20273: LD_ADDR_EXP 70
20277: PUSH
20278: LD_INT 0
20280: ST_TO_ADDR
// sLack := false ;
20281: LD_ADDR_EXP 71
20285: PUSH
20286: LD_INT 0
20288: ST_TO_ADDR
// sTank := false ;
20289: LD_ADDR_EXP 73
20293: PUSH
20294: LD_INT 0
20296: ST_TO_ADDR
// sRemote := false ;
20297: LD_ADDR_EXP 74
20301: PUSH
20302: LD_INT 0
20304: ST_TO_ADDR
// sPowell := false ;
20305: LD_ADDR_EXP 75
20309: PUSH
20310: LD_INT 0
20312: ST_TO_ADDR
// sTeleport := false ;
20313: LD_ADDR_EXP 78
20317: PUSH
20318: LD_INT 0
20320: ST_TO_ADDR
// sOilTower := false ;
20321: LD_ADDR_EXP 80
20325: PUSH
20326: LD_INT 0
20328: ST_TO_ADDR
// sShovel := false ;
20329: LD_ADDR_EXP 81
20333: PUSH
20334: LD_INT 0
20336: ST_TO_ADDR
// sSheik := false ;
20337: LD_ADDR_EXP 82
20341: PUSH
20342: LD_INT 0
20344: ST_TO_ADDR
// sEarthquake := false ;
20345: LD_ADDR_EXP 84
20349: PUSH
20350: LD_INT 0
20352: ST_TO_ADDR
// sAI := false ;
20353: LD_ADDR_EXP 85
20357: PUSH
20358: LD_INT 0
20360: ST_TO_ADDR
// sCargo := false ;
20361: LD_ADDR_EXP 88
20365: PUSH
20366: LD_INT 0
20368: ST_TO_ADDR
// sDLaser := false ;
20369: LD_ADDR_EXP 89
20373: PUSH
20374: LD_INT 0
20376: ST_TO_ADDR
// sExchange := false ;
20377: LD_ADDR_EXP 90
20381: PUSH
20382: LD_INT 0
20384: ST_TO_ADDR
// sFac := false ;
20385: LD_ADDR_EXP 91
20389: PUSH
20390: LD_INT 0
20392: ST_TO_ADDR
// sPower := false ;
20393: LD_ADDR_EXP 92
20397: PUSH
20398: LD_INT 0
20400: ST_TO_ADDR
// sRandom := false ;
20401: LD_ADDR_EXP 93
20405: PUSH
20406: LD_INT 0
20408: ST_TO_ADDR
// sShield := false ;
20409: LD_ADDR_EXP 94
20413: PUSH
20414: LD_INT 0
20416: ST_TO_ADDR
// sTime := false ;
20417: LD_ADDR_EXP 95
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// sTools := false ;
20425: LD_ADDR_EXP 96
20429: PUSH
20430: LD_INT 0
20432: ST_TO_ADDR
// sSold := false ;
20433: LD_ADDR_EXP 61
20437: PUSH
20438: LD_INT 0
20440: ST_TO_ADDR
// sDiff := false ;
20441: LD_ADDR_EXP 62
20445: PUSH
20446: LD_INT 0
20448: ST_TO_ADDR
// sFog := false ;
20449: LD_ADDR_EXP 65
20453: PUSH
20454: LD_INT 0
20456: ST_TO_ADDR
// sReset := false ;
20457: LD_ADDR_EXP 66
20461: PUSH
20462: LD_INT 0
20464: ST_TO_ADDR
// sSun := false ;
20465: LD_ADDR_EXP 67
20469: PUSH
20470: LD_INT 0
20472: ST_TO_ADDR
// sTiger := false ;
20473: LD_ADDR_EXP 63
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// sBomb := false ;
20481: LD_ADDR_EXP 64
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// sWound := false ;
20489: LD_ADDR_EXP 72
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
// sBetray := false ;
20497: LD_ADDR_EXP 76
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// sContamin := false ;
20505: LD_ADDR_EXP 77
20509: PUSH
20510: LD_INT 0
20512: ST_TO_ADDR
// sOil := false ;
20513: LD_ADDR_EXP 79
20517: PUSH
20518: LD_INT 0
20520: ST_TO_ADDR
// sStu := false ;
20521: LD_ADDR_EXP 83
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// sBazooka := false ;
20529: LD_ADDR_EXP 86
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// sMortar := false ;
20537: LD_ADDR_EXP 87
20541: PUSH
20542: LD_INT 0
20544: ST_TO_ADDR
// sRanger := false ;
20545: LD_ADDR_EXP 97
20549: PUSH
20550: LD_INT 0
20552: ST_TO_ADDR
// sComputer := false ;
20553: LD_ADDR_EXP 98
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// s30 := false ;
20561: LD_ADDR_EXP 99
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// s60 := false ;
20569: LD_ADDR_EXP 100
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// end ;
20577: LD_VAR 0 1
20581: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20582: LD_INT 0
20584: PPUSH
20585: PPUSH
20586: PPUSH
20587: PPUSH
20588: PPUSH
20589: PPUSH
20590: PPUSH
// result := [ ] ;
20591: LD_ADDR_VAR 0 2
20595: PUSH
20596: EMPTY
20597: ST_TO_ADDR
// if campaign_id = 1 then
20598: LD_OWVAR 69
20602: PUSH
20603: LD_INT 1
20605: EQUAL
20606: IFFALSE 23772
// begin case mission_number of 1 :
20608: LD_OWVAR 70
20612: PUSH
20613: LD_INT 1
20615: DOUBLE
20616: EQUAL
20617: IFTRUE 20621
20619: GO 20697
20621: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20622: LD_ADDR_VAR 0 2
20626: PUSH
20627: LD_INT 2
20629: PUSH
20630: LD_INT 4
20632: PUSH
20633: LD_INT 11
20635: PUSH
20636: LD_INT 12
20638: PUSH
20639: LD_INT 15
20641: PUSH
20642: LD_INT 16
20644: PUSH
20645: LD_INT 22
20647: PUSH
20648: LD_INT 23
20650: PUSH
20651: LD_INT 26
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 101
20667: PUSH
20668: LD_INT 102
20670: PUSH
20671: LD_INT 106
20673: PUSH
20674: LD_INT 116
20676: PUSH
20677: LD_INT 117
20679: PUSH
20680: LD_INT 118
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: ST_TO_ADDR
20695: GO 23770
20697: LD_INT 2
20699: DOUBLE
20700: EQUAL
20701: IFTRUE 20705
20703: GO 20789
20705: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20706: LD_ADDR_VAR 0 2
20710: PUSH
20711: LD_INT 2
20713: PUSH
20714: LD_INT 4
20716: PUSH
20717: LD_INT 11
20719: PUSH
20720: LD_INT 12
20722: PUSH
20723: LD_INT 15
20725: PUSH
20726: LD_INT 16
20728: PUSH
20729: LD_INT 22
20731: PUSH
20732: LD_INT 23
20734: PUSH
20735: LD_INT 26
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 101
20751: PUSH
20752: LD_INT 102
20754: PUSH
20755: LD_INT 105
20757: PUSH
20758: LD_INT 106
20760: PUSH
20761: LD_INT 108
20763: PUSH
20764: LD_INT 116
20766: PUSH
20767: LD_INT 117
20769: PUSH
20770: LD_INT 118
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: ST_TO_ADDR
20787: GO 23770
20789: LD_INT 3
20791: DOUBLE
20792: EQUAL
20793: IFTRUE 20797
20795: GO 20885
20797: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20798: LD_ADDR_VAR 0 2
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: LD_INT 4
20808: PUSH
20809: LD_INT 5
20811: PUSH
20812: LD_INT 11
20814: PUSH
20815: LD_INT 12
20817: PUSH
20818: LD_INT 15
20820: PUSH
20821: LD_INT 16
20823: PUSH
20824: LD_INT 22
20826: PUSH
20827: LD_INT 26
20829: PUSH
20830: LD_INT 36
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 101
20847: PUSH
20848: LD_INT 102
20850: PUSH
20851: LD_INT 105
20853: PUSH
20854: LD_INT 106
20856: PUSH
20857: LD_INT 108
20859: PUSH
20860: LD_INT 116
20862: PUSH
20863: LD_INT 117
20865: PUSH
20866: LD_INT 118
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: ST_TO_ADDR
20883: GO 23770
20885: LD_INT 4
20887: DOUBLE
20888: EQUAL
20889: IFTRUE 20893
20891: GO 20989
20893: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20894: LD_ADDR_VAR 0 2
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: LD_INT 4
20904: PUSH
20905: LD_INT 5
20907: PUSH
20908: LD_INT 8
20910: PUSH
20911: LD_INT 11
20913: PUSH
20914: LD_INT 12
20916: PUSH
20917: LD_INT 15
20919: PUSH
20920: LD_INT 16
20922: PUSH
20923: LD_INT 22
20925: PUSH
20926: LD_INT 23
20928: PUSH
20929: LD_INT 26
20931: PUSH
20932: LD_INT 36
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 101
20951: PUSH
20952: LD_INT 102
20954: PUSH
20955: LD_INT 105
20957: PUSH
20958: LD_INT 106
20960: PUSH
20961: LD_INT 108
20963: PUSH
20964: LD_INT 116
20966: PUSH
20967: LD_INT 117
20969: PUSH
20970: LD_INT 118
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: ST_TO_ADDR
20987: GO 23770
20989: LD_INT 5
20991: DOUBLE
20992: EQUAL
20993: IFTRUE 20997
20995: GO 21109
20997: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20998: LD_ADDR_VAR 0 2
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: LD_INT 4
21008: PUSH
21009: LD_INT 5
21011: PUSH
21012: LD_INT 6
21014: PUSH
21015: LD_INT 8
21017: PUSH
21018: LD_INT 11
21020: PUSH
21021: LD_INT 12
21023: PUSH
21024: LD_INT 15
21026: PUSH
21027: LD_INT 16
21029: PUSH
21030: LD_INT 22
21032: PUSH
21033: LD_INT 23
21035: PUSH
21036: LD_INT 25
21038: PUSH
21039: LD_INT 26
21041: PUSH
21042: LD_INT 36
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 101
21063: PUSH
21064: LD_INT 102
21066: PUSH
21067: LD_INT 105
21069: PUSH
21070: LD_INT 106
21072: PUSH
21073: LD_INT 108
21075: PUSH
21076: LD_INT 109
21078: PUSH
21079: LD_INT 112
21081: PUSH
21082: LD_INT 116
21084: PUSH
21085: LD_INT 117
21087: PUSH
21088: LD_INT 118
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: ST_TO_ADDR
21107: GO 23770
21109: LD_INT 6
21111: DOUBLE
21112: EQUAL
21113: IFTRUE 21117
21115: GO 21249
21117: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21118: LD_ADDR_VAR 0 2
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: LD_INT 4
21128: PUSH
21129: LD_INT 5
21131: PUSH
21132: LD_INT 6
21134: PUSH
21135: LD_INT 8
21137: PUSH
21138: LD_INT 11
21140: PUSH
21141: LD_INT 12
21143: PUSH
21144: LD_INT 15
21146: PUSH
21147: LD_INT 16
21149: PUSH
21150: LD_INT 20
21152: PUSH
21153: LD_INT 21
21155: PUSH
21156: LD_INT 22
21158: PUSH
21159: LD_INT 23
21161: PUSH
21162: LD_INT 25
21164: PUSH
21165: LD_INT 26
21167: PUSH
21168: LD_INT 30
21170: PUSH
21171: LD_INT 31
21173: PUSH
21174: LD_INT 32
21176: PUSH
21177: LD_INT 36
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 101
21203: PUSH
21204: LD_INT 102
21206: PUSH
21207: LD_INT 105
21209: PUSH
21210: LD_INT 106
21212: PUSH
21213: LD_INT 108
21215: PUSH
21216: LD_INT 109
21218: PUSH
21219: LD_INT 112
21221: PUSH
21222: LD_INT 116
21224: PUSH
21225: LD_INT 117
21227: PUSH
21228: LD_INT 118
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: ST_TO_ADDR
21247: GO 23770
21249: LD_INT 7
21251: DOUBLE
21252: EQUAL
21253: IFTRUE 21257
21255: GO 21369
21257: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21258: LD_ADDR_VAR 0 2
21262: PUSH
21263: LD_INT 2
21265: PUSH
21266: LD_INT 4
21268: PUSH
21269: LD_INT 5
21271: PUSH
21272: LD_INT 7
21274: PUSH
21275: LD_INT 11
21277: PUSH
21278: LD_INT 12
21280: PUSH
21281: LD_INT 15
21283: PUSH
21284: LD_INT 16
21286: PUSH
21287: LD_INT 20
21289: PUSH
21290: LD_INT 21
21292: PUSH
21293: LD_INT 22
21295: PUSH
21296: LD_INT 23
21298: PUSH
21299: LD_INT 25
21301: PUSH
21302: LD_INT 26
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 101
21323: PUSH
21324: LD_INT 102
21326: PUSH
21327: LD_INT 103
21329: PUSH
21330: LD_INT 105
21332: PUSH
21333: LD_INT 106
21335: PUSH
21336: LD_INT 108
21338: PUSH
21339: LD_INT 112
21341: PUSH
21342: LD_INT 116
21344: PUSH
21345: LD_INT 117
21347: PUSH
21348: LD_INT 118
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: ST_TO_ADDR
21367: GO 23770
21369: LD_INT 8
21371: DOUBLE
21372: EQUAL
21373: IFTRUE 21377
21375: GO 21517
21377: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21378: LD_ADDR_VAR 0 2
21382: PUSH
21383: LD_INT 2
21385: PUSH
21386: LD_INT 4
21388: PUSH
21389: LD_INT 5
21391: PUSH
21392: LD_INT 6
21394: PUSH
21395: LD_INT 7
21397: PUSH
21398: LD_INT 8
21400: PUSH
21401: LD_INT 11
21403: PUSH
21404: LD_INT 12
21406: PUSH
21407: LD_INT 15
21409: PUSH
21410: LD_INT 16
21412: PUSH
21413: LD_INT 20
21415: PUSH
21416: LD_INT 21
21418: PUSH
21419: LD_INT 22
21421: PUSH
21422: LD_INT 23
21424: PUSH
21425: LD_INT 25
21427: PUSH
21428: LD_INT 26
21430: PUSH
21431: LD_INT 30
21433: PUSH
21434: LD_INT 31
21436: PUSH
21437: LD_INT 32
21439: PUSH
21440: LD_INT 36
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 101
21467: PUSH
21468: LD_INT 102
21470: PUSH
21471: LD_INT 103
21473: PUSH
21474: LD_INT 105
21476: PUSH
21477: LD_INT 106
21479: PUSH
21480: LD_INT 108
21482: PUSH
21483: LD_INT 109
21485: PUSH
21486: LD_INT 112
21488: PUSH
21489: LD_INT 116
21491: PUSH
21492: LD_INT 117
21494: PUSH
21495: LD_INT 118
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: ST_TO_ADDR
21515: GO 23770
21517: LD_INT 9
21519: DOUBLE
21520: EQUAL
21521: IFTRUE 21525
21523: GO 21673
21525: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21526: LD_ADDR_VAR 0 2
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: LD_INT 4
21536: PUSH
21537: LD_INT 5
21539: PUSH
21540: LD_INT 6
21542: PUSH
21543: LD_INT 7
21545: PUSH
21546: LD_INT 8
21548: PUSH
21549: LD_INT 11
21551: PUSH
21552: LD_INT 12
21554: PUSH
21555: LD_INT 15
21557: PUSH
21558: LD_INT 16
21560: PUSH
21561: LD_INT 20
21563: PUSH
21564: LD_INT 21
21566: PUSH
21567: LD_INT 22
21569: PUSH
21570: LD_INT 23
21572: PUSH
21573: LD_INT 25
21575: PUSH
21576: LD_INT 26
21578: PUSH
21579: LD_INT 28
21581: PUSH
21582: LD_INT 30
21584: PUSH
21585: LD_INT 31
21587: PUSH
21588: LD_INT 32
21590: PUSH
21591: LD_INT 36
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 101
21619: PUSH
21620: LD_INT 102
21622: PUSH
21623: LD_INT 103
21625: PUSH
21626: LD_INT 105
21628: PUSH
21629: LD_INT 106
21631: PUSH
21632: LD_INT 108
21634: PUSH
21635: LD_INT 109
21637: PUSH
21638: LD_INT 112
21640: PUSH
21641: LD_INT 114
21643: PUSH
21644: LD_INT 116
21646: PUSH
21647: LD_INT 117
21649: PUSH
21650: LD_INT 118
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: ST_TO_ADDR
21671: GO 23770
21673: LD_INT 10
21675: DOUBLE
21676: EQUAL
21677: IFTRUE 21681
21679: GO 21877
21681: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21682: LD_ADDR_VAR 0 2
21686: PUSH
21687: LD_INT 2
21689: PUSH
21690: LD_INT 4
21692: PUSH
21693: LD_INT 5
21695: PUSH
21696: LD_INT 6
21698: PUSH
21699: LD_INT 7
21701: PUSH
21702: LD_INT 8
21704: PUSH
21705: LD_INT 9
21707: PUSH
21708: LD_INT 10
21710: PUSH
21711: LD_INT 11
21713: PUSH
21714: LD_INT 12
21716: PUSH
21717: LD_INT 13
21719: PUSH
21720: LD_INT 14
21722: PUSH
21723: LD_INT 15
21725: PUSH
21726: LD_INT 16
21728: PUSH
21729: LD_INT 17
21731: PUSH
21732: LD_INT 18
21734: PUSH
21735: LD_INT 19
21737: PUSH
21738: LD_INT 20
21740: PUSH
21741: LD_INT 21
21743: PUSH
21744: LD_INT 22
21746: PUSH
21747: LD_INT 23
21749: PUSH
21750: LD_INT 24
21752: PUSH
21753: LD_INT 25
21755: PUSH
21756: LD_INT 26
21758: PUSH
21759: LD_INT 28
21761: PUSH
21762: LD_INT 30
21764: PUSH
21765: LD_INT 31
21767: PUSH
21768: LD_INT 32
21770: PUSH
21771: LD_INT 36
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 101
21807: PUSH
21808: LD_INT 102
21810: PUSH
21811: LD_INT 103
21813: PUSH
21814: LD_INT 104
21816: PUSH
21817: LD_INT 105
21819: PUSH
21820: LD_INT 106
21822: PUSH
21823: LD_INT 107
21825: PUSH
21826: LD_INT 108
21828: PUSH
21829: LD_INT 109
21831: PUSH
21832: LD_INT 110
21834: PUSH
21835: LD_INT 111
21837: PUSH
21838: LD_INT 112
21840: PUSH
21841: LD_INT 114
21843: PUSH
21844: LD_INT 116
21846: PUSH
21847: LD_INT 117
21849: PUSH
21850: LD_INT 118
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: ST_TO_ADDR
21875: GO 23770
21877: LD_INT 11
21879: DOUBLE
21880: EQUAL
21881: IFTRUE 21885
21883: GO 22089
21885: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21886: LD_ADDR_VAR 0 2
21890: PUSH
21891: LD_INT 2
21893: PUSH
21894: LD_INT 3
21896: PUSH
21897: LD_INT 4
21899: PUSH
21900: LD_INT 5
21902: PUSH
21903: LD_INT 6
21905: PUSH
21906: LD_INT 7
21908: PUSH
21909: LD_INT 8
21911: PUSH
21912: LD_INT 9
21914: PUSH
21915: LD_INT 10
21917: PUSH
21918: LD_INT 11
21920: PUSH
21921: LD_INT 12
21923: PUSH
21924: LD_INT 13
21926: PUSH
21927: LD_INT 14
21929: PUSH
21930: LD_INT 15
21932: PUSH
21933: LD_INT 16
21935: PUSH
21936: LD_INT 17
21938: PUSH
21939: LD_INT 18
21941: PUSH
21942: LD_INT 19
21944: PUSH
21945: LD_INT 20
21947: PUSH
21948: LD_INT 21
21950: PUSH
21951: LD_INT 22
21953: PUSH
21954: LD_INT 23
21956: PUSH
21957: LD_INT 24
21959: PUSH
21960: LD_INT 25
21962: PUSH
21963: LD_INT 26
21965: PUSH
21966: LD_INT 28
21968: PUSH
21969: LD_INT 30
21971: PUSH
21972: LD_INT 31
21974: PUSH
21975: LD_INT 32
21977: PUSH
21978: LD_INT 34
21980: PUSH
21981: LD_INT 36
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 101
22019: PUSH
22020: LD_INT 102
22022: PUSH
22023: LD_INT 103
22025: PUSH
22026: LD_INT 104
22028: PUSH
22029: LD_INT 105
22031: PUSH
22032: LD_INT 106
22034: PUSH
22035: LD_INT 107
22037: PUSH
22038: LD_INT 108
22040: PUSH
22041: LD_INT 109
22043: PUSH
22044: LD_INT 110
22046: PUSH
22047: LD_INT 111
22049: PUSH
22050: LD_INT 112
22052: PUSH
22053: LD_INT 114
22055: PUSH
22056: LD_INT 116
22058: PUSH
22059: LD_INT 117
22061: PUSH
22062: LD_INT 118
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: ST_TO_ADDR
22087: GO 23770
22089: LD_INT 12
22091: DOUBLE
22092: EQUAL
22093: IFTRUE 22097
22095: GO 22317
22097: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22098: LD_ADDR_VAR 0 2
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: LD_INT 2
22108: PUSH
22109: LD_INT 3
22111: PUSH
22112: LD_INT 4
22114: PUSH
22115: LD_INT 5
22117: PUSH
22118: LD_INT 6
22120: PUSH
22121: LD_INT 7
22123: PUSH
22124: LD_INT 8
22126: PUSH
22127: LD_INT 9
22129: PUSH
22130: LD_INT 10
22132: PUSH
22133: LD_INT 11
22135: PUSH
22136: LD_INT 12
22138: PUSH
22139: LD_INT 13
22141: PUSH
22142: LD_INT 14
22144: PUSH
22145: LD_INT 15
22147: PUSH
22148: LD_INT 16
22150: PUSH
22151: LD_INT 17
22153: PUSH
22154: LD_INT 18
22156: PUSH
22157: LD_INT 19
22159: PUSH
22160: LD_INT 20
22162: PUSH
22163: LD_INT 21
22165: PUSH
22166: LD_INT 22
22168: PUSH
22169: LD_INT 23
22171: PUSH
22172: LD_INT 24
22174: PUSH
22175: LD_INT 25
22177: PUSH
22178: LD_INT 26
22180: PUSH
22181: LD_INT 27
22183: PUSH
22184: LD_INT 28
22186: PUSH
22187: LD_INT 30
22189: PUSH
22190: LD_INT 31
22192: PUSH
22193: LD_INT 32
22195: PUSH
22196: LD_INT 33
22198: PUSH
22199: LD_INT 34
22201: PUSH
22202: LD_INT 36
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 101
22243: PUSH
22244: LD_INT 102
22246: PUSH
22247: LD_INT 103
22249: PUSH
22250: LD_INT 104
22252: PUSH
22253: LD_INT 105
22255: PUSH
22256: LD_INT 106
22258: PUSH
22259: LD_INT 107
22261: PUSH
22262: LD_INT 108
22264: PUSH
22265: LD_INT 109
22267: PUSH
22268: LD_INT 110
22270: PUSH
22271: LD_INT 111
22273: PUSH
22274: LD_INT 112
22276: PUSH
22277: LD_INT 113
22279: PUSH
22280: LD_INT 114
22282: PUSH
22283: LD_INT 116
22285: PUSH
22286: LD_INT 117
22288: PUSH
22289: LD_INT 118
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: ST_TO_ADDR
22315: GO 23770
22317: LD_INT 13
22319: DOUBLE
22320: EQUAL
22321: IFTRUE 22325
22323: GO 22533
22325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22326: LD_ADDR_VAR 0 2
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: LD_INT 2
22336: PUSH
22337: LD_INT 3
22339: PUSH
22340: LD_INT 4
22342: PUSH
22343: LD_INT 5
22345: PUSH
22346: LD_INT 8
22348: PUSH
22349: LD_INT 9
22351: PUSH
22352: LD_INT 10
22354: PUSH
22355: LD_INT 11
22357: PUSH
22358: LD_INT 12
22360: PUSH
22361: LD_INT 14
22363: PUSH
22364: LD_INT 15
22366: PUSH
22367: LD_INT 16
22369: PUSH
22370: LD_INT 17
22372: PUSH
22373: LD_INT 18
22375: PUSH
22376: LD_INT 19
22378: PUSH
22379: LD_INT 20
22381: PUSH
22382: LD_INT 21
22384: PUSH
22385: LD_INT 22
22387: PUSH
22388: LD_INT 23
22390: PUSH
22391: LD_INT 24
22393: PUSH
22394: LD_INT 25
22396: PUSH
22397: LD_INT 26
22399: PUSH
22400: LD_INT 27
22402: PUSH
22403: LD_INT 28
22405: PUSH
22406: LD_INT 30
22408: PUSH
22409: LD_INT 31
22411: PUSH
22412: LD_INT 32
22414: PUSH
22415: LD_INT 33
22417: PUSH
22418: LD_INT 34
22420: PUSH
22421: LD_INT 36
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 101
22459: PUSH
22460: LD_INT 102
22462: PUSH
22463: LD_INT 103
22465: PUSH
22466: LD_INT 104
22468: PUSH
22469: LD_INT 105
22471: PUSH
22472: LD_INT 106
22474: PUSH
22475: LD_INT 107
22477: PUSH
22478: LD_INT 108
22480: PUSH
22481: LD_INT 109
22483: PUSH
22484: LD_INT 110
22486: PUSH
22487: LD_INT 111
22489: PUSH
22490: LD_INT 112
22492: PUSH
22493: LD_INT 113
22495: PUSH
22496: LD_INT 114
22498: PUSH
22499: LD_INT 116
22501: PUSH
22502: LD_INT 117
22504: PUSH
22505: LD_INT 118
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: ST_TO_ADDR
22531: GO 23770
22533: LD_INT 14
22535: DOUBLE
22536: EQUAL
22537: IFTRUE 22541
22539: GO 22765
22541: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22542: LD_ADDR_VAR 0 2
22546: PUSH
22547: LD_INT 1
22549: PUSH
22550: LD_INT 2
22552: PUSH
22553: LD_INT 3
22555: PUSH
22556: LD_INT 4
22558: PUSH
22559: LD_INT 5
22561: PUSH
22562: LD_INT 6
22564: PUSH
22565: LD_INT 7
22567: PUSH
22568: LD_INT 8
22570: PUSH
22571: LD_INT 9
22573: PUSH
22574: LD_INT 10
22576: PUSH
22577: LD_INT 11
22579: PUSH
22580: LD_INT 12
22582: PUSH
22583: LD_INT 13
22585: PUSH
22586: LD_INT 14
22588: PUSH
22589: LD_INT 15
22591: PUSH
22592: LD_INT 16
22594: PUSH
22595: LD_INT 17
22597: PUSH
22598: LD_INT 18
22600: PUSH
22601: LD_INT 19
22603: PUSH
22604: LD_INT 20
22606: PUSH
22607: LD_INT 21
22609: PUSH
22610: LD_INT 22
22612: PUSH
22613: LD_INT 23
22615: PUSH
22616: LD_INT 24
22618: PUSH
22619: LD_INT 25
22621: PUSH
22622: LD_INT 26
22624: PUSH
22625: LD_INT 27
22627: PUSH
22628: LD_INT 28
22630: PUSH
22631: LD_INT 29
22633: PUSH
22634: LD_INT 30
22636: PUSH
22637: LD_INT 31
22639: PUSH
22640: LD_INT 32
22642: PUSH
22643: LD_INT 33
22645: PUSH
22646: LD_INT 34
22648: PUSH
22649: LD_INT 36
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 101
22691: PUSH
22692: LD_INT 102
22694: PUSH
22695: LD_INT 103
22697: PUSH
22698: LD_INT 104
22700: PUSH
22701: LD_INT 105
22703: PUSH
22704: LD_INT 106
22706: PUSH
22707: LD_INT 107
22709: PUSH
22710: LD_INT 108
22712: PUSH
22713: LD_INT 109
22715: PUSH
22716: LD_INT 110
22718: PUSH
22719: LD_INT 111
22721: PUSH
22722: LD_INT 112
22724: PUSH
22725: LD_INT 113
22727: PUSH
22728: LD_INT 114
22730: PUSH
22731: LD_INT 116
22733: PUSH
22734: LD_INT 117
22736: PUSH
22737: LD_INT 118
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: ST_TO_ADDR
22763: GO 23770
22765: LD_INT 15
22767: DOUBLE
22768: EQUAL
22769: IFTRUE 22773
22771: GO 22997
22773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22774: LD_ADDR_VAR 0 2
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: LD_INT 4
22790: PUSH
22791: LD_INT 5
22793: PUSH
22794: LD_INT 6
22796: PUSH
22797: LD_INT 7
22799: PUSH
22800: LD_INT 8
22802: PUSH
22803: LD_INT 9
22805: PUSH
22806: LD_INT 10
22808: PUSH
22809: LD_INT 11
22811: PUSH
22812: LD_INT 12
22814: PUSH
22815: LD_INT 13
22817: PUSH
22818: LD_INT 14
22820: PUSH
22821: LD_INT 15
22823: PUSH
22824: LD_INT 16
22826: PUSH
22827: LD_INT 17
22829: PUSH
22830: LD_INT 18
22832: PUSH
22833: LD_INT 19
22835: PUSH
22836: LD_INT 20
22838: PUSH
22839: LD_INT 21
22841: PUSH
22842: LD_INT 22
22844: PUSH
22845: LD_INT 23
22847: PUSH
22848: LD_INT 24
22850: PUSH
22851: LD_INT 25
22853: PUSH
22854: LD_INT 26
22856: PUSH
22857: LD_INT 27
22859: PUSH
22860: LD_INT 28
22862: PUSH
22863: LD_INT 29
22865: PUSH
22866: LD_INT 30
22868: PUSH
22869: LD_INT 31
22871: PUSH
22872: LD_INT 32
22874: PUSH
22875: LD_INT 33
22877: PUSH
22878: LD_INT 34
22880: PUSH
22881: LD_INT 36
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 101
22923: PUSH
22924: LD_INT 102
22926: PUSH
22927: LD_INT 103
22929: PUSH
22930: LD_INT 104
22932: PUSH
22933: LD_INT 105
22935: PUSH
22936: LD_INT 106
22938: PUSH
22939: LD_INT 107
22941: PUSH
22942: LD_INT 108
22944: PUSH
22945: LD_INT 109
22947: PUSH
22948: LD_INT 110
22950: PUSH
22951: LD_INT 111
22953: PUSH
22954: LD_INT 112
22956: PUSH
22957: LD_INT 113
22959: PUSH
22960: LD_INT 114
22962: PUSH
22963: LD_INT 116
22965: PUSH
22966: LD_INT 117
22968: PUSH
22969: LD_INT 118
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: ST_TO_ADDR
22995: GO 23770
22997: LD_INT 16
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23141
23005: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23006: LD_ADDR_VAR 0 2
23010: PUSH
23011: LD_INT 2
23013: PUSH
23014: LD_INT 4
23016: PUSH
23017: LD_INT 5
23019: PUSH
23020: LD_INT 7
23022: PUSH
23023: LD_INT 11
23025: PUSH
23026: LD_INT 12
23028: PUSH
23029: LD_INT 15
23031: PUSH
23032: LD_INT 16
23034: PUSH
23035: LD_INT 20
23037: PUSH
23038: LD_INT 21
23040: PUSH
23041: LD_INT 22
23043: PUSH
23044: LD_INT 23
23046: PUSH
23047: LD_INT 25
23049: PUSH
23050: LD_INT 26
23052: PUSH
23053: LD_INT 30
23055: PUSH
23056: LD_INT 31
23058: PUSH
23059: LD_INT 32
23061: PUSH
23062: LD_INT 33
23064: PUSH
23065: LD_INT 34
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 101
23091: PUSH
23092: LD_INT 102
23094: PUSH
23095: LD_INT 103
23097: PUSH
23098: LD_INT 106
23100: PUSH
23101: LD_INT 108
23103: PUSH
23104: LD_INT 112
23106: PUSH
23107: LD_INT 113
23109: PUSH
23110: LD_INT 114
23112: PUSH
23113: LD_INT 116
23115: PUSH
23116: LD_INT 117
23118: PUSH
23119: LD_INT 118
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: ST_TO_ADDR
23139: GO 23770
23141: LD_INT 17
23143: DOUBLE
23144: EQUAL
23145: IFTRUE 23149
23147: GO 23373
23149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23150: LD_ADDR_VAR 0 2
23154: PUSH
23155: LD_INT 1
23157: PUSH
23158: LD_INT 2
23160: PUSH
23161: LD_INT 3
23163: PUSH
23164: LD_INT 4
23166: PUSH
23167: LD_INT 5
23169: PUSH
23170: LD_INT 6
23172: PUSH
23173: LD_INT 7
23175: PUSH
23176: LD_INT 8
23178: PUSH
23179: LD_INT 9
23181: PUSH
23182: LD_INT 10
23184: PUSH
23185: LD_INT 11
23187: PUSH
23188: LD_INT 12
23190: PUSH
23191: LD_INT 13
23193: PUSH
23194: LD_INT 14
23196: PUSH
23197: LD_INT 15
23199: PUSH
23200: LD_INT 16
23202: PUSH
23203: LD_INT 17
23205: PUSH
23206: LD_INT 18
23208: PUSH
23209: LD_INT 19
23211: PUSH
23212: LD_INT 20
23214: PUSH
23215: LD_INT 21
23217: PUSH
23218: LD_INT 22
23220: PUSH
23221: LD_INT 23
23223: PUSH
23224: LD_INT 24
23226: PUSH
23227: LD_INT 25
23229: PUSH
23230: LD_INT 26
23232: PUSH
23233: LD_INT 27
23235: PUSH
23236: LD_INT 28
23238: PUSH
23239: LD_INT 29
23241: PUSH
23242: LD_INT 30
23244: PUSH
23245: LD_INT 31
23247: PUSH
23248: LD_INT 32
23250: PUSH
23251: LD_INT 33
23253: PUSH
23254: LD_INT 34
23256: PUSH
23257: LD_INT 36
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 101
23299: PUSH
23300: LD_INT 102
23302: PUSH
23303: LD_INT 103
23305: PUSH
23306: LD_INT 104
23308: PUSH
23309: LD_INT 105
23311: PUSH
23312: LD_INT 106
23314: PUSH
23315: LD_INT 107
23317: PUSH
23318: LD_INT 108
23320: PUSH
23321: LD_INT 109
23323: PUSH
23324: LD_INT 110
23326: PUSH
23327: LD_INT 111
23329: PUSH
23330: LD_INT 112
23332: PUSH
23333: LD_INT 113
23335: PUSH
23336: LD_INT 114
23338: PUSH
23339: LD_INT 116
23341: PUSH
23342: LD_INT 117
23344: PUSH
23345: LD_INT 118
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: ST_TO_ADDR
23371: GO 23770
23373: LD_INT 18
23375: DOUBLE
23376: EQUAL
23377: IFTRUE 23381
23379: GO 23529
23381: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23382: LD_ADDR_VAR 0 2
23386: PUSH
23387: LD_INT 2
23389: PUSH
23390: LD_INT 4
23392: PUSH
23393: LD_INT 5
23395: PUSH
23396: LD_INT 7
23398: PUSH
23399: LD_INT 11
23401: PUSH
23402: LD_INT 12
23404: PUSH
23405: LD_INT 15
23407: PUSH
23408: LD_INT 16
23410: PUSH
23411: LD_INT 20
23413: PUSH
23414: LD_INT 21
23416: PUSH
23417: LD_INT 22
23419: PUSH
23420: LD_INT 23
23422: PUSH
23423: LD_INT 25
23425: PUSH
23426: LD_INT 26
23428: PUSH
23429: LD_INT 30
23431: PUSH
23432: LD_INT 31
23434: PUSH
23435: LD_INT 32
23437: PUSH
23438: LD_INT 33
23440: PUSH
23441: LD_INT 34
23443: PUSH
23444: LD_INT 35
23446: PUSH
23447: LD_INT 36
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 101
23475: PUSH
23476: LD_INT 102
23478: PUSH
23479: LD_INT 103
23481: PUSH
23482: LD_INT 106
23484: PUSH
23485: LD_INT 108
23487: PUSH
23488: LD_INT 112
23490: PUSH
23491: LD_INT 113
23493: PUSH
23494: LD_INT 114
23496: PUSH
23497: LD_INT 115
23499: PUSH
23500: LD_INT 116
23502: PUSH
23503: LD_INT 117
23505: PUSH
23506: LD_INT 118
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: ST_TO_ADDR
23527: GO 23770
23529: LD_INT 19
23531: DOUBLE
23532: EQUAL
23533: IFTRUE 23537
23535: GO 23769
23537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23538: LD_ADDR_VAR 0 2
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 3
23551: PUSH
23552: LD_INT 4
23554: PUSH
23555: LD_INT 5
23557: PUSH
23558: LD_INT 6
23560: PUSH
23561: LD_INT 7
23563: PUSH
23564: LD_INT 8
23566: PUSH
23567: LD_INT 9
23569: PUSH
23570: LD_INT 10
23572: PUSH
23573: LD_INT 11
23575: PUSH
23576: LD_INT 12
23578: PUSH
23579: LD_INT 13
23581: PUSH
23582: LD_INT 14
23584: PUSH
23585: LD_INT 15
23587: PUSH
23588: LD_INT 16
23590: PUSH
23591: LD_INT 17
23593: PUSH
23594: LD_INT 18
23596: PUSH
23597: LD_INT 19
23599: PUSH
23600: LD_INT 20
23602: PUSH
23603: LD_INT 21
23605: PUSH
23606: LD_INT 22
23608: PUSH
23609: LD_INT 23
23611: PUSH
23612: LD_INT 24
23614: PUSH
23615: LD_INT 25
23617: PUSH
23618: LD_INT 26
23620: PUSH
23621: LD_INT 27
23623: PUSH
23624: LD_INT 28
23626: PUSH
23627: LD_INT 29
23629: PUSH
23630: LD_INT 30
23632: PUSH
23633: LD_INT 31
23635: PUSH
23636: LD_INT 32
23638: PUSH
23639: LD_INT 33
23641: PUSH
23642: LD_INT 34
23644: PUSH
23645: LD_INT 35
23647: PUSH
23648: LD_INT 36
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 101
23691: PUSH
23692: LD_INT 102
23694: PUSH
23695: LD_INT 103
23697: PUSH
23698: LD_INT 104
23700: PUSH
23701: LD_INT 105
23703: PUSH
23704: LD_INT 106
23706: PUSH
23707: LD_INT 107
23709: PUSH
23710: LD_INT 108
23712: PUSH
23713: LD_INT 109
23715: PUSH
23716: LD_INT 110
23718: PUSH
23719: LD_INT 111
23721: PUSH
23722: LD_INT 112
23724: PUSH
23725: LD_INT 113
23727: PUSH
23728: LD_INT 114
23730: PUSH
23731: LD_INT 115
23733: PUSH
23734: LD_INT 116
23736: PUSH
23737: LD_INT 117
23739: PUSH
23740: LD_INT 118
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: ST_TO_ADDR
23767: GO 23770
23769: POP
// end else
23770: GO 24001
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23772: LD_ADDR_VAR 0 2
23776: PUSH
23777: LD_INT 1
23779: PUSH
23780: LD_INT 2
23782: PUSH
23783: LD_INT 3
23785: PUSH
23786: LD_INT 4
23788: PUSH
23789: LD_INT 5
23791: PUSH
23792: LD_INT 6
23794: PUSH
23795: LD_INT 7
23797: PUSH
23798: LD_INT 8
23800: PUSH
23801: LD_INT 9
23803: PUSH
23804: LD_INT 10
23806: PUSH
23807: LD_INT 11
23809: PUSH
23810: LD_INT 12
23812: PUSH
23813: LD_INT 13
23815: PUSH
23816: LD_INT 14
23818: PUSH
23819: LD_INT 15
23821: PUSH
23822: LD_INT 16
23824: PUSH
23825: LD_INT 17
23827: PUSH
23828: LD_INT 18
23830: PUSH
23831: LD_INT 19
23833: PUSH
23834: LD_INT 20
23836: PUSH
23837: LD_INT 21
23839: PUSH
23840: LD_INT 22
23842: PUSH
23843: LD_INT 23
23845: PUSH
23846: LD_INT 24
23848: PUSH
23849: LD_INT 25
23851: PUSH
23852: LD_INT 26
23854: PUSH
23855: LD_INT 27
23857: PUSH
23858: LD_INT 28
23860: PUSH
23861: LD_INT 29
23863: PUSH
23864: LD_INT 30
23866: PUSH
23867: LD_INT 31
23869: PUSH
23870: LD_INT 32
23872: PUSH
23873: LD_INT 33
23875: PUSH
23876: LD_INT 34
23878: PUSH
23879: LD_INT 35
23881: PUSH
23882: LD_INT 36
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 101
23925: PUSH
23926: LD_INT 102
23928: PUSH
23929: LD_INT 103
23931: PUSH
23932: LD_INT 104
23934: PUSH
23935: LD_INT 105
23937: PUSH
23938: LD_INT 106
23940: PUSH
23941: LD_INT 107
23943: PUSH
23944: LD_INT 108
23946: PUSH
23947: LD_INT 109
23949: PUSH
23950: LD_INT 110
23952: PUSH
23953: LD_INT 111
23955: PUSH
23956: LD_INT 112
23958: PUSH
23959: LD_INT 113
23961: PUSH
23962: LD_INT 114
23964: PUSH
23965: LD_INT 115
23967: PUSH
23968: LD_INT 116
23970: PUSH
23971: LD_INT 117
23973: PUSH
23974: LD_INT 118
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: ST_TO_ADDR
// if result then
24001: LD_VAR 0 2
24005: IFFALSE 24791
// begin normal :=  ;
24007: LD_ADDR_VAR 0 5
24011: PUSH
24012: LD_STRING 
24014: ST_TO_ADDR
// hardcore :=  ;
24015: LD_ADDR_VAR 0 6
24019: PUSH
24020: LD_STRING 
24022: ST_TO_ADDR
// active :=  ;
24023: LD_ADDR_VAR 0 7
24027: PUSH
24028: LD_STRING 
24030: ST_TO_ADDR
// for i = 1 to normalCounter do
24031: LD_ADDR_VAR 0 8
24035: PUSH
24036: DOUBLE
24037: LD_INT 1
24039: DEC
24040: ST_TO_ADDR
24041: LD_EXP 45
24045: PUSH
24046: FOR_TO
24047: IFFALSE 24148
// begin tmp := 0 ;
24049: LD_ADDR_VAR 0 3
24053: PUSH
24054: LD_STRING 0
24056: ST_TO_ADDR
// if result [ 1 ] then
24057: LD_VAR 0 2
24061: PUSH
24062: LD_INT 1
24064: ARRAY
24065: IFFALSE 24130
// if result [ 1 ] [ 1 ] = i then
24067: LD_VAR 0 2
24071: PUSH
24072: LD_INT 1
24074: ARRAY
24075: PUSH
24076: LD_INT 1
24078: ARRAY
24079: PUSH
24080: LD_VAR 0 8
24084: EQUAL
24085: IFFALSE 24130
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24087: LD_ADDR_VAR 0 2
24091: PUSH
24092: LD_VAR 0 2
24096: PPUSH
24097: LD_INT 1
24099: PPUSH
24100: LD_VAR 0 2
24104: PUSH
24105: LD_INT 1
24107: ARRAY
24108: PPUSH
24109: LD_INT 1
24111: PPUSH
24112: CALL_OW 3
24116: PPUSH
24117: CALL_OW 1
24121: ST_TO_ADDR
// tmp := 1 ;
24122: LD_ADDR_VAR 0 3
24126: PUSH
24127: LD_STRING 1
24129: ST_TO_ADDR
// end ; normal := normal & tmp ;
24130: LD_ADDR_VAR 0 5
24134: PUSH
24135: LD_VAR 0 5
24139: PUSH
24140: LD_VAR 0 3
24144: STR
24145: ST_TO_ADDR
// end ;
24146: GO 24046
24148: POP
24149: POP
// for i = 1 to hardcoreCounter do
24150: LD_ADDR_VAR 0 8
24154: PUSH
24155: DOUBLE
24156: LD_INT 1
24158: DEC
24159: ST_TO_ADDR
24160: LD_EXP 46
24164: PUSH
24165: FOR_TO
24166: IFFALSE 24271
// begin tmp := 0 ;
24168: LD_ADDR_VAR 0 3
24172: PUSH
24173: LD_STRING 0
24175: ST_TO_ADDR
// if result [ 2 ] then
24176: LD_VAR 0 2
24180: PUSH
24181: LD_INT 2
24183: ARRAY
24184: IFFALSE 24253
// if result [ 2 ] [ 1 ] = 100 + i then
24186: LD_VAR 0 2
24190: PUSH
24191: LD_INT 2
24193: ARRAY
24194: PUSH
24195: LD_INT 1
24197: ARRAY
24198: PUSH
24199: LD_INT 100
24201: PUSH
24202: LD_VAR 0 8
24206: PLUS
24207: EQUAL
24208: IFFALSE 24253
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24210: LD_ADDR_VAR 0 2
24214: PUSH
24215: LD_VAR 0 2
24219: PPUSH
24220: LD_INT 2
24222: PPUSH
24223: LD_VAR 0 2
24227: PUSH
24228: LD_INT 2
24230: ARRAY
24231: PPUSH
24232: LD_INT 1
24234: PPUSH
24235: CALL_OW 3
24239: PPUSH
24240: CALL_OW 1
24244: ST_TO_ADDR
// tmp := 1 ;
24245: LD_ADDR_VAR 0 3
24249: PUSH
24250: LD_STRING 1
24252: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24253: LD_ADDR_VAR 0 6
24257: PUSH
24258: LD_VAR 0 6
24262: PUSH
24263: LD_VAR 0 3
24267: STR
24268: ST_TO_ADDR
// end ;
24269: GO 24165
24271: POP
24272: POP
// if isGameLoad then
24273: LD_VAR 0 1
24277: IFFALSE 24752
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24279: LD_ADDR_VAR 0 4
24283: PUSH
24284: LD_EXP 49
24288: PUSH
24289: LD_EXP 48
24293: PUSH
24294: LD_EXP 50
24298: PUSH
24299: LD_EXP 47
24303: PUSH
24304: LD_EXP 51
24308: PUSH
24309: LD_EXP 52
24313: PUSH
24314: LD_EXP 53
24318: PUSH
24319: LD_EXP 54
24323: PUSH
24324: LD_EXP 55
24328: PUSH
24329: LD_EXP 56
24333: PUSH
24334: LD_EXP 57
24338: PUSH
24339: LD_EXP 58
24343: PUSH
24344: LD_EXP 59
24348: PUSH
24349: LD_EXP 60
24353: PUSH
24354: LD_EXP 68
24358: PUSH
24359: LD_EXP 69
24363: PUSH
24364: LD_EXP 70
24368: PUSH
24369: LD_EXP 71
24373: PUSH
24374: LD_EXP 73
24378: PUSH
24379: LD_EXP 74
24383: PUSH
24384: LD_EXP 75
24388: PUSH
24389: LD_EXP 78
24393: PUSH
24394: LD_EXP 80
24398: PUSH
24399: LD_EXP 81
24403: PUSH
24404: LD_EXP 82
24408: PUSH
24409: LD_EXP 84
24413: PUSH
24414: LD_EXP 85
24418: PUSH
24419: LD_EXP 88
24423: PUSH
24424: LD_EXP 89
24428: PUSH
24429: LD_EXP 90
24433: PUSH
24434: LD_EXP 91
24438: PUSH
24439: LD_EXP 92
24443: PUSH
24444: LD_EXP 93
24448: PUSH
24449: LD_EXP 94
24453: PUSH
24454: LD_EXP 95
24458: PUSH
24459: LD_EXP 96
24463: PUSH
24464: LD_EXP 61
24468: PUSH
24469: LD_EXP 62
24473: PUSH
24474: LD_EXP 65
24478: PUSH
24479: LD_EXP 66
24483: PUSH
24484: LD_EXP 67
24488: PUSH
24489: LD_EXP 63
24493: PUSH
24494: LD_EXP 64
24498: PUSH
24499: LD_EXP 72
24503: PUSH
24504: LD_EXP 76
24508: PUSH
24509: LD_EXP 77
24513: PUSH
24514: LD_EXP 79
24518: PUSH
24519: LD_EXP 83
24523: PUSH
24524: LD_EXP 86
24528: PUSH
24529: LD_EXP 87
24533: PUSH
24534: LD_EXP 97
24538: PUSH
24539: LD_EXP 98
24543: PUSH
24544: LD_EXP 99
24548: PUSH
24549: LD_EXP 100
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: ST_TO_ADDR
// tmp :=  ;
24610: LD_ADDR_VAR 0 3
24614: PUSH
24615: LD_STRING 
24617: ST_TO_ADDR
// for i = 1 to normalCounter do
24618: LD_ADDR_VAR 0 8
24622: PUSH
24623: DOUBLE
24624: LD_INT 1
24626: DEC
24627: ST_TO_ADDR
24628: LD_EXP 45
24632: PUSH
24633: FOR_TO
24634: IFFALSE 24670
// begin if flags [ i ] then
24636: LD_VAR 0 4
24640: PUSH
24641: LD_VAR 0 8
24645: ARRAY
24646: IFFALSE 24668
// tmp := tmp & i & ; ;
24648: LD_ADDR_VAR 0 3
24652: PUSH
24653: LD_VAR 0 3
24657: PUSH
24658: LD_VAR 0 8
24662: STR
24663: PUSH
24664: LD_STRING ;
24666: STR
24667: ST_TO_ADDR
// end ;
24668: GO 24633
24670: POP
24671: POP
// for i = 1 to hardcoreCounter do
24672: LD_ADDR_VAR 0 8
24676: PUSH
24677: DOUBLE
24678: LD_INT 1
24680: DEC
24681: ST_TO_ADDR
24682: LD_EXP 46
24686: PUSH
24687: FOR_TO
24688: IFFALSE 24734
// begin if flags [ normalCounter + i ] then
24690: LD_VAR 0 4
24694: PUSH
24695: LD_EXP 45
24699: PUSH
24700: LD_VAR 0 8
24704: PLUS
24705: ARRAY
24706: IFFALSE 24732
// tmp := tmp & ( 100 + i ) & ; ;
24708: LD_ADDR_VAR 0 3
24712: PUSH
24713: LD_VAR 0 3
24717: PUSH
24718: LD_INT 100
24720: PUSH
24721: LD_VAR 0 8
24725: PLUS
24726: STR
24727: PUSH
24728: LD_STRING ;
24730: STR
24731: ST_TO_ADDR
// end ;
24732: GO 24687
24734: POP
24735: POP
// if tmp then
24736: LD_VAR 0 3
24740: IFFALSE 24752
// active := tmp ;
24742: LD_ADDR_VAR 0 7
24746: PUSH
24747: LD_VAR 0 3
24751: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24752: LD_STRING getStreamItemsFromMission("
24754: PUSH
24755: LD_VAR 0 5
24759: STR
24760: PUSH
24761: LD_STRING ","
24763: STR
24764: PUSH
24765: LD_VAR 0 6
24769: STR
24770: PUSH
24771: LD_STRING ","
24773: STR
24774: PUSH
24775: LD_VAR 0 7
24779: STR
24780: PUSH
24781: LD_STRING ")
24783: STR
24784: PPUSH
24785: CALL_OW 559
// end else
24789: GO 24798
// ToLua ( getStreamItemsFromMission("","","") ) ;
24791: LD_STRING getStreamItemsFromMission("","","")
24793: PPUSH
24794: CALL_OW 559
// end ;
24798: LD_VAR 0 2
24802: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24803: LD_EXP 44
24807: PUSH
24808: LD_EXP 49
24812: AND
24813: IFFALSE 24937
24815: GO 24817
24817: DISABLE
24818: LD_INT 0
24820: PPUSH
24821: PPUSH
// begin enable ;
24822: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24823: LD_ADDR_VAR 0 2
24827: PUSH
24828: LD_INT 22
24830: PUSH
24831: LD_OWVAR 2
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: LD_INT 34
24845: PUSH
24846: LD_INT 7
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 34
24855: PUSH
24856: LD_INT 45
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 34
24865: PUSH
24866: LD_INT 28
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 34
24875: PUSH
24876: LD_INT 47
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PPUSH
24894: CALL_OW 69
24898: ST_TO_ADDR
// if not tmp then
24899: LD_VAR 0 2
24903: NOT
24904: IFFALSE 24908
// exit ;
24906: GO 24937
// for i in tmp do
24908: LD_ADDR_VAR 0 1
24912: PUSH
24913: LD_VAR 0 2
24917: PUSH
24918: FOR_IN
24919: IFFALSE 24935
// begin SetLives ( i , 0 ) ;
24921: LD_VAR 0 1
24925: PPUSH
24926: LD_INT 0
24928: PPUSH
24929: CALL_OW 234
// end ;
24933: GO 24918
24935: POP
24936: POP
// end ;
24937: PPOPN 2
24939: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24940: LD_EXP 44
24944: PUSH
24945: LD_EXP 50
24949: AND
24950: IFFALSE 25034
24952: GO 24954
24954: DISABLE
24955: LD_INT 0
24957: PPUSH
24958: PPUSH
// begin enable ;
24959: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24960: LD_ADDR_VAR 0 2
24964: PUSH
24965: LD_INT 22
24967: PUSH
24968: LD_OWVAR 2
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 32
24979: PUSH
24980: LD_INT 3
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PPUSH
24991: CALL_OW 69
24995: ST_TO_ADDR
// if not tmp then
24996: LD_VAR 0 2
25000: NOT
25001: IFFALSE 25005
// exit ;
25003: GO 25034
// for i in tmp do
25005: LD_ADDR_VAR 0 1
25009: PUSH
25010: LD_VAR 0 2
25014: PUSH
25015: FOR_IN
25016: IFFALSE 25032
// begin SetLives ( i , 0 ) ;
25018: LD_VAR 0 1
25022: PPUSH
25023: LD_INT 0
25025: PPUSH
25026: CALL_OW 234
// end ;
25030: GO 25015
25032: POP
25033: POP
// end ;
25034: PPOPN 2
25036: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25037: LD_EXP 44
25041: PUSH
25042: LD_EXP 47
25046: AND
25047: IFFALSE 25140
25049: GO 25051
25051: DISABLE
25052: LD_INT 0
25054: PPUSH
// begin enable ;
25055: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25056: LD_ADDR_VAR 0 1
25060: PUSH
25061: LD_INT 22
25063: PUSH
25064: LD_OWVAR 2
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 25
25078: PUSH
25079: LD_INT 5
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 25
25088: PUSH
25089: LD_INT 9
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 25
25098: PUSH
25099: LD_INT 8
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PPUSH
25116: CALL_OW 69
25120: PUSH
25121: FOR_IN
25122: IFFALSE 25138
// begin SetClass ( i , 1 ) ;
25124: LD_VAR 0 1
25128: PPUSH
25129: LD_INT 1
25131: PPUSH
25132: CALL_OW 336
// end ;
25136: GO 25121
25138: POP
25139: POP
// end ;
25140: PPOPN 1
25142: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25143: LD_EXP 44
25147: PUSH
25148: LD_EXP 48
25152: AND
25153: PUSH
25154: LD_OWVAR 65
25158: PUSH
25159: LD_INT 7
25161: LESS
25162: AND
25163: IFFALSE 25177
25165: GO 25167
25167: DISABLE
// begin enable ;
25168: ENABLE
// game_speed := 7 ;
25169: LD_ADDR_OWVAR 65
25173: PUSH
25174: LD_INT 7
25176: ST_TO_ADDR
// end ;
25177: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25178: LD_EXP 44
25182: PUSH
25183: LD_EXP 51
25187: AND
25188: IFFALSE 25390
25190: GO 25192
25192: DISABLE
25193: LD_INT 0
25195: PPUSH
25196: PPUSH
25197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25198: LD_ADDR_VAR 0 3
25202: PUSH
25203: LD_INT 81
25205: PUSH
25206: LD_OWVAR 2
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 21
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PPUSH
25229: CALL_OW 69
25233: ST_TO_ADDR
// if not tmp then
25234: LD_VAR 0 3
25238: NOT
25239: IFFALSE 25243
// exit ;
25241: GO 25390
// if tmp > 5 then
25243: LD_VAR 0 3
25247: PUSH
25248: LD_INT 5
25250: GREATER
25251: IFFALSE 25263
// k := 5 else
25253: LD_ADDR_VAR 0 2
25257: PUSH
25258: LD_INT 5
25260: ST_TO_ADDR
25261: GO 25273
// k := tmp ;
25263: LD_ADDR_VAR 0 2
25267: PUSH
25268: LD_VAR 0 3
25272: ST_TO_ADDR
// for i := 1 to k do
25273: LD_ADDR_VAR 0 1
25277: PUSH
25278: DOUBLE
25279: LD_INT 1
25281: DEC
25282: ST_TO_ADDR
25283: LD_VAR 0 2
25287: PUSH
25288: FOR_TO
25289: IFFALSE 25388
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25291: LD_VAR 0 3
25295: PUSH
25296: LD_VAR 0 1
25300: ARRAY
25301: PPUSH
25302: LD_VAR 0 1
25306: PUSH
25307: LD_INT 4
25309: MOD
25310: PUSH
25311: LD_INT 1
25313: PLUS
25314: PPUSH
25315: CALL_OW 259
25319: PUSH
25320: LD_INT 10
25322: LESS
25323: IFFALSE 25386
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25325: LD_VAR 0 3
25329: PUSH
25330: LD_VAR 0 1
25334: ARRAY
25335: PPUSH
25336: LD_VAR 0 1
25340: PUSH
25341: LD_INT 4
25343: MOD
25344: PUSH
25345: LD_INT 1
25347: PLUS
25348: PPUSH
25349: LD_VAR 0 3
25353: PUSH
25354: LD_VAR 0 1
25358: ARRAY
25359: PPUSH
25360: LD_VAR 0 1
25364: PUSH
25365: LD_INT 4
25367: MOD
25368: PUSH
25369: LD_INT 1
25371: PLUS
25372: PPUSH
25373: CALL_OW 259
25377: PUSH
25378: LD_INT 1
25380: PLUS
25381: PPUSH
25382: CALL_OW 237
25386: GO 25288
25388: POP
25389: POP
// end ;
25390: PPOPN 3
25392: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25393: LD_EXP 44
25397: PUSH
25398: LD_EXP 52
25402: AND
25403: IFFALSE 25423
25405: GO 25407
25407: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25408: LD_INT 4
25410: PPUSH
25411: LD_OWVAR 2
25415: PPUSH
25416: LD_INT 0
25418: PPUSH
25419: CALL_OW 324
25423: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25424: LD_EXP 44
25428: PUSH
25429: LD_EXP 81
25433: AND
25434: IFFALSE 25454
25436: GO 25438
25438: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25439: LD_INT 19
25441: PPUSH
25442: LD_OWVAR 2
25446: PPUSH
25447: LD_INT 0
25449: PPUSH
25450: CALL_OW 324
25454: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25455: LD_EXP 44
25459: PUSH
25460: LD_EXP 53
25464: AND
25465: IFFALSE 25567
25467: GO 25469
25469: DISABLE
25470: LD_INT 0
25472: PPUSH
25473: PPUSH
// begin enable ;
25474: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25475: LD_ADDR_VAR 0 2
25479: PUSH
25480: LD_INT 22
25482: PUSH
25483: LD_OWVAR 2
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: LD_INT 34
25497: PUSH
25498: LD_INT 11
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 34
25507: PUSH
25508: LD_INT 30
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PPUSH
25524: CALL_OW 69
25528: ST_TO_ADDR
// if not tmp then
25529: LD_VAR 0 2
25533: NOT
25534: IFFALSE 25538
// exit ;
25536: GO 25567
// for i in tmp do
25538: LD_ADDR_VAR 0 1
25542: PUSH
25543: LD_VAR 0 2
25547: PUSH
25548: FOR_IN
25549: IFFALSE 25565
// begin SetLives ( i , 0 ) ;
25551: LD_VAR 0 1
25555: PPUSH
25556: LD_INT 0
25558: PPUSH
25559: CALL_OW 234
// end ;
25563: GO 25548
25565: POP
25566: POP
// end ;
25567: PPOPN 2
25569: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25570: LD_EXP 44
25574: PUSH
25575: LD_EXP 54
25579: AND
25580: IFFALSE 25600
25582: GO 25584
25584: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25585: LD_INT 32
25587: PPUSH
25588: LD_OWVAR 2
25592: PPUSH
25593: LD_INT 0
25595: PPUSH
25596: CALL_OW 324
25600: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25601: LD_EXP 44
25605: PUSH
25606: LD_EXP 55
25610: AND
25611: IFFALSE 25792
25613: GO 25615
25615: DISABLE
25616: LD_INT 0
25618: PPUSH
25619: PPUSH
25620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25621: LD_ADDR_VAR 0 2
25625: PUSH
25626: LD_INT 22
25628: PUSH
25629: LD_OWVAR 2
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 33
25640: PUSH
25641: LD_INT 3
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PPUSH
25652: CALL_OW 69
25656: ST_TO_ADDR
// if not tmp then
25657: LD_VAR 0 2
25661: NOT
25662: IFFALSE 25666
// exit ;
25664: GO 25792
// side := 0 ;
25666: LD_ADDR_VAR 0 3
25670: PUSH
25671: LD_INT 0
25673: ST_TO_ADDR
// for i := 1 to 8 do
25674: LD_ADDR_VAR 0 1
25678: PUSH
25679: DOUBLE
25680: LD_INT 1
25682: DEC
25683: ST_TO_ADDR
25684: LD_INT 8
25686: PUSH
25687: FOR_TO
25688: IFFALSE 25736
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25690: LD_OWVAR 2
25694: PUSH
25695: LD_VAR 0 1
25699: NONEQUAL
25700: PUSH
25701: LD_OWVAR 2
25705: PPUSH
25706: LD_VAR 0 1
25710: PPUSH
25711: CALL_OW 81
25715: PUSH
25716: LD_INT 2
25718: EQUAL
25719: AND
25720: IFFALSE 25734
// begin side := i ;
25722: LD_ADDR_VAR 0 3
25726: PUSH
25727: LD_VAR 0 1
25731: ST_TO_ADDR
// break ;
25732: GO 25736
// end ;
25734: GO 25687
25736: POP
25737: POP
// if not side then
25738: LD_VAR 0 3
25742: NOT
25743: IFFALSE 25747
// exit ;
25745: GO 25792
// for i := 1 to tmp do
25747: LD_ADDR_VAR 0 1
25751: PUSH
25752: DOUBLE
25753: LD_INT 1
25755: DEC
25756: ST_TO_ADDR
25757: LD_VAR 0 2
25761: PUSH
25762: FOR_TO
25763: IFFALSE 25790
// if Prob ( 60 ) then
25765: LD_INT 60
25767: PPUSH
25768: CALL_OW 13
25772: IFFALSE 25788
// SetSide ( i , side ) ;
25774: LD_VAR 0 1
25778: PPUSH
25779: LD_VAR 0 3
25783: PPUSH
25784: CALL_OW 235
25788: GO 25762
25790: POP
25791: POP
// end ;
25792: PPOPN 3
25794: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25795: LD_EXP 44
25799: PUSH
25800: LD_EXP 57
25804: AND
25805: IFFALSE 25924
25807: GO 25809
25809: DISABLE
25810: LD_INT 0
25812: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25813: LD_ADDR_VAR 0 1
25817: PUSH
25818: LD_INT 22
25820: PUSH
25821: LD_OWVAR 2
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 21
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 3
25842: PUSH
25843: LD_INT 23
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: PPUSH
25862: CALL_OW 69
25866: PUSH
25867: FOR_IN
25868: IFFALSE 25922
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25870: LD_VAR 0 1
25874: PPUSH
25875: CALL_OW 257
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: LD_INT 3
25888: PUSH
25889: LD_INT 4
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: IN
25898: IFFALSE 25920
// SetClass ( un , rand ( 1 , 4 ) ) ;
25900: LD_VAR 0 1
25904: PPUSH
25905: LD_INT 1
25907: PPUSH
25908: LD_INT 4
25910: PPUSH
25911: CALL_OW 12
25915: PPUSH
25916: CALL_OW 336
25920: GO 25867
25922: POP
25923: POP
// end ;
25924: PPOPN 1
25926: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25927: LD_EXP 44
25931: PUSH
25932: LD_EXP 56
25936: AND
25937: IFFALSE 26016
25939: GO 25941
25941: DISABLE
25942: LD_INT 0
25944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25945: LD_ADDR_VAR 0 1
25949: PUSH
25950: LD_INT 22
25952: PUSH
25953: LD_OWVAR 2
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 21
25964: PUSH
25965: LD_INT 3
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PPUSH
25976: CALL_OW 69
25980: ST_TO_ADDR
// if not tmp then
25981: LD_VAR 0 1
25985: NOT
25986: IFFALSE 25990
// exit ;
25988: GO 26016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25990: LD_VAR 0 1
25994: PUSH
25995: LD_INT 1
25997: PPUSH
25998: LD_VAR 0 1
26002: PPUSH
26003: CALL_OW 12
26007: ARRAY
26008: PPUSH
26009: LD_INT 100
26011: PPUSH
26012: CALL_OW 234
// end ;
26016: PPOPN 1
26018: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26019: LD_EXP 44
26023: PUSH
26024: LD_EXP 58
26028: AND
26029: IFFALSE 26127
26031: GO 26033
26033: DISABLE
26034: LD_INT 0
26036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26037: LD_ADDR_VAR 0 1
26041: PUSH
26042: LD_INT 22
26044: PUSH
26045: LD_OWVAR 2
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 21
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PPUSH
26068: CALL_OW 69
26072: ST_TO_ADDR
// if not tmp then
26073: LD_VAR 0 1
26077: NOT
26078: IFFALSE 26082
// exit ;
26080: GO 26127
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26082: LD_VAR 0 1
26086: PUSH
26087: LD_INT 1
26089: PPUSH
26090: LD_VAR 0 1
26094: PPUSH
26095: CALL_OW 12
26099: ARRAY
26100: PPUSH
26101: LD_INT 1
26103: PPUSH
26104: LD_INT 4
26106: PPUSH
26107: CALL_OW 12
26111: PPUSH
26112: LD_INT 3000
26114: PPUSH
26115: LD_INT 9000
26117: PPUSH
26118: CALL_OW 12
26122: PPUSH
26123: CALL_OW 492
// end ;
26127: PPOPN 1
26129: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26130: LD_EXP 44
26134: PUSH
26135: LD_EXP 59
26139: AND
26140: IFFALSE 26160
26142: GO 26144
26144: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26145: LD_INT 1
26147: PPUSH
26148: LD_OWVAR 2
26152: PPUSH
26153: LD_INT 0
26155: PPUSH
26156: CALL_OW 324
26160: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26161: LD_EXP 44
26165: PUSH
26166: LD_EXP 60
26170: AND
26171: IFFALSE 26254
26173: GO 26175
26175: DISABLE
26176: LD_INT 0
26178: PPUSH
26179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26180: LD_ADDR_VAR 0 2
26184: PUSH
26185: LD_INT 22
26187: PUSH
26188: LD_OWVAR 2
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 21
26199: PUSH
26200: LD_INT 3
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PPUSH
26211: CALL_OW 69
26215: ST_TO_ADDR
// if not tmp then
26216: LD_VAR 0 2
26220: NOT
26221: IFFALSE 26225
// exit ;
26223: GO 26254
// for i in tmp do
26225: LD_ADDR_VAR 0 1
26229: PUSH
26230: LD_VAR 0 2
26234: PUSH
26235: FOR_IN
26236: IFFALSE 26252
// SetBLevel ( i , 10 ) ;
26238: LD_VAR 0 1
26242: PPUSH
26243: LD_INT 10
26245: PPUSH
26246: CALL_OW 241
26250: GO 26235
26252: POP
26253: POP
// end ;
26254: PPOPN 2
26256: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26257: LD_EXP 44
26261: PUSH
26262: LD_EXP 61
26266: AND
26267: IFFALSE 26378
26269: GO 26271
26271: DISABLE
26272: LD_INT 0
26274: PPUSH
26275: PPUSH
26276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26277: LD_ADDR_VAR 0 3
26281: PUSH
26282: LD_INT 22
26284: PUSH
26285: LD_OWVAR 2
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 25
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PPUSH
26308: CALL_OW 69
26312: ST_TO_ADDR
// if not tmp then
26313: LD_VAR 0 3
26317: NOT
26318: IFFALSE 26322
// exit ;
26320: GO 26378
// un := tmp [ rand ( 1 , tmp ) ] ;
26322: LD_ADDR_VAR 0 2
26326: PUSH
26327: LD_VAR 0 3
26331: PUSH
26332: LD_INT 1
26334: PPUSH
26335: LD_VAR 0 3
26339: PPUSH
26340: CALL_OW 12
26344: ARRAY
26345: ST_TO_ADDR
// if Crawls ( un ) then
26346: LD_VAR 0 2
26350: PPUSH
26351: CALL_OW 318
26355: IFFALSE 26366
// ComWalk ( un ) ;
26357: LD_VAR 0 2
26361: PPUSH
26362: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26366: LD_VAR 0 2
26370: PPUSH
26371: LD_INT 5
26373: PPUSH
26374: CALL_OW 336
// end ;
26378: PPOPN 3
26380: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26381: LD_EXP 44
26385: PUSH
26386: LD_EXP 62
26390: AND
26391: PUSH
26392: LD_OWVAR 67
26396: PUSH
26397: LD_INT 4
26399: LESS
26400: AND
26401: IFFALSE 26420
26403: GO 26405
26405: DISABLE
// begin Difficulty := Difficulty + 1 ;
26406: LD_ADDR_OWVAR 67
26410: PUSH
26411: LD_OWVAR 67
26415: PUSH
26416: LD_INT 1
26418: PLUS
26419: ST_TO_ADDR
// end ;
26420: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26421: LD_EXP 44
26425: PUSH
26426: LD_EXP 63
26430: AND
26431: IFFALSE 26534
26433: GO 26435
26435: DISABLE
26436: LD_INT 0
26438: PPUSH
// begin for i := 1 to 5 do
26439: LD_ADDR_VAR 0 1
26443: PUSH
26444: DOUBLE
26445: LD_INT 1
26447: DEC
26448: ST_TO_ADDR
26449: LD_INT 5
26451: PUSH
26452: FOR_TO
26453: IFFALSE 26532
// begin uc_nation := nation_nature ;
26455: LD_ADDR_OWVAR 21
26459: PUSH
26460: LD_INT 0
26462: ST_TO_ADDR
// uc_side := 0 ;
26463: LD_ADDR_OWVAR 20
26467: PUSH
26468: LD_INT 0
26470: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26471: LD_ADDR_OWVAR 29
26475: PUSH
26476: LD_INT 12
26478: PUSH
26479: LD_INT 12
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: ST_TO_ADDR
// hc_agressivity := 20 ;
26486: LD_ADDR_OWVAR 35
26490: PUSH
26491: LD_INT 20
26493: ST_TO_ADDR
// hc_class := class_tiger ;
26494: LD_ADDR_OWVAR 28
26498: PUSH
26499: LD_INT 14
26501: ST_TO_ADDR
// hc_gallery :=  ;
26502: LD_ADDR_OWVAR 33
26506: PUSH
26507: LD_STRING 
26509: ST_TO_ADDR
// hc_name :=  ;
26510: LD_ADDR_OWVAR 26
26514: PUSH
26515: LD_STRING 
26517: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26518: CALL_OW 44
26522: PPUSH
26523: LD_INT 0
26525: PPUSH
26526: CALL_OW 51
// end ;
26530: GO 26452
26532: POP
26533: POP
// end ;
26534: PPOPN 1
26536: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26537: LD_EXP 44
26541: PUSH
26542: LD_EXP 64
26546: AND
26547: IFFALSE 26556
26549: GO 26551
26551: DISABLE
// StreamSibBomb ;
26552: CALL 26557 0 0
26556: END
// export function StreamSibBomb ; var i , x , y ; begin
26557: LD_INT 0
26559: PPUSH
26560: PPUSH
26561: PPUSH
26562: PPUSH
// result := false ;
26563: LD_ADDR_VAR 0 1
26567: PUSH
26568: LD_INT 0
26570: ST_TO_ADDR
// for i := 1 to 16 do
26571: LD_ADDR_VAR 0 2
26575: PUSH
26576: DOUBLE
26577: LD_INT 1
26579: DEC
26580: ST_TO_ADDR
26581: LD_INT 16
26583: PUSH
26584: FOR_TO
26585: IFFALSE 26784
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26587: LD_ADDR_VAR 0 3
26591: PUSH
26592: LD_INT 10
26594: PUSH
26595: LD_INT 20
26597: PUSH
26598: LD_INT 30
26600: PUSH
26601: LD_INT 40
26603: PUSH
26604: LD_INT 50
26606: PUSH
26607: LD_INT 60
26609: PUSH
26610: LD_INT 70
26612: PUSH
26613: LD_INT 80
26615: PUSH
26616: LD_INT 90
26618: PUSH
26619: LD_INT 100
26621: PUSH
26622: LD_INT 110
26624: PUSH
26625: LD_INT 120
26627: PUSH
26628: LD_INT 130
26630: PUSH
26631: LD_INT 140
26633: PUSH
26634: LD_INT 150
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PPUSH
26657: LD_INT 15
26659: PPUSH
26660: CALL_OW 12
26664: ARRAY
26665: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26666: LD_ADDR_VAR 0 4
26670: PUSH
26671: LD_INT 10
26673: PUSH
26674: LD_INT 20
26676: PUSH
26677: LD_INT 30
26679: PUSH
26680: LD_INT 40
26682: PUSH
26683: LD_INT 50
26685: PUSH
26686: LD_INT 60
26688: PUSH
26689: LD_INT 70
26691: PUSH
26692: LD_INT 80
26694: PUSH
26695: LD_INT 90
26697: PUSH
26698: LD_INT 100
26700: PUSH
26701: LD_INT 110
26703: PUSH
26704: LD_INT 120
26706: PUSH
26707: LD_INT 130
26709: PUSH
26710: LD_INT 140
26712: PUSH
26713: LD_INT 150
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: PPUSH
26736: LD_INT 15
26738: PPUSH
26739: CALL_OW 12
26743: ARRAY
26744: ST_TO_ADDR
// if ValidHex ( x , y ) then
26745: LD_VAR 0 3
26749: PPUSH
26750: LD_VAR 0 4
26754: PPUSH
26755: CALL_OW 488
26759: IFFALSE 26782
// begin result := [ x , y ] ;
26761: LD_ADDR_VAR 0 1
26765: PUSH
26766: LD_VAR 0 3
26770: PUSH
26771: LD_VAR 0 4
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: ST_TO_ADDR
// break ;
26780: GO 26784
// end ; end ;
26782: GO 26584
26784: POP
26785: POP
// if result then
26786: LD_VAR 0 1
26790: IFFALSE 26850
// begin ToLua ( playSibBomb() ) ;
26792: LD_STRING playSibBomb()
26794: PPUSH
26795: CALL_OW 559
// wait ( 0 0$14 ) ;
26799: LD_INT 490
26801: PPUSH
26802: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26806: LD_VAR 0 1
26810: PUSH
26811: LD_INT 1
26813: ARRAY
26814: PPUSH
26815: LD_VAR 0 1
26819: PUSH
26820: LD_INT 2
26822: ARRAY
26823: PPUSH
26824: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26828: LD_VAR 0 1
26832: PUSH
26833: LD_INT 1
26835: ARRAY
26836: PPUSH
26837: LD_VAR 0 1
26841: PUSH
26842: LD_INT 2
26844: ARRAY
26845: PPUSH
26846: CALL_OW 429
// end ; end ;
26850: LD_VAR 0 1
26854: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26855: LD_EXP 44
26859: PUSH
26860: LD_EXP 66
26864: AND
26865: IFFALSE 26877
26867: GO 26869
26869: DISABLE
// YouLost (  ) ;
26870: LD_STRING 
26872: PPUSH
26873: CALL_OW 104
26877: END
// every 0 0$1 trigger StreamModeActive and sFog do
26878: LD_EXP 44
26882: PUSH
26883: LD_EXP 65
26887: AND
26888: IFFALSE 26902
26890: GO 26892
26892: DISABLE
// FogOff ( your_side ) ;
26893: LD_OWVAR 2
26897: PPUSH
26898: CALL_OW 344
26902: END
// every 0 0$1 trigger StreamModeActive and sSun do
26903: LD_EXP 44
26907: PUSH
26908: LD_EXP 67
26912: AND
26913: IFFALSE 26941
26915: GO 26917
26917: DISABLE
// begin solar_recharge_percent := 0 ;
26918: LD_ADDR_OWVAR 79
26922: PUSH
26923: LD_INT 0
26925: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26926: LD_INT 10500
26928: PPUSH
26929: CALL_OW 67
// solar_recharge_percent := 100 ;
26933: LD_ADDR_OWVAR 79
26937: PUSH
26938: LD_INT 100
26940: ST_TO_ADDR
// end ;
26941: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26942: LD_EXP 44
26946: PUSH
26947: LD_EXP 68
26951: AND
26952: IFFALSE 27191
26954: GO 26956
26956: DISABLE
26957: LD_INT 0
26959: PPUSH
26960: PPUSH
26961: PPUSH
// begin tmp := [ ] ;
26962: LD_ADDR_VAR 0 3
26966: PUSH
26967: EMPTY
26968: ST_TO_ADDR
// for i := 1 to 6 do
26969: LD_ADDR_VAR 0 1
26973: PUSH
26974: DOUBLE
26975: LD_INT 1
26977: DEC
26978: ST_TO_ADDR
26979: LD_INT 6
26981: PUSH
26982: FOR_TO
26983: IFFALSE 27088
// begin uc_nation := nation_nature ;
26985: LD_ADDR_OWVAR 21
26989: PUSH
26990: LD_INT 0
26992: ST_TO_ADDR
// uc_side := 0 ;
26993: LD_ADDR_OWVAR 20
26997: PUSH
26998: LD_INT 0
27000: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27001: LD_ADDR_OWVAR 29
27005: PUSH
27006: LD_INT 12
27008: PUSH
27009: LD_INT 12
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: ST_TO_ADDR
// hc_agressivity := 20 ;
27016: LD_ADDR_OWVAR 35
27020: PUSH
27021: LD_INT 20
27023: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27024: LD_ADDR_OWVAR 28
27028: PUSH
27029: LD_INT 17
27031: ST_TO_ADDR
// hc_gallery :=  ;
27032: LD_ADDR_OWVAR 33
27036: PUSH
27037: LD_STRING 
27039: ST_TO_ADDR
// hc_name :=  ;
27040: LD_ADDR_OWVAR 26
27044: PUSH
27045: LD_STRING 
27047: ST_TO_ADDR
// un := CreateHuman ;
27048: LD_ADDR_VAR 0 2
27052: PUSH
27053: CALL_OW 44
27057: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27058: LD_VAR 0 2
27062: PPUSH
27063: LD_INT 1
27065: PPUSH
27066: CALL_OW 51
// tmp := tmp ^ un ;
27070: LD_ADDR_VAR 0 3
27074: PUSH
27075: LD_VAR 0 3
27079: PUSH
27080: LD_VAR 0 2
27084: ADD
27085: ST_TO_ADDR
// end ;
27086: GO 26982
27088: POP
27089: POP
// repeat wait ( 0 0$1 ) ;
27090: LD_INT 35
27092: PPUSH
27093: CALL_OW 67
// for un in tmp do
27097: LD_ADDR_VAR 0 2
27101: PUSH
27102: LD_VAR 0 3
27106: PUSH
27107: FOR_IN
27108: IFFALSE 27182
// begin if IsDead ( un ) then
27110: LD_VAR 0 2
27114: PPUSH
27115: CALL_OW 301
27119: IFFALSE 27139
// begin tmp := tmp diff un ;
27121: LD_ADDR_VAR 0 3
27125: PUSH
27126: LD_VAR 0 3
27130: PUSH
27131: LD_VAR 0 2
27135: DIFF
27136: ST_TO_ADDR
// continue ;
27137: GO 27107
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27139: LD_VAR 0 2
27143: PPUSH
27144: LD_INT 3
27146: PUSH
27147: LD_INT 22
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PPUSH
27161: CALL_OW 69
27165: PPUSH
27166: LD_VAR 0 2
27170: PPUSH
27171: CALL_OW 74
27175: PPUSH
27176: CALL_OW 115
// end ;
27180: GO 27107
27182: POP
27183: POP
// until not tmp ;
27184: LD_VAR 0 3
27188: NOT
27189: IFFALSE 27090
// end ;
27191: PPOPN 3
27193: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27194: LD_EXP 44
27198: PUSH
27199: LD_EXP 69
27203: AND
27204: IFFALSE 27258
27206: GO 27208
27208: DISABLE
// begin ToLua ( displayTroll(); ) ;
27209: LD_STRING displayTroll();
27211: PPUSH
27212: CALL_OW 559
// wait ( 3 3$00 ) ;
27216: LD_INT 6300
27218: PPUSH
27219: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27223: LD_STRING hideTroll();
27225: PPUSH
27226: CALL_OW 559
// wait ( 1 1$00 ) ;
27230: LD_INT 2100
27232: PPUSH
27233: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27237: LD_STRING displayTroll();
27239: PPUSH
27240: CALL_OW 559
// wait ( 1 1$00 ) ;
27244: LD_INT 2100
27246: PPUSH
27247: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27251: LD_STRING hideTroll();
27253: PPUSH
27254: CALL_OW 559
// end ;
27258: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27259: LD_EXP 44
27263: PUSH
27264: LD_EXP 70
27268: AND
27269: IFFALSE 27332
27271: GO 27273
27273: DISABLE
27274: LD_INT 0
27276: PPUSH
// begin p := 0 ;
27277: LD_ADDR_VAR 0 1
27281: PUSH
27282: LD_INT 0
27284: ST_TO_ADDR
// repeat game_speed := 1 ;
27285: LD_ADDR_OWVAR 65
27289: PUSH
27290: LD_INT 1
27292: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27293: LD_INT 35
27295: PPUSH
27296: CALL_OW 67
// p := p + 1 ;
27300: LD_ADDR_VAR 0 1
27304: PUSH
27305: LD_VAR 0 1
27309: PUSH
27310: LD_INT 1
27312: PLUS
27313: ST_TO_ADDR
// until p >= 60 ;
27314: LD_VAR 0 1
27318: PUSH
27319: LD_INT 60
27321: GREATEREQUAL
27322: IFFALSE 27285
// game_speed := 4 ;
27324: LD_ADDR_OWVAR 65
27328: PUSH
27329: LD_INT 4
27331: ST_TO_ADDR
// end ;
27332: PPOPN 1
27334: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27335: LD_EXP 44
27339: PUSH
27340: LD_EXP 71
27344: AND
27345: IFFALSE 27491
27347: GO 27349
27349: DISABLE
27350: LD_INT 0
27352: PPUSH
27353: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27354: LD_ADDR_VAR 0 1
27358: PUSH
27359: LD_INT 22
27361: PUSH
27362: LD_OWVAR 2
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 2
27373: PUSH
27374: LD_INT 30
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 30
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: LIST
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PPUSH
27403: CALL_OW 69
27407: ST_TO_ADDR
// if not depot then
27408: LD_VAR 0 1
27412: NOT
27413: IFFALSE 27417
// exit ;
27415: GO 27491
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27417: LD_ADDR_VAR 0 2
27421: PUSH
27422: LD_VAR 0 1
27426: PUSH
27427: LD_INT 1
27429: PPUSH
27430: LD_VAR 0 1
27434: PPUSH
27435: CALL_OW 12
27439: ARRAY
27440: PPUSH
27441: CALL_OW 274
27445: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27446: LD_VAR 0 2
27450: PPUSH
27451: LD_INT 1
27453: PPUSH
27454: LD_INT 0
27456: PPUSH
27457: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27461: LD_VAR 0 2
27465: PPUSH
27466: LD_INT 2
27468: PPUSH
27469: LD_INT 0
27471: PPUSH
27472: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27476: LD_VAR 0 2
27480: PPUSH
27481: LD_INT 3
27483: PPUSH
27484: LD_INT 0
27486: PPUSH
27487: CALL_OW 277
// end ;
27491: PPOPN 2
27493: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27494: LD_EXP 44
27498: PUSH
27499: LD_EXP 72
27503: AND
27504: IFFALSE 27601
27506: GO 27508
27508: DISABLE
27509: LD_INT 0
27511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27512: LD_ADDR_VAR 0 1
27516: PUSH
27517: LD_INT 22
27519: PUSH
27520: LD_OWVAR 2
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 21
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 3
27541: PUSH
27542: LD_INT 23
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: PPUSH
27561: CALL_OW 69
27565: ST_TO_ADDR
// if not tmp then
27566: LD_VAR 0 1
27570: NOT
27571: IFFALSE 27575
// exit ;
27573: GO 27601
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27575: LD_VAR 0 1
27579: PUSH
27580: LD_INT 1
27582: PPUSH
27583: LD_VAR 0 1
27587: PPUSH
27588: CALL_OW 12
27592: ARRAY
27593: PPUSH
27594: LD_INT 200
27596: PPUSH
27597: CALL_OW 234
// end ;
27601: PPOPN 1
27603: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27604: LD_EXP 44
27608: PUSH
27609: LD_EXP 73
27613: AND
27614: IFFALSE 27693
27616: GO 27618
27618: DISABLE
27619: LD_INT 0
27621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27622: LD_ADDR_VAR 0 1
27626: PUSH
27627: LD_INT 22
27629: PUSH
27630: LD_OWVAR 2
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 21
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PPUSH
27653: CALL_OW 69
27657: ST_TO_ADDR
// if not tmp then
27658: LD_VAR 0 1
27662: NOT
27663: IFFALSE 27667
// exit ;
27665: GO 27693
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27667: LD_VAR 0 1
27671: PUSH
27672: LD_INT 1
27674: PPUSH
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 12
27684: ARRAY
27685: PPUSH
27686: LD_INT 60
27688: PPUSH
27689: CALL_OW 234
// end ;
27693: PPOPN 1
27695: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27696: LD_EXP 44
27700: PUSH
27701: LD_EXP 74
27705: AND
27706: IFFALSE 27805
27708: GO 27710
27710: DISABLE
27711: LD_INT 0
27713: PPUSH
27714: PPUSH
// begin enable ;
27715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27716: LD_ADDR_VAR 0 1
27720: PUSH
27721: LD_INT 22
27723: PUSH
27724: LD_OWVAR 2
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 61
27735: PUSH
27736: EMPTY
27737: LIST
27738: PUSH
27739: LD_INT 33
27741: PUSH
27742: LD_INT 2
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: LIST
27753: PPUSH
27754: CALL_OW 69
27758: ST_TO_ADDR
// if not tmp then
27759: LD_VAR 0 1
27763: NOT
27764: IFFALSE 27768
// exit ;
27766: GO 27805
// for i in tmp do
27768: LD_ADDR_VAR 0 2
27772: PUSH
27773: LD_VAR 0 1
27777: PUSH
27778: FOR_IN
27779: IFFALSE 27803
// if IsControledBy ( i ) then
27781: LD_VAR 0 2
27785: PPUSH
27786: CALL_OW 312
27790: IFFALSE 27801
// ComUnlink ( i ) ;
27792: LD_VAR 0 2
27796: PPUSH
27797: CALL_OW 136
27801: GO 27778
27803: POP
27804: POP
// end ;
27805: PPOPN 2
27807: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27808: LD_EXP 44
27812: PUSH
27813: LD_EXP 75
27817: AND
27818: IFFALSE 27958
27820: GO 27822
27822: DISABLE
27823: LD_INT 0
27825: PPUSH
27826: PPUSH
// begin ToLua ( displayPowell(); ) ;
27827: LD_STRING displayPowell();
27829: PPUSH
27830: CALL_OW 559
// uc_side := 0 ;
27834: LD_ADDR_OWVAR 20
27838: PUSH
27839: LD_INT 0
27841: ST_TO_ADDR
// uc_nation := 2 ;
27842: LD_ADDR_OWVAR 21
27846: PUSH
27847: LD_INT 2
27849: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27850: LD_ADDR_OWVAR 37
27854: PUSH
27855: LD_INT 14
27857: ST_TO_ADDR
// vc_engine := engine_siberite ;
27858: LD_ADDR_OWVAR 39
27862: PUSH
27863: LD_INT 3
27865: ST_TO_ADDR
// vc_control := control_apeman ;
27866: LD_ADDR_OWVAR 38
27870: PUSH
27871: LD_INT 5
27873: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27874: LD_ADDR_OWVAR 40
27878: PUSH
27879: LD_INT 29
27881: ST_TO_ADDR
// un := CreateVehicle ;
27882: LD_ADDR_VAR 0 2
27886: PUSH
27887: CALL_OW 45
27891: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27892: LD_VAR 0 2
27896: PPUSH
27897: LD_INT 1
27899: PPUSH
27900: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27904: LD_INT 35
27906: PPUSH
27907: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27911: LD_VAR 0 2
27915: PPUSH
27916: LD_INT 22
27918: PUSH
27919: LD_OWVAR 2
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PPUSH
27928: CALL_OW 69
27932: PPUSH
27933: LD_VAR 0 2
27937: PPUSH
27938: CALL_OW 74
27942: PPUSH
27943: CALL_OW 115
// until IsDead ( un ) ;
27947: LD_VAR 0 2
27951: PPUSH
27952: CALL_OW 301
27956: IFFALSE 27904
// end ;
27958: PPOPN 2
27960: END
// every 0 0$1 trigger StreamModeActive and sStu do
27961: LD_EXP 44
27965: PUSH
27966: LD_EXP 83
27970: AND
27971: IFFALSE 27987
27973: GO 27975
27975: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27976: LD_STRING displayStucuk();
27978: PPUSH
27979: CALL_OW 559
// ResetFog ;
27983: CALL_OW 335
// end ;
27987: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27988: LD_EXP 44
27992: PUSH
27993: LD_EXP 76
27997: AND
27998: IFFALSE 28139
28000: GO 28002
28002: DISABLE
28003: LD_INT 0
28005: PPUSH
28006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28007: LD_ADDR_VAR 0 2
28011: PUSH
28012: LD_INT 22
28014: PUSH
28015: LD_OWVAR 2
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 21
28026: PUSH
28027: LD_INT 1
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PPUSH
28038: CALL_OW 69
28042: ST_TO_ADDR
// if not tmp then
28043: LD_VAR 0 2
28047: NOT
28048: IFFALSE 28052
// exit ;
28050: GO 28139
// un := tmp [ rand ( 1 , tmp ) ] ;
28052: LD_ADDR_VAR 0 1
28056: PUSH
28057: LD_VAR 0 2
28061: PUSH
28062: LD_INT 1
28064: PPUSH
28065: LD_VAR 0 2
28069: PPUSH
28070: CALL_OW 12
28074: ARRAY
28075: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28076: LD_VAR 0 1
28080: PPUSH
28081: LD_INT 0
28083: PPUSH
28084: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28088: LD_VAR 0 1
28092: PPUSH
28093: LD_OWVAR 3
28097: PUSH
28098: LD_VAR 0 1
28102: DIFF
28103: PPUSH
28104: LD_VAR 0 1
28108: PPUSH
28109: CALL_OW 74
28113: PPUSH
28114: CALL_OW 115
// wait ( 0 0$20 ) ;
28118: LD_INT 700
28120: PPUSH
28121: CALL_OW 67
// SetSide ( un , your_side ) ;
28125: LD_VAR 0 1
28129: PPUSH
28130: LD_OWVAR 2
28134: PPUSH
28135: CALL_OW 235
// end ;
28139: PPOPN 2
28141: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28142: LD_EXP 44
28146: PUSH
28147: LD_EXP 77
28151: AND
28152: IFFALSE 28258
28154: GO 28156
28156: DISABLE
28157: LD_INT 0
28159: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28160: LD_ADDR_VAR 0 1
28164: PUSH
28165: LD_INT 22
28167: PUSH
28168: LD_OWVAR 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 30
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 30
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: LIST
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PPUSH
28209: CALL_OW 69
28213: ST_TO_ADDR
// if not depot then
28214: LD_VAR 0 1
28218: NOT
28219: IFFALSE 28223
// exit ;
28221: GO 28258
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28223: LD_VAR 0 1
28227: PUSH
28228: LD_INT 1
28230: ARRAY
28231: PPUSH
28232: CALL_OW 250
28236: PPUSH
28237: LD_VAR 0 1
28241: PUSH
28242: LD_INT 1
28244: ARRAY
28245: PPUSH
28246: CALL_OW 251
28250: PPUSH
28251: LD_INT 70
28253: PPUSH
28254: CALL_OW 495
// end ;
28258: PPOPN 1
28260: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28261: LD_EXP 44
28265: PUSH
28266: LD_EXP 78
28270: AND
28271: IFFALSE 28482
28273: GO 28275
28275: DISABLE
28276: LD_INT 0
28278: PPUSH
28279: PPUSH
28280: PPUSH
28281: PPUSH
28282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28283: LD_ADDR_VAR 0 5
28287: PUSH
28288: LD_INT 22
28290: PUSH
28291: LD_OWVAR 2
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 21
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PPUSH
28314: CALL_OW 69
28318: ST_TO_ADDR
// if not tmp then
28319: LD_VAR 0 5
28323: NOT
28324: IFFALSE 28328
// exit ;
28326: GO 28482
// for i in tmp do
28328: LD_ADDR_VAR 0 1
28332: PUSH
28333: LD_VAR 0 5
28337: PUSH
28338: FOR_IN
28339: IFFALSE 28480
// begin d := rand ( 0 , 5 ) ;
28341: LD_ADDR_VAR 0 4
28345: PUSH
28346: LD_INT 0
28348: PPUSH
28349: LD_INT 5
28351: PPUSH
28352: CALL_OW 12
28356: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28357: LD_ADDR_VAR 0 2
28361: PUSH
28362: LD_VAR 0 1
28366: PPUSH
28367: CALL_OW 250
28371: PPUSH
28372: LD_VAR 0 4
28376: PPUSH
28377: LD_INT 3
28379: PPUSH
28380: LD_INT 12
28382: PPUSH
28383: CALL_OW 12
28387: PPUSH
28388: CALL_OW 272
28392: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28393: LD_ADDR_VAR 0 3
28397: PUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL_OW 251
28407: PPUSH
28408: LD_VAR 0 4
28412: PPUSH
28413: LD_INT 3
28415: PPUSH
28416: LD_INT 12
28418: PPUSH
28419: CALL_OW 12
28423: PPUSH
28424: CALL_OW 273
28428: ST_TO_ADDR
// if ValidHex ( x , y ) then
28429: LD_VAR 0 2
28433: PPUSH
28434: LD_VAR 0 3
28438: PPUSH
28439: CALL_OW 488
28443: IFFALSE 28478
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28445: LD_VAR 0 1
28449: PPUSH
28450: LD_VAR 0 2
28454: PPUSH
28455: LD_VAR 0 3
28459: PPUSH
28460: LD_INT 3
28462: PPUSH
28463: LD_INT 6
28465: PPUSH
28466: CALL_OW 12
28470: PPUSH
28471: LD_INT 1
28473: PPUSH
28474: CALL_OW 483
// end ;
28478: GO 28338
28480: POP
28481: POP
// end ;
28482: PPOPN 5
28484: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28485: LD_EXP 44
28489: PUSH
28490: LD_EXP 79
28494: AND
28495: IFFALSE 28589
28497: GO 28499
28499: DISABLE
28500: LD_INT 0
28502: PPUSH
28503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28504: LD_ADDR_VAR 0 2
28508: PUSH
28509: LD_INT 22
28511: PUSH
28512: LD_OWVAR 2
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 32
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 21
28533: PUSH
28534: LD_INT 2
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: PPUSH
28546: CALL_OW 69
28550: ST_TO_ADDR
// if not tmp then
28551: LD_VAR 0 2
28555: NOT
28556: IFFALSE 28560
// exit ;
28558: GO 28589
// for i in tmp do
28560: LD_ADDR_VAR 0 1
28564: PUSH
28565: LD_VAR 0 2
28569: PUSH
28570: FOR_IN
28571: IFFALSE 28587
// SetFuel ( i , 0 ) ;
28573: LD_VAR 0 1
28577: PPUSH
28578: LD_INT 0
28580: PPUSH
28581: CALL_OW 240
28585: GO 28570
28587: POP
28588: POP
// end ;
28589: PPOPN 2
28591: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28592: LD_EXP 44
28596: PUSH
28597: LD_EXP 80
28601: AND
28602: IFFALSE 28668
28604: GO 28606
28606: DISABLE
28607: LD_INT 0
28609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28610: LD_ADDR_VAR 0 1
28614: PUSH
28615: LD_INT 22
28617: PUSH
28618: LD_OWVAR 2
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 30
28629: PUSH
28630: LD_INT 29
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PPUSH
28641: CALL_OW 69
28645: ST_TO_ADDR
// if not tmp then
28646: LD_VAR 0 1
28650: NOT
28651: IFFALSE 28655
// exit ;
28653: GO 28668
// DestroyUnit ( tmp [ 1 ] ) ;
28655: LD_VAR 0 1
28659: PUSH
28660: LD_INT 1
28662: ARRAY
28663: PPUSH
28664: CALL_OW 65
// end ;
28668: PPOPN 1
28670: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28671: LD_EXP 44
28675: PUSH
28676: LD_EXP 82
28680: AND
28681: IFFALSE 28810
28683: GO 28685
28685: DISABLE
28686: LD_INT 0
28688: PPUSH
// begin uc_side := 0 ;
28689: LD_ADDR_OWVAR 20
28693: PUSH
28694: LD_INT 0
28696: ST_TO_ADDR
// uc_nation := nation_arabian ;
28697: LD_ADDR_OWVAR 21
28701: PUSH
28702: LD_INT 2
28704: ST_TO_ADDR
// hc_gallery :=  ;
28705: LD_ADDR_OWVAR 33
28709: PUSH
28710: LD_STRING 
28712: ST_TO_ADDR
// hc_name :=  ;
28713: LD_ADDR_OWVAR 26
28717: PUSH
28718: LD_STRING 
28720: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28721: LD_INT 1
28723: PPUSH
28724: LD_INT 11
28726: PPUSH
28727: LD_INT 10
28729: PPUSH
28730: CALL_OW 380
// un := CreateHuman ;
28734: LD_ADDR_VAR 0 1
28738: PUSH
28739: CALL_OW 44
28743: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28744: LD_VAR 0 1
28748: PPUSH
28749: LD_INT 1
28751: PPUSH
28752: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28756: LD_INT 35
28758: PPUSH
28759: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28763: LD_VAR 0 1
28767: PPUSH
28768: LD_INT 22
28770: PUSH
28771: LD_OWVAR 2
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PPUSH
28780: CALL_OW 69
28784: PPUSH
28785: LD_VAR 0 1
28789: PPUSH
28790: CALL_OW 74
28794: PPUSH
28795: CALL_OW 115
// until IsDead ( un ) ;
28799: LD_VAR 0 1
28803: PPUSH
28804: CALL_OW 301
28808: IFFALSE 28756
// end ;
28810: PPOPN 1
28812: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28813: LD_EXP 44
28817: PUSH
28818: LD_EXP 84
28822: AND
28823: IFFALSE 28835
28825: GO 28827
28827: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28828: LD_STRING earthquake(getX(game), 0, 32)
28830: PPUSH
28831: CALL_OW 559
28835: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28836: LD_EXP 44
28840: PUSH
28841: LD_EXP 85
28845: AND
28846: IFFALSE 28937
28848: GO 28850
28850: DISABLE
28851: LD_INT 0
28853: PPUSH
// begin enable ;
28854: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28855: LD_ADDR_VAR 0 1
28859: PUSH
28860: LD_INT 22
28862: PUSH
28863: LD_OWVAR 2
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 21
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 33
28884: PUSH
28885: LD_INT 3
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: PPUSH
28897: CALL_OW 69
28901: ST_TO_ADDR
// if not tmp then
28902: LD_VAR 0 1
28906: NOT
28907: IFFALSE 28911
// exit ;
28909: GO 28937
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28911: LD_VAR 0 1
28915: PUSH
28916: LD_INT 1
28918: PPUSH
28919: LD_VAR 0 1
28923: PPUSH
28924: CALL_OW 12
28928: ARRAY
28929: PPUSH
28930: LD_INT 1
28932: PPUSH
28933: CALL_OW 234
// end ;
28937: PPOPN 1
28939: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28940: LD_EXP 44
28944: PUSH
28945: LD_EXP 86
28949: AND
28950: IFFALSE 29091
28952: GO 28954
28954: DISABLE
28955: LD_INT 0
28957: PPUSH
28958: PPUSH
28959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28960: LD_ADDR_VAR 0 3
28964: PUSH
28965: LD_INT 22
28967: PUSH
28968: LD_OWVAR 2
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 25
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PPUSH
28991: CALL_OW 69
28995: ST_TO_ADDR
// if not tmp then
28996: LD_VAR 0 3
29000: NOT
29001: IFFALSE 29005
// exit ;
29003: GO 29091
// un := tmp [ rand ( 1 , tmp ) ] ;
29005: LD_ADDR_VAR 0 2
29009: PUSH
29010: LD_VAR 0 3
29014: PUSH
29015: LD_INT 1
29017: PPUSH
29018: LD_VAR 0 3
29022: PPUSH
29023: CALL_OW 12
29027: ARRAY
29028: ST_TO_ADDR
// if Crawls ( un ) then
29029: LD_VAR 0 2
29033: PPUSH
29034: CALL_OW 318
29038: IFFALSE 29049
// ComWalk ( un ) ;
29040: LD_VAR 0 2
29044: PPUSH
29045: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29049: LD_VAR 0 2
29053: PPUSH
29054: LD_INT 9
29056: PPUSH
29057: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29061: LD_INT 28
29063: PPUSH
29064: LD_OWVAR 2
29068: PPUSH
29069: LD_INT 2
29071: PPUSH
29072: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29076: LD_INT 29
29078: PPUSH
29079: LD_OWVAR 2
29083: PPUSH
29084: LD_INT 2
29086: PPUSH
29087: CALL_OW 322
// end ;
29091: PPOPN 3
29093: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29094: LD_EXP 44
29098: PUSH
29099: LD_EXP 87
29103: AND
29104: IFFALSE 29215
29106: GO 29108
29108: DISABLE
29109: LD_INT 0
29111: PPUSH
29112: PPUSH
29113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29114: LD_ADDR_VAR 0 3
29118: PUSH
29119: LD_INT 22
29121: PUSH
29122: LD_OWVAR 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 25
29133: PUSH
29134: LD_INT 1
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PPUSH
29145: CALL_OW 69
29149: ST_TO_ADDR
// if not tmp then
29150: LD_VAR 0 3
29154: NOT
29155: IFFALSE 29159
// exit ;
29157: GO 29215
// un := tmp [ rand ( 1 , tmp ) ] ;
29159: LD_ADDR_VAR 0 2
29163: PUSH
29164: LD_VAR 0 3
29168: PUSH
29169: LD_INT 1
29171: PPUSH
29172: LD_VAR 0 3
29176: PPUSH
29177: CALL_OW 12
29181: ARRAY
29182: ST_TO_ADDR
// if Crawls ( un ) then
29183: LD_VAR 0 2
29187: PPUSH
29188: CALL_OW 318
29192: IFFALSE 29203
// ComWalk ( un ) ;
29194: LD_VAR 0 2
29198: PPUSH
29199: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29203: LD_VAR 0 2
29207: PPUSH
29208: LD_INT 8
29210: PPUSH
29211: CALL_OW 336
// end ;
29215: PPOPN 3
29217: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29218: LD_EXP 44
29222: PUSH
29223: LD_EXP 88
29227: AND
29228: IFFALSE 29372
29230: GO 29232
29232: DISABLE
29233: LD_INT 0
29235: PPUSH
29236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29237: LD_ADDR_VAR 0 2
29241: PUSH
29242: LD_INT 22
29244: PUSH
29245: LD_OWVAR 2
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 21
29256: PUSH
29257: LD_INT 2
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 2
29266: PUSH
29267: LD_INT 34
29269: PUSH
29270: LD_INT 12
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 34
29279: PUSH
29280: LD_INT 51
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 34
29289: PUSH
29290: LD_INT 32
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: LIST
29307: PPUSH
29308: CALL_OW 69
29312: ST_TO_ADDR
// if not tmp then
29313: LD_VAR 0 2
29317: NOT
29318: IFFALSE 29322
// exit ;
29320: GO 29372
// for i in tmp do
29322: LD_ADDR_VAR 0 1
29326: PUSH
29327: LD_VAR 0 2
29331: PUSH
29332: FOR_IN
29333: IFFALSE 29370
// if GetCargo ( i , mat_artifact ) = 0 then
29335: LD_VAR 0 1
29339: PPUSH
29340: LD_INT 4
29342: PPUSH
29343: CALL_OW 289
29347: PUSH
29348: LD_INT 0
29350: EQUAL
29351: IFFALSE 29368
// SetCargo ( i , mat_siberit , 100 ) ;
29353: LD_VAR 0 1
29357: PPUSH
29358: LD_INT 3
29360: PPUSH
29361: LD_INT 100
29363: PPUSH
29364: CALL_OW 290
29368: GO 29332
29370: POP
29371: POP
// end ;
29372: PPOPN 2
29374: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29375: LD_EXP 44
29379: PUSH
29380: LD_EXP 89
29384: AND
29385: IFFALSE 29568
29387: GO 29389
29389: DISABLE
29390: LD_INT 0
29392: PPUSH
29393: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29394: LD_ADDR_VAR 0 2
29398: PUSH
29399: LD_INT 22
29401: PUSH
29402: LD_OWVAR 2
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PPUSH
29411: CALL_OW 69
29415: ST_TO_ADDR
// if not tmp then
29416: LD_VAR 0 2
29420: NOT
29421: IFFALSE 29425
// exit ;
29423: GO 29568
// for i := 1 to 2 do
29425: LD_ADDR_VAR 0 1
29429: PUSH
29430: DOUBLE
29431: LD_INT 1
29433: DEC
29434: ST_TO_ADDR
29435: LD_INT 2
29437: PUSH
29438: FOR_TO
29439: IFFALSE 29566
// begin uc_side := your_side ;
29441: LD_ADDR_OWVAR 20
29445: PUSH
29446: LD_OWVAR 2
29450: ST_TO_ADDR
// uc_nation := nation_american ;
29451: LD_ADDR_OWVAR 21
29455: PUSH
29456: LD_INT 1
29458: ST_TO_ADDR
// vc_chassis := us_morphling ;
29459: LD_ADDR_OWVAR 37
29463: PUSH
29464: LD_INT 5
29466: ST_TO_ADDR
// vc_engine := engine_siberite ;
29467: LD_ADDR_OWVAR 39
29471: PUSH
29472: LD_INT 3
29474: ST_TO_ADDR
// vc_control := control_computer ;
29475: LD_ADDR_OWVAR 38
29479: PUSH
29480: LD_INT 3
29482: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29483: LD_ADDR_OWVAR 40
29487: PUSH
29488: LD_INT 10
29490: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29491: LD_VAR 0 2
29495: PUSH
29496: LD_INT 1
29498: ARRAY
29499: PPUSH
29500: CALL_OW 310
29504: NOT
29505: IFFALSE 29552
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29507: CALL_OW 45
29511: PPUSH
29512: LD_VAR 0 2
29516: PUSH
29517: LD_INT 1
29519: ARRAY
29520: PPUSH
29521: CALL_OW 250
29525: PPUSH
29526: LD_VAR 0 2
29530: PUSH
29531: LD_INT 1
29533: ARRAY
29534: PPUSH
29535: CALL_OW 251
29539: PPUSH
29540: LD_INT 12
29542: PPUSH
29543: LD_INT 1
29545: PPUSH
29546: CALL_OW 50
29550: GO 29564
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29552: CALL_OW 45
29556: PPUSH
29557: LD_INT 1
29559: PPUSH
29560: CALL_OW 51
// end ;
29564: GO 29438
29566: POP
29567: POP
// end ;
29568: PPOPN 2
29570: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29571: LD_EXP 44
29575: PUSH
29576: LD_EXP 90
29580: AND
29581: IFFALSE 29803
29583: GO 29585
29585: DISABLE
29586: LD_INT 0
29588: PPUSH
29589: PPUSH
29590: PPUSH
29591: PPUSH
29592: PPUSH
29593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29594: LD_ADDR_VAR 0 6
29598: PUSH
29599: LD_INT 22
29601: PUSH
29602: LD_OWVAR 2
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 21
29613: PUSH
29614: LD_INT 1
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: LD_INT 23
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: PPUSH
29643: CALL_OW 69
29647: ST_TO_ADDR
// if not tmp then
29648: LD_VAR 0 6
29652: NOT
29653: IFFALSE 29657
// exit ;
29655: GO 29803
// s1 := rand ( 1 , 4 ) ;
29657: LD_ADDR_VAR 0 2
29661: PUSH
29662: LD_INT 1
29664: PPUSH
29665: LD_INT 4
29667: PPUSH
29668: CALL_OW 12
29672: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29673: LD_ADDR_VAR 0 4
29677: PUSH
29678: LD_VAR 0 6
29682: PUSH
29683: LD_INT 1
29685: ARRAY
29686: PPUSH
29687: LD_VAR 0 2
29691: PPUSH
29692: CALL_OW 259
29696: ST_TO_ADDR
// if s1 = 1 then
29697: LD_VAR 0 2
29701: PUSH
29702: LD_INT 1
29704: EQUAL
29705: IFFALSE 29725
// s2 := rand ( 2 , 4 ) else
29707: LD_ADDR_VAR 0 3
29711: PUSH
29712: LD_INT 2
29714: PPUSH
29715: LD_INT 4
29717: PPUSH
29718: CALL_OW 12
29722: ST_TO_ADDR
29723: GO 29733
// s2 := 1 ;
29725: LD_ADDR_VAR 0 3
29729: PUSH
29730: LD_INT 1
29732: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29733: LD_ADDR_VAR 0 5
29737: PUSH
29738: LD_VAR 0 6
29742: PUSH
29743: LD_INT 1
29745: ARRAY
29746: PPUSH
29747: LD_VAR 0 3
29751: PPUSH
29752: CALL_OW 259
29756: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29757: LD_VAR 0 6
29761: PUSH
29762: LD_INT 1
29764: ARRAY
29765: PPUSH
29766: LD_VAR 0 2
29770: PPUSH
29771: LD_VAR 0 5
29775: PPUSH
29776: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29780: LD_VAR 0 6
29784: PUSH
29785: LD_INT 1
29787: ARRAY
29788: PPUSH
29789: LD_VAR 0 3
29793: PPUSH
29794: LD_VAR 0 4
29798: PPUSH
29799: CALL_OW 237
// end ;
29803: PPOPN 6
29805: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29806: LD_EXP 44
29810: PUSH
29811: LD_EXP 91
29815: AND
29816: IFFALSE 29895
29818: GO 29820
29820: DISABLE
29821: LD_INT 0
29823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29824: LD_ADDR_VAR 0 1
29828: PUSH
29829: LD_INT 22
29831: PUSH
29832: LD_OWVAR 2
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 30
29843: PUSH
29844: LD_INT 3
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PPUSH
29855: CALL_OW 69
29859: ST_TO_ADDR
// if not tmp then
29860: LD_VAR 0 1
29864: NOT
29865: IFFALSE 29869
// exit ;
29867: GO 29895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29869: LD_VAR 0 1
29873: PUSH
29874: LD_INT 1
29876: PPUSH
29877: LD_VAR 0 1
29881: PPUSH
29882: CALL_OW 12
29886: ARRAY
29887: PPUSH
29888: LD_INT 1
29890: PPUSH
29891: CALL_OW 234
// end ;
29895: PPOPN 1
29897: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29898: LD_EXP 44
29902: PUSH
29903: LD_EXP 92
29907: AND
29908: IFFALSE 30020
29910: GO 29912
29912: DISABLE
29913: LD_INT 0
29915: PPUSH
29916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29917: LD_ADDR_VAR 0 2
29921: PUSH
29922: LD_INT 22
29924: PUSH
29925: LD_OWVAR 2
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 2
29936: PUSH
29937: LD_INT 30
29939: PUSH
29940: LD_INT 27
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 30
29949: PUSH
29950: LD_INT 26
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 30
29959: PUSH
29960: LD_INT 28
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PPUSH
29977: CALL_OW 69
29981: ST_TO_ADDR
// if not tmp then
29982: LD_VAR 0 2
29986: NOT
29987: IFFALSE 29991
// exit ;
29989: GO 30020
// for i in tmp do
29991: LD_ADDR_VAR 0 1
29995: PUSH
29996: LD_VAR 0 2
30000: PUSH
30001: FOR_IN
30002: IFFALSE 30018
// SetLives ( i , 1 ) ;
30004: LD_VAR 0 1
30008: PPUSH
30009: LD_INT 1
30011: PPUSH
30012: CALL_OW 234
30016: GO 30001
30018: POP
30019: POP
// end ;
30020: PPOPN 2
30022: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30023: LD_EXP 44
30027: PUSH
30028: LD_EXP 93
30032: AND
30033: IFFALSE 30320
30035: GO 30037
30037: DISABLE
30038: LD_INT 0
30040: PPUSH
30041: PPUSH
30042: PPUSH
// begin i := rand ( 1 , 7 ) ;
30043: LD_ADDR_VAR 0 1
30047: PUSH
30048: LD_INT 1
30050: PPUSH
30051: LD_INT 7
30053: PPUSH
30054: CALL_OW 12
30058: ST_TO_ADDR
// case i of 1 :
30059: LD_VAR 0 1
30063: PUSH
30064: LD_INT 1
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30082
30072: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30073: LD_STRING earthquake(getX(game), 0, 32)
30075: PPUSH
30076: CALL_OW 559
30080: GO 30320
30082: LD_INT 2
30084: DOUBLE
30085: EQUAL
30086: IFTRUE 30090
30088: GO 30104
30090: POP
// begin ToLua ( displayStucuk(); ) ;
30091: LD_STRING displayStucuk();
30093: PPUSH
30094: CALL_OW 559
// ResetFog ;
30098: CALL_OW 335
// end ; 3 :
30102: GO 30320
30104: LD_INT 3
30106: DOUBLE
30107: EQUAL
30108: IFTRUE 30112
30110: GO 30216
30112: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30113: LD_ADDR_VAR 0 2
30117: PUSH
30118: LD_INT 22
30120: PUSH
30121: LD_OWVAR 2
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 25
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PPUSH
30144: CALL_OW 69
30148: ST_TO_ADDR
// if not tmp then
30149: LD_VAR 0 2
30153: NOT
30154: IFFALSE 30158
// exit ;
30156: GO 30320
// un := tmp [ rand ( 1 , tmp ) ] ;
30158: LD_ADDR_VAR 0 3
30162: PUSH
30163: LD_VAR 0 2
30167: PUSH
30168: LD_INT 1
30170: PPUSH
30171: LD_VAR 0 2
30175: PPUSH
30176: CALL_OW 12
30180: ARRAY
30181: ST_TO_ADDR
// if Crawls ( un ) then
30182: LD_VAR 0 3
30186: PPUSH
30187: CALL_OW 318
30191: IFFALSE 30202
// ComWalk ( un ) ;
30193: LD_VAR 0 3
30197: PPUSH
30198: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30202: LD_VAR 0 3
30206: PPUSH
30207: LD_INT 8
30209: PPUSH
30210: CALL_OW 336
// end ; 4 :
30214: GO 30320
30216: LD_INT 4
30218: DOUBLE
30219: EQUAL
30220: IFTRUE 30224
30222: GO 30298
30224: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30225: LD_ADDR_VAR 0 2
30229: PUSH
30230: LD_INT 22
30232: PUSH
30233: LD_OWVAR 2
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 30
30244: PUSH
30245: LD_INT 29
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PPUSH
30256: CALL_OW 69
30260: ST_TO_ADDR
// if not tmp then
30261: LD_VAR 0 2
30265: NOT
30266: IFFALSE 30270
// exit ;
30268: GO 30320
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30270: LD_VAR 0 2
30274: PUSH
30275: LD_INT 1
30277: ARRAY
30278: PPUSH
30279: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30283: LD_VAR 0 2
30287: PUSH
30288: LD_INT 1
30290: ARRAY
30291: PPUSH
30292: CALL_OW 65
// end ; 5 .. 7 :
30296: GO 30320
30298: LD_INT 5
30300: DOUBLE
30301: GREATEREQUAL
30302: IFFALSE 30310
30304: LD_INT 7
30306: DOUBLE
30307: LESSEQUAL
30308: IFTRUE 30312
30310: GO 30319
30312: POP
// StreamSibBomb ; end ;
30313: CALL 26557 0 0
30317: GO 30320
30319: POP
// end ;
30320: PPOPN 3
30322: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30323: LD_EXP 44
30327: PUSH
30328: LD_EXP 94
30332: AND
30333: IFFALSE 30489
30335: GO 30337
30337: DISABLE
30338: LD_INT 0
30340: PPUSH
30341: PPUSH
30342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30343: LD_ADDR_VAR 0 2
30347: PUSH
30348: LD_INT 81
30350: PUSH
30351: LD_OWVAR 2
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 2
30362: PUSH
30363: LD_INT 21
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 21
30375: PUSH
30376: LD_INT 2
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PPUSH
30392: CALL_OW 69
30396: ST_TO_ADDR
// if not tmp then
30397: LD_VAR 0 2
30401: NOT
30402: IFFALSE 30406
// exit ;
30404: GO 30489
// p := 0 ;
30406: LD_ADDR_VAR 0 3
30410: PUSH
30411: LD_INT 0
30413: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30414: LD_INT 35
30416: PPUSH
30417: CALL_OW 67
// p := p + 1 ;
30421: LD_ADDR_VAR 0 3
30425: PUSH
30426: LD_VAR 0 3
30430: PUSH
30431: LD_INT 1
30433: PLUS
30434: ST_TO_ADDR
// for i in tmp do
30435: LD_ADDR_VAR 0 1
30439: PUSH
30440: LD_VAR 0 2
30444: PUSH
30445: FOR_IN
30446: IFFALSE 30477
// if GetLives ( i ) < 1000 then
30448: LD_VAR 0 1
30452: PPUSH
30453: CALL_OW 256
30457: PUSH
30458: LD_INT 1000
30460: LESS
30461: IFFALSE 30475
// SetLives ( i , 1000 ) ;
30463: LD_VAR 0 1
30467: PPUSH
30468: LD_INT 1000
30470: PPUSH
30471: CALL_OW 234
30475: GO 30445
30477: POP
30478: POP
// until p > 20 ;
30479: LD_VAR 0 3
30483: PUSH
30484: LD_INT 20
30486: GREATER
30487: IFFALSE 30414
// end ;
30489: PPOPN 3
30491: END
// every 0 0$1 trigger StreamModeActive and sTime do
30492: LD_EXP 44
30496: PUSH
30497: LD_EXP 95
30501: AND
30502: IFFALSE 30537
30504: GO 30506
30506: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30507: LD_INT 28
30509: PPUSH
30510: LD_OWVAR 2
30514: PPUSH
30515: LD_INT 2
30517: PPUSH
30518: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30522: LD_INT 30
30524: PPUSH
30525: LD_OWVAR 2
30529: PPUSH
30530: LD_INT 2
30532: PPUSH
30533: CALL_OW 322
// end ;
30537: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30538: LD_EXP 44
30542: PUSH
30543: LD_EXP 96
30547: AND
30548: IFFALSE 30669
30550: GO 30552
30552: DISABLE
30553: LD_INT 0
30555: PPUSH
30556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30557: LD_ADDR_VAR 0 2
30561: PUSH
30562: LD_INT 22
30564: PUSH
30565: LD_OWVAR 2
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 21
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 3
30586: PUSH
30587: LD_INT 23
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: PPUSH
30606: CALL_OW 69
30610: ST_TO_ADDR
// if not tmp then
30611: LD_VAR 0 2
30615: NOT
30616: IFFALSE 30620
// exit ;
30618: GO 30669
// for i in tmp do
30620: LD_ADDR_VAR 0 1
30624: PUSH
30625: LD_VAR 0 2
30629: PUSH
30630: FOR_IN
30631: IFFALSE 30667
// begin if Crawls ( i ) then
30633: LD_VAR 0 1
30637: PPUSH
30638: CALL_OW 318
30642: IFFALSE 30653
// ComWalk ( i ) ;
30644: LD_VAR 0 1
30648: PPUSH
30649: CALL_OW 138
// SetClass ( i , 2 ) ;
30653: LD_VAR 0 1
30657: PPUSH
30658: LD_INT 2
30660: PPUSH
30661: CALL_OW 336
// end ;
30665: GO 30630
30667: POP
30668: POP
// end ;
30669: PPOPN 2
30671: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30672: LD_EXP 44
30676: PUSH
30677: LD_EXP 97
30681: AND
30682: IFFALSE 30970
30684: GO 30686
30686: DISABLE
30687: LD_INT 0
30689: PPUSH
30690: PPUSH
30691: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30692: LD_OWVAR 2
30696: PPUSH
30697: LD_INT 9
30699: PPUSH
30700: LD_INT 1
30702: PPUSH
30703: LD_INT 1
30705: PPUSH
30706: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30710: LD_INT 9
30712: PPUSH
30713: LD_OWVAR 2
30717: PPUSH
30718: CALL_OW 343
// uc_side := 9 ;
30722: LD_ADDR_OWVAR 20
30726: PUSH
30727: LD_INT 9
30729: ST_TO_ADDR
// uc_nation := 2 ;
30730: LD_ADDR_OWVAR 21
30734: PUSH
30735: LD_INT 2
30737: ST_TO_ADDR
// hc_name := Dark Warrior ;
30738: LD_ADDR_OWVAR 26
30742: PUSH
30743: LD_STRING Dark Warrior
30745: ST_TO_ADDR
// hc_gallery :=  ;
30746: LD_ADDR_OWVAR 33
30750: PUSH
30751: LD_STRING 
30753: ST_TO_ADDR
// hc_noskilllimit := true ;
30754: LD_ADDR_OWVAR 76
30758: PUSH
30759: LD_INT 1
30761: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30762: LD_ADDR_OWVAR 31
30766: PUSH
30767: LD_INT 30
30769: PUSH
30770: LD_INT 30
30772: PUSH
30773: LD_INT 30
30775: PUSH
30776: LD_INT 30
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: ST_TO_ADDR
// un := CreateHuman ;
30785: LD_ADDR_VAR 0 3
30789: PUSH
30790: CALL_OW 44
30794: ST_TO_ADDR
// hc_noskilllimit := false ;
30795: LD_ADDR_OWVAR 76
30799: PUSH
30800: LD_INT 0
30802: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30803: LD_VAR 0 3
30807: PPUSH
30808: LD_INT 1
30810: PPUSH
30811: CALL_OW 51
// ToLua ( playRanger() ) ;
30815: LD_STRING playRanger()
30817: PPUSH
30818: CALL_OW 559
// p := 0 ;
30822: LD_ADDR_VAR 0 2
30826: PUSH
30827: LD_INT 0
30829: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30830: LD_INT 35
30832: PPUSH
30833: CALL_OW 67
// p := p + 1 ;
30837: LD_ADDR_VAR 0 2
30841: PUSH
30842: LD_VAR 0 2
30846: PUSH
30847: LD_INT 1
30849: PLUS
30850: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30851: LD_VAR 0 3
30855: PPUSH
30856: CALL_OW 256
30860: PUSH
30861: LD_INT 1000
30863: LESS
30864: IFFALSE 30878
// SetLives ( un , 1000 ) ;
30866: LD_VAR 0 3
30870: PPUSH
30871: LD_INT 1000
30873: PPUSH
30874: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30878: LD_VAR 0 3
30882: PPUSH
30883: LD_INT 81
30885: PUSH
30886: LD_OWVAR 2
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 91
30897: PUSH
30898: LD_VAR 0 3
30902: PUSH
30903: LD_INT 30
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PPUSH
30915: CALL_OW 69
30919: PPUSH
30920: LD_VAR 0 3
30924: PPUSH
30925: CALL_OW 74
30929: PPUSH
30930: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30934: LD_VAR 0 2
30938: PUSH
30939: LD_INT 80
30941: GREATER
30942: PUSH
30943: LD_VAR 0 3
30947: PPUSH
30948: CALL_OW 301
30952: OR
30953: IFFALSE 30830
// if un then
30955: LD_VAR 0 3
30959: IFFALSE 30970
// RemoveUnit ( un ) ;
30961: LD_VAR 0 3
30965: PPUSH
30966: CALL_OW 64
// end ;
30970: PPOPN 3
30972: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30973: LD_EXP 98
30977: IFFALSE 31093
30979: GO 30981
30981: DISABLE
30982: LD_INT 0
30984: PPUSH
30985: PPUSH
30986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30987: LD_ADDR_VAR 0 2
30991: PUSH
30992: LD_INT 81
30994: PUSH
30995: LD_OWVAR 2
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 21
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PPUSH
31018: CALL_OW 69
31022: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31023: LD_STRING playComputer()
31025: PPUSH
31026: CALL_OW 559
// if not tmp then
31030: LD_VAR 0 2
31034: NOT
31035: IFFALSE 31039
// exit ;
31037: GO 31093
// for i in tmp do
31039: LD_ADDR_VAR 0 1
31043: PUSH
31044: LD_VAR 0 2
31048: PUSH
31049: FOR_IN
31050: IFFALSE 31091
// for j := 1 to 4 do
31052: LD_ADDR_VAR 0 3
31056: PUSH
31057: DOUBLE
31058: LD_INT 1
31060: DEC
31061: ST_TO_ADDR
31062: LD_INT 4
31064: PUSH
31065: FOR_TO
31066: IFFALSE 31087
// SetSkill ( i , j , 10 ) ;
31068: LD_VAR 0 1
31072: PPUSH
31073: LD_VAR 0 3
31077: PPUSH
31078: LD_INT 10
31080: PPUSH
31081: CALL_OW 237
31085: GO 31065
31087: POP
31088: POP
31089: GO 31049
31091: POP
31092: POP
// end ;
31093: PPOPN 3
31095: END
// every 0 0$1 trigger s30 do var i , tmp ;
31096: LD_EXP 99
31100: IFFALSE 31169
31102: GO 31104
31104: DISABLE
31105: LD_INT 0
31107: PPUSH
31108: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31109: LD_ADDR_VAR 0 2
31113: PUSH
31114: LD_INT 22
31116: PUSH
31117: LD_OWVAR 2
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PPUSH
31126: CALL_OW 69
31130: ST_TO_ADDR
// if not tmp then
31131: LD_VAR 0 2
31135: NOT
31136: IFFALSE 31140
// exit ;
31138: GO 31169
// for i in tmp do
31140: LD_ADDR_VAR 0 1
31144: PUSH
31145: LD_VAR 0 2
31149: PUSH
31150: FOR_IN
31151: IFFALSE 31167
// SetLives ( i , 300 ) ;
31153: LD_VAR 0 1
31157: PPUSH
31158: LD_INT 300
31160: PPUSH
31161: CALL_OW 234
31165: GO 31150
31167: POP
31168: POP
// end ;
31169: PPOPN 2
31171: END
// every 0 0$1 trigger s60 do var i , tmp ;
31172: LD_EXP 100
31176: IFFALSE 31245
31178: GO 31180
31180: DISABLE
31181: LD_INT 0
31183: PPUSH
31184: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31185: LD_ADDR_VAR 0 2
31189: PUSH
31190: LD_INT 22
31192: PUSH
31193: LD_OWVAR 2
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PPUSH
31202: CALL_OW 69
31206: ST_TO_ADDR
// if not tmp then
31207: LD_VAR 0 2
31211: NOT
31212: IFFALSE 31216
// exit ;
31214: GO 31245
// for i in tmp do
31216: LD_ADDR_VAR 0 1
31220: PUSH
31221: LD_VAR 0 2
31225: PUSH
31226: FOR_IN
31227: IFFALSE 31243
// SetLives ( i , 600 ) ;
31229: LD_VAR 0 1
31233: PPUSH
31234: LD_INT 600
31236: PPUSH
31237: CALL_OW 234
31241: GO 31226
31243: POP
31244: POP
// end ;
31245: PPOPN 2
31247: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31248: LD_INT 0
31250: PPUSH
// case cmd of 301 :
31251: LD_VAR 0 1
31255: PUSH
31256: LD_INT 301
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 31296
31264: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31265: LD_VAR 0 6
31269: PPUSH
31270: LD_VAR 0 7
31274: PPUSH
31275: LD_VAR 0 8
31279: PPUSH
31280: LD_VAR 0 4
31284: PPUSH
31285: LD_VAR 0 5
31289: PPUSH
31290: CALL 32505 0 5
31294: GO 31417
31296: LD_INT 302
31298: DOUBLE
31299: EQUAL
31300: IFTRUE 31304
31302: GO 31341
31304: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31305: LD_VAR 0 6
31309: PPUSH
31310: LD_VAR 0 7
31314: PPUSH
31315: LD_VAR 0 8
31319: PPUSH
31320: LD_VAR 0 9
31324: PPUSH
31325: LD_VAR 0 4
31329: PPUSH
31330: LD_VAR 0 5
31334: PPUSH
31335: CALL 32596 0 6
31339: GO 31417
31341: LD_INT 303
31343: DOUBLE
31344: EQUAL
31345: IFTRUE 31349
31347: GO 31386
31349: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31350: LD_VAR 0 6
31354: PPUSH
31355: LD_VAR 0 7
31359: PPUSH
31360: LD_VAR 0 8
31364: PPUSH
31365: LD_VAR 0 9
31369: PPUSH
31370: LD_VAR 0 4
31374: PPUSH
31375: LD_VAR 0 5
31379: PPUSH
31380: CALL 31422 0 6
31384: GO 31417
31386: LD_INT 304
31388: DOUBLE
31389: EQUAL
31390: IFTRUE 31394
31392: GO 31416
31394: POP
// hHackTeleport ( unit , x , y ) ; end ;
31395: LD_VAR 0 2
31399: PPUSH
31400: LD_VAR 0 4
31404: PPUSH
31405: LD_VAR 0 5
31409: PPUSH
31410: CALL 33189 0 3
31414: GO 31417
31416: POP
// end ;
31417: LD_VAR 0 12
31421: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31422: LD_INT 0
31424: PPUSH
31425: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31426: LD_VAR 0 1
31430: PUSH
31431: LD_INT 1
31433: LESS
31434: PUSH
31435: LD_VAR 0 1
31439: PUSH
31440: LD_INT 3
31442: GREATER
31443: OR
31444: PUSH
31445: LD_VAR 0 5
31449: PPUSH
31450: LD_VAR 0 6
31454: PPUSH
31455: CALL_OW 428
31459: OR
31460: IFFALSE 31464
// exit ;
31462: GO 32192
// uc_side := your_side ;
31464: LD_ADDR_OWVAR 20
31468: PUSH
31469: LD_OWVAR 2
31473: ST_TO_ADDR
// uc_nation := nation ;
31474: LD_ADDR_OWVAR 21
31478: PUSH
31479: LD_VAR 0 1
31483: ST_TO_ADDR
// bc_level = 1 ;
31484: LD_ADDR_OWVAR 43
31488: PUSH
31489: LD_INT 1
31491: ST_TO_ADDR
// case btype of 1 :
31492: LD_VAR 0 2
31496: PUSH
31497: LD_INT 1
31499: DOUBLE
31500: EQUAL
31501: IFTRUE 31505
31503: GO 31516
31505: POP
// bc_type := b_depot ; 2 :
31506: LD_ADDR_OWVAR 42
31510: PUSH
31511: LD_INT 0
31513: ST_TO_ADDR
31514: GO 32136
31516: LD_INT 2
31518: DOUBLE
31519: EQUAL
31520: IFTRUE 31524
31522: GO 31535
31524: POP
// bc_type := b_warehouse ; 3 :
31525: LD_ADDR_OWVAR 42
31529: PUSH
31530: LD_INT 1
31532: ST_TO_ADDR
31533: GO 32136
31535: LD_INT 3
31537: DOUBLE
31538: EQUAL
31539: IFTRUE 31543
31541: GO 31554
31543: POP
// bc_type := b_lab ; 4 .. 9 :
31544: LD_ADDR_OWVAR 42
31548: PUSH
31549: LD_INT 6
31551: ST_TO_ADDR
31552: GO 32136
31554: LD_INT 4
31556: DOUBLE
31557: GREATEREQUAL
31558: IFFALSE 31566
31560: LD_INT 9
31562: DOUBLE
31563: LESSEQUAL
31564: IFTRUE 31568
31566: GO 31628
31568: POP
// begin bc_type := b_lab_half ;
31569: LD_ADDR_OWVAR 42
31573: PUSH
31574: LD_INT 7
31576: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31577: LD_ADDR_OWVAR 44
31581: PUSH
31582: LD_INT 10
31584: PUSH
31585: LD_INT 11
31587: PUSH
31588: LD_INT 12
31590: PUSH
31591: LD_INT 15
31593: PUSH
31594: LD_INT 14
31596: PUSH
31597: LD_INT 13
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: PUSH
31608: LD_VAR 0 2
31612: PUSH
31613: LD_INT 3
31615: MINUS
31616: ARRAY
31617: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
31618: LD_ADDR_OWVAR 45
31622: PUSH
31623: LD_INT 9
31625: ST_TO_ADDR
// end ; 10 .. 13 :
31626: GO 32136
31628: LD_INT 10
31630: DOUBLE
31631: GREATEREQUAL
31632: IFFALSE 31640
31634: LD_INT 13
31636: DOUBLE
31637: LESSEQUAL
31638: IFTRUE 31642
31640: GO 31719
31642: POP
// begin bc_type := b_lab_full ;
31643: LD_ADDR_OWVAR 42
31647: PUSH
31648: LD_INT 8
31650: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31651: LD_ADDR_OWVAR 44
31655: PUSH
31656: LD_INT 10
31658: PUSH
31659: LD_INT 12
31661: PUSH
31662: LD_INT 14
31664: PUSH
31665: LD_INT 13
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: PUSH
31674: LD_VAR 0 2
31678: PUSH
31679: LD_INT 9
31681: MINUS
31682: ARRAY
31683: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31684: LD_ADDR_OWVAR 45
31688: PUSH
31689: LD_INT 11
31691: PUSH
31692: LD_INT 15
31694: PUSH
31695: LD_INT 12
31697: PUSH
31698: LD_INT 15
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: PUSH
31707: LD_VAR 0 2
31711: PUSH
31712: LD_INT 9
31714: MINUS
31715: ARRAY
31716: ST_TO_ADDR
// end ; 14 :
31717: GO 32136
31719: LD_INT 14
31721: DOUBLE
31722: EQUAL
31723: IFTRUE 31727
31725: GO 31738
31727: POP
// bc_type := b_workshop ; 15 :
31728: LD_ADDR_OWVAR 42
31732: PUSH
31733: LD_INT 2
31735: ST_TO_ADDR
31736: GO 32136
31738: LD_INT 15
31740: DOUBLE
31741: EQUAL
31742: IFTRUE 31746
31744: GO 31757
31746: POP
// bc_type := b_factory ; 16 :
31747: LD_ADDR_OWVAR 42
31751: PUSH
31752: LD_INT 3
31754: ST_TO_ADDR
31755: GO 32136
31757: LD_INT 16
31759: DOUBLE
31760: EQUAL
31761: IFTRUE 31765
31763: GO 31776
31765: POP
// bc_type := b_ext_gun ; 17 :
31766: LD_ADDR_OWVAR 42
31770: PUSH
31771: LD_INT 17
31773: ST_TO_ADDR
31774: GO 32136
31776: LD_INT 17
31778: DOUBLE
31779: EQUAL
31780: IFTRUE 31784
31782: GO 31812
31784: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31785: LD_ADDR_OWVAR 42
31789: PUSH
31790: LD_INT 19
31792: PUSH
31793: LD_INT 23
31795: PUSH
31796: LD_INT 19
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: LIST
31803: PUSH
31804: LD_VAR 0 1
31808: ARRAY
31809: ST_TO_ADDR
31810: GO 32136
31812: LD_INT 18
31814: DOUBLE
31815: EQUAL
31816: IFTRUE 31820
31818: GO 31831
31820: POP
// bc_type := b_ext_radar ; 19 :
31821: LD_ADDR_OWVAR 42
31825: PUSH
31826: LD_INT 20
31828: ST_TO_ADDR
31829: GO 32136
31831: LD_INT 19
31833: DOUBLE
31834: EQUAL
31835: IFTRUE 31839
31837: GO 31850
31839: POP
// bc_type := b_ext_radio ; 20 :
31840: LD_ADDR_OWVAR 42
31844: PUSH
31845: LD_INT 22
31847: ST_TO_ADDR
31848: GO 32136
31850: LD_INT 20
31852: DOUBLE
31853: EQUAL
31854: IFTRUE 31858
31856: GO 31869
31858: POP
// bc_type := b_ext_siberium ; 21 :
31859: LD_ADDR_OWVAR 42
31863: PUSH
31864: LD_INT 21
31866: ST_TO_ADDR
31867: GO 32136
31869: LD_INT 21
31871: DOUBLE
31872: EQUAL
31873: IFTRUE 31877
31875: GO 31888
31877: POP
// bc_type := b_ext_computer ; 22 :
31878: LD_ADDR_OWVAR 42
31882: PUSH
31883: LD_INT 24
31885: ST_TO_ADDR
31886: GO 32136
31888: LD_INT 22
31890: DOUBLE
31891: EQUAL
31892: IFTRUE 31896
31894: GO 31907
31896: POP
// bc_type := b_ext_track ; 23 :
31897: LD_ADDR_OWVAR 42
31901: PUSH
31902: LD_INT 16
31904: ST_TO_ADDR
31905: GO 32136
31907: LD_INT 23
31909: DOUBLE
31910: EQUAL
31911: IFTRUE 31915
31913: GO 31926
31915: POP
// bc_type := b_ext_laser ; 24 :
31916: LD_ADDR_OWVAR 42
31920: PUSH
31921: LD_INT 25
31923: ST_TO_ADDR
31924: GO 32136
31926: LD_INT 24
31928: DOUBLE
31929: EQUAL
31930: IFTRUE 31934
31932: GO 31945
31934: POP
// bc_type := b_control_tower ; 25 :
31935: LD_ADDR_OWVAR 42
31939: PUSH
31940: LD_INT 36
31942: ST_TO_ADDR
31943: GO 32136
31945: LD_INT 25
31947: DOUBLE
31948: EQUAL
31949: IFTRUE 31953
31951: GO 31964
31953: POP
// bc_type := b_breastwork ; 26 :
31954: LD_ADDR_OWVAR 42
31958: PUSH
31959: LD_INT 31
31961: ST_TO_ADDR
31962: GO 32136
31964: LD_INT 26
31966: DOUBLE
31967: EQUAL
31968: IFTRUE 31972
31970: GO 31983
31972: POP
// bc_type := b_bunker ; 27 :
31973: LD_ADDR_OWVAR 42
31977: PUSH
31978: LD_INT 32
31980: ST_TO_ADDR
31981: GO 32136
31983: LD_INT 27
31985: DOUBLE
31986: EQUAL
31987: IFTRUE 31991
31989: GO 32002
31991: POP
// bc_type := b_turret ; 28 :
31992: LD_ADDR_OWVAR 42
31996: PUSH
31997: LD_INT 33
31999: ST_TO_ADDR
32000: GO 32136
32002: LD_INT 28
32004: DOUBLE
32005: EQUAL
32006: IFTRUE 32010
32008: GO 32021
32010: POP
// bc_type := b_armoury ; 29 :
32011: LD_ADDR_OWVAR 42
32015: PUSH
32016: LD_INT 4
32018: ST_TO_ADDR
32019: GO 32136
32021: LD_INT 29
32023: DOUBLE
32024: EQUAL
32025: IFTRUE 32029
32027: GO 32040
32029: POP
// bc_type := b_barracks ; 30 :
32030: LD_ADDR_OWVAR 42
32034: PUSH
32035: LD_INT 5
32037: ST_TO_ADDR
32038: GO 32136
32040: LD_INT 30
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32059
32048: POP
// bc_type := b_solar_power ; 31 :
32049: LD_ADDR_OWVAR 42
32053: PUSH
32054: LD_INT 27
32056: ST_TO_ADDR
32057: GO 32136
32059: LD_INT 31
32061: DOUBLE
32062: EQUAL
32063: IFTRUE 32067
32065: GO 32078
32067: POP
// bc_type := b_oil_power ; 32 :
32068: LD_ADDR_OWVAR 42
32072: PUSH
32073: LD_INT 26
32075: ST_TO_ADDR
32076: GO 32136
32078: LD_INT 32
32080: DOUBLE
32081: EQUAL
32082: IFTRUE 32086
32084: GO 32097
32086: POP
// bc_type := b_siberite_power ; 33 :
32087: LD_ADDR_OWVAR 42
32091: PUSH
32092: LD_INT 28
32094: ST_TO_ADDR
32095: GO 32136
32097: LD_INT 33
32099: DOUBLE
32100: EQUAL
32101: IFTRUE 32105
32103: GO 32116
32105: POP
// bc_type := b_oil_mine ; 34 :
32106: LD_ADDR_OWVAR 42
32110: PUSH
32111: LD_INT 29
32113: ST_TO_ADDR
32114: GO 32136
32116: LD_INT 34
32118: DOUBLE
32119: EQUAL
32120: IFTRUE 32124
32122: GO 32135
32124: POP
// bc_type := b_siberite_mine ; end ;
32125: LD_ADDR_OWVAR 42
32129: PUSH
32130: LD_INT 30
32132: ST_TO_ADDR
32133: GO 32136
32135: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32136: LD_ADDR_VAR 0 8
32140: PUSH
32141: LD_VAR 0 5
32145: PPUSH
32146: LD_VAR 0 6
32150: PPUSH
32151: LD_VAR 0 3
32155: PPUSH
32156: CALL_OW 47
32160: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32161: LD_OWVAR 42
32165: PUSH
32166: LD_INT 32
32168: PUSH
32169: LD_INT 33
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: IN
32176: IFFALSE 32192
// PlaceWeaponTurret ( b , weapon ) ;
32178: LD_VAR 0 8
32182: PPUSH
32183: LD_VAR 0 4
32187: PPUSH
32188: CALL_OW 431
// end ;
32192: LD_VAR 0 7
32196: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32197: LD_INT 0
32199: PPUSH
32200: PPUSH
32201: PPUSH
32202: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32203: LD_ADDR_VAR 0 4
32207: PUSH
32208: LD_INT 22
32210: PUSH
32211: LD_OWVAR 2
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 2
32222: PUSH
32223: LD_INT 30
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 30
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: LIST
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PPUSH
32252: CALL_OW 69
32256: ST_TO_ADDR
// if not tmp then
32257: LD_VAR 0 4
32261: NOT
32262: IFFALSE 32266
// exit ;
32264: GO 32325
// for i in tmp do
32266: LD_ADDR_VAR 0 2
32270: PUSH
32271: LD_VAR 0 4
32275: PUSH
32276: FOR_IN
32277: IFFALSE 32323
// for j = 1 to 3 do
32279: LD_ADDR_VAR 0 3
32283: PUSH
32284: DOUBLE
32285: LD_INT 1
32287: DEC
32288: ST_TO_ADDR
32289: LD_INT 3
32291: PUSH
32292: FOR_TO
32293: IFFALSE 32319
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32295: LD_VAR 0 2
32299: PPUSH
32300: CALL_OW 274
32304: PPUSH
32305: LD_VAR 0 3
32309: PPUSH
32310: LD_INT 99999
32312: PPUSH
32313: CALL_OW 277
32317: GO 32292
32319: POP
32320: POP
32321: GO 32276
32323: POP
32324: POP
// end ;
32325: LD_VAR 0 1
32329: RET
// export function hHackSetLevel10 ; var i , j ; begin
32330: LD_INT 0
32332: PPUSH
32333: PPUSH
32334: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32335: LD_ADDR_VAR 0 2
32339: PUSH
32340: LD_INT 21
32342: PUSH
32343: LD_INT 1
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PPUSH
32350: CALL_OW 69
32354: PUSH
32355: FOR_IN
32356: IFFALSE 32408
// if IsSelected ( i ) then
32358: LD_VAR 0 2
32362: PPUSH
32363: CALL_OW 306
32367: IFFALSE 32406
// begin for j := 1 to 4 do
32369: LD_ADDR_VAR 0 3
32373: PUSH
32374: DOUBLE
32375: LD_INT 1
32377: DEC
32378: ST_TO_ADDR
32379: LD_INT 4
32381: PUSH
32382: FOR_TO
32383: IFFALSE 32404
// SetSkill ( i , j , 10 ) ;
32385: LD_VAR 0 2
32389: PPUSH
32390: LD_VAR 0 3
32394: PPUSH
32395: LD_INT 10
32397: PPUSH
32398: CALL_OW 237
32402: GO 32382
32404: POP
32405: POP
// end ;
32406: GO 32355
32408: POP
32409: POP
// end ;
32410: LD_VAR 0 1
32414: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32415: LD_INT 0
32417: PPUSH
32418: PPUSH
32419: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32420: LD_ADDR_VAR 0 2
32424: PUSH
32425: LD_INT 22
32427: PUSH
32428: LD_OWVAR 2
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 21
32439: PUSH
32440: LD_INT 1
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PPUSH
32451: CALL_OW 69
32455: PUSH
32456: FOR_IN
32457: IFFALSE 32498
// begin for j := 1 to 4 do
32459: LD_ADDR_VAR 0 3
32463: PUSH
32464: DOUBLE
32465: LD_INT 1
32467: DEC
32468: ST_TO_ADDR
32469: LD_INT 4
32471: PUSH
32472: FOR_TO
32473: IFFALSE 32494
// SetSkill ( i , j , 10 ) ;
32475: LD_VAR 0 2
32479: PPUSH
32480: LD_VAR 0 3
32484: PPUSH
32485: LD_INT 10
32487: PPUSH
32488: CALL_OW 237
32492: GO 32472
32494: POP
32495: POP
// end ;
32496: GO 32456
32498: POP
32499: POP
// end ;
32500: LD_VAR 0 1
32504: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32505: LD_INT 0
32507: PPUSH
// uc_side := your_side ;
32508: LD_ADDR_OWVAR 20
32512: PUSH
32513: LD_OWVAR 2
32517: ST_TO_ADDR
// uc_nation := nation ;
32518: LD_ADDR_OWVAR 21
32522: PUSH
32523: LD_VAR 0 1
32527: ST_TO_ADDR
// InitHc ;
32528: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32532: LD_INT 0
32534: PPUSH
32535: LD_VAR 0 2
32539: PPUSH
32540: LD_VAR 0 3
32544: PPUSH
32545: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32549: LD_VAR 0 4
32553: PPUSH
32554: LD_VAR 0 5
32558: PPUSH
32559: CALL_OW 428
32563: PUSH
32564: LD_INT 0
32566: EQUAL
32567: IFFALSE 32591
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32569: CALL_OW 44
32573: PPUSH
32574: LD_VAR 0 4
32578: PPUSH
32579: LD_VAR 0 5
32583: PPUSH
32584: LD_INT 1
32586: PPUSH
32587: CALL_OW 48
// end ;
32591: LD_VAR 0 6
32595: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32596: LD_INT 0
32598: PPUSH
32599: PPUSH
// uc_side := your_side ;
32600: LD_ADDR_OWVAR 20
32604: PUSH
32605: LD_OWVAR 2
32609: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32610: LD_VAR 0 1
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: LD_INT 3
32623: PUSH
32624: LD_INT 4
32626: PUSH
32627: LD_INT 5
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: IN
32637: IFFALSE 32649
// uc_nation := nation_american else
32639: LD_ADDR_OWVAR 21
32643: PUSH
32644: LD_INT 1
32646: ST_TO_ADDR
32647: GO 32692
// if chassis in [ 11 , 12 , 13 , 14 ] then
32649: LD_VAR 0 1
32653: PUSH
32654: LD_INT 11
32656: PUSH
32657: LD_INT 12
32659: PUSH
32660: LD_INT 13
32662: PUSH
32663: LD_INT 14
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: IN
32672: IFFALSE 32684
// uc_nation := nation_arabian else
32674: LD_ADDR_OWVAR 21
32678: PUSH
32679: LD_INT 2
32681: ST_TO_ADDR
32682: GO 32692
// uc_nation := nation_russian ;
32684: LD_ADDR_OWVAR 21
32688: PUSH
32689: LD_INT 3
32691: ST_TO_ADDR
// vc_chassis := chassis ;
32692: LD_ADDR_OWVAR 37
32696: PUSH
32697: LD_VAR 0 1
32701: ST_TO_ADDR
// vc_engine := engine ;
32702: LD_ADDR_OWVAR 39
32706: PUSH
32707: LD_VAR 0 2
32711: ST_TO_ADDR
// vc_control := control ;
32712: LD_ADDR_OWVAR 38
32716: PUSH
32717: LD_VAR 0 3
32721: ST_TO_ADDR
// vc_weapon := weapon ;
32722: LD_ADDR_OWVAR 40
32726: PUSH
32727: LD_VAR 0 4
32731: ST_TO_ADDR
// un := CreateVehicle ;
32732: LD_ADDR_VAR 0 8
32736: PUSH
32737: CALL_OW 45
32741: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32742: LD_VAR 0 8
32746: PPUSH
32747: LD_INT 0
32749: PPUSH
32750: LD_INT 5
32752: PPUSH
32753: CALL_OW 12
32757: PPUSH
32758: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32762: LD_VAR 0 8
32766: PPUSH
32767: LD_VAR 0 5
32771: PPUSH
32772: LD_VAR 0 6
32776: PPUSH
32777: LD_INT 1
32779: PPUSH
32780: CALL_OW 48
// end ;
32784: LD_VAR 0 7
32788: RET
// export hInvincible ; every 1 do
32789: GO 32791
32791: DISABLE
// hInvincible := [ ] ;
32792: LD_ADDR_EXP 101
32796: PUSH
32797: EMPTY
32798: ST_TO_ADDR
32799: END
// every 10 do var i ;
32800: GO 32802
32802: DISABLE
32803: LD_INT 0
32805: PPUSH
// begin enable ;
32806: ENABLE
// if not hInvincible then
32807: LD_EXP 101
32811: NOT
32812: IFFALSE 32816
// exit ;
32814: GO 32860
// for i in hInvincible do
32816: LD_ADDR_VAR 0 1
32820: PUSH
32821: LD_EXP 101
32825: PUSH
32826: FOR_IN
32827: IFFALSE 32858
// if GetLives ( i ) < 1000 then
32829: LD_VAR 0 1
32833: PPUSH
32834: CALL_OW 256
32838: PUSH
32839: LD_INT 1000
32841: LESS
32842: IFFALSE 32856
// SetLives ( i , 1000 ) ;
32844: LD_VAR 0 1
32848: PPUSH
32849: LD_INT 1000
32851: PPUSH
32852: CALL_OW 234
32856: GO 32826
32858: POP
32859: POP
// end ;
32860: PPOPN 1
32862: END
// export function hHackInvincible ; var i ; begin
32863: LD_INT 0
32865: PPUSH
32866: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32867: LD_ADDR_VAR 0 2
32871: PUSH
32872: LD_INT 2
32874: PUSH
32875: LD_INT 21
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 21
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: LIST
32899: PPUSH
32900: CALL_OW 69
32904: PUSH
32905: FOR_IN
32906: IFFALSE 32967
// if IsSelected ( i ) then
32908: LD_VAR 0 2
32912: PPUSH
32913: CALL_OW 306
32917: IFFALSE 32965
// begin if i in hInvincible then
32919: LD_VAR 0 2
32923: PUSH
32924: LD_EXP 101
32928: IN
32929: IFFALSE 32949
// hInvincible := hInvincible diff i else
32931: LD_ADDR_EXP 101
32935: PUSH
32936: LD_EXP 101
32940: PUSH
32941: LD_VAR 0 2
32945: DIFF
32946: ST_TO_ADDR
32947: GO 32965
// hInvincible := hInvincible union i ;
32949: LD_ADDR_EXP 101
32953: PUSH
32954: LD_EXP 101
32958: PUSH
32959: LD_VAR 0 2
32963: UNION
32964: ST_TO_ADDR
// end ;
32965: GO 32905
32967: POP
32968: POP
// end ;
32969: LD_VAR 0 1
32973: RET
// export function hHackInvisible ; var i , j ; begin
32974: LD_INT 0
32976: PPUSH
32977: PPUSH
32978: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32979: LD_ADDR_VAR 0 2
32983: PUSH
32984: LD_INT 21
32986: PUSH
32987: LD_INT 1
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PPUSH
32994: CALL_OW 69
32998: PUSH
32999: FOR_IN
33000: IFFALSE 33024
// if IsSelected ( i ) then
33002: LD_VAR 0 2
33006: PPUSH
33007: CALL_OW 306
33011: IFFALSE 33022
// ComForceInvisible ( i ) ;
33013: LD_VAR 0 2
33017: PPUSH
33018: CALL_OW 496
33022: GO 32999
33024: POP
33025: POP
// end ;
33026: LD_VAR 0 1
33030: RET
// export function hHackChangeYourSide ; begin
33031: LD_INT 0
33033: PPUSH
// if your_side = 8 then
33034: LD_OWVAR 2
33038: PUSH
33039: LD_INT 8
33041: EQUAL
33042: IFFALSE 33054
// your_side := 0 else
33044: LD_ADDR_OWVAR 2
33048: PUSH
33049: LD_INT 0
33051: ST_TO_ADDR
33052: GO 33068
// your_side := your_side + 1 ;
33054: LD_ADDR_OWVAR 2
33058: PUSH
33059: LD_OWVAR 2
33063: PUSH
33064: LD_INT 1
33066: PLUS
33067: ST_TO_ADDR
// end ;
33068: LD_VAR 0 1
33072: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33073: LD_INT 0
33075: PPUSH
33076: PPUSH
33077: PPUSH
// for i in all_units do
33078: LD_ADDR_VAR 0 2
33082: PUSH
33083: LD_OWVAR 3
33087: PUSH
33088: FOR_IN
33089: IFFALSE 33167
// if IsSelected ( i ) then
33091: LD_VAR 0 2
33095: PPUSH
33096: CALL_OW 306
33100: IFFALSE 33165
// begin j := GetSide ( i ) ;
33102: LD_ADDR_VAR 0 3
33106: PUSH
33107: LD_VAR 0 2
33111: PPUSH
33112: CALL_OW 255
33116: ST_TO_ADDR
// if j = 8 then
33117: LD_VAR 0 3
33121: PUSH
33122: LD_INT 8
33124: EQUAL
33125: IFFALSE 33137
// j := 0 else
33127: LD_ADDR_VAR 0 3
33131: PUSH
33132: LD_INT 0
33134: ST_TO_ADDR
33135: GO 33151
// j := j + 1 ;
33137: LD_ADDR_VAR 0 3
33141: PUSH
33142: LD_VAR 0 3
33146: PUSH
33147: LD_INT 1
33149: PLUS
33150: ST_TO_ADDR
// SetSide ( i , j ) ;
33151: LD_VAR 0 2
33155: PPUSH
33156: LD_VAR 0 3
33160: PPUSH
33161: CALL_OW 235
// end ;
33165: GO 33088
33167: POP
33168: POP
// end ;
33169: LD_VAR 0 1
33173: RET
// export function hHackFog ; begin
33174: LD_INT 0
33176: PPUSH
// FogOff ( true ) ;
33177: LD_INT 1
33179: PPUSH
33180: CALL_OW 344
// end ;
33184: LD_VAR 0 1
33188: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33189: LD_INT 0
33191: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33192: LD_VAR 0 1
33196: PPUSH
33197: LD_VAR 0 2
33201: PPUSH
33202: LD_VAR 0 3
33206: PPUSH
33207: LD_INT 1
33209: PPUSH
33210: LD_INT 1
33212: PPUSH
33213: CALL_OW 483
// CenterOnXY ( x , y ) ;
33217: LD_VAR 0 2
33221: PPUSH
33222: LD_VAR 0 3
33226: PPUSH
33227: CALL_OW 84
// end ;
33231: LD_VAR 0 4
33235: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33236: LD_INT 0
33238: PPUSH
33239: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33240: LD_VAR 0 1
33244: NOT
33245: PUSH
33246: LD_VAR 0 2
33250: PPUSH
33251: LD_VAR 0 3
33255: PPUSH
33256: CALL_OW 488
33260: NOT
33261: OR
33262: PUSH
33263: LD_VAR 0 1
33267: PPUSH
33268: CALL_OW 266
33272: PUSH
33273: LD_INT 3
33275: NONEQUAL
33276: PUSH
33277: LD_VAR 0 1
33281: PPUSH
33282: CALL_OW 247
33286: PUSH
33287: LD_INT 1
33289: EQUAL
33290: NOT
33291: AND
33292: OR
33293: IFFALSE 33297
// exit ;
33295: GO 33446
// if GetType ( factory ) = unit_human then
33297: LD_VAR 0 1
33301: PPUSH
33302: CALL_OW 247
33306: PUSH
33307: LD_INT 1
33309: EQUAL
33310: IFFALSE 33327
// factory := IsInUnit ( factory ) ;
33312: LD_ADDR_VAR 0 1
33316: PUSH
33317: LD_VAR 0 1
33321: PPUSH
33322: CALL_OW 310
33326: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33327: LD_VAR 0 1
33331: PPUSH
33332: CALL_OW 266
33336: PUSH
33337: LD_INT 3
33339: NONEQUAL
33340: IFFALSE 33344
// exit ;
33342: GO 33446
// if HexInfo ( x , y ) = factory then
33344: LD_VAR 0 2
33348: PPUSH
33349: LD_VAR 0 3
33353: PPUSH
33354: CALL_OW 428
33358: PUSH
33359: LD_VAR 0 1
33363: EQUAL
33364: IFFALSE 33391
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33366: LD_ADDR_EXP 102
33370: PUSH
33371: LD_EXP 102
33375: PPUSH
33376: LD_VAR 0 1
33380: PPUSH
33381: LD_INT 0
33383: PPUSH
33384: CALL_OW 1
33388: ST_TO_ADDR
33389: GO 33442
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33391: LD_ADDR_EXP 102
33395: PUSH
33396: LD_EXP 102
33400: PPUSH
33401: LD_VAR 0 1
33405: PPUSH
33406: LD_VAR 0 1
33410: PPUSH
33411: CALL_OW 255
33415: PUSH
33416: LD_VAR 0 1
33420: PUSH
33421: LD_VAR 0 2
33425: PUSH
33426: LD_VAR 0 3
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: PPUSH
33437: CALL_OW 1
33441: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33442: CALL 33451 0 0
// end ;
33446: LD_VAR 0 4
33450: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33451: LD_INT 0
33453: PPUSH
33454: PPUSH
33455: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33456: LD_STRING resetFactoryWaypoint();
33458: PPUSH
33459: CALL_OW 559
// if factoryWaypoints then
33463: LD_EXP 102
33467: IFFALSE 33593
// begin list := PrepareArray ( factoryWaypoints ) ;
33469: LD_ADDR_VAR 0 3
33473: PUSH
33474: LD_EXP 102
33478: PPUSH
33479: CALL 80735 0 1
33483: ST_TO_ADDR
// for i := 1 to list do
33484: LD_ADDR_VAR 0 2
33488: PUSH
33489: DOUBLE
33490: LD_INT 1
33492: DEC
33493: ST_TO_ADDR
33494: LD_VAR 0 3
33498: PUSH
33499: FOR_TO
33500: IFFALSE 33591
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33502: LD_STRING setFactoryWaypointXY(
33504: PUSH
33505: LD_VAR 0 3
33509: PUSH
33510: LD_VAR 0 2
33514: ARRAY
33515: PUSH
33516: LD_INT 1
33518: ARRAY
33519: STR
33520: PUSH
33521: LD_STRING ,
33523: STR
33524: PUSH
33525: LD_VAR 0 3
33529: PUSH
33530: LD_VAR 0 2
33534: ARRAY
33535: PUSH
33536: LD_INT 2
33538: ARRAY
33539: STR
33540: PUSH
33541: LD_STRING ,
33543: STR
33544: PUSH
33545: LD_VAR 0 3
33549: PUSH
33550: LD_VAR 0 2
33554: ARRAY
33555: PUSH
33556: LD_INT 3
33558: ARRAY
33559: STR
33560: PUSH
33561: LD_STRING ,
33563: STR
33564: PUSH
33565: LD_VAR 0 3
33569: PUSH
33570: LD_VAR 0 2
33574: ARRAY
33575: PUSH
33576: LD_INT 4
33578: ARRAY
33579: STR
33580: PUSH
33581: LD_STRING )
33583: STR
33584: PPUSH
33585: CALL_OW 559
33589: GO 33499
33591: POP
33592: POP
// end ; end ;
33593: LD_VAR 0 1
33597: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33598: LD_INT 0
33600: PPUSH
// if HexInfo ( x , y ) = warehouse then
33601: LD_VAR 0 2
33605: PPUSH
33606: LD_VAR 0 3
33610: PPUSH
33611: CALL_OW 428
33615: PUSH
33616: LD_VAR 0 1
33620: EQUAL
33621: IFFALSE 33648
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33623: LD_ADDR_EXP 103
33627: PUSH
33628: LD_EXP 103
33632: PPUSH
33633: LD_VAR 0 1
33637: PPUSH
33638: LD_INT 0
33640: PPUSH
33641: CALL_OW 1
33645: ST_TO_ADDR
33646: GO 33699
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33648: LD_ADDR_EXP 103
33652: PUSH
33653: LD_EXP 103
33657: PPUSH
33658: LD_VAR 0 1
33662: PPUSH
33663: LD_VAR 0 1
33667: PPUSH
33668: CALL_OW 255
33672: PUSH
33673: LD_VAR 0 1
33677: PUSH
33678: LD_VAR 0 2
33682: PUSH
33683: LD_VAR 0 3
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: PPUSH
33694: CALL_OW 1
33698: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33699: CALL 33708 0 0
// end ;
33703: LD_VAR 0 4
33707: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33708: LD_INT 0
33710: PPUSH
33711: PPUSH
33712: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33713: LD_STRING resetWarehouseGatheringPoints();
33715: PPUSH
33716: CALL_OW 559
// if warehouseGatheringPoints then
33720: LD_EXP 103
33724: IFFALSE 33850
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33726: LD_ADDR_VAR 0 3
33730: PUSH
33731: LD_EXP 103
33735: PPUSH
33736: CALL 80735 0 1
33740: ST_TO_ADDR
// for i := 1 to list do
33741: LD_ADDR_VAR 0 2
33745: PUSH
33746: DOUBLE
33747: LD_INT 1
33749: DEC
33750: ST_TO_ADDR
33751: LD_VAR 0 3
33755: PUSH
33756: FOR_TO
33757: IFFALSE 33848
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33759: LD_STRING setWarehouseGatheringPointXY(
33761: PUSH
33762: LD_VAR 0 3
33766: PUSH
33767: LD_VAR 0 2
33771: ARRAY
33772: PUSH
33773: LD_INT 1
33775: ARRAY
33776: STR
33777: PUSH
33778: LD_STRING ,
33780: STR
33781: PUSH
33782: LD_VAR 0 3
33786: PUSH
33787: LD_VAR 0 2
33791: ARRAY
33792: PUSH
33793: LD_INT 2
33795: ARRAY
33796: STR
33797: PUSH
33798: LD_STRING ,
33800: STR
33801: PUSH
33802: LD_VAR 0 3
33806: PUSH
33807: LD_VAR 0 2
33811: ARRAY
33812: PUSH
33813: LD_INT 3
33815: ARRAY
33816: STR
33817: PUSH
33818: LD_STRING ,
33820: STR
33821: PUSH
33822: LD_VAR 0 3
33826: PUSH
33827: LD_VAR 0 2
33831: ARRAY
33832: PUSH
33833: LD_INT 4
33835: ARRAY
33836: STR
33837: PUSH
33838: LD_STRING )
33840: STR
33841: PPUSH
33842: CALL_OW 559
33846: GO 33756
33848: POP
33849: POP
// end ; end ;
33850: LD_VAR 0 1
33854: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33855: LD_EXP 103
33859: IFFALSE 34544
33861: GO 33863
33863: DISABLE
33864: LD_INT 0
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
33871: PPUSH
33872: PPUSH
33873: PPUSH
33874: PPUSH
// begin enable ;
33875: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33876: LD_ADDR_VAR 0 3
33880: PUSH
33881: LD_EXP 103
33885: PPUSH
33886: CALL 80735 0 1
33890: ST_TO_ADDR
// if not list then
33891: LD_VAR 0 3
33895: NOT
33896: IFFALSE 33900
// exit ;
33898: GO 34544
// for i := 1 to list do
33900: LD_ADDR_VAR 0 1
33904: PUSH
33905: DOUBLE
33906: LD_INT 1
33908: DEC
33909: ST_TO_ADDR
33910: LD_VAR 0 3
33914: PUSH
33915: FOR_TO
33916: IFFALSE 34542
// begin depot := list [ i ] [ 2 ] ;
33918: LD_ADDR_VAR 0 8
33922: PUSH
33923: LD_VAR 0 3
33927: PUSH
33928: LD_VAR 0 1
33932: ARRAY
33933: PUSH
33934: LD_INT 2
33936: ARRAY
33937: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33938: LD_ADDR_VAR 0 5
33942: PUSH
33943: LD_VAR 0 3
33947: PUSH
33948: LD_VAR 0 1
33952: ARRAY
33953: PUSH
33954: LD_INT 1
33956: ARRAY
33957: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33958: LD_VAR 0 8
33962: PPUSH
33963: CALL_OW 301
33967: PUSH
33968: LD_VAR 0 5
33972: PUSH
33973: LD_VAR 0 8
33977: PPUSH
33978: CALL_OW 255
33982: NONEQUAL
33983: OR
33984: IFFALSE 34013
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33986: LD_ADDR_EXP 103
33990: PUSH
33991: LD_EXP 103
33995: PPUSH
33996: LD_VAR 0 8
34000: PPUSH
34001: LD_INT 0
34003: PPUSH
34004: CALL_OW 1
34008: ST_TO_ADDR
// exit ;
34009: POP
34010: POP
34011: GO 34544
// end ; x := list [ i ] [ 3 ] ;
34013: LD_ADDR_VAR 0 6
34017: PUSH
34018: LD_VAR 0 3
34022: PUSH
34023: LD_VAR 0 1
34027: ARRAY
34028: PUSH
34029: LD_INT 3
34031: ARRAY
34032: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34033: LD_ADDR_VAR 0 7
34037: PUSH
34038: LD_VAR 0 3
34042: PUSH
34043: LD_VAR 0 1
34047: ARRAY
34048: PUSH
34049: LD_INT 4
34051: ARRAY
34052: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34053: LD_ADDR_VAR 0 9
34057: PUSH
34058: LD_VAR 0 6
34062: PPUSH
34063: LD_VAR 0 7
34067: PPUSH
34068: LD_INT 16
34070: PPUSH
34071: CALL 79323 0 3
34075: ST_TO_ADDR
// if not cratesNearbyPoint then
34076: LD_VAR 0 9
34080: NOT
34081: IFFALSE 34087
// exit ;
34083: POP
34084: POP
34085: GO 34544
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34087: LD_ADDR_VAR 0 4
34091: PUSH
34092: LD_INT 22
34094: PUSH
34095: LD_VAR 0 5
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 3
34106: PUSH
34107: LD_INT 60
34109: PUSH
34110: EMPTY
34111: LIST
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 91
34119: PUSH
34120: LD_VAR 0 8
34124: PUSH
34125: LD_INT 6
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 2
34135: PUSH
34136: LD_INT 25
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 25
34148: PUSH
34149: LD_INT 16
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: LIST
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: PPUSH
34167: CALL_OW 69
34171: PUSH
34172: LD_VAR 0 8
34176: PPUSH
34177: CALL_OW 313
34181: PPUSH
34182: LD_INT 3
34184: PUSH
34185: LD_INT 60
34187: PUSH
34188: EMPTY
34189: LIST
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 2
34197: PUSH
34198: LD_INT 25
34200: PUSH
34201: LD_INT 2
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 25
34210: PUSH
34211: LD_INT 16
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PPUSH
34227: CALL_OW 72
34231: UNION
34232: ST_TO_ADDR
// if tmp then
34233: LD_VAR 0 4
34237: IFFALSE 34317
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34239: LD_ADDR_VAR 0 4
34243: PUSH
34244: LD_VAR 0 4
34248: PPUSH
34249: LD_INT 3
34251: PPUSH
34252: CALL 77292 0 2
34256: ST_TO_ADDR
// for j in tmp do
34257: LD_ADDR_VAR 0 2
34261: PUSH
34262: LD_VAR 0 4
34266: PUSH
34267: FOR_IN
34268: IFFALSE 34311
// begin if IsInUnit ( j ) then
34270: LD_VAR 0 2
34274: PPUSH
34275: CALL_OW 310
34279: IFFALSE 34290
// ComExit ( j ) ;
34281: LD_VAR 0 2
34285: PPUSH
34286: CALL 77375 0 1
// AddComCollect ( j , x , y ) ;
34290: LD_VAR 0 2
34294: PPUSH
34295: LD_VAR 0 6
34299: PPUSH
34300: LD_VAR 0 7
34304: PPUSH
34305: CALL_OW 177
// end ;
34309: GO 34267
34311: POP
34312: POP
// exit ;
34313: POP
34314: POP
34315: GO 34544
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34317: LD_ADDR_VAR 0 4
34321: PUSH
34322: LD_INT 22
34324: PUSH
34325: LD_VAR 0 5
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 91
34336: PUSH
34337: LD_VAR 0 8
34341: PUSH
34342: LD_INT 8
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 2
34352: PUSH
34353: LD_INT 34
34355: PUSH
34356: LD_INT 12
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 34
34365: PUSH
34366: LD_INT 51
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 34
34375: PUSH
34376: LD_INT 32
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 34
34385: PUSH
34386: LD_INT 89
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: LIST
34404: PPUSH
34405: CALL_OW 69
34409: ST_TO_ADDR
// if tmp then
34410: LD_VAR 0 4
34414: IFFALSE 34540
// begin for j in tmp do
34416: LD_ADDR_VAR 0 2
34420: PUSH
34421: LD_VAR 0 4
34425: PUSH
34426: FOR_IN
34427: IFFALSE 34538
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34429: LD_VAR 0 2
34433: PPUSH
34434: CALL_OW 262
34438: PUSH
34439: LD_INT 3
34441: EQUAL
34442: PUSH
34443: LD_VAR 0 2
34447: PPUSH
34448: CALL_OW 261
34452: PUSH
34453: LD_INT 20
34455: GREATER
34456: OR
34457: PUSH
34458: LD_VAR 0 2
34462: PPUSH
34463: CALL_OW 314
34467: NOT
34468: AND
34469: PUSH
34470: LD_VAR 0 2
34474: PPUSH
34475: CALL_OW 263
34479: PUSH
34480: LD_INT 1
34482: NONEQUAL
34483: PUSH
34484: LD_VAR 0 2
34488: PPUSH
34489: CALL_OW 311
34493: OR
34494: AND
34495: IFFALSE 34536
// begin ComCollect ( j , x , y ) ;
34497: LD_VAR 0 2
34501: PPUSH
34502: LD_VAR 0 6
34506: PPUSH
34507: LD_VAR 0 7
34511: PPUSH
34512: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34516: LD_VAR 0 2
34520: PPUSH
34521: LD_VAR 0 8
34525: PPUSH
34526: CALL_OW 172
// exit ;
34530: POP
34531: POP
34532: POP
34533: POP
34534: GO 34544
// end ;
34536: GO 34426
34538: POP
34539: POP
// end ; end ;
34540: GO 33915
34542: POP
34543: POP
// end ; end_of_file
34544: PPOPN 9
34546: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34547: LD_INT 0
34549: PPUSH
34550: PPUSH
34551: PPUSH
34552: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34553: LD_VAR 0 1
34557: PPUSH
34558: CALL_OW 264
34562: PUSH
34563: LD_INT 91
34565: EQUAL
34566: IFFALSE 34638
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34568: LD_INT 68
34570: PPUSH
34571: LD_VAR 0 1
34575: PPUSH
34576: CALL_OW 255
34580: PPUSH
34581: CALL_OW 321
34585: PUSH
34586: LD_INT 2
34588: EQUAL
34589: IFFALSE 34601
// eff := 70 else
34591: LD_ADDR_VAR 0 4
34595: PUSH
34596: LD_INT 70
34598: ST_TO_ADDR
34599: GO 34609
// eff := 30 ;
34601: LD_ADDR_VAR 0 4
34605: PUSH
34606: LD_INT 30
34608: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34609: LD_VAR 0 1
34613: PPUSH
34614: CALL_OW 250
34618: PPUSH
34619: LD_VAR 0 1
34623: PPUSH
34624: CALL_OW 251
34628: PPUSH
34629: LD_VAR 0 4
34633: PPUSH
34634: CALL_OW 495
// end ; end ;
34638: LD_VAR 0 2
34642: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34643: LD_INT 0
34645: PPUSH
// end ;
34646: LD_VAR 0 4
34650: RET
// export function SOS_Command ( cmd ) ; begin
34651: LD_INT 0
34653: PPUSH
// end ;
34654: LD_VAR 0 2
34658: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34659: LD_INT 0
34661: PPUSH
// end ;
34662: LD_VAR 0 6
34666: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34667: LD_INT 0
34669: PPUSH
34670: PPUSH
// if not vehicle or not factory then
34671: LD_VAR 0 1
34675: NOT
34676: PUSH
34677: LD_VAR 0 2
34681: NOT
34682: OR
34683: IFFALSE 34687
// exit ;
34685: GO 34918
// if factoryWaypoints >= factory then
34687: LD_EXP 102
34691: PUSH
34692: LD_VAR 0 2
34696: GREATEREQUAL
34697: IFFALSE 34918
// if factoryWaypoints [ factory ] then
34699: LD_EXP 102
34703: PUSH
34704: LD_VAR 0 2
34708: ARRAY
34709: IFFALSE 34918
// begin if GetControl ( vehicle ) = control_manual then
34711: LD_VAR 0 1
34715: PPUSH
34716: CALL_OW 263
34720: PUSH
34721: LD_INT 1
34723: EQUAL
34724: IFFALSE 34805
// begin driver := IsDrivenBy ( vehicle ) ;
34726: LD_ADDR_VAR 0 4
34730: PUSH
34731: LD_VAR 0 1
34735: PPUSH
34736: CALL_OW 311
34740: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34741: LD_VAR 0 4
34745: PPUSH
34746: LD_EXP 102
34750: PUSH
34751: LD_VAR 0 2
34755: ARRAY
34756: PUSH
34757: LD_INT 3
34759: ARRAY
34760: PPUSH
34761: LD_EXP 102
34765: PUSH
34766: LD_VAR 0 2
34770: ARRAY
34771: PUSH
34772: LD_INT 4
34774: ARRAY
34775: PPUSH
34776: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34780: LD_VAR 0 4
34784: PPUSH
34785: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34789: LD_VAR 0 4
34793: PPUSH
34794: LD_VAR 0 2
34798: PPUSH
34799: CALL_OW 180
// end else
34803: GO 34918
// if GetControl ( vehicle ) = control_remote then
34805: LD_VAR 0 1
34809: PPUSH
34810: CALL_OW 263
34814: PUSH
34815: LD_INT 2
34817: EQUAL
34818: IFFALSE 34879
// begin wait ( 0 0$2 ) ;
34820: LD_INT 70
34822: PPUSH
34823: CALL_OW 67
// if Connect ( vehicle ) then
34827: LD_VAR 0 1
34831: PPUSH
34832: CALL 47583 0 1
34836: IFFALSE 34877
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34838: LD_VAR 0 1
34842: PPUSH
34843: LD_EXP 102
34847: PUSH
34848: LD_VAR 0 2
34852: ARRAY
34853: PUSH
34854: LD_INT 3
34856: ARRAY
34857: PPUSH
34858: LD_EXP 102
34862: PUSH
34863: LD_VAR 0 2
34867: ARRAY
34868: PUSH
34869: LD_INT 4
34871: ARRAY
34872: PPUSH
34873: CALL_OW 171
// end else
34877: GO 34918
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34879: LD_VAR 0 1
34883: PPUSH
34884: LD_EXP 102
34888: PUSH
34889: LD_VAR 0 2
34893: ARRAY
34894: PUSH
34895: LD_INT 3
34897: ARRAY
34898: PPUSH
34899: LD_EXP 102
34903: PUSH
34904: LD_VAR 0 2
34908: ARRAY
34909: PUSH
34910: LD_INT 4
34912: ARRAY
34913: PPUSH
34914: CALL_OW 171
// end ; end ;
34918: LD_VAR 0 3
34922: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34923: LD_INT 0
34925: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34926: LD_VAR 0 1
34930: PUSH
34931: LD_INT 250
34933: EQUAL
34934: PUSH
34935: LD_VAR 0 2
34939: PPUSH
34940: CALL_OW 264
34944: PUSH
34945: LD_INT 81
34947: EQUAL
34948: AND
34949: IFFALSE 34970
// MinerPlaceMine ( unit , x , y ) ;
34951: LD_VAR 0 2
34955: PPUSH
34956: LD_VAR 0 4
34960: PPUSH
34961: LD_VAR 0 5
34965: PPUSH
34966: CALL 37794 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34970: LD_VAR 0 1
34974: PUSH
34975: LD_INT 251
34977: EQUAL
34978: PUSH
34979: LD_VAR 0 2
34983: PPUSH
34984: CALL_OW 264
34988: PUSH
34989: LD_INT 81
34991: EQUAL
34992: AND
34993: IFFALSE 35014
// MinerDetonateMine ( unit , x , y ) ;
34995: LD_VAR 0 2
34999: PPUSH
35000: LD_VAR 0 4
35004: PPUSH
35005: LD_VAR 0 5
35009: PPUSH
35010: CALL 38069 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35014: LD_VAR 0 1
35018: PUSH
35019: LD_INT 252
35021: EQUAL
35022: PUSH
35023: LD_VAR 0 2
35027: PPUSH
35028: CALL_OW 264
35032: PUSH
35033: LD_INT 81
35035: EQUAL
35036: AND
35037: IFFALSE 35058
// MinerCreateMinefield ( unit , x , y ) ;
35039: LD_VAR 0 2
35043: PPUSH
35044: LD_VAR 0 4
35048: PPUSH
35049: LD_VAR 0 5
35053: PPUSH
35054: CALL 38486 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35058: LD_VAR 0 1
35062: PUSH
35063: LD_INT 253
35065: EQUAL
35066: PUSH
35067: LD_VAR 0 2
35071: PPUSH
35072: CALL_OW 257
35076: PUSH
35077: LD_INT 5
35079: EQUAL
35080: AND
35081: IFFALSE 35102
// ComBinocular ( unit , x , y ) ;
35083: LD_VAR 0 2
35087: PPUSH
35088: LD_VAR 0 4
35092: PPUSH
35093: LD_VAR 0 5
35097: PPUSH
35098: CALL 38855 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35102: LD_VAR 0 1
35106: PUSH
35107: LD_INT 254
35109: EQUAL
35110: PUSH
35111: LD_VAR 0 2
35115: PPUSH
35116: CALL_OW 264
35120: PUSH
35121: LD_INT 99
35123: EQUAL
35124: AND
35125: PUSH
35126: LD_VAR 0 3
35130: PPUSH
35131: CALL_OW 263
35135: PUSH
35136: LD_INT 3
35138: EQUAL
35139: AND
35140: IFFALSE 35156
// HackDestroyVehicle ( unit , selectedUnit ) ;
35142: LD_VAR 0 2
35146: PPUSH
35147: LD_VAR 0 3
35151: PPUSH
35152: CALL 37158 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35156: LD_VAR 0 1
35160: PUSH
35161: LD_INT 255
35163: EQUAL
35164: PUSH
35165: LD_VAR 0 2
35169: PPUSH
35170: CALL_OW 264
35174: PUSH
35175: LD_INT 14
35177: PUSH
35178: LD_INT 53
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: IN
35185: AND
35186: PUSH
35187: LD_VAR 0 4
35191: PPUSH
35192: LD_VAR 0 5
35196: PPUSH
35197: CALL_OW 488
35201: AND
35202: IFFALSE 35226
// CutTreeXYR ( unit , x , y , 12 ) ;
35204: LD_VAR 0 2
35208: PPUSH
35209: LD_VAR 0 4
35213: PPUSH
35214: LD_VAR 0 5
35218: PPUSH
35219: LD_INT 12
35221: PPUSH
35222: CALL 35321 0 4
// if cmd = 256 then
35226: LD_VAR 0 1
35230: PUSH
35231: LD_INT 256
35233: EQUAL
35234: IFFALSE 35255
// SetFactoryWaypoint ( unit , x , y ) ;
35236: LD_VAR 0 2
35240: PPUSH
35241: LD_VAR 0 4
35245: PPUSH
35246: LD_VAR 0 5
35250: PPUSH
35251: CALL 33236 0 3
// if cmd = 257 then
35255: LD_VAR 0 1
35259: PUSH
35260: LD_INT 257
35262: EQUAL
35263: IFFALSE 35284
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35265: LD_VAR 0 2
35269: PPUSH
35270: LD_VAR 0 4
35274: PPUSH
35275: LD_VAR 0 5
35279: PPUSH
35280: CALL 33598 0 3
// if cmd = 258 then
35284: LD_VAR 0 1
35288: PUSH
35289: LD_INT 258
35291: EQUAL
35292: IFFALSE 35316
// BurnTreeXYR ( unit , x , y , 8 ) ;
35294: LD_VAR 0 2
35298: PPUSH
35299: LD_VAR 0 4
35303: PPUSH
35304: LD_VAR 0 5
35308: PPUSH
35309: LD_INT 8
35311: PPUSH
35312: CALL 35715 0 4
// end ;
35316: LD_VAR 0 6
35320: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35321: LD_INT 0
35323: PPUSH
35324: PPUSH
35325: PPUSH
35326: PPUSH
35327: PPUSH
35328: PPUSH
35329: PPUSH
35330: PPUSH
35331: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
35332: LD_VAR 0 1
35336: PPUSH
35337: CALL_OW 302
35341: NOT
35342: PUSH
35343: LD_VAR 0 2
35347: PPUSH
35348: LD_VAR 0 3
35352: PPUSH
35353: CALL_OW 488
35357: NOT
35358: OR
35359: PUSH
35360: LD_VAR 0 4
35364: NOT
35365: OR
35366: IFFALSE 35370
// exit ;
35368: GO 35710
// list := [ ] ;
35370: LD_ADDR_VAR 0 13
35374: PUSH
35375: EMPTY
35376: ST_TO_ADDR
// if x - r < 0 then
35377: LD_VAR 0 2
35381: PUSH
35382: LD_VAR 0 4
35386: MINUS
35387: PUSH
35388: LD_INT 0
35390: LESS
35391: IFFALSE 35403
// min_x := 0 else
35393: LD_ADDR_VAR 0 7
35397: PUSH
35398: LD_INT 0
35400: ST_TO_ADDR
35401: GO 35419
// min_x := x - r ;
35403: LD_ADDR_VAR 0 7
35407: PUSH
35408: LD_VAR 0 2
35412: PUSH
35413: LD_VAR 0 4
35417: MINUS
35418: ST_TO_ADDR
// if y - r < 0 then
35419: LD_VAR 0 3
35423: PUSH
35424: LD_VAR 0 4
35428: MINUS
35429: PUSH
35430: LD_INT 0
35432: LESS
35433: IFFALSE 35445
// min_y := 0 else
35435: LD_ADDR_VAR 0 8
35439: PUSH
35440: LD_INT 0
35442: ST_TO_ADDR
35443: GO 35461
// min_y := y - r ;
35445: LD_ADDR_VAR 0 8
35449: PUSH
35450: LD_VAR 0 3
35454: PUSH
35455: LD_VAR 0 4
35459: MINUS
35460: ST_TO_ADDR
// max_x := x + r ;
35461: LD_ADDR_VAR 0 9
35465: PUSH
35466: LD_VAR 0 2
35470: PUSH
35471: LD_VAR 0 4
35475: PLUS
35476: ST_TO_ADDR
// max_y := y + r ;
35477: LD_ADDR_VAR 0 10
35481: PUSH
35482: LD_VAR 0 3
35486: PUSH
35487: LD_VAR 0 4
35491: PLUS
35492: ST_TO_ADDR
// for _x = min_x to max_x do
35493: LD_ADDR_VAR 0 11
35497: PUSH
35498: DOUBLE
35499: LD_VAR 0 7
35503: DEC
35504: ST_TO_ADDR
35505: LD_VAR 0 9
35509: PUSH
35510: FOR_TO
35511: IFFALSE 35628
// for _y = min_y to max_y do
35513: LD_ADDR_VAR 0 12
35517: PUSH
35518: DOUBLE
35519: LD_VAR 0 8
35523: DEC
35524: ST_TO_ADDR
35525: LD_VAR 0 10
35529: PUSH
35530: FOR_TO
35531: IFFALSE 35624
// begin if not ValidHex ( _x , _y ) then
35533: LD_VAR 0 11
35537: PPUSH
35538: LD_VAR 0 12
35542: PPUSH
35543: CALL_OW 488
35547: NOT
35548: IFFALSE 35552
// continue ;
35550: GO 35530
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35552: LD_VAR 0 11
35556: PPUSH
35557: LD_VAR 0 12
35561: PPUSH
35562: CALL_OW 351
35566: PUSH
35567: LD_VAR 0 11
35571: PPUSH
35572: LD_VAR 0 12
35576: PPUSH
35577: CALL_OW 554
35581: AND
35582: IFFALSE 35622
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35584: LD_ADDR_VAR 0 13
35588: PUSH
35589: LD_VAR 0 13
35593: PPUSH
35594: LD_VAR 0 13
35598: PUSH
35599: LD_INT 1
35601: PLUS
35602: PPUSH
35603: LD_VAR 0 11
35607: PUSH
35608: LD_VAR 0 12
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PPUSH
35617: CALL_OW 2
35621: ST_TO_ADDR
// end ;
35622: GO 35530
35624: POP
35625: POP
35626: GO 35510
35628: POP
35629: POP
// if not list then
35630: LD_VAR 0 13
35634: NOT
35635: IFFALSE 35639
// exit ;
35637: GO 35710
// for i in list do
35639: LD_ADDR_VAR 0 6
35643: PUSH
35644: LD_VAR 0 13
35648: PUSH
35649: FOR_IN
35650: IFFALSE 35708
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35652: LD_VAR 0 1
35656: PPUSH
35657: LD_STRING M
35659: PUSH
35660: LD_VAR 0 6
35664: PUSH
35665: LD_INT 1
35667: ARRAY
35668: PUSH
35669: LD_VAR 0 6
35673: PUSH
35674: LD_INT 2
35676: ARRAY
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: PUSH
35699: EMPTY
35700: LIST
35701: PPUSH
35702: CALL_OW 447
35706: GO 35649
35708: POP
35709: POP
// end ;
35710: LD_VAR 0 5
35714: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35715: LD_INT 0
35717: PPUSH
35718: PPUSH
35719: PPUSH
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
35724: PPUSH
35725: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
35726: LD_VAR 0 1
35730: PPUSH
35731: CALL_OW 302
35735: NOT
35736: PUSH
35737: LD_VAR 0 2
35741: PPUSH
35742: LD_VAR 0 3
35746: PPUSH
35747: CALL_OW 488
35751: NOT
35752: OR
35753: PUSH
35754: LD_VAR 0 4
35758: NOT
35759: OR
35760: IFFALSE 35764
// exit ;
35762: GO 36112
// list := [ ] ;
35764: LD_ADDR_VAR 0 13
35768: PUSH
35769: EMPTY
35770: ST_TO_ADDR
// if x - r < 0 then
35771: LD_VAR 0 2
35775: PUSH
35776: LD_VAR 0 4
35780: MINUS
35781: PUSH
35782: LD_INT 0
35784: LESS
35785: IFFALSE 35797
// min_x := 0 else
35787: LD_ADDR_VAR 0 7
35791: PUSH
35792: LD_INT 0
35794: ST_TO_ADDR
35795: GO 35813
// min_x := x - r ;
35797: LD_ADDR_VAR 0 7
35801: PUSH
35802: LD_VAR 0 2
35806: PUSH
35807: LD_VAR 0 4
35811: MINUS
35812: ST_TO_ADDR
// if y - r < 0 then
35813: LD_VAR 0 3
35817: PUSH
35818: LD_VAR 0 4
35822: MINUS
35823: PUSH
35824: LD_INT 0
35826: LESS
35827: IFFALSE 35839
// min_y := 0 else
35829: LD_ADDR_VAR 0 8
35833: PUSH
35834: LD_INT 0
35836: ST_TO_ADDR
35837: GO 35855
// min_y := y - r ;
35839: LD_ADDR_VAR 0 8
35843: PUSH
35844: LD_VAR 0 3
35848: PUSH
35849: LD_VAR 0 4
35853: MINUS
35854: ST_TO_ADDR
// max_x := x + r ;
35855: LD_ADDR_VAR 0 9
35859: PUSH
35860: LD_VAR 0 2
35864: PUSH
35865: LD_VAR 0 4
35869: PLUS
35870: ST_TO_ADDR
// max_y := y + r ;
35871: LD_ADDR_VAR 0 10
35875: PUSH
35876: LD_VAR 0 3
35880: PUSH
35881: LD_VAR 0 4
35885: PLUS
35886: ST_TO_ADDR
// for _x = min_x to max_x do
35887: LD_ADDR_VAR 0 11
35891: PUSH
35892: DOUBLE
35893: LD_VAR 0 7
35897: DEC
35898: ST_TO_ADDR
35899: LD_VAR 0 9
35903: PUSH
35904: FOR_TO
35905: IFFALSE 36022
// for _y = min_y to max_y do
35907: LD_ADDR_VAR 0 12
35911: PUSH
35912: DOUBLE
35913: LD_VAR 0 8
35917: DEC
35918: ST_TO_ADDR
35919: LD_VAR 0 10
35923: PUSH
35924: FOR_TO
35925: IFFALSE 36018
// begin if not ValidHex ( _x , _y ) then
35927: LD_VAR 0 11
35931: PPUSH
35932: LD_VAR 0 12
35936: PPUSH
35937: CALL_OW 488
35941: NOT
35942: IFFALSE 35946
// continue ;
35944: GO 35924
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35946: LD_VAR 0 11
35950: PPUSH
35951: LD_VAR 0 12
35955: PPUSH
35956: CALL_OW 351
35960: PUSH
35961: LD_VAR 0 11
35965: PPUSH
35966: LD_VAR 0 12
35970: PPUSH
35971: CALL_OW 554
35975: AND
35976: IFFALSE 36016
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35978: LD_ADDR_VAR 0 13
35982: PUSH
35983: LD_VAR 0 13
35987: PPUSH
35988: LD_VAR 0 13
35992: PUSH
35993: LD_INT 1
35995: PLUS
35996: PPUSH
35997: LD_VAR 0 11
36001: PUSH
36002: LD_VAR 0 12
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PPUSH
36011: CALL_OW 2
36015: ST_TO_ADDR
// end ;
36016: GO 35924
36018: POP
36019: POP
36020: GO 35904
36022: POP
36023: POP
// if not list then
36024: LD_VAR 0 13
36028: NOT
36029: IFFALSE 36033
// exit ;
36031: GO 36112
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36033: LD_ADDR_VAR 0 13
36037: PUSH
36038: LD_VAR 0 1
36042: PPUSH
36043: LD_VAR 0 13
36047: PPUSH
36048: LD_INT 1
36050: PPUSH
36051: LD_INT 1
36053: PPUSH
36054: CALL 44725 0 4
36058: ST_TO_ADDR
// ComStop ( flame ) ;
36059: LD_VAR 0 1
36063: PPUSH
36064: CALL_OW 141
// for i in list do
36068: LD_ADDR_VAR 0 6
36072: PUSH
36073: LD_VAR 0 13
36077: PUSH
36078: FOR_IN
36079: IFFALSE 36110
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36081: LD_VAR 0 1
36085: PPUSH
36086: LD_VAR 0 6
36090: PUSH
36091: LD_INT 1
36093: ARRAY
36094: PPUSH
36095: LD_VAR 0 6
36099: PUSH
36100: LD_INT 2
36102: ARRAY
36103: PPUSH
36104: CALL_OW 176
36108: GO 36078
36110: POP
36111: POP
// end ;
36112: LD_VAR 0 5
36116: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36117: LD_EXP 105
36121: NOT
36122: IFFALSE 36172
36124: GO 36126
36126: DISABLE
// begin initHack := true ;
36127: LD_ADDR_EXP 105
36131: PUSH
36132: LD_INT 1
36134: ST_TO_ADDR
// hackTanks := [ ] ;
36135: LD_ADDR_EXP 106
36139: PUSH
36140: EMPTY
36141: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36142: LD_ADDR_EXP 107
36146: PUSH
36147: EMPTY
36148: ST_TO_ADDR
// hackLimit := 3 ;
36149: LD_ADDR_EXP 108
36153: PUSH
36154: LD_INT 3
36156: ST_TO_ADDR
// hackDist := 12 ;
36157: LD_ADDR_EXP 109
36161: PUSH
36162: LD_INT 12
36164: ST_TO_ADDR
// hackCounter := [ ] ;
36165: LD_ADDR_EXP 110
36169: PUSH
36170: EMPTY
36171: ST_TO_ADDR
// end ;
36172: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36173: LD_EXP 105
36177: PUSH
36178: LD_INT 34
36180: PUSH
36181: LD_INT 99
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PPUSH
36188: CALL_OW 69
36192: AND
36193: IFFALSE 36446
36195: GO 36197
36197: DISABLE
36198: LD_INT 0
36200: PPUSH
36201: PPUSH
// begin enable ;
36202: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36203: LD_ADDR_VAR 0 1
36207: PUSH
36208: LD_INT 34
36210: PUSH
36211: LD_INT 99
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PPUSH
36218: CALL_OW 69
36222: PUSH
36223: FOR_IN
36224: IFFALSE 36444
// begin if not i in hackTanks then
36226: LD_VAR 0 1
36230: PUSH
36231: LD_EXP 106
36235: IN
36236: NOT
36237: IFFALSE 36320
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36239: LD_ADDR_EXP 106
36243: PUSH
36244: LD_EXP 106
36248: PPUSH
36249: LD_EXP 106
36253: PUSH
36254: LD_INT 1
36256: PLUS
36257: PPUSH
36258: LD_VAR 0 1
36262: PPUSH
36263: CALL_OW 1
36267: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36268: LD_ADDR_EXP 107
36272: PUSH
36273: LD_EXP 107
36277: PPUSH
36278: LD_EXP 107
36282: PUSH
36283: LD_INT 1
36285: PLUS
36286: PPUSH
36287: EMPTY
36288: PPUSH
36289: CALL_OW 1
36293: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36294: LD_ADDR_EXP 110
36298: PUSH
36299: LD_EXP 110
36303: PPUSH
36304: LD_EXP 110
36308: PUSH
36309: LD_INT 1
36311: PLUS
36312: PPUSH
36313: EMPTY
36314: PPUSH
36315: CALL_OW 1
36319: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36320: LD_VAR 0 1
36324: PPUSH
36325: CALL_OW 302
36329: NOT
36330: IFFALSE 36343
// begin HackUnlinkAll ( i ) ;
36332: LD_VAR 0 1
36336: PPUSH
36337: CALL 36449 0 1
// continue ;
36341: GO 36223
// end ; HackCheckCapturedStatus ( i ) ;
36343: LD_VAR 0 1
36347: PPUSH
36348: CALL 36892 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36352: LD_ADDR_VAR 0 2
36356: PUSH
36357: LD_INT 81
36359: PUSH
36360: LD_VAR 0 1
36364: PPUSH
36365: CALL_OW 255
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 33
36376: PUSH
36377: LD_INT 3
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 91
36386: PUSH
36387: LD_VAR 0 1
36391: PUSH
36392: LD_EXP 109
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 50
36404: PUSH
36405: EMPTY
36406: LIST
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: PPUSH
36414: CALL_OW 69
36418: ST_TO_ADDR
// if not tmp then
36419: LD_VAR 0 2
36423: NOT
36424: IFFALSE 36428
// continue ;
36426: GO 36223
// HackLink ( i , tmp ) ;
36428: LD_VAR 0 1
36432: PPUSH
36433: LD_VAR 0 2
36437: PPUSH
36438: CALL 36585 0 2
// end ;
36442: GO 36223
36444: POP
36445: POP
// end ;
36446: PPOPN 2
36448: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36449: LD_INT 0
36451: PPUSH
36452: PPUSH
36453: PPUSH
// if not hack in hackTanks then
36454: LD_VAR 0 1
36458: PUSH
36459: LD_EXP 106
36463: IN
36464: NOT
36465: IFFALSE 36469
// exit ;
36467: GO 36580
// index := GetElementIndex ( hackTanks , hack ) ;
36469: LD_ADDR_VAR 0 4
36473: PUSH
36474: LD_EXP 106
36478: PPUSH
36479: LD_VAR 0 1
36483: PPUSH
36484: CALL 44022 0 2
36488: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36489: LD_EXP 107
36493: PUSH
36494: LD_VAR 0 4
36498: ARRAY
36499: IFFALSE 36580
// begin for i in hackTanksCaptured [ index ] do
36501: LD_ADDR_VAR 0 3
36505: PUSH
36506: LD_EXP 107
36510: PUSH
36511: LD_VAR 0 4
36515: ARRAY
36516: PUSH
36517: FOR_IN
36518: IFFALSE 36544
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36520: LD_VAR 0 3
36524: PUSH
36525: LD_INT 1
36527: ARRAY
36528: PPUSH
36529: LD_VAR 0 3
36533: PUSH
36534: LD_INT 2
36536: ARRAY
36537: PPUSH
36538: CALL_OW 235
36542: GO 36517
36544: POP
36545: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36546: LD_ADDR_EXP 107
36550: PUSH
36551: LD_EXP 107
36555: PPUSH
36556: LD_VAR 0 4
36560: PPUSH
36561: EMPTY
36562: PPUSH
36563: CALL_OW 1
36567: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36568: LD_VAR 0 1
36572: PPUSH
36573: LD_INT 0
36575: PPUSH
36576: CALL_OW 505
// end ; end ;
36580: LD_VAR 0 2
36584: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36585: LD_INT 0
36587: PPUSH
36588: PPUSH
36589: PPUSH
// if not hack in hackTanks or not vehicles then
36590: LD_VAR 0 1
36594: PUSH
36595: LD_EXP 106
36599: IN
36600: NOT
36601: PUSH
36602: LD_VAR 0 2
36606: NOT
36607: OR
36608: IFFALSE 36612
// exit ;
36610: GO 36887
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36612: LD_ADDR_VAR 0 2
36616: PUSH
36617: LD_VAR 0 1
36621: PPUSH
36622: LD_VAR 0 2
36626: PPUSH
36627: LD_INT 1
36629: PPUSH
36630: LD_INT 1
36632: PPUSH
36633: CALL 44672 0 4
36637: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36638: LD_ADDR_VAR 0 5
36642: PUSH
36643: LD_EXP 106
36647: PPUSH
36648: LD_VAR 0 1
36652: PPUSH
36653: CALL 44022 0 2
36657: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36658: LD_EXP 107
36662: PUSH
36663: LD_VAR 0 5
36667: ARRAY
36668: PUSH
36669: LD_EXP 108
36673: LESS
36674: IFFALSE 36863
// begin for i := 1 to vehicles do
36676: LD_ADDR_VAR 0 4
36680: PUSH
36681: DOUBLE
36682: LD_INT 1
36684: DEC
36685: ST_TO_ADDR
36686: LD_VAR 0 2
36690: PUSH
36691: FOR_TO
36692: IFFALSE 36861
// begin if hackTanksCaptured [ index ] = hackLimit then
36694: LD_EXP 107
36698: PUSH
36699: LD_VAR 0 5
36703: ARRAY
36704: PUSH
36705: LD_EXP 108
36709: EQUAL
36710: IFFALSE 36714
// break ;
36712: GO 36861
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36714: LD_ADDR_EXP 110
36718: PUSH
36719: LD_EXP 110
36723: PPUSH
36724: LD_VAR 0 5
36728: PPUSH
36729: LD_EXP 110
36733: PUSH
36734: LD_VAR 0 5
36738: ARRAY
36739: PUSH
36740: LD_INT 1
36742: PLUS
36743: PPUSH
36744: CALL_OW 1
36748: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36749: LD_ADDR_EXP 107
36753: PUSH
36754: LD_EXP 107
36758: PPUSH
36759: LD_VAR 0 5
36763: PUSH
36764: LD_EXP 107
36768: PUSH
36769: LD_VAR 0 5
36773: ARRAY
36774: PUSH
36775: LD_INT 1
36777: PLUS
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PPUSH
36783: LD_VAR 0 2
36787: PUSH
36788: LD_VAR 0 4
36792: ARRAY
36793: PUSH
36794: LD_VAR 0 2
36798: PUSH
36799: LD_VAR 0 4
36803: ARRAY
36804: PPUSH
36805: CALL_OW 255
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PPUSH
36814: CALL 44237 0 3
36818: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36819: LD_VAR 0 2
36823: PUSH
36824: LD_VAR 0 4
36828: ARRAY
36829: PPUSH
36830: LD_VAR 0 1
36834: PPUSH
36835: CALL_OW 255
36839: PPUSH
36840: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36844: LD_VAR 0 2
36848: PUSH
36849: LD_VAR 0 4
36853: ARRAY
36854: PPUSH
36855: CALL_OW 141
// end ;
36859: GO 36691
36861: POP
36862: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36863: LD_VAR 0 1
36867: PPUSH
36868: LD_EXP 107
36872: PUSH
36873: LD_VAR 0 5
36877: ARRAY
36878: PUSH
36879: LD_INT 0
36881: PLUS
36882: PPUSH
36883: CALL_OW 505
// end ;
36887: LD_VAR 0 3
36891: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36892: LD_INT 0
36894: PPUSH
36895: PPUSH
36896: PPUSH
36897: PPUSH
// if not hack in hackTanks then
36898: LD_VAR 0 1
36902: PUSH
36903: LD_EXP 106
36907: IN
36908: NOT
36909: IFFALSE 36913
// exit ;
36911: GO 37153
// index := GetElementIndex ( hackTanks , hack ) ;
36913: LD_ADDR_VAR 0 4
36917: PUSH
36918: LD_EXP 106
36922: PPUSH
36923: LD_VAR 0 1
36927: PPUSH
36928: CALL 44022 0 2
36932: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36933: LD_ADDR_VAR 0 3
36937: PUSH
36938: DOUBLE
36939: LD_EXP 107
36943: PUSH
36944: LD_VAR 0 4
36948: ARRAY
36949: INC
36950: ST_TO_ADDR
36951: LD_INT 1
36953: PUSH
36954: FOR_DOWNTO
36955: IFFALSE 37127
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36957: LD_ADDR_VAR 0 5
36961: PUSH
36962: LD_EXP 107
36966: PUSH
36967: LD_VAR 0 4
36971: ARRAY
36972: PUSH
36973: LD_VAR 0 3
36977: ARRAY
36978: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36979: LD_VAR 0 5
36983: PUSH
36984: LD_INT 1
36986: ARRAY
36987: PPUSH
36988: CALL_OW 302
36992: NOT
36993: PUSH
36994: LD_VAR 0 5
36998: PUSH
36999: LD_INT 1
37001: ARRAY
37002: PPUSH
37003: CALL_OW 255
37007: PUSH
37008: LD_VAR 0 1
37012: PPUSH
37013: CALL_OW 255
37017: NONEQUAL
37018: OR
37019: IFFALSE 37125
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37021: LD_VAR 0 5
37025: PUSH
37026: LD_INT 1
37028: ARRAY
37029: PPUSH
37030: CALL_OW 305
37034: PUSH
37035: LD_VAR 0 5
37039: PUSH
37040: LD_INT 1
37042: ARRAY
37043: PPUSH
37044: CALL_OW 255
37048: PUSH
37049: LD_VAR 0 1
37053: PPUSH
37054: CALL_OW 255
37058: EQUAL
37059: AND
37060: IFFALSE 37084
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37062: LD_VAR 0 5
37066: PUSH
37067: LD_INT 1
37069: ARRAY
37070: PPUSH
37071: LD_VAR 0 5
37075: PUSH
37076: LD_INT 2
37078: ARRAY
37079: PPUSH
37080: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37084: LD_ADDR_EXP 107
37088: PUSH
37089: LD_EXP 107
37093: PPUSH
37094: LD_VAR 0 4
37098: PPUSH
37099: LD_EXP 107
37103: PUSH
37104: LD_VAR 0 4
37108: ARRAY
37109: PPUSH
37110: LD_VAR 0 3
37114: PPUSH
37115: CALL_OW 3
37119: PPUSH
37120: CALL_OW 1
37124: ST_TO_ADDR
// end ; end ;
37125: GO 36954
37127: POP
37128: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37129: LD_VAR 0 1
37133: PPUSH
37134: LD_EXP 107
37138: PUSH
37139: LD_VAR 0 4
37143: ARRAY
37144: PUSH
37145: LD_INT 0
37147: PLUS
37148: PPUSH
37149: CALL_OW 505
// end ;
37153: LD_VAR 0 2
37157: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37158: LD_INT 0
37160: PPUSH
37161: PPUSH
37162: PPUSH
37163: PPUSH
// if not hack in hackTanks then
37164: LD_VAR 0 1
37168: PUSH
37169: LD_EXP 106
37173: IN
37174: NOT
37175: IFFALSE 37179
// exit ;
37177: GO 37264
// index := GetElementIndex ( hackTanks , hack ) ;
37179: LD_ADDR_VAR 0 5
37183: PUSH
37184: LD_EXP 106
37188: PPUSH
37189: LD_VAR 0 1
37193: PPUSH
37194: CALL 44022 0 2
37198: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37199: LD_ADDR_VAR 0 4
37203: PUSH
37204: DOUBLE
37205: LD_INT 1
37207: DEC
37208: ST_TO_ADDR
37209: LD_EXP 107
37213: PUSH
37214: LD_VAR 0 5
37218: ARRAY
37219: PUSH
37220: FOR_TO
37221: IFFALSE 37262
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37223: LD_EXP 107
37227: PUSH
37228: LD_VAR 0 5
37232: ARRAY
37233: PUSH
37234: LD_VAR 0 4
37238: ARRAY
37239: PUSH
37240: LD_INT 1
37242: ARRAY
37243: PUSH
37244: LD_VAR 0 2
37248: EQUAL
37249: IFFALSE 37260
// KillUnit ( vehicle ) ;
37251: LD_VAR 0 2
37255: PPUSH
37256: CALL_OW 66
37260: GO 37220
37262: POP
37263: POP
// end ;
37264: LD_VAR 0 3
37268: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37269: LD_EXP 111
37273: NOT
37274: IFFALSE 37309
37276: GO 37278
37278: DISABLE
// begin initMiner := true ;
37279: LD_ADDR_EXP 111
37283: PUSH
37284: LD_INT 1
37286: ST_TO_ADDR
// minersList := [ ] ;
37287: LD_ADDR_EXP 112
37291: PUSH
37292: EMPTY
37293: ST_TO_ADDR
// minerMinesList := [ ] ;
37294: LD_ADDR_EXP 113
37298: PUSH
37299: EMPTY
37300: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37301: LD_ADDR_EXP 114
37305: PUSH
37306: LD_INT 5
37308: ST_TO_ADDR
// end ;
37309: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37310: LD_EXP 111
37314: PUSH
37315: LD_INT 34
37317: PUSH
37318: LD_INT 81
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PPUSH
37325: CALL_OW 69
37329: AND
37330: IFFALSE 37791
37332: GO 37334
37334: DISABLE
37335: LD_INT 0
37337: PPUSH
37338: PPUSH
37339: PPUSH
37340: PPUSH
// begin enable ;
37341: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37342: LD_ADDR_VAR 0 1
37346: PUSH
37347: LD_INT 34
37349: PUSH
37350: LD_INT 81
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PPUSH
37357: CALL_OW 69
37361: PUSH
37362: FOR_IN
37363: IFFALSE 37435
// begin if not i in minersList then
37365: LD_VAR 0 1
37369: PUSH
37370: LD_EXP 112
37374: IN
37375: NOT
37376: IFFALSE 37433
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37378: LD_ADDR_EXP 112
37382: PUSH
37383: LD_EXP 112
37387: PPUSH
37388: LD_EXP 112
37392: PUSH
37393: LD_INT 1
37395: PLUS
37396: PPUSH
37397: LD_VAR 0 1
37401: PPUSH
37402: CALL_OW 1
37406: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37407: LD_ADDR_EXP 113
37411: PUSH
37412: LD_EXP 113
37416: PPUSH
37417: LD_EXP 113
37421: PUSH
37422: LD_INT 1
37424: PLUS
37425: PPUSH
37426: EMPTY
37427: PPUSH
37428: CALL_OW 1
37432: ST_TO_ADDR
// end end ;
37433: GO 37362
37435: POP
37436: POP
// for i := minerMinesList downto 1 do
37437: LD_ADDR_VAR 0 1
37441: PUSH
37442: DOUBLE
37443: LD_EXP 113
37447: INC
37448: ST_TO_ADDR
37449: LD_INT 1
37451: PUSH
37452: FOR_DOWNTO
37453: IFFALSE 37789
// begin if IsLive ( minersList [ i ] ) then
37455: LD_EXP 112
37459: PUSH
37460: LD_VAR 0 1
37464: ARRAY
37465: PPUSH
37466: CALL_OW 300
37470: IFFALSE 37498
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37472: LD_EXP 112
37476: PUSH
37477: LD_VAR 0 1
37481: ARRAY
37482: PPUSH
37483: LD_EXP 113
37487: PUSH
37488: LD_VAR 0 1
37492: ARRAY
37493: PPUSH
37494: CALL_OW 505
// if not minerMinesList [ i ] then
37498: LD_EXP 113
37502: PUSH
37503: LD_VAR 0 1
37507: ARRAY
37508: NOT
37509: IFFALSE 37513
// continue ;
37511: GO 37452
// for j := minerMinesList [ i ] downto 1 do
37513: LD_ADDR_VAR 0 2
37517: PUSH
37518: DOUBLE
37519: LD_EXP 113
37523: PUSH
37524: LD_VAR 0 1
37528: ARRAY
37529: INC
37530: ST_TO_ADDR
37531: LD_INT 1
37533: PUSH
37534: FOR_DOWNTO
37535: IFFALSE 37785
// begin side := GetSide ( minersList [ i ] ) ;
37537: LD_ADDR_VAR 0 3
37541: PUSH
37542: LD_EXP 112
37546: PUSH
37547: LD_VAR 0 1
37551: ARRAY
37552: PPUSH
37553: CALL_OW 255
37557: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37558: LD_ADDR_VAR 0 4
37562: PUSH
37563: LD_EXP 113
37567: PUSH
37568: LD_VAR 0 1
37572: ARRAY
37573: PUSH
37574: LD_VAR 0 2
37578: ARRAY
37579: PUSH
37580: LD_INT 1
37582: ARRAY
37583: PPUSH
37584: LD_EXP 113
37588: PUSH
37589: LD_VAR 0 1
37593: ARRAY
37594: PUSH
37595: LD_VAR 0 2
37599: ARRAY
37600: PUSH
37601: LD_INT 2
37603: ARRAY
37604: PPUSH
37605: CALL_OW 428
37609: ST_TO_ADDR
// if not tmp then
37610: LD_VAR 0 4
37614: NOT
37615: IFFALSE 37619
// continue ;
37617: GO 37534
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37619: LD_VAR 0 4
37623: PUSH
37624: LD_INT 81
37626: PUSH
37627: LD_VAR 0 3
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PPUSH
37636: CALL_OW 69
37640: IN
37641: PUSH
37642: LD_EXP 113
37646: PUSH
37647: LD_VAR 0 1
37651: ARRAY
37652: PUSH
37653: LD_VAR 0 2
37657: ARRAY
37658: PUSH
37659: LD_INT 1
37661: ARRAY
37662: PPUSH
37663: LD_EXP 113
37667: PUSH
37668: LD_VAR 0 1
37672: ARRAY
37673: PUSH
37674: LD_VAR 0 2
37678: ARRAY
37679: PUSH
37680: LD_INT 2
37682: ARRAY
37683: PPUSH
37684: CALL_OW 458
37688: AND
37689: IFFALSE 37783
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37691: LD_EXP 113
37695: PUSH
37696: LD_VAR 0 1
37700: ARRAY
37701: PUSH
37702: LD_VAR 0 2
37706: ARRAY
37707: PUSH
37708: LD_INT 1
37710: ARRAY
37711: PPUSH
37712: LD_EXP 113
37716: PUSH
37717: LD_VAR 0 1
37721: ARRAY
37722: PUSH
37723: LD_VAR 0 2
37727: ARRAY
37728: PUSH
37729: LD_INT 2
37731: ARRAY
37732: PPUSH
37733: LD_VAR 0 3
37737: PPUSH
37738: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37742: LD_ADDR_EXP 113
37746: PUSH
37747: LD_EXP 113
37751: PPUSH
37752: LD_VAR 0 1
37756: PPUSH
37757: LD_EXP 113
37761: PUSH
37762: LD_VAR 0 1
37766: ARRAY
37767: PPUSH
37768: LD_VAR 0 2
37772: PPUSH
37773: CALL_OW 3
37777: PPUSH
37778: CALL_OW 1
37782: ST_TO_ADDR
// end ; end ;
37783: GO 37534
37785: POP
37786: POP
// end ;
37787: GO 37452
37789: POP
37790: POP
// end ;
37791: PPOPN 4
37793: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37794: LD_INT 0
37796: PPUSH
37797: PPUSH
// result := false ;
37798: LD_ADDR_VAR 0 4
37802: PUSH
37803: LD_INT 0
37805: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37806: LD_VAR 0 1
37810: PPUSH
37811: CALL_OW 264
37815: PUSH
37816: LD_INT 81
37818: EQUAL
37819: NOT
37820: IFFALSE 37824
// exit ;
37822: GO 38064
// index := GetElementIndex ( minersList , unit ) ;
37824: LD_ADDR_VAR 0 5
37828: PUSH
37829: LD_EXP 112
37833: PPUSH
37834: LD_VAR 0 1
37838: PPUSH
37839: CALL 44022 0 2
37843: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37844: LD_EXP 113
37848: PUSH
37849: LD_VAR 0 5
37853: ARRAY
37854: PUSH
37855: LD_EXP 114
37859: GREATEREQUAL
37860: IFFALSE 37864
// exit ;
37862: GO 38064
// ComMoveXY ( unit , x , y ) ;
37864: LD_VAR 0 1
37868: PPUSH
37869: LD_VAR 0 2
37873: PPUSH
37874: LD_VAR 0 3
37878: PPUSH
37879: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37883: LD_INT 35
37885: PPUSH
37886: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37890: LD_VAR 0 1
37894: PPUSH
37895: LD_VAR 0 2
37899: PPUSH
37900: LD_VAR 0 3
37904: PPUSH
37905: CALL 75774 0 3
37909: NOT
37910: PUSH
37911: LD_VAR 0 1
37915: PPUSH
37916: CALL_OW 314
37920: AND
37921: IFFALSE 37925
// exit ;
37923: GO 38064
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37925: LD_VAR 0 2
37929: PPUSH
37930: LD_VAR 0 3
37934: PPUSH
37935: CALL_OW 428
37939: PUSH
37940: LD_VAR 0 1
37944: EQUAL
37945: PUSH
37946: LD_VAR 0 1
37950: PPUSH
37951: CALL_OW 314
37955: NOT
37956: AND
37957: IFFALSE 37883
// PlaySoundXY ( x , y , PlantMine ) ;
37959: LD_VAR 0 2
37963: PPUSH
37964: LD_VAR 0 3
37968: PPUSH
37969: LD_STRING PlantMine
37971: PPUSH
37972: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37976: LD_VAR 0 2
37980: PPUSH
37981: LD_VAR 0 3
37985: PPUSH
37986: LD_VAR 0 1
37990: PPUSH
37991: CALL_OW 255
37995: PPUSH
37996: LD_INT 0
37998: PPUSH
37999: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38003: LD_ADDR_EXP 113
38007: PUSH
38008: LD_EXP 113
38012: PPUSH
38013: LD_VAR 0 5
38017: PUSH
38018: LD_EXP 113
38022: PUSH
38023: LD_VAR 0 5
38027: ARRAY
38028: PUSH
38029: LD_INT 1
38031: PLUS
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PPUSH
38037: LD_VAR 0 2
38041: PUSH
38042: LD_VAR 0 3
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PPUSH
38051: CALL 44237 0 3
38055: ST_TO_ADDR
// result := true ;
38056: LD_ADDR_VAR 0 4
38060: PUSH
38061: LD_INT 1
38063: ST_TO_ADDR
// end ;
38064: LD_VAR 0 4
38068: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38069: LD_INT 0
38071: PPUSH
38072: PPUSH
38073: PPUSH
// if not unit in minersList then
38074: LD_VAR 0 1
38078: PUSH
38079: LD_EXP 112
38083: IN
38084: NOT
38085: IFFALSE 38089
// exit ;
38087: GO 38481
// index := GetElementIndex ( minersList , unit ) ;
38089: LD_ADDR_VAR 0 6
38093: PUSH
38094: LD_EXP 112
38098: PPUSH
38099: LD_VAR 0 1
38103: PPUSH
38104: CALL 44022 0 2
38108: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38109: LD_ADDR_VAR 0 5
38113: PUSH
38114: DOUBLE
38115: LD_EXP 113
38119: PUSH
38120: LD_VAR 0 6
38124: ARRAY
38125: INC
38126: ST_TO_ADDR
38127: LD_INT 1
38129: PUSH
38130: FOR_DOWNTO
38131: IFFALSE 38292
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38133: LD_EXP 113
38137: PUSH
38138: LD_VAR 0 6
38142: ARRAY
38143: PUSH
38144: LD_VAR 0 5
38148: ARRAY
38149: PUSH
38150: LD_INT 1
38152: ARRAY
38153: PUSH
38154: LD_VAR 0 2
38158: EQUAL
38159: PUSH
38160: LD_EXP 113
38164: PUSH
38165: LD_VAR 0 6
38169: ARRAY
38170: PUSH
38171: LD_VAR 0 5
38175: ARRAY
38176: PUSH
38177: LD_INT 2
38179: ARRAY
38180: PUSH
38181: LD_VAR 0 3
38185: EQUAL
38186: AND
38187: IFFALSE 38290
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38189: LD_EXP 113
38193: PUSH
38194: LD_VAR 0 6
38198: ARRAY
38199: PUSH
38200: LD_VAR 0 5
38204: ARRAY
38205: PUSH
38206: LD_INT 1
38208: ARRAY
38209: PPUSH
38210: LD_EXP 113
38214: PUSH
38215: LD_VAR 0 6
38219: ARRAY
38220: PUSH
38221: LD_VAR 0 5
38225: ARRAY
38226: PUSH
38227: LD_INT 2
38229: ARRAY
38230: PPUSH
38231: LD_VAR 0 1
38235: PPUSH
38236: CALL_OW 255
38240: PPUSH
38241: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38245: LD_ADDR_EXP 113
38249: PUSH
38250: LD_EXP 113
38254: PPUSH
38255: LD_VAR 0 6
38259: PPUSH
38260: LD_EXP 113
38264: PUSH
38265: LD_VAR 0 6
38269: ARRAY
38270: PPUSH
38271: LD_VAR 0 5
38275: PPUSH
38276: CALL_OW 3
38280: PPUSH
38281: CALL_OW 1
38285: ST_TO_ADDR
// exit ;
38286: POP
38287: POP
38288: GO 38481
// end ; end ;
38290: GO 38130
38292: POP
38293: POP
// for i := minerMinesList [ index ] downto 1 do
38294: LD_ADDR_VAR 0 5
38298: PUSH
38299: DOUBLE
38300: LD_EXP 113
38304: PUSH
38305: LD_VAR 0 6
38309: ARRAY
38310: INC
38311: ST_TO_ADDR
38312: LD_INT 1
38314: PUSH
38315: FOR_DOWNTO
38316: IFFALSE 38479
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38318: LD_EXP 113
38322: PUSH
38323: LD_VAR 0 6
38327: ARRAY
38328: PUSH
38329: LD_VAR 0 5
38333: ARRAY
38334: PUSH
38335: LD_INT 1
38337: ARRAY
38338: PPUSH
38339: LD_EXP 113
38343: PUSH
38344: LD_VAR 0 6
38348: ARRAY
38349: PUSH
38350: LD_VAR 0 5
38354: ARRAY
38355: PUSH
38356: LD_INT 2
38358: ARRAY
38359: PPUSH
38360: LD_VAR 0 2
38364: PPUSH
38365: LD_VAR 0 3
38369: PPUSH
38370: CALL_OW 298
38374: PUSH
38375: LD_INT 6
38377: LESS
38378: IFFALSE 38477
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38380: LD_EXP 113
38384: PUSH
38385: LD_VAR 0 6
38389: ARRAY
38390: PUSH
38391: LD_VAR 0 5
38395: ARRAY
38396: PUSH
38397: LD_INT 1
38399: ARRAY
38400: PPUSH
38401: LD_EXP 113
38405: PUSH
38406: LD_VAR 0 6
38410: ARRAY
38411: PUSH
38412: LD_VAR 0 5
38416: ARRAY
38417: PUSH
38418: LD_INT 2
38420: ARRAY
38421: PPUSH
38422: LD_VAR 0 1
38426: PPUSH
38427: CALL_OW 255
38431: PPUSH
38432: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38436: LD_ADDR_EXP 113
38440: PUSH
38441: LD_EXP 113
38445: PPUSH
38446: LD_VAR 0 6
38450: PPUSH
38451: LD_EXP 113
38455: PUSH
38456: LD_VAR 0 6
38460: ARRAY
38461: PPUSH
38462: LD_VAR 0 5
38466: PPUSH
38467: CALL_OW 3
38471: PPUSH
38472: CALL_OW 1
38476: ST_TO_ADDR
// end ; end ;
38477: GO 38315
38479: POP
38480: POP
// end ;
38481: LD_VAR 0 4
38485: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38486: LD_INT 0
38488: PPUSH
38489: PPUSH
38490: PPUSH
38491: PPUSH
38492: PPUSH
38493: PPUSH
38494: PPUSH
38495: PPUSH
38496: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38497: LD_VAR 0 1
38501: PPUSH
38502: CALL_OW 264
38506: PUSH
38507: LD_INT 81
38509: EQUAL
38510: NOT
38511: PUSH
38512: LD_VAR 0 1
38516: PUSH
38517: LD_EXP 112
38521: IN
38522: NOT
38523: OR
38524: IFFALSE 38528
// exit ;
38526: GO 38850
// index := GetElementIndex ( minersList , unit ) ;
38528: LD_ADDR_VAR 0 6
38532: PUSH
38533: LD_EXP 112
38537: PPUSH
38538: LD_VAR 0 1
38542: PPUSH
38543: CALL 44022 0 2
38547: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38548: LD_ADDR_VAR 0 8
38552: PUSH
38553: LD_EXP 114
38557: PUSH
38558: LD_EXP 113
38562: PUSH
38563: LD_VAR 0 6
38567: ARRAY
38568: MINUS
38569: ST_TO_ADDR
// if not minesFreeAmount then
38570: LD_VAR 0 8
38574: NOT
38575: IFFALSE 38579
// exit ;
38577: GO 38850
// tmp := [ ] ;
38579: LD_ADDR_VAR 0 7
38583: PUSH
38584: EMPTY
38585: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38586: LD_ADDR_VAR 0 5
38590: PUSH
38591: DOUBLE
38592: LD_INT 1
38594: DEC
38595: ST_TO_ADDR
38596: LD_VAR 0 8
38600: PUSH
38601: FOR_TO
38602: IFFALSE 38797
// begin _d := rand ( 0 , 5 ) ;
38604: LD_ADDR_VAR 0 11
38608: PUSH
38609: LD_INT 0
38611: PPUSH
38612: LD_INT 5
38614: PPUSH
38615: CALL_OW 12
38619: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38620: LD_ADDR_VAR 0 12
38624: PUSH
38625: LD_INT 2
38627: PPUSH
38628: LD_INT 6
38630: PPUSH
38631: CALL_OW 12
38635: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38636: LD_ADDR_VAR 0 9
38640: PUSH
38641: LD_VAR 0 2
38645: PPUSH
38646: LD_VAR 0 11
38650: PPUSH
38651: LD_VAR 0 12
38655: PPUSH
38656: CALL_OW 272
38660: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38661: LD_ADDR_VAR 0 10
38665: PUSH
38666: LD_VAR 0 3
38670: PPUSH
38671: LD_VAR 0 11
38675: PPUSH
38676: LD_VAR 0 12
38680: PPUSH
38681: CALL_OW 273
38685: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38686: LD_VAR 0 9
38690: PPUSH
38691: LD_VAR 0 10
38695: PPUSH
38696: CALL_OW 488
38700: PUSH
38701: LD_VAR 0 9
38705: PUSH
38706: LD_VAR 0 10
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_VAR 0 7
38719: IN
38720: NOT
38721: AND
38722: PUSH
38723: LD_VAR 0 9
38727: PPUSH
38728: LD_VAR 0 10
38732: PPUSH
38733: CALL_OW 458
38737: NOT
38738: AND
38739: IFFALSE 38781
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38741: LD_ADDR_VAR 0 7
38745: PUSH
38746: LD_VAR 0 7
38750: PPUSH
38751: LD_VAR 0 7
38755: PUSH
38756: LD_INT 1
38758: PLUS
38759: PPUSH
38760: LD_VAR 0 9
38764: PUSH
38765: LD_VAR 0 10
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PPUSH
38774: CALL_OW 1
38778: ST_TO_ADDR
38779: GO 38795
// i := i - 1 ;
38781: LD_ADDR_VAR 0 5
38785: PUSH
38786: LD_VAR 0 5
38790: PUSH
38791: LD_INT 1
38793: MINUS
38794: ST_TO_ADDR
// end ;
38795: GO 38601
38797: POP
38798: POP
// for i in tmp do
38799: LD_ADDR_VAR 0 5
38803: PUSH
38804: LD_VAR 0 7
38808: PUSH
38809: FOR_IN
38810: IFFALSE 38848
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38812: LD_VAR 0 1
38816: PPUSH
38817: LD_VAR 0 5
38821: PUSH
38822: LD_INT 1
38824: ARRAY
38825: PPUSH
38826: LD_VAR 0 5
38830: PUSH
38831: LD_INT 2
38833: ARRAY
38834: PPUSH
38835: CALL 37794 0 3
38839: NOT
38840: IFFALSE 38846
// exit ;
38842: POP
38843: POP
38844: GO 38850
38846: GO 38809
38848: POP
38849: POP
// end ;
38850: LD_VAR 0 4
38854: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38855: LD_INT 0
38857: PPUSH
38858: PPUSH
38859: PPUSH
38860: PPUSH
38861: PPUSH
38862: PPUSH
38863: PPUSH
// if not GetClass ( unit ) = class_sniper then
38864: LD_VAR 0 1
38868: PPUSH
38869: CALL_OW 257
38873: PUSH
38874: LD_INT 5
38876: EQUAL
38877: NOT
38878: IFFALSE 38882
// exit ;
38880: GO 39270
// dist := 8 ;
38882: LD_ADDR_VAR 0 5
38886: PUSH
38887: LD_INT 8
38889: ST_TO_ADDR
// viewRange := 12 ;
38890: LD_ADDR_VAR 0 7
38894: PUSH
38895: LD_INT 12
38897: ST_TO_ADDR
// side := GetSide ( unit ) ;
38898: LD_ADDR_VAR 0 6
38902: PUSH
38903: LD_VAR 0 1
38907: PPUSH
38908: CALL_OW 255
38912: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38913: LD_INT 61
38915: PPUSH
38916: LD_VAR 0 6
38920: PPUSH
38921: CALL_OW 321
38925: PUSH
38926: LD_INT 2
38928: EQUAL
38929: IFFALSE 38939
// viewRange := 16 ;
38931: LD_ADDR_VAR 0 7
38935: PUSH
38936: LD_INT 16
38938: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38939: LD_VAR 0 1
38943: PPUSH
38944: LD_VAR 0 2
38948: PPUSH
38949: LD_VAR 0 3
38953: PPUSH
38954: CALL_OW 297
38958: PUSH
38959: LD_VAR 0 5
38963: GREATER
38964: IFFALSE 39043
// begin ComMoveXY ( unit , x , y ) ;
38966: LD_VAR 0 1
38970: PPUSH
38971: LD_VAR 0 2
38975: PPUSH
38976: LD_VAR 0 3
38980: PPUSH
38981: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38985: LD_INT 35
38987: PPUSH
38988: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38992: LD_VAR 0 1
38996: PPUSH
38997: LD_VAR 0 2
39001: PPUSH
39002: LD_VAR 0 3
39006: PPUSH
39007: CALL 75774 0 3
39011: NOT
39012: IFFALSE 39016
// exit ;
39014: GO 39270
// until GetDistUnitXY ( unit , x , y ) < dist ;
39016: LD_VAR 0 1
39020: PPUSH
39021: LD_VAR 0 2
39025: PPUSH
39026: LD_VAR 0 3
39030: PPUSH
39031: CALL_OW 297
39035: PUSH
39036: LD_VAR 0 5
39040: LESS
39041: IFFALSE 38985
// end ; ComTurnXY ( unit , x , y ) ;
39043: LD_VAR 0 1
39047: PPUSH
39048: LD_VAR 0 2
39052: PPUSH
39053: LD_VAR 0 3
39057: PPUSH
39058: CALL_OW 118
// wait ( 5 ) ;
39062: LD_INT 5
39064: PPUSH
39065: CALL_OW 67
// _d := GetDir ( unit ) ;
39069: LD_ADDR_VAR 0 10
39073: PUSH
39074: LD_VAR 0 1
39078: PPUSH
39079: CALL_OW 254
39083: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39084: LD_ADDR_VAR 0 8
39088: PUSH
39089: LD_VAR 0 1
39093: PPUSH
39094: CALL_OW 250
39098: PPUSH
39099: LD_VAR 0 10
39103: PPUSH
39104: LD_VAR 0 5
39108: PPUSH
39109: CALL_OW 272
39113: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39114: LD_ADDR_VAR 0 9
39118: PUSH
39119: LD_VAR 0 1
39123: PPUSH
39124: CALL_OW 251
39128: PPUSH
39129: LD_VAR 0 10
39133: PPUSH
39134: LD_VAR 0 5
39138: PPUSH
39139: CALL_OW 273
39143: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39144: LD_VAR 0 8
39148: PPUSH
39149: LD_VAR 0 9
39153: PPUSH
39154: CALL_OW 488
39158: NOT
39159: IFFALSE 39163
// exit ;
39161: GO 39270
// ComAnimCustom ( unit , 1 ) ;
39163: LD_VAR 0 1
39167: PPUSH
39168: LD_INT 1
39170: PPUSH
39171: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39175: LD_VAR 0 8
39179: PPUSH
39180: LD_VAR 0 9
39184: PPUSH
39185: LD_VAR 0 6
39189: PPUSH
39190: LD_VAR 0 7
39194: PPUSH
39195: CALL_OW 330
// repeat wait ( 1 ) ;
39199: LD_INT 1
39201: PPUSH
39202: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39206: LD_VAR 0 1
39210: PPUSH
39211: CALL_OW 316
39215: PUSH
39216: LD_VAR 0 1
39220: PPUSH
39221: CALL_OW 314
39225: OR
39226: PUSH
39227: LD_VAR 0 1
39231: PPUSH
39232: CALL_OW 302
39236: NOT
39237: OR
39238: PUSH
39239: LD_VAR 0 1
39243: PPUSH
39244: CALL_OW 301
39248: OR
39249: IFFALSE 39199
// RemoveSeeing ( _x , _y , side ) ;
39251: LD_VAR 0 8
39255: PPUSH
39256: LD_VAR 0 9
39260: PPUSH
39261: LD_VAR 0 6
39265: PPUSH
39266: CALL_OW 331
// end ; end_of_file
39270: LD_VAR 0 4
39274: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39275: LD_INT 0
39277: PPUSH
39278: PPUSH
// if exist_mode then
39279: LD_VAR 0 2
39283: IFFALSE 39308
// unit := CreateCharacter ( prefix & ident ) else
39285: LD_ADDR_VAR 0 5
39289: PUSH
39290: LD_VAR 0 3
39294: PUSH
39295: LD_VAR 0 1
39299: STR
39300: PPUSH
39301: CALL_OW 34
39305: ST_TO_ADDR
39306: GO 39323
// unit := NewCharacter ( ident ) ;
39308: LD_ADDR_VAR 0 5
39312: PUSH
39313: LD_VAR 0 1
39317: PPUSH
39318: CALL_OW 25
39322: ST_TO_ADDR
// result := unit ;
39323: LD_ADDR_VAR 0 4
39327: PUSH
39328: LD_VAR 0 5
39332: ST_TO_ADDR
// end ;
39333: LD_VAR 0 4
39337: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39338: LD_INT 0
39340: PPUSH
39341: PPUSH
// if not side or not nation then
39342: LD_VAR 0 1
39346: NOT
39347: PUSH
39348: LD_VAR 0 2
39352: NOT
39353: OR
39354: IFFALSE 39358
// exit ;
39356: GO 40126
// case nation of nation_american :
39358: LD_VAR 0 2
39362: PUSH
39363: LD_INT 1
39365: DOUBLE
39366: EQUAL
39367: IFTRUE 39371
39369: GO 39585
39371: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39372: LD_ADDR_VAR 0 4
39376: PUSH
39377: LD_INT 35
39379: PUSH
39380: LD_INT 45
39382: PUSH
39383: LD_INT 46
39385: PUSH
39386: LD_INT 47
39388: PUSH
39389: LD_INT 82
39391: PUSH
39392: LD_INT 83
39394: PUSH
39395: LD_INT 84
39397: PUSH
39398: LD_INT 85
39400: PUSH
39401: LD_INT 86
39403: PUSH
39404: LD_INT 1
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: LD_INT 6
39412: PUSH
39413: LD_INT 15
39415: PUSH
39416: LD_INT 16
39418: PUSH
39419: LD_INT 7
39421: PUSH
39422: LD_INT 12
39424: PUSH
39425: LD_INT 13
39427: PUSH
39428: LD_INT 10
39430: PUSH
39431: LD_INT 14
39433: PUSH
39434: LD_INT 20
39436: PUSH
39437: LD_INT 21
39439: PUSH
39440: LD_INT 22
39442: PUSH
39443: LD_INT 25
39445: PUSH
39446: LD_INT 32
39448: PUSH
39449: LD_INT 27
39451: PUSH
39452: LD_INT 36
39454: PUSH
39455: LD_INT 69
39457: PUSH
39458: LD_INT 39
39460: PUSH
39461: LD_INT 34
39463: PUSH
39464: LD_INT 40
39466: PUSH
39467: LD_INT 48
39469: PUSH
39470: LD_INT 49
39472: PUSH
39473: LD_INT 50
39475: PUSH
39476: LD_INT 51
39478: PUSH
39479: LD_INT 52
39481: PUSH
39482: LD_INT 53
39484: PUSH
39485: LD_INT 54
39487: PUSH
39488: LD_INT 55
39490: PUSH
39491: LD_INT 56
39493: PUSH
39494: LD_INT 57
39496: PUSH
39497: LD_INT 58
39499: PUSH
39500: LD_INT 59
39502: PUSH
39503: LD_INT 60
39505: PUSH
39506: LD_INT 61
39508: PUSH
39509: LD_INT 62
39511: PUSH
39512: LD_INT 80
39514: PUSH
39515: LD_INT 82
39517: PUSH
39518: LD_INT 83
39520: PUSH
39521: LD_INT 84
39523: PUSH
39524: LD_INT 85
39526: PUSH
39527: LD_INT 86
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: ST_TO_ADDR
39583: GO 40050
39585: LD_INT 2
39587: DOUBLE
39588: EQUAL
39589: IFTRUE 39593
39591: GO 39819
39593: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39594: LD_ADDR_VAR 0 4
39598: PUSH
39599: LD_INT 35
39601: PUSH
39602: LD_INT 45
39604: PUSH
39605: LD_INT 46
39607: PUSH
39608: LD_INT 47
39610: PUSH
39611: LD_INT 82
39613: PUSH
39614: LD_INT 83
39616: PUSH
39617: LD_INT 84
39619: PUSH
39620: LD_INT 85
39622: PUSH
39623: LD_INT 87
39625: PUSH
39626: LD_INT 70
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: LD_INT 11
39634: PUSH
39635: LD_INT 3
39637: PUSH
39638: LD_INT 4
39640: PUSH
39641: LD_INT 5
39643: PUSH
39644: LD_INT 6
39646: PUSH
39647: LD_INT 15
39649: PUSH
39650: LD_INT 18
39652: PUSH
39653: LD_INT 7
39655: PUSH
39656: LD_INT 17
39658: PUSH
39659: LD_INT 8
39661: PUSH
39662: LD_INT 20
39664: PUSH
39665: LD_INT 21
39667: PUSH
39668: LD_INT 22
39670: PUSH
39671: LD_INT 72
39673: PUSH
39674: LD_INT 26
39676: PUSH
39677: LD_INT 69
39679: PUSH
39680: LD_INT 39
39682: PUSH
39683: LD_INT 40
39685: PUSH
39686: LD_INT 41
39688: PUSH
39689: LD_INT 42
39691: PUSH
39692: LD_INT 43
39694: PUSH
39695: LD_INT 48
39697: PUSH
39698: LD_INT 49
39700: PUSH
39701: LD_INT 50
39703: PUSH
39704: LD_INT 51
39706: PUSH
39707: LD_INT 52
39709: PUSH
39710: LD_INT 53
39712: PUSH
39713: LD_INT 54
39715: PUSH
39716: LD_INT 55
39718: PUSH
39719: LD_INT 56
39721: PUSH
39722: LD_INT 60
39724: PUSH
39725: LD_INT 61
39727: PUSH
39728: LD_INT 62
39730: PUSH
39731: LD_INT 66
39733: PUSH
39734: LD_INT 67
39736: PUSH
39737: LD_INT 68
39739: PUSH
39740: LD_INT 81
39742: PUSH
39743: LD_INT 82
39745: PUSH
39746: LD_INT 83
39748: PUSH
39749: LD_INT 84
39751: PUSH
39752: LD_INT 85
39754: PUSH
39755: LD_INT 87
39757: PUSH
39758: LD_INT 88
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: ST_TO_ADDR
39817: GO 40050
39819: LD_INT 3
39821: DOUBLE
39822: EQUAL
39823: IFTRUE 39827
39825: GO 40049
39827: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39828: LD_ADDR_VAR 0 4
39832: PUSH
39833: LD_INT 46
39835: PUSH
39836: LD_INT 47
39838: PUSH
39839: LD_INT 1
39841: PUSH
39842: LD_INT 2
39844: PUSH
39845: LD_INT 82
39847: PUSH
39848: LD_INT 83
39850: PUSH
39851: LD_INT 84
39853: PUSH
39854: LD_INT 85
39856: PUSH
39857: LD_INT 86
39859: PUSH
39860: LD_INT 11
39862: PUSH
39863: LD_INT 9
39865: PUSH
39866: LD_INT 20
39868: PUSH
39869: LD_INT 19
39871: PUSH
39872: LD_INT 21
39874: PUSH
39875: LD_INT 24
39877: PUSH
39878: LD_INT 22
39880: PUSH
39881: LD_INT 25
39883: PUSH
39884: LD_INT 28
39886: PUSH
39887: LD_INT 29
39889: PUSH
39890: LD_INT 30
39892: PUSH
39893: LD_INT 31
39895: PUSH
39896: LD_INT 37
39898: PUSH
39899: LD_INT 38
39901: PUSH
39902: LD_INT 32
39904: PUSH
39905: LD_INT 27
39907: PUSH
39908: LD_INT 33
39910: PUSH
39911: LD_INT 69
39913: PUSH
39914: LD_INT 39
39916: PUSH
39917: LD_INT 34
39919: PUSH
39920: LD_INT 40
39922: PUSH
39923: LD_INT 71
39925: PUSH
39926: LD_INT 23
39928: PUSH
39929: LD_INT 44
39931: PUSH
39932: LD_INT 48
39934: PUSH
39935: LD_INT 49
39937: PUSH
39938: LD_INT 50
39940: PUSH
39941: LD_INT 51
39943: PUSH
39944: LD_INT 52
39946: PUSH
39947: LD_INT 53
39949: PUSH
39950: LD_INT 54
39952: PUSH
39953: LD_INT 55
39955: PUSH
39956: LD_INT 56
39958: PUSH
39959: LD_INT 57
39961: PUSH
39962: LD_INT 58
39964: PUSH
39965: LD_INT 59
39967: PUSH
39968: LD_INT 63
39970: PUSH
39971: LD_INT 64
39973: PUSH
39974: LD_INT 65
39976: PUSH
39977: LD_INT 82
39979: PUSH
39980: LD_INT 83
39982: PUSH
39983: LD_INT 84
39985: PUSH
39986: LD_INT 85
39988: PUSH
39989: LD_INT 86
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: ST_TO_ADDR
40047: GO 40050
40049: POP
// if state > - 1 and state < 3 then
40050: LD_VAR 0 3
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: GREATER
40059: PUSH
40060: LD_VAR 0 3
40064: PUSH
40065: LD_INT 3
40067: LESS
40068: AND
40069: IFFALSE 40126
// for i in result do
40071: LD_ADDR_VAR 0 5
40075: PUSH
40076: LD_VAR 0 4
40080: PUSH
40081: FOR_IN
40082: IFFALSE 40124
// if GetTech ( i , side ) <> state then
40084: LD_VAR 0 5
40088: PPUSH
40089: LD_VAR 0 1
40093: PPUSH
40094: CALL_OW 321
40098: PUSH
40099: LD_VAR 0 3
40103: NONEQUAL
40104: IFFALSE 40122
// result := result diff i ;
40106: LD_ADDR_VAR 0 4
40110: PUSH
40111: LD_VAR 0 4
40115: PUSH
40116: LD_VAR 0 5
40120: DIFF
40121: ST_TO_ADDR
40122: GO 40081
40124: POP
40125: POP
// end ;
40126: LD_VAR 0 4
40130: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40131: LD_INT 0
40133: PPUSH
40134: PPUSH
40135: PPUSH
// result := true ;
40136: LD_ADDR_VAR 0 3
40140: PUSH
40141: LD_INT 1
40143: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40144: LD_ADDR_VAR 0 5
40148: PUSH
40149: LD_VAR 0 2
40153: PPUSH
40154: CALL_OW 480
40158: ST_TO_ADDR
// if not tmp then
40159: LD_VAR 0 5
40163: NOT
40164: IFFALSE 40168
// exit ;
40166: GO 40217
// for i in tmp do
40168: LD_ADDR_VAR 0 4
40172: PUSH
40173: LD_VAR 0 5
40177: PUSH
40178: FOR_IN
40179: IFFALSE 40215
// if GetTech ( i , side ) <> state_researched then
40181: LD_VAR 0 4
40185: PPUSH
40186: LD_VAR 0 1
40190: PPUSH
40191: CALL_OW 321
40195: PUSH
40196: LD_INT 2
40198: NONEQUAL
40199: IFFALSE 40213
// begin result := false ;
40201: LD_ADDR_VAR 0 3
40205: PUSH
40206: LD_INT 0
40208: ST_TO_ADDR
// exit ;
40209: POP
40210: POP
40211: GO 40217
// end ;
40213: GO 40178
40215: POP
40216: POP
// end ;
40217: LD_VAR 0 3
40221: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40222: LD_INT 0
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
40228: PPUSH
40229: PPUSH
40230: PPUSH
40231: PPUSH
40232: PPUSH
40233: PPUSH
40234: PPUSH
40235: PPUSH
40236: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40237: LD_VAR 0 1
40241: NOT
40242: PUSH
40243: LD_VAR 0 1
40247: PPUSH
40248: CALL_OW 257
40252: PUSH
40253: LD_INT 9
40255: NONEQUAL
40256: OR
40257: IFFALSE 40261
// exit ;
40259: GO 40834
// side := GetSide ( unit ) ;
40261: LD_ADDR_VAR 0 9
40265: PUSH
40266: LD_VAR 0 1
40270: PPUSH
40271: CALL_OW 255
40275: ST_TO_ADDR
// tech_space := tech_spacanom ;
40276: LD_ADDR_VAR 0 12
40280: PUSH
40281: LD_INT 29
40283: ST_TO_ADDR
// tech_time := tech_taurad ;
40284: LD_ADDR_VAR 0 13
40288: PUSH
40289: LD_INT 28
40291: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40292: LD_ADDR_VAR 0 11
40296: PUSH
40297: LD_VAR 0 1
40301: PPUSH
40302: CALL_OW 310
40306: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40307: LD_VAR 0 11
40311: PPUSH
40312: CALL_OW 247
40316: PUSH
40317: LD_INT 2
40319: EQUAL
40320: IFFALSE 40324
// exit ;
40322: GO 40834
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40324: LD_ADDR_VAR 0 8
40328: PUSH
40329: LD_INT 81
40331: PUSH
40332: LD_VAR 0 9
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 3
40343: PUSH
40344: LD_INT 21
40346: PUSH
40347: LD_INT 3
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PPUSH
40362: CALL_OW 69
40366: ST_TO_ADDR
// if not tmp then
40367: LD_VAR 0 8
40371: NOT
40372: IFFALSE 40376
// exit ;
40374: GO 40834
// if in_unit then
40376: LD_VAR 0 11
40380: IFFALSE 40404
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40382: LD_ADDR_VAR 0 10
40386: PUSH
40387: LD_VAR 0 8
40391: PPUSH
40392: LD_VAR 0 11
40396: PPUSH
40397: CALL_OW 74
40401: ST_TO_ADDR
40402: GO 40424
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40404: LD_ADDR_VAR 0 10
40408: PUSH
40409: LD_VAR 0 8
40413: PPUSH
40414: LD_VAR 0 1
40418: PPUSH
40419: CALL_OW 74
40423: ST_TO_ADDR
// if not enemy then
40424: LD_VAR 0 10
40428: NOT
40429: IFFALSE 40433
// exit ;
40431: GO 40834
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40433: LD_VAR 0 11
40437: PUSH
40438: LD_VAR 0 11
40442: PPUSH
40443: LD_VAR 0 10
40447: PPUSH
40448: CALL_OW 296
40452: PUSH
40453: LD_INT 13
40455: GREATER
40456: AND
40457: PUSH
40458: LD_VAR 0 1
40462: PPUSH
40463: LD_VAR 0 10
40467: PPUSH
40468: CALL_OW 296
40472: PUSH
40473: LD_INT 12
40475: GREATER
40476: OR
40477: IFFALSE 40481
// exit ;
40479: GO 40834
// missile := [ 1 ] ;
40481: LD_ADDR_VAR 0 14
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: EMPTY
40490: LIST
40491: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40492: LD_VAR 0 9
40496: PPUSH
40497: LD_VAR 0 12
40501: PPUSH
40502: CALL_OW 325
40506: IFFALSE 40535
// missile := Replace ( missile , missile + 1 , 2 ) ;
40508: LD_ADDR_VAR 0 14
40512: PUSH
40513: LD_VAR 0 14
40517: PPUSH
40518: LD_VAR 0 14
40522: PUSH
40523: LD_INT 1
40525: PLUS
40526: PPUSH
40527: LD_INT 2
40529: PPUSH
40530: CALL_OW 1
40534: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40535: LD_VAR 0 9
40539: PPUSH
40540: LD_VAR 0 13
40544: PPUSH
40545: CALL_OW 325
40549: PUSH
40550: LD_VAR 0 10
40554: PPUSH
40555: CALL_OW 255
40559: PPUSH
40560: LD_VAR 0 13
40564: PPUSH
40565: CALL_OW 325
40569: NOT
40570: AND
40571: IFFALSE 40600
// missile := Replace ( missile , missile + 1 , 3 ) ;
40573: LD_ADDR_VAR 0 14
40577: PUSH
40578: LD_VAR 0 14
40582: PPUSH
40583: LD_VAR 0 14
40587: PUSH
40588: LD_INT 1
40590: PLUS
40591: PPUSH
40592: LD_INT 3
40594: PPUSH
40595: CALL_OW 1
40599: ST_TO_ADDR
// if missile < 2 then
40600: LD_VAR 0 14
40604: PUSH
40605: LD_INT 2
40607: LESS
40608: IFFALSE 40612
// exit ;
40610: GO 40834
// x := GetX ( enemy ) ;
40612: LD_ADDR_VAR 0 4
40616: PUSH
40617: LD_VAR 0 10
40621: PPUSH
40622: CALL_OW 250
40626: ST_TO_ADDR
// y := GetY ( enemy ) ;
40627: LD_ADDR_VAR 0 5
40631: PUSH
40632: LD_VAR 0 10
40636: PPUSH
40637: CALL_OW 251
40641: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40642: LD_ADDR_VAR 0 6
40646: PUSH
40647: LD_VAR 0 4
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PPUSH
40656: LD_INT 1
40658: PPUSH
40659: CALL_OW 12
40663: PLUS
40664: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40665: LD_ADDR_VAR 0 7
40669: PUSH
40670: LD_VAR 0 5
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PPUSH
40679: LD_INT 1
40681: PPUSH
40682: CALL_OW 12
40686: PLUS
40687: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40688: LD_VAR 0 6
40692: PPUSH
40693: LD_VAR 0 7
40697: PPUSH
40698: CALL_OW 488
40702: NOT
40703: IFFALSE 40725
// begin _x := x ;
40705: LD_ADDR_VAR 0 6
40709: PUSH
40710: LD_VAR 0 4
40714: ST_TO_ADDR
// _y := y ;
40715: LD_ADDR_VAR 0 7
40719: PUSH
40720: LD_VAR 0 5
40724: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40725: LD_ADDR_VAR 0 3
40729: PUSH
40730: LD_INT 1
40732: PPUSH
40733: LD_VAR 0 14
40737: PPUSH
40738: CALL_OW 12
40742: ST_TO_ADDR
// case i of 1 :
40743: LD_VAR 0 3
40747: PUSH
40748: LD_INT 1
40750: DOUBLE
40751: EQUAL
40752: IFTRUE 40756
40754: GO 40773
40756: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40757: LD_VAR 0 1
40761: PPUSH
40762: LD_VAR 0 10
40766: PPUSH
40767: CALL_OW 115
40771: GO 40834
40773: LD_INT 2
40775: DOUBLE
40776: EQUAL
40777: IFTRUE 40781
40779: GO 40803
40781: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40782: LD_VAR 0 1
40786: PPUSH
40787: LD_VAR 0 6
40791: PPUSH
40792: LD_VAR 0 7
40796: PPUSH
40797: CALL_OW 153
40801: GO 40834
40803: LD_INT 3
40805: DOUBLE
40806: EQUAL
40807: IFTRUE 40811
40809: GO 40833
40811: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40812: LD_VAR 0 1
40816: PPUSH
40817: LD_VAR 0 6
40821: PPUSH
40822: LD_VAR 0 7
40826: PPUSH
40827: CALL_OW 154
40831: GO 40834
40833: POP
// end ;
40834: LD_VAR 0 2
40838: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40839: LD_INT 0
40841: PPUSH
40842: PPUSH
40843: PPUSH
40844: PPUSH
40845: PPUSH
40846: PPUSH
// if not unit or not building then
40847: LD_VAR 0 1
40851: NOT
40852: PUSH
40853: LD_VAR 0 2
40857: NOT
40858: OR
40859: IFFALSE 40863
// exit ;
40861: GO 41021
// x := GetX ( building ) ;
40863: LD_ADDR_VAR 0 5
40867: PUSH
40868: LD_VAR 0 2
40872: PPUSH
40873: CALL_OW 250
40877: ST_TO_ADDR
// y := GetY ( building ) ;
40878: LD_ADDR_VAR 0 6
40882: PUSH
40883: LD_VAR 0 2
40887: PPUSH
40888: CALL_OW 251
40892: ST_TO_ADDR
// for i = 0 to 5 do
40893: LD_ADDR_VAR 0 4
40897: PUSH
40898: DOUBLE
40899: LD_INT 0
40901: DEC
40902: ST_TO_ADDR
40903: LD_INT 5
40905: PUSH
40906: FOR_TO
40907: IFFALSE 41019
// begin _x := ShiftX ( x , i , 3 ) ;
40909: LD_ADDR_VAR 0 7
40913: PUSH
40914: LD_VAR 0 5
40918: PPUSH
40919: LD_VAR 0 4
40923: PPUSH
40924: LD_INT 3
40926: PPUSH
40927: CALL_OW 272
40931: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40932: LD_ADDR_VAR 0 8
40936: PUSH
40937: LD_VAR 0 6
40941: PPUSH
40942: LD_VAR 0 4
40946: PPUSH
40947: LD_INT 3
40949: PPUSH
40950: CALL_OW 273
40954: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40955: LD_VAR 0 7
40959: PPUSH
40960: LD_VAR 0 8
40964: PPUSH
40965: CALL_OW 488
40969: NOT
40970: IFFALSE 40974
// continue ;
40972: GO 40906
// if HexInfo ( _x , _y ) = 0 then
40974: LD_VAR 0 7
40978: PPUSH
40979: LD_VAR 0 8
40983: PPUSH
40984: CALL_OW 428
40988: PUSH
40989: LD_INT 0
40991: EQUAL
40992: IFFALSE 41017
// begin ComMoveXY ( unit , _x , _y ) ;
40994: LD_VAR 0 1
40998: PPUSH
40999: LD_VAR 0 7
41003: PPUSH
41004: LD_VAR 0 8
41008: PPUSH
41009: CALL_OW 111
// exit ;
41013: POP
41014: POP
41015: GO 41021
// end ; end ;
41017: GO 40906
41019: POP
41020: POP
// end ;
41021: LD_VAR 0 3
41025: RET
// export function ScanBase ( side , base_area ) ; begin
41026: LD_INT 0
41028: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41029: LD_ADDR_VAR 0 3
41033: PUSH
41034: LD_VAR 0 2
41038: PPUSH
41039: LD_INT 81
41041: PUSH
41042: LD_VAR 0 1
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PPUSH
41051: CALL_OW 70
41055: ST_TO_ADDR
// end ;
41056: LD_VAR 0 3
41060: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41061: LD_INT 0
41063: PPUSH
41064: PPUSH
41065: PPUSH
41066: PPUSH
// result := false ;
41067: LD_ADDR_VAR 0 2
41071: PUSH
41072: LD_INT 0
41074: ST_TO_ADDR
// side := GetSide ( unit ) ;
41075: LD_ADDR_VAR 0 3
41079: PUSH
41080: LD_VAR 0 1
41084: PPUSH
41085: CALL_OW 255
41089: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41090: LD_ADDR_VAR 0 4
41094: PUSH
41095: LD_VAR 0 1
41099: PPUSH
41100: CALL_OW 248
41104: ST_TO_ADDR
// case nat of 1 :
41105: LD_VAR 0 4
41109: PUSH
41110: LD_INT 1
41112: DOUBLE
41113: EQUAL
41114: IFTRUE 41118
41116: GO 41129
41118: POP
// tech := tech_lassight ; 2 :
41119: LD_ADDR_VAR 0 5
41123: PUSH
41124: LD_INT 12
41126: ST_TO_ADDR
41127: GO 41168
41129: LD_INT 2
41131: DOUBLE
41132: EQUAL
41133: IFTRUE 41137
41135: GO 41148
41137: POP
// tech := tech_mortar ; 3 :
41138: LD_ADDR_VAR 0 5
41142: PUSH
41143: LD_INT 41
41145: ST_TO_ADDR
41146: GO 41168
41148: LD_INT 3
41150: DOUBLE
41151: EQUAL
41152: IFTRUE 41156
41154: GO 41167
41156: POP
// tech := tech_bazooka ; end ;
41157: LD_ADDR_VAR 0 5
41161: PUSH
41162: LD_INT 44
41164: ST_TO_ADDR
41165: GO 41168
41167: POP
// if Researched ( side , tech ) then
41168: LD_VAR 0 3
41172: PPUSH
41173: LD_VAR 0 5
41177: PPUSH
41178: CALL_OW 325
41182: IFFALSE 41209
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41184: LD_ADDR_VAR 0 2
41188: PUSH
41189: LD_INT 5
41191: PUSH
41192: LD_INT 8
41194: PUSH
41195: LD_INT 9
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: LIST
41202: PUSH
41203: LD_VAR 0 4
41207: ARRAY
41208: ST_TO_ADDR
// end ;
41209: LD_VAR 0 2
41213: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41214: LD_INT 0
41216: PPUSH
41217: PPUSH
41218: PPUSH
// if not mines then
41219: LD_VAR 0 2
41223: NOT
41224: IFFALSE 41228
// exit ;
41226: GO 41372
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41228: LD_ADDR_VAR 0 5
41232: PUSH
41233: LD_INT 81
41235: PUSH
41236: LD_VAR 0 1
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 3
41247: PUSH
41248: LD_INT 21
41250: PUSH
41251: LD_INT 3
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PPUSH
41266: CALL_OW 69
41270: ST_TO_ADDR
// for i in mines do
41271: LD_ADDR_VAR 0 4
41275: PUSH
41276: LD_VAR 0 2
41280: PUSH
41281: FOR_IN
41282: IFFALSE 41370
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41284: LD_VAR 0 4
41288: PUSH
41289: LD_INT 1
41291: ARRAY
41292: PPUSH
41293: LD_VAR 0 4
41297: PUSH
41298: LD_INT 2
41300: ARRAY
41301: PPUSH
41302: CALL_OW 458
41306: NOT
41307: IFFALSE 41311
// continue ;
41309: GO 41281
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41311: LD_VAR 0 4
41315: PUSH
41316: LD_INT 1
41318: ARRAY
41319: PPUSH
41320: LD_VAR 0 4
41324: PUSH
41325: LD_INT 2
41327: ARRAY
41328: PPUSH
41329: CALL_OW 428
41333: PUSH
41334: LD_VAR 0 5
41338: IN
41339: IFFALSE 41368
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41341: LD_VAR 0 4
41345: PUSH
41346: LD_INT 1
41348: ARRAY
41349: PPUSH
41350: LD_VAR 0 4
41354: PUSH
41355: LD_INT 2
41357: ARRAY
41358: PPUSH
41359: LD_VAR 0 1
41363: PPUSH
41364: CALL_OW 456
// end ;
41368: GO 41281
41370: POP
41371: POP
// end ;
41372: LD_VAR 0 3
41376: RET
// export function Count ( array ) ; begin
41377: LD_INT 0
41379: PPUSH
// result := array + 0 ;
41380: LD_ADDR_VAR 0 2
41384: PUSH
41385: LD_VAR 0 1
41389: PUSH
41390: LD_INT 0
41392: PLUS
41393: ST_TO_ADDR
// end ;
41394: LD_VAR 0 2
41398: RET
// export function IsEmpty ( building ) ; begin
41399: LD_INT 0
41401: PPUSH
// if not building then
41402: LD_VAR 0 1
41406: NOT
41407: IFFALSE 41411
// exit ;
41409: GO 41454
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41411: LD_ADDR_VAR 0 2
41415: PUSH
41416: LD_VAR 0 1
41420: PUSH
41421: LD_INT 22
41423: PUSH
41424: LD_VAR 0 1
41428: PPUSH
41429: CALL_OW 255
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 58
41440: PUSH
41441: EMPTY
41442: LIST
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PPUSH
41448: CALL_OW 69
41452: IN
41453: ST_TO_ADDR
// end ;
41454: LD_VAR 0 2
41458: RET
// export function IsNotFull ( building ) ; var places ; begin
41459: LD_INT 0
41461: PPUSH
41462: PPUSH
// if not building then
41463: LD_VAR 0 1
41467: NOT
41468: IFFALSE 41472
// exit ;
41470: GO 41500
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41472: LD_ADDR_VAR 0 2
41476: PUSH
41477: LD_VAR 0 1
41481: PPUSH
41482: LD_INT 3
41484: PUSH
41485: LD_INT 62
41487: PUSH
41488: EMPTY
41489: LIST
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PPUSH
41495: CALL_OW 72
41499: ST_TO_ADDR
// end ;
41500: LD_VAR 0 2
41504: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41505: LD_INT 0
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
// tmp := [ ] ;
41511: LD_ADDR_VAR 0 3
41515: PUSH
41516: EMPTY
41517: ST_TO_ADDR
// list := [ ] ;
41518: LD_ADDR_VAR 0 5
41522: PUSH
41523: EMPTY
41524: ST_TO_ADDR
// for i = 16 to 25 do
41525: LD_ADDR_VAR 0 4
41529: PUSH
41530: DOUBLE
41531: LD_INT 16
41533: DEC
41534: ST_TO_ADDR
41535: LD_INT 25
41537: PUSH
41538: FOR_TO
41539: IFFALSE 41612
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41541: LD_ADDR_VAR 0 3
41545: PUSH
41546: LD_VAR 0 3
41550: PUSH
41551: LD_INT 22
41553: PUSH
41554: LD_VAR 0 1
41558: PPUSH
41559: CALL_OW 255
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 91
41570: PUSH
41571: LD_VAR 0 1
41575: PUSH
41576: LD_INT 6
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 30
41586: PUSH
41587: LD_VAR 0 4
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: PUSH
41601: EMPTY
41602: LIST
41603: PPUSH
41604: CALL_OW 69
41608: ADD
41609: ST_TO_ADDR
41610: GO 41538
41612: POP
41613: POP
// for i = 1 to tmp do
41614: LD_ADDR_VAR 0 4
41618: PUSH
41619: DOUBLE
41620: LD_INT 1
41622: DEC
41623: ST_TO_ADDR
41624: LD_VAR 0 3
41628: PUSH
41629: FOR_TO
41630: IFFALSE 41718
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41632: LD_ADDR_VAR 0 5
41636: PUSH
41637: LD_VAR 0 5
41641: PUSH
41642: LD_VAR 0 3
41646: PUSH
41647: LD_VAR 0 4
41651: ARRAY
41652: PPUSH
41653: CALL_OW 266
41657: PUSH
41658: LD_VAR 0 3
41662: PUSH
41663: LD_VAR 0 4
41667: ARRAY
41668: PPUSH
41669: CALL_OW 250
41673: PUSH
41674: LD_VAR 0 3
41678: PUSH
41679: LD_VAR 0 4
41683: ARRAY
41684: PPUSH
41685: CALL_OW 251
41689: PUSH
41690: LD_VAR 0 3
41694: PUSH
41695: LD_VAR 0 4
41699: ARRAY
41700: PPUSH
41701: CALL_OW 254
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: PUSH
41712: EMPTY
41713: LIST
41714: ADD
41715: ST_TO_ADDR
41716: GO 41629
41718: POP
41719: POP
// result := list ;
41720: LD_ADDR_VAR 0 2
41724: PUSH
41725: LD_VAR 0 5
41729: ST_TO_ADDR
// end ;
41730: LD_VAR 0 2
41734: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41735: LD_INT 0
41737: PPUSH
41738: PPUSH
41739: PPUSH
41740: PPUSH
41741: PPUSH
41742: PPUSH
41743: PPUSH
// if not factory then
41744: LD_VAR 0 1
41748: NOT
41749: IFFALSE 41753
// exit ;
41751: GO 42346
// if control = control_apeman then
41753: LD_VAR 0 4
41757: PUSH
41758: LD_INT 5
41760: EQUAL
41761: IFFALSE 41870
// begin tmp := UnitsInside ( factory ) ;
41763: LD_ADDR_VAR 0 8
41767: PUSH
41768: LD_VAR 0 1
41772: PPUSH
41773: CALL_OW 313
41777: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41778: LD_VAR 0 8
41782: PPUSH
41783: LD_INT 25
41785: PUSH
41786: LD_INT 12
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PPUSH
41793: CALL_OW 72
41797: NOT
41798: IFFALSE 41808
// control := control_manual ;
41800: LD_ADDR_VAR 0 4
41804: PUSH
41805: LD_INT 1
41807: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41808: LD_ADDR_VAR 0 8
41812: PUSH
41813: LD_VAR 0 1
41817: PPUSH
41818: CALL 41505 0 1
41822: ST_TO_ADDR
// if tmp then
41823: LD_VAR 0 8
41827: IFFALSE 41870
// begin for i in tmp do
41829: LD_ADDR_VAR 0 7
41833: PUSH
41834: LD_VAR 0 8
41838: PUSH
41839: FOR_IN
41840: IFFALSE 41868
// if i [ 1 ] = b_ext_radio then
41842: LD_VAR 0 7
41846: PUSH
41847: LD_INT 1
41849: ARRAY
41850: PUSH
41851: LD_INT 22
41853: EQUAL
41854: IFFALSE 41866
// begin control := control_remote ;
41856: LD_ADDR_VAR 0 4
41860: PUSH
41861: LD_INT 2
41863: ST_TO_ADDR
// break ;
41864: GO 41868
// end ;
41866: GO 41839
41868: POP
41869: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41870: LD_VAR 0 1
41874: PPUSH
41875: LD_VAR 0 2
41879: PPUSH
41880: LD_VAR 0 3
41884: PPUSH
41885: LD_VAR 0 4
41889: PPUSH
41890: LD_VAR 0 5
41894: PPUSH
41895: CALL_OW 448
41899: IFFALSE 41934
// begin result := [ chassis , engine , control , weapon ] ;
41901: LD_ADDR_VAR 0 6
41905: PUSH
41906: LD_VAR 0 2
41910: PUSH
41911: LD_VAR 0 3
41915: PUSH
41916: LD_VAR 0 4
41920: PUSH
41921: LD_VAR 0 5
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: ST_TO_ADDR
// exit ;
41932: GO 42346
// end ; _chassis := AvailableChassisList ( factory ) ;
41934: LD_ADDR_VAR 0 9
41938: PUSH
41939: LD_VAR 0 1
41943: PPUSH
41944: CALL_OW 475
41948: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41949: LD_ADDR_VAR 0 11
41953: PUSH
41954: LD_VAR 0 1
41958: PPUSH
41959: CALL_OW 476
41963: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41964: LD_ADDR_VAR 0 12
41968: PUSH
41969: LD_VAR 0 1
41973: PPUSH
41974: CALL_OW 477
41978: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41979: LD_ADDR_VAR 0 10
41983: PUSH
41984: LD_VAR 0 1
41988: PPUSH
41989: CALL_OW 478
41993: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41994: LD_VAR 0 9
41998: NOT
41999: PUSH
42000: LD_VAR 0 11
42004: NOT
42005: OR
42006: PUSH
42007: LD_VAR 0 12
42011: NOT
42012: OR
42013: PUSH
42014: LD_VAR 0 10
42018: NOT
42019: OR
42020: IFFALSE 42055
// begin result := [ chassis , engine , control , weapon ] ;
42022: LD_ADDR_VAR 0 6
42026: PUSH
42027: LD_VAR 0 2
42031: PUSH
42032: LD_VAR 0 3
42036: PUSH
42037: LD_VAR 0 4
42041: PUSH
42042: LD_VAR 0 5
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: ST_TO_ADDR
// exit ;
42053: GO 42346
// end ; if not chassis in _chassis then
42055: LD_VAR 0 2
42059: PUSH
42060: LD_VAR 0 9
42064: IN
42065: NOT
42066: IFFALSE 42092
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42068: LD_ADDR_VAR 0 2
42072: PUSH
42073: LD_VAR 0 9
42077: PUSH
42078: LD_INT 1
42080: PPUSH
42081: LD_VAR 0 9
42085: PPUSH
42086: CALL_OW 12
42090: ARRAY
42091: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42092: LD_VAR 0 2
42096: PPUSH
42097: LD_VAR 0 3
42101: PPUSH
42102: CALL 42351 0 2
42106: NOT
42107: IFFALSE 42166
// repeat engine := _engine [ 1 ] ;
42109: LD_ADDR_VAR 0 3
42113: PUSH
42114: LD_VAR 0 11
42118: PUSH
42119: LD_INT 1
42121: ARRAY
42122: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42123: LD_ADDR_VAR 0 11
42127: PUSH
42128: LD_VAR 0 11
42132: PPUSH
42133: LD_INT 1
42135: PPUSH
42136: CALL_OW 3
42140: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42141: LD_VAR 0 2
42145: PPUSH
42146: LD_VAR 0 3
42150: PPUSH
42151: CALL 42351 0 2
42155: PUSH
42156: LD_VAR 0 11
42160: PUSH
42161: EMPTY
42162: EQUAL
42163: OR
42164: IFFALSE 42109
// if not control in _control then
42166: LD_VAR 0 4
42170: PUSH
42171: LD_VAR 0 12
42175: IN
42176: NOT
42177: IFFALSE 42203
// control := _control [ rand ( 1 , _control ) ] ;
42179: LD_ADDR_VAR 0 4
42183: PUSH
42184: LD_VAR 0 12
42188: PUSH
42189: LD_INT 1
42191: PPUSH
42192: LD_VAR 0 12
42196: PPUSH
42197: CALL_OW 12
42201: ARRAY
42202: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42203: LD_VAR 0 2
42207: PPUSH
42208: LD_VAR 0 5
42212: PPUSH
42213: CALL 42571 0 2
42217: NOT
42218: IFFALSE 42277
// repeat weapon := _weapon [ 1 ] ;
42220: LD_ADDR_VAR 0 5
42224: PUSH
42225: LD_VAR 0 10
42229: PUSH
42230: LD_INT 1
42232: ARRAY
42233: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42234: LD_ADDR_VAR 0 10
42238: PUSH
42239: LD_VAR 0 10
42243: PPUSH
42244: LD_INT 1
42246: PPUSH
42247: CALL_OW 3
42251: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42252: LD_VAR 0 2
42256: PPUSH
42257: LD_VAR 0 5
42261: PPUSH
42262: CALL 42571 0 2
42266: PUSH
42267: LD_VAR 0 10
42271: PUSH
42272: EMPTY
42273: EQUAL
42274: OR
42275: IFFALSE 42220
// result := [ ] ;
42277: LD_ADDR_VAR 0 6
42281: PUSH
42282: EMPTY
42283: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42284: LD_VAR 0 1
42288: PPUSH
42289: LD_VAR 0 2
42293: PPUSH
42294: LD_VAR 0 3
42298: PPUSH
42299: LD_VAR 0 4
42303: PPUSH
42304: LD_VAR 0 5
42308: PPUSH
42309: CALL_OW 448
42313: IFFALSE 42346
// result := [ chassis , engine , control , weapon ] ;
42315: LD_ADDR_VAR 0 6
42319: PUSH
42320: LD_VAR 0 2
42324: PUSH
42325: LD_VAR 0 3
42329: PUSH
42330: LD_VAR 0 4
42334: PUSH
42335: LD_VAR 0 5
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: ST_TO_ADDR
// end ;
42346: LD_VAR 0 6
42350: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42351: LD_INT 0
42353: PPUSH
// if not chassis or not engine then
42354: LD_VAR 0 1
42358: NOT
42359: PUSH
42360: LD_VAR 0 2
42364: NOT
42365: OR
42366: IFFALSE 42370
// exit ;
42368: GO 42566
// case engine of engine_solar :
42370: LD_VAR 0 2
42374: PUSH
42375: LD_INT 2
42377: DOUBLE
42378: EQUAL
42379: IFTRUE 42383
42381: GO 42421
42383: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42384: LD_ADDR_VAR 0 3
42388: PUSH
42389: LD_INT 11
42391: PUSH
42392: LD_INT 12
42394: PUSH
42395: LD_INT 13
42397: PUSH
42398: LD_INT 14
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: LD_INT 3
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: ST_TO_ADDR
42419: GO 42550
42421: LD_INT 1
42423: DOUBLE
42424: EQUAL
42425: IFTRUE 42429
42427: GO 42491
42429: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42430: LD_ADDR_VAR 0 3
42434: PUSH
42435: LD_INT 11
42437: PUSH
42438: LD_INT 12
42440: PUSH
42441: LD_INT 13
42443: PUSH
42444: LD_INT 14
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: LD_INT 3
42455: PUSH
42456: LD_INT 4
42458: PUSH
42459: LD_INT 5
42461: PUSH
42462: LD_INT 21
42464: PUSH
42465: LD_INT 23
42467: PUSH
42468: LD_INT 22
42470: PUSH
42471: LD_INT 24
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: ST_TO_ADDR
42489: GO 42550
42491: LD_INT 3
42493: DOUBLE
42494: EQUAL
42495: IFTRUE 42499
42497: GO 42549
42499: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42500: LD_ADDR_VAR 0 3
42504: PUSH
42505: LD_INT 13
42507: PUSH
42508: LD_INT 14
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: LD_INT 3
42516: PUSH
42517: LD_INT 4
42519: PUSH
42520: LD_INT 5
42522: PUSH
42523: LD_INT 21
42525: PUSH
42526: LD_INT 22
42528: PUSH
42529: LD_INT 23
42531: PUSH
42532: LD_INT 24
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: ST_TO_ADDR
42547: GO 42550
42549: POP
// result := ( chassis in result ) ;
42550: LD_ADDR_VAR 0 3
42554: PUSH
42555: LD_VAR 0 1
42559: PUSH
42560: LD_VAR 0 3
42564: IN
42565: ST_TO_ADDR
// end ;
42566: LD_VAR 0 3
42570: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42571: LD_INT 0
42573: PPUSH
// if not chassis or not weapon then
42574: LD_VAR 0 1
42578: NOT
42579: PUSH
42580: LD_VAR 0 2
42584: NOT
42585: OR
42586: IFFALSE 42590
// exit ;
42588: GO 43650
// case weapon of us_machine_gun :
42590: LD_VAR 0 2
42594: PUSH
42595: LD_INT 2
42597: DOUBLE
42598: EQUAL
42599: IFTRUE 42603
42601: GO 42633
42603: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42604: LD_ADDR_VAR 0 3
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: LD_INT 3
42617: PUSH
42618: LD_INT 4
42620: PUSH
42621: LD_INT 5
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: ST_TO_ADDR
42631: GO 43634
42633: LD_INT 3
42635: DOUBLE
42636: EQUAL
42637: IFTRUE 42641
42639: GO 42671
42641: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42642: LD_ADDR_VAR 0 3
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: LD_INT 4
42658: PUSH
42659: LD_INT 5
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: ST_TO_ADDR
42669: GO 43634
42671: LD_INT 11
42673: DOUBLE
42674: EQUAL
42675: IFTRUE 42679
42677: GO 42709
42679: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42680: LD_ADDR_VAR 0 3
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 3
42693: PUSH
42694: LD_INT 4
42696: PUSH
42697: LD_INT 5
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: ST_TO_ADDR
42707: GO 43634
42709: LD_INT 4
42711: DOUBLE
42712: EQUAL
42713: IFTRUE 42717
42715: GO 42743
42717: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42718: LD_ADDR_VAR 0 3
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: LD_INT 3
42728: PUSH
42729: LD_INT 4
42731: PUSH
42732: LD_INT 5
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: ST_TO_ADDR
42741: GO 43634
42743: LD_INT 5
42745: DOUBLE
42746: EQUAL
42747: IFTRUE 42751
42749: GO 42777
42751: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42752: LD_ADDR_VAR 0 3
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: LD_INT 3
42762: PUSH
42763: LD_INT 4
42765: PUSH
42766: LD_INT 5
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: ST_TO_ADDR
42775: GO 43634
42777: LD_INT 9
42779: DOUBLE
42780: EQUAL
42781: IFTRUE 42785
42783: GO 42811
42785: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42786: LD_ADDR_VAR 0 3
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: LD_INT 3
42796: PUSH
42797: LD_INT 4
42799: PUSH
42800: LD_INT 5
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: ST_TO_ADDR
42809: GO 43634
42811: LD_INT 7
42813: DOUBLE
42814: EQUAL
42815: IFTRUE 42819
42817: GO 42845
42819: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42820: LD_ADDR_VAR 0 3
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: LD_INT 3
42830: PUSH
42831: LD_INT 4
42833: PUSH
42834: LD_INT 5
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: ST_TO_ADDR
42843: GO 43634
42845: LD_INT 12
42847: DOUBLE
42848: EQUAL
42849: IFTRUE 42853
42851: GO 42879
42853: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42854: LD_ADDR_VAR 0 3
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: LD_INT 3
42864: PUSH
42865: LD_INT 4
42867: PUSH
42868: LD_INT 5
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: ST_TO_ADDR
42877: GO 43634
42879: LD_INT 13
42881: DOUBLE
42882: EQUAL
42883: IFTRUE 42887
42885: GO 42913
42887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42888: LD_ADDR_VAR 0 3
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: LD_INT 3
42898: PUSH
42899: LD_INT 4
42901: PUSH
42902: LD_INT 5
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: ST_TO_ADDR
42911: GO 43634
42913: LD_INT 14
42915: DOUBLE
42916: EQUAL
42917: IFTRUE 42921
42919: GO 42939
42921: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42922: LD_ADDR_VAR 0 3
42926: PUSH
42927: LD_INT 4
42929: PUSH
42930: LD_INT 5
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: ST_TO_ADDR
42937: GO 43634
42939: LD_INT 6
42941: DOUBLE
42942: EQUAL
42943: IFTRUE 42947
42945: GO 42965
42947: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42948: LD_ADDR_VAR 0 3
42952: PUSH
42953: LD_INT 4
42955: PUSH
42956: LD_INT 5
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: ST_TO_ADDR
42963: GO 43634
42965: LD_INT 10
42967: DOUBLE
42968: EQUAL
42969: IFTRUE 42973
42971: GO 42991
42973: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42974: LD_ADDR_VAR 0 3
42978: PUSH
42979: LD_INT 4
42981: PUSH
42982: LD_INT 5
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: ST_TO_ADDR
42989: GO 43634
42991: LD_INT 22
42993: DOUBLE
42994: EQUAL
42995: IFTRUE 42999
42997: GO 43025
42999: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43000: LD_ADDR_VAR 0 3
43004: PUSH
43005: LD_INT 11
43007: PUSH
43008: LD_INT 12
43010: PUSH
43011: LD_INT 13
43013: PUSH
43014: LD_INT 14
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: ST_TO_ADDR
43023: GO 43634
43025: LD_INT 23
43027: DOUBLE
43028: EQUAL
43029: IFTRUE 43033
43031: GO 43059
43033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43034: LD_ADDR_VAR 0 3
43038: PUSH
43039: LD_INT 11
43041: PUSH
43042: LD_INT 12
43044: PUSH
43045: LD_INT 13
43047: PUSH
43048: LD_INT 14
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: ST_TO_ADDR
43057: GO 43634
43059: LD_INT 24
43061: DOUBLE
43062: EQUAL
43063: IFTRUE 43067
43065: GO 43093
43067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43068: LD_ADDR_VAR 0 3
43072: PUSH
43073: LD_INT 11
43075: PUSH
43076: LD_INT 12
43078: PUSH
43079: LD_INT 13
43081: PUSH
43082: LD_INT 14
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: ST_TO_ADDR
43091: GO 43634
43093: LD_INT 30
43095: DOUBLE
43096: EQUAL
43097: IFTRUE 43101
43099: GO 43127
43101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43102: LD_ADDR_VAR 0 3
43106: PUSH
43107: LD_INT 11
43109: PUSH
43110: LD_INT 12
43112: PUSH
43113: LD_INT 13
43115: PUSH
43116: LD_INT 14
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: ST_TO_ADDR
43125: GO 43634
43127: LD_INT 25
43129: DOUBLE
43130: EQUAL
43131: IFTRUE 43135
43133: GO 43153
43135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43136: LD_ADDR_VAR 0 3
43140: PUSH
43141: LD_INT 13
43143: PUSH
43144: LD_INT 14
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: ST_TO_ADDR
43151: GO 43634
43153: LD_INT 27
43155: DOUBLE
43156: EQUAL
43157: IFTRUE 43161
43159: GO 43179
43161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43162: LD_ADDR_VAR 0 3
43166: PUSH
43167: LD_INT 13
43169: PUSH
43170: LD_INT 14
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: ST_TO_ADDR
43177: GO 43634
43179: LD_INT 92
43181: DOUBLE
43182: EQUAL
43183: IFTRUE 43187
43185: GO 43213
43187: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43188: LD_ADDR_VAR 0 3
43192: PUSH
43193: LD_INT 11
43195: PUSH
43196: LD_INT 12
43198: PUSH
43199: LD_INT 13
43201: PUSH
43202: LD_INT 14
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: ST_TO_ADDR
43211: GO 43634
43213: LD_INT 28
43215: DOUBLE
43216: EQUAL
43217: IFTRUE 43221
43219: GO 43239
43221: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43222: LD_ADDR_VAR 0 3
43226: PUSH
43227: LD_INT 13
43229: PUSH
43230: LD_INT 14
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: ST_TO_ADDR
43237: GO 43634
43239: LD_INT 29
43241: DOUBLE
43242: EQUAL
43243: IFTRUE 43247
43245: GO 43265
43247: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43248: LD_ADDR_VAR 0 3
43252: PUSH
43253: LD_INT 13
43255: PUSH
43256: LD_INT 14
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: ST_TO_ADDR
43263: GO 43634
43265: LD_INT 31
43267: DOUBLE
43268: EQUAL
43269: IFTRUE 43273
43271: GO 43291
43273: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43274: LD_ADDR_VAR 0 3
43278: PUSH
43279: LD_INT 13
43281: PUSH
43282: LD_INT 14
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: ST_TO_ADDR
43289: GO 43634
43291: LD_INT 26
43293: DOUBLE
43294: EQUAL
43295: IFTRUE 43299
43297: GO 43317
43299: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43300: LD_ADDR_VAR 0 3
43304: PUSH
43305: LD_INT 13
43307: PUSH
43308: LD_INT 14
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: ST_TO_ADDR
43315: GO 43634
43317: LD_INT 42
43319: DOUBLE
43320: EQUAL
43321: IFTRUE 43325
43323: GO 43351
43325: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43326: LD_ADDR_VAR 0 3
43330: PUSH
43331: LD_INT 21
43333: PUSH
43334: LD_INT 22
43336: PUSH
43337: LD_INT 23
43339: PUSH
43340: LD_INT 24
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: ST_TO_ADDR
43349: GO 43634
43351: LD_INT 43
43353: DOUBLE
43354: EQUAL
43355: IFTRUE 43359
43357: GO 43385
43359: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43360: LD_ADDR_VAR 0 3
43364: PUSH
43365: LD_INT 21
43367: PUSH
43368: LD_INT 22
43370: PUSH
43371: LD_INT 23
43373: PUSH
43374: LD_INT 24
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: ST_TO_ADDR
43383: GO 43634
43385: LD_INT 44
43387: DOUBLE
43388: EQUAL
43389: IFTRUE 43393
43391: GO 43419
43393: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43394: LD_ADDR_VAR 0 3
43398: PUSH
43399: LD_INT 21
43401: PUSH
43402: LD_INT 22
43404: PUSH
43405: LD_INT 23
43407: PUSH
43408: LD_INT 24
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: ST_TO_ADDR
43417: GO 43634
43419: LD_INT 45
43421: DOUBLE
43422: EQUAL
43423: IFTRUE 43427
43425: GO 43453
43427: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43428: LD_ADDR_VAR 0 3
43432: PUSH
43433: LD_INT 21
43435: PUSH
43436: LD_INT 22
43438: PUSH
43439: LD_INT 23
43441: PUSH
43442: LD_INT 24
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: ST_TO_ADDR
43451: GO 43634
43453: LD_INT 49
43455: DOUBLE
43456: EQUAL
43457: IFTRUE 43461
43459: GO 43487
43461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43462: LD_ADDR_VAR 0 3
43466: PUSH
43467: LD_INT 21
43469: PUSH
43470: LD_INT 22
43472: PUSH
43473: LD_INT 23
43475: PUSH
43476: LD_INT 24
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: ST_TO_ADDR
43485: GO 43634
43487: LD_INT 51
43489: DOUBLE
43490: EQUAL
43491: IFTRUE 43495
43493: GO 43521
43495: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43496: LD_ADDR_VAR 0 3
43500: PUSH
43501: LD_INT 21
43503: PUSH
43504: LD_INT 22
43506: PUSH
43507: LD_INT 23
43509: PUSH
43510: LD_INT 24
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: ST_TO_ADDR
43519: GO 43634
43521: LD_INT 52
43523: DOUBLE
43524: EQUAL
43525: IFTRUE 43529
43527: GO 43555
43529: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43530: LD_ADDR_VAR 0 3
43534: PUSH
43535: LD_INT 21
43537: PUSH
43538: LD_INT 22
43540: PUSH
43541: LD_INT 23
43543: PUSH
43544: LD_INT 24
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: ST_TO_ADDR
43553: GO 43634
43555: LD_INT 53
43557: DOUBLE
43558: EQUAL
43559: IFTRUE 43563
43561: GO 43581
43563: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43564: LD_ADDR_VAR 0 3
43568: PUSH
43569: LD_INT 23
43571: PUSH
43572: LD_INT 24
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: ST_TO_ADDR
43579: GO 43634
43581: LD_INT 46
43583: DOUBLE
43584: EQUAL
43585: IFTRUE 43589
43587: GO 43607
43589: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43590: LD_ADDR_VAR 0 3
43594: PUSH
43595: LD_INT 23
43597: PUSH
43598: LD_INT 24
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: ST_TO_ADDR
43605: GO 43634
43607: LD_INT 47
43609: DOUBLE
43610: EQUAL
43611: IFTRUE 43615
43613: GO 43633
43615: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43616: LD_ADDR_VAR 0 3
43620: PUSH
43621: LD_INT 23
43623: PUSH
43624: LD_INT 24
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: ST_TO_ADDR
43631: GO 43634
43633: POP
// result := ( chassis in result ) ;
43634: LD_ADDR_VAR 0 3
43638: PUSH
43639: LD_VAR 0 1
43643: PUSH
43644: LD_VAR 0 3
43648: IN
43649: ST_TO_ADDR
// end ;
43650: LD_VAR 0 3
43654: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43655: LD_INT 0
43657: PPUSH
43658: PPUSH
43659: PPUSH
43660: PPUSH
43661: PPUSH
43662: PPUSH
43663: PPUSH
// result := array ;
43664: LD_ADDR_VAR 0 5
43668: PUSH
43669: LD_VAR 0 1
43673: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43674: LD_VAR 0 1
43678: NOT
43679: PUSH
43680: LD_VAR 0 2
43684: NOT
43685: OR
43686: PUSH
43687: LD_VAR 0 3
43691: NOT
43692: OR
43693: PUSH
43694: LD_VAR 0 2
43698: PUSH
43699: LD_VAR 0 1
43703: GREATER
43704: OR
43705: PUSH
43706: LD_VAR 0 3
43710: PUSH
43711: LD_VAR 0 1
43715: GREATER
43716: OR
43717: IFFALSE 43721
// exit ;
43719: GO 44017
// if direction then
43721: LD_VAR 0 4
43725: IFFALSE 43789
// begin d := 1 ;
43727: LD_ADDR_VAR 0 9
43731: PUSH
43732: LD_INT 1
43734: ST_TO_ADDR
// if i_from > i_to then
43735: LD_VAR 0 2
43739: PUSH
43740: LD_VAR 0 3
43744: GREATER
43745: IFFALSE 43771
// length := ( array - i_from ) + i_to else
43747: LD_ADDR_VAR 0 11
43751: PUSH
43752: LD_VAR 0 1
43756: PUSH
43757: LD_VAR 0 2
43761: MINUS
43762: PUSH
43763: LD_VAR 0 3
43767: PLUS
43768: ST_TO_ADDR
43769: GO 43787
// length := i_to - i_from ;
43771: LD_ADDR_VAR 0 11
43775: PUSH
43776: LD_VAR 0 3
43780: PUSH
43781: LD_VAR 0 2
43785: MINUS
43786: ST_TO_ADDR
// end else
43787: GO 43850
// begin d := - 1 ;
43789: LD_ADDR_VAR 0 9
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: ST_TO_ADDR
// if i_from > i_to then
43798: LD_VAR 0 2
43802: PUSH
43803: LD_VAR 0 3
43807: GREATER
43808: IFFALSE 43828
// length := i_from - i_to else
43810: LD_ADDR_VAR 0 11
43814: PUSH
43815: LD_VAR 0 2
43819: PUSH
43820: LD_VAR 0 3
43824: MINUS
43825: ST_TO_ADDR
43826: GO 43850
// length := ( array - i_to ) + i_from ;
43828: LD_ADDR_VAR 0 11
43832: PUSH
43833: LD_VAR 0 1
43837: PUSH
43838: LD_VAR 0 3
43842: MINUS
43843: PUSH
43844: LD_VAR 0 2
43848: PLUS
43849: ST_TO_ADDR
// end ; if not length then
43850: LD_VAR 0 11
43854: NOT
43855: IFFALSE 43859
// exit ;
43857: GO 44017
// tmp := array ;
43859: LD_ADDR_VAR 0 10
43863: PUSH
43864: LD_VAR 0 1
43868: ST_TO_ADDR
// for i = 1 to length do
43869: LD_ADDR_VAR 0 6
43873: PUSH
43874: DOUBLE
43875: LD_INT 1
43877: DEC
43878: ST_TO_ADDR
43879: LD_VAR 0 11
43883: PUSH
43884: FOR_TO
43885: IFFALSE 44005
// begin for j = 1 to array do
43887: LD_ADDR_VAR 0 7
43891: PUSH
43892: DOUBLE
43893: LD_INT 1
43895: DEC
43896: ST_TO_ADDR
43897: LD_VAR 0 1
43901: PUSH
43902: FOR_TO
43903: IFFALSE 43991
// begin k := j + d ;
43905: LD_ADDR_VAR 0 8
43909: PUSH
43910: LD_VAR 0 7
43914: PUSH
43915: LD_VAR 0 9
43919: PLUS
43920: ST_TO_ADDR
// if k > array then
43921: LD_VAR 0 8
43925: PUSH
43926: LD_VAR 0 1
43930: GREATER
43931: IFFALSE 43941
// k := 1 ;
43933: LD_ADDR_VAR 0 8
43937: PUSH
43938: LD_INT 1
43940: ST_TO_ADDR
// if not k then
43941: LD_VAR 0 8
43945: NOT
43946: IFFALSE 43958
// k := array ;
43948: LD_ADDR_VAR 0 8
43952: PUSH
43953: LD_VAR 0 1
43957: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43958: LD_ADDR_VAR 0 10
43962: PUSH
43963: LD_VAR 0 10
43967: PPUSH
43968: LD_VAR 0 8
43972: PPUSH
43973: LD_VAR 0 1
43977: PUSH
43978: LD_VAR 0 7
43982: ARRAY
43983: PPUSH
43984: CALL_OW 1
43988: ST_TO_ADDR
// end ;
43989: GO 43902
43991: POP
43992: POP
// array := tmp ;
43993: LD_ADDR_VAR 0 1
43997: PUSH
43998: LD_VAR 0 10
44002: ST_TO_ADDR
// end ;
44003: GO 43884
44005: POP
44006: POP
// result := array ;
44007: LD_ADDR_VAR 0 5
44011: PUSH
44012: LD_VAR 0 1
44016: ST_TO_ADDR
// end ;
44017: LD_VAR 0 5
44021: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44022: LD_INT 0
44024: PPUSH
44025: PPUSH
// result := 0 ;
44026: LD_ADDR_VAR 0 3
44030: PUSH
44031: LD_INT 0
44033: ST_TO_ADDR
// if not array or not value in array then
44034: LD_VAR 0 1
44038: NOT
44039: PUSH
44040: LD_VAR 0 2
44044: PUSH
44045: LD_VAR 0 1
44049: IN
44050: NOT
44051: OR
44052: IFFALSE 44056
// exit ;
44054: GO 44110
// for i = 1 to array do
44056: LD_ADDR_VAR 0 4
44060: PUSH
44061: DOUBLE
44062: LD_INT 1
44064: DEC
44065: ST_TO_ADDR
44066: LD_VAR 0 1
44070: PUSH
44071: FOR_TO
44072: IFFALSE 44108
// if value = array [ i ] then
44074: LD_VAR 0 2
44078: PUSH
44079: LD_VAR 0 1
44083: PUSH
44084: LD_VAR 0 4
44088: ARRAY
44089: EQUAL
44090: IFFALSE 44106
// begin result := i ;
44092: LD_ADDR_VAR 0 3
44096: PUSH
44097: LD_VAR 0 4
44101: ST_TO_ADDR
// exit ;
44102: POP
44103: POP
44104: GO 44110
// end ;
44106: GO 44071
44108: POP
44109: POP
// end ;
44110: LD_VAR 0 3
44114: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44115: LD_INT 0
44117: PPUSH
// vc_chassis := chassis ;
44118: LD_ADDR_OWVAR 37
44122: PUSH
44123: LD_VAR 0 1
44127: ST_TO_ADDR
// vc_engine := engine ;
44128: LD_ADDR_OWVAR 39
44132: PUSH
44133: LD_VAR 0 2
44137: ST_TO_ADDR
// vc_control := control ;
44138: LD_ADDR_OWVAR 38
44142: PUSH
44143: LD_VAR 0 3
44147: ST_TO_ADDR
// vc_weapon := weapon ;
44148: LD_ADDR_OWVAR 40
44152: PUSH
44153: LD_VAR 0 4
44157: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44158: LD_ADDR_OWVAR 41
44162: PUSH
44163: LD_VAR 0 5
44167: ST_TO_ADDR
// end ;
44168: LD_VAR 0 6
44172: RET
// export function WantPlant ( unit ) ; var task ; begin
44173: LD_INT 0
44175: PPUSH
44176: PPUSH
// result := false ;
44177: LD_ADDR_VAR 0 2
44181: PUSH
44182: LD_INT 0
44184: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44185: LD_ADDR_VAR 0 3
44189: PUSH
44190: LD_VAR 0 1
44194: PPUSH
44195: CALL_OW 437
44199: ST_TO_ADDR
// if task then
44200: LD_VAR 0 3
44204: IFFALSE 44232
// if task [ 1 ] [ 1 ] = p then
44206: LD_VAR 0 3
44210: PUSH
44211: LD_INT 1
44213: ARRAY
44214: PUSH
44215: LD_INT 1
44217: ARRAY
44218: PUSH
44219: LD_STRING p
44221: EQUAL
44222: IFFALSE 44232
// result := true ;
44224: LD_ADDR_VAR 0 2
44228: PUSH
44229: LD_INT 1
44231: ST_TO_ADDR
// end ;
44232: LD_VAR 0 2
44236: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44237: LD_INT 0
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
// if pos < 1 then
44243: LD_VAR 0 2
44247: PUSH
44248: LD_INT 1
44250: LESS
44251: IFFALSE 44255
// exit ;
44253: GO 44558
// if pos = 1 then
44255: LD_VAR 0 2
44259: PUSH
44260: LD_INT 1
44262: EQUAL
44263: IFFALSE 44296
// result := Replace ( arr , pos [ 1 ] , value ) else
44265: LD_ADDR_VAR 0 4
44269: PUSH
44270: LD_VAR 0 1
44274: PPUSH
44275: LD_VAR 0 2
44279: PUSH
44280: LD_INT 1
44282: ARRAY
44283: PPUSH
44284: LD_VAR 0 3
44288: PPUSH
44289: CALL_OW 1
44293: ST_TO_ADDR
44294: GO 44558
// begin tmp := arr ;
44296: LD_ADDR_VAR 0 6
44300: PUSH
44301: LD_VAR 0 1
44305: ST_TO_ADDR
// s_arr := [ tmp ] ;
44306: LD_ADDR_VAR 0 7
44310: PUSH
44311: LD_VAR 0 6
44315: PUSH
44316: EMPTY
44317: LIST
44318: ST_TO_ADDR
// for i = 1 to pos - 1 do
44319: LD_ADDR_VAR 0 5
44323: PUSH
44324: DOUBLE
44325: LD_INT 1
44327: DEC
44328: ST_TO_ADDR
44329: LD_VAR 0 2
44333: PUSH
44334: LD_INT 1
44336: MINUS
44337: PUSH
44338: FOR_TO
44339: IFFALSE 44384
// begin tmp := tmp [ pos [ i ] ] ;
44341: LD_ADDR_VAR 0 6
44345: PUSH
44346: LD_VAR 0 6
44350: PUSH
44351: LD_VAR 0 2
44355: PUSH
44356: LD_VAR 0 5
44360: ARRAY
44361: ARRAY
44362: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44363: LD_ADDR_VAR 0 7
44367: PUSH
44368: LD_VAR 0 7
44372: PUSH
44373: LD_VAR 0 6
44377: PUSH
44378: EMPTY
44379: LIST
44380: ADD
44381: ST_TO_ADDR
// end ;
44382: GO 44338
44384: POP
44385: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44386: LD_ADDR_VAR 0 6
44390: PUSH
44391: LD_VAR 0 6
44395: PPUSH
44396: LD_VAR 0 2
44400: PUSH
44401: LD_VAR 0 2
44405: ARRAY
44406: PPUSH
44407: LD_VAR 0 3
44411: PPUSH
44412: CALL_OW 1
44416: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44417: LD_ADDR_VAR 0 7
44421: PUSH
44422: LD_VAR 0 7
44426: PPUSH
44427: LD_VAR 0 7
44431: PPUSH
44432: LD_VAR 0 6
44436: PPUSH
44437: CALL_OW 1
44441: ST_TO_ADDR
// for i = s_arr downto 2 do
44442: LD_ADDR_VAR 0 5
44446: PUSH
44447: DOUBLE
44448: LD_VAR 0 7
44452: INC
44453: ST_TO_ADDR
44454: LD_INT 2
44456: PUSH
44457: FOR_DOWNTO
44458: IFFALSE 44542
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44460: LD_ADDR_VAR 0 6
44464: PUSH
44465: LD_VAR 0 7
44469: PUSH
44470: LD_VAR 0 5
44474: PUSH
44475: LD_INT 1
44477: MINUS
44478: ARRAY
44479: PPUSH
44480: LD_VAR 0 2
44484: PUSH
44485: LD_VAR 0 5
44489: PUSH
44490: LD_INT 1
44492: MINUS
44493: ARRAY
44494: PPUSH
44495: LD_VAR 0 7
44499: PUSH
44500: LD_VAR 0 5
44504: ARRAY
44505: PPUSH
44506: CALL_OW 1
44510: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44511: LD_ADDR_VAR 0 7
44515: PUSH
44516: LD_VAR 0 7
44520: PPUSH
44521: LD_VAR 0 5
44525: PUSH
44526: LD_INT 1
44528: MINUS
44529: PPUSH
44530: LD_VAR 0 6
44534: PPUSH
44535: CALL_OW 1
44539: ST_TO_ADDR
// end ;
44540: GO 44457
44542: POP
44543: POP
// result := s_arr [ 1 ] ;
44544: LD_ADDR_VAR 0 4
44548: PUSH
44549: LD_VAR 0 7
44553: PUSH
44554: LD_INT 1
44556: ARRAY
44557: ST_TO_ADDR
// end ; end ;
44558: LD_VAR 0 4
44562: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44563: LD_INT 0
44565: PPUSH
44566: PPUSH
// if not list then
44567: LD_VAR 0 1
44571: NOT
44572: IFFALSE 44576
// exit ;
44574: GO 44667
// i := list [ pos1 ] ;
44576: LD_ADDR_VAR 0 5
44580: PUSH
44581: LD_VAR 0 1
44585: PUSH
44586: LD_VAR 0 2
44590: ARRAY
44591: ST_TO_ADDR
// if not i then
44592: LD_VAR 0 5
44596: NOT
44597: IFFALSE 44601
// exit ;
44599: GO 44667
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44601: LD_ADDR_VAR 0 1
44605: PUSH
44606: LD_VAR 0 1
44610: PPUSH
44611: LD_VAR 0 2
44615: PPUSH
44616: LD_VAR 0 1
44620: PUSH
44621: LD_VAR 0 3
44625: ARRAY
44626: PPUSH
44627: CALL_OW 1
44631: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44632: LD_ADDR_VAR 0 1
44636: PUSH
44637: LD_VAR 0 1
44641: PPUSH
44642: LD_VAR 0 3
44646: PPUSH
44647: LD_VAR 0 5
44651: PPUSH
44652: CALL_OW 1
44656: ST_TO_ADDR
// result := list ;
44657: LD_ADDR_VAR 0 4
44661: PUSH
44662: LD_VAR 0 1
44666: ST_TO_ADDR
// end ;
44667: LD_VAR 0 4
44671: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44672: LD_INT 0
44674: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44675: LD_ADDR_VAR 0 5
44679: PUSH
44680: LD_VAR 0 1
44684: PPUSH
44685: CALL_OW 250
44689: PPUSH
44690: LD_VAR 0 1
44694: PPUSH
44695: CALL_OW 251
44699: PPUSH
44700: LD_VAR 0 2
44704: PPUSH
44705: LD_VAR 0 3
44709: PPUSH
44710: LD_VAR 0 4
44714: PPUSH
44715: CALL 45093 0 5
44719: ST_TO_ADDR
// end ;
44720: LD_VAR 0 5
44724: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
44725: LD_INT 0
44727: PPUSH
44728: PPUSH
44729: PPUSH
44730: PPUSH
// if not list or not unit then
44731: LD_VAR 0 2
44735: NOT
44736: PUSH
44737: LD_VAR 0 1
44741: NOT
44742: OR
44743: IFFALSE 44747
// exit ;
44745: GO 45088
// result := [ ] ;
44747: LD_ADDR_VAR 0 5
44751: PUSH
44752: EMPTY
44753: ST_TO_ADDR
// for i in list do
44754: LD_ADDR_VAR 0 6
44758: PUSH
44759: LD_VAR 0 2
44763: PUSH
44764: FOR_IN
44765: IFFALSE 44983
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44767: LD_ADDR_VAR 0 8
44771: PUSH
44772: LD_VAR 0 1
44776: PPUSH
44777: LD_VAR 0 6
44781: PUSH
44782: LD_INT 1
44784: ARRAY
44785: PPUSH
44786: LD_VAR 0 6
44790: PUSH
44791: LD_INT 2
44793: ARRAY
44794: PPUSH
44795: CALL_OW 297
44799: ST_TO_ADDR
// if not Count ( result ) then
44800: LD_VAR 0 5
44804: PPUSH
44805: CALL 41377 0 1
44809: NOT
44810: IFFALSE 44843
// begin result := Join ( result , [ i , tmp ] ) ;
44812: LD_ADDR_VAR 0 5
44816: PUSH
44817: LD_VAR 0 5
44821: PPUSH
44822: LD_VAR 0 6
44826: PUSH
44827: LD_VAR 0 8
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PPUSH
44836: CALL 76977 0 2
44840: ST_TO_ADDR
// continue ;
44841: GO 44764
// end ; if result [ result ] [ 2 ] <= tmp then
44843: LD_VAR 0 5
44847: PUSH
44848: LD_VAR 0 5
44852: ARRAY
44853: PUSH
44854: LD_INT 2
44856: ARRAY
44857: PUSH
44858: LD_VAR 0 8
44862: LESSEQUAL
44863: IFFALSE 44896
// result := Join ( result , [ i , tmp ] ) else
44865: LD_ADDR_VAR 0 5
44869: PUSH
44870: LD_VAR 0 5
44874: PPUSH
44875: LD_VAR 0 6
44879: PUSH
44880: LD_VAR 0 8
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PPUSH
44889: CALL 76977 0 2
44893: ST_TO_ADDR
44894: GO 44981
// begin for j := 1 to Count ( result ) do
44896: LD_ADDR_VAR 0 7
44900: PUSH
44901: DOUBLE
44902: LD_INT 1
44904: DEC
44905: ST_TO_ADDR
44906: LD_VAR 0 5
44910: PPUSH
44911: CALL 41377 0 1
44915: PUSH
44916: FOR_TO
44917: IFFALSE 44979
// begin if tmp < result [ j ] [ 2 ] then
44919: LD_VAR 0 8
44923: PUSH
44924: LD_VAR 0 5
44928: PUSH
44929: LD_VAR 0 7
44933: ARRAY
44934: PUSH
44935: LD_INT 2
44937: ARRAY
44938: LESS
44939: IFFALSE 44977
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44941: LD_ADDR_VAR 0 5
44945: PUSH
44946: LD_VAR 0 5
44950: PPUSH
44951: LD_VAR 0 7
44955: PPUSH
44956: LD_VAR 0 6
44960: PUSH
44961: LD_VAR 0 8
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PPUSH
44970: CALL_OW 2
44974: ST_TO_ADDR
// break ;
44975: GO 44979
// end ; end ;
44977: GO 44916
44979: POP
44980: POP
// end ; end ;
44981: GO 44764
44983: POP
44984: POP
// if result and not asc then
44985: LD_VAR 0 5
44989: PUSH
44990: LD_VAR 0 3
44994: NOT
44995: AND
44996: IFFALSE 45013
// result := ReverseArray ( result ) ;
44998: LD_ADDR_VAR 0 5
45002: PUSH
45003: LD_VAR 0 5
45007: PPUSH
45008: CALL 72253 0 1
45012: ST_TO_ADDR
// tmp := [ ] ;
45013: LD_ADDR_VAR 0 8
45017: PUSH
45018: EMPTY
45019: ST_TO_ADDR
// if mode then
45020: LD_VAR 0 4
45024: IFFALSE 45088
// begin for i := 1 to result do
45026: LD_ADDR_VAR 0 6
45030: PUSH
45031: DOUBLE
45032: LD_INT 1
45034: DEC
45035: ST_TO_ADDR
45036: LD_VAR 0 5
45040: PUSH
45041: FOR_TO
45042: IFFALSE 45076
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
45044: LD_ADDR_VAR 0 8
45048: PUSH
45049: LD_VAR 0 8
45053: PPUSH
45054: LD_VAR 0 5
45058: PUSH
45059: LD_VAR 0 6
45063: ARRAY
45064: PUSH
45065: LD_INT 1
45067: ARRAY
45068: PPUSH
45069: CALL 76977 0 2
45073: ST_TO_ADDR
45074: GO 45041
45076: POP
45077: POP
// result := tmp ;
45078: LD_ADDR_VAR 0 5
45082: PUSH
45083: LD_VAR 0 8
45087: ST_TO_ADDR
// end ; end ;
45088: LD_VAR 0 5
45092: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45093: LD_INT 0
45095: PPUSH
45096: PPUSH
45097: PPUSH
45098: PPUSH
// if not list then
45099: LD_VAR 0 3
45103: NOT
45104: IFFALSE 45108
// exit ;
45106: GO 45496
// result := [ ] ;
45108: LD_ADDR_VAR 0 6
45112: PUSH
45113: EMPTY
45114: ST_TO_ADDR
// for i in list do
45115: LD_ADDR_VAR 0 7
45119: PUSH
45120: LD_VAR 0 3
45124: PUSH
45125: FOR_IN
45126: IFFALSE 45328
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45128: LD_ADDR_VAR 0 9
45132: PUSH
45133: LD_VAR 0 7
45137: PPUSH
45138: LD_VAR 0 1
45142: PPUSH
45143: LD_VAR 0 2
45147: PPUSH
45148: CALL_OW 297
45152: ST_TO_ADDR
// if not result then
45153: LD_VAR 0 6
45157: NOT
45158: IFFALSE 45184
// result := [ [ i , tmp ] ] else
45160: LD_ADDR_VAR 0 6
45164: PUSH
45165: LD_VAR 0 7
45169: PUSH
45170: LD_VAR 0 9
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: EMPTY
45180: LIST
45181: ST_TO_ADDR
45182: GO 45326
// begin if result [ result ] [ 2 ] < tmp then
45184: LD_VAR 0 6
45188: PUSH
45189: LD_VAR 0 6
45193: ARRAY
45194: PUSH
45195: LD_INT 2
45197: ARRAY
45198: PUSH
45199: LD_VAR 0 9
45203: LESS
45204: IFFALSE 45246
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45206: LD_ADDR_VAR 0 6
45210: PUSH
45211: LD_VAR 0 6
45215: PPUSH
45216: LD_VAR 0 6
45220: PUSH
45221: LD_INT 1
45223: PLUS
45224: PPUSH
45225: LD_VAR 0 7
45229: PUSH
45230: LD_VAR 0 9
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PPUSH
45239: CALL_OW 2
45243: ST_TO_ADDR
45244: GO 45326
// for j = 1 to result do
45246: LD_ADDR_VAR 0 8
45250: PUSH
45251: DOUBLE
45252: LD_INT 1
45254: DEC
45255: ST_TO_ADDR
45256: LD_VAR 0 6
45260: PUSH
45261: FOR_TO
45262: IFFALSE 45324
// begin if tmp < result [ j ] [ 2 ] then
45264: LD_VAR 0 9
45268: PUSH
45269: LD_VAR 0 6
45273: PUSH
45274: LD_VAR 0 8
45278: ARRAY
45279: PUSH
45280: LD_INT 2
45282: ARRAY
45283: LESS
45284: IFFALSE 45322
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45286: LD_ADDR_VAR 0 6
45290: PUSH
45291: LD_VAR 0 6
45295: PPUSH
45296: LD_VAR 0 8
45300: PPUSH
45301: LD_VAR 0 7
45305: PUSH
45306: LD_VAR 0 9
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PPUSH
45315: CALL_OW 2
45319: ST_TO_ADDR
// break ;
45320: GO 45324
// end ; end ;
45322: GO 45261
45324: POP
45325: POP
// end ; end ;
45326: GO 45125
45328: POP
45329: POP
// if result and not asc then
45330: LD_VAR 0 6
45334: PUSH
45335: LD_VAR 0 4
45339: NOT
45340: AND
45341: IFFALSE 45416
// begin tmp := result ;
45343: LD_ADDR_VAR 0 9
45347: PUSH
45348: LD_VAR 0 6
45352: ST_TO_ADDR
// for i = tmp downto 1 do
45353: LD_ADDR_VAR 0 7
45357: PUSH
45358: DOUBLE
45359: LD_VAR 0 9
45363: INC
45364: ST_TO_ADDR
45365: LD_INT 1
45367: PUSH
45368: FOR_DOWNTO
45369: IFFALSE 45414
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45371: LD_ADDR_VAR 0 6
45375: PUSH
45376: LD_VAR 0 6
45380: PPUSH
45381: LD_VAR 0 9
45385: PUSH
45386: LD_VAR 0 7
45390: MINUS
45391: PUSH
45392: LD_INT 1
45394: PLUS
45395: PPUSH
45396: LD_VAR 0 9
45400: PUSH
45401: LD_VAR 0 7
45405: ARRAY
45406: PPUSH
45407: CALL_OW 1
45411: ST_TO_ADDR
45412: GO 45368
45414: POP
45415: POP
// end ; tmp := [ ] ;
45416: LD_ADDR_VAR 0 9
45420: PUSH
45421: EMPTY
45422: ST_TO_ADDR
// if mode then
45423: LD_VAR 0 5
45427: IFFALSE 45496
// begin for i = 1 to result do
45429: LD_ADDR_VAR 0 7
45433: PUSH
45434: DOUBLE
45435: LD_INT 1
45437: DEC
45438: ST_TO_ADDR
45439: LD_VAR 0 6
45443: PUSH
45444: FOR_TO
45445: IFFALSE 45484
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45447: LD_ADDR_VAR 0 9
45451: PUSH
45452: LD_VAR 0 9
45456: PPUSH
45457: LD_VAR 0 7
45461: PPUSH
45462: LD_VAR 0 6
45466: PUSH
45467: LD_VAR 0 7
45471: ARRAY
45472: PUSH
45473: LD_INT 1
45475: ARRAY
45476: PPUSH
45477: CALL_OW 1
45481: ST_TO_ADDR
45482: GO 45444
45484: POP
45485: POP
// result := tmp ;
45486: LD_ADDR_VAR 0 6
45490: PUSH
45491: LD_VAR 0 9
45495: ST_TO_ADDR
// end ; end ;
45496: LD_VAR 0 6
45500: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45501: LD_INT 0
45503: PPUSH
45504: PPUSH
45505: PPUSH
45506: PPUSH
45507: PPUSH
45508: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45509: LD_ADDR_VAR 0 5
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: EMPTY
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: ST_TO_ADDR
// if not x or not y then
45531: LD_VAR 0 2
45535: NOT
45536: PUSH
45537: LD_VAR 0 3
45541: NOT
45542: OR
45543: IFFALSE 45547
// exit ;
45545: GO 47197
// if not range then
45547: LD_VAR 0 4
45551: NOT
45552: IFFALSE 45562
// range := 10 ;
45554: LD_ADDR_VAR 0 4
45558: PUSH
45559: LD_INT 10
45561: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45562: LD_ADDR_VAR 0 8
45566: PUSH
45567: LD_INT 81
45569: PUSH
45570: LD_VAR 0 1
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 92
45581: PUSH
45582: LD_VAR 0 2
45586: PUSH
45587: LD_VAR 0 3
45591: PUSH
45592: LD_VAR 0 4
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 3
45605: PUSH
45606: LD_INT 21
45608: PUSH
45609: LD_INT 3
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: LIST
45624: PPUSH
45625: CALL_OW 69
45629: ST_TO_ADDR
// if not tmp then
45630: LD_VAR 0 8
45634: NOT
45635: IFFALSE 45639
// exit ;
45637: GO 47197
// for i in tmp do
45639: LD_ADDR_VAR 0 6
45643: PUSH
45644: LD_VAR 0 8
45648: PUSH
45649: FOR_IN
45650: IFFALSE 47172
// begin points := [ 0 , 0 , 0 ] ;
45652: LD_ADDR_VAR 0 9
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: LIST
45670: ST_TO_ADDR
// bpoints := 1 ;
45671: LD_ADDR_VAR 0 10
45675: PUSH
45676: LD_INT 1
45678: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45679: LD_VAR 0 6
45683: PPUSH
45684: CALL_OW 247
45688: PUSH
45689: LD_INT 1
45691: DOUBLE
45692: EQUAL
45693: IFTRUE 45697
45695: GO 46275
45697: POP
// begin if GetClass ( i ) = 1 then
45698: LD_VAR 0 6
45702: PPUSH
45703: CALL_OW 257
45707: PUSH
45708: LD_INT 1
45710: EQUAL
45711: IFFALSE 45732
// points := [ 10 , 5 , 3 ] ;
45713: LD_ADDR_VAR 0 9
45717: PUSH
45718: LD_INT 10
45720: PUSH
45721: LD_INT 5
45723: PUSH
45724: LD_INT 3
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: LIST
45731: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45732: LD_VAR 0 6
45736: PPUSH
45737: CALL_OW 257
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: LD_INT 3
45747: PUSH
45748: LD_INT 4
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: LIST
45755: IN
45756: IFFALSE 45777
// points := [ 3 , 2 , 1 ] ;
45758: LD_ADDR_VAR 0 9
45762: PUSH
45763: LD_INT 3
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: LIST
45776: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45777: LD_VAR 0 6
45781: PPUSH
45782: CALL_OW 257
45786: PUSH
45787: LD_INT 5
45789: EQUAL
45790: IFFALSE 45811
// points := [ 130 , 5 , 2 ] ;
45792: LD_ADDR_VAR 0 9
45796: PUSH
45797: LD_INT 130
45799: PUSH
45800: LD_INT 5
45802: PUSH
45803: LD_INT 2
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: LIST
45810: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45811: LD_VAR 0 6
45815: PPUSH
45816: CALL_OW 257
45820: PUSH
45821: LD_INT 8
45823: EQUAL
45824: IFFALSE 45845
// points := [ 35 , 35 , 30 ] ;
45826: LD_ADDR_VAR 0 9
45830: PUSH
45831: LD_INT 35
45833: PUSH
45834: LD_INT 35
45836: PUSH
45837: LD_INT 30
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: LIST
45844: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45845: LD_VAR 0 6
45849: PPUSH
45850: CALL_OW 257
45854: PUSH
45855: LD_INT 9
45857: EQUAL
45858: IFFALSE 45879
// points := [ 20 , 55 , 40 ] ;
45860: LD_ADDR_VAR 0 9
45864: PUSH
45865: LD_INT 20
45867: PUSH
45868: LD_INT 55
45870: PUSH
45871: LD_INT 40
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: LIST
45878: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45879: LD_VAR 0 6
45883: PPUSH
45884: CALL_OW 257
45888: PUSH
45889: LD_INT 12
45891: PUSH
45892: LD_INT 16
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: IN
45899: IFFALSE 45920
// points := [ 5 , 3 , 2 ] ;
45901: LD_ADDR_VAR 0 9
45905: PUSH
45906: LD_INT 5
45908: PUSH
45909: LD_INT 3
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45920: LD_VAR 0 6
45924: PPUSH
45925: CALL_OW 257
45929: PUSH
45930: LD_INT 17
45932: EQUAL
45933: IFFALSE 45954
// points := [ 100 , 50 , 75 ] ;
45935: LD_ADDR_VAR 0 9
45939: PUSH
45940: LD_INT 100
45942: PUSH
45943: LD_INT 50
45945: PUSH
45946: LD_INT 75
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: LIST
45953: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45954: LD_VAR 0 6
45958: PPUSH
45959: CALL_OW 257
45963: PUSH
45964: LD_INT 15
45966: EQUAL
45967: IFFALSE 45988
// points := [ 10 , 5 , 3 ] ;
45969: LD_ADDR_VAR 0 9
45973: PUSH
45974: LD_INT 10
45976: PUSH
45977: LD_INT 5
45979: PUSH
45980: LD_INT 3
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: LIST
45987: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45988: LD_VAR 0 6
45992: PPUSH
45993: CALL_OW 257
45997: PUSH
45998: LD_INT 14
46000: EQUAL
46001: IFFALSE 46022
// points := [ 10 , 0 , 0 ] ;
46003: LD_ADDR_VAR 0 9
46007: PUSH
46008: LD_INT 10
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: LIST
46021: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46022: LD_VAR 0 6
46026: PPUSH
46027: CALL_OW 257
46031: PUSH
46032: LD_INT 11
46034: EQUAL
46035: IFFALSE 46056
// points := [ 30 , 10 , 5 ] ;
46037: LD_ADDR_VAR 0 9
46041: PUSH
46042: LD_INT 30
46044: PUSH
46045: LD_INT 10
46047: PUSH
46048: LD_INT 5
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: LIST
46055: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46056: LD_VAR 0 1
46060: PPUSH
46061: LD_INT 5
46063: PPUSH
46064: CALL_OW 321
46068: PUSH
46069: LD_INT 2
46071: EQUAL
46072: IFFALSE 46089
// bpoints := bpoints * 1.8 ;
46074: LD_ADDR_VAR 0 10
46078: PUSH
46079: LD_VAR 0 10
46083: PUSH
46084: LD_REAL  1.80000000000000E+0000
46087: MUL
46088: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46089: LD_VAR 0 6
46093: PPUSH
46094: CALL_OW 257
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 3
46107: PUSH
46108: LD_INT 4
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: IN
46117: PUSH
46118: LD_VAR 0 1
46122: PPUSH
46123: LD_INT 51
46125: PPUSH
46126: CALL_OW 321
46130: PUSH
46131: LD_INT 2
46133: EQUAL
46134: AND
46135: IFFALSE 46152
// bpoints := bpoints * 1.2 ;
46137: LD_ADDR_VAR 0 10
46141: PUSH
46142: LD_VAR 0 10
46146: PUSH
46147: LD_REAL  1.20000000000000E+0000
46150: MUL
46151: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46152: LD_VAR 0 6
46156: PPUSH
46157: CALL_OW 257
46161: PUSH
46162: LD_INT 5
46164: PUSH
46165: LD_INT 7
46167: PUSH
46168: LD_INT 9
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: IN
46176: PUSH
46177: LD_VAR 0 1
46181: PPUSH
46182: LD_INT 52
46184: PPUSH
46185: CALL_OW 321
46189: PUSH
46190: LD_INT 2
46192: EQUAL
46193: AND
46194: IFFALSE 46211
// bpoints := bpoints * 1.5 ;
46196: LD_ADDR_VAR 0 10
46200: PUSH
46201: LD_VAR 0 10
46205: PUSH
46206: LD_REAL  1.50000000000000E+0000
46209: MUL
46210: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46211: LD_VAR 0 1
46215: PPUSH
46216: LD_INT 66
46218: PPUSH
46219: CALL_OW 321
46223: PUSH
46224: LD_INT 2
46226: EQUAL
46227: IFFALSE 46244
// bpoints := bpoints * 1.1 ;
46229: LD_ADDR_VAR 0 10
46233: PUSH
46234: LD_VAR 0 10
46238: PUSH
46239: LD_REAL  1.10000000000000E+0000
46242: MUL
46243: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46244: LD_ADDR_VAR 0 10
46248: PUSH
46249: LD_VAR 0 10
46253: PUSH
46254: LD_VAR 0 6
46258: PPUSH
46259: LD_INT 1
46261: PPUSH
46262: CALL_OW 259
46266: PUSH
46267: LD_REAL  1.15000000000000E+0000
46270: MUL
46271: MUL
46272: ST_TO_ADDR
// end ; unit_vehicle :
46273: GO 47101
46275: LD_INT 2
46277: DOUBLE
46278: EQUAL
46279: IFTRUE 46283
46281: GO 47089
46283: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46284: LD_VAR 0 6
46288: PPUSH
46289: CALL_OW 264
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: LD_INT 42
46299: PUSH
46300: LD_INT 24
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: LIST
46307: IN
46308: IFFALSE 46329
// points := [ 25 , 5 , 3 ] ;
46310: LD_ADDR_VAR 0 9
46314: PUSH
46315: LD_INT 25
46317: PUSH
46318: LD_INT 5
46320: PUSH
46321: LD_INT 3
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: LIST
46328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46329: LD_VAR 0 6
46333: PPUSH
46334: CALL_OW 264
46338: PUSH
46339: LD_INT 4
46341: PUSH
46342: LD_INT 43
46344: PUSH
46345: LD_INT 25
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: LIST
46352: IN
46353: IFFALSE 46374
// points := [ 40 , 15 , 5 ] ;
46355: LD_ADDR_VAR 0 9
46359: PUSH
46360: LD_INT 40
46362: PUSH
46363: LD_INT 15
46365: PUSH
46366: LD_INT 5
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: LIST
46373: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46374: LD_VAR 0 6
46378: PPUSH
46379: CALL_OW 264
46383: PUSH
46384: LD_INT 3
46386: PUSH
46387: LD_INT 23
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: IN
46394: IFFALSE 46415
// points := [ 7 , 25 , 8 ] ;
46396: LD_ADDR_VAR 0 9
46400: PUSH
46401: LD_INT 7
46403: PUSH
46404: LD_INT 25
46406: PUSH
46407: LD_INT 8
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: LIST
46414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46415: LD_VAR 0 6
46419: PPUSH
46420: CALL_OW 264
46424: PUSH
46425: LD_INT 5
46427: PUSH
46428: LD_INT 27
46430: PUSH
46431: LD_INT 44
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: LIST
46438: IN
46439: IFFALSE 46460
// points := [ 14 , 50 , 16 ] ;
46441: LD_ADDR_VAR 0 9
46445: PUSH
46446: LD_INT 14
46448: PUSH
46449: LD_INT 50
46451: PUSH
46452: LD_INT 16
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: LIST
46459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46460: LD_VAR 0 6
46464: PPUSH
46465: CALL_OW 264
46469: PUSH
46470: LD_INT 6
46472: PUSH
46473: LD_INT 46
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: IN
46480: IFFALSE 46501
// points := [ 32 , 120 , 70 ] ;
46482: LD_ADDR_VAR 0 9
46486: PUSH
46487: LD_INT 32
46489: PUSH
46490: LD_INT 120
46492: PUSH
46493: LD_INT 70
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: LIST
46500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46501: LD_VAR 0 6
46505: PPUSH
46506: CALL_OW 264
46510: PUSH
46511: LD_INT 7
46513: PUSH
46514: LD_INT 28
46516: PUSH
46517: LD_INT 45
46519: PUSH
46520: LD_INT 92
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: IN
46529: IFFALSE 46550
// points := [ 35 , 20 , 45 ] ;
46531: LD_ADDR_VAR 0 9
46535: PUSH
46536: LD_INT 35
46538: PUSH
46539: LD_INT 20
46541: PUSH
46542: LD_INT 45
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: LIST
46549: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46550: LD_VAR 0 6
46554: PPUSH
46555: CALL_OW 264
46559: PUSH
46560: LD_INT 47
46562: PUSH
46563: EMPTY
46564: LIST
46565: IN
46566: IFFALSE 46587
// points := [ 67 , 45 , 75 ] ;
46568: LD_ADDR_VAR 0 9
46572: PUSH
46573: LD_INT 67
46575: PUSH
46576: LD_INT 45
46578: PUSH
46579: LD_INT 75
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: LIST
46586: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46587: LD_VAR 0 6
46591: PPUSH
46592: CALL_OW 264
46596: PUSH
46597: LD_INT 26
46599: PUSH
46600: EMPTY
46601: LIST
46602: IN
46603: IFFALSE 46624
// points := [ 120 , 30 , 80 ] ;
46605: LD_ADDR_VAR 0 9
46609: PUSH
46610: LD_INT 120
46612: PUSH
46613: LD_INT 30
46615: PUSH
46616: LD_INT 80
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: LIST
46623: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46624: LD_VAR 0 6
46628: PPUSH
46629: CALL_OW 264
46633: PUSH
46634: LD_INT 22
46636: PUSH
46637: EMPTY
46638: LIST
46639: IN
46640: IFFALSE 46661
// points := [ 40 , 1 , 1 ] ;
46642: LD_ADDR_VAR 0 9
46646: PUSH
46647: LD_INT 40
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46661: LD_VAR 0 6
46665: PPUSH
46666: CALL_OW 264
46670: PUSH
46671: LD_INT 29
46673: PUSH
46674: EMPTY
46675: LIST
46676: IN
46677: IFFALSE 46698
// points := [ 70 , 200 , 400 ] ;
46679: LD_ADDR_VAR 0 9
46683: PUSH
46684: LD_INT 70
46686: PUSH
46687: LD_INT 200
46689: PUSH
46690: LD_INT 400
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: LIST
46697: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46698: LD_VAR 0 6
46702: PPUSH
46703: CALL_OW 264
46707: PUSH
46708: LD_INT 14
46710: PUSH
46711: LD_INT 53
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: IN
46718: IFFALSE 46739
// points := [ 40 , 10 , 20 ] ;
46720: LD_ADDR_VAR 0 9
46724: PUSH
46725: LD_INT 40
46727: PUSH
46728: LD_INT 10
46730: PUSH
46731: LD_INT 20
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: LIST
46738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46739: LD_VAR 0 6
46743: PPUSH
46744: CALL_OW 264
46748: PUSH
46749: LD_INT 9
46751: PUSH
46752: EMPTY
46753: LIST
46754: IN
46755: IFFALSE 46776
// points := [ 5 , 70 , 20 ] ;
46757: LD_ADDR_VAR 0 9
46761: PUSH
46762: LD_INT 5
46764: PUSH
46765: LD_INT 70
46767: PUSH
46768: LD_INT 20
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: LIST
46775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46776: LD_VAR 0 6
46780: PPUSH
46781: CALL_OW 264
46785: PUSH
46786: LD_INT 10
46788: PUSH
46789: EMPTY
46790: LIST
46791: IN
46792: IFFALSE 46813
// points := [ 35 , 110 , 70 ] ;
46794: LD_ADDR_VAR 0 9
46798: PUSH
46799: LD_INT 35
46801: PUSH
46802: LD_INT 110
46804: PUSH
46805: LD_INT 70
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46813: LD_VAR 0 6
46817: PPUSH
46818: CALL_OW 265
46822: PUSH
46823: LD_INT 25
46825: EQUAL
46826: IFFALSE 46847
// points := [ 80 , 65 , 100 ] ;
46828: LD_ADDR_VAR 0 9
46832: PUSH
46833: LD_INT 80
46835: PUSH
46836: LD_INT 65
46838: PUSH
46839: LD_INT 100
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46847: LD_VAR 0 6
46851: PPUSH
46852: CALL_OW 263
46856: PUSH
46857: LD_INT 1
46859: EQUAL
46860: IFFALSE 46895
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46862: LD_ADDR_VAR 0 10
46866: PUSH
46867: LD_VAR 0 10
46871: PUSH
46872: LD_VAR 0 6
46876: PPUSH
46877: CALL_OW 311
46881: PPUSH
46882: LD_INT 3
46884: PPUSH
46885: CALL_OW 259
46889: PUSH
46890: LD_INT 4
46892: MUL
46893: MUL
46894: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46895: LD_VAR 0 6
46899: PPUSH
46900: CALL_OW 263
46904: PUSH
46905: LD_INT 2
46907: EQUAL
46908: IFFALSE 46959
// begin j := IsControledBy ( i ) ;
46910: LD_ADDR_VAR 0 7
46914: PUSH
46915: LD_VAR 0 6
46919: PPUSH
46920: CALL_OW 312
46924: ST_TO_ADDR
// if j then
46925: LD_VAR 0 7
46929: IFFALSE 46959
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46931: LD_ADDR_VAR 0 10
46935: PUSH
46936: LD_VAR 0 10
46940: PUSH
46941: LD_VAR 0 7
46945: PPUSH
46946: LD_INT 3
46948: PPUSH
46949: CALL_OW 259
46953: PUSH
46954: LD_INT 3
46956: MUL
46957: MUL
46958: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46959: LD_VAR 0 6
46963: PPUSH
46964: CALL_OW 264
46968: PUSH
46969: LD_INT 5
46971: PUSH
46972: LD_INT 6
46974: PUSH
46975: LD_INT 46
46977: PUSH
46978: LD_INT 44
46980: PUSH
46981: LD_INT 47
46983: PUSH
46984: LD_INT 45
46986: PUSH
46987: LD_INT 28
46989: PUSH
46990: LD_INT 7
46992: PUSH
46993: LD_INT 27
46995: PUSH
46996: LD_INT 29
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: IN
47011: PUSH
47012: LD_VAR 0 1
47016: PPUSH
47017: LD_INT 52
47019: PPUSH
47020: CALL_OW 321
47024: PUSH
47025: LD_INT 2
47027: EQUAL
47028: AND
47029: IFFALSE 47046
// bpoints := bpoints * 1.2 ;
47031: LD_ADDR_VAR 0 10
47035: PUSH
47036: LD_VAR 0 10
47040: PUSH
47041: LD_REAL  1.20000000000000E+0000
47044: MUL
47045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47046: LD_VAR 0 6
47050: PPUSH
47051: CALL_OW 264
47055: PUSH
47056: LD_INT 6
47058: PUSH
47059: LD_INT 46
47061: PUSH
47062: LD_INT 47
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: LIST
47069: IN
47070: IFFALSE 47087
// bpoints := bpoints * 1.2 ;
47072: LD_ADDR_VAR 0 10
47076: PUSH
47077: LD_VAR 0 10
47081: PUSH
47082: LD_REAL  1.20000000000000E+0000
47085: MUL
47086: ST_TO_ADDR
// end ; unit_building :
47087: GO 47101
47089: LD_INT 3
47091: DOUBLE
47092: EQUAL
47093: IFTRUE 47097
47095: GO 47100
47097: POP
// ; end ;
47098: GO 47101
47100: POP
// for j = 1 to 3 do
47101: LD_ADDR_VAR 0 7
47105: PUSH
47106: DOUBLE
47107: LD_INT 1
47109: DEC
47110: ST_TO_ADDR
47111: LD_INT 3
47113: PUSH
47114: FOR_TO
47115: IFFALSE 47168
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47117: LD_ADDR_VAR 0 5
47121: PUSH
47122: LD_VAR 0 5
47126: PPUSH
47127: LD_VAR 0 7
47131: PPUSH
47132: LD_VAR 0 5
47136: PUSH
47137: LD_VAR 0 7
47141: ARRAY
47142: PUSH
47143: LD_VAR 0 9
47147: PUSH
47148: LD_VAR 0 7
47152: ARRAY
47153: PUSH
47154: LD_VAR 0 10
47158: MUL
47159: PLUS
47160: PPUSH
47161: CALL_OW 1
47165: ST_TO_ADDR
47166: GO 47114
47168: POP
47169: POP
// end ;
47170: GO 45649
47172: POP
47173: POP
// result := Replace ( result , 4 , tmp ) ;
47174: LD_ADDR_VAR 0 5
47178: PUSH
47179: LD_VAR 0 5
47183: PPUSH
47184: LD_INT 4
47186: PPUSH
47187: LD_VAR 0 8
47191: PPUSH
47192: CALL_OW 1
47196: ST_TO_ADDR
// end ;
47197: LD_VAR 0 5
47201: RET
// export function DangerAtRange ( unit , range ) ; begin
47202: LD_INT 0
47204: PPUSH
// if not unit then
47205: LD_VAR 0 1
47209: NOT
47210: IFFALSE 47214
// exit ;
47212: GO 47259
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47214: LD_ADDR_VAR 0 3
47218: PUSH
47219: LD_VAR 0 1
47223: PPUSH
47224: CALL_OW 255
47228: PPUSH
47229: LD_VAR 0 1
47233: PPUSH
47234: CALL_OW 250
47238: PPUSH
47239: LD_VAR 0 1
47243: PPUSH
47244: CALL_OW 251
47248: PPUSH
47249: LD_VAR 0 2
47253: PPUSH
47254: CALL 45501 0 4
47258: ST_TO_ADDR
// end ;
47259: LD_VAR 0 3
47263: RET
// export function DangerInArea ( side , area ) ; begin
47264: LD_INT 0
47266: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47267: LD_ADDR_VAR 0 3
47271: PUSH
47272: LD_VAR 0 2
47276: PPUSH
47277: LD_INT 81
47279: PUSH
47280: LD_VAR 0 1
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PPUSH
47289: CALL_OW 70
47293: ST_TO_ADDR
// end ;
47294: LD_VAR 0 3
47298: RET
// export function IsExtension ( b ) ; begin
47299: LD_INT 0
47301: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47302: LD_ADDR_VAR 0 2
47306: PUSH
47307: LD_VAR 0 1
47311: PUSH
47312: LD_INT 23
47314: PUSH
47315: LD_INT 20
47317: PUSH
47318: LD_INT 22
47320: PUSH
47321: LD_INT 17
47323: PUSH
47324: LD_INT 24
47326: PUSH
47327: LD_INT 21
47329: PUSH
47330: LD_INT 19
47332: PUSH
47333: LD_INT 16
47335: PUSH
47336: LD_INT 25
47338: PUSH
47339: LD_INT 18
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: IN
47354: ST_TO_ADDR
// end ;
47355: LD_VAR 0 2
47359: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47360: LD_INT 0
47362: PPUSH
47363: PPUSH
47364: PPUSH
// result := [ ] ;
47365: LD_ADDR_VAR 0 4
47369: PUSH
47370: EMPTY
47371: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47372: LD_ADDR_VAR 0 5
47376: PUSH
47377: LD_VAR 0 2
47381: PPUSH
47382: LD_INT 21
47384: PUSH
47385: LD_INT 3
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PPUSH
47392: CALL_OW 70
47396: ST_TO_ADDR
// if not tmp then
47397: LD_VAR 0 5
47401: NOT
47402: IFFALSE 47406
// exit ;
47404: GO 47470
// if checkLink then
47406: LD_VAR 0 3
47410: IFFALSE 47460
// begin for i in tmp do
47412: LD_ADDR_VAR 0 6
47416: PUSH
47417: LD_VAR 0 5
47421: PUSH
47422: FOR_IN
47423: IFFALSE 47458
// if GetBase ( i ) <> base then
47425: LD_VAR 0 6
47429: PPUSH
47430: CALL_OW 274
47434: PUSH
47435: LD_VAR 0 1
47439: NONEQUAL
47440: IFFALSE 47456
// ComLinkToBase ( base , i ) ;
47442: LD_VAR 0 1
47446: PPUSH
47447: LD_VAR 0 6
47451: PPUSH
47452: CALL_OW 169
47456: GO 47422
47458: POP
47459: POP
// end ; result := tmp ;
47460: LD_ADDR_VAR 0 4
47464: PUSH
47465: LD_VAR 0 5
47469: ST_TO_ADDR
// end ;
47470: LD_VAR 0 4
47474: RET
// export function ComComplete ( units , b ) ; var i ; begin
47475: LD_INT 0
47477: PPUSH
47478: PPUSH
// if not units then
47479: LD_VAR 0 1
47483: NOT
47484: IFFALSE 47488
// exit ;
47486: GO 47578
// for i in units do
47488: LD_ADDR_VAR 0 4
47492: PUSH
47493: LD_VAR 0 1
47497: PUSH
47498: FOR_IN
47499: IFFALSE 47576
// if BuildingStatus ( b ) = bs_build then
47501: LD_VAR 0 2
47505: PPUSH
47506: CALL_OW 461
47510: PUSH
47511: LD_INT 1
47513: EQUAL
47514: IFFALSE 47574
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47516: LD_VAR 0 4
47520: PPUSH
47521: LD_STRING h
47523: PUSH
47524: LD_VAR 0 2
47528: PPUSH
47529: CALL_OW 250
47533: PUSH
47534: LD_VAR 0 2
47538: PPUSH
47539: CALL_OW 251
47543: PUSH
47544: LD_VAR 0 2
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: PUSH
47567: EMPTY
47568: LIST
47569: PPUSH
47570: CALL_OW 446
47574: GO 47498
47576: POP
47577: POP
// end ;
47578: LD_VAR 0 3
47582: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47583: LD_INT 0
47585: PPUSH
47586: PPUSH
47587: PPUSH
47588: PPUSH
47589: PPUSH
47590: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47591: LD_VAR 0 1
47595: NOT
47596: PUSH
47597: LD_VAR 0 1
47601: PPUSH
47602: CALL_OW 263
47606: PUSH
47607: LD_INT 2
47609: NONEQUAL
47610: OR
47611: IFFALSE 47615
// exit ;
47613: GO 47931
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47615: LD_ADDR_VAR 0 6
47619: PUSH
47620: LD_INT 22
47622: PUSH
47623: LD_VAR 0 1
47627: PPUSH
47628: CALL_OW 255
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: LD_INT 30
47642: PUSH
47643: LD_INT 36
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 34
47652: PUSH
47653: LD_INT 31
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PPUSH
47669: CALL_OW 69
47673: ST_TO_ADDR
// if not tmp then
47674: LD_VAR 0 6
47678: NOT
47679: IFFALSE 47683
// exit ;
47681: GO 47931
// result := [ ] ;
47683: LD_ADDR_VAR 0 2
47687: PUSH
47688: EMPTY
47689: ST_TO_ADDR
// for i in tmp do
47690: LD_ADDR_VAR 0 3
47694: PUSH
47695: LD_VAR 0 6
47699: PUSH
47700: FOR_IN
47701: IFFALSE 47772
// begin t := UnitsInside ( i ) ;
47703: LD_ADDR_VAR 0 4
47707: PUSH
47708: LD_VAR 0 3
47712: PPUSH
47713: CALL_OW 313
47717: ST_TO_ADDR
// if t then
47718: LD_VAR 0 4
47722: IFFALSE 47770
// for j in t do
47724: LD_ADDR_VAR 0 7
47728: PUSH
47729: LD_VAR 0 4
47733: PUSH
47734: FOR_IN
47735: IFFALSE 47768
// result := Replace ( result , result + 1 , j ) ;
47737: LD_ADDR_VAR 0 2
47741: PUSH
47742: LD_VAR 0 2
47746: PPUSH
47747: LD_VAR 0 2
47751: PUSH
47752: LD_INT 1
47754: PLUS
47755: PPUSH
47756: LD_VAR 0 7
47760: PPUSH
47761: CALL_OW 1
47765: ST_TO_ADDR
47766: GO 47734
47768: POP
47769: POP
// end ;
47770: GO 47700
47772: POP
47773: POP
// if not result then
47774: LD_VAR 0 2
47778: NOT
47779: IFFALSE 47783
// exit ;
47781: GO 47931
// mech := result [ 1 ] ;
47783: LD_ADDR_VAR 0 5
47787: PUSH
47788: LD_VAR 0 2
47792: PUSH
47793: LD_INT 1
47795: ARRAY
47796: ST_TO_ADDR
// if result > 1 then
47797: LD_VAR 0 2
47801: PUSH
47802: LD_INT 1
47804: GREATER
47805: IFFALSE 47917
// begin for i = 2 to result do
47807: LD_ADDR_VAR 0 3
47811: PUSH
47812: DOUBLE
47813: LD_INT 2
47815: DEC
47816: ST_TO_ADDR
47817: LD_VAR 0 2
47821: PUSH
47822: FOR_TO
47823: IFFALSE 47915
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47825: LD_ADDR_VAR 0 4
47829: PUSH
47830: LD_VAR 0 2
47834: PUSH
47835: LD_VAR 0 3
47839: ARRAY
47840: PPUSH
47841: LD_INT 3
47843: PPUSH
47844: CALL_OW 259
47848: PUSH
47849: LD_VAR 0 2
47853: PUSH
47854: LD_VAR 0 3
47858: ARRAY
47859: PPUSH
47860: CALL_OW 432
47864: MINUS
47865: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47866: LD_VAR 0 4
47870: PUSH
47871: LD_VAR 0 5
47875: PPUSH
47876: LD_INT 3
47878: PPUSH
47879: CALL_OW 259
47883: PUSH
47884: LD_VAR 0 5
47888: PPUSH
47889: CALL_OW 432
47893: MINUS
47894: GREATEREQUAL
47895: IFFALSE 47913
// mech := result [ i ] ;
47897: LD_ADDR_VAR 0 5
47901: PUSH
47902: LD_VAR 0 2
47906: PUSH
47907: LD_VAR 0 3
47911: ARRAY
47912: ST_TO_ADDR
// end ;
47913: GO 47822
47915: POP
47916: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47917: LD_VAR 0 1
47921: PPUSH
47922: LD_VAR 0 5
47926: PPUSH
47927: CALL_OW 135
// end ;
47931: LD_VAR 0 2
47935: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47936: LD_INT 0
47938: PPUSH
47939: PPUSH
47940: PPUSH
47941: PPUSH
47942: PPUSH
47943: PPUSH
47944: PPUSH
47945: PPUSH
47946: PPUSH
47947: PPUSH
47948: PPUSH
47949: PPUSH
47950: PPUSH
// result := [ ] ;
47951: LD_ADDR_VAR 0 7
47955: PUSH
47956: EMPTY
47957: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47958: LD_VAR 0 1
47962: PPUSH
47963: CALL_OW 266
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: IN
47978: NOT
47979: IFFALSE 47983
// exit ;
47981: GO 49617
// if name then
47983: LD_VAR 0 3
47987: IFFALSE 48003
// SetBName ( base_dep , name ) ;
47989: LD_VAR 0 1
47993: PPUSH
47994: LD_VAR 0 3
47998: PPUSH
47999: CALL_OW 500
// base := GetBase ( base_dep ) ;
48003: LD_ADDR_VAR 0 15
48007: PUSH
48008: LD_VAR 0 1
48012: PPUSH
48013: CALL_OW 274
48017: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48018: LD_ADDR_VAR 0 16
48022: PUSH
48023: LD_VAR 0 1
48027: PPUSH
48028: CALL_OW 255
48032: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48033: LD_ADDR_VAR 0 17
48037: PUSH
48038: LD_VAR 0 1
48042: PPUSH
48043: CALL_OW 248
48047: ST_TO_ADDR
// if sources then
48048: LD_VAR 0 5
48052: IFFALSE 48099
// for i = 1 to 3 do
48054: LD_ADDR_VAR 0 8
48058: PUSH
48059: DOUBLE
48060: LD_INT 1
48062: DEC
48063: ST_TO_ADDR
48064: LD_INT 3
48066: PUSH
48067: FOR_TO
48068: IFFALSE 48097
// AddResourceType ( base , i , sources [ i ] ) ;
48070: LD_VAR 0 15
48074: PPUSH
48075: LD_VAR 0 8
48079: PPUSH
48080: LD_VAR 0 5
48084: PUSH
48085: LD_VAR 0 8
48089: ARRAY
48090: PPUSH
48091: CALL_OW 276
48095: GO 48067
48097: POP
48098: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48099: LD_ADDR_VAR 0 18
48103: PUSH
48104: LD_VAR 0 15
48108: PPUSH
48109: LD_VAR 0 2
48113: PPUSH
48114: LD_INT 1
48116: PPUSH
48117: CALL 47360 0 3
48121: ST_TO_ADDR
// InitHc ;
48122: CALL_OW 19
// InitUc ;
48126: CALL_OW 18
// uc_side := side ;
48130: LD_ADDR_OWVAR 20
48134: PUSH
48135: LD_VAR 0 16
48139: ST_TO_ADDR
// uc_nation := nation ;
48140: LD_ADDR_OWVAR 21
48144: PUSH
48145: LD_VAR 0 17
48149: ST_TO_ADDR
// if buildings then
48150: LD_VAR 0 18
48154: IFFALSE 49476
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48156: LD_ADDR_VAR 0 19
48160: PUSH
48161: LD_VAR 0 18
48165: PPUSH
48166: LD_INT 2
48168: PUSH
48169: LD_INT 30
48171: PUSH
48172: LD_INT 29
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 30
48181: PUSH
48182: LD_INT 30
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: LIST
48193: PPUSH
48194: CALL_OW 72
48198: ST_TO_ADDR
// if tmp then
48199: LD_VAR 0 19
48203: IFFALSE 48251
// for i in tmp do
48205: LD_ADDR_VAR 0 8
48209: PUSH
48210: LD_VAR 0 19
48214: PUSH
48215: FOR_IN
48216: IFFALSE 48249
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48218: LD_VAR 0 8
48222: PPUSH
48223: CALL_OW 250
48227: PPUSH
48228: LD_VAR 0 8
48232: PPUSH
48233: CALL_OW 251
48237: PPUSH
48238: LD_VAR 0 16
48242: PPUSH
48243: CALL_OW 441
48247: GO 48215
48249: POP
48250: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48251: LD_VAR 0 18
48255: PPUSH
48256: LD_INT 2
48258: PUSH
48259: LD_INT 30
48261: PUSH
48262: LD_INT 32
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 30
48271: PUSH
48272: LD_INT 33
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: LIST
48283: PPUSH
48284: CALL_OW 72
48288: IFFALSE 48376
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48290: LD_ADDR_VAR 0 8
48294: PUSH
48295: LD_VAR 0 18
48299: PPUSH
48300: LD_INT 2
48302: PUSH
48303: LD_INT 30
48305: PUSH
48306: LD_INT 32
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 30
48315: PUSH
48316: LD_INT 33
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: LIST
48327: PPUSH
48328: CALL_OW 72
48332: PUSH
48333: FOR_IN
48334: IFFALSE 48374
// begin if not GetBWeapon ( i ) then
48336: LD_VAR 0 8
48340: PPUSH
48341: CALL_OW 269
48345: NOT
48346: IFFALSE 48372
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48348: LD_VAR 0 8
48352: PPUSH
48353: LD_VAR 0 8
48357: PPUSH
48358: LD_VAR 0 2
48362: PPUSH
48363: CALL 49622 0 2
48367: PPUSH
48368: CALL_OW 431
// end ;
48372: GO 48333
48374: POP
48375: POP
// end ; for i = 1 to personel do
48376: LD_ADDR_VAR 0 8
48380: PUSH
48381: DOUBLE
48382: LD_INT 1
48384: DEC
48385: ST_TO_ADDR
48386: LD_VAR 0 6
48390: PUSH
48391: FOR_TO
48392: IFFALSE 49456
// begin if i > 4 then
48394: LD_VAR 0 8
48398: PUSH
48399: LD_INT 4
48401: GREATER
48402: IFFALSE 48406
// break ;
48404: GO 49456
// case i of 1 :
48406: LD_VAR 0 8
48410: PUSH
48411: LD_INT 1
48413: DOUBLE
48414: EQUAL
48415: IFTRUE 48419
48417: GO 48499
48419: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48420: LD_ADDR_VAR 0 12
48424: PUSH
48425: LD_VAR 0 18
48429: PPUSH
48430: LD_INT 22
48432: PUSH
48433: LD_VAR 0 16
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 58
48444: PUSH
48445: EMPTY
48446: LIST
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: LD_INT 30
48453: PUSH
48454: LD_INT 32
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 30
48463: PUSH
48464: LD_INT 4
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 30
48473: PUSH
48474: LD_INT 5
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: LIST
48491: PPUSH
48492: CALL_OW 72
48496: ST_TO_ADDR
48497: GO 48721
48499: LD_INT 2
48501: DOUBLE
48502: EQUAL
48503: IFTRUE 48507
48505: GO 48569
48507: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48508: LD_ADDR_VAR 0 12
48512: PUSH
48513: LD_VAR 0 18
48517: PPUSH
48518: LD_INT 22
48520: PUSH
48521: LD_VAR 0 16
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: LD_INT 30
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 30
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: LIST
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PPUSH
48562: CALL_OW 72
48566: ST_TO_ADDR
48567: GO 48721
48569: LD_INT 3
48571: DOUBLE
48572: EQUAL
48573: IFTRUE 48577
48575: GO 48639
48577: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48578: LD_ADDR_VAR 0 12
48582: PUSH
48583: LD_VAR 0 18
48587: PPUSH
48588: LD_INT 22
48590: PUSH
48591: LD_VAR 0 16
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: LD_INT 30
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 30
48615: PUSH
48616: LD_INT 3
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PPUSH
48632: CALL_OW 72
48636: ST_TO_ADDR
48637: GO 48721
48639: LD_INT 4
48641: DOUBLE
48642: EQUAL
48643: IFTRUE 48647
48645: GO 48720
48647: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48648: LD_ADDR_VAR 0 12
48652: PUSH
48653: LD_VAR 0 18
48657: PPUSH
48658: LD_INT 22
48660: PUSH
48661: LD_VAR 0 16
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: LD_INT 30
48675: PUSH
48676: LD_INT 6
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 30
48685: PUSH
48686: LD_INT 7
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 30
48695: PUSH
48696: LD_INT 8
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PPUSH
48713: CALL_OW 72
48717: ST_TO_ADDR
48718: GO 48721
48720: POP
// if i = 1 then
48721: LD_VAR 0 8
48725: PUSH
48726: LD_INT 1
48728: EQUAL
48729: IFFALSE 48840
// begin tmp := [ ] ;
48731: LD_ADDR_VAR 0 19
48735: PUSH
48736: EMPTY
48737: ST_TO_ADDR
// for j in f do
48738: LD_ADDR_VAR 0 9
48742: PUSH
48743: LD_VAR 0 12
48747: PUSH
48748: FOR_IN
48749: IFFALSE 48822
// if GetBType ( j ) = b_bunker then
48751: LD_VAR 0 9
48755: PPUSH
48756: CALL_OW 266
48760: PUSH
48761: LD_INT 32
48763: EQUAL
48764: IFFALSE 48791
// tmp := Insert ( tmp , 1 , j ) else
48766: LD_ADDR_VAR 0 19
48770: PUSH
48771: LD_VAR 0 19
48775: PPUSH
48776: LD_INT 1
48778: PPUSH
48779: LD_VAR 0 9
48783: PPUSH
48784: CALL_OW 2
48788: ST_TO_ADDR
48789: GO 48820
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48791: LD_ADDR_VAR 0 19
48795: PUSH
48796: LD_VAR 0 19
48800: PPUSH
48801: LD_VAR 0 19
48805: PUSH
48806: LD_INT 1
48808: PLUS
48809: PPUSH
48810: LD_VAR 0 9
48814: PPUSH
48815: CALL_OW 2
48819: ST_TO_ADDR
48820: GO 48748
48822: POP
48823: POP
// if tmp then
48824: LD_VAR 0 19
48828: IFFALSE 48840
// f := tmp ;
48830: LD_ADDR_VAR 0 12
48834: PUSH
48835: LD_VAR 0 19
48839: ST_TO_ADDR
// end ; x := personel [ i ] ;
48840: LD_ADDR_VAR 0 13
48844: PUSH
48845: LD_VAR 0 6
48849: PUSH
48850: LD_VAR 0 8
48854: ARRAY
48855: ST_TO_ADDR
// if x = - 1 then
48856: LD_VAR 0 13
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: EQUAL
48865: IFFALSE 49074
// begin for j in f do
48867: LD_ADDR_VAR 0 9
48871: PUSH
48872: LD_VAR 0 12
48876: PUSH
48877: FOR_IN
48878: IFFALSE 49070
// repeat InitHc ;
48880: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48884: LD_VAR 0 9
48888: PPUSH
48889: CALL_OW 266
48893: PUSH
48894: LD_INT 5
48896: EQUAL
48897: IFFALSE 48967
// begin if UnitsInside ( j ) < 3 then
48899: LD_VAR 0 9
48903: PPUSH
48904: CALL_OW 313
48908: PUSH
48909: LD_INT 3
48911: LESS
48912: IFFALSE 48948
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48914: LD_INT 0
48916: PPUSH
48917: LD_INT 5
48919: PUSH
48920: LD_INT 8
48922: PUSH
48923: LD_INT 9
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: LIST
48930: PUSH
48931: LD_VAR 0 17
48935: ARRAY
48936: PPUSH
48937: LD_VAR 0 4
48941: PPUSH
48942: CALL_OW 380
48946: GO 48965
// PrepareHuman ( false , i , skill ) ;
48948: LD_INT 0
48950: PPUSH
48951: LD_VAR 0 8
48955: PPUSH
48956: LD_VAR 0 4
48960: PPUSH
48961: CALL_OW 380
// end else
48965: GO 48984
// PrepareHuman ( false , i , skill ) ;
48967: LD_INT 0
48969: PPUSH
48970: LD_VAR 0 8
48974: PPUSH
48975: LD_VAR 0 4
48979: PPUSH
48980: CALL_OW 380
// un := CreateHuman ;
48984: LD_ADDR_VAR 0 14
48988: PUSH
48989: CALL_OW 44
48993: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48994: LD_ADDR_VAR 0 7
48998: PUSH
48999: LD_VAR 0 7
49003: PPUSH
49004: LD_INT 1
49006: PPUSH
49007: LD_VAR 0 14
49011: PPUSH
49012: CALL_OW 2
49016: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49017: LD_VAR 0 14
49021: PPUSH
49022: LD_VAR 0 9
49026: PPUSH
49027: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49031: LD_VAR 0 9
49035: PPUSH
49036: CALL_OW 313
49040: PUSH
49041: LD_INT 6
49043: EQUAL
49044: PUSH
49045: LD_VAR 0 9
49049: PPUSH
49050: CALL_OW 266
49054: PUSH
49055: LD_INT 32
49057: PUSH
49058: LD_INT 31
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: IN
49065: OR
49066: IFFALSE 48880
49068: GO 48877
49070: POP
49071: POP
// end else
49072: GO 49454
// for j = 1 to x do
49074: LD_ADDR_VAR 0 9
49078: PUSH
49079: DOUBLE
49080: LD_INT 1
49082: DEC
49083: ST_TO_ADDR
49084: LD_VAR 0 13
49088: PUSH
49089: FOR_TO
49090: IFFALSE 49452
// begin InitHc ;
49092: CALL_OW 19
// if not f then
49096: LD_VAR 0 12
49100: NOT
49101: IFFALSE 49190
// begin PrepareHuman ( false , i , skill ) ;
49103: LD_INT 0
49105: PPUSH
49106: LD_VAR 0 8
49110: PPUSH
49111: LD_VAR 0 4
49115: PPUSH
49116: CALL_OW 380
// un := CreateHuman ;
49120: LD_ADDR_VAR 0 14
49124: PUSH
49125: CALL_OW 44
49129: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49130: LD_ADDR_VAR 0 7
49134: PUSH
49135: LD_VAR 0 7
49139: PPUSH
49140: LD_INT 1
49142: PPUSH
49143: LD_VAR 0 14
49147: PPUSH
49148: CALL_OW 2
49152: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49153: LD_VAR 0 14
49157: PPUSH
49158: LD_VAR 0 1
49162: PPUSH
49163: CALL_OW 250
49167: PPUSH
49168: LD_VAR 0 1
49172: PPUSH
49173: CALL_OW 251
49177: PPUSH
49178: LD_INT 10
49180: PPUSH
49181: LD_INT 0
49183: PPUSH
49184: CALL_OW 50
// continue ;
49188: GO 49089
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49190: LD_VAR 0 12
49194: PUSH
49195: LD_INT 1
49197: ARRAY
49198: PPUSH
49199: CALL_OW 313
49203: PUSH
49204: LD_VAR 0 12
49208: PUSH
49209: LD_INT 1
49211: ARRAY
49212: PPUSH
49213: CALL_OW 266
49217: PUSH
49218: LD_INT 32
49220: PUSH
49221: LD_INT 31
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: IN
49228: AND
49229: PUSH
49230: LD_VAR 0 12
49234: PUSH
49235: LD_INT 1
49237: ARRAY
49238: PPUSH
49239: CALL_OW 313
49243: PUSH
49244: LD_INT 6
49246: EQUAL
49247: OR
49248: IFFALSE 49268
// f := Delete ( f , 1 ) ;
49250: LD_ADDR_VAR 0 12
49254: PUSH
49255: LD_VAR 0 12
49259: PPUSH
49260: LD_INT 1
49262: PPUSH
49263: CALL_OW 3
49267: ST_TO_ADDR
// if not f then
49268: LD_VAR 0 12
49272: NOT
49273: IFFALSE 49291
// begin x := x + 2 ;
49275: LD_ADDR_VAR 0 13
49279: PUSH
49280: LD_VAR 0 13
49284: PUSH
49285: LD_INT 2
49287: PLUS
49288: ST_TO_ADDR
// continue ;
49289: GO 49089
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49291: LD_VAR 0 12
49295: PUSH
49296: LD_INT 1
49298: ARRAY
49299: PPUSH
49300: CALL_OW 266
49304: PUSH
49305: LD_INT 5
49307: EQUAL
49308: IFFALSE 49382
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49310: LD_VAR 0 12
49314: PUSH
49315: LD_INT 1
49317: ARRAY
49318: PPUSH
49319: CALL_OW 313
49323: PUSH
49324: LD_INT 3
49326: LESS
49327: IFFALSE 49363
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49329: LD_INT 0
49331: PPUSH
49332: LD_INT 5
49334: PUSH
49335: LD_INT 8
49337: PUSH
49338: LD_INT 9
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: LIST
49345: PUSH
49346: LD_VAR 0 17
49350: ARRAY
49351: PPUSH
49352: LD_VAR 0 4
49356: PPUSH
49357: CALL_OW 380
49361: GO 49380
// PrepareHuman ( false , i , skill ) ;
49363: LD_INT 0
49365: PPUSH
49366: LD_VAR 0 8
49370: PPUSH
49371: LD_VAR 0 4
49375: PPUSH
49376: CALL_OW 380
// end else
49380: GO 49399
// PrepareHuman ( false , i , skill ) ;
49382: LD_INT 0
49384: PPUSH
49385: LD_VAR 0 8
49389: PPUSH
49390: LD_VAR 0 4
49394: PPUSH
49395: CALL_OW 380
// un := CreateHuman ;
49399: LD_ADDR_VAR 0 14
49403: PUSH
49404: CALL_OW 44
49408: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49409: LD_ADDR_VAR 0 7
49413: PUSH
49414: LD_VAR 0 7
49418: PPUSH
49419: LD_INT 1
49421: PPUSH
49422: LD_VAR 0 14
49426: PPUSH
49427: CALL_OW 2
49431: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49432: LD_VAR 0 14
49436: PPUSH
49437: LD_VAR 0 12
49441: PUSH
49442: LD_INT 1
49444: ARRAY
49445: PPUSH
49446: CALL_OW 52
// end ;
49450: GO 49089
49452: POP
49453: POP
// end ;
49454: GO 48391
49456: POP
49457: POP
// result := result ^ buildings ;
49458: LD_ADDR_VAR 0 7
49462: PUSH
49463: LD_VAR 0 7
49467: PUSH
49468: LD_VAR 0 18
49472: ADD
49473: ST_TO_ADDR
// end else
49474: GO 49617
// begin for i = 1 to personel do
49476: LD_ADDR_VAR 0 8
49480: PUSH
49481: DOUBLE
49482: LD_INT 1
49484: DEC
49485: ST_TO_ADDR
49486: LD_VAR 0 6
49490: PUSH
49491: FOR_TO
49492: IFFALSE 49615
// begin if i > 4 then
49494: LD_VAR 0 8
49498: PUSH
49499: LD_INT 4
49501: GREATER
49502: IFFALSE 49506
// break ;
49504: GO 49615
// x := personel [ i ] ;
49506: LD_ADDR_VAR 0 13
49510: PUSH
49511: LD_VAR 0 6
49515: PUSH
49516: LD_VAR 0 8
49520: ARRAY
49521: ST_TO_ADDR
// if x = - 1 then
49522: LD_VAR 0 13
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: EQUAL
49531: IFFALSE 49535
// continue ;
49533: GO 49491
// PrepareHuman ( false , i , skill ) ;
49535: LD_INT 0
49537: PPUSH
49538: LD_VAR 0 8
49542: PPUSH
49543: LD_VAR 0 4
49547: PPUSH
49548: CALL_OW 380
// un := CreateHuman ;
49552: LD_ADDR_VAR 0 14
49556: PUSH
49557: CALL_OW 44
49561: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49562: LD_VAR 0 14
49566: PPUSH
49567: LD_VAR 0 1
49571: PPUSH
49572: CALL_OW 250
49576: PPUSH
49577: LD_VAR 0 1
49581: PPUSH
49582: CALL_OW 251
49586: PPUSH
49587: LD_INT 10
49589: PPUSH
49590: LD_INT 0
49592: PPUSH
49593: CALL_OW 50
// result := result ^ un ;
49597: LD_ADDR_VAR 0 7
49601: PUSH
49602: LD_VAR 0 7
49606: PUSH
49607: LD_VAR 0 14
49611: ADD
49612: ST_TO_ADDR
// end ;
49613: GO 49491
49615: POP
49616: POP
// end ; end ;
49617: LD_VAR 0 7
49621: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49622: LD_INT 0
49624: PPUSH
49625: PPUSH
49626: PPUSH
49627: PPUSH
49628: PPUSH
49629: PPUSH
49630: PPUSH
49631: PPUSH
49632: PPUSH
49633: PPUSH
49634: PPUSH
49635: PPUSH
49636: PPUSH
49637: PPUSH
49638: PPUSH
49639: PPUSH
// result := false ;
49640: LD_ADDR_VAR 0 3
49644: PUSH
49645: LD_INT 0
49647: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49648: LD_VAR 0 1
49652: NOT
49653: PUSH
49654: LD_VAR 0 1
49658: PPUSH
49659: CALL_OW 266
49663: PUSH
49664: LD_INT 32
49666: PUSH
49667: LD_INT 33
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: IN
49674: NOT
49675: OR
49676: IFFALSE 49680
// exit ;
49678: GO 50789
// nat := GetNation ( tower ) ;
49680: LD_ADDR_VAR 0 12
49684: PUSH
49685: LD_VAR 0 1
49689: PPUSH
49690: CALL_OW 248
49694: ST_TO_ADDR
// side := GetSide ( tower ) ;
49695: LD_ADDR_VAR 0 16
49699: PUSH
49700: LD_VAR 0 1
49704: PPUSH
49705: CALL_OW 255
49709: ST_TO_ADDR
// x := GetX ( tower ) ;
49710: LD_ADDR_VAR 0 10
49714: PUSH
49715: LD_VAR 0 1
49719: PPUSH
49720: CALL_OW 250
49724: ST_TO_ADDR
// y := GetY ( tower ) ;
49725: LD_ADDR_VAR 0 11
49729: PUSH
49730: LD_VAR 0 1
49734: PPUSH
49735: CALL_OW 251
49739: ST_TO_ADDR
// if not x or not y then
49740: LD_VAR 0 10
49744: NOT
49745: PUSH
49746: LD_VAR 0 11
49750: NOT
49751: OR
49752: IFFALSE 49756
// exit ;
49754: GO 50789
// weapon := 0 ;
49756: LD_ADDR_VAR 0 18
49760: PUSH
49761: LD_INT 0
49763: ST_TO_ADDR
// fac_list := [ ] ;
49764: LD_ADDR_VAR 0 17
49768: PUSH
49769: EMPTY
49770: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49771: LD_ADDR_VAR 0 6
49775: PUSH
49776: LD_VAR 0 1
49780: PPUSH
49781: CALL_OW 274
49785: PPUSH
49786: LD_VAR 0 2
49790: PPUSH
49791: LD_INT 0
49793: PPUSH
49794: CALL 47360 0 3
49798: PPUSH
49799: LD_INT 30
49801: PUSH
49802: LD_INT 3
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PPUSH
49809: CALL_OW 72
49813: ST_TO_ADDR
// if not factories then
49814: LD_VAR 0 6
49818: NOT
49819: IFFALSE 49823
// exit ;
49821: GO 50789
// for i in factories do
49823: LD_ADDR_VAR 0 8
49827: PUSH
49828: LD_VAR 0 6
49832: PUSH
49833: FOR_IN
49834: IFFALSE 49859
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49836: LD_ADDR_VAR 0 17
49840: PUSH
49841: LD_VAR 0 17
49845: PUSH
49846: LD_VAR 0 8
49850: PPUSH
49851: CALL_OW 478
49855: UNION
49856: ST_TO_ADDR
49857: GO 49833
49859: POP
49860: POP
// if not fac_list then
49861: LD_VAR 0 17
49865: NOT
49866: IFFALSE 49870
// exit ;
49868: GO 50789
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49870: LD_ADDR_VAR 0 5
49874: PUSH
49875: LD_INT 4
49877: PUSH
49878: LD_INT 5
49880: PUSH
49881: LD_INT 9
49883: PUSH
49884: LD_INT 10
49886: PUSH
49887: LD_INT 6
49889: PUSH
49890: LD_INT 7
49892: PUSH
49893: LD_INT 11
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 27
49907: PUSH
49908: LD_INT 28
49910: PUSH
49911: LD_INT 26
49913: PUSH
49914: LD_INT 30
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 43
49925: PUSH
49926: LD_INT 44
49928: PUSH
49929: LD_INT 46
49931: PUSH
49932: LD_INT 45
49934: PUSH
49935: LD_INT 47
49937: PUSH
49938: LD_INT 49
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: LIST
49953: PUSH
49954: LD_VAR 0 12
49958: ARRAY
49959: ST_TO_ADDR
// list := list isect fac_list ;
49960: LD_ADDR_VAR 0 5
49964: PUSH
49965: LD_VAR 0 5
49969: PUSH
49970: LD_VAR 0 17
49974: ISECT
49975: ST_TO_ADDR
// if not list then
49976: LD_VAR 0 5
49980: NOT
49981: IFFALSE 49985
// exit ;
49983: GO 50789
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49985: LD_VAR 0 12
49989: PUSH
49990: LD_INT 3
49992: EQUAL
49993: PUSH
49994: LD_INT 49
49996: PUSH
49997: LD_VAR 0 5
50001: IN
50002: AND
50003: PUSH
50004: LD_INT 31
50006: PPUSH
50007: LD_VAR 0 16
50011: PPUSH
50012: CALL_OW 321
50016: PUSH
50017: LD_INT 2
50019: EQUAL
50020: AND
50021: IFFALSE 50081
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50023: LD_INT 22
50025: PUSH
50026: LD_VAR 0 16
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 35
50037: PUSH
50038: LD_INT 49
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 91
50047: PUSH
50048: LD_VAR 0 1
50052: PUSH
50053: LD_INT 10
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: LIST
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: LIST
50065: PPUSH
50066: CALL_OW 69
50070: NOT
50071: IFFALSE 50081
// weapon := ru_time_lapser ;
50073: LD_ADDR_VAR 0 18
50077: PUSH
50078: LD_INT 49
50080: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50081: LD_VAR 0 12
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: IN
50096: PUSH
50097: LD_INT 11
50099: PUSH
50100: LD_VAR 0 5
50104: IN
50105: PUSH
50106: LD_INT 30
50108: PUSH
50109: LD_VAR 0 5
50113: IN
50114: OR
50115: AND
50116: PUSH
50117: LD_INT 6
50119: PPUSH
50120: LD_VAR 0 16
50124: PPUSH
50125: CALL_OW 321
50129: PUSH
50130: LD_INT 2
50132: EQUAL
50133: AND
50134: IFFALSE 50299
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50136: LD_INT 22
50138: PUSH
50139: LD_VAR 0 16
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: LD_INT 35
50153: PUSH
50154: LD_INT 11
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 35
50163: PUSH
50164: LD_INT 30
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 91
50178: PUSH
50179: LD_VAR 0 1
50183: PUSH
50184: LD_INT 18
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: LIST
50196: PPUSH
50197: CALL_OW 69
50201: NOT
50202: PUSH
50203: LD_INT 22
50205: PUSH
50206: LD_VAR 0 16
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: LD_INT 30
50220: PUSH
50221: LD_INT 32
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 30
50230: PUSH
50231: LD_INT 33
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 91
50245: PUSH
50246: LD_VAR 0 1
50250: PUSH
50251: LD_INT 12
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: LIST
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: PPUSH
50267: CALL_OW 69
50271: PUSH
50272: LD_INT 2
50274: GREATER
50275: AND
50276: IFFALSE 50299
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50278: LD_ADDR_VAR 0 18
50282: PUSH
50283: LD_INT 11
50285: PUSH
50286: LD_INT 30
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_VAR 0 12
50297: ARRAY
50298: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50299: LD_VAR 0 18
50303: NOT
50304: PUSH
50305: LD_INT 40
50307: PPUSH
50308: LD_VAR 0 16
50312: PPUSH
50313: CALL_OW 321
50317: PUSH
50318: LD_INT 2
50320: EQUAL
50321: AND
50322: PUSH
50323: LD_INT 7
50325: PUSH
50326: LD_VAR 0 5
50330: IN
50331: PUSH
50332: LD_INT 28
50334: PUSH
50335: LD_VAR 0 5
50339: IN
50340: OR
50341: PUSH
50342: LD_INT 45
50344: PUSH
50345: LD_VAR 0 5
50349: IN
50350: OR
50351: AND
50352: IFFALSE 50606
// begin hex := GetHexInfo ( x , y ) ;
50354: LD_ADDR_VAR 0 4
50358: PUSH
50359: LD_VAR 0 10
50363: PPUSH
50364: LD_VAR 0 11
50368: PPUSH
50369: CALL_OW 546
50373: ST_TO_ADDR
// if hex [ 1 ] then
50374: LD_VAR 0 4
50378: PUSH
50379: LD_INT 1
50381: ARRAY
50382: IFFALSE 50386
// exit ;
50384: GO 50789
// height := hex [ 2 ] ;
50386: LD_ADDR_VAR 0 15
50390: PUSH
50391: LD_VAR 0 4
50395: PUSH
50396: LD_INT 2
50398: ARRAY
50399: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50400: LD_ADDR_VAR 0 14
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: LD_INT 3
50413: PUSH
50414: LD_INT 5
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: ST_TO_ADDR
// for i in tmp do
50423: LD_ADDR_VAR 0 8
50427: PUSH
50428: LD_VAR 0 14
50432: PUSH
50433: FOR_IN
50434: IFFALSE 50604
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50436: LD_ADDR_VAR 0 9
50440: PUSH
50441: LD_VAR 0 10
50445: PPUSH
50446: LD_VAR 0 8
50450: PPUSH
50451: LD_INT 5
50453: PPUSH
50454: CALL_OW 272
50458: PUSH
50459: LD_VAR 0 11
50463: PPUSH
50464: LD_VAR 0 8
50468: PPUSH
50469: LD_INT 5
50471: PPUSH
50472: CALL_OW 273
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50481: LD_VAR 0 9
50485: PUSH
50486: LD_INT 1
50488: ARRAY
50489: PPUSH
50490: LD_VAR 0 9
50494: PUSH
50495: LD_INT 2
50497: ARRAY
50498: PPUSH
50499: CALL_OW 488
50503: IFFALSE 50602
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50505: LD_ADDR_VAR 0 4
50509: PUSH
50510: LD_VAR 0 9
50514: PUSH
50515: LD_INT 1
50517: ARRAY
50518: PPUSH
50519: LD_VAR 0 9
50523: PUSH
50524: LD_INT 2
50526: ARRAY
50527: PPUSH
50528: CALL_OW 546
50532: ST_TO_ADDR
// if hex [ 1 ] then
50533: LD_VAR 0 4
50537: PUSH
50538: LD_INT 1
50540: ARRAY
50541: IFFALSE 50545
// continue ;
50543: GO 50433
// h := hex [ 2 ] ;
50545: LD_ADDR_VAR 0 13
50549: PUSH
50550: LD_VAR 0 4
50554: PUSH
50555: LD_INT 2
50557: ARRAY
50558: ST_TO_ADDR
// if h + 7 < height then
50559: LD_VAR 0 13
50563: PUSH
50564: LD_INT 7
50566: PLUS
50567: PUSH
50568: LD_VAR 0 15
50572: LESS
50573: IFFALSE 50602
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50575: LD_ADDR_VAR 0 18
50579: PUSH
50580: LD_INT 7
50582: PUSH
50583: LD_INT 28
50585: PUSH
50586: LD_INT 45
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: LIST
50593: PUSH
50594: LD_VAR 0 12
50598: ARRAY
50599: ST_TO_ADDR
// break ;
50600: GO 50604
// end ; end ; end ;
50602: GO 50433
50604: POP
50605: POP
// end ; if not weapon then
50606: LD_VAR 0 18
50610: NOT
50611: IFFALSE 50671
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50613: LD_ADDR_VAR 0 5
50617: PUSH
50618: LD_VAR 0 5
50622: PUSH
50623: LD_INT 11
50625: PUSH
50626: LD_INT 30
50628: PUSH
50629: LD_INT 49
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: LIST
50636: DIFF
50637: ST_TO_ADDR
// if not list then
50638: LD_VAR 0 5
50642: NOT
50643: IFFALSE 50647
// exit ;
50645: GO 50789
// weapon := list [ rand ( 1 , list ) ] ;
50647: LD_ADDR_VAR 0 18
50651: PUSH
50652: LD_VAR 0 5
50656: PUSH
50657: LD_INT 1
50659: PPUSH
50660: LD_VAR 0 5
50664: PPUSH
50665: CALL_OW 12
50669: ARRAY
50670: ST_TO_ADDR
// end ; if weapon then
50671: LD_VAR 0 18
50675: IFFALSE 50789
// begin tmp := CostOfWeapon ( weapon ) ;
50677: LD_ADDR_VAR 0 14
50681: PUSH
50682: LD_VAR 0 18
50686: PPUSH
50687: CALL_OW 451
50691: ST_TO_ADDR
// j := GetBase ( tower ) ;
50692: LD_ADDR_VAR 0 9
50696: PUSH
50697: LD_VAR 0 1
50701: PPUSH
50702: CALL_OW 274
50706: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50707: LD_VAR 0 9
50711: PPUSH
50712: LD_INT 1
50714: PPUSH
50715: CALL_OW 275
50719: PUSH
50720: LD_VAR 0 14
50724: PUSH
50725: LD_INT 1
50727: ARRAY
50728: GREATEREQUAL
50729: PUSH
50730: LD_VAR 0 9
50734: PPUSH
50735: LD_INT 2
50737: PPUSH
50738: CALL_OW 275
50742: PUSH
50743: LD_VAR 0 14
50747: PUSH
50748: LD_INT 2
50750: ARRAY
50751: GREATEREQUAL
50752: AND
50753: PUSH
50754: LD_VAR 0 9
50758: PPUSH
50759: LD_INT 3
50761: PPUSH
50762: CALL_OW 275
50766: PUSH
50767: LD_VAR 0 14
50771: PUSH
50772: LD_INT 3
50774: ARRAY
50775: GREATEREQUAL
50776: AND
50777: IFFALSE 50789
// result := weapon ;
50779: LD_ADDR_VAR 0 3
50783: PUSH
50784: LD_VAR 0 18
50788: ST_TO_ADDR
// end ; end ;
50789: LD_VAR 0 3
50793: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50794: LD_INT 0
50796: PPUSH
50797: PPUSH
// result := true ;
50798: LD_ADDR_VAR 0 3
50802: PUSH
50803: LD_INT 1
50805: ST_TO_ADDR
// if array1 = array2 then
50806: LD_VAR 0 1
50810: PUSH
50811: LD_VAR 0 2
50815: EQUAL
50816: IFFALSE 50876
// begin for i = 1 to array1 do
50818: LD_ADDR_VAR 0 4
50822: PUSH
50823: DOUBLE
50824: LD_INT 1
50826: DEC
50827: ST_TO_ADDR
50828: LD_VAR 0 1
50832: PUSH
50833: FOR_TO
50834: IFFALSE 50872
// if array1 [ i ] <> array2 [ i ] then
50836: LD_VAR 0 1
50840: PUSH
50841: LD_VAR 0 4
50845: ARRAY
50846: PUSH
50847: LD_VAR 0 2
50851: PUSH
50852: LD_VAR 0 4
50856: ARRAY
50857: NONEQUAL
50858: IFFALSE 50870
// begin result := false ;
50860: LD_ADDR_VAR 0 3
50864: PUSH
50865: LD_INT 0
50867: ST_TO_ADDR
// break ;
50868: GO 50872
// end ;
50870: GO 50833
50872: POP
50873: POP
// end else
50874: GO 50884
// result := false ;
50876: LD_ADDR_VAR 0 3
50880: PUSH
50881: LD_INT 0
50883: ST_TO_ADDR
// end ;
50884: LD_VAR 0 3
50888: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50889: LD_INT 0
50891: PPUSH
50892: PPUSH
// if not array1 or not array2 then
50893: LD_VAR 0 1
50897: NOT
50898: PUSH
50899: LD_VAR 0 2
50903: NOT
50904: OR
50905: IFFALSE 50909
// exit ;
50907: GO 50973
// result := true ;
50909: LD_ADDR_VAR 0 3
50913: PUSH
50914: LD_INT 1
50916: ST_TO_ADDR
// for i = 1 to array1 do
50917: LD_ADDR_VAR 0 4
50921: PUSH
50922: DOUBLE
50923: LD_INT 1
50925: DEC
50926: ST_TO_ADDR
50927: LD_VAR 0 1
50931: PUSH
50932: FOR_TO
50933: IFFALSE 50971
// if array1 [ i ] <> array2 [ i ] then
50935: LD_VAR 0 1
50939: PUSH
50940: LD_VAR 0 4
50944: ARRAY
50945: PUSH
50946: LD_VAR 0 2
50950: PUSH
50951: LD_VAR 0 4
50955: ARRAY
50956: NONEQUAL
50957: IFFALSE 50969
// begin result := false ;
50959: LD_ADDR_VAR 0 3
50963: PUSH
50964: LD_INT 0
50966: ST_TO_ADDR
// break ;
50967: GO 50971
// end ;
50969: GO 50932
50971: POP
50972: POP
// end ;
50973: LD_VAR 0 3
50977: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50978: LD_INT 0
50980: PPUSH
50981: PPUSH
50982: PPUSH
// pom := GetBase ( fac ) ;
50983: LD_ADDR_VAR 0 5
50987: PUSH
50988: LD_VAR 0 1
50992: PPUSH
50993: CALL_OW 274
50997: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50998: LD_ADDR_VAR 0 4
51002: PUSH
51003: LD_VAR 0 2
51007: PUSH
51008: LD_INT 1
51010: ARRAY
51011: PPUSH
51012: LD_VAR 0 2
51016: PUSH
51017: LD_INT 2
51019: ARRAY
51020: PPUSH
51021: LD_VAR 0 2
51025: PUSH
51026: LD_INT 3
51028: ARRAY
51029: PPUSH
51030: LD_VAR 0 2
51034: PUSH
51035: LD_INT 4
51037: ARRAY
51038: PPUSH
51039: CALL_OW 449
51043: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51044: LD_ADDR_VAR 0 3
51048: PUSH
51049: LD_VAR 0 5
51053: PPUSH
51054: LD_INT 1
51056: PPUSH
51057: CALL_OW 275
51061: PUSH
51062: LD_VAR 0 4
51066: PUSH
51067: LD_INT 1
51069: ARRAY
51070: GREATEREQUAL
51071: PUSH
51072: LD_VAR 0 5
51076: PPUSH
51077: LD_INT 2
51079: PPUSH
51080: CALL_OW 275
51084: PUSH
51085: LD_VAR 0 4
51089: PUSH
51090: LD_INT 2
51092: ARRAY
51093: GREATEREQUAL
51094: AND
51095: PUSH
51096: LD_VAR 0 5
51100: PPUSH
51101: LD_INT 3
51103: PPUSH
51104: CALL_OW 275
51108: PUSH
51109: LD_VAR 0 4
51113: PUSH
51114: LD_INT 3
51116: ARRAY
51117: GREATEREQUAL
51118: AND
51119: ST_TO_ADDR
// end ;
51120: LD_VAR 0 3
51124: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51125: LD_INT 0
51127: PPUSH
51128: PPUSH
51129: PPUSH
51130: PPUSH
// pom := GetBase ( building ) ;
51131: LD_ADDR_VAR 0 3
51135: PUSH
51136: LD_VAR 0 1
51140: PPUSH
51141: CALL_OW 274
51145: ST_TO_ADDR
// if not pom then
51146: LD_VAR 0 3
51150: NOT
51151: IFFALSE 51155
// exit ;
51153: GO 51325
// btype := GetBType ( building ) ;
51155: LD_ADDR_VAR 0 5
51159: PUSH
51160: LD_VAR 0 1
51164: PPUSH
51165: CALL_OW 266
51169: ST_TO_ADDR
// if btype = b_armoury then
51170: LD_VAR 0 5
51174: PUSH
51175: LD_INT 4
51177: EQUAL
51178: IFFALSE 51188
// btype := b_barracks ;
51180: LD_ADDR_VAR 0 5
51184: PUSH
51185: LD_INT 5
51187: ST_TO_ADDR
// if btype = b_depot then
51188: LD_VAR 0 5
51192: PUSH
51193: LD_INT 0
51195: EQUAL
51196: IFFALSE 51206
// btype := b_warehouse ;
51198: LD_ADDR_VAR 0 5
51202: PUSH
51203: LD_INT 1
51205: ST_TO_ADDR
// if btype = b_workshop then
51206: LD_VAR 0 5
51210: PUSH
51211: LD_INT 2
51213: EQUAL
51214: IFFALSE 51224
// btype := b_factory ;
51216: LD_ADDR_VAR 0 5
51220: PUSH
51221: LD_INT 3
51223: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51224: LD_ADDR_VAR 0 4
51228: PUSH
51229: LD_VAR 0 5
51233: PPUSH
51234: LD_VAR 0 1
51238: PPUSH
51239: CALL_OW 248
51243: PPUSH
51244: CALL_OW 450
51248: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51249: LD_ADDR_VAR 0 2
51253: PUSH
51254: LD_VAR 0 3
51258: PPUSH
51259: LD_INT 1
51261: PPUSH
51262: CALL_OW 275
51266: PUSH
51267: LD_VAR 0 4
51271: PUSH
51272: LD_INT 1
51274: ARRAY
51275: GREATEREQUAL
51276: PUSH
51277: LD_VAR 0 3
51281: PPUSH
51282: LD_INT 2
51284: PPUSH
51285: CALL_OW 275
51289: PUSH
51290: LD_VAR 0 4
51294: PUSH
51295: LD_INT 2
51297: ARRAY
51298: GREATEREQUAL
51299: AND
51300: PUSH
51301: LD_VAR 0 3
51305: PPUSH
51306: LD_INT 3
51308: PPUSH
51309: CALL_OW 275
51313: PUSH
51314: LD_VAR 0 4
51318: PUSH
51319: LD_INT 3
51321: ARRAY
51322: GREATEREQUAL
51323: AND
51324: ST_TO_ADDR
// end ;
51325: LD_VAR 0 2
51329: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51330: LD_INT 0
51332: PPUSH
51333: PPUSH
51334: PPUSH
// pom := GetBase ( building ) ;
51335: LD_ADDR_VAR 0 4
51339: PUSH
51340: LD_VAR 0 1
51344: PPUSH
51345: CALL_OW 274
51349: ST_TO_ADDR
// if not pom then
51350: LD_VAR 0 4
51354: NOT
51355: IFFALSE 51359
// exit ;
51357: GO 51460
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51359: LD_ADDR_VAR 0 5
51363: PUSH
51364: LD_VAR 0 2
51368: PPUSH
51369: LD_VAR 0 1
51373: PPUSH
51374: CALL_OW 248
51378: PPUSH
51379: CALL_OW 450
51383: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51384: LD_ADDR_VAR 0 3
51388: PUSH
51389: LD_VAR 0 4
51393: PPUSH
51394: LD_INT 1
51396: PPUSH
51397: CALL_OW 275
51401: PUSH
51402: LD_VAR 0 5
51406: PUSH
51407: LD_INT 1
51409: ARRAY
51410: GREATEREQUAL
51411: PUSH
51412: LD_VAR 0 4
51416: PPUSH
51417: LD_INT 2
51419: PPUSH
51420: CALL_OW 275
51424: PUSH
51425: LD_VAR 0 5
51429: PUSH
51430: LD_INT 2
51432: ARRAY
51433: GREATEREQUAL
51434: AND
51435: PUSH
51436: LD_VAR 0 4
51440: PPUSH
51441: LD_INT 3
51443: PPUSH
51444: CALL_OW 275
51448: PUSH
51449: LD_VAR 0 5
51453: PUSH
51454: LD_INT 3
51456: ARRAY
51457: GREATEREQUAL
51458: AND
51459: ST_TO_ADDR
// end ;
51460: LD_VAR 0 3
51464: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51465: LD_INT 0
51467: PPUSH
51468: PPUSH
51469: PPUSH
51470: PPUSH
51471: PPUSH
51472: PPUSH
51473: PPUSH
51474: PPUSH
51475: PPUSH
51476: PPUSH
51477: PPUSH
// result := false ;
51478: LD_ADDR_VAR 0 8
51482: PUSH
51483: LD_INT 0
51485: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51486: LD_VAR 0 5
51490: NOT
51491: PUSH
51492: LD_VAR 0 1
51496: NOT
51497: OR
51498: PUSH
51499: LD_VAR 0 2
51503: NOT
51504: OR
51505: PUSH
51506: LD_VAR 0 3
51510: NOT
51511: OR
51512: IFFALSE 51516
// exit ;
51514: GO 52330
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51516: LD_ADDR_VAR 0 14
51520: PUSH
51521: LD_VAR 0 1
51525: PPUSH
51526: LD_VAR 0 2
51530: PPUSH
51531: LD_VAR 0 3
51535: PPUSH
51536: LD_VAR 0 4
51540: PPUSH
51541: LD_VAR 0 5
51545: PUSH
51546: LD_INT 1
51548: ARRAY
51549: PPUSH
51550: CALL_OW 248
51554: PPUSH
51555: LD_INT 0
51557: PPUSH
51558: CALL 53583 0 6
51562: ST_TO_ADDR
// if not hexes then
51563: LD_VAR 0 14
51567: NOT
51568: IFFALSE 51572
// exit ;
51570: GO 52330
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51572: LD_ADDR_VAR 0 17
51576: PUSH
51577: LD_VAR 0 5
51581: PPUSH
51582: LD_INT 22
51584: PUSH
51585: LD_VAR 0 13
51589: PPUSH
51590: CALL_OW 255
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: LD_INT 30
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 30
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: LIST
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PPUSH
51631: CALL_OW 72
51635: ST_TO_ADDR
// for i = 1 to hexes do
51636: LD_ADDR_VAR 0 9
51640: PUSH
51641: DOUBLE
51642: LD_INT 1
51644: DEC
51645: ST_TO_ADDR
51646: LD_VAR 0 14
51650: PUSH
51651: FOR_TO
51652: IFFALSE 52328
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51654: LD_ADDR_VAR 0 13
51658: PUSH
51659: LD_VAR 0 14
51663: PUSH
51664: LD_VAR 0 9
51668: ARRAY
51669: PUSH
51670: LD_INT 1
51672: ARRAY
51673: PPUSH
51674: LD_VAR 0 14
51678: PUSH
51679: LD_VAR 0 9
51683: ARRAY
51684: PUSH
51685: LD_INT 2
51687: ARRAY
51688: PPUSH
51689: CALL_OW 428
51693: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51694: LD_VAR 0 14
51698: PUSH
51699: LD_VAR 0 9
51703: ARRAY
51704: PUSH
51705: LD_INT 1
51707: ARRAY
51708: PPUSH
51709: LD_VAR 0 14
51713: PUSH
51714: LD_VAR 0 9
51718: ARRAY
51719: PUSH
51720: LD_INT 2
51722: ARRAY
51723: PPUSH
51724: CALL_OW 351
51728: PUSH
51729: LD_VAR 0 14
51733: PUSH
51734: LD_VAR 0 9
51738: ARRAY
51739: PUSH
51740: LD_INT 1
51742: ARRAY
51743: PPUSH
51744: LD_VAR 0 14
51748: PUSH
51749: LD_VAR 0 9
51753: ARRAY
51754: PUSH
51755: LD_INT 2
51757: ARRAY
51758: PPUSH
51759: CALL_OW 488
51763: NOT
51764: OR
51765: PUSH
51766: LD_VAR 0 13
51770: PPUSH
51771: CALL_OW 247
51775: PUSH
51776: LD_INT 3
51778: EQUAL
51779: OR
51780: IFFALSE 51786
// exit ;
51782: POP
51783: POP
51784: GO 52330
// if not tmp then
51786: LD_VAR 0 13
51790: NOT
51791: IFFALSE 51795
// continue ;
51793: GO 51651
// result := true ;
51795: LD_ADDR_VAR 0 8
51799: PUSH
51800: LD_INT 1
51802: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51803: LD_VAR 0 6
51807: PUSH
51808: LD_VAR 0 13
51812: PPUSH
51813: CALL_OW 247
51817: PUSH
51818: LD_INT 2
51820: EQUAL
51821: AND
51822: PUSH
51823: LD_VAR 0 13
51827: PPUSH
51828: CALL_OW 263
51832: PUSH
51833: LD_INT 1
51835: EQUAL
51836: AND
51837: IFFALSE 52001
// begin if IsDrivenBy ( tmp ) then
51839: LD_VAR 0 13
51843: PPUSH
51844: CALL_OW 311
51848: IFFALSE 51852
// continue ;
51850: GO 51651
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51852: LD_VAR 0 6
51856: PPUSH
51857: LD_INT 3
51859: PUSH
51860: LD_INT 60
51862: PUSH
51863: EMPTY
51864: LIST
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 3
51872: PUSH
51873: LD_INT 55
51875: PUSH
51876: EMPTY
51877: LIST
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PPUSH
51887: CALL_OW 72
51891: IFFALSE 51999
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51893: LD_ADDR_VAR 0 18
51897: PUSH
51898: LD_VAR 0 6
51902: PPUSH
51903: LD_INT 3
51905: PUSH
51906: LD_INT 60
51908: PUSH
51909: EMPTY
51910: LIST
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: PUSH
51919: LD_INT 55
51921: PUSH
51922: EMPTY
51923: LIST
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PPUSH
51933: CALL_OW 72
51937: PUSH
51938: LD_INT 1
51940: ARRAY
51941: ST_TO_ADDR
// if IsInUnit ( driver ) then
51942: LD_VAR 0 18
51946: PPUSH
51947: CALL_OW 310
51951: IFFALSE 51962
// ComExit ( driver ) ;
51953: LD_VAR 0 18
51957: PPUSH
51958: CALL 77375 0 1
// AddComEnterUnit ( driver , tmp ) ;
51962: LD_VAR 0 18
51966: PPUSH
51967: LD_VAR 0 13
51971: PPUSH
51972: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51976: LD_VAR 0 18
51980: PPUSH
51981: LD_VAR 0 7
51985: PPUSH
51986: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51990: LD_VAR 0 18
51994: PPUSH
51995: CALL_OW 181
// end ; continue ;
51999: GO 51651
// end ; if not cleaners or not tmp in cleaners then
52001: LD_VAR 0 6
52005: NOT
52006: PUSH
52007: LD_VAR 0 13
52011: PUSH
52012: LD_VAR 0 6
52016: IN
52017: NOT
52018: OR
52019: IFFALSE 52326
// begin if dep then
52021: LD_VAR 0 17
52025: IFFALSE 52161
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52027: LD_ADDR_VAR 0 16
52031: PUSH
52032: LD_VAR 0 17
52036: PUSH
52037: LD_INT 1
52039: ARRAY
52040: PPUSH
52041: CALL_OW 250
52045: PPUSH
52046: LD_VAR 0 17
52050: PUSH
52051: LD_INT 1
52053: ARRAY
52054: PPUSH
52055: CALL_OW 254
52059: PPUSH
52060: LD_INT 5
52062: PPUSH
52063: CALL_OW 272
52067: PUSH
52068: LD_VAR 0 17
52072: PUSH
52073: LD_INT 1
52075: ARRAY
52076: PPUSH
52077: CALL_OW 251
52081: PPUSH
52082: LD_VAR 0 17
52086: PUSH
52087: LD_INT 1
52089: ARRAY
52090: PPUSH
52091: CALL_OW 254
52095: PPUSH
52096: LD_INT 5
52098: PPUSH
52099: CALL_OW 273
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52108: LD_VAR 0 16
52112: PUSH
52113: LD_INT 1
52115: ARRAY
52116: PPUSH
52117: LD_VAR 0 16
52121: PUSH
52122: LD_INT 2
52124: ARRAY
52125: PPUSH
52126: CALL_OW 488
52130: IFFALSE 52161
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52132: LD_VAR 0 13
52136: PPUSH
52137: LD_VAR 0 16
52141: PUSH
52142: LD_INT 1
52144: ARRAY
52145: PPUSH
52146: LD_VAR 0 16
52150: PUSH
52151: LD_INT 2
52153: ARRAY
52154: PPUSH
52155: CALL_OW 111
// continue ;
52159: GO 51651
// end ; end ; r := GetDir ( tmp ) ;
52161: LD_ADDR_VAR 0 15
52165: PUSH
52166: LD_VAR 0 13
52170: PPUSH
52171: CALL_OW 254
52175: ST_TO_ADDR
// if r = 5 then
52176: LD_VAR 0 15
52180: PUSH
52181: LD_INT 5
52183: EQUAL
52184: IFFALSE 52194
// r := 0 ;
52186: LD_ADDR_VAR 0 15
52190: PUSH
52191: LD_INT 0
52193: ST_TO_ADDR
// for j = r to 5 do
52194: LD_ADDR_VAR 0 10
52198: PUSH
52199: DOUBLE
52200: LD_VAR 0 15
52204: DEC
52205: ST_TO_ADDR
52206: LD_INT 5
52208: PUSH
52209: FOR_TO
52210: IFFALSE 52324
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52212: LD_ADDR_VAR 0 11
52216: PUSH
52217: LD_VAR 0 13
52221: PPUSH
52222: CALL_OW 250
52226: PPUSH
52227: LD_VAR 0 10
52231: PPUSH
52232: LD_INT 2
52234: PPUSH
52235: CALL_OW 272
52239: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52240: LD_ADDR_VAR 0 12
52244: PUSH
52245: LD_VAR 0 13
52249: PPUSH
52250: CALL_OW 251
52254: PPUSH
52255: LD_VAR 0 10
52259: PPUSH
52260: LD_INT 2
52262: PPUSH
52263: CALL_OW 273
52267: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52268: LD_VAR 0 11
52272: PPUSH
52273: LD_VAR 0 12
52277: PPUSH
52278: CALL_OW 488
52282: PUSH
52283: LD_VAR 0 11
52287: PPUSH
52288: LD_VAR 0 12
52292: PPUSH
52293: CALL_OW 428
52297: NOT
52298: AND
52299: IFFALSE 52322
// begin ComMoveXY ( tmp , _x , _y ) ;
52301: LD_VAR 0 13
52305: PPUSH
52306: LD_VAR 0 11
52310: PPUSH
52311: LD_VAR 0 12
52315: PPUSH
52316: CALL_OW 111
// break ;
52320: GO 52324
// end ; end ;
52322: GO 52209
52324: POP
52325: POP
// end ; end ;
52326: GO 51651
52328: POP
52329: POP
// end ;
52330: LD_VAR 0 8
52334: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52335: LD_INT 0
52337: PPUSH
// result := true ;
52338: LD_ADDR_VAR 0 3
52342: PUSH
52343: LD_INT 1
52345: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52346: LD_VAR 0 2
52350: PUSH
52351: LD_INT 24
52353: DOUBLE
52354: EQUAL
52355: IFTRUE 52365
52357: LD_INT 33
52359: DOUBLE
52360: EQUAL
52361: IFTRUE 52365
52363: GO 52390
52365: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52366: LD_ADDR_VAR 0 3
52370: PUSH
52371: LD_INT 32
52373: PPUSH
52374: LD_VAR 0 1
52378: PPUSH
52379: CALL_OW 321
52383: PUSH
52384: LD_INT 2
52386: EQUAL
52387: ST_TO_ADDR
52388: GO 52706
52390: LD_INT 20
52392: DOUBLE
52393: EQUAL
52394: IFTRUE 52398
52396: GO 52423
52398: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52399: LD_ADDR_VAR 0 3
52403: PUSH
52404: LD_INT 6
52406: PPUSH
52407: LD_VAR 0 1
52411: PPUSH
52412: CALL_OW 321
52416: PUSH
52417: LD_INT 2
52419: EQUAL
52420: ST_TO_ADDR
52421: GO 52706
52423: LD_INT 22
52425: DOUBLE
52426: EQUAL
52427: IFTRUE 52437
52429: LD_INT 36
52431: DOUBLE
52432: EQUAL
52433: IFTRUE 52437
52435: GO 52462
52437: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52438: LD_ADDR_VAR 0 3
52442: PUSH
52443: LD_INT 15
52445: PPUSH
52446: LD_VAR 0 1
52450: PPUSH
52451: CALL_OW 321
52455: PUSH
52456: LD_INT 2
52458: EQUAL
52459: ST_TO_ADDR
52460: GO 52706
52462: LD_INT 30
52464: DOUBLE
52465: EQUAL
52466: IFTRUE 52470
52468: GO 52495
52470: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52471: LD_ADDR_VAR 0 3
52475: PUSH
52476: LD_INT 20
52478: PPUSH
52479: LD_VAR 0 1
52483: PPUSH
52484: CALL_OW 321
52488: PUSH
52489: LD_INT 2
52491: EQUAL
52492: ST_TO_ADDR
52493: GO 52706
52495: LD_INT 28
52497: DOUBLE
52498: EQUAL
52499: IFTRUE 52509
52501: LD_INT 21
52503: DOUBLE
52504: EQUAL
52505: IFTRUE 52509
52507: GO 52534
52509: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52510: LD_ADDR_VAR 0 3
52514: PUSH
52515: LD_INT 21
52517: PPUSH
52518: LD_VAR 0 1
52522: PPUSH
52523: CALL_OW 321
52527: PUSH
52528: LD_INT 2
52530: EQUAL
52531: ST_TO_ADDR
52532: GO 52706
52534: LD_INT 16
52536: DOUBLE
52537: EQUAL
52538: IFTRUE 52542
52540: GO 52567
52542: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52543: LD_ADDR_VAR 0 3
52547: PUSH
52548: LD_INT 84
52550: PPUSH
52551: LD_VAR 0 1
52555: PPUSH
52556: CALL_OW 321
52560: PUSH
52561: LD_INT 2
52563: EQUAL
52564: ST_TO_ADDR
52565: GO 52706
52567: LD_INT 19
52569: DOUBLE
52570: EQUAL
52571: IFTRUE 52581
52573: LD_INT 23
52575: DOUBLE
52576: EQUAL
52577: IFTRUE 52581
52579: GO 52606
52581: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52582: LD_ADDR_VAR 0 3
52586: PUSH
52587: LD_INT 83
52589: PPUSH
52590: LD_VAR 0 1
52594: PPUSH
52595: CALL_OW 321
52599: PUSH
52600: LD_INT 2
52602: EQUAL
52603: ST_TO_ADDR
52604: GO 52706
52606: LD_INT 17
52608: DOUBLE
52609: EQUAL
52610: IFTRUE 52614
52612: GO 52639
52614: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52615: LD_ADDR_VAR 0 3
52619: PUSH
52620: LD_INT 39
52622: PPUSH
52623: LD_VAR 0 1
52627: PPUSH
52628: CALL_OW 321
52632: PUSH
52633: LD_INT 2
52635: EQUAL
52636: ST_TO_ADDR
52637: GO 52706
52639: LD_INT 18
52641: DOUBLE
52642: EQUAL
52643: IFTRUE 52647
52645: GO 52672
52647: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52648: LD_ADDR_VAR 0 3
52652: PUSH
52653: LD_INT 40
52655: PPUSH
52656: LD_VAR 0 1
52660: PPUSH
52661: CALL_OW 321
52665: PUSH
52666: LD_INT 2
52668: EQUAL
52669: ST_TO_ADDR
52670: GO 52706
52672: LD_INT 27
52674: DOUBLE
52675: EQUAL
52676: IFTRUE 52680
52678: GO 52705
52680: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52681: LD_ADDR_VAR 0 3
52685: PUSH
52686: LD_INT 35
52688: PPUSH
52689: LD_VAR 0 1
52693: PPUSH
52694: CALL_OW 321
52698: PUSH
52699: LD_INT 2
52701: EQUAL
52702: ST_TO_ADDR
52703: GO 52706
52705: POP
// end ;
52706: LD_VAR 0 3
52710: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52711: LD_INT 0
52713: PPUSH
52714: PPUSH
52715: PPUSH
52716: PPUSH
52717: PPUSH
52718: PPUSH
52719: PPUSH
52720: PPUSH
52721: PPUSH
52722: PPUSH
52723: PPUSH
// result := false ;
52724: LD_ADDR_VAR 0 6
52728: PUSH
52729: LD_INT 0
52731: ST_TO_ADDR
// if btype = b_depot then
52732: LD_VAR 0 2
52736: PUSH
52737: LD_INT 0
52739: EQUAL
52740: IFFALSE 52752
// begin result := true ;
52742: LD_ADDR_VAR 0 6
52746: PUSH
52747: LD_INT 1
52749: ST_TO_ADDR
// exit ;
52750: GO 53578
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52752: LD_VAR 0 1
52756: NOT
52757: PUSH
52758: LD_VAR 0 1
52762: PPUSH
52763: CALL_OW 266
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: IN
52778: NOT
52779: OR
52780: PUSH
52781: LD_VAR 0 2
52785: NOT
52786: OR
52787: PUSH
52788: LD_VAR 0 5
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: LD_INT 3
52804: PUSH
52805: LD_INT 4
52807: PUSH
52808: LD_INT 5
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: IN
52819: NOT
52820: OR
52821: PUSH
52822: LD_VAR 0 3
52826: PPUSH
52827: LD_VAR 0 4
52831: PPUSH
52832: CALL_OW 488
52836: NOT
52837: OR
52838: IFFALSE 52842
// exit ;
52840: GO 53578
// side := GetSide ( depot ) ;
52842: LD_ADDR_VAR 0 9
52846: PUSH
52847: LD_VAR 0 1
52851: PPUSH
52852: CALL_OW 255
52856: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52857: LD_VAR 0 9
52861: PPUSH
52862: LD_VAR 0 2
52866: PPUSH
52867: CALL 52335 0 2
52871: NOT
52872: IFFALSE 52876
// exit ;
52874: GO 53578
// pom := GetBase ( depot ) ;
52876: LD_ADDR_VAR 0 10
52880: PUSH
52881: LD_VAR 0 1
52885: PPUSH
52886: CALL_OW 274
52890: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52891: LD_ADDR_VAR 0 11
52895: PUSH
52896: LD_VAR 0 2
52900: PPUSH
52901: LD_VAR 0 1
52905: PPUSH
52906: CALL_OW 248
52910: PPUSH
52911: CALL_OW 450
52915: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52916: LD_VAR 0 10
52920: PPUSH
52921: LD_INT 1
52923: PPUSH
52924: CALL_OW 275
52928: PUSH
52929: LD_VAR 0 11
52933: PUSH
52934: LD_INT 1
52936: ARRAY
52937: GREATEREQUAL
52938: PUSH
52939: LD_VAR 0 10
52943: PPUSH
52944: LD_INT 2
52946: PPUSH
52947: CALL_OW 275
52951: PUSH
52952: LD_VAR 0 11
52956: PUSH
52957: LD_INT 2
52959: ARRAY
52960: GREATEREQUAL
52961: AND
52962: PUSH
52963: LD_VAR 0 10
52967: PPUSH
52968: LD_INT 3
52970: PPUSH
52971: CALL_OW 275
52975: PUSH
52976: LD_VAR 0 11
52980: PUSH
52981: LD_INT 3
52983: ARRAY
52984: GREATEREQUAL
52985: AND
52986: NOT
52987: IFFALSE 52991
// exit ;
52989: GO 53578
// if GetBType ( depot ) = b_depot then
52991: LD_VAR 0 1
52995: PPUSH
52996: CALL_OW 266
53000: PUSH
53001: LD_INT 0
53003: EQUAL
53004: IFFALSE 53016
// dist := 28 else
53006: LD_ADDR_VAR 0 14
53010: PUSH
53011: LD_INT 28
53013: ST_TO_ADDR
53014: GO 53024
// dist := 36 ;
53016: LD_ADDR_VAR 0 14
53020: PUSH
53021: LD_INT 36
53023: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53024: LD_VAR 0 1
53028: PPUSH
53029: LD_VAR 0 3
53033: PPUSH
53034: LD_VAR 0 4
53038: PPUSH
53039: CALL_OW 297
53043: PUSH
53044: LD_VAR 0 14
53048: GREATER
53049: IFFALSE 53053
// exit ;
53051: GO 53578
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53053: LD_ADDR_VAR 0 12
53057: PUSH
53058: LD_VAR 0 2
53062: PPUSH
53063: LD_VAR 0 3
53067: PPUSH
53068: LD_VAR 0 4
53072: PPUSH
53073: LD_VAR 0 5
53077: PPUSH
53078: LD_VAR 0 1
53082: PPUSH
53083: CALL_OW 248
53087: PPUSH
53088: LD_INT 0
53090: PPUSH
53091: CALL 53583 0 6
53095: ST_TO_ADDR
// if not hexes then
53096: LD_VAR 0 12
53100: NOT
53101: IFFALSE 53105
// exit ;
53103: GO 53578
// hex := GetHexInfo ( x , y ) ;
53105: LD_ADDR_VAR 0 15
53109: PUSH
53110: LD_VAR 0 3
53114: PPUSH
53115: LD_VAR 0 4
53119: PPUSH
53120: CALL_OW 546
53124: ST_TO_ADDR
// if hex [ 1 ] then
53125: LD_VAR 0 15
53129: PUSH
53130: LD_INT 1
53132: ARRAY
53133: IFFALSE 53137
// exit ;
53135: GO 53578
// height := hex [ 2 ] ;
53137: LD_ADDR_VAR 0 13
53141: PUSH
53142: LD_VAR 0 15
53146: PUSH
53147: LD_INT 2
53149: ARRAY
53150: ST_TO_ADDR
// for i = 1 to hexes do
53151: LD_ADDR_VAR 0 7
53155: PUSH
53156: DOUBLE
53157: LD_INT 1
53159: DEC
53160: ST_TO_ADDR
53161: LD_VAR 0 12
53165: PUSH
53166: FOR_TO
53167: IFFALSE 53497
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53169: LD_VAR 0 12
53173: PUSH
53174: LD_VAR 0 7
53178: ARRAY
53179: PUSH
53180: LD_INT 1
53182: ARRAY
53183: PPUSH
53184: LD_VAR 0 12
53188: PUSH
53189: LD_VAR 0 7
53193: ARRAY
53194: PUSH
53195: LD_INT 2
53197: ARRAY
53198: PPUSH
53199: CALL_OW 488
53203: NOT
53204: PUSH
53205: LD_VAR 0 12
53209: PUSH
53210: LD_VAR 0 7
53214: ARRAY
53215: PUSH
53216: LD_INT 1
53218: ARRAY
53219: PPUSH
53220: LD_VAR 0 12
53224: PUSH
53225: LD_VAR 0 7
53229: ARRAY
53230: PUSH
53231: LD_INT 2
53233: ARRAY
53234: PPUSH
53235: CALL_OW 428
53239: PUSH
53240: LD_INT 0
53242: GREATER
53243: OR
53244: PUSH
53245: LD_VAR 0 12
53249: PUSH
53250: LD_VAR 0 7
53254: ARRAY
53255: PUSH
53256: LD_INT 1
53258: ARRAY
53259: PPUSH
53260: LD_VAR 0 12
53264: PUSH
53265: LD_VAR 0 7
53269: ARRAY
53270: PUSH
53271: LD_INT 2
53273: ARRAY
53274: PPUSH
53275: CALL_OW 351
53279: OR
53280: IFFALSE 53286
// exit ;
53282: POP
53283: POP
53284: GO 53578
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53286: LD_ADDR_VAR 0 8
53290: PUSH
53291: LD_VAR 0 12
53295: PUSH
53296: LD_VAR 0 7
53300: ARRAY
53301: PUSH
53302: LD_INT 1
53304: ARRAY
53305: PPUSH
53306: LD_VAR 0 12
53310: PUSH
53311: LD_VAR 0 7
53315: ARRAY
53316: PUSH
53317: LD_INT 2
53319: ARRAY
53320: PPUSH
53321: CALL_OW 546
53325: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53326: LD_VAR 0 8
53330: PUSH
53331: LD_INT 1
53333: ARRAY
53334: PUSH
53335: LD_VAR 0 8
53339: PUSH
53340: LD_INT 2
53342: ARRAY
53343: PUSH
53344: LD_VAR 0 13
53348: PUSH
53349: LD_INT 2
53351: PLUS
53352: GREATER
53353: OR
53354: PUSH
53355: LD_VAR 0 8
53359: PUSH
53360: LD_INT 2
53362: ARRAY
53363: PUSH
53364: LD_VAR 0 13
53368: PUSH
53369: LD_INT 2
53371: MINUS
53372: LESS
53373: OR
53374: PUSH
53375: LD_VAR 0 8
53379: PUSH
53380: LD_INT 3
53382: ARRAY
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 8
53389: PUSH
53390: LD_INT 9
53392: PUSH
53393: LD_INT 10
53395: PUSH
53396: LD_INT 11
53398: PUSH
53399: LD_INT 12
53401: PUSH
53402: LD_INT 13
53404: PUSH
53405: LD_INT 16
53407: PUSH
53408: LD_INT 17
53410: PUSH
53411: LD_INT 18
53413: PUSH
53414: LD_INT 19
53416: PUSH
53417: LD_INT 20
53419: PUSH
53420: LD_INT 21
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: IN
53438: NOT
53439: OR
53440: PUSH
53441: LD_VAR 0 8
53445: PUSH
53446: LD_INT 5
53448: ARRAY
53449: NOT
53450: OR
53451: PUSH
53452: LD_VAR 0 8
53456: PUSH
53457: LD_INT 6
53459: ARRAY
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: LD_INT 7
53469: PUSH
53470: LD_INT 9
53472: PUSH
53473: LD_INT 10
53475: PUSH
53476: LD_INT 11
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: IN
53487: NOT
53488: OR
53489: IFFALSE 53495
// exit ;
53491: POP
53492: POP
53493: GO 53578
// end ;
53495: GO 53166
53497: POP
53498: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53499: LD_VAR 0 9
53503: PPUSH
53504: LD_VAR 0 3
53508: PPUSH
53509: LD_VAR 0 4
53513: PPUSH
53514: LD_INT 20
53516: PPUSH
53517: CALL 45501 0 4
53521: PUSH
53522: LD_INT 4
53524: ARRAY
53525: IFFALSE 53529
// exit ;
53527: GO 53578
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53529: LD_VAR 0 2
53533: PUSH
53534: LD_INT 29
53536: PUSH
53537: LD_INT 30
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: IN
53544: PUSH
53545: LD_VAR 0 3
53549: PPUSH
53550: LD_VAR 0 4
53554: PPUSH
53555: LD_VAR 0 9
53559: PPUSH
53560: CALL_OW 440
53564: NOT
53565: AND
53566: IFFALSE 53570
// exit ;
53568: GO 53578
// result := true ;
53570: LD_ADDR_VAR 0 6
53574: PUSH
53575: LD_INT 1
53577: ST_TO_ADDR
// end ;
53578: LD_VAR 0 6
53582: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53583: LD_INT 0
53585: PPUSH
53586: PPUSH
53587: PPUSH
53588: PPUSH
53589: PPUSH
53590: PPUSH
53591: PPUSH
53592: PPUSH
53593: PPUSH
53594: PPUSH
53595: PPUSH
53596: PPUSH
53597: PPUSH
53598: PPUSH
53599: PPUSH
53600: PPUSH
53601: PPUSH
53602: PPUSH
53603: PPUSH
53604: PPUSH
53605: PPUSH
53606: PPUSH
53607: PPUSH
53608: PPUSH
53609: PPUSH
53610: PPUSH
53611: PPUSH
53612: PPUSH
53613: PPUSH
53614: PPUSH
53615: PPUSH
53616: PPUSH
53617: PPUSH
53618: PPUSH
53619: PPUSH
53620: PPUSH
53621: PPUSH
53622: PPUSH
53623: PPUSH
53624: PPUSH
53625: PPUSH
53626: PPUSH
53627: PPUSH
53628: PPUSH
53629: PPUSH
53630: PPUSH
53631: PPUSH
53632: PPUSH
53633: PPUSH
53634: PPUSH
53635: PPUSH
53636: PPUSH
53637: PPUSH
53638: PPUSH
53639: PPUSH
53640: PPUSH
53641: PPUSH
53642: PPUSH
// result = [ ] ;
53643: LD_ADDR_VAR 0 7
53647: PUSH
53648: EMPTY
53649: ST_TO_ADDR
// temp_list = [ ] ;
53650: LD_ADDR_VAR 0 9
53654: PUSH
53655: EMPTY
53656: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53657: LD_VAR 0 4
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: LD_INT 3
53673: PUSH
53674: LD_INT 4
53676: PUSH
53677: LD_INT 5
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: IN
53688: NOT
53689: PUSH
53690: LD_VAR 0 1
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: IN
53705: PUSH
53706: LD_VAR 0 5
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: LD_INT 3
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: LIST
53724: IN
53725: NOT
53726: AND
53727: OR
53728: IFFALSE 53732
// exit ;
53730: GO 72123
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53732: LD_VAR 0 1
53736: PUSH
53737: LD_INT 6
53739: PUSH
53740: LD_INT 7
53742: PUSH
53743: LD_INT 8
53745: PUSH
53746: LD_INT 13
53748: PUSH
53749: LD_INT 12
53751: PUSH
53752: LD_INT 15
53754: PUSH
53755: LD_INT 11
53757: PUSH
53758: LD_INT 14
53760: PUSH
53761: LD_INT 10
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: IN
53775: IFFALSE 53785
// btype = b_lab ;
53777: LD_ADDR_VAR 0 1
53781: PUSH
53782: LD_INT 6
53784: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53785: LD_VAR 0 6
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: LIST
53803: IN
53804: NOT
53805: PUSH
53806: LD_VAR 0 1
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: LD_INT 3
53822: PUSH
53823: LD_INT 6
53825: PUSH
53826: LD_INT 36
53828: PUSH
53829: LD_INT 4
53831: PUSH
53832: LD_INT 5
53834: PUSH
53835: LD_INT 31
53837: PUSH
53838: LD_INT 32
53840: PUSH
53841: LD_INT 33
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: IN
53857: NOT
53858: PUSH
53859: LD_VAR 0 6
53863: PUSH
53864: LD_INT 1
53866: EQUAL
53867: AND
53868: OR
53869: PUSH
53870: LD_VAR 0 1
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: LD_INT 3
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: IN
53885: NOT
53886: PUSH
53887: LD_VAR 0 6
53891: PUSH
53892: LD_INT 2
53894: EQUAL
53895: AND
53896: OR
53897: IFFALSE 53907
// mode = 0 ;
53899: LD_ADDR_VAR 0 6
53903: PUSH
53904: LD_INT 0
53906: ST_TO_ADDR
// case mode of 0 :
53907: LD_VAR 0 6
53911: PUSH
53912: LD_INT 0
53914: DOUBLE
53915: EQUAL
53916: IFTRUE 53920
53918: GO 65373
53920: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53921: LD_ADDR_VAR 0 11
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 2
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: LD_INT 2
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: LD_INT 3
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 3
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: NEG
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54114: LD_ADDR_VAR 0 12
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: NEG
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 2
54248: NEG
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: NEG
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 3
54271: NEG
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 3
54282: NEG
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54310: LD_ADDR_VAR 0 13
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: LD_INT 2
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 2
54457: NEG
54458: PUSH
54459: LD_INT 3
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 3
54469: NEG
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: LD_INT 3
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54509: LD_ADDR_VAR 0 14
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: LD_INT 2
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 3
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 3
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54705: LD_ADDR_VAR 0 15
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 3
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54898: LD_ADDR_VAR 0 16
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 3
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 3
55055: PUSH
55056: LD_INT 3
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 3
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55091: LD_ADDR_VAR 0 17
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: LD_INT 2
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: LD_INT 2
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 2
55267: NEG
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: NEG
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 2
55290: NEG
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55321: LD_ADDR_VAR 0 18
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 1
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 2
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: LD_INT 2
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 2
55497: NEG
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 2
55520: NEG
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55551: LD_ADDR_VAR 0 19
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: LD_INT 2
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 2
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 2
55727: NEG
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55781: LD_ADDR_VAR 0 20
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: LD_INT 2
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 2
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56011: LD_ADDR_VAR 0 21
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: LD_INT 2
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 2
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 2
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 2
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 2
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: LD_INT 2
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56241: LD_ADDR_VAR 0 22
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: NEG
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56471: LD_ADDR_VAR 0 23
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 1
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: LD_INT 2
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 2
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 2
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 2
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: NEG
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 2
56670: NEG
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: LD_INT 3
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 3
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 2
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56751: LD_ADDR_VAR 0 24
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: LD_INT 2
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 2
56886: PUSH
56887: LD_INT 2
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: NEG
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 3
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 3
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57027: LD_ADDR_VAR 0 25
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: LD_INT 2
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 2
57162: PUSH
57163: LD_INT 2
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 2
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: LD_INT 2
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: NEG
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: LD_INT 2
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 3
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 3
57248: PUSH
57249: LD_INT 2
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: LD_INT 3
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: LD_INT 3
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57301: LD_ADDR_VAR 0 26
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 2
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 2
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: LD_INT 0
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 2
57500: NEG
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: LD_INT 3
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: LD_INT 3
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: LD_INT 2
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57577: LD_ADDR_VAR 0 27
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: LD_INT 2
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: LD_INT 1
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 2
57753: NEG
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 2
57776: NEG
57777: PUSH
57778: LD_INT 2
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 2
57799: NEG
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 3
57810: NEG
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 3
57822: NEG
57823: PUSH
57824: LD_INT 2
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57857: LD_ADDR_VAR 0 28
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 2
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 2
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 2
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: NEG
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PUSH
58070: LD_INT 3
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 3
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 3
58092: NEG
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 3
58104: NEG
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58139: LD_ADDR_VAR 0 29
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: LD_INT 2
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: LD_INT 2
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 2
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: LD_INT 2
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 2
58305: NEG
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 2
58317: NEG
58318: PUSH
58319: LD_INT 2
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 2
58329: NEG
58330: PUSH
58331: LD_INT 3
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 3
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: LD_INT 3
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 3
58383: NEG
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58418: LD_ADDR_VAR 0 30
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: LD_INT 2
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 2
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 2
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 2
58553: PUSH
58554: LD_INT 2
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 2
58584: NEG
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: NEG
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: NEG
58608: PUSH
58609: LD_INT 3
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 3
58630: PUSH
58631: LD_INT 2
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: LD_INT 3
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 3
58661: NEG
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58696: LD_ADDR_VAR 0 31
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: LD_INT 2
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 2
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 2
58861: NEG
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 2
58873: NEG
58874: PUSH
58875: LD_INT 2
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 2
58885: NEG
58886: PUSH
58887: LD_INT 3
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 3
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: LD_INT 3
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: LD_INT 2
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 3
58939: NEG
58940: PUSH
58941: LD_INT 2
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58974: LD_ADDR_VAR 0 32
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 2
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: LD_INT 2
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 2
59099: PUSH
59100: LD_INT 2
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: LD_INT 2
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: LD_INT 3
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: LD_INT 3
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 3
59217: NEG
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59252: LD_ADDR_VAR 0 33
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: LD_INT 2
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 2
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: LD_INT 2
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 0
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 2
59418: NEG
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 2
59430: NEG
59431: PUSH
59432: LD_INT 2
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 2
59442: NEG
59443: PUSH
59444: LD_INT 3
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 2
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 3
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: LD_INT 3
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 3
59496: NEG
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59531: LD_ADDR_VAR 0 34
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: LD_INT 2
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 2
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 2
59656: PUSH
59657: LD_INT 2
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: LD_INT 2
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 2
59687: NEG
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: NEG
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: NEG
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: LD_INT 3
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 3
59745: PUSH
59746: LD_INT 2
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 2
59755: PUSH
59756: LD_INT 3
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 3
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59811: LD_ADDR_VAR 0 35
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: LD_INT 1
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 1
59869: NEG
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: NEG
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59923: LD_ADDR_VAR 0 36
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: LD_INT 2
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: LD_INT 2
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60035: LD_ADDR_VAR 0 37
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60147: LD_ADDR_VAR 0 38
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 2
60238: NEG
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60259: LD_ADDR_VAR 0 39
60263: PUSH
60264: LD_INT 0
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: NEG
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: LD_INT 2
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: LD_INT 2
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60371: LD_ADDR_VAR 0 40
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: NEG
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60483: LD_ADDR_VAR 0 41
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: LD_INT 1
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 2
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 2
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: LD_INT 2
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: LD_INT 2
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 2
60638: NEG
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: LD_INT 2
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: NEG
60674: PUSH
60675: LD_INT 3
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 3
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 3
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 3
60716: PUSH
60717: LD_INT 2
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 3
60726: PUSH
60727: LD_INT 3
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: LD_INT 3
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: NEG
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 3
60757: NEG
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 3
60768: NEG
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 3
60780: NEG
60781: PUSH
60782: LD_INT 2
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 3
60792: NEG
60793: PUSH
60794: LD_INT 3
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60833: LD_ADDR_VAR 0 42
60837: PUSH
60838: LD_INT 0
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: LD_INT 0
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: LD_INT 1
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 0
60881: PUSH
60882: LD_INT 1
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: PUSH
60916: LD_INT 2
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: LD_INT 2
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 1
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: LD_INT 1
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 2
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: LD_INT 2
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 2
60999: NEG
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 2
61011: NEG
61012: PUSH
61013: LD_INT 2
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 2
61023: NEG
61024: PUSH
61025: LD_INT 3
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: LD_INT 3
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: LD_INT 3
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: LD_INT 2
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 3
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 3
61079: PUSH
61080: LD_INT 3
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: PUSH
61090: LD_INT 3
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: LD_INT 3
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: LD_INT 3
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 3
61130: NEG
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 3
61142: NEG
61143: PUSH
61144: LD_INT 3
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61183: LD_ADDR_VAR 0 43
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: NEG
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: LD_INT 2
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: LD_INT 2
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 2
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 2
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: LD_INT 2
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: LD_INT 2
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 1
61338: NEG
61339: PUSH
61340: LD_INT 1
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 2
61349: NEG
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: LD_INT 1
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: LD_INT 3
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: LD_INT 3
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: LD_INT 2
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: LD_INT 1
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 3
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 3
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: LD_INT 3
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 3
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: LD_INT 2
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 2
61468: NEG
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 3
61479: NEG
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 3
61490: NEG
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61531: LD_ADDR_VAR 0 44
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: PUSH
61570: LD_INT 1
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: NEG
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: LD_INT 2
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 2
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 2
61655: PUSH
61656: LD_INT 2
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 1
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 2
61686: NEG
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 2
61697: NEG
61698: PUSH
61699: LD_INT 1
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 2
61709: NEG
61710: PUSH
61711: LD_INT 2
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: LD_INT 3
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 2
61733: PUSH
61734: LD_INT 1
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 3
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 3
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 3
61764: PUSH
61765: LD_INT 2
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 3
61774: PUSH
61775: LD_INT 3
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: LD_INT 3
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: NEG
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 3
61805: NEG
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 3
61816: NEG
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 3
61828: NEG
61829: PUSH
61830: LD_INT 2
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 3
61840: NEG
61841: PUSH
61842: LD_INT 3
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61881: LD_ADDR_VAR 0 45
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: LD_INT 2
61966: NEG
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: LD_INT 2
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 2
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 2
62006: PUSH
62007: LD_INT 2
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: LD_INT 2
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 0
62026: PUSH
62027: LD_INT 2
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 2
62047: NEG
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 2
62059: NEG
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 2
62071: NEG
62072: PUSH
62073: LD_INT 3
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 1
62083: NEG
62084: PUSH
62085: LD_INT 3
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: LD_INT 3
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 2
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 3
62117: PUSH
62118: LD_INT 2
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 3
62127: PUSH
62128: LD_INT 3
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 2
62137: PUSH
62138: LD_INT 3
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: LD_INT 3
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: LD_INT 3
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: LD_INT 2
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 3
62178: NEG
62179: PUSH
62180: LD_INT 2
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 3
62190: NEG
62191: PUSH
62192: LD_INT 3
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62231: LD_ADDR_VAR 0 46
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: LD_INT 1
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: LD_INT 1
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: NEG
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: LD_INT 2
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: LD_INT 1
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 2
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 1
62366: PUSH
62367: LD_INT 2
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: LD_INT 2
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 2
62397: NEG
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 2
62408: NEG
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: LD_INT 3
62424: NEG
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: LD_INT 3
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 2
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 3
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 3
62475: PUSH
62476: LD_INT 1
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: LD_INT 3
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: LD_INT 3
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 2
62516: NEG
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 3
62527: NEG
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 3
62538: NEG
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62579: LD_ADDR_VAR 0 47
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: LD_INT 0
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 0
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 1
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 1
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: LD_INT 2
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 2
62694: NEG
62695: PUSH
62696: LD_INT 1
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 2
62706: NEG
62707: PUSH
62708: LD_INT 2
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62730: LD_ADDR_VAR 0 48
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 1
62799: NEG
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: LD_INT 2
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: LD_INT 2
62826: NEG
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 2
62855: PUSH
62856: LD_INT 1
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62877: LD_ADDR_VAR 0 49
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: LD_INT 1
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: PUSH
62980: LD_INT 1
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 2
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: LD_INT 2
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63021: LD_ADDR_VAR 0 50
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 2
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: LD_INT 2
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: LD_INT 2
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_INT 2
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 1
63142: NEG
63143: PUSH
63144: LD_INT 1
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63165: LD_ADDR_VAR 0 51
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: LD_INT 0
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 0
63182: PUSH
63183: LD_INT 1
63185: NEG
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: LD_INT 1
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: NEG
63235: PUSH
63236: LD_INT 1
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: LD_INT 2
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 0
63256: PUSH
63257: LD_INT 2
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: NEG
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: NEG
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63312: LD_ADDR_VAR 0 52
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 1
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: LD_INT 1
63385: NEG
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: LD_INT 2
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 2
63416: NEG
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 2
63427: NEG
63428: PUSH
63429: LD_INT 1
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 2
63439: NEG
63440: PUSH
63441: LD_INT 2
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63463: LD_ADDR_VAR 0 53
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: NEG
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: LD_INT 2
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: LD_INT 2
63559: NEG
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: PUSH
63568: LD_INT 1
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 2
63588: PUSH
63589: LD_INT 1
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 2
63598: PUSH
63599: LD_INT 2
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 1
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: LD_INT 2
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 2
63639: NEG
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 2
63650: NEG
63651: PUSH
63652: LD_INT 1
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 2
63662: NEG
63663: PUSH
63664: LD_INT 2
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63693: LD_ADDR_VAR 0 54
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: LD_INT 1
63713: NEG
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 1
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 0
63741: PUSH
63742: LD_INT 1
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 1
63762: NEG
63763: PUSH
63764: LD_INT 1
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 1
63774: NEG
63775: PUSH
63776: LD_INT 2
63778: NEG
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: LD_INT 2
63789: NEG
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 2
63808: PUSH
63809: LD_INT 0
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 2
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 2
63828: PUSH
63829: LD_INT 2
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: PUSH
63839: LD_INT 2
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: LD_INT 2
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: LD_INT 1
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 2
63869: NEG
63870: PUSH
63871: LD_INT 0
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 2
63880: NEG
63881: PUSH
63882: LD_INT 1
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 2
63892: NEG
63893: PUSH
63894: LD_INT 2
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63923: LD_ADDR_VAR 0 55
63927: PUSH
63928: LD_INT 0
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: LD_INT 1
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 1
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 0
63971: PUSH
63972: LD_INT 1
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 1
63981: NEG
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 1
63992: NEG
63993: PUSH
63994: LD_INT 1
63996: NEG
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 1
64004: NEG
64005: PUSH
64006: LD_INT 2
64008: NEG
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: LD_INT 2
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: LD_INT 1
64030: NEG
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 2
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 2
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 2
64058: PUSH
64059: LD_INT 2
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: LD_INT 2
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 2
64099: NEG
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 2
64110: NEG
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 2
64122: NEG
64123: PUSH
64124: LD_INT 2
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64153: LD_ADDR_VAR 0 56
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: LD_INT 0
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: LD_INT 1
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 1
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: PUSH
64192: LD_INT 1
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 0
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 1
64222: NEG
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 1
64234: NEG
64235: PUSH
64236: LD_INT 2
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: LD_INT 2
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 1
64257: PUSH
64258: LD_INT 1
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 2
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 2
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 2
64288: PUSH
64289: LD_INT 2
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 1
64298: PUSH
64299: LD_INT 2
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: LD_INT 2
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: LD_INT 1
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 2
64329: NEG
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 2
64340: NEG
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 2
64352: NEG
64353: PUSH
64354: LD_INT 2
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64383: LD_ADDR_VAR 0 57
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 0
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 1
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 1
64421: PUSH
64422: LD_INT 1
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: LD_INT 1
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: NEG
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: LD_INT 1
64456: NEG
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: LD_INT 2
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 0
64476: PUSH
64477: LD_INT 2
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 2
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 2
64508: PUSH
64509: LD_INT 1
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 2
64518: PUSH
64519: LD_INT 2
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: LD_INT 2
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 2
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 1
64548: NEG
64549: PUSH
64550: LD_INT 1
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 2
64559: NEG
64560: PUSH
64561: LD_INT 0
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 2
64570: NEG
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 2
64582: NEG
64583: PUSH
64584: LD_INT 2
64586: NEG
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64613: LD_ADDR_VAR 0 58
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: LD_INT 0
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: LD_INT 1
64633: NEG
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 1
64641: PUSH
64642: LD_INT 0
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: LD_INT 1
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: LD_INT 1
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 1
64671: NEG
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: LD_INT 1
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: PUSH
64696: LD_INT 2
64698: NEG
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 0
64706: PUSH
64707: LD_INT 2
64709: NEG
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 1
64717: PUSH
64718: LD_INT 1
64720: NEG
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 2
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 2
64738: PUSH
64739: LD_INT 1
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 2
64748: PUSH
64749: LD_INT 2
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: LD_INT 2
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: LD_INT 2
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 1
64778: NEG
64779: PUSH
64780: LD_INT 1
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 2
64789: NEG
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 2
64800: NEG
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 2
64812: NEG
64813: PUSH
64814: LD_INT 2
64816: NEG
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64843: LD_ADDR_VAR 0 59
64847: PUSH
64848: LD_INT 0
64850: PUSH
64851: LD_INT 0
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: LD_INT 1
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: LD_INT 0
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 1
64881: PUSH
64882: LD_INT 1
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: LD_INT 1
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: NEG
64902: PUSH
64903: LD_INT 0
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 1
64912: NEG
64913: PUSH
64914: LD_INT 1
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64931: LD_ADDR_VAR 0 60
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: LD_INT 1
64951: NEG
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 1
64959: PUSH
64960: LD_INT 0
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 1
64969: PUSH
64970: LD_INT 1
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: LD_INT 1
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 1
64989: NEG
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 1
65000: NEG
65001: PUSH
65002: LD_INT 1
65004: NEG
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65019: LD_ADDR_VAR 0 61
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: LD_INT 1
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: LD_INT 1
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: LD_INT 1
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 1
65077: NEG
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 1
65088: NEG
65089: PUSH
65090: LD_INT 1
65092: NEG
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65107: LD_ADDR_VAR 0 62
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 0
65124: PUSH
65125: LD_INT 1
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 1
65135: PUSH
65136: LD_INT 0
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 1
65145: PUSH
65146: LD_INT 1
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: LD_INT 1
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: LD_INT 0
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65195: LD_ADDR_VAR 0 63
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 1
65233: PUSH
65234: LD_INT 1
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: LD_INT 0
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 1
65264: NEG
65265: PUSH
65266: LD_INT 1
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65283: LD_ADDR_VAR 0 64
65287: PUSH
65288: LD_INT 0
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: LD_INT 1
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: PUSH
65322: LD_INT 1
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: LD_INT 1
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 1
65341: NEG
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: LD_INT 1
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: ST_TO_ADDR
// end ; 1 :
65371: GO 71268
65373: LD_INT 1
65375: DOUBLE
65376: EQUAL
65377: IFTRUE 65381
65379: GO 68004
65381: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65382: LD_ADDR_VAR 0 11
65386: PUSH
65387: LD_INT 1
65389: NEG
65390: PUSH
65391: LD_INT 3
65393: NEG
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: LD_INT 3
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: PUSH
65413: LD_INT 2
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: LIST
65425: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65426: LD_ADDR_VAR 0 12
65430: PUSH
65431: LD_INT 2
65433: PUSH
65434: LD_INT 1
65436: NEG
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 3
65444: PUSH
65445: LD_INT 0
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 3
65454: PUSH
65455: LD_INT 1
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: LIST
65466: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65467: LD_ADDR_VAR 0 13
65471: PUSH
65472: LD_INT 3
65474: PUSH
65475: LD_INT 2
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 3
65484: PUSH
65485: LD_INT 3
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: LD_INT 3
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: LIST
65506: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65507: LD_ADDR_VAR 0 14
65511: PUSH
65512: LD_INT 1
65514: PUSH
65515: LD_INT 3
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: LD_INT 3
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: LD_INT 2
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: LIST
65547: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65548: LD_ADDR_VAR 0 15
65552: PUSH
65553: LD_INT 2
65555: NEG
65556: PUSH
65557: LD_INT 1
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 3
65566: NEG
65567: PUSH
65568: LD_INT 0
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 3
65577: NEG
65578: PUSH
65579: LD_INT 1
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: LIST
65591: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65592: LD_ADDR_VAR 0 16
65596: PUSH
65597: LD_INT 2
65599: NEG
65600: PUSH
65601: LD_INT 3
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 3
65611: NEG
65612: PUSH
65613: LD_INT 2
65615: NEG
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 3
65623: NEG
65624: PUSH
65625: LD_INT 3
65627: NEG
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: LIST
65637: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65638: LD_ADDR_VAR 0 17
65642: PUSH
65643: LD_INT 1
65645: NEG
65646: PUSH
65647: LD_INT 3
65649: NEG
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: LD_INT 3
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: LD_INT 2
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: LIST
65681: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65682: LD_ADDR_VAR 0 18
65686: PUSH
65687: LD_INT 2
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 3
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 3
65710: PUSH
65711: LD_INT 1
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: LIST
65722: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65723: LD_ADDR_VAR 0 19
65727: PUSH
65728: LD_INT 3
65730: PUSH
65731: LD_INT 2
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 3
65740: PUSH
65741: LD_INT 3
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 2
65750: PUSH
65751: LD_INT 3
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: LIST
65762: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65763: LD_ADDR_VAR 0 20
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: LD_INT 3
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 0
65780: PUSH
65781: LD_INT 3
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 1
65790: NEG
65791: PUSH
65792: LD_INT 2
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: LIST
65803: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65804: LD_ADDR_VAR 0 21
65808: PUSH
65809: LD_INT 2
65811: NEG
65812: PUSH
65813: LD_INT 1
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 3
65822: NEG
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 3
65833: NEG
65834: PUSH
65835: LD_INT 1
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: LIST
65847: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65848: LD_ADDR_VAR 0 22
65852: PUSH
65853: LD_INT 2
65855: NEG
65856: PUSH
65857: LD_INT 3
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 3
65867: NEG
65868: PUSH
65869: LD_INT 2
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 3
65879: NEG
65880: PUSH
65881: LD_INT 3
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: LIST
65893: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65894: LD_ADDR_VAR 0 23
65898: PUSH
65899: LD_INT 0
65901: PUSH
65902: LD_INT 3
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 1
65912: NEG
65913: PUSH
65914: LD_INT 4
65916: NEG
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 1
65924: PUSH
65925: LD_INT 3
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: LIST
65937: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65938: LD_ADDR_VAR 0 24
65942: PUSH
65943: LD_INT 3
65945: PUSH
65946: LD_INT 0
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 3
65955: PUSH
65956: LD_INT 1
65958: NEG
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 4
65966: PUSH
65967: LD_INT 1
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: LIST
65978: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65979: LD_ADDR_VAR 0 25
65983: PUSH
65984: LD_INT 3
65986: PUSH
65987: LD_INT 3
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 4
65996: PUSH
65997: LD_INT 3
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 3
66006: PUSH
66007: LD_INT 4
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: LIST
66018: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66019: LD_ADDR_VAR 0 26
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: LD_INT 3
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 1
66036: PUSH
66037: LD_INT 4
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 1
66046: NEG
66047: PUSH
66048: LD_INT 3
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: LIST
66059: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66060: LD_ADDR_VAR 0 27
66064: PUSH
66065: LD_INT 3
66067: NEG
66068: PUSH
66069: LD_INT 0
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 3
66078: NEG
66079: PUSH
66080: LD_INT 1
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 4
66089: NEG
66090: PUSH
66091: LD_INT 1
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: LIST
66103: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66104: LD_ADDR_VAR 0 28
66108: PUSH
66109: LD_INT 3
66111: NEG
66112: PUSH
66113: LD_INT 3
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 3
66123: NEG
66124: PUSH
66125: LD_INT 4
66127: NEG
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 4
66135: NEG
66136: PUSH
66137: LD_INT 3
66139: NEG
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: LIST
66149: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66150: LD_ADDR_VAR 0 29
66154: PUSH
66155: LD_INT 1
66157: NEG
66158: PUSH
66159: LD_INT 3
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 0
66169: PUSH
66170: LD_INT 3
66172: NEG
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: PUSH
66181: LD_INT 2
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 1
66191: NEG
66192: PUSH
66193: LD_INT 4
66195: NEG
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: LD_INT 4
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 1
66214: PUSH
66215: LD_INT 3
66217: NEG
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: LD_INT 5
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 0
66237: PUSH
66238: LD_INT 5
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 1
66248: PUSH
66249: LD_INT 4
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 1
66259: NEG
66260: PUSH
66261: LD_INT 6
66263: NEG
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 0
66271: PUSH
66272: LD_INT 6
66274: NEG
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 1
66282: PUSH
66283: LD_INT 5
66285: NEG
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66305: LD_ADDR_VAR 0 30
66309: PUSH
66310: LD_INT 2
66312: PUSH
66313: LD_INT 1
66315: NEG
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 3
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 3
66333: PUSH
66334: LD_INT 1
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 3
66343: PUSH
66344: LD_INT 1
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 4
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 4
66364: PUSH
66365: LD_INT 1
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 4
66374: PUSH
66375: LD_INT 1
66377: NEG
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 5
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 5
66395: PUSH
66396: LD_INT 1
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 5
66405: PUSH
66406: LD_INT 1
66408: NEG
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 6
66416: PUSH
66417: LD_INT 0
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 6
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66448: LD_ADDR_VAR 0 31
66452: PUSH
66453: LD_INT 3
66455: PUSH
66456: LD_INT 2
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 3
66465: PUSH
66466: LD_INT 3
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 2
66475: PUSH
66476: LD_INT 3
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 4
66485: PUSH
66486: LD_INT 3
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 4
66495: PUSH
66496: LD_INT 4
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 3
66505: PUSH
66506: LD_INT 4
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 5
66515: PUSH
66516: LD_INT 4
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 5
66525: PUSH
66526: LD_INT 5
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 4
66535: PUSH
66536: LD_INT 5
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 6
66545: PUSH
66546: LD_INT 5
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 6
66555: PUSH
66556: LD_INT 6
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 5
66565: PUSH
66566: LD_INT 6
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66587: LD_ADDR_VAR 0 32
66591: PUSH
66592: LD_INT 1
66594: PUSH
66595: LD_INT 3
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: LD_INT 3
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 1
66614: NEG
66615: PUSH
66616: LD_INT 2
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: LD_INT 4
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 0
66635: PUSH
66636: LD_INT 4
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 1
66645: NEG
66646: PUSH
66647: LD_INT 3
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 1
66656: PUSH
66657: LD_INT 5
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: LD_INT 5
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 1
66676: NEG
66677: PUSH
66678: LD_INT 4
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 1
66687: PUSH
66688: LD_INT 6
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: LD_INT 6
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 1
66707: NEG
66708: PUSH
66709: LD_INT 5
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66730: LD_ADDR_VAR 0 33
66734: PUSH
66735: LD_INT 2
66737: NEG
66738: PUSH
66739: LD_INT 1
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 3
66748: NEG
66749: PUSH
66750: LD_INT 0
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 3
66759: NEG
66760: PUSH
66761: LD_INT 1
66763: NEG
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 3
66771: NEG
66772: PUSH
66773: LD_INT 1
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 4
66782: NEG
66783: PUSH
66784: LD_INT 0
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 4
66793: NEG
66794: PUSH
66795: LD_INT 1
66797: NEG
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 4
66805: NEG
66806: PUSH
66807: LD_INT 1
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 5
66816: NEG
66817: PUSH
66818: LD_INT 0
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 5
66827: NEG
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 5
66839: NEG
66840: PUSH
66841: LD_INT 1
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 6
66850: NEG
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 6
66861: NEG
66862: PUSH
66863: LD_INT 1
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66885: LD_ADDR_VAR 0 34
66889: PUSH
66890: LD_INT 2
66892: NEG
66893: PUSH
66894: LD_INT 3
66896: NEG
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 3
66904: NEG
66905: PUSH
66906: LD_INT 2
66908: NEG
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 3
66916: NEG
66917: PUSH
66918: LD_INT 3
66920: NEG
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 3
66928: NEG
66929: PUSH
66930: LD_INT 4
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 4
66940: NEG
66941: PUSH
66942: LD_INT 3
66944: NEG
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 4
66952: NEG
66953: PUSH
66954: LD_INT 4
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 4
66964: NEG
66965: PUSH
66966: LD_INT 5
66968: NEG
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 5
66976: NEG
66977: PUSH
66978: LD_INT 4
66980: NEG
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 5
66988: NEG
66989: PUSH
66990: LD_INT 5
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 5
67000: NEG
67001: PUSH
67002: LD_INT 6
67004: NEG
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 6
67012: NEG
67013: PUSH
67014: LD_INT 5
67016: NEG
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 6
67024: NEG
67025: PUSH
67026: LD_INT 6
67028: NEG
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67048: LD_ADDR_VAR 0 41
67052: PUSH
67053: LD_INT 0
67055: PUSH
67056: LD_INT 2
67058: NEG
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 1
67066: NEG
67067: PUSH
67068: LD_INT 3
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: LD_INT 2
67081: NEG
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: LIST
67091: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67092: LD_ADDR_VAR 0 42
67096: PUSH
67097: LD_INT 2
67099: PUSH
67100: LD_INT 0
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 2
67109: PUSH
67110: LD_INT 1
67112: NEG
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 3
67120: PUSH
67121: LD_INT 1
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: LIST
67132: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67133: LD_ADDR_VAR 0 43
67137: PUSH
67138: LD_INT 2
67140: PUSH
67141: LD_INT 2
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 3
67150: PUSH
67151: LD_INT 2
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 2
67160: PUSH
67161: LD_INT 3
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: LIST
67172: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67173: LD_ADDR_VAR 0 44
67177: PUSH
67178: LD_INT 0
67180: PUSH
67181: LD_INT 2
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 1
67190: PUSH
67191: LD_INT 3
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 1
67200: NEG
67201: PUSH
67202: LD_INT 2
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: LIST
67213: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67214: LD_ADDR_VAR 0 45
67218: PUSH
67219: LD_INT 2
67221: NEG
67222: PUSH
67223: LD_INT 0
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 2
67232: NEG
67233: PUSH
67234: LD_INT 1
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 3
67243: NEG
67244: PUSH
67245: LD_INT 1
67247: NEG
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: LIST
67257: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67258: LD_ADDR_VAR 0 46
67262: PUSH
67263: LD_INT 2
67265: NEG
67266: PUSH
67267: LD_INT 2
67269: NEG
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 2
67277: NEG
67278: PUSH
67279: LD_INT 3
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 3
67289: NEG
67290: PUSH
67291: LD_INT 2
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: LIST
67303: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67304: LD_ADDR_VAR 0 47
67308: PUSH
67309: LD_INT 2
67311: NEG
67312: PUSH
67313: LD_INT 3
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 1
67323: NEG
67324: PUSH
67325: LD_INT 3
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67337: LD_ADDR_VAR 0 48
67341: PUSH
67342: LD_INT 1
67344: PUSH
67345: LD_INT 2
67347: NEG
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 2
67355: PUSH
67356: LD_INT 1
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67368: LD_ADDR_VAR 0 49
67372: PUSH
67373: LD_INT 3
67375: PUSH
67376: LD_INT 1
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 3
67385: PUSH
67386: LD_INT 2
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67397: LD_ADDR_VAR 0 50
67401: PUSH
67402: LD_INT 2
67404: PUSH
67405: LD_INT 3
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 1
67414: PUSH
67415: LD_INT 3
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67426: LD_ADDR_VAR 0 51
67430: PUSH
67431: LD_INT 1
67433: NEG
67434: PUSH
67435: LD_INT 2
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 2
67444: NEG
67445: PUSH
67446: LD_INT 1
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67457: LD_ADDR_VAR 0 52
67461: PUSH
67462: LD_INT 3
67464: NEG
67465: PUSH
67466: LD_INT 1
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 3
67476: NEG
67477: PUSH
67478: LD_INT 2
67480: NEG
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67490: LD_ADDR_VAR 0 53
67494: PUSH
67495: LD_INT 1
67497: NEG
67498: PUSH
67499: LD_INT 3
67501: NEG
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: LD_INT 3
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 1
67520: PUSH
67521: LD_INT 2
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: LIST
67533: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67534: LD_ADDR_VAR 0 54
67538: PUSH
67539: LD_INT 2
67541: PUSH
67542: LD_INT 1
67544: NEG
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 3
67552: PUSH
67553: LD_INT 0
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 3
67562: PUSH
67563: LD_INT 1
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: LIST
67574: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67575: LD_ADDR_VAR 0 55
67579: PUSH
67580: LD_INT 3
67582: PUSH
67583: LD_INT 2
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 3
67592: PUSH
67593: LD_INT 3
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 2
67602: PUSH
67603: LD_INT 3
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: LIST
67614: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67615: LD_ADDR_VAR 0 56
67619: PUSH
67620: LD_INT 1
67622: PUSH
67623: LD_INT 3
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 0
67632: PUSH
67633: LD_INT 3
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 1
67642: NEG
67643: PUSH
67644: LD_INT 2
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: LIST
67655: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67656: LD_ADDR_VAR 0 57
67660: PUSH
67661: LD_INT 2
67663: NEG
67664: PUSH
67665: LD_INT 1
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 3
67674: NEG
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 3
67685: NEG
67686: PUSH
67687: LD_INT 1
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: LIST
67699: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67700: LD_ADDR_VAR 0 58
67704: PUSH
67705: LD_INT 2
67707: NEG
67708: PUSH
67709: LD_INT 3
67711: NEG
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 3
67719: NEG
67720: PUSH
67721: LD_INT 2
67723: NEG
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 3
67731: NEG
67732: PUSH
67733: LD_INT 3
67735: NEG
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: LIST
67745: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67746: LD_ADDR_VAR 0 59
67750: PUSH
67751: LD_INT 1
67753: NEG
67754: PUSH
67755: LD_INT 2
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 0
67765: PUSH
67766: LD_INT 2
67768: NEG
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 1
67776: PUSH
67777: LD_INT 1
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: LIST
67789: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67790: LD_ADDR_VAR 0 60
67794: PUSH
67795: LD_INT 1
67797: PUSH
67798: LD_INT 1
67800: NEG
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 2
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 2
67818: PUSH
67819: LD_INT 1
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: LIST
67830: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67831: LD_ADDR_VAR 0 61
67835: PUSH
67836: LD_INT 2
67838: PUSH
67839: LD_INT 1
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 2
67848: PUSH
67849: LD_INT 2
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 1
67858: PUSH
67859: LD_INT 2
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: LIST
67870: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67871: LD_ADDR_VAR 0 62
67875: PUSH
67876: LD_INT 1
67878: PUSH
67879: LD_INT 2
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 0
67888: PUSH
67889: LD_INT 2
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 1
67898: NEG
67899: PUSH
67900: LD_INT 1
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: LIST
67911: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67912: LD_ADDR_VAR 0 63
67916: PUSH
67917: LD_INT 1
67919: NEG
67920: PUSH
67921: LD_INT 1
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 2
67930: NEG
67931: PUSH
67932: LD_INT 0
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 2
67941: NEG
67942: PUSH
67943: LD_INT 1
67945: NEG
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: LIST
67955: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67956: LD_ADDR_VAR 0 64
67960: PUSH
67961: LD_INT 1
67963: NEG
67964: PUSH
67965: LD_INT 2
67967: NEG
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 2
67975: NEG
67976: PUSH
67977: LD_INT 1
67979: NEG
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 2
67987: NEG
67988: PUSH
67989: LD_INT 2
67991: NEG
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: LIST
68001: ST_TO_ADDR
// end ; 2 :
68002: GO 71268
68004: LD_INT 2
68006: DOUBLE
68007: EQUAL
68008: IFTRUE 68012
68010: GO 71267
68012: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68013: LD_ADDR_VAR 0 29
68017: PUSH
68018: LD_INT 4
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 4
68030: PUSH
68031: LD_INT 1
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 5
68041: PUSH
68042: LD_INT 0
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 5
68051: PUSH
68052: LD_INT 1
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 4
68061: PUSH
68062: LD_INT 1
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 3
68071: PUSH
68072: LD_INT 0
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 3
68081: PUSH
68082: LD_INT 1
68084: NEG
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 3
68092: PUSH
68093: LD_INT 2
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 5
68103: PUSH
68104: LD_INT 2
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 3
68113: PUSH
68114: LD_INT 3
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 3
68123: PUSH
68124: LD_INT 2
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 4
68133: PUSH
68134: LD_INT 3
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 4
68143: PUSH
68144: LD_INT 4
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 3
68153: PUSH
68154: LD_INT 4
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 2
68163: PUSH
68164: LD_INT 3
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 2
68173: PUSH
68174: LD_INT 2
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 4
68183: PUSH
68184: LD_INT 2
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 2
68193: PUSH
68194: LD_INT 4
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: LD_INT 4
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 0
68213: PUSH
68214: LD_INT 3
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 1
68223: PUSH
68224: LD_INT 4
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 1
68233: PUSH
68234: LD_INT 5
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 0
68243: PUSH
68244: LD_INT 5
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 1
68253: NEG
68254: PUSH
68255: LD_INT 4
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 1
68264: NEG
68265: PUSH
68266: LD_INT 3
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 2
68275: PUSH
68276: LD_INT 5
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 2
68285: NEG
68286: PUSH
68287: LD_INT 3
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 3
68296: NEG
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 3
68307: NEG
68308: PUSH
68309: LD_INT 1
68311: NEG
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 2
68319: NEG
68320: PUSH
68321: LD_INT 0
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 2
68330: NEG
68331: PUSH
68332: LD_INT 1
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 3
68341: NEG
68342: PUSH
68343: LD_INT 1
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 4
68352: NEG
68353: PUSH
68354: LD_INT 0
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 4
68363: NEG
68364: PUSH
68365: LD_INT 1
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 4
68375: NEG
68376: PUSH
68377: LD_INT 2
68379: NEG
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 2
68387: NEG
68388: PUSH
68389: LD_INT 2
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 4
68398: NEG
68399: PUSH
68400: LD_INT 4
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 4
68410: NEG
68411: PUSH
68412: LD_INT 5
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 3
68422: NEG
68423: PUSH
68424: LD_INT 4
68426: NEG
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 3
68434: NEG
68435: PUSH
68436: LD_INT 3
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 4
68446: NEG
68447: PUSH
68448: LD_INT 3
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 5
68458: NEG
68459: PUSH
68460: LD_INT 4
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 5
68470: NEG
68471: PUSH
68472: LD_INT 5
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 3
68482: NEG
68483: PUSH
68484: LD_INT 5
68486: NEG
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 5
68494: NEG
68495: PUSH
68496: LD_INT 3
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68551: LD_ADDR_VAR 0 30
68555: PUSH
68556: LD_INT 4
68558: PUSH
68559: LD_INT 4
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 4
68568: PUSH
68569: LD_INT 3
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 5
68578: PUSH
68579: LD_INT 4
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 5
68588: PUSH
68589: LD_INT 5
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 4
68598: PUSH
68599: LD_INT 5
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 3
68608: PUSH
68609: LD_INT 4
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 3
68618: PUSH
68619: LD_INT 3
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 5
68628: PUSH
68629: LD_INT 3
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 3
68638: PUSH
68639: LD_INT 5
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 0
68648: PUSH
68649: LD_INT 3
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 0
68658: PUSH
68659: LD_INT 2
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 1
68668: PUSH
68669: LD_INT 3
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 1
68678: PUSH
68679: LD_INT 4
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 0
68688: PUSH
68689: LD_INT 4
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 1
68698: NEG
68699: PUSH
68700: LD_INT 3
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 1
68709: NEG
68710: PUSH
68711: LD_INT 2
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 2
68720: PUSH
68721: LD_INT 4
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 2
68730: NEG
68731: PUSH
68732: LD_INT 2
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 4
68741: NEG
68742: PUSH
68743: LD_INT 0
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 4
68752: NEG
68753: PUSH
68754: LD_INT 1
68756: NEG
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 3
68764: NEG
68765: PUSH
68766: LD_INT 0
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 3
68775: NEG
68776: PUSH
68777: LD_INT 1
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 4
68786: NEG
68787: PUSH
68788: LD_INT 1
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 5
68797: NEG
68798: PUSH
68799: LD_INT 0
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 5
68808: NEG
68809: PUSH
68810: LD_INT 1
68812: NEG
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 5
68820: NEG
68821: PUSH
68822: LD_INT 2
68824: NEG
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 3
68832: NEG
68833: PUSH
68834: LD_INT 2
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 3
68843: NEG
68844: PUSH
68845: LD_INT 3
68847: NEG
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 3
68855: NEG
68856: PUSH
68857: LD_INT 4
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 2
68867: NEG
68868: PUSH
68869: LD_INT 3
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 2
68879: NEG
68880: PUSH
68881: LD_INT 2
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 3
68891: NEG
68892: PUSH
68893: LD_INT 2
68895: NEG
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 4
68903: NEG
68904: PUSH
68905: LD_INT 3
68907: NEG
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 4
68915: NEG
68916: PUSH
68917: LD_INT 4
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 2
68927: NEG
68928: PUSH
68929: LD_INT 4
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 4
68939: NEG
68940: PUSH
68941: LD_INT 2
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 0
68951: PUSH
68952: LD_INT 4
68954: NEG
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 0
68962: PUSH
68963: LD_INT 5
68965: NEG
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 1
68973: PUSH
68974: LD_INT 4
68976: NEG
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 1
68984: PUSH
68985: LD_INT 3
68987: NEG
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 0
68995: PUSH
68996: LD_INT 3
68998: NEG
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 1
69006: NEG
69007: PUSH
69008: LD_INT 4
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 1
69018: NEG
69019: PUSH
69020: LD_INT 5
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 2
69030: PUSH
69031: LD_INT 3
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 2
69041: NEG
69042: PUSH
69043: LD_INT 5
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69098: LD_ADDR_VAR 0 31
69102: PUSH
69103: LD_INT 0
69105: PUSH
69106: LD_INT 4
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 0
69115: PUSH
69116: LD_INT 3
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 1
69125: PUSH
69126: LD_INT 4
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 1
69135: PUSH
69136: LD_INT 5
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 0
69145: PUSH
69146: LD_INT 5
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 1
69155: NEG
69156: PUSH
69157: LD_INT 4
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 1
69166: NEG
69167: PUSH
69168: LD_INT 3
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 2
69177: PUSH
69178: LD_INT 5
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 2
69187: NEG
69188: PUSH
69189: LD_INT 3
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 3
69198: NEG
69199: PUSH
69200: LD_INT 0
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 3
69209: NEG
69210: PUSH
69211: LD_INT 1
69213: NEG
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 2
69221: NEG
69222: PUSH
69223: LD_INT 0
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 2
69232: NEG
69233: PUSH
69234: LD_INT 1
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 3
69243: NEG
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 4
69254: NEG
69255: PUSH
69256: LD_INT 0
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 4
69265: NEG
69266: PUSH
69267: LD_INT 1
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 4
69277: NEG
69278: PUSH
69279: LD_INT 2
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 2
69289: NEG
69290: PUSH
69291: LD_INT 2
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 4
69300: NEG
69301: PUSH
69302: LD_INT 4
69304: NEG
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 4
69312: NEG
69313: PUSH
69314: LD_INT 5
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 3
69324: NEG
69325: PUSH
69326: LD_INT 4
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 3
69336: NEG
69337: PUSH
69338: LD_INT 3
69340: NEG
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 4
69348: NEG
69349: PUSH
69350: LD_INT 3
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 5
69360: NEG
69361: PUSH
69362: LD_INT 4
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 5
69372: NEG
69373: PUSH
69374: LD_INT 5
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 3
69384: NEG
69385: PUSH
69386: LD_INT 5
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 5
69396: NEG
69397: PUSH
69398: LD_INT 3
69400: NEG
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: LD_INT 3
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 0
69419: PUSH
69420: LD_INT 4
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 1
69430: PUSH
69431: LD_INT 3
69433: NEG
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 1
69441: PUSH
69442: LD_INT 2
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 0
69452: PUSH
69453: LD_INT 2
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 1
69463: NEG
69464: PUSH
69465: LD_INT 3
69467: NEG
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 1
69475: NEG
69476: PUSH
69477: LD_INT 4
69479: NEG
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 2
69487: PUSH
69488: LD_INT 2
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 2
69498: NEG
69499: PUSH
69500: LD_INT 4
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 4
69510: PUSH
69511: LD_INT 0
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 4
69520: PUSH
69521: LD_INT 1
69523: NEG
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 5
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 5
69541: PUSH
69542: LD_INT 1
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 4
69551: PUSH
69552: LD_INT 1
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 3
69561: PUSH
69562: LD_INT 0
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 3
69571: PUSH
69572: LD_INT 1
69574: NEG
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 3
69582: PUSH
69583: LD_INT 2
69585: NEG
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 5
69593: PUSH
69594: LD_INT 2
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69648: LD_ADDR_VAR 0 32
69652: PUSH
69653: LD_INT 4
69655: NEG
69656: PUSH
69657: LD_INT 0
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 4
69666: NEG
69667: PUSH
69668: LD_INT 1
69670: NEG
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 3
69678: NEG
69679: PUSH
69680: LD_INT 0
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 3
69689: NEG
69690: PUSH
69691: LD_INT 1
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 4
69700: NEG
69701: PUSH
69702: LD_INT 1
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 5
69711: NEG
69712: PUSH
69713: LD_INT 0
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 5
69722: NEG
69723: PUSH
69724: LD_INT 1
69726: NEG
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 5
69734: NEG
69735: PUSH
69736: LD_INT 2
69738: NEG
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 3
69746: NEG
69747: PUSH
69748: LD_INT 2
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 3
69757: NEG
69758: PUSH
69759: LD_INT 3
69761: NEG
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 3
69769: NEG
69770: PUSH
69771: LD_INT 4
69773: NEG
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 2
69781: NEG
69782: PUSH
69783: LD_INT 3
69785: NEG
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 2
69793: NEG
69794: PUSH
69795: LD_INT 2
69797: NEG
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 3
69805: NEG
69806: PUSH
69807: LD_INT 2
69809: NEG
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 4
69817: NEG
69818: PUSH
69819: LD_INT 3
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 4
69829: NEG
69830: PUSH
69831: LD_INT 4
69833: NEG
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 2
69841: NEG
69842: PUSH
69843: LD_INT 4
69845: NEG
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 4
69853: NEG
69854: PUSH
69855: LD_INT 2
69857: NEG
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 0
69865: PUSH
69866: LD_INT 4
69868: NEG
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 0
69876: PUSH
69877: LD_INT 5
69879: NEG
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 1
69887: PUSH
69888: LD_INT 4
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 1
69898: PUSH
69899: LD_INT 3
69901: NEG
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 0
69909: PUSH
69910: LD_INT 3
69912: NEG
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 1
69920: NEG
69921: PUSH
69922: LD_INT 4
69924: NEG
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 1
69932: NEG
69933: PUSH
69934: LD_INT 5
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 2
69944: PUSH
69945: LD_INT 3
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 2
69955: NEG
69956: PUSH
69957: LD_INT 5
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 3
69967: PUSH
69968: LD_INT 0
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 3
69977: PUSH
69978: LD_INT 1
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 4
69988: PUSH
69989: LD_INT 0
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 4
69998: PUSH
69999: LD_INT 1
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 3
70008: PUSH
70009: LD_INT 1
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 2
70018: PUSH
70019: LD_INT 0
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 2
70028: PUSH
70029: LD_INT 1
70031: NEG
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 2
70039: PUSH
70040: LD_INT 2
70042: NEG
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 4
70050: PUSH
70051: LD_INT 2
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 4
70060: PUSH
70061: LD_INT 4
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 4
70070: PUSH
70071: LD_INT 3
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 5
70080: PUSH
70081: LD_INT 4
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 5
70090: PUSH
70091: LD_INT 5
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 4
70100: PUSH
70101: LD_INT 5
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 3
70110: PUSH
70111: LD_INT 4
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 3
70120: PUSH
70121: LD_INT 3
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 5
70130: PUSH
70131: LD_INT 3
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 3
70140: PUSH
70141: LD_INT 5
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70195: LD_ADDR_VAR 0 33
70199: PUSH
70200: LD_INT 4
70202: NEG
70203: PUSH
70204: LD_INT 4
70206: NEG
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 4
70214: NEG
70215: PUSH
70216: LD_INT 5
70218: NEG
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 3
70226: NEG
70227: PUSH
70228: LD_INT 4
70230: NEG
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 3
70238: NEG
70239: PUSH
70240: LD_INT 3
70242: NEG
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 4
70250: NEG
70251: PUSH
70252: LD_INT 3
70254: NEG
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 5
70262: NEG
70263: PUSH
70264: LD_INT 4
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 5
70274: NEG
70275: PUSH
70276: LD_INT 5
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 3
70286: NEG
70287: PUSH
70288: LD_INT 5
70290: NEG
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 5
70298: NEG
70299: PUSH
70300: LD_INT 3
70302: NEG
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 0
70310: PUSH
70311: LD_INT 3
70313: NEG
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 0
70321: PUSH
70322: LD_INT 4
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 1
70332: PUSH
70333: LD_INT 3
70335: NEG
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 1
70343: PUSH
70344: LD_INT 2
70346: NEG
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 0
70354: PUSH
70355: LD_INT 2
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 1
70365: NEG
70366: PUSH
70367: LD_INT 3
70369: NEG
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 1
70377: NEG
70378: PUSH
70379: LD_INT 4
70381: NEG
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 2
70389: PUSH
70390: LD_INT 2
70392: NEG
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 2
70400: NEG
70401: PUSH
70402: LD_INT 4
70404: NEG
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 4
70412: PUSH
70413: LD_INT 0
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 4
70422: PUSH
70423: LD_INT 1
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 5
70433: PUSH
70434: LD_INT 0
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 5
70443: PUSH
70444: LD_INT 1
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 4
70453: PUSH
70454: LD_INT 1
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 3
70463: PUSH
70464: LD_INT 0
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 3
70473: PUSH
70474: LD_INT 1
70476: NEG
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 3
70484: PUSH
70485: LD_INT 2
70487: NEG
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 5
70495: PUSH
70496: LD_INT 2
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 3
70505: PUSH
70506: LD_INT 3
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 3
70515: PUSH
70516: LD_INT 2
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 4
70525: PUSH
70526: LD_INT 3
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 4
70535: PUSH
70536: LD_INT 4
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 3
70545: PUSH
70546: LD_INT 4
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 2
70555: PUSH
70556: LD_INT 3
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 2
70565: PUSH
70566: LD_INT 2
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 4
70575: PUSH
70576: LD_INT 2
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 2
70585: PUSH
70586: LD_INT 4
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 0
70595: PUSH
70596: LD_INT 4
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 0
70605: PUSH
70606: LD_INT 3
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 1
70615: PUSH
70616: LD_INT 4
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 1
70625: PUSH
70626: LD_INT 5
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 0
70635: PUSH
70636: LD_INT 5
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 1
70645: NEG
70646: PUSH
70647: LD_INT 4
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 1
70656: NEG
70657: PUSH
70658: LD_INT 3
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: LD_INT 2
70667: PUSH
70668: LD_INT 5
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 2
70677: NEG
70678: PUSH
70679: LD_INT 3
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70733: LD_ADDR_VAR 0 34
70737: PUSH
70738: LD_INT 0
70740: PUSH
70741: LD_INT 4
70743: NEG
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 0
70751: PUSH
70752: LD_INT 5
70754: NEG
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 1
70762: PUSH
70763: LD_INT 4
70765: NEG
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: PUSH
70771: LD_INT 1
70773: PUSH
70774: LD_INT 3
70776: NEG
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 0
70784: PUSH
70785: LD_INT 3
70787: NEG
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 1
70795: NEG
70796: PUSH
70797: LD_INT 4
70799: NEG
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 1
70807: NEG
70808: PUSH
70809: LD_INT 5
70811: NEG
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 2
70819: PUSH
70820: LD_INT 3
70822: NEG
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: PUSH
70828: LD_INT 2
70830: NEG
70831: PUSH
70832: LD_INT 5
70834: NEG
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 3
70842: PUSH
70843: LD_INT 0
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 3
70852: PUSH
70853: LD_INT 1
70855: NEG
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 4
70863: PUSH
70864: LD_INT 0
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 4
70873: PUSH
70874: LD_INT 1
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 3
70883: PUSH
70884: LD_INT 1
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 2
70893: PUSH
70894: LD_INT 0
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 2
70903: PUSH
70904: LD_INT 1
70906: NEG
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 2
70914: PUSH
70915: LD_INT 2
70917: NEG
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 4
70925: PUSH
70926: LD_INT 2
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 4
70935: PUSH
70936: LD_INT 4
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 4
70945: PUSH
70946: LD_INT 3
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 5
70955: PUSH
70956: LD_INT 4
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 5
70965: PUSH
70966: LD_INT 5
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 4
70975: PUSH
70976: LD_INT 5
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 3
70985: PUSH
70986: LD_INT 4
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 3
70995: PUSH
70996: LD_INT 3
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 5
71005: PUSH
71006: LD_INT 3
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 3
71015: PUSH
71016: LD_INT 5
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 0
71025: PUSH
71026: LD_INT 3
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 0
71035: PUSH
71036: LD_INT 2
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 1
71045: PUSH
71046: LD_INT 3
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 1
71055: PUSH
71056: LD_INT 4
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 0
71065: PUSH
71066: LD_INT 4
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: LD_INT 1
71075: NEG
71076: PUSH
71077: LD_INT 3
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 1
71086: NEG
71087: PUSH
71088: LD_INT 2
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 2
71097: PUSH
71098: LD_INT 4
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 2
71107: NEG
71108: PUSH
71109: LD_INT 2
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 4
71118: NEG
71119: PUSH
71120: LD_INT 0
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 4
71129: NEG
71130: PUSH
71131: LD_INT 1
71133: NEG
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: PUSH
71139: LD_INT 3
71141: NEG
71142: PUSH
71143: LD_INT 0
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 3
71152: NEG
71153: PUSH
71154: LD_INT 1
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 4
71163: NEG
71164: PUSH
71165: LD_INT 1
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 5
71174: NEG
71175: PUSH
71176: LD_INT 0
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: PUSH
71183: LD_INT 5
71185: NEG
71186: PUSH
71187: LD_INT 1
71189: NEG
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PUSH
71195: LD_INT 5
71197: NEG
71198: PUSH
71199: LD_INT 2
71201: NEG
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 3
71209: NEG
71210: PUSH
71211: LD_INT 2
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: LIST
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: ST_TO_ADDR
// end ; end ;
71265: GO 71268
71267: POP
// case btype of b_depot , b_warehouse :
71268: LD_VAR 0 1
71272: PUSH
71273: LD_INT 0
71275: DOUBLE
71276: EQUAL
71277: IFTRUE 71287
71279: LD_INT 1
71281: DOUBLE
71282: EQUAL
71283: IFTRUE 71287
71285: GO 71488
71287: POP
// case nation of nation_american :
71288: LD_VAR 0 5
71292: PUSH
71293: LD_INT 1
71295: DOUBLE
71296: EQUAL
71297: IFTRUE 71301
71299: GO 71357
71301: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71302: LD_ADDR_VAR 0 9
71306: PUSH
71307: LD_VAR 0 11
71311: PUSH
71312: LD_VAR 0 12
71316: PUSH
71317: LD_VAR 0 13
71321: PUSH
71322: LD_VAR 0 14
71326: PUSH
71327: LD_VAR 0 15
71331: PUSH
71332: LD_VAR 0 16
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: PUSH
71345: LD_VAR 0 4
71349: PUSH
71350: LD_INT 1
71352: PLUS
71353: ARRAY
71354: ST_TO_ADDR
71355: GO 71486
71357: LD_INT 2
71359: DOUBLE
71360: EQUAL
71361: IFTRUE 71365
71363: GO 71421
71365: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71366: LD_ADDR_VAR 0 9
71370: PUSH
71371: LD_VAR 0 17
71375: PUSH
71376: LD_VAR 0 18
71380: PUSH
71381: LD_VAR 0 19
71385: PUSH
71386: LD_VAR 0 20
71390: PUSH
71391: LD_VAR 0 21
71395: PUSH
71396: LD_VAR 0 22
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: PUSH
71409: LD_VAR 0 4
71413: PUSH
71414: LD_INT 1
71416: PLUS
71417: ARRAY
71418: ST_TO_ADDR
71419: GO 71486
71421: LD_INT 3
71423: DOUBLE
71424: EQUAL
71425: IFTRUE 71429
71427: GO 71485
71429: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71430: LD_ADDR_VAR 0 9
71434: PUSH
71435: LD_VAR 0 23
71439: PUSH
71440: LD_VAR 0 24
71444: PUSH
71445: LD_VAR 0 25
71449: PUSH
71450: LD_VAR 0 26
71454: PUSH
71455: LD_VAR 0 27
71459: PUSH
71460: LD_VAR 0 28
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: PUSH
71473: LD_VAR 0 4
71477: PUSH
71478: LD_INT 1
71480: PLUS
71481: ARRAY
71482: ST_TO_ADDR
71483: GO 71486
71485: POP
71486: GO 72041
71488: LD_INT 2
71490: DOUBLE
71491: EQUAL
71492: IFTRUE 71502
71494: LD_INT 3
71496: DOUBLE
71497: EQUAL
71498: IFTRUE 71502
71500: GO 71558
71502: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71503: LD_ADDR_VAR 0 9
71507: PUSH
71508: LD_VAR 0 29
71512: PUSH
71513: LD_VAR 0 30
71517: PUSH
71518: LD_VAR 0 31
71522: PUSH
71523: LD_VAR 0 32
71527: PUSH
71528: LD_VAR 0 33
71532: PUSH
71533: LD_VAR 0 34
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: PUSH
71546: LD_VAR 0 4
71550: PUSH
71551: LD_INT 1
71553: PLUS
71554: ARRAY
71555: ST_TO_ADDR
71556: GO 72041
71558: LD_INT 16
71560: DOUBLE
71561: EQUAL
71562: IFTRUE 71620
71564: LD_INT 17
71566: DOUBLE
71567: EQUAL
71568: IFTRUE 71620
71570: LD_INT 18
71572: DOUBLE
71573: EQUAL
71574: IFTRUE 71620
71576: LD_INT 19
71578: DOUBLE
71579: EQUAL
71580: IFTRUE 71620
71582: LD_INT 22
71584: DOUBLE
71585: EQUAL
71586: IFTRUE 71620
71588: LD_INT 20
71590: DOUBLE
71591: EQUAL
71592: IFTRUE 71620
71594: LD_INT 21
71596: DOUBLE
71597: EQUAL
71598: IFTRUE 71620
71600: LD_INT 23
71602: DOUBLE
71603: EQUAL
71604: IFTRUE 71620
71606: LD_INT 24
71608: DOUBLE
71609: EQUAL
71610: IFTRUE 71620
71612: LD_INT 25
71614: DOUBLE
71615: EQUAL
71616: IFTRUE 71620
71618: GO 71676
71620: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71621: LD_ADDR_VAR 0 9
71625: PUSH
71626: LD_VAR 0 35
71630: PUSH
71631: LD_VAR 0 36
71635: PUSH
71636: LD_VAR 0 37
71640: PUSH
71641: LD_VAR 0 38
71645: PUSH
71646: LD_VAR 0 39
71650: PUSH
71651: LD_VAR 0 40
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: PUSH
71664: LD_VAR 0 4
71668: PUSH
71669: LD_INT 1
71671: PLUS
71672: ARRAY
71673: ST_TO_ADDR
71674: GO 72041
71676: LD_INT 6
71678: DOUBLE
71679: EQUAL
71680: IFTRUE 71732
71682: LD_INT 7
71684: DOUBLE
71685: EQUAL
71686: IFTRUE 71732
71688: LD_INT 8
71690: DOUBLE
71691: EQUAL
71692: IFTRUE 71732
71694: LD_INT 13
71696: DOUBLE
71697: EQUAL
71698: IFTRUE 71732
71700: LD_INT 12
71702: DOUBLE
71703: EQUAL
71704: IFTRUE 71732
71706: LD_INT 15
71708: DOUBLE
71709: EQUAL
71710: IFTRUE 71732
71712: LD_INT 11
71714: DOUBLE
71715: EQUAL
71716: IFTRUE 71732
71718: LD_INT 14
71720: DOUBLE
71721: EQUAL
71722: IFTRUE 71732
71724: LD_INT 10
71726: DOUBLE
71727: EQUAL
71728: IFTRUE 71732
71730: GO 71788
71732: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71733: LD_ADDR_VAR 0 9
71737: PUSH
71738: LD_VAR 0 41
71742: PUSH
71743: LD_VAR 0 42
71747: PUSH
71748: LD_VAR 0 43
71752: PUSH
71753: LD_VAR 0 44
71757: PUSH
71758: LD_VAR 0 45
71762: PUSH
71763: LD_VAR 0 46
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: PUSH
71776: LD_VAR 0 4
71780: PUSH
71781: LD_INT 1
71783: PLUS
71784: ARRAY
71785: ST_TO_ADDR
71786: GO 72041
71788: LD_INT 36
71790: DOUBLE
71791: EQUAL
71792: IFTRUE 71796
71794: GO 71852
71796: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71797: LD_ADDR_VAR 0 9
71801: PUSH
71802: LD_VAR 0 47
71806: PUSH
71807: LD_VAR 0 48
71811: PUSH
71812: LD_VAR 0 49
71816: PUSH
71817: LD_VAR 0 50
71821: PUSH
71822: LD_VAR 0 51
71826: PUSH
71827: LD_VAR 0 52
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: LIST
71836: LIST
71837: LIST
71838: LIST
71839: PUSH
71840: LD_VAR 0 4
71844: PUSH
71845: LD_INT 1
71847: PLUS
71848: ARRAY
71849: ST_TO_ADDR
71850: GO 72041
71852: LD_INT 4
71854: DOUBLE
71855: EQUAL
71856: IFTRUE 71878
71858: LD_INT 5
71860: DOUBLE
71861: EQUAL
71862: IFTRUE 71878
71864: LD_INT 34
71866: DOUBLE
71867: EQUAL
71868: IFTRUE 71878
71870: LD_INT 37
71872: DOUBLE
71873: EQUAL
71874: IFTRUE 71878
71876: GO 71934
71878: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71879: LD_ADDR_VAR 0 9
71883: PUSH
71884: LD_VAR 0 53
71888: PUSH
71889: LD_VAR 0 54
71893: PUSH
71894: LD_VAR 0 55
71898: PUSH
71899: LD_VAR 0 56
71903: PUSH
71904: LD_VAR 0 57
71908: PUSH
71909: LD_VAR 0 58
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: PUSH
71922: LD_VAR 0 4
71926: PUSH
71927: LD_INT 1
71929: PLUS
71930: ARRAY
71931: ST_TO_ADDR
71932: GO 72041
71934: LD_INT 31
71936: DOUBLE
71937: EQUAL
71938: IFTRUE 71984
71940: LD_INT 32
71942: DOUBLE
71943: EQUAL
71944: IFTRUE 71984
71946: LD_INT 33
71948: DOUBLE
71949: EQUAL
71950: IFTRUE 71984
71952: LD_INT 27
71954: DOUBLE
71955: EQUAL
71956: IFTRUE 71984
71958: LD_INT 26
71960: DOUBLE
71961: EQUAL
71962: IFTRUE 71984
71964: LD_INT 28
71966: DOUBLE
71967: EQUAL
71968: IFTRUE 71984
71970: LD_INT 29
71972: DOUBLE
71973: EQUAL
71974: IFTRUE 71984
71976: LD_INT 30
71978: DOUBLE
71979: EQUAL
71980: IFTRUE 71984
71982: GO 72040
71984: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71985: LD_ADDR_VAR 0 9
71989: PUSH
71990: LD_VAR 0 59
71994: PUSH
71995: LD_VAR 0 60
71999: PUSH
72000: LD_VAR 0 61
72004: PUSH
72005: LD_VAR 0 62
72009: PUSH
72010: LD_VAR 0 63
72014: PUSH
72015: LD_VAR 0 64
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: PUSH
72028: LD_VAR 0 4
72032: PUSH
72033: LD_INT 1
72035: PLUS
72036: ARRAY
72037: ST_TO_ADDR
72038: GO 72041
72040: POP
// temp_list2 = [ ] ;
72041: LD_ADDR_VAR 0 10
72045: PUSH
72046: EMPTY
72047: ST_TO_ADDR
// for i in temp_list do
72048: LD_ADDR_VAR 0 8
72052: PUSH
72053: LD_VAR 0 9
72057: PUSH
72058: FOR_IN
72059: IFFALSE 72111
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72061: LD_ADDR_VAR 0 10
72065: PUSH
72066: LD_VAR 0 10
72070: PUSH
72071: LD_VAR 0 8
72075: PUSH
72076: LD_INT 1
72078: ARRAY
72079: PUSH
72080: LD_VAR 0 2
72084: PLUS
72085: PUSH
72086: LD_VAR 0 8
72090: PUSH
72091: LD_INT 2
72093: ARRAY
72094: PUSH
72095: LD_VAR 0 3
72099: PLUS
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: EMPTY
72106: LIST
72107: ADD
72108: ST_TO_ADDR
72109: GO 72058
72111: POP
72112: POP
// result = temp_list2 ;
72113: LD_ADDR_VAR 0 7
72117: PUSH
72118: LD_VAR 0 10
72122: ST_TO_ADDR
// end ;
72123: LD_VAR 0 7
72127: RET
// export function EnemyInRange ( unit , dist ) ; begin
72128: LD_INT 0
72130: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72131: LD_ADDR_VAR 0 3
72135: PUSH
72136: LD_VAR 0 1
72140: PPUSH
72141: CALL_OW 255
72145: PPUSH
72146: LD_VAR 0 1
72150: PPUSH
72151: CALL_OW 250
72155: PPUSH
72156: LD_VAR 0 1
72160: PPUSH
72161: CALL_OW 251
72165: PPUSH
72166: LD_VAR 0 2
72170: PPUSH
72171: CALL 45501 0 4
72175: PUSH
72176: LD_INT 4
72178: ARRAY
72179: ST_TO_ADDR
// end ;
72180: LD_VAR 0 3
72184: RET
// export function PlayerSeeMe ( unit ) ; begin
72185: LD_INT 0
72187: PPUSH
// result := See ( your_side , unit ) ;
72188: LD_ADDR_VAR 0 2
72192: PUSH
72193: LD_OWVAR 2
72197: PPUSH
72198: LD_VAR 0 1
72202: PPUSH
72203: CALL_OW 292
72207: ST_TO_ADDR
// end ;
72208: LD_VAR 0 2
72212: RET
// export function ReverseDir ( unit ) ; begin
72213: LD_INT 0
72215: PPUSH
// if not unit then
72216: LD_VAR 0 1
72220: NOT
72221: IFFALSE 72225
// exit ;
72223: GO 72248
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72225: LD_ADDR_VAR 0 2
72229: PUSH
72230: LD_VAR 0 1
72234: PPUSH
72235: CALL_OW 254
72239: PUSH
72240: LD_INT 3
72242: PLUS
72243: PUSH
72244: LD_INT 6
72246: MOD
72247: ST_TO_ADDR
// end ;
72248: LD_VAR 0 2
72252: RET
// export function ReverseArray ( array ) ; var i ; begin
72253: LD_INT 0
72255: PPUSH
72256: PPUSH
// if not array then
72257: LD_VAR 0 1
72261: NOT
72262: IFFALSE 72266
// exit ;
72264: GO 72321
// result := [ ] ;
72266: LD_ADDR_VAR 0 2
72270: PUSH
72271: EMPTY
72272: ST_TO_ADDR
// for i := array downto 1 do
72273: LD_ADDR_VAR 0 3
72277: PUSH
72278: DOUBLE
72279: LD_VAR 0 1
72283: INC
72284: ST_TO_ADDR
72285: LD_INT 1
72287: PUSH
72288: FOR_DOWNTO
72289: IFFALSE 72319
// result := Join ( result , array [ i ] ) ;
72291: LD_ADDR_VAR 0 2
72295: PUSH
72296: LD_VAR 0 2
72300: PPUSH
72301: LD_VAR 0 1
72305: PUSH
72306: LD_VAR 0 3
72310: ARRAY
72311: PPUSH
72312: CALL 76977 0 2
72316: ST_TO_ADDR
72317: GO 72288
72319: POP
72320: POP
// end ;
72321: LD_VAR 0 2
72325: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72326: LD_INT 0
72328: PPUSH
72329: PPUSH
72330: PPUSH
72331: PPUSH
72332: PPUSH
72333: PPUSH
// if not unit or not hexes then
72334: LD_VAR 0 1
72338: NOT
72339: PUSH
72340: LD_VAR 0 2
72344: NOT
72345: OR
72346: IFFALSE 72350
// exit ;
72348: GO 72473
// dist := 9999 ;
72350: LD_ADDR_VAR 0 5
72354: PUSH
72355: LD_INT 9999
72357: ST_TO_ADDR
// for i = 1 to hexes do
72358: LD_ADDR_VAR 0 4
72362: PUSH
72363: DOUBLE
72364: LD_INT 1
72366: DEC
72367: ST_TO_ADDR
72368: LD_VAR 0 2
72372: PUSH
72373: FOR_TO
72374: IFFALSE 72461
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72376: LD_ADDR_VAR 0 6
72380: PUSH
72381: LD_VAR 0 1
72385: PPUSH
72386: LD_VAR 0 2
72390: PUSH
72391: LD_VAR 0 4
72395: ARRAY
72396: PUSH
72397: LD_INT 1
72399: ARRAY
72400: PPUSH
72401: LD_VAR 0 2
72405: PUSH
72406: LD_VAR 0 4
72410: ARRAY
72411: PUSH
72412: LD_INT 2
72414: ARRAY
72415: PPUSH
72416: CALL_OW 297
72420: ST_TO_ADDR
// if tdist < dist then
72421: LD_VAR 0 6
72425: PUSH
72426: LD_VAR 0 5
72430: LESS
72431: IFFALSE 72459
// begin hex := hexes [ i ] ;
72433: LD_ADDR_VAR 0 8
72437: PUSH
72438: LD_VAR 0 2
72442: PUSH
72443: LD_VAR 0 4
72447: ARRAY
72448: ST_TO_ADDR
// dist := tdist ;
72449: LD_ADDR_VAR 0 5
72453: PUSH
72454: LD_VAR 0 6
72458: ST_TO_ADDR
// end ; end ;
72459: GO 72373
72461: POP
72462: POP
// result := hex ;
72463: LD_ADDR_VAR 0 3
72467: PUSH
72468: LD_VAR 0 8
72472: ST_TO_ADDR
// end ;
72473: LD_VAR 0 3
72477: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72478: LD_INT 0
72480: PPUSH
72481: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72482: LD_VAR 0 1
72486: NOT
72487: PUSH
72488: LD_VAR 0 1
72492: PUSH
72493: LD_INT 21
72495: PUSH
72496: LD_INT 2
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 23
72505: PUSH
72506: LD_INT 2
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PPUSH
72517: CALL_OW 69
72521: IN
72522: NOT
72523: OR
72524: IFFALSE 72528
// exit ;
72526: GO 72575
// for i = 1 to 3 do
72528: LD_ADDR_VAR 0 3
72532: PUSH
72533: DOUBLE
72534: LD_INT 1
72536: DEC
72537: ST_TO_ADDR
72538: LD_INT 3
72540: PUSH
72541: FOR_TO
72542: IFFALSE 72573
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72544: LD_VAR 0 1
72548: PPUSH
72549: CALL_OW 250
72553: PPUSH
72554: LD_VAR 0 1
72558: PPUSH
72559: CALL_OW 251
72563: PPUSH
72564: LD_INT 1
72566: PPUSH
72567: CALL_OW 453
72571: GO 72541
72573: POP
72574: POP
// end ;
72575: LD_VAR 0 2
72579: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72580: LD_INT 0
72582: PPUSH
72583: PPUSH
72584: PPUSH
72585: PPUSH
72586: PPUSH
72587: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72588: LD_VAR 0 1
72592: NOT
72593: PUSH
72594: LD_VAR 0 2
72598: NOT
72599: OR
72600: PUSH
72601: LD_VAR 0 1
72605: PPUSH
72606: CALL_OW 314
72610: OR
72611: IFFALSE 72615
// exit ;
72613: GO 73082
// if GetLives ( i ) < 250 then
72615: LD_VAR 0 4
72619: PPUSH
72620: CALL_OW 256
72624: PUSH
72625: LD_INT 250
72627: LESS
72628: IFFALSE 72641
// begin ComAutodestruct ( i ) ;
72630: LD_VAR 0 4
72634: PPUSH
72635: CALL 72478 0 1
// exit ;
72639: GO 73082
// end ; x := GetX ( enemy_unit ) ;
72641: LD_ADDR_VAR 0 7
72645: PUSH
72646: LD_VAR 0 2
72650: PPUSH
72651: CALL_OW 250
72655: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72656: LD_ADDR_VAR 0 8
72660: PUSH
72661: LD_VAR 0 2
72665: PPUSH
72666: CALL_OW 251
72670: ST_TO_ADDR
// if not x or not y then
72671: LD_VAR 0 7
72675: NOT
72676: PUSH
72677: LD_VAR 0 8
72681: NOT
72682: OR
72683: IFFALSE 72687
// exit ;
72685: GO 73082
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72687: LD_ADDR_VAR 0 6
72691: PUSH
72692: LD_VAR 0 7
72696: PPUSH
72697: LD_INT 0
72699: PPUSH
72700: LD_INT 4
72702: PPUSH
72703: CALL_OW 272
72707: PUSH
72708: LD_VAR 0 8
72712: PPUSH
72713: LD_INT 0
72715: PPUSH
72716: LD_INT 4
72718: PPUSH
72719: CALL_OW 273
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: LD_VAR 0 7
72732: PPUSH
72733: LD_INT 1
72735: PPUSH
72736: LD_INT 4
72738: PPUSH
72739: CALL_OW 272
72743: PUSH
72744: LD_VAR 0 8
72748: PPUSH
72749: LD_INT 1
72751: PPUSH
72752: LD_INT 4
72754: PPUSH
72755: CALL_OW 273
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_VAR 0 7
72768: PPUSH
72769: LD_INT 2
72771: PPUSH
72772: LD_INT 4
72774: PPUSH
72775: CALL_OW 272
72779: PUSH
72780: LD_VAR 0 8
72784: PPUSH
72785: LD_INT 2
72787: PPUSH
72788: LD_INT 4
72790: PPUSH
72791: CALL_OW 273
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_VAR 0 7
72804: PPUSH
72805: LD_INT 3
72807: PPUSH
72808: LD_INT 4
72810: PPUSH
72811: CALL_OW 272
72815: PUSH
72816: LD_VAR 0 8
72820: PPUSH
72821: LD_INT 3
72823: PPUSH
72824: LD_INT 4
72826: PPUSH
72827: CALL_OW 273
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_VAR 0 7
72840: PPUSH
72841: LD_INT 4
72843: PPUSH
72844: LD_INT 4
72846: PPUSH
72847: CALL_OW 272
72851: PUSH
72852: LD_VAR 0 8
72856: PPUSH
72857: LD_INT 4
72859: PPUSH
72860: LD_INT 4
72862: PPUSH
72863: CALL_OW 273
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: PUSH
72872: LD_VAR 0 7
72876: PPUSH
72877: LD_INT 5
72879: PPUSH
72880: LD_INT 4
72882: PPUSH
72883: CALL_OW 272
72887: PUSH
72888: LD_VAR 0 8
72892: PPUSH
72893: LD_INT 5
72895: PPUSH
72896: LD_INT 4
72898: PPUSH
72899: CALL_OW 273
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: ST_TO_ADDR
// for i = tmp downto 1 do
72916: LD_ADDR_VAR 0 4
72920: PUSH
72921: DOUBLE
72922: LD_VAR 0 6
72926: INC
72927: ST_TO_ADDR
72928: LD_INT 1
72930: PUSH
72931: FOR_DOWNTO
72932: IFFALSE 73033
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72934: LD_VAR 0 6
72938: PUSH
72939: LD_VAR 0 4
72943: ARRAY
72944: PUSH
72945: LD_INT 1
72947: ARRAY
72948: PPUSH
72949: LD_VAR 0 6
72953: PUSH
72954: LD_VAR 0 4
72958: ARRAY
72959: PUSH
72960: LD_INT 2
72962: ARRAY
72963: PPUSH
72964: CALL_OW 488
72968: NOT
72969: PUSH
72970: LD_VAR 0 6
72974: PUSH
72975: LD_VAR 0 4
72979: ARRAY
72980: PUSH
72981: LD_INT 1
72983: ARRAY
72984: PPUSH
72985: LD_VAR 0 6
72989: PUSH
72990: LD_VAR 0 4
72994: ARRAY
72995: PUSH
72996: LD_INT 2
72998: ARRAY
72999: PPUSH
73000: CALL_OW 428
73004: PUSH
73005: LD_INT 0
73007: NONEQUAL
73008: OR
73009: IFFALSE 73031
// tmp := Delete ( tmp , i ) ;
73011: LD_ADDR_VAR 0 6
73015: PUSH
73016: LD_VAR 0 6
73020: PPUSH
73021: LD_VAR 0 4
73025: PPUSH
73026: CALL_OW 3
73030: ST_TO_ADDR
73031: GO 72931
73033: POP
73034: POP
// j := GetClosestHex ( unit , tmp ) ;
73035: LD_ADDR_VAR 0 5
73039: PUSH
73040: LD_VAR 0 1
73044: PPUSH
73045: LD_VAR 0 6
73049: PPUSH
73050: CALL 72326 0 2
73054: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73055: LD_VAR 0 1
73059: PPUSH
73060: LD_VAR 0 5
73064: PUSH
73065: LD_INT 1
73067: ARRAY
73068: PPUSH
73069: LD_VAR 0 5
73073: PUSH
73074: LD_INT 2
73076: ARRAY
73077: PPUSH
73078: CALL_OW 111
// end ;
73082: LD_VAR 0 3
73086: RET
// export function PrepareApemanSoldier ( ) ; begin
73087: LD_INT 0
73089: PPUSH
// uc_nation := 0 ;
73090: LD_ADDR_OWVAR 21
73094: PUSH
73095: LD_INT 0
73097: ST_TO_ADDR
// hc_sex := sex_male ;
73098: LD_ADDR_OWVAR 27
73102: PUSH
73103: LD_INT 1
73105: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73106: LD_ADDR_OWVAR 28
73110: PUSH
73111: LD_INT 15
73113: ST_TO_ADDR
// hc_gallery :=  ;
73114: LD_ADDR_OWVAR 33
73118: PUSH
73119: LD_STRING 
73121: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73122: LD_ADDR_OWVAR 31
73126: PUSH
73127: LD_INT 0
73129: PPUSH
73130: LD_INT 3
73132: PPUSH
73133: CALL_OW 12
73137: PUSH
73138: LD_INT 0
73140: PPUSH
73141: LD_INT 3
73143: PPUSH
73144: CALL_OW 12
73148: PUSH
73149: LD_INT 0
73151: PUSH
73152: LD_INT 0
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: ST_TO_ADDR
// end ;
73161: LD_VAR 0 1
73165: RET
// export function PrepareApemanEngineer ( ) ; begin
73166: LD_INT 0
73168: PPUSH
// uc_nation := 0 ;
73169: LD_ADDR_OWVAR 21
73173: PUSH
73174: LD_INT 0
73176: ST_TO_ADDR
// hc_sex := sex_male ;
73177: LD_ADDR_OWVAR 27
73181: PUSH
73182: LD_INT 1
73184: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73185: LD_ADDR_OWVAR 28
73189: PUSH
73190: LD_INT 16
73192: ST_TO_ADDR
// hc_gallery :=  ;
73193: LD_ADDR_OWVAR 33
73197: PUSH
73198: LD_STRING 
73200: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73201: LD_ADDR_OWVAR 31
73205: PUSH
73206: LD_INT 0
73208: PPUSH
73209: LD_INT 3
73211: PPUSH
73212: CALL_OW 12
73216: PUSH
73217: LD_INT 0
73219: PPUSH
73220: LD_INT 3
73222: PPUSH
73223: CALL_OW 12
73227: PUSH
73228: LD_INT 0
73230: PUSH
73231: LD_INT 0
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: ST_TO_ADDR
// end ;
73240: LD_VAR 0 1
73244: RET
// export function PrepareApeman ( agressivity ) ; begin
73245: LD_INT 0
73247: PPUSH
// uc_side := 0 ;
73248: LD_ADDR_OWVAR 20
73252: PUSH
73253: LD_INT 0
73255: ST_TO_ADDR
// uc_nation := 0 ;
73256: LD_ADDR_OWVAR 21
73260: PUSH
73261: LD_INT 0
73263: ST_TO_ADDR
// hc_sex := sex_male ;
73264: LD_ADDR_OWVAR 27
73268: PUSH
73269: LD_INT 1
73271: ST_TO_ADDR
// hc_class := class_apeman ;
73272: LD_ADDR_OWVAR 28
73276: PUSH
73277: LD_INT 12
73279: ST_TO_ADDR
// hc_gallery :=  ;
73280: LD_ADDR_OWVAR 33
73284: PUSH
73285: LD_STRING 
73287: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73288: LD_ADDR_OWVAR 35
73292: PUSH
73293: LD_VAR 0 1
73297: NEG
73298: PPUSH
73299: LD_VAR 0 1
73303: PPUSH
73304: CALL_OW 12
73308: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73309: LD_ADDR_OWVAR 31
73313: PUSH
73314: LD_INT 0
73316: PPUSH
73317: LD_INT 3
73319: PPUSH
73320: CALL_OW 12
73324: PUSH
73325: LD_INT 0
73327: PPUSH
73328: LD_INT 3
73330: PPUSH
73331: CALL_OW 12
73335: PUSH
73336: LD_INT 0
73338: PUSH
73339: LD_INT 0
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: LIST
73346: LIST
73347: ST_TO_ADDR
// end ;
73348: LD_VAR 0 2
73352: RET
// export function PrepareTiger ( agressivity ) ; begin
73353: LD_INT 0
73355: PPUSH
// uc_side := 0 ;
73356: LD_ADDR_OWVAR 20
73360: PUSH
73361: LD_INT 0
73363: ST_TO_ADDR
// uc_nation := 0 ;
73364: LD_ADDR_OWVAR 21
73368: PUSH
73369: LD_INT 0
73371: ST_TO_ADDR
// hc_class := class_tiger ;
73372: LD_ADDR_OWVAR 28
73376: PUSH
73377: LD_INT 14
73379: ST_TO_ADDR
// hc_gallery :=  ;
73380: LD_ADDR_OWVAR 33
73384: PUSH
73385: LD_STRING 
73387: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73388: LD_ADDR_OWVAR 35
73392: PUSH
73393: LD_VAR 0 1
73397: NEG
73398: PPUSH
73399: LD_VAR 0 1
73403: PPUSH
73404: CALL_OW 12
73408: ST_TO_ADDR
// end ;
73409: LD_VAR 0 2
73413: RET
// export function PrepareEnchidna ( ) ; begin
73414: LD_INT 0
73416: PPUSH
// uc_side := 0 ;
73417: LD_ADDR_OWVAR 20
73421: PUSH
73422: LD_INT 0
73424: ST_TO_ADDR
// uc_nation := 0 ;
73425: LD_ADDR_OWVAR 21
73429: PUSH
73430: LD_INT 0
73432: ST_TO_ADDR
// hc_class := class_baggie ;
73433: LD_ADDR_OWVAR 28
73437: PUSH
73438: LD_INT 13
73440: ST_TO_ADDR
// hc_gallery :=  ;
73441: LD_ADDR_OWVAR 33
73445: PUSH
73446: LD_STRING 
73448: ST_TO_ADDR
// end ;
73449: LD_VAR 0 1
73453: RET
// export function PrepareFrog ( ) ; begin
73454: LD_INT 0
73456: PPUSH
// uc_side := 0 ;
73457: LD_ADDR_OWVAR 20
73461: PUSH
73462: LD_INT 0
73464: ST_TO_ADDR
// uc_nation := 0 ;
73465: LD_ADDR_OWVAR 21
73469: PUSH
73470: LD_INT 0
73472: ST_TO_ADDR
// hc_class := class_frog ;
73473: LD_ADDR_OWVAR 28
73477: PUSH
73478: LD_INT 19
73480: ST_TO_ADDR
// hc_gallery :=  ;
73481: LD_ADDR_OWVAR 33
73485: PUSH
73486: LD_STRING 
73488: ST_TO_ADDR
// end ;
73489: LD_VAR 0 1
73493: RET
// export function PrepareFish ( ) ; begin
73494: LD_INT 0
73496: PPUSH
// uc_side := 0 ;
73497: LD_ADDR_OWVAR 20
73501: PUSH
73502: LD_INT 0
73504: ST_TO_ADDR
// uc_nation := 0 ;
73505: LD_ADDR_OWVAR 21
73509: PUSH
73510: LD_INT 0
73512: ST_TO_ADDR
// hc_class := class_fish ;
73513: LD_ADDR_OWVAR 28
73517: PUSH
73518: LD_INT 20
73520: ST_TO_ADDR
// hc_gallery :=  ;
73521: LD_ADDR_OWVAR 33
73525: PUSH
73526: LD_STRING 
73528: ST_TO_ADDR
// end ;
73529: LD_VAR 0 1
73533: RET
// export function PrepareBird ( ) ; begin
73534: LD_INT 0
73536: PPUSH
// uc_side := 0 ;
73537: LD_ADDR_OWVAR 20
73541: PUSH
73542: LD_INT 0
73544: ST_TO_ADDR
// uc_nation := 0 ;
73545: LD_ADDR_OWVAR 21
73549: PUSH
73550: LD_INT 0
73552: ST_TO_ADDR
// hc_class := class_phororhacos ;
73553: LD_ADDR_OWVAR 28
73557: PUSH
73558: LD_INT 18
73560: ST_TO_ADDR
// hc_gallery :=  ;
73561: LD_ADDR_OWVAR 33
73565: PUSH
73566: LD_STRING 
73568: ST_TO_ADDR
// end ;
73569: LD_VAR 0 1
73573: RET
// export function PrepareHorse ( ) ; begin
73574: LD_INT 0
73576: PPUSH
// uc_side := 0 ;
73577: LD_ADDR_OWVAR 20
73581: PUSH
73582: LD_INT 0
73584: ST_TO_ADDR
// uc_nation := 0 ;
73585: LD_ADDR_OWVAR 21
73589: PUSH
73590: LD_INT 0
73592: ST_TO_ADDR
// hc_class := class_horse ;
73593: LD_ADDR_OWVAR 28
73597: PUSH
73598: LD_INT 21
73600: ST_TO_ADDR
// hc_gallery :=  ;
73601: LD_ADDR_OWVAR 33
73605: PUSH
73606: LD_STRING 
73608: ST_TO_ADDR
// end ;
73609: LD_VAR 0 1
73613: RET
// export function PrepareMastodont ( ) ; begin
73614: LD_INT 0
73616: PPUSH
// uc_side := 0 ;
73617: LD_ADDR_OWVAR 20
73621: PUSH
73622: LD_INT 0
73624: ST_TO_ADDR
// uc_nation := 0 ;
73625: LD_ADDR_OWVAR 21
73629: PUSH
73630: LD_INT 0
73632: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73633: LD_ADDR_OWVAR 37
73637: PUSH
73638: LD_INT 31
73640: ST_TO_ADDR
// vc_control := control_rider ;
73641: LD_ADDR_OWVAR 38
73645: PUSH
73646: LD_INT 4
73648: ST_TO_ADDR
// end ;
73649: LD_VAR 0 1
73653: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73654: LD_INT 0
73656: PPUSH
73657: PPUSH
73658: PPUSH
// uc_side = 0 ;
73659: LD_ADDR_OWVAR 20
73663: PUSH
73664: LD_INT 0
73666: ST_TO_ADDR
// uc_nation = 0 ;
73667: LD_ADDR_OWVAR 21
73671: PUSH
73672: LD_INT 0
73674: ST_TO_ADDR
// InitHc_All ( ) ;
73675: CALL_OW 584
// InitVc ;
73679: CALL_OW 20
// if mastodonts then
73683: LD_VAR 0 6
73687: IFFALSE 73754
// for i = 1 to mastodonts do
73689: LD_ADDR_VAR 0 11
73693: PUSH
73694: DOUBLE
73695: LD_INT 1
73697: DEC
73698: ST_TO_ADDR
73699: LD_VAR 0 6
73703: PUSH
73704: FOR_TO
73705: IFFALSE 73752
// begin vc_chassis := 31 ;
73707: LD_ADDR_OWVAR 37
73711: PUSH
73712: LD_INT 31
73714: ST_TO_ADDR
// vc_control := control_rider ;
73715: LD_ADDR_OWVAR 38
73719: PUSH
73720: LD_INT 4
73722: ST_TO_ADDR
// animal := CreateVehicle ;
73723: LD_ADDR_VAR 0 12
73727: PUSH
73728: CALL_OW 45
73732: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73733: LD_VAR 0 12
73737: PPUSH
73738: LD_VAR 0 8
73742: PPUSH
73743: LD_INT 0
73745: PPUSH
73746: CALL 75882 0 3
// end ;
73750: GO 73704
73752: POP
73753: POP
// if horses then
73754: LD_VAR 0 5
73758: IFFALSE 73825
// for i = 1 to horses do
73760: LD_ADDR_VAR 0 11
73764: PUSH
73765: DOUBLE
73766: LD_INT 1
73768: DEC
73769: ST_TO_ADDR
73770: LD_VAR 0 5
73774: PUSH
73775: FOR_TO
73776: IFFALSE 73823
// begin hc_class := 21 ;
73778: LD_ADDR_OWVAR 28
73782: PUSH
73783: LD_INT 21
73785: ST_TO_ADDR
// hc_gallery :=  ;
73786: LD_ADDR_OWVAR 33
73790: PUSH
73791: LD_STRING 
73793: ST_TO_ADDR
// animal := CreateHuman ;
73794: LD_ADDR_VAR 0 12
73798: PUSH
73799: CALL_OW 44
73803: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73804: LD_VAR 0 12
73808: PPUSH
73809: LD_VAR 0 8
73813: PPUSH
73814: LD_INT 0
73816: PPUSH
73817: CALL 75882 0 3
// end ;
73821: GO 73775
73823: POP
73824: POP
// if birds then
73825: LD_VAR 0 1
73829: IFFALSE 73896
// for i = 1 to birds do
73831: LD_ADDR_VAR 0 11
73835: PUSH
73836: DOUBLE
73837: LD_INT 1
73839: DEC
73840: ST_TO_ADDR
73841: LD_VAR 0 1
73845: PUSH
73846: FOR_TO
73847: IFFALSE 73894
// begin hc_class := 18 ;
73849: LD_ADDR_OWVAR 28
73853: PUSH
73854: LD_INT 18
73856: ST_TO_ADDR
// hc_gallery =  ;
73857: LD_ADDR_OWVAR 33
73861: PUSH
73862: LD_STRING 
73864: ST_TO_ADDR
// animal := CreateHuman ;
73865: LD_ADDR_VAR 0 12
73869: PUSH
73870: CALL_OW 44
73874: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73875: LD_VAR 0 12
73879: PPUSH
73880: LD_VAR 0 8
73884: PPUSH
73885: LD_INT 0
73887: PPUSH
73888: CALL 75882 0 3
// end ;
73892: GO 73846
73894: POP
73895: POP
// if tigers then
73896: LD_VAR 0 2
73900: IFFALSE 73984
// for i = 1 to tigers do
73902: LD_ADDR_VAR 0 11
73906: PUSH
73907: DOUBLE
73908: LD_INT 1
73910: DEC
73911: ST_TO_ADDR
73912: LD_VAR 0 2
73916: PUSH
73917: FOR_TO
73918: IFFALSE 73982
// begin hc_class = class_tiger ;
73920: LD_ADDR_OWVAR 28
73924: PUSH
73925: LD_INT 14
73927: ST_TO_ADDR
// hc_gallery =  ;
73928: LD_ADDR_OWVAR 33
73932: PUSH
73933: LD_STRING 
73935: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73936: LD_ADDR_OWVAR 35
73940: PUSH
73941: LD_INT 7
73943: NEG
73944: PPUSH
73945: LD_INT 7
73947: PPUSH
73948: CALL_OW 12
73952: ST_TO_ADDR
// animal := CreateHuman ;
73953: LD_ADDR_VAR 0 12
73957: PUSH
73958: CALL_OW 44
73962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73963: LD_VAR 0 12
73967: PPUSH
73968: LD_VAR 0 8
73972: PPUSH
73973: LD_INT 0
73975: PPUSH
73976: CALL 75882 0 3
// end ;
73980: GO 73917
73982: POP
73983: POP
// if apemans then
73984: LD_VAR 0 3
73988: IFFALSE 74111
// for i = 1 to apemans do
73990: LD_ADDR_VAR 0 11
73994: PUSH
73995: DOUBLE
73996: LD_INT 1
73998: DEC
73999: ST_TO_ADDR
74000: LD_VAR 0 3
74004: PUSH
74005: FOR_TO
74006: IFFALSE 74109
// begin hc_class = class_apeman ;
74008: LD_ADDR_OWVAR 28
74012: PUSH
74013: LD_INT 12
74015: ST_TO_ADDR
// hc_gallery =  ;
74016: LD_ADDR_OWVAR 33
74020: PUSH
74021: LD_STRING 
74023: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74024: LD_ADDR_OWVAR 35
74028: PUSH
74029: LD_INT 2
74031: NEG
74032: PPUSH
74033: LD_INT 2
74035: PPUSH
74036: CALL_OW 12
74040: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74041: LD_ADDR_OWVAR 31
74045: PUSH
74046: LD_INT 1
74048: PPUSH
74049: LD_INT 3
74051: PPUSH
74052: CALL_OW 12
74056: PUSH
74057: LD_INT 1
74059: PPUSH
74060: LD_INT 3
74062: PPUSH
74063: CALL_OW 12
74067: PUSH
74068: LD_INT 0
74070: PUSH
74071: LD_INT 0
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: LIST
74078: LIST
74079: ST_TO_ADDR
// animal := CreateHuman ;
74080: LD_ADDR_VAR 0 12
74084: PUSH
74085: CALL_OW 44
74089: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74090: LD_VAR 0 12
74094: PPUSH
74095: LD_VAR 0 8
74099: PPUSH
74100: LD_INT 0
74102: PPUSH
74103: CALL 75882 0 3
// end ;
74107: GO 74005
74109: POP
74110: POP
// if enchidnas then
74111: LD_VAR 0 4
74115: IFFALSE 74182
// for i = 1 to enchidnas do
74117: LD_ADDR_VAR 0 11
74121: PUSH
74122: DOUBLE
74123: LD_INT 1
74125: DEC
74126: ST_TO_ADDR
74127: LD_VAR 0 4
74131: PUSH
74132: FOR_TO
74133: IFFALSE 74180
// begin hc_class = 13 ;
74135: LD_ADDR_OWVAR 28
74139: PUSH
74140: LD_INT 13
74142: ST_TO_ADDR
// hc_gallery =  ;
74143: LD_ADDR_OWVAR 33
74147: PUSH
74148: LD_STRING 
74150: ST_TO_ADDR
// animal := CreateHuman ;
74151: LD_ADDR_VAR 0 12
74155: PUSH
74156: CALL_OW 44
74160: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74161: LD_VAR 0 12
74165: PPUSH
74166: LD_VAR 0 8
74170: PPUSH
74171: LD_INT 0
74173: PPUSH
74174: CALL 75882 0 3
// end ;
74178: GO 74132
74180: POP
74181: POP
// if fishes then
74182: LD_VAR 0 7
74186: IFFALSE 74253
// for i = 1 to fishes do
74188: LD_ADDR_VAR 0 11
74192: PUSH
74193: DOUBLE
74194: LD_INT 1
74196: DEC
74197: ST_TO_ADDR
74198: LD_VAR 0 7
74202: PUSH
74203: FOR_TO
74204: IFFALSE 74251
// begin hc_class = 20 ;
74206: LD_ADDR_OWVAR 28
74210: PUSH
74211: LD_INT 20
74213: ST_TO_ADDR
// hc_gallery =  ;
74214: LD_ADDR_OWVAR 33
74218: PUSH
74219: LD_STRING 
74221: ST_TO_ADDR
// animal := CreateHuman ;
74222: LD_ADDR_VAR 0 12
74226: PUSH
74227: CALL_OW 44
74231: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74232: LD_VAR 0 12
74236: PPUSH
74237: LD_VAR 0 9
74241: PPUSH
74242: LD_INT 0
74244: PPUSH
74245: CALL 75882 0 3
// end ;
74249: GO 74203
74251: POP
74252: POP
// end ;
74253: LD_VAR 0 10
74257: RET
// export function WantHeal ( sci , unit ) ; begin
74258: LD_INT 0
74260: PPUSH
// if GetTaskList ( sci ) > 0 then
74261: LD_VAR 0 1
74265: PPUSH
74266: CALL_OW 437
74270: PUSH
74271: LD_INT 0
74273: GREATER
74274: IFFALSE 74344
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74276: LD_VAR 0 1
74280: PPUSH
74281: CALL_OW 437
74285: PUSH
74286: LD_INT 1
74288: ARRAY
74289: PUSH
74290: LD_INT 1
74292: ARRAY
74293: PUSH
74294: LD_STRING l
74296: EQUAL
74297: PUSH
74298: LD_VAR 0 1
74302: PPUSH
74303: CALL_OW 437
74307: PUSH
74308: LD_INT 1
74310: ARRAY
74311: PUSH
74312: LD_INT 4
74314: ARRAY
74315: PUSH
74316: LD_VAR 0 2
74320: EQUAL
74321: AND
74322: IFFALSE 74334
// result := true else
74324: LD_ADDR_VAR 0 3
74328: PUSH
74329: LD_INT 1
74331: ST_TO_ADDR
74332: GO 74342
// result := false ;
74334: LD_ADDR_VAR 0 3
74338: PUSH
74339: LD_INT 0
74341: ST_TO_ADDR
// end else
74342: GO 74352
// result := false ;
74344: LD_ADDR_VAR 0 3
74348: PUSH
74349: LD_INT 0
74351: ST_TO_ADDR
// end ;
74352: LD_VAR 0 3
74356: RET
// export function HealTarget ( sci ) ; begin
74357: LD_INT 0
74359: PPUSH
// if not sci then
74360: LD_VAR 0 1
74364: NOT
74365: IFFALSE 74369
// exit ;
74367: GO 74434
// result := 0 ;
74369: LD_ADDR_VAR 0 2
74373: PUSH
74374: LD_INT 0
74376: ST_TO_ADDR
// if GetTaskList ( sci ) then
74377: LD_VAR 0 1
74381: PPUSH
74382: CALL_OW 437
74386: IFFALSE 74434
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74388: LD_VAR 0 1
74392: PPUSH
74393: CALL_OW 437
74397: PUSH
74398: LD_INT 1
74400: ARRAY
74401: PUSH
74402: LD_INT 1
74404: ARRAY
74405: PUSH
74406: LD_STRING l
74408: EQUAL
74409: IFFALSE 74434
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74411: LD_ADDR_VAR 0 2
74415: PUSH
74416: LD_VAR 0 1
74420: PPUSH
74421: CALL_OW 437
74425: PUSH
74426: LD_INT 1
74428: ARRAY
74429: PUSH
74430: LD_INT 4
74432: ARRAY
74433: ST_TO_ADDR
// end ;
74434: LD_VAR 0 2
74438: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74439: LD_INT 0
74441: PPUSH
74442: PPUSH
74443: PPUSH
74444: PPUSH
// if not base_units then
74445: LD_VAR 0 1
74449: NOT
74450: IFFALSE 74454
// exit ;
74452: GO 74541
// result := false ;
74454: LD_ADDR_VAR 0 2
74458: PUSH
74459: LD_INT 0
74461: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74462: LD_ADDR_VAR 0 5
74466: PUSH
74467: LD_VAR 0 1
74471: PPUSH
74472: LD_INT 21
74474: PUSH
74475: LD_INT 3
74477: PUSH
74478: EMPTY
74479: LIST
74480: LIST
74481: PPUSH
74482: CALL_OW 72
74486: ST_TO_ADDR
// if not tmp then
74487: LD_VAR 0 5
74491: NOT
74492: IFFALSE 74496
// exit ;
74494: GO 74541
// for i in tmp do
74496: LD_ADDR_VAR 0 3
74500: PUSH
74501: LD_VAR 0 5
74505: PUSH
74506: FOR_IN
74507: IFFALSE 74539
// begin result := EnemyInRange ( i , 22 ) ;
74509: LD_ADDR_VAR 0 2
74513: PUSH
74514: LD_VAR 0 3
74518: PPUSH
74519: LD_INT 22
74521: PPUSH
74522: CALL 72128 0 2
74526: ST_TO_ADDR
// if result then
74527: LD_VAR 0 2
74531: IFFALSE 74537
// exit ;
74533: POP
74534: POP
74535: GO 74541
// end ;
74537: GO 74506
74539: POP
74540: POP
// end ;
74541: LD_VAR 0 2
74545: RET
// export function FilterByTag ( units , tag ) ; begin
74546: LD_INT 0
74548: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74549: LD_ADDR_VAR 0 3
74553: PUSH
74554: LD_VAR 0 1
74558: PPUSH
74559: LD_INT 120
74561: PUSH
74562: LD_VAR 0 2
74566: PUSH
74567: EMPTY
74568: LIST
74569: LIST
74570: PPUSH
74571: CALL_OW 72
74575: ST_TO_ADDR
// end ;
74576: LD_VAR 0 3
74580: RET
// export function IsDriver ( un ) ; begin
74581: LD_INT 0
74583: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74584: LD_ADDR_VAR 0 2
74588: PUSH
74589: LD_VAR 0 1
74593: PUSH
74594: LD_INT 55
74596: PUSH
74597: EMPTY
74598: LIST
74599: PPUSH
74600: CALL_OW 69
74604: IN
74605: ST_TO_ADDR
// end ;
74606: LD_VAR 0 2
74610: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74611: LD_INT 0
74613: PPUSH
74614: PPUSH
// list := [ ] ;
74615: LD_ADDR_VAR 0 5
74619: PUSH
74620: EMPTY
74621: ST_TO_ADDR
// case d of 0 :
74622: LD_VAR 0 3
74626: PUSH
74627: LD_INT 0
74629: DOUBLE
74630: EQUAL
74631: IFTRUE 74635
74633: GO 74768
74635: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74636: LD_ADDR_VAR 0 5
74640: PUSH
74641: LD_VAR 0 1
74645: PUSH
74646: LD_INT 4
74648: MINUS
74649: PUSH
74650: LD_VAR 0 2
74654: PUSH
74655: LD_INT 4
74657: MINUS
74658: PUSH
74659: LD_INT 2
74661: PUSH
74662: EMPTY
74663: LIST
74664: LIST
74665: LIST
74666: PUSH
74667: LD_VAR 0 1
74671: PUSH
74672: LD_INT 3
74674: MINUS
74675: PUSH
74676: LD_VAR 0 2
74680: PUSH
74681: LD_INT 1
74683: PUSH
74684: EMPTY
74685: LIST
74686: LIST
74687: LIST
74688: PUSH
74689: LD_VAR 0 1
74693: PUSH
74694: LD_INT 4
74696: PLUS
74697: PUSH
74698: LD_VAR 0 2
74702: PUSH
74703: LD_INT 4
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: LIST
74710: PUSH
74711: LD_VAR 0 1
74715: PUSH
74716: LD_INT 3
74718: PLUS
74719: PUSH
74720: LD_VAR 0 2
74724: PUSH
74725: LD_INT 3
74727: PLUS
74728: PUSH
74729: LD_INT 5
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: LIST
74736: PUSH
74737: LD_VAR 0 1
74741: PUSH
74742: LD_VAR 0 2
74746: PUSH
74747: LD_INT 4
74749: PLUS
74750: PUSH
74751: LD_INT 0
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: LIST
74758: PUSH
74759: EMPTY
74760: LIST
74761: LIST
74762: LIST
74763: LIST
74764: LIST
74765: ST_TO_ADDR
// end ; 1 :
74766: GO 75466
74768: LD_INT 1
74770: DOUBLE
74771: EQUAL
74772: IFTRUE 74776
74774: GO 74909
74776: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74777: LD_ADDR_VAR 0 5
74781: PUSH
74782: LD_VAR 0 1
74786: PUSH
74787: LD_VAR 0 2
74791: PUSH
74792: LD_INT 4
74794: MINUS
74795: PUSH
74796: LD_INT 3
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: LIST
74803: PUSH
74804: LD_VAR 0 1
74808: PUSH
74809: LD_INT 3
74811: MINUS
74812: PUSH
74813: LD_VAR 0 2
74817: PUSH
74818: LD_INT 3
74820: MINUS
74821: PUSH
74822: LD_INT 2
74824: PUSH
74825: EMPTY
74826: LIST
74827: LIST
74828: LIST
74829: PUSH
74830: LD_VAR 0 1
74834: PUSH
74835: LD_INT 4
74837: MINUS
74838: PUSH
74839: LD_VAR 0 2
74843: PUSH
74844: LD_INT 1
74846: PUSH
74847: EMPTY
74848: LIST
74849: LIST
74850: LIST
74851: PUSH
74852: LD_VAR 0 1
74856: PUSH
74857: LD_VAR 0 2
74861: PUSH
74862: LD_INT 3
74864: PLUS
74865: PUSH
74866: LD_INT 0
74868: PUSH
74869: EMPTY
74870: LIST
74871: LIST
74872: LIST
74873: PUSH
74874: LD_VAR 0 1
74878: PUSH
74879: LD_INT 4
74881: PLUS
74882: PUSH
74883: LD_VAR 0 2
74887: PUSH
74888: LD_INT 4
74890: PLUS
74891: PUSH
74892: LD_INT 5
74894: PUSH
74895: EMPTY
74896: LIST
74897: LIST
74898: LIST
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: LIST
74906: ST_TO_ADDR
// end ; 2 :
74907: GO 75466
74909: LD_INT 2
74911: DOUBLE
74912: EQUAL
74913: IFTRUE 74917
74915: GO 75046
74917: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74918: LD_ADDR_VAR 0 5
74922: PUSH
74923: LD_VAR 0 1
74927: PUSH
74928: LD_VAR 0 2
74932: PUSH
74933: LD_INT 3
74935: MINUS
74936: PUSH
74937: LD_INT 3
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: LIST
74944: PUSH
74945: LD_VAR 0 1
74949: PUSH
74950: LD_INT 4
74952: PLUS
74953: PUSH
74954: LD_VAR 0 2
74958: PUSH
74959: LD_INT 4
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: LIST
74966: PUSH
74967: LD_VAR 0 1
74971: PUSH
74972: LD_VAR 0 2
74976: PUSH
74977: LD_INT 4
74979: PLUS
74980: PUSH
74981: LD_INT 0
74983: PUSH
74984: EMPTY
74985: LIST
74986: LIST
74987: LIST
74988: PUSH
74989: LD_VAR 0 1
74993: PUSH
74994: LD_INT 3
74996: MINUS
74997: PUSH
74998: LD_VAR 0 2
75002: PUSH
75003: LD_INT 1
75005: PUSH
75006: EMPTY
75007: LIST
75008: LIST
75009: LIST
75010: PUSH
75011: LD_VAR 0 1
75015: PUSH
75016: LD_INT 4
75018: MINUS
75019: PUSH
75020: LD_VAR 0 2
75024: PUSH
75025: LD_INT 4
75027: MINUS
75028: PUSH
75029: LD_INT 2
75031: PUSH
75032: EMPTY
75033: LIST
75034: LIST
75035: LIST
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: LIST
75041: LIST
75042: LIST
75043: ST_TO_ADDR
// end ; 3 :
75044: GO 75466
75046: LD_INT 3
75048: DOUBLE
75049: EQUAL
75050: IFTRUE 75054
75052: GO 75187
75054: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75055: LD_ADDR_VAR 0 5
75059: PUSH
75060: LD_VAR 0 1
75064: PUSH
75065: LD_INT 3
75067: PLUS
75068: PUSH
75069: LD_VAR 0 2
75073: PUSH
75074: LD_INT 4
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: LIST
75081: PUSH
75082: LD_VAR 0 1
75086: PUSH
75087: LD_INT 4
75089: PLUS
75090: PUSH
75091: LD_VAR 0 2
75095: PUSH
75096: LD_INT 4
75098: PLUS
75099: PUSH
75100: LD_INT 5
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: LIST
75107: PUSH
75108: LD_VAR 0 1
75112: PUSH
75113: LD_INT 4
75115: MINUS
75116: PUSH
75117: LD_VAR 0 2
75121: PUSH
75122: LD_INT 1
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: LIST
75129: PUSH
75130: LD_VAR 0 1
75134: PUSH
75135: LD_VAR 0 2
75139: PUSH
75140: LD_INT 4
75142: MINUS
75143: PUSH
75144: LD_INT 3
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: LIST
75151: PUSH
75152: LD_VAR 0 1
75156: PUSH
75157: LD_INT 3
75159: MINUS
75160: PUSH
75161: LD_VAR 0 2
75165: PUSH
75166: LD_INT 3
75168: MINUS
75169: PUSH
75170: LD_INT 2
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: LIST
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: ST_TO_ADDR
// end ; 4 :
75185: GO 75466
75187: LD_INT 4
75189: DOUBLE
75190: EQUAL
75191: IFTRUE 75195
75193: GO 75328
75195: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75196: LD_ADDR_VAR 0 5
75200: PUSH
75201: LD_VAR 0 1
75205: PUSH
75206: LD_VAR 0 2
75210: PUSH
75211: LD_INT 4
75213: PLUS
75214: PUSH
75215: LD_INT 0
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: LIST
75222: PUSH
75223: LD_VAR 0 1
75227: PUSH
75228: LD_INT 3
75230: PLUS
75231: PUSH
75232: LD_VAR 0 2
75236: PUSH
75237: LD_INT 3
75239: PLUS
75240: PUSH
75241: LD_INT 5
75243: PUSH
75244: EMPTY
75245: LIST
75246: LIST
75247: LIST
75248: PUSH
75249: LD_VAR 0 1
75253: PUSH
75254: LD_INT 4
75256: PLUS
75257: PUSH
75258: LD_VAR 0 2
75262: PUSH
75263: LD_INT 4
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: LIST
75270: PUSH
75271: LD_VAR 0 1
75275: PUSH
75276: LD_VAR 0 2
75280: PUSH
75281: LD_INT 3
75283: MINUS
75284: PUSH
75285: LD_INT 3
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: LIST
75292: PUSH
75293: LD_VAR 0 1
75297: PUSH
75298: LD_INT 4
75300: MINUS
75301: PUSH
75302: LD_VAR 0 2
75306: PUSH
75307: LD_INT 4
75309: MINUS
75310: PUSH
75311: LD_INT 2
75313: PUSH
75314: EMPTY
75315: LIST
75316: LIST
75317: LIST
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: ST_TO_ADDR
// end ; 5 :
75326: GO 75466
75328: LD_INT 5
75330: DOUBLE
75331: EQUAL
75332: IFTRUE 75336
75334: GO 75465
75336: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75337: LD_ADDR_VAR 0 5
75341: PUSH
75342: LD_VAR 0 1
75346: PUSH
75347: LD_INT 4
75349: MINUS
75350: PUSH
75351: LD_VAR 0 2
75355: PUSH
75356: LD_INT 1
75358: PUSH
75359: EMPTY
75360: LIST
75361: LIST
75362: LIST
75363: PUSH
75364: LD_VAR 0 1
75368: PUSH
75369: LD_VAR 0 2
75373: PUSH
75374: LD_INT 4
75376: MINUS
75377: PUSH
75378: LD_INT 3
75380: PUSH
75381: EMPTY
75382: LIST
75383: LIST
75384: LIST
75385: PUSH
75386: LD_VAR 0 1
75390: PUSH
75391: LD_INT 4
75393: PLUS
75394: PUSH
75395: LD_VAR 0 2
75399: PUSH
75400: LD_INT 4
75402: PLUS
75403: PUSH
75404: LD_INT 5
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: LIST
75411: PUSH
75412: LD_VAR 0 1
75416: PUSH
75417: LD_INT 3
75419: PLUS
75420: PUSH
75421: LD_VAR 0 2
75425: PUSH
75426: LD_INT 4
75428: PUSH
75429: EMPTY
75430: LIST
75431: LIST
75432: LIST
75433: PUSH
75434: LD_VAR 0 1
75438: PUSH
75439: LD_VAR 0 2
75443: PUSH
75444: LD_INT 3
75446: PLUS
75447: PUSH
75448: LD_INT 0
75450: PUSH
75451: EMPTY
75452: LIST
75453: LIST
75454: LIST
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: ST_TO_ADDR
// end ; end ;
75463: GO 75466
75465: POP
// result := list ;
75466: LD_ADDR_VAR 0 4
75470: PUSH
75471: LD_VAR 0 5
75475: ST_TO_ADDR
// end ;
75476: LD_VAR 0 4
75480: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75481: LD_INT 0
75483: PPUSH
75484: PPUSH
75485: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75486: LD_VAR 0 1
75490: NOT
75491: PUSH
75492: LD_VAR 0 2
75496: PUSH
75497: LD_INT 1
75499: PUSH
75500: LD_INT 2
75502: PUSH
75503: LD_INT 3
75505: PUSH
75506: LD_INT 4
75508: PUSH
75509: EMPTY
75510: LIST
75511: LIST
75512: LIST
75513: LIST
75514: IN
75515: NOT
75516: OR
75517: IFFALSE 75521
// exit ;
75519: GO 75604
// tmp := [ ] ;
75521: LD_ADDR_VAR 0 5
75525: PUSH
75526: EMPTY
75527: ST_TO_ADDR
// for i in units do
75528: LD_ADDR_VAR 0 4
75532: PUSH
75533: LD_VAR 0 1
75537: PUSH
75538: FOR_IN
75539: IFFALSE 75573
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75541: LD_ADDR_VAR 0 5
75545: PUSH
75546: LD_VAR 0 5
75550: PPUSH
75551: LD_VAR 0 4
75555: PPUSH
75556: LD_VAR 0 2
75560: PPUSH
75561: CALL_OW 259
75565: PPUSH
75566: CALL 76977 0 2
75570: ST_TO_ADDR
75571: GO 75538
75573: POP
75574: POP
// if not tmp then
75575: LD_VAR 0 5
75579: NOT
75580: IFFALSE 75584
// exit ;
75582: GO 75604
// result := SortListByListDesc ( units , tmp ) ;
75584: LD_ADDR_VAR 0 3
75588: PUSH
75589: LD_VAR 0 1
75593: PPUSH
75594: LD_VAR 0 5
75598: PPUSH
75599: CALL_OW 77
75603: ST_TO_ADDR
// end ;
75604: LD_VAR 0 3
75608: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75609: LD_INT 0
75611: PPUSH
75612: PPUSH
75613: PPUSH
// result := false ;
75614: LD_ADDR_VAR 0 3
75618: PUSH
75619: LD_INT 0
75621: ST_TO_ADDR
// if not building then
75622: LD_VAR 0 2
75626: NOT
75627: IFFALSE 75631
// exit ;
75629: GO 75769
// x := GetX ( building ) ;
75631: LD_ADDR_VAR 0 4
75635: PUSH
75636: LD_VAR 0 2
75640: PPUSH
75641: CALL_OW 250
75645: ST_TO_ADDR
// y := GetY ( building ) ;
75646: LD_ADDR_VAR 0 5
75650: PUSH
75651: LD_VAR 0 2
75655: PPUSH
75656: CALL_OW 251
75660: ST_TO_ADDR
// if not x or not y then
75661: LD_VAR 0 4
75665: NOT
75666: PUSH
75667: LD_VAR 0 5
75671: NOT
75672: OR
75673: IFFALSE 75677
// exit ;
75675: GO 75769
// if GetTaskList ( unit ) then
75677: LD_VAR 0 1
75681: PPUSH
75682: CALL_OW 437
75686: IFFALSE 75769
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75688: LD_STRING e
75690: PUSH
75691: LD_VAR 0 1
75695: PPUSH
75696: CALL_OW 437
75700: PUSH
75701: LD_INT 1
75703: ARRAY
75704: PUSH
75705: LD_INT 1
75707: ARRAY
75708: EQUAL
75709: PUSH
75710: LD_VAR 0 4
75714: PUSH
75715: LD_VAR 0 1
75719: PPUSH
75720: CALL_OW 437
75724: PUSH
75725: LD_INT 1
75727: ARRAY
75728: PUSH
75729: LD_INT 2
75731: ARRAY
75732: EQUAL
75733: AND
75734: PUSH
75735: LD_VAR 0 5
75739: PUSH
75740: LD_VAR 0 1
75744: PPUSH
75745: CALL_OW 437
75749: PUSH
75750: LD_INT 1
75752: ARRAY
75753: PUSH
75754: LD_INT 3
75756: ARRAY
75757: EQUAL
75758: AND
75759: IFFALSE 75769
// result := true end ;
75761: LD_ADDR_VAR 0 3
75765: PUSH
75766: LD_INT 1
75768: ST_TO_ADDR
// end ;
75769: LD_VAR 0 3
75773: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75774: LD_INT 0
75776: PPUSH
// result := false ;
75777: LD_ADDR_VAR 0 4
75781: PUSH
75782: LD_INT 0
75784: ST_TO_ADDR
// if GetTaskList ( unit ) then
75785: LD_VAR 0 1
75789: PPUSH
75790: CALL_OW 437
75794: IFFALSE 75877
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75796: LD_STRING M
75798: PUSH
75799: LD_VAR 0 1
75803: PPUSH
75804: CALL_OW 437
75808: PUSH
75809: LD_INT 1
75811: ARRAY
75812: PUSH
75813: LD_INT 1
75815: ARRAY
75816: EQUAL
75817: PUSH
75818: LD_VAR 0 2
75822: PUSH
75823: LD_VAR 0 1
75827: PPUSH
75828: CALL_OW 437
75832: PUSH
75833: LD_INT 1
75835: ARRAY
75836: PUSH
75837: LD_INT 2
75839: ARRAY
75840: EQUAL
75841: AND
75842: PUSH
75843: LD_VAR 0 3
75847: PUSH
75848: LD_VAR 0 1
75852: PPUSH
75853: CALL_OW 437
75857: PUSH
75858: LD_INT 1
75860: ARRAY
75861: PUSH
75862: LD_INT 3
75864: ARRAY
75865: EQUAL
75866: AND
75867: IFFALSE 75877
// result := true ;
75869: LD_ADDR_VAR 0 4
75873: PUSH
75874: LD_INT 1
75876: ST_TO_ADDR
// end ; end ;
75877: LD_VAR 0 4
75881: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75882: LD_INT 0
75884: PPUSH
75885: PPUSH
75886: PPUSH
75887: PPUSH
// if not unit or not area then
75888: LD_VAR 0 1
75892: NOT
75893: PUSH
75894: LD_VAR 0 2
75898: NOT
75899: OR
75900: IFFALSE 75904
// exit ;
75902: GO 76080
// tmp := AreaToList ( area , i ) ;
75904: LD_ADDR_VAR 0 6
75908: PUSH
75909: LD_VAR 0 2
75913: PPUSH
75914: LD_VAR 0 5
75918: PPUSH
75919: CALL_OW 517
75923: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75924: LD_ADDR_VAR 0 5
75928: PUSH
75929: DOUBLE
75930: LD_INT 1
75932: DEC
75933: ST_TO_ADDR
75934: LD_VAR 0 6
75938: PUSH
75939: LD_INT 1
75941: ARRAY
75942: PUSH
75943: FOR_TO
75944: IFFALSE 76078
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75946: LD_ADDR_VAR 0 7
75950: PUSH
75951: LD_VAR 0 6
75955: PUSH
75956: LD_INT 1
75958: ARRAY
75959: PUSH
75960: LD_VAR 0 5
75964: ARRAY
75965: PUSH
75966: LD_VAR 0 6
75970: PUSH
75971: LD_INT 2
75973: ARRAY
75974: PUSH
75975: LD_VAR 0 5
75979: ARRAY
75980: PUSH
75981: EMPTY
75982: LIST
75983: LIST
75984: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
75985: LD_INT 92
75987: PUSH
75988: LD_VAR 0 7
75992: PUSH
75993: LD_INT 1
75995: ARRAY
75996: PUSH
75997: LD_VAR 0 7
76001: PUSH
76002: LD_INT 2
76004: ARRAY
76005: PUSH
76006: LD_INT 2
76008: PUSH
76009: EMPTY
76010: LIST
76011: LIST
76012: LIST
76013: LIST
76014: PPUSH
76015: CALL_OW 69
76019: PUSH
76020: LD_INT 0
76022: EQUAL
76023: IFFALSE 76076
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76025: LD_VAR 0 1
76029: PPUSH
76030: LD_VAR 0 7
76034: PUSH
76035: LD_INT 1
76037: ARRAY
76038: PPUSH
76039: LD_VAR 0 7
76043: PUSH
76044: LD_INT 2
76046: ARRAY
76047: PPUSH
76048: LD_VAR 0 3
76052: PPUSH
76053: CALL_OW 48
// result := IsPlaced ( unit ) ;
76057: LD_ADDR_VAR 0 4
76061: PUSH
76062: LD_VAR 0 1
76066: PPUSH
76067: CALL_OW 305
76071: ST_TO_ADDR
// exit ;
76072: POP
76073: POP
76074: GO 76080
// end ; end ;
76076: GO 75943
76078: POP
76079: POP
// end ;
76080: LD_VAR 0 4
76084: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76085: LD_INT 0
76087: PPUSH
76088: PPUSH
76089: PPUSH
// if not side or side > 8 then
76090: LD_VAR 0 1
76094: NOT
76095: PUSH
76096: LD_VAR 0 1
76100: PUSH
76101: LD_INT 8
76103: GREATER
76104: OR
76105: IFFALSE 76109
// exit ;
76107: GO 76296
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76109: LD_ADDR_VAR 0 4
76113: PUSH
76114: LD_INT 22
76116: PUSH
76117: LD_VAR 0 1
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: PUSH
76126: LD_INT 21
76128: PUSH
76129: LD_INT 3
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: PPUSH
76140: CALL_OW 69
76144: ST_TO_ADDR
// if not tmp then
76145: LD_VAR 0 4
76149: NOT
76150: IFFALSE 76154
// exit ;
76152: GO 76296
// enable_addtolog := true ;
76154: LD_ADDR_OWVAR 81
76158: PUSH
76159: LD_INT 1
76161: ST_TO_ADDR
// AddToLog ( [ ) ;
76162: LD_STRING [
76164: PPUSH
76165: CALL_OW 561
// for i in tmp do
76169: LD_ADDR_VAR 0 3
76173: PUSH
76174: LD_VAR 0 4
76178: PUSH
76179: FOR_IN
76180: IFFALSE 76287
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76182: LD_STRING [
76184: PUSH
76185: LD_VAR 0 3
76189: PPUSH
76190: CALL_OW 266
76194: STR
76195: PUSH
76196: LD_STRING , 
76198: STR
76199: PUSH
76200: LD_VAR 0 3
76204: PPUSH
76205: CALL_OW 250
76209: STR
76210: PUSH
76211: LD_STRING , 
76213: STR
76214: PUSH
76215: LD_VAR 0 3
76219: PPUSH
76220: CALL_OW 251
76224: STR
76225: PUSH
76226: LD_STRING , 
76228: STR
76229: PUSH
76230: LD_VAR 0 3
76234: PPUSH
76235: CALL_OW 254
76239: STR
76240: PUSH
76241: LD_STRING , 
76243: STR
76244: PUSH
76245: LD_VAR 0 3
76249: PPUSH
76250: LD_INT 1
76252: PPUSH
76253: CALL_OW 268
76257: STR
76258: PUSH
76259: LD_STRING , 
76261: STR
76262: PUSH
76263: LD_VAR 0 3
76267: PPUSH
76268: LD_INT 2
76270: PPUSH
76271: CALL_OW 268
76275: STR
76276: PUSH
76277: LD_STRING ],
76279: STR
76280: PPUSH
76281: CALL_OW 561
// end ;
76285: GO 76179
76287: POP
76288: POP
// AddToLog ( ]; ) ;
76289: LD_STRING ];
76291: PPUSH
76292: CALL_OW 561
// end ;
76296: LD_VAR 0 2
76300: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76301: LD_INT 0
76303: PPUSH
76304: PPUSH
76305: PPUSH
76306: PPUSH
76307: PPUSH
// if not area or not rate or not max then
76308: LD_VAR 0 1
76312: NOT
76313: PUSH
76314: LD_VAR 0 2
76318: NOT
76319: OR
76320: PUSH
76321: LD_VAR 0 4
76325: NOT
76326: OR
76327: IFFALSE 76331
// exit ;
76329: GO 76520
// while 1 do
76331: LD_INT 1
76333: IFFALSE 76520
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76335: LD_ADDR_VAR 0 9
76339: PUSH
76340: LD_VAR 0 1
76344: PPUSH
76345: LD_INT 1
76347: PPUSH
76348: CALL_OW 287
76352: PUSH
76353: LD_INT 10
76355: MUL
76356: ST_TO_ADDR
// r := rate / 10 ;
76357: LD_ADDR_VAR 0 7
76361: PUSH
76362: LD_VAR 0 2
76366: PUSH
76367: LD_INT 10
76369: DIVREAL
76370: ST_TO_ADDR
// time := 1 1$00 ;
76371: LD_ADDR_VAR 0 8
76375: PUSH
76376: LD_INT 2100
76378: ST_TO_ADDR
// if amount < min then
76379: LD_VAR 0 9
76383: PUSH
76384: LD_VAR 0 3
76388: LESS
76389: IFFALSE 76407
// r := r * 2 else
76391: LD_ADDR_VAR 0 7
76395: PUSH
76396: LD_VAR 0 7
76400: PUSH
76401: LD_INT 2
76403: MUL
76404: ST_TO_ADDR
76405: GO 76433
// if amount > max then
76407: LD_VAR 0 9
76411: PUSH
76412: LD_VAR 0 4
76416: GREATER
76417: IFFALSE 76433
// r := r / 2 ;
76419: LD_ADDR_VAR 0 7
76423: PUSH
76424: LD_VAR 0 7
76428: PUSH
76429: LD_INT 2
76431: DIVREAL
76432: ST_TO_ADDR
// time := time / r ;
76433: LD_ADDR_VAR 0 8
76437: PUSH
76438: LD_VAR 0 8
76442: PUSH
76443: LD_VAR 0 7
76447: DIVREAL
76448: ST_TO_ADDR
// if time < 0 then
76449: LD_VAR 0 8
76453: PUSH
76454: LD_INT 0
76456: LESS
76457: IFFALSE 76474
// time := time * - 1 ;
76459: LD_ADDR_VAR 0 8
76463: PUSH
76464: LD_VAR 0 8
76468: PUSH
76469: LD_INT 1
76471: NEG
76472: MUL
76473: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76474: LD_VAR 0 8
76478: PUSH
76479: LD_INT 35
76481: PPUSH
76482: LD_INT 875
76484: PPUSH
76485: CALL_OW 12
76489: PLUS
76490: PPUSH
76491: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76495: LD_INT 1
76497: PPUSH
76498: LD_INT 5
76500: PPUSH
76501: CALL_OW 12
76505: PPUSH
76506: LD_VAR 0 1
76510: PPUSH
76511: LD_INT 1
76513: PPUSH
76514: CALL_OW 55
// end ;
76518: GO 76331
// end ;
76520: LD_VAR 0 5
76524: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76525: LD_INT 0
76527: PPUSH
76528: PPUSH
76529: PPUSH
76530: PPUSH
76531: PPUSH
76532: PPUSH
76533: PPUSH
76534: PPUSH
// if not turrets or not factories then
76535: LD_VAR 0 1
76539: NOT
76540: PUSH
76541: LD_VAR 0 2
76545: NOT
76546: OR
76547: IFFALSE 76551
// exit ;
76549: GO 76858
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76551: LD_ADDR_VAR 0 10
76555: PUSH
76556: LD_INT 5
76558: PUSH
76559: LD_INT 6
76561: PUSH
76562: EMPTY
76563: LIST
76564: LIST
76565: PUSH
76566: LD_INT 2
76568: PUSH
76569: LD_INT 4
76571: PUSH
76572: EMPTY
76573: LIST
76574: LIST
76575: PUSH
76576: LD_INT 3
76578: PUSH
76579: LD_INT 5
76581: PUSH
76582: EMPTY
76583: LIST
76584: LIST
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: LIST
76590: PUSH
76591: LD_INT 24
76593: PUSH
76594: LD_INT 25
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: PUSH
76601: LD_INT 23
76603: PUSH
76604: LD_INT 27
76606: PUSH
76607: EMPTY
76608: LIST
76609: LIST
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: PUSH
76615: LD_INT 42
76617: PUSH
76618: LD_INT 43
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: LD_INT 44
76627: PUSH
76628: LD_INT 46
76630: PUSH
76631: EMPTY
76632: LIST
76633: LIST
76634: PUSH
76635: LD_INT 45
76637: PUSH
76638: LD_INT 47
76640: PUSH
76641: EMPTY
76642: LIST
76643: LIST
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: LIST
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: LIST
76654: ST_TO_ADDR
// result := [ ] ;
76655: LD_ADDR_VAR 0 3
76659: PUSH
76660: EMPTY
76661: ST_TO_ADDR
// for i in turrets do
76662: LD_ADDR_VAR 0 4
76666: PUSH
76667: LD_VAR 0 1
76671: PUSH
76672: FOR_IN
76673: IFFALSE 76856
// begin nat := GetNation ( i ) ;
76675: LD_ADDR_VAR 0 7
76679: PUSH
76680: LD_VAR 0 4
76684: PPUSH
76685: CALL_OW 248
76689: ST_TO_ADDR
// weapon := 0 ;
76690: LD_ADDR_VAR 0 8
76694: PUSH
76695: LD_INT 0
76697: ST_TO_ADDR
// if not nat then
76698: LD_VAR 0 7
76702: NOT
76703: IFFALSE 76707
// continue ;
76705: GO 76672
// for j in list [ nat ] do
76707: LD_ADDR_VAR 0 5
76711: PUSH
76712: LD_VAR 0 10
76716: PUSH
76717: LD_VAR 0 7
76721: ARRAY
76722: PUSH
76723: FOR_IN
76724: IFFALSE 76765
// if GetBWeapon ( i ) = j [ 1 ] then
76726: LD_VAR 0 4
76730: PPUSH
76731: CALL_OW 269
76735: PUSH
76736: LD_VAR 0 5
76740: PUSH
76741: LD_INT 1
76743: ARRAY
76744: EQUAL
76745: IFFALSE 76763
// begin weapon := j [ 2 ] ;
76747: LD_ADDR_VAR 0 8
76751: PUSH
76752: LD_VAR 0 5
76756: PUSH
76757: LD_INT 2
76759: ARRAY
76760: ST_TO_ADDR
// break ;
76761: GO 76765
// end ;
76763: GO 76723
76765: POP
76766: POP
// if not weapon then
76767: LD_VAR 0 8
76771: NOT
76772: IFFALSE 76776
// continue ;
76774: GO 76672
// for k in factories do
76776: LD_ADDR_VAR 0 6
76780: PUSH
76781: LD_VAR 0 2
76785: PUSH
76786: FOR_IN
76787: IFFALSE 76852
// begin weapons := AvailableWeaponList ( k ) ;
76789: LD_ADDR_VAR 0 9
76793: PUSH
76794: LD_VAR 0 6
76798: PPUSH
76799: CALL_OW 478
76803: ST_TO_ADDR
// if not weapons then
76804: LD_VAR 0 9
76808: NOT
76809: IFFALSE 76813
// continue ;
76811: GO 76786
// if weapon in weapons then
76813: LD_VAR 0 8
76817: PUSH
76818: LD_VAR 0 9
76822: IN
76823: IFFALSE 76850
// begin result := [ i , weapon ] ;
76825: LD_ADDR_VAR 0 3
76829: PUSH
76830: LD_VAR 0 4
76834: PUSH
76835: LD_VAR 0 8
76839: PUSH
76840: EMPTY
76841: LIST
76842: LIST
76843: ST_TO_ADDR
// exit ;
76844: POP
76845: POP
76846: POP
76847: POP
76848: GO 76858
// end ; end ;
76850: GO 76786
76852: POP
76853: POP
// end ;
76854: GO 76672
76856: POP
76857: POP
// end ;
76858: LD_VAR 0 3
76862: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76863: LD_INT 0
76865: PPUSH
// if not side or side > 8 then
76866: LD_VAR 0 3
76870: NOT
76871: PUSH
76872: LD_VAR 0 3
76876: PUSH
76877: LD_INT 8
76879: GREATER
76880: OR
76881: IFFALSE 76885
// exit ;
76883: GO 76944
// if not range then
76885: LD_VAR 0 4
76889: NOT
76890: IFFALSE 76901
// range := - 12 ;
76892: LD_ADDR_VAR 0 4
76896: PUSH
76897: LD_INT 12
76899: NEG
76900: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76901: LD_VAR 0 1
76905: PPUSH
76906: LD_VAR 0 2
76910: PPUSH
76911: LD_VAR 0 3
76915: PPUSH
76916: LD_VAR 0 4
76920: PPUSH
76921: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76925: LD_VAR 0 1
76929: PPUSH
76930: LD_VAR 0 2
76934: PPUSH
76935: LD_VAR 0 3
76939: PPUSH
76940: CALL_OW 331
// end ;
76944: LD_VAR 0 5
76948: RET
// export function Video ( mode ) ; begin
76949: LD_INT 0
76951: PPUSH
// ingame_video = mode ;
76952: LD_ADDR_OWVAR 52
76956: PUSH
76957: LD_VAR 0 1
76961: ST_TO_ADDR
// interface_hidden = mode ;
76962: LD_ADDR_OWVAR 54
76966: PUSH
76967: LD_VAR 0 1
76971: ST_TO_ADDR
// end ;
76972: LD_VAR 0 2
76976: RET
// export function Join ( array , element ) ; begin
76977: LD_INT 0
76979: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76980: LD_ADDR_VAR 0 3
76984: PUSH
76985: LD_VAR 0 1
76989: PPUSH
76990: LD_VAR 0 1
76994: PUSH
76995: LD_INT 1
76997: PLUS
76998: PPUSH
76999: LD_VAR 0 2
77003: PPUSH
77004: CALL_OW 1
77008: ST_TO_ADDR
// end ;
77009: LD_VAR 0 3
77013: RET
// export function JoinUnion ( array , element ) ; begin
77014: LD_INT 0
77016: PPUSH
// result := array union element ;
77017: LD_ADDR_VAR 0 3
77021: PUSH
77022: LD_VAR 0 1
77026: PUSH
77027: LD_VAR 0 2
77031: UNION
77032: ST_TO_ADDR
// end ;
77033: LD_VAR 0 3
77037: RET
// export function GetBehemoths ( side ) ; begin
77038: LD_INT 0
77040: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77041: LD_ADDR_VAR 0 2
77045: PUSH
77046: LD_INT 22
77048: PUSH
77049: LD_VAR 0 1
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: PUSH
77058: LD_INT 31
77060: PUSH
77061: LD_INT 25
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: PUSH
77068: EMPTY
77069: LIST
77070: LIST
77071: PPUSH
77072: CALL_OW 69
77076: ST_TO_ADDR
// end ;
77077: LD_VAR 0 2
77081: RET
// export function Shuffle ( array ) ; var i , index ; begin
77082: LD_INT 0
77084: PPUSH
77085: PPUSH
77086: PPUSH
// result := [ ] ;
77087: LD_ADDR_VAR 0 2
77091: PUSH
77092: EMPTY
77093: ST_TO_ADDR
// if not array then
77094: LD_VAR 0 1
77098: NOT
77099: IFFALSE 77103
// exit ;
77101: GO 77202
// Randomize ;
77103: CALL_OW 10
// for i = array downto 1 do
77107: LD_ADDR_VAR 0 3
77111: PUSH
77112: DOUBLE
77113: LD_VAR 0 1
77117: INC
77118: ST_TO_ADDR
77119: LD_INT 1
77121: PUSH
77122: FOR_DOWNTO
77123: IFFALSE 77200
// begin index := rand ( 1 , array ) ;
77125: LD_ADDR_VAR 0 4
77129: PUSH
77130: LD_INT 1
77132: PPUSH
77133: LD_VAR 0 1
77137: PPUSH
77138: CALL_OW 12
77142: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77143: LD_ADDR_VAR 0 2
77147: PUSH
77148: LD_VAR 0 2
77152: PPUSH
77153: LD_VAR 0 2
77157: PUSH
77158: LD_INT 1
77160: PLUS
77161: PPUSH
77162: LD_VAR 0 1
77166: PUSH
77167: LD_VAR 0 4
77171: ARRAY
77172: PPUSH
77173: CALL_OW 2
77177: ST_TO_ADDR
// array := Delete ( array , index ) ;
77178: LD_ADDR_VAR 0 1
77182: PUSH
77183: LD_VAR 0 1
77187: PPUSH
77188: LD_VAR 0 4
77192: PPUSH
77193: CALL_OW 3
77197: ST_TO_ADDR
// end ;
77198: GO 77122
77200: POP
77201: POP
// end ;
77202: LD_VAR 0 2
77206: RET
// export function GetBaseMaterials ( base ) ; begin
77207: LD_INT 0
77209: PPUSH
// result := [ 0 , 0 , 0 ] ;
77210: LD_ADDR_VAR 0 2
77214: PUSH
77215: LD_INT 0
77217: PUSH
77218: LD_INT 0
77220: PUSH
77221: LD_INT 0
77223: PUSH
77224: EMPTY
77225: LIST
77226: LIST
77227: LIST
77228: ST_TO_ADDR
// if not base then
77229: LD_VAR 0 1
77233: NOT
77234: IFFALSE 77238
// exit ;
77236: GO 77287
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77238: LD_ADDR_VAR 0 2
77242: PUSH
77243: LD_VAR 0 1
77247: PPUSH
77248: LD_INT 1
77250: PPUSH
77251: CALL_OW 275
77255: PUSH
77256: LD_VAR 0 1
77260: PPUSH
77261: LD_INT 2
77263: PPUSH
77264: CALL_OW 275
77268: PUSH
77269: LD_VAR 0 1
77273: PPUSH
77274: LD_INT 3
77276: PPUSH
77277: CALL_OW 275
77281: PUSH
77282: EMPTY
77283: LIST
77284: LIST
77285: LIST
77286: ST_TO_ADDR
// end ;
77287: LD_VAR 0 2
77291: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77292: LD_INT 0
77294: PPUSH
77295: PPUSH
// result := array ;
77296: LD_ADDR_VAR 0 3
77300: PUSH
77301: LD_VAR 0 1
77305: ST_TO_ADDR
// if size >= result then
77306: LD_VAR 0 2
77310: PUSH
77311: LD_VAR 0 3
77315: GREATEREQUAL
77316: IFFALSE 77320
// exit ;
77318: GO 77370
// if size then
77320: LD_VAR 0 2
77324: IFFALSE 77370
// for i := array downto size do
77326: LD_ADDR_VAR 0 4
77330: PUSH
77331: DOUBLE
77332: LD_VAR 0 1
77336: INC
77337: ST_TO_ADDR
77338: LD_VAR 0 2
77342: PUSH
77343: FOR_DOWNTO
77344: IFFALSE 77368
// result := Delete ( result , result ) ;
77346: LD_ADDR_VAR 0 3
77350: PUSH
77351: LD_VAR 0 3
77355: PPUSH
77356: LD_VAR 0 3
77360: PPUSH
77361: CALL_OW 3
77365: ST_TO_ADDR
77366: GO 77343
77368: POP
77369: POP
// end ;
77370: LD_VAR 0 3
77374: RET
// export function ComExit ( unit ) ; var tmp ; begin
77375: LD_INT 0
77377: PPUSH
77378: PPUSH
// if not IsInUnit ( unit ) then
77379: LD_VAR 0 1
77383: PPUSH
77384: CALL_OW 310
77388: NOT
77389: IFFALSE 77393
// exit ;
77391: GO 77453
// tmp := IsInUnit ( unit ) ;
77393: LD_ADDR_VAR 0 3
77397: PUSH
77398: LD_VAR 0 1
77402: PPUSH
77403: CALL_OW 310
77407: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77408: LD_VAR 0 3
77412: PPUSH
77413: CALL_OW 247
77417: PUSH
77418: LD_INT 2
77420: EQUAL
77421: IFFALSE 77434
// ComExitVehicle ( unit ) else
77423: LD_VAR 0 1
77427: PPUSH
77428: CALL_OW 121
77432: GO 77443
// ComExitBuilding ( unit ) ;
77434: LD_VAR 0 1
77438: PPUSH
77439: CALL_OW 122
// result := tmp ;
77443: LD_ADDR_VAR 0 2
77447: PUSH
77448: LD_VAR 0 3
77452: ST_TO_ADDR
// end ;
77453: LD_VAR 0 2
77457: RET
// export function ComExitAll ( units ) ; var i ; begin
77458: LD_INT 0
77460: PPUSH
77461: PPUSH
// if not units then
77462: LD_VAR 0 1
77466: NOT
77467: IFFALSE 77471
// exit ;
77469: GO 77497
// for i in units do
77471: LD_ADDR_VAR 0 3
77475: PUSH
77476: LD_VAR 0 1
77480: PUSH
77481: FOR_IN
77482: IFFALSE 77495
// ComExit ( i ) ;
77484: LD_VAR 0 3
77488: PPUSH
77489: CALL 77375 0 1
77493: GO 77481
77495: POP
77496: POP
// end ;
77497: LD_VAR 0 2
77501: RET
// export function ResetHc ; begin
77502: LD_INT 0
77504: PPUSH
// InitHc ;
77505: CALL_OW 19
// hc_importance := 0 ;
77509: LD_ADDR_OWVAR 32
77513: PUSH
77514: LD_INT 0
77516: ST_TO_ADDR
// end ;
77517: LD_VAR 0 1
77521: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77522: LD_INT 0
77524: PPUSH
77525: PPUSH
77526: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77527: LD_ADDR_VAR 0 6
77531: PUSH
77532: LD_VAR 0 1
77536: PUSH
77537: LD_VAR 0 3
77541: PLUS
77542: PUSH
77543: LD_INT 2
77545: DIV
77546: ST_TO_ADDR
// if _x < 0 then
77547: LD_VAR 0 6
77551: PUSH
77552: LD_INT 0
77554: LESS
77555: IFFALSE 77572
// _x := _x * - 1 ;
77557: LD_ADDR_VAR 0 6
77561: PUSH
77562: LD_VAR 0 6
77566: PUSH
77567: LD_INT 1
77569: NEG
77570: MUL
77571: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77572: LD_ADDR_VAR 0 7
77576: PUSH
77577: LD_VAR 0 2
77581: PUSH
77582: LD_VAR 0 4
77586: PLUS
77587: PUSH
77588: LD_INT 2
77590: DIV
77591: ST_TO_ADDR
// if _y < 0 then
77592: LD_VAR 0 7
77596: PUSH
77597: LD_INT 0
77599: LESS
77600: IFFALSE 77617
// _y := _y * - 1 ;
77602: LD_ADDR_VAR 0 7
77606: PUSH
77607: LD_VAR 0 7
77611: PUSH
77612: LD_INT 1
77614: NEG
77615: MUL
77616: ST_TO_ADDR
// result := [ _x , _y ] ;
77617: LD_ADDR_VAR 0 5
77621: PUSH
77622: LD_VAR 0 6
77626: PUSH
77627: LD_VAR 0 7
77631: PUSH
77632: EMPTY
77633: LIST
77634: LIST
77635: ST_TO_ADDR
// end ;
77636: LD_VAR 0 5
77640: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77641: LD_INT 0
77643: PPUSH
77644: PPUSH
77645: PPUSH
77646: PPUSH
// task := GetTaskList ( unit ) ;
77647: LD_ADDR_VAR 0 7
77651: PUSH
77652: LD_VAR 0 1
77656: PPUSH
77657: CALL_OW 437
77661: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77662: LD_VAR 0 7
77666: NOT
77667: PUSH
77668: LD_VAR 0 1
77672: PPUSH
77673: LD_VAR 0 2
77677: PPUSH
77678: CALL_OW 308
77682: NOT
77683: AND
77684: IFFALSE 77688
// exit ;
77686: GO 77806
// if IsInArea ( unit , area ) then
77688: LD_VAR 0 1
77692: PPUSH
77693: LD_VAR 0 2
77697: PPUSH
77698: CALL_OW 308
77702: IFFALSE 77720
// begin ComMoveToArea ( unit , goAway ) ;
77704: LD_VAR 0 1
77708: PPUSH
77709: LD_VAR 0 3
77713: PPUSH
77714: CALL_OW 113
// exit ;
77718: GO 77806
// end ; if task [ 1 ] [ 1 ] <> M then
77720: LD_VAR 0 7
77724: PUSH
77725: LD_INT 1
77727: ARRAY
77728: PUSH
77729: LD_INT 1
77731: ARRAY
77732: PUSH
77733: LD_STRING M
77735: NONEQUAL
77736: IFFALSE 77740
// exit ;
77738: GO 77806
// x := task [ 1 ] [ 2 ] ;
77740: LD_ADDR_VAR 0 5
77744: PUSH
77745: LD_VAR 0 7
77749: PUSH
77750: LD_INT 1
77752: ARRAY
77753: PUSH
77754: LD_INT 2
77756: ARRAY
77757: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77758: LD_ADDR_VAR 0 6
77762: PUSH
77763: LD_VAR 0 7
77767: PUSH
77768: LD_INT 1
77770: ARRAY
77771: PUSH
77772: LD_INT 3
77774: ARRAY
77775: ST_TO_ADDR
// if InArea ( x , y , area ) then
77776: LD_VAR 0 5
77780: PPUSH
77781: LD_VAR 0 6
77785: PPUSH
77786: LD_VAR 0 2
77790: PPUSH
77791: CALL_OW 309
77795: IFFALSE 77806
// ComStop ( unit ) ;
77797: LD_VAR 0 1
77801: PPUSH
77802: CALL_OW 141
// end ;
77806: LD_VAR 0 4
77810: RET
// export function Abs ( value ) ; begin
77811: LD_INT 0
77813: PPUSH
// result := value ;
77814: LD_ADDR_VAR 0 2
77818: PUSH
77819: LD_VAR 0 1
77823: ST_TO_ADDR
// if value < 0 then
77824: LD_VAR 0 1
77828: PUSH
77829: LD_INT 0
77831: LESS
77832: IFFALSE 77849
// result := value * - 1 ;
77834: LD_ADDR_VAR 0 2
77838: PUSH
77839: LD_VAR 0 1
77843: PUSH
77844: LD_INT 1
77846: NEG
77847: MUL
77848: ST_TO_ADDR
// end ;
77849: LD_VAR 0 2
77853: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77854: LD_INT 0
77856: PPUSH
77857: PPUSH
77858: PPUSH
77859: PPUSH
77860: PPUSH
77861: PPUSH
77862: PPUSH
77863: PPUSH
// if not unit or not building then
77864: LD_VAR 0 1
77868: NOT
77869: PUSH
77870: LD_VAR 0 2
77874: NOT
77875: OR
77876: IFFALSE 77880
// exit ;
77878: GO 78106
// x := GetX ( building ) ;
77880: LD_ADDR_VAR 0 4
77884: PUSH
77885: LD_VAR 0 2
77889: PPUSH
77890: CALL_OW 250
77894: ST_TO_ADDR
// y := GetY ( building ) ;
77895: LD_ADDR_VAR 0 6
77899: PUSH
77900: LD_VAR 0 2
77904: PPUSH
77905: CALL_OW 251
77909: ST_TO_ADDR
// d := GetDir ( building ) ;
77910: LD_ADDR_VAR 0 8
77914: PUSH
77915: LD_VAR 0 2
77919: PPUSH
77920: CALL_OW 254
77924: ST_TO_ADDR
// r := 4 ;
77925: LD_ADDR_VAR 0 9
77929: PUSH
77930: LD_INT 4
77932: ST_TO_ADDR
// for i := 1 to 5 do
77933: LD_ADDR_VAR 0 10
77937: PUSH
77938: DOUBLE
77939: LD_INT 1
77941: DEC
77942: ST_TO_ADDR
77943: LD_INT 5
77945: PUSH
77946: FOR_TO
77947: IFFALSE 78104
// begin _x := ShiftX ( x , d , r + i ) ;
77949: LD_ADDR_VAR 0 5
77953: PUSH
77954: LD_VAR 0 4
77958: PPUSH
77959: LD_VAR 0 8
77963: PPUSH
77964: LD_VAR 0 9
77968: PUSH
77969: LD_VAR 0 10
77973: PLUS
77974: PPUSH
77975: CALL_OW 272
77979: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77980: LD_ADDR_VAR 0 7
77984: PUSH
77985: LD_VAR 0 6
77989: PPUSH
77990: LD_VAR 0 8
77994: PPUSH
77995: LD_VAR 0 9
77999: PUSH
78000: LD_VAR 0 10
78004: PLUS
78005: PPUSH
78006: CALL_OW 273
78010: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78011: LD_VAR 0 5
78015: PPUSH
78016: LD_VAR 0 7
78020: PPUSH
78021: CALL_OW 488
78025: PUSH
78026: LD_VAR 0 5
78030: PPUSH
78031: LD_VAR 0 7
78035: PPUSH
78036: CALL_OW 428
78040: PPUSH
78041: CALL_OW 247
78045: PUSH
78046: LD_INT 3
78048: PUSH
78049: LD_INT 2
78051: PUSH
78052: EMPTY
78053: LIST
78054: LIST
78055: IN
78056: NOT
78057: AND
78058: IFFALSE 78102
// begin ComMoveXY ( unit , _x , _y ) ;
78060: LD_VAR 0 1
78064: PPUSH
78065: LD_VAR 0 5
78069: PPUSH
78070: LD_VAR 0 7
78074: PPUSH
78075: CALL_OW 111
// result := [ _x , _y ] ;
78079: LD_ADDR_VAR 0 3
78083: PUSH
78084: LD_VAR 0 5
78088: PUSH
78089: LD_VAR 0 7
78093: PUSH
78094: EMPTY
78095: LIST
78096: LIST
78097: ST_TO_ADDR
// exit ;
78098: POP
78099: POP
78100: GO 78106
// end ; end ;
78102: GO 77946
78104: POP
78105: POP
// end ;
78106: LD_VAR 0 3
78110: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78111: LD_INT 0
78113: PPUSH
78114: PPUSH
78115: PPUSH
// result := 0 ;
78116: LD_ADDR_VAR 0 3
78120: PUSH
78121: LD_INT 0
78123: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78124: LD_VAR 0 1
78128: PUSH
78129: LD_INT 0
78131: LESS
78132: PUSH
78133: LD_VAR 0 1
78137: PUSH
78138: LD_INT 8
78140: GREATER
78141: OR
78142: PUSH
78143: LD_VAR 0 2
78147: PUSH
78148: LD_INT 0
78150: LESS
78151: OR
78152: PUSH
78153: LD_VAR 0 2
78157: PUSH
78158: LD_INT 8
78160: GREATER
78161: OR
78162: IFFALSE 78166
// exit ;
78164: GO 78241
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78166: LD_ADDR_VAR 0 4
78170: PUSH
78171: LD_INT 22
78173: PUSH
78174: LD_VAR 0 2
78178: PUSH
78179: EMPTY
78180: LIST
78181: LIST
78182: PPUSH
78183: CALL_OW 69
78187: PUSH
78188: FOR_IN
78189: IFFALSE 78239
// begin un := UnitShoot ( i ) ;
78191: LD_ADDR_VAR 0 5
78195: PUSH
78196: LD_VAR 0 4
78200: PPUSH
78201: CALL_OW 504
78205: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78206: LD_VAR 0 5
78210: PPUSH
78211: CALL_OW 255
78215: PUSH
78216: LD_VAR 0 1
78220: EQUAL
78221: IFFALSE 78237
// begin result := un ;
78223: LD_ADDR_VAR 0 3
78227: PUSH
78228: LD_VAR 0 5
78232: ST_TO_ADDR
// exit ;
78233: POP
78234: POP
78235: GO 78241
// end ; end ;
78237: GO 78188
78239: POP
78240: POP
// end ;
78241: LD_VAR 0 3
78245: RET
// export function GetCargoBay ( units ) ; begin
78246: LD_INT 0
78248: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78249: LD_ADDR_VAR 0 2
78253: PUSH
78254: LD_VAR 0 1
78258: PPUSH
78259: LD_INT 2
78261: PUSH
78262: LD_INT 34
78264: PUSH
78265: LD_INT 12
78267: PUSH
78268: EMPTY
78269: LIST
78270: LIST
78271: PUSH
78272: LD_INT 34
78274: PUSH
78275: LD_INT 51
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: PUSH
78282: LD_INT 34
78284: PUSH
78285: LD_INT 32
78287: PUSH
78288: EMPTY
78289: LIST
78290: LIST
78291: PUSH
78292: LD_INT 34
78294: PUSH
78295: LD_INT 89
78297: PUSH
78298: EMPTY
78299: LIST
78300: LIST
78301: PUSH
78302: EMPTY
78303: LIST
78304: LIST
78305: LIST
78306: LIST
78307: LIST
78308: PPUSH
78309: CALL_OW 72
78313: ST_TO_ADDR
// end ;
78314: LD_VAR 0 2
78318: RET
// export function Negate ( value ) ; begin
78319: LD_INT 0
78321: PPUSH
// result := not value ;
78322: LD_ADDR_VAR 0 2
78326: PUSH
78327: LD_VAR 0 1
78331: NOT
78332: ST_TO_ADDR
// end ;
78333: LD_VAR 0 2
78337: RET
// export function Inc ( value ) ; begin
78338: LD_INT 0
78340: PPUSH
// result := value + 1 ;
78341: LD_ADDR_VAR 0 2
78345: PUSH
78346: LD_VAR 0 1
78350: PUSH
78351: LD_INT 1
78353: PLUS
78354: ST_TO_ADDR
// end ;
78355: LD_VAR 0 2
78359: RET
// export function Dec ( value ) ; begin
78360: LD_INT 0
78362: PPUSH
// result := value - 1 ;
78363: LD_ADDR_VAR 0 2
78367: PUSH
78368: LD_VAR 0 1
78372: PUSH
78373: LD_INT 1
78375: MINUS
78376: ST_TO_ADDR
// end ;
78377: LD_VAR 0 2
78381: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78382: LD_INT 0
78384: PPUSH
78385: PPUSH
78386: PPUSH
78387: PPUSH
78388: PPUSH
78389: PPUSH
78390: PPUSH
78391: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78392: LD_VAR 0 1
78396: PPUSH
78397: LD_VAR 0 2
78401: PPUSH
78402: CALL_OW 488
78406: NOT
78407: PUSH
78408: LD_VAR 0 3
78412: PPUSH
78413: LD_VAR 0 4
78417: PPUSH
78418: CALL_OW 488
78422: NOT
78423: OR
78424: IFFALSE 78437
// begin result := - 1 ;
78426: LD_ADDR_VAR 0 5
78430: PUSH
78431: LD_INT 1
78433: NEG
78434: ST_TO_ADDR
// exit ;
78435: GO 78672
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78437: LD_ADDR_VAR 0 12
78441: PUSH
78442: LD_VAR 0 1
78446: PPUSH
78447: LD_VAR 0 2
78451: PPUSH
78452: LD_VAR 0 3
78456: PPUSH
78457: LD_VAR 0 4
78461: PPUSH
78462: CALL 77522 0 4
78466: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78467: LD_ADDR_VAR 0 11
78471: PUSH
78472: LD_VAR 0 1
78476: PPUSH
78477: LD_VAR 0 2
78481: PPUSH
78482: LD_VAR 0 12
78486: PUSH
78487: LD_INT 1
78489: ARRAY
78490: PPUSH
78491: LD_VAR 0 12
78495: PUSH
78496: LD_INT 2
78498: ARRAY
78499: PPUSH
78500: CALL_OW 298
78504: ST_TO_ADDR
// distance := 9999 ;
78505: LD_ADDR_VAR 0 10
78509: PUSH
78510: LD_INT 9999
78512: ST_TO_ADDR
// for i := 0 to 5 do
78513: LD_ADDR_VAR 0 6
78517: PUSH
78518: DOUBLE
78519: LD_INT 0
78521: DEC
78522: ST_TO_ADDR
78523: LD_INT 5
78525: PUSH
78526: FOR_TO
78527: IFFALSE 78670
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78529: LD_ADDR_VAR 0 7
78533: PUSH
78534: LD_VAR 0 1
78538: PPUSH
78539: LD_VAR 0 6
78543: PPUSH
78544: LD_VAR 0 11
78548: PPUSH
78549: CALL_OW 272
78553: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78554: LD_ADDR_VAR 0 8
78558: PUSH
78559: LD_VAR 0 2
78563: PPUSH
78564: LD_VAR 0 6
78568: PPUSH
78569: LD_VAR 0 11
78573: PPUSH
78574: CALL_OW 273
78578: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78579: LD_VAR 0 7
78583: PPUSH
78584: LD_VAR 0 8
78588: PPUSH
78589: CALL_OW 488
78593: NOT
78594: IFFALSE 78598
// continue ;
78596: GO 78526
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78598: LD_ADDR_VAR 0 9
78602: PUSH
78603: LD_VAR 0 12
78607: PUSH
78608: LD_INT 1
78610: ARRAY
78611: PPUSH
78612: LD_VAR 0 12
78616: PUSH
78617: LD_INT 2
78619: ARRAY
78620: PPUSH
78621: LD_VAR 0 7
78625: PPUSH
78626: LD_VAR 0 8
78630: PPUSH
78631: CALL_OW 298
78635: ST_TO_ADDR
// if tmp < distance then
78636: LD_VAR 0 9
78640: PUSH
78641: LD_VAR 0 10
78645: LESS
78646: IFFALSE 78668
// begin result := i ;
78648: LD_ADDR_VAR 0 5
78652: PUSH
78653: LD_VAR 0 6
78657: ST_TO_ADDR
// distance := tmp ;
78658: LD_ADDR_VAR 0 10
78662: PUSH
78663: LD_VAR 0 9
78667: ST_TO_ADDR
// end ; end ;
78668: GO 78526
78670: POP
78671: POP
// end ;
78672: LD_VAR 0 5
78676: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78677: LD_INT 0
78679: PPUSH
78680: PPUSH
// if not driver or not IsInUnit ( driver ) then
78681: LD_VAR 0 1
78685: NOT
78686: PUSH
78687: LD_VAR 0 1
78691: PPUSH
78692: CALL_OW 310
78696: NOT
78697: OR
78698: IFFALSE 78702
// exit ;
78700: GO 78792
// vehicle := IsInUnit ( driver ) ;
78702: LD_ADDR_VAR 0 3
78706: PUSH
78707: LD_VAR 0 1
78711: PPUSH
78712: CALL_OW 310
78716: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78717: LD_VAR 0 1
78721: PPUSH
78722: LD_STRING \
78724: PUSH
78725: LD_INT 0
78727: PUSH
78728: LD_INT 0
78730: PUSH
78731: LD_INT 0
78733: PUSH
78734: LD_INT 0
78736: PUSH
78737: LD_INT 0
78739: PUSH
78740: LD_INT 0
78742: PUSH
78743: EMPTY
78744: LIST
78745: LIST
78746: LIST
78747: LIST
78748: LIST
78749: LIST
78750: LIST
78751: PUSH
78752: LD_STRING E
78754: PUSH
78755: LD_INT 0
78757: PUSH
78758: LD_INT 0
78760: PUSH
78761: LD_VAR 0 3
78765: PUSH
78766: LD_INT 0
78768: PUSH
78769: LD_INT 0
78771: PUSH
78772: LD_INT 0
78774: PUSH
78775: EMPTY
78776: LIST
78777: LIST
78778: LIST
78779: LIST
78780: LIST
78781: LIST
78782: LIST
78783: PUSH
78784: EMPTY
78785: LIST
78786: LIST
78787: PPUSH
78788: CALL_OW 446
// end ;
78792: LD_VAR 0 2
78796: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78797: LD_INT 0
78799: PPUSH
78800: PPUSH
// if not driver or not IsInUnit ( driver ) then
78801: LD_VAR 0 1
78805: NOT
78806: PUSH
78807: LD_VAR 0 1
78811: PPUSH
78812: CALL_OW 310
78816: NOT
78817: OR
78818: IFFALSE 78822
// exit ;
78820: GO 78912
// vehicle := IsInUnit ( driver ) ;
78822: LD_ADDR_VAR 0 3
78826: PUSH
78827: LD_VAR 0 1
78831: PPUSH
78832: CALL_OW 310
78836: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78837: LD_VAR 0 1
78841: PPUSH
78842: LD_STRING \
78844: PUSH
78845: LD_INT 0
78847: PUSH
78848: LD_INT 0
78850: PUSH
78851: LD_INT 0
78853: PUSH
78854: LD_INT 0
78856: PUSH
78857: LD_INT 0
78859: PUSH
78860: LD_INT 0
78862: PUSH
78863: EMPTY
78864: LIST
78865: LIST
78866: LIST
78867: LIST
78868: LIST
78869: LIST
78870: LIST
78871: PUSH
78872: LD_STRING E
78874: PUSH
78875: LD_INT 0
78877: PUSH
78878: LD_INT 0
78880: PUSH
78881: LD_VAR 0 3
78885: PUSH
78886: LD_INT 0
78888: PUSH
78889: LD_INT 0
78891: PUSH
78892: LD_INT 0
78894: PUSH
78895: EMPTY
78896: LIST
78897: LIST
78898: LIST
78899: LIST
78900: LIST
78901: LIST
78902: LIST
78903: PUSH
78904: EMPTY
78905: LIST
78906: LIST
78907: PPUSH
78908: CALL_OW 447
// end ;
78912: LD_VAR 0 2
78916: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78917: LD_INT 0
78919: PPUSH
78920: PPUSH
78921: PPUSH
// tmp := [ ] ;
78922: LD_ADDR_VAR 0 5
78926: PUSH
78927: EMPTY
78928: ST_TO_ADDR
// for i in units do
78929: LD_ADDR_VAR 0 4
78933: PUSH
78934: LD_VAR 0 1
78938: PUSH
78939: FOR_IN
78940: IFFALSE 78978
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78942: LD_ADDR_VAR 0 5
78946: PUSH
78947: LD_VAR 0 5
78951: PPUSH
78952: LD_VAR 0 5
78956: PUSH
78957: LD_INT 1
78959: PLUS
78960: PPUSH
78961: LD_VAR 0 4
78965: PPUSH
78966: CALL_OW 256
78970: PPUSH
78971: CALL_OW 2
78975: ST_TO_ADDR
78976: GO 78939
78978: POP
78979: POP
// if not tmp then
78980: LD_VAR 0 5
78984: NOT
78985: IFFALSE 78989
// exit ;
78987: GO 79037
// if asc then
78989: LD_VAR 0 2
78993: IFFALSE 79017
// result := SortListByListAsc ( units , tmp ) else
78995: LD_ADDR_VAR 0 3
78999: PUSH
79000: LD_VAR 0 1
79004: PPUSH
79005: LD_VAR 0 5
79009: PPUSH
79010: CALL_OW 76
79014: ST_TO_ADDR
79015: GO 79037
// result := SortListByListDesc ( units , tmp ) ;
79017: LD_ADDR_VAR 0 3
79021: PUSH
79022: LD_VAR 0 1
79026: PPUSH
79027: LD_VAR 0 5
79031: PPUSH
79032: CALL_OW 77
79036: ST_TO_ADDR
// end ;
79037: LD_VAR 0 3
79041: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79042: LD_INT 0
79044: PPUSH
79045: PPUSH
// task := GetTaskList ( mech ) ;
79046: LD_ADDR_VAR 0 4
79050: PUSH
79051: LD_VAR 0 1
79055: PPUSH
79056: CALL_OW 437
79060: ST_TO_ADDR
// if not task then
79061: LD_VAR 0 4
79065: NOT
79066: IFFALSE 79070
// exit ;
79068: GO 79112
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79070: LD_ADDR_VAR 0 3
79074: PUSH
79075: LD_VAR 0 4
79079: PUSH
79080: LD_INT 1
79082: ARRAY
79083: PUSH
79084: LD_INT 1
79086: ARRAY
79087: PUSH
79088: LD_STRING r
79090: EQUAL
79091: PUSH
79092: LD_VAR 0 4
79096: PUSH
79097: LD_INT 1
79099: ARRAY
79100: PUSH
79101: LD_INT 4
79103: ARRAY
79104: PUSH
79105: LD_VAR 0 2
79109: EQUAL
79110: AND
79111: ST_TO_ADDR
// end ;
79112: LD_VAR 0 3
79116: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79117: LD_INT 0
79119: PPUSH
// SetDir ( unit , d ) ;
79120: LD_VAR 0 1
79124: PPUSH
79125: LD_VAR 0 4
79129: PPUSH
79130: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79134: LD_VAR 0 1
79138: PPUSH
79139: LD_VAR 0 2
79143: PPUSH
79144: LD_VAR 0 3
79148: PPUSH
79149: LD_VAR 0 5
79153: PPUSH
79154: CALL_OW 48
// end ;
79158: LD_VAR 0 6
79162: RET
// export function ToNaturalNumber ( number ) ; begin
79163: LD_INT 0
79165: PPUSH
// result := number div 1 ;
79166: LD_ADDR_VAR 0 2
79170: PUSH
79171: LD_VAR 0 1
79175: PUSH
79176: LD_INT 1
79178: DIV
79179: ST_TO_ADDR
// if number < 0 then
79180: LD_VAR 0 1
79184: PUSH
79185: LD_INT 0
79187: LESS
79188: IFFALSE 79198
// result := 0 ;
79190: LD_ADDR_VAR 0 2
79194: PUSH
79195: LD_INT 0
79197: ST_TO_ADDR
// end ;
79198: LD_VAR 0 2
79202: RET
// export function SortByClass ( units , class ) ; var un ; begin
79203: LD_INT 0
79205: PPUSH
79206: PPUSH
// if not units or not class then
79207: LD_VAR 0 1
79211: NOT
79212: PUSH
79213: LD_VAR 0 2
79217: NOT
79218: OR
79219: IFFALSE 79223
// exit ;
79221: GO 79318
// result := [ ] ;
79223: LD_ADDR_VAR 0 3
79227: PUSH
79228: EMPTY
79229: ST_TO_ADDR
// for un in units do
79230: LD_ADDR_VAR 0 4
79234: PUSH
79235: LD_VAR 0 1
79239: PUSH
79240: FOR_IN
79241: IFFALSE 79316
// if GetClass ( un ) = class then
79243: LD_VAR 0 4
79247: PPUSH
79248: CALL_OW 257
79252: PUSH
79253: LD_VAR 0 2
79257: EQUAL
79258: IFFALSE 79285
// result := Insert ( result , 1 , un ) else
79260: LD_ADDR_VAR 0 3
79264: PUSH
79265: LD_VAR 0 3
79269: PPUSH
79270: LD_INT 1
79272: PPUSH
79273: LD_VAR 0 4
79277: PPUSH
79278: CALL_OW 2
79282: ST_TO_ADDR
79283: GO 79314
// result := Replace ( result , result + 1 , un ) ;
79285: LD_ADDR_VAR 0 3
79289: PUSH
79290: LD_VAR 0 3
79294: PPUSH
79295: LD_VAR 0 3
79299: PUSH
79300: LD_INT 1
79302: PLUS
79303: PPUSH
79304: LD_VAR 0 4
79308: PPUSH
79309: CALL_OW 1
79313: ST_TO_ADDR
79314: GO 79240
79316: POP
79317: POP
// end ;
79318: LD_VAR 0 3
79322: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79323: LD_INT 0
79325: PPUSH
79326: PPUSH
79327: PPUSH
79328: PPUSH
79329: PPUSH
79330: PPUSH
79331: PPUSH
// result := [ ] ;
79332: LD_ADDR_VAR 0 4
79336: PUSH
79337: EMPTY
79338: ST_TO_ADDR
// if x - r < 0 then
79339: LD_VAR 0 1
79343: PUSH
79344: LD_VAR 0 3
79348: MINUS
79349: PUSH
79350: LD_INT 0
79352: LESS
79353: IFFALSE 79365
// min_x := 0 else
79355: LD_ADDR_VAR 0 8
79359: PUSH
79360: LD_INT 0
79362: ST_TO_ADDR
79363: GO 79381
// min_x := x - r ;
79365: LD_ADDR_VAR 0 8
79369: PUSH
79370: LD_VAR 0 1
79374: PUSH
79375: LD_VAR 0 3
79379: MINUS
79380: ST_TO_ADDR
// if y - r < 0 then
79381: LD_VAR 0 2
79385: PUSH
79386: LD_VAR 0 3
79390: MINUS
79391: PUSH
79392: LD_INT 0
79394: LESS
79395: IFFALSE 79407
// min_y := 0 else
79397: LD_ADDR_VAR 0 7
79401: PUSH
79402: LD_INT 0
79404: ST_TO_ADDR
79405: GO 79423
// min_y := y - r ;
79407: LD_ADDR_VAR 0 7
79411: PUSH
79412: LD_VAR 0 2
79416: PUSH
79417: LD_VAR 0 3
79421: MINUS
79422: ST_TO_ADDR
// max_x := x + r ;
79423: LD_ADDR_VAR 0 9
79427: PUSH
79428: LD_VAR 0 1
79432: PUSH
79433: LD_VAR 0 3
79437: PLUS
79438: ST_TO_ADDR
// max_y := y + r ;
79439: LD_ADDR_VAR 0 10
79443: PUSH
79444: LD_VAR 0 2
79448: PUSH
79449: LD_VAR 0 3
79453: PLUS
79454: ST_TO_ADDR
// for _x = min_x to max_x do
79455: LD_ADDR_VAR 0 5
79459: PUSH
79460: DOUBLE
79461: LD_VAR 0 8
79465: DEC
79466: ST_TO_ADDR
79467: LD_VAR 0 9
79471: PUSH
79472: FOR_TO
79473: IFFALSE 79574
// for _y = min_y to max_y do
79475: LD_ADDR_VAR 0 6
79479: PUSH
79480: DOUBLE
79481: LD_VAR 0 7
79485: DEC
79486: ST_TO_ADDR
79487: LD_VAR 0 10
79491: PUSH
79492: FOR_TO
79493: IFFALSE 79570
// begin if not ValidHex ( _x , _y ) then
79495: LD_VAR 0 5
79499: PPUSH
79500: LD_VAR 0 6
79504: PPUSH
79505: CALL_OW 488
79509: NOT
79510: IFFALSE 79514
// continue ;
79512: GO 79492
// if GetResourceTypeXY ( _x , _y ) then
79514: LD_VAR 0 5
79518: PPUSH
79519: LD_VAR 0 6
79523: PPUSH
79524: CALL_OW 283
79528: IFFALSE 79568
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79530: LD_ADDR_VAR 0 4
79534: PUSH
79535: LD_VAR 0 4
79539: PPUSH
79540: LD_VAR 0 4
79544: PUSH
79545: LD_INT 1
79547: PLUS
79548: PPUSH
79549: LD_VAR 0 5
79553: PUSH
79554: LD_VAR 0 6
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: PPUSH
79563: CALL_OW 1
79567: ST_TO_ADDR
// end ;
79568: GO 79492
79570: POP
79571: POP
79572: GO 79472
79574: POP
79575: POP
// end ;
79576: LD_VAR 0 4
79580: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79581: LD_INT 0
79583: PPUSH
79584: PPUSH
79585: PPUSH
79586: PPUSH
79587: PPUSH
79588: PPUSH
79589: PPUSH
79590: PPUSH
// if not units then
79591: LD_VAR 0 1
79595: NOT
79596: IFFALSE 79600
// exit ;
79598: GO 80124
// result := UnitFilter ( units , [ f_ok ] ) ;
79600: LD_ADDR_VAR 0 3
79604: PUSH
79605: LD_VAR 0 1
79609: PPUSH
79610: LD_INT 50
79612: PUSH
79613: EMPTY
79614: LIST
79615: PPUSH
79616: CALL_OW 72
79620: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79621: LD_ADDR_VAR 0 8
79625: PUSH
79626: LD_VAR 0 1
79630: PUSH
79631: LD_INT 1
79633: ARRAY
79634: PPUSH
79635: CALL_OW 255
79639: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79640: LD_ADDR_VAR 0 10
79644: PUSH
79645: LD_INT 29
79647: PUSH
79648: LD_INT 91
79650: PUSH
79651: LD_INT 49
79653: PUSH
79654: EMPTY
79655: LIST
79656: LIST
79657: LIST
79658: ST_TO_ADDR
// if not result then
79659: LD_VAR 0 3
79663: NOT
79664: IFFALSE 79668
// exit ;
79666: GO 80124
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79668: LD_ADDR_VAR 0 5
79672: PUSH
79673: LD_INT 81
79675: PUSH
79676: LD_VAR 0 8
79680: PUSH
79681: EMPTY
79682: LIST
79683: LIST
79684: PPUSH
79685: CALL_OW 69
79689: ST_TO_ADDR
// for i in result do
79690: LD_ADDR_VAR 0 4
79694: PUSH
79695: LD_VAR 0 3
79699: PUSH
79700: FOR_IN
79701: IFFALSE 80122
// begin tag := GetTag ( i ) + 1 ;
79703: LD_ADDR_VAR 0 9
79707: PUSH
79708: LD_VAR 0 4
79712: PPUSH
79713: CALL_OW 110
79717: PUSH
79718: LD_INT 1
79720: PLUS
79721: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79722: LD_ADDR_VAR 0 7
79726: PUSH
79727: LD_VAR 0 4
79731: PPUSH
79732: CALL_OW 250
79736: PPUSH
79737: LD_VAR 0 4
79741: PPUSH
79742: CALL_OW 251
79746: PPUSH
79747: LD_INT 6
79749: PPUSH
79750: CALL 79323 0 3
79754: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79755: LD_VAR 0 4
79759: PPUSH
79760: CALL_OW 247
79764: PUSH
79765: LD_INT 2
79767: EQUAL
79768: PUSH
79769: LD_VAR 0 7
79773: AND
79774: PUSH
79775: LD_VAR 0 4
79779: PPUSH
79780: CALL_OW 264
79784: PUSH
79785: LD_VAR 0 10
79789: IN
79790: NOT
79791: AND
79792: IFFALSE 79831
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79794: LD_VAR 0 4
79798: PPUSH
79799: LD_VAR 0 7
79803: PUSH
79804: LD_INT 1
79806: ARRAY
79807: PUSH
79808: LD_INT 1
79810: ARRAY
79811: PPUSH
79812: LD_VAR 0 7
79816: PUSH
79817: LD_INT 1
79819: ARRAY
79820: PUSH
79821: LD_INT 2
79823: ARRAY
79824: PPUSH
79825: CALL_OW 116
79829: GO 80120
// if path > tag then
79831: LD_VAR 0 2
79835: PUSH
79836: LD_VAR 0 9
79840: GREATER
79841: IFFALSE 80049
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79843: LD_ADDR_VAR 0 6
79847: PUSH
79848: LD_VAR 0 5
79852: PPUSH
79853: LD_INT 91
79855: PUSH
79856: LD_VAR 0 4
79860: PUSH
79861: LD_INT 8
79863: PUSH
79864: EMPTY
79865: LIST
79866: LIST
79867: LIST
79868: PPUSH
79869: CALL_OW 72
79873: ST_TO_ADDR
// if nearEnemy then
79874: LD_VAR 0 6
79878: IFFALSE 79947
// begin if GetWeapon ( i ) = ru_time_lapser then
79880: LD_VAR 0 4
79884: PPUSH
79885: CALL_OW 264
79889: PUSH
79890: LD_INT 49
79892: EQUAL
79893: IFFALSE 79921
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79895: LD_VAR 0 4
79899: PPUSH
79900: LD_VAR 0 6
79904: PPUSH
79905: LD_VAR 0 4
79909: PPUSH
79910: CALL_OW 74
79914: PPUSH
79915: CALL_OW 112
79919: GO 79945
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79921: LD_VAR 0 4
79925: PPUSH
79926: LD_VAR 0 6
79930: PPUSH
79931: LD_VAR 0 4
79935: PPUSH
79936: CALL_OW 74
79940: PPUSH
79941: CALL 81049 0 2
// end else
79945: GO 80047
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79947: LD_VAR 0 4
79951: PPUSH
79952: LD_VAR 0 2
79956: PUSH
79957: LD_VAR 0 9
79961: ARRAY
79962: PUSH
79963: LD_INT 1
79965: ARRAY
79966: PPUSH
79967: LD_VAR 0 2
79971: PUSH
79972: LD_VAR 0 9
79976: ARRAY
79977: PUSH
79978: LD_INT 2
79980: ARRAY
79981: PPUSH
79982: CALL_OW 297
79986: PUSH
79987: LD_INT 6
79989: GREATER
79990: IFFALSE 80033
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79992: LD_VAR 0 4
79996: PPUSH
79997: LD_VAR 0 2
80001: PUSH
80002: LD_VAR 0 9
80006: ARRAY
80007: PUSH
80008: LD_INT 1
80010: ARRAY
80011: PPUSH
80012: LD_VAR 0 2
80016: PUSH
80017: LD_VAR 0 9
80021: ARRAY
80022: PUSH
80023: LD_INT 2
80025: ARRAY
80026: PPUSH
80027: CALL_OW 114
80031: GO 80047
// SetTag ( i , tag ) ;
80033: LD_VAR 0 4
80037: PPUSH
80038: LD_VAR 0 9
80042: PPUSH
80043: CALL_OW 109
// end else
80047: GO 80120
// if enemy then
80049: LD_VAR 0 5
80053: IFFALSE 80120
// begin if GetWeapon ( i ) = ru_time_lapser then
80055: LD_VAR 0 4
80059: PPUSH
80060: CALL_OW 264
80064: PUSH
80065: LD_INT 49
80067: EQUAL
80068: IFFALSE 80096
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80070: LD_VAR 0 4
80074: PPUSH
80075: LD_VAR 0 5
80079: PPUSH
80080: LD_VAR 0 4
80084: PPUSH
80085: CALL_OW 74
80089: PPUSH
80090: CALL_OW 112
80094: GO 80120
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80096: LD_VAR 0 4
80100: PPUSH
80101: LD_VAR 0 5
80105: PPUSH
80106: LD_VAR 0 4
80110: PPUSH
80111: CALL_OW 74
80115: PPUSH
80116: CALL 81049 0 2
// end ; end ;
80120: GO 79700
80122: POP
80123: POP
// end ;
80124: LD_VAR 0 3
80128: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80129: LD_INT 0
80131: PPUSH
80132: PPUSH
80133: PPUSH
// if not unit or IsInUnit ( unit ) then
80134: LD_VAR 0 1
80138: NOT
80139: PUSH
80140: LD_VAR 0 1
80144: PPUSH
80145: CALL_OW 310
80149: OR
80150: IFFALSE 80154
// exit ;
80152: GO 80245
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80154: LD_ADDR_VAR 0 4
80158: PUSH
80159: LD_VAR 0 1
80163: PPUSH
80164: CALL_OW 250
80168: PPUSH
80169: LD_VAR 0 2
80173: PPUSH
80174: LD_INT 1
80176: PPUSH
80177: CALL_OW 272
80181: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80182: LD_ADDR_VAR 0 5
80186: PUSH
80187: LD_VAR 0 1
80191: PPUSH
80192: CALL_OW 251
80196: PPUSH
80197: LD_VAR 0 2
80201: PPUSH
80202: LD_INT 1
80204: PPUSH
80205: CALL_OW 273
80209: ST_TO_ADDR
// if ValidHex ( x , y ) then
80210: LD_VAR 0 4
80214: PPUSH
80215: LD_VAR 0 5
80219: PPUSH
80220: CALL_OW 488
80224: IFFALSE 80245
// ComTurnXY ( unit , x , y ) ;
80226: LD_VAR 0 1
80230: PPUSH
80231: LD_VAR 0 4
80235: PPUSH
80236: LD_VAR 0 5
80240: PPUSH
80241: CALL_OW 118
// end ;
80245: LD_VAR 0 3
80249: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80250: LD_INT 0
80252: PPUSH
80253: PPUSH
// result := false ;
80254: LD_ADDR_VAR 0 3
80258: PUSH
80259: LD_INT 0
80261: ST_TO_ADDR
// if not units then
80262: LD_VAR 0 2
80266: NOT
80267: IFFALSE 80271
// exit ;
80269: GO 80316
// for i in units do
80271: LD_ADDR_VAR 0 4
80275: PUSH
80276: LD_VAR 0 2
80280: PUSH
80281: FOR_IN
80282: IFFALSE 80314
// if See ( side , i ) then
80284: LD_VAR 0 1
80288: PPUSH
80289: LD_VAR 0 4
80293: PPUSH
80294: CALL_OW 292
80298: IFFALSE 80312
// begin result := true ;
80300: LD_ADDR_VAR 0 3
80304: PUSH
80305: LD_INT 1
80307: ST_TO_ADDR
// exit ;
80308: POP
80309: POP
80310: GO 80316
// end ;
80312: GO 80281
80314: POP
80315: POP
// end ;
80316: LD_VAR 0 3
80320: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80321: LD_INT 0
80323: PPUSH
80324: PPUSH
80325: PPUSH
80326: PPUSH
// if not unit or not points then
80327: LD_VAR 0 1
80331: NOT
80332: PUSH
80333: LD_VAR 0 2
80337: NOT
80338: OR
80339: IFFALSE 80343
// exit ;
80341: GO 80433
// dist := 99999 ;
80343: LD_ADDR_VAR 0 5
80347: PUSH
80348: LD_INT 99999
80350: ST_TO_ADDR
// for i in points do
80351: LD_ADDR_VAR 0 4
80355: PUSH
80356: LD_VAR 0 2
80360: PUSH
80361: FOR_IN
80362: IFFALSE 80431
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80364: LD_ADDR_VAR 0 6
80368: PUSH
80369: LD_VAR 0 1
80373: PPUSH
80374: LD_VAR 0 4
80378: PUSH
80379: LD_INT 1
80381: ARRAY
80382: PPUSH
80383: LD_VAR 0 4
80387: PUSH
80388: LD_INT 2
80390: ARRAY
80391: PPUSH
80392: CALL_OW 297
80396: ST_TO_ADDR
// if tmpDist < dist then
80397: LD_VAR 0 6
80401: PUSH
80402: LD_VAR 0 5
80406: LESS
80407: IFFALSE 80429
// begin result := i ;
80409: LD_ADDR_VAR 0 3
80413: PUSH
80414: LD_VAR 0 4
80418: ST_TO_ADDR
// dist := tmpDist ;
80419: LD_ADDR_VAR 0 5
80423: PUSH
80424: LD_VAR 0 6
80428: ST_TO_ADDR
// end ; end ;
80429: GO 80361
80431: POP
80432: POP
// end ;
80433: LD_VAR 0 3
80437: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80438: LD_INT 0
80440: PPUSH
// uc_side := side ;
80441: LD_ADDR_OWVAR 20
80445: PUSH
80446: LD_VAR 0 1
80450: ST_TO_ADDR
// uc_nation := 3 ;
80451: LD_ADDR_OWVAR 21
80455: PUSH
80456: LD_INT 3
80458: ST_TO_ADDR
// vc_chassis := 25 ;
80459: LD_ADDR_OWVAR 37
80463: PUSH
80464: LD_INT 25
80466: ST_TO_ADDR
// vc_engine := engine_siberite ;
80467: LD_ADDR_OWVAR 39
80471: PUSH
80472: LD_INT 3
80474: ST_TO_ADDR
// vc_control := control_computer ;
80475: LD_ADDR_OWVAR 38
80479: PUSH
80480: LD_INT 3
80482: ST_TO_ADDR
// vc_weapon := 59 ;
80483: LD_ADDR_OWVAR 40
80487: PUSH
80488: LD_INT 59
80490: ST_TO_ADDR
// result := CreateVehicle ;
80491: LD_ADDR_VAR 0 5
80495: PUSH
80496: CALL_OW 45
80500: ST_TO_ADDR
// SetDir ( result , d ) ;
80501: LD_VAR 0 5
80505: PPUSH
80506: LD_VAR 0 4
80510: PPUSH
80511: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80515: LD_VAR 0 5
80519: PPUSH
80520: LD_VAR 0 2
80524: PPUSH
80525: LD_VAR 0 3
80529: PPUSH
80530: LD_INT 0
80532: PPUSH
80533: CALL_OW 48
// end ;
80537: LD_VAR 0 5
80541: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80542: LD_INT 0
80544: PPUSH
80545: PPUSH
80546: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80547: LD_ADDR_VAR 0 2
80551: PUSH
80552: LD_INT 0
80554: PUSH
80555: LD_INT 0
80557: PUSH
80558: LD_INT 0
80560: PUSH
80561: LD_INT 0
80563: PUSH
80564: EMPTY
80565: LIST
80566: LIST
80567: LIST
80568: LIST
80569: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80570: LD_VAR 0 1
80574: NOT
80575: PUSH
80576: LD_VAR 0 1
80580: PPUSH
80581: CALL_OW 264
80585: PUSH
80586: LD_INT 12
80588: PUSH
80589: LD_INT 51
80591: PUSH
80592: LD_INT 32
80594: PUSH
80595: LD_INT 89
80597: PUSH
80598: EMPTY
80599: LIST
80600: LIST
80601: LIST
80602: LIST
80603: IN
80604: NOT
80605: OR
80606: IFFALSE 80610
// exit ;
80608: GO 80708
// for i := 1 to 3 do
80610: LD_ADDR_VAR 0 3
80614: PUSH
80615: DOUBLE
80616: LD_INT 1
80618: DEC
80619: ST_TO_ADDR
80620: LD_INT 3
80622: PUSH
80623: FOR_TO
80624: IFFALSE 80706
// begin tmp := GetCargo ( cargo , i ) ;
80626: LD_ADDR_VAR 0 4
80630: PUSH
80631: LD_VAR 0 1
80635: PPUSH
80636: LD_VAR 0 3
80640: PPUSH
80641: CALL_OW 289
80645: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80646: LD_ADDR_VAR 0 2
80650: PUSH
80651: LD_VAR 0 2
80655: PPUSH
80656: LD_VAR 0 3
80660: PPUSH
80661: LD_VAR 0 4
80665: PPUSH
80666: CALL_OW 1
80670: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80671: LD_ADDR_VAR 0 2
80675: PUSH
80676: LD_VAR 0 2
80680: PPUSH
80681: LD_INT 4
80683: PPUSH
80684: LD_VAR 0 2
80688: PUSH
80689: LD_INT 4
80691: ARRAY
80692: PUSH
80693: LD_VAR 0 4
80697: PLUS
80698: PPUSH
80699: CALL_OW 1
80703: ST_TO_ADDR
// end ;
80704: GO 80623
80706: POP
80707: POP
// end ;
80708: LD_VAR 0 2
80712: RET
// export function Length ( array ) ; begin
80713: LD_INT 0
80715: PPUSH
// result := array + 0 ;
80716: LD_ADDR_VAR 0 2
80720: PUSH
80721: LD_VAR 0 1
80725: PUSH
80726: LD_INT 0
80728: PLUS
80729: ST_TO_ADDR
// end ;
80730: LD_VAR 0 2
80734: RET
// export function PrepareArray ( array ) ; begin
80735: LD_INT 0
80737: PPUSH
// result := array diff 0 ;
80738: LD_ADDR_VAR 0 2
80742: PUSH
80743: LD_VAR 0 1
80747: PUSH
80748: LD_INT 0
80750: DIFF
80751: ST_TO_ADDR
// if not result [ 1 ] then
80752: LD_VAR 0 2
80756: PUSH
80757: LD_INT 1
80759: ARRAY
80760: NOT
80761: IFFALSE 80781
// result := Delete ( result , 1 ) ;
80763: LD_ADDR_VAR 0 2
80767: PUSH
80768: LD_VAR 0 2
80772: PPUSH
80773: LD_INT 1
80775: PPUSH
80776: CALL_OW 3
80780: ST_TO_ADDR
// end ;
80781: LD_VAR 0 2
80785: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80786: LD_INT 0
80788: PPUSH
80789: PPUSH
80790: PPUSH
80791: PPUSH
// sibRocketRange := 25 ;
80792: LD_ADDR_VAR 0 6
80796: PUSH
80797: LD_INT 25
80799: ST_TO_ADDR
// result := false ;
80800: LD_ADDR_VAR 0 4
80804: PUSH
80805: LD_INT 0
80807: ST_TO_ADDR
// for i := 0 to 5 do
80808: LD_ADDR_VAR 0 5
80812: PUSH
80813: DOUBLE
80814: LD_INT 0
80816: DEC
80817: ST_TO_ADDR
80818: LD_INT 5
80820: PUSH
80821: FOR_TO
80822: IFFALSE 80889
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80824: LD_VAR 0 1
80828: PPUSH
80829: LD_VAR 0 5
80833: PPUSH
80834: LD_VAR 0 6
80838: PPUSH
80839: CALL_OW 272
80843: PPUSH
80844: LD_VAR 0 2
80848: PPUSH
80849: LD_VAR 0 5
80853: PPUSH
80854: LD_VAR 0 6
80858: PPUSH
80859: CALL_OW 273
80863: PPUSH
80864: LD_VAR 0 3
80868: PPUSH
80869: CALL_OW 309
80873: IFFALSE 80887
// begin result := true ;
80875: LD_ADDR_VAR 0 4
80879: PUSH
80880: LD_INT 1
80882: ST_TO_ADDR
// exit ;
80883: POP
80884: POP
80885: GO 80891
// end ;
80887: GO 80821
80889: POP
80890: POP
// end ;
80891: LD_VAR 0 4
80895: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80896: LD_INT 0
80898: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80899: LD_VAR 0 1
80903: PPUSH
80904: LD_VAR 0 2
80908: PPUSH
80909: LD_INT 0
80911: PPUSH
80912: LD_INT 0
80914: PPUSH
80915: LD_INT 1
80917: PPUSH
80918: LD_INT 0
80920: PPUSH
80921: CALL_OW 587
// end ;
80925: LD_VAR 0 3
80929: RET
// export function CenterOnNow ( unit ) ; begin
80930: LD_INT 0
80932: PPUSH
// result := IsInUnit ( unit ) ;
80933: LD_ADDR_VAR 0 2
80937: PUSH
80938: LD_VAR 0 1
80942: PPUSH
80943: CALL_OW 310
80947: ST_TO_ADDR
// if not result then
80948: LD_VAR 0 2
80952: NOT
80953: IFFALSE 80965
// result := unit ;
80955: LD_ADDR_VAR 0 2
80959: PUSH
80960: LD_VAR 0 1
80964: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80965: LD_VAR 0 1
80969: PPUSH
80970: CALL_OW 87
// end ;
80974: LD_VAR 0 2
80978: RET
// export function ComMoveHex ( unit , hex ) ; begin
80979: LD_INT 0
80981: PPUSH
// if not hex then
80982: LD_VAR 0 2
80986: NOT
80987: IFFALSE 80991
// exit ;
80989: GO 81044
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80991: LD_VAR 0 2
80995: PUSH
80996: LD_INT 1
80998: ARRAY
80999: PPUSH
81000: LD_VAR 0 2
81004: PUSH
81005: LD_INT 2
81007: ARRAY
81008: PPUSH
81009: CALL_OW 428
81013: IFFALSE 81017
// exit ;
81015: GO 81044
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81017: LD_VAR 0 1
81021: PPUSH
81022: LD_VAR 0 2
81026: PUSH
81027: LD_INT 1
81029: ARRAY
81030: PPUSH
81031: LD_VAR 0 2
81035: PUSH
81036: LD_INT 2
81038: ARRAY
81039: PPUSH
81040: CALL_OW 111
// end ;
81044: LD_VAR 0 3
81048: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81049: LD_INT 0
81051: PPUSH
81052: PPUSH
81053: PPUSH
// if not unit or not enemy then
81054: LD_VAR 0 1
81058: NOT
81059: PUSH
81060: LD_VAR 0 2
81064: NOT
81065: OR
81066: IFFALSE 81070
// exit ;
81068: GO 81194
// x := GetX ( enemy ) ;
81070: LD_ADDR_VAR 0 4
81074: PUSH
81075: LD_VAR 0 2
81079: PPUSH
81080: CALL_OW 250
81084: ST_TO_ADDR
// y := GetY ( enemy ) ;
81085: LD_ADDR_VAR 0 5
81089: PUSH
81090: LD_VAR 0 2
81094: PPUSH
81095: CALL_OW 251
81099: ST_TO_ADDR
// if ValidHex ( x , y ) then
81100: LD_VAR 0 4
81104: PPUSH
81105: LD_VAR 0 5
81109: PPUSH
81110: CALL_OW 488
81114: IFFALSE 81194
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
81116: LD_VAR 0 2
81120: PPUSH
81121: CALL_OW 247
81125: PUSH
81126: LD_INT 3
81128: PUSH
81129: LD_INT 2
81131: PUSH
81132: EMPTY
81133: LIST
81134: LIST
81135: IN
81136: PUSH
81137: LD_VAR 0 1
81141: PPUSH
81142: CALL_OW 255
81146: PPUSH
81147: LD_VAR 0 2
81151: PPUSH
81152: CALL_OW 292
81156: AND
81157: IFFALSE 81175
// ComAttackUnit ( unit , enemy ) else
81159: LD_VAR 0 1
81163: PPUSH
81164: LD_VAR 0 2
81168: PPUSH
81169: CALL_OW 115
81173: GO 81194
// ComAgressiveMove ( unit , x , y ) ;
81175: LD_VAR 0 1
81179: PPUSH
81180: LD_VAR 0 4
81184: PPUSH
81185: LD_VAR 0 5
81189: PPUSH
81190: CALL_OW 114
// end ; end_of_file
81194: LD_VAR 0 3
81198: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81199: LD_VAR 0 1
81203: PUSH
81204: LD_INT 200
81206: DOUBLE
81207: GREATEREQUAL
81208: IFFALSE 81216
81210: LD_INT 299
81212: DOUBLE
81213: LESSEQUAL
81214: IFTRUE 81218
81216: GO 81250
81218: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81219: LD_VAR 0 1
81223: PPUSH
81224: LD_VAR 0 2
81228: PPUSH
81229: LD_VAR 0 3
81233: PPUSH
81234: LD_VAR 0 4
81238: PPUSH
81239: LD_VAR 0 5
81243: PPUSH
81244: CALL 34923 0 5
81248: GO 81327
81250: LD_INT 300
81252: DOUBLE
81253: GREATEREQUAL
81254: IFFALSE 81262
81256: LD_INT 399
81258: DOUBLE
81259: LESSEQUAL
81260: IFTRUE 81264
81262: GO 81326
81264: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81265: LD_VAR 0 1
81269: PPUSH
81270: LD_VAR 0 2
81274: PPUSH
81275: LD_VAR 0 3
81279: PPUSH
81280: LD_VAR 0 4
81284: PPUSH
81285: LD_VAR 0 5
81289: PPUSH
81290: LD_VAR 0 6
81294: PPUSH
81295: LD_VAR 0 7
81299: PPUSH
81300: LD_VAR 0 8
81304: PPUSH
81305: LD_VAR 0 9
81309: PPUSH
81310: LD_VAR 0 10
81314: PPUSH
81315: LD_VAR 0 11
81319: PPUSH
81320: CALL 31248 0 11
81324: GO 81327
81326: POP
// end ;
81327: PPOPN 11
81329: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81330: LD_VAR 0 1
81334: PPUSH
81335: LD_VAR 0 2
81339: PPUSH
81340: LD_VAR 0 3
81344: PPUSH
81345: LD_VAR 0 4
81349: PPUSH
81350: LD_VAR 0 5
81354: PPUSH
81355: CALL 34659 0 5
// end ; end_of_file
81359: PPOPN 5
81361: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81362: LD_VAR 0 1
81366: PPUSH
81367: LD_VAR 0 2
81371: PPUSH
81372: LD_VAR 0 3
81376: PPUSH
81377: LD_VAR 0 4
81381: PPUSH
81382: LD_VAR 0 5
81386: PPUSH
81387: LD_VAR 0 6
81391: PPUSH
81392: CALL 18900 0 6
// end ;
81396: PPOPN 6
81398: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81399: LD_INT 0
81401: PPUSH
// begin if not units then
81402: LD_VAR 0 1
81406: NOT
81407: IFFALSE 81411
// exit ;
81409: GO 81411
// end ;
81411: PPOPN 7
81413: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81414: CALL 18804 0 0
// end ;
81418: PPOPN 1
81420: END
