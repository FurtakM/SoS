// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10090 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10220 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11627 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13856 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 2000 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 2000
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8309 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6358 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6358 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6358 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6358 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6358 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6209 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6209 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8082 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6209 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6209 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8082 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10608 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5233
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6118 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10534 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5451 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5451 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9125 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 73554 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6358 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6499 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6574 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8481 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6358 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6913 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7521 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7812 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6209 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6209 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6209 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7960 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7960 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7960 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8082 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8082 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6118 0 1
3087: PPUSH
3088: CALL 5810 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6118 0 1
3108: PPUSH
3109: CALL 5810 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11332 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5451 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3480
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3478
// if GetLives ( ru_attack_list [ i ] ) >= 250 then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: IFFALSE 3476
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3417: LD_EXP 10
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_INT 81
3430: PUSH
3431: LD_EXP 10
3435: PUSH
3436: LD_VAR 0 1
3440: ARRAY
3441: PPUSH
3442: CALL_OW 255
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: PPUSH
3456: LD_EXP 10
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 74
3471: PPUSH
3472: CALL_OW 115
3476: GO 3393
3478: POP
3479: POP
// end ; if GetBehemoth ( 3 ) then
3480: LD_INT 3
3482: PPUSH
3483: CALL 11332 0 1
3487: IFFALSE 3859
// begin if ru_mech >= 4 then
3489: LD_EXP 22
3493: PUSH
3494: LD_INT 4
3496: GREATEREQUAL
3497: IFFALSE 3548
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3499: LD_ADDR_EXP 15
3503: PUSH
3504: LD_EXP 22
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: PUSH
3513: LD_EXP 22
3517: PUSH
3518: LD_INT 2
3520: ARRAY
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 3
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 4
3538: ARRAY
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
3546: GO 3558
// ru_behemoth_mechanic := ru_mech ;
3548: LD_ADDR_EXP 15
3552: PUSH
3553: LD_EXP 22
3557: ST_TO_ADDR
// for i = 1 to ru_mech do
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: DOUBLE
3564: LD_INT 1
3566: DEC
3567: ST_TO_ADDR
3568: LD_EXP 22
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3628
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3576: LD_EXP 22
3580: PUSH
3581: LD_VAR 0 1
3585: ARRAY
3586: PPUSH
3587: CALL_OW 310
3591: PUSH
3592: LD_EXP 22
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PUSH
3603: LD_EXP 15
3607: IN
3608: AND
3609: IFFALSE 3626
// ComExitBuilding ( ru_mech [ i ] ) ;
3611: LD_EXP 22
3615: PUSH
3616: LD_VAR 0 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 122
3626: GO 3573
3628: POP
3629: POP
// if UnitsInside ( ru_fac ) = 0 then
3630: LD_INT 14
3632: PPUSH
3633: CALL_OW 313
3637: PUSH
3638: LD_INT 0
3640: EQUAL
3641: IFFALSE 3708
// begin InitHc_All ;
3643: CALL_OW 584
// for i := 1 to 5 do
3647: LD_ADDR_VAR 0 1
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 5
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3706
// begin uc_side := 3 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 3
3670: ST_TO_ADDR
// uc_nation := 3 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 3
3678: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3679: LD_INT 0
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 7
3687: PPUSH
3688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3692: CALL_OW 44
3696: PPUSH
3697: LD_INT 14
3699: PPUSH
3700: CALL_OW 52
// end ;
3704: GO 3660
3706: POP
3707: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3708: LD_INT 12
3710: PPUSH
3711: LD_INT 22
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 21
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 70
3739: PUSH
3740: LD_INT 0
3742: GREATER
3743: IFFALSE 3803
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3745: LD_INT 3
3747: PPUSH
3748: CALL 11332 0 1
3752: PUSH
3753: LD_INT 1
3755: ARRAY
3756: PPUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 34
3769: PUSH
3770: LD_INT 49
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PPUSH
3786: LD_EXP 15
3790: PPUSH
3791: LD_INT 97
3793: PPUSH
3794: LD_INT 9
3796: PPUSH
3797: CALL 10829 0 5
3801: GO 3859
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3803: LD_INT 3
3805: PPUSH
3806: CALL 11332 0 1
3810: PUSH
3811: LD_INT 1
3813: ARRAY
3814: PPUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 49
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: PPUSH
3839: CALL_OW 69
3843: PPUSH
3844: LD_EXP 15
3848: PPUSH
3849: LD_INT 153
3851: PPUSH
3852: LD_INT 102
3854: PPUSH
3855: CALL 10829 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3859: LD_EXP 24
3863: PUSH
3864: LD_INT 0
3866: EQUAL
3867: PUSH
3868: LD_INT 44
3870: PPUSH
3871: LD_INT 3
3873: PPUSH
3874: CALL_OW 321
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3894
// ComChangeClassToBazooker ( ru_sold ) ;
3885: LD_EXP 20
3889: PPUSH
3890: CALL 9766 0 1
// if ru_bazz then
3894: LD_EXP 24
3898: IFFALSE 3912
// IntBazooka ( ru_bazz , 1 ) ;
3900: LD_EXP 24
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL 9485 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3912: LD_INT 67
3914: PPUSH
3915: LD_INT 39
3917: PPUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL_OW 440
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: PUSH
3930: LD_INT 20
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: CALL_OW 321
3940: PUSH
3941: LD_INT 2
3943: EQUAL
3944: AND
3945: IFFALSE 3966
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3947: LD_EXP 23
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_INT 67
3958: PPUSH
3959: LD_INT 39
3961: PPUSH
3962: CALL 9064 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3966: LD_INT 89
3968: PPUSH
3969: LD_INT 66
3971: PPUSH
3972: LD_INT 3
3974: PPUSH
3975: CALL_OW 440
3979: PUSH
3980: LD_INT 0
3982: EQUAL
3983: IFFALSE 4004
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
3985: LD_EXP 23
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_INT 87
3996: PPUSH
3997: LD_INT 60
3999: PPUSH
4000: CALL 9064 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4004: LD_INT 104
4006: PPUSH
4007: LD_INT 94
4009: PPUSH
4010: LD_INT 3
4012: PPUSH
4013: CALL_OW 440
4017: PUSH
4018: LD_INT 0
4020: EQUAL
4021: PUSH
4022: LD_INT 20
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: CALL_OW 321
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: AND
4037: IFFALSE 4058
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4039: LD_EXP 23
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: PPUSH
4048: LD_INT 104
4050: PPUSH
4051: LD_INT 94
4053: PPUSH
4054: CALL 9064 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4058: LD_INT 3
4060: PPUSH
4061: LD_INT 24
4063: PPUSH
4064: LD_INT 53
4066: PPUSH
4067: CALL 7960 0 3
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: PUSH
4076: LD_EXP 18
4080: AND
4081: IFFALSE 4222
// begin need_buldozer := false ;
4083: LD_ADDR_EXP 18
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4091: LD_INT 3
4093: PPUSH
4094: LD_INT 24
4096: PPUSH
4097: LD_INT 53
4099: PPUSH
4100: CALL 7960 0 3
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_INT 67
4111: PPUSH
4112: LD_INT 39
4114: PPUSH
4115: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 24
4124: PPUSH
4125: LD_INT 53
4127: PPUSH
4128: CALL 7960 0 3
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PPUSH
4137: LD_INT 71
4139: PPUSH
4140: LD_INT 10
4142: PPUSH
4143: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4147: LD_INT 3
4149: PPUSH
4150: LD_INT 24
4152: PPUSH
4153: LD_INT 53
4155: PPUSH
4156: CALL 7960 0 3
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: PPUSH
4165: LD_INT 15
4167: PPUSH
4168: CALL 5551 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 24
4177: PPUSH
4178: LD_INT 53
4180: PPUSH
4181: CALL 7960 0 3
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: PPUSH
4190: LD_INT 350
4192: PPUSH
4193: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 24
4202: PPUSH
4203: LD_INT 53
4205: PPUSH
4206: CALL 7960 0 3
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PPUSH
4215: LD_INT 14
4217: PPUSH
4218: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4222: LD_INT 67
4224: PPUSH
4225: LD_INT 39
4227: PPUSH
4228: LD_INT 3
4230: PPUSH
4231: CALL_OW 440
4235: PUSH
4236: LD_INT 67
4238: PPUSH
4239: LD_INT 39
4241: PPUSH
4242: CALL_OW 428
4246: PUSH
4247: LD_INT 0
4249: EQUAL
4250: AND
4251: PUSH
4252: LD_INT 79
4254: PPUSH
4255: LD_INT 45
4257: PPUSH
4258: CALL_OW 428
4262: PPUSH
4263: CALL_OW 266
4267: PUSH
4268: LD_INT 0
4270: EQUAL
4271: AND
4272: PUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_INT 79
4278: PPUSH
4279: LD_INT 45
4281: PPUSH
4282: CALL 5451 0 3
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: AND
4291: IFFALSE 4394
// begin for i = 1 to ru_eng do
4293: LD_ADDR_VAR 0 1
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_EXP 21
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4392
// if IsInUnit ( ru_eng [ i ] ) then
4311: LD_EXP 21
4315: PUSH
4316: LD_VAR 0 1
4320: ARRAY
4321: PPUSH
4322: CALL_OW 310
4326: IFFALSE 4345
// ComExitBuilding ( ru_eng [ i ] ) else
4328: LD_EXP 21
4332: PUSH
4333: LD_VAR 0 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 122
4343: GO 4390
// if not HasTask ( ru_eng [ i ] ) then
4345: LD_EXP 21
4349: PUSH
4350: LD_VAR 0 1
4354: ARRAY
4355: PPUSH
4356: CALL_OW 314
4360: NOT
4361: IFFALSE 4390
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: LD_INT 30
4376: PPUSH
4377: LD_INT 67
4379: PPUSH
4380: LD_INT 39
4382: PPUSH
4383: LD_INT 3
4385: PPUSH
4386: CALL_OW 145
4390: GO 4308
4392: POP
4393: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 79
4399: PPUSH
4400: LD_INT 45
4402: PPUSH
4403: CALL 5451 0 3
4407: PUSH
4408: LD_INT 0
4410: EQUAL
4411: IFFALSE 4607
// begin if HexInfo ( 79 , 45 ) = 0 then
4413: LD_INT 79
4415: PPUSH
4416: LD_INT 45
4418: PPUSH
4419: CALL_OW 428
4423: PUSH
4424: LD_INT 0
4426: EQUAL
4427: IFFALSE 4449
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4429: LD_EXP 21
4433: PPUSH
4434: LD_INT 79
4436: PPUSH
4437: LD_INT 45
4439: PPUSH
4440: LD_INT 3
4442: PPUSH
4443: CALL 6975 0 4
4447: GO 4607
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4449: LD_INT 89
4451: PPUSH
4452: LD_INT 66
4454: PPUSH
4455: CALL_OW 428
4459: PUSH
4460: LD_INT 0
4462: EQUAL
4463: PUSH
4464: LD_INT 89
4466: PPUSH
4467: LD_INT 66
4469: PPUSH
4470: LD_INT 3
4472: PPUSH
4473: CALL_OW 440
4477: AND
4478: IFFALSE 4607
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4480: LD_INT 79
4482: PPUSH
4483: LD_INT 45
4485: PPUSH
4486: CALL_OW 428
4490: PPUSH
4491: CALL_OW 274
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 100
4501: PPUSH
4502: CALL_OW 277
// for i = 1 to ru_eng do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 21
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4605
// if IsInUnit ( ru_eng [ i ] ) then
4524: LD_EXP 21
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 310
4539: IFFALSE 4558
// ComExitBuilding ( ru_eng [ i ] ) else
4541: LD_EXP 21
4545: PUSH
4546: LD_VAR 0 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 122
4556: GO 4603
// if not HasTask ( ru_eng [ i ] ) then
4558: LD_EXP 21
4562: PUSH
4563: LD_VAR 0 1
4567: ARRAY
4568: PPUSH
4569: CALL_OW 314
4573: NOT
4574: IFFALSE 4603
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: LD_INT 29
4589: PPUSH
4590: LD_INT 89
4592: PPUSH
4593: LD_INT 66
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: CALL_OW 145
4603: GO 4521
4605: POP
4606: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4607: LD_INT 3
4609: PPUSH
4610: LD_INT 29
4612: PPUSH
4613: CALL 6209 0 2
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: PUSH
4622: LD_INT 1
4624: PPUSH
4625: LD_INT 36
4627: PPUSH
4628: LD_INT 6
4630: PPUSH
4631: CALL 5451 0 3
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: AND
4640: PUSH
4641: LD_INT 3
4643: PPUSH
4644: CALL 6118 0 1
4648: PPUSH
4649: LD_INT 29
4651: PPUSH
4652: CALL 5694 0 2
4656: AND
4657: IFFALSE 4760
// begin for i = 1 to ru_eng do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_EXP 21
4673: PUSH
4674: FOR_TO
4675: IFFALSE 4758
// begin if IsInUnit ( ru_eng [ i ] ) then
4677: LD_EXP 21
4681: PUSH
4682: LD_VAR 0 1
4686: ARRAY
4687: PPUSH
4688: CALL_OW 310
4692: IFFALSE 4711
// ComExitBuilding ( ru_eng [ i ] ) else
4694: LD_EXP 21
4698: PUSH
4699: LD_VAR 0 1
4703: ARRAY
4704: PPUSH
4705: CALL_OW 122
4709: GO 4756
// if not HasTask ( ru_eng [ i ] ) then
4711: LD_EXP 21
4715: PUSH
4716: LD_VAR 0 1
4720: ARRAY
4721: PPUSH
4722: CALL_OW 314
4726: NOT
4727: IFFALSE 4756
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: LD_INT 29
4742: PPUSH
4743: LD_INT 33
4745: PPUSH
4746: LD_INT 4
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL_OW 205
// end ; end ;
4756: GO 4674
4758: POP
4759: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4760: LD_EXP 21
4764: PUSH
4765: LD_INT 79
4767: PPUSH
4768: LD_INT 45
4770: PPUSH
4771: CALL_OW 428
4775: PUSH
4776: LD_INT 0
4778: GREATER
4779: AND
4780: PUSH
4781: LD_INT 79
4783: PPUSH
4784: LD_INT 45
4786: PPUSH
4787: CALL_OW 428
4791: PPUSH
4792: CALL_OW 266
4796: PUSH
4797: LD_INT 0
4799: EQUAL
4800: AND
4801: IFFALSE 4961
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4803: LD_INT 79
4805: PPUSH
4806: LD_INT 45
4808: PPUSH
4809: CALL_OW 428
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: LD_INT 3
4821: EQUAL
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 79
4828: PPUSH
4829: LD_INT 45
4831: PPUSH
4832: CALL 5451 0 3
4836: PUSH
4837: LD_INT 0
4839: EQUAL
4840: AND
4841: PUSH
4842: LD_INT 79
4844: PPUSH
4845: LD_INT 45
4847: PPUSH
4848: CALL_OW 428
4852: PPUSH
4853: CALL_OW 274
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: CALL_OW 275
4865: PUSH
4866: LD_INT 10
4868: GREATEREQUAL
4869: AND
4870: IFFALSE 4961
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4872: LD_EXP 21
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: CALL_OW 310
4885: IFFALSE 4902
// ComExitBuilding ( ru_eng [ 1 ] ) else
4887: LD_EXP 21
4891: PUSH
4892: LD_INT 1
4894: ARRAY
4895: PPUSH
4896: CALL_OW 122
4900: GO 4961
// if not HasTask ( ru_eng [ 1 ] ) then
4902: LD_EXP 21
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: CALL_OW 314
4915: NOT
4916: IFFALSE 4961
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4918: LD_EXP 21
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_INT 79
4929: PPUSH
4930: LD_INT 45
4932: PPUSH
4933: CALL_OW 428
4937: PPUSH
4938: LD_INT 3
4940: PPUSH
4941: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4945: LD_EXP 21
4949: PUSH
4950: LD_INT 1
4952: ARRAY
4953: PPUSH
4954: LD_INT 2
4956: PPUSH
4957: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4961: LD_EXP 21
4965: PUSH
4966: LD_INT 2
4968: GREATER
4969: PUSH
4970: LD_INT 79
4972: PPUSH
4973: LD_INT 45
4975: PPUSH
4976: CALL_OW 428
4980: PUSH
4981: LD_INT 0
4983: GREATER
4984: AND
4985: PUSH
4986: LD_INT 79
4988: PPUSH
4989: LD_INT 45
4991: PPUSH
4992: CALL_OW 428
4996: PPUSH
4997: CALL_OW 266
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: IFFALSE 5166
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5008: LD_INT 79
5010: PPUSH
5011: LD_INT 45
5013: PPUSH
5014: CALL_OW 428
5018: PPUSH
5019: CALL_OW 255
5023: PUSH
5024: LD_INT 3
5026: EQUAL
5027: PUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 79
5033: PPUSH
5034: LD_INT 45
5036: PPUSH
5037: CALL 5451 0 3
5041: PUSH
5042: LD_INT 0
5044: EQUAL
5045: AND
5046: PUSH
5047: LD_INT 79
5049: PPUSH
5050: LD_INT 45
5052: PPUSH
5053: CALL_OW 428
5057: PPUSH
5058: CALL_OW 274
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 275
5070: PUSH
5071: LD_INT 20
5073: GREATER
5074: AND
5075: IFFALSE 5166
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5077: LD_EXP 21
5081: PUSH
5082: LD_INT 2
5084: ARRAY
5085: PPUSH
5086: CALL_OW 310
5090: IFFALSE 5107
// ComExitBuilding ( ru_eng [ 2 ] ) else
5092: LD_EXP 21
5096: PUSH
5097: LD_INT 2
5099: ARRAY
5100: PPUSH
5101: CALL_OW 122
5105: GO 5166
// if not HasTask ( ru_eng [ 2 ] ) then
5107: LD_EXP 21
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 314
5120: NOT
5121: IFFALSE 5166
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5123: LD_EXP 21
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_INT 79
5134: PPUSH
5135: LD_INT 45
5137: PPUSH
5138: CALL_OW 428
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5150: LD_EXP 21
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: LD_INT 2
5161: PPUSH
5162: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 59
5171: PPUSH
5172: LD_INT 60
5174: PPUSH
5175: CALL 5451 0 3
5179: PUSH
5180: LD_INT 0
5182: EQUAL
5183: PUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 67
5189: PPUSH
5190: LD_INT 76
5192: PPUSH
5193: CALL 5451 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: AND
5202: PUSH
5203: LD_INT 1
5205: PPUSH
5206: LD_INT 79
5208: PPUSH
5209: LD_INT 100
5211: PPUSH
5212: CALL 5451 0 3
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5233
// CollectCrates ( 3 , west_crates ) ;
5223: LD_INT 3
5225: PPUSH
5226: LD_INT 13
5228: PPUSH
5229: CALL 11376 0 2
// end ;
5233: PPOPN 10
5235: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5236: LD_OWVAR 1
5240: PUSH
5241: LD_INT 111300
5243: LESSEQUAL
5244: PUSH
5245: LD_EXP 30
5249: NOT
5250: OR
5251: IFFALSE 5448
5253: GO 5255
5255: DISABLE
5256: LD_INT 0
5258: PPUSH
// begin enable ;
5259: ENABLE
// uc_nation := 3 ;
5260: LD_ADDR_OWVAR 21
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_side := 3 ;
5268: LD_ADDR_OWVAR 20
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5276: LD_ADDR_OWVAR 37
5280: PUSH
5281: LD_INT 22
5283: ST_TO_ADDR
// vc_engine := engine_siberite ;
5284: LD_ADDR_OWVAR 39
5288: PUSH
5289: LD_INT 3
5291: ST_TO_ADDR
// vc_control := control_computer ;
5292: LD_ADDR_OWVAR 38
5296: PUSH
5297: LD_INT 3
5299: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5300: LD_ADDR_OWVAR 40
5304: PUSH
5305: LD_INT 51
5307: ST_TO_ADDR
// veh := CreateVehicle ;
5308: LD_ADDR_VAR 0 1
5312: PUSH
5313: CALL_OW 45
5317: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 4
5325: PPUSH
5326: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5330: LD_VAR 0 1
5334: PPUSH
5335: LD_INT 10
5337: PPUSH
5338: LD_INT 0
5340: PPUSH
5341: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_INT 1
5352: PUSH
5353: LD_INT 2
5355: PUSH
5356: LD_INT 3
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 4
5373: PPUSH
5374: CALL_OW 12
5378: ARRAY
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5387: LD_VAR 0 1
5391: PPUSH
5392: LD_INT 2
5394: PPUSH
5395: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_INT 10
5406: PPUSH
5407: CALL_OW 173
// Wait ( 0 0$10 ) ;
5411: LD_INT 350
5413: PPUSH
5414: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5418: LD_INT 35
5420: PPUSH
5421: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5425: LD_VAR 0 1
5429: PPUSH
5430: LD_INT 10
5432: PPUSH
5433: CALL_OW 308
5437: IFFALSE 5418
// RemoveUnit ( veh ) ;
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 64
// end ; end_of_file
5448: PPOPN 1
5450: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5451: LD_INT 0
5453: PPUSH
5454: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5455: LD_ADDR_VAR 0 5
5459: PUSH
5460: LD_INT 22
5462: PUSH
5463: LD_VAR 0 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 69
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 73
5491: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5492: LD_ADDR_VAR 0 4
5496: PUSH
5497: LD_VAR 0 5
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_VAR 0 3
5511: PPUSH
5512: CALL_OW 297
5516: PUSH
5517: LD_INT 15
5519: LESS
5520: PUSH
5521: LD_INT 2
5523: PPUSH
5524: LD_INT 22
5526: PUSH
5527: LD_VAR 0 1
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 70
5540: PUSH
5541: LD_INT 0
5543: GREATER
5544: OR
5545: ST_TO_ADDR
// end ;
5546: LD_VAR 0 4
5550: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5551: LD_INT 0
5553: PPUSH
5554: PPUSH
// area = ListEnvironmentArea ( area ) ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 353
5569: ST_TO_ADDR
// if bulldozer > 0 then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_INT 0
5577: GREATER
5578: IFFALSE 5689
// for i = 1 to area do
5580: LD_ADDR_VAR 0 4
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_VAR 0 2
5594: PUSH
5595: FOR_TO
5596: IFFALSE 5687
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_VAR 0 4
5607: ARRAY
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 4
5622: ARRAY
5623: PUSH
5624: LD_INT 2
5626: ARRAY
5627: PPUSH
5628: CALL_OW 351
5632: IFFALSE 5685
// if not HasTask ( bulldozer ) then
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 314
5643: NOT
5644: IFFALSE 5685
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5646: LD_VAR 0 1
5650: PPUSH
5651: LD_VAR 0 2
5655: PUSH
5656: LD_VAR 0 4
5660: ARRAY
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_VAR 0 2
5670: PUSH
5671: LD_VAR 0 4
5675: ARRAY
5676: PUSH
5677: LD_INT 2
5679: ARRAY
5680: PPUSH
5681: CALL_OW 171
5685: GO 5595
5687: POP
5688: POP
// end ;
5689: LD_VAR 0 3
5693: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
// pom := GetBase ( bdepot ) ;
5699: LD_ADDR_VAR 0 4
5703: PUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 274
5713: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5714: LD_ADDR_VAR 0 5
5718: PUSH
5719: LD_VAR 0 2
5723: PPUSH
5724: LD_VAR 0 1
5728: PPUSH
5729: CALL_OW 248
5733: PPUSH
5734: CALL_OW 450
5738: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5739: LD_VAR 0 4
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 275
5751: PUSH
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: GREATEREQUAL
5761: PUSH
5762: LD_VAR 0 4
5766: PPUSH
5767: LD_INT 3
5769: PPUSH
5770: CALL_OW 275
5774: PUSH
5775: LD_VAR 0 5
5779: PUSH
5780: LD_INT 3
5782: ARRAY
5783: GREATEREQUAL
5784: AND
5785: IFFALSE 5797
// result := true else
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
5795: GO 5805
// result := false ;
5797: LD_ADDR_VAR 0 3
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// end ;
5805: LD_VAR 0 3
5809: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
5814: PPUSH
// pom := GetBase ( bdepot ) ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 274
5829: ST_TO_ADDR
// sor := [ ] ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: EMPTY
5836: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5837: LD_ADDR_VAR 0 4
5841: PUSH
5842: LD_VAR 0 4
5846: PUSH
5847: LD_VAR 0 3
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 275
5859: ADD
5860: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_VAR 0 4
5870: PUSH
5871: LD_VAR 0 3
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: CALL_OW 275
5883: ADD
5884: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_VAR 0 4
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: CALL_OW 275
5907: ADD
5908: ST_TO_ADDR
// result := sor ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_VAR 0 4
5918: ST_TO_ADDR
// end ;
5919: LD_VAR 0 2
5923: RET
// export function Hex ( x , y ) ; begin
5924: LD_INT 0
5926: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5927: LD_VAR 0 1
5931: PPUSH
5932: LD_VAR 0 2
5936: PPUSH
5937: CALL_OW 488
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: CALL_OW 428
5956: PUSH
5957: LD_INT 0
5959: EQUAL
5960: AND
5961: IFFALSE 5973
// result := true else
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 1
5970: ST_TO_ADDR
5971: GO 5981
// result := false ;
5973: LD_ADDR_VAR 0 3
5977: PUSH
5978: LD_INT 0
5980: ST_TO_ADDR
// end ;
5981: LD_VAR 0 3
5985: RET
// export function NeedBuilding ( side , btype ) ; begin
5986: LD_INT 0
5988: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
5989: LD_INT 22
5991: PUSH
5992: LD_VAR 0 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_VAR 0 2
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 3
6015: PUSH
6016: LD_INT 57
6018: PUSH
6019: EMPTY
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PPUSH
6031: CALL_OW 69
6035: PUSH
6036: LD_INT 0
6038: EQUAL
6039: IFFALSE 6051
// result := true else
6041: LD_ADDR_VAR 0 3
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
6049: GO 6059
// result := false ;
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// end ;
6059: LD_VAR 0 3
6063: RET
// export function NeedBase ( side ) ; begin
6064: LD_INT 0
6066: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6067: LD_VAR 0 1
6071: PPUSH
6072: LD_INT 0
6074: PPUSH
6075: CALL 5986 0 2
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL 5986 0 2
6092: AND
6093: IFFALSE 6105
// result := true else
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
6103: GO 6113
// result := false ;
6105: LD_ADDR_VAR 0 2
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// end ;
6113: LD_VAR 0 2
6117: RET
// export function MyBase ( side ) ; begin
6118: LD_INT 0
6120: PPUSH
// if not NeedBase ( side ) then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL 6064 0 1
6130: NOT
6131: IFFALSE 6196
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6133: LD_ADDR_VAR 0 2
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 2
6152: PUSH
6153: LD_INT 30
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: ST_TO_ADDR
6194: GO 6204
// result := false ;
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 2
6208: RET
// export function GetBuilding ( side , btype ) ; begin
6209: LD_INT 0
6211: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6212: LD_INT 22
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 30
6226: PUSH
6227: LD_VAR 0 2
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: LD_INT 0
6247: GREATER
6248: IFFALSE 6290
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6250: LD_ADDR_VAR 0 3
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 30
6269: PUSH
6270: LD_VAR 0 2
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 69
6287: ST_TO_ADDR
6288: GO 6298
// result := false ;
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// end ;
6298: LD_VAR 0 3
6302: RET
// export function GetCrates ( side ) ; begin
6303: LD_INT 0
6305: PPUSH
// result := 0 ;
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// if MyBase ( side ) then
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL 6118 0 1
6323: IFFALSE 6353
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL 6118 0 1
6339: PPUSH
6340: CALL_OW 274
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 275
6352: ST_TO_ADDR
// end ;
6353: LD_VAR 0 2
6357: RET
// export function GetLabs ( side ) ; begin
6358: LD_INT 0
6360: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 30
6383: PUSH
6384: LD_INT 6
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 8
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 30
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: PPUSH
6424: CALL_OW 69
6428: ST_TO_ADDR
// end ;
6429: LD_VAR 0 2
6433: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
6438: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6439: LD_ADDR_VAR 0 3
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: LD_INT 1
6451: PPUSH
6452: CALL_OW 268
6456: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6457: LD_ADDR_VAR 0 4
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 2
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: LD_VAR 0 3
6484: PUSH
6485: LD_VAR 0 4
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// end ;
6494: LD_VAR 0 2
6498: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6499: LD_INT 0
6501: PPUSH
6502: PPUSH
// result := false ;
6503: LD_ADDR_VAR 0 3
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// for i = 1 to tlist do
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_VAR 0 2
6525: PUSH
6526: FOR_TO
6527: IFFALSE 6567
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6529: LD_VAR 0 2
6533: PUSH
6534: LD_VAR 0 4
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 321
6549: PUSH
6550: LD_INT 2
6552: NONEQUAL
6553: IFFALSE 6565
// begin result := true ;
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// break ;
6563: GO 6567
// end ;
6565: GO 6526
6567: POP
6568: POP
// end ;
6569: LD_VAR 0 3
6573: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
// lab := GetLabs ( side ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL 6358 0 1
6598: ST_TO_ADDR
// tmp := 0 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 0
6606: ST_TO_ADDR
// list := [ ] ;
6607: LD_ADDR_VAR 0 8
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6614: LD_ADDR_VAR 0 10
6618: PUSH
6619: LD_INT 35
6621: PUSH
6622: LD_INT 45
6624: PUSH
6625: LD_INT 46
6627: PUSH
6628: LD_INT 47
6630: PUSH
6631: LD_INT 1
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 48
6639: PUSH
6640: LD_INT 49
6642: PUSH
6643: LD_INT 50
6645: PUSH
6646: LD_INT 20
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: ST_TO_ADDR
// for i = 1 to tlist do
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 2
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6729
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_VAR 0 4
6688: ARRAY
6689: PPUSH
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 321
6699: PUSH
6700: LD_INT 2
6702: NONEQUAL
6703: IFFALSE 6727
// list := list ^ tlist [ i ] ;
6705: LD_ADDR_VAR 0 8
6709: PUSH
6710: LD_VAR 0 8
6714: PUSH
6715: LD_VAR 0 2
6719: PUSH
6720: LD_VAR 0 4
6724: ARRAY
6725: ADD
6726: ST_TO_ADDR
6727: GO 6676
6729: POP
6730: POP
// if list then
6731: LD_VAR 0 8
6735: IFFALSE 6900
// begin for i = 1 to lab do
6737: LD_ADDR_VAR 0 4
6741: PUSH
6742: DOUBLE
6743: LD_INT 1
6745: DEC
6746: ST_TO_ADDR
6747: LD_VAR 0 5
6751: PUSH
6752: FOR_TO
6753: IFFALSE 6823
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6755: LD_VAR 0 8
6759: PUSH
6760: LD_INT 1
6762: ARRAY
6763: PUSH
6764: LD_VAR 0 10
6768: IN
6769: PUSH
6770: LD_VAR 0 8
6774: PUSH
6775: LD_INT 1
6777: ARRAY
6778: PPUSH
6779: CALL_OW 481
6783: PUSH
6784: LD_VAR 0 5
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: PPUSH
6795: CALL 6434 0 1
6799: IN
6800: OR
6801: IFFALSE 6821
// begin mylab := lab [ i ] ;
6803: LD_ADDR_VAR 0 9
6807: PUSH
6808: LD_VAR 0 5
6812: PUSH
6813: LD_VAR 0 4
6817: ARRAY
6818: ST_TO_ADDR
// break ;
6819: GO 6823
// end ;
6821: GO 6752
6823: POP
6824: POP
// if mylab then
6825: LD_VAR 0 9
6829: IFFALSE 6890
// begin if BuildingStatus ( mylab ) = bs_idle then
6831: LD_VAR 0 9
6835: PPUSH
6836: CALL_OW 461
6840: PUSH
6841: LD_INT 2
6843: EQUAL
6844: IFFALSE 6888
// for i = 1 to list do
6846: LD_ADDR_VAR 0 4
6850: PUSH
6851: DOUBLE
6852: LD_INT 1
6854: DEC
6855: ST_TO_ADDR
6856: LD_VAR 0 8
6860: PUSH
6861: FOR_TO
6862: IFFALSE 6886
// AddComResearch ( mylab , list [ i ] ) ;
6864: LD_VAR 0 9
6868: PPUSH
6869: LD_VAR 0 8
6873: PUSH
6874: LD_VAR 0 4
6878: ARRAY
6879: PPUSH
6880: CALL_OW 184
6884: GO 6861
6886: POP
6887: POP
// end else
6888: GO 6898
// result := false ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// end else
6898: GO 6908
// result := false ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// end ;
6908: LD_VAR 0 3
6912: RET
// export function GetTowers ( side ) ; begin
6913: LD_INT 0
6915: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6916: LD_ADDR_VAR 0 2
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_VAR 0 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 32
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 30
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 2
6974: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
// if Hex ( x , y ) then
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_VAR 0 3
6988: PPUSH
6989: CALL 5924 0 2
6993: IFFALSE 7068
// for i = 1 to plist do
6995: LD_ADDR_VAR 0 6
6999: PUSH
7000: DOUBLE
7001: LD_INT 1
7003: DEC
7004: ST_TO_ADDR
7005: LD_VAR 0 1
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7066
// if not HasTask ( plist [ i ] ) then
7013: LD_VAR 0 1
7017: PUSH
7018: LD_VAR 0 6
7022: ARRAY
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: IFFALSE 7064
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: LD_INT 0
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: LD_VAR 0 4
7059: PPUSH
7060: CALL_OW 145
7064: GO 7010
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 5
7072: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 266
7086: PUSH
7087: LD_INT 0
7089: EQUAL
7090: PUSH
7091: LD_VAR 0 2
7095: PPUSH
7096: LD_INT 1
7098: PPUSH
7099: CALL 5694 0 2
7103: AND
7104: PUSH
7105: LD_VAR 0 1
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: CALL_OW 255
7118: PPUSH
7119: CALL_OW 345
7123: NOT
7124: AND
7125: IFFALSE 7221
// begin ComUpgrade ( bident ) ;
7127: LD_VAR 0 2
7131: PPUSH
7132: CALL_OW 146
// for i = 1 to plist do
7136: LD_ADDR_VAR 0 4
7140: PUSH
7141: DOUBLE
7142: LD_INT 1
7144: DEC
7145: ST_TO_ADDR
7146: LD_VAR 0 1
7150: PUSH
7151: FOR_TO
7152: IFFALSE 7209
// if not HasTask ( plist [ i ] ) then
7154: LD_VAR 0 1
7158: PUSH
7159: LD_VAR 0 4
7163: ARRAY
7164: PPUSH
7165: CALL_OW 314
7169: NOT
7170: IFFALSE 7207
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: CALL_OW 250
7192: PPUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 251
7202: PPUSH
7203: CALL_OW 111
7207: GO 7151
7209: POP
7210: POP
// result := true ;
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// end else
7219: GO 7229
// result := false ;
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// end ;
7229: LD_VAR 0 3
7233: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7238: LD_VAR 0 1
7242: PUSH
7243: LD_INT 1
7245: ARRAY
7246: PPUSH
7247: CALL_OW 255
7251: PPUSH
7252: CALL 6303 0 1
7256: PUSH
7257: LD_INT 20
7259: GREATEREQUAL
7260: PUSH
7261: LD_VAR 0 2
7265: PPUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL 5924 0 2
7275: AND
7276: IFFALSE 7361
// begin for i = 1 to plist do
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: DOUBLE
7284: LD_INT 1
7286: DEC
7287: ST_TO_ADDR
7288: LD_VAR 0 1
7292: PUSH
7293: FOR_TO
7294: IFFALSE 7349
// if not HasTask ( plist [ i ] ) then
7296: LD_VAR 0 1
7300: PUSH
7301: LD_VAR 0 6
7305: ARRAY
7306: PPUSH
7307: CALL_OW 314
7311: NOT
7312: IFFALSE 7347
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: LD_VAR 0 3
7337: PPUSH
7338: LD_VAR 0 4
7342: PPUSH
7343: CALL_OW 145
7347: GO 7293
7349: POP
7350: POP
// result := true ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// end else
7359: GO 7369
// result := false ;
7361: LD_ADDR_VAR 0 5
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// end ;
7369: LD_VAR 0 5
7373: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7374: LD_INT 0
7376: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7377: LD_VAR 0 1
7381: PPUSH
7382: LD_INT 1
7384: PPUSH
7385: CALL_OW 268
7389: PUSH
7390: LD_INT 9
7392: EQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: CALL_OW 268
7406: PUSH
7407: LD_INT 9
7409: EQUAL
7410: AND
7411: IFFALSE 7508
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_VAR 0 2
7422: PPUSH
7423: CALL 5694 0 2
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: CALL 5694 0 2
7442: AND
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 461
7453: PUSH
7454: LD_INT 2
7456: EQUAL
7457: AND
7458: IFFALSE 7498
// begin ComUpgradeLab ( lab , bkind1 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_VAR 0 2
7469: PPUSH
7470: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: LD_VAR 0 3
7483: PPUSH
7484: CALL_OW 207
// result := true ;
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// end else
7496: GO 7506
// result := false ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 0
7505: ST_TO_ADDR
// end else
7506: GO 7516
// result := false ;
7508: LD_ADDR_VAR 0 4
7512: PUSH
7513: LD_INT 0
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 4
7520: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7521: LD_INT 0
7523: PPUSH
7524: PPUSH
7525: PPUSH
7526: PPUSH
7527: PPUSH
// p := 1 ;
7528: LD_ADDR_VAR 0 6
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 4
7553: DIVREAL
7554: PUSH
7555: FOR_TO
7556: IFFALSE 7805
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7558: LD_VAR 0 2
7562: PUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 1
7570: PLUS
7571: ARRAY
7572: PPUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 6
7582: PUSH
7583: LD_INT 2
7585: PLUS
7586: ARRAY
7587: PPUSH
7588: CALL_OW 428
7592: PUSH
7593: LD_INT 0
7595: EQUAL
7596: PUSH
7597: LD_VAR 0 2
7601: PUSH
7602: LD_VAR 0 6
7606: PUSH
7607: LD_INT 1
7609: PLUS
7610: ARRAY
7611: PPUSH
7612: LD_VAR 0 2
7616: PUSH
7617: LD_VAR 0 6
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: ARRAY
7626: PPUSH
7627: CALL 5924 0 2
7631: AND
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PPUSH
7642: CALL_OW 255
7646: PPUSH
7647: CALL 6303 0 1
7651: PUSH
7652: LD_INT 20
7654: GREATEREQUAL
7655: AND
7656: IFFALSE 7773
// begin for c = 1 to plist do
7658: LD_ADDR_VAR 0 7
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 1
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7767
// if not HasTask ( plist [ c ] ) then
7676: LD_VAR 0 1
7680: PUSH
7681: LD_VAR 0 7
7685: ARRAY
7686: PPUSH
7687: CALL_OW 314
7691: NOT
7692: IFFALSE 7765
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: LD_VAR 0 2
7709: PUSH
7710: LD_VAR 0 6
7714: ARRAY
7715: PPUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 1
7728: PLUS
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 2
7735: PUSH
7736: LD_VAR 0 6
7740: PUSH
7741: LD_INT 2
7743: PLUS
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 6
7755: PUSH
7756: LD_INT 3
7758: PLUS
7759: ARRAY
7760: PPUSH
7761: CALL_OW 145
7765: GO 7673
7767: POP
7768: POP
// break ;
7769: GO 7805
// end else
7771: GO 7803
// if ( p + 4 < tlist ) then
7773: LD_VAR 0 6
7777: PUSH
7778: LD_INT 4
7780: PLUS
7781: PUSH
7782: LD_VAR 0 2
7786: LESS
7787: IFFALSE 7803
// p := p + 4 ;
7789: LD_ADDR_VAR 0 6
7793: PUSH
7794: LD_VAR 0 6
7798: PUSH
7799: LD_INT 4
7801: PLUS
7802: ST_TO_ADDR
// end ;
7803: GO 7555
7805: POP
7806: POP
// end ;
7807: LD_VAR 0 3
7811: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
// tmp := GetTowers ( side ) ;
7818: LD_ADDR_VAR 0 5
7822: PUSH
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL 6913 0 1
7832: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7833: LD_ADDR_VAR 0 6
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 3
7845: PPUSH
7846: CALL 6209 0 2
7850: PUSH
7851: LD_INT 1
7853: ARRAY
7854: ST_TO_ADDR
// if fac then
7855: LD_VAR 0 6
7859: IFFALSE 7955
// for i = 1 to tmp do
7861: LD_ADDR_VAR 0 4
7865: PUSH
7866: DOUBLE
7867: LD_INT 1
7869: DEC
7870: ST_TO_ADDR
7871: LD_VAR 0 5
7875: PUSH
7876: FOR_TO
7877: IFFALSE 7953
// if GetBWeapon ( tmp [ i ] ) = 0 then
7879: LD_VAR 0 5
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PPUSH
7890: CALL_OW 269
7894: PUSH
7895: LD_INT 0
7897: EQUAL
7898: IFFALSE 7951
// begin if BuildingStatus ( fac ) = bs_idle then
7900: LD_VAR 0 6
7904: PPUSH
7905: CALL_OW 461
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: IFFALSE 7949
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7915: LD_VAR 0 5
7919: PUSH
7920: LD_VAR 0 4
7924: ARRAY
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: PPUSH
7934: LD_VAR 0 2
7938: PPUSH
7939: CALL_OW 12
7943: ARRAY
7944: PPUSH
7945: CALL_OW 148
// break ;
7949: GO 7953
// end ;
7951: GO 7876
7953: POP
7954: POP
// end ;
7955: LD_VAR 0 3
7959: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7960: LD_INT 0
7962: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7963: LD_INT 22
7965: PUSH
7966: LD_VAR 0 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 34
7977: PUSH
7978: LD_VAR 0 3
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 31
7989: PUSH
7990: LD_VAR 0 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: PPUSH
8007: CALL_OW 69
8011: IFFALSE 8069
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_INT 22
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 34
8032: PUSH
8033: LD_VAR 0 3
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 31
8044: PUSH
8045: LD_VAR 0 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: ST_TO_ADDR
8067: GO 8077
// result := false ;
8069: LD_ADDR_VAR 0 4
8073: PUSH
8074: LD_INT 0
8076: ST_TO_ADDR
// end ;
8077: LD_VAR 0 4
8081: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8082: LD_INT 0
8084: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: LD_VAR 0 5
8109: PPUSH
8110: CALL_OW 448
8114: PUSH
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_VAR 0 3
8124: PPUSH
8125: LD_VAR 0 4
8129: PPUSH
8130: LD_VAR 0 5
8134: PPUSH
8135: CALL_OW 449
8139: PUSH
8140: LD_INT 1
8142: ARRAY
8143: PUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL 5810 0 1
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: LESSEQUAL
8158: AND
8159: PUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: LD_VAR 0 3
8169: PPUSH
8170: LD_VAR 0 4
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 449
8184: PUSH
8185: LD_INT 2
8187: ARRAY
8188: PUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL 5810 0 1
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: LESSEQUAL
8203: AND
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_VAR 0 3
8214: PPUSH
8215: LD_VAR 0 4
8219: PPUSH
8220: LD_VAR 0 5
8224: PPUSH
8225: CALL_OW 449
8229: PUSH
8230: LD_INT 3
8232: ARRAY
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL 5810 0 1
8243: PUSH
8244: LD_INT 3
8246: ARRAY
8247: LESSEQUAL
8248: AND
8249: IFFALSE 8296
// begin if debug then
8251: LD_EXP 1
8255: IFFALSE 8265
// display_strings := Factory work! ;
8257: LD_ADDR_OWVAR 47
8261: PUSH
8262: LD_STRING Factory work!
8264: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_VAR 0 5
8289: PPUSH
8290: CALL_OW 125
// end else
8294: GO 8304
// result := false ;
8296: LD_ADDR_VAR 0 6
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// end ;
8304: LD_VAR 0 6
8308: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8309: LD_INT 0
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8315: LD_ADDR_VAR 0 6
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 30
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PPUSH
8348: CALL_OW 69
8352: ST_TO_ADDR
// tmp := [ ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for i = 1 to filter do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_VAR 0 6
8374: PUSH
8375: FOR_TO
8376: IFFALSE 8464
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_VAR 0 5
8387: PUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_VAR 0 4
8397: ARRAY
8398: PPUSH
8399: CALL_OW 266
8403: PUSH
8404: LD_VAR 0 6
8408: PUSH
8409: LD_VAR 0 4
8413: ARRAY
8414: PPUSH
8415: CALL_OW 250
8419: PUSH
8420: LD_VAR 0 6
8424: PUSH
8425: LD_VAR 0 4
8429: ARRAY
8430: PPUSH
8431: CALL_OW 251
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_VAR 0 4
8445: ARRAY
8446: PPUSH
8447: CALL_OW 254
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: ADD
8461: ST_TO_ADDR
// end ;
8462: GO 8375
8464: POP
8465: POP
// result := tmp ;
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: LD_VAR 0 5
8475: ST_TO_ADDR
// end ;
8476: LD_VAR 0 3
8480: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8481: LD_INT 0
8483: PPUSH
8484: PPUSH
8485: PPUSH
// for i = 1 to list do
8486: LD_ADDR_VAR 0 4
8490: PUSH
8491: DOUBLE
8492: LD_INT 1
8494: DEC
8495: ST_TO_ADDR
8496: LD_VAR 0 2
8500: PUSH
8501: FOR_TO
8502: IFFALSE 9057
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8504: LD_VAR 0 2
8508: PUSH
8509: LD_VAR 0 4
8513: ARRAY
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 2
8523: PUSH
8524: LD_VAR 0 4
8528: ARRAY
8529: PUSH
8530: LD_INT 2
8532: ARRAY
8533: PPUSH
8534: CALL_OW 428
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: IFFALSE 8828
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8544: LD_VAR 0 2
8548: PUSH
8549: LD_VAR 0 4
8553: ARRAY
8554: PUSH
8555: LD_INT 1
8557: ARRAY
8558: PPUSH
8559: LD_VAR 0 2
8563: PUSH
8564: LD_VAR 0 4
8568: ARRAY
8569: PUSH
8570: LD_INT 2
8572: ARRAY
8573: PPUSH
8574: CALL_OW 428
8578: PPUSH
8579: CALL_OW 248
8583: PUSH
8584: LD_INT 3
8586: EQUAL
8587: IFFALSE 8713
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_VAR 0 4
8598: ARRAY
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_VAR 0 4
8613: ARRAY
8614: PUSH
8615: LD_INT 2
8617: ARRAY
8618: PPUSH
8619: CALL_OW 428
8623: PPUSH
8624: CALL_OW 274
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: CALL_OW 275
8636: PUSH
8637: LD_INT 15
8639: GREATEREQUAL
8640: IFFALSE 8711
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8642: LD_VAR 0 2
8646: PUSH
8647: LD_VAR 0 4
8651: ARRAY
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 2
8661: PUSH
8662: LD_VAR 0 4
8666: ARRAY
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: CALL_OW 428
8676: PPUSH
8677: LD_VAR 0 2
8681: PUSH
8682: LD_VAR 0 4
8686: ARRAY
8687: PUSH
8688: LD_INT 4
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 2
8696: PUSH
8697: LD_VAR 0 4
8701: ARRAY
8702: PUSH
8703: LD_INT 5
8705: ARRAY
8706: PPUSH
8707: CALL 7374 0 3
// end else
8711: GO 8782
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8713: LD_VAR 0 2
8717: PUSH
8718: LD_VAR 0 4
8722: ARRAY
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: LD_VAR 0 2
8732: PUSH
8733: LD_VAR 0 4
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: PPUSH
8743: CALL_OW 428
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 4
8761: ARRAY
8762: PPUSH
8763: LD_VAR 0 2
8767: PUSH
8768: LD_VAR 0 4
8772: ARRAY
8773: PUSH
8774: LD_INT 5
8776: ARRAY
8777: PPUSH
8778: CALL 7374 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8782: LD_VAR 0 1
8786: PPUSH
8787: LD_VAR 0 2
8791: PUSH
8792: LD_VAR 0 4
8796: ARRAY
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_VAR 0 4
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: PPUSH
8817: CALL_OW 428
8821: PPUSH
8822: CALL 10326 0 2
// end else
8826: GO 9055
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8828: LD_VAR 0 1
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PPUSH
8837: CALL_OW 255
8841: PPUSH
8842: CALL 6118 0 1
8846: PPUSH
8847: LD_INT 6
8849: PPUSH
8850: CALL 5694 0 2
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: CALL_OW 255
8868: PPUSH
8869: CALL 6118 0 1
8873: PPUSH
8874: LD_VAR 0 2
8878: PUSH
8879: LD_VAR 0 4
8883: ARRAY
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PPUSH
8889: CALL 5694 0 2
8893: AND
8894: PUSH
8895: LD_VAR 0 1
8899: PUSH
8900: LD_INT 1
8902: ARRAY
8903: PPUSH
8904: CALL_OW 255
8908: PPUSH
8909: CALL 6118 0 1
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: ARRAY
8924: PUSH
8925: LD_INT 5
8927: ARRAY
8928: PPUSH
8929: CALL 5694 0 2
8933: AND
8934: IFFALSE 9055
// for p = 1 to plist do
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_VAR 0 1
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9053
// if IsInUnit ( plist [ p ] ) then
8954: LD_VAR 0 1
8958: PUSH
8959: LD_VAR 0 5
8963: ARRAY
8964: PPUSH
8965: CALL_OW 310
8969: IFFALSE 8988
// ComExitBuilding ( plist [ p ] ) else
8971: LD_VAR 0 1
8975: PUSH
8976: LD_VAR 0 5
8980: ARRAY
8981: PPUSH
8982: CALL_OW 122
8986: GO 9051
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
8988: LD_VAR 0 1
8992: PUSH
8993: LD_VAR 0 5
8997: ARRAY
8998: PPUSH
8999: LD_INT 6
9001: PPUSH
9002: LD_VAR 0 2
9006: PUSH
9007: LD_VAR 0 4
9011: ARRAY
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: LD_VAR 0 2
9021: PUSH
9022: LD_VAR 0 4
9026: ARRAY
9027: PUSH
9028: LD_INT 2
9030: ARRAY
9031: PPUSH
9032: LD_VAR 0 2
9036: PUSH
9037: LD_VAR 0 4
9041: ARRAY
9042: PUSH
9043: LD_INT 3
9045: ARRAY
9046: PPUSH
9047: CALL_OW 145
9051: GO 8951
9053: POP
9054: POP
// end ;
9055: GO 8501
9057: POP
9058: POP
// end ;
9059: LD_VAR 0 3
9063: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9064: LD_INT 0
9066: PPUSH
// if IsInUnit ( sci ) then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 310
9076: IFFALSE 9089
// ComExitBuilding ( sci ) else
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 122
9087: GO 9120
// if not HasTask ( sci ) then
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 314
9098: NOT
9099: IFFALSE 9120
// begin ComMoveXY ( sci , x , y ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: CALL_OW 111
// end ; end ;
9120: LD_VAR 0 4
9124: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
9130: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_INT 22
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 21
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: PUSH
9167: LD_VAR 0 3
9171: DIFF
9172: ST_TO_ADDR
// tmp := tag_list ;
9173: LD_ADDR_VAR 0 7
9177: PUSH
9178: LD_VAR 0 2
9182: ST_TO_ADDR
// for i = 1 to filter do
9183: LD_ADDR_VAR 0 5
9187: PUSH
9188: DOUBLE
9189: LD_INT 1
9191: DEC
9192: ST_TO_ADDR
9193: LD_VAR 0 6
9197: PUSH
9198: FOR_TO
9199: IFFALSE 9468
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9201: LD_VAR 0 6
9205: PUSH
9206: LD_VAR 0 5
9210: ARRAY
9211: PPUSH
9212: CALL_OW 256
9216: PUSH
9217: LD_INT 1000
9219: EQUAL
9220: PUSH
9221: LD_VAR 0 6
9225: PUSH
9226: LD_VAR 0 5
9230: ARRAY
9231: PPUSH
9232: CALL_OW 110
9236: PUSH
9237: LD_INT 100
9239: GREATEREQUAL
9240: AND
9241: IFFALSE 9283
// begin SetTag ( filter [ i ] , 0 ) ;
9243: LD_VAR 0 6
9247: PUSH
9248: LD_VAR 0 5
9252: ARRAY
9253: PPUSH
9254: LD_INT 0
9256: PPUSH
9257: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9261: LD_ADDR_VAR 0 7
9265: PUSH
9266: LD_VAR 0 7
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_VAR 0 5
9280: ARRAY
9281: DIFF
9282: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9283: LD_VAR 0 6
9287: PUSH
9288: LD_VAR 0 5
9292: ARRAY
9293: PPUSH
9294: CALL_OW 256
9298: PUSH
9299: LD_INT 1000
9301: LESS
9302: IFFALSE 9466
// begin if not filter [ i ] in tmp then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_VAR 0 5
9313: ARRAY
9314: PUSH
9315: LD_VAR 0 7
9319: IN
9320: NOT
9321: IFFALSE 9345
// tmp := tmp ^ filter [ i ] ;
9323: LD_ADDR_VAR 0 7
9327: PUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_VAR 0 6
9337: PUSH
9338: LD_VAR 0 5
9342: ARRAY
9343: ADD
9344: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9345: LD_VAR 0 6
9349: PUSH
9350: LD_VAR 0 5
9354: ARRAY
9355: PPUSH
9356: CALL_OW 256
9360: PUSH
9361: LD_INT 250
9363: LESS
9364: IFFALSE 9386
// SetTag ( filter [ i ] , 100 ) else
9366: LD_VAR 0 6
9370: PUSH
9371: LD_VAR 0 5
9375: ARRAY
9376: PPUSH
9377: LD_INT 100
9379: PPUSH
9380: CALL_OW 109
9384: GO 9466
// if GetLives ( filter [ i ] ) < 500 then
9386: LD_VAR 0 6
9390: PUSH
9391: LD_VAR 0 5
9395: ARRAY
9396: PPUSH
9397: CALL_OW 256
9401: PUSH
9402: LD_INT 500
9404: LESS
9405: IFFALSE 9427
// SetTag ( filter [ i ] , 101 ) else
9407: LD_VAR 0 6
9411: PUSH
9412: LD_VAR 0 5
9416: ARRAY
9417: PPUSH
9418: LD_INT 101
9420: PPUSH
9421: CALL_OW 109
9425: GO 9466
// if GetLives ( filter [ i ] ) < 1000 then
9427: LD_VAR 0 6
9431: PUSH
9432: LD_VAR 0 5
9436: ARRAY
9437: PPUSH
9438: CALL_OW 256
9442: PUSH
9443: LD_INT 1000
9445: LESS
9446: IFFALSE 9466
// SetTag ( filter [ i ] , 102 ) ;
9448: LD_VAR 0 6
9452: PUSH
9453: LD_VAR 0 5
9457: ARRAY
9458: PPUSH
9459: LD_INT 102
9461: PPUSH
9462: CALL_OW 109
// end ; end ;
9466: GO 9198
9468: POP
9469: POP
// result := tmp ;
9470: LD_ADDR_VAR 0 4
9474: PUSH
9475: LD_VAR 0 7
9479: ST_TO_ADDR
// end ;
9480: LD_VAR 0 4
9484: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9492: LD_ADDR_VAR 0 7
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 3
9545: PPUSH
9546: CALL_OW 12
9550: ST_TO_ADDR
// if filter > 0 then
9551: LD_VAR 0 7
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 9761
// for i = 1 to list do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_VAR 0 1
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9759
// for ta in filter do
9579: LD_ADDR_VAR 0 4
9583: PUSH
9584: LD_VAR 0 7
9588: PUSH
9589: FOR_IN
9590: IFFALSE 9755
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9592: LD_VAR 0 1
9596: PUSH
9597: LD_VAR 0 6
9601: ARRAY
9602: PPUSH
9603: LD_VAR 0 4
9607: PPUSH
9608: CALL_OW 296
9612: PUSH
9613: LD_INT 13
9615: LESSEQUAL
9616: IFFALSE 9753
// begin case c of 1 :
9618: LD_VAR 0 5
9622: PUSH
9623: LD_INT 1
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9669
9631: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9632: LD_VAR 0 1
9636: PUSH
9637: LD_VAR 0 6
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 4
9647: PPUSH
9648: CALL_OW 250
9652: PPUSH
9653: LD_VAR 0 4
9657: PPUSH
9658: CALL_OW 251
9662: PPUSH
9663: CALL_OW 154
9667: GO 9753
9669: LD_INT 2
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9741
9677: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9678: LD_VAR 0 1
9682: PUSH
9683: LD_VAR 0 6
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 4
9693: PPUSH
9694: CALL_OW 250
9698: PUSH
9699: LD_INT 1
9701: NEG
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 12
9710: PLUS
9711: PPUSH
9712: LD_VAR 0 4
9716: PPUSH
9717: CALL_OW 251
9721: PUSH
9722: LD_INT 1
9724: NEG
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 12
9733: PLUS
9734: PPUSH
9735: CALL_OW 153
9739: GO 9753
9741: LD_INT 3
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9752
9749: POP
// ; end ;
9750: GO 9753
9752: POP
// end ; end ;
9753: GO 9589
9755: POP
9756: POP
9757: GO 9576
9759: POP
9760: POP
// end ;
9761: LD_VAR 0 3
9765: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9766: LD_INT 0
9768: PPUSH
9769: PPUSH
// for i = 1 to plist do
9770: LD_ADDR_VAR 0 3
9774: PUSH
9775: DOUBLE
9776: LD_INT 1
9778: DEC
9779: ST_TO_ADDR
9780: LD_VAR 0 1
9784: PUSH
9785: FOR_TO
9786: IFFALSE 9988
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9788: LD_VAR 0 1
9792: PUSH
9793: LD_VAR 0 3
9797: ARRAY
9798: PPUSH
9799: CALL_OW 310
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: PPUSH
9817: CALL_OW 69
9821: IN
9822: NOT
9823: IFFALSE 9968
// begin if IsInUnit ( plist [ i ] ) then
9825: LD_VAR 0 1
9829: PUSH
9830: LD_VAR 0 3
9834: ARRAY
9835: PPUSH
9836: CALL_OW 310
9840: IFFALSE 9859
// ComExitBuilding ( plist [ i ] ) else
9842: LD_VAR 0 1
9846: PUSH
9847: LD_VAR 0 3
9851: ARRAY
9852: PPUSH
9853: CALL_OW 122
9857: GO 9966
// if not HasTask ( plist [ i ] ) then
9859: LD_VAR 0 1
9863: PUSH
9864: LD_VAR 0 3
9868: ARRAY
9869: PPUSH
9870: CALL_OW 314
9874: NOT
9875: IFFALSE 9966
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: CALL_OW 255
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 30
9911: PUSH
9912: LD_INT 5
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: PPUSH
9928: LD_VAR 0 1
9932: PUSH
9933: LD_VAR 0 3
9937: ARRAY
9938: PPUSH
9939: CALL_OW 74
9943: PPUSH
9944: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9948: LD_VAR 0 1
9952: PUSH
9953: LD_VAR 0 3
9957: ARRAY
9958: PPUSH
9959: LD_INT 9
9961: PPUSH
9962: CALL_OW 183
// end ; end else
9966: GO 9986
// ComChangeProfession ( plist [ i ] , 9 ) ;
9968: LD_VAR 0 1
9972: PUSH
9973: LD_VAR 0 3
9977: ARRAY
9978: PPUSH
9979: LD_INT 9
9981: PPUSH
9982: CALL_OW 123
9986: GO 9785
9988: POP
9989: POP
// end ;
9990: LD_VAR 0 2
9994: RET
// export function GetHuman ( side ) ; begin
9995: LD_INT 0
9997: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_VAR 0 1
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 21
10017: PUSH
10018: LD_INT 1
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 25
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 25
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: ST_TO_ADDR
// end ;
10085: LD_VAR 0 2
10089: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
// uc_side := 0 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_nation := 0 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: DOUBLE
10117: LD_INT 1
10119: DEC
10120: ST_TO_ADDR
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: LD_INT 6
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: LD_OWVAR 67
10139: ARRAY
10140: PUSH
10141: FOR_TO
10142: IFFALSE 10213
// begin hc_class = class_tiger ;
10144: LD_ADDR_OWVAR 28
10148: PUSH
10149: LD_INT 14
10151: ST_TO_ADDR
// hc_gallery = sandnature ;
10152: LD_ADDR_OWVAR 33
10156: PUSH
10157: LD_STRING sandnature
10159: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10160: LD_ADDR_OWVAR 35
10164: PUSH
10165: LD_INT 0
10167: PPUSH
10168: LD_INT 50
10170: PPUSH
10171: CALL_OW 12
10175: ST_TO_ADDR
// hc_face_number = 3 ;
10176: LD_ADDR_OWVAR 34
10180: PUSH
10181: LD_INT 3
10183: ST_TO_ADDR
// tiger := CreateHuman ;
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: CALL_OW 44
10193: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: LD_INT 0
10206: PPUSH
10207: CALL_OW 49
// end ;
10211: GO 10141
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10220: LD_INT 0
10222: PPUSH
10223: PPUSH
10224: PPUSH
// uc_side := 0 ;
10225: LD_ADDR_OWVAR 20
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// uc_nation := 0 ;
10233: LD_ADDR_OWVAR 21
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// for i = 1 to 8 do
10241: LD_ADDR_VAR 0 4
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_INT 8
10253: PUSH
10254: FOR_TO
10255: IFFALSE 10319
// begin hc_class = class_apeman ;
10257: LD_ADDR_OWVAR 28
10261: PUSH
10262: LD_INT 12
10264: ST_TO_ADDR
// hc_gallery =  ;
10265: LD_ADDR_OWVAR 33
10269: PUSH
10270: LD_STRING 
10272: ST_TO_ADDR
// hc_agressivity = Rand ( - 2 , 2 ) ;
10273: LD_ADDR_OWVAR 35
10277: PUSH
10278: LD_INT 2
10280: NEG
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: CALL_OW 12
10289: ST_TO_ADDR
// ape := CreateHuman ;
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: CALL_OW 44
10299: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// end ;
10317: GO 10254
10319: POP
10320: POP
// end ;
10321: LD_VAR 0 2
10325: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// if BuildingStatus ( b ) = bs_build then
10330: LD_VAR 0 2
10334: PPUSH
10335: CALL_OW 461
10339: PUSH
10340: LD_INT 1
10342: EQUAL
10343: IFFALSE 10529
// for i = 1 to plist do
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: DOUBLE
10351: LD_INT 1
10353: DEC
10354: ST_TO_ADDR
10355: LD_VAR 0 1
10359: PUSH
10360: FOR_TO
10361: IFFALSE 10527
// if IsInUnit ( plist [ i ] ) then
10363: LD_VAR 0 1
10367: PUSH
10368: LD_VAR 0 4
10372: ARRAY
10373: PPUSH
10374: CALL_OW 310
10378: IFFALSE 10461
// begin ComExitBuilding ( plist [ i ] ) ;
10380: LD_VAR 0 1
10384: PUSH
10385: LD_VAR 0 4
10389: ARRAY
10390: PPUSH
10391: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10395: LD_VAR 0 1
10399: PUSH
10400: LD_VAR 0 4
10404: ARRAY
10405: PPUSH
10406: LD_STRING h
10408: PUSH
10409: LD_VAR 0 2
10413: PPUSH
10414: CALL_OW 250
10418: PUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 251
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: PPUSH
10455: CALL_OW 447
// end else
10459: GO 10525
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10461: LD_VAR 0 1
10465: PUSH
10466: LD_VAR 0 4
10470: ARRAY
10471: PPUSH
10472: LD_STRING h
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 251
10494: PUSH
10495: LD_VAR 0 2
10499: PUSH
10500: LD_INT 0
10502: PUSH
10503: LD_INT 0
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: PPUSH
10521: CALL_OW 446
10525: GO 10360
10527: POP
10528: POP
// end ;
10529: LD_VAR 0 3
10533: RET
// export function WantRepair ( eng ) ; begin
10534: LD_INT 0
10536: PPUSH
// if GetTaskList ( eng ) > 0 then
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 437
10546: PUSH
10547: LD_INT 0
10549: GREATER
10550: IFFALSE 10595
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 437
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PUSH
10566: LD_INT 1
10568: ARRAY
10569: PUSH
10570: LD_STRING o
10572: EQUAL
10573: IFFALSE 10585
// result := true else
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
10583: GO 10593
// result := false ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 0
10592: ST_TO_ADDR
// end else
10593: GO 10603
// result := false ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// end ;
10603: LD_VAR 0 2
10607: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// if btype = - 1 then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: NEG
10622: EQUAL
10623: IFFALSE 10663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10625: LD_ADDR_VAR 0 5
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: ST_TO_ADDR
10661: GO 10701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10663: LD_ADDR_VAR 0 5
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_VAR 0 2
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// list := [ ] ;
10701: LD_ADDR_VAR 0 6
10705: PUSH
10706: EMPTY
10707: ST_TO_ADDR
// for i = 1 to tmp do
10708: LD_ADDR_VAR 0 4
10712: PUSH
10713: DOUBLE
10714: LD_INT 1
10716: DEC
10717: ST_TO_ADDR
10718: LD_VAR 0 5
10722: PUSH
10723: FOR_TO
10724: IFFALSE 10812
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10726: LD_ADDR_VAR 0 6
10730: PUSH
10731: LD_VAR 0 6
10735: PUSH
10736: LD_VAR 0 5
10740: PUSH
10741: LD_VAR 0 4
10745: ARRAY
10746: PPUSH
10747: CALL_OW 266
10751: PUSH
10752: LD_VAR 0 5
10756: PUSH
10757: LD_VAR 0 4
10761: ARRAY
10762: PPUSH
10763: CALL_OW 250
10767: PUSH
10768: LD_VAR 0 5
10772: PUSH
10773: LD_VAR 0 4
10777: ARRAY
10778: PPUSH
10779: CALL_OW 251
10783: PUSH
10784: LD_VAR 0 5
10788: PUSH
10789: LD_VAR 0 4
10793: ARRAY
10794: PPUSH
10795: CALL_OW 254
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: ADD
10809: ST_TO_ADDR
10810: GO 10723
10812: POP
10813: POP
// result = list ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_VAR 0 6
10823: ST_TO_ADDR
// end ;
10824: LD_VAR 0 3
10828: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 81
10842: PUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 255
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PPUSH
10862: LD_VAR 0 1
10866: PPUSH
10867: CALL_OW 74
10871: PPUSH
10872: CALL_OW 296
10876: PUSH
10877: LD_INT 18
10879: LESS
10880: IFFALSE 10925
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 81
10889: PUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 255
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 69
10908: PPUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: CALL_OW 74
10918: PPUSH
10919: CALL_OW 115
10923: GO 10944
// ComMoveXY ( behemoth , x , y ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_VAR 0 4
10934: PPUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: CALL_OW 111
// if time_lapsers_list > 0 then
10944: LD_VAR 0 2
10948: PUSH
10949: LD_INT 0
10951: GREATER
10952: IFFALSE 11142
// begin for i = 1 to time_lapsers_list do
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: DOUBLE
10960: LD_INT 1
10962: DEC
10963: ST_TO_ADDR
10964: LD_VAR 0 2
10968: PUSH
10969: FOR_TO
10970: IFFALSE 11140
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10972: LD_VAR 0 2
10976: PUSH
10977: LD_VAR 0 7
10981: ARRAY
10982: PPUSH
10983: CALL_OW 256
10987: PUSH
10988: LD_INT 250
10990: GREATEREQUAL
10991: PUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 7
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 296
11012: PUSH
11013: LD_INT 9
11015: GREATER
11016: AND
11017: IFFALSE 11054
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 7
11028: ARRAY
11029: PPUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 250
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 251
11049: PPUSH
11050: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11054: LD_VAR 0 2
11058: PUSH
11059: LD_VAR 0 7
11063: ARRAY
11064: PPUSH
11065: CALL_OW 256
11069: PUSH
11070: LD_INT 500
11072: LESS
11073: PUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 256
11083: PUSH
11084: LD_INT 700
11086: GREATER
11087: AND
11088: IFFALSE 11138
// for p = 1 to mechanic_list do
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: DOUBLE
11096: LD_INT 1
11098: DEC
11099: ST_TO_ADDR
11100: LD_VAR 0 3
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11136
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11108: LD_VAR 0 3
11112: PUSH
11113: LD_VAR 0 8
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 2
11123: PUSH
11124: LD_VAR 0 7
11128: ARRAY
11129: PPUSH
11130: CALL_OW 129
11134: GO 11105
11136: POP
11137: POP
// end ;
11138: GO 10969
11140: POP
11141: POP
// end ; if mechanic_list then
11142: LD_VAR 0 3
11146: IFFALSE 11327
// begin for i = 1 to mechanic_list do
11148: LD_ADDR_VAR 0 7
11152: PUSH
11153: DOUBLE
11154: LD_INT 1
11156: DEC
11157: ST_TO_ADDR
11158: LD_VAR 0 3
11162: PUSH
11163: FOR_TO
11164: IFFALSE 11325
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 7
11175: ARRAY
11176: PPUSH
11177: CALL_OW 256
11181: PUSH
11182: LD_INT 333
11184: LESS
11185: IFFALSE 11209
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11187: LD_ADDR_EXP 15
11191: PUSH
11192: LD_EXP 15
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 7
11206: ARRAY
11207: DIFF
11208: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_VAR 0 7
11218: ARRAY
11219: PPUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 296
11229: PUSH
11230: LD_INT 9
11232: GREATER
11233: PUSH
11234: LD_VAR 0 3
11238: PUSH
11239: LD_VAR 0 7
11243: ARRAY
11244: PPUSH
11245: CALL_OW 314
11249: NOT
11250: AND
11251: IFFALSE 11288
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11253: LD_VAR 0 3
11257: PUSH
11258: LD_VAR 0 7
11262: ARRAY
11263: PPUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 250
11273: PPUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 251
11283: PPUSH
11284: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 256
11297: PUSH
11298: LD_INT 700
11300: LESS
11301: IFFALSE 11323
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11303: LD_VAR 0 3
11307: PUSH
11308: LD_VAR 0 7
11312: ARRAY
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 129
// end ;
11323: GO 11163
11325: POP
11326: POP
// end ; end ;
11327: LD_VAR 0 6
11331: RET
// export function GetBehemoth ( side ) ; begin
11332: LD_INT 0
11334: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_VAR 0 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 31
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// end ;
11371: LD_VAR 0 2
11375: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11376: LD_INT 0
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11384: LD_ADDR_VAR 0 6
11388: PUSH
11389: LD_VAR 0 2
11393: PPUSH
11394: CALL_OW 435
11398: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11399: LD_ADDR_VAR 0 5
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_VAR 0 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: ST_TO_ADDR
// if skr then
11453: LD_VAR 0 6
11457: IFFALSE 11622
// begin if engs then
11459: LD_VAR 0 5
11463: IFFALSE 11622
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11465: LD_ADDR_VAR 0 8
11469: PUSH
11470: LD_VAR 0 6
11474: PUSH
11475: LD_INT 1
11477: ARRAY
11478: PPUSH
11479: LD_VAR 0 6
11483: PUSH
11484: LD_INT 2
11486: ARRAY
11487: PPUSH
11488: CALL_OW 284
11492: ST_TO_ADDR
// if am > engs then
11493: LD_VAR 0 8
11497: PUSH
11498: LD_VAR 0 5
11502: GREATER
11503: IFFALSE 11515
// am := engs ;
11505: LD_ADDR_VAR 0 8
11509: PUSH
11510: LD_VAR 0 5
11514: ST_TO_ADDR
// for i = 1 to am do
11515: LD_ADDR_VAR 0 7
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_VAR 0 8
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11620
// begin if IsInUnit ( engs [ i ] ) then
11533: LD_VAR 0 5
11537: PUSH
11538: LD_VAR 0 7
11542: ARRAY
11543: PPUSH
11544: CALL_OW 310
11548: IFFALSE 11567
// ComExitBuilding ( engs [ i ] ) else
11550: LD_VAR 0 5
11554: PUSH
11555: LD_VAR 0 7
11559: ARRAY
11560: PPUSH
11561: CALL_OW 122
11565: GO 11618
// if not HasTask ( engs [ i ] ) then
11567: LD_VAR 0 5
11571: PUSH
11572: LD_VAR 0 7
11576: ARRAY
11577: PPUSH
11578: CALL_OW 314
11582: NOT
11583: IFFALSE 11618
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: LD_VAR 0 6
11600: PUSH
11601: LD_INT 1
11603: ARRAY
11604: PPUSH
11605: LD_VAR 0 6
11609: PUSH
11610: LD_INT 2
11612: ARRAY
11613: PPUSH
11614: CALL_OW 117
// end ;
11618: GO 11530
11620: POP
11621: POP
// end ; end ; end ; end_of_file
11622: LD_VAR 0 3
11626: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// uc_side := 1 ;
11631: LD_ADDR_OWVAR 20
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// uc_nation := 1 ;
11639: LD_ADDR_OWVAR 21
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 6
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: LD_INT 4
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: LD_OWVAR 67
11670: ARRAY
11671: ST_TO_ADDR
// game_status := false ;
11672: LD_ADDR_EXP 29
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// helps_arrive := false ;
11680: LD_ADDR_EXP 30
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// helps_can_arrive := false ;
11688: LD_ADDR_EXP 31
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// beta_come := false ;
11696: LD_ADDR_EXP 32
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// gamma_come := false ;
11704: LD_ADDR_EXP 33
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// zeta_come := false ;
11712: LD_ADDR_EXP 34
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// mine_ck := false ;
11720: LD_ADDR_EXP 35
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sib_bomb_constructed := false ;
11728: LD_ADDR_EXP 36
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// mine_constructed := false ;
11736: LD_ADDR_EXP 37
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11744: LD_INT 35
11746: PPUSH
11747: CALL_OW 274
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: LD_INT 200
11757: PUSH
11758: LD_INT 100
11760: PUSH
11761: LD_INT 70
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: PUSH
11769: LD_OWVAR 67
11773: ARRAY
11774: PPUSH
11775: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11779: LD_INT 35
11781: PPUSH
11782: LD_INT 4
11784: PPUSH
11785: CALL_OW 235
// hc_importance := 100 ;
11789: LD_ADDR_OWVAR 32
11793: PUSH
11794: LD_INT 100
11796: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 2
11802: PPUSH
11803: LD_VAR 0 2
11807: PUSH
11808: LD_INT 1
11810: PLUS
11811: PPUSH
11812: CALL_OW 380
// hc_gallery := hardch ;
11816: LD_ADDR_OWVAR 33
11820: PUSH
11821: LD_STRING hardch
11823: ST_TO_ADDR
// hc_face_number := 1 ;
11824: LD_ADDR_OWVAR 34
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// guyA := CreateHuman ;
11832: LD_ADDR_EXP 38
11836: PUSH
11837: CALL_OW 44
11841: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11842: LD_INT 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL_OW 380
// hc_face_number := 2 ;
11857: LD_ADDR_OWVAR 34
11861: PUSH
11862: LD_INT 2
11864: ST_TO_ADDR
// guyB := CreateHuman ;
11865: LD_ADDR_EXP 39
11869: PUSH
11870: CALL_OW 44
11874: ST_TO_ADDR
// hc_importance := 0 ;
11875: LD_ADDR_OWVAR 32
11879: PUSH
11880: LD_INT 0
11882: ST_TO_ADDR
// hc_gallery :=  ;
11883: LD_ADDR_OWVAR 33
11887: PUSH
11888: LD_STRING 
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
// uc_side := 4 ;
11907: LD_ADDR_OWVAR 20
11911: PUSH
11912: LD_INT 4
11914: ST_TO_ADDR
// uc_nation := 1 ;
11915: LD_ADDR_OWVAR 21
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11923: LD_ADDR_VAR 0 10
11927: PUSH
11928: LD_INT 6
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_OWVAR 67
11946: ARRAY
11947: ST_TO_ADDR
// Beta_Squad := [ ] ;
11948: LD_ADDR_EXP 40
11952: PUSH
11953: EMPTY
11954: ST_TO_ADDR
// case num of 1 :
11955: LD_VAR 0 1
11959: PUSH
11960: LD_INT 1
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12011
11968: POP
// begin sold := 2 ;
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_INT 2
11976: ST_TO_ADDR
// sci := 1 ;
11977: LD_ADDR_VAR 0 6
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// mech := 2 ;
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_INT 2
11992: ST_TO_ADDR
// tank := 1 ;
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// cargo := 1 ;
12001: LD_ADDR_VAR 0 9
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// end ; 2 :
12009: GO 12114
12011: LD_INT 2
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12062
12019: POP
// begin sold := 2 ;
12020: LD_ADDR_VAR 0 5
12024: PUSH
12025: LD_INT 2
12027: ST_TO_ADDR
// sci := 1 ;
12028: LD_ADDR_VAR 0 6
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// mech := 1 ;
12036: LD_ADDR_VAR 0 7
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// tank := 1 ;
12044: LD_ADDR_VAR 0 8
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// cargo := 0 ;
12052: LD_ADDR_VAR 0 9
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// end ; 3 :
12060: GO 12114
12062: LD_INT 3
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12113
12070: POP
// begin sold := 1 ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// sci := 1 ;
12079: LD_ADDR_VAR 0 6
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// mech := 1 ;
12087: LD_ADDR_VAR 0 7
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// tank := 1 ;
12095: LD_ADDR_VAR 0 8
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// cargo := 0 ;
12103: LD_ADDR_VAR 0 9
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// end ; end ;
12111: GO 12114
12113: POP
// for i = 1 to sold do
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_VAR 0 5
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12202
// begin if i = 1 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: EQUAL
12140: IFFALSE 12159
// PrepareHuman ( sex_male , 1 , skill ) else
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: LD_VAR 0 10
12152: PPUSH
12153: CALL_OW 380
12157: GO 12174
// PrepareHuman ( false , 1 , skill ) ;
12159: LD_INT 0
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: LD_VAR 0 10
12169: PPUSH
12170: CALL_OW 380
// un := CreateHuman ;
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: CALL_OW 44
12183: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12184: LD_ADDR_EXP 40
12188: PUSH
12189: LD_EXP 40
12193: PUSH
12194: LD_VAR 0 4
12198: ADD
12199: ST_TO_ADDR
// end ;
12200: GO 12129
12202: POP
12203: POP
// for i = 1 to mech do
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: DOUBLE
12210: LD_INT 1
12212: DEC
12213: ST_TO_ADDR
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12277
// begin PrepareHuman ( false , 3 , skill ) ;
12222: LD_INT 0
12224: PPUSH
12225: LD_INT 3
12227: PPUSH
12228: LD_VAR 0 10
12232: PPUSH
12233: CALL_OW 380
// un := CreateHuman ;
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: CALL_OW 44
12246: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12247: LD_VAR 0 4
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12259: LD_ADDR_EXP 40
12263: PUSH
12264: LD_EXP 40
12268: PUSH
12269: LD_VAR 0 4
12273: ADD
12274: ST_TO_ADDR
// end ;
12275: GO 12219
12277: POP
12278: POP
// for i = 1 to sci do
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: DOUBLE
12285: LD_INT 1
12287: DEC
12288: ST_TO_ADDR
12289: LD_VAR 0 6
12293: PUSH
12294: FOR_TO
12295: IFFALSE 12340
// begin PrepareHuman ( false , 4 , skill ) ;
12297: LD_INT 0
12299: PPUSH
12300: LD_INT 4
12302: PPUSH
12303: LD_VAR 0 10
12307: PPUSH
12308: CALL_OW 380
// un := CreateHuman ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: CALL_OW 44
12321: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12322: LD_ADDR_EXP 40
12326: PUSH
12327: LD_EXP 40
12331: PUSH
12332: LD_VAR 0 4
12336: ADD
12337: ST_TO_ADDR
// end ;
12338: GO 12294
12340: POP
12341: POP
// for i = 1 to tank do
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_VAR 0 8
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12471
// begin Randomize ;
12360: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12364: LD_ADDR_OWVAR 37
12368: PUSH
12369: LD_INT 3
12371: ST_TO_ADDR
// vc_engine := engine_solar ;
12372: LD_ADDR_OWVAR 39
12376: PUSH
12377: LD_INT 2
12379: ST_TO_ADDR
// vc_control := control_manual ;
12380: LD_ADDR_OWVAR 38
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12388: LD_ADDR_OWVAR 40
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: LD_INT 5
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 1
12405: PPUSH
12406: LD_INT 2
12408: PPUSH
12409: CALL_OW 12
12413: ARRAY
12414: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12415: LD_ADDR_OWVAR 41
12419: PUSH
12420: LD_INT 35
12422: PPUSH
12423: LD_INT 55
12425: PPUSH
12426: CALL_OW 12
12430: ST_TO_ADDR
// un := CreateVehicle ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: CALL_OW 45
12440: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12441: LD_VAR 0 4
12445: PPUSH
12446: LD_INT 5
12448: PPUSH
12449: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12453: LD_ADDR_EXP 40
12457: PUSH
12458: LD_EXP 40
12462: PUSH
12463: LD_VAR 0 4
12467: ADD
12468: ST_TO_ADDR
// end ;
12469: GO 12357
12471: POP
12472: POP
// if cargo then
12473: LD_VAR 0 9
12477: IFFALSE 12580
// begin vc_chassis := us_medium_tracked ;
12479: LD_ADDR_OWVAR 37
12483: PUSH
12484: LD_INT 3
12486: ST_TO_ADDR
// vc_engine := engine_solar ;
12487: LD_ADDR_OWVAR 39
12491: PUSH
12492: LD_INT 2
12494: ST_TO_ADDR
// vc_control := control_manual ;
12495: LD_ADDR_OWVAR 38
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12503: LD_ADDR_OWVAR 40
12507: PUSH
12508: LD_INT 12
12510: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12511: LD_ADDR_OWVAR 41
12515: PUSH
12516: LD_INT 35
12518: PPUSH
12519: LD_INT 55
12521: PPUSH
12522: CALL_OW 12
12526: ST_TO_ADDR
// un := CreateVehicle ;
12527: LD_ADDR_VAR 0 4
12531: PUSH
12532: CALL_OW 45
12536: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12537: LD_VAR 0 4
12541: PPUSH
12542: LD_INT 5
12544: PPUSH
12545: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12549: LD_ADDR_EXP 40
12553: PUSH
12554: LD_EXP 40
12558: PUSH
12559: LD_VAR 0 4
12563: ADD
12564: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12565: LD_VAR 0 4
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: LD_INT 60
12575: PPUSH
12576: CALL_OW 290
// end ; end ;
12580: LD_VAR 0 2
12584: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12585: LD_INT 0
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
// uc_side := 4 ;
12597: LD_ADDR_OWVAR 20
12601: PUSH
12602: LD_INT 4
12604: ST_TO_ADDR
// uc_nation := 1 ;
12605: LD_ADDR_OWVAR 21
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12613: LD_ADDR_VAR 0 11
12617: PUSH
12618: LD_INT 6
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: LD_INT 4
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_OWVAR 67
12636: ARRAY
12637: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12638: LD_ADDR_EXP 41
12642: PUSH
12643: EMPTY
12644: ST_TO_ADDR
// case num of 1 :
12645: LD_VAR 0 1
12649: PUSH
12650: LD_INT 1
12652: DOUBLE
12653: EQUAL
12654: IFTRUE 12658
12656: GO 12709
12658: POP
// begin sold := 2 ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_INT 2
12666: ST_TO_ADDR
// eng := 2 ;
12667: LD_ADDR_VAR 0 6
12671: PUSH
12672: LD_INT 2
12674: ST_TO_ADDR
// sci := 0 ;
12675: LD_ADDR_VAR 0 7
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// mech := 1 ;
12683: LD_ADDR_VAR 0 8
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// tank := 0 ;
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// cargo := 1 ;
12699: LD_ADDR_VAR 0 10
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// end ; 2 :
12707: GO 12828
12709: LD_INT 2
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12768
12717: POP
// begin sold := 1 ;
12718: LD_ADDR_VAR 0 5
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// eng := 2 ;
12726: LD_ADDR_VAR 0 6
12730: PUSH
12731: LD_INT 2
12733: ST_TO_ADDR
// sci := 0 ;
12734: LD_ADDR_VAR 0 7
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// mech := 1 ;
12742: LD_ADDR_VAR 0 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// tank := 0 ;
12750: LD_ADDR_VAR 0 9
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// cargo := 1 ;
12758: LD_ADDR_VAR 0 10
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// end ; 3 :
12766: GO 12828
12768: LD_INT 3
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12827
12776: POP
// begin sold := 1 ;
12777: LD_ADDR_VAR 0 5
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// eng := 1 ;
12785: LD_ADDR_VAR 0 6
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// sci := 0 ;
12793: LD_ADDR_VAR 0 7
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// mech := 1 ;
12801: LD_ADDR_VAR 0 8
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// tank := 0 ;
12809: LD_ADDR_VAR 0 9
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// cargo := 1 ;
12817: LD_ADDR_VAR 0 10
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// end ; end ;
12825: GO 12828
12827: POP
// for i = 1 to sold do
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_VAR 0 5
12842: PUSH
12843: FOR_TO
12844: IFFALSE 12916
// begin if i = 1 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 1
12853: EQUAL
12854: IFFALSE 12873
// PrepareHuman ( sex_male , 1 , skill ) else
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: LD_VAR 0 11
12866: PPUSH
12867: CALL_OW 380
12871: GO 12888
// PrepareHuman ( false , 1 , skill ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: LD_VAR 0 11
12883: PPUSH
12884: CALL_OW 380
// un := CreateHuman ;
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: CALL_OW 44
12897: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12898: LD_ADDR_EXP 41
12902: PUSH
12903: LD_EXP 41
12907: PUSH
12908: LD_VAR 0 4
12912: ADD
12913: ST_TO_ADDR
// end ;
12914: GO 12843
12916: POP
12917: POP
// for i = 1 to mech do
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: DOUBLE
12924: LD_INT 1
12926: DEC
12927: ST_TO_ADDR
12928: LD_VAR 0 8
12932: PUSH
12933: FOR_TO
12934: IFFALSE 12991
// begin PrepareHuman ( false , 3 , skill ) ;
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_VAR 0 11
12946: PPUSH
12947: CALL_OW 380
// un := CreateHuman ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: CALL_OW 44
12960: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12961: LD_VAR 0 4
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12973: LD_ADDR_EXP 41
12977: PUSH
12978: LD_EXP 41
12982: PUSH
12983: LD_VAR 0 4
12987: ADD
12988: ST_TO_ADDR
// end ;
12989: GO 12933
12991: POP
12992: POP
// for i = 1 to eng do
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: DOUBLE
12999: LD_INT 1
13001: DEC
13002: ST_TO_ADDR
13003: LD_VAR 0 6
13007: PUSH
13008: FOR_TO
13009: IFFALSE 13054
// begin PrepareHuman ( false , 2 , skill ) ;
13011: LD_INT 0
13013: PPUSH
13014: LD_INT 2
13016: PPUSH
13017: LD_VAR 0 11
13021: PPUSH
13022: CALL_OW 380
// un := CreateHuman ;
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: CALL_OW 44
13035: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13036: LD_ADDR_EXP 41
13040: PUSH
13041: LD_EXP 41
13045: PUSH
13046: LD_VAR 0 4
13050: ADD
13051: ST_TO_ADDR
// end ;
13052: GO 13008
13054: POP
13055: POP
// for i = 1 to tank do
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: DOUBLE
13062: LD_INT 1
13064: DEC
13065: ST_TO_ADDR
13066: LD_VAR 0 9
13070: PUSH
13071: FOR_TO
13072: IFFALSE 13185
// begin Randomize ;
13074: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13078: LD_ADDR_OWVAR 37
13082: PUSH
13083: LD_INT 2
13085: ST_TO_ADDR
// vc_engine := engine_siberite ;
13086: LD_ADDR_OWVAR 39
13090: PUSH
13091: LD_INT 3
13093: ST_TO_ADDR
// vc_control := control_manual ;
13094: LD_ADDR_OWVAR 38
13098: PUSH
13099: LD_INT 1
13101: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13102: LD_ADDR_OWVAR 40
13106: PUSH
13107: LD_INT 7
13109: PUSH
13110: LD_INT 9
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 1
13119: PPUSH
13120: LD_INT 2
13122: PPUSH
13123: CALL_OW 12
13127: ARRAY
13128: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13129: LD_ADDR_OWVAR 41
13133: PUSH
13134: LD_INT 35
13136: PPUSH
13137: LD_INT 55
13139: PPUSH
13140: CALL_OW 12
13144: ST_TO_ADDR
// un := CreateVehicle ;
13145: LD_ADDR_VAR 0 4
13149: PUSH
13150: CALL_OW 45
13154: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13155: LD_VAR 0 4
13159: PPUSH
13160: LD_INT 5
13162: PPUSH
13163: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13167: LD_ADDR_EXP 41
13171: PUSH
13172: LD_EXP 41
13176: PUSH
13177: LD_VAR 0 4
13181: ADD
13182: ST_TO_ADDR
// end ;
13183: GO 13071
13185: POP
13186: POP
// if cargo then
13187: LD_VAR 0 10
13191: IFFALSE 13309
// begin vc_chassis := us_medium_tracked ;
13193: LD_ADDR_OWVAR 37
13197: PUSH
13198: LD_INT 3
13200: ST_TO_ADDR
// vc_engine := engine_combustion ;
13201: LD_ADDR_OWVAR 39
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// vc_control := control_manual ;
13209: LD_ADDR_OWVAR 38
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13217: LD_ADDR_OWVAR 40
13221: PUSH
13222: LD_INT 12
13224: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13225: LD_ADDR_OWVAR 41
13229: PUSH
13230: LD_INT 35
13232: PPUSH
13233: LD_INT 55
13235: PPUSH
13236: CALL_OW 12
13240: ST_TO_ADDR
// un := CreateVehicle ;
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: CALL_OW 45
13250: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13251: LD_VAR 0 4
13255: PPUSH
13256: LD_INT 5
13258: PPUSH
13259: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13263: LD_ADDR_EXP 41
13267: PUSH
13268: LD_EXP 41
13272: PUSH
13273: LD_VAR 0 4
13277: ADD
13278: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_INT 3
13286: PPUSH
13287: LD_INT 30
13289: PPUSH
13290: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13294: LD_VAR 0 4
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: LD_INT 40
13304: PPUSH
13305: CALL_OW 290
// end ; end ;
13309: LD_VAR 0 2
13313: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
// uc_side := 4 ;
13326: LD_ADDR_OWVAR 20
13330: PUSH
13331: LD_INT 4
13333: ST_TO_ADDR
// uc_nation := 1 ;
13334: LD_ADDR_OWVAR 21
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13342: LD_ADDR_VAR 0 10
13346: PUSH
13347: LD_INT 6
13349: PUSH
13350: LD_INT 5
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: PUSH
13361: LD_OWVAR 67
13365: ARRAY
13366: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13367: LD_ADDR_EXP 42
13371: PUSH
13372: EMPTY
13373: ST_TO_ADDR
// sold := 1 ;
13374: LD_ADDR_VAR 0 4
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// eng := 0 ;
13382: LD_ADDR_VAR 0 5
13386: PUSH
13387: LD_INT 0
13389: ST_TO_ADDR
// sci := 0 ;
13390: LD_ADDR_VAR 0 6
13394: PUSH
13395: LD_INT 0
13397: ST_TO_ADDR
// mech := 3 ;
13398: LD_ADDR_VAR 0 7
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// tank := 3 ;
13406: LD_ADDR_VAR 0 8
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// cargo := 0 ;
13414: LD_ADDR_VAR 0 9
13418: PUSH
13419: LD_INT 0
13421: ST_TO_ADDR
// for i = 1 to sold do
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: DOUBLE
13428: LD_INT 1
13430: DEC
13431: ST_TO_ADDR
13432: LD_VAR 0 4
13436: PUSH
13437: FOR_TO
13438: IFFALSE 13510
// begin if i = 1 then
13440: LD_VAR 0 2
13444: PUSH
13445: LD_INT 1
13447: EQUAL
13448: IFFALSE 13467
// PrepareHuman ( sex_male , 1 , skill ) else
13450: LD_INT 1
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_VAR 0 10
13460: PPUSH
13461: CALL_OW 380
13465: GO 13482
// PrepareHuman ( false , 1 , skill ) ;
13467: LD_INT 0
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_VAR 0 10
13477: PPUSH
13478: CALL_OW 380
// un := CreateHuman ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: CALL_OW 44
13491: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13492: LD_ADDR_EXP 42
13496: PUSH
13497: LD_EXP 42
13501: PUSH
13502: LD_VAR 0 3
13506: ADD
13507: ST_TO_ADDR
// end ;
13508: GO 13437
13510: POP
13511: POP
// for i = 1 to mech do
13512: LD_ADDR_VAR 0 2
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_VAR 0 7
13526: PUSH
13527: FOR_TO
13528: IFFALSE 13585
// begin PrepareHuman ( false , 3 , skill ) ;
13530: LD_INT 0
13532: PPUSH
13533: LD_INT 3
13535: PPUSH
13536: LD_VAR 0 10
13540: PPUSH
13541: CALL_OW 380
// un := CreateHuman ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: CALL_OW 44
13554: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13567: LD_ADDR_EXP 42
13571: PUSH
13572: LD_EXP 42
13576: PUSH
13577: LD_VAR 0 3
13581: ADD
13582: ST_TO_ADDR
// end ;
13583: GO 13527
13585: POP
13586: POP
// for i = 1 to tank do
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: DOUBLE
13593: LD_INT 1
13595: DEC
13596: ST_TO_ADDR
13597: LD_VAR 0 8
13601: PUSH
13602: FOR_TO
13603: IFFALSE 13849
// begin Randomize ;
13605: CALL_OW 10
// if i < 3 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 3
13616: LESS
13617: IFFALSE 13726
// begin vc_chassis := us_medium_tracked ;
13619: LD_ADDR_OWVAR 37
13623: PUSH
13624: LD_INT 3
13626: ST_TO_ADDR
// vc_engine := engine_combustion ;
13627: LD_ADDR_OWVAR 39
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// vc_control := control_manual ;
13635: LD_ADDR_OWVAR 38
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13643: LD_ADDR_OWVAR 40
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 9
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 1
13660: PPUSH
13661: LD_INT 2
13663: PPUSH
13664: CALL_OW 12
13668: ARRAY
13669: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13670: LD_ADDR_OWVAR 41
13674: PUSH
13675: LD_INT 35
13677: PPUSH
13678: LD_INT 55
13680: PPUSH
13681: CALL_OW 12
13685: ST_TO_ADDR
// un := CreateVehicle ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: CALL_OW 45
13695: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13696: LD_VAR 0 3
13700: PPUSH
13701: LD_INT 5
13703: PPUSH
13704: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13708: LD_ADDR_EXP 42
13712: PUSH
13713: LD_EXP 42
13717: PUSH
13718: LD_VAR 0 3
13722: ADD
13723: ST_TO_ADDR
// end else
13724: GO 13847
// begin uc_nation := 3 ;
13726: LD_ADDR_OWVAR 21
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13734: LD_ADDR_OWVAR 37
13738: PUSH
13739: LD_INT 22
13741: ST_TO_ADDR
// vc_engine := engine_combustion ;
13742: LD_ADDR_OWVAR 39
13746: PUSH
13747: LD_INT 1
13749: ST_TO_ADDR
// vc_control := control_manual ;
13750: LD_ADDR_OWVAR 38
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13758: LD_ADDR_OWVAR 40
13762: PUSH
13763: LD_INT 51
13765: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13766: LD_ADDR_OWVAR 41
13770: PUSH
13771: LD_INT 35
13773: PPUSH
13774: LD_INT 55
13776: PPUSH
13777: CALL_OW 12
13781: ST_TO_ADDR
// un := CreateVehicle ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: CALL_OW 45
13791: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13792: LD_VAR 0 3
13796: PPUSH
13797: LD_INT 496
13799: PPUSH
13800: CALL_OW 234
// SetTag ( un , 5 ) ;
13804: LD_VAR 0 3
13808: PPUSH
13809: LD_INT 5
13811: PPUSH
13812: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13816: LD_VAR 0 3
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: LD_INT 100
13826: PPUSH
13827: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13831: LD_ADDR_EXP 42
13835: PUSH
13836: LD_EXP 42
13840: PUSH
13841: LD_VAR 0 3
13845: ADD
13846: ST_TO_ADDR
// end ; end ;
13847: GO 13602
13849: POP
13850: POP
// end ; end_of_file
13851: LD_VAR 0 1
13855: RET
// export function Action ; begin
13856: LD_INT 0
13858: PPUSH
// InGameOn ;
13859: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13863: LD_INT 151
13865: PPUSH
13866: LD_INT 107
13868: PPUSH
13869: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13873: LD_EXP 38
13877: PPUSH
13878: LD_INT 171
13880: PPUSH
13881: LD_INT 108
13883: PPUSH
13884: LD_INT 0
13886: PPUSH
13887: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13891: LD_EXP 39
13895: PPUSH
13896: LD_INT 172
13898: PPUSH
13899: LD_INT 110
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13909: LD_EXP 38
13913: PPUSH
13914: LD_INT 156
13916: PPUSH
13917: LD_INT 107
13919: PPUSH
13920: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13924: LD_EXP 39
13928: PPUSH
13929: LD_INT 154
13931: PPUSH
13932: LD_INT 105
13934: PPUSH
13935: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13946: LD_EXP 38
13950: PPUSH
13951: CALL_OW 250
13955: PUSH
13956: LD_INT 156
13958: EQUAL
13959: PUSH
13960: LD_EXP 38
13964: PPUSH
13965: CALL_OW 251
13969: PUSH
13970: LD_INT 107
13972: EQUAL
13973: AND
13974: IFFALSE 13939
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13976: LD_EXP 38
13980: PUSH
13981: LD_EXP 39
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
13997: LD_EXP 38
14001: PPUSH
14002: LD_STRING D1-A-1
14004: PPUSH
14005: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14009: LD_EXP 39
14013: PPUSH
14014: LD_STRING D1-B-1
14016: PPUSH
14017: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14021: LD_EXP 38
14025: PPUSH
14026: LD_STRING D1-A-2
14028: PPUSH
14029: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14033: LD_EXP 39
14037: PPUSH
14038: LD_STRING D1-B-2
14040: PPUSH
14041: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14045: LD_EXP 38
14049: PUSH
14050: LD_EXP 39
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: LD_INT 147
14061: PPUSH
14062: LD_INT 108
14064: PPUSH
14065: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14069: LD_EXP 38
14073: PPUSH
14074: LD_STRING D1-A-3
14076: PPUSH
14077: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14081: LD_INT 4
14083: PPUSH
14084: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14088: LD_EXP 38
14092: PPUSH
14093: LD_INT 35
14095: PPUSH
14096: CALL_OW 296
14100: PUSH
14101: LD_INT 8
14103: LESS
14104: IFFALSE 14081
// ComTurnUnit ( guyA , guyB ) ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_EXP 39
14115: PPUSH
14116: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14120: LD_EXP 39
14124: PPUSH
14125: LD_EXP 38
14129: PPUSH
14130: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14134: LD_EXP 38
14138: PPUSH
14139: LD_STRING D1-A-10
14141: PPUSH
14142: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14146: LD_EXP 39
14150: PPUSH
14151: LD_STRING D1-B-10
14153: PPUSH
14154: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14158: LD_EXP 38
14162: PPUSH
14163: LD_STRING D1-A-11
14165: PPUSH
14166: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14170: LD_EXP 39
14174: PPUSH
14175: LD_STRING D1-B-11
14177: PPUSH
14178: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14182: LD_EXP 38
14186: PPUSH
14187: LD_STRING D1-A-12
14189: PPUSH
14190: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14194: LD_EXP 39
14198: PPUSH
14199: LD_STRING D1-B-12
14201: PPUSH
14202: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14206: LD_EXP 38
14210: PPUSH
14211: LD_STRING D1-A-13
14213: PPUSH
14214: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14218: LD_EXP 39
14222: PPUSH
14223: LD_STRING D1-B-13
14225: PPUSH
14226: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14230: LD_EXP 38
14234: PPUSH
14235: LD_STRING D1-A-14
14237: PPUSH
14238: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14242: LD_EXP 39
14246: PPUSH
14247: LD_STRING D1-B-14
14249: PPUSH
14250: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14254: LD_EXP 38
14258: PPUSH
14259: LD_STRING D1-A-15
14261: PPUSH
14262: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14266: LD_EXP 39
14270: PPUSH
14271: LD_STRING D1-B-15
14273: PPUSH
14274: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14278: LD_EXP 38
14282: PPUSH
14283: LD_STRING D1-A-16
14285: PPUSH
14286: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14290: LD_EXP 39
14294: PPUSH
14295: LD_STRING D1-B-16
14297: PPUSH
14298: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14302: LD_EXP 38
14306: PPUSH
14307: LD_STRING D1-A-17
14309: PPUSH
14310: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14314: LD_EXP 39
14318: PPUSH
14319: LD_STRING D1-B-17
14321: PPUSH
14322: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14326: LD_EXP 38
14330: PPUSH
14331: LD_STRING D1-A-18
14333: PPUSH
14334: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14338: LD_INT 35
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14348: LD_EXP 38
14352: PUSH
14353: LD_EXP 39
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: LD_INT 35
14364: PPUSH
14365: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14369: LD_INT 4
14371: PPUSH
14372: CALL_OW 67
// until IsInUnit ( guyA ) ;
14376: LD_EXP 38
14380: PPUSH
14381: CALL_OW 310
14385: IFFALSE 14369
// Wait ( 0 0$02 ) ;
14387: LD_INT 70
14389: PPUSH
14390: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14394: LD_EXP 38
14398: PPUSH
14399: LD_STRING D1-A-19
14401: PPUSH
14402: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14406: LD_EXP 39
14410: PPUSH
14411: LD_STRING D1-B-19
14413: PPUSH
14414: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14418: LD_EXP 38
14422: PPUSH
14423: LD_STRING D1-A-20
14425: PPUSH
14426: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14430: LD_INT 10
14432: PPUSH
14433: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14437: LD_EXP 39
14441: PPUSH
14442: LD_STRING D1-B-20
14444: PPUSH
14445: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14449: LD_EXP 38
14453: PPUSH
14454: LD_STRING D1-A-21
14456: PPUSH
14457: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14461: LD_EXP 39
14465: PPUSH
14466: LD_STRING D1-B-21
14468: PPUSH
14469: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14473: LD_EXP 38
14477: PPUSH
14478: LD_STRING D1-A-22
14480: PPUSH
14481: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D1-B-22
14492: PPUSH
14493: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14497: LD_EXP 38
14501: PPUSH
14502: LD_STRING D1-A-23
14504: PPUSH
14505: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14509: LD_EXP 39
14513: PPUSH
14514: LD_STRING D1-B-23
14516: PPUSH
14517: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14521: LD_EXP 38
14525: PPUSH
14526: LD_STRING D1-A-24
14528: PPUSH
14529: CALL_OW 88
// InGameOff ;
14533: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14537: LD_STRING M_main
14539: PPUSH
14540: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14544: LD_INT 4
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 343
// game_status := true ;
14554: LD_ADDR_EXP 29
14558: PUSH
14559: LD_INT 1
14561: ST_TO_ADDR
// end ;
14562: LD_VAR 0 1
14566: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14567: LD_INT 1
14569: PPUSH
14570: CALL 6358 0 1
14574: PUSH
14575: LD_INT 0
14577: GREATER
14578: IFFALSE 14680
14580: GO 14582
14582: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14590: LD_INT 1
14592: PPUSH
14593: CALL 6358 0 1
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: CALL_OW 461
14606: PUSH
14607: LD_INT 1
14609: NONEQUAL
14610: IFFALSE 14583
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14612: LD_EXP 38
14616: PPUSH
14617: CALL_OW 300
14621: PUSH
14622: LD_EXP 39
14626: PPUSH
14627: CALL_OW 300
14631: AND
14632: PUSH
14633: LD_EXP 30
14637: NOT
14638: AND
14639: IFFALSE 14665
// begin Say ( guyA , DL-A-1 ) ;
14641: LD_EXP 38
14645: PPUSH
14646: LD_STRING DL-A-1
14648: PPUSH
14649: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14653: LD_EXP 39
14657: PPUSH
14658: LD_STRING DL-B-1
14660: PPUSH
14661: CALL_OW 88
// end ; if not helps_can_arrive then
14665: LD_EXP 31
14669: NOT
14670: IFFALSE 14680
// helps_can_arrive := true ;
14672: LD_ADDR_EXP 31
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// end ;
14680: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14681: LD_INT 1
14683: PPUSH
14684: CALL 6358 0 1
14688: PUSH
14689: LD_INT 0
14691: GREATER
14692: PUSH
14693: LD_EXP 38
14697: PPUSH
14698: CALL_OW 300
14702: AND
14703: PUSH
14704: LD_EXP 39
14708: PPUSH
14709: CALL_OW 300
14713: AND
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 25
14727: PUSH
14728: LD_INT 12
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: PUSH
14744: LD_INT 0
14746: EQUAL
14747: AND
14748: PUSH
14749: LD_INT 1
14751: PPUSH
14752: LD_INT 25
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: PPUSH
14767: LD_EXP 38
14771: PPUSH
14772: CALL_OW 74
14776: PPUSH
14777: CALL_OW 292
14781: AND
14782: IFFALSE 14823
14784: GO 14786
14786: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14787: LD_EXP 38
14791: PPUSH
14792: LD_STRING DA-A-1
14794: PPUSH
14795: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14799: LD_EXP 39
14803: PPUSH
14804: LD_STRING DA-B-1
14806: PPUSH
14807: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14811: LD_EXP 38
14815: PPUSH
14816: LD_STRING DA-A-2
14818: PPUSH
14819: CALL_OW 88
// end ;
14823: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14824: LD_EXP 29
14828: PUSH
14829: LD_EXP 38
14833: PPUSH
14834: LD_INT 6
14836: PPUSH
14837: CALL_OW 299
14841: PUSH
14842: LD_INT 7
14844: LESS
14845: AND
14846: IFFALSE 14899
14848: GO 14850
14850: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14851: LD_INT 117
14853: PPUSH
14854: LD_INT 50
14856: PPUSH
14857: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14861: LD_INT 1
14863: PPUSH
14864: CALL 9995 0 1
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_STRING D5-A-1
14875: PPUSH
14876: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14880: LD_INT 1
14882: PPUSH
14883: CALL 9995 0 1
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: LD_STRING D5-B-1
14894: PPUSH
14895: CALL_OW 88
// end ;
14899: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14900: LD_INT 7
14902: PPUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: PUSH
14918: LD_INT 0
14920: GREATER
14921: IFFALSE 15066
14923: GO 14925
14925: DISABLE
// begin Wait ( 0 0$03 ) ;
14926: LD_INT 105
14928: PPUSH
14929: CALL_OW 67
// DialogueOn ;
14933: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14937: LD_INT 1
14939: PPUSH
14940: CALL 9995 0 1
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_STRING D6-A-1
14951: PPUSH
14952: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14956: LD_INT 1
14958: PPUSH
14959: CALL 9995 0 1
14963: PUSH
14964: LD_INT 2
14966: ARRAY
14967: PPUSH
14968: LD_STRING D6-B-1
14970: PPUSH
14971: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14975: LD_INT 95
14977: PPUSH
14978: LD_INT 8
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_INT 20
14986: PPUSH
14987: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
14991: LD_INT 10
14993: PPUSH
14994: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
14998: LD_INT 1
15000: PPUSH
15001: CALL 9995 0 1
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: LD_STRING D6-A-2
15012: PPUSH
15013: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15017: LD_INT 1
15019: PPUSH
15020: CALL 9995 0 1
15024: PUSH
15025: LD_INT 2
15027: ARRAY
15028: PPUSH
15029: LD_STRING D6-B-2
15031: PPUSH
15032: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15036: LD_INT 1
15038: PPUSH
15039: CALL 9995 0 1
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_STRING D6-A-3
15050: PPUSH
15051: CALL_OW 88
// DialogueOff ;
15055: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15059: LD_STRING M_base
15061: PPUSH
15062: CALL_OW 337
// end ;
15066: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15067: LD_EXP 30
15071: NOT
15072: PUSH
15073: LD_INT 22
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_INT 0
15104: GREATER
15105: AND
15106: IFFALSE 15239
15108: GO 15110
15110: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15111: LD_INT 35
15113: PPUSH
15114: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15118: LD_INT 22
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 21
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 69
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL 9995 0 1
15154: PUSH
15155: LD_INT 1
15157: ARRAY
15158: PPUSH
15159: CALL_OW 74
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL 9995 0 1
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 296
15180: PUSH
15181: LD_INT 7
15183: LESS
15184: IFFALSE 15111
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15186: LD_INT 1
15188: PPUSH
15189: CALL 9995 0 1
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_STRING DR-A-1
15200: PPUSH
15201: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15205: LD_INT 1
15207: PPUSH
15208: CALL 9995 0 1
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_STRING DR-B-1
15219: PPUSH
15220: CALL_OW 88
// Wait ( 3 3$00 ) ;
15224: LD_INT 6300
15226: PPUSH
15227: CALL_OW 67
// ru_spotted := true ;
15231: LD_ADDR_EXP 16
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// end ;
15239: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15240: LD_INT 35
15242: PPUSH
15243: CALL_OW 300
15247: NOT
15248: IFFALSE 15272
15250: GO 15252
15252: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15253: LD_INT 1
15255: PPUSH
15256: CALL 9995 0 1
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_STRING DDR-A-1
15267: PPUSH
15268: CALL_OW 88
15272: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15273: LD_INT 1
15275: PPUSH
15276: LD_INT 30
15278: PPUSH
15279: CALL 6209 0 2
15283: IFFALSE 15365
15285: GO 15287
15287: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15288: LD_INT 35
15290: PPUSH
15291: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15295: LD_INT 1
15297: PPUSH
15298: LD_INT 30
15300: PPUSH
15301: CALL 6209 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 461
15314: PUSH
15315: LD_INT 1
15317: NONEQUAL
15318: IFFALSE 15288
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15320: LD_INT 1
15322: PPUSH
15323: CALL 9995 0 1
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: LD_STRING D8-A-1
15334: PPUSH
15335: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15339: LD_INT 1
15341: PPUSH
15342: CALL 9995 0 1
15346: PUSH
15347: LD_INT 2
15349: ARRAY
15350: PPUSH
15351: LD_STRING D8-B-1
15353: PPUSH
15354: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15358: LD_STRING M_mineok
15360: PPUSH
15361: CALL_OW 337
// end ;
15365: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15366: LD_INT 22
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 30
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 57
15391: PUSH
15392: EMPTY
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: PUSH
15409: LD_INT 1
15411: GREATER
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: LD_INT 57
15438: PUSH
15439: EMPTY
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: PUSH
15456: LD_INT 1
15458: EQUAL
15459: PUSH
15460: LD_INT 35
15462: PPUSH
15463: CALL_OW 300
15467: NOT
15468: AND
15469: OR
15470: IFFALSE 15522
15472: GO 15474
15474: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 25
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: PUSH
15504: LD_INT 1
15506: ARRAY
15507: PPUSH
15508: LD_STRING D7-A-1
15510: PPUSH
15511: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15515: LD_STRING M_baseok
15517: PPUSH
15518: CALL_OW 337
// end ;
15522: END
// every 0 0$01 trigger mine_ck do
15523: LD_EXP 35
15527: IFFALSE 15558
15529: GO 15531
15531: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15532: LD_INT 1
15534: PPUSH
15535: CALL 9995 0 1
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: PPUSH
15544: LD_STRING D9-A-1
15546: PPUSH
15547: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15551: LD_STRING M_minedest
15553: PPUSH
15554: CALL_OW 337
// end ;
15558: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15559: LD_EXP 29
15563: IFFALSE 16069
15565: GO 15567
15567: DISABLE
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15575: LD_OWVAR 67
15579: PPUSH
15580: CALL 11896 0 1
// if not helps_can_arrive then
15584: LD_EXP 31
15588: NOT
15589: IFFALSE 15617
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15591: LD_EXP 40
15595: PUSH
15596: LD_INT 1
15598: ARRAY
15599: PPUSH
15600: LD_STRING DB-Delay
15602: PPUSH
15603: CALL_OW 94
// time := 10 10$00 ;
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 21000
15614: ST_TO_ADDR
// end else
15615: GO 15625
// time := 3 3$00 ;
15617: LD_ADDR_VAR 0 1
15621: PUSH
15622: LD_INT 6300
15624: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 35
15637: MINUS
15638: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15639: LD_INT 35
15641: PPUSH
15642: CALL_OW 67
// end until time = 0 0$00 ;
15646: LD_VAR 0 1
15650: PUSH
15651: LD_INT 0
15653: EQUAL
15654: IFFALSE 15625
// helps_arrive := true ;
15656: LD_ADDR_EXP 30
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// if IsLive ( guyA ) then
15664: LD_EXP 38
15668: PPUSH
15669: CALL_OW 300
15673: IFFALSE 15687
// r := guyA else
15675: LD_ADDR_VAR 0 4
15679: PUSH
15680: LD_EXP 38
15684: ST_TO_ADDR
15685: GO 15697
// r := guyB ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_EXP 39
15696: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15697: LD_EXP 40
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: LD_STRING D2-A-1
15708: PPUSH
15709: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15713: LD_VAR 0 4
15717: PPUSH
15718: LD_STRING D2-B-1
15720: PPUSH
15721: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15725: LD_EXP 40
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PPUSH
15734: LD_STRING D2-A-2
15736: PPUSH
15737: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15741: LD_VAR 0 4
15745: PPUSH
15746: LD_STRING D2-B-2
15748: PPUSH
15749: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15753: LD_EXP 40
15757: PUSH
15758: LD_INT 1
15760: ARRAY
15761: PPUSH
15762: LD_STRING D2-A-3
15764: PPUSH
15765: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15769: LD_VAR 0 4
15773: PPUSH
15774: LD_STRING D2-B-3
15776: PPUSH
15777: CALL_OW 88
// to_veh := [ ] ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: DOUBLE
15794: LD_INT 1
15796: DEC
15797: ST_TO_ADDR
15798: LD_EXP 40
15802: PUSH
15803: FOR_TO
15804: IFFALSE 16067
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15806: LD_EXP 40
15810: PUSH
15811: LD_VAR 0 2
15815: ARRAY
15816: PPUSH
15817: CALL_OW 110
15821: PUSH
15822: LD_INT 3
15824: EQUAL
15825: IFFALSE 15851
// to_veh := to_veh ^ Beta_Squad [ i ] else
15827: LD_ADDR_VAR 0 5
15831: PUSH
15832: LD_VAR 0 5
15836: PUSH
15837: LD_EXP 40
15841: PUSH
15842: LD_VAR 0 2
15846: ARRAY
15847: ADD
15848: ST_TO_ADDR
15849: GO 15976
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 2
15860: ARRAY
15861: PPUSH
15862: CALL_OW 110
15866: PUSH
15867: LD_INT 5
15869: EQUAL
15870: IFFALSE 15955
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15872: LD_EXP 40
15876: PUSH
15877: LD_VAR 0 2
15881: ARRAY
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 5
15903: PPUSH
15904: LD_INT 0
15906: PPUSH
15907: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15911: LD_VAR 0 5
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_EXP 40
15924: PUSH
15925: LD_VAR 0 2
15929: ARRAY
15930: PPUSH
15931: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_VAR 0 5
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 3
15952: ST_TO_ADDR
// end else
15953: GO 15976
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15955: LD_EXP 40
15959: PUSH
15960: LD_VAR 0 2
15964: ARRAY
15965: PPUSH
15966: LD_INT 5
15968: PPUSH
15969: LD_INT 0
15971: PPUSH
15972: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15976: LD_EXP 40
15980: PUSH
15981: LD_VAR 0 2
15985: ARRAY
15986: PPUSH
15987: LD_INT 165
15989: PPUSH
15990: LD_INT 105
15992: PPUSH
15993: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
15997: LD_INT 70
15999: PPUSH
16000: LD_INT 140
16002: PPUSH
16003: CALL_OW 12
16007: PPUSH
16008: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16012: LD_EXP 40
16016: PUSH
16017: LD_VAR 0 2
16021: ARRAY
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 235
// if i = 1 then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: IFFALSE 16050
// CenterNowOnXY ( 168 , 109 ) ;
16040: LD_INT 168
16042: PPUSH
16043: LD_INT 109
16045: PPUSH
16046: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16050: LD_EXP 40
16054: PUSH
16055: LD_VAR 0 2
16059: ARRAY
16060: PPUSH
16061: CALL_OW 141
// end ;
16065: GO 15803
16067: POP
16068: POP
// end ;
16069: PPOPN 5
16071: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16072: LD_EXP 30
16076: IFFALSE 17105
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
// begin Wait ( 5 5$00 ) ;
16085: LD_INT 10500
16087: PPUSH
16088: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16092: LD_OWVAR 67
16096: PPUSH
16097: CALL 12585 0 1
// to_veh := [ ] ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: EMPTY
16107: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: DOUBLE
16114: LD_INT 1
16116: DEC
16117: ST_TO_ADDR
16118: LD_EXP 41
16122: PUSH
16123: FOR_TO
16124: IFFALSE 16352
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16126: LD_EXP 41
16130: PUSH
16131: LD_VAR 0 1
16135: ARRAY
16136: PPUSH
16137: CALL_OW 110
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16171
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16147: LD_ADDR_VAR 0 2
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: LD_EXP 41
16161: PUSH
16162: LD_VAR 0 1
16166: ARRAY
16167: ADD
16168: ST_TO_ADDR
16169: GO 16296
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16171: LD_EXP 41
16175: PUSH
16176: LD_VAR 0 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 110
16186: PUSH
16187: LD_INT 5
16189: EQUAL
16190: IFFALSE 16275
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16192: LD_EXP 41
16196: PUSH
16197: LD_VAR 0 1
16201: ARRAY
16202: PPUSH
16203: LD_INT 4
16205: PPUSH
16206: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 5
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: LD_EXP 41
16244: PUSH
16245: LD_VAR 0 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: CALL_OW 3
16272: ST_TO_ADDR
// end else
16273: GO 16296
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16275: LD_EXP 41
16279: PUSH
16280: LD_VAR 0 1
16284: ARRAY
16285: PPUSH
16286: LD_INT 5
16288: PPUSH
16289: LD_INT 0
16291: PPUSH
16292: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16296: LD_EXP 41
16300: PUSH
16301: LD_VAR 0 1
16305: ARRAY
16306: PPUSH
16307: LD_INT 164
16309: PPUSH
16310: LD_INT 104
16312: PPUSH
16313: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16317: LD_INT 70
16319: PPUSH
16320: LD_INT 140
16322: PPUSH
16323: CALL_OW 12
16327: PPUSH
16328: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16332: LD_EXP 41
16336: PUSH
16337: LD_VAR 0 1
16341: ARRAY
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 235
// end ;
16350: GO 16123
16352: POP
16353: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16354: LD_EXP 41
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_STRING D3-A-1
16365: PPUSH
16366: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16370: LD_INT 1
16372: PPUSH
16373: CALL 9995 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_STRING D3-B-1
16384: PPUSH
16385: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16389: LD_EXP 41
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: LD_STRING D3-A-2
16400: PPUSH
16401: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16405: LD_INT 1
16407: PPUSH
16408: CALL 9995 0 1
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_STRING D3-B-2
16419: PPUSH
16420: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16424: LD_EXP 41
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_STRING D3-A-3
16435: PPUSH
16436: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16440: LD_INT 1
16442: PPUSH
16443: CALL 9995 0 1
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: LD_STRING D3-B-3
16454: PPUSH
16455: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16459: LD_EXP 41
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: PPUSH
16468: LD_STRING D3-A-4
16470: PPUSH
16471: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16475: LD_INT 1
16477: PPUSH
16478: CALL 9995 0 1
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_STRING D3-B-4
16489: PPUSH
16490: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16494: LD_EXP 41
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: LD_STRING D3-A-5
16505: PPUSH
16506: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16510: LD_INT 1
16512: PPUSH
16513: CALL 9995 0 1
16517: PUSH
16518: LD_INT 1
16520: ARRAY
16521: PPUSH
16522: LD_STRING D3-B-5
16524: PPUSH
16525: CALL_OW 88
// for i = 1 to Gamma_Squad do
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: DOUBLE
16535: LD_INT 1
16537: DEC
16538: ST_TO_ADDR
16539: LD_EXP 41
16543: PUSH
16544: FOR_TO
16545: IFFALSE 16567
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16547: LD_EXP 41
16551: PUSH
16552: LD_VAR 0 1
16556: ARRAY
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 235
16565: GO 16544
16567: POP
16568: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16569: LD_INT 6300
16571: PUSH
16572: LD_INT 10500
16574: PUSH
16575: LD_INT 11550
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: LD_OWVAR 67
16587: ARRAY
16588: PPUSH
16589: CALL_OW 67
// AddZetaSquad ;
16593: CALL 13314 0 0
// Wait ( 0 0$10 ) ;
16597: LD_INT 350
16599: PPUSH
16600: CALL_OW 67
// to_veh := [ ] ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: EMPTY
16610: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: DOUBLE
16617: LD_INT 1
16619: DEC
16620: ST_TO_ADDR
16621: LD_EXP 42
16625: PUSH
16626: FOR_TO
16627: IFFALSE 16837
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16629: LD_EXP 42
16633: PUSH
16634: LD_VAR 0 1
16638: ARRAY
16639: PPUSH
16640: CALL_OW 110
16644: PUSH
16645: LD_INT 3
16647: EQUAL
16648: IFFALSE 16674
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_EXP 42
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: ADD
16671: ST_TO_ADDR
16672: GO 16799
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16674: LD_EXP 42
16678: PUSH
16679: LD_VAR 0 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 110
16689: PUSH
16690: LD_INT 5
16692: EQUAL
16693: IFFALSE 16778
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16695: LD_EXP 42
16699: PUSH
16700: LD_VAR 0 1
16704: ARRAY
16705: PPUSH
16706: LD_INT 4
16708: PPUSH
16709: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 5
16726: PPUSH
16727: LD_INT 0
16729: PPUSH
16730: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: PPUSH
16743: LD_EXP 42
16747: PUSH
16748: LD_VAR 0 1
16752: ARRAY
16753: PPUSH
16754: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_VAR 0 2
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 3
16775: ST_TO_ADDR
// end else
16776: GO 16799
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16778: LD_EXP 42
16782: PUSH
16783: LD_VAR 0 1
16787: ARRAY
16788: PPUSH
16789: LD_INT 5
16791: PPUSH
16792: LD_INT 0
16794: PPUSH
16795: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16799: LD_EXP 42
16803: PUSH
16804: LD_VAR 0 1
16808: ARRAY
16809: PPUSH
16810: LD_INT 165
16812: PPUSH
16813: LD_INT 105
16815: PPUSH
16816: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16820: LD_INT 70
16822: PPUSH
16823: LD_INT 140
16825: PPUSH
16826: CALL_OW 12
16830: PPUSH
16831: CALL_OW 67
// end ;
16835: GO 16626
16837: POP
16838: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16839: LD_EXP 42
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: LD_STRING D4-A-1
16850: PPUSH
16851: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16855: LD_INT 1
16857: PPUSH
16858: CALL 9995 0 1
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: LD_STRING D4-B-1
16869: PPUSH
16870: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16874: LD_EXP 42
16878: PUSH
16879: LD_INT 1
16881: ARRAY
16882: PPUSH
16883: LD_STRING D4-A-2
16885: PPUSH
16886: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16890: LD_INT 1
16892: PPUSH
16893: CALL 9995 0 1
16897: PUSH
16898: LD_INT 1
16900: ARRAY
16901: PPUSH
16902: LD_STRING D4-B-2
16904: PPUSH
16905: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16909: LD_EXP 42
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: LD_STRING D4-A-3
16920: PPUSH
16921: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16925: LD_INT 1
16927: PPUSH
16928: CALL 9995 0 1
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_STRING D4-B-3
16939: PPUSH
16940: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16944: LD_EXP 42
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PPUSH
16953: LD_STRING D4-A-4
16955: PPUSH
16956: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16960: LD_INT 1
16962: PPUSH
16963: CALL 9995 0 1
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: LD_STRING D4-B-4
16974: PPUSH
16975: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16979: LD_EXP 42
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: LD_STRING D4-A-5
16990: PPUSH
16991: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
16995: LD_INT 1
16997: PPUSH
16998: CALL 9995 0 1
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: LD_STRING D4-B-5
17009: PPUSH
17010: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17014: LD_EXP 42
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PPUSH
17023: LD_STRING D4-A-6
17025: PPUSH
17026: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17030: LD_INT 1
17032: PPUSH
17033: CALL 9995 0 1
17037: PUSH
17038: LD_INT 1
17040: ARRAY
17041: PPUSH
17042: LD_STRING D4-B-6
17044: PPUSH
17045: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17049: LD_EXP 42
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: LD_STRING D4-A-7
17060: PPUSH
17061: CALL_OW 94
// for i = 1 to Zeta_Squad do
17065: LD_ADDR_VAR 0 1
17069: PUSH
17070: DOUBLE
17071: LD_INT 1
17073: DEC
17074: ST_TO_ADDR
17075: LD_EXP 42
17079: PUSH
17080: FOR_TO
17081: IFFALSE 17103
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17083: LD_EXP 42
17087: PUSH
17088: LD_VAR 0 1
17092: ARRAY
17093: PPUSH
17094: LD_INT 1
17096: PPUSH
17097: CALL_OW 235
17101: GO 17080
17103: POP
17104: POP
// end ;
17105: PPOPN 2
17107: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17108: LD_INT 11
17110: PPUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 70
17127: PUSH
17128: LD_INT 0
17130: GREATER
17131: IFFALSE 17156
17133: GO 17135
17135: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17136: LD_EXP 38
17140: PPUSH
17141: LD_STRING D10-A-1
17143: PPUSH
17144: CALL_OW 88
// ru_spotted := true ;
17148: LD_ADDR_EXP 16
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// end ;
17156: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17157: LD_EXP 38
17161: PPUSH
17162: CALL_OW 301
17166: PUSH
17167: LD_EXP 39
17171: PPUSH
17172: CALL_OW 301
17176: OR
17177: IFFALSE 17189
17179: GO 17181
17181: DISABLE
// begin YouLost ( DieP ) ;
17182: LD_STRING DieP
17184: PPUSH
17185: CALL_OW 104
// end ;
17189: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17190: LD_INT 34
17192: PUSH
17193: LD_INT 8
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: IFFALSE 17217
17206: GO 17208
17208: DISABLE
// sib_bomb_constructed := true ;
17209: LD_ADDR_EXP 36
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
17217: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17218: LD_EXP 29
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PUSH
17238: LD_INT 0
17240: EQUAL
17241: AND
17242: IFFALSE 17445
17244: GO 17246
17246: DISABLE
17247: LD_INT 0
17249: PPUSH
// begin game_status := false ;
17250: LD_ADDR_EXP 29
17254: PUSH
17255: LD_INT 0
17257: ST_TO_ADDR
// if not depotConstructed then
17258: LD_EXP 2
17262: NOT
17263: IFFALSE 17272
// SetAchievement ( ACH_NODEPOT ) ;
17265: LD_STRING ACH_NODEPOT
17267: PPUSH
17268: CALL_OW 543
// if Difficulty = 3 then
17272: LD_OWVAR 67
17276: PUSH
17277: LD_INT 3
17279: EQUAL
17280: IFFALSE 17289
// SetAchievement ( ACH_HARD ) ;
17282: LD_STRING ACH_HARD
17284: PPUSH
17285: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17289: LD_OWVAR 1
17293: PUSH
17294: LD_INT 35
17296: DIVREAL
17297: PUSH
17298: LD_INT 60
17300: DIVREAL
17301: PUSH
17302: LD_INT 70
17304: PUSH
17305: LD_INT 60
17307: PUSH
17308: LD_INT 50
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_OWVAR 67
17320: ARRAY
17321: LESS
17322: IFFALSE 17336
// AddMedal ( play , 1 ) else
17324: LD_STRING play
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: CALL_OW 101
17334: GO 17347
// AddMedal ( play , - 1 ) ;
17336: LD_STRING play
17338: PPUSH
17339: LD_INT 1
17341: NEG
17342: PPUSH
17343: CALL_OW 101
// if sib_bomb_constructed then
17347: LD_EXP 36
17351: IFFALSE 17365
// AddMedal ( sibbomb , 1 ) else
17353: LD_STRING sibbomb
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: CALL_OW 101
17363: GO 17376
// AddMedal ( sibbomb , - 1 ) ;
17365: LD_STRING sibbomb
17367: PPUSH
17368: LD_INT 1
17370: NEG
17371: PPUSH
17372: CALL_OW 101
// if mine_constructed and not mine_ck then
17376: LD_EXP 37
17380: PUSH
17381: LD_EXP 35
17385: NOT
17386: AND
17387: IFFALSE 17399
// AddMedal ( mine , 1 ) ;
17389: LD_STRING mine
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 101
// if mine_ck then
17399: LD_EXP 35
17403: IFFALSE 17416
// AddMedal ( mine , - 1 ) ;
17405: LD_STRING mine
17407: PPUSH
17408: LD_INT 1
17410: NEG
17411: PPUSH
17412: CALL_OW 101
// if not mine_constructed then
17416: LD_EXP 37
17420: NOT
17421: IFFALSE 17434
// AddMedal ( mine , - 2 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 2
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// GiveMedals ( Main ) ;
17434: LD_STRING Main
17436: PPUSH
17437: CALL_OW 102
// YouWin ;
17441: CALL_OW 103
// end ; end_of_file
17445: PPOPN 1
17447: END
// every 0 0$03 trigger game_status do var time ;
17448: LD_EXP 29
17452: IFFALSE 17617
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_INT 1050
17467: PUSH
17468: LD_INT 1575
17470: PUSH
17471: LD_INT 2100
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: LD_OWVAR 67
17483: ARRAY
17484: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17485: LD_VAR 0 1
17489: PUSH
17490: LD_INT 0
17492: PPUSH
17493: LD_INT 420
17495: PPUSH
17496: CALL_OW 12
17500: PLUS
17501: PPUSH
17502: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 5
17511: PPUSH
17512: CALL_OW 12
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17524: LD_INT 105
17526: PPUSH
17527: LD_INT 1050
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17539: LD_INT 1
17541: PPUSH
17542: LD_INT 5
17544: PPUSH
17545: CALL_OW 12
17549: PPUSH
17550: LD_INT 148
17552: PPUSH
17553: LD_INT 107
17555: PPUSH
17556: LD_INT 20
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17566: LD_OWVAR 1
17570: PUSH
17571: LD_INT 44100
17573: PUSH
17574: LD_INT 37800
17576: PUSH
17577: LD_INT 33600
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_OWVAR 67
17589: ARRAY
17590: MOD
17591: IFFALSE 17607
// time := time + 0 0$20 ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 700
17605: PLUS
17606: ST_TO_ADDR
// end until game_status = false ;
17607: LD_EXP 29
17611: PUSH
17612: LD_INT 0
17614: EQUAL
17615: IFFALSE 17485
// end ;
17617: PPOPN 1
17619: END
// every 0 0$03 trigger game_status do var time ;
17620: LD_EXP 29
17624: IFFALSE 17778
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 700
17639: PUSH
17640: LD_INT 875
17642: PUSH
17643: LD_INT 1400
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: LD_OWVAR 67
17655: ARRAY
17656: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 0
17664: PPUSH
17665: LD_INT 385
17667: PPUSH
17668: CALL_OW 12
17672: PLUS
17673: PPUSH
17674: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17678: LD_INT 1
17680: PPUSH
17681: LD_INT 5
17683: PPUSH
17684: CALL_OW 12
17688: PPUSH
17689: LD_INT 102
17691: PPUSH
17692: LD_INT 6
17694: PPUSH
17695: LD_INT 25
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17705: LD_OWVAR 1
17709: PUSH
17710: LD_INT 52500
17712: PUSH
17713: LD_INT 46200
17715: PUSH
17716: LD_INT 42000
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: PUSH
17724: LD_OWVAR 67
17728: ARRAY
17729: MOD
17730: IFFALSE 17746
// time := time + 0 0$25 ;
17732: LD_ADDR_VAR 0 1
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 875
17744: PLUS
17745: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17746: LD_OWVAR 1
17750: PUSH
17751: LD_INT 231000
17753: MOD
17754: PUSH
17755: LD_INT 0
17757: EQUAL
17758: IFFALSE 17768
// time := 0 0$30 ;
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_INT 1050
17767: ST_TO_ADDR
// end until game_status = false ;
17768: LD_EXP 29
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17657
// end ;
17778: PPOPN 1
17780: END
// every 0 0$03 trigger game_status do var time ;
17781: LD_EXP 29
17785: IFFALSE 17921
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: LD_INT 1050
17800: PUSH
17801: LD_INT 1575
17803: PUSH
17804: LD_INT 1750
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: LD_OWVAR 67
17816: ARRAY
17817: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17818: LD_VAR 0 1
17822: PUSH
17823: LD_INT 0
17825: PPUSH
17826: LD_INT 385
17828: PPUSH
17829: CALL_OW 12
17833: PLUS
17834: PPUSH
17835: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 5
17844: PPUSH
17845: CALL_OW 12
17849: PPUSH
17850: LD_INT 51
17852: PPUSH
17853: LD_INT 74
17855: PPUSH
17856: LD_INT 25
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17866: LD_OWVAR 1
17870: PUSH
17871: LD_INT 84000
17873: PUSH
17874: LD_INT 105000
17876: PUSH
17877: LD_INT 136500
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_OWVAR 67
17889: ARRAY
17890: MOD
17891: PUSH
17892: LD_INT 0
17894: EQUAL
17895: IFFALSE 17911
// time := time + 0 0$15 ;
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 525
17909: PLUS
17910: ST_TO_ADDR
// end until game_status = false ;
17911: LD_EXP 29
17915: PUSH
17916: LD_INT 0
17918: EQUAL
17919: IFFALSE 17818
// end ; end_of_file
17921: PPOPN 1
17923: END
// every 0 0$01 trigger not debug do
17924: LD_EXP 1
17928: NOT
17929: IFFALSE 17952
17931: GO 17933
17933: DISABLE
// begin enable ;
17934: ENABLE
// Display_Strings := [ #tick , tick ] ;
17935: LD_ADDR_OWVAR 47
17939: PUSH
17940: LD_STRING #tick
17942: PUSH
17943: LD_OWVAR 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
// end ; end_of_file
17952: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
17953: LD_VAR 0 1
17957: PPUSH
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL 34678 0 2
// if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 255
17976: PUSH
17977: LD_INT 3
17979: EQUAL
17980: PUSH
17981: LD_VAR 0 1
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: LD_INT 34
17991: PUSH
17992: LD_INT 46
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 34
18001: PUSH
18002: LD_INT 47
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 34
18011: PUSH
18012: LD_INT 45
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: PUSH
18025: EMPTY
18026: LIST
18027: PPUSH
18028: CALL_OW 69
18032: IN
18033: AND
18034: IFFALSE 18052
// ru_reserve := ru_reserve ^ un ;
18036: LD_ADDR_EXP 9
18040: PUSH
18041: LD_EXP 9
18045: PUSH
18046: LD_VAR 0 1
18050: ADD
18051: ST_TO_ADDR
// if GetSide ( un ) = 3 and not GetWeapon ( un ) in [ ru_siberium_rocket , ru_crane ] then
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 255
18061: PUSH
18062: LD_INT 3
18064: EQUAL
18065: PUSH
18066: LD_VAR 0 1
18070: PPUSH
18071: CALL_OW 264
18075: PUSH
18076: LD_INT 48
18078: PUSH
18079: LD_INT 52
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: IN
18086: NOT
18087: AND
18088: IFFALSE 18105
// ComMoveXY ( un , 65 , 60 ) ;
18090: LD_VAR 0 1
18094: PPUSH
18095: LD_INT 65
18097: PPUSH
18098: LD_INT 60
18100: PPUSH
18101: CALL_OW 111
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18105: LD_VAR 0 1
18109: PUSH
18110: LD_INT 22
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 34
18122: PUSH
18123: LD_INT 48
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: IN
18139: IFFALSE 18192
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18141: LD_INT 12
18143: PPUSH
18144: LD_INT 22
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PPUSH
18154: CALL_OW 70
18158: IFFALSE 18177
// ComAttackPlace ( un , 98 , 10 ) else
18160: LD_VAR 0 1
18164: PPUSH
18165: LD_INT 98
18167: PPUSH
18168: LD_INT 10
18170: PPUSH
18171: CALL_OW 116
18175: GO 18192
// ComAttackPlace ( un , 134 , 99 ) ;
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_INT 134
18184: PPUSH
18185: LD_INT 99
18187: PPUSH
18188: CALL_OW 116
// end ;
18192: PPOPN 2
18194: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18195: LD_VAR 0 1
18199: PPUSH
18200: CALL 34556 0 1
// if GetChassis ( un ) = 25 then
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 265
18213: PUSH
18214: LD_INT 25
18216: EQUAL
18217: IFFALSE 18226
// SetAchievement ( ACH_BEH ) ;
18219: LD_STRING ACH_BEH
18221: PPUSH
18222: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18226: LD_VAR 0 1
18230: PUSH
18231: LD_INT 22
18233: PUSH
18234: LD_INT 3
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 21
18243: PUSH
18244: LD_INT 3
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PPUSH
18255: CALL_OW 69
18259: IN
18260: PUSH
18261: LD_VAR 0 1
18265: PPUSH
18266: CALL_OW 266
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: LD_INT 29
18276: PUSH
18277: LD_INT 30
18279: PUSH
18280: LD_INT 26
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: IN
18289: NOT
18290: AND
18291: IFFALSE 18377
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18293: LD_ADDR_EXP 13
18297: PUSH
18298: LD_EXP 13
18302: PUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 266
18312: ADD
18313: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18314: LD_ADDR_EXP 13
18318: PUSH
18319: LD_EXP 13
18323: PUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 250
18333: ADD
18334: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18335: LD_ADDR_EXP 13
18339: PUSH
18340: LD_EXP 13
18344: PUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 251
18354: ADD
18355: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18356: LD_ADDR_EXP 13
18360: PUSH
18361: LD_EXP 13
18365: PUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 254
18375: ADD
18376: ST_TO_ADDR
// end ; if un in ru_attack_list then
18377: LD_VAR 0 1
18381: PUSH
18382: LD_EXP 10
18386: IN
18387: IFFALSE 18405
// ru_attack_list := ru_attack_list diff un ;
18389: LD_ADDR_EXP 10
18393: PUSH
18394: LD_EXP 10
18398: PUSH
18399: LD_VAR 0 1
18403: DIFF
18404: ST_TO_ADDR
// if un in ru_protector then
18405: LD_VAR 0 1
18409: PUSH
18410: LD_EXP 17
18414: IN
18415: IFFALSE 18433
// ru_protector := ru_protector diff un ;
18417: LD_ADDR_EXP 17
18421: PUSH
18422: LD_EXP 17
18426: PUSH
18427: LD_VAR 0 1
18431: DIFF
18432: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 266
18442: PUSH
18443: LD_INT 30
18445: EQUAL
18446: PUSH
18447: LD_VAR 0 1
18451: PPUSH
18452: CALL_OW 255
18456: PUSH
18457: LD_INT 1
18459: EQUAL
18460: AND
18461: IFFALSE 18471
// mine_ck := true ;
18463: LD_ADDR_EXP 35
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// end ;
18471: PPOPN 1
18473: END
// on BuildingComplete ( un ) do var i ;
18474: LD_INT 0
18476: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 255
18486: PUSH
18487: LD_INT 1
18489: EQUAL
18490: PUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 266
18500: PUSH
18501: LD_INT 0
18503: EQUAL
18504: AND
18505: IFFALSE 18515
// depotConstructed := true ;
18507: LD_ADDR_EXP 2
18511: PUSH
18512: LD_INT 1
18514: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 255
18524: PUSH
18525: LD_INT 1
18527: EQUAL
18528: PUSH
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 266
18538: PUSH
18539: LD_INT 30
18541: EQUAL
18542: AND
18543: IFFALSE 18553
// mine_constructed := true ;
18545: LD_ADDR_EXP 37
18549: PUSH
18550: LD_INT 1
18552: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 255
18562: PUSH
18563: LD_INT 3
18565: EQUAL
18566: PUSH
18567: LD_VAR 0 1
18571: PPUSH
18572: CALL_OW 266
18576: PUSH
18577: LD_INT 0
18579: EQUAL
18580: AND
18581: IFFALSE 18638
// begin for i = 1 to 2 do
18583: LD_ADDR_VAR 0 2
18587: PUSH
18588: DOUBLE
18589: LD_INT 1
18591: DEC
18592: ST_TO_ADDR
18593: LD_INT 2
18595: PUSH
18596: FOR_TO
18597: IFFALSE 18636
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18599: LD_EXP 20
18603: PUSH
18604: LD_VAR 0 2
18608: ARRAY
18609: PPUSH
18610: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18614: LD_EXP 20
18618: PUSH
18619: LD_VAR 0 2
18623: ARRAY
18624: PPUSH
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 180
// end ;
18634: GO 18596
18636: POP
18637: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18638: LD_VAR 0 1
18642: PPUSH
18643: CALL_OW 255
18647: PUSH
18648: LD_INT 3
18650: EQUAL
18651: PUSH
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 266
18661: PUSH
18662: LD_EXP 13
18666: IN
18667: AND
18668: IFFALSE 18708
// for i = 1 to 4 do
18670: LD_ADDR_VAR 0 2
18674: PUSH
18675: DOUBLE
18676: LD_INT 1
18678: DEC
18679: ST_TO_ADDR
18680: LD_INT 4
18682: PUSH
18683: FOR_TO
18684: IFFALSE 18706
// ru_blist := Delete ( ru_blist , 1 ) ;
18686: LD_ADDR_EXP 13
18690: PUSH
18691: LD_EXP 13
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL_OW 3
18703: ST_TO_ADDR
18704: GO 18683
18706: POP
18707: POP
// end ;
18708: PPOPN 2
18710: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18711: LD_VAR 0 1
18715: PPUSH
18716: LD_VAR 0 2
18720: PPUSH
18721: LD_VAR 0 3
18725: PPUSH
18726: CALL 34654 0 3
// end ;
18730: PPOPN 3
18732: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18733: LD_VAR 0 1
18737: PPUSH
18738: CALL 34662 0 1
// end ; end_of_file
18742: PPOPN 1
18744: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
18745: LD_INT 0
18747: PPUSH
// ar_miner := 81 ;
18748: LD_ADDR_EXP 50
18752: PUSH
18753: LD_INT 81
18755: ST_TO_ADDR
// ar_crane := 88 ;
18756: LD_ADDR_EXP 49
18760: PUSH
18761: LD_INT 88
18763: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18764: LD_ADDR_EXP 44
18768: PUSH
18769: LD_INT 89
18771: ST_TO_ADDR
// us_hack := 99 ;
18772: LD_ADDR_EXP 45
18776: PUSH
18777: LD_INT 99
18779: ST_TO_ADDR
// us_artillery := 97 ;
18780: LD_ADDR_EXP 46
18784: PUSH
18785: LD_INT 97
18787: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18788: LD_ADDR_EXP 47
18792: PUSH
18793: LD_INT 91
18795: ST_TO_ADDR
// ar_mortar := 92 ;
18796: LD_ADDR_EXP 48
18800: PUSH
18801: LD_INT 92
18803: ST_TO_ADDR
// ru_flamethrower := 93 ;
18804: LD_ADDR_EXP 51
18808: PUSH
18809: LD_INT 93
18811: ST_TO_ADDR
// ru_radar := 98 ;
18812: LD_ADDR_EXP 43
18816: PUSH
18817: LD_INT 98
18819: ST_TO_ADDR
// tech_Artillery := 80 ;
18820: LD_ADDR_EXP 52
18824: PUSH
18825: LD_INT 80
18827: ST_TO_ADDR
// tech_RadMat := 81 ;
18828: LD_ADDR_EXP 53
18832: PUSH
18833: LD_INT 81
18835: ST_TO_ADDR
// tech_BasicTools := 82 ;
18836: LD_ADDR_EXP 54
18840: PUSH
18841: LD_INT 82
18843: ST_TO_ADDR
// tech_Cargo := 83 ;
18844: LD_ADDR_EXP 55
18848: PUSH
18849: LD_INT 83
18851: ST_TO_ADDR
// tech_Track := 84 ;
18852: LD_ADDR_EXP 56
18856: PUSH
18857: LD_INT 84
18859: ST_TO_ADDR
// tech_Crane := 85 ;
18860: LD_ADDR_EXP 57
18864: PUSH
18865: LD_INT 85
18867: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18868: LD_ADDR_EXP 58
18872: PUSH
18873: LD_INT 86
18875: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18876: LD_ADDR_EXP 59
18880: PUSH
18881: LD_INT 87
18883: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18884: LD_ADDR_EXP 60
18888: PUSH
18889: LD_INT 88
18891: ST_TO_ADDR
// end ;
18892: LD_VAR 0 1
18896: RET
// every 1 do
18897: GO 18899
18899: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18900: CALL 18745 0 0
18904: END
// every 0 0$1 do
18905: GO 18907
18907: DISABLE
// begin enable ;
18908: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18909: LD_STRING updateTimer(
18911: PUSH
18912: LD_OWVAR 1
18916: STR
18917: PUSH
18918: LD_STRING );
18920: STR
18921: PPUSH
18922: CALL_OW 559
// end ;
18926: END
// export function SOS_MapStart ( ) ; begin
18927: LD_INT 0
18929: PPUSH
// if streamModeActive then
18930: LD_EXP 61
18934: IFFALSE 18943
// DefineStreamItems ( true ) ;
18936: LD_INT 1
18938: PPUSH
18939: CALL 20597 0 1
// UpdateFactoryWaypoints ( ) ;
18943: CALL 33458 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18947: CALL 33715 0 0
// end ;
18951: LD_VAR 0 1
18955: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18956: LD_INT 0
18958: PPUSH
// if p2 = 100 then
18959: LD_VAR 0 2
18963: PUSH
18964: LD_INT 100
18966: EQUAL
18967: IFFALSE 19970
// begin if not StreamModeActive then
18969: LD_EXP 61
18973: NOT
18974: IFFALSE 18984
// StreamModeActive := true ;
18976: LD_ADDR_EXP 61
18980: PUSH
18981: LD_INT 1
18983: ST_TO_ADDR
// if p3 = 0 then
18984: LD_VAR 0 3
18988: PUSH
18989: LD_INT 0
18991: EQUAL
18992: IFFALSE 18998
// InitStreamMode ;
18994: CALL 20133 0 0
// if p3 = 1 then
18998: LD_VAR 0 3
19002: PUSH
19003: LD_INT 1
19005: EQUAL
19006: IFFALSE 19016
// sRocket := true ;
19008: LD_ADDR_EXP 66
19012: PUSH
19013: LD_INT 1
19015: ST_TO_ADDR
// if p3 = 2 then
19016: LD_VAR 0 3
19020: PUSH
19021: LD_INT 2
19023: EQUAL
19024: IFFALSE 19034
// sSpeed := true ;
19026: LD_ADDR_EXP 65
19030: PUSH
19031: LD_INT 1
19033: ST_TO_ADDR
// if p3 = 3 then
19034: LD_VAR 0 3
19038: PUSH
19039: LD_INT 3
19041: EQUAL
19042: IFFALSE 19052
// sEngine := true ;
19044: LD_ADDR_EXP 67
19048: PUSH
19049: LD_INT 1
19051: ST_TO_ADDR
// if p3 = 4 then
19052: LD_VAR 0 3
19056: PUSH
19057: LD_INT 4
19059: EQUAL
19060: IFFALSE 19070
// sSpec := true ;
19062: LD_ADDR_EXP 64
19066: PUSH
19067: LD_INT 1
19069: ST_TO_ADDR
// if p3 = 5 then
19070: LD_VAR 0 3
19074: PUSH
19075: LD_INT 5
19077: EQUAL
19078: IFFALSE 19088
// sLevel := true ;
19080: LD_ADDR_EXP 68
19084: PUSH
19085: LD_INT 1
19087: ST_TO_ADDR
// if p3 = 6 then
19088: LD_VAR 0 3
19092: PUSH
19093: LD_INT 6
19095: EQUAL
19096: IFFALSE 19106
// sArmoury := true ;
19098: LD_ADDR_EXP 69
19102: PUSH
19103: LD_INT 1
19105: ST_TO_ADDR
// if p3 = 7 then
19106: LD_VAR 0 3
19110: PUSH
19111: LD_INT 7
19113: EQUAL
19114: IFFALSE 19124
// sRadar := true ;
19116: LD_ADDR_EXP 70
19120: PUSH
19121: LD_INT 1
19123: ST_TO_ADDR
// if p3 = 8 then
19124: LD_VAR 0 3
19128: PUSH
19129: LD_INT 8
19131: EQUAL
19132: IFFALSE 19142
// sBunker := true ;
19134: LD_ADDR_EXP 71
19138: PUSH
19139: LD_INT 1
19141: ST_TO_ADDR
// if p3 = 9 then
19142: LD_VAR 0 3
19146: PUSH
19147: LD_INT 9
19149: EQUAL
19150: IFFALSE 19160
// sHack := true ;
19152: LD_ADDR_EXP 72
19156: PUSH
19157: LD_INT 1
19159: ST_TO_ADDR
// if p3 = 10 then
19160: LD_VAR 0 3
19164: PUSH
19165: LD_INT 10
19167: EQUAL
19168: IFFALSE 19178
// sFire := true ;
19170: LD_ADDR_EXP 73
19174: PUSH
19175: LD_INT 1
19177: ST_TO_ADDR
// if p3 = 11 then
19178: LD_VAR 0 3
19182: PUSH
19183: LD_INT 11
19185: EQUAL
19186: IFFALSE 19196
// sRefresh := true ;
19188: LD_ADDR_EXP 74
19192: PUSH
19193: LD_INT 1
19195: ST_TO_ADDR
// if p3 = 12 then
19196: LD_VAR 0 3
19200: PUSH
19201: LD_INT 12
19203: EQUAL
19204: IFFALSE 19214
// sExp := true ;
19206: LD_ADDR_EXP 75
19210: PUSH
19211: LD_INT 1
19213: ST_TO_ADDR
// if p3 = 13 then
19214: LD_VAR 0 3
19218: PUSH
19219: LD_INT 13
19221: EQUAL
19222: IFFALSE 19232
// sDepot := true ;
19224: LD_ADDR_EXP 76
19228: PUSH
19229: LD_INT 1
19231: ST_TO_ADDR
// if p3 = 14 then
19232: LD_VAR 0 3
19236: PUSH
19237: LD_INT 14
19239: EQUAL
19240: IFFALSE 19250
// sFlag := true ;
19242: LD_ADDR_EXP 77
19246: PUSH
19247: LD_INT 1
19249: ST_TO_ADDR
// if p3 = 15 then
19250: LD_VAR 0 3
19254: PUSH
19255: LD_INT 15
19257: EQUAL
19258: IFFALSE 19268
// sKamikadze := true ;
19260: LD_ADDR_EXP 85
19264: PUSH
19265: LD_INT 1
19267: ST_TO_ADDR
// if p3 = 16 then
19268: LD_VAR 0 3
19272: PUSH
19273: LD_INT 16
19275: EQUAL
19276: IFFALSE 19286
// sTroll := true ;
19278: LD_ADDR_EXP 86
19282: PUSH
19283: LD_INT 1
19285: ST_TO_ADDR
// if p3 = 17 then
19286: LD_VAR 0 3
19290: PUSH
19291: LD_INT 17
19293: EQUAL
19294: IFFALSE 19304
// sSlow := true ;
19296: LD_ADDR_EXP 87
19300: PUSH
19301: LD_INT 1
19303: ST_TO_ADDR
// if p3 = 18 then
19304: LD_VAR 0 3
19308: PUSH
19309: LD_INT 18
19311: EQUAL
19312: IFFALSE 19322
// sLack := true ;
19314: LD_ADDR_EXP 88
19318: PUSH
19319: LD_INT 1
19321: ST_TO_ADDR
// if p3 = 19 then
19322: LD_VAR 0 3
19326: PUSH
19327: LD_INT 19
19329: EQUAL
19330: IFFALSE 19340
// sTank := true ;
19332: LD_ADDR_EXP 90
19336: PUSH
19337: LD_INT 1
19339: ST_TO_ADDR
// if p3 = 20 then
19340: LD_VAR 0 3
19344: PUSH
19345: LD_INT 20
19347: EQUAL
19348: IFFALSE 19358
// sRemote := true ;
19350: LD_ADDR_EXP 91
19354: PUSH
19355: LD_INT 1
19357: ST_TO_ADDR
// if p3 = 21 then
19358: LD_VAR 0 3
19362: PUSH
19363: LD_INT 21
19365: EQUAL
19366: IFFALSE 19376
// sPowell := true ;
19368: LD_ADDR_EXP 92
19372: PUSH
19373: LD_INT 1
19375: ST_TO_ADDR
// if p3 = 22 then
19376: LD_VAR 0 3
19380: PUSH
19381: LD_INT 22
19383: EQUAL
19384: IFFALSE 19394
// sTeleport := true ;
19386: LD_ADDR_EXP 95
19390: PUSH
19391: LD_INT 1
19393: ST_TO_ADDR
// if p3 = 23 then
19394: LD_VAR 0 3
19398: PUSH
19399: LD_INT 23
19401: EQUAL
19402: IFFALSE 19412
// sOilTower := true ;
19404: LD_ADDR_EXP 97
19408: PUSH
19409: LD_INT 1
19411: ST_TO_ADDR
// if p3 = 24 then
19412: LD_VAR 0 3
19416: PUSH
19417: LD_INT 24
19419: EQUAL
19420: IFFALSE 19430
// sShovel := true ;
19422: LD_ADDR_EXP 98
19426: PUSH
19427: LD_INT 1
19429: ST_TO_ADDR
// if p3 = 25 then
19430: LD_VAR 0 3
19434: PUSH
19435: LD_INT 25
19437: EQUAL
19438: IFFALSE 19448
// sSheik := true ;
19440: LD_ADDR_EXP 99
19444: PUSH
19445: LD_INT 1
19447: ST_TO_ADDR
// if p3 = 26 then
19448: LD_VAR 0 3
19452: PUSH
19453: LD_INT 26
19455: EQUAL
19456: IFFALSE 19466
// sEarthquake := true ;
19458: LD_ADDR_EXP 101
19462: PUSH
19463: LD_INT 1
19465: ST_TO_ADDR
// if p3 = 27 then
19466: LD_VAR 0 3
19470: PUSH
19471: LD_INT 27
19473: EQUAL
19474: IFFALSE 19484
// sAI := true ;
19476: LD_ADDR_EXP 102
19480: PUSH
19481: LD_INT 1
19483: ST_TO_ADDR
// if p3 = 28 then
19484: LD_VAR 0 3
19488: PUSH
19489: LD_INT 28
19491: EQUAL
19492: IFFALSE 19502
// sCargo := true ;
19494: LD_ADDR_EXP 105
19498: PUSH
19499: LD_INT 1
19501: ST_TO_ADDR
// if p3 = 29 then
19502: LD_VAR 0 3
19506: PUSH
19507: LD_INT 29
19509: EQUAL
19510: IFFALSE 19520
// sDLaser := true ;
19512: LD_ADDR_EXP 106
19516: PUSH
19517: LD_INT 1
19519: ST_TO_ADDR
// if p3 = 30 then
19520: LD_VAR 0 3
19524: PUSH
19525: LD_INT 30
19527: EQUAL
19528: IFFALSE 19538
// sExchange := true ;
19530: LD_ADDR_EXP 107
19534: PUSH
19535: LD_INT 1
19537: ST_TO_ADDR
// if p3 = 31 then
19538: LD_VAR 0 3
19542: PUSH
19543: LD_INT 31
19545: EQUAL
19546: IFFALSE 19556
// sFac := true ;
19548: LD_ADDR_EXP 108
19552: PUSH
19553: LD_INT 1
19555: ST_TO_ADDR
// if p3 = 32 then
19556: LD_VAR 0 3
19560: PUSH
19561: LD_INT 32
19563: EQUAL
19564: IFFALSE 19574
// sPower := true ;
19566: LD_ADDR_EXP 109
19570: PUSH
19571: LD_INT 1
19573: ST_TO_ADDR
// if p3 = 33 then
19574: LD_VAR 0 3
19578: PUSH
19579: LD_INT 33
19581: EQUAL
19582: IFFALSE 19592
// sRandom := true ;
19584: LD_ADDR_EXP 110
19588: PUSH
19589: LD_INT 1
19591: ST_TO_ADDR
// if p3 = 34 then
19592: LD_VAR 0 3
19596: PUSH
19597: LD_INT 34
19599: EQUAL
19600: IFFALSE 19610
// sShield := true ;
19602: LD_ADDR_EXP 111
19606: PUSH
19607: LD_INT 1
19609: ST_TO_ADDR
// if p3 = 35 then
19610: LD_VAR 0 3
19614: PUSH
19615: LD_INT 35
19617: EQUAL
19618: IFFALSE 19628
// sTime := true ;
19620: LD_ADDR_EXP 112
19624: PUSH
19625: LD_INT 1
19627: ST_TO_ADDR
// if p3 = 36 then
19628: LD_VAR 0 3
19632: PUSH
19633: LD_INT 36
19635: EQUAL
19636: IFFALSE 19646
// sTools := true ;
19638: LD_ADDR_EXP 113
19642: PUSH
19643: LD_INT 1
19645: ST_TO_ADDR
// if p3 = 101 then
19646: LD_VAR 0 3
19650: PUSH
19651: LD_INT 101
19653: EQUAL
19654: IFFALSE 19664
// sSold := true ;
19656: LD_ADDR_EXP 78
19660: PUSH
19661: LD_INT 1
19663: ST_TO_ADDR
// if p3 = 102 then
19664: LD_VAR 0 3
19668: PUSH
19669: LD_INT 102
19671: EQUAL
19672: IFFALSE 19682
// sDiff := true ;
19674: LD_ADDR_EXP 79
19678: PUSH
19679: LD_INT 1
19681: ST_TO_ADDR
// if p3 = 103 then
19682: LD_VAR 0 3
19686: PUSH
19687: LD_INT 103
19689: EQUAL
19690: IFFALSE 19700
// sFog := true ;
19692: LD_ADDR_EXP 82
19696: PUSH
19697: LD_INT 1
19699: ST_TO_ADDR
// if p3 = 104 then
19700: LD_VAR 0 3
19704: PUSH
19705: LD_INT 104
19707: EQUAL
19708: IFFALSE 19718
// sReset := true ;
19710: LD_ADDR_EXP 83
19714: PUSH
19715: LD_INT 1
19717: ST_TO_ADDR
// if p3 = 105 then
19718: LD_VAR 0 3
19722: PUSH
19723: LD_INT 105
19725: EQUAL
19726: IFFALSE 19736
// sSun := true ;
19728: LD_ADDR_EXP 84
19732: PUSH
19733: LD_INT 1
19735: ST_TO_ADDR
// if p3 = 106 then
19736: LD_VAR 0 3
19740: PUSH
19741: LD_INT 106
19743: EQUAL
19744: IFFALSE 19754
// sTiger := true ;
19746: LD_ADDR_EXP 80
19750: PUSH
19751: LD_INT 1
19753: ST_TO_ADDR
// if p3 = 107 then
19754: LD_VAR 0 3
19758: PUSH
19759: LD_INT 107
19761: EQUAL
19762: IFFALSE 19772
// sBomb := true ;
19764: LD_ADDR_EXP 81
19768: PUSH
19769: LD_INT 1
19771: ST_TO_ADDR
// if p3 = 108 then
19772: LD_VAR 0 3
19776: PUSH
19777: LD_INT 108
19779: EQUAL
19780: IFFALSE 19790
// sWound := true ;
19782: LD_ADDR_EXP 89
19786: PUSH
19787: LD_INT 1
19789: ST_TO_ADDR
// if p3 = 109 then
19790: LD_VAR 0 3
19794: PUSH
19795: LD_INT 109
19797: EQUAL
19798: IFFALSE 19808
// sBetray := true ;
19800: LD_ADDR_EXP 93
19804: PUSH
19805: LD_INT 1
19807: ST_TO_ADDR
// if p3 = 110 then
19808: LD_VAR 0 3
19812: PUSH
19813: LD_INT 110
19815: EQUAL
19816: IFFALSE 19826
// sContamin := true ;
19818: LD_ADDR_EXP 94
19822: PUSH
19823: LD_INT 1
19825: ST_TO_ADDR
// if p3 = 111 then
19826: LD_VAR 0 3
19830: PUSH
19831: LD_INT 111
19833: EQUAL
19834: IFFALSE 19844
// sOil := true ;
19836: LD_ADDR_EXP 96
19840: PUSH
19841: LD_INT 1
19843: ST_TO_ADDR
// if p3 = 112 then
19844: LD_VAR 0 3
19848: PUSH
19849: LD_INT 112
19851: EQUAL
19852: IFFALSE 19862
// sStu := true ;
19854: LD_ADDR_EXP 100
19858: PUSH
19859: LD_INT 1
19861: ST_TO_ADDR
// if p3 = 113 then
19862: LD_VAR 0 3
19866: PUSH
19867: LD_INT 113
19869: EQUAL
19870: IFFALSE 19880
// sBazooka := true ;
19872: LD_ADDR_EXP 103
19876: PUSH
19877: LD_INT 1
19879: ST_TO_ADDR
// if p3 = 114 then
19880: LD_VAR 0 3
19884: PUSH
19885: LD_INT 114
19887: EQUAL
19888: IFFALSE 19898
// sMortar := true ;
19890: LD_ADDR_EXP 104
19894: PUSH
19895: LD_INT 1
19897: ST_TO_ADDR
// if p3 = 115 then
19898: LD_VAR 0 3
19902: PUSH
19903: LD_INT 115
19905: EQUAL
19906: IFFALSE 19916
// sRanger := true ;
19908: LD_ADDR_EXP 114
19912: PUSH
19913: LD_INT 1
19915: ST_TO_ADDR
// if p3 = 116 then
19916: LD_VAR 0 3
19920: PUSH
19921: LD_INT 116
19923: EQUAL
19924: IFFALSE 19934
// sComputer := true ;
19926: LD_ADDR_EXP 115
19930: PUSH
19931: LD_INT 1
19933: ST_TO_ADDR
// if p3 = 117 then
19934: LD_VAR 0 3
19938: PUSH
19939: LD_INT 117
19941: EQUAL
19942: IFFALSE 19952
// s30 := true ;
19944: LD_ADDR_EXP 116
19948: PUSH
19949: LD_INT 1
19951: ST_TO_ADDR
// if p3 = 118 then
19952: LD_VAR 0 3
19956: PUSH
19957: LD_INT 118
19959: EQUAL
19960: IFFALSE 19970
// s60 := true ;
19962: LD_ADDR_EXP 117
19966: PUSH
19967: LD_INT 1
19969: ST_TO_ADDR
// end ; if p2 = 101 then
19970: LD_VAR 0 2
19974: PUSH
19975: LD_INT 101
19977: EQUAL
19978: IFFALSE 20106
// begin case p3 of 1 :
19980: LD_VAR 0 3
19984: PUSH
19985: LD_INT 1
19987: DOUBLE
19988: EQUAL
19989: IFTRUE 19993
19991: GO 20000
19993: POP
// hHackUnlimitedResources ; 2 :
19994: CALL 32204 0 0
19998: GO 20106
20000: LD_INT 2
20002: DOUBLE
20003: EQUAL
20004: IFTRUE 20008
20006: GO 20015
20008: POP
// hHackSetLevel10 ; 3 :
20009: CALL 32337 0 0
20013: GO 20106
20015: LD_INT 3
20017: DOUBLE
20018: EQUAL
20019: IFTRUE 20023
20021: GO 20030
20023: POP
// hHackSetLevel10YourUnits ; 4 :
20024: CALL 32422 0 0
20028: GO 20106
20030: LD_INT 4
20032: DOUBLE
20033: EQUAL
20034: IFTRUE 20038
20036: GO 20045
20038: POP
// hHackInvincible ; 5 :
20039: CALL 32870 0 0
20043: GO 20106
20045: LD_INT 5
20047: DOUBLE
20048: EQUAL
20049: IFTRUE 20053
20051: GO 20060
20053: POP
// hHackInvisible ; 6 :
20054: CALL 32981 0 0
20058: GO 20106
20060: LD_INT 6
20062: DOUBLE
20063: EQUAL
20064: IFTRUE 20068
20066: GO 20075
20068: POP
// hHackChangeYourSide ; 7 :
20069: CALL 33038 0 0
20073: GO 20106
20075: LD_INT 7
20077: DOUBLE
20078: EQUAL
20079: IFTRUE 20083
20081: GO 20090
20083: POP
// hHackChangeUnitSide ; 8 :
20084: CALL 33080 0 0
20088: GO 20106
20090: LD_INT 8
20092: DOUBLE
20093: EQUAL
20094: IFTRUE 20098
20096: GO 20105
20098: POP
// hHackFog ; end ;
20099: CALL 33181 0 0
20103: GO 20106
20105: POP
// end ; end ;
20106: LD_VAR 0 7
20110: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20111: GO 20113
20113: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20114: LD_STRING initStreamRollete();
20116: PPUSH
20117: CALL_OW 559
// InitStreamMode ;
20121: CALL 20133 0 0
// DefineStreamItems ( false ) ;
20125: LD_INT 0
20127: PPUSH
20128: CALL 20597 0 1
// end ;
20132: END
// function InitStreamMode ; begin
20133: LD_INT 0
20135: PPUSH
// streamModeActive := false ;
20136: LD_ADDR_EXP 61
20140: PUSH
20141: LD_INT 0
20143: ST_TO_ADDR
// normalCounter := 36 ;
20144: LD_ADDR_EXP 62
20148: PUSH
20149: LD_INT 36
20151: ST_TO_ADDR
// hardcoreCounter := 18 ;
20152: LD_ADDR_EXP 63
20156: PUSH
20157: LD_INT 18
20159: ST_TO_ADDR
// sRocket := false ;
20160: LD_ADDR_EXP 66
20164: PUSH
20165: LD_INT 0
20167: ST_TO_ADDR
// sSpeed := false ;
20168: LD_ADDR_EXP 65
20172: PUSH
20173: LD_INT 0
20175: ST_TO_ADDR
// sEngine := false ;
20176: LD_ADDR_EXP 67
20180: PUSH
20181: LD_INT 0
20183: ST_TO_ADDR
// sSpec := false ;
20184: LD_ADDR_EXP 64
20188: PUSH
20189: LD_INT 0
20191: ST_TO_ADDR
// sLevel := false ;
20192: LD_ADDR_EXP 68
20196: PUSH
20197: LD_INT 0
20199: ST_TO_ADDR
// sArmoury := false ;
20200: LD_ADDR_EXP 69
20204: PUSH
20205: LD_INT 0
20207: ST_TO_ADDR
// sRadar := false ;
20208: LD_ADDR_EXP 70
20212: PUSH
20213: LD_INT 0
20215: ST_TO_ADDR
// sBunker := false ;
20216: LD_ADDR_EXP 71
20220: PUSH
20221: LD_INT 0
20223: ST_TO_ADDR
// sHack := false ;
20224: LD_ADDR_EXP 72
20228: PUSH
20229: LD_INT 0
20231: ST_TO_ADDR
// sFire := false ;
20232: LD_ADDR_EXP 73
20236: PUSH
20237: LD_INT 0
20239: ST_TO_ADDR
// sRefresh := false ;
20240: LD_ADDR_EXP 74
20244: PUSH
20245: LD_INT 0
20247: ST_TO_ADDR
// sExp := false ;
20248: LD_ADDR_EXP 75
20252: PUSH
20253: LD_INT 0
20255: ST_TO_ADDR
// sDepot := false ;
20256: LD_ADDR_EXP 76
20260: PUSH
20261: LD_INT 0
20263: ST_TO_ADDR
// sFlag := false ;
20264: LD_ADDR_EXP 77
20268: PUSH
20269: LD_INT 0
20271: ST_TO_ADDR
// sKamikadze := false ;
20272: LD_ADDR_EXP 85
20276: PUSH
20277: LD_INT 0
20279: ST_TO_ADDR
// sTroll := false ;
20280: LD_ADDR_EXP 86
20284: PUSH
20285: LD_INT 0
20287: ST_TO_ADDR
// sSlow := false ;
20288: LD_ADDR_EXP 87
20292: PUSH
20293: LD_INT 0
20295: ST_TO_ADDR
// sLack := false ;
20296: LD_ADDR_EXP 88
20300: PUSH
20301: LD_INT 0
20303: ST_TO_ADDR
// sTank := false ;
20304: LD_ADDR_EXP 90
20308: PUSH
20309: LD_INT 0
20311: ST_TO_ADDR
// sRemote := false ;
20312: LD_ADDR_EXP 91
20316: PUSH
20317: LD_INT 0
20319: ST_TO_ADDR
// sPowell := false ;
20320: LD_ADDR_EXP 92
20324: PUSH
20325: LD_INT 0
20327: ST_TO_ADDR
// sTeleport := false ;
20328: LD_ADDR_EXP 95
20332: PUSH
20333: LD_INT 0
20335: ST_TO_ADDR
// sOilTower := false ;
20336: LD_ADDR_EXP 97
20340: PUSH
20341: LD_INT 0
20343: ST_TO_ADDR
// sShovel := false ;
20344: LD_ADDR_EXP 98
20348: PUSH
20349: LD_INT 0
20351: ST_TO_ADDR
// sSheik := false ;
20352: LD_ADDR_EXP 99
20356: PUSH
20357: LD_INT 0
20359: ST_TO_ADDR
// sEarthquake := false ;
20360: LD_ADDR_EXP 101
20364: PUSH
20365: LD_INT 0
20367: ST_TO_ADDR
// sAI := false ;
20368: LD_ADDR_EXP 102
20372: PUSH
20373: LD_INT 0
20375: ST_TO_ADDR
// sCargo := false ;
20376: LD_ADDR_EXP 105
20380: PUSH
20381: LD_INT 0
20383: ST_TO_ADDR
// sDLaser := false ;
20384: LD_ADDR_EXP 106
20388: PUSH
20389: LD_INT 0
20391: ST_TO_ADDR
// sExchange := false ;
20392: LD_ADDR_EXP 107
20396: PUSH
20397: LD_INT 0
20399: ST_TO_ADDR
// sFac := false ;
20400: LD_ADDR_EXP 108
20404: PUSH
20405: LD_INT 0
20407: ST_TO_ADDR
// sPower := false ;
20408: LD_ADDR_EXP 109
20412: PUSH
20413: LD_INT 0
20415: ST_TO_ADDR
// sRandom := false ;
20416: LD_ADDR_EXP 110
20420: PUSH
20421: LD_INT 0
20423: ST_TO_ADDR
// sShield := false ;
20424: LD_ADDR_EXP 111
20428: PUSH
20429: LD_INT 0
20431: ST_TO_ADDR
// sTime := false ;
20432: LD_ADDR_EXP 112
20436: PUSH
20437: LD_INT 0
20439: ST_TO_ADDR
// sTools := false ;
20440: LD_ADDR_EXP 113
20444: PUSH
20445: LD_INT 0
20447: ST_TO_ADDR
// sSold := false ;
20448: LD_ADDR_EXP 78
20452: PUSH
20453: LD_INT 0
20455: ST_TO_ADDR
// sDiff := false ;
20456: LD_ADDR_EXP 79
20460: PUSH
20461: LD_INT 0
20463: ST_TO_ADDR
// sFog := false ;
20464: LD_ADDR_EXP 82
20468: PUSH
20469: LD_INT 0
20471: ST_TO_ADDR
// sReset := false ;
20472: LD_ADDR_EXP 83
20476: PUSH
20477: LD_INT 0
20479: ST_TO_ADDR
// sSun := false ;
20480: LD_ADDR_EXP 84
20484: PUSH
20485: LD_INT 0
20487: ST_TO_ADDR
// sTiger := false ;
20488: LD_ADDR_EXP 80
20492: PUSH
20493: LD_INT 0
20495: ST_TO_ADDR
// sBomb := false ;
20496: LD_ADDR_EXP 81
20500: PUSH
20501: LD_INT 0
20503: ST_TO_ADDR
// sWound := false ;
20504: LD_ADDR_EXP 89
20508: PUSH
20509: LD_INT 0
20511: ST_TO_ADDR
// sBetray := false ;
20512: LD_ADDR_EXP 93
20516: PUSH
20517: LD_INT 0
20519: ST_TO_ADDR
// sContamin := false ;
20520: LD_ADDR_EXP 94
20524: PUSH
20525: LD_INT 0
20527: ST_TO_ADDR
// sOil := false ;
20528: LD_ADDR_EXP 96
20532: PUSH
20533: LD_INT 0
20535: ST_TO_ADDR
// sStu := false ;
20536: LD_ADDR_EXP 100
20540: PUSH
20541: LD_INT 0
20543: ST_TO_ADDR
// sBazooka := false ;
20544: LD_ADDR_EXP 103
20548: PUSH
20549: LD_INT 0
20551: ST_TO_ADDR
// sMortar := false ;
20552: LD_ADDR_EXP 104
20556: PUSH
20557: LD_INT 0
20559: ST_TO_ADDR
// sRanger := false ;
20560: LD_ADDR_EXP 114
20564: PUSH
20565: LD_INT 0
20567: ST_TO_ADDR
// sComputer := false ;
20568: LD_ADDR_EXP 115
20572: PUSH
20573: LD_INT 0
20575: ST_TO_ADDR
// s30 := false ;
20576: LD_ADDR_EXP 116
20580: PUSH
20581: LD_INT 0
20583: ST_TO_ADDR
// s60 := false ;
20584: LD_ADDR_EXP 117
20588: PUSH
20589: LD_INT 0
20591: ST_TO_ADDR
// end ;
20592: LD_VAR 0 1
20596: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20597: LD_INT 0
20599: PPUSH
20600: PPUSH
20601: PPUSH
20602: PPUSH
20603: PPUSH
20604: PPUSH
20605: PPUSH
// result := [ ] ;
20606: LD_ADDR_VAR 0 2
20610: PUSH
20611: EMPTY
20612: ST_TO_ADDR
// if campaign_id = 1 then
20613: LD_OWVAR 69
20617: PUSH
20618: LD_INT 1
20620: EQUAL
20621: IFFALSE 23787
// begin case mission_number of 1 :
20623: LD_OWVAR 70
20627: PUSH
20628: LD_INT 1
20630: DOUBLE
20631: EQUAL
20632: IFTRUE 20636
20634: GO 20712
20636: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20637: LD_ADDR_VAR 0 2
20641: PUSH
20642: LD_INT 2
20644: PUSH
20645: LD_INT 4
20647: PUSH
20648: LD_INT 11
20650: PUSH
20651: LD_INT 12
20653: PUSH
20654: LD_INT 15
20656: PUSH
20657: LD_INT 16
20659: PUSH
20660: LD_INT 22
20662: PUSH
20663: LD_INT 23
20665: PUSH
20666: LD_INT 26
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 101
20682: PUSH
20683: LD_INT 102
20685: PUSH
20686: LD_INT 106
20688: PUSH
20689: LD_INT 116
20691: PUSH
20692: LD_INT 117
20694: PUSH
20695: LD_INT 118
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: ST_TO_ADDR
20710: GO 23785
20712: LD_INT 2
20714: DOUBLE
20715: EQUAL
20716: IFTRUE 20720
20718: GO 20804
20720: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20721: LD_ADDR_VAR 0 2
20725: PUSH
20726: LD_INT 2
20728: PUSH
20729: LD_INT 4
20731: PUSH
20732: LD_INT 11
20734: PUSH
20735: LD_INT 12
20737: PUSH
20738: LD_INT 15
20740: PUSH
20741: LD_INT 16
20743: PUSH
20744: LD_INT 22
20746: PUSH
20747: LD_INT 23
20749: PUSH
20750: LD_INT 26
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 101
20766: PUSH
20767: LD_INT 102
20769: PUSH
20770: LD_INT 105
20772: PUSH
20773: LD_INT 106
20775: PUSH
20776: LD_INT 108
20778: PUSH
20779: LD_INT 116
20781: PUSH
20782: LD_INT 117
20784: PUSH
20785: LD_INT 118
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: ST_TO_ADDR
20802: GO 23785
20804: LD_INT 3
20806: DOUBLE
20807: EQUAL
20808: IFTRUE 20812
20810: GO 20900
20812: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20813: LD_ADDR_VAR 0 2
20817: PUSH
20818: LD_INT 2
20820: PUSH
20821: LD_INT 4
20823: PUSH
20824: LD_INT 5
20826: PUSH
20827: LD_INT 11
20829: PUSH
20830: LD_INT 12
20832: PUSH
20833: LD_INT 15
20835: PUSH
20836: LD_INT 16
20838: PUSH
20839: LD_INT 22
20841: PUSH
20842: LD_INT 26
20844: PUSH
20845: LD_INT 36
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 101
20862: PUSH
20863: LD_INT 102
20865: PUSH
20866: LD_INT 105
20868: PUSH
20869: LD_INT 106
20871: PUSH
20872: LD_INT 108
20874: PUSH
20875: LD_INT 116
20877: PUSH
20878: LD_INT 117
20880: PUSH
20881: LD_INT 118
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: ST_TO_ADDR
20898: GO 23785
20900: LD_INT 4
20902: DOUBLE
20903: EQUAL
20904: IFTRUE 20908
20906: GO 21004
20908: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20909: LD_ADDR_VAR 0 2
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: LD_INT 4
20919: PUSH
20920: LD_INT 5
20922: PUSH
20923: LD_INT 8
20925: PUSH
20926: LD_INT 11
20928: PUSH
20929: LD_INT 12
20931: PUSH
20932: LD_INT 15
20934: PUSH
20935: LD_INT 16
20937: PUSH
20938: LD_INT 22
20940: PUSH
20941: LD_INT 23
20943: PUSH
20944: LD_INT 26
20946: PUSH
20947: LD_INT 36
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 101
20966: PUSH
20967: LD_INT 102
20969: PUSH
20970: LD_INT 105
20972: PUSH
20973: LD_INT 106
20975: PUSH
20976: LD_INT 108
20978: PUSH
20979: LD_INT 116
20981: PUSH
20982: LD_INT 117
20984: PUSH
20985: LD_INT 118
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: ST_TO_ADDR
21002: GO 23785
21004: LD_INT 5
21006: DOUBLE
21007: EQUAL
21008: IFTRUE 21012
21010: GO 21124
21012: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21013: LD_ADDR_VAR 0 2
21017: PUSH
21018: LD_INT 2
21020: PUSH
21021: LD_INT 4
21023: PUSH
21024: LD_INT 5
21026: PUSH
21027: LD_INT 6
21029: PUSH
21030: LD_INT 8
21032: PUSH
21033: LD_INT 11
21035: PUSH
21036: LD_INT 12
21038: PUSH
21039: LD_INT 15
21041: PUSH
21042: LD_INT 16
21044: PUSH
21045: LD_INT 22
21047: PUSH
21048: LD_INT 23
21050: PUSH
21051: LD_INT 25
21053: PUSH
21054: LD_INT 26
21056: PUSH
21057: LD_INT 36
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 101
21078: PUSH
21079: LD_INT 102
21081: PUSH
21082: LD_INT 105
21084: PUSH
21085: LD_INT 106
21087: PUSH
21088: LD_INT 108
21090: PUSH
21091: LD_INT 109
21093: PUSH
21094: LD_INT 112
21096: PUSH
21097: LD_INT 116
21099: PUSH
21100: LD_INT 117
21102: PUSH
21103: LD_INT 118
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: ST_TO_ADDR
21122: GO 23785
21124: LD_INT 6
21126: DOUBLE
21127: EQUAL
21128: IFTRUE 21132
21130: GO 21264
21132: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21133: LD_ADDR_VAR 0 2
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: LD_INT 4
21143: PUSH
21144: LD_INT 5
21146: PUSH
21147: LD_INT 6
21149: PUSH
21150: LD_INT 8
21152: PUSH
21153: LD_INT 11
21155: PUSH
21156: LD_INT 12
21158: PUSH
21159: LD_INT 15
21161: PUSH
21162: LD_INT 16
21164: PUSH
21165: LD_INT 20
21167: PUSH
21168: LD_INT 21
21170: PUSH
21171: LD_INT 22
21173: PUSH
21174: LD_INT 23
21176: PUSH
21177: LD_INT 25
21179: PUSH
21180: LD_INT 26
21182: PUSH
21183: LD_INT 30
21185: PUSH
21186: LD_INT 31
21188: PUSH
21189: LD_INT 32
21191: PUSH
21192: LD_INT 36
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 101
21218: PUSH
21219: LD_INT 102
21221: PUSH
21222: LD_INT 105
21224: PUSH
21225: LD_INT 106
21227: PUSH
21228: LD_INT 108
21230: PUSH
21231: LD_INT 109
21233: PUSH
21234: LD_INT 112
21236: PUSH
21237: LD_INT 116
21239: PUSH
21240: LD_INT 117
21242: PUSH
21243: LD_INT 118
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: ST_TO_ADDR
21262: GO 23785
21264: LD_INT 7
21266: DOUBLE
21267: EQUAL
21268: IFTRUE 21272
21270: GO 21384
21272: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21273: LD_ADDR_VAR 0 2
21277: PUSH
21278: LD_INT 2
21280: PUSH
21281: LD_INT 4
21283: PUSH
21284: LD_INT 5
21286: PUSH
21287: LD_INT 7
21289: PUSH
21290: LD_INT 11
21292: PUSH
21293: LD_INT 12
21295: PUSH
21296: LD_INT 15
21298: PUSH
21299: LD_INT 16
21301: PUSH
21302: LD_INT 20
21304: PUSH
21305: LD_INT 21
21307: PUSH
21308: LD_INT 22
21310: PUSH
21311: LD_INT 23
21313: PUSH
21314: LD_INT 25
21316: PUSH
21317: LD_INT 26
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 101
21338: PUSH
21339: LD_INT 102
21341: PUSH
21342: LD_INT 103
21344: PUSH
21345: LD_INT 105
21347: PUSH
21348: LD_INT 106
21350: PUSH
21351: LD_INT 108
21353: PUSH
21354: LD_INT 112
21356: PUSH
21357: LD_INT 116
21359: PUSH
21360: LD_INT 117
21362: PUSH
21363: LD_INT 118
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: ST_TO_ADDR
21382: GO 23785
21384: LD_INT 8
21386: DOUBLE
21387: EQUAL
21388: IFTRUE 21392
21390: GO 21532
21392: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21393: LD_ADDR_VAR 0 2
21397: PUSH
21398: LD_INT 2
21400: PUSH
21401: LD_INT 4
21403: PUSH
21404: LD_INT 5
21406: PUSH
21407: LD_INT 6
21409: PUSH
21410: LD_INT 7
21412: PUSH
21413: LD_INT 8
21415: PUSH
21416: LD_INT 11
21418: PUSH
21419: LD_INT 12
21421: PUSH
21422: LD_INT 15
21424: PUSH
21425: LD_INT 16
21427: PUSH
21428: LD_INT 20
21430: PUSH
21431: LD_INT 21
21433: PUSH
21434: LD_INT 22
21436: PUSH
21437: LD_INT 23
21439: PUSH
21440: LD_INT 25
21442: PUSH
21443: LD_INT 26
21445: PUSH
21446: LD_INT 30
21448: PUSH
21449: LD_INT 31
21451: PUSH
21452: LD_INT 32
21454: PUSH
21455: LD_INT 36
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 101
21482: PUSH
21483: LD_INT 102
21485: PUSH
21486: LD_INT 103
21488: PUSH
21489: LD_INT 105
21491: PUSH
21492: LD_INT 106
21494: PUSH
21495: LD_INT 108
21497: PUSH
21498: LD_INT 109
21500: PUSH
21501: LD_INT 112
21503: PUSH
21504: LD_INT 116
21506: PUSH
21507: LD_INT 117
21509: PUSH
21510: LD_INT 118
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: ST_TO_ADDR
21530: GO 23785
21532: LD_INT 9
21534: DOUBLE
21535: EQUAL
21536: IFTRUE 21540
21538: GO 21688
21540: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21541: LD_ADDR_VAR 0 2
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: LD_INT 4
21551: PUSH
21552: LD_INT 5
21554: PUSH
21555: LD_INT 6
21557: PUSH
21558: LD_INT 7
21560: PUSH
21561: LD_INT 8
21563: PUSH
21564: LD_INT 11
21566: PUSH
21567: LD_INT 12
21569: PUSH
21570: LD_INT 15
21572: PUSH
21573: LD_INT 16
21575: PUSH
21576: LD_INT 20
21578: PUSH
21579: LD_INT 21
21581: PUSH
21582: LD_INT 22
21584: PUSH
21585: LD_INT 23
21587: PUSH
21588: LD_INT 25
21590: PUSH
21591: LD_INT 26
21593: PUSH
21594: LD_INT 28
21596: PUSH
21597: LD_INT 30
21599: PUSH
21600: LD_INT 31
21602: PUSH
21603: LD_INT 32
21605: PUSH
21606: LD_INT 36
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 101
21634: PUSH
21635: LD_INT 102
21637: PUSH
21638: LD_INT 103
21640: PUSH
21641: LD_INT 105
21643: PUSH
21644: LD_INT 106
21646: PUSH
21647: LD_INT 108
21649: PUSH
21650: LD_INT 109
21652: PUSH
21653: LD_INT 112
21655: PUSH
21656: LD_INT 114
21658: PUSH
21659: LD_INT 116
21661: PUSH
21662: LD_INT 117
21664: PUSH
21665: LD_INT 118
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: ST_TO_ADDR
21686: GO 23785
21688: LD_INT 10
21690: DOUBLE
21691: EQUAL
21692: IFTRUE 21696
21694: GO 21892
21696: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21697: LD_ADDR_VAR 0 2
21701: PUSH
21702: LD_INT 2
21704: PUSH
21705: LD_INT 4
21707: PUSH
21708: LD_INT 5
21710: PUSH
21711: LD_INT 6
21713: PUSH
21714: LD_INT 7
21716: PUSH
21717: LD_INT 8
21719: PUSH
21720: LD_INT 9
21722: PUSH
21723: LD_INT 10
21725: PUSH
21726: LD_INT 11
21728: PUSH
21729: LD_INT 12
21731: PUSH
21732: LD_INT 13
21734: PUSH
21735: LD_INT 14
21737: PUSH
21738: LD_INT 15
21740: PUSH
21741: LD_INT 16
21743: PUSH
21744: LD_INT 17
21746: PUSH
21747: LD_INT 18
21749: PUSH
21750: LD_INT 19
21752: PUSH
21753: LD_INT 20
21755: PUSH
21756: LD_INT 21
21758: PUSH
21759: LD_INT 22
21761: PUSH
21762: LD_INT 23
21764: PUSH
21765: LD_INT 24
21767: PUSH
21768: LD_INT 25
21770: PUSH
21771: LD_INT 26
21773: PUSH
21774: LD_INT 28
21776: PUSH
21777: LD_INT 30
21779: PUSH
21780: LD_INT 31
21782: PUSH
21783: LD_INT 32
21785: PUSH
21786: LD_INT 36
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 101
21822: PUSH
21823: LD_INT 102
21825: PUSH
21826: LD_INT 103
21828: PUSH
21829: LD_INT 104
21831: PUSH
21832: LD_INT 105
21834: PUSH
21835: LD_INT 106
21837: PUSH
21838: LD_INT 107
21840: PUSH
21841: LD_INT 108
21843: PUSH
21844: LD_INT 109
21846: PUSH
21847: LD_INT 110
21849: PUSH
21850: LD_INT 111
21852: PUSH
21853: LD_INT 112
21855: PUSH
21856: LD_INT 114
21858: PUSH
21859: LD_INT 116
21861: PUSH
21862: LD_INT 117
21864: PUSH
21865: LD_INT 118
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: ST_TO_ADDR
21890: GO 23785
21892: LD_INT 11
21894: DOUBLE
21895: EQUAL
21896: IFTRUE 21900
21898: GO 22104
21900: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21901: LD_ADDR_VAR 0 2
21905: PUSH
21906: LD_INT 2
21908: PUSH
21909: LD_INT 3
21911: PUSH
21912: LD_INT 4
21914: PUSH
21915: LD_INT 5
21917: PUSH
21918: LD_INT 6
21920: PUSH
21921: LD_INT 7
21923: PUSH
21924: LD_INT 8
21926: PUSH
21927: LD_INT 9
21929: PUSH
21930: LD_INT 10
21932: PUSH
21933: LD_INT 11
21935: PUSH
21936: LD_INT 12
21938: PUSH
21939: LD_INT 13
21941: PUSH
21942: LD_INT 14
21944: PUSH
21945: LD_INT 15
21947: PUSH
21948: LD_INT 16
21950: PUSH
21951: LD_INT 17
21953: PUSH
21954: LD_INT 18
21956: PUSH
21957: LD_INT 19
21959: PUSH
21960: LD_INT 20
21962: PUSH
21963: LD_INT 21
21965: PUSH
21966: LD_INT 22
21968: PUSH
21969: LD_INT 23
21971: PUSH
21972: LD_INT 24
21974: PUSH
21975: LD_INT 25
21977: PUSH
21978: LD_INT 26
21980: PUSH
21981: LD_INT 28
21983: PUSH
21984: LD_INT 30
21986: PUSH
21987: LD_INT 31
21989: PUSH
21990: LD_INT 32
21992: PUSH
21993: LD_INT 34
21995: PUSH
21996: LD_INT 36
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 101
22034: PUSH
22035: LD_INT 102
22037: PUSH
22038: LD_INT 103
22040: PUSH
22041: LD_INT 104
22043: PUSH
22044: LD_INT 105
22046: PUSH
22047: LD_INT 106
22049: PUSH
22050: LD_INT 107
22052: PUSH
22053: LD_INT 108
22055: PUSH
22056: LD_INT 109
22058: PUSH
22059: LD_INT 110
22061: PUSH
22062: LD_INT 111
22064: PUSH
22065: LD_INT 112
22067: PUSH
22068: LD_INT 114
22070: PUSH
22071: LD_INT 116
22073: PUSH
22074: LD_INT 117
22076: PUSH
22077: LD_INT 118
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: ST_TO_ADDR
22102: GO 23785
22104: LD_INT 12
22106: DOUBLE
22107: EQUAL
22108: IFTRUE 22112
22110: GO 22332
22112: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22113: LD_ADDR_VAR 0 2
22117: PUSH
22118: LD_INT 1
22120: PUSH
22121: LD_INT 2
22123: PUSH
22124: LD_INT 3
22126: PUSH
22127: LD_INT 4
22129: PUSH
22130: LD_INT 5
22132: PUSH
22133: LD_INT 6
22135: PUSH
22136: LD_INT 7
22138: PUSH
22139: LD_INT 8
22141: PUSH
22142: LD_INT 9
22144: PUSH
22145: LD_INT 10
22147: PUSH
22148: LD_INT 11
22150: PUSH
22151: LD_INT 12
22153: PUSH
22154: LD_INT 13
22156: PUSH
22157: LD_INT 14
22159: PUSH
22160: LD_INT 15
22162: PUSH
22163: LD_INT 16
22165: PUSH
22166: LD_INT 17
22168: PUSH
22169: LD_INT 18
22171: PUSH
22172: LD_INT 19
22174: PUSH
22175: LD_INT 20
22177: PUSH
22178: LD_INT 21
22180: PUSH
22181: LD_INT 22
22183: PUSH
22184: LD_INT 23
22186: PUSH
22187: LD_INT 24
22189: PUSH
22190: LD_INT 25
22192: PUSH
22193: LD_INT 26
22195: PUSH
22196: LD_INT 27
22198: PUSH
22199: LD_INT 28
22201: PUSH
22202: LD_INT 30
22204: PUSH
22205: LD_INT 31
22207: PUSH
22208: LD_INT 32
22210: PUSH
22211: LD_INT 33
22213: PUSH
22214: LD_INT 34
22216: PUSH
22217: LD_INT 36
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 101
22258: PUSH
22259: LD_INT 102
22261: PUSH
22262: LD_INT 103
22264: PUSH
22265: LD_INT 104
22267: PUSH
22268: LD_INT 105
22270: PUSH
22271: LD_INT 106
22273: PUSH
22274: LD_INT 107
22276: PUSH
22277: LD_INT 108
22279: PUSH
22280: LD_INT 109
22282: PUSH
22283: LD_INT 110
22285: PUSH
22286: LD_INT 111
22288: PUSH
22289: LD_INT 112
22291: PUSH
22292: LD_INT 113
22294: PUSH
22295: LD_INT 114
22297: PUSH
22298: LD_INT 116
22300: PUSH
22301: LD_INT 117
22303: PUSH
22304: LD_INT 118
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: ST_TO_ADDR
22330: GO 23785
22332: LD_INT 13
22334: DOUBLE
22335: EQUAL
22336: IFTRUE 22340
22338: GO 22548
22340: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22341: LD_ADDR_VAR 0 2
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: LD_INT 3
22354: PUSH
22355: LD_INT 4
22357: PUSH
22358: LD_INT 5
22360: PUSH
22361: LD_INT 8
22363: PUSH
22364: LD_INT 9
22366: PUSH
22367: LD_INT 10
22369: PUSH
22370: LD_INT 11
22372: PUSH
22373: LD_INT 12
22375: PUSH
22376: LD_INT 14
22378: PUSH
22379: LD_INT 15
22381: PUSH
22382: LD_INT 16
22384: PUSH
22385: LD_INT 17
22387: PUSH
22388: LD_INT 18
22390: PUSH
22391: LD_INT 19
22393: PUSH
22394: LD_INT 20
22396: PUSH
22397: LD_INT 21
22399: PUSH
22400: LD_INT 22
22402: PUSH
22403: LD_INT 23
22405: PUSH
22406: LD_INT 24
22408: PUSH
22409: LD_INT 25
22411: PUSH
22412: LD_INT 26
22414: PUSH
22415: LD_INT 27
22417: PUSH
22418: LD_INT 28
22420: PUSH
22421: LD_INT 30
22423: PUSH
22424: LD_INT 31
22426: PUSH
22427: LD_INT 32
22429: PUSH
22430: LD_INT 33
22432: PUSH
22433: LD_INT 34
22435: PUSH
22436: LD_INT 36
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 101
22474: PUSH
22475: LD_INT 102
22477: PUSH
22478: LD_INT 103
22480: PUSH
22481: LD_INT 104
22483: PUSH
22484: LD_INT 105
22486: PUSH
22487: LD_INT 106
22489: PUSH
22490: LD_INT 107
22492: PUSH
22493: LD_INT 108
22495: PUSH
22496: LD_INT 109
22498: PUSH
22499: LD_INT 110
22501: PUSH
22502: LD_INT 111
22504: PUSH
22505: LD_INT 112
22507: PUSH
22508: LD_INT 113
22510: PUSH
22511: LD_INT 114
22513: PUSH
22514: LD_INT 116
22516: PUSH
22517: LD_INT 117
22519: PUSH
22520: LD_INT 118
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: ST_TO_ADDR
22546: GO 23785
22548: LD_INT 14
22550: DOUBLE
22551: EQUAL
22552: IFTRUE 22556
22554: GO 22780
22556: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22557: LD_ADDR_VAR 0 2
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: LD_INT 2
22567: PUSH
22568: LD_INT 3
22570: PUSH
22571: LD_INT 4
22573: PUSH
22574: LD_INT 5
22576: PUSH
22577: LD_INT 6
22579: PUSH
22580: LD_INT 7
22582: PUSH
22583: LD_INT 8
22585: PUSH
22586: LD_INT 9
22588: PUSH
22589: LD_INT 10
22591: PUSH
22592: LD_INT 11
22594: PUSH
22595: LD_INT 12
22597: PUSH
22598: LD_INT 13
22600: PUSH
22601: LD_INT 14
22603: PUSH
22604: LD_INT 15
22606: PUSH
22607: LD_INT 16
22609: PUSH
22610: LD_INT 17
22612: PUSH
22613: LD_INT 18
22615: PUSH
22616: LD_INT 19
22618: PUSH
22619: LD_INT 20
22621: PUSH
22622: LD_INT 21
22624: PUSH
22625: LD_INT 22
22627: PUSH
22628: LD_INT 23
22630: PUSH
22631: LD_INT 24
22633: PUSH
22634: LD_INT 25
22636: PUSH
22637: LD_INT 26
22639: PUSH
22640: LD_INT 27
22642: PUSH
22643: LD_INT 28
22645: PUSH
22646: LD_INT 29
22648: PUSH
22649: LD_INT 30
22651: PUSH
22652: LD_INT 31
22654: PUSH
22655: LD_INT 32
22657: PUSH
22658: LD_INT 33
22660: PUSH
22661: LD_INT 34
22663: PUSH
22664: LD_INT 36
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 101
22706: PUSH
22707: LD_INT 102
22709: PUSH
22710: LD_INT 103
22712: PUSH
22713: LD_INT 104
22715: PUSH
22716: LD_INT 105
22718: PUSH
22719: LD_INT 106
22721: PUSH
22722: LD_INT 107
22724: PUSH
22725: LD_INT 108
22727: PUSH
22728: LD_INT 109
22730: PUSH
22731: LD_INT 110
22733: PUSH
22734: LD_INT 111
22736: PUSH
22737: LD_INT 112
22739: PUSH
22740: LD_INT 113
22742: PUSH
22743: LD_INT 114
22745: PUSH
22746: LD_INT 116
22748: PUSH
22749: LD_INT 117
22751: PUSH
22752: LD_INT 118
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: ST_TO_ADDR
22778: GO 23785
22780: LD_INT 15
22782: DOUBLE
22783: EQUAL
22784: IFTRUE 22788
22786: GO 23012
22788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22789: LD_ADDR_VAR 0 2
22793: PUSH
22794: LD_INT 1
22796: PUSH
22797: LD_INT 2
22799: PUSH
22800: LD_INT 3
22802: PUSH
22803: LD_INT 4
22805: PUSH
22806: LD_INT 5
22808: PUSH
22809: LD_INT 6
22811: PUSH
22812: LD_INT 7
22814: PUSH
22815: LD_INT 8
22817: PUSH
22818: LD_INT 9
22820: PUSH
22821: LD_INT 10
22823: PUSH
22824: LD_INT 11
22826: PUSH
22827: LD_INT 12
22829: PUSH
22830: LD_INT 13
22832: PUSH
22833: LD_INT 14
22835: PUSH
22836: LD_INT 15
22838: PUSH
22839: LD_INT 16
22841: PUSH
22842: LD_INT 17
22844: PUSH
22845: LD_INT 18
22847: PUSH
22848: LD_INT 19
22850: PUSH
22851: LD_INT 20
22853: PUSH
22854: LD_INT 21
22856: PUSH
22857: LD_INT 22
22859: PUSH
22860: LD_INT 23
22862: PUSH
22863: LD_INT 24
22865: PUSH
22866: LD_INT 25
22868: PUSH
22869: LD_INT 26
22871: PUSH
22872: LD_INT 27
22874: PUSH
22875: LD_INT 28
22877: PUSH
22878: LD_INT 29
22880: PUSH
22881: LD_INT 30
22883: PUSH
22884: LD_INT 31
22886: PUSH
22887: LD_INT 32
22889: PUSH
22890: LD_INT 33
22892: PUSH
22893: LD_INT 34
22895: PUSH
22896: LD_INT 36
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 101
22938: PUSH
22939: LD_INT 102
22941: PUSH
22942: LD_INT 103
22944: PUSH
22945: LD_INT 104
22947: PUSH
22948: LD_INT 105
22950: PUSH
22951: LD_INT 106
22953: PUSH
22954: LD_INT 107
22956: PUSH
22957: LD_INT 108
22959: PUSH
22960: LD_INT 109
22962: PUSH
22963: LD_INT 110
22965: PUSH
22966: LD_INT 111
22968: PUSH
22969: LD_INT 112
22971: PUSH
22972: LD_INT 113
22974: PUSH
22975: LD_INT 114
22977: PUSH
22978: LD_INT 116
22980: PUSH
22981: LD_INT 117
22983: PUSH
22984: LD_INT 118
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: ST_TO_ADDR
23010: GO 23785
23012: LD_INT 16
23014: DOUBLE
23015: EQUAL
23016: IFTRUE 23020
23018: GO 23156
23020: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23021: LD_ADDR_VAR 0 2
23025: PUSH
23026: LD_INT 2
23028: PUSH
23029: LD_INT 4
23031: PUSH
23032: LD_INT 5
23034: PUSH
23035: LD_INT 7
23037: PUSH
23038: LD_INT 11
23040: PUSH
23041: LD_INT 12
23043: PUSH
23044: LD_INT 15
23046: PUSH
23047: LD_INT 16
23049: PUSH
23050: LD_INT 20
23052: PUSH
23053: LD_INT 21
23055: PUSH
23056: LD_INT 22
23058: PUSH
23059: LD_INT 23
23061: PUSH
23062: LD_INT 25
23064: PUSH
23065: LD_INT 26
23067: PUSH
23068: LD_INT 30
23070: PUSH
23071: LD_INT 31
23073: PUSH
23074: LD_INT 32
23076: PUSH
23077: LD_INT 33
23079: PUSH
23080: LD_INT 34
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 101
23106: PUSH
23107: LD_INT 102
23109: PUSH
23110: LD_INT 103
23112: PUSH
23113: LD_INT 106
23115: PUSH
23116: LD_INT 108
23118: PUSH
23119: LD_INT 112
23121: PUSH
23122: LD_INT 113
23124: PUSH
23125: LD_INT 114
23127: PUSH
23128: LD_INT 116
23130: PUSH
23131: LD_INT 117
23133: PUSH
23134: LD_INT 118
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: ST_TO_ADDR
23154: GO 23785
23156: LD_INT 17
23158: DOUBLE
23159: EQUAL
23160: IFTRUE 23164
23162: GO 23388
23164: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23165: LD_ADDR_VAR 0 2
23169: PUSH
23170: LD_INT 1
23172: PUSH
23173: LD_INT 2
23175: PUSH
23176: LD_INT 3
23178: PUSH
23179: LD_INT 4
23181: PUSH
23182: LD_INT 5
23184: PUSH
23185: LD_INT 6
23187: PUSH
23188: LD_INT 7
23190: PUSH
23191: LD_INT 8
23193: PUSH
23194: LD_INT 9
23196: PUSH
23197: LD_INT 10
23199: PUSH
23200: LD_INT 11
23202: PUSH
23203: LD_INT 12
23205: PUSH
23206: LD_INT 13
23208: PUSH
23209: LD_INT 14
23211: PUSH
23212: LD_INT 15
23214: PUSH
23215: LD_INT 16
23217: PUSH
23218: LD_INT 17
23220: PUSH
23221: LD_INT 18
23223: PUSH
23224: LD_INT 19
23226: PUSH
23227: LD_INT 20
23229: PUSH
23230: LD_INT 21
23232: PUSH
23233: LD_INT 22
23235: PUSH
23236: LD_INT 23
23238: PUSH
23239: LD_INT 24
23241: PUSH
23242: LD_INT 25
23244: PUSH
23245: LD_INT 26
23247: PUSH
23248: LD_INT 27
23250: PUSH
23251: LD_INT 28
23253: PUSH
23254: LD_INT 29
23256: PUSH
23257: LD_INT 30
23259: PUSH
23260: LD_INT 31
23262: PUSH
23263: LD_INT 32
23265: PUSH
23266: LD_INT 33
23268: PUSH
23269: LD_INT 34
23271: PUSH
23272: LD_INT 36
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 101
23314: PUSH
23315: LD_INT 102
23317: PUSH
23318: LD_INT 103
23320: PUSH
23321: LD_INT 104
23323: PUSH
23324: LD_INT 105
23326: PUSH
23327: LD_INT 106
23329: PUSH
23330: LD_INT 107
23332: PUSH
23333: LD_INT 108
23335: PUSH
23336: LD_INT 109
23338: PUSH
23339: LD_INT 110
23341: PUSH
23342: LD_INT 111
23344: PUSH
23345: LD_INT 112
23347: PUSH
23348: LD_INT 113
23350: PUSH
23351: LD_INT 114
23353: PUSH
23354: LD_INT 116
23356: PUSH
23357: LD_INT 117
23359: PUSH
23360: LD_INT 118
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: ST_TO_ADDR
23386: GO 23785
23388: LD_INT 18
23390: DOUBLE
23391: EQUAL
23392: IFTRUE 23396
23394: GO 23544
23396: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23397: LD_ADDR_VAR 0 2
23401: PUSH
23402: LD_INT 2
23404: PUSH
23405: LD_INT 4
23407: PUSH
23408: LD_INT 5
23410: PUSH
23411: LD_INT 7
23413: PUSH
23414: LD_INT 11
23416: PUSH
23417: LD_INT 12
23419: PUSH
23420: LD_INT 15
23422: PUSH
23423: LD_INT 16
23425: PUSH
23426: LD_INT 20
23428: PUSH
23429: LD_INT 21
23431: PUSH
23432: LD_INT 22
23434: PUSH
23435: LD_INT 23
23437: PUSH
23438: LD_INT 25
23440: PUSH
23441: LD_INT 26
23443: PUSH
23444: LD_INT 30
23446: PUSH
23447: LD_INT 31
23449: PUSH
23450: LD_INT 32
23452: PUSH
23453: LD_INT 33
23455: PUSH
23456: LD_INT 34
23458: PUSH
23459: LD_INT 35
23461: PUSH
23462: LD_INT 36
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 101
23490: PUSH
23491: LD_INT 102
23493: PUSH
23494: LD_INT 103
23496: PUSH
23497: LD_INT 106
23499: PUSH
23500: LD_INT 108
23502: PUSH
23503: LD_INT 112
23505: PUSH
23506: LD_INT 113
23508: PUSH
23509: LD_INT 114
23511: PUSH
23512: LD_INT 115
23514: PUSH
23515: LD_INT 116
23517: PUSH
23518: LD_INT 117
23520: PUSH
23521: LD_INT 118
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: ST_TO_ADDR
23542: GO 23785
23544: LD_INT 19
23546: DOUBLE
23547: EQUAL
23548: IFTRUE 23552
23550: GO 23784
23552: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23553: LD_ADDR_VAR 0 2
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: LD_INT 3
23566: PUSH
23567: LD_INT 4
23569: PUSH
23570: LD_INT 5
23572: PUSH
23573: LD_INT 6
23575: PUSH
23576: LD_INT 7
23578: PUSH
23579: LD_INT 8
23581: PUSH
23582: LD_INT 9
23584: PUSH
23585: LD_INT 10
23587: PUSH
23588: LD_INT 11
23590: PUSH
23591: LD_INT 12
23593: PUSH
23594: LD_INT 13
23596: PUSH
23597: LD_INT 14
23599: PUSH
23600: LD_INT 15
23602: PUSH
23603: LD_INT 16
23605: PUSH
23606: LD_INT 17
23608: PUSH
23609: LD_INT 18
23611: PUSH
23612: LD_INT 19
23614: PUSH
23615: LD_INT 20
23617: PUSH
23618: LD_INT 21
23620: PUSH
23621: LD_INT 22
23623: PUSH
23624: LD_INT 23
23626: PUSH
23627: LD_INT 24
23629: PUSH
23630: LD_INT 25
23632: PUSH
23633: LD_INT 26
23635: PUSH
23636: LD_INT 27
23638: PUSH
23639: LD_INT 28
23641: PUSH
23642: LD_INT 29
23644: PUSH
23645: LD_INT 30
23647: PUSH
23648: LD_INT 31
23650: PUSH
23651: LD_INT 32
23653: PUSH
23654: LD_INT 33
23656: PUSH
23657: LD_INT 34
23659: PUSH
23660: LD_INT 35
23662: PUSH
23663: LD_INT 36
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 101
23706: PUSH
23707: LD_INT 102
23709: PUSH
23710: LD_INT 103
23712: PUSH
23713: LD_INT 104
23715: PUSH
23716: LD_INT 105
23718: PUSH
23719: LD_INT 106
23721: PUSH
23722: LD_INT 107
23724: PUSH
23725: LD_INT 108
23727: PUSH
23728: LD_INT 109
23730: PUSH
23731: LD_INT 110
23733: PUSH
23734: LD_INT 111
23736: PUSH
23737: LD_INT 112
23739: PUSH
23740: LD_INT 113
23742: PUSH
23743: LD_INT 114
23745: PUSH
23746: LD_INT 115
23748: PUSH
23749: LD_INT 116
23751: PUSH
23752: LD_INT 117
23754: PUSH
23755: LD_INT 118
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: ST_TO_ADDR
23782: GO 23785
23784: POP
// end else
23785: GO 24016
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23787: LD_ADDR_VAR 0 2
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: LD_INT 2
23797: PUSH
23798: LD_INT 3
23800: PUSH
23801: LD_INT 4
23803: PUSH
23804: LD_INT 5
23806: PUSH
23807: LD_INT 6
23809: PUSH
23810: LD_INT 7
23812: PUSH
23813: LD_INT 8
23815: PUSH
23816: LD_INT 9
23818: PUSH
23819: LD_INT 10
23821: PUSH
23822: LD_INT 11
23824: PUSH
23825: LD_INT 12
23827: PUSH
23828: LD_INT 13
23830: PUSH
23831: LD_INT 14
23833: PUSH
23834: LD_INT 15
23836: PUSH
23837: LD_INT 16
23839: PUSH
23840: LD_INT 17
23842: PUSH
23843: LD_INT 18
23845: PUSH
23846: LD_INT 19
23848: PUSH
23849: LD_INT 20
23851: PUSH
23852: LD_INT 21
23854: PUSH
23855: LD_INT 22
23857: PUSH
23858: LD_INT 23
23860: PUSH
23861: LD_INT 24
23863: PUSH
23864: LD_INT 25
23866: PUSH
23867: LD_INT 26
23869: PUSH
23870: LD_INT 27
23872: PUSH
23873: LD_INT 28
23875: PUSH
23876: LD_INT 29
23878: PUSH
23879: LD_INT 30
23881: PUSH
23882: LD_INT 31
23884: PUSH
23885: LD_INT 32
23887: PUSH
23888: LD_INT 33
23890: PUSH
23891: LD_INT 34
23893: PUSH
23894: LD_INT 35
23896: PUSH
23897: LD_INT 36
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 101
23940: PUSH
23941: LD_INT 102
23943: PUSH
23944: LD_INT 103
23946: PUSH
23947: LD_INT 104
23949: PUSH
23950: LD_INT 105
23952: PUSH
23953: LD_INT 106
23955: PUSH
23956: LD_INT 107
23958: PUSH
23959: LD_INT 108
23961: PUSH
23962: LD_INT 109
23964: PUSH
23965: LD_INT 110
23967: PUSH
23968: LD_INT 111
23970: PUSH
23971: LD_INT 112
23973: PUSH
23974: LD_INT 113
23976: PUSH
23977: LD_INT 114
23979: PUSH
23980: LD_INT 115
23982: PUSH
23983: LD_INT 116
23985: PUSH
23986: LD_INT 117
23988: PUSH
23989: LD_INT 118
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: ST_TO_ADDR
// if result then
24016: LD_VAR 0 2
24020: IFFALSE 24806
// begin normal :=  ;
24022: LD_ADDR_VAR 0 5
24026: PUSH
24027: LD_STRING 
24029: ST_TO_ADDR
// hardcore :=  ;
24030: LD_ADDR_VAR 0 6
24034: PUSH
24035: LD_STRING 
24037: ST_TO_ADDR
// active :=  ;
24038: LD_ADDR_VAR 0 7
24042: PUSH
24043: LD_STRING 
24045: ST_TO_ADDR
// for i = 1 to normalCounter do
24046: LD_ADDR_VAR 0 8
24050: PUSH
24051: DOUBLE
24052: LD_INT 1
24054: DEC
24055: ST_TO_ADDR
24056: LD_EXP 62
24060: PUSH
24061: FOR_TO
24062: IFFALSE 24163
// begin tmp := 0 ;
24064: LD_ADDR_VAR 0 3
24068: PUSH
24069: LD_STRING 0
24071: ST_TO_ADDR
// if result [ 1 ] then
24072: LD_VAR 0 2
24076: PUSH
24077: LD_INT 1
24079: ARRAY
24080: IFFALSE 24145
// if result [ 1 ] [ 1 ] = i then
24082: LD_VAR 0 2
24086: PUSH
24087: LD_INT 1
24089: ARRAY
24090: PUSH
24091: LD_INT 1
24093: ARRAY
24094: PUSH
24095: LD_VAR 0 8
24099: EQUAL
24100: IFFALSE 24145
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24102: LD_ADDR_VAR 0 2
24106: PUSH
24107: LD_VAR 0 2
24111: PPUSH
24112: LD_INT 1
24114: PPUSH
24115: LD_VAR 0 2
24119: PUSH
24120: LD_INT 1
24122: ARRAY
24123: PPUSH
24124: LD_INT 1
24126: PPUSH
24127: CALL_OW 3
24131: PPUSH
24132: CALL_OW 1
24136: ST_TO_ADDR
// tmp := 1 ;
24137: LD_ADDR_VAR 0 3
24141: PUSH
24142: LD_STRING 1
24144: ST_TO_ADDR
// end ; normal := normal & tmp ;
24145: LD_ADDR_VAR 0 5
24149: PUSH
24150: LD_VAR 0 5
24154: PUSH
24155: LD_VAR 0 3
24159: STR
24160: ST_TO_ADDR
// end ;
24161: GO 24061
24163: POP
24164: POP
// for i = 1 to hardcoreCounter do
24165: LD_ADDR_VAR 0 8
24169: PUSH
24170: DOUBLE
24171: LD_INT 1
24173: DEC
24174: ST_TO_ADDR
24175: LD_EXP 63
24179: PUSH
24180: FOR_TO
24181: IFFALSE 24286
// begin tmp := 0 ;
24183: LD_ADDR_VAR 0 3
24187: PUSH
24188: LD_STRING 0
24190: ST_TO_ADDR
// if result [ 2 ] then
24191: LD_VAR 0 2
24195: PUSH
24196: LD_INT 2
24198: ARRAY
24199: IFFALSE 24268
// if result [ 2 ] [ 1 ] = 100 + i then
24201: LD_VAR 0 2
24205: PUSH
24206: LD_INT 2
24208: ARRAY
24209: PUSH
24210: LD_INT 1
24212: ARRAY
24213: PUSH
24214: LD_INT 100
24216: PUSH
24217: LD_VAR 0 8
24221: PLUS
24222: EQUAL
24223: IFFALSE 24268
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24225: LD_ADDR_VAR 0 2
24229: PUSH
24230: LD_VAR 0 2
24234: PPUSH
24235: LD_INT 2
24237: PPUSH
24238: LD_VAR 0 2
24242: PUSH
24243: LD_INT 2
24245: ARRAY
24246: PPUSH
24247: LD_INT 1
24249: PPUSH
24250: CALL_OW 3
24254: PPUSH
24255: CALL_OW 1
24259: ST_TO_ADDR
// tmp := 1 ;
24260: LD_ADDR_VAR 0 3
24264: PUSH
24265: LD_STRING 1
24267: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24268: LD_ADDR_VAR 0 6
24272: PUSH
24273: LD_VAR 0 6
24277: PUSH
24278: LD_VAR 0 3
24282: STR
24283: ST_TO_ADDR
// end ;
24284: GO 24180
24286: POP
24287: POP
// if isGameLoad then
24288: LD_VAR 0 1
24292: IFFALSE 24767
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24294: LD_ADDR_VAR 0 4
24298: PUSH
24299: LD_EXP 66
24303: PUSH
24304: LD_EXP 65
24308: PUSH
24309: LD_EXP 67
24313: PUSH
24314: LD_EXP 64
24318: PUSH
24319: LD_EXP 68
24323: PUSH
24324: LD_EXP 69
24328: PUSH
24329: LD_EXP 70
24333: PUSH
24334: LD_EXP 71
24338: PUSH
24339: LD_EXP 72
24343: PUSH
24344: LD_EXP 73
24348: PUSH
24349: LD_EXP 74
24353: PUSH
24354: LD_EXP 75
24358: PUSH
24359: LD_EXP 76
24363: PUSH
24364: LD_EXP 77
24368: PUSH
24369: LD_EXP 85
24373: PUSH
24374: LD_EXP 86
24378: PUSH
24379: LD_EXP 87
24383: PUSH
24384: LD_EXP 88
24388: PUSH
24389: LD_EXP 90
24393: PUSH
24394: LD_EXP 91
24398: PUSH
24399: LD_EXP 92
24403: PUSH
24404: LD_EXP 95
24408: PUSH
24409: LD_EXP 97
24413: PUSH
24414: LD_EXP 98
24418: PUSH
24419: LD_EXP 99
24423: PUSH
24424: LD_EXP 101
24428: PUSH
24429: LD_EXP 102
24433: PUSH
24434: LD_EXP 105
24438: PUSH
24439: LD_EXP 106
24443: PUSH
24444: LD_EXP 107
24448: PUSH
24449: LD_EXP 108
24453: PUSH
24454: LD_EXP 109
24458: PUSH
24459: LD_EXP 110
24463: PUSH
24464: LD_EXP 111
24468: PUSH
24469: LD_EXP 112
24473: PUSH
24474: LD_EXP 113
24478: PUSH
24479: LD_EXP 78
24483: PUSH
24484: LD_EXP 79
24488: PUSH
24489: LD_EXP 82
24493: PUSH
24494: LD_EXP 83
24498: PUSH
24499: LD_EXP 84
24503: PUSH
24504: LD_EXP 80
24508: PUSH
24509: LD_EXP 81
24513: PUSH
24514: LD_EXP 89
24518: PUSH
24519: LD_EXP 93
24523: PUSH
24524: LD_EXP 94
24528: PUSH
24529: LD_EXP 96
24533: PUSH
24534: LD_EXP 100
24538: PUSH
24539: LD_EXP 103
24543: PUSH
24544: LD_EXP 104
24548: PUSH
24549: LD_EXP 114
24553: PUSH
24554: LD_EXP 115
24558: PUSH
24559: LD_EXP 116
24563: PUSH
24564: LD_EXP 117
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: ST_TO_ADDR
// tmp :=  ;
24625: LD_ADDR_VAR 0 3
24629: PUSH
24630: LD_STRING 
24632: ST_TO_ADDR
// for i = 1 to normalCounter do
24633: LD_ADDR_VAR 0 8
24637: PUSH
24638: DOUBLE
24639: LD_INT 1
24641: DEC
24642: ST_TO_ADDR
24643: LD_EXP 62
24647: PUSH
24648: FOR_TO
24649: IFFALSE 24685
// begin if flags [ i ] then
24651: LD_VAR 0 4
24655: PUSH
24656: LD_VAR 0 8
24660: ARRAY
24661: IFFALSE 24683
// tmp := tmp & i & ; ;
24663: LD_ADDR_VAR 0 3
24667: PUSH
24668: LD_VAR 0 3
24672: PUSH
24673: LD_VAR 0 8
24677: STR
24678: PUSH
24679: LD_STRING ;
24681: STR
24682: ST_TO_ADDR
// end ;
24683: GO 24648
24685: POP
24686: POP
// for i = 1 to hardcoreCounter do
24687: LD_ADDR_VAR 0 8
24691: PUSH
24692: DOUBLE
24693: LD_INT 1
24695: DEC
24696: ST_TO_ADDR
24697: LD_EXP 63
24701: PUSH
24702: FOR_TO
24703: IFFALSE 24749
// begin if flags [ normalCounter + i ] then
24705: LD_VAR 0 4
24709: PUSH
24710: LD_EXP 62
24714: PUSH
24715: LD_VAR 0 8
24719: PLUS
24720: ARRAY
24721: IFFALSE 24747
// tmp := tmp & ( 100 + i ) & ; ;
24723: LD_ADDR_VAR 0 3
24727: PUSH
24728: LD_VAR 0 3
24732: PUSH
24733: LD_INT 100
24735: PUSH
24736: LD_VAR 0 8
24740: PLUS
24741: STR
24742: PUSH
24743: LD_STRING ;
24745: STR
24746: ST_TO_ADDR
// end ;
24747: GO 24702
24749: POP
24750: POP
// if tmp then
24751: LD_VAR 0 3
24755: IFFALSE 24767
// active := tmp ;
24757: LD_ADDR_VAR 0 7
24761: PUSH
24762: LD_VAR 0 3
24766: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24767: LD_STRING getStreamItemsFromMission("
24769: PUSH
24770: LD_VAR 0 5
24774: STR
24775: PUSH
24776: LD_STRING ","
24778: STR
24779: PUSH
24780: LD_VAR 0 6
24784: STR
24785: PUSH
24786: LD_STRING ","
24788: STR
24789: PUSH
24790: LD_VAR 0 7
24794: STR
24795: PUSH
24796: LD_STRING ")
24798: STR
24799: PPUSH
24800: CALL_OW 559
// end else
24804: GO 24813
// ToLua ( getStreamItemsFromMission("","","") ) ;
24806: LD_STRING getStreamItemsFromMission("","","")
24808: PPUSH
24809: CALL_OW 559
// end ;
24813: LD_VAR 0 2
24817: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24818: LD_EXP 61
24822: PUSH
24823: LD_EXP 66
24827: AND
24828: IFFALSE 24952
24830: GO 24832
24832: DISABLE
24833: LD_INT 0
24835: PPUSH
24836: PPUSH
// begin enable ;
24837: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24838: LD_ADDR_VAR 0 2
24842: PUSH
24843: LD_INT 22
24845: PUSH
24846: LD_OWVAR 2
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 2
24857: PUSH
24858: LD_INT 34
24860: PUSH
24861: LD_INT 7
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 34
24870: PUSH
24871: LD_INT 45
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 34
24880: PUSH
24881: LD_INT 28
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 34
24890: PUSH
24891: LD_INT 47
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PPUSH
24909: CALL_OW 69
24913: ST_TO_ADDR
// if not tmp then
24914: LD_VAR 0 2
24918: NOT
24919: IFFALSE 24923
// exit ;
24921: GO 24952
// for i in tmp do
24923: LD_ADDR_VAR 0 1
24927: PUSH
24928: LD_VAR 0 2
24932: PUSH
24933: FOR_IN
24934: IFFALSE 24950
// begin SetLives ( i , 0 ) ;
24936: LD_VAR 0 1
24940: PPUSH
24941: LD_INT 0
24943: PPUSH
24944: CALL_OW 234
// end ;
24948: GO 24933
24950: POP
24951: POP
// end ;
24952: PPOPN 2
24954: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24955: LD_EXP 61
24959: PUSH
24960: LD_EXP 67
24964: AND
24965: IFFALSE 25049
24967: GO 24969
24969: DISABLE
24970: LD_INT 0
24972: PPUSH
24973: PPUSH
// begin enable ;
24974: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24975: LD_ADDR_VAR 0 2
24979: PUSH
24980: LD_INT 22
24982: PUSH
24983: LD_OWVAR 2
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 32
24994: PUSH
24995: LD_INT 3
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PPUSH
25006: CALL_OW 69
25010: ST_TO_ADDR
// if not tmp then
25011: LD_VAR 0 2
25015: NOT
25016: IFFALSE 25020
// exit ;
25018: GO 25049
// for i in tmp do
25020: LD_ADDR_VAR 0 1
25024: PUSH
25025: LD_VAR 0 2
25029: PUSH
25030: FOR_IN
25031: IFFALSE 25047
// begin SetLives ( i , 0 ) ;
25033: LD_VAR 0 1
25037: PPUSH
25038: LD_INT 0
25040: PPUSH
25041: CALL_OW 234
// end ;
25045: GO 25030
25047: POP
25048: POP
// end ;
25049: PPOPN 2
25051: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25052: LD_EXP 61
25056: PUSH
25057: LD_EXP 64
25061: AND
25062: IFFALSE 25155
25064: GO 25066
25066: DISABLE
25067: LD_INT 0
25069: PPUSH
// begin enable ;
25070: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25071: LD_ADDR_VAR 0 1
25075: PUSH
25076: LD_INT 22
25078: PUSH
25079: LD_OWVAR 2
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: LD_INT 25
25093: PUSH
25094: LD_INT 5
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 25
25103: PUSH
25104: LD_INT 9
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 25
25113: PUSH
25114: LD_INT 8
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PPUSH
25131: CALL_OW 69
25135: PUSH
25136: FOR_IN
25137: IFFALSE 25153
// begin SetClass ( i , 1 ) ;
25139: LD_VAR 0 1
25143: PPUSH
25144: LD_INT 1
25146: PPUSH
25147: CALL_OW 336
// end ;
25151: GO 25136
25153: POP
25154: POP
// end ;
25155: PPOPN 1
25157: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25158: LD_EXP 61
25162: PUSH
25163: LD_EXP 65
25167: AND
25168: PUSH
25169: LD_OWVAR 65
25173: PUSH
25174: LD_INT 7
25176: LESS
25177: AND
25178: IFFALSE 25192
25180: GO 25182
25182: DISABLE
// begin enable ;
25183: ENABLE
// game_speed := 7 ;
25184: LD_ADDR_OWVAR 65
25188: PUSH
25189: LD_INT 7
25191: ST_TO_ADDR
// end ;
25192: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25193: LD_EXP 61
25197: PUSH
25198: LD_EXP 68
25202: AND
25203: IFFALSE 25405
25205: GO 25207
25207: DISABLE
25208: LD_INT 0
25210: PPUSH
25211: PPUSH
25212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25213: LD_ADDR_VAR 0 3
25217: PUSH
25218: LD_INT 81
25220: PUSH
25221: LD_OWVAR 2
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 21
25232: PUSH
25233: LD_INT 1
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PPUSH
25244: CALL_OW 69
25248: ST_TO_ADDR
// if not tmp then
25249: LD_VAR 0 3
25253: NOT
25254: IFFALSE 25258
// exit ;
25256: GO 25405
// if tmp > 5 then
25258: LD_VAR 0 3
25262: PUSH
25263: LD_INT 5
25265: GREATER
25266: IFFALSE 25278
// k := 5 else
25268: LD_ADDR_VAR 0 2
25272: PUSH
25273: LD_INT 5
25275: ST_TO_ADDR
25276: GO 25288
// k := tmp ;
25278: LD_ADDR_VAR 0 2
25282: PUSH
25283: LD_VAR 0 3
25287: ST_TO_ADDR
// for i := 1 to k do
25288: LD_ADDR_VAR 0 1
25292: PUSH
25293: DOUBLE
25294: LD_INT 1
25296: DEC
25297: ST_TO_ADDR
25298: LD_VAR 0 2
25302: PUSH
25303: FOR_TO
25304: IFFALSE 25403
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25306: LD_VAR 0 3
25310: PUSH
25311: LD_VAR 0 1
25315: ARRAY
25316: PPUSH
25317: LD_VAR 0 1
25321: PUSH
25322: LD_INT 4
25324: MOD
25325: PUSH
25326: LD_INT 1
25328: PLUS
25329: PPUSH
25330: CALL_OW 259
25334: PUSH
25335: LD_INT 10
25337: LESS
25338: IFFALSE 25401
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25340: LD_VAR 0 3
25344: PUSH
25345: LD_VAR 0 1
25349: ARRAY
25350: PPUSH
25351: LD_VAR 0 1
25355: PUSH
25356: LD_INT 4
25358: MOD
25359: PUSH
25360: LD_INT 1
25362: PLUS
25363: PPUSH
25364: LD_VAR 0 3
25368: PUSH
25369: LD_VAR 0 1
25373: ARRAY
25374: PPUSH
25375: LD_VAR 0 1
25379: PUSH
25380: LD_INT 4
25382: MOD
25383: PUSH
25384: LD_INT 1
25386: PLUS
25387: PPUSH
25388: CALL_OW 259
25392: PUSH
25393: LD_INT 1
25395: PLUS
25396: PPUSH
25397: CALL_OW 237
25401: GO 25303
25403: POP
25404: POP
// end ;
25405: PPOPN 3
25407: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25408: LD_EXP 61
25412: PUSH
25413: LD_EXP 69
25417: AND
25418: IFFALSE 25438
25420: GO 25422
25422: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25423: LD_INT 4
25425: PPUSH
25426: LD_OWVAR 2
25430: PPUSH
25431: LD_INT 0
25433: PPUSH
25434: CALL_OW 324
25438: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25439: LD_EXP 61
25443: PUSH
25444: LD_EXP 98
25448: AND
25449: IFFALSE 25469
25451: GO 25453
25453: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25454: LD_INT 19
25456: PPUSH
25457: LD_OWVAR 2
25461: PPUSH
25462: LD_INT 0
25464: PPUSH
25465: CALL_OW 324
25469: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25470: LD_EXP 61
25474: PUSH
25475: LD_EXP 70
25479: AND
25480: IFFALSE 25582
25482: GO 25484
25484: DISABLE
25485: LD_INT 0
25487: PPUSH
25488: PPUSH
// begin enable ;
25489: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25490: LD_ADDR_VAR 0 2
25494: PUSH
25495: LD_INT 22
25497: PUSH
25498: LD_OWVAR 2
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: LD_INT 34
25512: PUSH
25513: LD_INT 11
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 34
25522: PUSH
25523: LD_INT 30
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: LIST
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PPUSH
25539: CALL_OW 69
25543: ST_TO_ADDR
// if not tmp then
25544: LD_VAR 0 2
25548: NOT
25549: IFFALSE 25553
// exit ;
25551: GO 25582
// for i in tmp do
25553: LD_ADDR_VAR 0 1
25557: PUSH
25558: LD_VAR 0 2
25562: PUSH
25563: FOR_IN
25564: IFFALSE 25580
// begin SetLives ( i , 0 ) ;
25566: LD_VAR 0 1
25570: PPUSH
25571: LD_INT 0
25573: PPUSH
25574: CALL_OW 234
// end ;
25578: GO 25563
25580: POP
25581: POP
// end ;
25582: PPOPN 2
25584: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25585: LD_EXP 61
25589: PUSH
25590: LD_EXP 71
25594: AND
25595: IFFALSE 25615
25597: GO 25599
25599: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25600: LD_INT 32
25602: PPUSH
25603: LD_OWVAR 2
25607: PPUSH
25608: LD_INT 0
25610: PPUSH
25611: CALL_OW 324
25615: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25616: LD_EXP 61
25620: PUSH
25621: LD_EXP 72
25625: AND
25626: IFFALSE 25807
25628: GO 25630
25630: DISABLE
25631: LD_INT 0
25633: PPUSH
25634: PPUSH
25635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25636: LD_ADDR_VAR 0 2
25640: PUSH
25641: LD_INT 22
25643: PUSH
25644: LD_OWVAR 2
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 33
25655: PUSH
25656: LD_INT 3
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PPUSH
25667: CALL_OW 69
25671: ST_TO_ADDR
// if not tmp then
25672: LD_VAR 0 2
25676: NOT
25677: IFFALSE 25681
// exit ;
25679: GO 25807
// side := 0 ;
25681: LD_ADDR_VAR 0 3
25685: PUSH
25686: LD_INT 0
25688: ST_TO_ADDR
// for i := 1 to 8 do
25689: LD_ADDR_VAR 0 1
25693: PUSH
25694: DOUBLE
25695: LD_INT 1
25697: DEC
25698: ST_TO_ADDR
25699: LD_INT 8
25701: PUSH
25702: FOR_TO
25703: IFFALSE 25751
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25705: LD_OWVAR 2
25709: PUSH
25710: LD_VAR 0 1
25714: NONEQUAL
25715: PUSH
25716: LD_OWVAR 2
25720: PPUSH
25721: LD_VAR 0 1
25725: PPUSH
25726: CALL_OW 81
25730: PUSH
25731: LD_INT 2
25733: EQUAL
25734: AND
25735: IFFALSE 25749
// begin side := i ;
25737: LD_ADDR_VAR 0 3
25741: PUSH
25742: LD_VAR 0 1
25746: ST_TO_ADDR
// break ;
25747: GO 25751
// end ;
25749: GO 25702
25751: POP
25752: POP
// if not side then
25753: LD_VAR 0 3
25757: NOT
25758: IFFALSE 25762
// exit ;
25760: GO 25807
// for i := 1 to tmp do
25762: LD_ADDR_VAR 0 1
25766: PUSH
25767: DOUBLE
25768: LD_INT 1
25770: DEC
25771: ST_TO_ADDR
25772: LD_VAR 0 2
25776: PUSH
25777: FOR_TO
25778: IFFALSE 25805
// if Prob ( 60 ) then
25780: LD_INT 60
25782: PPUSH
25783: CALL_OW 13
25787: IFFALSE 25803
// SetSide ( i , side ) ;
25789: LD_VAR 0 1
25793: PPUSH
25794: LD_VAR 0 3
25798: PPUSH
25799: CALL_OW 235
25803: GO 25777
25805: POP
25806: POP
// end ;
25807: PPOPN 3
25809: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25810: LD_EXP 61
25814: PUSH
25815: LD_EXP 74
25819: AND
25820: IFFALSE 25939
25822: GO 25824
25824: DISABLE
25825: LD_INT 0
25827: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25828: LD_ADDR_VAR 0 1
25832: PUSH
25833: LD_INT 22
25835: PUSH
25836: LD_OWVAR 2
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 21
25847: PUSH
25848: LD_INT 1
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 3
25857: PUSH
25858: LD_INT 23
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: LIST
25876: PPUSH
25877: CALL_OW 69
25881: PUSH
25882: FOR_IN
25883: IFFALSE 25937
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25885: LD_VAR 0 1
25889: PPUSH
25890: CALL_OW 257
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: LD_INT 2
25900: PUSH
25901: LD_INT 3
25903: PUSH
25904: LD_INT 4
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: IN
25913: IFFALSE 25935
// SetClass ( un , rand ( 1 , 4 ) ) ;
25915: LD_VAR 0 1
25919: PPUSH
25920: LD_INT 1
25922: PPUSH
25923: LD_INT 4
25925: PPUSH
25926: CALL_OW 12
25930: PPUSH
25931: CALL_OW 336
25935: GO 25882
25937: POP
25938: POP
// end ;
25939: PPOPN 1
25941: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25942: LD_EXP 61
25946: PUSH
25947: LD_EXP 73
25951: AND
25952: IFFALSE 26031
25954: GO 25956
25956: DISABLE
25957: LD_INT 0
25959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25960: LD_ADDR_VAR 0 1
25964: PUSH
25965: LD_INT 22
25967: PUSH
25968: LD_OWVAR 2
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 21
25979: PUSH
25980: LD_INT 3
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PPUSH
25991: CALL_OW 69
25995: ST_TO_ADDR
// if not tmp then
25996: LD_VAR 0 1
26000: NOT
26001: IFFALSE 26005
// exit ;
26003: GO 26031
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26005: LD_VAR 0 1
26009: PUSH
26010: LD_INT 1
26012: PPUSH
26013: LD_VAR 0 1
26017: PPUSH
26018: CALL_OW 12
26022: ARRAY
26023: PPUSH
26024: LD_INT 100
26026: PPUSH
26027: CALL_OW 234
// end ;
26031: PPOPN 1
26033: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26034: LD_EXP 61
26038: PUSH
26039: LD_EXP 75
26043: AND
26044: IFFALSE 26142
26046: GO 26048
26048: DISABLE
26049: LD_INT 0
26051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26052: LD_ADDR_VAR 0 1
26056: PUSH
26057: LD_INT 22
26059: PUSH
26060: LD_OWVAR 2
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 21
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PPUSH
26083: CALL_OW 69
26087: ST_TO_ADDR
// if not tmp then
26088: LD_VAR 0 1
26092: NOT
26093: IFFALSE 26097
// exit ;
26095: GO 26142
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26097: LD_VAR 0 1
26101: PUSH
26102: LD_INT 1
26104: PPUSH
26105: LD_VAR 0 1
26109: PPUSH
26110: CALL_OW 12
26114: ARRAY
26115: PPUSH
26116: LD_INT 1
26118: PPUSH
26119: LD_INT 4
26121: PPUSH
26122: CALL_OW 12
26126: PPUSH
26127: LD_INT 3000
26129: PPUSH
26130: LD_INT 9000
26132: PPUSH
26133: CALL_OW 12
26137: PPUSH
26138: CALL_OW 492
// end ;
26142: PPOPN 1
26144: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26145: LD_EXP 61
26149: PUSH
26150: LD_EXP 76
26154: AND
26155: IFFALSE 26175
26157: GO 26159
26159: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26160: LD_INT 1
26162: PPUSH
26163: LD_OWVAR 2
26167: PPUSH
26168: LD_INT 0
26170: PPUSH
26171: CALL_OW 324
26175: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26176: LD_EXP 61
26180: PUSH
26181: LD_EXP 77
26185: AND
26186: IFFALSE 26269
26188: GO 26190
26190: DISABLE
26191: LD_INT 0
26193: PPUSH
26194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26195: LD_ADDR_VAR 0 2
26199: PUSH
26200: LD_INT 22
26202: PUSH
26203: LD_OWVAR 2
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 21
26214: PUSH
26215: LD_INT 3
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PPUSH
26226: CALL_OW 69
26230: ST_TO_ADDR
// if not tmp then
26231: LD_VAR 0 2
26235: NOT
26236: IFFALSE 26240
// exit ;
26238: GO 26269
// for i in tmp do
26240: LD_ADDR_VAR 0 1
26244: PUSH
26245: LD_VAR 0 2
26249: PUSH
26250: FOR_IN
26251: IFFALSE 26267
// SetBLevel ( i , 10 ) ;
26253: LD_VAR 0 1
26257: PPUSH
26258: LD_INT 10
26260: PPUSH
26261: CALL_OW 241
26265: GO 26250
26267: POP
26268: POP
// end ;
26269: PPOPN 2
26271: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26272: LD_EXP 61
26276: PUSH
26277: LD_EXP 78
26281: AND
26282: IFFALSE 26393
26284: GO 26286
26286: DISABLE
26287: LD_INT 0
26289: PPUSH
26290: PPUSH
26291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26292: LD_ADDR_VAR 0 3
26296: PUSH
26297: LD_INT 22
26299: PUSH
26300: LD_OWVAR 2
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 25
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PPUSH
26323: CALL_OW 69
26327: ST_TO_ADDR
// if not tmp then
26328: LD_VAR 0 3
26332: NOT
26333: IFFALSE 26337
// exit ;
26335: GO 26393
// un := tmp [ rand ( 1 , tmp ) ] ;
26337: LD_ADDR_VAR 0 2
26341: PUSH
26342: LD_VAR 0 3
26346: PUSH
26347: LD_INT 1
26349: PPUSH
26350: LD_VAR 0 3
26354: PPUSH
26355: CALL_OW 12
26359: ARRAY
26360: ST_TO_ADDR
// if Crawls ( un ) then
26361: LD_VAR 0 2
26365: PPUSH
26366: CALL_OW 318
26370: IFFALSE 26381
// ComWalk ( un ) ;
26372: LD_VAR 0 2
26376: PPUSH
26377: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26381: LD_VAR 0 2
26385: PPUSH
26386: LD_INT 5
26388: PPUSH
26389: CALL_OW 336
// end ;
26393: PPOPN 3
26395: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26396: LD_EXP 61
26400: PUSH
26401: LD_EXP 79
26405: AND
26406: PUSH
26407: LD_OWVAR 67
26411: PUSH
26412: LD_INT 4
26414: LESS
26415: AND
26416: IFFALSE 26435
26418: GO 26420
26420: DISABLE
// begin Difficulty := Difficulty + 1 ;
26421: LD_ADDR_OWVAR 67
26425: PUSH
26426: LD_OWVAR 67
26430: PUSH
26431: LD_INT 1
26433: PLUS
26434: ST_TO_ADDR
// end ;
26435: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26436: LD_EXP 61
26440: PUSH
26441: LD_EXP 80
26445: AND
26446: IFFALSE 26549
26448: GO 26450
26450: DISABLE
26451: LD_INT 0
26453: PPUSH
// begin for i := 1 to 5 do
26454: LD_ADDR_VAR 0 1
26458: PUSH
26459: DOUBLE
26460: LD_INT 1
26462: DEC
26463: ST_TO_ADDR
26464: LD_INT 5
26466: PUSH
26467: FOR_TO
26468: IFFALSE 26547
// begin uc_nation := nation_nature ;
26470: LD_ADDR_OWVAR 21
26474: PUSH
26475: LD_INT 0
26477: ST_TO_ADDR
// uc_side := 0 ;
26478: LD_ADDR_OWVAR 20
26482: PUSH
26483: LD_INT 0
26485: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26486: LD_ADDR_OWVAR 29
26490: PUSH
26491: LD_INT 12
26493: PUSH
26494: LD_INT 12
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: ST_TO_ADDR
// hc_agressivity := 20 ;
26501: LD_ADDR_OWVAR 35
26505: PUSH
26506: LD_INT 20
26508: ST_TO_ADDR
// hc_class := class_tiger ;
26509: LD_ADDR_OWVAR 28
26513: PUSH
26514: LD_INT 14
26516: ST_TO_ADDR
// hc_gallery :=  ;
26517: LD_ADDR_OWVAR 33
26521: PUSH
26522: LD_STRING 
26524: ST_TO_ADDR
// hc_name :=  ;
26525: LD_ADDR_OWVAR 26
26529: PUSH
26530: LD_STRING 
26532: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26533: CALL_OW 44
26537: PPUSH
26538: LD_INT 0
26540: PPUSH
26541: CALL_OW 51
// end ;
26545: GO 26467
26547: POP
26548: POP
// end ;
26549: PPOPN 1
26551: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26552: LD_EXP 61
26556: PUSH
26557: LD_EXP 81
26561: AND
26562: IFFALSE 26571
26564: GO 26566
26566: DISABLE
// StreamSibBomb ;
26567: CALL 26572 0 0
26571: END
// export function StreamSibBomb ; var i , x , y ; begin
26572: LD_INT 0
26574: PPUSH
26575: PPUSH
26576: PPUSH
26577: PPUSH
// result := false ;
26578: LD_ADDR_VAR 0 1
26582: PUSH
26583: LD_INT 0
26585: ST_TO_ADDR
// for i := 1 to 16 do
26586: LD_ADDR_VAR 0 2
26590: PUSH
26591: DOUBLE
26592: LD_INT 1
26594: DEC
26595: ST_TO_ADDR
26596: LD_INT 16
26598: PUSH
26599: FOR_TO
26600: IFFALSE 26799
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26602: LD_ADDR_VAR 0 3
26606: PUSH
26607: LD_INT 10
26609: PUSH
26610: LD_INT 20
26612: PUSH
26613: LD_INT 30
26615: PUSH
26616: LD_INT 40
26618: PUSH
26619: LD_INT 50
26621: PUSH
26622: LD_INT 60
26624: PUSH
26625: LD_INT 70
26627: PUSH
26628: LD_INT 80
26630: PUSH
26631: LD_INT 90
26633: PUSH
26634: LD_INT 100
26636: PUSH
26637: LD_INT 110
26639: PUSH
26640: LD_INT 120
26642: PUSH
26643: LD_INT 130
26645: PUSH
26646: LD_INT 140
26648: PUSH
26649: LD_INT 150
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 1
26671: PPUSH
26672: LD_INT 15
26674: PPUSH
26675: CALL_OW 12
26679: ARRAY
26680: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26681: LD_ADDR_VAR 0 4
26685: PUSH
26686: LD_INT 10
26688: PUSH
26689: LD_INT 20
26691: PUSH
26692: LD_INT 30
26694: PUSH
26695: LD_INT 40
26697: PUSH
26698: LD_INT 50
26700: PUSH
26701: LD_INT 60
26703: PUSH
26704: LD_INT 70
26706: PUSH
26707: LD_INT 80
26709: PUSH
26710: LD_INT 90
26712: PUSH
26713: LD_INT 100
26715: PUSH
26716: LD_INT 110
26718: PUSH
26719: LD_INT 120
26721: PUSH
26722: LD_INT 130
26724: PUSH
26725: LD_INT 140
26727: PUSH
26728: LD_INT 150
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 1
26750: PPUSH
26751: LD_INT 15
26753: PPUSH
26754: CALL_OW 12
26758: ARRAY
26759: ST_TO_ADDR
// if ValidHex ( x , y ) then
26760: LD_VAR 0 3
26764: PPUSH
26765: LD_VAR 0 4
26769: PPUSH
26770: CALL_OW 488
26774: IFFALSE 26797
// begin result := [ x , y ] ;
26776: LD_ADDR_VAR 0 1
26780: PUSH
26781: LD_VAR 0 3
26785: PUSH
26786: LD_VAR 0 4
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: ST_TO_ADDR
// break ;
26795: GO 26799
// end ; end ;
26797: GO 26599
26799: POP
26800: POP
// if result then
26801: LD_VAR 0 1
26805: IFFALSE 26865
// begin ToLua ( playSibBomb() ) ;
26807: LD_STRING playSibBomb()
26809: PPUSH
26810: CALL_OW 559
// wait ( 0 0$14 ) ;
26814: LD_INT 490
26816: PPUSH
26817: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26821: LD_VAR 0 1
26825: PUSH
26826: LD_INT 1
26828: ARRAY
26829: PPUSH
26830: LD_VAR 0 1
26834: PUSH
26835: LD_INT 2
26837: ARRAY
26838: PPUSH
26839: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26843: LD_VAR 0 1
26847: PUSH
26848: LD_INT 1
26850: ARRAY
26851: PPUSH
26852: LD_VAR 0 1
26856: PUSH
26857: LD_INT 2
26859: ARRAY
26860: PPUSH
26861: CALL_OW 429
// end ; end ;
26865: LD_VAR 0 1
26869: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26870: LD_EXP 61
26874: PUSH
26875: LD_EXP 83
26879: AND
26880: IFFALSE 26892
26882: GO 26884
26884: DISABLE
// YouLost (  ) ;
26885: LD_STRING 
26887: PPUSH
26888: CALL_OW 104
26892: END
// every 0 0$1 trigger StreamModeActive and sFog do
26893: LD_EXP 61
26897: PUSH
26898: LD_EXP 82
26902: AND
26903: IFFALSE 26917
26905: GO 26907
26907: DISABLE
// FogOff ( your_side ) ;
26908: LD_OWVAR 2
26912: PPUSH
26913: CALL_OW 344
26917: END
// every 0 0$1 trigger StreamModeActive and sSun do
26918: LD_EXP 61
26922: PUSH
26923: LD_EXP 84
26927: AND
26928: IFFALSE 26956
26930: GO 26932
26932: DISABLE
// begin solar_recharge_percent := 0 ;
26933: LD_ADDR_OWVAR 79
26937: PUSH
26938: LD_INT 0
26940: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26941: LD_INT 10500
26943: PPUSH
26944: CALL_OW 67
// solar_recharge_percent := 100 ;
26948: LD_ADDR_OWVAR 79
26952: PUSH
26953: LD_INT 100
26955: ST_TO_ADDR
// end ;
26956: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26957: LD_EXP 61
26961: PUSH
26962: LD_EXP 85
26966: AND
26967: IFFALSE 27206
26969: GO 26971
26971: DISABLE
26972: LD_INT 0
26974: PPUSH
26975: PPUSH
26976: PPUSH
// begin tmp := [ ] ;
26977: LD_ADDR_VAR 0 3
26981: PUSH
26982: EMPTY
26983: ST_TO_ADDR
// for i := 1 to 6 do
26984: LD_ADDR_VAR 0 1
26988: PUSH
26989: DOUBLE
26990: LD_INT 1
26992: DEC
26993: ST_TO_ADDR
26994: LD_INT 6
26996: PUSH
26997: FOR_TO
26998: IFFALSE 27103
// begin uc_nation := nation_nature ;
27000: LD_ADDR_OWVAR 21
27004: PUSH
27005: LD_INT 0
27007: ST_TO_ADDR
// uc_side := 0 ;
27008: LD_ADDR_OWVAR 20
27012: PUSH
27013: LD_INT 0
27015: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27016: LD_ADDR_OWVAR 29
27020: PUSH
27021: LD_INT 12
27023: PUSH
27024: LD_INT 12
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: ST_TO_ADDR
// hc_agressivity := 20 ;
27031: LD_ADDR_OWVAR 35
27035: PUSH
27036: LD_INT 20
27038: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27039: LD_ADDR_OWVAR 28
27043: PUSH
27044: LD_INT 17
27046: ST_TO_ADDR
// hc_gallery :=  ;
27047: LD_ADDR_OWVAR 33
27051: PUSH
27052: LD_STRING 
27054: ST_TO_ADDR
// hc_name :=  ;
27055: LD_ADDR_OWVAR 26
27059: PUSH
27060: LD_STRING 
27062: ST_TO_ADDR
// un := CreateHuman ;
27063: LD_ADDR_VAR 0 2
27067: PUSH
27068: CALL_OW 44
27072: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27073: LD_VAR 0 2
27077: PPUSH
27078: LD_INT 1
27080: PPUSH
27081: CALL_OW 51
// tmp := tmp ^ un ;
27085: LD_ADDR_VAR 0 3
27089: PUSH
27090: LD_VAR 0 3
27094: PUSH
27095: LD_VAR 0 2
27099: ADD
27100: ST_TO_ADDR
// end ;
27101: GO 26997
27103: POP
27104: POP
// repeat wait ( 0 0$1 ) ;
27105: LD_INT 35
27107: PPUSH
27108: CALL_OW 67
// for un in tmp do
27112: LD_ADDR_VAR 0 2
27116: PUSH
27117: LD_VAR 0 3
27121: PUSH
27122: FOR_IN
27123: IFFALSE 27197
// begin if IsDead ( un ) then
27125: LD_VAR 0 2
27129: PPUSH
27130: CALL_OW 301
27134: IFFALSE 27154
// begin tmp := tmp diff un ;
27136: LD_ADDR_VAR 0 3
27140: PUSH
27141: LD_VAR 0 3
27145: PUSH
27146: LD_VAR 0 2
27150: DIFF
27151: ST_TO_ADDR
// continue ;
27152: GO 27122
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27154: LD_VAR 0 2
27158: PPUSH
27159: LD_INT 3
27161: PUSH
27162: LD_INT 22
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PPUSH
27176: CALL_OW 69
27180: PPUSH
27181: LD_VAR 0 2
27185: PPUSH
27186: CALL_OW 74
27190: PPUSH
27191: CALL_OW 115
// end ;
27195: GO 27122
27197: POP
27198: POP
// until not tmp ;
27199: LD_VAR 0 3
27203: NOT
27204: IFFALSE 27105
// end ;
27206: PPOPN 3
27208: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27209: LD_EXP 61
27213: PUSH
27214: LD_EXP 86
27218: AND
27219: IFFALSE 27273
27221: GO 27223
27223: DISABLE
// begin ToLua ( displayTroll(); ) ;
27224: LD_STRING displayTroll();
27226: PPUSH
27227: CALL_OW 559
// wait ( 3 3$00 ) ;
27231: LD_INT 6300
27233: PPUSH
27234: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27238: LD_STRING hideTroll();
27240: PPUSH
27241: CALL_OW 559
// wait ( 1 1$00 ) ;
27245: LD_INT 2100
27247: PPUSH
27248: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27252: LD_STRING displayTroll();
27254: PPUSH
27255: CALL_OW 559
// wait ( 1 1$00 ) ;
27259: LD_INT 2100
27261: PPUSH
27262: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27266: LD_STRING hideTroll();
27268: PPUSH
27269: CALL_OW 559
// end ;
27273: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27274: LD_EXP 61
27278: PUSH
27279: LD_EXP 87
27283: AND
27284: IFFALSE 27347
27286: GO 27288
27288: DISABLE
27289: LD_INT 0
27291: PPUSH
// begin p := 0 ;
27292: LD_ADDR_VAR 0 1
27296: PUSH
27297: LD_INT 0
27299: ST_TO_ADDR
// repeat game_speed := 1 ;
27300: LD_ADDR_OWVAR 65
27304: PUSH
27305: LD_INT 1
27307: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27308: LD_INT 35
27310: PPUSH
27311: CALL_OW 67
// p := p + 1 ;
27315: LD_ADDR_VAR 0 1
27319: PUSH
27320: LD_VAR 0 1
27324: PUSH
27325: LD_INT 1
27327: PLUS
27328: ST_TO_ADDR
// until p >= 60 ;
27329: LD_VAR 0 1
27333: PUSH
27334: LD_INT 60
27336: GREATEREQUAL
27337: IFFALSE 27300
// game_speed := 4 ;
27339: LD_ADDR_OWVAR 65
27343: PUSH
27344: LD_INT 4
27346: ST_TO_ADDR
// end ;
27347: PPOPN 1
27349: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27350: LD_EXP 61
27354: PUSH
27355: LD_EXP 88
27359: AND
27360: IFFALSE 27506
27362: GO 27364
27364: DISABLE
27365: LD_INT 0
27367: PPUSH
27368: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27369: LD_ADDR_VAR 0 1
27373: PUSH
27374: LD_INT 22
27376: PUSH
27377: LD_OWVAR 2
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: LD_INT 30
27391: PUSH
27392: LD_INT 0
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 30
27401: PUSH
27402: LD_INT 1
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: LIST
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PPUSH
27418: CALL_OW 69
27422: ST_TO_ADDR
// if not depot then
27423: LD_VAR 0 1
27427: NOT
27428: IFFALSE 27432
// exit ;
27430: GO 27506
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27432: LD_ADDR_VAR 0 2
27436: PUSH
27437: LD_VAR 0 1
27441: PUSH
27442: LD_INT 1
27444: PPUSH
27445: LD_VAR 0 1
27449: PPUSH
27450: CALL_OW 12
27454: ARRAY
27455: PPUSH
27456: CALL_OW 274
27460: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27461: LD_VAR 0 2
27465: PPUSH
27466: LD_INT 1
27468: PPUSH
27469: LD_INT 0
27471: PPUSH
27472: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27476: LD_VAR 0 2
27480: PPUSH
27481: LD_INT 2
27483: PPUSH
27484: LD_INT 0
27486: PPUSH
27487: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27491: LD_VAR 0 2
27495: PPUSH
27496: LD_INT 3
27498: PPUSH
27499: LD_INT 0
27501: PPUSH
27502: CALL_OW 277
// end ;
27506: PPOPN 2
27508: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27509: LD_EXP 61
27513: PUSH
27514: LD_EXP 89
27518: AND
27519: IFFALSE 27616
27521: GO 27523
27523: DISABLE
27524: LD_INT 0
27526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27527: LD_ADDR_VAR 0 1
27531: PUSH
27532: LD_INT 22
27534: PUSH
27535: LD_OWVAR 2
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 21
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 3
27556: PUSH
27557: LD_INT 23
27559: PUSH
27560: LD_INT 0
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: LIST
27575: PPUSH
27576: CALL_OW 69
27580: ST_TO_ADDR
// if not tmp then
27581: LD_VAR 0 1
27585: NOT
27586: IFFALSE 27590
// exit ;
27588: GO 27616
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27590: LD_VAR 0 1
27594: PUSH
27595: LD_INT 1
27597: PPUSH
27598: LD_VAR 0 1
27602: PPUSH
27603: CALL_OW 12
27607: ARRAY
27608: PPUSH
27609: LD_INT 200
27611: PPUSH
27612: CALL_OW 234
// end ;
27616: PPOPN 1
27618: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27619: LD_EXP 61
27623: PUSH
27624: LD_EXP 90
27628: AND
27629: IFFALSE 27708
27631: GO 27633
27633: DISABLE
27634: LD_INT 0
27636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27637: LD_ADDR_VAR 0 1
27641: PUSH
27642: LD_INT 22
27644: PUSH
27645: LD_OWVAR 2
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 21
27656: PUSH
27657: LD_INT 2
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PPUSH
27668: CALL_OW 69
27672: ST_TO_ADDR
// if not tmp then
27673: LD_VAR 0 1
27677: NOT
27678: IFFALSE 27682
// exit ;
27680: GO 27708
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27682: LD_VAR 0 1
27686: PUSH
27687: LD_INT 1
27689: PPUSH
27690: LD_VAR 0 1
27694: PPUSH
27695: CALL_OW 12
27699: ARRAY
27700: PPUSH
27701: LD_INT 60
27703: PPUSH
27704: CALL_OW 234
// end ;
27708: PPOPN 1
27710: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27711: LD_EXP 61
27715: PUSH
27716: LD_EXP 91
27720: AND
27721: IFFALSE 27820
27723: GO 27725
27725: DISABLE
27726: LD_INT 0
27728: PPUSH
27729: PPUSH
// begin enable ;
27730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27731: LD_ADDR_VAR 0 1
27735: PUSH
27736: LD_INT 22
27738: PUSH
27739: LD_OWVAR 2
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 61
27750: PUSH
27751: EMPTY
27752: LIST
27753: PUSH
27754: LD_INT 33
27756: PUSH
27757: LD_INT 2
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: LIST
27768: PPUSH
27769: CALL_OW 69
27773: ST_TO_ADDR
// if not tmp then
27774: LD_VAR 0 1
27778: NOT
27779: IFFALSE 27783
// exit ;
27781: GO 27820
// for i in tmp do
27783: LD_ADDR_VAR 0 2
27787: PUSH
27788: LD_VAR 0 1
27792: PUSH
27793: FOR_IN
27794: IFFALSE 27818
// if IsControledBy ( i ) then
27796: LD_VAR 0 2
27800: PPUSH
27801: CALL_OW 312
27805: IFFALSE 27816
// ComUnlink ( i ) ;
27807: LD_VAR 0 2
27811: PPUSH
27812: CALL_OW 136
27816: GO 27793
27818: POP
27819: POP
// end ;
27820: PPOPN 2
27822: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27823: LD_EXP 61
27827: PUSH
27828: LD_EXP 92
27832: AND
27833: IFFALSE 27973
27835: GO 27837
27837: DISABLE
27838: LD_INT 0
27840: PPUSH
27841: PPUSH
// begin ToLua ( displayPowell(); ) ;
27842: LD_STRING displayPowell();
27844: PPUSH
27845: CALL_OW 559
// uc_side := 0 ;
27849: LD_ADDR_OWVAR 20
27853: PUSH
27854: LD_INT 0
27856: ST_TO_ADDR
// uc_nation := 2 ;
27857: LD_ADDR_OWVAR 21
27861: PUSH
27862: LD_INT 2
27864: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27865: LD_ADDR_OWVAR 37
27869: PUSH
27870: LD_INT 14
27872: ST_TO_ADDR
// vc_engine := engine_siberite ;
27873: LD_ADDR_OWVAR 39
27877: PUSH
27878: LD_INT 3
27880: ST_TO_ADDR
// vc_control := control_apeman ;
27881: LD_ADDR_OWVAR 38
27885: PUSH
27886: LD_INT 5
27888: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27889: LD_ADDR_OWVAR 40
27893: PUSH
27894: LD_INT 29
27896: ST_TO_ADDR
// un := CreateVehicle ;
27897: LD_ADDR_VAR 0 2
27901: PUSH
27902: CALL_OW 45
27906: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27907: LD_VAR 0 2
27911: PPUSH
27912: LD_INT 1
27914: PPUSH
27915: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27919: LD_INT 35
27921: PPUSH
27922: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27926: LD_VAR 0 2
27930: PPUSH
27931: LD_INT 22
27933: PUSH
27934: LD_OWVAR 2
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PPUSH
27943: CALL_OW 69
27947: PPUSH
27948: LD_VAR 0 2
27952: PPUSH
27953: CALL_OW 74
27957: PPUSH
27958: CALL_OW 115
// until IsDead ( un ) ;
27962: LD_VAR 0 2
27966: PPUSH
27967: CALL_OW 301
27971: IFFALSE 27919
// end ;
27973: PPOPN 2
27975: END
// every 0 0$1 trigger StreamModeActive and sStu do
27976: LD_EXP 61
27980: PUSH
27981: LD_EXP 100
27985: AND
27986: IFFALSE 28002
27988: GO 27990
27990: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27991: LD_STRING displayStucuk();
27993: PPUSH
27994: CALL_OW 559
// ResetFog ;
27998: CALL_OW 335
// end ;
28002: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28003: LD_EXP 61
28007: PUSH
28008: LD_EXP 93
28012: AND
28013: IFFALSE 28154
28015: GO 28017
28017: DISABLE
28018: LD_INT 0
28020: PPUSH
28021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28022: LD_ADDR_VAR 0 2
28026: PUSH
28027: LD_INT 22
28029: PUSH
28030: LD_OWVAR 2
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 21
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PPUSH
28053: CALL_OW 69
28057: ST_TO_ADDR
// if not tmp then
28058: LD_VAR 0 2
28062: NOT
28063: IFFALSE 28067
// exit ;
28065: GO 28154
// un := tmp [ rand ( 1 , tmp ) ] ;
28067: LD_ADDR_VAR 0 1
28071: PUSH
28072: LD_VAR 0 2
28076: PUSH
28077: LD_INT 1
28079: PPUSH
28080: LD_VAR 0 2
28084: PPUSH
28085: CALL_OW 12
28089: ARRAY
28090: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28091: LD_VAR 0 1
28095: PPUSH
28096: LD_INT 0
28098: PPUSH
28099: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28103: LD_VAR 0 1
28107: PPUSH
28108: LD_OWVAR 3
28112: PUSH
28113: LD_VAR 0 1
28117: DIFF
28118: PPUSH
28119: LD_VAR 0 1
28123: PPUSH
28124: CALL_OW 74
28128: PPUSH
28129: CALL_OW 115
// wait ( 0 0$20 ) ;
28133: LD_INT 700
28135: PPUSH
28136: CALL_OW 67
// SetSide ( un , your_side ) ;
28140: LD_VAR 0 1
28144: PPUSH
28145: LD_OWVAR 2
28149: PPUSH
28150: CALL_OW 235
// end ;
28154: PPOPN 2
28156: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28157: LD_EXP 61
28161: PUSH
28162: LD_EXP 94
28166: AND
28167: IFFALSE 28273
28169: GO 28171
28171: DISABLE
28172: LD_INT 0
28174: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28175: LD_ADDR_VAR 0 1
28179: PUSH
28180: LD_INT 22
28182: PUSH
28183: LD_OWVAR 2
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 2
28194: PUSH
28195: LD_INT 30
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 30
28207: PUSH
28208: LD_INT 1
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PPUSH
28224: CALL_OW 69
28228: ST_TO_ADDR
// if not depot then
28229: LD_VAR 0 1
28233: NOT
28234: IFFALSE 28238
// exit ;
28236: GO 28273
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28238: LD_VAR 0 1
28242: PUSH
28243: LD_INT 1
28245: ARRAY
28246: PPUSH
28247: CALL_OW 250
28251: PPUSH
28252: LD_VAR 0 1
28256: PUSH
28257: LD_INT 1
28259: ARRAY
28260: PPUSH
28261: CALL_OW 251
28265: PPUSH
28266: LD_INT 70
28268: PPUSH
28269: CALL_OW 495
// end ;
28273: PPOPN 1
28275: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28276: LD_EXP 61
28280: PUSH
28281: LD_EXP 95
28285: AND
28286: IFFALSE 28497
28288: GO 28290
28290: DISABLE
28291: LD_INT 0
28293: PPUSH
28294: PPUSH
28295: PPUSH
28296: PPUSH
28297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28298: LD_ADDR_VAR 0 5
28302: PUSH
28303: LD_INT 22
28305: PUSH
28306: LD_OWVAR 2
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 21
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PPUSH
28329: CALL_OW 69
28333: ST_TO_ADDR
// if not tmp then
28334: LD_VAR 0 5
28338: NOT
28339: IFFALSE 28343
// exit ;
28341: GO 28497
// for i in tmp do
28343: LD_ADDR_VAR 0 1
28347: PUSH
28348: LD_VAR 0 5
28352: PUSH
28353: FOR_IN
28354: IFFALSE 28495
// begin d := rand ( 0 , 5 ) ;
28356: LD_ADDR_VAR 0 4
28360: PUSH
28361: LD_INT 0
28363: PPUSH
28364: LD_INT 5
28366: PPUSH
28367: CALL_OW 12
28371: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28372: LD_ADDR_VAR 0 2
28376: PUSH
28377: LD_VAR 0 1
28381: PPUSH
28382: CALL_OW 250
28386: PPUSH
28387: LD_VAR 0 4
28391: PPUSH
28392: LD_INT 3
28394: PPUSH
28395: LD_INT 12
28397: PPUSH
28398: CALL_OW 12
28402: PPUSH
28403: CALL_OW 272
28407: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28408: LD_ADDR_VAR 0 3
28412: PUSH
28413: LD_VAR 0 1
28417: PPUSH
28418: CALL_OW 251
28422: PPUSH
28423: LD_VAR 0 4
28427: PPUSH
28428: LD_INT 3
28430: PPUSH
28431: LD_INT 12
28433: PPUSH
28434: CALL_OW 12
28438: PPUSH
28439: CALL_OW 273
28443: ST_TO_ADDR
// if ValidHex ( x , y ) then
28444: LD_VAR 0 2
28448: PPUSH
28449: LD_VAR 0 3
28453: PPUSH
28454: CALL_OW 488
28458: IFFALSE 28493
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28460: LD_VAR 0 1
28464: PPUSH
28465: LD_VAR 0 2
28469: PPUSH
28470: LD_VAR 0 3
28474: PPUSH
28475: LD_INT 3
28477: PPUSH
28478: LD_INT 6
28480: PPUSH
28481: CALL_OW 12
28485: PPUSH
28486: LD_INT 1
28488: PPUSH
28489: CALL_OW 483
// end ;
28493: GO 28353
28495: POP
28496: POP
// end ;
28497: PPOPN 5
28499: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28500: LD_EXP 61
28504: PUSH
28505: LD_EXP 96
28509: AND
28510: IFFALSE 28604
28512: GO 28514
28514: DISABLE
28515: LD_INT 0
28517: PPUSH
28518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28519: LD_ADDR_VAR 0 2
28523: PUSH
28524: LD_INT 22
28526: PUSH
28527: LD_OWVAR 2
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 32
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 21
28548: PUSH
28549: LD_INT 2
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: PPUSH
28561: CALL_OW 69
28565: ST_TO_ADDR
// if not tmp then
28566: LD_VAR 0 2
28570: NOT
28571: IFFALSE 28575
// exit ;
28573: GO 28604
// for i in tmp do
28575: LD_ADDR_VAR 0 1
28579: PUSH
28580: LD_VAR 0 2
28584: PUSH
28585: FOR_IN
28586: IFFALSE 28602
// SetFuel ( i , 0 ) ;
28588: LD_VAR 0 1
28592: PPUSH
28593: LD_INT 0
28595: PPUSH
28596: CALL_OW 240
28600: GO 28585
28602: POP
28603: POP
// end ;
28604: PPOPN 2
28606: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28607: LD_EXP 61
28611: PUSH
28612: LD_EXP 97
28616: AND
28617: IFFALSE 28683
28619: GO 28621
28621: DISABLE
28622: LD_INT 0
28624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28625: LD_ADDR_VAR 0 1
28629: PUSH
28630: LD_INT 22
28632: PUSH
28633: LD_OWVAR 2
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 30
28644: PUSH
28645: LD_INT 29
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PPUSH
28656: CALL_OW 69
28660: ST_TO_ADDR
// if not tmp then
28661: LD_VAR 0 1
28665: NOT
28666: IFFALSE 28670
// exit ;
28668: GO 28683
// DestroyUnit ( tmp [ 1 ] ) ;
28670: LD_VAR 0 1
28674: PUSH
28675: LD_INT 1
28677: ARRAY
28678: PPUSH
28679: CALL_OW 65
// end ;
28683: PPOPN 1
28685: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28686: LD_EXP 61
28690: PUSH
28691: LD_EXP 99
28695: AND
28696: IFFALSE 28825
28698: GO 28700
28700: DISABLE
28701: LD_INT 0
28703: PPUSH
// begin uc_side := 0 ;
28704: LD_ADDR_OWVAR 20
28708: PUSH
28709: LD_INT 0
28711: ST_TO_ADDR
// uc_nation := nation_arabian ;
28712: LD_ADDR_OWVAR 21
28716: PUSH
28717: LD_INT 2
28719: ST_TO_ADDR
// hc_gallery :=  ;
28720: LD_ADDR_OWVAR 33
28724: PUSH
28725: LD_STRING 
28727: ST_TO_ADDR
// hc_name :=  ;
28728: LD_ADDR_OWVAR 26
28732: PUSH
28733: LD_STRING 
28735: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28736: LD_INT 1
28738: PPUSH
28739: LD_INT 11
28741: PPUSH
28742: LD_INT 10
28744: PPUSH
28745: CALL_OW 380
// un := CreateHuman ;
28749: LD_ADDR_VAR 0 1
28753: PUSH
28754: CALL_OW 44
28758: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28759: LD_VAR 0 1
28763: PPUSH
28764: LD_INT 1
28766: PPUSH
28767: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28771: LD_INT 35
28773: PPUSH
28774: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28778: LD_VAR 0 1
28782: PPUSH
28783: LD_INT 22
28785: PUSH
28786: LD_OWVAR 2
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PPUSH
28795: CALL_OW 69
28799: PPUSH
28800: LD_VAR 0 1
28804: PPUSH
28805: CALL_OW 74
28809: PPUSH
28810: CALL_OW 115
// until IsDead ( un ) ;
28814: LD_VAR 0 1
28818: PPUSH
28819: CALL_OW 301
28823: IFFALSE 28771
// end ;
28825: PPOPN 1
28827: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28828: LD_EXP 61
28832: PUSH
28833: LD_EXP 101
28837: AND
28838: IFFALSE 28850
28840: GO 28842
28842: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28843: LD_STRING earthquake(getX(game), 0, 32)
28845: PPUSH
28846: CALL_OW 559
28850: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28851: LD_EXP 61
28855: PUSH
28856: LD_EXP 102
28860: AND
28861: IFFALSE 28952
28863: GO 28865
28865: DISABLE
28866: LD_INT 0
28868: PPUSH
// begin enable ;
28869: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28870: LD_ADDR_VAR 0 1
28874: PUSH
28875: LD_INT 22
28877: PUSH
28878: LD_OWVAR 2
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 21
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 33
28899: PUSH
28900: LD_INT 3
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: LIST
28911: PPUSH
28912: CALL_OW 69
28916: ST_TO_ADDR
// if not tmp then
28917: LD_VAR 0 1
28921: NOT
28922: IFFALSE 28926
// exit ;
28924: GO 28952
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28926: LD_VAR 0 1
28930: PUSH
28931: LD_INT 1
28933: PPUSH
28934: LD_VAR 0 1
28938: PPUSH
28939: CALL_OW 12
28943: ARRAY
28944: PPUSH
28945: LD_INT 1
28947: PPUSH
28948: CALL_OW 234
// end ;
28952: PPOPN 1
28954: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28955: LD_EXP 61
28959: PUSH
28960: LD_EXP 103
28964: AND
28965: IFFALSE 29106
28967: GO 28969
28969: DISABLE
28970: LD_INT 0
28972: PPUSH
28973: PPUSH
28974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28975: LD_ADDR_VAR 0 3
28979: PUSH
28980: LD_INT 22
28982: PUSH
28983: LD_OWVAR 2
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 25
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PPUSH
29006: CALL_OW 69
29010: ST_TO_ADDR
// if not tmp then
29011: LD_VAR 0 3
29015: NOT
29016: IFFALSE 29020
// exit ;
29018: GO 29106
// un := tmp [ rand ( 1 , tmp ) ] ;
29020: LD_ADDR_VAR 0 2
29024: PUSH
29025: LD_VAR 0 3
29029: PUSH
29030: LD_INT 1
29032: PPUSH
29033: LD_VAR 0 3
29037: PPUSH
29038: CALL_OW 12
29042: ARRAY
29043: ST_TO_ADDR
// if Crawls ( un ) then
29044: LD_VAR 0 2
29048: PPUSH
29049: CALL_OW 318
29053: IFFALSE 29064
// ComWalk ( un ) ;
29055: LD_VAR 0 2
29059: PPUSH
29060: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29064: LD_VAR 0 2
29068: PPUSH
29069: LD_INT 9
29071: PPUSH
29072: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29076: LD_INT 28
29078: PPUSH
29079: LD_OWVAR 2
29083: PPUSH
29084: LD_INT 2
29086: PPUSH
29087: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29091: LD_INT 29
29093: PPUSH
29094: LD_OWVAR 2
29098: PPUSH
29099: LD_INT 2
29101: PPUSH
29102: CALL_OW 322
// end ;
29106: PPOPN 3
29108: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29109: LD_EXP 61
29113: PUSH
29114: LD_EXP 104
29118: AND
29119: IFFALSE 29230
29121: GO 29123
29123: DISABLE
29124: LD_INT 0
29126: PPUSH
29127: PPUSH
29128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29129: LD_ADDR_VAR 0 3
29133: PUSH
29134: LD_INT 22
29136: PUSH
29137: LD_OWVAR 2
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 25
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PPUSH
29160: CALL_OW 69
29164: ST_TO_ADDR
// if not tmp then
29165: LD_VAR 0 3
29169: NOT
29170: IFFALSE 29174
// exit ;
29172: GO 29230
// un := tmp [ rand ( 1 , tmp ) ] ;
29174: LD_ADDR_VAR 0 2
29178: PUSH
29179: LD_VAR 0 3
29183: PUSH
29184: LD_INT 1
29186: PPUSH
29187: LD_VAR 0 3
29191: PPUSH
29192: CALL_OW 12
29196: ARRAY
29197: ST_TO_ADDR
// if Crawls ( un ) then
29198: LD_VAR 0 2
29202: PPUSH
29203: CALL_OW 318
29207: IFFALSE 29218
// ComWalk ( un ) ;
29209: LD_VAR 0 2
29213: PPUSH
29214: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29218: LD_VAR 0 2
29222: PPUSH
29223: LD_INT 8
29225: PPUSH
29226: CALL_OW 336
// end ;
29230: PPOPN 3
29232: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29233: LD_EXP 61
29237: PUSH
29238: LD_EXP 105
29242: AND
29243: IFFALSE 29387
29245: GO 29247
29247: DISABLE
29248: LD_INT 0
29250: PPUSH
29251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29252: LD_ADDR_VAR 0 2
29256: PUSH
29257: LD_INT 22
29259: PUSH
29260: LD_OWVAR 2
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 21
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 2
29281: PUSH
29282: LD_INT 34
29284: PUSH
29285: LD_INT 12
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 34
29294: PUSH
29295: LD_INT 51
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 34
29304: PUSH
29305: LD_INT 32
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: LIST
29322: PPUSH
29323: CALL_OW 69
29327: ST_TO_ADDR
// if not tmp then
29328: LD_VAR 0 2
29332: NOT
29333: IFFALSE 29337
// exit ;
29335: GO 29387
// for i in tmp do
29337: LD_ADDR_VAR 0 1
29341: PUSH
29342: LD_VAR 0 2
29346: PUSH
29347: FOR_IN
29348: IFFALSE 29385
// if GetCargo ( i , mat_artifact ) = 0 then
29350: LD_VAR 0 1
29354: PPUSH
29355: LD_INT 4
29357: PPUSH
29358: CALL_OW 289
29362: PUSH
29363: LD_INT 0
29365: EQUAL
29366: IFFALSE 29383
// SetCargo ( i , mat_siberit , 100 ) ;
29368: LD_VAR 0 1
29372: PPUSH
29373: LD_INT 3
29375: PPUSH
29376: LD_INT 100
29378: PPUSH
29379: CALL_OW 290
29383: GO 29347
29385: POP
29386: POP
// end ;
29387: PPOPN 2
29389: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29390: LD_EXP 61
29394: PUSH
29395: LD_EXP 106
29399: AND
29400: IFFALSE 29583
29402: GO 29404
29404: DISABLE
29405: LD_INT 0
29407: PPUSH
29408: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29409: LD_ADDR_VAR 0 2
29413: PUSH
29414: LD_INT 22
29416: PUSH
29417: LD_OWVAR 2
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PPUSH
29426: CALL_OW 69
29430: ST_TO_ADDR
// if not tmp then
29431: LD_VAR 0 2
29435: NOT
29436: IFFALSE 29440
// exit ;
29438: GO 29583
// for i := 1 to 2 do
29440: LD_ADDR_VAR 0 1
29444: PUSH
29445: DOUBLE
29446: LD_INT 1
29448: DEC
29449: ST_TO_ADDR
29450: LD_INT 2
29452: PUSH
29453: FOR_TO
29454: IFFALSE 29581
// begin uc_side := your_side ;
29456: LD_ADDR_OWVAR 20
29460: PUSH
29461: LD_OWVAR 2
29465: ST_TO_ADDR
// uc_nation := nation_american ;
29466: LD_ADDR_OWVAR 21
29470: PUSH
29471: LD_INT 1
29473: ST_TO_ADDR
// vc_chassis := us_morphling ;
29474: LD_ADDR_OWVAR 37
29478: PUSH
29479: LD_INT 5
29481: ST_TO_ADDR
// vc_engine := engine_siberite ;
29482: LD_ADDR_OWVAR 39
29486: PUSH
29487: LD_INT 3
29489: ST_TO_ADDR
// vc_control := control_computer ;
29490: LD_ADDR_OWVAR 38
29494: PUSH
29495: LD_INT 3
29497: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29498: LD_ADDR_OWVAR 40
29502: PUSH
29503: LD_INT 10
29505: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29506: LD_VAR 0 2
29510: PUSH
29511: LD_INT 1
29513: ARRAY
29514: PPUSH
29515: CALL_OW 310
29519: NOT
29520: IFFALSE 29567
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29522: CALL_OW 45
29526: PPUSH
29527: LD_VAR 0 2
29531: PUSH
29532: LD_INT 1
29534: ARRAY
29535: PPUSH
29536: CALL_OW 250
29540: PPUSH
29541: LD_VAR 0 2
29545: PUSH
29546: LD_INT 1
29548: ARRAY
29549: PPUSH
29550: CALL_OW 251
29554: PPUSH
29555: LD_INT 12
29557: PPUSH
29558: LD_INT 1
29560: PPUSH
29561: CALL_OW 50
29565: GO 29579
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29567: CALL_OW 45
29571: PPUSH
29572: LD_INT 1
29574: PPUSH
29575: CALL_OW 51
// end ;
29579: GO 29453
29581: POP
29582: POP
// end ;
29583: PPOPN 2
29585: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29586: LD_EXP 61
29590: PUSH
29591: LD_EXP 107
29595: AND
29596: IFFALSE 29818
29598: GO 29600
29600: DISABLE
29601: LD_INT 0
29603: PPUSH
29604: PPUSH
29605: PPUSH
29606: PPUSH
29607: PPUSH
29608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29609: LD_ADDR_VAR 0 6
29613: PUSH
29614: LD_INT 22
29616: PUSH
29617: LD_OWVAR 2
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 21
29628: PUSH
29629: LD_INT 1
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 3
29638: PUSH
29639: LD_INT 23
29641: PUSH
29642: LD_INT 0
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: LIST
29657: PPUSH
29658: CALL_OW 69
29662: ST_TO_ADDR
// if not tmp then
29663: LD_VAR 0 6
29667: NOT
29668: IFFALSE 29672
// exit ;
29670: GO 29818
// s1 := rand ( 1 , 4 ) ;
29672: LD_ADDR_VAR 0 2
29676: PUSH
29677: LD_INT 1
29679: PPUSH
29680: LD_INT 4
29682: PPUSH
29683: CALL_OW 12
29687: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29688: LD_ADDR_VAR 0 4
29692: PUSH
29693: LD_VAR 0 6
29697: PUSH
29698: LD_INT 1
29700: ARRAY
29701: PPUSH
29702: LD_VAR 0 2
29706: PPUSH
29707: CALL_OW 259
29711: ST_TO_ADDR
// if s1 = 1 then
29712: LD_VAR 0 2
29716: PUSH
29717: LD_INT 1
29719: EQUAL
29720: IFFALSE 29740
// s2 := rand ( 2 , 4 ) else
29722: LD_ADDR_VAR 0 3
29726: PUSH
29727: LD_INT 2
29729: PPUSH
29730: LD_INT 4
29732: PPUSH
29733: CALL_OW 12
29737: ST_TO_ADDR
29738: GO 29748
// s2 := 1 ;
29740: LD_ADDR_VAR 0 3
29744: PUSH
29745: LD_INT 1
29747: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29748: LD_ADDR_VAR 0 5
29752: PUSH
29753: LD_VAR 0 6
29757: PUSH
29758: LD_INT 1
29760: ARRAY
29761: PPUSH
29762: LD_VAR 0 3
29766: PPUSH
29767: CALL_OW 259
29771: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29772: LD_VAR 0 6
29776: PUSH
29777: LD_INT 1
29779: ARRAY
29780: PPUSH
29781: LD_VAR 0 2
29785: PPUSH
29786: LD_VAR 0 5
29790: PPUSH
29791: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29795: LD_VAR 0 6
29799: PUSH
29800: LD_INT 1
29802: ARRAY
29803: PPUSH
29804: LD_VAR 0 3
29808: PPUSH
29809: LD_VAR 0 4
29813: PPUSH
29814: CALL_OW 237
// end ;
29818: PPOPN 6
29820: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29821: LD_EXP 61
29825: PUSH
29826: LD_EXP 108
29830: AND
29831: IFFALSE 29910
29833: GO 29835
29835: DISABLE
29836: LD_INT 0
29838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29839: LD_ADDR_VAR 0 1
29843: PUSH
29844: LD_INT 22
29846: PUSH
29847: LD_OWVAR 2
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 30
29858: PUSH
29859: LD_INT 3
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PPUSH
29870: CALL_OW 69
29874: ST_TO_ADDR
// if not tmp then
29875: LD_VAR 0 1
29879: NOT
29880: IFFALSE 29884
// exit ;
29882: GO 29910
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29884: LD_VAR 0 1
29888: PUSH
29889: LD_INT 1
29891: PPUSH
29892: LD_VAR 0 1
29896: PPUSH
29897: CALL_OW 12
29901: ARRAY
29902: PPUSH
29903: LD_INT 1
29905: PPUSH
29906: CALL_OW 234
// end ;
29910: PPOPN 1
29912: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29913: LD_EXP 61
29917: PUSH
29918: LD_EXP 109
29922: AND
29923: IFFALSE 30035
29925: GO 29927
29927: DISABLE
29928: LD_INT 0
29930: PPUSH
29931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29932: LD_ADDR_VAR 0 2
29936: PUSH
29937: LD_INT 22
29939: PUSH
29940: LD_OWVAR 2
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: PUSH
29952: LD_INT 30
29954: PUSH
29955: LD_INT 27
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 30
29964: PUSH
29965: LD_INT 26
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 30
29974: PUSH
29975: LD_INT 28
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PPUSH
29992: CALL_OW 69
29996: ST_TO_ADDR
// if not tmp then
29997: LD_VAR 0 2
30001: NOT
30002: IFFALSE 30006
// exit ;
30004: GO 30035
// for i in tmp do
30006: LD_ADDR_VAR 0 1
30010: PUSH
30011: LD_VAR 0 2
30015: PUSH
30016: FOR_IN
30017: IFFALSE 30033
// SetLives ( i , 1 ) ;
30019: LD_VAR 0 1
30023: PPUSH
30024: LD_INT 1
30026: PPUSH
30027: CALL_OW 234
30031: GO 30016
30033: POP
30034: POP
// end ;
30035: PPOPN 2
30037: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30038: LD_EXP 61
30042: PUSH
30043: LD_EXP 110
30047: AND
30048: IFFALSE 30335
30050: GO 30052
30052: DISABLE
30053: LD_INT 0
30055: PPUSH
30056: PPUSH
30057: PPUSH
// begin i := rand ( 1 , 7 ) ;
30058: LD_ADDR_VAR 0 1
30062: PUSH
30063: LD_INT 1
30065: PPUSH
30066: LD_INT 7
30068: PPUSH
30069: CALL_OW 12
30073: ST_TO_ADDR
// case i of 1 :
30074: LD_VAR 0 1
30078: PUSH
30079: LD_INT 1
30081: DOUBLE
30082: EQUAL
30083: IFTRUE 30087
30085: GO 30097
30087: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30088: LD_STRING earthquake(getX(game), 0, 32)
30090: PPUSH
30091: CALL_OW 559
30095: GO 30335
30097: LD_INT 2
30099: DOUBLE
30100: EQUAL
30101: IFTRUE 30105
30103: GO 30119
30105: POP
// begin ToLua ( displayStucuk(); ) ;
30106: LD_STRING displayStucuk();
30108: PPUSH
30109: CALL_OW 559
// ResetFog ;
30113: CALL_OW 335
// end ; 3 :
30117: GO 30335
30119: LD_INT 3
30121: DOUBLE
30122: EQUAL
30123: IFTRUE 30127
30125: GO 30231
30127: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30128: LD_ADDR_VAR 0 2
30132: PUSH
30133: LD_INT 22
30135: PUSH
30136: LD_OWVAR 2
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 25
30147: PUSH
30148: LD_INT 1
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PPUSH
30159: CALL_OW 69
30163: ST_TO_ADDR
// if not tmp then
30164: LD_VAR 0 2
30168: NOT
30169: IFFALSE 30173
// exit ;
30171: GO 30335
// un := tmp [ rand ( 1 , tmp ) ] ;
30173: LD_ADDR_VAR 0 3
30177: PUSH
30178: LD_VAR 0 2
30182: PUSH
30183: LD_INT 1
30185: PPUSH
30186: LD_VAR 0 2
30190: PPUSH
30191: CALL_OW 12
30195: ARRAY
30196: ST_TO_ADDR
// if Crawls ( un ) then
30197: LD_VAR 0 3
30201: PPUSH
30202: CALL_OW 318
30206: IFFALSE 30217
// ComWalk ( un ) ;
30208: LD_VAR 0 3
30212: PPUSH
30213: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30217: LD_VAR 0 3
30221: PPUSH
30222: LD_INT 8
30224: PPUSH
30225: CALL_OW 336
// end ; 4 :
30229: GO 30335
30231: LD_INT 4
30233: DOUBLE
30234: EQUAL
30235: IFTRUE 30239
30237: GO 30313
30239: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30240: LD_ADDR_VAR 0 2
30244: PUSH
30245: LD_INT 22
30247: PUSH
30248: LD_OWVAR 2
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 30
30259: PUSH
30260: LD_INT 29
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PPUSH
30271: CALL_OW 69
30275: ST_TO_ADDR
// if not tmp then
30276: LD_VAR 0 2
30280: NOT
30281: IFFALSE 30285
// exit ;
30283: GO 30335
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30285: LD_VAR 0 2
30289: PUSH
30290: LD_INT 1
30292: ARRAY
30293: PPUSH
30294: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30298: LD_VAR 0 2
30302: PUSH
30303: LD_INT 1
30305: ARRAY
30306: PPUSH
30307: CALL_OW 65
// end ; 5 .. 7 :
30311: GO 30335
30313: LD_INT 5
30315: DOUBLE
30316: GREATEREQUAL
30317: IFFALSE 30325
30319: LD_INT 7
30321: DOUBLE
30322: LESSEQUAL
30323: IFTRUE 30327
30325: GO 30334
30327: POP
// StreamSibBomb ; end ;
30328: CALL 26572 0 0
30332: GO 30335
30334: POP
// end ;
30335: PPOPN 3
30337: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30338: LD_EXP 61
30342: PUSH
30343: LD_EXP 111
30347: AND
30348: IFFALSE 30504
30350: GO 30352
30352: DISABLE
30353: LD_INT 0
30355: PPUSH
30356: PPUSH
30357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30358: LD_ADDR_VAR 0 2
30362: PUSH
30363: LD_INT 81
30365: PUSH
30366: LD_OWVAR 2
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: LD_INT 21
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 21
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: LIST
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PPUSH
30407: CALL_OW 69
30411: ST_TO_ADDR
// if not tmp then
30412: LD_VAR 0 2
30416: NOT
30417: IFFALSE 30421
// exit ;
30419: GO 30504
// p := 0 ;
30421: LD_ADDR_VAR 0 3
30425: PUSH
30426: LD_INT 0
30428: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30429: LD_INT 35
30431: PPUSH
30432: CALL_OW 67
// p := p + 1 ;
30436: LD_ADDR_VAR 0 3
30440: PUSH
30441: LD_VAR 0 3
30445: PUSH
30446: LD_INT 1
30448: PLUS
30449: ST_TO_ADDR
// for i in tmp do
30450: LD_ADDR_VAR 0 1
30454: PUSH
30455: LD_VAR 0 2
30459: PUSH
30460: FOR_IN
30461: IFFALSE 30492
// if GetLives ( i ) < 1000 then
30463: LD_VAR 0 1
30467: PPUSH
30468: CALL_OW 256
30472: PUSH
30473: LD_INT 1000
30475: LESS
30476: IFFALSE 30490
// SetLives ( i , 1000 ) ;
30478: LD_VAR 0 1
30482: PPUSH
30483: LD_INT 1000
30485: PPUSH
30486: CALL_OW 234
30490: GO 30460
30492: POP
30493: POP
// until p > 20 ;
30494: LD_VAR 0 3
30498: PUSH
30499: LD_INT 20
30501: GREATER
30502: IFFALSE 30429
// end ;
30504: PPOPN 3
30506: END
// every 0 0$1 trigger StreamModeActive and sTime do
30507: LD_EXP 61
30511: PUSH
30512: LD_EXP 112
30516: AND
30517: IFFALSE 30552
30519: GO 30521
30521: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30522: LD_INT 28
30524: PPUSH
30525: LD_OWVAR 2
30529: PPUSH
30530: LD_INT 2
30532: PPUSH
30533: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30537: LD_INT 30
30539: PPUSH
30540: LD_OWVAR 2
30544: PPUSH
30545: LD_INT 2
30547: PPUSH
30548: CALL_OW 322
// end ;
30552: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30553: LD_EXP 61
30557: PUSH
30558: LD_EXP 113
30562: AND
30563: IFFALSE 30684
30565: GO 30567
30567: DISABLE
30568: LD_INT 0
30570: PPUSH
30571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30572: LD_ADDR_VAR 0 2
30576: PUSH
30577: LD_INT 22
30579: PUSH
30580: LD_OWVAR 2
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 21
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 3
30601: PUSH
30602: LD_INT 23
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: PPUSH
30621: CALL_OW 69
30625: ST_TO_ADDR
// if not tmp then
30626: LD_VAR 0 2
30630: NOT
30631: IFFALSE 30635
// exit ;
30633: GO 30684
// for i in tmp do
30635: LD_ADDR_VAR 0 1
30639: PUSH
30640: LD_VAR 0 2
30644: PUSH
30645: FOR_IN
30646: IFFALSE 30682
// begin if Crawls ( i ) then
30648: LD_VAR 0 1
30652: PPUSH
30653: CALL_OW 318
30657: IFFALSE 30668
// ComWalk ( i ) ;
30659: LD_VAR 0 1
30663: PPUSH
30664: CALL_OW 138
// SetClass ( i , 2 ) ;
30668: LD_VAR 0 1
30672: PPUSH
30673: LD_INT 2
30675: PPUSH
30676: CALL_OW 336
// end ;
30680: GO 30645
30682: POP
30683: POP
// end ;
30684: PPOPN 2
30686: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30687: LD_EXP 61
30691: PUSH
30692: LD_EXP 114
30696: AND
30697: IFFALSE 30985
30699: GO 30701
30701: DISABLE
30702: LD_INT 0
30704: PPUSH
30705: PPUSH
30706: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30707: LD_OWVAR 2
30711: PPUSH
30712: LD_INT 9
30714: PPUSH
30715: LD_INT 1
30717: PPUSH
30718: LD_INT 1
30720: PPUSH
30721: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30725: LD_INT 9
30727: PPUSH
30728: LD_OWVAR 2
30732: PPUSH
30733: CALL_OW 343
// uc_side := 9 ;
30737: LD_ADDR_OWVAR 20
30741: PUSH
30742: LD_INT 9
30744: ST_TO_ADDR
// uc_nation := 2 ;
30745: LD_ADDR_OWVAR 21
30749: PUSH
30750: LD_INT 2
30752: ST_TO_ADDR
// hc_name := Dark Warrior ;
30753: LD_ADDR_OWVAR 26
30757: PUSH
30758: LD_STRING Dark Warrior
30760: ST_TO_ADDR
// hc_gallery :=  ;
30761: LD_ADDR_OWVAR 33
30765: PUSH
30766: LD_STRING 
30768: ST_TO_ADDR
// hc_noskilllimit := true ;
30769: LD_ADDR_OWVAR 76
30773: PUSH
30774: LD_INT 1
30776: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30777: LD_ADDR_OWVAR 31
30781: PUSH
30782: LD_INT 30
30784: PUSH
30785: LD_INT 30
30787: PUSH
30788: LD_INT 30
30790: PUSH
30791: LD_INT 30
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: ST_TO_ADDR
// un := CreateHuman ;
30800: LD_ADDR_VAR 0 3
30804: PUSH
30805: CALL_OW 44
30809: ST_TO_ADDR
// hc_noskilllimit := false ;
30810: LD_ADDR_OWVAR 76
30814: PUSH
30815: LD_INT 0
30817: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30818: LD_VAR 0 3
30822: PPUSH
30823: LD_INT 1
30825: PPUSH
30826: CALL_OW 51
// ToLua ( playRanger() ) ;
30830: LD_STRING playRanger()
30832: PPUSH
30833: CALL_OW 559
// p := 0 ;
30837: LD_ADDR_VAR 0 2
30841: PUSH
30842: LD_INT 0
30844: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30845: LD_INT 35
30847: PPUSH
30848: CALL_OW 67
// p := p + 1 ;
30852: LD_ADDR_VAR 0 2
30856: PUSH
30857: LD_VAR 0 2
30861: PUSH
30862: LD_INT 1
30864: PLUS
30865: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30866: LD_VAR 0 3
30870: PPUSH
30871: CALL_OW 256
30875: PUSH
30876: LD_INT 1000
30878: LESS
30879: IFFALSE 30893
// SetLives ( un , 1000 ) ;
30881: LD_VAR 0 3
30885: PPUSH
30886: LD_INT 1000
30888: PPUSH
30889: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30893: LD_VAR 0 3
30897: PPUSH
30898: LD_INT 81
30900: PUSH
30901: LD_OWVAR 2
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 91
30912: PUSH
30913: LD_VAR 0 3
30917: PUSH
30918: LD_INT 30
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: LIST
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PPUSH
30930: CALL_OW 69
30934: PPUSH
30935: LD_VAR 0 3
30939: PPUSH
30940: CALL_OW 74
30944: PPUSH
30945: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30949: LD_VAR 0 2
30953: PUSH
30954: LD_INT 80
30956: GREATER
30957: PUSH
30958: LD_VAR 0 3
30962: PPUSH
30963: CALL_OW 301
30967: OR
30968: IFFALSE 30845
// if un then
30970: LD_VAR 0 3
30974: IFFALSE 30985
// RemoveUnit ( un ) ;
30976: LD_VAR 0 3
30980: PPUSH
30981: CALL_OW 64
// end ;
30985: PPOPN 3
30987: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30988: LD_EXP 115
30992: IFFALSE 31108
30994: GO 30996
30996: DISABLE
30997: LD_INT 0
30999: PPUSH
31000: PPUSH
31001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31002: LD_ADDR_VAR 0 2
31006: PUSH
31007: LD_INT 81
31009: PUSH
31010: LD_OWVAR 2
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 21
31021: PUSH
31022: LD_INT 1
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PPUSH
31033: CALL_OW 69
31037: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31038: LD_STRING playComputer()
31040: PPUSH
31041: CALL_OW 559
// if not tmp then
31045: LD_VAR 0 2
31049: NOT
31050: IFFALSE 31054
// exit ;
31052: GO 31108
// for i in tmp do
31054: LD_ADDR_VAR 0 1
31058: PUSH
31059: LD_VAR 0 2
31063: PUSH
31064: FOR_IN
31065: IFFALSE 31106
// for j := 1 to 4 do
31067: LD_ADDR_VAR 0 3
31071: PUSH
31072: DOUBLE
31073: LD_INT 1
31075: DEC
31076: ST_TO_ADDR
31077: LD_INT 4
31079: PUSH
31080: FOR_TO
31081: IFFALSE 31102
// SetSkill ( i , j , 10 ) ;
31083: LD_VAR 0 1
31087: PPUSH
31088: LD_VAR 0 3
31092: PPUSH
31093: LD_INT 10
31095: PPUSH
31096: CALL_OW 237
31100: GO 31080
31102: POP
31103: POP
31104: GO 31064
31106: POP
31107: POP
// end ;
31108: PPOPN 3
31110: END
// every 0 0$1 trigger s30 do var i , tmp ;
31111: LD_EXP 116
31115: IFFALSE 31184
31117: GO 31119
31119: DISABLE
31120: LD_INT 0
31122: PPUSH
31123: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31124: LD_ADDR_VAR 0 2
31128: PUSH
31129: LD_INT 22
31131: PUSH
31132: LD_OWVAR 2
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PPUSH
31141: CALL_OW 69
31145: ST_TO_ADDR
// if not tmp then
31146: LD_VAR 0 2
31150: NOT
31151: IFFALSE 31155
// exit ;
31153: GO 31184
// for i in tmp do
31155: LD_ADDR_VAR 0 1
31159: PUSH
31160: LD_VAR 0 2
31164: PUSH
31165: FOR_IN
31166: IFFALSE 31182
// SetLives ( i , 300 ) ;
31168: LD_VAR 0 1
31172: PPUSH
31173: LD_INT 300
31175: PPUSH
31176: CALL_OW 234
31180: GO 31165
31182: POP
31183: POP
// end ;
31184: PPOPN 2
31186: END
// every 0 0$1 trigger s60 do var i , tmp ;
31187: LD_EXP 117
31191: IFFALSE 31260
31193: GO 31195
31195: DISABLE
31196: LD_INT 0
31198: PPUSH
31199: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31200: LD_ADDR_VAR 0 2
31204: PUSH
31205: LD_INT 22
31207: PUSH
31208: LD_OWVAR 2
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PPUSH
31217: CALL_OW 69
31221: ST_TO_ADDR
// if not tmp then
31222: LD_VAR 0 2
31226: NOT
31227: IFFALSE 31231
// exit ;
31229: GO 31260
// for i in tmp do
31231: LD_ADDR_VAR 0 1
31235: PUSH
31236: LD_VAR 0 2
31240: PUSH
31241: FOR_IN
31242: IFFALSE 31258
// SetLives ( i , 600 ) ;
31244: LD_VAR 0 1
31248: PPUSH
31249: LD_INT 600
31251: PPUSH
31252: CALL_OW 234
31256: GO 31241
31258: POP
31259: POP
// end ;
31260: PPOPN 2
31262: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31263: LD_INT 0
31265: PPUSH
// case cmd of 301 :
31266: LD_VAR 0 1
31270: PUSH
31271: LD_INT 301
31273: DOUBLE
31274: EQUAL
31275: IFTRUE 31279
31277: GO 31311
31279: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31280: LD_VAR 0 6
31284: PPUSH
31285: LD_VAR 0 7
31289: PPUSH
31290: LD_VAR 0 8
31294: PPUSH
31295: LD_VAR 0 4
31299: PPUSH
31300: LD_VAR 0 5
31304: PPUSH
31305: CALL 32512 0 5
31309: GO 31432
31311: LD_INT 302
31313: DOUBLE
31314: EQUAL
31315: IFTRUE 31319
31317: GO 31356
31319: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31320: LD_VAR 0 6
31324: PPUSH
31325: LD_VAR 0 7
31329: PPUSH
31330: LD_VAR 0 8
31334: PPUSH
31335: LD_VAR 0 9
31339: PPUSH
31340: LD_VAR 0 4
31344: PPUSH
31345: LD_VAR 0 5
31349: PPUSH
31350: CALL 32603 0 6
31354: GO 31432
31356: LD_INT 303
31358: DOUBLE
31359: EQUAL
31360: IFTRUE 31364
31362: GO 31401
31364: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31365: LD_VAR 0 6
31369: PPUSH
31370: LD_VAR 0 7
31374: PPUSH
31375: LD_VAR 0 8
31379: PPUSH
31380: LD_VAR 0 9
31384: PPUSH
31385: LD_VAR 0 4
31389: PPUSH
31390: LD_VAR 0 5
31394: PPUSH
31395: CALL 31437 0 6
31399: GO 31432
31401: LD_INT 304
31403: DOUBLE
31404: EQUAL
31405: IFTRUE 31409
31407: GO 31431
31409: POP
// hHackTeleport ( unit , x , y ) ; end ;
31410: LD_VAR 0 2
31414: PPUSH
31415: LD_VAR 0 4
31419: PPUSH
31420: LD_VAR 0 5
31424: PPUSH
31425: CALL 33196 0 3
31429: GO 31432
31431: POP
// end ;
31432: LD_VAR 0 12
31436: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31437: LD_INT 0
31439: PPUSH
31440: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31441: LD_VAR 0 1
31445: PUSH
31446: LD_INT 1
31448: LESS
31449: PUSH
31450: LD_VAR 0 1
31454: PUSH
31455: LD_INT 3
31457: GREATER
31458: OR
31459: PUSH
31460: LD_VAR 0 5
31464: PPUSH
31465: LD_VAR 0 6
31469: PPUSH
31470: CALL_OW 428
31474: OR
31475: IFFALSE 31479
// exit ;
31477: GO 32199
// uc_side := your_side ;
31479: LD_ADDR_OWVAR 20
31483: PUSH
31484: LD_OWVAR 2
31488: ST_TO_ADDR
// uc_nation := nation ;
31489: LD_ADDR_OWVAR 21
31493: PUSH
31494: LD_VAR 0 1
31498: ST_TO_ADDR
// bc_level = 1 ;
31499: LD_ADDR_OWVAR 43
31503: PUSH
31504: LD_INT 1
31506: ST_TO_ADDR
// case btype of 1 :
31507: LD_VAR 0 2
31511: PUSH
31512: LD_INT 1
31514: DOUBLE
31515: EQUAL
31516: IFTRUE 31520
31518: GO 31531
31520: POP
// bc_type := b_depot ; 2 :
31521: LD_ADDR_OWVAR 42
31525: PUSH
31526: LD_INT 0
31528: ST_TO_ADDR
31529: GO 32143
31531: LD_INT 2
31533: DOUBLE
31534: EQUAL
31535: IFTRUE 31539
31537: GO 31550
31539: POP
// bc_type := b_warehouse ; 3 :
31540: LD_ADDR_OWVAR 42
31544: PUSH
31545: LD_INT 1
31547: ST_TO_ADDR
31548: GO 32143
31550: LD_INT 3
31552: DOUBLE
31553: EQUAL
31554: IFTRUE 31558
31556: GO 31569
31558: POP
// bc_type := b_lab ; 4 .. 9 :
31559: LD_ADDR_OWVAR 42
31563: PUSH
31564: LD_INT 6
31566: ST_TO_ADDR
31567: GO 32143
31569: LD_INT 4
31571: DOUBLE
31572: GREATEREQUAL
31573: IFFALSE 31581
31575: LD_INT 9
31577: DOUBLE
31578: LESSEQUAL
31579: IFTRUE 31583
31581: GO 31635
31583: POP
// begin bc_type := b_lab_half ;
31584: LD_ADDR_OWVAR 42
31588: PUSH
31589: LD_INT 7
31591: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31592: LD_ADDR_OWVAR 44
31596: PUSH
31597: LD_INT 10
31599: PUSH
31600: LD_INT 11
31602: PUSH
31603: LD_INT 12
31605: PUSH
31606: LD_INT 15
31608: PUSH
31609: LD_INT 14
31611: PUSH
31612: LD_INT 13
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: PUSH
31623: LD_VAR 0 2
31627: PUSH
31628: LD_INT 3
31630: MINUS
31631: ARRAY
31632: ST_TO_ADDR
// end ; 10 .. 13 :
31633: GO 32143
31635: LD_INT 10
31637: DOUBLE
31638: GREATEREQUAL
31639: IFFALSE 31647
31641: LD_INT 13
31643: DOUBLE
31644: LESSEQUAL
31645: IFTRUE 31649
31647: GO 31726
31649: POP
// begin bc_type := b_lab_full ;
31650: LD_ADDR_OWVAR 42
31654: PUSH
31655: LD_INT 8
31657: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31658: LD_ADDR_OWVAR 44
31662: PUSH
31663: LD_INT 10
31665: PUSH
31666: LD_INT 12
31668: PUSH
31669: LD_INT 14
31671: PUSH
31672: LD_INT 13
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: PUSH
31681: LD_VAR 0 2
31685: PUSH
31686: LD_INT 9
31688: MINUS
31689: ARRAY
31690: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31691: LD_ADDR_OWVAR 45
31695: PUSH
31696: LD_INT 11
31698: PUSH
31699: LD_INT 15
31701: PUSH
31702: LD_INT 12
31704: PUSH
31705: LD_INT 15
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: PUSH
31714: LD_VAR 0 2
31718: PUSH
31719: LD_INT 9
31721: MINUS
31722: ARRAY
31723: ST_TO_ADDR
// end ; 14 :
31724: GO 32143
31726: LD_INT 14
31728: DOUBLE
31729: EQUAL
31730: IFTRUE 31734
31732: GO 31745
31734: POP
// bc_type := b_workshop ; 15 :
31735: LD_ADDR_OWVAR 42
31739: PUSH
31740: LD_INT 2
31742: ST_TO_ADDR
31743: GO 32143
31745: LD_INT 15
31747: DOUBLE
31748: EQUAL
31749: IFTRUE 31753
31751: GO 31764
31753: POP
// bc_type := b_factory ; 16 :
31754: LD_ADDR_OWVAR 42
31758: PUSH
31759: LD_INT 3
31761: ST_TO_ADDR
31762: GO 32143
31764: LD_INT 16
31766: DOUBLE
31767: EQUAL
31768: IFTRUE 31772
31770: GO 31783
31772: POP
// bc_type := b_ext_gun ; 17 :
31773: LD_ADDR_OWVAR 42
31777: PUSH
31778: LD_INT 17
31780: ST_TO_ADDR
31781: GO 32143
31783: LD_INT 17
31785: DOUBLE
31786: EQUAL
31787: IFTRUE 31791
31789: GO 31819
31791: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31792: LD_ADDR_OWVAR 42
31796: PUSH
31797: LD_INT 19
31799: PUSH
31800: LD_INT 23
31802: PUSH
31803: LD_INT 19
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: LIST
31810: PUSH
31811: LD_VAR 0 1
31815: ARRAY
31816: ST_TO_ADDR
31817: GO 32143
31819: LD_INT 18
31821: DOUBLE
31822: EQUAL
31823: IFTRUE 31827
31825: GO 31838
31827: POP
// bc_type := b_ext_radar ; 19 :
31828: LD_ADDR_OWVAR 42
31832: PUSH
31833: LD_INT 20
31835: ST_TO_ADDR
31836: GO 32143
31838: LD_INT 19
31840: DOUBLE
31841: EQUAL
31842: IFTRUE 31846
31844: GO 31857
31846: POP
// bc_type := b_ext_radio ; 20 :
31847: LD_ADDR_OWVAR 42
31851: PUSH
31852: LD_INT 22
31854: ST_TO_ADDR
31855: GO 32143
31857: LD_INT 20
31859: DOUBLE
31860: EQUAL
31861: IFTRUE 31865
31863: GO 31876
31865: POP
// bc_type := b_ext_siberium ; 21 :
31866: LD_ADDR_OWVAR 42
31870: PUSH
31871: LD_INT 21
31873: ST_TO_ADDR
31874: GO 32143
31876: LD_INT 21
31878: DOUBLE
31879: EQUAL
31880: IFTRUE 31884
31882: GO 31895
31884: POP
// bc_type := b_ext_computer ; 22 :
31885: LD_ADDR_OWVAR 42
31889: PUSH
31890: LD_INT 24
31892: ST_TO_ADDR
31893: GO 32143
31895: LD_INT 22
31897: DOUBLE
31898: EQUAL
31899: IFTRUE 31903
31901: GO 31914
31903: POP
// bc_type := b_ext_track ; 23 :
31904: LD_ADDR_OWVAR 42
31908: PUSH
31909: LD_INT 16
31911: ST_TO_ADDR
31912: GO 32143
31914: LD_INT 23
31916: DOUBLE
31917: EQUAL
31918: IFTRUE 31922
31920: GO 31933
31922: POP
// bc_type := b_ext_laser ; 24 :
31923: LD_ADDR_OWVAR 42
31927: PUSH
31928: LD_INT 25
31930: ST_TO_ADDR
31931: GO 32143
31933: LD_INT 24
31935: DOUBLE
31936: EQUAL
31937: IFTRUE 31941
31939: GO 31952
31941: POP
// bc_type := b_control_tower ; 25 :
31942: LD_ADDR_OWVAR 42
31946: PUSH
31947: LD_INT 36
31949: ST_TO_ADDR
31950: GO 32143
31952: LD_INT 25
31954: DOUBLE
31955: EQUAL
31956: IFTRUE 31960
31958: GO 31971
31960: POP
// bc_type := b_breastwork ; 26 :
31961: LD_ADDR_OWVAR 42
31965: PUSH
31966: LD_INT 31
31968: ST_TO_ADDR
31969: GO 32143
31971: LD_INT 26
31973: DOUBLE
31974: EQUAL
31975: IFTRUE 31979
31977: GO 31990
31979: POP
// bc_type := b_bunker ; 27 :
31980: LD_ADDR_OWVAR 42
31984: PUSH
31985: LD_INT 32
31987: ST_TO_ADDR
31988: GO 32143
31990: LD_INT 27
31992: DOUBLE
31993: EQUAL
31994: IFTRUE 31998
31996: GO 32009
31998: POP
// bc_type := b_turret ; 28 :
31999: LD_ADDR_OWVAR 42
32003: PUSH
32004: LD_INT 33
32006: ST_TO_ADDR
32007: GO 32143
32009: LD_INT 28
32011: DOUBLE
32012: EQUAL
32013: IFTRUE 32017
32015: GO 32028
32017: POP
// bc_type := b_armoury ; 29 :
32018: LD_ADDR_OWVAR 42
32022: PUSH
32023: LD_INT 4
32025: ST_TO_ADDR
32026: GO 32143
32028: LD_INT 29
32030: DOUBLE
32031: EQUAL
32032: IFTRUE 32036
32034: GO 32047
32036: POP
// bc_type := b_barracks ; 30 :
32037: LD_ADDR_OWVAR 42
32041: PUSH
32042: LD_INT 5
32044: ST_TO_ADDR
32045: GO 32143
32047: LD_INT 30
32049: DOUBLE
32050: EQUAL
32051: IFTRUE 32055
32053: GO 32066
32055: POP
// bc_type := b_solar_power ; 31 :
32056: LD_ADDR_OWVAR 42
32060: PUSH
32061: LD_INT 27
32063: ST_TO_ADDR
32064: GO 32143
32066: LD_INT 31
32068: DOUBLE
32069: EQUAL
32070: IFTRUE 32074
32072: GO 32085
32074: POP
// bc_type := b_oil_power ; 32 :
32075: LD_ADDR_OWVAR 42
32079: PUSH
32080: LD_INT 26
32082: ST_TO_ADDR
32083: GO 32143
32085: LD_INT 32
32087: DOUBLE
32088: EQUAL
32089: IFTRUE 32093
32091: GO 32104
32093: POP
// bc_type := b_siberite_power ; 33 :
32094: LD_ADDR_OWVAR 42
32098: PUSH
32099: LD_INT 28
32101: ST_TO_ADDR
32102: GO 32143
32104: LD_INT 33
32106: DOUBLE
32107: EQUAL
32108: IFTRUE 32112
32110: GO 32123
32112: POP
// bc_type := b_oil_mine ; 34 :
32113: LD_ADDR_OWVAR 42
32117: PUSH
32118: LD_INT 29
32120: ST_TO_ADDR
32121: GO 32143
32123: LD_INT 34
32125: DOUBLE
32126: EQUAL
32127: IFTRUE 32131
32129: GO 32142
32131: POP
// bc_type := b_siberite_mine ; end ;
32132: LD_ADDR_OWVAR 42
32136: PUSH
32137: LD_INT 30
32139: ST_TO_ADDR
32140: GO 32143
32142: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32143: LD_ADDR_VAR 0 8
32147: PUSH
32148: LD_VAR 0 5
32152: PPUSH
32153: LD_VAR 0 6
32157: PPUSH
32158: LD_VAR 0 3
32162: PPUSH
32163: CALL_OW 47
32167: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32168: LD_OWVAR 42
32172: PUSH
32173: LD_INT 32
32175: PUSH
32176: LD_INT 33
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: IN
32183: IFFALSE 32199
// PlaceWeaponTurret ( b , weapon ) ;
32185: LD_VAR 0 8
32189: PPUSH
32190: LD_VAR 0 4
32194: PPUSH
32195: CALL_OW 431
// end ;
32199: LD_VAR 0 7
32203: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32204: LD_INT 0
32206: PPUSH
32207: PPUSH
32208: PPUSH
32209: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32210: LD_ADDR_VAR 0 4
32214: PUSH
32215: LD_INT 22
32217: PUSH
32218: LD_OWVAR 2
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: LD_INT 30
32232: PUSH
32233: LD_INT 0
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 30
32242: PUSH
32243: LD_INT 1
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PPUSH
32259: CALL_OW 69
32263: ST_TO_ADDR
// if not tmp then
32264: LD_VAR 0 4
32268: NOT
32269: IFFALSE 32273
// exit ;
32271: GO 32332
// for i in tmp do
32273: LD_ADDR_VAR 0 2
32277: PUSH
32278: LD_VAR 0 4
32282: PUSH
32283: FOR_IN
32284: IFFALSE 32330
// for j = 1 to 3 do
32286: LD_ADDR_VAR 0 3
32290: PUSH
32291: DOUBLE
32292: LD_INT 1
32294: DEC
32295: ST_TO_ADDR
32296: LD_INT 3
32298: PUSH
32299: FOR_TO
32300: IFFALSE 32326
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32302: LD_VAR 0 2
32306: PPUSH
32307: CALL_OW 274
32311: PPUSH
32312: LD_VAR 0 3
32316: PPUSH
32317: LD_INT 99999
32319: PPUSH
32320: CALL_OW 277
32324: GO 32299
32326: POP
32327: POP
32328: GO 32283
32330: POP
32331: POP
// end ;
32332: LD_VAR 0 1
32336: RET
// export function hHackSetLevel10 ; var i , j ; begin
32337: LD_INT 0
32339: PPUSH
32340: PPUSH
32341: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32342: LD_ADDR_VAR 0 2
32346: PUSH
32347: LD_INT 21
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PPUSH
32357: CALL_OW 69
32361: PUSH
32362: FOR_IN
32363: IFFALSE 32415
// if IsSelected ( i ) then
32365: LD_VAR 0 2
32369: PPUSH
32370: CALL_OW 306
32374: IFFALSE 32413
// begin for j := 1 to 4 do
32376: LD_ADDR_VAR 0 3
32380: PUSH
32381: DOUBLE
32382: LD_INT 1
32384: DEC
32385: ST_TO_ADDR
32386: LD_INT 4
32388: PUSH
32389: FOR_TO
32390: IFFALSE 32411
// SetSkill ( i , j , 10 ) ;
32392: LD_VAR 0 2
32396: PPUSH
32397: LD_VAR 0 3
32401: PPUSH
32402: LD_INT 10
32404: PPUSH
32405: CALL_OW 237
32409: GO 32389
32411: POP
32412: POP
// end ;
32413: GO 32362
32415: POP
32416: POP
// end ;
32417: LD_VAR 0 1
32421: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32422: LD_INT 0
32424: PPUSH
32425: PPUSH
32426: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32427: LD_ADDR_VAR 0 2
32431: PUSH
32432: LD_INT 22
32434: PUSH
32435: LD_OWVAR 2
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 21
32446: PUSH
32447: LD_INT 1
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PPUSH
32458: CALL_OW 69
32462: PUSH
32463: FOR_IN
32464: IFFALSE 32505
// begin for j := 1 to 4 do
32466: LD_ADDR_VAR 0 3
32470: PUSH
32471: DOUBLE
32472: LD_INT 1
32474: DEC
32475: ST_TO_ADDR
32476: LD_INT 4
32478: PUSH
32479: FOR_TO
32480: IFFALSE 32501
// SetSkill ( i , j , 10 ) ;
32482: LD_VAR 0 2
32486: PPUSH
32487: LD_VAR 0 3
32491: PPUSH
32492: LD_INT 10
32494: PPUSH
32495: CALL_OW 237
32499: GO 32479
32501: POP
32502: POP
// end ;
32503: GO 32463
32505: POP
32506: POP
// end ;
32507: LD_VAR 0 1
32511: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32512: LD_INT 0
32514: PPUSH
// uc_side := your_side ;
32515: LD_ADDR_OWVAR 20
32519: PUSH
32520: LD_OWVAR 2
32524: ST_TO_ADDR
// uc_nation := nation ;
32525: LD_ADDR_OWVAR 21
32529: PUSH
32530: LD_VAR 0 1
32534: ST_TO_ADDR
// InitHc ;
32535: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32539: LD_INT 0
32541: PPUSH
32542: LD_VAR 0 2
32546: PPUSH
32547: LD_VAR 0 3
32551: PPUSH
32552: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32556: LD_VAR 0 4
32560: PPUSH
32561: LD_VAR 0 5
32565: PPUSH
32566: CALL_OW 428
32570: PUSH
32571: LD_INT 0
32573: EQUAL
32574: IFFALSE 32598
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32576: CALL_OW 44
32580: PPUSH
32581: LD_VAR 0 4
32585: PPUSH
32586: LD_VAR 0 5
32590: PPUSH
32591: LD_INT 1
32593: PPUSH
32594: CALL_OW 48
// end ;
32598: LD_VAR 0 6
32602: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32603: LD_INT 0
32605: PPUSH
32606: PPUSH
// uc_side := your_side ;
32607: LD_ADDR_OWVAR 20
32611: PUSH
32612: LD_OWVAR 2
32616: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32617: LD_VAR 0 1
32621: PUSH
32622: LD_INT 1
32624: PUSH
32625: LD_INT 2
32627: PUSH
32628: LD_INT 3
32630: PUSH
32631: LD_INT 4
32633: PUSH
32634: LD_INT 5
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: IN
32644: IFFALSE 32656
// uc_nation := nation_american else
32646: LD_ADDR_OWVAR 21
32650: PUSH
32651: LD_INT 1
32653: ST_TO_ADDR
32654: GO 32699
// if chassis in [ 11 , 12 , 13 , 14 ] then
32656: LD_VAR 0 1
32660: PUSH
32661: LD_INT 11
32663: PUSH
32664: LD_INT 12
32666: PUSH
32667: LD_INT 13
32669: PUSH
32670: LD_INT 14
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: IN
32679: IFFALSE 32691
// uc_nation := nation_arabian else
32681: LD_ADDR_OWVAR 21
32685: PUSH
32686: LD_INT 2
32688: ST_TO_ADDR
32689: GO 32699
// uc_nation := nation_russian ;
32691: LD_ADDR_OWVAR 21
32695: PUSH
32696: LD_INT 3
32698: ST_TO_ADDR
// vc_chassis := chassis ;
32699: LD_ADDR_OWVAR 37
32703: PUSH
32704: LD_VAR 0 1
32708: ST_TO_ADDR
// vc_engine := engine ;
32709: LD_ADDR_OWVAR 39
32713: PUSH
32714: LD_VAR 0 2
32718: ST_TO_ADDR
// vc_control := control ;
32719: LD_ADDR_OWVAR 38
32723: PUSH
32724: LD_VAR 0 3
32728: ST_TO_ADDR
// vc_weapon := weapon ;
32729: LD_ADDR_OWVAR 40
32733: PUSH
32734: LD_VAR 0 4
32738: ST_TO_ADDR
// un := CreateVehicle ;
32739: LD_ADDR_VAR 0 8
32743: PUSH
32744: CALL_OW 45
32748: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32749: LD_VAR 0 8
32753: PPUSH
32754: LD_INT 0
32756: PPUSH
32757: LD_INT 5
32759: PPUSH
32760: CALL_OW 12
32764: PPUSH
32765: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32769: LD_VAR 0 8
32773: PPUSH
32774: LD_VAR 0 5
32778: PPUSH
32779: LD_VAR 0 6
32783: PPUSH
32784: LD_INT 1
32786: PPUSH
32787: CALL_OW 48
// end ;
32791: LD_VAR 0 7
32795: RET
// export hInvincible ; every 1 do
32796: GO 32798
32798: DISABLE
// hInvincible := [ ] ;
32799: LD_ADDR_EXP 118
32803: PUSH
32804: EMPTY
32805: ST_TO_ADDR
32806: END
// every 10 do var i ;
32807: GO 32809
32809: DISABLE
32810: LD_INT 0
32812: PPUSH
// begin enable ;
32813: ENABLE
// if not hInvincible then
32814: LD_EXP 118
32818: NOT
32819: IFFALSE 32823
// exit ;
32821: GO 32867
// for i in hInvincible do
32823: LD_ADDR_VAR 0 1
32827: PUSH
32828: LD_EXP 118
32832: PUSH
32833: FOR_IN
32834: IFFALSE 32865
// if GetLives ( i ) < 1000 then
32836: LD_VAR 0 1
32840: PPUSH
32841: CALL_OW 256
32845: PUSH
32846: LD_INT 1000
32848: LESS
32849: IFFALSE 32863
// SetLives ( i , 1000 ) ;
32851: LD_VAR 0 1
32855: PPUSH
32856: LD_INT 1000
32858: PPUSH
32859: CALL_OW 234
32863: GO 32833
32865: POP
32866: POP
// end ;
32867: PPOPN 1
32869: END
// export function hHackInvincible ; var i ; begin
32870: LD_INT 0
32872: PPUSH
32873: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32874: LD_ADDR_VAR 0 2
32878: PUSH
32879: LD_INT 2
32881: PUSH
32882: LD_INT 21
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 21
32894: PUSH
32895: LD_INT 2
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: LIST
32906: PPUSH
32907: CALL_OW 69
32911: PUSH
32912: FOR_IN
32913: IFFALSE 32974
// if IsSelected ( i ) then
32915: LD_VAR 0 2
32919: PPUSH
32920: CALL_OW 306
32924: IFFALSE 32972
// begin if i in hInvincible then
32926: LD_VAR 0 2
32930: PUSH
32931: LD_EXP 118
32935: IN
32936: IFFALSE 32956
// hInvincible := hInvincible diff i else
32938: LD_ADDR_EXP 118
32942: PUSH
32943: LD_EXP 118
32947: PUSH
32948: LD_VAR 0 2
32952: DIFF
32953: ST_TO_ADDR
32954: GO 32972
// hInvincible := hInvincible union i ;
32956: LD_ADDR_EXP 118
32960: PUSH
32961: LD_EXP 118
32965: PUSH
32966: LD_VAR 0 2
32970: UNION
32971: ST_TO_ADDR
// end ;
32972: GO 32912
32974: POP
32975: POP
// end ;
32976: LD_VAR 0 1
32980: RET
// export function hHackInvisible ; var i , j ; begin
32981: LD_INT 0
32983: PPUSH
32984: PPUSH
32985: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32986: LD_ADDR_VAR 0 2
32990: PUSH
32991: LD_INT 21
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PPUSH
33001: CALL_OW 69
33005: PUSH
33006: FOR_IN
33007: IFFALSE 33031
// if IsSelected ( i ) then
33009: LD_VAR 0 2
33013: PPUSH
33014: CALL_OW 306
33018: IFFALSE 33029
// ComForceInvisible ( i ) ;
33020: LD_VAR 0 2
33024: PPUSH
33025: CALL_OW 496
33029: GO 33006
33031: POP
33032: POP
// end ;
33033: LD_VAR 0 1
33037: RET
// export function hHackChangeYourSide ; begin
33038: LD_INT 0
33040: PPUSH
// if your_side = 8 then
33041: LD_OWVAR 2
33045: PUSH
33046: LD_INT 8
33048: EQUAL
33049: IFFALSE 33061
// your_side := 0 else
33051: LD_ADDR_OWVAR 2
33055: PUSH
33056: LD_INT 0
33058: ST_TO_ADDR
33059: GO 33075
// your_side := your_side + 1 ;
33061: LD_ADDR_OWVAR 2
33065: PUSH
33066: LD_OWVAR 2
33070: PUSH
33071: LD_INT 1
33073: PLUS
33074: ST_TO_ADDR
// end ;
33075: LD_VAR 0 1
33079: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33080: LD_INT 0
33082: PPUSH
33083: PPUSH
33084: PPUSH
// for i in all_units do
33085: LD_ADDR_VAR 0 2
33089: PUSH
33090: LD_OWVAR 3
33094: PUSH
33095: FOR_IN
33096: IFFALSE 33174
// if IsSelected ( i ) then
33098: LD_VAR 0 2
33102: PPUSH
33103: CALL_OW 306
33107: IFFALSE 33172
// begin j := GetSide ( i ) ;
33109: LD_ADDR_VAR 0 3
33113: PUSH
33114: LD_VAR 0 2
33118: PPUSH
33119: CALL_OW 255
33123: ST_TO_ADDR
// if j = 8 then
33124: LD_VAR 0 3
33128: PUSH
33129: LD_INT 8
33131: EQUAL
33132: IFFALSE 33144
// j := 0 else
33134: LD_ADDR_VAR 0 3
33138: PUSH
33139: LD_INT 0
33141: ST_TO_ADDR
33142: GO 33158
// j := j + 1 ;
33144: LD_ADDR_VAR 0 3
33148: PUSH
33149: LD_VAR 0 3
33153: PUSH
33154: LD_INT 1
33156: PLUS
33157: ST_TO_ADDR
// SetSide ( i , j ) ;
33158: LD_VAR 0 2
33162: PPUSH
33163: LD_VAR 0 3
33167: PPUSH
33168: CALL_OW 235
// end ;
33172: GO 33095
33174: POP
33175: POP
// end ;
33176: LD_VAR 0 1
33180: RET
// export function hHackFog ; begin
33181: LD_INT 0
33183: PPUSH
// FogOff ( true ) ;
33184: LD_INT 1
33186: PPUSH
33187: CALL_OW 344
// end ;
33191: LD_VAR 0 1
33195: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33196: LD_INT 0
33198: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33199: LD_VAR 0 1
33203: PPUSH
33204: LD_VAR 0 2
33208: PPUSH
33209: LD_VAR 0 3
33213: PPUSH
33214: LD_INT 1
33216: PPUSH
33217: LD_INT 1
33219: PPUSH
33220: CALL_OW 483
// CenterOnXY ( x , y ) ;
33224: LD_VAR 0 2
33228: PPUSH
33229: LD_VAR 0 3
33233: PPUSH
33234: CALL_OW 84
// end ;
33238: LD_VAR 0 4
33242: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33243: LD_INT 0
33245: PPUSH
33246: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33247: LD_VAR 0 1
33251: NOT
33252: PUSH
33253: LD_VAR 0 2
33257: PPUSH
33258: LD_VAR 0 3
33262: PPUSH
33263: CALL_OW 488
33267: NOT
33268: OR
33269: PUSH
33270: LD_VAR 0 1
33274: PPUSH
33275: CALL_OW 266
33279: PUSH
33280: LD_INT 3
33282: NONEQUAL
33283: PUSH
33284: LD_VAR 0 1
33288: PPUSH
33289: CALL_OW 247
33293: PUSH
33294: LD_INT 1
33296: EQUAL
33297: NOT
33298: AND
33299: OR
33300: IFFALSE 33304
// exit ;
33302: GO 33453
// if GetType ( factory ) = unit_human then
33304: LD_VAR 0 1
33308: PPUSH
33309: CALL_OW 247
33313: PUSH
33314: LD_INT 1
33316: EQUAL
33317: IFFALSE 33334
// factory := IsInUnit ( factory ) ;
33319: LD_ADDR_VAR 0 1
33323: PUSH
33324: LD_VAR 0 1
33328: PPUSH
33329: CALL_OW 310
33333: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33334: LD_VAR 0 1
33338: PPUSH
33339: CALL_OW 266
33343: PUSH
33344: LD_INT 3
33346: NONEQUAL
33347: IFFALSE 33351
// exit ;
33349: GO 33453
// if HexInfo ( x , y ) = factory then
33351: LD_VAR 0 2
33355: PPUSH
33356: LD_VAR 0 3
33360: PPUSH
33361: CALL_OW 428
33365: PUSH
33366: LD_VAR 0 1
33370: EQUAL
33371: IFFALSE 33398
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33373: LD_ADDR_EXP 119
33377: PUSH
33378: LD_EXP 119
33382: PPUSH
33383: LD_VAR 0 1
33387: PPUSH
33388: LD_INT 0
33390: PPUSH
33391: CALL_OW 1
33395: ST_TO_ADDR
33396: GO 33449
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33398: LD_ADDR_EXP 119
33402: PUSH
33403: LD_EXP 119
33407: PPUSH
33408: LD_VAR 0 1
33412: PPUSH
33413: LD_VAR 0 1
33417: PPUSH
33418: CALL_OW 255
33422: PUSH
33423: LD_VAR 0 1
33427: PUSH
33428: LD_VAR 0 2
33432: PUSH
33433: LD_VAR 0 3
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: PPUSH
33444: CALL_OW 1
33448: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33449: CALL 33458 0 0
// end ;
33453: LD_VAR 0 4
33457: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33458: LD_INT 0
33460: PPUSH
33461: PPUSH
33462: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33463: LD_STRING resetFactoryWaypoint();
33465: PPUSH
33466: CALL_OW 559
// if factoryWaypoints then
33470: LD_EXP 119
33474: IFFALSE 33600
// begin list := PrepareArray ( factoryWaypoints ) ;
33476: LD_ADDR_VAR 0 3
33480: PUSH
33481: LD_EXP 119
33485: PPUSH
33486: CALL 80032 0 1
33490: ST_TO_ADDR
// for i := 1 to list do
33491: LD_ADDR_VAR 0 2
33495: PUSH
33496: DOUBLE
33497: LD_INT 1
33499: DEC
33500: ST_TO_ADDR
33501: LD_VAR 0 3
33505: PUSH
33506: FOR_TO
33507: IFFALSE 33598
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33509: LD_STRING setFactoryWaypointXY(
33511: PUSH
33512: LD_VAR 0 3
33516: PUSH
33517: LD_VAR 0 2
33521: ARRAY
33522: PUSH
33523: LD_INT 1
33525: ARRAY
33526: STR
33527: PUSH
33528: LD_STRING ,
33530: STR
33531: PUSH
33532: LD_VAR 0 3
33536: PUSH
33537: LD_VAR 0 2
33541: ARRAY
33542: PUSH
33543: LD_INT 2
33545: ARRAY
33546: STR
33547: PUSH
33548: LD_STRING ,
33550: STR
33551: PUSH
33552: LD_VAR 0 3
33556: PUSH
33557: LD_VAR 0 2
33561: ARRAY
33562: PUSH
33563: LD_INT 3
33565: ARRAY
33566: STR
33567: PUSH
33568: LD_STRING ,
33570: STR
33571: PUSH
33572: LD_VAR 0 3
33576: PUSH
33577: LD_VAR 0 2
33581: ARRAY
33582: PUSH
33583: LD_INT 4
33585: ARRAY
33586: STR
33587: PUSH
33588: LD_STRING )
33590: STR
33591: PPUSH
33592: CALL_OW 559
33596: GO 33506
33598: POP
33599: POP
// end ; end ;
33600: LD_VAR 0 1
33604: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33605: LD_INT 0
33607: PPUSH
// if HexInfo ( x , y ) = warehouse then
33608: LD_VAR 0 2
33612: PPUSH
33613: LD_VAR 0 3
33617: PPUSH
33618: CALL_OW 428
33622: PUSH
33623: LD_VAR 0 1
33627: EQUAL
33628: IFFALSE 33655
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33630: LD_ADDR_EXP 120
33634: PUSH
33635: LD_EXP 120
33639: PPUSH
33640: LD_VAR 0 1
33644: PPUSH
33645: LD_INT 0
33647: PPUSH
33648: CALL_OW 1
33652: ST_TO_ADDR
33653: GO 33706
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33655: LD_ADDR_EXP 120
33659: PUSH
33660: LD_EXP 120
33664: PPUSH
33665: LD_VAR 0 1
33669: PPUSH
33670: LD_VAR 0 1
33674: PPUSH
33675: CALL_OW 255
33679: PUSH
33680: LD_VAR 0 1
33684: PUSH
33685: LD_VAR 0 2
33689: PUSH
33690: LD_VAR 0 3
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: PPUSH
33701: CALL_OW 1
33705: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33706: CALL 33715 0 0
// end ;
33710: LD_VAR 0 4
33714: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33715: LD_INT 0
33717: PPUSH
33718: PPUSH
33719: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33720: LD_STRING resetWarehouseGatheringPoints();
33722: PPUSH
33723: CALL_OW 559
// if warehouseGatheringPoints then
33727: LD_EXP 120
33731: IFFALSE 33857
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33733: LD_ADDR_VAR 0 3
33737: PUSH
33738: LD_EXP 120
33742: PPUSH
33743: CALL 80032 0 1
33747: ST_TO_ADDR
// for i := 1 to list do
33748: LD_ADDR_VAR 0 2
33752: PUSH
33753: DOUBLE
33754: LD_INT 1
33756: DEC
33757: ST_TO_ADDR
33758: LD_VAR 0 3
33762: PUSH
33763: FOR_TO
33764: IFFALSE 33855
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33766: LD_STRING setWarehouseGatheringPointXY(
33768: PUSH
33769: LD_VAR 0 3
33773: PUSH
33774: LD_VAR 0 2
33778: ARRAY
33779: PUSH
33780: LD_INT 1
33782: ARRAY
33783: STR
33784: PUSH
33785: LD_STRING ,
33787: STR
33788: PUSH
33789: LD_VAR 0 3
33793: PUSH
33794: LD_VAR 0 2
33798: ARRAY
33799: PUSH
33800: LD_INT 2
33802: ARRAY
33803: STR
33804: PUSH
33805: LD_STRING ,
33807: STR
33808: PUSH
33809: LD_VAR 0 3
33813: PUSH
33814: LD_VAR 0 2
33818: ARRAY
33819: PUSH
33820: LD_INT 3
33822: ARRAY
33823: STR
33824: PUSH
33825: LD_STRING ,
33827: STR
33828: PUSH
33829: LD_VAR 0 3
33833: PUSH
33834: LD_VAR 0 2
33838: ARRAY
33839: PUSH
33840: LD_INT 4
33842: ARRAY
33843: STR
33844: PUSH
33845: LD_STRING )
33847: STR
33848: PPUSH
33849: CALL_OW 559
33853: GO 33763
33855: POP
33856: POP
// end ; end ;
33857: LD_VAR 0 1
33861: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33862: LD_EXP 120
33866: IFFALSE 34553
33868: GO 33870
33870: DISABLE
33871: LD_INT 0
33873: PPUSH
33874: PPUSH
33875: PPUSH
33876: PPUSH
33877: PPUSH
33878: PPUSH
33879: PPUSH
33880: PPUSH
33881: PPUSH
// begin enable ;
33882: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33883: LD_ADDR_VAR 0 3
33887: PUSH
33888: LD_EXP 120
33892: PPUSH
33893: CALL 80032 0 1
33897: ST_TO_ADDR
// if not list then
33898: LD_VAR 0 3
33902: NOT
33903: IFFALSE 33907
// exit ;
33905: GO 34553
// for i := 1 to list do
33907: LD_ADDR_VAR 0 1
33911: PUSH
33912: DOUBLE
33913: LD_INT 1
33915: DEC
33916: ST_TO_ADDR
33917: LD_VAR 0 3
33921: PUSH
33922: FOR_TO
33923: IFFALSE 34551
// begin depot := list [ i ] [ 2 ] ;
33925: LD_ADDR_VAR 0 8
33929: PUSH
33930: LD_VAR 0 3
33934: PUSH
33935: LD_VAR 0 1
33939: ARRAY
33940: PUSH
33941: LD_INT 2
33943: ARRAY
33944: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33945: LD_ADDR_VAR 0 5
33949: PUSH
33950: LD_VAR 0 3
33954: PUSH
33955: LD_VAR 0 1
33959: ARRAY
33960: PUSH
33961: LD_INT 1
33963: ARRAY
33964: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33965: LD_VAR 0 8
33969: PPUSH
33970: CALL_OW 301
33974: PUSH
33975: LD_VAR 0 5
33979: PUSH
33980: LD_VAR 0 8
33984: PPUSH
33985: CALL_OW 255
33989: NONEQUAL
33990: OR
33991: IFFALSE 34020
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33993: LD_ADDR_EXP 120
33997: PUSH
33998: LD_EXP 120
34002: PPUSH
34003: LD_VAR 0 8
34007: PPUSH
34008: LD_INT 0
34010: PPUSH
34011: CALL_OW 1
34015: ST_TO_ADDR
// exit ;
34016: POP
34017: POP
34018: GO 34553
// end ; x := list [ i ] [ 3 ] ;
34020: LD_ADDR_VAR 0 6
34024: PUSH
34025: LD_VAR 0 3
34029: PUSH
34030: LD_VAR 0 1
34034: ARRAY
34035: PUSH
34036: LD_INT 3
34038: ARRAY
34039: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34040: LD_ADDR_VAR 0 7
34044: PUSH
34045: LD_VAR 0 3
34049: PUSH
34050: LD_VAR 0 1
34054: ARRAY
34055: PUSH
34056: LD_INT 4
34058: ARRAY
34059: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34060: LD_ADDR_VAR 0 9
34064: PUSH
34065: LD_VAR 0 6
34069: PPUSH
34070: LD_VAR 0 7
34074: PPUSH
34075: LD_INT 16
34077: PPUSH
34078: CALL 78616 0 3
34082: ST_TO_ADDR
// if not cratesNearbyPoint then
34083: LD_VAR 0 9
34087: NOT
34088: IFFALSE 34094
// exit ;
34090: POP
34091: POP
34092: GO 34553
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34094: LD_ADDR_VAR 0 4
34098: PUSH
34099: LD_INT 22
34101: PUSH
34102: LD_VAR 0 5
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 3
34113: PUSH
34114: LD_INT 60
34116: PUSH
34117: EMPTY
34118: LIST
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 91
34126: PUSH
34127: LD_VAR 0 8
34131: PUSH
34132: LD_INT 6
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 2
34142: PUSH
34143: LD_INT 25
34145: PUSH
34146: LD_INT 2
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 25
34155: PUSH
34156: LD_INT 16
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: LIST
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: PPUSH
34174: CALL_OW 69
34178: PUSH
34179: LD_VAR 0 8
34183: PPUSH
34184: CALL_OW 313
34188: PPUSH
34189: LD_INT 3
34191: PUSH
34192: LD_INT 60
34194: PUSH
34195: EMPTY
34196: LIST
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 2
34204: PUSH
34205: LD_INT 25
34207: PUSH
34208: LD_INT 2
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 25
34217: PUSH
34218: LD_INT 16
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: LIST
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PPUSH
34234: CALL_OW 72
34238: UNION
34239: ST_TO_ADDR
// if tmp then
34240: LD_VAR 0 4
34244: IFFALSE 34324
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34246: LD_ADDR_VAR 0 4
34250: PUSH
34251: LD_VAR 0 4
34255: PPUSH
34256: LD_INT 3
34258: PPUSH
34259: CALL 76583 0 2
34263: ST_TO_ADDR
// for j in tmp do
34264: LD_ADDR_VAR 0 2
34268: PUSH
34269: LD_VAR 0 4
34273: PUSH
34274: FOR_IN
34275: IFFALSE 34318
// begin if IsInUnit ( j ) then
34277: LD_VAR 0 2
34281: PPUSH
34282: CALL_OW 310
34286: IFFALSE 34297
// ComExit ( j ) ;
34288: LD_VAR 0 2
34292: PPUSH
34293: CALL 76666 0 1
// AddComCollect ( j , x , y ) ;
34297: LD_VAR 0 2
34301: PPUSH
34302: LD_VAR 0 6
34306: PPUSH
34307: LD_VAR 0 7
34311: PPUSH
34312: CALL_OW 177
// end ;
34316: GO 34274
34318: POP
34319: POP
// exit ;
34320: POP
34321: POP
34322: GO 34553
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34324: LD_ADDR_VAR 0 4
34328: PUSH
34329: LD_INT 22
34331: PUSH
34332: LD_VAR 0 5
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 91
34343: PUSH
34344: LD_VAR 0 8
34348: PUSH
34349: LD_INT 8
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 2
34359: PUSH
34360: LD_INT 34
34362: PUSH
34363: LD_INT 12
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 34
34372: PUSH
34373: LD_INT 51
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 34
34382: PUSH
34383: LD_INT 32
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 34
34392: PUSH
34393: LD_EXP 44
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: PPUSH
34414: CALL_OW 69
34418: ST_TO_ADDR
// if tmp then
34419: LD_VAR 0 4
34423: IFFALSE 34549
// begin for j in tmp do
34425: LD_ADDR_VAR 0 2
34429: PUSH
34430: LD_VAR 0 4
34434: PUSH
34435: FOR_IN
34436: IFFALSE 34547
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34438: LD_VAR 0 2
34442: PPUSH
34443: CALL_OW 262
34447: PUSH
34448: LD_INT 3
34450: EQUAL
34451: PUSH
34452: LD_VAR 0 2
34456: PPUSH
34457: CALL_OW 261
34461: PUSH
34462: LD_INT 20
34464: GREATER
34465: OR
34466: PUSH
34467: LD_VAR 0 2
34471: PPUSH
34472: CALL_OW 314
34476: NOT
34477: AND
34478: PUSH
34479: LD_VAR 0 2
34483: PPUSH
34484: CALL_OW 263
34488: PUSH
34489: LD_INT 1
34491: NONEQUAL
34492: PUSH
34493: LD_VAR 0 2
34497: PPUSH
34498: CALL_OW 311
34502: OR
34503: AND
34504: IFFALSE 34545
// begin ComCollect ( j , x , y ) ;
34506: LD_VAR 0 2
34510: PPUSH
34511: LD_VAR 0 6
34515: PPUSH
34516: LD_VAR 0 7
34520: PPUSH
34521: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34525: LD_VAR 0 2
34529: PPUSH
34530: LD_VAR 0 8
34534: PPUSH
34535: CALL_OW 172
// exit ;
34539: POP
34540: POP
34541: POP
34542: POP
34543: GO 34553
// end ;
34545: GO 34435
34547: POP
34548: POP
// end ; end ;
34549: GO 33922
34551: POP
34552: POP
// end ; end_of_file
34553: PPOPN 9
34555: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34556: LD_INT 0
34558: PPUSH
34559: PPUSH
34560: PPUSH
34561: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34562: LD_VAR 0 1
34566: PPUSH
34567: CALL_OW 264
34571: PUSH
34572: LD_EXP 47
34576: EQUAL
34577: IFFALSE 34649
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34579: LD_INT 68
34581: PPUSH
34582: LD_VAR 0 1
34586: PPUSH
34587: CALL_OW 255
34591: PPUSH
34592: CALL_OW 321
34596: PUSH
34597: LD_INT 2
34599: EQUAL
34600: IFFALSE 34612
// eff := 70 else
34602: LD_ADDR_VAR 0 4
34606: PUSH
34607: LD_INT 70
34609: ST_TO_ADDR
34610: GO 34620
// eff := 30 ;
34612: LD_ADDR_VAR 0 4
34616: PUSH
34617: LD_INT 30
34619: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34620: LD_VAR 0 1
34624: PPUSH
34625: CALL_OW 250
34629: PPUSH
34630: LD_VAR 0 1
34634: PPUSH
34635: CALL_OW 251
34639: PPUSH
34640: LD_VAR 0 4
34644: PPUSH
34645: CALL_OW 495
// end ; end ;
34649: LD_VAR 0 2
34653: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34654: LD_INT 0
34656: PPUSH
// end ;
34657: LD_VAR 0 4
34661: RET
// export function SOS_Command ( cmd ) ; begin
34662: LD_INT 0
34664: PPUSH
// end ;
34665: LD_VAR 0 2
34669: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34670: LD_INT 0
34672: PPUSH
// end ;
34673: LD_VAR 0 6
34677: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34678: LD_INT 0
34680: PPUSH
34681: PPUSH
// if not vehicle or not factory then
34682: LD_VAR 0 1
34686: NOT
34687: PUSH
34688: LD_VAR 0 2
34692: NOT
34693: OR
34694: IFFALSE 34698
// exit ;
34696: GO 34929
// if factoryWaypoints >= factory then
34698: LD_EXP 119
34702: PUSH
34703: LD_VAR 0 2
34707: GREATEREQUAL
34708: IFFALSE 34929
// if factoryWaypoints [ factory ] then
34710: LD_EXP 119
34714: PUSH
34715: LD_VAR 0 2
34719: ARRAY
34720: IFFALSE 34929
// begin if GetControl ( vehicle ) = control_manual then
34722: LD_VAR 0 1
34726: PPUSH
34727: CALL_OW 263
34731: PUSH
34732: LD_INT 1
34734: EQUAL
34735: IFFALSE 34816
// begin driver := IsDrivenBy ( vehicle ) ;
34737: LD_ADDR_VAR 0 4
34741: PUSH
34742: LD_VAR 0 1
34746: PPUSH
34747: CALL_OW 311
34751: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34752: LD_VAR 0 4
34756: PPUSH
34757: LD_EXP 119
34761: PUSH
34762: LD_VAR 0 2
34766: ARRAY
34767: PUSH
34768: LD_INT 3
34770: ARRAY
34771: PPUSH
34772: LD_EXP 119
34776: PUSH
34777: LD_VAR 0 2
34781: ARRAY
34782: PUSH
34783: LD_INT 4
34785: ARRAY
34786: PPUSH
34787: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34791: LD_VAR 0 4
34795: PPUSH
34796: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34800: LD_VAR 0 4
34804: PPUSH
34805: LD_VAR 0 2
34809: PPUSH
34810: CALL_OW 180
// end else
34814: GO 34929
// if GetControl ( vehicle ) = control_remote then
34816: LD_VAR 0 1
34820: PPUSH
34821: CALL_OW 263
34825: PUSH
34826: LD_INT 2
34828: EQUAL
34829: IFFALSE 34890
// begin wait ( 0 0$2 ) ;
34831: LD_INT 70
34833: PPUSH
34834: CALL_OW 67
// if Connect ( vehicle ) then
34838: LD_VAR 0 1
34842: PPUSH
34843: CALL 46977 0 1
34847: IFFALSE 34888
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34849: LD_VAR 0 1
34853: PPUSH
34854: LD_EXP 119
34858: PUSH
34859: LD_VAR 0 2
34863: ARRAY
34864: PUSH
34865: LD_INT 3
34867: ARRAY
34868: PPUSH
34869: LD_EXP 119
34873: PUSH
34874: LD_VAR 0 2
34878: ARRAY
34879: PUSH
34880: LD_INT 4
34882: ARRAY
34883: PPUSH
34884: CALL_OW 171
// end else
34888: GO 34929
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34890: LD_VAR 0 1
34894: PPUSH
34895: LD_EXP 119
34899: PUSH
34900: LD_VAR 0 2
34904: ARRAY
34905: PUSH
34906: LD_INT 3
34908: ARRAY
34909: PPUSH
34910: LD_EXP 119
34914: PUSH
34915: LD_VAR 0 2
34919: ARRAY
34920: PUSH
34921: LD_INT 4
34923: ARRAY
34924: PPUSH
34925: CALL_OW 171
// end ; end ;
34929: LD_VAR 0 3
34933: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34934: LD_INT 0
34936: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34937: LD_VAR 0 1
34941: PUSH
34942: LD_INT 250
34944: EQUAL
34945: PUSH
34946: LD_VAR 0 2
34950: PPUSH
34951: CALL_OW 264
34955: PUSH
34956: LD_EXP 50
34960: EQUAL
34961: AND
34962: IFFALSE 34983
// MinerPlaceMine ( unit , x , y ) ;
34964: LD_VAR 0 2
34968: PPUSH
34969: LD_VAR 0 4
34973: PPUSH
34974: LD_VAR 0 5
34978: PPUSH
34979: CALL 37382 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34983: LD_VAR 0 1
34987: PUSH
34988: LD_INT 251
34990: EQUAL
34991: PUSH
34992: LD_VAR 0 2
34996: PPUSH
34997: CALL_OW 264
35001: PUSH
35002: LD_EXP 50
35006: EQUAL
35007: AND
35008: IFFALSE 35029
// MinerDetonateMine ( unit , x , y ) ;
35010: LD_VAR 0 2
35014: PPUSH
35015: LD_VAR 0 4
35019: PPUSH
35020: LD_VAR 0 5
35024: PPUSH
35025: CALL 37659 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35029: LD_VAR 0 1
35033: PUSH
35034: LD_INT 252
35036: EQUAL
35037: PUSH
35038: LD_VAR 0 2
35042: PPUSH
35043: CALL_OW 264
35047: PUSH
35048: LD_EXP 50
35052: EQUAL
35053: AND
35054: IFFALSE 35075
// MinerCreateMinefield ( unit , x , y ) ;
35056: LD_VAR 0 2
35060: PPUSH
35061: LD_VAR 0 4
35065: PPUSH
35066: LD_VAR 0 5
35070: PPUSH
35071: CALL 38076 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35075: LD_VAR 0 1
35079: PUSH
35080: LD_INT 253
35082: EQUAL
35083: PUSH
35084: LD_VAR 0 2
35088: PPUSH
35089: CALL_OW 257
35093: PUSH
35094: LD_INT 5
35096: EQUAL
35097: AND
35098: IFFALSE 35119
// ComBinocular ( unit , x , y ) ;
35100: LD_VAR 0 2
35104: PPUSH
35105: LD_VAR 0 4
35109: PPUSH
35110: LD_VAR 0 5
35114: PPUSH
35115: CALL 38447 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35119: LD_VAR 0 1
35123: PUSH
35124: LD_INT 254
35126: EQUAL
35127: PUSH
35128: LD_VAR 0 2
35132: PPUSH
35133: CALL_OW 264
35137: PUSH
35138: LD_EXP 45
35142: EQUAL
35143: AND
35144: PUSH
35145: LD_VAR 0 3
35149: PPUSH
35150: CALL_OW 263
35154: PUSH
35155: LD_INT 3
35157: EQUAL
35158: AND
35159: IFFALSE 35175
// HackDestroyVehicle ( unit , selectedUnit ) ;
35161: LD_VAR 0 2
35165: PPUSH
35166: LD_VAR 0 3
35170: PPUSH
35171: CALL 36742 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35175: LD_VAR 0 1
35179: PUSH
35180: LD_INT 255
35182: EQUAL
35183: PUSH
35184: LD_VAR 0 2
35188: PPUSH
35189: CALL_OW 264
35193: PUSH
35194: LD_INT 14
35196: PUSH
35197: LD_INT 53
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: IN
35204: AND
35205: PUSH
35206: LD_VAR 0 4
35210: PPUSH
35211: LD_VAR 0 5
35215: PPUSH
35216: CALL_OW 488
35220: AND
35221: IFFALSE 35245
// CutTreeXYR ( unit , x , y , 12 ) ;
35223: LD_VAR 0 2
35227: PPUSH
35228: LD_VAR 0 4
35232: PPUSH
35233: LD_VAR 0 5
35237: PPUSH
35238: LD_INT 12
35240: PPUSH
35241: CALL 35308 0 4
// if cmd = 256 then
35245: LD_VAR 0 1
35249: PUSH
35250: LD_INT 256
35252: EQUAL
35253: IFFALSE 35274
// SetFactoryWaypoint ( unit , x , y ) ;
35255: LD_VAR 0 2
35259: PPUSH
35260: LD_VAR 0 4
35264: PPUSH
35265: LD_VAR 0 5
35269: PPUSH
35270: CALL 33243 0 3
// if cmd = 257 then
35274: LD_VAR 0 1
35278: PUSH
35279: LD_INT 257
35281: EQUAL
35282: IFFALSE 35303
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35284: LD_VAR 0 2
35288: PPUSH
35289: LD_VAR 0 4
35293: PPUSH
35294: LD_VAR 0 5
35298: PPUSH
35299: CALL 33605 0 3
// end ;
35303: LD_VAR 0 6
35307: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35308: LD_INT 0
35310: PPUSH
35311: PPUSH
35312: PPUSH
35313: PPUSH
35314: PPUSH
35315: PPUSH
35316: PPUSH
35317: PPUSH
35318: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35319: LD_VAR 0 1
35323: NOT
35324: PUSH
35325: LD_VAR 0 2
35329: PPUSH
35330: LD_VAR 0 3
35334: PPUSH
35335: CALL_OW 488
35339: NOT
35340: OR
35341: PUSH
35342: LD_VAR 0 4
35346: NOT
35347: OR
35348: IFFALSE 35352
// exit ;
35350: GO 35692
// list := [ ] ;
35352: LD_ADDR_VAR 0 13
35356: PUSH
35357: EMPTY
35358: ST_TO_ADDR
// if x - r < 0 then
35359: LD_VAR 0 2
35363: PUSH
35364: LD_VAR 0 4
35368: MINUS
35369: PUSH
35370: LD_INT 0
35372: LESS
35373: IFFALSE 35385
// min_x := 0 else
35375: LD_ADDR_VAR 0 7
35379: PUSH
35380: LD_INT 0
35382: ST_TO_ADDR
35383: GO 35401
// min_x := x - r ;
35385: LD_ADDR_VAR 0 7
35389: PUSH
35390: LD_VAR 0 2
35394: PUSH
35395: LD_VAR 0 4
35399: MINUS
35400: ST_TO_ADDR
// if y - r < 0 then
35401: LD_VAR 0 3
35405: PUSH
35406: LD_VAR 0 4
35410: MINUS
35411: PUSH
35412: LD_INT 0
35414: LESS
35415: IFFALSE 35427
// min_y := 0 else
35417: LD_ADDR_VAR 0 8
35421: PUSH
35422: LD_INT 0
35424: ST_TO_ADDR
35425: GO 35443
// min_y := y - r ;
35427: LD_ADDR_VAR 0 8
35431: PUSH
35432: LD_VAR 0 3
35436: PUSH
35437: LD_VAR 0 4
35441: MINUS
35442: ST_TO_ADDR
// max_x := x + r ;
35443: LD_ADDR_VAR 0 9
35447: PUSH
35448: LD_VAR 0 2
35452: PUSH
35453: LD_VAR 0 4
35457: PLUS
35458: ST_TO_ADDR
// max_y := y + r ;
35459: LD_ADDR_VAR 0 10
35463: PUSH
35464: LD_VAR 0 3
35468: PUSH
35469: LD_VAR 0 4
35473: PLUS
35474: ST_TO_ADDR
// for _x = min_x to max_x do
35475: LD_ADDR_VAR 0 11
35479: PUSH
35480: DOUBLE
35481: LD_VAR 0 7
35485: DEC
35486: ST_TO_ADDR
35487: LD_VAR 0 9
35491: PUSH
35492: FOR_TO
35493: IFFALSE 35610
// for _y = min_y to max_y do
35495: LD_ADDR_VAR 0 12
35499: PUSH
35500: DOUBLE
35501: LD_VAR 0 8
35505: DEC
35506: ST_TO_ADDR
35507: LD_VAR 0 10
35511: PUSH
35512: FOR_TO
35513: IFFALSE 35606
// begin if not ValidHex ( _x , _y ) then
35515: LD_VAR 0 11
35519: PPUSH
35520: LD_VAR 0 12
35524: PPUSH
35525: CALL_OW 488
35529: NOT
35530: IFFALSE 35534
// continue ;
35532: GO 35512
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35534: LD_VAR 0 11
35538: PPUSH
35539: LD_VAR 0 12
35543: PPUSH
35544: CALL_OW 351
35548: PUSH
35549: LD_VAR 0 11
35553: PPUSH
35554: LD_VAR 0 12
35558: PPUSH
35559: CALL_OW 554
35563: AND
35564: IFFALSE 35604
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35566: LD_ADDR_VAR 0 13
35570: PUSH
35571: LD_VAR 0 13
35575: PPUSH
35576: LD_VAR 0 13
35580: PUSH
35581: LD_INT 1
35583: PLUS
35584: PPUSH
35585: LD_VAR 0 11
35589: PUSH
35590: LD_VAR 0 12
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PPUSH
35599: CALL_OW 2
35603: ST_TO_ADDR
// end ;
35604: GO 35512
35606: POP
35607: POP
35608: GO 35492
35610: POP
35611: POP
// if not list then
35612: LD_VAR 0 13
35616: NOT
35617: IFFALSE 35621
// exit ;
35619: GO 35692
// for i in list do
35621: LD_ADDR_VAR 0 6
35625: PUSH
35626: LD_VAR 0 13
35630: PUSH
35631: FOR_IN
35632: IFFALSE 35690
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35634: LD_VAR 0 1
35638: PPUSH
35639: LD_STRING M
35641: PUSH
35642: LD_VAR 0 6
35646: PUSH
35647: LD_INT 1
35649: ARRAY
35650: PUSH
35651: LD_VAR 0 6
35655: PUSH
35656: LD_INT 2
35658: ARRAY
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 0
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: PUSH
35681: EMPTY
35682: LIST
35683: PPUSH
35684: CALL_OW 447
35688: GO 35631
35690: POP
35691: POP
// end ;
35692: LD_VAR 0 5
35696: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35697: LD_EXP 122
35701: NOT
35702: IFFALSE 35752
35704: GO 35706
35706: DISABLE
// begin initHack := true ;
35707: LD_ADDR_EXP 122
35711: PUSH
35712: LD_INT 1
35714: ST_TO_ADDR
// hackTanks := [ ] ;
35715: LD_ADDR_EXP 123
35719: PUSH
35720: EMPTY
35721: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35722: LD_ADDR_EXP 124
35726: PUSH
35727: EMPTY
35728: ST_TO_ADDR
// hackLimit := 3 ;
35729: LD_ADDR_EXP 125
35733: PUSH
35734: LD_INT 3
35736: ST_TO_ADDR
// hackDist := 12 ;
35737: LD_ADDR_EXP 126
35741: PUSH
35742: LD_INT 12
35744: ST_TO_ADDR
// hackCounter := [ ] ;
35745: LD_ADDR_EXP 127
35749: PUSH
35750: EMPTY
35751: ST_TO_ADDR
// end ;
35752: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35753: LD_EXP 122
35757: PUSH
35758: LD_INT 34
35760: PUSH
35761: LD_EXP 45
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PPUSH
35770: CALL_OW 69
35774: AND
35775: IFFALSE 36030
35777: GO 35779
35779: DISABLE
35780: LD_INT 0
35782: PPUSH
35783: PPUSH
// begin enable ;
35784: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35785: LD_ADDR_VAR 0 1
35789: PUSH
35790: LD_INT 34
35792: PUSH
35793: LD_EXP 45
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PPUSH
35802: CALL_OW 69
35806: PUSH
35807: FOR_IN
35808: IFFALSE 36028
// begin if not i in hackTanks then
35810: LD_VAR 0 1
35814: PUSH
35815: LD_EXP 123
35819: IN
35820: NOT
35821: IFFALSE 35904
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35823: LD_ADDR_EXP 123
35827: PUSH
35828: LD_EXP 123
35832: PPUSH
35833: LD_EXP 123
35837: PUSH
35838: LD_INT 1
35840: PLUS
35841: PPUSH
35842: LD_VAR 0 1
35846: PPUSH
35847: CALL_OW 1
35851: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35852: LD_ADDR_EXP 124
35856: PUSH
35857: LD_EXP 124
35861: PPUSH
35862: LD_EXP 124
35866: PUSH
35867: LD_INT 1
35869: PLUS
35870: PPUSH
35871: EMPTY
35872: PPUSH
35873: CALL_OW 1
35877: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35878: LD_ADDR_EXP 127
35882: PUSH
35883: LD_EXP 127
35887: PPUSH
35888: LD_EXP 127
35892: PUSH
35893: LD_INT 1
35895: PLUS
35896: PPUSH
35897: EMPTY
35898: PPUSH
35899: CALL_OW 1
35903: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35904: LD_VAR 0 1
35908: PPUSH
35909: CALL_OW 302
35913: NOT
35914: IFFALSE 35927
// begin HackUnlinkAll ( i ) ;
35916: LD_VAR 0 1
35920: PPUSH
35921: CALL 36033 0 1
// continue ;
35925: GO 35807
// end ; HackCheckCapturedStatus ( i ) ;
35927: LD_VAR 0 1
35931: PPUSH
35932: CALL 36476 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35936: LD_ADDR_VAR 0 2
35940: PUSH
35941: LD_INT 81
35943: PUSH
35944: LD_VAR 0 1
35948: PPUSH
35949: CALL_OW 255
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 33
35960: PUSH
35961: LD_INT 3
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 91
35970: PUSH
35971: LD_VAR 0 1
35975: PUSH
35976: LD_EXP 126
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 50
35988: PUSH
35989: EMPTY
35990: LIST
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: PPUSH
35998: CALL_OW 69
36002: ST_TO_ADDR
// if not tmp then
36003: LD_VAR 0 2
36007: NOT
36008: IFFALSE 36012
// continue ;
36010: GO 35807
// HackLink ( i , tmp ) ;
36012: LD_VAR 0 1
36016: PPUSH
36017: LD_VAR 0 2
36021: PPUSH
36022: CALL 36169 0 2
// end ;
36026: GO 35807
36028: POP
36029: POP
// end ;
36030: PPOPN 2
36032: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36033: LD_INT 0
36035: PPUSH
36036: PPUSH
36037: PPUSH
// if not hack in hackTanks then
36038: LD_VAR 0 1
36042: PUSH
36043: LD_EXP 123
36047: IN
36048: NOT
36049: IFFALSE 36053
// exit ;
36051: GO 36164
// index := GetElementIndex ( hackTanks , hack ) ;
36053: LD_ADDR_VAR 0 4
36057: PUSH
36058: LD_EXP 123
36062: PPUSH
36063: LD_VAR 0 1
36067: PPUSH
36068: CALL 43791 0 2
36072: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36073: LD_EXP 124
36077: PUSH
36078: LD_VAR 0 4
36082: ARRAY
36083: IFFALSE 36164
// begin for i in hackTanksCaptured [ index ] do
36085: LD_ADDR_VAR 0 3
36089: PUSH
36090: LD_EXP 124
36094: PUSH
36095: LD_VAR 0 4
36099: ARRAY
36100: PUSH
36101: FOR_IN
36102: IFFALSE 36128
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36104: LD_VAR 0 3
36108: PUSH
36109: LD_INT 1
36111: ARRAY
36112: PPUSH
36113: LD_VAR 0 3
36117: PUSH
36118: LD_INT 2
36120: ARRAY
36121: PPUSH
36122: CALL_OW 235
36126: GO 36101
36128: POP
36129: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36130: LD_ADDR_EXP 124
36134: PUSH
36135: LD_EXP 124
36139: PPUSH
36140: LD_VAR 0 4
36144: PPUSH
36145: EMPTY
36146: PPUSH
36147: CALL_OW 1
36151: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36152: LD_VAR 0 1
36156: PPUSH
36157: LD_INT 0
36159: PPUSH
36160: CALL_OW 505
// end ; end ;
36164: LD_VAR 0 2
36168: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36169: LD_INT 0
36171: PPUSH
36172: PPUSH
36173: PPUSH
// if not hack in hackTanks or not vehicles then
36174: LD_VAR 0 1
36178: PUSH
36179: LD_EXP 123
36183: IN
36184: NOT
36185: PUSH
36186: LD_VAR 0 2
36190: NOT
36191: OR
36192: IFFALSE 36196
// exit ;
36194: GO 36471
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36196: LD_ADDR_VAR 0 2
36200: PUSH
36201: LD_VAR 0 1
36205: PPUSH
36206: LD_VAR 0 2
36210: PPUSH
36211: LD_INT 1
36213: PPUSH
36214: LD_INT 1
36216: PPUSH
36217: CALL 44441 0 4
36221: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36222: LD_ADDR_VAR 0 5
36226: PUSH
36227: LD_EXP 123
36231: PPUSH
36232: LD_VAR 0 1
36236: PPUSH
36237: CALL 43791 0 2
36241: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36242: LD_EXP 124
36246: PUSH
36247: LD_VAR 0 5
36251: ARRAY
36252: PUSH
36253: LD_EXP 125
36257: LESS
36258: IFFALSE 36447
// begin for i := 1 to vehicles do
36260: LD_ADDR_VAR 0 4
36264: PUSH
36265: DOUBLE
36266: LD_INT 1
36268: DEC
36269: ST_TO_ADDR
36270: LD_VAR 0 2
36274: PUSH
36275: FOR_TO
36276: IFFALSE 36445
// begin if hackTanksCaptured [ index ] = hackLimit then
36278: LD_EXP 124
36282: PUSH
36283: LD_VAR 0 5
36287: ARRAY
36288: PUSH
36289: LD_EXP 125
36293: EQUAL
36294: IFFALSE 36298
// break ;
36296: GO 36445
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36298: LD_ADDR_EXP 127
36302: PUSH
36303: LD_EXP 127
36307: PPUSH
36308: LD_VAR 0 5
36312: PPUSH
36313: LD_EXP 127
36317: PUSH
36318: LD_VAR 0 5
36322: ARRAY
36323: PUSH
36324: LD_INT 1
36326: PLUS
36327: PPUSH
36328: CALL_OW 1
36332: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36333: LD_ADDR_EXP 124
36337: PUSH
36338: LD_EXP 124
36342: PPUSH
36343: LD_VAR 0 5
36347: PUSH
36348: LD_EXP 124
36352: PUSH
36353: LD_VAR 0 5
36357: ARRAY
36358: PUSH
36359: LD_INT 1
36361: PLUS
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PPUSH
36367: LD_VAR 0 2
36371: PUSH
36372: LD_VAR 0 4
36376: ARRAY
36377: PUSH
36378: LD_VAR 0 2
36382: PUSH
36383: LD_VAR 0 4
36387: ARRAY
36388: PPUSH
36389: CALL_OW 255
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PPUSH
36398: CALL 44006 0 3
36402: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36403: LD_VAR 0 2
36407: PUSH
36408: LD_VAR 0 4
36412: ARRAY
36413: PPUSH
36414: LD_VAR 0 1
36418: PPUSH
36419: CALL_OW 255
36423: PPUSH
36424: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36428: LD_VAR 0 2
36432: PUSH
36433: LD_VAR 0 4
36437: ARRAY
36438: PPUSH
36439: CALL_OW 141
// end ;
36443: GO 36275
36445: POP
36446: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36447: LD_VAR 0 1
36451: PPUSH
36452: LD_EXP 124
36456: PUSH
36457: LD_VAR 0 5
36461: ARRAY
36462: PUSH
36463: LD_INT 0
36465: PLUS
36466: PPUSH
36467: CALL_OW 505
// end ;
36471: LD_VAR 0 3
36475: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36476: LD_INT 0
36478: PPUSH
36479: PPUSH
36480: PPUSH
36481: PPUSH
// if not hack in hackTanks then
36482: LD_VAR 0 1
36486: PUSH
36487: LD_EXP 123
36491: IN
36492: NOT
36493: IFFALSE 36497
// exit ;
36495: GO 36737
// index := GetElementIndex ( hackTanks , hack ) ;
36497: LD_ADDR_VAR 0 4
36501: PUSH
36502: LD_EXP 123
36506: PPUSH
36507: LD_VAR 0 1
36511: PPUSH
36512: CALL 43791 0 2
36516: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36517: LD_ADDR_VAR 0 3
36521: PUSH
36522: DOUBLE
36523: LD_EXP 124
36527: PUSH
36528: LD_VAR 0 4
36532: ARRAY
36533: INC
36534: ST_TO_ADDR
36535: LD_INT 1
36537: PUSH
36538: FOR_DOWNTO
36539: IFFALSE 36711
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36541: LD_ADDR_VAR 0 5
36545: PUSH
36546: LD_EXP 124
36550: PUSH
36551: LD_VAR 0 4
36555: ARRAY
36556: PUSH
36557: LD_VAR 0 3
36561: ARRAY
36562: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36563: LD_VAR 0 5
36567: PUSH
36568: LD_INT 1
36570: ARRAY
36571: PPUSH
36572: CALL_OW 302
36576: NOT
36577: PUSH
36578: LD_VAR 0 5
36582: PUSH
36583: LD_INT 1
36585: ARRAY
36586: PPUSH
36587: CALL_OW 255
36591: PUSH
36592: LD_VAR 0 1
36596: PPUSH
36597: CALL_OW 255
36601: NONEQUAL
36602: OR
36603: IFFALSE 36709
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36605: LD_VAR 0 5
36609: PUSH
36610: LD_INT 1
36612: ARRAY
36613: PPUSH
36614: CALL_OW 305
36618: PUSH
36619: LD_VAR 0 5
36623: PUSH
36624: LD_INT 1
36626: ARRAY
36627: PPUSH
36628: CALL_OW 255
36632: PUSH
36633: LD_VAR 0 1
36637: PPUSH
36638: CALL_OW 255
36642: EQUAL
36643: AND
36644: IFFALSE 36668
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36646: LD_VAR 0 5
36650: PUSH
36651: LD_INT 1
36653: ARRAY
36654: PPUSH
36655: LD_VAR 0 5
36659: PUSH
36660: LD_INT 2
36662: ARRAY
36663: PPUSH
36664: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36668: LD_ADDR_EXP 124
36672: PUSH
36673: LD_EXP 124
36677: PPUSH
36678: LD_VAR 0 4
36682: PPUSH
36683: LD_EXP 124
36687: PUSH
36688: LD_VAR 0 4
36692: ARRAY
36693: PPUSH
36694: LD_VAR 0 3
36698: PPUSH
36699: CALL_OW 3
36703: PPUSH
36704: CALL_OW 1
36708: ST_TO_ADDR
// end ; end ;
36709: GO 36538
36711: POP
36712: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36713: LD_VAR 0 1
36717: PPUSH
36718: LD_EXP 124
36722: PUSH
36723: LD_VAR 0 4
36727: ARRAY
36728: PUSH
36729: LD_INT 0
36731: PLUS
36732: PPUSH
36733: CALL_OW 505
// end ;
36737: LD_VAR 0 2
36741: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36742: LD_INT 0
36744: PPUSH
36745: PPUSH
36746: PPUSH
36747: PPUSH
// if not hack in hackTanks then
36748: LD_VAR 0 1
36752: PUSH
36753: LD_EXP 123
36757: IN
36758: NOT
36759: IFFALSE 36763
// exit ;
36761: GO 36848
// index := GetElementIndex ( hackTanks , hack ) ;
36763: LD_ADDR_VAR 0 5
36767: PUSH
36768: LD_EXP 123
36772: PPUSH
36773: LD_VAR 0 1
36777: PPUSH
36778: CALL 43791 0 2
36782: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36783: LD_ADDR_VAR 0 4
36787: PUSH
36788: DOUBLE
36789: LD_INT 1
36791: DEC
36792: ST_TO_ADDR
36793: LD_EXP 124
36797: PUSH
36798: LD_VAR 0 5
36802: ARRAY
36803: PUSH
36804: FOR_TO
36805: IFFALSE 36846
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36807: LD_EXP 124
36811: PUSH
36812: LD_VAR 0 5
36816: ARRAY
36817: PUSH
36818: LD_VAR 0 4
36822: ARRAY
36823: PUSH
36824: LD_INT 1
36826: ARRAY
36827: PUSH
36828: LD_VAR 0 2
36832: EQUAL
36833: IFFALSE 36844
// KillUnit ( vehicle ) ;
36835: LD_VAR 0 2
36839: PPUSH
36840: CALL_OW 66
36844: GO 36804
36846: POP
36847: POP
// end ;
36848: LD_VAR 0 3
36852: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36853: LD_EXP 128
36857: NOT
36858: IFFALSE 36893
36860: GO 36862
36862: DISABLE
// begin initMiner := true ;
36863: LD_ADDR_EXP 128
36867: PUSH
36868: LD_INT 1
36870: ST_TO_ADDR
// minersList := [ ] ;
36871: LD_ADDR_EXP 129
36875: PUSH
36876: EMPTY
36877: ST_TO_ADDR
// minerMinesList := [ ] ;
36878: LD_ADDR_EXP 130
36882: PUSH
36883: EMPTY
36884: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36885: LD_ADDR_EXP 131
36889: PUSH
36890: LD_INT 5
36892: ST_TO_ADDR
// end ;
36893: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36894: LD_EXP 128
36898: PUSH
36899: LD_INT 34
36901: PUSH
36902: LD_EXP 50
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PPUSH
36911: CALL_OW 69
36915: AND
36916: IFFALSE 37379
36918: GO 36920
36920: DISABLE
36921: LD_INT 0
36923: PPUSH
36924: PPUSH
36925: PPUSH
36926: PPUSH
// begin enable ;
36927: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36928: LD_ADDR_VAR 0 1
36932: PUSH
36933: LD_INT 34
36935: PUSH
36936: LD_EXP 50
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PPUSH
36945: CALL_OW 69
36949: PUSH
36950: FOR_IN
36951: IFFALSE 37023
// begin if not i in minersList then
36953: LD_VAR 0 1
36957: PUSH
36958: LD_EXP 129
36962: IN
36963: NOT
36964: IFFALSE 37021
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36966: LD_ADDR_EXP 129
36970: PUSH
36971: LD_EXP 129
36975: PPUSH
36976: LD_EXP 129
36980: PUSH
36981: LD_INT 1
36983: PLUS
36984: PPUSH
36985: LD_VAR 0 1
36989: PPUSH
36990: CALL_OW 1
36994: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36995: LD_ADDR_EXP 130
36999: PUSH
37000: LD_EXP 130
37004: PPUSH
37005: LD_EXP 130
37009: PUSH
37010: LD_INT 1
37012: PLUS
37013: PPUSH
37014: EMPTY
37015: PPUSH
37016: CALL_OW 1
37020: ST_TO_ADDR
// end end ;
37021: GO 36950
37023: POP
37024: POP
// for i := minerMinesList downto 1 do
37025: LD_ADDR_VAR 0 1
37029: PUSH
37030: DOUBLE
37031: LD_EXP 130
37035: INC
37036: ST_TO_ADDR
37037: LD_INT 1
37039: PUSH
37040: FOR_DOWNTO
37041: IFFALSE 37377
// begin if IsLive ( minersList [ i ] ) then
37043: LD_EXP 129
37047: PUSH
37048: LD_VAR 0 1
37052: ARRAY
37053: PPUSH
37054: CALL_OW 300
37058: IFFALSE 37086
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37060: LD_EXP 129
37064: PUSH
37065: LD_VAR 0 1
37069: ARRAY
37070: PPUSH
37071: LD_EXP 130
37075: PUSH
37076: LD_VAR 0 1
37080: ARRAY
37081: PPUSH
37082: CALL_OW 505
// if not minerMinesList [ i ] then
37086: LD_EXP 130
37090: PUSH
37091: LD_VAR 0 1
37095: ARRAY
37096: NOT
37097: IFFALSE 37101
// continue ;
37099: GO 37040
// for j := minerMinesList [ i ] downto 1 do
37101: LD_ADDR_VAR 0 2
37105: PUSH
37106: DOUBLE
37107: LD_EXP 130
37111: PUSH
37112: LD_VAR 0 1
37116: ARRAY
37117: INC
37118: ST_TO_ADDR
37119: LD_INT 1
37121: PUSH
37122: FOR_DOWNTO
37123: IFFALSE 37373
// begin side := GetSide ( minersList [ i ] ) ;
37125: LD_ADDR_VAR 0 3
37129: PUSH
37130: LD_EXP 129
37134: PUSH
37135: LD_VAR 0 1
37139: ARRAY
37140: PPUSH
37141: CALL_OW 255
37145: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37146: LD_ADDR_VAR 0 4
37150: PUSH
37151: LD_EXP 130
37155: PUSH
37156: LD_VAR 0 1
37160: ARRAY
37161: PUSH
37162: LD_VAR 0 2
37166: ARRAY
37167: PUSH
37168: LD_INT 1
37170: ARRAY
37171: PPUSH
37172: LD_EXP 130
37176: PUSH
37177: LD_VAR 0 1
37181: ARRAY
37182: PUSH
37183: LD_VAR 0 2
37187: ARRAY
37188: PUSH
37189: LD_INT 2
37191: ARRAY
37192: PPUSH
37193: CALL_OW 428
37197: ST_TO_ADDR
// if not tmp then
37198: LD_VAR 0 4
37202: NOT
37203: IFFALSE 37207
// continue ;
37205: GO 37122
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37207: LD_VAR 0 4
37211: PUSH
37212: LD_INT 81
37214: PUSH
37215: LD_VAR 0 3
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PPUSH
37224: CALL_OW 69
37228: IN
37229: PUSH
37230: LD_EXP 130
37234: PUSH
37235: LD_VAR 0 1
37239: ARRAY
37240: PUSH
37241: LD_VAR 0 2
37245: ARRAY
37246: PUSH
37247: LD_INT 1
37249: ARRAY
37250: PPUSH
37251: LD_EXP 130
37255: PUSH
37256: LD_VAR 0 1
37260: ARRAY
37261: PUSH
37262: LD_VAR 0 2
37266: ARRAY
37267: PUSH
37268: LD_INT 2
37270: ARRAY
37271: PPUSH
37272: CALL_OW 458
37276: AND
37277: IFFALSE 37371
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37279: LD_EXP 130
37283: PUSH
37284: LD_VAR 0 1
37288: ARRAY
37289: PUSH
37290: LD_VAR 0 2
37294: ARRAY
37295: PUSH
37296: LD_INT 1
37298: ARRAY
37299: PPUSH
37300: LD_EXP 130
37304: PUSH
37305: LD_VAR 0 1
37309: ARRAY
37310: PUSH
37311: LD_VAR 0 2
37315: ARRAY
37316: PUSH
37317: LD_INT 2
37319: ARRAY
37320: PPUSH
37321: LD_VAR 0 3
37325: PPUSH
37326: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37330: LD_ADDR_EXP 130
37334: PUSH
37335: LD_EXP 130
37339: PPUSH
37340: LD_VAR 0 1
37344: PPUSH
37345: LD_EXP 130
37349: PUSH
37350: LD_VAR 0 1
37354: ARRAY
37355: PPUSH
37356: LD_VAR 0 2
37360: PPUSH
37361: CALL_OW 3
37365: PPUSH
37366: CALL_OW 1
37370: ST_TO_ADDR
// end ; end ;
37371: GO 37122
37373: POP
37374: POP
// end ;
37375: GO 37040
37377: POP
37378: POP
// end ;
37379: PPOPN 4
37381: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37382: LD_INT 0
37384: PPUSH
37385: PPUSH
// result := false ;
37386: LD_ADDR_VAR 0 4
37390: PUSH
37391: LD_INT 0
37393: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37394: LD_VAR 0 1
37398: PPUSH
37399: CALL_OW 264
37403: PUSH
37404: LD_EXP 50
37408: EQUAL
37409: NOT
37410: IFFALSE 37414
// exit ;
37412: GO 37654
// index := GetElementIndex ( minersList , unit ) ;
37414: LD_ADDR_VAR 0 5
37418: PUSH
37419: LD_EXP 129
37423: PPUSH
37424: LD_VAR 0 1
37428: PPUSH
37429: CALL 43791 0 2
37433: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37434: LD_EXP 130
37438: PUSH
37439: LD_VAR 0 5
37443: ARRAY
37444: PUSH
37445: LD_EXP 131
37449: GREATEREQUAL
37450: IFFALSE 37454
// exit ;
37452: GO 37654
// ComMoveXY ( unit , x , y ) ;
37454: LD_VAR 0 1
37458: PPUSH
37459: LD_VAR 0 2
37463: PPUSH
37464: LD_VAR 0 3
37468: PPUSH
37469: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37473: LD_INT 35
37475: PPUSH
37476: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37480: LD_VAR 0 1
37484: PPUSH
37485: LD_VAR 0 2
37489: PPUSH
37490: LD_VAR 0 3
37494: PPUSH
37495: CALL 75077 0 3
37499: NOT
37500: PUSH
37501: LD_VAR 0 1
37505: PPUSH
37506: CALL_OW 314
37510: AND
37511: IFFALSE 37515
// exit ;
37513: GO 37654
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37515: LD_VAR 0 2
37519: PPUSH
37520: LD_VAR 0 3
37524: PPUSH
37525: CALL_OW 428
37529: PUSH
37530: LD_VAR 0 1
37534: EQUAL
37535: PUSH
37536: LD_VAR 0 1
37540: PPUSH
37541: CALL_OW 314
37545: NOT
37546: AND
37547: IFFALSE 37473
// PlaySoundXY ( x , y , PlantMine ) ;
37549: LD_VAR 0 2
37553: PPUSH
37554: LD_VAR 0 3
37558: PPUSH
37559: LD_STRING PlantMine
37561: PPUSH
37562: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37566: LD_VAR 0 2
37570: PPUSH
37571: LD_VAR 0 3
37575: PPUSH
37576: LD_VAR 0 1
37580: PPUSH
37581: CALL_OW 255
37585: PPUSH
37586: LD_INT 0
37588: PPUSH
37589: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37593: LD_ADDR_EXP 130
37597: PUSH
37598: LD_EXP 130
37602: PPUSH
37603: LD_VAR 0 5
37607: PUSH
37608: LD_EXP 130
37612: PUSH
37613: LD_VAR 0 5
37617: ARRAY
37618: PUSH
37619: LD_INT 1
37621: PLUS
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PPUSH
37627: LD_VAR 0 2
37631: PUSH
37632: LD_VAR 0 3
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PPUSH
37641: CALL 44006 0 3
37645: ST_TO_ADDR
// result := true ;
37646: LD_ADDR_VAR 0 4
37650: PUSH
37651: LD_INT 1
37653: ST_TO_ADDR
// end ;
37654: LD_VAR 0 4
37658: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37659: LD_INT 0
37661: PPUSH
37662: PPUSH
37663: PPUSH
// if not unit in minersList then
37664: LD_VAR 0 1
37668: PUSH
37669: LD_EXP 129
37673: IN
37674: NOT
37675: IFFALSE 37679
// exit ;
37677: GO 38071
// index := GetElementIndex ( minersList , unit ) ;
37679: LD_ADDR_VAR 0 6
37683: PUSH
37684: LD_EXP 129
37688: PPUSH
37689: LD_VAR 0 1
37693: PPUSH
37694: CALL 43791 0 2
37698: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37699: LD_ADDR_VAR 0 5
37703: PUSH
37704: DOUBLE
37705: LD_EXP 130
37709: PUSH
37710: LD_VAR 0 6
37714: ARRAY
37715: INC
37716: ST_TO_ADDR
37717: LD_INT 1
37719: PUSH
37720: FOR_DOWNTO
37721: IFFALSE 37882
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37723: LD_EXP 130
37727: PUSH
37728: LD_VAR 0 6
37732: ARRAY
37733: PUSH
37734: LD_VAR 0 5
37738: ARRAY
37739: PUSH
37740: LD_INT 1
37742: ARRAY
37743: PUSH
37744: LD_VAR 0 2
37748: EQUAL
37749: PUSH
37750: LD_EXP 130
37754: PUSH
37755: LD_VAR 0 6
37759: ARRAY
37760: PUSH
37761: LD_VAR 0 5
37765: ARRAY
37766: PUSH
37767: LD_INT 2
37769: ARRAY
37770: PUSH
37771: LD_VAR 0 3
37775: EQUAL
37776: AND
37777: IFFALSE 37880
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37779: LD_EXP 130
37783: PUSH
37784: LD_VAR 0 6
37788: ARRAY
37789: PUSH
37790: LD_VAR 0 5
37794: ARRAY
37795: PUSH
37796: LD_INT 1
37798: ARRAY
37799: PPUSH
37800: LD_EXP 130
37804: PUSH
37805: LD_VAR 0 6
37809: ARRAY
37810: PUSH
37811: LD_VAR 0 5
37815: ARRAY
37816: PUSH
37817: LD_INT 2
37819: ARRAY
37820: PPUSH
37821: LD_VAR 0 1
37825: PPUSH
37826: CALL_OW 255
37830: PPUSH
37831: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37835: LD_ADDR_EXP 130
37839: PUSH
37840: LD_EXP 130
37844: PPUSH
37845: LD_VAR 0 6
37849: PPUSH
37850: LD_EXP 130
37854: PUSH
37855: LD_VAR 0 6
37859: ARRAY
37860: PPUSH
37861: LD_VAR 0 5
37865: PPUSH
37866: CALL_OW 3
37870: PPUSH
37871: CALL_OW 1
37875: ST_TO_ADDR
// exit ;
37876: POP
37877: POP
37878: GO 38071
// end ; end ;
37880: GO 37720
37882: POP
37883: POP
// for i := minerMinesList [ index ] downto 1 do
37884: LD_ADDR_VAR 0 5
37888: PUSH
37889: DOUBLE
37890: LD_EXP 130
37894: PUSH
37895: LD_VAR 0 6
37899: ARRAY
37900: INC
37901: ST_TO_ADDR
37902: LD_INT 1
37904: PUSH
37905: FOR_DOWNTO
37906: IFFALSE 38069
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37908: LD_EXP 130
37912: PUSH
37913: LD_VAR 0 6
37917: ARRAY
37918: PUSH
37919: LD_VAR 0 5
37923: ARRAY
37924: PUSH
37925: LD_INT 1
37927: ARRAY
37928: PPUSH
37929: LD_EXP 130
37933: PUSH
37934: LD_VAR 0 6
37938: ARRAY
37939: PUSH
37940: LD_VAR 0 5
37944: ARRAY
37945: PUSH
37946: LD_INT 2
37948: ARRAY
37949: PPUSH
37950: LD_VAR 0 2
37954: PPUSH
37955: LD_VAR 0 3
37959: PPUSH
37960: CALL_OW 298
37964: PUSH
37965: LD_INT 6
37967: LESS
37968: IFFALSE 38067
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37970: LD_EXP 130
37974: PUSH
37975: LD_VAR 0 6
37979: ARRAY
37980: PUSH
37981: LD_VAR 0 5
37985: ARRAY
37986: PUSH
37987: LD_INT 1
37989: ARRAY
37990: PPUSH
37991: LD_EXP 130
37995: PUSH
37996: LD_VAR 0 6
38000: ARRAY
38001: PUSH
38002: LD_VAR 0 5
38006: ARRAY
38007: PUSH
38008: LD_INT 2
38010: ARRAY
38011: PPUSH
38012: LD_VAR 0 1
38016: PPUSH
38017: CALL_OW 255
38021: PPUSH
38022: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38026: LD_ADDR_EXP 130
38030: PUSH
38031: LD_EXP 130
38035: PPUSH
38036: LD_VAR 0 6
38040: PPUSH
38041: LD_EXP 130
38045: PUSH
38046: LD_VAR 0 6
38050: ARRAY
38051: PPUSH
38052: LD_VAR 0 5
38056: PPUSH
38057: CALL_OW 3
38061: PPUSH
38062: CALL_OW 1
38066: ST_TO_ADDR
// end ; end ;
38067: GO 37905
38069: POP
38070: POP
// end ;
38071: LD_VAR 0 4
38075: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38076: LD_INT 0
38078: PPUSH
38079: PPUSH
38080: PPUSH
38081: PPUSH
38082: PPUSH
38083: PPUSH
38084: PPUSH
38085: PPUSH
38086: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38087: LD_VAR 0 1
38091: PPUSH
38092: CALL_OW 264
38096: PUSH
38097: LD_EXP 50
38101: EQUAL
38102: NOT
38103: PUSH
38104: LD_VAR 0 1
38108: PUSH
38109: LD_EXP 129
38113: IN
38114: NOT
38115: OR
38116: IFFALSE 38120
// exit ;
38118: GO 38442
// index := GetElementIndex ( minersList , unit ) ;
38120: LD_ADDR_VAR 0 6
38124: PUSH
38125: LD_EXP 129
38129: PPUSH
38130: LD_VAR 0 1
38134: PPUSH
38135: CALL 43791 0 2
38139: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38140: LD_ADDR_VAR 0 8
38144: PUSH
38145: LD_EXP 131
38149: PUSH
38150: LD_EXP 130
38154: PUSH
38155: LD_VAR 0 6
38159: ARRAY
38160: MINUS
38161: ST_TO_ADDR
// if not minesFreeAmount then
38162: LD_VAR 0 8
38166: NOT
38167: IFFALSE 38171
// exit ;
38169: GO 38442
// tmp := [ ] ;
38171: LD_ADDR_VAR 0 7
38175: PUSH
38176: EMPTY
38177: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38178: LD_ADDR_VAR 0 5
38182: PUSH
38183: DOUBLE
38184: LD_INT 1
38186: DEC
38187: ST_TO_ADDR
38188: LD_VAR 0 8
38192: PUSH
38193: FOR_TO
38194: IFFALSE 38389
// begin _d := rand ( 0 , 5 ) ;
38196: LD_ADDR_VAR 0 11
38200: PUSH
38201: LD_INT 0
38203: PPUSH
38204: LD_INT 5
38206: PPUSH
38207: CALL_OW 12
38211: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38212: LD_ADDR_VAR 0 12
38216: PUSH
38217: LD_INT 2
38219: PPUSH
38220: LD_INT 6
38222: PPUSH
38223: CALL_OW 12
38227: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38228: LD_ADDR_VAR 0 9
38232: PUSH
38233: LD_VAR 0 2
38237: PPUSH
38238: LD_VAR 0 11
38242: PPUSH
38243: LD_VAR 0 12
38247: PPUSH
38248: CALL_OW 272
38252: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38253: LD_ADDR_VAR 0 10
38257: PUSH
38258: LD_VAR 0 3
38262: PPUSH
38263: LD_VAR 0 11
38267: PPUSH
38268: LD_VAR 0 12
38272: PPUSH
38273: CALL_OW 273
38277: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38278: LD_VAR 0 9
38282: PPUSH
38283: LD_VAR 0 10
38287: PPUSH
38288: CALL_OW 488
38292: PUSH
38293: LD_VAR 0 9
38297: PUSH
38298: LD_VAR 0 10
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_VAR 0 7
38311: IN
38312: NOT
38313: AND
38314: PUSH
38315: LD_VAR 0 9
38319: PPUSH
38320: LD_VAR 0 10
38324: PPUSH
38325: CALL_OW 458
38329: NOT
38330: AND
38331: IFFALSE 38373
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38333: LD_ADDR_VAR 0 7
38337: PUSH
38338: LD_VAR 0 7
38342: PPUSH
38343: LD_VAR 0 7
38347: PUSH
38348: LD_INT 1
38350: PLUS
38351: PPUSH
38352: LD_VAR 0 9
38356: PUSH
38357: LD_VAR 0 10
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PPUSH
38366: CALL_OW 1
38370: ST_TO_ADDR
38371: GO 38387
// i := i - 1 ;
38373: LD_ADDR_VAR 0 5
38377: PUSH
38378: LD_VAR 0 5
38382: PUSH
38383: LD_INT 1
38385: MINUS
38386: ST_TO_ADDR
// end ;
38387: GO 38193
38389: POP
38390: POP
// for i in tmp do
38391: LD_ADDR_VAR 0 5
38395: PUSH
38396: LD_VAR 0 7
38400: PUSH
38401: FOR_IN
38402: IFFALSE 38440
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38404: LD_VAR 0 1
38408: PPUSH
38409: LD_VAR 0 5
38413: PUSH
38414: LD_INT 1
38416: ARRAY
38417: PPUSH
38418: LD_VAR 0 5
38422: PUSH
38423: LD_INT 2
38425: ARRAY
38426: PPUSH
38427: CALL 37382 0 3
38431: NOT
38432: IFFALSE 38438
// exit ;
38434: POP
38435: POP
38436: GO 38442
38438: GO 38401
38440: POP
38441: POP
// end ;
38442: LD_VAR 0 4
38446: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38447: LD_INT 0
38449: PPUSH
38450: PPUSH
38451: PPUSH
38452: PPUSH
38453: PPUSH
38454: PPUSH
38455: PPUSH
// if not GetClass ( unit ) = class_sniper then
38456: LD_VAR 0 1
38460: PPUSH
38461: CALL_OW 257
38465: PUSH
38466: LD_INT 5
38468: EQUAL
38469: NOT
38470: IFFALSE 38474
// exit ;
38472: GO 38862
// dist := 8 ;
38474: LD_ADDR_VAR 0 5
38478: PUSH
38479: LD_INT 8
38481: ST_TO_ADDR
// viewRange := 12 ;
38482: LD_ADDR_VAR 0 7
38486: PUSH
38487: LD_INT 12
38489: ST_TO_ADDR
// side := GetSide ( unit ) ;
38490: LD_ADDR_VAR 0 6
38494: PUSH
38495: LD_VAR 0 1
38499: PPUSH
38500: CALL_OW 255
38504: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38505: LD_INT 61
38507: PPUSH
38508: LD_VAR 0 6
38512: PPUSH
38513: CALL_OW 321
38517: PUSH
38518: LD_INT 2
38520: EQUAL
38521: IFFALSE 38531
// viewRange := 16 ;
38523: LD_ADDR_VAR 0 7
38527: PUSH
38528: LD_INT 16
38530: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38531: LD_VAR 0 1
38535: PPUSH
38536: LD_VAR 0 2
38540: PPUSH
38541: LD_VAR 0 3
38545: PPUSH
38546: CALL_OW 297
38550: PUSH
38551: LD_VAR 0 5
38555: GREATER
38556: IFFALSE 38635
// begin ComMoveXY ( unit , x , y ) ;
38558: LD_VAR 0 1
38562: PPUSH
38563: LD_VAR 0 2
38567: PPUSH
38568: LD_VAR 0 3
38572: PPUSH
38573: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38577: LD_INT 35
38579: PPUSH
38580: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38584: LD_VAR 0 1
38588: PPUSH
38589: LD_VAR 0 2
38593: PPUSH
38594: LD_VAR 0 3
38598: PPUSH
38599: CALL 75077 0 3
38603: NOT
38604: IFFALSE 38608
// exit ;
38606: GO 38862
// until GetDistUnitXY ( unit , x , y ) < dist ;
38608: LD_VAR 0 1
38612: PPUSH
38613: LD_VAR 0 2
38617: PPUSH
38618: LD_VAR 0 3
38622: PPUSH
38623: CALL_OW 297
38627: PUSH
38628: LD_VAR 0 5
38632: LESS
38633: IFFALSE 38577
// end ; ComTurnXY ( unit , x , y ) ;
38635: LD_VAR 0 1
38639: PPUSH
38640: LD_VAR 0 2
38644: PPUSH
38645: LD_VAR 0 3
38649: PPUSH
38650: CALL_OW 118
// wait ( 5 ) ;
38654: LD_INT 5
38656: PPUSH
38657: CALL_OW 67
// _d := GetDir ( unit ) ;
38661: LD_ADDR_VAR 0 10
38665: PUSH
38666: LD_VAR 0 1
38670: PPUSH
38671: CALL_OW 254
38675: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38676: LD_ADDR_VAR 0 8
38680: PUSH
38681: LD_VAR 0 1
38685: PPUSH
38686: CALL_OW 250
38690: PPUSH
38691: LD_VAR 0 10
38695: PPUSH
38696: LD_VAR 0 5
38700: PPUSH
38701: CALL_OW 272
38705: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38706: LD_ADDR_VAR 0 9
38710: PUSH
38711: LD_VAR 0 1
38715: PPUSH
38716: CALL_OW 251
38720: PPUSH
38721: LD_VAR 0 10
38725: PPUSH
38726: LD_VAR 0 5
38730: PPUSH
38731: CALL_OW 273
38735: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38736: LD_VAR 0 8
38740: PPUSH
38741: LD_VAR 0 9
38745: PPUSH
38746: CALL_OW 488
38750: NOT
38751: IFFALSE 38755
// exit ;
38753: GO 38862
// ComAnimCustom ( unit , 1 ) ;
38755: LD_VAR 0 1
38759: PPUSH
38760: LD_INT 1
38762: PPUSH
38763: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38767: LD_VAR 0 8
38771: PPUSH
38772: LD_VAR 0 9
38776: PPUSH
38777: LD_VAR 0 6
38781: PPUSH
38782: LD_VAR 0 7
38786: PPUSH
38787: CALL_OW 330
// repeat wait ( 1 ) ;
38791: LD_INT 1
38793: PPUSH
38794: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38798: LD_VAR 0 1
38802: PPUSH
38803: CALL_OW 316
38807: PUSH
38808: LD_VAR 0 1
38812: PPUSH
38813: CALL_OW 314
38817: OR
38818: PUSH
38819: LD_VAR 0 1
38823: PPUSH
38824: CALL_OW 302
38828: NOT
38829: OR
38830: PUSH
38831: LD_VAR 0 1
38835: PPUSH
38836: CALL_OW 301
38840: OR
38841: IFFALSE 38791
// RemoveSeeing ( _x , _y , side ) ;
38843: LD_VAR 0 8
38847: PPUSH
38848: LD_VAR 0 9
38852: PPUSH
38853: LD_VAR 0 6
38857: PPUSH
38858: CALL_OW 331
// end ; end_of_file
38862: LD_VAR 0 4
38866: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38867: LD_INT 0
38869: PPUSH
38870: PPUSH
// if exist_mode then
38871: LD_VAR 0 2
38875: IFFALSE 38900
// unit := CreateCharacter ( prefix & ident ) else
38877: LD_ADDR_VAR 0 5
38881: PUSH
38882: LD_VAR 0 3
38886: PUSH
38887: LD_VAR 0 1
38891: STR
38892: PPUSH
38893: CALL_OW 34
38897: ST_TO_ADDR
38898: GO 38915
// unit := NewCharacter ( ident ) ;
38900: LD_ADDR_VAR 0 5
38904: PUSH
38905: LD_VAR 0 1
38909: PPUSH
38910: CALL_OW 25
38914: ST_TO_ADDR
// result := unit ;
38915: LD_ADDR_VAR 0 4
38919: PUSH
38920: LD_VAR 0 5
38924: ST_TO_ADDR
// end ;
38925: LD_VAR 0 4
38929: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38930: LD_INT 0
38932: PPUSH
38933: PPUSH
// if not side or not nation then
38934: LD_VAR 0 1
38938: NOT
38939: PUSH
38940: LD_VAR 0 2
38944: NOT
38945: OR
38946: IFFALSE 38950
// exit ;
38948: GO 39718
// case nation of nation_american :
38950: LD_VAR 0 2
38954: PUSH
38955: LD_INT 1
38957: DOUBLE
38958: EQUAL
38959: IFTRUE 38963
38961: GO 39177
38963: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38964: LD_ADDR_VAR 0 4
38968: PUSH
38969: LD_INT 35
38971: PUSH
38972: LD_INT 45
38974: PUSH
38975: LD_INT 46
38977: PUSH
38978: LD_INT 47
38980: PUSH
38981: LD_INT 82
38983: PUSH
38984: LD_INT 83
38986: PUSH
38987: LD_INT 84
38989: PUSH
38990: LD_INT 85
38992: PUSH
38993: LD_INT 86
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: LD_INT 2
39001: PUSH
39002: LD_INT 6
39004: PUSH
39005: LD_INT 15
39007: PUSH
39008: LD_INT 16
39010: PUSH
39011: LD_INT 7
39013: PUSH
39014: LD_INT 12
39016: PUSH
39017: LD_INT 13
39019: PUSH
39020: LD_INT 10
39022: PUSH
39023: LD_INT 14
39025: PUSH
39026: LD_INT 20
39028: PUSH
39029: LD_INT 21
39031: PUSH
39032: LD_INT 22
39034: PUSH
39035: LD_INT 25
39037: PUSH
39038: LD_INT 32
39040: PUSH
39041: LD_INT 27
39043: PUSH
39044: LD_INT 36
39046: PUSH
39047: LD_INT 69
39049: PUSH
39050: LD_INT 39
39052: PUSH
39053: LD_INT 34
39055: PUSH
39056: LD_INT 40
39058: PUSH
39059: LD_INT 48
39061: PUSH
39062: LD_INT 49
39064: PUSH
39065: LD_INT 50
39067: PUSH
39068: LD_INT 51
39070: PUSH
39071: LD_INT 52
39073: PUSH
39074: LD_INT 53
39076: PUSH
39077: LD_INT 54
39079: PUSH
39080: LD_INT 55
39082: PUSH
39083: LD_INT 56
39085: PUSH
39086: LD_INT 57
39088: PUSH
39089: LD_INT 58
39091: PUSH
39092: LD_INT 59
39094: PUSH
39095: LD_INT 60
39097: PUSH
39098: LD_INT 61
39100: PUSH
39101: LD_INT 62
39103: PUSH
39104: LD_INT 80
39106: PUSH
39107: LD_INT 82
39109: PUSH
39110: LD_INT 83
39112: PUSH
39113: LD_INT 84
39115: PUSH
39116: LD_INT 85
39118: PUSH
39119: LD_INT 86
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: ST_TO_ADDR
39175: GO 39642
39177: LD_INT 2
39179: DOUBLE
39180: EQUAL
39181: IFTRUE 39185
39183: GO 39411
39185: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39186: LD_ADDR_VAR 0 4
39190: PUSH
39191: LD_INT 35
39193: PUSH
39194: LD_INT 45
39196: PUSH
39197: LD_INT 46
39199: PUSH
39200: LD_INT 47
39202: PUSH
39203: LD_INT 82
39205: PUSH
39206: LD_INT 83
39208: PUSH
39209: LD_INT 84
39211: PUSH
39212: LD_INT 85
39214: PUSH
39215: LD_INT 87
39217: PUSH
39218: LD_INT 70
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: LD_INT 11
39226: PUSH
39227: LD_INT 3
39229: PUSH
39230: LD_INT 4
39232: PUSH
39233: LD_INT 5
39235: PUSH
39236: LD_INT 6
39238: PUSH
39239: LD_INT 15
39241: PUSH
39242: LD_INT 18
39244: PUSH
39245: LD_INT 7
39247: PUSH
39248: LD_INT 17
39250: PUSH
39251: LD_INT 8
39253: PUSH
39254: LD_INT 20
39256: PUSH
39257: LD_INT 21
39259: PUSH
39260: LD_INT 22
39262: PUSH
39263: LD_INT 72
39265: PUSH
39266: LD_INT 26
39268: PUSH
39269: LD_INT 69
39271: PUSH
39272: LD_INT 39
39274: PUSH
39275: LD_INT 40
39277: PUSH
39278: LD_INT 41
39280: PUSH
39281: LD_INT 42
39283: PUSH
39284: LD_INT 43
39286: PUSH
39287: LD_INT 48
39289: PUSH
39290: LD_INT 49
39292: PUSH
39293: LD_INT 50
39295: PUSH
39296: LD_INT 51
39298: PUSH
39299: LD_INT 52
39301: PUSH
39302: LD_INT 53
39304: PUSH
39305: LD_INT 54
39307: PUSH
39308: LD_INT 55
39310: PUSH
39311: LD_INT 56
39313: PUSH
39314: LD_INT 60
39316: PUSH
39317: LD_INT 61
39319: PUSH
39320: LD_INT 62
39322: PUSH
39323: LD_INT 66
39325: PUSH
39326: LD_INT 67
39328: PUSH
39329: LD_INT 68
39331: PUSH
39332: LD_INT 81
39334: PUSH
39335: LD_INT 82
39337: PUSH
39338: LD_INT 83
39340: PUSH
39341: LD_INT 84
39343: PUSH
39344: LD_INT 85
39346: PUSH
39347: LD_INT 87
39349: PUSH
39350: LD_INT 88
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: ST_TO_ADDR
39409: GO 39642
39411: LD_INT 3
39413: DOUBLE
39414: EQUAL
39415: IFTRUE 39419
39417: GO 39641
39419: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39420: LD_ADDR_VAR 0 4
39424: PUSH
39425: LD_INT 46
39427: PUSH
39428: LD_INT 47
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: LD_INT 82
39439: PUSH
39440: LD_INT 83
39442: PUSH
39443: LD_INT 84
39445: PUSH
39446: LD_INT 85
39448: PUSH
39449: LD_INT 86
39451: PUSH
39452: LD_INT 11
39454: PUSH
39455: LD_INT 9
39457: PUSH
39458: LD_INT 20
39460: PUSH
39461: LD_INT 19
39463: PUSH
39464: LD_INT 21
39466: PUSH
39467: LD_INT 24
39469: PUSH
39470: LD_INT 22
39472: PUSH
39473: LD_INT 25
39475: PUSH
39476: LD_INT 28
39478: PUSH
39479: LD_INT 29
39481: PUSH
39482: LD_INT 30
39484: PUSH
39485: LD_INT 31
39487: PUSH
39488: LD_INT 37
39490: PUSH
39491: LD_INT 38
39493: PUSH
39494: LD_INT 32
39496: PUSH
39497: LD_INT 27
39499: PUSH
39500: LD_INT 33
39502: PUSH
39503: LD_INT 69
39505: PUSH
39506: LD_INT 39
39508: PUSH
39509: LD_INT 34
39511: PUSH
39512: LD_INT 40
39514: PUSH
39515: LD_INT 71
39517: PUSH
39518: LD_INT 23
39520: PUSH
39521: LD_INT 44
39523: PUSH
39524: LD_INT 48
39526: PUSH
39527: LD_INT 49
39529: PUSH
39530: LD_INT 50
39532: PUSH
39533: LD_INT 51
39535: PUSH
39536: LD_INT 52
39538: PUSH
39539: LD_INT 53
39541: PUSH
39542: LD_INT 54
39544: PUSH
39545: LD_INT 55
39547: PUSH
39548: LD_INT 56
39550: PUSH
39551: LD_INT 57
39553: PUSH
39554: LD_INT 58
39556: PUSH
39557: LD_INT 59
39559: PUSH
39560: LD_INT 63
39562: PUSH
39563: LD_INT 64
39565: PUSH
39566: LD_INT 65
39568: PUSH
39569: LD_INT 82
39571: PUSH
39572: LD_INT 83
39574: PUSH
39575: LD_INT 84
39577: PUSH
39578: LD_INT 85
39580: PUSH
39581: LD_INT 86
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: ST_TO_ADDR
39639: GO 39642
39641: POP
// if state > - 1 and state < 3 then
39642: LD_VAR 0 3
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: GREATER
39651: PUSH
39652: LD_VAR 0 3
39656: PUSH
39657: LD_INT 3
39659: LESS
39660: AND
39661: IFFALSE 39718
// for i in result do
39663: LD_ADDR_VAR 0 5
39667: PUSH
39668: LD_VAR 0 4
39672: PUSH
39673: FOR_IN
39674: IFFALSE 39716
// if GetTech ( i , side ) <> state then
39676: LD_VAR 0 5
39680: PPUSH
39681: LD_VAR 0 1
39685: PPUSH
39686: CALL_OW 321
39690: PUSH
39691: LD_VAR 0 3
39695: NONEQUAL
39696: IFFALSE 39714
// result := result diff i ;
39698: LD_ADDR_VAR 0 4
39702: PUSH
39703: LD_VAR 0 4
39707: PUSH
39708: LD_VAR 0 5
39712: DIFF
39713: ST_TO_ADDR
39714: GO 39673
39716: POP
39717: POP
// end ;
39718: LD_VAR 0 4
39722: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39723: LD_INT 0
39725: PPUSH
39726: PPUSH
39727: PPUSH
// result := true ;
39728: LD_ADDR_VAR 0 3
39732: PUSH
39733: LD_INT 1
39735: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39736: LD_ADDR_VAR 0 5
39740: PUSH
39741: LD_VAR 0 2
39745: PPUSH
39746: CALL_OW 480
39750: ST_TO_ADDR
// if not tmp then
39751: LD_VAR 0 5
39755: NOT
39756: IFFALSE 39760
// exit ;
39758: GO 39809
// for i in tmp do
39760: LD_ADDR_VAR 0 4
39764: PUSH
39765: LD_VAR 0 5
39769: PUSH
39770: FOR_IN
39771: IFFALSE 39807
// if GetTech ( i , side ) <> state_researched then
39773: LD_VAR 0 4
39777: PPUSH
39778: LD_VAR 0 1
39782: PPUSH
39783: CALL_OW 321
39787: PUSH
39788: LD_INT 2
39790: NONEQUAL
39791: IFFALSE 39805
// begin result := false ;
39793: LD_ADDR_VAR 0 3
39797: PUSH
39798: LD_INT 0
39800: ST_TO_ADDR
// exit ;
39801: POP
39802: POP
39803: GO 39809
// end ;
39805: GO 39770
39807: POP
39808: POP
// end ;
39809: LD_VAR 0 3
39813: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39814: LD_INT 0
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
39827: PPUSH
39828: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39829: LD_VAR 0 1
39833: NOT
39834: PUSH
39835: LD_VAR 0 1
39839: PPUSH
39840: CALL_OW 257
39844: PUSH
39845: LD_INT 9
39847: NONEQUAL
39848: OR
39849: IFFALSE 39853
// exit ;
39851: GO 40426
// side := GetSide ( unit ) ;
39853: LD_ADDR_VAR 0 9
39857: PUSH
39858: LD_VAR 0 1
39862: PPUSH
39863: CALL_OW 255
39867: ST_TO_ADDR
// tech_space := tech_spacanom ;
39868: LD_ADDR_VAR 0 12
39872: PUSH
39873: LD_INT 29
39875: ST_TO_ADDR
// tech_time := tech_taurad ;
39876: LD_ADDR_VAR 0 13
39880: PUSH
39881: LD_INT 28
39883: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39884: LD_ADDR_VAR 0 11
39888: PUSH
39889: LD_VAR 0 1
39893: PPUSH
39894: CALL_OW 310
39898: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39899: LD_VAR 0 11
39903: PPUSH
39904: CALL_OW 247
39908: PUSH
39909: LD_INT 2
39911: EQUAL
39912: IFFALSE 39916
// exit ;
39914: GO 40426
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39916: LD_ADDR_VAR 0 8
39920: PUSH
39921: LD_INT 81
39923: PUSH
39924: LD_VAR 0 9
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 3
39935: PUSH
39936: LD_INT 21
39938: PUSH
39939: LD_INT 3
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PPUSH
39954: CALL_OW 69
39958: ST_TO_ADDR
// if not tmp then
39959: LD_VAR 0 8
39963: NOT
39964: IFFALSE 39968
// exit ;
39966: GO 40426
// if in_unit then
39968: LD_VAR 0 11
39972: IFFALSE 39996
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39974: LD_ADDR_VAR 0 10
39978: PUSH
39979: LD_VAR 0 8
39983: PPUSH
39984: LD_VAR 0 11
39988: PPUSH
39989: CALL_OW 74
39993: ST_TO_ADDR
39994: GO 40016
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39996: LD_ADDR_VAR 0 10
40000: PUSH
40001: LD_VAR 0 8
40005: PPUSH
40006: LD_VAR 0 1
40010: PPUSH
40011: CALL_OW 74
40015: ST_TO_ADDR
// if not enemy then
40016: LD_VAR 0 10
40020: NOT
40021: IFFALSE 40025
// exit ;
40023: GO 40426
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40025: LD_VAR 0 11
40029: PUSH
40030: LD_VAR 0 11
40034: PPUSH
40035: LD_VAR 0 10
40039: PPUSH
40040: CALL_OW 296
40044: PUSH
40045: LD_INT 13
40047: GREATER
40048: AND
40049: PUSH
40050: LD_VAR 0 1
40054: PPUSH
40055: LD_VAR 0 10
40059: PPUSH
40060: CALL_OW 296
40064: PUSH
40065: LD_INT 12
40067: GREATER
40068: OR
40069: IFFALSE 40073
// exit ;
40071: GO 40426
// missile := [ 1 ] ;
40073: LD_ADDR_VAR 0 14
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: EMPTY
40082: LIST
40083: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40084: LD_VAR 0 9
40088: PPUSH
40089: LD_VAR 0 12
40093: PPUSH
40094: CALL_OW 325
40098: IFFALSE 40127
// missile := Replace ( missile , missile + 1 , 2 ) ;
40100: LD_ADDR_VAR 0 14
40104: PUSH
40105: LD_VAR 0 14
40109: PPUSH
40110: LD_VAR 0 14
40114: PUSH
40115: LD_INT 1
40117: PLUS
40118: PPUSH
40119: LD_INT 2
40121: PPUSH
40122: CALL_OW 1
40126: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40127: LD_VAR 0 9
40131: PPUSH
40132: LD_VAR 0 13
40136: PPUSH
40137: CALL_OW 325
40141: PUSH
40142: LD_VAR 0 10
40146: PPUSH
40147: CALL_OW 255
40151: PPUSH
40152: LD_VAR 0 13
40156: PPUSH
40157: CALL_OW 325
40161: NOT
40162: AND
40163: IFFALSE 40192
// missile := Replace ( missile , missile + 1 , 3 ) ;
40165: LD_ADDR_VAR 0 14
40169: PUSH
40170: LD_VAR 0 14
40174: PPUSH
40175: LD_VAR 0 14
40179: PUSH
40180: LD_INT 1
40182: PLUS
40183: PPUSH
40184: LD_INT 3
40186: PPUSH
40187: CALL_OW 1
40191: ST_TO_ADDR
// if missile < 2 then
40192: LD_VAR 0 14
40196: PUSH
40197: LD_INT 2
40199: LESS
40200: IFFALSE 40204
// exit ;
40202: GO 40426
// x := GetX ( enemy ) ;
40204: LD_ADDR_VAR 0 4
40208: PUSH
40209: LD_VAR 0 10
40213: PPUSH
40214: CALL_OW 250
40218: ST_TO_ADDR
// y := GetY ( enemy ) ;
40219: LD_ADDR_VAR 0 5
40223: PUSH
40224: LD_VAR 0 10
40228: PPUSH
40229: CALL_OW 251
40233: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40234: LD_ADDR_VAR 0 6
40238: PUSH
40239: LD_VAR 0 4
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PPUSH
40248: LD_INT 1
40250: PPUSH
40251: CALL_OW 12
40255: PLUS
40256: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40257: LD_ADDR_VAR 0 7
40261: PUSH
40262: LD_VAR 0 5
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PPUSH
40271: LD_INT 1
40273: PPUSH
40274: CALL_OW 12
40278: PLUS
40279: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40280: LD_VAR 0 6
40284: PPUSH
40285: LD_VAR 0 7
40289: PPUSH
40290: CALL_OW 488
40294: NOT
40295: IFFALSE 40317
// begin _x := x ;
40297: LD_ADDR_VAR 0 6
40301: PUSH
40302: LD_VAR 0 4
40306: ST_TO_ADDR
// _y := y ;
40307: LD_ADDR_VAR 0 7
40311: PUSH
40312: LD_VAR 0 5
40316: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40317: LD_ADDR_VAR 0 3
40321: PUSH
40322: LD_INT 1
40324: PPUSH
40325: LD_VAR 0 14
40329: PPUSH
40330: CALL_OW 12
40334: ST_TO_ADDR
// case i of 1 :
40335: LD_VAR 0 3
40339: PUSH
40340: LD_INT 1
40342: DOUBLE
40343: EQUAL
40344: IFTRUE 40348
40346: GO 40365
40348: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40349: LD_VAR 0 1
40353: PPUSH
40354: LD_VAR 0 10
40358: PPUSH
40359: CALL_OW 115
40363: GO 40426
40365: LD_INT 2
40367: DOUBLE
40368: EQUAL
40369: IFTRUE 40373
40371: GO 40395
40373: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40374: LD_VAR 0 1
40378: PPUSH
40379: LD_VAR 0 6
40383: PPUSH
40384: LD_VAR 0 7
40388: PPUSH
40389: CALL_OW 153
40393: GO 40426
40395: LD_INT 3
40397: DOUBLE
40398: EQUAL
40399: IFTRUE 40403
40401: GO 40425
40403: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40404: LD_VAR 0 1
40408: PPUSH
40409: LD_VAR 0 6
40413: PPUSH
40414: LD_VAR 0 7
40418: PPUSH
40419: CALL_OW 154
40423: GO 40426
40425: POP
// end ;
40426: LD_VAR 0 2
40430: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40431: LD_INT 0
40433: PPUSH
40434: PPUSH
40435: PPUSH
40436: PPUSH
40437: PPUSH
40438: PPUSH
// if not unit or not building then
40439: LD_VAR 0 1
40443: NOT
40444: PUSH
40445: LD_VAR 0 2
40449: NOT
40450: OR
40451: IFFALSE 40455
// exit ;
40453: GO 40613
// x := GetX ( building ) ;
40455: LD_ADDR_VAR 0 5
40459: PUSH
40460: LD_VAR 0 2
40464: PPUSH
40465: CALL_OW 250
40469: ST_TO_ADDR
// y := GetY ( building ) ;
40470: LD_ADDR_VAR 0 6
40474: PUSH
40475: LD_VAR 0 2
40479: PPUSH
40480: CALL_OW 251
40484: ST_TO_ADDR
// for i = 0 to 5 do
40485: LD_ADDR_VAR 0 4
40489: PUSH
40490: DOUBLE
40491: LD_INT 0
40493: DEC
40494: ST_TO_ADDR
40495: LD_INT 5
40497: PUSH
40498: FOR_TO
40499: IFFALSE 40611
// begin _x := ShiftX ( x , i , 3 ) ;
40501: LD_ADDR_VAR 0 7
40505: PUSH
40506: LD_VAR 0 5
40510: PPUSH
40511: LD_VAR 0 4
40515: PPUSH
40516: LD_INT 3
40518: PPUSH
40519: CALL_OW 272
40523: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40524: LD_ADDR_VAR 0 8
40528: PUSH
40529: LD_VAR 0 6
40533: PPUSH
40534: LD_VAR 0 4
40538: PPUSH
40539: LD_INT 3
40541: PPUSH
40542: CALL_OW 273
40546: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40547: LD_VAR 0 7
40551: PPUSH
40552: LD_VAR 0 8
40556: PPUSH
40557: CALL_OW 488
40561: NOT
40562: IFFALSE 40566
// continue ;
40564: GO 40498
// if HexInfo ( _x , _y ) = 0 then
40566: LD_VAR 0 7
40570: PPUSH
40571: LD_VAR 0 8
40575: PPUSH
40576: CALL_OW 428
40580: PUSH
40581: LD_INT 0
40583: EQUAL
40584: IFFALSE 40609
// begin ComMoveXY ( unit , _x , _y ) ;
40586: LD_VAR 0 1
40590: PPUSH
40591: LD_VAR 0 7
40595: PPUSH
40596: LD_VAR 0 8
40600: PPUSH
40601: CALL_OW 111
// exit ;
40605: POP
40606: POP
40607: GO 40613
// end ; end ;
40609: GO 40498
40611: POP
40612: POP
// end ;
40613: LD_VAR 0 3
40617: RET
// export function ScanBase ( side , base_area ) ; begin
40618: LD_INT 0
40620: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40621: LD_ADDR_VAR 0 3
40625: PUSH
40626: LD_VAR 0 2
40630: PPUSH
40631: LD_INT 81
40633: PUSH
40634: LD_VAR 0 1
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PPUSH
40643: CALL_OW 70
40647: ST_TO_ADDR
// end ;
40648: LD_VAR 0 3
40652: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40653: LD_INT 0
40655: PPUSH
40656: PPUSH
40657: PPUSH
40658: PPUSH
// result := false ;
40659: LD_ADDR_VAR 0 2
40663: PUSH
40664: LD_INT 0
40666: ST_TO_ADDR
// side := GetSide ( unit ) ;
40667: LD_ADDR_VAR 0 3
40671: PUSH
40672: LD_VAR 0 1
40676: PPUSH
40677: CALL_OW 255
40681: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40682: LD_ADDR_VAR 0 4
40686: PUSH
40687: LD_VAR 0 1
40691: PPUSH
40692: CALL_OW 248
40696: ST_TO_ADDR
// case nat of 1 :
40697: LD_VAR 0 4
40701: PUSH
40702: LD_INT 1
40704: DOUBLE
40705: EQUAL
40706: IFTRUE 40710
40708: GO 40721
40710: POP
// tech := tech_lassight ; 2 :
40711: LD_ADDR_VAR 0 5
40715: PUSH
40716: LD_INT 12
40718: ST_TO_ADDR
40719: GO 40760
40721: LD_INT 2
40723: DOUBLE
40724: EQUAL
40725: IFTRUE 40729
40727: GO 40740
40729: POP
// tech := tech_mortar ; 3 :
40730: LD_ADDR_VAR 0 5
40734: PUSH
40735: LD_INT 41
40737: ST_TO_ADDR
40738: GO 40760
40740: LD_INT 3
40742: DOUBLE
40743: EQUAL
40744: IFTRUE 40748
40746: GO 40759
40748: POP
// tech := tech_bazooka ; end ;
40749: LD_ADDR_VAR 0 5
40753: PUSH
40754: LD_INT 44
40756: ST_TO_ADDR
40757: GO 40760
40759: POP
// if Researched ( side , tech ) then
40760: LD_VAR 0 3
40764: PPUSH
40765: LD_VAR 0 5
40769: PPUSH
40770: CALL_OW 325
40774: IFFALSE 40801
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40776: LD_ADDR_VAR 0 2
40780: PUSH
40781: LD_INT 5
40783: PUSH
40784: LD_INT 8
40786: PUSH
40787: LD_INT 9
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: LIST
40794: PUSH
40795: LD_VAR 0 4
40799: ARRAY
40800: ST_TO_ADDR
// end ;
40801: LD_VAR 0 2
40805: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40806: LD_INT 0
40808: PPUSH
40809: PPUSH
40810: PPUSH
// if not mines then
40811: LD_VAR 0 2
40815: NOT
40816: IFFALSE 40820
// exit ;
40818: GO 40964
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40820: LD_ADDR_VAR 0 5
40824: PUSH
40825: LD_INT 81
40827: PUSH
40828: LD_VAR 0 1
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 3
40839: PUSH
40840: LD_INT 21
40842: PUSH
40843: LD_INT 3
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PPUSH
40858: CALL_OW 69
40862: ST_TO_ADDR
// for i in mines do
40863: LD_ADDR_VAR 0 4
40867: PUSH
40868: LD_VAR 0 2
40872: PUSH
40873: FOR_IN
40874: IFFALSE 40962
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40876: LD_VAR 0 4
40880: PUSH
40881: LD_INT 1
40883: ARRAY
40884: PPUSH
40885: LD_VAR 0 4
40889: PUSH
40890: LD_INT 2
40892: ARRAY
40893: PPUSH
40894: CALL_OW 458
40898: NOT
40899: IFFALSE 40903
// continue ;
40901: GO 40873
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40903: LD_VAR 0 4
40907: PUSH
40908: LD_INT 1
40910: ARRAY
40911: PPUSH
40912: LD_VAR 0 4
40916: PUSH
40917: LD_INT 2
40919: ARRAY
40920: PPUSH
40921: CALL_OW 428
40925: PUSH
40926: LD_VAR 0 5
40930: IN
40931: IFFALSE 40960
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40933: LD_VAR 0 4
40937: PUSH
40938: LD_INT 1
40940: ARRAY
40941: PPUSH
40942: LD_VAR 0 4
40946: PUSH
40947: LD_INT 2
40949: ARRAY
40950: PPUSH
40951: LD_VAR 0 1
40955: PPUSH
40956: CALL_OW 456
// end ;
40960: GO 40873
40962: POP
40963: POP
// end ;
40964: LD_VAR 0 3
40968: RET
// export function Count ( array ) ; var i ; begin
40969: LD_INT 0
40971: PPUSH
40972: PPUSH
// result := 0 ;
40973: LD_ADDR_VAR 0 2
40977: PUSH
40978: LD_INT 0
40980: ST_TO_ADDR
// for i in array do
40981: LD_ADDR_VAR 0 3
40985: PUSH
40986: LD_VAR 0 1
40990: PUSH
40991: FOR_IN
40992: IFFALSE 41016
// if i then
40994: LD_VAR 0 3
40998: IFFALSE 41014
// result := result + 1 ;
41000: LD_ADDR_VAR 0 2
41004: PUSH
41005: LD_VAR 0 2
41009: PUSH
41010: LD_INT 1
41012: PLUS
41013: ST_TO_ADDR
41014: GO 40991
41016: POP
41017: POP
// end ;
41018: LD_VAR 0 2
41022: RET
// export function IsEmpty ( building ) ; begin
41023: LD_INT 0
41025: PPUSH
// if not building then
41026: LD_VAR 0 1
41030: NOT
41031: IFFALSE 41035
// exit ;
41033: GO 41078
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41035: LD_ADDR_VAR 0 2
41039: PUSH
41040: LD_VAR 0 1
41044: PUSH
41045: LD_INT 22
41047: PUSH
41048: LD_VAR 0 1
41052: PPUSH
41053: CALL_OW 255
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 58
41064: PUSH
41065: EMPTY
41066: LIST
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PPUSH
41072: CALL_OW 69
41076: IN
41077: ST_TO_ADDR
// end ;
41078: LD_VAR 0 2
41082: RET
// export function IsNotFull ( building ) ; var places ; begin
41083: LD_INT 0
41085: PPUSH
41086: PPUSH
// if not building then
41087: LD_VAR 0 1
41091: NOT
41092: IFFALSE 41096
// exit ;
41094: GO 41267
// result := false ;
41096: LD_ADDR_VAR 0 2
41100: PUSH
41101: LD_INT 0
41103: ST_TO_ADDR
// places := 0 ;
41104: LD_ADDR_VAR 0 3
41108: PUSH
41109: LD_INT 0
41111: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41112: LD_VAR 0 1
41116: PPUSH
41117: CALL_OW 266
41121: PUSH
41122: LD_INT 0
41124: DOUBLE
41125: EQUAL
41126: IFTRUE 41184
41128: LD_INT 1
41130: DOUBLE
41131: EQUAL
41132: IFTRUE 41184
41134: LD_INT 6
41136: DOUBLE
41137: EQUAL
41138: IFTRUE 41184
41140: LD_INT 7
41142: DOUBLE
41143: EQUAL
41144: IFTRUE 41184
41146: LD_INT 8
41148: DOUBLE
41149: EQUAL
41150: IFTRUE 41184
41152: LD_INT 4
41154: DOUBLE
41155: EQUAL
41156: IFTRUE 41184
41158: LD_INT 5
41160: DOUBLE
41161: EQUAL
41162: IFTRUE 41184
41164: LD_INT 2
41166: DOUBLE
41167: EQUAL
41168: IFTRUE 41184
41170: LD_INT 3
41172: DOUBLE
41173: EQUAL
41174: IFTRUE 41184
41176: LD_INT 35
41178: DOUBLE
41179: EQUAL
41180: IFTRUE 41184
41182: GO 41195
41184: POP
// places := 6 ; b_bunker , b_breastwork :
41185: LD_ADDR_VAR 0 3
41189: PUSH
41190: LD_INT 6
41192: ST_TO_ADDR
41193: GO 41240
41195: LD_INT 32
41197: DOUBLE
41198: EQUAL
41199: IFTRUE 41209
41201: LD_INT 31
41203: DOUBLE
41204: EQUAL
41205: IFTRUE 41209
41207: GO 41220
41209: POP
// places := 1 ; b_control_tower :
41210: LD_ADDR_VAR 0 3
41214: PUSH
41215: LD_INT 1
41217: ST_TO_ADDR
41218: GO 41240
41220: LD_INT 36
41222: DOUBLE
41223: EQUAL
41224: IFTRUE 41228
41226: GO 41239
41228: POP
// places := 3 ; end ;
41229: LD_ADDR_VAR 0 3
41233: PUSH
41234: LD_INT 3
41236: ST_TO_ADDR
41237: GO 41240
41239: POP
// if places then
41240: LD_VAR 0 3
41244: IFFALSE 41267
// result := UnitsInside ( building ) < places ;
41246: LD_ADDR_VAR 0 2
41250: PUSH
41251: LD_VAR 0 1
41255: PPUSH
41256: CALL_OW 313
41260: PUSH
41261: LD_VAR 0 3
41265: LESS
41266: ST_TO_ADDR
// end ;
41267: LD_VAR 0 2
41271: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41272: LD_INT 0
41274: PPUSH
41275: PPUSH
41276: PPUSH
41277: PPUSH
// tmp := [ ] ;
41278: LD_ADDR_VAR 0 3
41282: PUSH
41283: EMPTY
41284: ST_TO_ADDR
// list := [ ] ;
41285: LD_ADDR_VAR 0 5
41289: PUSH
41290: EMPTY
41291: ST_TO_ADDR
// for i = 16 to 25 do
41292: LD_ADDR_VAR 0 4
41296: PUSH
41297: DOUBLE
41298: LD_INT 16
41300: DEC
41301: ST_TO_ADDR
41302: LD_INT 25
41304: PUSH
41305: FOR_TO
41306: IFFALSE 41379
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41308: LD_ADDR_VAR 0 3
41312: PUSH
41313: LD_VAR 0 3
41317: PUSH
41318: LD_INT 22
41320: PUSH
41321: LD_VAR 0 1
41325: PPUSH
41326: CALL_OW 255
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 91
41337: PUSH
41338: LD_VAR 0 1
41342: PUSH
41343: LD_INT 6
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 30
41353: PUSH
41354: LD_VAR 0 4
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: LIST
41367: PUSH
41368: EMPTY
41369: LIST
41370: PPUSH
41371: CALL_OW 69
41375: ADD
41376: ST_TO_ADDR
41377: GO 41305
41379: POP
41380: POP
// for i = 1 to tmp do
41381: LD_ADDR_VAR 0 4
41385: PUSH
41386: DOUBLE
41387: LD_INT 1
41389: DEC
41390: ST_TO_ADDR
41391: LD_VAR 0 3
41395: PUSH
41396: FOR_TO
41397: IFFALSE 41485
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41399: LD_ADDR_VAR 0 5
41403: PUSH
41404: LD_VAR 0 5
41408: PUSH
41409: LD_VAR 0 3
41413: PUSH
41414: LD_VAR 0 4
41418: ARRAY
41419: PPUSH
41420: CALL_OW 266
41424: PUSH
41425: LD_VAR 0 3
41429: PUSH
41430: LD_VAR 0 4
41434: ARRAY
41435: PPUSH
41436: CALL_OW 250
41440: PUSH
41441: LD_VAR 0 3
41445: PUSH
41446: LD_VAR 0 4
41450: ARRAY
41451: PPUSH
41452: CALL_OW 251
41456: PUSH
41457: LD_VAR 0 3
41461: PUSH
41462: LD_VAR 0 4
41466: ARRAY
41467: PPUSH
41468: CALL_OW 254
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: PUSH
41479: EMPTY
41480: LIST
41481: ADD
41482: ST_TO_ADDR
41483: GO 41396
41485: POP
41486: POP
// result := list ;
41487: LD_ADDR_VAR 0 2
41491: PUSH
41492: LD_VAR 0 5
41496: ST_TO_ADDR
// end ;
41497: LD_VAR 0 2
41501: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41502: LD_INT 0
41504: PPUSH
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
// if not factory then
41511: LD_VAR 0 1
41515: NOT
41516: IFFALSE 41520
// exit ;
41518: GO 42113
// if control = control_apeman then
41520: LD_VAR 0 4
41524: PUSH
41525: LD_INT 5
41527: EQUAL
41528: IFFALSE 41637
// begin tmp := UnitsInside ( factory ) ;
41530: LD_ADDR_VAR 0 8
41534: PUSH
41535: LD_VAR 0 1
41539: PPUSH
41540: CALL_OW 313
41544: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41545: LD_VAR 0 8
41549: PPUSH
41550: LD_INT 25
41552: PUSH
41553: LD_INT 12
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PPUSH
41560: CALL_OW 72
41564: NOT
41565: IFFALSE 41575
// control := control_manual ;
41567: LD_ADDR_VAR 0 4
41571: PUSH
41572: LD_INT 1
41574: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41575: LD_ADDR_VAR 0 8
41579: PUSH
41580: LD_VAR 0 1
41584: PPUSH
41585: CALL 41272 0 1
41589: ST_TO_ADDR
// if tmp then
41590: LD_VAR 0 8
41594: IFFALSE 41637
// begin for i in tmp do
41596: LD_ADDR_VAR 0 7
41600: PUSH
41601: LD_VAR 0 8
41605: PUSH
41606: FOR_IN
41607: IFFALSE 41635
// if i [ 1 ] = b_ext_radio then
41609: LD_VAR 0 7
41613: PUSH
41614: LD_INT 1
41616: ARRAY
41617: PUSH
41618: LD_INT 22
41620: EQUAL
41621: IFFALSE 41633
// begin control := control_remote ;
41623: LD_ADDR_VAR 0 4
41627: PUSH
41628: LD_INT 2
41630: ST_TO_ADDR
// break ;
41631: GO 41635
// end ;
41633: GO 41606
41635: POP
41636: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41637: LD_VAR 0 1
41641: PPUSH
41642: LD_VAR 0 2
41646: PPUSH
41647: LD_VAR 0 3
41651: PPUSH
41652: LD_VAR 0 4
41656: PPUSH
41657: LD_VAR 0 5
41661: PPUSH
41662: CALL_OW 448
41666: IFFALSE 41701
// begin result := [ chassis , engine , control , weapon ] ;
41668: LD_ADDR_VAR 0 6
41672: PUSH
41673: LD_VAR 0 2
41677: PUSH
41678: LD_VAR 0 3
41682: PUSH
41683: LD_VAR 0 4
41687: PUSH
41688: LD_VAR 0 5
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: ST_TO_ADDR
// exit ;
41699: GO 42113
// end ; _chassis := AvailableChassisList ( factory ) ;
41701: LD_ADDR_VAR 0 9
41705: PUSH
41706: LD_VAR 0 1
41710: PPUSH
41711: CALL_OW 475
41715: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41716: LD_ADDR_VAR 0 11
41720: PUSH
41721: LD_VAR 0 1
41725: PPUSH
41726: CALL_OW 476
41730: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41731: LD_ADDR_VAR 0 12
41735: PUSH
41736: LD_VAR 0 1
41740: PPUSH
41741: CALL_OW 477
41745: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41746: LD_ADDR_VAR 0 10
41750: PUSH
41751: LD_VAR 0 1
41755: PPUSH
41756: CALL_OW 478
41760: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41761: LD_VAR 0 9
41765: NOT
41766: PUSH
41767: LD_VAR 0 11
41771: NOT
41772: OR
41773: PUSH
41774: LD_VAR 0 12
41778: NOT
41779: OR
41780: PUSH
41781: LD_VAR 0 10
41785: NOT
41786: OR
41787: IFFALSE 41822
// begin result := [ chassis , engine , control , weapon ] ;
41789: LD_ADDR_VAR 0 6
41793: PUSH
41794: LD_VAR 0 2
41798: PUSH
41799: LD_VAR 0 3
41803: PUSH
41804: LD_VAR 0 4
41808: PUSH
41809: LD_VAR 0 5
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: ST_TO_ADDR
// exit ;
41820: GO 42113
// end ; if not chassis in _chassis then
41822: LD_VAR 0 2
41826: PUSH
41827: LD_VAR 0 9
41831: IN
41832: NOT
41833: IFFALSE 41859
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41835: LD_ADDR_VAR 0 2
41839: PUSH
41840: LD_VAR 0 9
41844: PUSH
41845: LD_INT 1
41847: PPUSH
41848: LD_VAR 0 9
41852: PPUSH
41853: CALL_OW 12
41857: ARRAY
41858: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41859: LD_VAR 0 2
41863: PPUSH
41864: LD_VAR 0 3
41868: PPUSH
41869: CALL 42118 0 2
41873: NOT
41874: IFFALSE 41933
// repeat engine := _engine [ 1 ] ;
41876: LD_ADDR_VAR 0 3
41880: PUSH
41881: LD_VAR 0 11
41885: PUSH
41886: LD_INT 1
41888: ARRAY
41889: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41890: LD_ADDR_VAR 0 11
41894: PUSH
41895: LD_VAR 0 11
41899: PPUSH
41900: LD_INT 1
41902: PPUSH
41903: CALL_OW 3
41907: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41908: LD_VAR 0 2
41912: PPUSH
41913: LD_VAR 0 3
41917: PPUSH
41918: CALL 42118 0 2
41922: PUSH
41923: LD_VAR 0 11
41927: PUSH
41928: EMPTY
41929: EQUAL
41930: OR
41931: IFFALSE 41876
// if not control in _control then
41933: LD_VAR 0 4
41937: PUSH
41938: LD_VAR 0 12
41942: IN
41943: NOT
41944: IFFALSE 41970
// control := _control [ rand ( 1 , _control ) ] ;
41946: LD_ADDR_VAR 0 4
41950: PUSH
41951: LD_VAR 0 12
41955: PUSH
41956: LD_INT 1
41958: PPUSH
41959: LD_VAR 0 12
41963: PPUSH
41964: CALL_OW 12
41968: ARRAY
41969: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41970: LD_VAR 0 2
41974: PPUSH
41975: LD_VAR 0 5
41979: PPUSH
41980: CALL 42338 0 2
41984: NOT
41985: IFFALSE 42044
// repeat weapon := _weapon [ 1 ] ;
41987: LD_ADDR_VAR 0 5
41991: PUSH
41992: LD_VAR 0 10
41996: PUSH
41997: LD_INT 1
41999: ARRAY
42000: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42001: LD_ADDR_VAR 0 10
42005: PUSH
42006: LD_VAR 0 10
42010: PPUSH
42011: LD_INT 1
42013: PPUSH
42014: CALL_OW 3
42018: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42019: LD_VAR 0 2
42023: PPUSH
42024: LD_VAR 0 5
42028: PPUSH
42029: CALL 42338 0 2
42033: PUSH
42034: LD_VAR 0 10
42038: PUSH
42039: EMPTY
42040: EQUAL
42041: OR
42042: IFFALSE 41987
// result := [ ] ;
42044: LD_ADDR_VAR 0 6
42048: PUSH
42049: EMPTY
42050: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42051: LD_VAR 0 1
42055: PPUSH
42056: LD_VAR 0 2
42060: PPUSH
42061: LD_VAR 0 3
42065: PPUSH
42066: LD_VAR 0 4
42070: PPUSH
42071: LD_VAR 0 5
42075: PPUSH
42076: CALL_OW 448
42080: IFFALSE 42113
// result := [ chassis , engine , control , weapon ] ;
42082: LD_ADDR_VAR 0 6
42086: PUSH
42087: LD_VAR 0 2
42091: PUSH
42092: LD_VAR 0 3
42096: PUSH
42097: LD_VAR 0 4
42101: PUSH
42102: LD_VAR 0 5
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: ST_TO_ADDR
// end ;
42113: LD_VAR 0 6
42117: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42118: LD_INT 0
42120: PPUSH
// if not chassis or not engine then
42121: LD_VAR 0 1
42125: NOT
42126: PUSH
42127: LD_VAR 0 2
42131: NOT
42132: OR
42133: IFFALSE 42137
// exit ;
42135: GO 42333
// case engine of engine_solar :
42137: LD_VAR 0 2
42141: PUSH
42142: LD_INT 2
42144: DOUBLE
42145: EQUAL
42146: IFTRUE 42150
42148: GO 42188
42150: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42151: LD_ADDR_VAR 0 3
42155: PUSH
42156: LD_INT 11
42158: PUSH
42159: LD_INT 12
42161: PUSH
42162: LD_INT 13
42164: PUSH
42165: LD_INT 14
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: LD_INT 3
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: ST_TO_ADDR
42186: GO 42317
42188: LD_INT 1
42190: DOUBLE
42191: EQUAL
42192: IFTRUE 42196
42194: GO 42258
42196: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42197: LD_ADDR_VAR 0 3
42201: PUSH
42202: LD_INT 11
42204: PUSH
42205: LD_INT 12
42207: PUSH
42208: LD_INT 13
42210: PUSH
42211: LD_INT 14
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: LD_INT 3
42222: PUSH
42223: LD_INT 4
42225: PUSH
42226: LD_INT 5
42228: PUSH
42229: LD_INT 21
42231: PUSH
42232: LD_INT 23
42234: PUSH
42235: LD_INT 22
42237: PUSH
42238: LD_INT 24
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: ST_TO_ADDR
42256: GO 42317
42258: LD_INT 3
42260: DOUBLE
42261: EQUAL
42262: IFTRUE 42266
42264: GO 42316
42266: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42267: LD_ADDR_VAR 0 3
42271: PUSH
42272: LD_INT 13
42274: PUSH
42275: LD_INT 14
42277: PUSH
42278: LD_INT 2
42280: PUSH
42281: LD_INT 3
42283: PUSH
42284: LD_INT 4
42286: PUSH
42287: LD_INT 5
42289: PUSH
42290: LD_INT 21
42292: PUSH
42293: LD_INT 22
42295: PUSH
42296: LD_INT 23
42298: PUSH
42299: LD_INT 24
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: ST_TO_ADDR
42314: GO 42317
42316: POP
// result := ( chassis in result ) ;
42317: LD_ADDR_VAR 0 3
42321: PUSH
42322: LD_VAR 0 1
42326: PUSH
42327: LD_VAR 0 3
42331: IN
42332: ST_TO_ADDR
// end ;
42333: LD_VAR 0 3
42337: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42338: LD_INT 0
42340: PPUSH
// if not chassis or not weapon then
42341: LD_VAR 0 1
42345: NOT
42346: PUSH
42347: LD_VAR 0 2
42351: NOT
42352: OR
42353: IFFALSE 42357
// exit ;
42355: GO 43419
// case weapon of us_machine_gun :
42357: LD_VAR 0 2
42361: PUSH
42362: LD_INT 2
42364: DOUBLE
42365: EQUAL
42366: IFTRUE 42370
42368: GO 42400
42370: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42371: LD_ADDR_VAR 0 3
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: LD_INT 3
42384: PUSH
42385: LD_INT 4
42387: PUSH
42388: LD_INT 5
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: ST_TO_ADDR
42398: GO 43403
42400: LD_INT 3
42402: DOUBLE
42403: EQUAL
42404: IFTRUE 42408
42406: GO 42438
42408: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42409: LD_ADDR_VAR 0 3
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: LD_INT 3
42422: PUSH
42423: LD_INT 4
42425: PUSH
42426: LD_INT 5
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: ST_TO_ADDR
42436: GO 43403
42438: LD_INT 11
42440: DOUBLE
42441: EQUAL
42442: IFTRUE 42446
42444: GO 42476
42446: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42447: LD_ADDR_VAR 0 3
42451: PUSH
42452: LD_INT 1
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: LD_INT 3
42460: PUSH
42461: LD_INT 4
42463: PUSH
42464: LD_INT 5
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: ST_TO_ADDR
42474: GO 43403
42476: LD_INT 4
42478: DOUBLE
42479: EQUAL
42480: IFTRUE 42484
42482: GO 42510
42484: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42485: LD_ADDR_VAR 0 3
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: LD_INT 3
42495: PUSH
42496: LD_INT 4
42498: PUSH
42499: LD_INT 5
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: ST_TO_ADDR
42508: GO 43403
42510: LD_INT 5
42512: DOUBLE
42513: EQUAL
42514: IFTRUE 42518
42516: GO 42544
42518: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42519: LD_ADDR_VAR 0 3
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: LD_INT 3
42529: PUSH
42530: LD_INT 4
42532: PUSH
42533: LD_INT 5
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: ST_TO_ADDR
42542: GO 43403
42544: LD_INT 9
42546: DOUBLE
42547: EQUAL
42548: IFTRUE 42552
42550: GO 42578
42552: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42553: LD_ADDR_VAR 0 3
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: LD_INT 3
42563: PUSH
42564: LD_INT 4
42566: PUSH
42567: LD_INT 5
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: ST_TO_ADDR
42576: GO 43403
42578: LD_INT 7
42580: DOUBLE
42581: EQUAL
42582: IFTRUE 42586
42584: GO 42612
42586: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42587: LD_ADDR_VAR 0 3
42591: PUSH
42592: LD_INT 2
42594: PUSH
42595: LD_INT 3
42597: PUSH
42598: LD_INT 4
42600: PUSH
42601: LD_INT 5
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: ST_TO_ADDR
42610: GO 43403
42612: LD_INT 12
42614: DOUBLE
42615: EQUAL
42616: IFTRUE 42620
42618: GO 42646
42620: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42621: LD_ADDR_VAR 0 3
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: LD_INT 3
42631: PUSH
42632: LD_INT 4
42634: PUSH
42635: LD_INT 5
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: ST_TO_ADDR
42644: GO 43403
42646: LD_INT 13
42648: DOUBLE
42649: EQUAL
42650: IFTRUE 42654
42652: GO 42680
42654: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42655: LD_ADDR_VAR 0 3
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: LD_INT 3
42665: PUSH
42666: LD_INT 4
42668: PUSH
42669: LD_INT 5
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: ST_TO_ADDR
42678: GO 43403
42680: LD_INT 14
42682: DOUBLE
42683: EQUAL
42684: IFTRUE 42688
42686: GO 42706
42688: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42689: LD_ADDR_VAR 0 3
42693: PUSH
42694: LD_INT 4
42696: PUSH
42697: LD_INT 5
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: ST_TO_ADDR
42704: GO 43403
42706: LD_INT 6
42708: DOUBLE
42709: EQUAL
42710: IFTRUE 42714
42712: GO 42732
42714: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42715: LD_ADDR_VAR 0 3
42719: PUSH
42720: LD_INT 4
42722: PUSH
42723: LD_INT 5
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: ST_TO_ADDR
42730: GO 43403
42732: LD_INT 10
42734: DOUBLE
42735: EQUAL
42736: IFTRUE 42740
42738: GO 42758
42740: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42741: LD_ADDR_VAR 0 3
42745: PUSH
42746: LD_INT 4
42748: PUSH
42749: LD_INT 5
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: ST_TO_ADDR
42756: GO 43403
42758: LD_INT 22
42760: DOUBLE
42761: EQUAL
42762: IFTRUE 42766
42764: GO 42792
42766: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42767: LD_ADDR_VAR 0 3
42771: PUSH
42772: LD_INT 11
42774: PUSH
42775: LD_INT 12
42777: PUSH
42778: LD_INT 13
42780: PUSH
42781: LD_INT 14
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: ST_TO_ADDR
42790: GO 43403
42792: LD_INT 23
42794: DOUBLE
42795: EQUAL
42796: IFTRUE 42800
42798: GO 42826
42800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42801: LD_ADDR_VAR 0 3
42805: PUSH
42806: LD_INT 11
42808: PUSH
42809: LD_INT 12
42811: PUSH
42812: LD_INT 13
42814: PUSH
42815: LD_INT 14
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: ST_TO_ADDR
42824: GO 43403
42826: LD_INT 24
42828: DOUBLE
42829: EQUAL
42830: IFTRUE 42834
42832: GO 42860
42834: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42835: LD_ADDR_VAR 0 3
42839: PUSH
42840: LD_INT 11
42842: PUSH
42843: LD_INT 12
42845: PUSH
42846: LD_INT 13
42848: PUSH
42849: LD_INT 14
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: ST_TO_ADDR
42858: GO 43403
42860: LD_INT 30
42862: DOUBLE
42863: EQUAL
42864: IFTRUE 42868
42866: GO 42894
42868: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42869: LD_ADDR_VAR 0 3
42873: PUSH
42874: LD_INT 11
42876: PUSH
42877: LD_INT 12
42879: PUSH
42880: LD_INT 13
42882: PUSH
42883: LD_INT 14
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: ST_TO_ADDR
42892: GO 43403
42894: LD_INT 25
42896: DOUBLE
42897: EQUAL
42898: IFTRUE 42902
42900: GO 42920
42902: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42903: LD_ADDR_VAR 0 3
42907: PUSH
42908: LD_INT 13
42910: PUSH
42911: LD_INT 14
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: ST_TO_ADDR
42918: GO 43403
42920: LD_INT 27
42922: DOUBLE
42923: EQUAL
42924: IFTRUE 42928
42926: GO 42946
42928: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42929: LD_ADDR_VAR 0 3
42933: PUSH
42934: LD_INT 13
42936: PUSH
42937: LD_INT 14
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: ST_TO_ADDR
42944: GO 43403
42946: LD_EXP 48
42950: DOUBLE
42951: EQUAL
42952: IFTRUE 42956
42954: GO 42982
42956: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42957: LD_ADDR_VAR 0 3
42961: PUSH
42962: LD_INT 11
42964: PUSH
42965: LD_INT 12
42967: PUSH
42968: LD_INT 13
42970: PUSH
42971: LD_INT 14
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: ST_TO_ADDR
42980: GO 43403
42982: LD_INT 28
42984: DOUBLE
42985: EQUAL
42986: IFTRUE 42990
42988: GO 43008
42990: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42991: LD_ADDR_VAR 0 3
42995: PUSH
42996: LD_INT 13
42998: PUSH
42999: LD_INT 14
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: ST_TO_ADDR
43006: GO 43403
43008: LD_INT 29
43010: DOUBLE
43011: EQUAL
43012: IFTRUE 43016
43014: GO 43034
43016: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43017: LD_ADDR_VAR 0 3
43021: PUSH
43022: LD_INT 13
43024: PUSH
43025: LD_INT 14
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: ST_TO_ADDR
43032: GO 43403
43034: LD_INT 31
43036: DOUBLE
43037: EQUAL
43038: IFTRUE 43042
43040: GO 43060
43042: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43043: LD_ADDR_VAR 0 3
43047: PUSH
43048: LD_INT 13
43050: PUSH
43051: LD_INT 14
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: ST_TO_ADDR
43058: GO 43403
43060: LD_INT 26
43062: DOUBLE
43063: EQUAL
43064: IFTRUE 43068
43066: GO 43086
43068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43069: LD_ADDR_VAR 0 3
43073: PUSH
43074: LD_INT 13
43076: PUSH
43077: LD_INT 14
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: ST_TO_ADDR
43084: GO 43403
43086: LD_INT 42
43088: DOUBLE
43089: EQUAL
43090: IFTRUE 43094
43092: GO 43120
43094: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43095: LD_ADDR_VAR 0 3
43099: PUSH
43100: LD_INT 21
43102: PUSH
43103: LD_INT 22
43105: PUSH
43106: LD_INT 23
43108: PUSH
43109: LD_INT 24
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: ST_TO_ADDR
43118: GO 43403
43120: LD_INT 43
43122: DOUBLE
43123: EQUAL
43124: IFTRUE 43128
43126: GO 43154
43128: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43129: LD_ADDR_VAR 0 3
43133: PUSH
43134: LD_INT 21
43136: PUSH
43137: LD_INT 22
43139: PUSH
43140: LD_INT 23
43142: PUSH
43143: LD_INT 24
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: ST_TO_ADDR
43152: GO 43403
43154: LD_INT 44
43156: DOUBLE
43157: EQUAL
43158: IFTRUE 43162
43160: GO 43188
43162: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43163: LD_ADDR_VAR 0 3
43167: PUSH
43168: LD_INT 21
43170: PUSH
43171: LD_INT 22
43173: PUSH
43174: LD_INT 23
43176: PUSH
43177: LD_INT 24
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: ST_TO_ADDR
43186: GO 43403
43188: LD_INT 45
43190: DOUBLE
43191: EQUAL
43192: IFTRUE 43196
43194: GO 43222
43196: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43197: LD_ADDR_VAR 0 3
43201: PUSH
43202: LD_INT 21
43204: PUSH
43205: LD_INT 22
43207: PUSH
43208: LD_INT 23
43210: PUSH
43211: LD_INT 24
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: ST_TO_ADDR
43220: GO 43403
43222: LD_INT 49
43224: DOUBLE
43225: EQUAL
43226: IFTRUE 43230
43228: GO 43256
43230: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43231: LD_ADDR_VAR 0 3
43235: PUSH
43236: LD_INT 21
43238: PUSH
43239: LD_INT 22
43241: PUSH
43242: LD_INT 23
43244: PUSH
43245: LD_INT 24
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: ST_TO_ADDR
43254: GO 43403
43256: LD_INT 51
43258: DOUBLE
43259: EQUAL
43260: IFTRUE 43264
43262: GO 43290
43264: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43265: LD_ADDR_VAR 0 3
43269: PUSH
43270: LD_INT 21
43272: PUSH
43273: LD_INT 22
43275: PUSH
43276: LD_INT 23
43278: PUSH
43279: LD_INT 24
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: ST_TO_ADDR
43288: GO 43403
43290: LD_INT 52
43292: DOUBLE
43293: EQUAL
43294: IFTRUE 43298
43296: GO 43324
43298: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43299: LD_ADDR_VAR 0 3
43303: PUSH
43304: LD_INT 21
43306: PUSH
43307: LD_INT 22
43309: PUSH
43310: LD_INT 23
43312: PUSH
43313: LD_INT 24
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: ST_TO_ADDR
43322: GO 43403
43324: LD_INT 53
43326: DOUBLE
43327: EQUAL
43328: IFTRUE 43332
43330: GO 43350
43332: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43333: LD_ADDR_VAR 0 3
43337: PUSH
43338: LD_INT 23
43340: PUSH
43341: LD_INT 24
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: ST_TO_ADDR
43348: GO 43403
43350: LD_INT 46
43352: DOUBLE
43353: EQUAL
43354: IFTRUE 43358
43356: GO 43376
43358: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43359: LD_ADDR_VAR 0 3
43363: PUSH
43364: LD_INT 23
43366: PUSH
43367: LD_INT 24
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: ST_TO_ADDR
43374: GO 43403
43376: LD_INT 47
43378: DOUBLE
43379: EQUAL
43380: IFTRUE 43384
43382: GO 43402
43384: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43385: LD_ADDR_VAR 0 3
43389: PUSH
43390: LD_INT 23
43392: PUSH
43393: LD_INT 24
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: ST_TO_ADDR
43400: GO 43403
43402: POP
// result := ( chassis in result ) ;
43403: LD_ADDR_VAR 0 3
43407: PUSH
43408: LD_VAR 0 1
43412: PUSH
43413: LD_VAR 0 3
43417: IN
43418: ST_TO_ADDR
// end ;
43419: LD_VAR 0 3
43423: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43424: LD_INT 0
43426: PPUSH
43427: PPUSH
43428: PPUSH
43429: PPUSH
43430: PPUSH
43431: PPUSH
43432: PPUSH
// result := array ;
43433: LD_ADDR_VAR 0 5
43437: PUSH
43438: LD_VAR 0 1
43442: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43443: LD_VAR 0 1
43447: NOT
43448: PUSH
43449: LD_VAR 0 2
43453: NOT
43454: OR
43455: PUSH
43456: LD_VAR 0 3
43460: NOT
43461: OR
43462: PUSH
43463: LD_VAR 0 2
43467: PUSH
43468: LD_VAR 0 1
43472: GREATER
43473: OR
43474: PUSH
43475: LD_VAR 0 3
43479: PUSH
43480: LD_VAR 0 1
43484: GREATER
43485: OR
43486: IFFALSE 43490
// exit ;
43488: GO 43786
// if direction then
43490: LD_VAR 0 4
43494: IFFALSE 43558
// begin d := 1 ;
43496: LD_ADDR_VAR 0 9
43500: PUSH
43501: LD_INT 1
43503: ST_TO_ADDR
// if i_from > i_to then
43504: LD_VAR 0 2
43508: PUSH
43509: LD_VAR 0 3
43513: GREATER
43514: IFFALSE 43540
// length := ( array - i_from ) + i_to else
43516: LD_ADDR_VAR 0 11
43520: PUSH
43521: LD_VAR 0 1
43525: PUSH
43526: LD_VAR 0 2
43530: MINUS
43531: PUSH
43532: LD_VAR 0 3
43536: PLUS
43537: ST_TO_ADDR
43538: GO 43556
// length := i_to - i_from ;
43540: LD_ADDR_VAR 0 11
43544: PUSH
43545: LD_VAR 0 3
43549: PUSH
43550: LD_VAR 0 2
43554: MINUS
43555: ST_TO_ADDR
// end else
43556: GO 43619
// begin d := - 1 ;
43558: LD_ADDR_VAR 0 9
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: ST_TO_ADDR
// if i_from > i_to then
43567: LD_VAR 0 2
43571: PUSH
43572: LD_VAR 0 3
43576: GREATER
43577: IFFALSE 43597
// length := i_from - i_to else
43579: LD_ADDR_VAR 0 11
43583: PUSH
43584: LD_VAR 0 2
43588: PUSH
43589: LD_VAR 0 3
43593: MINUS
43594: ST_TO_ADDR
43595: GO 43619
// length := ( array - i_to ) + i_from ;
43597: LD_ADDR_VAR 0 11
43601: PUSH
43602: LD_VAR 0 1
43606: PUSH
43607: LD_VAR 0 3
43611: MINUS
43612: PUSH
43613: LD_VAR 0 2
43617: PLUS
43618: ST_TO_ADDR
// end ; if not length then
43619: LD_VAR 0 11
43623: NOT
43624: IFFALSE 43628
// exit ;
43626: GO 43786
// tmp := array ;
43628: LD_ADDR_VAR 0 10
43632: PUSH
43633: LD_VAR 0 1
43637: ST_TO_ADDR
// for i = 1 to length do
43638: LD_ADDR_VAR 0 6
43642: PUSH
43643: DOUBLE
43644: LD_INT 1
43646: DEC
43647: ST_TO_ADDR
43648: LD_VAR 0 11
43652: PUSH
43653: FOR_TO
43654: IFFALSE 43774
// begin for j = 1 to array do
43656: LD_ADDR_VAR 0 7
43660: PUSH
43661: DOUBLE
43662: LD_INT 1
43664: DEC
43665: ST_TO_ADDR
43666: LD_VAR 0 1
43670: PUSH
43671: FOR_TO
43672: IFFALSE 43760
// begin k := j + d ;
43674: LD_ADDR_VAR 0 8
43678: PUSH
43679: LD_VAR 0 7
43683: PUSH
43684: LD_VAR 0 9
43688: PLUS
43689: ST_TO_ADDR
// if k > array then
43690: LD_VAR 0 8
43694: PUSH
43695: LD_VAR 0 1
43699: GREATER
43700: IFFALSE 43710
// k := 1 ;
43702: LD_ADDR_VAR 0 8
43706: PUSH
43707: LD_INT 1
43709: ST_TO_ADDR
// if not k then
43710: LD_VAR 0 8
43714: NOT
43715: IFFALSE 43727
// k := array ;
43717: LD_ADDR_VAR 0 8
43721: PUSH
43722: LD_VAR 0 1
43726: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43727: LD_ADDR_VAR 0 10
43731: PUSH
43732: LD_VAR 0 10
43736: PPUSH
43737: LD_VAR 0 8
43741: PPUSH
43742: LD_VAR 0 1
43746: PUSH
43747: LD_VAR 0 7
43751: ARRAY
43752: PPUSH
43753: CALL_OW 1
43757: ST_TO_ADDR
// end ;
43758: GO 43671
43760: POP
43761: POP
// array := tmp ;
43762: LD_ADDR_VAR 0 1
43766: PUSH
43767: LD_VAR 0 10
43771: ST_TO_ADDR
// end ;
43772: GO 43653
43774: POP
43775: POP
// result := array ;
43776: LD_ADDR_VAR 0 5
43780: PUSH
43781: LD_VAR 0 1
43785: ST_TO_ADDR
// end ;
43786: LD_VAR 0 5
43790: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43791: LD_INT 0
43793: PPUSH
43794: PPUSH
// result := 0 ;
43795: LD_ADDR_VAR 0 3
43799: PUSH
43800: LD_INT 0
43802: ST_TO_ADDR
// if not array or not value in array then
43803: LD_VAR 0 1
43807: NOT
43808: PUSH
43809: LD_VAR 0 2
43813: PUSH
43814: LD_VAR 0 1
43818: IN
43819: NOT
43820: OR
43821: IFFALSE 43825
// exit ;
43823: GO 43879
// for i = 1 to array do
43825: LD_ADDR_VAR 0 4
43829: PUSH
43830: DOUBLE
43831: LD_INT 1
43833: DEC
43834: ST_TO_ADDR
43835: LD_VAR 0 1
43839: PUSH
43840: FOR_TO
43841: IFFALSE 43877
// if value = array [ i ] then
43843: LD_VAR 0 2
43847: PUSH
43848: LD_VAR 0 1
43852: PUSH
43853: LD_VAR 0 4
43857: ARRAY
43858: EQUAL
43859: IFFALSE 43875
// begin result := i ;
43861: LD_ADDR_VAR 0 3
43865: PUSH
43866: LD_VAR 0 4
43870: ST_TO_ADDR
// exit ;
43871: POP
43872: POP
43873: GO 43879
// end ;
43875: GO 43840
43877: POP
43878: POP
// end ;
43879: LD_VAR 0 3
43883: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43884: LD_INT 0
43886: PPUSH
// vc_chassis := chassis ;
43887: LD_ADDR_OWVAR 37
43891: PUSH
43892: LD_VAR 0 1
43896: ST_TO_ADDR
// vc_engine := engine ;
43897: LD_ADDR_OWVAR 39
43901: PUSH
43902: LD_VAR 0 2
43906: ST_TO_ADDR
// vc_control := control ;
43907: LD_ADDR_OWVAR 38
43911: PUSH
43912: LD_VAR 0 3
43916: ST_TO_ADDR
// vc_weapon := weapon ;
43917: LD_ADDR_OWVAR 40
43921: PUSH
43922: LD_VAR 0 4
43926: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43927: LD_ADDR_OWVAR 41
43931: PUSH
43932: LD_VAR 0 5
43936: ST_TO_ADDR
// end ;
43937: LD_VAR 0 6
43941: RET
// export function WantPlant ( unit ) ; var task ; begin
43942: LD_INT 0
43944: PPUSH
43945: PPUSH
// result := false ;
43946: LD_ADDR_VAR 0 2
43950: PUSH
43951: LD_INT 0
43953: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43954: LD_ADDR_VAR 0 3
43958: PUSH
43959: LD_VAR 0 1
43963: PPUSH
43964: CALL_OW 437
43968: ST_TO_ADDR
// if task then
43969: LD_VAR 0 3
43973: IFFALSE 44001
// if task [ 1 ] [ 1 ] = p then
43975: LD_VAR 0 3
43979: PUSH
43980: LD_INT 1
43982: ARRAY
43983: PUSH
43984: LD_INT 1
43986: ARRAY
43987: PUSH
43988: LD_STRING p
43990: EQUAL
43991: IFFALSE 44001
// result := true ;
43993: LD_ADDR_VAR 0 2
43997: PUSH
43998: LD_INT 1
44000: ST_TO_ADDR
// end ;
44001: LD_VAR 0 2
44005: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44006: LD_INT 0
44008: PPUSH
44009: PPUSH
44010: PPUSH
44011: PPUSH
// if pos < 1 then
44012: LD_VAR 0 2
44016: PUSH
44017: LD_INT 1
44019: LESS
44020: IFFALSE 44024
// exit ;
44022: GO 44327
// if pos = 1 then
44024: LD_VAR 0 2
44028: PUSH
44029: LD_INT 1
44031: EQUAL
44032: IFFALSE 44065
// result := Replace ( arr , pos [ 1 ] , value ) else
44034: LD_ADDR_VAR 0 4
44038: PUSH
44039: LD_VAR 0 1
44043: PPUSH
44044: LD_VAR 0 2
44048: PUSH
44049: LD_INT 1
44051: ARRAY
44052: PPUSH
44053: LD_VAR 0 3
44057: PPUSH
44058: CALL_OW 1
44062: ST_TO_ADDR
44063: GO 44327
// begin tmp := arr ;
44065: LD_ADDR_VAR 0 6
44069: PUSH
44070: LD_VAR 0 1
44074: ST_TO_ADDR
// s_arr := [ tmp ] ;
44075: LD_ADDR_VAR 0 7
44079: PUSH
44080: LD_VAR 0 6
44084: PUSH
44085: EMPTY
44086: LIST
44087: ST_TO_ADDR
// for i = 1 to pos - 1 do
44088: LD_ADDR_VAR 0 5
44092: PUSH
44093: DOUBLE
44094: LD_INT 1
44096: DEC
44097: ST_TO_ADDR
44098: LD_VAR 0 2
44102: PUSH
44103: LD_INT 1
44105: MINUS
44106: PUSH
44107: FOR_TO
44108: IFFALSE 44153
// begin tmp := tmp [ pos [ i ] ] ;
44110: LD_ADDR_VAR 0 6
44114: PUSH
44115: LD_VAR 0 6
44119: PUSH
44120: LD_VAR 0 2
44124: PUSH
44125: LD_VAR 0 5
44129: ARRAY
44130: ARRAY
44131: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44132: LD_ADDR_VAR 0 7
44136: PUSH
44137: LD_VAR 0 7
44141: PUSH
44142: LD_VAR 0 6
44146: PUSH
44147: EMPTY
44148: LIST
44149: ADD
44150: ST_TO_ADDR
// end ;
44151: GO 44107
44153: POP
44154: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44155: LD_ADDR_VAR 0 6
44159: PUSH
44160: LD_VAR 0 6
44164: PPUSH
44165: LD_VAR 0 2
44169: PUSH
44170: LD_VAR 0 2
44174: ARRAY
44175: PPUSH
44176: LD_VAR 0 3
44180: PPUSH
44181: CALL_OW 1
44185: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44186: LD_ADDR_VAR 0 7
44190: PUSH
44191: LD_VAR 0 7
44195: PPUSH
44196: LD_VAR 0 7
44200: PPUSH
44201: LD_VAR 0 6
44205: PPUSH
44206: CALL_OW 1
44210: ST_TO_ADDR
// for i = s_arr downto 2 do
44211: LD_ADDR_VAR 0 5
44215: PUSH
44216: DOUBLE
44217: LD_VAR 0 7
44221: INC
44222: ST_TO_ADDR
44223: LD_INT 2
44225: PUSH
44226: FOR_DOWNTO
44227: IFFALSE 44311
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44229: LD_ADDR_VAR 0 6
44233: PUSH
44234: LD_VAR 0 7
44238: PUSH
44239: LD_VAR 0 5
44243: PUSH
44244: LD_INT 1
44246: MINUS
44247: ARRAY
44248: PPUSH
44249: LD_VAR 0 2
44253: PUSH
44254: LD_VAR 0 5
44258: PUSH
44259: LD_INT 1
44261: MINUS
44262: ARRAY
44263: PPUSH
44264: LD_VAR 0 7
44268: PUSH
44269: LD_VAR 0 5
44273: ARRAY
44274: PPUSH
44275: CALL_OW 1
44279: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44280: LD_ADDR_VAR 0 7
44284: PUSH
44285: LD_VAR 0 7
44289: PPUSH
44290: LD_VAR 0 5
44294: PUSH
44295: LD_INT 1
44297: MINUS
44298: PPUSH
44299: LD_VAR 0 6
44303: PPUSH
44304: CALL_OW 1
44308: ST_TO_ADDR
// end ;
44309: GO 44226
44311: POP
44312: POP
// result := s_arr [ 1 ] ;
44313: LD_ADDR_VAR 0 4
44317: PUSH
44318: LD_VAR 0 7
44322: PUSH
44323: LD_INT 1
44325: ARRAY
44326: ST_TO_ADDR
// end ; end ;
44327: LD_VAR 0 4
44331: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44332: LD_INT 0
44334: PPUSH
44335: PPUSH
// if not list then
44336: LD_VAR 0 1
44340: NOT
44341: IFFALSE 44345
// exit ;
44343: GO 44436
// i := list [ pos1 ] ;
44345: LD_ADDR_VAR 0 5
44349: PUSH
44350: LD_VAR 0 1
44354: PUSH
44355: LD_VAR 0 2
44359: ARRAY
44360: ST_TO_ADDR
// if not i then
44361: LD_VAR 0 5
44365: NOT
44366: IFFALSE 44370
// exit ;
44368: GO 44436
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44370: LD_ADDR_VAR 0 1
44374: PUSH
44375: LD_VAR 0 1
44379: PPUSH
44380: LD_VAR 0 2
44384: PPUSH
44385: LD_VAR 0 1
44389: PUSH
44390: LD_VAR 0 3
44394: ARRAY
44395: PPUSH
44396: CALL_OW 1
44400: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44401: LD_ADDR_VAR 0 1
44405: PUSH
44406: LD_VAR 0 1
44410: PPUSH
44411: LD_VAR 0 3
44415: PPUSH
44416: LD_VAR 0 5
44420: PPUSH
44421: CALL_OW 1
44425: ST_TO_ADDR
// result := list ;
44426: LD_ADDR_VAR 0 4
44430: PUSH
44431: LD_VAR 0 1
44435: ST_TO_ADDR
// end ;
44436: LD_VAR 0 4
44440: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44441: LD_INT 0
44443: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44444: LD_ADDR_VAR 0 5
44448: PUSH
44449: LD_VAR 0 1
44453: PPUSH
44454: CALL_OW 250
44458: PPUSH
44459: LD_VAR 0 1
44463: PPUSH
44464: CALL_OW 251
44468: PPUSH
44469: LD_VAR 0 2
44473: PPUSH
44474: LD_VAR 0 3
44478: PPUSH
44479: LD_VAR 0 4
44483: PPUSH
44484: CALL 44494 0 5
44488: ST_TO_ADDR
// end ;
44489: LD_VAR 0 5
44493: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44494: LD_INT 0
44496: PPUSH
44497: PPUSH
44498: PPUSH
44499: PPUSH
// if not list then
44500: LD_VAR 0 3
44504: NOT
44505: IFFALSE 44509
// exit ;
44507: GO 44897
// result := [ ] ;
44509: LD_ADDR_VAR 0 6
44513: PUSH
44514: EMPTY
44515: ST_TO_ADDR
// for i in list do
44516: LD_ADDR_VAR 0 7
44520: PUSH
44521: LD_VAR 0 3
44525: PUSH
44526: FOR_IN
44527: IFFALSE 44729
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44529: LD_ADDR_VAR 0 9
44533: PUSH
44534: LD_VAR 0 7
44538: PPUSH
44539: LD_VAR 0 1
44543: PPUSH
44544: LD_VAR 0 2
44548: PPUSH
44549: CALL_OW 297
44553: ST_TO_ADDR
// if not result then
44554: LD_VAR 0 6
44558: NOT
44559: IFFALSE 44585
// result := [ [ i , tmp ] ] else
44561: LD_ADDR_VAR 0 6
44565: PUSH
44566: LD_VAR 0 7
44570: PUSH
44571: LD_VAR 0 9
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: EMPTY
44581: LIST
44582: ST_TO_ADDR
44583: GO 44727
// begin if result [ result ] [ 2 ] < tmp then
44585: LD_VAR 0 6
44589: PUSH
44590: LD_VAR 0 6
44594: ARRAY
44595: PUSH
44596: LD_INT 2
44598: ARRAY
44599: PUSH
44600: LD_VAR 0 9
44604: LESS
44605: IFFALSE 44647
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44607: LD_ADDR_VAR 0 6
44611: PUSH
44612: LD_VAR 0 6
44616: PPUSH
44617: LD_VAR 0 6
44621: PUSH
44622: LD_INT 1
44624: PLUS
44625: PPUSH
44626: LD_VAR 0 7
44630: PUSH
44631: LD_VAR 0 9
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PPUSH
44640: CALL_OW 2
44644: ST_TO_ADDR
44645: GO 44727
// for j = 1 to result do
44647: LD_ADDR_VAR 0 8
44651: PUSH
44652: DOUBLE
44653: LD_INT 1
44655: DEC
44656: ST_TO_ADDR
44657: LD_VAR 0 6
44661: PUSH
44662: FOR_TO
44663: IFFALSE 44725
// begin if tmp < result [ j ] [ 2 ] then
44665: LD_VAR 0 9
44669: PUSH
44670: LD_VAR 0 6
44674: PUSH
44675: LD_VAR 0 8
44679: ARRAY
44680: PUSH
44681: LD_INT 2
44683: ARRAY
44684: LESS
44685: IFFALSE 44723
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44687: LD_ADDR_VAR 0 6
44691: PUSH
44692: LD_VAR 0 6
44696: PPUSH
44697: LD_VAR 0 8
44701: PPUSH
44702: LD_VAR 0 7
44706: PUSH
44707: LD_VAR 0 9
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PPUSH
44716: CALL_OW 2
44720: ST_TO_ADDR
// break ;
44721: GO 44725
// end ; end ;
44723: GO 44662
44725: POP
44726: POP
// end ; end ;
44727: GO 44526
44729: POP
44730: POP
// if result and not asc then
44731: LD_VAR 0 6
44735: PUSH
44736: LD_VAR 0 4
44740: NOT
44741: AND
44742: IFFALSE 44817
// begin tmp := result ;
44744: LD_ADDR_VAR 0 9
44748: PUSH
44749: LD_VAR 0 6
44753: ST_TO_ADDR
// for i = tmp downto 1 do
44754: LD_ADDR_VAR 0 7
44758: PUSH
44759: DOUBLE
44760: LD_VAR 0 9
44764: INC
44765: ST_TO_ADDR
44766: LD_INT 1
44768: PUSH
44769: FOR_DOWNTO
44770: IFFALSE 44815
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44772: LD_ADDR_VAR 0 6
44776: PUSH
44777: LD_VAR 0 6
44781: PPUSH
44782: LD_VAR 0 9
44786: PUSH
44787: LD_VAR 0 7
44791: MINUS
44792: PUSH
44793: LD_INT 1
44795: PLUS
44796: PPUSH
44797: LD_VAR 0 9
44801: PUSH
44802: LD_VAR 0 7
44806: ARRAY
44807: PPUSH
44808: CALL_OW 1
44812: ST_TO_ADDR
44813: GO 44769
44815: POP
44816: POP
// end ; tmp := [ ] ;
44817: LD_ADDR_VAR 0 9
44821: PUSH
44822: EMPTY
44823: ST_TO_ADDR
// if mode then
44824: LD_VAR 0 5
44828: IFFALSE 44897
// begin for i = 1 to result do
44830: LD_ADDR_VAR 0 7
44834: PUSH
44835: DOUBLE
44836: LD_INT 1
44838: DEC
44839: ST_TO_ADDR
44840: LD_VAR 0 6
44844: PUSH
44845: FOR_TO
44846: IFFALSE 44885
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44848: LD_ADDR_VAR 0 9
44852: PUSH
44853: LD_VAR 0 9
44857: PPUSH
44858: LD_VAR 0 7
44862: PPUSH
44863: LD_VAR 0 6
44867: PUSH
44868: LD_VAR 0 7
44872: ARRAY
44873: PUSH
44874: LD_INT 1
44876: ARRAY
44877: PPUSH
44878: CALL_OW 1
44882: ST_TO_ADDR
44883: GO 44845
44885: POP
44886: POP
// result := tmp ;
44887: LD_ADDR_VAR 0 6
44891: PUSH
44892: LD_VAR 0 9
44896: ST_TO_ADDR
// end ; end ;
44897: LD_VAR 0 6
44901: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44902: LD_INT 0
44904: PPUSH
44905: PPUSH
44906: PPUSH
44907: PPUSH
44908: PPUSH
44909: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44910: LD_ADDR_VAR 0 5
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: ST_TO_ADDR
// if not x or not y then
44932: LD_VAR 0 2
44936: NOT
44937: PUSH
44938: LD_VAR 0 3
44942: NOT
44943: OR
44944: IFFALSE 44948
// exit ;
44946: GO 46600
// if not range then
44948: LD_VAR 0 4
44952: NOT
44953: IFFALSE 44963
// range := 10 ;
44955: LD_ADDR_VAR 0 4
44959: PUSH
44960: LD_INT 10
44962: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44963: LD_ADDR_VAR 0 8
44967: PUSH
44968: LD_INT 81
44970: PUSH
44971: LD_VAR 0 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 92
44982: PUSH
44983: LD_VAR 0 2
44987: PUSH
44988: LD_VAR 0 3
44992: PUSH
44993: LD_VAR 0 4
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 3
45006: PUSH
45007: LD_INT 21
45009: PUSH
45010: LD_INT 3
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: PPUSH
45026: CALL_OW 69
45030: ST_TO_ADDR
// if not tmp then
45031: LD_VAR 0 8
45035: NOT
45036: IFFALSE 45040
// exit ;
45038: GO 46600
// for i in tmp do
45040: LD_ADDR_VAR 0 6
45044: PUSH
45045: LD_VAR 0 8
45049: PUSH
45050: FOR_IN
45051: IFFALSE 46575
// begin points := [ 0 , 0 , 0 ] ;
45053: LD_ADDR_VAR 0 9
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: ST_TO_ADDR
// bpoints := 1 ;
45072: LD_ADDR_VAR 0 10
45076: PUSH
45077: LD_INT 1
45079: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45080: LD_VAR 0 6
45084: PPUSH
45085: CALL_OW 247
45089: PUSH
45090: LD_INT 1
45092: DOUBLE
45093: EQUAL
45094: IFTRUE 45098
45096: GO 45676
45098: POP
// begin if GetClass ( i ) = 1 then
45099: LD_VAR 0 6
45103: PPUSH
45104: CALL_OW 257
45108: PUSH
45109: LD_INT 1
45111: EQUAL
45112: IFFALSE 45133
// points := [ 10 , 5 , 3 ] ;
45114: LD_ADDR_VAR 0 9
45118: PUSH
45119: LD_INT 10
45121: PUSH
45122: LD_INT 5
45124: PUSH
45125: LD_INT 3
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: LIST
45132: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45133: LD_VAR 0 6
45137: PPUSH
45138: CALL_OW 257
45142: PUSH
45143: LD_INT 2
45145: PUSH
45146: LD_INT 3
45148: PUSH
45149: LD_INT 4
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: IN
45157: IFFALSE 45178
// points := [ 3 , 2 , 1 ] ;
45159: LD_ADDR_VAR 0 9
45163: PUSH
45164: LD_INT 3
45166: PUSH
45167: LD_INT 2
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: LIST
45177: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45178: LD_VAR 0 6
45182: PPUSH
45183: CALL_OW 257
45187: PUSH
45188: LD_INT 5
45190: EQUAL
45191: IFFALSE 45212
// points := [ 130 , 5 , 2 ] ;
45193: LD_ADDR_VAR 0 9
45197: PUSH
45198: LD_INT 130
45200: PUSH
45201: LD_INT 5
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: LIST
45211: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45212: LD_VAR 0 6
45216: PPUSH
45217: CALL_OW 257
45221: PUSH
45222: LD_INT 8
45224: EQUAL
45225: IFFALSE 45246
// points := [ 35 , 35 , 30 ] ;
45227: LD_ADDR_VAR 0 9
45231: PUSH
45232: LD_INT 35
45234: PUSH
45235: LD_INT 35
45237: PUSH
45238: LD_INT 30
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: LIST
45245: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45246: LD_VAR 0 6
45250: PPUSH
45251: CALL_OW 257
45255: PUSH
45256: LD_INT 9
45258: EQUAL
45259: IFFALSE 45280
// points := [ 20 , 55 , 40 ] ;
45261: LD_ADDR_VAR 0 9
45265: PUSH
45266: LD_INT 20
45268: PUSH
45269: LD_INT 55
45271: PUSH
45272: LD_INT 40
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: LIST
45279: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45280: LD_VAR 0 6
45284: PPUSH
45285: CALL_OW 257
45289: PUSH
45290: LD_INT 12
45292: PUSH
45293: LD_INT 16
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: IN
45300: IFFALSE 45321
// points := [ 5 , 3 , 2 ] ;
45302: LD_ADDR_VAR 0 9
45306: PUSH
45307: LD_INT 5
45309: PUSH
45310: LD_INT 3
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: LIST
45320: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45321: LD_VAR 0 6
45325: PPUSH
45326: CALL_OW 257
45330: PUSH
45331: LD_INT 17
45333: EQUAL
45334: IFFALSE 45355
// points := [ 100 , 50 , 75 ] ;
45336: LD_ADDR_VAR 0 9
45340: PUSH
45341: LD_INT 100
45343: PUSH
45344: LD_INT 50
45346: PUSH
45347: LD_INT 75
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: LIST
45354: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45355: LD_VAR 0 6
45359: PPUSH
45360: CALL_OW 257
45364: PUSH
45365: LD_INT 15
45367: EQUAL
45368: IFFALSE 45389
// points := [ 10 , 5 , 3 ] ;
45370: LD_ADDR_VAR 0 9
45374: PUSH
45375: LD_INT 10
45377: PUSH
45378: LD_INT 5
45380: PUSH
45381: LD_INT 3
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: LIST
45388: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45389: LD_VAR 0 6
45393: PPUSH
45394: CALL_OW 257
45398: PUSH
45399: LD_INT 14
45401: EQUAL
45402: IFFALSE 45423
// points := [ 10 , 0 , 0 ] ;
45404: LD_ADDR_VAR 0 9
45408: PUSH
45409: LD_INT 10
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: LIST
45422: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45423: LD_VAR 0 6
45427: PPUSH
45428: CALL_OW 257
45432: PUSH
45433: LD_INT 11
45435: EQUAL
45436: IFFALSE 45457
// points := [ 30 , 10 , 5 ] ;
45438: LD_ADDR_VAR 0 9
45442: PUSH
45443: LD_INT 30
45445: PUSH
45446: LD_INT 10
45448: PUSH
45449: LD_INT 5
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: LIST
45456: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45457: LD_VAR 0 1
45461: PPUSH
45462: LD_INT 5
45464: PPUSH
45465: CALL_OW 321
45469: PUSH
45470: LD_INT 2
45472: EQUAL
45473: IFFALSE 45490
// bpoints := bpoints * 1.8 ;
45475: LD_ADDR_VAR 0 10
45479: PUSH
45480: LD_VAR 0 10
45484: PUSH
45485: LD_REAL  1.80000000000000E+0000
45488: MUL
45489: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45490: LD_VAR 0 6
45494: PPUSH
45495: CALL_OW 257
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: LD_INT 2
45505: PUSH
45506: LD_INT 3
45508: PUSH
45509: LD_INT 4
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: IN
45518: PUSH
45519: LD_VAR 0 1
45523: PPUSH
45524: LD_INT 51
45526: PPUSH
45527: CALL_OW 321
45531: PUSH
45532: LD_INT 2
45534: EQUAL
45535: AND
45536: IFFALSE 45553
// bpoints := bpoints * 1.2 ;
45538: LD_ADDR_VAR 0 10
45542: PUSH
45543: LD_VAR 0 10
45547: PUSH
45548: LD_REAL  1.20000000000000E+0000
45551: MUL
45552: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45553: LD_VAR 0 6
45557: PPUSH
45558: CALL_OW 257
45562: PUSH
45563: LD_INT 5
45565: PUSH
45566: LD_INT 7
45568: PUSH
45569: LD_INT 9
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: LIST
45576: IN
45577: PUSH
45578: LD_VAR 0 1
45582: PPUSH
45583: LD_INT 52
45585: PPUSH
45586: CALL_OW 321
45590: PUSH
45591: LD_INT 2
45593: EQUAL
45594: AND
45595: IFFALSE 45612
// bpoints := bpoints * 1.5 ;
45597: LD_ADDR_VAR 0 10
45601: PUSH
45602: LD_VAR 0 10
45606: PUSH
45607: LD_REAL  1.50000000000000E+0000
45610: MUL
45611: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45612: LD_VAR 0 1
45616: PPUSH
45617: LD_INT 66
45619: PPUSH
45620: CALL_OW 321
45624: PUSH
45625: LD_INT 2
45627: EQUAL
45628: IFFALSE 45645
// bpoints := bpoints * 1.1 ;
45630: LD_ADDR_VAR 0 10
45634: PUSH
45635: LD_VAR 0 10
45639: PUSH
45640: LD_REAL  1.10000000000000E+0000
45643: MUL
45644: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45645: LD_ADDR_VAR 0 10
45649: PUSH
45650: LD_VAR 0 10
45654: PUSH
45655: LD_VAR 0 6
45659: PPUSH
45660: LD_INT 1
45662: PPUSH
45663: CALL_OW 259
45667: PUSH
45668: LD_REAL  1.15000000000000E+0000
45671: MUL
45672: MUL
45673: ST_TO_ADDR
// end ; unit_vehicle :
45674: GO 46504
45676: LD_INT 2
45678: DOUBLE
45679: EQUAL
45680: IFTRUE 45684
45682: GO 46492
45684: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45685: LD_VAR 0 6
45689: PPUSH
45690: CALL_OW 264
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: LD_INT 42
45700: PUSH
45701: LD_INT 24
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: LIST
45708: IN
45709: IFFALSE 45730
// points := [ 25 , 5 , 3 ] ;
45711: LD_ADDR_VAR 0 9
45715: PUSH
45716: LD_INT 25
45718: PUSH
45719: LD_INT 5
45721: PUSH
45722: LD_INT 3
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: LIST
45729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45730: LD_VAR 0 6
45734: PPUSH
45735: CALL_OW 264
45739: PUSH
45740: LD_INT 4
45742: PUSH
45743: LD_INT 43
45745: PUSH
45746: LD_INT 25
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: LIST
45753: IN
45754: IFFALSE 45775
// points := [ 40 , 15 , 5 ] ;
45756: LD_ADDR_VAR 0 9
45760: PUSH
45761: LD_INT 40
45763: PUSH
45764: LD_INT 15
45766: PUSH
45767: LD_INT 5
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: LIST
45774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45775: LD_VAR 0 6
45779: PPUSH
45780: CALL_OW 264
45784: PUSH
45785: LD_INT 3
45787: PUSH
45788: LD_INT 23
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: IN
45795: IFFALSE 45816
// points := [ 7 , 25 , 8 ] ;
45797: LD_ADDR_VAR 0 9
45801: PUSH
45802: LD_INT 7
45804: PUSH
45805: LD_INT 25
45807: PUSH
45808: LD_INT 8
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: LIST
45815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45816: LD_VAR 0 6
45820: PPUSH
45821: CALL_OW 264
45825: PUSH
45826: LD_INT 5
45828: PUSH
45829: LD_INT 27
45831: PUSH
45832: LD_INT 44
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: LIST
45839: IN
45840: IFFALSE 45861
// points := [ 14 , 50 , 16 ] ;
45842: LD_ADDR_VAR 0 9
45846: PUSH
45847: LD_INT 14
45849: PUSH
45850: LD_INT 50
45852: PUSH
45853: LD_INT 16
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: LIST
45860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45861: LD_VAR 0 6
45865: PPUSH
45866: CALL_OW 264
45870: PUSH
45871: LD_INT 6
45873: PUSH
45874: LD_INT 46
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: IN
45881: IFFALSE 45902
// points := [ 32 , 120 , 70 ] ;
45883: LD_ADDR_VAR 0 9
45887: PUSH
45888: LD_INT 32
45890: PUSH
45891: LD_INT 120
45893: PUSH
45894: LD_INT 70
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: LIST
45901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45902: LD_VAR 0 6
45906: PPUSH
45907: CALL_OW 264
45911: PUSH
45912: LD_INT 7
45914: PUSH
45915: LD_INT 28
45917: PUSH
45918: LD_INT 45
45920: PUSH
45921: LD_EXP 48
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: IN
45932: IFFALSE 45953
// points := [ 35 , 20 , 45 ] ;
45934: LD_ADDR_VAR 0 9
45938: PUSH
45939: LD_INT 35
45941: PUSH
45942: LD_INT 20
45944: PUSH
45945: LD_INT 45
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45953: LD_VAR 0 6
45957: PPUSH
45958: CALL_OW 264
45962: PUSH
45963: LD_INT 47
45965: PUSH
45966: EMPTY
45967: LIST
45968: IN
45969: IFFALSE 45990
// points := [ 67 , 45 , 75 ] ;
45971: LD_ADDR_VAR 0 9
45975: PUSH
45976: LD_INT 67
45978: PUSH
45979: LD_INT 45
45981: PUSH
45982: LD_INT 75
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45990: LD_VAR 0 6
45994: PPUSH
45995: CALL_OW 264
45999: PUSH
46000: LD_INT 26
46002: PUSH
46003: EMPTY
46004: LIST
46005: IN
46006: IFFALSE 46027
// points := [ 120 , 30 , 80 ] ;
46008: LD_ADDR_VAR 0 9
46012: PUSH
46013: LD_INT 120
46015: PUSH
46016: LD_INT 30
46018: PUSH
46019: LD_INT 80
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: LIST
46026: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46027: LD_VAR 0 6
46031: PPUSH
46032: CALL_OW 264
46036: PUSH
46037: LD_INT 22
46039: PUSH
46040: EMPTY
46041: LIST
46042: IN
46043: IFFALSE 46064
// points := [ 40 , 1 , 1 ] ;
46045: LD_ADDR_VAR 0 9
46049: PUSH
46050: LD_INT 40
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: LIST
46063: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46064: LD_VAR 0 6
46068: PPUSH
46069: CALL_OW 264
46073: PUSH
46074: LD_INT 29
46076: PUSH
46077: EMPTY
46078: LIST
46079: IN
46080: IFFALSE 46101
// points := [ 70 , 200 , 400 ] ;
46082: LD_ADDR_VAR 0 9
46086: PUSH
46087: LD_INT 70
46089: PUSH
46090: LD_INT 200
46092: PUSH
46093: LD_INT 400
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: LIST
46100: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46101: LD_VAR 0 6
46105: PPUSH
46106: CALL_OW 264
46110: PUSH
46111: LD_INT 14
46113: PUSH
46114: LD_INT 53
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: IN
46121: IFFALSE 46142
// points := [ 40 , 10 , 20 ] ;
46123: LD_ADDR_VAR 0 9
46127: PUSH
46128: LD_INT 40
46130: PUSH
46131: LD_INT 10
46133: PUSH
46134: LD_INT 20
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: LIST
46141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46142: LD_VAR 0 6
46146: PPUSH
46147: CALL_OW 264
46151: PUSH
46152: LD_INT 9
46154: PUSH
46155: EMPTY
46156: LIST
46157: IN
46158: IFFALSE 46179
// points := [ 5 , 70 , 20 ] ;
46160: LD_ADDR_VAR 0 9
46164: PUSH
46165: LD_INT 5
46167: PUSH
46168: LD_INT 70
46170: PUSH
46171: LD_INT 20
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46179: LD_VAR 0 6
46183: PPUSH
46184: CALL_OW 264
46188: PUSH
46189: LD_INT 10
46191: PUSH
46192: EMPTY
46193: LIST
46194: IN
46195: IFFALSE 46216
// points := [ 35 , 110 , 70 ] ;
46197: LD_ADDR_VAR 0 9
46201: PUSH
46202: LD_INT 35
46204: PUSH
46205: LD_INT 110
46207: PUSH
46208: LD_INT 70
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: LIST
46215: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46216: LD_VAR 0 6
46220: PPUSH
46221: CALL_OW 265
46225: PUSH
46226: LD_INT 25
46228: EQUAL
46229: IFFALSE 46250
// points := [ 80 , 65 , 100 ] ;
46231: LD_ADDR_VAR 0 9
46235: PUSH
46236: LD_INT 80
46238: PUSH
46239: LD_INT 65
46241: PUSH
46242: LD_INT 100
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: LIST
46249: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46250: LD_VAR 0 6
46254: PPUSH
46255: CALL_OW 263
46259: PUSH
46260: LD_INT 1
46262: EQUAL
46263: IFFALSE 46298
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46265: LD_ADDR_VAR 0 10
46269: PUSH
46270: LD_VAR 0 10
46274: PUSH
46275: LD_VAR 0 6
46279: PPUSH
46280: CALL_OW 311
46284: PPUSH
46285: LD_INT 3
46287: PPUSH
46288: CALL_OW 259
46292: PUSH
46293: LD_INT 4
46295: MUL
46296: MUL
46297: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46298: LD_VAR 0 6
46302: PPUSH
46303: CALL_OW 263
46307: PUSH
46308: LD_INT 2
46310: EQUAL
46311: IFFALSE 46362
// begin j := IsControledBy ( i ) ;
46313: LD_ADDR_VAR 0 7
46317: PUSH
46318: LD_VAR 0 6
46322: PPUSH
46323: CALL_OW 312
46327: ST_TO_ADDR
// if j then
46328: LD_VAR 0 7
46332: IFFALSE 46362
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46334: LD_ADDR_VAR 0 10
46338: PUSH
46339: LD_VAR 0 10
46343: PUSH
46344: LD_VAR 0 7
46348: PPUSH
46349: LD_INT 3
46351: PPUSH
46352: CALL_OW 259
46356: PUSH
46357: LD_INT 3
46359: MUL
46360: MUL
46361: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46362: LD_VAR 0 6
46366: PPUSH
46367: CALL_OW 264
46371: PUSH
46372: LD_INT 5
46374: PUSH
46375: LD_INT 6
46377: PUSH
46378: LD_INT 46
46380: PUSH
46381: LD_INT 44
46383: PUSH
46384: LD_INT 47
46386: PUSH
46387: LD_INT 45
46389: PUSH
46390: LD_INT 28
46392: PUSH
46393: LD_INT 7
46395: PUSH
46396: LD_INT 27
46398: PUSH
46399: LD_INT 29
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: IN
46414: PUSH
46415: LD_VAR 0 1
46419: PPUSH
46420: LD_INT 52
46422: PPUSH
46423: CALL_OW 321
46427: PUSH
46428: LD_INT 2
46430: EQUAL
46431: AND
46432: IFFALSE 46449
// bpoints := bpoints * 1.2 ;
46434: LD_ADDR_VAR 0 10
46438: PUSH
46439: LD_VAR 0 10
46443: PUSH
46444: LD_REAL  1.20000000000000E+0000
46447: MUL
46448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46449: LD_VAR 0 6
46453: PPUSH
46454: CALL_OW 264
46458: PUSH
46459: LD_INT 6
46461: PUSH
46462: LD_INT 46
46464: PUSH
46465: LD_INT 47
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: LIST
46472: IN
46473: IFFALSE 46490
// bpoints := bpoints * 1.2 ;
46475: LD_ADDR_VAR 0 10
46479: PUSH
46480: LD_VAR 0 10
46484: PUSH
46485: LD_REAL  1.20000000000000E+0000
46488: MUL
46489: ST_TO_ADDR
// end ; unit_building :
46490: GO 46504
46492: LD_INT 3
46494: DOUBLE
46495: EQUAL
46496: IFTRUE 46500
46498: GO 46503
46500: POP
// ; end ;
46501: GO 46504
46503: POP
// for j = 1 to 3 do
46504: LD_ADDR_VAR 0 7
46508: PUSH
46509: DOUBLE
46510: LD_INT 1
46512: DEC
46513: ST_TO_ADDR
46514: LD_INT 3
46516: PUSH
46517: FOR_TO
46518: IFFALSE 46571
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46520: LD_ADDR_VAR 0 5
46524: PUSH
46525: LD_VAR 0 5
46529: PPUSH
46530: LD_VAR 0 7
46534: PPUSH
46535: LD_VAR 0 5
46539: PUSH
46540: LD_VAR 0 7
46544: ARRAY
46545: PUSH
46546: LD_VAR 0 9
46550: PUSH
46551: LD_VAR 0 7
46555: ARRAY
46556: PUSH
46557: LD_VAR 0 10
46561: MUL
46562: PLUS
46563: PPUSH
46564: CALL_OW 1
46568: ST_TO_ADDR
46569: GO 46517
46571: POP
46572: POP
// end ;
46573: GO 45050
46575: POP
46576: POP
// result := Replace ( result , 4 , tmp ) ;
46577: LD_ADDR_VAR 0 5
46581: PUSH
46582: LD_VAR 0 5
46586: PPUSH
46587: LD_INT 4
46589: PPUSH
46590: LD_VAR 0 8
46594: PPUSH
46595: CALL_OW 1
46599: ST_TO_ADDR
// end ;
46600: LD_VAR 0 5
46604: RET
// export function DangerAtRange ( unit , range ) ; begin
46605: LD_INT 0
46607: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46608: LD_ADDR_VAR 0 3
46612: PUSH
46613: LD_VAR 0 1
46617: PPUSH
46618: CALL_OW 255
46622: PPUSH
46623: LD_VAR 0 1
46627: PPUSH
46628: CALL_OW 250
46632: PPUSH
46633: LD_VAR 0 1
46637: PPUSH
46638: CALL_OW 251
46642: PPUSH
46643: LD_VAR 0 2
46647: PPUSH
46648: CALL 44902 0 4
46652: ST_TO_ADDR
// end ;
46653: LD_VAR 0 3
46657: RET
// export function DangerInArea ( side , area ) ; begin
46658: LD_INT 0
46660: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46661: LD_ADDR_VAR 0 3
46665: PUSH
46666: LD_VAR 0 2
46670: PPUSH
46671: LD_INT 81
46673: PUSH
46674: LD_VAR 0 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PPUSH
46683: CALL_OW 70
46687: ST_TO_ADDR
// end ;
46688: LD_VAR 0 3
46692: RET
// export function IsExtension ( b ) ; begin
46693: LD_INT 0
46695: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46696: LD_ADDR_VAR 0 2
46700: PUSH
46701: LD_VAR 0 1
46705: PUSH
46706: LD_INT 23
46708: PUSH
46709: LD_INT 20
46711: PUSH
46712: LD_INT 22
46714: PUSH
46715: LD_INT 17
46717: PUSH
46718: LD_INT 24
46720: PUSH
46721: LD_INT 21
46723: PUSH
46724: LD_INT 19
46726: PUSH
46727: LD_INT 16
46729: PUSH
46730: LD_INT 25
46732: PUSH
46733: LD_INT 18
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: IN
46748: ST_TO_ADDR
// end ;
46749: LD_VAR 0 2
46753: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46754: LD_INT 0
46756: PPUSH
46757: PPUSH
46758: PPUSH
// result := [ ] ;
46759: LD_ADDR_VAR 0 4
46763: PUSH
46764: EMPTY
46765: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46766: LD_ADDR_VAR 0 5
46770: PUSH
46771: LD_VAR 0 2
46775: PPUSH
46776: LD_INT 21
46778: PUSH
46779: LD_INT 3
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PPUSH
46786: CALL_OW 70
46790: ST_TO_ADDR
// if not tmp then
46791: LD_VAR 0 5
46795: NOT
46796: IFFALSE 46800
// exit ;
46798: GO 46864
// if checkLink then
46800: LD_VAR 0 3
46804: IFFALSE 46854
// begin for i in tmp do
46806: LD_ADDR_VAR 0 6
46810: PUSH
46811: LD_VAR 0 5
46815: PUSH
46816: FOR_IN
46817: IFFALSE 46852
// if GetBase ( i ) <> base then
46819: LD_VAR 0 6
46823: PPUSH
46824: CALL_OW 274
46828: PUSH
46829: LD_VAR 0 1
46833: NONEQUAL
46834: IFFALSE 46850
// ComLinkToBase ( base , i ) ;
46836: LD_VAR 0 1
46840: PPUSH
46841: LD_VAR 0 6
46845: PPUSH
46846: CALL_OW 169
46850: GO 46816
46852: POP
46853: POP
// end ; result := tmp ;
46854: LD_ADDR_VAR 0 4
46858: PUSH
46859: LD_VAR 0 5
46863: ST_TO_ADDR
// end ;
46864: LD_VAR 0 4
46868: RET
// export function ComComplete ( units , b ) ; var i ; begin
46869: LD_INT 0
46871: PPUSH
46872: PPUSH
// if not units then
46873: LD_VAR 0 1
46877: NOT
46878: IFFALSE 46882
// exit ;
46880: GO 46972
// for i in units do
46882: LD_ADDR_VAR 0 4
46886: PUSH
46887: LD_VAR 0 1
46891: PUSH
46892: FOR_IN
46893: IFFALSE 46970
// if BuildingStatus ( b ) = bs_build then
46895: LD_VAR 0 2
46899: PPUSH
46900: CALL_OW 461
46904: PUSH
46905: LD_INT 1
46907: EQUAL
46908: IFFALSE 46968
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46910: LD_VAR 0 4
46914: PPUSH
46915: LD_STRING h
46917: PUSH
46918: LD_VAR 0 2
46922: PPUSH
46923: CALL_OW 250
46927: PUSH
46928: LD_VAR 0 2
46932: PPUSH
46933: CALL_OW 251
46937: PUSH
46938: LD_VAR 0 2
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: PUSH
46961: EMPTY
46962: LIST
46963: PPUSH
46964: CALL_OW 446
46968: GO 46892
46970: POP
46971: POP
// end ;
46972: LD_VAR 0 3
46976: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46977: LD_INT 0
46979: PPUSH
46980: PPUSH
46981: PPUSH
46982: PPUSH
46983: PPUSH
46984: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46985: LD_VAR 0 1
46989: NOT
46990: PUSH
46991: LD_VAR 0 1
46995: PPUSH
46996: CALL_OW 263
47000: PUSH
47001: LD_INT 2
47003: NONEQUAL
47004: OR
47005: IFFALSE 47009
// exit ;
47007: GO 47325
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47009: LD_ADDR_VAR 0 6
47013: PUSH
47014: LD_INT 22
47016: PUSH
47017: LD_VAR 0 1
47021: PPUSH
47022: CALL_OW 255
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: LD_INT 30
47036: PUSH
47037: LD_INT 36
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 34
47046: PUSH
47047: LD_INT 31
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: LIST
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PPUSH
47063: CALL_OW 69
47067: ST_TO_ADDR
// if not tmp then
47068: LD_VAR 0 6
47072: NOT
47073: IFFALSE 47077
// exit ;
47075: GO 47325
// result := [ ] ;
47077: LD_ADDR_VAR 0 2
47081: PUSH
47082: EMPTY
47083: ST_TO_ADDR
// for i in tmp do
47084: LD_ADDR_VAR 0 3
47088: PUSH
47089: LD_VAR 0 6
47093: PUSH
47094: FOR_IN
47095: IFFALSE 47166
// begin t := UnitsInside ( i ) ;
47097: LD_ADDR_VAR 0 4
47101: PUSH
47102: LD_VAR 0 3
47106: PPUSH
47107: CALL_OW 313
47111: ST_TO_ADDR
// if t then
47112: LD_VAR 0 4
47116: IFFALSE 47164
// for j in t do
47118: LD_ADDR_VAR 0 7
47122: PUSH
47123: LD_VAR 0 4
47127: PUSH
47128: FOR_IN
47129: IFFALSE 47162
// result := Replace ( result , result + 1 , j ) ;
47131: LD_ADDR_VAR 0 2
47135: PUSH
47136: LD_VAR 0 2
47140: PPUSH
47141: LD_VAR 0 2
47145: PUSH
47146: LD_INT 1
47148: PLUS
47149: PPUSH
47150: LD_VAR 0 7
47154: PPUSH
47155: CALL_OW 1
47159: ST_TO_ADDR
47160: GO 47128
47162: POP
47163: POP
// end ;
47164: GO 47094
47166: POP
47167: POP
// if not result then
47168: LD_VAR 0 2
47172: NOT
47173: IFFALSE 47177
// exit ;
47175: GO 47325
// mech := result [ 1 ] ;
47177: LD_ADDR_VAR 0 5
47181: PUSH
47182: LD_VAR 0 2
47186: PUSH
47187: LD_INT 1
47189: ARRAY
47190: ST_TO_ADDR
// if result > 1 then
47191: LD_VAR 0 2
47195: PUSH
47196: LD_INT 1
47198: GREATER
47199: IFFALSE 47311
// begin for i = 2 to result do
47201: LD_ADDR_VAR 0 3
47205: PUSH
47206: DOUBLE
47207: LD_INT 2
47209: DEC
47210: ST_TO_ADDR
47211: LD_VAR 0 2
47215: PUSH
47216: FOR_TO
47217: IFFALSE 47309
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47219: LD_ADDR_VAR 0 4
47223: PUSH
47224: LD_VAR 0 2
47228: PUSH
47229: LD_VAR 0 3
47233: ARRAY
47234: PPUSH
47235: LD_INT 3
47237: PPUSH
47238: CALL_OW 259
47242: PUSH
47243: LD_VAR 0 2
47247: PUSH
47248: LD_VAR 0 3
47252: ARRAY
47253: PPUSH
47254: CALL_OW 432
47258: MINUS
47259: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47260: LD_VAR 0 4
47264: PUSH
47265: LD_VAR 0 5
47269: PPUSH
47270: LD_INT 3
47272: PPUSH
47273: CALL_OW 259
47277: PUSH
47278: LD_VAR 0 5
47282: PPUSH
47283: CALL_OW 432
47287: MINUS
47288: GREATEREQUAL
47289: IFFALSE 47307
// mech := result [ i ] ;
47291: LD_ADDR_VAR 0 5
47295: PUSH
47296: LD_VAR 0 2
47300: PUSH
47301: LD_VAR 0 3
47305: ARRAY
47306: ST_TO_ADDR
// end ;
47307: GO 47216
47309: POP
47310: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47311: LD_VAR 0 1
47315: PPUSH
47316: LD_VAR 0 5
47320: PPUSH
47321: CALL_OW 135
// end ;
47325: LD_VAR 0 2
47329: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47330: LD_INT 0
47332: PPUSH
47333: PPUSH
47334: PPUSH
47335: PPUSH
47336: PPUSH
47337: PPUSH
47338: PPUSH
47339: PPUSH
47340: PPUSH
47341: PPUSH
47342: PPUSH
47343: PPUSH
47344: PPUSH
// result := [ ] ;
47345: LD_ADDR_VAR 0 7
47349: PUSH
47350: EMPTY
47351: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47352: LD_VAR 0 1
47356: PPUSH
47357: CALL_OW 266
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: IN
47372: NOT
47373: IFFALSE 47377
// exit ;
47375: GO 49011
// if name then
47377: LD_VAR 0 3
47381: IFFALSE 47397
// SetBName ( base_dep , name ) ;
47383: LD_VAR 0 1
47387: PPUSH
47388: LD_VAR 0 3
47392: PPUSH
47393: CALL_OW 500
// base := GetBase ( base_dep ) ;
47397: LD_ADDR_VAR 0 15
47401: PUSH
47402: LD_VAR 0 1
47406: PPUSH
47407: CALL_OW 274
47411: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47412: LD_ADDR_VAR 0 16
47416: PUSH
47417: LD_VAR 0 1
47421: PPUSH
47422: CALL_OW 255
47426: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47427: LD_ADDR_VAR 0 17
47431: PUSH
47432: LD_VAR 0 1
47436: PPUSH
47437: CALL_OW 248
47441: ST_TO_ADDR
// if sources then
47442: LD_VAR 0 5
47446: IFFALSE 47493
// for i = 1 to 3 do
47448: LD_ADDR_VAR 0 8
47452: PUSH
47453: DOUBLE
47454: LD_INT 1
47456: DEC
47457: ST_TO_ADDR
47458: LD_INT 3
47460: PUSH
47461: FOR_TO
47462: IFFALSE 47491
// AddResourceType ( base , i , sources [ i ] ) ;
47464: LD_VAR 0 15
47468: PPUSH
47469: LD_VAR 0 8
47473: PPUSH
47474: LD_VAR 0 5
47478: PUSH
47479: LD_VAR 0 8
47483: ARRAY
47484: PPUSH
47485: CALL_OW 276
47489: GO 47461
47491: POP
47492: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47493: LD_ADDR_VAR 0 18
47497: PUSH
47498: LD_VAR 0 15
47502: PPUSH
47503: LD_VAR 0 2
47507: PPUSH
47508: LD_INT 1
47510: PPUSH
47511: CALL 46754 0 3
47515: ST_TO_ADDR
// InitHc ;
47516: CALL_OW 19
// InitUc ;
47520: CALL_OW 18
// uc_side := side ;
47524: LD_ADDR_OWVAR 20
47528: PUSH
47529: LD_VAR 0 16
47533: ST_TO_ADDR
// uc_nation := nation ;
47534: LD_ADDR_OWVAR 21
47538: PUSH
47539: LD_VAR 0 17
47543: ST_TO_ADDR
// if buildings then
47544: LD_VAR 0 18
47548: IFFALSE 48870
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47550: LD_ADDR_VAR 0 19
47554: PUSH
47555: LD_VAR 0 18
47559: PPUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 30
47565: PUSH
47566: LD_INT 29
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 30
47575: PUSH
47576: LD_INT 30
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: LIST
47587: PPUSH
47588: CALL_OW 72
47592: ST_TO_ADDR
// if tmp then
47593: LD_VAR 0 19
47597: IFFALSE 47645
// for i in tmp do
47599: LD_ADDR_VAR 0 8
47603: PUSH
47604: LD_VAR 0 19
47608: PUSH
47609: FOR_IN
47610: IFFALSE 47643
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47612: LD_VAR 0 8
47616: PPUSH
47617: CALL_OW 250
47621: PPUSH
47622: LD_VAR 0 8
47626: PPUSH
47627: CALL_OW 251
47631: PPUSH
47632: LD_VAR 0 16
47636: PPUSH
47637: CALL_OW 441
47641: GO 47609
47643: POP
47644: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47645: LD_VAR 0 18
47649: PPUSH
47650: LD_INT 2
47652: PUSH
47653: LD_INT 30
47655: PUSH
47656: LD_INT 32
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 30
47665: PUSH
47666: LD_INT 33
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: LIST
47677: PPUSH
47678: CALL_OW 72
47682: IFFALSE 47770
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47684: LD_ADDR_VAR 0 8
47688: PUSH
47689: LD_VAR 0 18
47693: PPUSH
47694: LD_INT 2
47696: PUSH
47697: LD_INT 30
47699: PUSH
47700: LD_INT 32
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 30
47709: PUSH
47710: LD_INT 33
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: PPUSH
47722: CALL_OW 72
47726: PUSH
47727: FOR_IN
47728: IFFALSE 47768
// begin if not GetBWeapon ( i ) then
47730: LD_VAR 0 8
47734: PPUSH
47735: CALL_OW 269
47739: NOT
47740: IFFALSE 47766
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47742: LD_VAR 0 8
47746: PPUSH
47747: LD_VAR 0 8
47751: PPUSH
47752: LD_VAR 0 2
47756: PPUSH
47757: CALL 49016 0 2
47761: PPUSH
47762: CALL_OW 431
// end ;
47766: GO 47727
47768: POP
47769: POP
// end ; for i = 1 to personel do
47770: LD_ADDR_VAR 0 8
47774: PUSH
47775: DOUBLE
47776: LD_INT 1
47778: DEC
47779: ST_TO_ADDR
47780: LD_VAR 0 6
47784: PUSH
47785: FOR_TO
47786: IFFALSE 48850
// begin if i > 4 then
47788: LD_VAR 0 8
47792: PUSH
47793: LD_INT 4
47795: GREATER
47796: IFFALSE 47800
// break ;
47798: GO 48850
// case i of 1 :
47800: LD_VAR 0 8
47804: PUSH
47805: LD_INT 1
47807: DOUBLE
47808: EQUAL
47809: IFTRUE 47813
47811: GO 47893
47813: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47814: LD_ADDR_VAR 0 12
47818: PUSH
47819: LD_VAR 0 18
47823: PPUSH
47824: LD_INT 22
47826: PUSH
47827: LD_VAR 0 16
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 58
47838: PUSH
47839: EMPTY
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 30
47847: PUSH
47848: LD_INT 32
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 30
47857: PUSH
47858: LD_INT 4
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 30
47867: PUSH
47868: LD_INT 5
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: PPUSH
47886: CALL_OW 72
47890: ST_TO_ADDR
47891: GO 48115
47893: LD_INT 2
47895: DOUBLE
47896: EQUAL
47897: IFTRUE 47901
47899: GO 47963
47901: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47902: LD_ADDR_VAR 0 12
47906: PUSH
47907: LD_VAR 0 18
47911: PPUSH
47912: LD_INT 22
47914: PUSH
47915: LD_VAR 0 16
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: PUSH
47927: LD_INT 30
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 30
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: LIST
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PPUSH
47956: CALL_OW 72
47960: ST_TO_ADDR
47961: GO 48115
47963: LD_INT 3
47965: DOUBLE
47966: EQUAL
47967: IFTRUE 47971
47969: GO 48033
47971: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47972: LD_ADDR_VAR 0 12
47976: PUSH
47977: LD_VAR 0 18
47981: PPUSH
47982: LD_INT 22
47984: PUSH
47985: LD_VAR 0 16
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: LD_INT 30
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 30
48009: PUSH
48010: LD_INT 3
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: LIST
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PPUSH
48026: CALL_OW 72
48030: ST_TO_ADDR
48031: GO 48115
48033: LD_INT 4
48035: DOUBLE
48036: EQUAL
48037: IFTRUE 48041
48039: GO 48114
48041: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48042: LD_ADDR_VAR 0 12
48046: PUSH
48047: LD_VAR 0 18
48051: PPUSH
48052: LD_INT 22
48054: PUSH
48055: LD_VAR 0 16
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 30
48069: PUSH
48070: LD_INT 6
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 30
48079: PUSH
48080: LD_INT 7
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 30
48089: PUSH
48090: LD_INT 8
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PPUSH
48107: CALL_OW 72
48111: ST_TO_ADDR
48112: GO 48115
48114: POP
// if i = 1 then
48115: LD_VAR 0 8
48119: PUSH
48120: LD_INT 1
48122: EQUAL
48123: IFFALSE 48234
// begin tmp := [ ] ;
48125: LD_ADDR_VAR 0 19
48129: PUSH
48130: EMPTY
48131: ST_TO_ADDR
// for j in f do
48132: LD_ADDR_VAR 0 9
48136: PUSH
48137: LD_VAR 0 12
48141: PUSH
48142: FOR_IN
48143: IFFALSE 48216
// if GetBType ( j ) = b_bunker then
48145: LD_VAR 0 9
48149: PPUSH
48150: CALL_OW 266
48154: PUSH
48155: LD_INT 32
48157: EQUAL
48158: IFFALSE 48185
// tmp := Insert ( tmp , 1 , j ) else
48160: LD_ADDR_VAR 0 19
48164: PUSH
48165: LD_VAR 0 19
48169: PPUSH
48170: LD_INT 1
48172: PPUSH
48173: LD_VAR 0 9
48177: PPUSH
48178: CALL_OW 2
48182: ST_TO_ADDR
48183: GO 48214
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48185: LD_ADDR_VAR 0 19
48189: PUSH
48190: LD_VAR 0 19
48194: PPUSH
48195: LD_VAR 0 19
48199: PUSH
48200: LD_INT 1
48202: PLUS
48203: PPUSH
48204: LD_VAR 0 9
48208: PPUSH
48209: CALL_OW 2
48213: ST_TO_ADDR
48214: GO 48142
48216: POP
48217: POP
// if tmp then
48218: LD_VAR 0 19
48222: IFFALSE 48234
// f := tmp ;
48224: LD_ADDR_VAR 0 12
48228: PUSH
48229: LD_VAR 0 19
48233: ST_TO_ADDR
// end ; x := personel [ i ] ;
48234: LD_ADDR_VAR 0 13
48238: PUSH
48239: LD_VAR 0 6
48243: PUSH
48244: LD_VAR 0 8
48248: ARRAY
48249: ST_TO_ADDR
// if x = - 1 then
48250: LD_VAR 0 13
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: EQUAL
48259: IFFALSE 48468
// begin for j in f do
48261: LD_ADDR_VAR 0 9
48265: PUSH
48266: LD_VAR 0 12
48270: PUSH
48271: FOR_IN
48272: IFFALSE 48464
// repeat InitHc ;
48274: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48278: LD_VAR 0 9
48282: PPUSH
48283: CALL_OW 266
48287: PUSH
48288: LD_INT 5
48290: EQUAL
48291: IFFALSE 48361
// begin if UnitsInside ( j ) < 3 then
48293: LD_VAR 0 9
48297: PPUSH
48298: CALL_OW 313
48302: PUSH
48303: LD_INT 3
48305: LESS
48306: IFFALSE 48342
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48308: LD_INT 0
48310: PPUSH
48311: LD_INT 5
48313: PUSH
48314: LD_INT 8
48316: PUSH
48317: LD_INT 9
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: LIST
48324: PUSH
48325: LD_VAR 0 17
48329: ARRAY
48330: PPUSH
48331: LD_VAR 0 4
48335: PPUSH
48336: CALL_OW 380
48340: GO 48359
// PrepareHuman ( false , i , skill ) ;
48342: LD_INT 0
48344: PPUSH
48345: LD_VAR 0 8
48349: PPUSH
48350: LD_VAR 0 4
48354: PPUSH
48355: CALL_OW 380
// end else
48359: GO 48378
// PrepareHuman ( false , i , skill ) ;
48361: LD_INT 0
48363: PPUSH
48364: LD_VAR 0 8
48368: PPUSH
48369: LD_VAR 0 4
48373: PPUSH
48374: CALL_OW 380
// un := CreateHuman ;
48378: LD_ADDR_VAR 0 14
48382: PUSH
48383: CALL_OW 44
48387: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48388: LD_ADDR_VAR 0 7
48392: PUSH
48393: LD_VAR 0 7
48397: PPUSH
48398: LD_INT 1
48400: PPUSH
48401: LD_VAR 0 14
48405: PPUSH
48406: CALL_OW 2
48410: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48411: LD_VAR 0 14
48415: PPUSH
48416: LD_VAR 0 9
48420: PPUSH
48421: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48425: LD_VAR 0 9
48429: PPUSH
48430: CALL_OW 313
48434: PUSH
48435: LD_INT 6
48437: EQUAL
48438: PUSH
48439: LD_VAR 0 9
48443: PPUSH
48444: CALL_OW 266
48448: PUSH
48449: LD_INT 32
48451: PUSH
48452: LD_INT 31
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: IN
48459: OR
48460: IFFALSE 48274
48462: GO 48271
48464: POP
48465: POP
// end else
48466: GO 48848
// for j = 1 to x do
48468: LD_ADDR_VAR 0 9
48472: PUSH
48473: DOUBLE
48474: LD_INT 1
48476: DEC
48477: ST_TO_ADDR
48478: LD_VAR 0 13
48482: PUSH
48483: FOR_TO
48484: IFFALSE 48846
// begin InitHc ;
48486: CALL_OW 19
// if not f then
48490: LD_VAR 0 12
48494: NOT
48495: IFFALSE 48584
// begin PrepareHuman ( false , i , skill ) ;
48497: LD_INT 0
48499: PPUSH
48500: LD_VAR 0 8
48504: PPUSH
48505: LD_VAR 0 4
48509: PPUSH
48510: CALL_OW 380
// un := CreateHuman ;
48514: LD_ADDR_VAR 0 14
48518: PUSH
48519: CALL_OW 44
48523: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48524: LD_ADDR_VAR 0 7
48528: PUSH
48529: LD_VAR 0 7
48533: PPUSH
48534: LD_INT 1
48536: PPUSH
48537: LD_VAR 0 14
48541: PPUSH
48542: CALL_OW 2
48546: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48547: LD_VAR 0 14
48551: PPUSH
48552: LD_VAR 0 1
48556: PPUSH
48557: CALL_OW 250
48561: PPUSH
48562: LD_VAR 0 1
48566: PPUSH
48567: CALL_OW 251
48571: PPUSH
48572: LD_INT 10
48574: PPUSH
48575: LD_INT 0
48577: PPUSH
48578: CALL_OW 50
// continue ;
48582: GO 48483
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48584: LD_VAR 0 12
48588: PUSH
48589: LD_INT 1
48591: ARRAY
48592: PPUSH
48593: CALL_OW 313
48597: PUSH
48598: LD_VAR 0 12
48602: PUSH
48603: LD_INT 1
48605: ARRAY
48606: PPUSH
48607: CALL_OW 266
48611: PUSH
48612: LD_INT 32
48614: PUSH
48615: LD_INT 31
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: IN
48622: AND
48623: PUSH
48624: LD_VAR 0 12
48628: PUSH
48629: LD_INT 1
48631: ARRAY
48632: PPUSH
48633: CALL_OW 313
48637: PUSH
48638: LD_INT 6
48640: EQUAL
48641: OR
48642: IFFALSE 48662
// f := Delete ( f , 1 ) ;
48644: LD_ADDR_VAR 0 12
48648: PUSH
48649: LD_VAR 0 12
48653: PPUSH
48654: LD_INT 1
48656: PPUSH
48657: CALL_OW 3
48661: ST_TO_ADDR
// if not f then
48662: LD_VAR 0 12
48666: NOT
48667: IFFALSE 48685
// begin x := x + 2 ;
48669: LD_ADDR_VAR 0 13
48673: PUSH
48674: LD_VAR 0 13
48678: PUSH
48679: LD_INT 2
48681: PLUS
48682: ST_TO_ADDR
// continue ;
48683: GO 48483
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48685: LD_VAR 0 12
48689: PUSH
48690: LD_INT 1
48692: ARRAY
48693: PPUSH
48694: CALL_OW 266
48698: PUSH
48699: LD_INT 5
48701: EQUAL
48702: IFFALSE 48776
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48704: LD_VAR 0 12
48708: PUSH
48709: LD_INT 1
48711: ARRAY
48712: PPUSH
48713: CALL_OW 313
48717: PUSH
48718: LD_INT 3
48720: LESS
48721: IFFALSE 48757
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48723: LD_INT 0
48725: PPUSH
48726: LD_INT 5
48728: PUSH
48729: LD_INT 8
48731: PUSH
48732: LD_INT 9
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: LIST
48739: PUSH
48740: LD_VAR 0 17
48744: ARRAY
48745: PPUSH
48746: LD_VAR 0 4
48750: PPUSH
48751: CALL_OW 380
48755: GO 48774
// PrepareHuman ( false , i , skill ) ;
48757: LD_INT 0
48759: PPUSH
48760: LD_VAR 0 8
48764: PPUSH
48765: LD_VAR 0 4
48769: PPUSH
48770: CALL_OW 380
// end else
48774: GO 48793
// PrepareHuman ( false , i , skill ) ;
48776: LD_INT 0
48778: PPUSH
48779: LD_VAR 0 8
48783: PPUSH
48784: LD_VAR 0 4
48788: PPUSH
48789: CALL_OW 380
// un := CreateHuman ;
48793: LD_ADDR_VAR 0 14
48797: PUSH
48798: CALL_OW 44
48802: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48803: LD_ADDR_VAR 0 7
48807: PUSH
48808: LD_VAR 0 7
48812: PPUSH
48813: LD_INT 1
48815: PPUSH
48816: LD_VAR 0 14
48820: PPUSH
48821: CALL_OW 2
48825: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48826: LD_VAR 0 14
48830: PPUSH
48831: LD_VAR 0 12
48835: PUSH
48836: LD_INT 1
48838: ARRAY
48839: PPUSH
48840: CALL_OW 52
// end ;
48844: GO 48483
48846: POP
48847: POP
// end ;
48848: GO 47785
48850: POP
48851: POP
// result := result ^ buildings ;
48852: LD_ADDR_VAR 0 7
48856: PUSH
48857: LD_VAR 0 7
48861: PUSH
48862: LD_VAR 0 18
48866: ADD
48867: ST_TO_ADDR
// end else
48868: GO 49011
// begin for i = 1 to personel do
48870: LD_ADDR_VAR 0 8
48874: PUSH
48875: DOUBLE
48876: LD_INT 1
48878: DEC
48879: ST_TO_ADDR
48880: LD_VAR 0 6
48884: PUSH
48885: FOR_TO
48886: IFFALSE 49009
// begin if i > 4 then
48888: LD_VAR 0 8
48892: PUSH
48893: LD_INT 4
48895: GREATER
48896: IFFALSE 48900
// break ;
48898: GO 49009
// x := personel [ i ] ;
48900: LD_ADDR_VAR 0 13
48904: PUSH
48905: LD_VAR 0 6
48909: PUSH
48910: LD_VAR 0 8
48914: ARRAY
48915: ST_TO_ADDR
// if x = - 1 then
48916: LD_VAR 0 13
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: EQUAL
48925: IFFALSE 48929
// continue ;
48927: GO 48885
// PrepareHuman ( false , i , skill ) ;
48929: LD_INT 0
48931: PPUSH
48932: LD_VAR 0 8
48936: PPUSH
48937: LD_VAR 0 4
48941: PPUSH
48942: CALL_OW 380
// un := CreateHuman ;
48946: LD_ADDR_VAR 0 14
48950: PUSH
48951: CALL_OW 44
48955: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48956: LD_VAR 0 14
48960: PPUSH
48961: LD_VAR 0 1
48965: PPUSH
48966: CALL_OW 250
48970: PPUSH
48971: LD_VAR 0 1
48975: PPUSH
48976: CALL_OW 251
48980: PPUSH
48981: LD_INT 10
48983: PPUSH
48984: LD_INT 0
48986: PPUSH
48987: CALL_OW 50
// result := result ^ un ;
48991: LD_ADDR_VAR 0 7
48995: PUSH
48996: LD_VAR 0 7
49000: PUSH
49001: LD_VAR 0 14
49005: ADD
49006: ST_TO_ADDR
// end ;
49007: GO 48885
49009: POP
49010: POP
// end ; end ;
49011: LD_VAR 0 7
49015: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49016: LD_INT 0
49018: PPUSH
49019: PPUSH
49020: PPUSH
49021: PPUSH
49022: PPUSH
49023: PPUSH
49024: PPUSH
49025: PPUSH
49026: PPUSH
49027: PPUSH
49028: PPUSH
49029: PPUSH
49030: PPUSH
49031: PPUSH
49032: PPUSH
49033: PPUSH
// result := false ;
49034: LD_ADDR_VAR 0 3
49038: PUSH
49039: LD_INT 0
49041: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49042: LD_VAR 0 1
49046: NOT
49047: PUSH
49048: LD_VAR 0 1
49052: PPUSH
49053: CALL_OW 266
49057: PUSH
49058: LD_INT 32
49060: PUSH
49061: LD_INT 33
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: IN
49068: NOT
49069: OR
49070: IFFALSE 49074
// exit ;
49072: GO 50183
// nat := GetNation ( tower ) ;
49074: LD_ADDR_VAR 0 12
49078: PUSH
49079: LD_VAR 0 1
49083: PPUSH
49084: CALL_OW 248
49088: ST_TO_ADDR
// side := GetSide ( tower ) ;
49089: LD_ADDR_VAR 0 16
49093: PUSH
49094: LD_VAR 0 1
49098: PPUSH
49099: CALL_OW 255
49103: ST_TO_ADDR
// x := GetX ( tower ) ;
49104: LD_ADDR_VAR 0 10
49108: PUSH
49109: LD_VAR 0 1
49113: PPUSH
49114: CALL_OW 250
49118: ST_TO_ADDR
// y := GetY ( tower ) ;
49119: LD_ADDR_VAR 0 11
49123: PUSH
49124: LD_VAR 0 1
49128: PPUSH
49129: CALL_OW 251
49133: ST_TO_ADDR
// if not x or not y then
49134: LD_VAR 0 10
49138: NOT
49139: PUSH
49140: LD_VAR 0 11
49144: NOT
49145: OR
49146: IFFALSE 49150
// exit ;
49148: GO 50183
// weapon := 0 ;
49150: LD_ADDR_VAR 0 18
49154: PUSH
49155: LD_INT 0
49157: ST_TO_ADDR
// fac_list := [ ] ;
49158: LD_ADDR_VAR 0 17
49162: PUSH
49163: EMPTY
49164: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49165: LD_ADDR_VAR 0 6
49169: PUSH
49170: LD_VAR 0 1
49174: PPUSH
49175: CALL_OW 274
49179: PPUSH
49180: LD_VAR 0 2
49184: PPUSH
49185: LD_INT 0
49187: PPUSH
49188: CALL 46754 0 3
49192: PPUSH
49193: LD_INT 30
49195: PUSH
49196: LD_INT 3
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PPUSH
49203: CALL_OW 72
49207: ST_TO_ADDR
// if not factories then
49208: LD_VAR 0 6
49212: NOT
49213: IFFALSE 49217
// exit ;
49215: GO 50183
// for i in factories do
49217: LD_ADDR_VAR 0 8
49221: PUSH
49222: LD_VAR 0 6
49226: PUSH
49227: FOR_IN
49228: IFFALSE 49253
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49230: LD_ADDR_VAR 0 17
49234: PUSH
49235: LD_VAR 0 17
49239: PUSH
49240: LD_VAR 0 8
49244: PPUSH
49245: CALL_OW 478
49249: UNION
49250: ST_TO_ADDR
49251: GO 49227
49253: POP
49254: POP
// if not fac_list then
49255: LD_VAR 0 17
49259: NOT
49260: IFFALSE 49264
// exit ;
49262: GO 50183
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49264: LD_ADDR_VAR 0 5
49268: PUSH
49269: LD_INT 4
49271: PUSH
49272: LD_INT 5
49274: PUSH
49275: LD_INT 9
49277: PUSH
49278: LD_INT 10
49280: PUSH
49281: LD_INT 6
49283: PUSH
49284: LD_INT 7
49286: PUSH
49287: LD_INT 11
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 27
49301: PUSH
49302: LD_INT 28
49304: PUSH
49305: LD_INT 26
49307: PUSH
49308: LD_INT 30
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 43
49319: PUSH
49320: LD_INT 44
49322: PUSH
49323: LD_INT 46
49325: PUSH
49326: LD_INT 45
49328: PUSH
49329: LD_INT 47
49331: PUSH
49332: LD_INT 49
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: LIST
49347: PUSH
49348: LD_VAR 0 12
49352: ARRAY
49353: ST_TO_ADDR
// list := list isect fac_list ;
49354: LD_ADDR_VAR 0 5
49358: PUSH
49359: LD_VAR 0 5
49363: PUSH
49364: LD_VAR 0 17
49368: ISECT
49369: ST_TO_ADDR
// if not list then
49370: LD_VAR 0 5
49374: NOT
49375: IFFALSE 49379
// exit ;
49377: GO 50183
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49379: LD_VAR 0 12
49383: PUSH
49384: LD_INT 3
49386: EQUAL
49387: PUSH
49388: LD_INT 49
49390: PUSH
49391: LD_VAR 0 5
49395: IN
49396: AND
49397: PUSH
49398: LD_INT 31
49400: PPUSH
49401: LD_VAR 0 16
49405: PPUSH
49406: CALL_OW 321
49410: PUSH
49411: LD_INT 2
49413: EQUAL
49414: AND
49415: IFFALSE 49475
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49417: LD_INT 22
49419: PUSH
49420: LD_VAR 0 16
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 35
49431: PUSH
49432: LD_INT 49
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 91
49441: PUSH
49442: LD_VAR 0 1
49446: PUSH
49447: LD_INT 10
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: LIST
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: PPUSH
49460: CALL_OW 69
49464: NOT
49465: IFFALSE 49475
// weapon := ru_time_lapser ;
49467: LD_ADDR_VAR 0 18
49471: PUSH
49472: LD_INT 49
49474: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49475: LD_VAR 0 12
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: IN
49490: PUSH
49491: LD_INT 11
49493: PUSH
49494: LD_VAR 0 5
49498: IN
49499: PUSH
49500: LD_INT 30
49502: PUSH
49503: LD_VAR 0 5
49507: IN
49508: OR
49509: AND
49510: PUSH
49511: LD_INT 6
49513: PPUSH
49514: LD_VAR 0 16
49518: PPUSH
49519: CALL_OW 321
49523: PUSH
49524: LD_INT 2
49526: EQUAL
49527: AND
49528: IFFALSE 49693
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49530: LD_INT 22
49532: PUSH
49533: LD_VAR 0 16
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 35
49547: PUSH
49548: LD_INT 11
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 35
49557: PUSH
49558: LD_INT 30
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 91
49572: PUSH
49573: LD_VAR 0 1
49577: PUSH
49578: LD_INT 18
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: LIST
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: LIST
49590: PPUSH
49591: CALL_OW 69
49595: NOT
49596: PUSH
49597: LD_INT 22
49599: PUSH
49600: LD_VAR 0 16
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: LD_INT 30
49614: PUSH
49615: LD_INT 32
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 30
49624: PUSH
49625: LD_INT 33
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 91
49639: PUSH
49640: LD_VAR 0 1
49644: PUSH
49645: LD_INT 12
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: LIST
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: PUSH
49658: EMPTY
49659: LIST
49660: PPUSH
49661: CALL_OW 69
49665: PUSH
49666: LD_INT 2
49668: GREATER
49669: AND
49670: IFFALSE 49693
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49672: LD_ADDR_VAR 0 18
49676: PUSH
49677: LD_INT 11
49679: PUSH
49680: LD_INT 30
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_VAR 0 12
49691: ARRAY
49692: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49693: LD_VAR 0 18
49697: NOT
49698: PUSH
49699: LD_INT 40
49701: PPUSH
49702: LD_VAR 0 16
49706: PPUSH
49707: CALL_OW 321
49711: PUSH
49712: LD_INT 2
49714: EQUAL
49715: AND
49716: PUSH
49717: LD_INT 7
49719: PUSH
49720: LD_VAR 0 5
49724: IN
49725: PUSH
49726: LD_INT 28
49728: PUSH
49729: LD_VAR 0 5
49733: IN
49734: OR
49735: PUSH
49736: LD_INT 45
49738: PUSH
49739: LD_VAR 0 5
49743: IN
49744: OR
49745: AND
49746: IFFALSE 50000
// begin hex := GetHexInfo ( x , y ) ;
49748: LD_ADDR_VAR 0 4
49752: PUSH
49753: LD_VAR 0 10
49757: PPUSH
49758: LD_VAR 0 11
49762: PPUSH
49763: CALL_OW 546
49767: ST_TO_ADDR
// if hex [ 1 ] then
49768: LD_VAR 0 4
49772: PUSH
49773: LD_INT 1
49775: ARRAY
49776: IFFALSE 49780
// exit ;
49778: GO 50183
// height := hex [ 2 ] ;
49780: LD_ADDR_VAR 0 15
49784: PUSH
49785: LD_VAR 0 4
49789: PUSH
49790: LD_INT 2
49792: ARRAY
49793: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49794: LD_ADDR_VAR 0 14
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: LD_INT 3
49807: PUSH
49808: LD_INT 5
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: ST_TO_ADDR
// for i in tmp do
49817: LD_ADDR_VAR 0 8
49821: PUSH
49822: LD_VAR 0 14
49826: PUSH
49827: FOR_IN
49828: IFFALSE 49998
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49830: LD_ADDR_VAR 0 9
49834: PUSH
49835: LD_VAR 0 10
49839: PPUSH
49840: LD_VAR 0 8
49844: PPUSH
49845: LD_INT 5
49847: PPUSH
49848: CALL_OW 272
49852: PUSH
49853: LD_VAR 0 11
49857: PPUSH
49858: LD_VAR 0 8
49862: PPUSH
49863: LD_INT 5
49865: PPUSH
49866: CALL_OW 273
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49875: LD_VAR 0 9
49879: PUSH
49880: LD_INT 1
49882: ARRAY
49883: PPUSH
49884: LD_VAR 0 9
49888: PUSH
49889: LD_INT 2
49891: ARRAY
49892: PPUSH
49893: CALL_OW 488
49897: IFFALSE 49996
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49899: LD_ADDR_VAR 0 4
49903: PUSH
49904: LD_VAR 0 9
49908: PUSH
49909: LD_INT 1
49911: ARRAY
49912: PPUSH
49913: LD_VAR 0 9
49917: PUSH
49918: LD_INT 2
49920: ARRAY
49921: PPUSH
49922: CALL_OW 546
49926: ST_TO_ADDR
// if hex [ 1 ] then
49927: LD_VAR 0 4
49931: PUSH
49932: LD_INT 1
49934: ARRAY
49935: IFFALSE 49939
// continue ;
49937: GO 49827
// h := hex [ 2 ] ;
49939: LD_ADDR_VAR 0 13
49943: PUSH
49944: LD_VAR 0 4
49948: PUSH
49949: LD_INT 2
49951: ARRAY
49952: ST_TO_ADDR
// if h + 7 < height then
49953: LD_VAR 0 13
49957: PUSH
49958: LD_INT 7
49960: PLUS
49961: PUSH
49962: LD_VAR 0 15
49966: LESS
49967: IFFALSE 49996
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49969: LD_ADDR_VAR 0 18
49973: PUSH
49974: LD_INT 7
49976: PUSH
49977: LD_INT 28
49979: PUSH
49980: LD_INT 45
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: LIST
49987: PUSH
49988: LD_VAR 0 12
49992: ARRAY
49993: ST_TO_ADDR
// break ;
49994: GO 49998
// end ; end ; end ;
49996: GO 49827
49998: POP
49999: POP
// end ; if not weapon then
50000: LD_VAR 0 18
50004: NOT
50005: IFFALSE 50065
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50007: LD_ADDR_VAR 0 5
50011: PUSH
50012: LD_VAR 0 5
50016: PUSH
50017: LD_INT 11
50019: PUSH
50020: LD_INT 30
50022: PUSH
50023: LD_INT 49
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: DIFF
50031: ST_TO_ADDR
// if not list then
50032: LD_VAR 0 5
50036: NOT
50037: IFFALSE 50041
// exit ;
50039: GO 50183
// weapon := list [ rand ( 1 , list ) ] ;
50041: LD_ADDR_VAR 0 18
50045: PUSH
50046: LD_VAR 0 5
50050: PUSH
50051: LD_INT 1
50053: PPUSH
50054: LD_VAR 0 5
50058: PPUSH
50059: CALL_OW 12
50063: ARRAY
50064: ST_TO_ADDR
// end ; if weapon then
50065: LD_VAR 0 18
50069: IFFALSE 50183
// begin tmp := CostOfWeapon ( weapon ) ;
50071: LD_ADDR_VAR 0 14
50075: PUSH
50076: LD_VAR 0 18
50080: PPUSH
50081: CALL_OW 451
50085: ST_TO_ADDR
// j := GetBase ( tower ) ;
50086: LD_ADDR_VAR 0 9
50090: PUSH
50091: LD_VAR 0 1
50095: PPUSH
50096: CALL_OW 274
50100: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50101: LD_VAR 0 9
50105: PPUSH
50106: LD_INT 1
50108: PPUSH
50109: CALL_OW 275
50113: PUSH
50114: LD_VAR 0 14
50118: PUSH
50119: LD_INT 1
50121: ARRAY
50122: GREATEREQUAL
50123: PUSH
50124: LD_VAR 0 9
50128: PPUSH
50129: LD_INT 2
50131: PPUSH
50132: CALL_OW 275
50136: PUSH
50137: LD_VAR 0 14
50141: PUSH
50142: LD_INT 2
50144: ARRAY
50145: GREATEREQUAL
50146: AND
50147: PUSH
50148: LD_VAR 0 9
50152: PPUSH
50153: LD_INT 3
50155: PPUSH
50156: CALL_OW 275
50160: PUSH
50161: LD_VAR 0 14
50165: PUSH
50166: LD_INT 3
50168: ARRAY
50169: GREATEREQUAL
50170: AND
50171: IFFALSE 50183
// result := weapon ;
50173: LD_ADDR_VAR 0 3
50177: PUSH
50178: LD_VAR 0 18
50182: ST_TO_ADDR
// end ; end ;
50183: LD_VAR 0 3
50187: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50188: LD_INT 0
50190: PPUSH
50191: PPUSH
// result := true ;
50192: LD_ADDR_VAR 0 3
50196: PUSH
50197: LD_INT 1
50199: ST_TO_ADDR
// if array1 = array2 then
50200: LD_VAR 0 1
50204: PUSH
50205: LD_VAR 0 2
50209: EQUAL
50210: IFFALSE 50270
// begin for i = 1 to array1 do
50212: LD_ADDR_VAR 0 4
50216: PUSH
50217: DOUBLE
50218: LD_INT 1
50220: DEC
50221: ST_TO_ADDR
50222: LD_VAR 0 1
50226: PUSH
50227: FOR_TO
50228: IFFALSE 50266
// if array1 [ i ] <> array2 [ i ] then
50230: LD_VAR 0 1
50234: PUSH
50235: LD_VAR 0 4
50239: ARRAY
50240: PUSH
50241: LD_VAR 0 2
50245: PUSH
50246: LD_VAR 0 4
50250: ARRAY
50251: NONEQUAL
50252: IFFALSE 50264
// begin result := false ;
50254: LD_ADDR_VAR 0 3
50258: PUSH
50259: LD_INT 0
50261: ST_TO_ADDR
// break ;
50262: GO 50266
// end ;
50264: GO 50227
50266: POP
50267: POP
// end else
50268: GO 50278
// result := false ;
50270: LD_ADDR_VAR 0 3
50274: PUSH
50275: LD_INT 0
50277: ST_TO_ADDR
// end ;
50278: LD_VAR 0 3
50282: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50283: LD_INT 0
50285: PPUSH
50286: PPUSH
// if not array1 or not array2 then
50287: LD_VAR 0 1
50291: NOT
50292: PUSH
50293: LD_VAR 0 2
50297: NOT
50298: OR
50299: IFFALSE 50303
// exit ;
50301: GO 50367
// result := true ;
50303: LD_ADDR_VAR 0 3
50307: PUSH
50308: LD_INT 1
50310: ST_TO_ADDR
// for i = 1 to array1 do
50311: LD_ADDR_VAR 0 4
50315: PUSH
50316: DOUBLE
50317: LD_INT 1
50319: DEC
50320: ST_TO_ADDR
50321: LD_VAR 0 1
50325: PUSH
50326: FOR_TO
50327: IFFALSE 50365
// if array1 [ i ] <> array2 [ i ] then
50329: LD_VAR 0 1
50333: PUSH
50334: LD_VAR 0 4
50338: ARRAY
50339: PUSH
50340: LD_VAR 0 2
50344: PUSH
50345: LD_VAR 0 4
50349: ARRAY
50350: NONEQUAL
50351: IFFALSE 50363
// begin result := false ;
50353: LD_ADDR_VAR 0 3
50357: PUSH
50358: LD_INT 0
50360: ST_TO_ADDR
// break ;
50361: GO 50365
// end ;
50363: GO 50326
50365: POP
50366: POP
// end ;
50367: LD_VAR 0 3
50371: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50372: LD_INT 0
50374: PPUSH
50375: PPUSH
50376: PPUSH
// pom := GetBase ( fac ) ;
50377: LD_ADDR_VAR 0 5
50381: PUSH
50382: LD_VAR 0 1
50386: PPUSH
50387: CALL_OW 274
50391: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50392: LD_ADDR_VAR 0 4
50396: PUSH
50397: LD_VAR 0 2
50401: PUSH
50402: LD_INT 1
50404: ARRAY
50405: PPUSH
50406: LD_VAR 0 2
50410: PUSH
50411: LD_INT 2
50413: ARRAY
50414: PPUSH
50415: LD_VAR 0 2
50419: PUSH
50420: LD_INT 3
50422: ARRAY
50423: PPUSH
50424: LD_VAR 0 2
50428: PUSH
50429: LD_INT 4
50431: ARRAY
50432: PPUSH
50433: CALL_OW 449
50437: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50438: LD_ADDR_VAR 0 3
50442: PUSH
50443: LD_VAR 0 5
50447: PPUSH
50448: LD_INT 1
50450: PPUSH
50451: CALL_OW 275
50455: PUSH
50456: LD_VAR 0 4
50460: PUSH
50461: LD_INT 1
50463: ARRAY
50464: GREATEREQUAL
50465: PUSH
50466: LD_VAR 0 5
50470: PPUSH
50471: LD_INT 2
50473: PPUSH
50474: CALL_OW 275
50478: PUSH
50479: LD_VAR 0 4
50483: PUSH
50484: LD_INT 2
50486: ARRAY
50487: GREATEREQUAL
50488: AND
50489: PUSH
50490: LD_VAR 0 5
50494: PPUSH
50495: LD_INT 3
50497: PPUSH
50498: CALL_OW 275
50502: PUSH
50503: LD_VAR 0 4
50507: PUSH
50508: LD_INT 3
50510: ARRAY
50511: GREATEREQUAL
50512: AND
50513: ST_TO_ADDR
// end ;
50514: LD_VAR 0 3
50518: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50519: LD_INT 0
50521: PPUSH
50522: PPUSH
50523: PPUSH
50524: PPUSH
// pom := GetBase ( building ) ;
50525: LD_ADDR_VAR 0 3
50529: PUSH
50530: LD_VAR 0 1
50534: PPUSH
50535: CALL_OW 274
50539: ST_TO_ADDR
// if not pom then
50540: LD_VAR 0 3
50544: NOT
50545: IFFALSE 50549
// exit ;
50547: GO 50719
// btype := GetBType ( building ) ;
50549: LD_ADDR_VAR 0 5
50553: PUSH
50554: LD_VAR 0 1
50558: PPUSH
50559: CALL_OW 266
50563: ST_TO_ADDR
// if btype = b_armoury then
50564: LD_VAR 0 5
50568: PUSH
50569: LD_INT 4
50571: EQUAL
50572: IFFALSE 50582
// btype := b_barracks ;
50574: LD_ADDR_VAR 0 5
50578: PUSH
50579: LD_INT 5
50581: ST_TO_ADDR
// if btype = b_depot then
50582: LD_VAR 0 5
50586: PUSH
50587: LD_INT 0
50589: EQUAL
50590: IFFALSE 50600
// btype := b_warehouse ;
50592: LD_ADDR_VAR 0 5
50596: PUSH
50597: LD_INT 1
50599: ST_TO_ADDR
// if btype = b_workshop then
50600: LD_VAR 0 5
50604: PUSH
50605: LD_INT 2
50607: EQUAL
50608: IFFALSE 50618
// btype := b_factory ;
50610: LD_ADDR_VAR 0 5
50614: PUSH
50615: LD_INT 3
50617: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50618: LD_ADDR_VAR 0 4
50622: PUSH
50623: LD_VAR 0 5
50627: PPUSH
50628: LD_VAR 0 1
50632: PPUSH
50633: CALL_OW 248
50637: PPUSH
50638: CALL_OW 450
50642: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50643: LD_ADDR_VAR 0 2
50647: PUSH
50648: LD_VAR 0 3
50652: PPUSH
50653: LD_INT 1
50655: PPUSH
50656: CALL_OW 275
50660: PUSH
50661: LD_VAR 0 4
50665: PUSH
50666: LD_INT 1
50668: ARRAY
50669: GREATEREQUAL
50670: PUSH
50671: LD_VAR 0 3
50675: PPUSH
50676: LD_INT 2
50678: PPUSH
50679: CALL_OW 275
50683: PUSH
50684: LD_VAR 0 4
50688: PUSH
50689: LD_INT 2
50691: ARRAY
50692: GREATEREQUAL
50693: AND
50694: PUSH
50695: LD_VAR 0 3
50699: PPUSH
50700: LD_INT 3
50702: PPUSH
50703: CALL_OW 275
50707: PUSH
50708: LD_VAR 0 4
50712: PUSH
50713: LD_INT 3
50715: ARRAY
50716: GREATEREQUAL
50717: AND
50718: ST_TO_ADDR
// end ;
50719: LD_VAR 0 2
50723: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50724: LD_INT 0
50726: PPUSH
50727: PPUSH
50728: PPUSH
// pom := GetBase ( building ) ;
50729: LD_ADDR_VAR 0 4
50733: PUSH
50734: LD_VAR 0 1
50738: PPUSH
50739: CALL_OW 274
50743: ST_TO_ADDR
// if not pom then
50744: LD_VAR 0 4
50748: NOT
50749: IFFALSE 50753
// exit ;
50751: GO 50854
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50753: LD_ADDR_VAR 0 5
50757: PUSH
50758: LD_VAR 0 2
50762: PPUSH
50763: LD_VAR 0 1
50767: PPUSH
50768: CALL_OW 248
50772: PPUSH
50773: CALL_OW 450
50777: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50778: LD_ADDR_VAR 0 3
50782: PUSH
50783: LD_VAR 0 4
50787: PPUSH
50788: LD_INT 1
50790: PPUSH
50791: CALL_OW 275
50795: PUSH
50796: LD_VAR 0 5
50800: PUSH
50801: LD_INT 1
50803: ARRAY
50804: GREATEREQUAL
50805: PUSH
50806: LD_VAR 0 4
50810: PPUSH
50811: LD_INT 2
50813: PPUSH
50814: CALL_OW 275
50818: PUSH
50819: LD_VAR 0 5
50823: PUSH
50824: LD_INT 2
50826: ARRAY
50827: GREATEREQUAL
50828: AND
50829: PUSH
50830: LD_VAR 0 4
50834: PPUSH
50835: LD_INT 3
50837: PPUSH
50838: CALL_OW 275
50842: PUSH
50843: LD_VAR 0 5
50847: PUSH
50848: LD_INT 3
50850: ARRAY
50851: GREATEREQUAL
50852: AND
50853: ST_TO_ADDR
// end ;
50854: LD_VAR 0 3
50858: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50859: LD_INT 0
50861: PPUSH
50862: PPUSH
50863: PPUSH
50864: PPUSH
50865: PPUSH
50866: PPUSH
50867: PPUSH
50868: PPUSH
50869: PPUSH
50870: PPUSH
50871: PPUSH
// result := false ;
50872: LD_ADDR_VAR 0 8
50876: PUSH
50877: LD_INT 0
50879: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50880: LD_VAR 0 5
50884: NOT
50885: PUSH
50886: LD_VAR 0 1
50890: NOT
50891: OR
50892: PUSH
50893: LD_VAR 0 2
50897: NOT
50898: OR
50899: PUSH
50900: LD_VAR 0 3
50904: NOT
50905: OR
50906: IFFALSE 50910
// exit ;
50908: GO 51724
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50910: LD_ADDR_VAR 0 14
50914: PUSH
50915: LD_VAR 0 1
50919: PPUSH
50920: LD_VAR 0 2
50924: PPUSH
50925: LD_VAR 0 3
50929: PPUSH
50930: LD_VAR 0 4
50934: PPUSH
50935: LD_VAR 0 5
50939: PUSH
50940: LD_INT 1
50942: ARRAY
50943: PPUSH
50944: CALL_OW 248
50948: PPUSH
50949: LD_INT 0
50951: PPUSH
50952: CALL 52961 0 6
50956: ST_TO_ADDR
// if not hexes then
50957: LD_VAR 0 14
50961: NOT
50962: IFFALSE 50966
// exit ;
50964: GO 51724
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50966: LD_ADDR_VAR 0 17
50970: PUSH
50971: LD_VAR 0 5
50975: PPUSH
50976: LD_INT 22
50978: PUSH
50979: LD_VAR 0 13
50983: PPUSH
50984: CALL_OW 255
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: LD_INT 30
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 30
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: LIST
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PPUSH
51025: CALL_OW 72
51029: ST_TO_ADDR
// for i = 1 to hexes do
51030: LD_ADDR_VAR 0 9
51034: PUSH
51035: DOUBLE
51036: LD_INT 1
51038: DEC
51039: ST_TO_ADDR
51040: LD_VAR 0 14
51044: PUSH
51045: FOR_TO
51046: IFFALSE 51722
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51048: LD_ADDR_VAR 0 13
51052: PUSH
51053: LD_VAR 0 14
51057: PUSH
51058: LD_VAR 0 9
51062: ARRAY
51063: PUSH
51064: LD_INT 1
51066: ARRAY
51067: PPUSH
51068: LD_VAR 0 14
51072: PUSH
51073: LD_VAR 0 9
51077: ARRAY
51078: PUSH
51079: LD_INT 2
51081: ARRAY
51082: PPUSH
51083: CALL_OW 428
51087: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51088: LD_VAR 0 14
51092: PUSH
51093: LD_VAR 0 9
51097: ARRAY
51098: PUSH
51099: LD_INT 1
51101: ARRAY
51102: PPUSH
51103: LD_VAR 0 14
51107: PUSH
51108: LD_VAR 0 9
51112: ARRAY
51113: PUSH
51114: LD_INT 2
51116: ARRAY
51117: PPUSH
51118: CALL_OW 351
51122: PUSH
51123: LD_VAR 0 14
51127: PUSH
51128: LD_VAR 0 9
51132: ARRAY
51133: PUSH
51134: LD_INT 1
51136: ARRAY
51137: PPUSH
51138: LD_VAR 0 14
51142: PUSH
51143: LD_VAR 0 9
51147: ARRAY
51148: PUSH
51149: LD_INT 2
51151: ARRAY
51152: PPUSH
51153: CALL_OW 488
51157: NOT
51158: OR
51159: PUSH
51160: LD_VAR 0 13
51164: PPUSH
51165: CALL_OW 247
51169: PUSH
51170: LD_INT 3
51172: EQUAL
51173: OR
51174: IFFALSE 51180
// exit ;
51176: POP
51177: POP
51178: GO 51724
// if not tmp then
51180: LD_VAR 0 13
51184: NOT
51185: IFFALSE 51189
// continue ;
51187: GO 51045
// result := true ;
51189: LD_ADDR_VAR 0 8
51193: PUSH
51194: LD_INT 1
51196: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51197: LD_VAR 0 6
51201: PUSH
51202: LD_VAR 0 13
51206: PPUSH
51207: CALL_OW 247
51211: PUSH
51212: LD_INT 2
51214: EQUAL
51215: AND
51216: PUSH
51217: LD_VAR 0 13
51221: PPUSH
51222: CALL_OW 263
51226: PUSH
51227: LD_INT 1
51229: EQUAL
51230: AND
51231: IFFALSE 51395
// begin if IsDrivenBy ( tmp ) then
51233: LD_VAR 0 13
51237: PPUSH
51238: CALL_OW 311
51242: IFFALSE 51246
// continue ;
51244: GO 51045
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51246: LD_VAR 0 6
51250: PPUSH
51251: LD_INT 3
51253: PUSH
51254: LD_INT 60
51256: PUSH
51257: EMPTY
51258: LIST
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 3
51266: PUSH
51267: LD_INT 55
51269: PUSH
51270: EMPTY
51271: LIST
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PPUSH
51281: CALL_OW 72
51285: IFFALSE 51393
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51287: LD_ADDR_VAR 0 18
51291: PUSH
51292: LD_VAR 0 6
51296: PPUSH
51297: LD_INT 3
51299: PUSH
51300: LD_INT 60
51302: PUSH
51303: EMPTY
51304: LIST
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 3
51312: PUSH
51313: LD_INT 55
51315: PUSH
51316: EMPTY
51317: LIST
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PPUSH
51327: CALL_OW 72
51331: PUSH
51332: LD_INT 1
51334: ARRAY
51335: ST_TO_ADDR
// if IsInUnit ( driver ) then
51336: LD_VAR 0 18
51340: PPUSH
51341: CALL_OW 310
51345: IFFALSE 51356
// ComExit ( driver ) ;
51347: LD_VAR 0 18
51351: PPUSH
51352: CALL 76666 0 1
// AddComEnterUnit ( driver , tmp ) ;
51356: LD_VAR 0 18
51360: PPUSH
51361: LD_VAR 0 13
51365: PPUSH
51366: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51370: LD_VAR 0 18
51374: PPUSH
51375: LD_VAR 0 7
51379: PPUSH
51380: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51384: LD_VAR 0 18
51388: PPUSH
51389: CALL_OW 181
// end ; continue ;
51393: GO 51045
// end ; if not cleaners or not tmp in cleaners then
51395: LD_VAR 0 6
51399: NOT
51400: PUSH
51401: LD_VAR 0 13
51405: PUSH
51406: LD_VAR 0 6
51410: IN
51411: NOT
51412: OR
51413: IFFALSE 51720
// begin if dep then
51415: LD_VAR 0 17
51419: IFFALSE 51555
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51421: LD_ADDR_VAR 0 16
51425: PUSH
51426: LD_VAR 0 17
51430: PUSH
51431: LD_INT 1
51433: ARRAY
51434: PPUSH
51435: CALL_OW 250
51439: PPUSH
51440: LD_VAR 0 17
51444: PUSH
51445: LD_INT 1
51447: ARRAY
51448: PPUSH
51449: CALL_OW 254
51453: PPUSH
51454: LD_INT 5
51456: PPUSH
51457: CALL_OW 272
51461: PUSH
51462: LD_VAR 0 17
51466: PUSH
51467: LD_INT 1
51469: ARRAY
51470: PPUSH
51471: CALL_OW 251
51475: PPUSH
51476: LD_VAR 0 17
51480: PUSH
51481: LD_INT 1
51483: ARRAY
51484: PPUSH
51485: CALL_OW 254
51489: PPUSH
51490: LD_INT 5
51492: PPUSH
51493: CALL_OW 273
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51502: LD_VAR 0 16
51506: PUSH
51507: LD_INT 1
51509: ARRAY
51510: PPUSH
51511: LD_VAR 0 16
51515: PUSH
51516: LD_INT 2
51518: ARRAY
51519: PPUSH
51520: CALL_OW 488
51524: IFFALSE 51555
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51526: LD_VAR 0 13
51530: PPUSH
51531: LD_VAR 0 16
51535: PUSH
51536: LD_INT 1
51538: ARRAY
51539: PPUSH
51540: LD_VAR 0 16
51544: PUSH
51545: LD_INT 2
51547: ARRAY
51548: PPUSH
51549: CALL_OW 111
// continue ;
51553: GO 51045
// end ; end ; r := GetDir ( tmp ) ;
51555: LD_ADDR_VAR 0 15
51559: PUSH
51560: LD_VAR 0 13
51564: PPUSH
51565: CALL_OW 254
51569: ST_TO_ADDR
// if r = 5 then
51570: LD_VAR 0 15
51574: PUSH
51575: LD_INT 5
51577: EQUAL
51578: IFFALSE 51588
// r := 0 ;
51580: LD_ADDR_VAR 0 15
51584: PUSH
51585: LD_INT 0
51587: ST_TO_ADDR
// for j = r to 5 do
51588: LD_ADDR_VAR 0 10
51592: PUSH
51593: DOUBLE
51594: LD_VAR 0 15
51598: DEC
51599: ST_TO_ADDR
51600: LD_INT 5
51602: PUSH
51603: FOR_TO
51604: IFFALSE 51718
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51606: LD_ADDR_VAR 0 11
51610: PUSH
51611: LD_VAR 0 13
51615: PPUSH
51616: CALL_OW 250
51620: PPUSH
51621: LD_VAR 0 10
51625: PPUSH
51626: LD_INT 2
51628: PPUSH
51629: CALL_OW 272
51633: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51634: LD_ADDR_VAR 0 12
51638: PUSH
51639: LD_VAR 0 13
51643: PPUSH
51644: CALL_OW 251
51648: PPUSH
51649: LD_VAR 0 10
51653: PPUSH
51654: LD_INT 2
51656: PPUSH
51657: CALL_OW 273
51661: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51662: LD_VAR 0 11
51666: PPUSH
51667: LD_VAR 0 12
51671: PPUSH
51672: CALL_OW 488
51676: PUSH
51677: LD_VAR 0 11
51681: PPUSH
51682: LD_VAR 0 12
51686: PPUSH
51687: CALL_OW 428
51691: NOT
51692: AND
51693: IFFALSE 51716
// begin ComMoveXY ( tmp , _x , _y ) ;
51695: LD_VAR 0 13
51699: PPUSH
51700: LD_VAR 0 11
51704: PPUSH
51705: LD_VAR 0 12
51709: PPUSH
51710: CALL_OW 111
// break ;
51714: GO 51718
// end ; end ;
51716: GO 51603
51718: POP
51719: POP
// end ; end ;
51720: GO 51045
51722: POP
51723: POP
// end ;
51724: LD_VAR 0 8
51728: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51729: LD_INT 0
51731: PPUSH
// result := true ;
51732: LD_ADDR_VAR 0 3
51736: PUSH
51737: LD_INT 1
51739: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51740: LD_VAR 0 2
51744: PUSH
51745: LD_INT 24
51747: DOUBLE
51748: EQUAL
51749: IFTRUE 51759
51751: LD_INT 33
51753: DOUBLE
51754: EQUAL
51755: IFTRUE 51759
51757: GO 51784
51759: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51760: LD_ADDR_VAR 0 3
51764: PUSH
51765: LD_INT 32
51767: PPUSH
51768: LD_VAR 0 1
51772: PPUSH
51773: CALL_OW 321
51777: PUSH
51778: LD_INT 2
51780: EQUAL
51781: ST_TO_ADDR
51782: GO 52104
51784: LD_INT 20
51786: DOUBLE
51787: EQUAL
51788: IFTRUE 51792
51790: GO 51817
51792: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51793: LD_ADDR_VAR 0 3
51797: PUSH
51798: LD_INT 6
51800: PPUSH
51801: LD_VAR 0 1
51805: PPUSH
51806: CALL_OW 321
51810: PUSH
51811: LD_INT 2
51813: EQUAL
51814: ST_TO_ADDR
51815: GO 52104
51817: LD_INT 22
51819: DOUBLE
51820: EQUAL
51821: IFTRUE 51831
51823: LD_INT 36
51825: DOUBLE
51826: EQUAL
51827: IFTRUE 51831
51829: GO 51856
51831: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51832: LD_ADDR_VAR 0 3
51836: PUSH
51837: LD_INT 15
51839: PPUSH
51840: LD_VAR 0 1
51844: PPUSH
51845: CALL_OW 321
51849: PUSH
51850: LD_INT 2
51852: EQUAL
51853: ST_TO_ADDR
51854: GO 52104
51856: LD_INT 30
51858: DOUBLE
51859: EQUAL
51860: IFTRUE 51864
51862: GO 51889
51864: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51865: LD_ADDR_VAR 0 3
51869: PUSH
51870: LD_INT 20
51872: PPUSH
51873: LD_VAR 0 1
51877: PPUSH
51878: CALL_OW 321
51882: PUSH
51883: LD_INT 2
51885: EQUAL
51886: ST_TO_ADDR
51887: GO 52104
51889: LD_INT 28
51891: DOUBLE
51892: EQUAL
51893: IFTRUE 51903
51895: LD_INT 21
51897: DOUBLE
51898: EQUAL
51899: IFTRUE 51903
51901: GO 51928
51903: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51904: LD_ADDR_VAR 0 3
51908: PUSH
51909: LD_INT 21
51911: PPUSH
51912: LD_VAR 0 1
51916: PPUSH
51917: CALL_OW 321
51921: PUSH
51922: LD_INT 2
51924: EQUAL
51925: ST_TO_ADDR
51926: GO 52104
51928: LD_INT 16
51930: DOUBLE
51931: EQUAL
51932: IFTRUE 51936
51934: GO 51963
51936: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51937: LD_ADDR_VAR 0 3
51941: PUSH
51942: LD_EXP 56
51946: PPUSH
51947: LD_VAR 0 1
51951: PPUSH
51952: CALL_OW 321
51956: PUSH
51957: LD_INT 2
51959: EQUAL
51960: ST_TO_ADDR
51961: GO 52104
51963: LD_INT 19
51965: DOUBLE
51966: EQUAL
51967: IFTRUE 51977
51969: LD_INT 23
51971: DOUBLE
51972: EQUAL
51973: IFTRUE 51977
51975: GO 52004
51977: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51978: LD_ADDR_VAR 0 3
51982: PUSH
51983: LD_EXP 55
51987: PPUSH
51988: LD_VAR 0 1
51992: PPUSH
51993: CALL_OW 321
51997: PUSH
51998: LD_INT 2
52000: EQUAL
52001: ST_TO_ADDR
52002: GO 52104
52004: LD_INT 17
52006: DOUBLE
52007: EQUAL
52008: IFTRUE 52012
52010: GO 52037
52012: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52013: LD_ADDR_VAR 0 3
52017: PUSH
52018: LD_INT 39
52020: PPUSH
52021: LD_VAR 0 1
52025: PPUSH
52026: CALL_OW 321
52030: PUSH
52031: LD_INT 2
52033: EQUAL
52034: ST_TO_ADDR
52035: GO 52104
52037: LD_INT 18
52039: DOUBLE
52040: EQUAL
52041: IFTRUE 52045
52043: GO 52070
52045: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52046: LD_ADDR_VAR 0 3
52050: PUSH
52051: LD_INT 40
52053: PPUSH
52054: LD_VAR 0 1
52058: PPUSH
52059: CALL_OW 321
52063: PUSH
52064: LD_INT 2
52066: EQUAL
52067: ST_TO_ADDR
52068: GO 52104
52070: LD_INT 27
52072: DOUBLE
52073: EQUAL
52074: IFTRUE 52078
52076: GO 52103
52078: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52079: LD_ADDR_VAR 0 3
52083: PUSH
52084: LD_INT 35
52086: PPUSH
52087: LD_VAR 0 1
52091: PPUSH
52092: CALL_OW 321
52096: PUSH
52097: LD_INT 2
52099: EQUAL
52100: ST_TO_ADDR
52101: GO 52104
52103: POP
// end ;
52104: LD_VAR 0 3
52108: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52109: LD_INT 0
52111: PPUSH
52112: PPUSH
52113: PPUSH
52114: PPUSH
52115: PPUSH
52116: PPUSH
52117: PPUSH
52118: PPUSH
52119: PPUSH
52120: PPUSH
52121: PPUSH
// result := false ;
52122: LD_ADDR_VAR 0 6
52126: PUSH
52127: LD_INT 0
52129: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52130: LD_VAR 0 1
52134: NOT
52135: PUSH
52136: LD_VAR 0 1
52140: PPUSH
52141: CALL_OW 266
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: IN
52156: NOT
52157: OR
52158: PUSH
52159: LD_VAR 0 2
52163: NOT
52164: OR
52165: PUSH
52166: LD_VAR 0 5
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 2
52179: PUSH
52180: LD_INT 3
52182: PUSH
52183: LD_INT 4
52185: PUSH
52186: LD_INT 5
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: IN
52197: NOT
52198: OR
52199: PUSH
52200: LD_VAR 0 3
52204: PPUSH
52205: LD_VAR 0 4
52209: PPUSH
52210: CALL_OW 488
52214: NOT
52215: OR
52216: IFFALSE 52220
// exit ;
52218: GO 52956
// side := GetSide ( depot ) ;
52220: LD_ADDR_VAR 0 9
52224: PUSH
52225: LD_VAR 0 1
52229: PPUSH
52230: CALL_OW 255
52234: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52235: LD_VAR 0 9
52239: PPUSH
52240: LD_VAR 0 2
52244: PPUSH
52245: CALL 51729 0 2
52249: NOT
52250: IFFALSE 52254
// exit ;
52252: GO 52956
// pom := GetBase ( depot ) ;
52254: LD_ADDR_VAR 0 10
52258: PUSH
52259: LD_VAR 0 1
52263: PPUSH
52264: CALL_OW 274
52268: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52269: LD_ADDR_VAR 0 11
52273: PUSH
52274: LD_VAR 0 2
52278: PPUSH
52279: LD_VAR 0 1
52283: PPUSH
52284: CALL_OW 248
52288: PPUSH
52289: CALL_OW 450
52293: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52294: LD_VAR 0 10
52298: PPUSH
52299: LD_INT 1
52301: PPUSH
52302: CALL_OW 275
52306: PUSH
52307: LD_VAR 0 11
52311: PUSH
52312: LD_INT 1
52314: ARRAY
52315: GREATEREQUAL
52316: PUSH
52317: LD_VAR 0 10
52321: PPUSH
52322: LD_INT 2
52324: PPUSH
52325: CALL_OW 275
52329: PUSH
52330: LD_VAR 0 11
52334: PUSH
52335: LD_INT 2
52337: ARRAY
52338: GREATEREQUAL
52339: AND
52340: PUSH
52341: LD_VAR 0 10
52345: PPUSH
52346: LD_INT 3
52348: PPUSH
52349: CALL_OW 275
52353: PUSH
52354: LD_VAR 0 11
52358: PUSH
52359: LD_INT 3
52361: ARRAY
52362: GREATEREQUAL
52363: AND
52364: NOT
52365: IFFALSE 52369
// exit ;
52367: GO 52956
// if GetBType ( depot ) = b_depot then
52369: LD_VAR 0 1
52373: PPUSH
52374: CALL_OW 266
52378: PUSH
52379: LD_INT 0
52381: EQUAL
52382: IFFALSE 52394
// dist := 28 else
52384: LD_ADDR_VAR 0 14
52388: PUSH
52389: LD_INT 28
52391: ST_TO_ADDR
52392: GO 52402
// dist := 36 ;
52394: LD_ADDR_VAR 0 14
52398: PUSH
52399: LD_INT 36
52401: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52402: LD_VAR 0 1
52406: PPUSH
52407: LD_VAR 0 3
52411: PPUSH
52412: LD_VAR 0 4
52416: PPUSH
52417: CALL_OW 297
52421: PUSH
52422: LD_VAR 0 14
52426: GREATER
52427: IFFALSE 52431
// exit ;
52429: GO 52956
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52431: LD_ADDR_VAR 0 12
52435: PUSH
52436: LD_VAR 0 2
52440: PPUSH
52441: LD_VAR 0 3
52445: PPUSH
52446: LD_VAR 0 4
52450: PPUSH
52451: LD_VAR 0 5
52455: PPUSH
52456: LD_VAR 0 1
52460: PPUSH
52461: CALL_OW 248
52465: PPUSH
52466: LD_INT 0
52468: PPUSH
52469: CALL 52961 0 6
52473: ST_TO_ADDR
// if not hexes then
52474: LD_VAR 0 12
52478: NOT
52479: IFFALSE 52483
// exit ;
52481: GO 52956
// hex := GetHexInfo ( x , y ) ;
52483: LD_ADDR_VAR 0 15
52487: PUSH
52488: LD_VAR 0 3
52492: PPUSH
52493: LD_VAR 0 4
52497: PPUSH
52498: CALL_OW 546
52502: ST_TO_ADDR
// if hex [ 1 ] then
52503: LD_VAR 0 15
52507: PUSH
52508: LD_INT 1
52510: ARRAY
52511: IFFALSE 52515
// exit ;
52513: GO 52956
// height := hex [ 2 ] ;
52515: LD_ADDR_VAR 0 13
52519: PUSH
52520: LD_VAR 0 15
52524: PUSH
52525: LD_INT 2
52527: ARRAY
52528: ST_TO_ADDR
// for i = 1 to hexes do
52529: LD_ADDR_VAR 0 7
52533: PUSH
52534: DOUBLE
52535: LD_INT 1
52537: DEC
52538: ST_TO_ADDR
52539: LD_VAR 0 12
52543: PUSH
52544: FOR_TO
52545: IFFALSE 52875
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52547: LD_VAR 0 12
52551: PUSH
52552: LD_VAR 0 7
52556: ARRAY
52557: PUSH
52558: LD_INT 1
52560: ARRAY
52561: PPUSH
52562: LD_VAR 0 12
52566: PUSH
52567: LD_VAR 0 7
52571: ARRAY
52572: PUSH
52573: LD_INT 2
52575: ARRAY
52576: PPUSH
52577: CALL_OW 488
52581: NOT
52582: PUSH
52583: LD_VAR 0 12
52587: PUSH
52588: LD_VAR 0 7
52592: ARRAY
52593: PUSH
52594: LD_INT 1
52596: ARRAY
52597: PPUSH
52598: LD_VAR 0 12
52602: PUSH
52603: LD_VAR 0 7
52607: ARRAY
52608: PUSH
52609: LD_INT 2
52611: ARRAY
52612: PPUSH
52613: CALL_OW 428
52617: PUSH
52618: LD_INT 0
52620: GREATER
52621: OR
52622: PUSH
52623: LD_VAR 0 12
52627: PUSH
52628: LD_VAR 0 7
52632: ARRAY
52633: PUSH
52634: LD_INT 1
52636: ARRAY
52637: PPUSH
52638: LD_VAR 0 12
52642: PUSH
52643: LD_VAR 0 7
52647: ARRAY
52648: PUSH
52649: LD_INT 2
52651: ARRAY
52652: PPUSH
52653: CALL_OW 351
52657: OR
52658: IFFALSE 52664
// exit ;
52660: POP
52661: POP
52662: GO 52956
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52664: LD_ADDR_VAR 0 8
52668: PUSH
52669: LD_VAR 0 12
52673: PUSH
52674: LD_VAR 0 7
52678: ARRAY
52679: PUSH
52680: LD_INT 1
52682: ARRAY
52683: PPUSH
52684: LD_VAR 0 12
52688: PUSH
52689: LD_VAR 0 7
52693: ARRAY
52694: PUSH
52695: LD_INT 2
52697: ARRAY
52698: PPUSH
52699: CALL_OW 546
52703: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52704: LD_VAR 0 8
52708: PUSH
52709: LD_INT 1
52711: ARRAY
52712: PUSH
52713: LD_VAR 0 8
52717: PUSH
52718: LD_INT 2
52720: ARRAY
52721: PUSH
52722: LD_VAR 0 13
52726: PUSH
52727: LD_INT 2
52729: PLUS
52730: GREATER
52731: OR
52732: PUSH
52733: LD_VAR 0 8
52737: PUSH
52738: LD_INT 2
52740: ARRAY
52741: PUSH
52742: LD_VAR 0 13
52746: PUSH
52747: LD_INT 2
52749: MINUS
52750: LESS
52751: OR
52752: PUSH
52753: LD_VAR 0 8
52757: PUSH
52758: LD_INT 3
52760: ARRAY
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 8
52767: PUSH
52768: LD_INT 9
52770: PUSH
52771: LD_INT 10
52773: PUSH
52774: LD_INT 11
52776: PUSH
52777: LD_INT 12
52779: PUSH
52780: LD_INT 13
52782: PUSH
52783: LD_INT 16
52785: PUSH
52786: LD_INT 17
52788: PUSH
52789: LD_INT 18
52791: PUSH
52792: LD_INT 19
52794: PUSH
52795: LD_INT 20
52797: PUSH
52798: LD_INT 21
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: IN
52816: NOT
52817: OR
52818: PUSH
52819: LD_VAR 0 8
52823: PUSH
52824: LD_INT 5
52826: ARRAY
52827: NOT
52828: OR
52829: PUSH
52830: LD_VAR 0 8
52834: PUSH
52835: LD_INT 6
52837: ARRAY
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: LD_INT 7
52847: PUSH
52848: LD_INT 9
52850: PUSH
52851: LD_INT 10
52853: PUSH
52854: LD_INT 11
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: IN
52865: NOT
52866: OR
52867: IFFALSE 52873
// exit ;
52869: POP
52870: POP
52871: GO 52956
// end ;
52873: GO 52544
52875: POP
52876: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52877: LD_VAR 0 9
52881: PPUSH
52882: LD_VAR 0 3
52886: PPUSH
52887: LD_VAR 0 4
52891: PPUSH
52892: LD_INT 20
52894: PPUSH
52895: CALL 44902 0 4
52899: PUSH
52900: LD_INT 4
52902: ARRAY
52903: IFFALSE 52907
// exit ;
52905: GO 52956
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52907: LD_VAR 0 2
52911: PUSH
52912: LD_INT 29
52914: PUSH
52915: LD_INT 30
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: IN
52922: PUSH
52923: LD_VAR 0 3
52927: PPUSH
52928: LD_VAR 0 4
52932: PPUSH
52933: LD_VAR 0 9
52937: PPUSH
52938: CALL_OW 440
52942: NOT
52943: AND
52944: IFFALSE 52948
// exit ;
52946: GO 52956
// result := true ;
52948: LD_ADDR_VAR 0 6
52952: PUSH
52953: LD_INT 1
52955: ST_TO_ADDR
// end ;
52956: LD_VAR 0 6
52960: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52961: LD_INT 0
52963: PPUSH
52964: PPUSH
52965: PPUSH
52966: PPUSH
52967: PPUSH
52968: PPUSH
52969: PPUSH
52970: PPUSH
52971: PPUSH
52972: PPUSH
52973: PPUSH
52974: PPUSH
52975: PPUSH
52976: PPUSH
52977: PPUSH
52978: PPUSH
52979: PPUSH
52980: PPUSH
52981: PPUSH
52982: PPUSH
52983: PPUSH
52984: PPUSH
52985: PPUSH
52986: PPUSH
52987: PPUSH
52988: PPUSH
52989: PPUSH
52990: PPUSH
52991: PPUSH
52992: PPUSH
52993: PPUSH
52994: PPUSH
52995: PPUSH
52996: PPUSH
52997: PPUSH
52998: PPUSH
52999: PPUSH
53000: PPUSH
53001: PPUSH
53002: PPUSH
53003: PPUSH
53004: PPUSH
53005: PPUSH
53006: PPUSH
53007: PPUSH
53008: PPUSH
53009: PPUSH
53010: PPUSH
53011: PPUSH
53012: PPUSH
53013: PPUSH
53014: PPUSH
53015: PPUSH
53016: PPUSH
53017: PPUSH
53018: PPUSH
53019: PPUSH
53020: PPUSH
// result = [ ] ;
53021: LD_ADDR_VAR 0 7
53025: PUSH
53026: EMPTY
53027: ST_TO_ADDR
// temp_list = [ ] ;
53028: LD_ADDR_VAR 0 9
53032: PUSH
53033: EMPTY
53034: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53035: LD_VAR 0 4
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: LD_INT 3
53051: PUSH
53052: LD_INT 4
53054: PUSH
53055: LD_INT 5
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: IN
53066: NOT
53067: PUSH
53068: LD_VAR 0 1
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: IN
53083: PUSH
53084: LD_VAR 0 5
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: LIST
53102: IN
53103: NOT
53104: AND
53105: OR
53106: IFFALSE 53110
// exit ;
53108: GO 71501
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53110: LD_VAR 0 1
53114: PUSH
53115: LD_INT 6
53117: PUSH
53118: LD_INT 7
53120: PUSH
53121: LD_INT 8
53123: PUSH
53124: LD_INT 13
53126: PUSH
53127: LD_INT 12
53129: PUSH
53130: LD_INT 15
53132: PUSH
53133: LD_INT 11
53135: PUSH
53136: LD_INT 14
53138: PUSH
53139: LD_INT 10
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: IN
53153: IFFALSE 53163
// btype = b_lab ;
53155: LD_ADDR_VAR 0 1
53159: PUSH
53160: LD_INT 6
53162: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53163: LD_VAR 0 6
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: LIST
53181: IN
53182: NOT
53183: PUSH
53184: LD_VAR 0 1
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 3
53200: PUSH
53201: LD_INT 6
53203: PUSH
53204: LD_INT 36
53206: PUSH
53207: LD_INT 4
53209: PUSH
53210: LD_INT 5
53212: PUSH
53213: LD_INT 31
53215: PUSH
53216: LD_INT 32
53218: PUSH
53219: LD_INT 33
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: IN
53235: NOT
53236: PUSH
53237: LD_VAR 0 6
53241: PUSH
53242: LD_INT 1
53244: EQUAL
53245: AND
53246: OR
53247: PUSH
53248: LD_VAR 0 1
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: LD_INT 3
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: IN
53263: NOT
53264: PUSH
53265: LD_VAR 0 6
53269: PUSH
53270: LD_INT 2
53272: EQUAL
53273: AND
53274: OR
53275: IFFALSE 53285
// mode = 0 ;
53277: LD_ADDR_VAR 0 6
53281: PUSH
53282: LD_INT 0
53284: ST_TO_ADDR
// case mode of 0 :
53285: LD_VAR 0 6
53289: PUSH
53290: LD_INT 0
53292: DOUBLE
53293: EQUAL
53294: IFTRUE 53298
53296: GO 64751
53298: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53299: LD_ADDR_VAR 0 11
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53492: LD_ADDR_VAR 0 12
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 3
53649: NEG
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 3
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53688: LD_ADDR_VAR 0 13
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 1
53757: NEG
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 2
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 2
53823: NEG
53824: PUSH
53825: LD_INT 2
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 3
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 3
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 3
53859: NEG
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53887: LD_ADDR_VAR 0 14
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: LD_INT 3
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 3
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 2
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54083: LD_ADDR_VAR 0 15
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 3
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 3
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54276: LD_ADDR_VAR 0 16
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 3
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 3
54433: PUSH
54434: LD_INT 3
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54469: LD_ADDR_VAR 0 17
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 1
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 2
54668: NEG
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54699: LD_ADDR_VAR 0 18
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: LD_INT 2
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 2
54898: NEG
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54929: LD_ADDR_VAR 0 19
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: LD_INT 2
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55159: LD_ADDR_VAR 0 20
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: LD_INT 2
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: LD_INT 2
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 2
55358: NEG
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55389: LD_ADDR_VAR 0 21
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 2
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55619: LD_ADDR_VAR 0 22
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55849: LD_ADDR_VAR 0 23
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 2
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 2
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 2
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: LD_INT 3
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 3
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56129: LD_ADDR_VAR 0 24
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 1
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: NEG
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: LD_INT 2
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 3
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 3
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56405: LD_ADDR_VAR 0 25
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: LD_INT 2
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: LD_INT 2
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 2
56581: NEG
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: NEG
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: LD_INT 2
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 2
56636: PUSH
56637: LD_INT 3
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: LD_INT 3
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56679: LD_ADDR_VAR 0 26
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: LD_INT 2
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: LD_INT 2
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: LD_INT 0
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: NEG
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: LD_INT 3
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56955: LD_ADDR_VAR 0 27
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: LD_INT 2
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: LD_INT 2
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: NEG
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 2
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 3
57188: NEG
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 3
57200: NEG
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57235: LD_ADDR_VAR 0 28
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: LD_INT 2
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: LD_INT 2
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: LD_INT 3
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 3
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 3
57482: NEG
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57517: LD_ADDR_VAR 0 29
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 1
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: LD_INT 2
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 2
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: LD_INT 2
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 2
57695: NEG
57696: PUSH
57697: LD_INT 2
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: LD_INT 3
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 3
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: NEG
57762: PUSH
57763: LD_INT 2
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57796: LD_ADDR_VAR 0 30
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: LD_INT 2
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: LD_INT 2
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 2
57962: NEG
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 2
57973: NEG
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: LD_INT 3
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 3
58008: PUSH
58009: LD_INT 2
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: LD_INT 3
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: NEG
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 3
58039: NEG
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58074: LD_ADDR_VAR 0 31
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 1
58143: NEG
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 2
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: LD_INT 2
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: LD_INT 2
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 2
58239: NEG
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 2
58251: NEG
58252: PUSH
58253: LD_INT 2
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: LD_INT 3
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 2
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 3
58317: NEG
58318: PUSH
58319: LD_INT 2
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58352: LD_ADDR_VAR 0 32
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 2
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: LD_INT 2
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 2
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 2
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 2
58518: NEG
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: LD_INT 3
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 3
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 2
58584: NEG
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 3
58595: NEG
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58630: LD_ADDR_VAR 0 33
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: LD_INT 2
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: LD_INT 2
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: NEG
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: LD_INT 3
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 2
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: LD_INT 2
58878: NEG
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58909: LD_ADDR_VAR 0 34
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: NEG
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 1
58978: NEG
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: LD_INT 2
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: LD_INT 2
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: LD_INT 2
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: NEG
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: NEG
59101: PUSH
59102: LD_INT 3
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 3
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 2
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 3
59154: NEG
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59189: LD_ADDR_VAR 0 35
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 2
59280: NEG
59281: PUSH
59282: LD_INT 1
59284: NEG
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59301: LD_ADDR_VAR 0 36
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: LD_INT 2
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59413: LD_ADDR_VAR 0 37
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59525: LD_ADDR_VAR 0 38
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 2
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 2
59616: NEG
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59637: LD_ADDR_VAR 0 39
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59749: LD_ADDR_VAR 0 40
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59861: LD_ADDR_VAR 0 41
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: LD_INT 1
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: NEG
59943: PUSH
59944: LD_INT 2
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 2
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 2
60039: NEG
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: LD_INT 3
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 3
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 3
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 3
60094: PUSH
60095: LD_INT 2
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 3
60104: PUSH
60105: LD_INT 3
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: LD_INT 3
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 3
60135: NEG
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 3
60146: NEG
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 3
60158: NEG
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 3
60170: NEG
60171: PUSH
60172: LD_INT 3
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60211: LD_ADDR_VAR 0 42
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 2
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: LD_INT 2
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 2
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 2
60377: NEG
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 2
60389: NEG
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: LD_INT 3
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: NEG
60414: PUSH
60415: LD_INT 3
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 0
60425: PUSH
60426: LD_INT 3
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: LD_INT 2
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 3
60447: PUSH
60448: LD_INT 2
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 3
60457: PUSH
60458: LD_INT 3
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 2
60467: PUSH
60468: LD_INT 3
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: LD_INT 3
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: LD_INT 2
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 3
60508: NEG
60509: PUSH
60510: LD_INT 2
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 3
60520: NEG
60521: PUSH
60522: LD_INT 3
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60561: LD_ADDR_VAR 0 43
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: LD_INT 2
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 2
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: LD_INT 2
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 2
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 2
60727: NEG
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: LD_INT 3
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 3
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 3
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 3
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: LD_INT 3
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 3
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: LD_INT 2
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 3
60857: NEG
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 3
60868: NEG
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60909: LD_ADDR_VAR 0 44
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 1
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: NEG
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 2
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 2
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 2
61075: NEG
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 2
61087: NEG
61088: PUSH
61089: LD_INT 2
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: NEG
61100: PUSH
61101: LD_INT 3
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 3
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 3
61132: PUSH
61133: LD_INT 1
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 3
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 3
61152: PUSH
61153: LD_INT 3
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 2
61162: PUSH
61163: LD_INT 3
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 3
61183: NEG
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 3
61194: NEG
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 3
61206: NEG
61207: PUSH
61208: LD_INT 2
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 3
61218: NEG
61219: PUSH
61220: LD_INT 3
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61259: LD_ADDR_VAR 0 45
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: LD_INT 0
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 1
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: LD_INT 2
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 2
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 2
61384: PUSH
61385: LD_INT 2
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: LD_INT 2
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: LD_INT 2
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 2
61437: NEG
61438: PUSH
61439: LD_INT 2
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: LD_INT 3
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: LD_INT 3
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: LD_INT 3
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 1
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 3
61495: PUSH
61496: LD_INT 2
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 3
61505: PUSH
61506: LD_INT 3
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 2
61515: PUSH
61516: LD_INT 3
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: LD_INT 3
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: LD_INT 3
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: LD_INT 2
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 3
61556: NEG
61557: PUSH
61558: LD_INT 2
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 3
61568: NEG
61569: PUSH
61570: LD_INT 3
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61609: LD_ADDR_VAR 0 46
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: NEG
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 1
61690: NEG
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: LD_INT 2
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 2
61734: PUSH
61735: LD_INT 1
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: NEG
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 2
61786: NEG
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: NEG
61799: PUSH
61800: LD_INT 3
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 3
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: LD_INT 2
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 2
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 3
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 3
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: LD_INT 3
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: LD_INT 3
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: LD_INT 2
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 2
61894: NEG
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 3
61905: NEG
61906: PUSH
61907: LD_INT 0
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 3
61916: NEG
61917: PUSH
61918: LD_INT 1
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61957: LD_ADDR_VAR 0 47
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 1
62015: NEG
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: NEG
62039: PUSH
62040: LD_INT 2
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: LD_INT 2
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 2
62072: NEG
62073: PUSH
62074: LD_INT 1
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 2
62084: NEG
62085: PUSH
62086: LD_INT 2
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62108: LD_ADDR_VAR 0 48
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: LD_INT 2
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 0
62201: PUSH
62202: LD_INT 2
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 2
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 2
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62255: LD_ADDR_VAR 0 49
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: LD_INT 0
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 2
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 2
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: LD_INT 2
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62399: LD_ADDR_VAR 0 50
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: NEG
62469: PUSH
62470: LD_INT 1
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 2
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: LD_INT 2
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: LD_INT 2
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: LD_INT 2
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 1
62520: NEG
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62543: LD_ADDR_VAR 0 51
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 1
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: LD_INT 1
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: LD_INT 1
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 1
62601: NEG
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 1
62612: NEG
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: LD_INT 2
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 2
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: LD_INT 1
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 2
62655: NEG
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 2
62666: NEG
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62690: LD_ADDR_VAR 0 52
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 0
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 0
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 1
62759: NEG
62760: PUSH
62761: LD_INT 1
62763: NEG
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 1
62771: NEG
62772: PUSH
62773: LD_INT 2
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 1
62783: NEG
62784: PUSH
62785: LD_INT 1
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 2
62794: NEG
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 2
62805: NEG
62806: PUSH
62807: LD_INT 1
62809: NEG
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 2
62817: NEG
62818: PUSH
62819: LD_INT 2
62821: NEG
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62841: LD_ADDR_VAR 0 53
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 1
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: LD_INT 1
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 1
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 1
62910: NEG
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: LD_INT 2
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: LD_INT 2
62937: NEG
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 1
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 2
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 2
62976: PUSH
62977: LD_INT 2
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: LD_INT 2
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: LD_INT 2
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: LD_INT 1
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 2
63017: NEG
63018: PUSH
63019: LD_INT 0
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 2
63028: NEG
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 2
63040: NEG
63041: PUSH
63042: LD_INT 2
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63071: LD_ADDR_VAR 0 54
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 0
63088: PUSH
63089: LD_INT 1
63091: NEG
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: LD_INT 1
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: LD_INT 0
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 1
63152: NEG
63153: PUSH
63154: LD_INT 2
63156: NEG
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: LD_INT 2
63167: NEG
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 1
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 2
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: LD_INT 1
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 2
63206: PUSH
63207: LD_INT 2
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: LD_INT 2
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: LD_INT 2
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 2
63247: NEG
63248: PUSH
63249: LD_INT 0
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: LD_INT 1
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 2
63270: NEG
63271: PUSH
63272: LD_INT 2
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63301: LD_ADDR_VAR 0 55
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: LD_INT 0
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: LD_INT 1
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: LD_INT 1
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 0
63349: PUSH
63350: LD_INT 1
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: LD_INT 1
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 1
63382: NEG
63383: PUSH
63384: LD_INT 2
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: LD_INT 2
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 2
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: LD_INT 2
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 1
63446: PUSH
63447: LD_INT 2
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: LD_INT 2
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 2
63477: NEG
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 2
63488: NEG
63489: PUSH
63490: LD_INT 1
63492: NEG
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 2
63500: NEG
63501: PUSH
63502: LD_INT 2
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63531: LD_ADDR_VAR 0 56
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: LD_INT 1
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: LD_INT 0
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: LD_INT 1
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 1
63612: NEG
63613: PUSH
63614: LD_INT 2
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 0
63624: PUSH
63625: LD_INT 2
63627: NEG
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 1
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 2
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 2
63656: PUSH
63657: LD_INT 1
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 2
63666: PUSH
63667: LD_INT 2
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: LD_INT 2
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: LD_INT 2
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 1
63696: NEG
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 2
63707: NEG
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 2
63718: NEG
63719: PUSH
63720: LD_INT 1
63722: NEG
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 2
63730: NEG
63731: PUSH
63732: LD_INT 2
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63761: LD_ADDR_VAR 0 57
63765: PUSH
63766: LD_INT 0
63768: PUSH
63769: LD_INT 0
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 0
63778: PUSH
63779: LD_INT 1
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: PUSH
63832: LD_INT 1
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: LD_INT 2
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: LD_INT 2
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 1
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 2
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 2
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 2
63896: PUSH
63897: LD_INT 2
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: LD_INT 2
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: LD_INT 2
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: NEG
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 2
63937: NEG
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 2
63948: NEG
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 2
63960: NEG
63961: PUSH
63962: LD_INT 2
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63991: LD_ADDR_VAR 0 58
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: LD_INT 0
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: LD_INT 1
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 1
64029: PUSH
64030: LD_INT 1
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: LD_INT 1
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 1
64060: NEG
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: NEG
64073: PUSH
64074: LD_INT 2
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: LD_INT 2
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 2
64106: PUSH
64107: LD_INT 0
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 2
64116: PUSH
64117: LD_INT 1
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 2
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 1
64136: PUSH
64137: LD_INT 2
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 0
64146: PUSH
64147: LD_INT 2
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 1
64156: NEG
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 2
64167: NEG
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 2
64178: NEG
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 2
64190: NEG
64191: PUSH
64192: LD_INT 2
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64221: LD_ADDR_VAR 0 59
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: NEG
64291: PUSH
64292: LD_INT 1
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64309: LD_ADDR_VAR 0 60
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: LD_INT 0
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: LD_INT 1
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 1
64347: PUSH
64348: LD_INT 1
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 0
64357: PUSH
64358: LD_INT 1
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 1
64367: NEG
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 1
64378: NEG
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64397: LD_ADDR_VAR 0 61
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: LD_INT 1
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: LD_INT 0
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: LD_INT 1
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: LD_INT 1
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: NEG
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 1
64466: NEG
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64485: LD_ADDR_VAR 0 62
64489: PUSH
64490: LD_INT 0
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 1
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 1
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: LD_INT 1
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 0
64533: PUSH
64534: LD_INT 1
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 1
64543: NEG
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: NEG
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64573: LD_ADDR_VAR 0 63
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: LD_INT 1
64593: NEG
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: NEG
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64661: LD_ADDR_VAR 0 64
64665: PUSH
64666: LD_INT 0
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: LD_INT 1
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 0
64709: PUSH
64710: LD_INT 1
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 1
64719: NEG
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 1
64730: NEG
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: ST_TO_ADDR
// end ; 1 :
64749: GO 70646
64751: LD_INT 1
64753: DOUBLE
64754: EQUAL
64755: IFTRUE 64759
64757: GO 67382
64759: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64760: LD_ADDR_VAR 0 11
64764: PUSH
64765: LD_INT 1
64767: NEG
64768: PUSH
64769: LD_INT 3
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: LD_INT 3
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: LD_INT 2
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: LIST
64803: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64804: LD_ADDR_VAR 0 12
64808: PUSH
64809: LD_INT 2
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 3
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 3
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: LIST
64844: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64845: LD_ADDR_VAR 0 13
64849: PUSH
64850: LD_INT 3
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 3
64862: PUSH
64863: LD_INT 3
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 2
64872: PUSH
64873: LD_INT 3
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64885: LD_ADDR_VAR 0 14
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: LD_INT 3
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: LD_INT 3
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 1
64912: NEG
64913: PUSH
64914: LD_INT 2
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: LIST
64925: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64926: LD_ADDR_VAR 0 15
64930: PUSH
64931: LD_INT 2
64933: NEG
64934: PUSH
64935: LD_INT 1
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 3
64944: NEG
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 3
64955: NEG
64956: PUSH
64957: LD_INT 1
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: LIST
64969: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64970: LD_ADDR_VAR 0 16
64974: PUSH
64975: LD_INT 2
64977: NEG
64978: PUSH
64979: LD_INT 3
64981: NEG
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 3
64989: NEG
64990: PUSH
64991: LD_INT 2
64993: NEG
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 3
65001: NEG
65002: PUSH
65003: LD_INT 3
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: LIST
65015: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65016: LD_ADDR_VAR 0 17
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: LD_INT 3
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: LD_INT 3
65038: NEG
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 1
65046: PUSH
65047: LD_INT 2
65049: NEG
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: LIST
65059: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65060: LD_ADDR_VAR 0 18
65064: PUSH
65065: LD_INT 2
65067: PUSH
65068: LD_INT 1
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 3
65078: PUSH
65079: LD_INT 0
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 3
65088: PUSH
65089: LD_INT 1
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: LIST
65100: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65101: LD_ADDR_VAR 0 19
65105: PUSH
65106: LD_INT 3
65108: PUSH
65109: LD_INT 2
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 3
65118: PUSH
65119: LD_INT 3
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 2
65128: PUSH
65129: LD_INT 3
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65141: LD_ADDR_VAR 0 20
65145: PUSH
65146: LD_INT 1
65148: PUSH
65149: LD_INT 3
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: LD_INT 3
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: LD_INT 2
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: LIST
65181: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65182: LD_ADDR_VAR 0 21
65186: PUSH
65187: LD_INT 2
65189: NEG
65190: PUSH
65191: LD_INT 1
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 3
65200: NEG
65201: PUSH
65202: LD_INT 0
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 3
65211: NEG
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: LIST
65225: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65226: LD_ADDR_VAR 0 22
65230: PUSH
65231: LD_INT 2
65233: NEG
65234: PUSH
65235: LD_INT 3
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 3
65245: NEG
65246: PUSH
65247: LD_INT 2
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 3
65257: NEG
65258: PUSH
65259: LD_INT 3
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: LIST
65271: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65272: LD_ADDR_VAR 0 23
65276: PUSH
65277: LD_INT 0
65279: PUSH
65280: LD_INT 3
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 1
65290: NEG
65291: PUSH
65292: LD_INT 4
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 1
65302: PUSH
65303: LD_INT 3
65305: NEG
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: LIST
65315: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65316: LD_ADDR_VAR 0 24
65320: PUSH
65321: LD_INT 3
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: LD_INT 1
65336: NEG
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 4
65344: PUSH
65345: LD_INT 1
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: LIST
65356: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65357: LD_ADDR_VAR 0 25
65361: PUSH
65362: LD_INT 3
65364: PUSH
65365: LD_INT 3
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 4
65374: PUSH
65375: LD_INT 3
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 3
65384: PUSH
65385: LD_INT 4
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: LIST
65396: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65397: LD_ADDR_VAR 0 26
65401: PUSH
65402: LD_INT 0
65404: PUSH
65405: LD_INT 3
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 1
65414: PUSH
65415: LD_INT 4
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 1
65424: NEG
65425: PUSH
65426: LD_INT 3
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: LIST
65437: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65438: LD_ADDR_VAR 0 27
65442: PUSH
65443: LD_INT 3
65445: NEG
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 3
65456: NEG
65457: PUSH
65458: LD_INT 1
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 4
65467: NEG
65468: PUSH
65469: LD_INT 1
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: LIST
65481: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65482: LD_ADDR_VAR 0 28
65486: PUSH
65487: LD_INT 3
65489: NEG
65490: PUSH
65491: LD_INT 3
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 3
65501: NEG
65502: PUSH
65503: LD_INT 4
65505: NEG
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 4
65513: NEG
65514: PUSH
65515: LD_INT 3
65517: NEG
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: LIST
65527: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65528: LD_ADDR_VAR 0 29
65532: PUSH
65533: LD_INT 1
65535: NEG
65536: PUSH
65537: LD_INT 3
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 0
65547: PUSH
65548: LD_INT 3
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 1
65558: PUSH
65559: LD_INT 2
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: LD_INT 4
65573: NEG
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 0
65581: PUSH
65582: LD_INT 4
65584: NEG
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 1
65592: PUSH
65593: LD_INT 3
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: NEG
65604: PUSH
65605: LD_INT 5
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 0
65615: PUSH
65616: LD_INT 5
65618: NEG
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: LD_INT 4
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: LD_INT 6
65641: NEG
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 0
65649: PUSH
65650: LD_INT 6
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 1
65660: PUSH
65661: LD_INT 5
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65683: LD_ADDR_VAR 0 30
65687: PUSH
65688: LD_INT 2
65690: PUSH
65691: LD_INT 1
65693: NEG
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 3
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 3
65711: PUSH
65712: LD_INT 1
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 3
65721: PUSH
65722: LD_INT 1
65724: NEG
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 4
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 4
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 4
65752: PUSH
65753: LD_INT 1
65755: NEG
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 5
65763: PUSH
65764: LD_INT 0
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 5
65773: PUSH
65774: LD_INT 1
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 5
65783: PUSH
65784: LD_INT 1
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 6
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 6
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65826: LD_ADDR_VAR 0 31
65830: PUSH
65831: LD_INT 3
65833: PUSH
65834: LD_INT 2
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 3
65843: PUSH
65844: LD_INT 3
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 2
65853: PUSH
65854: LD_INT 3
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 4
65863: PUSH
65864: LD_INT 3
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 4
65873: PUSH
65874: LD_INT 4
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 3
65883: PUSH
65884: LD_INT 4
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 5
65893: PUSH
65894: LD_INT 4
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 5
65903: PUSH
65904: LD_INT 5
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 4
65913: PUSH
65914: LD_INT 5
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 6
65923: PUSH
65924: LD_INT 5
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 6
65933: PUSH
65934: LD_INT 6
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 5
65943: PUSH
65944: LD_INT 6
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65965: LD_ADDR_VAR 0 32
65969: PUSH
65970: LD_INT 1
65972: PUSH
65973: LD_INT 3
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: LD_INT 3
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 1
65992: NEG
65993: PUSH
65994: LD_INT 2
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 1
66003: PUSH
66004: LD_INT 4
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: LD_INT 4
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 1
66023: NEG
66024: PUSH
66025: LD_INT 3
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: LD_INT 5
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 0
66044: PUSH
66045: LD_INT 5
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 1
66054: NEG
66055: PUSH
66056: LD_INT 4
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 1
66065: PUSH
66066: LD_INT 6
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 0
66075: PUSH
66076: LD_INT 6
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 1
66085: NEG
66086: PUSH
66087: LD_INT 5
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66108: LD_ADDR_VAR 0 33
66112: PUSH
66113: LD_INT 2
66115: NEG
66116: PUSH
66117: LD_INT 1
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 3
66126: NEG
66127: PUSH
66128: LD_INT 0
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 3
66137: NEG
66138: PUSH
66139: LD_INT 1
66141: NEG
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 3
66149: NEG
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 4
66160: NEG
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 4
66171: NEG
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 4
66183: NEG
66184: PUSH
66185: LD_INT 1
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 5
66194: NEG
66195: PUSH
66196: LD_INT 0
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 5
66205: NEG
66206: PUSH
66207: LD_INT 1
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 5
66217: NEG
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 6
66228: NEG
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 6
66239: NEG
66240: PUSH
66241: LD_INT 1
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66263: LD_ADDR_VAR 0 34
66267: PUSH
66268: LD_INT 2
66270: NEG
66271: PUSH
66272: LD_INT 3
66274: NEG
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 3
66282: NEG
66283: PUSH
66284: LD_INT 2
66286: NEG
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 3
66294: NEG
66295: PUSH
66296: LD_INT 3
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 3
66306: NEG
66307: PUSH
66308: LD_INT 4
66310: NEG
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 4
66318: NEG
66319: PUSH
66320: LD_INT 3
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 4
66330: NEG
66331: PUSH
66332: LD_INT 4
66334: NEG
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 4
66342: NEG
66343: PUSH
66344: LD_INT 5
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 5
66354: NEG
66355: PUSH
66356: LD_INT 4
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 5
66366: NEG
66367: PUSH
66368: LD_INT 5
66370: NEG
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 5
66378: NEG
66379: PUSH
66380: LD_INT 6
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 6
66390: NEG
66391: PUSH
66392: LD_INT 5
66394: NEG
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 6
66402: NEG
66403: PUSH
66404: LD_INT 6
66406: NEG
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66426: LD_ADDR_VAR 0 41
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: LD_INT 2
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: LD_INT 3
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 1
66456: PUSH
66457: LD_INT 2
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: LIST
66469: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66470: LD_ADDR_VAR 0 42
66474: PUSH
66475: LD_INT 2
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 2
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 3
66498: PUSH
66499: LD_INT 1
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: LIST
66510: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66511: LD_ADDR_VAR 0 43
66515: PUSH
66516: LD_INT 2
66518: PUSH
66519: LD_INT 2
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 3
66528: PUSH
66529: LD_INT 2
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 2
66538: PUSH
66539: LD_INT 3
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: LIST
66550: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66551: LD_ADDR_VAR 0 44
66555: PUSH
66556: LD_INT 0
66558: PUSH
66559: LD_INT 2
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 1
66568: PUSH
66569: LD_INT 3
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 1
66578: NEG
66579: PUSH
66580: LD_INT 2
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: LIST
66591: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66592: LD_ADDR_VAR 0 45
66596: PUSH
66597: LD_INT 2
66599: NEG
66600: PUSH
66601: LD_INT 0
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 2
66610: NEG
66611: PUSH
66612: LD_INT 1
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 3
66621: NEG
66622: PUSH
66623: LD_INT 1
66625: NEG
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: LIST
66635: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66636: LD_ADDR_VAR 0 46
66640: PUSH
66641: LD_INT 2
66643: NEG
66644: PUSH
66645: LD_INT 2
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 2
66655: NEG
66656: PUSH
66657: LD_INT 3
66659: NEG
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 3
66667: NEG
66668: PUSH
66669: LD_INT 2
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: LIST
66681: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66682: LD_ADDR_VAR 0 47
66686: PUSH
66687: LD_INT 2
66689: NEG
66690: PUSH
66691: LD_INT 3
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: LD_INT 3
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66715: LD_ADDR_VAR 0 48
66719: PUSH
66720: LD_INT 1
66722: PUSH
66723: LD_INT 2
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 2
66733: PUSH
66734: LD_INT 1
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66746: LD_ADDR_VAR 0 49
66750: PUSH
66751: LD_INT 3
66753: PUSH
66754: LD_INT 1
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 3
66763: PUSH
66764: LD_INT 2
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66775: LD_ADDR_VAR 0 50
66779: PUSH
66780: LD_INT 2
66782: PUSH
66783: LD_INT 3
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 1
66792: PUSH
66793: LD_INT 3
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66804: LD_ADDR_VAR 0 51
66808: PUSH
66809: LD_INT 1
66811: NEG
66812: PUSH
66813: LD_INT 2
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 2
66822: NEG
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66835: LD_ADDR_VAR 0 52
66839: PUSH
66840: LD_INT 3
66842: NEG
66843: PUSH
66844: LD_INT 1
66846: NEG
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 3
66854: NEG
66855: PUSH
66856: LD_INT 2
66858: NEG
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66868: LD_ADDR_VAR 0 53
66872: PUSH
66873: LD_INT 1
66875: NEG
66876: PUSH
66877: LD_INT 3
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 0
66887: PUSH
66888: LD_INT 3
66890: NEG
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 1
66898: PUSH
66899: LD_INT 2
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: LIST
66911: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66912: LD_ADDR_VAR 0 54
66916: PUSH
66917: LD_INT 2
66919: PUSH
66920: LD_INT 1
66922: NEG
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 3
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 3
66940: PUSH
66941: LD_INT 1
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: LIST
66952: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66953: LD_ADDR_VAR 0 55
66957: PUSH
66958: LD_INT 3
66960: PUSH
66961: LD_INT 2
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 3
66970: PUSH
66971: LD_INT 3
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 2
66980: PUSH
66981: LD_INT 3
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: LIST
66992: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66993: LD_ADDR_VAR 0 56
66997: PUSH
66998: LD_INT 1
67000: PUSH
67001: LD_INT 3
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: LD_INT 3
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 1
67020: NEG
67021: PUSH
67022: LD_INT 2
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: LIST
67033: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67034: LD_ADDR_VAR 0 57
67038: PUSH
67039: LD_INT 2
67041: NEG
67042: PUSH
67043: LD_INT 1
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 3
67052: NEG
67053: PUSH
67054: LD_INT 0
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 3
67063: NEG
67064: PUSH
67065: LD_INT 1
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: LIST
67077: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67078: LD_ADDR_VAR 0 58
67082: PUSH
67083: LD_INT 2
67085: NEG
67086: PUSH
67087: LD_INT 3
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 3
67097: NEG
67098: PUSH
67099: LD_INT 2
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 3
67109: NEG
67110: PUSH
67111: LD_INT 3
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: LIST
67123: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67124: LD_ADDR_VAR 0 59
67128: PUSH
67129: LD_INT 1
67131: NEG
67132: PUSH
67133: LD_INT 2
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 0
67143: PUSH
67144: LD_INT 2
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 1
67154: PUSH
67155: LD_INT 1
67157: NEG
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: LIST
67167: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67168: LD_ADDR_VAR 0 60
67172: PUSH
67173: LD_INT 1
67175: PUSH
67176: LD_INT 1
67178: NEG
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 2
67186: PUSH
67187: LD_INT 0
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 2
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: LIST
67208: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67209: LD_ADDR_VAR 0 61
67213: PUSH
67214: LD_INT 2
67216: PUSH
67217: LD_INT 1
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 2
67226: PUSH
67227: LD_INT 2
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 1
67236: PUSH
67237: LD_INT 2
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: LIST
67248: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67249: LD_ADDR_VAR 0 62
67253: PUSH
67254: LD_INT 1
67256: PUSH
67257: LD_INT 2
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 0
67266: PUSH
67267: LD_INT 2
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 1
67276: NEG
67277: PUSH
67278: LD_INT 1
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: LIST
67289: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67290: LD_ADDR_VAR 0 63
67294: PUSH
67295: LD_INT 1
67297: NEG
67298: PUSH
67299: LD_INT 1
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 2
67308: NEG
67309: PUSH
67310: LD_INT 0
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 2
67319: NEG
67320: PUSH
67321: LD_INT 1
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: LIST
67333: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67334: LD_ADDR_VAR 0 64
67338: PUSH
67339: LD_INT 1
67341: NEG
67342: PUSH
67343: LD_INT 2
67345: NEG
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 2
67353: NEG
67354: PUSH
67355: LD_INT 1
67357: NEG
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 2
67365: NEG
67366: PUSH
67367: LD_INT 2
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: LIST
67379: ST_TO_ADDR
// end ; 2 :
67380: GO 70646
67382: LD_INT 2
67384: DOUBLE
67385: EQUAL
67386: IFTRUE 67390
67388: GO 70645
67390: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67391: LD_ADDR_VAR 0 29
67395: PUSH
67396: LD_INT 4
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 4
67408: PUSH
67409: LD_INT 1
67411: NEG
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 5
67419: PUSH
67420: LD_INT 0
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 5
67429: PUSH
67430: LD_INT 1
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 4
67439: PUSH
67440: LD_INT 1
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 3
67449: PUSH
67450: LD_INT 0
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 3
67459: PUSH
67460: LD_INT 1
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 3
67470: PUSH
67471: LD_INT 2
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 5
67481: PUSH
67482: LD_INT 2
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 3
67491: PUSH
67492: LD_INT 3
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 3
67501: PUSH
67502: LD_INT 2
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 4
67511: PUSH
67512: LD_INT 3
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 4
67521: PUSH
67522: LD_INT 4
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 3
67531: PUSH
67532: LD_INT 4
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 2
67541: PUSH
67542: LD_INT 3
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 2
67551: PUSH
67552: LD_INT 2
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 4
67561: PUSH
67562: LD_INT 2
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 2
67571: PUSH
67572: LD_INT 4
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 0
67581: PUSH
67582: LD_INT 4
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: LD_INT 3
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 1
67601: PUSH
67602: LD_INT 4
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 1
67611: PUSH
67612: LD_INT 5
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: LD_INT 5
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 1
67631: NEG
67632: PUSH
67633: LD_INT 4
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 1
67642: NEG
67643: PUSH
67644: LD_INT 3
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: PUSH
67651: LD_INT 2
67653: PUSH
67654: LD_INT 5
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: PUSH
67661: LD_INT 2
67663: NEG
67664: PUSH
67665: LD_INT 3
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 3
67674: NEG
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 3
67685: NEG
67686: PUSH
67687: LD_INT 1
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 2
67697: NEG
67698: PUSH
67699: LD_INT 0
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 2
67708: NEG
67709: PUSH
67710: LD_INT 1
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 3
67719: NEG
67720: PUSH
67721: LD_INT 1
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 4
67730: NEG
67731: PUSH
67732: LD_INT 0
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 4
67741: NEG
67742: PUSH
67743: LD_INT 1
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 4
67753: NEG
67754: PUSH
67755: LD_INT 2
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 2
67765: NEG
67766: PUSH
67767: LD_INT 2
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 4
67776: NEG
67777: PUSH
67778: LD_INT 4
67780: NEG
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 4
67788: NEG
67789: PUSH
67790: LD_INT 5
67792: NEG
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 3
67800: NEG
67801: PUSH
67802: LD_INT 4
67804: NEG
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 3
67812: NEG
67813: PUSH
67814: LD_INT 3
67816: NEG
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 4
67824: NEG
67825: PUSH
67826: LD_INT 3
67828: NEG
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 5
67836: NEG
67837: PUSH
67838: LD_INT 4
67840: NEG
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 5
67848: NEG
67849: PUSH
67850: LD_INT 5
67852: NEG
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 3
67860: NEG
67861: PUSH
67862: LD_INT 5
67864: NEG
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 5
67872: NEG
67873: PUSH
67874: LD_INT 3
67876: NEG
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67929: LD_ADDR_VAR 0 30
67933: PUSH
67934: LD_INT 4
67936: PUSH
67937: LD_INT 4
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 4
67946: PUSH
67947: LD_INT 3
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 5
67956: PUSH
67957: LD_INT 4
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 5
67966: PUSH
67967: LD_INT 5
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 4
67976: PUSH
67977: LD_INT 5
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 3
67986: PUSH
67987: LD_INT 4
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 3
67996: PUSH
67997: LD_INT 3
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 5
68006: PUSH
68007: LD_INT 3
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 3
68016: PUSH
68017: LD_INT 5
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 0
68026: PUSH
68027: LD_INT 3
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 0
68036: PUSH
68037: LD_INT 2
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 1
68046: PUSH
68047: LD_INT 3
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 1
68056: PUSH
68057: LD_INT 4
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 0
68066: PUSH
68067: LD_INT 4
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 1
68076: NEG
68077: PUSH
68078: LD_INT 3
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 1
68087: NEG
68088: PUSH
68089: LD_INT 2
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 2
68098: PUSH
68099: LD_INT 4
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 2
68108: NEG
68109: PUSH
68110: LD_INT 2
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 4
68119: NEG
68120: PUSH
68121: LD_INT 0
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 4
68130: NEG
68131: PUSH
68132: LD_INT 1
68134: NEG
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 3
68142: NEG
68143: PUSH
68144: LD_INT 0
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 3
68153: NEG
68154: PUSH
68155: LD_INT 1
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 4
68164: NEG
68165: PUSH
68166: LD_INT 1
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 5
68175: NEG
68176: PUSH
68177: LD_INT 0
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 5
68186: NEG
68187: PUSH
68188: LD_INT 1
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 5
68198: NEG
68199: PUSH
68200: LD_INT 2
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 3
68210: NEG
68211: PUSH
68212: LD_INT 2
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 3
68221: NEG
68222: PUSH
68223: LD_INT 3
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 3
68233: NEG
68234: PUSH
68235: LD_INT 4
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 2
68245: NEG
68246: PUSH
68247: LD_INT 3
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 2
68257: NEG
68258: PUSH
68259: LD_INT 2
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 3
68269: NEG
68270: PUSH
68271: LD_INT 2
68273: NEG
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 4
68281: NEG
68282: PUSH
68283: LD_INT 3
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 4
68293: NEG
68294: PUSH
68295: LD_INT 4
68297: NEG
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 2
68305: NEG
68306: PUSH
68307: LD_INT 4
68309: NEG
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 4
68317: NEG
68318: PUSH
68319: LD_INT 2
68321: NEG
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 0
68329: PUSH
68330: LD_INT 4
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 0
68340: PUSH
68341: LD_INT 5
68343: NEG
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 1
68351: PUSH
68352: LD_INT 4
68354: NEG
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 1
68362: PUSH
68363: LD_INT 3
68365: NEG
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 0
68373: PUSH
68374: LD_INT 3
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 1
68384: NEG
68385: PUSH
68386: LD_INT 4
68388: NEG
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 1
68396: NEG
68397: PUSH
68398: LD_INT 5
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 2
68408: PUSH
68409: LD_INT 3
68411: NEG
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 2
68419: NEG
68420: PUSH
68421: LD_INT 5
68423: NEG
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68476: LD_ADDR_VAR 0 31
68480: PUSH
68481: LD_INT 0
68483: PUSH
68484: LD_INT 4
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 0
68493: PUSH
68494: LD_INT 3
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 1
68503: PUSH
68504: LD_INT 4
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 1
68513: PUSH
68514: LD_INT 5
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 0
68523: PUSH
68524: LD_INT 5
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 1
68533: NEG
68534: PUSH
68535: LD_INT 4
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 1
68544: NEG
68545: PUSH
68546: LD_INT 3
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 2
68555: PUSH
68556: LD_INT 5
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 2
68565: NEG
68566: PUSH
68567: LD_INT 3
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 3
68576: NEG
68577: PUSH
68578: LD_INT 0
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 3
68587: NEG
68588: PUSH
68589: LD_INT 1
68591: NEG
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 2
68599: NEG
68600: PUSH
68601: LD_INT 0
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 2
68610: NEG
68611: PUSH
68612: LD_INT 1
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 3
68621: NEG
68622: PUSH
68623: LD_INT 1
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 4
68632: NEG
68633: PUSH
68634: LD_INT 0
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 4
68643: NEG
68644: PUSH
68645: LD_INT 1
68647: NEG
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 4
68655: NEG
68656: PUSH
68657: LD_INT 2
68659: NEG
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 2
68667: NEG
68668: PUSH
68669: LD_INT 2
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 4
68678: NEG
68679: PUSH
68680: LD_INT 4
68682: NEG
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 4
68690: NEG
68691: PUSH
68692: LD_INT 5
68694: NEG
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 3
68702: NEG
68703: PUSH
68704: LD_INT 4
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 3
68714: NEG
68715: PUSH
68716: LD_INT 3
68718: NEG
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 4
68726: NEG
68727: PUSH
68728: LD_INT 3
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 5
68738: NEG
68739: PUSH
68740: LD_INT 4
68742: NEG
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 5
68750: NEG
68751: PUSH
68752: LD_INT 5
68754: NEG
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 3
68762: NEG
68763: PUSH
68764: LD_INT 5
68766: NEG
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 5
68774: NEG
68775: PUSH
68776: LD_INT 3
68778: NEG
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 0
68786: PUSH
68787: LD_INT 3
68789: NEG
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 0
68797: PUSH
68798: LD_INT 4
68800: NEG
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 1
68808: PUSH
68809: LD_INT 3
68811: NEG
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 1
68819: PUSH
68820: LD_INT 2
68822: NEG
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 0
68830: PUSH
68831: LD_INT 2
68833: NEG
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 1
68841: NEG
68842: PUSH
68843: LD_INT 3
68845: NEG
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 1
68853: NEG
68854: PUSH
68855: LD_INT 4
68857: NEG
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 2
68865: PUSH
68866: LD_INT 2
68868: NEG
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: LD_INT 2
68876: NEG
68877: PUSH
68878: LD_INT 4
68880: NEG
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 4
68888: PUSH
68889: LD_INT 0
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 4
68898: PUSH
68899: LD_INT 1
68901: NEG
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 5
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: PUSH
68917: LD_INT 5
68919: PUSH
68920: LD_INT 1
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 4
68929: PUSH
68930: LD_INT 1
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 3
68939: PUSH
68940: LD_INT 0
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 3
68949: PUSH
68950: LD_INT 1
68952: NEG
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 3
68960: PUSH
68961: LD_INT 2
68963: NEG
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 5
68971: PUSH
68972: LD_INT 2
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69026: LD_ADDR_VAR 0 32
69030: PUSH
69031: LD_INT 4
69033: NEG
69034: PUSH
69035: LD_INT 0
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 4
69044: NEG
69045: PUSH
69046: LD_INT 1
69048: NEG
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 3
69056: NEG
69057: PUSH
69058: LD_INT 0
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 3
69067: NEG
69068: PUSH
69069: LD_INT 1
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 4
69078: NEG
69079: PUSH
69080: LD_INT 1
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 5
69089: NEG
69090: PUSH
69091: LD_INT 0
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 5
69100: NEG
69101: PUSH
69102: LD_INT 1
69104: NEG
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 5
69112: NEG
69113: PUSH
69114: LD_INT 2
69116: NEG
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 3
69124: NEG
69125: PUSH
69126: LD_INT 2
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 3
69135: NEG
69136: PUSH
69137: LD_INT 3
69139: NEG
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 3
69147: NEG
69148: PUSH
69149: LD_INT 4
69151: NEG
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 2
69159: NEG
69160: PUSH
69161: LD_INT 3
69163: NEG
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 2
69171: NEG
69172: PUSH
69173: LD_INT 2
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 3
69183: NEG
69184: PUSH
69185: LD_INT 2
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 4
69195: NEG
69196: PUSH
69197: LD_INT 3
69199: NEG
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 4
69207: NEG
69208: PUSH
69209: LD_INT 4
69211: NEG
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 2
69219: NEG
69220: PUSH
69221: LD_INT 4
69223: NEG
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 4
69231: NEG
69232: PUSH
69233: LD_INT 2
69235: NEG
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 0
69243: PUSH
69244: LD_INT 4
69246: NEG
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 0
69254: PUSH
69255: LD_INT 5
69257: NEG
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 1
69265: PUSH
69266: LD_INT 4
69268: NEG
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 1
69276: PUSH
69277: LD_INT 3
69279: NEG
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 0
69287: PUSH
69288: LD_INT 3
69290: NEG
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 1
69298: NEG
69299: PUSH
69300: LD_INT 4
69302: NEG
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 1
69310: NEG
69311: PUSH
69312: LD_INT 5
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 2
69322: PUSH
69323: LD_INT 3
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 2
69333: NEG
69334: PUSH
69335: LD_INT 5
69337: NEG
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 3
69345: PUSH
69346: LD_INT 0
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 3
69355: PUSH
69356: LD_INT 1
69358: NEG
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 4
69366: PUSH
69367: LD_INT 0
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 4
69376: PUSH
69377: LD_INT 1
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 3
69386: PUSH
69387: LD_INT 1
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 2
69396: PUSH
69397: LD_INT 0
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 2
69406: PUSH
69407: LD_INT 1
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 2
69417: PUSH
69418: LD_INT 2
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 4
69428: PUSH
69429: LD_INT 2
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 4
69438: PUSH
69439: LD_INT 4
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 4
69448: PUSH
69449: LD_INT 3
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 5
69458: PUSH
69459: LD_INT 4
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 5
69468: PUSH
69469: LD_INT 5
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 4
69478: PUSH
69479: LD_INT 5
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 3
69488: PUSH
69489: LD_INT 4
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 3
69498: PUSH
69499: LD_INT 3
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 5
69508: PUSH
69509: LD_INT 3
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 3
69518: PUSH
69519: LD_INT 5
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69573: LD_ADDR_VAR 0 33
69577: PUSH
69578: LD_INT 4
69580: NEG
69581: PUSH
69582: LD_INT 4
69584: NEG
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 4
69592: NEG
69593: PUSH
69594: LD_INT 5
69596: NEG
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 3
69604: NEG
69605: PUSH
69606: LD_INT 4
69608: NEG
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 3
69616: NEG
69617: PUSH
69618: LD_INT 3
69620: NEG
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 4
69628: NEG
69629: PUSH
69630: LD_INT 3
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 5
69640: NEG
69641: PUSH
69642: LD_INT 4
69644: NEG
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 5
69652: NEG
69653: PUSH
69654: LD_INT 5
69656: NEG
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 3
69664: NEG
69665: PUSH
69666: LD_INT 5
69668: NEG
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 5
69676: NEG
69677: PUSH
69678: LD_INT 3
69680: NEG
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 0
69688: PUSH
69689: LD_INT 3
69691: NEG
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 0
69699: PUSH
69700: LD_INT 4
69702: NEG
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 1
69710: PUSH
69711: LD_INT 3
69713: NEG
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 1
69721: PUSH
69722: LD_INT 2
69724: NEG
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 0
69732: PUSH
69733: LD_INT 2
69735: NEG
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 1
69743: NEG
69744: PUSH
69745: LD_INT 3
69747: NEG
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 1
69755: NEG
69756: PUSH
69757: LD_INT 4
69759: NEG
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 2
69767: PUSH
69768: LD_INT 2
69770: NEG
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 2
69778: NEG
69779: PUSH
69780: LD_INT 4
69782: NEG
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 4
69790: PUSH
69791: LD_INT 0
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 4
69800: PUSH
69801: LD_INT 1
69803: NEG
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 5
69811: PUSH
69812: LD_INT 0
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 5
69821: PUSH
69822: LD_INT 1
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 4
69831: PUSH
69832: LD_INT 1
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 3
69841: PUSH
69842: LD_INT 0
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 3
69851: PUSH
69852: LD_INT 1
69854: NEG
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 3
69862: PUSH
69863: LD_INT 2
69865: NEG
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 5
69873: PUSH
69874: LD_INT 2
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 3
69883: PUSH
69884: LD_INT 3
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 3
69893: PUSH
69894: LD_INT 2
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 4
69903: PUSH
69904: LD_INT 3
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: LD_INT 4
69913: PUSH
69914: LD_INT 4
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 3
69923: PUSH
69924: LD_INT 4
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 2
69933: PUSH
69934: LD_INT 3
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 2
69943: PUSH
69944: LD_INT 2
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 4
69953: PUSH
69954: LD_INT 2
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 2
69963: PUSH
69964: LD_INT 4
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 0
69973: PUSH
69974: LD_INT 4
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 0
69983: PUSH
69984: LD_INT 3
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 1
69993: PUSH
69994: LD_INT 4
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 1
70003: PUSH
70004: LD_INT 5
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 0
70013: PUSH
70014: LD_INT 5
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: LD_INT 1
70023: NEG
70024: PUSH
70025: LD_INT 4
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 1
70034: NEG
70035: PUSH
70036: LD_INT 3
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 2
70045: PUSH
70046: LD_INT 5
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 2
70055: NEG
70056: PUSH
70057: LD_INT 3
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70111: LD_ADDR_VAR 0 34
70115: PUSH
70116: LD_INT 0
70118: PUSH
70119: LD_INT 4
70121: NEG
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 0
70129: PUSH
70130: LD_INT 5
70132: NEG
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 1
70140: PUSH
70141: LD_INT 4
70143: NEG
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 1
70151: PUSH
70152: LD_INT 3
70154: NEG
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 0
70162: PUSH
70163: LD_INT 3
70165: NEG
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 1
70173: NEG
70174: PUSH
70175: LD_INT 4
70177: NEG
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 1
70185: NEG
70186: PUSH
70187: LD_INT 5
70189: NEG
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 2
70197: PUSH
70198: LD_INT 3
70200: NEG
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 2
70208: NEG
70209: PUSH
70210: LD_INT 5
70212: NEG
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 3
70220: PUSH
70221: LD_INT 0
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: LD_INT 3
70230: PUSH
70231: LD_INT 1
70233: NEG
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 4
70241: PUSH
70242: LD_INT 0
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 4
70251: PUSH
70252: LD_INT 1
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 3
70261: PUSH
70262: LD_INT 1
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 2
70271: PUSH
70272: LD_INT 0
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 2
70281: PUSH
70282: LD_INT 1
70284: NEG
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 2
70292: PUSH
70293: LD_INT 2
70295: NEG
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 4
70303: PUSH
70304: LD_INT 2
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 4
70313: PUSH
70314: LD_INT 4
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 4
70323: PUSH
70324: LD_INT 3
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 5
70333: PUSH
70334: LD_INT 4
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 5
70343: PUSH
70344: LD_INT 5
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 4
70353: PUSH
70354: LD_INT 5
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 3
70363: PUSH
70364: LD_INT 4
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 3
70373: PUSH
70374: LD_INT 3
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 5
70383: PUSH
70384: LD_INT 3
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 3
70393: PUSH
70394: LD_INT 5
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 0
70403: PUSH
70404: LD_INT 3
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 0
70413: PUSH
70414: LD_INT 2
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 1
70423: PUSH
70424: LD_INT 3
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 1
70433: PUSH
70434: LD_INT 4
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 0
70443: PUSH
70444: LD_INT 4
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 1
70453: NEG
70454: PUSH
70455: LD_INT 3
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 1
70464: NEG
70465: PUSH
70466: LD_INT 2
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 2
70475: PUSH
70476: LD_INT 4
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 2
70485: NEG
70486: PUSH
70487: LD_INT 2
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 4
70496: NEG
70497: PUSH
70498: LD_INT 0
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 4
70507: NEG
70508: PUSH
70509: LD_INT 1
70511: NEG
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 3
70519: NEG
70520: PUSH
70521: LD_INT 0
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 3
70530: NEG
70531: PUSH
70532: LD_INT 1
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 4
70541: NEG
70542: PUSH
70543: LD_INT 1
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 5
70552: NEG
70553: PUSH
70554: LD_INT 0
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 5
70563: NEG
70564: PUSH
70565: LD_INT 1
70567: NEG
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 5
70575: NEG
70576: PUSH
70577: LD_INT 2
70579: NEG
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 3
70587: NEG
70588: PUSH
70589: LD_INT 2
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: ST_TO_ADDR
// end ; end ;
70643: GO 70646
70645: POP
// case btype of b_depot , b_warehouse :
70646: LD_VAR 0 1
70650: PUSH
70651: LD_INT 0
70653: DOUBLE
70654: EQUAL
70655: IFTRUE 70665
70657: LD_INT 1
70659: DOUBLE
70660: EQUAL
70661: IFTRUE 70665
70663: GO 70866
70665: POP
// case nation of nation_american :
70666: LD_VAR 0 5
70670: PUSH
70671: LD_INT 1
70673: DOUBLE
70674: EQUAL
70675: IFTRUE 70679
70677: GO 70735
70679: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70680: LD_ADDR_VAR 0 9
70684: PUSH
70685: LD_VAR 0 11
70689: PUSH
70690: LD_VAR 0 12
70694: PUSH
70695: LD_VAR 0 13
70699: PUSH
70700: LD_VAR 0 14
70704: PUSH
70705: LD_VAR 0 15
70709: PUSH
70710: LD_VAR 0 16
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: PUSH
70723: LD_VAR 0 4
70727: PUSH
70728: LD_INT 1
70730: PLUS
70731: ARRAY
70732: ST_TO_ADDR
70733: GO 70864
70735: LD_INT 2
70737: DOUBLE
70738: EQUAL
70739: IFTRUE 70743
70741: GO 70799
70743: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70744: LD_ADDR_VAR 0 9
70748: PUSH
70749: LD_VAR 0 17
70753: PUSH
70754: LD_VAR 0 18
70758: PUSH
70759: LD_VAR 0 19
70763: PUSH
70764: LD_VAR 0 20
70768: PUSH
70769: LD_VAR 0 21
70773: PUSH
70774: LD_VAR 0 22
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: PUSH
70787: LD_VAR 0 4
70791: PUSH
70792: LD_INT 1
70794: PLUS
70795: ARRAY
70796: ST_TO_ADDR
70797: GO 70864
70799: LD_INT 3
70801: DOUBLE
70802: EQUAL
70803: IFTRUE 70807
70805: GO 70863
70807: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70808: LD_ADDR_VAR 0 9
70812: PUSH
70813: LD_VAR 0 23
70817: PUSH
70818: LD_VAR 0 24
70822: PUSH
70823: LD_VAR 0 25
70827: PUSH
70828: LD_VAR 0 26
70832: PUSH
70833: LD_VAR 0 27
70837: PUSH
70838: LD_VAR 0 28
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: PUSH
70851: LD_VAR 0 4
70855: PUSH
70856: LD_INT 1
70858: PLUS
70859: ARRAY
70860: ST_TO_ADDR
70861: GO 70864
70863: POP
70864: GO 71419
70866: LD_INT 2
70868: DOUBLE
70869: EQUAL
70870: IFTRUE 70880
70872: LD_INT 3
70874: DOUBLE
70875: EQUAL
70876: IFTRUE 70880
70878: GO 70936
70880: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70881: LD_ADDR_VAR 0 9
70885: PUSH
70886: LD_VAR 0 29
70890: PUSH
70891: LD_VAR 0 30
70895: PUSH
70896: LD_VAR 0 31
70900: PUSH
70901: LD_VAR 0 32
70905: PUSH
70906: LD_VAR 0 33
70910: PUSH
70911: LD_VAR 0 34
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: PUSH
70924: LD_VAR 0 4
70928: PUSH
70929: LD_INT 1
70931: PLUS
70932: ARRAY
70933: ST_TO_ADDR
70934: GO 71419
70936: LD_INT 16
70938: DOUBLE
70939: EQUAL
70940: IFTRUE 70998
70942: LD_INT 17
70944: DOUBLE
70945: EQUAL
70946: IFTRUE 70998
70948: LD_INT 18
70950: DOUBLE
70951: EQUAL
70952: IFTRUE 70998
70954: LD_INT 19
70956: DOUBLE
70957: EQUAL
70958: IFTRUE 70998
70960: LD_INT 22
70962: DOUBLE
70963: EQUAL
70964: IFTRUE 70998
70966: LD_INT 20
70968: DOUBLE
70969: EQUAL
70970: IFTRUE 70998
70972: LD_INT 21
70974: DOUBLE
70975: EQUAL
70976: IFTRUE 70998
70978: LD_INT 23
70980: DOUBLE
70981: EQUAL
70982: IFTRUE 70998
70984: LD_INT 24
70986: DOUBLE
70987: EQUAL
70988: IFTRUE 70998
70990: LD_INT 25
70992: DOUBLE
70993: EQUAL
70994: IFTRUE 70998
70996: GO 71054
70998: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70999: LD_ADDR_VAR 0 9
71003: PUSH
71004: LD_VAR 0 35
71008: PUSH
71009: LD_VAR 0 36
71013: PUSH
71014: LD_VAR 0 37
71018: PUSH
71019: LD_VAR 0 38
71023: PUSH
71024: LD_VAR 0 39
71028: PUSH
71029: LD_VAR 0 40
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: PUSH
71042: LD_VAR 0 4
71046: PUSH
71047: LD_INT 1
71049: PLUS
71050: ARRAY
71051: ST_TO_ADDR
71052: GO 71419
71054: LD_INT 6
71056: DOUBLE
71057: EQUAL
71058: IFTRUE 71110
71060: LD_INT 7
71062: DOUBLE
71063: EQUAL
71064: IFTRUE 71110
71066: LD_INT 8
71068: DOUBLE
71069: EQUAL
71070: IFTRUE 71110
71072: LD_INT 13
71074: DOUBLE
71075: EQUAL
71076: IFTRUE 71110
71078: LD_INT 12
71080: DOUBLE
71081: EQUAL
71082: IFTRUE 71110
71084: LD_INT 15
71086: DOUBLE
71087: EQUAL
71088: IFTRUE 71110
71090: LD_INT 11
71092: DOUBLE
71093: EQUAL
71094: IFTRUE 71110
71096: LD_INT 14
71098: DOUBLE
71099: EQUAL
71100: IFTRUE 71110
71102: LD_INT 10
71104: DOUBLE
71105: EQUAL
71106: IFTRUE 71110
71108: GO 71166
71110: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71111: LD_ADDR_VAR 0 9
71115: PUSH
71116: LD_VAR 0 41
71120: PUSH
71121: LD_VAR 0 42
71125: PUSH
71126: LD_VAR 0 43
71130: PUSH
71131: LD_VAR 0 44
71135: PUSH
71136: LD_VAR 0 45
71140: PUSH
71141: LD_VAR 0 46
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: PUSH
71154: LD_VAR 0 4
71158: PUSH
71159: LD_INT 1
71161: PLUS
71162: ARRAY
71163: ST_TO_ADDR
71164: GO 71419
71166: LD_INT 36
71168: DOUBLE
71169: EQUAL
71170: IFTRUE 71174
71172: GO 71230
71174: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71175: LD_ADDR_VAR 0 9
71179: PUSH
71180: LD_VAR 0 47
71184: PUSH
71185: LD_VAR 0 48
71189: PUSH
71190: LD_VAR 0 49
71194: PUSH
71195: LD_VAR 0 50
71199: PUSH
71200: LD_VAR 0 51
71204: PUSH
71205: LD_VAR 0 52
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: PUSH
71218: LD_VAR 0 4
71222: PUSH
71223: LD_INT 1
71225: PLUS
71226: ARRAY
71227: ST_TO_ADDR
71228: GO 71419
71230: LD_INT 4
71232: DOUBLE
71233: EQUAL
71234: IFTRUE 71256
71236: LD_INT 5
71238: DOUBLE
71239: EQUAL
71240: IFTRUE 71256
71242: LD_INT 34
71244: DOUBLE
71245: EQUAL
71246: IFTRUE 71256
71248: LD_INT 37
71250: DOUBLE
71251: EQUAL
71252: IFTRUE 71256
71254: GO 71312
71256: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71257: LD_ADDR_VAR 0 9
71261: PUSH
71262: LD_VAR 0 53
71266: PUSH
71267: LD_VAR 0 54
71271: PUSH
71272: LD_VAR 0 55
71276: PUSH
71277: LD_VAR 0 56
71281: PUSH
71282: LD_VAR 0 57
71286: PUSH
71287: LD_VAR 0 58
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: PUSH
71300: LD_VAR 0 4
71304: PUSH
71305: LD_INT 1
71307: PLUS
71308: ARRAY
71309: ST_TO_ADDR
71310: GO 71419
71312: LD_INT 31
71314: DOUBLE
71315: EQUAL
71316: IFTRUE 71362
71318: LD_INT 32
71320: DOUBLE
71321: EQUAL
71322: IFTRUE 71362
71324: LD_INT 33
71326: DOUBLE
71327: EQUAL
71328: IFTRUE 71362
71330: LD_INT 27
71332: DOUBLE
71333: EQUAL
71334: IFTRUE 71362
71336: LD_INT 26
71338: DOUBLE
71339: EQUAL
71340: IFTRUE 71362
71342: LD_INT 28
71344: DOUBLE
71345: EQUAL
71346: IFTRUE 71362
71348: LD_INT 29
71350: DOUBLE
71351: EQUAL
71352: IFTRUE 71362
71354: LD_INT 30
71356: DOUBLE
71357: EQUAL
71358: IFTRUE 71362
71360: GO 71418
71362: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71363: LD_ADDR_VAR 0 9
71367: PUSH
71368: LD_VAR 0 59
71372: PUSH
71373: LD_VAR 0 60
71377: PUSH
71378: LD_VAR 0 61
71382: PUSH
71383: LD_VAR 0 62
71387: PUSH
71388: LD_VAR 0 63
71392: PUSH
71393: LD_VAR 0 64
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: PUSH
71406: LD_VAR 0 4
71410: PUSH
71411: LD_INT 1
71413: PLUS
71414: ARRAY
71415: ST_TO_ADDR
71416: GO 71419
71418: POP
// temp_list2 = [ ] ;
71419: LD_ADDR_VAR 0 10
71423: PUSH
71424: EMPTY
71425: ST_TO_ADDR
// for i in temp_list do
71426: LD_ADDR_VAR 0 8
71430: PUSH
71431: LD_VAR 0 9
71435: PUSH
71436: FOR_IN
71437: IFFALSE 71489
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71439: LD_ADDR_VAR 0 10
71443: PUSH
71444: LD_VAR 0 10
71448: PUSH
71449: LD_VAR 0 8
71453: PUSH
71454: LD_INT 1
71456: ARRAY
71457: PUSH
71458: LD_VAR 0 2
71462: PLUS
71463: PUSH
71464: LD_VAR 0 8
71468: PUSH
71469: LD_INT 2
71471: ARRAY
71472: PUSH
71473: LD_VAR 0 3
71477: PLUS
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: PUSH
71483: EMPTY
71484: LIST
71485: ADD
71486: ST_TO_ADDR
71487: GO 71436
71489: POP
71490: POP
// result = temp_list2 ;
71491: LD_ADDR_VAR 0 7
71495: PUSH
71496: LD_VAR 0 10
71500: ST_TO_ADDR
// end ;
71501: LD_VAR 0 7
71505: RET
// export function EnemyInRange ( unit , dist ) ; begin
71506: LD_INT 0
71508: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71509: LD_ADDR_VAR 0 3
71513: PUSH
71514: LD_VAR 0 1
71518: PPUSH
71519: CALL_OW 255
71523: PPUSH
71524: LD_VAR 0 1
71528: PPUSH
71529: CALL_OW 250
71533: PPUSH
71534: LD_VAR 0 1
71538: PPUSH
71539: CALL_OW 251
71543: PPUSH
71544: LD_VAR 0 2
71548: PPUSH
71549: CALL 44902 0 4
71553: PUSH
71554: LD_INT 4
71556: ARRAY
71557: ST_TO_ADDR
// end ;
71558: LD_VAR 0 3
71562: RET
// export function PlayerSeeMe ( unit ) ; begin
71563: LD_INT 0
71565: PPUSH
// result := See ( your_side , unit ) ;
71566: LD_ADDR_VAR 0 2
71570: PUSH
71571: LD_OWVAR 2
71575: PPUSH
71576: LD_VAR 0 1
71580: PPUSH
71581: CALL_OW 292
71585: ST_TO_ADDR
// end ;
71586: LD_VAR 0 2
71590: RET
// export function ReverseDir ( unit ) ; begin
71591: LD_INT 0
71593: PPUSH
// if not unit then
71594: LD_VAR 0 1
71598: NOT
71599: IFFALSE 71603
// exit ;
71601: GO 71626
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71603: LD_ADDR_VAR 0 2
71607: PUSH
71608: LD_VAR 0 1
71612: PPUSH
71613: CALL_OW 254
71617: PUSH
71618: LD_INT 3
71620: PLUS
71621: PUSH
71622: LD_INT 6
71624: MOD
71625: ST_TO_ADDR
// end ;
71626: LD_VAR 0 2
71630: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71631: LD_INT 0
71633: PPUSH
71634: PPUSH
71635: PPUSH
71636: PPUSH
71637: PPUSH
// if not hexes then
71638: LD_VAR 0 2
71642: NOT
71643: IFFALSE 71647
// exit ;
71645: GO 71795
// dist := 9999 ;
71647: LD_ADDR_VAR 0 5
71651: PUSH
71652: LD_INT 9999
71654: ST_TO_ADDR
// for i = 1 to hexes do
71655: LD_ADDR_VAR 0 4
71659: PUSH
71660: DOUBLE
71661: LD_INT 1
71663: DEC
71664: ST_TO_ADDR
71665: LD_VAR 0 2
71669: PUSH
71670: FOR_TO
71671: IFFALSE 71783
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71673: LD_VAR 0 1
71677: PPUSH
71678: LD_VAR 0 2
71682: PUSH
71683: LD_VAR 0 4
71687: ARRAY
71688: PUSH
71689: LD_INT 1
71691: ARRAY
71692: PPUSH
71693: LD_VAR 0 2
71697: PUSH
71698: LD_VAR 0 4
71702: ARRAY
71703: PUSH
71704: LD_INT 2
71706: ARRAY
71707: PPUSH
71708: CALL_OW 297
71712: PUSH
71713: LD_VAR 0 5
71717: LESS
71718: IFFALSE 71781
// begin hex := hexes [ i ] ;
71720: LD_ADDR_VAR 0 7
71724: PUSH
71725: LD_VAR 0 2
71729: PUSH
71730: LD_VAR 0 4
71734: ARRAY
71735: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71736: LD_ADDR_VAR 0 5
71740: PUSH
71741: LD_VAR 0 1
71745: PPUSH
71746: LD_VAR 0 2
71750: PUSH
71751: LD_VAR 0 4
71755: ARRAY
71756: PUSH
71757: LD_INT 1
71759: ARRAY
71760: PPUSH
71761: LD_VAR 0 2
71765: PUSH
71766: LD_VAR 0 4
71770: ARRAY
71771: PUSH
71772: LD_INT 2
71774: ARRAY
71775: PPUSH
71776: CALL_OW 297
71780: ST_TO_ADDR
// end ; end ;
71781: GO 71670
71783: POP
71784: POP
// result := hex ;
71785: LD_ADDR_VAR 0 3
71789: PUSH
71790: LD_VAR 0 7
71794: ST_TO_ADDR
// end ;
71795: LD_VAR 0 3
71799: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71800: LD_INT 0
71802: PPUSH
71803: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71804: LD_VAR 0 1
71808: NOT
71809: PUSH
71810: LD_VAR 0 1
71814: PUSH
71815: LD_INT 21
71817: PUSH
71818: LD_INT 2
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: LD_INT 23
71827: PUSH
71828: LD_INT 2
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PPUSH
71839: CALL_OW 69
71843: IN
71844: NOT
71845: OR
71846: IFFALSE 71850
// exit ;
71848: GO 71897
// for i = 1 to 3 do
71850: LD_ADDR_VAR 0 3
71854: PUSH
71855: DOUBLE
71856: LD_INT 1
71858: DEC
71859: ST_TO_ADDR
71860: LD_INT 3
71862: PUSH
71863: FOR_TO
71864: IFFALSE 71895
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71866: LD_VAR 0 1
71870: PPUSH
71871: CALL_OW 250
71875: PPUSH
71876: LD_VAR 0 1
71880: PPUSH
71881: CALL_OW 251
71885: PPUSH
71886: LD_INT 1
71888: PPUSH
71889: CALL_OW 453
71893: GO 71863
71895: POP
71896: POP
// end ;
71897: LD_VAR 0 2
71901: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71902: LD_INT 0
71904: PPUSH
71905: PPUSH
71906: PPUSH
71907: PPUSH
71908: PPUSH
71909: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71910: LD_VAR 0 1
71914: NOT
71915: PUSH
71916: LD_VAR 0 2
71920: NOT
71921: OR
71922: PUSH
71923: LD_VAR 0 1
71927: PPUSH
71928: CALL_OW 314
71932: OR
71933: IFFALSE 71937
// exit ;
71935: GO 72378
// x := GetX ( enemy_unit ) ;
71937: LD_ADDR_VAR 0 7
71941: PUSH
71942: LD_VAR 0 2
71946: PPUSH
71947: CALL_OW 250
71951: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71952: LD_ADDR_VAR 0 8
71956: PUSH
71957: LD_VAR 0 2
71961: PPUSH
71962: CALL_OW 251
71966: ST_TO_ADDR
// if not x or not y then
71967: LD_VAR 0 7
71971: NOT
71972: PUSH
71973: LD_VAR 0 8
71977: NOT
71978: OR
71979: IFFALSE 71983
// exit ;
71981: GO 72378
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71983: LD_ADDR_VAR 0 6
71987: PUSH
71988: LD_VAR 0 7
71992: PPUSH
71993: LD_INT 0
71995: PPUSH
71996: LD_INT 4
71998: PPUSH
71999: CALL_OW 272
72003: PUSH
72004: LD_VAR 0 8
72008: PPUSH
72009: LD_INT 0
72011: PPUSH
72012: LD_INT 4
72014: PPUSH
72015: CALL_OW 273
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: PUSH
72024: LD_VAR 0 7
72028: PPUSH
72029: LD_INT 1
72031: PPUSH
72032: LD_INT 4
72034: PPUSH
72035: CALL_OW 272
72039: PUSH
72040: LD_VAR 0 8
72044: PPUSH
72045: LD_INT 1
72047: PPUSH
72048: LD_INT 4
72050: PPUSH
72051: CALL_OW 273
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: PUSH
72060: LD_VAR 0 7
72064: PPUSH
72065: LD_INT 2
72067: PPUSH
72068: LD_INT 4
72070: PPUSH
72071: CALL_OW 272
72075: PUSH
72076: LD_VAR 0 8
72080: PPUSH
72081: LD_INT 2
72083: PPUSH
72084: LD_INT 4
72086: PPUSH
72087: CALL_OW 273
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PUSH
72096: LD_VAR 0 7
72100: PPUSH
72101: LD_INT 3
72103: PPUSH
72104: LD_INT 4
72106: PPUSH
72107: CALL_OW 272
72111: PUSH
72112: LD_VAR 0 8
72116: PPUSH
72117: LD_INT 3
72119: PPUSH
72120: LD_INT 4
72122: PPUSH
72123: CALL_OW 273
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: LD_VAR 0 7
72136: PPUSH
72137: LD_INT 4
72139: PPUSH
72140: LD_INT 4
72142: PPUSH
72143: CALL_OW 272
72147: PUSH
72148: LD_VAR 0 8
72152: PPUSH
72153: LD_INT 4
72155: PPUSH
72156: LD_INT 4
72158: PPUSH
72159: CALL_OW 273
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_VAR 0 7
72172: PPUSH
72173: LD_INT 5
72175: PPUSH
72176: LD_INT 4
72178: PPUSH
72179: CALL_OW 272
72183: PUSH
72184: LD_VAR 0 8
72188: PPUSH
72189: LD_INT 5
72191: PPUSH
72192: LD_INT 4
72194: PPUSH
72195: CALL_OW 273
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: ST_TO_ADDR
// for i = tmp downto 1 do
72212: LD_ADDR_VAR 0 4
72216: PUSH
72217: DOUBLE
72218: LD_VAR 0 6
72222: INC
72223: ST_TO_ADDR
72224: LD_INT 1
72226: PUSH
72227: FOR_DOWNTO
72228: IFFALSE 72329
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72230: LD_VAR 0 6
72234: PUSH
72235: LD_VAR 0 4
72239: ARRAY
72240: PUSH
72241: LD_INT 1
72243: ARRAY
72244: PPUSH
72245: LD_VAR 0 6
72249: PUSH
72250: LD_VAR 0 4
72254: ARRAY
72255: PUSH
72256: LD_INT 2
72258: ARRAY
72259: PPUSH
72260: CALL_OW 488
72264: NOT
72265: PUSH
72266: LD_VAR 0 6
72270: PUSH
72271: LD_VAR 0 4
72275: ARRAY
72276: PUSH
72277: LD_INT 1
72279: ARRAY
72280: PPUSH
72281: LD_VAR 0 6
72285: PUSH
72286: LD_VAR 0 4
72290: ARRAY
72291: PUSH
72292: LD_INT 2
72294: ARRAY
72295: PPUSH
72296: CALL_OW 428
72300: PUSH
72301: LD_INT 0
72303: NONEQUAL
72304: OR
72305: IFFALSE 72327
// tmp := Delete ( tmp , i ) ;
72307: LD_ADDR_VAR 0 6
72311: PUSH
72312: LD_VAR 0 6
72316: PPUSH
72317: LD_VAR 0 4
72321: PPUSH
72322: CALL_OW 3
72326: ST_TO_ADDR
72327: GO 72227
72329: POP
72330: POP
// j := GetClosestHex ( unit , tmp ) ;
72331: LD_ADDR_VAR 0 5
72335: PUSH
72336: LD_VAR 0 1
72340: PPUSH
72341: LD_VAR 0 6
72345: PPUSH
72346: CALL 71631 0 2
72350: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72351: LD_VAR 0 1
72355: PPUSH
72356: LD_VAR 0 5
72360: PUSH
72361: LD_INT 1
72363: ARRAY
72364: PPUSH
72365: LD_VAR 0 5
72369: PUSH
72370: LD_INT 2
72372: ARRAY
72373: PPUSH
72374: CALL_OW 111
// end ;
72378: LD_VAR 0 3
72382: RET
// export function PrepareApemanSoldier ( ) ; begin
72383: LD_INT 0
72385: PPUSH
// uc_nation := 0 ;
72386: LD_ADDR_OWVAR 21
72390: PUSH
72391: LD_INT 0
72393: ST_TO_ADDR
// hc_sex := sex_male ;
72394: LD_ADDR_OWVAR 27
72398: PUSH
72399: LD_INT 1
72401: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72402: LD_ADDR_OWVAR 28
72406: PUSH
72407: LD_INT 15
72409: ST_TO_ADDR
// hc_gallery :=  ;
72410: LD_ADDR_OWVAR 33
72414: PUSH
72415: LD_STRING 
72417: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72418: LD_ADDR_OWVAR 31
72422: PUSH
72423: LD_INT 0
72425: PPUSH
72426: LD_INT 3
72428: PPUSH
72429: CALL_OW 12
72433: PUSH
72434: LD_INT 0
72436: PPUSH
72437: LD_INT 3
72439: PPUSH
72440: CALL_OW 12
72444: PUSH
72445: LD_INT 0
72447: PUSH
72448: LD_INT 0
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: ST_TO_ADDR
// end ;
72457: LD_VAR 0 1
72461: RET
// export function PrepareApemanEngineer ( ) ; begin
72462: LD_INT 0
72464: PPUSH
// uc_nation := 0 ;
72465: LD_ADDR_OWVAR 21
72469: PUSH
72470: LD_INT 0
72472: ST_TO_ADDR
// hc_sex := sex_male ;
72473: LD_ADDR_OWVAR 27
72477: PUSH
72478: LD_INT 1
72480: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72481: LD_ADDR_OWVAR 28
72485: PUSH
72486: LD_INT 16
72488: ST_TO_ADDR
// hc_gallery :=  ;
72489: LD_ADDR_OWVAR 33
72493: PUSH
72494: LD_STRING 
72496: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72497: LD_ADDR_OWVAR 31
72501: PUSH
72502: LD_INT 0
72504: PPUSH
72505: LD_INT 3
72507: PPUSH
72508: CALL_OW 12
72512: PUSH
72513: LD_INT 0
72515: PPUSH
72516: LD_INT 3
72518: PPUSH
72519: CALL_OW 12
72523: PUSH
72524: LD_INT 0
72526: PUSH
72527: LD_INT 0
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: ST_TO_ADDR
// end ;
72536: LD_VAR 0 1
72540: RET
// export function PrepareApeman ( agressivity ) ; begin
72541: LD_INT 0
72543: PPUSH
// uc_side := 0 ;
72544: LD_ADDR_OWVAR 20
72548: PUSH
72549: LD_INT 0
72551: ST_TO_ADDR
// uc_nation := 0 ;
72552: LD_ADDR_OWVAR 21
72556: PUSH
72557: LD_INT 0
72559: ST_TO_ADDR
// hc_sex := sex_male ;
72560: LD_ADDR_OWVAR 27
72564: PUSH
72565: LD_INT 1
72567: ST_TO_ADDR
// hc_class := class_apeman ;
72568: LD_ADDR_OWVAR 28
72572: PUSH
72573: LD_INT 12
72575: ST_TO_ADDR
// hc_gallery :=  ;
72576: LD_ADDR_OWVAR 33
72580: PUSH
72581: LD_STRING 
72583: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72584: LD_ADDR_OWVAR 35
72588: PUSH
72589: LD_VAR 0 1
72593: NEG
72594: PPUSH
72595: LD_VAR 0 1
72599: PPUSH
72600: CALL_OW 12
72604: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72605: LD_ADDR_OWVAR 31
72609: PUSH
72610: LD_INT 0
72612: PPUSH
72613: LD_INT 3
72615: PPUSH
72616: CALL_OW 12
72620: PUSH
72621: LD_INT 0
72623: PPUSH
72624: LD_INT 3
72626: PPUSH
72627: CALL_OW 12
72631: PUSH
72632: LD_INT 0
72634: PUSH
72635: LD_INT 0
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: ST_TO_ADDR
// end ;
72644: LD_VAR 0 2
72648: RET
// export function PrepareTiger ( agressivity ) ; begin
72649: LD_INT 0
72651: PPUSH
// uc_side := 0 ;
72652: LD_ADDR_OWVAR 20
72656: PUSH
72657: LD_INT 0
72659: ST_TO_ADDR
// uc_nation := 0 ;
72660: LD_ADDR_OWVAR 21
72664: PUSH
72665: LD_INT 0
72667: ST_TO_ADDR
// hc_class := class_tiger ;
72668: LD_ADDR_OWVAR 28
72672: PUSH
72673: LD_INT 14
72675: ST_TO_ADDR
// hc_gallery :=  ;
72676: LD_ADDR_OWVAR 33
72680: PUSH
72681: LD_STRING 
72683: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72684: LD_ADDR_OWVAR 35
72688: PUSH
72689: LD_VAR 0 1
72693: NEG
72694: PPUSH
72695: LD_VAR 0 1
72699: PPUSH
72700: CALL_OW 12
72704: ST_TO_ADDR
// end ;
72705: LD_VAR 0 2
72709: RET
// export function PrepareEnchidna ( ) ; begin
72710: LD_INT 0
72712: PPUSH
// uc_side := 0 ;
72713: LD_ADDR_OWVAR 20
72717: PUSH
72718: LD_INT 0
72720: ST_TO_ADDR
// uc_nation := 0 ;
72721: LD_ADDR_OWVAR 21
72725: PUSH
72726: LD_INT 0
72728: ST_TO_ADDR
// hc_class := class_baggie ;
72729: LD_ADDR_OWVAR 28
72733: PUSH
72734: LD_INT 13
72736: ST_TO_ADDR
// hc_gallery :=  ;
72737: LD_ADDR_OWVAR 33
72741: PUSH
72742: LD_STRING 
72744: ST_TO_ADDR
// end ;
72745: LD_VAR 0 1
72749: RET
// export function PrepareFrog ( ) ; begin
72750: LD_INT 0
72752: PPUSH
// uc_side := 0 ;
72753: LD_ADDR_OWVAR 20
72757: PUSH
72758: LD_INT 0
72760: ST_TO_ADDR
// uc_nation := 0 ;
72761: LD_ADDR_OWVAR 21
72765: PUSH
72766: LD_INT 0
72768: ST_TO_ADDR
// hc_class := class_frog ;
72769: LD_ADDR_OWVAR 28
72773: PUSH
72774: LD_INT 19
72776: ST_TO_ADDR
// hc_gallery :=  ;
72777: LD_ADDR_OWVAR 33
72781: PUSH
72782: LD_STRING 
72784: ST_TO_ADDR
// end ;
72785: LD_VAR 0 1
72789: RET
// export function PrepareFish ( ) ; begin
72790: LD_INT 0
72792: PPUSH
// uc_side := 0 ;
72793: LD_ADDR_OWVAR 20
72797: PUSH
72798: LD_INT 0
72800: ST_TO_ADDR
// uc_nation := 0 ;
72801: LD_ADDR_OWVAR 21
72805: PUSH
72806: LD_INT 0
72808: ST_TO_ADDR
// hc_class := class_fish ;
72809: LD_ADDR_OWVAR 28
72813: PUSH
72814: LD_INT 20
72816: ST_TO_ADDR
// hc_gallery :=  ;
72817: LD_ADDR_OWVAR 33
72821: PUSH
72822: LD_STRING 
72824: ST_TO_ADDR
// end ;
72825: LD_VAR 0 1
72829: RET
// export function PrepareBird ( ) ; begin
72830: LD_INT 0
72832: PPUSH
// uc_side := 0 ;
72833: LD_ADDR_OWVAR 20
72837: PUSH
72838: LD_INT 0
72840: ST_TO_ADDR
// uc_nation := 0 ;
72841: LD_ADDR_OWVAR 21
72845: PUSH
72846: LD_INT 0
72848: ST_TO_ADDR
// hc_class := class_phororhacos ;
72849: LD_ADDR_OWVAR 28
72853: PUSH
72854: LD_INT 18
72856: ST_TO_ADDR
// hc_gallery :=  ;
72857: LD_ADDR_OWVAR 33
72861: PUSH
72862: LD_STRING 
72864: ST_TO_ADDR
// end ;
72865: LD_VAR 0 1
72869: RET
// export function PrepareHorse ( ) ; begin
72870: LD_INT 0
72872: PPUSH
// uc_side := 0 ;
72873: LD_ADDR_OWVAR 20
72877: PUSH
72878: LD_INT 0
72880: ST_TO_ADDR
// uc_nation := 0 ;
72881: LD_ADDR_OWVAR 21
72885: PUSH
72886: LD_INT 0
72888: ST_TO_ADDR
// hc_class := class_horse ;
72889: LD_ADDR_OWVAR 28
72893: PUSH
72894: LD_INT 21
72896: ST_TO_ADDR
// hc_gallery :=  ;
72897: LD_ADDR_OWVAR 33
72901: PUSH
72902: LD_STRING 
72904: ST_TO_ADDR
// end ;
72905: LD_VAR 0 1
72909: RET
// export function PrepareMastodont ( ) ; begin
72910: LD_INT 0
72912: PPUSH
// uc_side := 0 ;
72913: LD_ADDR_OWVAR 20
72917: PUSH
72918: LD_INT 0
72920: ST_TO_ADDR
// uc_nation := 0 ;
72921: LD_ADDR_OWVAR 21
72925: PUSH
72926: LD_INT 0
72928: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72929: LD_ADDR_OWVAR 37
72933: PUSH
72934: LD_INT 31
72936: ST_TO_ADDR
// vc_control := control_rider ;
72937: LD_ADDR_OWVAR 38
72941: PUSH
72942: LD_INT 4
72944: ST_TO_ADDR
// end ;
72945: LD_VAR 0 1
72949: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72950: LD_INT 0
72952: PPUSH
72953: PPUSH
72954: PPUSH
// uc_side = 0 ;
72955: LD_ADDR_OWVAR 20
72959: PUSH
72960: LD_INT 0
72962: ST_TO_ADDR
// uc_nation = 0 ;
72963: LD_ADDR_OWVAR 21
72967: PUSH
72968: LD_INT 0
72970: ST_TO_ADDR
// InitHc_All ( ) ;
72971: CALL_OW 584
// InitVc ;
72975: CALL_OW 20
// if mastodonts then
72979: LD_VAR 0 6
72983: IFFALSE 73050
// for i = 1 to mastodonts do
72985: LD_ADDR_VAR 0 11
72989: PUSH
72990: DOUBLE
72991: LD_INT 1
72993: DEC
72994: ST_TO_ADDR
72995: LD_VAR 0 6
72999: PUSH
73000: FOR_TO
73001: IFFALSE 73048
// begin vc_chassis := 31 ;
73003: LD_ADDR_OWVAR 37
73007: PUSH
73008: LD_INT 31
73010: ST_TO_ADDR
// vc_control := control_rider ;
73011: LD_ADDR_OWVAR 38
73015: PUSH
73016: LD_INT 4
73018: ST_TO_ADDR
// animal := CreateVehicle ;
73019: LD_ADDR_VAR 0 12
73023: PUSH
73024: CALL_OW 45
73028: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73029: LD_VAR 0 12
73033: PPUSH
73034: LD_VAR 0 8
73038: PPUSH
73039: LD_INT 0
73041: PPUSH
73042: CALL 75185 0 3
// end ;
73046: GO 73000
73048: POP
73049: POP
// if horses then
73050: LD_VAR 0 5
73054: IFFALSE 73121
// for i = 1 to horses do
73056: LD_ADDR_VAR 0 11
73060: PUSH
73061: DOUBLE
73062: LD_INT 1
73064: DEC
73065: ST_TO_ADDR
73066: LD_VAR 0 5
73070: PUSH
73071: FOR_TO
73072: IFFALSE 73119
// begin hc_class := 21 ;
73074: LD_ADDR_OWVAR 28
73078: PUSH
73079: LD_INT 21
73081: ST_TO_ADDR
// hc_gallery :=  ;
73082: LD_ADDR_OWVAR 33
73086: PUSH
73087: LD_STRING 
73089: ST_TO_ADDR
// animal := CreateHuman ;
73090: LD_ADDR_VAR 0 12
73094: PUSH
73095: CALL_OW 44
73099: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73100: LD_VAR 0 12
73104: PPUSH
73105: LD_VAR 0 8
73109: PPUSH
73110: LD_INT 0
73112: PPUSH
73113: CALL 75185 0 3
// end ;
73117: GO 73071
73119: POP
73120: POP
// if birds then
73121: LD_VAR 0 1
73125: IFFALSE 73192
// for i = 1 to birds do
73127: LD_ADDR_VAR 0 11
73131: PUSH
73132: DOUBLE
73133: LD_INT 1
73135: DEC
73136: ST_TO_ADDR
73137: LD_VAR 0 1
73141: PUSH
73142: FOR_TO
73143: IFFALSE 73190
// begin hc_class = 18 ;
73145: LD_ADDR_OWVAR 28
73149: PUSH
73150: LD_INT 18
73152: ST_TO_ADDR
// hc_gallery =  ;
73153: LD_ADDR_OWVAR 33
73157: PUSH
73158: LD_STRING 
73160: ST_TO_ADDR
// animal := CreateHuman ;
73161: LD_ADDR_VAR 0 12
73165: PUSH
73166: CALL_OW 44
73170: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73171: LD_VAR 0 12
73175: PPUSH
73176: LD_VAR 0 8
73180: PPUSH
73181: LD_INT 0
73183: PPUSH
73184: CALL 75185 0 3
// end ;
73188: GO 73142
73190: POP
73191: POP
// if tigers then
73192: LD_VAR 0 2
73196: IFFALSE 73280
// for i = 1 to tigers do
73198: LD_ADDR_VAR 0 11
73202: PUSH
73203: DOUBLE
73204: LD_INT 1
73206: DEC
73207: ST_TO_ADDR
73208: LD_VAR 0 2
73212: PUSH
73213: FOR_TO
73214: IFFALSE 73278
// begin hc_class = class_tiger ;
73216: LD_ADDR_OWVAR 28
73220: PUSH
73221: LD_INT 14
73223: ST_TO_ADDR
// hc_gallery =  ;
73224: LD_ADDR_OWVAR 33
73228: PUSH
73229: LD_STRING 
73231: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73232: LD_ADDR_OWVAR 35
73236: PUSH
73237: LD_INT 7
73239: NEG
73240: PPUSH
73241: LD_INT 7
73243: PPUSH
73244: CALL_OW 12
73248: ST_TO_ADDR
// animal := CreateHuman ;
73249: LD_ADDR_VAR 0 12
73253: PUSH
73254: CALL_OW 44
73258: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73259: LD_VAR 0 12
73263: PPUSH
73264: LD_VAR 0 8
73268: PPUSH
73269: LD_INT 0
73271: PPUSH
73272: CALL 75185 0 3
// end ;
73276: GO 73213
73278: POP
73279: POP
// if apemans then
73280: LD_VAR 0 3
73284: IFFALSE 73407
// for i = 1 to apemans do
73286: LD_ADDR_VAR 0 11
73290: PUSH
73291: DOUBLE
73292: LD_INT 1
73294: DEC
73295: ST_TO_ADDR
73296: LD_VAR 0 3
73300: PUSH
73301: FOR_TO
73302: IFFALSE 73405
// begin hc_class = class_apeman ;
73304: LD_ADDR_OWVAR 28
73308: PUSH
73309: LD_INT 12
73311: ST_TO_ADDR
// hc_gallery =  ;
73312: LD_ADDR_OWVAR 33
73316: PUSH
73317: LD_STRING 
73319: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73320: LD_ADDR_OWVAR 35
73324: PUSH
73325: LD_INT 2
73327: NEG
73328: PPUSH
73329: LD_INT 2
73331: PPUSH
73332: CALL_OW 12
73336: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73337: LD_ADDR_OWVAR 31
73341: PUSH
73342: LD_INT 1
73344: PPUSH
73345: LD_INT 3
73347: PPUSH
73348: CALL_OW 12
73352: PUSH
73353: LD_INT 1
73355: PPUSH
73356: LD_INT 3
73358: PPUSH
73359: CALL_OW 12
73363: PUSH
73364: LD_INT 0
73366: PUSH
73367: LD_INT 0
73369: PUSH
73370: EMPTY
73371: LIST
73372: LIST
73373: LIST
73374: LIST
73375: ST_TO_ADDR
// animal := CreateHuman ;
73376: LD_ADDR_VAR 0 12
73380: PUSH
73381: CALL_OW 44
73385: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73386: LD_VAR 0 12
73390: PPUSH
73391: LD_VAR 0 8
73395: PPUSH
73396: LD_INT 0
73398: PPUSH
73399: CALL 75185 0 3
// end ;
73403: GO 73301
73405: POP
73406: POP
// if enchidnas then
73407: LD_VAR 0 4
73411: IFFALSE 73478
// for i = 1 to enchidnas do
73413: LD_ADDR_VAR 0 11
73417: PUSH
73418: DOUBLE
73419: LD_INT 1
73421: DEC
73422: ST_TO_ADDR
73423: LD_VAR 0 4
73427: PUSH
73428: FOR_TO
73429: IFFALSE 73476
// begin hc_class = 13 ;
73431: LD_ADDR_OWVAR 28
73435: PUSH
73436: LD_INT 13
73438: ST_TO_ADDR
// hc_gallery =  ;
73439: LD_ADDR_OWVAR 33
73443: PUSH
73444: LD_STRING 
73446: ST_TO_ADDR
// animal := CreateHuman ;
73447: LD_ADDR_VAR 0 12
73451: PUSH
73452: CALL_OW 44
73456: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73457: LD_VAR 0 12
73461: PPUSH
73462: LD_VAR 0 8
73466: PPUSH
73467: LD_INT 0
73469: PPUSH
73470: CALL 75185 0 3
// end ;
73474: GO 73428
73476: POP
73477: POP
// if fishes then
73478: LD_VAR 0 7
73482: IFFALSE 73549
// for i = 1 to fishes do
73484: LD_ADDR_VAR 0 11
73488: PUSH
73489: DOUBLE
73490: LD_INT 1
73492: DEC
73493: ST_TO_ADDR
73494: LD_VAR 0 7
73498: PUSH
73499: FOR_TO
73500: IFFALSE 73547
// begin hc_class = 20 ;
73502: LD_ADDR_OWVAR 28
73506: PUSH
73507: LD_INT 20
73509: ST_TO_ADDR
// hc_gallery =  ;
73510: LD_ADDR_OWVAR 33
73514: PUSH
73515: LD_STRING 
73517: ST_TO_ADDR
// animal := CreateHuman ;
73518: LD_ADDR_VAR 0 12
73522: PUSH
73523: CALL_OW 44
73527: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73528: LD_VAR 0 12
73532: PPUSH
73533: LD_VAR 0 9
73537: PPUSH
73538: LD_INT 0
73540: PPUSH
73541: CALL 75185 0 3
// end ;
73545: GO 73499
73547: POP
73548: POP
// end ;
73549: LD_VAR 0 10
73553: RET
// export function WantHeal ( sci , unit ) ; begin
73554: LD_INT 0
73556: PPUSH
// if GetTaskList ( sci ) > 0 then
73557: LD_VAR 0 1
73561: PPUSH
73562: CALL_OW 437
73566: PUSH
73567: LD_INT 0
73569: GREATER
73570: IFFALSE 73640
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73572: LD_VAR 0 1
73576: PPUSH
73577: CALL_OW 437
73581: PUSH
73582: LD_INT 1
73584: ARRAY
73585: PUSH
73586: LD_INT 1
73588: ARRAY
73589: PUSH
73590: LD_STRING l
73592: EQUAL
73593: PUSH
73594: LD_VAR 0 1
73598: PPUSH
73599: CALL_OW 437
73603: PUSH
73604: LD_INT 1
73606: ARRAY
73607: PUSH
73608: LD_INT 4
73610: ARRAY
73611: PUSH
73612: LD_VAR 0 2
73616: EQUAL
73617: AND
73618: IFFALSE 73630
// result := true else
73620: LD_ADDR_VAR 0 3
73624: PUSH
73625: LD_INT 1
73627: ST_TO_ADDR
73628: GO 73638
// result := false ;
73630: LD_ADDR_VAR 0 3
73634: PUSH
73635: LD_INT 0
73637: ST_TO_ADDR
// end else
73638: GO 73648
// result := false ;
73640: LD_ADDR_VAR 0 3
73644: PUSH
73645: LD_INT 0
73647: ST_TO_ADDR
// end ;
73648: LD_VAR 0 3
73652: RET
// export function HealTarget ( sci ) ; begin
73653: LD_INT 0
73655: PPUSH
// if not sci then
73656: LD_VAR 0 1
73660: NOT
73661: IFFALSE 73665
// exit ;
73663: GO 73730
// result := 0 ;
73665: LD_ADDR_VAR 0 2
73669: PUSH
73670: LD_INT 0
73672: ST_TO_ADDR
// if GetTaskList ( sci ) then
73673: LD_VAR 0 1
73677: PPUSH
73678: CALL_OW 437
73682: IFFALSE 73730
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73684: LD_VAR 0 1
73688: PPUSH
73689: CALL_OW 437
73693: PUSH
73694: LD_INT 1
73696: ARRAY
73697: PUSH
73698: LD_INT 1
73700: ARRAY
73701: PUSH
73702: LD_STRING l
73704: EQUAL
73705: IFFALSE 73730
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73707: LD_ADDR_VAR 0 2
73711: PUSH
73712: LD_VAR 0 1
73716: PPUSH
73717: CALL_OW 437
73721: PUSH
73722: LD_INT 1
73724: ARRAY
73725: PUSH
73726: LD_INT 4
73728: ARRAY
73729: ST_TO_ADDR
// end ;
73730: LD_VAR 0 2
73734: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73735: LD_INT 0
73737: PPUSH
73738: PPUSH
73739: PPUSH
73740: PPUSH
// if not base_units then
73741: LD_VAR 0 1
73745: NOT
73746: IFFALSE 73750
// exit ;
73748: GO 73837
// result := false ;
73750: LD_ADDR_VAR 0 2
73754: PUSH
73755: LD_INT 0
73757: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73758: LD_ADDR_VAR 0 5
73762: PUSH
73763: LD_VAR 0 1
73767: PPUSH
73768: LD_INT 21
73770: PUSH
73771: LD_INT 3
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: PPUSH
73778: CALL_OW 72
73782: ST_TO_ADDR
// if not tmp then
73783: LD_VAR 0 5
73787: NOT
73788: IFFALSE 73792
// exit ;
73790: GO 73837
// for i in tmp do
73792: LD_ADDR_VAR 0 3
73796: PUSH
73797: LD_VAR 0 5
73801: PUSH
73802: FOR_IN
73803: IFFALSE 73835
// begin result := EnemyInRange ( i , 22 ) ;
73805: LD_ADDR_VAR 0 2
73809: PUSH
73810: LD_VAR 0 3
73814: PPUSH
73815: LD_INT 22
73817: PPUSH
73818: CALL 71506 0 2
73822: ST_TO_ADDR
// if result then
73823: LD_VAR 0 2
73827: IFFALSE 73833
// exit ;
73829: POP
73830: POP
73831: GO 73837
// end ;
73833: GO 73802
73835: POP
73836: POP
// end ;
73837: LD_VAR 0 2
73841: RET
// export function FilterByTag ( units , tag ) ; begin
73842: LD_INT 0
73844: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73845: LD_ADDR_VAR 0 3
73849: PUSH
73850: LD_VAR 0 1
73854: PPUSH
73855: LD_INT 120
73857: PUSH
73858: LD_VAR 0 2
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: PPUSH
73867: CALL_OW 72
73871: ST_TO_ADDR
// end ;
73872: LD_VAR 0 3
73876: RET
// export function IsDriver ( un ) ; begin
73877: LD_INT 0
73879: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73880: LD_ADDR_VAR 0 2
73884: PUSH
73885: LD_VAR 0 1
73889: PUSH
73890: LD_INT 55
73892: PUSH
73893: EMPTY
73894: LIST
73895: PPUSH
73896: CALL_OW 69
73900: IN
73901: ST_TO_ADDR
// end ;
73902: LD_VAR 0 2
73906: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73907: LD_INT 0
73909: PPUSH
73910: PPUSH
// list := [ ] ;
73911: LD_ADDR_VAR 0 5
73915: PUSH
73916: EMPTY
73917: ST_TO_ADDR
// case d of 0 :
73918: LD_VAR 0 3
73922: PUSH
73923: LD_INT 0
73925: DOUBLE
73926: EQUAL
73927: IFTRUE 73931
73929: GO 74064
73931: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73932: LD_ADDR_VAR 0 5
73936: PUSH
73937: LD_VAR 0 1
73941: PUSH
73942: LD_INT 4
73944: MINUS
73945: PUSH
73946: LD_VAR 0 2
73950: PUSH
73951: LD_INT 4
73953: MINUS
73954: PUSH
73955: LD_INT 2
73957: PUSH
73958: EMPTY
73959: LIST
73960: LIST
73961: LIST
73962: PUSH
73963: LD_VAR 0 1
73967: PUSH
73968: LD_INT 3
73970: MINUS
73971: PUSH
73972: LD_VAR 0 2
73976: PUSH
73977: LD_INT 1
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: LIST
73984: PUSH
73985: LD_VAR 0 1
73989: PUSH
73990: LD_INT 4
73992: PLUS
73993: PUSH
73994: LD_VAR 0 2
73998: PUSH
73999: LD_INT 4
74001: PUSH
74002: EMPTY
74003: LIST
74004: LIST
74005: LIST
74006: PUSH
74007: LD_VAR 0 1
74011: PUSH
74012: LD_INT 3
74014: PLUS
74015: PUSH
74016: LD_VAR 0 2
74020: PUSH
74021: LD_INT 3
74023: PLUS
74024: PUSH
74025: LD_INT 5
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: LIST
74032: PUSH
74033: LD_VAR 0 1
74037: PUSH
74038: LD_VAR 0 2
74042: PUSH
74043: LD_INT 4
74045: PLUS
74046: PUSH
74047: LD_INT 0
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: LIST
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: LIST
74059: LIST
74060: LIST
74061: ST_TO_ADDR
// end ; 1 :
74062: GO 74762
74064: LD_INT 1
74066: DOUBLE
74067: EQUAL
74068: IFTRUE 74072
74070: GO 74205
74072: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74073: LD_ADDR_VAR 0 5
74077: PUSH
74078: LD_VAR 0 1
74082: PUSH
74083: LD_VAR 0 2
74087: PUSH
74088: LD_INT 4
74090: MINUS
74091: PUSH
74092: LD_INT 3
74094: PUSH
74095: EMPTY
74096: LIST
74097: LIST
74098: LIST
74099: PUSH
74100: LD_VAR 0 1
74104: PUSH
74105: LD_INT 3
74107: MINUS
74108: PUSH
74109: LD_VAR 0 2
74113: PUSH
74114: LD_INT 3
74116: MINUS
74117: PUSH
74118: LD_INT 2
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: LIST
74125: PUSH
74126: LD_VAR 0 1
74130: PUSH
74131: LD_INT 4
74133: MINUS
74134: PUSH
74135: LD_VAR 0 2
74139: PUSH
74140: LD_INT 1
74142: PUSH
74143: EMPTY
74144: LIST
74145: LIST
74146: LIST
74147: PUSH
74148: LD_VAR 0 1
74152: PUSH
74153: LD_VAR 0 2
74157: PUSH
74158: LD_INT 3
74160: PLUS
74161: PUSH
74162: LD_INT 0
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: LIST
74169: PUSH
74170: LD_VAR 0 1
74174: PUSH
74175: LD_INT 4
74177: PLUS
74178: PUSH
74179: LD_VAR 0 2
74183: PUSH
74184: LD_INT 4
74186: PLUS
74187: PUSH
74188: LD_INT 5
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: LIST
74195: PUSH
74196: EMPTY
74197: LIST
74198: LIST
74199: LIST
74200: LIST
74201: LIST
74202: ST_TO_ADDR
// end ; 2 :
74203: GO 74762
74205: LD_INT 2
74207: DOUBLE
74208: EQUAL
74209: IFTRUE 74213
74211: GO 74342
74213: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74214: LD_ADDR_VAR 0 5
74218: PUSH
74219: LD_VAR 0 1
74223: PUSH
74224: LD_VAR 0 2
74228: PUSH
74229: LD_INT 3
74231: MINUS
74232: PUSH
74233: LD_INT 3
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: LIST
74240: PUSH
74241: LD_VAR 0 1
74245: PUSH
74246: LD_INT 4
74248: PLUS
74249: PUSH
74250: LD_VAR 0 2
74254: PUSH
74255: LD_INT 4
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: LIST
74262: PUSH
74263: LD_VAR 0 1
74267: PUSH
74268: LD_VAR 0 2
74272: PUSH
74273: LD_INT 4
74275: PLUS
74276: PUSH
74277: LD_INT 0
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: LIST
74284: PUSH
74285: LD_VAR 0 1
74289: PUSH
74290: LD_INT 3
74292: MINUS
74293: PUSH
74294: LD_VAR 0 2
74298: PUSH
74299: LD_INT 1
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: LIST
74306: PUSH
74307: LD_VAR 0 1
74311: PUSH
74312: LD_INT 4
74314: MINUS
74315: PUSH
74316: LD_VAR 0 2
74320: PUSH
74321: LD_INT 4
74323: MINUS
74324: PUSH
74325: LD_INT 2
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: LIST
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: ST_TO_ADDR
// end ; 3 :
74340: GO 74762
74342: LD_INT 3
74344: DOUBLE
74345: EQUAL
74346: IFTRUE 74350
74348: GO 74483
74350: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74351: LD_ADDR_VAR 0 5
74355: PUSH
74356: LD_VAR 0 1
74360: PUSH
74361: LD_INT 3
74363: PLUS
74364: PUSH
74365: LD_VAR 0 2
74369: PUSH
74370: LD_INT 4
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: LIST
74377: PUSH
74378: LD_VAR 0 1
74382: PUSH
74383: LD_INT 4
74385: PLUS
74386: PUSH
74387: LD_VAR 0 2
74391: PUSH
74392: LD_INT 4
74394: PLUS
74395: PUSH
74396: LD_INT 5
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: LIST
74403: PUSH
74404: LD_VAR 0 1
74408: PUSH
74409: LD_INT 4
74411: MINUS
74412: PUSH
74413: LD_VAR 0 2
74417: PUSH
74418: LD_INT 1
74420: PUSH
74421: EMPTY
74422: LIST
74423: LIST
74424: LIST
74425: PUSH
74426: LD_VAR 0 1
74430: PUSH
74431: LD_VAR 0 2
74435: PUSH
74436: LD_INT 4
74438: MINUS
74439: PUSH
74440: LD_INT 3
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: LIST
74447: PUSH
74448: LD_VAR 0 1
74452: PUSH
74453: LD_INT 3
74455: MINUS
74456: PUSH
74457: LD_VAR 0 2
74461: PUSH
74462: LD_INT 3
74464: MINUS
74465: PUSH
74466: LD_INT 2
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: LIST
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: LIST
74478: LIST
74479: LIST
74480: ST_TO_ADDR
// end ; 4 :
74481: GO 74762
74483: LD_INT 4
74485: DOUBLE
74486: EQUAL
74487: IFTRUE 74491
74489: GO 74624
74491: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74492: LD_ADDR_VAR 0 5
74496: PUSH
74497: LD_VAR 0 1
74501: PUSH
74502: LD_VAR 0 2
74506: PUSH
74507: LD_INT 4
74509: PLUS
74510: PUSH
74511: LD_INT 0
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: LIST
74518: PUSH
74519: LD_VAR 0 1
74523: PUSH
74524: LD_INT 3
74526: PLUS
74527: PUSH
74528: LD_VAR 0 2
74532: PUSH
74533: LD_INT 3
74535: PLUS
74536: PUSH
74537: LD_INT 5
74539: PUSH
74540: EMPTY
74541: LIST
74542: LIST
74543: LIST
74544: PUSH
74545: LD_VAR 0 1
74549: PUSH
74550: LD_INT 4
74552: PLUS
74553: PUSH
74554: LD_VAR 0 2
74558: PUSH
74559: LD_INT 4
74561: PUSH
74562: EMPTY
74563: LIST
74564: LIST
74565: LIST
74566: PUSH
74567: LD_VAR 0 1
74571: PUSH
74572: LD_VAR 0 2
74576: PUSH
74577: LD_INT 3
74579: MINUS
74580: PUSH
74581: LD_INT 3
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: LIST
74588: PUSH
74589: LD_VAR 0 1
74593: PUSH
74594: LD_INT 4
74596: MINUS
74597: PUSH
74598: LD_VAR 0 2
74602: PUSH
74603: LD_INT 4
74605: MINUS
74606: PUSH
74607: LD_INT 2
74609: PUSH
74610: EMPTY
74611: LIST
74612: LIST
74613: LIST
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: LIST
74619: LIST
74620: LIST
74621: ST_TO_ADDR
// end ; 5 :
74622: GO 74762
74624: LD_INT 5
74626: DOUBLE
74627: EQUAL
74628: IFTRUE 74632
74630: GO 74761
74632: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74633: LD_ADDR_VAR 0 5
74637: PUSH
74638: LD_VAR 0 1
74642: PUSH
74643: LD_INT 4
74645: MINUS
74646: PUSH
74647: LD_VAR 0 2
74651: PUSH
74652: LD_INT 1
74654: PUSH
74655: EMPTY
74656: LIST
74657: LIST
74658: LIST
74659: PUSH
74660: LD_VAR 0 1
74664: PUSH
74665: LD_VAR 0 2
74669: PUSH
74670: LD_INT 4
74672: MINUS
74673: PUSH
74674: LD_INT 3
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: LIST
74681: PUSH
74682: LD_VAR 0 1
74686: PUSH
74687: LD_INT 4
74689: PLUS
74690: PUSH
74691: LD_VAR 0 2
74695: PUSH
74696: LD_INT 4
74698: PLUS
74699: PUSH
74700: LD_INT 5
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: LIST
74707: PUSH
74708: LD_VAR 0 1
74712: PUSH
74713: LD_INT 3
74715: PLUS
74716: PUSH
74717: LD_VAR 0 2
74721: PUSH
74722: LD_INT 4
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: LIST
74729: PUSH
74730: LD_VAR 0 1
74734: PUSH
74735: LD_VAR 0 2
74739: PUSH
74740: LD_INT 3
74742: PLUS
74743: PUSH
74744: LD_INT 0
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: LIST
74751: PUSH
74752: EMPTY
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: ST_TO_ADDR
// end ; end ;
74759: GO 74762
74761: POP
// result := list ;
74762: LD_ADDR_VAR 0 4
74766: PUSH
74767: LD_VAR 0 5
74771: ST_TO_ADDR
// end ;
74772: LD_VAR 0 4
74776: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74777: LD_INT 0
74779: PPUSH
74780: PPUSH
74781: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74782: LD_VAR 0 1
74786: NOT
74787: PUSH
74788: LD_VAR 0 2
74792: PUSH
74793: LD_INT 1
74795: PUSH
74796: LD_INT 2
74798: PUSH
74799: LD_INT 3
74801: PUSH
74802: LD_INT 4
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: IN
74811: NOT
74812: OR
74813: IFFALSE 74817
// exit ;
74815: GO 74909
// tmp := [ ] ;
74817: LD_ADDR_VAR 0 5
74821: PUSH
74822: EMPTY
74823: ST_TO_ADDR
// for i in units do
74824: LD_ADDR_VAR 0 4
74828: PUSH
74829: LD_VAR 0 1
74833: PUSH
74834: FOR_IN
74835: IFFALSE 74878
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74837: LD_ADDR_VAR 0 5
74841: PUSH
74842: LD_VAR 0 5
74846: PPUSH
74847: LD_VAR 0 5
74851: PUSH
74852: LD_INT 1
74854: PLUS
74855: PPUSH
74856: LD_VAR 0 4
74860: PPUSH
74861: LD_VAR 0 2
74865: PPUSH
74866: CALL_OW 259
74870: PPUSH
74871: CALL_OW 2
74875: ST_TO_ADDR
74876: GO 74834
74878: POP
74879: POP
// if not tmp then
74880: LD_VAR 0 5
74884: NOT
74885: IFFALSE 74889
// exit ;
74887: GO 74909
// result := SortListByListDesc ( units , tmp ) ;
74889: LD_ADDR_VAR 0 3
74893: PUSH
74894: LD_VAR 0 1
74898: PPUSH
74899: LD_VAR 0 5
74903: PPUSH
74904: CALL_OW 77
74908: ST_TO_ADDR
// end ;
74909: LD_VAR 0 3
74913: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74914: LD_INT 0
74916: PPUSH
74917: PPUSH
74918: PPUSH
// result := false ;
74919: LD_ADDR_VAR 0 3
74923: PUSH
74924: LD_INT 0
74926: ST_TO_ADDR
// x := GetX ( building ) ;
74927: LD_ADDR_VAR 0 4
74931: PUSH
74932: LD_VAR 0 2
74936: PPUSH
74937: CALL_OW 250
74941: ST_TO_ADDR
// y := GetY ( building ) ;
74942: LD_ADDR_VAR 0 5
74946: PUSH
74947: LD_VAR 0 2
74951: PPUSH
74952: CALL_OW 251
74956: ST_TO_ADDR
// if not building or not x or not y then
74957: LD_VAR 0 2
74961: NOT
74962: PUSH
74963: LD_VAR 0 4
74967: NOT
74968: OR
74969: PUSH
74970: LD_VAR 0 5
74974: NOT
74975: OR
74976: IFFALSE 74980
// exit ;
74978: GO 75072
// if GetTaskList ( unit ) then
74980: LD_VAR 0 1
74984: PPUSH
74985: CALL_OW 437
74989: IFFALSE 75072
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74991: LD_STRING e
74993: PUSH
74994: LD_VAR 0 1
74998: PPUSH
74999: CALL_OW 437
75003: PUSH
75004: LD_INT 1
75006: ARRAY
75007: PUSH
75008: LD_INT 1
75010: ARRAY
75011: EQUAL
75012: PUSH
75013: LD_VAR 0 4
75017: PUSH
75018: LD_VAR 0 1
75022: PPUSH
75023: CALL_OW 437
75027: PUSH
75028: LD_INT 1
75030: ARRAY
75031: PUSH
75032: LD_INT 2
75034: ARRAY
75035: EQUAL
75036: AND
75037: PUSH
75038: LD_VAR 0 5
75042: PUSH
75043: LD_VAR 0 1
75047: PPUSH
75048: CALL_OW 437
75052: PUSH
75053: LD_INT 1
75055: ARRAY
75056: PUSH
75057: LD_INT 3
75059: ARRAY
75060: EQUAL
75061: AND
75062: IFFALSE 75072
// result := true end ;
75064: LD_ADDR_VAR 0 3
75068: PUSH
75069: LD_INT 1
75071: ST_TO_ADDR
// end ;
75072: LD_VAR 0 3
75076: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75077: LD_INT 0
75079: PPUSH
// result := false ;
75080: LD_ADDR_VAR 0 4
75084: PUSH
75085: LD_INT 0
75087: ST_TO_ADDR
// if GetTaskList ( unit ) then
75088: LD_VAR 0 1
75092: PPUSH
75093: CALL_OW 437
75097: IFFALSE 75180
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75099: LD_STRING M
75101: PUSH
75102: LD_VAR 0 1
75106: PPUSH
75107: CALL_OW 437
75111: PUSH
75112: LD_INT 1
75114: ARRAY
75115: PUSH
75116: LD_INT 1
75118: ARRAY
75119: EQUAL
75120: PUSH
75121: LD_VAR 0 2
75125: PUSH
75126: LD_VAR 0 1
75130: PPUSH
75131: CALL_OW 437
75135: PUSH
75136: LD_INT 1
75138: ARRAY
75139: PUSH
75140: LD_INT 2
75142: ARRAY
75143: EQUAL
75144: AND
75145: PUSH
75146: LD_VAR 0 3
75150: PUSH
75151: LD_VAR 0 1
75155: PPUSH
75156: CALL_OW 437
75160: PUSH
75161: LD_INT 1
75163: ARRAY
75164: PUSH
75165: LD_INT 3
75167: ARRAY
75168: EQUAL
75169: AND
75170: IFFALSE 75180
// result := true ;
75172: LD_ADDR_VAR 0 4
75176: PUSH
75177: LD_INT 1
75179: ST_TO_ADDR
// end ; end ;
75180: LD_VAR 0 4
75184: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75185: LD_INT 0
75187: PPUSH
75188: PPUSH
75189: PPUSH
75190: PPUSH
// if not unit or not area then
75191: LD_VAR 0 1
75195: NOT
75196: PUSH
75197: LD_VAR 0 2
75201: NOT
75202: OR
75203: IFFALSE 75207
// exit ;
75205: GO 75371
// tmp := AreaToList ( area , i ) ;
75207: LD_ADDR_VAR 0 6
75211: PUSH
75212: LD_VAR 0 2
75216: PPUSH
75217: LD_VAR 0 5
75221: PPUSH
75222: CALL_OW 517
75226: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75227: LD_ADDR_VAR 0 5
75231: PUSH
75232: DOUBLE
75233: LD_INT 1
75235: DEC
75236: ST_TO_ADDR
75237: LD_VAR 0 6
75241: PUSH
75242: LD_INT 1
75244: ARRAY
75245: PUSH
75246: FOR_TO
75247: IFFALSE 75369
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75249: LD_ADDR_VAR 0 7
75253: PUSH
75254: LD_VAR 0 6
75258: PUSH
75259: LD_INT 1
75261: ARRAY
75262: PUSH
75263: LD_VAR 0 5
75267: ARRAY
75268: PUSH
75269: LD_VAR 0 6
75273: PUSH
75274: LD_INT 2
75276: ARRAY
75277: PUSH
75278: LD_VAR 0 5
75282: ARRAY
75283: PUSH
75284: EMPTY
75285: LIST
75286: LIST
75287: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75288: LD_VAR 0 7
75292: PUSH
75293: LD_INT 1
75295: ARRAY
75296: PPUSH
75297: LD_VAR 0 7
75301: PUSH
75302: LD_INT 2
75304: ARRAY
75305: PPUSH
75306: CALL_OW 428
75310: PUSH
75311: LD_INT 0
75313: EQUAL
75314: IFFALSE 75367
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75316: LD_VAR 0 1
75320: PPUSH
75321: LD_VAR 0 7
75325: PUSH
75326: LD_INT 1
75328: ARRAY
75329: PPUSH
75330: LD_VAR 0 7
75334: PUSH
75335: LD_INT 2
75337: ARRAY
75338: PPUSH
75339: LD_VAR 0 3
75343: PPUSH
75344: CALL_OW 48
// result := IsPlaced ( unit ) ;
75348: LD_ADDR_VAR 0 4
75352: PUSH
75353: LD_VAR 0 1
75357: PPUSH
75358: CALL_OW 305
75362: ST_TO_ADDR
// exit ;
75363: POP
75364: POP
75365: GO 75371
// end ; end ;
75367: GO 75246
75369: POP
75370: POP
// end ;
75371: LD_VAR 0 4
75375: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75376: LD_INT 0
75378: PPUSH
75379: PPUSH
75380: PPUSH
// if not side or side > 8 then
75381: LD_VAR 0 1
75385: NOT
75386: PUSH
75387: LD_VAR 0 1
75391: PUSH
75392: LD_INT 8
75394: GREATER
75395: OR
75396: IFFALSE 75400
// exit ;
75398: GO 75587
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75400: LD_ADDR_VAR 0 4
75404: PUSH
75405: LD_INT 22
75407: PUSH
75408: LD_VAR 0 1
75412: PUSH
75413: EMPTY
75414: LIST
75415: LIST
75416: PUSH
75417: LD_INT 21
75419: PUSH
75420: LD_INT 3
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: PPUSH
75431: CALL_OW 69
75435: ST_TO_ADDR
// if not tmp then
75436: LD_VAR 0 4
75440: NOT
75441: IFFALSE 75445
// exit ;
75443: GO 75587
// enable_addtolog := true ;
75445: LD_ADDR_OWVAR 81
75449: PUSH
75450: LD_INT 1
75452: ST_TO_ADDR
// AddToLog ( [ ) ;
75453: LD_STRING [
75455: PPUSH
75456: CALL_OW 561
// for i in tmp do
75460: LD_ADDR_VAR 0 3
75464: PUSH
75465: LD_VAR 0 4
75469: PUSH
75470: FOR_IN
75471: IFFALSE 75578
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75473: LD_STRING [
75475: PUSH
75476: LD_VAR 0 3
75480: PPUSH
75481: CALL_OW 266
75485: STR
75486: PUSH
75487: LD_STRING , 
75489: STR
75490: PUSH
75491: LD_VAR 0 3
75495: PPUSH
75496: CALL_OW 250
75500: STR
75501: PUSH
75502: LD_STRING , 
75504: STR
75505: PUSH
75506: LD_VAR 0 3
75510: PPUSH
75511: CALL_OW 251
75515: STR
75516: PUSH
75517: LD_STRING , 
75519: STR
75520: PUSH
75521: LD_VAR 0 3
75525: PPUSH
75526: CALL_OW 254
75530: STR
75531: PUSH
75532: LD_STRING , 
75534: STR
75535: PUSH
75536: LD_VAR 0 3
75540: PPUSH
75541: LD_INT 1
75543: PPUSH
75544: CALL_OW 268
75548: STR
75549: PUSH
75550: LD_STRING , 
75552: STR
75553: PUSH
75554: LD_VAR 0 3
75558: PPUSH
75559: LD_INT 2
75561: PPUSH
75562: CALL_OW 268
75566: STR
75567: PUSH
75568: LD_STRING ],
75570: STR
75571: PPUSH
75572: CALL_OW 561
// end ;
75576: GO 75470
75578: POP
75579: POP
// AddToLog ( ]; ) ;
75580: LD_STRING ];
75582: PPUSH
75583: CALL_OW 561
// end ;
75587: LD_VAR 0 2
75591: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75592: LD_INT 0
75594: PPUSH
75595: PPUSH
75596: PPUSH
75597: PPUSH
75598: PPUSH
// if not area or not rate or not max then
75599: LD_VAR 0 1
75603: NOT
75604: PUSH
75605: LD_VAR 0 2
75609: NOT
75610: OR
75611: PUSH
75612: LD_VAR 0 4
75616: NOT
75617: OR
75618: IFFALSE 75622
// exit ;
75620: GO 75811
// while 1 do
75622: LD_INT 1
75624: IFFALSE 75811
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75626: LD_ADDR_VAR 0 9
75630: PUSH
75631: LD_VAR 0 1
75635: PPUSH
75636: LD_INT 1
75638: PPUSH
75639: CALL_OW 287
75643: PUSH
75644: LD_INT 10
75646: MUL
75647: ST_TO_ADDR
// r := rate / 10 ;
75648: LD_ADDR_VAR 0 7
75652: PUSH
75653: LD_VAR 0 2
75657: PUSH
75658: LD_INT 10
75660: DIVREAL
75661: ST_TO_ADDR
// time := 1 1$00 ;
75662: LD_ADDR_VAR 0 8
75666: PUSH
75667: LD_INT 2100
75669: ST_TO_ADDR
// if amount < min then
75670: LD_VAR 0 9
75674: PUSH
75675: LD_VAR 0 3
75679: LESS
75680: IFFALSE 75698
// r := r * 2 else
75682: LD_ADDR_VAR 0 7
75686: PUSH
75687: LD_VAR 0 7
75691: PUSH
75692: LD_INT 2
75694: MUL
75695: ST_TO_ADDR
75696: GO 75724
// if amount > max then
75698: LD_VAR 0 9
75702: PUSH
75703: LD_VAR 0 4
75707: GREATER
75708: IFFALSE 75724
// r := r / 2 ;
75710: LD_ADDR_VAR 0 7
75714: PUSH
75715: LD_VAR 0 7
75719: PUSH
75720: LD_INT 2
75722: DIVREAL
75723: ST_TO_ADDR
// time := time / r ;
75724: LD_ADDR_VAR 0 8
75728: PUSH
75729: LD_VAR 0 8
75733: PUSH
75734: LD_VAR 0 7
75738: DIVREAL
75739: ST_TO_ADDR
// if time < 0 then
75740: LD_VAR 0 8
75744: PUSH
75745: LD_INT 0
75747: LESS
75748: IFFALSE 75765
// time := time * - 1 ;
75750: LD_ADDR_VAR 0 8
75754: PUSH
75755: LD_VAR 0 8
75759: PUSH
75760: LD_INT 1
75762: NEG
75763: MUL
75764: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75765: LD_VAR 0 8
75769: PUSH
75770: LD_INT 35
75772: PPUSH
75773: LD_INT 875
75775: PPUSH
75776: CALL_OW 12
75780: PLUS
75781: PPUSH
75782: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75786: LD_INT 1
75788: PPUSH
75789: LD_INT 5
75791: PPUSH
75792: CALL_OW 12
75796: PPUSH
75797: LD_VAR 0 1
75801: PPUSH
75802: LD_INT 1
75804: PPUSH
75805: CALL_OW 55
// end ;
75809: GO 75622
// end ;
75811: LD_VAR 0 5
75815: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75816: LD_INT 0
75818: PPUSH
75819: PPUSH
75820: PPUSH
75821: PPUSH
75822: PPUSH
75823: PPUSH
75824: PPUSH
75825: PPUSH
// if not turrets or not factories then
75826: LD_VAR 0 1
75830: NOT
75831: PUSH
75832: LD_VAR 0 2
75836: NOT
75837: OR
75838: IFFALSE 75842
// exit ;
75840: GO 76149
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75842: LD_ADDR_VAR 0 10
75846: PUSH
75847: LD_INT 5
75849: PUSH
75850: LD_INT 6
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: PUSH
75857: LD_INT 2
75859: PUSH
75860: LD_INT 4
75862: PUSH
75863: EMPTY
75864: LIST
75865: LIST
75866: PUSH
75867: LD_INT 3
75869: PUSH
75870: LD_INT 5
75872: PUSH
75873: EMPTY
75874: LIST
75875: LIST
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: LIST
75881: PUSH
75882: LD_INT 24
75884: PUSH
75885: LD_INT 25
75887: PUSH
75888: EMPTY
75889: LIST
75890: LIST
75891: PUSH
75892: LD_INT 23
75894: PUSH
75895: LD_INT 27
75897: PUSH
75898: EMPTY
75899: LIST
75900: LIST
75901: PUSH
75902: EMPTY
75903: LIST
75904: LIST
75905: PUSH
75906: LD_INT 42
75908: PUSH
75909: LD_INT 43
75911: PUSH
75912: EMPTY
75913: LIST
75914: LIST
75915: PUSH
75916: LD_INT 44
75918: PUSH
75919: LD_INT 46
75921: PUSH
75922: EMPTY
75923: LIST
75924: LIST
75925: PUSH
75926: LD_INT 45
75928: PUSH
75929: LD_INT 47
75931: PUSH
75932: EMPTY
75933: LIST
75934: LIST
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: LIST
75940: PUSH
75941: EMPTY
75942: LIST
75943: LIST
75944: LIST
75945: ST_TO_ADDR
// result := [ ] ;
75946: LD_ADDR_VAR 0 3
75950: PUSH
75951: EMPTY
75952: ST_TO_ADDR
// for i in turrets do
75953: LD_ADDR_VAR 0 4
75957: PUSH
75958: LD_VAR 0 1
75962: PUSH
75963: FOR_IN
75964: IFFALSE 76147
// begin nat := GetNation ( i ) ;
75966: LD_ADDR_VAR 0 7
75970: PUSH
75971: LD_VAR 0 4
75975: PPUSH
75976: CALL_OW 248
75980: ST_TO_ADDR
// weapon := 0 ;
75981: LD_ADDR_VAR 0 8
75985: PUSH
75986: LD_INT 0
75988: ST_TO_ADDR
// if not nat then
75989: LD_VAR 0 7
75993: NOT
75994: IFFALSE 75998
// continue ;
75996: GO 75963
// for j in list [ nat ] do
75998: LD_ADDR_VAR 0 5
76002: PUSH
76003: LD_VAR 0 10
76007: PUSH
76008: LD_VAR 0 7
76012: ARRAY
76013: PUSH
76014: FOR_IN
76015: IFFALSE 76056
// if GetBWeapon ( i ) = j [ 1 ] then
76017: LD_VAR 0 4
76021: PPUSH
76022: CALL_OW 269
76026: PUSH
76027: LD_VAR 0 5
76031: PUSH
76032: LD_INT 1
76034: ARRAY
76035: EQUAL
76036: IFFALSE 76054
// begin weapon := j [ 2 ] ;
76038: LD_ADDR_VAR 0 8
76042: PUSH
76043: LD_VAR 0 5
76047: PUSH
76048: LD_INT 2
76050: ARRAY
76051: ST_TO_ADDR
// break ;
76052: GO 76056
// end ;
76054: GO 76014
76056: POP
76057: POP
// if not weapon then
76058: LD_VAR 0 8
76062: NOT
76063: IFFALSE 76067
// continue ;
76065: GO 75963
// for k in factories do
76067: LD_ADDR_VAR 0 6
76071: PUSH
76072: LD_VAR 0 2
76076: PUSH
76077: FOR_IN
76078: IFFALSE 76143
// begin weapons := AvailableWeaponList ( k ) ;
76080: LD_ADDR_VAR 0 9
76084: PUSH
76085: LD_VAR 0 6
76089: PPUSH
76090: CALL_OW 478
76094: ST_TO_ADDR
// if not weapons then
76095: LD_VAR 0 9
76099: NOT
76100: IFFALSE 76104
// continue ;
76102: GO 76077
// if weapon in weapons then
76104: LD_VAR 0 8
76108: PUSH
76109: LD_VAR 0 9
76113: IN
76114: IFFALSE 76141
// begin result := [ i , weapon ] ;
76116: LD_ADDR_VAR 0 3
76120: PUSH
76121: LD_VAR 0 4
76125: PUSH
76126: LD_VAR 0 8
76130: PUSH
76131: EMPTY
76132: LIST
76133: LIST
76134: ST_TO_ADDR
// exit ;
76135: POP
76136: POP
76137: POP
76138: POP
76139: GO 76149
// end ; end ;
76141: GO 76077
76143: POP
76144: POP
// end ;
76145: GO 75963
76147: POP
76148: POP
// end ;
76149: LD_VAR 0 3
76153: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76154: LD_INT 0
76156: PPUSH
// if not side or side > 8 then
76157: LD_VAR 0 3
76161: NOT
76162: PUSH
76163: LD_VAR 0 3
76167: PUSH
76168: LD_INT 8
76170: GREATER
76171: OR
76172: IFFALSE 76176
// exit ;
76174: GO 76235
// if not range then
76176: LD_VAR 0 4
76180: NOT
76181: IFFALSE 76192
// range := - 12 ;
76183: LD_ADDR_VAR 0 4
76187: PUSH
76188: LD_INT 12
76190: NEG
76191: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76192: LD_VAR 0 1
76196: PPUSH
76197: LD_VAR 0 2
76201: PPUSH
76202: LD_VAR 0 3
76206: PPUSH
76207: LD_VAR 0 4
76211: PPUSH
76212: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76216: LD_VAR 0 1
76220: PPUSH
76221: LD_VAR 0 2
76225: PPUSH
76226: LD_VAR 0 3
76230: PPUSH
76231: CALL_OW 331
// end ;
76235: LD_VAR 0 5
76239: RET
// export function Video ( mode ) ; begin
76240: LD_INT 0
76242: PPUSH
// ingame_video = mode ;
76243: LD_ADDR_OWVAR 52
76247: PUSH
76248: LD_VAR 0 1
76252: ST_TO_ADDR
// interface_hidden = mode ;
76253: LD_ADDR_OWVAR 54
76257: PUSH
76258: LD_VAR 0 1
76262: ST_TO_ADDR
// end ;
76263: LD_VAR 0 2
76267: RET
// export function Join ( array , element ) ; begin
76268: LD_INT 0
76270: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76271: LD_ADDR_VAR 0 3
76275: PUSH
76276: LD_VAR 0 1
76280: PPUSH
76281: LD_VAR 0 1
76285: PUSH
76286: LD_INT 1
76288: PLUS
76289: PPUSH
76290: LD_VAR 0 2
76294: PPUSH
76295: CALL_OW 1
76299: ST_TO_ADDR
// end ;
76300: LD_VAR 0 3
76304: RET
// export function JoinUnion ( array , element ) ; begin
76305: LD_INT 0
76307: PPUSH
// result := array union element ;
76308: LD_ADDR_VAR 0 3
76312: PUSH
76313: LD_VAR 0 1
76317: PUSH
76318: LD_VAR 0 2
76322: UNION
76323: ST_TO_ADDR
// end ;
76324: LD_VAR 0 3
76328: RET
// export function GetBehemoths ( side ) ; begin
76329: LD_INT 0
76331: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76332: LD_ADDR_VAR 0 2
76336: PUSH
76337: LD_INT 22
76339: PUSH
76340: LD_VAR 0 1
76344: PUSH
76345: EMPTY
76346: LIST
76347: LIST
76348: PUSH
76349: LD_INT 31
76351: PUSH
76352: LD_INT 25
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: PPUSH
76363: CALL_OW 69
76367: ST_TO_ADDR
// end ;
76368: LD_VAR 0 2
76372: RET
// export function Shuffle ( array ) ; var i , index ; begin
76373: LD_INT 0
76375: PPUSH
76376: PPUSH
76377: PPUSH
// result := [ ] ;
76378: LD_ADDR_VAR 0 2
76382: PUSH
76383: EMPTY
76384: ST_TO_ADDR
// if not array then
76385: LD_VAR 0 1
76389: NOT
76390: IFFALSE 76394
// exit ;
76392: GO 76493
// Randomize ;
76394: CALL_OW 10
// for i = array downto 1 do
76398: LD_ADDR_VAR 0 3
76402: PUSH
76403: DOUBLE
76404: LD_VAR 0 1
76408: INC
76409: ST_TO_ADDR
76410: LD_INT 1
76412: PUSH
76413: FOR_DOWNTO
76414: IFFALSE 76491
// begin index := rand ( 1 , array ) ;
76416: LD_ADDR_VAR 0 4
76420: PUSH
76421: LD_INT 1
76423: PPUSH
76424: LD_VAR 0 1
76428: PPUSH
76429: CALL_OW 12
76433: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76434: LD_ADDR_VAR 0 2
76438: PUSH
76439: LD_VAR 0 2
76443: PPUSH
76444: LD_VAR 0 2
76448: PUSH
76449: LD_INT 1
76451: PLUS
76452: PPUSH
76453: LD_VAR 0 1
76457: PUSH
76458: LD_VAR 0 4
76462: ARRAY
76463: PPUSH
76464: CALL_OW 2
76468: ST_TO_ADDR
// array := Delete ( array , index ) ;
76469: LD_ADDR_VAR 0 1
76473: PUSH
76474: LD_VAR 0 1
76478: PPUSH
76479: LD_VAR 0 4
76483: PPUSH
76484: CALL_OW 3
76488: ST_TO_ADDR
// end ;
76489: GO 76413
76491: POP
76492: POP
// end ;
76493: LD_VAR 0 2
76497: RET
// export function GetBaseMaterials ( base ) ; begin
76498: LD_INT 0
76500: PPUSH
// result := [ 0 , 0 , 0 ] ;
76501: LD_ADDR_VAR 0 2
76505: PUSH
76506: LD_INT 0
76508: PUSH
76509: LD_INT 0
76511: PUSH
76512: LD_INT 0
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: LIST
76519: ST_TO_ADDR
// if not base then
76520: LD_VAR 0 1
76524: NOT
76525: IFFALSE 76529
// exit ;
76527: GO 76578
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76529: LD_ADDR_VAR 0 2
76533: PUSH
76534: LD_VAR 0 1
76538: PPUSH
76539: LD_INT 1
76541: PPUSH
76542: CALL_OW 275
76546: PUSH
76547: LD_VAR 0 1
76551: PPUSH
76552: LD_INT 2
76554: PPUSH
76555: CALL_OW 275
76559: PUSH
76560: LD_VAR 0 1
76564: PPUSH
76565: LD_INT 3
76567: PPUSH
76568: CALL_OW 275
76572: PUSH
76573: EMPTY
76574: LIST
76575: LIST
76576: LIST
76577: ST_TO_ADDR
// end ;
76578: LD_VAR 0 2
76582: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76583: LD_INT 0
76585: PPUSH
76586: PPUSH
// result := array ;
76587: LD_ADDR_VAR 0 3
76591: PUSH
76592: LD_VAR 0 1
76596: ST_TO_ADDR
// if size >= result then
76597: LD_VAR 0 2
76601: PUSH
76602: LD_VAR 0 3
76606: GREATEREQUAL
76607: IFFALSE 76611
// exit ;
76609: GO 76661
// if size then
76611: LD_VAR 0 2
76615: IFFALSE 76661
// for i := array downto size do
76617: LD_ADDR_VAR 0 4
76621: PUSH
76622: DOUBLE
76623: LD_VAR 0 1
76627: INC
76628: ST_TO_ADDR
76629: LD_VAR 0 2
76633: PUSH
76634: FOR_DOWNTO
76635: IFFALSE 76659
// result := Delete ( result , result ) ;
76637: LD_ADDR_VAR 0 3
76641: PUSH
76642: LD_VAR 0 3
76646: PPUSH
76647: LD_VAR 0 3
76651: PPUSH
76652: CALL_OW 3
76656: ST_TO_ADDR
76657: GO 76634
76659: POP
76660: POP
// end ;
76661: LD_VAR 0 3
76665: RET
// export function ComExit ( unit ) ; var tmp ; begin
76666: LD_INT 0
76668: PPUSH
76669: PPUSH
// if not IsInUnit ( unit ) then
76670: LD_VAR 0 1
76674: PPUSH
76675: CALL_OW 310
76679: NOT
76680: IFFALSE 76684
// exit ;
76682: GO 76744
// tmp := IsInUnit ( unit ) ;
76684: LD_ADDR_VAR 0 3
76688: PUSH
76689: LD_VAR 0 1
76693: PPUSH
76694: CALL_OW 310
76698: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76699: LD_VAR 0 3
76703: PPUSH
76704: CALL_OW 247
76708: PUSH
76709: LD_INT 2
76711: EQUAL
76712: IFFALSE 76725
// ComExitVehicle ( unit ) else
76714: LD_VAR 0 1
76718: PPUSH
76719: CALL_OW 121
76723: GO 76734
// ComExitBuilding ( unit ) ;
76725: LD_VAR 0 1
76729: PPUSH
76730: CALL_OW 122
// result := tmp ;
76734: LD_ADDR_VAR 0 2
76738: PUSH
76739: LD_VAR 0 3
76743: ST_TO_ADDR
// end ;
76744: LD_VAR 0 2
76748: RET
// export function ComExitAll ( units ) ; var i ; begin
76749: LD_INT 0
76751: PPUSH
76752: PPUSH
// if not units then
76753: LD_VAR 0 1
76757: NOT
76758: IFFALSE 76762
// exit ;
76760: GO 76788
// for i in units do
76762: LD_ADDR_VAR 0 3
76766: PUSH
76767: LD_VAR 0 1
76771: PUSH
76772: FOR_IN
76773: IFFALSE 76786
// ComExit ( i ) ;
76775: LD_VAR 0 3
76779: PPUSH
76780: CALL 76666 0 1
76784: GO 76772
76786: POP
76787: POP
// end ;
76788: LD_VAR 0 2
76792: RET
// export function ResetHc ; begin
76793: LD_INT 0
76795: PPUSH
// InitHc ;
76796: CALL_OW 19
// hc_importance := 0 ;
76800: LD_ADDR_OWVAR 32
76804: PUSH
76805: LD_INT 0
76807: ST_TO_ADDR
// end ;
76808: LD_VAR 0 1
76812: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76813: LD_INT 0
76815: PPUSH
76816: PPUSH
76817: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76818: LD_ADDR_VAR 0 6
76822: PUSH
76823: LD_VAR 0 1
76827: PUSH
76828: LD_VAR 0 3
76832: PLUS
76833: PUSH
76834: LD_INT 2
76836: DIV
76837: ST_TO_ADDR
// if _x < 0 then
76838: LD_VAR 0 6
76842: PUSH
76843: LD_INT 0
76845: LESS
76846: IFFALSE 76863
// _x := _x * - 1 ;
76848: LD_ADDR_VAR 0 6
76852: PUSH
76853: LD_VAR 0 6
76857: PUSH
76858: LD_INT 1
76860: NEG
76861: MUL
76862: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76863: LD_ADDR_VAR 0 7
76867: PUSH
76868: LD_VAR 0 2
76872: PUSH
76873: LD_VAR 0 4
76877: PLUS
76878: PUSH
76879: LD_INT 2
76881: DIV
76882: ST_TO_ADDR
// if _y < 0 then
76883: LD_VAR 0 7
76887: PUSH
76888: LD_INT 0
76890: LESS
76891: IFFALSE 76908
// _y := _y * - 1 ;
76893: LD_ADDR_VAR 0 7
76897: PUSH
76898: LD_VAR 0 7
76902: PUSH
76903: LD_INT 1
76905: NEG
76906: MUL
76907: ST_TO_ADDR
// result := [ _x , _y ] ;
76908: LD_ADDR_VAR 0 5
76912: PUSH
76913: LD_VAR 0 6
76917: PUSH
76918: LD_VAR 0 7
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: ST_TO_ADDR
// end ;
76927: LD_VAR 0 5
76931: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76932: LD_INT 0
76934: PPUSH
76935: PPUSH
76936: PPUSH
76937: PPUSH
// task := GetTaskList ( unit ) ;
76938: LD_ADDR_VAR 0 7
76942: PUSH
76943: LD_VAR 0 1
76947: PPUSH
76948: CALL_OW 437
76952: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76953: LD_VAR 0 7
76957: NOT
76958: PUSH
76959: LD_VAR 0 1
76963: PPUSH
76964: LD_VAR 0 2
76968: PPUSH
76969: CALL_OW 308
76973: NOT
76974: AND
76975: IFFALSE 76979
// exit ;
76977: GO 77097
// if IsInArea ( unit , area ) then
76979: LD_VAR 0 1
76983: PPUSH
76984: LD_VAR 0 2
76988: PPUSH
76989: CALL_OW 308
76993: IFFALSE 77011
// begin ComMoveToArea ( unit , goAway ) ;
76995: LD_VAR 0 1
76999: PPUSH
77000: LD_VAR 0 3
77004: PPUSH
77005: CALL_OW 113
// exit ;
77009: GO 77097
// end ; if task [ 1 ] [ 1 ] <> M then
77011: LD_VAR 0 7
77015: PUSH
77016: LD_INT 1
77018: ARRAY
77019: PUSH
77020: LD_INT 1
77022: ARRAY
77023: PUSH
77024: LD_STRING M
77026: NONEQUAL
77027: IFFALSE 77031
// exit ;
77029: GO 77097
// x := task [ 1 ] [ 2 ] ;
77031: LD_ADDR_VAR 0 5
77035: PUSH
77036: LD_VAR 0 7
77040: PUSH
77041: LD_INT 1
77043: ARRAY
77044: PUSH
77045: LD_INT 2
77047: ARRAY
77048: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77049: LD_ADDR_VAR 0 6
77053: PUSH
77054: LD_VAR 0 7
77058: PUSH
77059: LD_INT 1
77061: ARRAY
77062: PUSH
77063: LD_INT 3
77065: ARRAY
77066: ST_TO_ADDR
// if InArea ( x , y , area ) then
77067: LD_VAR 0 5
77071: PPUSH
77072: LD_VAR 0 6
77076: PPUSH
77077: LD_VAR 0 2
77081: PPUSH
77082: CALL_OW 309
77086: IFFALSE 77097
// ComStop ( unit ) ;
77088: LD_VAR 0 1
77092: PPUSH
77093: CALL_OW 141
// end ;
77097: LD_VAR 0 4
77101: RET
// export function Abs ( value ) ; begin
77102: LD_INT 0
77104: PPUSH
// result := value ;
77105: LD_ADDR_VAR 0 2
77109: PUSH
77110: LD_VAR 0 1
77114: ST_TO_ADDR
// if value < 0 then
77115: LD_VAR 0 1
77119: PUSH
77120: LD_INT 0
77122: LESS
77123: IFFALSE 77140
// result := value * - 1 ;
77125: LD_ADDR_VAR 0 2
77129: PUSH
77130: LD_VAR 0 1
77134: PUSH
77135: LD_INT 1
77137: NEG
77138: MUL
77139: ST_TO_ADDR
// end ;
77140: LD_VAR 0 2
77144: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77145: LD_INT 0
77147: PPUSH
77148: PPUSH
77149: PPUSH
77150: PPUSH
77151: PPUSH
77152: PPUSH
77153: PPUSH
77154: PPUSH
// if not unit or not building then
77155: LD_VAR 0 1
77159: NOT
77160: PUSH
77161: LD_VAR 0 2
77165: NOT
77166: OR
77167: IFFALSE 77171
// exit ;
77169: GO 77397
// x := GetX ( building ) ;
77171: LD_ADDR_VAR 0 4
77175: PUSH
77176: LD_VAR 0 2
77180: PPUSH
77181: CALL_OW 250
77185: ST_TO_ADDR
// y := GetY ( building ) ;
77186: LD_ADDR_VAR 0 6
77190: PUSH
77191: LD_VAR 0 2
77195: PPUSH
77196: CALL_OW 251
77200: ST_TO_ADDR
// d := GetDir ( building ) ;
77201: LD_ADDR_VAR 0 8
77205: PUSH
77206: LD_VAR 0 2
77210: PPUSH
77211: CALL_OW 254
77215: ST_TO_ADDR
// r := 4 ;
77216: LD_ADDR_VAR 0 9
77220: PUSH
77221: LD_INT 4
77223: ST_TO_ADDR
// for i := 1 to 5 do
77224: LD_ADDR_VAR 0 10
77228: PUSH
77229: DOUBLE
77230: LD_INT 1
77232: DEC
77233: ST_TO_ADDR
77234: LD_INT 5
77236: PUSH
77237: FOR_TO
77238: IFFALSE 77395
// begin _x := ShiftX ( x , d , r + i ) ;
77240: LD_ADDR_VAR 0 5
77244: PUSH
77245: LD_VAR 0 4
77249: PPUSH
77250: LD_VAR 0 8
77254: PPUSH
77255: LD_VAR 0 9
77259: PUSH
77260: LD_VAR 0 10
77264: PLUS
77265: PPUSH
77266: CALL_OW 272
77270: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77271: LD_ADDR_VAR 0 7
77275: PUSH
77276: LD_VAR 0 6
77280: PPUSH
77281: LD_VAR 0 8
77285: PPUSH
77286: LD_VAR 0 9
77290: PUSH
77291: LD_VAR 0 10
77295: PLUS
77296: PPUSH
77297: CALL_OW 273
77301: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77302: LD_VAR 0 5
77306: PPUSH
77307: LD_VAR 0 7
77311: PPUSH
77312: CALL_OW 488
77316: PUSH
77317: LD_VAR 0 5
77321: PPUSH
77322: LD_VAR 0 7
77326: PPUSH
77327: CALL_OW 428
77331: PPUSH
77332: CALL_OW 247
77336: PUSH
77337: LD_INT 3
77339: PUSH
77340: LD_INT 2
77342: PUSH
77343: EMPTY
77344: LIST
77345: LIST
77346: IN
77347: NOT
77348: AND
77349: IFFALSE 77393
// begin ComMoveXY ( unit , _x , _y ) ;
77351: LD_VAR 0 1
77355: PPUSH
77356: LD_VAR 0 5
77360: PPUSH
77361: LD_VAR 0 7
77365: PPUSH
77366: CALL_OW 111
// result := [ _x , _y ] ;
77370: LD_ADDR_VAR 0 3
77374: PUSH
77375: LD_VAR 0 5
77379: PUSH
77380: LD_VAR 0 7
77384: PUSH
77385: EMPTY
77386: LIST
77387: LIST
77388: ST_TO_ADDR
// exit ;
77389: POP
77390: POP
77391: GO 77397
// end ; end ;
77393: GO 77237
77395: POP
77396: POP
// end ;
77397: LD_VAR 0 3
77401: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77402: LD_INT 0
77404: PPUSH
77405: PPUSH
77406: PPUSH
// result := 0 ;
77407: LD_ADDR_VAR 0 3
77411: PUSH
77412: LD_INT 0
77414: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77415: LD_VAR 0 1
77419: PUSH
77420: LD_INT 0
77422: LESS
77423: PUSH
77424: LD_VAR 0 1
77428: PUSH
77429: LD_INT 8
77431: GREATER
77432: OR
77433: PUSH
77434: LD_VAR 0 2
77438: PUSH
77439: LD_INT 0
77441: LESS
77442: OR
77443: PUSH
77444: LD_VAR 0 2
77448: PUSH
77449: LD_INT 8
77451: GREATER
77452: OR
77453: IFFALSE 77457
// exit ;
77455: GO 77532
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77457: LD_ADDR_VAR 0 4
77461: PUSH
77462: LD_INT 22
77464: PUSH
77465: LD_VAR 0 2
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: PPUSH
77474: CALL_OW 69
77478: PUSH
77479: FOR_IN
77480: IFFALSE 77530
// begin un := UnitShoot ( i ) ;
77482: LD_ADDR_VAR 0 5
77486: PUSH
77487: LD_VAR 0 4
77491: PPUSH
77492: CALL_OW 504
77496: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77497: LD_VAR 0 5
77501: PPUSH
77502: CALL_OW 255
77506: PUSH
77507: LD_VAR 0 1
77511: EQUAL
77512: IFFALSE 77528
// begin result := un ;
77514: LD_ADDR_VAR 0 3
77518: PUSH
77519: LD_VAR 0 5
77523: ST_TO_ADDR
// exit ;
77524: POP
77525: POP
77526: GO 77532
// end ; end ;
77528: GO 77479
77530: POP
77531: POP
// end ;
77532: LD_VAR 0 3
77536: RET
// export function GetCargoBay ( units ) ; begin
77537: LD_INT 0
77539: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77540: LD_ADDR_VAR 0 2
77544: PUSH
77545: LD_VAR 0 1
77549: PPUSH
77550: LD_INT 2
77552: PUSH
77553: LD_INT 34
77555: PUSH
77556: LD_INT 12
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: LD_INT 34
77565: PUSH
77566: LD_INT 51
77568: PUSH
77569: EMPTY
77570: LIST
77571: LIST
77572: PUSH
77573: LD_INT 34
77575: PUSH
77576: LD_INT 32
77578: PUSH
77579: EMPTY
77580: LIST
77581: LIST
77582: PUSH
77583: LD_INT 34
77585: PUSH
77586: LD_EXP 44
77590: PUSH
77591: EMPTY
77592: LIST
77593: LIST
77594: PUSH
77595: EMPTY
77596: LIST
77597: LIST
77598: LIST
77599: LIST
77600: LIST
77601: PPUSH
77602: CALL_OW 72
77606: ST_TO_ADDR
// end ;
77607: LD_VAR 0 2
77611: RET
// export function Negate ( value ) ; begin
77612: LD_INT 0
77614: PPUSH
// result := not value ;
77615: LD_ADDR_VAR 0 2
77619: PUSH
77620: LD_VAR 0 1
77624: NOT
77625: ST_TO_ADDR
// end ;
77626: LD_VAR 0 2
77630: RET
// export function Inc ( value ) ; begin
77631: LD_INT 0
77633: PPUSH
// result := value + 1 ;
77634: LD_ADDR_VAR 0 2
77638: PUSH
77639: LD_VAR 0 1
77643: PUSH
77644: LD_INT 1
77646: PLUS
77647: ST_TO_ADDR
// end ;
77648: LD_VAR 0 2
77652: RET
// export function Dec ( value ) ; begin
77653: LD_INT 0
77655: PPUSH
// result := value - 1 ;
77656: LD_ADDR_VAR 0 2
77660: PUSH
77661: LD_VAR 0 1
77665: PUSH
77666: LD_INT 1
77668: MINUS
77669: ST_TO_ADDR
// end ;
77670: LD_VAR 0 2
77674: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77675: LD_INT 0
77677: PPUSH
77678: PPUSH
77679: PPUSH
77680: PPUSH
77681: PPUSH
77682: PPUSH
77683: PPUSH
77684: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77685: LD_VAR 0 1
77689: PPUSH
77690: LD_VAR 0 2
77694: PPUSH
77695: CALL_OW 488
77699: NOT
77700: PUSH
77701: LD_VAR 0 3
77705: PPUSH
77706: LD_VAR 0 4
77710: PPUSH
77711: CALL_OW 488
77715: NOT
77716: OR
77717: IFFALSE 77730
// begin result := - 1 ;
77719: LD_ADDR_VAR 0 5
77723: PUSH
77724: LD_INT 1
77726: NEG
77727: ST_TO_ADDR
// exit ;
77728: GO 77965
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77730: LD_ADDR_VAR 0 12
77734: PUSH
77735: LD_VAR 0 1
77739: PPUSH
77740: LD_VAR 0 2
77744: PPUSH
77745: LD_VAR 0 3
77749: PPUSH
77750: LD_VAR 0 4
77754: PPUSH
77755: CALL 76813 0 4
77759: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77760: LD_ADDR_VAR 0 11
77764: PUSH
77765: LD_VAR 0 1
77769: PPUSH
77770: LD_VAR 0 2
77774: PPUSH
77775: LD_VAR 0 12
77779: PUSH
77780: LD_INT 1
77782: ARRAY
77783: PPUSH
77784: LD_VAR 0 12
77788: PUSH
77789: LD_INT 2
77791: ARRAY
77792: PPUSH
77793: CALL_OW 298
77797: ST_TO_ADDR
// distance := 9999 ;
77798: LD_ADDR_VAR 0 10
77802: PUSH
77803: LD_INT 9999
77805: ST_TO_ADDR
// for i := 0 to 5 do
77806: LD_ADDR_VAR 0 6
77810: PUSH
77811: DOUBLE
77812: LD_INT 0
77814: DEC
77815: ST_TO_ADDR
77816: LD_INT 5
77818: PUSH
77819: FOR_TO
77820: IFFALSE 77963
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77822: LD_ADDR_VAR 0 7
77826: PUSH
77827: LD_VAR 0 1
77831: PPUSH
77832: LD_VAR 0 6
77836: PPUSH
77837: LD_VAR 0 11
77841: PPUSH
77842: CALL_OW 272
77846: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77847: LD_ADDR_VAR 0 8
77851: PUSH
77852: LD_VAR 0 2
77856: PPUSH
77857: LD_VAR 0 6
77861: PPUSH
77862: LD_VAR 0 11
77866: PPUSH
77867: CALL_OW 273
77871: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77872: LD_VAR 0 7
77876: PPUSH
77877: LD_VAR 0 8
77881: PPUSH
77882: CALL_OW 488
77886: NOT
77887: IFFALSE 77891
// continue ;
77889: GO 77819
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77891: LD_ADDR_VAR 0 9
77895: PUSH
77896: LD_VAR 0 12
77900: PUSH
77901: LD_INT 1
77903: ARRAY
77904: PPUSH
77905: LD_VAR 0 12
77909: PUSH
77910: LD_INT 2
77912: ARRAY
77913: PPUSH
77914: LD_VAR 0 7
77918: PPUSH
77919: LD_VAR 0 8
77923: PPUSH
77924: CALL_OW 298
77928: ST_TO_ADDR
// if tmp < distance then
77929: LD_VAR 0 9
77933: PUSH
77934: LD_VAR 0 10
77938: LESS
77939: IFFALSE 77961
// begin result := i ;
77941: LD_ADDR_VAR 0 5
77945: PUSH
77946: LD_VAR 0 6
77950: ST_TO_ADDR
// distance := tmp ;
77951: LD_ADDR_VAR 0 10
77955: PUSH
77956: LD_VAR 0 9
77960: ST_TO_ADDR
// end ; end ;
77961: GO 77819
77963: POP
77964: POP
// end ;
77965: LD_VAR 0 5
77969: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77970: LD_INT 0
77972: PPUSH
77973: PPUSH
// if not driver or not IsInUnit ( driver ) then
77974: LD_VAR 0 1
77978: NOT
77979: PUSH
77980: LD_VAR 0 1
77984: PPUSH
77985: CALL_OW 310
77989: NOT
77990: OR
77991: IFFALSE 77995
// exit ;
77993: GO 78085
// vehicle := IsInUnit ( driver ) ;
77995: LD_ADDR_VAR 0 3
77999: PUSH
78000: LD_VAR 0 1
78004: PPUSH
78005: CALL_OW 310
78009: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78010: LD_VAR 0 1
78014: PPUSH
78015: LD_STRING \
78017: PUSH
78018: LD_INT 0
78020: PUSH
78021: LD_INT 0
78023: PUSH
78024: LD_INT 0
78026: PUSH
78027: LD_INT 0
78029: PUSH
78030: LD_INT 0
78032: PUSH
78033: LD_INT 0
78035: PUSH
78036: EMPTY
78037: LIST
78038: LIST
78039: LIST
78040: LIST
78041: LIST
78042: LIST
78043: LIST
78044: PUSH
78045: LD_STRING E
78047: PUSH
78048: LD_INT 0
78050: PUSH
78051: LD_INT 0
78053: PUSH
78054: LD_VAR 0 3
78058: PUSH
78059: LD_INT 0
78061: PUSH
78062: LD_INT 0
78064: PUSH
78065: LD_INT 0
78067: PUSH
78068: EMPTY
78069: LIST
78070: LIST
78071: LIST
78072: LIST
78073: LIST
78074: LIST
78075: LIST
78076: PUSH
78077: EMPTY
78078: LIST
78079: LIST
78080: PPUSH
78081: CALL_OW 446
// end ;
78085: LD_VAR 0 2
78089: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78090: LD_INT 0
78092: PPUSH
78093: PPUSH
// if not driver or not IsInUnit ( driver ) then
78094: LD_VAR 0 1
78098: NOT
78099: PUSH
78100: LD_VAR 0 1
78104: PPUSH
78105: CALL_OW 310
78109: NOT
78110: OR
78111: IFFALSE 78115
// exit ;
78113: GO 78205
// vehicle := IsInUnit ( driver ) ;
78115: LD_ADDR_VAR 0 3
78119: PUSH
78120: LD_VAR 0 1
78124: PPUSH
78125: CALL_OW 310
78129: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78130: LD_VAR 0 1
78134: PPUSH
78135: LD_STRING \
78137: PUSH
78138: LD_INT 0
78140: PUSH
78141: LD_INT 0
78143: PUSH
78144: LD_INT 0
78146: PUSH
78147: LD_INT 0
78149: PUSH
78150: LD_INT 0
78152: PUSH
78153: LD_INT 0
78155: PUSH
78156: EMPTY
78157: LIST
78158: LIST
78159: LIST
78160: LIST
78161: LIST
78162: LIST
78163: LIST
78164: PUSH
78165: LD_STRING E
78167: PUSH
78168: LD_INT 0
78170: PUSH
78171: LD_INT 0
78173: PUSH
78174: LD_VAR 0 3
78178: PUSH
78179: LD_INT 0
78181: PUSH
78182: LD_INT 0
78184: PUSH
78185: LD_INT 0
78187: PUSH
78188: EMPTY
78189: LIST
78190: LIST
78191: LIST
78192: LIST
78193: LIST
78194: LIST
78195: LIST
78196: PUSH
78197: EMPTY
78198: LIST
78199: LIST
78200: PPUSH
78201: CALL_OW 447
// end ;
78205: LD_VAR 0 2
78209: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78210: LD_INT 0
78212: PPUSH
78213: PPUSH
78214: PPUSH
// tmp := [ ] ;
78215: LD_ADDR_VAR 0 5
78219: PUSH
78220: EMPTY
78221: ST_TO_ADDR
// for i in units do
78222: LD_ADDR_VAR 0 4
78226: PUSH
78227: LD_VAR 0 1
78231: PUSH
78232: FOR_IN
78233: IFFALSE 78271
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78235: LD_ADDR_VAR 0 5
78239: PUSH
78240: LD_VAR 0 5
78244: PPUSH
78245: LD_VAR 0 5
78249: PUSH
78250: LD_INT 1
78252: PLUS
78253: PPUSH
78254: LD_VAR 0 4
78258: PPUSH
78259: CALL_OW 256
78263: PPUSH
78264: CALL_OW 2
78268: ST_TO_ADDR
78269: GO 78232
78271: POP
78272: POP
// if not tmp then
78273: LD_VAR 0 5
78277: NOT
78278: IFFALSE 78282
// exit ;
78280: GO 78330
// if asc then
78282: LD_VAR 0 2
78286: IFFALSE 78310
// result := SortListByListAsc ( units , tmp ) else
78288: LD_ADDR_VAR 0 3
78292: PUSH
78293: LD_VAR 0 1
78297: PPUSH
78298: LD_VAR 0 5
78302: PPUSH
78303: CALL_OW 76
78307: ST_TO_ADDR
78308: GO 78330
// result := SortListByListDesc ( units , tmp ) ;
78310: LD_ADDR_VAR 0 3
78314: PUSH
78315: LD_VAR 0 1
78319: PPUSH
78320: LD_VAR 0 5
78324: PPUSH
78325: CALL_OW 77
78329: ST_TO_ADDR
// end ;
78330: LD_VAR 0 3
78334: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78335: LD_INT 0
78337: PPUSH
78338: PPUSH
// task := GetTaskList ( mech ) ;
78339: LD_ADDR_VAR 0 4
78343: PUSH
78344: LD_VAR 0 1
78348: PPUSH
78349: CALL_OW 437
78353: ST_TO_ADDR
// if not task then
78354: LD_VAR 0 4
78358: NOT
78359: IFFALSE 78363
// exit ;
78361: GO 78405
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78363: LD_ADDR_VAR 0 3
78367: PUSH
78368: LD_VAR 0 4
78372: PUSH
78373: LD_INT 1
78375: ARRAY
78376: PUSH
78377: LD_INT 1
78379: ARRAY
78380: PUSH
78381: LD_STRING r
78383: EQUAL
78384: PUSH
78385: LD_VAR 0 4
78389: PUSH
78390: LD_INT 1
78392: ARRAY
78393: PUSH
78394: LD_INT 4
78396: ARRAY
78397: PUSH
78398: LD_VAR 0 2
78402: EQUAL
78403: AND
78404: ST_TO_ADDR
// end ;
78405: LD_VAR 0 3
78409: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78410: LD_INT 0
78412: PPUSH
// SetDir ( unit , d ) ;
78413: LD_VAR 0 1
78417: PPUSH
78418: LD_VAR 0 4
78422: PPUSH
78423: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78427: LD_VAR 0 1
78431: PPUSH
78432: LD_VAR 0 2
78436: PPUSH
78437: LD_VAR 0 3
78441: PPUSH
78442: LD_VAR 0 5
78446: PPUSH
78447: CALL_OW 48
// end ;
78451: LD_VAR 0 6
78455: RET
// export function ToNaturalNumber ( number ) ; begin
78456: LD_INT 0
78458: PPUSH
// result := number div 1 ;
78459: LD_ADDR_VAR 0 2
78463: PUSH
78464: LD_VAR 0 1
78468: PUSH
78469: LD_INT 1
78471: DIV
78472: ST_TO_ADDR
// if number < 0 then
78473: LD_VAR 0 1
78477: PUSH
78478: LD_INT 0
78480: LESS
78481: IFFALSE 78491
// result := 0 ;
78483: LD_ADDR_VAR 0 2
78487: PUSH
78488: LD_INT 0
78490: ST_TO_ADDR
// end ;
78491: LD_VAR 0 2
78495: RET
// export function SortByClass ( units , class ) ; var un ; begin
78496: LD_INT 0
78498: PPUSH
78499: PPUSH
// if not units or not class then
78500: LD_VAR 0 1
78504: NOT
78505: PUSH
78506: LD_VAR 0 2
78510: NOT
78511: OR
78512: IFFALSE 78516
// exit ;
78514: GO 78611
// result := [ ] ;
78516: LD_ADDR_VAR 0 3
78520: PUSH
78521: EMPTY
78522: ST_TO_ADDR
// for un in units do
78523: LD_ADDR_VAR 0 4
78527: PUSH
78528: LD_VAR 0 1
78532: PUSH
78533: FOR_IN
78534: IFFALSE 78609
// if GetClass ( un ) = class then
78536: LD_VAR 0 4
78540: PPUSH
78541: CALL_OW 257
78545: PUSH
78546: LD_VAR 0 2
78550: EQUAL
78551: IFFALSE 78578
// result := Insert ( result , 1 , un ) else
78553: LD_ADDR_VAR 0 3
78557: PUSH
78558: LD_VAR 0 3
78562: PPUSH
78563: LD_INT 1
78565: PPUSH
78566: LD_VAR 0 4
78570: PPUSH
78571: CALL_OW 2
78575: ST_TO_ADDR
78576: GO 78607
// result := Replace ( result , result + 1 , un ) ;
78578: LD_ADDR_VAR 0 3
78582: PUSH
78583: LD_VAR 0 3
78587: PPUSH
78588: LD_VAR 0 3
78592: PUSH
78593: LD_INT 1
78595: PLUS
78596: PPUSH
78597: LD_VAR 0 4
78601: PPUSH
78602: CALL_OW 1
78606: ST_TO_ADDR
78607: GO 78533
78609: POP
78610: POP
// end ;
78611: LD_VAR 0 3
78615: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78616: LD_INT 0
78618: PPUSH
78619: PPUSH
78620: PPUSH
78621: PPUSH
78622: PPUSH
78623: PPUSH
78624: PPUSH
// result := [ ] ;
78625: LD_ADDR_VAR 0 4
78629: PUSH
78630: EMPTY
78631: ST_TO_ADDR
// if x - r < 0 then
78632: LD_VAR 0 1
78636: PUSH
78637: LD_VAR 0 3
78641: MINUS
78642: PUSH
78643: LD_INT 0
78645: LESS
78646: IFFALSE 78658
// min_x := 0 else
78648: LD_ADDR_VAR 0 8
78652: PUSH
78653: LD_INT 0
78655: ST_TO_ADDR
78656: GO 78674
// min_x := x - r ;
78658: LD_ADDR_VAR 0 8
78662: PUSH
78663: LD_VAR 0 1
78667: PUSH
78668: LD_VAR 0 3
78672: MINUS
78673: ST_TO_ADDR
// if y - r < 0 then
78674: LD_VAR 0 2
78678: PUSH
78679: LD_VAR 0 3
78683: MINUS
78684: PUSH
78685: LD_INT 0
78687: LESS
78688: IFFALSE 78700
// min_y := 0 else
78690: LD_ADDR_VAR 0 7
78694: PUSH
78695: LD_INT 0
78697: ST_TO_ADDR
78698: GO 78716
// min_y := y - r ;
78700: LD_ADDR_VAR 0 7
78704: PUSH
78705: LD_VAR 0 2
78709: PUSH
78710: LD_VAR 0 3
78714: MINUS
78715: ST_TO_ADDR
// max_x := x + r ;
78716: LD_ADDR_VAR 0 9
78720: PUSH
78721: LD_VAR 0 1
78725: PUSH
78726: LD_VAR 0 3
78730: PLUS
78731: ST_TO_ADDR
// max_y := y + r ;
78732: LD_ADDR_VAR 0 10
78736: PUSH
78737: LD_VAR 0 2
78741: PUSH
78742: LD_VAR 0 3
78746: PLUS
78747: ST_TO_ADDR
// for _x = min_x to max_x do
78748: LD_ADDR_VAR 0 5
78752: PUSH
78753: DOUBLE
78754: LD_VAR 0 8
78758: DEC
78759: ST_TO_ADDR
78760: LD_VAR 0 9
78764: PUSH
78765: FOR_TO
78766: IFFALSE 78867
// for _y = min_y to max_y do
78768: LD_ADDR_VAR 0 6
78772: PUSH
78773: DOUBLE
78774: LD_VAR 0 7
78778: DEC
78779: ST_TO_ADDR
78780: LD_VAR 0 10
78784: PUSH
78785: FOR_TO
78786: IFFALSE 78863
// begin if not ValidHex ( _x , _y ) then
78788: LD_VAR 0 5
78792: PPUSH
78793: LD_VAR 0 6
78797: PPUSH
78798: CALL_OW 488
78802: NOT
78803: IFFALSE 78807
// continue ;
78805: GO 78785
// if GetResourceTypeXY ( _x , _y ) then
78807: LD_VAR 0 5
78811: PPUSH
78812: LD_VAR 0 6
78816: PPUSH
78817: CALL_OW 283
78821: IFFALSE 78861
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78823: LD_ADDR_VAR 0 4
78827: PUSH
78828: LD_VAR 0 4
78832: PPUSH
78833: LD_VAR 0 4
78837: PUSH
78838: LD_INT 1
78840: PLUS
78841: PPUSH
78842: LD_VAR 0 5
78846: PUSH
78847: LD_VAR 0 6
78851: PUSH
78852: EMPTY
78853: LIST
78854: LIST
78855: PPUSH
78856: CALL_OW 1
78860: ST_TO_ADDR
// end ;
78861: GO 78785
78863: POP
78864: POP
78865: GO 78765
78867: POP
78868: POP
// end ;
78869: LD_VAR 0 4
78873: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78874: LD_INT 0
78876: PPUSH
78877: PPUSH
78878: PPUSH
78879: PPUSH
78880: PPUSH
78881: PPUSH
78882: PPUSH
78883: PPUSH
// if not units then
78884: LD_VAR 0 1
78888: NOT
78889: IFFALSE 78893
// exit ;
78891: GO 79419
// result := UnitFilter ( units , [ f_ok ] ) ;
78893: LD_ADDR_VAR 0 3
78897: PUSH
78898: LD_VAR 0 1
78902: PPUSH
78903: LD_INT 50
78905: PUSH
78906: EMPTY
78907: LIST
78908: PPUSH
78909: CALL_OW 72
78913: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78914: LD_ADDR_VAR 0 8
78918: PUSH
78919: LD_VAR 0 1
78923: PUSH
78924: LD_INT 1
78926: ARRAY
78927: PPUSH
78928: CALL_OW 255
78932: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78933: LD_ADDR_VAR 0 10
78937: PUSH
78938: LD_INT 29
78940: PUSH
78941: LD_EXP 47
78945: PUSH
78946: LD_INT 49
78948: PUSH
78949: EMPTY
78950: LIST
78951: LIST
78952: LIST
78953: ST_TO_ADDR
// if not result then
78954: LD_VAR 0 3
78958: NOT
78959: IFFALSE 78963
// exit ;
78961: GO 79419
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78963: LD_ADDR_VAR 0 5
78967: PUSH
78968: LD_INT 81
78970: PUSH
78971: LD_VAR 0 8
78975: PUSH
78976: EMPTY
78977: LIST
78978: LIST
78979: PPUSH
78980: CALL_OW 69
78984: ST_TO_ADDR
// for i in result do
78985: LD_ADDR_VAR 0 4
78989: PUSH
78990: LD_VAR 0 3
78994: PUSH
78995: FOR_IN
78996: IFFALSE 79417
// begin tag := GetTag ( i ) + 1 ;
78998: LD_ADDR_VAR 0 9
79002: PUSH
79003: LD_VAR 0 4
79007: PPUSH
79008: CALL_OW 110
79012: PUSH
79013: LD_INT 1
79015: PLUS
79016: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79017: LD_ADDR_VAR 0 7
79021: PUSH
79022: LD_VAR 0 4
79026: PPUSH
79027: CALL_OW 250
79031: PPUSH
79032: LD_VAR 0 4
79036: PPUSH
79037: CALL_OW 251
79041: PPUSH
79042: LD_INT 6
79044: PPUSH
79045: CALL 78616 0 3
79049: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79050: LD_VAR 0 4
79054: PPUSH
79055: CALL_OW 247
79059: PUSH
79060: LD_INT 2
79062: EQUAL
79063: PUSH
79064: LD_VAR 0 7
79068: AND
79069: PUSH
79070: LD_VAR 0 4
79074: PPUSH
79075: CALL_OW 264
79079: PUSH
79080: LD_VAR 0 10
79084: IN
79085: NOT
79086: AND
79087: IFFALSE 79126
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79089: LD_VAR 0 4
79093: PPUSH
79094: LD_VAR 0 7
79098: PUSH
79099: LD_INT 1
79101: ARRAY
79102: PUSH
79103: LD_INT 1
79105: ARRAY
79106: PPUSH
79107: LD_VAR 0 7
79111: PUSH
79112: LD_INT 1
79114: ARRAY
79115: PUSH
79116: LD_INT 2
79118: ARRAY
79119: PPUSH
79120: CALL_OW 116
79124: GO 79415
// if path > tag then
79126: LD_VAR 0 2
79130: PUSH
79131: LD_VAR 0 9
79135: GREATER
79136: IFFALSE 79344
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79138: LD_ADDR_VAR 0 6
79142: PUSH
79143: LD_VAR 0 5
79147: PPUSH
79148: LD_INT 91
79150: PUSH
79151: LD_VAR 0 4
79155: PUSH
79156: LD_INT 8
79158: PUSH
79159: EMPTY
79160: LIST
79161: LIST
79162: LIST
79163: PPUSH
79164: CALL_OW 72
79168: ST_TO_ADDR
// if nearEnemy then
79169: LD_VAR 0 6
79173: IFFALSE 79242
// begin if GetWeapon ( i ) = ru_time_lapser then
79175: LD_VAR 0 4
79179: PPUSH
79180: CALL_OW 264
79184: PUSH
79185: LD_INT 49
79187: EQUAL
79188: IFFALSE 79216
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79190: LD_VAR 0 4
79194: PPUSH
79195: LD_VAR 0 6
79199: PPUSH
79200: LD_VAR 0 4
79204: PPUSH
79205: CALL_OW 74
79209: PPUSH
79210: CALL_OW 112
79214: GO 79240
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79216: LD_VAR 0 4
79220: PPUSH
79221: LD_VAR 0 6
79225: PPUSH
79226: LD_VAR 0 4
79230: PPUSH
79231: CALL_OW 74
79235: PPUSH
79236: CALL_OW 115
// end else
79240: GO 79342
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79242: LD_VAR 0 4
79246: PPUSH
79247: LD_VAR 0 2
79251: PUSH
79252: LD_VAR 0 9
79256: ARRAY
79257: PUSH
79258: LD_INT 1
79260: ARRAY
79261: PPUSH
79262: LD_VAR 0 2
79266: PUSH
79267: LD_VAR 0 9
79271: ARRAY
79272: PUSH
79273: LD_INT 2
79275: ARRAY
79276: PPUSH
79277: CALL_OW 297
79281: PUSH
79282: LD_INT 6
79284: GREATER
79285: IFFALSE 79328
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79287: LD_VAR 0 4
79291: PPUSH
79292: LD_VAR 0 2
79296: PUSH
79297: LD_VAR 0 9
79301: ARRAY
79302: PUSH
79303: LD_INT 1
79305: ARRAY
79306: PPUSH
79307: LD_VAR 0 2
79311: PUSH
79312: LD_VAR 0 9
79316: ARRAY
79317: PUSH
79318: LD_INT 2
79320: ARRAY
79321: PPUSH
79322: CALL_OW 114
79326: GO 79342
// SetTag ( i , tag ) ;
79328: LD_VAR 0 4
79332: PPUSH
79333: LD_VAR 0 9
79337: PPUSH
79338: CALL_OW 109
// end else
79342: GO 79415
// if enemy then
79344: LD_VAR 0 5
79348: IFFALSE 79415
// begin if GetWeapon ( i ) = ru_time_lapser then
79350: LD_VAR 0 4
79354: PPUSH
79355: CALL_OW 264
79359: PUSH
79360: LD_INT 49
79362: EQUAL
79363: IFFALSE 79391
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79365: LD_VAR 0 4
79369: PPUSH
79370: LD_VAR 0 5
79374: PPUSH
79375: LD_VAR 0 4
79379: PPUSH
79380: CALL_OW 74
79384: PPUSH
79385: CALL_OW 112
79389: GO 79415
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79391: LD_VAR 0 4
79395: PPUSH
79396: LD_VAR 0 5
79400: PPUSH
79401: LD_VAR 0 4
79405: PPUSH
79406: CALL_OW 74
79410: PPUSH
79411: CALL_OW 115
// end ; end ;
79415: GO 78995
79417: POP
79418: POP
// end ;
79419: LD_VAR 0 3
79423: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79424: LD_INT 0
79426: PPUSH
79427: PPUSH
79428: PPUSH
// if not unit or IsInUnit ( unit ) then
79429: LD_VAR 0 1
79433: NOT
79434: PUSH
79435: LD_VAR 0 1
79439: PPUSH
79440: CALL_OW 310
79444: OR
79445: IFFALSE 79449
// exit ;
79447: GO 79540
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79449: LD_ADDR_VAR 0 4
79453: PUSH
79454: LD_VAR 0 1
79458: PPUSH
79459: CALL_OW 250
79463: PPUSH
79464: LD_VAR 0 2
79468: PPUSH
79469: LD_INT 1
79471: PPUSH
79472: CALL_OW 272
79476: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79477: LD_ADDR_VAR 0 5
79481: PUSH
79482: LD_VAR 0 1
79486: PPUSH
79487: CALL_OW 251
79491: PPUSH
79492: LD_VAR 0 2
79496: PPUSH
79497: LD_INT 1
79499: PPUSH
79500: CALL_OW 273
79504: ST_TO_ADDR
// if ValidHex ( x , y ) then
79505: LD_VAR 0 4
79509: PPUSH
79510: LD_VAR 0 5
79514: PPUSH
79515: CALL_OW 488
79519: IFFALSE 79540
// ComTurnXY ( unit , x , y ) ;
79521: LD_VAR 0 1
79525: PPUSH
79526: LD_VAR 0 4
79530: PPUSH
79531: LD_VAR 0 5
79535: PPUSH
79536: CALL_OW 118
// end ;
79540: LD_VAR 0 3
79544: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79545: LD_INT 0
79547: PPUSH
79548: PPUSH
// result := false ;
79549: LD_ADDR_VAR 0 3
79553: PUSH
79554: LD_INT 0
79556: ST_TO_ADDR
// if not units then
79557: LD_VAR 0 2
79561: NOT
79562: IFFALSE 79566
// exit ;
79564: GO 79611
// for i in units do
79566: LD_ADDR_VAR 0 4
79570: PUSH
79571: LD_VAR 0 2
79575: PUSH
79576: FOR_IN
79577: IFFALSE 79609
// if See ( side , i ) then
79579: LD_VAR 0 1
79583: PPUSH
79584: LD_VAR 0 4
79588: PPUSH
79589: CALL_OW 292
79593: IFFALSE 79607
// begin result := true ;
79595: LD_ADDR_VAR 0 3
79599: PUSH
79600: LD_INT 1
79602: ST_TO_ADDR
// exit ;
79603: POP
79604: POP
79605: GO 79611
// end ;
79607: GO 79576
79609: POP
79610: POP
// end ;
79611: LD_VAR 0 3
79615: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79616: LD_INT 0
79618: PPUSH
79619: PPUSH
79620: PPUSH
79621: PPUSH
// if not unit or not points then
79622: LD_VAR 0 1
79626: NOT
79627: PUSH
79628: LD_VAR 0 2
79632: NOT
79633: OR
79634: IFFALSE 79638
// exit ;
79636: GO 79728
// dist := 99999 ;
79638: LD_ADDR_VAR 0 5
79642: PUSH
79643: LD_INT 99999
79645: ST_TO_ADDR
// for i in points do
79646: LD_ADDR_VAR 0 4
79650: PUSH
79651: LD_VAR 0 2
79655: PUSH
79656: FOR_IN
79657: IFFALSE 79726
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79659: LD_ADDR_VAR 0 6
79663: PUSH
79664: LD_VAR 0 1
79668: PPUSH
79669: LD_VAR 0 4
79673: PUSH
79674: LD_INT 1
79676: ARRAY
79677: PPUSH
79678: LD_VAR 0 4
79682: PUSH
79683: LD_INT 2
79685: ARRAY
79686: PPUSH
79687: CALL_OW 297
79691: ST_TO_ADDR
// if tmpDist < dist then
79692: LD_VAR 0 6
79696: PUSH
79697: LD_VAR 0 5
79701: LESS
79702: IFFALSE 79724
// begin result := i ;
79704: LD_ADDR_VAR 0 3
79708: PUSH
79709: LD_VAR 0 4
79713: ST_TO_ADDR
// dist := tmpDist ;
79714: LD_ADDR_VAR 0 5
79718: PUSH
79719: LD_VAR 0 6
79723: ST_TO_ADDR
// end ; end ;
79724: GO 79656
79726: POP
79727: POP
// end ;
79728: LD_VAR 0 3
79732: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79733: LD_INT 0
79735: PPUSH
// uc_side := side ;
79736: LD_ADDR_OWVAR 20
79740: PUSH
79741: LD_VAR 0 1
79745: ST_TO_ADDR
// uc_nation := 3 ;
79746: LD_ADDR_OWVAR 21
79750: PUSH
79751: LD_INT 3
79753: ST_TO_ADDR
// vc_chassis := 25 ;
79754: LD_ADDR_OWVAR 37
79758: PUSH
79759: LD_INT 25
79761: ST_TO_ADDR
// vc_engine := engine_siberite ;
79762: LD_ADDR_OWVAR 39
79766: PUSH
79767: LD_INT 3
79769: ST_TO_ADDR
// vc_control := control_computer ;
79770: LD_ADDR_OWVAR 38
79774: PUSH
79775: LD_INT 3
79777: ST_TO_ADDR
// vc_weapon := 59 ;
79778: LD_ADDR_OWVAR 40
79782: PUSH
79783: LD_INT 59
79785: ST_TO_ADDR
// result := CreateVehicle ;
79786: LD_ADDR_VAR 0 5
79790: PUSH
79791: CALL_OW 45
79795: ST_TO_ADDR
// SetDir ( result , d ) ;
79796: LD_VAR 0 5
79800: PPUSH
79801: LD_VAR 0 4
79805: PPUSH
79806: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79810: LD_VAR 0 5
79814: PPUSH
79815: LD_VAR 0 2
79819: PPUSH
79820: LD_VAR 0 3
79824: PPUSH
79825: LD_INT 0
79827: PPUSH
79828: CALL_OW 48
// end ;
79832: LD_VAR 0 5
79836: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79837: LD_INT 0
79839: PPUSH
79840: PPUSH
79841: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79842: LD_ADDR_VAR 0 2
79846: PUSH
79847: LD_INT 0
79849: PUSH
79850: LD_INT 0
79852: PUSH
79853: LD_INT 0
79855: PUSH
79856: LD_INT 0
79858: PUSH
79859: EMPTY
79860: LIST
79861: LIST
79862: LIST
79863: LIST
79864: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79865: LD_VAR 0 1
79869: NOT
79870: PUSH
79871: LD_VAR 0 1
79875: PPUSH
79876: CALL_OW 264
79880: PUSH
79881: LD_INT 12
79883: PUSH
79884: LD_INT 51
79886: PUSH
79887: LD_INT 32
79889: PUSH
79890: LD_EXP 44
79894: PUSH
79895: EMPTY
79896: LIST
79897: LIST
79898: LIST
79899: LIST
79900: IN
79901: NOT
79902: OR
79903: IFFALSE 79907
// exit ;
79905: GO 80005
// for i := 1 to 3 do
79907: LD_ADDR_VAR 0 3
79911: PUSH
79912: DOUBLE
79913: LD_INT 1
79915: DEC
79916: ST_TO_ADDR
79917: LD_INT 3
79919: PUSH
79920: FOR_TO
79921: IFFALSE 80003
// begin tmp := GetCargo ( cargo , i ) ;
79923: LD_ADDR_VAR 0 4
79927: PUSH
79928: LD_VAR 0 1
79932: PPUSH
79933: LD_VAR 0 3
79937: PPUSH
79938: CALL_OW 289
79942: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79943: LD_ADDR_VAR 0 2
79947: PUSH
79948: LD_VAR 0 2
79952: PPUSH
79953: LD_VAR 0 3
79957: PPUSH
79958: LD_VAR 0 4
79962: PPUSH
79963: CALL_OW 1
79967: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79968: LD_ADDR_VAR 0 2
79972: PUSH
79973: LD_VAR 0 2
79977: PPUSH
79978: LD_INT 4
79980: PPUSH
79981: LD_VAR 0 2
79985: PUSH
79986: LD_INT 4
79988: ARRAY
79989: PUSH
79990: LD_VAR 0 4
79994: PLUS
79995: PPUSH
79996: CALL_OW 1
80000: ST_TO_ADDR
// end ;
80001: GO 79920
80003: POP
80004: POP
// end ;
80005: LD_VAR 0 2
80009: RET
// export function Length ( array ) ; begin
80010: LD_INT 0
80012: PPUSH
// result := array + 0 ;
80013: LD_ADDR_VAR 0 2
80017: PUSH
80018: LD_VAR 0 1
80022: PUSH
80023: LD_INT 0
80025: PLUS
80026: ST_TO_ADDR
// end ;
80027: LD_VAR 0 2
80031: RET
// export function PrepareArray ( array ) ; begin
80032: LD_INT 0
80034: PPUSH
// result := array diff 0 ;
80035: LD_ADDR_VAR 0 2
80039: PUSH
80040: LD_VAR 0 1
80044: PUSH
80045: LD_INT 0
80047: DIFF
80048: ST_TO_ADDR
// if not result [ 1 ] then
80049: LD_VAR 0 2
80053: PUSH
80054: LD_INT 1
80056: ARRAY
80057: NOT
80058: IFFALSE 80078
// result := Delete ( result , 1 ) ;
80060: LD_ADDR_VAR 0 2
80064: PUSH
80065: LD_VAR 0 2
80069: PPUSH
80070: LD_INT 1
80072: PPUSH
80073: CALL_OW 3
80077: ST_TO_ADDR
// end ; end_of_file
80078: LD_VAR 0 2
80082: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80083: LD_VAR 0 1
80087: PUSH
80088: LD_INT 200
80090: DOUBLE
80091: GREATEREQUAL
80092: IFFALSE 80100
80094: LD_INT 299
80096: DOUBLE
80097: LESSEQUAL
80098: IFTRUE 80102
80100: GO 80134
80102: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80103: LD_VAR 0 1
80107: PPUSH
80108: LD_VAR 0 2
80112: PPUSH
80113: LD_VAR 0 3
80117: PPUSH
80118: LD_VAR 0 4
80122: PPUSH
80123: LD_VAR 0 5
80127: PPUSH
80128: CALL 34934 0 5
80132: GO 80211
80134: LD_INT 300
80136: DOUBLE
80137: GREATEREQUAL
80138: IFFALSE 80146
80140: LD_INT 399
80142: DOUBLE
80143: LESSEQUAL
80144: IFTRUE 80148
80146: GO 80210
80148: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80149: LD_VAR 0 1
80153: PPUSH
80154: LD_VAR 0 2
80158: PPUSH
80159: LD_VAR 0 3
80163: PPUSH
80164: LD_VAR 0 4
80168: PPUSH
80169: LD_VAR 0 5
80173: PPUSH
80174: LD_VAR 0 6
80178: PPUSH
80179: LD_VAR 0 7
80183: PPUSH
80184: LD_VAR 0 8
80188: PPUSH
80189: LD_VAR 0 9
80193: PPUSH
80194: LD_VAR 0 10
80198: PPUSH
80199: LD_VAR 0 11
80203: PPUSH
80204: CALL 31263 0 11
80208: GO 80211
80210: POP
// end ;
80211: PPOPN 11
80213: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80214: LD_VAR 0 1
80218: PPUSH
80219: LD_VAR 0 2
80223: PPUSH
80224: LD_VAR 0 3
80228: PPUSH
80229: LD_VAR 0 4
80233: PPUSH
80234: LD_VAR 0 5
80238: PPUSH
80239: CALL 34670 0 5
// end ; end_of_file
80243: PPOPN 5
80245: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80246: LD_VAR 0 1
80250: PPUSH
80251: LD_VAR 0 2
80255: PPUSH
80256: LD_VAR 0 3
80260: PPUSH
80261: LD_VAR 0 4
80265: PPUSH
80266: LD_VAR 0 5
80270: PPUSH
80271: LD_VAR 0 6
80275: PPUSH
80276: CALL 18956 0 6
// end ;
80280: PPOPN 6
80282: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80283: LD_INT 0
80285: PPUSH
// begin if not units then
80286: LD_VAR 0 1
80290: NOT
80291: IFFALSE 80295
// exit ;
80293: GO 80295
// end ;
80295: PPOPN 7
80297: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80298: CALL 18927 0 0
// end ;
80302: PPOPN 1
80304: END
