// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10090 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10220 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11627 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13856 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 2000 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 2000
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8309 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6358 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6358 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6358 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6358 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6358 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6209 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6209 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8082 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6209 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6209 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8082 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10608 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5233
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6118 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10534 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5451 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5451 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9125 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 70054 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6358 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6499 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6574 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8481 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6358 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6913 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7521 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7812 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6209 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6209 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6209 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7960 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7960 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7960 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8082 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8082 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6118 0 1
3087: PPUSH
3088: CALL 5810 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6118 0 1
3108: PPUSH
3109: CALL 5810 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11332 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5451 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3480
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3478
// if GetLives ( ru_attack_list [ i ] ) >= 250 then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: IFFALSE 3476
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3417: LD_EXP 10
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_INT 81
3430: PUSH
3431: LD_EXP 10
3435: PUSH
3436: LD_VAR 0 1
3440: ARRAY
3441: PPUSH
3442: CALL_OW 255
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: PPUSH
3456: LD_EXP 10
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 74
3471: PPUSH
3472: CALL_OW 115
3476: GO 3393
3478: POP
3479: POP
// end ; if GetBehemoth ( 3 ) then
3480: LD_INT 3
3482: PPUSH
3483: CALL 11332 0 1
3487: IFFALSE 3859
// begin if ru_mech >= 4 then
3489: LD_EXP 22
3493: PUSH
3494: LD_INT 4
3496: GREATEREQUAL
3497: IFFALSE 3548
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3499: LD_ADDR_EXP 15
3503: PUSH
3504: LD_EXP 22
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: PUSH
3513: LD_EXP 22
3517: PUSH
3518: LD_INT 2
3520: ARRAY
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 3
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 4
3538: ARRAY
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
3546: GO 3558
// ru_behemoth_mechanic := ru_mech ;
3548: LD_ADDR_EXP 15
3552: PUSH
3553: LD_EXP 22
3557: ST_TO_ADDR
// for i = 1 to ru_mech do
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: DOUBLE
3564: LD_INT 1
3566: DEC
3567: ST_TO_ADDR
3568: LD_EXP 22
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3628
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3576: LD_EXP 22
3580: PUSH
3581: LD_VAR 0 1
3585: ARRAY
3586: PPUSH
3587: CALL_OW 310
3591: PUSH
3592: LD_EXP 22
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PUSH
3603: LD_EXP 15
3607: IN
3608: AND
3609: IFFALSE 3626
// ComExitBuilding ( ru_mech [ i ] ) ;
3611: LD_EXP 22
3615: PUSH
3616: LD_VAR 0 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 122
3626: GO 3573
3628: POP
3629: POP
// if UnitsInside ( ru_fac ) = 0 then
3630: LD_INT 14
3632: PPUSH
3633: CALL_OW 313
3637: PUSH
3638: LD_INT 0
3640: EQUAL
3641: IFFALSE 3708
// begin InitHc_All ;
3643: CALL_OW 584
// for i := 1 to 5 do
3647: LD_ADDR_VAR 0 1
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 5
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3706
// begin uc_side := 3 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 3
3670: ST_TO_ADDR
// uc_nation := 3 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 3
3678: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3679: LD_INT 0
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 7
3687: PPUSH
3688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3692: CALL_OW 44
3696: PPUSH
3697: LD_INT 14
3699: PPUSH
3700: CALL_OW 52
// end ;
3704: GO 3660
3706: POP
3707: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3708: LD_INT 12
3710: PPUSH
3711: LD_INT 22
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 21
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 70
3739: PUSH
3740: LD_INT 0
3742: GREATER
3743: IFFALSE 3803
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3745: LD_INT 3
3747: PPUSH
3748: CALL 11332 0 1
3752: PUSH
3753: LD_INT 1
3755: ARRAY
3756: PPUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 34
3769: PUSH
3770: LD_INT 49
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PPUSH
3786: LD_EXP 15
3790: PPUSH
3791: LD_INT 97
3793: PPUSH
3794: LD_INT 9
3796: PPUSH
3797: CALL 10829 0 5
3801: GO 3859
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3803: LD_INT 3
3805: PPUSH
3806: CALL 11332 0 1
3810: PUSH
3811: LD_INT 1
3813: ARRAY
3814: PPUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 49
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: PPUSH
3839: CALL_OW 69
3843: PPUSH
3844: LD_EXP 15
3848: PPUSH
3849: LD_INT 153
3851: PPUSH
3852: LD_INT 102
3854: PPUSH
3855: CALL 10829 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3859: LD_EXP 24
3863: PUSH
3864: LD_INT 0
3866: EQUAL
3867: PUSH
3868: LD_INT 44
3870: PPUSH
3871: LD_INT 3
3873: PPUSH
3874: CALL_OW 321
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3894
// ComChangeClassToBazooker ( ru_sold ) ;
3885: LD_EXP 20
3889: PPUSH
3890: CALL 9766 0 1
// if ru_bazz then
3894: LD_EXP 24
3898: IFFALSE 3912
// IntBazooka ( ru_bazz , 1 ) ;
3900: LD_EXP 24
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL 9485 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3912: LD_INT 67
3914: PPUSH
3915: LD_INT 39
3917: PPUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL_OW 440
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: PUSH
3930: LD_INT 20
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: CALL_OW 321
3940: PUSH
3941: LD_INT 2
3943: EQUAL
3944: AND
3945: IFFALSE 3966
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3947: LD_EXP 23
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_INT 67
3958: PPUSH
3959: LD_INT 39
3961: PPUSH
3962: CALL 9064 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3966: LD_INT 89
3968: PPUSH
3969: LD_INT 66
3971: PPUSH
3972: LD_INT 3
3974: PPUSH
3975: CALL_OW 440
3979: PUSH
3980: LD_INT 0
3982: EQUAL
3983: IFFALSE 4004
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
3985: LD_EXP 23
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_INT 87
3996: PPUSH
3997: LD_INT 60
3999: PPUSH
4000: CALL 9064 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4004: LD_INT 104
4006: PPUSH
4007: LD_INT 94
4009: PPUSH
4010: LD_INT 3
4012: PPUSH
4013: CALL_OW 440
4017: PUSH
4018: LD_INT 0
4020: EQUAL
4021: PUSH
4022: LD_INT 20
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: CALL_OW 321
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: AND
4037: IFFALSE 4058
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4039: LD_EXP 23
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: PPUSH
4048: LD_INT 104
4050: PPUSH
4051: LD_INT 94
4053: PPUSH
4054: CALL 9064 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4058: LD_INT 3
4060: PPUSH
4061: LD_INT 24
4063: PPUSH
4064: LD_INT 53
4066: PPUSH
4067: CALL 7960 0 3
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: PUSH
4076: LD_EXP 18
4080: AND
4081: IFFALSE 4222
// begin need_buldozer := false ;
4083: LD_ADDR_EXP 18
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4091: LD_INT 3
4093: PPUSH
4094: LD_INT 24
4096: PPUSH
4097: LD_INT 53
4099: PPUSH
4100: CALL 7960 0 3
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_INT 67
4111: PPUSH
4112: LD_INT 39
4114: PPUSH
4115: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 24
4124: PPUSH
4125: LD_INT 53
4127: PPUSH
4128: CALL 7960 0 3
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PPUSH
4137: LD_INT 71
4139: PPUSH
4140: LD_INT 10
4142: PPUSH
4143: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4147: LD_INT 3
4149: PPUSH
4150: LD_INT 24
4152: PPUSH
4153: LD_INT 53
4155: PPUSH
4156: CALL 7960 0 3
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: PPUSH
4165: LD_INT 15
4167: PPUSH
4168: CALL 5551 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 24
4177: PPUSH
4178: LD_INT 53
4180: PPUSH
4181: CALL 7960 0 3
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: PPUSH
4190: LD_INT 350
4192: PPUSH
4193: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 24
4202: PPUSH
4203: LD_INT 53
4205: PPUSH
4206: CALL 7960 0 3
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PPUSH
4215: LD_INT 14
4217: PPUSH
4218: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4222: LD_INT 67
4224: PPUSH
4225: LD_INT 39
4227: PPUSH
4228: LD_INT 3
4230: PPUSH
4231: CALL_OW 440
4235: PUSH
4236: LD_INT 67
4238: PPUSH
4239: LD_INT 39
4241: PPUSH
4242: CALL_OW 428
4246: PUSH
4247: LD_INT 0
4249: EQUAL
4250: AND
4251: PUSH
4252: LD_INT 79
4254: PPUSH
4255: LD_INT 45
4257: PPUSH
4258: CALL_OW 428
4262: PPUSH
4263: CALL_OW 266
4267: PUSH
4268: LD_INT 0
4270: EQUAL
4271: AND
4272: PUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_INT 79
4278: PPUSH
4279: LD_INT 45
4281: PPUSH
4282: CALL 5451 0 3
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: AND
4291: IFFALSE 4394
// begin for i = 1 to ru_eng do
4293: LD_ADDR_VAR 0 1
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_EXP 21
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4392
// if IsInUnit ( ru_eng [ i ] ) then
4311: LD_EXP 21
4315: PUSH
4316: LD_VAR 0 1
4320: ARRAY
4321: PPUSH
4322: CALL_OW 310
4326: IFFALSE 4345
// ComExitBuilding ( ru_eng [ i ] ) else
4328: LD_EXP 21
4332: PUSH
4333: LD_VAR 0 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 122
4343: GO 4390
// if not HasTask ( ru_eng [ i ] ) then
4345: LD_EXP 21
4349: PUSH
4350: LD_VAR 0 1
4354: ARRAY
4355: PPUSH
4356: CALL_OW 314
4360: NOT
4361: IFFALSE 4390
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: LD_INT 30
4376: PPUSH
4377: LD_INT 67
4379: PPUSH
4380: LD_INT 39
4382: PPUSH
4383: LD_INT 3
4385: PPUSH
4386: CALL_OW 145
4390: GO 4308
4392: POP
4393: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 79
4399: PPUSH
4400: LD_INT 45
4402: PPUSH
4403: CALL 5451 0 3
4407: PUSH
4408: LD_INT 0
4410: EQUAL
4411: IFFALSE 4607
// begin if HexInfo ( 79 , 45 ) = 0 then
4413: LD_INT 79
4415: PPUSH
4416: LD_INT 45
4418: PPUSH
4419: CALL_OW 428
4423: PUSH
4424: LD_INT 0
4426: EQUAL
4427: IFFALSE 4449
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4429: LD_EXP 21
4433: PPUSH
4434: LD_INT 79
4436: PPUSH
4437: LD_INT 45
4439: PPUSH
4440: LD_INT 3
4442: PPUSH
4443: CALL 6975 0 4
4447: GO 4607
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4449: LD_INT 89
4451: PPUSH
4452: LD_INT 66
4454: PPUSH
4455: CALL_OW 428
4459: PUSH
4460: LD_INT 0
4462: EQUAL
4463: PUSH
4464: LD_INT 89
4466: PPUSH
4467: LD_INT 66
4469: PPUSH
4470: LD_INT 3
4472: PPUSH
4473: CALL_OW 440
4477: AND
4478: IFFALSE 4607
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4480: LD_INT 79
4482: PPUSH
4483: LD_INT 45
4485: PPUSH
4486: CALL_OW 428
4490: PPUSH
4491: CALL_OW 274
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 100
4501: PPUSH
4502: CALL_OW 277
// for i = 1 to ru_eng do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 21
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4605
// if IsInUnit ( ru_eng [ i ] ) then
4524: LD_EXP 21
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 310
4539: IFFALSE 4558
// ComExitBuilding ( ru_eng [ i ] ) else
4541: LD_EXP 21
4545: PUSH
4546: LD_VAR 0 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 122
4556: GO 4603
// if not HasTask ( ru_eng [ i ] ) then
4558: LD_EXP 21
4562: PUSH
4563: LD_VAR 0 1
4567: ARRAY
4568: PPUSH
4569: CALL_OW 314
4573: NOT
4574: IFFALSE 4603
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: LD_INT 29
4589: PPUSH
4590: LD_INT 89
4592: PPUSH
4593: LD_INT 66
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: CALL_OW 145
4603: GO 4521
4605: POP
4606: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4607: LD_INT 3
4609: PPUSH
4610: LD_INT 29
4612: PPUSH
4613: CALL 6209 0 2
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: PUSH
4622: LD_INT 1
4624: PPUSH
4625: LD_INT 36
4627: PPUSH
4628: LD_INT 6
4630: PPUSH
4631: CALL 5451 0 3
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: AND
4640: PUSH
4641: LD_INT 3
4643: PPUSH
4644: CALL 6118 0 1
4648: PPUSH
4649: LD_INT 29
4651: PPUSH
4652: CALL 5694 0 2
4656: AND
4657: IFFALSE 4760
// begin for i = 1 to ru_eng do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_EXP 21
4673: PUSH
4674: FOR_TO
4675: IFFALSE 4758
// begin if IsInUnit ( ru_eng [ i ] ) then
4677: LD_EXP 21
4681: PUSH
4682: LD_VAR 0 1
4686: ARRAY
4687: PPUSH
4688: CALL_OW 310
4692: IFFALSE 4711
// ComExitBuilding ( ru_eng [ i ] ) else
4694: LD_EXP 21
4698: PUSH
4699: LD_VAR 0 1
4703: ARRAY
4704: PPUSH
4705: CALL_OW 122
4709: GO 4756
// if not HasTask ( ru_eng [ i ] ) then
4711: LD_EXP 21
4715: PUSH
4716: LD_VAR 0 1
4720: ARRAY
4721: PPUSH
4722: CALL_OW 314
4726: NOT
4727: IFFALSE 4756
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: LD_INT 29
4742: PPUSH
4743: LD_INT 33
4745: PPUSH
4746: LD_INT 4
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL_OW 205
// end ; end ;
4756: GO 4674
4758: POP
4759: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4760: LD_EXP 21
4764: PUSH
4765: LD_INT 79
4767: PPUSH
4768: LD_INT 45
4770: PPUSH
4771: CALL_OW 428
4775: PUSH
4776: LD_INT 0
4778: GREATER
4779: AND
4780: PUSH
4781: LD_INT 79
4783: PPUSH
4784: LD_INT 45
4786: PPUSH
4787: CALL_OW 428
4791: PPUSH
4792: CALL_OW 266
4796: PUSH
4797: LD_INT 0
4799: EQUAL
4800: AND
4801: IFFALSE 4961
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4803: LD_INT 79
4805: PPUSH
4806: LD_INT 45
4808: PPUSH
4809: CALL_OW 428
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: LD_INT 3
4821: EQUAL
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 79
4828: PPUSH
4829: LD_INT 45
4831: PPUSH
4832: CALL 5451 0 3
4836: PUSH
4837: LD_INT 0
4839: EQUAL
4840: AND
4841: PUSH
4842: LD_INT 79
4844: PPUSH
4845: LD_INT 45
4847: PPUSH
4848: CALL_OW 428
4852: PPUSH
4853: CALL_OW 274
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: CALL_OW 275
4865: PUSH
4866: LD_INT 10
4868: GREATEREQUAL
4869: AND
4870: IFFALSE 4961
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4872: LD_EXP 21
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: CALL_OW 310
4885: IFFALSE 4902
// ComExitBuilding ( ru_eng [ 1 ] ) else
4887: LD_EXP 21
4891: PUSH
4892: LD_INT 1
4894: ARRAY
4895: PPUSH
4896: CALL_OW 122
4900: GO 4961
// if not HasTask ( ru_eng [ 1 ] ) then
4902: LD_EXP 21
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: CALL_OW 314
4915: NOT
4916: IFFALSE 4961
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4918: LD_EXP 21
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_INT 79
4929: PPUSH
4930: LD_INT 45
4932: PPUSH
4933: CALL_OW 428
4937: PPUSH
4938: LD_INT 3
4940: PPUSH
4941: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4945: LD_EXP 21
4949: PUSH
4950: LD_INT 1
4952: ARRAY
4953: PPUSH
4954: LD_INT 2
4956: PPUSH
4957: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4961: LD_EXP 21
4965: PUSH
4966: LD_INT 2
4968: GREATER
4969: PUSH
4970: LD_INT 79
4972: PPUSH
4973: LD_INT 45
4975: PPUSH
4976: CALL_OW 428
4980: PUSH
4981: LD_INT 0
4983: GREATER
4984: AND
4985: PUSH
4986: LD_INT 79
4988: PPUSH
4989: LD_INT 45
4991: PPUSH
4992: CALL_OW 428
4996: PPUSH
4997: CALL_OW 266
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: IFFALSE 5166
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5008: LD_INT 79
5010: PPUSH
5011: LD_INT 45
5013: PPUSH
5014: CALL_OW 428
5018: PPUSH
5019: CALL_OW 255
5023: PUSH
5024: LD_INT 3
5026: EQUAL
5027: PUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 79
5033: PPUSH
5034: LD_INT 45
5036: PPUSH
5037: CALL 5451 0 3
5041: PUSH
5042: LD_INT 0
5044: EQUAL
5045: AND
5046: PUSH
5047: LD_INT 79
5049: PPUSH
5050: LD_INT 45
5052: PPUSH
5053: CALL_OW 428
5057: PPUSH
5058: CALL_OW 274
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 275
5070: PUSH
5071: LD_INT 20
5073: GREATER
5074: AND
5075: IFFALSE 5166
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5077: LD_EXP 21
5081: PUSH
5082: LD_INT 2
5084: ARRAY
5085: PPUSH
5086: CALL_OW 310
5090: IFFALSE 5107
// ComExitBuilding ( ru_eng [ 2 ] ) else
5092: LD_EXP 21
5096: PUSH
5097: LD_INT 2
5099: ARRAY
5100: PPUSH
5101: CALL_OW 122
5105: GO 5166
// if not HasTask ( ru_eng [ 2 ] ) then
5107: LD_EXP 21
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 314
5120: NOT
5121: IFFALSE 5166
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5123: LD_EXP 21
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_INT 79
5134: PPUSH
5135: LD_INT 45
5137: PPUSH
5138: CALL_OW 428
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5150: LD_EXP 21
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: LD_INT 2
5161: PPUSH
5162: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 59
5171: PPUSH
5172: LD_INT 60
5174: PPUSH
5175: CALL 5451 0 3
5179: PUSH
5180: LD_INT 0
5182: EQUAL
5183: PUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 67
5189: PPUSH
5190: LD_INT 76
5192: PPUSH
5193: CALL 5451 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: AND
5202: PUSH
5203: LD_INT 1
5205: PPUSH
5206: LD_INT 79
5208: PPUSH
5209: LD_INT 100
5211: PPUSH
5212: CALL 5451 0 3
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5233
// CollectCrates ( 3 , west_crates ) ;
5223: LD_INT 3
5225: PPUSH
5226: LD_INT 13
5228: PPUSH
5229: CALL 11376 0 2
// end ;
5233: PPOPN 10
5235: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5236: LD_OWVAR 1
5240: PUSH
5241: LD_INT 111300
5243: LESSEQUAL
5244: PUSH
5245: LD_EXP 30
5249: NOT
5250: OR
5251: IFFALSE 5448
5253: GO 5255
5255: DISABLE
5256: LD_INT 0
5258: PPUSH
// begin enable ;
5259: ENABLE
// uc_nation := 3 ;
5260: LD_ADDR_OWVAR 21
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_side := 3 ;
5268: LD_ADDR_OWVAR 20
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5276: LD_ADDR_OWVAR 37
5280: PUSH
5281: LD_INT 22
5283: ST_TO_ADDR
// vc_engine := engine_siberite ;
5284: LD_ADDR_OWVAR 39
5288: PUSH
5289: LD_INT 3
5291: ST_TO_ADDR
// vc_control := control_computer ;
5292: LD_ADDR_OWVAR 38
5296: PUSH
5297: LD_INT 3
5299: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5300: LD_ADDR_OWVAR 40
5304: PUSH
5305: LD_INT 51
5307: ST_TO_ADDR
// veh := CreateVehicle ;
5308: LD_ADDR_VAR 0 1
5312: PUSH
5313: CALL_OW 45
5317: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 4
5325: PPUSH
5326: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5330: LD_VAR 0 1
5334: PPUSH
5335: LD_INT 10
5337: PPUSH
5338: LD_INT 0
5340: PPUSH
5341: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_INT 1
5352: PUSH
5353: LD_INT 2
5355: PUSH
5356: LD_INT 3
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 4
5373: PPUSH
5374: CALL_OW 12
5378: ARRAY
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5387: LD_VAR 0 1
5391: PPUSH
5392: LD_INT 2
5394: PPUSH
5395: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_INT 10
5406: PPUSH
5407: CALL_OW 173
// Wait ( 0 0$10 ) ;
5411: LD_INT 350
5413: PPUSH
5414: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5418: LD_INT 35
5420: PPUSH
5421: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5425: LD_VAR 0 1
5429: PPUSH
5430: LD_INT 10
5432: PPUSH
5433: CALL_OW 308
5437: IFFALSE 5418
// RemoveUnit ( veh ) ;
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 64
// end ; end_of_file
5448: PPOPN 1
5450: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5451: LD_INT 0
5453: PPUSH
5454: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5455: LD_ADDR_VAR 0 5
5459: PUSH
5460: LD_INT 22
5462: PUSH
5463: LD_VAR 0 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 69
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 73
5491: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5492: LD_ADDR_VAR 0 4
5496: PUSH
5497: LD_VAR 0 5
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_VAR 0 3
5511: PPUSH
5512: CALL_OW 297
5516: PUSH
5517: LD_INT 15
5519: LESS
5520: PUSH
5521: LD_INT 2
5523: PPUSH
5524: LD_INT 22
5526: PUSH
5527: LD_VAR 0 1
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 70
5540: PUSH
5541: LD_INT 0
5543: GREATER
5544: OR
5545: ST_TO_ADDR
// end ;
5546: LD_VAR 0 4
5550: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5551: LD_INT 0
5553: PPUSH
5554: PPUSH
// area = ListEnvironmentArea ( area ) ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 353
5569: ST_TO_ADDR
// if bulldozer > 0 then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_INT 0
5577: GREATER
5578: IFFALSE 5689
// for i = 1 to area do
5580: LD_ADDR_VAR 0 4
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_VAR 0 2
5594: PUSH
5595: FOR_TO
5596: IFFALSE 5687
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_VAR 0 4
5607: ARRAY
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 4
5622: ARRAY
5623: PUSH
5624: LD_INT 2
5626: ARRAY
5627: PPUSH
5628: CALL_OW 351
5632: IFFALSE 5685
// if not HasTask ( bulldozer ) then
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 314
5643: NOT
5644: IFFALSE 5685
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5646: LD_VAR 0 1
5650: PPUSH
5651: LD_VAR 0 2
5655: PUSH
5656: LD_VAR 0 4
5660: ARRAY
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_VAR 0 2
5670: PUSH
5671: LD_VAR 0 4
5675: ARRAY
5676: PUSH
5677: LD_INT 2
5679: ARRAY
5680: PPUSH
5681: CALL_OW 171
5685: GO 5595
5687: POP
5688: POP
// end ;
5689: LD_VAR 0 3
5693: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
// pom := GetBase ( bdepot ) ;
5699: LD_ADDR_VAR 0 4
5703: PUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 274
5713: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5714: LD_ADDR_VAR 0 5
5718: PUSH
5719: LD_VAR 0 2
5723: PPUSH
5724: LD_VAR 0 1
5728: PPUSH
5729: CALL_OW 248
5733: PPUSH
5734: CALL_OW 450
5738: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5739: LD_VAR 0 4
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 275
5751: PUSH
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: GREATEREQUAL
5761: PUSH
5762: LD_VAR 0 4
5766: PPUSH
5767: LD_INT 3
5769: PPUSH
5770: CALL_OW 275
5774: PUSH
5775: LD_VAR 0 5
5779: PUSH
5780: LD_INT 3
5782: ARRAY
5783: GREATEREQUAL
5784: AND
5785: IFFALSE 5797
// result := true else
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
5795: GO 5805
// result := false ;
5797: LD_ADDR_VAR 0 3
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// end ;
5805: LD_VAR 0 3
5809: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
5814: PPUSH
// pom := GetBase ( bdepot ) ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 274
5829: ST_TO_ADDR
// sor := [ ] ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: EMPTY
5836: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5837: LD_ADDR_VAR 0 4
5841: PUSH
5842: LD_VAR 0 4
5846: PUSH
5847: LD_VAR 0 3
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 275
5859: ADD
5860: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_VAR 0 4
5870: PUSH
5871: LD_VAR 0 3
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: CALL_OW 275
5883: ADD
5884: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_VAR 0 4
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: CALL_OW 275
5907: ADD
5908: ST_TO_ADDR
// result := sor ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_VAR 0 4
5918: ST_TO_ADDR
// end ;
5919: LD_VAR 0 2
5923: RET
// export function Hex ( x , y ) ; begin
5924: LD_INT 0
5926: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5927: LD_VAR 0 1
5931: PPUSH
5932: LD_VAR 0 2
5936: PPUSH
5937: CALL_OW 488
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: CALL_OW 428
5956: PUSH
5957: LD_INT 0
5959: EQUAL
5960: AND
5961: IFFALSE 5973
// result := true else
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 1
5970: ST_TO_ADDR
5971: GO 5981
// result := false ;
5973: LD_ADDR_VAR 0 3
5977: PUSH
5978: LD_INT 0
5980: ST_TO_ADDR
// end ;
5981: LD_VAR 0 3
5985: RET
// export function NeedBuilding ( side , btype ) ; begin
5986: LD_INT 0
5988: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
5989: LD_INT 22
5991: PUSH
5992: LD_VAR 0 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_VAR 0 2
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 3
6015: PUSH
6016: LD_INT 57
6018: PUSH
6019: EMPTY
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PPUSH
6031: CALL_OW 69
6035: PUSH
6036: LD_INT 0
6038: EQUAL
6039: IFFALSE 6051
// result := true else
6041: LD_ADDR_VAR 0 3
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
6049: GO 6059
// result := false ;
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// end ;
6059: LD_VAR 0 3
6063: RET
// export function NeedBase ( side ) ; begin
6064: LD_INT 0
6066: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6067: LD_VAR 0 1
6071: PPUSH
6072: LD_INT 0
6074: PPUSH
6075: CALL 5986 0 2
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL 5986 0 2
6092: AND
6093: IFFALSE 6105
// result := true else
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
6103: GO 6113
// result := false ;
6105: LD_ADDR_VAR 0 2
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// end ;
6113: LD_VAR 0 2
6117: RET
// export function MyBase ( side ) ; begin
6118: LD_INT 0
6120: PPUSH
// if not NeedBase ( side ) then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL 6064 0 1
6130: NOT
6131: IFFALSE 6196
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6133: LD_ADDR_VAR 0 2
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 2
6152: PUSH
6153: LD_INT 30
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: ST_TO_ADDR
6194: GO 6204
// result := false ;
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 2
6208: RET
// export function GetBuilding ( side , btype ) ; begin
6209: LD_INT 0
6211: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6212: LD_INT 22
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 30
6226: PUSH
6227: LD_VAR 0 2
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: LD_INT 0
6247: GREATER
6248: IFFALSE 6290
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6250: LD_ADDR_VAR 0 3
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 30
6269: PUSH
6270: LD_VAR 0 2
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 69
6287: ST_TO_ADDR
6288: GO 6298
// result := false ;
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// end ;
6298: LD_VAR 0 3
6302: RET
// export function GetCrates ( side ) ; begin
6303: LD_INT 0
6305: PPUSH
// result := 0 ;
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// if MyBase ( side ) then
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL 6118 0 1
6323: IFFALSE 6353
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL 6118 0 1
6339: PPUSH
6340: CALL_OW 274
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 275
6352: ST_TO_ADDR
// end ;
6353: LD_VAR 0 2
6357: RET
// export function GetLabs ( side ) ; begin
6358: LD_INT 0
6360: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 30
6383: PUSH
6384: LD_INT 6
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 8
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 30
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: PPUSH
6424: CALL_OW 69
6428: ST_TO_ADDR
// end ;
6429: LD_VAR 0 2
6433: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
6438: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6439: LD_ADDR_VAR 0 3
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: LD_INT 1
6451: PPUSH
6452: CALL_OW 268
6456: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6457: LD_ADDR_VAR 0 4
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 2
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: LD_VAR 0 3
6484: PUSH
6485: LD_VAR 0 4
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// end ;
6494: LD_VAR 0 2
6498: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6499: LD_INT 0
6501: PPUSH
6502: PPUSH
// result := false ;
6503: LD_ADDR_VAR 0 3
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// for i = 1 to tlist do
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_VAR 0 2
6525: PUSH
6526: FOR_TO
6527: IFFALSE 6567
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6529: LD_VAR 0 2
6533: PUSH
6534: LD_VAR 0 4
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 321
6549: PUSH
6550: LD_INT 2
6552: NONEQUAL
6553: IFFALSE 6565
// begin result := true ;
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// break ;
6563: GO 6567
// end ;
6565: GO 6526
6567: POP
6568: POP
// end ;
6569: LD_VAR 0 3
6573: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
// lab := GetLabs ( side ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL 6358 0 1
6598: ST_TO_ADDR
// tmp := 0 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 0
6606: ST_TO_ADDR
// list := [ ] ;
6607: LD_ADDR_VAR 0 8
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6614: LD_ADDR_VAR 0 10
6618: PUSH
6619: LD_INT 35
6621: PUSH
6622: LD_INT 45
6624: PUSH
6625: LD_INT 46
6627: PUSH
6628: LD_INT 47
6630: PUSH
6631: LD_INT 1
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 48
6639: PUSH
6640: LD_INT 49
6642: PUSH
6643: LD_INT 50
6645: PUSH
6646: LD_INT 20
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: ST_TO_ADDR
// for i = 1 to tlist do
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 2
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6729
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_VAR 0 4
6688: ARRAY
6689: PPUSH
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 321
6699: PUSH
6700: LD_INT 2
6702: NONEQUAL
6703: IFFALSE 6727
// list := list ^ tlist [ i ] ;
6705: LD_ADDR_VAR 0 8
6709: PUSH
6710: LD_VAR 0 8
6714: PUSH
6715: LD_VAR 0 2
6719: PUSH
6720: LD_VAR 0 4
6724: ARRAY
6725: ADD
6726: ST_TO_ADDR
6727: GO 6676
6729: POP
6730: POP
// if list then
6731: LD_VAR 0 8
6735: IFFALSE 6900
// begin for i = 1 to lab do
6737: LD_ADDR_VAR 0 4
6741: PUSH
6742: DOUBLE
6743: LD_INT 1
6745: DEC
6746: ST_TO_ADDR
6747: LD_VAR 0 5
6751: PUSH
6752: FOR_TO
6753: IFFALSE 6823
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6755: LD_VAR 0 8
6759: PUSH
6760: LD_INT 1
6762: ARRAY
6763: PUSH
6764: LD_VAR 0 10
6768: IN
6769: PUSH
6770: LD_VAR 0 8
6774: PUSH
6775: LD_INT 1
6777: ARRAY
6778: PPUSH
6779: CALL_OW 481
6783: PUSH
6784: LD_VAR 0 5
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: PPUSH
6795: CALL 6434 0 1
6799: IN
6800: OR
6801: IFFALSE 6821
// begin mylab := lab [ i ] ;
6803: LD_ADDR_VAR 0 9
6807: PUSH
6808: LD_VAR 0 5
6812: PUSH
6813: LD_VAR 0 4
6817: ARRAY
6818: ST_TO_ADDR
// break ;
6819: GO 6823
// end ;
6821: GO 6752
6823: POP
6824: POP
// if mylab then
6825: LD_VAR 0 9
6829: IFFALSE 6890
// begin if BuildingStatus ( mylab ) = bs_idle then
6831: LD_VAR 0 9
6835: PPUSH
6836: CALL_OW 461
6840: PUSH
6841: LD_INT 2
6843: EQUAL
6844: IFFALSE 6888
// for i = 1 to list do
6846: LD_ADDR_VAR 0 4
6850: PUSH
6851: DOUBLE
6852: LD_INT 1
6854: DEC
6855: ST_TO_ADDR
6856: LD_VAR 0 8
6860: PUSH
6861: FOR_TO
6862: IFFALSE 6886
// AddComResearch ( mylab , list [ i ] ) ;
6864: LD_VAR 0 9
6868: PPUSH
6869: LD_VAR 0 8
6873: PUSH
6874: LD_VAR 0 4
6878: ARRAY
6879: PPUSH
6880: CALL_OW 184
6884: GO 6861
6886: POP
6887: POP
// end else
6888: GO 6898
// result := false ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// end else
6898: GO 6908
// result := false ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// end ;
6908: LD_VAR 0 3
6912: RET
// export function GetTowers ( side ) ; begin
6913: LD_INT 0
6915: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6916: LD_ADDR_VAR 0 2
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_VAR 0 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 32
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 30
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 2
6974: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
// if Hex ( x , y ) then
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_VAR 0 3
6988: PPUSH
6989: CALL 5924 0 2
6993: IFFALSE 7068
// for i = 1 to plist do
6995: LD_ADDR_VAR 0 6
6999: PUSH
7000: DOUBLE
7001: LD_INT 1
7003: DEC
7004: ST_TO_ADDR
7005: LD_VAR 0 1
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7066
// if not HasTask ( plist [ i ] ) then
7013: LD_VAR 0 1
7017: PUSH
7018: LD_VAR 0 6
7022: ARRAY
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: IFFALSE 7064
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: LD_INT 0
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: LD_VAR 0 4
7059: PPUSH
7060: CALL_OW 145
7064: GO 7010
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 5
7072: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 266
7086: PUSH
7087: LD_INT 0
7089: EQUAL
7090: PUSH
7091: LD_VAR 0 2
7095: PPUSH
7096: LD_INT 1
7098: PPUSH
7099: CALL 5694 0 2
7103: AND
7104: PUSH
7105: LD_VAR 0 1
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: CALL_OW 255
7118: PPUSH
7119: CALL_OW 345
7123: NOT
7124: AND
7125: IFFALSE 7221
// begin ComUpgrade ( bident ) ;
7127: LD_VAR 0 2
7131: PPUSH
7132: CALL_OW 146
// for i = 1 to plist do
7136: LD_ADDR_VAR 0 4
7140: PUSH
7141: DOUBLE
7142: LD_INT 1
7144: DEC
7145: ST_TO_ADDR
7146: LD_VAR 0 1
7150: PUSH
7151: FOR_TO
7152: IFFALSE 7209
// if not HasTask ( plist [ i ] ) then
7154: LD_VAR 0 1
7158: PUSH
7159: LD_VAR 0 4
7163: ARRAY
7164: PPUSH
7165: CALL_OW 314
7169: NOT
7170: IFFALSE 7207
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: CALL_OW 250
7192: PPUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 251
7202: PPUSH
7203: CALL_OW 111
7207: GO 7151
7209: POP
7210: POP
// result := true ;
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// end else
7219: GO 7229
// result := false ;
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// end ;
7229: LD_VAR 0 3
7233: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7238: LD_VAR 0 1
7242: PUSH
7243: LD_INT 1
7245: ARRAY
7246: PPUSH
7247: CALL_OW 255
7251: PPUSH
7252: CALL 6303 0 1
7256: PUSH
7257: LD_INT 20
7259: GREATEREQUAL
7260: PUSH
7261: LD_VAR 0 2
7265: PPUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL 5924 0 2
7275: AND
7276: IFFALSE 7361
// begin for i = 1 to plist do
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: DOUBLE
7284: LD_INT 1
7286: DEC
7287: ST_TO_ADDR
7288: LD_VAR 0 1
7292: PUSH
7293: FOR_TO
7294: IFFALSE 7349
// if not HasTask ( plist [ i ] ) then
7296: LD_VAR 0 1
7300: PUSH
7301: LD_VAR 0 6
7305: ARRAY
7306: PPUSH
7307: CALL_OW 314
7311: NOT
7312: IFFALSE 7347
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: LD_VAR 0 3
7337: PPUSH
7338: LD_VAR 0 4
7342: PPUSH
7343: CALL_OW 145
7347: GO 7293
7349: POP
7350: POP
// result := true ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// end else
7359: GO 7369
// result := false ;
7361: LD_ADDR_VAR 0 5
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// end ;
7369: LD_VAR 0 5
7373: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7374: LD_INT 0
7376: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7377: LD_VAR 0 1
7381: PPUSH
7382: LD_INT 1
7384: PPUSH
7385: CALL_OW 268
7389: PUSH
7390: LD_INT 9
7392: EQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: CALL_OW 268
7406: PUSH
7407: LD_INT 9
7409: EQUAL
7410: AND
7411: IFFALSE 7508
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_VAR 0 2
7422: PPUSH
7423: CALL 5694 0 2
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: CALL 5694 0 2
7442: AND
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 461
7453: PUSH
7454: LD_INT 2
7456: EQUAL
7457: AND
7458: IFFALSE 7498
// begin ComUpgradeLab ( lab , bkind1 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_VAR 0 2
7469: PPUSH
7470: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: LD_VAR 0 3
7483: PPUSH
7484: CALL_OW 207
// result := true ;
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// end else
7496: GO 7506
// result := false ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 0
7505: ST_TO_ADDR
// end else
7506: GO 7516
// result := false ;
7508: LD_ADDR_VAR 0 4
7512: PUSH
7513: LD_INT 0
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 4
7520: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7521: LD_INT 0
7523: PPUSH
7524: PPUSH
7525: PPUSH
7526: PPUSH
7527: PPUSH
// p := 1 ;
7528: LD_ADDR_VAR 0 6
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 4
7553: DIVREAL
7554: PUSH
7555: FOR_TO
7556: IFFALSE 7805
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7558: LD_VAR 0 2
7562: PUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 1
7570: PLUS
7571: ARRAY
7572: PPUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 6
7582: PUSH
7583: LD_INT 2
7585: PLUS
7586: ARRAY
7587: PPUSH
7588: CALL_OW 428
7592: PUSH
7593: LD_INT 0
7595: EQUAL
7596: PUSH
7597: LD_VAR 0 2
7601: PUSH
7602: LD_VAR 0 6
7606: PUSH
7607: LD_INT 1
7609: PLUS
7610: ARRAY
7611: PPUSH
7612: LD_VAR 0 2
7616: PUSH
7617: LD_VAR 0 6
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: ARRAY
7626: PPUSH
7627: CALL 5924 0 2
7631: AND
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PPUSH
7642: CALL_OW 255
7646: PPUSH
7647: CALL 6303 0 1
7651: PUSH
7652: LD_INT 20
7654: GREATEREQUAL
7655: AND
7656: IFFALSE 7773
// begin for c = 1 to plist do
7658: LD_ADDR_VAR 0 7
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 1
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7767
// if not HasTask ( plist [ c ] ) then
7676: LD_VAR 0 1
7680: PUSH
7681: LD_VAR 0 7
7685: ARRAY
7686: PPUSH
7687: CALL_OW 314
7691: NOT
7692: IFFALSE 7765
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: LD_VAR 0 2
7709: PUSH
7710: LD_VAR 0 6
7714: ARRAY
7715: PPUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 1
7728: PLUS
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 2
7735: PUSH
7736: LD_VAR 0 6
7740: PUSH
7741: LD_INT 2
7743: PLUS
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 6
7755: PUSH
7756: LD_INT 3
7758: PLUS
7759: ARRAY
7760: PPUSH
7761: CALL_OW 145
7765: GO 7673
7767: POP
7768: POP
// break ;
7769: GO 7805
// end else
7771: GO 7803
// if ( p + 4 < tlist ) then
7773: LD_VAR 0 6
7777: PUSH
7778: LD_INT 4
7780: PLUS
7781: PUSH
7782: LD_VAR 0 2
7786: LESS
7787: IFFALSE 7803
// p := p + 4 ;
7789: LD_ADDR_VAR 0 6
7793: PUSH
7794: LD_VAR 0 6
7798: PUSH
7799: LD_INT 4
7801: PLUS
7802: ST_TO_ADDR
// end ;
7803: GO 7555
7805: POP
7806: POP
// end ;
7807: LD_VAR 0 3
7811: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
// tmp := GetTowers ( side ) ;
7818: LD_ADDR_VAR 0 5
7822: PUSH
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL 6913 0 1
7832: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7833: LD_ADDR_VAR 0 6
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 3
7845: PPUSH
7846: CALL 6209 0 2
7850: PUSH
7851: LD_INT 1
7853: ARRAY
7854: ST_TO_ADDR
// if fac then
7855: LD_VAR 0 6
7859: IFFALSE 7955
// for i = 1 to tmp do
7861: LD_ADDR_VAR 0 4
7865: PUSH
7866: DOUBLE
7867: LD_INT 1
7869: DEC
7870: ST_TO_ADDR
7871: LD_VAR 0 5
7875: PUSH
7876: FOR_TO
7877: IFFALSE 7953
// if GetBWeapon ( tmp [ i ] ) = 0 then
7879: LD_VAR 0 5
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PPUSH
7890: CALL_OW 269
7894: PUSH
7895: LD_INT 0
7897: EQUAL
7898: IFFALSE 7951
// begin if BuildingStatus ( fac ) = bs_idle then
7900: LD_VAR 0 6
7904: PPUSH
7905: CALL_OW 461
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: IFFALSE 7949
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7915: LD_VAR 0 5
7919: PUSH
7920: LD_VAR 0 4
7924: ARRAY
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: PPUSH
7934: LD_VAR 0 2
7938: PPUSH
7939: CALL_OW 12
7943: ARRAY
7944: PPUSH
7945: CALL_OW 148
// break ;
7949: GO 7953
// end ;
7951: GO 7876
7953: POP
7954: POP
// end ;
7955: LD_VAR 0 3
7959: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7960: LD_INT 0
7962: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7963: LD_INT 22
7965: PUSH
7966: LD_VAR 0 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 34
7977: PUSH
7978: LD_VAR 0 3
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 31
7989: PUSH
7990: LD_VAR 0 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: PPUSH
8007: CALL_OW 69
8011: IFFALSE 8069
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_INT 22
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 34
8032: PUSH
8033: LD_VAR 0 3
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 31
8044: PUSH
8045: LD_VAR 0 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: ST_TO_ADDR
8067: GO 8077
// result := false ;
8069: LD_ADDR_VAR 0 4
8073: PUSH
8074: LD_INT 0
8076: ST_TO_ADDR
// end ;
8077: LD_VAR 0 4
8081: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8082: LD_INT 0
8084: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: LD_VAR 0 5
8109: PPUSH
8110: CALL_OW 448
8114: PUSH
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_VAR 0 3
8124: PPUSH
8125: LD_VAR 0 4
8129: PPUSH
8130: LD_VAR 0 5
8134: PPUSH
8135: CALL_OW 449
8139: PUSH
8140: LD_INT 1
8142: ARRAY
8143: PUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL 5810 0 1
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: LESSEQUAL
8158: AND
8159: PUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: LD_VAR 0 3
8169: PPUSH
8170: LD_VAR 0 4
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 449
8184: PUSH
8185: LD_INT 2
8187: ARRAY
8188: PUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL 5810 0 1
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: LESSEQUAL
8203: AND
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_VAR 0 3
8214: PPUSH
8215: LD_VAR 0 4
8219: PPUSH
8220: LD_VAR 0 5
8224: PPUSH
8225: CALL_OW 449
8229: PUSH
8230: LD_INT 3
8232: ARRAY
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL 5810 0 1
8243: PUSH
8244: LD_INT 3
8246: ARRAY
8247: LESSEQUAL
8248: AND
8249: IFFALSE 8296
// begin if debug then
8251: LD_EXP 1
8255: IFFALSE 8265
// display_strings := Factory work! ;
8257: LD_ADDR_OWVAR 47
8261: PUSH
8262: LD_STRING Factory work!
8264: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_VAR 0 5
8289: PPUSH
8290: CALL_OW 125
// end else
8294: GO 8304
// result := false ;
8296: LD_ADDR_VAR 0 6
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// end ;
8304: LD_VAR 0 6
8308: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8309: LD_INT 0
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8315: LD_ADDR_VAR 0 6
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 30
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PPUSH
8348: CALL_OW 69
8352: ST_TO_ADDR
// tmp := [ ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for i = 1 to filter do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_VAR 0 6
8374: PUSH
8375: FOR_TO
8376: IFFALSE 8464
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_VAR 0 5
8387: PUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_VAR 0 4
8397: ARRAY
8398: PPUSH
8399: CALL_OW 266
8403: PUSH
8404: LD_VAR 0 6
8408: PUSH
8409: LD_VAR 0 4
8413: ARRAY
8414: PPUSH
8415: CALL_OW 250
8419: PUSH
8420: LD_VAR 0 6
8424: PUSH
8425: LD_VAR 0 4
8429: ARRAY
8430: PPUSH
8431: CALL_OW 251
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_VAR 0 4
8445: ARRAY
8446: PPUSH
8447: CALL_OW 254
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: ADD
8461: ST_TO_ADDR
// end ;
8462: GO 8375
8464: POP
8465: POP
// result := tmp ;
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: LD_VAR 0 5
8475: ST_TO_ADDR
// end ;
8476: LD_VAR 0 3
8480: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8481: LD_INT 0
8483: PPUSH
8484: PPUSH
8485: PPUSH
// for i = 1 to list do
8486: LD_ADDR_VAR 0 4
8490: PUSH
8491: DOUBLE
8492: LD_INT 1
8494: DEC
8495: ST_TO_ADDR
8496: LD_VAR 0 2
8500: PUSH
8501: FOR_TO
8502: IFFALSE 9057
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8504: LD_VAR 0 2
8508: PUSH
8509: LD_VAR 0 4
8513: ARRAY
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 2
8523: PUSH
8524: LD_VAR 0 4
8528: ARRAY
8529: PUSH
8530: LD_INT 2
8532: ARRAY
8533: PPUSH
8534: CALL_OW 428
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: IFFALSE 8828
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8544: LD_VAR 0 2
8548: PUSH
8549: LD_VAR 0 4
8553: ARRAY
8554: PUSH
8555: LD_INT 1
8557: ARRAY
8558: PPUSH
8559: LD_VAR 0 2
8563: PUSH
8564: LD_VAR 0 4
8568: ARRAY
8569: PUSH
8570: LD_INT 2
8572: ARRAY
8573: PPUSH
8574: CALL_OW 428
8578: PPUSH
8579: CALL_OW 248
8583: PUSH
8584: LD_INT 3
8586: EQUAL
8587: IFFALSE 8713
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_VAR 0 4
8598: ARRAY
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_VAR 0 4
8613: ARRAY
8614: PUSH
8615: LD_INT 2
8617: ARRAY
8618: PPUSH
8619: CALL_OW 428
8623: PPUSH
8624: CALL_OW 274
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: CALL_OW 275
8636: PUSH
8637: LD_INT 15
8639: GREATEREQUAL
8640: IFFALSE 8711
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8642: LD_VAR 0 2
8646: PUSH
8647: LD_VAR 0 4
8651: ARRAY
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 2
8661: PUSH
8662: LD_VAR 0 4
8666: ARRAY
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: CALL_OW 428
8676: PPUSH
8677: LD_VAR 0 2
8681: PUSH
8682: LD_VAR 0 4
8686: ARRAY
8687: PUSH
8688: LD_INT 4
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 2
8696: PUSH
8697: LD_VAR 0 4
8701: ARRAY
8702: PUSH
8703: LD_INT 5
8705: ARRAY
8706: PPUSH
8707: CALL 7374 0 3
// end else
8711: GO 8782
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8713: LD_VAR 0 2
8717: PUSH
8718: LD_VAR 0 4
8722: ARRAY
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: LD_VAR 0 2
8732: PUSH
8733: LD_VAR 0 4
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: PPUSH
8743: CALL_OW 428
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 4
8761: ARRAY
8762: PPUSH
8763: LD_VAR 0 2
8767: PUSH
8768: LD_VAR 0 4
8772: ARRAY
8773: PUSH
8774: LD_INT 5
8776: ARRAY
8777: PPUSH
8778: CALL 7374 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8782: LD_VAR 0 1
8786: PPUSH
8787: LD_VAR 0 2
8791: PUSH
8792: LD_VAR 0 4
8796: ARRAY
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_VAR 0 4
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: PPUSH
8817: CALL_OW 428
8821: PPUSH
8822: CALL 10326 0 2
// end else
8826: GO 9055
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8828: LD_VAR 0 1
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PPUSH
8837: CALL_OW 255
8841: PPUSH
8842: CALL 6118 0 1
8846: PPUSH
8847: LD_INT 6
8849: PPUSH
8850: CALL 5694 0 2
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: CALL_OW 255
8868: PPUSH
8869: CALL 6118 0 1
8873: PPUSH
8874: LD_VAR 0 2
8878: PUSH
8879: LD_VAR 0 4
8883: ARRAY
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PPUSH
8889: CALL 5694 0 2
8893: AND
8894: PUSH
8895: LD_VAR 0 1
8899: PUSH
8900: LD_INT 1
8902: ARRAY
8903: PPUSH
8904: CALL_OW 255
8908: PPUSH
8909: CALL 6118 0 1
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: ARRAY
8924: PUSH
8925: LD_INT 5
8927: ARRAY
8928: PPUSH
8929: CALL 5694 0 2
8933: AND
8934: IFFALSE 9055
// for p = 1 to plist do
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_VAR 0 1
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9053
// if IsInUnit ( plist [ p ] ) then
8954: LD_VAR 0 1
8958: PUSH
8959: LD_VAR 0 5
8963: ARRAY
8964: PPUSH
8965: CALL_OW 310
8969: IFFALSE 8988
// ComExitBuilding ( plist [ p ] ) else
8971: LD_VAR 0 1
8975: PUSH
8976: LD_VAR 0 5
8980: ARRAY
8981: PPUSH
8982: CALL_OW 122
8986: GO 9051
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
8988: LD_VAR 0 1
8992: PUSH
8993: LD_VAR 0 5
8997: ARRAY
8998: PPUSH
8999: LD_INT 6
9001: PPUSH
9002: LD_VAR 0 2
9006: PUSH
9007: LD_VAR 0 4
9011: ARRAY
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: LD_VAR 0 2
9021: PUSH
9022: LD_VAR 0 4
9026: ARRAY
9027: PUSH
9028: LD_INT 2
9030: ARRAY
9031: PPUSH
9032: LD_VAR 0 2
9036: PUSH
9037: LD_VAR 0 4
9041: ARRAY
9042: PUSH
9043: LD_INT 3
9045: ARRAY
9046: PPUSH
9047: CALL_OW 145
9051: GO 8951
9053: POP
9054: POP
// end ;
9055: GO 8501
9057: POP
9058: POP
// end ;
9059: LD_VAR 0 3
9063: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9064: LD_INT 0
9066: PPUSH
// if IsInUnit ( sci ) then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 310
9076: IFFALSE 9089
// ComExitBuilding ( sci ) else
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 122
9087: GO 9120
// if not HasTask ( sci ) then
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 314
9098: NOT
9099: IFFALSE 9120
// begin ComMoveXY ( sci , x , y ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: CALL_OW 111
// end ; end ;
9120: LD_VAR 0 4
9124: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
9130: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_INT 22
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 21
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: PUSH
9167: LD_VAR 0 3
9171: DIFF
9172: ST_TO_ADDR
// tmp := tag_list ;
9173: LD_ADDR_VAR 0 7
9177: PUSH
9178: LD_VAR 0 2
9182: ST_TO_ADDR
// for i = 1 to filter do
9183: LD_ADDR_VAR 0 5
9187: PUSH
9188: DOUBLE
9189: LD_INT 1
9191: DEC
9192: ST_TO_ADDR
9193: LD_VAR 0 6
9197: PUSH
9198: FOR_TO
9199: IFFALSE 9468
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9201: LD_VAR 0 6
9205: PUSH
9206: LD_VAR 0 5
9210: ARRAY
9211: PPUSH
9212: CALL_OW 256
9216: PUSH
9217: LD_INT 1000
9219: EQUAL
9220: PUSH
9221: LD_VAR 0 6
9225: PUSH
9226: LD_VAR 0 5
9230: ARRAY
9231: PPUSH
9232: CALL_OW 110
9236: PUSH
9237: LD_INT 100
9239: GREATEREQUAL
9240: AND
9241: IFFALSE 9283
// begin SetTag ( filter [ i ] , 0 ) ;
9243: LD_VAR 0 6
9247: PUSH
9248: LD_VAR 0 5
9252: ARRAY
9253: PPUSH
9254: LD_INT 0
9256: PPUSH
9257: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9261: LD_ADDR_VAR 0 7
9265: PUSH
9266: LD_VAR 0 7
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_VAR 0 5
9280: ARRAY
9281: DIFF
9282: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9283: LD_VAR 0 6
9287: PUSH
9288: LD_VAR 0 5
9292: ARRAY
9293: PPUSH
9294: CALL_OW 256
9298: PUSH
9299: LD_INT 1000
9301: LESS
9302: IFFALSE 9466
// begin if not filter [ i ] in tmp then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_VAR 0 5
9313: ARRAY
9314: PUSH
9315: LD_VAR 0 7
9319: IN
9320: NOT
9321: IFFALSE 9345
// tmp := tmp ^ filter [ i ] ;
9323: LD_ADDR_VAR 0 7
9327: PUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_VAR 0 6
9337: PUSH
9338: LD_VAR 0 5
9342: ARRAY
9343: ADD
9344: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9345: LD_VAR 0 6
9349: PUSH
9350: LD_VAR 0 5
9354: ARRAY
9355: PPUSH
9356: CALL_OW 256
9360: PUSH
9361: LD_INT 250
9363: LESS
9364: IFFALSE 9386
// SetTag ( filter [ i ] , 100 ) else
9366: LD_VAR 0 6
9370: PUSH
9371: LD_VAR 0 5
9375: ARRAY
9376: PPUSH
9377: LD_INT 100
9379: PPUSH
9380: CALL_OW 109
9384: GO 9466
// if GetLives ( filter [ i ] ) < 500 then
9386: LD_VAR 0 6
9390: PUSH
9391: LD_VAR 0 5
9395: ARRAY
9396: PPUSH
9397: CALL_OW 256
9401: PUSH
9402: LD_INT 500
9404: LESS
9405: IFFALSE 9427
// SetTag ( filter [ i ] , 101 ) else
9407: LD_VAR 0 6
9411: PUSH
9412: LD_VAR 0 5
9416: ARRAY
9417: PPUSH
9418: LD_INT 101
9420: PPUSH
9421: CALL_OW 109
9425: GO 9466
// if GetLives ( filter [ i ] ) < 1000 then
9427: LD_VAR 0 6
9431: PUSH
9432: LD_VAR 0 5
9436: ARRAY
9437: PPUSH
9438: CALL_OW 256
9442: PUSH
9443: LD_INT 1000
9445: LESS
9446: IFFALSE 9466
// SetTag ( filter [ i ] , 102 ) ;
9448: LD_VAR 0 6
9452: PUSH
9453: LD_VAR 0 5
9457: ARRAY
9458: PPUSH
9459: LD_INT 102
9461: PPUSH
9462: CALL_OW 109
// end ; end ;
9466: GO 9198
9468: POP
9469: POP
// result := tmp ;
9470: LD_ADDR_VAR 0 4
9474: PUSH
9475: LD_VAR 0 7
9479: ST_TO_ADDR
// end ;
9480: LD_VAR 0 4
9484: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9492: LD_ADDR_VAR 0 7
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 3
9545: PPUSH
9546: CALL_OW 12
9550: ST_TO_ADDR
// if filter > 0 then
9551: LD_VAR 0 7
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 9761
// for i = 1 to list do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_VAR 0 1
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9759
// for ta in filter do
9579: LD_ADDR_VAR 0 4
9583: PUSH
9584: LD_VAR 0 7
9588: PUSH
9589: FOR_IN
9590: IFFALSE 9755
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9592: LD_VAR 0 1
9596: PUSH
9597: LD_VAR 0 6
9601: ARRAY
9602: PPUSH
9603: LD_VAR 0 4
9607: PPUSH
9608: CALL_OW 296
9612: PUSH
9613: LD_INT 13
9615: LESSEQUAL
9616: IFFALSE 9753
// begin case c of 1 :
9618: LD_VAR 0 5
9622: PUSH
9623: LD_INT 1
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9669
9631: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9632: LD_VAR 0 1
9636: PUSH
9637: LD_VAR 0 6
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 4
9647: PPUSH
9648: CALL_OW 250
9652: PPUSH
9653: LD_VAR 0 4
9657: PPUSH
9658: CALL_OW 251
9662: PPUSH
9663: CALL_OW 154
9667: GO 9753
9669: LD_INT 2
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9741
9677: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9678: LD_VAR 0 1
9682: PUSH
9683: LD_VAR 0 6
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 4
9693: PPUSH
9694: CALL_OW 250
9698: PUSH
9699: LD_INT 1
9701: NEG
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 12
9710: PLUS
9711: PPUSH
9712: LD_VAR 0 4
9716: PPUSH
9717: CALL_OW 251
9721: PUSH
9722: LD_INT 1
9724: NEG
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 12
9733: PLUS
9734: PPUSH
9735: CALL_OW 153
9739: GO 9753
9741: LD_INT 3
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9752
9749: POP
// ; end ;
9750: GO 9753
9752: POP
// end ; end ;
9753: GO 9589
9755: POP
9756: POP
9757: GO 9576
9759: POP
9760: POP
// end ;
9761: LD_VAR 0 3
9765: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9766: LD_INT 0
9768: PPUSH
9769: PPUSH
// for i = 1 to plist do
9770: LD_ADDR_VAR 0 3
9774: PUSH
9775: DOUBLE
9776: LD_INT 1
9778: DEC
9779: ST_TO_ADDR
9780: LD_VAR 0 1
9784: PUSH
9785: FOR_TO
9786: IFFALSE 9988
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9788: LD_VAR 0 1
9792: PUSH
9793: LD_VAR 0 3
9797: ARRAY
9798: PPUSH
9799: CALL_OW 310
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: PPUSH
9817: CALL_OW 69
9821: IN
9822: NOT
9823: IFFALSE 9968
// begin if IsInUnit ( plist [ i ] ) then
9825: LD_VAR 0 1
9829: PUSH
9830: LD_VAR 0 3
9834: ARRAY
9835: PPUSH
9836: CALL_OW 310
9840: IFFALSE 9859
// ComExitBuilding ( plist [ i ] ) else
9842: LD_VAR 0 1
9846: PUSH
9847: LD_VAR 0 3
9851: ARRAY
9852: PPUSH
9853: CALL_OW 122
9857: GO 9966
// if not HasTask ( plist [ i ] ) then
9859: LD_VAR 0 1
9863: PUSH
9864: LD_VAR 0 3
9868: ARRAY
9869: PPUSH
9870: CALL_OW 314
9874: NOT
9875: IFFALSE 9966
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: CALL_OW 255
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 30
9911: PUSH
9912: LD_INT 5
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: PPUSH
9928: LD_VAR 0 1
9932: PUSH
9933: LD_VAR 0 3
9937: ARRAY
9938: PPUSH
9939: CALL_OW 74
9943: PPUSH
9944: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9948: LD_VAR 0 1
9952: PUSH
9953: LD_VAR 0 3
9957: ARRAY
9958: PPUSH
9959: LD_INT 9
9961: PPUSH
9962: CALL_OW 183
// end ; end else
9966: GO 9986
// ComChangeProfession ( plist [ i ] , 9 ) ;
9968: LD_VAR 0 1
9972: PUSH
9973: LD_VAR 0 3
9977: ARRAY
9978: PPUSH
9979: LD_INT 9
9981: PPUSH
9982: CALL_OW 123
9986: GO 9785
9988: POP
9989: POP
// end ;
9990: LD_VAR 0 2
9994: RET
// export function GetHuman ( side ) ; begin
9995: LD_INT 0
9997: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_VAR 0 1
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 21
10017: PUSH
10018: LD_INT 1
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 25
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 25
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: ST_TO_ADDR
// end ;
10085: LD_VAR 0 2
10089: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
// uc_side := 0 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_nation := 0 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: DOUBLE
10117: LD_INT 1
10119: DEC
10120: ST_TO_ADDR
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: LD_INT 6
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: LD_OWVAR 67
10139: ARRAY
10140: PUSH
10141: FOR_TO
10142: IFFALSE 10213
// begin hc_class = class_tiger ;
10144: LD_ADDR_OWVAR 28
10148: PUSH
10149: LD_INT 14
10151: ST_TO_ADDR
// hc_gallery = sandnature ;
10152: LD_ADDR_OWVAR 33
10156: PUSH
10157: LD_STRING sandnature
10159: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10160: LD_ADDR_OWVAR 35
10164: PUSH
10165: LD_INT 0
10167: PPUSH
10168: LD_INT 50
10170: PPUSH
10171: CALL_OW 12
10175: ST_TO_ADDR
// hc_face_number = 3 ;
10176: LD_ADDR_OWVAR 34
10180: PUSH
10181: LD_INT 3
10183: ST_TO_ADDR
// tiger := CreateHuman ;
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: CALL_OW 44
10193: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: LD_INT 0
10206: PPUSH
10207: CALL_OW 49
// end ;
10211: GO 10141
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10220: LD_INT 0
10222: PPUSH
10223: PPUSH
10224: PPUSH
// uc_side := 0 ;
10225: LD_ADDR_OWVAR 20
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// uc_nation := 0 ;
10233: LD_ADDR_OWVAR 21
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// for i = 1 to 8 do
10241: LD_ADDR_VAR 0 4
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_INT 8
10253: PUSH
10254: FOR_TO
10255: IFFALSE 10319
// begin hc_class = class_apeman ;
10257: LD_ADDR_OWVAR 28
10261: PUSH
10262: LD_INT 12
10264: ST_TO_ADDR
// hc_gallery =  ;
10265: LD_ADDR_OWVAR 33
10269: PUSH
10270: LD_STRING 
10272: ST_TO_ADDR
// hc_agressivity = Rand ( - 2 , 2 ) ;
10273: LD_ADDR_OWVAR 35
10277: PUSH
10278: LD_INT 2
10280: NEG
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: CALL_OW 12
10289: ST_TO_ADDR
// ape := CreateHuman ;
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: CALL_OW 44
10299: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// end ;
10317: GO 10254
10319: POP
10320: POP
// end ;
10321: LD_VAR 0 2
10325: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// if BuildingStatus ( b ) = bs_build then
10330: LD_VAR 0 2
10334: PPUSH
10335: CALL_OW 461
10339: PUSH
10340: LD_INT 1
10342: EQUAL
10343: IFFALSE 10529
// for i = 1 to plist do
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: DOUBLE
10351: LD_INT 1
10353: DEC
10354: ST_TO_ADDR
10355: LD_VAR 0 1
10359: PUSH
10360: FOR_TO
10361: IFFALSE 10527
// if IsInUnit ( plist [ i ] ) then
10363: LD_VAR 0 1
10367: PUSH
10368: LD_VAR 0 4
10372: ARRAY
10373: PPUSH
10374: CALL_OW 310
10378: IFFALSE 10461
// begin ComExitBuilding ( plist [ i ] ) ;
10380: LD_VAR 0 1
10384: PUSH
10385: LD_VAR 0 4
10389: ARRAY
10390: PPUSH
10391: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10395: LD_VAR 0 1
10399: PUSH
10400: LD_VAR 0 4
10404: ARRAY
10405: PPUSH
10406: LD_STRING h
10408: PUSH
10409: LD_VAR 0 2
10413: PPUSH
10414: CALL_OW 250
10418: PUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 251
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: PPUSH
10455: CALL_OW 447
// end else
10459: GO 10525
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10461: LD_VAR 0 1
10465: PUSH
10466: LD_VAR 0 4
10470: ARRAY
10471: PPUSH
10472: LD_STRING h
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 251
10494: PUSH
10495: LD_VAR 0 2
10499: PUSH
10500: LD_INT 0
10502: PUSH
10503: LD_INT 0
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: PPUSH
10521: CALL_OW 446
10525: GO 10360
10527: POP
10528: POP
// end ;
10529: LD_VAR 0 3
10533: RET
// export function WantRepair ( eng ) ; begin
10534: LD_INT 0
10536: PPUSH
// if GetTaskList ( eng ) > 0 then
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 437
10546: PUSH
10547: LD_INT 0
10549: GREATER
10550: IFFALSE 10595
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 437
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PUSH
10566: LD_INT 1
10568: ARRAY
10569: PUSH
10570: LD_STRING o
10572: EQUAL
10573: IFFALSE 10585
// result := true else
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
10583: GO 10593
// result := false ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 0
10592: ST_TO_ADDR
// end else
10593: GO 10603
// result := false ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// end ;
10603: LD_VAR 0 2
10607: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// if btype = - 1 then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: NEG
10622: EQUAL
10623: IFFALSE 10663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10625: LD_ADDR_VAR 0 5
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: ST_TO_ADDR
10661: GO 10701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10663: LD_ADDR_VAR 0 5
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_VAR 0 2
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// list := [ ] ;
10701: LD_ADDR_VAR 0 6
10705: PUSH
10706: EMPTY
10707: ST_TO_ADDR
// for i = 1 to tmp do
10708: LD_ADDR_VAR 0 4
10712: PUSH
10713: DOUBLE
10714: LD_INT 1
10716: DEC
10717: ST_TO_ADDR
10718: LD_VAR 0 5
10722: PUSH
10723: FOR_TO
10724: IFFALSE 10812
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10726: LD_ADDR_VAR 0 6
10730: PUSH
10731: LD_VAR 0 6
10735: PUSH
10736: LD_VAR 0 5
10740: PUSH
10741: LD_VAR 0 4
10745: ARRAY
10746: PPUSH
10747: CALL_OW 266
10751: PUSH
10752: LD_VAR 0 5
10756: PUSH
10757: LD_VAR 0 4
10761: ARRAY
10762: PPUSH
10763: CALL_OW 250
10767: PUSH
10768: LD_VAR 0 5
10772: PUSH
10773: LD_VAR 0 4
10777: ARRAY
10778: PPUSH
10779: CALL_OW 251
10783: PUSH
10784: LD_VAR 0 5
10788: PUSH
10789: LD_VAR 0 4
10793: ARRAY
10794: PPUSH
10795: CALL_OW 254
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: ADD
10809: ST_TO_ADDR
10810: GO 10723
10812: POP
10813: POP
// result = list ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_VAR 0 6
10823: ST_TO_ADDR
// end ;
10824: LD_VAR 0 3
10828: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 81
10842: PUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 255
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PPUSH
10862: LD_VAR 0 1
10866: PPUSH
10867: CALL_OW 74
10871: PPUSH
10872: CALL_OW 296
10876: PUSH
10877: LD_INT 18
10879: LESS
10880: IFFALSE 10925
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 81
10889: PUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 255
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 69
10908: PPUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: CALL_OW 74
10918: PPUSH
10919: CALL_OW 115
10923: GO 10944
// ComMoveXY ( behemoth , x , y ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_VAR 0 4
10934: PPUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: CALL_OW 111
// if time_lapsers_list > 0 then
10944: LD_VAR 0 2
10948: PUSH
10949: LD_INT 0
10951: GREATER
10952: IFFALSE 11142
// begin for i = 1 to time_lapsers_list do
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: DOUBLE
10960: LD_INT 1
10962: DEC
10963: ST_TO_ADDR
10964: LD_VAR 0 2
10968: PUSH
10969: FOR_TO
10970: IFFALSE 11140
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10972: LD_VAR 0 2
10976: PUSH
10977: LD_VAR 0 7
10981: ARRAY
10982: PPUSH
10983: CALL_OW 256
10987: PUSH
10988: LD_INT 250
10990: GREATEREQUAL
10991: PUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 7
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 296
11012: PUSH
11013: LD_INT 9
11015: GREATER
11016: AND
11017: IFFALSE 11054
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 7
11028: ARRAY
11029: PPUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 250
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 251
11049: PPUSH
11050: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11054: LD_VAR 0 2
11058: PUSH
11059: LD_VAR 0 7
11063: ARRAY
11064: PPUSH
11065: CALL_OW 256
11069: PUSH
11070: LD_INT 500
11072: LESS
11073: PUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 256
11083: PUSH
11084: LD_INT 700
11086: GREATER
11087: AND
11088: IFFALSE 11138
// for p = 1 to mechanic_list do
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: DOUBLE
11096: LD_INT 1
11098: DEC
11099: ST_TO_ADDR
11100: LD_VAR 0 3
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11136
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11108: LD_VAR 0 3
11112: PUSH
11113: LD_VAR 0 8
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 2
11123: PUSH
11124: LD_VAR 0 7
11128: ARRAY
11129: PPUSH
11130: CALL_OW 129
11134: GO 11105
11136: POP
11137: POP
// end ;
11138: GO 10969
11140: POP
11141: POP
// end ; if mechanic_list then
11142: LD_VAR 0 3
11146: IFFALSE 11327
// begin for i = 1 to mechanic_list do
11148: LD_ADDR_VAR 0 7
11152: PUSH
11153: DOUBLE
11154: LD_INT 1
11156: DEC
11157: ST_TO_ADDR
11158: LD_VAR 0 3
11162: PUSH
11163: FOR_TO
11164: IFFALSE 11325
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 7
11175: ARRAY
11176: PPUSH
11177: CALL_OW 256
11181: PUSH
11182: LD_INT 333
11184: LESS
11185: IFFALSE 11209
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11187: LD_ADDR_EXP 15
11191: PUSH
11192: LD_EXP 15
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 7
11206: ARRAY
11207: DIFF
11208: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_VAR 0 7
11218: ARRAY
11219: PPUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 296
11229: PUSH
11230: LD_INT 9
11232: GREATER
11233: PUSH
11234: LD_VAR 0 3
11238: PUSH
11239: LD_VAR 0 7
11243: ARRAY
11244: PPUSH
11245: CALL_OW 314
11249: NOT
11250: AND
11251: IFFALSE 11288
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11253: LD_VAR 0 3
11257: PUSH
11258: LD_VAR 0 7
11262: ARRAY
11263: PPUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 250
11273: PPUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 251
11283: PPUSH
11284: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 256
11297: PUSH
11298: LD_INT 700
11300: LESS
11301: IFFALSE 11323
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11303: LD_VAR 0 3
11307: PUSH
11308: LD_VAR 0 7
11312: ARRAY
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 129
// end ;
11323: GO 11163
11325: POP
11326: POP
// end ; end ;
11327: LD_VAR 0 6
11331: RET
// export function GetBehemoth ( side ) ; begin
11332: LD_INT 0
11334: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_VAR 0 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 31
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// end ;
11371: LD_VAR 0 2
11375: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11376: LD_INT 0
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11384: LD_ADDR_VAR 0 6
11388: PUSH
11389: LD_VAR 0 2
11393: PPUSH
11394: CALL_OW 435
11398: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11399: LD_ADDR_VAR 0 5
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_VAR 0 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: ST_TO_ADDR
// if skr then
11453: LD_VAR 0 6
11457: IFFALSE 11622
// begin if engs then
11459: LD_VAR 0 5
11463: IFFALSE 11622
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11465: LD_ADDR_VAR 0 8
11469: PUSH
11470: LD_VAR 0 6
11474: PUSH
11475: LD_INT 1
11477: ARRAY
11478: PPUSH
11479: LD_VAR 0 6
11483: PUSH
11484: LD_INT 2
11486: ARRAY
11487: PPUSH
11488: CALL_OW 284
11492: ST_TO_ADDR
// if am > engs then
11493: LD_VAR 0 8
11497: PUSH
11498: LD_VAR 0 5
11502: GREATER
11503: IFFALSE 11515
// am := engs ;
11505: LD_ADDR_VAR 0 8
11509: PUSH
11510: LD_VAR 0 5
11514: ST_TO_ADDR
// for i = 1 to am do
11515: LD_ADDR_VAR 0 7
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_VAR 0 8
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11620
// begin if IsInUnit ( engs [ i ] ) then
11533: LD_VAR 0 5
11537: PUSH
11538: LD_VAR 0 7
11542: ARRAY
11543: PPUSH
11544: CALL_OW 310
11548: IFFALSE 11567
// ComExitBuilding ( engs [ i ] ) else
11550: LD_VAR 0 5
11554: PUSH
11555: LD_VAR 0 7
11559: ARRAY
11560: PPUSH
11561: CALL_OW 122
11565: GO 11618
// if not HasTask ( engs [ i ] ) then
11567: LD_VAR 0 5
11571: PUSH
11572: LD_VAR 0 7
11576: ARRAY
11577: PPUSH
11578: CALL_OW 314
11582: NOT
11583: IFFALSE 11618
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: LD_VAR 0 6
11600: PUSH
11601: LD_INT 1
11603: ARRAY
11604: PPUSH
11605: LD_VAR 0 6
11609: PUSH
11610: LD_INT 2
11612: ARRAY
11613: PPUSH
11614: CALL_OW 117
// end ;
11618: GO 11530
11620: POP
11621: POP
// end ; end ; end ; end_of_file
11622: LD_VAR 0 3
11626: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// uc_side := 1 ;
11631: LD_ADDR_OWVAR 20
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// uc_nation := 1 ;
11639: LD_ADDR_OWVAR 21
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 6
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: LD_INT 4
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: LD_OWVAR 67
11670: ARRAY
11671: ST_TO_ADDR
// game_status := false ;
11672: LD_ADDR_EXP 29
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// helps_arrive := false ;
11680: LD_ADDR_EXP 30
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// helps_can_arrive := false ;
11688: LD_ADDR_EXP 31
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// beta_come := false ;
11696: LD_ADDR_EXP 32
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// gamma_come := false ;
11704: LD_ADDR_EXP 33
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// zeta_come := false ;
11712: LD_ADDR_EXP 34
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// mine_ck := false ;
11720: LD_ADDR_EXP 35
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sib_bomb_constructed := false ;
11728: LD_ADDR_EXP 36
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// mine_constructed := false ;
11736: LD_ADDR_EXP 37
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11744: LD_INT 35
11746: PPUSH
11747: CALL_OW 274
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: LD_INT 200
11757: PUSH
11758: LD_INT 100
11760: PUSH
11761: LD_INT 70
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: PUSH
11769: LD_OWVAR 67
11773: ARRAY
11774: PPUSH
11775: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11779: LD_INT 35
11781: PPUSH
11782: LD_INT 4
11784: PPUSH
11785: CALL_OW 235
// hc_importance := 100 ;
11789: LD_ADDR_OWVAR 32
11793: PUSH
11794: LD_INT 100
11796: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 2
11802: PPUSH
11803: LD_VAR 0 2
11807: PUSH
11808: LD_INT 1
11810: PLUS
11811: PPUSH
11812: CALL_OW 380
// hc_gallery := hardch ;
11816: LD_ADDR_OWVAR 33
11820: PUSH
11821: LD_STRING hardch
11823: ST_TO_ADDR
// hc_face_number := 1 ;
11824: LD_ADDR_OWVAR 34
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// guyA := CreateHuman ;
11832: LD_ADDR_EXP 38
11836: PUSH
11837: CALL_OW 44
11841: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11842: LD_INT 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL_OW 380
// hc_face_number := 2 ;
11857: LD_ADDR_OWVAR 34
11861: PUSH
11862: LD_INT 2
11864: ST_TO_ADDR
// guyB := CreateHuman ;
11865: LD_ADDR_EXP 39
11869: PUSH
11870: CALL_OW 44
11874: ST_TO_ADDR
// hc_importance := 0 ;
11875: LD_ADDR_OWVAR 32
11879: PUSH
11880: LD_INT 0
11882: ST_TO_ADDR
// hc_gallery :=  ;
11883: LD_ADDR_OWVAR 33
11887: PUSH
11888: LD_STRING 
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
// uc_side := 4 ;
11907: LD_ADDR_OWVAR 20
11911: PUSH
11912: LD_INT 4
11914: ST_TO_ADDR
// uc_nation := 1 ;
11915: LD_ADDR_OWVAR 21
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11923: LD_ADDR_VAR 0 10
11927: PUSH
11928: LD_INT 6
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_OWVAR 67
11946: ARRAY
11947: ST_TO_ADDR
// Beta_Squad := [ ] ;
11948: LD_ADDR_EXP 40
11952: PUSH
11953: EMPTY
11954: ST_TO_ADDR
// case num of 1 :
11955: LD_VAR 0 1
11959: PUSH
11960: LD_INT 1
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12011
11968: POP
// begin sold := 2 ;
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_INT 2
11976: ST_TO_ADDR
// sci := 1 ;
11977: LD_ADDR_VAR 0 6
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// mech := 2 ;
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_INT 2
11992: ST_TO_ADDR
// tank := 1 ;
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// cargo := 1 ;
12001: LD_ADDR_VAR 0 9
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// end ; 2 :
12009: GO 12114
12011: LD_INT 2
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12062
12019: POP
// begin sold := 2 ;
12020: LD_ADDR_VAR 0 5
12024: PUSH
12025: LD_INT 2
12027: ST_TO_ADDR
// sci := 1 ;
12028: LD_ADDR_VAR 0 6
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// mech := 1 ;
12036: LD_ADDR_VAR 0 7
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// tank := 1 ;
12044: LD_ADDR_VAR 0 8
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// cargo := 0 ;
12052: LD_ADDR_VAR 0 9
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// end ; 3 :
12060: GO 12114
12062: LD_INT 3
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12113
12070: POP
// begin sold := 1 ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// sci := 1 ;
12079: LD_ADDR_VAR 0 6
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// mech := 1 ;
12087: LD_ADDR_VAR 0 7
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// tank := 1 ;
12095: LD_ADDR_VAR 0 8
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// cargo := 0 ;
12103: LD_ADDR_VAR 0 9
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// end ; end ;
12111: GO 12114
12113: POP
// for i = 1 to sold do
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_VAR 0 5
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12202
// begin if i = 1 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: EQUAL
12140: IFFALSE 12159
// PrepareHuman ( sex_male , 1 , skill ) else
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: LD_VAR 0 10
12152: PPUSH
12153: CALL_OW 380
12157: GO 12174
// PrepareHuman ( false , 1 , skill ) ;
12159: LD_INT 0
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: LD_VAR 0 10
12169: PPUSH
12170: CALL_OW 380
// un := CreateHuman ;
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: CALL_OW 44
12183: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12184: LD_ADDR_EXP 40
12188: PUSH
12189: LD_EXP 40
12193: PUSH
12194: LD_VAR 0 4
12198: ADD
12199: ST_TO_ADDR
// end ;
12200: GO 12129
12202: POP
12203: POP
// for i = 1 to mech do
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: DOUBLE
12210: LD_INT 1
12212: DEC
12213: ST_TO_ADDR
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12277
// begin PrepareHuman ( false , 3 , skill ) ;
12222: LD_INT 0
12224: PPUSH
12225: LD_INT 3
12227: PPUSH
12228: LD_VAR 0 10
12232: PPUSH
12233: CALL_OW 380
// un := CreateHuman ;
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: CALL_OW 44
12246: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12247: LD_VAR 0 4
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12259: LD_ADDR_EXP 40
12263: PUSH
12264: LD_EXP 40
12268: PUSH
12269: LD_VAR 0 4
12273: ADD
12274: ST_TO_ADDR
// end ;
12275: GO 12219
12277: POP
12278: POP
// for i = 1 to sci do
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: DOUBLE
12285: LD_INT 1
12287: DEC
12288: ST_TO_ADDR
12289: LD_VAR 0 6
12293: PUSH
12294: FOR_TO
12295: IFFALSE 12340
// begin PrepareHuman ( false , 4 , skill ) ;
12297: LD_INT 0
12299: PPUSH
12300: LD_INT 4
12302: PPUSH
12303: LD_VAR 0 10
12307: PPUSH
12308: CALL_OW 380
// un := CreateHuman ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: CALL_OW 44
12321: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12322: LD_ADDR_EXP 40
12326: PUSH
12327: LD_EXP 40
12331: PUSH
12332: LD_VAR 0 4
12336: ADD
12337: ST_TO_ADDR
// end ;
12338: GO 12294
12340: POP
12341: POP
// for i = 1 to tank do
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_VAR 0 8
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12471
// begin Randomize ;
12360: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12364: LD_ADDR_OWVAR 37
12368: PUSH
12369: LD_INT 3
12371: ST_TO_ADDR
// vc_engine := engine_solar ;
12372: LD_ADDR_OWVAR 39
12376: PUSH
12377: LD_INT 2
12379: ST_TO_ADDR
// vc_control := control_manual ;
12380: LD_ADDR_OWVAR 38
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12388: LD_ADDR_OWVAR 40
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: LD_INT 5
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 1
12405: PPUSH
12406: LD_INT 2
12408: PPUSH
12409: CALL_OW 12
12413: ARRAY
12414: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12415: LD_ADDR_OWVAR 41
12419: PUSH
12420: LD_INT 35
12422: PPUSH
12423: LD_INT 55
12425: PPUSH
12426: CALL_OW 12
12430: ST_TO_ADDR
// un := CreateVehicle ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: CALL_OW 45
12440: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12441: LD_VAR 0 4
12445: PPUSH
12446: LD_INT 5
12448: PPUSH
12449: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12453: LD_ADDR_EXP 40
12457: PUSH
12458: LD_EXP 40
12462: PUSH
12463: LD_VAR 0 4
12467: ADD
12468: ST_TO_ADDR
// end ;
12469: GO 12357
12471: POP
12472: POP
// if cargo then
12473: LD_VAR 0 9
12477: IFFALSE 12580
// begin vc_chassis := us_medium_tracked ;
12479: LD_ADDR_OWVAR 37
12483: PUSH
12484: LD_INT 3
12486: ST_TO_ADDR
// vc_engine := engine_solar ;
12487: LD_ADDR_OWVAR 39
12491: PUSH
12492: LD_INT 2
12494: ST_TO_ADDR
// vc_control := control_manual ;
12495: LD_ADDR_OWVAR 38
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12503: LD_ADDR_OWVAR 40
12507: PUSH
12508: LD_INT 12
12510: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12511: LD_ADDR_OWVAR 41
12515: PUSH
12516: LD_INT 35
12518: PPUSH
12519: LD_INT 55
12521: PPUSH
12522: CALL_OW 12
12526: ST_TO_ADDR
// un := CreateVehicle ;
12527: LD_ADDR_VAR 0 4
12531: PUSH
12532: CALL_OW 45
12536: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12537: LD_VAR 0 4
12541: PPUSH
12542: LD_INT 5
12544: PPUSH
12545: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12549: LD_ADDR_EXP 40
12553: PUSH
12554: LD_EXP 40
12558: PUSH
12559: LD_VAR 0 4
12563: ADD
12564: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12565: LD_VAR 0 4
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: LD_INT 60
12575: PPUSH
12576: CALL_OW 290
// end ; end ;
12580: LD_VAR 0 2
12584: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12585: LD_INT 0
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
// uc_side := 4 ;
12597: LD_ADDR_OWVAR 20
12601: PUSH
12602: LD_INT 4
12604: ST_TO_ADDR
// uc_nation := 1 ;
12605: LD_ADDR_OWVAR 21
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12613: LD_ADDR_VAR 0 11
12617: PUSH
12618: LD_INT 6
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: LD_INT 4
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_OWVAR 67
12636: ARRAY
12637: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12638: LD_ADDR_EXP 41
12642: PUSH
12643: EMPTY
12644: ST_TO_ADDR
// case num of 1 :
12645: LD_VAR 0 1
12649: PUSH
12650: LD_INT 1
12652: DOUBLE
12653: EQUAL
12654: IFTRUE 12658
12656: GO 12709
12658: POP
// begin sold := 2 ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_INT 2
12666: ST_TO_ADDR
// eng := 2 ;
12667: LD_ADDR_VAR 0 6
12671: PUSH
12672: LD_INT 2
12674: ST_TO_ADDR
// sci := 0 ;
12675: LD_ADDR_VAR 0 7
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// mech := 1 ;
12683: LD_ADDR_VAR 0 8
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// tank := 0 ;
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// cargo := 1 ;
12699: LD_ADDR_VAR 0 10
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// end ; 2 :
12707: GO 12828
12709: LD_INT 2
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12768
12717: POP
// begin sold := 1 ;
12718: LD_ADDR_VAR 0 5
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// eng := 2 ;
12726: LD_ADDR_VAR 0 6
12730: PUSH
12731: LD_INT 2
12733: ST_TO_ADDR
// sci := 0 ;
12734: LD_ADDR_VAR 0 7
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// mech := 1 ;
12742: LD_ADDR_VAR 0 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// tank := 0 ;
12750: LD_ADDR_VAR 0 9
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// cargo := 1 ;
12758: LD_ADDR_VAR 0 10
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// end ; 3 :
12766: GO 12828
12768: LD_INT 3
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12827
12776: POP
// begin sold := 1 ;
12777: LD_ADDR_VAR 0 5
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// eng := 1 ;
12785: LD_ADDR_VAR 0 6
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// sci := 0 ;
12793: LD_ADDR_VAR 0 7
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// mech := 1 ;
12801: LD_ADDR_VAR 0 8
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// tank := 0 ;
12809: LD_ADDR_VAR 0 9
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// cargo := 1 ;
12817: LD_ADDR_VAR 0 10
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// end ; end ;
12825: GO 12828
12827: POP
// for i = 1 to sold do
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_VAR 0 5
12842: PUSH
12843: FOR_TO
12844: IFFALSE 12916
// begin if i = 1 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 1
12853: EQUAL
12854: IFFALSE 12873
// PrepareHuman ( sex_male , 1 , skill ) else
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: LD_VAR 0 11
12866: PPUSH
12867: CALL_OW 380
12871: GO 12888
// PrepareHuman ( false , 1 , skill ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: LD_VAR 0 11
12883: PPUSH
12884: CALL_OW 380
// un := CreateHuman ;
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: CALL_OW 44
12897: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12898: LD_ADDR_EXP 41
12902: PUSH
12903: LD_EXP 41
12907: PUSH
12908: LD_VAR 0 4
12912: ADD
12913: ST_TO_ADDR
// end ;
12914: GO 12843
12916: POP
12917: POP
// for i = 1 to mech do
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: DOUBLE
12924: LD_INT 1
12926: DEC
12927: ST_TO_ADDR
12928: LD_VAR 0 8
12932: PUSH
12933: FOR_TO
12934: IFFALSE 12991
// begin PrepareHuman ( false , 3 , skill ) ;
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_VAR 0 11
12946: PPUSH
12947: CALL_OW 380
// un := CreateHuman ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: CALL_OW 44
12960: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12961: LD_VAR 0 4
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12973: LD_ADDR_EXP 41
12977: PUSH
12978: LD_EXP 41
12982: PUSH
12983: LD_VAR 0 4
12987: ADD
12988: ST_TO_ADDR
// end ;
12989: GO 12933
12991: POP
12992: POP
// for i = 1 to eng do
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: DOUBLE
12999: LD_INT 1
13001: DEC
13002: ST_TO_ADDR
13003: LD_VAR 0 6
13007: PUSH
13008: FOR_TO
13009: IFFALSE 13054
// begin PrepareHuman ( false , 2 , skill ) ;
13011: LD_INT 0
13013: PPUSH
13014: LD_INT 2
13016: PPUSH
13017: LD_VAR 0 11
13021: PPUSH
13022: CALL_OW 380
// un := CreateHuman ;
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: CALL_OW 44
13035: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13036: LD_ADDR_EXP 41
13040: PUSH
13041: LD_EXP 41
13045: PUSH
13046: LD_VAR 0 4
13050: ADD
13051: ST_TO_ADDR
// end ;
13052: GO 13008
13054: POP
13055: POP
// for i = 1 to tank do
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: DOUBLE
13062: LD_INT 1
13064: DEC
13065: ST_TO_ADDR
13066: LD_VAR 0 9
13070: PUSH
13071: FOR_TO
13072: IFFALSE 13185
// begin Randomize ;
13074: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13078: LD_ADDR_OWVAR 37
13082: PUSH
13083: LD_INT 2
13085: ST_TO_ADDR
// vc_engine := engine_siberite ;
13086: LD_ADDR_OWVAR 39
13090: PUSH
13091: LD_INT 3
13093: ST_TO_ADDR
// vc_control := control_manual ;
13094: LD_ADDR_OWVAR 38
13098: PUSH
13099: LD_INT 1
13101: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13102: LD_ADDR_OWVAR 40
13106: PUSH
13107: LD_INT 7
13109: PUSH
13110: LD_INT 9
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 1
13119: PPUSH
13120: LD_INT 2
13122: PPUSH
13123: CALL_OW 12
13127: ARRAY
13128: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13129: LD_ADDR_OWVAR 41
13133: PUSH
13134: LD_INT 35
13136: PPUSH
13137: LD_INT 55
13139: PPUSH
13140: CALL_OW 12
13144: ST_TO_ADDR
// un := CreateVehicle ;
13145: LD_ADDR_VAR 0 4
13149: PUSH
13150: CALL_OW 45
13154: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13155: LD_VAR 0 4
13159: PPUSH
13160: LD_INT 5
13162: PPUSH
13163: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13167: LD_ADDR_EXP 41
13171: PUSH
13172: LD_EXP 41
13176: PUSH
13177: LD_VAR 0 4
13181: ADD
13182: ST_TO_ADDR
// end ;
13183: GO 13071
13185: POP
13186: POP
// if cargo then
13187: LD_VAR 0 10
13191: IFFALSE 13309
// begin vc_chassis := us_medium_tracked ;
13193: LD_ADDR_OWVAR 37
13197: PUSH
13198: LD_INT 3
13200: ST_TO_ADDR
// vc_engine := engine_combustion ;
13201: LD_ADDR_OWVAR 39
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// vc_control := control_manual ;
13209: LD_ADDR_OWVAR 38
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13217: LD_ADDR_OWVAR 40
13221: PUSH
13222: LD_INT 12
13224: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13225: LD_ADDR_OWVAR 41
13229: PUSH
13230: LD_INT 35
13232: PPUSH
13233: LD_INT 55
13235: PPUSH
13236: CALL_OW 12
13240: ST_TO_ADDR
// un := CreateVehicle ;
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: CALL_OW 45
13250: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13251: LD_VAR 0 4
13255: PPUSH
13256: LD_INT 5
13258: PPUSH
13259: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13263: LD_ADDR_EXP 41
13267: PUSH
13268: LD_EXP 41
13272: PUSH
13273: LD_VAR 0 4
13277: ADD
13278: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_INT 3
13286: PPUSH
13287: LD_INT 30
13289: PPUSH
13290: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13294: LD_VAR 0 4
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: LD_INT 40
13304: PPUSH
13305: CALL_OW 290
// end ; end ;
13309: LD_VAR 0 2
13313: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
// uc_side := 4 ;
13326: LD_ADDR_OWVAR 20
13330: PUSH
13331: LD_INT 4
13333: ST_TO_ADDR
// uc_nation := 1 ;
13334: LD_ADDR_OWVAR 21
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13342: LD_ADDR_VAR 0 10
13346: PUSH
13347: LD_INT 6
13349: PUSH
13350: LD_INT 5
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: PUSH
13361: LD_OWVAR 67
13365: ARRAY
13366: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13367: LD_ADDR_EXP 42
13371: PUSH
13372: EMPTY
13373: ST_TO_ADDR
// sold := 1 ;
13374: LD_ADDR_VAR 0 4
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// eng := 0 ;
13382: LD_ADDR_VAR 0 5
13386: PUSH
13387: LD_INT 0
13389: ST_TO_ADDR
// sci := 0 ;
13390: LD_ADDR_VAR 0 6
13394: PUSH
13395: LD_INT 0
13397: ST_TO_ADDR
// mech := 3 ;
13398: LD_ADDR_VAR 0 7
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// tank := 3 ;
13406: LD_ADDR_VAR 0 8
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// cargo := 0 ;
13414: LD_ADDR_VAR 0 9
13418: PUSH
13419: LD_INT 0
13421: ST_TO_ADDR
// for i = 1 to sold do
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: DOUBLE
13428: LD_INT 1
13430: DEC
13431: ST_TO_ADDR
13432: LD_VAR 0 4
13436: PUSH
13437: FOR_TO
13438: IFFALSE 13510
// begin if i = 1 then
13440: LD_VAR 0 2
13444: PUSH
13445: LD_INT 1
13447: EQUAL
13448: IFFALSE 13467
// PrepareHuman ( sex_male , 1 , skill ) else
13450: LD_INT 1
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_VAR 0 10
13460: PPUSH
13461: CALL_OW 380
13465: GO 13482
// PrepareHuman ( false , 1 , skill ) ;
13467: LD_INT 0
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_VAR 0 10
13477: PPUSH
13478: CALL_OW 380
// un := CreateHuman ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: CALL_OW 44
13491: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13492: LD_ADDR_EXP 42
13496: PUSH
13497: LD_EXP 42
13501: PUSH
13502: LD_VAR 0 3
13506: ADD
13507: ST_TO_ADDR
// end ;
13508: GO 13437
13510: POP
13511: POP
// for i = 1 to mech do
13512: LD_ADDR_VAR 0 2
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_VAR 0 7
13526: PUSH
13527: FOR_TO
13528: IFFALSE 13585
// begin PrepareHuman ( false , 3 , skill ) ;
13530: LD_INT 0
13532: PPUSH
13533: LD_INT 3
13535: PPUSH
13536: LD_VAR 0 10
13540: PPUSH
13541: CALL_OW 380
// un := CreateHuman ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: CALL_OW 44
13554: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13567: LD_ADDR_EXP 42
13571: PUSH
13572: LD_EXP 42
13576: PUSH
13577: LD_VAR 0 3
13581: ADD
13582: ST_TO_ADDR
// end ;
13583: GO 13527
13585: POP
13586: POP
// for i = 1 to tank do
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: DOUBLE
13593: LD_INT 1
13595: DEC
13596: ST_TO_ADDR
13597: LD_VAR 0 8
13601: PUSH
13602: FOR_TO
13603: IFFALSE 13849
// begin Randomize ;
13605: CALL_OW 10
// if i < 3 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 3
13616: LESS
13617: IFFALSE 13726
// begin vc_chassis := us_medium_tracked ;
13619: LD_ADDR_OWVAR 37
13623: PUSH
13624: LD_INT 3
13626: ST_TO_ADDR
// vc_engine := engine_combustion ;
13627: LD_ADDR_OWVAR 39
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// vc_control := control_manual ;
13635: LD_ADDR_OWVAR 38
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13643: LD_ADDR_OWVAR 40
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 9
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 1
13660: PPUSH
13661: LD_INT 2
13663: PPUSH
13664: CALL_OW 12
13668: ARRAY
13669: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13670: LD_ADDR_OWVAR 41
13674: PUSH
13675: LD_INT 35
13677: PPUSH
13678: LD_INT 55
13680: PPUSH
13681: CALL_OW 12
13685: ST_TO_ADDR
// un := CreateVehicle ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: CALL_OW 45
13695: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13696: LD_VAR 0 3
13700: PPUSH
13701: LD_INT 5
13703: PPUSH
13704: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13708: LD_ADDR_EXP 42
13712: PUSH
13713: LD_EXP 42
13717: PUSH
13718: LD_VAR 0 3
13722: ADD
13723: ST_TO_ADDR
// end else
13724: GO 13847
// begin uc_nation := 3 ;
13726: LD_ADDR_OWVAR 21
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13734: LD_ADDR_OWVAR 37
13738: PUSH
13739: LD_INT 22
13741: ST_TO_ADDR
// vc_engine := engine_combustion ;
13742: LD_ADDR_OWVAR 39
13746: PUSH
13747: LD_INT 1
13749: ST_TO_ADDR
// vc_control := control_manual ;
13750: LD_ADDR_OWVAR 38
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13758: LD_ADDR_OWVAR 40
13762: PUSH
13763: LD_INT 51
13765: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13766: LD_ADDR_OWVAR 41
13770: PUSH
13771: LD_INT 35
13773: PPUSH
13774: LD_INT 55
13776: PPUSH
13777: CALL_OW 12
13781: ST_TO_ADDR
// un := CreateVehicle ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: CALL_OW 45
13791: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13792: LD_VAR 0 3
13796: PPUSH
13797: LD_INT 496
13799: PPUSH
13800: CALL_OW 234
// SetTag ( un , 5 ) ;
13804: LD_VAR 0 3
13808: PPUSH
13809: LD_INT 5
13811: PPUSH
13812: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13816: LD_VAR 0 3
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: LD_INT 100
13826: PPUSH
13827: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13831: LD_ADDR_EXP 42
13835: PUSH
13836: LD_EXP 42
13840: PUSH
13841: LD_VAR 0 3
13845: ADD
13846: ST_TO_ADDR
// end ; end ;
13847: GO 13602
13849: POP
13850: POP
// end ; end_of_file
13851: LD_VAR 0 1
13855: RET
// export function Action ; begin
13856: LD_INT 0
13858: PPUSH
// InGameOn ;
13859: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13863: LD_INT 151
13865: PPUSH
13866: LD_INT 107
13868: PPUSH
13869: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13873: LD_EXP 38
13877: PPUSH
13878: LD_INT 171
13880: PPUSH
13881: LD_INT 108
13883: PPUSH
13884: LD_INT 0
13886: PPUSH
13887: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13891: LD_EXP 39
13895: PPUSH
13896: LD_INT 172
13898: PPUSH
13899: LD_INT 110
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13909: LD_EXP 38
13913: PPUSH
13914: LD_INT 156
13916: PPUSH
13917: LD_INT 107
13919: PPUSH
13920: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13924: LD_EXP 39
13928: PPUSH
13929: LD_INT 154
13931: PPUSH
13932: LD_INT 105
13934: PPUSH
13935: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13946: LD_EXP 38
13950: PPUSH
13951: CALL_OW 250
13955: PUSH
13956: LD_INT 156
13958: EQUAL
13959: PUSH
13960: LD_EXP 38
13964: PPUSH
13965: CALL_OW 251
13969: PUSH
13970: LD_INT 107
13972: EQUAL
13973: AND
13974: IFFALSE 13939
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13976: LD_EXP 38
13980: PUSH
13981: LD_EXP 39
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
13997: LD_EXP 38
14001: PPUSH
14002: LD_STRING D1-A-1
14004: PPUSH
14005: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14009: LD_EXP 39
14013: PPUSH
14014: LD_STRING D1-B-1
14016: PPUSH
14017: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14021: LD_EXP 38
14025: PPUSH
14026: LD_STRING D1-A-2
14028: PPUSH
14029: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14033: LD_EXP 39
14037: PPUSH
14038: LD_STRING D1-B-2
14040: PPUSH
14041: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14045: LD_EXP 38
14049: PUSH
14050: LD_EXP 39
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: LD_INT 147
14061: PPUSH
14062: LD_INT 108
14064: PPUSH
14065: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14069: LD_EXP 38
14073: PPUSH
14074: LD_STRING D1-A-3
14076: PPUSH
14077: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14081: LD_INT 4
14083: PPUSH
14084: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14088: LD_EXP 38
14092: PPUSH
14093: LD_INT 35
14095: PPUSH
14096: CALL_OW 296
14100: PUSH
14101: LD_INT 8
14103: LESS
14104: IFFALSE 14081
// ComTurnUnit ( guyA , guyB ) ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_EXP 39
14115: PPUSH
14116: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14120: LD_EXP 39
14124: PPUSH
14125: LD_EXP 38
14129: PPUSH
14130: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14134: LD_EXP 38
14138: PPUSH
14139: LD_STRING D1-A-10
14141: PPUSH
14142: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14146: LD_EXP 39
14150: PPUSH
14151: LD_STRING D1-B-10
14153: PPUSH
14154: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14158: LD_EXP 38
14162: PPUSH
14163: LD_STRING D1-A-11
14165: PPUSH
14166: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14170: LD_EXP 39
14174: PPUSH
14175: LD_STRING D1-B-11
14177: PPUSH
14178: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14182: LD_EXP 38
14186: PPUSH
14187: LD_STRING D1-A-12
14189: PPUSH
14190: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14194: LD_EXP 39
14198: PPUSH
14199: LD_STRING D1-B-12
14201: PPUSH
14202: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14206: LD_EXP 38
14210: PPUSH
14211: LD_STRING D1-A-13
14213: PPUSH
14214: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14218: LD_EXP 39
14222: PPUSH
14223: LD_STRING D1-B-13
14225: PPUSH
14226: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14230: LD_EXP 38
14234: PPUSH
14235: LD_STRING D1-A-14
14237: PPUSH
14238: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14242: LD_EXP 39
14246: PPUSH
14247: LD_STRING D1-B-14
14249: PPUSH
14250: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14254: LD_EXP 38
14258: PPUSH
14259: LD_STRING D1-A-15
14261: PPUSH
14262: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14266: LD_EXP 39
14270: PPUSH
14271: LD_STRING D1-B-15
14273: PPUSH
14274: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14278: LD_EXP 38
14282: PPUSH
14283: LD_STRING D1-A-16
14285: PPUSH
14286: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14290: LD_EXP 39
14294: PPUSH
14295: LD_STRING D1-B-16
14297: PPUSH
14298: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14302: LD_EXP 38
14306: PPUSH
14307: LD_STRING D1-A-17
14309: PPUSH
14310: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14314: LD_EXP 39
14318: PPUSH
14319: LD_STRING D1-B-17
14321: PPUSH
14322: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14326: LD_EXP 38
14330: PPUSH
14331: LD_STRING D1-A-18
14333: PPUSH
14334: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14338: LD_INT 35
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14348: LD_EXP 38
14352: PUSH
14353: LD_EXP 39
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: LD_INT 35
14364: PPUSH
14365: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14369: LD_INT 4
14371: PPUSH
14372: CALL_OW 67
// until IsInUnit ( guyA ) ;
14376: LD_EXP 38
14380: PPUSH
14381: CALL_OW 310
14385: IFFALSE 14369
// Wait ( 0 0$02 ) ;
14387: LD_INT 70
14389: PPUSH
14390: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14394: LD_EXP 38
14398: PPUSH
14399: LD_STRING D1-A-19
14401: PPUSH
14402: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14406: LD_EXP 39
14410: PPUSH
14411: LD_STRING D1-B-19
14413: PPUSH
14414: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14418: LD_EXP 38
14422: PPUSH
14423: LD_STRING D1-A-20
14425: PPUSH
14426: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14430: LD_INT 10
14432: PPUSH
14433: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14437: LD_EXP 39
14441: PPUSH
14442: LD_STRING D1-B-20
14444: PPUSH
14445: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14449: LD_EXP 38
14453: PPUSH
14454: LD_STRING D1-A-21
14456: PPUSH
14457: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14461: LD_EXP 39
14465: PPUSH
14466: LD_STRING D1-B-21
14468: PPUSH
14469: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14473: LD_EXP 38
14477: PPUSH
14478: LD_STRING D1-A-22
14480: PPUSH
14481: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D1-B-22
14492: PPUSH
14493: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14497: LD_EXP 38
14501: PPUSH
14502: LD_STRING D1-A-23
14504: PPUSH
14505: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14509: LD_EXP 39
14513: PPUSH
14514: LD_STRING D1-B-23
14516: PPUSH
14517: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14521: LD_EXP 38
14525: PPUSH
14526: LD_STRING D1-A-24
14528: PPUSH
14529: CALL_OW 88
// InGameOff ;
14533: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14537: LD_STRING M_main
14539: PPUSH
14540: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14544: LD_INT 4
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 343
// game_status := true ;
14554: LD_ADDR_EXP 29
14558: PUSH
14559: LD_INT 1
14561: ST_TO_ADDR
// end ;
14562: LD_VAR 0 1
14566: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14567: LD_INT 1
14569: PPUSH
14570: CALL 6358 0 1
14574: PUSH
14575: LD_INT 0
14577: GREATER
14578: IFFALSE 14680
14580: GO 14582
14582: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14590: LD_INT 1
14592: PPUSH
14593: CALL 6358 0 1
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: CALL_OW 461
14606: PUSH
14607: LD_INT 1
14609: NONEQUAL
14610: IFFALSE 14583
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14612: LD_EXP 38
14616: PPUSH
14617: CALL_OW 300
14621: PUSH
14622: LD_EXP 39
14626: PPUSH
14627: CALL_OW 300
14631: AND
14632: PUSH
14633: LD_EXP 30
14637: NOT
14638: AND
14639: IFFALSE 14665
// begin Say ( guyA , DL-A-1 ) ;
14641: LD_EXP 38
14645: PPUSH
14646: LD_STRING DL-A-1
14648: PPUSH
14649: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14653: LD_EXP 39
14657: PPUSH
14658: LD_STRING DL-B-1
14660: PPUSH
14661: CALL_OW 88
// end ; if not helps_can_arrive then
14665: LD_EXP 31
14669: NOT
14670: IFFALSE 14680
// helps_can_arrive := true ;
14672: LD_ADDR_EXP 31
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// end ;
14680: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14681: LD_INT 1
14683: PPUSH
14684: CALL 6358 0 1
14688: PUSH
14689: LD_INT 0
14691: GREATER
14692: PUSH
14693: LD_EXP 38
14697: PPUSH
14698: CALL_OW 300
14702: AND
14703: PUSH
14704: LD_EXP 39
14708: PPUSH
14709: CALL_OW 300
14713: AND
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 25
14727: PUSH
14728: LD_INT 12
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: PUSH
14744: LD_INT 0
14746: EQUAL
14747: AND
14748: PUSH
14749: LD_INT 1
14751: PPUSH
14752: LD_INT 25
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: PPUSH
14767: LD_EXP 38
14771: PPUSH
14772: CALL_OW 74
14776: PPUSH
14777: CALL_OW 292
14781: AND
14782: IFFALSE 14823
14784: GO 14786
14786: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14787: LD_EXP 38
14791: PPUSH
14792: LD_STRING DA-A-1
14794: PPUSH
14795: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14799: LD_EXP 39
14803: PPUSH
14804: LD_STRING DA-B-1
14806: PPUSH
14807: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14811: LD_EXP 38
14815: PPUSH
14816: LD_STRING DA-A-2
14818: PPUSH
14819: CALL_OW 88
// end ;
14823: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14824: LD_EXP 29
14828: PUSH
14829: LD_EXP 38
14833: PPUSH
14834: LD_INT 6
14836: PPUSH
14837: CALL_OW 299
14841: PUSH
14842: LD_INT 7
14844: LESS
14845: AND
14846: IFFALSE 14899
14848: GO 14850
14850: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14851: LD_INT 117
14853: PPUSH
14854: LD_INT 50
14856: PPUSH
14857: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14861: LD_INT 1
14863: PPUSH
14864: CALL 9995 0 1
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_STRING D5-A-1
14875: PPUSH
14876: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14880: LD_INT 1
14882: PPUSH
14883: CALL 9995 0 1
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: LD_STRING D5-B-1
14894: PPUSH
14895: CALL_OW 88
// end ;
14899: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14900: LD_INT 7
14902: PPUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: PUSH
14918: LD_INT 0
14920: GREATER
14921: IFFALSE 15066
14923: GO 14925
14925: DISABLE
// begin Wait ( 0 0$03 ) ;
14926: LD_INT 105
14928: PPUSH
14929: CALL_OW 67
// DialogueOn ;
14933: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14937: LD_INT 1
14939: PPUSH
14940: CALL 9995 0 1
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_STRING D6-A-1
14951: PPUSH
14952: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14956: LD_INT 1
14958: PPUSH
14959: CALL 9995 0 1
14963: PUSH
14964: LD_INT 2
14966: ARRAY
14967: PPUSH
14968: LD_STRING D6-B-1
14970: PPUSH
14971: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14975: LD_INT 95
14977: PPUSH
14978: LD_INT 8
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_INT 20
14986: PPUSH
14987: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
14991: LD_INT 10
14993: PPUSH
14994: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
14998: LD_INT 1
15000: PPUSH
15001: CALL 9995 0 1
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: LD_STRING D6-A-2
15012: PPUSH
15013: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15017: LD_INT 1
15019: PPUSH
15020: CALL 9995 0 1
15024: PUSH
15025: LD_INT 2
15027: ARRAY
15028: PPUSH
15029: LD_STRING D6-B-2
15031: PPUSH
15032: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15036: LD_INT 1
15038: PPUSH
15039: CALL 9995 0 1
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_STRING D6-A-3
15050: PPUSH
15051: CALL_OW 88
// DialogueOff ;
15055: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15059: LD_STRING M_base
15061: PPUSH
15062: CALL_OW 337
// end ;
15066: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15067: LD_EXP 30
15071: NOT
15072: PUSH
15073: LD_INT 22
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_INT 0
15104: GREATER
15105: AND
15106: IFFALSE 15239
15108: GO 15110
15110: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15111: LD_INT 35
15113: PPUSH
15114: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15118: LD_INT 22
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 21
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 69
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL 9995 0 1
15154: PUSH
15155: LD_INT 1
15157: ARRAY
15158: PPUSH
15159: CALL_OW 74
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL 9995 0 1
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 296
15180: PUSH
15181: LD_INT 7
15183: LESS
15184: IFFALSE 15111
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15186: LD_INT 1
15188: PPUSH
15189: CALL 9995 0 1
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_STRING DR-A-1
15200: PPUSH
15201: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15205: LD_INT 1
15207: PPUSH
15208: CALL 9995 0 1
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_STRING DR-B-1
15219: PPUSH
15220: CALL_OW 88
// Wait ( 3 3$00 ) ;
15224: LD_INT 6300
15226: PPUSH
15227: CALL_OW 67
// ru_spotted := true ;
15231: LD_ADDR_EXP 16
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// end ;
15239: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15240: LD_INT 35
15242: PPUSH
15243: CALL_OW 300
15247: NOT
15248: IFFALSE 15272
15250: GO 15252
15252: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15253: LD_INT 1
15255: PPUSH
15256: CALL 9995 0 1
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_STRING DDR-A-1
15267: PPUSH
15268: CALL_OW 88
15272: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15273: LD_INT 1
15275: PPUSH
15276: LD_INT 30
15278: PPUSH
15279: CALL 6209 0 2
15283: IFFALSE 15365
15285: GO 15287
15287: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15288: LD_INT 35
15290: PPUSH
15291: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15295: LD_INT 1
15297: PPUSH
15298: LD_INT 30
15300: PPUSH
15301: CALL 6209 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 461
15314: PUSH
15315: LD_INT 1
15317: NONEQUAL
15318: IFFALSE 15288
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15320: LD_INT 1
15322: PPUSH
15323: CALL 9995 0 1
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: LD_STRING D8-A-1
15334: PPUSH
15335: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15339: LD_INT 1
15341: PPUSH
15342: CALL 9995 0 1
15346: PUSH
15347: LD_INT 2
15349: ARRAY
15350: PPUSH
15351: LD_STRING D8-B-1
15353: PPUSH
15354: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15358: LD_STRING M_mineok
15360: PPUSH
15361: CALL_OW 337
// end ;
15365: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15366: LD_INT 22
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 30
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 57
15391: PUSH
15392: EMPTY
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: PUSH
15409: LD_INT 1
15411: GREATER
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: LD_INT 57
15438: PUSH
15439: EMPTY
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: PUSH
15456: LD_INT 1
15458: EQUAL
15459: PUSH
15460: LD_INT 35
15462: PPUSH
15463: CALL_OW 300
15467: NOT
15468: AND
15469: OR
15470: IFFALSE 15522
15472: GO 15474
15474: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 25
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: PUSH
15504: LD_INT 1
15506: ARRAY
15507: PPUSH
15508: LD_STRING D7-A-1
15510: PPUSH
15511: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15515: LD_STRING M_baseok
15517: PPUSH
15518: CALL_OW 337
// end ;
15522: END
// every 0 0$01 trigger mine_ck do
15523: LD_EXP 35
15527: IFFALSE 15558
15529: GO 15531
15531: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15532: LD_INT 1
15534: PPUSH
15535: CALL 9995 0 1
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: PPUSH
15544: LD_STRING D9-A-1
15546: PPUSH
15547: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15551: LD_STRING M_minedest
15553: PPUSH
15554: CALL_OW 337
// end ;
15558: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15559: LD_EXP 29
15563: IFFALSE 16069
15565: GO 15567
15567: DISABLE
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15575: LD_OWVAR 67
15579: PPUSH
15580: CALL 11896 0 1
// if not helps_can_arrive then
15584: LD_EXP 31
15588: NOT
15589: IFFALSE 15617
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15591: LD_EXP 40
15595: PUSH
15596: LD_INT 1
15598: ARRAY
15599: PPUSH
15600: LD_STRING DB-Delay
15602: PPUSH
15603: CALL_OW 94
// time := 10 10$00 ;
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 21000
15614: ST_TO_ADDR
// end else
15615: GO 15625
// time := 3 3$00 ;
15617: LD_ADDR_VAR 0 1
15621: PUSH
15622: LD_INT 6300
15624: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 35
15637: MINUS
15638: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15639: LD_INT 35
15641: PPUSH
15642: CALL_OW 67
// end until time = 0 0$00 ;
15646: LD_VAR 0 1
15650: PUSH
15651: LD_INT 0
15653: EQUAL
15654: IFFALSE 15625
// helps_arrive := true ;
15656: LD_ADDR_EXP 30
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// if IsLive ( guyA ) then
15664: LD_EXP 38
15668: PPUSH
15669: CALL_OW 300
15673: IFFALSE 15687
// r := guyA else
15675: LD_ADDR_VAR 0 4
15679: PUSH
15680: LD_EXP 38
15684: ST_TO_ADDR
15685: GO 15697
// r := guyB ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_EXP 39
15696: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15697: LD_EXP 40
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: LD_STRING D2-A-1
15708: PPUSH
15709: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15713: LD_VAR 0 4
15717: PPUSH
15718: LD_STRING D2-B-1
15720: PPUSH
15721: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15725: LD_EXP 40
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PPUSH
15734: LD_STRING D2-A-2
15736: PPUSH
15737: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15741: LD_VAR 0 4
15745: PPUSH
15746: LD_STRING D2-B-2
15748: PPUSH
15749: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15753: LD_EXP 40
15757: PUSH
15758: LD_INT 1
15760: ARRAY
15761: PPUSH
15762: LD_STRING D2-A-3
15764: PPUSH
15765: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15769: LD_VAR 0 4
15773: PPUSH
15774: LD_STRING D2-B-3
15776: PPUSH
15777: CALL_OW 88
// to_veh := [ ] ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: DOUBLE
15794: LD_INT 1
15796: DEC
15797: ST_TO_ADDR
15798: LD_EXP 40
15802: PUSH
15803: FOR_TO
15804: IFFALSE 16067
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15806: LD_EXP 40
15810: PUSH
15811: LD_VAR 0 2
15815: ARRAY
15816: PPUSH
15817: CALL_OW 110
15821: PUSH
15822: LD_INT 3
15824: EQUAL
15825: IFFALSE 15851
// to_veh := to_veh ^ Beta_Squad [ i ] else
15827: LD_ADDR_VAR 0 5
15831: PUSH
15832: LD_VAR 0 5
15836: PUSH
15837: LD_EXP 40
15841: PUSH
15842: LD_VAR 0 2
15846: ARRAY
15847: ADD
15848: ST_TO_ADDR
15849: GO 15976
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 2
15860: ARRAY
15861: PPUSH
15862: CALL_OW 110
15866: PUSH
15867: LD_INT 5
15869: EQUAL
15870: IFFALSE 15955
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15872: LD_EXP 40
15876: PUSH
15877: LD_VAR 0 2
15881: ARRAY
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 5
15903: PPUSH
15904: LD_INT 0
15906: PPUSH
15907: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15911: LD_VAR 0 5
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_EXP 40
15924: PUSH
15925: LD_VAR 0 2
15929: ARRAY
15930: PPUSH
15931: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_VAR 0 5
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 3
15952: ST_TO_ADDR
// end else
15953: GO 15976
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15955: LD_EXP 40
15959: PUSH
15960: LD_VAR 0 2
15964: ARRAY
15965: PPUSH
15966: LD_INT 5
15968: PPUSH
15969: LD_INT 0
15971: PPUSH
15972: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15976: LD_EXP 40
15980: PUSH
15981: LD_VAR 0 2
15985: ARRAY
15986: PPUSH
15987: LD_INT 165
15989: PPUSH
15990: LD_INT 105
15992: PPUSH
15993: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
15997: LD_INT 70
15999: PPUSH
16000: LD_INT 140
16002: PPUSH
16003: CALL_OW 12
16007: PPUSH
16008: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16012: LD_EXP 40
16016: PUSH
16017: LD_VAR 0 2
16021: ARRAY
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 235
// if i = 1 then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: IFFALSE 16050
// CenterNowOnXY ( 168 , 109 ) ;
16040: LD_INT 168
16042: PPUSH
16043: LD_INT 109
16045: PPUSH
16046: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16050: LD_EXP 40
16054: PUSH
16055: LD_VAR 0 2
16059: ARRAY
16060: PPUSH
16061: CALL_OW 141
// end ;
16065: GO 15803
16067: POP
16068: POP
// end ;
16069: PPOPN 5
16071: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16072: LD_EXP 30
16076: IFFALSE 17105
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
// begin Wait ( 5 5$00 ) ;
16085: LD_INT 10500
16087: PPUSH
16088: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16092: LD_OWVAR 67
16096: PPUSH
16097: CALL 12585 0 1
// to_veh := [ ] ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: EMPTY
16107: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: DOUBLE
16114: LD_INT 1
16116: DEC
16117: ST_TO_ADDR
16118: LD_EXP 41
16122: PUSH
16123: FOR_TO
16124: IFFALSE 16352
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16126: LD_EXP 41
16130: PUSH
16131: LD_VAR 0 1
16135: ARRAY
16136: PPUSH
16137: CALL_OW 110
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16171
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16147: LD_ADDR_VAR 0 2
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: LD_EXP 41
16161: PUSH
16162: LD_VAR 0 1
16166: ARRAY
16167: ADD
16168: ST_TO_ADDR
16169: GO 16296
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16171: LD_EXP 41
16175: PUSH
16176: LD_VAR 0 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 110
16186: PUSH
16187: LD_INT 5
16189: EQUAL
16190: IFFALSE 16275
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16192: LD_EXP 41
16196: PUSH
16197: LD_VAR 0 1
16201: ARRAY
16202: PPUSH
16203: LD_INT 4
16205: PPUSH
16206: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 5
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: LD_EXP 41
16244: PUSH
16245: LD_VAR 0 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: CALL_OW 3
16272: ST_TO_ADDR
// end else
16273: GO 16296
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16275: LD_EXP 41
16279: PUSH
16280: LD_VAR 0 1
16284: ARRAY
16285: PPUSH
16286: LD_INT 5
16288: PPUSH
16289: LD_INT 0
16291: PPUSH
16292: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16296: LD_EXP 41
16300: PUSH
16301: LD_VAR 0 1
16305: ARRAY
16306: PPUSH
16307: LD_INT 164
16309: PPUSH
16310: LD_INT 104
16312: PPUSH
16313: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16317: LD_INT 70
16319: PPUSH
16320: LD_INT 140
16322: PPUSH
16323: CALL_OW 12
16327: PPUSH
16328: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16332: LD_EXP 41
16336: PUSH
16337: LD_VAR 0 1
16341: ARRAY
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 235
// end ;
16350: GO 16123
16352: POP
16353: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16354: LD_EXP 41
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_STRING D3-A-1
16365: PPUSH
16366: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16370: LD_INT 1
16372: PPUSH
16373: CALL 9995 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_STRING D3-B-1
16384: PPUSH
16385: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16389: LD_EXP 41
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: LD_STRING D3-A-2
16400: PPUSH
16401: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16405: LD_INT 1
16407: PPUSH
16408: CALL 9995 0 1
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_STRING D3-B-2
16419: PPUSH
16420: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16424: LD_EXP 41
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_STRING D3-A-3
16435: PPUSH
16436: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16440: LD_INT 1
16442: PPUSH
16443: CALL 9995 0 1
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: LD_STRING D3-B-3
16454: PPUSH
16455: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16459: LD_EXP 41
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: PPUSH
16468: LD_STRING D3-A-4
16470: PPUSH
16471: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16475: LD_INT 1
16477: PPUSH
16478: CALL 9995 0 1
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_STRING D3-B-4
16489: PPUSH
16490: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16494: LD_EXP 41
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: LD_STRING D3-A-5
16505: PPUSH
16506: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16510: LD_INT 1
16512: PPUSH
16513: CALL 9995 0 1
16517: PUSH
16518: LD_INT 1
16520: ARRAY
16521: PPUSH
16522: LD_STRING D3-B-5
16524: PPUSH
16525: CALL_OW 88
// for i = 1 to Gamma_Squad do
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: DOUBLE
16535: LD_INT 1
16537: DEC
16538: ST_TO_ADDR
16539: LD_EXP 41
16543: PUSH
16544: FOR_TO
16545: IFFALSE 16567
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16547: LD_EXP 41
16551: PUSH
16552: LD_VAR 0 1
16556: ARRAY
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 235
16565: GO 16544
16567: POP
16568: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16569: LD_INT 6300
16571: PUSH
16572: LD_INT 10500
16574: PUSH
16575: LD_INT 11550
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: LD_OWVAR 67
16587: ARRAY
16588: PPUSH
16589: CALL_OW 67
// AddZetaSquad ;
16593: CALL 13314 0 0
// Wait ( 0 0$10 ) ;
16597: LD_INT 350
16599: PPUSH
16600: CALL_OW 67
// to_veh := [ ] ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: EMPTY
16610: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: DOUBLE
16617: LD_INT 1
16619: DEC
16620: ST_TO_ADDR
16621: LD_EXP 42
16625: PUSH
16626: FOR_TO
16627: IFFALSE 16837
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16629: LD_EXP 42
16633: PUSH
16634: LD_VAR 0 1
16638: ARRAY
16639: PPUSH
16640: CALL_OW 110
16644: PUSH
16645: LD_INT 3
16647: EQUAL
16648: IFFALSE 16674
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_EXP 42
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: ADD
16671: ST_TO_ADDR
16672: GO 16799
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16674: LD_EXP 42
16678: PUSH
16679: LD_VAR 0 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 110
16689: PUSH
16690: LD_INT 5
16692: EQUAL
16693: IFFALSE 16778
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16695: LD_EXP 42
16699: PUSH
16700: LD_VAR 0 1
16704: ARRAY
16705: PPUSH
16706: LD_INT 4
16708: PPUSH
16709: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 5
16726: PPUSH
16727: LD_INT 0
16729: PPUSH
16730: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: PPUSH
16743: LD_EXP 42
16747: PUSH
16748: LD_VAR 0 1
16752: ARRAY
16753: PPUSH
16754: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_VAR 0 2
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 3
16775: ST_TO_ADDR
// end else
16776: GO 16799
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16778: LD_EXP 42
16782: PUSH
16783: LD_VAR 0 1
16787: ARRAY
16788: PPUSH
16789: LD_INT 5
16791: PPUSH
16792: LD_INT 0
16794: PPUSH
16795: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16799: LD_EXP 42
16803: PUSH
16804: LD_VAR 0 1
16808: ARRAY
16809: PPUSH
16810: LD_INT 165
16812: PPUSH
16813: LD_INT 105
16815: PPUSH
16816: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16820: LD_INT 70
16822: PPUSH
16823: LD_INT 140
16825: PPUSH
16826: CALL_OW 12
16830: PPUSH
16831: CALL_OW 67
// end ;
16835: GO 16626
16837: POP
16838: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16839: LD_EXP 42
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: LD_STRING D4-A-1
16850: PPUSH
16851: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16855: LD_INT 1
16857: PPUSH
16858: CALL 9995 0 1
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: LD_STRING D4-B-1
16869: PPUSH
16870: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16874: LD_EXP 42
16878: PUSH
16879: LD_INT 1
16881: ARRAY
16882: PPUSH
16883: LD_STRING D4-A-2
16885: PPUSH
16886: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16890: LD_INT 1
16892: PPUSH
16893: CALL 9995 0 1
16897: PUSH
16898: LD_INT 1
16900: ARRAY
16901: PPUSH
16902: LD_STRING D4-B-2
16904: PPUSH
16905: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16909: LD_EXP 42
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: LD_STRING D4-A-3
16920: PPUSH
16921: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16925: LD_INT 1
16927: PPUSH
16928: CALL 9995 0 1
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_STRING D4-B-3
16939: PPUSH
16940: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16944: LD_EXP 42
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PPUSH
16953: LD_STRING D4-A-4
16955: PPUSH
16956: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16960: LD_INT 1
16962: PPUSH
16963: CALL 9995 0 1
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: LD_STRING D4-B-4
16974: PPUSH
16975: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16979: LD_EXP 42
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: LD_STRING D4-A-5
16990: PPUSH
16991: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
16995: LD_INT 1
16997: PPUSH
16998: CALL 9995 0 1
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: LD_STRING D4-B-5
17009: PPUSH
17010: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17014: LD_EXP 42
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PPUSH
17023: LD_STRING D4-A-6
17025: PPUSH
17026: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17030: LD_INT 1
17032: PPUSH
17033: CALL 9995 0 1
17037: PUSH
17038: LD_INT 1
17040: ARRAY
17041: PPUSH
17042: LD_STRING D4-B-6
17044: PPUSH
17045: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17049: LD_EXP 42
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: LD_STRING D4-A-7
17060: PPUSH
17061: CALL_OW 94
// for i = 1 to Zeta_Squad do
17065: LD_ADDR_VAR 0 1
17069: PUSH
17070: DOUBLE
17071: LD_INT 1
17073: DEC
17074: ST_TO_ADDR
17075: LD_EXP 42
17079: PUSH
17080: FOR_TO
17081: IFFALSE 17103
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17083: LD_EXP 42
17087: PUSH
17088: LD_VAR 0 1
17092: ARRAY
17093: PPUSH
17094: LD_INT 1
17096: PPUSH
17097: CALL_OW 235
17101: GO 17080
17103: POP
17104: POP
// end ;
17105: PPOPN 2
17107: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17108: LD_INT 11
17110: PPUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 70
17127: PUSH
17128: LD_INT 0
17130: GREATER
17131: IFFALSE 17156
17133: GO 17135
17135: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17136: LD_EXP 38
17140: PPUSH
17141: LD_STRING D10-A-1
17143: PPUSH
17144: CALL_OW 88
// ru_spotted := true ;
17148: LD_ADDR_EXP 16
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// end ;
17156: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17157: LD_EXP 38
17161: PPUSH
17162: CALL_OW 301
17166: PUSH
17167: LD_EXP 39
17171: PPUSH
17172: CALL_OW 301
17176: OR
17177: IFFALSE 17189
17179: GO 17181
17181: DISABLE
// begin YouLost ( DieP ) ;
17182: LD_STRING DieP
17184: PPUSH
17185: CALL_OW 104
// end ;
17189: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17190: LD_INT 34
17192: PUSH
17193: LD_INT 8
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: IFFALSE 17217
17206: GO 17208
17208: DISABLE
// sib_bomb_constructed := true ;
17209: LD_ADDR_EXP 36
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
17217: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17218: LD_EXP 29
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PUSH
17238: LD_INT 0
17240: EQUAL
17241: AND
17242: IFFALSE 17445
17244: GO 17246
17246: DISABLE
17247: LD_INT 0
17249: PPUSH
// begin game_status := false ;
17250: LD_ADDR_EXP 29
17254: PUSH
17255: LD_INT 0
17257: ST_TO_ADDR
// if not depotConstructed then
17258: LD_EXP 2
17262: NOT
17263: IFFALSE 17272
// SetAchievement ( ACH_NODEPOT ) ;
17265: LD_STRING ACH_NODEPOT
17267: PPUSH
17268: CALL_OW 543
// if Difficulty = 3 then
17272: LD_OWVAR 67
17276: PUSH
17277: LD_INT 3
17279: EQUAL
17280: IFFALSE 17289
// SetAchievement ( ACH_HARD ) ;
17282: LD_STRING ACH_HARD
17284: PPUSH
17285: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17289: LD_OWVAR 1
17293: PUSH
17294: LD_INT 35
17296: DIVREAL
17297: PUSH
17298: LD_INT 60
17300: DIVREAL
17301: PUSH
17302: LD_INT 70
17304: PUSH
17305: LD_INT 60
17307: PUSH
17308: LD_INT 50
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_OWVAR 67
17320: ARRAY
17321: LESS
17322: IFFALSE 17336
// AddMedal ( play , 1 ) else
17324: LD_STRING play
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: CALL_OW 101
17334: GO 17347
// AddMedal ( play , - 1 ) ;
17336: LD_STRING play
17338: PPUSH
17339: LD_INT 1
17341: NEG
17342: PPUSH
17343: CALL_OW 101
// if sib_bomb_constructed then
17347: LD_EXP 36
17351: IFFALSE 17365
// AddMedal ( sibbomb , 1 ) else
17353: LD_STRING sibbomb
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: CALL_OW 101
17363: GO 17376
// AddMedal ( sibbomb , - 1 ) ;
17365: LD_STRING sibbomb
17367: PPUSH
17368: LD_INT 1
17370: NEG
17371: PPUSH
17372: CALL_OW 101
// if mine_constructed and not mine_ck then
17376: LD_EXP 37
17380: PUSH
17381: LD_EXP 35
17385: NOT
17386: AND
17387: IFFALSE 17399
// AddMedal ( mine , 1 ) ;
17389: LD_STRING mine
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 101
// if mine_ck then
17399: LD_EXP 35
17403: IFFALSE 17416
// AddMedal ( mine , - 1 ) ;
17405: LD_STRING mine
17407: PPUSH
17408: LD_INT 1
17410: NEG
17411: PPUSH
17412: CALL_OW 101
// if not mine_constructed then
17416: LD_EXP 37
17420: NOT
17421: IFFALSE 17434
// AddMedal ( mine , - 2 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 2
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// GiveMedals ( Main ) ;
17434: LD_STRING Main
17436: PPUSH
17437: CALL_OW 102
// YouWin ;
17441: CALL_OW 103
// end ; end_of_file
17445: PPOPN 1
17447: END
// every 0 0$03 trigger game_status do var time ;
17448: LD_EXP 29
17452: IFFALSE 17617
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_INT 1050
17467: PUSH
17468: LD_INT 1575
17470: PUSH
17471: LD_INT 2100
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: LD_OWVAR 67
17483: ARRAY
17484: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17485: LD_VAR 0 1
17489: PUSH
17490: LD_INT 0
17492: PPUSH
17493: LD_INT 420
17495: PPUSH
17496: CALL_OW 12
17500: PLUS
17501: PPUSH
17502: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 5
17511: PPUSH
17512: CALL_OW 12
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17524: LD_INT 105
17526: PPUSH
17527: LD_INT 1050
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17539: LD_INT 1
17541: PPUSH
17542: LD_INT 5
17544: PPUSH
17545: CALL_OW 12
17549: PPUSH
17550: LD_INT 148
17552: PPUSH
17553: LD_INT 107
17555: PPUSH
17556: LD_INT 20
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17566: LD_OWVAR 1
17570: PUSH
17571: LD_INT 44100
17573: PUSH
17574: LD_INT 37800
17576: PUSH
17577: LD_INT 33600
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_OWVAR 67
17589: ARRAY
17590: MOD
17591: IFFALSE 17607
// time := time + 0 0$20 ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 700
17605: PLUS
17606: ST_TO_ADDR
// end until game_status = false ;
17607: LD_EXP 29
17611: PUSH
17612: LD_INT 0
17614: EQUAL
17615: IFFALSE 17485
// end ;
17617: PPOPN 1
17619: END
// every 0 0$03 trigger game_status do var time ;
17620: LD_EXP 29
17624: IFFALSE 17778
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 700
17639: PUSH
17640: LD_INT 875
17642: PUSH
17643: LD_INT 1400
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: LD_OWVAR 67
17655: ARRAY
17656: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 0
17664: PPUSH
17665: LD_INT 385
17667: PPUSH
17668: CALL_OW 12
17672: PLUS
17673: PPUSH
17674: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17678: LD_INT 1
17680: PPUSH
17681: LD_INT 5
17683: PPUSH
17684: CALL_OW 12
17688: PPUSH
17689: LD_INT 102
17691: PPUSH
17692: LD_INT 6
17694: PPUSH
17695: LD_INT 25
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17705: LD_OWVAR 1
17709: PUSH
17710: LD_INT 52500
17712: PUSH
17713: LD_INT 46200
17715: PUSH
17716: LD_INT 42000
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: PUSH
17724: LD_OWVAR 67
17728: ARRAY
17729: MOD
17730: IFFALSE 17746
// time := time + 0 0$25 ;
17732: LD_ADDR_VAR 0 1
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 875
17744: PLUS
17745: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17746: LD_OWVAR 1
17750: PUSH
17751: LD_INT 231000
17753: MOD
17754: PUSH
17755: LD_INT 0
17757: EQUAL
17758: IFFALSE 17768
// time := 0 0$30 ;
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_INT 1050
17767: ST_TO_ADDR
// end until game_status = false ;
17768: LD_EXP 29
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17657
// end ;
17778: PPOPN 1
17780: END
// every 0 0$03 trigger game_status do var time ;
17781: LD_EXP 29
17785: IFFALSE 17921
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: LD_INT 1050
17800: PUSH
17801: LD_INT 1575
17803: PUSH
17804: LD_INT 1750
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: LD_OWVAR 67
17816: ARRAY
17817: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17818: LD_VAR 0 1
17822: PUSH
17823: LD_INT 0
17825: PPUSH
17826: LD_INT 385
17828: PPUSH
17829: CALL_OW 12
17833: PLUS
17834: PPUSH
17835: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 5
17844: PPUSH
17845: CALL_OW 12
17849: PPUSH
17850: LD_INT 51
17852: PPUSH
17853: LD_INT 74
17855: PPUSH
17856: LD_INT 25
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17866: LD_OWVAR 1
17870: PUSH
17871: LD_INT 84000
17873: PUSH
17874: LD_INT 105000
17876: PUSH
17877: LD_INT 136500
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_OWVAR 67
17889: ARRAY
17890: MOD
17891: PUSH
17892: LD_INT 0
17894: EQUAL
17895: IFFALSE 17911
// time := time + 0 0$15 ;
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 525
17909: PLUS
17910: ST_TO_ADDR
// end until game_status = false ;
17911: LD_EXP 29
17915: PUSH
17916: LD_INT 0
17918: EQUAL
17919: IFFALSE 17818
// end ; end_of_file
17921: PPOPN 1
17923: END
// every 0 0$01 trigger not debug do
17924: LD_EXP 1
17928: NOT
17929: IFFALSE 17952
17931: GO 17933
17933: DISABLE
// begin enable ;
17934: ENABLE
// Display_Strings := [ #tick , tick ] ;
17935: LD_ADDR_OWVAR 47
17939: PUSH
17940: LD_STRING #tick
17942: PUSH
17943: LD_OWVAR 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
// end ; end_of_file
17952: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17953: LD_VAR 0 1
17957: PPUSH
17958: CALL_OW 255
17962: PUSH
17963: LD_INT 3
17965: EQUAL
17966: PUSH
17967: LD_VAR 0 1
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: LD_INT 34
17977: PUSH
17978: LD_INT 46
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 34
17987: PUSH
17988: LD_INT 47
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 34
17997: PUSH
17998: LD_INT 45
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: PUSH
18011: EMPTY
18012: LIST
18013: PPUSH
18014: CALL_OW 69
18018: IN
18019: AND
18020: IFFALSE 18038
// ru_reserve := ru_reserve ^ un ;
18022: LD_ADDR_EXP 9
18026: PUSH
18027: LD_EXP 9
18031: PUSH
18032: LD_VAR 0 1
18036: ADD
18037: ST_TO_ADDR
// if GetSide ( un ) = 3 and not GetWeapon ( un ) in [ ru_siberium_rocket , ru_crane ] then
18038: LD_VAR 0 1
18042: PPUSH
18043: CALL_OW 255
18047: PUSH
18048: LD_INT 3
18050: EQUAL
18051: PUSH
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 264
18061: PUSH
18062: LD_INT 48
18064: PUSH
18065: LD_INT 52
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: IN
18072: NOT
18073: AND
18074: IFFALSE 18091
// ComMoveXY ( un , 65 , 60 ) ;
18076: LD_VAR 0 1
18080: PPUSH
18081: LD_INT 65
18083: PPUSH
18084: LD_INT 60
18086: PPUSH
18087: CALL_OW 111
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18091: LD_VAR 0 1
18095: PUSH
18096: LD_INT 22
18098: PUSH
18099: LD_INT 3
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 34
18108: PUSH
18109: LD_INT 48
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PPUSH
18120: CALL_OW 69
18124: IN
18125: IFFALSE 18178
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18127: LD_INT 12
18129: PPUSH
18130: LD_INT 22
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 70
18144: IFFALSE 18163
// ComAttackPlace ( un , 98 , 10 ) else
18146: LD_VAR 0 1
18150: PPUSH
18151: LD_INT 98
18153: PPUSH
18154: LD_INT 10
18156: PPUSH
18157: CALL_OW 116
18161: GO 18178
// ComAttackPlace ( un , 134 , 99 ) ;
18163: LD_VAR 0 1
18167: PPUSH
18168: LD_INT 134
18170: PPUSH
18171: LD_INT 99
18173: PPUSH
18174: CALL_OW 116
// end ;
18178: PPOPN 2
18180: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18181: LD_VAR 0 1
18185: PPUSH
18186: CALL 32071 0 1
// if GetChassis ( un ) = 25 then
18190: LD_VAR 0 1
18194: PPUSH
18195: CALL_OW 265
18199: PUSH
18200: LD_INT 25
18202: EQUAL
18203: IFFALSE 18212
// SetAchievement ( ACH_BEH ) ;
18205: LD_STRING ACH_BEH
18207: PPUSH
18208: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18212: LD_VAR 0 1
18216: PUSH
18217: LD_INT 22
18219: PUSH
18220: LD_INT 3
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 21
18229: PUSH
18230: LD_INT 3
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PPUSH
18241: CALL_OW 69
18245: IN
18246: PUSH
18247: LD_VAR 0 1
18251: PPUSH
18252: CALL_OW 266
18256: PUSH
18257: LD_INT 0
18259: PUSH
18260: LD_INT 29
18262: PUSH
18263: LD_INT 30
18265: PUSH
18266: LD_INT 26
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: IN
18275: NOT
18276: AND
18277: IFFALSE 18363
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18279: LD_ADDR_EXP 13
18283: PUSH
18284: LD_EXP 13
18288: PUSH
18289: LD_VAR 0 1
18293: PPUSH
18294: CALL_OW 266
18298: ADD
18299: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18300: LD_ADDR_EXP 13
18304: PUSH
18305: LD_EXP 13
18309: PUSH
18310: LD_VAR 0 1
18314: PPUSH
18315: CALL_OW 250
18319: ADD
18320: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18321: LD_ADDR_EXP 13
18325: PUSH
18326: LD_EXP 13
18330: PUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: CALL_OW 251
18340: ADD
18341: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18342: LD_ADDR_EXP 13
18346: PUSH
18347: LD_EXP 13
18351: PUSH
18352: LD_VAR 0 1
18356: PPUSH
18357: CALL_OW 254
18361: ADD
18362: ST_TO_ADDR
// end ; if un in ru_attack_list then
18363: LD_VAR 0 1
18367: PUSH
18368: LD_EXP 10
18372: IN
18373: IFFALSE 18391
// ru_attack_list := ru_attack_list diff un ;
18375: LD_ADDR_EXP 10
18379: PUSH
18380: LD_EXP 10
18384: PUSH
18385: LD_VAR 0 1
18389: DIFF
18390: ST_TO_ADDR
// if un in ru_protector then
18391: LD_VAR 0 1
18395: PUSH
18396: LD_EXP 17
18400: IN
18401: IFFALSE 18419
// ru_protector := ru_protector diff un ;
18403: LD_ADDR_EXP 17
18407: PUSH
18408: LD_EXP 17
18412: PUSH
18413: LD_VAR 0 1
18417: DIFF
18418: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18419: LD_VAR 0 1
18423: PPUSH
18424: CALL_OW 266
18428: PUSH
18429: LD_INT 30
18431: EQUAL
18432: PUSH
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 255
18442: PUSH
18443: LD_INT 1
18445: EQUAL
18446: AND
18447: IFFALSE 18457
// mine_ck := true ;
18449: LD_ADDR_EXP 35
18453: PUSH
18454: LD_INT 1
18456: ST_TO_ADDR
// end ;
18457: PPOPN 1
18459: END
// on BuildingComplete ( un ) do var i ;
18460: LD_INT 0
18462: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18463: LD_VAR 0 1
18467: PPUSH
18468: CALL_OW 255
18472: PUSH
18473: LD_INT 1
18475: EQUAL
18476: PUSH
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 266
18486: PUSH
18487: LD_INT 0
18489: EQUAL
18490: AND
18491: IFFALSE 18501
// depotConstructed := true ;
18493: LD_ADDR_EXP 2
18497: PUSH
18498: LD_INT 1
18500: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18501: LD_VAR 0 1
18505: PPUSH
18506: CALL_OW 255
18510: PUSH
18511: LD_INT 1
18513: EQUAL
18514: PUSH
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 266
18524: PUSH
18525: LD_INT 30
18527: EQUAL
18528: AND
18529: IFFALSE 18539
// mine_constructed := true ;
18531: LD_ADDR_EXP 37
18535: PUSH
18536: LD_INT 1
18538: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 255
18548: PUSH
18549: LD_INT 3
18551: EQUAL
18552: PUSH
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 266
18562: PUSH
18563: LD_INT 0
18565: EQUAL
18566: AND
18567: IFFALSE 18624
// begin for i = 1 to 2 do
18569: LD_ADDR_VAR 0 2
18573: PUSH
18574: DOUBLE
18575: LD_INT 1
18577: DEC
18578: ST_TO_ADDR
18579: LD_INT 2
18581: PUSH
18582: FOR_TO
18583: IFFALSE 18622
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18585: LD_EXP 20
18589: PUSH
18590: LD_VAR 0 2
18594: ARRAY
18595: PPUSH
18596: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18600: LD_EXP 20
18604: PUSH
18605: LD_VAR 0 2
18609: ARRAY
18610: PPUSH
18611: LD_VAR 0 1
18615: PPUSH
18616: CALL_OW 180
// end ;
18620: GO 18582
18622: POP
18623: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 255
18633: PUSH
18634: LD_INT 3
18636: EQUAL
18637: PUSH
18638: LD_VAR 0 1
18642: PPUSH
18643: CALL_OW 266
18647: PUSH
18648: LD_EXP 13
18652: IN
18653: AND
18654: IFFALSE 18694
// for i = 1 to 4 do
18656: LD_ADDR_VAR 0 2
18660: PUSH
18661: DOUBLE
18662: LD_INT 1
18664: DEC
18665: ST_TO_ADDR
18666: LD_INT 4
18668: PUSH
18669: FOR_TO
18670: IFFALSE 18692
// ru_blist := Delete ( ru_blist , 1 ) ;
18672: LD_ADDR_EXP 13
18676: PUSH
18677: LD_EXP 13
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: CALL_OW 3
18689: ST_TO_ADDR
18690: GO 18669
18692: POP
18693: POP
// end ;
18694: PPOPN 2
18696: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18697: LD_VAR 0 1
18701: PPUSH
18702: LD_VAR 0 2
18706: PPUSH
18707: LD_VAR 0 3
18711: PPUSH
18712: CALL 32169 0 3
// end ;
18716: PPOPN 3
18718: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18719: LD_VAR 0 1
18723: PPUSH
18724: CALL 32177 0 1
// end ; end_of_file
18728: PPOPN 1
18730: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18731: LD_INT 0
18733: PPUSH
// ar_miner := 81 ;
18734: LD_ADDR_EXP 50
18738: PUSH
18739: LD_INT 81
18741: ST_TO_ADDR
// ar_crane := 88 ;
18742: LD_ADDR_EXP 49
18746: PUSH
18747: LD_INT 88
18749: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18750: LD_ADDR_EXP 44
18754: PUSH
18755: LD_INT 89
18757: ST_TO_ADDR
// us_hack := 99 ;
18758: LD_ADDR_EXP 45
18762: PUSH
18763: LD_INT 99
18765: ST_TO_ADDR
// us_artillery := 97 ;
18766: LD_ADDR_EXP 46
18770: PUSH
18771: LD_INT 97
18773: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18774: LD_ADDR_EXP 47
18778: PUSH
18779: LD_INT 91
18781: ST_TO_ADDR
// ar_mortar := 92 ;
18782: LD_ADDR_EXP 48
18786: PUSH
18787: LD_INT 92
18789: ST_TO_ADDR
// ru_radar := 98 ;
18790: LD_ADDR_EXP 43
18794: PUSH
18795: LD_INT 98
18797: ST_TO_ADDR
// tech_Artillery := 80 ;
18798: LD_ADDR_EXP 51
18802: PUSH
18803: LD_INT 80
18805: ST_TO_ADDR
// tech_RadMat := 81 ;
18806: LD_ADDR_EXP 52
18810: PUSH
18811: LD_INT 81
18813: ST_TO_ADDR
// tech_BasicTools := 82 ;
18814: LD_ADDR_EXP 53
18818: PUSH
18819: LD_INT 82
18821: ST_TO_ADDR
// tech_Cargo := 83 ;
18822: LD_ADDR_EXP 54
18826: PUSH
18827: LD_INT 83
18829: ST_TO_ADDR
// tech_Track := 84 ;
18830: LD_ADDR_EXP 55
18834: PUSH
18835: LD_INT 84
18837: ST_TO_ADDR
// tech_Crane := 85 ;
18838: LD_ADDR_EXP 56
18842: PUSH
18843: LD_INT 85
18845: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18846: LD_ADDR_EXP 57
18850: PUSH
18851: LD_INT 86
18853: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18854: LD_ADDR_EXP 58
18858: PUSH
18859: LD_INT 87
18861: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18862: LD_ADDR_EXP 59
18866: PUSH
18867: LD_INT 88
18869: ST_TO_ADDR
// class_mastodont := 31 ;
18870: LD_ADDR_EXP 60
18874: PUSH
18875: LD_INT 31
18877: ST_TO_ADDR
// class_horse := 21 ;
18878: LD_ADDR_EXP 61
18882: PUSH
18883: LD_INT 21
18885: ST_TO_ADDR
// end ;
18886: LD_VAR 0 1
18890: RET
// every 1 do
18891: GO 18893
18893: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18894: CALL 18731 0 0
18898: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18899: LD_INT 0
18901: PPUSH
// if p2 = 100 then
18902: LD_VAR 0 2
18906: PUSH
18907: LD_INT 100
18909: EQUAL
18910: IFFALSE 19859
// begin if not StreamModeActive then
18912: LD_EXP 62
18916: NOT
18917: IFFALSE 18927
// StreamModeActive := true ;
18919: LD_ADDR_EXP 62
18923: PUSH
18924: LD_INT 1
18926: ST_TO_ADDR
// if p3 = 0 then
18927: LD_VAR 0 3
18931: PUSH
18932: LD_INT 0
18934: EQUAL
18935: IFFALSE 18941
// InitStreamMode ;
18937: CALL 20019 0 0
// if p3 = 1 then
18941: LD_VAR 0 3
18945: PUSH
18946: LD_INT 1
18948: EQUAL
18949: IFFALSE 18959
// sRocket := true ;
18951: LD_ADDR_EXP 67
18955: PUSH
18956: LD_INT 1
18958: ST_TO_ADDR
// if p3 = 2 then
18959: LD_VAR 0 3
18963: PUSH
18964: LD_INT 2
18966: EQUAL
18967: IFFALSE 18977
// sSpeed := true ;
18969: LD_ADDR_EXP 66
18973: PUSH
18974: LD_INT 1
18976: ST_TO_ADDR
// if p3 = 3 then
18977: LD_VAR 0 3
18981: PUSH
18982: LD_INT 3
18984: EQUAL
18985: IFFALSE 18995
// sEngine := true ;
18987: LD_ADDR_EXP 68
18991: PUSH
18992: LD_INT 1
18994: ST_TO_ADDR
// if p3 = 4 then
18995: LD_VAR 0 3
18999: PUSH
19000: LD_INT 4
19002: EQUAL
19003: IFFALSE 19013
// sSpec := true ;
19005: LD_ADDR_EXP 65
19009: PUSH
19010: LD_INT 1
19012: ST_TO_ADDR
// if p3 = 5 then
19013: LD_VAR 0 3
19017: PUSH
19018: LD_INT 5
19020: EQUAL
19021: IFFALSE 19031
// sLevel := true ;
19023: LD_ADDR_EXP 69
19027: PUSH
19028: LD_INT 1
19030: ST_TO_ADDR
// if p3 = 6 then
19031: LD_VAR 0 3
19035: PUSH
19036: LD_INT 6
19038: EQUAL
19039: IFFALSE 19049
// sArmoury := true ;
19041: LD_ADDR_EXP 70
19045: PUSH
19046: LD_INT 1
19048: ST_TO_ADDR
// if p3 = 7 then
19049: LD_VAR 0 3
19053: PUSH
19054: LD_INT 7
19056: EQUAL
19057: IFFALSE 19067
// sRadar := true ;
19059: LD_ADDR_EXP 71
19063: PUSH
19064: LD_INT 1
19066: ST_TO_ADDR
// if p3 = 8 then
19067: LD_VAR 0 3
19071: PUSH
19072: LD_INT 8
19074: EQUAL
19075: IFFALSE 19085
// sBunker := true ;
19077: LD_ADDR_EXP 72
19081: PUSH
19082: LD_INT 1
19084: ST_TO_ADDR
// if p3 = 9 then
19085: LD_VAR 0 3
19089: PUSH
19090: LD_INT 9
19092: EQUAL
19093: IFFALSE 19103
// sHack := true ;
19095: LD_ADDR_EXP 73
19099: PUSH
19100: LD_INT 1
19102: ST_TO_ADDR
// if p3 = 10 then
19103: LD_VAR 0 3
19107: PUSH
19108: LD_INT 10
19110: EQUAL
19111: IFFALSE 19121
// sFire := true ;
19113: LD_ADDR_EXP 74
19117: PUSH
19118: LD_INT 1
19120: ST_TO_ADDR
// if p3 = 11 then
19121: LD_VAR 0 3
19125: PUSH
19126: LD_INT 11
19128: EQUAL
19129: IFFALSE 19139
// sRefresh := true ;
19131: LD_ADDR_EXP 75
19135: PUSH
19136: LD_INT 1
19138: ST_TO_ADDR
// if p3 = 12 then
19139: LD_VAR 0 3
19143: PUSH
19144: LD_INT 12
19146: EQUAL
19147: IFFALSE 19157
// sExp := true ;
19149: LD_ADDR_EXP 76
19153: PUSH
19154: LD_INT 1
19156: ST_TO_ADDR
// if p3 = 13 then
19157: LD_VAR 0 3
19161: PUSH
19162: LD_INT 13
19164: EQUAL
19165: IFFALSE 19175
// sDepot := true ;
19167: LD_ADDR_EXP 77
19171: PUSH
19172: LD_INT 1
19174: ST_TO_ADDR
// if p3 = 14 then
19175: LD_VAR 0 3
19179: PUSH
19180: LD_INT 14
19182: EQUAL
19183: IFFALSE 19193
// sFlag := true ;
19185: LD_ADDR_EXP 78
19189: PUSH
19190: LD_INT 1
19192: ST_TO_ADDR
// if p3 = 15 then
19193: LD_VAR 0 3
19197: PUSH
19198: LD_INT 15
19200: EQUAL
19201: IFFALSE 19211
// sKamikadze := true ;
19203: LD_ADDR_EXP 86
19207: PUSH
19208: LD_INT 1
19210: ST_TO_ADDR
// if p3 = 16 then
19211: LD_VAR 0 3
19215: PUSH
19216: LD_INT 16
19218: EQUAL
19219: IFFALSE 19229
// sTroll := true ;
19221: LD_ADDR_EXP 87
19225: PUSH
19226: LD_INT 1
19228: ST_TO_ADDR
// if p3 = 17 then
19229: LD_VAR 0 3
19233: PUSH
19234: LD_INT 17
19236: EQUAL
19237: IFFALSE 19247
// sSlow := true ;
19239: LD_ADDR_EXP 88
19243: PUSH
19244: LD_INT 1
19246: ST_TO_ADDR
// if p3 = 18 then
19247: LD_VAR 0 3
19251: PUSH
19252: LD_INT 18
19254: EQUAL
19255: IFFALSE 19265
// sLack := true ;
19257: LD_ADDR_EXP 89
19261: PUSH
19262: LD_INT 1
19264: ST_TO_ADDR
// if p3 = 19 then
19265: LD_VAR 0 3
19269: PUSH
19270: LD_INT 19
19272: EQUAL
19273: IFFALSE 19283
// sTank := true ;
19275: LD_ADDR_EXP 91
19279: PUSH
19280: LD_INT 1
19282: ST_TO_ADDR
// if p3 = 20 then
19283: LD_VAR 0 3
19287: PUSH
19288: LD_INT 20
19290: EQUAL
19291: IFFALSE 19301
// sRemote := true ;
19293: LD_ADDR_EXP 92
19297: PUSH
19298: LD_INT 1
19300: ST_TO_ADDR
// if p3 = 21 then
19301: LD_VAR 0 3
19305: PUSH
19306: LD_INT 21
19308: EQUAL
19309: IFFALSE 19319
// sPowell := true ;
19311: LD_ADDR_EXP 93
19315: PUSH
19316: LD_INT 1
19318: ST_TO_ADDR
// if p3 = 22 then
19319: LD_VAR 0 3
19323: PUSH
19324: LD_INT 22
19326: EQUAL
19327: IFFALSE 19337
// sTeleport := true ;
19329: LD_ADDR_EXP 96
19333: PUSH
19334: LD_INT 1
19336: ST_TO_ADDR
// if p3 = 23 then
19337: LD_VAR 0 3
19341: PUSH
19342: LD_INT 23
19344: EQUAL
19345: IFFALSE 19355
// sOilTower := true ;
19347: LD_ADDR_EXP 98
19351: PUSH
19352: LD_INT 1
19354: ST_TO_ADDR
// if p3 = 24 then
19355: LD_VAR 0 3
19359: PUSH
19360: LD_INT 24
19362: EQUAL
19363: IFFALSE 19373
// sShovel := true ;
19365: LD_ADDR_EXP 99
19369: PUSH
19370: LD_INT 1
19372: ST_TO_ADDR
// if p3 = 25 then
19373: LD_VAR 0 3
19377: PUSH
19378: LD_INT 25
19380: EQUAL
19381: IFFALSE 19391
// sSheik := true ;
19383: LD_ADDR_EXP 100
19387: PUSH
19388: LD_INT 1
19390: ST_TO_ADDR
// if p3 = 26 then
19391: LD_VAR 0 3
19395: PUSH
19396: LD_INT 26
19398: EQUAL
19399: IFFALSE 19409
// sEarthquake := true ;
19401: LD_ADDR_EXP 102
19405: PUSH
19406: LD_INT 1
19408: ST_TO_ADDR
// if p3 = 27 then
19409: LD_VAR 0 3
19413: PUSH
19414: LD_INT 27
19416: EQUAL
19417: IFFALSE 19427
// sAI := true ;
19419: LD_ADDR_EXP 103
19423: PUSH
19424: LD_INT 1
19426: ST_TO_ADDR
// if p3 = 28 then
19427: LD_VAR 0 3
19431: PUSH
19432: LD_INT 28
19434: EQUAL
19435: IFFALSE 19445
// sCargo := true ;
19437: LD_ADDR_EXP 106
19441: PUSH
19442: LD_INT 1
19444: ST_TO_ADDR
// if p3 = 29 then
19445: LD_VAR 0 3
19449: PUSH
19450: LD_INT 29
19452: EQUAL
19453: IFFALSE 19463
// sDLaser := true ;
19455: LD_ADDR_EXP 107
19459: PUSH
19460: LD_INT 1
19462: ST_TO_ADDR
// if p3 = 30 then
19463: LD_VAR 0 3
19467: PUSH
19468: LD_INT 30
19470: EQUAL
19471: IFFALSE 19481
// sExchange := true ;
19473: LD_ADDR_EXP 108
19477: PUSH
19478: LD_INT 1
19480: ST_TO_ADDR
// if p3 = 31 then
19481: LD_VAR 0 3
19485: PUSH
19486: LD_INT 31
19488: EQUAL
19489: IFFALSE 19499
// sFac := true ;
19491: LD_ADDR_EXP 109
19495: PUSH
19496: LD_INT 1
19498: ST_TO_ADDR
// if p3 = 32 then
19499: LD_VAR 0 3
19503: PUSH
19504: LD_INT 32
19506: EQUAL
19507: IFFALSE 19517
// sPower := true ;
19509: LD_ADDR_EXP 110
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// if p3 = 33 then
19517: LD_VAR 0 3
19521: PUSH
19522: LD_INT 33
19524: EQUAL
19525: IFFALSE 19535
// sRandom := true ;
19527: LD_ADDR_EXP 111
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// if p3 = 34 then
19535: LD_VAR 0 3
19539: PUSH
19540: LD_INT 34
19542: EQUAL
19543: IFFALSE 19553
// sShield := true ;
19545: LD_ADDR_EXP 112
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// if p3 = 35 then
19553: LD_VAR 0 3
19557: PUSH
19558: LD_INT 35
19560: EQUAL
19561: IFFALSE 19571
// sTime := true ;
19563: LD_ADDR_EXP 113
19567: PUSH
19568: LD_INT 1
19570: ST_TO_ADDR
// if p3 = 36 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_INT 36
19578: EQUAL
19579: IFFALSE 19589
// sTools := true ;
19581: LD_ADDR_EXP 114
19585: PUSH
19586: LD_INT 1
19588: ST_TO_ADDR
// if p3 = 101 then
19589: LD_VAR 0 3
19593: PUSH
19594: LD_INT 101
19596: EQUAL
19597: IFFALSE 19607
// sSold := true ;
19599: LD_ADDR_EXP 79
19603: PUSH
19604: LD_INT 1
19606: ST_TO_ADDR
// if p3 = 102 then
19607: LD_VAR 0 3
19611: PUSH
19612: LD_INT 102
19614: EQUAL
19615: IFFALSE 19625
// sDiff := true ;
19617: LD_ADDR_EXP 80
19621: PUSH
19622: LD_INT 1
19624: ST_TO_ADDR
// if p3 = 103 then
19625: LD_VAR 0 3
19629: PUSH
19630: LD_INT 103
19632: EQUAL
19633: IFFALSE 19643
// sFog := true ;
19635: LD_ADDR_EXP 83
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// if p3 = 104 then
19643: LD_VAR 0 3
19647: PUSH
19648: LD_INT 104
19650: EQUAL
19651: IFFALSE 19661
// sReset := true ;
19653: LD_ADDR_EXP 84
19657: PUSH
19658: LD_INT 1
19660: ST_TO_ADDR
// if p3 = 105 then
19661: LD_VAR 0 3
19665: PUSH
19666: LD_INT 105
19668: EQUAL
19669: IFFALSE 19679
// sSun := true ;
19671: LD_ADDR_EXP 85
19675: PUSH
19676: LD_INT 1
19678: ST_TO_ADDR
// if p3 = 106 then
19679: LD_VAR 0 3
19683: PUSH
19684: LD_INT 106
19686: EQUAL
19687: IFFALSE 19697
// sTiger := true ;
19689: LD_ADDR_EXP 81
19693: PUSH
19694: LD_INT 1
19696: ST_TO_ADDR
// if p3 = 107 then
19697: LD_VAR 0 3
19701: PUSH
19702: LD_INT 107
19704: EQUAL
19705: IFFALSE 19715
// sBomb := true ;
19707: LD_ADDR_EXP 82
19711: PUSH
19712: LD_INT 1
19714: ST_TO_ADDR
// if p3 = 108 then
19715: LD_VAR 0 3
19719: PUSH
19720: LD_INT 108
19722: EQUAL
19723: IFFALSE 19733
// sWound := true ;
19725: LD_ADDR_EXP 90
19729: PUSH
19730: LD_INT 1
19732: ST_TO_ADDR
// if p3 = 109 then
19733: LD_VAR 0 3
19737: PUSH
19738: LD_INT 109
19740: EQUAL
19741: IFFALSE 19751
// sBetray := true ;
19743: LD_ADDR_EXP 94
19747: PUSH
19748: LD_INT 1
19750: ST_TO_ADDR
// if p3 = 110 then
19751: LD_VAR 0 3
19755: PUSH
19756: LD_INT 110
19758: EQUAL
19759: IFFALSE 19769
// sContamin := true ;
19761: LD_ADDR_EXP 95
19765: PUSH
19766: LD_INT 1
19768: ST_TO_ADDR
// if p3 = 111 then
19769: LD_VAR 0 3
19773: PUSH
19774: LD_INT 111
19776: EQUAL
19777: IFFALSE 19787
// sOil := true ;
19779: LD_ADDR_EXP 97
19783: PUSH
19784: LD_INT 1
19786: ST_TO_ADDR
// if p3 = 112 then
19787: LD_VAR 0 3
19791: PUSH
19792: LD_INT 112
19794: EQUAL
19795: IFFALSE 19805
// sStu := true ;
19797: LD_ADDR_EXP 101
19801: PUSH
19802: LD_INT 1
19804: ST_TO_ADDR
// if p3 = 113 then
19805: LD_VAR 0 3
19809: PUSH
19810: LD_INT 113
19812: EQUAL
19813: IFFALSE 19823
// sBazooka := true ;
19815: LD_ADDR_EXP 104
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// if p3 = 114 then
19823: LD_VAR 0 3
19827: PUSH
19828: LD_INT 114
19830: EQUAL
19831: IFFALSE 19841
// sMortar := true ;
19833: LD_ADDR_EXP 105
19837: PUSH
19838: LD_INT 1
19840: ST_TO_ADDR
// if p3 = 115 then
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 115
19848: EQUAL
19849: IFFALSE 19859
// sRanger := true ;
19851: LD_ADDR_EXP 115
19855: PUSH
19856: LD_INT 1
19858: ST_TO_ADDR
// end ; if p2 = 101 then
19859: LD_VAR 0 2
19863: PUSH
19864: LD_INT 101
19866: EQUAL
19867: IFFALSE 19995
// begin case p3 of 1 :
19869: LD_VAR 0 3
19873: PUSH
19874: LD_INT 1
19876: DOUBLE
19877: EQUAL
19878: IFTRUE 19882
19880: GO 19889
19882: POP
// hHackUnlimitedResources ; 2 :
19883: CALL 31032 0 0
19887: GO 19995
19889: LD_INT 2
19891: DOUBLE
19892: EQUAL
19893: IFTRUE 19897
19895: GO 19904
19897: POP
// hHackSetLevel10 ; 3 :
19898: CALL 31165 0 0
19902: GO 19995
19904: LD_INT 3
19906: DOUBLE
19907: EQUAL
19908: IFTRUE 19912
19910: GO 19919
19912: POP
// hHackSetLevel10YourUnits ; 4 :
19913: CALL 31250 0 0
19917: GO 19995
19919: LD_INT 4
19921: DOUBLE
19922: EQUAL
19923: IFTRUE 19927
19925: GO 19934
19927: POP
// hHackInvincible ; 5 :
19928: CALL 31698 0 0
19932: GO 19995
19934: LD_INT 5
19936: DOUBLE
19937: EQUAL
19938: IFTRUE 19942
19940: GO 19949
19942: POP
// hHackInvisible ; 6 :
19943: CALL 31809 0 0
19947: GO 19995
19949: LD_INT 6
19951: DOUBLE
19952: EQUAL
19953: IFTRUE 19957
19955: GO 19964
19957: POP
// hHackChangeYourSide ; 7 :
19958: CALL 31866 0 0
19962: GO 19995
19964: LD_INT 7
19966: DOUBLE
19967: EQUAL
19968: IFTRUE 19972
19970: GO 19979
19972: POP
// hHackChangeUnitSide ; 8 :
19973: CALL 31908 0 0
19977: GO 19995
19979: LD_INT 8
19981: DOUBLE
19982: EQUAL
19983: IFTRUE 19987
19985: GO 19994
19987: POP
// hHackFog ; end ;
19988: CALL 32009 0 0
19992: GO 19995
19994: POP
// end ; end ;
19995: LD_VAR 0 7
19999: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20000: GO 20002
20002: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20003: LD_STRING initStreamRollete();
20005: PPUSH
20006: CALL_OW 559
// InitStreamMode ;
20010: CALL 20019 0 0
// DefineStreamItems ( ) ;
20014: CALL 20459 0 0
// end ;
20018: END
// function InitStreamMode ; begin
20019: LD_INT 0
20021: PPUSH
// streamModeActive := false ;
20022: LD_ADDR_EXP 62
20026: PUSH
20027: LD_INT 0
20029: ST_TO_ADDR
// normalCounter := 36 ;
20030: LD_ADDR_EXP 63
20034: PUSH
20035: LD_INT 36
20037: ST_TO_ADDR
// hardcoreCounter := 16 ;
20038: LD_ADDR_EXP 64
20042: PUSH
20043: LD_INT 16
20045: ST_TO_ADDR
// sRocket := false ;
20046: LD_ADDR_EXP 67
20050: PUSH
20051: LD_INT 0
20053: ST_TO_ADDR
// sSpeed := false ;
20054: LD_ADDR_EXP 66
20058: PUSH
20059: LD_INT 0
20061: ST_TO_ADDR
// sEngine := false ;
20062: LD_ADDR_EXP 68
20066: PUSH
20067: LD_INT 0
20069: ST_TO_ADDR
// sSpec := false ;
20070: LD_ADDR_EXP 65
20074: PUSH
20075: LD_INT 0
20077: ST_TO_ADDR
// sLevel := false ;
20078: LD_ADDR_EXP 69
20082: PUSH
20083: LD_INT 0
20085: ST_TO_ADDR
// sArmoury := false ;
20086: LD_ADDR_EXP 70
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// sRadar := false ;
20094: LD_ADDR_EXP 71
20098: PUSH
20099: LD_INT 0
20101: ST_TO_ADDR
// sBunker := false ;
20102: LD_ADDR_EXP 72
20106: PUSH
20107: LD_INT 0
20109: ST_TO_ADDR
// sHack := false ;
20110: LD_ADDR_EXP 73
20114: PUSH
20115: LD_INT 0
20117: ST_TO_ADDR
// sFire := false ;
20118: LD_ADDR_EXP 74
20122: PUSH
20123: LD_INT 0
20125: ST_TO_ADDR
// sRefresh := false ;
20126: LD_ADDR_EXP 75
20130: PUSH
20131: LD_INT 0
20133: ST_TO_ADDR
// sExp := false ;
20134: LD_ADDR_EXP 76
20138: PUSH
20139: LD_INT 0
20141: ST_TO_ADDR
// sDepot := false ;
20142: LD_ADDR_EXP 77
20146: PUSH
20147: LD_INT 0
20149: ST_TO_ADDR
// sFlag := false ;
20150: LD_ADDR_EXP 78
20154: PUSH
20155: LD_INT 0
20157: ST_TO_ADDR
// sKamikadze := false ;
20158: LD_ADDR_EXP 86
20162: PUSH
20163: LD_INT 0
20165: ST_TO_ADDR
// sTroll := false ;
20166: LD_ADDR_EXP 87
20170: PUSH
20171: LD_INT 0
20173: ST_TO_ADDR
// sSlow := false ;
20174: LD_ADDR_EXP 88
20178: PUSH
20179: LD_INT 0
20181: ST_TO_ADDR
// sLack := false ;
20182: LD_ADDR_EXP 89
20186: PUSH
20187: LD_INT 0
20189: ST_TO_ADDR
// sTank := false ;
20190: LD_ADDR_EXP 91
20194: PUSH
20195: LD_INT 0
20197: ST_TO_ADDR
// sRemote := false ;
20198: LD_ADDR_EXP 92
20202: PUSH
20203: LD_INT 0
20205: ST_TO_ADDR
// sPowell := false ;
20206: LD_ADDR_EXP 93
20210: PUSH
20211: LD_INT 0
20213: ST_TO_ADDR
// sTeleport := false ;
20214: LD_ADDR_EXP 96
20218: PUSH
20219: LD_INT 0
20221: ST_TO_ADDR
// sOilTower := false ;
20222: LD_ADDR_EXP 98
20226: PUSH
20227: LD_INT 0
20229: ST_TO_ADDR
// sShovel := false ;
20230: LD_ADDR_EXP 99
20234: PUSH
20235: LD_INT 0
20237: ST_TO_ADDR
// sSheik := false ;
20238: LD_ADDR_EXP 100
20242: PUSH
20243: LD_INT 0
20245: ST_TO_ADDR
// sEarthquake := false ;
20246: LD_ADDR_EXP 102
20250: PUSH
20251: LD_INT 0
20253: ST_TO_ADDR
// sAI := false ;
20254: LD_ADDR_EXP 103
20258: PUSH
20259: LD_INT 0
20261: ST_TO_ADDR
// sCargo := false ;
20262: LD_ADDR_EXP 106
20266: PUSH
20267: LD_INT 0
20269: ST_TO_ADDR
// sDLaser := false ;
20270: LD_ADDR_EXP 107
20274: PUSH
20275: LD_INT 0
20277: ST_TO_ADDR
// sExchange := false ;
20278: LD_ADDR_EXP 108
20282: PUSH
20283: LD_INT 0
20285: ST_TO_ADDR
// sFac := false ;
20286: LD_ADDR_EXP 109
20290: PUSH
20291: LD_INT 0
20293: ST_TO_ADDR
// sPower := false ;
20294: LD_ADDR_EXP 110
20298: PUSH
20299: LD_INT 0
20301: ST_TO_ADDR
// sRandom := false ;
20302: LD_ADDR_EXP 111
20306: PUSH
20307: LD_INT 0
20309: ST_TO_ADDR
// sShield := false ;
20310: LD_ADDR_EXP 112
20314: PUSH
20315: LD_INT 0
20317: ST_TO_ADDR
// sTime := false ;
20318: LD_ADDR_EXP 113
20322: PUSH
20323: LD_INT 0
20325: ST_TO_ADDR
// sTools := false ;
20326: LD_ADDR_EXP 114
20330: PUSH
20331: LD_INT 0
20333: ST_TO_ADDR
// sSold := false ;
20334: LD_ADDR_EXP 79
20338: PUSH
20339: LD_INT 0
20341: ST_TO_ADDR
// sDiff := false ;
20342: LD_ADDR_EXP 80
20346: PUSH
20347: LD_INT 0
20349: ST_TO_ADDR
// sFog := false ;
20350: LD_ADDR_EXP 83
20354: PUSH
20355: LD_INT 0
20357: ST_TO_ADDR
// sReset := false ;
20358: LD_ADDR_EXP 84
20362: PUSH
20363: LD_INT 0
20365: ST_TO_ADDR
// sSun := false ;
20366: LD_ADDR_EXP 85
20370: PUSH
20371: LD_INT 0
20373: ST_TO_ADDR
// sTiger := false ;
20374: LD_ADDR_EXP 81
20378: PUSH
20379: LD_INT 0
20381: ST_TO_ADDR
// sBomb := false ;
20382: LD_ADDR_EXP 82
20386: PUSH
20387: LD_INT 0
20389: ST_TO_ADDR
// sWound := false ;
20390: LD_ADDR_EXP 90
20394: PUSH
20395: LD_INT 0
20397: ST_TO_ADDR
// sBetray := false ;
20398: LD_ADDR_EXP 94
20402: PUSH
20403: LD_INT 0
20405: ST_TO_ADDR
// sContamin := false ;
20406: LD_ADDR_EXP 95
20410: PUSH
20411: LD_INT 0
20413: ST_TO_ADDR
// sOil := false ;
20414: LD_ADDR_EXP 97
20418: PUSH
20419: LD_INT 0
20421: ST_TO_ADDR
// sStu := false ;
20422: LD_ADDR_EXP 101
20426: PUSH
20427: LD_INT 0
20429: ST_TO_ADDR
// sBazooka := false ;
20430: LD_ADDR_EXP 104
20434: PUSH
20435: LD_INT 0
20437: ST_TO_ADDR
// sMortar := false ;
20438: LD_ADDR_EXP 105
20442: PUSH
20443: LD_INT 0
20445: ST_TO_ADDR
// sRanger := false ;
20446: LD_ADDR_EXP 115
20450: PUSH
20451: LD_INT 0
20453: ST_TO_ADDR
// end ;
20454: LD_VAR 0 1
20458: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20459: LD_INT 0
20461: PPUSH
20462: PPUSH
20463: PPUSH
20464: PPUSH
20465: PPUSH
// result := [ ] ;
20466: LD_ADDR_VAR 0 1
20470: PUSH
20471: EMPTY
20472: ST_TO_ADDR
// if campaign_id = 1 then
20473: LD_OWVAR 69
20477: PUSH
20478: LD_INT 1
20480: EQUAL
20481: IFFALSE 23419
// begin case mission_number of 1 :
20483: LD_OWVAR 70
20487: PUSH
20488: LD_INT 1
20490: DOUBLE
20491: EQUAL
20492: IFTRUE 20496
20494: GO 20560
20496: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20497: LD_ADDR_VAR 0 1
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: LD_INT 4
20507: PUSH
20508: LD_INT 11
20510: PUSH
20511: LD_INT 12
20513: PUSH
20514: LD_INT 15
20516: PUSH
20517: LD_INT 16
20519: PUSH
20520: LD_INT 22
20522: PUSH
20523: LD_INT 23
20525: PUSH
20526: LD_INT 26
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 101
20542: PUSH
20543: LD_INT 102
20545: PUSH
20546: LD_INT 106
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: LIST
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: ST_TO_ADDR
20558: GO 23417
20560: LD_INT 2
20562: DOUBLE
20563: EQUAL
20564: IFTRUE 20568
20566: GO 20640
20568: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20569: LD_ADDR_VAR 0 1
20573: PUSH
20574: LD_INT 2
20576: PUSH
20577: LD_INT 4
20579: PUSH
20580: LD_INT 11
20582: PUSH
20583: LD_INT 12
20585: PUSH
20586: LD_INT 15
20588: PUSH
20589: LD_INT 16
20591: PUSH
20592: LD_INT 22
20594: PUSH
20595: LD_INT 23
20597: PUSH
20598: LD_INT 26
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 101
20614: PUSH
20615: LD_INT 102
20617: PUSH
20618: LD_INT 105
20620: PUSH
20621: LD_INT 106
20623: PUSH
20624: LD_INT 108
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: ST_TO_ADDR
20638: GO 23417
20640: LD_INT 3
20642: DOUBLE
20643: EQUAL
20644: IFTRUE 20648
20646: GO 20724
20648: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20649: LD_ADDR_VAR 0 1
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: LD_INT 4
20659: PUSH
20660: LD_INT 5
20662: PUSH
20663: LD_INT 11
20665: PUSH
20666: LD_INT 12
20668: PUSH
20669: LD_INT 15
20671: PUSH
20672: LD_INT 16
20674: PUSH
20675: LD_INT 22
20677: PUSH
20678: LD_INT 26
20680: PUSH
20681: LD_INT 36
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 101
20698: PUSH
20699: LD_INT 102
20701: PUSH
20702: LD_INT 105
20704: PUSH
20705: LD_INT 106
20707: PUSH
20708: LD_INT 108
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: ST_TO_ADDR
20722: GO 23417
20724: LD_INT 4
20726: DOUBLE
20727: EQUAL
20728: IFTRUE 20732
20730: GO 20816
20732: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20733: LD_ADDR_VAR 0 1
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: LD_INT 4
20743: PUSH
20744: LD_INT 5
20746: PUSH
20747: LD_INT 8
20749: PUSH
20750: LD_INT 11
20752: PUSH
20753: LD_INT 12
20755: PUSH
20756: LD_INT 15
20758: PUSH
20759: LD_INT 16
20761: PUSH
20762: LD_INT 22
20764: PUSH
20765: LD_INT 23
20767: PUSH
20768: LD_INT 26
20770: PUSH
20771: LD_INT 36
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 101
20790: PUSH
20791: LD_INT 102
20793: PUSH
20794: LD_INT 105
20796: PUSH
20797: LD_INT 106
20799: PUSH
20800: LD_INT 108
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: ST_TO_ADDR
20814: GO 23417
20816: LD_INT 5
20818: DOUBLE
20819: EQUAL
20820: IFTRUE 20824
20822: GO 20924
20824: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20825: LD_ADDR_VAR 0 1
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: LD_INT 4
20835: PUSH
20836: LD_INT 5
20838: PUSH
20839: LD_INT 6
20841: PUSH
20842: LD_INT 8
20844: PUSH
20845: LD_INT 11
20847: PUSH
20848: LD_INT 12
20850: PUSH
20851: LD_INT 15
20853: PUSH
20854: LD_INT 16
20856: PUSH
20857: LD_INT 22
20859: PUSH
20860: LD_INT 23
20862: PUSH
20863: LD_INT 25
20865: PUSH
20866: LD_INT 26
20868: PUSH
20869: LD_INT 36
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 101
20890: PUSH
20891: LD_INT 102
20893: PUSH
20894: LD_INT 105
20896: PUSH
20897: LD_INT 106
20899: PUSH
20900: LD_INT 108
20902: PUSH
20903: LD_INT 109
20905: PUSH
20906: LD_INT 112
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: ST_TO_ADDR
20922: GO 23417
20924: LD_INT 6
20926: DOUBLE
20927: EQUAL
20928: IFTRUE 20932
20930: GO 21052
20932: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20933: LD_ADDR_VAR 0 1
20937: PUSH
20938: LD_INT 2
20940: PUSH
20941: LD_INT 4
20943: PUSH
20944: LD_INT 5
20946: PUSH
20947: LD_INT 6
20949: PUSH
20950: LD_INT 8
20952: PUSH
20953: LD_INT 11
20955: PUSH
20956: LD_INT 12
20958: PUSH
20959: LD_INT 15
20961: PUSH
20962: LD_INT 16
20964: PUSH
20965: LD_INT 20
20967: PUSH
20968: LD_INT 21
20970: PUSH
20971: LD_INT 22
20973: PUSH
20974: LD_INT 23
20976: PUSH
20977: LD_INT 25
20979: PUSH
20980: LD_INT 26
20982: PUSH
20983: LD_INT 30
20985: PUSH
20986: LD_INT 31
20988: PUSH
20989: LD_INT 32
20991: PUSH
20992: LD_INT 36
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 101
21018: PUSH
21019: LD_INT 102
21021: PUSH
21022: LD_INT 105
21024: PUSH
21025: LD_INT 106
21027: PUSH
21028: LD_INT 108
21030: PUSH
21031: LD_INT 109
21033: PUSH
21034: LD_INT 112
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: ST_TO_ADDR
21050: GO 23417
21052: LD_INT 7
21054: DOUBLE
21055: EQUAL
21056: IFTRUE 21060
21058: GO 21160
21060: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21061: LD_ADDR_VAR 0 1
21065: PUSH
21066: LD_INT 2
21068: PUSH
21069: LD_INT 4
21071: PUSH
21072: LD_INT 5
21074: PUSH
21075: LD_INT 7
21077: PUSH
21078: LD_INT 11
21080: PUSH
21081: LD_INT 12
21083: PUSH
21084: LD_INT 15
21086: PUSH
21087: LD_INT 16
21089: PUSH
21090: LD_INT 20
21092: PUSH
21093: LD_INT 21
21095: PUSH
21096: LD_INT 22
21098: PUSH
21099: LD_INT 23
21101: PUSH
21102: LD_INT 25
21104: PUSH
21105: LD_INT 26
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 101
21126: PUSH
21127: LD_INT 102
21129: PUSH
21130: LD_INT 103
21132: PUSH
21133: LD_INT 105
21135: PUSH
21136: LD_INT 106
21138: PUSH
21139: LD_INT 108
21141: PUSH
21142: LD_INT 112
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: ST_TO_ADDR
21158: GO 23417
21160: LD_INT 8
21162: DOUBLE
21163: EQUAL
21164: IFTRUE 21168
21166: GO 21296
21168: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21169: LD_ADDR_VAR 0 1
21173: PUSH
21174: LD_INT 2
21176: PUSH
21177: LD_INT 4
21179: PUSH
21180: LD_INT 5
21182: PUSH
21183: LD_INT 6
21185: PUSH
21186: LD_INT 7
21188: PUSH
21189: LD_INT 8
21191: PUSH
21192: LD_INT 11
21194: PUSH
21195: LD_INT 12
21197: PUSH
21198: LD_INT 15
21200: PUSH
21201: LD_INT 16
21203: PUSH
21204: LD_INT 20
21206: PUSH
21207: LD_INT 21
21209: PUSH
21210: LD_INT 22
21212: PUSH
21213: LD_INT 23
21215: PUSH
21216: LD_INT 25
21218: PUSH
21219: LD_INT 26
21221: PUSH
21222: LD_INT 30
21224: PUSH
21225: LD_INT 31
21227: PUSH
21228: LD_INT 32
21230: PUSH
21231: LD_INT 36
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 101
21258: PUSH
21259: LD_INT 102
21261: PUSH
21262: LD_INT 103
21264: PUSH
21265: LD_INT 105
21267: PUSH
21268: LD_INT 106
21270: PUSH
21271: LD_INT 108
21273: PUSH
21274: LD_INT 109
21276: PUSH
21277: LD_INT 112
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: ST_TO_ADDR
21294: GO 23417
21296: LD_INT 9
21298: DOUBLE
21299: EQUAL
21300: IFTRUE 21304
21302: GO 21440
21304: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21305: LD_ADDR_VAR 0 1
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: LD_INT 4
21315: PUSH
21316: LD_INT 5
21318: PUSH
21319: LD_INT 6
21321: PUSH
21322: LD_INT 7
21324: PUSH
21325: LD_INT 8
21327: PUSH
21328: LD_INT 11
21330: PUSH
21331: LD_INT 12
21333: PUSH
21334: LD_INT 15
21336: PUSH
21337: LD_INT 16
21339: PUSH
21340: LD_INT 20
21342: PUSH
21343: LD_INT 21
21345: PUSH
21346: LD_INT 22
21348: PUSH
21349: LD_INT 23
21351: PUSH
21352: LD_INT 25
21354: PUSH
21355: LD_INT 26
21357: PUSH
21358: LD_INT 28
21360: PUSH
21361: LD_INT 30
21363: PUSH
21364: LD_INT 31
21366: PUSH
21367: LD_INT 32
21369: PUSH
21370: LD_INT 36
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 101
21398: PUSH
21399: LD_INT 102
21401: PUSH
21402: LD_INT 103
21404: PUSH
21405: LD_INT 105
21407: PUSH
21408: LD_INT 106
21410: PUSH
21411: LD_INT 108
21413: PUSH
21414: LD_INT 109
21416: PUSH
21417: LD_INT 112
21419: PUSH
21420: LD_INT 114
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: ST_TO_ADDR
21438: GO 23417
21440: LD_INT 10
21442: DOUBLE
21443: EQUAL
21444: IFTRUE 21448
21446: GO 21632
21448: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21449: LD_ADDR_VAR 0 1
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: LD_INT 4
21459: PUSH
21460: LD_INT 5
21462: PUSH
21463: LD_INT 6
21465: PUSH
21466: LD_INT 7
21468: PUSH
21469: LD_INT 8
21471: PUSH
21472: LD_INT 9
21474: PUSH
21475: LD_INT 10
21477: PUSH
21478: LD_INT 11
21480: PUSH
21481: LD_INT 12
21483: PUSH
21484: LD_INT 13
21486: PUSH
21487: LD_INT 14
21489: PUSH
21490: LD_INT 15
21492: PUSH
21493: LD_INT 16
21495: PUSH
21496: LD_INT 17
21498: PUSH
21499: LD_INT 18
21501: PUSH
21502: LD_INT 19
21504: PUSH
21505: LD_INT 20
21507: PUSH
21508: LD_INT 21
21510: PUSH
21511: LD_INT 22
21513: PUSH
21514: LD_INT 23
21516: PUSH
21517: LD_INT 24
21519: PUSH
21520: LD_INT 25
21522: PUSH
21523: LD_INT 26
21525: PUSH
21526: LD_INT 28
21528: PUSH
21529: LD_INT 30
21531: PUSH
21532: LD_INT 31
21534: PUSH
21535: LD_INT 32
21537: PUSH
21538: LD_INT 36
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 101
21574: PUSH
21575: LD_INT 102
21577: PUSH
21578: LD_INT 103
21580: PUSH
21581: LD_INT 104
21583: PUSH
21584: LD_INT 105
21586: PUSH
21587: LD_INT 106
21589: PUSH
21590: LD_INT 107
21592: PUSH
21593: LD_INT 108
21595: PUSH
21596: LD_INT 109
21598: PUSH
21599: LD_INT 110
21601: PUSH
21602: LD_INT 111
21604: PUSH
21605: LD_INT 112
21607: PUSH
21608: LD_INT 114
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: ST_TO_ADDR
21630: GO 23417
21632: LD_INT 11
21634: DOUBLE
21635: EQUAL
21636: IFTRUE 21640
21638: GO 21832
21640: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21641: LD_ADDR_VAR 0 1
21645: PUSH
21646: LD_INT 2
21648: PUSH
21649: LD_INT 3
21651: PUSH
21652: LD_INT 4
21654: PUSH
21655: LD_INT 5
21657: PUSH
21658: LD_INT 6
21660: PUSH
21661: LD_INT 7
21663: PUSH
21664: LD_INT 8
21666: PUSH
21667: LD_INT 9
21669: PUSH
21670: LD_INT 10
21672: PUSH
21673: LD_INT 11
21675: PUSH
21676: LD_INT 12
21678: PUSH
21679: LD_INT 13
21681: PUSH
21682: LD_INT 14
21684: PUSH
21685: LD_INT 15
21687: PUSH
21688: LD_INT 16
21690: PUSH
21691: LD_INT 17
21693: PUSH
21694: LD_INT 18
21696: PUSH
21697: LD_INT 19
21699: PUSH
21700: LD_INT 20
21702: PUSH
21703: LD_INT 21
21705: PUSH
21706: LD_INT 22
21708: PUSH
21709: LD_INT 23
21711: PUSH
21712: LD_INT 24
21714: PUSH
21715: LD_INT 25
21717: PUSH
21718: LD_INT 26
21720: PUSH
21721: LD_INT 28
21723: PUSH
21724: LD_INT 30
21726: PUSH
21727: LD_INT 31
21729: PUSH
21730: LD_INT 32
21732: PUSH
21733: LD_INT 34
21735: PUSH
21736: LD_INT 36
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 101
21774: PUSH
21775: LD_INT 102
21777: PUSH
21778: LD_INT 103
21780: PUSH
21781: LD_INT 104
21783: PUSH
21784: LD_INT 105
21786: PUSH
21787: LD_INT 106
21789: PUSH
21790: LD_INT 107
21792: PUSH
21793: LD_INT 108
21795: PUSH
21796: LD_INT 109
21798: PUSH
21799: LD_INT 110
21801: PUSH
21802: LD_INT 111
21804: PUSH
21805: LD_INT 112
21807: PUSH
21808: LD_INT 114
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: ST_TO_ADDR
21830: GO 23417
21832: LD_INT 12
21834: DOUBLE
21835: EQUAL
21836: IFTRUE 21840
21838: GO 22048
21840: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21841: LD_ADDR_VAR 0 1
21845: PUSH
21846: LD_INT 1
21848: PUSH
21849: LD_INT 2
21851: PUSH
21852: LD_INT 3
21854: PUSH
21855: LD_INT 4
21857: PUSH
21858: LD_INT 5
21860: PUSH
21861: LD_INT 6
21863: PUSH
21864: LD_INT 7
21866: PUSH
21867: LD_INT 8
21869: PUSH
21870: LD_INT 9
21872: PUSH
21873: LD_INT 10
21875: PUSH
21876: LD_INT 11
21878: PUSH
21879: LD_INT 12
21881: PUSH
21882: LD_INT 13
21884: PUSH
21885: LD_INT 14
21887: PUSH
21888: LD_INT 15
21890: PUSH
21891: LD_INT 16
21893: PUSH
21894: LD_INT 17
21896: PUSH
21897: LD_INT 18
21899: PUSH
21900: LD_INT 19
21902: PUSH
21903: LD_INT 20
21905: PUSH
21906: LD_INT 21
21908: PUSH
21909: LD_INT 22
21911: PUSH
21912: LD_INT 23
21914: PUSH
21915: LD_INT 24
21917: PUSH
21918: LD_INT 25
21920: PUSH
21921: LD_INT 26
21923: PUSH
21924: LD_INT 27
21926: PUSH
21927: LD_INT 28
21929: PUSH
21930: LD_INT 30
21932: PUSH
21933: LD_INT 31
21935: PUSH
21936: LD_INT 32
21938: PUSH
21939: LD_INT 33
21941: PUSH
21942: LD_INT 34
21944: PUSH
21945: LD_INT 36
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 101
21986: PUSH
21987: LD_INT 102
21989: PUSH
21990: LD_INT 103
21992: PUSH
21993: LD_INT 104
21995: PUSH
21996: LD_INT 105
21998: PUSH
21999: LD_INT 106
22001: PUSH
22002: LD_INT 107
22004: PUSH
22005: LD_INT 108
22007: PUSH
22008: LD_INT 109
22010: PUSH
22011: LD_INT 110
22013: PUSH
22014: LD_INT 111
22016: PUSH
22017: LD_INT 112
22019: PUSH
22020: LD_INT 113
22022: PUSH
22023: LD_INT 114
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: ST_TO_ADDR
22046: GO 23417
22048: LD_INT 13
22050: DOUBLE
22051: EQUAL
22052: IFTRUE 22056
22054: GO 22252
22056: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22057: LD_ADDR_VAR 0 1
22061: PUSH
22062: LD_INT 1
22064: PUSH
22065: LD_INT 2
22067: PUSH
22068: LD_INT 3
22070: PUSH
22071: LD_INT 4
22073: PUSH
22074: LD_INT 5
22076: PUSH
22077: LD_INT 8
22079: PUSH
22080: LD_INT 9
22082: PUSH
22083: LD_INT 10
22085: PUSH
22086: LD_INT 11
22088: PUSH
22089: LD_INT 12
22091: PUSH
22092: LD_INT 14
22094: PUSH
22095: LD_INT 15
22097: PUSH
22098: LD_INT 16
22100: PUSH
22101: LD_INT 17
22103: PUSH
22104: LD_INT 18
22106: PUSH
22107: LD_INT 19
22109: PUSH
22110: LD_INT 20
22112: PUSH
22113: LD_INT 21
22115: PUSH
22116: LD_INT 22
22118: PUSH
22119: LD_INT 23
22121: PUSH
22122: LD_INT 24
22124: PUSH
22125: LD_INT 25
22127: PUSH
22128: LD_INT 26
22130: PUSH
22131: LD_INT 27
22133: PUSH
22134: LD_INT 28
22136: PUSH
22137: LD_INT 30
22139: PUSH
22140: LD_INT 31
22142: PUSH
22143: LD_INT 32
22145: PUSH
22146: LD_INT 33
22148: PUSH
22149: LD_INT 34
22151: PUSH
22152: LD_INT 36
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 101
22190: PUSH
22191: LD_INT 102
22193: PUSH
22194: LD_INT 103
22196: PUSH
22197: LD_INT 104
22199: PUSH
22200: LD_INT 105
22202: PUSH
22203: LD_INT 106
22205: PUSH
22206: LD_INT 107
22208: PUSH
22209: LD_INT 108
22211: PUSH
22212: LD_INT 109
22214: PUSH
22215: LD_INT 110
22217: PUSH
22218: LD_INT 111
22220: PUSH
22221: LD_INT 112
22223: PUSH
22224: LD_INT 113
22226: PUSH
22227: LD_INT 114
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: ST_TO_ADDR
22250: GO 23417
22252: LD_INT 14
22254: DOUBLE
22255: EQUAL
22256: IFTRUE 22260
22258: GO 22472
22260: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22261: LD_ADDR_VAR 0 1
22265: PUSH
22266: LD_INT 1
22268: PUSH
22269: LD_INT 2
22271: PUSH
22272: LD_INT 3
22274: PUSH
22275: LD_INT 4
22277: PUSH
22278: LD_INT 5
22280: PUSH
22281: LD_INT 6
22283: PUSH
22284: LD_INT 7
22286: PUSH
22287: LD_INT 8
22289: PUSH
22290: LD_INT 9
22292: PUSH
22293: LD_INT 10
22295: PUSH
22296: LD_INT 11
22298: PUSH
22299: LD_INT 12
22301: PUSH
22302: LD_INT 13
22304: PUSH
22305: LD_INT 14
22307: PUSH
22308: LD_INT 15
22310: PUSH
22311: LD_INT 16
22313: PUSH
22314: LD_INT 17
22316: PUSH
22317: LD_INT 18
22319: PUSH
22320: LD_INT 19
22322: PUSH
22323: LD_INT 20
22325: PUSH
22326: LD_INT 21
22328: PUSH
22329: LD_INT 22
22331: PUSH
22332: LD_INT 23
22334: PUSH
22335: LD_INT 24
22337: PUSH
22338: LD_INT 25
22340: PUSH
22341: LD_INT 26
22343: PUSH
22344: LD_INT 27
22346: PUSH
22347: LD_INT 28
22349: PUSH
22350: LD_INT 29
22352: PUSH
22353: LD_INT 30
22355: PUSH
22356: LD_INT 31
22358: PUSH
22359: LD_INT 32
22361: PUSH
22362: LD_INT 33
22364: PUSH
22365: LD_INT 34
22367: PUSH
22368: LD_INT 36
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 101
22410: PUSH
22411: LD_INT 102
22413: PUSH
22414: LD_INT 103
22416: PUSH
22417: LD_INT 104
22419: PUSH
22420: LD_INT 105
22422: PUSH
22423: LD_INT 106
22425: PUSH
22426: LD_INT 107
22428: PUSH
22429: LD_INT 108
22431: PUSH
22432: LD_INT 109
22434: PUSH
22435: LD_INT 110
22437: PUSH
22438: LD_INT 111
22440: PUSH
22441: LD_INT 112
22443: PUSH
22444: LD_INT 113
22446: PUSH
22447: LD_INT 114
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: ST_TO_ADDR
22470: GO 23417
22472: LD_INT 15
22474: DOUBLE
22475: EQUAL
22476: IFTRUE 22480
22478: GO 22692
22480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22481: LD_ADDR_VAR 0 1
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: LD_INT 3
22494: PUSH
22495: LD_INT 4
22497: PUSH
22498: LD_INT 5
22500: PUSH
22501: LD_INT 6
22503: PUSH
22504: LD_INT 7
22506: PUSH
22507: LD_INT 8
22509: PUSH
22510: LD_INT 9
22512: PUSH
22513: LD_INT 10
22515: PUSH
22516: LD_INT 11
22518: PUSH
22519: LD_INT 12
22521: PUSH
22522: LD_INT 13
22524: PUSH
22525: LD_INT 14
22527: PUSH
22528: LD_INT 15
22530: PUSH
22531: LD_INT 16
22533: PUSH
22534: LD_INT 17
22536: PUSH
22537: LD_INT 18
22539: PUSH
22540: LD_INT 19
22542: PUSH
22543: LD_INT 20
22545: PUSH
22546: LD_INT 21
22548: PUSH
22549: LD_INT 22
22551: PUSH
22552: LD_INT 23
22554: PUSH
22555: LD_INT 24
22557: PUSH
22558: LD_INT 25
22560: PUSH
22561: LD_INT 26
22563: PUSH
22564: LD_INT 27
22566: PUSH
22567: LD_INT 28
22569: PUSH
22570: LD_INT 29
22572: PUSH
22573: LD_INT 30
22575: PUSH
22576: LD_INT 31
22578: PUSH
22579: LD_INT 32
22581: PUSH
22582: LD_INT 33
22584: PUSH
22585: LD_INT 34
22587: PUSH
22588: LD_INT 36
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 101
22630: PUSH
22631: LD_INT 102
22633: PUSH
22634: LD_INT 103
22636: PUSH
22637: LD_INT 104
22639: PUSH
22640: LD_INT 105
22642: PUSH
22643: LD_INT 106
22645: PUSH
22646: LD_INT 107
22648: PUSH
22649: LD_INT 108
22651: PUSH
22652: LD_INT 109
22654: PUSH
22655: LD_INT 110
22657: PUSH
22658: LD_INT 111
22660: PUSH
22661: LD_INT 112
22663: PUSH
22664: LD_INT 113
22666: PUSH
22667: LD_INT 114
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: ST_TO_ADDR
22690: GO 23417
22692: LD_INT 16
22694: DOUBLE
22695: EQUAL
22696: IFTRUE 22700
22698: GO 22824
22700: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22701: LD_ADDR_VAR 0 1
22705: PUSH
22706: LD_INT 2
22708: PUSH
22709: LD_INT 4
22711: PUSH
22712: LD_INT 5
22714: PUSH
22715: LD_INT 7
22717: PUSH
22718: LD_INT 11
22720: PUSH
22721: LD_INT 12
22723: PUSH
22724: LD_INT 15
22726: PUSH
22727: LD_INT 16
22729: PUSH
22730: LD_INT 20
22732: PUSH
22733: LD_INT 21
22735: PUSH
22736: LD_INT 22
22738: PUSH
22739: LD_INT 23
22741: PUSH
22742: LD_INT 25
22744: PUSH
22745: LD_INT 26
22747: PUSH
22748: LD_INT 30
22750: PUSH
22751: LD_INT 31
22753: PUSH
22754: LD_INT 32
22756: PUSH
22757: LD_INT 33
22759: PUSH
22760: LD_INT 34
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 101
22786: PUSH
22787: LD_INT 102
22789: PUSH
22790: LD_INT 103
22792: PUSH
22793: LD_INT 106
22795: PUSH
22796: LD_INT 108
22798: PUSH
22799: LD_INT 112
22801: PUSH
22802: LD_INT 113
22804: PUSH
22805: LD_INT 114
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: ST_TO_ADDR
22822: GO 23417
22824: LD_INT 17
22826: DOUBLE
22827: EQUAL
22828: IFTRUE 22832
22830: GO 23044
22832: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22833: LD_ADDR_VAR 0 1
22837: PUSH
22838: LD_INT 1
22840: PUSH
22841: LD_INT 2
22843: PUSH
22844: LD_INT 3
22846: PUSH
22847: LD_INT 4
22849: PUSH
22850: LD_INT 5
22852: PUSH
22853: LD_INT 6
22855: PUSH
22856: LD_INT 7
22858: PUSH
22859: LD_INT 8
22861: PUSH
22862: LD_INT 9
22864: PUSH
22865: LD_INT 10
22867: PUSH
22868: LD_INT 11
22870: PUSH
22871: LD_INT 12
22873: PUSH
22874: LD_INT 13
22876: PUSH
22877: LD_INT 14
22879: PUSH
22880: LD_INT 15
22882: PUSH
22883: LD_INT 16
22885: PUSH
22886: LD_INT 17
22888: PUSH
22889: LD_INT 18
22891: PUSH
22892: LD_INT 19
22894: PUSH
22895: LD_INT 20
22897: PUSH
22898: LD_INT 21
22900: PUSH
22901: LD_INT 22
22903: PUSH
22904: LD_INT 23
22906: PUSH
22907: LD_INT 24
22909: PUSH
22910: LD_INT 25
22912: PUSH
22913: LD_INT 26
22915: PUSH
22916: LD_INT 27
22918: PUSH
22919: LD_INT 28
22921: PUSH
22922: LD_INT 29
22924: PUSH
22925: LD_INT 30
22927: PUSH
22928: LD_INT 31
22930: PUSH
22931: LD_INT 32
22933: PUSH
22934: LD_INT 33
22936: PUSH
22937: LD_INT 34
22939: PUSH
22940: LD_INT 36
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 101
22982: PUSH
22983: LD_INT 102
22985: PUSH
22986: LD_INT 103
22988: PUSH
22989: LD_INT 104
22991: PUSH
22992: LD_INT 105
22994: PUSH
22995: LD_INT 106
22997: PUSH
22998: LD_INT 107
23000: PUSH
23001: LD_INT 108
23003: PUSH
23004: LD_INT 109
23006: PUSH
23007: LD_INT 110
23009: PUSH
23010: LD_INT 111
23012: PUSH
23013: LD_INT 112
23015: PUSH
23016: LD_INT 113
23018: PUSH
23019: LD_INT 114
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: ST_TO_ADDR
23042: GO 23417
23044: LD_INT 18
23046: DOUBLE
23047: EQUAL
23048: IFTRUE 23052
23050: GO 23188
23052: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23053: LD_ADDR_VAR 0 1
23057: PUSH
23058: LD_INT 2
23060: PUSH
23061: LD_INT 4
23063: PUSH
23064: LD_INT 5
23066: PUSH
23067: LD_INT 7
23069: PUSH
23070: LD_INT 11
23072: PUSH
23073: LD_INT 12
23075: PUSH
23076: LD_INT 15
23078: PUSH
23079: LD_INT 16
23081: PUSH
23082: LD_INT 20
23084: PUSH
23085: LD_INT 21
23087: PUSH
23088: LD_INT 22
23090: PUSH
23091: LD_INT 23
23093: PUSH
23094: LD_INT 25
23096: PUSH
23097: LD_INT 26
23099: PUSH
23100: LD_INT 30
23102: PUSH
23103: LD_INT 31
23105: PUSH
23106: LD_INT 32
23108: PUSH
23109: LD_INT 33
23111: PUSH
23112: LD_INT 34
23114: PUSH
23115: LD_INT 35
23117: PUSH
23118: LD_INT 36
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 101
23146: PUSH
23147: LD_INT 102
23149: PUSH
23150: LD_INT 103
23152: PUSH
23153: LD_INT 106
23155: PUSH
23156: LD_INT 108
23158: PUSH
23159: LD_INT 112
23161: PUSH
23162: LD_INT 113
23164: PUSH
23165: LD_INT 114
23167: PUSH
23168: LD_INT 115
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: ST_TO_ADDR
23186: GO 23417
23188: LD_INT 19
23190: DOUBLE
23191: EQUAL
23192: IFTRUE 23196
23194: GO 23416
23196: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23197: LD_ADDR_VAR 0 1
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: LD_INT 2
23207: PUSH
23208: LD_INT 3
23210: PUSH
23211: LD_INT 4
23213: PUSH
23214: LD_INT 5
23216: PUSH
23217: LD_INT 6
23219: PUSH
23220: LD_INT 7
23222: PUSH
23223: LD_INT 8
23225: PUSH
23226: LD_INT 9
23228: PUSH
23229: LD_INT 10
23231: PUSH
23232: LD_INT 11
23234: PUSH
23235: LD_INT 12
23237: PUSH
23238: LD_INT 13
23240: PUSH
23241: LD_INT 14
23243: PUSH
23244: LD_INT 15
23246: PUSH
23247: LD_INT 16
23249: PUSH
23250: LD_INT 17
23252: PUSH
23253: LD_INT 18
23255: PUSH
23256: LD_INT 19
23258: PUSH
23259: LD_INT 20
23261: PUSH
23262: LD_INT 21
23264: PUSH
23265: LD_INT 22
23267: PUSH
23268: LD_INT 23
23270: PUSH
23271: LD_INT 24
23273: PUSH
23274: LD_INT 25
23276: PUSH
23277: LD_INT 26
23279: PUSH
23280: LD_INT 27
23282: PUSH
23283: LD_INT 28
23285: PUSH
23286: LD_INT 29
23288: PUSH
23289: LD_INT 30
23291: PUSH
23292: LD_INT 31
23294: PUSH
23295: LD_INT 32
23297: PUSH
23298: LD_INT 33
23300: PUSH
23301: LD_INT 34
23303: PUSH
23304: LD_INT 35
23306: PUSH
23307: LD_INT 36
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 101
23350: PUSH
23351: LD_INT 102
23353: PUSH
23354: LD_INT 103
23356: PUSH
23357: LD_INT 104
23359: PUSH
23360: LD_INT 105
23362: PUSH
23363: LD_INT 106
23365: PUSH
23366: LD_INT 107
23368: PUSH
23369: LD_INT 108
23371: PUSH
23372: LD_INT 109
23374: PUSH
23375: LD_INT 110
23377: PUSH
23378: LD_INT 111
23380: PUSH
23381: LD_INT 112
23383: PUSH
23384: LD_INT 113
23386: PUSH
23387: LD_INT 114
23389: PUSH
23390: LD_INT 115
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: ST_TO_ADDR
23414: GO 23417
23416: POP
// end else
23417: GO 23636
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23419: LD_ADDR_VAR 0 1
23423: PUSH
23424: LD_INT 1
23426: PUSH
23427: LD_INT 2
23429: PUSH
23430: LD_INT 3
23432: PUSH
23433: LD_INT 4
23435: PUSH
23436: LD_INT 5
23438: PUSH
23439: LD_INT 6
23441: PUSH
23442: LD_INT 7
23444: PUSH
23445: LD_INT 8
23447: PUSH
23448: LD_INT 9
23450: PUSH
23451: LD_INT 10
23453: PUSH
23454: LD_INT 11
23456: PUSH
23457: LD_INT 12
23459: PUSH
23460: LD_INT 13
23462: PUSH
23463: LD_INT 14
23465: PUSH
23466: LD_INT 15
23468: PUSH
23469: LD_INT 16
23471: PUSH
23472: LD_INT 17
23474: PUSH
23475: LD_INT 18
23477: PUSH
23478: LD_INT 19
23480: PUSH
23481: LD_INT 20
23483: PUSH
23484: LD_INT 21
23486: PUSH
23487: LD_INT 22
23489: PUSH
23490: LD_INT 23
23492: PUSH
23493: LD_INT 24
23495: PUSH
23496: LD_INT 25
23498: PUSH
23499: LD_INT 26
23501: PUSH
23502: LD_INT 27
23504: PUSH
23505: LD_INT 28
23507: PUSH
23508: LD_INT 29
23510: PUSH
23511: LD_INT 30
23513: PUSH
23514: LD_INT 31
23516: PUSH
23517: LD_INT 32
23519: PUSH
23520: LD_INT 33
23522: PUSH
23523: LD_INT 34
23525: PUSH
23526: LD_INT 35
23528: PUSH
23529: LD_INT 36
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: PUSH
23570: LD_INT 101
23572: PUSH
23573: LD_INT 102
23575: PUSH
23576: LD_INT 103
23578: PUSH
23579: LD_INT 104
23581: PUSH
23582: LD_INT 105
23584: PUSH
23585: LD_INT 106
23587: PUSH
23588: LD_INT 107
23590: PUSH
23591: LD_INT 108
23593: PUSH
23594: LD_INT 109
23596: PUSH
23597: LD_INT 110
23599: PUSH
23600: LD_INT 111
23602: PUSH
23603: LD_INT 112
23605: PUSH
23606: LD_INT 113
23608: PUSH
23609: LD_INT 114
23611: PUSH
23612: LD_INT 115
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: ST_TO_ADDR
// if result then
23636: LD_VAR 0 1
23640: IFFALSE 23929
// begin normal :=  ;
23642: LD_ADDR_VAR 0 3
23646: PUSH
23647: LD_STRING 
23649: ST_TO_ADDR
// hardcore :=  ;
23650: LD_ADDR_VAR 0 4
23654: PUSH
23655: LD_STRING 
23657: ST_TO_ADDR
// for i = 1 to normalCounter do
23658: LD_ADDR_VAR 0 5
23662: PUSH
23663: DOUBLE
23664: LD_INT 1
23666: DEC
23667: ST_TO_ADDR
23668: LD_EXP 63
23672: PUSH
23673: FOR_TO
23674: IFFALSE 23775
// begin tmp := 0 ;
23676: LD_ADDR_VAR 0 2
23680: PUSH
23681: LD_STRING 0
23683: ST_TO_ADDR
// if result [ 1 ] then
23684: LD_VAR 0 1
23688: PUSH
23689: LD_INT 1
23691: ARRAY
23692: IFFALSE 23757
// if result [ 1 ] [ 1 ] = i then
23694: LD_VAR 0 1
23698: PUSH
23699: LD_INT 1
23701: ARRAY
23702: PUSH
23703: LD_INT 1
23705: ARRAY
23706: PUSH
23707: LD_VAR 0 5
23711: EQUAL
23712: IFFALSE 23757
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23714: LD_ADDR_VAR 0 1
23718: PUSH
23719: LD_VAR 0 1
23723: PPUSH
23724: LD_INT 1
23726: PPUSH
23727: LD_VAR 0 1
23731: PUSH
23732: LD_INT 1
23734: ARRAY
23735: PPUSH
23736: LD_INT 1
23738: PPUSH
23739: CALL_OW 3
23743: PPUSH
23744: CALL_OW 1
23748: ST_TO_ADDR
// tmp := 1 ;
23749: LD_ADDR_VAR 0 2
23753: PUSH
23754: LD_STRING 1
23756: ST_TO_ADDR
// end ; normal := normal & tmp ;
23757: LD_ADDR_VAR 0 3
23761: PUSH
23762: LD_VAR 0 3
23766: PUSH
23767: LD_VAR 0 2
23771: STR
23772: ST_TO_ADDR
// end ;
23773: GO 23673
23775: POP
23776: POP
// for i = 1 to hardcoreCounter do
23777: LD_ADDR_VAR 0 5
23781: PUSH
23782: DOUBLE
23783: LD_INT 1
23785: DEC
23786: ST_TO_ADDR
23787: LD_EXP 64
23791: PUSH
23792: FOR_TO
23793: IFFALSE 23898
// begin tmp := 0 ;
23795: LD_ADDR_VAR 0 2
23799: PUSH
23800: LD_STRING 0
23802: ST_TO_ADDR
// if result [ 2 ] then
23803: LD_VAR 0 1
23807: PUSH
23808: LD_INT 2
23810: ARRAY
23811: IFFALSE 23880
// if result [ 2 ] [ 1 ] = 100 + i then
23813: LD_VAR 0 1
23817: PUSH
23818: LD_INT 2
23820: ARRAY
23821: PUSH
23822: LD_INT 1
23824: ARRAY
23825: PUSH
23826: LD_INT 100
23828: PUSH
23829: LD_VAR 0 5
23833: PLUS
23834: EQUAL
23835: IFFALSE 23880
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23837: LD_ADDR_VAR 0 1
23841: PUSH
23842: LD_VAR 0 1
23846: PPUSH
23847: LD_INT 2
23849: PPUSH
23850: LD_VAR 0 1
23854: PUSH
23855: LD_INT 2
23857: ARRAY
23858: PPUSH
23859: LD_INT 1
23861: PPUSH
23862: CALL_OW 3
23866: PPUSH
23867: CALL_OW 1
23871: ST_TO_ADDR
// tmp := 1 ;
23872: LD_ADDR_VAR 0 2
23876: PUSH
23877: LD_STRING 1
23879: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23880: LD_ADDR_VAR 0 4
23884: PUSH
23885: LD_VAR 0 4
23889: PUSH
23890: LD_VAR 0 2
23894: STR
23895: ST_TO_ADDR
// end ;
23896: GO 23792
23898: POP
23899: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23900: LD_STRING getStreamItemsFromMission("
23902: PUSH
23903: LD_VAR 0 3
23907: STR
23908: PUSH
23909: LD_STRING ","
23911: STR
23912: PUSH
23913: LD_VAR 0 4
23917: STR
23918: PUSH
23919: LD_STRING ")
23921: STR
23922: PPUSH
23923: CALL_OW 559
// end else
23927: GO 23936
// ToLua ( getStreamItemsFromMission("","") ) ;
23929: LD_STRING getStreamItemsFromMission("","")
23931: PPUSH
23932: CALL_OW 559
// end ;
23936: LD_VAR 0 1
23940: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23941: LD_EXP 62
23945: PUSH
23946: LD_EXP 67
23950: AND
23951: IFFALSE 24075
23953: GO 23955
23955: DISABLE
23956: LD_INT 0
23958: PPUSH
23959: PPUSH
// begin enable ;
23960: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23961: LD_ADDR_VAR 0 2
23965: PUSH
23966: LD_INT 22
23968: PUSH
23969: LD_OWVAR 2
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: LD_INT 34
23983: PUSH
23984: LD_INT 7
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 34
23993: PUSH
23994: LD_INT 45
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 34
24003: PUSH
24004: LD_INT 28
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 34
24013: PUSH
24014: LD_INT 47
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PPUSH
24032: CALL_OW 69
24036: ST_TO_ADDR
// if not tmp then
24037: LD_VAR 0 2
24041: NOT
24042: IFFALSE 24046
// exit ;
24044: GO 24075
// for i in tmp do
24046: LD_ADDR_VAR 0 1
24050: PUSH
24051: LD_VAR 0 2
24055: PUSH
24056: FOR_IN
24057: IFFALSE 24073
// begin SetLives ( i , 0 ) ;
24059: LD_VAR 0 1
24063: PPUSH
24064: LD_INT 0
24066: PPUSH
24067: CALL_OW 234
// end ;
24071: GO 24056
24073: POP
24074: POP
// end ;
24075: PPOPN 2
24077: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24078: LD_EXP 62
24082: PUSH
24083: LD_EXP 68
24087: AND
24088: IFFALSE 24172
24090: GO 24092
24092: DISABLE
24093: LD_INT 0
24095: PPUSH
24096: PPUSH
// begin enable ;
24097: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24098: LD_ADDR_VAR 0 2
24102: PUSH
24103: LD_INT 22
24105: PUSH
24106: LD_OWVAR 2
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 32
24117: PUSH
24118: LD_INT 3
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PPUSH
24129: CALL_OW 69
24133: ST_TO_ADDR
// if not tmp then
24134: LD_VAR 0 2
24138: NOT
24139: IFFALSE 24143
// exit ;
24141: GO 24172
// for i in tmp do
24143: LD_ADDR_VAR 0 1
24147: PUSH
24148: LD_VAR 0 2
24152: PUSH
24153: FOR_IN
24154: IFFALSE 24170
// begin SetLives ( i , 0 ) ;
24156: LD_VAR 0 1
24160: PPUSH
24161: LD_INT 0
24163: PPUSH
24164: CALL_OW 234
// end ;
24168: GO 24153
24170: POP
24171: POP
// end ;
24172: PPOPN 2
24174: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24175: LD_EXP 62
24179: PUSH
24180: LD_EXP 65
24184: AND
24185: IFFALSE 24278
24187: GO 24189
24189: DISABLE
24190: LD_INT 0
24192: PPUSH
// begin enable ;
24193: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24194: LD_ADDR_VAR 0 1
24198: PUSH
24199: LD_INT 22
24201: PUSH
24202: LD_OWVAR 2
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: LD_INT 25
24216: PUSH
24217: LD_INT 5
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 25
24226: PUSH
24227: LD_INT 9
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 25
24236: PUSH
24237: LD_INT 8
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PPUSH
24254: CALL_OW 69
24258: PUSH
24259: FOR_IN
24260: IFFALSE 24276
// begin SetClass ( i , 1 ) ;
24262: LD_VAR 0 1
24266: PPUSH
24267: LD_INT 1
24269: PPUSH
24270: CALL_OW 336
// end ;
24274: GO 24259
24276: POP
24277: POP
// end ;
24278: PPOPN 1
24280: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24281: LD_EXP 62
24285: PUSH
24286: LD_EXP 66
24290: AND
24291: PUSH
24292: LD_OWVAR 65
24296: PUSH
24297: LD_INT 7
24299: LESS
24300: AND
24301: IFFALSE 24315
24303: GO 24305
24305: DISABLE
// begin enable ;
24306: ENABLE
// game_speed := 7 ;
24307: LD_ADDR_OWVAR 65
24311: PUSH
24312: LD_INT 7
24314: ST_TO_ADDR
// end ;
24315: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24316: LD_EXP 62
24320: PUSH
24321: LD_EXP 69
24325: AND
24326: IFFALSE 24528
24328: GO 24330
24330: DISABLE
24331: LD_INT 0
24333: PPUSH
24334: PPUSH
24335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24336: LD_ADDR_VAR 0 3
24340: PUSH
24341: LD_INT 81
24343: PUSH
24344: LD_OWVAR 2
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 21
24355: PUSH
24356: LD_INT 1
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PPUSH
24367: CALL_OW 69
24371: ST_TO_ADDR
// if not tmp then
24372: LD_VAR 0 3
24376: NOT
24377: IFFALSE 24381
// exit ;
24379: GO 24528
// if tmp > 5 then
24381: LD_VAR 0 3
24385: PUSH
24386: LD_INT 5
24388: GREATER
24389: IFFALSE 24401
// k := 5 else
24391: LD_ADDR_VAR 0 2
24395: PUSH
24396: LD_INT 5
24398: ST_TO_ADDR
24399: GO 24411
// k := tmp ;
24401: LD_ADDR_VAR 0 2
24405: PUSH
24406: LD_VAR 0 3
24410: ST_TO_ADDR
// for i := 1 to k do
24411: LD_ADDR_VAR 0 1
24415: PUSH
24416: DOUBLE
24417: LD_INT 1
24419: DEC
24420: ST_TO_ADDR
24421: LD_VAR 0 2
24425: PUSH
24426: FOR_TO
24427: IFFALSE 24526
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24429: LD_VAR 0 3
24433: PUSH
24434: LD_VAR 0 1
24438: ARRAY
24439: PPUSH
24440: LD_VAR 0 1
24444: PUSH
24445: LD_INT 4
24447: MOD
24448: PUSH
24449: LD_INT 1
24451: PLUS
24452: PPUSH
24453: CALL_OW 259
24457: PUSH
24458: LD_INT 10
24460: LESS
24461: IFFALSE 24524
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24463: LD_VAR 0 3
24467: PUSH
24468: LD_VAR 0 1
24472: ARRAY
24473: PPUSH
24474: LD_VAR 0 1
24478: PUSH
24479: LD_INT 4
24481: MOD
24482: PUSH
24483: LD_INT 1
24485: PLUS
24486: PPUSH
24487: LD_VAR 0 3
24491: PUSH
24492: LD_VAR 0 1
24496: ARRAY
24497: PPUSH
24498: LD_VAR 0 1
24502: PUSH
24503: LD_INT 4
24505: MOD
24506: PUSH
24507: LD_INT 1
24509: PLUS
24510: PPUSH
24511: CALL_OW 259
24515: PUSH
24516: LD_INT 1
24518: PLUS
24519: PPUSH
24520: CALL_OW 237
24524: GO 24426
24526: POP
24527: POP
// end ;
24528: PPOPN 3
24530: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24531: LD_EXP 62
24535: PUSH
24536: LD_EXP 70
24540: AND
24541: IFFALSE 24561
24543: GO 24545
24545: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24546: LD_INT 4
24548: PPUSH
24549: LD_OWVAR 2
24553: PPUSH
24554: LD_INT 0
24556: PPUSH
24557: CALL_OW 324
24561: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24562: LD_EXP 62
24566: PUSH
24567: LD_EXP 99
24571: AND
24572: IFFALSE 24592
24574: GO 24576
24576: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24577: LD_INT 19
24579: PPUSH
24580: LD_OWVAR 2
24584: PPUSH
24585: LD_INT 0
24587: PPUSH
24588: CALL_OW 324
24592: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24593: LD_EXP 62
24597: PUSH
24598: LD_EXP 71
24602: AND
24603: IFFALSE 24705
24605: GO 24607
24607: DISABLE
24608: LD_INT 0
24610: PPUSH
24611: PPUSH
// begin enable ;
24612: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24613: LD_ADDR_VAR 0 2
24617: PUSH
24618: LD_INT 22
24620: PUSH
24621: LD_OWVAR 2
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 2
24632: PUSH
24633: LD_INT 34
24635: PUSH
24636: LD_INT 11
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 34
24645: PUSH
24646: LD_INT 30
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: LIST
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PPUSH
24662: CALL_OW 69
24666: ST_TO_ADDR
// if not tmp then
24667: LD_VAR 0 2
24671: NOT
24672: IFFALSE 24676
// exit ;
24674: GO 24705
// for i in tmp do
24676: LD_ADDR_VAR 0 1
24680: PUSH
24681: LD_VAR 0 2
24685: PUSH
24686: FOR_IN
24687: IFFALSE 24703
// begin SetLives ( i , 0 ) ;
24689: LD_VAR 0 1
24693: PPUSH
24694: LD_INT 0
24696: PPUSH
24697: CALL_OW 234
// end ;
24701: GO 24686
24703: POP
24704: POP
// end ;
24705: PPOPN 2
24707: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24708: LD_EXP 62
24712: PUSH
24713: LD_EXP 72
24717: AND
24718: IFFALSE 24738
24720: GO 24722
24722: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24723: LD_INT 32
24725: PPUSH
24726: LD_OWVAR 2
24730: PPUSH
24731: LD_INT 0
24733: PPUSH
24734: CALL_OW 324
24738: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24739: LD_EXP 62
24743: PUSH
24744: LD_EXP 73
24748: AND
24749: IFFALSE 24930
24751: GO 24753
24753: DISABLE
24754: LD_INT 0
24756: PPUSH
24757: PPUSH
24758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24759: LD_ADDR_VAR 0 2
24763: PUSH
24764: LD_INT 22
24766: PUSH
24767: LD_OWVAR 2
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 33
24778: PUSH
24779: LD_INT 3
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PPUSH
24790: CALL_OW 69
24794: ST_TO_ADDR
// if not tmp then
24795: LD_VAR 0 2
24799: NOT
24800: IFFALSE 24804
// exit ;
24802: GO 24930
// side := 0 ;
24804: LD_ADDR_VAR 0 3
24808: PUSH
24809: LD_INT 0
24811: ST_TO_ADDR
// for i := 1 to 8 do
24812: LD_ADDR_VAR 0 1
24816: PUSH
24817: DOUBLE
24818: LD_INT 1
24820: DEC
24821: ST_TO_ADDR
24822: LD_INT 8
24824: PUSH
24825: FOR_TO
24826: IFFALSE 24874
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24828: LD_OWVAR 2
24832: PUSH
24833: LD_VAR 0 1
24837: NONEQUAL
24838: PUSH
24839: LD_OWVAR 2
24843: PPUSH
24844: LD_VAR 0 1
24848: PPUSH
24849: CALL_OW 81
24853: PUSH
24854: LD_INT 2
24856: EQUAL
24857: AND
24858: IFFALSE 24872
// begin side := i ;
24860: LD_ADDR_VAR 0 3
24864: PUSH
24865: LD_VAR 0 1
24869: ST_TO_ADDR
// break ;
24870: GO 24874
// end ;
24872: GO 24825
24874: POP
24875: POP
// if not side then
24876: LD_VAR 0 3
24880: NOT
24881: IFFALSE 24885
// exit ;
24883: GO 24930
// for i := 1 to tmp do
24885: LD_ADDR_VAR 0 1
24889: PUSH
24890: DOUBLE
24891: LD_INT 1
24893: DEC
24894: ST_TO_ADDR
24895: LD_VAR 0 2
24899: PUSH
24900: FOR_TO
24901: IFFALSE 24928
// if Prob ( 60 ) then
24903: LD_INT 60
24905: PPUSH
24906: CALL_OW 13
24910: IFFALSE 24926
// SetSide ( i , side ) ;
24912: LD_VAR 0 1
24916: PPUSH
24917: LD_VAR 0 3
24921: PPUSH
24922: CALL_OW 235
24926: GO 24900
24928: POP
24929: POP
// end ;
24930: PPOPN 3
24932: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24933: LD_EXP 62
24937: PUSH
24938: LD_EXP 75
24942: AND
24943: IFFALSE 25062
24945: GO 24947
24947: DISABLE
24948: LD_INT 0
24950: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24951: LD_ADDR_VAR 0 1
24955: PUSH
24956: LD_INT 22
24958: PUSH
24959: LD_OWVAR 2
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 21
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 3
24980: PUSH
24981: LD_INT 23
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: LIST
24999: PPUSH
25000: CALL_OW 69
25004: PUSH
25005: FOR_IN
25006: IFFALSE 25060
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25008: LD_VAR 0 1
25012: PPUSH
25013: CALL_OW 257
25017: PUSH
25018: LD_INT 1
25020: PUSH
25021: LD_INT 2
25023: PUSH
25024: LD_INT 3
25026: PUSH
25027: LD_INT 4
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: IN
25036: IFFALSE 25058
// SetClass ( un , rand ( 1 , 4 ) ) ;
25038: LD_VAR 0 1
25042: PPUSH
25043: LD_INT 1
25045: PPUSH
25046: LD_INT 4
25048: PPUSH
25049: CALL_OW 12
25053: PPUSH
25054: CALL_OW 336
25058: GO 25005
25060: POP
25061: POP
// end ;
25062: PPOPN 1
25064: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25065: LD_EXP 62
25069: PUSH
25070: LD_EXP 74
25074: AND
25075: IFFALSE 25154
25077: GO 25079
25079: DISABLE
25080: LD_INT 0
25082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25083: LD_ADDR_VAR 0 1
25087: PUSH
25088: LD_INT 22
25090: PUSH
25091: LD_OWVAR 2
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 21
25102: PUSH
25103: LD_INT 3
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PPUSH
25114: CALL_OW 69
25118: ST_TO_ADDR
// if not tmp then
25119: LD_VAR 0 1
25123: NOT
25124: IFFALSE 25128
// exit ;
25126: GO 25154
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25128: LD_VAR 0 1
25132: PUSH
25133: LD_INT 1
25135: PPUSH
25136: LD_VAR 0 1
25140: PPUSH
25141: CALL_OW 12
25145: ARRAY
25146: PPUSH
25147: LD_INT 100
25149: PPUSH
25150: CALL_OW 234
// end ;
25154: PPOPN 1
25156: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25157: LD_EXP 62
25161: PUSH
25162: LD_EXP 76
25166: AND
25167: IFFALSE 25265
25169: GO 25171
25171: DISABLE
25172: LD_INT 0
25174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25175: LD_ADDR_VAR 0 1
25179: PUSH
25180: LD_INT 22
25182: PUSH
25183: LD_OWVAR 2
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 21
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PPUSH
25206: CALL_OW 69
25210: ST_TO_ADDR
// if not tmp then
25211: LD_VAR 0 1
25215: NOT
25216: IFFALSE 25220
// exit ;
25218: GO 25265
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25220: LD_VAR 0 1
25224: PUSH
25225: LD_INT 1
25227: PPUSH
25228: LD_VAR 0 1
25232: PPUSH
25233: CALL_OW 12
25237: ARRAY
25238: PPUSH
25239: LD_INT 1
25241: PPUSH
25242: LD_INT 4
25244: PPUSH
25245: CALL_OW 12
25249: PPUSH
25250: LD_INT 3000
25252: PPUSH
25253: LD_INT 9000
25255: PPUSH
25256: CALL_OW 12
25260: PPUSH
25261: CALL_OW 492
// end ;
25265: PPOPN 1
25267: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25268: LD_EXP 62
25272: PUSH
25273: LD_EXP 77
25277: AND
25278: IFFALSE 25298
25280: GO 25282
25282: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25283: LD_INT 1
25285: PPUSH
25286: LD_OWVAR 2
25290: PPUSH
25291: LD_INT 0
25293: PPUSH
25294: CALL_OW 324
25298: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25299: LD_EXP 62
25303: PUSH
25304: LD_EXP 78
25308: AND
25309: IFFALSE 25392
25311: GO 25313
25313: DISABLE
25314: LD_INT 0
25316: PPUSH
25317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25318: LD_ADDR_VAR 0 2
25322: PUSH
25323: LD_INT 22
25325: PUSH
25326: LD_OWVAR 2
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 21
25337: PUSH
25338: LD_INT 3
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PPUSH
25349: CALL_OW 69
25353: ST_TO_ADDR
// if not tmp then
25354: LD_VAR 0 2
25358: NOT
25359: IFFALSE 25363
// exit ;
25361: GO 25392
// for i in tmp do
25363: LD_ADDR_VAR 0 1
25367: PUSH
25368: LD_VAR 0 2
25372: PUSH
25373: FOR_IN
25374: IFFALSE 25390
// SetBLevel ( i , 10 ) ;
25376: LD_VAR 0 1
25380: PPUSH
25381: LD_INT 10
25383: PPUSH
25384: CALL_OW 241
25388: GO 25373
25390: POP
25391: POP
// end ;
25392: PPOPN 2
25394: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25395: LD_EXP 62
25399: PUSH
25400: LD_EXP 79
25404: AND
25405: IFFALSE 25516
25407: GO 25409
25409: DISABLE
25410: LD_INT 0
25412: PPUSH
25413: PPUSH
25414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25415: LD_ADDR_VAR 0 3
25419: PUSH
25420: LD_INT 22
25422: PUSH
25423: LD_OWVAR 2
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 25
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PPUSH
25446: CALL_OW 69
25450: ST_TO_ADDR
// if not tmp then
25451: LD_VAR 0 3
25455: NOT
25456: IFFALSE 25460
// exit ;
25458: GO 25516
// un := tmp [ rand ( 1 , tmp ) ] ;
25460: LD_ADDR_VAR 0 2
25464: PUSH
25465: LD_VAR 0 3
25469: PUSH
25470: LD_INT 1
25472: PPUSH
25473: LD_VAR 0 3
25477: PPUSH
25478: CALL_OW 12
25482: ARRAY
25483: ST_TO_ADDR
// if Crawls ( un ) then
25484: LD_VAR 0 2
25488: PPUSH
25489: CALL_OW 318
25493: IFFALSE 25504
// ComWalk ( un ) ;
25495: LD_VAR 0 2
25499: PPUSH
25500: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25504: LD_VAR 0 2
25508: PPUSH
25509: LD_INT 5
25511: PPUSH
25512: CALL_OW 336
// end ;
25516: PPOPN 3
25518: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25519: LD_EXP 62
25523: PUSH
25524: LD_EXP 80
25528: AND
25529: PUSH
25530: LD_OWVAR 67
25534: PUSH
25535: LD_INT 3
25537: LESS
25538: AND
25539: IFFALSE 25558
25541: GO 25543
25543: DISABLE
// Difficulty := Difficulty + 1 ;
25544: LD_ADDR_OWVAR 67
25548: PUSH
25549: LD_OWVAR 67
25553: PUSH
25554: LD_INT 1
25556: PLUS
25557: ST_TO_ADDR
25558: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25559: LD_EXP 62
25563: PUSH
25564: LD_EXP 81
25568: AND
25569: IFFALSE 25672
25571: GO 25573
25573: DISABLE
25574: LD_INT 0
25576: PPUSH
// begin for i := 1 to 5 do
25577: LD_ADDR_VAR 0 1
25581: PUSH
25582: DOUBLE
25583: LD_INT 1
25585: DEC
25586: ST_TO_ADDR
25587: LD_INT 5
25589: PUSH
25590: FOR_TO
25591: IFFALSE 25670
// begin uc_nation := nation_nature ;
25593: LD_ADDR_OWVAR 21
25597: PUSH
25598: LD_INT 0
25600: ST_TO_ADDR
// uc_side := 0 ;
25601: LD_ADDR_OWVAR 20
25605: PUSH
25606: LD_INT 0
25608: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25609: LD_ADDR_OWVAR 29
25613: PUSH
25614: LD_INT 12
25616: PUSH
25617: LD_INT 12
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: ST_TO_ADDR
// hc_agressivity := 20 ;
25624: LD_ADDR_OWVAR 35
25628: PUSH
25629: LD_INT 20
25631: ST_TO_ADDR
// hc_class := class_tiger ;
25632: LD_ADDR_OWVAR 28
25636: PUSH
25637: LD_INT 14
25639: ST_TO_ADDR
// hc_gallery :=  ;
25640: LD_ADDR_OWVAR 33
25644: PUSH
25645: LD_STRING 
25647: ST_TO_ADDR
// hc_name :=  ;
25648: LD_ADDR_OWVAR 26
25652: PUSH
25653: LD_STRING 
25655: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25656: CALL_OW 44
25660: PPUSH
25661: LD_INT 0
25663: PPUSH
25664: CALL_OW 51
// end ;
25668: GO 25590
25670: POP
25671: POP
// end ;
25672: PPOPN 1
25674: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25675: LD_EXP 62
25679: PUSH
25680: LD_EXP 82
25684: AND
25685: IFFALSE 25694
25687: GO 25689
25689: DISABLE
// StreamSibBomb ;
25690: CALL 25695 0 0
25694: END
// export function StreamSibBomb ; var i , x , y ; begin
25695: LD_INT 0
25697: PPUSH
25698: PPUSH
25699: PPUSH
25700: PPUSH
// result := false ;
25701: LD_ADDR_VAR 0 1
25705: PUSH
25706: LD_INT 0
25708: ST_TO_ADDR
// for i := 1 to 16 do
25709: LD_ADDR_VAR 0 2
25713: PUSH
25714: DOUBLE
25715: LD_INT 1
25717: DEC
25718: ST_TO_ADDR
25719: LD_INT 16
25721: PUSH
25722: FOR_TO
25723: IFFALSE 25922
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25725: LD_ADDR_VAR 0 3
25729: PUSH
25730: LD_INT 10
25732: PUSH
25733: LD_INT 20
25735: PUSH
25736: LD_INT 30
25738: PUSH
25739: LD_INT 40
25741: PUSH
25742: LD_INT 50
25744: PUSH
25745: LD_INT 60
25747: PUSH
25748: LD_INT 70
25750: PUSH
25751: LD_INT 80
25753: PUSH
25754: LD_INT 90
25756: PUSH
25757: LD_INT 100
25759: PUSH
25760: LD_INT 110
25762: PUSH
25763: LD_INT 120
25765: PUSH
25766: LD_INT 130
25768: PUSH
25769: LD_INT 140
25771: PUSH
25772: LD_INT 150
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: PPUSH
25795: LD_INT 15
25797: PPUSH
25798: CALL_OW 12
25802: ARRAY
25803: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25804: LD_ADDR_VAR 0 4
25808: PUSH
25809: LD_INT 10
25811: PUSH
25812: LD_INT 20
25814: PUSH
25815: LD_INT 30
25817: PUSH
25818: LD_INT 40
25820: PUSH
25821: LD_INT 50
25823: PUSH
25824: LD_INT 60
25826: PUSH
25827: LD_INT 70
25829: PUSH
25830: LD_INT 80
25832: PUSH
25833: LD_INT 90
25835: PUSH
25836: LD_INT 100
25838: PUSH
25839: LD_INT 110
25841: PUSH
25842: LD_INT 120
25844: PUSH
25845: LD_INT 130
25847: PUSH
25848: LD_INT 140
25850: PUSH
25851: LD_INT 150
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: PPUSH
25874: LD_INT 15
25876: PPUSH
25877: CALL_OW 12
25881: ARRAY
25882: ST_TO_ADDR
// if ValidHex ( x , y ) then
25883: LD_VAR 0 3
25887: PPUSH
25888: LD_VAR 0 4
25892: PPUSH
25893: CALL_OW 488
25897: IFFALSE 25920
// begin result := [ x , y ] ;
25899: LD_ADDR_VAR 0 1
25903: PUSH
25904: LD_VAR 0 3
25908: PUSH
25909: LD_VAR 0 4
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: ST_TO_ADDR
// break ;
25918: GO 25922
// end ; end ;
25920: GO 25722
25922: POP
25923: POP
// if result then
25924: LD_VAR 0 1
25928: IFFALSE 25988
// begin ToLua ( playSibBomb() ) ;
25930: LD_STRING playSibBomb()
25932: PPUSH
25933: CALL_OW 559
// wait ( 0 0$14 ) ;
25937: LD_INT 490
25939: PPUSH
25940: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25944: LD_VAR 0 1
25948: PUSH
25949: LD_INT 1
25951: ARRAY
25952: PPUSH
25953: LD_VAR 0 1
25957: PUSH
25958: LD_INT 2
25960: ARRAY
25961: PPUSH
25962: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25966: LD_VAR 0 1
25970: PUSH
25971: LD_INT 1
25973: ARRAY
25974: PPUSH
25975: LD_VAR 0 1
25979: PUSH
25980: LD_INT 2
25982: ARRAY
25983: PPUSH
25984: CALL_OW 429
// end ; end ;
25988: LD_VAR 0 1
25992: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25993: LD_EXP 62
25997: PUSH
25998: LD_EXP 84
26002: AND
26003: IFFALSE 26015
26005: GO 26007
26007: DISABLE
// YouLost (  ) ;
26008: LD_STRING 
26010: PPUSH
26011: CALL_OW 104
26015: END
// every 0 0$1 trigger StreamModeActive and sFog do
26016: LD_EXP 62
26020: PUSH
26021: LD_EXP 83
26025: AND
26026: IFFALSE 26040
26028: GO 26030
26030: DISABLE
// FogOff ( your_side ) ;
26031: LD_OWVAR 2
26035: PPUSH
26036: CALL_OW 344
26040: END
// every 0 0$1 trigger StreamModeActive and sSun do
26041: LD_EXP 62
26045: PUSH
26046: LD_EXP 85
26050: AND
26051: IFFALSE 26079
26053: GO 26055
26055: DISABLE
// begin solar_recharge_percent := 0 ;
26056: LD_ADDR_OWVAR 79
26060: PUSH
26061: LD_INT 0
26063: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26064: LD_INT 10500
26066: PPUSH
26067: CALL_OW 67
// solar_recharge_percent := 100 ;
26071: LD_ADDR_OWVAR 79
26075: PUSH
26076: LD_INT 100
26078: ST_TO_ADDR
// end ;
26079: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26080: LD_EXP 62
26084: PUSH
26085: LD_EXP 86
26089: AND
26090: IFFALSE 26329
26092: GO 26094
26094: DISABLE
26095: LD_INT 0
26097: PPUSH
26098: PPUSH
26099: PPUSH
// begin tmp := [ ] ;
26100: LD_ADDR_VAR 0 3
26104: PUSH
26105: EMPTY
26106: ST_TO_ADDR
// for i := 1 to 6 do
26107: LD_ADDR_VAR 0 1
26111: PUSH
26112: DOUBLE
26113: LD_INT 1
26115: DEC
26116: ST_TO_ADDR
26117: LD_INT 6
26119: PUSH
26120: FOR_TO
26121: IFFALSE 26226
// begin uc_nation := nation_nature ;
26123: LD_ADDR_OWVAR 21
26127: PUSH
26128: LD_INT 0
26130: ST_TO_ADDR
// uc_side := 0 ;
26131: LD_ADDR_OWVAR 20
26135: PUSH
26136: LD_INT 0
26138: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26139: LD_ADDR_OWVAR 29
26143: PUSH
26144: LD_INT 12
26146: PUSH
26147: LD_INT 12
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: ST_TO_ADDR
// hc_agressivity := 20 ;
26154: LD_ADDR_OWVAR 35
26158: PUSH
26159: LD_INT 20
26161: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26162: LD_ADDR_OWVAR 28
26166: PUSH
26167: LD_INT 17
26169: ST_TO_ADDR
// hc_gallery :=  ;
26170: LD_ADDR_OWVAR 33
26174: PUSH
26175: LD_STRING 
26177: ST_TO_ADDR
// hc_name :=  ;
26178: LD_ADDR_OWVAR 26
26182: PUSH
26183: LD_STRING 
26185: ST_TO_ADDR
// un := CreateHuman ;
26186: LD_ADDR_VAR 0 2
26190: PUSH
26191: CALL_OW 44
26195: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26196: LD_VAR 0 2
26200: PPUSH
26201: LD_INT 1
26203: PPUSH
26204: CALL_OW 51
// tmp := tmp ^ un ;
26208: LD_ADDR_VAR 0 3
26212: PUSH
26213: LD_VAR 0 3
26217: PUSH
26218: LD_VAR 0 2
26222: ADD
26223: ST_TO_ADDR
// end ;
26224: GO 26120
26226: POP
26227: POP
// repeat wait ( 0 0$1 ) ;
26228: LD_INT 35
26230: PPUSH
26231: CALL_OW 67
// for un in tmp do
26235: LD_ADDR_VAR 0 2
26239: PUSH
26240: LD_VAR 0 3
26244: PUSH
26245: FOR_IN
26246: IFFALSE 26320
// begin if IsDead ( un ) then
26248: LD_VAR 0 2
26252: PPUSH
26253: CALL_OW 301
26257: IFFALSE 26277
// begin tmp := tmp diff un ;
26259: LD_ADDR_VAR 0 3
26263: PUSH
26264: LD_VAR 0 3
26268: PUSH
26269: LD_VAR 0 2
26273: DIFF
26274: ST_TO_ADDR
// continue ;
26275: GO 26245
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26277: LD_VAR 0 2
26281: PPUSH
26282: LD_INT 3
26284: PUSH
26285: LD_INT 22
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PPUSH
26299: CALL_OW 69
26303: PPUSH
26304: LD_VAR 0 2
26308: PPUSH
26309: CALL_OW 74
26313: PPUSH
26314: CALL_OW 115
// end ;
26318: GO 26245
26320: POP
26321: POP
// until not tmp ;
26322: LD_VAR 0 3
26326: NOT
26327: IFFALSE 26228
// end ;
26329: PPOPN 3
26331: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26332: LD_EXP 62
26336: PUSH
26337: LD_EXP 87
26341: AND
26342: IFFALSE 26396
26344: GO 26346
26346: DISABLE
// begin ToLua ( displayTroll(); ) ;
26347: LD_STRING displayTroll();
26349: PPUSH
26350: CALL_OW 559
// wait ( 3 3$00 ) ;
26354: LD_INT 6300
26356: PPUSH
26357: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26361: LD_STRING hideTroll();
26363: PPUSH
26364: CALL_OW 559
// wait ( 1 1$00 ) ;
26368: LD_INT 2100
26370: PPUSH
26371: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26375: LD_STRING displayTroll();
26377: PPUSH
26378: CALL_OW 559
// wait ( 1 1$00 ) ;
26382: LD_INT 2100
26384: PPUSH
26385: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26389: LD_STRING hideTroll();
26391: PPUSH
26392: CALL_OW 559
// end ;
26396: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26397: LD_EXP 62
26401: PUSH
26402: LD_EXP 88
26406: AND
26407: IFFALSE 26470
26409: GO 26411
26411: DISABLE
26412: LD_INT 0
26414: PPUSH
// begin p := 0 ;
26415: LD_ADDR_VAR 0 1
26419: PUSH
26420: LD_INT 0
26422: ST_TO_ADDR
// repeat game_speed := 1 ;
26423: LD_ADDR_OWVAR 65
26427: PUSH
26428: LD_INT 1
26430: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26431: LD_INT 35
26433: PPUSH
26434: CALL_OW 67
// p := p + 1 ;
26438: LD_ADDR_VAR 0 1
26442: PUSH
26443: LD_VAR 0 1
26447: PUSH
26448: LD_INT 1
26450: PLUS
26451: ST_TO_ADDR
// until p >= 60 ;
26452: LD_VAR 0 1
26456: PUSH
26457: LD_INT 60
26459: GREATEREQUAL
26460: IFFALSE 26423
// game_speed := 4 ;
26462: LD_ADDR_OWVAR 65
26466: PUSH
26467: LD_INT 4
26469: ST_TO_ADDR
// end ;
26470: PPOPN 1
26472: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26473: LD_EXP 62
26477: PUSH
26478: LD_EXP 89
26482: AND
26483: IFFALSE 26629
26485: GO 26487
26487: DISABLE
26488: LD_INT 0
26490: PPUSH
26491: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26492: LD_ADDR_VAR 0 1
26496: PUSH
26497: LD_INT 22
26499: PUSH
26500: LD_OWVAR 2
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 2
26511: PUSH
26512: LD_INT 30
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 30
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: LIST
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PPUSH
26541: CALL_OW 69
26545: ST_TO_ADDR
// if not depot then
26546: LD_VAR 0 1
26550: NOT
26551: IFFALSE 26555
// exit ;
26553: GO 26629
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26555: LD_ADDR_VAR 0 2
26559: PUSH
26560: LD_VAR 0 1
26564: PUSH
26565: LD_INT 1
26567: PPUSH
26568: LD_VAR 0 1
26572: PPUSH
26573: CALL_OW 12
26577: ARRAY
26578: PPUSH
26579: CALL_OW 274
26583: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26584: LD_VAR 0 2
26588: PPUSH
26589: LD_INT 1
26591: PPUSH
26592: LD_INT 0
26594: PPUSH
26595: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26599: LD_VAR 0 2
26603: PPUSH
26604: LD_INT 2
26606: PPUSH
26607: LD_INT 0
26609: PPUSH
26610: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26614: LD_VAR 0 2
26618: PPUSH
26619: LD_INT 3
26621: PPUSH
26622: LD_INT 0
26624: PPUSH
26625: CALL_OW 277
// end ;
26629: PPOPN 2
26631: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26632: LD_EXP 62
26636: PUSH
26637: LD_EXP 90
26641: AND
26642: IFFALSE 26739
26644: GO 26646
26646: DISABLE
26647: LD_INT 0
26649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26650: LD_ADDR_VAR 0 1
26654: PUSH
26655: LD_INT 22
26657: PUSH
26658: LD_OWVAR 2
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 21
26669: PUSH
26670: LD_INT 1
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 3
26679: PUSH
26680: LD_INT 23
26682: PUSH
26683: LD_INT 0
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: LIST
26698: PPUSH
26699: CALL_OW 69
26703: ST_TO_ADDR
// if not tmp then
26704: LD_VAR 0 1
26708: NOT
26709: IFFALSE 26713
// exit ;
26711: GO 26739
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26713: LD_VAR 0 1
26717: PUSH
26718: LD_INT 1
26720: PPUSH
26721: LD_VAR 0 1
26725: PPUSH
26726: CALL_OW 12
26730: ARRAY
26731: PPUSH
26732: LD_INT 200
26734: PPUSH
26735: CALL_OW 234
// end ;
26739: PPOPN 1
26741: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26742: LD_EXP 62
26746: PUSH
26747: LD_EXP 91
26751: AND
26752: IFFALSE 26831
26754: GO 26756
26756: DISABLE
26757: LD_INT 0
26759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26760: LD_ADDR_VAR 0 1
26764: PUSH
26765: LD_INT 22
26767: PUSH
26768: LD_OWVAR 2
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 21
26779: PUSH
26780: LD_INT 2
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PPUSH
26791: CALL_OW 69
26795: ST_TO_ADDR
// if not tmp then
26796: LD_VAR 0 1
26800: NOT
26801: IFFALSE 26805
// exit ;
26803: GO 26831
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26805: LD_VAR 0 1
26809: PUSH
26810: LD_INT 1
26812: PPUSH
26813: LD_VAR 0 1
26817: PPUSH
26818: CALL_OW 12
26822: ARRAY
26823: PPUSH
26824: LD_INT 60
26826: PPUSH
26827: CALL_OW 234
// end ;
26831: PPOPN 1
26833: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26834: LD_EXP 62
26838: PUSH
26839: LD_EXP 92
26843: AND
26844: IFFALSE 26943
26846: GO 26848
26848: DISABLE
26849: LD_INT 0
26851: PPUSH
26852: PPUSH
// begin enable ;
26853: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26854: LD_ADDR_VAR 0 1
26858: PUSH
26859: LD_INT 22
26861: PUSH
26862: LD_OWVAR 2
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 61
26873: PUSH
26874: EMPTY
26875: LIST
26876: PUSH
26877: LD_INT 33
26879: PUSH
26880: LD_INT 2
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: LIST
26891: PPUSH
26892: CALL_OW 69
26896: ST_TO_ADDR
// if not tmp then
26897: LD_VAR 0 1
26901: NOT
26902: IFFALSE 26906
// exit ;
26904: GO 26943
// for i in tmp do
26906: LD_ADDR_VAR 0 2
26910: PUSH
26911: LD_VAR 0 1
26915: PUSH
26916: FOR_IN
26917: IFFALSE 26941
// if IsControledBy ( i ) then
26919: LD_VAR 0 2
26923: PPUSH
26924: CALL_OW 312
26928: IFFALSE 26939
// ComUnlink ( i ) ;
26930: LD_VAR 0 2
26934: PPUSH
26935: CALL_OW 136
26939: GO 26916
26941: POP
26942: POP
// end ;
26943: PPOPN 2
26945: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26946: LD_EXP 62
26950: PUSH
26951: LD_EXP 93
26955: AND
26956: IFFALSE 27096
26958: GO 26960
26960: DISABLE
26961: LD_INT 0
26963: PPUSH
26964: PPUSH
// begin ToLua ( displayPowell(); ) ;
26965: LD_STRING displayPowell();
26967: PPUSH
26968: CALL_OW 559
// uc_side := 0 ;
26972: LD_ADDR_OWVAR 20
26976: PUSH
26977: LD_INT 0
26979: ST_TO_ADDR
// uc_nation := 2 ;
26980: LD_ADDR_OWVAR 21
26984: PUSH
26985: LD_INT 2
26987: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26988: LD_ADDR_OWVAR 37
26992: PUSH
26993: LD_INT 14
26995: ST_TO_ADDR
// vc_engine := engine_siberite ;
26996: LD_ADDR_OWVAR 39
27000: PUSH
27001: LD_INT 3
27003: ST_TO_ADDR
// vc_control := control_apeman ;
27004: LD_ADDR_OWVAR 38
27008: PUSH
27009: LD_INT 5
27011: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27012: LD_ADDR_OWVAR 40
27016: PUSH
27017: LD_INT 29
27019: ST_TO_ADDR
// un := CreateVehicle ;
27020: LD_ADDR_VAR 0 2
27024: PUSH
27025: CALL_OW 45
27029: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27030: LD_VAR 0 2
27034: PPUSH
27035: LD_INT 1
27037: PPUSH
27038: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27042: LD_INT 35
27044: PPUSH
27045: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27049: LD_VAR 0 2
27053: PPUSH
27054: LD_INT 22
27056: PUSH
27057: LD_OWVAR 2
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PPUSH
27066: CALL_OW 69
27070: PPUSH
27071: LD_VAR 0 2
27075: PPUSH
27076: CALL_OW 74
27080: PPUSH
27081: CALL_OW 115
// until IsDead ( un ) ;
27085: LD_VAR 0 2
27089: PPUSH
27090: CALL_OW 301
27094: IFFALSE 27042
// end ;
27096: PPOPN 2
27098: END
// every 0 0$1 trigger StreamModeActive and sStu do
27099: LD_EXP 62
27103: PUSH
27104: LD_EXP 101
27108: AND
27109: IFFALSE 27125
27111: GO 27113
27113: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27114: LD_STRING displayStucuk();
27116: PPUSH
27117: CALL_OW 559
// ResetFog ;
27121: CALL_OW 335
// end ;
27125: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27126: LD_EXP 62
27130: PUSH
27131: LD_EXP 94
27135: AND
27136: IFFALSE 27277
27138: GO 27140
27140: DISABLE
27141: LD_INT 0
27143: PPUSH
27144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27145: LD_ADDR_VAR 0 2
27149: PUSH
27150: LD_INT 22
27152: PUSH
27153: LD_OWVAR 2
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 21
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PPUSH
27176: CALL_OW 69
27180: ST_TO_ADDR
// if not tmp then
27181: LD_VAR 0 2
27185: NOT
27186: IFFALSE 27190
// exit ;
27188: GO 27277
// un := tmp [ rand ( 1 , tmp ) ] ;
27190: LD_ADDR_VAR 0 1
27194: PUSH
27195: LD_VAR 0 2
27199: PUSH
27200: LD_INT 1
27202: PPUSH
27203: LD_VAR 0 2
27207: PPUSH
27208: CALL_OW 12
27212: ARRAY
27213: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27214: LD_VAR 0 1
27218: PPUSH
27219: LD_INT 0
27221: PPUSH
27222: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27226: LD_VAR 0 1
27230: PPUSH
27231: LD_OWVAR 3
27235: PUSH
27236: LD_VAR 0 1
27240: DIFF
27241: PPUSH
27242: LD_VAR 0 1
27246: PPUSH
27247: CALL_OW 74
27251: PPUSH
27252: CALL_OW 115
// wait ( 0 0$20 ) ;
27256: LD_INT 700
27258: PPUSH
27259: CALL_OW 67
// SetSide ( un , your_side ) ;
27263: LD_VAR 0 1
27267: PPUSH
27268: LD_OWVAR 2
27272: PPUSH
27273: CALL_OW 235
// end ;
27277: PPOPN 2
27279: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27280: LD_EXP 62
27284: PUSH
27285: LD_EXP 95
27289: AND
27290: IFFALSE 27396
27292: GO 27294
27294: DISABLE
27295: LD_INT 0
27297: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27298: LD_ADDR_VAR 0 1
27302: PUSH
27303: LD_INT 22
27305: PUSH
27306: LD_OWVAR 2
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 2
27317: PUSH
27318: LD_INT 30
27320: PUSH
27321: LD_INT 0
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 30
27330: PUSH
27331: LD_INT 1
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: LIST
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PPUSH
27347: CALL_OW 69
27351: ST_TO_ADDR
// if not depot then
27352: LD_VAR 0 1
27356: NOT
27357: IFFALSE 27361
// exit ;
27359: GO 27396
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27361: LD_VAR 0 1
27365: PUSH
27366: LD_INT 1
27368: ARRAY
27369: PPUSH
27370: CALL_OW 250
27374: PPUSH
27375: LD_VAR 0 1
27379: PUSH
27380: LD_INT 1
27382: ARRAY
27383: PPUSH
27384: CALL_OW 251
27388: PPUSH
27389: LD_INT 70
27391: PPUSH
27392: CALL_OW 495
// end ;
27396: PPOPN 1
27398: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27399: LD_EXP 62
27403: PUSH
27404: LD_EXP 96
27408: AND
27409: IFFALSE 27620
27411: GO 27413
27413: DISABLE
27414: LD_INT 0
27416: PPUSH
27417: PPUSH
27418: PPUSH
27419: PPUSH
27420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27421: LD_ADDR_VAR 0 5
27425: PUSH
27426: LD_INT 22
27428: PUSH
27429: LD_OWVAR 2
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 21
27440: PUSH
27441: LD_INT 1
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PPUSH
27452: CALL_OW 69
27456: ST_TO_ADDR
// if not tmp then
27457: LD_VAR 0 5
27461: NOT
27462: IFFALSE 27466
// exit ;
27464: GO 27620
// for i in tmp do
27466: LD_ADDR_VAR 0 1
27470: PUSH
27471: LD_VAR 0 5
27475: PUSH
27476: FOR_IN
27477: IFFALSE 27618
// begin d := rand ( 0 , 5 ) ;
27479: LD_ADDR_VAR 0 4
27483: PUSH
27484: LD_INT 0
27486: PPUSH
27487: LD_INT 5
27489: PPUSH
27490: CALL_OW 12
27494: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27495: LD_ADDR_VAR 0 2
27499: PUSH
27500: LD_VAR 0 1
27504: PPUSH
27505: CALL_OW 250
27509: PPUSH
27510: LD_VAR 0 4
27514: PPUSH
27515: LD_INT 3
27517: PPUSH
27518: LD_INT 12
27520: PPUSH
27521: CALL_OW 12
27525: PPUSH
27526: CALL_OW 272
27530: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27531: LD_ADDR_VAR 0 3
27535: PUSH
27536: LD_VAR 0 1
27540: PPUSH
27541: CALL_OW 251
27545: PPUSH
27546: LD_VAR 0 4
27550: PPUSH
27551: LD_INT 3
27553: PPUSH
27554: LD_INT 12
27556: PPUSH
27557: CALL_OW 12
27561: PPUSH
27562: CALL_OW 273
27566: ST_TO_ADDR
// if ValidHex ( x , y ) then
27567: LD_VAR 0 2
27571: PPUSH
27572: LD_VAR 0 3
27576: PPUSH
27577: CALL_OW 488
27581: IFFALSE 27616
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27583: LD_VAR 0 1
27587: PPUSH
27588: LD_VAR 0 2
27592: PPUSH
27593: LD_VAR 0 3
27597: PPUSH
27598: LD_INT 3
27600: PPUSH
27601: LD_INT 6
27603: PPUSH
27604: CALL_OW 12
27608: PPUSH
27609: LD_INT 1
27611: PPUSH
27612: CALL_OW 483
// end ;
27616: GO 27476
27618: POP
27619: POP
// end ;
27620: PPOPN 5
27622: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27623: LD_EXP 62
27627: PUSH
27628: LD_EXP 97
27632: AND
27633: IFFALSE 27727
27635: GO 27637
27637: DISABLE
27638: LD_INT 0
27640: PPUSH
27641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27642: LD_ADDR_VAR 0 2
27646: PUSH
27647: LD_INT 22
27649: PUSH
27650: LD_OWVAR 2
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 32
27661: PUSH
27662: LD_INT 1
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 21
27671: PUSH
27672: LD_INT 2
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: LIST
27683: PPUSH
27684: CALL_OW 69
27688: ST_TO_ADDR
// if not tmp then
27689: LD_VAR 0 2
27693: NOT
27694: IFFALSE 27698
// exit ;
27696: GO 27727
// for i in tmp do
27698: LD_ADDR_VAR 0 1
27702: PUSH
27703: LD_VAR 0 2
27707: PUSH
27708: FOR_IN
27709: IFFALSE 27725
// SetFuel ( i , 0 ) ;
27711: LD_VAR 0 1
27715: PPUSH
27716: LD_INT 0
27718: PPUSH
27719: CALL_OW 240
27723: GO 27708
27725: POP
27726: POP
// end ;
27727: PPOPN 2
27729: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27730: LD_EXP 62
27734: PUSH
27735: LD_EXP 98
27739: AND
27740: IFFALSE 27806
27742: GO 27744
27744: DISABLE
27745: LD_INT 0
27747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27748: LD_ADDR_VAR 0 1
27752: PUSH
27753: LD_INT 22
27755: PUSH
27756: LD_OWVAR 2
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 30
27767: PUSH
27768: LD_INT 29
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PPUSH
27779: CALL_OW 69
27783: ST_TO_ADDR
// if not tmp then
27784: LD_VAR 0 1
27788: NOT
27789: IFFALSE 27793
// exit ;
27791: GO 27806
// DestroyUnit ( tmp [ 1 ] ) ;
27793: LD_VAR 0 1
27797: PUSH
27798: LD_INT 1
27800: ARRAY
27801: PPUSH
27802: CALL_OW 65
// end ;
27806: PPOPN 1
27808: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27809: LD_EXP 62
27813: PUSH
27814: LD_EXP 100
27818: AND
27819: IFFALSE 27948
27821: GO 27823
27823: DISABLE
27824: LD_INT 0
27826: PPUSH
// begin uc_side := 0 ;
27827: LD_ADDR_OWVAR 20
27831: PUSH
27832: LD_INT 0
27834: ST_TO_ADDR
// uc_nation := nation_arabian ;
27835: LD_ADDR_OWVAR 21
27839: PUSH
27840: LD_INT 2
27842: ST_TO_ADDR
// hc_gallery :=  ;
27843: LD_ADDR_OWVAR 33
27847: PUSH
27848: LD_STRING 
27850: ST_TO_ADDR
// hc_name :=  ;
27851: LD_ADDR_OWVAR 26
27855: PUSH
27856: LD_STRING 
27858: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27859: LD_INT 1
27861: PPUSH
27862: LD_INT 11
27864: PPUSH
27865: LD_INT 10
27867: PPUSH
27868: CALL_OW 380
// un := CreateHuman ;
27872: LD_ADDR_VAR 0 1
27876: PUSH
27877: CALL_OW 44
27881: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27882: LD_VAR 0 1
27886: PPUSH
27887: LD_INT 1
27889: PPUSH
27890: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27894: LD_INT 35
27896: PPUSH
27897: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27901: LD_VAR 0 1
27905: PPUSH
27906: LD_INT 22
27908: PUSH
27909: LD_OWVAR 2
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PPUSH
27918: CALL_OW 69
27922: PPUSH
27923: LD_VAR 0 1
27927: PPUSH
27928: CALL_OW 74
27932: PPUSH
27933: CALL_OW 115
// until IsDead ( un ) ;
27937: LD_VAR 0 1
27941: PPUSH
27942: CALL_OW 301
27946: IFFALSE 27894
// end ;
27948: PPOPN 1
27950: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27951: LD_EXP 62
27955: PUSH
27956: LD_EXP 102
27960: AND
27961: IFFALSE 27973
27963: GO 27965
27965: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27966: LD_STRING earthquake(getX(game), 0, 32)
27968: PPUSH
27969: CALL_OW 559
27973: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27974: LD_EXP 62
27978: PUSH
27979: LD_EXP 103
27983: AND
27984: IFFALSE 28075
27986: GO 27988
27988: DISABLE
27989: LD_INT 0
27991: PPUSH
// begin enable ;
27992: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27993: LD_ADDR_VAR 0 1
27997: PUSH
27998: LD_INT 22
28000: PUSH
28001: LD_OWVAR 2
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 21
28012: PUSH
28013: LD_INT 2
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 33
28022: PUSH
28023: LD_INT 3
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: LIST
28034: PPUSH
28035: CALL_OW 69
28039: ST_TO_ADDR
// if not tmp then
28040: LD_VAR 0 1
28044: NOT
28045: IFFALSE 28049
// exit ;
28047: GO 28075
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28049: LD_VAR 0 1
28053: PUSH
28054: LD_INT 1
28056: PPUSH
28057: LD_VAR 0 1
28061: PPUSH
28062: CALL_OW 12
28066: ARRAY
28067: PPUSH
28068: LD_INT 1
28070: PPUSH
28071: CALL_OW 234
// end ;
28075: PPOPN 1
28077: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28078: LD_EXP 62
28082: PUSH
28083: LD_EXP 104
28087: AND
28088: IFFALSE 28229
28090: GO 28092
28092: DISABLE
28093: LD_INT 0
28095: PPUSH
28096: PPUSH
28097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28098: LD_ADDR_VAR 0 3
28102: PUSH
28103: LD_INT 22
28105: PUSH
28106: LD_OWVAR 2
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 25
28117: PUSH
28118: LD_INT 1
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PPUSH
28129: CALL_OW 69
28133: ST_TO_ADDR
// if not tmp then
28134: LD_VAR 0 3
28138: NOT
28139: IFFALSE 28143
// exit ;
28141: GO 28229
// un := tmp [ rand ( 1 , tmp ) ] ;
28143: LD_ADDR_VAR 0 2
28147: PUSH
28148: LD_VAR 0 3
28152: PUSH
28153: LD_INT 1
28155: PPUSH
28156: LD_VAR 0 3
28160: PPUSH
28161: CALL_OW 12
28165: ARRAY
28166: ST_TO_ADDR
// if Crawls ( un ) then
28167: LD_VAR 0 2
28171: PPUSH
28172: CALL_OW 318
28176: IFFALSE 28187
// ComWalk ( un ) ;
28178: LD_VAR 0 2
28182: PPUSH
28183: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28187: LD_VAR 0 2
28191: PPUSH
28192: LD_INT 9
28194: PPUSH
28195: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28199: LD_INT 28
28201: PPUSH
28202: LD_OWVAR 2
28206: PPUSH
28207: LD_INT 2
28209: PPUSH
28210: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28214: LD_INT 29
28216: PPUSH
28217: LD_OWVAR 2
28221: PPUSH
28222: LD_INT 2
28224: PPUSH
28225: CALL_OW 322
// end ;
28229: PPOPN 3
28231: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28232: LD_EXP 62
28236: PUSH
28237: LD_EXP 105
28241: AND
28242: IFFALSE 28353
28244: GO 28246
28246: DISABLE
28247: LD_INT 0
28249: PPUSH
28250: PPUSH
28251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28252: LD_ADDR_VAR 0 3
28256: PUSH
28257: LD_INT 22
28259: PUSH
28260: LD_OWVAR 2
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 25
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PPUSH
28283: CALL_OW 69
28287: ST_TO_ADDR
// if not tmp then
28288: LD_VAR 0 3
28292: NOT
28293: IFFALSE 28297
// exit ;
28295: GO 28353
// un := tmp [ rand ( 1 , tmp ) ] ;
28297: LD_ADDR_VAR 0 2
28301: PUSH
28302: LD_VAR 0 3
28306: PUSH
28307: LD_INT 1
28309: PPUSH
28310: LD_VAR 0 3
28314: PPUSH
28315: CALL_OW 12
28319: ARRAY
28320: ST_TO_ADDR
// if Crawls ( un ) then
28321: LD_VAR 0 2
28325: PPUSH
28326: CALL_OW 318
28330: IFFALSE 28341
// ComWalk ( un ) ;
28332: LD_VAR 0 2
28336: PPUSH
28337: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28341: LD_VAR 0 2
28345: PPUSH
28346: LD_INT 8
28348: PPUSH
28349: CALL_OW 336
// end ;
28353: PPOPN 3
28355: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28356: LD_EXP 62
28360: PUSH
28361: LD_EXP 106
28365: AND
28366: IFFALSE 28510
28368: GO 28370
28370: DISABLE
28371: LD_INT 0
28373: PPUSH
28374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28375: LD_ADDR_VAR 0 2
28379: PUSH
28380: LD_INT 22
28382: PUSH
28383: LD_OWVAR 2
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 21
28394: PUSH
28395: LD_INT 2
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 2
28404: PUSH
28405: LD_INT 34
28407: PUSH
28408: LD_INT 12
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 34
28417: PUSH
28418: LD_INT 51
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 34
28427: PUSH
28428: LD_INT 32
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: PPUSH
28446: CALL_OW 69
28450: ST_TO_ADDR
// if not tmp then
28451: LD_VAR 0 2
28455: NOT
28456: IFFALSE 28460
// exit ;
28458: GO 28510
// for i in tmp do
28460: LD_ADDR_VAR 0 1
28464: PUSH
28465: LD_VAR 0 2
28469: PUSH
28470: FOR_IN
28471: IFFALSE 28508
// if GetCargo ( i , mat_artifact ) = 0 then
28473: LD_VAR 0 1
28477: PPUSH
28478: LD_INT 4
28480: PPUSH
28481: CALL_OW 289
28485: PUSH
28486: LD_INT 0
28488: EQUAL
28489: IFFALSE 28506
// SetCargo ( i , mat_siberit , 100 ) ;
28491: LD_VAR 0 1
28495: PPUSH
28496: LD_INT 3
28498: PPUSH
28499: LD_INT 100
28501: PPUSH
28502: CALL_OW 290
28506: GO 28470
28508: POP
28509: POP
// end ;
28510: PPOPN 2
28512: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28513: LD_EXP 62
28517: PUSH
28518: LD_EXP 107
28522: AND
28523: IFFALSE 28706
28525: GO 28527
28527: DISABLE
28528: LD_INT 0
28530: PPUSH
28531: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28532: LD_ADDR_VAR 0 2
28536: PUSH
28537: LD_INT 22
28539: PUSH
28540: LD_OWVAR 2
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PPUSH
28549: CALL_OW 69
28553: ST_TO_ADDR
// if not tmp then
28554: LD_VAR 0 2
28558: NOT
28559: IFFALSE 28563
// exit ;
28561: GO 28706
// for i := 1 to 2 do
28563: LD_ADDR_VAR 0 1
28567: PUSH
28568: DOUBLE
28569: LD_INT 1
28571: DEC
28572: ST_TO_ADDR
28573: LD_INT 2
28575: PUSH
28576: FOR_TO
28577: IFFALSE 28704
// begin uc_side := your_side ;
28579: LD_ADDR_OWVAR 20
28583: PUSH
28584: LD_OWVAR 2
28588: ST_TO_ADDR
// uc_nation := nation_american ;
28589: LD_ADDR_OWVAR 21
28593: PUSH
28594: LD_INT 1
28596: ST_TO_ADDR
// vc_chassis := us_morphling ;
28597: LD_ADDR_OWVAR 37
28601: PUSH
28602: LD_INT 5
28604: ST_TO_ADDR
// vc_engine := engine_siberite ;
28605: LD_ADDR_OWVAR 39
28609: PUSH
28610: LD_INT 3
28612: ST_TO_ADDR
// vc_control := control_computer ;
28613: LD_ADDR_OWVAR 38
28617: PUSH
28618: LD_INT 3
28620: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28621: LD_ADDR_OWVAR 40
28625: PUSH
28626: LD_INT 10
28628: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28629: LD_VAR 0 2
28633: PUSH
28634: LD_INT 1
28636: ARRAY
28637: PPUSH
28638: CALL_OW 310
28642: NOT
28643: IFFALSE 28690
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28645: CALL_OW 45
28649: PPUSH
28650: LD_VAR 0 2
28654: PUSH
28655: LD_INT 1
28657: ARRAY
28658: PPUSH
28659: CALL_OW 250
28663: PPUSH
28664: LD_VAR 0 2
28668: PUSH
28669: LD_INT 1
28671: ARRAY
28672: PPUSH
28673: CALL_OW 251
28677: PPUSH
28678: LD_INT 12
28680: PPUSH
28681: LD_INT 1
28683: PPUSH
28684: CALL_OW 50
28688: GO 28702
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28690: CALL_OW 45
28694: PPUSH
28695: LD_INT 1
28697: PPUSH
28698: CALL_OW 51
// end ;
28702: GO 28576
28704: POP
28705: POP
// end ;
28706: PPOPN 2
28708: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28709: LD_EXP 62
28713: PUSH
28714: LD_EXP 108
28718: AND
28719: IFFALSE 28941
28721: GO 28723
28723: DISABLE
28724: LD_INT 0
28726: PPUSH
28727: PPUSH
28728: PPUSH
28729: PPUSH
28730: PPUSH
28731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28732: LD_ADDR_VAR 0 6
28736: PUSH
28737: LD_INT 22
28739: PUSH
28740: LD_OWVAR 2
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 21
28751: PUSH
28752: LD_INT 1
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 3
28761: PUSH
28762: LD_INT 23
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: LIST
28780: PPUSH
28781: CALL_OW 69
28785: ST_TO_ADDR
// if not tmp then
28786: LD_VAR 0 6
28790: NOT
28791: IFFALSE 28795
// exit ;
28793: GO 28941
// s1 := rand ( 1 , 4 ) ;
28795: LD_ADDR_VAR 0 2
28799: PUSH
28800: LD_INT 1
28802: PPUSH
28803: LD_INT 4
28805: PPUSH
28806: CALL_OW 12
28810: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28811: LD_ADDR_VAR 0 4
28815: PUSH
28816: LD_VAR 0 6
28820: PUSH
28821: LD_INT 1
28823: ARRAY
28824: PPUSH
28825: LD_VAR 0 2
28829: PPUSH
28830: CALL_OW 259
28834: ST_TO_ADDR
// if s1 = 1 then
28835: LD_VAR 0 2
28839: PUSH
28840: LD_INT 1
28842: EQUAL
28843: IFFALSE 28863
// s2 := rand ( 2 , 4 ) else
28845: LD_ADDR_VAR 0 3
28849: PUSH
28850: LD_INT 2
28852: PPUSH
28853: LD_INT 4
28855: PPUSH
28856: CALL_OW 12
28860: ST_TO_ADDR
28861: GO 28871
// s2 := 1 ;
28863: LD_ADDR_VAR 0 3
28867: PUSH
28868: LD_INT 1
28870: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28871: LD_ADDR_VAR 0 5
28875: PUSH
28876: LD_VAR 0 6
28880: PUSH
28881: LD_INT 1
28883: ARRAY
28884: PPUSH
28885: LD_VAR 0 3
28889: PPUSH
28890: CALL_OW 259
28894: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28895: LD_VAR 0 6
28899: PUSH
28900: LD_INT 1
28902: ARRAY
28903: PPUSH
28904: LD_VAR 0 2
28908: PPUSH
28909: LD_VAR 0 5
28913: PPUSH
28914: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28918: LD_VAR 0 6
28922: PUSH
28923: LD_INT 1
28925: ARRAY
28926: PPUSH
28927: LD_VAR 0 3
28931: PPUSH
28932: LD_VAR 0 4
28936: PPUSH
28937: CALL_OW 237
// end ;
28941: PPOPN 6
28943: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28944: LD_EXP 62
28948: PUSH
28949: LD_EXP 109
28953: AND
28954: IFFALSE 29033
28956: GO 28958
28958: DISABLE
28959: LD_INT 0
28961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28962: LD_ADDR_VAR 0 1
28966: PUSH
28967: LD_INT 22
28969: PUSH
28970: LD_OWVAR 2
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 30
28981: PUSH
28982: LD_INT 3
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PPUSH
28993: CALL_OW 69
28997: ST_TO_ADDR
// if not tmp then
28998: LD_VAR 0 1
29002: NOT
29003: IFFALSE 29007
// exit ;
29005: GO 29033
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29007: LD_VAR 0 1
29011: PUSH
29012: LD_INT 1
29014: PPUSH
29015: LD_VAR 0 1
29019: PPUSH
29020: CALL_OW 12
29024: ARRAY
29025: PPUSH
29026: LD_INT 1
29028: PPUSH
29029: CALL_OW 234
// end ;
29033: PPOPN 1
29035: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29036: LD_EXP 62
29040: PUSH
29041: LD_EXP 110
29045: AND
29046: IFFALSE 29158
29048: GO 29050
29050: DISABLE
29051: LD_INT 0
29053: PPUSH
29054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29055: LD_ADDR_VAR 0 2
29059: PUSH
29060: LD_INT 22
29062: PUSH
29063: LD_OWVAR 2
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 2
29074: PUSH
29075: LD_INT 30
29077: PUSH
29078: LD_INT 27
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 30
29087: PUSH
29088: LD_INT 26
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 30
29097: PUSH
29098: LD_INT 28
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PPUSH
29115: CALL_OW 69
29119: ST_TO_ADDR
// if not tmp then
29120: LD_VAR 0 2
29124: NOT
29125: IFFALSE 29129
// exit ;
29127: GO 29158
// for i in tmp do
29129: LD_ADDR_VAR 0 1
29133: PUSH
29134: LD_VAR 0 2
29138: PUSH
29139: FOR_IN
29140: IFFALSE 29156
// SetLives ( i , 1 ) ;
29142: LD_VAR 0 1
29146: PPUSH
29147: LD_INT 1
29149: PPUSH
29150: CALL_OW 234
29154: GO 29139
29156: POP
29157: POP
// end ;
29158: PPOPN 2
29160: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29161: LD_EXP 62
29165: PUSH
29166: LD_EXP 111
29170: AND
29171: IFFALSE 29445
29173: GO 29175
29175: DISABLE
29176: LD_INT 0
29178: PPUSH
29179: PPUSH
29180: PPUSH
// begin i := rand ( 1 , 7 ) ;
29181: LD_ADDR_VAR 0 1
29185: PUSH
29186: LD_INT 1
29188: PPUSH
29189: LD_INT 7
29191: PPUSH
29192: CALL_OW 12
29196: ST_TO_ADDR
// case i of 1 :
29197: LD_VAR 0 1
29201: PUSH
29202: LD_INT 1
29204: DOUBLE
29205: EQUAL
29206: IFTRUE 29210
29208: GO 29220
29210: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29211: LD_STRING earthquake(getX(game), 0, 32)
29213: PPUSH
29214: CALL_OW 559
29218: GO 29445
29220: LD_INT 2
29222: DOUBLE
29223: EQUAL
29224: IFTRUE 29228
29226: GO 29242
29228: POP
// begin ToLua ( displayStucuk(); ) ;
29229: LD_STRING displayStucuk();
29231: PPUSH
29232: CALL_OW 559
// ResetFog ;
29236: CALL_OW 335
// end ; 3 :
29240: GO 29445
29242: LD_INT 3
29244: DOUBLE
29245: EQUAL
29246: IFTRUE 29250
29248: GO 29354
29250: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29251: LD_ADDR_VAR 0 2
29255: PUSH
29256: LD_INT 22
29258: PUSH
29259: LD_OWVAR 2
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 25
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PPUSH
29282: CALL_OW 69
29286: ST_TO_ADDR
// if not tmp then
29287: LD_VAR 0 2
29291: NOT
29292: IFFALSE 29296
// exit ;
29294: GO 29445
// un := tmp [ rand ( 1 , tmp ) ] ;
29296: LD_ADDR_VAR 0 3
29300: PUSH
29301: LD_VAR 0 2
29305: PUSH
29306: LD_INT 1
29308: PPUSH
29309: LD_VAR 0 2
29313: PPUSH
29314: CALL_OW 12
29318: ARRAY
29319: ST_TO_ADDR
// if Crawls ( un ) then
29320: LD_VAR 0 3
29324: PPUSH
29325: CALL_OW 318
29329: IFFALSE 29340
// ComWalk ( un ) ;
29331: LD_VAR 0 3
29335: PPUSH
29336: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29340: LD_VAR 0 3
29344: PPUSH
29345: LD_INT 8
29347: PPUSH
29348: CALL_OW 336
// end ; 4 :
29352: GO 29445
29354: LD_INT 4
29356: DOUBLE
29357: EQUAL
29358: IFTRUE 29362
29360: GO 29423
29362: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29363: LD_ADDR_VAR 0 2
29367: PUSH
29368: LD_INT 22
29370: PUSH
29371: LD_OWVAR 2
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 30
29382: PUSH
29383: LD_INT 29
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PPUSH
29394: CALL_OW 69
29398: ST_TO_ADDR
// if not tmp then
29399: LD_VAR 0 2
29403: NOT
29404: IFFALSE 29408
// exit ;
29406: GO 29445
// DestroyUnit ( tmp [ 1 ] ) ;
29408: LD_VAR 0 2
29412: PUSH
29413: LD_INT 1
29415: ARRAY
29416: PPUSH
29417: CALL_OW 65
// end ; 5 .. 7 :
29421: GO 29445
29423: LD_INT 5
29425: DOUBLE
29426: GREATEREQUAL
29427: IFFALSE 29435
29429: LD_INT 7
29431: DOUBLE
29432: LESSEQUAL
29433: IFTRUE 29437
29435: GO 29444
29437: POP
// StreamSibBomb ; end ;
29438: CALL 25695 0 0
29442: GO 29445
29444: POP
// end ;
29445: PPOPN 3
29447: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29448: LD_EXP 62
29452: PUSH
29453: LD_EXP 112
29457: AND
29458: IFFALSE 29614
29460: GO 29462
29462: DISABLE
29463: LD_INT 0
29465: PPUSH
29466: PPUSH
29467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29468: LD_ADDR_VAR 0 2
29472: PUSH
29473: LD_INT 81
29475: PUSH
29476: LD_OWVAR 2
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 2
29487: PUSH
29488: LD_INT 21
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 21
29500: PUSH
29501: LD_INT 2
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PPUSH
29517: CALL_OW 69
29521: ST_TO_ADDR
// if not tmp then
29522: LD_VAR 0 2
29526: NOT
29527: IFFALSE 29531
// exit ;
29529: GO 29614
// p := 0 ;
29531: LD_ADDR_VAR 0 3
29535: PUSH
29536: LD_INT 0
29538: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29539: LD_INT 35
29541: PPUSH
29542: CALL_OW 67
// p := p + 1 ;
29546: LD_ADDR_VAR 0 3
29550: PUSH
29551: LD_VAR 0 3
29555: PUSH
29556: LD_INT 1
29558: PLUS
29559: ST_TO_ADDR
// for i in tmp do
29560: LD_ADDR_VAR 0 1
29564: PUSH
29565: LD_VAR 0 2
29569: PUSH
29570: FOR_IN
29571: IFFALSE 29602
// if GetLives ( i ) < 1000 then
29573: LD_VAR 0 1
29577: PPUSH
29578: CALL_OW 256
29582: PUSH
29583: LD_INT 1000
29585: LESS
29586: IFFALSE 29600
// SetLives ( i , 1000 ) ;
29588: LD_VAR 0 1
29592: PPUSH
29593: LD_INT 1000
29595: PPUSH
29596: CALL_OW 234
29600: GO 29570
29602: POP
29603: POP
// until p > 20 ;
29604: LD_VAR 0 3
29608: PUSH
29609: LD_INT 20
29611: GREATER
29612: IFFALSE 29539
// end ;
29614: PPOPN 3
29616: END
// every 0 0$1 trigger StreamModeActive and sTime do
29617: LD_EXP 62
29621: PUSH
29622: LD_EXP 113
29626: AND
29627: IFFALSE 29662
29629: GO 29631
29631: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29632: LD_INT 28
29634: PPUSH
29635: LD_OWVAR 2
29639: PPUSH
29640: LD_INT 2
29642: PPUSH
29643: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29647: LD_INT 30
29649: PPUSH
29650: LD_OWVAR 2
29654: PPUSH
29655: LD_INT 2
29657: PPUSH
29658: CALL_OW 322
// end ;
29662: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29663: LD_EXP 62
29667: PUSH
29668: LD_EXP 114
29672: AND
29673: IFFALSE 29794
29675: GO 29677
29677: DISABLE
29678: LD_INT 0
29680: PPUSH
29681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29682: LD_ADDR_VAR 0 2
29686: PUSH
29687: LD_INT 22
29689: PUSH
29690: LD_OWVAR 2
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 21
29701: PUSH
29702: LD_INT 1
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 3
29711: PUSH
29712: LD_INT 23
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: PPUSH
29731: CALL_OW 69
29735: ST_TO_ADDR
// if not tmp then
29736: LD_VAR 0 2
29740: NOT
29741: IFFALSE 29745
// exit ;
29743: GO 29794
// for i in tmp do
29745: LD_ADDR_VAR 0 1
29749: PUSH
29750: LD_VAR 0 2
29754: PUSH
29755: FOR_IN
29756: IFFALSE 29792
// begin if Crawls ( i ) then
29758: LD_VAR 0 1
29762: PPUSH
29763: CALL_OW 318
29767: IFFALSE 29778
// ComWalk ( i ) ;
29769: LD_VAR 0 1
29773: PPUSH
29774: CALL_OW 138
// SetClass ( i , 2 ) ;
29778: LD_VAR 0 1
29782: PPUSH
29783: LD_INT 2
29785: PPUSH
29786: CALL_OW 336
// end ;
29790: GO 29755
29792: POP
29793: POP
// end ;
29794: PPOPN 2
29796: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29797: LD_EXP 62
29801: PUSH
29802: LD_EXP 115
29806: AND
29807: IFFALSE 30088
29809: GO 29811
29811: DISABLE
29812: LD_INT 0
29814: PPUSH
29815: PPUSH
29816: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29817: LD_OWVAR 2
29821: PPUSH
29822: LD_INT 9
29824: PPUSH
29825: LD_INT 1
29827: PPUSH
29828: LD_INT 1
29830: PPUSH
29831: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29835: LD_INT 9
29837: PPUSH
29838: LD_OWVAR 2
29842: PPUSH
29843: CALL_OW 343
// uc_side := 9 ;
29847: LD_ADDR_OWVAR 20
29851: PUSH
29852: LD_INT 9
29854: ST_TO_ADDR
// uc_nation := 2 ;
29855: LD_ADDR_OWVAR 21
29859: PUSH
29860: LD_INT 2
29862: ST_TO_ADDR
// hc_name := Dark Warrior ;
29863: LD_ADDR_OWVAR 26
29867: PUSH
29868: LD_STRING Dark Warrior
29870: ST_TO_ADDR
// hc_gallery :=  ;
29871: LD_ADDR_OWVAR 33
29875: PUSH
29876: LD_STRING 
29878: ST_TO_ADDR
// hc_noskilllimit := true ;
29879: LD_ADDR_OWVAR 76
29883: PUSH
29884: LD_INT 1
29886: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29887: LD_ADDR_OWVAR 31
29891: PUSH
29892: LD_INT 30
29894: PUSH
29895: LD_INT 30
29897: PUSH
29898: LD_INT 30
29900: PUSH
29901: LD_INT 30
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: ST_TO_ADDR
// un := CreateHuman ;
29910: LD_ADDR_VAR 0 3
29914: PUSH
29915: CALL_OW 44
29919: ST_TO_ADDR
// hc_noskilllimit := false ;
29920: LD_ADDR_OWVAR 76
29924: PUSH
29925: LD_INT 0
29927: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29928: LD_VAR 0 3
29932: PPUSH
29933: LD_INT 1
29935: PPUSH
29936: CALL_OW 51
// p := 0 ;
29940: LD_ADDR_VAR 0 2
29944: PUSH
29945: LD_INT 0
29947: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29948: LD_INT 35
29950: PPUSH
29951: CALL_OW 67
// p := p + 1 ;
29955: LD_ADDR_VAR 0 2
29959: PUSH
29960: LD_VAR 0 2
29964: PUSH
29965: LD_INT 1
29967: PLUS
29968: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29969: LD_VAR 0 3
29973: PPUSH
29974: CALL_OW 256
29978: PUSH
29979: LD_INT 1000
29981: LESS
29982: IFFALSE 29996
// SetLives ( un , 1000 ) ;
29984: LD_VAR 0 3
29988: PPUSH
29989: LD_INT 1000
29991: PPUSH
29992: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29996: LD_VAR 0 3
30000: PPUSH
30001: LD_INT 81
30003: PUSH
30004: LD_OWVAR 2
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 91
30015: PUSH
30016: LD_VAR 0 3
30020: PUSH
30021: LD_INT 30
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: LIST
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PPUSH
30033: CALL_OW 69
30037: PPUSH
30038: LD_VAR 0 3
30042: PPUSH
30043: CALL_OW 74
30047: PPUSH
30048: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30052: LD_VAR 0 2
30056: PUSH
30057: LD_INT 60
30059: GREATER
30060: PUSH
30061: LD_VAR 0 3
30065: PPUSH
30066: CALL_OW 301
30070: OR
30071: IFFALSE 29948
// if un then
30073: LD_VAR 0 3
30077: IFFALSE 30088
// RemoveUnit ( un ) ;
30079: LD_VAR 0 3
30083: PPUSH
30084: CALL_OW 64
// end ;
30088: PPOPN 3
30090: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30091: LD_INT 0
30093: PPUSH
// case cmd of 301 :
30094: LD_VAR 0 1
30098: PUSH
30099: LD_INT 301
30101: DOUBLE
30102: EQUAL
30103: IFTRUE 30107
30105: GO 30139
30107: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30108: LD_VAR 0 6
30112: PPUSH
30113: LD_VAR 0 7
30117: PPUSH
30118: LD_VAR 0 8
30122: PPUSH
30123: LD_VAR 0 4
30127: PPUSH
30128: LD_VAR 0 5
30132: PPUSH
30133: CALL 31340 0 5
30137: GO 30260
30139: LD_INT 302
30141: DOUBLE
30142: EQUAL
30143: IFTRUE 30147
30145: GO 30184
30147: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30148: LD_VAR 0 6
30152: PPUSH
30153: LD_VAR 0 7
30157: PPUSH
30158: LD_VAR 0 8
30162: PPUSH
30163: LD_VAR 0 9
30167: PPUSH
30168: LD_VAR 0 4
30172: PPUSH
30173: LD_VAR 0 5
30177: PPUSH
30178: CALL 31431 0 6
30182: GO 30260
30184: LD_INT 303
30186: DOUBLE
30187: EQUAL
30188: IFTRUE 30192
30190: GO 30229
30192: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30193: LD_VAR 0 6
30197: PPUSH
30198: LD_VAR 0 7
30202: PPUSH
30203: LD_VAR 0 8
30207: PPUSH
30208: LD_VAR 0 9
30212: PPUSH
30213: LD_VAR 0 4
30217: PPUSH
30218: LD_VAR 0 5
30222: PPUSH
30223: CALL 30265 0 6
30227: GO 30260
30229: LD_INT 304
30231: DOUBLE
30232: EQUAL
30233: IFTRUE 30237
30235: GO 30259
30237: POP
// hHackTeleport ( unit , x , y ) ; end ;
30238: LD_VAR 0 2
30242: PPUSH
30243: LD_VAR 0 4
30247: PPUSH
30248: LD_VAR 0 5
30252: PPUSH
30253: CALL 32024 0 3
30257: GO 30260
30259: POP
// end ;
30260: LD_VAR 0 12
30264: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30265: LD_INT 0
30267: PPUSH
30268: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30269: LD_VAR 0 1
30273: PUSH
30274: LD_INT 1
30276: LESS
30277: PUSH
30278: LD_VAR 0 1
30282: PUSH
30283: LD_INT 3
30285: GREATER
30286: OR
30287: PUSH
30288: LD_VAR 0 5
30292: PPUSH
30293: LD_VAR 0 6
30297: PPUSH
30298: CALL_OW 428
30302: OR
30303: IFFALSE 30307
// exit ;
30305: GO 31027
// uc_side := your_side ;
30307: LD_ADDR_OWVAR 20
30311: PUSH
30312: LD_OWVAR 2
30316: ST_TO_ADDR
// uc_nation := nation ;
30317: LD_ADDR_OWVAR 21
30321: PUSH
30322: LD_VAR 0 1
30326: ST_TO_ADDR
// bc_level = 1 ;
30327: LD_ADDR_OWVAR 43
30331: PUSH
30332: LD_INT 1
30334: ST_TO_ADDR
// case btype of 1 :
30335: LD_VAR 0 2
30339: PUSH
30340: LD_INT 1
30342: DOUBLE
30343: EQUAL
30344: IFTRUE 30348
30346: GO 30359
30348: POP
// bc_type := b_depot ; 2 :
30349: LD_ADDR_OWVAR 42
30353: PUSH
30354: LD_INT 0
30356: ST_TO_ADDR
30357: GO 30971
30359: LD_INT 2
30361: DOUBLE
30362: EQUAL
30363: IFTRUE 30367
30365: GO 30378
30367: POP
// bc_type := b_warehouse ; 3 :
30368: LD_ADDR_OWVAR 42
30372: PUSH
30373: LD_INT 1
30375: ST_TO_ADDR
30376: GO 30971
30378: LD_INT 3
30380: DOUBLE
30381: EQUAL
30382: IFTRUE 30386
30384: GO 30397
30386: POP
// bc_type := b_lab ; 4 .. 9 :
30387: LD_ADDR_OWVAR 42
30391: PUSH
30392: LD_INT 6
30394: ST_TO_ADDR
30395: GO 30971
30397: LD_INT 4
30399: DOUBLE
30400: GREATEREQUAL
30401: IFFALSE 30409
30403: LD_INT 9
30405: DOUBLE
30406: LESSEQUAL
30407: IFTRUE 30411
30409: GO 30463
30411: POP
// begin bc_type := b_lab_half ;
30412: LD_ADDR_OWVAR 42
30416: PUSH
30417: LD_INT 7
30419: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30420: LD_ADDR_OWVAR 44
30424: PUSH
30425: LD_INT 10
30427: PUSH
30428: LD_INT 11
30430: PUSH
30431: LD_INT 12
30433: PUSH
30434: LD_INT 15
30436: PUSH
30437: LD_INT 14
30439: PUSH
30440: LD_INT 13
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: PUSH
30451: LD_VAR 0 2
30455: PUSH
30456: LD_INT 3
30458: MINUS
30459: ARRAY
30460: ST_TO_ADDR
// end ; 10 .. 13 :
30461: GO 30971
30463: LD_INT 10
30465: DOUBLE
30466: GREATEREQUAL
30467: IFFALSE 30475
30469: LD_INT 13
30471: DOUBLE
30472: LESSEQUAL
30473: IFTRUE 30477
30475: GO 30554
30477: POP
// begin bc_type := b_lab_full ;
30478: LD_ADDR_OWVAR 42
30482: PUSH
30483: LD_INT 8
30485: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30486: LD_ADDR_OWVAR 44
30490: PUSH
30491: LD_INT 10
30493: PUSH
30494: LD_INT 12
30496: PUSH
30497: LD_INT 14
30499: PUSH
30500: LD_INT 13
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: PUSH
30509: LD_VAR 0 2
30513: PUSH
30514: LD_INT 9
30516: MINUS
30517: ARRAY
30518: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30519: LD_ADDR_OWVAR 45
30523: PUSH
30524: LD_INT 11
30526: PUSH
30527: LD_INT 15
30529: PUSH
30530: LD_INT 12
30532: PUSH
30533: LD_INT 15
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: PUSH
30542: LD_VAR 0 2
30546: PUSH
30547: LD_INT 9
30549: MINUS
30550: ARRAY
30551: ST_TO_ADDR
// end ; 14 :
30552: GO 30971
30554: LD_INT 14
30556: DOUBLE
30557: EQUAL
30558: IFTRUE 30562
30560: GO 30573
30562: POP
// bc_type := b_workshop ; 15 :
30563: LD_ADDR_OWVAR 42
30567: PUSH
30568: LD_INT 2
30570: ST_TO_ADDR
30571: GO 30971
30573: LD_INT 15
30575: DOUBLE
30576: EQUAL
30577: IFTRUE 30581
30579: GO 30592
30581: POP
// bc_type := b_factory ; 16 :
30582: LD_ADDR_OWVAR 42
30586: PUSH
30587: LD_INT 3
30589: ST_TO_ADDR
30590: GO 30971
30592: LD_INT 16
30594: DOUBLE
30595: EQUAL
30596: IFTRUE 30600
30598: GO 30611
30600: POP
// bc_type := b_ext_gun ; 17 :
30601: LD_ADDR_OWVAR 42
30605: PUSH
30606: LD_INT 17
30608: ST_TO_ADDR
30609: GO 30971
30611: LD_INT 17
30613: DOUBLE
30614: EQUAL
30615: IFTRUE 30619
30617: GO 30647
30619: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30620: LD_ADDR_OWVAR 42
30624: PUSH
30625: LD_INT 19
30627: PUSH
30628: LD_INT 23
30630: PUSH
30631: LD_INT 19
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: PUSH
30639: LD_VAR 0 1
30643: ARRAY
30644: ST_TO_ADDR
30645: GO 30971
30647: LD_INT 18
30649: DOUBLE
30650: EQUAL
30651: IFTRUE 30655
30653: GO 30666
30655: POP
// bc_type := b_ext_radar ; 19 :
30656: LD_ADDR_OWVAR 42
30660: PUSH
30661: LD_INT 20
30663: ST_TO_ADDR
30664: GO 30971
30666: LD_INT 19
30668: DOUBLE
30669: EQUAL
30670: IFTRUE 30674
30672: GO 30685
30674: POP
// bc_type := b_ext_radio ; 20 :
30675: LD_ADDR_OWVAR 42
30679: PUSH
30680: LD_INT 22
30682: ST_TO_ADDR
30683: GO 30971
30685: LD_INT 20
30687: DOUBLE
30688: EQUAL
30689: IFTRUE 30693
30691: GO 30704
30693: POP
// bc_type := b_ext_siberium ; 21 :
30694: LD_ADDR_OWVAR 42
30698: PUSH
30699: LD_INT 21
30701: ST_TO_ADDR
30702: GO 30971
30704: LD_INT 21
30706: DOUBLE
30707: EQUAL
30708: IFTRUE 30712
30710: GO 30723
30712: POP
// bc_type := b_ext_computer ; 22 :
30713: LD_ADDR_OWVAR 42
30717: PUSH
30718: LD_INT 24
30720: ST_TO_ADDR
30721: GO 30971
30723: LD_INT 22
30725: DOUBLE
30726: EQUAL
30727: IFTRUE 30731
30729: GO 30742
30731: POP
// bc_type := b_ext_track ; 23 :
30732: LD_ADDR_OWVAR 42
30736: PUSH
30737: LD_INT 16
30739: ST_TO_ADDR
30740: GO 30971
30742: LD_INT 23
30744: DOUBLE
30745: EQUAL
30746: IFTRUE 30750
30748: GO 30761
30750: POP
// bc_type := b_ext_laser ; 24 :
30751: LD_ADDR_OWVAR 42
30755: PUSH
30756: LD_INT 25
30758: ST_TO_ADDR
30759: GO 30971
30761: LD_INT 24
30763: DOUBLE
30764: EQUAL
30765: IFTRUE 30769
30767: GO 30780
30769: POP
// bc_type := b_control_tower ; 25 :
30770: LD_ADDR_OWVAR 42
30774: PUSH
30775: LD_INT 36
30777: ST_TO_ADDR
30778: GO 30971
30780: LD_INT 25
30782: DOUBLE
30783: EQUAL
30784: IFTRUE 30788
30786: GO 30799
30788: POP
// bc_type := b_breastwork ; 26 :
30789: LD_ADDR_OWVAR 42
30793: PUSH
30794: LD_INT 31
30796: ST_TO_ADDR
30797: GO 30971
30799: LD_INT 26
30801: DOUBLE
30802: EQUAL
30803: IFTRUE 30807
30805: GO 30818
30807: POP
// bc_type := b_bunker ; 27 :
30808: LD_ADDR_OWVAR 42
30812: PUSH
30813: LD_INT 32
30815: ST_TO_ADDR
30816: GO 30971
30818: LD_INT 27
30820: DOUBLE
30821: EQUAL
30822: IFTRUE 30826
30824: GO 30837
30826: POP
// bc_type := b_turret ; 28 :
30827: LD_ADDR_OWVAR 42
30831: PUSH
30832: LD_INT 33
30834: ST_TO_ADDR
30835: GO 30971
30837: LD_INT 28
30839: DOUBLE
30840: EQUAL
30841: IFTRUE 30845
30843: GO 30856
30845: POP
// bc_type := b_armoury ; 29 :
30846: LD_ADDR_OWVAR 42
30850: PUSH
30851: LD_INT 4
30853: ST_TO_ADDR
30854: GO 30971
30856: LD_INT 29
30858: DOUBLE
30859: EQUAL
30860: IFTRUE 30864
30862: GO 30875
30864: POP
// bc_type := b_barracks ; 30 :
30865: LD_ADDR_OWVAR 42
30869: PUSH
30870: LD_INT 5
30872: ST_TO_ADDR
30873: GO 30971
30875: LD_INT 30
30877: DOUBLE
30878: EQUAL
30879: IFTRUE 30883
30881: GO 30894
30883: POP
// bc_type := b_solar_power ; 31 :
30884: LD_ADDR_OWVAR 42
30888: PUSH
30889: LD_INT 27
30891: ST_TO_ADDR
30892: GO 30971
30894: LD_INT 31
30896: DOUBLE
30897: EQUAL
30898: IFTRUE 30902
30900: GO 30913
30902: POP
// bc_type := b_oil_power ; 32 :
30903: LD_ADDR_OWVAR 42
30907: PUSH
30908: LD_INT 26
30910: ST_TO_ADDR
30911: GO 30971
30913: LD_INT 32
30915: DOUBLE
30916: EQUAL
30917: IFTRUE 30921
30919: GO 30932
30921: POP
// bc_type := b_siberite_power ; 33 :
30922: LD_ADDR_OWVAR 42
30926: PUSH
30927: LD_INT 28
30929: ST_TO_ADDR
30930: GO 30971
30932: LD_INT 33
30934: DOUBLE
30935: EQUAL
30936: IFTRUE 30940
30938: GO 30951
30940: POP
// bc_type := b_oil_mine ; 34 :
30941: LD_ADDR_OWVAR 42
30945: PUSH
30946: LD_INT 29
30948: ST_TO_ADDR
30949: GO 30971
30951: LD_INT 34
30953: DOUBLE
30954: EQUAL
30955: IFTRUE 30959
30957: GO 30970
30959: POP
// bc_type := b_siberite_mine ; end ;
30960: LD_ADDR_OWVAR 42
30964: PUSH
30965: LD_INT 30
30967: ST_TO_ADDR
30968: GO 30971
30970: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30971: LD_ADDR_VAR 0 8
30975: PUSH
30976: LD_VAR 0 5
30980: PPUSH
30981: LD_VAR 0 6
30985: PPUSH
30986: LD_VAR 0 3
30990: PPUSH
30991: CALL_OW 47
30995: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30996: LD_OWVAR 42
31000: PUSH
31001: LD_INT 32
31003: PUSH
31004: LD_INT 33
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: IN
31011: IFFALSE 31027
// PlaceWeaponTurret ( b , weapon ) ;
31013: LD_VAR 0 8
31017: PPUSH
31018: LD_VAR 0 4
31022: PPUSH
31023: CALL_OW 431
// end ;
31027: LD_VAR 0 7
31031: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31032: LD_INT 0
31034: PPUSH
31035: PPUSH
31036: PPUSH
31037: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31038: LD_ADDR_VAR 0 4
31042: PUSH
31043: LD_INT 22
31045: PUSH
31046: LD_OWVAR 2
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 2
31057: PUSH
31058: LD_INT 30
31060: PUSH
31061: LD_INT 0
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 30
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: LIST
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PPUSH
31087: CALL_OW 69
31091: ST_TO_ADDR
// if not tmp then
31092: LD_VAR 0 4
31096: NOT
31097: IFFALSE 31101
// exit ;
31099: GO 31160
// for i in tmp do
31101: LD_ADDR_VAR 0 2
31105: PUSH
31106: LD_VAR 0 4
31110: PUSH
31111: FOR_IN
31112: IFFALSE 31158
// for j = 1 to 3 do
31114: LD_ADDR_VAR 0 3
31118: PUSH
31119: DOUBLE
31120: LD_INT 1
31122: DEC
31123: ST_TO_ADDR
31124: LD_INT 3
31126: PUSH
31127: FOR_TO
31128: IFFALSE 31154
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31130: LD_VAR 0 2
31134: PPUSH
31135: CALL_OW 274
31139: PPUSH
31140: LD_VAR 0 3
31144: PPUSH
31145: LD_INT 99999
31147: PPUSH
31148: CALL_OW 277
31152: GO 31127
31154: POP
31155: POP
31156: GO 31111
31158: POP
31159: POP
// end ;
31160: LD_VAR 0 1
31164: RET
// export function hHackSetLevel10 ; var i , j ; begin
31165: LD_INT 0
31167: PPUSH
31168: PPUSH
31169: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31170: LD_ADDR_VAR 0 2
31174: PUSH
31175: LD_INT 21
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PPUSH
31185: CALL_OW 69
31189: PUSH
31190: FOR_IN
31191: IFFALSE 31243
// if IsSelected ( i ) then
31193: LD_VAR 0 2
31197: PPUSH
31198: CALL_OW 306
31202: IFFALSE 31241
// begin for j := 1 to 4 do
31204: LD_ADDR_VAR 0 3
31208: PUSH
31209: DOUBLE
31210: LD_INT 1
31212: DEC
31213: ST_TO_ADDR
31214: LD_INT 4
31216: PUSH
31217: FOR_TO
31218: IFFALSE 31239
// SetSkill ( i , j , 10 ) ;
31220: LD_VAR 0 2
31224: PPUSH
31225: LD_VAR 0 3
31229: PPUSH
31230: LD_INT 10
31232: PPUSH
31233: CALL_OW 237
31237: GO 31217
31239: POP
31240: POP
// end ;
31241: GO 31190
31243: POP
31244: POP
// end ;
31245: LD_VAR 0 1
31249: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31250: LD_INT 0
31252: PPUSH
31253: PPUSH
31254: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31255: LD_ADDR_VAR 0 2
31259: PUSH
31260: LD_INT 22
31262: PUSH
31263: LD_OWVAR 2
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 21
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PPUSH
31286: CALL_OW 69
31290: PUSH
31291: FOR_IN
31292: IFFALSE 31333
// begin for j := 1 to 4 do
31294: LD_ADDR_VAR 0 3
31298: PUSH
31299: DOUBLE
31300: LD_INT 1
31302: DEC
31303: ST_TO_ADDR
31304: LD_INT 4
31306: PUSH
31307: FOR_TO
31308: IFFALSE 31329
// SetSkill ( i , j , 10 ) ;
31310: LD_VAR 0 2
31314: PPUSH
31315: LD_VAR 0 3
31319: PPUSH
31320: LD_INT 10
31322: PPUSH
31323: CALL_OW 237
31327: GO 31307
31329: POP
31330: POP
// end ;
31331: GO 31291
31333: POP
31334: POP
// end ;
31335: LD_VAR 0 1
31339: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31340: LD_INT 0
31342: PPUSH
// uc_side := your_side ;
31343: LD_ADDR_OWVAR 20
31347: PUSH
31348: LD_OWVAR 2
31352: ST_TO_ADDR
// uc_nation := nation ;
31353: LD_ADDR_OWVAR 21
31357: PUSH
31358: LD_VAR 0 1
31362: ST_TO_ADDR
// InitHc ;
31363: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31367: LD_INT 0
31369: PPUSH
31370: LD_VAR 0 2
31374: PPUSH
31375: LD_VAR 0 3
31379: PPUSH
31380: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31384: LD_VAR 0 4
31388: PPUSH
31389: LD_VAR 0 5
31393: PPUSH
31394: CALL_OW 428
31398: PUSH
31399: LD_INT 0
31401: EQUAL
31402: IFFALSE 31426
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31404: CALL_OW 44
31408: PPUSH
31409: LD_VAR 0 4
31413: PPUSH
31414: LD_VAR 0 5
31418: PPUSH
31419: LD_INT 1
31421: PPUSH
31422: CALL_OW 48
// end ;
31426: LD_VAR 0 6
31430: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31431: LD_INT 0
31433: PPUSH
31434: PPUSH
// uc_side := your_side ;
31435: LD_ADDR_OWVAR 20
31439: PUSH
31440: LD_OWVAR 2
31444: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31445: LD_VAR 0 1
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: LD_INT 2
31455: PUSH
31456: LD_INT 3
31458: PUSH
31459: LD_INT 4
31461: PUSH
31462: LD_INT 5
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: IN
31472: IFFALSE 31484
// uc_nation := nation_american else
31474: LD_ADDR_OWVAR 21
31478: PUSH
31479: LD_INT 1
31481: ST_TO_ADDR
31482: GO 31527
// if chassis in [ 11 , 12 , 13 , 14 ] then
31484: LD_VAR 0 1
31488: PUSH
31489: LD_INT 11
31491: PUSH
31492: LD_INT 12
31494: PUSH
31495: LD_INT 13
31497: PUSH
31498: LD_INT 14
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: IN
31507: IFFALSE 31519
// uc_nation := nation_arabian else
31509: LD_ADDR_OWVAR 21
31513: PUSH
31514: LD_INT 2
31516: ST_TO_ADDR
31517: GO 31527
// uc_nation := nation_russian ;
31519: LD_ADDR_OWVAR 21
31523: PUSH
31524: LD_INT 3
31526: ST_TO_ADDR
// vc_chassis := chassis ;
31527: LD_ADDR_OWVAR 37
31531: PUSH
31532: LD_VAR 0 1
31536: ST_TO_ADDR
// vc_engine := engine ;
31537: LD_ADDR_OWVAR 39
31541: PUSH
31542: LD_VAR 0 2
31546: ST_TO_ADDR
// vc_control := control ;
31547: LD_ADDR_OWVAR 38
31551: PUSH
31552: LD_VAR 0 3
31556: ST_TO_ADDR
// vc_weapon := weapon ;
31557: LD_ADDR_OWVAR 40
31561: PUSH
31562: LD_VAR 0 4
31566: ST_TO_ADDR
// un := CreateVehicle ;
31567: LD_ADDR_VAR 0 8
31571: PUSH
31572: CALL_OW 45
31576: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31577: LD_VAR 0 8
31581: PPUSH
31582: LD_INT 0
31584: PPUSH
31585: LD_INT 5
31587: PPUSH
31588: CALL_OW 12
31592: PPUSH
31593: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31597: LD_VAR 0 8
31601: PPUSH
31602: LD_VAR 0 5
31606: PPUSH
31607: LD_VAR 0 6
31611: PPUSH
31612: LD_INT 1
31614: PPUSH
31615: CALL_OW 48
// end ;
31619: LD_VAR 0 7
31623: RET
// export hInvincible ; every 1 do
31624: GO 31626
31626: DISABLE
// hInvincible := [ ] ;
31627: LD_ADDR_EXP 116
31631: PUSH
31632: EMPTY
31633: ST_TO_ADDR
31634: END
// every 10 do var i ;
31635: GO 31637
31637: DISABLE
31638: LD_INT 0
31640: PPUSH
// begin enable ;
31641: ENABLE
// if not hInvincible then
31642: LD_EXP 116
31646: NOT
31647: IFFALSE 31651
// exit ;
31649: GO 31695
// for i in hInvincible do
31651: LD_ADDR_VAR 0 1
31655: PUSH
31656: LD_EXP 116
31660: PUSH
31661: FOR_IN
31662: IFFALSE 31693
// if GetLives ( i ) < 1000 then
31664: LD_VAR 0 1
31668: PPUSH
31669: CALL_OW 256
31673: PUSH
31674: LD_INT 1000
31676: LESS
31677: IFFALSE 31691
// SetLives ( i , 1000 ) ;
31679: LD_VAR 0 1
31683: PPUSH
31684: LD_INT 1000
31686: PPUSH
31687: CALL_OW 234
31691: GO 31661
31693: POP
31694: POP
// end ;
31695: PPOPN 1
31697: END
// export function hHackInvincible ; var i ; begin
31698: LD_INT 0
31700: PPUSH
31701: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31702: LD_ADDR_VAR 0 2
31706: PUSH
31707: LD_INT 2
31709: PUSH
31710: LD_INT 21
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 21
31722: PUSH
31723: LD_INT 2
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: PPUSH
31735: CALL_OW 69
31739: PUSH
31740: FOR_IN
31741: IFFALSE 31802
// if IsSelected ( i ) then
31743: LD_VAR 0 2
31747: PPUSH
31748: CALL_OW 306
31752: IFFALSE 31800
// begin if i in hInvincible then
31754: LD_VAR 0 2
31758: PUSH
31759: LD_EXP 116
31763: IN
31764: IFFALSE 31784
// hInvincible := hInvincible diff i else
31766: LD_ADDR_EXP 116
31770: PUSH
31771: LD_EXP 116
31775: PUSH
31776: LD_VAR 0 2
31780: DIFF
31781: ST_TO_ADDR
31782: GO 31800
// hInvincible := hInvincible union i ;
31784: LD_ADDR_EXP 116
31788: PUSH
31789: LD_EXP 116
31793: PUSH
31794: LD_VAR 0 2
31798: UNION
31799: ST_TO_ADDR
// end ;
31800: GO 31740
31802: POP
31803: POP
// end ;
31804: LD_VAR 0 1
31808: RET
// export function hHackInvisible ; var i , j ; begin
31809: LD_INT 0
31811: PPUSH
31812: PPUSH
31813: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31814: LD_ADDR_VAR 0 2
31818: PUSH
31819: LD_INT 21
31821: PUSH
31822: LD_INT 1
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PPUSH
31829: CALL_OW 69
31833: PUSH
31834: FOR_IN
31835: IFFALSE 31859
// if IsSelected ( i ) then
31837: LD_VAR 0 2
31841: PPUSH
31842: CALL_OW 306
31846: IFFALSE 31857
// ComForceInvisible ( i ) ;
31848: LD_VAR 0 2
31852: PPUSH
31853: CALL_OW 496
31857: GO 31834
31859: POP
31860: POP
// end ;
31861: LD_VAR 0 1
31865: RET
// export function hHackChangeYourSide ; begin
31866: LD_INT 0
31868: PPUSH
// if your_side = 8 then
31869: LD_OWVAR 2
31873: PUSH
31874: LD_INT 8
31876: EQUAL
31877: IFFALSE 31889
// your_side := 0 else
31879: LD_ADDR_OWVAR 2
31883: PUSH
31884: LD_INT 0
31886: ST_TO_ADDR
31887: GO 31903
// your_side := your_side + 1 ;
31889: LD_ADDR_OWVAR 2
31893: PUSH
31894: LD_OWVAR 2
31898: PUSH
31899: LD_INT 1
31901: PLUS
31902: ST_TO_ADDR
// end ;
31903: LD_VAR 0 1
31907: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31908: LD_INT 0
31910: PPUSH
31911: PPUSH
31912: PPUSH
// for i in all_units do
31913: LD_ADDR_VAR 0 2
31917: PUSH
31918: LD_OWVAR 3
31922: PUSH
31923: FOR_IN
31924: IFFALSE 32002
// if IsSelected ( i ) then
31926: LD_VAR 0 2
31930: PPUSH
31931: CALL_OW 306
31935: IFFALSE 32000
// begin j := GetSide ( i ) ;
31937: LD_ADDR_VAR 0 3
31941: PUSH
31942: LD_VAR 0 2
31946: PPUSH
31947: CALL_OW 255
31951: ST_TO_ADDR
// if j = 8 then
31952: LD_VAR 0 3
31956: PUSH
31957: LD_INT 8
31959: EQUAL
31960: IFFALSE 31972
// j := 0 else
31962: LD_ADDR_VAR 0 3
31966: PUSH
31967: LD_INT 0
31969: ST_TO_ADDR
31970: GO 31986
// j := j + 1 ;
31972: LD_ADDR_VAR 0 3
31976: PUSH
31977: LD_VAR 0 3
31981: PUSH
31982: LD_INT 1
31984: PLUS
31985: ST_TO_ADDR
// SetSide ( i , j ) ;
31986: LD_VAR 0 2
31990: PPUSH
31991: LD_VAR 0 3
31995: PPUSH
31996: CALL_OW 235
// end ;
32000: GO 31923
32002: POP
32003: POP
// end ;
32004: LD_VAR 0 1
32008: RET
// export function hHackFog ; begin
32009: LD_INT 0
32011: PPUSH
// FogOff ( true ) ;
32012: LD_INT 1
32014: PPUSH
32015: CALL_OW 344
// end ;
32019: LD_VAR 0 1
32023: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32024: LD_INT 0
32026: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32027: LD_VAR 0 1
32031: PPUSH
32032: LD_VAR 0 2
32036: PPUSH
32037: LD_VAR 0 3
32041: PPUSH
32042: LD_INT 1
32044: PPUSH
32045: LD_INT 1
32047: PPUSH
32048: CALL_OW 483
// CenterOnXY ( x , y ) ;
32052: LD_VAR 0 2
32056: PPUSH
32057: LD_VAR 0 3
32061: PPUSH
32062: CALL_OW 84
// end ; end_of_file
32066: LD_VAR 0 4
32070: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32071: LD_INT 0
32073: PPUSH
32074: PPUSH
32075: PPUSH
32076: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32077: LD_VAR 0 1
32081: PPUSH
32082: CALL_OW 264
32086: PUSH
32087: LD_EXP 47
32091: EQUAL
32092: IFFALSE 32164
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32094: LD_INT 68
32096: PPUSH
32097: LD_VAR 0 1
32101: PPUSH
32102: CALL_OW 255
32106: PPUSH
32107: CALL_OW 321
32111: PUSH
32112: LD_INT 2
32114: EQUAL
32115: IFFALSE 32127
// eff := 70 else
32117: LD_ADDR_VAR 0 4
32121: PUSH
32122: LD_INT 70
32124: ST_TO_ADDR
32125: GO 32135
// eff := 30 ;
32127: LD_ADDR_VAR 0 4
32131: PUSH
32132: LD_INT 30
32134: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32135: LD_VAR 0 1
32139: PPUSH
32140: CALL_OW 250
32144: PPUSH
32145: LD_VAR 0 1
32149: PPUSH
32150: CALL_OW 251
32154: PPUSH
32155: LD_VAR 0 4
32159: PPUSH
32160: CALL_OW 495
// end ; end ;
32164: LD_VAR 0 2
32168: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32169: LD_INT 0
32171: PPUSH
// end ;
32172: LD_VAR 0 4
32176: RET
// export function SOS_Command ( cmd ) ; begin
32177: LD_INT 0
32179: PPUSH
// end ;
32180: LD_VAR 0 2
32184: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32185: LD_INT 0
32187: PPUSH
// if cmd = 121 then
32188: LD_VAR 0 1
32192: PUSH
32193: LD_INT 121
32195: EQUAL
32196: IFFALSE 32198
// end ;
32198: LD_VAR 0 6
32202: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32203: LD_INT 0
32205: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32206: LD_VAR 0 1
32210: PUSH
32211: LD_INT 250
32213: EQUAL
32214: PUSH
32215: LD_VAR 0 2
32219: PPUSH
32220: CALL_OW 264
32224: PUSH
32225: LD_EXP 50
32229: EQUAL
32230: AND
32231: IFFALSE 32252
// MinerPlaceMine ( unit , x , y ) ;
32233: LD_VAR 0 2
32237: PPUSH
32238: LD_VAR 0 4
32242: PPUSH
32243: LD_VAR 0 5
32247: PPUSH
32248: CALL 34601 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32252: LD_VAR 0 1
32256: PUSH
32257: LD_INT 251
32259: EQUAL
32260: PUSH
32261: LD_VAR 0 2
32265: PPUSH
32266: CALL_OW 264
32270: PUSH
32271: LD_EXP 50
32275: EQUAL
32276: AND
32277: IFFALSE 32298
// MinerDetonateMine ( unit , x , y ) ;
32279: LD_VAR 0 2
32283: PPUSH
32284: LD_VAR 0 4
32288: PPUSH
32289: LD_VAR 0 5
32293: PPUSH
32294: CALL 34878 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32298: LD_VAR 0 1
32302: PUSH
32303: LD_INT 252
32305: EQUAL
32306: PUSH
32307: LD_VAR 0 2
32311: PPUSH
32312: CALL_OW 264
32316: PUSH
32317: LD_EXP 50
32321: EQUAL
32322: AND
32323: IFFALSE 32344
// MinerCreateMinefield ( unit , x , y ) ;
32325: LD_VAR 0 2
32329: PPUSH
32330: LD_VAR 0 4
32334: PPUSH
32335: LD_VAR 0 5
32339: PPUSH
32340: CALL 35295 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32344: LD_VAR 0 1
32348: PUSH
32349: LD_INT 253
32351: EQUAL
32352: PUSH
32353: LD_VAR 0 2
32357: PPUSH
32358: CALL_OW 257
32362: PUSH
32363: LD_INT 5
32365: EQUAL
32366: AND
32367: IFFALSE 32388
// ComBinocular ( unit , x , y ) ;
32369: LD_VAR 0 2
32373: PPUSH
32374: LD_VAR 0 4
32378: PPUSH
32379: LD_VAR 0 5
32383: PPUSH
32384: CALL 35666 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32388: LD_VAR 0 1
32392: PUSH
32393: LD_INT 254
32395: EQUAL
32396: PUSH
32397: LD_VAR 0 2
32401: PPUSH
32402: CALL_OW 264
32406: PUSH
32407: LD_EXP 45
32411: EQUAL
32412: AND
32413: PUSH
32414: LD_VAR 0 3
32418: PPUSH
32419: CALL_OW 263
32423: PUSH
32424: LD_INT 3
32426: EQUAL
32427: AND
32428: IFFALSE 32444
// HackDestroyVehicle ( unit , selectedUnit ) ;
32430: LD_VAR 0 2
32434: PPUSH
32435: LD_VAR 0 3
32439: PPUSH
32440: CALL 33961 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32444: LD_VAR 0 1
32448: PUSH
32449: LD_INT 255
32451: EQUAL
32452: PUSH
32453: LD_VAR 0 2
32457: PPUSH
32458: CALL_OW 264
32462: PUSH
32463: LD_INT 14
32465: PUSH
32466: LD_INT 53
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: IN
32473: AND
32474: PUSH
32475: LD_VAR 0 4
32479: PPUSH
32480: LD_VAR 0 5
32484: PPUSH
32485: CALL_OW 488
32489: AND
32490: IFFALSE 32514
// CutTreeXYR ( unit , x , y , 12 ) ;
32492: LD_VAR 0 2
32496: PPUSH
32497: LD_VAR 0 4
32501: PPUSH
32502: LD_VAR 0 5
32506: PPUSH
32507: LD_INT 12
32509: PPUSH
32510: CALL 32527 0 4
// end ;
32514: LD_VAR 0 6
32518: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
32519: LD_INT 0
32521: PPUSH
// end ;
32522: LD_VAR 0 4
32526: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32527: LD_INT 0
32529: PPUSH
32530: PPUSH
32531: PPUSH
32532: PPUSH
32533: PPUSH
32534: PPUSH
32535: PPUSH
32536: PPUSH
32537: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32538: LD_VAR 0 1
32542: NOT
32543: PUSH
32544: LD_VAR 0 2
32548: PPUSH
32549: LD_VAR 0 3
32553: PPUSH
32554: CALL_OW 488
32558: NOT
32559: OR
32560: PUSH
32561: LD_VAR 0 4
32565: NOT
32566: OR
32567: IFFALSE 32571
// exit ;
32569: GO 32911
// list := [ ] ;
32571: LD_ADDR_VAR 0 13
32575: PUSH
32576: EMPTY
32577: ST_TO_ADDR
// if x - r < 0 then
32578: LD_VAR 0 2
32582: PUSH
32583: LD_VAR 0 4
32587: MINUS
32588: PUSH
32589: LD_INT 0
32591: LESS
32592: IFFALSE 32604
// min_x := 0 else
32594: LD_ADDR_VAR 0 7
32598: PUSH
32599: LD_INT 0
32601: ST_TO_ADDR
32602: GO 32620
// min_x := x - r ;
32604: LD_ADDR_VAR 0 7
32608: PUSH
32609: LD_VAR 0 2
32613: PUSH
32614: LD_VAR 0 4
32618: MINUS
32619: ST_TO_ADDR
// if y - r < 0 then
32620: LD_VAR 0 3
32624: PUSH
32625: LD_VAR 0 4
32629: MINUS
32630: PUSH
32631: LD_INT 0
32633: LESS
32634: IFFALSE 32646
// min_y := 0 else
32636: LD_ADDR_VAR 0 8
32640: PUSH
32641: LD_INT 0
32643: ST_TO_ADDR
32644: GO 32662
// min_y := y - r ;
32646: LD_ADDR_VAR 0 8
32650: PUSH
32651: LD_VAR 0 3
32655: PUSH
32656: LD_VAR 0 4
32660: MINUS
32661: ST_TO_ADDR
// max_x := x + r ;
32662: LD_ADDR_VAR 0 9
32666: PUSH
32667: LD_VAR 0 2
32671: PUSH
32672: LD_VAR 0 4
32676: PLUS
32677: ST_TO_ADDR
// max_y := y + r ;
32678: LD_ADDR_VAR 0 10
32682: PUSH
32683: LD_VAR 0 3
32687: PUSH
32688: LD_VAR 0 4
32692: PLUS
32693: ST_TO_ADDR
// for _x = min_x to max_x do
32694: LD_ADDR_VAR 0 11
32698: PUSH
32699: DOUBLE
32700: LD_VAR 0 7
32704: DEC
32705: ST_TO_ADDR
32706: LD_VAR 0 9
32710: PUSH
32711: FOR_TO
32712: IFFALSE 32829
// for _y = min_y to max_y do
32714: LD_ADDR_VAR 0 12
32718: PUSH
32719: DOUBLE
32720: LD_VAR 0 8
32724: DEC
32725: ST_TO_ADDR
32726: LD_VAR 0 10
32730: PUSH
32731: FOR_TO
32732: IFFALSE 32825
// begin if not ValidHex ( _x , _y ) then
32734: LD_VAR 0 11
32738: PPUSH
32739: LD_VAR 0 12
32743: PPUSH
32744: CALL_OW 488
32748: NOT
32749: IFFALSE 32753
// continue ;
32751: GO 32731
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32753: LD_VAR 0 11
32757: PPUSH
32758: LD_VAR 0 12
32762: PPUSH
32763: CALL_OW 351
32767: PUSH
32768: LD_VAR 0 11
32772: PPUSH
32773: LD_VAR 0 12
32777: PPUSH
32778: CALL_OW 554
32782: AND
32783: IFFALSE 32823
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32785: LD_ADDR_VAR 0 13
32789: PUSH
32790: LD_VAR 0 13
32794: PPUSH
32795: LD_VAR 0 13
32799: PUSH
32800: LD_INT 1
32802: PLUS
32803: PPUSH
32804: LD_VAR 0 11
32808: PUSH
32809: LD_VAR 0 12
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PPUSH
32818: CALL_OW 2
32822: ST_TO_ADDR
// end ;
32823: GO 32731
32825: POP
32826: POP
32827: GO 32711
32829: POP
32830: POP
// if not list then
32831: LD_VAR 0 13
32835: NOT
32836: IFFALSE 32840
// exit ;
32838: GO 32911
// for i in list do
32840: LD_ADDR_VAR 0 6
32844: PUSH
32845: LD_VAR 0 13
32849: PUSH
32850: FOR_IN
32851: IFFALSE 32909
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32853: LD_VAR 0 1
32857: PPUSH
32858: LD_STRING M
32860: PUSH
32861: LD_VAR 0 6
32865: PUSH
32866: LD_INT 1
32868: ARRAY
32869: PUSH
32870: LD_VAR 0 6
32874: PUSH
32875: LD_INT 2
32877: ARRAY
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: PUSH
32900: EMPTY
32901: LIST
32902: PPUSH
32903: CALL_OW 447
32907: GO 32850
32909: POP
32910: POP
// end ;
32911: LD_VAR 0 5
32915: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32916: LD_EXP 119
32920: NOT
32921: IFFALSE 32971
32923: GO 32925
32925: DISABLE
// begin initHack := true ;
32926: LD_ADDR_EXP 119
32930: PUSH
32931: LD_INT 1
32933: ST_TO_ADDR
// hackTanks := [ ] ;
32934: LD_ADDR_EXP 120
32938: PUSH
32939: EMPTY
32940: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32941: LD_ADDR_EXP 121
32945: PUSH
32946: EMPTY
32947: ST_TO_ADDR
// hackLimit := 3 ;
32948: LD_ADDR_EXP 122
32952: PUSH
32953: LD_INT 3
32955: ST_TO_ADDR
// hackDist := 12 ;
32956: LD_ADDR_EXP 123
32960: PUSH
32961: LD_INT 12
32963: ST_TO_ADDR
// hackCounter := [ ] ;
32964: LD_ADDR_EXP 124
32968: PUSH
32969: EMPTY
32970: ST_TO_ADDR
// end ;
32971: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32972: LD_EXP 119
32976: PUSH
32977: LD_INT 34
32979: PUSH
32980: LD_EXP 45
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PPUSH
32989: CALL_OW 69
32993: AND
32994: IFFALSE 33249
32996: GO 32998
32998: DISABLE
32999: LD_INT 0
33001: PPUSH
33002: PPUSH
// begin enable ;
33003: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33004: LD_ADDR_VAR 0 1
33008: PUSH
33009: LD_INT 34
33011: PUSH
33012: LD_EXP 45
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PPUSH
33021: CALL_OW 69
33025: PUSH
33026: FOR_IN
33027: IFFALSE 33247
// begin if not i in hackTanks then
33029: LD_VAR 0 1
33033: PUSH
33034: LD_EXP 120
33038: IN
33039: NOT
33040: IFFALSE 33123
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33042: LD_ADDR_EXP 120
33046: PUSH
33047: LD_EXP 120
33051: PPUSH
33052: LD_EXP 120
33056: PUSH
33057: LD_INT 1
33059: PLUS
33060: PPUSH
33061: LD_VAR 0 1
33065: PPUSH
33066: CALL_OW 1
33070: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33071: LD_ADDR_EXP 121
33075: PUSH
33076: LD_EXP 121
33080: PPUSH
33081: LD_EXP 121
33085: PUSH
33086: LD_INT 1
33088: PLUS
33089: PPUSH
33090: EMPTY
33091: PPUSH
33092: CALL_OW 1
33096: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33097: LD_ADDR_EXP 124
33101: PUSH
33102: LD_EXP 124
33106: PPUSH
33107: LD_EXP 124
33111: PUSH
33112: LD_INT 1
33114: PLUS
33115: PPUSH
33116: EMPTY
33117: PPUSH
33118: CALL_OW 1
33122: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33123: LD_VAR 0 1
33127: PPUSH
33128: CALL_OW 302
33132: NOT
33133: IFFALSE 33146
// begin HackUnlinkAll ( i ) ;
33135: LD_VAR 0 1
33139: PPUSH
33140: CALL 33252 0 1
// continue ;
33144: GO 33026
// end ; HackCheckCapturedStatus ( i ) ;
33146: LD_VAR 0 1
33150: PPUSH
33151: CALL 33695 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33155: LD_ADDR_VAR 0 2
33159: PUSH
33160: LD_INT 81
33162: PUSH
33163: LD_VAR 0 1
33167: PPUSH
33168: CALL_OW 255
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 33
33179: PUSH
33180: LD_INT 3
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 91
33189: PUSH
33190: LD_VAR 0 1
33194: PUSH
33195: LD_EXP 123
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 50
33207: PUSH
33208: EMPTY
33209: LIST
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: PPUSH
33217: CALL_OW 69
33221: ST_TO_ADDR
// if not tmp then
33222: LD_VAR 0 2
33226: NOT
33227: IFFALSE 33231
// continue ;
33229: GO 33026
// HackLink ( i , tmp ) ;
33231: LD_VAR 0 1
33235: PPUSH
33236: LD_VAR 0 2
33240: PPUSH
33241: CALL 33388 0 2
// end ;
33245: GO 33026
33247: POP
33248: POP
// end ;
33249: PPOPN 2
33251: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33252: LD_INT 0
33254: PPUSH
33255: PPUSH
33256: PPUSH
// if not hack in hackTanks then
33257: LD_VAR 0 1
33261: PUSH
33262: LD_EXP 120
33266: IN
33267: NOT
33268: IFFALSE 33272
// exit ;
33270: GO 33383
// index := GetElementIndex ( hackTanks , hack ) ;
33272: LD_ADDR_VAR 0 4
33276: PUSH
33277: LD_EXP 120
33281: PPUSH
33282: LD_VAR 0 1
33286: PPUSH
33287: CALL 40857 0 2
33291: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33292: LD_EXP 121
33296: PUSH
33297: LD_VAR 0 4
33301: ARRAY
33302: IFFALSE 33383
// begin for i in hackTanksCaptured [ index ] do
33304: LD_ADDR_VAR 0 3
33308: PUSH
33309: LD_EXP 121
33313: PUSH
33314: LD_VAR 0 4
33318: ARRAY
33319: PUSH
33320: FOR_IN
33321: IFFALSE 33347
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33323: LD_VAR 0 3
33327: PUSH
33328: LD_INT 1
33330: ARRAY
33331: PPUSH
33332: LD_VAR 0 3
33336: PUSH
33337: LD_INT 2
33339: ARRAY
33340: PPUSH
33341: CALL_OW 235
33345: GO 33320
33347: POP
33348: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33349: LD_ADDR_EXP 121
33353: PUSH
33354: LD_EXP 121
33358: PPUSH
33359: LD_VAR 0 4
33363: PPUSH
33364: EMPTY
33365: PPUSH
33366: CALL_OW 1
33370: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33371: LD_VAR 0 1
33375: PPUSH
33376: LD_INT 0
33378: PPUSH
33379: CALL_OW 505
// end ; end ;
33383: LD_VAR 0 2
33387: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33388: LD_INT 0
33390: PPUSH
33391: PPUSH
33392: PPUSH
// if not hack in hackTanks or not vehicles then
33393: LD_VAR 0 1
33397: PUSH
33398: LD_EXP 120
33402: IN
33403: NOT
33404: PUSH
33405: LD_VAR 0 2
33409: NOT
33410: OR
33411: IFFALSE 33415
// exit ;
33413: GO 33690
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33415: LD_ADDR_VAR 0 2
33419: PUSH
33420: LD_VAR 0 1
33424: PPUSH
33425: LD_VAR 0 2
33429: PPUSH
33430: LD_INT 1
33432: PPUSH
33433: LD_INT 1
33435: PPUSH
33436: CALL 41507 0 4
33440: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33441: LD_ADDR_VAR 0 5
33445: PUSH
33446: LD_EXP 120
33450: PPUSH
33451: LD_VAR 0 1
33455: PPUSH
33456: CALL 40857 0 2
33460: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33461: LD_EXP 121
33465: PUSH
33466: LD_VAR 0 5
33470: ARRAY
33471: PUSH
33472: LD_EXP 122
33476: LESS
33477: IFFALSE 33666
// begin for i := 1 to vehicles do
33479: LD_ADDR_VAR 0 4
33483: PUSH
33484: DOUBLE
33485: LD_INT 1
33487: DEC
33488: ST_TO_ADDR
33489: LD_VAR 0 2
33493: PUSH
33494: FOR_TO
33495: IFFALSE 33664
// begin if hackTanksCaptured [ index ] = hackLimit then
33497: LD_EXP 121
33501: PUSH
33502: LD_VAR 0 5
33506: ARRAY
33507: PUSH
33508: LD_EXP 122
33512: EQUAL
33513: IFFALSE 33517
// break ;
33515: GO 33664
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33517: LD_ADDR_EXP 124
33521: PUSH
33522: LD_EXP 124
33526: PPUSH
33527: LD_VAR 0 5
33531: PPUSH
33532: LD_EXP 124
33536: PUSH
33537: LD_VAR 0 5
33541: ARRAY
33542: PUSH
33543: LD_INT 1
33545: PLUS
33546: PPUSH
33547: CALL_OW 1
33551: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33552: LD_ADDR_EXP 121
33556: PUSH
33557: LD_EXP 121
33561: PPUSH
33562: LD_VAR 0 5
33566: PUSH
33567: LD_EXP 121
33571: PUSH
33572: LD_VAR 0 5
33576: ARRAY
33577: PUSH
33578: LD_INT 1
33580: PLUS
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PPUSH
33586: LD_VAR 0 2
33590: PUSH
33591: LD_VAR 0 4
33595: ARRAY
33596: PUSH
33597: LD_VAR 0 2
33601: PUSH
33602: LD_VAR 0 4
33606: ARRAY
33607: PPUSH
33608: CALL_OW 255
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PPUSH
33617: CALL 41072 0 3
33621: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33622: LD_VAR 0 2
33626: PUSH
33627: LD_VAR 0 4
33631: ARRAY
33632: PPUSH
33633: LD_VAR 0 1
33637: PPUSH
33638: CALL_OW 255
33642: PPUSH
33643: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33647: LD_VAR 0 2
33651: PUSH
33652: LD_VAR 0 4
33656: ARRAY
33657: PPUSH
33658: CALL_OW 141
// end ;
33662: GO 33494
33664: POP
33665: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33666: LD_VAR 0 1
33670: PPUSH
33671: LD_EXP 121
33675: PUSH
33676: LD_VAR 0 5
33680: ARRAY
33681: PUSH
33682: LD_INT 0
33684: PLUS
33685: PPUSH
33686: CALL_OW 505
// end ;
33690: LD_VAR 0 3
33694: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33695: LD_INT 0
33697: PPUSH
33698: PPUSH
33699: PPUSH
33700: PPUSH
// if not hack in hackTanks then
33701: LD_VAR 0 1
33705: PUSH
33706: LD_EXP 120
33710: IN
33711: NOT
33712: IFFALSE 33716
// exit ;
33714: GO 33956
// index := GetElementIndex ( hackTanks , hack ) ;
33716: LD_ADDR_VAR 0 4
33720: PUSH
33721: LD_EXP 120
33725: PPUSH
33726: LD_VAR 0 1
33730: PPUSH
33731: CALL 40857 0 2
33735: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33736: LD_ADDR_VAR 0 3
33740: PUSH
33741: DOUBLE
33742: LD_EXP 121
33746: PUSH
33747: LD_VAR 0 4
33751: ARRAY
33752: INC
33753: ST_TO_ADDR
33754: LD_INT 1
33756: PUSH
33757: FOR_DOWNTO
33758: IFFALSE 33930
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33760: LD_ADDR_VAR 0 5
33764: PUSH
33765: LD_EXP 121
33769: PUSH
33770: LD_VAR 0 4
33774: ARRAY
33775: PUSH
33776: LD_VAR 0 3
33780: ARRAY
33781: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33782: LD_VAR 0 5
33786: PUSH
33787: LD_INT 1
33789: ARRAY
33790: PPUSH
33791: CALL_OW 302
33795: NOT
33796: PUSH
33797: LD_VAR 0 5
33801: PUSH
33802: LD_INT 1
33804: ARRAY
33805: PPUSH
33806: CALL_OW 255
33810: PUSH
33811: LD_VAR 0 1
33815: PPUSH
33816: CALL_OW 255
33820: NONEQUAL
33821: OR
33822: IFFALSE 33928
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33824: LD_VAR 0 5
33828: PUSH
33829: LD_INT 1
33831: ARRAY
33832: PPUSH
33833: CALL_OW 305
33837: PUSH
33838: LD_VAR 0 5
33842: PUSH
33843: LD_INT 1
33845: ARRAY
33846: PPUSH
33847: CALL_OW 255
33851: PUSH
33852: LD_VAR 0 1
33856: PPUSH
33857: CALL_OW 255
33861: EQUAL
33862: AND
33863: IFFALSE 33887
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33865: LD_VAR 0 5
33869: PUSH
33870: LD_INT 1
33872: ARRAY
33873: PPUSH
33874: LD_VAR 0 5
33878: PUSH
33879: LD_INT 2
33881: ARRAY
33882: PPUSH
33883: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33887: LD_ADDR_EXP 121
33891: PUSH
33892: LD_EXP 121
33896: PPUSH
33897: LD_VAR 0 4
33901: PPUSH
33902: LD_EXP 121
33906: PUSH
33907: LD_VAR 0 4
33911: ARRAY
33912: PPUSH
33913: LD_VAR 0 3
33917: PPUSH
33918: CALL_OW 3
33922: PPUSH
33923: CALL_OW 1
33927: ST_TO_ADDR
// end ; end ;
33928: GO 33757
33930: POP
33931: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33932: LD_VAR 0 1
33936: PPUSH
33937: LD_EXP 121
33941: PUSH
33942: LD_VAR 0 4
33946: ARRAY
33947: PUSH
33948: LD_INT 0
33950: PLUS
33951: PPUSH
33952: CALL_OW 505
// end ;
33956: LD_VAR 0 2
33960: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33961: LD_INT 0
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
// if not hack in hackTanks then
33967: LD_VAR 0 1
33971: PUSH
33972: LD_EXP 120
33976: IN
33977: NOT
33978: IFFALSE 33982
// exit ;
33980: GO 34067
// index := GetElementIndex ( hackTanks , hack ) ;
33982: LD_ADDR_VAR 0 5
33986: PUSH
33987: LD_EXP 120
33991: PPUSH
33992: LD_VAR 0 1
33996: PPUSH
33997: CALL 40857 0 2
34001: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34002: LD_ADDR_VAR 0 4
34006: PUSH
34007: DOUBLE
34008: LD_INT 1
34010: DEC
34011: ST_TO_ADDR
34012: LD_EXP 121
34016: PUSH
34017: LD_VAR 0 5
34021: ARRAY
34022: PUSH
34023: FOR_TO
34024: IFFALSE 34065
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34026: LD_EXP 121
34030: PUSH
34031: LD_VAR 0 5
34035: ARRAY
34036: PUSH
34037: LD_VAR 0 4
34041: ARRAY
34042: PUSH
34043: LD_INT 1
34045: ARRAY
34046: PUSH
34047: LD_VAR 0 2
34051: EQUAL
34052: IFFALSE 34063
// KillUnit ( vehicle ) ;
34054: LD_VAR 0 2
34058: PPUSH
34059: CALL_OW 66
34063: GO 34023
34065: POP
34066: POP
// end ;
34067: LD_VAR 0 3
34071: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34072: LD_EXP 125
34076: NOT
34077: IFFALSE 34112
34079: GO 34081
34081: DISABLE
// begin initMiner := true ;
34082: LD_ADDR_EXP 125
34086: PUSH
34087: LD_INT 1
34089: ST_TO_ADDR
// minersList := [ ] ;
34090: LD_ADDR_EXP 126
34094: PUSH
34095: EMPTY
34096: ST_TO_ADDR
// minerMinesList := [ ] ;
34097: LD_ADDR_EXP 127
34101: PUSH
34102: EMPTY
34103: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34104: LD_ADDR_EXP 128
34108: PUSH
34109: LD_INT 5
34111: ST_TO_ADDR
// end ;
34112: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34113: LD_EXP 125
34117: PUSH
34118: LD_INT 34
34120: PUSH
34121: LD_EXP 50
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PPUSH
34130: CALL_OW 69
34134: AND
34135: IFFALSE 34598
34137: GO 34139
34139: DISABLE
34140: LD_INT 0
34142: PPUSH
34143: PPUSH
34144: PPUSH
34145: PPUSH
// begin enable ;
34146: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34147: LD_ADDR_VAR 0 1
34151: PUSH
34152: LD_INT 34
34154: PUSH
34155: LD_EXP 50
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PPUSH
34164: CALL_OW 69
34168: PUSH
34169: FOR_IN
34170: IFFALSE 34242
// begin if not i in minersList then
34172: LD_VAR 0 1
34176: PUSH
34177: LD_EXP 126
34181: IN
34182: NOT
34183: IFFALSE 34240
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34185: LD_ADDR_EXP 126
34189: PUSH
34190: LD_EXP 126
34194: PPUSH
34195: LD_EXP 126
34199: PUSH
34200: LD_INT 1
34202: PLUS
34203: PPUSH
34204: LD_VAR 0 1
34208: PPUSH
34209: CALL_OW 1
34213: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34214: LD_ADDR_EXP 127
34218: PUSH
34219: LD_EXP 127
34223: PPUSH
34224: LD_EXP 127
34228: PUSH
34229: LD_INT 1
34231: PLUS
34232: PPUSH
34233: EMPTY
34234: PPUSH
34235: CALL_OW 1
34239: ST_TO_ADDR
// end end ;
34240: GO 34169
34242: POP
34243: POP
// for i := minerMinesList downto 1 do
34244: LD_ADDR_VAR 0 1
34248: PUSH
34249: DOUBLE
34250: LD_EXP 127
34254: INC
34255: ST_TO_ADDR
34256: LD_INT 1
34258: PUSH
34259: FOR_DOWNTO
34260: IFFALSE 34596
// begin if IsLive ( minersList [ i ] ) then
34262: LD_EXP 126
34266: PUSH
34267: LD_VAR 0 1
34271: ARRAY
34272: PPUSH
34273: CALL_OW 300
34277: IFFALSE 34305
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34279: LD_EXP 126
34283: PUSH
34284: LD_VAR 0 1
34288: ARRAY
34289: PPUSH
34290: LD_EXP 127
34294: PUSH
34295: LD_VAR 0 1
34299: ARRAY
34300: PPUSH
34301: CALL_OW 505
// if not minerMinesList [ i ] then
34305: LD_EXP 127
34309: PUSH
34310: LD_VAR 0 1
34314: ARRAY
34315: NOT
34316: IFFALSE 34320
// continue ;
34318: GO 34259
// for j := minerMinesList [ i ] downto 1 do
34320: LD_ADDR_VAR 0 2
34324: PUSH
34325: DOUBLE
34326: LD_EXP 127
34330: PUSH
34331: LD_VAR 0 1
34335: ARRAY
34336: INC
34337: ST_TO_ADDR
34338: LD_INT 1
34340: PUSH
34341: FOR_DOWNTO
34342: IFFALSE 34592
// begin side := GetSide ( minersList [ i ] ) ;
34344: LD_ADDR_VAR 0 3
34348: PUSH
34349: LD_EXP 126
34353: PUSH
34354: LD_VAR 0 1
34358: ARRAY
34359: PPUSH
34360: CALL_OW 255
34364: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34365: LD_ADDR_VAR 0 4
34369: PUSH
34370: LD_EXP 127
34374: PUSH
34375: LD_VAR 0 1
34379: ARRAY
34380: PUSH
34381: LD_VAR 0 2
34385: ARRAY
34386: PUSH
34387: LD_INT 1
34389: ARRAY
34390: PPUSH
34391: LD_EXP 127
34395: PUSH
34396: LD_VAR 0 1
34400: ARRAY
34401: PUSH
34402: LD_VAR 0 2
34406: ARRAY
34407: PUSH
34408: LD_INT 2
34410: ARRAY
34411: PPUSH
34412: CALL_OW 428
34416: ST_TO_ADDR
// if not tmp then
34417: LD_VAR 0 4
34421: NOT
34422: IFFALSE 34426
// continue ;
34424: GO 34341
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34426: LD_VAR 0 4
34430: PUSH
34431: LD_INT 81
34433: PUSH
34434: LD_VAR 0 3
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PPUSH
34443: CALL_OW 69
34447: IN
34448: PUSH
34449: LD_EXP 127
34453: PUSH
34454: LD_VAR 0 1
34458: ARRAY
34459: PUSH
34460: LD_VAR 0 2
34464: ARRAY
34465: PUSH
34466: LD_INT 1
34468: ARRAY
34469: PPUSH
34470: LD_EXP 127
34474: PUSH
34475: LD_VAR 0 1
34479: ARRAY
34480: PUSH
34481: LD_VAR 0 2
34485: ARRAY
34486: PUSH
34487: LD_INT 2
34489: ARRAY
34490: PPUSH
34491: CALL_OW 458
34495: AND
34496: IFFALSE 34590
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34498: LD_EXP 127
34502: PUSH
34503: LD_VAR 0 1
34507: ARRAY
34508: PUSH
34509: LD_VAR 0 2
34513: ARRAY
34514: PUSH
34515: LD_INT 1
34517: ARRAY
34518: PPUSH
34519: LD_EXP 127
34523: PUSH
34524: LD_VAR 0 1
34528: ARRAY
34529: PUSH
34530: LD_VAR 0 2
34534: ARRAY
34535: PUSH
34536: LD_INT 2
34538: ARRAY
34539: PPUSH
34540: LD_VAR 0 3
34544: PPUSH
34545: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34549: LD_ADDR_EXP 127
34553: PUSH
34554: LD_EXP 127
34558: PPUSH
34559: LD_VAR 0 1
34563: PPUSH
34564: LD_EXP 127
34568: PUSH
34569: LD_VAR 0 1
34573: ARRAY
34574: PPUSH
34575: LD_VAR 0 2
34579: PPUSH
34580: CALL_OW 3
34584: PPUSH
34585: CALL_OW 1
34589: ST_TO_ADDR
// end ; end ;
34590: GO 34341
34592: POP
34593: POP
// end ;
34594: GO 34259
34596: POP
34597: POP
// end ;
34598: PPOPN 4
34600: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34601: LD_INT 0
34603: PPUSH
34604: PPUSH
// result := false ;
34605: LD_ADDR_VAR 0 4
34609: PUSH
34610: LD_INT 0
34612: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34613: LD_VAR 0 1
34617: PPUSH
34618: CALL_OW 264
34622: PUSH
34623: LD_EXP 50
34627: EQUAL
34628: NOT
34629: IFFALSE 34633
// exit ;
34631: GO 34873
// index := GetElementIndex ( minersList , unit ) ;
34633: LD_ADDR_VAR 0 5
34637: PUSH
34638: LD_EXP 126
34642: PPUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL 40857 0 2
34652: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34653: LD_EXP 127
34657: PUSH
34658: LD_VAR 0 5
34662: ARRAY
34663: PUSH
34664: LD_EXP 128
34668: GREATEREQUAL
34669: IFFALSE 34673
// exit ;
34671: GO 34873
// ComMoveXY ( unit , x , y ) ;
34673: LD_VAR 0 1
34677: PPUSH
34678: LD_VAR 0 2
34682: PPUSH
34683: LD_VAR 0 3
34687: PPUSH
34688: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34692: LD_INT 35
34694: PPUSH
34695: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34699: LD_VAR 0 1
34703: PPUSH
34704: LD_VAR 0 2
34708: PPUSH
34709: LD_VAR 0 3
34713: PPUSH
34714: CALL 71630 0 3
34718: NOT
34719: PUSH
34720: LD_VAR 0 1
34724: PPUSH
34725: CALL_OW 314
34729: AND
34730: IFFALSE 34734
// exit ;
34732: GO 34873
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34734: LD_VAR 0 2
34738: PPUSH
34739: LD_VAR 0 3
34743: PPUSH
34744: CALL_OW 428
34748: PUSH
34749: LD_VAR 0 1
34753: EQUAL
34754: PUSH
34755: LD_VAR 0 1
34759: PPUSH
34760: CALL_OW 314
34764: NOT
34765: AND
34766: IFFALSE 34692
// PlaySoundXY ( x , y , PlantMine ) ;
34768: LD_VAR 0 2
34772: PPUSH
34773: LD_VAR 0 3
34777: PPUSH
34778: LD_STRING PlantMine
34780: PPUSH
34781: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34785: LD_VAR 0 2
34789: PPUSH
34790: LD_VAR 0 3
34794: PPUSH
34795: LD_VAR 0 1
34799: PPUSH
34800: CALL_OW 255
34804: PPUSH
34805: LD_INT 0
34807: PPUSH
34808: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34812: LD_ADDR_EXP 127
34816: PUSH
34817: LD_EXP 127
34821: PPUSH
34822: LD_VAR 0 5
34826: PUSH
34827: LD_EXP 127
34831: PUSH
34832: LD_VAR 0 5
34836: ARRAY
34837: PUSH
34838: LD_INT 1
34840: PLUS
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PPUSH
34846: LD_VAR 0 2
34850: PUSH
34851: LD_VAR 0 3
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PPUSH
34860: CALL 41072 0 3
34864: ST_TO_ADDR
// result := true ;
34865: LD_ADDR_VAR 0 4
34869: PUSH
34870: LD_INT 1
34872: ST_TO_ADDR
// end ;
34873: LD_VAR 0 4
34877: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34878: LD_INT 0
34880: PPUSH
34881: PPUSH
34882: PPUSH
// if not unit in minersList then
34883: LD_VAR 0 1
34887: PUSH
34888: LD_EXP 126
34892: IN
34893: NOT
34894: IFFALSE 34898
// exit ;
34896: GO 35290
// index := GetElementIndex ( minersList , unit ) ;
34898: LD_ADDR_VAR 0 6
34902: PUSH
34903: LD_EXP 126
34907: PPUSH
34908: LD_VAR 0 1
34912: PPUSH
34913: CALL 40857 0 2
34917: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34918: LD_ADDR_VAR 0 5
34922: PUSH
34923: DOUBLE
34924: LD_EXP 127
34928: PUSH
34929: LD_VAR 0 6
34933: ARRAY
34934: INC
34935: ST_TO_ADDR
34936: LD_INT 1
34938: PUSH
34939: FOR_DOWNTO
34940: IFFALSE 35101
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34942: LD_EXP 127
34946: PUSH
34947: LD_VAR 0 6
34951: ARRAY
34952: PUSH
34953: LD_VAR 0 5
34957: ARRAY
34958: PUSH
34959: LD_INT 1
34961: ARRAY
34962: PUSH
34963: LD_VAR 0 2
34967: EQUAL
34968: PUSH
34969: LD_EXP 127
34973: PUSH
34974: LD_VAR 0 6
34978: ARRAY
34979: PUSH
34980: LD_VAR 0 5
34984: ARRAY
34985: PUSH
34986: LD_INT 2
34988: ARRAY
34989: PUSH
34990: LD_VAR 0 3
34994: EQUAL
34995: AND
34996: IFFALSE 35099
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34998: LD_EXP 127
35002: PUSH
35003: LD_VAR 0 6
35007: ARRAY
35008: PUSH
35009: LD_VAR 0 5
35013: ARRAY
35014: PUSH
35015: LD_INT 1
35017: ARRAY
35018: PPUSH
35019: LD_EXP 127
35023: PUSH
35024: LD_VAR 0 6
35028: ARRAY
35029: PUSH
35030: LD_VAR 0 5
35034: ARRAY
35035: PUSH
35036: LD_INT 2
35038: ARRAY
35039: PPUSH
35040: LD_VAR 0 1
35044: PPUSH
35045: CALL_OW 255
35049: PPUSH
35050: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35054: LD_ADDR_EXP 127
35058: PUSH
35059: LD_EXP 127
35063: PPUSH
35064: LD_VAR 0 6
35068: PPUSH
35069: LD_EXP 127
35073: PUSH
35074: LD_VAR 0 6
35078: ARRAY
35079: PPUSH
35080: LD_VAR 0 5
35084: PPUSH
35085: CALL_OW 3
35089: PPUSH
35090: CALL_OW 1
35094: ST_TO_ADDR
// exit ;
35095: POP
35096: POP
35097: GO 35290
// end ; end ;
35099: GO 34939
35101: POP
35102: POP
// for i := minerMinesList [ index ] downto 1 do
35103: LD_ADDR_VAR 0 5
35107: PUSH
35108: DOUBLE
35109: LD_EXP 127
35113: PUSH
35114: LD_VAR 0 6
35118: ARRAY
35119: INC
35120: ST_TO_ADDR
35121: LD_INT 1
35123: PUSH
35124: FOR_DOWNTO
35125: IFFALSE 35288
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35127: LD_EXP 127
35131: PUSH
35132: LD_VAR 0 6
35136: ARRAY
35137: PUSH
35138: LD_VAR 0 5
35142: ARRAY
35143: PUSH
35144: LD_INT 1
35146: ARRAY
35147: PPUSH
35148: LD_EXP 127
35152: PUSH
35153: LD_VAR 0 6
35157: ARRAY
35158: PUSH
35159: LD_VAR 0 5
35163: ARRAY
35164: PUSH
35165: LD_INT 2
35167: ARRAY
35168: PPUSH
35169: LD_VAR 0 2
35173: PPUSH
35174: LD_VAR 0 3
35178: PPUSH
35179: CALL_OW 298
35183: PUSH
35184: LD_INT 6
35186: LESS
35187: IFFALSE 35286
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35189: LD_EXP 127
35193: PUSH
35194: LD_VAR 0 6
35198: ARRAY
35199: PUSH
35200: LD_VAR 0 5
35204: ARRAY
35205: PUSH
35206: LD_INT 1
35208: ARRAY
35209: PPUSH
35210: LD_EXP 127
35214: PUSH
35215: LD_VAR 0 6
35219: ARRAY
35220: PUSH
35221: LD_VAR 0 5
35225: ARRAY
35226: PUSH
35227: LD_INT 2
35229: ARRAY
35230: PPUSH
35231: LD_VAR 0 1
35235: PPUSH
35236: CALL_OW 255
35240: PPUSH
35241: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35245: LD_ADDR_EXP 127
35249: PUSH
35250: LD_EXP 127
35254: PPUSH
35255: LD_VAR 0 6
35259: PPUSH
35260: LD_EXP 127
35264: PUSH
35265: LD_VAR 0 6
35269: ARRAY
35270: PPUSH
35271: LD_VAR 0 5
35275: PPUSH
35276: CALL_OW 3
35280: PPUSH
35281: CALL_OW 1
35285: ST_TO_ADDR
// end ; end ;
35286: GO 35124
35288: POP
35289: POP
// end ;
35290: LD_VAR 0 4
35294: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35295: LD_INT 0
35297: PPUSH
35298: PPUSH
35299: PPUSH
35300: PPUSH
35301: PPUSH
35302: PPUSH
35303: PPUSH
35304: PPUSH
35305: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35306: LD_VAR 0 1
35310: PPUSH
35311: CALL_OW 264
35315: PUSH
35316: LD_EXP 50
35320: EQUAL
35321: NOT
35322: PUSH
35323: LD_VAR 0 1
35327: PUSH
35328: LD_EXP 126
35332: IN
35333: NOT
35334: OR
35335: IFFALSE 35339
// exit ;
35337: GO 35661
// index := GetElementIndex ( minersList , unit ) ;
35339: LD_ADDR_VAR 0 6
35343: PUSH
35344: LD_EXP 126
35348: PPUSH
35349: LD_VAR 0 1
35353: PPUSH
35354: CALL 40857 0 2
35358: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35359: LD_ADDR_VAR 0 8
35363: PUSH
35364: LD_EXP 128
35368: PUSH
35369: LD_EXP 127
35373: PUSH
35374: LD_VAR 0 6
35378: ARRAY
35379: MINUS
35380: ST_TO_ADDR
// if not minesFreeAmount then
35381: LD_VAR 0 8
35385: NOT
35386: IFFALSE 35390
// exit ;
35388: GO 35661
// tmp := [ ] ;
35390: LD_ADDR_VAR 0 7
35394: PUSH
35395: EMPTY
35396: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35397: LD_ADDR_VAR 0 5
35401: PUSH
35402: DOUBLE
35403: LD_INT 1
35405: DEC
35406: ST_TO_ADDR
35407: LD_VAR 0 8
35411: PUSH
35412: FOR_TO
35413: IFFALSE 35608
// begin _d := rand ( 0 , 5 ) ;
35415: LD_ADDR_VAR 0 11
35419: PUSH
35420: LD_INT 0
35422: PPUSH
35423: LD_INT 5
35425: PPUSH
35426: CALL_OW 12
35430: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35431: LD_ADDR_VAR 0 12
35435: PUSH
35436: LD_INT 2
35438: PPUSH
35439: LD_INT 6
35441: PPUSH
35442: CALL_OW 12
35446: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35447: LD_ADDR_VAR 0 9
35451: PUSH
35452: LD_VAR 0 2
35456: PPUSH
35457: LD_VAR 0 11
35461: PPUSH
35462: LD_VAR 0 12
35466: PPUSH
35467: CALL_OW 272
35471: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35472: LD_ADDR_VAR 0 10
35476: PUSH
35477: LD_VAR 0 3
35481: PPUSH
35482: LD_VAR 0 11
35486: PPUSH
35487: LD_VAR 0 12
35491: PPUSH
35492: CALL_OW 273
35496: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35497: LD_VAR 0 9
35501: PPUSH
35502: LD_VAR 0 10
35506: PPUSH
35507: CALL_OW 488
35511: PUSH
35512: LD_VAR 0 9
35516: PUSH
35517: LD_VAR 0 10
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_VAR 0 7
35530: IN
35531: NOT
35532: AND
35533: PUSH
35534: LD_VAR 0 9
35538: PPUSH
35539: LD_VAR 0 10
35543: PPUSH
35544: CALL_OW 458
35548: NOT
35549: AND
35550: IFFALSE 35592
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35552: LD_ADDR_VAR 0 7
35556: PUSH
35557: LD_VAR 0 7
35561: PPUSH
35562: LD_VAR 0 7
35566: PUSH
35567: LD_INT 1
35569: PLUS
35570: PPUSH
35571: LD_VAR 0 9
35575: PUSH
35576: LD_VAR 0 10
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PPUSH
35585: CALL_OW 1
35589: ST_TO_ADDR
35590: GO 35606
// i := i - 1 ;
35592: LD_ADDR_VAR 0 5
35596: PUSH
35597: LD_VAR 0 5
35601: PUSH
35602: LD_INT 1
35604: MINUS
35605: ST_TO_ADDR
// end ;
35606: GO 35412
35608: POP
35609: POP
// for i in tmp do
35610: LD_ADDR_VAR 0 5
35614: PUSH
35615: LD_VAR 0 7
35619: PUSH
35620: FOR_IN
35621: IFFALSE 35659
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35623: LD_VAR 0 1
35627: PPUSH
35628: LD_VAR 0 5
35632: PUSH
35633: LD_INT 1
35635: ARRAY
35636: PPUSH
35637: LD_VAR 0 5
35641: PUSH
35642: LD_INT 2
35644: ARRAY
35645: PPUSH
35646: CALL 34601 0 3
35650: NOT
35651: IFFALSE 35657
// exit ;
35653: POP
35654: POP
35655: GO 35661
35657: GO 35620
35659: POP
35660: POP
// end ;
35661: LD_VAR 0 4
35665: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35666: LD_INT 0
35668: PPUSH
35669: PPUSH
35670: PPUSH
35671: PPUSH
35672: PPUSH
35673: PPUSH
35674: PPUSH
// if not GetClass ( unit ) = class_sniper then
35675: LD_VAR 0 1
35679: PPUSH
35680: CALL_OW 257
35684: PUSH
35685: LD_INT 5
35687: EQUAL
35688: NOT
35689: IFFALSE 35693
// exit ;
35691: GO 36081
// dist := 8 ;
35693: LD_ADDR_VAR 0 5
35697: PUSH
35698: LD_INT 8
35700: ST_TO_ADDR
// viewRange := 12 ;
35701: LD_ADDR_VAR 0 7
35705: PUSH
35706: LD_INT 12
35708: ST_TO_ADDR
// side := GetSide ( unit ) ;
35709: LD_ADDR_VAR 0 6
35713: PUSH
35714: LD_VAR 0 1
35718: PPUSH
35719: CALL_OW 255
35723: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35724: LD_INT 61
35726: PPUSH
35727: LD_VAR 0 6
35731: PPUSH
35732: CALL_OW 321
35736: PUSH
35737: LD_INT 2
35739: EQUAL
35740: IFFALSE 35750
// viewRange := 16 ;
35742: LD_ADDR_VAR 0 7
35746: PUSH
35747: LD_INT 16
35749: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35750: LD_VAR 0 1
35754: PPUSH
35755: LD_VAR 0 2
35759: PPUSH
35760: LD_VAR 0 3
35764: PPUSH
35765: CALL_OW 297
35769: PUSH
35770: LD_VAR 0 5
35774: GREATER
35775: IFFALSE 35854
// begin ComMoveXY ( unit , x , y ) ;
35777: LD_VAR 0 1
35781: PPUSH
35782: LD_VAR 0 2
35786: PPUSH
35787: LD_VAR 0 3
35791: PPUSH
35792: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35796: LD_INT 35
35798: PPUSH
35799: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35803: LD_VAR 0 1
35807: PPUSH
35808: LD_VAR 0 2
35812: PPUSH
35813: LD_VAR 0 3
35817: PPUSH
35818: CALL 71630 0 3
35822: NOT
35823: IFFALSE 35827
// exit ;
35825: GO 36081
// until GetDistUnitXY ( unit , x , y ) < dist ;
35827: LD_VAR 0 1
35831: PPUSH
35832: LD_VAR 0 2
35836: PPUSH
35837: LD_VAR 0 3
35841: PPUSH
35842: CALL_OW 297
35846: PUSH
35847: LD_VAR 0 5
35851: LESS
35852: IFFALSE 35796
// end ; ComTurnXY ( unit , x , y ) ;
35854: LD_VAR 0 1
35858: PPUSH
35859: LD_VAR 0 2
35863: PPUSH
35864: LD_VAR 0 3
35868: PPUSH
35869: CALL_OW 118
// wait ( 5 ) ;
35873: LD_INT 5
35875: PPUSH
35876: CALL_OW 67
// _d := GetDir ( unit ) ;
35880: LD_ADDR_VAR 0 10
35884: PUSH
35885: LD_VAR 0 1
35889: PPUSH
35890: CALL_OW 254
35894: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35895: LD_ADDR_VAR 0 8
35899: PUSH
35900: LD_VAR 0 1
35904: PPUSH
35905: CALL_OW 250
35909: PPUSH
35910: LD_VAR 0 10
35914: PPUSH
35915: LD_VAR 0 5
35919: PPUSH
35920: CALL_OW 272
35924: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35925: LD_ADDR_VAR 0 9
35929: PUSH
35930: LD_VAR 0 1
35934: PPUSH
35935: CALL_OW 251
35939: PPUSH
35940: LD_VAR 0 10
35944: PPUSH
35945: LD_VAR 0 5
35949: PPUSH
35950: CALL_OW 273
35954: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35955: LD_VAR 0 8
35959: PPUSH
35960: LD_VAR 0 9
35964: PPUSH
35965: CALL_OW 488
35969: NOT
35970: IFFALSE 35974
// exit ;
35972: GO 36081
// ComAnimCustom ( unit , 1 ) ;
35974: LD_VAR 0 1
35978: PPUSH
35979: LD_INT 1
35981: PPUSH
35982: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35986: LD_VAR 0 8
35990: PPUSH
35991: LD_VAR 0 9
35995: PPUSH
35996: LD_VAR 0 6
36000: PPUSH
36001: LD_VAR 0 7
36005: PPUSH
36006: CALL_OW 330
// repeat wait ( 1 ) ;
36010: LD_INT 1
36012: PPUSH
36013: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36017: LD_VAR 0 1
36021: PPUSH
36022: CALL_OW 316
36026: PUSH
36027: LD_VAR 0 1
36031: PPUSH
36032: CALL_OW 314
36036: OR
36037: PUSH
36038: LD_VAR 0 1
36042: PPUSH
36043: CALL_OW 302
36047: NOT
36048: OR
36049: PUSH
36050: LD_VAR 0 1
36054: PPUSH
36055: CALL_OW 301
36059: OR
36060: IFFALSE 36010
// RemoveSeeing ( _x , _y , side ) ;
36062: LD_VAR 0 8
36066: PPUSH
36067: LD_VAR 0 9
36071: PPUSH
36072: LD_VAR 0 6
36076: PPUSH
36077: CALL_OW 331
// end ; end_of_file
36081: LD_VAR 0 4
36085: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36086: LD_INT 0
36088: PPUSH
36089: PPUSH
// if exist_mode then
36090: LD_VAR 0 2
36094: IFFALSE 36119
// unit := CreateCharacter ( prefix & ident ) else
36096: LD_ADDR_VAR 0 5
36100: PUSH
36101: LD_VAR 0 3
36105: PUSH
36106: LD_VAR 0 1
36110: STR
36111: PPUSH
36112: CALL_OW 34
36116: ST_TO_ADDR
36117: GO 36134
// unit := NewCharacter ( ident ) ;
36119: LD_ADDR_VAR 0 5
36123: PUSH
36124: LD_VAR 0 1
36128: PPUSH
36129: CALL_OW 25
36133: ST_TO_ADDR
// result := unit ;
36134: LD_ADDR_VAR 0 4
36138: PUSH
36139: LD_VAR 0 5
36143: ST_TO_ADDR
// end ;
36144: LD_VAR 0 4
36148: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36149: LD_INT 0
36151: PPUSH
36152: PPUSH
// if not side or not nation then
36153: LD_VAR 0 1
36157: NOT
36158: PUSH
36159: LD_VAR 0 2
36163: NOT
36164: OR
36165: IFFALSE 36169
// exit ;
36167: GO 36937
// case nation of nation_american :
36169: LD_VAR 0 2
36173: PUSH
36174: LD_INT 1
36176: DOUBLE
36177: EQUAL
36178: IFTRUE 36182
36180: GO 36396
36182: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36183: LD_ADDR_VAR 0 4
36187: PUSH
36188: LD_INT 35
36190: PUSH
36191: LD_INT 45
36193: PUSH
36194: LD_INT 46
36196: PUSH
36197: LD_INT 47
36199: PUSH
36200: LD_INT 82
36202: PUSH
36203: LD_INT 83
36205: PUSH
36206: LD_INT 84
36208: PUSH
36209: LD_INT 85
36211: PUSH
36212: LD_INT 86
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: LD_INT 2
36220: PUSH
36221: LD_INT 6
36223: PUSH
36224: LD_INT 15
36226: PUSH
36227: LD_INT 16
36229: PUSH
36230: LD_INT 7
36232: PUSH
36233: LD_INT 12
36235: PUSH
36236: LD_INT 13
36238: PUSH
36239: LD_INT 10
36241: PUSH
36242: LD_INT 14
36244: PUSH
36245: LD_INT 20
36247: PUSH
36248: LD_INT 21
36250: PUSH
36251: LD_INT 22
36253: PUSH
36254: LD_INT 25
36256: PUSH
36257: LD_INT 32
36259: PUSH
36260: LD_INT 27
36262: PUSH
36263: LD_INT 36
36265: PUSH
36266: LD_INT 69
36268: PUSH
36269: LD_INT 39
36271: PUSH
36272: LD_INT 34
36274: PUSH
36275: LD_INT 40
36277: PUSH
36278: LD_INT 48
36280: PUSH
36281: LD_INT 49
36283: PUSH
36284: LD_INT 50
36286: PUSH
36287: LD_INT 51
36289: PUSH
36290: LD_INT 52
36292: PUSH
36293: LD_INT 53
36295: PUSH
36296: LD_INT 54
36298: PUSH
36299: LD_INT 55
36301: PUSH
36302: LD_INT 56
36304: PUSH
36305: LD_INT 57
36307: PUSH
36308: LD_INT 58
36310: PUSH
36311: LD_INT 59
36313: PUSH
36314: LD_INT 60
36316: PUSH
36317: LD_INT 61
36319: PUSH
36320: LD_INT 62
36322: PUSH
36323: LD_INT 80
36325: PUSH
36326: LD_INT 82
36328: PUSH
36329: LD_INT 83
36331: PUSH
36332: LD_INT 84
36334: PUSH
36335: LD_INT 85
36337: PUSH
36338: LD_INT 86
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: ST_TO_ADDR
36394: GO 36861
36396: LD_INT 2
36398: DOUBLE
36399: EQUAL
36400: IFTRUE 36404
36402: GO 36630
36404: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36405: LD_ADDR_VAR 0 4
36409: PUSH
36410: LD_INT 35
36412: PUSH
36413: LD_INT 45
36415: PUSH
36416: LD_INT 46
36418: PUSH
36419: LD_INT 47
36421: PUSH
36422: LD_INT 82
36424: PUSH
36425: LD_INT 83
36427: PUSH
36428: LD_INT 84
36430: PUSH
36431: LD_INT 85
36433: PUSH
36434: LD_INT 87
36436: PUSH
36437: LD_INT 70
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: LD_INT 11
36445: PUSH
36446: LD_INT 3
36448: PUSH
36449: LD_INT 4
36451: PUSH
36452: LD_INT 5
36454: PUSH
36455: LD_INT 6
36457: PUSH
36458: LD_INT 15
36460: PUSH
36461: LD_INT 18
36463: PUSH
36464: LD_INT 7
36466: PUSH
36467: LD_INT 17
36469: PUSH
36470: LD_INT 8
36472: PUSH
36473: LD_INT 20
36475: PUSH
36476: LD_INT 21
36478: PUSH
36479: LD_INT 22
36481: PUSH
36482: LD_INT 72
36484: PUSH
36485: LD_INT 26
36487: PUSH
36488: LD_INT 69
36490: PUSH
36491: LD_INT 39
36493: PUSH
36494: LD_INT 40
36496: PUSH
36497: LD_INT 41
36499: PUSH
36500: LD_INT 42
36502: PUSH
36503: LD_INT 43
36505: PUSH
36506: LD_INT 48
36508: PUSH
36509: LD_INT 49
36511: PUSH
36512: LD_INT 50
36514: PUSH
36515: LD_INT 51
36517: PUSH
36518: LD_INT 52
36520: PUSH
36521: LD_INT 53
36523: PUSH
36524: LD_INT 54
36526: PUSH
36527: LD_INT 55
36529: PUSH
36530: LD_INT 56
36532: PUSH
36533: LD_INT 60
36535: PUSH
36536: LD_INT 61
36538: PUSH
36539: LD_INT 62
36541: PUSH
36542: LD_INT 66
36544: PUSH
36545: LD_INT 67
36547: PUSH
36548: LD_INT 68
36550: PUSH
36551: LD_INT 81
36553: PUSH
36554: LD_INT 82
36556: PUSH
36557: LD_INT 83
36559: PUSH
36560: LD_INT 84
36562: PUSH
36563: LD_INT 85
36565: PUSH
36566: LD_INT 87
36568: PUSH
36569: LD_INT 88
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: ST_TO_ADDR
36628: GO 36861
36630: LD_INT 3
36632: DOUBLE
36633: EQUAL
36634: IFTRUE 36638
36636: GO 36860
36638: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36639: LD_ADDR_VAR 0 4
36643: PUSH
36644: LD_INT 46
36646: PUSH
36647: LD_INT 47
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: LD_INT 2
36655: PUSH
36656: LD_INT 82
36658: PUSH
36659: LD_INT 83
36661: PUSH
36662: LD_INT 84
36664: PUSH
36665: LD_INT 85
36667: PUSH
36668: LD_INT 86
36670: PUSH
36671: LD_INT 11
36673: PUSH
36674: LD_INT 9
36676: PUSH
36677: LD_INT 20
36679: PUSH
36680: LD_INT 19
36682: PUSH
36683: LD_INT 21
36685: PUSH
36686: LD_INT 24
36688: PUSH
36689: LD_INT 22
36691: PUSH
36692: LD_INT 25
36694: PUSH
36695: LD_INT 28
36697: PUSH
36698: LD_INT 29
36700: PUSH
36701: LD_INT 30
36703: PUSH
36704: LD_INT 31
36706: PUSH
36707: LD_INT 37
36709: PUSH
36710: LD_INT 38
36712: PUSH
36713: LD_INT 32
36715: PUSH
36716: LD_INT 27
36718: PUSH
36719: LD_INT 33
36721: PUSH
36722: LD_INT 69
36724: PUSH
36725: LD_INT 39
36727: PUSH
36728: LD_INT 34
36730: PUSH
36731: LD_INT 40
36733: PUSH
36734: LD_INT 71
36736: PUSH
36737: LD_INT 23
36739: PUSH
36740: LD_INT 44
36742: PUSH
36743: LD_INT 48
36745: PUSH
36746: LD_INT 49
36748: PUSH
36749: LD_INT 50
36751: PUSH
36752: LD_INT 51
36754: PUSH
36755: LD_INT 52
36757: PUSH
36758: LD_INT 53
36760: PUSH
36761: LD_INT 54
36763: PUSH
36764: LD_INT 55
36766: PUSH
36767: LD_INT 56
36769: PUSH
36770: LD_INT 57
36772: PUSH
36773: LD_INT 58
36775: PUSH
36776: LD_INT 59
36778: PUSH
36779: LD_INT 63
36781: PUSH
36782: LD_INT 64
36784: PUSH
36785: LD_INT 65
36787: PUSH
36788: LD_INT 82
36790: PUSH
36791: LD_INT 83
36793: PUSH
36794: LD_INT 84
36796: PUSH
36797: LD_INT 85
36799: PUSH
36800: LD_INT 86
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: ST_TO_ADDR
36858: GO 36861
36860: POP
// if state > - 1 and state < 3 then
36861: LD_VAR 0 3
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: GREATER
36870: PUSH
36871: LD_VAR 0 3
36875: PUSH
36876: LD_INT 3
36878: LESS
36879: AND
36880: IFFALSE 36937
// for i in result do
36882: LD_ADDR_VAR 0 5
36886: PUSH
36887: LD_VAR 0 4
36891: PUSH
36892: FOR_IN
36893: IFFALSE 36935
// if GetTech ( i , side ) <> state then
36895: LD_VAR 0 5
36899: PPUSH
36900: LD_VAR 0 1
36904: PPUSH
36905: CALL_OW 321
36909: PUSH
36910: LD_VAR 0 3
36914: NONEQUAL
36915: IFFALSE 36933
// result := result diff i ;
36917: LD_ADDR_VAR 0 4
36921: PUSH
36922: LD_VAR 0 4
36926: PUSH
36927: LD_VAR 0 5
36931: DIFF
36932: ST_TO_ADDR
36933: GO 36892
36935: POP
36936: POP
// end ;
36937: LD_VAR 0 4
36941: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36942: LD_INT 0
36944: PPUSH
36945: PPUSH
36946: PPUSH
// result := true ;
36947: LD_ADDR_VAR 0 3
36951: PUSH
36952: LD_INT 1
36954: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36955: LD_ADDR_VAR 0 5
36959: PUSH
36960: LD_VAR 0 2
36964: PPUSH
36965: CALL_OW 480
36969: ST_TO_ADDR
// if not tmp then
36970: LD_VAR 0 5
36974: NOT
36975: IFFALSE 36979
// exit ;
36977: GO 37028
// for i in tmp do
36979: LD_ADDR_VAR 0 4
36983: PUSH
36984: LD_VAR 0 5
36988: PUSH
36989: FOR_IN
36990: IFFALSE 37026
// if GetTech ( i , side ) <> state_researched then
36992: LD_VAR 0 4
36996: PPUSH
36997: LD_VAR 0 1
37001: PPUSH
37002: CALL_OW 321
37006: PUSH
37007: LD_INT 2
37009: NONEQUAL
37010: IFFALSE 37024
// begin result := false ;
37012: LD_ADDR_VAR 0 3
37016: PUSH
37017: LD_INT 0
37019: ST_TO_ADDR
// exit ;
37020: POP
37021: POP
37022: GO 37028
// end ;
37024: GO 36989
37026: POP
37027: POP
// end ;
37028: LD_VAR 0 3
37032: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37033: LD_INT 0
37035: PPUSH
37036: PPUSH
37037: PPUSH
37038: PPUSH
37039: PPUSH
37040: PPUSH
37041: PPUSH
37042: PPUSH
37043: PPUSH
37044: PPUSH
37045: PPUSH
37046: PPUSH
37047: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37048: LD_VAR 0 1
37052: NOT
37053: PUSH
37054: LD_VAR 0 1
37058: PPUSH
37059: CALL_OW 257
37063: PUSH
37064: LD_INT 9
37066: NONEQUAL
37067: OR
37068: IFFALSE 37072
// exit ;
37070: GO 37645
// side := GetSide ( unit ) ;
37072: LD_ADDR_VAR 0 9
37076: PUSH
37077: LD_VAR 0 1
37081: PPUSH
37082: CALL_OW 255
37086: ST_TO_ADDR
// tech_space := tech_spacanom ;
37087: LD_ADDR_VAR 0 12
37091: PUSH
37092: LD_INT 29
37094: ST_TO_ADDR
// tech_time := tech_taurad ;
37095: LD_ADDR_VAR 0 13
37099: PUSH
37100: LD_INT 28
37102: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37103: LD_ADDR_VAR 0 11
37107: PUSH
37108: LD_VAR 0 1
37112: PPUSH
37113: CALL_OW 310
37117: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37118: LD_VAR 0 11
37122: PPUSH
37123: CALL_OW 247
37127: PUSH
37128: LD_INT 2
37130: EQUAL
37131: IFFALSE 37135
// exit ;
37133: GO 37645
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37135: LD_ADDR_VAR 0 8
37139: PUSH
37140: LD_INT 81
37142: PUSH
37143: LD_VAR 0 9
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 3
37154: PUSH
37155: LD_INT 21
37157: PUSH
37158: LD_INT 3
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PPUSH
37173: CALL_OW 69
37177: ST_TO_ADDR
// if not tmp then
37178: LD_VAR 0 8
37182: NOT
37183: IFFALSE 37187
// exit ;
37185: GO 37645
// if in_unit then
37187: LD_VAR 0 11
37191: IFFALSE 37215
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37193: LD_ADDR_VAR 0 10
37197: PUSH
37198: LD_VAR 0 8
37202: PPUSH
37203: LD_VAR 0 11
37207: PPUSH
37208: CALL_OW 74
37212: ST_TO_ADDR
37213: GO 37235
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37215: LD_ADDR_VAR 0 10
37219: PUSH
37220: LD_VAR 0 8
37224: PPUSH
37225: LD_VAR 0 1
37229: PPUSH
37230: CALL_OW 74
37234: ST_TO_ADDR
// if not enemy then
37235: LD_VAR 0 10
37239: NOT
37240: IFFALSE 37244
// exit ;
37242: GO 37645
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37244: LD_VAR 0 11
37248: PUSH
37249: LD_VAR 0 11
37253: PPUSH
37254: LD_VAR 0 10
37258: PPUSH
37259: CALL_OW 296
37263: PUSH
37264: LD_INT 13
37266: GREATER
37267: AND
37268: PUSH
37269: LD_VAR 0 1
37273: PPUSH
37274: LD_VAR 0 10
37278: PPUSH
37279: CALL_OW 296
37283: PUSH
37284: LD_INT 12
37286: GREATER
37287: OR
37288: IFFALSE 37292
// exit ;
37290: GO 37645
// missile := [ 1 ] ;
37292: LD_ADDR_VAR 0 14
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: EMPTY
37301: LIST
37302: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37303: LD_VAR 0 9
37307: PPUSH
37308: LD_VAR 0 12
37312: PPUSH
37313: CALL_OW 325
37317: IFFALSE 37346
// missile := Insert ( missile , missile + 1 , 2 ) ;
37319: LD_ADDR_VAR 0 14
37323: PUSH
37324: LD_VAR 0 14
37328: PPUSH
37329: LD_VAR 0 14
37333: PUSH
37334: LD_INT 1
37336: PLUS
37337: PPUSH
37338: LD_INT 2
37340: PPUSH
37341: CALL_OW 2
37345: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37346: LD_VAR 0 9
37350: PPUSH
37351: LD_VAR 0 13
37355: PPUSH
37356: CALL_OW 325
37360: PUSH
37361: LD_VAR 0 10
37365: PPUSH
37366: CALL_OW 255
37370: PPUSH
37371: LD_VAR 0 13
37375: PPUSH
37376: CALL_OW 325
37380: NOT
37381: AND
37382: IFFALSE 37411
// missile := Insert ( missile , missile + 1 , 3 ) ;
37384: LD_ADDR_VAR 0 14
37388: PUSH
37389: LD_VAR 0 14
37393: PPUSH
37394: LD_VAR 0 14
37398: PUSH
37399: LD_INT 1
37401: PLUS
37402: PPUSH
37403: LD_INT 3
37405: PPUSH
37406: CALL_OW 2
37410: ST_TO_ADDR
// if missile < 2 then
37411: LD_VAR 0 14
37415: PUSH
37416: LD_INT 2
37418: LESS
37419: IFFALSE 37423
// exit ;
37421: GO 37645
// x := GetX ( enemy ) ;
37423: LD_ADDR_VAR 0 4
37427: PUSH
37428: LD_VAR 0 10
37432: PPUSH
37433: CALL_OW 250
37437: ST_TO_ADDR
// y := GetY ( enemy ) ;
37438: LD_ADDR_VAR 0 5
37442: PUSH
37443: LD_VAR 0 10
37447: PPUSH
37448: CALL_OW 251
37452: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37453: LD_ADDR_VAR 0 6
37457: PUSH
37458: LD_VAR 0 4
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PPUSH
37467: LD_INT 1
37469: PPUSH
37470: CALL_OW 12
37474: PLUS
37475: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37476: LD_ADDR_VAR 0 7
37480: PUSH
37481: LD_VAR 0 5
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PPUSH
37490: LD_INT 1
37492: PPUSH
37493: CALL_OW 12
37497: PLUS
37498: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37499: LD_VAR 0 6
37503: PPUSH
37504: LD_VAR 0 7
37508: PPUSH
37509: CALL_OW 488
37513: NOT
37514: IFFALSE 37536
// begin _x := x ;
37516: LD_ADDR_VAR 0 6
37520: PUSH
37521: LD_VAR 0 4
37525: ST_TO_ADDR
// _y := y ;
37526: LD_ADDR_VAR 0 7
37530: PUSH
37531: LD_VAR 0 5
37535: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37536: LD_ADDR_VAR 0 3
37540: PUSH
37541: LD_INT 1
37543: PPUSH
37544: LD_VAR 0 14
37548: PPUSH
37549: CALL_OW 12
37553: ST_TO_ADDR
// case i of 1 :
37554: LD_VAR 0 3
37558: PUSH
37559: LD_INT 1
37561: DOUBLE
37562: EQUAL
37563: IFTRUE 37567
37565: GO 37584
37567: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37568: LD_VAR 0 1
37572: PPUSH
37573: LD_VAR 0 10
37577: PPUSH
37578: CALL_OW 115
37582: GO 37645
37584: LD_INT 2
37586: DOUBLE
37587: EQUAL
37588: IFTRUE 37592
37590: GO 37614
37592: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37593: LD_VAR 0 1
37597: PPUSH
37598: LD_VAR 0 6
37602: PPUSH
37603: LD_VAR 0 7
37607: PPUSH
37608: CALL_OW 153
37612: GO 37645
37614: LD_INT 3
37616: DOUBLE
37617: EQUAL
37618: IFTRUE 37622
37620: GO 37644
37622: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37623: LD_VAR 0 1
37627: PPUSH
37628: LD_VAR 0 6
37632: PPUSH
37633: LD_VAR 0 7
37637: PPUSH
37638: CALL_OW 154
37642: GO 37645
37644: POP
// end ;
37645: LD_VAR 0 2
37649: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37650: LD_INT 0
37652: PPUSH
37653: PPUSH
37654: PPUSH
37655: PPUSH
37656: PPUSH
37657: PPUSH
// if not unit or not building then
37658: LD_VAR 0 1
37662: NOT
37663: PUSH
37664: LD_VAR 0 2
37668: NOT
37669: OR
37670: IFFALSE 37674
// exit ;
37672: GO 37832
// x := GetX ( building ) ;
37674: LD_ADDR_VAR 0 5
37678: PUSH
37679: LD_VAR 0 2
37683: PPUSH
37684: CALL_OW 250
37688: ST_TO_ADDR
// y := GetY ( building ) ;
37689: LD_ADDR_VAR 0 6
37693: PUSH
37694: LD_VAR 0 2
37698: PPUSH
37699: CALL_OW 251
37703: ST_TO_ADDR
// for i = 0 to 5 do
37704: LD_ADDR_VAR 0 4
37708: PUSH
37709: DOUBLE
37710: LD_INT 0
37712: DEC
37713: ST_TO_ADDR
37714: LD_INT 5
37716: PUSH
37717: FOR_TO
37718: IFFALSE 37830
// begin _x := ShiftX ( x , i , 3 ) ;
37720: LD_ADDR_VAR 0 7
37724: PUSH
37725: LD_VAR 0 5
37729: PPUSH
37730: LD_VAR 0 4
37734: PPUSH
37735: LD_INT 3
37737: PPUSH
37738: CALL_OW 272
37742: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37743: LD_ADDR_VAR 0 8
37747: PUSH
37748: LD_VAR 0 6
37752: PPUSH
37753: LD_VAR 0 4
37757: PPUSH
37758: LD_INT 3
37760: PPUSH
37761: CALL_OW 273
37765: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37766: LD_VAR 0 7
37770: PPUSH
37771: LD_VAR 0 8
37775: PPUSH
37776: CALL_OW 488
37780: NOT
37781: IFFALSE 37785
// continue ;
37783: GO 37717
// if HexInfo ( _x , _y ) = 0 then
37785: LD_VAR 0 7
37789: PPUSH
37790: LD_VAR 0 8
37794: PPUSH
37795: CALL_OW 428
37799: PUSH
37800: LD_INT 0
37802: EQUAL
37803: IFFALSE 37828
// begin ComMoveXY ( unit , _x , _y ) ;
37805: LD_VAR 0 1
37809: PPUSH
37810: LD_VAR 0 7
37814: PPUSH
37815: LD_VAR 0 8
37819: PPUSH
37820: CALL_OW 111
// exit ;
37824: POP
37825: POP
37826: GO 37832
// end ; end ;
37828: GO 37717
37830: POP
37831: POP
// end ;
37832: LD_VAR 0 3
37836: RET
// export function ScanBase ( side , base_area ) ; begin
37837: LD_INT 0
37839: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37840: LD_ADDR_VAR 0 3
37844: PUSH
37845: LD_VAR 0 2
37849: PPUSH
37850: LD_INT 81
37852: PUSH
37853: LD_VAR 0 1
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PPUSH
37862: CALL_OW 70
37866: ST_TO_ADDR
// end ;
37867: LD_VAR 0 3
37871: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37872: LD_INT 0
37874: PPUSH
37875: PPUSH
37876: PPUSH
37877: PPUSH
// result := false ;
37878: LD_ADDR_VAR 0 2
37882: PUSH
37883: LD_INT 0
37885: ST_TO_ADDR
// side := GetSide ( unit ) ;
37886: LD_ADDR_VAR 0 3
37890: PUSH
37891: LD_VAR 0 1
37895: PPUSH
37896: CALL_OW 255
37900: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37901: LD_ADDR_VAR 0 4
37905: PUSH
37906: LD_VAR 0 1
37910: PPUSH
37911: CALL_OW 248
37915: ST_TO_ADDR
// case nat of 1 :
37916: LD_VAR 0 4
37920: PUSH
37921: LD_INT 1
37923: DOUBLE
37924: EQUAL
37925: IFTRUE 37929
37927: GO 37940
37929: POP
// tech := tech_lassight ; 2 :
37930: LD_ADDR_VAR 0 5
37934: PUSH
37935: LD_INT 12
37937: ST_TO_ADDR
37938: GO 37979
37940: LD_INT 2
37942: DOUBLE
37943: EQUAL
37944: IFTRUE 37948
37946: GO 37959
37948: POP
// tech := tech_mortar ; 3 :
37949: LD_ADDR_VAR 0 5
37953: PUSH
37954: LD_INT 41
37956: ST_TO_ADDR
37957: GO 37979
37959: LD_INT 3
37961: DOUBLE
37962: EQUAL
37963: IFTRUE 37967
37965: GO 37978
37967: POP
// tech := tech_bazooka ; end ;
37968: LD_ADDR_VAR 0 5
37972: PUSH
37973: LD_INT 44
37975: ST_TO_ADDR
37976: GO 37979
37978: POP
// if Researched ( side , tech ) then
37979: LD_VAR 0 3
37983: PPUSH
37984: LD_VAR 0 5
37988: PPUSH
37989: CALL_OW 325
37993: IFFALSE 38020
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37995: LD_ADDR_VAR 0 2
37999: PUSH
38000: LD_INT 5
38002: PUSH
38003: LD_INT 8
38005: PUSH
38006: LD_INT 9
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: LIST
38013: PUSH
38014: LD_VAR 0 4
38018: ARRAY
38019: ST_TO_ADDR
// end ;
38020: LD_VAR 0 2
38024: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38025: LD_INT 0
38027: PPUSH
38028: PPUSH
38029: PPUSH
// if not mines then
38030: LD_VAR 0 2
38034: NOT
38035: IFFALSE 38039
// exit ;
38037: GO 38183
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38039: LD_ADDR_VAR 0 5
38043: PUSH
38044: LD_INT 81
38046: PUSH
38047: LD_VAR 0 1
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 3
38058: PUSH
38059: LD_INT 21
38061: PUSH
38062: LD_INT 3
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PPUSH
38077: CALL_OW 69
38081: ST_TO_ADDR
// for i in mines do
38082: LD_ADDR_VAR 0 4
38086: PUSH
38087: LD_VAR 0 2
38091: PUSH
38092: FOR_IN
38093: IFFALSE 38181
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38095: LD_VAR 0 4
38099: PUSH
38100: LD_INT 1
38102: ARRAY
38103: PPUSH
38104: LD_VAR 0 4
38108: PUSH
38109: LD_INT 2
38111: ARRAY
38112: PPUSH
38113: CALL_OW 458
38117: NOT
38118: IFFALSE 38122
// continue ;
38120: GO 38092
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38122: LD_VAR 0 4
38126: PUSH
38127: LD_INT 1
38129: ARRAY
38130: PPUSH
38131: LD_VAR 0 4
38135: PUSH
38136: LD_INT 2
38138: ARRAY
38139: PPUSH
38140: CALL_OW 428
38144: PUSH
38145: LD_VAR 0 5
38149: IN
38150: IFFALSE 38179
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38152: LD_VAR 0 4
38156: PUSH
38157: LD_INT 1
38159: ARRAY
38160: PPUSH
38161: LD_VAR 0 4
38165: PUSH
38166: LD_INT 2
38168: ARRAY
38169: PPUSH
38170: LD_VAR 0 1
38174: PPUSH
38175: CALL_OW 456
// end ;
38179: GO 38092
38181: POP
38182: POP
// end ;
38183: LD_VAR 0 3
38187: RET
// export function Count ( array ) ; var i ; begin
38188: LD_INT 0
38190: PPUSH
38191: PPUSH
// result := 0 ;
38192: LD_ADDR_VAR 0 2
38196: PUSH
38197: LD_INT 0
38199: ST_TO_ADDR
// for i in array do
38200: LD_ADDR_VAR 0 3
38204: PUSH
38205: LD_VAR 0 1
38209: PUSH
38210: FOR_IN
38211: IFFALSE 38235
// if i then
38213: LD_VAR 0 3
38217: IFFALSE 38233
// result := result + 1 ;
38219: LD_ADDR_VAR 0 2
38223: PUSH
38224: LD_VAR 0 2
38228: PUSH
38229: LD_INT 1
38231: PLUS
38232: ST_TO_ADDR
38233: GO 38210
38235: POP
38236: POP
// end ;
38237: LD_VAR 0 2
38241: RET
// export function IsEmpty ( building ) ; begin
38242: LD_INT 0
38244: PPUSH
// if not building then
38245: LD_VAR 0 1
38249: NOT
38250: IFFALSE 38254
// exit ;
38252: GO 38297
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38254: LD_ADDR_VAR 0 2
38258: PUSH
38259: LD_VAR 0 1
38263: PUSH
38264: LD_INT 22
38266: PUSH
38267: LD_VAR 0 1
38271: PPUSH
38272: CALL_OW 255
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 58
38283: PUSH
38284: EMPTY
38285: LIST
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PPUSH
38291: CALL_OW 69
38295: IN
38296: ST_TO_ADDR
// end ;
38297: LD_VAR 0 2
38301: RET
// export function IsNotFull ( building ) ; begin
38302: LD_INT 0
38304: PPUSH
// if not building then
38305: LD_VAR 0 1
38309: NOT
38310: IFFALSE 38314
// exit ;
38312: GO 38333
// result := UnitsInside ( building ) < 6 ;
38314: LD_ADDR_VAR 0 2
38318: PUSH
38319: LD_VAR 0 1
38323: PPUSH
38324: CALL_OW 313
38328: PUSH
38329: LD_INT 6
38331: LESS
38332: ST_TO_ADDR
// end ;
38333: LD_VAR 0 2
38337: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38338: LD_INT 0
38340: PPUSH
38341: PPUSH
38342: PPUSH
38343: PPUSH
// tmp := [ ] ;
38344: LD_ADDR_VAR 0 3
38348: PUSH
38349: EMPTY
38350: ST_TO_ADDR
// list := [ ] ;
38351: LD_ADDR_VAR 0 5
38355: PUSH
38356: EMPTY
38357: ST_TO_ADDR
// for i = 16 to 25 do
38358: LD_ADDR_VAR 0 4
38362: PUSH
38363: DOUBLE
38364: LD_INT 16
38366: DEC
38367: ST_TO_ADDR
38368: LD_INT 25
38370: PUSH
38371: FOR_TO
38372: IFFALSE 38445
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38374: LD_ADDR_VAR 0 3
38378: PUSH
38379: LD_VAR 0 3
38383: PUSH
38384: LD_INT 22
38386: PUSH
38387: LD_VAR 0 1
38391: PPUSH
38392: CALL_OW 255
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 91
38403: PUSH
38404: LD_VAR 0 1
38408: PUSH
38409: LD_INT 6
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 30
38419: PUSH
38420: LD_VAR 0 4
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: LIST
38433: PUSH
38434: EMPTY
38435: LIST
38436: PPUSH
38437: CALL_OW 69
38441: ADD
38442: ST_TO_ADDR
38443: GO 38371
38445: POP
38446: POP
// for i = 1 to tmp do
38447: LD_ADDR_VAR 0 4
38451: PUSH
38452: DOUBLE
38453: LD_INT 1
38455: DEC
38456: ST_TO_ADDR
38457: LD_VAR 0 3
38461: PUSH
38462: FOR_TO
38463: IFFALSE 38551
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38465: LD_ADDR_VAR 0 5
38469: PUSH
38470: LD_VAR 0 5
38474: PUSH
38475: LD_VAR 0 3
38479: PUSH
38480: LD_VAR 0 4
38484: ARRAY
38485: PPUSH
38486: CALL_OW 266
38490: PUSH
38491: LD_VAR 0 3
38495: PUSH
38496: LD_VAR 0 4
38500: ARRAY
38501: PPUSH
38502: CALL_OW 250
38506: PUSH
38507: LD_VAR 0 3
38511: PUSH
38512: LD_VAR 0 4
38516: ARRAY
38517: PPUSH
38518: CALL_OW 251
38522: PUSH
38523: LD_VAR 0 3
38527: PUSH
38528: LD_VAR 0 4
38532: ARRAY
38533: PPUSH
38534: CALL_OW 254
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: PUSH
38545: EMPTY
38546: LIST
38547: ADD
38548: ST_TO_ADDR
38549: GO 38462
38551: POP
38552: POP
// result := list ;
38553: LD_ADDR_VAR 0 2
38557: PUSH
38558: LD_VAR 0 5
38562: ST_TO_ADDR
// end ;
38563: LD_VAR 0 2
38567: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38568: LD_INT 0
38570: PPUSH
38571: PPUSH
38572: PPUSH
38573: PPUSH
38574: PPUSH
38575: PPUSH
38576: PPUSH
// if not factory then
38577: LD_VAR 0 1
38581: NOT
38582: IFFALSE 38586
// exit ;
38584: GO 39179
// if control = control_apeman then
38586: LD_VAR 0 4
38590: PUSH
38591: LD_INT 5
38593: EQUAL
38594: IFFALSE 38703
// begin tmp := UnitsInside ( factory ) ;
38596: LD_ADDR_VAR 0 8
38600: PUSH
38601: LD_VAR 0 1
38605: PPUSH
38606: CALL_OW 313
38610: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38611: LD_VAR 0 8
38615: PPUSH
38616: LD_INT 25
38618: PUSH
38619: LD_INT 12
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PPUSH
38626: CALL_OW 72
38630: NOT
38631: IFFALSE 38641
// control := control_manual ;
38633: LD_ADDR_VAR 0 4
38637: PUSH
38638: LD_INT 1
38640: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38641: LD_ADDR_VAR 0 8
38645: PUSH
38646: LD_VAR 0 1
38650: PPUSH
38651: CALL 38338 0 1
38655: ST_TO_ADDR
// if tmp then
38656: LD_VAR 0 8
38660: IFFALSE 38703
// begin for i in tmp do
38662: LD_ADDR_VAR 0 7
38666: PUSH
38667: LD_VAR 0 8
38671: PUSH
38672: FOR_IN
38673: IFFALSE 38701
// if i [ 1 ] = b_ext_radio then
38675: LD_VAR 0 7
38679: PUSH
38680: LD_INT 1
38682: ARRAY
38683: PUSH
38684: LD_INT 22
38686: EQUAL
38687: IFFALSE 38699
// begin control := control_remote ;
38689: LD_ADDR_VAR 0 4
38693: PUSH
38694: LD_INT 2
38696: ST_TO_ADDR
// break ;
38697: GO 38701
// end ;
38699: GO 38672
38701: POP
38702: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38703: LD_VAR 0 1
38707: PPUSH
38708: LD_VAR 0 2
38712: PPUSH
38713: LD_VAR 0 3
38717: PPUSH
38718: LD_VAR 0 4
38722: PPUSH
38723: LD_VAR 0 5
38727: PPUSH
38728: CALL_OW 448
38732: IFFALSE 38767
// begin result := [ chassis , engine , control , weapon ] ;
38734: LD_ADDR_VAR 0 6
38738: PUSH
38739: LD_VAR 0 2
38743: PUSH
38744: LD_VAR 0 3
38748: PUSH
38749: LD_VAR 0 4
38753: PUSH
38754: LD_VAR 0 5
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: ST_TO_ADDR
// exit ;
38765: GO 39179
// end ; _chassis := AvailableChassisList ( factory ) ;
38767: LD_ADDR_VAR 0 9
38771: PUSH
38772: LD_VAR 0 1
38776: PPUSH
38777: CALL_OW 475
38781: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38782: LD_ADDR_VAR 0 11
38786: PUSH
38787: LD_VAR 0 1
38791: PPUSH
38792: CALL_OW 476
38796: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38797: LD_ADDR_VAR 0 12
38801: PUSH
38802: LD_VAR 0 1
38806: PPUSH
38807: CALL_OW 477
38811: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38812: LD_ADDR_VAR 0 10
38816: PUSH
38817: LD_VAR 0 1
38821: PPUSH
38822: CALL_OW 478
38826: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38827: LD_VAR 0 9
38831: NOT
38832: PUSH
38833: LD_VAR 0 11
38837: NOT
38838: OR
38839: PUSH
38840: LD_VAR 0 12
38844: NOT
38845: OR
38846: PUSH
38847: LD_VAR 0 10
38851: NOT
38852: OR
38853: IFFALSE 38888
// begin result := [ chassis , engine , control , weapon ] ;
38855: LD_ADDR_VAR 0 6
38859: PUSH
38860: LD_VAR 0 2
38864: PUSH
38865: LD_VAR 0 3
38869: PUSH
38870: LD_VAR 0 4
38874: PUSH
38875: LD_VAR 0 5
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: ST_TO_ADDR
// exit ;
38886: GO 39179
// end ; if not chassis in _chassis then
38888: LD_VAR 0 2
38892: PUSH
38893: LD_VAR 0 9
38897: IN
38898: NOT
38899: IFFALSE 38925
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38901: LD_ADDR_VAR 0 2
38905: PUSH
38906: LD_VAR 0 9
38910: PUSH
38911: LD_INT 1
38913: PPUSH
38914: LD_VAR 0 9
38918: PPUSH
38919: CALL_OW 12
38923: ARRAY
38924: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38925: LD_VAR 0 2
38929: PPUSH
38930: LD_VAR 0 3
38934: PPUSH
38935: CALL 39184 0 2
38939: NOT
38940: IFFALSE 38999
// repeat engine := _engine [ 1 ] ;
38942: LD_ADDR_VAR 0 3
38946: PUSH
38947: LD_VAR 0 11
38951: PUSH
38952: LD_INT 1
38954: ARRAY
38955: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38956: LD_ADDR_VAR 0 11
38960: PUSH
38961: LD_VAR 0 11
38965: PPUSH
38966: LD_INT 1
38968: PPUSH
38969: CALL_OW 3
38973: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38974: LD_VAR 0 2
38978: PPUSH
38979: LD_VAR 0 3
38983: PPUSH
38984: CALL 39184 0 2
38988: PUSH
38989: LD_VAR 0 11
38993: PUSH
38994: EMPTY
38995: EQUAL
38996: OR
38997: IFFALSE 38942
// if not control in _control then
38999: LD_VAR 0 4
39003: PUSH
39004: LD_VAR 0 12
39008: IN
39009: NOT
39010: IFFALSE 39036
// control := _control [ rand ( 1 , _control ) ] ;
39012: LD_ADDR_VAR 0 4
39016: PUSH
39017: LD_VAR 0 12
39021: PUSH
39022: LD_INT 1
39024: PPUSH
39025: LD_VAR 0 12
39029: PPUSH
39030: CALL_OW 12
39034: ARRAY
39035: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39036: LD_VAR 0 2
39040: PPUSH
39041: LD_VAR 0 5
39045: PPUSH
39046: CALL 39404 0 2
39050: NOT
39051: IFFALSE 39110
// repeat weapon := _weapon [ 1 ] ;
39053: LD_ADDR_VAR 0 5
39057: PUSH
39058: LD_VAR 0 10
39062: PUSH
39063: LD_INT 1
39065: ARRAY
39066: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39067: LD_ADDR_VAR 0 10
39071: PUSH
39072: LD_VAR 0 10
39076: PPUSH
39077: LD_INT 1
39079: PPUSH
39080: CALL_OW 3
39084: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39085: LD_VAR 0 2
39089: PPUSH
39090: LD_VAR 0 5
39094: PPUSH
39095: CALL 39404 0 2
39099: PUSH
39100: LD_VAR 0 10
39104: PUSH
39105: EMPTY
39106: EQUAL
39107: OR
39108: IFFALSE 39053
// result := [ ] ;
39110: LD_ADDR_VAR 0 6
39114: PUSH
39115: EMPTY
39116: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39117: LD_VAR 0 1
39121: PPUSH
39122: LD_VAR 0 2
39126: PPUSH
39127: LD_VAR 0 3
39131: PPUSH
39132: LD_VAR 0 4
39136: PPUSH
39137: LD_VAR 0 5
39141: PPUSH
39142: CALL_OW 448
39146: IFFALSE 39179
// result := [ chassis , engine , control , weapon ] ;
39148: LD_ADDR_VAR 0 6
39152: PUSH
39153: LD_VAR 0 2
39157: PUSH
39158: LD_VAR 0 3
39162: PUSH
39163: LD_VAR 0 4
39167: PUSH
39168: LD_VAR 0 5
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: ST_TO_ADDR
// end ;
39179: LD_VAR 0 6
39183: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39184: LD_INT 0
39186: PPUSH
// if not chassis or not engine then
39187: LD_VAR 0 1
39191: NOT
39192: PUSH
39193: LD_VAR 0 2
39197: NOT
39198: OR
39199: IFFALSE 39203
// exit ;
39201: GO 39399
// case engine of engine_solar :
39203: LD_VAR 0 2
39207: PUSH
39208: LD_INT 2
39210: DOUBLE
39211: EQUAL
39212: IFTRUE 39216
39214: GO 39254
39216: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39217: LD_ADDR_VAR 0 3
39221: PUSH
39222: LD_INT 11
39224: PUSH
39225: LD_INT 12
39227: PUSH
39228: LD_INT 13
39230: PUSH
39231: LD_INT 14
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: ST_TO_ADDR
39252: GO 39383
39254: LD_INT 1
39256: DOUBLE
39257: EQUAL
39258: IFTRUE 39262
39260: GO 39324
39262: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39263: LD_ADDR_VAR 0 3
39267: PUSH
39268: LD_INT 11
39270: PUSH
39271: LD_INT 12
39273: PUSH
39274: LD_INT 13
39276: PUSH
39277: LD_INT 14
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: LD_INT 2
39285: PUSH
39286: LD_INT 3
39288: PUSH
39289: LD_INT 4
39291: PUSH
39292: LD_INT 5
39294: PUSH
39295: LD_INT 21
39297: PUSH
39298: LD_INT 23
39300: PUSH
39301: LD_INT 22
39303: PUSH
39304: LD_INT 24
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: ST_TO_ADDR
39322: GO 39383
39324: LD_INT 3
39326: DOUBLE
39327: EQUAL
39328: IFTRUE 39332
39330: GO 39382
39332: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39333: LD_ADDR_VAR 0 3
39337: PUSH
39338: LD_INT 13
39340: PUSH
39341: LD_INT 14
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: LD_INT 3
39349: PUSH
39350: LD_INT 4
39352: PUSH
39353: LD_INT 5
39355: PUSH
39356: LD_INT 21
39358: PUSH
39359: LD_INT 22
39361: PUSH
39362: LD_INT 23
39364: PUSH
39365: LD_INT 24
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: ST_TO_ADDR
39380: GO 39383
39382: POP
// result := ( chassis in result ) ;
39383: LD_ADDR_VAR 0 3
39387: PUSH
39388: LD_VAR 0 1
39392: PUSH
39393: LD_VAR 0 3
39397: IN
39398: ST_TO_ADDR
// end ;
39399: LD_VAR 0 3
39403: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39404: LD_INT 0
39406: PPUSH
// if not chassis or not weapon then
39407: LD_VAR 0 1
39411: NOT
39412: PUSH
39413: LD_VAR 0 2
39417: NOT
39418: OR
39419: IFFALSE 39423
// exit ;
39421: GO 40485
// case weapon of us_machine_gun :
39423: LD_VAR 0 2
39427: PUSH
39428: LD_INT 2
39430: DOUBLE
39431: EQUAL
39432: IFTRUE 39436
39434: GO 39466
39436: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39437: LD_ADDR_VAR 0 3
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: LD_INT 3
39450: PUSH
39451: LD_INT 4
39453: PUSH
39454: LD_INT 5
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: ST_TO_ADDR
39464: GO 40469
39466: LD_INT 3
39468: DOUBLE
39469: EQUAL
39470: IFTRUE 39474
39472: GO 39504
39474: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39475: LD_ADDR_VAR 0 3
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: LD_INT 2
39485: PUSH
39486: LD_INT 3
39488: PUSH
39489: LD_INT 4
39491: PUSH
39492: LD_INT 5
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: ST_TO_ADDR
39502: GO 40469
39504: LD_INT 11
39506: DOUBLE
39507: EQUAL
39508: IFTRUE 39512
39510: GO 39542
39512: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39513: LD_ADDR_VAR 0 3
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: LD_INT 3
39526: PUSH
39527: LD_INT 4
39529: PUSH
39530: LD_INT 5
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: ST_TO_ADDR
39540: GO 40469
39542: LD_INT 4
39544: DOUBLE
39545: EQUAL
39546: IFTRUE 39550
39548: GO 39576
39550: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39551: LD_ADDR_VAR 0 3
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: LD_INT 3
39561: PUSH
39562: LD_INT 4
39564: PUSH
39565: LD_INT 5
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: ST_TO_ADDR
39574: GO 40469
39576: LD_INT 5
39578: DOUBLE
39579: EQUAL
39580: IFTRUE 39584
39582: GO 39610
39584: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39585: LD_ADDR_VAR 0 3
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: LD_INT 3
39595: PUSH
39596: LD_INT 4
39598: PUSH
39599: LD_INT 5
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: ST_TO_ADDR
39608: GO 40469
39610: LD_INT 9
39612: DOUBLE
39613: EQUAL
39614: IFTRUE 39618
39616: GO 39644
39618: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39619: LD_ADDR_VAR 0 3
39623: PUSH
39624: LD_INT 2
39626: PUSH
39627: LD_INT 3
39629: PUSH
39630: LD_INT 4
39632: PUSH
39633: LD_INT 5
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: ST_TO_ADDR
39642: GO 40469
39644: LD_INT 7
39646: DOUBLE
39647: EQUAL
39648: IFTRUE 39652
39650: GO 39678
39652: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39653: LD_ADDR_VAR 0 3
39657: PUSH
39658: LD_INT 2
39660: PUSH
39661: LD_INT 3
39663: PUSH
39664: LD_INT 4
39666: PUSH
39667: LD_INT 5
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: ST_TO_ADDR
39676: GO 40469
39678: LD_INT 12
39680: DOUBLE
39681: EQUAL
39682: IFTRUE 39686
39684: GO 39712
39686: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39687: LD_ADDR_VAR 0 3
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 3
39697: PUSH
39698: LD_INT 4
39700: PUSH
39701: LD_INT 5
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: ST_TO_ADDR
39710: GO 40469
39712: LD_INT 13
39714: DOUBLE
39715: EQUAL
39716: IFTRUE 39720
39718: GO 39746
39720: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39721: LD_ADDR_VAR 0 3
39725: PUSH
39726: LD_INT 2
39728: PUSH
39729: LD_INT 3
39731: PUSH
39732: LD_INT 4
39734: PUSH
39735: LD_INT 5
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: ST_TO_ADDR
39744: GO 40469
39746: LD_INT 14
39748: DOUBLE
39749: EQUAL
39750: IFTRUE 39754
39752: GO 39772
39754: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39755: LD_ADDR_VAR 0 3
39759: PUSH
39760: LD_INT 4
39762: PUSH
39763: LD_INT 5
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: ST_TO_ADDR
39770: GO 40469
39772: LD_INT 6
39774: DOUBLE
39775: EQUAL
39776: IFTRUE 39780
39778: GO 39798
39780: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39781: LD_ADDR_VAR 0 3
39785: PUSH
39786: LD_INT 4
39788: PUSH
39789: LD_INT 5
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: ST_TO_ADDR
39796: GO 40469
39798: LD_INT 10
39800: DOUBLE
39801: EQUAL
39802: IFTRUE 39806
39804: GO 39824
39806: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39807: LD_ADDR_VAR 0 3
39811: PUSH
39812: LD_INT 4
39814: PUSH
39815: LD_INT 5
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: ST_TO_ADDR
39822: GO 40469
39824: LD_INT 22
39826: DOUBLE
39827: EQUAL
39828: IFTRUE 39832
39830: GO 39858
39832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39833: LD_ADDR_VAR 0 3
39837: PUSH
39838: LD_INT 11
39840: PUSH
39841: LD_INT 12
39843: PUSH
39844: LD_INT 13
39846: PUSH
39847: LD_INT 14
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: ST_TO_ADDR
39856: GO 40469
39858: LD_INT 23
39860: DOUBLE
39861: EQUAL
39862: IFTRUE 39866
39864: GO 39892
39866: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39867: LD_ADDR_VAR 0 3
39871: PUSH
39872: LD_INT 11
39874: PUSH
39875: LD_INT 12
39877: PUSH
39878: LD_INT 13
39880: PUSH
39881: LD_INT 14
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: ST_TO_ADDR
39890: GO 40469
39892: LD_INT 24
39894: DOUBLE
39895: EQUAL
39896: IFTRUE 39900
39898: GO 39926
39900: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39901: LD_ADDR_VAR 0 3
39905: PUSH
39906: LD_INT 11
39908: PUSH
39909: LD_INT 12
39911: PUSH
39912: LD_INT 13
39914: PUSH
39915: LD_INT 14
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: ST_TO_ADDR
39924: GO 40469
39926: LD_INT 30
39928: DOUBLE
39929: EQUAL
39930: IFTRUE 39934
39932: GO 39960
39934: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39935: LD_ADDR_VAR 0 3
39939: PUSH
39940: LD_INT 11
39942: PUSH
39943: LD_INT 12
39945: PUSH
39946: LD_INT 13
39948: PUSH
39949: LD_INT 14
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: ST_TO_ADDR
39958: GO 40469
39960: LD_INT 25
39962: DOUBLE
39963: EQUAL
39964: IFTRUE 39968
39966: GO 39986
39968: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39969: LD_ADDR_VAR 0 3
39973: PUSH
39974: LD_INT 13
39976: PUSH
39977: LD_INT 14
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: ST_TO_ADDR
39984: GO 40469
39986: LD_INT 27
39988: DOUBLE
39989: EQUAL
39990: IFTRUE 39994
39992: GO 40012
39994: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39995: LD_ADDR_VAR 0 3
39999: PUSH
40000: LD_INT 13
40002: PUSH
40003: LD_INT 14
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: ST_TO_ADDR
40010: GO 40469
40012: LD_EXP 48
40016: DOUBLE
40017: EQUAL
40018: IFTRUE 40022
40020: GO 40048
40022: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40023: LD_ADDR_VAR 0 3
40027: PUSH
40028: LD_INT 11
40030: PUSH
40031: LD_INT 12
40033: PUSH
40034: LD_INT 13
40036: PUSH
40037: LD_INT 14
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: ST_TO_ADDR
40046: GO 40469
40048: LD_INT 28
40050: DOUBLE
40051: EQUAL
40052: IFTRUE 40056
40054: GO 40074
40056: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40057: LD_ADDR_VAR 0 3
40061: PUSH
40062: LD_INT 13
40064: PUSH
40065: LD_INT 14
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: ST_TO_ADDR
40072: GO 40469
40074: LD_INT 29
40076: DOUBLE
40077: EQUAL
40078: IFTRUE 40082
40080: GO 40100
40082: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40083: LD_ADDR_VAR 0 3
40087: PUSH
40088: LD_INT 13
40090: PUSH
40091: LD_INT 14
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: ST_TO_ADDR
40098: GO 40469
40100: LD_INT 31
40102: DOUBLE
40103: EQUAL
40104: IFTRUE 40108
40106: GO 40126
40108: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40109: LD_ADDR_VAR 0 3
40113: PUSH
40114: LD_INT 13
40116: PUSH
40117: LD_INT 14
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: ST_TO_ADDR
40124: GO 40469
40126: LD_INT 26
40128: DOUBLE
40129: EQUAL
40130: IFTRUE 40134
40132: GO 40152
40134: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40135: LD_ADDR_VAR 0 3
40139: PUSH
40140: LD_INT 13
40142: PUSH
40143: LD_INT 14
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: ST_TO_ADDR
40150: GO 40469
40152: LD_INT 42
40154: DOUBLE
40155: EQUAL
40156: IFTRUE 40160
40158: GO 40186
40160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40161: LD_ADDR_VAR 0 3
40165: PUSH
40166: LD_INT 21
40168: PUSH
40169: LD_INT 22
40171: PUSH
40172: LD_INT 23
40174: PUSH
40175: LD_INT 24
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: ST_TO_ADDR
40184: GO 40469
40186: LD_INT 43
40188: DOUBLE
40189: EQUAL
40190: IFTRUE 40194
40192: GO 40220
40194: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40195: LD_ADDR_VAR 0 3
40199: PUSH
40200: LD_INT 21
40202: PUSH
40203: LD_INT 22
40205: PUSH
40206: LD_INT 23
40208: PUSH
40209: LD_INT 24
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: ST_TO_ADDR
40218: GO 40469
40220: LD_INT 44
40222: DOUBLE
40223: EQUAL
40224: IFTRUE 40228
40226: GO 40254
40228: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40229: LD_ADDR_VAR 0 3
40233: PUSH
40234: LD_INT 21
40236: PUSH
40237: LD_INT 22
40239: PUSH
40240: LD_INT 23
40242: PUSH
40243: LD_INT 24
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: ST_TO_ADDR
40252: GO 40469
40254: LD_INT 45
40256: DOUBLE
40257: EQUAL
40258: IFTRUE 40262
40260: GO 40288
40262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40263: LD_ADDR_VAR 0 3
40267: PUSH
40268: LD_INT 21
40270: PUSH
40271: LD_INT 22
40273: PUSH
40274: LD_INT 23
40276: PUSH
40277: LD_INT 24
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: ST_TO_ADDR
40286: GO 40469
40288: LD_INT 49
40290: DOUBLE
40291: EQUAL
40292: IFTRUE 40296
40294: GO 40322
40296: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40297: LD_ADDR_VAR 0 3
40301: PUSH
40302: LD_INT 21
40304: PUSH
40305: LD_INT 22
40307: PUSH
40308: LD_INT 23
40310: PUSH
40311: LD_INT 24
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: ST_TO_ADDR
40320: GO 40469
40322: LD_INT 51
40324: DOUBLE
40325: EQUAL
40326: IFTRUE 40330
40328: GO 40356
40330: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40331: LD_ADDR_VAR 0 3
40335: PUSH
40336: LD_INT 21
40338: PUSH
40339: LD_INT 22
40341: PUSH
40342: LD_INT 23
40344: PUSH
40345: LD_INT 24
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: ST_TO_ADDR
40354: GO 40469
40356: LD_INT 52
40358: DOUBLE
40359: EQUAL
40360: IFTRUE 40364
40362: GO 40390
40364: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40365: LD_ADDR_VAR 0 3
40369: PUSH
40370: LD_INT 21
40372: PUSH
40373: LD_INT 22
40375: PUSH
40376: LD_INT 23
40378: PUSH
40379: LD_INT 24
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: ST_TO_ADDR
40388: GO 40469
40390: LD_INT 53
40392: DOUBLE
40393: EQUAL
40394: IFTRUE 40398
40396: GO 40416
40398: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40399: LD_ADDR_VAR 0 3
40403: PUSH
40404: LD_INT 23
40406: PUSH
40407: LD_INT 24
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: ST_TO_ADDR
40414: GO 40469
40416: LD_INT 46
40418: DOUBLE
40419: EQUAL
40420: IFTRUE 40424
40422: GO 40442
40424: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40425: LD_ADDR_VAR 0 3
40429: PUSH
40430: LD_INT 23
40432: PUSH
40433: LD_INT 24
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: ST_TO_ADDR
40440: GO 40469
40442: LD_INT 47
40444: DOUBLE
40445: EQUAL
40446: IFTRUE 40450
40448: GO 40468
40450: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40451: LD_ADDR_VAR 0 3
40455: PUSH
40456: LD_INT 23
40458: PUSH
40459: LD_INT 24
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: ST_TO_ADDR
40466: GO 40469
40468: POP
// result := ( chassis in result ) ;
40469: LD_ADDR_VAR 0 3
40473: PUSH
40474: LD_VAR 0 1
40478: PUSH
40479: LD_VAR 0 3
40483: IN
40484: ST_TO_ADDR
// end ;
40485: LD_VAR 0 3
40489: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40490: LD_INT 0
40492: PPUSH
40493: PPUSH
40494: PPUSH
40495: PPUSH
40496: PPUSH
40497: PPUSH
40498: PPUSH
// result := array ;
40499: LD_ADDR_VAR 0 5
40503: PUSH
40504: LD_VAR 0 1
40508: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40509: LD_VAR 0 1
40513: NOT
40514: PUSH
40515: LD_VAR 0 2
40519: NOT
40520: OR
40521: PUSH
40522: LD_VAR 0 3
40526: NOT
40527: OR
40528: PUSH
40529: LD_VAR 0 2
40533: PUSH
40534: LD_VAR 0 1
40538: GREATER
40539: OR
40540: PUSH
40541: LD_VAR 0 3
40545: PUSH
40546: LD_VAR 0 1
40550: GREATER
40551: OR
40552: IFFALSE 40556
// exit ;
40554: GO 40852
// if direction then
40556: LD_VAR 0 4
40560: IFFALSE 40624
// begin d := 1 ;
40562: LD_ADDR_VAR 0 9
40566: PUSH
40567: LD_INT 1
40569: ST_TO_ADDR
// if i_from > i_to then
40570: LD_VAR 0 2
40574: PUSH
40575: LD_VAR 0 3
40579: GREATER
40580: IFFALSE 40606
// length := ( array - i_from ) + i_to else
40582: LD_ADDR_VAR 0 11
40586: PUSH
40587: LD_VAR 0 1
40591: PUSH
40592: LD_VAR 0 2
40596: MINUS
40597: PUSH
40598: LD_VAR 0 3
40602: PLUS
40603: ST_TO_ADDR
40604: GO 40622
// length := i_to - i_from ;
40606: LD_ADDR_VAR 0 11
40610: PUSH
40611: LD_VAR 0 3
40615: PUSH
40616: LD_VAR 0 2
40620: MINUS
40621: ST_TO_ADDR
// end else
40622: GO 40685
// begin d := - 1 ;
40624: LD_ADDR_VAR 0 9
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: ST_TO_ADDR
// if i_from > i_to then
40633: LD_VAR 0 2
40637: PUSH
40638: LD_VAR 0 3
40642: GREATER
40643: IFFALSE 40663
// length := i_from - i_to else
40645: LD_ADDR_VAR 0 11
40649: PUSH
40650: LD_VAR 0 2
40654: PUSH
40655: LD_VAR 0 3
40659: MINUS
40660: ST_TO_ADDR
40661: GO 40685
// length := ( array - i_to ) + i_from ;
40663: LD_ADDR_VAR 0 11
40667: PUSH
40668: LD_VAR 0 1
40672: PUSH
40673: LD_VAR 0 3
40677: MINUS
40678: PUSH
40679: LD_VAR 0 2
40683: PLUS
40684: ST_TO_ADDR
// end ; if not length then
40685: LD_VAR 0 11
40689: NOT
40690: IFFALSE 40694
// exit ;
40692: GO 40852
// tmp := array ;
40694: LD_ADDR_VAR 0 10
40698: PUSH
40699: LD_VAR 0 1
40703: ST_TO_ADDR
// for i = 1 to length do
40704: LD_ADDR_VAR 0 6
40708: PUSH
40709: DOUBLE
40710: LD_INT 1
40712: DEC
40713: ST_TO_ADDR
40714: LD_VAR 0 11
40718: PUSH
40719: FOR_TO
40720: IFFALSE 40840
// begin for j = 1 to array do
40722: LD_ADDR_VAR 0 7
40726: PUSH
40727: DOUBLE
40728: LD_INT 1
40730: DEC
40731: ST_TO_ADDR
40732: LD_VAR 0 1
40736: PUSH
40737: FOR_TO
40738: IFFALSE 40826
// begin k := j + d ;
40740: LD_ADDR_VAR 0 8
40744: PUSH
40745: LD_VAR 0 7
40749: PUSH
40750: LD_VAR 0 9
40754: PLUS
40755: ST_TO_ADDR
// if k > array then
40756: LD_VAR 0 8
40760: PUSH
40761: LD_VAR 0 1
40765: GREATER
40766: IFFALSE 40776
// k := 1 ;
40768: LD_ADDR_VAR 0 8
40772: PUSH
40773: LD_INT 1
40775: ST_TO_ADDR
// if not k then
40776: LD_VAR 0 8
40780: NOT
40781: IFFALSE 40793
// k := array ;
40783: LD_ADDR_VAR 0 8
40787: PUSH
40788: LD_VAR 0 1
40792: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40793: LD_ADDR_VAR 0 10
40797: PUSH
40798: LD_VAR 0 10
40802: PPUSH
40803: LD_VAR 0 8
40807: PPUSH
40808: LD_VAR 0 1
40812: PUSH
40813: LD_VAR 0 7
40817: ARRAY
40818: PPUSH
40819: CALL_OW 1
40823: ST_TO_ADDR
// end ;
40824: GO 40737
40826: POP
40827: POP
// array := tmp ;
40828: LD_ADDR_VAR 0 1
40832: PUSH
40833: LD_VAR 0 10
40837: ST_TO_ADDR
// end ;
40838: GO 40719
40840: POP
40841: POP
// result := array ;
40842: LD_ADDR_VAR 0 5
40846: PUSH
40847: LD_VAR 0 1
40851: ST_TO_ADDR
// end ;
40852: LD_VAR 0 5
40856: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40857: LD_INT 0
40859: PPUSH
40860: PPUSH
// result := 0 ;
40861: LD_ADDR_VAR 0 3
40865: PUSH
40866: LD_INT 0
40868: ST_TO_ADDR
// if not array or not value in array then
40869: LD_VAR 0 1
40873: NOT
40874: PUSH
40875: LD_VAR 0 2
40879: PUSH
40880: LD_VAR 0 1
40884: IN
40885: NOT
40886: OR
40887: IFFALSE 40891
// exit ;
40889: GO 40945
// for i = 1 to array do
40891: LD_ADDR_VAR 0 4
40895: PUSH
40896: DOUBLE
40897: LD_INT 1
40899: DEC
40900: ST_TO_ADDR
40901: LD_VAR 0 1
40905: PUSH
40906: FOR_TO
40907: IFFALSE 40943
// if value = array [ i ] then
40909: LD_VAR 0 2
40913: PUSH
40914: LD_VAR 0 1
40918: PUSH
40919: LD_VAR 0 4
40923: ARRAY
40924: EQUAL
40925: IFFALSE 40941
// begin result := i ;
40927: LD_ADDR_VAR 0 3
40931: PUSH
40932: LD_VAR 0 4
40936: ST_TO_ADDR
// exit ;
40937: POP
40938: POP
40939: GO 40945
// end ;
40941: GO 40906
40943: POP
40944: POP
// end ;
40945: LD_VAR 0 3
40949: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40950: LD_INT 0
40952: PPUSH
// vc_chassis := chassis ;
40953: LD_ADDR_OWVAR 37
40957: PUSH
40958: LD_VAR 0 1
40962: ST_TO_ADDR
// vc_engine := engine ;
40963: LD_ADDR_OWVAR 39
40967: PUSH
40968: LD_VAR 0 2
40972: ST_TO_ADDR
// vc_control := control ;
40973: LD_ADDR_OWVAR 38
40977: PUSH
40978: LD_VAR 0 3
40982: ST_TO_ADDR
// vc_weapon := weapon ;
40983: LD_ADDR_OWVAR 40
40987: PUSH
40988: LD_VAR 0 4
40992: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40993: LD_ADDR_OWVAR 41
40997: PUSH
40998: LD_VAR 0 5
41002: ST_TO_ADDR
// end ;
41003: LD_VAR 0 6
41007: RET
// export function WantPlant ( unit ) ; var task ; begin
41008: LD_INT 0
41010: PPUSH
41011: PPUSH
// result := false ;
41012: LD_ADDR_VAR 0 2
41016: PUSH
41017: LD_INT 0
41019: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41020: LD_ADDR_VAR 0 3
41024: PUSH
41025: LD_VAR 0 1
41029: PPUSH
41030: CALL_OW 437
41034: ST_TO_ADDR
// if task then
41035: LD_VAR 0 3
41039: IFFALSE 41067
// if task [ 1 ] [ 1 ] = p then
41041: LD_VAR 0 3
41045: PUSH
41046: LD_INT 1
41048: ARRAY
41049: PUSH
41050: LD_INT 1
41052: ARRAY
41053: PUSH
41054: LD_STRING p
41056: EQUAL
41057: IFFALSE 41067
// result := true ;
41059: LD_ADDR_VAR 0 2
41063: PUSH
41064: LD_INT 1
41066: ST_TO_ADDR
// end ;
41067: LD_VAR 0 2
41071: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41072: LD_INT 0
41074: PPUSH
41075: PPUSH
41076: PPUSH
41077: PPUSH
// if pos < 1 then
41078: LD_VAR 0 2
41082: PUSH
41083: LD_INT 1
41085: LESS
41086: IFFALSE 41090
// exit ;
41088: GO 41393
// if pos = 1 then
41090: LD_VAR 0 2
41094: PUSH
41095: LD_INT 1
41097: EQUAL
41098: IFFALSE 41131
// result := Replace ( arr , pos [ 1 ] , value ) else
41100: LD_ADDR_VAR 0 4
41104: PUSH
41105: LD_VAR 0 1
41109: PPUSH
41110: LD_VAR 0 2
41114: PUSH
41115: LD_INT 1
41117: ARRAY
41118: PPUSH
41119: LD_VAR 0 3
41123: PPUSH
41124: CALL_OW 1
41128: ST_TO_ADDR
41129: GO 41393
// begin tmp := arr ;
41131: LD_ADDR_VAR 0 6
41135: PUSH
41136: LD_VAR 0 1
41140: ST_TO_ADDR
// s_arr := [ tmp ] ;
41141: LD_ADDR_VAR 0 7
41145: PUSH
41146: LD_VAR 0 6
41150: PUSH
41151: EMPTY
41152: LIST
41153: ST_TO_ADDR
// for i = 1 to pos - 1 do
41154: LD_ADDR_VAR 0 5
41158: PUSH
41159: DOUBLE
41160: LD_INT 1
41162: DEC
41163: ST_TO_ADDR
41164: LD_VAR 0 2
41168: PUSH
41169: LD_INT 1
41171: MINUS
41172: PUSH
41173: FOR_TO
41174: IFFALSE 41219
// begin tmp := tmp [ pos [ i ] ] ;
41176: LD_ADDR_VAR 0 6
41180: PUSH
41181: LD_VAR 0 6
41185: PUSH
41186: LD_VAR 0 2
41190: PUSH
41191: LD_VAR 0 5
41195: ARRAY
41196: ARRAY
41197: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41198: LD_ADDR_VAR 0 7
41202: PUSH
41203: LD_VAR 0 7
41207: PUSH
41208: LD_VAR 0 6
41212: PUSH
41213: EMPTY
41214: LIST
41215: ADD
41216: ST_TO_ADDR
// end ;
41217: GO 41173
41219: POP
41220: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41221: LD_ADDR_VAR 0 6
41225: PUSH
41226: LD_VAR 0 6
41230: PPUSH
41231: LD_VAR 0 2
41235: PUSH
41236: LD_VAR 0 2
41240: ARRAY
41241: PPUSH
41242: LD_VAR 0 3
41246: PPUSH
41247: CALL_OW 1
41251: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41252: LD_ADDR_VAR 0 7
41256: PUSH
41257: LD_VAR 0 7
41261: PPUSH
41262: LD_VAR 0 7
41266: PPUSH
41267: LD_VAR 0 6
41271: PPUSH
41272: CALL_OW 1
41276: ST_TO_ADDR
// for i = s_arr downto 2 do
41277: LD_ADDR_VAR 0 5
41281: PUSH
41282: DOUBLE
41283: LD_VAR 0 7
41287: INC
41288: ST_TO_ADDR
41289: LD_INT 2
41291: PUSH
41292: FOR_DOWNTO
41293: IFFALSE 41377
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41295: LD_ADDR_VAR 0 6
41299: PUSH
41300: LD_VAR 0 7
41304: PUSH
41305: LD_VAR 0 5
41309: PUSH
41310: LD_INT 1
41312: MINUS
41313: ARRAY
41314: PPUSH
41315: LD_VAR 0 2
41319: PUSH
41320: LD_VAR 0 5
41324: PUSH
41325: LD_INT 1
41327: MINUS
41328: ARRAY
41329: PPUSH
41330: LD_VAR 0 7
41334: PUSH
41335: LD_VAR 0 5
41339: ARRAY
41340: PPUSH
41341: CALL_OW 1
41345: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41346: LD_ADDR_VAR 0 7
41350: PUSH
41351: LD_VAR 0 7
41355: PPUSH
41356: LD_VAR 0 5
41360: PUSH
41361: LD_INT 1
41363: MINUS
41364: PPUSH
41365: LD_VAR 0 6
41369: PPUSH
41370: CALL_OW 1
41374: ST_TO_ADDR
// end ;
41375: GO 41292
41377: POP
41378: POP
// result := s_arr [ 1 ] ;
41379: LD_ADDR_VAR 0 4
41383: PUSH
41384: LD_VAR 0 7
41388: PUSH
41389: LD_INT 1
41391: ARRAY
41392: ST_TO_ADDR
// end ; end ;
41393: LD_VAR 0 4
41397: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41398: LD_INT 0
41400: PPUSH
41401: PPUSH
// if not list then
41402: LD_VAR 0 1
41406: NOT
41407: IFFALSE 41411
// exit ;
41409: GO 41502
// i := list [ pos1 ] ;
41411: LD_ADDR_VAR 0 5
41415: PUSH
41416: LD_VAR 0 1
41420: PUSH
41421: LD_VAR 0 2
41425: ARRAY
41426: ST_TO_ADDR
// if not i then
41427: LD_VAR 0 5
41431: NOT
41432: IFFALSE 41436
// exit ;
41434: GO 41502
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41436: LD_ADDR_VAR 0 1
41440: PUSH
41441: LD_VAR 0 1
41445: PPUSH
41446: LD_VAR 0 2
41450: PPUSH
41451: LD_VAR 0 1
41455: PUSH
41456: LD_VAR 0 3
41460: ARRAY
41461: PPUSH
41462: CALL_OW 1
41466: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41467: LD_ADDR_VAR 0 1
41471: PUSH
41472: LD_VAR 0 1
41476: PPUSH
41477: LD_VAR 0 3
41481: PPUSH
41482: LD_VAR 0 5
41486: PPUSH
41487: CALL_OW 1
41491: ST_TO_ADDR
// result := list ;
41492: LD_ADDR_VAR 0 4
41496: PUSH
41497: LD_VAR 0 1
41501: ST_TO_ADDR
// end ;
41502: LD_VAR 0 4
41506: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41507: LD_INT 0
41509: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41510: LD_ADDR_VAR 0 5
41514: PUSH
41515: LD_VAR 0 1
41519: PPUSH
41520: CALL_OW 250
41524: PPUSH
41525: LD_VAR 0 1
41529: PPUSH
41530: CALL_OW 251
41534: PPUSH
41535: LD_VAR 0 2
41539: PPUSH
41540: LD_VAR 0 3
41544: PPUSH
41545: LD_VAR 0 4
41549: PPUSH
41550: CALL 41560 0 5
41554: ST_TO_ADDR
// end ;
41555: LD_VAR 0 5
41559: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41560: LD_INT 0
41562: PPUSH
41563: PPUSH
41564: PPUSH
41565: PPUSH
// if not list then
41566: LD_VAR 0 3
41570: NOT
41571: IFFALSE 41575
// exit ;
41573: GO 41963
// result := [ ] ;
41575: LD_ADDR_VAR 0 6
41579: PUSH
41580: EMPTY
41581: ST_TO_ADDR
// for i in list do
41582: LD_ADDR_VAR 0 7
41586: PUSH
41587: LD_VAR 0 3
41591: PUSH
41592: FOR_IN
41593: IFFALSE 41795
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41595: LD_ADDR_VAR 0 9
41599: PUSH
41600: LD_VAR 0 7
41604: PPUSH
41605: LD_VAR 0 1
41609: PPUSH
41610: LD_VAR 0 2
41614: PPUSH
41615: CALL_OW 297
41619: ST_TO_ADDR
// if not result then
41620: LD_VAR 0 6
41624: NOT
41625: IFFALSE 41651
// result := [ [ i , tmp ] ] else
41627: LD_ADDR_VAR 0 6
41631: PUSH
41632: LD_VAR 0 7
41636: PUSH
41637: LD_VAR 0 9
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: EMPTY
41647: LIST
41648: ST_TO_ADDR
41649: GO 41793
// begin if result [ result ] [ 2 ] < tmp then
41651: LD_VAR 0 6
41655: PUSH
41656: LD_VAR 0 6
41660: ARRAY
41661: PUSH
41662: LD_INT 2
41664: ARRAY
41665: PUSH
41666: LD_VAR 0 9
41670: LESS
41671: IFFALSE 41713
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41673: LD_ADDR_VAR 0 6
41677: PUSH
41678: LD_VAR 0 6
41682: PPUSH
41683: LD_VAR 0 6
41687: PUSH
41688: LD_INT 1
41690: PLUS
41691: PPUSH
41692: LD_VAR 0 7
41696: PUSH
41697: LD_VAR 0 9
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PPUSH
41706: CALL_OW 2
41710: ST_TO_ADDR
41711: GO 41793
// for j = 1 to result do
41713: LD_ADDR_VAR 0 8
41717: PUSH
41718: DOUBLE
41719: LD_INT 1
41721: DEC
41722: ST_TO_ADDR
41723: LD_VAR 0 6
41727: PUSH
41728: FOR_TO
41729: IFFALSE 41791
// begin if tmp < result [ j ] [ 2 ] then
41731: LD_VAR 0 9
41735: PUSH
41736: LD_VAR 0 6
41740: PUSH
41741: LD_VAR 0 8
41745: ARRAY
41746: PUSH
41747: LD_INT 2
41749: ARRAY
41750: LESS
41751: IFFALSE 41789
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41753: LD_ADDR_VAR 0 6
41757: PUSH
41758: LD_VAR 0 6
41762: PPUSH
41763: LD_VAR 0 8
41767: PPUSH
41768: LD_VAR 0 7
41772: PUSH
41773: LD_VAR 0 9
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PPUSH
41782: CALL_OW 2
41786: ST_TO_ADDR
// break ;
41787: GO 41791
// end ; end ;
41789: GO 41728
41791: POP
41792: POP
// end ; end ;
41793: GO 41592
41795: POP
41796: POP
// if result and not asc then
41797: LD_VAR 0 6
41801: PUSH
41802: LD_VAR 0 4
41806: NOT
41807: AND
41808: IFFALSE 41883
// begin tmp := result ;
41810: LD_ADDR_VAR 0 9
41814: PUSH
41815: LD_VAR 0 6
41819: ST_TO_ADDR
// for i = tmp downto 1 do
41820: LD_ADDR_VAR 0 7
41824: PUSH
41825: DOUBLE
41826: LD_VAR 0 9
41830: INC
41831: ST_TO_ADDR
41832: LD_INT 1
41834: PUSH
41835: FOR_DOWNTO
41836: IFFALSE 41881
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41838: LD_ADDR_VAR 0 6
41842: PUSH
41843: LD_VAR 0 6
41847: PPUSH
41848: LD_VAR 0 9
41852: PUSH
41853: LD_VAR 0 7
41857: MINUS
41858: PUSH
41859: LD_INT 1
41861: PLUS
41862: PPUSH
41863: LD_VAR 0 9
41867: PUSH
41868: LD_VAR 0 7
41872: ARRAY
41873: PPUSH
41874: CALL_OW 1
41878: ST_TO_ADDR
41879: GO 41835
41881: POP
41882: POP
// end ; tmp := [ ] ;
41883: LD_ADDR_VAR 0 9
41887: PUSH
41888: EMPTY
41889: ST_TO_ADDR
// if mode then
41890: LD_VAR 0 5
41894: IFFALSE 41963
// begin for i = 1 to result do
41896: LD_ADDR_VAR 0 7
41900: PUSH
41901: DOUBLE
41902: LD_INT 1
41904: DEC
41905: ST_TO_ADDR
41906: LD_VAR 0 6
41910: PUSH
41911: FOR_TO
41912: IFFALSE 41951
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41914: LD_ADDR_VAR 0 9
41918: PUSH
41919: LD_VAR 0 9
41923: PPUSH
41924: LD_VAR 0 7
41928: PPUSH
41929: LD_VAR 0 6
41933: PUSH
41934: LD_VAR 0 7
41938: ARRAY
41939: PUSH
41940: LD_INT 1
41942: ARRAY
41943: PPUSH
41944: CALL_OW 1
41948: ST_TO_ADDR
41949: GO 41911
41951: POP
41952: POP
// result := tmp ;
41953: LD_ADDR_VAR 0 6
41957: PUSH
41958: LD_VAR 0 9
41962: ST_TO_ADDR
// end ; end ;
41963: LD_VAR 0 6
41967: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41968: LD_INT 0
41970: PPUSH
41971: PPUSH
41972: PPUSH
41973: PPUSH
41974: PPUSH
41975: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41976: LD_ADDR_VAR 0 5
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: ST_TO_ADDR
// if not x or not y then
41998: LD_VAR 0 2
42002: NOT
42003: PUSH
42004: LD_VAR 0 3
42008: NOT
42009: OR
42010: IFFALSE 42014
// exit ;
42012: GO 43666
// if not range then
42014: LD_VAR 0 4
42018: NOT
42019: IFFALSE 42029
// range := 10 ;
42021: LD_ADDR_VAR 0 4
42025: PUSH
42026: LD_INT 10
42028: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42029: LD_ADDR_VAR 0 8
42033: PUSH
42034: LD_INT 81
42036: PUSH
42037: LD_VAR 0 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 92
42048: PUSH
42049: LD_VAR 0 2
42053: PUSH
42054: LD_VAR 0 3
42058: PUSH
42059: LD_VAR 0 4
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: LD_INT 21
42075: PUSH
42076: LD_INT 3
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: LIST
42091: PPUSH
42092: CALL_OW 69
42096: ST_TO_ADDR
// if not tmp then
42097: LD_VAR 0 8
42101: NOT
42102: IFFALSE 42106
// exit ;
42104: GO 43666
// for i in tmp do
42106: LD_ADDR_VAR 0 6
42110: PUSH
42111: LD_VAR 0 8
42115: PUSH
42116: FOR_IN
42117: IFFALSE 43641
// begin points := [ 0 , 0 , 0 ] ;
42119: LD_ADDR_VAR 0 9
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: LIST
42137: ST_TO_ADDR
// bpoints := 1 ;
42138: LD_ADDR_VAR 0 10
42142: PUSH
42143: LD_INT 1
42145: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42146: LD_VAR 0 6
42150: PPUSH
42151: CALL_OW 247
42155: PUSH
42156: LD_INT 1
42158: DOUBLE
42159: EQUAL
42160: IFTRUE 42164
42162: GO 42742
42164: POP
// begin if GetClass ( i ) = 1 then
42165: LD_VAR 0 6
42169: PPUSH
42170: CALL_OW 257
42174: PUSH
42175: LD_INT 1
42177: EQUAL
42178: IFFALSE 42199
// points := [ 10 , 5 , 3 ] ;
42180: LD_ADDR_VAR 0 9
42184: PUSH
42185: LD_INT 10
42187: PUSH
42188: LD_INT 5
42190: PUSH
42191: LD_INT 3
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42199: LD_VAR 0 6
42203: PPUSH
42204: CALL_OW 257
42208: PUSH
42209: LD_INT 2
42211: PUSH
42212: LD_INT 3
42214: PUSH
42215: LD_INT 4
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: LIST
42222: IN
42223: IFFALSE 42244
// points := [ 3 , 2 , 1 ] ;
42225: LD_ADDR_VAR 0 9
42229: PUSH
42230: LD_INT 3
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: LIST
42243: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42244: LD_VAR 0 6
42248: PPUSH
42249: CALL_OW 257
42253: PUSH
42254: LD_INT 5
42256: EQUAL
42257: IFFALSE 42278
// points := [ 130 , 5 , 2 ] ;
42259: LD_ADDR_VAR 0 9
42263: PUSH
42264: LD_INT 130
42266: PUSH
42267: LD_INT 5
42269: PUSH
42270: LD_INT 2
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: LIST
42277: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42278: LD_VAR 0 6
42282: PPUSH
42283: CALL_OW 257
42287: PUSH
42288: LD_INT 8
42290: EQUAL
42291: IFFALSE 42312
// points := [ 35 , 35 , 30 ] ;
42293: LD_ADDR_VAR 0 9
42297: PUSH
42298: LD_INT 35
42300: PUSH
42301: LD_INT 35
42303: PUSH
42304: LD_INT 30
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: LIST
42311: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42312: LD_VAR 0 6
42316: PPUSH
42317: CALL_OW 257
42321: PUSH
42322: LD_INT 9
42324: EQUAL
42325: IFFALSE 42346
// points := [ 20 , 55 , 40 ] ;
42327: LD_ADDR_VAR 0 9
42331: PUSH
42332: LD_INT 20
42334: PUSH
42335: LD_INT 55
42337: PUSH
42338: LD_INT 40
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42346: LD_VAR 0 6
42350: PPUSH
42351: CALL_OW 257
42355: PUSH
42356: LD_INT 12
42358: PUSH
42359: LD_INT 16
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: IN
42366: IFFALSE 42387
// points := [ 5 , 3 , 2 ] ;
42368: LD_ADDR_VAR 0 9
42372: PUSH
42373: LD_INT 5
42375: PUSH
42376: LD_INT 3
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: LIST
42386: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42387: LD_VAR 0 6
42391: PPUSH
42392: CALL_OW 257
42396: PUSH
42397: LD_INT 17
42399: EQUAL
42400: IFFALSE 42421
// points := [ 100 , 50 , 75 ] ;
42402: LD_ADDR_VAR 0 9
42406: PUSH
42407: LD_INT 100
42409: PUSH
42410: LD_INT 50
42412: PUSH
42413: LD_INT 75
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: LIST
42420: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42421: LD_VAR 0 6
42425: PPUSH
42426: CALL_OW 257
42430: PUSH
42431: LD_INT 15
42433: EQUAL
42434: IFFALSE 42455
// points := [ 10 , 5 , 3 ] ;
42436: LD_ADDR_VAR 0 9
42440: PUSH
42441: LD_INT 10
42443: PUSH
42444: LD_INT 5
42446: PUSH
42447: LD_INT 3
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: LIST
42454: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42455: LD_VAR 0 6
42459: PPUSH
42460: CALL_OW 257
42464: PUSH
42465: LD_INT 14
42467: EQUAL
42468: IFFALSE 42489
// points := [ 10 , 0 , 0 ] ;
42470: LD_ADDR_VAR 0 9
42474: PUSH
42475: LD_INT 10
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: LIST
42488: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42489: LD_VAR 0 6
42493: PPUSH
42494: CALL_OW 257
42498: PUSH
42499: LD_INT 11
42501: EQUAL
42502: IFFALSE 42523
// points := [ 30 , 10 , 5 ] ;
42504: LD_ADDR_VAR 0 9
42508: PUSH
42509: LD_INT 30
42511: PUSH
42512: LD_INT 10
42514: PUSH
42515: LD_INT 5
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: LIST
42522: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42523: LD_VAR 0 1
42527: PPUSH
42528: LD_INT 5
42530: PPUSH
42531: CALL_OW 321
42535: PUSH
42536: LD_INT 2
42538: EQUAL
42539: IFFALSE 42556
// bpoints := bpoints * 1.8 ;
42541: LD_ADDR_VAR 0 10
42545: PUSH
42546: LD_VAR 0 10
42550: PUSH
42551: LD_REAL  1.80000000000000E+0000
42554: MUL
42555: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42556: LD_VAR 0 6
42560: PPUSH
42561: CALL_OW 257
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: LD_INT 3
42574: PUSH
42575: LD_INT 4
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: IN
42584: PUSH
42585: LD_VAR 0 1
42589: PPUSH
42590: LD_INT 51
42592: PPUSH
42593: CALL_OW 321
42597: PUSH
42598: LD_INT 2
42600: EQUAL
42601: AND
42602: IFFALSE 42619
// bpoints := bpoints * 1.2 ;
42604: LD_ADDR_VAR 0 10
42608: PUSH
42609: LD_VAR 0 10
42613: PUSH
42614: LD_REAL  1.20000000000000E+0000
42617: MUL
42618: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42619: LD_VAR 0 6
42623: PPUSH
42624: CALL_OW 257
42628: PUSH
42629: LD_INT 5
42631: PUSH
42632: LD_INT 7
42634: PUSH
42635: LD_INT 9
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: LIST
42642: IN
42643: PUSH
42644: LD_VAR 0 1
42648: PPUSH
42649: LD_INT 52
42651: PPUSH
42652: CALL_OW 321
42656: PUSH
42657: LD_INT 2
42659: EQUAL
42660: AND
42661: IFFALSE 42678
// bpoints := bpoints * 1.5 ;
42663: LD_ADDR_VAR 0 10
42667: PUSH
42668: LD_VAR 0 10
42672: PUSH
42673: LD_REAL  1.50000000000000E+0000
42676: MUL
42677: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42678: LD_VAR 0 1
42682: PPUSH
42683: LD_INT 66
42685: PPUSH
42686: CALL_OW 321
42690: PUSH
42691: LD_INT 2
42693: EQUAL
42694: IFFALSE 42711
// bpoints := bpoints * 1.1 ;
42696: LD_ADDR_VAR 0 10
42700: PUSH
42701: LD_VAR 0 10
42705: PUSH
42706: LD_REAL  1.10000000000000E+0000
42709: MUL
42710: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42711: LD_ADDR_VAR 0 10
42715: PUSH
42716: LD_VAR 0 10
42720: PUSH
42721: LD_VAR 0 6
42725: PPUSH
42726: LD_INT 1
42728: PPUSH
42729: CALL_OW 259
42733: PUSH
42734: LD_REAL  1.15000000000000E+0000
42737: MUL
42738: MUL
42739: ST_TO_ADDR
// end ; unit_vehicle :
42740: GO 43570
42742: LD_INT 2
42744: DOUBLE
42745: EQUAL
42746: IFTRUE 42750
42748: GO 43558
42750: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42751: LD_VAR 0 6
42755: PPUSH
42756: CALL_OW 264
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: LD_INT 42
42766: PUSH
42767: LD_INT 24
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: IN
42775: IFFALSE 42796
// points := [ 25 , 5 , 3 ] ;
42777: LD_ADDR_VAR 0 9
42781: PUSH
42782: LD_INT 25
42784: PUSH
42785: LD_INT 5
42787: PUSH
42788: LD_INT 3
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: LIST
42795: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42796: LD_VAR 0 6
42800: PPUSH
42801: CALL_OW 264
42805: PUSH
42806: LD_INT 4
42808: PUSH
42809: LD_INT 43
42811: PUSH
42812: LD_INT 25
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: LIST
42819: IN
42820: IFFALSE 42841
// points := [ 40 , 15 , 5 ] ;
42822: LD_ADDR_VAR 0 9
42826: PUSH
42827: LD_INT 40
42829: PUSH
42830: LD_INT 15
42832: PUSH
42833: LD_INT 5
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: LIST
42840: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42841: LD_VAR 0 6
42845: PPUSH
42846: CALL_OW 264
42850: PUSH
42851: LD_INT 3
42853: PUSH
42854: LD_INT 23
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: IN
42861: IFFALSE 42882
// points := [ 7 , 25 , 8 ] ;
42863: LD_ADDR_VAR 0 9
42867: PUSH
42868: LD_INT 7
42870: PUSH
42871: LD_INT 25
42873: PUSH
42874: LD_INT 8
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: LIST
42881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42882: LD_VAR 0 6
42886: PPUSH
42887: CALL_OW 264
42891: PUSH
42892: LD_INT 5
42894: PUSH
42895: LD_INT 27
42897: PUSH
42898: LD_INT 44
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: IN
42906: IFFALSE 42927
// points := [ 14 , 50 , 16 ] ;
42908: LD_ADDR_VAR 0 9
42912: PUSH
42913: LD_INT 14
42915: PUSH
42916: LD_INT 50
42918: PUSH
42919: LD_INT 16
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: LIST
42926: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42927: LD_VAR 0 6
42931: PPUSH
42932: CALL_OW 264
42936: PUSH
42937: LD_INT 6
42939: PUSH
42940: LD_INT 46
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: IN
42947: IFFALSE 42968
// points := [ 32 , 120 , 70 ] ;
42949: LD_ADDR_VAR 0 9
42953: PUSH
42954: LD_INT 32
42956: PUSH
42957: LD_INT 120
42959: PUSH
42960: LD_INT 70
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: LIST
42967: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42968: LD_VAR 0 6
42972: PPUSH
42973: CALL_OW 264
42977: PUSH
42978: LD_INT 7
42980: PUSH
42981: LD_INT 28
42983: PUSH
42984: LD_INT 45
42986: PUSH
42987: LD_EXP 48
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: IN
42998: IFFALSE 43019
// points := [ 35 , 20 , 45 ] ;
43000: LD_ADDR_VAR 0 9
43004: PUSH
43005: LD_INT 35
43007: PUSH
43008: LD_INT 20
43010: PUSH
43011: LD_INT 45
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: LIST
43018: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43019: LD_VAR 0 6
43023: PPUSH
43024: CALL_OW 264
43028: PUSH
43029: LD_INT 47
43031: PUSH
43032: EMPTY
43033: LIST
43034: IN
43035: IFFALSE 43056
// points := [ 67 , 45 , 75 ] ;
43037: LD_ADDR_VAR 0 9
43041: PUSH
43042: LD_INT 67
43044: PUSH
43045: LD_INT 45
43047: PUSH
43048: LD_INT 75
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: LIST
43055: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43056: LD_VAR 0 6
43060: PPUSH
43061: CALL_OW 264
43065: PUSH
43066: LD_INT 26
43068: PUSH
43069: EMPTY
43070: LIST
43071: IN
43072: IFFALSE 43093
// points := [ 120 , 30 , 80 ] ;
43074: LD_ADDR_VAR 0 9
43078: PUSH
43079: LD_INT 120
43081: PUSH
43082: LD_INT 30
43084: PUSH
43085: LD_INT 80
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: LIST
43092: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43093: LD_VAR 0 6
43097: PPUSH
43098: CALL_OW 264
43102: PUSH
43103: LD_INT 22
43105: PUSH
43106: EMPTY
43107: LIST
43108: IN
43109: IFFALSE 43130
// points := [ 40 , 1 , 1 ] ;
43111: LD_ADDR_VAR 0 9
43115: PUSH
43116: LD_INT 40
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: LIST
43129: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43130: LD_VAR 0 6
43134: PPUSH
43135: CALL_OW 264
43139: PUSH
43140: LD_INT 29
43142: PUSH
43143: EMPTY
43144: LIST
43145: IN
43146: IFFALSE 43167
// points := [ 70 , 200 , 400 ] ;
43148: LD_ADDR_VAR 0 9
43152: PUSH
43153: LD_INT 70
43155: PUSH
43156: LD_INT 200
43158: PUSH
43159: LD_INT 400
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43167: LD_VAR 0 6
43171: PPUSH
43172: CALL_OW 264
43176: PUSH
43177: LD_INT 14
43179: PUSH
43180: LD_INT 53
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: IN
43187: IFFALSE 43208
// points := [ 40 , 10 , 20 ] ;
43189: LD_ADDR_VAR 0 9
43193: PUSH
43194: LD_INT 40
43196: PUSH
43197: LD_INT 10
43199: PUSH
43200: LD_INT 20
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: LIST
43207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43208: LD_VAR 0 6
43212: PPUSH
43213: CALL_OW 264
43217: PUSH
43218: LD_INT 9
43220: PUSH
43221: EMPTY
43222: LIST
43223: IN
43224: IFFALSE 43245
// points := [ 5 , 70 , 20 ] ;
43226: LD_ADDR_VAR 0 9
43230: PUSH
43231: LD_INT 5
43233: PUSH
43234: LD_INT 70
43236: PUSH
43237: LD_INT 20
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: LIST
43244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43245: LD_VAR 0 6
43249: PPUSH
43250: CALL_OW 264
43254: PUSH
43255: LD_INT 10
43257: PUSH
43258: EMPTY
43259: LIST
43260: IN
43261: IFFALSE 43282
// points := [ 35 , 110 , 70 ] ;
43263: LD_ADDR_VAR 0 9
43267: PUSH
43268: LD_INT 35
43270: PUSH
43271: LD_INT 110
43273: PUSH
43274: LD_INT 70
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43282: LD_VAR 0 6
43286: PPUSH
43287: CALL_OW 265
43291: PUSH
43292: LD_INT 25
43294: EQUAL
43295: IFFALSE 43316
// points := [ 80 , 65 , 100 ] ;
43297: LD_ADDR_VAR 0 9
43301: PUSH
43302: LD_INT 80
43304: PUSH
43305: LD_INT 65
43307: PUSH
43308: LD_INT 100
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: LIST
43315: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43316: LD_VAR 0 6
43320: PPUSH
43321: CALL_OW 263
43325: PUSH
43326: LD_INT 1
43328: EQUAL
43329: IFFALSE 43364
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43331: LD_ADDR_VAR 0 10
43335: PUSH
43336: LD_VAR 0 10
43340: PUSH
43341: LD_VAR 0 6
43345: PPUSH
43346: CALL_OW 311
43350: PPUSH
43351: LD_INT 3
43353: PPUSH
43354: CALL_OW 259
43358: PUSH
43359: LD_INT 4
43361: MUL
43362: MUL
43363: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43364: LD_VAR 0 6
43368: PPUSH
43369: CALL_OW 263
43373: PUSH
43374: LD_INT 2
43376: EQUAL
43377: IFFALSE 43428
// begin j := IsControledBy ( i ) ;
43379: LD_ADDR_VAR 0 7
43383: PUSH
43384: LD_VAR 0 6
43388: PPUSH
43389: CALL_OW 312
43393: ST_TO_ADDR
// if j then
43394: LD_VAR 0 7
43398: IFFALSE 43428
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43400: LD_ADDR_VAR 0 10
43404: PUSH
43405: LD_VAR 0 10
43409: PUSH
43410: LD_VAR 0 7
43414: PPUSH
43415: LD_INT 3
43417: PPUSH
43418: CALL_OW 259
43422: PUSH
43423: LD_INT 3
43425: MUL
43426: MUL
43427: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43428: LD_VAR 0 6
43432: PPUSH
43433: CALL_OW 264
43437: PUSH
43438: LD_INT 5
43440: PUSH
43441: LD_INT 6
43443: PUSH
43444: LD_INT 46
43446: PUSH
43447: LD_INT 44
43449: PUSH
43450: LD_INT 47
43452: PUSH
43453: LD_INT 45
43455: PUSH
43456: LD_INT 28
43458: PUSH
43459: LD_INT 7
43461: PUSH
43462: LD_INT 27
43464: PUSH
43465: LD_INT 29
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: IN
43480: PUSH
43481: LD_VAR 0 1
43485: PPUSH
43486: LD_INT 52
43488: PPUSH
43489: CALL_OW 321
43493: PUSH
43494: LD_INT 2
43496: EQUAL
43497: AND
43498: IFFALSE 43515
// bpoints := bpoints * 1.2 ;
43500: LD_ADDR_VAR 0 10
43504: PUSH
43505: LD_VAR 0 10
43509: PUSH
43510: LD_REAL  1.20000000000000E+0000
43513: MUL
43514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43515: LD_VAR 0 6
43519: PPUSH
43520: CALL_OW 264
43524: PUSH
43525: LD_INT 6
43527: PUSH
43528: LD_INT 46
43530: PUSH
43531: LD_INT 47
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: LIST
43538: IN
43539: IFFALSE 43556
// bpoints := bpoints * 1.2 ;
43541: LD_ADDR_VAR 0 10
43545: PUSH
43546: LD_VAR 0 10
43550: PUSH
43551: LD_REAL  1.20000000000000E+0000
43554: MUL
43555: ST_TO_ADDR
// end ; unit_building :
43556: GO 43570
43558: LD_INT 3
43560: DOUBLE
43561: EQUAL
43562: IFTRUE 43566
43564: GO 43569
43566: POP
// ; end ;
43567: GO 43570
43569: POP
// for j = 1 to 3 do
43570: LD_ADDR_VAR 0 7
43574: PUSH
43575: DOUBLE
43576: LD_INT 1
43578: DEC
43579: ST_TO_ADDR
43580: LD_INT 3
43582: PUSH
43583: FOR_TO
43584: IFFALSE 43637
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43586: LD_ADDR_VAR 0 5
43590: PUSH
43591: LD_VAR 0 5
43595: PPUSH
43596: LD_VAR 0 7
43600: PPUSH
43601: LD_VAR 0 5
43605: PUSH
43606: LD_VAR 0 7
43610: ARRAY
43611: PUSH
43612: LD_VAR 0 9
43616: PUSH
43617: LD_VAR 0 7
43621: ARRAY
43622: PUSH
43623: LD_VAR 0 10
43627: MUL
43628: PLUS
43629: PPUSH
43630: CALL_OW 1
43634: ST_TO_ADDR
43635: GO 43583
43637: POP
43638: POP
// end ;
43639: GO 42116
43641: POP
43642: POP
// result := Replace ( result , 4 , tmp ) ;
43643: LD_ADDR_VAR 0 5
43647: PUSH
43648: LD_VAR 0 5
43652: PPUSH
43653: LD_INT 4
43655: PPUSH
43656: LD_VAR 0 8
43660: PPUSH
43661: CALL_OW 1
43665: ST_TO_ADDR
// end ;
43666: LD_VAR 0 5
43670: RET
// export function DangerAtRange ( unit , range ) ; begin
43671: LD_INT 0
43673: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43674: LD_ADDR_VAR 0 3
43678: PUSH
43679: LD_VAR 0 1
43683: PPUSH
43684: CALL_OW 255
43688: PPUSH
43689: LD_VAR 0 1
43693: PPUSH
43694: CALL_OW 250
43698: PPUSH
43699: LD_VAR 0 1
43703: PPUSH
43704: CALL_OW 251
43708: PPUSH
43709: LD_VAR 0 2
43713: PPUSH
43714: CALL 41968 0 4
43718: ST_TO_ADDR
// end ;
43719: LD_VAR 0 3
43723: RET
// export function DangerInArea ( side , area ) ; begin
43724: LD_INT 0
43726: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43727: LD_ADDR_VAR 0 3
43731: PUSH
43732: LD_VAR 0 2
43736: PPUSH
43737: LD_INT 81
43739: PUSH
43740: LD_VAR 0 1
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PPUSH
43749: CALL_OW 70
43753: ST_TO_ADDR
// end ;
43754: LD_VAR 0 3
43758: RET
// export function IsExtension ( b ) ; begin
43759: LD_INT 0
43761: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43762: LD_ADDR_VAR 0 2
43766: PUSH
43767: LD_VAR 0 1
43771: PUSH
43772: LD_INT 23
43774: PUSH
43775: LD_INT 20
43777: PUSH
43778: LD_INT 22
43780: PUSH
43781: LD_INT 17
43783: PUSH
43784: LD_INT 24
43786: PUSH
43787: LD_INT 21
43789: PUSH
43790: LD_INT 19
43792: PUSH
43793: LD_INT 16
43795: PUSH
43796: LD_INT 25
43798: PUSH
43799: LD_INT 18
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: IN
43814: ST_TO_ADDR
// end ;
43815: LD_VAR 0 2
43819: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43820: LD_INT 0
43822: PPUSH
43823: PPUSH
43824: PPUSH
// result := [ ] ;
43825: LD_ADDR_VAR 0 4
43829: PUSH
43830: EMPTY
43831: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43832: LD_ADDR_VAR 0 5
43836: PUSH
43837: LD_VAR 0 2
43841: PPUSH
43842: LD_INT 21
43844: PUSH
43845: LD_INT 3
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PPUSH
43852: CALL_OW 70
43856: ST_TO_ADDR
// if not tmp then
43857: LD_VAR 0 5
43861: NOT
43862: IFFALSE 43866
// exit ;
43864: GO 43930
// if checkLink then
43866: LD_VAR 0 3
43870: IFFALSE 43920
// begin for i in tmp do
43872: LD_ADDR_VAR 0 6
43876: PUSH
43877: LD_VAR 0 5
43881: PUSH
43882: FOR_IN
43883: IFFALSE 43918
// if GetBase ( i ) <> base then
43885: LD_VAR 0 6
43889: PPUSH
43890: CALL_OW 274
43894: PUSH
43895: LD_VAR 0 1
43899: NONEQUAL
43900: IFFALSE 43916
// ComLinkToBase ( base , i ) ;
43902: LD_VAR 0 1
43906: PPUSH
43907: LD_VAR 0 6
43911: PPUSH
43912: CALL_OW 169
43916: GO 43882
43918: POP
43919: POP
// end ; result := tmp ;
43920: LD_ADDR_VAR 0 4
43924: PUSH
43925: LD_VAR 0 5
43929: ST_TO_ADDR
// end ;
43930: LD_VAR 0 4
43934: RET
// export function ComComplete ( units , b ) ; var i ; begin
43935: LD_INT 0
43937: PPUSH
43938: PPUSH
// if not units then
43939: LD_VAR 0 1
43943: NOT
43944: IFFALSE 43948
// exit ;
43946: GO 44038
// for i in units do
43948: LD_ADDR_VAR 0 4
43952: PUSH
43953: LD_VAR 0 1
43957: PUSH
43958: FOR_IN
43959: IFFALSE 44036
// if BuildingStatus ( b ) = bs_build then
43961: LD_VAR 0 2
43965: PPUSH
43966: CALL_OW 461
43970: PUSH
43971: LD_INT 1
43973: EQUAL
43974: IFFALSE 44034
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43976: LD_VAR 0 4
43980: PPUSH
43981: LD_STRING h
43983: PUSH
43984: LD_VAR 0 2
43988: PPUSH
43989: CALL_OW 250
43993: PUSH
43994: LD_VAR 0 2
43998: PPUSH
43999: CALL_OW 251
44003: PUSH
44004: LD_VAR 0 2
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: PUSH
44027: EMPTY
44028: LIST
44029: PPUSH
44030: CALL_OW 446
44034: GO 43958
44036: POP
44037: POP
// end ;
44038: LD_VAR 0 3
44042: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44043: LD_INT 0
44045: PPUSH
44046: PPUSH
44047: PPUSH
44048: PPUSH
44049: PPUSH
44050: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
44051: LD_VAR 0 1
44055: NOT
44056: PUSH
44057: LD_VAR 0 1
44061: PPUSH
44062: CALL_OW 263
44066: PUSH
44067: LD_INT 2
44069: EQUAL
44070: NOT
44071: OR
44072: IFFALSE 44076
// exit ;
44074: GO 44392
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44076: LD_ADDR_VAR 0 6
44080: PUSH
44081: LD_INT 22
44083: PUSH
44084: LD_VAR 0 1
44088: PPUSH
44089: CALL_OW 255
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: LD_INT 30
44103: PUSH
44104: LD_INT 36
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 34
44113: PUSH
44114: LD_INT 31
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: LIST
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PPUSH
44130: CALL_OW 69
44134: ST_TO_ADDR
// if not tmp then
44135: LD_VAR 0 6
44139: NOT
44140: IFFALSE 44144
// exit ;
44142: GO 44392
// result := [ ] ;
44144: LD_ADDR_VAR 0 2
44148: PUSH
44149: EMPTY
44150: ST_TO_ADDR
// for i in tmp do
44151: LD_ADDR_VAR 0 3
44155: PUSH
44156: LD_VAR 0 6
44160: PUSH
44161: FOR_IN
44162: IFFALSE 44233
// begin t := UnitsInside ( i ) ;
44164: LD_ADDR_VAR 0 4
44168: PUSH
44169: LD_VAR 0 3
44173: PPUSH
44174: CALL_OW 313
44178: ST_TO_ADDR
// if t then
44179: LD_VAR 0 4
44183: IFFALSE 44231
// for j in t do
44185: LD_ADDR_VAR 0 7
44189: PUSH
44190: LD_VAR 0 4
44194: PUSH
44195: FOR_IN
44196: IFFALSE 44229
// result := Insert ( result , result + 1 , j ) ;
44198: LD_ADDR_VAR 0 2
44202: PUSH
44203: LD_VAR 0 2
44207: PPUSH
44208: LD_VAR 0 2
44212: PUSH
44213: LD_INT 1
44215: PLUS
44216: PPUSH
44217: LD_VAR 0 7
44221: PPUSH
44222: CALL_OW 2
44226: ST_TO_ADDR
44227: GO 44195
44229: POP
44230: POP
// end ;
44231: GO 44161
44233: POP
44234: POP
// if not result then
44235: LD_VAR 0 2
44239: NOT
44240: IFFALSE 44244
// exit ;
44242: GO 44392
// mech := result [ 1 ] ;
44244: LD_ADDR_VAR 0 5
44248: PUSH
44249: LD_VAR 0 2
44253: PUSH
44254: LD_INT 1
44256: ARRAY
44257: ST_TO_ADDR
// if result > 1 then
44258: LD_VAR 0 2
44262: PUSH
44263: LD_INT 1
44265: GREATER
44266: IFFALSE 44378
// for i = 2 to result do
44268: LD_ADDR_VAR 0 3
44272: PUSH
44273: DOUBLE
44274: LD_INT 2
44276: DEC
44277: ST_TO_ADDR
44278: LD_VAR 0 2
44282: PUSH
44283: FOR_TO
44284: IFFALSE 44376
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44286: LD_ADDR_VAR 0 4
44290: PUSH
44291: LD_VAR 0 2
44295: PUSH
44296: LD_VAR 0 3
44300: ARRAY
44301: PPUSH
44302: LD_INT 3
44304: PPUSH
44305: CALL_OW 259
44309: PUSH
44310: LD_VAR 0 2
44314: PUSH
44315: LD_VAR 0 3
44319: ARRAY
44320: PPUSH
44321: CALL_OW 432
44325: MINUS
44326: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44327: LD_VAR 0 4
44331: PUSH
44332: LD_VAR 0 5
44336: PPUSH
44337: LD_INT 3
44339: PPUSH
44340: CALL_OW 259
44344: PUSH
44345: LD_VAR 0 5
44349: PPUSH
44350: CALL_OW 432
44354: MINUS
44355: GREATEREQUAL
44356: IFFALSE 44374
// mech := result [ i ] ;
44358: LD_ADDR_VAR 0 5
44362: PUSH
44363: LD_VAR 0 2
44367: PUSH
44368: LD_VAR 0 3
44372: ARRAY
44373: ST_TO_ADDR
// end ;
44374: GO 44283
44376: POP
44377: POP
// ComLinkTo ( vehicle , mech ) ;
44378: LD_VAR 0 1
44382: PPUSH
44383: LD_VAR 0 5
44387: PPUSH
44388: CALL_OW 135
// end ;
44392: LD_VAR 0 2
44396: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44397: LD_INT 0
44399: PPUSH
44400: PPUSH
44401: PPUSH
44402: PPUSH
44403: PPUSH
44404: PPUSH
44405: PPUSH
44406: PPUSH
44407: PPUSH
44408: PPUSH
44409: PPUSH
44410: PPUSH
44411: PPUSH
// result := [ ] ;
44412: LD_ADDR_VAR 0 7
44416: PUSH
44417: EMPTY
44418: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44419: LD_VAR 0 1
44423: PPUSH
44424: CALL_OW 266
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: IN
44439: NOT
44440: IFFALSE 44444
// exit ;
44442: GO 46078
// if name then
44444: LD_VAR 0 3
44448: IFFALSE 44464
// SetBName ( base_dep , name ) ;
44450: LD_VAR 0 1
44454: PPUSH
44455: LD_VAR 0 3
44459: PPUSH
44460: CALL_OW 500
// base := GetBase ( base_dep ) ;
44464: LD_ADDR_VAR 0 15
44468: PUSH
44469: LD_VAR 0 1
44473: PPUSH
44474: CALL_OW 274
44478: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44479: LD_ADDR_VAR 0 16
44483: PUSH
44484: LD_VAR 0 1
44488: PPUSH
44489: CALL_OW 255
44493: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44494: LD_ADDR_VAR 0 17
44498: PUSH
44499: LD_VAR 0 1
44503: PPUSH
44504: CALL_OW 248
44508: ST_TO_ADDR
// if sources then
44509: LD_VAR 0 5
44513: IFFALSE 44560
// for i = 1 to 3 do
44515: LD_ADDR_VAR 0 8
44519: PUSH
44520: DOUBLE
44521: LD_INT 1
44523: DEC
44524: ST_TO_ADDR
44525: LD_INT 3
44527: PUSH
44528: FOR_TO
44529: IFFALSE 44558
// AddResourceType ( base , i , sources [ i ] ) ;
44531: LD_VAR 0 15
44535: PPUSH
44536: LD_VAR 0 8
44540: PPUSH
44541: LD_VAR 0 5
44545: PUSH
44546: LD_VAR 0 8
44550: ARRAY
44551: PPUSH
44552: CALL_OW 276
44556: GO 44528
44558: POP
44559: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44560: LD_ADDR_VAR 0 18
44564: PUSH
44565: LD_VAR 0 15
44569: PPUSH
44570: LD_VAR 0 2
44574: PPUSH
44575: LD_INT 1
44577: PPUSH
44578: CALL 43820 0 3
44582: ST_TO_ADDR
// InitHc ;
44583: CALL_OW 19
// InitUc ;
44587: CALL_OW 18
// uc_side := side ;
44591: LD_ADDR_OWVAR 20
44595: PUSH
44596: LD_VAR 0 16
44600: ST_TO_ADDR
// uc_nation := nation ;
44601: LD_ADDR_OWVAR 21
44605: PUSH
44606: LD_VAR 0 17
44610: ST_TO_ADDR
// if buildings then
44611: LD_VAR 0 18
44615: IFFALSE 45937
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44617: LD_ADDR_VAR 0 19
44621: PUSH
44622: LD_VAR 0 18
44626: PPUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 30
44632: PUSH
44633: LD_INT 29
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 30
44642: PUSH
44643: LD_INT 30
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: LIST
44654: PPUSH
44655: CALL_OW 72
44659: ST_TO_ADDR
// if tmp then
44660: LD_VAR 0 19
44664: IFFALSE 44712
// for i in tmp do
44666: LD_ADDR_VAR 0 8
44670: PUSH
44671: LD_VAR 0 19
44675: PUSH
44676: FOR_IN
44677: IFFALSE 44710
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44679: LD_VAR 0 8
44683: PPUSH
44684: CALL_OW 250
44688: PPUSH
44689: LD_VAR 0 8
44693: PPUSH
44694: CALL_OW 251
44698: PPUSH
44699: LD_VAR 0 16
44703: PPUSH
44704: CALL_OW 441
44708: GO 44676
44710: POP
44711: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44712: LD_VAR 0 18
44716: PPUSH
44717: LD_INT 2
44719: PUSH
44720: LD_INT 30
44722: PUSH
44723: LD_INT 32
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 30
44732: PUSH
44733: LD_INT 33
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: LIST
44744: PPUSH
44745: CALL_OW 72
44749: IFFALSE 44837
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44751: LD_ADDR_VAR 0 8
44755: PUSH
44756: LD_VAR 0 18
44760: PPUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 30
44766: PUSH
44767: LD_INT 32
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 30
44776: PUSH
44777: LD_INT 33
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: LIST
44788: PPUSH
44789: CALL_OW 72
44793: PUSH
44794: FOR_IN
44795: IFFALSE 44835
// begin if not GetBWeapon ( i ) then
44797: LD_VAR 0 8
44801: PPUSH
44802: CALL_OW 269
44806: NOT
44807: IFFALSE 44833
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44809: LD_VAR 0 8
44813: PPUSH
44814: LD_VAR 0 8
44818: PPUSH
44819: LD_VAR 0 2
44823: PPUSH
44824: CALL 46083 0 2
44828: PPUSH
44829: CALL_OW 431
// end ;
44833: GO 44794
44835: POP
44836: POP
// end ; for i = 1 to personel do
44837: LD_ADDR_VAR 0 8
44841: PUSH
44842: DOUBLE
44843: LD_INT 1
44845: DEC
44846: ST_TO_ADDR
44847: LD_VAR 0 6
44851: PUSH
44852: FOR_TO
44853: IFFALSE 45917
// begin if i > 4 then
44855: LD_VAR 0 8
44859: PUSH
44860: LD_INT 4
44862: GREATER
44863: IFFALSE 44867
// break ;
44865: GO 45917
// case i of 1 :
44867: LD_VAR 0 8
44871: PUSH
44872: LD_INT 1
44874: DOUBLE
44875: EQUAL
44876: IFTRUE 44880
44878: GO 44960
44880: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44881: LD_ADDR_VAR 0 12
44885: PUSH
44886: LD_VAR 0 18
44890: PPUSH
44891: LD_INT 22
44893: PUSH
44894: LD_VAR 0 16
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 58
44905: PUSH
44906: EMPTY
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 30
44914: PUSH
44915: LD_INT 32
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 30
44924: PUSH
44925: LD_INT 4
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 30
44934: PUSH
44935: LD_INT 5
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: LIST
44952: PPUSH
44953: CALL_OW 72
44957: ST_TO_ADDR
44958: GO 45182
44960: LD_INT 2
44962: DOUBLE
44963: EQUAL
44964: IFTRUE 44968
44966: GO 45030
44968: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44969: LD_ADDR_VAR 0 12
44973: PUSH
44974: LD_VAR 0 18
44978: PPUSH
44979: LD_INT 22
44981: PUSH
44982: LD_VAR 0 16
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 30
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 30
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: LIST
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PPUSH
45023: CALL_OW 72
45027: ST_TO_ADDR
45028: GO 45182
45030: LD_INT 3
45032: DOUBLE
45033: EQUAL
45034: IFTRUE 45038
45036: GO 45100
45038: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45039: LD_ADDR_VAR 0 12
45043: PUSH
45044: LD_VAR 0 18
45048: PPUSH
45049: LD_INT 22
45051: PUSH
45052: LD_VAR 0 16
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: LD_INT 30
45066: PUSH
45067: LD_INT 2
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 30
45076: PUSH
45077: LD_INT 3
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: LIST
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PPUSH
45093: CALL_OW 72
45097: ST_TO_ADDR
45098: GO 45182
45100: LD_INT 4
45102: DOUBLE
45103: EQUAL
45104: IFTRUE 45108
45106: GO 45181
45108: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45109: LD_ADDR_VAR 0 12
45113: PUSH
45114: LD_VAR 0 18
45118: PPUSH
45119: LD_INT 22
45121: PUSH
45122: LD_VAR 0 16
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: LD_INT 30
45136: PUSH
45137: LD_INT 6
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 30
45146: PUSH
45147: LD_INT 7
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 30
45156: PUSH
45157: LD_INT 8
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PPUSH
45174: CALL_OW 72
45178: ST_TO_ADDR
45179: GO 45182
45181: POP
// if i = 1 then
45182: LD_VAR 0 8
45186: PUSH
45187: LD_INT 1
45189: EQUAL
45190: IFFALSE 45301
// begin tmp := [ ] ;
45192: LD_ADDR_VAR 0 19
45196: PUSH
45197: EMPTY
45198: ST_TO_ADDR
// for j in f do
45199: LD_ADDR_VAR 0 9
45203: PUSH
45204: LD_VAR 0 12
45208: PUSH
45209: FOR_IN
45210: IFFALSE 45283
// if GetBType ( j ) = b_bunker then
45212: LD_VAR 0 9
45216: PPUSH
45217: CALL_OW 266
45221: PUSH
45222: LD_INT 32
45224: EQUAL
45225: IFFALSE 45252
// tmp := Insert ( tmp , 1 , j ) else
45227: LD_ADDR_VAR 0 19
45231: PUSH
45232: LD_VAR 0 19
45236: PPUSH
45237: LD_INT 1
45239: PPUSH
45240: LD_VAR 0 9
45244: PPUSH
45245: CALL_OW 2
45249: ST_TO_ADDR
45250: GO 45281
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45252: LD_ADDR_VAR 0 19
45256: PUSH
45257: LD_VAR 0 19
45261: PPUSH
45262: LD_VAR 0 19
45266: PUSH
45267: LD_INT 1
45269: PLUS
45270: PPUSH
45271: LD_VAR 0 9
45275: PPUSH
45276: CALL_OW 2
45280: ST_TO_ADDR
45281: GO 45209
45283: POP
45284: POP
// if tmp then
45285: LD_VAR 0 19
45289: IFFALSE 45301
// f := tmp ;
45291: LD_ADDR_VAR 0 12
45295: PUSH
45296: LD_VAR 0 19
45300: ST_TO_ADDR
// end ; x := personel [ i ] ;
45301: LD_ADDR_VAR 0 13
45305: PUSH
45306: LD_VAR 0 6
45310: PUSH
45311: LD_VAR 0 8
45315: ARRAY
45316: ST_TO_ADDR
// if x = - 1 then
45317: LD_VAR 0 13
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: EQUAL
45326: IFFALSE 45535
// begin for j in f do
45328: LD_ADDR_VAR 0 9
45332: PUSH
45333: LD_VAR 0 12
45337: PUSH
45338: FOR_IN
45339: IFFALSE 45531
// repeat InitHc ;
45341: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45345: LD_VAR 0 9
45349: PPUSH
45350: CALL_OW 266
45354: PUSH
45355: LD_INT 5
45357: EQUAL
45358: IFFALSE 45428
// begin if UnitsInside ( j ) < 3 then
45360: LD_VAR 0 9
45364: PPUSH
45365: CALL_OW 313
45369: PUSH
45370: LD_INT 3
45372: LESS
45373: IFFALSE 45409
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45375: LD_INT 0
45377: PPUSH
45378: LD_INT 5
45380: PUSH
45381: LD_INT 8
45383: PUSH
45384: LD_INT 9
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: PUSH
45392: LD_VAR 0 17
45396: ARRAY
45397: PPUSH
45398: LD_VAR 0 4
45402: PPUSH
45403: CALL_OW 380
45407: GO 45426
// PrepareHuman ( false , i , skill ) ;
45409: LD_INT 0
45411: PPUSH
45412: LD_VAR 0 8
45416: PPUSH
45417: LD_VAR 0 4
45421: PPUSH
45422: CALL_OW 380
// end else
45426: GO 45445
// PrepareHuman ( false , i , skill ) ;
45428: LD_INT 0
45430: PPUSH
45431: LD_VAR 0 8
45435: PPUSH
45436: LD_VAR 0 4
45440: PPUSH
45441: CALL_OW 380
// un := CreateHuman ;
45445: LD_ADDR_VAR 0 14
45449: PUSH
45450: CALL_OW 44
45454: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45455: LD_ADDR_VAR 0 7
45459: PUSH
45460: LD_VAR 0 7
45464: PPUSH
45465: LD_INT 1
45467: PPUSH
45468: LD_VAR 0 14
45472: PPUSH
45473: CALL_OW 2
45477: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45478: LD_VAR 0 14
45482: PPUSH
45483: LD_VAR 0 9
45487: PPUSH
45488: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45492: LD_VAR 0 9
45496: PPUSH
45497: CALL_OW 313
45501: PUSH
45502: LD_INT 6
45504: EQUAL
45505: PUSH
45506: LD_VAR 0 9
45510: PPUSH
45511: CALL_OW 266
45515: PUSH
45516: LD_INT 32
45518: PUSH
45519: LD_INT 31
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: IN
45526: OR
45527: IFFALSE 45341
45529: GO 45338
45531: POP
45532: POP
// end else
45533: GO 45915
// for j = 1 to x do
45535: LD_ADDR_VAR 0 9
45539: PUSH
45540: DOUBLE
45541: LD_INT 1
45543: DEC
45544: ST_TO_ADDR
45545: LD_VAR 0 13
45549: PUSH
45550: FOR_TO
45551: IFFALSE 45913
// begin InitHc ;
45553: CALL_OW 19
// if not f then
45557: LD_VAR 0 12
45561: NOT
45562: IFFALSE 45651
// begin PrepareHuman ( false , i , skill ) ;
45564: LD_INT 0
45566: PPUSH
45567: LD_VAR 0 8
45571: PPUSH
45572: LD_VAR 0 4
45576: PPUSH
45577: CALL_OW 380
// un := CreateHuman ;
45581: LD_ADDR_VAR 0 14
45585: PUSH
45586: CALL_OW 44
45590: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45591: LD_ADDR_VAR 0 7
45595: PUSH
45596: LD_VAR 0 7
45600: PPUSH
45601: LD_INT 1
45603: PPUSH
45604: LD_VAR 0 14
45608: PPUSH
45609: CALL_OW 2
45613: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45614: LD_VAR 0 14
45618: PPUSH
45619: LD_VAR 0 1
45623: PPUSH
45624: CALL_OW 250
45628: PPUSH
45629: LD_VAR 0 1
45633: PPUSH
45634: CALL_OW 251
45638: PPUSH
45639: LD_INT 10
45641: PPUSH
45642: LD_INT 0
45644: PPUSH
45645: CALL_OW 50
// continue ;
45649: GO 45550
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45651: LD_VAR 0 12
45655: PUSH
45656: LD_INT 1
45658: ARRAY
45659: PPUSH
45660: CALL_OW 313
45664: PUSH
45665: LD_VAR 0 12
45669: PUSH
45670: LD_INT 1
45672: ARRAY
45673: PPUSH
45674: CALL_OW 266
45678: PUSH
45679: LD_INT 32
45681: PUSH
45682: LD_INT 31
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: IN
45689: AND
45690: PUSH
45691: LD_VAR 0 12
45695: PUSH
45696: LD_INT 1
45698: ARRAY
45699: PPUSH
45700: CALL_OW 313
45704: PUSH
45705: LD_INT 6
45707: EQUAL
45708: OR
45709: IFFALSE 45729
// f := Delete ( f , 1 ) ;
45711: LD_ADDR_VAR 0 12
45715: PUSH
45716: LD_VAR 0 12
45720: PPUSH
45721: LD_INT 1
45723: PPUSH
45724: CALL_OW 3
45728: ST_TO_ADDR
// if not f then
45729: LD_VAR 0 12
45733: NOT
45734: IFFALSE 45752
// begin x := x + 2 ;
45736: LD_ADDR_VAR 0 13
45740: PUSH
45741: LD_VAR 0 13
45745: PUSH
45746: LD_INT 2
45748: PLUS
45749: ST_TO_ADDR
// continue ;
45750: GO 45550
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45752: LD_VAR 0 12
45756: PUSH
45757: LD_INT 1
45759: ARRAY
45760: PPUSH
45761: CALL_OW 266
45765: PUSH
45766: LD_INT 5
45768: EQUAL
45769: IFFALSE 45843
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45771: LD_VAR 0 12
45775: PUSH
45776: LD_INT 1
45778: ARRAY
45779: PPUSH
45780: CALL_OW 313
45784: PUSH
45785: LD_INT 3
45787: LESS
45788: IFFALSE 45824
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45790: LD_INT 0
45792: PPUSH
45793: LD_INT 5
45795: PUSH
45796: LD_INT 8
45798: PUSH
45799: LD_INT 9
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: LIST
45806: PUSH
45807: LD_VAR 0 17
45811: ARRAY
45812: PPUSH
45813: LD_VAR 0 4
45817: PPUSH
45818: CALL_OW 380
45822: GO 45841
// PrepareHuman ( false , i , skill ) ;
45824: LD_INT 0
45826: PPUSH
45827: LD_VAR 0 8
45831: PPUSH
45832: LD_VAR 0 4
45836: PPUSH
45837: CALL_OW 380
// end else
45841: GO 45860
// PrepareHuman ( false , i , skill ) ;
45843: LD_INT 0
45845: PPUSH
45846: LD_VAR 0 8
45850: PPUSH
45851: LD_VAR 0 4
45855: PPUSH
45856: CALL_OW 380
// un := CreateHuman ;
45860: LD_ADDR_VAR 0 14
45864: PUSH
45865: CALL_OW 44
45869: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45870: LD_ADDR_VAR 0 7
45874: PUSH
45875: LD_VAR 0 7
45879: PPUSH
45880: LD_INT 1
45882: PPUSH
45883: LD_VAR 0 14
45887: PPUSH
45888: CALL_OW 2
45892: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45893: LD_VAR 0 14
45897: PPUSH
45898: LD_VAR 0 12
45902: PUSH
45903: LD_INT 1
45905: ARRAY
45906: PPUSH
45907: CALL_OW 52
// end ;
45911: GO 45550
45913: POP
45914: POP
// end ;
45915: GO 44852
45917: POP
45918: POP
// result := result ^ buildings ;
45919: LD_ADDR_VAR 0 7
45923: PUSH
45924: LD_VAR 0 7
45928: PUSH
45929: LD_VAR 0 18
45933: ADD
45934: ST_TO_ADDR
// end else
45935: GO 46078
// begin for i = 1 to personel do
45937: LD_ADDR_VAR 0 8
45941: PUSH
45942: DOUBLE
45943: LD_INT 1
45945: DEC
45946: ST_TO_ADDR
45947: LD_VAR 0 6
45951: PUSH
45952: FOR_TO
45953: IFFALSE 46076
// begin if i > 4 then
45955: LD_VAR 0 8
45959: PUSH
45960: LD_INT 4
45962: GREATER
45963: IFFALSE 45967
// break ;
45965: GO 46076
// x := personel [ i ] ;
45967: LD_ADDR_VAR 0 13
45971: PUSH
45972: LD_VAR 0 6
45976: PUSH
45977: LD_VAR 0 8
45981: ARRAY
45982: ST_TO_ADDR
// if x = - 1 then
45983: LD_VAR 0 13
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: EQUAL
45992: IFFALSE 45996
// continue ;
45994: GO 45952
// PrepareHuman ( false , i , skill ) ;
45996: LD_INT 0
45998: PPUSH
45999: LD_VAR 0 8
46003: PPUSH
46004: LD_VAR 0 4
46008: PPUSH
46009: CALL_OW 380
// un := CreateHuman ;
46013: LD_ADDR_VAR 0 14
46017: PUSH
46018: CALL_OW 44
46022: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46023: LD_VAR 0 14
46027: PPUSH
46028: LD_VAR 0 1
46032: PPUSH
46033: CALL_OW 250
46037: PPUSH
46038: LD_VAR 0 1
46042: PPUSH
46043: CALL_OW 251
46047: PPUSH
46048: LD_INT 10
46050: PPUSH
46051: LD_INT 0
46053: PPUSH
46054: CALL_OW 50
// result := result ^ un ;
46058: LD_ADDR_VAR 0 7
46062: PUSH
46063: LD_VAR 0 7
46067: PUSH
46068: LD_VAR 0 14
46072: ADD
46073: ST_TO_ADDR
// end ;
46074: GO 45952
46076: POP
46077: POP
// end ; end ;
46078: LD_VAR 0 7
46082: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46083: LD_INT 0
46085: PPUSH
46086: PPUSH
46087: PPUSH
46088: PPUSH
46089: PPUSH
46090: PPUSH
46091: PPUSH
46092: PPUSH
46093: PPUSH
46094: PPUSH
46095: PPUSH
46096: PPUSH
46097: PPUSH
46098: PPUSH
46099: PPUSH
46100: PPUSH
// result := false ;
46101: LD_ADDR_VAR 0 3
46105: PUSH
46106: LD_INT 0
46108: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46109: LD_VAR 0 1
46113: NOT
46114: PUSH
46115: LD_VAR 0 1
46119: PPUSH
46120: CALL_OW 266
46124: PUSH
46125: LD_INT 32
46127: PUSH
46128: LD_INT 33
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: IN
46135: NOT
46136: OR
46137: IFFALSE 46141
// exit ;
46139: GO 47250
// nat := GetNation ( tower ) ;
46141: LD_ADDR_VAR 0 12
46145: PUSH
46146: LD_VAR 0 1
46150: PPUSH
46151: CALL_OW 248
46155: ST_TO_ADDR
// side := GetSide ( tower ) ;
46156: LD_ADDR_VAR 0 16
46160: PUSH
46161: LD_VAR 0 1
46165: PPUSH
46166: CALL_OW 255
46170: ST_TO_ADDR
// x := GetX ( tower ) ;
46171: LD_ADDR_VAR 0 10
46175: PUSH
46176: LD_VAR 0 1
46180: PPUSH
46181: CALL_OW 250
46185: ST_TO_ADDR
// y := GetY ( tower ) ;
46186: LD_ADDR_VAR 0 11
46190: PUSH
46191: LD_VAR 0 1
46195: PPUSH
46196: CALL_OW 251
46200: ST_TO_ADDR
// if not x or not y then
46201: LD_VAR 0 10
46205: NOT
46206: PUSH
46207: LD_VAR 0 11
46211: NOT
46212: OR
46213: IFFALSE 46217
// exit ;
46215: GO 47250
// weapon := 0 ;
46217: LD_ADDR_VAR 0 18
46221: PUSH
46222: LD_INT 0
46224: ST_TO_ADDR
// fac_list := [ ] ;
46225: LD_ADDR_VAR 0 17
46229: PUSH
46230: EMPTY
46231: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46232: LD_ADDR_VAR 0 6
46236: PUSH
46237: LD_VAR 0 1
46241: PPUSH
46242: CALL_OW 274
46246: PPUSH
46247: LD_VAR 0 2
46251: PPUSH
46252: LD_INT 0
46254: PPUSH
46255: CALL 43820 0 3
46259: PPUSH
46260: LD_INT 30
46262: PUSH
46263: LD_INT 3
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PPUSH
46270: CALL_OW 72
46274: ST_TO_ADDR
// if not factories then
46275: LD_VAR 0 6
46279: NOT
46280: IFFALSE 46284
// exit ;
46282: GO 47250
// for i in factories do
46284: LD_ADDR_VAR 0 8
46288: PUSH
46289: LD_VAR 0 6
46293: PUSH
46294: FOR_IN
46295: IFFALSE 46320
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46297: LD_ADDR_VAR 0 17
46301: PUSH
46302: LD_VAR 0 17
46306: PUSH
46307: LD_VAR 0 8
46311: PPUSH
46312: CALL_OW 478
46316: UNION
46317: ST_TO_ADDR
46318: GO 46294
46320: POP
46321: POP
// if not fac_list then
46322: LD_VAR 0 17
46326: NOT
46327: IFFALSE 46331
// exit ;
46329: GO 47250
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46331: LD_ADDR_VAR 0 5
46335: PUSH
46336: LD_INT 4
46338: PUSH
46339: LD_INT 5
46341: PUSH
46342: LD_INT 9
46344: PUSH
46345: LD_INT 10
46347: PUSH
46348: LD_INT 6
46350: PUSH
46351: LD_INT 7
46353: PUSH
46354: LD_INT 11
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 27
46368: PUSH
46369: LD_INT 28
46371: PUSH
46372: LD_INT 26
46374: PUSH
46375: LD_INT 30
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 43
46386: PUSH
46387: LD_INT 44
46389: PUSH
46390: LD_INT 46
46392: PUSH
46393: LD_INT 45
46395: PUSH
46396: LD_INT 47
46398: PUSH
46399: LD_INT 49
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: LIST
46414: PUSH
46415: LD_VAR 0 12
46419: ARRAY
46420: ST_TO_ADDR
// list := list isect fac_list ;
46421: LD_ADDR_VAR 0 5
46425: PUSH
46426: LD_VAR 0 5
46430: PUSH
46431: LD_VAR 0 17
46435: ISECT
46436: ST_TO_ADDR
// if not list then
46437: LD_VAR 0 5
46441: NOT
46442: IFFALSE 46446
// exit ;
46444: GO 47250
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46446: LD_VAR 0 12
46450: PUSH
46451: LD_INT 3
46453: EQUAL
46454: PUSH
46455: LD_INT 49
46457: PUSH
46458: LD_VAR 0 5
46462: IN
46463: AND
46464: PUSH
46465: LD_INT 31
46467: PPUSH
46468: LD_VAR 0 16
46472: PPUSH
46473: CALL_OW 321
46477: PUSH
46478: LD_INT 2
46480: EQUAL
46481: AND
46482: IFFALSE 46542
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46484: LD_INT 22
46486: PUSH
46487: LD_VAR 0 16
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 35
46498: PUSH
46499: LD_INT 49
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 91
46508: PUSH
46509: LD_VAR 0 1
46513: PUSH
46514: LD_INT 10
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: LIST
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: LIST
46526: PPUSH
46527: CALL_OW 69
46531: NOT
46532: IFFALSE 46542
// weapon := ru_time_lapser ;
46534: LD_ADDR_VAR 0 18
46538: PUSH
46539: LD_INT 49
46541: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46542: LD_VAR 0 12
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: IN
46557: PUSH
46558: LD_INT 11
46560: PUSH
46561: LD_VAR 0 5
46565: IN
46566: PUSH
46567: LD_INT 30
46569: PUSH
46570: LD_VAR 0 5
46574: IN
46575: OR
46576: AND
46577: PUSH
46578: LD_INT 6
46580: PPUSH
46581: LD_VAR 0 16
46585: PPUSH
46586: CALL_OW 321
46590: PUSH
46591: LD_INT 2
46593: EQUAL
46594: AND
46595: IFFALSE 46760
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46597: LD_INT 22
46599: PUSH
46600: LD_VAR 0 16
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: LD_INT 35
46614: PUSH
46615: LD_INT 11
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 35
46624: PUSH
46625: LD_INT 30
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 91
46639: PUSH
46640: LD_VAR 0 1
46644: PUSH
46645: LD_INT 18
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: LIST
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: LIST
46657: PPUSH
46658: CALL_OW 69
46662: NOT
46663: PUSH
46664: LD_INT 22
46666: PUSH
46667: LD_VAR 0 16
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: LD_INT 30
46681: PUSH
46682: LD_INT 32
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 30
46691: PUSH
46692: LD_INT 33
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 91
46706: PUSH
46707: LD_VAR 0 1
46711: PUSH
46712: LD_INT 12
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: LIST
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: PUSH
46725: EMPTY
46726: LIST
46727: PPUSH
46728: CALL_OW 69
46732: PUSH
46733: LD_INT 2
46735: GREATER
46736: AND
46737: IFFALSE 46760
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46739: LD_ADDR_VAR 0 18
46743: PUSH
46744: LD_INT 11
46746: PUSH
46747: LD_INT 30
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_VAR 0 12
46758: ARRAY
46759: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46760: LD_VAR 0 18
46764: NOT
46765: PUSH
46766: LD_INT 40
46768: PPUSH
46769: LD_VAR 0 16
46773: PPUSH
46774: CALL_OW 321
46778: PUSH
46779: LD_INT 2
46781: EQUAL
46782: AND
46783: PUSH
46784: LD_INT 7
46786: PUSH
46787: LD_VAR 0 5
46791: IN
46792: PUSH
46793: LD_INT 28
46795: PUSH
46796: LD_VAR 0 5
46800: IN
46801: OR
46802: PUSH
46803: LD_INT 45
46805: PUSH
46806: LD_VAR 0 5
46810: IN
46811: OR
46812: AND
46813: IFFALSE 47067
// begin hex := GetHexInfo ( x , y ) ;
46815: LD_ADDR_VAR 0 4
46819: PUSH
46820: LD_VAR 0 10
46824: PPUSH
46825: LD_VAR 0 11
46829: PPUSH
46830: CALL_OW 546
46834: ST_TO_ADDR
// if hex [ 1 ] then
46835: LD_VAR 0 4
46839: PUSH
46840: LD_INT 1
46842: ARRAY
46843: IFFALSE 46847
// exit ;
46845: GO 47250
// height := hex [ 2 ] ;
46847: LD_ADDR_VAR 0 15
46851: PUSH
46852: LD_VAR 0 4
46856: PUSH
46857: LD_INT 2
46859: ARRAY
46860: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46861: LD_ADDR_VAR 0 14
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 3
46874: PUSH
46875: LD_INT 5
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: ST_TO_ADDR
// for i in tmp do
46884: LD_ADDR_VAR 0 8
46888: PUSH
46889: LD_VAR 0 14
46893: PUSH
46894: FOR_IN
46895: IFFALSE 47065
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46897: LD_ADDR_VAR 0 9
46901: PUSH
46902: LD_VAR 0 10
46906: PPUSH
46907: LD_VAR 0 8
46911: PPUSH
46912: LD_INT 5
46914: PPUSH
46915: CALL_OW 272
46919: PUSH
46920: LD_VAR 0 11
46924: PPUSH
46925: LD_VAR 0 8
46929: PPUSH
46930: LD_INT 5
46932: PPUSH
46933: CALL_OW 273
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46942: LD_VAR 0 9
46946: PUSH
46947: LD_INT 1
46949: ARRAY
46950: PPUSH
46951: LD_VAR 0 9
46955: PUSH
46956: LD_INT 2
46958: ARRAY
46959: PPUSH
46960: CALL_OW 488
46964: IFFALSE 47063
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46966: LD_ADDR_VAR 0 4
46970: PUSH
46971: LD_VAR 0 9
46975: PUSH
46976: LD_INT 1
46978: ARRAY
46979: PPUSH
46980: LD_VAR 0 9
46984: PUSH
46985: LD_INT 2
46987: ARRAY
46988: PPUSH
46989: CALL_OW 546
46993: ST_TO_ADDR
// if hex [ 1 ] then
46994: LD_VAR 0 4
46998: PUSH
46999: LD_INT 1
47001: ARRAY
47002: IFFALSE 47006
// continue ;
47004: GO 46894
// h := hex [ 2 ] ;
47006: LD_ADDR_VAR 0 13
47010: PUSH
47011: LD_VAR 0 4
47015: PUSH
47016: LD_INT 2
47018: ARRAY
47019: ST_TO_ADDR
// if h + 7 < height then
47020: LD_VAR 0 13
47024: PUSH
47025: LD_INT 7
47027: PLUS
47028: PUSH
47029: LD_VAR 0 15
47033: LESS
47034: IFFALSE 47063
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47036: LD_ADDR_VAR 0 18
47040: PUSH
47041: LD_INT 7
47043: PUSH
47044: LD_INT 28
47046: PUSH
47047: LD_INT 45
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: LIST
47054: PUSH
47055: LD_VAR 0 12
47059: ARRAY
47060: ST_TO_ADDR
// break ;
47061: GO 47065
// end ; end ; end ;
47063: GO 46894
47065: POP
47066: POP
// end ; if not weapon then
47067: LD_VAR 0 18
47071: NOT
47072: IFFALSE 47132
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47074: LD_ADDR_VAR 0 5
47078: PUSH
47079: LD_VAR 0 5
47083: PUSH
47084: LD_INT 11
47086: PUSH
47087: LD_INT 30
47089: PUSH
47090: LD_INT 49
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: LIST
47097: DIFF
47098: ST_TO_ADDR
// if not list then
47099: LD_VAR 0 5
47103: NOT
47104: IFFALSE 47108
// exit ;
47106: GO 47250
// weapon := list [ rand ( 1 , list ) ] ;
47108: LD_ADDR_VAR 0 18
47112: PUSH
47113: LD_VAR 0 5
47117: PUSH
47118: LD_INT 1
47120: PPUSH
47121: LD_VAR 0 5
47125: PPUSH
47126: CALL_OW 12
47130: ARRAY
47131: ST_TO_ADDR
// end ; if weapon then
47132: LD_VAR 0 18
47136: IFFALSE 47250
// begin tmp := CostOfWeapon ( weapon ) ;
47138: LD_ADDR_VAR 0 14
47142: PUSH
47143: LD_VAR 0 18
47147: PPUSH
47148: CALL_OW 451
47152: ST_TO_ADDR
// j := GetBase ( tower ) ;
47153: LD_ADDR_VAR 0 9
47157: PUSH
47158: LD_VAR 0 1
47162: PPUSH
47163: CALL_OW 274
47167: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47168: LD_VAR 0 9
47172: PPUSH
47173: LD_INT 1
47175: PPUSH
47176: CALL_OW 275
47180: PUSH
47181: LD_VAR 0 14
47185: PUSH
47186: LD_INT 1
47188: ARRAY
47189: GREATEREQUAL
47190: PUSH
47191: LD_VAR 0 9
47195: PPUSH
47196: LD_INT 2
47198: PPUSH
47199: CALL_OW 275
47203: PUSH
47204: LD_VAR 0 14
47208: PUSH
47209: LD_INT 2
47211: ARRAY
47212: GREATEREQUAL
47213: AND
47214: PUSH
47215: LD_VAR 0 9
47219: PPUSH
47220: LD_INT 3
47222: PPUSH
47223: CALL_OW 275
47227: PUSH
47228: LD_VAR 0 14
47232: PUSH
47233: LD_INT 3
47235: ARRAY
47236: GREATEREQUAL
47237: AND
47238: IFFALSE 47250
// result := weapon ;
47240: LD_ADDR_VAR 0 3
47244: PUSH
47245: LD_VAR 0 18
47249: ST_TO_ADDR
// end ; end ;
47250: LD_VAR 0 3
47254: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47255: LD_INT 0
47257: PPUSH
47258: PPUSH
// result := true ;
47259: LD_ADDR_VAR 0 3
47263: PUSH
47264: LD_INT 1
47266: ST_TO_ADDR
// if array1 = array2 then
47267: LD_VAR 0 1
47271: PUSH
47272: LD_VAR 0 2
47276: EQUAL
47277: IFFALSE 47337
// begin for i = 1 to array1 do
47279: LD_ADDR_VAR 0 4
47283: PUSH
47284: DOUBLE
47285: LD_INT 1
47287: DEC
47288: ST_TO_ADDR
47289: LD_VAR 0 1
47293: PUSH
47294: FOR_TO
47295: IFFALSE 47333
// if array1 [ i ] <> array2 [ i ] then
47297: LD_VAR 0 1
47301: PUSH
47302: LD_VAR 0 4
47306: ARRAY
47307: PUSH
47308: LD_VAR 0 2
47312: PUSH
47313: LD_VAR 0 4
47317: ARRAY
47318: NONEQUAL
47319: IFFALSE 47331
// begin result := false ;
47321: LD_ADDR_VAR 0 3
47325: PUSH
47326: LD_INT 0
47328: ST_TO_ADDR
// break ;
47329: GO 47333
// end ;
47331: GO 47294
47333: POP
47334: POP
// end else
47335: GO 47345
// result := false ;
47337: LD_ADDR_VAR 0 3
47341: PUSH
47342: LD_INT 0
47344: ST_TO_ADDR
// end ;
47345: LD_VAR 0 3
47349: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47350: LD_INT 0
47352: PPUSH
47353: PPUSH
// if not array1 or not array2 then
47354: LD_VAR 0 1
47358: NOT
47359: PUSH
47360: LD_VAR 0 2
47364: NOT
47365: OR
47366: IFFALSE 47370
// exit ;
47368: GO 47434
// result := true ;
47370: LD_ADDR_VAR 0 3
47374: PUSH
47375: LD_INT 1
47377: ST_TO_ADDR
// for i = 1 to array1 do
47378: LD_ADDR_VAR 0 4
47382: PUSH
47383: DOUBLE
47384: LD_INT 1
47386: DEC
47387: ST_TO_ADDR
47388: LD_VAR 0 1
47392: PUSH
47393: FOR_TO
47394: IFFALSE 47432
// if array1 [ i ] <> array2 [ i ] then
47396: LD_VAR 0 1
47400: PUSH
47401: LD_VAR 0 4
47405: ARRAY
47406: PUSH
47407: LD_VAR 0 2
47411: PUSH
47412: LD_VAR 0 4
47416: ARRAY
47417: NONEQUAL
47418: IFFALSE 47430
// begin result := false ;
47420: LD_ADDR_VAR 0 3
47424: PUSH
47425: LD_INT 0
47427: ST_TO_ADDR
// break ;
47428: GO 47432
// end ;
47430: GO 47393
47432: POP
47433: POP
// end ;
47434: LD_VAR 0 3
47438: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47439: LD_INT 0
47441: PPUSH
47442: PPUSH
47443: PPUSH
// pom := GetBase ( fac ) ;
47444: LD_ADDR_VAR 0 5
47448: PUSH
47449: LD_VAR 0 1
47453: PPUSH
47454: CALL_OW 274
47458: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47459: LD_ADDR_VAR 0 4
47463: PUSH
47464: LD_VAR 0 2
47468: PUSH
47469: LD_INT 1
47471: ARRAY
47472: PPUSH
47473: LD_VAR 0 2
47477: PUSH
47478: LD_INT 2
47480: ARRAY
47481: PPUSH
47482: LD_VAR 0 2
47486: PUSH
47487: LD_INT 3
47489: ARRAY
47490: PPUSH
47491: LD_VAR 0 2
47495: PUSH
47496: LD_INT 4
47498: ARRAY
47499: PPUSH
47500: CALL_OW 449
47504: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47505: LD_ADDR_VAR 0 3
47509: PUSH
47510: LD_VAR 0 5
47514: PPUSH
47515: LD_INT 1
47517: PPUSH
47518: CALL_OW 275
47522: PUSH
47523: LD_VAR 0 4
47527: PUSH
47528: LD_INT 1
47530: ARRAY
47531: GREATEREQUAL
47532: PUSH
47533: LD_VAR 0 5
47537: PPUSH
47538: LD_INT 2
47540: PPUSH
47541: CALL_OW 275
47545: PUSH
47546: LD_VAR 0 4
47550: PUSH
47551: LD_INT 2
47553: ARRAY
47554: GREATEREQUAL
47555: AND
47556: PUSH
47557: LD_VAR 0 5
47561: PPUSH
47562: LD_INT 3
47564: PPUSH
47565: CALL_OW 275
47569: PUSH
47570: LD_VAR 0 4
47574: PUSH
47575: LD_INT 3
47577: ARRAY
47578: GREATEREQUAL
47579: AND
47580: ST_TO_ADDR
// end ;
47581: LD_VAR 0 3
47585: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47586: LD_INT 0
47588: PPUSH
47589: PPUSH
47590: PPUSH
47591: PPUSH
// pom := GetBase ( building ) ;
47592: LD_ADDR_VAR 0 3
47596: PUSH
47597: LD_VAR 0 1
47601: PPUSH
47602: CALL_OW 274
47606: ST_TO_ADDR
// if not pom then
47607: LD_VAR 0 3
47611: NOT
47612: IFFALSE 47616
// exit ;
47614: GO 47786
// btype := GetBType ( building ) ;
47616: LD_ADDR_VAR 0 5
47620: PUSH
47621: LD_VAR 0 1
47625: PPUSH
47626: CALL_OW 266
47630: ST_TO_ADDR
// if btype = b_armoury then
47631: LD_VAR 0 5
47635: PUSH
47636: LD_INT 4
47638: EQUAL
47639: IFFALSE 47649
// btype := b_barracks ;
47641: LD_ADDR_VAR 0 5
47645: PUSH
47646: LD_INT 5
47648: ST_TO_ADDR
// if btype = b_depot then
47649: LD_VAR 0 5
47653: PUSH
47654: LD_INT 0
47656: EQUAL
47657: IFFALSE 47667
// btype := b_warehouse ;
47659: LD_ADDR_VAR 0 5
47663: PUSH
47664: LD_INT 1
47666: ST_TO_ADDR
// if btype = b_workshop then
47667: LD_VAR 0 5
47671: PUSH
47672: LD_INT 2
47674: EQUAL
47675: IFFALSE 47685
// btype := b_factory ;
47677: LD_ADDR_VAR 0 5
47681: PUSH
47682: LD_INT 3
47684: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47685: LD_ADDR_VAR 0 4
47689: PUSH
47690: LD_VAR 0 5
47694: PPUSH
47695: LD_VAR 0 1
47699: PPUSH
47700: CALL_OW 248
47704: PPUSH
47705: CALL_OW 450
47709: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47710: LD_ADDR_VAR 0 2
47714: PUSH
47715: LD_VAR 0 3
47719: PPUSH
47720: LD_INT 1
47722: PPUSH
47723: CALL_OW 275
47727: PUSH
47728: LD_VAR 0 4
47732: PUSH
47733: LD_INT 1
47735: ARRAY
47736: GREATEREQUAL
47737: PUSH
47738: LD_VAR 0 3
47742: PPUSH
47743: LD_INT 2
47745: PPUSH
47746: CALL_OW 275
47750: PUSH
47751: LD_VAR 0 4
47755: PUSH
47756: LD_INT 2
47758: ARRAY
47759: GREATEREQUAL
47760: AND
47761: PUSH
47762: LD_VAR 0 3
47766: PPUSH
47767: LD_INT 3
47769: PPUSH
47770: CALL_OW 275
47774: PUSH
47775: LD_VAR 0 4
47779: PUSH
47780: LD_INT 3
47782: ARRAY
47783: GREATEREQUAL
47784: AND
47785: ST_TO_ADDR
// end ;
47786: LD_VAR 0 2
47790: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47791: LD_INT 0
47793: PPUSH
47794: PPUSH
47795: PPUSH
// pom := GetBase ( building ) ;
47796: LD_ADDR_VAR 0 4
47800: PUSH
47801: LD_VAR 0 1
47805: PPUSH
47806: CALL_OW 274
47810: ST_TO_ADDR
// if not pom then
47811: LD_VAR 0 4
47815: NOT
47816: IFFALSE 47820
// exit ;
47818: GO 47921
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47820: LD_ADDR_VAR 0 5
47824: PUSH
47825: LD_VAR 0 2
47829: PPUSH
47830: LD_VAR 0 1
47834: PPUSH
47835: CALL_OW 248
47839: PPUSH
47840: CALL_OW 450
47844: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47845: LD_ADDR_VAR 0 3
47849: PUSH
47850: LD_VAR 0 4
47854: PPUSH
47855: LD_INT 1
47857: PPUSH
47858: CALL_OW 275
47862: PUSH
47863: LD_VAR 0 5
47867: PUSH
47868: LD_INT 1
47870: ARRAY
47871: GREATEREQUAL
47872: PUSH
47873: LD_VAR 0 4
47877: PPUSH
47878: LD_INT 2
47880: PPUSH
47881: CALL_OW 275
47885: PUSH
47886: LD_VAR 0 5
47890: PUSH
47891: LD_INT 2
47893: ARRAY
47894: GREATEREQUAL
47895: AND
47896: PUSH
47897: LD_VAR 0 4
47901: PPUSH
47902: LD_INT 3
47904: PPUSH
47905: CALL_OW 275
47909: PUSH
47910: LD_VAR 0 5
47914: PUSH
47915: LD_INT 3
47917: ARRAY
47918: GREATEREQUAL
47919: AND
47920: ST_TO_ADDR
// end ;
47921: LD_VAR 0 3
47925: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47926: LD_INT 0
47928: PPUSH
47929: PPUSH
47930: PPUSH
47931: PPUSH
47932: PPUSH
47933: PPUSH
47934: PPUSH
47935: PPUSH
47936: PPUSH
47937: PPUSH
47938: PPUSH
// result := false ;
47939: LD_ADDR_VAR 0 8
47943: PUSH
47944: LD_INT 0
47946: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47947: LD_VAR 0 5
47951: NOT
47952: PUSH
47953: LD_VAR 0 1
47957: NOT
47958: OR
47959: PUSH
47960: LD_VAR 0 2
47964: NOT
47965: OR
47966: PUSH
47967: LD_VAR 0 3
47971: NOT
47972: OR
47973: IFFALSE 47977
// exit ;
47975: GO 48791
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47977: LD_ADDR_VAR 0 14
47981: PUSH
47982: LD_VAR 0 1
47986: PPUSH
47987: LD_VAR 0 2
47991: PPUSH
47992: LD_VAR 0 3
47996: PPUSH
47997: LD_VAR 0 4
48001: PPUSH
48002: LD_VAR 0 5
48006: PUSH
48007: LD_INT 1
48009: ARRAY
48010: PPUSH
48011: CALL_OW 248
48015: PPUSH
48016: LD_INT 0
48018: PPUSH
48019: CALL 50028 0 6
48023: ST_TO_ADDR
// if not hexes then
48024: LD_VAR 0 14
48028: NOT
48029: IFFALSE 48033
// exit ;
48031: GO 48791
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48033: LD_ADDR_VAR 0 17
48037: PUSH
48038: LD_VAR 0 5
48042: PPUSH
48043: LD_INT 22
48045: PUSH
48046: LD_VAR 0 13
48050: PPUSH
48051: CALL_OW 255
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: LD_INT 30
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 30
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: LIST
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PPUSH
48092: CALL_OW 72
48096: ST_TO_ADDR
// for i = 1 to hexes do
48097: LD_ADDR_VAR 0 9
48101: PUSH
48102: DOUBLE
48103: LD_INT 1
48105: DEC
48106: ST_TO_ADDR
48107: LD_VAR 0 14
48111: PUSH
48112: FOR_TO
48113: IFFALSE 48789
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48115: LD_ADDR_VAR 0 13
48119: PUSH
48120: LD_VAR 0 14
48124: PUSH
48125: LD_VAR 0 9
48129: ARRAY
48130: PUSH
48131: LD_INT 1
48133: ARRAY
48134: PPUSH
48135: LD_VAR 0 14
48139: PUSH
48140: LD_VAR 0 9
48144: ARRAY
48145: PUSH
48146: LD_INT 2
48148: ARRAY
48149: PPUSH
48150: CALL_OW 428
48154: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48155: LD_VAR 0 14
48159: PUSH
48160: LD_VAR 0 9
48164: ARRAY
48165: PUSH
48166: LD_INT 1
48168: ARRAY
48169: PPUSH
48170: LD_VAR 0 14
48174: PUSH
48175: LD_VAR 0 9
48179: ARRAY
48180: PUSH
48181: LD_INT 2
48183: ARRAY
48184: PPUSH
48185: CALL_OW 351
48189: PUSH
48190: LD_VAR 0 14
48194: PUSH
48195: LD_VAR 0 9
48199: ARRAY
48200: PUSH
48201: LD_INT 1
48203: ARRAY
48204: PPUSH
48205: LD_VAR 0 14
48209: PUSH
48210: LD_VAR 0 9
48214: ARRAY
48215: PUSH
48216: LD_INT 2
48218: ARRAY
48219: PPUSH
48220: CALL_OW 488
48224: NOT
48225: OR
48226: PUSH
48227: LD_VAR 0 13
48231: PPUSH
48232: CALL_OW 247
48236: PUSH
48237: LD_INT 3
48239: EQUAL
48240: OR
48241: IFFALSE 48247
// exit ;
48243: POP
48244: POP
48245: GO 48791
// if not tmp then
48247: LD_VAR 0 13
48251: NOT
48252: IFFALSE 48256
// continue ;
48254: GO 48112
// result := true ;
48256: LD_ADDR_VAR 0 8
48260: PUSH
48261: LD_INT 1
48263: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48264: LD_VAR 0 6
48268: PUSH
48269: LD_VAR 0 13
48273: PPUSH
48274: CALL_OW 247
48278: PUSH
48279: LD_INT 2
48281: EQUAL
48282: AND
48283: PUSH
48284: LD_VAR 0 13
48288: PPUSH
48289: CALL_OW 263
48293: PUSH
48294: LD_INT 1
48296: EQUAL
48297: AND
48298: IFFALSE 48462
// begin if IsDrivenBy ( tmp ) then
48300: LD_VAR 0 13
48304: PPUSH
48305: CALL_OW 311
48309: IFFALSE 48313
// continue ;
48311: GO 48112
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48313: LD_VAR 0 6
48317: PPUSH
48318: LD_INT 3
48320: PUSH
48321: LD_INT 60
48323: PUSH
48324: EMPTY
48325: LIST
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 3
48333: PUSH
48334: LD_INT 55
48336: PUSH
48337: EMPTY
48338: LIST
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PPUSH
48348: CALL_OW 72
48352: IFFALSE 48460
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48354: LD_ADDR_VAR 0 18
48358: PUSH
48359: LD_VAR 0 6
48363: PPUSH
48364: LD_INT 3
48366: PUSH
48367: LD_INT 60
48369: PUSH
48370: EMPTY
48371: LIST
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 3
48379: PUSH
48380: LD_INT 55
48382: PUSH
48383: EMPTY
48384: LIST
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PPUSH
48394: CALL_OW 72
48398: PUSH
48399: LD_INT 1
48401: ARRAY
48402: ST_TO_ADDR
// if IsInUnit ( driver ) then
48403: LD_VAR 0 18
48407: PPUSH
48408: CALL_OW 310
48412: IFFALSE 48423
// ComExit ( driver ) ;
48414: LD_VAR 0 18
48418: PPUSH
48419: CALL 73212 0 1
// AddComEnterUnit ( driver , tmp ) ;
48423: LD_VAR 0 18
48427: PPUSH
48428: LD_VAR 0 13
48432: PPUSH
48433: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48437: LD_VAR 0 18
48441: PPUSH
48442: LD_VAR 0 7
48446: PPUSH
48447: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48451: LD_VAR 0 18
48455: PPUSH
48456: CALL_OW 181
// end ; continue ;
48460: GO 48112
// end ; if not cleaners or not tmp in cleaners then
48462: LD_VAR 0 6
48466: NOT
48467: PUSH
48468: LD_VAR 0 13
48472: PUSH
48473: LD_VAR 0 6
48477: IN
48478: NOT
48479: OR
48480: IFFALSE 48787
// begin if dep then
48482: LD_VAR 0 17
48486: IFFALSE 48622
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48488: LD_ADDR_VAR 0 16
48492: PUSH
48493: LD_VAR 0 17
48497: PUSH
48498: LD_INT 1
48500: ARRAY
48501: PPUSH
48502: CALL_OW 250
48506: PPUSH
48507: LD_VAR 0 17
48511: PUSH
48512: LD_INT 1
48514: ARRAY
48515: PPUSH
48516: CALL_OW 254
48520: PPUSH
48521: LD_INT 5
48523: PPUSH
48524: CALL_OW 272
48528: PUSH
48529: LD_VAR 0 17
48533: PUSH
48534: LD_INT 1
48536: ARRAY
48537: PPUSH
48538: CALL_OW 251
48542: PPUSH
48543: LD_VAR 0 17
48547: PUSH
48548: LD_INT 1
48550: ARRAY
48551: PPUSH
48552: CALL_OW 254
48556: PPUSH
48557: LD_INT 5
48559: PPUSH
48560: CALL_OW 273
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48569: LD_VAR 0 16
48573: PUSH
48574: LD_INT 1
48576: ARRAY
48577: PPUSH
48578: LD_VAR 0 16
48582: PUSH
48583: LD_INT 2
48585: ARRAY
48586: PPUSH
48587: CALL_OW 488
48591: IFFALSE 48622
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48593: LD_VAR 0 13
48597: PPUSH
48598: LD_VAR 0 16
48602: PUSH
48603: LD_INT 1
48605: ARRAY
48606: PPUSH
48607: LD_VAR 0 16
48611: PUSH
48612: LD_INT 2
48614: ARRAY
48615: PPUSH
48616: CALL_OW 111
// continue ;
48620: GO 48112
// end ; end ; r := GetDir ( tmp ) ;
48622: LD_ADDR_VAR 0 15
48626: PUSH
48627: LD_VAR 0 13
48631: PPUSH
48632: CALL_OW 254
48636: ST_TO_ADDR
// if r = 5 then
48637: LD_VAR 0 15
48641: PUSH
48642: LD_INT 5
48644: EQUAL
48645: IFFALSE 48655
// r := 0 ;
48647: LD_ADDR_VAR 0 15
48651: PUSH
48652: LD_INT 0
48654: ST_TO_ADDR
// for j = r to 5 do
48655: LD_ADDR_VAR 0 10
48659: PUSH
48660: DOUBLE
48661: LD_VAR 0 15
48665: DEC
48666: ST_TO_ADDR
48667: LD_INT 5
48669: PUSH
48670: FOR_TO
48671: IFFALSE 48785
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48673: LD_ADDR_VAR 0 11
48677: PUSH
48678: LD_VAR 0 13
48682: PPUSH
48683: CALL_OW 250
48687: PPUSH
48688: LD_VAR 0 10
48692: PPUSH
48693: LD_INT 2
48695: PPUSH
48696: CALL_OW 272
48700: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48701: LD_ADDR_VAR 0 12
48705: PUSH
48706: LD_VAR 0 13
48710: PPUSH
48711: CALL_OW 251
48715: PPUSH
48716: LD_VAR 0 10
48720: PPUSH
48721: LD_INT 2
48723: PPUSH
48724: CALL_OW 273
48728: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48729: LD_VAR 0 11
48733: PPUSH
48734: LD_VAR 0 12
48738: PPUSH
48739: CALL_OW 488
48743: PUSH
48744: LD_VAR 0 11
48748: PPUSH
48749: LD_VAR 0 12
48753: PPUSH
48754: CALL_OW 428
48758: NOT
48759: AND
48760: IFFALSE 48783
// begin ComMoveXY ( tmp , _x , _y ) ;
48762: LD_VAR 0 13
48766: PPUSH
48767: LD_VAR 0 11
48771: PPUSH
48772: LD_VAR 0 12
48776: PPUSH
48777: CALL_OW 111
// break ;
48781: GO 48785
// end ; end ;
48783: GO 48670
48785: POP
48786: POP
// end ; end ;
48787: GO 48112
48789: POP
48790: POP
// end ;
48791: LD_VAR 0 8
48795: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48796: LD_INT 0
48798: PPUSH
// result := true ;
48799: LD_ADDR_VAR 0 3
48803: PUSH
48804: LD_INT 1
48806: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48807: LD_VAR 0 2
48811: PUSH
48812: LD_INT 24
48814: DOUBLE
48815: EQUAL
48816: IFTRUE 48826
48818: LD_INT 33
48820: DOUBLE
48821: EQUAL
48822: IFTRUE 48826
48824: GO 48851
48826: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48827: LD_ADDR_VAR 0 3
48831: PUSH
48832: LD_INT 32
48834: PPUSH
48835: LD_VAR 0 1
48839: PPUSH
48840: CALL_OW 321
48844: PUSH
48845: LD_INT 2
48847: EQUAL
48848: ST_TO_ADDR
48849: GO 49171
48851: LD_INT 20
48853: DOUBLE
48854: EQUAL
48855: IFTRUE 48859
48857: GO 48884
48859: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48860: LD_ADDR_VAR 0 3
48864: PUSH
48865: LD_INT 6
48867: PPUSH
48868: LD_VAR 0 1
48872: PPUSH
48873: CALL_OW 321
48877: PUSH
48878: LD_INT 2
48880: EQUAL
48881: ST_TO_ADDR
48882: GO 49171
48884: LD_INT 22
48886: DOUBLE
48887: EQUAL
48888: IFTRUE 48898
48890: LD_INT 36
48892: DOUBLE
48893: EQUAL
48894: IFTRUE 48898
48896: GO 48923
48898: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48899: LD_ADDR_VAR 0 3
48903: PUSH
48904: LD_INT 15
48906: PPUSH
48907: LD_VAR 0 1
48911: PPUSH
48912: CALL_OW 321
48916: PUSH
48917: LD_INT 2
48919: EQUAL
48920: ST_TO_ADDR
48921: GO 49171
48923: LD_INT 30
48925: DOUBLE
48926: EQUAL
48927: IFTRUE 48931
48929: GO 48956
48931: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48932: LD_ADDR_VAR 0 3
48936: PUSH
48937: LD_INT 20
48939: PPUSH
48940: LD_VAR 0 1
48944: PPUSH
48945: CALL_OW 321
48949: PUSH
48950: LD_INT 2
48952: EQUAL
48953: ST_TO_ADDR
48954: GO 49171
48956: LD_INT 28
48958: DOUBLE
48959: EQUAL
48960: IFTRUE 48970
48962: LD_INT 21
48964: DOUBLE
48965: EQUAL
48966: IFTRUE 48970
48968: GO 48995
48970: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48971: LD_ADDR_VAR 0 3
48975: PUSH
48976: LD_INT 21
48978: PPUSH
48979: LD_VAR 0 1
48983: PPUSH
48984: CALL_OW 321
48988: PUSH
48989: LD_INT 2
48991: EQUAL
48992: ST_TO_ADDR
48993: GO 49171
48995: LD_INT 16
48997: DOUBLE
48998: EQUAL
48999: IFTRUE 49003
49001: GO 49030
49003: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49004: LD_ADDR_VAR 0 3
49008: PUSH
49009: LD_EXP 55
49013: PPUSH
49014: LD_VAR 0 1
49018: PPUSH
49019: CALL_OW 321
49023: PUSH
49024: LD_INT 2
49026: EQUAL
49027: ST_TO_ADDR
49028: GO 49171
49030: LD_INT 19
49032: DOUBLE
49033: EQUAL
49034: IFTRUE 49044
49036: LD_INT 23
49038: DOUBLE
49039: EQUAL
49040: IFTRUE 49044
49042: GO 49071
49044: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49045: LD_ADDR_VAR 0 3
49049: PUSH
49050: LD_EXP 54
49054: PPUSH
49055: LD_VAR 0 1
49059: PPUSH
49060: CALL_OW 321
49064: PUSH
49065: LD_INT 2
49067: EQUAL
49068: ST_TO_ADDR
49069: GO 49171
49071: LD_INT 17
49073: DOUBLE
49074: EQUAL
49075: IFTRUE 49079
49077: GO 49104
49079: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49080: LD_ADDR_VAR 0 3
49084: PUSH
49085: LD_INT 39
49087: PPUSH
49088: LD_VAR 0 1
49092: PPUSH
49093: CALL_OW 321
49097: PUSH
49098: LD_INT 2
49100: EQUAL
49101: ST_TO_ADDR
49102: GO 49171
49104: LD_INT 18
49106: DOUBLE
49107: EQUAL
49108: IFTRUE 49112
49110: GO 49137
49112: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49113: LD_ADDR_VAR 0 3
49117: PUSH
49118: LD_INT 40
49120: PPUSH
49121: LD_VAR 0 1
49125: PPUSH
49126: CALL_OW 321
49130: PUSH
49131: LD_INT 2
49133: EQUAL
49134: ST_TO_ADDR
49135: GO 49171
49137: LD_INT 27
49139: DOUBLE
49140: EQUAL
49141: IFTRUE 49145
49143: GO 49170
49145: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49146: LD_ADDR_VAR 0 3
49150: PUSH
49151: LD_INT 35
49153: PPUSH
49154: LD_VAR 0 1
49158: PPUSH
49159: CALL_OW 321
49163: PUSH
49164: LD_INT 2
49166: EQUAL
49167: ST_TO_ADDR
49168: GO 49171
49170: POP
// end ;
49171: LD_VAR 0 3
49175: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49176: LD_INT 0
49178: PPUSH
49179: PPUSH
49180: PPUSH
49181: PPUSH
49182: PPUSH
49183: PPUSH
49184: PPUSH
49185: PPUSH
49186: PPUSH
49187: PPUSH
49188: PPUSH
// result := false ;
49189: LD_ADDR_VAR 0 6
49193: PUSH
49194: LD_INT 0
49196: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49197: LD_VAR 0 1
49201: NOT
49202: PUSH
49203: LD_VAR 0 1
49207: PPUSH
49208: CALL_OW 266
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: IN
49223: NOT
49224: OR
49225: PUSH
49226: LD_VAR 0 2
49230: NOT
49231: OR
49232: PUSH
49233: LD_VAR 0 5
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: LD_INT 3
49249: PUSH
49250: LD_INT 4
49252: PUSH
49253: LD_INT 5
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: IN
49264: NOT
49265: OR
49266: PUSH
49267: LD_VAR 0 3
49271: PPUSH
49272: LD_VAR 0 4
49276: PPUSH
49277: CALL_OW 488
49281: NOT
49282: OR
49283: IFFALSE 49287
// exit ;
49285: GO 50023
// side := GetSide ( depot ) ;
49287: LD_ADDR_VAR 0 9
49291: PUSH
49292: LD_VAR 0 1
49296: PPUSH
49297: CALL_OW 255
49301: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49302: LD_VAR 0 9
49306: PPUSH
49307: LD_VAR 0 2
49311: PPUSH
49312: CALL 48796 0 2
49316: NOT
49317: IFFALSE 49321
// exit ;
49319: GO 50023
// pom := GetBase ( depot ) ;
49321: LD_ADDR_VAR 0 10
49325: PUSH
49326: LD_VAR 0 1
49330: PPUSH
49331: CALL_OW 274
49335: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49336: LD_ADDR_VAR 0 11
49340: PUSH
49341: LD_VAR 0 2
49345: PPUSH
49346: LD_VAR 0 1
49350: PPUSH
49351: CALL_OW 248
49355: PPUSH
49356: CALL_OW 450
49360: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49361: LD_VAR 0 10
49365: PPUSH
49366: LD_INT 1
49368: PPUSH
49369: CALL_OW 275
49373: PUSH
49374: LD_VAR 0 11
49378: PUSH
49379: LD_INT 1
49381: ARRAY
49382: GREATEREQUAL
49383: PUSH
49384: LD_VAR 0 10
49388: PPUSH
49389: LD_INT 2
49391: PPUSH
49392: CALL_OW 275
49396: PUSH
49397: LD_VAR 0 11
49401: PUSH
49402: LD_INT 2
49404: ARRAY
49405: GREATEREQUAL
49406: AND
49407: PUSH
49408: LD_VAR 0 10
49412: PPUSH
49413: LD_INT 3
49415: PPUSH
49416: CALL_OW 275
49420: PUSH
49421: LD_VAR 0 11
49425: PUSH
49426: LD_INT 3
49428: ARRAY
49429: GREATEREQUAL
49430: AND
49431: NOT
49432: IFFALSE 49436
// exit ;
49434: GO 50023
// if GetBType ( depot ) = b_depot then
49436: LD_VAR 0 1
49440: PPUSH
49441: CALL_OW 266
49445: PUSH
49446: LD_INT 0
49448: EQUAL
49449: IFFALSE 49461
// dist := 28 else
49451: LD_ADDR_VAR 0 14
49455: PUSH
49456: LD_INT 28
49458: ST_TO_ADDR
49459: GO 49469
// dist := 36 ;
49461: LD_ADDR_VAR 0 14
49465: PUSH
49466: LD_INT 36
49468: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49469: LD_VAR 0 1
49473: PPUSH
49474: LD_VAR 0 3
49478: PPUSH
49479: LD_VAR 0 4
49483: PPUSH
49484: CALL_OW 297
49488: PUSH
49489: LD_VAR 0 14
49493: GREATER
49494: IFFALSE 49498
// exit ;
49496: GO 50023
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49498: LD_ADDR_VAR 0 12
49502: PUSH
49503: LD_VAR 0 2
49507: PPUSH
49508: LD_VAR 0 3
49512: PPUSH
49513: LD_VAR 0 4
49517: PPUSH
49518: LD_VAR 0 5
49522: PPUSH
49523: LD_VAR 0 1
49527: PPUSH
49528: CALL_OW 248
49532: PPUSH
49533: LD_INT 0
49535: PPUSH
49536: CALL 50028 0 6
49540: ST_TO_ADDR
// if not hexes then
49541: LD_VAR 0 12
49545: NOT
49546: IFFALSE 49550
// exit ;
49548: GO 50023
// hex := GetHexInfo ( x , y ) ;
49550: LD_ADDR_VAR 0 15
49554: PUSH
49555: LD_VAR 0 3
49559: PPUSH
49560: LD_VAR 0 4
49564: PPUSH
49565: CALL_OW 546
49569: ST_TO_ADDR
// if hex [ 1 ] then
49570: LD_VAR 0 15
49574: PUSH
49575: LD_INT 1
49577: ARRAY
49578: IFFALSE 49582
// exit ;
49580: GO 50023
// height := hex [ 2 ] ;
49582: LD_ADDR_VAR 0 13
49586: PUSH
49587: LD_VAR 0 15
49591: PUSH
49592: LD_INT 2
49594: ARRAY
49595: ST_TO_ADDR
// for i = 1 to hexes do
49596: LD_ADDR_VAR 0 7
49600: PUSH
49601: DOUBLE
49602: LD_INT 1
49604: DEC
49605: ST_TO_ADDR
49606: LD_VAR 0 12
49610: PUSH
49611: FOR_TO
49612: IFFALSE 49942
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49614: LD_VAR 0 12
49618: PUSH
49619: LD_VAR 0 7
49623: ARRAY
49624: PUSH
49625: LD_INT 1
49627: ARRAY
49628: PPUSH
49629: LD_VAR 0 12
49633: PUSH
49634: LD_VAR 0 7
49638: ARRAY
49639: PUSH
49640: LD_INT 2
49642: ARRAY
49643: PPUSH
49644: CALL_OW 488
49648: NOT
49649: PUSH
49650: LD_VAR 0 12
49654: PUSH
49655: LD_VAR 0 7
49659: ARRAY
49660: PUSH
49661: LD_INT 1
49663: ARRAY
49664: PPUSH
49665: LD_VAR 0 12
49669: PUSH
49670: LD_VAR 0 7
49674: ARRAY
49675: PUSH
49676: LD_INT 2
49678: ARRAY
49679: PPUSH
49680: CALL_OW 428
49684: PUSH
49685: LD_INT 0
49687: GREATER
49688: OR
49689: PUSH
49690: LD_VAR 0 12
49694: PUSH
49695: LD_VAR 0 7
49699: ARRAY
49700: PUSH
49701: LD_INT 1
49703: ARRAY
49704: PPUSH
49705: LD_VAR 0 12
49709: PUSH
49710: LD_VAR 0 7
49714: ARRAY
49715: PUSH
49716: LD_INT 2
49718: ARRAY
49719: PPUSH
49720: CALL_OW 351
49724: OR
49725: IFFALSE 49731
// exit ;
49727: POP
49728: POP
49729: GO 50023
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49731: LD_ADDR_VAR 0 8
49735: PUSH
49736: LD_VAR 0 12
49740: PUSH
49741: LD_VAR 0 7
49745: ARRAY
49746: PUSH
49747: LD_INT 1
49749: ARRAY
49750: PPUSH
49751: LD_VAR 0 12
49755: PUSH
49756: LD_VAR 0 7
49760: ARRAY
49761: PUSH
49762: LD_INT 2
49764: ARRAY
49765: PPUSH
49766: CALL_OW 546
49770: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49771: LD_VAR 0 8
49775: PUSH
49776: LD_INT 1
49778: ARRAY
49779: PUSH
49780: LD_VAR 0 8
49784: PUSH
49785: LD_INT 2
49787: ARRAY
49788: PUSH
49789: LD_VAR 0 13
49793: PUSH
49794: LD_INT 2
49796: PLUS
49797: GREATER
49798: OR
49799: PUSH
49800: LD_VAR 0 8
49804: PUSH
49805: LD_INT 2
49807: ARRAY
49808: PUSH
49809: LD_VAR 0 13
49813: PUSH
49814: LD_INT 2
49816: MINUS
49817: LESS
49818: OR
49819: PUSH
49820: LD_VAR 0 8
49824: PUSH
49825: LD_INT 3
49827: ARRAY
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: LD_INT 8
49834: PUSH
49835: LD_INT 9
49837: PUSH
49838: LD_INT 10
49840: PUSH
49841: LD_INT 11
49843: PUSH
49844: LD_INT 12
49846: PUSH
49847: LD_INT 13
49849: PUSH
49850: LD_INT 16
49852: PUSH
49853: LD_INT 17
49855: PUSH
49856: LD_INT 18
49858: PUSH
49859: LD_INT 19
49861: PUSH
49862: LD_INT 20
49864: PUSH
49865: LD_INT 21
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: IN
49883: NOT
49884: OR
49885: PUSH
49886: LD_VAR 0 8
49890: PUSH
49891: LD_INT 5
49893: ARRAY
49894: NOT
49895: OR
49896: PUSH
49897: LD_VAR 0 8
49901: PUSH
49902: LD_INT 6
49904: ARRAY
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: LD_INT 7
49914: PUSH
49915: LD_INT 9
49917: PUSH
49918: LD_INT 10
49920: PUSH
49921: LD_INT 11
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: IN
49932: NOT
49933: OR
49934: IFFALSE 49940
// exit ;
49936: POP
49937: POP
49938: GO 50023
// end ;
49940: GO 49611
49942: POP
49943: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49944: LD_VAR 0 9
49948: PPUSH
49949: LD_VAR 0 3
49953: PPUSH
49954: LD_VAR 0 4
49958: PPUSH
49959: LD_INT 20
49961: PPUSH
49962: CALL 41968 0 4
49966: PUSH
49967: LD_INT 4
49969: ARRAY
49970: IFFALSE 49974
// exit ;
49972: GO 50023
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49974: LD_VAR 0 2
49978: PUSH
49979: LD_INT 29
49981: PUSH
49982: LD_INT 30
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: IN
49989: PUSH
49990: LD_VAR 0 3
49994: PPUSH
49995: LD_VAR 0 4
49999: PPUSH
50000: LD_VAR 0 9
50004: PPUSH
50005: CALL_OW 440
50009: NOT
50010: AND
50011: IFFALSE 50015
// exit ;
50013: GO 50023
// result := true ;
50015: LD_ADDR_VAR 0 6
50019: PUSH
50020: LD_INT 1
50022: ST_TO_ADDR
// end ;
50023: LD_VAR 0 6
50027: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50028: LD_INT 0
50030: PPUSH
50031: PPUSH
50032: PPUSH
50033: PPUSH
50034: PPUSH
50035: PPUSH
50036: PPUSH
50037: PPUSH
50038: PPUSH
50039: PPUSH
50040: PPUSH
50041: PPUSH
50042: PPUSH
50043: PPUSH
50044: PPUSH
50045: PPUSH
50046: PPUSH
50047: PPUSH
50048: PPUSH
50049: PPUSH
50050: PPUSH
50051: PPUSH
50052: PPUSH
50053: PPUSH
50054: PPUSH
50055: PPUSH
50056: PPUSH
50057: PPUSH
50058: PPUSH
50059: PPUSH
50060: PPUSH
50061: PPUSH
50062: PPUSH
50063: PPUSH
50064: PPUSH
50065: PPUSH
50066: PPUSH
50067: PPUSH
50068: PPUSH
50069: PPUSH
50070: PPUSH
50071: PPUSH
50072: PPUSH
50073: PPUSH
50074: PPUSH
50075: PPUSH
50076: PPUSH
50077: PPUSH
50078: PPUSH
50079: PPUSH
50080: PPUSH
50081: PPUSH
50082: PPUSH
50083: PPUSH
50084: PPUSH
50085: PPUSH
50086: PPUSH
50087: PPUSH
// result = [ ] ;
50088: LD_ADDR_VAR 0 7
50092: PUSH
50093: EMPTY
50094: ST_TO_ADDR
// temp_list = [ ] ;
50095: LD_ADDR_VAR 0 9
50099: PUSH
50100: EMPTY
50101: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50102: LD_VAR 0 4
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: LD_INT 3
50118: PUSH
50119: LD_INT 4
50121: PUSH
50122: LD_INT 5
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: IN
50133: NOT
50134: PUSH
50135: LD_VAR 0 1
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: IN
50150: PUSH
50151: LD_VAR 0 5
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: LD_INT 3
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: LIST
50169: IN
50170: NOT
50171: AND
50172: OR
50173: IFFALSE 50177
// exit ;
50175: GO 68568
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50177: LD_VAR 0 1
50181: PUSH
50182: LD_INT 6
50184: PUSH
50185: LD_INT 7
50187: PUSH
50188: LD_INT 8
50190: PUSH
50191: LD_INT 13
50193: PUSH
50194: LD_INT 12
50196: PUSH
50197: LD_INT 15
50199: PUSH
50200: LD_INT 11
50202: PUSH
50203: LD_INT 14
50205: PUSH
50206: LD_INT 10
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: IN
50220: IFFALSE 50230
// btype = b_lab ;
50222: LD_ADDR_VAR 0 1
50226: PUSH
50227: LD_INT 6
50229: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50230: LD_VAR 0 6
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: IN
50249: NOT
50250: PUSH
50251: LD_VAR 0 1
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: LD_INT 3
50267: PUSH
50268: LD_INT 6
50270: PUSH
50271: LD_INT 36
50273: PUSH
50274: LD_INT 4
50276: PUSH
50277: LD_INT 5
50279: PUSH
50280: LD_INT 31
50282: PUSH
50283: LD_INT 32
50285: PUSH
50286: LD_INT 33
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: IN
50302: NOT
50303: PUSH
50304: LD_VAR 0 6
50308: PUSH
50309: LD_INT 1
50311: EQUAL
50312: AND
50313: OR
50314: PUSH
50315: LD_VAR 0 1
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 3
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: IN
50330: NOT
50331: PUSH
50332: LD_VAR 0 6
50336: PUSH
50337: LD_INT 2
50339: EQUAL
50340: AND
50341: OR
50342: IFFALSE 50352
// mode = 0 ;
50344: LD_ADDR_VAR 0 6
50348: PUSH
50349: LD_INT 0
50351: ST_TO_ADDR
// case mode of 0 :
50352: LD_VAR 0 6
50356: PUSH
50357: LD_INT 0
50359: DOUBLE
50360: EQUAL
50361: IFTRUE 50365
50363: GO 61818
50365: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50366: LD_ADDR_VAR 0 11
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: LD_INT 2
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: LD_INT 3
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 3
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50559: LD_ADDR_VAR 0 12
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 3
50727: NEG
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50755: LD_ADDR_VAR 0 13
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 2
50858: PUSH
50859: LD_INT 2
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 2
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: LD_INT 3
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 3
50914: NEG
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 3
50926: NEG
50927: PUSH
50928: LD_INT 3
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50954: LD_ADDR_VAR 0 14
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: LD_INT 3
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 3
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51150: LD_ADDR_VAR 0 15
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 0
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: NEG
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 3
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 3
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51343: LD_ADDR_VAR 0 16
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 2
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 2
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 3
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: LD_INT 3
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: LD_INT 3
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51536: LD_ADDR_VAR 0 17
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 2
51712: NEG
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51766: LD_ADDR_VAR 0 18
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 2
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 2
51953: NEG
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 2
51965: NEG
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51996: LD_ADDR_VAR 0 19
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 2
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 2
52172: NEG
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 2
52183: NEG
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52226: LD_ADDR_VAR 0 20
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 2
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: LD_INT 2
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 2
52413: NEG
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52456: LD_ADDR_VAR 0 21
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: NEG
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52686: LD_ADDR_VAR 0 22
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 2
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52916: LD_ADDR_VAR 0 23
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: NEG
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: NEG
53128: PUSH
53129: LD_INT 3
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: LD_INT 3
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53196: LD_ADDR_VAR 0 24
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 2
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 3
53439: PUSH
53440: LD_INT 2
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53472: LD_ADDR_VAR 0 25
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: LD_INT 1
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: LD_INT 2
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: LD_INT 2
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 2
53671: NEG
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 3
53693: PUSH
53694: LD_INT 2
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: LD_INT 3
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: LD_INT 3
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53746: LD_ADDR_VAR 0 26
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 2
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 2
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: NEG
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: LD_INT 2
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: LD_INT 3
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54022: LD_ADDR_VAR 0 27
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 2
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 2
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 3
54255: NEG
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 3
54267: NEG
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54302: LD_ADDR_VAR 0 28
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: LD_INT 2
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 2
54513: NEG
54514: PUSH
54515: LD_INT 3
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 3
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 3
54537: NEG
54538: PUSH
54539: LD_INT 1
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 3
54549: NEG
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54584: LD_ADDR_VAR 0 29
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 2
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 2
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: LD_INT 3
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 3
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 3
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 3
54828: NEG
54829: PUSH
54830: LD_INT 2
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54863: LD_ADDR_VAR 0 30
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: LD_INT 3
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 3
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: LD_INT 3
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 3
55106: NEG
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55141: LD_ADDR_VAR 0 31
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: LD_INT 2
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 2
55330: NEG
55331: PUSH
55332: LD_INT 3
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 3
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 3
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 3
55384: NEG
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55419: LD_ADDR_VAR 0 32
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 2
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: LD_INT 3
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 2
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 3
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 3
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 3
55662: NEG
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55697: LD_ADDR_VAR 0 33
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: LD_INT 2
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: LD_INT 3
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 3
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 3
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55976: LD_ADDR_VAR 0 34
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: NEG
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: LD_INT 3
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 2
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 3
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 3
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 3
56221: NEG
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56256: LD_ADDR_VAR 0 35
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56368: LD_ADDR_VAR 0 36
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 2
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56480: LD_ADDR_VAR 0 37
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56592: LD_ADDR_VAR 0 38
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56704: LD_ADDR_VAR 0 39
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: NEG
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 2
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56816: LD_ADDR_VAR 0 40
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: LD_INT 0
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: NEG
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56928: LD_ADDR_VAR 0 41
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: LD_INT 2
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: LD_INT 3
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 3
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 3
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 3
57171: PUSH
57172: LD_INT 3
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 2
57181: PUSH
57182: LD_INT 3
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 3
57202: NEG
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 3
57225: NEG
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 3
57237: NEG
57238: PUSH
57239: LD_INT 3
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57278: LD_ADDR_VAR 0 42
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: LD_INT 2
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 2
57456: NEG
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: LD_INT 3
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: LD_INT 2
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 3
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 3
57524: PUSH
57525: LD_INT 3
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: LD_INT 3
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: LD_INT 3
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 3
57575: NEG
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 3
57587: NEG
57588: PUSH
57589: LD_INT 3
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57628: LD_ADDR_VAR 0 43
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: NEG
57710: PUSH
57711: LD_INT 2
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: LD_INT 2
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 2
57805: NEG
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: LD_INT 3
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: LD_INT 3
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: LD_INT 2
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 3
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 3
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: LD_INT 3
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 3
57924: NEG
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 3
57935: NEG
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57976: LD_ADDR_VAR 0 44
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 2
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: NEG
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 2
58142: NEG
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: LD_INT 3
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 2
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 3
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 3
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 3
58219: PUSH
58220: LD_INT 3
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: PUSH
58230: LD_INT 3
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 2
58239: NEG
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 3
58250: NEG
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 3
58261: NEG
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 3
58273: NEG
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 3
58285: NEG
58286: PUSH
58287: LD_INT 3
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58326: LD_ADDR_VAR 0 45
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: LD_INT 2
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 2
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: LD_INT 2
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 2
58516: NEG
58517: PUSH
58518: LD_INT 3
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: LD_INT 3
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: LD_INT 3
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 2
58582: PUSH
58583: LD_INT 3
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 3
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 2
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 3
58623: NEG
58624: PUSH
58625: LD_INT 2
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 3
58635: NEG
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58676: LD_ADDR_VAR 0 46
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 2
58853: NEG
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: LD_INT 3
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: LD_INT 3
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 3
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 3
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: LD_INT 3
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 3
58972: NEG
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 3
58983: NEG
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59024: LD_ADDR_VAR 0 47
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: LD_INT 2
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59175: LD_ADDR_VAR 0 48
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 1
59233: NEG
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: LD_INT 1
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: LD_INT 2
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: LD_INT 2
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59322: LD_ADDR_VAR 0 49
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: LD_INT 1
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59466: LD_ADDR_VAR 0 50
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 0
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59610: LD_ADDR_VAR 0 51
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59757: LD_ADDR_VAR 0 52
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: LD_INT 1
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: NEG
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: NEG
59885: PUSH
59886: LD_INT 2
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59908: LD_ADDR_VAR 0 53
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: LD_INT 2
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 2
60084: NEG
60085: PUSH
60086: LD_INT 0
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 2
60107: NEG
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60138: LD_ADDR_VAR 0 54
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: LD_INT 2
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 2
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: LD_INT 2
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 2
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 2
60337: NEG
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60368: LD_ADDR_VAR 0 55
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 2
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 2
60544: NEG
60545: PUSH
60546: LD_INT 0
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 2
60555: NEG
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: NEG
60568: PUSH
60569: LD_INT 2
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60598: LD_ADDR_VAR 0 56
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 1
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: LD_INT 2
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: LD_INT 2
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: LD_INT 1
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 0
60753: PUSH
60754: LD_INT 2
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 2
60774: NEG
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 2
60785: NEG
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: LD_INT 2
60801: NEG
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60828: LD_ADDR_VAR 0 57
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: LD_INT 2
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: LD_INT 2
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 2
61004: NEG
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 2
61015: NEG
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 2
61027: NEG
61028: PUSH
61029: LD_INT 2
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61058: LD_ADDR_VAR 0 58
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: LD_INT 1
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: LD_INT 2
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 1
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 2
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: NEG
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 2
61257: NEG
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61288: LD_ADDR_VAR 0 59
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 1
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: NEG
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61376: LD_ADDR_VAR 0 60
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: NEG
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61464: LD_ADDR_VAR 0 61
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61552: LD_ADDR_VAR 0 62
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61640: LD_ADDR_VAR 0 63
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61728: LD_ADDR_VAR 0 64
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: ST_TO_ADDR
// end ; 1 :
61816: GO 67713
61818: LD_INT 1
61820: DOUBLE
61821: EQUAL
61822: IFTRUE 61826
61824: GO 64449
61826: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61827: LD_ADDR_VAR 0 11
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: LD_INT 3
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: LD_INT 3
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: LIST
61870: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61871: LD_ADDR_VAR 0 12
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 3
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 3
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: LIST
61911: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61912: LD_ADDR_VAR 0 13
61916: PUSH
61917: LD_INT 3
61919: PUSH
61920: LD_INT 2
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 3
61929: PUSH
61930: LD_INT 3
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 2
61939: PUSH
61940: LD_INT 3
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: LIST
61951: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61952: LD_ADDR_VAR 0 14
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: LD_INT 3
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 0
61969: PUSH
61970: LD_INT 3
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: LD_INT 2
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: LIST
61992: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61993: LD_ADDR_VAR 0 15
61997: PUSH
61998: LD_INT 2
62000: NEG
62001: PUSH
62002: LD_INT 1
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 3
62011: NEG
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 3
62022: NEG
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: LIST
62036: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62037: LD_ADDR_VAR 0 16
62041: PUSH
62042: LD_INT 2
62044: NEG
62045: PUSH
62046: LD_INT 3
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 3
62056: NEG
62057: PUSH
62058: LD_INT 2
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 3
62068: NEG
62069: PUSH
62070: LD_INT 3
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: LIST
62082: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62083: LD_ADDR_VAR 0 17
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: LD_INT 3
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: LD_INT 3
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 1
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: LIST
62126: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62127: LD_ADDR_VAR 0 18
62131: PUSH
62132: LD_INT 2
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 3
62145: PUSH
62146: LD_INT 0
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 3
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: LIST
62167: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62168: LD_ADDR_VAR 0 19
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: LD_INT 2
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 3
62185: PUSH
62186: LD_INT 3
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 2
62195: PUSH
62196: LD_INT 3
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: LIST
62207: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62208: LD_ADDR_VAR 0 20
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: LD_INT 3
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: LD_INT 3
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: NEG
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: LIST
62248: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62249: LD_ADDR_VAR 0 21
62253: PUSH
62254: LD_INT 2
62256: NEG
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 3
62267: NEG
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 3
62278: NEG
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: LIST
62292: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62293: LD_ADDR_VAR 0 22
62297: PUSH
62298: LD_INT 2
62300: NEG
62301: PUSH
62302: LD_INT 3
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 3
62312: NEG
62313: PUSH
62314: LD_INT 2
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 3
62324: NEG
62325: PUSH
62326: LD_INT 3
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: LIST
62338: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62339: LD_ADDR_VAR 0 23
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: LD_INT 3
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: LD_INT 4
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: LD_INT 3
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: LIST
62382: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62383: LD_ADDR_VAR 0 24
62387: PUSH
62388: LD_INT 3
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 3
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 4
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: LIST
62423: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62424: LD_ADDR_VAR 0 25
62428: PUSH
62429: LD_INT 3
62431: PUSH
62432: LD_INT 3
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 4
62441: PUSH
62442: LD_INT 3
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 3
62451: PUSH
62452: LD_INT 4
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: LIST
62463: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62464: LD_ADDR_VAR 0 26
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: LD_INT 3
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: LD_INT 4
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: LD_INT 3
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: LIST
62504: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62505: LD_ADDR_VAR 0 27
62509: PUSH
62510: LD_INT 3
62512: NEG
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 3
62523: NEG
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 4
62534: NEG
62535: PUSH
62536: LD_INT 1
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: LIST
62548: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62549: LD_ADDR_VAR 0 28
62553: PUSH
62554: LD_INT 3
62556: NEG
62557: PUSH
62558: LD_INT 3
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 3
62568: NEG
62569: PUSH
62570: LD_INT 4
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 4
62580: NEG
62581: PUSH
62582: LD_INT 3
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: LIST
62594: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62595: LD_ADDR_VAR 0 29
62599: PUSH
62600: LD_INT 1
62602: NEG
62603: PUSH
62604: LD_INT 3
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: LD_INT 3
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: PUSH
62626: LD_INT 2
62628: NEG
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: LD_INT 4
62640: NEG
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: LD_INT 4
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: PUSH
62660: LD_INT 3
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: LD_INT 5
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: LD_INT 5
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: LD_INT 4
62696: NEG
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 1
62704: NEG
62705: PUSH
62706: LD_INT 6
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 6
62719: NEG
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 1
62727: PUSH
62728: LD_INT 5
62730: NEG
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62750: LD_ADDR_VAR 0 30
62754: PUSH
62755: LD_INT 2
62757: PUSH
62758: LD_INT 1
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 3
62768: PUSH
62769: LD_INT 0
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 3
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 3
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 4
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 4
62809: PUSH
62810: LD_INT 1
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 4
62819: PUSH
62820: LD_INT 1
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 5
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 5
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 5
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 6
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 6
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62893: LD_ADDR_VAR 0 31
62897: PUSH
62898: LD_INT 3
62900: PUSH
62901: LD_INT 2
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 3
62910: PUSH
62911: LD_INT 3
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 2
62920: PUSH
62921: LD_INT 3
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 4
62930: PUSH
62931: LD_INT 3
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 4
62940: PUSH
62941: LD_INT 4
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 3
62950: PUSH
62951: LD_INT 4
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 5
62960: PUSH
62961: LD_INT 4
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 5
62970: PUSH
62971: LD_INT 5
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 4
62980: PUSH
62981: LD_INT 5
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 6
62990: PUSH
62991: LD_INT 5
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 6
63000: PUSH
63001: LD_INT 6
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 5
63010: PUSH
63011: LD_INT 6
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63032: LD_ADDR_VAR 0 32
63036: PUSH
63037: LD_INT 1
63039: PUSH
63040: LD_INT 3
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: LD_INT 3
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: NEG
63060: PUSH
63061: LD_INT 2
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 1
63070: PUSH
63071: LD_INT 4
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: LD_INT 4
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: LD_INT 3
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: PUSH
63102: LD_INT 5
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: LD_INT 5
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 1
63121: NEG
63122: PUSH
63123: LD_INT 4
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: LD_INT 6
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 0
63142: PUSH
63143: LD_INT 6
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 1
63152: NEG
63153: PUSH
63154: LD_INT 5
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63175: LD_ADDR_VAR 0 33
63179: PUSH
63180: LD_INT 2
63182: NEG
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 3
63193: NEG
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 3
63204: NEG
63205: PUSH
63206: LD_INT 1
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 3
63216: NEG
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 4
63227: NEG
63228: PUSH
63229: LD_INT 0
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 4
63238: NEG
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 4
63250: NEG
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 5
63261: NEG
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 5
63272: NEG
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 5
63284: NEG
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 6
63295: NEG
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 6
63306: NEG
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63330: LD_ADDR_VAR 0 34
63334: PUSH
63335: LD_INT 2
63337: NEG
63338: PUSH
63339: LD_INT 3
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 3
63349: NEG
63350: PUSH
63351: LD_INT 2
63353: NEG
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 3
63361: NEG
63362: PUSH
63363: LD_INT 3
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 3
63373: NEG
63374: PUSH
63375: LD_INT 4
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 4
63385: NEG
63386: PUSH
63387: LD_INT 3
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 4
63397: NEG
63398: PUSH
63399: LD_INT 4
63401: NEG
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 4
63409: NEG
63410: PUSH
63411: LD_INT 5
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 5
63421: NEG
63422: PUSH
63423: LD_INT 4
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 5
63433: NEG
63434: PUSH
63435: LD_INT 5
63437: NEG
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 5
63445: NEG
63446: PUSH
63447: LD_INT 6
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 6
63457: NEG
63458: PUSH
63459: LD_INT 5
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 6
63469: NEG
63470: PUSH
63471: LD_INT 6
63473: NEG
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63493: LD_ADDR_VAR 0 41
63497: PUSH
63498: LD_INT 0
63500: PUSH
63501: LD_INT 2
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 1
63511: NEG
63512: PUSH
63513: LD_INT 3
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 1
63523: PUSH
63524: LD_INT 2
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: LIST
63536: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63537: LD_ADDR_VAR 0 42
63541: PUSH
63542: LD_INT 2
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 2
63554: PUSH
63555: LD_INT 1
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 3
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: LIST
63577: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63578: LD_ADDR_VAR 0 43
63582: PUSH
63583: LD_INT 2
63585: PUSH
63586: LD_INT 2
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 3
63595: PUSH
63596: LD_INT 2
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 2
63605: PUSH
63606: LD_INT 3
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: LIST
63617: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63618: LD_ADDR_VAR 0 44
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 1
63635: PUSH
63636: LD_INT 3
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: LD_INT 2
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: LIST
63658: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63659: LD_ADDR_VAR 0 45
63663: PUSH
63664: LD_INT 2
63666: NEG
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 2
63677: NEG
63678: PUSH
63679: LD_INT 1
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 3
63688: NEG
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: LIST
63702: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63703: LD_ADDR_VAR 0 46
63707: PUSH
63708: LD_INT 2
63710: NEG
63711: PUSH
63712: LD_INT 2
63714: NEG
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 2
63722: NEG
63723: PUSH
63724: LD_INT 3
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 3
63734: NEG
63735: PUSH
63736: LD_INT 2
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63749: LD_ADDR_VAR 0 47
63753: PUSH
63754: LD_INT 2
63756: NEG
63757: PUSH
63758: LD_INT 3
63760: NEG
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: LD_INT 3
63772: NEG
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63782: LD_ADDR_VAR 0 48
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: LD_INT 2
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 2
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63813: LD_ADDR_VAR 0 49
63817: PUSH
63818: LD_INT 3
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 3
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63842: LD_ADDR_VAR 0 50
63846: PUSH
63847: LD_INT 2
63849: PUSH
63850: LD_INT 3
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 1
63859: PUSH
63860: LD_INT 3
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63871: LD_ADDR_VAR 0 51
63875: PUSH
63876: LD_INT 1
63878: NEG
63879: PUSH
63880: LD_INT 2
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 2
63889: NEG
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63902: LD_ADDR_VAR 0 52
63906: PUSH
63907: LD_INT 3
63909: NEG
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 3
63921: NEG
63922: PUSH
63923: LD_INT 2
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63935: LD_ADDR_VAR 0 53
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: LD_INT 3
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: LD_INT 3
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: LD_INT 2
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: LIST
63978: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63979: LD_ADDR_VAR 0 54
63983: PUSH
63984: LD_INT 2
63986: PUSH
63987: LD_INT 1
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 3
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 3
64007: PUSH
64008: LD_INT 1
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: LIST
64019: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64020: LD_ADDR_VAR 0 55
64024: PUSH
64025: LD_INT 3
64027: PUSH
64028: LD_INT 2
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 3
64037: PUSH
64038: LD_INT 3
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 2
64047: PUSH
64048: LD_INT 3
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: LIST
64059: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64060: LD_ADDR_VAR 0 56
64064: PUSH
64065: LD_INT 1
64067: PUSH
64068: LD_INT 3
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 3
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: LD_INT 2
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64101: LD_ADDR_VAR 0 57
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: LD_INT 1
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 3
64119: NEG
64120: PUSH
64121: LD_INT 0
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 3
64130: NEG
64131: PUSH
64132: LD_INT 1
64134: NEG
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: LIST
64144: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64145: LD_ADDR_VAR 0 58
64149: PUSH
64150: LD_INT 2
64152: NEG
64153: PUSH
64154: LD_INT 3
64156: NEG
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 3
64164: NEG
64165: PUSH
64166: LD_INT 2
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 3
64176: NEG
64177: PUSH
64178: LD_INT 3
64180: NEG
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: LIST
64190: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64191: LD_ADDR_VAR 0 59
64195: PUSH
64196: LD_INT 1
64198: NEG
64199: PUSH
64200: LD_INT 2
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: LD_INT 2
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 1
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: LIST
64234: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64235: LD_ADDR_VAR 0 60
64239: PUSH
64240: LD_INT 1
64242: PUSH
64243: LD_INT 1
64245: NEG
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 2
64253: PUSH
64254: LD_INT 0
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 2
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: LIST
64275: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64276: LD_ADDR_VAR 0 61
64280: PUSH
64281: LD_INT 2
64283: PUSH
64284: LD_INT 1
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 2
64293: PUSH
64294: LD_INT 2
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 1
64303: PUSH
64304: LD_INT 2
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: LIST
64315: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64316: LD_ADDR_VAR 0 62
64320: PUSH
64321: LD_INT 1
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 0
64333: PUSH
64334: LD_INT 2
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 1
64343: NEG
64344: PUSH
64345: LD_INT 1
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: LIST
64356: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64357: LD_ADDR_VAR 0 63
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 2
64375: NEG
64376: PUSH
64377: LD_INT 0
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 2
64386: NEG
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: LIST
64400: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64401: LD_ADDR_VAR 0 64
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: LD_INT 2
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 2
64420: NEG
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 2
64432: NEG
64433: PUSH
64434: LD_INT 2
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: LIST
64446: ST_TO_ADDR
// end ; 2 :
64447: GO 67713
64449: LD_INT 2
64451: DOUBLE
64452: EQUAL
64453: IFTRUE 64457
64455: GO 67712
64457: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64458: LD_ADDR_VAR 0 29
64462: PUSH
64463: LD_INT 4
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 4
64475: PUSH
64476: LD_INT 1
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 5
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 5
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 4
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 3
64516: PUSH
64517: LD_INT 0
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 3
64526: PUSH
64527: LD_INT 1
64529: NEG
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 3
64537: PUSH
64538: LD_INT 2
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 5
64548: PUSH
64549: LD_INT 2
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 3
64558: PUSH
64559: LD_INT 3
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 3
64568: PUSH
64569: LD_INT 2
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 4
64578: PUSH
64579: LD_INT 3
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 4
64588: PUSH
64589: LD_INT 4
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 3
64598: PUSH
64599: LD_INT 4
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: LD_INT 3
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 2
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 4
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 2
64638: PUSH
64639: LD_INT 4
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: LD_INT 4
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: LD_INT 3
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: LD_INT 4
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 1
64678: PUSH
64679: LD_INT 5
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: LD_INT 5
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 1
64698: NEG
64699: PUSH
64700: LD_INT 4
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 1
64709: NEG
64710: PUSH
64711: LD_INT 3
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 2
64720: PUSH
64721: LD_INT 5
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 2
64730: NEG
64731: PUSH
64732: LD_INT 3
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 3
64741: NEG
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 3
64752: NEG
64753: PUSH
64754: LD_INT 1
64756: NEG
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 2
64764: NEG
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 2
64775: NEG
64776: PUSH
64777: LD_INT 1
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 3
64786: NEG
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 4
64797: NEG
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 4
64808: NEG
64809: PUSH
64810: LD_INT 1
64812: NEG
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 4
64820: NEG
64821: PUSH
64822: LD_INT 2
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: NEG
64833: PUSH
64834: LD_INT 2
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 4
64843: NEG
64844: PUSH
64845: LD_INT 4
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 4
64855: NEG
64856: PUSH
64857: LD_INT 5
64859: NEG
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 3
64867: NEG
64868: PUSH
64869: LD_INT 4
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 3
64879: NEG
64880: PUSH
64881: LD_INT 3
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 4
64891: NEG
64892: PUSH
64893: LD_INT 3
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 5
64903: NEG
64904: PUSH
64905: LD_INT 4
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 5
64915: NEG
64916: PUSH
64917: LD_INT 5
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 3
64927: NEG
64928: PUSH
64929: LD_INT 5
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 5
64939: NEG
64940: PUSH
64941: LD_INT 3
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64996: LD_ADDR_VAR 0 30
65000: PUSH
65001: LD_INT 4
65003: PUSH
65004: LD_INT 4
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 4
65013: PUSH
65014: LD_INT 3
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 5
65023: PUSH
65024: LD_INT 4
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 5
65033: PUSH
65034: LD_INT 5
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 4
65043: PUSH
65044: LD_INT 5
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 3
65053: PUSH
65054: LD_INT 4
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 3
65063: PUSH
65064: LD_INT 3
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 5
65073: PUSH
65074: LD_INT 3
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 3
65083: PUSH
65084: LD_INT 5
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 0
65093: PUSH
65094: LD_INT 3
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: LD_INT 2
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 1
65113: PUSH
65114: LD_INT 3
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 1
65123: PUSH
65124: LD_INT 4
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: LD_INT 4
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 1
65143: NEG
65144: PUSH
65145: LD_INT 3
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 1
65154: NEG
65155: PUSH
65156: LD_INT 2
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 2
65165: PUSH
65166: LD_INT 4
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: LD_INT 2
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 4
65186: NEG
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 4
65197: NEG
65198: PUSH
65199: LD_INT 1
65201: NEG
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 3
65209: NEG
65210: PUSH
65211: LD_INT 0
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 3
65220: NEG
65221: PUSH
65222: LD_INT 1
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 4
65231: NEG
65232: PUSH
65233: LD_INT 1
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 5
65242: NEG
65243: PUSH
65244: LD_INT 0
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 5
65253: NEG
65254: PUSH
65255: LD_INT 1
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 5
65265: NEG
65266: PUSH
65267: LD_INT 2
65269: NEG
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 3
65277: NEG
65278: PUSH
65279: LD_INT 2
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 3
65288: NEG
65289: PUSH
65290: LD_INT 3
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 3
65300: NEG
65301: PUSH
65302: LD_INT 4
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 2
65312: NEG
65313: PUSH
65314: LD_INT 3
65316: NEG
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 2
65324: NEG
65325: PUSH
65326: LD_INT 2
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 3
65336: NEG
65337: PUSH
65338: LD_INT 2
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 4
65348: NEG
65349: PUSH
65350: LD_INT 3
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 4
65360: NEG
65361: PUSH
65362: LD_INT 4
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 2
65372: NEG
65373: PUSH
65374: LD_INT 4
65376: NEG
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 4
65384: NEG
65385: PUSH
65386: LD_INT 2
65388: NEG
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: LD_INT 4
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: LD_INT 5
65410: NEG
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 1
65418: PUSH
65419: LD_INT 4
65421: NEG
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: LD_INT 3
65432: NEG
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 0
65440: PUSH
65441: LD_INT 3
65443: NEG
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: LD_INT 4
65455: NEG
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 1
65463: NEG
65464: PUSH
65465: LD_INT 5
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 2
65475: PUSH
65476: LD_INT 3
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 2
65486: NEG
65487: PUSH
65488: LD_INT 5
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65543: LD_ADDR_VAR 0 31
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: LD_INT 4
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 0
65560: PUSH
65561: LD_INT 3
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: PUSH
65571: LD_INT 4
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 1
65580: PUSH
65581: LD_INT 5
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: LD_INT 5
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 1
65600: NEG
65601: PUSH
65602: LD_INT 4
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 1
65611: NEG
65612: PUSH
65613: LD_INT 3
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 2
65622: PUSH
65623: LD_INT 5
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 2
65632: NEG
65633: PUSH
65634: LD_INT 3
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 3
65643: NEG
65644: PUSH
65645: LD_INT 0
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 3
65654: NEG
65655: PUSH
65656: LD_INT 1
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 2
65666: NEG
65667: PUSH
65668: LD_INT 0
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 2
65677: NEG
65678: PUSH
65679: LD_INT 1
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 3
65688: NEG
65689: PUSH
65690: LD_INT 1
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 4
65699: NEG
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 4
65710: NEG
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 4
65722: NEG
65723: PUSH
65724: LD_INT 2
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 2
65734: NEG
65735: PUSH
65736: LD_INT 2
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 4
65745: NEG
65746: PUSH
65747: LD_INT 4
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 4
65757: NEG
65758: PUSH
65759: LD_INT 5
65761: NEG
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 3
65769: NEG
65770: PUSH
65771: LD_INT 4
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 3
65781: NEG
65782: PUSH
65783: LD_INT 3
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 4
65793: NEG
65794: PUSH
65795: LD_INT 3
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 5
65805: NEG
65806: PUSH
65807: LD_INT 4
65809: NEG
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 5
65817: NEG
65818: PUSH
65819: LD_INT 5
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 3
65829: NEG
65830: PUSH
65831: LD_INT 5
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 5
65841: NEG
65842: PUSH
65843: LD_INT 3
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 3
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: LD_INT 4
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: LD_INT 3
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 1
65886: PUSH
65887: LD_INT 2
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: LD_INT 2
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: LD_INT 3
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: LD_INT 4
65924: NEG
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 2
65932: PUSH
65933: LD_INT 2
65935: NEG
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 2
65943: NEG
65944: PUSH
65945: LD_INT 4
65947: NEG
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 4
65955: PUSH
65956: LD_INT 0
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 4
65965: PUSH
65966: LD_INT 1
65968: NEG
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 5
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 5
65986: PUSH
65987: LD_INT 1
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 4
65996: PUSH
65997: LD_INT 1
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 3
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 3
66016: PUSH
66017: LD_INT 1
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 3
66027: PUSH
66028: LD_INT 2
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 5
66038: PUSH
66039: LD_INT 2
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66093: LD_ADDR_VAR 0 32
66097: PUSH
66098: LD_INT 4
66100: NEG
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 4
66111: NEG
66112: PUSH
66113: LD_INT 1
66115: NEG
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 3
66123: NEG
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 3
66134: NEG
66135: PUSH
66136: LD_INT 1
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 4
66145: NEG
66146: PUSH
66147: LD_INT 1
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 5
66156: NEG
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 5
66167: NEG
66168: PUSH
66169: LD_INT 1
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 5
66179: NEG
66180: PUSH
66181: LD_INT 2
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 3
66191: NEG
66192: PUSH
66193: LD_INT 2
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 3
66202: NEG
66203: PUSH
66204: LD_INT 3
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 3
66214: NEG
66215: PUSH
66216: LD_INT 4
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 2
66226: NEG
66227: PUSH
66228: LD_INT 3
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 2
66238: NEG
66239: PUSH
66240: LD_INT 2
66242: NEG
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 3
66250: NEG
66251: PUSH
66252: LD_INT 2
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 4
66262: NEG
66263: PUSH
66264: LD_INT 3
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 4
66274: NEG
66275: PUSH
66276: LD_INT 4
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 2
66286: NEG
66287: PUSH
66288: LD_INT 4
66290: NEG
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 4
66298: NEG
66299: PUSH
66300: LD_INT 2
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: LD_INT 4
66313: NEG
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: LD_INT 5
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 1
66332: PUSH
66333: LD_INT 4
66335: NEG
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: LD_INT 3
66346: NEG
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 0
66354: PUSH
66355: LD_INT 3
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 1
66365: NEG
66366: PUSH
66367: LD_INT 4
66369: NEG
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 1
66377: NEG
66378: PUSH
66379: LD_INT 5
66381: NEG
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 2
66389: PUSH
66390: LD_INT 3
66392: NEG
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 2
66400: NEG
66401: PUSH
66402: LD_INT 5
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 3
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 3
66422: PUSH
66423: LD_INT 1
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 4
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 4
66443: PUSH
66444: LD_INT 1
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 3
66453: PUSH
66454: LD_INT 1
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 2
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 2
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 2
66484: PUSH
66485: LD_INT 2
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 4
66495: PUSH
66496: LD_INT 2
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 4
66505: PUSH
66506: LD_INT 4
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 4
66515: PUSH
66516: LD_INT 3
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 5
66525: PUSH
66526: LD_INT 4
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 5
66535: PUSH
66536: LD_INT 5
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 4
66545: PUSH
66546: LD_INT 5
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 3
66555: PUSH
66556: LD_INT 4
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 3
66565: PUSH
66566: LD_INT 3
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 5
66575: PUSH
66576: LD_INT 3
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 3
66585: PUSH
66586: LD_INT 5
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66640: LD_ADDR_VAR 0 33
66644: PUSH
66645: LD_INT 4
66647: NEG
66648: PUSH
66649: LD_INT 4
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 4
66659: NEG
66660: PUSH
66661: LD_INT 5
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 3
66671: NEG
66672: PUSH
66673: LD_INT 4
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 3
66683: NEG
66684: PUSH
66685: LD_INT 3
66687: NEG
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 4
66695: NEG
66696: PUSH
66697: LD_INT 3
66699: NEG
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 5
66707: NEG
66708: PUSH
66709: LD_INT 4
66711: NEG
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 5
66719: NEG
66720: PUSH
66721: LD_INT 5
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 3
66731: NEG
66732: PUSH
66733: LD_INT 5
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 5
66743: NEG
66744: PUSH
66745: LD_INT 3
66747: NEG
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 0
66755: PUSH
66756: LD_INT 3
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 0
66766: PUSH
66767: LD_INT 4
66769: NEG
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 1
66777: PUSH
66778: LD_INT 3
66780: NEG
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 1
66788: PUSH
66789: LD_INT 2
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 0
66799: PUSH
66800: LD_INT 2
66802: NEG
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 1
66810: NEG
66811: PUSH
66812: LD_INT 3
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 1
66822: NEG
66823: PUSH
66824: LD_INT 4
66826: NEG
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 2
66834: PUSH
66835: LD_INT 2
66837: NEG
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 2
66845: NEG
66846: PUSH
66847: LD_INT 4
66849: NEG
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 4
66857: PUSH
66858: LD_INT 0
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 4
66867: PUSH
66868: LD_INT 1
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 5
66878: PUSH
66879: LD_INT 0
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 5
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 4
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 3
66908: PUSH
66909: LD_INT 0
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 3
66918: PUSH
66919: LD_INT 1
66921: NEG
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 3
66929: PUSH
66930: LD_INT 2
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 5
66940: PUSH
66941: LD_INT 2
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 3
66950: PUSH
66951: LD_INT 3
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 3
66960: PUSH
66961: LD_INT 2
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 4
66970: PUSH
66971: LD_INT 3
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 4
66980: PUSH
66981: LD_INT 4
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 3
66990: PUSH
66991: LD_INT 4
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 2
67000: PUSH
67001: LD_INT 3
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 2
67010: PUSH
67011: LD_INT 2
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 4
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 2
67030: PUSH
67031: LD_INT 4
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: LD_INT 4
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: LD_INT 3
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 1
67060: PUSH
67061: LD_INT 4
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: LD_INT 5
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 0
67080: PUSH
67081: LD_INT 5
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 1
67090: NEG
67091: PUSH
67092: LD_INT 4
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 1
67101: NEG
67102: PUSH
67103: LD_INT 3
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 2
67112: PUSH
67113: LD_INT 5
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 2
67122: NEG
67123: PUSH
67124: LD_INT 3
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67178: LD_ADDR_VAR 0 34
67182: PUSH
67183: LD_INT 0
67185: PUSH
67186: LD_INT 4
67188: NEG
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 0
67196: PUSH
67197: LD_INT 5
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 1
67207: PUSH
67208: LD_INT 4
67210: NEG
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 1
67218: PUSH
67219: LD_INT 3
67221: NEG
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 0
67229: PUSH
67230: LD_INT 3
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 1
67240: NEG
67241: PUSH
67242: LD_INT 4
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 1
67252: NEG
67253: PUSH
67254: LD_INT 5
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 2
67264: PUSH
67265: LD_INT 3
67267: NEG
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 2
67275: NEG
67276: PUSH
67277: LD_INT 5
67279: NEG
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 3
67287: PUSH
67288: LD_INT 0
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 3
67297: PUSH
67298: LD_INT 1
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 4
67308: PUSH
67309: LD_INT 0
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 4
67318: PUSH
67319: LD_INT 1
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 3
67328: PUSH
67329: LD_INT 1
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 2
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 2
67348: PUSH
67349: LD_INT 1
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 2
67359: PUSH
67360: LD_INT 2
67362: NEG
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 4
67370: PUSH
67371: LD_INT 2
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 4
67380: PUSH
67381: LD_INT 4
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 4
67390: PUSH
67391: LD_INT 3
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 5
67400: PUSH
67401: LD_INT 4
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 5
67410: PUSH
67411: LD_INT 5
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 4
67420: PUSH
67421: LD_INT 5
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 3
67430: PUSH
67431: LD_INT 4
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 3
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 5
67450: PUSH
67451: LD_INT 3
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 3
67460: PUSH
67461: LD_INT 5
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: LD_INT 3
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 0
67480: PUSH
67481: LD_INT 2
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 1
67490: PUSH
67491: LD_INT 3
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 1
67500: PUSH
67501: LD_INT 4
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 0
67510: PUSH
67511: LD_INT 4
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 1
67520: NEG
67521: PUSH
67522: LD_INT 3
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 1
67531: NEG
67532: PUSH
67533: LD_INT 2
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 2
67542: PUSH
67543: LD_INT 4
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 2
67552: NEG
67553: PUSH
67554: LD_INT 2
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 4
67563: NEG
67564: PUSH
67565: LD_INT 0
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 4
67574: NEG
67575: PUSH
67576: LD_INT 1
67578: NEG
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 3
67586: NEG
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 3
67597: NEG
67598: PUSH
67599: LD_INT 1
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 4
67608: NEG
67609: PUSH
67610: LD_INT 1
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 5
67619: NEG
67620: PUSH
67621: LD_INT 0
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 5
67630: NEG
67631: PUSH
67632: LD_INT 1
67634: NEG
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 5
67642: NEG
67643: PUSH
67644: LD_INT 2
67646: NEG
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 3
67654: NEG
67655: PUSH
67656: LD_INT 2
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: ST_TO_ADDR
// end ; end ;
67710: GO 67713
67712: POP
// case btype of b_depot , b_warehouse :
67713: LD_VAR 0 1
67717: PUSH
67718: LD_INT 0
67720: DOUBLE
67721: EQUAL
67722: IFTRUE 67732
67724: LD_INT 1
67726: DOUBLE
67727: EQUAL
67728: IFTRUE 67732
67730: GO 67933
67732: POP
// case nation of nation_american :
67733: LD_VAR 0 5
67737: PUSH
67738: LD_INT 1
67740: DOUBLE
67741: EQUAL
67742: IFTRUE 67746
67744: GO 67802
67746: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67747: LD_ADDR_VAR 0 9
67751: PUSH
67752: LD_VAR 0 11
67756: PUSH
67757: LD_VAR 0 12
67761: PUSH
67762: LD_VAR 0 13
67766: PUSH
67767: LD_VAR 0 14
67771: PUSH
67772: LD_VAR 0 15
67776: PUSH
67777: LD_VAR 0 16
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: PUSH
67790: LD_VAR 0 4
67794: PUSH
67795: LD_INT 1
67797: PLUS
67798: ARRAY
67799: ST_TO_ADDR
67800: GO 67931
67802: LD_INT 2
67804: DOUBLE
67805: EQUAL
67806: IFTRUE 67810
67808: GO 67866
67810: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67811: LD_ADDR_VAR 0 9
67815: PUSH
67816: LD_VAR 0 17
67820: PUSH
67821: LD_VAR 0 18
67825: PUSH
67826: LD_VAR 0 19
67830: PUSH
67831: LD_VAR 0 20
67835: PUSH
67836: LD_VAR 0 21
67840: PUSH
67841: LD_VAR 0 22
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: PUSH
67854: LD_VAR 0 4
67858: PUSH
67859: LD_INT 1
67861: PLUS
67862: ARRAY
67863: ST_TO_ADDR
67864: GO 67931
67866: LD_INT 3
67868: DOUBLE
67869: EQUAL
67870: IFTRUE 67874
67872: GO 67930
67874: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67875: LD_ADDR_VAR 0 9
67879: PUSH
67880: LD_VAR 0 23
67884: PUSH
67885: LD_VAR 0 24
67889: PUSH
67890: LD_VAR 0 25
67894: PUSH
67895: LD_VAR 0 26
67899: PUSH
67900: LD_VAR 0 27
67904: PUSH
67905: LD_VAR 0 28
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: PUSH
67918: LD_VAR 0 4
67922: PUSH
67923: LD_INT 1
67925: PLUS
67926: ARRAY
67927: ST_TO_ADDR
67928: GO 67931
67930: POP
67931: GO 68486
67933: LD_INT 2
67935: DOUBLE
67936: EQUAL
67937: IFTRUE 67947
67939: LD_INT 3
67941: DOUBLE
67942: EQUAL
67943: IFTRUE 67947
67945: GO 68003
67947: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67948: LD_ADDR_VAR 0 9
67952: PUSH
67953: LD_VAR 0 29
67957: PUSH
67958: LD_VAR 0 30
67962: PUSH
67963: LD_VAR 0 31
67967: PUSH
67968: LD_VAR 0 32
67972: PUSH
67973: LD_VAR 0 33
67977: PUSH
67978: LD_VAR 0 34
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: PUSH
67991: LD_VAR 0 4
67995: PUSH
67996: LD_INT 1
67998: PLUS
67999: ARRAY
68000: ST_TO_ADDR
68001: GO 68486
68003: LD_INT 16
68005: DOUBLE
68006: EQUAL
68007: IFTRUE 68065
68009: LD_INT 17
68011: DOUBLE
68012: EQUAL
68013: IFTRUE 68065
68015: LD_INT 18
68017: DOUBLE
68018: EQUAL
68019: IFTRUE 68065
68021: LD_INT 19
68023: DOUBLE
68024: EQUAL
68025: IFTRUE 68065
68027: LD_INT 22
68029: DOUBLE
68030: EQUAL
68031: IFTRUE 68065
68033: LD_INT 20
68035: DOUBLE
68036: EQUAL
68037: IFTRUE 68065
68039: LD_INT 21
68041: DOUBLE
68042: EQUAL
68043: IFTRUE 68065
68045: LD_INT 23
68047: DOUBLE
68048: EQUAL
68049: IFTRUE 68065
68051: LD_INT 24
68053: DOUBLE
68054: EQUAL
68055: IFTRUE 68065
68057: LD_INT 25
68059: DOUBLE
68060: EQUAL
68061: IFTRUE 68065
68063: GO 68121
68065: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68066: LD_ADDR_VAR 0 9
68070: PUSH
68071: LD_VAR 0 35
68075: PUSH
68076: LD_VAR 0 36
68080: PUSH
68081: LD_VAR 0 37
68085: PUSH
68086: LD_VAR 0 38
68090: PUSH
68091: LD_VAR 0 39
68095: PUSH
68096: LD_VAR 0 40
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: PUSH
68109: LD_VAR 0 4
68113: PUSH
68114: LD_INT 1
68116: PLUS
68117: ARRAY
68118: ST_TO_ADDR
68119: GO 68486
68121: LD_INT 6
68123: DOUBLE
68124: EQUAL
68125: IFTRUE 68177
68127: LD_INT 7
68129: DOUBLE
68130: EQUAL
68131: IFTRUE 68177
68133: LD_INT 8
68135: DOUBLE
68136: EQUAL
68137: IFTRUE 68177
68139: LD_INT 13
68141: DOUBLE
68142: EQUAL
68143: IFTRUE 68177
68145: LD_INT 12
68147: DOUBLE
68148: EQUAL
68149: IFTRUE 68177
68151: LD_INT 15
68153: DOUBLE
68154: EQUAL
68155: IFTRUE 68177
68157: LD_INT 11
68159: DOUBLE
68160: EQUAL
68161: IFTRUE 68177
68163: LD_INT 14
68165: DOUBLE
68166: EQUAL
68167: IFTRUE 68177
68169: LD_INT 10
68171: DOUBLE
68172: EQUAL
68173: IFTRUE 68177
68175: GO 68233
68177: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68178: LD_ADDR_VAR 0 9
68182: PUSH
68183: LD_VAR 0 41
68187: PUSH
68188: LD_VAR 0 42
68192: PUSH
68193: LD_VAR 0 43
68197: PUSH
68198: LD_VAR 0 44
68202: PUSH
68203: LD_VAR 0 45
68207: PUSH
68208: LD_VAR 0 46
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: PUSH
68221: LD_VAR 0 4
68225: PUSH
68226: LD_INT 1
68228: PLUS
68229: ARRAY
68230: ST_TO_ADDR
68231: GO 68486
68233: LD_INT 36
68235: DOUBLE
68236: EQUAL
68237: IFTRUE 68241
68239: GO 68297
68241: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68242: LD_ADDR_VAR 0 9
68246: PUSH
68247: LD_VAR 0 47
68251: PUSH
68252: LD_VAR 0 48
68256: PUSH
68257: LD_VAR 0 49
68261: PUSH
68262: LD_VAR 0 50
68266: PUSH
68267: LD_VAR 0 51
68271: PUSH
68272: LD_VAR 0 52
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: PUSH
68285: LD_VAR 0 4
68289: PUSH
68290: LD_INT 1
68292: PLUS
68293: ARRAY
68294: ST_TO_ADDR
68295: GO 68486
68297: LD_INT 4
68299: DOUBLE
68300: EQUAL
68301: IFTRUE 68323
68303: LD_INT 5
68305: DOUBLE
68306: EQUAL
68307: IFTRUE 68323
68309: LD_INT 34
68311: DOUBLE
68312: EQUAL
68313: IFTRUE 68323
68315: LD_INT 37
68317: DOUBLE
68318: EQUAL
68319: IFTRUE 68323
68321: GO 68379
68323: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68324: LD_ADDR_VAR 0 9
68328: PUSH
68329: LD_VAR 0 53
68333: PUSH
68334: LD_VAR 0 54
68338: PUSH
68339: LD_VAR 0 55
68343: PUSH
68344: LD_VAR 0 56
68348: PUSH
68349: LD_VAR 0 57
68353: PUSH
68354: LD_VAR 0 58
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: PUSH
68367: LD_VAR 0 4
68371: PUSH
68372: LD_INT 1
68374: PLUS
68375: ARRAY
68376: ST_TO_ADDR
68377: GO 68486
68379: LD_INT 31
68381: DOUBLE
68382: EQUAL
68383: IFTRUE 68429
68385: LD_INT 32
68387: DOUBLE
68388: EQUAL
68389: IFTRUE 68429
68391: LD_INT 33
68393: DOUBLE
68394: EQUAL
68395: IFTRUE 68429
68397: LD_INT 27
68399: DOUBLE
68400: EQUAL
68401: IFTRUE 68429
68403: LD_INT 26
68405: DOUBLE
68406: EQUAL
68407: IFTRUE 68429
68409: LD_INT 28
68411: DOUBLE
68412: EQUAL
68413: IFTRUE 68429
68415: LD_INT 29
68417: DOUBLE
68418: EQUAL
68419: IFTRUE 68429
68421: LD_INT 30
68423: DOUBLE
68424: EQUAL
68425: IFTRUE 68429
68427: GO 68485
68429: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68430: LD_ADDR_VAR 0 9
68434: PUSH
68435: LD_VAR 0 59
68439: PUSH
68440: LD_VAR 0 60
68444: PUSH
68445: LD_VAR 0 61
68449: PUSH
68450: LD_VAR 0 62
68454: PUSH
68455: LD_VAR 0 63
68459: PUSH
68460: LD_VAR 0 64
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: PUSH
68473: LD_VAR 0 4
68477: PUSH
68478: LD_INT 1
68480: PLUS
68481: ARRAY
68482: ST_TO_ADDR
68483: GO 68486
68485: POP
// temp_list2 = [ ] ;
68486: LD_ADDR_VAR 0 10
68490: PUSH
68491: EMPTY
68492: ST_TO_ADDR
// for i in temp_list do
68493: LD_ADDR_VAR 0 8
68497: PUSH
68498: LD_VAR 0 9
68502: PUSH
68503: FOR_IN
68504: IFFALSE 68556
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68506: LD_ADDR_VAR 0 10
68510: PUSH
68511: LD_VAR 0 10
68515: PUSH
68516: LD_VAR 0 8
68520: PUSH
68521: LD_INT 1
68523: ARRAY
68524: PUSH
68525: LD_VAR 0 2
68529: PLUS
68530: PUSH
68531: LD_VAR 0 8
68535: PUSH
68536: LD_INT 2
68538: ARRAY
68539: PUSH
68540: LD_VAR 0 3
68544: PLUS
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: EMPTY
68551: LIST
68552: ADD
68553: ST_TO_ADDR
68554: GO 68503
68556: POP
68557: POP
// result = temp_list2 ;
68558: LD_ADDR_VAR 0 7
68562: PUSH
68563: LD_VAR 0 10
68567: ST_TO_ADDR
// end ;
68568: LD_VAR 0 7
68572: RET
// export function EnemyInRange ( unit , dist ) ; begin
68573: LD_INT 0
68575: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68576: LD_ADDR_VAR 0 3
68580: PUSH
68581: LD_VAR 0 1
68585: PPUSH
68586: CALL_OW 255
68590: PPUSH
68591: LD_VAR 0 1
68595: PPUSH
68596: CALL_OW 250
68600: PPUSH
68601: LD_VAR 0 1
68605: PPUSH
68606: CALL_OW 251
68610: PPUSH
68611: LD_VAR 0 2
68615: PPUSH
68616: CALL 41968 0 4
68620: PUSH
68621: LD_INT 4
68623: ARRAY
68624: ST_TO_ADDR
// end ;
68625: LD_VAR 0 3
68629: RET
// export function PlayerSeeMe ( unit ) ; begin
68630: LD_INT 0
68632: PPUSH
// result := See ( your_side , unit ) ;
68633: LD_ADDR_VAR 0 2
68637: PUSH
68638: LD_OWVAR 2
68642: PPUSH
68643: LD_VAR 0 1
68647: PPUSH
68648: CALL_OW 292
68652: ST_TO_ADDR
// end ;
68653: LD_VAR 0 2
68657: RET
// export function ReverseDir ( unit ) ; begin
68658: LD_INT 0
68660: PPUSH
// if not unit then
68661: LD_VAR 0 1
68665: NOT
68666: IFFALSE 68670
// exit ;
68668: GO 68693
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68670: LD_ADDR_VAR 0 2
68674: PUSH
68675: LD_VAR 0 1
68679: PPUSH
68680: CALL_OW 254
68684: PUSH
68685: LD_INT 3
68687: PLUS
68688: PUSH
68689: LD_INT 6
68691: MOD
68692: ST_TO_ADDR
// end ;
68693: LD_VAR 0 2
68697: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68698: LD_INT 0
68700: PPUSH
68701: PPUSH
68702: PPUSH
68703: PPUSH
68704: PPUSH
// if not hexes then
68705: LD_VAR 0 2
68709: NOT
68710: IFFALSE 68714
// exit ;
68712: GO 68862
// dist := 9999 ;
68714: LD_ADDR_VAR 0 5
68718: PUSH
68719: LD_INT 9999
68721: ST_TO_ADDR
// for i = 1 to hexes do
68722: LD_ADDR_VAR 0 4
68726: PUSH
68727: DOUBLE
68728: LD_INT 1
68730: DEC
68731: ST_TO_ADDR
68732: LD_VAR 0 2
68736: PUSH
68737: FOR_TO
68738: IFFALSE 68850
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68740: LD_VAR 0 1
68744: PPUSH
68745: LD_VAR 0 2
68749: PUSH
68750: LD_VAR 0 4
68754: ARRAY
68755: PUSH
68756: LD_INT 1
68758: ARRAY
68759: PPUSH
68760: LD_VAR 0 2
68764: PUSH
68765: LD_VAR 0 4
68769: ARRAY
68770: PUSH
68771: LD_INT 2
68773: ARRAY
68774: PPUSH
68775: CALL_OW 297
68779: PUSH
68780: LD_VAR 0 5
68784: LESS
68785: IFFALSE 68848
// begin hex := hexes [ i ] ;
68787: LD_ADDR_VAR 0 7
68791: PUSH
68792: LD_VAR 0 2
68796: PUSH
68797: LD_VAR 0 4
68801: ARRAY
68802: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68803: LD_ADDR_VAR 0 5
68807: PUSH
68808: LD_VAR 0 1
68812: PPUSH
68813: LD_VAR 0 2
68817: PUSH
68818: LD_VAR 0 4
68822: ARRAY
68823: PUSH
68824: LD_INT 1
68826: ARRAY
68827: PPUSH
68828: LD_VAR 0 2
68832: PUSH
68833: LD_VAR 0 4
68837: ARRAY
68838: PUSH
68839: LD_INT 2
68841: ARRAY
68842: PPUSH
68843: CALL_OW 297
68847: ST_TO_ADDR
// end ; end ;
68848: GO 68737
68850: POP
68851: POP
// result := hex ;
68852: LD_ADDR_VAR 0 3
68856: PUSH
68857: LD_VAR 0 7
68861: ST_TO_ADDR
// end ;
68862: LD_VAR 0 3
68866: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68867: LD_INT 0
68869: PPUSH
68870: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68871: LD_VAR 0 1
68875: NOT
68876: PUSH
68877: LD_VAR 0 1
68881: PUSH
68882: LD_INT 21
68884: PUSH
68885: LD_INT 2
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 23
68894: PUSH
68895: LD_INT 2
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PPUSH
68906: CALL_OW 69
68910: IN
68911: NOT
68912: OR
68913: IFFALSE 68917
// exit ;
68915: GO 68964
// for i = 1 to 3 do
68917: LD_ADDR_VAR 0 3
68921: PUSH
68922: DOUBLE
68923: LD_INT 1
68925: DEC
68926: ST_TO_ADDR
68927: LD_INT 3
68929: PUSH
68930: FOR_TO
68931: IFFALSE 68962
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68933: LD_VAR 0 1
68937: PPUSH
68938: CALL_OW 250
68942: PPUSH
68943: LD_VAR 0 1
68947: PPUSH
68948: CALL_OW 251
68952: PPUSH
68953: LD_INT 1
68955: PPUSH
68956: CALL_OW 453
68960: GO 68930
68962: POP
68963: POP
// end ;
68964: LD_VAR 0 2
68968: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68969: LD_INT 0
68971: PPUSH
68972: PPUSH
68973: PPUSH
68974: PPUSH
68975: PPUSH
68976: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68977: LD_VAR 0 1
68981: NOT
68982: PUSH
68983: LD_VAR 0 2
68987: NOT
68988: OR
68989: PUSH
68990: LD_VAR 0 1
68994: PPUSH
68995: CALL_OW 314
68999: OR
69000: IFFALSE 69004
// exit ;
69002: GO 69445
// x := GetX ( enemy_unit ) ;
69004: LD_ADDR_VAR 0 7
69008: PUSH
69009: LD_VAR 0 2
69013: PPUSH
69014: CALL_OW 250
69018: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69019: LD_ADDR_VAR 0 8
69023: PUSH
69024: LD_VAR 0 2
69028: PPUSH
69029: CALL_OW 251
69033: ST_TO_ADDR
// if not x or not y then
69034: LD_VAR 0 7
69038: NOT
69039: PUSH
69040: LD_VAR 0 8
69044: NOT
69045: OR
69046: IFFALSE 69050
// exit ;
69048: GO 69445
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69050: LD_ADDR_VAR 0 6
69054: PUSH
69055: LD_VAR 0 7
69059: PPUSH
69060: LD_INT 0
69062: PPUSH
69063: LD_INT 4
69065: PPUSH
69066: CALL_OW 272
69070: PUSH
69071: LD_VAR 0 8
69075: PPUSH
69076: LD_INT 0
69078: PPUSH
69079: LD_INT 4
69081: PPUSH
69082: CALL_OW 273
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_VAR 0 7
69095: PPUSH
69096: LD_INT 1
69098: PPUSH
69099: LD_INT 4
69101: PPUSH
69102: CALL_OW 272
69106: PUSH
69107: LD_VAR 0 8
69111: PPUSH
69112: LD_INT 1
69114: PPUSH
69115: LD_INT 4
69117: PPUSH
69118: CALL_OW 273
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_VAR 0 7
69131: PPUSH
69132: LD_INT 2
69134: PPUSH
69135: LD_INT 4
69137: PPUSH
69138: CALL_OW 272
69142: PUSH
69143: LD_VAR 0 8
69147: PPUSH
69148: LD_INT 2
69150: PPUSH
69151: LD_INT 4
69153: PPUSH
69154: CALL_OW 273
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_VAR 0 7
69167: PPUSH
69168: LD_INT 3
69170: PPUSH
69171: LD_INT 4
69173: PPUSH
69174: CALL_OW 272
69178: PUSH
69179: LD_VAR 0 8
69183: PPUSH
69184: LD_INT 3
69186: PPUSH
69187: LD_INT 4
69189: PPUSH
69190: CALL_OW 273
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_VAR 0 7
69203: PPUSH
69204: LD_INT 4
69206: PPUSH
69207: LD_INT 4
69209: PPUSH
69210: CALL_OW 272
69214: PUSH
69215: LD_VAR 0 8
69219: PPUSH
69220: LD_INT 4
69222: PPUSH
69223: LD_INT 4
69225: PPUSH
69226: CALL_OW 273
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_VAR 0 7
69239: PPUSH
69240: LD_INT 5
69242: PPUSH
69243: LD_INT 4
69245: PPUSH
69246: CALL_OW 272
69250: PUSH
69251: LD_VAR 0 8
69255: PPUSH
69256: LD_INT 5
69258: PPUSH
69259: LD_INT 4
69261: PPUSH
69262: CALL_OW 273
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: ST_TO_ADDR
// for i = tmp downto 1 do
69279: LD_ADDR_VAR 0 4
69283: PUSH
69284: DOUBLE
69285: LD_VAR 0 6
69289: INC
69290: ST_TO_ADDR
69291: LD_INT 1
69293: PUSH
69294: FOR_DOWNTO
69295: IFFALSE 69396
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69297: LD_VAR 0 6
69301: PUSH
69302: LD_VAR 0 4
69306: ARRAY
69307: PUSH
69308: LD_INT 1
69310: ARRAY
69311: PPUSH
69312: LD_VAR 0 6
69316: PUSH
69317: LD_VAR 0 4
69321: ARRAY
69322: PUSH
69323: LD_INT 2
69325: ARRAY
69326: PPUSH
69327: CALL_OW 488
69331: NOT
69332: PUSH
69333: LD_VAR 0 6
69337: PUSH
69338: LD_VAR 0 4
69342: ARRAY
69343: PUSH
69344: LD_INT 1
69346: ARRAY
69347: PPUSH
69348: LD_VAR 0 6
69352: PUSH
69353: LD_VAR 0 4
69357: ARRAY
69358: PUSH
69359: LD_INT 2
69361: ARRAY
69362: PPUSH
69363: CALL_OW 428
69367: PUSH
69368: LD_INT 0
69370: NONEQUAL
69371: OR
69372: IFFALSE 69394
// tmp := Delete ( tmp , i ) ;
69374: LD_ADDR_VAR 0 6
69378: PUSH
69379: LD_VAR 0 6
69383: PPUSH
69384: LD_VAR 0 4
69388: PPUSH
69389: CALL_OW 3
69393: ST_TO_ADDR
69394: GO 69294
69396: POP
69397: POP
// j := GetClosestHex ( unit , tmp ) ;
69398: LD_ADDR_VAR 0 5
69402: PUSH
69403: LD_VAR 0 1
69407: PPUSH
69408: LD_VAR 0 6
69412: PPUSH
69413: CALL 68698 0 2
69417: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69418: LD_VAR 0 1
69422: PPUSH
69423: LD_VAR 0 5
69427: PUSH
69428: LD_INT 1
69430: ARRAY
69431: PPUSH
69432: LD_VAR 0 5
69436: PUSH
69437: LD_INT 2
69439: ARRAY
69440: PPUSH
69441: CALL_OW 111
// end ;
69445: LD_VAR 0 3
69449: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69450: LD_INT 0
69452: PPUSH
69453: PPUSH
69454: PPUSH
// uc_side = 0 ;
69455: LD_ADDR_OWVAR 20
69459: PUSH
69460: LD_INT 0
69462: ST_TO_ADDR
// uc_nation = 0 ;
69463: LD_ADDR_OWVAR 21
69467: PUSH
69468: LD_INT 0
69470: ST_TO_ADDR
// InitHc_All ( ) ;
69471: CALL_OW 584
// InitVc ;
69475: CALL_OW 20
// if mastodonts then
69479: LD_VAR 0 6
69483: IFFALSE 69550
// for i = 1 to mastodonts do
69485: LD_ADDR_VAR 0 11
69489: PUSH
69490: DOUBLE
69491: LD_INT 1
69493: DEC
69494: ST_TO_ADDR
69495: LD_VAR 0 6
69499: PUSH
69500: FOR_TO
69501: IFFALSE 69548
// begin vc_chassis := 31 ;
69503: LD_ADDR_OWVAR 37
69507: PUSH
69508: LD_INT 31
69510: ST_TO_ADDR
// vc_control := control_rider ;
69511: LD_ADDR_OWVAR 38
69515: PUSH
69516: LD_INT 4
69518: ST_TO_ADDR
// animal := CreateVehicle ;
69519: LD_ADDR_VAR 0 12
69523: PUSH
69524: CALL_OW 45
69528: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69529: LD_VAR 0 12
69533: PPUSH
69534: LD_VAR 0 8
69538: PPUSH
69539: LD_INT 0
69541: PPUSH
69542: CALL 71738 0 3
// end ;
69546: GO 69500
69548: POP
69549: POP
// if horses then
69550: LD_VAR 0 5
69554: IFFALSE 69621
// for i = 1 to horses do
69556: LD_ADDR_VAR 0 11
69560: PUSH
69561: DOUBLE
69562: LD_INT 1
69564: DEC
69565: ST_TO_ADDR
69566: LD_VAR 0 5
69570: PUSH
69571: FOR_TO
69572: IFFALSE 69619
// begin hc_class := 21 ;
69574: LD_ADDR_OWVAR 28
69578: PUSH
69579: LD_INT 21
69581: ST_TO_ADDR
// hc_gallery :=  ;
69582: LD_ADDR_OWVAR 33
69586: PUSH
69587: LD_STRING 
69589: ST_TO_ADDR
// animal := CreateHuman ;
69590: LD_ADDR_VAR 0 12
69594: PUSH
69595: CALL_OW 44
69599: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69600: LD_VAR 0 12
69604: PPUSH
69605: LD_VAR 0 8
69609: PPUSH
69610: LD_INT 0
69612: PPUSH
69613: CALL 71738 0 3
// end ;
69617: GO 69571
69619: POP
69620: POP
// if birds then
69621: LD_VAR 0 1
69625: IFFALSE 69692
// for i = 1 to birds do
69627: LD_ADDR_VAR 0 11
69631: PUSH
69632: DOUBLE
69633: LD_INT 1
69635: DEC
69636: ST_TO_ADDR
69637: LD_VAR 0 1
69641: PUSH
69642: FOR_TO
69643: IFFALSE 69690
// begin hc_class = 18 ;
69645: LD_ADDR_OWVAR 28
69649: PUSH
69650: LD_INT 18
69652: ST_TO_ADDR
// hc_gallery =  ;
69653: LD_ADDR_OWVAR 33
69657: PUSH
69658: LD_STRING 
69660: ST_TO_ADDR
// animal := CreateHuman ;
69661: LD_ADDR_VAR 0 12
69665: PUSH
69666: CALL_OW 44
69670: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69671: LD_VAR 0 12
69675: PPUSH
69676: LD_VAR 0 8
69680: PPUSH
69681: LD_INT 0
69683: PPUSH
69684: CALL 71738 0 3
// end ;
69688: GO 69642
69690: POP
69691: POP
// if tigers then
69692: LD_VAR 0 2
69696: IFFALSE 69780
// for i = 1 to tigers do
69698: LD_ADDR_VAR 0 11
69702: PUSH
69703: DOUBLE
69704: LD_INT 1
69706: DEC
69707: ST_TO_ADDR
69708: LD_VAR 0 2
69712: PUSH
69713: FOR_TO
69714: IFFALSE 69778
// begin hc_class = class_tiger ;
69716: LD_ADDR_OWVAR 28
69720: PUSH
69721: LD_INT 14
69723: ST_TO_ADDR
// hc_gallery =  ;
69724: LD_ADDR_OWVAR 33
69728: PUSH
69729: LD_STRING 
69731: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69732: LD_ADDR_OWVAR 35
69736: PUSH
69737: LD_INT 7
69739: NEG
69740: PPUSH
69741: LD_INT 7
69743: PPUSH
69744: CALL_OW 12
69748: ST_TO_ADDR
// animal := CreateHuman ;
69749: LD_ADDR_VAR 0 12
69753: PUSH
69754: CALL_OW 44
69758: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69759: LD_VAR 0 12
69763: PPUSH
69764: LD_VAR 0 8
69768: PPUSH
69769: LD_INT 0
69771: PPUSH
69772: CALL 71738 0 3
// end ;
69776: GO 69713
69778: POP
69779: POP
// if apemans then
69780: LD_VAR 0 3
69784: IFFALSE 69907
// for i = 1 to apemans do
69786: LD_ADDR_VAR 0 11
69790: PUSH
69791: DOUBLE
69792: LD_INT 1
69794: DEC
69795: ST_TO_ADDR
69796: LD_VAR 0 3
69800: PUSH
69801: FOR_TO
69802: IFFALSE 69905
// begin hc_class = class_apeman ;
69804: LD_ADDR_OWVAR 28
69808: PUSH
69809: LD_INT 12
69811: ST_TO_ADDR
// hc_gallery =  ;
69812: LD_ADDR_OWVAR 33
69816: PUSH
69817: LD_STRING 
69819: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69820: LD_ADDR_OWVAR 35
69824: PUSH
69825: LD_INT 2
69827: NEG
69828: PPUSH
69829: LD_INT 2
69831: PPUSH
69832: CALL_OW 12
69836: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69837: LD_ADDR_OWVAR 31
69841: PUSH
69842: LD_INT 1
69844: PPUSH
69845: LD_INT 3
69847: PPUSH
69848: CALL_OW 12
69852: PUSH
69853: LD_INT 1
69855: PPUSH
69856: LD_INT 3
69858: PPUSH
69859: CALL_OW 12
69863: PUSH
69864: LD_INT 0
69866: PUSH
69867: LD_INT 0
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: ST_TO_ADDR
// animal := CreateHuman ;
69876: LD_ADDR_VAR 0 12
69880: PUSH
69881: CALL_OW 44
69885: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69886: LD_VAR 0 12
69890: PPUSH
69891: LD_VAR 0 8
69895: PPUSH
69896: LD_INT 0
69898: PPUSH
69899: CALL 71738 0 3
// end ;
69903: GO 69801
69905: POP
69906: POP
// if enchidnas then
69907: LD_VAR 0 4
69911: IFFALSE 69978
// for i = 1 to enchidnas do
69913: LD_ADDR_VAR 0 11
69917: PUSH
69918: DOUBLE
69919: LD_INT 1
69921: DEC
69922: ST_TO_ADDR
69923: LD_VAR 0 4
69927: PUSH
69928: FOR_TO
69929: IFFALSE 69976
// begin hc_class = 13 ;
69931: LD_ADDR_OWVAR 28
69935: PUSH
69936: LD_INT 13
69938: ST_TO_ADDR
// hc_gallery =  ;
69939: LD_ADDR_OWVAR 33
69943: PUSH
69944: LD_STRING 
69946: ST_TO_ADDR
// animal := CreateHuman ;
69947: LD_ADDR_VAR 0 12
69951: PUSH
69952: CALL_OW 44
69956: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69957: LD_VAR 0 12
69961: PPUSH
69962: LD_VAR 0 8
69966: PPUSH
69967: LD_INT 0
69969: PPUSH
69970: CALL 71738 0 3
// end ;
69974: GO 69928
69976: POP
69977: POP
// if fishes then
69978: LD_VAR 0 7
69982: IFFALSE 70049
// for i = 1 to fishes do
69984: LD_ADDR_VAR 0 11
69988: PUSH
69989: DOUBLE
69990: LD_INT 1
69992: DEC
69993: ST_TO_ADDR
69994: LD_VAR 0 7
69998: PUSH
69999: FOR_TO
70000: IFFALSE 70047
// begin hc_class = 20 ;
70002: LD_ADDR_OWVAR 28
70006: PUSH
70007: LD_INT 20
70009: ST_TO_ADDR
// hc_gallery =  ;
70010: LD_ADDR_OWVAR 33
70014: PUSH
70015: LD_STRING 
70017: ST_TO_ADDR
// animal := CreateHuman ;
70018: LD_ADDR_VAR 0 12
70022: PUSH
70023: CALL_OW 44
70027: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70028: LD_VAR 0 12
70032: PPUSH
70033: LD_VAR 0 9
70037: PPUSH
70038: LD_INT 0
70040: PPUSH
70041: CALL 71738 0 3
// end ;
70045: GO 69999
70047: POP
70048: POP
// end ;
70049: LD_VAR 0 10
70053: RET
// export function WantHeal ( sci , unit ) ; begin
70054: LD_INT 0
70056: PPUSH
// if GetTaskList ( sci ) > 0 then
70057: LD_VAR 0 1
70061: PPUSH
70062: CALL_OW 437
70066: PUSH
70067: LD_INT 0
70069: GREATER
70070: IFFALSE 70140
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70072: LD_VAR 0 1
70076: PPUSH
70077: CALL_OW 437
70081: PUSH
70082: LD_INT 1
70084: ARRAY
70085: PUSH
70086: LD_INT 1
70088: ARRAY
70089: PUSH
70090: LD_STRING l
70092: EQUAL
70093: PUSH
70094: LD_VAR 0 1
70098: PPUSH
70099: CALL_OW 437
70103: PUSH
70104: LD_INT 1
70106: ARRAY
70107: PUSH
70108: LD_INT 4
70110: ARRAY
70111: PUSH
70112: LD_VAR 0 2
70116: EQUAL
70117: AND
70118: IFFALSE 70130
// result := true else
70120: LD_ADDR_VAR 0 3
70124: PUSH
70125: LD_INT 1
70127: ST_TO_ADDR
70128: GO 70138
// result := false ;
70130: LD_ADDR_VAR 0 3
70134: PUSH
70135: LD_INT 0
70137: ST_TO_ADDR
// end else
70138: GO 70148
// result := false ;
70140: LD_ADDR_VAR 0 3
70144: PUSH
70145: LD_INT 0
70147: ST_TO_ADDR
// end ;
70148: LD_VAR 0 3
70152: RET
// export function HealTarget ( sci ) ; begin
70153: LD_INT 0
70155: PPUSH
// if not sci then
70156: LD_VAR 0 1
70160: NOT
70161: IFFALSE 70165
// exit ;
70163: GO 70230
// result := 0 ;
70165: LD_ADDR_VAR 0 2
70169: PUSH
70170: LD_INT 0
70172: ST_TO_ADDR
// if GetTaskList ( sci ) then
70173: LD_VAR 0 1
70177: PPUSH
70178: CALL_OW 437
70182: IFFALSE 70230
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70184: LD_VAR 0 1
70188: PPUSH
70189: CALL_OW 437
70193: PUSH
70194: LD_INT 1
70196: ARRAY
70197: PUSH
70198: LD_INT 1
70200: ARRAY
70201: PUSH
70202: LD_STRING l
70204: EQUAL
70205: IFFALSE 70230
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70207: LD_ADDR_VAR 0 2
70211: PUSH
70212: LD_VAR 0 1
70216: PPUSH
70217: CALL_OW 437
70221: PUSH
70222: LD_INT 1
70224: ARRAY
70225: PUSH
70226: LD_INT 4
70228: ARRAY
70229: ST_TO_ADDR
// end ;
70230: LD_VAR 0 2
70234: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70235: LD_INT 0
70237: PPUSH
70238: PPUSH
70239: PPUSH
70240: PPUSH
// if not base_units then
70241: LD_VAR 0 1
70245: NOT
70246: IFFALSE 70250
// exit ;
70248: GO 70337
// result := false ;
70250: LD_ADDR_VAR 0 2
70254: PUSH
70255: LD_INT 0
70257: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70258: LD_ADDR_VAR 0 5
70262: PUSH
70263: LD_VAR 0 1
70267: PPUSH
70268: LD_INT 21
70270: PUSH
70271: LD_INT 3
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PPUSH
70278: CALL_OW 72
70282: ST_TO_ADDR
// if not tmp then
70283: LD_VAR 0 5
70287: NOT
70288: IFFALSE 70292
// exit ;
70290: GO 70337
// for i in tmp do
70292: LD_ADDR_VAR 0 3
70296: PUSH
70297: LD_VAR 0 5
70301: PUSH
70302: FOR_IN
70303: IFFALSE 70335
// begin result := EnemyInRange ( i , 22 ) ;
70305: LD_ADDR_VAR 0 2
70309: PUSH
70310: LD_VAR 0 3
70314: PPUSH
70315: LD_INT 22
70317: PPUSH
70318: CALL 68573 0 2
70322: ST_TO_ADDR
// if result then
70323: LD_VAR 0 2
70327: IFFALSE 70333
// exit ;
70329: POP
70330: POP
70331: GO 70337
// end ;
70333: GO 70302
70335: POP
70336: POP
// end ;
70337: LD_VAR 0 2
70341: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70342: LD_INT 0
70344: PPUSH
70345: PPUSH
// if not units then
70346: LD_VAR 0 1
70350: NOT
70351: IFFALSE 70355
// exit ;
70353: GO 70425
// result := [ ] ;
70355: LD_ADDR_VAR 0 3
70359: PUSH
70360: EMPTY
70361: ST_TO_ADDR
// for i in units do
70362: LD_ADDR_VAR 0 4
70366: PUSH
70367: LD_VAR 0 1
70371: PUSH
70372: FOR_IN
70373: IFFALSE 70423
// if GetTag ( i ) = tag then
70375: LD_VAR 0 4
70379: PPUSH
70380: CALL_OW 110
70384: PUSH
70385: LD_VAR 0 2
70389: EQUAL
70390: IFFALSE 70421
// result := Insert ( result , result + 1 , i ) ;
70392: LD_ADDR_VAR 0 3
70396: PUSH
70397: LD_VAR 0 3
70401: PPUSH
70402: LD_VAR 0 3
70406: PUSH
70407: LD_INT 1
70409: PLUS
70410: PPUSH
70411: LD_VAR 0 4
70415: PPUSH
70416: CALL_OW 2
70420: ST_TO_ADDR
70421: GO 70372
70423: POP
70424: POP
// end ;
70425: LD_VAR 0 3
70429: RET
// export function IsDriver ( un ) ; begin
70430: LD_INT 0
70432: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70433: LD_ADDR_VAR 0 2
70437: PUSH
70438: LD_VAR 0 1
70442: PUSH
70443: LD_INT 55
70445: PUSH
70446: EMPTY
70447: LIST
70448: PPUSH
70449: CALL_OW 69
70453: IN
70454: ST_TO_ADDR
// end ;
70455: LD_VAR 0 2
70459: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70460: LD_INT 0
70462: PPUSH
70463: PPUSH
// list := [ ] ;
70464: LD_ADDR_VAR 0 5
70468: PUSH
70469: EMPTY
70470: ST_TO_ADDR
// case d of 0 :
70471: LD_VAR 0 3
70475: PUSH
70476: LD_INT 0
70478: DOUBLE
70479: EQUAL
70480: IFTRUE 70484
70482: GO 70617
70484: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70485: LD_ADDR_VAR 0 5
70489: PUSH
70490: LD_VAR 0 1
70494: PUSH
70495: LD_INT 4
70497: MINUS
70498: PUSH
70499: LD_VAR 0 2
70503: PUSH
70504: LD_INT 4
70506: MINUS
70507: PUSH
70508: LD_INT 2
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: LIST
70515: PUSH
70516: LD_VAR 0 1
70520: PUSH
70521: LD_INT 3
70523: MINUS
70524: PUSH
70525: LD_VAR 0 2
70529: PUSH
70530: LD_INT 1
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: LIST
70537: PUSH
70538: LD_VAR 0 1
70542: PUSH
70543: LD_INT 4
70545: PLUS
70546: PUSH
70547: LD_VAR 0 2
70551: PUSH
70552: LD_INT 4
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: LIST
70559: PUSH
70560: LD_VAR 0 1
70564: PUSH
70565: LD_INT 3
70567: PLUS
70568: PUSH
70569: LD_VAR 0 2
70573: PUSH
70574: LD_INT 3
70576: PLUS
70577: PUSH
70578: LD_INT 5
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: LIST
70585: PUSH
70586: LD_VAR 0 1
70590: PUSH
70591: LD_VAR 0 2
70595: PUSH
70596: LD_INT 4
70598: PLUS
70599: PUSH
70600: LD_INT 0
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: LIST
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: ST_TO_ADDR
// end ; 1 :
70615: GO 71315
70617: LD_INT 1
70619: DOUBLE
70620: EQUAL
70621: IFTRUE 70625
70623: GO 70758
70625: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70626: LD_ADDR_VAR 0 5
70630: PUSH
70631: LD_VAR 0 1
70635: PUSH
70636: LD_VAR 0 2
70640: PUSH
70641: LD_INT 4
70643: MINUS
70644: PUSH
70645: LD_INT 3
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: LIST
70652: PUSH
70653: LD_VAR 0 1
70657: PUSH
70658: LD_INT 3
70660: MINUS
70661: PUSH
70662: LD_VAR 0 2
70666: PUSH
70667: LD_INT 3
70669: MINUS
70670: PUSH
70671: LD_INT 2
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: LIST
70678: PUSH
70679: LD_VAR 0 1
70683: PUSH
70684: LD_INT 4
70686: MINUS
70687: PUSH
70688: LD_VAR 0 2
70692: PUSH
70693: LD_INT 1
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: LIST
70700: PUSH
70701: LD_VAR 0 1
70705: PUSH
70706: LD_VAR 0 2
70710: PUSH
70711: LD_INT 3
70713: PLUS
70714: PUSH
70715: LD_INT 0
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: LIST
70722: PUSH
70723: LD_VAR 0 1
70727: PUSH
70728: LD_INT 4
70730: PLUS
70731: PUSH
70732: LD_VAR 0 2
70736: PUSH
70737: LD_INT 4
70739: PLUS
70740: PUSH
70741: LD_INT 5
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: LIST
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: ST_TO_ADDR
// end ; 2 :
70756: GO 71315
70758: LD_INT 2
70760: DOUBLE
70761: EQUAL
70762: IFTRUE 70766
70764: GO 70895
70766: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70767: LD_ADDR_VAR 0 5
70771: PUSH
70772: LD_VAR 0 1
70776: PUSH
70777: LD_VAR 0 2
70781: PUSH
70782: LD_INT 3
70784: MINUS
70785: PUSH
70786: LD_INT 3
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: LIST
70793: PUSH
70794: LD_VAR 0 1
70798: PUSH
70799: LD_INT 4
70801: PLUS
70802: PUSH
70803: LD_VAR 0 2
70807: PUSH
70808: LD_INT 4
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: LIST
70815: PUSH
70816: LD_VAR 0 1
70820: PUSH
70821: LD_VAR 0 2
70825: PUSH
70826: LD_INT 4
70828: PLUS
70829: PUSH
70830: LD_INT 0
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: LIST
70837: PUSH
70838: LD_VAR 0 1
70842: PUSH
70843: LD_INT 3
70845: MINUS
70846: PUSH
70847: LD_VAR 0 2
70851: PUSH
70852: LD_INT 1
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: LIST
70859: PUSH
70860: LD_VAR 0 1
70864: PUSH
70865: LD_INT 4
70867: MINUS
70868: PUSH
70869: LD_VAR 0 2
70873: PUSH
70874: LD_INT 4
70876: MINUS
70877: PUSH
70878: LD_INT 2
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: LIST
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: ST_TO_ADDR
// end ; 3 :
70893: GO 71315
70895: LD_INT 3
70897: DOUBLE
70898: EQUAL
70899: IFTRUE 70903
70901: GO 71036
70903: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70904: LD_ADDR_VAR 0 5
70908: PUSH
70909: LD_VAR 0 1
70913: PUSH
70914: LD_INT 3
70916: PLUS
70917: PUSH
70918: LD_VAR 0 2
70922: PUSH
70923: LD_INT 4
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: LIST
70930: PUSH
70931: LD_VAR 0 1
70935: PUSH
70936: LD_INT 4
70938: PLUS
70939: PUSH
70940: LD_VAR 0 2
70944: PUSH
70945: LD_INT 4
70947: PLUS
70948: PUSH
70949: LD_INT 5
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: LIST
70956: PUSH
70957: LD_VAR 0 1
70961: PUSH
70962: LD_INT 4
70964: MINUS
70965: PUSH
70966: LD_VAR 0 2
70970: PUSH
70971: LD_INT 1
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: LIST
70978: PUSH
70979: LD_VAR 0 1
70983: PUSH
70984: LD_VAR 0 2
70988: PUSH
70989: LD_INT 4
70991: MINUS
70992: PUSH
70993: LD_INT 3
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: LIST
71000: PUSH
71001: LD_VAR 0 1
71005: PUSH
71006: LD_INT 3
71008: MINUS
71009: PUSH
71010: LD_VAR 0 2
71014: PUSH
71015: LD_INT 3
71017: MINUS
71018: PUSH
71019: LD_INT 2
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: LIST
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: ST_TO_ADDR
// end ; 4 :
71034: GO 71315
71036: LD_INT 4
71038: DOUBLE
71039: EQUAL
71040: IFTRUE 71044
71042: GO 71177
71044: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71045: LD_ADDR_VAR 0 5
71049: PUSH
71050: LD_VAR 0 1
71054: PUSH
71055: LD_VAR 0 2
71059: PUSH
71060: LD_INT 4
71062: PLUS
71063: PUSH
71064: LD_INT 0
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: LIST
71071: PUSH
71072: LD_VAR 0 1
71076: PUSH
71077: LD_INT 3
71079: PLUS
71080: PUSH
71081: LD_VAR 0 2
71085: PUSH
71086: LD_INT 3
71088: PLUS
71089: PUSH
71090: LD_INT 5
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: LIST
71097: PUSH
71098: LD_VAR 0 1
71102: PUSH
71103: LD_INT 4
71105: PLUS
71106: PUSH
71107: LD_VAR 0 2
71111: PUSH
71112: LD_INT 4
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: LIST
71119: PUSH
71120: LD_VAR 0 1
71124: PUSH
71125: LD_VAR 0 2
71129: PUSH
71130: LD_INT 3
71132: MINUS
71133: PUSH
71134: LD_INT 3
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: LIST
71141: PUSH
71142: LD_VAR 0 1
71146: PUSH
71147: LD_INT 4
71149: MINUS
71150: PUSH
71151: LD_VAR 0 2
71155: PUSH
71156: LD_INT 4
71158: MINUS
71159: PUSH
71160: LD_INT 2
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: LIST
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: ST_TO_ADDR
// end ; 5 :
71175: GO 71315
71177: LD_INT 5
71179: DOUBLE
71180: EQUAL
71181: IFTRUE 71185
71183: GO 71314
71185: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71186: LD_ADDR_VAR 0 5
71190: PUSH
71191: LD_VAR 0 1
71195: PUSH
71196: LD_INT 4
71198: MINUS
71199: PUSH
71200: LD_VAR 0 2
71204: PUSH
71205: LD_INT 1
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: LIST
71212: PUSH
71213: LD_VAR 0 1
71217: PUSH
71218: LD_VAR 0 2
71222: PUSH
71223: LD_INT 4
71225: MINUS
71226: PUSH
71227: LD_INT 3
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: LIST
71234: PUSH
71235: LD_VAR 0 1
71239: PUSH
71240: LD_INT 4
71242: PLUS
71243: PUSH
71244: LD_VAR 0 2
71248: PUSH
71249: LD_INT 4
71251: PLUS
71252: PUSH
71253: LD_INT 5
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: LIST
71260: PUSH
71261: LD_VAR 0 1
71265: PUSH
71266: LD_INT 3
71268: PLUS
71269: PUSH
71270: LD_VAR 0 2
71274: PUSH
71275: LD_INT 4
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: LIST
71282: PUSH
71283: LD_VAR 0 1
71287: PUSH
71288: LD_VAR 0 2
71292: PUSH
71293: LD_INT 3
71295: PLUS
71296: PUSH
71297: LD_INT 0
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: LIST
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: ST_TO_ADDR
// end ; end ;
71312: GO 71315
71314: POP
// result := list ;
71315: LD_ADDR_VAR 0 4
71319: PUSH
71320: LD_VAR 0 5
71324: ST_TO_ADDR
// end ;
71325: LD_VAR 0 4
71329: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71330: LD_INT 0
71332: PPUSH
71333: PPUSH
71334: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71335: LD_VAR 0 1
71339: NOT
71340: PUSH
71341: LD_VAR 0 2
71345: PUSH
71346: LD_INT 1
71348: PUSH
71349: LD_INT 2
71351: PUSH
71352: LD_INT 3
71354: PUSH
71355: LD_INT 4
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: IN
71364: NOT
71365: OR
71366: IFFALSE 71370
// exit ;
71368: GO 71462
// tmp := [ ] ;
71370: LD_ADDR_VAR 0 5
71374: PUSH
71375: EMPTY
71376: ST_TO_ADDR
// for i in units do
71377: LD_ADDR_VAR 0 4
71381: PUSH
71382: LD_VAR 0 1
71386: PUSH
71387: FOR_IN
71388: IFFALSE 71431
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71390: LD_ADDR_VAR 0 5
71394: PUSH
71395: LD_VAR 0 5
71399: PPUSH
71400: LD_VAR 0 5
71404: PUSH
71405: LD_INT 1
71407: PLUS
71408: PPUSH
71409: LD_VAR 0 4
71413: PPUSH
71414: LD_VAR 0 2
71418: PPUSH
71419: CALL_OW 259
71423: PPUSH
71424: CALL_OW 2
71428: ST_TO_ADDR
71429: GO 71387
71431: POP
71432: POP
// if not tmp then
71433: LD_VAR 0 5
71437: NOT
71438: IFFALSE 71442
// exit ;
71440: GO 71462
// result := SortListByListDesc ( units , tmp ) ;
71442: LD_ADDR_VAR 0 3
71446: PUSH
71447: LD_VAR 0 1
71451: PPUSH
71452: LD_VAR 0 5
71456: PPUSH
71457: CALL_OW 77
71461: ST_TO_ADDR
// end ;
71462: LD_VAR 0 3
71466: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71467: LD_INT 0
71469: PPUSH
71470: PPUSH
71471: PPUSH
// result := false ;
71472: LD_ADDR_VAR 0 3
71476: PUSH
71477: LD_INT 0
71479: ST_TO_ADDR
// x := GetX ( building ) ;
71480: LD_ADDR_VAR 0 4
71484: PUSH
71485: LD_VAR 0 2
71489: PPUSH
71490: CALL_OW 250
71494: ST_TO_ADDR
// y := GetY ( building ) ;
71495: LD_ADDR_VAR 0 5
71499: PUSH
71500: LD_VAR 0 2
71504: PPUSH
71505: CALL_OW 251
71509: ST_TO_ADDR
// if not building or not x or not y then
71510: LD_VAR 0 2
71514: NOT
71515: PUSH
71516: LD_VAR 0 4
71520: NOT
71521: OR
71522: PUSH
71523: LD_VAR 0 5
71527: NOT
71528: OR
71529: IFFALSE 71533
// exit ;
71531: GO 71625
// if GetTaskList ( unit ) then
71533: LD_VAR 0 1
71537: PPUSH
71538: CALL_OW 437
71542: IFFALSE 71625
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71544: LD_STRING e
71546: PUSH
71547: LD_VAR 0 1
71551: PPUSH
71552: CALL_OW 437
71556: PUSH
71557: LD_INT 1
71559: ARRAY
71560: PUSH
71561: LD_INT 1
71563: ARRAY
71564: EQUAL
71565: PUSH
71566: LD_VAR 0 4
71570: PUSH
71571: LD_VAR 0 1
71575: PPUSH
71576: CALL_OW 437
71580: PUSH
71581: LD_INT 1
71583: ARRAY
71584: PUSH
71585: LD_INT 2
71587: ARRAY
71588: EQUAL
71589: AND
71590: PUSH
71591: LD_VAR 0 5
71595: PUSH
71596: LD_VAR 0 1
71600: PPUSH
71601: CALL_OW 437
71605: PUSH
71606: LD_INT 1
71608: ARRAY
71609: PUSH
71610: LD_INT 3
71612: ARRAY
71613: EQUAL
71614: AND
71615: IFFALSE 71625
// result := true end ;
71617: LD_ADDR_VAR 0 3
71621: PUSH
71622: LD_INT 1
71624: ST_TO_ADDR
// end ;
71625: LD_VAR 0 3
71629: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71630: LD_INT 0
71632: PPUSH
// result := false ;
71633: LD_ADDR_VAR 0 4
71637: PUSH
71638: LD_INT 0
71640: ST_TO_ADDR
// if GetTaskList ( unit ) then
71641: LD_VAR 0 1
71645: PPUSH
71646: CALL_OW 437
71650: IFFALSE 71733
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71652: LD_STRING M
71654: PUSH
71655: LD_VAR 0 1
71659: PPUSH
71660: CALL_OW 437
71664: PUSH
71665: LD_INT 1
71667: ARRAY
71668: PUSH
71669: LD_INT 1
71671: ARRAY
71672: EQUAL
71673: PUSH
71674: LD_VAR 0 2
71678: PUSH
71679: LD_VAR 0 1
71683: PPUSH
71684: CALL_OW 437
71688: PUSH
71689: LD_INT 1
71691: ARRAY
71692: PUSH
71693: LD_INT 2
71695: ARRAY
71696: EQUAL
71697: AND
71698: PUSH
71699: LD_VAR 0 3
71703: PUSH
71704: LD_VAR 0 1
71708: PPUSH
71709: CALL_OW 437
71713: PUSH
71714: LD_INT 1
71716: ARRAY
71717: PUSH
71718: LD_INT 3
71720: ARRAY
71721: EQUAL
71722: AND
71723: IFFALSE 71733
// result := true ;
71725: LD_ADDR_VAR 0 4
71729: PUSH
71730: LD_INT 1
71732: ST_TO_ADDR
// end ; end ;
71733: LD_VAR 0 4
71737: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71738: LD_INT 0
71740: PPUSH
71741: PPUSH
71742: PPUSH
71743: PPUSH
// if not unit or not area then
71744: LD_VAR 0 1
71748: NOT
71749: PUSH
71750: LD_VAR 0 2
71754: NOT
71755: OR
71756: IFFALSE 71760
// exit ;
71758: GO 71924
// tmp := AreaToList ( area , i ) ;
71760: LD_ADDR_VAR 0 6
71764: PUSH
71765: LD_VAR 0 2
71769: PPUSH
71770: LD_VAR 0 5
71774: PPUSH
71775: CALL_OW 517
71779: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71780: LD_ADDR_VAR 0 5
71784: PUSH
71785: DOUBLE
71786: LD_INT 1
71788: DEC
71789: ST_TO_ADDR
71790: LD_VAR 0 6
71794: PUSH
71795: LD_INT 1
71797: ARRAY
71798: PUSH
71799: FOR_TO
71800: IFFALSE 71922
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71802: LD_ADDR_VAR 0 7
71806: PUSH
71807: LD_VAR 0 6
71811: PUSH
71812: LD_INT 1
71814: ARRAY
71815: PUSH
71816: LD_VAR 0 5
71820: ARRAY
71821: PUSH
71822: LD_VAR 0 6
71826: PUSH
71827: LD_INT 2
71829: ARRAY
71830: PUSH
71831: LD_VAR 0 5
71835: ARRAY
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71841: LD_VAR 0 7
71845: PUSH
71846: LD_INT 1
71848: ARRAY
71849: PPUSH
71850: LD_VAR 0 7
71854: PUSH
71855: LD_INT 2
71857: ARRAY
71858: PPUSH
71859: CALL_OW 428
71863: PUSH
71864: LD_INT 0
71866: EQUAL
71867: IFFALSE 71920
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71869: LD_VAR 0 1
71873: PPUSH
71874: LD_VAR 0 7
71878: PUSH
71879: LD_INT 1
71881: ARRAY
71882: PPUSH
71883: LD_VAR 0 7
71887: PUSH
71888: LD_INT 2
71890: ARRAY
71891: PPUSH
71892: LD_VAR 0 3
71896: PPUSH
71897: CALL_OW 48
// result := IsPlaced ( unit ) ;
71901: LD_ADDR_VAR 0 4
71905: PUSH
71906: LD_VAR 0 1
71910: PPUSH
71911: CALL_OW 305
71915: ST_TO_ADDR
// exit ;
71916: POP
71917: POP
71918: GO 71924
// end ; end ;
71920: GO 71799
71922: POP
71923: POP
// end ;
71924: LD_VAR 0 4
71928: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71929: LD_INT 0
71931: PPUSH
71932: PPUSH
71933: PPUSH
// if not side or side > 8 then
71934: LD_VAR 0 1
71938: NOT
71939: PUSH
71940: LD_VAR 0 1
71944: PUSH
71945: LD_INT 8
71947: GREATER
71948: OR
71949: IFFALSE 71953
// exit ;
71951: GO 72140
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71953: LD_ADDR_VAR 0 4
71957: PUSH
71958: LD_INT 22
71960: PUSH
71961: LD_VAR 0 1
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 21
71972: PUSH
71973: LD_INT 3
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PPUSH
71984: CALL_OW 69
71988: ST_TO_ADDR
// if not tmp then
71989: LD_VAR 0 4
71993: NOT
71994: IFFALSE 71998
// exit ;
71996: GO 72140
// enable_addtolog := true ;
71998: LD_ADDR_OWVAR 81
72002: PUSH
72003: LD_INT 1
72005: ST_TO_ADDR
// AddToLog ( [ ) ;
72006: LD_STRING [
72008: PPUSH
72009: CALL_OW 561
// for i in tmp do
72013: LD_ADDR_VAR 0 3
72017: PUSH
72018: LD_VAR 0 4
72022: PUSH
72023: FOR_IN
72024: IFFALSE 72131
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72026: LD_STRING [
72028: PUSH
72029: LD_VAR 0 3
72033: PPUSH
72034: CALL_OW 266
72038: STR
72039: PUSH
72040: LD_STRING , 
72042: STR
72043: PUSH
72044: LD_VAR 0 3
72048: PPUSH
72049: CALL_OW 250
72053: STR
72054: PUSH
72055: LD_STRING , 
72057: STR
72058: PUSH
72059: LD_VAR 0 3
72063: PPUSH
72064: CALL_OW 251
72068: STR
72069: PUSH
72070: LD_STRING , 
72072: STR
72073: PUSH
72074: LD_VAR 0 3
72078: PPUSH
72079: CALL_OW 254
72083: STR
72084: PUSH
72085: LD_STRING , 
72087: STR
72088: PUSH
72089: LD_VAR 0 3
72093: PPUSH
72094: LD_INT 1
72096: PPUSH
72097: CALL_OW 268
72101: STR
72102: PUSH
72103: LD_STRING , 
72105: STR
72106: PUSH
72107: LD_VAR 0 3
72111: PPUSH
72112: LD_INT 2
72114: PPUSH
72115: CALL_OW 268
72119: STR
72120: PUSH
72121: LD_STRING ],
72123: STR
72124: PPUSH
72125: CALL_OW 561
// end ;
72129: GO 72023
72131: POP
72132: POP
// AddToLog ( ]; ) ;
72133: LD_STRING ];
72135: PPUSH
72136: CALL_OW 561
// end ;
72140: LD_VAR 0 2
72144: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72145: LD_INT 0
72147: PPUSH
72148: PPUSH
72149: PPUSH
72150: PPUSH
72151: PPUSH
// if not area or not rate or not max then
72152: LD_VAR 0 1
72156: NOT
72157: PUSH
72158: LD_VAR 0 2
72162: NOT
72163: OR
72164: PUSH
72165: LD_VAR 0 4
72169: NOT
72170: OR
72171: IFFALSE 72175
// exit ;
72173: GO 72367
// while 1 do
72175: LD_INT 1
72177: IFFALSE 72367
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72179: LD_ADDR_VAR 0 9
72183: PUSH
72184: LD_VAR 0 1
72188: PPUSH
72189: LD_INT 1
72191: PPUSH
72192: CALL_OW 287
72196: PUSH
72197: LD_INT 10
72199: MUL
72200: ST_TO_ADDR
// r := rate / 10 ;
72201: LD_ADDR_VAR 0 7
72205: PUSH
72206: LD_VAR 0 2
72210: PUSH
72211: LD_INT 10
72213: DIVREAL
72214: ST_TO_ADDR
// time := 1 1$00 ;
72215: LD_ADDR_VAR 0 8
72219: PUSH
72220: LD_INT 2100
72222: ST_TO_ADDR
// if amount < min then
72223: LD_VAR 0 9
72227: PUSH
72228: LD_VAR 0 3
72232: LESS
72233: IFFALSE 72251
// r := r * 2 else
72235: LD_ADDR_VAR 0 7
72239: PUSH
72240: LD_VAR 0 7
72244: PUSH
72245: LD_INT 2
72247: MUL
72248: ST_TO_ADDR
72249: GO 72277
// if amount > max then
72251: LD_VAR 0 9
72255: PUSH
72256: LD_VAR 0 4
72260: GREATER
72261: IFFALSE 72277
// r := r / 2 ;
72263: LD_ADDR_VAR 0 7
72267: PUSH
72268: LD_VAR 0 7
72272: PUSH
72273: LD_INT 2
72275: DIVREAL
72276: ST_TO_ADDR
// time := time / r ;
72277: LD_ADDR_VAR 0 8
72281: PUSH
72282: LD_VAR 0 8
72286: PUSH
72287: LD_VAR 0 7
72291: DIVREAL
72292: ST_TO_ADDR
// if time < 0 then
72293: LD_VAR 0 8
72297: PUSH
72298: LD_INT 0
72300: LESS
72301: IFFALSE 72318
// time := time * - 1 ;
72303: LD_ADDR_VAR 0 8
72307: PUSH
72308: LD_VAR 0 8
72312: PUSH
72313: LD_INT 1
72315: NEG
72316: MUL
72317: ST_TO_ADDR
// wait ( time ) ;
72318: LD_VAR 0 8
72322: PPUSH
72323: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72327: LD_INT 35
72329: PPUSH
72330: LD_INT 875
72332: PPUSH
72333: CALL_OW 12
72337: PPUSH
72338: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72342: LD_INT 1
72344: PPUSH
72345: LD_INT 5
72347: PPUSH
72348: CALL_OW 12
72352: PPUSH
72353: LD_VAR 0 1
72357: PPUSH
72358: LD_INT 1
72360: PPUSH
72361: CALL_OW 55
// end ;
72365: GO 72175
// end ;
72367: LD_VAR 0 5
72371: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72372: LD_INT 0
72374: PPUSH
72375: PPUSH
72376: PPUSH
72377: PPUSH
72378: PPUSH
72379: PPUSH
72380: PPUSH
72381: PPUSH
// if not turrets or not factories then
72382: LD_VAR 0 1
72386: NOT
72387: PUSH
72388: LD_VAR 0 2
72392: NOT
72393: OR
72394: IFFALSE 72398
// exit ;
72396: GO 72705
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72398: LD_ADDR_VAR 0 10
72402: PUSH
72403: LD_INT 5
72405: PUSH
72406: LD_INT 6
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: LD_INT 2
72415: PUSH
72416: LD_INT 4
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 3
72425: PUSH
72426: LD_INT 5
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: LIST
72437: PUSH
72438: LD_INT 24
72440: PUSH
72441: LD_INT 25
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: PUSH
72448: LD_INT 23
72450: PUSH
72451: LD_INT 27
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 42
72464: PUSH
72465: LD_INT 43
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PUSH
72472: LD_INT 44
72474: PUSH
72475: LD_INT 46
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PUSH
72482: LD_INT 45
72484: PUSH
72485: LD_INT 47
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: LIST
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: LIST
72501: ST_TO_ADDR
// result := [ ] ;
72502: LD_ADDR_VAR 0 3
72506: PUSH
72507: EMPTY
72508: ST_TO_ADDR
// for i in turrets do
72509: LD_ADDR_VAR 0 4
72513: PUSH
72514: LD_VAR 0 1
72518: PUSH
72519: FOR_IN
72520: IFFALSE 72703
// begin nat := GetNation ( i ) ;
72522: LD_ADDR_VAR 0 7
72526: PUSH
72527: LD_VAR 0 4
72531: PPUSH
72532: CALL_OW 248
72536: ST_TO_ADDR
// weapon := 0 ;
72537: LD_ADDR_VAR 0 8
72541: PUSH
72542: LD_INT 0
72544: ST_TO_ADDR
// if not nat then
72545: LD_VAR 0 7
72549: NOT
72550: IFFALSE 72554
// continue ;
72552: GO 72519
// for j in list [ nat ] do
72554: LD_ADDR_VAR 0 5
72558: PUSH
72559: LD_VAR 0 10
72563: PUSH
72564: LD_VAR 0 7
72568: ARRAY
72569: PUSH
72570: FOR_IN
72571: IFFALSE 72612
// if GetBWeapon ( i ) = j [ 1 ] then
72573: LD_VAR 0 4
72577: PPUSH
72578: CALL_OW 269
72582: PUSH
72583: LD_VAR 0 5
72587: PUSH
72588: LD_INT 1
72590: ARRAY
72591: EQUAL
72592: IFFALSE 72610
// begin weapon := j [ 2 ] ;
72594: LD_ADDR_VAR 0 8
72598: PUSH
72599: LD_VAR 0 5
72603: PUSH
72604: LD_INT 2
72606: ARRAY
72607: ST_TO_ADDR
// break ;
72608: GO 72612
// end ;
72610: GO 72570
72612: POP
72613: POP
// if not weapon then
72614: LD_VAR 0 8
72618: NOT
72619: IFFALSE 72623
// continue ;
72621: GO 72519
// for k in factories do
72623: LD_ADDR_VAR 0 6
72627: PUSH
72628: LD_VAR 0 2
72632: PUSH
72633: FOR_IN
72634: IFFALSE 72699
// begin weapons := AvailableWeaponList ( k ) ;
72636: LD_ADDR_VAR 0 9
72640: PUSH
72641: LD_VAR 0 6
72645: PPUSH
72646: CALL_OW 478
72650: ST_TO_ADDR
// if not weapons then
72651: LD_VAR 0 9
72655: NOT
72656: IFFALSE 72660
// continue ;
72658: GO 72633
// if weapon in weapons then
72660: LD_VAR 0 8
72664: PUSH
72665: LD_VAR 0 9
72669: IN
72670: IFFALSE 72697
// begin result := [ i , weapon ] ;
72672: LD_ADDR_VAR 0 3
72676: PUSH
72677: LD_VAR 0 4
72681: PUSH
72682: LD_VAR 0 8
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: ST_TO_ADDR
// exit ;
72691: POP
72692: POP
72693: POP
72694: POP
72695: GO 72705
// end ; end ;
72697: GO 72633
72699: POP
72700: POP
// end ;
72701: GO 72519
72703: POP
72704: POP
// end ;
72705: LD_VAR 0 3
72709: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72710: LD_INT 0
72712: PPUSH
// if not side or side > 8 then
72713: LD_VAR 0 3
72717: NOT
72718: PUSH
72719: LD_VAR 0 3
72723: PUSH
72724: LD_INT 8
72726: GREATER
72727: OR
72728: IFFALSE 72732
// exit ;
72730: GO 72791
// if not range then
72732: LD_VAR 0 4
72736: NOT
72737: IFFALSE 72748
// range := - 12 ;
72739: LD_ADDR_VAR 0 4
72743: PUSH
72744: LD_INT 12
72746: NEG
72747: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72748: LD_VAR 0 1
72752: PPUSH
72753: LD_VAR 0 2
72757: PPUSH
72758: LD_VAR 0 3
72762: PPUSH
72763: LD_VAR 0 4
72767: PPUSH
72768: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72772: LD_VAR 0 1
72776: PPUSH
72777: LD_VAR 0 2
72781: PPUSH
72782: LD_VAR 0 3
72786: PPUSH
72787: CALL_OW 331
// end ;
72791: LD_VAR 0 5
72795: RET
// export function Video ( mode ) ; begin
72796: LD_INT 0
72798: PPUSH
// ingame_video = mode ;
72799: LD_ADDR_OWVAR 52
72803: PUSH
72804: LD_VAR 0 1
72808: ST_TO_ADDR
// interface_hidden = mode ;
72809: LD_ADDR_OWVAR 54
72813: PUSH
72814: LD_VAR 0 1
72818: ST_TO_ADDR
// end ;
72819: LD_VAR 0 2
72823: RET
// export function Join ( array , element ) ; begin
72824: LD_INT 0
72826: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72827: LD_ADDR_VAR 0 3
72831: PUSH
72832: LD_VAR 0 1
72836: PPUSH
72837: LD_VAR 0 1
72841: PUSH
72842: LD_INT 1
72844: PLUS
72845: PPUSH
72846: LD_VAR 0 2
72850: PPUSH
72851: CALL_OW 1
72855: ST_TO_ADDR
// end ;
72856: LD_VAR 0 3
72860: RET
// export function JoinUnion ( array , element ) ; begin
72861: LD_INT 0
72863: PPUSH
// result := array union element ;
72864: LD_ADDR_VAR 0 3
72868: PUSH
72869: LD_VAR 0 1
72873: PUSH
72874: LD_VAR 0 2
72878: UNION
72879: ST_TO_ADDR
// end ;
72880: LD_VAR 0 3
72884: RET
// export function GetBehemoths ( side ) ; begin
72885: LD_INT 0
72887: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72888: LD_ADDR_VAR 0 2
72892: PUSH
72893: LD_INT 22
72895: PUSH
72896: LD_VAR 0 1
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 31
72907: PUSH
72908: LD_INT 25
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PPUSH
72919: CALL_OW 69
72923: ST_TO_ADDR
// end ;
72924: LD_VAR 0 2
72928: RET
// export function Shuffle ( array ) ; var i , index ; begin
72929: LD_INT 0
72931: PPUSH
72932: PPUSH
72933: PPUSH
// result := [ ] ;
72934: LD_ADDR_VAR 0 2
72938: PUSH
72939: EMPTY
72940: ST_TO_ADDR
// if not array then
72941: LD_VAR 0 1
72945: NOT
72946: IFFALSE 72950
// exit ;
72948: GO 73049
// Randomize ;
72950: CALL_OW 10
// for i = array downto 1 do
72954: LD_ADDR_VAR 0 3
72958: PUSH
72959: DOUBLE
72960: LD_VAR 0 1
72964: INC
72965: ST_TO_ADDR
72966: LD_INT 1
72968: PUSH
72969: FOR_DOWNTO
72970: IFFALSE 73047
// begin index := rand ( 1 , array ) ;
72972: LD_ADDR_VAR 0 4
72976: PUSH
72977: LD_INT 1
72979: PPUSH
72980: LD_VAR 0 1
72984: PPUSH
72985: CALL_OW 12
72989: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72990: LD_ADDR_VAR 0 2
72994: PUSH
72995: LD_VAR 0 2
72999: PPUSH
73000: LD_VAR 0 2
73004: PUSH
73005: LD_INT 1
73007: PLUS
73008: PPUSH
73009: LD_VAR 0 1
73013: PUSH
73014: LD_VAR 0 4
73018: ARRAY
73019: PPUSH
73020: CALL_OW 2
73024: ST_TO_ADDR
// array := Delete ( array , index ) ;
73025: LD_ADDR_VAR 0 1
73029: PUSH
73030: LD_VAR 0 1
73034: PPUSH
73035: LD_VAR 0 4
73039: PPUSH
73040: CALL_OW 3
73044: ST_TO_ADDR
// end ;
73045: GO 72969
73047: POP
73048: POP
// end ;
73049: LD_VAR 0 2
73053: RET
// export function GetBaseMaterials ( base ) ; begin
73054: LD_INT 0
73056: PPUSH
// result := [ 0 , 0 , 0 ] ;
73057: LD_ADDR_VAR 0 2
73061: PUSH
73062: LD_INT 0
73064: PUSH
73065: LD_INT 0
73067: PUSH
73068: LD_INT 0
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: LIST
73075: ST_TO_ADDR
// if not base then
73076: LD_VAR 0 1
73080: NOT
73081: IFFALSE 73085
// exit ;
73083: GO 73134
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73085: LD_ADDR_VAR 0 2
73089: PUSH
73090: LD_VAR 0 1
73094: PPUSH
73095: LD_INT 1
73097: PPUSH
73098: CALL_OW 275
73102: PUSH
73103: LD_VAR 0 1
73107: PPUSH
73108: LD_INT 2
73110: PPUSH
73111: CALL_OW 275
73115: PUSH
73116: LD_VAR 0 1
73120: PPUSH
73121: LD_INT 3
73123: PPUSH
73124: CALL_OW 275
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: LIST
73133: ST_TO_ADDR
// end ;
73134: LD_VAR 0 2
73138: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73139: LD_INT 0
73141: PPUSH
73142: PPUSH
// result := array ;
73143: LD_ADDR_VAR 0 3
73147: PUSH
73148: LD_VAR 0 1
73152: ST_TO_ADDR
// if size > 0 then
73153: LD_VAR 0 2
73157: PUSH
73158: LD_INT 0
73160: GREATER
73161: IFFALSE 73207
// for i := array downto size do
73163: LD_ADDR_VAR 0 4
73167: PUSH
73168: DOUBLE
73169: LD_VAR 0 1
73173: INC
73174: ST_TO_ADDR
73175: LD_VAR 0 2
73179: PUSH
73180: FOR_DOWNTO
73181: IFFALSE 73205
// result := Delete ( result , result ) ;
73183: LD_ADDR_VAR 0 3
73187: PUSH
73188: LD_VAR 0 3
73192: PPUSH
73193: LD_VAR 0 3
73197: PPUSH
73198: CALL_OW 3
73202: ST_TO_ADDR
73203: GO 73180
73205: POP
73206: POP
// end ;
73207: LD_VAR 0 3
73211: RET
// export function ComExit ( unit ) ; var tmp ; begin
73212: LD_INT 0
73214: PPUSH
73215: PPUSH
// if not IsInUnit ( unit ) then
73216: LD_VAR 0 1
73220: PPUSH
73221: CALL_OW 310
73225: NOT
73226: IFFALSE 73230
// exit ;
73228: GO 73290
// tmp := IsInUnit ( unit ) ;
73230: LD_ADDR_VAR 0 3
73234: PUSH
73235: LD_VAR 0 1
73239: PPUSH
73240: CALL_OW 310
73244: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73245: LD_VAR 0 3
73249: PPUSH
73250: CALL_OW 247
73254: PUSH
73255: LD_INT 2
73257: EQUAL
73258: IFFALSE 73271
// ComExitVehicle ( unit ) else
73260: LD_VAR 0 1
73264: PPUSH
73265: CALL_OW 121
73269: GO 73280
// ComExitBuilding ( unit ) ;
73271: LD_VAR 0 1
73275: PPUSH
73276: CALL_OW 122
// result := tmp ;
73280: LD_ADDR_VAR 0 2
73284: PUSH
73285: LD_VAR 0 3
73289: ST_TO_ADDR
// end ;
73290: LD_VAR 0 2
73294: RET
// export function ComExitAll ( units ) ; var i ; begin
73295: LD_INT 0
73297: PPUSH
73298: PPUSH
// if not units then
73299: LD_VAR 0 1
73303: NOT
73304: IFFALSE 73308
// exit ;
73306: GO 73334
// for i in units do
73308: LD_ADDR_VAR 0 3
73312: PUSH
73313: LD_VAR 0 1
73317: PUSH
73318: FOR_IN
73319: IFFALSE 73332
// ComExit ( i ) ;
73321: LD_VAR 0 3
73325: PPUSH
73326: CALL 73212 0 1
73330: GO 73318
73332: POP
73333: POP
// end ;
73334: LD_VAR 0 2
73338: RET
// export function ResetHc ; begin
73339: LD_INT 0
73341: PPUSH
// InitHc ;
73342: CALL_OW 19
// hc_importance := 0 ;
73346: LD_ADDR_OWVAR 32
73350: PUSH
73351: LD_INT 0
73353: ST_TO_ADDR
// end ;
73354: LD_VAR 0 1
73358: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73359: LD_INT 0
73361: PPUSH
73362: PPUSH
73363: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73364: LD_ADDR_VAR 0 6
73368: PUSH
73369: LD_VAR 0 1
73373: PUSH
73374: LD_VAR 0 3
73378: PLUS
73379: PUSH
73380: LD_INT 2
73382: DIV
73383: ST_TO_ADDR
// if _x < 0 then
73384: LD_VAR 0 6
73388: PUSH
73389: LD_INT 0
73391: LESS
73392: IFFALSE 73409
// _x := _x * - 1 ;
73394: LD_ADDR_VAR 0 6
73398: PUSH
73399: LD_VAR 0 6
73403: PUSH
73404: LD_INT 1
73406: NEG
73407: MUL
73408: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73409: LD_ADDR_VAR 0 7
73413: PUSH
73414: LD_VAR 0 2
73418: PUSH
73419: LD_VAR 0 4
73423: PLUS
73424: PUSH
73425: LD_INT 2
73427: DIV
73428: ST_TO_ADDR
// if _y < 0 then
73429: LD_VAR 0 7
73433: PUSH
73434: LD_INT 0
73436: LESS
73437: IFFALSE 73454
// _y := _y * - 1 ;
73439: LD_ADDR_VAR 0 7
73443: PUSH
73444: LD_VAR 0 7
73448: PUSH
73449: LD_INT 1
73451: NEG
73452: MUL
73453: ST_TO_ADDR
// result := [ _x , _y ] ;
73454: LD_ADDR_VAR 0 5
73458: PUSH
73459: LD_VAR 0 6
73463: PUSH
73464: LD_VAR 0 7
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: ST_TO_ADDR
// end ;
73473: LD_VAR 0 5
73477: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73478: LD_INT 0
73480: PPUSH
73481: PPUSH
73482: PPUSH
73483: PPUSH
// task := GetTaskList ( unit ) ;
73484: LD_ADDR_VAR 0 7
73488: PUSH
73489: LD_VAR 0 1
73493: PPUSH
73494: CALL_OW 437
73498: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73499: LD_VAR 0 7
73503: NOT
73504: PUSH
73505: LD_VAR 0 1
73509: PPUSH
73510: LD_VAR 0 2
73514: PPUSH
73515: CALL_OW 308
73519: NOT
73520: AND
73521: IFFALSE 73525
// exit ;
73523: GO 73643
// if IsInArea ( unit , area ) then
73525: LD_VAR 0 1
73529: PPUSH
73530: LD_VAR 0 2
73534: PPUSH
73535: CALL_OW 308
73539: IFFALSE 73557
// begin ComMoveToArea ( unit , goAway ) ;
73541: LD_VAR 0 1
73545: PPUSH
73546: LD_VAR 0 3
73550: PPUSH
73551: CALL_OW 113
// exit ;
73555: GO 73643
// end ; if task [ 1 ] [ 1 ] <> M then
73557: LD_VAR 0 7
73561: PUSH
73562: LD_INT 1
73564: ARRAY
73565: PUSH
73566: LD_INT 1
73568: ARRAY
73569: PUSH
73570: LD_STRING M
73572: NONEQUAL
73573: IFFALSE 73577
// exit ;
73575: GO 73643
// x := task [ 1 ] [ 2 ] ;
73577: LD_ADDR_VAR 0 5
73581: PUSH
73582: LD_VAR 0 7
73586: PUSH
73587: LD_INT 1
73589: ARRAY
73590: PUSH
73591: LD_INT 2
73593: ARRAY
73594: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73595: LD_ADDR_VAR 0 6
73599: PUSH
73600: LD_VAR 0 7
73604: PUSH
73605: LD_INT 1
73607: ARRAY
73608: PUSH
73609: LD_INT 3
73611: ARRAY
73612: ST_TO_ADDR
// if InArea ( x , y , area ) then
73613: LD_VAR 0 5
73617: PPUSH
73618: LD_VAR 0 6
73622: PPUSH
73623: LD_VAR 0 2
73627: PPUSH
73628: CALL_OW 309
73632: IFFALSE 73643
// ComStop ( unit ) ;
73634: LD_VAR 0 1
73638: PPUSH
73639: CALL_OW 141
// end ;
73643: LD_VAR 0 4
73647: RET
// export function Abs ( value ) ; begin
73648: LD_INT 0
73650: PPUSH
// result := value ;
73651: LD_ADDR_VAR 0 2
73655: PUSH
73656: LD_VAR 0 1
73660: ST_TO_ADDR
// if value < 0 then
73661: LD_VAR 0 1
73665: PUSH
73666: LD_INT 0
73668: LESS
73669: IFFALSE 73686
// result := value * - 1 ;
73671: LD_ADDR_VAR 0 2
73675: PUSH
73676: LD_VAR 0 1
73680: PUSH
73681: LD_INT 1
73683: NEG
73684: MUL
73685: ST_TO_ADDR
// end ;
73686: LD_VAR 0 2
73690: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73691: LD_INT 0
73693: PPUSH
73694: PPUSH
73695: PPUSH
73696: PPUSH
73697: PPUSH
73698: PPUSH
73699: PPUSH
73700: PPUSH
// if not unit or not building then
73701: LD_VAR 0 1
73705: NOT
73706: PUSH
73707: LD_VAR 0 2
73711: NOT
73712: OR
73713: IFFALSE 73717
// exit ;
73715: GO 73943
// x := GetX ( building ) ;
73717: LD_ADDR_VAR 0 4
73721: PUSH
73722: LD_VAR 0 2
73726: PPUSH
73727: CALL_OW 250
73731: ST_TO_ADDR
// y := GetY ( building ) ;
73732: LD_ADDR_VAR 0 6
73736: PUSH
73737: LD_VAR 0 2
73741: PPUSH
73742: CALL_OW 251
73746: ST_TO_ADDR
// d := GetDir ( building ) ;
73747: LD_ADDR_VAR 0 8
73751: PUSH
73752: LD_VAR 0 2
73756: PPUSH
73757: CALL_OW 254
73761: ST_TO_ADDR
// r := 4 ;
73762: LD_ADDR_VAR 0 9
73766: PUSH
73767: LD_INT 4
73769: ST_TO_ADDR
// for i := 1 to 5 do
73770: LD_ADDR_VAR 0 10
73774: PUSH
73775: DOUBLE
73776: LD_INT 1
73778: DEC
73779: ST_TO_ADDR
73780: LD_INT 5
73782: PUSH
73783: FOR_TO
73784: IFFALSE 73941
// begin _x := ShiftX ( x , d , r + i ) ;
73786: LD_ADDR_VAR 0 5
73790: PUSH
73791: LD_VAR 0 4
73795: PPUSH
73796: LD_VAR 0 8
73800: PPUSH
73801: LD_VAR 0 9
73805: PUSH
73806: LD_VAR 0 10
73810: PLUS
73811: PPUSH
73812: CALL_OW 272
73816: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73817: LD_ADDR_VAR 0 7
73821: PUSH
73822: LD_VAR 0 6
73826: PPUSH
73827: LD_VAR 0 8
73831: PPUSH
73832: LD_VAR 0 9
73836: PUSH
73837: LD_VAR 0 10
73841: PLUS
73842: PPUSH
73843: CALL_OW 273
73847: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73848: LD_VAR 0 5
73852: PPUSH
73853: LD_VAR 0 7
73857: PPUSH
73858: CALL_OW 488
73862: PUSH
73863: LD_VAR 0 5
73867: PPUSH
73868: LD_VAR 0 7
73872: PPUSH
73873: CALL_OW 428
73877: PPUSH
73878: CALL_OW 247
73882: PUSH
73883: LD_INT 3
73885: PUSH
73886: LD_INT 2
73888: PUSH
73889: EMPTY
73890: LIST
73891: LIST
73892: IN
73893: NOT
73894: AND
73895: IFFALSE 73939
// begin ComMoveXY ( unit , _x , _y ) ;
73897: LD_VAR 0 1
73901: PPUSH
73902: LD_VAR 0 5
73906: PPUSH
73907: LD_VAR 0 7
73911: PPUSH
73912: CALL_OW 111
// result := [ _x , _y ] ;
73916: LD_ADDR_VAR 0 3
73920: PUSH
73921: LD_VAR 0 5
73925: PUSH
73926: LD_VAR 0 7
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: ST_TO_ADDR
// exit ;
73935: POP
73936: POP
73937: GO 73943
// end ; end ;
73939: GO 73783
73941: POP
73942: POP
// end ;
73943: LD_VAR 0 3
73947: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73948: LD_INT 0
73950: PPUSH
73951: PPUSH
73952: PPUSH
// result := 0 ;
73953: LD_ADDR_VAR 0 3
73957: PUSH
73958: LD_INT 0
73960: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73961: LD_VAR 0 1
73965: PUSH
73966: LD_INT 0
73968: LESS
73969: PUSH
73970: LD_VAR 0 1
73974: PUSH
73975: LD_INT 8
73977: GREATER
73978: OR
73979: PUSH
73980: LD_VAR 0 2
73984: PUSH
73985: LD_INT 0
73987: LESS
73988: OR
73989: PUSH
73990: LD_VAR 0 2
73994: PUSH
73995: LD_INT 8
73997: GREATER
73998: OR
73999: IFFALSE 74003
// exit ;
74001: GO 74078
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74003: LD_ADDR_VAR 0 4
74007: PUSH
74008: LD_INT 22
74010: PUSH
74011: LD_VAR 0 2
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PPUSH
74020: CALL_OW 69
74024: PUSH
74025: FOR_IN
74026: IFFALSE 74076
// begin un := UnitShoot ( i ) ;
74028: LD_ADDR_VAR 0 5
74032: PUSH
74033: LD_VAR 0 4
74037: PPUSH
74038: CALL_OW 504
74042: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74043: LD_VAR 0 5
74047: PPUSH
74048: CALL_OW 255
74052: PUSH
74053: LD_VAR 0 1
74057: EQUAL
74058: IFFALSE 74074
// begin result := un ;
74060: LD_ADDR_VAR 0 3
74064: PUSH
74065: LD_VAR 0 5
74069: ST_TO_ADDR
// exit ;
74070: POP
74071: POP
74072: GO 74078
// end ; end ;
74074: GO 74025
74076: POP
74077: POP
// end ;
74078: LD_VAR 0 3
74082: RET
// export function GetCargoBay ( units ) ; begin
74083: LD_INT 0
74085: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74086: LD_ADDR_VAR 0 2
74090: PUSH
74091: LD_VAR 0 1
74095: PPUSH
74096: LD_INT 2
74098: PUSH
74099: LD_INT 34
74101: PUSH
74102: LD_INT 12
74104: PUSH
74105: EMPTY
74106: LIST
74107: LIST
74108: PUSH
74109: LD_INT 34
74111: PUSH
74112: LD_INT 51
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: PUSH
74119: LD_INT 34
74121: PUSH
74122: LD_INT 32
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PUSH
74129: LD_INT 34
74131: PUSH
74132: LD_EXP 44
74136: PUSH
74137: EMPTY
74138: LIST
74139: LIST
74140: PUSH
74141: EMPTY
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: PPUSH
74148: CALL_OW 72
74152: ST_TO_ADDR
// end ;
74153: LD_VAR 0 2
74157: RET
// export function Negate ( value ) ; begin
74158: LD_INT 0
74160: PPUSH
// result := not value ;
74161: LD_ADDR_VAR 0 2
74165: PUSH
74166: LD_VAR 0 1
74170: NOT
74171: ST_TO_ADDR
// end ;
74172: LD_VAR 0 2
74176: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
74177: LD_INT 0
74179: PPUSH
// if x1 = x2 then
74180: LD_VAR 0 1
74184: PUSH
74185: LD_VAR 0 3
74189: EQUAL
74190: IFFALSE 74224
// begin if y1 > y2 then
74192: LD_VAR 0 2
74196: PUSH
74197: LD_VAR 0 4
74201: GREATER
74202: IFFALSE 74214
// result := 0 else
74204: LD_ADDR_VAR 0 5
74208: PUSH
74209: LD_INT 0
74211: ST_TO_ADDR
74212: GO 74222
// result := 3 ;
74214: LD_ADDR_VAR 0 5
74218: PUSH
74219: LD_INT 3
74221: ST_TO_ADDR
// exit ;
74222: GO 74310
// end ; if y1 = y2 then
74224: LD_VAR 0 2
74228: PUSH
74229: LD_VAR 0 4
74233: EQUAL
74234: IFFALSE 74268
// begin if x1 > x2 then
74236: LD_VAR 0 1
74240: PUSH
74241: LD_VAR 0 3
74245: GREATER
74246: IFFALSE 74258
// result := 1 else
74248: LD_ADDR_VAR 0 5
74252: PUSH
74253: LD_INT 1
74255: ST_TO_ADDR
74256: GO 74266
// result := 4 ;
74258: LD_ADDR_VAR 0 5
74262: PUSH
74263: LD_INT 4
74265: ST_TO_ADDR
// exit ;
74266: GO 74310
// end ; if x1 > x2 and y1 > y2 then
74268: LD_VAR 0 1
74272: PUSH
74273: LD_VAR 0 3
74277: GREATER
74278: PUSH
74279: LD_VAR 0 2
74283: PUSH
74284: LD_VAR 0 4
74288: GREATER
74289: AND
74290: IFFALSE 74302
// result := 2 else
74292: LD_ADDR_VAR 0 5
74296: PUSH
74297: LD_INT 2
74299: ST_TO_ADDR
74300: GO 74310
// result := 5 ;
74302: LD_ADDR_VAR 0 5
74306: PUSH
74307: LD_INT 5
74309: ST_TO_ADDR
// end ;
74310: LD_VAR 0 5
74314: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74315: LD_INT 0
74317: PPUSH
74318: PPUSH
// if not driver or not IsInUnit ( driver ) then
74319: LD_VAR 0 1
74323: NOT
74324: PUSH
74325: LD_VAR 0 1
74329: PPUSH
74330: CALL_OW 310
74334: NOT
74335: OR
74336: IFFALSE 74340
// exit ;
74338: GO 74430
// vehicle := IsInUnit ( driver ) ;
74340: LD_ADDR_VAR 0 3
74344: PUSH
74345: LD_VAR 0 1
74349: PPUSH
74350: CALL_OW 310
74354: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74355: LD_VAR 0 1
74359: PPUSH
74360: LD_STRING \
74362: PUSH
74363: LD_INT 0
74365: PUSH
74366: LD_INT 0
74368: PUSH
74369: LD_INT 0
74371: PUSH
74372: LD_INT 0
74374: PUSH
74375: LD_INT 0
74377: PUSH
74378: LD_INT 0
74380: PUSH
74381: EMPTY
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: PUSH
74390: LD_STRING E
74392: PUSH
74393: LD_INT 0
74395: PUSH
74396: LD_INT 0
74398: PUSH
74399: LD_VAR 0 3
74403: PUSH
74404: LD_INT 0
74406: PUSH
74407: LD_INT 0
74409: PUSH
74410: LD_INT 0
74412: PUSH
74413: EMPTY
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: PPUSH
74426: CALL_OW 446
// end ;
74430: LD_VAR 0 2
74434: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74435: LD_INT 0
74437: PPUSH
74438: PPUSH
// if not driver or not IsInUnit ( driver ) then
74439: LD_VAR 0 1
74443: NOT
74444: PUSH
74445: LD_VAR 0 1
74449: PPUSH
74450: CALL_OW 310
74454: NOT
74455: OR
74456: IFFALSE 74460
// exit ;
74458: GO 74550
// vehicle := IsInUnit ( driver ) ;
74460: LD_ADDR_VAR 0 3
74464: PUSH
74465: LD_VAR 0 1
74469: PPUSH
74470: CALL_OW 310
74474: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74475: LD_VAR 0 1
74479: PPUSH
74480: LD_STRING \
74482: PUSH
74483: LD_INT 0
74485: PUSH
74486: LD_INT 0
74488: PUSH
74489: LD_INT 0
74491: PUSH
74492: LD_INT 0
74494: PUSH
74495: LD_INT 0
74497: PUSH
74498: LD_INT 0
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: LIST
74505: LIST
74506: LIST
74507: LIST
74508: LIST
74509: PUSH
74510: LD_STRING E
74512: PUSH
74513: LD_INT 0
74515: PUSH
74516: LD_INT 0
74518: PUSH
74519: LD_VAR 0 3
74523: PUSH
74524: LD_INT 0
74526: PUSH
74527: LD_INT 0
74529: PUSH
74530: LD_INT 0
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: PUSH
74542: EMPTY
74543: LIST
74544: LIST
74545: PPUSH
74546: CALL_OW 447
// end ;
74550: LD_VAR 0 2
74554: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74555: LD_INT 0
74557: PPUSH
74558: PPUSH
74559: PPUSH
// tmp := [ ] ;
74560: LD_ADDR_VAR 0 5
74564: PUSH
74565: EMPTY
74566: ST_TO_ADDR
// for i in units do
74567: LD_ADDR_VAR 0 4
74571: PUSH
74572: LD_VAR 0 1
74576: PUSH
74577: FOR_IN
74578: IFFALSE 74616
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74580: LD_ADDR_VAR 0 5
74584: PUSH
74585: LD_VAR 0 5
74589: PPUSH
74590: LD_VAR 0 5
74594: PUSH
74595: LD_INT 1
74597: PLUS
74598: PPUSH
74599: LD_VAR 0 4
74603: PPUSH
74604: CALL_OW 256
74608: PPUSH
74609: CALL_OW 2
74613: ST_TO_ADDR
74614: GO 74577
74616: POP
74617: POP
// if not tmp then
74618: LD_VAR 0 5
74622: NOT
74623: IFFALSE 74627
// exit ;
74625: GO 74675
// if asc then
74627: LD_VAR 0 2
74631: IFFALSE 74655
// result := SortListByListAsc ( units , tmp ) else
74633: LD_ADDR_VAR 0 3
74637: PUSH
74638: LD_VAR 0 1
74642: PPUSH
74643: LD_VAR 0 5
74647: PPUSH
74648: CALL_OW 76
74652: ST_TO_ADDR
74653: GO 74675
// result := SortListByListDesc ( units , tmp ) ;
74655: LD_ADDR_VAR 0 3
74659: PUSH
74660: LD_VAR 0 1
74664: PPUSH
74665: LD_VAR 0 5
74669: PPUSH
74670: CALL_OW 77
74674: ST_TO_ADDR
// end ;
74675: LD_VAR 0 3
74679: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74680: LD_INT 0
74682: PPUSH
74683: PPUSH
// task := GetTaskList ( mech ) ;
74684: LD_ADDR_VAR 0 4
74688: PUSH
74689: LD_VAR 0 1
74693: PPUSH
74694: CALL_OW 437
74698: ST_TO_ADDR
// if not task then
74699: LD_VAR 0 4
74703: NOT
74704: IFFALSE 74708
// exit ;
74706: GO 74750
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74708: LD_ADDR_VAR 0 3
74712: PUSH
74713: LD_VAR 0 4
74717: PUSH
74718: LD_INT 1
74720: ARRAY
74721: PUSH
74722: LD_INT 1
74724: ARRAY
74725: PUSH
74726: LD_STRING r
74728: EQUAL
74729: PUSH
74730: LD_VAR 0 4
74734: PUSH
74735: LD_INT 1
74737: ARRAY
74738: PUSH
74739: LD_INT 4
74741: ARRAY
74742: PUSH
74743: LD_VAR 0 2
74747: EQUAL
74748: AND
74749: ST_TO_ADDR
// end ;
74750: LD_VAR 0 3
74754: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74755: LD_INT 0
74757: PPUSH
// SetDir ( unit , d ) ;
74758: LD_VAR 0 1
74762: PPUSH
74763: LD_VAR 0 4
74767: PPUSH
74768: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74772: LD_VAR 0 1
74776: PPUSH
74777: LD_VAR 0 2
74781: PPUSH
74782: LD_VAR 0 3
74786: PPUSH
74787: LD_VAR 0 5
74791: PPUSH
74792: CALL_OW 48
// end ;
74796: LD_VAR 0 6
74800: RET
// export function ToNaturalNumber ( number ) ; begin
74801: LD_INT 0
74803: PPUSH
// result := number div 1 ;
74804: LD_ADDR_VAR 0 2
74808: PUSH
74809: LD_VAR 0 1
74813: PUSH
74814: LD_INT 1
74816: DIV
74817: ST_TO_ADDR
// if number < 0 then
74818: LD_VAR 0 1
74822: PUSH
74823: LD_INT 0
74825: LESS
74826: IFFALSE 74836
// result := 0 ;
74828: LD_ADDR_VAR 0 2
74832: PUSH
74833: LD_INT 0
74835: ST_TO_ADDR
// end ; end_of_file
74836: LD_VAR 0 2
74840: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74841: LD_VAR 0 1
74845: PUSH
74846: LD_INT 200
74848: DOUBLE
74849: GREATEREQUAL
74850: IFFALSE 74858
74852: LD_INT 299
74854: DOUBLE
74855: LESSEQUAL
74856: IFTRUE 74860
74858: GO 74892
74860: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74861: LD_VAR 0 1
74865: PPUSH
74866: LD_VAR 0 2
74870: PPUSH
74871: LD_VAR 0 3
74875: PPUSH
74876: LD_VAR 0 4
74880: PPUSH
74881: LD_VAR 0 5
74885: PPUSH
74886: CALL 32203 0 5
74890: GO 74969
74892: LD_INT 300
74894: DOUBLE
74895: GREATEREQUAL
74896: IFFALSE 74904
74898: LD_INT 399
74900: DOUBLE
74901: LESSEQUAL
74902: IFTRUE 74906
74904: GO 74968
74906: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74907: LD_VAR 0 1
74911: PPUSH
74912: LD_VAR 0 2
74916: PPUSH
74917: LD_VAR 0 3
74921: PPUSH
74922: LD_VAR 0 4
74926: PPUSH
74927: LD_VAR 0 5
74931: PPUSH
74932: LD_VAR 0 6
74936: PPUSH
74937: LD_VAR 0 7
74941: PPUSH
74942: LD_VAR 0 8
74946: PPUSH
74947: LD_VAR 0 9
74951: PPUSH
74952: LD_VAR 0 10
74956: PPUSH
74957: LD_VAR 0 11
74961: PPUSH
74962: CALL 30091 0 11
74966: GO 74969
74968: POP
// end ;
74969: PPOPN 11
74971: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74972: LD_VAR 0 1
74976: PPUSH
74977: LD_VAR 0 2
74981: PPUSH
74982: LD_VAR 0 3
74986: PPUSH
74987: LD_VAR 0 4
74991: PPUSH
74992: LD_VAR 0 5
74996: PPUSH
74997: CALL 32185 0 5
// end ; end_of_file
75001: PPOPN 5
75003: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75004: LD_VAR 0 1
75008: PPUSH
75009: LD_VAR 0 2
75013: PPUSH
75014: LD_VAR 0 3
75018: PPUSH
75019: LD_VAR 0 4
75023: PPUSH
75024: LD_VAR 0 5
75028: PPUSH
75029: LD_VAR 0 6
75033: PPUSH
75034: CALL 18899 0 6
// end ;
75038: PPOPN 6
75040: END
