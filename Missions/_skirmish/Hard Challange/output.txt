// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10090 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10220 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11627 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13856 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 2000 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 2000
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8309 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6358 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6358 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6358 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6358 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6358 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6209 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6209 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8082 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6209 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6209 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8082 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10608 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5233
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6118 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10534 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5451 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5451 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9125 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 71835 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6358 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6499 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6574 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8481 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6358 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6913 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7521 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7812 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6209 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6209 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6209 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7960 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7960 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7960 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8082 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8082 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6118 0 1
3087: PPUSH
3088: CALL 5810 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6118 0 1
3108: PPUSH
3109: CALL 5810 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11332 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5451 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3480
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3478
// if GetLives ( ru_attack_list [ i ] ) >= 250 then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: IFFALSE 3476
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3417: LD_EXP 10
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_INT 81
3430: PUSH
3431: LD_EXP 10
3435: PUSH
3436: LD_VAR 0 1
3440: ARRAY
3441: PPUSH
3442: CALL_OW 255
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: PPUSH
3456: LD_EXP 10
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 74
3471: PPUSH
3472: CALL_OW 115
3476: GO 3393
3478: POP
3479: POP
// end ; if GetBehemoth ( 3 ) then
3480: LD_INT 3
3482: PPUSH
3483: CALL 11332 0 1
3487: IFFALSE 3859
// begin if ru_mech >= 4 then
3489: LD_EXP 22
3493: PUSH
3494: LD_INT 4
3496: GREATEREQUAL
3497: IFFALSE 3548
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3499: LD_ADDR_EXP 15
3503: PUSH
3504: LD_EXP 22
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: PUSH
3513: LD_EXP 22
3517: PUSH
3518: LD_INT 2
3520: ARRAY
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 3
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 4
3538: ARRAY
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
3546: GO 3558
// ru_behemoth_mechanic := ru_mech ;
3548: LD_ADDR_EXP 15
3552: PUSH
3553: LD_EXP 22
3557: ST_TO_ADDR
// for i = 1 to ru_mech do
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: DOUBLE
3564: LD_INT 1
3566: DEC
3567: ST_TO_ADDR
3568: LD_EXP 22
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3628
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3576: LD_EXP 22
3580: PUSH
3581: LD_VAR 0 1
3585: ARRAY
3586: PPUSH
3587: CALL_OW 310
3591: PUSH
3592: LD_EXP 22
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PUSH
3603: LD_EXP 15
3607: IN
3608: AND
3609: IFFALSE 3626
// ComExitBuilding ( ru_mech [ i ] ) ;
3611: LD_EXP 22
3615: PUSH
3616: LD_VAR 0 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 122
3626: GO 3573
3628: POP
3629: POP
// if UnitsInside ( ru_fac ) = 0 then
3630: LD_INT 14
3632: PPUSH
3633: CALL_OW 313
3637: PUSH
3638: LD_INT 0
3640: EQUAL
3641: IFFALSE 3708
// begin InitHc_All ;
3643: CALL_OW 584
// for i := 1 to 5 do
3647: LD_ADDR_VAR 0 1
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 5
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3706
// begin uc_side := 3 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 3
3670: ST_TO_ADDR
// uc_nation := 3 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 3
3678: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3679: LD_INT 0
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 7
3687: PPUSH
3688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3692: CALL_OW 44
3696: PPUSH
3697: LD_INT 14
3699: PPUSH
3700: CALL_OW 52
// end ;
3704: GO 3660
3706: POP
3707: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3708: LD_INT 12
3710: PPUSH
3711: LD_INT 22
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 21
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 70
3739: PUSH
3740: LD_INT 0
3742: GREATER
3743: IFFALSE 3803
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3745: LD_INT 3
3747: PPUSH
3748: CALL 11332 0 1
3752: PUSH
3753: LD_INT 1
3755: ARRAY
3756: PPUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 34
3769: PUSH
3770: LD_INT 49
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PPUSH
3786: LD_EXP 15
3790: PPUSH
3791: LD_INT 97
3793: PPUSH
3794: LD_INT 9
3796: PPUSH
3797: CALL 10829 0 5
3801: GO 3859
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3803: LD_INT 3
3805: PPUSH
3806: CALL 11332 0 1
3810: PUSH
3811: LD_INT 1
3813: ARRAY
3814: PPUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 49
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: PPUSH
3839: CALL_OW 69
3843: PPUSH
3844: LD_EXP 15
3848: PPUSH
3849: LD_INT 153
3851: PPUSH
3852: LD_INT 102
3854: PPUSH
3855: CALL 10829 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3859: LD_EXP 24
3863: PUSH
3864: LD_INT 0
3866: EQUAL
3867: PUSH
3868: LD_INT 44
3870: PPUSH
3871: LD_INT 3
3873: PPUSH
3874: CALL_OW 321
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3894
// ComChangeClassToBazooker ( ru_sold ) ;
3885: LD_EXP 20
3889: PPUSH
3890: CALL 9766 0 1
// if ru_bazz then
3894: LD_EXP 24
3898: IFFALSE 3912
// IntBazooka ( ru_bazz , 1 ) ;
3900: LD_EXP 24
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL 9485 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3912: LD_INT 67
3914: PPUSH
3915: LD_INT 39
3917: PPUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL_OW 440
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: PUSH
3930: LD_INT 20
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: CALL_OW 321
3940: PUSH
3941: LD_INT 2
3943: EQUAL
3944: AND
3945: IFFALSE 3966
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3947: LD_EXP 23
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_INT 67
3958: PPUSH
3959: LD_INT 39
3961: PPUSH
3962: CALL 9064 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3966: LD_INT 89
3968: PPUSH
3969: LD_INT 66
3971: PPUSH
3972: LD_INT 3
3974: PPUSH
3975: CALL_OW 440
3979: PUSH
3980: LD_INT 0
3982: EQUAL
3983: IFFALSE 4004
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
3985: LD_EXP 23
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_INT 87
3996: PPUSH
3997: LD_INT 60
3999: PPUSH
4000: CALL 9064 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4004: LD_INT 104
4006: PPUSH
4007: LD_INT 94
4009: PPUSH
4010: LD_INT 3
4012: PPUSH
4013: CALL_OW 440
4017: PUSH
4018: LD_INT 0
4020: EQUAL
4021: PUSH
4022: LD_INT 20
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: CALL_OW 321
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: AND
4037: IFFALSE 4058
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4039: LD_EXP 23
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: PPUSH
4048: LD_INT 104
4050: PPUSH
4051: LD_INT 94
4053: PPUSH
4054: CALL 9064 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4058: LD_INT 3
4060: PPUSH
4061: LD_INT 24
4063: PPUSH
4064: LD_INT 53
4066: PPUSH
4067: CALL 7960 0 3
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: PUSH
4076: LD_EXP 18
4080: AND
4081: IFFALSE 4222
// begin need_buldozer := false ;
4083: LD_ADDR_EXP 18
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4091: LD_INT 3
4093: PPUSH
4094: LD_INT 24
4096: PPUSH
4097: LD_INT 53
4099: PPUSH
4100: CALL 7960 0 3
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_INT 67
4111: PPUSH
4112: LD_INT 39
4114: PPUSH
4115: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 24
4124: PPUSH
4125: LD_INT 53
4127: PPUSH
4128: CALL 7960 0 3
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PPUSH
4137: LD_INT 71
4139: PPUSH
4140: LD_INT 10
4142: PPUSH
4143: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4147: LD_INT 3
4149: PPUSH
4150: LD_INT 24
4152: PPUSH
4153: LD_INT 53
4155: PPUSH
4156: CALL 7960 0 3
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: PPUSH
4165: LD_INT 15
4167: PPUSH
4168: CALL 5551 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 24
4177: PPUSH
4178: LD_INT 53
4180: PPUSH
4181: CALL 7960 0 3
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: PPUSH
4190: LD_INT 350
4192: PPUSH
4193: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 24
4202: PPUSH
4203: LD_INT 53
4205: PPUSH
4206: CALL 7960 0 3
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PPUSH
4215: LD_INT 14
4217: PPUSH
4218: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4222: LD_INT 67
4224: PPUSH
4225: LD_INT 39
4227: PPUSH
4228: LD_INT 3
4230: PPUSH
4231: CALL_OW 440
4235: PUSH
4236: LD_INT 67
4238: PPUSH
4239: LD_INT 39
4241: PPUSH
4242: CALL_OW 428
4246: PUSH
4247: LD_INT 0
4249: EQUAL
4250: AND
4251: PUSH
4252: LD_INT 79
4254: PPUSH
4255: LD_INT 45
4257: PPUSH
4258: CALL_OW 428
4262: PPUSH
4263: CALL_OW 266
4267: PUSH
4268: LD_INT 0
4270: EQUAL
4271: AND
4272: PUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_INT 79
4278: PPUSH
4279: LD_INT 45
4281: PPUSH
4282: CALL 5451 0 3
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: AND
4291: IFFALSE 4394
// begin for i = 1 to ru_eng do
4293: LD_ADDR_VAR 0 1
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_EXP 21
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4392
// if IsInUnit ( ru_eng [ i ] ) then
4311: LD_EXP 21
4315: PUSH
4316: LD_VAR 0 1
4320: ARRAY
4321: PPUSH
4322: CALL_OW 310
4326: IFFALSE 4345
// ComExitBuilding ( ru_eng [ i ] ) else
4328: LD_EXP 21
4332: PUSH
4333: LD_VAR 0 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 122
4343: GO 4390
// if not HasTask ( ru_eng [ i ] ) then
4345: LD_EXP 21
4349: PUSH
4350: LD_VAR 0 1
4354: ARRAY
4355: PPUSH
4356: CALL_OW 314
4360: NOT
4361: IFFALSE 4390
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: LD_INT 30
4376: PPUSH
4377: LD_INT 67
4379: PPUSH
4380: LD_INT 39
4382: PPUSH
4383: LD_INT 3
4385: PPUSH
4386: CALL_OW 145
4390: GO 4308
4392: POP
4393: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 79
4399: PPUSH
4400: LD_INT 45
4402: PPUSH
4403: CALL 5451 0 3
4407: PUSH
4408: LD_INT 0
4410: EQUAL
4411: IFFALSE 4607
// begin if HexInfo ( 79 , 45 ) = 0 then
4413: LD_INT 79
4415: PPUSH
4416: LD_INT 45
4418: PPUSH
4419: CALL_OW 428
4423: PUSH
4424: LD_INT 0
4426: EQUAL
4427: IFFALSE 4449
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4429: LD_EXP 21
4433: PPUSH
4434: LD_INT 79
4436: PPUSH
4437: LD_INT 45
4439: PPUSH
4440: LD_INT 3
4442: PPUSH
4443: CALL 6975 0 4
4447: GO 4607
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4449: LD_INT 89
4451: PPUSH
4452: LD_INT 66
4454: PPUSH
4455: CALL_OW 428
4459: PUSH
4460: LD_INT 0
4462: EQUAL
4463: PUSH
4464: LD_INT 89
4466: PPUSH
4467: LD_INT 66
4469: PPUSH
4470: LD_INT 3
4472: PPUSH
4473: CALL_OW 440
4477: AND
4478: IFFALSE 4607
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4480: LD_INT 79
4482: PPUSH
4483: LD_INT 45
4485: PPUSH
4486: CALL_OW 428
4490: PPUSH
4491: CALL_OW 274
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 100
4501: PPUSH
4502: CALL_OW 277
// for i = 1 to ru_eng do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 21
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4605
// if IsInUnit ( ru_eng [ i ] ) then
4524: LD_EXP 21
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 310
4539: IFFALSE 4558
// ComExitBuilding ( ru_eng [ i ] ) else
4541: LD_EXP 21
4545: PUSH
4546: LD_VAR 0 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 122
4556: GO 4603
// if not HasTask ( ru_eng [ i ] ) then
4558: LD_EXP 21
4562: PUSH
4563: LD_VAR 0 1
4567: ARRAY
4568: PPUSH
4569: CALL_OW 314
4573: NOT
4574: IFFALSE 4603
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: LD_INT 29
4589: PPUSH
4590: LD_INT 89
4592: PPUSH
4593: LD_INT 66
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: CALL_OW 145
4603: GO 4521
4605: POP
4606: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4607: LD_INT 3
4609: PPUSH
4610: LD_INT 29
4612: PPUSH
4613: CALL 6209 0 2
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: PUSH
4622: LD_INT 1
4624: PPUSH
4625: LD_INT 36
4627: PPUSH
4628: LD_INT 6
4630: PPUSH
4631: CALL 5451 0 3
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: AND
4640: PUSH
4641: LD_INT 3
4643: PPUSH
4644: CALL 6118 0 1
4648: PPUSH
4649: LD_INT 29
4651: PPUSH
4652: CALL 5694 0 2
4656: AND
4657: IFFALSE 4760
// begin for i = 1 to ru_eng do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_EXP 21
4673: PUSH
4674: FOR_TO
4675: IFFALSE 4758
// begin if IsInUnit ( ru_eng [ i ] ) then
4677: LD_EXP 21
4681: PUSH
4682: LD_VAR 0 1
4686: ARRAY
4687: PPUSH
4688: CALL_OW 310
4692: IFFALSE 4711
// ComExitBuilding ( ru_eng [ i ] ) else
4694: LD_EXP 21
4698: PUSH
4699: LD_VAR 0 1
4703: ARRAY
4704: PPUSH
4705: CALL_OW 122
4709: GO 4756
// if not HasTask ( ru_eng [ i ] ) then
4711: LD_EXP 21
4715: PUSH
4716: LD_VAR 0 1
4720: ARRAY
4721: PPUSH
4722: CALL_OW 314
4726: NOT
4727: IFFALSE 4756
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: LD_INT 29
4742: PPUSH
4743: LD_INT 33
4745: PPUSH
4746: LD_INT 4
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL_OW 205
// end ; end ;
4756: GO 4674
4758: POP
4759: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4760: LD_EXP 21
4764: PUSH
4765: LD_INT 79
4767: PPUSH
4768: LD_INT 45
4770: PPUSH
4771: CALL_OW 428
4775: PUSH
4776: LD_INT 0
4778: GREATER
4779: AND
4780: PUSH
4781: LD_INT 79
4783: PPUSH
4784: LD_INT 45
4786: PPUSH
4787: CALL_OW 428
4791: PPUSH
4792: CALL_OW 266
4796: PUSH
4797: LD_INT 0
4799: EQUAL
4800: AND
4801: IFFALSE 4961
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4803: LD_INT 79
4805: PPUSH
4806: LD_INT 45
4808: PPUSH
4809: CALL_OW 428
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: LD_INT 3
4821: EQUAL
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 79
4828: PPUSH
4829: LD_INT 45
4831: PPUSH
4832: CALL 5451 0 3
4836: PUSH
4837: LD_INT 0
4839: EQUAL
4840: AND
4841: PUSH
4842: LD_INT 79
4844: PPUSH
4845: LD_INT 45
4847: PPUSH
4848: CALL_OW 428
4852: PPUSH
4853: CALL_OW 274
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: CALL_OW 275
4865: PUSH
4866: LD_INT 10
4868: GREATEREQUAL
4869: AND
4870: IFFALSE 4961
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4872: LD_EXP 21
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: CALL_OW 310
4885: IFFALSE 4902
// ComExitBuilding ( ru_eng [ 1 ] ) else
4887: LD_EXP 21
4891: PUSH
4892: LD_INT 1
4894: ARRAY
4895: PPUSH
4896: CALL_OW 122
4900: GO 4961
// if not HasTask ( ru_eng [ 1 ] ) then
4902: LD_EXP 21
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: CALL_OW 314
4915: NOT
4916: IFFALSE 4961
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4918: LD_EXP 21
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_INT 79
4929: PPUSH
4930: LD_INT 45
4932: PPUSH
4933: CALL_OW 428
4937: PPUSH
4938: LD_INT 3
4940: PPUSH
4941: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4945: LD_EXP 21
4949: PUSH
4950: LD_INT 1
4952: ARRAY
4953: PPUSH
4954: LD_INT 2
4956: PPUSH
4957: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4961: LD_EXP 21
4965: PUSH
4966: LD_INT 2
4968: GREATER
4969: PUSH
4970: LD_INT 79
4972: PPUSH
4973: LD_INT 45
4975: PPUSH
4976: CALL_OW 428
4980: PUSH
4981: LD_INT 0
4983: GREATER
4984: AND
4985: PUSH
4986: LD_INT 79
4988: PPUSH
4989: LD_INT 45
4991: PPUSH
4992: CALL_OW 428
4996: PPUSH
4997: CALL_OW 266
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: IFFALSE 5166
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5008: LD_INT 79
5010: PPUSH
5011: LD_INT 45
5013: PPUSH
5014: CALL_OW 428
5018: PPUSH
5019: CALL_OW 255
5023: PUSH
5024: LD_INT 3
5026: EQUAL
5027: PUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 79
5033: PPUSH
5034: LD_INT 45
5036: PPUSH
5037: CALL 5451 0 3
5041: PUSH
5042: LD_INT 0
5044: EQUAL
5045: AND
5046: PUSH
5047: LD_INT 79
5049: PPUSH
5050: LD_INT 45
5052: PPUSH
5053: CALL_OW 428
5057: PPUSH
5058: CALL_OW 274
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 275
5070: PUSH
5071: LD_INT 20
5073: GREATER
5074: AND
5075: IFFALSE 5166
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5077: LD_EXP 21
5081: PUSH
5082: LD_INT 2
5084: ARRAY
5085: PPUSH
5086: CALL_OW 310
5090: IFFALSE 5107
// ComExitBuilding ( ru_eng [ 2 ] ) else
5092: LD_EXP 21
5096: PUSH
5097: LD_INT 2
5099: ARRAY
5100: PPUSH
5101: CALL_OW 122
5105: GO 5166
// if not HasTask ( ru_eng [ 2 ] ) then
5107: LD_EXP 21
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 314
5120: NOT
5121: IFFALSE 5166
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5123: LD_EXP 21
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_INT 79
5134: PPUSH
5135: LD_INT 45
5137: PPUSH
5138: CALL_OW 428
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5150: LD_EXP 21
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: LD_INT 2
5161: PPUSH
5162: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 59
5171: PPUSH
5172: LD_INT 60
5174: PPUSH
5175: CALL 5451 0 3
5179: PUSH
5180: LD_INT 0
5182: EQUAL
5183: PUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 67
5189: PPUSH
5190: LD_INT 76
5192: PPUSH
5193: CALL 5451 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: AND
5202: PUSH
5203: LD_INT 1
5205: PPUSH
5206: LD_INT 79
5208: PPUSH
5209: LD_INT 100
5211: PPUSH
5212: CALL 5451 0 3
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5233
// CollectCrates ( 3 , west_crates ) ;
5223: LD_INT 3
5225: PPUSH
5226: LD_INT 13
5228: PPUSH
5229: CALL 11376 0 2
// end ;
5233: PPOPN 10
5235: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5236: LD_OWVAR 1
5240: PUSH
5241: LD_INT 111300
5243: LESSEQUAL
5244: PUSH
5245: LD_EXP 30
5249: NOT
5250: OR
5251: IFFALSE 5448
5253: GO 5255
5255: DISABLE
5256: LD_INT 0
5258: PPUSH
// begin enable ;
5259: ENABLE
// uc_nation := 3 ;
5260: LD_ADDR_OWVAR 21
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_side := 3 ;
5268: LD_ADDR_OWVAR 20
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5276: LD_ADDR_OWVAR 37
5280: PUSH
5281: LD_INT 22
5283: ST_TO_ADDR
// vc_engine := engine_siberite ;
5284: LD_ADDR_OWVAR 39
5288: PUSH
5289: LD_INT 3
5291: ST_TO_ADDR
// vc_control := control_computer ;
5292: LD_ADDR_OWVAR 38
5296: PUSH
5297: LD_INT 3
5299: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5300: LD_ADDR_OWVAR 40
5304: PUSH
5305: LD_INT 51
5307: ST_TO_ADDR
// veh := CreateVehicle ;
5308: LD_ADDR_VAR 0 1
5312: PUSH
5313: CALL_OW 45
5317: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 4
5325: PPUSH
5326: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5330: LD_VAR 0 1
5334: PPUSH
5335: LD_INT 10
5337: PPUSH
5338: LD_INT 0
5340: PPUSH
5341: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_INT 1
5352: PUSH
5353: LD_INT 2
5355: PUSH
5356: LD_INT 3
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 4
5373: PPUSH
5374: CALL_OW 12
5378: ARRAY
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5387: LD_VAR 0 1
5391: PPUSH
5392: LD_INT 2
5394: PPUSH
5395: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_INT 10
5406: PPUSH
5407: CALL_OW 173
// Wait ( 0 0$10 ) ;
5411: LD_INT 350
5413: PPUSH
5414: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5418: LD_INT 35
5420: PPUSH
5421: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5425: LD_VAR 0 1
5429: PPUSH
5430: LD_INT 10
5432: PPUSH
5433: CALL_OW 308
5437: IFFALSE 5418
// RemoveUnit ( veh ) ;
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 64
// end ; end_of_file
5448: PPOPN 1
5450: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5451: LD_INT 0
5453: PPUSH
5454: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5455: LD_ADDR_VAR 0 5
5459: PUSH
5460: LD_INT 22
5462: PUSH
5463: LD_VAR 0 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 69
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 73
5491: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5492: LD_ADDR_VAR 0 4
5496: PUSH
5497: LD_VAR 0 5
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_VAR 0 3
5511: PPUSH
5512: CALL_OW 297
5516: PUSH
5517: LD_INT 15
5519: LESS
5520: PUSH
5521: LD_INT 2
5523: PPUSH
5524: LD_INT 22
5526: PUSH
5527: LD_VAR 0 1
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 70
5540: PUSH
5541: LD_INT 0
5543: GREATER
5544: OR
5545: ST_TO_ADDR
// end ;
5546: LD_VAR 0 4
5550: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5551: LD_INT 0
5553: PPUSH
5554: PPUSH
// area = ListEnvironmentArea ( area ) ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 353
5569: ST_TO_ADDR
// if bulldozer > 0 then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_INT 0
5577: GREATER
5578: IFFALSE 5689
// for i = 1 to area do
5580: LD_ADDR_VAR 0 4
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_VAR 0 2
5594: PUSH
5595: FOR_TO
5596: IFFALSE 5687
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_VAR 0 4
5607: ARRAY
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 4
5622: ARRAY
5623: PUSH
5624: LD_INT 2
5626: ARRAY
5627: PPUSH
5628: CALL_OW 351
5632: IFFALSE 5685
// if not HasTask ( bulldozer ) then
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 314
5643: NOT
5644: IFFALSE 5685
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5646: LD_VAR 0 1
5650: PPUSH
5651: LD_VAR 0 2
5655: PUSH
5656: LD_VAR 0 4
5660: ARRAY
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_VAR 0 2
5670: PUSH
5671: LD_VAR 0 4
5675: ARRAY
5676: PUSH
5677: LD_INT 2
5679: ARRAY
5680: PPUSH
5681: CALL_OW 171
5685: GO 5595
5687: POP
5688: POP
// end ;
5689: LD_VAR 0 3
5693: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
// pom := GetBase ( bdepot ) ;
5699: LD_ADDR_VAR 0 4
5703: PUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 274
5713: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5714: LD_ADDR_VAR 0 5
5718: PUSH
5719: LD_VAR 0 2
5723: PPUSH
5724: LD_VAR 0 1
5728: PPUSH
5729: CALL_OW 248
5733: PPUSH
5734: CALL_OW 450
5738: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5739: LD_VAR 0 4
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 275
5751: PUSH
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: GREATEREQUAL
5761: PUSH
5762: LD_VAR 0 4
5766: PPUSH
5767: LD_INT 3
5769: PPUSH
5770: CALL_OW 275
5774: PUSH
5775: LD_VAR 0 5
5779: PUSH
5780: LD_INT 3
5782: ARRAY
5783: GREATEREQUAL
5784: AND
5785: IFFALSE 5797
// result := true else
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
5795: GO 5805
// result := false ;
5797: LD_ADDR_VAR 0 3
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// end ;
5805: LD_VAR 0 3
5809: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
5814: PPUSH
// pom := GetBase ( bdepot ) ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 274
5829: ST_TO_ADDR
// sor := [ ] ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: EMPTY
5836: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5837: LD_ADDR_VAR 0 4
5841: PUSH
5842: LD_VAR 0 4
5846: PUSH
5847: LD_VAR 0 3
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 275
5859: ADD
5860: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_VAR 0 4
5870: PUSH
5871: LD_VAR 0 3
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: CALL_OW 275
5883: ADD
5884: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_VAR 0 4
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: CALL_OW 275
5907: ADD
5908: ST_TO_ADDR
// result := sor ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_VAR 0 4
5918: ST_TO_ADDR
// end ;
5919: LD_VAR 0 2
5923: RET
// export function Hex ( x , y ) ; begin
5924: LD_INT 0
5926: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5927: LD_VAR 0 1
5931: PPUSH
5932: LD_VAR 0 2
5936: PPUSH
5937: CALL_OW 488
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: CALL_OW 428
5956: PUSH
5957: LD_INT 0
5959: EQUAL
5960: AND
5961: IFFALSE 5973
// result := true else
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 1
5970: ST_TO_ADDR
5971: GO 5981
// result := false ;
5973: LD_ADDR_VAR 0 3
5977: PUSH
5978: LD_INT 0
5980: ST_TO_ADDR
// end ;
5981: LD_VAR 0 3
5985: RET
// export function NeedBuilding ( side , btype ) ; begin
5986: LD_INT 0
5988: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
5989: LD_INT 22
5991: PUSH
5992: LD_VAR 0 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_VAR 0 2
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 3
6015: PUSH
6016: LD_INT 57
6018: PUSH
6019: EMPTY
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PPUSH
6031: CALL_OW 69
6035: PUSH
6036: LD_INT 0
6038: EQUAL
6039: IFFALSE 6051
// result := true else
6041: LD_ADDR_VAR 0 3
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
6049: GO 6059
// result := false ;
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// end ;
6059: LD_VAR 0 3
6063: RET
// export function NeedBase ( side ) ; begin
6064: LD_INT 0
6066: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6067: LD_VAR 0 1
6071: PPUSH
6072: LD_INT 0
6074: PPUSH
6075: CALL 5986 0 2
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL 5986 0 2
6092: AND
6093: IFFALSE 6105
// result := true else
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
6103: GO 6113
// result := false ;
6105: LD_ADDR_VAR 0 2
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// end ;
6113: LD_VAR 0 2
6117: RET
// export function MyBase ( side ) ; begin
6118: LD_INT 0
6120: PPUSH
// if not NeedBase ( side ) then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL 6064 0 1
6130: NOT
6131: IFFALSE 6196
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6133: LD_ADDR_VAR 0 2
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 2
6152: PUSH
6153: LD_INT 30
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: ST_TO_ADDR
6194: GO 6204
// result := false ;
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 2
6208: RET
// export function GetBuilding ( side , btype ) ; begin
6209: LD_INT 0
6211: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6212: LD_INT 22
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 30
6226: PUSH
6227: LD_VAR 0 2
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: LD_INT 0
6247: GREATER
6248: IFFALSE 6290
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6250: LD_ADDR_VAR 0 3
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 30
6269: PUSH
6270: LD_VAR 0 2
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 69
6287: ST_TO_ADDR
6288: GO 6298
// result := false ;
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// end ;
6298: LD_VAR 0 3
6302: RET
// export function GetCrates ( side ) ; begin
6303: LD_INT 0
6305: PPUSH
// result := 0 ;
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// if MyBase ( side ) then
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL 6118 0 1
6323: IFFALSE 6353
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL 6118 0 1
6339: PPUSH
6340: CALL_OW 274
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 275
6352: ST_TO_ADDR
// end ;
6353: LD_VAR 0 2
6357: RET
// export function GetLabs ( side ) ; begin
6358: LD_INT 0
6360: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 30
6383: PUSH
6384: LD_INT 6
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 8
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 30
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: PPUSH
6424: CALL_OW 69
6428: ST_TO_ADDR
// end ;
6429: LD_VAR 0 2
6433: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
6438: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6439: LD_ADDR_VAR 0 3
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: LD_INT 1
6451: PPUSH
6452: CALL_OW 268
6456: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6457: LD_ADDR_VAR 0 4
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 2
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: LD_VAR 0 3
6484: PUSH
6485: LD_VAR 0 4
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// end ;
6494: LD_VAR 0 2
6498: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6499: LD_INT 0
6501: PPUSH
6502: PPUSH
// result := false ;
6503: LD_ADDR_VAR 0 3
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// for i = 1 to tlist do
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_VAR 0 2
6525: PUSH
6526: FOR_TO
6527: IFFALSE 6567
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6529: LD_VAR 0 2
6533: PUSH
6534: LD_VAR 0 4
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 321
6549: PUSH
6550: LD_INT 2
6552: NONEQUAL
6553: IFFALSE 6565
// begin result := true ;
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// break ;
6563: GO 6567
// end ;
6565: GO 6526
6567: POP
6568: POP
// end ;
6569: LD_VAR 0 3
6573: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
// lab := GetLabs ( side ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL 6358 0 1
6598: ST_TO_ADDR
// tmp := 0 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 0
6606: ST_TO_ADDR
// list := [ ] ;
6607: LD_ADDR_VAR 0 8
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6614: LD_ADDR_VAR 0 10
6618: PUSH
6619: LD_INT 35
6621: PUSH
6622: LD_INT 45
6624: PUSH
6625: LD_INT 46
6627: PUSH
6628: LD_INT 47
6630: PUSH
6631: LD_INT 1
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 48
6639: PUSH
6640: LD_INT 49
6642: PUSH
6643: LD_INT 50
6645: PUSH
6646: LD_INT 20
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: ST_TO_ADDR
// for i = 1 to tlist do
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 2
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6729
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_VAR 0 4
6688: ARRAY
6689: PPUSH
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 321
6699: PUSH
6700: LD_INT 2
6702: NONEQUAL
6703: IFFALSE 6727
// list := list ^ tlist [ i ] ;
6705: LD_ADDR_VAR 0 8
6709: PUSH
6710: LD_VAR 0 8
6714: PUSH
6715: LD_VAR 0 2
6719: PUSH
6720: LD_VAR 0 4
6724: ARRAY
6725: ADD
6726: ST_TO_ADDR
6727: GO 6676
6729: POP
6730: POP
// if list then
6731: LD_VAR 0 8
6735: IFFALSE 6900
// begin for i = 1 to lab do
6737: LD_ADDR_VAR 0 4
6741: PUSH
6742: DOUBLE
6743: LD_INT 1
6745: DEC
6746: ST_TO_ADDR
6747: LD_VAR 0 5
6751: PUSH
6752: FOR_TO
6753: IFFALSE 6823
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6755: LD_VAR 0 8
6759: PUSH
6760: LD_INT 1
6762: ARRAY
6763: PUSH
6764: LD_VAR 0 10
6768: IN
6769: PUSH
6770: LD_VAR 0 8
6774: PUSH
6775: LD_INT 1
6777: ARRAY
6778: PPUSH
6779: CALL_OW 481
6783: PUSH
6784: LD_VAR 0 5
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: PPUSH
6795: CALL 6434 0 1
6799: IN
6800: OR
6801: IFFALSE 6821
// begin mylab := lab [ i ] ;
6803: LD_ADDR_VAR 0 9
6807: PUSH
6808: LD_VAR 0 5
6812: PUSH
6813: LD_VAR 0 4
6817: ARRAY
6818: ST_TO_ADDR
// break ;
6819: GO 6823
// end ;
6821: GO 6752
6823: POP
6824: POP
// if mylab then
6825: LD_VAR 0 9
6829: IFFALSE 6890
// begin if BuildingStatus ( mylab ) = bs_idle then
6831: LD_VAR 0 9
6835: PPUSH
6836: CALL_OW 461
6840: PUSH
6841: LD_INT 2
6843: EQUAL
6844: IFFALSE 6888
// for i = 1 to list do
6846: LD_ADDR_VAR 0 4
6850: PUSH
6851: DOUBLE
6852: LD_INT 1
6854: DEC
6855: ST_TO_ADDR
6856: LD_VAR 0 8
6860: PUSH
6861: FOR_TO
6862: IFFALSE 6886
// AddComResearch ( mylab , list [ i ] ) ;
6864: LD_VAR 0 9
6868: PPUSH
6869: LD_VAR 0 8
6873: PUSH
6874: LD_VAR 0 4
6878: ARRAY
6879: PPUSH
6880: CALL_OW 184
6884: GO 6861
6886: POP
6887: POP
// end else
6888: GO 6898
// result := false ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// end else
6898: GO 6908
// result := false ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// end ;
6908: LD_VAR 0 3
6912: RET
// export function GetTowers ( side ) ; begin
6913: LD_INT 0
6915: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6916: LD_ADDR_VAR 0 2
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_VAR 0 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 32
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 30
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 2
6974: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
// if Hex ( x , y ) then
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_VAR 0 3
6988: PPUSH
6989: CALL 5924 0 2
6993: IFFALSE 7068
// for i = 1 to plist do
6995: LD_ADDR_VAR 0 6
6999: PUSH
7000: DOUBLE
7001: LD_INT 1
7003: DEC
7004: ST_TO_ADDR
7005: LD_VAR 0 1
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7066
// if not HasTask ( plist [ i ] ) then
7013: LD_VAR 0 1
7017: PUSH
7018: LD_VAR 0 6
7022: ARRAY
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: IFFALSE 7064
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: LD_INT 0
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: LD_VAR 0 4
7059: PPUSH
7060: CALL_OW 145
7064: GO 7010
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 5
7072: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 266
7086: PUSH
7087: LD_INT 0
7089: EQUAL
7090: PUSH
7091: LD_VAR 0 2
7095: PPUSH
7096: LD_INT 1
7098: PPUSH
7099: CALL 5694 0 2
7103: AND
7104: PUSH
7105: LD_VAR 0 1
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: CALL_OW 255
7118: PPUSH
7119: CALL_OW 345
7123: NOT
7124: AND
7125: IFFALSE 7221
// begin ComUpgrade ( bident ) ;
7127: LD_VAR 0 2
7131: PPUSH
7132: CALL_OW 146
// for i = 1 to plist do
7136: LD_ADDR_VAR 0 4
7140: PUSH
7141: DOUBLE
7142: LD_INT 1
7144: DEC
7145: ST_TO_ADDR
7146: LD_VAR 0 1
7150: PUSH
7151: FOR_TO
7152: IFFALSE 7209
// if not HasTask ( plist [ i ] ) then
7154: LD_VAR 0 1
7158: PUSH
7159: LD_VAR 0 4
7163: ARRAY
7164: PPUSH
7165: CALL_OW 314
7169: NOT
7170: IFFALSE 7207
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: CALL_OW 250
7192: PPUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 251
7202: PPUSH
7203: CALL_OW 111
7207: GO 7151
7209: POP
7210: POP
// result := true ;
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// end else
7219: GO 7229
// result := false ;
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// end ;
7229: LD_VAR 0 3
7233: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7238: LD_VAR 0 1
7242: PUSH
7243: LD_INT 1
7245: ARRAY
7246: PPUSH
7247: CALL_OW 255
7251: PPUSH
7252: CALL 6303 0 1
7256: PUSH
7257: LD_INT 20
7259: GREATEREQUAL
7260: PUSH
7261: LD_VAR 0 2
7265: PPUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL 5924 0 2
7275: AND
7276: IFFALSE 7361
// begin for i = 1 to plist do
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: DOUBLE
7284: LD_INT 1
7286: DEC
7287: ST_TO_ADDR
7288: LD_VAR 0 1
7292: PUSH
7293: FOR_TO
7294: IFFALSE 7349
// if not HasTask ( plist [ i ] ) then
7296: LD_VAR 0 1
7300: PUSH
7301: LD_VAR 0 6
7305: ARRAY
7306: PPUSH
7307: CALL_OW 314
7311: NOT
7312: IFFALSE 7347
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: LD_VAR 0 3
7337: PPUSH
7338: LD_VAR 0 4
7342: PPUSH
7343: CALL_OW 145
7347: GO 7293
7349: POP
7350: POP
// result := true ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// end else
7359: GO 7369
// result := false ;
7361: LD_ADDR_VAR 0 5
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// end ;
7369: LD_VAR 0 5
7373: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7374: LD_INT 0
7376: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7377: LD_VAR 0 1
7381: PPUSH
7382: LD_INT 1
7384: PPUSH
7385: CALL_OW 268
7389: PUSH
7390: LD_INT 9
7392: EQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: CALL_OW 268
7406: PUSH
7407: LD_INT 9
7409: EQUAL
7410: AND
7411: IFFALSE 7508
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_VAR 0 2
7422: PPUSH
7423: CALL 5694 0 2
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: CALL 5694 0 2
7442: AND
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 461
7453: PUSH
7454: LD_INT 2
7456: EQUAL
7457: AND
7458: IFFALSE 7498
// begin ComUpgradeLab ( lab , bkind1 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_VAR 0 2
7469: PPUSH
7470: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: LD_VAR 0 3
7483: PPUSH
7484: CALL_OW 207
// result := true ;
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// end else
7496: GO 7506
// result := false ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 0
7505: ST_TO_ADDR
// end else
7506: GO 7516
// result := false ;
7508: LD_ADDR_VAR 0 4
7512: PUSH
7513: LD_INT 0
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 4
7520: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7521: LD_INT 0
7523: PPUSH
7524: PPUSH
7525: PPUSH
7526: PPUSH
7527: PPUSH
// p := 1 ;
7528: LD_ADDR_VAR 0 6
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 4
7553: DIVREAL
7554: PUSH
7555: FOR_TO
7556: IFFALSE 7805
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7558: LD_VAR 0 2
7562: PUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 1
7570: PLUS
7571: ARRAY
7572: PPUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 6
7582: PUSH
7583: LD_INT 2
7585: PLUS
7586: ARRAY
7587: PPUSH
7588: CALL_OW 428
7592: PUSH
7593: LD_INT 0
7595: EQUAL
7596: PUSH
7597: LD_VAR 0 2
7601: PUSH
7602: LD_VAR 0 6
7606: PUSH
7607: LD_INT 1
7609: PLUS
7610: ARRAY
7611: PPUSH
7612: LD_VAR 0 2
7616: PUSH
7617: LD_VAR 0 6
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: ARRAY
7626: PPUSH
7627: CALL 5924 0 2
7631: AND
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PPUSH
7642: CALL_OW 255
7646: PPUSH
7647: CALL 6303 0 1
7651: PUSH
7652: LD_INT 20
7654: GREATEREQUAL
7655: AND
7656: IFFALSE 7773
// begin for c = 1 to plist do
7658: LD_ADDR_VAR 0 7
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 1
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7767
// if not HasTask ( plist [ c ] ) then
7676: LD_VAR 0 1
7680: PUSH
7681: LD_VAR 0 7
7685: ARRAY
7686: PPUSH
7687: CALL_OW 314
7691: NOT
7692: IFFALSE 7765
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: LD_VAR 0 2
7709: PUSH
7710: LD_VAR 0 6
7714: ARRAY
7715: PPUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 1
7728: PLUS
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 2
7735: PUSH
7736: LD_VAR 0 6
7740: PUSH
7741: LD_INT 2
7743: PLUS
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 6
7755: PUSH
7756: LD_INT 3
7758: PLUS
7759: ARRAY
7760: PPUSH
7761: CALL_OW 145
7765: GO 7673
7767: POP
7768: POP
// break ;
7769: GO 7805
// end else
7771: GO 7803
// if ( p + 4 < tlist ) then
7773: LD_VAR 0 6
7777: PUSH
7778: LD_INT 4
7780: PLUS
7781: PUSH
7782: LD_VAR 0 2
7786: LESS
7787: IFFALSE 7803
// p := p + 4 ;
7789: LD_ADDR_VAR 0 6
7793: PUSH
7794: LD_VAR 0 6
7798: PUSH
7799: LD_INT 4
7801: PLUS
7802: ST_TO_ADDR
// end ;
7803: GO 7555
7805: POP
7806: POP
// end ;
7807: LD_VAR 0 3
7811: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
// tmp := GetTowers ( side ) ;
7818: LD_ADDR_VAR 0 5
7822: PUSH
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL 6913 0 1
7832: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7833: LD_ADDR_VAR 0 6
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 3
7845: PPUSH
7846: CALL 6209 0 2
7850: PUSH
7851: LD_INT 1
7853: ARRAY
7854: ST_TO_ADDR
// if fac then
7855: LD_VAR 0 6
7859: IFFALSE 7955
// for i = 1 to tmp do
7861: LD_ADDR_VAR 0 4
7865: PUSH
7866: DOUBLE
7867: LD_INT 1
7869: DEC
7870: ST_TO_ADDR
7871: LD_VAR 0 5
7875: PUSH
7876: FOR_TO
7877: IFFALSE 7953
// if GetBWeapon ( tmp [ i ] ) = 0 then
7879: LD_VAR 0 5
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PPUSH
7890: CALL_OW 269
7894: PUSH
7895: LD_INT 0
7897: EQUAL
7898: IFFALSE 7951
// begin if BuildingStatus ( fac ) = bs_idle then
7900: LD_VAR 0 6
7904: PPUSH
7905: CALL_OW 461
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: IFFALSE 7949
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7915: LD_VAR 0 5
7919: PUSH
7920: LD_VAR 0 4
7924: ARRAY
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: PPUSH
7934: LD_VAR 0 2
7938: PPUSH
7939: CALL_OW 12
7943: ARRAY
7944: PPUSH
7945: CALL_OW 148
// break ;
7949: GO 7953
// end ;
7951: GO 7876
7953: POP
7954: POP
// end ;
7955: LD_VAR 0 3
7959: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7960: LD_INT 0
7962: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7963: LD_INT 22
7965: PUSH
7966: LD_VAR 0 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 34
7977: PUSH
7978: LD_VAR 0 3
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 31
7989: PUSH
7990: LD_VAR 0 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: PPUSH
8007: CALL_OW 69
8011: IFFALSE 8069
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_INT 22
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 34
8032: PUSH
8033: LD_VAR 0 3
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 31
8044: PUSH
8045: LD_VAR 0 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: ST_TO_ADDR
8067: GO 8077
// result := false ;
8069: LD_ADDR_VAR 0 4
8073: PUSH
8074: LD_INT 0
8076: ST_TO_ADDR
// end ;
8077: LD_VAR 0 4
8081: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8082: LD_INT 0
8084: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: LD_VAR 0 5
8109: PPUSH
8110: CALL_OW 448
8114: PUSH
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_VAR 0 3
8124: PPUSH
8125: LD_VAR 0 4
8129: PPUSH
8130: LD_VAR 0 5
8134: PPUSH
8135: CALL_OW 449
8139: PUSH
8140: LD_INT 1
8142: ARRAY
8143: PUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL 5810 0 1
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: LESSEQUAL
8158: AND
8159: PUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: LD_VAR 0 3
8169: PPUSH
8170: LD_VAR 0 4
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 449
8184: PUSH
8185: LD_INT 2
8187: ARRAY
8188: PUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL 5810 0 1
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: LESSEQUAL
8203: AND
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_VAR 0 3
8214: PPUSH
8215: LD_VAR 0 4
8219: PPUSH
8220: LD_VAR 0 5
8224: PPUSH
8225: CALL_OW 449
8229: PUSH
8230: LD_INT 3
8232: ARRAY
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL 5810 0 1
8243: PUSH
8244: LD_INT 3
8246: ARRAY
8247: LESSEQUAL
8248: AND
8249: IFFALSE 8296
// begin if debug then
8251: LD_EXP 1
8255: IFFALSE 8265
// display_strings := Factory work! ;
8257: LD_ADDR_OWVAR 47
8261: PUSH
8262: LD_STRING Factory work!
8264: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_VAR 0 5
8289: PPUSH
8290: CALL_OW 125
// end else
8294: GO 8304
// result := false ;
8296: LD_ADDR_VAR 0 6
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// end ;
8304: LD_VAR 0 6
8308: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8309: LD_INT 0
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8315: LD_ADDR_VAR 0 6
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 30
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PPUSH
8348: CALL_OW 69
8352: ST_TO_ADDR
// tmp := [ ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for i = 1 to filter do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_VAR 0 6
8374: PUSH
8375: FOR_TO
8376: IFFALSE 8464
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_VAR 0 5
8387: PUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_VAR 0 4
8397: ARRAY
8398: PPUSH
8399: CALL_OW 266
8403: PUSH
8404: LD_VAR 0 6
8408: PUSH
8409: LD_VAR 0 4
8413: ARRAY
8414: PPUSH
8415: CALL_OW 250
8419: PUSH
8420: LD_VAR 0 6
8424: PUSH
8425: LD_VAR 0 4
8429: ARRAY
8430: PPUSH
8431: CALL_OW 251
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_VAR 0 4
8445: ARRAY
8446: PPUSH
8447: CALL_OW 254
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: ADD
8461: ST_TO_ADDR
// end ;
8462: GO 8375
8464: POP
8465: POP
// result := tmp ;
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: LD_VAR 0 5
8475: ST_TO_ADDR
// end ;
8476: LD_VAR 0 3
8480: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8481: LD_INT 0
8483: PPUSH
8484: PPUSH
8485: PPUSH
// for i = 1 to list do
8486: LD_ADDR_VAR 0 4
8490: PUSH
8491: DOUBLE
8492: LD_INT 1
8494: DEC
8495: ST_TO_ADDR
8496: LD_VAR 0 2
8500: PUSH
8501: FOR_TO
8502: IFFALSE 9057
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8504: LD_VAR 0 2
8508: PUSH
8509: LD_VAR 0 4
8513: ARRAY
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 2
8523: PUSH
8524: LD_VAR 0 4
8528: ARRAY
8529: PUSH
8530: LD_INT 2
8532: ARRAY
8533: PPUSH
8534: CALL_OW 428
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: IFFALSE 8828
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8544: LD_VAR 0 2
8548: PUSH
8549: LD_VAR 0 4
8553: ARRAY
8554: PUSH
8555: LD_INT 1
8557: ARRAY
8558: PPUSH
8559: LD_VAR 0 2
8563: PUSH
8564: LD_VAR 0 4
8568: ARRAY
8569: PUSH
8570: LD_INT 2
8572: ARRAY
8573: PPUSH
8574: CALL_OW 428
8578: PPUSH
8579: CALL_OW 248
8583: PUSH
8584: LD_INT 3
8586: EQUAL
8587: IFFALSE 8713
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_VAR 0 4
8598: ARRAY
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_VAR 0 4
8613: ARRAY
8614: PUSH
8615: LD_INT 2
8617: ARRAY
8618: PPUSH
8619: CALL_OW 428
8623: PPUSH
8624: CALL_OW 274
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: CALL_OW 275
8636: PUSH
8637: LD_INT 15
8639: GREATEREQUAL
8640: IFFALSE 8711
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8642: LD_VAR 0 2
8646: PUSH
8647: LD_VAR 0 4
8651: ARRAY
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 2
8661: PUSH
8662: LD_VAR 0 4
8666: ARRAY
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: CALL_OW 428
8676: PPUSH
8677: LD_VAR 0 2
8681: PUSH
8682: LD_VAR 0 4
8686: ARRAY
8687: PUSH
8688: LD_INT 4
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 2
8696: PUSH
8697: LD_VAR 0 4
8701: ARRAY
8702: PUSH
8703: LD_INT 5
8705: ARRAY
8706: PPUSH
8707: CALL 7374 0 3
// end else
8711: GO 8782
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8713: LD_VAR 0 2
8717: PUSH
8718: LD_VAR 0 4
8722: ARRAY
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: LD_VAR 0 2
8732: PUSH
8733: LD_VAR 0 4
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: PPUSH
8743: CALL_OW 428
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 4
8761: ARRAY
8762: PPUSH
8763: LD_VAR 0 2
8767: PUSH
8768: LD_VAR 0 4
8772: ARRAY
8773: PUSH
8774: LD_INT 5
8776: ARRAY
8777: PPUSH
8778: CALL 7374 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8782: LD_VAR 0 1
8786: PPUSH
8787: LD_VAR 0 2
8791: PUSH
8792: LD_VAR 0 4
8796: ARRAY
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_VAR 0 4
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: PPUSH
8817: CALL_OW 428
8821: PPUSH
8822: CALL 10326 0 2
// end else
8826: GO 9055
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8828: LD_VAR 0 1
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PPUSH
8837: CALL_OW 255
8841: PPUSH
8842: CALL 6118 0 1
8846: PPUSH
8847: LD_INT 6
8849: PPUSH
8850: CALL 5694 0 2
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: CALL_OW 255
8868: PPUSH
8869: CALL 6118 0 1
8873: PPUSH
8874: LD_VAR 0 2
8878: PUSH
8879: LD_VAR 0 4
8883: ARRAY
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PPUSH
8889: CALL 5694 0 2
8893: AND
8894: PUSH
8895: LD_VAR 0 1
8899: PUSH
8900: LD_INT 1
8902: ARRAY
8903: PPUSH
8904: CALL_OW 255
8908: PPUSH
8909: CALL 6118 0 1
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: ARRAY
8924: PUSH
8925: LD_INT 5
8927: ARRAY
8928: PPUSH
8929: CALL 5694 0 2
8933: AND
8934: IFFALSE 9055
// for p = 1 to plist do
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_VAR 0 1
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9053
// if IsInUnit ( plist [ p ] ) then
8954: LD_VAR 0 1
8958: PUSH
8959: LD_VAR 0 5
8963: ARRAY
8964: PPUSH
8965: CALL_OW 310
8969: IFFALSE 8988
// ComExitBuilding ( plist [ p ] ) else
8971: LD_VAR 0 1
8975: PUSH
8976: LD_VAR 0 5
8980: ARRAY
8981: PPUSH
8982: CALL_OW 122
8986: GO 9051
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
8988: LD_VAR 0 1
8992: PUSH
8993: LD_VAR 0 5
8997: ARRAY
8998: PPUSH
8999: LD_INT 6
9001: PPUSH
9002: LD_VAR 0 2
9006: PUSH
9007: LD_VAR 0 4
9011: ARRAY
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: LD_VAR 0 2
9021: PUSH
9022: LD_VAR 0 4
9026: ARRAY
9027: PUSH
9028: LD_INT 2
9030: ARRAY
9031: PPUSH
9032: LD_VAR 0 2
9036: PUSH
9037: LD_VAR 0 4
9041: ARRAY
9042: PUSH
9043: LD_INT 3
9045: ARRAY
9046: PPUSH
9047: CALL_OW 145
9051: GO 8951
9053: POP
9054: POP
// end ;
9055: GO 8501
9057: POP
9058: POP
// end ;
9059: LD_VAR 0 3
9063: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9064: LD_INT 0
9066: PPUSH
// if IsInUnit ( sci ) then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 310
9076: IFFALSE 9089
// ComExitBuilding ( sci ) else
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 122
9087: GO 9120
// if not HasTask ( sci ) then
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 314
9098: NOT
9099: IFFALSE 9120
// begin ComMoveXY ( sci , x , y ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: CALL_OW 111
// end ; end ;
9120: LD_VAR 0 4
9124: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
9130: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_INT 22
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 21
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: PUSH
9167: LD_VAR 0 3
9171: DIFF
9172: ST_TO_ADDR
// tmp := tag_list ;
9173: LD_ADDR_VAR 0 7
9177: PUSH
9178: LD_VAR 0 2
9182: ST_TO_ADDR
// for i = 1 to filter do
9183: LD_ADDR_VAR 0 5
9187: PUSH
9188: DOUBLE
9189: LD_INT 1
9191: DEC
9192: ST_TO_ADDR
9193: LD_VAR 0 6
9197: PUSH
9198: FOR_TO
9199: IFFALSE 9468
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9201: LD_VAR 0 6
9205: PUSH
9206: LD_VAR 0 5
9210: ARRAY
9211: PPUSH
9212: CALL_OW 256
9216: PUSH
9217: LD_INT 1000
9219: EQUAL
9220: PUSH
9221: LD_VAR 0 6
9225: PUSH
9226: LD_VAR 0 5
9230: ARRAY
9231: PPUSH
9232: CALL_OW 110
9236: PUSH
9237: LD_INT 100
9239: GREATEREQUAL
9240: AND
9241: IFFALSE 9283
// begin SetTag ( filter [ i ] , 0 ) ;
9243: LD_VAR 0 6
9247: PUSH
9248: LD_VAR 0 5
9252: ARRAY
9253: PPUSH
9254: LD_INT 0
9256: PPUSH
9257: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9261: LD_ADDR_VAR 0 7
9265: PUSH
9266: LD_VAR 0 7
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_VAR 0 5
9280: ARRAY
9281: DIFF
9282: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9283: LD_VAR 0 6
9287: PUSH
9288: LD_VAR 0 5
9292: ARRAY
9293: PPUSH
9294: CALL_OW 256
9298: PUSH
9299: LD_INT 1000
9301: LESS
9302: IFFALSE 9466
// begin if not filter [ i ] in tmp then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_VAR 0 5
9313: ARRAY
9314: PUSH
9315: LD_VAR 0 7
9319: IN
9320: NOT
9321: IFFALSE 9345
// tmp := tmp ^ filter [ i ] ;
9323: LD_ADDR_VAR 0 7
9327: PUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_VAR 0 6
9337: PUSH
9338: LD_VAR 0 5
9342: ARRAY
9343: ADD
9344: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9345: LD_VAR 0 6
9349: PUSH
9350: LD_VAR 0 5
9354: ARRAY
9355: PPUSH
9356: CALL_OW 256
9360: PUSH
9361: LD_INT 250
9363: LESS
9364: IFFALSE 9386
// SetTag ( filter [ i ] , 100 ) else
9366: LD_VAR 0 6
9370: PUSH
9371: LD_VAR 0 5
9375: ARRAY
9376: PPUSH
9377: LD_INT 100
9379: PPUSH
9380: CALL_OW 109
9384: GO 9466
// if GetLives ( filter [ i ] ) < 500 then
9386: LD_VAR 0 6
9390: PUSH
9391: LD_VAR 0 5
9395: ARRAY
9396: PPUSH
9397: CALL_OW 256
9401: PUSH
9402: LD_INT 500
9404: LESS
9405: IFFALSE 9427
// SetTag ( filter [ i ] , 101 ) else
9407: LD_VAR 0 6
9411: PUSH
9412: LD_VAR 0 5
9416: ARRAY
9417: PPUSH
9418: LD_INT 101
9420: PPUSH
9421: CALL_OW 109
9425: GO 9466
// if GetLives ( filter [ i ] ) < 1000 then
9427: LD_VAR 0 6
9431: PUSH
9432: LD_VAR 0 5
9436: ARRAY
9437: PPUSH
9438: CALL_OW 256
9442: PUSH
9443: LD_INT 1000
9445: LESS
9446: IFFALSE 9466
// SetTag ( filter [ i ] , 102 ) ;
9448: LD_VAR 0 6
9452: PUSH
9453: LD_VAR 0 5
9457: ARRAY
9458: PPUSH
9459: LD_INT 102
9461: PPUSH
9462: CALL_OW 109
// end ; end ;
9466: GO 9198
9468: POP
9469: POP
// result := tmp ;
9470: LD_ADDR_VAR 0 4
9474: PUSH
9475: LD_VAR 0 7
9479: ST_TO_ADDR
// end ;
9480: LD_VAR 0 4
9484: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9492: LD_ADDR_VAR 0 7
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 3
9545: PPUSH
9546: CALL_OW 12
9550: ST_TO_ADDR
// if filter > 0 then
9551: LD_VAR 0 7
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 9761
// for i = 1 to list do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_VAR 0 1
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9759
// for ta in filter do
9579: LD_ADDR_VAR 0 4
9583: PUSH
9584: LD_VAR 0 7
9588: PUSH
9589: FOR_IN
9590: IFFALSE 9755
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9592: LD_VAR 0 1
9596: PUSH
9597: LD_VAR 0 6
9601: ARRAY
9602: PPUSH
9603: LD_VAR 0 4
9607: PPUSH
9608: CALL_OW 296
9612: PUSH
9613: LD_INT 13
9615: LESSEQUAL
9616: IFFALSE 9753
// begin case c of 1 :
9618: LD_VAR 0 5
9622: PUSH
9623: LD_INT 1
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9669
9631: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9632: LD_VAR 0 1
9636: PUSH
9637: LD_VAR 0 6
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 4
9647: PPUSH
9648: CALL_OW 250
9652: PPUSH
9653: LD_VAR 0 4
9657: PPUSH
9658: CALL_OW 251
9662: PPUSH
9663: CALL_OW 154
9667: GO 9753
9669: LD_INT 2
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9741
9677: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9678: LD_VAR 0 1
9682: PUSH
9683: LD_VAR 0 6
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 4
9693: PPUSH
9694: CALL_OW 250
9698: PUSH
9699: LD_INT 1
9701: NEG
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 12
9710: PLUS
9711: PPUSH
9712: LD_VAR 0 4
9716: PPUSH
9717: CALL_OW 251
9721: PUSH
9722: LD_INT 1
9724: NEG
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 12
9733: PLUS
9734: PPUSH
9735: CALL_OW 153
9739: GO 9753
9741: LD_INT 3
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9752
9749: POP
// ; end ;
9750: GO 9753
9752: POP
// end ; end ;
9753: GO 9589
9755: POP
9756: POP
9757: GO 9576
9759: POP
9760: POP
// end ;
9761: LD_VAR 0 3
9765: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9766: LD_INT 0
9768: PPUSH
9769: PPUSH
// for i = 1 to plist do
9770: LD_ADDR_VAR 0 3
9774: PUSH
9775: DOUBLE
9776: LD_INT 1
9778: DEC
9779: ST_TO_ADDR
9780: LD_VAR 0 1
9784: PUSH
9785: FOR_TO
9786: IFFALSE 9988
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9788: LD_VAR 0 1
9792: PUSH
9793: LD_VAR 0 3
9797: ARRAY
9798: PPUSH
9799: CALL_OW 310
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: PPUSH
9817: CALL_OW 69
9821: IN
9822: NOT
9823: IFFALSE 9968
// begin if IsInUnit ( plist [ i ] ) then
9825: LD_VAR 0 1
9829: PUSH
9830: LD_VAR 0 3
9834: ARRAY
9835: PPUSH
9836: CALL_OW 310
9840: IFFALSE 9859
// ComExitBuilding ( plist [ i ] ) else
9842: LD_VAR 0 1
9846: PUSH
9847: LD_VAR 0 3
9851: ARRAY
9852: PPUSH
9853: CALL_OW 122
9857: GO 9966
// if not HasTask ( plist [ i ] ) then
9859: LD_VAR 0 1
9863: PUSH
9864: LD_VAR 0 3
9868: ARRAY
9869: PPUSH
9870: CALL_OW 314
9874: NOT
9875: IFFALSE 9966
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: CALL_OW 255
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 30
9911: PUSH
9912: LD_INT 5
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: PPUSH
9928: LD_VAR 0 1
9932: PUSH
9933: LD_VAR 0 3
9937: ARRAY
9938: PPUSH
9939: CALL_OW 74
9943: PPUSH
9944: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9948: LD_VAR 0 1
9952: PUSH
9953: LD_VAR 0 3
9957: ARRAY
9958: PPUSH
9959: LD_INT 9
9961: PPUSH
9962: CALL_OW 183
// end ; end else
9966: GO 9986
// ComChangeProfession ( plist [ i ] , 9 ) ;
9968: LD_VAR 0 1
9972: PUSH
9973: LD_VAR 0 3
9977: ARRAY
9978: PPUSH
9979: LD_INT 9
9981: PPUSH
9982: CALL_OW 123
9986: GO 9785
9988: POP
9989: POP
// end ;
9990: LD_VAR 0 2
9994: RET
// export function GetHuman ( side ) ; begin
9995: LD_INT 0
9997: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_VAR 0 1
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 21
10017: PUSH
10018: LD_INT 1
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 25
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 25
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: ST_TO_ADDR
// end ;
10085: LD_VAR 0 2
10089: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
// uc_side := 0 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_nation := 0 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: DOUBLE
10117: LD_INT 1
10119: DEC
10120: ST_TO_ADDR
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: LD_INT 6
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: LD_OWVAR 67
10139: ARRAY
10140: PUSH
10141: FOR_TO
10142: IFFALSE 10213
// begin hc_class = class_tiger ;
10144: LD_ADDR_OWVAR 28
10148: PUSH
10149: LD_INT 14
10151: ST_TO_ADDR
// hc_gallery = sandnature ;
10152: LD_ADDR_OWVAR 33
10156: PUSH
10157: LD_STRING sandnature
10159: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10160: LD_ADDR_OWVAR 35
10164: PUSH
10165: LD_INT 0
10167: PPUSH
10168: LD_INT 50
10170: PPUSH
10171: CALL_OW 12
10175: ST_TO_ADDR
// hc_face_number = 3 ;
10176: LD_ADDR_OWVAR 34
10180: PUSH
10181: LD_INT 3
10183: ST_TO_ADDR
// tiger := CreateHuman ;
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: CALL_OW 44
10193: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: LD_INT 0
10206: PPUSH
10207: CALL_OW 49
// end ;
10211: GO 10141
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10220: LD_INT 0
10222: PPUSH
10223: PPUSH
10224: PPUSH
// uc_side := 0 ;
10225: LD_ADDR_OWVAR 20
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// uc_nation := 0 ;
10233: LD_ADDR_OWVAR 21
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// for i = 1 to 8 do
10241: LD_ADDR_VAR 0 4
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_INT 8
10253: PUSH
10254: FOR_TO
10255: IFFALSE 10319
// begin hc_class = class_apeman ;
10257: LD_ADDR_OWVAR 28
10261: PUSH
10262: LD_INT 12
10264: ST_TO_ADDR
// hc_gallery =  ;
10265: LD_ADDR_OWVAR 33
10269: PUSH
10270: LD_STRING 
10272: ST_TO_ADDR
// hc_agressivity = Rand ( - 2 , 2 ) ;
10273: LD_ADDR_OWVAR 35
10277: PUSH
10278: LD_INT 2
10280: NEG
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: CALL_OW 12
10289: ST_TO_ADDR
// ape := CreateHuman ;
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: CALL_OW 44
10299: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// end ;
10317: GO 10254
10319: POP
10320: POP
// end ;
10321: LD_VAR 0 2
10325: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// if BuildingStatus ( b ) = bs_build then
10330: LD_VAR 0 2
10334: PPUSH
10335: CALL_OW 461
10339: PUSH
10340: LD_INT 1
10342: EQUAL
10343: IFFALSE 10529
// for i = 1 to plist do
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: DOUBLE
10351: LD_INT 1
10353: DEC
10354: ST_TO_ADDR
10355: LD_VAR 0 1
10359: PUSH
10360: FOR_TO
10361: IFFALSE 10527
// if IsInUnit ( plist [ i ] ) then
10363: LD_VAR 0 1
10367: PUSH
10368: LD_VAR 0 4
10372: ARRAY
10373: PPUSH
10374: CALL_OW 310
10378: IFFALSE 10461
// begin ComExitBuilding ( plist [ i ] ) ;
10380: LD_VAR 0 1
10384: PUSH
10385: LD_VAR 0 4
10389: ARRAY
10390: PPUSH
10391: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10395: LD_VAR 0 1
10399: PUSH
10400: LD_VAR 0 4
10404: ARRAY
10405: PPUSH
10406: LD_STRING h
10408: PUSH
10409: LD_VAR 0 2
10413: PPUSH
10414: CALL_OW 250
10418: PUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 251
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: PPUSH
10455: CALL_OW 447
// end else
10459: GO 10525
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10461: LD_VAR 0 1
10465: PUSH
10466: LD_VAR 0 4
10470: ARRAY
10471: PPUSH
10472: LD_STRING h
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 251
10494: PUSH
10495: LD_VAR 0 2
10499: PUSH
10500: LD_INT 0
10502: PUSH
10503: LD_INT 0
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: PPUSH
10521: CALL_OW 446
10525: GO 10360
10527: POP
10528: POP
// end ;
10529: LD_VAR 0 3
10533: RET
// export function WantRepair ( eng ) ; begin
10534: LD_INT 0
10536: PPUSH
// if GetTaskList ( eng ) > 0 then
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 437
10546: PUSH
10547: LD_INT 0
10549: GREATER
10550: IFFALSE 10595
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 437
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PUSH
10566: LD_INT 1
10568: ARRAY
10569: PUSH
10570: LD_STRING o
10572: EQUAL
10573: IFFALSE 10585
// result := true else
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
10583: GO 10593
// result := false ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 0
10592: ST_TO_ADDR
// end else
10593: GO 10603
// result := false ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// end ;
10603: LD_VAR 0 2
10607: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// if btype = - 1 then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: NEG
10622: EQUAL
10623: IFFALSE 10663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10625: LD_ADDR_VAR 0 5
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: ST_TO_ADDR
10661: GO 10701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10663: LD_ADDR_VAR 0 5
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_VAR 0 2
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// list := [ ] ;
10701: LD_ADDR_VAR 0 6
10705: PUSH
10706: EMPTY
10707: ST_TO_ADDR
// for i = 1 to tmp do
10708: LD_ADDR_VAR 0 4
10712: PUSH
10713: DOUBLE
10714: LD_INT 1
10716: DEC
10717: ST_TO_ADDR
10718: LD_VAR 0 5
10722: PUSH
10723: FOR_TO
10724: IFFALSE 10812
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10726: LD_ADDR_VAR 0 6
10730: PUSH
10731: LD_VAR 0 6
10735: PUSH
10736: LD_VAR 0 5
10740: PUSH
10741: LD_VAR 0 4
10745: ARRAY
10746: PPUSH
10747: CALL_OW 266
10751: PUSH
10752: LD_VAR 0 5
10756: PUSH
10757: LD_VAR 0 4
10761: ARRAY
10762: PPUSH
10763: CALL_OW 250
10767: PUSH
10768: LD_VAR 0 5
10772: PUSH
10773: LD_VAR 0 4
10777: ARRAY
10778: PPUSH
10779: CALL_OW 251
10783: PUSH
10784: LD_VAR 0 5
10788: PUSH
10789: LD_VAR 0 4
10793: ARRAY
10794: PPUSH
10795: CALL_OW 254
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: ADD
10809: ST_TO_ADDR
10810: GO 10723
10812: POP
10813: POP
// result = list ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_VAR 0 6
10823: ST_TO_ADDR
// end ;
10824: LD_VAR 0 3
10828: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 81
10842: PUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 255
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PPUSH
10862: LD_VAR 0 1
10866: PPUSH
10867: CALL_OW 74
10871: PPUSH
10872: CALL_OW 296
10876: PUSH
10877: LD_INT 18
10879: LESS
10880: IFFALSE 10925
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 81
10889: PUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 255
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 69
10908: PPUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: CALL_OW 74
10918: PPUSH
10919: CALL_OW 115
10923: GO 10944
// ComMoveXY ( behemoth , x , y ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_VAR 0 4
10934: PPUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: CALL_OW 111
// if time_lapsers_list > 0 then
10944: LD_VAR 0 2
10948: PUSH
10949: LD_INT 0
10951: GREATER
10952: IFFALSE 11142
// begin for i = 1 to time_lapsers_list do
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: DOUBLE
10960: LD_INT 1
10962: DEC
10963: ST_TO_ADDR
10964: LD_VAR 0 2
10968: PUSH
10969: FOR_TO
10970: IFFALSE 11140
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10972: LD_VAR 0 2
10976: PUSH
10977: LD_VAR 0 7
10981: ARRAY
10982: PPUSH
10983: CALL_OW 256
10987: PUSH
10988: LD_INT 250
10990: GREATEREQUAL
10991: PUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 7
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 296
11012: PUSH
11013: LD_INT 9
11015: GREATER
11016: AND
11017: IFFALSE 11054
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 7
11028: ARRAY
11029: PPUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 250
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 251
11049: PPUSH
11050: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11054: LD_VAR 0 2
11058: PUSH
11059: LD_VAR 0 7
11063: ARRAY
11064: PPUSH
11065: CALL_OW 256
11069: PUSH
11070: LD_INT 500
11072: LESS
11073: PUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 256
11083: PUSH
11084: LD_INT 700
11086: GREATER
11087: AND
11088: IFFALSE 11138
// for p = 1 to mechanic_list do
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: DOUBLE
11096: LD_INT 1
11098: DEC
11099: ST_TO_ADDR
11100: LD_VAR 0 3
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11136
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11108: LD_VAR 0 3
11112: PUSH
11113: LD_VAR 0 8
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 2
11123: PUSH
11124: LD_VAR 0 7
11128: ARRAY
11129: PPUSH
11130: CALL_OW 129
11134: GO 11105
11136: POP
11137: POP
// end ;
11138: GO 10969
11140: POP
11141: POP
// end ; if mechanic_list then
11142: LD_VAR 0 3
11146: IFFALSE 11327
// begin for i = 1 to mechanic_list do
11148: LD_ADDR_VAR 0 7
11152: PUSH
11153: DOUBLE
11154: LD_INT 1
11156: DEC
11157: ST_TO_ADDR
11158: LD_VAR 0 3
11162: PUSH
11163: FOR_TO
11164: IFFALSE 11325
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 7
11175: ARRAY
11176: PPUSH
11177: CALL_OW 256
11181: PUSH
11182: LD_INT 333
11184: LESS
11185: IFFALSE 11209
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11187: LD_ADDR_EXP 15
11191: PUSH
11192: LD_EXP 15
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 7
11206: ARRAY
11207: DIFF
11208: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_VAR 0 7
11218: ARRAY
11219: PPUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 296
11229: PUSH
11230: LD_INT 9
11232: GREATER
11233: PUSH
11234: LD_VAR 0 3
11238: PUSH
11239: LD_VAR 0 7
11243: ARRAY
11244: PPUSH
11245: CALL_OW 314
11249: NOT
11250: AND
11251: IFFALSE 11288
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11253: LD_VAR 0 3
11257: PUSH
11258: LD_VAR 0 7
11262: ARRAY
11263: PPUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 250
11273: PPUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 251
11283: PPUSH
11284: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 256
11297: PUSH
11298: LD_INT 700
11300: LESS
11301: IFFALSE 11323
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11303: LD_VAR 0 3
11307: PUSH
11308: LD_VAR 0 7
11312: ARRAY
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 129
// end ;
11323: GO 11163
11325: POP
11326: POP
// end ; end ;
11327: LD_VAR 0 6
11331: RET
// export function GetBehemoth ( side ) ; begin
11332: LD_INT 0
11334: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_VAR 0 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 31
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// end ;
11371: LD_VAR 0 2
11375: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11376: LD_INT 0
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11384: LD_ADDR_VAR 0 6
11388: PUSH
11389: LD_VAR 0 2
11393: PPUSH
11394: CALL_OW 435
11398: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11399: LD_ADDR_VAR 0 5
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_VAR 0 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: ST_TO_ADDR
// if skr then
11453: LD_VAR 0 6
11457: IFFALSE 11622
// begin if engs then
11459: LD_VAR 0 5
11463: IFFALSE 11622
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11465: LD_ADDR_VAR 0 8
11469: PUSH
11470: LD_VAR 0 6
11474: PUSH
11475: LD_INT 1
11477: ARRAY
11478: PPUSH
11479: LD_VAR 0 6
11483: PUSH
11484: LD_INT 2
11486: ARRAY
11487: PPUSH
11488: CALL_OW 284
11492: ST_TO_ADDR
// if am > engs then
11493: LD_VAR 0 8
11497: PUSH
11498: LD_VAR 0 5
11502: GREATER
11503: IFFALSE 11515
// am := engs ;
11505: LD_ADDR_VAR 0 8
11509: PUSH
11510: LD_VAR 0 5
11514: ST_TO_ADDR
// for i = 1 to am do
11515: LD_ADDR_VAR 0 7
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_VAR 0 8
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11620
// begin if IsInUnit ( engs [ i ] ) then
11533: LD_VAR 0 5
11537: PUSH
11538: LD_VAR 0 7
11542: ARRAY
11543: PPUSH
11544: CALL_OW 310
11548: IFFALSE 11567
// ComExitBuilding ( engs [ i ] ) else
11550: LD_VAR 0 5
11554: PUSH
11555: LD_VAR 0 7
11559: ARRAY
11560: PPUSH
11561: CALL_OW 122
11565: GO 11618
// if not HasTask ( engs [ i ] ) then
11567: LD_VAR 0 5
11571: PUSH
11572: LD_VAR 0 7
11576: ARRAY
11577: PPUSH
11578: CALL_OW 314
11582: NOT
11583: IFFALSE 11618
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: LD_VAR 0 6
11600: PUSH
11601: LD_INT 1
11603: ARRAY
11604: PPUSH
11605: LD_VAR 0 6
11609: PUSH
11610: LD_INT 2
11612: ARRAY
11613: PPUSH
11614: CALL_OW 117
// end ;
11618: GO 11530
11620: POP
11621: POP
// end ; end ; end ; end_of_file
11622: LD_VAR 0 3
11626: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// uc_side := 1 ;
11631: LD_ADDR_OWVAR 20
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// uc_nation := 1 ;
11639: LD_ADDR_OWVAR 21
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 6
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: LD_INT 4
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: LD_OWVAR 67
11670: ARRAY
11671: ST_TO_ADDR
// game_status := false ;
11672: LD_ADDR_EXP 29
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// helps_arrive := false ;
11680: LD_ADDR_EXP 30
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// helps_can_arrive := false ;
11688: LD_ADDR_EXP 31
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// beta_come := false ;
11696: LD_ADDR_EXP 32
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// gamma_come := false ;
11704: LD_ADDR_EXP 33
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// zeta_come := false ;
11712: LD_ADDR_EXP 34
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// mine_ck := false ;
11720: LD_ADDR_EXP 35
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sib_bomb_constructed := false ;
11728: LD_ADDR_EXP 36
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// mine_constructed := false ;
11736: LD_ADDR_EXP 37
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11744: LD_INT 35
11746: PPUSH
11747: CALL_OW 274
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: LD_INT 200
11757: PUSH
11758: LD_INT 100
11760: PUSH
11761: LD_INT 70
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: PUSH
11769: LD_OWVAR 67
11773: ARRAY
11774: PPUSH
11775: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11779: LD_INT 35
11781: PPUSH
11782: LD_INT 4
11784: PPUSH
11785: CALL_OW 235
// hc_importance := 100 ;
11789: LD_ADDR_OWVAR 32
11793: PUSH
11794: LD_INT 100
11796: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 2
11802: PPUSH
11803: LD_VAR 0 2
11807: PUSH
11808: LD_INT 1
11810: PLUS
11811: PPUSH
11812: CALL_OW 380
// hc_gallery := hardch ;
11816: LD_ADDR_OWVAR 33
11820: PUSH
11821: LD_STRING hardch
11823: ST_TO_ADDR
// hc_face_number := 1 ;
11824: LD_ADDR_OWVAR 34
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// guyA := CreateHuman ;
11832: LD_ADDR_EXP 38
11836: PUSH
11837: CALL_OW 44
11841: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11842: LD_INT 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL_OW 380
// hc_face_number := 2 ;
11857: LD_ADDR_OWVAR 34
11861: PUSH
11862: LD_INT 2
11864: ST_TO_ADDR
// guyB := CreateHuman ;
11865: LD_ADDR_EXP 39
11869: PUSH
11870: CALL_OW 44
11874: ST_TO_ADDR
// hc_importance := 0 ;
11875: LD_ADDR_OWVAR 32
11879: PUSH
11880: LD_INT 0
11882: ST_TO_ADDR
// hc_gallery :=  ;
11883: LD_ADDR_OWVAR 33
11887: PUSH
11888: LD_STRING 
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
// uc_side := 4 ;
11907: LD_ADDR_OWVAR 20
11911: PUSH
11912: LD_INT 4
11914: ST_TO_ADDR
// uc_nation := 1 ;
11915: LD_ADDR_OWVAR 21
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11923: LD_ADDR_VAR 0 10
11927: PUSH
11928: LD_INT 6
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_OWVAR 67
11946: ARRAY
11947: ST_TO_ADDR
// Beta_Squad := [ ] ;
11948: LD_ADDR_EXP 40
11952: PUSH
11953: EMPTY
11954: ST_TO_ADDR
// case num of 1 :
11955: LD_VAR 0 1
11959: PUSH
11960: LD_INT 1
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12011
11968: POP
// begin sold := 2 ;
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_INT 2
11976: ST_TO_ADDR
// sci := 1 ;
11977: LD_ADDR_VAR 0 6
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// mech := 2 ;
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_INT 2
11992: ST_TO_ADDR
// tank := 1 ;
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// cargo := 1 ;
12001: LD_ADDR_VAR 0 9
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// end ; 2 :
12009: GO 12114
12011: LD_INT 2
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12062
12019: POP
// begin sold := 2 ;
12020: LD_ADDR_VAR 0 5
12024: PUSH
12025: LD_INT 2
12027: ST_TO_ADDR
// sci := 1 ;
12028: LD_ADDR_VAR 0 6
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// mech := 1 ;
12036: LD_ADDR_VAR 0 7
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// tank := 1 ;
12044: LD_ADDR_VAR 0 8
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// cargo := 0 ;
12052: LD_ADDR_VAR 0 9
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// end ; 3 :
12060: GO 12114
12062: LD_INT 3
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12113
12070: POP
// begin sold := 1 ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// sci := 1 ;
12079: LD_ADDR_VAR 0 6
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// mech := 1 ;
12087: LD_ADDR_VAR 0 7
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// tank := 1 ;
12095: LD_ADDR_VAR 0 8
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// cargo := 0 ;
12103: LD_ADDR_VAR 0 9
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// end ; end ;
12111: GO 12114
12113: POP
// for i = 1 to sold do
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_VAR 0 5
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12202
// begin if i = 1 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: EQUAL
12140: IFFALSE 12159
// PrepareHuman ( sex_male , 1 , skill ) else
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: LD_VAR 0 10
12152: PPUSH
12153: CALL_OW 380
12157: GO 12174
// PrepareHuman ( false , 1 , skill ) ;
12159: LD_INT 0
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: LD_VAR 0 10
12169: PPUSH
12170: CALL_OW 380
// un := CreateHuman ;
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: CALL_OW 44
12183: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12184: LD_ADDR_EXP 40
12188: PUSH
12189: LD_EXP 40
12193: PUSH
12194: LD_VAR 0 4
12198: ADD
12199: ST_TO_ADDR
// end ;
12200: GO 12129
12202: POP
12203: POP
// for i = 1 to mech do
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: DOUBLE
12210: LD_INT 1
12212: DEC
12213: ST_TO_ADDR
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12277
// begin PrepareHuman ( false , 3 , skill ) ;
12222: LD_INT 0
12224: PPUSH
12225: LD_INT 3
12227: PPUSH
12228: LD_VAR 0 10
12232: PPUSH
12233: CALL_OW 380
// un := CreateHuman ;
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: CALL_OW 44
12246: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12247: LD_VAR 0 4
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12259: LD_ADDR_EXP 40
12263: PUSH
12264: LD_EXP 40
12268: PUSH
12269: LD_VAR 0 4
12273: ADD
12274: ST_TO_ADDR
// end ;
12275: GO 12219
12277: POP
12278: POP
// for i = 1 to sci do
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: DOUBLE
12285: LD_INT 1
12287: DEC
12288: ST_TO_ADDR
12289: LD_VAR 0 6
12293: PUSH
12294: FOR_TO
12295: IFFALSE 12340
// begin PrepareHuman ( false , 4 , skill ) ;
12297: LD_INT 0
12299: PPUSH
12300: LD_INT 4
12302: PPUSH
12303: LD_VAR 0 10
12307: PPUSH
12308: CALL_OW 380
// un := CreateHuman ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: CALL_OW 44
12321: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12322: LD_ADDR_EXP 40
12326: PUSH
12327: LD_EXP 40
12331: PUSH
12332: LD_VAR 0 4
12336: ADD
12337: ST_TO_ADDR
// end ;
12338: GO 12294
12340: POP
12341: POP
// for i = 1 to tank do
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_VAR 0 8
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12471
// begin Randomize ;
12360: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12364: LD_ADDR_OWVAR 37
12368: PUSH
12369: LD_INT 3
12371: ST_TO_ADDR
// vc_engine := engine_solar ;
12372: LD_ADDR_OWVAR 39
12376: PUSH
12377: LD_INT 2
12379: ST_TO_ADDR
// vc_control := control_manual ;
12380: LD_ADDR_OWVAR 38
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12388: LD_ADDR_OWVAR 40
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: LD_INT 5
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 1
12405: PPUSH
12406: LD_INT 2
12408: PPUSH
12409: CALL_OW 12
12413: ARRAY
12414: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12415: LD_ADDR_OWVAR 41
12419: PUSH
12420: LD_INT 35
12422: PPUSH
12423: LD_INT 55
12425: PPUSH
12426: CALL_OW 12
12430: ST_TO_ADDR
// un := CreateVehicle ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: CALL_OW 45
12440: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12441: LD_VAR 0 4
12445: PPUSH
12446: LD_INT 5
12448: PPUSH
12449: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12453: LD_ADDR_EXP 40
12457: PUSH
12458: LD_EXP 40
12462: PUSH
12463: LD_VAR 0 4
12467: ADD
12468: ST_TO_ADDR
// end ;
12469: GO 12357
12471: POP
12472: POP
// if cargo then
12473: LD_VAR 0 9
12477: IFFALSE 12580
// begin vc_chassis := us_medium_tracked ;
12479: LD_ADDR_OWVAR 37
12483: PUSH
12484: LD_INT 3
12486: ST_TO_ADDR
// vc_engine := engine_solar ;
12487: LD_ADDR_OWVAR 39
12491: PUSH
12492: LD_INT 2
12494: ST_TO_ADDR
// vc_control := control_manual ;
12495: LD_ADDR_OWVAR 38
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12503: LD_ADDR_OWVAR 40
12507: PUSH
12508: LD_INT 12
12510: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12511: LD_ADDR_OWVAR 41
12515: PUSH
12516: LD_INT 35
12518: PPUSH
12519: LD_INT 55
12521: PPUSH
12522: CALL_OW 12
12526: ST_TO_ADDR
// un := CreateVehicle ;
12527: LD_ADDR_VAR 0 4
12531: PUSH
12532: CALL_OW 45
12536: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12537: LD_VAR 0 4
12541: PPUSH
12542: LD_INT 5
12544: PPUSH
12545: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12549: LD_ADDR_EXP 40
12553: PUSH
12554: LD_EXP 40
12558: PUSH
12559: LD_VAR 0 4
12563: ADD
12564: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12565: LD_VAR 0 4
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: LD_INT 60
12575: PPUSH
12576: CALL_OW 290
// end ; end ;
12580: LD_VAR 0 2
12584: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12585: LD_INT 0
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
// uc_side := 4 ;
12597: LD_ADDR_OWVAR 20
12601: PUSH
12602: LD_INT 4
12604: ST_TO_ADDR
// uc_nation := 1 ;
12605: LD_ADDR_OWVAR 21
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12613: LD_ADDR_VAR 0 11
12617: PUSH
12618: LD_INT 6
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: LD_INT 4
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_OWVAR 67
12636: ARRAY
12637: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12638: LD_ADDR_EXP 41
12642: PUSH
12643: EMPTY
12644: ST_TO_ADDR
// case num of 1 :
12645: LD_VAR 0 1
12649: PUSH
12650: LD_INT 1
12652: DOUBLE
12653: EQUAL
12654: IFTRUE 12658
12656: GO 12709
12658: POP
// begin sold := 2 ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_INT 2
12666: ST_TO_ADDR
// eng := 2 ;
12667: LD_ADDR_VAR 0 6
12671: PUSH
12672: LD_INT 2
12674: ST_TO_ADDR
// sci := 0 ;
12675: LD_ADDR_VAR 0 7
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// mech := 1 ;
12683: LD_ADDR_VAR 0 8
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// tank := 0 ;
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// cargo := 1 ;
12699: LD_ADDR_VAR 0 10
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// end ; 2 :
12707: GO 12828
12709: LD_INT 2
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12768
12717: POP
// begin sold := 1 ;
12718: LD_ADDR_VAR 0 5
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// eng := 2 ;
12726: LD_ADDR_VAR 0 6
12730: PUSH
12731: LD_INT 2
12733: ST_TO_ADDR
// sci := 0 ;
12734: LD_ADDR_VAR 0 7
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// mech := 1 ;
12742: LD_ADDR_VAR 0 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// tank := 0 ;
12750: LD_ADDR_VAR 0 9
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// cargo := 1 ;
12758: LD_ADDR_VAR 0 10
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// end ; 3 :
12766: GO 12828
12768: LD_INT 3
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12827
12776: POP
// begin sold := 1 ;
12777: LD_ADDR_VAR 0 5
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// eng := 1 ;
12785: LD_ADDR_VAR 0 6
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// sci := 0 ;
12793: LD_ADDR_VAR 0 7
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// mech := 1 ;
12801: LD_ADDR_VAR 0 8
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// tank := 0 ;
12809: LD_ADDR_VAR 0 9
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// cargo := 1 ;
12817: LD_ADDR_VAR 0 10
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// end ; end ;
12825: GO 12828
12827: POP
// for i = 1 to sold do
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_VAR 0 5
12842: PUSH
12843: FOR_TO
12844: IFFALSE 12916
// begin if i = 1 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 1
12853: EQUAL
12854: IFFALSE 12873
// PrepareHuman ( sex_male , 1 , skill ) else
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: LD_VAR 0 11
12866: PPUSH
12867: CALL_OW 380
12871: GO 12888
// PrepareHuman ( false , 1 , skill ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: LD_VAR 0 11
12883: PPUSH
12884: CALL_OW 380
// un := CreateHuman ;
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: CALL_OW 44
12897: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12898: LD_ADDR_EXP 41
12902: PUSH
12903: LD_EXP 41
12907: PUSH
12908: LD_VAR 0 4
12912: ADD
12913: ST_TO_ADDR
// end ;
12914: GO 12843
12916: POP
12917: POP
// for i = 1 to mech do
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: DOUBLE
12924: LD_INT 1
12926: DEC
12927: ST_TO_ADDR
12928: LD_VAR 0 8
12932: PUSH
12933: FOR_TO
12934: IFFALSE 12991
// begin PrepareHuman ( false , 3 , skill ) ;
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_VAR 0 11
12946: PPUSH
12947: CALL_OW 380
// un := CreateHuman ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: CALL_OW 44
12960: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12961: LD_VAR 0 4
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12973: LD_ADDR_EXP 41
12977: PUSH
12978: LD_EXP 41
12982: PUSH
12983: LD_VAR 0 4
12987: ADD
12988: ST_TO_ADDR
// end ;
12989: GO 12933
12991: POP
12992: POP
// for i = 1 to eng do
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: DOUBLE
12999: LD_INT 1
13001: DEC
13002: ST_TO_ADDR
13003: LD_VAR 0 6
13007: PUSH
13008: FOR_TO
13009: IFFALSE 13054
// begin PrepareHuman ( false , 2 , skill ) ;
13011: LD_INT 0
13013: PPUSH
13014: LD_INT 2
13016: PPUSH
13017: LD_VAR 0 11
13021: PPUSH
13022: CALL_OW 380
// un := CreateHuman ;
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: CALL_OW 44
13035: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13036: LD_ADDR_EXP 41
13040: PUSH
13041: LD_EXP 41
13045: PUSH
13046: LD_VAR 0 4
13050: ADD
13051: ST_TO_ADDR
// end ;
13052: GO 13008
13054: POP
13055: POP
// for i = 1 to tank do
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: DOUBLE
13062: LD_INT 1
13064: DEC
13065: ST_TO_ADDR
13066: LD_VAR 0 9
13070: PUSH
13071: FOR_TO
13072: IFFALSE 13185
// begin Randomize ;
13074: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13078: LD_ADDR_OWVAR 37
13082: PUSH
13083: LD_INT 2
13085: ST_TO_ADDR
// vc_engine := engine_siberite ;
13086: LD_ADDR_OWVAR 39
13090: PUSH
13091: LD_INT 3
13093: ST_TO_ADDR
// vc_control := control_manual ;
13094: LD_ADDR_OWVAR 38
13098: PUSH
13099: LD_INT 1
13101: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13102: LD_ADDR_OWVAR 40
13106: PUSH
13107: LD_INT 7
13109: PUSH
13110: LD_INT 9
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 1
13119: PPUSH
13120: LD_INT 2
13122: PPUSH
13123: CALL_OW 12
13127: ARRAY
13128: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13129: LD_ADDR_OWVAR 41
13133: PUSH
13134: LD_INT 35
13136: PPUSH
13137: LD_INT 55
13139: PPUSH
13140: CALL_OW 12
13144: ST_TO_ADDR
// un := CreateVehicle ;
13145: LD_ADDR_VAR 0 4
13149: PUSH
13150: CALL_OW 45
13154: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13155: LD_VAR 0 4
13159: PPUSH
13160: LD_INT 5
13162: PPUSH
13163: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13167: LD_ADDR_EXP 41
13171: PUSH
13172: LD_EXP 41
13176: PUSH
13177: LD_VAR 0 4
13181: ADD
13182: ST_TO_ADDR
// end ;
13183: GO 13071
13185: POP
13186: POP
// if cargo then
13187: LD_VAR 0 10
13191: IFFALSE 13309
// begin vc_chassis := us_medium_tracked ;
13193: LD_ADDR_OWVAR 37
13197: PUSH
13198: LD_INT 3
13200: ST_TO_ADDR
// vc_engine := engine_combustion ;
13201: LD_ADDR_OWVAR 39
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// vc_control := control_manual ;
13209: LD_ADDR_OWVAR 38
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13217: LD_ADDR_OWVAR 40
13221: PUSH
13222: LD_INT 12
13224: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13225: LD_ADDR_OWVAR 41
13229: PUSH
13230: LD_INT 35
13232: PPUSH
13233: LD_INT 55
13235: PPUSH
13236: CALL_OW 12
13240: ST_TO_ADDR
// un := CreateVehicle ;
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: CALL_OW 45
13250: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13251: LD_VAR 0 4
13255: PPUSH
13256: LD_INT 5
13258: PPUSH
13259: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13263: LD_ADDR_EXP 41
13267: PUSH
13268: LD_EXP 41
13272: PUSH
13273: LD_VAR 0 4
13277: ADD
13278: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_INT 3
13286: PPUSH
13287: LD_INT 30
13289: PPUSH
13290: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13294: LD_VAR 0 4
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: LD_INT 40
13304: PPUSH
13305: CALL_OW 290
// end ; end ;
13309: LD_VAR 0 2
13313: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
// uc_side := 4 ;
13326: LD_ADDR_OWVAR 20
13330: PUSH
13331: LD_INT 4
13333: ST_TO_ADDR
// uc_nation := 1 ;
13334: LD_ADDR_OWVAR 21
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13342: LD_ADDR_VAR 0 10
13346: PUSH
13347: LD_INT 6
13349: PUSH
13350: LD_INT 5
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: PUSH
13361: LD_OWVAR 67
13365: ARRAY
13366: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13367: LD_ADDR_EXP 42
13371: PUSH
13372: EMPTY
13373: ST_TO_ADDR
// sold := 1 ;
13374: LD_ADDR_VAR 0 4
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// eng := 0 ;
13382: LD_ADDR_VAR 0 5
13386: PUSH
13387: LD_INT 0
13389: ST_TO_ADDR
// sci := 0 ;
13390: LD_ADDR_VAR 0 6
13394: PUSH
13395: LD_INT 0
13397: ST_TO_ADDR
// mech := 3 ;
13398: LD_ADDR_VAR 0 7
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// tank := 3 ;
13406: LD_ADDR_VAR 0 8
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// cargo := 0 ;
13414: LD_ADDR_VAR 0 9
13418: PUSH
13419: LD_INT 0
13421: ST_TO_ADDR
// for i = 1 to sold do
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: DOUBLE
13428: LD_INT 1
13430: DEC
13431: ST_TO_ADDR
13432: LD_VAR 0 4
13436: PUSH
13437: FOR_TO
13438: IFFALSE 13510
// begin if i = 1 then
13440: LD_VAR 0 2
13444: PUSH
13445: LD_INT 1
13447: EQUAL
13448: IFFALSE 13467
// PrepareHuman ( sex_male , 1 , skill ) else
13450: LD_INT 1
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_VAR 0 10
13460: PPUSH
13461: CALL_OW 380
13465: GO 13482
// PrepareHuman ( false , 1 , skill ) ;
13467: LD_INT 0
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_VAR 0 10
13477: PPUSH
13478: CALL_OW 380
// un := CreateHuman ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: CALL_OW 44
13491: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13492: LD_ADDR_EXP 42
13496: PUSH
13497: LD_EXP 42
13501: PUSH
13502: LD_VAR 0 3
13506: ADD
13507: ST_TO_ADDR
// end ;
13508: GO 13437
13510: POP
13511: POP
// for i = 1 to mech do
13512: LD_ADDR_VAR 0 2
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_VAR 0 7
13526: PUSH
13527: FOR_TO
13528: IFFALSE 13585
// begin PrepareHuman ( false , 3 , skill ) ;
13530: LD_INT 0
13532: PPUSH
13533: LD_INT 3
13535: PPUSH
13536: LD_VAR 0 10
13540: PPUSH
13541: CALL_OW 380
// un := CreateHuman ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: CALL_OW 44
13554: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13567: LD_ADDR_EXP 42
13571: PUSH
13572: LD_EXP 42
13576: PUSH
13577: LD_VAR 0 3
13581: ADD
13582: ST_TO_ADDR
// end ;
13583: GO 13527
13585: POP
13586: POP
// for i = 1 to tank do
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: DOUBLE
13593: LD_INT 1
13595: DEC
13596: ST_TO_ADDR
13597: LD_VAR 0 8
13601: PUSH
13602: FOR_TO
13603: IFFALSE 13849
// begin Randomize ;
13605: CALL_OW 10
// if i < 3 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 3
13616: LESS
13617: IFFALSE 13726
// begin vc_chassis := us_medium_tracked ;
13619: LD_ADDR_OWVAR 37
13623: PUSH
13624: LD_INT 3
13626: ST_TO_ADDR
// vc_engine := engine_combustion ;
13627: LD_ADDR_OWVAR 39
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// vc_control := control_manual ;
13635: LD_ADDR_OWVAR 38
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13643: LD_ADDR_OWVAR 40
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 9
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 1
13660: PPUSH
13661: LD_INT 2
13663: PPUSH
13664: CALL_OW 12
13668: ARRAY
13669: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13670: LD_ADDR_OWVAR 41
13674: PUSH
13675: LD_INT 35
13677: PPUSH
13678: LD_INT 55
13680: PPUSH
13681: CALL_OW 12
13685: ST_TO_ADDR
// un := CreateVehicle ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: CALL_OW 45
13695: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13696: LD_VAR 0 3
13700: PPUSH
13701: LD_INT 5
13703: PPUSH
13704: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13708: LD_ADDR_EXP 42
13712: PUSH
13713: LD_EXP 42
13717: PUSH
13718: LD_VAR 0 3
13722: ADD
13723: ST_TO_ADDR
// end else
13724: GO 13847
// begin uc_nation := 3 ;
13726: LD_ADDR_OWVAR 21
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13734: LD_ADDR_OWVAR 37
13738: PUSH
13739: LD_INT 22
13741: ST_TO_ADDR
// vc_engine := engine_combustion ;
13742: LD_ADDR_OWVAR 39
13746: PUSH
13747: LD_INT 1
13749: ST_TO_ADDR
// vc_control := control_manual ;
13750: LD_ADDR_OWVAR 38
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13758: LD_ADDR_OWVAR 40
13762: PUSH
13763: LD_INT 51
13765: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13766: LD_ADDR_OWVAR 41
13770: PUSH
13771: LD_INT 35
13773: PPUSH
13774: LD_INT 55
13776: PPUSH
13777: CALL_OW 12
13781: ST_TO_ADDR
// un := CreateVehicle ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: CALL_OW 45
13791: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13792: LD_VAR 0 3
13796: PPUSH
13797: LD_INT 496
13799: PPUSH
13800: CALL_OW 234
// SetTag ( un , 5 ) ;
13804: LD_VAR 0 3
13808: PPUSH
13809: LD_INT 5
13811: PPUSH
13812: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13816: LD_VAR 0 3
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: LD_INT 100
13826: PPUSH
13827: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13831: LD_ADDR_EXP 42
13835: PUSH
13836: LD_EXP 42
13840: PUSH
13841: LD_VAR 0 3
13845: ADD
13846: ST_TO_ADDR
// end ; end ;
13847: GO 13602
13849: POP
13850: POP
// end ; end_of_file
13851: LD_VAR 0 1
13855: RET
// export function Action ; begin
13856: LD_INT 0
13858: PPUSH
// InGameOn ;
13859: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13863: LD_INT 151
13865: PPUSH
13866: LD_INT 107
13868: PPUSH
13869: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13873: LD_EXP 38
13877: PPUSH
13878: LD_INT 171
13880: PPUSH
13881: LD_INT 108
13883: PPUSH
13884: LD_INT 0
13886: PPUSH
13887: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13891: LD_EXP 39
13895: PPUSH
13896: LD_INT 172
13898: PPUSH
13899: LD_INT 110
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13909: LD_EXP 38
13913: PPUSH
13914: LD_INT 156
13916: PPUSH
13917: LD_INT 107
13919: PPUSH
13920: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13924: LD_EXP 39
13928: PPUSH
13929: LD_INT 154
13931: PPUSH
13932: LD_INT 105
13934: PPUSH
13935: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13946: LD_EXP 38
13950: PPUSH
13951: CALL_OW 250
13955: PUSH
13956: LD_INT 156
13958: EQUAL
13959: PUSH
13960: LD_EXP 38
13964: PPUSH
13965: CALL_OW 251
13969: PUSH
13970: LD_INT 107
13972: EQUAL
13973: AND
13974: IFFALSE 13939
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13976: LD_EXP 38
13980: PUSH
13981: LD_EXP 39
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
13997: LD_EXP 38
14001: PPUSH
14002: LD_STRING D1-A-1
14004: PPUSH
14005: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14009: LD_EXP 39
14013: PPUSH
14014: LD_STRING D1-B-1
14016: PPUSH
14017: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14021: LD_EXP 38
14025: PPUSH
14026: LD_STRING D1-A-2
14028: PPUSH
14029: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14033: LD_EXP 39
14037: PPUSH
14038: LD_STRING D1-B-2
14040: PPUSH
14041: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14045: LD_EXP 38
14049: PUSH
14050: LD_EXP 39
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: LD_INT 147
14061: PPUSH
14062: LD_INT 108
14064: PPUSH
14065: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14069: LD_EXP 38
14073: PPUSH
14074: LD_STRING D1-A-3
14076: PPUSH
14077: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14081: LD_INT 4
14083: PPUSH
14084: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14088: LD_EXP 38
14092: PPUSH
14093: LD_INT 35
14095: PPUSH
14096: CALL_OW 296
14100: PUSH
14101: LD_INT 8
14103: LESS
14104: IFFALSE 14081
// ComTurnUnit ( guyA , guyB ) ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_EXP 39
14115: PPUSH
14116: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14120: LD_EXP 39
14124: PPUSH
14125: LD_EXP 38
14129: PPUSH
14130: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14134: LD_EXP 38
14138: PPUSH
14139: LD_STRING D1-A-10
14141: PPUSH
14142: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14146: LD_EXP 39
14150: PPUSH
14151: LD_STRING D1-B-10
14153: PPUSH
14154: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14158: LD_EXP 38
14162: PPUSH
14163: LD_STRING D1-A-11
14165: PPUSH
14166: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14170: LD_EXP 39
14174: PPUSH
14175: LD_STRING D1-B-11
14177: PPUSH
14178: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14182: LD_EXP 38
14186: PPUSH
14187: LD_STRING D1-A-12
14189: PPUSH
14190: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14194: LD_EXP 39
14198: PPUSH
14199: LD_STRING D1-B-12
14201: PPUSH
14202: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14206: LD_EXP 38
14210: PPUSH
14211: LD_STRING D1-A-13
14213: PPUSH
14214: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14218: LD_EXP 39
14222: PPUSH
14223: LD_STRING D1-B-13
14225: PPUSH
14226: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14230: LD_EXP 38
14234: PPUSH
14235: LD_STRING D1-A-14
14237: PPUSH
14238: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14242: LD_EXP 39
14246: PPUSH
14247: LD_STRING D1-B-14
14249: PPUSH
14250: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14254: LD_EXP 38
14258: PPUSH
14259: LD_STRING D1-A-15
14261: PPUSH
14262: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14266: LD_EXP 39
14270: PPUSH
14271: LD_STRING D1-B-15
14273: PPUSH
14274: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14278: LD_EXP 38
14282: PPUSH
14283: LD_STRING D1-A-16
14285: PPUSH
14286: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14290: LD_EXP 39
14294: PPUSH
14295: LD_STRING D1-B-16
14297: PPUSH
14298: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14302: LD_EXP 38
14306: PPUSH
14307: LD_STRING D1-A-17
14309: PPUSH
14310: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14314: LD_EXP 39
14318: PPUSH
14319: LD_STRING D1-B-17
14321: PPUSH
14322: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14326: LD_EXP 38
14330: PPUSH
14331: LD_STRING D1-A-18
14333: PPUSH
14334: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14338: LD_INT 35
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14348: LD_EXP 38
14352: PUSH
14353: LD_EXP 39
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: LD_INT 35
14364: PPUSH
14365: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14369: LD_INT 4
14371: PPUSH
14372: CALL_OW 67
// until IsInUnit ( guyA ) ;
14376: LD_EXP 38
14380: PPUSH
14381: CALL_OW 310
14385: IFFALSE 14369
// Wait ( 0 0$02 ) ;
14387: LD_INT 70
14389: PPUSH
14390: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14394: LD_EXP 38
14398: PPUSH
14399: LD_STRING D1-A-19
14401: PPUSH
14402: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14406: LD_EXP 39
14410: PPUSH
14411: LD_STRING D1-B-19
14413: PPUSH
14414: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14418: LD_EXP 38
14422: PPUSH
14423: LD_STRING D1-A-20
14425: PPUSH
14426: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14430: LD_INT 10
14432: PPUSH
14433: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14437: LD_EXP 39
14441: PPUSH
14442: LD_STRING D1-B-20
14444: PPUSH
14445: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14449: LD_EXP 38
14453: PPUSH
14454: LD_STRING D1-A-21
14456: PPUSH
14457: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14461: LD_EXP 39
14465: PPUSH
14466: LD_STRING D1-B-21
14468: PPUSH
14469: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14473: LD_EXP 38
14477: PPUSH
14478: LD_STRING D1-A-22
14480: PPUSH
14481: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D1-B-22
14492: PPUSH
14493: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14497: LD_EXP 38
14501: PPUSH
14502: LD_STRING D1-A-23
14504: PPUSH
14505: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14509: LD_EXP 39
14513: PPUSH
14514: LD_STRING D1-B-23
14516: PPUSH
14517: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14521: LD_EXP 38
14525: PPUSH
14526: LD_STRING D1-A-24
14528: PPUSH
14529: CALL_OW 88
// InGameOff ;
14533: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14537: LD_STRING M_main
14539: PPUSH
14540: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14544: LD_INT 4
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 343
// game_status := true ;
14554: LD_ADDR_EXP 29
14558: PUSH
14559: LD_INT 1
14561: ST_TO_ADDR
// end ;
14562: LD_VAR 0 1
14566: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14567: LD_INT 1
14569: PPUSH
14570: CALL 6358 0 1
14574: PUSH
14575: LD_INT 0
14577: GREATER
14578: IFFALSE 14680
14580: GO 14582
14582: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14590: LD_INT 1
14592: PPUSH
14593: CALL 6358 0 1
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: CALL_OW 461
14606: PUSH
14607: LD_INT 1
14609: NONEQUAL
14610: IFFALSE 14583
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14612: LD_EXP 38
14616: PPUSH
14617: CALL_OW 300
14621: PUSH
14622: LD_EXP 39
14626: PPUSH
14627: CALL_OW 300
14631: AND
14632: PUSH
14633: LD_EXP 30
14637: NOT
14638: AND
14639: IFFALSE 14665
// begin Say ( guyA , DL-A-1 ) ;
14641: LD_EXP 38
14645: PPUSH
14646: LD_STRING DL-A-1
14648: PPUSH
14649: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14653: LD_EXP 39
14657: PPUSH
14658: LD_STRING DL-B-1
14660: PPUSH
14661: CALL_OW 88
// end ; if not helps_can_arrive then
14665: LD_EXP 31
14669: NOT
14670: IFFALSE 14680
// helps_can_arrive := true ;
14672: LD_ADDR_EXP 31
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// end ;
14680: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14681: LD_INT 1
14683: PPUSH
14684: CALL 6358 0 1
14688: PUSH
14689: LD_INT 0
14691: GREATER
14692: PUSH
14693: LD_EXP 38
14697: PPUSH
14698: CALL_OW 300
14702: AND
14703: PUSH
14704: LD_EXP 39
14708: PPUSH
14709: CALL_OW 300
14713: AND
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 25
14727: PUSH
14728: LD_INT 12
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: PUSH
14744: LD_INT 0
14746: EQUAL
14747: AND
14748: PUSH
14749: LD_INT 1
14751: PPUSH
14752: LD_INT 25
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: PPUSH
14767: LD_EXP 38
14771: PPUSH
14772: CALL_OW 74
14776: PPUSH
14777: CALL_OW 292
14781: AND
14782: IFFALSE 14823
14784: GO 14786
14786: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14787: LD_EXP 38
14791: PPUSH
14792: LD_STRING DA-A-1
14794: PPUSH
14795: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14799: LD_EXP 39
14803: PPUSH
14804: LD_STRING DA-B-1
14806: PPUSH
14807: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14811: LD_EXP 38
14815: PPUSH
14816: LD_STRING DA-A-2
14818: PPUSH
14819: CALL_OW 88
// end ;
14823: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14824: LD_EXP 29
14828: PUSH
14829: LD_EXP 38
14833: PPUSH
14834: LD_INT 6
14836: PPUSH
14837: CALL_OW 299
14841: PUSH
14842: LD_INT 7
14844: LESS
14845: AND
14846: IFFALSE 14899
14848: GO 14850
14850: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14851: LD_INT 117
14853: PPUSH
14854: LD_INT 50
14856: PPUSH
14857: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14861: LD_INT 1
14863: PPUSH
14864: CALL 9995 0 1
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_STRING D5-A-1
14875: PPUSH
14876: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14880: LD_INT 1
14882: PPUSH
14883: CALL 9995 0 1
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: LD_STRING D5-B-1
14894: PPUSH
14895: CALL_OW 88
// end ;
14899: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14900: LD_INT 7
14902: PPUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: PUSH
14918: LD_INT 0
14920: GREATER
14921: IFFALSE 15066
14923: GO 14925
14925: DISABLE
// begin Wait ( 0 0$03 ) ;
14926: LD_INT 105
14928: PPUSH
14929: CALL_OW 67
// DialogueOn ;
14933: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14937: LD_INT 1
14939: PPUSH
14940: CALL 9995 0 1
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_STRING D6-A-1
14951: PPUSH
14952: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14956: LD_INT 1
14958: PPUSH
14959: CALL 9995 0 1
14963: PUSH
14964: LD_INT 2
14966: ARRAY
14967: PPUSH
14968: LD_STRING D6-B-1
14970: PPUSH
14971: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14975: LD_INT 95
14977: PPUSH
14978: LD_INT 8
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_INT 20
14986: PPUSH
14987: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
14991: LD_INT 10
14993: PPUSH
14994: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
14998: LD_INT 1
15000: PPUSH
15001: CALL 9995 0 1
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: LD_STRING D6-A-2
15012: PPUSH
15013: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15017: LD_INT 1
15019: PPUSH
15020: CALL 9995 0 1
15024: PUSH
15025: LD_INT 2
15027: ARRAY
15028: PPUSH
15029: LD_STRING D6-B-2
15031: PPUSH
15032: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15036: LD_INT 1
15038: PPUSH
15039: CALL 9995 0 1
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_STRING D6-A-3
15050: PPUSH
15051: CALL_OW 88
// DialogueOff ;
15055: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15059: LD_STRING M_base
15061: PPUSH
15062: CALL_OW 337
// end ;
15066: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15067: LD_EXP 30
15071: NOT
15072: PUSH
15073: LD_INT 22
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_INT 0
15104: GREATER
15105: AND
15106: IFFALSE 15239
15108: GO 15110
15110: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15111: LD_INT 35
15113: PPUSH
15114: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15118: LD_INT 22
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 21
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 69
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL 9995 0 1
15154: PUSH
15155: LD_INT 1
15157: ARRAY
15158: PPUSH
15159: CALL_OW 74
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL 9995 0 1
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 296
15180: PUSH
15181: LD_INT 7
15183: LESS
15184: IFFALSE 15111
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15186: LD_INT 1
15188: PPUSH
15189: CALL 9995 0 1
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_STRING DR-A-1
15200: PPUSH
15201: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15205: LD_INT 1
15207: PPUSH
15208: CALL 9995 0 1
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_STRING DR-B-1
15219: PPUSH
15220: CALL_OW 88
// Wait ( 3 3$00 ) ;
15224: LD_INT 6300
15226: PPUSH
15227: CALL_OW 67
// ru_spotted := true ;
15231: LD_ADDR_EXP 16
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// end ;
15239: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15240: LD_INT 35
15242: PPUSH
15243: CALL_OW 300
15247: NOT
15248: IFFALSE 15272
15250: GO 15252
15252: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15253: LD_INT 1
15255: PPUSH
15256: CALL 9995 0 1
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_STRING DDR-A-1
15267: PPUSH
15268: CALL_OW 88
15272: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15273: LD_INT 1
15275: PPUSH
15276: LD_INT 30
15278: PPUSH
15279: CALL 6209 0 2
15283: IFFALSE 15365
15285: GO 15287
15287: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15288: LD_INT 35
15290: PPUSH
15291: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15295: LD_INT 1
15297: PPUSH
15298: LD_INT 30
15300: PPUSH
15301: CALL 6209 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 461
15314: PUSH
15315: LD_INT 1
15317: NONEQUAL
15318: IFFALSE 15288
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15320: LD_INT 1
15322: PPUSH
15323: CALL 9995 0 1
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: LD_STRING D8-A-1
15334: PPUSH
15335: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15339: LD_INT 1
15341: PPUSH
15342: CALL 9995 0 1
15346: PUSH
15347: LD_INT 2
15349: ARRAY
15350: PPUSH
15351: LD_STRING D8-B-1
15353: PPUSH
15354: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15358: LD_STRING M_mineok
15360: PPUSH
15361: CALL_OW 337
// end ;
15365: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15366: LD_INT 22
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 30
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 57
15391: PUSH
15392: EMPTY
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: PUSH
15409: LD_INT 1
15411: GREATER
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: LD_INT 57
15438: PUSH
15439: EMPTY
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: PUSH
15456: LD_INT 1
15458: EQUAL
15459: PUSH
15460: LD_INT 35
15462: PPUSH
15463: CALL_OW 300
15467: NOT
15468: AND
15469: OR
15470: IFFALSE 15522
15472: GO 15474
15474: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 25
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: PUSH
15504: LD_INT 1
15506: ARRAY
15507: PPUSH
15508: LD_STRING D7-A-1
15510: PPUSH
15511: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15515: LD_STRING M_baseok
15517: PPUSH
15518: CALL_OW 337
// end ;
15522: END
// every 0 0$01 trigger mine_ck do
15523: LD_EXP 35
15527: IFFALSE 15558
15529: GO 15531
15531: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15532: LD_INT 1
15534: PPUSH
15535: CALL 9995 0 1
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: PPUSH
15544: LD_STRING D9-A-1
15546: PPUSH
15547: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15551: LD_STRING M_minedest
15553: PPUSH
15554: CALL_OW 337
// end ;
15558: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15559: LD_EXP 29
15563: IFFALSE 16069
15565: GO 15567
15567: DISABLE
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15575: LD_OWVAR 67
15579: PPUSH
15580: CALL 11896 0 1
// if not helps_can_arrive then
15584: LD_EXP 31
15588: NOT
15589: IFFALSE 15617
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15591: LD_EXP 40
15595: PUSH
15596: LD_INT 1
15598: ARRAY
15599: PPUSH
15600: LD_STRING DB-Delay
15602: PPUSH
15603: CALL_OW 94
// time := 10 10$00 ;
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 21000
15614: ST_TO_ADDR
// end else
15615: GO 15625
// time := 3 3$00 ;
15617: LD_ADDR_VAR 0 1
15621: PUSH
15622: LD_INT 6300
15624: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 35
15637: MINUS
15638: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15639: LD_INT 35
15641: PPUSH
15642: CALL_OW 67
// end until time = 0 0$00 ;
15646: LD_VAR 0 1
15650: PUSH
15651: LD_INT 0
15653: EQUAL
15654: IFFALSE 15625
// helps_arrive := true ;
15656: LD_ADDR_EXP 30
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// if IsLive ( guyA ) then
15664: LD_EXP 38
15668: PPUSH
15669: CALL_OW 300
15673: IFFALSE 15687
// r := guyA else
15675: LD_ADDR_VAR 0 4
15679: PUSH
15680: LD_EXP 38
15684: ST_TO_ADDR
15685: GO 15697
// r := guyB ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_EXP 39
15696: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15697: LD_EXP 40
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: LD_STRING D2-A-1
15708: PPUSH
15709: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15713: LD_VAR 0 4
15717: PPUSH
15718: LD_STRING D2-B-1
15720: PPUSH
15721: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15725: LD_EXP 40
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PPUSH
15734: LD_STRING D2-A-2
15736: PPUSH
15737: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15741: LD_VAR 0 4
15745: PPUSH
15746: LD_STRING D2-B-2
15748: PPUSH
15749: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15753: LD_EXP 40
15757: PUSH
15758: LD_INT 1
15760: ARRAY
15761: PPUSH
15762: LD_STRING D2-A-3
15764: PPUSH
15765: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15769: LD_VAR 0 4
15773: PPUSH
15774: LD_STRING D2-B-3
15776: PPUSH
15777: CALL_OW 88
// to_veh := [ ] ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: DOUBLE
15794: LD_INT 1
15796: DEC
15797: ST_TO_ADDR
15798: LD_EXP 40
15802: PUSH
15803: FOR_TO
15804: IFFALSE 16067
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15806: LD_EXP 40
15810: PUSH
15811: LD_VAR 0 2
15815: ARRAY
15816: PPUSH
15817: CALL_OW 110
15821: PUSH
15822: LD_INT 3
15824: EQUAL
15825: IFFALSE 15851
// to_veh := to_veh ^ Beta_Squad [ i ] else
15827: LD_ADDR_VAR 0 5
15831: PUSH
15832: LD_VAR 0 5
15836: PUSH
15837: LD_EXP 40
15841: PUSH
15842: LD_VAR 0 2
15846: ARRAY
15847: ADD
15848: ST_TO_ADDR
15849: GO 15976
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 2
15860: ARRAY
15861: PPUSH
15862: CALL_OW 110
15866: PUSH
15867: LD_INT 5
15869: EQUAL
15870: IFFALSE 15955
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15872: LD_EXP 40
15876: PUSH
15877: LD_VAR 0 2
15881: ARRAY
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 5
15903: PPUSH
15904: LD_INT 0
15906: PPUSH
15907: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15911: LD_VAR 0 5
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_EXP 40
15924: PUSH
15925: LD_VAR 0 2
15929: ARRAY
15930: PPUSH
15931: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_VAR 0 5
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 3
15952: ST_TO_ADDR
// end else
15953: GO 15976
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15955: LD_EXP 40
15959: PUSH
15960: LD_VAR 0 2
15964: ARRAY
15965: PPUSH
15966: LD_INT 5
15968: PPUSH
15969: LD_INT 0
15971: PPUSH
15972: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15976: LD_EXP 40
15980: PUSH
15981: LD_VAR 0 2
15985: ARRAY
15986: PPUSH
15987: LD_INT 165
15989: PPUSH
15990: LD_INT 105
15992: PPUSH
15993: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
15997: LD_INT 70
15999: PPUSH
16000: LD_INT 140
16002: PPUSH
16003: CALL_OW 12
16007: PPUSH
16008: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16012: LD_EXP 40
16016: PUSH
16017: LD_VAR 0 2
16021: ARRAY
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 235
// if i = 1 then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: IFFALSE 16050
// CenterNowOnXY ( 168 , 109 ) ;
16040: LD_INT 168
16042: PPUSH
16043: LD_INT 109
16045: PPUSH
16046: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16050: LD_EXP 40
16054: PUSH
16055: LD_VAR 0 2
16059: ARRAY
16060: PPUSH
16061: CALL_OW 141
// end ;
16065: GO 15803
16067: POP
16068: POP
// end ;
16069: PPOPN 5
16071: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16072: LD_EXP 30
16076: IFFALSE 17105
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
// begin Wait ( 5 5$00 ) ;
16085: LD_INT 10500
16087: PPUSH
16088: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16092: LD_OWVAR 67
16096: PPUSH
16097: CALL 12585 0 1
// to_veh := [ ] ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: EMPTY
16107: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: DOUBLE
16114: LD_INT 1
16116: DEC
16117: ST_TO_ADDR
16118: LD_EXP 41
16122: PUSH
16123: FOR_TO
16124: IFFALSE 16352
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16126: LD_EXP 41
16130: PUSH
16131: LD_VAR 0 1
16135: ARRAY
16136: PPUSH
16137: CALL_OW 110
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16171
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16147: LD_ADDR_VAR 0 2
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: LD_EXP 41
16161: PUSH
16162: LD_VAR 0 1
16166: ARRAY
16167: ADD
16168: ST_TO_ADDR
16169: GO 16296
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16171: LD_EXP 41
16175: PUSH
16176: LD_VAR 0 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 110
16186: PUSH
16187: LD_INT 5
16189: EQUAL
16190: IFFALSE 16275
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16192: LD_EXP 41
16196: PUSH
16197: LD_VAR 0 1
16201: ARRAY
16202: PPUSH
16203: LD_INT 4
16205: PPUSH
16206: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 5
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: LD_EXP 41
16244: PUSH
16245: LD_VAR 0 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: CALL_OW 3
16272: ST_TO_ADDR
// end else
16273: GO 16296
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16275: LD_EXP 41
16279: PUSH
16280: LD_VAR 0 1
16284: ARRAY
16285: PPUSH
16286: LD_INT 5
16288: PPUSH
16289: LD_INT 0
16291: PPUSH
16292: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16296: LD_EXP 41
16300: PUSH
16301: LD_VAR 0 1
16305: ARRAY
16306: PPUSH
16307: LD_INT 164
16309: PPUSH
16310: LD_INT 104
16312: PPUSH
16313: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16317: LD_INT 70
16319: PPUSH
16320: LD_INT 140
16322: PPUSH
16323: CALL_OW 12
16327: PPUSH
16328: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16332: LD_EXP 41
16336: PUSH
16337: LD_VAR 0 1
16341: ARRAY
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 235
// end ;
16350: GO 16123
16352: POP
16353: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16354: LD_EXP 41
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_STRING D3-A-1
16365: PPUSH
16366: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16370: LD_INT 1
16372: PPUSH
16373: CALL 9995 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_STRING D3-B-1
16384: PPUSH
16385: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16389: LD_EXP 41
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: LD_STRING D3-A-2
16400: PPUSH
16401: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16405: LD_INT 1
16407: PPUSH
16408: CALL 9995 0 1
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_STRING D3-B-2
16419: PPUSH
16420: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16424: LD_EXP 41
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_STRING D3-A-3
16435: PPUSH
16436: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16440: LD_INT 1
16442: PPUSH
16443: CALL 9995 0 1
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: LD_STRING D3-B-3
16454: PPUSH
16455: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16459: LD_EXP 41
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: PPUSH
16468: LD_STRING D3-A-4
16470: PPUSH
16471: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16475: LD_INT 1
16477: PPUSH
16478: CALL 9995 0 1
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_STRING D3-B-4
16489: PPUSH
16490: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16494: LD_EXP 41
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: LD_STRING D3-A-5
16505: PPUSH
16506: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16510: LD_INT 1
16512: PPUSH
16513: CALL 9995 0 1
16517: PUSH
16518: LD_INT 1
16520: ARRAY
16521: PPUSH
16522: LD_STRING D3-B-5
16524: PPUSH
16525: CALL_OW 88
// for i = 1 to Gamma_Squad do
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: DOUBLE
16535: LD_INT 1
16537: DEC
16538: ST_TO_ADDR
16539: LD_EXP 41
16543: PUSH
16544: FOR_TO
16545: IFFALSE 16567
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16547: LD_EXP 41
16551: PUSH
16552: LD_VAR 0 1
16556: ARRAY
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 235
16565: GO 16544
16567: POP
16568: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16569: LD_INT 6300
16571: PUSH
16572: LD_INT 10500
16574: PUSH
16575: LD_INT 11550
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: LD_OWVAR 67
16587: ARRAY
16588: PPUSH
16589: CALL_OW 67
// AddZetaSquad ;
16593: CALL 13314 0 0
// Wait ( 0 0$10 ) ;
16597: LD_INT 350
16599: PPUSH
16600: CALL_OW 67
// to_veh := [ ] ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: EMPTY
16610: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: DOUBLE
16617: LD_INT 1
16619: DEC
16620: ST_TO_ADDR
16621: LD_EXP 42
16625: PUSH
16626: FOR_TO
16627: IFFALSE 16837
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16629: LD_EXP 42
16633: PUSH
16634: LD_VAR 0 1
16638: ARRAY
16639: PPUSH
16640: CALL_OW 110
16644: PUSH
16645: LD_INT 3
16647: EQUAL
16648: IFFALSE 16674
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_EXP 42
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: ADD
16671: ST_TO_ADDR
16672: GO 16799
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16674: LD_EXP 42
16678: PUSH
16679: LD_VAR 0 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 110
16689: PUSH
16690: LD_INT 5
16692: EQUAL
16693: IFFALSE 16778
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16695: LD_EXP 42
16699: PUSH
16700: LD_VAR 0 1
16704: ARRAY
16705: PPUSH
16706: LD_INT 4
16708: PPUSH
16709: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 5
16726: PPUSH
16727: LD_INT 0
16729: PPUSH
16730: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: PPUSH
16743: LD_EXP 42
16747: PUSH
16748: LD_VAR 0 1
16752: ARRAY
16753: PPUSH
16754: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_VAR 0 2
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 3
16775: ST_TO_ADDR
// end else
16776: GO 16799
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16778: LD_EXP 42
16782: PUSH
16783: LD_VAR 0 1
16787: ARRAY
16788: PPUSH
16789: LD_INT 5
16791: PPUSH
16792: LD_INT 0
16794: PPUSH
16795: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16799: LD_EXP 42
16803: PUSH
16804: LD_VAR 0 1
16808: ARRAY
16809: PPUSH
16810: LD_INT 165
16812: PPUSH
16813: LD_INT 105
16815: PPUSH
16816: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16820: LD_INT 70
16822: PPUSH
16823: LD_INT 140
16825: PPUSH
16826: CALL_OW 12
16830: PPUSH
16831: CALL_OW 67
// end ;
16835: GO 16626
16837: POP
16838: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16839: LD_EXP 42
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: LD_STRING D4-A-1
16850: PPUSH
16851: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16855: LD_INT 1
16857: PPUSH
16858: CALL 9995 0 1
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: LD_STRING D4-B-1
16869: PPUSH
16870: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16874: LD_EXP 42
16878: PUSH
16879: LD_INT 1
16881: ARRAY
16882: PPUSH
16883: LD_STRING D4-A-2
16885: PPUSH
16886: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16890: LD_INT 1
16892: PPUSH
16893: CALL 9995 0 1
16897: PUSH
16898: LD_INT 1
16900: ARRAY
16901: PPUSH
16902: LD_STRING D4-B-2
16904: PPUSH
16905: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16909: LD_EXP 42
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: LD_STRING D4-A-3
16920: PPUSH
16921: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16925: LD_INT 1
16927: PPUSH
16928: CALL 9995 0 1
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_STRING D4-B-3
16939: PPUSH
16940: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16944: LD_EXP 42
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PPUSH
16953: LD_STRING D4-A-4
16955: PPUSH
16956: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16960: LD_INT 1
16962: PPUSH
16963: CALL 9995 0 1
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: LD_STRING D4-B-4
16974: PPUSH
16975: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16979: LD_EXP 42
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: LD_STRING D4-A-5
16990: PPUSH
16991: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
16995: LD_INT 1
16997: PPUSH
16998: CALL 9995 0 1
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: LD_STRING D4-B-5
17009: PPUSH
17010: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17014: LD_EXP 42
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PPUSH
17023: LD_STRING D4-A-6
17025: PPUSH
17026: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17030: LD_INT 1
17032: PPUSH
17033: CALL 9995 0 1
17037: PUSH
17038: LD_INT 1
17040: ARRAY
17041: PPUSH
17042: LD_STRING D4-B-6
17044: PPUSH
17045: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17049: LD_EXP 42
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: LD_STRING D4-A-7
17060: PPUSH
17061: CALL_OW 94
// for i = 1 to Zeta_Squad do
17065: LD_ADDR_VAR 0 1
17069: PUSH
17070: DOUBLE
17071: LD_INT 1
17073: DEC
17074: ST_TO_ADDR
17075: LD_EXP 42
17079: PUSH
17080: FOR_TO
17081: IFFALSE 17103
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17083: LD_EXP 42
17087: PUSH
17088: LD_VAR 0 1
17092: ARRAY
17093: PPUSH
17094: LD_INT 1
17096: PPUSH
17097: CALL_OW 235
17101: GO 17080
17103: POP
17104: POP
// end ;
17105: PPOPN 2
17107: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17108: LD_INT 11
17110: PPUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 70
17127: PUSH
17128: LD_INT 0
17130: GREATER
17131: IFFALSE 17156
17133: GO 17135
17135: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17136: LD_EXP 38
17140: PPUSH
17141: LD_STRING D10-A-1
17143: PPUSH
17144: CALL_OW 88
// ru_spotted := true ;
17148: LD_ADDR_EXP 16
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// end ;
17156: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17157: LD_EXP 38
17161: PPUSH
17162: CALL_OW 301
17166: PUSH
17167: LD_EXP 39
17171: PPUSH
17172: CALL_OW 301
17176: OR
17177: IFFALSE 17189
17179: GO 17181
17181: DISABLE
// begin YouLost ( DieP ) ;
17182: LD_STRING DieP
17184: PPUSH
17185: CALL_OW 104
// end ;
17189: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17190: LD_INT 34
17192: PUSH
17193: LD_INT 8
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: IFFALSE 17217
17206: GO 17208
17208: DISABLE
// sib_bomb_constructed := true ;
17209: LD_ADDR_EXP 36
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
17217: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17218: LD_EXP 29
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PUSH
17238: LD_INT 0
17240: EQUAL
17241: AND
17242: IFFALSE 17445
17244: GO 17246
17246: DISABLE
17247: LD_INT 0
17249: PPUSH
// begin game_status := false ;
17250: LD_ADDR_EXP 29
17254: PUSH
17255: LD_INT 0
17257: ST_TO_ADDR
// if not depotConstructed then
17258: LD_EXP 2
17262: NOT
17263: IFFALSE 17272
// SetAchievement ( ACH_NODEPOT ) ;
17265: LD_STRING ACH_NODEPOT
17267: PPUSH
17268: CALL_OW 543
// if Difficulty = 3 then
17272: LD_OWVAR 67
17276: PUSH
17277: LD_INT 3
17279: EQUAL
17280: IFFALSE 17289
// SetAchievement ( ACH_HARD ) ;
17282: LD_STRING ACH_HARD
17284: PPUSH
17285: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17289: LD_OWVAR 1
17293: PUSH
17294: LD_INT 35
17296: DIVREAL
17297: PUSH
17298: LD_INT 60
17300: DIVREAL
17301: PUSH
17302: LD_INT 70
17304: PUSH
17305: LD_INT 60
17307: PUSH
17308: LD_INT 50
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_OWVAR 67
17320: ARRAY
17321: LESS
17322: IFFALSE 17336
// AddMedal ( play , 1 ) else
17324: LD_STRING play
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: CALL_OW 101
17334: GO 17347
// AddMedal ( play , - 1 ) ;
17336: LD_STRING play
17338: PPUSH
17339: LD_INT 1
17341: NEG
17342: PPUSH
17343: CALL_OW 101
// if sib_bomb_constructed then
17347: LD_EXP 36
17351: IFFALSE 17365
// AddMedal ( sibbomb , 1 ) else
17353: LD_STRING sibbomb
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: CALL_OW 101
17363: GO 17376
// AddMedal ( sibbomb , - 1 ) ;
17365: LD_STRING sibbomb
17367: PPUSH
17368: LD_INT 1
17370: NEG
17371: PPUSH
17372: CALL_OW 101
// if mine_constructed and not mine_ck then
17376: LD_EXP 37
17380: PUSH
17381: LD_EXP 35
17385: NOT
17386: AND
17387: IFFALSE 17399
// AddMedal ( mine , 1 ) ;
17389: LD_STRING mine
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 101
// if mine_ck then
17399: LD_EXP 35
17403: IFFALSE 17416
// AddMedal ( mine , - 1 ) ;
17405: LD_STRING mine
17407: PPUSH
17408: LD_INT 1
17410: NEG
17411: PPUSH
17412: CALL_OW 101
// if not mine_constructed then
17416: LD_EXP 37
17420: NOT
17421: IFFALSE 17434
// AddMedal ( mine , - 2 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 2
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// GiveMedals ( Main ) ;
17434: LD_STRING Main
17436: PPUSH
17437: CALL_OW 102
// YouWin ;
17441: CALL_OW 103
// end ; end_of_file
17445: PPOPN 1
17447: END
// every 0 0$03 trigger game_status do var time ;
17448: LD_EXP 29
17452: IFFALSE 17617
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_INT 1050
17467: PUSH
17468: LD_INT 1575
17470: PUSH
17471: LD_INT 2100
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: LD_OWVAR 67
17483: ARRAY
17484: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17485: LD_VAR 0 1
17489: PUSH
17490: LD_INT 0
17492: PPUSH
17493: LD_INT 420
17495: PPUSH
17496: CALL_OW 12
17500: PLUS
17501: PPUSH
17502: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 5
17511: PPUSH
17512: CALL_OW 12
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17524: LD_INT 105
17526: PPUSH
17527: LD_INT 1050
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17539: LD_INT 1
17541: PPUSH
17542: LD_INT 5
17544: PPUSH
17545: CALL_OW 12
17549: PPUSH
17550: LD_INT 148
17552: PPUSH
17553: LD_INT 107
17555: PPUSH
17556: LD_INT 20
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17566: LD_OWVAR 1
17570: PUSH
17571: LD_INT 44100
17573: PUSH
17574: LD_INT 37800
17576: PUSH
17577: LD_INT 33600
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_OWVAR 67
17589: ARRAY
17590: MOD
17591: IFFALSE 17607
// time := time + 0 0$20 ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 700
17605: PLUS
17606: ST_TO_ADDR
// end until game_status = false ;
17607: LD_EXP 29
17611: PUSH
17612: LD_INT 0
17614: EQUAL
17615: IFFALSE 17485
// end ;
17617: PPOPN 1
17619: END
// every 0 0$03 trigger game_status do var time ;
17620: LD_EXP 29
17624: IFFALSE 17778
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 700
17639: PUSH
17640: LD_INT 875
17642: PUSH
17643: LD_INT 1400
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: LD_OWVAR 67
17655: ARRAY
17656: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 0
17664: PPUSH
17665: LD_INT 385
17667: PPUSH
17668: CALL_OW 12
17672: PLUS
17673: PPUSH
17674: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17678: LD_INT 1
17680: PPUSH
17681: LD_INT 5
17683: PPUSH
17684: CALL_OW 12
17688: PPUSH
17689: LD_INT 102
17691: PPUSH
17692: LD_INT 6
17694: PPUSH
17695: LD_INT 25
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17705: LD_OWVAR 1
17709: PUSH
17710: LD_INT 52500
17712: PUSH
17713: LD_INT 46200
17715: PUSH
17716: LD_INT 42000
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: PUSH
17724: LD_OWVAR 67
17728: ARRAY
17729: MOD
17730: IFFALSE 17746
// time := time + 0 0$25 ;
17732: LD_ADDR_VAR 0 1
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 875
17744: PLUS
17745: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17746: LD_OWVAR 1
17750: PUSH
17751: LD_INT 231000
17753: MOD
17754: PUSH
17755: LD_INT 0
17757: EQUAL
17758: IFFALSE 17768
// time := 0 0$30 ;
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_INT 1050
17767: ST_TO_ADDR
// end until game_status = false ;
17768: LD_EXP 29
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17657
// end ;
17778: PPOPN 1
17780: END
// every 0 0$03 trigger game_status do var time ;
17781: LD_EXP 29
17785: IFFALSE 17921
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: LD_INT 1050
17800: PUSH
17801: LD_INT 1575
17803: PUSH
17804: LD_INT 1750
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: LD_OWVAR 67
17816: ARRAY
17817: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17818: LD_VAR 0 1
17822: PUSH
17823: LD_INT 0
17825: PPUSH
17826: LD_INT 385
17828: PPUSH
17829: CALL_OW 12
17833: PLUS
17834: PPUSH
17835: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 5
17844: PPUSH
17845: CALL_OW 12
17849: PPUSH
17850: LD_INT 51
17852: PPUSH
17853: LD_INT 74
17855: PPUSH
17856: LD_INT 25
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17866: LD_OWVAR 1
17870: PUSH
17871: LD_INT 84000
17873: PUSH
17874: LD_INT 105000
17876: PUSH
17877: LD_INT 136500
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_OWVAR 67
17889: ARRAY
17890: MOD
17891: PUSH
17892: LD_INT 0
17894: EQUAL
17895: IFFALSE 17911
// time := time + 0 0$15 ;
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 525
17909: PLUS
17910: ST_TO_ADDR
// end until game_status = false ;
17911: LD_EXP 29
17915: PUSH
17916: LD_INT 0
17918: EQUAL
17919: IFFALSE 17818
// end ; end_of_file
17921: PPOPN 1
17923: END
// every 0 0$01 trigger not debug do
17924: LD_EXP 1
17928: NOT
17929: IFFALSE 17952
17931: GO 17933
17933: DISABLE
// begin enable ;
17934: ENABLE
// Display_Strings := [ #tick , tick ] ;
17935: LD_ADDR_OWVAR 47
17939: PUSH
17940: LD_STRING #tick
17942: PUSH
17943: LD_OWVAR 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
// end ; end_of_file
17952: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17953: LD_VAR 0 1
17957: PPUSH
17958: CALL_OW 255
17962: PUSH
17963: LD_INT 3
17965: EQUAL
17966: PUSH
17967: LD_VAR 0 1
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: LD_INT 34
17977: PUSH
17978: LD_INT 46
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 34
17987: PUSH
17988: LD_INT 47
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 34
17997: PUSH
17998: LD_INT 45
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: PUSH
18011: EMPTY
18012: LIST
18013: PPUSH
18014: CALL_OW 69
18018: IN
18019: AND
18020: IFFALSE 18038
// ru_reserve := ru_reserve ^ un ;
18022: LD_ADDR_EXP 9
18026: PUSH
18027: LD_EXP 9
18031: PUSH
18032: LD_VAR 0 1
18036: ADD
18037: ST_TO_ADDR
// if GetSide ( un ) = 3 and not GetWeapon ( un ) in [ ru_siberium_rocket , ru_crane ] then
18038: LD_VAR 0 1
18042: PPUSH
18043: CALL_OW 255
18047: PUSH
18048: LD_INT 3
18050: EQUAL
18051: PUSH
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 264
18061: PUSH
18062: LD_INT 48
18064: PUSH
18065: LD_INT 52
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: IN
18072: NOT
18073: AND
18074: IFFALSE 18091
// ComMoveXY ( un , 65 , 60 ) ;
18076: LD_VAR 0 1
18080: PPUSH
18081: LD_INT 65
18083: PPUSH
18084: LD_INT 60
18086: PPUSH
18087: CALL_OW 111
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18091: LD_VAR 0 1
18095: PUSH
18096: LD_INT 22
18098: PUSH
18099: LD_INT 3
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 34
18108: PUSH
18109: LD_INT 48
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PPUSH
18120: CALL_OW 69
18124: IN
18125: IFFALSE 18178
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18127: LD_INT 12
18129: PPUSH
18130: LD_INT 22
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 70
18144: IFFALSE 18163
// ComAttackPlace ( un , 98 , 10 ) else
18146: LD_VAR 0 1
18150: PPUSH
18151: LD_INT 98
18153: PPUSH
18154: LD_INT 10
18156: PPUSH
18157: CALL_OW 116
18161: GO 18178
// ComAttackPlace ( un , 134 , 99 ) ;
18163: LD_VAR 0 1
18167: PPUSH
18168: LD_INT 134
18170: PPUSH
18171: LD_INT 99
18173: PPUSH
18174: CALL_OW 116
// end ;
18178: PPOPN 2
18180: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18181: LD_VAR 0 1
18185: PPUSH
18186: CALL 33228 0 1
// if GetChassis ( un ) = 25 then
18190: LD_VAR 0 1
18194: PPUSH
18195: CALL_OW 265
18199: PUSH
18200: LD_INT 25
18202: EQUAL
18203: IFFALSE 18212
// SetAchievement ( ACH_BEH ) ;
18205: LD_STRING ACH_BEH
18207: PPUSH
18208: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18212: LD_VAR 0 1
18216: PUSH
18217: LD_INT 22
18219: PUSH
18220: LD_INT 3
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 21
18229: PUSH
18230: LD_INT 3
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PPUSH
18241: CALL_OW 69
18245: IN
18246: PUSH
18247: LD_VAR 0 1
18251: PPUSH
18252: CALL_OW 266
18256: PUSH
18257: LD_INT 0
18259: PUSH
18260: LD_INT 29
18262: PUSH
18263: LD_INT 30
18265: PUSH
18266: LD_INT 26
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: IN
18275: NOT
18276: AND
18277: IFFALSE 18363
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18279: LD_ADDR_EXP 13
18283: PUSH
18284: LD_EXP 13
18288: PUSH
18289: LD_VAR 0 1
18293: PPUSH
18294: CALL_OW 266
18298: ADD
18299: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18300: LD_ADDR_EXP 13
18304: PUSH
18305: LD_EXP 13
18309: PUSH
18310: LD_VAR 0 1
18314: PPUSH
18315: CALL_OW 250
18319: ADD
18320: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18321: LD_ADDR_EXP 13
18325: PUSH
18326: LD_EXP 13
18330: PUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: CALL_OW 251
18340: ADD
18341: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18342: LD_ADDR_EXP 13
18346: PUSH
18347: LD_EXP 13
18351: PUSH
18352: LD_VAR 0 1
18356: PPUSH
18357: CALL_OW 254
18361: ADD
18362: ST_TO_ADDR
// end ; if un in ru_attack_list then
18363: LD_VAR 0 1
18367: PUSH
18368: LD_EXP 10
18372: IN
18373: IFFALSE 18391
// ru_attack_list := ru_attack_list diff un ;
18375: LD_ADDR_EXP 10
18379: PUSH
18380: LD_EXP 10
18384: PUSH
18385: LD_VAR 0 1
18389: DIFF
18390: ST_TO_ADDR
// if un in ru_protector then
18391: LD_VAR 0 1
18395: PUSH
18396: LD_EXP 17
18400: IN
18401: IFFALSE 18419
// ru_protector := ru_protector diff un ;
18403: LD_ADDR_EXP 17
18407: PUSH
18408: LD_EXP 17
18412: PUSH
18413: LD_VAR 0 1
18417: DIFF
18418: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18419: LD_VAR 0 1
18423: PPUSH
18424: CALL_OW 266
18428: PUSH
18429: LD_INT 30
18431: EQUAL
18432: PUSH
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 255
18442: PUSH
18443: LD_INT 1
18445: EQUAL
18446: AND
18447: IFFALSE 18457
// mine_ck := true ;
18449: LD_ADDR_EXP 35
18453: PUSH
18454: LD_INT 1
18456: ST_TO_ADDR
// end ;
18457: PPOPN 1
18459: END
// on BuildingComplete ( un ) do var i ;
18460: LD_INT 0
18462: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18463: LD_VAR 0 1
18467: PPUSH
18468: CALL_OW 255
18472: PUSH
18473: LD_INT 1
18475: EQUAL
18476: PUSH
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 266
18486: PUSH
18487: LD_INT 0
18489: EQUAL
18490: AND
18491: IFFALSE 18501
// depotConstructed := true ;
18493: LD_ADDR_EXP 2
18497: PUSH
18498: LD_INT 1
18500: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18501: LD_VAR 0 1
18505: PPUSH
18506: CALL_OW 255
18510: PUSH
18511: LD_INT 1
18513: EQUAL
18514: PUSH
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 266
18524: PUSH
18525: LD_INT 30
18527: EQUAL
18528: AND
18529: IFFALSE 18539
// mine_constructed := true ;
18531: LD_ADDR_EXP 37
18535: PUSH
18536: LD_INT 1
18538: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 255
18548: PUSH
18549: LD_INT 3
18551: EQUAL
18552: PUSH
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 266
18562: PUSH
18563: LD_INT 0
18565: EQUAL
18566: AND
18567: IFFALSE 18624
// begin for i = 1 to 2 do
18569: LD_ADDR_VAR 0 2
18573: PUSH
18574: DOUBLE
18575: LD_INT 1
18577: DEC
18578: ST_TO_ADDR
18579: LD_INT 2
18581: PUSH
18582: FOR_TO
18583: IFFALSE 18622
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18585: LD_EXP 20
18589: PUSH
18590: LD_VAR 0 2
18594: ARRAY
18595: PPUSH
18596: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18600: LD_EXP 20
18604: PUSH
18605: LD_VAR 0 2
18609: ARRAY
18610: PPUSH
18611: LD_VAR 0 1
18615: PPUSH
18616: CALL_OW 180
// end ;
18620: GO 18582
18622: POP
18623: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 255
18633: PUSH
18634: LD_INT 3
18636: EQUAL
18637: PUSH
18638: LD_VAR 0 1
18642: PPUSH
18643: CALL_OW 266
18647: PUSH
18648: LD_EXP 13
18652: IN
18653: AND
18654: IFFALSE 18694
// for i = 1 to 4 do
18656: LD_ADDR_VAR 0 2
18660: PUSH
18661: DOUBLE
18662: LD_INT 1
18664: DEC
18665: ST_TO_ADDR
18666: LD_INT 4
18668: PUSH
18669: FOR_TO
18670: IFFALSE 18692
// ru_blist := Delete ( ru_blist , 1 ) ;
18672: LD_ADDR_EXP 13
18676: PUSH
18677: LD_EXP 13
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: CALL_OW 3
18689: ST_TO_ADDR
18690: GO 18669
18692: POP
18693: POP
// end ;
18694: PPOPN 2
18696: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18697: LD_VAR 0 1
18701: PPUSH
18702: LD_VAR 0 2
18706: PPUSH
18707: LD_VAR 0 3
18711: PPUSH
18712: CALL 33326 0 3
// end ;
18716: PPOPN 3
18718: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18719: LD_VAR 0 1
18723: PPUSH
18724: CALL 33334 0 1
// end ; end_of_file
18728: PPOPN 1
18730: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18731: LD_INT 0
18733: PPUSH
// ar_miner := 81 ;
18734: LD_ADDR_EXP 50
18738: PUSH
18739: LD_INT 81
18741: ST_TO_ADDR
// ar_crane := 88 ;
18742: LD_ADDR_EXP 49
18746: PUSH
18747: LD_INT 88
18749: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18750: LD_ADDR_EXP 44
18754: PUSH
18755: LD_INT 89
18757: ST_TO_ADDR
// us_hack := 99 ;
18758: LD_ADDR_EXP 45
18762: PUSH
18763: LD_INT 99
18765: ST_TO_ADDR
// us_artillery := 97 ;
18766: LD_ADDR_EXP 46
18770: PUSH
18771: LD_INT 97
18773: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18774: LD_ADDR_EXP 47
18778: PUSH
18779: LD_INT 91
18781: ST_TO_ADDR
// ar_mortar := 92 ;
18782: LD_ADDR_EXP 48
18786: PUSH
18787: LD_INT 92
18789: ST_TO_ADDR
// ru_radar := 98 ;
18790: LD_ADDR_EXP 43
18794: PUSH
18795: LD_INT 98
18797: ST_TO_ADDR
// tech_Artillery := 80 ;
18798: LD_ADDR_EXP 51
18802: PUSH
18803: LD_INT 80
18805: ST_TO_ADDR
// tech_RadMat := 81 ;
18806: LD_ADDR_EXP 52
18810: PUSH
18811: LD_INT 81
18813: ST_TO_ADDR
// tech_BasicTools := 82 ;
18814: LD_ADDR_EXP 53
18818: PUSH
18819: LD_INT 82
18821: ST_TO_ADDR
// tech_Cargo := 83 ;
18822: LD_ADDR_EXP 54
18826: PUSH
18827: LD_INT 83
18829: ST_TO_ADDR
// tech_Track := 84 ;
18830: LD_ADDR_EXP 55
18834: PUSH
18835: LD_INT 84
18837: ST_TO_ADDR
// tech_Crane := 85 ;
18838: LD_ADDR_EXP 56
18842: PUSH
18843: LD_INT 85
18845: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18846: LD_ADDR_EXP 57
18850: PUSH
18851: LD_INT 86
18853: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18854: LD_ADDR_EXP 58
18858: PUSH
18859: LD_INT 87
18861: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18862: LD_ADDR_EXP 59
18866: PUSH
18867: LD_INT 88
18869: ST_TO_ADDR
// class_mastodont := 31 ;
18870: LD_ADDR_EXP 60
18874: PUSH
18875: LD_INT 31
18877: ST_TO_ADDR
// class_horse := 21 ;
18878: LD_ADDR_EXP 61
18882: PUSH
18883: LD_INT 21
18885: ST_TO_ADDR
// end ;
18886: LD_VAR 0 1
18890: RET
// every 1 do
18891: GO 18893
18893: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18894: CALL 18731 0 0
18898: END
// every 0 0$1 do
18899: GO 18901
18901: DISABLE
// begin enable ;
18902: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18903: LD_STRING updateTimer(
18905: PUSH
18906: LD_OWVAR 1
18910: STR
18911: PUSH
18912: LD_STRING );
18914: STR
18915: PPUSH
18916: CALL_OW 559
// end ;
18920: END
// on MapStart ( p ) do begin if streamModeActive then
18921: LD_EXP 62
18925: IFFALSE 18934
// DefineStreamItems ( true ) ;
18927: LD_INT 1
18929: PPUSH
18930: CALL 20582 0 1
// UpdateFactoryWaypoints ( ) ;
18934: CALL 34166 0 0
// end ;
18938: PPOPN 1
18940: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18941: LD_INT 0
18943: PPUSH
// if p2 = 100 then
18944: LD_VAR 0 2
18948: PUSH
18949: LD_INT 100
18951: EQUAL
18952: IFFALSE 19955
// begin if not StreamModeActive then
18954: LD_EXP 62
18958: NOT
18959: IFFALSE 18969
// StreamModeActive := true ;
18961: LD_ADDR_EXP 62
18965: PUSH
18966: LD_INT 1
18968: ST_TO_ADDR
// if p3 = 0 then
18969: LD_VAR 0 3
18973: PUSH
18974: LD_INT 0
18976: EQUAL
18977: IFFALSE 18983
// InitStreamMode ;
18979: CALL 20118 0 0
// if p3 = 1 then
18983: LD_VAR 0 3
18987: PUSH
18988: LD_INT 1
18990: EQUAL
18991: IFFALSE 19001
// sRocket := true ;
18993: LD_ADDR_EXP 67
18997: PUSH
18998: LD_INT 1
19000: ST_TO_ADDR
// if p3 = 2 then
19001: LD_VAR 0 3
19005: PUSH
19006: LD_INT 2
19008: EQUAL
19009: IFFALSE 19019
// sSpeed := true ;
19011: LD_ADDR_EXP 66
19015: PUSH
19016: LD_INT 1
19018: ST_TO_ADDR
// if p3 = 3 then
19019: LD_VAR 0 3
19023: PUSH
19024: LD_INT 3
19026: EQUAL
19027: IFFALSE 19037
// sEngine := true ;
19029: LD_ADDR_EXP 68
19033: PUSH
19034: LD_INT 1
19036: ST_TO_ADDR
// if p3 = 4 then
19037: LD_VAR 0 3
19041: PUSH
19042: LD_INT 4
19044: EQUAL
19045: IFFALSE 19055
// sSpec := true ;
19047: LD_ADDR_EXP 65
19051: PUSH
19052: LD_INT 1
19054: ST_TO_ADDR
// if p3 = 5 then
19055: LD_VAR 0 3
19059: PUSH
19060: LD_INT 5
19062: EQUAL
19063: IFFALSE 19073
// sLevel := true ;
19065: LD_ADDR_EXP 69
19069: PUSH
19070: LD_INT 1
19072: ST_TO_ADDR
// if p3 = 6 then
19073: LD_VAR 0 3
19077: PUSH
19078: LD_INT 6
19080: EQUAL
19081: IFFALSE 19091
// sArmoury := true ;
19083: LD_ADDR_EXP 70
19087: PUSH
19088: LD_INT 1
19090: ST_TO_ADDR
// if p3 = 7 then
19091: LD_VAR 0 3
19095: PUSH
19096: LD_INT 7
19098: EQUAL
19099: IFFALSE 19109
// sRadar := true ;
19101: LD_ADDR_EXP 71
19105: PUSH
19106: LD_INT 1
19108: ST_TO_ADDR
// if p3 = 8 then
19109: LD_VAR 0 3
19113: PUSH
19114: LD_INT 8
19116: EQUAL
19117: IFFALSE 19127
// sBunker := true ;
19119: LD_ADDR_EXP 72
19123: PUSH
19124: LD_INT 1
19126: ST_TO_ADDR
// if p3 = 9 then
19127: LD_VAR 0 3
19131: PUSH
19132: LD_INT 9
19134: EQUAL
19135: IFFALSE 19145
// sHack := true ;
19137: LD_ADDR_EXP 73
19141: PUSH
19142: LD_INT 1
19144: ST_TO_ADDR
// if p3 = 10 then
19145: LD_VAR 0 3
19149: PUSH
19150: LD_INT 10
19152: EQUAL
19153: IFFALSE 19163
// sFire := true ;
19155: LD_ADDR_EXP 74
19159: PUSH
19160: LD_INT 1
19162: ST_TO_ADDR
// if p3 = 11 then
19163: LD_VAR 0 3
19167: PUSH
19168: LD_INT 11
19170: EQUAL
19171: IFFALSE 19181
// sRefresh := true ;
19173: LD_ADDR_EXP 75
19177: PUSH
19178: LD_INT 1
19180: ST_TO_ADDR
// if p3 = 12 then
19181: LD_VAR 0 3
19185: PUSH
19186: LD_INT 12
19188: EQUAL
19189: IFFALSE 19199
// sExp := true ;
19191: LD_ADDR_EXP 76
19195: PUSH
19196: LD_INT 1
19198: ST_TO_ADDR
// if p3 = 13 then
19199: LD_VAR 0 3
19203: PUSH
19204: LD_INT 13
19206: EQUAL
19207: IFFALSE 19217
// sDepot := true ;
19209: LD_ADDR_EXP 77
19213: PUSH
19214: LD_INT 1
19216: ST_TO_ADDR
// if p3 = 14 then
19217: LD_VAR 0 3
19221: PUSH
19222: LD_INT 14
19224: EQUAL
19225: IFFALSE 19235
// sFlag := true ;
19227: LD_ADDR_EXP 78
19231: PUSH
19232: LD_INT 1
19234: ST_TO_ADDR
// if p3 = 15 then
19235: LD_VAR 0 3
19239: PUSH
19240: LD_INT 15
19242: EQUAL
19243: IFFALSE 19253
// sKamikadze := true ;
19245: LD_ADDR_EXP 86
19249: PUSH
19250: LD_INT 1
19252: ST_TO_ADDR
// if p3 = 16 then
19253: LD_VAR 0 3
19257: PUSH
19258: LD_INT 16
19260: EQUAL
19261: IFFALSE 19271
// sTroll := true ;
19263: LD_ADDR_EXP 87
19267: PUSH
19268: LD_INT 1
19270: ST_TO_ADDR
// if p3 = 17 then
19271: LD_VAR 0 3
19275: PUSH
19276: LD_INT 17
19278: EQUAL
19279: IFFALSE 19289
// sSlow := true ;
19281: LD_ADDR_EXP 88
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// if p3 = 18 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 18
19296: EQUAL
19297: IFFALSE 19307
// sLack := true ;
19299: LD_ADDR_EXP 89
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// if p3 = 19 then
19307: LD_VAR 0 3
19311: PUSH
19312: LD_INT 19
19314: EQUAL
19315: IFFALSE 19325
// sTank := true ;
19317: LD_ADDR_EXP 91
19321: PUSH
19322: LD_INT 1
19324: ST_TO_ADDR
// if p3 = 20 then
19325: LD_VAR 0 3
19329: PUSH
19330: LD_INT 20
19332: EQUAL
19333: IFFALSE 19343
// sRemote := true ;
19335: LD_ADDR_EXP 92
19339: PUSH
19340: LD_INT 1
19342: ST_TO_ADDR
// if p3 = 21 then
19343: LD_VAR 0 3
19347: PUSH
19348: LD_INT 21
19350: EQUAL
19351: IFFALSE 19361
// sPowell := true ;
19353: LD_ADDR_EXP 93
19357: PUSH
19358: LD_INT 1
19360: ST_TO_ADDR
// if p3 = 22 then
19361: LD_VAR 0 3
19365: PUSH
19366: LD_INT 22
19368: EQUAL
19369: IFFALSE 19379
// sTeleport := true ;
19371: LD_ADDR_EXP 96
19375: PUSH
19376: LD_INT 1
19378: ST_TO_ADDR
// if p3 = 23 then
19379: LD_VAR 0 3
19383: PUSH
19384: LD_INT 23
19386: EQUAL
19387: IFFALSE 19397
// sOilTower := true ;
19389: LD_ADDR_EXP 98
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
// if p3 = 24 then
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 24
19404: EQUAL
19405: IFFALSE 19415
// sShovel := true ;
19407: LD_ADDR_EXP 99
19411: PUSH
19412: LD_INT 1
19414: ST_TO_ADDR
// if p3 = 25 then
19415: LD_VAR 0 3
19419: PUSH
19420: LD_INT 25
19422: EQUAL
19423: IFFALSE 19433
// sSheik := true ;
19425: LD_ADDR_EXP 100
19429: PUSH
19430: LD_INT 1
19432: ST_TO_ADDR
// if p3 = 26 then
19433: LD_VAR 0 3
19437: PUSH
19438: LD_INT 26
19440: EQUAL
19441: IFFALSE 19451
// sEarthquake := true ;
19443: LD_ADDR_EXP 102
19447: PUSH
19448: LD_INT 1
19450: ST_TO_ADDR
// if p3 = 27 then
19451: LD_VAR 0 3
19455: PUSH
19456: LD_INT 27
19458: EQUAL
19459: IFFALSE 19469
// sAI := true ;
19461: LD_ADDR_EXP 103
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
// if p3 = 28 then
19469: LD_VAR 0 3
19473: PUSH
19474: LD_INT 28
19476: EQUAL
19477: IFFALSE 19487
// sCargo := true ;
19479: LD_ADDR_EXP 106
19483: PUSH
19484: LD_INT 1
19486: ST_TO_ADDR
// if p3 = 29 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 29
19494: EQUAL
19495: IFFALSE 19505
// sDLaser := true ;
19497: LD_ADDR_EXP 107
19501: PUSH
19502: LD_INT 1
19504: ST_TO_ADDR
// if p3 = 30 then
19505: LD_VAR 0 3
19509: PUSH
19510: LD_INT 30
19512: EQUAL
19513: IFFALSE 19523
// sExchange := true ;
19515: LD_ADDR_EXP 108
19519: PUSH
19520: LD_INT 1
19522: ST_TO_ADDR
// if p3 = 31 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 31
19530: EQUAL
19531: IFFALSE 19541
// sFac := true ;
19533: LD_ADDR_EXP 109
19537: PUSH
19538: LD_INT 1
19540: ST_TO_ADDR
// if p3 = 32 then
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 32
19548: EQUAL
19549: IFFALSE 19559
// sPower := true ;
19551: LD_ADDR_EXP 110
19555: PUSH
19556: LD_INT 1
19558: ST_TO_ADDR
// if p3 = 33 then
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 33
19566: EQUAL
19567: IFFALSE 19577
// sRandom := true ;
19569: LD_ADDR_EXP 111
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// if p3 = 34 then
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 34
19584: EQUAL
19585: IFFALSE 19595
// sShield := true ;
19587: LD_ADDR_EXP 112
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// if p3 = 35 then
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 35
19602: EQUAL
19603: IFFALSE 19613
// sTime := true ;
19605: LD_ADDR_EXP 113
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// if p3 = 36 then
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 36
19620: EQUAL
19621: IFFALSE 19631
// sTools := true ;
19623: LD_ADDR_EXP 114
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// if p3 = 101 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 101
19638: EQUAL
19639: IFFALSE 19649
// sSold := true ;
19641: LD_ADDR_EXP 79
19645: PUSH
19646: LD_INT 1
19648: ST_TO_ADDR
// if p3 = 102 then
19649: LD_VAR 0 3
19653: PUSH
19654: LD_INT 102
19656: EQUAL
19657: IFFALSE 19667
// sDiff := true ;
19659: LD_ADDR_EXP 80
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// if p3 = 103 then
19667: LD_VAR 0 3
19671: PUSH
19672: LD_INT 103
19674: EQUAL
19675: IFFALSE 19685
// sFog := true ;
19677: LD_ADDR_EXP 83
19681: PUSH
19682: LD_INT 1
19684: ST_TO_ADDR
// if p3 = 104 then
19685: LD_VAR 0 3
19689: PUSH
19690: LD_INT 104
19692: EQUAL
19693: IFFALSE 19703
// sReset := true ;
19695: LD_ADDR_EXP 84
19699: PUSH
19700: LD_INT 1
19702: ST_TO_ADDR
// if p3 = 105 then
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 105
19710: EQUAL
19711: IFFALSE 19721
// sSun := true ;
19713: LD_ADDR_EXP 85
19717: PUSH
19718: LD_INT 1
19720: ST_TO_ADDR
// if p3 = 106 then
19721: LD_VAR 0 3
19725: PUSH
19726: LD_INT 106
19728: EQUAL
19729: IFFALSE 19739
// sTiger := true ;
19731: LD_ADDR_EXP 81
19735: PUSH
19736: LD_INT 1
19738: ST_TO_ADDR
// if p3 = 107 then
19739: LD_VAR 0 3
19743: PUSH
19744: LD_INT 107
19746: EQUAL
19747: IFFALSE 19757
// sBomb := true ;
19749: LD_ADDR_EXP 82
19753: PUSH
19754: LD_INT 1
19756: ST_TO_ADDR
// if p3 = 108 then
19757: LD_VAR 0 3
19761: PUSH
19762: LD_INT 108
19764: EQUAL
19765: IFFALSE 19775
// sWound := true ;
19767: LD_ADDR_EXP 90
19771: PUSH
19772: LD_INT 1
19774: ST_TO_ADDR
// if p3 = 109 then
19775: LD_VAR 0 3
19779: PUSH
19780: LD_INT 109
19782: EQUAL
19783: IFFALSE 19793
// sBetray := true ;
19785: LD_ADDR_EXP 94
19789: PUSH
19790: LD_INT 1
19792: ST_TO_ADDR
// if p3 = 110 then
19793: LD_VAR 0 3
19797: PUSH
19798: LD_INT 110
19800: EQUAL
19801: IFFALSE 19811
// sContamin := true ;
19803: LD_ADDR_EXP 95
19807: PUSH
19808: LD_INT 1
19810: ST_TO_ADDR
// if p3 = 111 then
19811: LD_VAR 0 3
19815: PUSH
19816: LD_INT 111
19818: EQUAL
19819: IFFALSE 19829
// sOil := true ;
19821: LD_ADDR_EXP 97
19825: PUSH
19826: LD_INT 1
19828: ST_TO_ADDR
// if p3 = 112 then
19829: LD_VAR 0 3
19833: PUSH
19834: LD_INT 112
19836: EQUAL
19837: IFFALSE 19847
// sStu := true ;
19839: LD_ADDR_EXP 101
19843: PUSH
19844: LD_INT 1
19846: ST_TO_ADDR
// if p3 = 113 then
19847: LD_VAR 0 3
19851: PUSH
19852: LD_INT 113
19854: EQUAL
19855: IFFALSE 19865
// sBazooka := true ;
19857: LD_ADDR_EXP 104
19861: PUSH
19862: LD_INT 1
19864: ST_TO_ADDR
// if p3 = 114 then
19865: LD_VAR 0 3
19869: PUSH
19870: LD_INT 114
19872: EQUAL
19873: IFFALSE 19883
// sMortar := true ;
19875: LD_ADDR_EXP 105
19879: PUSH
19880: LD_INT 1
19882: ST_TO_ADDR
// if p3 = 115 then
19883: LD_VAR 0 3
19887: PUSH
19888: LD_INT 115
19890: EQUAL
19891: IFFALSE 19901
// sRanger := true ;
19893: LD_ADDR_EXP 115
19897: PUSH
19898: LD_INT 1
19900: ST_TO_ADDR
// if p3 = 116 then
19901: LD_VAR 0 3
19905: PUSH
19906: LD_INT 116
19908: EQUAL
19909: IFFALSE 19919
// sComputer := true ;
19911: LD_ADDR_EXP 116
19915: PUSH
19916: LD_INT 1
19918: ST_TO_ADDR
// if p3 = 117 then
19919: LD_VAR 0 3
19923: PUSH
19924: LD_INT 117
19926: EQUAL
19927: IFFALSE 19937
// s30 := true ;
19929: LD_ADDR_EXP 117
19933: PUSH
19934: LD_INT 1
19936: ST_TO_ADDR
// if p3 = 118 then
19937: LD_VAR 0 3
19941: PUSH
19942: LD_INT 118
19944: EQUAL
19945: IFFALSE 19955
// s60 := true ;
19947: LD_ADDR_EXP 118
19951: PUSH
19952: LD_INT 1
19954: ST_TO_ADDR
// end ; if p2 = 101 then
19955: LD_VAR 0 2
19959: PUSH
19960: LD_INT 101
19962: EQUAL
19963: IFFALSE 20091
// begin case p3 of 1 :
19965: LD_VAR 0 3
19969: PUSH
19970: LD_INT 1
19972: DOUBLE
19973: EQUAL
19974: IFTRUE 19978
19976: GO 19985
19978: POP
// hHackUnlimitedResources ; 2 :
19979: CALL 32189 0 0
19983: GO 20091
19985: LD_INT 2
19987: DOUBLE
19988: EQUAL
19989: IFTRUE 19993
19991: GO 20000
19993: POP
// hHackSetLevel10 ; 3 :
19994: CALL 32322 0 0
19998: GO 20091
20000: LD_INT 3
20002: DOUBLE
20003: EQUAL
20004: IFTRUE 20008
20006: GO 20015
20008: POP
// hHackSetLevel10YourUnits ; 4 :
20009: CALL 32407 0 0
20013: GO 20091
20015: LD_INT 4
20017: DOUBLE
20018: EQUAL
20019: IFTRUE 20023
20021: GO 20030
20023: POP
// hHackInvincible ; 5 :
20024: CALL 32855 0 0
20028: GO 20091
20030: LD_INT 5
20032: DOUBLE
20033: EQUAL
20034: IFTRUE 20038
20036: GO 20045
20038: POP
// hHackInvisible ; 6 :
20039: CALL 32966 0 0
20043: GO 20091
20045: LD_INT 6
20047: DOUBLE
20048: EQUAL
20049: IFTRUE 20053
20051: GO 20060
20053: POP
// hHackChangeYourSide ; 7 :
20054: CALL 33023 0 0
20058: GO 20091
20060: LD_INT 7
20062: DOUBLE
20063: EQUAL
20064: IFTRUE 20068
20066: GO 20075
20068: POP
// hHackChangeUnitSide ; 8 :
20069: CALL 33065 0 0
20073: GO 20091
20075: LD_INT 8
20077: DOUBLE
20078: EQUAL
20079: IFTRUE 20083
20081: GO 20090
20083: POP
// hHackFog ; end ;
20084: CALL 33166 0 0
20088: GO 20091
20090: POP
// end ; end ;
20091: LD_VAR 0 7
20095: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20096: GO 20098
20098: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20099: LD_STRING initStreamRollete();
20101: PPUSH
20102: CALL_OW 559
// InitStreamMode ;
20106: CALL 20118 0 0
// DefineStreamItems ( false ) ;
20110: LD_INT 0
20112: PPUSH
20113: CALL 20582 0 1
// end ;
20117: END
// function InitStreamMode ; begin
20118: LD_INT 0
20120: PPUSH
// streamModeActive := false ;
20121: LD_ADDR_EXP 62
20125: PUSH
20126: LD_INT 0
20128: ST_TO_ADDR
// normalCounter := 36 ;
20129: LD_ADDR_EXP 63
20133: PUSH
20134: LD_INT 36
20136: ST_TO_ADDR
// hardcoreCounter := 18 ;
20137: LD_ADDR_EXP 64
20141: PUSH
20142: LD_INT 18
20144: ST_TO_ADDR
// sRocket := false ;
20145: LD_ADDR_EXP 67
20149: PUSH
20150: LD_INT 0
20152: ST_TO_ADDR
// sSpeed := false ;
20153: LD_ADDR_EXP 66
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// sEngine := false ;
20161: LD_ADDR_EXP 68
20165: PUSH
20166: LD_INT 0
20168: ST_TO_ADDR
// sSpec := false ;
20169: LD_ADDR_EXP 65
20173: PUSH
20174: LD_INT 0
20176: ST_TO_ADDR
// sLevel := false ;
20177: LD_ADDR_EXP 69
20181: PUSH
20182: LD_INT 0
20184: ST_TO_ADDR
// sArmoury := false ;
20185: LD_ADDR_EXP 70
20189: PUSH
20190: LD_INT 0
20192: ST_TO_ADDR
// sRadar := false ;
20193: LD_ADDR_EXP 71
20197: PUSH
20198: LD_INT 0
20200: ST_TO_ADDR
// sBunker := false ;
20201: LD_ADDR_EXP 72
20205: PUSH
20206: LD_INT 0
20208: ST_TO_ADDR
// sHack := false ;
20209: LD_ADDR_EXP 73
20213: PUSH
20214: LD_INT 0
20216: ST_TO_ADDR
// sFire := false ;
20217: LD_ADDR_EXP 74
20221: PUSH
20222: LD_INT 0
20224: ST_TO_ADDR
// sRefresh := false ;
20225: LD_ADDR_EXP 75
20229: PUSH
20230: LD_INT 0
20232: ST_TO_ADDR
// sExp := false ;
20233: LD_ADDR_EXP 76
20237: PUSH
20238: LD_INT 0
20240: ST_TO_ADDR
// sDepot := false ;
20241: LD_ADDR_EXP 77
20245: PUSH
20246: LD_INT 0
20248: ST_TO_ADDR
// sFlag := false ;
20249: LD_ADDR_EXP 78
20253: PUSH
20254: LD_INT 0
20256: ST_TO_ADDR
// sKamikadze := false ;
20257: LD_ADDR_EXP 86
20261: PUSH
20262: LD_INT 0
20264: ST_TO_ADDR
// sTroll := false ;
20265: LD_ADDR_EXP 87
20269: PUSH
20270: LD_INT 0
20272: ST_TO_ADDR
// sSlow := false ;
20273: LD_ADDR_EXP 88
20277: PUSH
20278: LD_INT 0
20280: ST_TO_ADDR
// sLack := false ;
20281: LD_ADDR_EXP 89
20285: PUSH
20286: LD_INT 0
20288: ST_TO_ADDR
// sTank := false ;
20289: LD_ADDR_EXP 91
20293: PUSH
20294: LD_INT 0
20296: ST_TO_ADDR
// sRemote := false ;
20297: LD_ADDR_EXP 92
20301: PUSH
20302: LD_INT 0
20304: ST_TO_ADDR
// sPowell := false ;
20305: LD_ADDR_EXP 93
20309: PUSH
20310: LD_INT 0
20312: ST_TO_ADDR
// sTeleport := false ;
20313: LD_ADDR_EXP 96
20317: PUSH
20318: LD_INT 0
20320: ST_TO_ADDR
// sOilTower := false ;
20321: LD_ADDR_EXP 98
20325: PUSH
20326: LD_INT 0
20328: ST_TO_ADDR
// sShovel := false ;
20329: LD_ADDR_EXP 99
20333: PUSH
20334: LD_INT 0
20336: ST_TO_ADDR
// sSheik := false ;
20337: LD_ADDR_EXP 100
20341: PUSH
20342: LD_INT 0
20344: ST_TO_ADDR
// sEarthquake := false ;
20345: LD_ADDR_EXP 102
20349: PUSH
20350: LD_INT 0
20352: ST_TO_ADDR
// sAI := false ;
20353: LD_ADDR_EXP 103
20357: PUSH
20358: LD_INT 0
20360: ST_TO_ADDR
// sCargo := false ;
20361: LD_ADDR_EXP 106
20365: PUSH
20366: LD_INT 0
20368: ST_TO_ADDR
// sDLaser := false ;
20369: LD_ADDR_EXP 107
20373: PUSH
20374: LD_INT 0
20376: ST_TO_ADDR
// sExchange := false ;
20377: LD_ADDR_EXP 108
20381: PUSH
20382: LD_INT 0
20384: ST_TO_ADDR
// sFac := false ;
20385: LD_ADDR_EXP 109
20389: PUSH
20390: LD_INT 0
20392: ST_TO_ADDR
// sPower := false ;
20393: LD_ADDR_EXP 110
20397: PUSH
20398: LD_INT 0
20400: ST_TO_ADDR
// sRandom := false ;
20401: LD_ADDR_EXP 111
20405: PUSH
20406: LD_INT 0
20408: ST_TO_ADDR
// sShield := false ;
20409: LD_ADDR_EXP 112
20413: PUSH
20414: LD_INT 0
20416: ST_TO_ADDR
// sTime := false ;
20417: LD_ADDR_EXP 113
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// sTools := false ;
20425: LD_ADDR_EXP 114
20429: PUSH
20430: LD_INT 0
20432: ST_TO_ADDR
// sSold := false ;
20433: LD_ADDR_EXP 79
20437: PUSH
20438: LD_INT 0
20440: ST_TO_ADDR
// sDiff := false ;
20441: LD_ADDR_EXP 80
20445: PUSH
20446: LD_INT 0
20448: ST_TO_ADDR
// sFog := false ;
20449: LD_ADDR_EXP 83
20453: PUSH
20454: LD_INT 0
20456: ST_TO_ADDR
// sReset := false ;
20457: LD_ADDR_EXP 84
20461: PUSH
20462: LD_INT 0
20464: ST_TO_ADDR
// sSun := false ;
20465: LD_ADDR_EXP 85
20469: PUSH
20470: LD_INT 0
20472: ST_TO_ADDR
// sTiger := false ;
20473: LD_ADDR_EXP 81
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// sBomb := false ;
20481: LD_ADDR_EXP 82
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// sWound := false ;
20489: LD_ADDR_EXP 90
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
// sBetray := false ;
20497: LD_ADDR_EXP 94
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// sContamin := false ;
20505: LD_ADDR_EXP 95
20509: PUSH
20510: LD_INT 0
20512: ST_TO_ADDR
// sOil := false ;
20513: LD_ADDR_EXP 97
20517: PUSH
20518: LD_INT 0
20520: ST_TO_ADDR
// sStu := false ;
20521: LD_ADDR_EXP 101
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// sBazooka := false ;
20529: LD_ADDR_EXP 104
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// sMortar := false ;
20537: LD_ADDR_EXP 105
20541: PUSH
20542: LD_INT 0
20544: ST_TO_ADDR
// sRanger := false ;
20545: LD_ADDR_EXP 115
20549: PUSH
20550: LD_INT 0
20552: ST_TO_ADDR
// sComputer := false ;
20553: LD_ADDR_EXP 116
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// s30 := false ;
20561: LD_ADDR_EXP 117
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// s60 := false ;
20569: LD_ADDR_EXP 118
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// end ;
20577: LD_VAR 0 1
20581: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20582: LD_INT 0
20584: PPUSH
20585: PPUSH
20586: PPUSH
20587: PPUSH
20588: PPUSH
20589: PPUSH
20590: PPUSH
// result := [ ] ;
20591: LD_ADDR_VAR 0 2
20595: PUSH
20596: EMPTY
20597: ST_TO_ADDR
// if campaign_id = 1 then
20598: LD_OWVAR 69
20602: PUSH
20603: LD_INT 1
20605: EQUAL
20606: IFFALSE 23772
// begin case mission_number of 1 :
20608: LD_OWVAR 70
20612: PUSH
20613: LD_INT 1
20615: DOUBLE
20616: EQUAL
20617: IFTRUE 20621
20619: GO 20697
20621: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20622: LD_ADDR_VAR 0 2
20626: PUSH
20627: LD_INT 2
20629: PUSH
20630: LD_INT 4
20632: PUSH
20633: LD_INT 11
20635: PUSH
20636: LD_INT 12
20638: PUSH
20639: LD_INT 15
20641: PUSH
20642: LD_INT 16
20644: PUSH
20645: LD_INT 22
20647: PUSH
20648: LD_INT 23
20650: PUSH
20651: LD_INT 26
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 101
20667: PUSH
20668: LD_INT 102
20670: PUSH
20671: LD_INT 106
20673: PUSH
20674: LD_INT 116
20676: PUSH
20677: LD_INT 117
20679: PUSH
20680: LD_INT 118
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: ST_TO_ADDR
20695: GO 23770
20697: LD_INT 2
20699: DOUBLE
20700: EQUAL
20701: IFTRUE 20705
20703: GO 20789
20705: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20706: LD_ADDR_VAR 0 2
20710: PUSH
20711: LD_INT 2
20713: PUSH
20714: LD_INT 4
20716: PUSH
20717: LD_INT 11
20719: PUSH
20720: LD_INT 12
20722: PUSH
20723: LD_INT 15
20725: PUSH
20726: LD_INT 16
20728: PUSH
20729: LD_INT 22
20731: PUSH
20732: LD_INT 23
20734: PUSH
20735: LD_INT 26
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 101
20751: PUSH
20752: LD_INT 102
20754: PUSH
20755: LD_INT 105
20757: PUSH
20758: LD_INT 106
20760: PUSH
20761: LD_INT 108
20763: PUSH
20764: LD_INT 116
20766: PUSH
20767: LD_INT 117
20769: PUSH
20770: LD_INT 118
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: ST_TO_ADDR
20787: GO 23770
20789: LD_INT 3
20791: DOUBLE
20792: EQUAL
20793: IFTRUE 20797
20795: GO 20885
20797: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20798: LD_ADDR_VAR 0 2
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: LD_INT 4
20808: PUSH
20809: LD_INT 5
20811: PUSH
20812: LD_INT 11
20814: PUSH
20815: LD_INT 12
20817: PUSH
20818: LD_INT 15
20820: PUSH
20821: LD_INT 16
20823: PUSH
20824: LD_INT 22
20826: PUSH
20827: LD_INT 26
20829: PUSH
20830: LD_INT 36
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 101
20847: PUSH
20848: LD_INT 102
20850: PUSH
20851: LD_INT 105
20853: PUSH
20854: LD_INT 106
20856: PUSH
20857: LD_INT 108
20859: PUSH
20860: LD_INT 116
20862: PUSH
20863: LD_INT 117
20865: PUSH
20866: LD_INT 118
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: ST_TO_ADDR
20883: GO 23770
20885: LD_INT 4
20887: DOUBLE
20888: EQUAL
20889: IFTRUE 20893
20891: GO 20989
20893: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20894: LD_ADDR_VAR 0 2
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: LD_INT 4
20904: PUSH
20905: LD_INT 5
20907: PUSH
20908: LD_INT 8
20910: PUSH
20911: LD_INT 11
20913: PUSH
20914: LD_INT 12
20916: PUSH
20917: LD_INT 15
20919: PUSH
20920: LD_INT 16
20922: PUSH
20923: LD_INT 22
20925: PUSH
20926: LD_INT 23
20928: PUSH
20929: LD_INT 26
20931: PUSH
20932: LD_INT 36
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 101
20951: PUSH
20952: LD_INT 102
20954: PUSH
20955: LD_INT 105
20957: PUSH
20958: LD_INT 106
20960: PUSH
20961: LD_INT 108
20963: PUSH
20964: LD_INT 116
20966: PUSH
20967: LD_INT 117
20969: PUSH
20970: LD_INT 118
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: ST_TO_ADDR
20987: GO 23770
20989: LD_INT 5
20991: DOUBLE
20992: EQUAL
20993: IFTRUE 20997
20995: GO 21109
20997: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20998: LD_ADDR_VAR 0 2
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: LD_INT 4
21008: PUSH
21009: LD_INT 5
21011: PUSH
21012: LD_INT 6
21014: PUSH
21015: LD_INT 8
21017: PUSH
21018: LD_INT 11
21020: PUSH
21021: LD_INT 12
21023: PUSH
21024: LD_INT 15
21026: PUSH
21027: LD_INT 16
21029: PUSH
21030: LD_INT 22
21032: PUSH
21033: LD_INT 23
21035: PUSH
21036: LD_INT 25
21038: PUSH
21039: LD_INT 26
21041: PUSH
21042: LD_INT 36
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 101
21063: PUSH
21064: LD_INT 102
21066: PUSH
21067: LD_INT 105
21069: PUSH
21070: LD_INT 106
21072: PUSH
21073: LD_INT 108
21075: PUSH
21076: LD_INT 109
21078: PUSH
21079: LD_INT 112
21081: PUSH
21082: LD_INT 116
21084: PUSH
21085: LD_INT 117
21087: PUSH
21088: LD_INT 118
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: ST_TO_ADDR
21107: GO 23770
21109: LD_INT 6
21111: DOUBLE
21112: EQUAL
21113: IFTRUE 21117
21115: GO 21249
21117: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21118: LD_ADDR_VAR 0 2
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: LD_INT 4
21128: PUSH
21129: LD_INT 5
21131: PUSH
21132: LD_INT 6
21134: PUSH
21135: LD_INT 8
21137: PUSH
21138: LD_INT 11
21140: PUSH
21141: LD_INT 12
21143: PUSH
21144: LD_INT 15
21146: PUSH
21147: LD_INT 16
21149: PUSH
21150: LD_INT 20
21152: PUSH
21153: LD_INT 21
21155: PUSH
21156: LD_INT 22
21158: PUSH
21159: LD_INT 23
21161: PUSH
21162: LD_INT 25
21164: PUSH
21165: LD_INT 26
21167: PUSH
21168: LD_INT 30
21170: PUSH
21171: LD_INT 31
21173: PUSH
21174: LD_INT 32
21176: PUSH
21177: LD_INT 36
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 101
21203: PUSH
21204: LD_INT 102
21206: PUSH
21207: LD_INT 105
21209: PUSH
21210: LD_INT 106
21212: PUSH
21213: LD_INT 108
21215: PUSH
21216: LD_INT 109
21218: PUSH
21219: LD_INT 112
21221: PUSH
21222: LD_INT 116
21224: PUSH
21225: LD_INT 117
21227: PUSH
21228: LD_INT 118
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: ST_TO_ADDR
21247: GO 23770
21249: LD_INT 7
21251: DOUBLE
21252: EQUAL
21253: IFTRUE 21257
21255: GO 21369
21257: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21258: LD_ADDR_VAR 0 2
21262: PUSH
21263: LD_INT 2
21265: PUSH
21266: LD_INT 4
21268: PUSH
21269: LD_INT 5
21271: PUSH
21272: LD_INT 7
21274: PUSH
21275: LD_INT 11
21277: PUSH
21278: LD_INT 12
21280: PUSH
21281: LD_INT 15
21283: PUSH
21284: LD_INT 16
21286: PUSH
21287: LD_INT 20
21289: PUSH
21290: LD_INT 21
21292: PUSH
21293: LD_INT 22
21295: PUSH
21296: LD_INT 23
21298: PUSH
21299: LD_INT 25
21301: PUSH
21302: LD_INT 26
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 101
21323: PUSH
21324: LD_INT 102
21326: PUSH
21327: LD_INT 103
21329: PUSH
21330: LD_INT 105
21332: PUSH
21333: LD_INT 106
21335: PUSH
21336: LD_INT 108
21338: PUSH
21339: LD_INT 112
21341: PUSH
21342: LD_INT 116
21344: PUSH
21345: LD_INT 117
21347: PUSH
21348: LD_INT 118
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: ST_TO_ADDR
21367: GO 23770
21369: LD_INT 8
21371: DOUBLE
21372: EQUAL
21373: IFTRUE 21377
21375: GO 21517
21377: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21378: LD_ADDR_VAR 0 2
21382: PUSH
21383: LD_INT 2
21385: PUSH
21386: LD_INT 4
21388: PUSH
21389: LD_INT 5
21391: PUSH
21392: LD_INT 6
21394: PUSH
21395: LD_INT 7
21397: PUSH
21398: LD_INT 8
21400: PUSH
21401: LD_INT 11
21403: PUSH
21404: LD_INT 12
21406: PUSH
21407: LD_INT 15
21409: PUSH
21410: LD_INT 16
21412: PUSH
21413: LD_INT 20
21415: PUSH
21416: LD_INT 21
21418: PUSH
21419: LD_INT 22
21421: PUSH
21422: LD_INT 23
21424: PUSH
21425: LD_INT 25
21427: PUSH
21428: LD_INT 26
21430: PUSH
21431: LD_INT 30
21433: PUSH
21434: LD_INT 31
21436: PUSH
21437: LD_INT 32
21439: PUSH
21440: LD_INT 36
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 101
21467: PUSH
21468: LD_INT 102
21470: PUSH
21471: LD_INT 103
21473: PUSH
21474: LD_INT 105
21476: PUSH
21477: LD_INT 106
21479: PUSH
21480: LD_INT 108
21482: PUSH
21483: LD_INT 109
21485: PUSH
21486: LD_INT 112
21488: PUSH
21489: LD_INT 116
21491: PUSH
21492: LD_INT 117
21494: PUSH
21495: LD_INT 118
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: ST_TO_ADDR
21515: GO 23770
21517: LD_INT 9
21519: DOUBLE
21520: EQUAL
21521: IFTRUE 21525
21523: GO 21673
21525: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21526: LD_ADDR_VAR 0 2
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: LD_INT 4
21536: PUSH
21537: LD_INT 5
21539: PUSH
21540: LD_INT 6
21542: PUSH
21543: LD_INT 7
21545: PUSH
21546: LD_INT 8
21548: PUSH
21549: LD_INT 11
21551: PUSH
21552: LD_INT 12
21554: PUSH
21555: LD_INT 15
21557: PUSH
21558: LD_INT 16
21560: PUSH
21561: LD_INT 20
21563: PUSH
21564: LD_INT 21
21566: PUSH
21567: LD_INT 22
21569: PUSH
21570: LD_INT 23
21572: PUSH
21573: LD_INT 25
21575: PUSH
21576: LD_INT 26
21578: PUSH
21579: LD_INT 28
21581: PUSH
21582: LD_INT 30
21584: PUSH
21585: LD_INT 31
21587: PUSH
21588: LD_INT 32
21590: PUSH
21591: LD_INT 36
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 101
21619: PUSH
21620: LD_INT 102
21622: PUSH
21623: LD_INT 103
21625: PUSH
21626: LD_INT 105
21628: PUSH
21629: LD_INT 106
21631: PUSH
21632: LD_INT 108
21634: PUSH
21635: LD_INT 109
21637: PUSH
21638: LD_INT 112
21640: PUSH
21641: LD_INT 114
21643: PUSH
21644: LD_INT 116
21646: PUSH
21647: LD_INT 117
21649: PUSH
21650: LD_INT 118
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: ST_TO_ADDR
21671: GO 23770
21673: LD_INT 10
21675: DOUBLE
21676: EQUAL
21677: IFTRUE 21681
21679: GO 21877
21681: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21682: LD_ADDR_VAR 0 2
21686: PUSH
21687: LD_INT 2
21689: PUSH
21690: LD_INT 4
21692: PUSH
21693: LD_INT 5
21695: PUSH
21696: LD_INT 6
21698: PUSH
21699: LD_INT 7
21701: PUSH
21702: LD_INT 8
21704: PUSH
21705: LD_INT 9
21707: PUSH
21708: LD_INT 10
21710: PUSH
21711: LD_INT 11
21713: PUSH
21714: LD_INT 12
21716: PUSH
21717: LD_INT 13
21719: PUSH
21720: LD_INT 14
21722: PUSH
21723: LD_INT 15
21725: PUSH
21726: LD_INT 16
21728: PUSH
21729: LD_INT 17
21731: PUSH
21732: LD_INT 18
21734: PUSH
21735: LD_INT 19
21737: PUSH
21738: LD_INT 20
21740: PUSH
21741: LD_INT 21
21743: PUSH
21744: LD_INT 22
21746: PUSH
21747: LD_INT 23
21749: PUSH
21750: LD_INT 24
21752: PUSH
21753: LD_INT 25
21755: PUSH
21756: LD_INT 26
21758: PUSH
21759: LD_INT 28
21761: PUSH
21762: LD_INT 30
21764: PUSH
21765: LD_INT 31
21767: PUSH
21768: LD_INT 32
21770: PUSH
21771: LD_INT 36
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 101
21807: PUSH
21808: LD_INT 102
21810: PUSH
21811: LD_INT 103
21813: PUSH
21814: LD_INT 104
21816: PUSH
21817: LD_INT 105
21819: PUSH
21820: LD_INT 106
21822: PUSH
21823: LD_INT 107
21825: PUSH
21826: LD_INT 108
21828: PUSH
21829: LD_INT 109
21831: PUSH
21832: LD_INT 110
21834: PUSH
21835: LD_INT 111
21837: PUSH
21838: LD_INT 112
21840: PUSH
21841: LD_INT 114
21843: PUSH
21844: LD_INT 116
21846: PUSH
21847: LD_INT 117
21849: PUSH
21850: LD_INT 118
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: ST_TO_ADDR
21875: GO 23770
21877: LD_INT 11
21879: DOUBLE
21880: EQUAL
21881: IFTRUE 21885
21883: GO 22089
21885: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21886: LD_ADDR_VAR 0 2
21890: PUSH
21891: LD_INT 2
21893: PUSH
21894: LD_INT 3
21896: PUSH
21897: LD_INT 4
21899: PUSH
21900: LD_INT 5
21902: PUSH
21903: LD_INT 6
21905: PUSH
21906: LD_INT 7
21908: PUSH
21909: LD_INT 8
21911: PUSH
21912: LD_INT 9
21914: PUSH
21915: LD_INT 10
21917: PUSH
21918: LD_INT 11
21920: PUSH
21921: LD_INT 12
21923: PUSH
21924: LD_INT 13
21926: PUSH
21927: LD_INT 14
21929: PUSH
21930: LD_INT 15
21932: PUSH
21933: LD_INT 16
21935: PUSH
21936: LD_INT 17
21938: PUSH
21939: LD_INT 18
21941: PUSH
21942: LD_INT 19
21944: PUSH
21945: LD_INT 20
21947: PUSH
21948: LD_INT 21
21950: PUSH
21951: LD_INT 22
21953: PUSH
21954: LD_INT 23
21956: PUSH
21957: LD_INT 24
21959: PUSH
21960: LD_INT 25
21962: PUSH
21963: LD_INT 26
21965: PUSH
21966: LD_INT 28
21968: PUSH
21969: LD_INT 30
21971: PUSH
21972: LD_INT 31
21974: PUSH
21975: LD_INT 32
21977: PUSH
21978: LD_INT 34
21980: PUSH
21981: LD_INT 36
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 101
22019: PUSH
22020: LD_INT 102
22022: PUSH
22023: LD_INT 103
22025: PUSH
22026: LD_INT 104
22028: PUSH
22029: LD_INT 105
22031: PUSH
22032: LD_INT 106
22034: PUSH
22035: LD_INT 107
22037: PUSH
22038: LD_INT 108
22040: PUSH
22041: LD_INT 109
22043: PUSH
22044: LD_INT 110
22046: PUSH
22047: LD_INT 111
22049: PUSH
22050: LD_INT 112
22052: PUSH
22053: LD_INT 114
22055: PUSH
22056: LD_INT 116
22058: PUSH
22059: LD_INT 117
22061: PUSH
22062: LD_INT 118
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: ST_TO_ADDR
22087: GO 23770
22089: LD_INT 12
22091: DOUBLE
22092: EQUAL
22093: IFTRUE 22097
22095: GO 22317
22097: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22098: LD_ADDR_VAR 0 2
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: LD_INT 2
22108: PUSH
22109: LD_INT 3
22111: PUSH
22112: LD_INT 4
22114: PUSH
22115: LD_INT 5
22117: PUSH
22118: LD_INT 6
22120: PUSH
22121: LD_INT 7
22123: PUSH
22124: LD_INT 8
22126: PUSH
22127: LD_INT 9
22129: PUSH
22130: LD_INT 10
22132: PUSH
22133: LD_INT 11
22135: PUSH
22136: LD_INT 12
22138: PUSH
22139: LD_INT 13
22141: PUSH
22142: LD_INT 14
22144: PUSH
22145: LD_INT 15
22147: PUSH
22148: LD_INT 16
22150: PUSH
22151: LD_INT 17
22153: PUSH
22154: LD_INT 18
22156: PUSH
22157: LD_INT 19
22159: PUSH
22160: LD_INT 20
22162: PUSH
22163: LD_INT 21
22165: PUSH
22166: LD_INT 22
22168: PUSH
22169: LD_INT 23
22171: PUSH
22172: LD_INT 24
22174: PUSH
22175: LD_INT 25
22177: PUSH
22178: LD_INT 26
22180: PUSH
22181: LD_INT 27
22183: PUSH
22184: LD_INT 28
22186: PUSH
22187: LD_INT 30
22189: PUSH
22190: LD_INT 31
22192: PUSH
22193: LD_INT 32
22195: PUSH
22196: LD_INT 33
22198: PUSH
22199: LD_INT 34
22201: PUSH
22202: LD_INT 36
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 101
22243: PUSH
22244: LD_INT 102
22246: PUSH
22247: LD_INT 103
22249: PUSH
22250: LD_INT 104
22252: PUSH
22253: LD_INT 105
22255: PUSH
22256: LD_INT 106
22258: PUSH
22259: LD_INT 107
22261: PUSH
22262: LD_INT 108
22264: PUSH
22265: LD_INT 109
22267: PUSH
22268: LD_INT 110
22270: PUSH
22271: LD_INT 111
22273: PUSH
22274: LD_INT 112
22276: PUSH
22277: LD_INT 113
22279: PUSH
22280: LD_INT 114
22282: PUSH
22283: LD_INT 116
22285: PUSH
22286: LD_INT 117
22288: PUSH
22289: LD_INT 118
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: ST_TO_ADDR
22315: GO 23770
22317: LD_INT 13
22319: DOUBLE
22320: EQUAL
22321: IFTRUE 22325
22323: GO 22533
22325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22326: LD_ADDR_VAR 0 2
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: LD_INT 2
22336: PUSH
22337: LD_INT 3
22339: PUSH
22340: LD_INT 4
22342: PUSH
22343: LD_INT 5
22345: PUSH
22346: LD_INT 8
22348: PUSH
22349: LD_INT 9
22351: PUSH
22352: LD_INT 10
22354: PUSH
22355: LD_INT 11
22357: PUSH
22358: LD_INT 12
22360: PUSH
22361: LD_INT 14
22363: PUSH
22364: LD_INT 15
22366: PUSH
22367: LD_INT 16
22369: PUSH
22370: LD_INT 17
22372: PUSH
22373: LD_INT 18
22375: PUSH
22376: LD_INT 19
22378: PUSH
22379: LD_INT 20
22381: PUSH
22382: LD_INT 21
22384: PUSH
22385: LD_INT 22
22387: PUSH
22388: LD_INT 23
22390: PUSH
22391: LD_INT 24
22393: PUSH
22394: LD_INT 25
22396: PUSH
22397: LD_INT 26
22399: PUSH
22400: LD_INT 27
22402: PUSH
22403: LD_INT 28
22405: PUSH
22406: LD_INT 30
22408: PUSH
22409: LD_INT 31
22411: PUSH
22412: LD_INT 32
22414: PUSH
22415: LD_INT 33
22417: PUSH
22418: LD_INT 34
22420: PUSH
22421: LD_INT 36
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 101
22459: PUSH
22460: LD_INT 102
22462: PUSH
22463: LD_INT 103
22465: PUSH
22466: LD_INT 104
22468: PUSH
22469: LD_INT 105
22471: PUSH
22472: LD_INT 106
22474: PUSH
22475: LD_INT 107
22477: PUSH
22478: LD_INT 108
22480: PUSH
22481: LD_INT 109
22483: PUSH
22484: LD_INT 110
22486: PUSH
22487: LD_INT 111
22489: PUSH
22490: LD_INT 112
22492: PUSH
22493: LD_INT 113
22495: PUSH
22496: LD_INT 114
22498: PUSH
22499: LD_INT 116
22501: PUSH
22502: LD_INT 117
22504: PUSH
22505: LD_INT 118
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: ST_TO_ADDR
22531: GO 23770
22533: LD_INT 14
22535: DOUBLE
22536: EQUAL
22537: IFTRUE 22541
22539: GO 22765
22541: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22542: LD_ADDR_VAR 0 2
22546: PUSH
22547: LD_INT 1
22549: PUSH
22550: LD_INT 2
22552: PUSH
22553: LD_INT 3
22555: PUSH
22556: LD_INT 4
22558: PUSH
22559: LD_INT 5
22561: PUSH
22562: LD_INT 6
22564: PUSH
22565: LD_INT 7
22567: PUSH
22568: LD_INT 8
22570: PUSH
22571: LD_INT 9
22573: PUSH
22574: LD_INT 10
22576: PUSH
22577: LD_INT 11
22579: PUSH
22580: LD_INT 12
22582: PUSH
22583: LD_INT 13
22585: PUSH
22586: LD_INT 14
22588: PUSH
22589: LD_INT 15
22591: PUSH
22592: LD_INT 16
22594: PUSH
22595: LD_INT 17
22597: PUSH
22598: LD_INT 18
22600: PUSH
22601: LD_INT 19
22603: PUSH
22604: LD_INT 20
22606: PUSH
22607: LD_INT 21
22609: PUSH
22610: LD_INT 22
22612: PUSH
22613: LD_INT 23
22615: PUSH
22616: LD_INT 24
22618: PUSH
22619: LD_INT 25
22621: PUSH
22622: LD_INT 26
22624: PUSH
22625: LD_INT 27
22627: PUSH
22628: LD_INT 28
22630: PUSH
22631: LD_INT 29
22633: PUSH
22634: LD_INT 30
22636: PUSH
22637: LD_INT 31
22639: PUSH
22640: LD_INT 32
22642: PUSH
22643: LD_INT 33
22645: PUSH
22646: LD_INT 34
22648: PUSH
22649: LD_INT 36
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 101
22691: PUSH
22692: LD_INT 102
22694: PUSH
22695: LD_INT 103
22697: PUSH
22698: LD_INT 104
22700: PUSH
22701: LD_INT 105
22703: PUSH
22704: LD_INT 106
22706: PUSH
22707: LD_INT 107
22709: PUSH
22710: LD_INT 108
22712: PUSH
22713: LD_INT 109
22715: PUSH
22716: LD_INT 110
22718: PUSH
22719: LD_INT 111
22721: PUSH
22722: LD_INT 112
22724: PUSH
22725: LD_INT 113
22727: PUSH
22728: LD_INT 114
22730: PUSH
22731: LD_INT 116
22733: PUSH
22734: LD_INT 117
22736: PUSH
22737: LD_INT 118
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: ST_TO_ADDR
22763: GO 23770
22765: LD_INT 15
22767: DOUBLE
22768: EQUAL
22769: IFTRUE 22773
22771: GO 22997
22773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22774: LD_ADDR_VAR 0 2
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: LD_INT 4
22790: PUSH
22791: LD_INT 5
22793: PUSH
22794: LD_INT 6
22796: PUSH
22797: LD_INT 7
22799: PUSH
22800: LD_INT 8
22802: PUSH
22803: LD_INT 9
22805: PUSH
22806: LD_INT 10
22808: PUSH
22809: LD_INT 11
22811: PUSH
22812: LD_INT 12
22814: PUSH
22815: LD_INT 13
22817: PUSH
22818: LD_INT 14
22820: PUSH
22821: LD_INT 15
22823: PUSH
22824: LD_INT 16
22826: PUSH
22827: LD_INT 17
22829: PUSH
22830: LD_INT 18
22832: PUSH
22833: LD_INT 19
22835: PUSH
22836: LD_INT 20
22838: PUSH
22839: LD_INT 21
22841: PUSH
22842: LD_INT 22
22844: PUSH
22845: LD_INT 23
22847: PUSH
22848: LD_INT 24
22850: PUSH
22851: LD_INT 25
22853: PUSH
22854: LD_INT 26
22856: PUSH
22857: LD_INT 27
22859: PUSH
22860: LD_INT 28
22862: PUSH
22863: LD_INT 29
22865: PUSH
22866: LD_INT 30
22868: PUSH
22869: LD_INT 31
22871: PUSH
22872: LD_INT 32
22874: PUSH
22875: LD_INT 33
22877: PUSH
22878: LD_INT 34
22880: PUSH
22881: LD_INT 36
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 101
22923: PUSH
22924: LD_INT 102
22926: PUSH
22927: LD_INT 103
22929: PUSH
22930: LD_INT 104
22932: PUSH
22933: LD_INT 105
22935: PUSH
22936: LD_INT 106
22938: PUSH
22939: LD_INT 107
22941: PUSH
22942: LD_INT 108
22944: PUSH
22945: LD_INT 109
22947: PUSH
22948: LD_INT 110
22950: PUSH
22951: LD_INT 111
22953: PUSH
22954: LD_INT 112
22956: PUSH
22957: LD_INT 113
22959: PUSH
22960: LD_INT 114
22962: PUSH
22963: LD_INT 116
22965: PUSH
22966: LD_INT 117
22968: PUSH
22969: LD_INT 118
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: ST_TO_ADDR
22995: GO 23770
22997: LD_INT 16
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23141
23005: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23006: LD_ADDR_VAR 0 2
23010: PUSH
23011: LD_INT 2
23013: PUSH
23014: LD_INT 4
23016: PUSH
23017: LD_INT 5
23019: PUSH
23020: LD_INT 7
23022: PUSH
23023: LD_INT 11
23025: PUSH
23026: LD_INT 12
23028: PUSH
23029: LD_INT 15
23031: PUSH
23032: LD_INT 16
23034: PUSH
23035: LD_INT 20
23037: PUSH
23038: LD_INT 21
23040: PUSH
23041: LD_INT 22
23043: PUSH
23044: LD_INT 23
23046: PUSH
23047: LD_INT 25
23049: PUSH
23050: LD_INT 26
23052: PUSH
23053: LD_INT 30
23055: PUSH
23056: LD_INT 31
23058: PUSH
23059: LD_INT 32
23061: PUSH
23062: LD_INT 33
23064: PUSH
23065: LD_INT 34
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 101
23091: PUSH
23092: LD_INT 102
23094: PUSH
23095: LD_INT 103
23097: PUSH
23098: LD_INT 106
23100: PUSH
23101: LD_INT 108
23103: PUSH
23104: LD_INT 112
23106: PUSH
23107: LD_INT 113
23109: PUSH
23110: LD_INT 114
23112: PUSH
23113: LD_INT 116
23115: PUSH
23116: LD_INT 117
23118: PUSH
23119: LD_INT 118
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: ST_TO_ADDR
23139: GO 23770
23141: LD_INT 17
23143: DOUBLE
23144: EQUAL
23145: IFTRUE 23149
23147: GO 23373
23149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23150: LD_ADDR_VAR 0 2
23154: PUSH
23155: LD_INT 1
23157: PUSH
23158: LD_INT 2
23160: PUSH
23161: LD_INT 3
23163: PUSH
23164: LD_INT 4
23166: PUSH
23167: LD_INT 5
23169: PUSH
23170: LD_INT 6
23172: PUSH
23173: LD_INT 7
23175: PUSH
23176: LD_INT 8
23178: PUSH
23179: LD_INT 9
23181: PUSH
23182: LD_INT 10
23184: PUSH
23185: LD_INT 11
23187: PUSH
23188: LD_INT 12
23190: PUSH
23191: LD_INT 13
23193: PUSH
23194: LD_INT 14
23196: PUSH
23197: LD_INT 15
23199: PUSH
23200: LD_INT 16
23202: PUSH
23203: LD_INT 17
23205: PUSH
23206: LD_INT 18
23208: PUSH
23209: LD_INT 19
23211: PUSH
23212: LD_INT 20
23214: PUSH
23215: LD_INT 21
23217: PUSH
23218: LD_INT 22
23220: PUSH
23221: LD_INT 23
23223: PUSH
23224: LD_INT 24
23226: PUSH
23227: LD_INT 25
23229: PUSH
23230: LD_INT 26
23232: PUSH
23233: LD_INT 27
23235: PUSH
23236: LD_INT 28
23238: PUSH
23239: LD_INT 29
23241: PUSH
23242: LD_INT 30
23244: PUSH
23245: LD_INT 31
23247: PUSH
23248: LD_INT 32
23250: PUSH
23251: LD_INT 33
23253: PUSH
23254: LD_INT 34
23256: PUSH
23257: LD_INT 36
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 101
23299: PUSH
23300: LD_INT 102
23302: PUSH
23303: LD_INT 103
23305: PUSH
23306: LD_INT 104
23308: PUSH
23309: LD_INT 105
23311: PUSH
23312: LD_INT 106
23314: PUSH
23315: LD_INT 107
23317: PUSH
23318: LD_INT 108
23320: PUSH
23321: LD_INT 109
23323: PUSH
23324: LD_INT 110
23326: PUSH
23327: LD_INT 111
23329: PUSH
23330: LD_INT 112
23332: PUSH
23333: LD_INT 113
23335: PUSH
23336: LD_INT 114
23338: PUSH
23339: LD_INT 116
23341: PUSH
23342: LD_INT 117
23344: PUSH
23345: LD_INT 118
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: ST_TO_ADDR
23371: GO 23770
23373: LD_INT 18
23375: DOUBLE
23376: EQUAL
23377: IFTRUE 23381
23379: GO 23529
23381: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23382: LD_ADDR_VAR 0 2
23386: PUSH
23387: LD_INT 2
23389: PUSH
23390: LD_INT 4
23392: PUSH
23393: LD_INT 5
23395: PUSH
23396: LD_INT 7
23398: PUSH
23399: LD_INT 11
23401: PUSH
23402: LD_INT 12
23404: PUSH
23405: LD_INT 15
23407: PUSH
23408: LD_INT 16
23410: PUSH
23411: LD_INT 20
23413: PUSH
23414: LD_INT 21
23416: PUSH
23417: LD_INT 22
23419: PUSH
23420: LD_INT 23
23422: PUSH
23423: LD_INT 25
23425: PUSH
23426: LD_INT 26
23428: PUSH
23429: LD_INT 30
23431: PUSH
23432: LD_INT 31
23434: PUSH
23435: LD_INT 32
23437: PUSH
23438: LD_INT 33
23440: PUSH
23441: LD_INT 34
23443: PUSH
23444: LD_INT 35
23446: PUSH
23447: LD_INT 36
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 101
23475: PUSH
23476: LD_INT 102
23478: PUSH
23479: LD_INT 103
23481: PUSH
23482: LD_INT 106
23484: PUSH
23485: LD_INT 108
23487: PUSH
23488: LD_INT 112
23490: PUSH
23491: LD_INT 113
23493: PUSH
23494: LD_INT 114
23496: PUSH
23497: LD_INT 115
23499: PUSH
23500: LD_INT 116
23502: PUSH
23503: LD_INT 117
23505: PUSH
23506: LD_INT 118
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: ST_TO_ADDR
23527: GO 23770
23529: LD_INT 19
23531: DOUBLE
23532: EQUAL
23533: IFTRUE 23537
23535: GO 23769
23537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23538: LD_ADDR_VAR 0 2
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 3
23551: PUSH
23552: LD_INT 4
23554: PUSH
23555: LD_INT 5
23557: PUSH
23558: LD_INT 6
23560: PUSH
23561: LD_INT 7
23563: PUSH
23564: LD_INT 8
23566: PUSH
23567: LD_INT 9
23569: PUSH
23570: LD_INT 10
23572: PUSH
23573: LD_INT 11
23575: PUSH
23576: LD_INT 12
23578: PUSH
23579: LD_INT 13
23581: PUSH
23582: LD_INT 14
23584: PUSH
23585: LD_INT 15
23587: PUSH
23588: LD_INT 16
23590: PUSH
23591: LD_INT 17
23593: PUSH
23594: LD_INT 18
23596: PUSH
23597: LD_INT 19
23599: PUSH
23600: LD_INT 20
23602: PUSH
23603: LD_INT 21
23605: PUSH
23606: LD_INT 22
23608: PUSH
23609: LD_INT 23
23611: PUSH
23612: LD_INT 24
23614: PUSH
23615: LD_INT 25
23617: PUSH
23618: LD_INT 26
23620: PUSH
23621: LD_INT 27
23623: PUSH
23624: LD_INT 28
23626: PUSH
23627: LD_INT 29
23629: PUSH
23630: LD_INT 30
23632: PUSH
23633: LD_INT 31
23635: PUSH
23636: LD_INT 32
23638: PUSH
23639: LD_INT 33
23641: PUSH
23642: LD_INT 34
23644: PUSH
23645: LD_INT 35
23647: PUSH
23648: LD_INT 36
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 101
23691: PUSH
23692: LD_INT 102
23694: PUSH
23695: LD_INT 103
23697: PUSH
23698: LD_INT 104
23700: PUSH
23701: LD_INT 105
23703: PUSH
23704: LD_INT 106
23706: PUSH
23707: LD_INT 107
23709: PUSH
23710: LD_INT 108
23712: PUSH
23713: LD_INT 109
23715: PUSH
23716: LD_INT 110
23718: PUSH
23719: LD_INT 111
23721: PUSH
23722: LD_INT 112
23724: PUSH
23725: LD_INT 113
23727: PUSH
23728: LD_INT 114
23730: PUSH
23731: LD_INT 115
23733: PUSH
23734: LD_INT 116
23736: PUSH
23737: LD_INT 117
23739: PUSH
23740: LD_INT 118
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: ST_TO_ADDR
23767: GO 23770
23769: POP
// end else
23770: GO 24001
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23772: LD_ADDR_VAR 0 2
23776: PUSH
23777: LD_INT 1
23779: PUSH
23780: LD_INT 2
23782: PUSH
23783: LD_INT 3
23785: PUSH
23786: LD_INT 4
23788: PUSH
23789: LD_INT 5
23791: PUSH
23792: LD_INT 6
23794: PUSH
23795: LD_INT 7
23797: PUSH
23798: LD_INT 8
23800: PUSH
23801: LD_INT 9
23803: PUSH
23804: LD_INT 10
23806: PUSH
23807: LD_INT 11
23809: PUSH
23810: LD_INT 12
23812: PUSH
23813: LD_INT 13
23815: PUSH
23816: LD_INT 14
23818: PUSH
23819: LD_INT 15
23821: PUSH
23822: LD_INT 16
23824: PUSH
23825: LD_INT 17
23827: PUSH
23828: LD_INT 18
23830: PUSH
23831: LD_INT 19
23833: PUSH
23834: LD_INT 20
23836: PUSH
23837: LD_INT 21
23839: PUSH
23840: LD_INT 22
23842: PUSH
23843: LD_INT 23
23845: PUSH
23846: LD_INT 24
23848: PUSH
23849: LD_INT 25
23851: PUSH
23852: LD_INT 26
23854: PUSH
23855: LD_INT 27
23857: PUSH
23858: LD_INT 28
23860: PUSH
23861: LD_INT 29
23863: PUSH
23864: LD_INT 30
23866: PUSH
23867: LD_INT 31
23869: PUSH
23870: LD_INT 32
23872: PUSH
23873: LD_INT 33
23875: PUSH
23876: LD_INT 34
23878: PUSH
23879: LD_INT 35
23881: PUSH
23882: LD_INT 36
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 101
23925: PUSH
23926: LD_INT 102
23928: PUSH
23929: LD_INT 103
23931: PUSH
23932: LD_INT 104
23934: PUSH
23935: LD_INT 105
23937: PUSH
23938: LD_INT 106
23940: PUSH
23941: LD_INT 107
23943: PUSH
23944: LD_INT 108
23946: PUSH
23947: LD_INT 109
23949: PUSH
23950: LD_INT 110
23952: PUSH
23953: LD_INT 111
23955: PUSH
23956: LD_INT 112
23958: PUSH
23959: LD_INT 113
23961: PUSH
23962: LD_INT 114
23964: PUSH
23965: LD_INT 115
23967: PUSH
23968: LD_INT 116
23970: PUSH
23971: LD_INT 117
23973: PUSH
23974: LD_INT 118
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: ST_TO_ADDR
// if result then
24001: LD_VAR 0 2
24005: IFFALSE 24791
// begin normal :=  ;
24007: LD_ADDR_VAR 0 5
24011: PUSH
24012: LD_STRING 
24014: ST_TO_ADDR
// hardcore :=  ;
24015: LD_ADDR_VAR 0 6
24019: PUSH
24020: LD_STRING 
24022: ST_TO_ADDR
// active :=  ;
24023: LD_ADDR_VAR 0 7
24027: PUSH
24028: LD_STRING 
24030: ST_TO_ADDR
// for i = 1 to normalCounter do
24031: LD_ADDR_VAR 0 8
24035: PUSH
24036: DOUBLE
24037: LD_INT 1
24039: DEC
24040: ST_TO_ADDR
24041: LD_EXP 63
24045: PUSH
24046: FOR_TO
24047: IFFALSE 24148
// begin tmp := 0 ;
24049: LD_ADDR_VAR 0 3
24053: PUSH
24054: LD_STRING 0
24056: ST_TO_ADDR
// if result [ 1 ] then
24057: LD_VAR 0 2
24061: PUSH
24062: LD_INT 1
24064: ARRAY
24065: IFFALSE 24130
// if result [ 1 ] [ 1 ] = i then
24067: LD_VAR 0 2
24071: PUSH
24072: LD_INT 1
24074: ARRAY
24075: PUSH
24076: LD_INT 1
24078: ARRAY
24079: PUSH
24080: LD_VAR 0 8
24084: EQUAL
24085: IFFALSE 24130
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24087: LD_ADDR_VAR 0 2
24091: PUSH
24092: LD_VAR 0 2
24096: PPUSH
24097: LD_INT 1
24099: PPUSH
24100: LD_VAR 0 2
24104: PUSH
24105: LD_INT 1
24107: ARRAY
24108: PPUSH
24109: LD_INT 1
24111: PPUSH
24112: CALL_OW 3
24116: PPUSH
24117: CALL_OW 1
24121: ST_TO_ADDR
// tmp := 1 ;
24122: LD_ADDR_VAR 0 3
24126: PUSH
24127: LD_STRING 1
24129: ST_TO_ADDR
// end ; normal := normal & tmp ;
24130: LD_ADDR_VAR 0 5
24134: PUSH
24135: LD_VAR 0 5
24139: PUSH
24140: LD_VAR 0 3
24144: STR
24145: ST_TO_ADDR
// end ;
24146: GO 24046
24148: POP
24149: POP
// for i = 1 to hardcoreCounter do
24150: LD_ADDR_VAR 0 8
24154: PUSH
24155: DOUBLE
24156: LD_INT 1
24158: DEC
24159: ST_TO_ADDR
24160: LD_EXP 64
24164: PUSH
24165: FOR_TO
24166: IFFALSE 24271
// begin tmp := 0 ;
24168: LD_ADDR_VAR 0 3
24172: PUSH
24173: LD_STRING 0
24175: ST_TO_ADDR
// if result [ 2 ] then
24176: LD_VAR 0 2
24180: PUSH
24181: LD_INT 2
24183: ARRAY
24184: IFFALSE 24253
// if result [ 2 ] [ 1 ] = 100 + i then
24186: LD_VAR 0 2
24190: PUSH
24191: LD_INT 2
24193: ARRAY
24194: PUSH
24195: LD_INT 1
24197: ARRAY
24198: PUSH
24199: LD_INT 100
24201: PUSH
24202: LD_VAR 0 8
24206: PLUS
24207: EQUAL
24208: IFFALSE 24253
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24210: LD_ADDR_VAR 0 2
24214: PUSH
24215: LD_VAR 0 2
24219: PPUSH
24220: LD_INT 2
24222: PPUSH
24223: LD_VAR 0 2
24227: PUSH
24228: LD_INT 2
24230: ARRAY
24231: PPUSH
24232: LD_INT 1
24234: PPUSH
24235: CALL_OW 3
24239: PPUSH
24240: CALL_OW 1
24244: ST_TO_ADDR
// tmp := 1 ;
24245: LD_ADDR_VAR 0 3
24249: PUSH
24250: LD_STRING 1
24252: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24253: LD_ADDR_VAR 0 6
24257: PUSH
24258: LD_VAR 0 6
24262: PUSH
24263: LD_VAR 0 3
24267: STR
24268: ST_TO_ADDR
// end ;
24269: GO 24165
24271: POP
24272: POP
// if isGameLoad then
24273: LD_VAR 0 1
24277: IFFALSE 24752
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24279: LD_ADDR_VAR 0 4
24283: PUSH
24284: LD_EXP 67
24288: PUSH
24289: LD_EXP 66
24293: PUSH
24294: LD_EXP 68
24298: PUSH
24299: LD_EXP 65
24303: PUSH
24304: LD_EXP 69
24308: PUSH
24309: LD_EXP 70
24313: PUSH
24314: LD_EXP 71
24318: PUSH
24319: LD_EXP 72
24323: PUSH
24324: LD_EXP 73
24328: PUSH
24329: LD_EXP 74
24333: PUSH
24334: LD_EXP 75
24338: PUSH
24339: LD_EXP 76
24343: PUSH
24344: LD_EXP 77
24348: PUSH
24349: LD_EXP 78
24353: PUSH
24354: LD_EXP 86
24358: PUSH
24359: LD_EXP 87
24363: PUSH
24364: LD_EXP 88
24368: PUSH
24369: LD_EXP 89
24373: PUSH
24374: LD_EXP 91
24378: PUSH
24379: LD_EXP 92
24383: PUSH
24384: LD_EXP 93
24388: PUSH
24389: LD_EXP 96
24393: PUSH
24394: LD_EXP 98
24398: PUSH
24399: LD_EXP 99
24403: PUSH
24404: LD_EXP 100
24408: PUSH
24409: LD_EXP 102
24413: PUSH
24414: LD_EXP 103
24418: PUSH
24419: LD_EXP 106
24423: PUSH
24424: LD_EXP 107
24428: PUSH
24429: LD_EXP 108
24433: PUSH
24434: LD_EXP 109
24438: PUSH
24439: LD_EXP 110
24443: PUSH
24444: LD_EXP 111
24448: PUSH
24449: LD_EXP 112
24453: PUSH
24454: LD_EXP 113
24458: PUSH
24459: LD_EXP 114
24463: PUSH
24464: LD_EXP 79
24468: PUSH
24469: LD_EXP 80
24473: PUSH
24474: LD_EXP 83
24478: PUSH
24479: LD_EXP 84
24483: PUSH
24484: LD_EXP 85
24488: PUSH
24489: LD_EXP 81
24493: PUSH
24494: LD_EXP 82
24498: PUSH
24499: LD_EXP 90
24503: PUSH
24504: LD_EXP 94
24508: PUSH
24509: LD_EXP 95
24513: PUSH
24514: LD_EXP 97
24518: PUSH
24519: LD_EXP 101
24523: PUSH
24524: LD_EXP 104
24528: PUSH
24529: LD_EXP 105
24533: PUSH
24534: LD_EXP 115
24538: PUSH
24539: LD_EXP 116
24543: PUSH
24544: LD_EXP 117
24548: PUSH
24549: LD_EXP 118
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: ST_TO_ADDR
// tmp :=  ;
24610: LD_ADDR_VAR 0 3
24614: PUSH
24615: LD_STRING 
24617: ST_TO_ADDR
// for i = 1 to normalCounter do
24618: LD_ADDR_VAR 0 8
24622: PUSH
24623: DOUBLE
24624: LD_INT 1
24626: DEC
24627: ST_TO_ADDR
24628: LD_EXP 63
24632: PUSH
24633: FOR_TO
24634: IFFALSE 24670
// begin if flags [ i ] then
24636: LD_VAR 0 4
24640: PUSH
24641: LD_VAR 0 8
24645: ARRAY
24646: IFFALSE 24668
// tmp := tmp & i & ; ;
24648: LD_ADDR_VAR 0 3
24652: PUSH
24653: LD_VAR 0 3
24657: PUSH
24658: LD_VAR 0 8
24662: STR
24663: PUSH
24664: LD_STRING ;
24666: STR
24667: ST_TO_ADDR
// end ;
24668: GO 24633
24670: POP
24671: POP
// for i = 1 to hardcoreCounter do
24672: LD_ADDR_VAR 0 8
24676: PUSH
24677: DOUBLE
24678: LD_INT 1
24680: DEC
24681: ST_TO_ADDR
24682: LD_EXP 64
24686: PUSH
24687: FOR_TO
24688: IFFALSE 24734
// begin if flags [ normalCounter + i ] then
24690: LD_VAR 0 4
24694: PUSH
24695: LD_EXP 63
24699: PUSH
24700: LD_VAR 0 8
24704: PLUS
24705: ARRAY
24706: IFFALSE 24732
// tmp := tmp & ( 100 + i ) & ; ;
24708: LD_ADDR_VAR 0 3
24712: PUSH
24713: LD_VAR 0 3
24717: PUSH
24718: LD_INT 100
24720: PUSH
24721: LD_VAR 0 8
24725: PLUS
24726: STR
24727: PUSH
24728: LD_STRING ;
24730: STR
24731: ST_TO_ADDR
// end ;
24732: GO 24687
24734: POP
24735: POP
// if tmp then
24736: LD_VAR 0 3
24740: IFFALSE 24752
// active := tmp ;
24742: LD_ADDR_VAR 0 7
24746: PUSH
24747: LD_VAR 0 3
24751: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24752: LD_STRING getStreamItemsFromMission("
24754: PUSH
24755: LD_VAR 0 5
24759: STR
24760: PUSH
24761: LD_STRING ","
24763: STR
24764: PUSH
24765: LD_VAR 0 6
24769: STR
24770: PUSH
24771: LD_STRING ","
24773: STR
24774: PUSH
24775: LD_VAR 0 7
24779: STR
24780: PUSH
24781: LD_STRING ")
24783: STR
24784: PPUSH
24785: CALL_OW 559
// end else
24789: GO 24798
// ToLua ( getStreamItemsFromMission("","","") ) ;
24791: LD_STRING getStreamItemsFromMission("","","")
24793: PPUSH
24794: CALL_OW 559
// end ;
24798: LD_VAR 0 2
24802: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24803: LD_EXP 62
24807: PUSH
24808: LD_EXP 67
24812: AND
24813: IFFALSE 24937
24815: GO 24817
24817: DISABLE
24818: LD_INT 0
24820: PPUSH
24821: PPUSH
// begin enable ;
24822: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24823: LD_ADDR_VAR 0 2
24827: PUSH
24828: LD_INT 22
24830: PUSH
24831: LD_OWVAR 2
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: LD_INT 34
24845: PUSH
24846: LD_INT 7
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 34
24855: PUSH
24856: LD_INT 45
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 34
24865: PUSH
24866: LD_INT 28
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 34
24875: PUSH
24876: LD_INT 47
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PPUSH
24894: CALL_OW 69
24898: ST_TO_ADDR
// if not tmp then
24899: LD_VAR 0 2
24903: NOT
24904: IFFALSE 24908
// exit ;
24906: GO 24937
// for i in tmp do
24908: LD_ADDR_VAR 0 1
24912: PUSH
24913: LD_VAR 0 2
24917: PUSH
24918: FOR_IN
24919: IFFALSE 24935
// begin SetLives ( i , 0 ) ;
24921: LD_VAR 0 1
24925: PPUSH
24926: LD_INT 0
24928: PPUSH
24929: CALL_OW 234
// end ;
24933: GO 24918
24935: POP
24936: POP
// end ;
24937: PPOPN 2
24939: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24940: LD_EXP 62
24944: PUSH
24945: LD_EXP 68
24949: AND
24950: IFFALSE 25034
24952: GO 24954
24954: DISABLE
24955: LD_INT 0
24957: PPUSH
24958: PPUSH
// begin enable ;
24959: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24960: LD_ADDR_VAR 0 2
24964: PUSH
24965: LD_INT 22
24967: PUSH
24968: LD_OWVAR 2
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 32
24979: PUSH
24980: LD_INT 3
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PPUSH
24991: CALL_OW 69
24995: ST_TO_ADDR
// if not tmp then
24996: LD_VAR 0 2
25000: NOT
25001: IFFALSE 25005
// exit ;
25003: GO 25034
// for i in tmp do
25005: LD_ADDR_VAR 0 1
25009: PUSH
25010: LD_VAR 0 2
25014: PUSH
25015: FOR_IN
25016: IFFALSE 25032
// begin SetLives ( i , 0 ) ;
25018: LD_VAR 0 1
25022: PPUSH
25023: LD_INT 0
25025: PPUSH
25026: CALL_OW 234
// end ;
25030: GO 25015
25032: POP
25033: POP
// end ;
25034: PPOPN 2
25036: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25037: LD_EXP 62
25041: PUSH
25042: LD_EXP 65
25046: AND
25047: IFFALSE 25140
25049: GO 25051
25051: DISABLE
25052: LD_INT 0
25054: PPUSH
// begin enable ;
25055: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25056: LD_ADDR_VAR 0 1
25060: PUSH
25061: LD_INT 22
25063: PUSH
25064: LD_OWVAR 2
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 25
25078: PUSH
25079: LD_INT 5
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 25
25088: PUSH
25089: LD_INT 9
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 25
25098: PUSH
25099: LD_INT 8
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PPUSH
25116: CALL_OW 69
25120: PUSH
25121: FOR_IN
25122: IFFALSE 25138
// begin SetClass ( i , 1 ) ;
25124: LD_VAR 0 1
25128: PPUSH
25129: LD_INT 1
25131: PPUSH
25132: CALL_OW 336
// end ;
25136: GO 25121
25138: POP
25139: POP
// end ;
25140: PPOPN 1
25142: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25143: LD_EXP 62
25147: PUSH
25148: LD_EXP 66
25152: AND
25153: PUSH
25154: LD_OWVAR 65
25158: PUSH
25159: LD_INT 7
25161: LESS
25162: AND
25163: IFFALSE 25177
25165: GO 25167
25167: DISABLE
// begin enable ;
25168: ENABLE
// game_speed := 7 ;
25169: LD_ADDR_OWVAR 65
25173: PUSH
25174: LD_INT 7
25176: ST_TO_ADDR
// end ;
25177: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25178: LD_EXP 62
25182: PUSH
25183: LD_EXP 69
25187: AND
25188: IFFALSE 25390
25190: GO 25192
25192: DISABLE
25193: LD_INT 0
25195: PPUSH
25196: PPUSH
25197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25198: LD_ADDR_VAR 0 3
25202: PUSH
25203: LD_INT 81
25205: PUSH
25206: LD_OWVAR 2
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 21
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PPUSH
25229: CALL_OW 69
25233: ST_TO_ADDR
// if not tmp then
25234: LD_VAR 0 3
25238: NOT
25239: IFFALSE 25243
// exit ;
25241: GO 25390
// if tmp > 5 then
25243: LD_VAR 0 3
25247: PUSH
25248: LD_INT 5
25250: GREATER
25251: IFFALSE 25263
// k := 5 else
25253: LD_ADDR_VAR 0 2
25257: PUSH
25258: LD_INT 5
25260: ST_TO_ADDR
25261: GO 25273
// k := tmp ;
25263: LD_ADDR_VAR 0 2
25267: PUSH
25268: LD_VAR 0 3
25272: ST_TO_ADDR
// for i := 1 to k do
25273: LD_ADDR_VAR 0 1
25277: PUSH
25278: DOUBLE
25279: LD_INT 1
25281: DEC
25282: ST_TO_ADDR
25283: LD_VAR 0 2
25287: PUSH
25288: FOR_TO
25289: IFFALSE 25388
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25291: LD_VAR 0 3
25295: PUSH
25296: LD_VAR 0 1
25300: ARRAY
25301: PPUSH
25302: LD_VAR 0 1
25306: PUSH
25307: LD_INT 4
25309: MOD
25310: PUSH
25311: LD_INT 1
25313: PLUS
25314: PPUSH
25315: CALL_OW 259
25319: PUSH
25320: LD_INT 10
25322: LESS
25323: IFFALSE 25386
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25325: LD_VAR 0 3
25329: PUSH
25330: LD_VAR 0 1
25334: ARRAY
25335: PPUSH
25336: LD_VAR 0 1
25340: PUSH
25341: LD_INT 4
25343: MOD
25344: PUSH
25345: LD_INT 1
25347: PLUS
25348: PPUSH
25349: LD_VAR 0 3
25353: PUSH
25354: LD_VAR 0 1
25358: ARRAY
25359: PPUSH
25360: LD_VAR 0 1
25364: PUSH
25365: LD_INT 4
25367: MOD
25368: PUSH
25369: LD_INT 1
25371: PLUS
25372: PPUSH
25373: CALL_OW 259
25377: PUSH
25378: LD_INT 1
25380: PLUS
25381: PPUSH
25382: CALL_OW 237
25386: GO 25288
25388: POP
25389: POP
// end ;
25390: PPOPN 3
25392: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25393: LD_EXP 62
25397: PUSH
25398: LD_EXP 70
25402: AND
25403: IFFALSE 25423
25405: GO 25407
25407: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25408: LD_INT 4
25410: PPUSH
25411: LD_OWVAR 2
25415: PPUSH
25416: LD_INT 0
25418: PPUSH
25419: CALL_OW 324
25423: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25424: LD_EXP 62
25428: PUSH
25429: LD_EXP 99
25433: AND
25434: IFFALSE 25454
25436: GO 25438
25438: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25439: LD_INT 19
25441: PPUSH
25442: LD_OWVAR 2
25446: PPUSH
25447: LD_INT 0
25449: PPUSH
25450: CALL_OW 324
25454: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25455: LD_EXP 62
25459: PUSH
25460: LD_EXP 71
25464: AND
25465: IFFALSE 25567
25467: GO 25469
25469: DISABLE
25470: LD_INT 0
25472: PPUSH
25473: PPUSH
// begin enable ;
25474: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25475: LD_ADDR_VAR 0 2
25479: PUSH
25480: LD_INT 22
25482: PUSH
25483: LD_OWVAR 2
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: LD_INT 34
25497: PUSH
25498: LD_INT 11
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 34
25507: PUSH
25508: LD_INT 30
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PPUSH
25524: CALL_OW 69
25528: ST_TO_ADDR
// if not tmp then
25529: LD_VAR 0 2
25533: NOT
25534: IFFALSE 25538
// exit ;
25536: GO 25567
// for i in tmp do
25538: LD_ADDR_VAR 0 1
25542: PUSH
25543: LD_VAR 0 2
25547: PUSH
25548: FOR_IN
25549: IFFALSE 25565
// begin SetLives ( i , 0 ) ;
25551: LD_VAR 0 1
25555: PPUSH
25556: LD_INT 0
25558: PPUSH
25559: CALL_OW 234
// end ;
25563: GO 25548
25565: POP
25566: POP
// end ;
25567: PPOPN 2
25569: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25570: LD_EXP 62
25574: PUSH
25575: LD_EXP 72
25579: AND
25580: IFFALSE 25600
25582: GO 25584
25584: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25585: LD_INT 32
25587: PPUSH
25588: LD_OWVAR 2
25592: PPUSH
25593: LD_INT 0
25595: PPUSH
25596: CALL_OW 324
25600: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25601: LD_EXP 62
25605: PUSH
25606: LD_EXP 73
25610: AND
25611: IFFALSE 25792
25613: GO 25615
25615: DISABLE
25616: LD_INT 0
25618: PPUSH
25619: PPUSH
25620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25621: LD_ADDR_VAR 0 2
25625: PUSH
25626: LD_INT 22
25628: PUSH
25629: LD_OWVAR 2
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 33
25640: PUSH
25641: LD_INT 3
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PPUSH
25652: CALL_OW 69
25656: ST_TO_ADDR
// if not tmp then
25657: LD_VAR 0 2
25661: NOT
25662: IFFALSE 25666
// exit ;
25664: GO 25792
// side := 0 ;
25666: LD_ADDR_VAR 0 3
25670: PUSH
25671: LD_INT 0
25673: ST_TO_ADDR
// for i := 1 to 8 do
25674: LD_ADDR_VAR 0 1
25678: PUSH
25679: DOUBLE
25680: LD_INT 1
25682: DEC
25683: ST_TO_ADDR
25684: LD_INT 8
25686: PUSH
25687: FOR_TO
25688: IFFALSE 25736
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25690: LD_OWVAR 2
25694: PUSH
25695: LD_VAR 0 1
25699: NONEQUAL
25700: PUSH
25701: LD_OWVAR 2
25705: PPUSH
25706: LD_VAR 0 1
25710: PPUSH
25711: CALL_OW 81
25715: PUSH
25716: LD_INT 2
25718: EQUAL
25719: AND
25720: IFFALSE 25734
// begin side := i ;
25722: LD_ADDR_VAR 0 3
25726: PUSH
25727: LD_VAR 0 1
25731: ST_TO_ADDR
// break ;
25732: GO 25736
// end ;
25734: GO 25687
25736: POP
25737: POP
// if not side then
25738: LD_VAR 0 3
25742: NOT
25743: IFFALSE 25747
// exit ;
25745: GO 25792
// for i := 1 to tmp do
25747: LD_ADDR_VAR 0 1
25751: PUSH
25752: DOUBLE
25753: LD_INT 1
25755: DEC
25756: ST_TO_ADDR
25757: LD_VAR 0 2
25761: PUSH
25762: FOR_TO
25763: IFFALSE 25790
// if Prob ( 60 ) then
25765: LD_INT 60
25767: PPUSH
25768: CALL_OW 13
25772: IFFALSE 25788
// SetSide ( i , side ) ;
25774: LD_VAR 0 1
25778: PPUSH
25779: LD_VAR 0 3
25783: PPUSH
25784: CALL_OW 235
25788: GO 25762
25790: POP
25791: POP
// end ;
25792: PPOPN 3
25794: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25795: LD_EXP 62
25799: PUSH
25800: LD_EXP 75
25804: AND
25805: IFFALSE 25924
25807: GO 25809
25809: DISABLE
25810: LD_INT 0
25812: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25813: LD_ADDR_VAR 0 1
25817: PUSH
25818: LD_INT 22
25820: PUSH
25821: LD_OWVAR 2
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 21
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 3
25842: PUSH
25843: LD_INT 23
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: PPUSH
25862: CALL_OW 69
25866: PUSH
25867: FOR_IN
25868: IFFALSE 25922
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25870: LD_VAR 0 1
25874: PPUSH
25875: CALL_OW 257
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: LD_INT 3
25888: PUSH
25889: LD_INT 4
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: IN
25898: IFFALSE 25920
// SetClass ( un , rand ( 1 , 4 ) ) ;
25900: LD_VAR 0 1
25904: PPUSH
25905: LD_INT 1
25907: PPUSH
25908: LD_INT 4
25910: PPUSH
25911: CALL_OW 12
25915: PPUSH
25916: CALL_OW 336
25920: GO 25867
25922: POP
25923: POP
// end ;
25924: PPOPN 1
25926: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25927: LD_EXP 62
25931: PUSH
25932: LD_EXP 74
25936: AND
25937: IFFALSE 26016
25939: GO 25941
25941: DISABLE
25942: LD_INT 0
25944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25945: LD_ADDR_VAR 0 1
25949: PUSH
25950: LD_INT 22
25952: PUSH
25953: LD_OWVAR 2
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 21
25964: PUSH
25965: LD_INT 3
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PPUSH
25976: CALL_OW 69
25980: ST_TO_ADDR
// if not tmp then
25981: LD_VAR 0 1
25985: NOT
25986: IFFALSE 25990
// exit ;
25988: GO 26016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25990: LD_VAR 0 1
25994: PUSH
25995: LD_INT 1
25997: PPUSH
25998: LD_VAR 0 1
26002: PPUSH
26003: CALL_OW 12
26007: ARRAY
26008: PPUSH
26009: LD_INT 100
26011: PPUSH
26012: CALL_OW 234
// end ;
26016: PPOPN 1
26018: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26019: LD_EXP 62
26023: PUSH
26024: LD_EXP 76
26028: AND
26029: IFFALSE 26127
26031: GO 26033
26033: DISABLE
26034: LD_INT 0
26036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26037: LD_ADDR_VAR 0 1
26041: PUSH
26042: LD_INT 22
26044: PUSH
26045: LD_OWVAR 2
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 21
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PPUSH
26068: CALL_OW 69
26072: ST_TO_ADDR
// if not tmp then
26073: LD_VAR 0 1
26077: NOT
26078: IFFALSE 26082
// exit ;
26080: GO 26127
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26082: LD_VAR 0 1
26086: PUSH
26087: LD_INT 1
26089: PPUSH
26090: LD_VAR 0 1
26094: PPUSH
26095: CALL_OW 12
26099: ARRAY
26100: PPUSH
26101: LD_INT 1
26103: PPUSH
26104: LD_INT 4
26106: PPUSH
26107: CALL_OW 12
26111: PPUSH
26112: LD_INT 3000
26114: PPUSH
26115: LD_INT 9000
26117: PPUSH
26118: CALL_OW 12
26122: PPUSH
26123: CALL_OW 492
// end ;
26127: PPOPN 1
26129: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26130: LD_EXP 62
26134: PUSH
26135: LD_EXP 77
26139: AND
26140: IFFALSE 26160
26142: GO 26144
26144: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26145: LD_INT 1
26147: PPUSH
26148: LD_OWVAR 2
26152: PPUSH
26153: LD_INT 0
26155: PPUSH
26156: CALL_OW 324
26160: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26161: LD_EXP 62
26165: PUSH
26166: LD_EXP 78
26170: AND
26171: IFFALSE 26254
26173: GO 26175
26175: DISABLE
26176: LD_INT 0
26178: PPUSH
26179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26180: LD_ADDR_VAR 0 2
26184: PUSH
26185: LD_INT 22
26187: PUSH
26188: LD_OWVAR 2
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 21
26199: PUSH
26200: LD_INT 3
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PPUSH
26211: CALL_OW 69
26215: ST_TO_ADDR
// if not tmp then
26216: LD_VAR 0 2
26220: NOT
26221: IFFALSE 26225
// exit ;
26223: GO 26254
// for i in tmp do
26225: LD_ADDR_VAR 0 1
26229: PUSH
26230: LD_VAR 0 2
26234: PUSH
26235: FOR_IN
26236: IFFALSE 26252
// SetBLevel ( i , 10 ) ;
26238: LD_VAR 0 1
26242: PPUSH
26243: LD_INT 10
26245: PPUSH
26246: CALL_OW 241
26250: GO 26235
26252: POP
26253: POP
// end ;
26254: PPOPN 2
26256: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26257: LD_EXP 62
26261: PUSH
26262: LD_EXP 79
26266: AND
26267: IFFALSE 26378
26269: GO 26271
26271: DISABLE
26272: LD_INT 0
26274: PPUSH
26275: PPUSH
26276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26277: LD_ADDR_VAR 0 3
26281: PUSH
26282: LD_INT 22
26284: PUSH
26285: LD_OWVAR 2
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 25
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PPUSH
26308: CALL_OW 69
26312: ST_TO_ADDR
// if not tmp then
26313: LD_VAR 0 3
26317: NOT
26318: IFFALSE 26322
// exit ;
26320: GO 26378
// un := tmp [ rand ( 1 , tmp ) ] ;
26322: LD_ADDR_VAR 0 2
26326: PUSH
26327: LD_VAR 0 3
26331: PUSH
26332: LD_INT 1
26334: PPUSH
26335: LD_VAR 0 3
26339: PPUSH
26340: CALL_OW 12
26344: ARRAY
26345: ST_TO_ADDR
// if Crawls ( un ) then
26346: LD_VAR 0 2
26350: PPUSH
26351: CALL_OW 318
26355: IFFALSE 26366
// ComWalk ( un ) ;
26357: LD_VAR 0 2
26361: PPUSH
26362: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26366: LD_VAR 0 2
26370: PPUSH
26371: LD_INT 5
26373: PPUSH
26374: CALL_OW 336
// end ;
26378: PPOPN 3
26380: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26381: LD_EXP 62
26385: PUSH
26386: LD_EXP 80
26390: AND
26391: PUSH
26392: LD_OWVAR 67
26396: PUSH
26397: LD_INT 4
26399: LESS
26400: AND
26401: IFFALSE 26420
26403: GO 26405
26405: DISABLE
// begin Difficulty := Difficulty + 1 ;
26406: LD_ADDR_OWVAR 67
26410: PUSH
26411: LD_OWVAR 67
26415: PUSH
26416: LD_INT 1
26418: PLUS
26419: ST_TO_ADDR
// end ;
26420: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26421: LD_EXP 62
26425: PUSH
26426: LD_EXP 81
26430: AND
26431: IFFALSE 26534
26433: GO 26435
26435: DISABLE
26436: LD_INT 0
26438: PPUSH
// begin for i := 1 to 5 do
26439: LD_ADDR_VAR 0 1
26443: PUSH
26444: DOUBLE
26445: LD_INT 1
26447: DEC
26448: ST_TO_ADDR
26449: LD_INT 5
26451: PUSH
26452: FOR_TO
26453: IFFALSE 26532
// begin uc_nation := nation_nature ;
26455: LD_ADDR_OWVAR 21
26459: PUSH
26460: LD_INT 0
26462: ST_TO_ADDR
// uc_side := 0 ;
26463: LD_ADDR_OWVAR 20
26467: PUSH
26468: LD_INT 0
26470: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26471: LD_ADDR_OWVAR 29
26475: PUSH
26476: LD_INT 12
26478: PUSH
26479: LD_INT 12
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: ST_TO_ADDR
// hc_agressivity := 20 ;
26486: LD_ADDR_OWVAR 35
26490: PUSH
26491: LD_INT 20
26493: ST_TO_ADDR
// hc_class := class_tiger ;
26494: LD_ADDR_OWVAR 28
26498: PUSH
26499: LD_INT 14
26501: ST_TO_ADDR
// hc_gallery :=  ;
26502: LD_ADDR_OWVAR 33
26506: PUSH
26507: LD_STRING 
26509: ST_TO_ADDR
// hc_name :=  ;
26510: LD_ADDR_OWVAR 26
26514: PUSH
26515: LD_STRING 
26517: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26518: CALL_OW 44
26522: PPUSH
26523: LD_INT 0
26525: PPUSH
26526: CALL_OW 51
// end ;
26530: GO 26452
26532: POP
26533: POP
// end ;
26534: PPOPN 1
26536: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26537: LD_EXP 62
26541: PUSH
26542: LD_EXP 82
26546: AND
26547: IFFALSE 26556
26549: GO 26551
26551: DISABLE
// StreamSibBomb ;
26552: CALL 26557 0 0
26556: END
// export function StreamSibBomb ; var i , x , y ; begin
26557: LD_INT 0
26559: PPUSH
26560: PPUSH
26561: PPUSH
26562: PPUSH
// result := false ;
26563: LD_ADDR_VAR 0 1
26567: PUSH
26568: LD_INT 0
26570: ST_TO_ADDR
// for i := 1 to 16 do
26571: LD_ADDR_VAR 0 2
26575: PUSH
26576: DOUBLE
26577: LD_INT 1
26579: DEC
26580: ST_TO_ADDR
26581: LD_INT 16
26583: PUSH
26584: FOR_TO
26585: IFFALSE 26784
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26587: LD_ADDR_VAR 0 3
26591: PUSH
26592: LD_INT 10
26594: PUSH
26595: LD_INT 20
26597: PUSH
26598: LD_INT 30
26600: PUSH
26601: LD_INT 40
26603: PUSH
26604: LD_INT 50
26606: PUSH
26607: LD_INT 60
26609: PUSH
26610: LD_INT 70
26612: PUSH
26613: LD_INT 80
26615: PUSH
26616: LD_INT 90
26618: PUSH
26619: LD_INT 100
26621: PUSH
26622: LD_INT 110
26624: PUSH
26625: LD_INT 120
26627: PUSH
26628: LD_INT 130
26630: PUSH
26631: LD_INT 140
26633: PUSH
26634: LD_INT 150
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PPUSH
26657: LD_INT 15
26659: PPUSH
26660: CALL_OW 12
26664: ARRAY
26665: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26666: LD_ADDR_VAR 0 4
26670: PUSH
26671: LD_INT 10
26673: PUSH
26674: LD_INT 20
26676: PUSH
26677: LD_INT 30
26679: PUSH
26680: LD_INT 40
26682: PUSH
26683: LD_INT 50
26685: PUSH
26686: LD_INT 60
26688: PUSH
26689: LD_INT 70
26691: PUSH
26692: LD_INT 80
26694: PUSH
26695: LD_INT 90
26697: PUSH
26698: LD_INT 100
26700: PUSH
26701: LD_INT 110
26703: PUSH
26704: LD_INT 120
26706: PUSH
26707: LD_INT 130
26709: PUSH
26710: LD_INT 140
26712: PUSH
26713: LD_INT 150
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: PPUSH
26736: LD_INT 15
26738: PPUSH
26739: CALL_OW 12
26743: ARRAY
26744: ST_TO_ADDR
// if ValidHex ( x , y ) then
26745: LD_VAR 0 3
26749: PPUSH
26750: LD_VAR 0 4
26754: PPUSH
26755: CALL_OW 488
26759: IFFALSE 26782
// begin result := [ x , y ] ;
26761: LD_ADDR_VAR 0 1
26765: PUSH
26766: LD_VAR 0 3
26770: PUSH
26771: LD_VAR 0 4
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: ST_TO_ADDR
// break ;
26780: GO 26784
// end ; end ;
26782: GO 26584
26784: POP
26785: POP
// if result then
26786: LD_VAR 0 1
26790: IFFALSE 26850
// begin ToLua ( playSibBomb() ) ;
26792: LD_STRING playSibBomb()
26794: PPUSH
26795: CALL_OW 559
// wait ( 0 0$14 ) ;
26799: LD_INT 490
26801: PPUSH
26802: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26806: LD_VAR 0 1
26810: PUSH
26811: LD_INT 1
26813: ARRAY
26814: PPUSH
26815: LD_VAR 0 1
26819: PUSH
26820: LD_INT 2
26822: ARRAY
26823: PPUSH
26824: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26828: LD_VAR 0 1
26832: PUSH
26833: LD_INT 1
26835: ARRAY
26836: PPUSH
26837: LD_VAR 0 1
26841: PUSH
26842: LD_INT 2
26844: ARRAY
26845: PPUSH
26846: CALL_OW 429
// end ; end ;
26850: LD_VAR 0 1
26854: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26855: LD_EXP 62
26859: PUSH
26860: LD_EXP 84
26864: AND
26865: IFFALSE 26877
26867: GO 26869
26869: DISABLE
// YouLost (  ) ;
26870: LD_STRING 
26872: PPUSH
26873: CALL_OW 104
26877: END
// every 0 0$1 trigger StreamModeActive and sFog do
26878: LD_EXP 62
26882: PUSH
26883: LD_EXP 83
26887: AND
26888: IFFALSE 26902
26890: GO 26892
26892: DISABLE
// FogOff ( your_side ) ;
26893: LD_OWVAR 2
26897: PPUSH
26898: CALL_OW 344
26902: END
// every 0 0$1 trigger StreamModeActive and sSun do
26903: LD_EXP 62
26907: PUSH
26908: LD_EXP 85
26912: AND
26913: IFFALSE 26941
26915: GO 26917
26917: DISABLE
// begin solar_recharge_percent := 0 ;
26918: LD_ADDR_OWVAR 79
26922: PUSH
26923: LD_INT 0
26925: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26926: LD_INT 10500
26928: PPUSH
26929: CALL_OW 67
// solar_recharge_percent := 100 ;
26933: LD_ADDR_OWVAR 79
26937: PUSH
26938: LD_INT 100
26940: ST_TO_ADDR
// end ;
26941: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26942: LD_EXP 62
26946: PUSH
26947: LD_EXP 86
26951: AND
26952: IFFALSE 27191
26954: GO 26956
26956: DISABLE
26957: LD_INT 0
26959: PPUSH
26960: PPUSH
26961: PPUSH
// begin tmp := [ ] ;
26962: LD_ADDR_VAR 0 3
26966: PUSH
26967: EMPTY
26968: ST_TO_ADDR
// for i := 1 to 6 do
26969: LD_ADDR_VAR 0 1
26973: PUSH
26974: DOUBLE
26975: LD_INT 1
26977: DEC
26978: ST_TO_ADDR
26979: LD_INT 6
26981: PUSH
26982: FOR_TO
26983: IFFALSE 27088
// begin uc_nation := nation_nature ;
26985: LD_ADDR_OWVAR 21
26989: PUSH
26990: LD_INT 0
26992: ST_TO_ADDR
// uc_side := 0 ;
26993: LD_ADDR_OWVAR 20
26997: PUSH
26998: LD_INT 0
27000: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27001: LD_ADDR_OWVAR 29
27005: PUSH
27006: LD_INT 12
27008: PUSH
27009: LD_INT 12
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: ST_TO_ADDR
// hc_agressivity := 20 ;
27016: LD_ADDR_OWVAR 35
27020: PUSH
27021: LD_INT 20
27023: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27024: LD_ADDR_OWVAR 28
27028: PUSH
27029: LD_INT 17
27031: ST_TO_ADDR
// hc_gallery :=  ;
27032: LD_ADDR_OWVAR 33
27036: PUSH
27037: LD_STRING 
27039: ST_TO_ADDR
// hc_name :=  ;
27040: LD_ADDR_OWVAR 26
27044: PUSH
27045: LD_STRING 
27047: ST_TO_ADDR
// un := CreateHuman ;
27048: LD_ADDR_VAR 0 2
27052: PUSH
27053: CALL_OW 44
27057: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27058: LD_VAR 0 2
27062: PPUSH
27063: LD_INT 1
27065: PPUSH
27066: CALL_OW 51
// tmp := tmp ^ un ;
27070: LD_ADDR_VAR 0 3
27074: PUSH
27075: LD_VAR 0 3
27079: PUSH
27080: LD_VAR 0 2
27084: ADD
27085: ST_TO_ADDR
// end ;
27086: GO 26982
27088: POP
27089: POP
// repeat wait ( 0 0$1 ) ;
27090: LD_INT 35
27092: PPUSH
27093: CALL_OW 67
// for un in tmp do
27097: LD_ADDR_VAR 0 2
27101: PUSH
27102: LD_VAR 0 3
27106: PUSH
27107: FOR_IN
27108: IFFALSE 27182
// begin if IsDead ( un ) then
27110: LD_VAR 0 2
27114: PPUSH
27115: CALL_OW 301
27119: IFFALSE 27139
// begin tmp := tmp diff un ;
27121: LD_ADDR_VAR 0 3
27125: PUSH
27126: LD_VAR 0 3
27130: PUSH
27131: LD_VAR 0 2
27135: DIFF
27136: ST_TO_ADDR
// continue ;
27137: GO 27107
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27139: LD_VAR 0 2
27143: PPUSH
27144: LD_INT 3
27146: PUSH
27147: LD_INT 22
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PPUSH
27161: CALL_OW 69
27165: PPUSH
27166: LD_VAR 0 2
27170: PPUSH
27171: CALL_OW 74
27175: PPUSH
27176: CALL_OW 115
// end ;
27180: GO 27107
27182: POP
27183: POP
// until not tmp ;
27184: LD_VAR 0 3
27188: NOT
27189: IFFALSE 27090
// end ;
27191: PPOPN 3
27193: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27194: LD_EXP 62
27198: PUSH
27199: LD_EXP 87
27203: AND
27204: IFFALSE 27258
27206: GO 27208
27208: DISABLE
// begin ToLua ( displayTroll(); ) ;
27209: LD_STRING displayTroll();
27211: PPUSH
27212: CALL_OW 559
// wait ( 3 3$00 ) ;
27216: LD_INT 6300
27218: PPUSH
27219: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27223: LD_STRING hideTroll();
27225: PPUSH
27226: CALL_OW 559
// wait ( 1 1$00 ) ;
27230: LD_INT 2100
27232: PPUSH
27233: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27237: LD_STRING displayTroll();
27239: PPUSH
27240: CALL_OW 559
// wait ( 1 1$00 ) ;
27244: LD_INT 2100
27246: PPUSH
27247: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27251: LD_STRING hideTroll();
27253: PPUSH
27254: CALL_OW 559
// end ;
27258: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27259: LD_EXP 62
27263: PUSH
27264: LD_EXP 88
27268: AND
27269: IFFALSE 27332
27271: GO 27273
27273: DISABLE
27274: LD_INT 0
27276: PPUSH
// begin p := 0 ;
27277: LD_ADDR_VAR 0 1
27281: PUSH
27282: LD_INT 0
27284: ST_TO_ADDR
// repeat game_speed := 1 ;
27285: LD_ADDR_OWVAR 65
27289: PUSH
27290: LD_INT 1
27292: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27293: LD_INT 35
27295: PPUSH
27296: CALL_OW 67
// p := p + 1 ;
27300: LD_ADDR_VAR 0 1
27304: PUSH
27305: LD_VAR 0 1
27309: PUSH
27310: LD_INT 1
27312: PLUS
27313: ST_TO_ADDR
// until p >= 60 ;
27314: LD_VAR 0 1
27318: PUSH
27319: LD_INT 60
27321: GREATEREQUAL
27322: IFFALSE 27285
// game_speed := 4 ;
27324: LD_ADDR_OWVAR 65
27328: PUSH
27329: LD_INT 4
27331: ST_TO_ADDR
// end ;
27332: PPOPN 1
27334: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27335: LD_EXP 62
27339: PUSH
27340: LD_EXP 89
27344: AND
27345: IFFALSE 27491
27347: GO 27349
27349: DISABLE
27350: LD_INT 0
27352: PPUSH
27353: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27354: LD_ADDR_VAR 0 1
27358: PUSH
27359: LD_INT 22
27361: PUSH
27362: LD_OWVAR 2
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 2
27373: PUSH
27374: LD_INT 30
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 30
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: LIST
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PPUSH
27403: CALL_OW 69
27407: ST_TO_ADDR
// if not depot then
27408: LD_VAR 0 1
27412: NOT
27413: IFFALSE 27417
// exit ;
27415: GO 27491
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27417: LD_ADDR_VAR 0 2
27421: PUSH
27422: LD_VAR 0 1
27426: PUSH
27427: LD_INT 1
27429: PPUSH
27430: LD_VAR 0 1
27434: PPUSH
27435: CALL_OW 12
27439: ARRAY
27440: PPUSH
27441: CALL_OW 274
27445: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27446: LD_VAR 0 2
27450: PPUSH
27451: LD_INT 1
27453: PPUSH
27454: LD_INT 0
27456: PPUSH
27457: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27461: LD_VAR 0 2
27465: PPUSH
27466: LD_INT 2
27468: PPUSH
27469: LD_INT 0
27471: PPUSH
27472: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27476: LD_VAR 0 2
27480: PPUSH
27481: LD_INT 3
27483: PPUSH
27484: LD_INT 0
27486: PPUSH
27487: CALL_OW 277
// end ;
27491: PPOPN 2
27493: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27494: LD_EXP 62
27498: PUSH
27499: LD_EXP 90
27503: AND
27504: IFFALSE 27601
27506: GO 27508
27508: DISABLE
27509: LD_INT 0
27511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27512: LD_ADDR_VAR 0 1
27516: PUSH
27517: LD_INT 22
27519: PUSH
27520: LD_OWVAR 2
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 21
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 3
27541: PUSH
27542: LD_INT 23
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: PPUSH
27561: CALL_OW 69
27565: ST_TO_ADDR
// if not tmp then
27566: LD_VAR 0 1
27570: NOT
27571: IFFALSE 27575
// exit ;
27573: GO 27601
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27575: LD_VAR 0 1
27579: PUSH
27580: LD_INT 1
27582: PPUSH
27583: LD_VAR 0 1
27587: PPUSH
27588: CALL_OW 12
27592: ARRAY
27593: PPUSH
27594: LD_INT 200
27596: PPUSH
27597: CALL_OW 234
// end ;
27601: PPOPN 1
27603: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27604: LD_EXP 62
27608: PUSH
27609: LD_EXP 91
27613: AND
27614: IFFALSE 27693
27616: GO 27618
27618: DISABLE
27619: LD_INT 0
27621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27622: LD_ADDR_VAR 0 1
27626: PUSH
27627: LD_INT 22
27629: PUSH
27630: LD_OWVAR 2
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 21
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PPUSH
27653: CALL_OW 69
27657: ST_TO_ADDR
// if not tmp then
27658: LD_VAR 0 1
27662: NOT
27663: IFFALSE 27667
// exit ;
27665: GO 27693
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27667: LD_VAR 0 1
27671: PUSH
27672: LD_INT 1
27674: PPUSH
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 12
27684: ARRAY
27685: PPUSH
27686: LD_INT 60
27688: PPUSH
27689: CALL_OW 234
// end ;
27693: PPOPN 1
27695: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27696: LD_EXP 62
27700: PUSH
27701: LD_EXP 92
27705: AND
27706: IFFALSE 27805
27708: GO 27710
27710: DISABLE
27711: LD_INT 0
27713: PPUSH
27714: PPUSH
// begin enable ;
27715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27716: LD_ADDR_VAR 0 1
27720: PUSH
27721: LD_INT 22
27723: PUSH
27724: LD_OWVAR 2
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 61
27735: PUSH
27736: EMPTY
27737: LIST
27738: PUSH
27739: LD_INT 33
27741: PUSH
27742: LD_INT 2
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: LIST
27753: PPUSH
27754: CALL_OW 69
27758: ST_TO_ADDR
// if not tmp then
27759: LD_VAR 0 1
27763: NOT
27764: IFFALSE 27768
// exit ;
27766: GO 27805
// for i in tmp do
27768: LD_ADDR_VAR 0 2
27772: PUSH
27773: LD_VAR 0 1
27777: PUSH
27778: FOR_IN
27779: IFFALSE 27803
// if IsControledBy ( i ) then
27781: LD_VAR 0 2
27785: PPUSH
27786: CALL_OW 312
27790: IFFALSE 27801
// ComUnlink ( i ) ;
27792: LD_VAR 0 2
27796: PPUSH
27797: CALL_OW 136
27801: GO 27778
27803: POP
27804: POP
// end ;
27805: PPOPN 2
27807: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27808: LD_EXP 62
27812: PUSH
27813: LD_EXP 93
27817: AND
27818: IFFALSE 27958
27820: GO 27822
27822: DISABLE
27823: LD_INT 0
27825: PPUSH
27826: PPUSH
// begin ToLua ( displayPowell(); ) ;
27827: LD_STRING displayPowell();
27829: PPUSH
27830: CALL_OW 559
// uc_side := 0 ;
27834: LD_ADDR_OWVAR 20
27838: PUSH
27839: LD_INT 0
27841: ST_TO_ADDR
// uc_nation := 2 ;
27842: LD_ADDR_OWVAR 21
27846: PUSH
27847: LD_INT 2
27849: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27850: LD_ADDR_OWVAR 37
27854: PUSH
27855: LD_INT 14
27857: ST_TO_ADDR
// vc_engine := engine_siberite ;
27858: LD_ADDR_OWVAR 39
27862: PUSH
27863: LD_INT 3
27865: ST_TO_ADDR
// vc_control := control_apeman ;
27866: LD_ADDR_OWVAR 38
27870: PUSH
27871: LD_INT 5
27873: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27874: LD_ADDR_OWVAR 40
27878: PUSH
27879: LD_INT 29
27881: ST_TO_ADDR
// un := CreateVehicle ;
27882: LD_ADDR_VAR 0 2
27886: PUSH
27887: CALL_OW 45
27891: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27892: LD_VAR 0 2
27896: PPUSH
27897: LD_INT 1
27899: PPUSH
27900: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27904: LD_INT 35
27906: PPUSH
27907: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27911: LD_VAR 0 2
27915: PPUSH
27916: LD_INT 22
27918: PUSH
27919: LD_OWVAR 2
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PPUSH
27928: CALL_OW 69
27932: PPUSH
27933: LD_VAR 0 2
27937: PPUSH
27938: CALL_OW 74
27942: PPUSH
27943: CALL_OW 115
// until IsDead ( un ) ;
27947: LD_VAR 0 2
27951: PPUSH
27952: CALL_OW 301
27956: IFFALSE 27904
// end ;
27958: PPOPN 2
27960: END
// every 0 0$1 trigger StreamModeActive and sStu do
27961: LD_EXP 62
27965: PUSH
27966: LD_EXP 101
27970: AND
27971: IFFALSE 27987
27973: GO 27975
27975: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27976: LD_STRING displayStucuk();
27978: PPUSH
27979: CALL_OW 559
// ResetFog ;
27983: CALL_OW 335
// end ;
27987: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27988: LD_EXP 62
27992: PUSH
27993: LD_EXP 94
27997: AND
27998: IFFALSE 28139
28000: GO 28002
28002: DISABLE
28003: LD_INT 0
28005: PPUSH
28006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28007: LD_ADDR_VAR 0 2
28011: PUSH
28012: LD_INT 22
28014: PUSH
28015: LD_OWVAR 2
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 21
28026: PUSH
28027: LD_INT 1
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PPUSH
28038: CALL_OW 69
28042: ST_TO_ADDR
// if not tmp then
28043: LD_VAR 0 2
28047: NOT
28048: IFFALSE 28052
// exit ;
28050: GO 28139
// un := tmp [ rand ( 1 , tmp ) ] ;
28052: LD_ADDR_VAR 0 1
28056: PUSH
28057: LD_VAR 0 2
28061: PUSH
28062: LD_INT 1
28064: PPUSH
28065: LD_VAR 0 2
28069: PPUSH
28070: CALL_OW 12
28074: ARRAY
28075: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28076: LD_VAR 0 1
28080: PPUSH
28081: LD_INT 0
28083: PPUSH
28084: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28088: LD_VAR 0 1
28092: PPUSH
28093: LD_OWVAR 3
28097: PUSH
28098: LD_VAR 0 1
28102: DIFF
28103: PPUSH
28104: LD_VAR 0 1
28108: PPUSH
28109: CALL_OW 74
28113: PPUSH
28114: CALL_OW 115
// wait ( 0 0$20 ) ;
28118: LD_INT 700
28120: PPUSH
28121: CALL_OW 67
// SetSide ( un , your_side ) ;
28125: LD_VAR 0 1
28129: PPUSH
28130: LD_OWVAR 2
28134: PPUSH
28135: CALL_OW 235
// end ;
28139: PPOPN 2
28141: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28142: LD_EXP 62
28146: PUSH
28147: LD_EXP 95
28151: AND
28152: IFFALSE 28258
28154: GO 28156
28156: DISABLE
28157: LD_INT 0
28159: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28160: LD_ADDR_VAR 0 1
28164: PUSH
28165: LD_INT 22
28167: PUSH
28168: LD_OWVAR 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 30
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 30
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: LIST
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PPUSH
28209: CALL_OW 69
28213: ST_TO_ADDR
// if not depot then
28214: LD_VAR 0 1
28218: NOT
28219: IFFALSE 28223
// exit ;
28221: GO 28258
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28223: LD_VAR 0 1
28227: PUSH
28228: LD_INT 1
28230: ARRAY
28231: PPUSH
28232: CALL_OW 250
28236: PPUSH
28237: LD_VAR 0 1
28241: PUSH
28242: LD_INT 1
28244: ARRAY
28245: PPUSH
28246: CALL_OW 251
28250: PPUSH
28251: LD_INT 70
28253: PPUSH
28254: CALL_OW 495
// end ;
28258: PPOPN 1
28260: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28261: LD_EXP 62
28265: PUSH
28266: LD_EXP 96
28270: AND
28271: IFFALSE 28482
28273: GO 28275
28275: DISABLE
28276: LD_INT 0
28278: PPUSH
28279: PPUSH
28280: PPUSH
28281: PPUSH
28282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28283: LD_ADDR_VAR 0 5
28287: PUSH
28288: LD_INT 22
28290: PUSH
28291: LD_OWVAR 2
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 21
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PPUSH
28314: CALL_OW 69
28318: ST_TO_ADDR
// if not tmp then
28319: LD_VAR 0 5
28323: NOT
28324: IFFALSE 28328
// exit ;
28326: GO 28482
// for i in tmp do
28328: LD_ADDR_VAR 0 1
28332: PUSH
28333: LD_VAR 0 5
28337: PUSH
28338: FOR_IN
28339: IFFALSE 28480
// begin d := rand ( 0 , 5 ) ;
28341: LD_ADDR_VAR 0 4
28345: PUSH
28346: LD_INT 0
28348: PPUSH
28349: LD_INT 5
28351: PPUSH
28352: CALL_OW 12
28356: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28357: LD_ADDR_VAR 0 2
28361: PUSH
28362: LD_VAR 0 1
28366: PPUSH
28367: CALL_OW 250
28371: PPUSH
28372: LD_VAR 0 4
28376: PPUSH
28377: LD_INT 3
28379: PPUSH
28380: LD_INT 12
28382: PPUSH
28383: CALL_OW 12
28387: PPUSH
28388: CALL_OW 272
28392: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28393: LD_ADDR_VAR 0 3
28397: PUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL_OW 251
28407: PPUSH
28408: LD_VAR 0 4
28412: PPUSH
28413: LD_INT 3
28415: PPUSH
28416: LD_INT 12
28418: PPUSH
28419: CALL_OW 12
28423: PPUSH
28424: CALL_OW 273
28428: ST_TO_ADDR
// if ValidHex ( x , y ) then
28429: LD_VAR 0 2
28433: PPUSH
28434: LD_VAR 0 3
28438: PPUSH
28439: CALL_OW 488
28443: IFFALSE 28478
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28445: LD_VAR 0 1
28449: PPUSH
28450: LD_VAR 0 2
28454: PPUSH
28455: LD_VAR 0 3
28459: PPUSH
28460: LD_INT 3
28462: PPUSH
28463: LD_INT 6
28465: PPUSH
28466: CALL_OW 12
28470: PPUSH
28471: LD_INT 1
28473: PPUSH
28474: CALL_OW 483
// end ;
28478: GO 28338
28480: POP
28481: POP
// end ;
28482: PPOPN 5
28484: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28485: LD_EXP 62
28489: PUSH
28490: LD_EXP 97
28494: AND
28495: IFFALSE 28589
28497: GO 28499
28499: DISABLE
28500: LD_INT 0
28502: PPUSH
28503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28504: LD_ADDR_VAR 0 2
28508: PUSH
28509: LD_INT 22
28511: PUSH
28512: LD_OWVAR 2
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 32
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 21
28533: PUSH
28534: LD_INT 2
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: PPUSH
28546: CALL_OW 69
28550: ST_TO_ADDR
// if not tmp then
28551: LD_VAR 0 2
28555: NOT
28556: IFFALSE 28560
// exit ;
28558: GO 28589
// for i in tmp do
28560: LD_ADDR_VAR 0 1
28564: PUSH
28565: LD_VAR 0 2
28569: PUSH
28570: FOR_IN
28571: IFFALSE 28587
// SetFuel ( i , 0 ) ;
28573: LD_VAR 0 1
28577: PPUSH
28578: LD_INT 0
28580: PPUSH
28581: CALL_OW 240
28585: GO 28570
28587: POP
28588: POP
// end ;
28589: PPOPN 2
28591: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28592: LD_EXP 62
28596: PUSH
28597: LD_EXP 98
28601: AND
28602: IFFALSE 28668
28604: GO 28606
28606: DISABLE
28607: LD_INT 0
28609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28610: LD_ADDR_VAR 0 1
28614: PUSH
28615: LD_INT 22
28617: PUSH
28618: LD_OWVAR 2
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 30
28629: PUSH
28630: LD_INT 29
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PPUSH
28641: CALL_OW 69
28645: ST_TO_ADDR
// if not tmp then
28646: LD_VAR 0 1
28650: NOT
28651: IFFALSE 28655
// exit ;
28653: GO 28668
// DestroyUnit ( tmp [ 1 ] ) ;
28655: LD_VAR 0 1
28659: PUSH
28660: LD_INT 1
28662: ARRAY
28663: PPUSH
28664: CALL_OW 65
// end ;
28668: PPOPN 1
28670: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28671: LD_EXP 62
28675: PUSH
28676: LD_EXP 100
28680: AND
28681: IFFALSE 28810
28683: GO 28685
28685: DISABLE
28686: LD_INT 0
28688: PPUSH
// begin uc_side := 0 ;
28689: LD_ADDR_OWVAR 20
28693: PUSH
28694: LD_INT 0
28696: ST_TO_ADDR
// uc_nation := nation_arabian ;
28697: LD_ADDR_OWVAR 21
28701: PUSH
28702: LD_INT 2
28704: ST_TO_ADDR
// hc_gallery :=  ;
28705: LD_ADDR_OWVAR 33
28709: PUSH
28710: LD_STRING 
28712: ST_TO_ADDR
// hc_name :=  ;
28713: LD_ADDR_OWVAR 26
28717: PUSH
28718: LD_STRING 
28720: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28721: LD_INT 1
28723: PPUSH
28724: LD_INT 11
28726: PPUSH
28727: LD_INT 10
28729: PPUSH
28730: CALL_OW 380
// un := CreateHuman ;
28734: LD_ADDR_VAR 0 1
28738: PUSH
28739: CALL_OW 44
28743: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28744: LD_VAR 0 1
28748: PPUSH
28749: LD_INT 1
28751: PPUSH
28752: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28756: LD_INT 35
28758: PPUSH
28759: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28763: LD_VAR 0 1
28767: PPUSH
28768: LD_INT 22
28770: PUSH
28771: LD_OWVAR 2
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PPUSH
28780: CALL_OW 69
28784: PPUSH
28785: LD_VAR 0 1
28789: PPUSH
28790: CALL_OW 74
28794: PPUSH
28795: CALL_OW 115
// until IsDead ( un ) ;
28799: LD_VAR 0 1
28803: PPUSH
28804: CALL_OW 301
28808: IFFALSE 28756
// end ;
28810: PPOPN 1
28812: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28813: LD_EXP 62
28817: PUSH
28818: LD_EXP 102
28822: AND
28823: IFFALSE 28835
28825: GO 28827
28827: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28828: LD_STRING earthquake(getX(game), 0, 32)
28830: PPUSH
28831: CALL_OW 559
28835: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28836: LD_EXP 62
28840: PUSH
28841: LD_EXP 103
28845: AND
28846: IFFALSE 28937
28848: GO 28850
28850: DISABLE
28851: LD_INT 0
28853: PPUSH
// begin enable ;
28854: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28855: LD_ADDR_VAR 0 1
28859: PUSH
28860: LD_INT 22
28862: PUSH
28863: LD_OWVAR 2
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 21
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 33
28884: PUSH
28885: LD_INT 3
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: PPUSH
28897: CALL_OW 69
28901: ST_TO_ADDR
// if not tmp then
28902: LD_VAR 0 1
28906: NOT
28907: IFFALSE 28911
// exit ;
28909: GO 28937
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28911: LD_VAR 0 1
28915: PUSH
28916: LD_INT 1
28918: PPUSH
28919: LD_VAR 0 1
28923: PPUSH
28924: CALL_OW 12
28928: ARRAY
28929: PPUSH
28930: LD_INT 1
28932: PPUSH
28933: CALL_OW 234
// end ;
28937: PPOPN 1
28939: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28940: LD_EXP 62
28944: PUSH
28945: LD_EXP 104
28949: AND
28950: IFFALSE 29091
28952: GO 28954
28954: DISABLE
28955: LD_INT 0
28957: PPUSH
28958: PPUSH
28959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28960: LD_ADDR_VAR 0 3
28964: PUSH
28965: LD_INT 22
28967: PUSH
28968: LD_OWVAR 2
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 25
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PPUSH
28991: CALL_OW 69
28995: ST_TO_ADDR
// if not tmp then
28996: LD_VAR 0 3
29000: NOT
29001: IFFALSE 29005
// exit ;
29003: GO 29091
// un := tmp [ rand ( 1 , tmp ) ] ;
29005: LD_ADDR_VAR 0 2
29009: PUSH
29010: LD_VAR 0 3
29014: PUSH
29015: LD_INT 1
29017: PPUSH
29018: LD_VAR 0 3
29022: PPUSH
29023: CALL_OW 12
29027: ARRAY
29028: ST_TO_ADDR
// if Crawls ( un ) then
29029: LD_VAR 0 2
29033: PPUSH
29034: CALL_OW 318
29038: IFFALSE 29049
// ComWalk ( un ) ;
29040: LD_VAR 0 2
29044: PPUSH
29045: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29049: LD_VAR 0 2
29053: PPUSH
29054: LD_INT 9
29056: PPUSH
29057: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29061: LD_INT 28
29063: PPUSH
29064: LD_OWVAR 2
29068: PPUSH
29069: LD_INT 2
29071: PPUSH
29072: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29076: LD_INT 29
29078: PPUSH
29079: LD_OWVAR 2
29083: PPUSH
29084: LD_INT 2
29086: PPUSH
29087: CALL_OW 322
// end ;
29091: PPOPN 3
29093: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29094: LD_EXP 62
29098: PUSH
29099: LD_EXP 105
29103: AND
29104: IFFALSE 29215
29106: GO 29108
29108: DISABLE
29109: LD_INT 0
29111: PPUSH
29112: PPUSH
29113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29114: LD_ADDR_VAR 0 3
29118: PUSH
29119: LD_INT 22
29121: PUSH
29122: LD_OWVAR 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 25
29133: PUSH
29134: LD_INT 1
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PPUSH
29145: CALL_OW 69
29149: ST_TO_ADDR
// if not tmp then
29150: LD_VAR 0 3
29154: NOT
29155: IFFALSE 29159
// exit ;
29157: GO 29215
// un := tmp [ rand ( 1 , tmp ) ] ;
29159: LD_ADDR_VAR 0 2
29163: PUSH
29164: LD_VAR 0 3
29168: PUSH
29169: LD_INT 1
29171: PPUSH
29172: LD_VAR 0 3
29176: PPUSH
29177: CALL_OW 12
29181: ARRAY
29182: ST_TO_ADDR
// if Crawls ( un ) then
29183: LD_VAR 0 2
29187: PPUSH
29188: CALL_OW 318
29192: IFFALSE 29203
// ComWalk ( un ) ;
29194: LD_VAR 0 2
29198: PPUSH
29199: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29203: LD_VAR 0 2
29207: PPUSH
29208: LD_INT 8
29210: PPUSH
29211: CALL_OW 336
// end ;
29215: PPOPN 3
29217: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29218: LD_EXP 62
29222: PUSH
29223: LD_EXP 106
29227: AND
29228: IFFALSE 29372
29230: GO 29232
29232: DISABLE
29233: LD_INT 0
29235: PPUSH
29236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29237: LD_ADDR_VAR 0 2
29241: PUSH
29242: LD_INT 22
29244: PUSH
29245: LD_OWVAR 2
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 21
29256: PUSH
29257: LD_INT 2
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 2
29266: PUSH
29267: LD_INT 34
29269: PUSH
29270: LD_INT 12
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 34
29279: PUSH
29280: LD_INT 51
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 34
29289: PUSH
29290: LD_INT 32
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: LIST
29307: PPUSH
29308: CALL_OW 69
29312: ST_TO_ADDR
// if not tmp then
29313: LD_VAR 0 2
29317: NOT
29318: IFFALSE 29322
// exit ;
29320: GO 29372
// for i in tmp do
29322: LD_ADDR_VAR 0 1
29326: PUSH
29327: LD_VAR 0 2
29331: PUSH
29332: FOR_IN
29333: IFFALSE 29370
// if GetCargo ( i , mat_artifact ) = 0 then
29335: LD_VAR 0 1
29339: PPUSH
29340: LD_INT 4
29342: PPUSH
29343: CALL_OW 289
29347: PUSH
29348: LD_INT 0
29350: EQUAL
29351: IFFALSE 29368
// SetCargo ( i , mat_siberit , 100 ) ;
29353: LD_VAR 0 1
29357: PPUSH
29358: LD_INT 3
29360: PPUSH
29361: LD_INT 100
29363: PPUSH
29364: CALL_OW 290
29368: GO 29332
29370: POP
29371: POP
// end ;
29372: PPOPN 2
29374: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29375: LD_EXP 62
29379: PUSH
29380: LD_EXP 107
29384: AND
29385: IFFALSE 29568
29387: GO 29389
29389: DISABLE
29390: LD_INT 0
29392: PPUSH
29393: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29394: LD_ADDR_VAR 0 2
29398: PUSH
29399: LD_INT 22
29401: PUSH
29402: LD_OWVAR 2
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PPUSH
29411: CALL_OW 69
29415: ST_TO_ADDR
// if not tmp then
29416: LD_VAR 0 2
29420: NOT
29421: IFFALSE 29425
// exit ;
29423: GO 29568
// for i := 1 to 2 do
29425: LD_ADDR_VAR 0 1
29429: PUSH
29430: DOUBLE
29431: LD_INT 1
29433: DEC
29434: ST_TO_ADDR
29435: LD_INT 2
29437: PUSH
29438: FOR_TO
29439: IFFALSE 29566
// begin uc_side := your_side ;
29441: LD_ADDR_OWVAR 20
29445: PUSH
29446: LD_OWVAR 2
29450: ST_TO_ADDR
// uc_nation := nation_american ;
29451: LD_ADDR_OWVAR 21
29455: PUSH
29456: LD_INT 1
29458: ST_TO_ADDR
// vc_chassis := us_morphling ;
29459: LD_ADDR_OWVAR 37
29463: PUSH
29464: LD_INT 5
29466: ST_TO_ADDR
// vc_engine := engine_siberite ;
29467: LD_ADDR_OWVAR 39
29471: PUSH
29472: LD_INT 3
29474: ST_TO_ADDR
// vc_control := control_computer ;
29475: LD_ADDR_OWVAR 38
29479: PUSH
29480: LD_INT 3
29482: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29483: LD_ADDR_OWVAR 40
29487: PUSH
29488: LD_INT 10
29490: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29491: LD_VAR 0 2
29495: PUSH
29496: LD_INT 1
29498: ARRAY
29499: PPUSH
29500: CALL_OW 310
29504: NOT
29505: IFFALSE 29552
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29507: CALL_OW 45
29511: PPUSH
29512: LD_VAR 0 2
29516: PUSH
29517: LD_INT 1
29519: ARRAY
29520: PPUSH
29521: CALL_OW 250
29525: PPUSH
29526: LD_VAR 0 2
29530: PUSH
29531: LD_INT 1
29533: ARRAY
29534: PPUSH
29535: CALL_OW 251
29539: PPUSH
29540: LD_INT 12
29542: PPUSH
29543: LD_INT 1
29545: PPUSH
29546: CALL_OW 50
29550: GO 29564
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29552: CALL_OW 45
29556: PPUSH
29557: LD_INT 1
29559: PPUSH
29560: CALL_OW 51
// end ;
29564: GO 29438
29566: POP
29567: POP
// end ;
29568: PPOPN 2
29570: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29571: LD_EXP 62
29575: PUSH
29576: LD_EXP 108
29580: AND
29581: IFFALSE 29803
29583: GO 29585
29585: DISABLE
29586: LD_INT 0
29588: PPUSH
29589: PPUSH
29590: PPUSH
29591: PPUSH
29592: PPUSH
29593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29594: LD_ADDR_VAR 0 6
29598: PUSH
29599: LD_INT 22
29601: PUSH
29602: LD_OWVAR 2
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 21
29613: PUSH
29614: LD_INT 1
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: LD_INT 23
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: PPUSH
29643: CALL_OW 69
29647: ST_TO_ADDR
// if not tmp then
29648: LD_VAR 0 6
29652: NOT
29653: IFFALSE 29657
// exit ;
29655: GO 29803
// s1 := rand ( 1 , 4 ) ;
29657: LD_ADDR_VAR 0 2
29661: PUSH
29662: LD_INT 1
29664: PPUSH
29665: LD_INT 4
29667: PPUSH
29668: CALL_OW 12
29672: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29673: LD_ADDR_VAR 0 4
29677: PUSH
29678: LD_VAR 0 6
29682: PUSH
29683: LD_INT 1
29685: ARRAY
29686: PPUSH
29687: LD_VAR 0 2
29691: PPUSH
29692: CALL_OW 259
29696: ST_TO_ADDR
// if s1 = 1 then
29697: LD_VAR 0 2
29701: PUSH
29702: LD_INT 1
29704: EQUAL
29705: IFFALSE 29725
// s2 := rand ( 2 , 4 ) else
29707: LD_ADDR_VAR 0 3
29711: PUSH
29712: LD_INT 2
29714: PPUSH
29715: LD_INT 4
29717: PPUSH
29718: CALL_OW 12
29722: ST_TO_ADDR
29723: GO 29733
// s2 := 1 ;
29725: LD_ADDR_VAR 0 3
29729: PUSH
29730: LD_INT 1
29732: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29733: LD_ADDR_VAR 0 5
29737: PUSH
29738: LD_VAR 0 6
29742: PUSH
29743: LD_INT 1
29745: ARRAY
29746: PPUSH
29747: LD_VAR 0 3
29751: PPUSH
29752: CALL_OW 259
29756: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29757: LD_VAR 0 6
29761: PUSH
29762: LD_INT 1
29764: ARRAY
29765: PPUSH
29766: LD_VAR 0 2
29770: PPUSH
29771: LD_VAR 0 5
29775: PPUSH
29776: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29780: LD_VAR 0 6
29784: PUSH
29785: LD_INT 1
29787: ARRAY
29788: PPUSH
29789: LD_VAR 0 3
29793: PPUSH
29794: LD_VAR 0 4
29798: PPUSH
29799: CALL_OW 237
// end ;
29803: PPOPN 6
29805: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29806: LD_EXP 62
29810: PUSH
29811: LD_EXP 109
29815: AND
29816: IFFALSE 29895
29818: GO 29820
29820: DISABLE
29821: LD_INT 0
29823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29824: LD_ADDR_VAR 0 1
29828: PUSH
29829: LD_INT 22
29831: PUSH
29832: LD_OWVAR 2
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 30
29843: PUSH
29844: LD_INT 3
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PPUSH
29855: CALL_OW 69
29859: ST_TO_ADDR
// if not tmp then
29860: LD_VAR 0 1
29864: NOT
29865: IFFALSE 29869
// exit ;
29867: GO 29895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29869: LD_VAR 0 1
29873: PUSH
29874: LD_INT 1
29876: PPUSH
29877: LD_VAR 0 1
29881: PPUSH
29882: CALL_OW 12
29886: ARRAY
29887: PPUSH
29888: LD_INT 1
29890: PPUSH
29891: CALL_OW 234
// end ;
29895: PPOPN 1
29897: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29898: LD_EXP 62
29902: PUSH
29903: LD_EXP 110
29907: AND
29908: IFFALSE 30020
29910: GO 29912
29912: DISABLE
29913: LD_INT 0
29915: PPUSH
29916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29917: LD_ADDR_VAR 0 2
29921: PUSH
29922: LD_INT 22
29924: PUSH
29925: LD_OWVAR 2
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 2
29936: PUSH
29937: LD_INT 30
29939: PUSH
29940: LD_INT 27
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 30
29949: PUSH
29950: LD_INT 26
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 30
29959: PUSH
29960: LD_INT 28
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PPUSH
29977: CALL_OW 69
29981: ST_TO_ADDR
// if not tmp then
29982: LD_VAR 0 2
29986: NOT
29987: IFFALSE 29991
// exit ;
29989: GO 30020
// for i in tmp do
29991: LD_ADDR_VAR 0 1
29995: PUSH
29996: LD_VAR 0 2
30000: PUSH
30001: FOR_IN
30002: IFFALSE 30018
// SetLives ( i , 1 ) ;
30004: LD_VAR 0 1
30008: PPUSH
30009: LD_INT 1
30011: PPUSH
30012: CALL_OW 234
30016: GO 30001
30018: POP
30019: POP
// end ;
30020: PPOPN 2
30022: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30023: LD_EXP 62
30027: PUSH
30028: LD_EXP 111
30032: AND
30033: IFFALSE 30320
30035: GO 30037
30037: DISABLE
30038: LD_INT 0
30040: PPUSH
30041: PPUSH
30042: PPUSH
// begin i := rand ( 1 , 7 ) ;
30043: LD_ADDR_VAR 0 1
30047: PUSH
30048: LD_INT 1
30050: PPUSH
30051: LD_INT 7
30053: PPUSH
30054: CALL_OW 12
30058: ST_TO_ADDR
// case i of 1 :
30059: LD_VAR 0 1
30063: PUSH
30064: LD_INT 1
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30082
30072: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30073: LD_STRING earthquake(getX(game), 0, 32)
30075: PPUSH
30076: CALL_OW 559
30080: GO 30320
30082: LD_INT 2
30084: DOUBLE
30085: EQUAL
30086: IFTRUE 30090
30088: GO 30104
30090: POP
// begin ToLua ( displayStucuk(); ) ;
30091: LD_STRING displayStucuk();
30093: PPUSH
30094: CALL_OW 559
// ResetFog ;
30098: CALL_OW 335
// end ; 3 :
30102: GO 30320
30104: LD_INT 3
30106: DOUBLE
30107: EQUAL
30108: IFTRUE 30112
30110: GO 30216
30112: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30113: LD_ADDR_VAR 0 2
30117: PUSH
30118: LD_INT 22
30120: PUSH
30121: LD_OWVAR 2
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 25
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PPUSH
30144: CALL_OW 69
30148: ST_TO_ADDR
// if not tmp then
30149: LD_VAR 0 2
30153: NOT
30154: IFFALSE 30158
// exit ;
30156: GO 30320
// un := tmp [ rand ( 1 , tmp ) ] ;
30158: LD_ADDR_VAR 0 3
30162: PUSH
30163: LD_VAR 0 2
30167: PUSH
30168: LD_INT 1
30170: PPUSH
30171: LD_VAR 0 2
30175: PPUSH
30176: CALL_OW 12
30180: ARRAY
30181: ST_TO_ADDR
// if Crawls ( un ) then
30182: LD_VAR 0 3
30186: PPUSH
30187: CALL_OW 318
30191: IFFALSE 30202
// ComWalk ( un ) ;
30193: LD_VAR 0 3
30197: PPUSH
30198: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30202: LD_VAR 0 3
30206: PPUSH
30207: LD_INT 8
30209: PPUSH
30210: CALL_OW 336
// end ; 4 :
30214: GO 30320
30216: LD_INT 4
30218: DOUBLE
30219: EQUAL
30220: IFTRUE 30224
30222: GO 30298
30224: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30225: LD_ADDR_VAR 0 2
30229: PUSH
30230: LD_INT 22
30232: PUSH
30233: LD_OWVAR 2
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 30
30244: PUSH
30245: LD_INT 29
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PPUSH
30256: CALL_OW 69
30260: ST_TO_ADDR
// if not tmp then
30261: LD_VAR 0 2
30265: NOT
30266: IFFALSE 30270
// exit ;
30268: GO 30320
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30270: LD_VAR 0 2
30274: PUSH
30275: LD_INT 1
30277: ARRAY
30278: PPUSH
30279: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30283: LD_VAR 0 2
30287: PUSH
30288: LD_INT 1
30290: ARRAY
30291: PPUSH
30292: CALL_OW 65
// end ; 5 .. 7 :
30296: GO 30320
30298: LD_INT 5
30300: DOUBLE
30301: GREATEREQUAL
30302: IFFALSE 30310
30304: LD_INT 7
30306: DOUBLE
30307: LESSEQUAL
30308: IFTRUE 30312
30310: GO 30319
30312: POP
// StreamSibBomb ; end ;
30313: CALL 26557 0 0
30317: GO 30320
30319: POP
// end ;
30320: PPOPN 3
30322: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30323: LD_EXP 62
30327: PUSH
30328: LD_EXP 112
30332: AND
30333: IFFALSE 30489
30335: GO 30337
30337: DISABLE
30338: LD_INT 0
30340: PPUSH
30341: PPUSH
30342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30343: LD_ADDR_VAR 0 2
30347: PUSH
30348: LD_INT 81
30350: PUSH
30351: LD_OWVAR 2
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 2
30362: PUSH
30363: LD_INT 21
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 21
30375: PUSH
30376: LD_INT 2
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PPUSH
30392: CALL_OW 69
30396: ST_TO_ADDR
// if not tmp then
30397: LD_VAR 0 2
30401: NOT
30402: IFFALSE 30406
// exit ;
30404: GO 30489
// p := 0 ;
30406: LD_ADDR_VAR 0 3
30410: PUSH
30411: LD_INT 0
30413: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30414: LD_INT 35
30416: PPUSH
30417: CALL_OW 67
// p := p + 1 ;
30421: LD_ADDR_VAR 0 3
30425: PUSH
30426: LD_VAR 0 3
30430: PUSH
30431: LD_INT 1
30433: PLUS
30434: ST_TO_ADDR
// for i in tmp do
30435: LD_ADDR_VAR 0 1
30439: PUSH
30440: LD_VAR 0 2
30444: PUSH
30445: FOR_IN
30446: IFFALSE 30477
// if GetLives ( i ) < 1000 then
30448: LD_VAR 0 1
30452: PPUSH
30453: CALL_OW 256
30457: PUSH
30458: LD_INT 1000
30460: LESS
30461: IFFALSE 30475
// SetLives ( i , 1000 ) ;
30463: LD_VAR 0 1
30467: PPUSH
30468: LD_INT 1000
30470: PPUSH
30471: CALL_OW 234
30475: GO 30445
30477: POP
30478: POP
// until p > 20 ;
30479: LD_VAR 0 3
30483: PUSH
30484: LD_INT 20
30486: GREATER
30487: IFFALSE 30414
// end ;
30489: PPOPN 3
30491: END
// every 0 0$1 trigger StreamModeActive and sTime do
30492: LD_EXP 62
30496: PUSH
30497: LD_EXP 113
30501: AND
30502: IFFALSE 30537
30504: GO 30506
30506: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30507: LD_INT 28
30509: PPUSH
30510: LD_OWVAR 2
30514: PPUSH
30515: LD_INT 2
30517: PPUSH
30518: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30522: LD_INT 30
30524: PPUSH
30525: LD_OWVAR 2
30529: PPUSH
30530: LD_INT 2
30532: PPUSH
30533: CALL_OW 322
// end ;
30537: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30538: LD_EXP 62
30542: PUSH
30543: LD_EXP 114
30547: AND
30548: IFFALSE 30669
30550: GO 30552
30552: DISABLE
30553: LD_INT 0
30555: PPUSH
30556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30557: LD_ADDR_VAR 0 2
30561: PUSH
30562: LD_INT 22
30564: PUSH
30565: LD_OWVAR 2
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 21
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 3
30586: PUSH
30587: LD_INT 23
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: PPUSH
30606: CALL_OW 69
30610: ST_TO_ADDR
// if not tmp then
30611: LD_VAR 0 2
30615: NOT
30616: IFFALSE 30620
// exit ;
30618: GO 30669
// for i in tmp do
30620: LD_ADDR_VAR 0 1
30624: PUSH
30625: LD_VAR 0 2
30629: PUSH
30630: FOR_IN
30631: IFFALSE 30667
// begin if Crawls ( i ) then
30633: LD_VAR 0 1
30637: PPUSH
30638: CALL_OW 318
30642: IFFALSE 30653
// ComWalk ( i ) ;
30644: LD_VAR 0 1
30648: PPUSH
30649: CALL_OW 138
// SetClass ( i , 2 ) ;
30653: LD_VAR 0 1
30657: PPUSH
30658: LD_INT 2
30660: PPUSH
30661: CALL_OW 336
// end ;
30665: GO 30630
30667: POP
30668: POP
// end ;
30669: PPOPN 2
30671: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30672: LD_EXP 62
30676: PUSH
30677: LD_EXP 115
30681: AND
30682: IFFALSE 30970
30684: GO 30686
30686: DISABLE
30687: LD_INT 0
30689: PPUSH
30690: PPUSH
30691: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30692: LD_OWVAR 2
30696: PPUSH
30697: LD_INT 9
30699: PPUSH
30700: LD_INT 1
30702: PPUSH
30703: LD_INT 1
30705: PPUSH
30706: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30710: LD_INT 9
30712: PPUSH
30713: LD_OWVAR 2
30717: PPUSH
30718: CALL_OW 343
// uc_side := 9 ;
30722: LD_ADDR_OWVAR 20
30726: PUSH
30727: LD_INT 9
30729: ST_TO_ADDR
// uc_nation := 2 ;
30730: LD_ADDR_OWVAR 21
30734: PUSH
30735: LD_INT 2
30737: ST_TO_ADDR
// hc_name := Dark Warrior ;
30738: LD_ADDR_OWVAR 26
30742: PUSH
30743: LD_STRING Dark Warrior
30745: ST_TO_ADDR
// hc_gallery :=  ;
30746: LD_ADDR_OWVAR 33
30750: PUSH
30751: LD_STRING 
30753: ST_TO_ADDR
// hc_noskilllimit := true ;
30754: LD_ADDR_OWVAR 76
30758: PUSH
30759: LD_INT 1
30761: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30762: LD_ADDR_OWVAR 31
30766: PUSH
30767: LD_INT 30
30769: PUSH
30770: LD_INT 30
30772: PUSH
30773: LD_INT 30
30775: PUSH
30776: LD_INT 30
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: ST_TO_ADDR
// un := CreateHuman ;
30785: LD_ADDR_VAR 0 3
30789: PUSH
30790: CALL_OW 44
30794: ST_TO_ADDR
// hc_noskilllimit := false ;
30795: LD_ADDR_OWVAR 76
30799: PUSH
30800: LD_INT 0
30802: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30803: LD_VAR 0 3
30807: PPUSH
30808: LD_INT 1
30810: PPUSH
30811: CALL_OW 51
// ToLua ( playRanger() ) ;
30815: LD_STRING playRanger()
30817: PPUSH
30818: CALL_OW 559
// p := 0 ;
30822: LD_ADDR_VAR 0 2
30826: PUSH
30827: LD_INT 0
30829: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30830: LD_INT 35
30832: PPUSH
30833: CALL_OW 67
// p := p + 1 ;
30837: LD_ADDR_VAR 0 2
30841: PUSH
30842: LD_VAR 0 2
30846: PUSH
30847: LD_INT 1
30849: PLUS
30850: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30851: LD_VAR 0 3
30855: PPUSH
30856: CALL_OW 256
30860: PUSH
30861: LD_INT 1000
30863: LESS
30864: IFFALSE 30878
// SetLives ( un , 1000 ) ;
30866: LD_VAR 0 3
30870: PPUSH
30871: LD_INT 1000
30873: PPUSH
30874: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30878: LD_VAR 0 3
30882: PPUSH
30883: LD_INT 81
30885: PUSH
30886: LD_OWVAR 2
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 91
30897: PUSH
30898: LD_VAR 0 3
30902: PUSH
30903: LD_INT 30
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PPUSH
30915: CALL_OW 69
30919: PPUSH
30920: LD_VAR 0 3
30924: PPUSH
30925: CALL_OW 74
30929: PPUSH
30930: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30934: LD_VAR 0 2
30938: PUSH
30939: LD_INT 80
30941: GREATER
30942: PUSH
30943: LD_VAR 0 3
30947: PPUSH
30948: CALL_OW 301
30952: OR
30953: IFFALSE 30830
// if un then
30955: LD_VAR 0 3
30959: IFFALSE 30970
// RemoveUnit ( un ) ;
30961: LD_VAR 0 3
30965: PPUSH
30966: CALL_OW 64
// end ;
30970: PPOPN 3
30972: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30973: LD_EXP 116
30977: IFFALSE 31093
30979: GO 30981
30981: DISABLE
30982: LD_INT 0
30984: PPUSH
30985: PPUSH
30986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30987: LD_ADDR_VAR 0 2
30991: PUSH
30992: LD_INT 81
30994: PUSH
30995: LD_OWVAR 2
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 21
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PPUSH
31018: CALL_OW 69
31022: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31023: LD_STRING playComputer()
31025: PPUSH
31026: CALL_OW 559
// if not tmp then
31030: LD_VAR 0 2
31034: NOT
31035: IFFALSE 31039
// exit ;
31037: GO 31093
// for i in tmp do
31039: LD_ADDR_VAR 0 1
31043: PUSH
31044: LD_VAR 0 2
31048: PUSH
31049: FOR_IN
31050: IFFALSE 31091
// for j := 1 to 4 do
31052: LD_ADDR_VAR 0 3
31056: PUSH
31057: DOUBLE
31058: LD_INT 1
31060: DEC
31061: ST_TO_ADDR
31062: LD_INT 4
31064: PUSH
31065: FOR_TO
31066: IFFALSE 31087
// SetSkill ( i , j , 10 ) ;
31068: LD_VAR 0 1
31072: PPUSH
31073: LD_VAR 0 3
31077: PPUSH
31078: LD_INT 10
31080: PPUSH
31081: CALL_OW 237
31085: GO 31065
31087: POP
31088: POP
31089: GO 31049
31091: POP
31092: POP
// end ;
31093: PPOPN 3
31095: END
// every 0 0$1 trigger s30 do var i , tmp ;
31096: LD_EXP 117
31100: IFFALSE 31169
31102: GO 31104
31104: DISABLE
31105: LD_INT 0
31107: PPUSH
31108: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31109: LD_ADDR_VAR 0 2
31113: PUSH
31114: LD_INT 22
31116: PUSH
31117: LD_OWVAR 2
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PPUSH
31126: CALL_OW 69
31130: ST_TO_ADDR
// if not tmp then
31131: LD_VAR 0 2
31135: NOT
31136: IFFALSE 31140
// exit ;
31138: GO 31169
// for i in tmp do
31140: LD_ADDR_VAR 0 1
31144: PUSH
31145: LD_VAR 0 2
31149: PUSH
31150: FOR_IN
31151: IFFALSE 31167
// SetLives ( i , 300 ) ;
31153: LD_VAR 0 1
31157: PPUSH
31158: LD_INT 300
31160: PPUSH
31161: CALL_OW 234
31165: GO 31150
31167: POP
31168: POP
// end ;
31169: PPOPN 2
31171: END
// every 0 0$1 trigger s60 do var i , tmp ;
31172: LD_EXP 118
31176: IFFALSE 31245
31178: GO 31180
31180: DISABLE
31181: LD_INT 0
31183: PPUSH
31184: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31185: LD_ADDR_VAR 0 2
31189: PUSH
31190: LD_INT 22
31192: PUSH
31193: LD_OWVAR 2
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PPUSH
31202: CALL_OW 69
31206: ST_TO_ADDR
// if not tmp then
31207: LD_VAR 0 2
31211: NOT
31212: IFFALSE 31216
// exit ;
31214: GO 31245
// for i in tmp do
31216: LD_ADDR_VAR 0 1
31220: PUSH
31221: LD_VAR 0 2
31225: PUSH
31226: FOR_IN
31227: IFFALSE 31243
// SetLives ( i , 600 ) ;
31229: LD_VAR 0 1
31233: PPUSH
31234: LD_INT 600
31236: PPUSH
31237: CALL_OW 234
31241: GO 31226
31243: POP
31244: POP
// end ;
31245: PPOPN 2
31247: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31248: LD_INT 0
31250: PPUSH
// case cmd of 301 :
31251: LD_VAR 0 1
31255: PUSH
31256: LD_INT 301
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 31296
31264: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31265: LD_VAR 0 6
31269: PPUSH
31270: LD_VAR 0 7
31274: PPUSH
31275: LD_VAR 0 8
31279: PPUSH
31280: LD_VAR 0 4
31284: PPUSH
31285: LD_VAR 0 5
31289: PPUSH
31290: CALL 32497 0 5
31294: GO 31417
31296: LD_INT 302
31298: DOUBLE
31299: EQUAL
31300: IFTRUE 31304
31302: GO 31341
31304: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31305: LD_VAR 0 6
31309: PPUSH
31310: LD_VAR 0 7
31314: PPUSH
31315: LD_VAR 0 8
31319: PPUSH
31320: LD_VAR 0 9
31324: PPUSH
31325: LD_VAR 0 4
31329: PPUSH
31330: LD_VAR 0 5
31334: PPUSH
31335: CALL 32588 0 6
31339: GO 31417
31341: LD_INT 303
31343: DOUBLE
31344: EQUAL
31345: IFTRUE 31349
31347: GO 31386
31349: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31350: LD_VAR 0 6
31354: PPUSH
31355: LD_VAR 0 7
31359: PPUSH
31360: LD_VAR 0 8
31364: PPUSH
31365: LD_VAR 0 9
31369: PPUSH
31370: LD_VAR 0 4
31374: PPUSH
31375: LD_VAR 0 5
31379: PPUSH
31380: CALL 31422 0 6
31384: GO 31417
31386: LD_INT 304
31388: DOUBLE
31389: EQUAL
31390: IFTRUE 31394
31392: GO 31416
31394: POP
// hHackTeleport ( unit , x , y ) ; end ;
31395: LD_VAR 0 2
31399: PPUSH
31400: LD_VAR 0 4
31404: PPUSH
31405: LD_VAR 0 5
31409: PPUSH
31410: CALL 33181 0 3
31414: GO 31417
31416: POP
// end ;
31417: LD_VAR 0 12
31421: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31422: LD_INT 0
31424: PPUSH
31425: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31426: LD_VAR 0 1
31430: PUSH
31431: LD_INT 1
31433: LESS
31434: PUSH
31435: LD_VAR 0 1
31439: PUSH
31440: LD_INT 3
31442: GREATER
31443: OR
31444: PUSH
31445: LD_VAR 0 5
31449: PPUSH
31450: LD_VAR 0 6
31454: PPUSH
31455: CALL_OW 428
31459: OR
31460: IFFALSE 31464
// exit ;
31462: GO 32184
// uc_side := your_side ;
31464: LD_ADDR_OWVAR 20
31468: PUSH
31469: LD_OWVAR 2
31473: ST_TO_ADDR
// uc_nation := nation ;
31474: LD_ADDR_OWVAR 21
31478: PUSH
31479: LD_VAR 0 1
31483: ST_TO_ADDR
// bc_level = 1 ;
31484: LD_ADDR_OWVAR 43
31488: PUSH
31489: LD_INT 1
31491: ST_TO_ADDR
// case btype of 1 :
31492: LD_VAR 0 2
31496: PUSH
31497: LD_INT 1
31499: DOUBLE
31500: EQUAL
31501: IFTRUE 31505
31503: GO 31516
31505: POP
// bc_type := b_depot ; 2 :
31506: LD_ADDR_OWVAR 42
31510: PUSH
31511: LD_INT 0
31513: ST_TO_ADDR
31514: GO 32128
31516: LD_INT 2
31518: DOUBLE
31519: EQUAL
31520: IFTRUE 31524
31522: GO 31535
31524: POP
// bc_type := b_warehouse ; 3 :
31525: LD_ADDR_OWVAR 42
31529: PUSH
31530: LD_INT 1
31532: ST_TO_ADDR
31533: GO 32128
31535: LD_INT 3
31537: DOUBLE
31538: EQUAL
31539: IFTRUE 31543
31541: GO 31554
31543: POP
// bc_type := b_lab ; 4 .. 9 :
31544: LD_ADDR_OWVAR 42
31548: PUSH
31549: LD_INT 6
31551: ST_TO_ADDR
31552: GO 32128
31554: LD_INT 4
31556: DOUBLE
31557: GREATEREQUAL
31558: IFFALSE 31566
31560: LD_INT 9
31562: DOUBLE
31563: LESSEQUAL
31564: IFTRUE 31568
31566: GO 31620
31568: POP
// begin bc_type := b_lab_half ;
31569: LD_ADDR_OWVAR 42
31573: PUSH
31574: LD_INT 7
31576: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31577: LD_ADDR_OWVAR 44
31581: PUSH
31582: LD_INT 10
31584: PUSH
31585: LD_INT 11
31587: PUSH
31588: LD_INT 12
31590: PUSH
31591: LD_INT 15
31593: PUSH
31594: LD_INT 14
31596: PUSH
31597: LD_INT 13
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: PUSH
31608: LD_VAR 0 2
31612: PUSH
31613: LD_INT 3
31615: MINUS
31616: ARRAY
31617: ST_TO_ADDR
// end ; 10 .. 13 :
31618: GO 32128
31620: LD_INT 10
31622: DOUBLE
31623: GREATEREQUAL
31624: IFFALSE 31632
31626: LD_INT 13
31628: DOUBLE
31629: LESSEQUAL
31630: IFTRUE 31634
31632: GO 31711
31634: POP
// begin bc_type := b_lab_full ;
31635: LD_ADDR_OWVAR 42
31639: PUSH
31640: LD_INT 8
31642: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31643: LD_ADDR_OWVAR 44
31647: PUSH
31648: LD_INT 10
31650: PUSH
31651: LD_INT 12
31653: PUSH
31654: LD_INT 14
31656: PUSH
31657: LD_INT 13
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: PUSH
31666: LD_VAR 0 2
31670: PUSH
31671: LD_INT 9
31673: MINUS
31674: ARRAY
31675: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31676: LD_ADDR_OWVAR 45
31680: PUSH
31681: LD_INT 11
31683: PUSH
31684: LD_INT 15
31686: PUSH
31687: LD_INT 12
31689: PUSH
31690: LD_INT 15
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: PUSH
31699: LD_VAR 0 2
31703: PUSH
31704: LD_INT 9
31706: MINUS
31707: ARRAY
31708: ST_TO_ADDR
// end ; 14 :
31709: GO 32128
31711: LD_INT 14
31713: DOUBLE
31714: EQUAL
31715: IFTRUE 31719
31717: GO 31730
31719: POP
// bc_type := b_workshop ; 15 :
31720: LD_ADDR_OWVAR 42
31724: PUSH
31725: LD_INT 2
31727: ST_TO_ADDR
31728: GO 32128
31730: LD_INT 15
31732: DOUBLE
31733: EQUAL
31734: IFTRUE 31738
31736: GO 31749
31738: POP
// bc_type := b_factory ; 16 :
31739: LD_ADDR_OWVAR 42
31743: PUSH
31744: LD_INT 3
31746: ST_TO_ADDR
31747: GO 32128
31749: LD_INT 16
31751: DOUBLE
31752: EQUAL
31753: IFTRUE 31757
31755: GO 31768
31757: POP
// bc_type := b_ext_gun ; 17 :
31758: LD_ADDR_OWVAR 42
31762: PUSH
31763: LD_INT 17
31765: ST_TO_ADDR
31766: GO 32128
31768: LD_INT 17
31770: DOUBLE
31771: EQUAL
31772: IFTRUE 31776
31774: GO 31804
31776: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31777: LD_ADDR_OWVAR 42
31781: PUSH
31782: LD_INT 19
31784: PUSH
31785: LD_INT 23
31787: PUSH
31788: LD_INT 19
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: PUSH
31796: LD_VAR 0 1
31800: ARRAY
31801: ST_TO_ADDR
31802: GO 32128
31804: LD_INT 18
31806: DOUBLE
31807: EQUAL
31808: IFTRUE 31812
31810: GO 31823
31812: POP
// bc_type := b_ext_radar ; 19 :
31813: LD_ADDR_OWVAR 42
31817: PUSH
31818: LD_INT 20
31820: ST_TO_ADDR
31821: GO 32128
31823: LD_INT 19
31825: DOUBLE
31826: EQUAL
31827: IFTRUE 31831
31829: GO 31842
31831: POP
// bc_type := b_ext_radio ; 20 :
31832: LD_ADDR_OWVAR 42
31836: PUSH
31837: LD_INT 22
31839: ST_TO_ADDR
31840: GO 32128
31842: LD_INT 20
31844: DOUBLE
31845: EQUAL
31846: IFTRUE 31850
31848: GO 31861
31850: POP
// bc_type := b_ext_siberium ; 21 :
31851: LD_ADDR_OWVAR 42
31855: PUSH
31856: LD_INT 21
31858: ST_TO_ADDR
31859: GO 32128
31861: LD_INT 21
31863: DOUBLE
31864: EQUAL
31865: IFTRUE 31869
31867: GO 31880
31869: POP
// bc_type := b_ext_computer ; 22 :
31870: LD_ADDR_OWVAR 42
31874: PUSH
31875: LD_INT 24
31877: ST_TO_ADDR
31878: GO 32128
31880: LD_INT 22
31882: DOUBLE
31883: EQUAL
31884: IFTRUE 31888
31886: GO 31899
31888: POP
// bc_type := b_ext_track ; 23 :
31889: LD_ADDR_OWVAR 42
31893: PUSH
31894: LD_INT 16
31896: ST_TO_ADDR
31897: GO 32128
31899: LD_INT 23
31901: DOUBLE
31902: EQUAL
31903: IFTRUE 31907
31905: GO 31918
31907: POP
// bc_type := b_ext_laser ; 24 :
31908: LD_ADDR_OWVAR 42
31912: PUSH
31913: LD_INT 25
31915: ST_TO_ADDR
31916: GO 32128
31918: LD_INT 24
31920: DOUBLE
31921: EQUAL
31922: IFTRUE 31926
31924: GO 31937
31926: POP
// bc_type := b_control_tower ; 25 :
31927: LD_ADDR_OWVAR 42
31931: PUSH
31932: LD_INT 36
31934: ST_TO_ADDR
31935: GO 32128
31937: LD_INT 25
31939: DOUBLE
31940: EQUAL
31941: IFTRUE 31945
31943: GO 31956
31945: POP
// bc_type := b_breastwork ; 26 :
31946: LD_ADDR_OWVAR 42
31950: PUSH
31951: LD_INT 31
31953: ST_TO_ADDR
31954: GO 32128
31956: LD_INT 26
31958: DOUBLE
31959: EQUAL
31960: IFTRUE 31964
31962: GO 31975
31964: POP
// bc_type := b_bunker ; 27 :
31965: LD_ADDR_OWVAR 42
31969: PUSH
31970: LD_INT 32
31972: ST_TO_ADDR
31973: GO 32128
31975: LD_INT 27
31977: DOUBLE
31978: EQUAL
31979: IFTRUE 31983
31981: GO 31994
31983: POP
// bc_type := b_turret ; 28 :
31984: LD_ADDR_OWVAR 42
31988: PUSH
31989: LD_INT 33
31991: ST_TO_ADDR
31992: GO 32128
31994: LD_INT 28
31996: DOUBLE
31997: EQUAL
31998: IFTRUE 32002
32000: GO 32013
32002: POP
// bc_type := b_armoury ; 29 :
32003: LD_ADDR_OWVAR 42
32007: PUSH
32008: LD_INT 4
32010: ST_TO_ADDR
32011: GO 32128
32013: LD_INT 29
32015: DOUBLE
32016: EQUAL
32017: IFTRUE 32021
32019: GO 32032
32021: POP
// bc_type := b_barracks ; 30 :
32022: LD_ADDR_OWVAR 42
32026: PUSH
32027: LD_INT 5
32029: ST_TO_ADDR
32030: GO 32128
32032: LD_INT 30
32034: DOUBLE
32035: EQUAL
32036: IFTRUE 32040
32038: GO 32051
32040: POP
// bc_type := b_solar_power ; 31 :
32041: LD_ADDR_OWVAR 42
32045: PUSH
32046: LD_INT 27
32048: ST_TO_ADDR
32049: GO 32128
32051: LD_INT 31
32053: DOUBLE
32054: EQUAL
32055: IFTRUE 32059
32057: GO 32070
32059: POP
// bc_type := b_oil_power ; 32 :
32060: LD_ADDR_OWVAR 42
32064: PUSH
32065: LD_INT 26
32067: ST_TO_ADDR
32068: GO 32128
32070: LD_INT 32
32072: DOUBLE
32073: EQUAL
32074: IFTRUE 32078
32076: GO 32089
32078: POP
// bc_type := b_siberite_power ; 33 :
32079: LD_ADDR_OWVAR 42
32083: PUSH
32084: LD_INT 28
32086: ST_TO_ADDR
32087: GO 32128
32089: LD_INT 33
32091: DOUBLE
32092: EQUAL
32093: IFTRUE 32097
32095: GO 32108
32097: POP
// bc_type := b_oil_mine ; 34 :
32098: LD_ADDR_OWVAR 42
32102: PUSH
32103: LD_INT 29
32105: ST_TO_ADDR
32106: GO 32128
32108: LD_INT 34
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32127
32116: POP
// bc_type := b_siberite_mine ; end ;
32117: LD_ADDR_OWVAR 42
32121: PUSH
32122: LD_INT 30
32124: ST_TO_ADDR
32125: GO 32128
32127: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32128: LD_ADDR_VAR 0 8
32132: PUSH
32133: LD_VAR 0 5
32137: PPUSH
32138: LD_VAR 0 6
32142: PPUSH
32143: LD_VAR 0 3
32147: PPUSH
32148: CALL_OW 47
32152: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32153: LD_OWVAR 42
32157: PUSH
32158: LD_INT 32
32160: PUSH
32161: LD_INT 33
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: IN
32168: IFFALSE 32184
// PlaceWeaponTurret ( b , weapon ) ;
32170: LD_VAR 0 8
32174: PPUSH
32175: LD_VAR 0 4
32179: PPUSH
32180: CALL_OW 431
// end ;
32184: LD_VAR 0 7
32188: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32189: LD_INT 0
32191: PPUSH
32192: PPUSH
32193: PPUSH
32194: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32195: LD_ADDR_VAR 0 4
32199: PUSH
32200: LD_INT 22
32202: PUSH
32203: LD_OWVAR 2
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: LD_INT 30
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 30
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: LIST
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PPUSH
32244: CALL_OW 69
32248: ST_TO_ADDR
// if not tmp then
32249: LD_VAR 0 4
32253: NOT
32254: IFFALSE 32258
// exit ;
32256: GO 32317
// for i in tmp do
32258: LD_ADDR_VAR 0 2
32262: PUSH
32263: LD_VAR 0 4
32267: PUSH
32268: FOR_IN
32269: IFFALSE 32315
// for j = 1 to 3 do
32271: LD_ADDR_VAR 0 3
32275: PUSH
32276: DOUBLE
32277: LD_INT 1
32279: DEC
32280: ST_TO_ADDR
32281: LD_INT 3
32283: PUSH
32284: FOR_TO
32285: IFFALSE 32311
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32287: LD_VAR 0 2
32291: PPUSH
32292: CALL_OW 274
32296: PPUSH
32297: LD_VAR 0 3
32301: PPUSH
32302: LD_INT 99999
32304: PPUSH
32305: CALL_OW 277
32309: GO 32284
32311: POP
32312: POP
32313: GO 32268
32315: POP
32316: POP
// end ;
32317: LD_VAR 0 1
32321: RET
// export function hHackSetLevel10 ; var i , j ; begin
32322: LD_INT 0
32324: PPUSH
32325: PPUSH
32326: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32327: LD_ADDR_VAR 0 2
32331: PUSH
32332: LD_INT 21
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PPUSH
32342: CALL_OW 69
32346: PUSH
32347: FOR_IN
32348: IFFALSE 32400
// if IsSelected ( i ) then
32350: LD_VAR 0 2
32354: PPUSH
32355: CALL_OW 306
32359: IFFALSE 32398
// begin for j := 1 to 4 do
32361: LD_ADDR_VAR 0 3
32365: PUSH
32366: DOUBLE
32367: LD_INT 1
32369: DEC
32370: ST_TO_ADDR
32371: LD_INT 4
32373: PUSH
32374: FOR_TO
32375: IFFALSE 32396
// SetSkill ( i , j , 10 ) ;
32377: LD_VAR 0 2
32381: PPUSH
32382: LD_VAR 0 3
32386: PPUSH
32387: LD_INT 10
32389: PPUSH
32390: CALL_OW 237
32394: GO 32374
32396: POP
32397: POP
// end ;
32398: GO 32347
32400: POP
32401: POP
// end ;
32402: LD_VAR 0 1
32406: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32407: LD_INT 0
32409: PPUSH
32410: PPUSH
32411: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32412: LD_ADDR_VAR 0 2
32416: PUSH
32417: LD_INT 22
32419: PUSH
32420: LD_OWVAR 2
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 21
32431: PUSH
32432: LD_INT 1
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PPUSH
32443: CALL_OW 69
32447: PUSH
32448: FOR_IN
32449: IFFALSE 32490
// begin for j := 1 to 4 do
32451: LD_ADDR_VAR 0 3
32455: PUSH
32456: DOUBLE
32457: LD_INT 1
32459: DEC
32460: ST_TO_ADDR
32461: LD_INT 4
32463: PUSH
32464: FOR_TO
32465: IFFALSE 32486
// SetSkill ( i , j , 10 ) ;
32467: LD_VAR 0 2
32471: PPUSH
32472: LD_VAR 0 3
32476: PPUSH
32477: LD_INT 10
32479: PPUSH
32480: CALL_OW 237
32484: GO 32464
32486: POP
32487: POP
// end ;
32488: GO 32448
32490: POP
32491: POP
// end ;
32492: LD_VAR 0 1
32496: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32497: LD_INT 0
32499: PPUSH
// uc_side := your_side ;
32500: LD_ADDR_OWVAR 20
32504: PUSH
32505: LD_OWVAR 2
32509: ST_TO_ADDR
// uc_nation := nation ;
32510: LD_ADDR_OWVAR 21
32514: PUSH
32515: LD_VAR 0 1
32519: ST_TO_ADDR
// InitHc ;
32520: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32524: LD_INT 0
32526: PPUSH
32527: LD_VAR 0 2
32531: PPUSH
32532: LD_VAR 0 3
32536: PPUSH
32537: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32541: LD_VAR 0 4
32545: PPUSH
32546: LD_VAR 0 5
32550: PPUSH
32551: CALL_OW 428
32555: PUSH
32556: LD_INT 0
32558: EQUAL
32559: IFFALSE 32583
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32561: CALL_OW 44
32565: PPUSH
32566: LD_VAR 0 4
32570: PPUSH
32571: LD_VAR 0 5
32575: PPUSH
32576: LD_INT 1
32578: PPUSH
32579: CALL_OW 48
// end ;
32583: LD_VAR 0 6
32587: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32588: LD_INT 0
32590: PPUSH
32591: PPUSH
// uc_side := your_side ;
32592: LD_ADDR_OWVAR 20
32596: PUSH
32597: LD_OWVAR 2
32601: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32602: LD_VAR 0 1
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: LD_INT 2
32612: PUSH
32613: LD_INT 3
32615: PUSH
32616: LD_INT 4
32618: PUSH
32619: LD_INT 5
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: IN
32629: IFFALSE 32641
// uc_nation := nation_american else
32631: LD_ADDR_OWVAR 21
32635: PUSH
32636: LD_INT 1
32638: ST_TO_ADDR
32639: GO 32684
// if chassis in [ 11 , 12 , 13 , 14 ] then
32641: LD_VAR 0 1
32645: PUSH
32646: LD_INT 11
32648: PUSH
32649: LD_INT 12
32651: PUSH
32652: LD_INT 13
32654: PUSH
32655: LD_INT 14
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: IN
32664: IFFALSE 32676
// uc_nation := nation_arabian else
32666: LD_ADDR_OWVAR 21
32670: PUSH
32671: LD_INT 2
32673: ST_TO_ADDR
32674: GO 32684
// uc_nation := nation_russian ;
32676: LD_ADDR_OWVAR 21
32680: PUSH
32681: LD_INT 3
32683: ST_TO_ADDR
// vc_chassis := chassis ;
32684: LD_ADDR_OWVAR 37
32688: PUSH
32689: LD_VAR 0 1
32693: ST_TO_ADDR
// vc_engine := engine ;
32694: LD_ADDR_OWVAR 39
32698: PUSH
32699: LD_VAR 0 2
32703: ST_TO_ADDR
// vc_control := control ;
32704: LD_ADDR_OWVAR 38
32708: PUSH
32709: LD_VAR 0 3
32713: ST_TO_ADDR
// vc_weapon := weapon ;
32714: LD_ADDR_OWVAR 40
32718: PUSH
32719: LD_VAR 0 4
32723: ST_TO_ADDR
// un := CreateVehicle ;
32724: LD_ADDR_VAR 0 8
32728: PUSH
32729: CALL_OW 45
32733: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32734: LD_VAR 0 8
32738: PPUSH
32739: LD_INT 0
32741: PPUSH
32742: LD_INT 5
32744: PPUSH
32745: CALL_OW 12
32749: PPUSH
32750: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32754: LD_VAR 0 8
32758: PPUSH
32759: LD_VAR 0 5
32763: PPUSH
32764: LD_VAR 0 6
32768: PPUSH
32769: LD_INT 1
32771: PPUSH
32772: CALL_OW 48
// end ;
32776: LD_VAR 0 7
32780: RET
// export hInvincible ; every 1 do
32781: GO 32783
32783: DISABLE
// hInvincible := [ ] ;
32784: LD_ADDR_EXP 119
32788: PUSH
32789: EMPTY
32790: ST_TO_ADDR
32791: END
// every 10 do var i ;
32792: GO 32794
32794: DISABLE
32795: LD_INT 0
32797: PPUSH
// begin enable ;
32798: ENABLE
// if not hInvincible then
32799: LD_EXP 119
32803: NOT
32804: IFFALSE 32808
// exit ;
32806: GO 32852
// for i in hInvincible do
32808: LD_ADDR_VAR 0 1
32812: PUSH
32813: LD_EXP 119
32817: PUSH
32818: FOR_IN
32819: IFFALSE 32850
// if GetLives ( i ) < 1000 then
32821: LD_VAR 0 1
32825: PPUSH
32826: CALL_OW 256
32830: PUSH
32831: LD_INT 1000
32833: LESS
32834: IFFALSE 32848
// SetLives ( i , 1000 ) ;
32836: LD_VAR 0 1
32840: PPUSH
32841: LD_INT 1000
32843: PPUSH
32844: CALL_OW 234
32848: GO 32818
32850: POP
32851: POP
// end ;
32852: PPOPN 1
32854: END
// export function hHackInvincible ; var i ; begin
32855: LD_INT 0
32857: PPUSH
32858: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32859: LD_ADDR_VAR 0 2
32863: PUSH
32864: LD_INT 2
32866: PUSH
32867: LD_INT 21
32869: PUSH
32870: LD_INT 1
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 21
32879: PUSH
32880: LD_INT 2
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: PPUSH
32892: CALL_OW 69
32896: PUSH
32897: FOR_IN
32898: IFFALSE 32959
// if IsSelected ( i ) then
32900: LD_VAR 0 2
32904: PPUSH
32905: CALL_OW 306
32909: IFFALSE 32957
// begin if i in hInvincible then
32911: LD_VAR 0 2
32915: PUSH
32916: LD_EXP 119
32920: IN
32921: IFFALSE 32941
// hInvincible := hInvincible diff i else
32923: LD_ADDR_EXP 119
32927: PUSH
32928: LD_EXP 119
32932: PUSH
32933: LD_VAR 0 2
32937: DIFF
32938: ST_TO_ADDR
32939: GO 32957
// hInvincible := hInvincible union i ;
32941: LD_ADDR_EXP 119
32945: PUSH
32946: LD_EXP 119
32950: PUSH
32951: LD_VAR 0 2
32955: UNION
32956: ST_TO_ADDR
// end ;
32957: GO 32897
32959: POP
32960: POP
// end ;
32961: LD_VAR 0 1
32965: RET
// export function hHackInvisible ; var i , j ; begin
32966: LD_INT 0
32968: PPUSH
32969: PPUSH
32970: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32971: LD_ADDR_VAR 0 2
32975: PUSH
32976: LD_INT 21
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PPUSH
32986: CALL_OW 69
32990: PUSH
32991: FOR_IN
32992: IFFALSE 33016
// if IsSelected ( i ) then
32994: LD_VAR 0 2
32998: PPUSH
32999: CALL_OW 306
33003: IFFALSE 33014
// ComForceInvisible ( i ) ;
33005: LD_VAR 0 2
33009: PPUSH
33010: CALL_OW 496
33014: GO 32991
33016: POP
33017: POP
// end ;
33018: LD_VAR 0 1
33022: RET
// export function hHackChangeYourSide ; begin
33023: LD_INT 0
33025: PPUSH
// if your_side = 8 then
33026: LD_OWVAR 2
33030: PUSH
33031: LD_INT 8
33033: EQUAL
33034: IFFALSE 33046
// your_side := 0 else
33036: LD_ADDR_OWVAR 2
33040: PUSH
33041: LD_INT 0
33043: ST_TO_ADDR
33044: GO 33060
// your_side := your_side + 1 ;
33046: LD_ADDR_OWVAR 2
33050: PUSH
33051: LD_OWVAR 2
33055: PUSH
33056: LD_INT 1
33058: PLUS
33059: ST_TO_ADDR
// end ;
33060: LD_VAR 0 1
33064: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33065: LD_INT 0
33067: PPUSH
33068: PPUSH
33069: PPUSH
// for i in all_units do
33070: LD_ADDR_VAR 0 2
33074: PUSH
33075: LD_OWVAR 3
33079: PUSH
33080: FOR_IN
33081: IFFALSE 33159
// if IsSelected ( i ) then
33083: LD_VAR 0 2
33087: PPUSH
33088: CALL_OW 306
33092: IFFALSE 33157
// begin j := GetSide ( i ) ;
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: LD_VAR 0 2
33103: PPUSH
33104: CALL_OW 255
33108: ST_TO_ADDR
// if j = 8 then
33109: LD_VAR 0 3
33113: PUSH
33114: LD_INT 8
33116: EQUAL
33117: IFFALSE 33129
// j := 0 else
33119: LD_ADDR_VAR 0 3
33123: PUSH
33124: LD_INT 0
33126: ST_TO_ADDR
33127: GO 33143
// j := j + 1 ;
33129: LD_ADDR_VAR 0 3
33133: PUSH
33134: LD_VAR 0 3
33138: PUSH
33139: LD_INT 1
33141: PLUS
33142: ST_TO_ADDR
// SetSide ( i , j ) ;
33143: LD_VAR 0 2
33147: PPUSH
33148: LD_VAR 0 3
33152: PPUSH
33153: CALL_OW 235
// end ;
33157: GO 33080
33159: POP
33160: POP
// end ;
33161: LD_VAR 0 1
33165: RET
// export function hHackFog ; begin
33166: LD_INT 0
33168: PPUSH
// FogOff ( true ) ;
33169: LD_INT 1
33171: PPUSH
33172: CALL_OW 344
// end ;
33176: LD_VAR 0 1
33180: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33181: LD_INT 0
33183: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33184: LD_VAR 0 1
33188: PPUSH
33189: LD_VAR 0 2
33193: PPUSH
33194: LD_VAR 0 3
33198: PPUSH
33199: LD_INT 1
33201: PPUSH
33202: LD_INT 1
33204: PPUSH
33205: CALL_OW 483
// CenterOnXY ( x , y ) ;
33209: LD_VAR 0 2
33213: PPUSH
33214: LD_VAR 0 3
33218: PPUSH
33219: CALL_OW 84
// end ; end_of_file
33223: LD_VAR 0 4
33227: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33228: LD_INT 0
33230: PPUSH
33231: PPUSH
33232: PPUSH
33233: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33234: LD_VAR 0 1
33238: PPUSH
33239: CALL_OW 264
33243: PUSH
33244: LD_EXP 47
33248: EQUAL
33249: IFFALSE 33321
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33251: LD_INT 68
33253: PPUSH
33254: LD_VAR 0 1
33258: PPUSH
33259: CALL_OW 255
33263: PPUSH
33264: CALL_OW 321
33268: PUSH
33269: LD_INT 2
33271: EQUAL
33272: IFFALSE 33284
// eff := 70 else
33274: LD_ADDR_VAR 0 4
33278: PUSH
33279: LD_INT 70
33281: ST_TO_ADDR
33282: GO 33292
// eff := 30 ;
33284: LD_ADDR_VAR 0 4
33288: PUSH
33289: LD_INT 30
33291: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33292: LD_VAR 0 1
33296: PPUSH
33297: CALL_OW 250
33301: PPUSH
33302: LD_VAR 0 1
33306: PPUSH
33307: CALL_OW 251
33311: PPUSH
33312: LD_VAR 0 4
33316: PPUSH
33317: CALL_OW 495
// end ; end ;
33321: LD_VAR 0 2
33325: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33326: LD_INT 0
33328: PPUSH
// end ;
33329: LD_VAR 0 4
33333: RET
// export function SOS_Command ( cmd ) ; begin
33334: LD_INT 0
33336: PPUSH
// end ;
33337: LD_VAR 0 2
33341: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33342: LD_INT 0
33344: PPUSH
// end ;
33345: LD_VAR 0 6
33349: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33350: LD_INT 0
33352: PPUSH
33353: PPUSH
// if not vehicle or not factory then
33354: LD_VAR 0 1
33358: NOT
33359: PUSH
33360: LD_VAR 0 2
33364: NOT
33365: OR
33366: IFFALSE 33370
// exit ;
33368: GO 33601
// if factoryWaypoints >= factory then
33370: LD_EXP 120
33374: PUSH
33375: LD_VAR 0 2
33379: GREATEREQUAL
33380: IFFALSE 33601
// if factoryWaypoints [ factory ] then
33382: LD_EXP 120
33386: PUSH
33387: LD_VAR 0 2
33391: ARRAY
33392: IFFALSE 33601
// begin if GetControl ( vehicle ) = control_manual then
33394: LD_VAR 0 1
33398: PPUSH
33399: CALL_OW 263
33403: PUSH
33404: LD_INT 1
33406: EQUAL
33407: IFFALSE 33488
// begin driver := IsDrivenBy ( vehicle ) ;
33409: LD_ADDR_VAR 0 4
33413: PUSH
33414: LD_VAR 0 1
33418: PPUSH
33419: CALL_OW 311
33423: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
33424: LD_VAR 0 4
33428: PPUSH
33429: LD_EXP 120
33433: PUSH
33434: LD_VAR 0 2
33438: ARRAY
33439: PUSH
33440: LD_INT 1
33442: ARRAY
33443: PPUSH
33444: LD_EXP 120
33448: PUSH
33449: LD_VAR 0 2
33453: ARRAY
33454: PUSH
33455: LD_INT 2
33457: ARRAY
33458: PPUSH
33459: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33463: LD_VAR 0 4
33467: PPUSH
33468: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33472: LD_VAR 0 4
33476: PPUSH
33477: LD_VAR 0 2
33481: PPUSH
33482: CALL_OW 180
// end else
33486: GO 33601
// if GetControl ( vehicle ) = control_remote then
33488: LD_VAR 0 1
33492: PPUSH
33493: CALL_OW 263
33497: PUSH
33498: LD_INT 2
33500: EQUAL
33501: IFFALSE 33562
// begin wait ( 0 0$2 ) ;
33503: LD_INT 70
33505: PPUSH
33506: CALL_OW 67
// if Connect ( vehicle ) then
33510: LD_VAR 0 1
33514: PPUSH
33515: CALL 45825 0 1
33519: IFFALSE 33560
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
33521: LD_VAR 0 1
33525: PPUSH
33526: LD_EXP 120
33530: PUSH
33531: LD_VAR 0 2
33535: ARRAY
33536: PUSH
33537: LD_INT 1
33539: ARRAY
33540: PPUSH
33541: LD_EXP 120
33545: PUSH
33546: LD_VAR 0 2
33550: ARRAY
33551: PUSH
33552: LD_INT 2
33554: ARRAY
33555: PPUSH
33556: CALL_OW 171
// end else
33560: GO 33601
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
33562: LD_VAR 0 1
33566: PPUSH
33567: LD_EXP 120
33571: PUSH
33572: LD_VAR 0 2
33576: ARRAY
33577: PUSH
33578: LD_INT 1
33580: ARRAY
33581: PPUSH
33582: LD_EXP 120
33586: PUSH
33587: LD_VAR 0 2
33591: ARRAY
33592: PUSH
33593: LD_INT 2
33595: ARRAY
33596: PPUSH
33597: CALL_OW 171
// end ; end ;
33601: LD_VAR 0 3
33605: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33606: LD_INT 0
33608: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33609: LD_VAR 0 1
33613: PUSH
33614: LD_INT 250
33616: EQUAL
33617: PUSH
33618: LD_VAR 0 2
33622: PPUSH
33623: CALL_OW 264
33627: PUSH
33628: LD_EXP 50
33632: EQUAL
33633: AND
33634: IFFALSE 33655
// MinerPlaceMine ( unit , x , y ) ;
33636: LD_VAR 0 2
33640: PPUSH
33641: LD_VAR 0 4
33645: PPUSH
33646: LD_VAR 0 5
33650: PPUSH
33651: CALL 36383 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33655: LD_VAR 0 1
33659: PUSH
33660: LD_INT 251
33662: EQUAL
33663: PUSH
33664: LD_VAR 0 2
33668: PPUSH
33669: CALL_OW 264
33673: PUSH
33674: LD_EXP 50
33678: EQUAL
33679: AND
33680: IFFALSE 33701
// MinerDetonateMine ( unit , x , y ) ;
33682: LD_VAR 0 2
33686: PPUSH
33687: LD_VAR 0 4
33691: PPUSH
33692: LD_VAR 0 5
33696: PPUSH
33697: CALL 36660 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33701: LD_VAR 0 1
33705: PUSH
33706: LD_INT 252
33708: EQUAL
33709: PUSH
33710: LD_VAR 0 2
33714: PPUSH
33715: CALL_OW 264
33719: PUSH
33720: LD_EXP 50
33724: EQUAL
33725: AND
33726: IFFALSE 33747
// MinerCreateMinefield ( unit , x , y ) ;
33728: LD_VAR 0 2
33732: PPUSH
33733: LD_VAR 0 4
33737: PPUSH
33738: LD_VAR 0 5
33742: PPUSH
33743: CALL 37077 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33747: LD_VAR 0 1
33751: PUSH
33752: LD_INT 253
33754: EQUAL
33755: PUSH
33756: LD_VAR 0 2
33760: PPUSH
33761: CALL_OW 257
33765: PUSH
33766: LD_INT 5
33768: EQUAL
33769: AND
33770: IFFALSE 33791
// ComBinocular ( unit , x , y ) ;
33772: LD_VAR 0 2
33776: PPUSH
33777: LD_VAR 0 4
33781: PPUSH
33782: LD_VAR 0 5
33786: PPUSH
33787: CALL 37448 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33791: LD_VAR 0 1
33795: PUSH
33796: LD_INT 254
33798: EQUAL
33799: PUSH
33800: LD_VAR 0 2
33804: PPUSH
33805: CALL_OW 264
33809: PUSH
33810: LD_EXP 45
33814: EQUAL
33815: AND
33816: PUSH
33817: LD_VAR 0 3
33821: PPUSH
33822: CALL_OW 263
33826: PUSH
33827: LD_INT 3
33829: EQUAL
33830: AND
33831: IFFALSE 33847
// HackDestroyVehicle ( unit , selectedUnit ) ;
33833: LD_VAR 0 2
33837: PPUSH
33838: LD_VAR 0 3
33842: PPUSH
33843: CALL 35743 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33847: LD_VAR 0 1
33851: PUSH
33852: LD_INT 255
33854: EQUAL
33855: PUSH
33856: LD_VAR 0 2
33860: PPUSH
33861: CALL_OW 264
33865: PUSH
33866: LD_INT 14
33868: PUSH
33869: LD_INT 53
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: IN
33876: AND
33877: PUSH
33878: LD_VAR 0 4
33882: PPUSH
33883: LD_VAR 0 5
33887: PPUSH
33888: CALL_OW 488
33892: AND
33893: IFFALSE 33917
// CutTreeXYR ( unit , x , y , 12 ) ;
33895: LD_VAR 0 2
33899: PPUSH
33900: LD_VAR 0 4
33904: PPUSH
33905: LD_VAR 0 5
33909: PPUSH
33910: LD_INT 12
33912: PPUSH
33913: CALL 34309 0 4
// if cmd = 256 then
33917: LD_VAR 0 1
33921: PUSH
33922: LD_INT 256
33924: EQUAL
33925: IFFALSE 33946
// SetFactoryWaypoint ( unit , x , y ) ;
33927: LD_VAR 0 2
33931: PPUSH
33932: LD_VAR 0 4
33936: PPUSH
33937: LD_VAR 0 5
33941: PPUSH
33942: CALL 33951 0 3
// end ;
33946: LD_VAR 0 6
33950: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33951: LD_INT 0
33953: PPUSH
33954: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33955: LD_VAR 0 1
33959: NOT
33960: PUSH
33961: LD_VAR 0 2
33965: PPUSH
33966: LD_VAR 0 3
33970: PPUSH
33971: CALL_OW 488
33975: NOT
33976: OR
33977: PUSH
33978: LD_VAR 0 1
33982: PPUSH
33983: CALL_OW 266
33987: PUSH
33988: LD_INT 3
33990: NONEQUAL
33991: PUSH
33992: LD_VAR 0 1
33996: PPUSH
33997: CALL_OW 247
34001: PUSH
34002: LD_INT 1
34004: EQUAL
34005: NOT
34006: AND
34007: OR
34008: IFFALSE 34012
// exit ;
34010: GO 34161
// if GetType ( factory ) = unit_human then
34012: LD_VAR 0 1
34016: PPUSH
34017: CALL_OW 247
34021: PUSH
34022: LD_INT 1
34024: EQUAL
34025: IFFALSE 34042
// factory := IsInUnit ( factory ) ;
34027: LD_ADDR_VAR 0 1
34031: PUSH
34032: LD_VAR 0 1
34036: PPUSH
34037: CALL_OW 310
34041: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34042: LD_VAR 0 1
34046: PPUSH
34047: CALL_OW 266
34051: PUSH
34052: LD_INT 3
34054: NONEQUAL
34055: IFFALSE 34059
// exit ;
34057: GO 34161
// if HexInfo ( x , y ) = factory then
34059: LD_VAR 0 2
34063: PPUSH
34064: LD_VAR 0 3
34068: PPUSH
34069: CALL_OW 428
34073: PUSH
34074: LD_VAR 0 1
34078: EQUAL
34079: IFFALSE 34106
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34081: LD_ADDR_EXP 120
34085: PUSH
34086: LD_EXP 120
34090: PPUSH
34091: LD_VAR 0 1
34095: PPUSH
34096: LD_INT 0
34098: PPUSH
34099: CALL_OW 1
34103: ST_TO_ADDR
34104: GO 34157
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34106: LD_ADDR_EXP 120
34110: PUSH
34111: LD_EXP 120
34115: PPUSH
34116: LD_VAR 0 1
34120: PPUSH
34121: LD_VAR 0 1
34125: PPUSH
34126: CALL_OW 255
34130: PUSH
34131: LD_VAR 0 1
34135: PUSH
34136: LD_VAR 0 2
34140: PUSH
34141: LD_VAR 0 3
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: PPUSH
34152: CALL_OW 1
34156: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34157: CALL 34166 0 0
// end ;
34161: LD_VAR 0 4
34165: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
34166: LD_INT 0
34168: PPUSH
34169: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34170: LD_STRING resetFactoryWaypoint();
34172: PPUSH
34173: CALL_OW 559
// if factoryWaypoints then
34177: LD_EXP 120
34181: IFFALSE 34304
// begin for i := 1 to factoryWaypoints do
34183: LD_ADDR_VAR 0 2
34187: PUSH
34188: DOUBLE
34189: LD_INT 1
34191: DEC
34192: ST_TO_ADDR
34193: LD_EXP 120
34197: PUSH
34198: FOR_TO
34199: IFFALSE 34302
// if factoryWaypoints [ i ] then
34201: LD_EXP 120
34205: PUSH
34206: LD_VAR 0 2
34210: ARRAY
34211: IFFALSE 34300
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
34213: LD_STRING setFactoryWaypointXY(
34215: PUSH
34216: LD_EXP 120
34220: PUSH
34221: LD_VAR 0 2
34225: ARRAY
34226: PUSH
34227: LD_INT 1
34229: ARRAY
34230: STR
34231: PUSH
34232: LD_STRING ,
34234: STR
34235: PUSH
34236: LD_EXP 120
34240: PUSH
34241: LD_VAR 0 2
34245: ARRAY
34246: PUSH
34247: LD_INT 2
34249: ARRAY
34250: STR
34251: PUSH
34252: LD_STRING ,
34254: STR
34255: PUSH
34256: LD_EXP 120
34260: PUSH
34261: LD_VAR 0 2
34265: ARRAY
34266: PUSH
34267: LD_INT 3
34269: ARRAY
34270: STR
34271: PUSH
34272: LD_STRING ,
34274: STR
34275: PUSH
34276: LD_EXP 120
34280: PUSH
34281: LD_VAR 0 2
34285: ARRAY
34286: PUSH
34287: LD_INT 4
34289: ARRAY
34290: STR
34291: PUSH
34292: LD_STRING )
34294: STR
34295: PPUSH
34296: CALL_OW 559
34300: GO 34198
34302: POP
34303: POP
// end ; end ;
34304: LD_VAR 0 1
34308: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34309: LD_INT 0
34311: PPUSH
34312: PPUSH
34313: PPUSH
34314: PPUSH
34315: PPUSH
34316: PPUSH
34317: PPUSH
34318: PPUSH
34319: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34320: LD_VAR 0 1
34324: NOT
34325: PUSH
34326: LD_VAR 0 2
34330: PPUSH
34331: LD_VAR 0 3
34335: PPUSH
34336: CALL_OW 488
34340: NOT
34341: OR
34342: PUSH
34343: LD_VAR 0 4
34347: NOT
34348: OR
34349: IFFALSE 34353
// exit ;
34351: GO 34693
// list := [ ] ;
34353: LD_ADDR_VAR 0 13
34357: PUSH
34358: EMPTY
34359: ST_TO_ADDR
// if x - r < 0 then
34360: LD_VAR 0 2
34364: PUSH
34365: LD_VAR 0 4
34369: MINUS
34370: PUSH
34371: LD_INT 0
34373: LESS
34374: IFFALSE 34386
// min_x := 0 else
34376: LD_ADDR_VAR 0 7
34380: PUSH
34381: LD_INT 0
34383: ST_TO_ADDR
34384: GO 34402
// min_x := x - r ;
34386: LD_ADDR_VAR 0 7
34390: PUSH
34391: LD_VAR 0 2
34395: PUSH
34396: LD_VAR 0 4
34400: MINUS
34401: ST_TO_ADDR
// if y - r < 0 then
34402: LD_VAR 0 3
34406: PUSH
34407: LD_VAR 0 4
34411: MINUS
34412: PUSH
34413: LD_INT 0
34415: LESS
34416: IFFALSE 34428
// min_y := 0 else
34418: LD_ADDR_VAR 0 8
34422: PUSH
34423: LD_INT 0
34425: ST_TO_ADDR
34426: GO 34444
// min_y := y - r ;
34428: LD_ADDR_VAR 0 8
34432: PUSH
34433: LD_VAR 0 3
34437: PUSH
34438: LD_VAR 0 4
34442: MINUS
34443: ST_TO_ADDR
// max_x := x + r ;
34444: LD_ADDR_VAR 0 9
34448: PUSH
34449: LD_VAR 0 2
34453: PUSH
34454: LD_VAR 0 4
34458: PLUS
34459: ST_TO_ADDR
// max_y := y + r ;
34460: LD_ADDR_VAR 0 10
34464: PUSH
34465: LD_VAR 0 3
34469: PUSH
34470: LD_VAR 0 4
34474: PLUS
34475: ST_TO_ADDR
// for _x = min_x to max_x do
34476: LD_ADDR_VAR 0 11
34480: PUSH
34481: DOUBLE
34482: LD_VAR 0 7
34486: DEC
34487: ST_TO_ADDR
34488: LD_VAR 0 9
34492: PUSH
34493: FOR_TO
34494: IFFALSE 34611
// for _y = min_y to max_y do
34496: LD_ADDR_VAR 0 12
34500: PUSH
34501: DOUBLE
34502: LD_VAR 0 8
34506: DEC
34507: ST_TO_ADDR
34508: LD_VAR 0 10
34512: PUSH
34513: FOR_TO
34514: IFFALSE 34607
// begin if not ValidHex ( _x , _y ) then
34516: LD_VAR 0 11
34520: PPUSH
34521: LD_VAR 0 12
34525: PPUSH
34526: CALL_OW 488
34530: NOT
34531: IFFALSE 34535
// continue ;
34533: GO 34513
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34535: LD_VAR 0 11
34539: PPUSH
34540: LD_VAR 0 12
34544: PPUSH
34545: CALL_OW 351
34549: PUSH
34550: LD_VAR 0 11
34554: PPUSH
34555: LD_VAR 0 12
34559: PPUSH
34560: CALL_OW 554
34564: AND
34565: IFFALSE 34605
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34567: LD_ADDR_VAR 0 13
34571: PUSH
34572: LD_VAR 0 13
34576: PPUSH
34577: LD_VAR 0 13
34581: PUSH
34582: LD_INT 1
34584: PLUS
34585: PPUSH
34586: LD_VAR 0 11
34590: PUSH
34591: LD_VAR 0 12
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PPUSH
34600: CALL_OW 2
34604: ST_TO_ADDR
// end ;
34605: GO 34513
34607: POP
34608: POP
34609: GO 34493
34611: POP
34612: POP
// if not list then
34613: LD_VAR 0 13
34617: NOT
34618: IFFALSE 34622
// exit ;
34620: GO 34693
// for i in list do
34622: LD_ADDR_VAR 0 6
34626: PUSH
34627: LD_VAR 0 13
34631: PUSH
34632: FOR_IN
34633: IFFALSE 34691
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34635: LD_VAR 0 1
34639: PPUSH
34640: LD_STRING M
34642: PUSH
34643: LD_VAR 0 6
34647: PUSH
34648: LD_INT 1
34650: ARRAY
34651: PUSH
34652: LD_VAR 0 6
34656: PUSH
34657: LD_INT 2
34659: ARRAY
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: PUSH
34682: EMPTY
34683: LIST
34684: PPUSH
34685: CALL_OW 447
34689: GO 34632
34691: POP
34692: POP
// end ;
34693: LD_VAR 0 5
34697: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34698: LD_EXP 121
34702: NOT
34703: IFFALSE 34753
34705: GO 34707
34707: DISABLE
// begin initHack := true ;
34708: LD_ADDR_EXP 121
34712: PUSH
34713: LD_INT 1
34715: ST_TO_ADDR
// hackTanks := [ ] ;
34716: LD_ADDR_EXP 122
34720: PUSH
34721: EMPTY
34722: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34723: LD_ADDR_EXP 123
34727: PUSH
34728: EMPTY
34729: ST_TO_ADDR
// hackLimit := 3 ;
34730: LD_ADDR_EXP 124
34734: PUSH
34735: LD_INT 3
34737: ST_TO_ADDR
// hackDist := 12 ;
34738: LD_ADDR_EXP 125
34742: PUSH
34743: LD_INT 12
34745: ST_TO_ADDR
// hackCounter := [ ] ;
34746: LD_ADDR_EXP 126
34750: PUSH
34751: EMPTY
34752: ST_TO_ADDR
// end ;
34753: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34754: LD_EXP 121
34758: PUSH
34759: LD_INT 34
34761: PUSH
34762: LD_EXP 45
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PPUSH
34771: CALL_OW 69
34775: AND
34776: IFFALSE 35031
34778: GO 34780
34780: DISABLE
34781: LD_INT 0
34783: PPUSH
34784: PPUSH
// begin enable ;
34785: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34786: LD_ADDR_VAR 0 1
34790: PUSH
34791: LD_INT 34
34793: PUSH
34794: LD_EXP 45
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PPUSH
34803: CALL_OW 69
34807: PUSH
34808: FOR_IN
34809: IFFALSE 35029
// begin if not i in hackTanks then
34811: LD_VAR 0 1
34815: PUSH
34816: LD_EXP 122
34820: IN
34821: NOT
34822: IFFALSE 34905
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34824: LD_ADDR_EXP 122
34828: PUSH
34829: LD_EXP 122
34833: PPUSH
34834: LD_EXP 122
34838: PUSH
34839: LD_INT 1
34841: PLUS
34842: PPUSH
34843: LD_VAR 0 1
34847: PPUSH
34848: CALL_OW 1
34852: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34853: LD_ADDR_EXP 123
34857: PUSH
34858: LD_EXP 123
34862: PPUSH
34863: LD_EXP 123
34867: PUSH
34868: LD_INT 1
34870: PLUS
34871: PPUSH
34872: EMPTY
34873: PPUSH
34874: CALL_OW 1
34878: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34879: LD_ADDR_EXP 126
34883: PUSH
34884: LD_EXP 126
34888: PPUSH
34889: LD_EXP 126
34893: PUSH
34894: LD_INT 1
34896: PLUS
34897: PPUSH
34898: EMPTY
34899: PPUSH
34900: CALL_OW 1
34904: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34905: LD_VAR 0 1
34909: PPUSH
34910: CALL_OW 302
34914: NOT
34915: IFFALSE 34928
// begin HackUnlinkAll ( i ) ;
34917: LD_VAR 0 1
34921: PPUSH
34922: CALL 35034 0 1
// continue ;
34926: GO 34808
// end ; HackCheckCapturedStatus ( i ) ;
34928: LD_VAR 0 1
34932: PPUSH
34933: CALL 35477 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34937: LD_ADDR_VAR 0 2
34941: PUSH
34942: LD_INT 81
34944: PUSH
34945: LD_VAR 0 1
34949: PPUSH
34950: CALL_OW 255
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 33
34961: PUSH
34962: LD_INT 3
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 91
34971: PUSH
34972: LD_VAR 0 1
34976: PUSH
34977: LD_EXP 125
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 50
34989: PUSH
34990: EMPTY
34991: LIST
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: PPUSH
34999: CALL_OW 69
35003: ST_TO_ADDR
// if not tmp then
35004: LD_VAR 0 2
35008: NOT
35009: IFFALSE 35013
// continue ;
35011: GO 34808
// HackLink ( i , tmp ) ;
35013: LD_VAR 0 1
35017: PPUSH
35018: LD_VAR 0 2
35022: PPUSH
35023: CALL 35170 0 2
// end ;
35027: GO 34808
35029: POP
35030: POP
// end ;
35031: PPOPN 2
35033: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35034: LD_INT 0
35036: PPUSH
35037: PPUSH
35038: PPUSH
// if not hack in hackTanks then
35039: LD_VAR 0 1
35043: PUSH
35044: LD_EXP 122
35048: IN
35049: NOT
35050: IFFALSE 35054
// exit ;
35052: GO 35165
// index := GetElementIndex ( hackTanks , hack ) ;
35054: LD_ADDR_VAR 0 4
35058: PUSH
35059: LD_EXP 122
35063: PPUSH
35064: LD_VAR 0 1
35068: PPUSH
35069: CALL 42639 0 2
35073: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35074: LD_EXP 123
35078: PUSH
35079: LD_VAR 0 4
35083: ARRAY
35084: IFFALSE 35165
// begin for i in hackTanksCaptured [ index ] do
35086: LD_ADDR_VAR 0 3
35090: PUSH
35091: LD_EXP 123
35095: PUSH
35096: LD_VAR 0 4
35100: ARRAY
35101: PUSH
35102: FOR_IN
35103: IFFALSE 35129
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35105: LD_VAR 0 3
35109: PUSH
35110: LD_INT 1
35112: ARRAY
35113: PPUSH
35114: LD_VAR 0 3
35118: PUSH
35119: LD_INT 2
35121: ARRAY
35122: PPUSH
35123: CALL_OW 235
35127: GO 35102
35129: POP
35130: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35131: LD_ADDR_EXP 123
35135: PUSH
35136: LD_EXP 123
35140: PPUSH
35141: LD_VAR 0 4
35145: PPUSH
35146: EMPTY
35147: PPUSH
35148: CALL_OW 1
35152: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35153: LD_VAR 0 1
35157: PPUSH
35158: LD_INT 0
35160: PPUSH
35161: CALL_OW 505
// end ; end ;
35165: LD_VAR 0 2
35169: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35170: LD_INT 0
35172: PPUSH
35173: PPUSH
35174: PPUSH
// if not hack in hackTanks or not vehicles then
35175: LD_VAR 0 1
35179: PUSH
35180: LD_EXP 122
35184: IN
35185: NOT
35186: PUSH
35187: LD_VAR 0 2
35191: NOT
35192: OR
35193: IFFALSE 35197
// exit ;
35195: GO 35472
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35197: LD_ADDR_VAR 0 2
35201: PUSH
35202: LD_VAR 0 1
35206: PPUSH
35207: LD_VAR 0 2
35211: PPUSH
35212: LD_INT 1
35214: PPUSH
35215: LD_INT 1
35217: PPUSH
35218: CALL 43289 0 4
35222: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35223: LD_ADDR_VAR 0 5
35227: PUSH
35228: LD_EXP 122
35232: PPUSH
35233: LD_VAR 0 1
35237: PPUSH
35238: CALL 42639 0 2
35242: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35243: LD_EXP 123
35247: PUSH
35248: LD_VAR 0 5
35252: ARRAY
35253: PUSH
35254: LD_EXP 124
35258: LESS
35259: IFFALSE 35448
// begin for i := 1 to vehicles do
35261: LD_ADDR_VAR 0 4
35265: PUSH
35266: DOUBLE
35267: LD_INT 1
35269: DEC
35270: ST_TO_ADDR
35271: LD_VAR 0 2
35275: PUSH
35276: FOR_TO
35277: IFFALSE 35446
// begin if hackTanksCaptured [ index ] = hackLimit then
35279: LD_EXP 123
35283: PUSH
35284: LD_VAR 0 5
35288: ARRAY
35289: PUSH
35290: LD_EXP 124
35294: EQUAL
35295: IFFALSE 35299
// break ;
35297: GO 35446
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35299: LD_ADDR_EXP 126
35303: PUSH
35304: LD_EXP 126
35308: PPUSH
35309: LD_VAR 0 5
35313: PPUSH
35314: LD_EXP 126
35318: PUSH
35319: LD_VAR 0 5
35323: ARRAY
35324: PUSH
35325: LD_INT 1
35327: PLUS
35328: PPUSH
35329: CALL_OW 1
35333: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35334: LD_ADDR_EXP 123
35338: PUSH
35339: LD_EXP 123
35343: PPUSH
35344: LD_VAR 0 5
35348: PUSH
35349: LD_EXP 123
35353: PUSH
35354: LD_VAR 0 5
35358: ARRAY
35359: PUSH
35360: LD_INT 1
35362: PLUS
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PPUSH
35368: LD_VAR 0 2
35372: PUSH
35373: LD_VAR 0 4
35377: ARRAY
35378: PUSH
35379: LD_VAR 0 2
35383: PUSH
35384: LD_VAR 0 4
35388: ARRAY
35389: PPUSH
35390: CALL_OW 255
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PPUSH
35399: CALL 42854 0 3
35403: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35404: LD_VAR 0 2
35408: PUSH
35409: LD_VAR 0 4
35413: ARRAY
35414: PPUSH
35415: LD_VAR 0 1
35419: PPUSH
35420: CALL_OW 255
35424: PPUSH
35425: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35429: LD_VAR 0 2
35433: PUSH
35434: LD_VAR 0 4
35438: ARRAY
35439: PPUSH
35440: CALL_OW 141
// end ;
35444: GO 35276
35446: POP
35447: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35448: LD_VAR 0 1
35452: PPUSH
35453: LD_EXP 123
35457: PUSH
35458: LD_VAR 0 5
35462: ARRAY
35463: PUSH
35464: LD_INT 0
35466: PLUS
35467: PPUSH
35468: CALL_OW 505
// end ;
35472: LD_VAR 0 3
35476: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35477: LD_INT 0
35479: PPUSH
35480: PPUSH
35481: PPUSH
35482: PPUSH
// if not hack in hackTanks then
35483: LD_VAR 0 1
35487: PUSH
35488: LD_EXP 122
35492: IN
35493: NOT
35494: IFFALSE 35498
// exit ;
35496: GO 35738
// index := GetElementIndex ( hackTanks , hack ) ;
35498: LD_ADDR_VAR 0 4
35502: PUSH
35503: LD_EXP 122
35507: PPUSH
35508: LD_VAR 0 1
35512: PPUSH
35513: CALL 42639 0 2
35517: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35518: LD_ADDR_VAR 0 3
35522: PUSH
35523: DOUBLE
35524: LD_EXP 123
35528: PUSH
35529: LD_VAR 0 4
35533: ARRAY
35534: INC
35535: ST_TO_ADDR
35536: LD_INT 1
35538: PUSH
35539: FOR_DOWNTO
35540: IFFALSE 35712
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35542: LD_ADDR_VAR 0 5
35546: PUSH
35547: LD_EXP 123
35551: PUSH
35552: LD_VAR 0 4
35556: ARRAY
35557: PUSH
35558: LD_VAR 0 3
35562: ARRAY
35563: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35564: LD_VAR 0 5
35568: PUSH
35569: LD_INT 1
35571: ARRAY
35572: PPUSH
35573: CALL_OW 302
35577: NOT
35578: PUSH
35579: LD_VAR 0 5
35583: PUSH
35584: LD_INT 1
35586: ARRAY
35587: PPUSH
35588: CALL_OW 255
35592: PUSH
35593: LD_VAR 0 1
35597: PPUSH
35598: CALL_OW 255
35602: NONEQUAL
35603: OR
35604: IFFALSE 35710
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35606: LD_VAR 0 5
35610: PUSH
35611: LD_INT 1
35613: ARRAY
35614: PPUSH
35615: CALL_OW 305
35619: PUSH
35620: LD_VAR 0 5
35624: PUSH
35625: LD_INT 1
35627: ARRAY
35628: PPUSH
35629: CALL_OW 255
35633: PUSH
35634: LD_VAR 0 1
35638: PPUSH
35639: CALL_OW 255
35643: EQUAL
35644: AND
35645: IFFALSE 35669
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35647: LD_VAR 0 5
35651: PUSH
35652: LD_INT 1
35654: ARRAY
35655: PPUSH
35656: LD_VAR 0 5
35660: PUSH
35661: LD_INT 2
35663: ARRAY
35664: PPUSH
35665: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35669: LD_ADDR_EXP 123
35673: PUSH
35674: LD_EXP 123
35678: PPUSH
35679: LD_VAR 0 4
35683: PPUSH
35684: LD_EXP 123
35688: PUSH
35689: LD_VAR 0 4
35693: ARRAY
35694: PPUSH
35695: LD_VAR 0 3
35699: PPUSH
35700: CALL_OW 3
35704: PPUSH
35705: CALL_OW 1
35709: ST_TO_ADDR
// end ; end ;
35710: GO 35539
35712: POP
35713: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35714: LD_VAR 0 1
35718: PPUSH
35719: LD_EXP 123
35723: PUSH
35724: LD_VAR 0 4
35728: ARRAY
35729: PUSH
35730: LD_INT 0
35732: PLUS
35733: PPUSH
35734: CALL_OW 505
// end ;
35738: LD_VAR 0 2
35742: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35743: LD_INT 0
35745: PPUSH
35746: PPUSH
35747: PPUSH
35748: PPUSH
// if not hack in hackTanks then
35749: LD_VAR 0 1
35753: PUSH
35754: LD_EXP 122
35758: IN
35759: NOT
35760: IFFALSE 35764
// exit ;
35762: GO 35849
// index := GetElementIndex ( hackTanks , hack ) ;
35764: LD_ADDR_VAR 0 5
35768: PUSH
35769: LD_EXP 122
35773: PPUSH
35774: LD_VAR 0 1
35778: PPUSH
35779: CALL 42639 0 2
35783: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35784: LD_ADDR_VAR 0 4
35788: PUSH
35789: DOUBLE
35790: LD_INT 1
35792: DEC
35793: ST_TO_ADDR
35794: LD_EXP 123
35798: PUSH
35799: LD_VAR 0 5
35803: ARRAY
35804: PUSH
35805: FOR_TO
35806: IFFALSE 35847
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35808: LD_EXP 123
35812: PUSH
35813: LD_VAR 0 5
35817: ARRAY
35818: PUSH
35819: LD_VAR 0 4
35823: ARRAY
35824: PUSH
35825: LD_INT 1
35827: ARRAY
35828: PUSH
35829: LD_VAR 0 2
35833: EQUAL
35834: IFFALSE 35845
// KillUnit ( vehicle ) ;
35836: LD_VAR 0 2
35840: PPUSH
35841: CALL_OW 66
35845: GO 35805
35847: POP
35848: POP
// end ;
35849: LD_VAR 0 3
35853: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35854: LD_EXP 127
35858: NOT
35859: IFFALSE 35894
35861: GO 35863
35863: DISABLE
// begin initMiner := true ;
35864: LD_ADDR_EXP 127
35868: PUSH
35869: LD_INT 1
35871: ST_TO_ADDR
// minersList := [ ] ;
35872: LD_ADDR_EXP 128
35876: PUSH
35877: EMPTY
35878: ST_TO_ADDR
// minerMinesList := [ ] ;
35879: LD_ADDR_EXP 129
35883: PUSH
35884: EMPTY
35885: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35886: LD_ADDR_EXP 130
35890: PUSH
35891: LD_INT 5
35893: ST_TO_ADDR
// end ;
35894: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35895: LD_EXP 127
35899: PUSH
35900: LD_INT 34
35902: PUSH
35903: LD_EXP 50
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PPUSH
35912: CALL_OW 69
35916: AND
35917: IFFALSE 36380
35919: GO 35921
35921: DISABLE
35922: LD_INT 0
35924: PPUSH
35925: PPUSH
35926: PPUSH
35927: PPUSH
// begin enable ;
35928: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35929: LD_ADDR_VAR 0 1
35933: PUSH
35934: LD_INT 34
35936: PUSH
35937: LD_EXP 50
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PPUSH
35946: CALL_OW 69
35950: PUSH
35951: FOR_IN
35952: IFFALSE 36024
// begin if not i in minersList then
35954: LD_VAR 0 1
35958: PUSH
35959: LD_EXP 128
35963: IN
35964: NOT
35965: IFFALSE 36022
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35967: LD_ADDR_EXP 128
35971: PUSH
35972: LD_EXP 128
35976: PPUSH
35977: LD_EXP 128
35981: PUSH
35982: LD_INT 1
35984: PLUS
35985: PPUSH
35986: LD_VAR 0 1
35990: PPUSH
35991: CALL_OW 1
35995: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35996: LD_ADDR_EXP 129
36000: PUSH
36001: LD_EXP 129
36005: PPUSH
36006: LD_EXP 129
36010: PUSH
36011: LD_INT 1
36013: PLUS
36014: PPUSH
36015: EMPTY
36016: PPUSH
36017: CALL_OW 1
36021: ST_TO_ADDR
// end end ;
36022: GO 35951
36024: POP
36025: POP
// for i := minerMinesList downto 1 do
36026: LD_ADDR_VAR 0 1
36030: PUSH
36031: DOUBLE
36032: LD_EXP 129
36036: INC
36037: ST_TO_ADDR
36038: LD_INT 1
36040: PUSH
36041: FOR_DOWNTO
36042: IFFALSE 36378
// begin if IsLive ( minersList [ i ] ) then
36044: LD_EXP 128
36048: PUSH
36049: LD_VAR 0 1
36053: ARRAY
36054: PPUSH
36055: CALL_OW 300
36059: IFFALSE 36087
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36061: LD_EXP 128
36065: PUSH
36066: LD_VAR 0 1
36070: ARRAY
36071: PPUSH
36072: LD_EXP 129
36076: PUSH
36077: LD_VAR 0 1
36081: ARRAY
36082: PPUSH
36083: CALL_OW 505
// if not minerMinesList [ i ] then
36087: LD_EXP 129
36091: PUSH
36092: LD_VAR 0 1
36096: ARRAY
36097: NOT
36098: IFFALSE 36102
// continue ;
36100: GO 36041
// for j := minerMinesList [ i ] downto 1 do
36102: LD_ADDR_VAR 0 2
36106: PUSH
36107: DOUBLE
36108: LD_EXP 129
36112: PUSH
36113: LD_VAR 0 1
36117: ARRAY
36118: INC
36119: ST_TO_ADDR
36120: LD_INT 1
36122: PUSH
36123: FOR_DOWNTO
36124: IFFALSE 36374
// begin side := GetSide ( minersList [ i ] ) ;
36126: LD_ADDR_VAR 0 3
36130: PUSH
36131: LD_EXP 128
36135: PUSH
36136: LD_VAR 0 1
36140: ARRAY
36141: PPUSH
36142: CALL_OW 255
36146: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36147: LD_ADDR_VAR 0 4
36151: PUSH
36152: LD_EXP 129
36156: PUSH
36157: LD_VAR 0 1
36161: ARRAY
36162: PUSH
36163: LD_VAR 0 2
36167: ARRAY
36168: PUSH
36169: LD_INT 1
36171: ARRAY
36172: PPUSH
36173: LD_EXP 129
36177: PUSH
36178: LD_VAR 0 1
36182: ARRAY
36183: PUSH
36184: LD_VAR 0 2
36188: ARRAY
36189: PUSH
36190: LD_INT 2
36192: ARRAY
36193: PPUSH
36194: CALL_OW 428
36198: ST_TO_ADDR
// if not tmp then
36199: LD_VAR 0 4
36203: NOT
36204: IFFALSE 36208
// continue ;
36206: GO 36123
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36208: LD_VAR 0 4
36212: PUSH
36213: LD_INT 81
36215: PUSH
36216: LD_VAR 0 3
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PPUSH
36225: CALL_OW 69
36229: IN
36230: PUSH
36231: LD_EXP 129
36235: PUSH
36236: LD_VAR 0 1
36240: ARRAY
36241: PUSH
36242: LD_VAR 0 2
36246: ARRAY
36247: PUSH
36248: LD_INT 1
36250: ARRAY
36251: PPUSH
36252: LD_EXP 129
36256: PUSH
36257: LD_VAR 0 1
36261: ARRAY
36262: PUSH
36263: LD_VAR 0 2
36267: ARRAY
36268: PUSH
36269: LD_INT 2
36271: ARRAY
36272: PPUSH
36273: CALL_OW 458
36277: AND
36278: IFFALSE 36372
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36280: LD_EXP 129
36284: PUSH
36285: LD_VAR 0 1
36289: ARRAY
36290: PUSH
36291: LD_VAR 0 2
36295: ARRAY
36296: PUSH
36297: LD_INT 1
36299: ARRAY
36300: PPUSH
36301: LD_EXP 129
36305: PUSH
36306: LD_VAR 0 1
36310: ARRAY
36311: PUSH
36312: LD_VAR 0 2
36316: ARRAY
36317: PUSH
36318: LD_INT 2
36320: ARRAY
36321: PPUSH
36322: LD_VAR 0 3
36326: PPUSH
36327: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36331: LD_ADDR_EXP 129
36335: PUSH
36336: LD_EXP 129
36340: PPUSH
36341: LD_VAR 0 1
36345: PPUSH
36346: LD_EXP 129
36350: PUSH
36351: LD_VAR 0 1
36355: ARRAY
36356: PPUSH
36357: LD_VAR 0 2
36361: PPUSH
36362: CALL_OW 3
36366: PPUSH
36367: CALL_OW 1
36371: ST_TO_ADDR
// end ; end ;
36372: GO 36123
36374: POP
36375: POP
// end ;
36376: GO 36041
36378: POP
36379: POP
// end ;
36380: PPOPN 4
36382: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36383: LD_INT 0
36385: PPUSH
36386: PPUSH
// result := false ;
36387: LD_ADDR_VAR 0 4
36391: PUSH
36392: LD_INT 0
36394: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36395: LD_VAR 0 1
36399: PPUSH
36400: CALL_OW 264
36404: PUSH
36405: LD_EXP 50
36409: EQUAL
36410: NOT
36411: IFFALSE 36415
// exit ;
36413: GO 36655
// index := GetElementIndex ( minersList , unit ) ;
36415: LD_ADDR_VAR 0 5
36419: PUSH
36420: LD_EXP 128
36424: PPUSH
36425: LD_VAR 0 1
36429: PPUSH
36430: CALL 42639 0 2
36434: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36435: LD_EXP 129
36439: PUSH
36440: LD_VAR 0 5
36444: ARRAY
36445: PUSH
36446: LD_EXP 130
36450: GREATEREQUAL
36451: IFFALSE 36455
// exit ;
36453: GO 36655
// ComMoveXY ( unit , x , y ) ;
36455: LD_VAR 0 1
36459: PPUSH
36460: LD_VAR 0 2
36464: PPUSH
36465: LD_VAR 0 3
36469: PPUSH
36470: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36474: LD_INT 35
36476: PPUSH
36477: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36481: LD_VAR 0 1
36485: PPUSH
36486: LD_VAR 0 2
36490: PPUSH
36491: LD_VAR 0 3
36495: PPUSH
36496: CALL 73411 0 3
36500: NOT
36501: PUSH
36502: LD_VAR 0 1
36506: PPUSH
36507: CALL_OW 314
36511: AND
36512: IFFALSE 36516
// exit ;
36514: GO 36655
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36516: LD_VAR 0 2
36520: PPUSH
36521: LD_VAR 0 3
36525: PPUSH
36526: CALL_OW 428
36530: PUSH
36531: LD_VAR 0 1
36535: EQUAL
36536: PUSH
36537: LD_VAR 0 1
36541: PPUSH
36542: CALL_OW 314
36546: NOT
36547: AND
36548: IFFALSE 36474
// PlaySoundXY ( x , y , PlantMine ) ;
36550: LD_VAR 0 2
36554: PPUSH
36555: LD_VAR 0 3
36559: PPUSH
36560: LD_STRING PlantMine
36562: PPUSH
36563: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
36567: LD_VAR 0 2
36571: PPUSH
36572: LD_VAR 0 3
36576: PPUSH
36577: LD_VAR 0 1
36581: PPUSH
36582: CALL_OW 255
36586: PPUSH
36587: LD_INT 0
36589: PPUSH
36590: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36594: LD_ADDR_EXP 129
36598: PUSH
36599: LD_EXP 129
36603: PPUSH
36604: LD_VAR 0 5
36608: PUSH
36609: LD_EXP 129
36613: PUSH
36614: LD_VAR 0 5
36618: ARRAY
36619: PUSH
36620: LD_INT 1
36622: PLUS
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PPUSH
36628: LD_VAR 0 2
36632: PUSH
36633: LD_VAR 0 3
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PPUSH
36642: CALL 42854 0 3
36646: ST_TO_ADDR
// result := true ;
36647: LD_ADDR_VAR 0 4
36651: PUSH
36652: LD_INT 1
36654: ST_TO_ADDR
// end ;
36655: LD_VAR 0 4
36659: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36660: LD_INT 0
36662: PPUSH
36663: PPUSH
36664: PPUSH
// if not unit in minersList then
36665: LD_VAR 0 1
36669: PUSH
36670: LD_EXP 128
36674: IN
36675: NOT
36676: IFFALSE 36680
// exit ;
36678: GO 37072
// index := GetElementIndex ( minersList , unit ) ;
36680: LD_ADDR_VAR 0 6
36684: PUSH
36685: LD_EXP 128
36689: PPUSH
36690: LD_VAR 0 1
36694: PPUSH
36695: CALL 42639 0 2
36699: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36700: LD_ADDR_VAR 0 5
36704: PUSH
36705: DOUBLE
36706: LD_EXP 129
36710: PUSH
36711: LD_VAR 0 6
36715: ARRAY
36716: INC
36717: ST_TO_ADDR
36718: LD_INT 1
36720: PUSH
36721: FOR_DOWNTO
36722: IFFALSE 36883
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
36724: LD_EXP 129
36728: PUSH
36729: LD_VAR 0 6
36733: ARRAY
36734: PUSH
36735: LD_VAR 0 5
36739: ARRAY
36740: PUSH
36741: LD_INT 1
36743: ARRAY
36744: PUSH
36745: LD_VAR 0 2
36749: EQUAL
36750: PUSH
36751: LD_EXP 129
36755: PUSH
36756: LD_VAR 0 6
36760: ARRAY
36761: PUSH
36762: LD_VAR 0 5
36766: ARRAY
36767: PUSH
36768: LD_INT 2
36770: ARRAY
36771: PUSH
36772: LD_VAR 0 3
36776: EQUAL
36777: AND
36778: IFFALSE 36881
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36780: LD_EXP 129
36784: PUSH
36785: LD_VAR 0 6
36789: ARRAY
36790: PUSH
36791: LD_VAR 0 5
36795: ARRAY
36796: PUSH
36797: LD_INT 1
36799: ARRAY
36800: PPUSH
36801: LD_EXP 129
36805: PUSH
36806: LD_VAR 0 6
36810: ARRAY
36811: PUSH
36812: LD_VAR 0 5
36816: ARRAY
36817: PUSH
36818: LD_INT 2
36820: ARRAY
36821: PPUSH
36822: LD_VAR 0 1
36826: PPUSH
36827: CALL_OW 255
36831: PPUSH
36832: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36836: LD_ADDR_EXP 129
36840: PUSH
36841: LD_EXP 129
36845: PPUSH
36846: LD_VAR 0 6
36850: PPUSH
36851: LD_EXP 129
36855: PUSH
36856: LD_VAR 0 6
36860: ARRAY
36861: PPUSH
36862: LD_VAR 0 5
36866: PPUSH
36867: CALL_OW 3
36871: PPUSH
36872: CALL_OW 1
36876: ST_TO_ADDR
// exit ;
36877: POP
36878: POP
36879: GO 37072
// end ; end ;
36881: GO 36721
36883: POP
36884: POP
// for i := minerMinesList [ index ] downto 1 do
36885: LD_ADDR_VAR 0 5
36889: PUSH
36890: DOUBLE
36891: LD_EXP 129
36895: PUSH
36896: LD_VAR 0 6
36900: ARRAY
36901: INC
36902: ST_TO_ADDR
36903: LD_INT 1
36905: PUSH
36906: FOR_DOWNTO
36907: IFFALSE 37070
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36909: LD_EXP 129
36913: PUSH
36914: LD_VAR 0 6
36918: ARRAY
36919: PUSH
36920: LD_VAR 0 5
36924: ARRAY
36925: PUSH
36926: LD_INT 1
36928: ARRAY
36929: PPUSH
36930: LD_EXP 129
36934: PUSH
36935: LD_VAR 0 6
36939: ARRAY
36940: PUSH
36941: LD_VAR 0 5
36945: ARRAY
36946: PUSH
36947: LD_INT 2
36949: ARRAY
36950: PPUSH
36951: LD_VAR 0 2
36955: PPUSH
36956: LD_VAR 0 3
36960: PPUSH
36961: CALL_OW 298
36965: PUSH
36966: LD_INT 6
36968: LESS
36969: IFFALSE 37068
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36971: LD_EXP 129
36975: PUSH
36976: LD_VAR 0 6
36980: ARRAY
36981: PUSH
36982: LD_VAR 0 5
36986: ARRAY
36987: PUSH
36988: LD_INT 1
36990: ARRAY
36991: PPUSH
36992: LD_EXP 129
36996: PUSH
36997: LD_VAR 0 6
37001: ARRAY
37002: PUSH
37003: LD_VAR 0 5
37007: ARRAY
37008: PUSH
37009: LD_INT 2
37011: ARRAY
37012: PPUSH
37013: LD_VAR 0 1
37017: PPUSH
37018: CALL_OW 255
37022: PPUSH
37023: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37027: LD_ADDR_EXP 129
37031: PUSH
37032: LD_EXP 129
37036: PPUSH
37037: LD_VAR 0 6
37041: PPUSH
37042: LD_EXP 129
37046: PUSH
37047: LD_VAR 0 6
37051: ARRAY
37052: PPUSH
37053: LD_VAR 0 5
37057: PPUSH
37058: CALL_OW 3
37062: PPUSH
37063: CALL_OW 1
37067: ST_TO_ADDR
// end ; end ;
37068: GO 36906
37070: POP
37071: POP
// end ;
37072: LD_VAR 0 4
37076: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37077: LD_INT 0
37079: PPUSH
37080: PPUSH
37081: PPUSH
37082: PPUSH
37083: PPUSH
37084: PPUSH
37085: PPUSH
37086: PPUSH
37087: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37088: LD_VAR 0 1
37092: PPUSH
37093: CALL_OW 264
37097: PUSH
37098: LD_EXP 50
37102: EQUAL
37103: NOT
37104: PUSH
37105: LD_VAR 0 1
37109: PUSH
37110: LD_EXP 128
37114: IN
37115: NOT
37116: OR
37117: IFFALSE 37121
// exit ;
37119: GO 37443
// index := GetElementIndex ( minersList , unit ) ;
37121: LD_ADDR_VAR 0 6
37125: PUSH
37126: LD_EXP 128
37130: PPUSH
37131: LD_VAR 0 1
37135: PPUSH
37136: CALL 42639 0 2
37140: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37141: LD_ADDR_VAR 0 8
37145: PUSH
37146: LD_EXP 130
37150: PUSH
37151: LD_EXP 129
37155: PUSH
37156: LD_VAR 0 6
37160: ARRAY
37161: MINUS
37162: ST_TO_ADDR
// if not minesFreeAmount then
37163: LD_VAR 0 8
37167: NOT
37168: IFFALSE 37172
// exit ;
37170: GO 37443
// tmp := [ ] ;
37172: LD_ADDR_VAR 0 7
37176: PUSH
37177: EMPTY
37178: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37179: LD_ADDR_VAR 0 5
37183: PUSH
37184: DOUBLE
37185: LD_INT 1
37187: DEC
37188: ST_TO_ADDR
37189: LD_VAR 0 8
37193: PUSH
37194: FOR_TO
37195: IFFALSE 37390
// begin _d := rand ( 0 , 5 ) ;
37197: LD_ADDR_VAR 0 11
37201: PUSH
37202: LD_INT 0
37204: PPUSH
37205: LD_INT 5
37207: PPUSH
37208: CALL_OW 12
37212: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37213: LD_ADDR_VAR 0 12
37217: PUSH
37218: LD_INT 2
37220: PPUSH
37221: LD_INT 6
37223: PPUSH
37224: CALL_OW 12
37228: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37229: LD_ADDR_VAR 0 9
37233: PUSH
37234: LD_VAR 0 2
37238: PPUSH
37239: LD_VAR 0 11
37243: PPUSH
37244: LD_VAR 0 12
37248: PPUSH
37249: CALL_OW 272
37253: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37254: LD_ADDR_VAR 0 10
37258: PUSH
37259: LD_VAR 0 3
37263: PPUSH
37264: LD_VAR 0 11
37268: PPUSH
37269: LD_VAR 0 12
37273: PPUSH
37274: CALL_OW 273
37278: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37279: LD_VAR 0 9
37283: PPUSH
37284: LD_VAR 0 10
37288: PPUSH
37289: CALL_OW 488
37293: PUSH
37294: LD_VAR 0 9
37298: PUSH
37299: LD_VAR 0 10
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_VAR 0 7
37312: IN
37313: NOT
37314: AND
37315: PUSH
37316: LD_VAR 0 9
37320: PPUSH
37321: LD_VAR 0 10
37325: PPUSH
37326: CALL_OW 458
37330: NOT
37331: AND
37332: IFFALSE 37374
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37334: LD_ADDR_VAR 0 7
37338: PUSH
37339: LD_VAR 0 7
37343: PPUSH
37344: LD_VAR 0 7
37348: PUSH
37349: LD_INT 1
37351: PLUS
37352: PPUSH
37353: LD_VAR 0 9
37357: PUSH
37358: LD_VAR 0 10
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PPUSH
37367: CALL_OW 1
37371: ST_TO_ADDR
37372: GO 37388
// i := i - 1 ;
37374: LD_ADDR_VAR 0 5
37378: PUSH
37379: LD_VAR 0 5
37383: PUSH
37384: LD_INT 1
37386: MINUS
37387: ST_TO_ADDR
// end ;
37388: GO 37194
37390: POP
37391: POP
// for i in tmp do
37392: LD_ADDR_VAR 0 5
37396: PUSH
37397: LD_VAR 0 7
37401: PUSH
37402: FOR_IN
37403: IFFALSE 37441
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37405: LD_VAR 0 1
37409: PPUSH
37410: LD_VAR 0 5
37414: PUSH
37415: LD_INT 1
37417: ARRAY
37418: PPUSH
37419: LD_VAR 0 5
37423: PUSH
37424: LD_INT 2
37426: ARRAY
37427: PPUSH
37428: CALL 36383 0 3
37432: NOT
37433: IFFALSE 37439
// exit ;
37435: POP
37436: POP
37437: GO 37443
37439: GO 37402
37441: POP
37442: POP
// end ;
37443: LD_VAR 0 4
37447: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37448: LD_INT 0
37450: PPUSH
37451: PPUSH
37452: PPUSH
37453: PPUSH
37454: PPUSH
37455: PPUSH
37456: PPUSH
// if not GetClass ( unit ) = class_sniper then
37457: LD_VAR 0 1
37461: PPUSH
37462: CALL_OW 257
37466: PUSH
37467: LD_INT 5
37469: EQUAL
37470: NOT
37471: IFFALSE 37475
// exit ;
37473: GO 37863
// dist := 8 ;
37475: LD_ADDR_VAR 0 5
37479: PUSH
37480: LD_INT 8
37482: ST_TO_ADDR
// viewRange := 12 ;
37483: LD_ADDR_VAR 0 7
37487: PUSH
37488: LD_INT 12
37490: ST_TO_ADDR
// side := GetSide ( unit ) ;
37491: LD_ADDR_VAR 0 6
37495: PUSH
37496: LD_VAR 0 1
37500: PPUSH
37501: CALL_OW 255
37505: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37506: LD_INT 61
37508: PPUSH
37509: LD_VAR 0 6
37513: PPUSH
37514: CALL_OW 321
37518: PUSH
37519: LD_INT 2
37521: EQUAL
37522: IFFALSE 37532
// viewRange := 16 ;
37524: LD_ADDR_VAR 0 7
37528: PUSH
37529: LD_INT 16
37531: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37532: LD_VAR 0 1
37536: PPUSH
37537: LD_VAR 0 2
37541: PPUSH
37542: LD_VAR 0 3
37546: PPUSH
37547: CALL_OW 297
37551: PUSH
37552: LD_VAR 0 5
37556: GREATER
37557: IFFALSE 37636
// begin ComMoveXY ( unit , x , y ) ;
37559: LD_VAR 0 1
37563: PPUSH
37564: LD_VAR 0 2
37568: PPUSH
37569: LD_VAR 0 3
37573: PPUSH
37574: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37578: LD_INT 35
37580: PPUSH
37581: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37585: LD_VAR 0 1
37589: PPUSH
37590: LD_VAR 0 2
37594: PPUSH
37595: LD_VAR 0 3
37599: PPUSH
37600: CALL 73411 0 3
37604: NOT
37605: IFFALSE 37609
// exit ;
37607: GO 37863
// until GetDistUnitXY ( unit , x , y ) < dist ;
37609: LD_VAR 0 1
37613: PPUSH
37614: LD_VAR 0 2
37618: PPUSH
37619: LD_VAR 0 3
37623: PPUSH
37624: CALL_OW 297
37628: PUSH
37629: LD_VAR 0 5
37633: LESS
37634: IFFALSE 37578
// end ; ComTurnXY ( unit , x , y ) ;
37636: LD_VAR 0 1
37640: PPUSH
37641: LD_VAR 0 2
37645: PPUSH
37646: LD_VAR 0 3
37650: PPUSH
37651: CALL_OW 118
// wait ( 5 ) ;
37655: LD_INT 5
37657: PPUSH
37658: CALL_OW 67
// _d := GetDir ( unit ) ;
37662: LD_ADDR_VAR 0 10
37666: PUSH
37667: LD_VAR 0 1
37671: PPUSH
37672: CALL_OW 254
37676: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
37677: LD_ADDR_VAR 0 8
37681: PUSH
37682: LD_VAR 0 1
37686: PPUSH
37687: CALL_OW 250
37691: PPUSH
37692: LD_VAR 0 10
37696: PPUSH
37697: LD_VAR 0 5
37701: PPUSH
37702: CALL_OW 272
37706: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
37707: LD_ADDR_VAR 0 9
37711: PUSH
37712: LD_VAR 0 1
37716: PPUSH
37717: CALL_OW 251
37721: PPUSH
37722: LD_VAR 0 10
37726: PPUSH
37727: LD_VAR 0 5
37731: PPUSH
37732: CALL_OW 273
37736: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37737: LD_VAR 0 8
37741: PPUSH
37742: LD_VAR 0 9
37746: PPUSH
37747: CALL_OW 488
37751: NOT
37752: IFFALSE 37756
// exit ;
37754: GO 37863
// ComAnimCustom ( unit , 1 ) ;
37756: LD_VAR 0 1
37760: PPUSH
37761: LD_INT 1
37763: PPUSH
37764: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37768: LD_VAR 0 8
37772: PPUSH
37773: LD_VAR 0 9
37777: PPUSH
37778: LD_VAR 0 6
37782: PPUSH
37783: LD_VAR 0 7
37787: PPUSH
37788: CALL_OW 330
// repeat wait ( 1 ) ;
37792: LD_INT 1
37794: PPUSH
37795: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37799: LD_VAR 0 1
37803: PPUSH
37804: CALL_OW 316
37808: PUSH
37809: LD_VAR 0 1
37813: PPUSH
37814: CALL_OW 314
37818: OR
37819: PUSH
37820: LD_VAR 0 1
37824: PPUSH
37825: CALL_OW 302
37829: NOT
37830: OR
37831: PUSH
37832: LD_VAR 0 1
37836: PPUSH
37837: CALL_OW 301
37841: OR
37842: IFFALSE 37792
// RemoveSeeing ( _x , _y , side ) ;
37844: LD_VAR 0 8
37848: PPUSH
37849: LD_VAR 0 9
37853: PPUSH
37854: LD_VAR 0 6
37858: PPUSH
37859: CALL_OW 331
// end ; end_of_file
37863: LD_VAR 0 4
37867: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37868: LD_INT 0
37870: PPUSH
37871: PPUSH
// if exist_mode then
37872: LD_VAR 0 2
37876: IFFALSE 37901
// unit := CreateCharacter ( prefix & ident ) else
37878: LD_ADDR_VAR 0 5
37882: PUSH
37883: LD_VAR 0 3
37887: PUSH
37888: LD_VAR 0 1
37892: STR
37893: PPUSH
37894: CALL_OW 34
37898: ST_TO_ADDR
37899: GO 37916
// unit := NewCharacter ( ident ) ;
37901: LD_ADDR_VAR 0 5
37905: PUSH
37906: LD_VAR 0 1
37910: PPUSH
37911: CALL_OW 25
37915: ST_TO_ADDR
// result := unit ;
37916: LD_ADDR_VAR 0 4
37920: PUSH
37921: LD_VAR 0 5
37925: ST_TO_ADDR
// end ;
37926: LD_VAR 0 4
37930: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37931: LD_INT 0
37933: PPUSH
37934: PPUSH
// if not side or not nation then
37935: LD_VAR 0 1
37939: NOT
37940: PUSH
37941: LD_VAR 0 2
37945: NOT
37946: OR
37947: IFFALSE 37951
// exit ;
37949: GO 38719
// case nation of nation_american :
37951: LD_VAR 0 2
37955: PUSH
37956: LD_INT 1
37958: DOUBLE
37959: EQUAL
37960: IFTRUE 37964
37962: GO 38178
37964: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37965: LD_ADDR_VAR 0 4
37969: PUSH
37970: LD_INT 35
37972: PUSH
37973: LD_INT 45
37975: PUSH
37976: LD_INT 46
37978: PUSH
37979: LD_INT 47
37981: PUSH
37982: LD_INT 82
37984: PUSH
37985: LD_INT 83
37987: PUSH
37988: LD_INT 84
37990: PUSH
37991: LD_INT 85
37993: PUSH
37994: LD_INT 86
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: LD_INT 6
38005: PUSH
38006: LD_INT 15
38008: PUSH
38009: LD_INT 16
38011: PUSH
38012: LD_INT 7
38014: PUSH
38015: LD_INT 12
38017: PUSH
38018: LD_INT 13
38020: PUSH
38021: LD_INT 10
38023: PUSH
38024: LD_INT 14
38026: PUSH
38027: LD_INT 20
38029: PUSH
38030: LD_INT 21
38032: PUSH
38033: LD_INT 22
38035: PUSH
38036: LD_INT 25
38038: PUSH
38039: LD_INT 32
38041: PUSH
38042: LD_INT 27
38044: PUSH
38045: LD_INT 36
38047: PUSH
38048: LD_INT 69
38050: PUSH
38051: LD_INT 39
38053: PUSH
38054: LD_INT 34
38056: PUSH
38057: LD_INT 40
38059: PUSH
38060: LD_INT 48
38062: PUSH
38063: LD_INT 49
38065: PUSH
38066: LD_INT 50
38068: PUSH
38069: LD_INT 51
38071: PUSH
38072: LD_INT 52
38074: PUSH
38075: LD_INT 53
38077: PUSH
38078: LD_INT 54
38080: PUSH
38081: LD_INT 55
38083: PUSH
38084: LD_INT 56
38086: PUSH
38087: LD_INT 57
38089: PUSH
38090: LD_INT 58
38092: PUSH
38093: LD_INT 59
38095: PUSH
38096: LD_INT 60
38098: PUSH
38099: LD_INT 61
38101: PUSH
38102: LD_INT 62
38104: PUSH
38105: LD_INT 80
38107: PUSH
38108: LD_INT 82
38110: PUSH
38111: LD_INT 83
38113: PUSH
38114: LD_INT 84
38116: PUSH
38117: LD_INT 85
38119: PUSH
38120: LD_INT 86
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: ST_TO_ADDR
38176: GO 38643
38178: LD_INT 2
38180: DOUBLE
38181: EQUAL
38182: IFTRUE 38186
38184: GO 38412
38186: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38187: LD_ADDR_VAR 0 4
38191: PUSH
38192: LD_INT 35
38194: PUSH
38195: LD_INT 45
38197: PUSH
38198: LD_INT 46
38200: PUSH
38201: LD_INT 47
38203: PUSH
38204: LD_INT 82
38206: PUSH
38207: LD_INT 83
38209: PUSH
38210: LD_INT 84
38212: PUSH
38213: LD_INT 85
38215: PUSH
38216: LD_INT 87
38218: PUSH
38219: LD_INT 70
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: LD_INT 11
38227: PUSH
38228: LD_INT 3
38230: PUSH
38231: LD_INT 4
38233: PUSH
38234: LD_INT 5
38236: PUSH
38237: LD_INT 6
38239: PUSH
38240: LD_INT 15
38242: PUSH
38243: LD_INT 18
38245: PUSH
38246: LD_INT 7
38248: PUSH
38249: LD_INT 17
38251: PUSH
38252: LD_INT 8
38254: PUSH
38255: LD_INT 20
38257: PUSH
38258: LD_INT 21
38260: PUSH
38261: LD_INT 22
38263: PUSH
38264: LD_INT 72
38266: PUSH
38267: LD_INT 26
38269: PUSH
38270: LD_INT 69
38272: PUSH
38273: LD_INT 39
38275: PUSH
38276: LD_INT 40
38278: PUSH
38279: LD_INT 41
38281: PUSH
38282: LD_INT 42
38284: PUSH
38285: LD_INT 43
38287: PUSH
38288: LD_INT 48
38290: PUSH
38291: LD_INT 49
38293: PUSH
38294: LD_INT 50
38296: PUSH
38297: LD_INT 51
38299: PUSH
38300: LD_INT 52
38302: PUSH
38303: LD_INT 53
38305: PUSH
38306: LD_INT 54
38308: PUSH
38309: LD_INT 55
38311: PUSH
38312: LD_INT 56
38314: PUSH
38315: LD_INT 60
38317: PUSH
38318: LD_INT 61
38320: PUSH
38321: LD_INT 62
38323: PUSH
38324: LD_INT 66
38326: PUSH
38327: LD_INT 67
38329: PUSH
38330: LD_INT 68
38332: PUSH
38333: LD_INT 81
38335: PUSH
38336: LD_INT 82
38338: PUSH
38339: LD_INT 83
38341: PUSH
38342: LD_INT 84
38344: PUSH
38345: LD_INT 85
38347: PUSH
38348: LD_INT 87
38350: PUSH
38351: LD_INT 88
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: ST_TO_ADDR
38410: GO 38643
38412: LD_INT 3
38414: DOUBLE
38415: EQUAL
38416: IFTRUE 38420
38418: GO 38642
38420: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38421: LD_ADDR_VAR 0 4
38425: PUSH
38426: LD_INT 46
38428: PUSH
38429: LD_INT 47
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: LD_INT 2
38437: PUSH
38438: LD_INT 82
38440: PUSH
38441: LD_INT 83
38443: PUSH
38444: LD_INT 84
38446: PUSH
38447: LD_INT 85
38449: PUSH
38450: LD_INT 86
38452: PUSH
38453: LD_INT 11
38455: PUSH
38456: LD_INT 9
38458: PUSH
38459: LD_INT 20
38461: PUSH
38462: LD_INT 19
38464: PUSH
38465: LD_INT 21
38467: PUSH
38468: LD_INT 24
38470: PUSH
38471: LD_INT 22
38473: PUSH
38474: LD_INT 25
38476: PUSH
38477: LD_INT 28
38479: PUSH
38480: LD_INT 29
38482: PUSH
38483: LD_INT 30
38485: PUSH
38486: LD_INT 31
38488: PUSH
38489: LD_INT 37
38491: PUSH
38492: LD_INT 38
38494: PUSH
38495: LD_INT 32
38497: PUSH
38498: LD_INT 27
38500: PUSH
38501: LD_INT 33
38503: PUSH
38504: LD_INT 69
38506: PUSH
38507: LD_INT 39
38509: PUSH
38510: LD_INT 34
38512: PUSH
38513: LD_INT 40
38515: PUSH
38516: LD_INT 71
38518: PUSH
38519: LD_INT 23
38521: PUSH
38522: LD_INT 44
38524: PUSH
38525: LD_INT 48
38527: PUSH
38528: LD_INT 49
38530: PUSH
38531: LD_INT 50
38533: PUSH
38534: LD_INT 51
38536: PUSH
38537: LD_INT 52
38539: PUSH
38540: LD_INT 53
38542: PUSH
38543: LD_INT 54
38545: PUSH
38546: LD_INT 55
38548: PUSH
38549: LD_INT 56
38551: PUSH
38552: LD_INT 57
38554: PUSH
38555: LD_INT 58
38557: PUSH
38558: LD_INT 59
38560: PUSH
38561: LD_INT 63
38563: PUSH
38564: LD_INT 64
38566: PUSH
38567: LD_INT 65
38569: PUSH
38570: LD_INT 82
38572: PUSH
38573: LD_INT 83
38575: PUSH
38576: LD_INT 84
38578: PUSH
38579: LD_INT 85
38581: PUSH
38582: LD_INT 86
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: ST_TO_ADDR
38640: GO 38643
38642: POP
// if state > - 1 and state < 3 then
38643: LD_VAR 0 3
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: GREATER
38652: PUSH
38653: LD_VAR 0 3
38657: PUSH
38658: LD_INT 3
38660: LESS
38661: AND
38662: IFFALSE 38719
// for i in result do
38664: LD_ADDR_VAR 0 5
38668: PUSH
38669: LD_VAR 0 4
38673: PUSH
38674: FOR_IN
38675: IFFALSE 38717
// if GetTech ( i , side ) <> state then
38677: LD_VAR 0 5
38681: PPUSH
38682: LD_VAR 0 1
38686: PPUSH
38687: CALL_OW 321
38691: PUSH
38692: LD_VAR 0 3
38696: NONEQUAL
38697: IFFALSE 38715
// result := result diff i ;
38699: LD_ADDR_VAR 0 4
38703: PUSH
38704: LD_VAR 0 4
38708: PUSH
38709: LD_VAR 0 5
38713: DIFF
38714: ST_TO_ADDR
38715: GO 38674
38717: POP
38718: POP
// end ;
38719: LD_VAR 0 4
38723: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38724: LD_INT 0
38726: PPUSH
38727: PPUSH
38728: PPUSH
// result := true ;
38729: LD_ADDR_VAR 0 3
38733: PUSH
38734: LD_INT 1
38736: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38737: LD_ADDR_VAR 0 5
38741: PUSH
38742: LD_VAR 0 2
38746: PPUSH
38747: CALL_OW 480
38751: ST_TO_ADDR
// if not tmp then
38752: LD_VAR 0 5
38756: NOT
38757: IFFALSE 38761
// exit ;
38759: GO 38810
// for i in tmp do
38761: LD_ADDR_VAR 0 4
38765: PUSH
38766: LD_VAR 0 5
38770: PUSH
38771: FOR_IN
38772: IFFALSE 38808
// if GetTech ( i , side ) <> state_researched then
38774: LD_VAR 0 4
38778: PPUSH
38779: LD_VAR 0 1
38783: PPUSH
38784: CALL_OW 321
38788: PUSH
38789: LD_INT 2
38791: NONEQUAL
38792: IFFALSE 38806
// begin result := false ;
38794: LD_ADDR_VAR 0 3
38798: PUSH
38799: LD_INT 0
38801: ST_TO_ADDR
// exit ;
38802: POP
38803: POP
38804: GO 38810
// end ;
38806: GO 38771
38808: POP
38809: POP
// end ;
38810: LD_VAR 0 3
38814: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38815: LD_INT 0
38817: PPUSH
38818: PPUSH
38819: PPUSH
38820: PPUSH
38821: PPUSH
38822: PPUSH
38823: PPUSH
38824: PPUSH
38825: PPUSH
38826: PPUSH
38827: PPUSH
38828: PPUSH
38829: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38830: LD_VAR 0 1
38834: NOT
38835: PUSH
38836: LD_VAR 0 1
38840: PPUSH
38841: CALL_OW 257
38845: PUSH
38846: LD_INT 9
38848: NONEQUAL
38849: OR
38850: IFFALSE 38854
// exit ;
38852: GO 39427
// side := GetSide ( unit ) ;
38854: LD_ADDR_VAR 0 9
38858: PUSH
38859: LD_VAR 0 1
38863: PPUSH
38864: CALL_OW 255
38868: ST_TO_ADDR
// tech_space := tech_spacanom ;
38869: LD_ADDR_VAR 0 12
38873: PUSH
38874: LD_INT 29
38876: ST_TO_ADDR
// tech_time := tech_taurad ;
38877: LD_ADDR_VAR 0 13
38881: PUSH
38882: LD_INT 28
38884: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38885: LD_ADDR_VAR 0 11
38889: PUSH
38890: LD_VAR 0 1
38894: PPUSH
38895: CALL_OW 310
38899: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38900: LD_VAR 0 11
38904: PPUSH
38905: CALL_OW 247
38909: PUSH
38910: LD_INT 2
38912: EQUAL
38913: IFFALSE 38917
// exit ;
38915: GO 39427
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38917: LD_ADDR_VAR 0 8
38921: PUSH
38922: LD_INT 81
38924: PUSH
38925: LD_VAR 0 9
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 3
38936: PUSH
38937: LD_INT 21
38939: PUSH
38940: LD_INT 3
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PPUSH
38955: CALL_OW 69
38959: ST_TO_ADDR
// if not tmp then
38960: LD_VAR 0 8
38964: NOT
38965: IFFALSE 38969
// exit ;
38967: GO 39427
// if in_unit then
38969: LD_VAR 0 11
38973: IFFALSE 38997
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38975: LD_ADDR_VAR 0 10
38979: PUSH
38980: LD_VAR 0 8
38984: PPUSH
38985: LD_VAR 0 11
38989: PPUSH
38990: CALL_OW 74
38994: ST_TO_ADDR
38995: GO 39017
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38997: LD_ADDR_VAR 0 10
39001: PUSH
39002: LD_VAR 0 8
39006: PPUSH
39007: LD_VAR 0 1
39011: PPUSH
39012: CALL_OW 74
39016: ST_TO_ADDR
// if not enemy then
39017: LD_VAR 0 10
39021: NOT
39022: IFFALSE 39026
// exit ;
39024: GO 39427
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39026: LD_VAR 0 11
39030: PUSH
39031: LD_VAR 0 11
39035: PPUSH
39036: LD_VAR 0 10
39040: PPUSH
39041: CALL_OW 296
39045: PUSH
39046: LD_INT 13
39048: GREATER
39049: AND
39050: PUSH
39051: LD_VAR 0 1
39055: PPUSH
39056: LD_VAR 0 10
39060: PPUSH
39061: CALL_OW 296
39065: PUSH
39066: LD_INT 12
39068: GREATER
39069: OR
39070: IFFALSE 39074
// exit ;
39072: GO 39427
// missile := [ 1 ] ;
39074: LD_ADDR_VAR 0 14
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39085: LD_VAR 0 9
39089: PPUSH
39090: LD_VAR 0 12
39094: PPUSH
39095: CALL_OW 325
39099: IFFALSE 39128
// missile := Insert ( missile , missile + 1 , 2 ) ;
39101: LD_ADDR_VAR 0 14
39105: PUSH
39106: LD_VAR 0 14
39110: PPUSH
39111: LD_VAR 0 14
39115: PUSH
39116: LD_INT 1
39118: PLUS
39119: PPUSH
39120: LD_INT 2
39122: PPUSH
39123: CALL_OW 2
39127: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39128: LD_VAR 0 9
39132: PPUSH
39133: LD_VAR 0 13
39137: PPUSH
39138: CALL_OW 325
39142: PUSH
39143: LD_VAR 0 10
39147: PPUSH
39148: CALL_OW 255
39152: PPUSH
39153: LD_VAR 0 13
39157: PPUSH
39158: CALL_OW 325
39162: NOT
39163: AND
39164: IFFALSE 39193
// missile := Insert ( missile , missile + 1 , 3 ) ;
39166: LD_ADDR_VAR 0 14
39170: PUSH
39171: LD_VAR 0 14
39175: PPUSH
39176: LD_VAR 0 14
39180: PUSH
39181: LD_INT 1
39183: PLUS
39184: PPUSH
39185: LD_INT 3
39187: PPUSH
39188: CALL_OW 2
39192: ST_TO_ADDR
// if missile < 2 then
39193: LD_VAR 0 14
39197: PUSH
39198: LD_INT 2
39200: LESS
39201: IFFALSE 39205
// exit ;
39203: GO 39427
// x := GetX ( enemy ) ;
39205: LD_ADDR_VAR 0 4
39209: PUSH
39210: LD_VAR 0 10
39214: PPUSH
39215: CALL_OW 250
39219: ST_TO_ADDR
// y := GetY ( enemy ) ;
39220: LD_ADDR_VAR 0 5
39224: PUSH
39225: LD_VAR 0 10
39229: PPUSH
39230: CALL_OW 251
39234: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39235: LD_ADDR_VAR 0 6
39239: PUSH
39240: LD_VAR 0 4
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PPUSH
39249: LD_INT 1
39251: PPUSH
39252: CALL_OW 12
39256: PLUS
39257: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39258: LD_ADDR_VAR 0 7
39262: PUSH
39263: LD_VAR 0 5
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PPUSH
39272: LD_INT 1
39274: PPUSH
39275: CALL_OW 12
39279: PLUS
39280: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39281: LD_VAR 0 6
39285: PPUSH
39286: LD_VAR 0 7
39290: PPUSH
39291: CALL_OW 488
39295: NOT
39296: IFFALSE 39318
// begin _x := x ;
39298: LD_ADDR_VAR 0 6
39302: PUSH
39303: LD_VAR 0 4
39307: ST_TO_ADDR
// _y := y ;
39308: LD_ADDR_VAR 0 7
39312: PUSH
39313: LD_VAR 0 5
39317: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39318: LD_ADDR_VAR 0 3
39322: PUSH
39323: LD_INT 1
39325: PPUSH
39326: LD_VAR 0 14
39330: PPUSH
39331: CALL_OW 12
39335: ST_TO_ADDR
// case i of 1 :
39336: LD_VAR 0 3
39340: PUSH
39341: LD_INT 1
39343: DOUBLE
39344: EQUAL
39345: IFTRUE 39349
39347: GO 39366
39349: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39350: LD_VAR 0 1
39354: PPUSH
39355: LD_VAR 0 10
39359: PPUSH
39360: CALL_OW 115
39364: GO 39427
39366: LD_INT 2
39368: DOUBLE
39369: EQUAL
39370: IFTRUE 39374
39372: GO 39396
39374: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39375: LD_VAR 0 1
39379: PPUSH
39380: LD_VAR 0 6
39384: PPUSH
39385: LD_VAR 0 7
39389: PPUSH
39390: CALL_OW 153
39394: GO 39427
39396: LD_INT 3
39398: DOUBLE
39399: EQUAL
39400: IFTRUE 39404
39402: GO 39426
39404: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39405: LD_VAR 0 1
39409: PPUSH
39410: LD_VAR 0 6
39414: PPUSH
39415: LD_VAR 0 7
39419: PPUSH
39420: CALL_OW 154
39424: GO 39427
39426: POP
// end ;
39427: LD_VAR 0 2
39431: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39432: LD_INT 0
39434: PPUSH
39435: PPUSH
39436: PPUSH
39437: PPUSH
39438: PPUSH
39439: PPUSH
// if not unit or not building then
39440: LD_VAR 0 1
39444: NOT
39445: PUSH
39446: LD_VAR 0 2
39450: NOT
39451: OR
39452: IFFALSE 39456
// exit ;
39454: GO 39614
// x := GetX ( building ) ;
39456: LD_ADDR_VAR 0 5
39460: PUSH
39461: LD_VAR 0 2
39465: PPUSH
39466: CALL_OW 250
39470: ST_TO_ADDR
// y := GetY ( building ) ;
39471: LD_ADDR_VAR 0 6
39475: PUSH
39476: LD_VAR 0 2
39480: PPUSH
39481: CALL_OW 251
39485: ST_TO_ADDR
// for i = 0 to 5 do
39486: LD_ADDR_VAR 0 4
39490: PUSH
39491: DOUBLE
39492: LD_INT 0
39494: DEC
39495: ST_TO_ADDR
39496: LD_INT 5
39498: PUSH
39499: FOR_TO
39500: IFFALSE 39612
// begin _x := ShiftX ( x , i , 3 ) ;
39502: LD_ADDR_VAR 0 7
39506: PUSH
39507: LD_VAR 0 5
39511: PPUSH
39512: LD_VAR 0 4
39516: PPUSH
39517: LD_INT 3
39519: PPUSH
39520: CALL_OW 272
39524: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39525: LD_ADDR_VAR 0 8
39529: PUSH
39530: LD_VAR 0 6
39534: PPUSH
39535: LD_VAR 0 4
39539: PPUSH
39540: LD_INT 3
39542: PPUSH
39543: CALL_OW 273
39547: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39548: LD_VAR 0 7
39552: PPUSH
39553: LD_VAR 0 8
39557: PPUSH
39558: CALL_OW 488
39562: NOT
39563: IFFALSE 39567
// continue ;
39565: GO 39499
// if HexInfo ( _x , _y ) = 0 then
39567: LD_VAR 0 7
39571: PPUSH
39572: LD_VAR 0 8
39576: PPUSH
39577: CALL_OW 428
39581: PUSH
39582: LD_INT 0
39584: EQUAL
39585: IFFALSE 39610
// begin ComMoveXY ( unit , _x , _y ) ;
39587: LD_VAR 0 1
39591: PPUSH
39592: LD_VAR 0 7
39596: PPUSH
39597: LD_VAR 0 8
39601: PPUSH
39602: CALL_OW 111
// exit ;
39606: POP
39607: POP
39608: GO 39614
// end ; end ;
39610: GO 39499
39612: POP
39613: POP
// end ;
39614: LD_VAR 0 3
39618: RET
// export function ScanBase ( side , base_area ) ; begin
39619: LD_INT 0
39621: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39622: LD_ADDR_VAR 0 3
39626: PUSH
39627: LD_VAR 0 2
39631: PPUSH
39632: LD_INT 81
39634: PUSH
39635: LD_VAR 0 1
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PPUSH
39644: CALL_OW 70
39648: ST_TO_ADDR
// end ;
39649: LD_VAR 0 3
39653: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39654: LD_INT 0
39656: PPUSH
39657: PPUSH
39658: PPUSH
39659: PPUSH
// result := false ;
39660: LD_ADDR_VAR 0 2
39664: PUSH
39665: LD_INT 0
39667: ST_TO_ADDR
// side := GetSide ( unit ) ;
39668: LD_ADDR_VAR 0 3
39672: PUSH
39673: LD_VAR 0 1
39677: PPUSH
39678: CALL_OW 255
39682: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39683: LD_ADDR_VAR 0 4
39687: PUSH
39688: LD_VAR 0 1
39692: PPUSH
39693: CALL_OW 248
39697: ST_TO_ADDR
// case nat of 1 :
39698: LD_VAR 0 4
39702: PUSH
39703: LD_INT 1
39705: DOUBLE
39706: EQUAL
39707: IFTRUE 39711
39709: GO 39722
39711: POP
// tech := tech_lassight ; 2 :
39712: LD_ADDR_VAR 0 5
39716: PUSH
39717: LD_INT 12
39719: ST_TO_ADDR
39720: GO 39761
39722: LD_INT 2
39724: DOUBLE
39725: EQUAL
39726: IFTRUE 39730
39728: GO 39741
39730: POP
// tech := tech_mortar ; 3 :
39731: LD_ADDR_VAR 0 5
39735: PUSH
39736: LD_INT 41
39738: ST_TO_ADDR
39739: GO 39761
39741: LD_INT 3
39743: DOUBLE
39744: EQUAL
39745: IFTRUE 39749
39747: GO 39760
39749: POP
// tech := tech_bazooka ; end ;
39750: LD_ADDR_VAR 0 5
39754: PUSH
39755: LD_INT 44
39757: ST_TO_ADDR
39758: GO 39761
39760: POP
// if Researched ( side , tech ) then
39761: LD_VAR 0 3
39765: PPUSH
39766: LD_VAR 0 5
39770: PPUSH
39771: CALL_OW 325
39775: IFFALSE 39802
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39777: LD_ADDR_VAR 0 2
39781: PUSH
39782: LD_INT 5
39784: PUSH
39785: LD_INT 8
39787: PUSH
39788: LD_INT 9
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: LIST
39795: PUSH
39796: LD_VAR 0 4
39800: ARRAY
39801: ST_TO_ADDR
// end ;
39802: LD_VAR 0 2
39806: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39807: LD_INT 0
39809: PPUSH
39810: PPUSH
39811: PPUSH
// if not mines then
39812: LD_VAR 0 2
39816: NOT
39817: IFFALSE 39821
// exit ;
39819: GO 39965
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39821: LD_ADDR_VAR 0 5
39825: PUSH
39826: LD_INT 81
39828: PUSH
39829: LD_VAR 0 1
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 3
39840: PUSH
39841: LD_INT 21
39843: PUSH
39844: LD_INT 3
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PPUSH
39859: CALL_OW 69
39863: ST_TO_ADDR
// for i in mines do
39864: LD_ADDR_VAR 0 4
39868: PUSH
39869: LD_VAR 0 2
39873: PUSH
39874: FOR_IN
39875: IFFALSE 39963
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39877: LD_VAR 0 4
39881: PUSH
39882: LD_INT 1
39884: ARRAY
39885: PPUSH
39886: LD_VAR 0 4
39890: PUSH
39891: LD_INT 2
39893: ARRAY
39894: PPUSH
39895: CALL_OW 458
39899: NOT
39900: IFFALSE 39904
// continue ;
39902: GO 39874
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39904: LD_VAR 0 4
39908: PUSH
39909: LD_INT 1
39911: ARRAY
39912: PPUSH
39913: LD_VAR 0 4
39917: PUSH
39918: LD_INT 2
39920: ARRAY
39921: PPUSH
39922: CALL_OW 428
39926: PUSH
39927: LD_VAR 0 5
39931: IN
39932: IFFALSE 39961
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39934: LD_VAR 0 4
39938: PUSH
39939: LD_INT 1
39941: ARRAY
39942: PPUSH
39943: LD_VAR 0 4
39947: PUSH
39948: LD_INT 2
39950: ARRAY
39951: PPUSH
39952: LD_VAR 0 1
39956: PPUSH
39957: CALL_OW 456
// end ;
39961: GO 39874
39963: POP
39964: POP
// end ;
39965: LD_VAR 0 3
39969: RET
// export function Count ( array ) ; var i ; begin
39970: LD_INT 0
39972: PPUSH
39973: PPUSH
// result := 0 ;
39974: LD_ADDR_VAR 0 2
39978: PUSH
39979: LD_INT 0
39981: ST_TO_ADDR
// for i in array do
39982: LD_ADDR_VAR 0 3
39986: PUSH
39987: LD_VAR 0 1
39991: PUSH
39992: FOR_IN
39993: IFFALSE 40017
// if i then
39995: LD_VAR 0 3
39999: IFFALSE 40015
// result := result + 1 ;
40001: LD_ADDR_VAR 0 2
40005: PUSH
40006: LD_VAR 0 2
40010: PUSH
40011: LD_INT 1
40013: PLUS
40014: ST_TO_ADDR
40015: GO 39992
40017: POP
40018: POP
// end ;
40019: LD_VAR 0 2
40023: RET
// export function IsEmpty ( building ) ; begin
40024: LD_INT 0
40026: PPUSH
// if not building then
40027: LD_VAR 0 1
40031: NOT
40032: IFFALSE 40036
// exit ;
40034: GO 40079
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40036: LD_ADDR_VAR 0 2
40040: PUSH
40041: LD_VAR 0 1
40045: PUSH
40046: LD_INT 22
40048: PUSH
40049: LD_VAR 0 1
40053: PPUSH
40054: CALL_OW 255
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 58
40065: PUSH
40066: EMPTY
40067: LIST
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PPUSH
40073: CALL_OW 69
40077: IN
40078: ST_TO_ADDR
// end ;
40079: LD_VAR 0 2
40083: RET
// export function IsNotFull ( building ) ; begin
40084: LD_INT 0
40086: PPUSH
// if not building then
40087: LD_VAR 0 1
40091: NOT
40092: IFFALSE 40096
// exit ;
40094: GO 40115
// result := UnitsInside ( building ) < 6 ;
40096: LD_ADDR_VAR 0 2
40100: PUSH
40101: LD_VAR 0 1
40105: PPUSH
40106: CALL_OW 313
40110: PUSH
40111: LD_INT 6
40113: LESS
40114: ST_TO_ADDR
// end ;
40115: LD_VAR 0 2
40119: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40120: LD_INT 0
40122: PPUSH
40123: PPUSH
40124: PPUSH
40125: PPUSH
// tmp := [ ] ;
40126: LD_ADDR_VAR 0 3
40130: PUSH
40131: EMPTY
40132: ST_TO_ADDR
// list := [ ] ;
40133: LD_ADDR_VAR 0 5
40137: PUSH
40138: EMPTY
40139: ST_TO_ADDR
// for i = 16 to 25 do
40140: LD_ADDR_VAR 0 4
40144: PUSH
40145: DOUBLE
40146: LD_INT 16
40148: DEC
40149: ST_TO_ADDR
40150: LD_INT 25
40152: PUSH
40153: FOR_TO
40154: IFFALSE 40227
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40156: LD_ADDR_VAR 0 3
40160: PUSH
40161: LD_VAR 0 3
40165: PUSH
40166: LD_INT 22
40168: PUSH
40169: LD_VAR 0 1
40173: PPUSH
40174: CALL_OW 255
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 91
40185: PUSH
40186: LD_VAR 0 1
40190: PUSH
40191: LD_INT 6
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 30
40201: PUSH
40202: LD_VAR 0 4
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: LIST
40215: PUSH
40216: EMPTY
40217: LIST
40218: PPUSH
40219: CALL_OW 69
40223: ADD
40224: ST_TO_ADDR
40225: GO 40153
40227: POP
40228: POP
// for i = 1 to tmp do
40229: LD_ADDR_VAR 0 4
40233: PUSH
40234: DOUBLE
40235: LD_INT 1
40237: DEC
40238: ST_TO_ADDR
40239: LD_VAR 0 3
40243: PUSH
40244: FOR_TO
40245: IFFALSE 40333
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40247: LD_ADDR_VAR 0 5
40251: PUSH
40252: LD_VAR 0 5
40256: PUSH
40257: LD_VAR 0 3
40261: PUSH
40262: LD_VAR 0 4
40266: ARRAY
40267: PPUSH
40268: CALL_OW 266
40272: PUSH
40273: LD_VAR 0 3
40277: PUSH
40278: LD_VAR 0 4
40282: ARRAY
40283: PPUSH
40284: CALL_OW 250
40288: PUSH
40289: LD_VAR 0 3
40293: PUSH
40294: LD_VAR 0 4
40298: ARRAY
40299: PPUSH
40300: CALL_OW 251
40304: PUSH
40305: LD_VAR 0 3
40309: PUSH
40310: LD_VAR 0 4
40314: ARRAY
40315: PPUSH
40316: CALL_OW 254
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: PUSH
40327: EMPTY
40328: LIST
40329: ADD
40330: ST_TO_ADDR
40331: GO 40244
40333: POP
40334: POP
// result := list ;
40335: LD_ADDR_VAR 0 2
40339: PUSH
40340: LD_VAR 0 5
40344: ST_TO_ADDR
// end ;
40345: LD_VAR 0 2
40349: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40350: LD_INT 0
40352: PPUSH
40353: PPUSH
40354: PPUSH
40355: PPUSH
40356: PPUSH
40357: PPUSH
40358: PPUSH
// if not factory then
40359: LD_VAR 0 1
40363: NOT
40364: IFFALSE 40368
// exit ;
40366: GO 40961
// if control = control_apeman then
40368: LD_VAR 0 4
40372: PUSH
40373: LD_INT 5
40375: EQUAL
40376: IFFALSE 40485
// begin tmp := UnitsInside ( factory ) ;
40378: LD_ADDR_VAR 0 8
40382: PUSH
40383: LD_VAR 0 1
40387: PPUSH
40388: CALL_OW 313
40392: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40393: LD_VAR 0 8
40397: PPUSH
40398: LD_INT 25
40400: PUSH
40401: LD_INT 12
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PPUSH
40408: CALL_OW 72
40412: NOT
40413: IFFALSE 40423
// control := control_manual ;
40415: LD_ADDR_VAR 0 4
40419: PUSH
40420: LD_INT 1
40422: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40423: LD_ADDR_VAR 0 8
40427: PUSH
40428: LD_VAR 0 1
40432: PPUSH
40433: CALL 40120 0 1
40437: ST_TO_ADDR
// if tmp then
40438: LD_VAR 0 8
40442: IFFALSE 40485
// begin for i in tmp do
40444: LD_ADDR_VAR 0 7
40448: PUSH
40449: LD_VAR 0 8
40453: PUSH
40454: FOR_IN
40455: IFFALSE 40483
// if i [ 1 ] = b_ext_radio then
40457: LD_VAR 0 7
40461: PUSH
40462: LD_INT 1
40464: ARRAY
40465: PUSH
40466: LD_INT 22
40468: EQUAL
40469: IFFALSE 40481
// begin control := control_remote ;
40471: LD_ADDR_VAR 0 4
40475: PUSH
40476: LD_INT 2
40478: ST_TO_ADDR
// break ;
40479: GO 40483
// end ;
40481: GO 40454
40483: POP
40484: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40485: LD_VAR 0 1
40489: PPUSH
40490: LD_VAR 0 2
40494: PPUSH
40495: LD_VAR 0 3
40499: PPUSH
40500: LD_VAR 0 4
40504: PPUSH
40505: LD_VAR 0 5
40509: PPUSH
40510: CALL_OW 448
40514: IFFALSE 40549
// begin result := [ chassis , engine , control , weapon ] ;
40516: LD_ADDR_VAR 0 6
40520: PUSH
40521: LD_VAR 0 2
40525: PUSH
40526: LD_VAR 0 3
40530: PUSH
40531: LD_VAR 0 4
40535: PUSH
40536: LD_VAR 0 5
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: ST_TO_ADDR
// exit ;
40547: GO 40961
// end ; _chassis := AvailableChassisList ( factory ) ;
40549: LD_ADDR_VAR 0 9
40553: PUSH
40554: LD_VAR 0 1
40558: PPUSH
40559: CALL_OW 475
40563: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40564: LD_ADDR_VAR 0 11
40568: PUSH
40569: LD_VAR 0 1
40573: PPUSH
40574: CALL_OW 476
40578: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40579: LD_ADDR_VAR 0 12
40583: PUSH
40584: LD_VAR 0 1
40588: PPUSH
40589: CALL_OW 477
40593: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40594: LD_ADDR_VAR 0 10
40598: PUSH
40599: LD_VAR 0 1
40603: PPUSH
40604: CALL_OW 478
40608: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40609: LD_VAR 0 9
40613: NOT
40614: PUSH
40615: LD_VAR 0 11
40619: NOT
40620: OR
40621: PUSH
40622: LD_VAR 0 12
40626: NOT
40627: OR
40628: PUSH
40629: LD_VAR 0 10
40633: NOT
40634: OR
40635: IFFALSE 40670
// begin result := [ chassis , engine , control , weapon ] ;
40637: LD_ADDR_VAR 0 6
40641: PUSH
40642: LD_VAR 0 2
40646: PUSH
40647: LD_VAR 0 3
40651: PUSH
40652: LD_VAR 0 4
40656: PUSH
40657: LD_VAR 0 5
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: ST_TO_ADDR
// exit ;
40668: GO 40961
// end ; if not chassis in _chassis then
40670: LD_VAR 0 2
40674: PUSH
40675: LD_VAR 0 9
40679: IN
40680: NOT
40681: IFFALSE 40707
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40683: LD_ADDR_VAR 0 2
40687: PUSH
40688: LD_VAR 0 9
40692: PUSH
40693: LD_INT 1
40695: PPUSH
40696: LD_VAR 0 9
40700: PPUSH
40701: CALL_OW 12
40705: ARRAY
40706: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40707: LD_VAR 0 2
40711: PPUSH
40712: LD_VAR 0 3
40716: PPUSH
40717: CALL 40966 0 2
40721: NOT
40722: IFFALSE 40781
// repeat engine := _engine [ 1 ] ;
40724: LD_ADDR_VAR 0 3
40728: PUSH
40729: LD_VAR 0 11
40733: PUSH
40734: LD_INT 1
40736: ARRAY
40737: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40738: LD_ADDR_VAR 0 11
40742: PUSH
40743: LD_VAR 0 11
40747: PPUSH
40748: LD_INT 1
40750: PPUSH
40751: CALL_OW 3
40755: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40756: LD_VAR 0 2
40760: PPUSH
40761: LD_VAR 0 3
40765: PPUSH
40766: CALL 40966 0 2
40770: PUSH
40771: LD_VAR 0 11
40775: PUSH
40776: EMPTY
40777: EQUAL
40778: OR
40779: IFFALSE 40724
// if not control in _control then
40781: LD_VAR 0 4
40785: PUSH
40786: LD_VAR 0 12
40790: IN
40791: NOT
40792: IFFALSE 40818
// control := _control [ rand ( 1 , _control ) ] ;
40794: LD_ADDR_VAR 0 4
40798: PUSH
40799: LD_VAR 0 12
40803: PUSH
40804: LD_INT 1
40806: PPUSH
40807: LD_VAR 0 12
40811: PPUSH
40812: CALL_OW 12
40816: ARRAY
40817: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40818: LD_VAR 0 2
40822: PPUSH
40823: LD_VAR 0 5
40827: PPUSH
40828: CALL 41186 0 2
40832: NOT
40833: IFFALSE 40892
// repeat weapon := _weapon [ 1 ] ;
40835: LD_ADDR_VAR 0 5
40839: PUSH
40840: LD_VAR 0 10
40844: PUSH
40845: LD_INT 1
40847: ARRAY
40848: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40849: LD_ADDR_VAR 0 10
40853: PUSH
40854: LD_VAR 0 10
40858: PPUSH
40859: LD_INT 1
40861: PPUSH
40862: CALL_OW 3
40866: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40867: LD_VAR 0 2
40871: PPUSH
40872: LD_VAR 0 5
40876: PPUSH
40877: CALL 41186 0 2
40881: PUSH
40882: LD_VAR 0 10
40886: PUSH
40887: EMPTY
40888: EQUAL
40889: OR
40890: IFFALSE 40835
// result := [ ] ;
40892: LD_ADDR_VAR 0 6
40896: PUSH
40897: EMPTY
40898: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40899: LD_VAR 0 1
40903: PPUSH
40904: LD_VAR 0 2
40908: PPUSH
40909: LD_VAR 0 3
40913: PPUSH
40914: LD_VAR 0 4
40918: PPUSH
40919: LD_VAR 0 5
40923: PPUSH
40924: CALL_OW 448
40928: IFFALSE 40961
// result := [ chassis , engine , control , weapon ] ;
40930: LD_ADDR_VAR 0 6
40934: PUSH
40935: LD_VAR 0 2
40939: PUSH
40940: LD_VAR 0 3
40944: PUSH
40945: LD_VAR 0 4
40949: PUSH
40950: LD_VAR 0 5
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: ST_TO_ADDR
// end ;
40961: LD_VAR 0 6
40965: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40966: LD_INT 0
40968: PPUSH
// if not chassis or not engine then
40969: LD_VAR 0 1
40973: NOT
40974: PUSH
40975: LD_VAR 0 2
40979: NOT
40980: OR
40981: IFFALSE 40985
// exit ;
40983: GO 41181
// case engine of engine_solar :
40985: LD_VAR 0 2
40989: PUSH
40990: LD_INT 2
40992: DOUBLE
40993: EQUAL
40994: IFTRUE 40998
40996: GO 41036
40998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40999: LD_ADDR_VAR 0 3
41003: PUSH
41004: LD_INT 11
41006: PUSH
41007: LD_INT 12
41009: PUSH
41010: LD_INT 13
41012: PUSH
41013: LD_INT 14
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: LD_INT 2
41021: PUSH
41022: LD_INT 3
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: ST_TO_ADDR
41034: GO 41165
41036: LD_INT 1
41038: DOUBLE
41039: EQUAL
41040: IFTRUE 41044
41042: GO 41106
41044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41045: LD_ADDR_VAR 0 3
41049: PUSH
41050: LD_INT 11
41052: PUSH
41053: LD_INT 12
41055: PUSH
41056: LD_INT 13
41058: PUSH
41059: LD_INT 14
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 2
41067: PUSH
41068: LD_INT 3
41070: PUSH
41071: LD_INT 4
41073: PUSH
41074: LD_INT 5
41076: PUSH
41077: LD_INT 21
41079: PUSH
41080: LD_INT 23
41082: PUSH
41083: LD_INT 22
41085: PUSH
41086: LD_INT 24
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: ST_TO_ADDR
41104: GO 41165
41106: LD_INT 3
41108: DOUBLE
41109: EQUAL
41110: IFTRUE 41114
41112: GO 41164
41114: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41115: LD_ADDR_VAR 0 3
41119: PUSH
41120: LD_INT 13
41122: PUSH
41123: LD_INT 14
41125: PUSH
41126: LD_INT 2
41128: PUSH
41129: LD_INT 3
41131: PUSH
41132: LD_INT 4
41134: PUSH
41135: LD_INT 5
41137: PUSH
41138: LD_INT 21
41140: PUSH
41141: LD_INT 22
41143: PUSH
41144: LD_INT 23
41146: PUSH
41147: LD_INT 24
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: ST_TO_ADDR
41162: GO 41165
41164: POP
// result := ( chassis in result ) ;
41165: LD_ADDR_VAR 0 3
41169: PUSH
41170: LD_VAR 0 1
41174: PUSH
41175: LD_VAR 0 3
41179: IN
41180: ST_TO_ADDR
// end ;
41181: LD_VAR 0 3
41185: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41186: LD_INT 0
41188: PPUSH
// if not chassis or not weapon then
41189: LD_VAR 0 1
41193: NOT
41194: PUSH
41195: LD_VAR 0 2
41199: NOT
41200: OR
41201: IFFALSE 41205
// exit ;
41203: GO 42267
// case weapon of us_machine_gun :
41205: LD_VAR 0 2
41209: PUSH
41210: LD_INT 2
41212: DOUBLE
41213: EQUAL
41214: IFTRUE 41218
41216: GO 41248
41218: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41219: LD_ADDR_VAR 0 3
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: LD_INT 2
41229: PUSH
41230: LD_INT 3
41232: PUSH
41233: LD_INT 4
41235: PUSH
41236: LD_INT 5
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: ST_TO_ADDR
41246: GO 42251
41248: LD_INT 3
41250: DOUBLE
41251: EQUAL
41252: IFTRUE 41256
41254: GO 41286
41256: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41257: LD_ADDR_VAR 0 3
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: LD_INT 2
41267: PUSH
41268: LD_INT 3
41270: PUSH
41271: LD_INT 4
41273: PUSH
41274: LD_INT 5
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: ST_TO_ADDR
41284: GO 42251
41286: LD_INT 11
41288: DOUBLE
41289: EQUAL
41290: IFTRUE 41294
41292: GO 41324
41294: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41295: LD_ADDR_VAR 0 3
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: LD_INT 3
41308: PUSH
41309: LD_INT 4
41311: PUSH
41312: LD_INT 5
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: ST_TO_ADDR
41322: GO 42251
41324: LD_INT 4
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41332
41330: GO 41358
41332: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41333: LD_ADDR_VAR 0 3
41337: PUSH
41338: LD_INT 2
41340: PUSH
41341: LD_INT 3
41343: PUSH
41344: LD_INT 4
41346: PUSH
41347: LD_INT 5
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: ST_TO_ADDR
41356: GO 42251
41358: LD_INT 5
41360: DOUBLE
41361: EQUAL
41362: IFTRUE 41366
41364: GO 41392
41366: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41367: LD_ADDR_VAR 0 3
41371: PUSH
41372: LD_INT 2
41374: PUSH
41375: LD_INT 3
41377: PUSH
41378: LD_INT 4
41380: PUSH
41381: LD_INT 5
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: ST_TO_ADDR
41390: GO 42251
41392: LD_INT 9
41394: DOUBLE
41395: EQUAL
41396: IFTRUE 41400
41398: GO 41426
41400: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41401: LD_ADDR_VAR 0 3
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: LD_INT 4
41414: PUSH
41415: LD_INT 5
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: ST_TO_ADDR
41424: GO 42251
41426: LD_INT 7
41428: DOUBLE
41429: EQUAL
41430: IFTRUE 41434
41432: GO 41460
41434: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41435: LD_ADDR_VAR 0 3
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: LD_INT 3
41445: PUSH
41446: LD_INT 4
41448: PUSH
41449: LD_INT 5
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: ST_TO_ADDR
41458: GO 42251
41460: LD_INT 12
41462: DOUBLE
41463: EQUAL
41464: IFTRUE 41468
41466: GO 41494
41468: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41469: LD_ADDR_VAR 0 3
41473: PUSH
41474: LD_INT 2
41476: PUSH
41477: LD_INT 3
41479: PUSH
41480: LD_INT 4
41482: PUSH
41483: LD_INT 5
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: ST_TO_ADDR
41492: GO 42251
41494: LD_INT 13
41496: DOUBLE
41497: EQUAL
41498: IFTRUE 41502
41500: GO 41528
41502: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41503: LD_ADDR_VAR 0 3
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: LD_INT 3
41513: PUSH
41514: LD_INT 4
41516: PUSH
41517: LD_INT 5
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: ST_TO_ADDR
41526: GO 42251
41528: LD_INT 14
41530: DOUBLE
41531: EQUAL
41532: IFTRUE 41536
41534: GO 41554
41536: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41537: LD_ADDR_VAR 0 3
41541: PUSH
41542: LD_INT 4
41544: PUSH
41545: LD_INT 5
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: ST_TO_ADDR
41552: GO 42251
41554: LD_INT 6
41556: DOUBLE
41557: EQUAL
41558: IFTRUE 41562
41560: GO 41580
41562: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41563: LD_ADDR_VAR 0 3
41567: PUSH
41568: LD_INT 4
41570: PUSH
41571: LD_INT 5
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: ST_TO_ADDR
41578: GO 42251
41580: LD_INT 10
41582: DOUBLE
41583: EQUAL
41584: IFTRUE 41588
41586: GO 41606
41588: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41589: LD_ADDR_VAR 0 3
41593: PUSH
41594: LD_INT 4
41596: PUSH
41597: LD_INT 5
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: ST_TO_ADDR
41604: GO 42251
41606: LD_INT 22
41608: DOUBLE
41609: EQUAL
41610: IFTRUE 41614
41612: GO 41640
41614: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41615: LD_ADDR_VAR 0 3
41619: PUSH
41620: LD_INT 11
41622: PUSH
41623: LD_INT 12
41625: PUSH
41626: LD_INT 13
41628: PUSH
41629: LD_INT 14
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: ST_TO_ADDR
41638: GO 42251
41640: LD_INT 23
41642: DOUBLE
41643: EQUAL
41644: IFTRUE 41648
41646: GO 41674
41648: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41649: LD_ADDR_VAR 0 3
41653: PUSH
41654: LD_INT 11
41656: PUSH
41657: LD_INT 12
41659: PUSH
41660: LD_INT 13
41662: PUSH
41663: LD_INT 14
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: ST_TO_ADDR
41672: GO 42251
41674: LD_INT 24
41676: DOUBLE
41677: EQUAL
41678: IFTRUE 41682
41680: GO 41708
41682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41683: LD_ADDR_VAR 0 3
41687: PUSH
41688: LD_INT 11
41690: PUSH
41691: LD_INT 12
41693: PUSH
41694: LD_INT 13
41696: PUSH
41697: LD_INT 14
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: ST_TO_ADDR
41706: GO 42251
41708: LD_INT 30
41710: DOUBLE
41711: EQUAL
41712: IFTRUE 41716
41714: GO 41742
41716: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41717: LD_ADDR_VAR 0 3
41721: PUSH
41722: LD_INT 11
41724: PUSH
41725: LD_INT 12
41727: PUSH
41728: LD_INT 13
41730: PUSH
41731: LD_INT 14
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: ST_TO_ADDR
41740: GO 42251
41742: LD_INT 25
41744: DOUBLE
41745: EQUAL
41746: IFTRUE 41750
41748: GO 41768
41750: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41751: LD_ADDR_VAR 0 3
41755: PUSH
41756: LD_INT 13
41758: PUSH
41759: LD_INT 14
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: ST_TO_ADDR
41766: GO 42251
41768: LD_INT 27
41770: DOUBLE
41771: EQUAL
41772: IFTRUE 41776
41774: GO 41794
41776: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41777: LD_ADDR_VAR 0 3
41781: PUSH
41782: LD_INT 13
41784: PUSH
41785: LD_INT 14
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: ST_TO_ADDR
41792: GO 42251
41794: LD_EXP 48
41798: DOUBLE
41799: EQUAL
41800: IFTRUE 41804
41802: GO 41830
41804: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41805: LD_ADDR_VAR 0 3
41809: PUSH
41810: LD_INT 11
41812: PUSH
41813: LD_INT 12
41815: PUSH
41816: LD_INT 13
41818: PUSH
41819: LD_INT 14
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: ST_TO_ADDR
41828: GO 42251
41830: LD_INT 28
41832: DOUBLE
41833: EQUAL
41834: IFTRUE 41838
41836: GO 41856
41838: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41839: LD_ADDR_VAR 0 3
41843: PUSH
41844: LD_INT 13
41846: PUSH
41847: LD_INT 14
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: ST_TO_ADDR
41854: GO 42251
41856: LD_INT 29
41858: DOUBLE
41859: EQUAL
41860: IFTRUE 41864
41862: GO 41882
41864: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41865: LD_ADDR_VAR 0 3
41869: PUSH
41870: LD_INT 13
41872: PUSH
41873: LD_INT 14
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: ST_TO_ADDR
41880: GO 42251
41882: LD_INT 31
41884: DOUBLE
41885: EQUAL
41886: IFTRUE 41890
41888: GO 41908
41890: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41891: LD_ADDR_VAR 0 3
41895: PUSH
41896: LD_INT 13
41898: PUSH
41899: LD_INT 14
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: ST_TO_ADDR
41906: GO 42251
41908: LD_INT 26
41910: DOUBLE
41911: EQUAL
41912: IFTRUE 41916
41914: GO 41934
41916: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41917: LD_ADDR_VAR 0 3
41921: PUSH
41922: LD_INT 13
41924: PUSH
41925: LD_INT 14
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: ST_TO_ADDR
41932: GO 42251
41934: LD_INT 42
41936: DOUBLE
41937: EQUAL
41938: IFTRUE 41942
41940: GO 41968
41942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41943: LD_ADDR_VAR 0 3
41947: PUSH
41948: LD_INT 21
41950: PUSH
41951: LD_INT 22
41953: PUSH
41954: LD_INT 23
41956: PUSH
41957: LD_INT 24
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: ST_TO_ADDR
41966: GO 42251
41968: LD_INT 43
41970: DOUBLE
41971: EQUAL
41972: IFTRUE 41976
41974: GO 42002
41976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41977: LD_ADDR_VAR 0 3
41981: PUSH
41982: LD_INT 21
41984: PUSH
41985: LD_INT 22
41987: PUSH
41988: LD_INT 23
41990: PUSH
41991: LD_INT 24
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: ST_TO_ADDR
42000: GO 42251
42002: LD_INT 44
42004: DOUBLE
42005: EQUAL
42006: IFTRUE 42010
42008: GO 42036
42010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42011: LD_ADDR_VAR 0 3
42015: PUSH
42016: LD_INT 21
42018: PUSH
42019: LD_INT 22
42021: PUSH
42022: LD_INT 23
42024: PUSH
42025: LD_INT 24
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: ST_TO_ADDR
42034: GO 42251
42036: LD_INT 45
42038: DOUBLE
42039: EQUAL
42040: IFTRUE 42044
42042: GO 42070
42044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42045: LD_ADDR_VAR 0 3
42049: PUSH
42050: LD_INT 21
42052: PUSH
42053: LD_INT 22
42055: PUSH
42056: LD_INT 23
42058: PUSH
42059: LD_INT 24
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: ST_TO_ADDR
42068: GO 42251
42070: LD_INT 49
42072: DOUBLE
42073: EQUAL
42074: IFTRUE 42078
42076: GO 42104
42078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42079: LD_ADDR_VAR 0 3
42083: PUSH
42084: LD_INT 21
42086: PUSH
42087: LD_INT 22
42089: PUSH
42090: LD_INT 23
42092: PUSH
42093: LD_INT 24
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: ST_TO_ADDR
42102: GO 42251
42104: LD_INT 51
42106: DOUBLE
42107: EQUAL
42108: IFTRUE 42112
42110: GO 42138
42112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42113: LD_ADDR_VAR 0 3
42117: PUSH
42118: LD_INT 21
42120: PUSH
42121: LD_INT 22
42123: PUSH
42124: LD_INT 23
42126: PUSH
42127: LD_INT 24
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: ST_TO_ADDR
42136: GO 42251
42138: LD_INT 52
42140: DOUBLE
42141: EQUAL
42142: IFTRUE 42146
42144: GO 42172
42146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42147: LD_ADDR_VAR 0 3
42151: PUSH
42152: LD_INT 21
42154: PUSH
42155: LD_INT 22
42157: PUSH
42158: LD_INT 23
42160: PUSH
42161: LD_INT 24
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: ST_TO_ADDR
42170: GO 42251
42172: LD_INT 53
42174: DOUBLE
42175: EQUAL
42176: IFTRUE 42180
42178: GO 42198
42180: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42181: LD_ADDR_VAR 0 3
42185: PUSH
42186: LD_INT 23
42188: PUSH
42189: LD_INT 24
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: ST_TO_ADDR
42196: GO 42251
42198: LD_INT 46
42200: DOUBLE
42201: EQUAL
42202: IFTRUE 42206
42204: GO 42224
42206: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42207: LD_ADDR_VAR 0 3
42211: PUSH
42212: LD_INT 23
42214: PUSH
42215: LD_INT 24
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: ST_TO_ADDR
42222: GO 42251
42224: LD_INT 47
42226: DOUBLE
42227: EQUAL
42228: IFTRUE 42232
42230: GO 42250
42232: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42233: LD_ADDR_VAR 0 3
42237: PUSH
42238: LD_INT 23
42240: PUSH
42241: LD_INT 24
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: ST_TO_ADDR
42248: GO 42251
42250: POP
// result := ( chassis in result ) ;
42251: LD_ADDR_VAR 0 3
42255: PUSH
42256: LD_VAR 0 1
42260: PUSH
42261: LD_VAR 0 3
42265: IN
42266: ST_TO_ADDR
// end ;
42267: LD_VAR 0 3
42271: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42272: LD_INT 0
42274: PPUSH
42275: PPUSH
42276: PPUSH
42277: PPUSH
42278: PPUSH
42279: PPUSH
42280: PPUSH
// result := array ;
42281: LD_ADDR_VAR 0 5
42285: PUSH
42286: LD_VAR 0 1
42290: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42291: LD_VAR 0 1
42295: NOT
42296: PUSH
42297: LD_VAR 0 2
42301: NOT
42302: OR
42303: PUSH
42304: LD_VAR 0 3
42308: NOT
42309: OR
42310: PUSH
42311: LD_VAR 0 2
42315: PUSH
42316: LD_VAR 0 1
42320: GREATER
42321: OR
42322: PUSH
42323: LD_VAR 0 3
42327: PUSH
42328: LD_VAR 0 1
42332: GREATER
42333: OR
42334: IFFALSE 42338
// exit ;
42336: GO 42634
// if direction then
42338: LD_VAR 0 4
42342: IFFALSE 42406
// begin d := 1 ;
42344: LD_ADDR_VAR 0 9
42348: PUSH
42349: LD_INT 1
42351: ST_TO_ADDR
// if i_from > i_to then
42352: LD_VAR 0 2
42356: PUSH
42357: LD_VAR 0 3
42361: GREATER
42362: IFFALSE 42388
// length := ( array - i_from ) + i_to else
42364: LD_ADDR_VAR 0 11
42368: PUSH
42369: LD_VAR 0 1
42373: PUSH
42374: LD_VAR 0 2
42378: MINUS
42379: PUSH
42380: LD_VAR 0 3
42384: PLUS
42385: ST_TO_ADDR
42386: GO 42404
// length := i_to - i_from ;
42388: LD_ADDR_VAR 0 11
42392: PUSH
42393: LD_VAR 0 3
42397: PUSH
42398: LD_VAR 0 2
42402: MINUS
42403: ST_TO_ADDR
// end else
42404: GO 42467
// begin d := - 1 ;
42406: LD_ADDR_VAR 0 9
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: ST_TO_ADDR
// if i_from > i_to then
42415: LD_VAR 0 2
42419: PUSH
42420: LD_VAR 0 3
42424: GREATER
42425: IFFALSE 42445
// length := i_from - i_to else
42427: LD_ADDR_VAR 0 11
42431: PUSH
42432: LD_VAR 0 2
42436: PUSH
42437: LD_VAR 0 3
42441: MINUS
42442: ST_TO_ADDR
42443: GO 42467
// length := ( array - i_to ) + i_from ;
42445: LD_ADDR_VAR 0 11
42449: PUSH
42450: LD_VAR 0 1
42454: PUSH
42455: LD_VAR 0 3
42459: MINUS
42460: PUSH
42461: LD_VAR 0 2
42465: PLUS
42466: ST_TO_ADDR
// end ; if not length then
42467: LD_VAR 0 11
42471: NOT
42472: IFFALSE 42476
// exit ;
42474: GO 42634
// tmp := array ;
42476: LD_ADDR_VAR 0 10
42480: PUSH
42481: LD_VAR 0 1
42485: ST_TO_ADDR
// for i = 1 to length do
42486: LD_ADDR_VAR 0 6
42490: PUSH
42491: DOUBLE
42492: LD_INT 1
42494: DEC
42495: ST_TO_ADDR
42496: LD_VAR 0 11
42500: PUSH
42501: FOR_TO
42502: IFFALSE 42622
// begin for j = 1 to array do
42504: LD_ADDR_VAR 0 7
42508: PUSH
42509: DOUBLE
42510: LD_INT 1
42512: DEC
42513: ST_TO_ADDR
42514: LD_VAR 0 1
42518: PUSH
42519: FOR_TO
42520: IFFALSE 42608
// begin k := j + d ;
42522: LD_ADDR_VAR 0 8
42526: PUSH
42527: LD_VAR 0 7
42531: PUSH
42532: LD_VAR 0 9
42536: PLUS
42537: ST_TO_ADDR
// if k > array then
42538: LD_VAR 0 8
42542: PUSH
42543: LD_VAR 0 1
42547: GREATER
42548: IFFALSE 42558
// k := 1 ;
42550: LD_ADDR_VAR 0 8
42554: PUSH
42555: LD_INT 1
42557: ST_TO_ADDR
// if not k then
42558: LD_VAR 0 8
42562: NOT
42563: IFFALSE 42575
// k := array ;
42565: LD_ADDR_VAR 0 8
42569: PUSH
42570: LD_VAR 0 1
42574: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42575: LD_ADDR_VAR 0 10
42579: PUSH
42580: LD_VAR 0 10
42584: PPUSH
42585: LD_VAR 0 8
42589: PPUSH
42590: LD_VAR 0 1
42594: PUSH
42595: LD_VAR 0 7
42599: ARRAY
42600: PPUSH
42601: CALL_OW 1
42605: ST_TO_ADDR
// end ;
42606: GO 42519
42608: POP
42609: POP
// array := tmp ;
42610: LD_ADDR_VAR 0 1
42614: PUSH
42615: LD_VAR 0 10
42619: ST_TO_ADDR
// end ;
42620: GO 42501
42622: POP
42623: POP
// result := array ;
42624: LD_ADDR_VAR 0 5
42628: PUSH
42629: LD_VAR 0 1
42633: ST_TO_ADDR
// end ;
42634: LD_VAR 0 5
42638: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42639: LD_INT 0
42641: PPUSH
42642: PPUSH
// result := 0 ;
42643: LD_ADDR_VAR 0 3
42647: PUSH
42648: LD_INT 0
42650: ST_TO_ADDR
// if not array or not value in array then
42651: LD_VAR 0 1
42655: NOT
42656: PUSH
42657: LD_VAR 0 2
42661: PUSH
42662: LD_VAR 0 1
42666: IN
42667: NOT
42668: OR
42669: IFFALSE 42673
// exit ;
42671: GO 42727
// for i = 1 to array do
42673: LD_ADDR_VAR 0 4
42677: PUSH
42678: DOUBLE
42679: LD_INT 1
42681: DEC
42682: ST_TO_ADDR
42683: LD_VAR 0 1
42687: PUSH
42688: FOR_TO
42689: IFFALSE 42725
// if value = array [ i ] then
42691: LD_VAR 0 2
42695: PUSH
42696: LD_VAR 0 1
42700: PUSH
42701: LD_VAR 0 4
42705: ARRAY
42706: EQUAL
42707: IFFALSE 42723
// begin result := i ;
42709: LD_ADDR_VAR 0 3
42713: PUSH
42714: LD_VAR 0 4
42718: ST_TO_ADDR
// exit ;
42719: POP
42720: POP
42721: GO 42727
// end ;
42723: GO 42688
42725: POP
42726: POP
// end ;
42727: LD_VAR 0 3
42731: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42732: LD_INT 0
42734: PPUSH
// vc_chassis := chassis ;
42735: LD_ADDR_OWVAR 37
42739: PUSH
42740: LD_VAR 0 1
42744: ST_TO_ADDR
// vc_engine := engine ;
42745: LD_ADDR_OWVAR 39
42749: PUSH
42750: LD_VAR 0 2
42754: ST_TO_ADDR
// vc_control := control ;
42755: LD_ADDR_OWVAR 38
42759: PUSH
42760: LD_VAR 0 3
42764: ST_TO_ADDR
// vc_weapon := weapon ;
42765: LD_ADDR_OWVAR 40
42769: PUSH
42770: LD_VAR 0 4
42774: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42775: LD_ADDR_OWVAR 41
42779: PUSH
42780: LD_VAR 0 5
42784: ST_TO_ADDR
// end ;
42785: LD_VAR 0 6
42789: RET
// export function WantPlant ( unit ) ; var task ; begin
42790: LD_INT 0
42792: PPUSH
42793: PPUSH
// result := false ;
42794: LD_ADDR_VAR 0 2
42798: PUSH
42799: LD_INT 0
42801: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42802: LD_ADDR_VAR 0 3
42806: PUSH
42807: LD_VAR 0 1
42811: PPUSH
42812: CALL_OW 437
42816: ST_TO_ADDR
// if task then
42817: LD_VAR 0 3
42821: IFFALSE 42849
// if task [ 1 ] [ 1 ] = p then
42823: LD_VAR 0 3
42827: PUSH
42828: LD_INT 1
42830: ARRAY
42831: PUSH
42832: LD_INT 1
42834: ARRAY
42835: PUSH
42836: LD_STRING p
42838: EQUAL
42839: IFFALSE 42849
// result := true ;
42841: LD_ADDR_VAR 0 2
42845: PUSH
42846: LD_INT 1
42848: ST_TO_ADDR
// end ;
42849: LD_VAR 0 2
42853: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42854: LD_INT 0
42856: PPUSH
42857: PPUSH
42858: PPUSH
42859: PPUSH
// if pos < 1 then
42860: LD_VAR 0 2
42864: PUSH
42865: LD_INT 1
42867: LESS
42868: IFFALSE 42872
// exit ;
42870: GO 43175
// if pos = 1 then
42872: LD_VAR 0 2
42876: PUSH
42877: LD_INT 1
42879: EQUAL
42880: IFFALSE 42913
// result := Replace ( arr , pos [ 1 ] , value ) else
42882: LD_ADDR_VAR 0 4
42886: PUSH
42887: LD_VAR 0 1
42891: PPUSH
42892: LD_VAR 0 2
42896: PUSH
42897: LD_INT 1
42899: ARRAY
42900: PPUSH
42901: LD_VAR 0 3
42905: PPUSH
42906: CALL_OW 1
42910: ST_TO_ADDR
42911: GO 43175
// begin tmp := arr ;
42913: LD_ADDR_VAR 0 6
42917: PUSH
42918: LD_VAR 0 1
42922: ST_TO_ADDR
// s_arr := [ tmp ] ;
42923: LD_ADDR_VAR 0 7
42927: PUSH
42928: LD_VAR 0 6
42932: PUSH
42933: EMPTY
42934: LIST
42935: ST_TO_ADDR
// for i = 1 to pos - 1 do
42936: LD_ADDR_VAR 0 5
42940: PUSH
42941: DOUBLE
42942: LD_INT 1
42944: DEC
42945: ST_TO_ADDR
42946: LD_VAR 0 2
42950: PUSH
42951: LD_INT 1
42953: MINUS
42954: PUSH
42955: FOR_TO
42956: IFFALSE 43001
// begin tmp := tmp [ pos [ i ] ] ;
42958: LD_ADDR_VAR 0 6
42962: PUSH
42963: LD_VAR 0 6
42967: PUSH
42968: LD_VAR 0 2
42972: PUSH
42973: LD_VAR 0 5
42977: ARRAY
42978: ARRAY
42979: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42980: LD_ADDR_VAR 0 7
42984: PUSH
42985: LD_VAR 0 7
42989: PUSH
42990: LD_VAR 0 6
42994: PUSH
42995: EMPTY
42996: LIST
42997: ADD
42998: ST_TO_ADDR
// end ;
42999: GO 42955
43001: POP
43002: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43003: LD_ADDR_VAR 0 6
43007: PUSH
43008: LD_VAR 0 6
43012: PPUSH
43013: LD_VAR 0 2
43017: PUSH
43018: LD_VAR 0 2
43022: ARRAY
43023: PPUSH
43024: LD_VAR 0 3
43028: PPUSH
43029: CALL_OW 1
43033: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43034: LD_ADDR_VAR 0 7
43038: PUSH
43039: LD_VAR 0 7
43043: PPUSH
43044: LD_VAR 0 7
43048: PPUSH
43049: LD_VAR 0 6
43053: PPUSH
43054: CALL_OW 1
43058: ST_TO_ADDR
// for i = s_arr downto 2 do
43059: LD_ADDR_VAR 0 5
43063: PUSH
43064: DOUBLE
43065: LD_VAR 0 7
43069: INC
43070: ST_TO_ADDR
43071: LD_INT 2
43073: PUSH
43074: FOR_DOWNTO
43075: IFFALSE 43159
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43077: LD_ADDR_VAR 0 6
43081: PUSH
43082: LD_VAR 0 7
43086: PUSH
43087: LD_VAR 0 5
43091: PUSH
43092: LD_INT 1
43094: MINUS
43095: ARRAY
43096: PPUSH
43097: LD_VAR 0 2
43101: PUSH
43102: LD_VAR 0 5
43106: PUSH
43107: LD_INT 1
43109: MINUS
43110: ARRAY
43111: PPUSH
43112: LD_VAR 0 7
43116: PUSH
43117: LD_VAR 0 5
43121: ARRAY
43122: PPUSH
43123: CALL_OW 1
43127: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43128: LD_ADDR_VAR 0 7
43132: PUSH
43133: LD_VAR 0 7
43137: PPUSH
43138: LD_VAR 0 5
43142: PUSH
43143: LD_INT 1
43145: MINUS
43146: PPUSH
43147: LD_VAR 0 6
43151: PPUSH
43152: CALL_OW 1
43156: ST_TO_ADDR
// end ;
43157: GO 43074
43159: POP
43160: POP
// result := s_arr [ 1 ] ;
43161: LD_ADDR_VAR 0 4
43165: PUSH
43166: LD_VAR 0 7
43170: PUSH
43171: LD_INT 1
43173: ARRAY
43174: ST_TO_ADDR
// end ; end ;
43175: LD_VAR 0 4
43179: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43180: LD_INT 0
43182: PPUSH
43183: PPUSH
// if not list then
43184: LD_VAR 0 1
43188: NOT
43189: IFFALSE 43193
// exit ;
43191: GO 43284
// i := list [ pos1 ] ;
43193: LD_ADDR_VAR 0 5
43197: PUSH
43198: LD_VAR 0 1
43202: PUSH
43203: LD_VAR 0 2
43207: ARRAY
43208: ST_TO_ADDR
// if not i then
43209: LD_VAR 0 5
43213: NOT
43214: IFFALSE 43218
// exit ;
43216: GO 43284
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43218: LD_ADDR_VAR 0 1
43222: PUSH
43223: LD_VAR 0 1
43227: PPUSH
43228: LD_VAR 0 2
43232: PPUSH
43233: LD_VAR 0 1
43237: PUSH
43238: LD_VAR 0 3
43242: ARRAY
43243: PPUSH
43244: CALL_OW 1
43248: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43249: LD_ADDR_VAR 0 1
43253: PUSH
43254: LD_VAR 0 1
43258: PPUSH
43259: LD_VAR 0 3
43263: PPUSH
43264: LD_VAR 0 5
43268: PPUSH
43269: CALL_OW 1
43273: ST_TO_ADDR
// result := list ;
43274: LD_ADDR_VAR 0 4
43278: PUSH
43279: LD_VAR 0 1
43283: ST_TO_ADDR
// end ;
43284: LD_VAR 0 4
43288: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43289: LD_INT 0
43291: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43292: LD_ADDR_VAR 0 5
43296: PUSH
43297: LD_VAR 0 1
43301: PPUSH
43302: CALL_OW 250
43306: PPUSH
43307: LD_VAR 0 1
43311: PPUSH
43312: CALL_OW 251
43316: PPUSH
43317: LD_VAR 0 2
43321: PPUSH
43322: LD_VAR 0 3
43326: PPUSH
43327: LD_VAR 0 4
43331: PPUSH
43332: CALL 43342 0 5
43336: ST_TO_ADDR
// end ;
43337: LD_VAR 0 5
43341: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43342: LD_INT 0
43344: PPUSH
43345: PPUSH
43346: PPUSH
43347: PPUSH
// if not list then
43348: LD_VAR 0 3
43352: NOT
43353: IFFALSE 43357
// exit ;
43355: GO 43745
// result := [ ] ;
43357: LD_ADDR_VAR 0 6
43361: PUSH
43362: EMPTY
43363: ST_TO_ADDR
// for i in list do
43364: LD_ADDR_VAR 0 7
43368: PUSH
43369: LD_VAR 0 3
43373: PUSH
43374: FOR_IN
43375: IFFALSE 43577
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43377: LD_ADDR_VAR 0 9
43381: PUSH
43382: LD_VAR 0 7
43386: PPUSH
43387: LD_VAR 0 1
43391: PPUSH
43392: LD_VAR 0 2
43396: PPUSH
43397: CALL_OW 297
43401: ST_TO_ADDR
// if not result then
43402: LD_VAR 0 6
43406: NOT
43407: IFFALSE 43433
// result := [ [ i , tmp ] ] else
43409: LD_ADDR_VAR 0 6
43413: PUSH
43414: LD_VAR 0 7
43418: PUSH
43419: LD_VAR 0 9
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: EMPTY
43429: LIST
43430: ST_TO_ADDR
43431: GO 43575
// begin if result [ result ] [ 2 ] < tmp then
43433: LD_VAR 0 6
43437: PUSH
43438: LD_VAR 0 6
43442: ARRAY
43443: PUSH
43444: LD_INT 2
43446: ARRAY
43447: PUSH
43448: LD_VAR 0 9
43452: LESS
43453: IFFALSE 43495
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43455: LD_ADDR_VAR 0 6
43459: PUSH
43460: LD_VAR 0 6
43464: PPUSH
43465: LD_VAR 0 6
43469: PUSH
43470: LD_INT 1
43472: PLUS
43473: PPUSH
43474: LD_VAR 0 7
43478: PUSH
43479: LD_VAR 0 9
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PPUSH
43488: CALL_OW 2
43492: ST_TO_ADDR
43493: GO 43575
// for j = 1 to result do
43495: LD_ADDR_VAR 0 8
43499: PUSH
43500: DOUBLE
43501: LD_INT 1
43503: DEC
43504: ST_TO_ADDR
43505: LD_VAR 0 6
43509: PUSH
43510: FOR_TO
43511: IFFALSE 43573
// begin if tmp < result [ j ] [ 2 ] then
43513: LD_VAR 0 9
43517: PUSH
43518: LD_VAR 0 6
43522: PUSH
43523: LD_VAR 0 8
43527: ARRAY
43528: PUSH
43529: LD_INT 2
43531: ARRAY
43532: LESS
43533: IFFALSE 43571
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43535: LD_ADDR_VAR 0 6
43539: PUSH
43540: LD_VAR 0 6
43544: PPUSH
43545: LD_VAR 0 8
43549: PPUSH
43550: LD_VAR 0 7
43554: PUSH
43555: LD_VAR 0 9
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PPUSH
43564: CALL_OW 2
43568: ST_TO_ADDR
// break ;
43569: GO 43573
// end ; end ;
43571: GO 43510
43573: POP
43574: POP
// end ; end ;
43575: GO 43374
43577: POP
43578: POP
// if result and not asc then
43579: LD_VAR 0 6
43583: PUSH
43584: LD_VAR 0 4
43588: NOT
43589: AND
43590: IFFALSE 43665
// begin tmp := result ;
43592: LD_ADDR_VAR 0 9
43596: PUSH
43597: LD_VAR 0 6
43601: ST_TO_ADDR
// for i = tmp downto 1 do
43602: LD_ADDR_VAR 0 7
43606: PUSH
43607: DOUBLE
43608: LD_VAR 0 9
43612: INC
43613: ST_TO_ADDR
43614: LD_INT 1
43616: PUSH
43617: FOR_DOWNTO
43618: IFFALSE 43663
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43620: LD_ADDR_VAR 0 6
43624: PUSH
43625: LD_VAR 0 6
43629: PPUSH
43630: LD_VAR 0 9
43634: PUSH
43635: LD_VAR 0 7
43639: MINUS
43640: PUSH
43641: LD_INT 1
43643: PLUS
43644: PPUSH
43645: LD_VAR 0 9
43649: PUSH
43650: LD_VAR 0 7
43654: ARRAY
43655: PPUSH
43656: CALL_OW 1
43660: ST_TO_ADDR
43661: GO 43617
43663: POP
43664: POP
// end ; tmp := [ ] ;
43665: LD_ADDR_VAR 0 9
43669: PUSH
43670: EMPTY
43671: ST_TO_ADDR
// if mode then
43672: LD_VAR 0 5
43676: IFFALSE 43745
// begin for i = 1 to result do
43678: LD_ADDR_VAR 0 7
43682: PUSH
43683: DOUBLE
43684: LD_INT 1
43686: DEC
43687: ST_TO_ADDR
43688: LD_VAR 0 6
43692: PUSH
43693: FOR_TO
43694: IFFALSE 43733
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43696: LD_ADDR_VAR 0 9
43700: PUSH
43701: LD_VAR 0 9
43705: PPUSH
43706: LD_VAR 0 7
43710: PPUSH
43711: LD_VAR 0 6
43715: PUSH
43716: LD_VAR 0 7
43720: ARRAY
43721: PUSH
43722: LD_INT 1
43724: ARRAY
43725: PPUSH
43726: CALL_OW 1
43730: ST_TO_ADDR
43731: GO 43693
43733: POP
43734: POP
// result := tmp ;
43735: LD_ADDR_VAR 0 6
43739: PUSH
43740: LD_VAR 0 9
43744: ST_TO_ADDR
// end ; end ;
43745: LD_VAR 0 6
43749: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43750: LD_INT 0
43752: PPUSH
43753: PPUSH
43754: PPUSH
43755: PPUSH
43756: PPUSH
43757: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43758: LD_ADDR_VAR 0 5
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: EMPTY
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: ST_TO_ADDR
// if not x or not y then
43780: LD_VAR 0 2
43784: NOT
43785: PUSH
43786: LD_VAR 0 3
43790: NOT
43791: OR
43792: IFFALSE 43796
// exit ;
43794: GO 45448
// if not range then
43796: LD_VAR 0 4
43800: NOT
43801: IFFALSE 43811
// range := 10 ;
43803: LD_ADDR_VAR 0 4
43807: PUSH
43808: LD_INT 10
43810: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43811: LD_ADDR_VAR 0 8
43815: PUSH
43816: LD_INT 81
43818: PUSH
43819: LD_VAR 0 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 92
43830: PUSH
43831: LD_VAR 0 2
43835: PUSH
43836: LD_VAR 0 3
43840: PUSH
43841: LD_VAR 0 4
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 3
43854: PUSH
43855: LD_INT 21
43857: PUSH
43858: LD_INT 3
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: LIST
43873: PPUSH
43874: CALL_OW 69
43878: ST_TO_ADDR
// if not tmp then
43879: LD_VAR 0 8
43883: NOT
43884: IFFALSE 43888
// exit ;
43886: GO 45448
// for i in tmp do
43888: LD_ADDR_VAR 0 6
43892: PUSH
43893: LD_VAR 0 8
43897: PUSH
43898: FOR_IN
43899: IFFALSE 45423
// begin points := [ 0 , 0 , 0 ] ;
43901: LD_ADDR_VAR 0 9
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: ST_TO_ADDR
// bpoints := 1 ;
43920: LD_ADDR_VAR 0 10
43924: PUSH
43925: LD_INT 1
43927: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43928: LD_VAR 0 6
43932: PPUSH
43933: CALL_OW 247
43937: PUSH
43938: LD_INT 1
43940: DOUBLE
43941: EQUAL
43942: IFTRUE 43946
43944: GO 44524
43946: POP
// begin if GetClass ( i ) = 1 then
43947: LD_VAR 0 6
43951: PPUSH
43952: CALL_OW 257
43956: PUSH
43957: LD_INT 1
43959: EQUAL
43960: IFFALSE 43981
// points := [ 10 , 5 , 3 ] ;
43962: LD_ADDR_VAR 0 9
43966: PUSH
43967: LD_INT 10
43969: PUSH
43970: LD_INT 5
43972: PUSH
43973: LD_INT 3
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: LIST
43980: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43981: LD_VAR 0 6
43985: PPUSH
43986: CALL_OW 257
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: LD_INT 3
43996: PUSH
43997: LD_INT 4
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: IN
44005: IFFALSE 44026
// points := [ 3 , 2 , 1 ] ;
44007: LD_ADDR_VAR 0 9
44011: PUSH
44012: LD_INT 3
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44026: LD_VAR 0 6
44030: PPUSH
44031: CALL_OW 257
44035: PUSH
44036: LD_INT 5
44038: EQUAL
44039: IFFALSE 44060
// points := [ 130 , 5 , 2 ] ;
44041: LD_ADDR_VAR 0 9
44045: PUSH
44046: LD_INT 130
44048: PUSH
44049: LD_INT 5
44051: PUSH
44052: LD_INT 2
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: LIST
44059: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44060: LD_VAR 0 6
44064: PPUSH
44065: CALL_OW 257
44069: PUSH
44070: LD_INT 8
44072: EQUAL
44073: IFFALSE 44094
// points := [ 35 , 35 , 30 ] ;
44075: LD_ADDR_VAR 0 9
44079: PUSH
44080: LD_INT 35
44082: PUSH
44083: LD_INT 35
44085: PUSH
44086: LD_INT 30
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: LIST
44093: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44094: LD_VAR 0 6
44098: PPUSH
44099: CALL_OW 257
44103: PUSH
44104: LD_INT 9
44106: EQUAL
44107: IFFALSE 44128
// points := [ 20 , 55 , 40 ] ;
44109: LD_ADDR_VAR 0 9
44113: PUSH
44114: LD_INT 20
44116: PUSH
44117: LD_INT 55
44119: PUSH
44120: LD_INT 40
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: LIST
44127: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44128: LD_VAR 0 6
44132: PPUSH
44133: CALL_OW 257
44137: PUSH
44138: LD_INT 12
44140: PUSH
44141: LD_INT 16
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: IN
44148: IFFALSE 44169
// points := [ 5 , 3 , 2 ] ;
44150: LD_ADDR_VAR 0 9
44154: PUSH
44155: LD_INT 5
44157: PUSH
44158: LD_INT 3
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: LIST
44168: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44169: LD_VAR 0 6
44173: PPUSH
44174: CALL_OW 257
44178: PUSH
44179: LD_INT 17
44181: EQUAL
44182: IFFALSE 44203
// points := [ 100 , 50 , 75 ] ;
44184: LD_ADDR_VAR 0 9
44188: PUSH
44189: LD_INT 100
44191: PUSH
44192: LD_INT 50
44194: PUSH
44195: LD_INT 75
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: LIST
44202: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44203: LD_VAR 0 6
44207: PPUSH
44208: CALL_OW 257
44212: PUSH
44213: LD_INT 15
44215: EQUAL
44216: IFFALSE 44237
// points := [ 10 , 5 , 3 ] ;
44218: LD_ADDR_VAR 0 9
44222: PUSH
44223: LD_INT 10
44225: PUSH
44226: LD_INT 5
44228: PUSH
44229: LD_INT 3
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: LIST
44236: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44237: LD_VAR 0 6
44241: PPUSH
44242: CALL_OW 257
44246: PUSH
44247: LD_INT 14
44249: EQUAL
44250: IFFALSE 44271
// points := [ 10 , 0 , 0 ] ;
44252: LD_ADDR_VAR 0 9
44256: PUSH
44257: LD_INT 10
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: LIST
44270: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44271: LD_VAR 0 6
44275: PPUSH
44276: CALL_OW 257
44280: PUSH
44281: LD_INT 11
44283: EQUAL
44284: IFFALSE 44305
// points := [ 30 , 10 , 5 ] ;
44286: LD_ADDR_VAR 0 9
44290: PUSH
44291: LD_INT 30
44293: PUSH
44294: LD_INT 10
44296: PUSH
44297: LD_INT 5
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: LIST
44304: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44305: LD_VAR 0 1
44309: PPUSH
44310: LD_INT 5
44312: PPUSH
44313: CALL_OW 321
44317: PUSH
44318: LD_INT 2
44320: EQUAL
44321: IFFALSE 44338
// bpoints := bpoints * 1.8 ;
44323: LD_ADDR_VAR 0 10
44327: PUSH
44328: LD_VAR 0 10
44332: PUSH
44333: LD_REAL  1.80000000000000E+0000
44336: MUL
44337: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44338: LD_VAR 0 6
44342: PPUSH
44343: CALL_OW 257
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: LD_INT 3
44356: PUSH
44357: LD_INT 4
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: IN
44366: PUSH
44367: LD_VAR 0 1
44371: PPUSH
44372: LD_INT 51
44374: PPUSH
44375: CALL_OW 321
44379: PUSH
44380: LD_INT 2
44382: EQUAL
44383: AND
44384: IFFALSE 44401
// bpoints := bpoints * 1.2 ;
44386: LD_ADDR_VAR 0 10
44390: PUSH
44391: LD_VAR 0 10
44395: PUSH
44396: LD_REAL  1.20000000000000E+0000
44399: MUL
44400: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44401: LD_VAR 0 6
44405: PPUSH
44406: CALL_OW 257
44410: PUSH
44411: LD_INT 5
44413: PUSH
44414: LD_INT 7
44416: PUSH
44417: LD_INT 9
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: IN
44425: PUSH
44426: LD_VAR 0 1
44430: PPUSH
44431: LD_INT 52
44433: PPUSH
44434: CALL_OW 321
44438: PUSH
44439: LD_INT 2
44441: EQUAL
44442: AND
44443: IFFALSE 44460
// bpoints := bpoints * 1.5 ;
44445: LD_ADDR_VAR 0 10
44449: PUSH
44450: LD_VAR 0 10
44454: PUSH
44455: LD_REAL  1.50000000000000E+0000
44458: MUL
44459: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44460: LD_VAR 0 1
44464: PPUSH
44465: LD_INT 66
44467: PPUSH
44468: CALL_OW 321
44472: PUSH
44473: LD_INT 2
44475: EQUAL
44476: IFFALSE 44493
// bpoints := bpoints * 1.1 ;
44478: LD_ADDR_VAR 0 10
44482: PUSH
44483: LD_VAR 0 10
44487: PUSH
44488: LD_REAL  1.10000000000000E+0000
44491: MUL
44492: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44493: LD_ADDR_VAR 0 10
44497: PUSH
44498: LD_VAR 0 10
44502: PUSH
44503: LD_VAR 0 6
44507: PPUSH
44508: LD_INT 1
44510: PPUSH
44511: CALL_OW 259
44515: PUSH
44516: LD_REAL  1.15000000000000E+0000
44519: MUL
44520: MUL
44521: ST_TO_ADDR
// end ; unit_vehicle :
44522: GO 45352
44524: LD_INT 2
44526: DOUBLE
44527: EQUAL
44528: IFTRUE 44532
44530: GO 45340
44532: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44533: LD_VAR 0 6
44537: PPUSH
44538: CALL_OW 264
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: LD_INT 42
44548: PUSH
44549: LD_INT 24
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: IN
44557: IFFALSE 44578
// points := [ 25 , 5 , 3 ] ;
44559: LD_ADDR_VAR 0 9
44563: PUSH
44564: LD_INT 25
44566: PUSH
44567: LD_INT 5
44569: PUSH
44570: LD_INT 3
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: LIST
44577: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44578: LD_VAR 0 6
44582: PPUSH
44583: CALL_OW 264
44587: PUSH
44588: LD_INT 4
44590: PUSH
44591: LD_INT 43
44593: PUSH
44594: LD_INT 25
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: LIST
44601: IN
44602: IFFALSE 44623
// points := [ 40 , 15 , 5 ] ;
44604: LD_ADDR_VAR 0 9
44608: PUSH
44609: LD_INT 40
44611: PUSH
44612: LD_INT 15
44614: PUSH
44615: LD_INT 5
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: LIST
44622: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44623: LD_VAR 0 6
44627: PPUSH
44628: CALL_OW 264
44632: PUSH
44633: LD_INT 3
44635: PUSH
44636: LD_INT 23
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: IN
44643: IFFALSE 44664
// points := [ 7 , 25 , 8 ] ;
44645: LD_ADDR_VAR 0 9
44649: PUSH
44650: LD_INT 7
44652: PUSH
44653: LD_INT 25
44655: PUSH
44656: LD_INT 8
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44664: LD_VAR 0 6
44668: PPUSH
44669: CALL_OW 264
44673: PUSH
44674: LD_INT 5
44676: PUSH
44677: LD_INT 27
44679: PUSH
44680: LD_INT 44
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: IN
44688: IFFALSE 44709
// points := [ 14 , 50 , 16 ] ;
44690: LD_ADDR_VAR 0 9
44694: PUSH
44695: LD_INT 14
44697: PUSH
44698: LD_INT 50
44700: PUSH
44701: LD_INT 16
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: LIST
44708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44709: LD_VAR 0 6
44713: PPUSH
44714: CALL_OW 264
44718: PUSH
44719: LD_INT 6
44721: PUSH
44722: LD_INT 46
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: IN
44729: IFFALSE 44750
// points := [ 32 , 120 , 70 ] ;
44731: LD_ADDR_VAR 0 9
44735: PUSH
44736: LD_INT 32
44738: PUSH
44739: LD_INT 120
44741: PUSH
44742: LD_INT 70
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44750: LD_VAR 0 6
44754: PPUSH
44755: CALL_OW 264
44759: PUSH
44760: LD_INT 7
44762: PUSH
44763: LD_INT 28
44765: PUSH
44766: LD_INT 45
44768: PUSH
44769: LD_EXP 48
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: IN
44780: IFFALSE 44801
// points := [ 35 , 20 , 45 ] ;
44782: LD_ADDR_VAR 0 9
44786: PUSH
44787: LD_INT 35
44789: PUSH
44790: LD_INT 20
44792: PUSH
44793: LD_INT 45
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: LIST
44800: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44801: LD_VAR 0 6
44805: PPUSH
44806: CALL_OW 264
44810: PUSH
44811: LD_INT 47
44813: PUSH
44814: EMPTY
44815: LIST
44816: IN
44817: IFFALSE 44838
// points := [ 67 , 45 , 75 ] ;
44819: LD_ADDR_VAR 0 9
44823: PUSH
44824: LD_INT 67
44826: PUSH
44827: LD_INT 45
44829: PUSH
44830: LD_INT 75
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: LIST
44837: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44838: LD_VAR 0 6
44842: PPUSH
44843: CALL_OW 264
44847: PUSH
44848: LD_INT 26
44850: PUSH
44851: EMPTY
44852: LIST
44853: IN
44854: IFFALSE 44875
// points := [ 120 , 30 , 80 ] ;
44856: LD_ADDR_VAR 0 9
44860: PUSH
44861: LD_INT 120
44863: PUSH
44864: LD_INT 30
44866: PUSH
44867: LD_INT 80
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: LIST
44874: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44875: LD_VAR 0 6
44879: PPUSH
44880: CALL_OW 264
44884: PUSH
44885: LD_INT 22
44887: PUSH
44888: EMPTY
44889: LIST
44890: IN
44891: IFFALSE 44912
// points := [ 40 , 1 , 1 ] ;
44893: LD_ADDR_VAR 0 9
44897: PUSH
44898: LD_INT 40
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: LIST
44911: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44912: LD_VAR 0 6
44916: PPUSH
44917: CALL_OW 264
44921: PUSH
44922: LD_INT 29
44924: PUSH
44925: EMPTY
44926: LIST
44927: IN
44928: IFFALSE 44949
// points := [ 70 , 200 , 400 ] ;
44930: LD_ADDR_VAR 0 9
44934: PUSH
44935: LD_INT 70
44937: PUSH
44938: LD_INT 200
44940: PUSH
44941: LD_INT 400
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44949: LD_VAR 0 6
44953: PPUSH
44954: CALL_OW 264
44958: PUSH
44959: LD_INT 14
44961: PUSH
44962: LD_INT 53
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: IN
44969: IFFALSE 44990
// points := [ 40 , 10 , 20 ] ;
44971: LD_ADDR_VAR 0 9
44975: PUSH
44976: LD_INT 40
44978: PUSH
44979: LD_INT 10
44981: PUSH
44982: LD_INT 20
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: LIST
44989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44990: LD_VAR 0 6
44994: PPUSH
44995: CALL_OW 264
44999: PUSH
45000: LD_INT 9
45002: PUSH
45003: EMPTY
45004: LIST
45005: IN
45006: IFFALSE 45027
// points := [ 5 , 70 , 20 ] ;
45008: LD_ADDR_VAR 0 9
45012: PUSH
45013: LD_INT 5
45015: PUSH
45016: LD_INT 70
45018: PUSH
45019: LD_INT 20
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45027: LD_VAR 0 6
45031: PPUSH
45032: CALL_OW 264
45036: PUSH
45037: LD_INT 10
45039: PUSH
45040: EMPTY
45041: LIST
45042: IN
45043: IFFALSE 45064
// points := [ 35 , 110 , 70 ] ;
45045: LD_ADDR_VAR 0 9
45049: PUSH
45050: LD_INT 35
45052: PUSH
45053: LD_INT 110
45055: PUSH
45056: LD_INT 70
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: LIST
45063: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45064: LD_VAR 0 6
45068: PPUSH
45069: CALL_OW 265
45073: PUSH
45074: LD_INT 25
45076: EQUAL
45077: IFFALSE 45098
// points := [ 80 , 65 , 100 ] ;
45079: LD_ADDR_VAR 0 9
45083: PUSH
45084: LD_INT 80
45086: PUSH
45087: LD_INT 65
45089: PUSH
45090: LD_INT 100
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: LIST
45097: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45098: LD_VAR 0 6
45102: PPUSH
45103: CALL_OW 263
45107: PUSH
45108: LD_INT 1
45110: EQUAL
45111: IFFALSE 45146
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45113: LD_ADDR_VAR 0 10
45117: PUSH
45118: LD_VAR 0 10
45122: PUSH
45123: LD_VAR 0 6
45127: PPUSH
45128: CALL_OW 311
45132: PPUSH
45133: LD_INT 3
45135: PPUSH
45136: CALL_OW 259
45140: PUSH
45141: LD_INT 4
45143: MUL
45144: MUL
45145: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45146: LD_VAR 0 6
45150: PPUSH
45151: CALL_OW 263
45155: PUSH
45156: LD_INT 2
45158: EQUAL
45159: IFFALSE 45210
// begin j := IsControledBy ( i ) ;
45161: LD_ADDR_VAR 0 7
45165: PUSH
45166: LD_VAR 0 6
45170: PPUSH
45171: CALL_OW 312
45175: ST_TO_ADDR
// if j then
45176: LD_VAR 0 7
45180: IFFALSE 45210
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45182: LD_ADDR_VAR 0 10
45186: PUSH
45187: LD_VAR 0 10
45191: PUSH
45192: LD_VAR 0 7
45196: PPUSH
45197: LD_INT 3
45199: PPUSH
45200: CALL_OW 259
45204: PUSH
45205: LD_INT 3
45207: MUL
45208: MUL
45209: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45210: LD_VAR 0 6
45214: PPUSH
45215: CALL_OW 264
45219: PUSH
45220: LD_INT 5
45222: PUSH
45223: LD_INT 6
45225: PUSH
45226: LD_INT 46
45228: PUSH
45229: LD_INT 44
45231: PUSH
45232: LD_INT 47
45234: PUSH
45235: LD_INT 45
45237: PUSH
45238: LD_INT 28
45240: PUSH
45241: LD_INT 7
45243: PUSH
45244: LD_INT 27
45246: PUSH
45247: LD_INT 29
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: IN
45262: PUSH
45263: LD_VAR 0 1
45267: PPUSH
45268: LD_INT 52
45270: PPUSH
45271: CALL_OW 321
45275: PUSH
45276: LD_INT 2
45278: EQUAL
45279: AND
45280: IFFALSE 45297
// bpoints := bpoints * 1.2 ;
45282: LD_ADDR_VAR 0 10
45286: PUSH
45287: LD_VAR 0 10
45291: PUSH
45292: LD_REAL  1.20000000000000E+0000
45295: MUL
45296: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45297: LD_VAR 0 6
45301: PPUSH
45302: CALL_OW 264
45306: PUSH
45307: LD_INT 6
45309: PUSH
45310: LD_INT 46
45312: PUSH
45313: LD_INT 47
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: LIST
45320: IN
45321: IFFALSE 45338
// bpoints := bpoints * 1.2 ;
45323: LD_ADDR_VAR 0 10
45327: PUSH
45328: LD_VAR 0 10
45332: PUSH
45333: LD_REAL  1.20000000000000E+0000
45336: MUL
45337: ST_TO_ADDR
// end ; unit_building :
45338: GO 45352
45340: LD_INT 3
45342: DOUBLE
45343: EQUAL
45344: IFTRUE 45348
45346: GO 45351
45348: POP
// ; end ;
45349: GO 45352
45351: POP
// for j = 1 to 3 do
45352: LD_ADDR_VAR 0 7
45356: PUSH
45357: DOUBLE
45358: LD_INT 1
45360: DEC
45361: ST_TO_ADDR
45362: LD_INT 3
45364: PUSH
45365: FOR_TO
45366: IFFALSE 45419
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45368: LD_ADDR_VAR 0 5
45372: PUSH
45373: LD_VAR 0 5
45377: PPUSH
45378: LD_VAR 0 7
45382: PPUSH
45383: LD_VAR 0 5
45387: PUSH
45388: LD_VAR 0 7
45392: ARRAY
45393: PUSH
45394: LD_VAR 0 9
45398: PUSH
45399: LD_VAR 0 7
45403: ARRAY
45404: PUSH
45405: LD_VAR 0 10
45409: MUL
45410: PLUS
45411: PPUSH
45412: CALL_OW 1
45416: ST_TO_ADDR
45417: GO 45365
45419: POP
45420: POP
// end ;
45421: GO 43898
45423: POP
45424: POP
// result := Replace ( result , 4 , tmp ) ;
45425: LD_ADDR_VAR 0 5
45429: PUSH
45430: LD_VAR 0 5
45434: PPUSH
45435: LD_INT 4
45437: PPUSH
45438: LD_VAR 0 8
45442: PPUSH
45443: CALL_OW 1
45447: ST_TO_ADDR
// end ;
45448: LD_VAR 0 5
45452: RET
// export function DangerAtRange ( unit , range ) ; begin
45453: LD_INT 0
45455: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45456: LD_ADDR_VAR 0 3
45460: PUSH
45461: LD_VAR 0 1
45465: PPUSH
45466: CALL_OW 255
45470: PPUSH
45471: LD_VAR 0 1
45475: PPUSH
45476: CALL_OW 250
45480: PPUSH
45481: LD_VAR 0 1
45485: PPUSH
45486: CALL_OW 251
45490: PPUSH
45491: LD_VAR 0 2
45495: PPUSH
45496: CALL 43750 0 4
45500: ST_TO_ADDR
// end ;
45501: LD_VAR 0 3
45505: RET
// export function DangerInArea ( side , area ) ; begin
45506: LD_INT 0
45508: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45509: LD_ADDR_VAR 0 3
45513: PUSH
45514: LD_VAR 0 2
45518: PPUSH
45519: LD_INT 81
45521: PUSH
45522: LD_VAR 0 1
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PPUSH
45531: CALL_OW 70
45535: ST_TO_ADDR
// end ;
45536: LD_VAR 0 3
45540: RET
// export function IsExtension ( b ) ; begin
45541: LD_INT 0
45543: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45544: LD_ADDR_VAR 0 2
45548: PUSH
45549: LD_VAR 0 1
45553: PUSH
45554: LD_INT 23
45556: PUSH
45557: LD_INT 20
45559: PUSH
45560: LD_INT 22
45562: PUSH
45563: LD_INT 17
45565: PUSH
45566: LD_INT 24
45568: PUSH
45569: LD_INT 21
45571: PUSH
45572: LD_INT 19
45574: PUSH
45575: LD_INT 16
45577: PUSH
45578: LD_INT 25
45580: PUSH
45581: LD_INT 18
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: IN
45596: ST_TO_ADDR
// end ;
45597: LD_VAR 0 2
45601: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45602: LD_INT 0
45604: PPUSH
45605: PPUSH
45606: PPUSH
// result := [ ] ;
45607: LD_ADDR_VAR 0 4
45611: PUSH
45612: EMPTY
45613: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45614: LD_ADDR_VAR 0 5
45618: PUSH
45619: LD_VAR 0 2
45623: PPUSH
45624: LD_INT 21
45626: PUSH
45627: LD_INT 3
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PPUSH
45634: CALL_OW 70
45638: ST_TO_ADDR
// if not tmp then
45639: LD_VAR 0 5
45643: NOT
45644: IFFALSE 45648
// exit ;
45646: GO 45712
// if checkLink then
45648: LD_VAR 0 3
45652: IFFALSE 45702
// begin for i in tmp do
45654: LD_ADDR_VAR 0 6
45658: PUSH
45659: LD_VAR 0 5
45663: PUSH
45664: FOR_IN
45665: IFFALSE 45700
// if GetBase ( i ) <> base then
45667: LD_VAR 0 6
45671: PPUSH
45672: CALL_OW 274
45676: PUSH
45677: LD_VAR 0 1
45681: NONEQUAL
45682: IFFALSE 45698
// ComLinkToBase ( base , i ) ;
45684: LD_VAR 0 1
45688: PPUSH
45689: LD_VAR 0 6
45693: PPUSH
45694: CALL_OW 169
45698: GO 45664
45700: POP
45701: POP
// end ; result := tmp ;
45702: LD_ADDR_VAR 0 4
45706: PUSH
45707: LD_VAR 0 5
45711: ST_TO_ADDR
// end ;
45712: LD_VAR 0 4
45716: RET
// export function ComComplete ( units , b ) ; var i ; begin
45717: LD_INT 0
45719: PPUSH
45720: PPUSH
// if not units then
45721: LD_VAR 0 1
45725: NOT
45726: IFFALSE 45730
// exit ;
45728: GO 45820
// for i in units do
45730: LD_ADDR_VAR 0 4
45734: PUSH
45735: LD_VAR 0 1
45739: PUSH
45740: FOR_IN
45741: IFFALSE 45818
// if BuildingStatus ( b ) = bs_build then
45743: LD_VAR 0 2
45747: PPUSH
45748: CALL_OW 461
45752: PUSH
45753: LD_INT 1
45755: EQUAL
45756: IFFALSE 45816
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45758: LD_VAR 0 4
45762: PPUSH
45763: LD_STRING h
45765: PUSH
45766: LD_VAR 0 2
45770: PPUSH
45771: CALL_OW 250
45775: PUSH
45776: LD_VAR 0 2
45780: PPUSH
45781: CALL_OW 251
45785: PUSH
45786: LD_VAR 0 2
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: PUSH
45809: EMPTY
45810: LIST
45811: PPUSH
45812: CALL_OW 446
45816: GO 45740
45818: POP
45819: POP
// end ;
45820: LD_VAR 0 3
45824: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45825: LD_INT 0
45827: PPUSH
45828: PPUSH
45829: PPUSH
45830: PPUSH
45831: PPUSH
45832: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45833: LD_VAR 0 1
45837: NOT
45838: PUSH
45839: LD_VAR 0 1
45843: PPUSH
45844: CALL_OW 263
45848: PUSH
45849: LD_INT 2
45851: NONEQUAL
45852: OR
45853: IFFALSE 45857
// exit ;
45855: GO 46173
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45857: LD_ADDR_VAR 0 6
45861: PUSH
45862: LD_INT 22
45864: PUSH
45865: LD_VAR 0 1
45869: PPUSH
45870: CALL_OW 255
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: LD_INT 30
45884: PUSH
45885: LD_INT 36
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 34
45894: PUSH
45895: LD_INT 31
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: LIST
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PPUSH
45911: CALL_OW 69
45915: ST_TO_ADDR
// if not tmp then
45916: LD_VAR 0 6
45920: NOT
45921: IFFALSE 45925
// exit ;
45923: GO 46173
// result := [ ] ;
45925: LD_ADDR_VAR 0 2
45929: PUSH
45930: EMPTY
45931: ST_TO_ADDR
// for i in tmp do
45932: LD_ADDR_VAR 0 3
45936: PUSH
45937: LD_VAR 0 6
45941: PUSH
45942: FOR_IN
45943: IFFALSE 46014
// begin t := UnitsInside ( i ) ;
45945: LD_ADDR_VAR 0 4
45949: PUSH
45950: LD_VAR 0 3
45954: PPUSH
45955: CALL_OW 313
45959: ST_TO_ADDR
// if t then
45960: LD_VAR 0 4
45964: IFFALSE 46012
// for j in t do
45966: LD_ADDR_VAR 0 7
45970: PUSH
45971: LD_VAR 0 4
45975: PUSH
45976: FOR_IN
45977: IFFALSE 46010
// result := Replace ( result , result + 1 , j ) ;
45979: LD_ADDR_VAR 0 2
45983: PUSH
45984: LD_VAR 0 2
45988: PPUSH
45989: LD_VAR 0 2
45993: PUSH
45994: LD_INT 1
45996: PLUS
45997: PPUSH
45998: LD_VAR 0 7
46002: PPUSH
46003: CALL_OW 1
46007: ST_TO_ADDR
46008: GO 45976
46010: POP
46011: POP
// end ;
46012: GO 45942
46014: POP
46015: POP
// if not result then
46016: LD_VAR 0 2
46020: NOT
46021: IFFALSE 46025
// exit ;
46023: GO 46173
// mech := result [ 1 ] ;
46025: LD_ADDR_VAR 0 5
46029: PUSH
46030: LD_VAR 0 2
46034: PUSH
46035: LD_INT 1
46037: ARRAY
46038: ST_TO_ADDR
// if result > 1 then
46039: LD_VAR 0 2
46043: PUSH
46044: LD_INT 1
46046: GREATER
46047: IFFALSE 46159
// begin for i = 2 to result do
46049: LD_ADDR_VAR 0 3
46053: PUSH
46054: DOUBLE
46055: LD_INT 2
46057: DEC
46058: ST_TO_ADDR
46059: LD_VAR 0 2
46063: PUSH
46064: FOR_TO
46065: IFFALSE 46157
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46067: LD_ADDR_VAR 0 4
46071: PUSH
46072: LD_VAR 0 2
46076: PUSH
46077: LD_VAR 0 3
46081: ARRAY
46082: PPUSH
46083: LD_INT 3
46085: PPUSH
46086: CALL_OW 259
46090: PUSH
46091: LD_VAR 0 2
46095: PUSH
46096: LD_VAR 0 3
46100: ARRAY
46101: PPUSH
46102: CALL_OW 432
46106: MINUS
46107: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46108: LD_VAR 0 4
46112: PUSH
46113: LD_VAR 0 5
46117: PPUSH
46118: LD_INT 3
46120: PPUSH
46121: CALL_OW 259
46125: PUSH
46126: LD_VAR 0 5
46130: PPUSH
46131: CALL_OW 432
46135: MINUS
46136: GREATEREQUAL
46137: IFFALSE 46155
// mech := result [ i ] ;
46139: LD_ADDR_VAR 0 5
46143: PUSH
46144: LD_VAR 0 2
46148: PUSH
46149: LD_VAR 0 3
46153: ARRAY
46154: ST_TO_ADDR
// end ;
46155: GO 46064
46157: POP
46158: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46159: LD_VAR 0 1
46163: PPUSH
46164: LD_VAR 0 5
46168: PPUSH
46169: CALL_OW 135
// end ;
46173: LD_VAR 0 2
46177: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46178: LD_INT 0
46180: PPUSH
46181: PPUSH
46182: PPUSH
46183: PPUSH
46184: PPUSH
46185: PPUSH
46186: PPUSH
46187: PPUSH
46188: PPUSH
46189: PPUSH
46190: PPUSH
46191: PPUSH
46192: PPUSH
// result := [ ] ;
46193: LD_ADDR_VAR 0 7
46197: PUSH
46198: EMPTY
46199: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46200: LD_VAR 0 1
46204: PPUSH
46205: CALL_OW 266
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: IN
46220: NOT
46221: IFFALSE 46225
// exit ;
46223: GO 47859
// if name then
46225: LD_VAR 0 3
46229: IFFALSE 46245
// SetBName ( base_dep , name ) ;
46231: LD_VAR 0 1
46235: PPUSH
46236: LD_VAR 0 3
46240: PPUSH
46241: CALL_OW 500
// base := GetBase ( base_dep ) ;
46245: LD_ADDR_VAR 0 15
46249: PUSH
46250: LD_VAR 0 1
46254: PPUSH
46255: CALL_OW 274
46259: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46260: LD_ADDR_VAR 0 16
46264: PUSH
46265: LD_VAR 0 1
46269: PPUSH
46270: CALL_OW 255
46274: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46275: LD_ADDR_VAR 0 17
46279: PUSH
46280: LD_VAR 0 1
46284: PPUSH
46285: CALL_OW 248
46289: ST_TO_ADDR
// if sources then
46290: LD_VAR 0 5
46294: IFFALSE 46341
// for i = 1 to 3 do
46296: LD_ADDR_VAR 0 8
46300: PUSH
46301: DOUBLE
46302: LD_INT 1
46304: DEC
46305: ST_TO_ADDR
46306: LD_INT 3
46308: PUSH
46309: FOR_TO
46310: IFFALSE 46339
// AddResourceType ( base , i , sources [ i ] ) ;
46312: LD_VAR 0 15
46316: PPUSH
46317: LD_VAR 0 8
46321: PPUSH
46322: LD_VAR 0 5
46326: PUSH
46327: LD_VAR 0 8
46331: ARRAY
46332: PPUSH
46333: CALL_OW 276
46337: GO 46309
46339: POP
46340: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46341: LD_ADDR_VAR 0 18
46345: PUSH
46346: LD_VAR 0 15
46350: PPUSH
46351: LD_VAR 0 2
46355: PPUSH
46356: LD_INT 1
46358: PPUSH
46359: CALL 45602 0 3
46363: ST_TO_ADDR
// InitHc ;
46364: CALL_OW 19
// InitUc ;
46368: CALL_OW 18
// uc_side := side ;
46372: LD_ADDR_OWVAR 20
46376: PUSH
46377: LD_VAR 0 16
46381: ST_TO_ADDR
// uc_nation := nation ;
46382: LD_ADDR_OWVAR 21
46386: PUSH
46387: LD_VAR 0 17
46391: ST_TO_ADDR
// if buildings then
46392: LD_VAR 0 18
46396: IFFALSE 47718
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46398: LD_ADDR_VAR 0 19
46402: PUSH
46403: LD_VAR 0 18
46407: PPUSH
46408: LD_INT 2
46410: PUSH
46411: LD_INT 30
46413: PUSH
46414: LD_INT 29
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 30
46423: PUSH
46424: LD_INT 30
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: LIST
46435: PPUSH
46436: CALL_OW 72
46440: ST_TO_ADDR
// if tmp then
46441: LD_VAR 0 19
46445: IFFALSE 46493
// for i in tmp do
46447: LD_ADDR_VAR 0 8
46451: PUSH
46452: LD_VAR 0 19
46456: PUSH
46457: FOR_IN
46458: IFFALSE 46491
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46460: LD_VAR 0 8
46464: PPUSH
46465: CALL_OW 250
46469: PPUSH
46470: LD_VAR 0 8
46474: PPUSH
46475: CALL_OW 251
46479: PPUSH
46480: LD_VAR 0 16
46484: PPUSH
46485: CALL_OW 441
46489: GO 46457
46491: POP
46492: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46493: LD_VAR 0 18
46497: PPUSH
46498: LD_INT 2
46500: PUSH
46501: LD_INT 30
46503: PUSH
46504: LD_INT 32
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 30
46513: PUSH
46514: LD_INT 33
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: PPUSH
46526: CALL_OW 72
46530: IFFALSE 46618
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46532: LD_ADDR_VAR 0 8
46536: PUSH
46537: LD_VAR 0 18
46541: PPUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 30
46547: PUSH
46548: LD_INT 32
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 30
46557: PUSH
46558: LD_INT 33
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: PPUSH
46570: CALL_OW 72
46574: PUSH
46575: FOR_IN
46576: IFFALSE 46616
// begin if not GetBWeapon ( i ) then
46578: LD_VAR 0 8
46582: PPUSH
46583: CALL_OW 269
46587: NOT
46588: IFFALSE 46614
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46590: LD_VAR 0 8
46594: PPUSH
46595: LD_VAR 0 8
46599: PPUSH
46600: LD_VAR 0 2
46604: PPUSH
46605: CALL 47864 0 2
46609: PPUSH
46610: CALL_OW 431
// end ;
46614: GO 46575
46616: POP
46617: POP
// end ; for i = 1 to personel do
46618: LD_ADDR_VAR 0 8
46622: PUSH
46623: DOUBLE
46624: LD_INT 1
46626: DEC
46627: ST_TO_ADDR
46628: LD_VAR 0 6
46632: PUSH
46633: FOR_TO
46634: IFFALSE 47698
// begin if i > 4 then
46636: LD_VAR 0 8
46640: PUSH
46641: LD_INT 4
46643: GREATER
46644: IFFALSE 46648
// break ;
46646: GO 47698
// case i of 1 :
46648: LD_VAR 0 8
46652: PUSH
46653: LD_INT 1
46655: DOUBLE
46656: EQUAL
46657: IFTRUE 46661
46659: GO 46741
46661: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46662: LD_ADDR_VAR 0 12
46666: PUSH
46667: LD_VAR 0 18
46671: PPUSH
46672: LD_INT 22
46674: PUSH
46675: LD_VAR 0 16
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 58
46686: PUSH
46687: EMPTY
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: LD_INT 30
46695: PUSH
46696: LD_INT 32
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 30
46705: PUSH
46706: LD_INT 4
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 30
46715: PUSH
46716: LD_INT 5
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: LIST
46733: PPUSH
46734: CALL_OW 72
46738: ST_TO_ADDR
46739: GO 46963
46741: LD_INT 2
46743: DOUBLE
46744: EQUAL
46745: IFTRUE 46749
46747: GO 46811
46749: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46750: LD_ADDR_VAR 0 12
46754: PUSH
46755: LD_VAR 0 18
46759: PPUSH
46760: LD_INT 22
46762: PUSH
46763: LD_VAR 0 16
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: LD_INT 30
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 30
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: LIST
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PPUSH
46804: CALL_OW 72
46808: ST_TO_ADDR
46809: GO 46963
46811: LD_INT 3
46813: DOUBLE
46814: EQUAL
46815: IFTRUE 46819
46817: GO 46881
46819: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46820: LD_ADDR_VAR 0 12
46824: PUSH
46825: LD_VAR 0 18
46829: PPUSH
46830: LD_INT 22
46832: PUSH
46833: LD_VAR 0 16
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: LD_INT 30
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 30
46857: PUSH
46858: LD_INT 3
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: LIST
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PPUSH
46874: CALL_OW 72
46878: ST_TO_ADDR
46879: GO 46963
46881: LD_INT 4
46883: DOUBLE
46884: EQUAL
46885: IFTRUE 46889
46887: GO 46962
46889: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46890: LD_ADDR_VAR 0 12
46894: PUSH
46895: LD_VAR 0 18
46899: PPUSH
46900: LD_INT 22
46902: PUSH
46903: LD_VAR 0 16
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 30
46917: PUSH
46918: LD_INT 6
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 30
46927: PUSH
46928: LD_INT 7
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 30
46937: PUSH
46938: LD_INT 8
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PPUSH
46955: CALL_OW 72
46959: ST_TO_ADDR
46960: GO 46963
46962: POP
// if i = 1 then
46963: LD_VAR 0 8
46967: PUSH
46968: LD_INT 1
46970: EQUAL
46971: IFFALSE 47082
// begin tmp := [ ] ;
46973: LD_ADDR_VAR 0 19
46977: PUSH
46978: EMPTY
46979: ST_TO_ADDR
// for j in f do
46980: LD_ADDR_VAR 0 9
46984: PUSH
46985: LD_VAR 0 12
46989: PUSH
46990: FOR_IN
46991: IFFALSE 47064
// if GetBType ( j ) = b_bunker then
46993: LD_VAR 0 9
46997: PPUSH
46998: CALL_OW 266
47002: PUSH
47003: LD_INT 32
47005: EQUAL
47006: IFFALSE 47033
// tmp := Insert ( tmp , 1 , j ) else
47008: LD_ADDR_VAR 0 19
47012: PUSH
47013: LD_VAR 0 19
47017: PPUSH
47018: LD_INT 1
47020: PPUSH
47021: LD_VAR 0 9
47025: PPUSH
47026: CALL_OW 2
47030: ST_TO_ADDR
47031: GO 47062
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47033: LD_ADDR_VAR 0 19
47037: PUSH
47038: LD_VAR 0 19
47042: PPUSH
47043: LD_VAR 0 19
47047: PUSH
47048: LD_INT 1
47050: PLUS
47051: PPUSH
47052: LD_VAR 0 9
47056: PPUSH
47057: CALL_OW 2
47061: ST_TO_ADDR
47062: GO 46990
47064: POP
47065: POP
// if tmp then
47066: LD_VAR 0 19
47070: IFFALSE 47082
// f := tmp ;
47072: LD_ADDR_VAR 0 12
47076: PUSH
47077: LD_VAR 0 19
47081: ST_TO_ADDR
// end ; x := personel [ i ] ;
47082: LD_ADDR_VAR 0 13
47086: PUSH
47087: LD_VAR 0 6
47091: PUSH
47092: LD_VAR 0 8
47096: ARRAY
47097: ST_TO_ADDR
// if x = - 1 then
47098: LD_VAR 0 13
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: EQUAL
47107: IFFALSE 47316
// begin for j in f do
47109: LD_ADDR_VAR 0 9
47113: PUSH
47114: LD_VAR 0 12
47118: PUSH
47119: FOR_IN
47120: IFFALSE 47312
// repeat InitHc ;
47122: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47126: LD_VAR 0 9
47130: PPUSH
47131: CALL_OW 266
47135: PUSH
47136: LD_INT 5
47138: EQUAL
47139: IFFALSE 47209
// begin if UnitsInside ( j ) < 3 then
47141: LD_VAR 0 9
47145: PPUSH
47146: CALL_OW 313
47150: PUSH
47151: LD_INT 3
47153: LESS
47154: IFFALSE 47190
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47156: LD_INT 0
47158: PPUSH
47159: LD_INT 5
47161: PUSH
47162: LD_INT 8
47164: PUSH
47165: LD_INT 9
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: LIST
47172: PUSH
47173: LD_VAR 0 17
47177: ARRAY
47178: PPUSH
47179: LD_VAR 0 4
47183: PPUSH
47184: CALL_OW 380
47188: GO 47207
// PrepareHuman ( false , i , skill ) ;
47190: LD_INT 0
47192: PPUSH
47193: LD_VAR 0 8
47197: PPUSH
47198: LD_VAR 0 4
47202: PPUSH
47203: CALL_OW 380
// end else
47207: GO 47226
// PrepareHuman ( false , i , skill ) ;
47209: LD_INT 0
47211: PPUSH
47212: LD_VAR 0 8
47216: PPUSH
47217: LD_VAR 0 4
47221: PPUSH
47222: CALL_OW 380
// un := CreateHuman ;
47226: LD_ADDR_VAR 0 14
47230: PUSH
47231: CALL_OW 44
47235: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47236: LD_ADDR_VAR 0 7
47240: PUSH
47241: LD_VAR 0 7
47245: PPUSH
47246: LD_INT 1
47248: PPUSH
47249: LD_VAR 0 14
47253: PPUSH
47254: CALL_OW 2
47258: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47259: LD_VAR 0 14
47263: PPUSH
47264: LD_VAR 0 9
47268: PPUSH
47269: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47273: LD_VAR 0 9
47277: PPUSH
47278: CALL_OW 313
47282: PUSH
47283: LD_INT 6
47285: EQUAL
47286: PUSH
47287: LD_VAR 0 9
47291: PPUSH
47292: CALL_OW 266
47296: PUSH
47297: LD_INT 32
47299: PUSH
47300: LD_INT 31
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: IN
47307: OR
47308: IFFALSE 47122
47310: GO 47119
47312: POP
47313: POP
// end else
47314: GO 47696
// for j = 1 to x do
47316: LD_ADDR_VAR 0 9
47320: PUSH
47321: DOUBLE
47322: LD_INT 1
47324: DEC
47325: ST_TO_ADDR
47326: LD_VAR 0 13
47330: PUSH
47331: FOR_TO
47332: IFFALSE 47694
// begin InitHc ;
47334: CALL_OW 19
// if not f then
47338: LD_VAR 0 12
47342: NOT
47343: IFFALSE 47432
// begin PrepareHuman ( false , i , skill ) ;
47345: LD_INT 0
47347: PPUSH
47348: LD_VAR 0 8
47352: PPUSH
47353: LD_VAR 0 4
47357: PPUSH
47358: CALL_OW 380
// un := CreateHuman ;
47362: LD_ADDR_VAR 0 14
47366: PUSH
47367: CALL_OW 44
47371: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47372: LD_ADDR_VAR 0 7
47376: PUSH
47377: LD_VAR 0 7
47381: PPUSH
47382: LD_INT 1
47384: PPUSH
47385: LD_VAR 0 14
47389: PPUSH
47390: CALL_OW 2
47394: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47395: LD_VAR 0 14
47399: PPUSH
47400: LD_VAR 0 1
47404: PPUSH
47405: CALL_OW 250
47409: PPUSH
47410: LD_VAR 0 1
47414: PPUSH
47415: CALL_OW 251
47419: PPUSH
47420: LD_INT 10
47422: PPUSH
47423: LD_INT 0
47425: PPUSH
47426: CALL_OW 50
// continue ;
47430: GO 47331
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47432: LD_VAR 0 12
47436: PUSH
47437: LD_INT 1
47439: ARRAY
47440: PPUSH
47441: CALL_OW 313
47445: PUSH
47446: LD_VAR 0 12
47450: PUSH
47451: LD_INT 1
47453: ARRAY
47454: PPUSH
47455: CALL_OW 266
47459: PUSH
47460: LD_INT 32
47462: PUSH
47463: LD_INT 31
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: IN
47470: AND
47471: PUSH
47472: LD_VAR 0 12
47476: PUSH
47477: LD_INT 1
47479: ARRAY
47480: PPUSH
47481: CALL_OW 313
47485: PUSH
47486: LD_INT 6
47488: EQUAL
47489: OR
47490: IFFALSE 47510
// f := Delete ( f , 1 ) ;
47492: LD_ADDR_VAR 0 12
47496: PUSH
47497: LD_VAR 0 12
47501: PPUSH
47502: LD_INT 1
47504: PPUSH
47505: CALL_OW 3
47509: ST_TO_ADDR
// if not f then
47510: LD_VAR 0 12
47514: NOT
47515: IFFALSE 47533
// begin x := x + 2 ;
47517: LD_ADDR_VAR 0 13
47521: PUSH
47522: LD_VAR 0 13
47526: PUSH
47527: LD_INT 2
47529: PLUS
47530: ST_TO_ADDR
// continue ;
47531: GO 47331
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47533: LD_VAR 0 12
47537: PUSH
47538: LD_INT 1
47540: ARRAY
47541: PPUSH
47542: CALL_OW 266
47546: PUSH
47547: LD_INT 5
47549: EQUAL
47550: IFFALSE 47624
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47552: LD_VAR 0 12
47556: PUSH
47557: LD_INT 1
47559: ARRAY
47560: PPUSH
47561: CALL_OW 313
47565: PUSH
47566: LD_INT 3
47568: LESS
47569: IFFALSE 47605
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47571: LD_INT 0
47573: PPUSH
47574: LD_INT 5
47576: PUSH
47577: LD_INT 8
47579: PUSH
47580: LD_INT 9
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: LIST
47587: PUSH
47588: LD_VAR 0 17
47592: ARRAY
47593: PPUSH
47594: LD_VAR 0 4
47598: PPUSH
47599: CALL_OW 380
47603: GO 47622
// PrepareHuman ( false , i , skill ) ;
47605: LD_INT 0
47607: PPUSH
47608: LD_VAR 0 8
47612: PPUSH
47613: LD_VAR 0 4
47617: PPUSH
47618: CALL_OW 380
// end else
47622: GO 47641
// PrepareHuman ( false , i , skill ) ;
47624: LD_INT 0
47626: PPUSH
47627: LD_VAR 0 8
47631: PPUSH
47632: LD_VAR 0 4
47636: PPUSH
47637: CALL_OW 380
// un := CreateHuman ;
47641: LD_ADDR_VAR 0 14
47645: PUSH
47646: CALL_OW 44
47650: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47651: LD_ADDR_VAR 0 7
47655: PUSH
47656: LD_VAR 0 7
47660: PPUSH
47661: LD_INT 1
47663: PPUSH
47664: LD_VAR 0 14
47668: PPUSH
47669: CALL_OW 2
47673: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47674: LD_VAR 0 14
47678: PPUSH
47679: LD_VAR 0 12
47683: PUSH
47684: LD_INT 1
47686: ARRAY
47687: PPUSH
47688: CALL_OW 52
// end ;
47692: GO 47331
47694: POP
47695: POP
// end ;
47696: GO 46633
47698: POP
47699: POP
// result := result ^ buildings ;
47700: LD_ADDR_VAR 0 7
47704: PUSH
47705: LD_VAR 0 7
47709: PUSH
47710: LD_VAR 0 18
47714: ADD
47715: ST_TO_ADDR
// end else
47716: GO 47859
// begin for i = 1 to personel do
47718: LD_ADDR_VAR 0 8
47722: PUSH
47723: DOUBLE
47724: LD_INT 1
47726: DEC
47727: ST_TO_ADDR
47728: LD_VAR 0 6
47732: PUSH
47733: FOR_TO
47734: IFFALSE 47857
// begin if i > 4 then
47736: LD_VAR 0 8
47740: PUSH
47741: LD_INT 4
47743: GREATER
47744: IFFALSE 47748
// break ;
47746: GO 47857
// x := personel [ i ] ;
47748: LD_ADDR_VAR 0 13
47752: PUSH
47753: LD_VAR 0 6
47757: PUSH
47758: LD_VAR 0 8
47762: ARRAY
47763: ST_TO_ADDR
// if x = - 1 then
47764: LD_VAR 0 13
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: EQUAL
47773: IFFALSE 47777
// continue ;
47775: GO 47733
// PrepareHuman ( false , i , skill ) ;
47777: LD_INT 0
47779: PPUSH
47780: LD_VAR 0 8
47784: PPUSH
47785: LD_VAR 0 4
47789: PPUSH
47790: CALL_OW 380
// un := CreateHuman ;
47794: LD_ADDR_VAR 0 14
47798: PUSH
47799: CALL_OW 44
47803: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47804: LD_VAR 0 14
47808: PPUSH
47809: LD_VAR 0 1
47813: PPUSH
47814: CALL_OW 250
47818: PPUSH
47819: LD_VAR 0 1
47823: PPUSH
47824: CALL_OW 251
47828: PPUSH
47829: LD_INT 10
47831: PPUSH
47832: LD_INT 0
47834: PPUSH
47835: CALL_OW 50
// result := result ^ un ;
47839: LD_ADDR_VAR 0 7
47843: PUSH
47844: LD_VAR 0 7
47848: PUSH
47849: LD_VAR 0 14
47853: ADD
47854: ST_TO_ADDR
// end ;
47855: GO 47733
47857: POP
47858: POP
// end ; end ;
47859: LD_VAR 0 7
47863: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47864: LD_INT 0
47866: PPUSH
47867: PPUSH
47868: PPUSH
47869: PPUSH
47870: PPUSH
47871: PPUSH
47872: PPUSH
47873: PPUSH
47874: PPUSH
47875: PPUSH
47876: PPUSH
47877: PPUSH
47878: PPUSH
47879: PPUSH
47880: PPUSH
47881: PPUSH
// result := false ;
47882: LD_ADDR_VAR 0 3
47886: PUSH
47887: LD_INT 0
47889: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47890: LD_VAR 0 1
47894: NOT
47895: PUSH
47896: LD_VAR 0 1
47900: PPUSH
47901: CALL_OW 266
47905: PUSH
47906: LD_INT 32
47908: PUSH
47909: LD_INT 33
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: IN
47916: NOT
47917: OR
47918: IFFALSE 47922
// exit ;
47920: GO 49031
// nat := GetNation ( tower ) ;
47922: LD_ADDR_VAR 0 12
47926: PUSH
47927: LD_VAR 0 1
47931: PPUSH
47932: CALL_OW 248
47936: ST_TO_ADDR
// side := GetSide ( tower ) ;
47937: LD_ADDR_VAR 0 16
47941: PUSH
47942: LD_VAR 0 1
47946: PPUSH
47947: CALL_OW 255
47951: ST_TO_ADDR
// x := GetX ( tower ) ;
47952: LD_ADDR_VAR 0 10
47956: PUSH
47957: LD_VAR 0 1
47961: PPUSH
47962: CALL_OW 250
47966: ST_TO_ADDR
// y := GetY ( tower ) ;
47967: LD_ADDR_VAR 0 11
47971: PUSH
47972: LD_VAR 0 1
47976: PPUSH
47977: CALL_OW 251
47981: ST_TO_ADDR
// if not x or not y then
47982: LD_VAR 0 10
47986: NOT
47987: PUSH
47988: LD_VAR 0 11
47992: NOT
47993: OR
47994: IFFALSE 47998
// exit ;
47996: GO 49031
// weapon := 0 ;
47998: LD_ADDR_VAR 0 18
48002: PUSH
48003: LD_INT 0
48005: ST_TO_ADDR
// fac_list := [ ] ;
48006: LD_ADDR_VAR 0 17
48010: PUSH
48011: EMPTY
48012: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48013: LD_ADDR_VAR 0 6
48017: PUSH
48018: LD_VAR 0 1
48022: PPUSH
48023: CALL_OW 274
48027: PPUSH
48028: LD_VAR 0 2
48032: PPUSH
48033: LD_INT 0
48035: PPUSH
48036: CALL 45602 0 3
48040: PPUSH
48041: LD_INT 30
48043: PUSH
48044: LD_INT 3
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PPUSH
48051: CALL_OW 72
48055: ST_TO_ADDR
// if not factories then
48056: LD_VAR 0 6
48060: NOT
48061: IFFALSE 48065
// exit ;
48063: GO 49031
// for i in factories do
48065: LD_ADDR_VAR 0 8
48069: PUSH
48070: LD_VAR 0 6
48074: PUSH
48075: FOR_IN
48076: IFFALSE 48101
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48078: LD_ADDR_VAR 0 17
48082: PUSH
48083: LD_VAR 0 17
48087: PUSH
48088: LD_VAR 0 8
48092: PPUSH
48093: CALL_OW 478
48097: UNION
48098: ST_TO_ADDR
48099: GO 48075
48101: POP
48102: POP
// if not fac_list then
48103: LD_VAR 0 17
48107: NOT
48108: IFFALSE 48112
// exit ;
48110: GO 49031
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48112: LD_ADDR_VAR 0 5
48116: PUSH
48117: LD_INT 4
48119: PUSH
48120: LD_INT 5
48122: PUSH
48123: LD_INT 9
48125: PUSH
48126: LD_INT 10
48128: PUSH
48129: LD_INT 6
48131: PUSH
48132: LD_INT 7
48134: PUSH
48135: LD_INT 11
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 27
48149: PUSH
48150: LD_INT 28
48152: PUSH
48153: LD_INT 26
48155: PUSH
48156: LD_INT 30
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 43
48167: PUSH
48168: LD_INT 44
48170: PUSH
48171: LD_INT 46
48173: PUSH
48174: LD_INT 45
48176: PUSH
48177: LD_INT 47
48179: PUSH
48180: LD_INT 49
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: LIST
48195: PUSH
48196: LD_VAR 0 12
48200: ARRAY
48201: ST_TO_ADDR
// list := list isect fac_list ;
48202: LD_ADDR_VAR 0 5
48206: PUSH
48207: LD_VAR 0 5
48211: PUSH
48212: LD_VAR 0 17
48216: ISECT
48217: ST_TO_ADDR
// if not list then
48218: LD_VAR 0 5
48222: NOT
48223: IFFALSE 48227
// exit ;
48225: GO 49031
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48227: LD_VAR 0 12
48231: PUSH
48232: LD_INT 3
48234: EQUAL
48235: PUSH
48236: LD_INT 49
48238: PUSH
48239: LD_VAR 0 5
48243: IN
48244: AND
48245: PUSH
48246: LD_INT 31
48248: PPUSH
48249: LD_VAR 0 16
48253: PPUSH
48254: CALL_OW 321
48258: PUSH
48259: LD_INT 2
48261: EQUAL
48262: AND
48263: IFFALSE 48323
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48265: LD_INT 22
48267: PUSH
48268: LD_VAR 0 16
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 35
48279: PUSH
48280: LD_INT 49
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 91
48289: PUSH
48290: LD_VAR 0 1
48294: PUSH
48295: LD_INT 10
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: LIST
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: LIST
48307: PPUSH
48308: CALL_OW 69
48312: NOT
48313: IFFALSE 48323
// weapon := ru_time_lapser ;
48315: LD_ADDR_VAR 0 18
48319: PUSH
48320: LD_INT 49
48322: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48323: LD_VAR 0 12
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: IN
48338: PUSH
48339: LD_INT 11
48341: PUSH
48342: LD_VAR 0 5
48346: IN
48347: PUSH
48348: LD_INT 30
48350: PUSH
48351: LD_VAR 0 5
48355: IN
48356: OR
48357: AND
48358: PUSH
48359: LD_INT 6
48361: PPUSH
48362: LD_VAR 0 16
48366: PPUSH
48367: CALL_OW 321
48371: PUSH
48372: LD_INT 2
48374: EQUAL
48375: AND
48376: IFFALSE 48541
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48378: LD_INT 22
48380: PUSH
48381: LD_VAR 0 16
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: LD_INT 35
48395: PUSH
48396: LD_INT 11
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 35
48405: PUSH
48406: LD_INT 30
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 91
48420: PUSH
48421: LD_VAR 0 1
48425: PUSH
48426: LD_INT 18
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: LIST
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: LIST
48438: PPUSH
48439: CALL_OW 69
48443: NOT
48444: PUSH
48445: LD_INT 22
48447: PUSH
48448: LD_VAR 0 16
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: LD_INT 30
48462: PUSH
48463: LD_INT 32
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 30
48472: PUSH
48473: LD_INT 33
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 91
48487: PUSH
48488: LD_VAR 0 1
48492: PUSH
48493: LD_INT 12
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: LIST
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: LIST
48505: PUSH
48506: EMPTY
48507: LIST
48508: PPUSH
48509: CALL_OW 69
48513: PUSH
48514: LD_INT 2
48516: GREATER
48517: AND
48518: IFFALSE 48541
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48520: LD_ADDR_VAR 0 18
48524: PUSH
48525: LD_INT 11
48527: PUSH
48528: LD_INT 30
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_VAR 0 12
48539: ARRAY
48540: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48541: LD_VAR 0 18
48545: NOT
48546: PUSH
48547: LD_INT 40
48549: PPUSH
48550: LD_VAR 0 16
48554: PPUSH
48555: CALL_OW 321
48559: PUSH
48560: LD_INT 2
48562: EQUAL
48563: AND
48564: PUSH
48565: LD_INT 7
48567: PUSH
48568: LD_VAR 0 5
48572: IN
48573: PUSH
48574: LD_INT 28
48576: PUSH
48577: LD_VAR 0 5
48581: IN
48582: OR
48583: PUSH
48584: LD_INT 45
48586: PUSH
48587: LD_VAR 0 5
48591: IN
48592: OR
48593: AND
48594: IFFALSE 48848
// begin hex := GetHexInfo ( x , y ) ;
48596: LD_ADDR_VAR 0 4
48600: PUSH
48601: LD_VAR 0 10
48605: PPUSH
48606: LD_VAR 0 11
48610: PPUSH
48611: CALL_OW 546
48615: ST_TO_ADDR
// if hex [ 1 ] then
48616: LD_VAR 0 4
48620: PUSH
48621: LD_INT 1
48623: ARRAY
48624: IFFALSE 48628
// exit ;
48626: GO 49031
// height := hex [ 2 ] ;
48628: LD_ADDR_VAR 0 15
48632: PUSH
48633: LD_VAR 0 4
48637: PUSH
48638: LD_INT 2
48640: ARRAY
48641: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48642: LD_ADDR_VAR 0 14
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 3
48655: PUSH
48656: LD_INT 5
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: ST_TO_ADDR
// for i in tmp do
48665: LD_ADDR_VAR 0 8
48669: PUSH
48670: LD_VAR 0 14
48674: PUSH
48675: FOR_IN
48676: IFFALSE 48846
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48678: LD_ADDR_VAR 0 9
48682: PUSH
48683: LD_VAR 0 10
48687: PPUSH
48688: LD_VAR 0 8
48692: PPUSH
48693: LD_INT 5
48695: PPUSH
48696: CALL_OW 272
48700: PUSH
48701: LD_VAR 0 11
48705: PPUSH
48706: LD_VAR 0 8
48710: PPUSH
48711: LD_INT 5
48713: PPUSH
48714: CALL_OW 273
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48723: LD_VAR 0 9
48727: PUSH
48728: LD_INT 1
48730: ARRAY
48731: PPUSH
48732: LD_VAR 0 9
48736: PUSH
48737: LD_INT 2
48739: ARRAY
48740: PPUSH
48741: CALL_OW 488
48745: IFFALSE 48844
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48747: LD_ADDR_VAR 0 4
48751: PUSH
48752: LD_VAR 0 9
48756: PUSH
48757: LD_INT 1
48759: ARRAY
48760: PPUSH
48761: LD_VAR 0 9
48765: PUSH
48766: LD_INT 2
48768: ARRAY
48769: PPUSH
48770: CALL_OW 546
48774: ST_TO_ADDR
// if hex [ 1 ] then
48775: LD_VAR 0 4
48779: PUSH
48780: LD_INT 1
48782: ARRAY
48783: IFFALSE 48787
// continue ;
48785: GO 48675
// h := hex [ 2 ] ;
48787: LD_ADDR_VAR 0 13
48791: PUSH
48792: LD_VAR 0 4
48796: PUSH
48797: LD_INT 2
48799: ARRAY
48800: ST_TO_ADDR
// if h + 7 < height then
48801: LD_VAR 0 13
48805: PUSH
48806: LD_INT 7
48808: PLUS
48809: PUSH
48810: LD_VAR 0 15
48814: LESS
48815: IFFALSE 48844
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48817: LD_ADDR_VAR 0 18
48821: PUSH
48822: LD_INT 7
48824: PUSH
48825: LD_INT 28
48827: PUSH
48828: LD_INT 45
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: LIST
48835: PUSH
48836: LD_VAR 0 12
48840: ARRAY
48841: ST_TO_ADDR
// break ;
48842: GO 48846
// end ; end ; end ;
48844: GO 48675
48846: POP
48847: POP
// end ; if not weapon then
48848: LD_VAR 0 18
48852: NOT
48853: IFFALSE 48913
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48855: LD_ADDR_VAR 0 5
48859: PUSH
48860: LD_VAR 0 5
48864: PUSH
48865: LD_INT 11
48867: PUSH
48868: LD_INT 30
48870: PUSH
48871: LD_INT 49
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: LIST
48878: DIFF
48879: ST_TO_ADDR
// if not list then
48880: LD_VAR 0 5
48884: NOT
48885: IFFALSE 48889
// exit ;
48887: GO 49031
// weapon := list [ rand ( 1 , list ) ] ;
48889: LD_ADDR_VAR 0 18
48893: PUSH
48894: LD_VAR 0 5
48898: PUSH
48899: LD_INT 1
48901: PPUSH
48902: LD_VAR 0 5
48906: PPUSH
48907: CALL_OW 12
48911: ARRAY
48912: ST_TO_ADDR
// end ; if weapon then
48913: LD_VAR 0 18
48917: IFFALSE 49031
// begin tmp := CostOfWeapon ( weapon ) ;
48919: LD_ADDR_VAR 0 14
48923: PUSH
48924: LD_VAR 0 18
48928: PPUSH
48929: CALL_OW 451
48933: ST_TO_ADDR
// j := GetBase ( tower ) ;
48934: LD_ADDR_VAR 0 9
48938: PUSH
48939: LD_VAR 0 1
48943: PPUSH
48944: CALL_OW 274
48948: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48949: LD_VAR 0 9
48953: PPUSH
48954: LD_INT 1
48956: PPUSH
48957: CALL_OW 275
48961: PUSH
48962: LD_VAR 0 14
48966: PUSH
48967: LD_INT 1
48969: ARRAY
48970: GREATEREQUAL
48971: PUSH
48972: LD_VAR 0 9
48976: PPUSH
48977: LD_INT 2
48979: PPUSH
48980: CALL_OW 275
48984: PUSH
48985: LD_VAR 0 14
48989: PUSH
48990: LD_INT 2
48992: ARRAY
48993: GREATEREQUAL
48994: AND
48995: PUSH
48996: LD_VAR 0 9
49000: PPUSH
49001: LD_INT 3
49003: PPUSH
49004: CALL_OW 275
49008: PUSH
49009: LD_VAR 0 14
49013: PUSH
49014: LD_INT 3
49016: ARRAY
49017: GREATEREQUAL
49018: AND
49019: IFFALSE 49031
// result := weapon ;
49021: LD_ADDR_VAR 0 3
49025: PUSH
49026: LD_VAR 0 18
49030: ST_TO_ADDR
// end ; end ;
49031: LD_VAR 0 3
49035: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49036: LD_INT 0
49038: PPUSH
49039: PPUSH
// result := true ;
49040: LD_ADDR_VAR 0 3
49044: PUSH
49045: LD_INT 1
49047: ST_TO_ADDR
// if array1 = array2 then
49048: LD_VAR 0 1
49052: PUSH
49053: LD_VAR 0 2
49057: EQUAL
49058: IFFALSE 49118
// begin for i = 1 to array1 do
49060: LD_ADDR_VAR 0 4
49064: PUSH
49065: DOUBLE
49066: LD_INT 1
49068: DEC
49069: ST_TO_ADDR
49070: LD_VAR 0 1
49074: PUSH
49075: FOR_TO
49076: IFFALSE 49114
// if array1 [ i ] <> array2 [ i ] then
49078: LD_VAR 0 1
49082: PUSH
49083: LD_VAR 0 4
49087: ARRAY
49088: PUSH
49089: LD_VAR 0 2
49093: PUSH
49094: LD_VAR 0 4
49098: ARRAY
49099: NONEQUAL
49100: IFFALSE 49112
// begin result := false ;
49102: LD_ADDR_VAR 0 3
49106: PUSH
49107: LD_INT 0
49109: ST_TO_ADDR
// break ;
49110: GO 49114
// end ;
49112: GO 49075
49114: POP
49115: POP
// end else
49116: GO 49126
// result := false ;
49118: LD_ADDR_VAR 0 3
49122: PUSH
49123: LD_INT 0
49125: ST_TO_ADDR
// end ;
49126: LD_VAR 0 3
49130: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49131: LD_INT 0
49133: PPUSH
49134: PPUSH
// if not array1 or not array2 then
49135: LD_VAR 0 1
49139: NOT
49140: PUSH
49141: LD_VAR 0 2
49145: NOT
49146: OR
49147: IFFALSE 49151
// exit ;
49149: GO 49215
// result := true ;
49151: LD_ADDR_VAR 0 3
49155: PUSH
49156: LD_INT 1
49158: ST_TO_ADDR
// for i = 1 to array1 do
49159: LD_ADDR_VAR 0 4
49163: PUSH
49164: DOUBLE
49165: LD_INT 1
49167: DEC
49168: ST_TO_ADDR
49169: LD_VAR 0 1
49173: PUSH
49174: FOR_TO
49175: IFFALSE 49213
// if array1 [ i ] <> array2 [ i ] then
49177: LD_VAR 0 1
49181: PUSH
49182: LD_VAR 0 4
49186: ARRAY
49187: PUSH
49188: LD_VAR 0 2
49192: PUSH
49193: LD_VAR 0 4
49197: ARRAY
49198: NONEQUAL
49199: IFFALSE 49211
// begin result := false ;
49201: LD_ADDR_VAR 0 3
49205: PUSH
49206: LD_INT 0
49208: ST_TO_ADDR
// break ;
49209: GO 49213
// end ;
49211: GO 49174
49213: POP
49214: POP
// end ;
49215: LD_VAR 0 3
49219: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49220: LD_INT 0
49222: PPUSH
49223: PPUSH
49224: PPUSH
// pom := GetBase ( fac ) ;
49225: LD_ADDR_VAR 0 5
49229: PUSH
49230: LD_VAR 0 1
49234: PPUSH
49235: CALL_OW 274
49239: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49240: LD_ADDR_VAR 0 4
49244: PUSH
49245: LD_VAR 0 2
49249: PUSH
49250: LD_INT 1
49252: ARRAY
49253: PPUSH
49254: LD_VAR 0 2
49258: PUSH
49259: LD_INT 2
49261: ARRAY
49262: PPUSH
49263: LD_VAR 0 2
49267: PUSH
49268: LD_INT 3
49270: ARRAY
49271: PPUSH
49272: LD_VAR 0 2
49276: PUSH
49277: LD_INT 4
49279: ARRAY
49280: PPUSH
49281: CALL_OW 449
49285: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49286: LD_ADDR_VAR 0 3
49290: PUSH
49291: LD_VAR 0 5
49295: PPUSH
49296: LD_INT 1
49298: PPUSH
49299: CALL_OW 275
49303: PUSH
49304: LD_VAR 0 4
49308: PUSH
49309: LD_INT 1
49311: ARRAY
49312: GREATEREQUAL
49313: PUSH
49314: LD_VAR 0 5
49318: PPUSH
49319: LD_INT 2
49321: PPUSH
49322: CALL_OW 275
49326: PUSH
49327: LD_VAR 0 4
49331: PUSH
49332: LD_INT 2
49334: ARRAY
49335: GREATEREQUAL
49336: AND
49337: PUSH
49338: LD_VAR 0 5
49342: PPUSH
49343: LD_INT 3
49345: PPUSH
49346: CALL_OW 275
49350: PUSH
49351: LD_VAR 0 4
49355: PUSH
49356: LD_INT 3
49358: ARRAY
49359: GREATEREQUAL
49360: AND
49361: ST_TO_ADDR
// end ;
49362: LD_VAR 0 3
49366: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49367: LD_INT 0
49369: PPUSH
49370: PPUSH
49371: PPUSH
49372: PPUSH
// pom := GetBase ( building ) ;
49373: LD_ADDR_VAR 0 3
49377: PUSH
49378: LD_VAR 0 1
49382: PPUSH
49383: CALL_OW 274
49387: ST_TO_ADDR
// if not pom then
49388: LD_VAR 0 3
49392: NOT
49393: IFFALSE 49397
// exit ;
49395: GO 49567
// btype := GetBType ( building ) ;
49397: LD_ADDR_VAR 0 5
49401: PUSH
49402: LD_VAR 0 1
49406: PPUSH
49407: CALL_OW 266
49411: ST_TO_ADDR
// if btype = b_armoury then
49412: LD_VAR 0 5
49416: PUSH
49417: LD_INT 4
49419: EQUAL
49420: IFFALSE 49430
// btype := b_barracks ;
49422: LD_ADDR_VAR 0 5
49426: PUSH
49427: LD_INT 5
49429: ST_TO_ADDR
// if btype = b_depot then
49430: LD_VAR 0 5
49434: PUSH
49435: LD_INT 0
49437: EQUAL
49438: IFFALSE 49448
// btype := b_warehouse ;
49440: LD_ADDR_VAR 0 5
49444: PUSH
49445: LD_INT 1
49447: ST_TO_ADDR
// if btype = b_workshop then
49448: LD_VAR 0 5
49452: PUSH
49453: LD_INT 2
49455: EQUAL
49456: IFFALSE 49466
// btype := b_factory ;
49458: LD_ADDR_VAR 0 5
49462: PUSH
49463: LD_INT 3
49465: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49466: LD_ADDR_VAR 0 4
49470: PUSH
49471: LD_VAR 0 5
49475: PPUSH
49476: LD_VAR 0 1
49480: PPUSH
49481: CALL_OW 248
49485: PPUSH
49486: CALL_OW 450
49490: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49491: LD_ADDR_VAR 0 2
49495: PUSH
49496: LD_VAR 0 3
49500: PPUSH
49501: LD_INT 1
49503: PPUSH
49504: CALL_OW 275
49508: PUSH
49509: LD_VAR 0 4
49513: PUSH
49514: LD_INT 1
49516: ARRAY
49517: GREATEREQUAL
49518: PUSH
49519: LD_VAR 0 3
49523: PPUSH
49524: LD_INT 2
49526: PPUSH
49527: CALL_OW 275
49531: PUSH
49532: LD_VAR 0 4
49536: PUSH
49537: LD_INT 2
49539: ARRAY
49540: GREATEREQUAL
49541: AND
49542: PUSH
49543: LD_VAR 0 3
49547: PPUSH
49548: LD_INT 3
49550: PPUSH
49551: CALL_OW 275
49555: PUSH
49556: LD_VAR 0 4
49560: PUSH
49561: LD_INT 3
49563: ARRAY
49564: GREATEREQUAL
49565: AND
49566: ST_TO_ADDR
// end ;
49567: LD_VAR 0 2
49571: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49572: LD_INT 0
49574: PPUSH
49575: PPUSH
49576: PPUSH
// pom := GetBase ( building ) ;
49577: LD_ADDR_VAR 0 4
49581: PUSH
49582: LD_VAR 0 1
49586: PPUSH
49587: CALL_OW 274
49591: ST_TO_ADDR
// if not pom then
49592: LD_VAR 0 4
49596: NOT
49597: IFFALSE 49601
// exit ;
49599: GO 49702
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49601: LD_ADDR_VAR 0 5
49605: PUSH
49606: LD_VAR 0 2
49610: PPUSH
49611: LD_VAR 0 1
49615: PPUSH
49616: CALL_OW 248
49620: PPUSH
49621: CALL_OW 450
49625: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49626: LD_ADDR_VAR 0 3
49630: PUSH
49631: LD_VAR 0 4
49635: PPUSH
49636: LD_INT 1
49638: PPUSH
49639: CALL_OW 275
49643: PUSH
49644: LD_VAR 0 5
49648: PUSH
49649: LD_INT 1
49651: ARRAY
49652: GREATEREQUAL
49653: PUSH
49654: LD_VAR 0 4
49658: PPUSH
49659: LD_INT 2
49661: PPUSH
49662: CALL_OW 275
49666: PUSH
49667: LD_VAR 0 5
49671: PUSH
49672: LD_INT 2
49674: ARRAY
49675: GREATEREQUAL
49676: AND
49677: PUSH
49678: LD_VAR 0 4
49682: PPUSH
49683: LD_INT 3
49685: PPUSH
49686: CALL_OW 275
49690: PUSH
49691: LD_VAR 0 5
49695: PUSH
49696: LD_INT 3
49698: ARRAY
49699: GREATEREQUAL
49700: AND
49701: ST_TO_ADDR
// end ;
49702: LD_VAR 0 3
49706: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49707: LD_INT 0
49709: PPUSH
49710: PPUSH
49711: PPUSH
49712: PPUSH
49713: PPUSH
49714: PPUSH
49715: PPUSH
49716: PPUSH
49717: PPUSH
49718: PPUSH
49719: PPUSH
// result := false ;
49720: LD_ADDR_VAR 0 8
49724: PUSH
49725: LD_INT 0
49727: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49728: LD_VAR 0 5
49732: NOT
49733: PUSH
49734: LD_VAR 0 1
49738: NOT
49739: OR
49740: PUSH
49741: LD_VAR 0 2
49745: NOT
49746: OR
49747: PUSH
49748: LD_VAR 0 3
49752: NOT
49753: OR
49754: IFFALSE 49758
// exit ;
49756: GO 50572
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49758: LD_ADDR_VAR 0 14
49762: PUSH
49763: LD_VAR 0 1
49767: PPUSH
49768: LD_VAR 0 2
49772: PPUSH
49773: LD_VAR 0 3
49777: PPUSH
49778: LD_VAR 0 4
49782: PPUSH
49783: LD_VAR 0 5
49787: PUSH
49788: LD_INT 1
49790: ARRAY
49791: PPUSH
49792: CALL_OW 248
49796: PPUSH
49797: LD_INT 0
49799: PPUSH
49800: CALL 51809 0 6
49804: ST_TO_ADDR
// if not hexes then
49805: LD_VAR 0 14
49809: NOT
49810: IFFALSE 49814
// exit ;
49812: GO 50572
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49814: LD_ADDR_VAR 0 17
49818: PUSH
49819: LD_VAR 0 5
49823: PPUSH
49824: LD_INT 22
49826: PUSH
49827: LD_VAR 0 13
49831: PPUSH
49832: CALL_OW 255
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 30
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 30
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: LIST
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PPUSH
49873: CALL_OW 72
49877: ST_TO_ADDR
// for i = 1 to hexes do
49878: LD_ADDR_VAR 0 9
49882: PUSH
49883: DOUBLE
49884: LD_INT 1
49886: DEC
49887: ST_TO_ADDR
49888: LD_VAR 0 14
49892: PUSH
49893: FOR_TO
49894: IFFALSE 50570
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49896: LD_ADDR_VAR 0 13
49900: PUSH
49901: LD_VAR 0 14
49905: PUSH
49906: LD_VAR 0 9
49910: ARRAY
49911: PUSH
49912: LD_INT 1
49914: ARRAY
49915: PPUSH
49916: LD_VAR 0 14
49920: PUSH
49921: LD_VAR 0 9
49925: ARRAY
49926: PUSH
49927: LD_INT 2
49929: ARRAY
49930: PPUSH
49931: CALL_OW 428
49935: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49936: LD_VAR 0 14
49940: PUSH
49941: LD_VAR 0 9
49945: ARRAY
49946: PUSH
49947: LD_INT 1
49949: ARRAY
49950: PPUSH
49951: LD_VAR 0 14
49955: PUSH
49956: LD_VAR 0 9
49960: ARRAY
49961: PUSH
49962: LD_INT 2
49964: ARRAY
49965: PPUSH
49966: CALL_OW 351
49970: PUSH
49971: LD_VAR 0 14
49975: PUSH
49976: LD_VAR 0 9
49980: ARRAY
49981: PUSH
49982: LD_INT 1
49984: ARRAY
49985: PPUSH
49986: LD_VAR 0 14
49990: PUSH
49991: LD_VAR 0 9
49995: ARRAY
49996: PUSH
49997: LD_INT 2
49999: ARRAY
50000: PPUSH
50001: CALL_OW 488
50005: NOT
50006: OR
50007: PUSH
50008: LD_VAR 0 13
50012: PPUSH
50013: CALL_OW 247
50017: PUSH
50018: LD_INT 3
50020: EQUAL
50021: OR
50022: IFFALSE 50028
// exit ;
50024: POP
50025: POP
50026: GO 50572
// if not tmp then
50028: LD_VAR 0 13
50032: NOT
50033: IFFALSE 50037
// continue ;
50035: GO 49893
// result := true ;
50037: LD_ADDR_VAR 0 8
50041: PUSH
50042: LD_INT 1
50044: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50045: LD_VAR 0 6
50049: PUSH
50050: LD_VAR 0 13
50054: PPUSH
50055: CALL_OW 247
50059: PUSH
50060: LD_INT 2
50062: EQUAL
50063: AND
50064: PUSH
50065: LD_VAR 0 13
50069: PPUSH
50070: CALL_OW 263
50074: PUSH
50075: LD_INT 1
50077: EQUAL
50078: AND
50079: IFFALSE 50243
// begin if IsDrivenBy ( tmp ) then
50081: LD_VAR 0 13
50085: PPUSH
50086: CALL_OW 311
50090: IFFALSE 50094
// continue ;
50092: GO 49893
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50094: LD_VAR 0 6
50098: PPUSH
50099: LD_INT 3
50101: PUSH
50102: LD_INT 60
50104: PUSH
50105: EMPTY
50106: LIST
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 3
50114: PUSH
50115: LD_INT 55
50117: PUSH
50118: EMPTY
50119: LIST
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PPUSH
50129: CALL_OW 72
50133: IFFALSE 50241
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50135: LD_ADDR_VAR 0 18
50139: PUSH
50140: LD_VAR 0 6
50144: PPUSH
50145: LD_INT 3
50147: PUSH
50148: LD_INT 60
50150: PUSH
50151: EMPTY
50152: LIST
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 3
50160: PUSH
50161: LD_INT 55
50163: PUSH
50164: EMPTY
50165: LIST
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PPUSH
50175: CALL_OW 72
50179: PUSH
50180: LD_INT 1
50182: ARRAY
50183: ST_TO_ADDR
// if IsInUnit ( driver ) then
50184: LD_VAR 0 18
50188: PPUSH
50189: CALL_OW 310
50193: IFFALSE 50204
// ComExit ( driver ) ;
50195: LD_VAR 0 18
50199: PPUSH
50200: CALL 74993 0 1
// AddComEnterUnit ( driver , tmp ) ;
50204: LD_VAR 0 18
50208: PPUSH
50209: LD_VAR 0 13
50213: PPUSH
50214: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50218: LD_VAR 0 18
50222: PPUSH
50223: LD_VAR 0 7
50227: PPUSH
50228: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50232: LD_VAR 0 18
50236: PPUSH
50237: CALL_OW 181
// end ; continue ;
50241: GO 49893
// end ; if not cleaners or not tmp in cleaners then
50243: LD_VAR 0 6
50247: NOT
50248: PUSH
50249: LD_VAR 0 13
50253: PUSH
50254: LD_VAR 0 6
50258: IN
50259: NOT
50260: OR
50261: IFFALSE 50568
// begin if dep then
50263: LD_VAR 0 17
50267: IFFALSE 50403
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50269: LD_ADDR_VAR 0 16
50273: PUSH
50274: LD_VAR 0 17
50278: PUSH
50279: LD_INT 1
50281: ARRAY
50282: PPUSH
50283: CALL_OW 250
50287: PPUSH
50288: LD_VAR 0 17
50292: PUSH
50293: LD_INT 1
50295: ARRAY
50296: PPUSH
50297: CALL_OW 254
50301: PPUSH
50302: LD_INT 5
50304: PPUSH
50305: CALL_OW 272
50309: PUSH
50310: LD_VAR 0 17
50314: PUSH
50315: LD_INT 1
50317: ARRAY
50318: PPUSH
50319: CALL_OW 251
50323: PPUSH
50324: LD_VAR 0 17
50328: PUSH
50329: LD_INT 1
50331: ARRAY
50332: PPUSH
50333: CALL_OW 254
50337: PPUSH
50338: LD_INT 5
50340: PPUSH
50341: CALL_OW 273
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50350: LD_VAR 0 16
50354: PUSH
50355: LD_INT 1
50357: ARRAY
50358: PPUSH
50359: LD_VAR 0 16
50363: PUSH
50364: LD_INT 2
50366: ARRAY
50367: PPUSH
50368: CALL_OW 488
50372: IFFALSE 50403
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50374: LD_VAR 0 13
50378: PPUSH
50379: LD_VAR 0 16
50383: PUSH
50384: LD_INT 1
50386: ARRAY
50387: PPUSH
50388: LD_VAR 0 16
50392: PUSH
50393: LD_INT 2
50395: ARRAY
50396: PPUSH
50397: CALL_OW 111
// continue ;
50401: GO 49893
// end ; end ; r := GetDir ( tmp ) ;
50403: LD_ADDR_VAR 0 15
50407: PUSH
50408: LD_VAR 0 13
50412: PPUSH
50413: CALL_OW 254
50417: ST_TO_ADDR
// if r = 5 then
50418: LD_VAR 0 15
50422: PUSH
50423: LD_INT 5
50425: EQUAL
50426: IFFALSE 50436
// r := 0 ;
50428: LD_ADDR_VAR 0 15
50432: PUSH
50433: LD_INT 0
50435: ST_TO_ADDR
// for j = r to 5 do
50436: LD_ADDR_VAR 0 10
50440: PUSH
50441: DOUBLE
50442: LD_VAR 0 15
50446: DEC
50447: ST_TO_ADDR
50448: LD_INT 5
50450: PUSH
50451: FOR_TO
50452: IFFALSE 50566
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50454: LD_ADDR_VAR 0 11
50458: PUSH
50459: LD_VAR 0 13
50463: PPUSH
50464: CALL_OW 250
50468: PPUSH
50469: LD_VAR 0 10
50473: PPUSH
50474: LD_INT 2
50476: PPUSH
50477: CALL_OW 272
50481: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50482: LD_ADDR_VAR 0 12
50486: PUSH
50487: LD_VAR 0 13
50491: PPUSH
50492: CALL_OW 251
50496: PPUSH
50497: LD_VAR 0 10
50501: PPUSH
50502: LD_INT 2
50504: PPUSH
50505: CALL_OW 273
50509: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50510: LD_VAR 0 11
50514: PPUSH
50515: LD_VAR 0 12
50519: PPUSH
50520: CALL_OW 488
50524: PUSH
50525: LD_VAR 0 11
50529: PPUSH
50530: LD_VAR 0 12
50534: PPUSH
50535: CALL_OW 428
50539: NOT
50540: AND
50541: IFFALSE 50564
// begin ComMoveXY ( tmp , _x , _y ) ;
50543: LD_VAR 0 13
50547: PPUSH
50548: LD_VAR 0 11
50552: PPUSH
50553: LD_VAR 0 12
50557: PPUSH
50558: CALL_OW 111
// break ;
50562: GO 50566
// end ; end ;
50564: GO 50451
50566: POP
50567: POP
// end ; end ;
50568: GO 49893
50570: POP
50571: POP
// end ;
50572: LD_VAR 0 8
50576: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50577: LD_INT 0
50579: PPUSH
// result := true ;
50580: LD_ADDR_VAR 0 3
50584: PUSH
50585: LD_INT 1
50587: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50588: LD_VAR 0 2
50592: PUSH
50593: LD_INT 24
50595: DOUBLE
50596: EQUAL
50597: IFTRUE 50607
50599: LD_INT 33
50601: DOUBLE
50602: EQUAL
50603: IFTRUE 50607
50605: GO 50632
50607: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50608: LD_ADDR_VAR 0 3
50612: PUSH
50613: LD_INT 32
50615: PPUSH
50616: LD_VAR 0 1
50620: PPUSH
50621: CALL_OW 321
50625: PUSH
50626: LD_INT 2
50628: EQUAL
50629: ST_TO_ADDR
50630: GO 50952
50632: LD_INT 20
50634: DOUBLE
50635: EQUAL
50636: IFTRUE 50640
50638: GO 50665
50640: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50641: LD_ADDR_VAR 0 3
50645: PUSH
50646: LD_INT 6
50648: PPUSH
50649: LD_VAR 0 1
50653: PPUSH
50654: CALL_OW 321
50658: PUSH
50659: LD_INT 2
50661: EQUAL
50662: ST_TO_ADDR
50663: GO 50952
50665: LD_INT 22
50667: DOUBLE
50668: EQUAL
50669: IFTRUE 50679
50671: LD_INT 36
50673: DOUBLE
50674: EQUAL
50675: IFTRUE 50679
50677: GO 50704
50679: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50680: LD_ADDR_VAR 0 3
50684: PUSH
50685: LD_INT 15
50687: PPUSH
50688: LD_VAR 0 1
50692: PPUSH
50693: CALL_OW 321
50697: PUSH
50698: LD_INT 2
50700: EQUAL
50701: ST_TO_ADDR
50702: GO 50952
50704: LD_INT 30
50706: DOUBLE
50707: EQUAL
50708: IFTRUE 50712
50710: GO 50737
50712: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50713: LD_ADDR_VAR 0 3
50717: PUSH
50718: LD_INT 20
50720: PPUSH
50721: LD_VAR 0 1
50725: PPUSH
50726: CALL_OW 321
50730: PUSH
50731: LD_INT 2
50733: EQUAL
50734: ST_TO_ADDR
50735: GO 50952
50737: LD_INT 28
50739: DOUBLE
50740: EQUAL
50741: IFTRUE 50751
50743: LD_INT 21
50745: DOUBLE
50746: EQUAL
50747: IFTRUE 50751
50749: GO 50776
50751: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50752: LD_ADDR_VAR 0 3
50756: PUSH
50757: LD_INT 21
50759: PPUSH
50760: LD_VAR 0 1
50764: PPUSH
50765: CALL_OW 321
50769: PUSH
50770: LD_INT 2
50772: EQUAL
50773: ST_TO_ADDR
50774: GO 50952
50776: LD_INT 16
50778: DOUBLE
50779: EQUAL
50780: IFTRUE 50784
50782: GO 50811
50784: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50785: LD_ADDR_VAR 0 3
50789: PUSH
50790: LD_EXP 55
50794: PPUSH
50795: LD_VAR 0 1
50799: PPUSH
50800: CALL_OW 321
50804: PUSH
50805: LD_INT 2
50807: EQUAL
50808: ST_TO_ADDR
50809: GO 50952
50811: LD_INT 19
50813: DOUBLE
50814: EQUAL
50815: IFTRUE 50825
50817: LD_INT 23
50819: DOUBLE
50820: EQUAL
50821: IFTRUE 50825
50823: GO 50852
50825: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50826: LD_ADDR_VAR 0 3
50830: PUSH
50831: LD_EXP 54
50835: PPUSH
50836: LD_VAR 0 1
50840: PPUSH
50841: CALL_OW 321
50845: PUSH
50846: LD_INT 2
50848: EQUAL
50849: ST_TO_ADDR
50850: GO 50952
50852: LD_INT 17
50854: DOUBLE
50855: EQUAL
50856: IFTRUE 50860
50858: GO 50885
50860: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50861: LD_ADDR_VAR 0 3
50865: PUSH
50866: LD_INT 39
50868: PPUSH
50869: LD_VAR 0 1
50873: PPUSH
50874: CALL_OW 321
50878: PUSH
50879: LD_INT 2
50881: EQUAL
50882: ST_TO_ADDR
50883: GO 50952
50885: LD_INT 18
50887: DOUBLE
50888: EQUAL
50889: IFTRUE 50893
50891: GO 50918
50893: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50894: LD_ADDR_VAR 0 3
50898: PUSH
50899: LD_INT 40
50901: PPUSH
50902: LD_VAR 0 1
50906: PPUSH
50907: CALL_OW 321
50911: PUSH
50912: LD_INT 2
50914: EQUAL
50915: ST_TO_ADDR
50916: GO 50952
50918: LD_INT 27
50920: DOUBLE
50921: EQUAL
50922: IFTRUE 50926
50924: GO 50951
50926: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50927: LD_ADDR_VAR 0 3
50931: PUSH
50932: LD_INT 35
50934: PPUSH
50935: LD_VAR 0 1
50939: PPUSH
50940: CALL_OW 321
50944: PUSH
50945: LD_INT 2
50947: EQUAL
50948: ST_TO_ADDR
50949: GO 50952
50951: POP
// end ;
50952: LD_VAR 0 3
50956: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50957: LD_INT 0
50959: PPUSH
50960: PPUSH
50961: PPUSH
50962: PPUSH
50963: PPUSH
50964: PPUSH
50965: PPUSH
50966: PPUSH
50967: PPUSH
50968: PPUSH
50969: PPUSH
// result := false ;
50970: LD_ADDR_VAR 0 6
50974: PUSH
50975: LD_INT 0
50977: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50978: LD_VAR 0 1
50982: NOT
50983: PUSH
50984: LD_VAR 0 1
50988: PPUSH
50989: CALL_OW 266
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: IN
51004: NOT
51005: OR
51006: PUSH
51007: LD_VAR 0 2
51011: NOT
51012: OR
51013: PUSH
51014: LD_VAR 0 5
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: LD_INT 4
51033: PUSH
51034: LD_INT 5
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: IN
51045: NOT
51046: OR
51047: PUSH
51048: LD_VAR 0 3
51052: PPUSH
51053: LD_VAR 0 4
51057: PPUSH
51058: CALL_OW 488
51062: NOT
51063: OR
51064: IFFALSE 51068
// exit ;
51066: GO 51804
// side := GetSide ( depot ) ;
51068: LD_ADDR_VAR 0 9
51072: PUSH
51073: LD_VAR 0 1
51077: PPUSH
51078: CALL_OW 255
51082: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51083: LD_VAR 0 9
51087: PPUSH
51088: LD_VAR 0 2
51092: PPUSH
51093: CALL 50577 0 2
51097: NOT
51098: IFFALSE 51102
// exit ;
51100: GO 51804
// pom := GetBase ( depot ) ;
51102: LD_ADDR_VAR 0 10
51106: PUSH
51107: LD_VAR 0 1
51111: PPUSH
51112: CALL_OW 274
51116: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51117: LD_ADDR_VAR 0 11
51121: PUSH
51122: LD_VAR 0 2
51126: PPUSH
51127: LD_VAR 0 1
51131: PPUSH
51132: CALL_OW 248
51136: PPUSH
51137: CALL_OW 450
51141: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51142: LD_VAR 0 10
51146: PPUSH
51147: LD_INT 1
51149: PPUSH
51150: CALL_OW 275
51154: PUSH
51155: LD_VAR 0 11
51159: PUSH
51160: LD_INT 1
51162: ARRAY
51163: GREATEREQUAL
51164: PUSH
51165: LD_VAR 0 10
51169: PPUSH
51170: LD_INT 2
51172: PPUSH
51173: CALL_OW 275
51177: PUSH
51178: LD_VAR 0 11
51182: PUSH
51183: LD_INT 2
51185: ARRAY
51186: GREATEREQUAL
51187: AND
51188: PUSH
51189: LD_VAR 0 10
51193: PPUSH
51194: LD_INT 3
51196: PPUSH
51197: CALL_OW 275
51201: PUSH
51202: LD_VAR 0 11
51206: PUSH
51207: LD_INT 3
51209: ARRAY
51210: GREATEREQUAL
51211: AND
51212: NOT
51213: IFFALSE 51217
// exit ;
51215: GO 51804
// if GetBType ( depot ) = b_depot then
51217: LD_VAR 0 1
51221: PPUSH
51222: CALL_OW 266
51226: PUSH
51227: LD_INT 0
51229: EQUAL
51230: IFFALSE 51242
// dist := 28 else
51232: LD_ADDR_VAR 0 14
51236: PUSH
51237: LD_INT 28
51239: ST_TO_ADDR
51240: GO 51250
// dist := 36 ;
51242: LD_ADDR_VAR 0 14
51246: PUSH
51247: LD_INT 36
51249: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51250: LD_VAR 0 1
51254: PPUSH
51255: LD_VAR 0 3
51259: PPUSH
51260: LD_VAR 0 4
51264: PPUSH
51265: CALL_OW 297
51269: PUSH
51270: LD_VAR 0 14
51274: GREATER
51275: IFFALSE 51279
// exit ;
51277: GO 51804
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51279: LD_ADDR_VAR 0 12
51283: PUSH
51284: LD_VAR 0 2
51288: PPUSH
51289: LD_VAR 0 3
51293: PPUSH
51294: LD_VAR 0 4
51298: PPUSH
51299: LD_VAR 0 5
51303: PPUSH
51304: LD_VAR 0 1
51308: PPUSH
51309: CALL_OW 248
51313: PPUSH
51314: LD_INT 0
51316: PPUSH
51317: CALL 51809 0 6
51321: ST_TO_ADDR
// if not hexes then
51322: LD_VAR 0 12
51326: NOT
51327: IFFALSE 51331
// exit ;
51329: GO 51804
// hex := GetHexInfo ( x , y ) ;
51331: LD_ADDR_VAR 0 15
51335: PUSH
51336: LD_VAR 0 3
51340: PPUSH
51341: LD_VAR 0 4
51345: PPUSH
51346: CALL_OW 546
51350: ST_TO_ADDR
// if hex [ 1 ] then
51351: LD_VAR 0 15
51355: PUSH
51356: LD_INT 1
51358: ARRAY
51359: IFFALSE 51363
// exit ;
51361: GO 51804
// height := hex [ 2 ] ;
51363: LD_ADDR_VAR 0 13
51367: PUSH
51368: LD_VAR 0 15
51372: PUSH
51373: LD_INT 2
51375: ARRAY
51376: ST_TO_ADDR
// for i = 1 to hexes do
51377: LD_ADDR_VAR 0 7
51381: PUSH
51382: DOUBLE
51383: LD_INT 1
51385: DEC
51386: ST_TO_ADDR
51387: LD_VAR 0 12
51391: PUSH
51392: FOR_TO
51393: IFFALSE 51723
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51395: LD_VAR 0 12
51399: PUSH
51400: LD_VAR 0 7
51404: ARRAY
51405: PUSH
51406: LD_INT 1
51408: ARRAY
51409: PPUSH
51410: LD_VAR 0 12
51414: PUSH
51415: LD_VAR 0 7
51419: ARRAY
51420: PUSH
51421: LD_INT 2
51423: ARRAY
51424: PPUSH
51425: CALL_OW 488
51429: NOT
51430: PUSH
51431: LD_VAR 0 12
51435: PUSH
51436: LD_VAR 0 7
51440: ARRAY
51441: PUSH
51442: LD_INT 1
51444: ARRAY
51445: PPUSH
51446: LD_VAR 0 12
51450: PUSH
51451: LD_VAR 0 7
51455: ARRAY
51456: PUSH
51457: LD_INT 2
51459: ARRAY
51460: PPUSH
51461: CALL_OW 428
51465: PUSH
51466: LD_INT 0
51468: GREATER
51469: OR
51470: PUSH
51471: LD_VAR 0 12
51475: PUSH
51476: LD_VAR 0 7
51480: ARRAY
51481: PUSH
51482: LD_INT 1
51484: ARRAY
51485: PPUSH
51486: LD_VAR 0 12
51490: PUSH
51491: LD_VAR 0 7
51495: ARRAY
51496: PUSH
51497: LD_INT 2
51499: ARRAY
51500: PPUSH
51501: CALL_OW 351
51505: OR
51506: IFFALSE 51512
// exit ;
51508: POP
51509: POP
51510: GO 51804
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51512: LD_ADDR_VAR 0 8
51516: PUSH
51517: LD_VAR 0 12
51521: PUSH
51522: LD_VAR 0 7
51526: ARRAY
51527: PUSH
51528: LD_INT 1
51530: ARRAY
51531: PPUSH
51532: LD_VAR 0 12
51536: PUSH
51537: LD_VAR 0 7
51541: ARRAY
51542: PUSH
51543: LD_INT 2
51545: ARRAY
51546: PPUSH
51547: CALL_OW 546
51551: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51552: LD_VAR 0 8
51556: PUSH
51557: LD_INT 1
51559: ARRAY
51560: PUSH
51561: LD_VAR 0 8
51565: PUSH
51566: LD_INT 2
51568: ARRAY
51569: PUSH
51570: LD_VAR 0 13
51574: PUSH
51575: LD_INT 2
51577: PLUS
51578: GREATER
51579: OR
51580: PUSH
51581: LD_VAR 0 8
51585: PUSH
51586: LD_INT 2
51588: ARRAY
51589: PUSH
51590: LD_VAR 0 13
51594: PUSH
51595: LD_INT 2
51597: MINUS
51598: LESS
51599: OR
51600: PUSH
51601: LD_VAR 0 8
51605: PUSH
51606: LD_INT 3
51608: ARRAY
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 8
51615: PUSH
51616: LD_INT 9
51618: PUSH
51619: LD_INT 10
51621: PUSH
51622: LD_INT 11
51624: PUSH
51625: LD_INT 12
51627: PUSH
51628: LD_INT 13
51630: PUSH
51631: LD_INT 16
51633: PUSH
51634: LD_INT 17
51636: PUSH
51637: LD_INT 18
51639: PUSH
51640: LD_INT 19
51642: PUSH
51643: LD_INT 20
51645: PUSH
51646: LD_INT 21
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: IN
51664: NOT
51665: OR
51666: PUSH
51667: LD_VAR 0 8
51671: PUSH
51672: LD_INT 5
51674: ARRAY
51675: NOT
51676: OR
51677: PUSH
51678: LD_VAR 0 8
51682: PUSH
51683: LD_INT 6
51685: ARRAY
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: LD_INT 7
51695: PUSH
51696: LD_INT 9
51698: PUSH
51699: LD_INT 10
51701: PUSH
51702: LD_INT 11
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: IN
51713: NOT
51714: OR
51715: IFFALSE 51721
// exit ;
51717: POP
51718: POP
51719: GO 51804
// end ;
51721: GO 51392
51723: POP
51724: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51725: LD_VAR 0 9
51729: PPUSH
51730: LD_VAR 0 3
51734: PPUSH
51735: LD_VAR 0 4
51739: PPUSH
51740: LD_INT 20
51742: PPUSH
51743: CALL 43750 0 4
51747: PUSH
51748: LD_INT 4
51750: ARRAY
51751: IFFALSE 51755
// exit ;
51753: GO 51804
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51755: LD_VAR 0 2
51759: PUSH
51760: LD_INT 29
51762: PUSH
51763: LD_INT 30
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: IN
51770: PUSH
51771: LD_VAR 0 3
51775: PPUSH
51776: LD_VAR 0 4
51780: PPUSH
51781: LD_VAR 0 9
51785: PPUSH
51786: CALL_OW 440
51790: NOT
51791: AND
51792: IFFALSE 51796
// exit ;
51794: GO 51804
// result := true ;
51796: LD_ADDR_VAR 0 6
51800: PUSH
51801: LD_INT 1
51803: ST_TO_ADDR
// end ;
51804: LD_VAR 0 6
51808: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51809: LD_INT 0
51811: PPUSH
51812: PPUSH
51813: PPUSH
51814: PPUSH
51815: PPUSH
51816: PPUSH
51817: PPUSH
51818: PPUSH
51819: PPUSH
51820: PPUSH
51821: PPUSH
51822: PPUSH
51823: PPUSH
51824: PPUSH
51825: PPUSH
51826: PPUSH
51827: PPUSH
51828: PPUSH
51829: PPUSH
51830: PPUSH
51831: PPUSH
51832: PPUSH
51833: PPUSH
51834: PPUSH
51835: PPUSH
51836: PPUSH
51837: PPUSH
51838: PPUSH
51839: PPUSH
51840: PPUSH
51841: PPUSH
51842: PPUSH
51843: PPUSH
51844: PPUSH
51845: PPUSH
51846: PPUSH
51847: PPUSH
51848: PPUSH
51849: PPUSH
51850: PPUSH
51851: PPUSH
51852: PPUSH
51853: PPUSH
51854: PPUSH
51855: PPUSH
51856: PPUSH
51857: PPUSH
51858: PPUSH
51859: PPUSH
51860: PPUSH
51861: PPUSH
51862: PPUSH
51863: PPUSH
51864: PPUSH
51865: PPUSH
51866: PPUSH
51867: PPUSH
51868: PPUSH
// result = [ ] ;
51869: LD_ADDR_VAR 0 7
51873: PUSH
51874: EMPTY
51875: ST_TO_ADDR
// temp_list = [ ] ;
51876: LD_ADDR_VAR 0 9
51880: PUSH
51881: EMPTY
51882: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51883: LD_VAR 0 4
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: LD_INT 3
51899: PUSH
51900: LD_INT 4
51902: PUSH
51903: LD_INT 5
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: IN
51914: NOT
51915: PUSH
51916: LD_VAR 0 1
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: IN
51931: PUSH
51932: LD_VAR 0 5
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: LD_INT 3
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: LIST
51950: IN
51951: NOT
51952: AND
51953: OR
51954: IFFALSE 51958
// exit ;
51956: GO 70349
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51958: LD_VAR 0 1
51962: PUSH
51963: LD_INT 6
51965: PUSH
51966: LD_INT 7
51968: PUSH
51969: LD_INT 8
51971: PUSH
51972: LD_INT 13
51974: PUSH
51975: LD_INT 12
51977: PUSH
51978: LD_INT 15
51980: PUSH
51981: LD_INT 11
51983: PUSH
51984: LD_INT 14
51986: PUSH
51987: LD_INT 10
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: IN
52001: IFFALSE 52011
// btype = b_lab ;
52003: LD_ADDR_VAR 0 1
52007: PUSH
52008: LD_INT 6
52010: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52011: LD_VAR 0 6
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: LIST
52029: IN
52030: NOT
52031: PUSH
52032: LD_VAR 0 1
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: LD_INT 6
52051: PUSH
52052: LD_INT 36
52054: PUSH
52055: LD_INT 4
52057: PUSH
52058: LD_INT 5
52060: PUSH
52061: LD_INT 31
52063: PUSH
52064: LD_INT 32
52066: PUSH
52067: LD_INT 33
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: IN
52083: NOT
52084: PUSH
52085: LD_VAR 0 6
52089: PUSH
52090: LD_INT 1
52092: EQUAL
52093: AND
52094: OR
52095: PUSH
52096: LD_VAR 0 1
52100: PUSH
52101: LD_INT 2
52103: PUSH
52104: LD_INT 3
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: IN
52111: NOT
52112: PUSH
52113: LD_VAR 0 6
52117: PUSH
52118: LD_INT 2
52120: EQUAL
52121: AND
52122: OR
52123: IFFALSE 52133
// mode = 0 ;
52125: LD_ADDR_VAR 0 6
52129: PUSH
52130: LD_INT 0
52132: ST_TO_ADDR
// case mode of 0 :
52133: LD_VAR 0 6
52137: PUSH
52138: LD_INT 0
52140: DOUBLE
52141: EQUAL
52142: IFTRUE 52146
52144: GO 63599
52146: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52147: LD_ADDR_VAR 0 11
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: LD_INT 2
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: LD_INT 1
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: LD_INT 3
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 3
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52340: LD_ADDR_VAR 0 12
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: NEG
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 3
52497: NEG
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 3
52508: NEG
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52536: LD_ADDR_VAR 0 13
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: LD_INT 2
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 2
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: LD_INT 2
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 2
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: LD_INT 3
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 3
52695: NEG
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 3
52707: NEG
52708: PUSH
52709: LD_INT 3
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52735: LD_ADDR_VAR 0 14
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 2
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 3
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 3
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52931: LD_ADDR_VAR 0 15
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 3
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 3
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53124: LD_ADDR_VAR 0 16
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: LD_INT 2
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 2
53259: NEG
53260: PUSH
53261: LD_INT 2
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 3
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 3
53281: PUSH
53282: LD_INT 3
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: LD_INT 3
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53317: LD_ADDR_VAR 0 17
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 2
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 2
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53547: LD_ADDR_VAR 0 18
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: LD_INT 2
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: LD_INT 2
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: NEG
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53777: LD_ADDR_VAR 0 19
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 2
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: LD_INT 2
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: LD_INT 2
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: LD_INT 1
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54007: LD_ADDR_VAR 0 20
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 2
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: NEG
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54237: LD_ADDR_VAR 0 21
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 2
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: NEG
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54467: LD_ADDR_VAR 0 22
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: LD_INT 2
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 2
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 2
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: LD_INT 1
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: LD_INT 2
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54697: LD_ADDR_VAR 0 23
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: LD_INT 1
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: LD_INT 2
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: LD_INT 2
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 2
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: LD_INT 2
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: LD_INT 3
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: LD_INT 3
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54977: LD_ADDR_VAR 0 24
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: LD_INT 1
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: LD_INT 2
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: LD_INT 2
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 3
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55253: LD_ADDR_VAR 0 25
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: LD_INT 2
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: LD_INT 2
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 2
55429: NEG
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 3
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 3
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: LD_INT 3
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55527: LD_ADDR_VAR 0 26
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: LD_INT 2
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: LD_INT 2
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 2
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 3
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 3
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 2
55769: NEG
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55803: LD_ADDR_VAR 0 27
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 2
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 3
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 3
56048: NEG
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56083: LD_ADDR_VAR 0 28
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: LD_INT 2
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 2
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 2
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 2
56259: NEG
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: LD_INT 2
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 2
56294: NEG
56295: PUSH
56296: LD_INT 3
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: LD_INT 3
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 3
56330: NEG
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56365: LD_ADDR_VAR 0 29
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: NEG
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 3
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 3
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 3
56609: NEG
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56644: LD_ADDR_VAR 0 30
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: LD_INT 3
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 3
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: LD_INT 3
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56922: LD_ADDR_VAR 0 31
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 2
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: NEG
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: LD_INT 3
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: LD_INT 3
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 3
57165: NEG
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57200: LD_ADDR_VAR 0 32
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 1
57258: NEG
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 2
57377: NEG
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: LD_INT 3
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: PUSH
57413: LD_INT 2
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: LD_INT 3
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 2
57432: NEG
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 3
57443: NEG
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57478: LD_ADDR_VAR 0 33
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 2
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: LD_INT 2
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: LD_INT 1
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 2
57644: NEG
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: LD_INT 3
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 3
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: PUSH
57702: LD_INT 3
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 3
57722: NEG
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57757: LD_ADDR_VAR 0 34
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: LD_INT 2
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 3
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58037: LD_ADDR_VAR 0 35
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: NEG
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58149: LD_ADDR_VAR 0 36
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 2
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: LD_INT 2
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58261: LD_ADDR_VAR 0 37
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58373: LD_ADDR_VAR 0 38
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: NEG
58465: PUSH
58466: LD_INT 1
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58485: LD_ADDR_VAR 0 39
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: LD_INT 1
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: LD_INT 2
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58597: LD_ADDR_VAR 0 40
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58709: LD_ADDR_VAR 0 41
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 1
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: LD_INT 2
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: LD_INT 2
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 1
58853: NEG
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: NEG
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: NEG
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 2
58887: NEG
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: NEG
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 3
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 3
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 3
58952: PUSH
58953: LD_INT 3
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 2
58962: PUSH
58963: LD_INT 3
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 2
58972: NEG
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 3
58983: NEG
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 3
58994: NEG
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 3
59006: NEG
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 3
59018: NEG
59019: PUSH
59020: LD_INT 3
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59059: LD_ADDR_VAR 0 42
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 0
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: LD_INT 2
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 2
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 1
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 2
59184: PUSH
59185: LD_INT 2
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 2
59225: NEG
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: LD_INT 2
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 2
59249: NEG
59250: PUSH
59251: LD_INT 3
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: LD_INT 3
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 0
59273: PUSH
59274: LD_INT 3
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: LD_INT 2
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 3
59305: PUSH
59306: LD_INT 3
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: LD_INT 3
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: LD_INT 3
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: LD_INT 2
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 3
59356: NEG
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 3
59368: NEG
59369: PUSH
59370: LD_INT 3
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59409: LD_ADDR_VAR 0 43
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: LD_INT 2
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 2
59575: NEG
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: LD_INT 3
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: LD_INT 3
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: LD_INT 2
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 2
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 3
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 3
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: LD_INT 3
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: LD_INT 3
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 2
59694: NEG
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 3
59705: NEG
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 3
59716: NEG
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59757: LD_ADDR_VAR 0 44
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: LD_INT 2
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: LD_INT 2
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 2
59912: NEG
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: LD_INT 2
59939: NEG
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: LD_INT 3
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 2
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 3
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 3
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 3
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 3
60000: PUSH
60001: LD_INT 3
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: LD_INT 3
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: NEG
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 3
60031: NEG
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 3
60042: NEG
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 3
60054: NEG
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 3
60066: NEG
60067: PUSH
60068: LD_INT 3
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60107: LD_ADDR_VAR 0 45
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: LD_INT 1
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 1
60176: NEG
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: LD_INT 2
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 2
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: LD_INT 2
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 2
60273: NEG
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 2
60285: NEG
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 2
60297: NEG
60298: PUSH
60299: LD_INT 3
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: LD_INT 3
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: LD_INT 3
60324: NEG
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 3
60353: PUSH
60354: LD_INT 3
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 2
60363: PUSH
60364: LD_INT 3
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: LD_INT 3
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 3
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: LD_INT 2
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 3
60404: NEG
60405: PUSH
60406: LD_INT 2
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 3
60416: NEG
60417: PUSH
60418: LD_INT 3
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60457: LD_ADDR_VAR 0 46
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: LD_INT 2
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 2
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 2
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: LD_INT 2
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 2
60623: NEG
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 2
60634: NEG
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: LD_INT 3
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: LD_INT 3
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: LD_INT 2
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 2
60680: PUSH
60681: LD_INT 1
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 3
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 3
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: LD_INT 3
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: LD_INT 3
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: NEG
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 3
60753: NEG
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 3
60764: NEG
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60805: LD_ADDR_VAR 0 47
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 1
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: LD_INT 2
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: LD_INT 2
60901: NEG
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 2
60920: NEG
60921: PUSH
60922: LD_INT 1
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 2
60932: NEG
60933: PUSH
60934: LD_INT 2
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60956: LD_ADDR_VAR 0 48
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: LD_INT 2
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 2
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 2
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 2
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61103: LD_ADDR_VAR 0 49
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 0
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: LD_INT 0
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 2
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: LD_INT 2
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61247: LD_ADDR_VAR 0 50
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: NEG
61317: PUSH
61318: LD_INT 1
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 2
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 2
61338: PUSH
61339: LD_INT 2
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: LD_INT 2
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: LD_INT 2
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: NEG
61369: PUSH
61370: LD_INT 1
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61391: LD_ADDR_VAR 0 51
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: LD_INT 1
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 2
61503: NEG
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 2
61514: NEG
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61538: LD_ADDR_VAR 0 52
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 0
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: NEG
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 2
61665: NEG
61666: PUSH
61667: LD_INT 2
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61689: LD_ADDR_VAR 0 53
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: LD_INT 1
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: LD_INT 2
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: LD_INT 2
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 2
61824: PUSH
61825: LD_INT 2
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: LD_INT 2
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: LD_INT 2
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 2
61865: NEG
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: NEG
61889: PUSH
61890: LD_INT 2
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61919: LD_ADDR_VAR 0 54
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: LD_INT 1
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: LD_INT 2
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: LD_INT 2
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: LD_INT 1
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 2
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: LD_INT 2
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: LD_INT 2
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 2
62095: NEG
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 2
62106: NEG
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 2
62118: NEG
62119: PUSH
62120: LD_INT 2
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62149: LD_ADDR_VAR 0 55
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 0
62166: PUSH
62167: LD_INT 1
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 1
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: NEG
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: LD_INT 2
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: LD_INT 2
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 2
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 2
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: LD_INT 2
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: LD_INT 2
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: NEG
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 2
62336: NEG
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 2
62348: NEG
62349: PUSH
62350: LD_INT 2
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62379: LD_ADDR_VAR 0 56
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 2
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 2
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: LD_INT 0
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: LD_INT 2
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 2
62555: NEG
62556: PUSH
62557: LD_INT 0
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 2
62566: NEG
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 2
62578: NEG
62579: PUSH
62580: LD_INT 2
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62609: LD_ADDR_VAR 0 57
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: LD_INT 0
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: LD_INT 1
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: LD_INT 2
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: LD_INT 2
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: LD_INT 1
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: LD_INT 0
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: LD_INT 2
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 1
62754: PUSH
62755: LD_INT 2
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: LD_INT 2
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 1
62774: NEG
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: NEG
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PUSH
62798: LD_INT 1
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 2
62808: NEG
62809: PUSH
62810: LD_INT 2
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62839: LD_ADDR_VAR 0 58
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: LD_INT 0
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: LD_INT 1
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 1
62897: NEG
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 1
62908: NEG
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: LD_INT 2
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: LD_INT 2
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: LD_INT 0
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: LD_INT 2
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: LD_INT 2
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: LD_INT 1
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 2
63015: NEG
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 2
63026: NEG
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 2
63038: NEG
63039: PUSH
63040: LD_INT 2
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63069: LD_ADDR_VAR 0 59
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 1
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: LD_INT 1
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63157: LD_ADDR_VAR 0 60
63161: PUSH
63162: LD_INT 0
63164: PUSH
63165: LD_INT 0
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: LD_INT 1
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 1
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 1
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 0
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63245: LD_ADDR_VAR 0 61
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 0
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: LD_INT 1
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: LD_INT 1
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: NEG
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63333: LD_ADDR_VAR 0 62
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: LD_INT 1
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63421: LD_ADDR_VAR 0 63
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: LD_INT 1
63441: NEG
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 1
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: LD_INT 1
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 1
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63509: LD_ADDR_VAR 0 64
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: LD_INT 1
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 1
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: LD_INT 1
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: ST_TO_ADDR
// end ; 1 :
63597: GO 69494
63599: LD_INT 1
63601: DOUBLE
63602: EQUAL
63603: IFTRUE 63607
63605: GO 66230
63607: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63608: LD_ADDR_VAR 0 11
63612: PUSH
63613: LD_INT 1
63615: NEG
63616: PUSH
63617: LD_INT 3
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: LD_INT 3
63630: NEG
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 1
63638: PUSH
63639: LD_INT 2
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: LIST
63651: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63652: LD_ADDR_VAR 0 12
63656: PUSH
63657: LD_INT 2
63659: PUSH
63660: LD_INT 1
63662: NEG
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 3
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 3
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: LIST
63692: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63693: LD_ADDR_VAR 0 13
63697: PUSH
63698: LD_INT 3
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 3
63710: PUSH
63711: LD_INT 3
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 2
63720: PUSH
63721: LD_INT 3
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: LIST
63732: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63733: LD_ADDR_VAR 0 14
63737: PUSH
63738: LD_INT 1
63740: PUSH
63741: LD_INT 3
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: LD_INT 3
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: LIST
63773: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63774: LD_ADDR_VAR 0 15
63778: PUSH
63779: LD_INT 2
63781: NEG
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 3
63792: NEG
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 3
63803: NEG
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: LIST
63817: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63818: LD_ADDR_VAR 0 16
63822: PUSH
63823: LD_INT 2
63825: NEG
63826: PUSH
63827: LD_INT 3
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 3
63837: NEG
63838: PUSH
63839: LD_INT 2
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 3
63849: NEG
63850: PUSH
63851: LD_INT 3
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: LIST
63863: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63864: LD_ADDR_VAR 0 17
63868: PUSH
63869: LD_INT 1
63871: NEG
63872: PUSH
63873: LD_INT 3
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: LD_INT 3
63886: NEG
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: LD_INT 2
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: LIST
63907: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63908: LD_ADDR_VAR 0 18
63912: PUSH
63913: LD_INT 2
63915: PUSH
63916: LD_INT 1
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 3
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 3
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: LIST
63948: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63949: LD_ADDR_VAR 0 19
63953: PUSH
63954: LD_INT 3
63956: PUSH
63957: LD_INT 2
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 3
63966: PUSH
63967: LD_INT 3
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 2
63976: PUSH
63977: LD_INT 3
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: LIST
63988: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63989: LD_ADDR_VAR 0 20
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: LD_INT 3
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: LD_INT 3
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 1
64016: NEG
64017: PUSH
64018: LD_INT 2
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: LIST
64029: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64030: LD_ADDR_VAR 0 21
64034: PUSH
64035: LD_INT 2
64037: NEG
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 3
64048: NEG
64049: PUSH
64050: LD_INT 0
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 3
64059: NEG
64060: PUSH
64061: LD_INT 1
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: LIST
64073: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64074: LD_ADDR_VAR 0 22
64078: PUSH
64079: LD_INT 2
64081: NEG
64082: PUSH
64083: LD_INT 3
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 3
64093: NEG
64094: PUSH
64095: LD_INT 2
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 3
64105: NEG
64106: PUSH
64107: LD_INT 3
64109: NEG
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: LIST
64119: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64120: LD_ADDR_VAR 0 23
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: LD_INT 3
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: LD_INT 4
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: LD_INT 3
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: LIST
64163: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64164: LD_ADDR_VAR 0 24
64168: PUSH
64169: LD_INT 3
64171: PUSH
64172: LD_INT 0
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 3
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 4
64192: PUSH
64193: LD_INT 1
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: LIST
64204: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64205: LD_ADDR_VAR 0 25
64209: PUSH
64210: LD_INT 3
64212: PUSH
64213: LD_INT 3
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 4
64222: PUSH
64223: LD_INT 3
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 3
64232: PUSH
64233: LD_INT 4
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: LIST
64244: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64245: LD_ADDR_VAR 0 26
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: LD_INT 3
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: LD_INT 4
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: LD_INT 3
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: LIST
64285: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64286: LD_ADDR_VAR 0 27
64290: PUSH
64291: LD_INT 3
64293: NEG
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 3
64304: NEG
64305: PUSH
64306: LD_INT 1
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 4
64315: NEG
64316: PUSH
64317: LD_INT 1
64319: NEG
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64330: LD_ADDR_VAR 0 28
64334: PUSH
64335: LD_INT 3
64337: NEG
64338: PUSH
64339: LD_INT 3
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 3
64349: NEG
64350: PUSH
64351: LD_INT 4
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 4
64361: NEG
64362: PUSH
64363: LD_INT 3
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: LIST
64375: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64376: LD_ADDR_VAR 0 29
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: LD_INT 3
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: LD_INT 3
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: LD_INT 2
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 1
64417: NEG
64418: PUSH
64419: LD_INT 4
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 4
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 1
64440: PUSH
64441: LD_INT 3
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: LD_INT 5
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: LD_INT 5
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: LD_INT 4
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 1
64485: NEG
64486: PUSH
64487: LD_INT 6
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: LD_INT 6
64500: NEG
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 1
64508: PUSH
64509: LD_INT 5
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64531: LD_ADDR_VAR 0 30
64535: PUSH
64536: LD_INT 2
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 3
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 3
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 3
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 4
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 4
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 4
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 5
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 5
64621: PUSH
64622: LD_INT 1
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 5
64631: PUSH
64632: LD_INT 1
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 6
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 6
64652: PUSH
64653: LD_INT 1
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64674: LD_ADDR_VAR 0 31
64678: PUSH
64679: LD_INT 3
64681: PUSH
64682: LD_INT 2
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 3
64691: PUSH
64692: LD_INT 3
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: LD_INT 3
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 4
64711: PUSH
64712: LD_INT 3
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 4
64721: PUSH
64722: LD_INT 4
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 3
64731: PUSH
64732: LD_INT 4
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 5
64741: PUSH
64742: LD_INT 4
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 5
64751: PUSH
64752: LD_INT 5
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 4
64761: PUSH
64762: LD_INT 5
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 6
64771: PUSH
64772: LD_INT 5
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 6
64781: PUSH
64782: LD_INT 6
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 5
64791: PUSH
64792: LD_INT 6
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64813: LD_ADDR_VAR 0 32
64817: PUSH
64818: LD_INT 1
64820: PUSH
64821: LD_INT 3
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: LD_INT 3
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 1
64840: NEG
64841: PUSH
64842: LD_INT 2
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: LD_INT 4
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: LD_INT 4
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 1
64871: NEG
64872: PUSH
64873: LD_INT 3
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 1
64882: PUSH
64883: LD_INT 5
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 0
64892: PUSH
64893: LD_INT 5
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 1
64902: NEG
64903: PUSH
64904: LD_INT 4
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: LD_INT 6
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: LD_INT 6
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 1
64933: NEG
64934: PUSH
64935: LD_INT 5
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64956: LD_ADDR_VAR 0 33
64960: PUSH
64961: LD_INT 2
64963: NEG
64964: PUSH
64965: LD_INT 1
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 3
64974: NEG
64975: PUSH
64976: LD_INT 0
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 3
64985: NEG
64986: PUSH
64987: LD_INT 1
64989: NEG
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 3
64997: NEG
64998: PUSH
64999: LD_INT 1
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 4
65008: NEG
65009: PUSH
65010: LD_INT 0
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 4
65019: NEG
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 4
65031: NEG
65032: PUSH
65033: LD_INT 1
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 5
65042: NEG
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 5
65053: NEG
65054: PUSH
65055: LD_INT 1
65057: NEG
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 5
65065: NEG
65066: PUSH
65067: LD_INT 1
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 6
65076: NEG
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 6
65087: NEG
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65111: LD_ADDR_VAR 0 34
65115: PUSH
65116: LD_INT 2
65118: NEG
65119: PUSH
65120: LD_INT 3
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 3
65130: NEG
65131: PUSH
65132: LD_INT 2
65134: NEG
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 3
65142: NEG
65143: PUSH
65144: LD_INT 3
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 3
65154: NEG
65155: PUSH
65156: LD_INT 4
65158: NEG
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 4
65166: NEG
65167: PUSH
65168: LD_INT 3
65170: NEG
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 4
65178: NEG
65179: PUSH
65180: LD_INT 4
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 4
65190: NEG
65191: PUSH
65192: LD_INT 5
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 5
65202: NEG
65203: PUSH
65204: LD_INT 4
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 5
65214: NEG
65215: PUSH
65216: LD_INT 5
65218: NEG
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 5
65226: NEG
65227: PUSH
65228: LD_INT 6
65230: NEG
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 6
65238: NEG
65239: PUSH
65240: LD_INT 5
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 6
65250: NEG
65251: PUSH
65252: LD_INT 6
65254: NEG
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65274: LD_ADDR_VAR 0 41
65278: PUSH
65279: LD_INT 0
65281: PUSH
65282: LD_INT 2
65284: NEG
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 1
65292: NEG
65293: PUSH
65294: LD_INT 3
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 1
65304: PUSH
65305: LD_INT 2
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: LIST
65317: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65318: LD_ADDR_VAR 0 42
65322: PUSH
65323: LD_INT 2
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 2
65335: PUSH
65336: LD_INT 1
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 3
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: LIST
65358: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65359: LD_ADDR_VAR 0 43
65363: PUSH
65364: LD_INT 2
65366: PUSH
65367: LD_INT 2
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 3
65376: PUSH
65377: LD_INT 2
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 2
65386: PUSH
65387: LD_INT 3
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: LIST
65398: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65399: LD_ADDR_VAR 0 44
65403: PUSH
65404: LD_INT 0
65406: PUSH
65407: LD_INT 2
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: LD_INT 3
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 1
65426: NEG
65427: PUSH
65428: LD_INT 2
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: LIST
65439: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65440: LD_ADDR_VAR 0 45
65444: PUSH
65445: LD_INT 2
65447: NEG
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 2
65458: NEG
65459: PUSH
65460: LD_INT 1
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 3
65469: NEG
65470: PUSH
65471: LD_INT 1
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: LIST
65483: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65484: LD_ADDR_VAR 0 46
65488: PUSH
65489: LD_INT 2
65491: NEG
65492: PUSH
65493: LD_INT 2
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 2
65503: NEG
65504: PUSH
65505: LD_INT 3
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 3
65515: NEG
65516: PUSH
65517: LD_INT 2
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: LIST
65529: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65530: LD_ADDR_VAR 0 47
65534: PUSH
65535: LD_INT 2
65537: NEG
65538: PUSH
65539: LD_INT 3
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: NEG
65550: PUSH
65551: LD_INT 3
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65563: LD_ADDR_VAR 0 48
65567: PUSH
65568: LD_INT 1
65570: PUSH
65571: LD_INT 2
65573: NEG
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 2
65581: PUSH
65582: LD_INT 1
65584: NEG
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65594: LD_ADDR_VAR 0 49
65598: PUSH
65599: LD_INT 3
65601: PUSH
65602: LD_INT 1
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 3
65611: PUSH
65612: LD_INT 2
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65623: LD_ADDR_VAR 0 50
65627: PUSH
65628: LD_INT 2
65630: PUSH
65631: LD_INT 3
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: LD_INT 3
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65652: LD_ADDR_VAR 0 51
65656: PUSH
65657: LD_INT 1
65659: NEG
65660: PUSH
65661: LD_INT 2
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 2
65670: NEG
65671: PUSH
65672: LD_INT 1
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65683: LD_ADDR_VAR 0 52
65687: PUSH
65688: LD_INT 3
65690: NEG
65691: PUSH
65692: LD_INT 1
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 3
65702: NEG
65703: PUSH
65704: LD_INT 2
65706: NEG
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65716: LD_ADDR_VAR 0 53
65720: PUSH
65721: LD_INT 1
65723: NEG
65724: PUSH
65725: LD_INT 3
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: LD_INT 3
65738: NEG
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 1
65746: PUSH
65747: LD_INT 2
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: LIST
65759: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65760: LD_ADDR_VAR 0 54
65764: PUSH
65765: LD_INT 2
65767: PUSH
65768: LD_INT 1
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 3
65778: PUSH
65779: LD_INT 0
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 3
65788: PUSH
65789: LD_INT 1
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: LIST
65800: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65801: LD_ADDR_VAR 0 55
65805: PUSH
65806: LD_INT 3
65808: PUSH
65809: LD_INT 2
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 3
65818: PUSH
65819: LD_INT 3
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 2
65828: PUSH
65829: LD_INT 3
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65841: LD_ADDR_VAR 0 56
65845: PUSH
65846: LD_INT 1
65848: PUSH
65849: LD_INT 3
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 0
65858: PUSH
65859: LD_INT 3
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: LD_INT 2
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: LIST
65881: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65882: LD_ADDR_VAR 0 57
65886: PUSH
65887: LD_INT 2
65889: NEG
65890: PUSH
65891: LD_INT 1
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 3
65900: NEG
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 3
65911: NEG
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: LIST
65925: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65926: LD_ADDR_VAR 0 58
65930: PUSH
65931: LD_INT 2
65933: NEG
65934: PUSH
65935: LD_INT 3
65937: NEG
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 3
65945: NEG
65946: PUSH
65947: LD_INT 2
65949: NEG
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 3
65957: NEG
65958: PUSH
65959: LD_INT 3
65961: NEG
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: LIST
65971: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65972: LD_ADDR_VAR 0 59
65976: PUSH
65977: LD_INT 1
65979: NEG
65980: PUSH
65981: LD_INT 2
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 0
65991: PUSH
65992: LD_INT 2
65994: NEG
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 1
66002: PUSH
66003: LD_INT 1
66005: NEG
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: LIST
66015: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66016: LD_ADDR_VAR 0 60
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: LD_INT 1
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 2
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 2
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66057: LD_ADDR_VAR 0 61
66061: PUSH
66062: LD_INT 2
66064: PUSH
66065: LD_INT 1
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 2
66074: PUSH
66075: LD_INT 2
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 1
66084: PUSH
66085: LD_INT 2
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: LIST
66096: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66097: LD_ADDR_VAR 0 62
66101: PUSH
66102: LD_INT 1
66104: PUSH
66105: LD_INT 2
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 0
66114: PUSH
66115: LD_INT 2
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 1
66124: NEG
66125: PUSH
66126: LD_INT 1
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: LIST
66137: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66138: LD_ADDR_VAR 0 63
66142: PUSH
66143: LD_INT 1
66145: NEG
66146: PUSH
66147: LD_INT 1
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 2
66156: NEG
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 2
66167: NEG
66168: PUSH
66169: LD_INT 1
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66182: LD_ADDR_VAR 0 64
66186: PUSH
66187: LD_INT 1
66189: NEG
66190: PUSH
66191: LD_INT 2
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 2
66201: NEG
66202: PUSH
66203: LD_INT 1
66205: NEG
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 2
66213: NEG
66214: PUSH
66215: LD_INT 2
66217: NEG
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: LIST
66227: ST_TO_ADDR
// end ; 2 :
66228: GO 69494
66230: LD_INT 2
66232: DOUBLE
66233: EQUAL
66234: IFTRUE 66238
66236: GO 69493
66238: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66239: LD_ADDR_VAR 0 29
66243: PUSH
66244: LD_INT 4
66246: PUSH
66247: LD_INT 0
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 4
66256: PUSH
66257: LD_INT 1
66259: NEG
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 5
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 5
66277: PUSH
66278: LD_INT 1
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 4
66287: PUSH
66288: LD_INT 1
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 3
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 3
66307: PUSH
66308: LD_INT 1
66310: NEG
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 3
66318: PUSH
66319: LD_INT 2
66321: NEG
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 5
66329: PUSH
66330: LD_INT 2
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 3
66339: PUSH
66340: LD_INT 3
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 3
66349: PUSH
66350: LD_INT 2
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 4
66359: PUSH
66360: LD_INT 3
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 4
66369: PUSH
66370: LD_INT 4
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 3
66379: PUSH
66380: LD_INT 4
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 2
66389: PUSH
66390: LD_INT 3
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 2
66399: PUSH
66400: LD_INT 2
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 4
66409: PUSH
66410: LD_INT 2
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 2
66419: PUSH
66420: LD_INT 4
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 0
66429: PUSH
66430: LD_INT 4
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 0
66439: PUSH
66440: LD_INT 3
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 1
66449: PUSH
66450: LD_INT 4
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 1
66459: PUSH
66460: LD_INT 5
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 0
66469: PUSH
66470: LD_INT 5
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 1
66479: NEG
66480: PUSH
66481: LD_INT 4
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: LD_INT 3
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 2
66501: PUSH
66502: LD_INT 5
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 2
66511: NEG
66512: PUSH
66513: LD_INT 3
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 3
66522: NEG
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 3
66533: NEG
66534: PUSH
66535: LD_INT 1
66537: NEG
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 2
66545: NEG
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 2
66556: NEG
66557: PUSH
66558: LD_INT 1
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 3
66567: NEG
66568: PUSH
66569: LD_INT 1
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 4
66578: NEG
66579: PUSH
66580: LD_INT 0
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 4
66589: NEG
66590: PUSH
66591: LD_INT 1
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 4
66601: NEG
66602: PUSH
66603: LD_INT 2
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 2
66613: NEG
66614: PUSH
66615: LD_INT 2
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 4
66624: NEG
66625: PUSH
66626: LD_INT 4
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 4
66636: NEG
66637: PUSH
66638: LD_INT 5
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 3
66648: NEG
66649: PUSH
66650: LD_INT 4
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 3
66660: NEG
66661: PUSH
66662: LD_INT 3
66664: NEG
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 4
66672: NEG
66673: PUSH
66674: LD_INT 3
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 5
66684: NEG
66685: PUSH
66686: LD_INT 4
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 5
66696: NEG
66697: PUSH
66698: LD_INT 5
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 3
66708: NEG
66709: PUSH
66710: LD_INT 5
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 5
66720: NEG
66721: PUSH
66722: LD_INT 3
66724: NEG
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66777: LD_ADDR_VAR 0 30
66781: PUSH
66782: LD_INT 4
66784: PUSH
66785: LD_INT 4
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 4
66794: PUSH
66795: LD_INT 3
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 5
66804: PUSH
66805: LD_INT 4
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 5
66814: PUSH
66815: LD_INT 5
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 4
66824: PUSH
66825: LD_INT 5
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 3
66834: PUSH
66835: LD_INT 4
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 3
66844: PUSH
66845: LD_INT 3
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 5
66854: PUSH
66855: LD_INT 3
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 3
66864: PUSH
66865: LD_INT 5
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: LD_INT 3
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: LD_INT 2
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 1
66894: PUSH
66895: LD_INT 3
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 1
66904: PUSH
66905: LD_INT 4
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 0
66914: PUSH
66915: LD_INT 4
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 1
66924: NEG
66925: PUSH
66926: LD_INT 3
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: LD_INT 2
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 2
66946: PUSH
66947: LD_INT 4
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 2
66956: NEG
66957: PUSH
66958: LD_INT 2
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 4
66967: NEG
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 4
66978: NEG
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 3
66990: NEG
66991: PUSH
66992: LD_INT 0
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 3
67001: NEG
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 4
67012: NEG
67013: PUSH
67014: LD_INT 1
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 5
67023: NEG
67024: PUSH
67025: LD_INT 0
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 5
67034: NEG
67035: PUSH
67036: LD_INT 1
67038: NEG
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 5
67046: NEG
67047: PUSH
67048: LD_INT 2
67050: NEG
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 3
67058: NEG
67059: PUSH
67060: LD_INT 2
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 3
67069: NEG
67070: PUSH
67071: LD_INT 3
67073: NEG
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 3
67081: NEG
67082: PUSH
67083: LD_INT 4
67085: NEG
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 2
67093: NEG
67094: PUSH
67095: LD_INT 3
67097: NEG
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 2
67105: NEG
67106: PUSH
67107: LD_INT 2
67109: NEG
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 3
67117: NEG
67118: PUSH
67119: LD_INT 2
67121: NEG
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 4
67129: NEG
67130: PUSH
67131: LD_INT 3
67133: NEG
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 4
67141: NEG
67142: PUSH
67143: LD_INT 4
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 2
67153: NEG
67154: PUSH
67155: LD_INT 4
67157: NEG
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 4
67165: NEG
67166: PUSH
67167: LD_INT 2
67169: NEG
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 0
67177: PUSH
67178: LD_INT 4
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 0
67188: PUSH
67189: LD_INT 5
67191: NEG
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: LD_INT 4
67202: NEG
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 1
67210: PUSH
67211: LD_INT 3
67213: NEG
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 0
67221: PUSH
67222: LD_INT 3
67224: NEG
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 1
67232: NEG
67233: PUSH
67234: LD_INT 4
67236: NEG
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 1
67244: NEG
67245: PUSH
67246: LD_INT 5
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 2
67256: PUSH
67257: LD_INT 3
67259: NEG
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 2
67267: NEG
67268: PUSH
67269: LD_INT 5
67271: NEG
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67324: LD_ADDR_VAR 0 31
67328: PUSH
67329: LD_INT 0
67331: PUSH
67332: LD_INT 4
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: LD_INT 3
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 1
67351: PUSH
67352: LD_INT 4
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 1
67361: PUSH
67362: LD_INT 5
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 0
67371: PUSH
67372: LD_INT 5
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 1
67381: NEG
67382: PUSH
67383: LD_INT 4
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 1
67392: NEG
67393: PUSH
67394: LD_INT 3
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 2
67403: PUSH
67404: LD_INT 5
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 2
67413: NEG
67414: PUSH
67415: LD_INT 3
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 3
67424: NEG
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 3
67435: NEG
67436: PUSH
67437: LD_INT 1
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 2
67447: NEG
67448: PUSH
67449: LD_INT 0
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 2
67458: NEG
67459: PUSH
67460: LD_INT 1
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 3
67469: NEG
67470: PUSH
67471: LD_INT 1
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 4
67480: NEG
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 4
67491: NEG
67492: PUSH
67493: LD_INT 1
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 4
67503: NEG
67504: PUSH
67505: LD_INT 2
67507: NEG
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 2
67515: NEG
67516: PUSH
67517: LD_INT 2
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 4
67526: NEG
67527: PUSH
67528: LD_INT 4
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 4
67538: NEG
67539: PUSH
67540: LD_INT 5
67542: NEG
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 3
67550: NEG
67551: PUSH
67552: LD_INT 4
67554: NEG
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 3
67562: NEG
67563: PUSH
67564: LD_INT 3
67566: NEG
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 4
67574: NEG
67575: PUSH
67576: LD_INT 3
67578: NEG
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 5
67586: NEG
67587: PUSH
67588: LD_INT 4
67590: NEG
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 5
67598: NEG
67599: PUSH
67600: LD_INT 5
67602: NEG
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 3
67610: NEG
67611: PUSH
67612: LD_INT 5
67614: NEG
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 5
67622: NEG
67623: PUSH
67624: LD_INT 3
67626: NEG
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 0
67634: PUSH
67635: LD_INT 3
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: LD_INT 4
67648: NEG
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 1
67656: PUSH
67657: LD_INT 3
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 1
67667: PUSH
67668: LD_INT 2
67670: NEG
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: LD_INT 2
67681: NEG
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 1
67689: NEG
67690: PUSH
67691: LD_INT 3
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 1
67701: NEG
67702: PUSH
67703: LD_INT 4
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 2
67713: PUSH
67714: LD_INT 2
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 2
67724: NEG
67725: PUSH
67726: LD_INT 4
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 4
67736: PUSH
67737: LD_INT 0
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 4
67746: PUSH
67747: LD_INT 1
67749: NEG
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 5
67757: PUSH
67758: LD_INT 0
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 5
67767: PUSH
67768: LD_INT 1
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 4
67777: PUSH
67778: LD_INT 1
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 3
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 3
67797: PUSH
67798: LD_INT 1
67800: NEG
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 3
67808: PUSH
67809: LD_INT 2
67811: NEG
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 5
67819: PUSH
67820: LD_INT 2
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67874: LD_ADDR_VAR 0 32
67878: PUSH
67879: LD_INT 4
67881: NEG
67882: PUSH
67883: LD_INT 0
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 4
67892: NEG
67893: PUSH
67894: LD_INT 1
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 3
67904: NEG
67905: PUSH
67906: LD_INT 0
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 3
67915: NEG
67916: PUSH
67917: LD_INT 1
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 4
67926: NEG
67927: PUSH
67928: LD_INT 1
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 5
67937: NEG
67938: PUSH
67939: LD_INT 0
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 5
67948: NEG
67949: PUSH
67950: LD_INT 1
67952: NEG
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 5
67960: NEG
67961: PUSH
67962: LD_INT 2
67964: NEG
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 3
67972: NEG
67973: PUSH
67974: LD_INT 2
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 3
67983: NEG
67984: PUSH
67985: LD_INT 3
67987: NEG
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 3
67995: NEG
67996: PUSH
67997: LD_INT 4
67999: NEG
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 2
68007: NEG
68008: PUSH
68009: LD_INT 3
68011: NEG
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 2
68019: NEG
68020: PUSH
68021: LD_INT 2
68023: NEG
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 3
68031: NEG
68032: PUSH
68033: LD_INT 2
68035: NEG
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 4
68043: NEG
68044: PUSH
68045: LD_INT 3
68047: NEG
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 4
68055: NEG
68056: PUSH
68057: LD_INT 4
68059: NEG
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 2
68067: NEG
68068: PUSH
68069: LD_INT 4
68071: NEG
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 4
68079: NEG
68080: PUSH
68081: LD_INT 2
68083: NEG
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: LD_INT 4
68094: NEG
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 0
68102: PUSH
68103: LD_INT 5
68105: NEG
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 1
68113: PUSH
68114: LD_INT 4
68116: NEG
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 1
68124: PUSH
68125: LD_INT 3
68127: NEG
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 0
68135: PUSH
68136: LD_INT 3
68138: NEG
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 1
68146: NEG
68147: PUSH
68148: LD_INT 4
68150: NEG
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 1
68158: NEG
68159: PUSH
68160: LD_INT 5
68162: NEG
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 2
68170: PUSH
68171: LD_INT 3
68173: NEG
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 2
68181: NEG
68182: PUSH
68183: LD_INT 5
68185: NEG
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 3
68193: PUSH
68194: LD_INT 0
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 3
68203: PUSH
68204: LD_INT 1
68206: NEG
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 4
68214: PUSH
68215: LD_INT 0
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 4
68224: PUSH
68225: LD_INT 1
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 3
68234: PUSH
68235: LD_INT 1
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 2
68244: PUSH
68245: LD_INT 0
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 2
68254: PUSH
68255: LD_INT 1
68257: NEG
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 2
68265: PUSH
68266: LD_INT 2
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 4
68276: PUSH
68277: LD_INT 2
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 4
68286: PUSH
68287: LD_INT 4
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 4
68296: PUSH
68297: LD_INT 3
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 5
68306: PUSH
68307: LD_INT 4
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 5
68316: PUSH
68317: LD_INT 5
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 4
68326: PUSH
68327: LD_INT 5
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 3
68336: PUSH
68337: LD_INT 4
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 3
68346: PUSH
68347: LD_INT 3
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 5
68356: PUSH
68357: LD_INT 3
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 3
68366: PUSH
68367: LD_INT 5
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68421: LD_ADDR_VAR 0 33
68425: PUSH
68426: LD_INT 4
68428: NEG
68429: PUSH
68430: LD_INT 4
68432: NEG
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 4
68440: NEG
68441: PUSH
68442: LD_INT 5
68444: NEG
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 3
68452: NEG
68453: PUSH
68454: LD_INT 4
68456: NEG
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 3
68464: NEG
68465: PUSH
68466: LD_INT 3
68468: NEG
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 4
68476: NEG
68477: PUSH
68478: LD_INT 3
68480: NEG
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 5
68488: NEG
68489: PUSH
68490: LD_INT 4
68492: NEG
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 5
68500: NEG
68501: PUSH
68502: LD_INT 5
68504: NEG
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 3
68512: NEG
68513: PUSH
68514: LD_INT 5
68516: NEG
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 5
68524: NEG
68525: PUSH
68526: LD_INT 3
68528: NEG
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 0
68536: PUSH
68537: LD_INT 3
68539: NEG
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 0
68547: PUSH
68548: LD_INT 4
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 1
68558: PUSH
68559: LD_INT 3
68561: NEG
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 1
68569: PUSH
68570: LD_INT 2
68572: NEG
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 0
68580: PUSH
68581: LD_INT 2
68583: NEG
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 1
68591: NEG
68592: PUSH
68593: LD_INT 3
68595: NEG
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 1
68603: NEG
68604: PUSH
68605: LD_INT 4
68607: NEG
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 2
68615: PUSH
68616: LD_INT 2
68618: NEG
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 2
68626: NEG
68627: PUSH
68628: LD_INT 4
68630: NEG
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 4
68638: PUSH
68639: LD_INT 0
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 4
68648: PUSH
68649: LD_INT 1
68651: NEG
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 5
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 5
68669: PUSH
68670: LD_INT 1
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 4
68679: PUSH
68680: LD_INT 1
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 3
68689: PUSH
68690: LD_INT 0
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 3
68699: PUSH
68700: LD_INT 1
68702: NEG
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 3
68710: PUSH
68711: LD_INT 2
68713: NEG
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 5
68721: PUSH
68722: LD_INT 2
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 3
68731: PUSH
68732: LD_INT 3
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 3
68741: PUSH
68742: LD_INT 2
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 4
68751: PUSH
68752: LD_INT 3
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 4
68761: PUSH
68762: LD_INT 4
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 3
68771: PUSH
68772: LD_INT 4
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 2
68781: PUSH
68782: LD_INT 3
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 2
68791: PUSH
68792: LD_INT 2
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 4
68801: PUSH
68802: LD_INT 2
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 2
68811: PUSH
68812: LD_INT 4
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 0
68821: PUSH
68822: LD_INT 4
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 0
68831: PUSH
68832: LD_INT 3
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 1
68841: PUSH
68842: LD_INT 4
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 1
68851: PUSH
68852: LD_INT 5
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 0
68861: PUSH
68862: LD_INT 5
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 1
68871: NEG
68872: PUSH
68873: LD_INT 4
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 1
68882: NEG
68883: PUSH
68884: LD_INT 3
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 2
68893: PUSH
68894: LD_INT 5
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: PUSH
68901: LD_INT 2
68903: NEG
68904: PUSH
68905: LD_INT 3
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68959: LD_ADDR_VAR 0 34
68963: PUSH
68964: LD_INT 0
68966: PUSH
68967: LD_INT 4
68969: NEG
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 0
68977: PUSH
68978: LD_INT 5
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 1
68988: PUSH
68989: LD_INT 4
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 1
68999: PUSH
69000: LD_INT 3
69002: NEG
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 0
69010: PUSH
69011: LD_INT 3
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 1
69021: NEG
69022: PUSH
69023: LD_INT 4
69025: NEG
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 1
69033: NEG
69034: PUSH
69035: LD_INT 5
69037: NEG
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 2
69045: PUSH
69046: LD_INT 3
69048: NEG
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 2
69056: NEG
69057: PUSH
69058: LD_INT 5
69060: NEG
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 3
69068: PUSH
69069: LD_INT 0
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 3
69078: PUSH
69079: LD_INT 1
69081: NEG
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 4
69089: PUSH
69090: LD_INT 0
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 4
69099: PUSH
69100: LD_INT 1
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 3
69109: PUSH
69110: LD_INT 1
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 2
69119: PUSH
69120: LD_INT 0
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 2
69129: PUSH
69130: LD_INT 1
69132: NEG
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 2
69140: PUSH
69141: LD_INT 2
69143: NEG
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 4
69151: PUSH
69152: LD_INT 2
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 4
69161: PUSH
69162: LD_INT 4
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 4
69171: PUSH
69172: LD_INT 3
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 5
69181: PUSH
69182: LD_INT 4
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 5
69191: PUSH
69192: LD_INT 5
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 4
69201: PUSH
69202: LD_INT 5
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 3
69211: PUSH
69212: LD_INT 4
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 3
69221: PUSH
69222: LD_INT 3
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 5
69231: PUSH
69232: LD_INT 3
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 3
69241: PUSH
69242: LD_INT 5
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 0
69251: PUSH
69252: LD_INT 3
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 0
69261: PUSH
69262: LD_INT 2
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 1
69271: PUSH
69272: LD_INT 3
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 1
69281: PUSH
69282: LD_INT 4
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 0
69291: PUSH
69292: LD_INT 4
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 1
69301: NEG
69302: PUSH
69303: LD_INT 3
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 1
69312: NEG
69313: PUSH
69314: LD_INT 2
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 2
69323: PUSH
69324: LD_INT 4
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 2
69333: NEG
69334: PUSH
69335: LD_INT 2
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 4
69344: NEG
69345: PUSH
69346: LD_INT 0
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 4
69355: NEG
69356: PUSH
69357: LD_INT 1
69359: NEG
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 3
69367: NEG
69368: PUSH
69369: LD_INT 0
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 3
69378: NEG
69379: PUSH
69380: LD_INT 1
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 4
69389: NEG
69390: PUSH
69391: LD_INT 1
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 5
69400: NEG
69401: PUSH
69402: LD_INT 0
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 5
69411: NEG
69412: PUSH
69413: LD_INT 1
69415: NEG
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 5
69423: NEG
69424: PUSH
69425: LD_INT 2
69427: NEG
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 3
69435: NEG
69436: PUSH
69437: LD_INT 2
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: ST_TO_ADDR
// end ; end ;
69491: GO 69494
69493: POP
// case btype of b_depot , b_warehouse :
69494: LD_VAR 0 1
69498: PUSH
69499: LD_INT 0
69501: DOUBLE
69502: EQUAL
69503: IFTRUE 69513
69505: LD_INT 1
69507: DOUBLE
69508: EQUAL
69509: IFTRUE 69513
69511: GO 69714
69513: POP
// case nation of nation_american :
69514: LD_VAR 0 5
69518: PUSH
69519: LD_INT 1
69521: DOUBLE
69522: EQUAL
69523: IFTRUE 69527
69525: GO 69583
69527: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69528: LD_ADDR_VAR 0 9
69532: PUSH
69533: LD_VAR 0 11
69537: PUSH
69538: LD_VAR 0 12
69542: PUSH
69543: LD_VAR 0 13
69547: PUSH
69548: LD_VAR 0 14
69552: PUSH
69553: LD_VAR 0 15
69557: PUSH
69558: LD_VAR 0 16
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: PUSH
69571: LD_VAR 0 4
69575: PUSH
69576: LD_INT 1
69578: PLUS
69579: ARRAY
69580: ST_TO_ADDR
69581: GO 69712
69583: LD_INT 2
69585: DOUBLE
69586: EQUAL
69587: IFTRUE 69591
69589: GO 69647
69591: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69592: LD_ADDR_VAR 0 9
69596: PUSH
69597: LD_VAR 0 17
69601: PUSH
69602: LD_VAR 0 18
69606: PUSH
69607: LD_VAR 0 19
69611: PUSH
69612: LD_VAR 0 20
69616: PUSH
69617: LD_VAR 0 21
69621: PUSH
69622: LD_VAR 0 22
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: PUSH
69635: LD_VAR 0 4
69639: PUSH
69640: LD_INT 1
69642: PLUS
69643: ARRAY
69644: ST_TO_ADDR
69645: GO 69712
69647: LD_INT 3
69649: DOUBLE
69650: EQUAL
69651: IFTRUE 69655
69653: GO 69711
69655: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69656: LD_ADDR_VAR 0 9
69660: PUSH
69661: LD_VAR 0 23
69665: PUSH
69666: LD_VAR 0 24
69670: PUSH
69671: LD_VAR 0 25
69675: PUSH
69676: LD_VAR 0 26
69680: PUSH
69681: LD_VAR 0 27
69685: PUSH
69686: LD_VAR 0 28
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: PUSH
69699: LD_VAR 0 4
69703: PUSH
69704: LD_INT 1
69706: PLUS
69707: ARRAY
69708: ST_TO_ADDR
69709: GO 69712
69711: POP
69712: GO 70267
69714: LD_INT 2
69716: DOUBLE
69717: EQUAL
69718: IFTRUE 69728
69720: LD_INT 3
69722: DOUBLE
69723: EQUAL
69724: IFTRUE 69728
69726: GO 69784
69728: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69729: LD_ADDR_VAR 0 9
69733: PUSH
69734: LD_VAR 0 29
69738: PUSH
69739: LD_VAR 0 30
69743: PUSH
69744: LD_VAR 0 31
69748: PUSH
69749: LD_VAR 0 32
69753: PUSH
69754: LD_VAR 0 33
69758: PUSH
69759: LD_VAR 0 34
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: PUSH
69772: LD_VAR 0 4
69776: PUSH
69777: LD_INT 1
69779: PLUS
69780: ARRAY
69781: ST_TO_ADDR
69782: GO 70267
69784: LD_INT 16
69786: DOUBLE
69787: EQUAL
69788: IFTRUE 69846
69790: LD_INT 17
69792: DOUBLE
69793: EQUAL
69794: IFTRUE 69846
69796: LD_INT 18
69798: DOUBLE
69799: EQUAL
69800: IFTRUE 69846
69802: LD_INT 19
69804: DOUBLE
69805: EQUAL
69806: IFTRUE 69846
69808: LD_INT 22
69810: DOUBLE
69811: EQUAL
69812: IFTRUE 69846
69814: LD_INT 20
69816: DOUBLE
69817: EQUAL
69818: IFTRUE 69846
69820: LD_INT 21
69822: DOUBLE
69823: EQUAL
69824: IFTRUE 69846
69826: LD_INT 23
69828: DOUBLE
69829: EQUAL
69830: IFTRUE 69846
69832: LD_INT 24
69834: DOUBLE
69835: EQUAL
69836: IFTRUE 69846
69838: LD_INT 25
69840: DOUBLE
69841: EQUAL
69842: IFTRUE 69846
69844: GO 69902
69846: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69847: LD_ADDR_VAR 0 9
69851: PUSH
69852: LD_VAR 0 35
69856: PUSH
69857: LD_VAR 0 36
69861: PUSH
69862: LD_VAR 0 37
69866: PUSH
69867: LD_VAR 0 38
69871: PUSH
69872: LD_VAR 0 39
69876: PUSH
69877: LD_VAR 0 40
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: PUSH
69890: LD_VAR 0 4
69894: PUSH
69895: LD_INT 1
69897: PLUS
69898: ARRAY
69899: ST_TO_ADDR
69900: GO 70267
69902: LD_INT 6
69904: DOUBLE
69905: EQUAL
69906: IFTRUE 69958
69908: LD_INT 7
69910: DOUBLE
69911: EQUAL
69912: IFTRUE 69958
69914: LD_INT 8
69916: DOUBLE
69917: EQUAL
69918: IFTRUE 69958
69920: LD_INT 13
69922: DOUBLE
69923: EQUAL
69924: IFTRUE 69958
69926: LD_INT 12
69928: DOUBLE
69929: EQUAL
69930: IFTRUE 69958
69932: LD_INT 15
69934: DOUBLE
69935: EQUAL
69936: IFTRUE 69958
69938: LD_INT 11
69940: DOUBLE
69941: EQUAL
69942: IFTRUE 69958
69944: LD_INT 14
69946: DOUBLE
69947: EQUAL
69948: IFTRUE 69958
69950: LD_INT 10
69952: DOUBLE
69953: EQUAL
69954: IFTRUE 69958
69956: GO 70014
69958: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69959: LD_ADDR_VAR 0 9
69963: PUSH
69964: LD_VAR 0 41
69968: PUSH
69969: LD_VAR 0 42
69973: PUSH
69974: LD_VAR 0 43
69978: PUSH
69979: LD_VAR 0 44
69983: PUSH
69984: LD_VAR 0 45
69988: PUSH
69989: LD_VAR 0 46
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: PUSH
70002: LD_VAR 0 4
70006: PUSH
70007: LD_INT 1
70009: PLUS
70010: ARRAY
70011: ST_TO_ADDR
70012: GO 70267
70014: LD_INT 36
70016: DOUBLE
70017: EQUAL
70018: IFTRUE 70022
70020: GO 70078
70022: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70023: LD_ADDR_VAR 0 9
70027: PUSH
70028: LD_VAR 0 47
70032: PUSH
70033: LD_VAR 0 48
70037: PUSH
70038: LD_VAR 0 49
70042: PUSH
70043: LD_VAR 0 50
70047: PUSH
70048: LD_VAR 0 51
70052: PUSH
70053: LD_VAR 0 52
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: PUSH
70066: LD_VAR 0 4
70070: PUSH
70071: LD_INT 1
70073: PLUS
70074: ARRAY
70075: ST_TO_ADDR
70076: GO 70267
70078: LD_INT 4
70080: DOUBLE
70081: EQUAL
70082: IFTRUE 70104
70084: LD_INT 5
70086: DOUBLE
70087: EQUAL
70088: IFTRUE 70104
70090: LD_INT 34
70092: DOUBLE
70093: EQUAL
70094: IFTRUE 70104
70096: LD_INT 37
70098: DOUBLE
70099: EQUAL
70100: IFTRUE 70104
70102: GO 70160
70104: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70105: LD_ADDR_VAR 0 9
70109: PUSH
70110: LD_VAR 0 53
70114: PUSH
70115: LD_VAR 0 54
70119: PUSH
70120: LD_VAR 0 55
70124: PUSH
70125: LD_VAR 0 56
70129: PUSH
70130: LD_VAR 0 57
70134: PUSH
70135: LD_VAR 0 58
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: PUSH
70148: LD_VAR 0 4
70152: PUSH
70153: LD_INT 1
70155: PLUS
70156: ARRAY
70157: ST_TO_ADDR
70158: GO 70267
70160: LD_INT 31
70162: DOUBLE
70163: EQUAL
70164: IFTRUE 70210
70166: LD_INT 32
70168: DOUBLE
70169: EQUAL
70170: IFTRUE 70210
70172: LD_INT 33
70174: DOUBLE
70175: EQUAL
70176: IFTRUE 70210
70178: LD_INT 27
70180: DOUBLE
70181: EQUAL
70182: IFTRUE 70210
70184: LD_INT 26
70186: DOUBLE
70187: EQUAL
70188: IFTRUE 70210
70190: LD_INT 28
70192: DOUBLE
70193: EQUAL
70194: IFTRUE 70210
70196: LD_INT 29
70198: DOUBLE
70199: EQUAL
70200: IFTRUE 70210
70202: LD_INT 30
70204: DOUBLE
70205: EQUAL
70206: IFTRUE 70210
70208: GO 70266
70210: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70211: LD_ADDR_VAR 0 9
70215: PUSH
70216: LD_VAR 0 59
70220: PUSH
70221: LD_VAR 0 60
70225: PUSH
70226: LD_VAR 0 61
70230: PUSH
70231: LD_VAR 0 62
70235: PUSH
70236: LD_VAR 0 63
70240: PUSH
70241: LD_VAR 0 64
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: PUSH
70254: LD_VAR 0 4
70258: PUSH
70259: LD_INT 1
70261: PLUS
70262: ARRAY
70263: ST_TO_ADDR
70264: GO 70267
70266: POP
// temp_list2 = [ ] ;
70267: LD_ADDR_VAR 0 10
70271: PUSH
70272: EMPTY
70273: ST_TO_ADDR
// for i in temp_list do
70274: LD_ADDR_VAR 0 8
70278: PUSH
70279: LD_VAR 0 9
70283: PUSH
70284: FOR_IN
70285: IFFALSE 70337
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70287: LD_ADDR_VAR 0 10
70291: PUSH
70292: LD_VAR 0 10
70296: PUSH
70297: LD_VAR 0 8
70301: PUSH
70302: LD_INT 1
70304: ARRAY
70305: PUSH
70306: LD_VAR 0 2
70310: PLUS
70311: PUSH
70312: LD_VAR 0 8
70316: PUSH
70317: LD_INT 2
70319: ARRAY
70320: PUSH
70321: LD_VAR 0 3
70325: PLUS
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: EMPTY
70332: LIST
70333: ADD
70334: ST_TO_ADDR
70335: GO 70284
70337: POP
70338: POP
// result = temp_list2 ;
70339: LD_ADDR_VAR 0 7
70343: PUSH
70344: LD_VAR 0 10
70348: ST_TO_ADDR
// end ;
70349: LD_VAR 0 7
70353: RET
// export function EnemyInRange ( unit , dist ) ; begin
70354: LD_INT 0
70356: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70357: LD_ADDR_VAR 0 3
70361: PUSH
70362: LD_VAR 0 1
70366: PPUSH
70367: CALL_OW 255
70371: PPUSH
70372: LD_VAR 0 1
70376: PPUSH
70377: CALL_OW 250
70381: PPUSH
70382: LD_VAR 0 1
70386: PPUSH
70387: CALL_OW 251
70391: PPUSH
70392: LD_VAR 0 2
70396: PPUSH
70397: CALL 43750 0 4
70401: PUSH
70402: LD_INT 4
70404: ARRAY
70405: ST_TO_ADDR
// end ;
70406: LD_VAR 0 3
70410: RET
// export function PlayerSeeMe ( unit ) ; begin
70411: LD_INT 0
70413: PPUSH
// result := See ( your_side , unit ) ;
70414: LD_ADDR_VAR 0 2
70418: PUSH
70419: LD_OWVAR 2
70423: PPUSH
70424: LD_VAR 0 1
70428: PPUSH
70429: CALL_OW 292
70433: ST_TO_ADDR
// end ;
70434: LD_VAR 0 2
70438: RET
// export function ReverseDir ( unit ) ; begin
70439: LD_INT 0
70441: PPUSH
// if not unit then
70442: LD_VAR 0 1
70446: NOT
70447: IFFALSE 70451
// exit ;
70449: GO 70474
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70451: LD_ADDR_VAR 0 2
70455: PUSH
70456: LD_VAR 0 1
70460: PPUSH
70461: CALL_OW 254
70465: PUSH
70466: LD_INT 3
70468: PLUS
70469: PUSH
70470: LD_INT 6
70472: MOD
70473: ST_TO_ADDR
// end ;
70474: LD_VAR 0 2
70478: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70479: LD_INT 0
70481: PPUSH
70482: PPUSH
70483: PPUSH
70484: PPUSH
70485: PPUSH
// if not hexes then
70486: LD_VAR 0 2
70490: NOT
70491: IFFALSE 70495
// exit ;
70493: GO 70643
// dist := 9999 ;
70495: LD_ADDR_VAR 0 5
70499: PUSH
70500: LD_INT 9999
70502: ST_TO_ADDR
// for i = 1 to hexes do
70503: LD_ADDR_VAR 0 4
70507: PUSH
70508: DOUBLE
70509: LD_INT 1
70511: DEC
70512: ST_TO_ADDR
70513: LD_VAR 0 2
70517: PUSH
70518: FOR_TO
70519: IFFALSE 70631
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70521: LD_VAR 0 1
70525: PPUSH
70526: LD_VAR 0 2
70530: PUSH
70531: LD_VAR 0 4
70535: ARRAY
70536: PUSH
70537: LD_INT 1
70539: ARRAY
70540: PPUSH
70541: LD_VAR 0 2
70545: PUSH
70546: LD_VAR 0 4
70550: ARRAY
70551: PUSH
70552: LD_INT 2
70554: ARRAY
70555: PPUSH
70556: CALL_OW 297
70560: PUSH
70561: LD_VAR 0 5
70565: LESS
70566: IFFALSE 70629
// begin hex := hexes [ i ] ;
70568: LD_ADDR_VAR 0 7
70572: PUSH
70573: LD_VAR 0 2
70577: PUSH
70578: LD_VAR 0 4
70582: ARRAY
70583: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70584: LD_ADDR_VAR 0 5
70588: PUSH
70589: LD_VAR 0 1
70593: PPUSH
70594: LD_VAR 0 2
70598: PUSH
70599: LD_VAR 0 4
70603: ARRAY
70604: PUSH
70605: LD_INT 1
70607: ARRAY
70608: PPUSH
70609: LD_VAR 0 2
70613: PUSH
70614: LD_VAR 0 4
70618: ARRAY
70619: PUSH
70620: LD_INT 2
70622: ARRAY
70623: PPUSH
70624: CALL_OW 297
70628: ST_TO_ADDR
// end ; end ;
70629: GO 70518
70631: POP
70632: POP
// result := hex ;
70633: LD_ADDR_VAR 0 3
70637: PUSH
70638: LD_VAR 0 7
70642: ST_TO_ADDR
// end ;
70643: LD_VAR 0 3
70647: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70648: LD_INT 0
70650: PPUSH
70651: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70652: LD_VAR 0 1
70656: NOT
70657: PUSH
70658: LD_VAR 0 1
70662: PUSH
70663: LD_INT 21
70665: PUSH
70666: LD_INT 2
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 23
70675: PUSH
70676: LD_INT 2
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PPUSH
70687: CALL_OW 69
70691: IN
70692: NOT
70693: OR
70694: IFFALSE 70698
// exit ;
70696: GO 70745
// for i = 1 to 3 do
70698: LD_ADDR_VAR 0 3
70702: PUSH
70703: DOUBLE
70704: LD_INT 1
70706: DEC
70707: ST_TO_ADDR
70708: LD_INT 3
70710: PUSH
70711: FOR_TO
70712: IFFALSE 70743
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70714: LD_VAR 0 1
70718: PPUSH
70719: CALL_OW 250
70723: PPUSH
70724: LD_VAR 0 1
70728: PPUSH
70729: CALL_OW 251
70733: PPUSH
70734: LD_INT 1
70736: PPUSH
70737: CALL_OW 453
70741: GO 70711
70743: POP
70744: POP
// end ;
70745: LD_VAR 0 2
70749: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70750: LD_INT 0
70752: PPUSH
70753: PPUSH
70754: PPUSH
70755: PPUSH
70756: PPUSH
70757: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70758: LD_VAR 0 1
70762: NOT
70763: PUSH
70764: LD_VAR 0 2
70768: NOT
70769: OR
70770: PUSH
70771: LD_VAR 0 1
70775: PPUSH
70776: CALL_OW 314
70780: OR
70781: IFFALSE 70785
// exit ;
70783: GO 71226
// x := GetX ( enemy_unit ) ;
70785: LD_ADDR_VAR 0 7
70789: PUSH
70790: LD_VAR 0 2
70794: PPUSH
70795: CALL_OW 250
70799: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70800: LD_ADDR_VAR 0 8
70804: PUSH
70805: LD_VAR 0 2
70809: PPUSH
70810: CALL_OW 251
70814: ST_TO_ADDR
// if not x or not y then
70815: LD_VAR 0 7
70819: NOT
70820: PUSH
70821: LD_VAR 0 8
70825: NOT
70826: OR
70827: IFFALSE 70831
// exit ;
70829: GO 71226
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70831: LD_ADDR_VAR 0 6
70835: PUSH
70836: LD_VAR 0 7
70840: PPUSH
70841: LD_INT 0
70843: PPUSH
70844: LD_INT 4
70846: PPUSH
70847: CALL_OW 272
70851: PUSH
70852: LD_VAR 0 8
70856: PPUSH
70857: LD_INT 0
70859: PPUSH
70860: LD_INT 4
70862: PPUSH
70863: CALL_OW 273
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_VAR 0 7
70876: PPUSH
70877: LD_INT 1
70879: PPUSH
70880: LD_INT 4
70882: PPUSH
70883: CALL_OW 272
70887: PUSH
70888: LD_VAR 0 8
70892: PPUSH
70893: LD_INT 1
70895: PPUSH
70896: LD_INT 4
70898: PPUSH
70899: CALL_OW 273
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_VAR 0 7
70912: PPUSH
70913: LD_INT 2
70915: PPUSH
70916: LD_INT 4
70918: PPUSH
70919: CALL_OW 272
70923: PUSH
70924: LD_VAR 0 8
70928: PPUSH
70929: LD_INT 2
70931: PPUSH
70932: LD_INT 4
70934: PPUSH
70935: CALL_OW 273
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_VAR 0 7
70948: PPUSH
70949: LD_INT 3
70951: PPUSH
70952: LD_INT 4
70954: PPUSH
70955: CALL_OW 272
70959: PUSH
70960: LD_VAR 0 8
70964: PPUSH
70965: LD_INT 3
70967: PPUSH
70968: LD_INT 4
70970: PPUSH
70971: CALL_OW 273
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_VAR 0 7
70984: PPUSH
70985: LD_INT 4
70987: PPUSH
70988: LD_INT 4
70990: PPUSH
70991: CALL_OW 272
70995: PUSH
70996: LD_VAR 0 8
71000: PPUSH
71001: LD_INT 4
71003: PPUSH
71004: LD_INT 4
71006: PPUSH
71007: CALL_OW 273
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: LD_VAR 0 7
71020: PPUSH
71021: LD_INT 5
71023: PPUSH
71024: LD_INT 4
71026: PPUSH
71027: CALL_OW 272
71031: PUSH
71032: LD_VAR 0 8
71036: PPUSH
71037: LD_INT 5
71039: PPUSH
71040: LD_INT 4
71042: PPUSH
71043: CALL_OW 273
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: ST_TO_ADDR
// for i = tmp downto 1 do
71060: LD_ADDR_VAR 0 4
71064: PUSH
71065: DOUBLE
71066: LD_VAR 0 6
71070: INC
71071: ST_TO_ADDR
71072: LD_INT 1
71074: PUSH
71075: FOR_DOWNTO
71076: IFFALSE 71177
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71078: LD_VAR 0 6
71082: PUSH
71083: LD_VAR 0 4
71087: ARRAY
71088: PUSH
71089: LD_INT 1
71091: ARRAY
71092: PPUSH
71093: LD_VAR 0 6
71097: PUSH
71098: LD_VAR 0 4
71102: ARRAY
71103: PUSH
71104: LD_INT 2
71106: ARRAY
71107: PPUSH
71108: CALL_OW 488
71112: NOT
71113: PUSH
71114: LD_VAR 0 6
71118: PUSH
71119: LD_VAR 0 4
71123: ARRAY
71124: PUSH
71125: LD_INT 1
71127: ARRAY
71128: PPUSH
71129: LD_VAR 0 6
71133: PUSH
71134: LD_VAR 0 4
71138: ARRAY
71139: PUSH
71140: LD_INT 2
71142: ARRAY
71143: PPUSH
71144: CALL_OW 428
71148: PUSH
71149: LD_INT 0
71151: NONEQUAL
71152: OR
71153: IFFALSE 71175
// tmp := Delete ( tmp , i ) ;
71155: LD_ADDR_VAR 0 6
71159: PUSH
71160: LD_VAR 0 6
71164: PPUSH
71165: LD_VAR 0 4
71169: PPUSH
71170: CALL_OW 3
71174: ST_TO_ADDR
71175: GO 71075
71177: POP
71178: POP
// j := GetClosestHex ( unit , tmp ) ;
71179: LD_ADDR_VAR 0 5
71183: PUSH
71184: LD_VAR 0 1
71188: PPUSH
71189: LD_VAR 0 6
71193: PPUSH
71194: CALL 70479 0 2
71198: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71199: LD_VAR 0 1
71203: PPUSH
71204: LD_VAR 0 5
71208: PUSH
71209: LD_INT 1
71211: ARRAY
71212: PPUSH
71213: LD_VAR 0 5
71217: PUSH
71218: LD_INT 2
71220: ARRAY
71221: PPUSH
71222: CALL_OW 111
// end ;
71226: LD_VAR 0 3
71230: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71231: LD_INT 0
71233: PPUSH
71234: PPUSH
71235: PPUSH
// uc_side = 0 ;
71236: LD_ADDR_OWVAR 20
71240: PUSH
71241: LD_INT 0
71243: ST_TO_ADDR
// uc_nation = 0 ;
71244: LD_ADDR_OWVAR 21
71248: PUSH
71249: LD_INT 0
71251: ST_TO_ADDR
// InitHc_All ( ) ;
71252: CALL_OW 584
// InitVc ;
71256: CALL_OW 20
// if mastodonts then
71260: LD_VAR 0 6
71264: IFFALSE 71331
// for i = 1 to mastodonts do
71266: LD_ADDR_VAR 0 11
71270: PUSH
71271: DOUBLE
71272: LD_INT 1
71274: DEC
71275: ST_TO_ADDR
71276: LD_VAR 0 6
71280: PUSH
71281: FOR_TO
71282: IFFALSE 71329
// begin vc_chassis := 31 ;
71284: LD_ADDR_OWVAR 37
71288: PUSH
71289: LD_INT 31
71291: ST_TO_ADDR
// vc_control := control_rider ;
71292: LD_ADDR_OWVAR 38
71296: PUSH
71297: LD_INT 4
71299: ST_TO_ADDR
// animal := CreateVehicle ;
71300: LD_ADDR_VAR 0 12
71304: PUSH
71305: CALL_OW 45
71309: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71310: LD_VAR 0 12
71314: PPUSH
71315: LD_VAR 0 8
71319: PPUSH
71320: LD_INT 0
71322: PPUSH
71323: CALL 73519 0 3
// end ;
71327: GO 71281
71329: POP
71330: POP
// if horses then
71331: LD_VAR 0 5
71335: IFFALSE 71402
// for i = 1 to horses do
71337: LD_ADDR_VAR 0 11
71341: PUSH
71342: DOUBLE
71343: LD_INT 1
71345: DEC
71346: ST_TO_ADDR
71347: LD_VAR 0 5
71351: PUSH
71352: FOR_TO
71353: IFFALSE 71400
// begin hc_class := 21 ;
71355: LD_ADDR_OWVAR 28
71359: PUSH
71360: LD_INT 21
71362: ST_TO_ADDR
// hc_gallery :=  ;
71363: LD_ADDR_OWVAR 33
71367: PUSH
71368: LD_STRING 
71370: ST_TO_ADDR
// animal := CreateHuman ;
71371: LD_ADDR_VAR 0 12
71375: PUSH
71376: CALL_OW 44
71380: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71381: LD_VAR 0 12
71385: PPUSH
71386: LD_VAR 0 8
71390: PPUSH
71391: LD_INT 0
71393: PPUSH
71394: CALL 73519 0 3
// end ;
71398: GO 71352
71400: POP
71401: POP
// if birds then
71402: LD_VAR 0 1
71406: IFFALSE 71473
// for i = 1 to birds do
71408: LD_ADDR_VAR 0 11
71412: PUSH
71413: DOUBLE
71414: LD_INT 1
71416: DEC
71417: ST_TO_ADDR
71418: LD_VAR 0 1
71422: PUSH
71423: FOR_TO
71424: IFFALSE 71471
// begin hc_class = 18 ;
71426: LD_ADDR_OWVAR 28
71430: PUSH
71431: LD_INT 18
71433: ST_TO_ADDR
// hc_gallery =  ;
71434: LD_ADDR_OWVAR 33
71438: PUSH
71439: LD_STRING 
71441: ST_TO_ADDR
// animal := CreateHuman ;
71442: LD_ADDR_VAR 0 12
71446: PUSH
71447: CALL_OW 44
71451: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71452: LD_VAR 0 12
71456: PPUSH
71457: LD_VAR 0 8
71461: PPUSH
71462: LD_INT 0
71464: PPUSH
71465: CALL 73519 0 3
// end ;
71469: GO 71423
71471: POP
71472: POP
// if tigers then
71473: LD_VAR 0 2
71477: IFFALSE 71561
// for i = 1 to tigers do
71479: LD_ADDR_VAR 0 11
71483: PUSH
71484: DOUBLE
71485: LD_INT 1
71487: DEC
71488: ST_TO_ADDR
71489: LD_VAR 0 2
71493: PUSH
71494: FOR_TO
71495: IFFALSE 71559
// begin hc_class = class_tiger ;
71497: LD_ADDR_OWVAR 28
71501: PUSH
71502: LD_INT 14
71504: ST_TO_ADDR
// hc_gallery =  ;
71505: LD_ADDR_OWVAR 33
71509: PUSH
71510: LD_STRING 
71512: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71513: LD_ADDR_OWVAR 35
71517: PUSH
71518: LD_INT 7
71520: NEG
71521: PPUSH
71522: LD_INT 7
71524: PPUSH
71525: CALL_OW 12
71529: ST_TO_ADDR
// animal := CreateHuman ;
71530: LD_ADDR_VAR 0 12
71534: PUSH
71535: CALL_OW 44
71539: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71540: LD_VAR 0 12
71544: PPUSH
71545: LD_VAR 0 8
71549: PPUSH
71550: LD_INT 0
71552: PPUSH
71553: CALL 73519 0 3
// end ;
71557: GO 71494
71559: POP
71560: POP
// if apemans then
71561: LD_VAR 0 3
71565: IFFALSE 71688
// for i = 1 to apemans do
71567: LD_ADDR_VAR 0 11
71571: PUSH
71572: DOUBLE
71573: LD_INT 1
71575: DEC
71576: ST_TO_ADDR
71577: LD_VAR 0 3
71581: PUSH
71582: FOR_TO
71583: IFFALSE 71686
// begin hc_class = class_apeman ;
71585: LD_ADDR_OWVAR 28
71589: PUSH
71590: LD_INT 12
71592: ST_TO_ADDR
// hc_gallery =  ;
71593: LD_ADDR_OWVAR 33
71597: PUSH
71598: LD_STRING 
71600: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71601: LD_ADDR_OWVAR 35
71605: PUSH
71606: LD_INT 2
71608: NEG
71609: PPUSH
71610: LD_INT 2
71612: PPUSH
71613: CALL_OW 12
71617: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71618: LD_ADDR_OWVAR 31
71622: PUSH
71623: LD_INT 1
71625: PPUSH
71626: LD_INT 3
71628: PPUSH
71629: CALL_OW 12
71633: PUSH
71634: LD_INT 1
71636: PPUSH
71637: LD_INT 3
71639: PPUSH
71640: CALL_OW 12
71644: PUSH
71645: LD_INT 0
71647: PUSH
71648: LD_INT 0
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: ST_TO_ADDR
// animal := CreateHuman ;
71657: LD_ADDR_VAR 0 12
71661: PUSH
71662: CALL_OW 44
71666: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71667: LD_VAR 0 12
71671: PPUSH
71672: LD_VAR 0 8
71676: PPUSH
71677: LD_INT 0
71679: PPUSH
71680: CALL 73519 0 3
// end ;
71684: GO 71582
71686: POP
71687: POP
// if enchidnas then
71688: LD_VAR 0 4
71692: IFFALSE 71759
// for i = 1 to enchidnas do
71694: LD_ADDR_VAR 0 11
71698: PUSH
71699: DOUBLE
71700: LD_INT 1
71702: DEC
71703: ST_TO_ADDR
71704: LD_VAR 0 4
71708: PUSH
71709: FOR_TO
71710: IFFALSE 71757
// begin hc_class = 13 ;
71712: LD_ADDR_OWVAR 28
71716: PUSH
71717: LD_INT 13
71719: ST_TO_ADDR
// hc_gallery =  ;
71720: LD_ADDR_OWVAR 33
71724: PUSH
71725: LD_STRING 
71727: ST_TO_ADDR
// animal := CreateHuman ;
71728: LD_ADDR_VAR 0 12
71732: PUSH
71733: CALL_OW 44
71737: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71738: LD_VAR 0 12
71742: PPUSH
71743: LD_VAR 0 8
71747: PPUSH
71748: LD_INT 0
71750: PPUSH
71751: CALL 73519 0 3
// end ;
71755: GO 71709
71757: POP
71758: POP
// if fishes then
71759: LD_VAR 0 7
71763: IFFALSE 71830
// for i = 1 to fishes do
71765: LD_ADDR_VAR 0 11
71769: PUSH
71770: DOUBLE
71771: LD_INT 1
71773: DEC
71774: ST_TO_ADDR
71775: LD_VAR 0 7
71779: PUSH
71780: FOR_TO
71781: IFFALSE 71828
// begin hc_class = 20 ;
71783: LD_ADDR_OWVAR 28
71787: PUSH
71788: LD_INT 20
71790: ST_TO_ADDR
// hc_gallery =  ;
71791: LD_ADDR_OWVAR 33
71795: PUSH
71796: LD_STRING 
71798: ST_TO_ADDR
// animal := CreateHuman ;
71799: LD_ADDR_VAR 0 12
71803: PUSH
71804: CALL_OW 44
71808: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71809: LD_VAR 0 12
71813: PPUSH
71814: LD_VAR 0 9
71818: PPUSH
71819: LD_INT 0
71821: PPUSH
71822: CALL 73519 0 3
// end ;
71826: GO 71780
71828: POP
71829: POP
// end ;
71830: LD_VAR 0 10
71834: RET
// export function WantHeal ( sci , unit ) ; begin
71835: LD_INT 0
71837: PPUSH
// if GetTaskList ( sci ) > 0 then
71838: LD_VAR 0 1
71842: PPUSH
71843: CALL_OW 437
71847: PUSH
71848: LD_INT 0
71850: GREATER
71851: IFFALSE 71921
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71853: LD_VAR 0 1
71857: PPUSH
71858: CALL_OW 437
71862: PUSH
71863: LD_INT 1
71865: ARRAY
71866: PUSH
71867: LD_INT 1
71869: ARRAY
71870: PUSH
71871: LD_STRING l
71873: EQUAL
71874: PUSH
71875: LD_VAR 0 1
71879: PPUSH
71880: CALL_OW 437
71884: PUSH
71885: LD_INT 1
71887: ARRAY
71888: PUSH
71889: LD_INT 4
71891: ARRAY
71892: PUSH
71893: LD_VAR 0 2
71897: EQUAL
71898: AND
71899: IFFALSE 71911
// result := true else
71901: LD_ADDR_VAR 0 3
71905: PUSH
71906: LD_INT 1
71908: ST_TO_ADDR
71909: GO 71919
// result := false ;
71911: LD_ADDR_VAR 0 3
71915: PUSH
71916: LD_INT 0
71918: ST_TO_ADDR
// end else
71919: GO 71929
// result := false ;
71921: LD_ADDR_VAR 0 3
71925: PUSH
71926: LD_INT 0
71928: ST_TO_ADDR
// end ;
71929: LD_VAR 0 3
71933: RET
// export function HealTarget ( sci ) ; begin
71934: LD_INT 0
71936: PPUSH
// if not sci then
71937: LD_VAR 0 1
71941: NOT
71942: IFFALSE 71946
// exit ;
71944: GO 72011
// result := 0 ;
71946: LD_ADDR_VAR 0 2
71950: PUSH
71951: LD_INT 0
71953: ST_TO_ADDR
// if GetTaskList ( sci ) then
71954: LD_VAR 0 1
71958: PPUSH
71959: CALL_OW 437
71963: IFFALSE 72011
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71965: LD_VAR 0 1
71969: PPUSH
71970: CALL_OW 437
71974: PUSH
71975: LD_INT 1
71977: ARRAY
71978: PUSH
71979: LD_INT 1
71981: ARRAY
71982: PUSH
71983: LD_STRING l
71985: EQUAL
71986: IFFALSE 72011
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71988: LD_ADDR_VAR 0 2
71992: PUSH
71993: LD_VAR 0 1
71997: PPUSH
71998: CALL_OW 437
72002: PUSH
72003: LD_INT 1
72005: ARRAY
72006: PUSH
72007: LD_INT 4
72009: ARRAY
72010: ST_TO_ADDR
// end ;
72011: LD_VAR 0 2
72015: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72016: LD_INT 0
72018: PPUSH
72019: PPUSH
72020: PPUSH
72021: PPUSH
// if not base_units then
72022: LD_VAR 0 1
72026: NOT
72027: IFFALSE 72031
// exit ;
72029: GO 72118
// result := false ;
72031: LD_ADDR_VAR 0 2
72035: PUSH
72036: LD_INT 0
72038: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72039: LD_ADDR_VAR 0 5
72043: PUSH
72044: LD_VAR 0 1
72048: PPUSH
72049: LD_INT 21
72051: PUSH
72052: LD_INT 3
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PPUSH
72059: CALL_OW 72
72063: ST_TO_ADDR
// if not tmp then
72064: LD_VAR 0 5
72068: NOT
72069: IFFALSE 72073
// exit ;
72071: GO 72118
// for i in tmp do
72073: LD_ADDR_VAR 0 3
72077: PUSH
72078: LD_VAR 0 5
72082: PUSH
72083: FOR_IN
72084: IFFALSE 72116
// begin result := EnemyInRange ( i , 22 ) ;
72086: LD_ADDR_VAR 0 2
72090: PUSH
72091: LD_VAR 0 3
72095: PPUSH
72096: LD_INT 22
72098: PPUSH
72099: CALL 70354 0 2
72103: ST_TO_ADDR
// if result then
72104: LD_VAR 0 2
72108: IFFALSE 72114
// exit ;
72110: POP
72111: POP
72112: GO 72118
// end ;
72114: GO 72083
72116: POP
72117: POP
// end ;
72118: LD_VAR 0 2
72122: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
72123: LD_INT 0
72125: PPUSH
72126: PPUSH
// if not units then
72127: LD_VAR 0 1
72131: NOT
72132: IFFALSE 72136
// exit ;
72134: GO 72206
// result := [ ] ;
72136: LD_ADDR_VAR 0 3
72140: PUSH
72141: EMPTY
72142: ST_TO_ADDR
// for i in units do
72143: LD_ADDR_VAR 0 4
72147: PUSH
72148: LD_VAR 0 1
72152: PUSH
72153: FOR_IN
72154: IFFALSE 72204
// if GetTag ( i ) = tag then
72156: LD_VAR 0 4
72160: PPUSH
72161: CALL_OW 110
72165: PUSH
72166: LD_VAR 0 2
72170: EQUAL
72171: IFFALSE 72202
// result := Replace ( result , result + 1 , i ) ;
72173: LD_ADDR_VAR 0 3
72177: PUSH
72178: LD_VAR 0 3
72182: PPUSH
72183: LD_VAR 0 3
72187: PUSH
72188: LD_INT 1
72190: PLUS
72191: PPUSH
72192: LD_VAR 0 4
72196: PPUSH
72197: CALL_OW 1
72201: ST_TO_ADDR
72202: GO 72153
72204: POP
72205: POP
// end ;
72206: LD_VAR 0 3
72210: RET
// export function IsDriver ( un ) ; begin
72211: LD_INT 0
72213: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72214: LD_ADDR_VAR 0 2
72218: PUSH
72219: LD_VAR 0 1
72223: PUSH
72224: LD_INT 55
72226: PUSH
72227: EMPTY
72228: LIST
72229: PPUSH
72230: CALL_OW 69
72234: IN
72235: ST_TO_ADDR
// end ;
72236: LD_VAR 0 2
72240: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72241: LD_INT 0
72243: PPUSH
72244: PPUSH
// list := [ ] ;
72245: LD_ADDR_VAR 0 5
72249: PUSH
72250: EMPTY
72251: ST_TO_ADDR
// case d of 0 :
72252: LD_VAR 0 3
72256: PUSH
72257: LD_INT 0
72259: DOUBLE
72260: EQUAL
72261: IFTRUE 72265
72263: GO 72398
72265: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72266: LD_ADDR_VAR 0 5
72270: PUSH
72271: LD_VAR 0 1
72275: PUSH
72276: LD_INT 4
72278: MINUS
72279: PUSH
72280: LD_VAR 0 2
72284: PUSH
72285: LD_INT 4
72287: MINUS
72288: PUSH
72289: LD_INT 2
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: LIST
72296: PUSH
72297: LD_VAR 0 1
72301: PUSH
72302: LD_INT 3
72304: MINUS
72305: PUSH
72306: LD_VAR 0 2
72310: PUSH
72311: LD_INT 1
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: LIST
72318: PUSH
72319: LD_VAR 0 1
72323: PUSH
72324: LD_INT 4
72326: PLUS
72327: PUSH
72328: LD_VAR 0 2
72332: PUSH
72333: LD_INT 4
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: LIST
72340: PUSH
72341: LD_VAR 0 1
72345: PUSH
72346: LD_INT 3
72348: PLUS
72349: PUSH
72350: LD_VAR 0 2
72354: PUSH
72355: LD_INT 3
72357: PLUS
72358: PUSH
72359: LD_INT 5
72361: PUSH
72362: EMPTY
72363: LIST
72364: LIST
72365: LIST
72366: PUSH
72367: LD_VAR 0 1
72371: PUSH
72372: LD_VAR 0 2
72376: PUSH
72377: LD_INT 4
72379: PLUS
72380: PUSH
72381: LD_INT 0
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: LIST
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: ST_TO_ADDR
// end ; 1 :
72396: GO 73096
72398: LD_INT 1
72400: DOUBLE
72401: EQUAL
72402: IFTRUE 72406
72404: GO 72539
72406: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72407: LD_ADDR_VAR 0 5
72411: PUSH
72412: LD_VAR 0 1
72416: PUSH
72417: LD_VAR 0 2
72421: PUSH
72422: LD_INT 4
72424: MINUS
72425: PUSH
72426: LD_INT 3
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: LIST
72433: PUSH
72434: LD_VAR 0 1
72438: PUSH
72439: LD_INT 3
72441: MINUS
72442: PUSH
72443: LD_VAR 0 2
72447: PUSH
72448: LD_INT 3
72450: MINUS
72451: PUSH
72452: LD_INT 2
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: LIST
72459: PUSH
72460: LD_VAR 0 1
72464: PUSH
72465: LD_INT 4
72467: MINUS
72468: PUSH
72469: LD_VAR 0 2
72473: PUSH
72474: LD_INT 1
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: LIST
72481: PUSH
72482: LD_VAR 0 1
72486: PUSH
72487: LD_VAR 0 2
72491: PUSH
72492: LD_INT 3
72494: PLUS
72495: PUSH
72496: LD_INT 0
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: LIST
72503: PUSH
72504: LD_VAR 0 1
72508: PUSH
72509: LD_INT 4
72511: PLUS
72512: PUSH
72513: LD_VAR 0 2
72517: PUSH
72518: LD_INT 4
72520: PLUS
72521: PUSH
72522: LD_INT 5
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: LIST
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: ST_TO_ADDR
// end ; 2 :
72537: GO 73096
72539: LD_INT 2
72541: DOUBLE
72542: EQUAL
72543: IFTRUE 72547
72545: GO 72676
72547: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72548: LD_ADDR_VAR 0 5
72552: PUSH
72553: LD_VAR 0 1
72557: PUSH
72558: LD_VAR 0 2
72562: PUSH
72563: LD_INT 3
72565: MINUS
72566: PUSH
72567: LD_INT 3
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: LIST
72574: PUSH
72575: LD_VAR 0 1
72579: PUSH
72580: LD_INT 4
72582: PLUS
72583: PUSH
72584: LD_VAR 0 2
72588: PUSH
72589: LD_INT 4
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: LIST
72596: PUSH
72597: LD_VAR 0 1
72601: PUSH
72602: LD_VAR 0 2
72606: PUSH
72607: LD_INT 4
72609: PLUS
72610: PUSH
72611: LD_INT 0
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: LIST
72618: PUSH
72619: LD_VAR 0 1
72623: PUSH
72624: LD_INT 3
72626: MINUS
72627: PUSH
72628: LD_VAR 0 2
72632: PUSH
72633: LD_INT 1
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: LIST
72640: PUSH
72641: LD_VAR 0 1
72645: PUSH
72646: LD_INT 4
72648: MINUS
72649: PUSH
72650: LD_VAR 0 2
72654: PUSH
72655: LD_INT 4
72657: MINUS
72658: PUSH
72659: LD_INT 2
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: LIST
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: ST_TO_ADDR
// end ; 3 :
72674: GO 73096
72676: LD_INT 3
72678: DOUBLE
72679: EQUAL
72680: IFTRUE 72684
72682: GO 72817
72684: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72685: LD_ADDR_VAR 0 5
72689: PUSH
72690: LD_VAR 0 1
72694: PUSH
72695: LD_INT 3
72697: PLUS
72698: PUSH
72699: LD_VAR 0 2
72703: PUSH
72704: LD_INT 4
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: LIST
72711: PUSH
72712: LD_VAR 0 1
72716: PUSH
72717: LD_INT 4
72719: PLUS
72720: PUSH
72721: LD_VAR 0 2
72725: PUSH
72726: LD_INT 4
72728: PLUS
72729: PUSH
72730: LD_INT 5
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: LIST
72737: PUSH
72738: LD_VAR 0 1
72742: PUSH
72743: LD_INT 4
72745: MINUS
72746: PUSH
72747: LD_VAR 0 2
72751: PUSH
72752: LD_INT 1
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: LIST
72759: PUSH
72760: LD_VAR 0 1
72764: PUSH
72765: LD_VAR 0 2
72769: PUSH
72770: LD_INT 4
72772: MINUS
72773: PUSH
72774: LD_INT 3
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: LIST
72781: PUSH
72782: LD_VAR 0 1
72786: PUSH
72787: LD_INT 3
72789: MINUS
72790: PUSH
72791: LD_VAR 0 2
72795: PUSH
72796: LD_INT 3
72798: MINUS
72799: PUSH
72800: LD_INT 2
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: LIST
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: LIST
72812: LIST
72813: LIST
72814: ST_TO_ADDR
// end ; 4 :
72815: GO 73096
72817: LD_INT 4
72819: DOUBLE
72820: EQUAL
72821: IFTRUE 72825
72823: GO 72958
72825: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72826: LD_ADDR_VAR 0 5
72830: PUSH
72831: LD_VAR 0 1
72835: PUSH
72836: LD_VAR 0 2
72840: PUSH
72841: LD_INT 4
72843: PLUS
72844: PUSH
72845: LD_INT 0
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: LIST
72852: PUSH
72853: LD_VAR 0 1
72857: PUSH
72858: LD_INT 3
72860: PLUS
72861: PUSH
72862: LD_VAR 0 2
72866: PUSH
72867: LD_INT 3
72869: PLUS
72870: PUSH
72871: LD_INT 5
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: LIST
72878: PUSH
72879: LD_VAR 0 1
72883: PUSH
72884: LD_INT 4
72886: PLUS
72887: PUSH
72888: LD_VAR 0 2
72892: PUSH
72893: LD_INT 4
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: LIST
72900: PUSH
72901: LD_VAR 0 1
72905: PUSH
72906: LD_VAR 0 2
72910: PUSH
72911: LD_INT 3
72913: MINUS
72914: PUSH
72915: LD_INT 3
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: LIST
72922: PUSH
72923: LD_VAR 0 1
72927: PUSH
72928: LD_INT 4
72930: MINUS
72931: PUSH
72932: LD_VAR 0 2
72936: PUSH
72937: LD_INT 4
72939: MINUS
72940: PUSH
72941: LD_INT 2
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: LIST
72948: PUSH
72949: EMPTY
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: ST_TO_ADDR
// end ; 5 :
72956: GO 73096
72958: LD_INT 5
72960: DOUBLE
72961: EQUAL
72962: IFTRUE 72966
72964: GO 73095
72966: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72967: LD_ADDR_VAR 0 5
72971: PUSH
72972: LD_VAR 0 1
72976: PUSH
72977: LD_INT 4
72979: MINUS
72980: PUSH
72981: LD_VAR 0 2
72985: PUSH
72986: LD_INT 1
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: LIST
72993: PUSH
72994: LD_VAR 0 1
72998: PUSH
72999: LD_VAR 0 2
73003: PUSH
73004: LD_INT 4
73006: MINUS
73007: PUSH
73008: LD_INT 3
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: LIST
73015: PUSH
73016: LD_VAR 0 1
73020: PUSH
73021: LD_INT 4
73023: PLUS
73024: PUSH
73025: LD_VAR 0 2
73029: PUSH
73030: LD_INT 4
73032: PLUS
73033: PUSH
73034: LD_INT 5
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: LIST
73041: PUSH
73042: LD_VAR 0 1
73046: PUSH
73047: LD_INT 3
73049: PLUS
73050: PUSH
73051: LD_VAR 0 2
73055: PUSH
73056: LD_INT 4
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: LIST
73063: PUSH
73064: LD_VAR 0 1
73068: PUSH
73069: LD_VAR 0 2
73073: PUSH
73074: LD_INT 3
73076: PLUS
73077: PUSH
73078: LD_INT 0
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: LIST
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: ST_TO_ADDR
// end ; end ;
73093: GO 73096
73095: POP
// result := list ;
73096: LD_ADDR_VAR 0 4
73100: PUSH
73101: LD_VAR 0 5
73105: ST_TO_ADDR
// end ;
73106: LD_VAR 0 4
73110: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73111: LD_INT 0
73113: PPUSH
73114: PPUSH
73115: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73116: LD_VAR 0 1
73120: NOT
73121: PUSH
73122: LD_VAR 0 2
73126: PUSH
73127: LD_INT 1
73129: PUSH
73130: LD_INT 2
73132: PUSH
73133: LD_INT 3
73135: PUSH
73136: LD_INT 4
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: IN
73145: NOT
73146: OR
73147: IFFALSE 73151
// exit ;
73149: GO 73243
// tmp := [ ] ;
73151: LD_ADDR_VAR 0 5
73155: PUSH
73156: EMPTY
73157: ST_TO_ADDR
// for i in units do
73158: LD_ADDR_VAR 0 4
73162: PUSH
73163: LD_VAR 0 1
73167: PUSH
73168: FOR_IN
73169: IFFALSE 73212
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73171: LD_ADDR_VAR 0 5
73175: PUSH
73176: LD_VAR 0 5
73180: PPUSH
73181: LD_VAR 0 5
73185: PUSH
73186: LD_INT 1
73188: PLUS
73189: PPUSH
73190: LD_VAR 0 4
73194: PPUSH
73195: LD_VAR 0 2
73199: PPUSH
73200: CALL_OW 259
73204: PPUSH
73205: CALL_OW 2
73209: ST_TO_ADDR
73210: GO 73168
73212: POP
73213: POP
// if not tmp then
73214: LD_VAR 0 5
73218: NOT
73219: IFFALSE 73223
// exit ;
73221: GO 73243
// result := SortListByListDesc ( units , tmp ) ;
73223: LD_ADDR_VAR 0 3
73227: PUSH
73228: LD_VAR 0 1
73232: PPUSH
73233: LD_VAR 0 5
73237: PPUSH
73238: CALL_OW 77
73242: ST_TO_ADDR
// end ;
73243: LD_VAR 0 3
73247: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73248: LD_INT 0
73250: PPUSH
73251: PPUSH
73252: PPUSH
// result := false ;
73253: LD_ADDR_VAR 0 3
73257: PUSH
73258: LD_INT 0
73260: ST_TO_ADDR
// x := GetX ( building ) ;
73261: LD_ADDR_VAR 0 4
73265: PUSH
73266: LD_VAR 0 2
73270: PPUSH
73271: CALL_OW 250
73275: ST_TO_ADDR
// y := GetY ( building ) ;
73276: LD_ADDR_VAR 0 5
73280: PUSH
73281: LD_VAR 0 2
73285: PPUSH
73286: CALL_OW 251
73290: ST_TO_ADDR
// if not building or not x or not y then
73291: LD_VAR 0 2
73295: NOT
73296: PUSH
73297: LD_VAR 0 4
73301: NOT
73302: OR
73303: PUSH
73304: LD_VAR 0 5
73308: NOT
73309: OR
73310: IFFALSE 73314
// exit ;
73312: GO 73406
// if GetTaskList ( unit ) then
73314: LD_VAR 0 1
73318: PPUSH
73319: CALL_OW 437
73323: IFFALSE 73406
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73325: LD_STRING e
73327: PUSH
73328: LD_VAR 0 1
73332: PPUSH
73333: CALL_OW 437
73337: PUSH
73338: LD_INT 1
73340: ARRAY
73341: PUSH
73342: LD_INT 1
73344: ARRAY
73345: EQUAL
73346: PUSH
73347: LD_VAR 0 4
73351: PUSH
73352: LD_VAR 0 1
73356: PPUSH
73357: CALL_OW 437
73361: PUSH
73362: LD_INT 1
73364: ARRAY
73365: PUSH
73366: LD_INT 2
73368: ARRAY
73369: EQUAL
73370: AND
73371: PUSH
73372: LD_VAR 0 5
73376: PUSH
73377: LD_VAR 0 1
73381: PPUSH
73382: CALL_OW 437
73386: PUSH
73387: LD_INT 1
73389: ARRAY
73390: PUSH
73391: LD_INT 3
73393: ARRAY
73394: EQUAL
73395: AND
73396: IFFALSE 73406
// result := true end ;
73398: LD_ADDR_VAR 0 3
73402: PUSH
73403: LD_INT 1
73405: ST_TO_ADDR
// end ;
73406: LD_VAR 0 3
73410: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73411: LD_INT 0
73413: PPUSH
// result := false ;
73414: LD_ADDR_VAR 0 4
73418: PUSH
73419: LD_INT 0
73421: ST_TO_ADDR
// if GetTaskList ( unit ) then
73422: LD_VAR 0 1
73426: PPUSH
73427: CALL_OW 437
73431: IFFALSE 73514
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73433: LD_STRING M
73435: PUSH
73436: LD_VAR 0 1
73440: PPUSH
73441: CALL_OW 437
73445: PUSH
73446: LD_INT 1
73448: ARRAY
73449: PUSH
73450: LD_INT 1
73452: ARRAY
73453: EQUAL
73454: PUSH
73455: LD_VAR 0 2
73459: PUSH
73460: LD_VAR 0 1
73464: PPUSH
73465: CALL_OW 437
73469: PUSH
73470: LD_INT 1
73472: ARRAY
73473: PUSH
73474: LD_INT 2
73476: ARRAY
73477: EQUAL
73478: AND
73479: PUSH
73480: LD_VAR 0 3
73484: PUSH
73485: LD_VAR 0 1
73489: PPUSH
73490: CALL_OW 437
73494: PUSH
73495: LD_INT 1
73497: ARRAY
73498: PUSH
73499: LD_INT 3
73501: ARRAY
73502: EQUAL
73503: AND
73504: IFFALSE 73514
// result := true ;
73506: LD_ADDR_VAR 0 4
73510: PUSH
73511: LD_INT 1
73513: ST_TO_ADDR
// end ; end ;
73514: LD_VAR 0 4
73518: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73519: LD_INT 0
73521: PPUSH
73522: PPUSH
73523: PPUSH
73524: PPUSH
// if not unit or not area then
73525: LD_VAR 0 1
73529: NOT
73530: PUSH
73531: LD_VAR 0 2
73535: NOT
73536: OR
73537: IFFALSE 73541
// exit ;
73539: GO 73705
// tmp := AreaToList ( area , i ) ;
73541: LD_ADDR_VAR 0 6
73545: PUSH
73546: LD_VAR 0 2
73550: PPUSH
73551: LD_VAR 0 5
73555: PPUSH
73556: CALL_OW 517
73560: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73561: LD_ADDR_VAR 0 5
73565: PUSH
73566: DOUBLE
73567: LD_INT 1
73569: DEC
73570: ST_TO_ADDR
73571: LD_VAR 0 6
73575: PUSH
73576: LD_INT 1
73578: ARRAY
73579: PUSH
73580: FOR_TO
73581: IFFALSE 73703
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
73583: LD_ADDR_VAR 0 7
73587: PUSH
73588: LD_VAR 0 6
73592: PUSH
73593: LD_INT 1
73595: ARRAY
73596: PUSH
73597: LD_VAR 0 5
73601: ARRAY
73602: PUSH
73603: LD_VAR 0 6
73607: PUSH
73608: LD_INT 2
73610: ARRAY
73611: PUSH
73612: LD_VAR 0 5
73616: ARRAY
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
73622: LD_VAR 0 7
73626: PUSH
73627: LD_INT 1
73629: ARRAY
73630: PPUSH
73631: LD_VAR 0 7
73635: PUSH
73636: LD_INT 2
73638: ARRAY
73639: PPUSH
73640: CALL_OW 428
73644: PUSH
73645: LD_INT 0
73647: EQUAL
73648: IFFALSE 73701
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73650: LD_VAR 0 1
73654: PPUSH
73655: LD_VAR 0 7
73659: PUSH
73660: LD_INT 1
73662: ARRAY
73663: PPUSH
73664: LD_VAR 0 7
73668: PUSH
73669: LD_INT 2
73671: ARRAY
73672: PPUSH
73673: LD_VAR 0 3
73677: PPUSH
73678: CALL_OW 48
// result := IsPlaced ( unit ) ;
73682: LD_ADDR_VAR 0 4
73686: PUSH
73687: LD_VAR 0 1
73691: PPUSH
73692: CALL_OW 305
73696: ST_TO_ADDR
// exit ;
73697: POP
73698: POP
73699: GO 73705
// end ; end ;
73701: GO 73580
73703: POP
73704: POP
// end ;
73705: LD_VAR 0 4
73709: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73710: LD_INT 0
73712: PPUSH
73713: PPUSH
73714: PPUSH
// if not side or side > 8 then
73715: LD_VAR 0 1
73719: NOT
73720: PUSH
73721: LD_VAR 0 1
73725: PUSH
73726: LD_INT 8
73728: GREATER
73729: OR
73730: IFFALSE 73734
// exit ;
73732: GO 73921
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73734: LD_ADDR_VAR 0 4
73738: PUSH
73739: LD_INT 22
73741: PUSH
73742: LD_VAR 0 1
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: PUSH
73751: LD_INT 21
73753: PUSH
73754: LD_INT 3
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PPUSH
73765: CALL_OW 69
73769: ST_TO_ADDR
// if not tmp then
73770: LD_VAR 0 4
73774: NOT
73775: IFFALSE 73779
// exit ;
73777: GO 73921
// enable_addtolog := true ;
73779: LD_ADDR_OWVAR 81
73783: PUSH
73784: LD_INT 1
73786: ST_TO_ADDR
// AddToLog ( [ ) ;
73787: LD_STRING [
73789: PPUSH
73790: CALL_OW 561
// for i in tmp do
73794: LD_ADDR_VAR 0 3
73798: PUSH
73799: LD_VAR 0 4
73803: PUSH
73804: FOR_IN
73805: IFFALSE 73912
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73807: LD_STRING [
73809: PUSH
73810: LD_VAR 0 3
73814: PPUSH
73815: CALL_OW 266
73819: STR
73820: PUSH
73821: LD_STRING , 
73823: STR
73824: PUSH
73825: LD_VAR 0 3
73829: PPUSH
73830: CALL_OW 250
73834: STR
73835: PUSH
73836: LD_STRING , 
73838: STR
73839: PUSH
73840: LD_VAR 0 3
73844: PPUSH
73845: CALL_OW 251
73849: STR
73850: PUSH
73851: LD_STRING , 
73853: STR
73854: PUSH
73855: LD_VAR 0 3
73859: PPUSH
73860: CALL_OW 254
73864: STR
73865: PUSH
73866: LD_STRING , 
73868: STR
73869: PUSH
73870: LD_VAR 0 3
73874: PPUSH
73875: LD_INT 1
73877: PPUSH
73878: CALL_OW 268
73882: STR
73883: PUSH
73884: LD_STRING , 
73886: STR
73887: PUSH
73888: LD_VAR 0 3
73892: PPUSH
73893: LD_INT 2
73895: PPUSH
73896: CALL_OW 268
73900: STR
73901: PUSH
73902: LD_STRING ],
73904: STR
73905: PPUSH
73906: CALL_OW 561
// end ;
73910: GO 73804
73912: POP
73913: POP
// AddToLog ( ]; ) ;
73914: LD_STRING ];
73916: PPUSH
73917: CALL_OW 561
// end ;
73921: LD_VAR 0 2
73925: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73926: LD_INT 0
73928: PPUSH
73929: PPUSH
73930: PPUSH
73931: PPUSH
73932: PPUSH
// if not area or not rate or not max then
73933: LD_VAR 0 1
73937: NOT
73938: PUSH
73939: LD_VAR 0 2
73943: NOT
73944: OR
73945: PUSH
73946: LD_VAR 0 4
73950: NOT
73951: OR
73952: IFFALSE 73956
// exit ;
73954: GO 74148
// while 1 do
73956: LD_INT 1
73958: IFFALSE 74148
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73960: LD_ADDR_VAR 0 9
73964: PUSH
73965: LD_VAR 0 1
73969: PPUSH
73970: LD_INT 1
73972: PPUSH
73973: CALL_OW 287
73977: PUSH
73978: LD_INT 10
73980: MUL
73981: ST_TO_ADDR
// r := rate / 10 ;
73982: LD_ADDR_VAR 0 7
73986: PUSH
73987: LD_VAR 0 2
73991: PUSH
73992: LD_INT 10
73994: DIVREAL
73995: ST_TO_ADDR
// time := 1 1$00 ;
73996: LD_ADDR_VAR 0 8
74000: PUSH
74001: LD_INT 2100
74003: ST_TO_ADDR
// if amount < min then
74004: LD_VAR 0 9
74008: PUSH
74009: LD_VAR 0 3
74013: LESS
74014: IFFALSE 74032
// r := r * 2 else
74016: LD_ADDR_VAR 0 7
74020: PUSH
74021: LD_VAR 0 7
74025: PUSH
74026: LD_INT 2
74028: MUL
74029: ST_TO_ADDR
74030: GO 74058
// if amount > max then
74032: LD_VAR 0 9
74036: PUSH
74037: LD_VAR 0 4
74041: GREATER
74042: IFFALSE 74058
// r := r / 2 ;
74044: LD_ADDR_VAR 0 7
74048: PUSH
74049: LD_VAR 0 7
74053: PUSH
74054: LD_INT 2
74056: DIVREAL
74057: ST_TO_ADDR
// time := time / r ;
74058: LD_ADDR_VAR 0 8
74062: PUSH
74063: LD_VAR 0 8
74067: PUSH
74068: LD_VAR 0 7
74072: DIVREAL
74073: ST_TO_ADDR
// if time < 0 then
74074: LD_VAR 0 8
74078: PUSH
74079: LD_INT 0
74081: LESS
74082: IFFALSE 74099
// time := time * - 1 ;
74084: LD_ADDR_VAR 0 8
74088: PUSH
74089: LD_VAR 0 8
74093: PUSH
74094: LD_INT 1
74096: NEG
74097: MUL
74098: ST_TO_ADDR
// wait ( time ) ;
74099: LD_VAR 0 8
74103: PPUSH
74104: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
74108: LD_INT 35
74110: PPUSH
74111: LD_INT 875
74113: PPUSH
74114: CALL_OW 12
74118: PPUSH
74119: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74123: LD_INT 1
74125: PPUSH
74126: LD_INT 5
74128: PPUSH
74129: CALL_OW 12
74133: PPUSH
74134: LD_VAR 0 1
74138: PPUSH
74139: LD_INT 1
74141: PPUSH
74142: CALL_OW 55
// end ;
74146: GO 73956
// end ;
74148: LD_VAR 0 5
74152: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74153: LD_INT 0
74155: PPUSH
74156: PPUSH
74157: PPUSH
74158: PPUSH
74159: PPUSH
74160: PPUSH
74161: PPUSH
74162: PPUSH
// if not turrets or not factories then
74163: LD_VAR 0 1
74167: NOT
74168: PUSH
74169: LD_VAR 0 2
74173: NOT
74174: OR
74175: IFFALSE 74179
// exit ;
74177: GO 74486
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74179: LD_ADDR_VAR 0 10
74183: PUSH
74184: LD_INT 5
74186: PUSH
74187: LD_INT 6
74189: PUSH
74190: EMPTY
74191: LIST
74192: LIST
74193: PUSH
74194: LD_INT 2
74196: PUSH
74197: LD_INT 4
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: PUSH
74204: LD_INT 3
74206: PUSH
74207: LD_INT 5
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: LIST
74218: PUSH
74219: LD_INT 24
74221: PUSH
74222: LD_INT 25
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: PUSH
74229: LD_INT 23
74231: PUSH
74232: LD_INT 27
74234: PUSH
74235: EMPTY
74236: LIST
74237: LIST
74238: PUSH
74239: EMPTY
74240: LIST
74241: LIST
74242: PUSH
74243: LD_INT 42
74245: PUSH
74246: LD_INT 43
74248: PUSH
74249: EMPTY
74250: LIST
74251: LIST
74252: PUSH
74253: LD_INT 44
74255: PUSH
74256: LD_INT 46
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: PUSH
74263: LD_INT 45
74265: PUSH
74266: LD_INT 47
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: LIST
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: LIST
74282: ST_TO_ADDR
// result := [ ] ;
74283: LD_ADDR_VAR 0 3
74287: PUSH
74288: EMPTY
74289: ST_TO_ADDR
// for i in turrets do
74290: LD_ADDR_VAR 0 4
74294: PUSH
74295: LD_VAR 0 1
74299: PUSH
74300: FOR_IN
74301: IFFALSE 74484
// begin nat := GetNation ( i ) ;
74303: LD_ADDR_VAR 0 7
74307: PUSH
74308: LD_VAR 0 4
74312: PPUSH
74313: CALL_OW 248
74317: ST_TO_ADDR
// weapon := 0 ;
74318: LD_ADDR_VAR 0 8
74322: PUSH
74323: LD_INT 0
74325: ST_TO_ADDR
// if not nat then
74326: LD_VAR 0 7
74330: NOT
74331: IFFALSE 74335
// continue ;
74333: GO 74300
// for j in list [ nat ] do
74335: LD_ADDR_VAR 0 5
74339: PUSH
74340: LD_VAR 0 10
74344: PUSH
74345: LD_VAR 0 7
74349: ARRAY
74350: PUSH
74351: FOR_IN
74352: IFFALSE 74393
// if GetBWeapon ( i ) = j [ 1 ] then
74354: LD_VAR 0 4
74358: PPUSH
74359: CALL_OW 269
74363: PUSH
74364: LD_VAR 0 5
74368: PUSH
74369: LD_INT 1
74371: ARRAY
74372: EQUAL
74373: IFFALSE 74391
// begin weapon := j [ 2 ] ;
74375: LD_ADDR_VAR 0 8
74379: PUSH
74380: LD_VAR 0 5
74384: PUSH
74385: LD_INT 2
74387: ARRAY
74388: ST_TO_ADDR
// break ;
74389: GO 74393
// end ;
74391: GO 74351
74393: POP
74394: POP
// if not weapon then
74395: LD_VAR 0 8
74399: NOT
74400: IFFALSE 74404
// continue ;
74402: GO 74300
// for k in factories do
74404: LD_ADDR_VAR 0 6
74408: PUSH
74409: LD_VAR 0 2
74413: PUSH
74414: FOR_IN
74415: IFFALSE 74480
// begin weapons := AvailableWeaponList ( k ) ;
74417: LD_ADDR_VAR 0 9
74421: PUSH
74422: LD_VAR 0 6
74426: PPUSH
74427: CALL_OW 478
74431: ST_TO_ADDR
// if not weapons then
74432: LD_VAR 0 9
74436: NOT
74437: IFFALSE 74441
// continue ;
74439: GO 74414
// if weapon in weapons then
74441: LD_VAR 0 8
74445: PUSH
74446: LD_VAR 0 9
74450: IN
74451: IFFALSE 74478
// begin result := [ i , weapon ] ;
74453: LD_ADDR_VAR 0 3
74457: PUSH
74458: LD_VAR 0 4
74462: PUSH
74463: LD_VAR 0 8
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: ST_TO_ADDR
// exit ;
74472: POP
74473: POP
74474: POP
74475: POP
74476: GO 74486
// end ; end ;
74478: GO 74414
74480: POP
74481: POP
// end ;
74482: GO 74300
74484: POP
74485: POP
// end ;
74486: LD_VAR 0 3
74490: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74491: LD_INT 0
74493: PPUSH
// if not side or side > 8 then
74494: LD_VAR 0 3
74498: NOT
74499: PUSH
74500: LD_VAR 0 3
74504: PUSH
74505: LD_INT 8
74507: GREATER
74508: OR
74509: IFFALSE 74513
// exit ;
74511: GO 74572
// if not range then
74513: LD_VAR 0 4
74517: NOT
74518: IFFALSE 74529
// range := - 12 ;
74520: LD_ADDR_VAR 0 4
74524: PUSH
74525: LD_INT 12
74527: NEG
74528: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74529: LD_VAR 0 1
74533: PPUSH
74534: LD_VAR 0 2
74538: PPUSH
74539: LD_VAR 0 3
74543: PPUSH
74544: LD_VAR 0 4
74548: PPUSH
74549: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74553: LD_VAR 0 1
74557: PPUSH
74558: LD_VAR 0 2
74562: PPUSH
74563: LD_VAR 0 3
74567: PPUSH
74568: CALL_OW 331
// end ;
74572: LD_VAR 0 5
74576: RET
// export function Video ( mode ) ; begin
74577: LD_INT 0
74579: PPUSH
// ingame_video = mode ;
74580: LD_ADDR_OWVAR 52
74584: PUSH
74585: LD_VAR 0 1
74589: ST_TO_ADDR
// interface_hidden = mode ;
74590: LD_ADDR_OWVAR 54
74594: PUSH
74595: LD_VAR 0 1
74599: ST_TO_ADDR
// end ;
74600: LD_VAR 0 2
74604: RET
// export function Join ( array , element ) ; begin
74605: LD_INT 0
74607: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74608: LD_ADDR_VAR 0 3
74612: PUSH
74613: LD_VAR 0 1
74617: PPUSH
74618: LD_VAR 0 1
74622: PUSH
74623: LD_INT 1
74625: PLUS
74626: PPUSH
74627: LD_VAR 0 2
74631: PPUSH
74632: CALL_OW 1
74636: ST_TO_ADDR
// end ;
74637: LD_VAR 0 3
74641: RET
// export function JoinUnion ( array , element ) ; begin
74642: LD_INT 0
74644: PPUSH
// result := array union element ;
74645: LD_ADDR_VAR 0 3
74649: PUSH
74650: LD_VAR 0 1
74654: PUSH
74655: LD_VAR 0 2
74659: UNION
74660: ST_TO_ADDR
// end ;
74661: LD_VAR 0 3
74665: RET
// export function GetBehemoths ( side ) ; begin
74666: LD_INT 0
74668: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
74669: LD_ADDR_VAR 0 2
74673: PUSH
74674: LD_INT 22
74676: PUSH
74677: LD_VAR 0 1
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: PUSH
74686: LD_INT 31
74688: PUSH
74689: LD_INT 25
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: PUSH
74696: EMPTY
74697: LIST
74698: LIST
74699: PPUSH
74700: CALL_OW 69
74704: ST_TO_ADDR
// end ;
74705: LD_VAR 0 2
74709: RET
// export function Shuffle ( array ) ; var i , index ; begin
74710: LD_INT 0
74712: PPUSH
74713: PPUSH
74714: PPUSH
// result := [ ] ;
74715: LD_ADDR_VAR 0 2
74719: PUSH
74720: EMPTY
74721: ST_TO_ADDR
// if not array then
74722: LD_VAR 0 1
74726: NOT
74727: IFFALSE 74731
// exit ;
74729: GO 74830
// Randomize ;
74731: CALL_OW 10
// for i = array downto 1 do
74735: LD_ADDR_VAR 0 3
74739: PUSH
74740: DOUBLE
74741: LD_VAR 0 1
74745: INC
74746: ST_TO_ADDR
74747: LD_INT 1
74749: PUSH
74750: FOR_DOWNTO
74751: IFFALSE 74828
// begin index := rand ( 1 , array ) ;
74753: LD_ADDR_VAR 0 4
74757: PUSH
74758: LD_INT 1
74760: PPUSH
74761: LD_VAR 0 1
74765: PPUSH
74766: CALL_OW 12
74770: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74771: LD_ADDR_VAR 0 2
74775: PUSH
74776: LD_VAR 0 2
74780: PPUSH
74781: LD_VAR 0 2
74785: PUSH
74786: LD_INT 1
74788: PLUS
74789: PPUSH
74790: LD_VAR 0 1
74794: PUSH
74795: LD_VAR 0 4
74799: ARRAY
74800: PPUSH
74801: CALL_OW 2
74805: ST_TO_ADDR
// array := Delete ( array , index ) ;
74806: LD_ADDR_VAR 0 1
74810: PUSH
74811: LD_VAR 0 1
74815: PPUSH
74816: LD_VAR 0 4
74820: PPUSH
74821: CALL_OW 3
74825: ST_TO_ADDR
// end ;
74826: GO 74750
74828: POP
74829: POP
// end ;
74830: LD_VAR 0 2
74834: RET
// export function GetBaseMaterials ( base ) ; begin
74835: LD_INT 0
74837: PPUSH
// result := [ 0 , 0 , 0 ] ;
74838: LD_ADDR_VAR 0 2
74842: PUSH
74843: LD_INT 0
74845: PUSH
74846: LD_INT 0
74848: PUSH
74849: LD_INT 0
74851: PUSH
74852: EMPTY
74853: LIST
74854: LIST
74855: LIST
74856: ST_TO_ADDR
// if not base then
74857: LD_VAR 0 1
74861: NOT
74862: IFFALSE 74866
// exit ;
74864: GO 74915
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74866: LD_ADDR_VAR 0 2
74870: PUSH
74871: LD_VAR 0 1
74875: PPUSH
74876: LD_INT 1
74878: PPUSH
74879: CALL_OW 275
74883: PUSH
74884: LD_VAR 0 1
74888: PPUSH
74889: LD_INT 2
74891: PPUSH
74892: CALL_OW 275
74896: PUSH
74897: LD_VAR 0 1
74901: PPUSH
74902: LD_INT 3
74904: PPUSH
74905: CALL_OW 275
74909: PUSH
74910: EMPTY
74911: LIST
74912: LIST
74913: LIST
74914: ST_TO_ADDR
// end ;
74915: LD_VAR 0 2
74919: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74920: LD_INT 0
74922: PPUSH
74923: PPUSH
// result := array ;
74924: LD_ADDR_VAR 0 3
74928: PUSH
74929: LD_VAR 0 1
74933: ST_TO_ADDR
// if size > 0 then
74934: LD_VAR 0 2
74938: PUSH
74939: LD_INT 0
74941: GREATER
74942: IFFALSE 74988
// for i := array downto size do
74944: LD_ADDR_VAR 0 4
74948: PUSH
74949: DOUBLE
74950: LD_VAR 0 1
74954: INC
74955: ST_TO_ADDR
74956: LD_VAR 0 2
74960: PUSH
74961: FOR_DOWNTO
74962: IFFALSE 74986
// result := Delete ( result , result ) ;
74964: LD_ADDR_VAR 0 3
74968: PUSH
74969: LD_VAR 0 3
74973: PPUSH
74974: LD_VAR 0 3
74978: PPUSH
74979: CALL_OW 3
74983: ST_TO_ADDR
74984: GO 74961
74986: POP
74987: POP
// end ;
74988: LD_VAR 0 3
74992: RET
// export function ComExit ( unit ) ; var tmp ; begin
74993: LD_INT 0
74995: PPUSH
74996: PPUSH
// if not IsInUnit ( unit ) then
74997: LD_VAR 0 1
75001: PPUSH
75002: CALL_OW 310
75006: NOT
75007: IFFALSE 75011
// exit ;
75009: GO 75071
// tmp := IsInUnit ( unit ) ;
75011: LD_ADDR_VAR 0 3
75015: PUSH
75016: LD_VAR 0 1
75020: PPUSH
75021: CALL_OW 310
75025: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75026: LD_VAR 0 3
75030: PPUSH
75031: CALL_OW 247
75035: PUSH
75036: LD_INT 2
75038: EQUAL
75039: IFFALSE 75052
// ComExitVehicle ( unit ) else
75041: LD_VAR 0 1
75045: PPUSH
75046: CALL_OW 121
75050: GO 75061
// ComExitBuilding ( unit ) ;
75052: LD_VAR 0 1
75056: PPUSH
75057: CALL_OW 122
// result := tmp ;
75061: LD_ADDR_VAR 0 2
75065: PUSH
75066: LD_VAR 0 3
75070: ST_TO_ADDR
// end ;
75071: LD_VAR 0 2
75075: RET
// export function ComExitAll ( units ) ; var i ; begin
75076: LD_INT 0
75078: PPUSH
75079: PPUSH
// if not units then
75080: LD_VAR 0 1
75084: NOT
75085: IFFALSE 75089
// exit ;
75087: GO 75115
// for i in units do
75089: LD_ADDR_VAR 0 3
75093: PUSH
75094: LD_VAR 0 1
75098: PUSH
75099: FOR_IN
75100: IFFALSE 75113
// ComExit ( i ) ;
75102: LD_VAR 0 3
75106: PPUSH
75107: CALL 74993 0 1
75111: GO 75099
75113: POP
75114: POP
// end ;
75115: LD_VAR 0 2
75119: RET
// export function ResetHc ; begin
75120: LD_INT 0
75122: PPUSH
// InitHc ;
75123: CALL_OW 19
// hc_importance := 0 ;
75127: LD_ADDR_OWVAR 32
75131: PUSH
75132: LD_INT 0
75134: ST_TO_ADDR
// end ;
75135: LD_VAR 0 1
75139: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75140: LD_INT 0
75142: PPUSH
75143: PPUSH
75144: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75145: LD_ADDR_VAR 0 6
75149: PUSH
75150: LD_VAR 0 1
75154: PUSH
75155: LD_VAR 0 3
75159: PLUS
75160: PUSH
75161: LD_INT 2
75163: DIV
75164: ST_TO_ADDR
// if _x < 0 then
75165: LD_VAR 0 6
75169: PUSH
75170: LD_INT 0
75172: LESS
75173: IFFALSE 75190
// _x := _x * - 1 ;
75175: LD_ADDR_VAR 0 6
75179: PUSH
75180: LD_VAR 0 6
75184: PUSH
75185: LD_INT 1
75187: NEG
75188: MUL
75189: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75190: LD_ADDR_VAR 0 7
75194: PUSH
75195: LD_VAR 0 2
75199: PUSH
75200: LD_VAR 0 4
75204: PLUS
75205: PUSH
75206: LD_INT 2
75208: DIV
75209: ST_TO_ADDR
// if _y < 0 then
75210: LD_VAR 0 7
75214: PUSH
75215: LD_INT 0
75217: LESS
75218: IFFALSE 75235
// _y := _y * - 1 ;
75220: LD_ADDR_VAR 0 7
75224: PUSH
75225: LD_VAR 0 7
75229: PUSH
75230: LD_INT 1
75232: NEG
75233: MUL
75234: ST_TO_ADDR
// result := [ _x , _y ] ;
75235: LD_ADDR_VAR 0 5
75239: PUSH
75240: LD_VAR 0 6
75244: PUSH
75245: LD_VAR 0 7
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: ST_TO_ADDR
// end ;
75254: LD_VAR 0 5
75258: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75259: LD_INT 0
75261: PPUSH
75262: PPUSH
75263: PPUSH
75264: PPUSH
// task := GetTaskList ( unit ) ;
75265: LD_ADDR_VAR 0 7
75269: PUSH
75270: LD_VAR 0 1
75274: PPUSH
75275: CALL_OW 437
75279: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75280: LD_VAR 0 7
75284: NOT
75285: PUSH
75286: LD_VAR 0 1
75290: PPUSH
75291: LD_VAR 0 2
75295: PPUSH
75296: CALL_OW 308
75300: NOT
75301: AND
75302: IFFALSE 75306
// exit ;
75304: GO 75424
// if IsInArea ( unit , area ) then
75306: LD_VAR 0 1
75310: PPUSH
75311: LD_VAR 0 2
75315: PPUSH
75316: CALL_OW 308
75320: IFFALSE 75338
// begin ComMoveToArea ( unit , goAway ) ;
75322: LD_VAR 0 1
75326: PPUSH
75327: LD_VAR 0 3
75331: PPUSH
75332: CALL_OW 113
// exit ;
75336: GO 75424
// end ; if task [ 1 ] [ 1 ] <> M then
75338: LD_VAR 0 7
75342: PUSH
75343: LD_INT 1
75345: ARRAY
75346: PUSH
75347: LD_INT 1
75349: ARRAY
75350: PUSH
75351: LD_STRING M
75353: NONEQUAL
75354: IFFALSE 75358
// exit ;
75356: GO 75424
// x := task [ 1 ] [ 2 ] ;
75358: LD_ADDR_VAR 0 5
75362: PUSH
75363: LD_VAR 0 7
75367: PUSH
75368: LD_INT 1
75370: ARRAY
75371: PUSH
75372: LD_INT 2
75374: ARRAY
75375: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75376: LD_ADDR_VAR 0 6
75380: PUSH
75381: LD_VAR 0 7
75385: PUSH
75386: LD_INT 1
75388: ARRAY
75389: PUSH
75390: LD_INT 3
75392: ARRAY
75393: ST_TO_ADDR
// if InArea ( x , y , area ) then
75394: LD_VAR 0 5
75398: PPUSH
75399: LD_VAR 0 6
75403: PPUSH
75404: LD_VAR 0 2
75408: PPUSH
75409: CALL_OW 309
75413: IFFALSE 75424
// ComStop ( unit ) ;
75415: LD_VAR 0 1
75419: PPUSH
75420: CALL_OW 141
// end ;
75424: LD_VAR 0 4
75428: RET
// export function Abs ( value ) ; begin
75429: LD_INT 0
75431: PPUSH
// result := value ;
75432: LD_ADDR_VAR 0 2
75436: PUSH
75437: LD_VAR 0 1
75441: ST_TO_ADDR
// if value < 0 then
75442: LD_VAR 0 1
75446: PUSH
75447: LD_INT 0
75449: LESS
75450: IFFALSE 75467
// result := value * - 1 ;
75452: LD_ADDR_VAR 0 2
75456: PUSH
75457: LD_VAR 0 1
75461: PUSH
75462: LD_INT 1
75464: NEG
75465: MUL
75466: ST_TO_ADDR
// end ;
75467: LD_VAR 0 2
75471: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75472: LD_INT 0
75474: PPUSH
75475: PPUSH
75476: PPUSH
75477: PPUSH
75478: PPUSH
75479: PPUSH
75480: PPUSH
75481: PPUSH
// if not unit or not building then
75482: LD_VAR 0 1
75486: NOT
75487: PUSH
75488: LD_VAR 0 2
75492: NOT
75493: OR
75494: IFFALSE 75498
// exit ;
75496: GO 75724
// x := GetX ( building ) ;
75498: LD_ADDR_VAR 0 4
75502: PUSH
75503: LD_VAR 0 2
75507: PPUSH
75508: CALL_OW 250
75512: ST_TO_ADDR
// y := GetY ( building ) ;
75513: LD_ADDR_VAR 0 6
75517: PUSH
75518: LD_VAR 0 2
75522: PPUSH
75523: CALL_OW 251
75527: ST_TO_ADDR
// d := GetDir ( building ) ;
75528: LD_ADDR_VAR 0 8
75532: PUSH
75533: LD_VAR 0 2
75537: PPUSH
75538: CALL_OW 254
75542: ST_TO_ADDR
// r := 4 ;
75543: LD_ADDR_VAR 0 9
75547: PUSH
75548: LD_INT 4
75550: ST_TO_ADDR
// for i := 1 to 5 do
75551: LD_ADDR_VAR 0 10
75555: PUSH
75556: DOUBLE
75557: LD_INT 1
75559: DEC
75560: ST_TO_ADDR
75561: LD_INT 5
75563: PUSH
75564: FOR_TO
75565: IFFALSE 75722
// begin _x := ShiftX ( x , d , r + i ) ;
75567: LD_ADDR_VAR 0 5
75571: PUSH
75572: LD_VAR 0 4
75576: PPUSH
75577: LD_VAR 0 8
75581: PPUSH
75582: LD_VAR 0 9
75586: PUSH
75587: LD_VAR 0 10
75591: PLUS
75592: PPUSH
75593: CALL_OW 272
75597: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75598: LD_ADDR_VAR 0 7
75602: PUSH
75603: LD_VAR 0 6
75607: PPUSH
75608: LD_VAR 0 8
75612: PPUSH
75613: LD_VAR 0 9
75617: PUSH
75618: LD_VAR 0 10
75622: PLUS
75623: PPUSH
75624: CALL_OW 273
75628: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75629: LD_VAR 0 5
75633: PPUSH
75634: LD_VAR 0 7
75638: PPUSH
75639: CALL_OW 488
75643: PUSH
75644: LD_VAR 0 5
75648: PPUSH
75649: LD_VAR 0 7
75653: PPUSH
75654: CALL_OW 428
75658: PPUSH
75659: CALL_OW 247
75663: PUSH
75664: LD_INT 3
75666: PUSH
75667: LD_INT 2
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: IN
75674: NOT
75675: AND
75676: IFFALSE 75720
// begin ComMoveXY ( unit , _x , _y ) ;
75678: LD_VAR 0 1
75682: PPUSH
75683: LD_VAR 0 5
75687: PPUSH
75688: LD_VAR 0 7
75692: PPUSH
75693: CALL_OW 111
// result := [ _x , _y ] ;
75697: LD_ADDR_VAR 0 3
75701: PUSH
75702: LD_VAR 0 5
75706: PUSH
75707: LD_VAR 0 7
75711: PUSH
75712: EMPTY
75713: LIST
75714: LIST
75715: ST_TO_ADDR
// exit ;
75716: POP
75717: POP
75718: GO 75724
// end ; end ;
75720: GO 75564
75722: POP
75723: POP
// end ;
75724: LD_VAR 0 3
75728: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75729: LD_INT 0
75731: PPUSH
75732: PPUSH
75733: PPUSH
// result := 0 ;
75734: LD_ADDR_VAR 0 3
75738: PUSH
75739: LD_INT 0
75741: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75742: LD_VAR 0 1
75746: PUSH
75747: LD_INT 0
75749: LESS
75750: PUSH
75751: LD_VAR 0 1
75755: PUSH
75756: LD_INT 8
75758: GREATER
75759: OR
75760: PUSH
75761: LD_VAR 0 2
75765: PUSH
75766: LD_INT 0
75768: LESS
75769: OR
75770: PUSH
75771: LD_VAR 0 2
75775: PUSH
75776: LD_INT 8
75778: GREATER
75779: OR
75780: IFFALSE 75784
// exit ;
75782: GO 75859
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75784: LD_ADDR_VAR 0 4
75788: PUSH
75789: LD_INT 22
75791: PUSH
75792: LD_VAR 0 2
75796: PUSH
75797: EMPTY
75798: LIST
75799: LIST
75800: PPUSH
75801: CALL_OW 69
75805: PUSH
75806: FOR_IN
75807: IFFALSE 75857
// begin un := UnitShoot ( i ) ;
75809: LD_ADDR_VAR 0 5
75813: PUSH
75814: LD_VAR 0 4
75818: PPUSH
75819: CALL_OW 504
75823: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75824: LD_VAR 0 5
75828: PPUSH
75829: CALL_OW 255
75833: PUSH
75834: LD_VAR 0 1
75838: EQUAL
75839: IFFALSE 75855
// begin result := un ;
75841: LD_ADDR_VAR 0 3
75845: PUSH
75846: LD_VAR 0 5
75850: ST_TO_ADDR
// exit ;
75851: POP
75852: POP
75853: GO 75859
// end ; end ;
75855: GO 75806
75857: POP
75858: POP
// end ;
75859: LD_VAR 0 3
75863: RET
// export function GetCargoBay ( units ) ; begin
75864: LD_INT 0
75866: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75867: LD_ADDR_VAR 0 2
75871: PUSH
75872: LD_VAR 0 1
75876: PPUSH
75877: LD_INT 2
75879: PUSH
75880: LD_INT 34
75882: PUSH
75883: LD_INT 12
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: PUSH
75890: LD_INT 34
75892: PUSH
75893: LD_INT 51
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: PUSH
75900: LD_INT 34
75902: PUSH
75903: LD_INT 32
75905: PUSH
75906: EMPTY
75907: LIST
75908: LIST
75909: PUSH
75910: LD_INT 34
75912: PUSH
75913: LD_EXP 44
75917: PUSH
75918: EMPTY
75919: LIST
75920: LIST
75921: PUSH
75922: EMPTY
75923: LIST
75924: LIST
75925: LIST
75926: LIST
75927: LIST
75928: PPUSH
75929: CALL_OW 72
75933: ST_TO_ADDR
// end ;
75934: LD_VAR 0 2
75938: RET
// export function Negate ( value ) ; begin
75939: LD_INT 0
75941: PPUSH
// result := not value ;
75942: LD_ADDR_VAR 0 2
75946: PUSH
75947: LD_VAR 0 1
75951: NOT
75952: ST_TO_ADDR
// end ;
75953: LD_VAR 0 2
75957: RET
// export function Inc ( value ) ; begin
75958: LD_INT 0
75960: PPUSH
// result := value + 1 ;
75961: LD_ADDR_VAR 0 2
75965: PUSH
75966: LD_VAR 0 1
75970: PUSH
75971: LD_INT 1
75973: PLUS
75974: ST_TO_ADDR
// end ;
75975: LD_VAR 0 2
75979: RET
// export function Dec ( value ) ; begin
75980: LD_INT 0
75982: PPUSH
// result := value - 1 ;
75983: LD_ADDR_VAR 0 2
75987: PUSH
75988: LD_VAR 0 1
75992: PUSH
75993: LD_INT 1
75995: MINUS
75996: ST_TO_ADDR
// end ;
75997: LD_VAR 0 2
76001: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76002: LD_INT 0
76004: PPUSH
76005: PPUSH
76006: PPUSH
76007: PPUSH
76008: PPUSH
76009: PPUSH
76010: PPUSH
76011: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76012: LD_VAR 0 1
76016: PPUSH
76017: LD_VAR 0 2
76021: PPUSH
76022: CALL_OW 488
76026: NOT
76027: PUSH
76028: LD_VAR 0 3
76032: PPUSH
76033: LD_VAR 0 4
76037: PPUSH
76038: CALL_OW 488
76042: NOT
76043: OR
76044: IFFALSE 76057
// begin result := - 1 ;
76046: LD_ADDR_VAR 0 5
76050: PUSH
76051: LD_INT 1
76053: NEG
76054: ST_TO_ADDR
// exit ;
76055: GO 76292
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76057: LD_ADDR_VAR 0 12
76061: PUSH
76062: LD_VAR 0 1
76066: PPUSH
76067: LD_VAR 0 2
76071: PPUSH
76072: LD_VAR 0 3
76076: PPUSH
76077: LD_VAR 0 4
76081: PPUSH
76082: CALL 75140 0 4
76086: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76087: LD_ADDR_VAR 0 11
76091: PUSH
76092: LD_VAR 0 1
76096: PPUSH
76097: LD_VAR 0 2
76101: PPUSH
76102: LD_VAR 0 12
76106: PUSH
76107: LD_INT 1
76109: ARRAY
76110: PPUSH
76111: LD_VAR 0 12
76115: PUSH
76116: LD_INT 2
76118: ARRAY
76119: PPUSH
76120: CALL_OW 298
76124: ST_TO_ADDR
// distance := 9999 ;
76125: LD_ADDR_VAR 0 10
76129: PUSH
76130: LD_INT 9999
76132: ST_TO_ADDR
// for i := 0 to 5 do
76133: LD_ADDR_VAR 0 6
76137: PUSH
76138: DOUBLE
76139: LD_INT 0
76141: DEC
76142: ST_TO_ADDR
76143: LD_INT 5
76145: PUSH
76146: FOR_TO
76147: IFFALSE 76290
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76149: LD_ADDR_VAR 0 7
76153: PUSH
76154: LD_VAR 0 1
76158: PPUSH
76159: LD_VAR 0 6
76163: PPUSH
76164: LD_VAR 0 11
76168: PPUSH
76169: CALL_OW 272
76173: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76174: LD_ADDR_VAR 0 8
76178: PUSH
76179: LD_VAR 0 2
76183: PPUSH
76184: LD_VAR 0 6
76188: PPUSH
76189: LD_VAR 0 11
76193: PPUSH
76194: CALL_OW 273
76198: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76199: LD_VAR 0 7
76203: PPUSH
76204: LD_VAR 0 8
76208: PPUSH
76209: CALL_OW 488
76213: NOT
76214: IFFALSE 76218
// continue ;
76216: GO 76146
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76218: LD_ADDR_VAR 0 9
76222: PUSH
76223: LD_VAR 0 12
76227: PUSH
76228: LD_INT 1
76230: ARRAY
76231: PPUSH
76232: LD_VAR 0 12
76236: PUSH
76237: LD_INT 2
76239: ARRAY
76240: PPUSH
76241: LD_VAR 0 7
76245: PPUSH
76246: LD_VAR 0 8
76250: PPUSH
76251: CALL_OW 298
76255: ST_TO_ADDR
// if tmp < distance then
76256: LD_VAR 0 9
76260: PUSH
76261: LD_VAR 0 10
76265: LESS
76266: IFFALSE 76288
// begin result := i ;
76268: LD_ADDR_VAR 0 5
76272: PUSH
76273: LD_VAR 0 6
76277: ST_TO_ADDR
// distance := tmp ;
76278: LD_ADDR_VAR 0 10
76282: PUSH
76283: LD_VAR 0 9
76287: ST_TO_ADDR
// end ; end ;
76288: GO 76146
76290: POP
76291: POP
// end ;
76292: LD_VAR 0 5
76296: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76297: LD_INT 0
76299: PPUSH
76300: PPUSH
// if not driver or not IsInUnit ( driver ) then
76301: LD_VAR 0 1
76305: NOT
76306: PUSH
76307: LD_VAR 0 1
76311: PPUSH
76312: CALL_OW 310
76316: NOT
76317: OR
76318: IFFALSE 76322
// exit ;
76320: GO 76412
// vehicle := IsInUnit ( driver ) ;
76322: LD_ADDR_VAR 0 3
76326: PUSH
76327: LD_VAR 0 1
76331: PPUSH
76332: CALL_OW 310
76336: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76337: LD_VAR 0 1
76341: PPUSH
76342: LD_STRING \
76344: PUSH
76345: LD_INT 0
76347: PUSH
76348: LD_INT 0
76350: PUSH
76351: LD_INT 0
76353: PUSH
76354: LD_INT 0
76356: PUSH
76357: LD_INT 0
76359: PUSH
76360: LD_INT 0
76362: PUSH
76363: EMPTY
76364: LIST
76365: LIST
76366: LIST
76367: LIST
76368: LIST
76369: LIST
76370: LIST
76371: PUSH
76372: LD_STRING E
76374: PUSH
76375: LD_INT 0
76377: PUSH
76378: LD_INT 0
76380: PUSH
76381: LD_VAR 0 3
76385: PUSH
76386: LD_INT 0
76388: PUSH
76389: LD_INT 0
76391: PUSH
76392: LD_INT 0
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: LIST
76399: LIST
76400: LIST
76401: LIST
76402: LIST
76403: PUSH
76404: EMPTY
76405: LIST
76406: LIST
76407: PPUSH
76408: CALL_OW 446
// end ;
76412: LD_VAR 0 2
76416: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76417: LD_INT 0
76419: PPUSH
76420: PPUSH
// if not driver or not IsInUnit ( driver ) then
76421: LD_VAR 0 1
76425: NOT
76426: PUSH
76427: LD_VAR 0 1
76431: PPUSH
76432: CALL_OW 310
76436: NOT
76437: OR
76438: IFFALSE 76442
// exit ;
76440: GO 76532
// vehicle := IsInUnit ( driver ) ;
76442: LD_ADDR_VAR 0 3
76446: PUSH
76447: LD_VAR 0 1
76451: PPUSH
76452: CALL_OW 310
76456: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76457: LD_VAR 0 1
76461: PPUSH
76462: LD_STRING \
76464: PUSH
76465: LD_INT 0
76467: PUSH
76468: LD_INT 0
76470: PUSH
76471: LD_INT 0
76473: PUSH
76474: LD_INT 0
76476: PUSH
76477: LD_INT 0
76479: PUSH
76480: LD_INT 0
76482: PUSH
76483: EMPTY
76484: LIST
76485: LIST
76486: LIST
76487: LIST
76488: LIST
76489: LIST
76490: LIST
76491: PUSH
76492: LD_STRING E
76494: PUSH
76495: LD_INT 0
76497: PUSH
76498: LD_INT 0
76500: PUSH
76501: LD_VAR 0 3
76505: PUSH
76506: LD_INT 0
76508: PUSH
76509: LD_INT 0
76511: PUSH
76512: LD_INT 0
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: PPUSH
76528: CALL_OW 447
// end ;
76532: LD_VAR 0 2
76536: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76537: LD_INT 0
76539: PPUSH
76540: PPUSH
76541: PPUSH
// tmp := [ ] ;
76542: LD_ADDR_VAR 0 5
76546: PUSH
76547: EMPTY
76548: ST_TO_ADDR
// for i in units do
76549: LD_ADDR_VAR 0 4
76553: PUSH
76554: LD_VAR 0 1
76558: PUSH
76559: FOR_IN
76560: IFFALSE 76598
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76562: LD_ADDR_VAR 0 5
76566: PUSH
76567: LD_VAR 0 5
76571: PPUSH
76572: LD_VAR 0 5
76576: PUSH
76577: LD_INT 1
76579: PLUS
76580: PPUSH
76581: LD_VAR 0 4
76585: PPUSH
76586: CALL_OW 256
76590: PPUSH
76591: CALL_OW 2
76595: ST_TO_ADDR
76596: GO 76559
76598: POP
76599: POP
// if not tmp then
76600: LD_VAR 0 5
76604: NOT
76605: IFFALSE 76609
// exit ;
76607: GO 76657
// if asc then
76609: LD_VAR 0 2
76613: IFFALSE 76637
// result := SortListByListAsc ( units , tmp ) else
76615: LD_ADDR_VAR 0 3
76619: PUSH
76620: LD_VAR 0 1
76624: PPUSH
76625: LD_VAR 0 5
76629: PPUSH
76630: CALL_OW 76
76634: ST_TO_ADDR
76635: GO 76657
// result := SortListByListDesc ( units , tmp ) ;
76637: LD_ADDR_VAR 0 3
76641: PUSH
76642: LD_VAR 0 1
76646: PPUSH
76647: LD_VAR 0 5
76651: PPUSH
76652: CALL_OW 77
76656: ST_TO_ADDR
// end ;
76657: LD_VAR 0 3
76661: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76662: LD_INT 0
76664: PPUSH
76665: PPUSH
// task := GetTaskList ( mech ) ;
76666: LD_ADDR_VAR 0 4
76670: PUSH
76671: LD_VAR 0 1
76675: PPUSH
76676: CALL_OW 437
76680: ST_TO_ADDR
// if not task then
76681: LD_VAR 0 4
76685: NOT
76686: IFFALSE 76690
// exit ;
76688: GO 76732
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76690: LD_ADDR_VAR 0 3
76694: PUSH
76695: LD_VAR 0 4
76699: PUSH
76700: LD_INT 1
76702: ARRAY
76703: PUSH
76704: LD_INT 1
76706: ARRAY
76707: PUSH
76708: LD_STRING r
76710: EQUAL
76711: PUSH
76712: LD_VAR 0 4
76716: PUSH
76717: LD_INT 1
76719: ARRAY
76720: PUSH
76721: LD_INT 4
76723: ARRAY
76724: PUSH
76725: LD_VAR 0 2
76729: EQUAL
76730: AND
76731: ST_TO_ADDR
// end ;
76732: LD_VAR 0 3
76736: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76737: LD_INT 0
76739: PPUSH
// SetDir ( unit , d ) ;
76740: LD_VAR 0 1
76744: PPUSH
76745: LD_VAR 0 4
76749: PPUSH
76750: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76754: LD_VAR 0 1
76758: PPUSH
76759: LD_VAR 0 2
76763: PPUSH
76764: LD_VAR 0 3
76768: PPUSH
76769: LD_VAR 0 5
76773: PPUSH
76774: CALL_OW 48
// end ;
76778: LD_VAR 0 6
76782: RET
// export function ToNaturalNumber ( number ) ; begin
76783: LD_INT 0
76785: PPUSH
// result := number div 1 ;
76786: LD_ADDR_VAR 0 2
76790: PUSH
76791: LD_VAR 0 1
76795: PUSH
76796: LD_INT 1
76798: DIV
76799: ST_TO_ADDR
// if number < 0 then
76800: LD_VAR 0 1
76804: PUSH
76805: LD_INT 0
76807: LESS
76808: IFFALSE 76818
// result := 0 ;
76810: LD_ADDR_VAR 0 2
76814: PUSH
76815: LD_INT 0
76817: ST_TO_ADDR
// end ;
76818: LD_VAR 0 2
76822: RET
// export function SortByClass ( units , class ) ; var un ; begin
76823: LD_INT 0
76825: PPUSH
76826: PPUSH
// if not units or not class then
76827: LD_VAR 0 1
76831: NOT
76832: PUSH
76833: LD_VAR 0 2
76837: NOT
76838: OR
76839: IFFALSE 76843
// exit ;
76841: GO 76938
// result := [ ] ;
76843: LD_ADDR_VAR 0 3
76847: PUSH
76848: EMPTY
76849: ST_TO_ADDR
// for un in units do
76850: LD_ADDR_VAR 0 4
76854: PUSH
76855: LD_VAR 0 1
76859: PUSH
76860: FOR_IN
76861: IFFALSE 76936
// if GetClass ( un ) = class then
76863: LD_VAR 0 4
76867: PPUSH
76868: CALL_OW 257
76872: PUSH
76873: LD_VAR 0 2
76877: EQUAL
76878: IFFALSE 76905
// result := Insert ( result , 1 , un ) else
76880: LD_ADDR_VAR 0 3
76884: PUSH
76885: LD_VAR 0 3
76889: PPUSH
76890: LD_INT 1
76892: PPUSH
76893: LD_VAR 0 4
76897: PPUSH
76898: CALL_OW 2
76902: ST_TO_ADDR
76903: GO 76934
// result := Replace ( result , result + 1 , un ) ;
76905: LD_ADDR_VAR 0 3
76909: PUSH
76910: LD_VAR 0 3
76914: PPUSH
76915: LD_VAR 0 3
76919: PUSH
76920: LD_INT 1
76922: PLUS
76923: PPUSH
76924: LD_VAR 0 4
76928: PPUSH
76929: CALL_OW 1
76933: ST_TO_ADDR
76934: GO 76860
76936: POP
76937: POP
// end ;
76938: LD_VAR 0 3
76942: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76943: LD_INT 0
76945: PPUSH
76946: PPUSH
76947: PPUSH
76948: PPUSH
76949: PPUSH
76950: PPUSH
76951: PPUSH
// result := [ ] ;
76952: LD_ADDR_VAR 0 4
76956: PUSH
76957: EMPTY
76958: ST_TO_ADDR
// if x - r < 0 then
76959: LD_VAR 0 1
76963: PUSH
76964: LD_VAR 0 3
76968: MINUS
76969: PUSH
76970: LD_INT 0
76972: LESS
76973: IFFALSE 76985
// min_x := 0 else
76975: LD_ADDR_VAR 0 8
76979: PUSH
76980: LD_INT 0
76982: ST_TO_ADDR
76983: GO 77001
// min_x := x - r ;
76985: LD_ADDR_VAR 0 8
76989: PUSH
76990: LD_VAR 0 1
76994: PUSH
76995: LD_VAR 0 3
76999: MINUS
77000: ST_TO_ADDR
// if y - r < 0 then
77001: LD_VAR 0 2
77005: PUSH
77006: LD_VAR 0 3
77010: MINUS
77011: PUSH
77012: LD_INT 0
77014: LESS
77015: IFFALSE 77027
// min_y := 0 else
77017: LD_ADDR_VAR 0 7
77021: PUSH
77022: LD_INT 0
77024: ST_TO_ADDR
77025: GO 77043
// min_y := y - r ;
77027: LD_ADDR_VAR 0 7
77031: PUSH
77032: LD_VAR 0 2
77036: PUSH
77037: LD_VAR 0 3
77041: MINUS
77042: ST_TO_ADDR
// max_x := x + r ;
77043: LD_ADDR_VAR 0 9
77047: PUSH
77048: LD_VAR 0 1
77052: PUSH
77053: LD_VAR 0 3
77057: PLUS
77058: ST_TO_ADDR
// max_y := y + r ;
77059: LD_ADDR_VAR 0 10
77063: PUSH
77064: LD_VAR 0 2
77068: PUSH
77069: LD_VAR 0 3
77073: PLUS
77074: ST_TO_ADDR
// for _x = min_x to max_x do
77075: LD_ADDR_VAR 0 5
77079: PUSH
77080: DOUBLE
77081: LD_VAR 0 8
77085: DEC
77086: ST_TO_ADDR
77087: LD_VAR 0 9
77091: PUSH
77092: FOR_TO
77093: IFFALSE 77194
// for _y = min_y to max_y do
77095: LD_ADDR_VAR 0 6
77099: PUSH
77100: DOUBLE
77101: LD_VAR 0 7
77105: DEC
77106: ST_TO_ADDR
77107: LD_VAR 0 10
77111: PUSH
77112: FOR_TO
77113: IFFALSE 77190
// begin if not ValidHex ( _x , _y ) then
77115: LD_VAR 0 5
77119: PPUSH
77120: LD_VAR 0 6
77124: PPUSH
77125: CALL_OW 488
77129: NOT
77130: IFFALSE 77134
// continue ;
77132: GO 77112
// if GetResourceTypeXY ( _x , _y ) then
77134: LD_VAR 0 5
77138: PPUSH
77139: LD_VAR 0 6
77143: PPUSH
77144: CALL_OW 283
77148: IFFALSE 77188
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77150: LD_ADDR_VAR 0 4
77154: PUSH
77155: LD_VAR 0 4
77159: PPUSH
77160: LD_VAR 0 4
77164: PUSH
77165: LD_INT 1
77167: PLUS
77168: PPUSH
77169: LD_VAR 0 5
77173: PUSH
77174: LD_VAR 0 6
77178: PUSH
77179: EMPTY
77180: LIST
77181: LIST
77182: PPUSH
77183: CALL_OW 1
77187: ST_TO_ADDR
// end ;
77188: GO 77112
77190: POP
77191: POP
77192: GO 77092
77194: POP
77195: POP
// end ;
77196: LD_VAR 0 4
77200: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77201: LD_INT 0
77203: PPUSH
77204: PPUSH
77205: PPUSH
77206: PPUSH
77207: PPUSH
77208: PPUSH
77209: PPUSH
77210: PPUSH
// if not units then
77211: LD_VAR 0 1
77215: NOT
77216: IFFALSE 77220
// exit ;
77218: GO 77645
// result := UnitFilter ( units , [ f_ok ] ) ;
77220: LD_ADDR_VAR 0 3
77224: PUSH
77225: LD_VAR 0 1
77229: PPUSH
77230: LD_INT 50
77232: PUSH
77233: EMPTY
77234: LIST
77235: PPUSH
77236: CALL_OW 72
77240: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77241: LD_ADDR_VAR 0 8
77245: PUSH
77246: LD_VAR 0 1
77250: PUSH
77251: LD_INT 1
77253: ARRAY
77254: PPUSH
77255: CALL_OW 255
77259: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
77260: LD_ADDR_VAR 0 10
77264: PUSH
77265: LD_INT 29
77267: PUSH
77268: LD_EXP 47
77272: PUSH
77273: EMPTY
77274: LIST
77275: LIST
77276: ST_TO_ADDR
// if not result then
77277: LD_VAR 0 3
77281: NOT
77282: IFFALSE 77286
// exit ;
77284: GO 77645
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77286: LD_ADDR_VAR 0 5
77290: PUSH
77291: LD_INT 81
77293: PUSH
77294: LD_VAR 0 8
77298: PUSH
77299: EMPTY
77300: LIST
77301: LIST
77302: PPUSH
77303: CALL_OW 69
77307: ST_TO_ADDR
// for i in result do
77308: LD_ADDR_VAR 0 4
77312: PUSH
77313: LD_VAR 0 3
77317: PUSH
77318: FOR_IN
77319: IFFALSE 77643
// begin tag := GetTag ( i ) + 1 ;
77321: LD_ADDR_VAR 0 9
77325: PUSH
77326: LD_VAR 0 4
77330: PPUSH
77331: CALL_OW 110
77335: PUSH
77336: LD_INT 1
77338: PLUS
77339: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77340: LD_ADDR_VAR 0 7
77344: PUSH
77345: LD_VAR 0 4
77349: PPUSH
77350: CALL_OW 250
77354: PPUSH
77355: LD_VAR 0 4
77359: PPUSH
77360: CALL_OW 251
77364: PPUSH
77365: LD_INT 6
77367: PPUSH
77368: CALL 76943 0 3
77372: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77373: LD_VAR 0 7
77377: PUSH
77378: LD_VAR 0 4
77382: PPUSH
77383: CALL_OW 264
77387: PUSH
77388: LD_VAR 0 10
77392: IN
77393: NOT
77394: AND
77395: IFFALSE 77434
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77397: LD_VAR 0 4
77401: PPUSH
77402: LD_VAR 0 7
77406: PUSH
77407: LD_INT 1
77409: ARRAY
77410: PUSH
77411: LD_INT 1
77413: ARRAY
77414: PPUSH
77415: LD_VAR 0 7
77419: PUSH
77420: LD_INT 1
77422: ARRAY
77423: PUSH
77424: LD_INT 2
77426: ARRAY
77427: PPUSH
77428: CALL_OW 116
77432: GO 77641
// if path > tag then
77434: LD_VAR 0 2
77438: PUSH
77439: LD_VAR 0 9
77443: GREATER
77444: IFFALSE 77611
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77446: LD_ADDR_VAR 0 6
77450: PUSH
77451: LD_VAR 0 5
77455: PPUSH
77456: LD_INT 91
77458: PUSH
77459: LD_VAR 0 4
77463: PUSH
77464: LD_INT 12
77466: PUSH
77467: EMPTY
77468: LIST
77469: LIST
77470: LIST
77471: PPUSH
77472: CALL_OW 72
77476: ST_TO_ADDR
// if nearEnemy then
77477: LD_VAR 0 6
77481: IFFALSE 77509
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77483: LD_VAR 0 4
77487: PPUSH
77488: LD_VAR 0 6
77492: PPUSH
77493: LD_VAR 0 4
77497: PPUSH
77498: CALL_OW 74
77502: PPUSH
77503: CALL_OW 115
77507: GO 77609
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77509: LD_VAR 0 4
77513: PPUSH
77514: LD_VAR 0 2
77518: PUSH
77519: LD_VAR 0 9
77523: ARRAY
77524: PUSH
77525: LD_INT 1
77527: ARRAY
77528: PPUSH
77529: LD_VAR 0 2
77533: PUSH
77534: LD_VAR 0 9
77538: ARRAY
77539: PUSH
77540: LD_INT 2
77542: ARRAY
77543: PPUSH
77544: CALL_OW 297
77548: PUSH
77549: LD_INT 6
77551: GREATER
77552: IFFALSE 77595
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77554: LD_VAR 0 4
77558: PPUSH
77559: LD_VAR 0 2
77563: PUSH
77564: LD_VAR 0 9
77568: ARRAY
77569: PUSH
77570: LD_INT 1
77572: ARRAY
77573: PPUSH
77574: LD_VAR 0 2
77578: PUSH
77579: LD_VAR 0 9
77583: ARRAY
77584: PUSH
77585: LD_INT 2
77587: ARRAY
77588: PPUSH
77589: CALL_OW 114
77593: GO 77609
// SetTag ( i , tag ) ;
77595: LD_VAR 0 4
77599: PPUSH
77600: LD_VAR 0 9
77604: PPUSH
77605: CALL_OW 109
// end else
77609: GO 77641
// if enemy then
77611: LD_VAR 0 5
77615: IFFALSE 77641
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77617: LD_VAR 0 4
77621: PPUSH
77622: LD_VAR 0 5
77626: PPUSH
77627: LD_VAR 0 4
77631: PPUSH
77632: CALL_OW 74
77636: PPUSH
77637: CALL_OW 115
// end ;
77641: GO 77318
77643: POP
77644: POP
// end ;
77645: LD_VAR 0 3
77649: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77650: LD_INT 0
77652: PPUSH
77653: PPUSH
77654: PPUSH
// if not unit or IsInUnit ( unit ) then
77655: LD_VAR 0 1
77659: NOT
77660: PUSH
77661: LD_VAR 0 1
77665: PPUSH
77666: CALL_OW 310
77670: OR
77671: IFFALSE 77675
// exit ;
77673: GO 77766
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77675: LD_ADDR_VAR 0 4
77679: PUSH
77680: LD_VAR 0 1
77684: PPUSH
77685: CALL_OW 250
77689: PPUSH
77690: LD_VAR 0 2
77694: PPUSH
77695: LD_INT 1
77697: PPUSH
77698: CALL_OW 272
77702: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77703: LD_ADDR_VAR 0 5
77707: PUSH
77708: LD_VAR 0 1
77712: PPUSH
77713: CALL_OW 251
77717: PPUSH
77718: LD_VAR 0 2
77722: PPUSH
77723: LD_INT 1
77725: PPUSH
77726: CALL_OW 273
77730: ST_TO_ADDR
// if ValidHex ( x , y ) then
77731: LD_VAR 0 4
77735: PPUSH
77736: LD_VAR 0 5
77740: PPUSH
77741: CALL_OW 488
77745: IFFALSE 77766
// ComTurnXY ( unit , x , y ) ;
77747: LD_VAR 0 1
77751: PPUSH
77752: LD_VAR 0 4
77756: PPUSH
77757: LD_VAR 0 5
77761: PPUSH
77762: CALL_OW 118
// end ;
77766: LD_VAR 0 3
77770: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77771: LD_INT 0
77773: PPUSH
77774: PPUSH
// result := false ;
77775: LD_ADDR_VAR 0 3
77779: PUSH
77780: LD_INT 0
77782: ST_TO_ADDR
// if not units then
77783: LD_VAR 0 2
77787: NOT
77788: IFFALSE 77792
// exit ;
77790: GO 77837
// for i in units do
77792: LD_ADDR_VAR 0 4
77796: PUSH
77797: LD_VAR 0 2
77801: PUSH
77802: FOR_IN
77803: IFFALSE 77835
// if See ( side , i ) then
77805: LD_VAR 0 1
77809: PPUSH
77810: LD_VAR 0 4
77814: PPUSH
77815: CALL_OW 292
77819: IFFALSE 77833
// begin result := true ;
77821: LD_ADDR_VAR 0 3
77825: PUSH
77826: LD_INT 1
77828: ST_TO_ADDR
// exit ;
77829: POP
77830: POP
77831: GO 77837
// end ;
77833: GO 77802
77835: POP
77836: POP
// end ;
77837: LD_VAR 0 3
77841: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77842: LD_INT 0
77844: PPUSH
77845: PPUSH
77846: PPUSH
77847: PPUSH
// if not unit or not points then
77848: LD_VAR 0 1
77852: NOT
77853: PUSH
77854: LD_VAR 0 2
77858: NOT
77859: OR
77860: IFFALSE 77864
// exit ;
77862: GO 77954
// dist := 99999 ;
77864: LD_ADDR_VAR 0 5
77868: PUSH
77869: LD_INT 99999
77871: ST_TO_ADDR
// for i in points do
77872: LD_ADDR_VAR 0 4
77876: PUSH
77877: LD_VAR 0 2
77881: PUSH
77882: FOR_IN
77883: IFFALSE 77952
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77885: LD_ADDR_VAR 0 6
77889: PUSH
77890: LD_VAR 0 1
77894: PPUSH
77895: LD_VAR 0 4
77899: PUSH
77900: LD_INT 1
77902: ARRAY
77903: PPUSH
77904: LD_VAR 0 4
77908: PUSH
77909: LD_INT 2
77911: ARRAY
77912: PPUSH
77913: CALL_OW 297
77917: ST_TO_ADDR
// if tmpDist < dist then
77918: LD_VAR 0 6
77922: PUSH
77923: LD_VAR 0 5
77927: LESS
77928: IFFALSE 77950
// begin result := i ;
77930: LD_ADDR_VAR 0 3
77934: PUSH
77935: LD_VAR 0 4
77939: ST_TO_ADDR
// dist := tmpDist ;
77940: LD_ADDR_VAR 0 5
77944: PUSH
77945: LD_VAR 0 6
77949: ST_TO_ADDR
// end ; end ;
77950: GO 77882
77952: POP
77953: POP
// end ; end_of_file
77954: LD_VAR 0 3
77958: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77959: LD_VAR 0 1
77963: PUSH
77964: LD_INT 200
77966: DOUBLE
77967: GREATEREQUAL
77968: IFFALSE 77976
77970: LD_INT 299
77972: DOUBLE
77973: LESSEQUAL
77974: IFTRUE 77978
77976: GO 78010
77978: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77979: LD_VAR 0 1
77983: PPUSH
77984: LD_VAR 0 2
77988: PPUSH
77989: LD_VAR 0 3
77993: PPUSH
77994: LD_VAR 0 4
77998: PPUSH
77999: LD_VAR 0 5
78003: PPUSH
78004: CALL 33606 0 5
78008: GO 78087
78010: LD_INT 300
78012: DOUBLE
78013: GREATEREQUAL
78014: IFFALSE 78022
78016: LD_INT 399
78018: DOUBLE
78019: LESSEQUAL
78020: IFTRUE 78024
78022: GO 78086
78024: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78025: LD_VAR 0 1
78029: PPUSH
78030: LD_VAR 0 2
78034: PPUSH
78035: LD_VAR 0 3
78039: PPUSH
78040: LD_VAR 0 4
78044: PPUSH
78045: LD_VAR 0 5
78049: PPUSH
78050: LD_VAR 0 6
78054: PPUSH
78055: LD_VAR 0 7
78059: PPUSH
78060: LD_VAR 0 8
78064: PPUSH
78065: LD_VAR 0 9
78069: PPUSH
78070: LD_VAR 0 10
78074: PPUSH
78075: LD_VAR 0 11
78079: PPUSH
78080: CALL 31248 0 11
78084: GO 78087
78086: POP
// end ;
78087: PPOPN 11
78089: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78090: LD_VAR 0 1
78094: PPUSH
78095: LD_VAR 0 2
78099: PPUSH
78100: LD_VAR 0 3
78104: PPUSH
78105: LD_VAR 0 4
78109: PPUSH
78110: LD_VAR 0 5
78114: PPUSH
78115: CALL 33342 0 5
// end ; end_of_file
78119: PPOPN 5
78121: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78122: LD_VAR 0 1
78126: PPUSH
78127: LD_VAR 0 2
78131: PPUSH
78132: LD_VAR 0 3
78136: PPUSH
78137: LD_VAR 0 4
78141: PPUSH
78142: LD_VAR 0 5
78146: PPUSH
78147: LD_VAR 0 6
78151: PPUSH
78152: CALL 18941 0 6
// end ;
78156: PPOPN 6
78158: END
