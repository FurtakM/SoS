// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10090 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10220 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11627 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13856 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 2000 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 2000
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8309 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6358 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6358 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6358 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6358 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6358 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6209 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6209 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8082 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6209 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6209 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8082 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10608 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5233
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6118 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10534 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5451 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5451 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9125 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 70678 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6358 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6499 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6574 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8481 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6358 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6913 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7521 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7812 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6209 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6209 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6209 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7960 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7960 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7960 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8082 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8082 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6118 0 1
3087: PPUSH
3088: CALL 5810 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6118 0 1
3108: PPUSH
3109: CALL 5810 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11332 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5451 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3480
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3478
// if GetLives ( ru_attack_list [ i ] ) >= 250 then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: IFFALSE 3476
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3417: LD_EXP 10
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_INT 81
3430: PUSH
3431: LD_EXP 10
3435: PUSH
3436: LD_VAR 0 1
3440: ARRAY
3441: PPUSH
3442: CALL_OW 255
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: PPUSH
3456: LD_EXP 10
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 74
3471: PPUSH
3472: CALL_OW 115
3476: GO 3393
3478: POP
3479: POP
// end ; if GetBehemoth ( 3 ) then
3480: LD_INT 3
3482: PPUSH
3483: CALL 11332 0 1
3487: IFFALSE 3859
// begin if ru_mech >= 4 then
3489: LD_EXP 22
3493: PUSH
3494: LD_INT 4
3496: GREATEREQUAL
3497: IFFALSE 3548
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3499: LD_ADDR_EXP 15
3503: PUSH
3504: LD_EXP 22
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: PUSH
3513: LD_EXP 22
3517: PUSH
3518: LD_INT 2
3520: ARRAY
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 3
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 4
3538: ARRAY
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
3546: GO 3558
// ru_behemoth_mechanic := ru_mech ;
3548: LD_ADDR_EXP 15
3552: PUSH
3553: LD_EXP 22
3557: ST_TO_ADDR
// for i = 1 to ru_mech do
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: DOUBLE
3564: LD_INT 1
3566: DEC
3567: ST_TO_ADDR
3568: LD_EXP 22
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3628
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3576: LD_EXP 22
3580: PUSH
3581: LD_VAR 0 1
3585: ARRAY
3586: PPUSH
3587: CALL_OW 310
3591: PUSH
3592: LD_EXP 22
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PUSH
3603: LD_EXP 15
3607: IN
3608: AND
3609: IFFALSE 3626
// ComExitBuilding ( ru_mech [ i ] ) ;
3611: LD_EXP 22
3615: PUSH
3616: LD_VAR 0 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 122
3626: GO 3573
3628: POP
3629: POP
// if UnitsInside ( ru_fac ) = 0 then
3630: LD_INT 14
3632: PPUSH
3633: CALL_OW 313
3637: PUSH
3638: LD_INT 0
3640: EQUAL
3641: IFFALSE 3708
// begin InitHc_All ;
3643: CALL_OW 584
// for i := 1 to 5 do
3647: LD_ADDR_VAR 0 1
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 5
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3706
// begin uc_side := 3 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 3
3670: ST_TO_ADDR
// uc_nation := 3 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 3
3678: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3679: LD_INT 0
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 7
3687: PPUSH
3688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3692: CALL_OW 44
3696: PPUSH
3697: LD_INT 14
3699: PPUSH
3700: CALL_OW 52
// end ;
3704: GO 3660
3706: POP
3707: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3708: LD_INT 12
3710: PPUSH
3711: LD_INT 22
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 21
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 70
3739: PUSH
3740: LD_INT 0
3742: GREATER
3743: IFFALSE 3803
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3745: LD_INT 3
3747: PPUSH
3748: CALL 11332 0 1
3752: PUSH
3753: LD_INT 1
3755: ARRAY
3756: PPUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 34
3769: PUSH
3770: LD_INT 49
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PPUSH
3786: LD_EXP 15
3790: PPUSH
3791: LD_INT 97
3793: PPUSH
3794: LD_INT 9
3796: PPUSH
3797: CALL 10829 0 5
3801: GO 3859
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3803: LD_INT 3
3805: PPUSH
3806: CALL 11332 0 1
3810: PUSH
3811: LD_INT 1
3813: ARRAY
3814: PPUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 49
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: PPUSH
3839: CALL_OW 69
3843: PPUSH
3844: LD_EXP 15
3848: PPUSH
3849: LD_INT 153
3851: PPUSH
3852: LD_INT 102
3854: PPUSH
3855: CALL 10829 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3859: LD_EXP 24
3863: PUSH
3864: LD_INT 0
3866: EQUAL
3867: PUSH
3868: LD_INT 44
3870: PPUSH
3871: LD_INT 3
3873: PPUSH
3874: CALL_OW 321
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3894
// ComChangeClassToBazooker ( ru_sold ) ;
3885: LD_EXP 20
3889: PPUSH
3890: CALL 9766 0 1
// if ru_bazz then
3894: LD_EXP 24
3898: IFFALSE 3912
// IntBazooka ( ru_bazz , 1 ) ;
3900: LD_EXP 24
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL 9485 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3912: LD_INT 67
3914: PPUSH
3915: LD_INT 39
3917: PPUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL_OW 440
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: PUSH
3930: LD_INT 20
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: CALL_OW 321
3940: PUSH
3941: LD_INT 2
3943: EQUAL
3944: AND
3945: IFFALSE 3966
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3947: LD_EXP 23
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_INT 67
3958: PPUSH
3959: LD_INT 39
3961: PPUSH
3962: CALL 9064 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3966: LD_INT 89
3968: PPUSH
3969: LD_INT 66
3971: PPUSH
3972: LD_INT 3
3974: PPUSH
3975: CALL_OW 440
3979: PUSH
3980: LD_INT 0
3982: EQUAL
3983: IFFALSE 4004
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
3985: LD_EXP 23
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_INT 87
3996: PPUSH
3997: LD_INT 60
3999: PPUSH
4000: CALL 9064 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4004: LD_INT 104
4006: PPUSH
4007: LD_INT 94
4009: PPUSH
4010: LD_INT 3
4012: PPUSH
4013: CALL_OW 440
4017: PUSH
4018: LD_INT 0
4020: EQUAL
4021: PUSH
4022: LD_INT 20
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: CALL_OW 321
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: AND
4037: IFFALSE 4058
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4039: LD_EXP 23
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: PPUSH
4048: LD_INT 104
4050: PPUSH
4051: LD_INT 94
4053: PPUSH
4054: CALL 9064 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4058: LD_INT 3
4060: PPUSH
4061: LD_INT 24
4063: PPUSH
4064: LD_INT 53
4066: PPUSH
4067: CALL 7960 0 3
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: PUSH
4076: LD_EXP 18
4080: AND
4081: IFFALSE 4222
// begin need_buldozer := false ;
4083: LD_ADDR_EXP 18
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4091: LD_INT 3
4093: PPUSH
4094: LD_INT 24
4096: PPUSH
4097: LD_INT 53
4099: PPUSH
4100: CALL 7960 0 3
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_INT 67
4111: PPUSH
4112: LD_INT 39
4114: PPUSH
4115: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 24
4124: PPUSH
4125: LD_INT 53
4127: PPUSH
4128: CALL 7960 0 3
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PPUSH
4137: LD_INT 71
4139: PPUSH
4140: LD_INT 10
4142: PPUSH
4143: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4147: LD_INT 3
4149: PPUSH
4150: LD_INT 24
4152: PPUSH
4153: LD_INT 53
4155: PPUSH
4156: CALL 7960 0 3
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: PPUSH
4165: LD_INT 15
4167: PPUSH
4168: CALL 5551 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 24
4177: PPUSH
4178: LD_INT 53
4180: PPUSH
4181: CALL 7960 0 3
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: PPUSH
4190: LD_INT 350
4192: PPUSH
4193: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 24
4202: PPUSH
4203: LD_INT 53
4205: PPUSH
4206: CALL 7960 0 3
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PPUSH
4215: LD_INT 14
4217: PPUSH
4218: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4222: LD_INT 67
4224: PPUSH
4225: LD_INT 39
4227: PPUSH
4228: LD_INT 3
4230: PPUSH
4231: CALL_OW 440
4235: PUSH
4236: LD_INT 67
4238: PPUSH
4239: LD_INT 39
4241: PPUSH
4242: CALL_OW 428
4246: PUSH
4247: LD_INT 0
4249: EQUAL
4250: AND
4251: PUSH
4252: LD_INT 79
4254: PPUSH
4255: LD_INT 45
4257: PPUSH
4258: CALL_OW 428
4262: PPUSH
4263: CALL_OW 266
4267: PUSH
4268: LD_INT 0
4270: EQUAL
4271: AND
4272: PUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_INT 79
4278: PPUSH
4279: LD_INT 45
4281: PPUSH
4282: CALL 5451 0 3
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: AND
4291: IFFALSE 4394
// begin for i = 1 to ru_eng do
4293: LD_ADDR_VAR 0 1
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_EXP 21
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4392
// if IsInUnit ( ru_eng [ i ] ) then
4311: LD_EXP 21
4315: PUSH
4316: LD_VAR 0 1
4320: ARRAY
4321: PPUSH
4322: CALL_OW 310
4326: IFFALSE 4345
// ComExitBuilding ( ru_eng [ i ] ) else
4328: LD_EXP 21
4332: PUSH
4333: LD_VAR 0 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 122
4343: GO 4390
// if not HasTask ( ru_eng [ i ] ) then
4345: LD_EXP 21
4349: PUSH
4350: LD_VAR 0 1
4354: ARRAY
4355: PPUSH
4356: CALL_OW 314
4360: NOT
4361: IFFALSE 4390
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: LD_INT 30
4376: PPUSH
4377: LD_INT 67
4379: PPUSH
4380: LD_INT 39
4382: PPUSH
4383: LD_INT 3
4385: PPUSH
4386: CALL_OW 145
4390: GO 4308
4392: POP
4393: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 79
4399: PPUSH
4400: LD_INT 45
4402: PPUSH
4403: CALL 5451 0 3
4407: PUSH
4408: LD_INT 0
4410: EQUAL
4411: IFFALSE 4607
// begin if HexInfo ( 79 , 45 ) = 0 then
4413: LD_INT 79
4415: PPUSH
4416: LD_INT 45
4418: PPUSH
4419: CALL_OW 428
4423: PUSH
4424: LD_INT 0
4426: EQUAL
4427: IFFALSE 4449
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4429: LD_EXP 21
4433: PPUSH
4434: LD_INT 79
4436: PPUSH
4437: LD_INT 45
4439: PPUSH
4440: LD_INT 3
4442: PPUSH
4443: CALL 6975 0 4
4447: GO 4607
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4449: LD_INT 89
4451: PPUSH
4452: LD_INT 66
4454: PPUSH
4455: CALL_OW 428
4459: PUSH
4460: LD_INT 0
4462: EQUAL
4463: PUSH
4464: LD_INT 89
4466: PPUSH
4467: LD_INT 66
4469: PPUSH
4470: LD_INT 3
4472: PPUSH
4473: CALL_OW 440
4477: AND
4478: IFFALSE 4607
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4480: LD_INT 79
4482: PPUSH
4483: LD_INT 45
4485: PPUSH
4486: CALL_OW 428
4490: PPUSH
4491: CALL_OW 274
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 100
4501: PPUSH
4502: CALL_OW 277
// for i = 1 to ru_eng do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 21
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4605
// if IsInUnit ( ru_eng [ i ] ) then
4524: LD_EXP 21
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 310
4539: IFFALSE 4558
// ComExitBuilding ( ru_eng [ i ] ) else
4541: LD_EXP 21
4545: PUSH
4546: LD_VAR 0 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 122
4556: GO 4603
// if not HasTask ( ru_eng [ i ] ) then
4558: LD_EXP 21
4562: PUSH
4563: LD_VAR 0 1
4567: ARRAY
4568: PPUSH
4569: CALL_OW 314
4573: NOT
4574: IFFALSE 4603
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: LD_INT 29
4589: PPUSH
4590: LD_INT 89
4592: PPUSH
4593: LD_INT 66
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: CALL_OW 145
4603: GO 4521
4605: POP
4606: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4607: LD_INT 3
4609: PPUSH
4610: LD_INT 29
4612: PPUSH
4613: CALL 6209 0 2
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: PUSH
4622: LD_INT 1
4624: PPUSH
4625: LD_INT 36
4627: PPUSH
4628: LD_INT 6
4630: PPUSH
4631: CALL 5451 0 3
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: AND
4640: PUSH
4641: LD_INT 3
4643: PPUSH
4644: CALL 6118 0 1
4648: PPUSH
4649: LD_INT 29
4651: PPUSH
4652: CALL 5694 0 2
4656: AND
4657: IFFALSE 4760
// begin for i = 1 to ru_eng do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_EXP 21
4673: PUSH
4674: FOR_TO
4675: IFFALSE 4758
// begin if IsInUnit ( ru_eng [ i ] ) then
4677: LD_EXP 21
4681: PUSH
4682: LD_VAR 0 1
4686: ARRAY
4687: PPUSH
4688: CALL_OW 310
4692: IFFALSE 4711
// ComExitBuilding ( ru_eng [ i ] ) else
4694: LD_EXP 21
4698: PUSH
4699: LD_VAR 0 1
4703: ARRAY
4704: PPUSH
4705: CALL_OW 122
4709: GO 4756
// if not HasTask ( ru_eng [ i ] ) then
4711: LD_EXP 21
4715: PUSH
4716: LD_VAR 0 1
4720: ARRAY
4721: PPUSH
4722: CALL_OW 314
4726: NOT
4727: IFFALSE 4756
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: LD_INT 29
4742: PPUSH
4743: LD_INT 33
4745: PPUSH
4746: LD_INT 4
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL_OW 205
// end ; end ;
4756: GO 4674
4758: POP
4759: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4760: LD_EXP 21
4764: PUSH
4765: LD_INT 79
4767: PPUSH
4768: LD_INT 45
4770: PPUSH
4771: CALL_OW 428
4775: PUSH
4776: LD_INT 0
4778: GREATER
4779: AND
4780: PUSH
4781: LD_INT 79
4783: PPUSH
4784: LD_INT 45
4786: PPUSH
4787: CALL_OW 428
4791: PPUSH
4792: CALL_OW 266
4796: PUSH
4797: LD_INT 0
4799: EQUAL
4800: AND
4801: IFFALSE 4961
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4803: LD_INT 79
4805: PPUSH
4806: LD_INT 45
4808: PPUSH
4809: CALL_OW 428
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: LD_INT 3
4821: EQUAL
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 79
4828: PPUSH
4829: LD_INT 45
4831: PPUSH
4832: CALL 5451 0 3
4836: PUSH
4837: LD_INT 0
4839: EQUAL
4840: AND
4841: PUSH
4842: LD_INT 79
4844: PPUSH
4845: LD_INT 45
4847: PPUSH
4848: CALL_OW 428
4852: PPUSH
4853: CALL_OW 274
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: CALL_OW 275
4865: PUSH
4866: LD_INT 10
4868: GREATEREQUAL
4869: AND
4870: IFFALSE 4961
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4872: LD_EXP 21
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: CALL_OW 310
4885: IFFALSE 4902
// ComExitBuilding ( ru_eng [ 1 ] ) else
4887: LD_EXP 21
4891: PUSH
4892: LD_INT 1
4894: ARRAY
4895: PPUSH
4896: CALL_OW 122
4900: GO 4961
// if not HasTask ( ru_eng [ 1 ] ) then
4902: LD_EXP 21
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: CALL_OW 314
4915: NOT
4916: IFFALSE 4961
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4918: LD_EXP 21
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_INT 79
4929: PPUSH
4930: LD_INT 45
4932: PPUSH
4933: CALL_OW 428
4937: PPUSH
4938: LD_INT 3
4940: PPUSH
4941: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4945: LD_EXP 21
4949: PUSH
4950: LD_INT 1
4952: ARRAY
4953: PPUSH
4954: LD_INT 2
4956: PPUSH
4957: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4961: LD_EXP 21
4965: PUSH
4966: LD_INT 2
4968: GREATER
4969: PUSH
4970: LD_INT 79
4972: PPUSH
4973: LD_INT 45
4975: PPUSH
4976: CALL_OW 428
4980: PUSH
4981: LD_INT 0
4983: GREATER
4984: AND
4985: PUSH
4986: LD_INT 79
4988: PPUSH
4989: LD_INT 45
4991: PPUSH
4992: CALL_OW 428
4996: PPUSH
4997: CALL_OW 266
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: IFFALSE 5166
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5008: LD_INT 79
5010: PPUSH
5011: LD_INT 45
5013: PPUSH
5014: CALL_OW 428
5018: PPUSH
5019: CALL_OW 255
5023: PUSH
5024: LD_INT 3
5026: EQUAL
5027: PUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 79
5033: PPUSH
5034: LD_INT 45
5036: PPUSH
5037: CALL 5451 0 3
5041: PUSH
5042: LD_INT 0
5044: EQUAL
5045: AND
5046: PUSH
5047: LD_INT 79
5049: PPUSH
5050: LD_INT 45
5052: PPUSH
5053: CALL_OW 428
5057: PPUSH
5058: CALL_OW 274
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 275
5070: PUSH
5071: LD_INT 20
5073: GREATER
5074: AND
5075: IFFALSE 5166
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5077: LD_EXP 21
5081: PUSH
5082: LD_INT 2
5084: ARRAY
5085: PPUSH
5086: CALL_OW 310
5090: IFFALSE 5107
// ComExitBuilding ( ru_eng [ 2 ] ) else
5092: LD_EXP 21
5096: PUSH
5097: LD_INT 2
5099: ARRAY
5100: PPUSH
5101: CALL_OW 122
5105: GO 5166
// if not HasTask ( ru_eng [ 2 ] ) then
5107: LD_EXP 21
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 314
5120: NOT
5121: IFFALSE 5166
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5123: LD_EXP 21
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_INT 79
5134: PPUSH
5135: LD_INT 45
5137: PPUSH
5138: CALL_OW 428
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5150: LD_EXP 21
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: LD_INT 2
5161: PPUSH
5162: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 59
5171: PPUSH
5172: LD_INT 60
5174: PPUSH
5175: CALL 5451 0 3
5179: PUSH
5180: LD_INT 0
5182: EQUAL
5183: PUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 67
5189: PPUSH
5190: LD_INT 76
5192: PPUSH
5193: CALL 5451 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: AND
5202: PUSH
5203: LD_INT 1
5205: PPUSH
5206: LD_INT 79
5208: PPUSH
5209: LD_INT 100
5211: PPUSH
5212: CALL 5451 0 3
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5233
// CollectCrates ( 3 , west_crates ) ;
5223: LD_INT 3
5225: PPUSH
5226: LD_INT 13
5228: PPUSH
5229: CALL 11376 0 2
// end ;
5233: PPOPN 10
5235: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5236: LD_OWVAR 1
5240: PUSH
5241: LD_INT 111300
5243: LESSEQUAL
5244: PUSH
5245: LD_EXP 30
5249: NOT
5250: OR
5251: IFFALSE 5448
5253: GO 5255
5255: DISABLE
5256: LD_INT 0
5258: PPUSH
// begin enable ;
5259: ENABLE
// uc_nation := 3 ;
5260: LD_ADDR_OWVAR 21
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_side := 3 ;
5268: LD_ADDR_OWVAR 20
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5276: LD_ADDR_OWVAR 37
5280: PUSH
5281: LD_INT 22
5283: ST_TO_ADDR
// vc_engine := engine_siberite ;
5284: LD_ADDR_OWVAR 39
5288: PUSH
5289: LD_INT 3
5291: ST_TO_ADDR
// vc_control := control_computer ;
5292: LD_ADDR_OWVAR 38
5296: PUSH
5297: LD_INT 3
5299: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5300: LD_ADDR_OWVAR 40
5304: PUSH
5305: LD_INT 51
5307: ST_TO_ADDR
// veh := CreateVehicle ;
5308: LD_ADDR_VAR 0 1
5312: PUSH
5313: CALL_OW 45
5317: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 4
5325: PPUSH
5326: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5330: LD_VAR 0 1
5334: PPUSH
5335: LD_INT 10
5337: PPUSH
5338: LD_INT 0
5340: PPUSH
5341: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_INT 1
5352: PUSH
5353: LD_INT 2
5355: PUSH
5356: LD_INT 3
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 4
5373: PPUSH
5374: CALL_OW 12
5378: ARRAY
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5387: LD_VAR 0 1
5391: PPUSH
5392: LD_INT 2
5394: PPUSH
5395: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_INT 10
5406: PPUSH
5407: CALL_OW 173
// Wait ( 0 0$10 ) ;
5411: LD_INT 350
5413: PPUSH
5414: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5418: LD_INT 35
5420: PPUSH
5421: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5425: LD_VAR 0 1
5429: PPUSH
5430: LD_INT 10
5432: PPUSH
5433: CALL_OW 308
5437: IFFALSE 5418
// RemoveUnit ( veh ) ;
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 64
// end ; end_of_file
5448: PPOPN 1
5450: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5451: LD_INT 0
5453: PPUSH
5454: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5455: LD_ADDR_VAR 0 5
5459: PUSH
5460: LD_INT 22
5462: PUSH
5463: LD_VAR 0 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 69
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 73
5491: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5492: LD_ADDR_VAR 0 4
5496: PUSH
5497: LD_VAR 0 5
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_VAR 0 3
5511: PPUSH
5512: CALL_OW 297
5516: PUSH
5517: LD_INT 15
5519: LESS
5520: PUSH
5521: LD_INT 2
5523: PPUSH
5524: LD_INT 22
5526: PUSH
5527: LD_VAR 0 1
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 70
5540: PUSH
5541: LD_INT 0
5543: GREATER
5544: OR
5545: ST_TO_ADDR
// end ;
5546: LD_VAR 0 4
5550: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5551: LD_INT 0
5553: PPUSH
5554: PPUSH
// area = ListEnvironmentArea ( area ) ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 353
5569: ST_TO_ADDR
// if bulldozer > 0 then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_INT 0
5577: GREATER
5578: IFFALSE 5689
// for i = 1 to area do
5580: LD_ADDR_VAR 0 4
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_VAR 0 2
5594: PUSH
5595: FOR_TO
5596: IFFALSE 5687
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_VAR 0 4
5607: ARRAY
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 4
5622: ARRAY
5623: PUSH
5624: LD_INT 2
5626: ARRAY
5627: PPUSH
5628: CALL_OW 351
5632: IFFALSE 5685
// if not HasTask ( bulldozer ) then
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 314
5643: NOT
5644: IFFALSE 5685
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5646: LD_VAR 0 1
5650: PPUSH
5651: LD_VAR 0 2
5655: PUSH
5656: LD_VAR 0 4
5660: ARRAY
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_VAR 0 2
5670: PUSH
5671: LD_VAR 0 4
5675: ARRAY
5676: PUSH
5677: LD_INT 2
5679: ARRAY
5680: PPUSH
5681: CALL_OW 171
5685: GO 5595
5687: POP
5688: POP
// end ;
5689: LD_VAR 0 3
5693: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
// pom := GetBase ( bdepot ) ;
5699: LD_ADDR_VAR 0 4
5703: PUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 274
5713: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5714: LD_ADDR_VAR 0 5
5718: PUSH
5719: LD_VAR 0 2
5723: PPUSH
5724: LD_VAR 0 1
5728: PPUSH
5729: CALL_OW 248
5733: PPUSH
5734: CALL_OW 450
5738: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5739: LD_VAR 0 4
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 275
5751: PUSH
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: GREATEREQUAL
5761: PUSH
5762: LD_VAR 0 4
5766: PPUSH
5767: LD_INT 3
5769: PPUSH
5770: CALL_OW 275
5774: PUSH
5775: LD_VAR 0 5
5779: PUSH
5780: LD_INT 3
5782: ARRAY
5783: GREATEREQUAL
5784: AND
5785: IFFALSE 5797
// result := true else
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
5795: GO 5805
// result := false ;
5797: LD_ADDR_VAR 0 3
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// end ;
5805: LD_VAR 0 3
5809: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
5814: PPUSH
// pom := GetBase ( bdepot ) ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 274
5829: ST_TO_ADDR
// sor := [ ] ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: EMPTY
5836: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5837: LD_ADDR_VAR 0 4
5841: PUSH
5842: LD_VAR 0 4
5846: PUSH
5847: LD_VAR 0 3
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 275
5859: ADD
5860: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_VAR 0 4
5870: PUSH
5871: LD_VAR 0 3
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: CALL_OW 275
5883: ADD
5884: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_VAR 0 4
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: CALL_OW 275
5907: ADD
5908: ST_TO_ADDR
// result := sor ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_VAR 0 4
5918: ST_TO_ADDR
// end ;
5919: LD_VAR 0 2
5923: RET
// export function Hex ( x , y ) ; begin
5924: LD_INT 0
5926: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5927: LD_VAR 0 1
5931: PPUSH
5932: LD_VAR 0 2
5936: PPUSH
5937: CALL_OW 488
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: CALL_OW 428
5956: PUSH
5957: LD_INT 0
5959: EQUAL
5960: AND
5961: IFFALSE 5973
// result := true else
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 1
5970: ST_TO_ADDR
5971: GO 5981
// result := false ;
5973: LD_ADDR_VAR 0 3
5977: PUSH
5978: LD_INT 0
5980: ST_TO_ADDR
// end ;
5981: LD_VAR 0 3
5985: RET
// export function NeedBuilding ( side , btype ) ; begin
5986: LD_INT 0
5988: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
5989: LD_INT 22
5991: PUSH
5992: LD_VAR 0 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_VAR 0 2
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 3
6015: PUSH
6016: LD_INT 57
6018: PUSH
6019: EMPTY
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PPUSH
6031: CALL_OW 69
6035: PUSH
6036: LD_INT 0
6038: EQUAL
6039: IFFALSE 6051
// result := true else
6041: LD_ADDR_VAR 0 3
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
6049: GO 6059
// result := false ;
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// end ;
6059: LD_VAR 0 3
6063: RET
// export function NeedBase ( side ) ; begin
6064: LD_INT 0
6066: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6067: LD_VAR 0 1
6071: PPUSH
6072: LD_INT 0
6074: PPUSH
6075: CALL 5986 0 2
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL 5986 0 2
6092: AND
6093: IFFALSE 6105
// result := true else
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
6103: GO 6113
// result := false ;
6105: LD_ADDR_VAR 0 2
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// end ;
6113: LD_VAR 0 2
6117: RET
// export function MyBase ( side ) ; begin
6118: LD_INT 0
6120: PPUSH
// if not NeedBase ( side ) then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL 6064 0 1
6130: NOT
6131: IFFALSE 6196
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6133: LD_ADDR_VAR 0 2
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 2
6152: PUSH
6153: LD_INT 30
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: ST_TO_ADDR
6194: GO 6204
// result := false ;
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 2
6208: RET
// export function GetBuilding ( side , btype ) ; begin
6209: LD_INT 0
6211: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6212: LD_INT 22
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 30
6226: PUSH
6227: LD_VAR 0 2
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: LD_INT 0
6247: GREATER
6248: IFFALSE 6290
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6250: LD_ADDR_VAR 0 3
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 30
6269: PUSH
6270: LD_VAR 0 2
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 69
6287: ST_TO_ADDR
6288: GO 6298
// result := false ;
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// end ;
6298: LD_VAR 0 3
6302: RET
// export function GetCrates ( side ) ; begin
6303: LD_INT 0
6305: PPUSH
// result := 0 ;
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// if MyBase ( side ) then
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL 6118 0 1
6323: IFFALSE 6353
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL 6118 0 1
6339: PPUSH
6340: CALL_OW 274
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 275
6352: ST_TO_ADDR
// end ;
6353: LD_VAR 0 2
6357: RET
// export function GetLabs ( side ) ; begin
6358: LD_INT 0
6360: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 30
6383: PUSH
6384: LD_INT 6
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 8
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 30
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: PPUSH
6424: CALL_OW 69
6428: ST_TO_ADDR
// end ;
6429: LD_VAR 0 2
6433: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
6438: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6439: LD_ADDR_VAR 0 3
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: LD_INT 1
6451: PPUSH
6452: CALL_OW 268
6456: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6457: LD_ADDR_VAR 0 4
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 2
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: LD_VAR 0 3
6484: PUSH
6485: LD_VAR 0 4
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// end ;
6494: LD_VAR 0 2
6498: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6499: LD_INT 0
6501: PPUSH
6502: PPUSH
// result := false ;
6503: LD_ADDR_VAR 0 3
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// for i = 1 to tlist do
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_VAR 0 2
6525: PUSH
6526: FOR_TO
6527: IFFALSE 6567
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6529: LD_VAR 0 2
6533: PUSH
6534: LD_VAR 0 4
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 321
6549: PUSH
6550: LD_INT 2
6552: NONEQUAL
6553: IFFALSE 6565
// begin result := true ;
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// break ;
6563: GO 6567
// end ;
6565: GO 6526
6567: POP
6568: POP
// end ;
6569: LD_VAR 0 3
6573: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
// lab := GetLabs ( side ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL 6358 0 1
6598: ST_TO_ADDR
// tmp := 0 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 0
6606: ST_TO_ADDR
// list := [ ] ;
6607: LD_ADDR_VAR 0 8
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6614: LD_ADDR_VAR 0 10
6618: PUSH
6619: LD_INT 35
6621: PUSH
6622: LD_INT 45
6624: PUSH
6625: LD_INT 46
6627: PUSH
6628: LD_INT 47
6630: PUSH
6631: LD_INT 1
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 48
6639: PUSH
6640: LD_INT 49
6642: PUSH
6643: LD_INT 50
6645: PUSH
6646: LD_INT 20
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: ST_TO_ADDR
// for i = 1 to tlist do
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 2
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6729
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_VAR 0 4
6688: ARRAY
6689: PPUSH
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 321
6699: PUSH
6700: LD_INT 2
6702: NONEQUAL
6703: IFFALSE 6727
// list := list ^ tlist [ i ] ;
6705: LD_ADDR_VAR 0 8
6709: PUSH
6710: LD_VAR 0 8
6714: PUSH
6715: LD_VAR 0 2
6719: PUSH
6720: LD_VAR 0 4
6724: ARRAY
6725: ADD
6726: ST_TO_ADDR
6727: GO 6676
6729: POP
6730: POP
// if list then
6731: LD_VAR 0 8
6735: IFFALSE 6900
// begin for i = 1 to lab do
6737: LD_ADDR_VAR 0 4
6741: PUSH
6742: DOUBLE
6743: LD_INT 1
6745: DEC
6746: ST_TO_ADDR
6747: LD_VAR 0 5
6751: PUSH
6752: FOR_TO
6753: IFFALSE 6823
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6755: LD_VAR 0 8
6759: PUSH
6760: LD_INT 1
6762: ARRAY
6763: PUSH
6764: LD_VAR 0 10
6768: IN
6769: PUSH
6770: LD_VAR 0 8
6774: PUSH
6775: LD_INT 1
6777: ARRAY
6778: PPUSH
6779: CALL_OW 481
6783: PUSH
6784: LD_VAR 0 5
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: PPUSH
6795: CALL 6434 0 1
6799: IN
6800: OR
6801: IFFALSE 6821
// begin mylab := lab [ i ] ;
6803: LD_ADDR_VAR 0 9
6807: PUSH
6808: LD_VAR 0 5
6812: PUSH
6813: LD_VAR 0 4
6817: ARRAY
6818: ST_TO_ADDR
// break ;
6819: GO 6823
// end ;
6821: GO 6752
6823: POP
6824: POP
// if mylab then
6825: LD_VAR 0 9
6829: IFFALSE 6890
// begin if BuildingStatus ( mylab ) = bs_idle then
6831: LD_VAR 0 9
6835: PPUSH
6836: CALL_OW 461
6840: PUSH
6841: LD_INT 2
6843: EQUAL
6844: IFFALSE 6888
// for i = 1 to list do
6846: LD_ADDR_VAR 0 4
6850: PUSH
6851: DOUBLE
6852: LD_INT 1
6854: DEC
6855: ST_TO_ADDR
6856: LD_VAR 0 8
6860: PUSH
6861: FOR_TO
6862: IFFALSE 6886
// AddComResearch ( mylab , list [ i ] ) ;
6864: LD_VAR 0 9
6868: PPUSH
6869: LD_VAR 0 8
6873: PUSH
6874: LD_VAR 0 4
6878: ARRAY
6879: PPUSH
6880: CALL_OW 184
6884: GO 6861
6886: POP
6887: POP
// end else
6888: GO 6898
// result := false ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// end else
6898: GO 6908
// result := false ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// end ;
6908: LD_VAR 0 3
6912: RET
// export function GetTowers ( side ) ; begin
6913: LD_INT 0
6915: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6916: LD_ADDR_VAR 0 2
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_VAR 0 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 32
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 30
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 2
6974: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
// if Hex ( x , y ) then
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_VAR 0 3
6988: PPUSH
6989: CALL 5924 0 2
6993: IFFALSE 7068
// for i = 1 to plist do
6995: LD_ADDR_VAR 0 6
6999: PUSH
7000: DOUBLE
7001: LD_INT 1
7003: DEC
7004: ST_TO_ADDR
7005: LD_VAR 0 1
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7066
// if not HasTask ( plist [ i ] ) then
7013: LD_VAR 0 1
7017: PUSH
7018: LD_VAR 0 6
7022: ARRAY
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: IFFALSE 7064
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: LD_INT 0
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: LD_VAR 0 4
7059: PPUSH
7060: CALL_OW 145
7064: GO 7010
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 5
7072: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 266
7086: PUSH
7087: LD_INT 0
7089: EQUAL
7090: PUSH
7091: LD_VAR 0 2
7095: PPUSH
7096: LD_INT 1
7098: PPUSH
7099: CALL 5694 0 2
7103: AND
7104: PUSH
7105: LD_VAR 0 1
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: CALL_OW 255
7118: PPUSH
7119: CALL_OW 345
7123: NOT
7124: AND
7125: IFFALSE 7221
// begin ComUpgrade ( bident ) ;
7127: LD_VAR 0 2
7131: PPUSH
7132: CALL_OW 146
// for i = 1 to plist do
7136: LD_ADDR_VAR 0 4
7140: PUSH
7141: DOUBLE
7142: LD_INT 1
7144: DEC
7145: ST_TO_ADDR
7146: LD_VAR 0 1
7150: PUSH
7151: FOR_TO
7152: IFFALSE 7209
// if not HasTask ( plist [ i ] ) then
7154: LD_VAR 0 1
7158: PUSH
7159: LD_VAR 0 4
7163: ARRAY
7164: PPUSH
7165: CALL_OW 314
7169: NOT
7170: IFFALSE 7207
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: CALL_OW 250
7192: PPUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 251
7202: PPUSH
7203: CALL_OW 111
7207: GO 7151
7209: POP
7210: POP
// result := true ;
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// end else
7219: GO 7229
// result := false ;
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// end ;
7229: LD_VAR 0 3
7233: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7238: LD_VAR 0 1
7242: PUSH
7243: LD_INT 1
7245: ARRAY
7246: PPUSH
7247: CALL_OW 255
7251: PPUSH
7252: CALL 6303 0 1
7256: PUSH
7257: LD_INT 20
7259: GREATEREQUAL
7260: PUSH
7261: LD_VAR 0 2
7265: PPUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL 5924 0 2
7275: AND
7276: IFFALSE 7361
// begin for i = 1 to plist do
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: DOUBLE
7284: LD_INT 1
7286: DEC
7287: ST_TO_ADDR
7288: LD_VAR 0 1
7292: PUSH
7293: FOR_TO
7294: IFFALSE 7349
// if not HasTask ( plist [ i ] ) then
7296: LD_VAR 0 1
7300: PUSH
7301: LD_VAR 0 6
7305: ARRAY
7306: PPUSH
7307: CALL_OW 314
7311: NOT
7312: IFFALSE 7347
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: LD_VAR 0 3
7337: PPUSH
7338: LD_VAR 0 4
7342: PPUSH
7343: CALL_OW 145
7347: GO 7293
7349: POP
7350: POP
// result := true ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// end else
7359: GO 7369
// result := false ;
7361: LD_ADDR_VAR 0 5
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// end ;
7369: LD_VAR 0 5
7373: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7374: LD_INT 0
7376: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7377: LD_VAR 0 1
7381: PPUSH
7382: LD_INT 1
7384: PPUSH
7385: CALL_OW 268
7389: PUSH
7390: LD_INT 9
7392: EQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: CALL_OW 268
7406: PUSH
7407: LD_INT 9
7409: EQUAL
7410: AND
7411: IFFALSE 7508
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_VAR 0 2
7422: PPUSH
7423: CALL 5694 0 2
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: CALL 5694 0 2
7442: AND
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 461
7453: PUSH
7454: LD_INT 2
7456: EQUAL
7457: AND
7458: IFFALSE 7498
// begin ComUpgradeLab ( lab , bkind1 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_VAR 0 2
7469: PPUSH
7470: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: LD_VAR 0 3
7483: PPUSH
7484: CALL_OW 207
// result := true ;
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// end else
7496: GO 7506
// result := false ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 0
7505: ST_TO_ADDR
// end else
7506: GO 7516
// result := false ;
7508: LD_ADDR_VAR 0 4
7512: PUSH
7513: LD_INT 0
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 4
7520: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7521: LD_INT 0
7523: PPUSH
7524: PPUSH
7525: PPUSH
7526: PPUSH
7527: PPUSH
// p := 1 ;
7528: LD_ADDR_VAR 0 6
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 4
7553: DIVREAL
7554: PUSH
7555: FOR_TO
7556: IFFALSE 7805
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7558: LD_VAR 0 2
7562: PUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 1
7570: PLUS
7571: ARRAY
7572: PPUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 6
7582: PUSH
7583: LD_INT 2
7585: PLUS
7586: ARRAY
7587: PPUSH
7588: CALL_OW 428
7592: PUSH
7593: LD_INT 0
7595: EQUAL
7596: PUSH
7597: LD_VAR 0 2
7601: PUSH
7602: LD_VAR 0 6
7606: PUSH
7607: LD_INT 1
7609: PLUS
7610: ARRAY
7611: PPUSH
7612: LD_VAR 0 2
7616: PUSH
7617: LD_VAR 0 6
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: ARRAY
7626: PPUSH
7627: CALL 5924 0 2
7631: AND
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PPUSH
7642: CALL_OW 255
7646: PPUSH
7647: CALL 6303 0 1
7651: PUSH
7652: LD_INT 20
7654: GREATEREQUAL
7655: AND
7656: IFFALSE 7773
// begin for c = 1 to plist do
7658: LD_ADDR_VAR 0 7
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 1
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7767
// if not HasTask ( plist [ c ] ) then
7676: LD_VAR 0 1
7680: PUSH
7681: LD_VAR 0 7
7685: ARRAY
7686: PPUSH
7687: CALL_OW 314
7691: NOT
7692: IFFALSE 7765
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: LD_VAR 0 2
7709: PUSH
7710: LD_VAR 0 6
7714: ARRAY
7715: PPUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 1
7728: PLUS
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 2
7735: PUSH
7736: LD_VAR 0 6
7740: PUSH
7741: LD_INT 2
7743: PLUS
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 6
7755: PUSH
7756: LD_INT 3
7758: PLUS
7759: ARRAY
7760: PPUSH
7761: CALL_OW 145
7765: GO 7673
7767: POP
7768: POP
// break ;
7769: GO 7805
// end else
7771: GO 7803
// if ( p + 4 < tlist ) then
7773: LD_VAR 0 6
7777: PUSH
7778: LD_INT 4
7780: PLUS
7781: PUSH
7782: LD_VAR 0 2
7786: LESS
7787: IFFALSE 7803
// p := p + 4 ;
7789: LD_ADDR_VAR 0 6
7793: PUSH
7794: LD_VAR 0 6
7798: PUSH
7799: LD_INT 4
7801: PLUS
7802: ST_TO_ADDR
// end ;
7803: GO 7555
7805: POP
7806: POP
// end ;
7807: LD_VAR 0 3
7811: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
// tmp := GetTowers ( side ) ;
7818: LD_ADDR_VAR 0 5
7822: PUSH
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL 6913 0 1
7832: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7833: LD_ADDR_VAR 0 6
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 3
7845: PPUSH
7846: CALL 6209 0 2
7850: PUSH
7851: LD_INT 1
7853: ARRAY
7854: ST_TO_ADDR
// if fac then
7855: LD_VAR 0 6
7859: IFFALSE 7955
// for i = 1 to tmp do
7861: LD_ADDR_VAR 0 4
7865: PUSH
7866: DOUBLE
7867: LD_INT 1
7869: DEC
7870: ST_TO_ADDR
7871: LD_VAR 0 5
7875: PUSH
7876: FOR_TO
7877: IFFALSE 7953
// if GetBWeapon ( tmp [ i ] ) = 0 then
7879: LD_VAR 0 5
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PPUSH
7890: CALL_OW 269
7894: PUSH
7895: LD_INT 0
7897: EQUAL
7898: IFFALSE 7951
// begin if BuildingStatus ( fac ) = bs_idle then
7900: LD_VAR 0 6
7904: PPUSH
7905: CALL_OW 461
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: IFFALSE 7949
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7915: LD_VAR 0 5
7919: PUSH
7920: LD_VAR 0 4
7924: ARRAY
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: PPUSH
7934: LD_VAR 0 2
7938: PPUSH
7939: CALL_OW 12
7943: ARRAY
7944: PPUSH
7945: CALL_OW 148
// break ;
7949: GO 7953
// end ;
7951: GO 7876
7953: POP
7954: POP
// end ;
7955: LD_VAR 0 3
7959: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7960: LD_INT 0
7962: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7963: LD_INT 22
7965: PUSH
7966: LD_VAR 0 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 34
7977: PUSH
7978: LD_VAR 0 3
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 31
7989: PUSH
7990: LD_VAR 0 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: PPUSH
8007: CALL_OW 69
8011: IFFALSE 8069
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_INT 22
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 34
8032: PUSH
8033: LD_VAR 0 3
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 31
8044: PUSH
8045: LD_VAR 0 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: ST_TO_ADDR
8067: GO 8077
// result := false ;
8069: LD_ADDR_VAR 0 4
8073: PUSH
8074: LD_INT 0
8076: ST_TO_ADDR
// end ;
8077: LD_VAR 0 4
8081: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8082: LD_INT 0
8084: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: LD_VAR 0 5
8109: PPUSH
8110: CALL_OW 448
8114: PUSH
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_VAR 0 3
8124: PPUSH
8125: LD_VAR 0 4
8129: PPUSH
8130: LD_VAR 0 5
8134: PPUSH
8135: CALL_OW 449
8139: PUSH
8140: LD_INT 1
8142: ARRAY
8143: PUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL 5810 0 1
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: LESSEQUAL
8158: AND
8159: PUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: LD_VAR 0 3
8169: PPUSH
8170: LD_VAR 0 4
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 449
8184: PUSH
8185: LD_INT 2
8187: ARRAY
8188: PUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL 5810 0 1
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: LESSEQUAL
8203: AND
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_VAR 0 3
8214: PPUSH
8215: LD_VAR 0 4
8219: PPUSH
8220: LD_VAR 0 5
8224: PPUSH
8225: CALL_OW 449
8229: PUSH
8230: LD_INT 3
8232: ARRAY
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL 5810 0 1
8243: PUSH
8244: LD_INT 3
8246: ARRAY
8247: LESSEQUAL
8248: AND
8249: IFFALSE 8296
// begin if debug then
8251: LD_EXP 1
8255: IFFALSE 8265
// display_strings := Factory work! ;
8257: LD_ADDR_OWVAR 47
8261: PUSH
8262: LD_STRING Factory work!
8264: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_VAR 0 5
8289: PPUSH
8290: CALL_OW 125
// end else
8294: GO 8304
// result := false ;
8296: LD_ADDR_VAR 0 6
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// end ;
8304: LD_VAR 0 6
8308: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8309: LD_INT 0
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8315: LD_ADDR_VAR 0 6
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 30
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PPUSH
8348: CALL_OW 69
8352: ST_TO_ADDR
// tmp := [ ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for i = 1 to filter do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_VAR 0 6
8374: PUSH
8375: FOR_TO
8376: IFFALSE 8464
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_VAR 0 5
8387: PUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_VAR 0 4
8397: ARRAY
8398: PPUSH
8399: CALL_OW 266
8403: PUSH
8404: LD_VAR 0 6
8408: PUSH
8409: LD_VAR 0 4
8413: ARRAY
8414: PPUSH
8415: CALL_OW 250
8419: PUSH
8420: LD_VAR 0 6
8424: PUSH
8425: LD_VAR 0 4
8429: ARRAY
8430: PPUSH
8431: CALL_OW 251
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_VAR 0 4
8445: ARRAY
8446: PPUSH
8447: CALL_OW 254
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: ADD
8461: ST_TO_ADDR
// end ;
8462: GO 8375
8464: POP
8465: POP
// result := tmp ;
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: LD_VAR 0 5
8475: ST_TO_ADDR
// end ;
8476: LD_VAR 0 3
8480: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8481: LD_INT 0
8483: PPUSH
8484: PPUSH
8485: PPUSH
// for i = 1 to list do
8486: LD_ADDR_VAR 0 4
8490: PUSH
8491: DOUBLE
8492: LD_INT 1
8494: DEC
8495: ST_TO_ADDR
8496: LD_VAR 0 2
8500: PUSH
8501: FOR_TO
8502: IFFALSE 9057
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8504: LD_VAR 0 2
8508: PUSH
8509: LD_VAR 0 4
8513: ARRAY
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 2
8523: PUSH
8524: LD_VAR 0 4
8528: ARRAY
8529: PUSH
8530: LD_INT 2
8532: ARRAY
8533: PPUSH
8534: CALL_OW 428
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: IFFALSE 8828
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8544: LD_VAR 0 2
8548: PUSH
8549: LD_VAR 0 4
8553: ARRAY
8554: PUSH
8555: LD_INT 1
8557: ARRAY
8558: PPUSH
8559: LD_VAR 0 2
8563: PUSH
8564: LD_VAR 0 4
8568: ARRAY
8569: PUSH
8570: LD_INT 2
8572: ARRAY
8573: PPUSH
8574: CALL_OW 428
8578: PPUSH
8579: CALL_OW 248
8583: PUSH
8584: LD_INT 3
8586: EQUAL
8587: IFFALSE 8713
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_VAR 0 4
8598: ARRAY
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_VAR 0 4
8613: ARRAY
8614: PUSH
8615: LD_INT 2
8617: ARRAY
8618: PPUSH
8619: CALL_OW 428
8623: PPUSH
8624: CALL_OW 274
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: CALL_OW 275
8636: PUSH
8637: LD_INT 15
8639: GREATEREQUAL
8640: IFFALSE 8711
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8642: LD_VAR 0 2
8646: PUSH
8647: LD_VAR 0 4
8651: ARRAY
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 2
8661: PUSH
8662: LD_VAR 0 4
8666: ARRAY
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: CALL_OW 428
8676: PPUSH
8677: LD_VAR 0 2
8681: PUSH
8682: LD_VAR 0 4
8686: ARRAY
8687: PUSH
8688: LD_INT 4
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 2
8696: PUSH
8697: LD_VAR 0 4
8701: ARRAY
8702: PUSH
8703: LD_INT 5
8705: ARRAY
8706: PPUSH
8707: CALL 7374 0 3
// end else
8711: GO 8782
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8713: LD_VAR 0 2
8717: PUSH
8718: LD_VAR 0 4
8722: ARRAY
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: LD_VAR 0 2
8732: PUSH
8733: LD_VAR 0 4
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: PPUSH
8743: CALL_OW 428
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 4
8761: ARRAY
8762: PPUSH
8763: LD_VAR 0 2
8767: PUSH
8768: LD_VAR 0 4
8772: ARRAY
8773: PUSH
8774: LD_INT 5
8776: ARRAY
8777: PPUSH
8778: CALL 7374 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8782: LD_VAR 0 1
8786: PPUSH
8787: LD_VAR 0 2
8791: PUSH
8792: LD_VAR 0 4
8796: ARRAY
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_VAR 0 4
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: PPUSH
8817: CALL_OW 428
8821: PPUSH
8822: CALL 10326 0 2
// end else
8826: GO 9055
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8828: LD_VAR 0 1
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PPUSH
8837: CALL_OW 255
8841: PPUSH
8842: CALL 6118 0 1
8846: PPUSH
8847: LD_INT 6
8849: PPUSH
8850: CALL 5694 0 2
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: CALL_OW 255
8868: PPUSH
8869: CALL 6118 0 1
8873: PPUSH
8874: LD_VAR 0 2
8878: PUSH
8879: LD_VAR 0 4
8883: ARRAY
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PPUSH
8889: CALL 5694 0 2
8893: AND
8894: PUSH
8895: LD_VAR 0 1
8899: PUSH
8900: LD_INT 1
8902: ARRAY
8903: PPUSH
8904: CALL_OW 255
8908: PPUSH
8909: CALL 6118 0 1
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: ARRAY
8924: PUSH
8925: LD_INT 5
8927: ARRAY
8928: PPUSH
8929: CALL 5694 0 2
8933: AND
8934: IFFALSE 9055
// for p = 1 to plist do
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_VAR 0 1
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9053
// if IsInUnit ( plist [ p ] ) then
8954: LD_VAR 0 1
8958: PUSH
8959: LD_VAR 0 5
8963: ARRAY
8964: PPUSH
8965: CALL_OW 310
8969: IFFALSE 8988
// ComExitBuilding ( plist [ p ] ) else
8971: LD_VAR 0 1
8975: PUSH
8976: LD_VAR 0 5
8980: ARRAY
8981: PPUSH
8982: CALL_OW 122
8986: GO 9051
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
8988: LD_VAR 0 1
8992: PUSH
8993: LD_VAR 0 5
8997: ARRAY
8998: PPUSH
8999: LD_INT 6
9001: PPUSH
9002: LD_VAR 0 2
9006: PUSH
9007: LD_VAR 0 4
9011: ARRAY
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: LD_VAR 0 2
9021: PUSH
9022: LD_VAR 0 4
9026: ARRAY
9027: PUSH
9028: LD_INT 2
9030: ARRAY
9031: PPUSH
9032: LD_VAR 0 2
9036: PUSH
9037: LD_VAR 0 4
9041: ARRAY
9042: PUSH
9043: LD_INT 3
9045: ARRAY
9046: PPUSH
9047: CALL_OW 145
9051: GO 8951
9053: POP
9054: POP
// end ;
9055: GO 8501
9057: POP
9058: POP
// end ;
9059: LD_VAR 0 3
9063: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9064: LD_INT 0
9066: PPUSH
// if IsInUnit ( sci ) then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 310
9076: IFFALSE 9089
// ComExitBuilding ( sci ) else
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 122
9087: GO 9120
// if not HasTask ( sci ) then
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 314
9098: NOT
9099: IFFALSE 9120
// begin ComMoveXY ( sci , x , y ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: CALL_OW 111
// end ; end ;
9120: LD_VAR 0 4
9124: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
9130: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_INT 22
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 21
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: PUSH
9167: LD_VAR 0 3
9171: DIFF
9172: ST_TO_ADDR
// tmp := tag_list ;
9173: LD_ADDR_VAR 0 7
9177: PUSH
9178: LD_VAR 0 2
9182: ST_TO_ADDR
// for i = 1 to filter do
9183: LD_ADDR_VAR 0 5
9187: PUSH
9188: DOUBLE
9189: LD_INT 1
9191: DEC
9192: ST_TO_ADDR
9193: LD_VAR 0 6
9197: PUSH
9198: FOR_TO
9199: IFFALSE 9468
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9201: LD_VAR 0 6
9205: PUSH
9206: LD_VAR 0 5
9210: ARRAY
9211: PPUSH
9212: CALL_OW 256
9216: PUSH
9217: LD_INT 1000
9219: EQUAL
9220: PUSH
9221: LD_VAR 0 6
9225: PUSH
9226: LD_VAR 0 5
9230: ARRAY
9231: PPUSH
9232: CALL_OW 110
9236: PUSH
9237: LD_INT 100
9239: GREATEREQUAL
9240: AND
9241: IFFALSE 9283
// begin SetTag ( filter [ i ] , 0 ) ;
9243: LD_VAR 0 6
9247: PUSH
9248: LD_VAR 0 5
9252: ARRAY
9253: PPUSH
9254: LD_INT 0
9256: PPUSH
9257: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9261: LD_ADDR_VAR 0 7
9265: PUSH
9266: LD_VAR 0 7
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_VAR 0 5
9280: ARRAY
9281: DIFF
9282: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9283: LD_VAR 0 6
9287: PUSH
9288: LD_VAR 0 5
9292: ARRAY
9293: PPUSH
9294: CALL_OW 256
9298: PUSH
9299: LD_INT 1000
9301: LESS
9302: IFFALSE 9466
// begin if not filter [ i ] in tmp then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_VAR 0 5
9313: ARRAY
9314: PUSH
9315: LD_VAR 0 7
9319: IN
9320: NOT
9321: IFFALSE 9345
// tmp := tmp ^ filter [ i ] ;
9323: LD_ADDR_VAR 0 7
9327: PUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_VAR 0 6
9337: PUSH
9338: LD_VAR 0 5
9342: ARRAY
9343: ADD
9344: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9345: LD_VAR 0 6
9349: PUSH
9350: LD_VAR 0 5
9354: ARRAY
9355: PPUSH
9356: CALL_OW 256
9360: PUSH
9361: LD_INT 250
9363: LESS
9364: IFFALSE 9386
// SetTag ( filter [ i ] , 100 ) else
9366: LD_VAR 0 6
9370: PUSH
9371: LD_VAR 0 5
9375: ARRAY
9376: PPUSH
9377: LD_INT 100
9379: PPUSH
9380: CALL_OW 109
9384: GO 9466
// if GetLives ( filter [ i ] ) < 500 then
9386: LD_VAR 0 6
9390: PUSH
9391: LD_VAR 0 5
9395: ARRAY
9396: PPUSH
9397: CALL_OW 256
9401: PUSH
9402: LD_INT 500
9404: LESS
9405: IFFALSE 9427
// SetTag ( filter [ i ] , 101 ) else
9407: LD_VAR 0 6
9411: PUSH
9412: LD_VAR 0 5
9416: ARRAY
9417: PPUSH
9418: LD_INT 101
9420: PPUSH
9421: CALL_OW 109
9425: GO 9466
// if GetLives ( filter [ i ] ) < 1000 then
9427: LD_VAR 0 6
9431: PUSH
9432: LD_VAR 0 5
9436: ARRAY
9437: PPUSH
9438: CALL_OW 256
9442: PUSH
9443: LD_INT 1000
9445: LESS
9446: IFFALSE 9466
// SetTag ( filter [ i ] , 102 ) ;
9448: LD_VAR 0 6
9452: PUSH
9453: LD_VAR 0 5
9457: ARRAY
9458: PPUSH
9459: LD_INT 102
9461: PPUSH
9462: CALL_OW 109
// end ; end ;
9466: GO 9198
9468: POP
9469: POP
// result := tmp ;
9470: LD_ADDR_VAR 0 4
9474: PUSH
9475: LD_VAR 0 7
9479: ST_TO_ADDR
// end ;
9480: LD_VAR 0 4
9484: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9492: LD_ADDR_VAR 0 7
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 3
9545: PPUSH
9546: CALL_OW 12
9550: ST_TO_ADDR
// if filter > 0 then
9551: LD_VAR 0 7
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 9761
// for i = 1 to list do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_VAR 0 1
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9759
// for ta in filter do
9579: LD_ADDR_VAR 0 4
9583: PUSH
9584: LD_VAR 0 7
9588: PUSH
9589: FOR_IN
9590: IFFALSE 9755
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9592: LD_VAR 0 1
9596: PUSH
9597: LD_VAR 0 6
9601: ARRAY
9602: PPUSH
9603: LD_VAR 0 4
9607: PPUSH
9608: CALL_OW 296
9612: PUSH
9613: LD_INT 13
9615: LESSEQUAL
9616: IFFALSE 9753
// begin case c of 1 :
9618: LD_VAR 0 5
9622: PUSH
9623: LD_INT 1
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9669
9631: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9632: LD_VAR 0 1
9636: PUSH
9637: LD_VAR 0 6
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 4
9647: PPUSH
9648: CALL_OW 250
9652: PPUSH
9653: LD_VAR 0 4
9657: PPUSH
9658: CALL_OW 251
9662: PPUSH
9663: CALL_OW 154
9667: GO 9753
9669: LD_INT 2
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9741
9677: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9678: LD_VAR 0 1
9682: PUSH
9683: LD_VAR 0 6
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 4
9693: PPUSH
9694: CALL_OW 250
9698: PUSH
9699: LD_INT 1
9701: NEG
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 12
9710: PLUS
9711: PPUSH
9712: LD_VAR 0 4
9716: PPUSH
9717: CALL_OW 251
9721: PUSH
9722: LD_INT 1
9724: NEG
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 12
9733: PLUS
9734: PPUSH
9735: CALL_OW 153
9739: GO 9753
9741: LD_INT 3
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9752
9749: POP
// ; end ;
9750: GO 9753
9752: POP
// end ; end ;
9753: GO 9589
9755: POP
9756: POP
9757: GO 9576
9759: POP
9760: POP
// end ;
9761: LD_VAR 0 3
9765: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9766: LD_INT 0
9768: PPUSH
9769: PPUSH
// for i = 1 to plist do
9770: LD_ADDR_VAR 0 3
9774: PUSH
9775: DOUBLE
9776: LD_INT 1
9778: DEC
9779: ST_TO_ADDR
9780: LD_VAR 0 1
9784: PUSH
9785: FOR_TO
9786: IFFALSE 9988
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9788: LD_VAR 0 1
9792: PUSH
9793: LD_VAR 0 3
9797: ARRAY
9798: PPUSH
9799: CALL_OW 310
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: PPUSH
9817: CALL_OW 69
9821: IN
9822: NOT
9823: IFFALSE 9968
// begin if IsInUnit ( plist [ i ] ) then
9825: LD_VAR 0 1
9829: PUSH
9830: LD_VAR 0 3
9834: ARRAY
9835: PPUSH
9836: CALL_OW 310
9840: IFFALSE 9859
// ComExitBuilding ( plist [ i ] ) else
9842: LD_VAR 0 1
9846: PUSH
9847: LD_VAR 0 3
9851: ARRAY
9852: PPUSH
9853: CALL_OW 122
9857: GO 9966
// if not HasTask ( plist [ i ] ) then
9859: LD_VAR 0 1
9863: PUSH
9864: LD_VAR 0 3
9868: ARRAY
9869: PPUSH
9870: CALL_OW 314
9874: NOT
9875: IFFALSE 9966
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: CALL_OW 255
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 30
9911: PUSH
9912: LD_INT 5
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: PPUSH
9928: LD_VAR 0 1
9932: PUSH
9933: LD_VAR 0 3
9937: ARRAY
9938: PPUSH
9939: CALL_OW 74
9943: PPUSH
9944: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9948: LD_VAR 0 1
9952: PUSH
9953: LD_VAR 0 3
9957: ARRAY
9958: PPUSH
9959: LD_INT 9
9961: PPUSH
9962: CALL_OW 183
// end ; end else
9966: GO 9986
// ComChangeProfession ( plist [ i ] , 9 ) ;
9968: LD_VAR 0 1
9972: PUSH
9973: LD_VAR 0 3
9977: ARRAY
9978: PPUSH
9979: LD_INT 9
9981: PPUSH
9982: CALL_OW 123
9986: GO 9785
9988: POP
9989: POP
// end ;
9990: LD_VAR 0 2
9994: RET
// export function GetHuman ( side ) ; begin
9995: LD_INT 0
9997: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_VAR 0 1
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 21
10017: PUSH
10018: LD_INT 1
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 25
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 25
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: ST_TO_ADDR
// end ;
10085: LD_VAR 0 2
10089: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
// uc_side := 0 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_nation := 0 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: DOUBLE
10117: LD_INT 1
10119: DEC
10120: ST_TO_ADDR
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: LD_INT 6
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: LD_OWVAR 67
10139: ARRAY
10140: PUSH
10141: FOR_TO
10142: IFFALSE 10213
// begin hc_class = class_tiger ;
10144: LD_ADDR_OWVAR 28
10148: PUSH
10149: LD_INT 14
10151: ST_TO_ADDR
// hc_gallery = sandnature ;
10152: LD_ADDR_OWVAR 33
10156: PUSH
10157: LD_STRING sandnature
10159: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10160: LD_ADDR_OWVAR 35
10164: PUSH
10165: LD_INT 0
10167: PPUSH
10168: LD_INT 50
10170: PPUSH
10171: CALL_OW 12
10175: ST_TO_ADDR
// hc_face_number = 3 ;
10176: LD_ADDR_OWVAR 34
10180: PUSH
10181: LD_INT 3
10183: ST_TO_ADDR
// tiger := CreateHuman ;
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: CALL_OW 44
10193: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: LD_INT 0
10206: PPUSH
10207: CALL_OW 49
// end ;
10211: GO 10141
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10220: LD_INT 0
10222: PPUSH
10223: PPUSH
10224: PPUSH
// uc_side := 0 ;
10225: LD_ADDR_OWVAR 20
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// uc_nation := 0 ;
10233: LD_ADDR_OWVAR 21
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// for i = 1 to 8 do
10241: LD_ADDR_VAR 0 4
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_INT 8
10253: PUSH
10254: FOR_TO
10255: IFFALSE 10319
// begin hc_class = class_apeman ;
10257: LD_ADDR_OWVAR 28
10261: PUSH
10262: LD_INT 12
10264: ST_TO_ADDR
// hc_gallery =  ;
10265: LD_ADDR_OWVAR 33
10269: PUSH
10270: LD_STRING 
10272: ST_TO_ADDR
// hc_agressivity = Rand ( - 2 , 2 ) ;
10273: LD_ADDR_OWVAR 35
10277: PUSH
10278: LD_INT 2
10280: NEG
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: CALL_OW 12
10289: ST_TO_ADDR
// ape := CreateHuman ;
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: CALL_OW 44
10299: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// end ;
10317: GO 10254
10319: POP
10320: POP
// end ;
10321: LD_VAR 0 2
10325: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// if BuildingStatus ( b ) = bs_build then
10330: LD_VAR 0 2
10334: PPUSH
10335: CALL_OW 461
10339: PUSH
10340: LD_INT 1
10342: EQUAL
10343: IFFALSE 10529
// for i = 1 to plist do
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: DOUBLE
10351: LD_INT 1
10353: DEC
10354: ST_TO_ADDR
10355: LD_VAR 0 1
10359: PUSH
10360: FOR_TO
10361: IFFALSE 10527
// if IsInUnit ( plist [ i ] ) then
10363: LD_VAR 0 1
10367: PUSH
10368: LD_VAR 0 4
10372: ARRAY
10373: PPUSH
10374: CALL_OW 310
10378: IFFALSE 10461
// begin ComExitBuilding ( plist [ i ] ) ;
10380: LD_VAR 0 1
10384: PUSH
10385: LD_VAR 0 4
10389: ARRAY
10390: PPUSH
10391: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10395: LD_VAR 0 1
10399: PUSH
10400: LD_VAR 0 4
10404: ARRAY
10405: PPUSH
10406: LD_STRING h
10408: PUSH
10409: LD_VAR 0 2
10413: PPUSH
10414: CALL_OW 250
10418: PUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 251
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: PPUSH
10455: CALL_OW 447
// end else
10459: GO 10525
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10461: LD_VAR 0 1
10465: PUSH
10466: LD_VAR 0 4
10470: ARRAY
10471: PPUSH
10472: LD_STRING h
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 251
10494: PUSH
10495: LD_VAR 0 2
10499: PUSH
10500: LD_INT 0
10502: PUSH
10503: LD_INT 0
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: PPUSH
10521: CALL_OW 446
10525: GO 10360
10527: POP
10528: POP
// end ;
10529: LD_VAR 0 3
10533: RET
// export function WantRepair ( eng ) ; begin
10534: LD_INT 0
10536: PPUSH
// if GetTaskList ( eng ) > 0 then
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 437
10546: PUSH
10547: LD_INT 0
10549: GREATER
10550: IFFALSE 10595
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 437
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PUSH
10566: LD_INT 1
10568: ARRAY
10569: PUSH
10570: LD_STRING o
10572: EQUAL
10573: IFFALSE 10585
// result := true else
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
10583: GO 10593
// result := false ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 0
10592: ST_TO_ADDR
// end else
10593: GO 10603
// result := false ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// end ;
10603: LD_VAR 0 2
10607: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// if btype = - 1 then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: NEG
10622: EQUAL
10623: IFFALSE 10663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10625: LD_ADDR_VAR 0 5
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: ST_TO_ADDR
10661: GO 10701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10663: LD_ADDR_VAR 0 5
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_VAR 0 2
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// list := [ ] ;
10701: LD_ADDR_VAR 0 6
10705: PUSH
10706: EMPTY
10707: ST_TO_ADDR
// for i = 1 to tmp do
10708: LD_ADDR_VAR 0 4
10712: PUSH
10713: DOUBLE
10714: LD_INT 1
10716: DEC
10717: ST_TO_ADDR
10718: LD_VAR 0 5
10722: PUSH
10723: FOR_TO
10724: IFFALSE 10812
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10726: LD_ADDR_VAR 0 6
10730: PUSH
10731: LD_VAR 0 6
10735: PUSH
10736: LD_VAR 0 5
10740: PUSH
10741: LD_VAR 0 4
10745: ARRAY
10746: PPUSH
10747: CALL_OW 266
10751: PUSH
10752: LD_VAR 0 5
10756: PUSH
10757: LD_VAR 0 4
10761: ARRAY
10762: PPUSH
10763: CALL_OW 250
10767: PUSH
10768: LD_VAR 0 5
10772: PUSH
10773: LD_VAR 0 4
10777: ARRAY
10778: PPUSH
10779: CALL_OW 251
10783: PUSH
10784: LD_VAR 0 5
10788: PUSH
10789: LD_VAR 0 4
10793: ARRAY
10794: PPUSH
10795: CALL_OW 254
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: ADD
10809: ST_TO_ADDR
10810: GO 10723
10812: POP
10813: POP
// result = list ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_VAR 0 6
10823: ST_TO_ADDR
// end ;
10824: LD_VAR 0 3
10828: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 81
10842: PUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 255
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PPUSH
10862: LD_VAR 0 1
10866: PPUSH
10867: CALL_OW 74
10871: PPUSH
10872: CALL_OW 296
10876: PUSH
10877: LD_INT 18
10879: LESS
10880: IFFALSE 10925
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 81
10889: PUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 255
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 69
10908: PPUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: CALL_OW 74
10918: PPUSH
10919: CALL_OW 115
10923: GO 10944
// ComMoveXY ( behemoth , x , y ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_VAR 0 4
10934: PPUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: CALL_OW 111
// if time_lapsers_list > 0 then
10944: LD_VAR 0 2
10948: PUSH
10949: LD_INT 0
10951: GREATER
10952: IFFALSE 11142
// begin for i = 1 to time_lapsers_list do
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: DOUBLE
10960: LD_INT 1
10962: DEC
10963: ST_TO_ADDR
10964: LD_VAR 0 2
10968: PUSH
10969: FOR_TO
10970: IFFALSE 11140
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10972: LD_VAR 0 2
10976: PUSH
10977: LD_VAR 0 7
10981: ARRAY
10982: PPUSH
10983: CALL_OW 256
10987: PUSH
10988: LD_INT 250
10990: GREATEREQUAL
10991: PUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 7
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 296
11012: PUSH
11013: LD_INT 9
11015: GREATER
11016: AND
11017: IFFALSE 11054
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 7
11028: ARRAY
11029: PPUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 250
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 251
11049: PPUSH
11050: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11054: LD_VAR 0 2
11058: PUSH
11059: LD_VAR 0 7
11063: ARRAY
11064: PPUSH
11065: CALL_OW 256
11069: PUSH
11070: LD_INT 500
11072: LESS
11073: PUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 256
11083: PUSH
11084: LD_INT 700
11086: GREATER
11087: AND
11088: IFFALSE 11138
// for p = 1 to mechanic_list do
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: DOUBLE
11096: LD_INT 1
11098: DEC
11099: ST_TO_ADDR
11100: LD_VAR 0 3
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11136
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11108: LD_VAR 0 3
11112: PUSH
11113: LD_VAR 0 8
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 2
11123: PUSH
11124: LD_VAR 0 7
11128: ARRAY
11129: PPUSH
11130: CALL_OW 129
11134: GO 11105
11136: POP
11137: POP
// end ;
11138: GO 10969
11140: POP
11141: POP
// end ; if mechanic_list then
11142: LD_VAR 0 3
11146: IFFALSE 11327
// begin for i = 1 to mechanic_list do
11148: LD_ADDR_VAR 0 7
11152: PUSH
11153: DOUBLE
11154: LD_INT 1
11156: DEC
11157: ST_TO_ADDR
11158: LD_VAR 0 3
11162: PUSH
11163: FOR_TO
11164: IFFALSE 11325
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 7
11175: ARRAY
11176: PPUSH
11177: CALL_OW 256
11181: PUSH
11182: LD_INT 333
11184: LESS
11185: IFFALSE 11209
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11187: LD_ADDR_EXP 15
11191: PUSH
11192: LD_EXP 15
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 7
11206: ARRAY
11207: DIFF
11208: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_VAR 0 7
11218: ARRAY
11219: PPUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 296
11229: PUSH
11230: LD_INT 9
11232: GREATER
11233: PUSH
11234: LD_VAR 0 3
11238: PUSH
11239: LD_VAR 0 7
11243: ARRAY
11244: PPUSH
11245: CALL_OW 314
11249: NOT
11250: AND
11251: IFFALSE 11288
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11253: LD_VAR 0 3
11257: PUSH
11258: LD_VAR 0 7
11262: ARRAY
11263: PPUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 250
11273: PPUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 251
11283: PPUSH
11284: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 256
11297: PUSH
11298: LD_INT 700
11300: LESS
11301: IFFALSE 11323
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11303: LD_VAR 0 3
11307: PUSH
11308: LD_VAR 0 7
11312: ARRAY
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 129
// end ;
11323: GO 11163
11325: POP
11326: POP
// end ; end ;
11327: LD_VAR 0 6
11331: RET
// export function GetBehemoth ( side ) ; begin
11332: LD_INT 0
11334: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_VAR 0 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 31
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// end ;
11371: LD_VAR 0 2
11375: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11376: LD_INT 0
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11384: LD_ADDR_VAR 0 6
11388: PUSH
11389: LD_VAR 0 2
11393: PPUSH
11394: CALL_OW 435
11398: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11399: LD_ADDR_VAR 0 5
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_VAR 0 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: ST_TO_ADDR
// if skr then
11453: LD_VAR 0 6
11457: IFFALSE 11622
// begin if engs then
11459: LD_VAR 0 5
11463: IFFALSE 11622
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11465: LD_ADDR_VAR 0 8
11469: PUSH
11470: LD_VAR 0 6
11474: PUSH
11475: LD_INT 1
11477: ARRAY
11478: PPUSH
11479: LD_VAR 0 6
11483: PUSH
11484: LD_INT 2
11486: ARRAY
11487: PPUSH
11488: CALL_OW 284
11492: ST_TO_ADDR
// if am > engs then
11493: LD_VAR 0 8
11497: PUSH
11498: LD_VAR 0 5
11502: GREATER
11503: IFFALSE 11515
// am := engs ;
11505: LD_ADDR_VAR 0 8
11509: PUSH
11510: LD_VAR 0 5
11514: ST_TO_ADDR
// for i = 1 to am do
11515: LD_ADDR_VAR 0 7
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_VAR 0 8
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11620
// begin if IsInUnit ( engs [ i ] ) then
11533: LD_VAR 0 5
11537: PUSH
11538: LD_VAR 0 7
11542: ARRAY
11543: PPUSH
11544: CALL_OW 310
11548: IFFALSE 11567
// ComExitBuilding ( engs [ i ] ) else
11550: LD_VAR 0 5
11554: PUSH
11555: LD_VAR 0 7
11559: ARRAY
11560: PPUSH
11561: CALL_OW 122
11565: GO 11618
// if not HasTask ( engs [ i ] ) then
11567: LD_VAR 0 5
11571: PUSH
11572: LD_VAR 0 7
11576: ARRAY
11577: PPUSH
11578: CALL_OW 314
11582: NOT
11583: IFFALSE 11618
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: LD_VAR 0 6
11600: PUSH
11601: LD_INT 1
11603: ARRAY
11604: PPUSH
11605: LD_VAR 0 6
11609: PUSH
11610: LD_INT 2
11612: ARRAY
11613: PPUSH
11614: CALL_OW 117
// end ;
11618: GO 11530
11620: POP
11621: POP
// end ; end ; end ; end_of_file
11622: LD_VAR 0 3
11626: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// uc_side := 1 ;
11631: LD_ADDR_OWVAR 20
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// uc_nation := 1 ;
11639: LD_ADDR_OWVAR 21
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 6
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: LD_INT 4
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: LD_OWVAR 67
11670: ARRAY
11671: ST_TO_ADDR
// game_status := false ;
11672: LD_ADDR_EXP 29
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// helps_arrive := false ;
11680: LD_ADDR_EXP 30
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// helps_can_arrive := false ;
11688: LD_ADDR_EXP 31
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// beta_come := false ;
11696: LD_ADDR_EXP 32
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// gamma_come := false ;
11704: LD_ADDR_EXP 33
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// zeta_come := false ;
11712: LD_ADDR_EXP 34
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// mine_ck := false ;
11720: LD_ADDR_EXP 35
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sib_bomb_constructed := false ;
11728: LD_ADDR_EXP 36
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// mine_constructed := false ;
11736: LD_ADDR_EXP 37
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11744: LD_INT 35
11746: PPUSH
11747: CALL_OW 274
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: LD_INT 200
11757: PUSH
11758: LD_INT 100
11760: PUSH
11761: LD_INT 70
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: PUSH
11769: LD_OWVAR 67
11773: ARRAY
11774: PPUSH
11775: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11779: LD_INT 35
11781: PPUSH
11782: LD_INT 4
11784: PPUSH
11785: CALL_OW 235
// hc_importance := 100 ;
11789: LD_ADDR_OWVAR 32
11793: PUSH
11794: LD_INT 100
11796: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 2
11802: PPUSH
11803: LD_VAR 0 2
11807: PUSH
11808: LD_INT 1
11810: PLUS
11811: PPUSH
11812: CALL_OW 380
// hc_gallery := hardch ;
11816: LD_ADDR_OWVAR 33
11820: PUSH
11821: LD_STRING hardch
11823: ST_TO_ADDR
// hc_face_number := 1 ;
11824: LD_ADDR_OWVAR 34
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// guyA := CreateHuman ;
11832: LD_ADDR_EXP 38
11836: PUSH
11837: CALL_OW 44
11841: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11842: LD_INT 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL_OW 380
// hc_face_number := 2 ;
11857: LD_ADDR_OWVAR 34
11861: PUSH
11862: LD_INT 2
11864: ST_TO_ADDR
// guyB := CreateHuman ;
11865: LD_ADDR_EXP 39
11869: PUSH
11870: CALL_OW 44
11874: ST_TO_ADDR
// hc_importance := 0 ;
11875: LD_ADDR_OWVAR 32
11879: PUSH
11880: LD_INT 0
11882: ST_TO_ADDR
// hc_gallery :=  ;
11883: LD_ADDR_OWVAR 33
11887: PUSH
11888: LD_STRING 
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
// uc_side := 4 ;
11907: LD_ADDR_OWVAR 20
11911: PUSH
11912: LD_INT 4
11914: ST_TO_ADDR
// uc_nation := 1 ;
11915: LD_ADDR_OWVAR 21
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11923: LD_ADDR_VAR 0 10
11927: PUSH
11928: LD_INT 6
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_OWVAR 67
11946: ARRAY
11947: ST_TO_ADDR
// Beta_Squad := [ ] ;
11948: LD_ADDR_EXP 40
11952: PUSH
11953: EMPTY
11954: ST_TO_ADDR
// case num of 1 :
11955: LD_VAR 0 1
11959: PUSH
11960: LD_INT 1
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12011
11968: POP
// begin sold := 2 ;
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_INT 2
11976: ST_TO_ADDR
// sci := 1 ;
11977: LD_ADDR_VAR 0 6
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// mech := 2 ;
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_INT 2
11992: ST_TO_ADDR
// tank := 1 ;
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// cargo := 1 ;
12001: LD_ADDR_VAR 0 9
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// end ; 2 :
12009: GO 12114
12011: LD_INT 2
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12062
12019: POP
// begin sold := 2 ;
12020: LD_ADDR_VAR 0 5
12024: PUSH
12025: LD_INT 2
12027: ST_TO_ADDR
// sci := 1 ;
12028: LD_ADDR_VAR 0 6
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// mech := 1 ;
12036: LD_ADDR_VAR 0 7
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// tank := 1 ;
12044: LD_ADDR_VAR 0 8
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// cargo := 0 ;
12052: LD_ADDR_VAR 0 9
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// end ; 3 :
12060: GO 12114
12062: LD_INT 3
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12113
12070: POP
// begin sold := 1 ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// sci := 1 ;
12079: LD_ADDR_VAR 0 6
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// mech := 1 ;
12087: LD_ADDR_VAR 0 7
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// tank := 1 ;
12095: LD_ADDR_VAR 0 8
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// cargo := 0 ;
12103: LD_ADDR_VAR 0 9
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// end ; end ;
12111: GO 12114
12113: POP
// for i = 1 to sold do
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_VAR 0 5
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12202
// begin if i = 1 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: EQUAL
12140: IFFALSE 12159
// PrepareHuman ( sex_male , 1 , skill ) else
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: LD_VAR 0 10
12152: PPUSH
12153: CALL_OW 380
12157: GO 12174
// PrepareHuman ( false , 1 , skill ) ;
12159: LD_INT 0
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: LD_VAR 0 10
12169: PPUSH
12170: CALL_OW 380
// un := CreateHuman ;
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: CALL_OW 44
12183: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12184: LD_ADDR_EXP 40
12188: PUSH
12189: LD_EXP 40
12193: PUSH
12194: LD_VAR 0 4
12198: ADD
12199: ST_TO_ADDR
// end ;
12200: GO 12129
12202: POP
12203: POP
// for i = 1 to mech do
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: DOUBLE
12210: LD_INT 1
12212: DEC
12213: ST_TO_ADDR
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12277
// begin PrepareHuman ( false , 3 , skill ) ;
12222: LD_INT 0
12224: PPUSH
12225: LD_INT 3
12227: PPUSH
12228: LD_VAR 0 10
12232: PPUSH
12233: CALL_OW 380
// un := CreateHuman ;
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: CALL_OW 44
12246: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12247: LD_VAR 0 4
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12259: LD_ADDR_EXP 40
12263: PUSH
12264: LD_EXP 40
12268: PUSH
12269: LD_VAR 0 4
12273: ADD
12274: ST_TO_ADDR
// end ;
12275: GO 12219
12277: POP
12278: POP
// for i = 1 to sci do
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: DOUBLE
12285: LD_INT 1
12287: DEC
12288: ST_TO_ADDR
12289: LD_VAR 0 6
12293: PUSH
12294: FOR_TO
12295: IFFALSE 12340
// begin PrepareHuman ( false , 4 , skill ) ;
12297: LD_INT 0
12299: PPUSH
12300: LD_INT 4
12302: PPUSH
12303: LD_VAR 0 10
12307: PPUSH
12308: CALL_OW 380
// un := CreateHuman ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: CALL_OW 44
12321: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12322: LD_ADDR_EXP 40
12326: PUSH
12327: LD_EXP 40
12331: PUSH
12332: LD_VAR 0 4
12336: ADD
12337: ST_TO_ADDR
// end ;
12338: GO 12294
12340: POP
12341: POP
// for i = 1 to tank do
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_VAR 0 8
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12471
// begin Randomize ;
12360: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12364: LD_ADDR_OWVAR 37
12368: PUSH
12369: LD_INT 3
12371: ST_TO_ADDR
// vc_engine := engine_solar ;
12372: LD_ADDR_OWVAR 39
12376: PUSH
12377: LD_INT 2
12379: ST_TO_ADDR
// vc_control := control_manual ;
12380: LD_ADDR_OWVAR 38
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12388: LD_ADDR_OWVAR 40
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: LD_INT 5
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 1
12405: PPUSH
12406: LD_INT 2
12408: PPUSH
12409: CALL_OW 12
12413: ARRAY
12414: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12415: LD_ADDR_OWVAR 41
12419: PUSH
12420: LD_INT 35
12422: PPUSH
12423: LD_INT 55
12425: PPUSH
12426: CALL_OW 12
12430: ST_TO_ADDR
// un := CreateVehicle ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: CALL_OW 45
12440: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12441: LD_VAR 0 4
12445: PPUSH
12446: LD_INT 5
12448: PPUSH
12449: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12453: LD_ADDR_EXP 40
12457: PUSH
12458: LD_EXP 40
12462: PUSH
12463: LD_VAR 0 4
12467: ADD
12468: ST_TO_ADDR
// end ;
12469: GO 12357
12471: POP
12472: POP
// if cargo then
12473: LD_VAR 0 9
12477: IFFALSE 12580
// begin vc_chassis := us_medium_tracked ;
12479: LD_ADDR_OWVAR 37
12483: PUSH
12484: LD_INT 3
12486: ST_TO_ADDR
// vc_engine := engine_solar ;
12487: LD_ADDR_OWVAR 39
12491: PUSH
12492: LD_INT 2
12494: ST_TO_ADDR
// vc_control := control_manual ;
12495: LD_ADDR_OWVAR 38
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12503: LD_ADDR_OWVAR 40
12507: PUSH
12508: LD_INT 12
12510: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12511: LD_ADDR_OWVAR 41
12515: PUSH
12516: LD_INT 35
12518: PPUSH
12519: LD_INT 55
12521: PPUSH
12522: CALL_OW 12
12526: ST_TO_ADDR
// un := CreateVehicle ;
12527: LD_ADDR_VAR 0 4
12531: PUSH
12532: CALL_OW 45
12536: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12537: LD_VAR 0 4
12541: PPUSH
12542: LD_INT 5
12544: PPUSH
12545: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12549: LD_ADDR_EXP 40
12553: PUSH
12554: LD_EXP 40
12558: PUSH
12559: LD_VAR 0 4
12563: ADD
12564: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12565: LD_VAR 0 4
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: LD_INT 60
12575: PPUSH
12576: CALL_OW 290
// end ; end ;
12580: LD_VAR 0 2
12584: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12585: LD_INT 0
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
// uc_side := 4 ;
12597: LD_ADDR_OWVAR 20
12601: PUSH
12602: LD_INT 4
12604: ST_TO_ADDR
// uc_nation := 1 ;
12605: LD_ADDR_OWVAR 21
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12613: LD_ADDR_VAR 0 11
12617: PUSH
12618: LD_INT 6
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: LD_INT 4
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_OWVAR 67
12636: ARRAY
12637: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12638: LD_ADDR_EXP 41
12642: PUSH
12643: EMPTY
12644: ST_TO_ADDR
// case num of 1 :
12645: LD_VAR 0 1
12649: PUSH
12650: LD_INT 1
12652: DOUBLE
12653: EQUAL
12654: IFTRUE 12658
12656: GO 12709
12658: POP
// begin sold := 2 ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_INT 2
12666: ST_TO_ADDR
// eng := 2 ;
12667: LD_ADDR_VAR 0 6
12671: PUSH
12672: LD_INT 2
12674: ST_TO_ADDR
// sci := 0 ;
12675: LD_ADDR_VAR 0 7
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// mech := 1 ;
12683: LD_ADDR_VAR 0 8
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// tank := 0 ;
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// cargo := 1 ;
12699: LD_ADDR_VAR 0 10
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// end ; 2 :
12707: GO 12828
12709: LD_INT 2
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12768
12717: POP
// begin sold := 1 ;
12718: LD_ADDR_VAR 0 5
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// eng := 2 ;
12726: LD_ADDR_VAR 0 6
12730: PUSH
12731: LD_INT 2
12733: ST_TO_ADDR
// sci := 0 ;
12734: LD_ADDR_VAR 0 7
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// mech := 1 ;
12742: LD_ADDR_VAR 0 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// tank := 0 ;
12750: LD_ADDR_VAR 0 9
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// cargo := 1 ;
12758: LD_ADDR_VAR 0 10
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// end ; 3 :
12766: GO 12828
12768: LD_INT 3
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12827
12776: POP
// begin sold := 1 ;
12777: LD_ADDR_VAR 0 5
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// eng := 1 ;
12785: LD_ADDR_VAR 0 6
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// sci := 0 ;
12793: LD_ADDR_VAR 0 7
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// mech := 1 ;
12801: LD_ADDR_VAR 0 8
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// tank := 0 ;
12809: LD_ADDR_VAR 0 9
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// cargo := 1 ;
12817: LD_ADDR_VAR 0 10
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// end ; end ;
12825: GO 12828
12827: POP
// for i = 1 to sold do
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_VAR 0 5
12842: PUSH
12843: FOR_TO
12844: IFFALSE 12916
// begin if i = 1 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 1
12853: EQUAL
12854: IFFALSE 12873
// PrepareHuman ( sex_male , 1 , skill ) else
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: LD_VAR 0 11
12866: PPUSH
12867: CALL_OW 380
12871: GO 12888
// PrepareHuman ( false , 1 , skill ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: LD_VAR 0 11
12883: PPUSH
12884: CALL_OW 380
// un := CreateHuman ;
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: CALL_OW 44
12897: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12898: LD_ADDR_EXP 41
12902: PUSH
12903: LD_EXP 41
12907: PUSH
12908: LD_VAR 0 4
12912: ADD
12913: ST_TO_ADDR
// end ;
12914: GO 12843
12916: POP
12917: POP
// for i = 1 to mech do
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: DOUBLE
12924: LD_INT 1
12926: DEC
12927: ST_TO_ADDR
12928: LD_VAR 0 8
12932: PUSH
12933: FOR_TO
12934: IFFALSE 12991
// begin PrepareHuman ( false , 3 , skill ) ;
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_VAR 0 11
12946: PPUSH
12947: CALL_OW 380
// un := CreateHuman ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: CALL_OW 44
12960: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12961: LD_VAR 0 4
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12973: LD_ADDR_EXP 41
12977: PUSH
12978: LD_EXP 41
12982: PUSH
12983: LD_VAR 0 4
12987: ADD
12988: ST_TO_ADDR
// end ;
12989: GO 12933
12991: POP
12992: POP
// for i = 1 to eng do
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: DOUBLE
12999: LD_INT 1
13001: DEC
13002: ST_TO_ADDR
13003: LD_VAR 0 6
13007: PUSH
13008: FOR_TO
13009: IFFALSE 13054
// begin PrepareHuman ( false , 2 , skill ) ;
13011: LD_INT 0
13013: PPUSH
13014: LD_INT 2
13016: PPUSH
13017: LD_VAR 0 11
13021: PPUSH
13022: CALL_OW 380
// un := CreateHuman ;
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: CALL_OW 44
13035: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13036: LD_ADDR_EXP 41
13040: PUSH
13041: LD_EXP 41
13045: PUSH
13046: LD_VAR 0 4
13050: ADD
13051: ST_TO_ADDR
// end ;
13052: GO 13008
13054: POP
13055: POP
// for i = 1 to tank do
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: DOUBLE
13062: LD_INT 1
13064: DEC
13065: ST_TO_ADDR
13066: LD_VAR 0 9
13070: PUSH
13071: FOR_TO
13072: IFFALSE 13185
// begin Randomize ;
13074: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13078: LD_ADDR_OWVAR 37
13082: PUSH
13083: LD_INT 2
13085: ST_TO_ADDR
// vc_engine := engine_siberite ;
13086: LD_ADDR_OWVAR 39
13090: PUSH
13091: LD_INT 3
13093: ST_TO_ADDR
// vc_control := control_manual ;
13094: LD_ADDR_OWVAR 38
13098: PUSH
13099: LD_INT 1
13101: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13102: LD_ADDR_OWVAR 40
13106: PUSH
13107: LD_INT 7
13109: PUSH
13110: LD_INT 9
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 1
13119: PPUSH
13120: LD_INT 2
13122: PPUSH
13123: CALL_OW 12
13127: ARRAY
13128: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13129: LD_ADDR_OWVAR 41
13133: PUSH
13134: LD_INT 35
13136: PPUSH
13137: LD_INT 55
13139: PPUSH
13140: CALL_OW 12
13144: ST_TO_ADDR
// un := CreateVehicle ;
13145: LD_ADDR_VAR 0 4
13149: PUSH
13150: CALL_OW 45
13154: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13155: LD_VAR 0 4
13159: PPUSH
13160: LD_INT 5
13162: PPUSH
13163: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13167: LD_ADDR_EXP 41
13171: PUSH
13172: LD_EXP 41
13176: PUSH
13177: LD_VAR 0 4
13181: ADD
13182: ST_TO_ADDR
// end ;
13183: GO 13071
13185: POP
13186: POP
// if cargo then
13187: LD_VAR 0 10
13191: IFFALSE 13309
// begin vc_chassis := us_medium_tracked ;
13193: LD_ADDR_OWVAR 37
13197: PUSH
13198: LD_INT 3
13200: ST_TO_ADDR
// vc_engine := engine_combustion ;
13201: LD_ADDR_OWVAR 39
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// vc_control := control_manual ;
13209: LD_ADDR_OWVAR 38
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13217: LD_ADDR_OWVAR 40
13221: PUSH
13222: LD_INT 12
13224: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13225: LD_ADDR_OWVAR 41
13229: PUSH
13230: LD_INT 35
13232: PPUSH
13233: LD_INT 55
13235: PPUSH
13236: CALL_OW 12
13240: ST_TO_ADDR
// un := CreateVehicle ;
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: CALL_OW 45
13250: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13251: LD_VAR 0 4
13255: PPUSH
13256: LD_INT 5
13258: PPUSH
13259: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13263: LD_ADDR_EXP 41
13267: PUSH
13268: LD_EXP 41
13272: PUSH
13273: LD_VAR 0 4
13277: ADD
13278: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_INT 3
13286: PPUSH
13287: LD_INT 30
13289: PPUSH
13290: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13294: LD_VAR 0 4
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: LD_INT 40
13304: PPUSH
13305: CALL_OW 290
// end ; end ;
13309: LD_VAR 0 2
13313: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
// uc_side := 4 ;
13326: LD_ADDR_OWVAR 20
13330: PUSH
13331: LD_INT 4
13333: ST_TO_ADDR
// uc_nation := 1 ;
13334: LD_ADDR_OWVAR 21
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13342: LD_ADDR_VAR 0 10
13346: PUSH
13347: LD_INT 6
13349: PUSH
13350: LD_INT 5
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: PUSH
13361: LD_OWVAR 67
13365: ARRAY
13366: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13367: LD_ADDR_EXP 42
13371: PUSH
13372: EMPTY
13373: ST_TO_ADDR
// sold := 1 ;
13374: LD_ADDR_VAR 0 4
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// eng := 0 ;
13382: LD_ADDR_VAR 0 5
13386: PUSH
13387: LD_INT 0
13389: ST_TO_ADDR
// sci := 0 ;
13390: LD_ADDR_VAR 0 6
13394: PUSH
13395: LD_INT 0
13397: ST_TO_ADDR
// mech := 3 ;
13398: LD_ADDR_VAR 0 7
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// tank := 3 ;
13406: LD_ADDR_VAR 0 8
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// cargo := 0 ;
13414: LD_ADDR_VAR 0 9
13418: PUSH
13419: LD_INT 0
13421: ST_TO_ADDR
// for i = 1 to sold do
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: DOUBLE
13428: LD_INT 1
13430: DEC
13431: ST_TO_ADDR
13432: LD_VAR 0 4
13436: PUSH
13437: FOR_TO
13438: IFFALSE 13510
// begin if i = 1 then
13440: LD_VAR 0 2
13444: PUSH
13445: LD_INT 1
13447: EQUAL
13448: IFFALSE 13467
// PrepareHuman ( sex_male , 1 , skill ) else
13450: LD_INT 1
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_VAR 0 10
13460: PPUSH
13461: CALL_OW 380
13465: GO 13482
// PrepareHuman ( false , 1 , skill ) ;
13467: LD_INT 0
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_VAR 0 10
13477: PPUSH
13478: CALL_OW 380
// un := CreateHuman ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: CALL_OW 44
13491: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13492: LD_ADDR_EXP 42
13496: PUSH
13497: LD_EXP 42
13501: PUSH
13502: LD_VAR 0 3
13506: ADD
13507: ST_TO_ADDR
// end ;
13508: GO 13437
13510: POP
13511: POP
// for i = 1 to mech do
13512: LD_ADDR_VAR 0 2
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_VAR 0 7
13526: PUSH
13527: FOR_TO
13528: IFFALSE 13585
// begin PrepareHuman ( false , 3 , skill ) ;
13530: LD_INT 0
13532: PPUSH
13533: LD_INT 3
13535: PPUSH
13536: LD_VAR 0 10
13540: PPUSH
13541: CALL_OW 380
// un := CreateHuman ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: CALL_OW 44
13554: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13567: LD_ADDR_EXP 42
13571: PUSH
13572: LD_EXP 42
13576: PUSH
13577: LD_VAR 0 3
13581: ADD
13582: ST_TO_ADDR
// end ;
13583: GO 13527
13585: POP
13586: POP
// for i = 1 to tank do
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: DOUBLE
13593: LD_INT 1
13595: DEC
13596: ST_TO_ADDR
13597: LD_VAR 0 8
13601: PUSH
13602: FOR_TO
13603: IFFALSE 13849
// begin Randomize ;
13605: CALL_OW 10
// if i < 3 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 3
13616: LESS
13617: IFFALSE 13726
// begin vc_chassis := us_medium_tracked ;
13619: LD_ADDR_OWVAR 37
13623: PUSH
13624: LD_INT 3
13626: ST_TO_ADDR
// vc_engine := engine_combustion ;
13627: LD_ADDR_OWVAR 39
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// vc_control := control_manual ;
13635: LD_ADDR_OWVAR 38
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13643: LD_ADDR_OWVAR 40
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 9
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 1
13660: PPUSH
13661: LD_INT 2
13663: PPUSH
13664: CALL_OW 12
13668: ARRAY
13669: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13670: LD_ADDR_OWVAR 41
13674: PUSH
13675: LD_INT 35
13677: PPUSH
13678: LD_INT 55
13680: PPUSH
13681: CALL_OW 12
13685: ST_TO_ADDR
// un := CreateVehicle ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: CALL_OW 45
13695: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13696: LD_VAR 0 3
13700: PPUSH
13701: LD_INT 5
13703: PPUSH
13704: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13708: LD_ADDR_EXP 42
13712: PUSH
13713: LD_EXP 42
13717: PUSH
13718: LD_VAR 0 3
13722: ADD
13723: ST_TO_ADDR
// end else
13724: GO 13847
// begin uc_nation := 3 ;
13726: LD_ADDR_OWVAR 21
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13734: LD_ADDR_OWVAR 37
13738: PUSH
13739: LD_INT 22
13741: ST_TO_ADDR
// vc_engine := engine_combustion ;
13742: LD_ADDR_OWVAR 39
13746: PUSH
13747: LD_INT 1
13749: ST_TO_ADDR
// vc_control := control_manual ;
13750: LD_ADDR_OWVAR 38
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13758: LD_ADDR_OWVAR 40
13762: PUSH
13763: LD_INT 51
13765: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13766: LD_ADDR_OWVAR 41
13770: PUSH
13771: LD_INT 35
13773: PPUSH
13774: LD_INT 55
13776: PPUSH
13777: CALL_OW 12
13781: ST_TO_ADDR
// un := CreateVehicle ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: CALL_OW 45
13791: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13792: LD_VAR 0 3
13796: PPUSH
13797: LD_INT 496
13799: PPUSH
13800: CALL_OW 234
// SetTag ( un , 5 ) ;
13804: LD_VAR 0 3
13808: PPUSH
13809: LD_INT 5
13811: PPUSH
13812: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13816: LD_VAR 0 3
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: LD_INT 100
13826: PPUSH
13827: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13831: LD_ADDR_EXP 42
13835: PUSH
13836: LD_EXP 42
13840: PUSH
13841: LD_VAR 0 3
13845: ADD
13846: ST_TO_ADDR
// end ; end ;
13847: GO 13602
13849: POP
13850: POP
// end ; end_of_file
13851: LD_VAR 0 1
13855: RET
// export function Action ; begin
13856: LD_INT 0
13858: PPUSH
// InGameOn ;
13859: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13863: LD_INT 151
13865: PPUSH
13866: LD_INT 107
13868: PPUSH
13869: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13873: LD_EXP 38
13877: PPUSH
13878: LD_INT 171
13880: PPUSH
13881: LD_INT 108
13883: PPUSH
13884: LD_INT 0
13886: PPUSH
13887: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13891: LD_EXP 39
13895: PPUSH
13896: LD_INT 172
13898: PPUSH
13899: LD_INT 110
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13909: LD_EXP 38
13913: PPUSH
13914: LD_INT 156
13916: PPUSH
13917: LD_INT 107
13919: PPUSH
13920: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13924: LD_EXP 39
13928: PPUSH
13929: LD_INT 154
13931: PPUSH
13932: LD_INT 105
13934: PPUSH
13935: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13946: LD_EXP 38
13950: PPUSH
13951: CALL_OW 250
13955: PUSH
13956: LD_INT 156
13958: EQUAL
13959: PUSH
13960: LD_EXP 38
13964: PPUSH
13965: CALL_OW 251
13969: PUSH
13970: LD_INT 107
13972: EQUAL
13973: AND
13974: IFFALSE 13939
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13976: LD_EXP 38
13980: PUSH
13981: LD_EXP 39
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
13997: LD_EXP 38
14001: PPUSH
14002: LD_STRING D1-A-1
14004: PPUSH
14005: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14009: LD_EXP 39
14013: PPUSH
14014: LD_STRING D1-B-1
14016: PPUSH
14017: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14021: LD_EXP 38
14025: PPUSH
14026: LD_STRING D1-A-2
14028: PPUSH
14029: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14033: LD_EXP 39
14037: PPUSH
14038: LD_STRING D1-B-2
14040: PPUSH
14041: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14045: LD_EXP 38
14049: PUSH
14050: LD_EXP 39
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: LD_INT 147
14061: PPUSH
14062: LD_INT 108
14064: PPUSH
14065: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14069: LD_EXP 38
14073: PPUSH
14074: LD_STRING D1-A-3
14076: PPUSH
14077: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14081: LD_INT 4
14083: PPUSH
14084: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14088: LD_EXP 38
14092: PPUSH
14093: LD_INT 35
14095: PPUSH
14096: CALL_OW 296
14100: PUSH
14101: LD_INT 8
14103: LESS
14104: IFFALSE 14081
// ComTurnUnit ( guyA , guyB ) ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_EXP 39
14115: PPUSH
14116: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14120: LD_EXP 39
14124: PPUSH
14125: LD_EXP 38
14129: PPUSH
14130: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14134: LD_EXP 38
14138: PPUSH
14139: LD_STRING D1-A-10
14141: PPUSH
14142: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14146: LD_EXP 39
14150: PPUSH
14151: LD_STRING D1-B-10
14153: PPUSH
14154: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14158: LD_EXP 38
14162: PPUSH
14163: LD_STRING D1-A-11
14165: PPUSH
14166: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14170: LD_EXP 39
14174: PPUSH
14175: LD_STRING D1-B-11
14177: PPUSH
14178: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14182: LD_EXP 38
14186: PPUSH
14187: LD_STRING D1-A-12
14189: PPUSH
14190: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14194: LD_EXP 39
14198: PPUSH
14199: LD_STRING D1-B-12
14201: PPUSH
14202: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14206: LD_EXP 38
14210: PPUSH
14211: LD_STRING D1-A-13
14213: PPUSH
14214: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14218: LD_EXP 39
14222: PPUSH
14223: LD_STRING D1-B-13
14225: PPUSH
14226: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14230: LD_EXP 38
14234: PPUSH
14235: LD_STRING D1-A-14
14237: PPUSH
14238: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14242: LD_EXP 39
14246: PPUSH
14247: LD_STRING D1-B-14
14249: PPUSH
14250: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14254: LD_EXP 38
14258: PPUSH
14259: LD_STRING D1-A-15
14261: PPUSH
14262: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14266: LD_EXP 39
14270: PPUSH
14271: LD_STRING D1-B-15
14273: PPUSH
14274: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14278: LD_EXP 38
14282: PPUSH
14283: LD_STRING D1-A-16
14285: PPUSH
14286: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14290: LD_EXP 39
14294: PPUSH
14295: LD_STRING D1-B-16
14297: PPUSH
14298: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14302: LD_EXP 38
14306: PPUSH
14307: LD_STRING D1-A-17
14309: PPUSH
14310: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14314: LD_EXP 39
14318: PPUSH
14319: LD_STRING D1-B-17
14321: PPUSH
14322: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14326: LD_EXP 38
14330: PPUSH
14331: LD_STRING D1-A-18
14333: PPUSH
14334: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14338: LD_INT 35
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14348: LD_EXP 38
14352: PUSH
14353: LD_EXP 39
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: LD_INT 35
14364: PPUSH
14365: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14369: LD_INT 4
14371: PPUSH
14372: CALL_OW 67
// until IsInUnit ( guyA ) ;
14376: LD_EXP 38
14380: PPUSH
14381: CALL_OW 310
14385: IFFALSE 14369
// Wait ( 0 0$02 ) ;
14387: LD_INT 70
14389: PPUSH
14390: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14394: LD_EXP 38
14398: PPUSH
14399: LD_STRING D1-A-19
14401: PPUSH
14402: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14406: LD_EXP 39
14410: PPUSH
14411: LD_STRING D1-B-19
14413: PPUSH
14414: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14418: LD_EXP 38
14422: PPUSH
14423: LD_STRING D1-A-20
14425: PPUSH
14426: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14430: LD_INT 10
14432: PPUSH
14433: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14437: LD_EXP 39
14441: PPUSH
14442: LD_STRING D1-B-20
14444: PPUSH
14445: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14449: LD_EXP 38
14453: PPUSH
14454: LD_STRING D1-A-21
14456: PPUSH
14457: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14461: LD_EXP 39
14465: PPUSH
14466: LD_STRING D1-B-21
14468: PPUSH
14469: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14473: LD_EXP 38
14477: PPUSH
14478: LD_STRING D1-A-22
14480: PPUSH
14481: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D1-B-22
14492: PPUSH
14493: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14497: LD_EXP 38
14501: PPUSH
14502: LD_STRING D1-A-23
14504: PPUSH
14505: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14509: LD_EXP 39
14513: PPUSH
14514: LD_STRING D1-B-23
14516: PPUSH
14517: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14521: LD_EXP 38
14525: PPUSH
14526: LD_STRING D1-A-24
14528: PPUSH
14529: CALL_OW 88
// InGameOff ;
14533: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14537: LD_STRING M_main
14539: PPUSH
14540: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14544: LD_INT 4
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 343
// game_status := true ;
14554: LD_ADDR_EXP 29
14558: PUSH
14559: LD_INT 1
14561: ST_TO_ADDR
// end ;
14562: LD_VAR 0 1
14566: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14567: LD_INT 1
14569: PPUSH
14570: CALL 6358 0 1
14574: PUSH
14575: LD_INT 0
14577: GREATER
14578: IFFALSE 14680
14580: GO 14582
14582: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14590: LD_INT 1
14592: PPUSH
14593: CALL 6358 0 1
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: CALL_OW 461
14606: PUSH
14607: LD_INT 1
14609: NONEQUAL
14610: IFFALSE 14583
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14612: LD_EXP 38
14616: PPUSH
14617: CALL_OW 300
14621: PUSH
14622: LD_EXP 39
14626: PPUSH
14627: CALL_OW 300
14631: AND
14632: PUSH
14633: LD_EXP 30
14637: NOT
14638: AND
14639: IFFALSE 14665
// begin Say ( guyA , DL-A-1 ) ;
14641: LD_EXP 38
14645: PPUSH
14646: LD_STRING DL-A-1
14648: PPUSH
14649: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14653: LD_EXP 39
14657: PPUSH
14658: LD_STRING DL-B-1
14660: PPUSH
14661: CALL_OW 88
// end ; if not helps_can_arrive then
14665: LD_EXP 31
14669: NOT
14670: IFFALSE 14680
// helps_can_arrive := true ;
14672: LD_ADDR_EXP 31
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// end ;
14680: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14681: LD_INT 1
14683: PPUSH
14684: CALL 6358 0 1
14688: PUSH
14689: LD_INT 0
14691: GREATER
14692: PUSH
14693: LD_EXP 38
14697: PPUSH
14698: CALL_OW 300
14702: AND
14703: PUSH
14704: LD_EXP 39
14708: PPUSH
14709: CALL_OW 300
14713: AND
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 25
14727: PUSH
14728: LD_INT 12
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: PUSH
14744: LD_INT 0
14746: EQUAL
14747: AND
14748: PUSH
14749: LD_INT 1
14751: PPUSH
14752: LD_INT 25
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: PPUSH
14767: LD_EXP 38
14771: PPUSH
14772: CALL_OW 74
14776: PPUSH
14777: CALL_OW 292
14781: AND
14782: IFFALSE 14823
14784: GO 14786
14786: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14787: LD_EXP 38
14791: PPUSH
14792: LD_STRING DA-A-1
14794: PPUSH
14795: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14799: LD_EXP 39
14803: PPUSH
14804: LD_STRING DA-B-1
14806: PPUSH
14807: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14811: LD_EXP 38
14815: PPUSH
14816: LD_STRING DA-A-2
14818: PPUSH
14819: CALL_OW 88
// end ;
14823: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14824: LD_EXP 29
14828: PUSH
14829: LD_EXP 38
14833: PPUSH
14834: LD_INT 6
14836: PPUSH
14837: CALL_OW 299
14841: PUSH
14842: LD_INT 7
14844: LESS
14845: AND
14846: IFFALSE 14899
14848: GO 14850
14850: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14851: LD_INT 117
14853: PPUSH
14854: LD_INT 50
14856: PPUSH
14857: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14861: LD_INT 1
14863: PPUSH
14864: CALL 9995 0 1
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_STRING D5-A-1
14875: PPUSH
14876: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14880: LD_INT 1
14882: PPUSH
14883: CALL 9995 0 1
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: LD_STRING D5-B-1
14894: PPUSH
14895: CALL_OW 88
// end ;
14899: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14900: LD_INT 7
14902: PPUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: PUSH
14918: LD_INT 0
14920: GREATER
14921: IFFALSE 15066
14923: GO 14925
14925: DISABLE
// begin Wait ( 0 0$03 ) ;
14926: LD_INT 105
14928: PPUSH
14929: CALL_OW 67
// DialogueOn ;
14933: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14937: LD_INT 1
14939: PPUSH
14940: CALL 9995 0 1
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_STRING D6-A-1
14951: PPUSH
14952: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14956: LD_INT 1
14958: PPUSH
14959: CALL 9995 0 1
14963: PUSH
14964: LD_INT 2
14966: ARRAY
14967: PPUSH
14968: LD_STRING D6-B-1
14970: PPUSH
14971: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14975: LD_INT 95
14977: PPUSH
14978: LD_INT 8
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_INT 20
14986: PPUSH
14987: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
14991: LD_INT 10
14993: PPUSH
14994: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
14998: LD_INT 1
15000: PPUSH
15001: CALL 9995 0 1
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: LD_STRING D6-A-2
15012: PPUSH
15013: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15017: LD_INT 1
15019: PPUSH
15020: CALL 9995 0 1
15024: PUSH
15025: LD_INT 2
15027: ARRAY
15028: PPUSH
15029: LD_STRING D6-B-2
15031: PPUSH
15032: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15036: LD_INT 1
15038: PPUSH
15039: CALL 9995 0 1
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_STRING D6-A-3
15050: PPUSH
15051: CALL_OW 88
// DialogueOff ;
15055: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15059: LD_STRING M_base
15061: PPUSH
15062: CALL_OW 337
// end ;
15066: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15067: LD_EXP 30
15071: NOT
15072: PUSH
15073: LD_INT 22
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_INT 0
15104: GREATER
15105: AND
15106: IFFALSE 15239
15108: GO 15110
15110: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15111: LD_INT 35
15113: PPUSH
15114: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15118: LD_INT 22
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 21
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 69
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL 9995 0 1
15154: PUSH
15155: LD_INT 1
15157: ARRAY
15158: PPUSH
15159: CALL_OW 74
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL 9995 0 1
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 296
15180: PUSH
15181: LD_INT 7
15183: LESS
15184: IFFALSE 15111
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15186: LD_INT 1
15188: PPUSH
15189: CALL 9995 0 1
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_STRING DR-A-1
15200: PPUSH
15201: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15205: LD_INT 1
15207: PPUSH
15208: CALL 9995 0 1
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_STRING DR-B-1
15219: PPUSH
15220: CALL_OW 88
// Wait ( 3 3$00 ) ;
15224: LD_INT 6300
15226: PPUSH
15227: CALL_OW 67
// ru_spotted := true ;
15231: LD_ADDR_EXP 16
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// end ;
15239: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15240: LD_INT 35
15242: PPUSH
15243: CALL_OW 300
15247: NOT
15248: IFFALSE 15272
15250: GO 15252
15252: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15253: LD_INT 1
15255: PPUSH
15256: CALL 9995 0 1
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_STRING DDR-A-1
15267: PPUSH
15268: CALL_OW 88
15272: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15273: LD_INT 1
15275: PPUSH
15276: LD_INT 30
15278: PPUSH
15279: CALL 6209 0 2
15283: IFFALSE 15365
15285: GO 15287
15287: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15288: LD_INT 35
15290: PPUSH
15291: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15295: LD_INT 1
15297: PPUSH
15298: LD_INT 30
15300: PPUSH
15301: CALL 6209 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 461
15314: PUSH
15315: LD_INT 1
15317: NONEQUAL
15318: IFFALSE 15288
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15320: LD_INT 1
15322: PPUSH
15323: CALL 9995 0 1
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: LD_STRING D8-A-1
15334: PPUSH
15335: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15339: LD_INT 1
15341: PPUSH
15342: CALL 9995 0 1
15346: PUSH
15347: LD_INT 2
15349: ARRAY
15350: PPUSH
15351: LD_STRING D8-B-1
15353: PPUSH
15354: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15358: LD_STRING M_mineok
15360: PPUSH
15361: CALL_OW 337
// end ;
15365: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15366: LD_INT 22
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 30
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 57
15391: PUSH
15392: EMPTY
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: PUSH
15409: LD_INT 1
15411: GREATER
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: LD_INT 57
15438: PUSH
15439: EMPTY
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: PUSH
15456: LD_INT 1
15458: EQUAL
15459: PUSH
15460: LD_INT 35
15462: PPUSH
15463: CALL_OW 300
15467: NOT
15468: AND
15469: OR
15470: IFFALSE 15522
15472: GO 15474
15474: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 25
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: PUSH
15504: LD_INT 1
15506: ARRAY
15507: PPUSH
15508: LD_STRING D7-A-1
15510: PPUSH
15511: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15515: LD_STRING M_baseok
15517: PPUSH
15518: CALL_OW 337
// end ;
15522: END
// every 0 0$01 trigger mine_ck do
15523: LD_EXP 35
15527: IFFALSE 15558
15529: GO 15531
15531: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15532: LD_INT 1
15534: PPUSH
15535: CALL 9995 0 1
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: PPUSH
15544: LD_STRING D9-A-1
15546: PPUSH
15547: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15551: LD_STRING M_minedest
15553: PPUSH
15554: CALL_OW 337
// end ;
15558: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15559: LD_EXP 29
15563: IFFALSE 16069
15565: GO 15567
15567: DISABLE
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15575: LD_OWVAR 67
15579: PPUSH
15580: CALL 11896 0 1
// if not helps_can_arrive then
15584: LD_EXP 31
15588: NOT
15589: IFFALSE 15617
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15591: LD_EXP 40
15595: PUSH
15596: LD_INT 1
15598: ARRAY
15599: PPUSH
15600: LD_STRING DB-Delay
15602: PPUSH
15603: CALL_OW 94
// time := 10 10$00 ;
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 21000
15614: ST_TO_ADDR
// end else
15615: GO 15625
// time := 3 3$00 ;
15617: LD_ADDR_VAR 0 1
15621: PUSH
15622: LD_INT 6300
15624: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 35
15637: MINUS
15638: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15639: LD_INT 35
15641: PPUSH
15642: CALL_OW 67
// end until time = 0 0$00 ;
15646: LD_VAR 0 1
15650: PUSH
15651: LD_INT 0
15653: EQUAL
15654: IFFALSE 15625
// helps_arrive := true ;
15656: LD_ADDR_EXP 30
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// if IsLive ( guyA ) then
15664: LD_EXP 38
15668: PPUSH
15669: CALL_OW 300
15673: IFFALSE 15687
// r := guyA else
15675: LD_ADDR_VAR 0 4
15679: PUSH
15680: LD_EXP 38
15684: ST_TO_ADDR
15685: GO 15697
// r := guyB ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_EXP 39
15696: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15697: LD_EXP 40
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: LD_STRING D2-A-1
15708: PPUSH
15709: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15713: LD_VAR 0 4
15717: PPUSH
15718: LD_STRING D2-B-1
15720: PPUSH
15721: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15725: LD_EXP 40
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PPUSH
15734: LD_STRING D2-A-2
15736: PPUSH
15737: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15741: LD_VAR 0 4
15745: PPUSH
15746: LD_STRING D2-B-2
15748: PPUSH
15749: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15753: LD_EXP 40
15757: PUSH
15758: LD_INT 1
15760: ARRAY
15761: PPUSH
15762: LD_STRING D2-A-3
15764: PPUSH
15765: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15769: LD_VAR 0 4
15773: PPUSH
15774: LD_STRING D2-B-3
15776: PPUSH
15777: CALL_OW 88
// to_veh := [ ] ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: DOUBLE
15794: LD_INT 1
15796: DEC
15797: ST_TO_ADDR
15798: LD_EXP 40
15802: PUSH
15803: FOR_TO
15804: IFFALSE 16067
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15806: LD_EXP 40
15810: PUSH
15811: LD_VAR 0 2
15815: ARRAY
15816: PPUSH
15817: CALL_OW 110
15821: PUSH
15822: LD_INT 3
15824: EQUAL
15825: IFFALSE 15851
// to_veh := to_veh ^ Beta_Squad [ i ] else
15827: LD_ADDR_VAR 0 5
15831: PUSH
15832: LD_VAR 0 5
15836: PUSH
15837: LD_EXP 40
15841: PUSH
15842: LD_VAR 0 2
15846: ARRAY
15847: ADD
15848: ST_TO_ADDR
15849: GO 15976
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 2
15860: ARRAY
15861: PPUSH
15862: CALL_OW 110
15866: PUSH
15867: LD_INT 5
15869: EQUAL
15870: IFFALSE 15955
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15872: LD_EXP 40
15876: PUSH
15877: LD_VAR 0 2
15881: ARRAY
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 5
15903: PPUSH
15904: LD_INT 0
15906: PPUSH
15907: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15911: LD_VAR 0 5
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_EXP 40
15924: PUSH
15925: LD_VAR 0 2
15929: ARRAY
15930: PPUSH
15931: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_VAR 0 5
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 3
15952: ST_TO_ADDR
// end else
15953: GO 15976
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15955: LD_EXP 40
15959: PUSH
15960: LD_VAR 0 2
15964: ARRAY
15965: PPUSH
15966: LD_INT 5
15968: PPUSH
15969: LD_INT 0
15971: PPUSH
15972: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15976: LD_EXP 40
15980: PUSH
15981: LD_VAR 0 2
15985: ARRAY
15986: PPUSH
15987: LD_INT 165
15989: PPUSH
15990: LD_INT 105
15992: PPUSH
15993: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
15997: LD_INT 70
15999: PPUSH
16000: LD_INT 140
16002: PPUSH
16003: CALL_OW 12
16007: PPUSH
16008: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16012: LD_EXP 40
16016: PUSH
16017: LD_VAR 0 2
16021: ARRAY
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 235
// if i = 1 then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: IFFALSE 16050
// CenterNowOnXY ( 168 , 109 ) ;
16040: LD_INT 168
16042: PPUSH
16043: LD_INT 109
16045: PPUSH
16046: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16050: LD_EXP 40
16054: PUSH
16055: LD_VAR 0 2
16059: ARRAY
16060: PPUSH
16061: CALL_OW 141
// end ;
16065: GO 15803
16067: POP
16068: POP
// end ;
16069: PPOPN 5
16071: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16072: LD_EXP 30
16076: IFFALSE 17105
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
// begin Wait ( 5 5$00 ) ;
16085: LD_INT 10500
16087: PPUSH
16088: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16092: LD_OWVAR 67
16096: PPUSH
16097: CALL 12585 0 1
// to_veh := [ ] ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: EMPTY
16107: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: DOUBLE
16114: LD_INT 1
16116: DEC
16117: ST_TO_ADDR
16118: LD_EXP 41
16122: PUSH
16123: FOR_TO
16124: IFFALSE 16352
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16126: LD_EXP 41
16130: PUSH
16131: LD_VAR 0 1
16135: ARRAY
16136: PPUSH
16137: CALL_OW 110
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16171
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16147: LD_ADDR_VAR 0 2
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: LD_EXP 41
16161: PUSH
16162: LD_VAR 0 1
16166: ARRAY
16167: ADD
16168: ST_TO_ADDR
16169: GO 16296
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16171: LD_EXP 41
16175: PUSH
16176: LD_VAR 0 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 110
16186: PUSH
16187: LD_INT 5
16189: EQUAL
16190: IFFALSE 16275
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16192: LD_EXP 41
16196: PUSH
16197: LD_VAR 0 1
16201: ARRAY
16202: PPUSH
16203: LD_INT 4
16205: PPUSH
16206: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 5
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: LD_EXP 41
16244: PUSH
16245: LD_VAR 0 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: CALL_OW 3
16272: ST_TO_ADDR
// end else
16273: GO 16296
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16275: LD_EXP 41
16279: PUSH
16280: LD_VAR 0 1
16284: ARRAY
16285: PPUSH
16286: LD_INT 5
16288: PPUSH
16289: LD_INT 0
16291: PPUSH
16292: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16296: LD_EXP 41
16300: PUSH
16301: LD_VAR 0 1
16305: ARRAY
16306: PPUSH
16307: LD_INT 164
16309: PPUSH
16310: LD_INT 104
16312: PPUSH
16313: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16317: LD_INT 70
16319: PPUSH
16320: LD_INT 140
16322: PPUSH
16323: CALL_OW 12
16327: PPUSH
16328: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16332: LD_EXP 41
16336: PUSH
16337: LD_VAR 0 1
16341: ARRAY
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 235
// end ;
16350: GO 16123
16352: POP
16353: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16354: LD_EXP 41
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_STRING D3-A-1
16365: PPUSH
16366: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16370: LD_INT 1
16372: PPUSH
16373: CALL 9995 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_STRING D3-B-1
16384: PPUSH
16385: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16389: LD_EXP 41
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: LD_STRING D3-A-2
16400: PPUSH
16401: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16405: LD_INT 1
16407: PPUSH
16408: CALL 9995 0 1
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_STRING D3-B-2
16419: PPUSH
16420: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16424: LD_EXP 41
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_STRING D3-A-3
16435: PPUSH
16436: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16440: LD_INT 1
16442: PPUSH
16443: CALL 9995 0 1
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: LD_STRING D3-B-3
16454: PPUSH
16455: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16459: LD_EXP 41
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: PPUSH
16468: LD_STRING D3-A-4
16470: PPUSH
16471: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16475: LD_INT 1
16477: PPUSH
16478: CALL 9995 0 1
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_STRING D3-B-4
16489: PPUSH
16490: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16494: LD_EXP 41
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: LD_STRING D3-A-5
16505: PPUSH
16506: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16510: LD_INT 1
16512: PPUSH
16513: CALL 9995 0 1
16517: PUSH
16518: LD_INT 1
16520: ARRAY
16521: PPUSH
16522: LD_STRING D3-B-5
16524: PPUSH
16525: CALL_OW 88
// for i = 1 to Gamma_Squad do
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: DOUBLE
16535: LD_INT 1
16537: DEC
16538: ST_TO_ADDR
16539: LD_EXP 41
16543: PUSH
16544: FOR_TO
16545: IFFALSE 16567
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16547: LD_EXP 41
16551: PUSH
16552: LD_VAR 0 1
16556: ARRAY
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 235
16565: GO 16544
16567: POP
16568: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16569: LD_INT 6300
16571: PUSH
16572: LD_INT 10500
16574: PUSH
16575: LD_INT 11550
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: LD_OWVAR 67
16587: ARRAY
16588: PPUSH
16589: CALL_OW 67
// AddZetaSquad ;
16593: CALL 13314 0 0
// Wait ( 0 0$10 ) ;
16597: LD_INT 350
16599: PPUSH
16600: CALL_OW 67
// to_veh := [ ] ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: EMPTY
16610: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: DOUBLE
16617: LD_INT 1
16619: DEC
16620: ST_TO_ADDR
16621: LD_EXP 42
16625: PUSH
16626: FOR_TO
16627: IFFALSE 16837
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16629: LD_EXP 42
16633: PUSH
16634: LD_VAR 0 1
16638: ARRAY
16639: PPUSH
16640: CALL_OW 110
16644: PUSH
16645: LD_INT 3
16647: EQUAL
16648: IFFALSE 16674
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_EXP 42
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: ADD
16671: ST_TO_ADDR
16672: GO 16799
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16674: LD_EXP 42
16678: PUSH
16679: LD_VAR 0 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 110
16689: PUSH
16690: LD_INT 5
16692: EQUAL
16693: IFFALSE 16778
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16695: LD_EXP 42
16699: PUSH
16700: LD_VAR 0 1
16704: ARRAY
16705: PPUSH
16706: LD_INT 4
16708: PPUSH
16709: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 5
16726: PPUSH
16727: LD_INT 0
16729: PPUSH
16730: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: PPUSH
16743: LD_EXP 42
16747: PUSH
16748: LD_VAR 0 1
16752: ARRAY
16753: PPUSH
16754: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_VAR 0 2
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 3
16775: ST_TO_ADDR
// end else
16776: GO 16799
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16778: LD_EXP 42
16782: PUSH
16783: LD_VAR 0 1
16787: ARRAY
16788: PPUSH
16789: LD_INT 5
16791: PPUSH
16792: LD_INT 0
16794: PPUSH
16795: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16799: LD_EXP 42
16803: PUSH
16804: LD_VAR 0 1
16808: ARRAY
16809: PPUSH
16810: LD_INT 165
16812: PPUSH
16813: LD_INT 105
16815: PPUSH
16816: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16820: LD_INT 70
16822: PPUSH
16823: LD_INT 140
16825: PPUSH
16826: CALL_OW 12
16830: PPUSH
16831: CALL_OW 67
// end ;
16835: GO 16626
16837: POP
16838: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16839: LD_EXP 42
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: LD_STRING D4-A-1
16850: PPUSH
16851: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16855: LD_INT 1
16857: PPUSH
16858: CALL 9995 0 1
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: LD_STRING D4-B-1
16869: PPUSH
16870: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16874: LD_EXP 42
16878: PUSH
16879: LD_INT 1
16881: ARRAY
16882: PPUSH
16883: LD_STRING D4-A-2
16885: PPUSH
16886: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16890: LD_INT 1
16892: PPUSH
16893: CALL 9995 0 1
16897: PUSH
16898: LD_INT 1
16900: ARRAY
16901: PPUSH
16902: LD_STRING D4-B-2
16904: PPUSH
16905: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16909: LD_EXP 42
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: LD_STRING D4-A-3
16920: PPUSH
16921: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16925: LD_INT 1
16927: PPUSH
16928: CALL 9995 0 1
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_STRING D4-B-3
16939: PPUSH
16940: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16944: LD_EXP 42
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PPUSH
16953: LD_STRING D4-A-4
16955: PPUSH
16956: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16960: LD_INT 1
16962: PPUSH
16963: CALL 9995 0 1
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: LD_STRING D4-B-4
16974: PPUSH
16975: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16979: LD_EXP 42
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: LD_STRING D4-A-5
16990: PPUSH
16991: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
16995: LD_INT 1
16997: PPUSH
16998: CALL 9995 0 1
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: LD_STRING D4-B-5
17009: PPUSH
17010: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17014: LD_EXP 42
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PPUSH
17023: LD_STRING D4-A-6
17025: PPUSH
17026: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17030: LD_INT 1
17032: PPUSH
17033: CALL 9995 0 1
17037: PUSH
17038: LD_INT 1
17040: ARRAY
17041: PPUSH
17042: LD_STRING D4-B-6
17044: PPUSH
17045: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17049: LD_EXP 42
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: LD_STRING D4-A-7
17060: PPUSH
17061: CALL_OW 94
// for i = 1 to Zeta_Squad do
17065: LD_ADDR_VAR 0 1
17069: PUSH
17070: DOUBLE
17071: LD_INT 1
17073: DEC
17074: ST_TO_ADDR
17075: LD_EXP 42
17079: PUSH
17080: FOR_TO
17081: IFFALSE 17103
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17083: LD_EXP 42
17087: PUSH
17088: LD_VAR 0 1
17092: ARRAY
17093: PPUSH
17094: LD_INT 1
17096: PPUSH
17097: CALL_OW 235
17101: GO 17080
17103: POP
17104: POP
// end ;
17105: PPOPN 2
17107: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17108: LD_INT 11
17110: PPUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 70
17127: PUSH
17128: LD_INT 0
17130: GREATER
17131: IFFALSE 17156
17133: GO 17135
17135: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17136: LD_EXP 38
17140: PPUSH
17141: LD_STRING D10-A-1
17143: PPUSH
17144: CALL_OW 88
// ru_spotted := true ;
17148: LD_ADDR_EXP 16
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// end ;
17156: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17157: LD_EXP 38
17161: PPUSH
17162: CALL_OW 301
17166: PUSH
17167: LD_EXP 39
17171: PPUSH
17172: CALL_OW 301
17176: OR
17177: IFFALSE 17189
17179: GO 17181
17181: DISABLE
// begin YouLost ( DieP ) ;
17182: LD_STRING DieP
17184: PPUSH
17185: CALL_OW 104
// end ;
17189: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17190: LD_INT 34
17192: PUSH
17193: LD_INT 8
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: IFFALSE 17217
17206: GO 17208
17208: DISABLE
// sib_bomb_constructed := true ;
17209: LD_ADDR_EXP 36
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
17217: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17218: LD_EXP 29
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PUSH
17238: LD_INT 0
17240: EQUAL
17241: AND
17242: IFFALSE 17445
17244: GO 17246
17246: DISABLE
17247: LD_INT 0
17249: PPUSH
// begin game_status := false ;
17250: LD_ADDR_EXP 29
17254: PUSH
17255: LD_INT 0
17257: ST_TO_ADDR
// if not depotConstructed then
17258: LD_EXP 2
17262: NOT
17263: IFFALSE 17272
// SetAchievement ( ACH_NODEPOT ) ;
17265: LD_STRING ACH_NODEPOT
17267: PPUSH
17268: CALL_OW 543
// if Difficulty = 3 then
17272: LD_OWVAR 67
17276: PUSH
17277: LD_INT 3
17279: EQUAL
17280: IFFALSE 17289
// SetAchievement ( ACH_HARD ) ;
17282: LD_STRING ACH_HARD
17284: PPUSH
17285: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17289: LD_OWVAR 1
17293: PUSH
17294: LD_INT 35
17296: DIVREAL
17297: PUSH
17298: LD_INT 60
17300: DIVREAL
17301: PUSH
17302: LD_INT 70
17304: PUSH
17305: LD_INT 60
17307: PUSH
17308: LD_INT 50
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_OWVAR 67
17320: ARRAY
17321: LESS
17322: IFFALSE 17336
// AddMedal ( play , 1 ) else
17324: LD_STRING play
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: CALL_OW 101
17334: GO 17347
// AddMedal ( play , - 1 ) ;
17336: LD_STRING play
17338: PPUSH
17339: LD_INT 1
17341: NEG
17342: PPUSH
17343: CALL_OW 101
// if sib_bomb_constructed then
17347: LD_EXP 36
17351: IFFALSE 17365
// AddMedal ( sibbomb , 1 ) else
17353: LD_STRING sibbomb
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: CALL_OW 101
17363: GO 17376
// AddMedal ( sibbomb , - 1 ) ;
17365: LD_STRING sibbomb
17367: PPUSH
17368: LD_INT 1
17370: NEG
17371: PPUSH
17372: CALL_OW 101
// if mine_constructed and not mine_ck then
17376: LD_EXP 37
17380: PUSH
17381: LD_EXP 35
17385: NOT
17386: AND
17387: IFFALSE 17399
// AddMedal ( mine , 1 ) ;
17389: LD_STRING mine
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 101
// if mine_ck then
17399: LD_EXP 35
17403: IFFALSE 17416
// AddMedal ( mine , - 1 ) ;
17405: LD_STRING mine
17407: PPUSH
17408: LD_INT 1
17410: NEG
17411: PPUSH
17412: CALL_OW 101
// if not mine_constructed then
17416: LD_EXP 37
17420: NOT
17421: IFFALSE 17434
// AddMedal ( mine , - 2 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 2
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// GiveMedals ( Main ) ;
17434: LD_STRING Main
17436: PPUSH
17437: CALL_OW 102
// YouWin ;
17441: CALL_OW 103
// end ; end_of_file
17445: PPOPN 1
17447: END
// every 0 0$03 trigger game_status do var time ;
17448: LD_EXP 29
17452: IFFALSE 17617
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_INT 1050
17467: PUSH
17468: LD_INT 1575
17470: PUSH
17471: LD_INT 2100
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: LD_OWVAR 67
17483: ARRAY
17484: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17485: LD_VAR 0 1
17489: PUSH
17490: LD_INT 0
17492: PPUSH
17493: LD_INT 420
17495: PPUSH
17496: CALL_OW 12
17500: PLUS
17501: PPUSH
17502: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 5
17511: PPUSH
17512: CALL_OW 12
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17524: LD_INT 105
17526: PPUSH
17527: LD_INT 1050
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17539: LD_INT 1
17541: PPUSH
17542: LD_INT 5
17544: PPUSH
17545: CALL_OW 12
17549: PPUSH
17550: LD_INT 148
17552: PPUSH
17553: LD_INT 107
17555: PPUSH
17556: LD_INT 20
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17566: LD_OWVAR 1
17570: PUSH
17571: LD_INT 44100
17573: PUSH
17574: LD_INT 37800
17576: PUSH
17577: LD_INT 33600
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_OWVAR 67
17589: ARRAY
17590: MOD
17591: IFFALSE 17607
// time := time + 0 0$20 ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 700
17605: PLUS
17606: ST_TO_ADDR
// end until game_status = false ;
17607: LD_EXP 29
17611: PUSH
17612: LD_INT 0
17614: EQUAL
17615: IFFALSE 17485
// end ;
17617: PPOPN 1
17619: END
// every 0 0$03 trigger game_status do var time ;
17620: LD_EXP 29
17624: IFFALSE 17778
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 700
17639: PUSH
17640: LD_INT 875
17642: PUSH
17643: LD_INT 1400
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: LD_OWVAR 67
17655: ARRAY
17656: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 0
17664: PPUSH
17665: LD_INT 385
17667: PPUSH
17668: CALL_OW 12
17672: PLUS
17673: PPUSH
17674: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17678: LD_INT 1
17680: PPUSH
17681: LD_INT 5
17683: PPUSH
17684: CALL_OW 12
17688: PPUSH
17689: LD_INT 102
17691: PPUSH
17692: LD_INT 6
17694: PPUSH
17695: LD_INT 25
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17705: LD_OWVAR 1
17709: PUSH
17710: LD_INT 52500
17712: PUSH
17713: LD_INT 46200
17715: PUSH
17716: LD_INT 42000
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: PUSH
17724: LD_OWVAR 67
17728: ARRAY
17729: MOD
17730: IFFALSE 17746
// time := time + 0 0$25 ;
17732: LD_ADDR_VAR 0 1
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 875
17744: PLUS
17745: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17746: LD_OWVAR 1
17750: PUSH
17751: LD_INT 231000
17753: MOD
17754: PUSH
17755: LD_INT 0
17757: EQUAL
17758: IFFALSE 17768
// time := 0 0$30 ;
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_INT 1050
17767: ST_TO_ADDR
// end until game_status = false ;
17768: LD_EXP 29
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17657
// end ;
17778: PPOPN 1
17780: END
// every 0 0$03 trigger game_status do var time ;
17781: LD_EXP 29
17785: IFFALSE 17921
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: LD_INT 1050
17800: PUSH
17801: LD_INT 1575
17803: PUSH
17804: LD_INT 1750
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: LD_OWVAR 67
17816: ARRAY
17817: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17818: LD_VAR 0 1
17822: PUSH
17823: LD_INT 0
17825: PPUSH
17826: LD_INT 385
17828: PPUSH
17829: CALL_OW 12
17833: PLUS
17834: PPUSH
17835: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 5
17844: PPUSH
17845: CALL_OW 12
17849: PPUSH
17850: LD_INT 51
17852: PPUSH
17853: LD_INT 74
17855: PPUSH
17856: LD_INT 25
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17866: LD_OWVAR 1
17870: PUSH
17871: LD_INT 84000
17873: PUSH
17874: LD_INT 105000
17876: PUSH
17877: LD_INT 136500
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_OWVAR 67
17889: ARRAY
17890: MOD
17891: PUSH
17892: LD_INT 0
17894: EQUAL
17895: IFFALSE 17911
// time := time + 0 0$15 ;
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 525
17909: PLUS
17910: ST_TO_ADDR
// end until game_status = false ;
17911: LD_EXP 29
17915: PUSH
17916: LD_INT 0
17918: EQUAL
17919: IFFALSE 17818
// end ; end_of_file
17921: PPOPN 1
17923: END
// every 0 0$01 trigger not debug do
17924: LD_EXP 1
17928: NOT
17929: IFFALSE 17952
17931: GO 17933
17933: DISABLE
// begin enable ;
17934: ENABLE
// Display_Strings := [ #tick , tick ] ;
17935: LD_ADDR_OWVAR 47
17939: PUSH
17940: LD_STRING #tick
17942: PUSH
17943: LD_OWVAR 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
// end ; end_of_file
17952: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17953: LD_VAR 0 1
17957: PPUSH
17958: CALL_OW 255
17962: PUSH
17963: LD_INT 3
17965: EQUAL
17966: PUSH
17967: LD_VAR 0 1
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: LD_INT 34
17977: PUSH
17978: LD_INT 46
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 34
17987: PUSH
17988: LD_INT 47
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 34
17997: PUSH
17998: LD_INT 45
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: PUSH
18011: EMPTY
18012: LIST
18013: PPUSH
18014: CALL_OW 69
18018: IN
18019: AND
18020: IFFALSE 18038
// ru_reserve := ru_reserve ^ un ;
18022: LD_ADDR_EXP 9
18026: PUSH
18027: LD_EXP 9
18031: PUSH
18032: LD_VAR 0 1
18036: ADD
18037: ST_TO_ADDR
// if GetSide ( un ) = 3 and not GetWeapon ( un ) in [ ru_siberium_rocket , ru_crane ] then
18038: LD_VAR 0 1
18042: PPUSH
18043: CALL_OW 255
18047: PUSH
18048: LD_INT 3
18050: EQUAL
18051: PUSH
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 264
18061: PUSH
18062: LD_INT 48
18064: PUSH
18065: LD_INT 52
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: IN
18072: NOT
18073: AND
18074: IFFALSE 18091
// ComMoveXY ( un , 65 , 60 ) ;
18076: LD_VAR 0 1
18080: PPUSH
18081: LD_INT 65
18083: PPUSH
18084: LD_INT 60
18086: PPUSH
18087: CALL_OW 111
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18091: LD_VAR 0 1
18095: PUSH
18096: LD_INT 22
18098: PUSH
18099: LD_INT 3
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 34
18108: PUSH
18109: LD_INT 48
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PPUSH
18120: CALL_OW 69
18124: IN
18125: IFFALSE 18178
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18127: LD_INT 12
18129: PPUSH
18130: LD_INT 22
18132: PUSH
18133: LD_INT 1
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 70
18144: IFFALSE 18163
// ComAttackPlace ( un , 98 , 10 ) else
18146: LD_VAR 0 1
18150: PPUSH
18151: LD_INT 98
18153: PPUSH
18154: LD_INT 10
18156: PPUSH
18157: CALL_OW 116
18161: GO 18178
// ComAttackPlace ( un , 134 , 99 ) ;
18163: LD_VAR 0 1
18167: PPUSH
18168: LD_INT 134
18170: PPUSH
18171: LD_INT 99
18173: PPUSH
18174: CALL_OW 116
// end ;
18178: PPOPN 2
18180: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18181: LD_VAR 0 1
18185: PPUSH
18186: CALL 32706 0 1
// if GetChassis ( un ) = 25 then
18190: LD_VAR 0 1
18194: PPUSH
18195: CALL_OW 265
18199: PUSH
18200: LD_INT 25
18202: EQUAL
18203: IFFALSE 18212
// SetAchievement ( ACH_BEH ) ;
18205: LD_STRING ACH_BEH
18207: PPUSH
18208: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18212: LD_VAR 0 1
18216: PUSH
18217: LD_INT 22
18219: PUSH
18220: LD_INT 3
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 21
18229: PUSH
18230: LD_INT 3
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PPUSH
18241: CALL_OW 69
18245: IN
18246: PUSH
18247: LD_VAR 0 1
18251: PPUSH
18252: CALL_OW 266
18256: PUSH
18257: LD_INT 0
18259: PUSH
18260: LD_INT 29
18262: PUSH
18263: LD_INT 30
18265: PUSH
18266: LD_INT 26
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: IN
18275: NOT
18276: AND
18277: IFFALSE 18363
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18279: LD_ADDR_EXP 13
18283: PUSH
18284: LD_EXP 13
18288: PUSH
18289: LD_VAR 0 1
18293: PPUSH
18294: CALL_OW 266
18298: ADD
18299: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18300: LD_ADDR_EXP 13
18304: PUSH
18305: LD_EXP 13
18309: PUSH
18310: LD_VAR 0 1
18314: PPUSH
18315: CALL_OW 250
18319: ADD
18320: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18321: LD_ADDR_EXP 13
18325: PUSH
18326: LD_EXP 13
18330: PUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: CALL_OW 251
18340: ADD
18341: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18342: LD_ADDR_EXP 13
18346: PUSH
18347: LD_EXP 13
18351: PUSH
18352: LD_VAR 0 1
18356: PPUSH
18357: CALL_OW 254
18361: ADD
18362: ST_TO_ADDR
// end ; if un in ru_attack_list then
18363: LD_VAR 0 1
18367: PUSH
18368: LD_EXP 10
18372: IN
18373: IFFALSE 18391
// ru_attack_list := ru_attack_list diff un ;
18375: LD_ADDR_EXP 10
18379: PUSH
18380: LD_EXP 10
18384: PUSH
18385: LD_VAR 0 1
18389: DIFF
18390: ST_TO_ADDR
// if un in ru_protector then
18391: LD_VAR 0 1
18395: PUSH
18396: LD_EXP 17
18400: IN
18401: IFFALSE 18419
// ru_protector := ru_protector diff un ;
18403: LD_ADDR_EXP 17
18407: PUSH
18408: LD_EXP 17
18412: PUSH
18413: LD_VAR 0 1
18417: DIFF
18418: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18419: LD_VAR 0 1
18423: PPUSH
18424: CALL_OW 266
18428: PUSH
18429: LD_INT 30
18431: EQUAL
18432: PUSH
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 255
18442: PUSH
18443: LD_INT 1
18445: EQUAL
18446: AND
18447: IFFALSE 18457
// mine_ck := true ;
18449: LD_ADDR_EXP 35
18453: PUSH
18454: LD_INT 1
18456: ST_TO_ADDR
// end ;
18457: PPOPN 1
18459: END
// on BuildingComplete ( un ) do var i ;
18460: LD_INT 0
18462: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18463: LD_VAR 0 1
18467: PPUSH
18468: CALL_OW 255
18472: PUSH
18473: LD_INT 1
18475: EQUAL
18476: PUSH
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 266
18486: PUSH
18487: LD_INT 0
18489: EQUAL
18490: AND
18491: IFFALSE 18501
// depotConstructed := true ;
18493: LD_ADDR_EXP 2
18497: PUSH
18498: LD_INT 1
18500: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18501: LD_VAR 0 1
18505: PPUSH
18506: CALL_OW 255
18510: PUSH
18511: LD_INT 1
18513: EQUAL
18514: PUSH
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 266
18524: PUSH
18525: LD_INT 30
18527: EQUAL
18528: AND
18529: IFFALSE 18539
// mine_constructed := true ;
18531: LD_ADDR_EXP 37
18535: PUSH
18536: LD_INT 1
18538: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 255
18548: PUSH
18549: LD_INT 3
18551: EQUAL
18552: PUSH
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 266
18562: PUSH
18563: LD_INT 0
18565: EQUAL
18566: AND
18567: IFFALSE 18624
// begin for i = 1 to 2 do
18569: LD_ADDR_VAR 0 2
18573: PUSH
18574: DOUBLE
18575: LD_INT 1
18577: DEC
18578: ST_TO_ADDR
18579: LD_INT 2
18581: PUSH
18582: FOR_TO
18583: IFFALSE 18622
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18585: LD_EXP 20
18589: PUSH
18590: LD_VAR 0 2
18594: ARRAY
18595: PPUSH
18596: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18600: LD_EXP 20
18604: PUSH
18605: LD_VAR 0 2
18609: ARRAY
18610: PPUSH
18611: LD_VAR 0 1
18615: PPUSH
18616: CALL_OW 180
// end ;
18620: GO 18582
18622: POP
18623: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 255
18633: PUSH
18634: LD_INT 3
18636: EQUAL
18637: PUSH
18638: LD_VAR 0 1
18642: PPUSH
18643: CALL_OW 266
18647: PUSH
18648: LD_EXP 13
18652: IN
18653: AND
18654: IFFALSE 18694
// for i = 1 to 4 do
18656: LD_ADDR_VAR 0 2
18660: PUSH
18661: DOUBLE
18662: LD_INT 1
18664: DEC
18665: ST_TO_ADDR
18666: LD_INT 4
18668: PUSH
18669: FOR_TO
18670: IFFALSE 18692
// ru_blist := Delete ( ru_blist , 1 ) ;
18672: LD_ADDR_EXP 13
18676: PUSH
18677: LD_EXP 13
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: CALL_OW 3
18689: ST_TO_ADDR
18690: GO 18669
18692: POP
18693: POP
// end ;
18694: PPOPN 2
18696: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18697: LD_VAR 0 1
18701: PPUSH
18702: LD_VAR 0 2
18706: PPUSH
18707: LD_VAR 0 3
18711: PPUSH
18712: CALL 32804 0 3
// end ;
18716: PPOPN 3
18718: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18719: LD_VAR 0 1
18723: PPUSH
18724: CALL 32812 0 1
// end ; end_of_file
18728: PPOPN 1
18730: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
18731: LD_INT 0
18733: PPUSH
// ar_miner := 81 ;
18734: LD_ADDR_EXP 50
18738: PUSH
18739: LD_INT 81
18741: ST_TO_ADDR
// ar_crane := 88 ;
18742: LD_ADDR_EXP 49
18746: PUSH
18747: LD_INT 88
18749: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18750: LD_ADDR_EXP 44
18754: PUSH
18755: LD_INT 89
18757: ST_TO_ADDR
// us_hack := 99 ;
18758: LD_ADDR_EXP 45
18762: PUSH
18763: LD_INT 99
18765: ST_TO_ADDR
// us_artillery := 97 ;
18766: LD_ADDR_EXP 46
18770: PUSH
18771: LD_INT 97
18773: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18774: LD_ADDR_EXP 47
18778: PUSH
18779: LD_INT 91
18781: ST_TO_ADDR
// ar_mortar := 92 ;
18782: LD_ADDR_EXP 48
18786: PUSH
18787: LD_INT 92
18789: ST_TO_ADDR
// ru_radar := 98 ;
18790: LD_ADDR_EXP 43
18794: PUSH
18795: LD_INT 98
18797: ST_TO_ADDR
// tech_Artillery := 80 ;
18798: LD_ADDR_EXP 51
18802: PUSH
18803: LD_INT 80
18805: ST_TO_ADDR
// tech_RadMat := 81 ;
18806: LD_ADDR_EXP 52
18810: PUSH
18811: LD_INT 81
18813: ST_TO_ADDR
// tech_BasicTools := 82 ;
18814: LD_ADDR_EXP 53
18818: PUSH
18819: LD_INT 82
18821: ST_TO_ADDR
// tech_Cargo := 83 ;
18822: LD_ADDR_EXP 54
18826: PUSH
18827: LD_INT 83
18829: ST_TO_ADDR
// tech_Track := 84 ;
18830: LD_ADDR_EXP 55
18834: PUSH
18835: LD_INT 84
18837: ST_TO_ADDR
// tech_Crane := 85 ;
18838: LD_ADDR_EXP 56
18842: PUSH
18843: LD_INT 85
18845: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18846: LD_ADDR_EXP 57
18850: PUSH
18851: LD_INT 86
18853: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18854: LD_ADDR_EXP 58
18858: PUSH
18859: LD_INT 87
18861: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18862: LD_ADDR_EXP 59
18866: PUSH
18867: LD_INT 88
18869: ST_TO_ADDR
// class_mastodont := 31 ;
18870: LD_ADDR_EXP 60
18874: PUSH
18875: LD_INT 31
18877: ST_TO_ADDR
// class_horse := 21 ;
18878: LD_ADDR_EXP 61
18882: PUSH
18883: LD_INT 21
18885: ST_TO_ADDR
// end ;
18886: LD_VAR 0 1
18890: RET
// every 1 do
18891: GO 18893
18893: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18894: CALL 18731 0 0
18898: END
// every 0 0$1 do
18899: GO 18901
18901: DISABLE
// begin enable ;
18902: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18903: LD_STRING updateTimer(
18905: PUSH
18906: LD_OWVAR 1
18910: STR
18911: PUSH
18912: LD_STRING );
18914: STR
18915: PPUSH
18916: CALL_OW 559
// end ;
18920: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18921: LD_INT 0
18923: PPUSH
// if p2 = 100 then
18924: LD_VAR 0 2
18928: PUSH
18929: LD_INT 100
18931: EQUAL
18932: IFFALSE 19935
// begin if not StreamModeActive then
18934: LD_EXP 62
18938: NOT
18939: IFFALSE 18949
// StreamModeActive := true ;
18941: LD_ADDR_EXP 62
18945: PUSH
18946: LD_INT 1
18948: ST_TO_ADDR
// if p3 = 0 then
18949: LD_VAR 0 3
18953: PUSH
18954: LD_INT 0
18956: EQUAL
18957: IFFALSE 18963
// InitStreamMode ;
18959: CALL 20095 0 0
// if p3 = 1 then
18963: LD_VAR 0 3
18967: PUSH
18968: LD_INT 1
18970: EQUAL
18971: IFFALSE 18981
// sRocket := true ;
18973: LD_ADDR_EXP 67
18977: PUSH
18978: LD_INT 1
18980: ST_TO_ADDR
// if p3 = 2 then
18981: LD_VAR 0 3
18985: PUSH
18986: LD_INT 2
18988: EQUAL
18989: IFFALSE 18999
// sSpeed := true ;
18991: LD_ADDR_EXP 66
18995: PUSH
18996: LD_INT 1
18998: ST_TO_ADDR
// if p3 = 3 then
18999: LD_VAR 0 3
19003: PUSH
19004: LD_INT 3
19006: EQUAL
19007: IFFALSE 19017
// sEngine := true ;
19009: LD_ADDR_EXP 68
19013: PUSH
19014: LD_INT 1
19016: ST_TO_ADDR
// if p3 = 4 then
19017: LD_VAR 0 3
19021: PUSH
19022: LD_INT 4
19024: EQUAL
19025: IFFALSE 19035
// sSpec := true ;
19027: LD_ADDR_EXP 65
19031: PUSH
19032: LD_INT 1
19034: ST_TO_ADDR
// if p3 = 5 then
19035: LD_VAR 0 3
19039: PUSH
19040: LD_INT 5
19042: EQUAL
19043: IFFALSE 19053
// sLevel := true ;
19045: LD_ADDR_EXP 69
19049: PUSH
19050: LD_INT 1
19052: ST_TO_ADDR
// if p3 = 6 then
19053: LD_VAR 0 3
19057: PUSH
19058: LD_INT 6
19060: EQUAL
19061: IFFALSE 19071
// sArmoury := true ;
19063: LD_ADDR_EXP 70
19067: PUSH
19068: LD_INT 1
19070: ST_TO_ADDR
// if p3 = 7 then
19071: LD_VAR 0 3
19075: PUSH
19076: LD_INT 7
19078: EQUAL
19079: IFFALSE 19089
// sRadar := true ;
19081: LD_ADDR_EXP 71
19085: PUSH
19086: LD_INT 1
19088: ST_TO_ADDR
// if p3 = 8 then
19089: LD_VAR 0 3
19093: PUSH
19094: LD_INT 8
19096: EQUAL
19097: IFFALSE 19107
// sBunker := true ;
19099: LD_ADDR_EXP 72
19103: PUSH
19104: LD_INT 1
19106: ST_TO_ADDR
// if p3 = 9 then
19107: LD_VAR 0 3
19111: PUSH
19112: LD_INT 9
19114: EQUAL
19115: IFFALSE 19125
// sHack := true ;
19117: LD_ADDR_EXP 73
19121: PUSH
19122: LD_INT 1
19124: ST_TO_ADDR
// if p3 = 10 then
19125: LD_VAR 0 3
19129: PUSH
19130: LD_INT 10
19132: EQUAL
19133: IFFALSE 19143
// sFire := true ;
19135: LD_ADDR_EXP 74
19139: PUSH
19140: LD_INT 1
19142: ST_TO_ADDR
// if p3 = 11 then
19143: LD_VAR 0 3
19147: PUSH
19148: LD_INT 11
19150: EQUAL
19151: IFFALSE 19161
// sRefresh := true ;
19153: LD_ADDR_EXP 75
19157: PUSH
19158: LD_INT 1
19160: ST_TO_ADDR
// if p3 = 12 then
19161: LD_VAR 0 3
19165: PUSH
19166: LD_INT 12
19168: EQUAL
19169: IFFALSE 19179
// sExp := true ;
19171: LD_ADDR_EXP 76
19175: PUSH
19176: LD_INT 1
19178: ST_TO_ADDR
// if p3 = 13 then
19179: LD_VAR 0 3
19183: PUSH
19184: LD_INT 13
19186: EQUAL
19187: IFFALSE 19197
// sDepot := true ;
19189: LD_ADDR_EXP 77
19193: PUSH
19194: LD_INT 1
19196: ST_TO_ADDR
// if p3 = 14 then
19197: LD_VAR 0 3
19201: PUSH
19202: LD_INT 14
19204: EQUAL
19205: IFFALSE 19215
// sFlag := true ;
19207: LD_ADDR_EXP 78
19211: PUSH
19212: LD_INT 1
19214: ST_TO_ADDR
// if p3 = 15 then
19215: LD_VAR 0 3
19219: PUSH
19220: LD_INT 15
19222: EQUAL
19223: IFFALSE 19233
// sKamikadze := true ;
19225: LD_ADDR_EXP 86
19229: PUSH
19230: LD_INT 1
19232: ST_TO_ADDR
// if p3 = 16 then
19233: LD_VAR 0 3
19237: PUSH
19238: LD_INT 16
19240: EQUAL
19241: IFFALSE 19251
// sTroll := true ;
19243: LD_ADDR_EXP 87
19247: PUSH
19248: LD_INT 1
19250: ST_TO_ADDR
// if p3 = 17 then
19251: LD_VAR 0 3
19255: PUSH
19256: LD_INT 17
19258: EQUAL
19259: IFFALSE 19269
// sSlow := true ;
19261: LD_ADDR_EXP 88
19265: PUSH
19266: LD_INT 1
19268: ST_TO_ADDR
// if p3 = 18 then
19269: LD_VAR 0 3
19273: PUSH
19274: LD_INT 18
19276: EQUAL
19277: IFFALSE 19287
// sLack := true ;
19279: LD_ADDR_EXP 89
19283: PUSH
19284: LD_INT 1
19286: ST_TO_ADDR
// if p3 = 19 then
19287: LD_VAR 0 3
19291: PUSH
19292: LD_INT 19
19294: EQUAL
19295: IFFALSE 19305
// sTank := true ;
19297: LD_ADDR_EXP 91
19301: PUSH
19302: LD_INT 1
19304: ST_TO_ADDR
// if p3 = 20 then
19305: LD_VAR 0 3
19309: PUSH
19310: LD_INT 20
19312: EQUAL
19313: IFFALSE 19323
// sRemote := true ;
19315: LD_ADDR_EXP 92
19319: PUSH
19320: LD_INT 1
19322: ST_TO_ADDR
// if p3 = 21 then
19323: LD_VAR 0 3
19327: PUSH
19328: LD_INT 21
19330: EQUAL
19331: IFFALSE 19341
// sPowell := true ;
19333: LD_ADDR_EXP 93
19337: PUSH
19338: LD_INT 1
19340: ST_TO_ADDR
// if p3 = 22 then
19341: LD_VAR 0 3
19345: PUSH
19346: LD_INT 22
19348: EQUAL
19349: IFFALSE 19359
// sTeleport := true ;
19351: LD_ADDR_EXP 96
19355: PUSH
19356: LD_INT 1
19358: ST_TO_ADDR
// if p3 = 23 then
19359: LD_VAR 0 3
19363: PUSH
19364: LD_INT 23
19366: EQUAL
19367: IFFALSE 19377
// sOilTower := true ;
19369: LD_ADDR_EXP 98
19373: PUSH
19374: LD_INT 1
19376: ST_TO_ADDR
// if p3 = 24 then
19377: LD_VAR 0 3
19381: PUSH
19382: LD_INT 24
19384: EQUAL
19385: IFFALSE 19395
// sShovel := true ;
19387: LD_ADDR_EXP 99
19391: PUSH
19392: LD_INT 1
19394: ST_TO_ADDR
// if p3 = 25 then
19395: LD_VAR 0 3
19399: PUSH
19400: LD_INT 25
19402: EQUAL
19403: IFFALSE 19413
// sSheik := true ;
19405: LD_ADDR_EXP 100
19409: PUSH
19410: LD_INT 1
19412: ST_TO_ADDR
// if p3 = 26 then
19413: LD_VAR 0 3
19417: PUSH
19418: LD_INT 26
19420: EQUAL
19421: IFFALSE 19431
// sEarthquake := true ;
19423: LD_ADDR_EXP 102
19427: PUSH
19428: LD_INT 1
19430: ST_TO_ADDR
// if p3 = 27 then
19431: LD_VAR 0 3
19435: PUSH
19436: LD_INT 27
19438: EQUAL
19439: IFFALSE 19449
// sAI := true ;
19441: LD_ADDR_EXP 103
19445: PUSH
19446: LD_INT 1
19448: ST_TO_ADDR
// if p3 = 28 then
19449: LD_VAR 0 3
19453: PUSH
19454: LD_INT 28
19456: EQUAL
19457: IFFALSE 19467
// sCargo := true ;
19459: LD_ADDR_EXP 106
19463: PUSH
19464: LD_INT 1
19466: ST_TO_ADDR
// if p3 = 29 then
19467: LD_VAR 0 3
19471: PUSH
19472: LD_INT 29
19474: EQUAL
19475: IFFALSE 19485
// sDLaser := true ;
19477: LD_ADDR_EXP 107
19481: PUSH
19482: LD_INT 1
19484: ST_TO_ADDR
// if p3 = 30 then
19485: LD_VAR 0 3
19489: PUSH
19490: LD_INT 30
19492: EQUAL
19493: IFFALSE 19503
// sExchange := true ;
19495: LD_ADDR_EXP 108
19499: PUSH
19500: LD_INT 1
19502: ST_TO_ADDR
// if p3 = 31 then
19503: LD_VAR 0 3
19507: PUSH
19508: LD_INT 31
19510: EQUAL
19511: IFFALSE 19521
// sFac := true ;
19513: LD_ADDR_EXP 109
19517: PUSH
19518: LD_INT 1
19520: ST_TO_ADDR
// if p3 = 32 then
19521: LD_VAR 0 3
19525: PUSH
19526: LD_INT 32
19528: EQUAL
19529: IFFALSE 19539
// sPower := true ;
19531: LD_ADDR_EXP 110
19535: PUSH
19536: LD_INT 1
19538: ST_TO_ADDR
// if p3 = 33 then
19539: LD_VAR 0 3
19543: PUSH
19544: LD_INT 33
19546: EQUAL
19547: IFFALSE 19557
// sRandom := true ;
19549: LD_ADDR_EXP 111
19553: PUSH
19554: LD_INT 1
19556: ST_TO_ADDR
// if p3 = 34 then
19557: LD_VAR 0 3
19561: PUSH
19562: LD_INT 34
19564: EQUAL
19565: IFFALSE 19575
// sShield := true ;
19567: LD_ADDR_EXP 112
19571: PUSH
19572: LD_INT 1
19574: ST_TO_ADDR
// if p3 = 35 then
19575: LD_VAR 0 3
19579: PUSH
19580: LD_INT 35
19582: EQUAL
19583: IFFALSE 19593
// sTime := true ;
19585: LD_ADDR_EXP 113
19589: PUSH
19590: LD_INT 1
19592: ST_TO_ADDR
// if p3 = 36 then
19593: LD_VAR 0 3
19597: PUSH
19598: LD_INT 36
19600: EQUAL
19601: IFFALSE 19611
// sTools := true ;
19603: LD_ADDR_EXP 114
19607: PUSH
19608: LD_INT 1
19610: ST_TO_ADDR
// if p3 = 101 then
19611: LD_VAR 0 3
19615: PUSH
19616: LD_INT 101
19618: EQUAL
19619: IFFALSE 19629
// sSold := true ;
19621: LD_ADDR_EXP 79
19625: PUSH
19626: LD_INT 1
19628: ST_TO_ADDR
// if p3 = 102 then
19629: LD_VAR 0 3
19633: PUSH
19634: LD_INT 102
19636: EQUAL
19637: IFFALSE 19647
// sDiff := true ;
19639: LD_ADDR_EXP 80
19643: PUSH
19644: LD_INT 1
19646: ST_TO_ADDR
// if p3 = 103 then
19647: LD_VAR 0 3
19651: PUSH
19652: LD_INT 103
19654: EQUAL
19655: IFFALSE 19665
// sFog := true ;
19657: LD_ADDR_EXP 83
19661: PUSH
19662: LD_INT 1
19664: ST_TO_ADDR
// if p3 = 104 then
19665: LD_VAR 0 3
19669: PUSH
19670: LD_INT 104
19672: EQUAL
19673: IFFALSE 19683
// sReset := true ;
19675: LD_ADDR_EXP 84
19679: PUSH
19680: LD_INT 1
19682: ST_TO_ADDR
// if p3 = 105 then
19683: LD_VAR 0 3
19687: PUSH
19688: LD_INT 105
19690: EQUAL
19691: IFFALSE 19701
// sSun := true ;
19693: LD_ADDR_EXP 85
19697: PUSH
19698: LD_INT 1
19700: ST_TO_ADDR
// if p3 = 106 then
19701: LD_VAR 0 3
19705: PUSH
19706: LD_INT 106
19708: EQUAL
19709: IFFALSE 19719
// sTiger := true ;
19711: LD_ADDR_EXP 81
19715: PUSH
19716: LD_INT 1
19718: ST_TO_ADDR
// if p3 = 107 then
19719: LD_VAR 0 3
19723: PUSH
19724: LD_INT 107
19726: EQUAL
19727: IFFALSE 19737
// sBomb := true ;
19729: LD_ADDR_EXP 82
19733: PUSH
19734: LD_INT 1
19736: ST_TO_ADDR
// if p3 = 108 then
19737: LD_VAR 0 3
19741: PUSH
19742: LD_INT 108
19744: EQUAL
19745: IFFALSE 19755
// sWound := true ;
19747: LD_ADDR_EXP 90
19751: PUSH
19752: LD_INT 1
19754: ST_TO_ADDR
// if p3 = 109 then
19755: LD_VAR 0 3
19759: PUSH
19760: LD_INT 109
19762: EQUAL
19763: IFFALSE 19773
// sBetray := true ;
19765: LD_ADDR_EXP 94
19769: PUSH
19770: LD_INT 1
19772: ST_TO_ADDR
// if p3 = 110 then
19773: LD_VAR 0 3
19777: PUSH
19778: LD_INT 110
19780: EQUAL
19781: IFFALSE 19791
// sContamin := true ;
19783: LD_ADDR_EXP 95
19787: PUSH
19788: LD_INT 1
19790: ST_TO_ADDR
// if p3 = 111 then
19791: LD_VAR 0 3
19795: PUSH
19796: LD_INT 111
19798: EQUAL
19799: IFFALSE 19809
// sOil := true ;
19801: LD_ADDR_EXP 97
19805: PUSH
19806: LD_INT 1
19808: ST_TO_ADDR
// if p3 = 112 then
19809: LD_VAR 0 3
19813: PUSH
19814: LD_INT 112
19816: EQUAL
19817: IFFALSE 19827
// sStu := true ;
19819: LD_ADDR_EXP 101
19823: PUSH
19824: LD_INT 1
19826: ST_TO_ADDR
// if p3 = 113 then
19827: LD_VAR 0 3
19831: PUSH
19832: LD_INT 113
19834: EQUAL
19835: IFFALSE 19845
// sBazooka := true ;
19837: LD_ADDR_EXP 104
19841: PUSH
19842: LD_INT 1
19844: ST_TO_ADDR
// if p3 = 114 then
19845: LD_VAR 0 3
19849: PUSH
19850: LD_INT 114
19852: EQUAL
19853: IFFALSE 19863
// sMortar := true ;
19855: LD_ADDR_EXP 105
19859: PUSH
19860: LD_INT 1
19862: ST_TO_ADDR
// if p3 = 115 then
19863: LD_VAR 0 3
19867: PUSH
19868: LD_INT 115
19870: EQUAL
19871: IFFALSE 19881
// sRanger := true ;
19873: LD_ADDR_EXP 115
19877: PUSH
19878: LD_INT 1
19880: ST_TO_ADDR
// if p3 = 116 then
19881: LD_VAR 0 3
19885: PUSH
19886: LD_INT 116
19888: EQUAL
19889: IFFALSE 19899
// sComputer := true ;
19891: LD_ADDR_EXP 116
19895: PUSH
19896: LD_INT 1
19898: ST_TO_ADDR
// if p3 = 117 then
19899: LD_VAR 0 3
19903: PUSH
19904: LD_INT 117
19906: EQUAL
19907: IFFALSE 19917
// s30 := true ;
19909: LD_ADDR_EXP 117
19913: PUSH
19914: LD_INT 1
19916: ST_TO_ADDR
// if p3 = 118 then
19917: LD_VAR 0 3
19921: PUSH
19922: LD_INT 118
19924: EQUAL
19925: IFFALSE 19935
// s60 := true ;
19927: LD_ADDR_EXP 118
19931: PUSH
19932: LD_INT 1
19934: ST_TO_ADDR
// end ; if p2 = 101 then
19935: LD_VAR 0 2
19939: PUSH
19940: LD_INT 101
19942: EQUAL
19943: IFFALSE 20071
// begin case p3 of 1 :
19945: LD_VAR 0 3
19949: PUSH
19950: LD_INT 1
19952: DOUBLE
19953: EQUAL
19954: IFTRUE 19958
19956: GO 19965
19958: POP
// hHackUnlimitedResources ; 2 :
19959: CALL 31667 0 0
19963: GO 20071
19965: LD_INT 2
19967: DOUBLE
19968: EQUAL
19969: IFTRUE 19973
19971: GO 19980
19973: POP
// hHackSetLevel10 ; 3 :
19974: CALL 31800 0 0
19978: GO 20071
19980: LD_INT 3
19982: DOUBLE
19983: EQUAL
19984: IFTRUE 19988
19986: GO 19995
19988: POP
// hHackSetLevel10YourUnits ; 4 :
19989: CALL 31885 0 0
19993: GO 20071
19995: LD_INT 4
19997: DOUBLE
19998: EQUAL
19999: IFTRUE 20003
20001: GO 20010
20003: POP
// hHackInvincible ; 5 :
20004: CALL 32333 0 0
20008: GO 20071
20010: LD_INT 5
20012: DOUBLE
20013: EQUAL
20014: IFTRUE 20018
20016: GO 20025
20018: POP
// hHackInvisible ; 6 :
20019: CALL 32444 0 0
20023: GO 20071
20025: LD_INT 6
20027: DOUBLE
20028: EQUAL
20029: IFTRUE 20033
20031: GO 20040
20033: POP
// hHackChangeYourSide ; 7 :
20034: CALL 32501 0 0
20038: GO 20071
20040: LD_INT 7
20042: DOUBLE
20043: EQUAL
20044: IFTRUE 20048
20046: GO 20055
20048: POP
// hHackChangeUnitSide ; 8 :
20049: CALL 32543 0 0
20053: GO 20071
20055: LD_INT 8
20057: DOUBLE
20058: EQUAL
20059: IFTRUE 20063
20061: GO 20070
20063: POP
// hHackFog ; end ;
20064: CALL 32644 0 0
20068: GO 20071
20070: POP
// end ; end ;
20071: LD_VAR 0 7
20075: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20076: GO 20078
20078: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20079: LD_STRING initStreamRollete();
20081: PPUSH
20082: CALL_OW 559
// InitStreamMode ;
20086: CALL 20095 0 0
// DefineStreamItems ( ) ;
20090: CALL 20559 0 0
// end ;
20094: END
// function InitStreamMode ; begin
20095: LD_INT 0
20097: PPUSH
// streamModeActive := false ;
20098: LD_ADDR_EXP 62
20102: PUSH
20103: LD_INT 0
20105: ST_TO_ADDR
// normalCounter := 36 ;
20106: LD_ADDR_EXP 63
20110: PUSH
20111: LD_INT 36
20113: ST_TO_ADDR
// hardcoreCounter := 16 ;
20114: LD_ADDR_EXP 64
20118: PUSH
20119: LD_INT 16
20121: ST_TO_ADDR
// sRocket := false ;
20122: LD_ADDR_EXP 67
20126: PUSH
20127: LD_INT 0
20129: ST_TO_ADDR
// sSpeed := false ;
20130: LD_ADDR_EXP 66
20134: PUSH
20135: LD_INT 0
20137: ST_TO_ADDR
// sEngine := false ;
20138: LD_ADDR_EXP 68
20142: PUSH
20143: LD_INT 0
20145: ST_TO_ADDR
// sSpec := false ;
20146: LD_ADDR_EXP 65
20150: PUSH
20151: LD_INT 0
20153: ST_TO_ADDR
// sLevel := false ;
20154: LD_ADDR_EXP 69
20158: PUSH
20159: LD_INT 0
20161: ST_TO_ADDR
// sArmoury := false ;
20162: LD_ADDR_EXP 70
20166: PUSH
20167: LD_INT 0
20169: ST_TO_ADDR
// sRadar := false ;
20170: LD_ADDR_EXP 71
20174: PUSH
20175: LD_INT 0
20177: ST_TO_ADDR
// sBunker := false ;
20178: LD_ADDR_EXP 72
20182: PUSH
20183: LD_INT 0
20185: ST_TO_ADDR
// sHack := false ;
20186: LD_ADDR_EXP 73
20190: PUSH
20191: LD_INT 0
20193: ST_TO_ADDR
// sFire := false ;
20194: LD_ADDR_EXP 74
20198: PUSH
20199: LD_INT 0
20201: ST_TO_ADDR
// sRefresh := false ;
20202: LD_ADDR_EXP 75
20206: PUSH
20207: LD_INT 0
20209: ST_TO_ADDR
// sExp := false ;
20210: LD_ADDR_EXP 76
20214: PUSH
20215: LD_INT 0
20217: ST_TO_ADDR
// sDepot := false ;
20218: LD_ADDR_EXP 77
20222: PUSH
20223: LD_INT 0
20225: ST_TO_ADDR
// sFlag := false ;
20226: LD_ADDR_EXP 78
20230: PUSH
20231: LD_INT 0
20233: ST_TO_ADDR
// sKamikadze := false ;
20234: LD_ADDR_EXP 86
20238: PUSH
20239: LD_INT 0
20241: ST_TO_ADDR
// sTroll := false ;
20242: LD_ADDR_EXP 87
20246: PUSH
20247: LD_INT 0
20249: ST_TO_ADDR
// sSlow := false ;
20250: LD_ADDR_EXP 88
20254: PUSH
20255: LD_INT 0
20257: ST_TO_ADDR
// sLack := false ;
20258: LD_ADDR_EXP 89
20262: PUSH
20263: LD_INT 0
20265: ST_TO_ADDR
// sTank := false ;
20266: LD_ADDR_EXP 91
20270: PUSH
20271: LD_INT 0
20273: ST_TO_ADDR
// sRemote := false ;
20274: LD_ADDR_EXP 92
20278: PUSH
20279: LD_INT 0
20281: ST_TO_ADDR
// sPowell := false ;
20282: LD_ADDR_EXP 93
20286: PUSH
20287: LD_INT 0
20289: ST_TO_ADDR
// sTeleport := false ;
20290: LD_ADDR_EXP 96
20294: PUSH
20295: LD_INT 0
20297: ST_TO_ADDR
// sOilTower := false ;
20298: LD_ADDR_EXP 98
20302: PUSH
20303: LD_INT 0
20305: ST_TO_ADDR
// sShovel := false ;
20306: LD_ADDR_EXP 99
20310: PUSH
20311: LD_INT 0
20313: ST_TO_ADDR
// sSheik := false ;
20314: LD_ADDR_EXP 100
20318: PUSH
20319: LD_INT 0
20321: ST_TO_ADDR
// sEarthquake := false ;
20322: LD_ADDR_EXP 102
20326: PUSH
20327: LD_INT 0
20329: ST_TO_ADDR
// sAI := false ;
20330: LD_ADDR_EXP 103
20334: PUSH
20335: LD_INT 0
20337: ST_TO_ADDR
// sCargo := false ;
20338: LD_ADDR_EXP 106
20342: PUSH
20343: LD_INT 0
20345: ST_TO_ADDR
// sDLaser := false ;
20346: LD_ADDR_EXP 107
20350: PUSH
20351: LD_INT 0
20353: ST_TO_ADDR
// sExchange := false ;
20354: LD_ADDR_EXP 108
20358: PUSH
20359: LD_INT 0
20361: ST_TO_ADDR
// sFac := false ;
20362: LD_ADDR_EXP 109
20366: PUSH
20367: LD_INT 0
20369: ST_TO_ADDR
// sPower := false ;
20370: LD_ADDR_EXP 110
20374: PUSH
20375: LD_INT 0
20377: ST_TO_ADDR
// sRandom := false ;
20378: LD_ADDR_EXP 111
20382: PUSH
20383: LD_INT 0
20385: ST_TO_ADDR
// sShield := false ;
20386: LD_ADDR_EXP 112
20390: PUSH
20391: LD_INT 0
20393: ST_TO_ADDR
// sTime := false ;
20394: LD_ADDR_EXP 113
20398: PUSH
20399: LD_INT 0
20401: ST_TO_ADDR
// sTools := false ;
20402: LD_ADDR_EXP 114
20406: PUSH
20407: LD_INT 0
20409: ST_TO_ADDR
// sSold := false ;
20410: LD_ADDR_EXP 79
20414: PUSH
20415: LD_INT 0
20417: ST_TO_ADDR
// sDiff := false ;
20418: LD_ADDR_EXP 80
20422: PUSH
20423: LD_INT 0
20425: ST_TO_ADDR
// sFog := false ;
20426: LD_ADDR_EXP 83
20430: PUSH
20431: LD_INT 0
20433: ST_TO_ADDR
// sReset := false ;
20434: LD_ADDR_EXP 84
20438: PUSH
20439: LD_INT 0
20441: ST_TO_ADDR
// sSun := false ;
20442: LD_ADDR_EXP 85
20446: PUSH
20447: LD_INT 0
20449: ST_TO_ADDR
// sTiger := false ;
20450: LD_ADDR_EXP 81
20454: PUSH
20455: LD_INT 0
20457: ST_TO_ADDR
// sBomb := false ;
20458: LD_ADDR_EXP 82
20462: PUSH
20463: LD_INT 0
20465: ST_TO_ADDR
// sWound := false ;
20466: LD_ADDR_EXP 90
20470: PUSH
20471: LD_INT 0
20473: ST_TO_ADDR
// sBetray := false ;
20474: LD_ADDR_EXP 94
20478: PUSH
20479: LD_INT 0
20481: ST_TO_ADDR
// sContamin := false ;
20482: LD_ADDR_EXP 95
20486: PUSH
20487: LD_INT 0
20489: ST_TO_ADDR
// sOil := false ;
20490: LD_ADDR_EXP 97
20494: PUSH
20495: LD_INT 0
20497: ST_TO_ADDR
// sStu := false ;
20498: LD_ADDR_EXP 101
20502: PUSH
20503: LD_INT 0
20505: ST_TO_ADDR
// sBazooka := false ;
20506: LD_ADDR_EXP 104
20510: PUSH
20511: LD_INT 0
20513: ST_TO_ADDR
// sMortar := false ;
20514: LD_ADDR_EXP 105
20518: PUSH
20519: LD_INT 0
20521: ST_TO_ADDR
// sRanger := false ;
20522: LD_ADDR_EXP 115
20526: PUSH
20527: LD_INT 0
20529: ST_TO_ADDR
// sComputer := false ;
20530: LD_ADDR_EXP 116
20534: PUSH
20535: LD_INT 0
20537: ST_TO_ADDR
// s30 := false ;
20538: LD_ADDR_EXP 117
20542: PUSH
20543: LD_INT 0
20545: ST_TO_ADDR
// s60 := false ;
20546: LD_ADDR_EXP 118
20550: PUSH
20551: LD_INT 0
20553: ST_TO_ADDR
// end ;
20554: LD_VAR 0 1
20558: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20559: LD_INT 0
20561: PPUSH
20562: PPUSH
20563: PPUSH
20564: PPUSH
20565: PPUSH
// result := [ ] ;
20566: LD_ADDR_VAR 0 1
20570: PUSH
20571: EMPTY
20572: ST_TO_ADDR
// if campaign_id = 1 then
20573: LD_OWVAR 69
20577: PUSH
20578: LD_INT 1
20580: EQUAL
20581: IFFALSE 23747
// begin case mission_number of 1 :
20583: LD_OWVAR 70
20587: PUSH
20588: LD_INT 1
20590: DOUBLE
20591: EQUAL
20592: IFTRUE 20596
20594: GO 20672
20596: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20597: LD_ADDR_VAR 0 1
20601: PUSH
20602: LD_INT 2
20604: PUSH
20605: LD_INT 4
20607: PUSH
20608: LD_INT 11
20610: PUSH
20611: LD_INT 12
20613: PUSH
20614: LD_INT 15
20616: PUSH
20617: LD_INT 16
20619: PUSH
20620: LD_INT 22
20622: PUSH
20623: LD_INT 23
20625: PUSH
20626: LD_INT 26
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 101
20642: PUSH
20643: LD_INT 102
20645: PUSH
20646: LD_INT 106
20648: PUSH
20649: LD_INT 116
20651: PUSH
20652: LD_INT 117
20654: PUSH
20655: LD_INT 118
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: ST_TO_ADDR
20670: GO 23745
20672: LD_INT 2
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20764
20680: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20681: LD_ADDR_VAR 0 1
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: LD_INT 4
20691: PUSH
20692: LD_INT 11
20694: PUSH
20695: LD_INT 12
20697: PUSH
20698: LD_INT 15
20700: PUSH
20701: LD_INT 16
20703: PUSH
20704: LD_INT 22
20706: PUSH
20707: LD_INT 23
20709: PUSH
20710: LD_INT 26
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 101
20726: PUSH
20727: LD_INT 102
20729: PUSH
20730: LD_INT 105
20732: PUSH
20733: LD_INT 106
20735: PUSH
20736: LD_INT 108
20738: PUSH
20739: LD_INT 116
20741: PUSH
20742: LD_INT 117
20744: PUSH
20745: LD_INT 118
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: ST_TO_ADDR
20762: GO 23745
20764: LD_INT 3
20766: DOUBLE
20767: EQUAL
20768: IFTRUE 20772
20770: GO 20860
20772: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20773: LD_ADDR_VAR 0 1
20777: PUSH
20778: LD_INT 2
20780: PUSH
20781: LD_INT 4
20783: PUSH
20784: LD_INT 5
20786: PUSH
20787: LD_INT 11
20789: PUSH
20790: LD_INT 12
20792: PUSH
20793: LD_INT 15
20795: PUSH
20796: LD_INT 16
20798: PUSH
20799: LD_INT 22
20801: PUSH
20802: LD_INT 26
20804: PUSH
20805: LD_INT 36
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 101
20822: PUSH
20823: LD_INT 102
20825: PUSH
20826: LD_INT 105
20828: PUSH
20829: LD_INT 106
20831: PUSH
20832: LD_INT 108
20834: PUSH
20835: LD_INT 116
20837: PUSH
20838: LD_INT 117
20840: PUSH
20841: LD_INT 118
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: ST_TO_ADDR
20858: GO 23745
20860: LD_INT 4
20862: DOUBLE
20863: EQUAL
20864: IFTRUE 20868
20866: GO 20964
20868: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20869: LD_ADDR_VAR 0 1
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: LD_INT 4
20879: PUSH
20880: LD_INT 5
20882: PUSH
20883: LD_INT 8
20885: PUSH
20886: LD_INT 11
20888: PUSH
20889: LD_INT 12
20891: PUSH
20892: LD_INT 15
20894: PUSH
20895: LD_INT 16
20897: PUSH
20898: LD_INT 22
20900: PUSH
20901: LD_INT 23
20903: PUSH
20904: LD_INT 26
20906: PUSH
20907: LD_INT 36
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 101
20926: PUSH
20927: LD_INT 102
20929: PUSH
20930: LD_INT 105
20932: PUSH
20933: LD_INT 106
20935: PUSH
20936: LD_INT 108
20938: PUSH
20939: LD_INT 116
20941: PUSH
20942: LD_INT 117
20944: PUSH
20945: LD_INT 118
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: ST_TO_ADDR
20962: GO 23745
20964: LD_INT 5
20966: DOUBLE
20967: EQUAL
20968: IFTRUE 20972
20970: GO 21084
20972: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20973: LD_ADDR_VAR 0 1
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 4
20983: PUSH
20984: LD_INT 5
20986: PUSH
20987: LD_INT 6
20989: PUSH
20990: LD_INT 8
20992: PUSH
20993: LD_INT 11
20995: PUSH
20996: LD_INT 12
20998: PUSH
20999: LD_INT 15
21001: PUSH
21002: LD_INT 16
21004: PUSH
21005: LD_INT 22
21007: PUSH
21008: LD_INT 23
21010: PUSH
21011: LD_INT 25
21013: PUSH
21014: LD_INT 26
21016: PUSH
21017: LD_INT 36
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 101
21038: PUSH
21039: LD_INT 102
21041: PUSH
21042: LD_INT 105
21044: PUSH
21045: LD_INT 106
21047: PUSH
21048: LD_INT 108
21050: PUSH
21051: LD_INT 109
21053: PUSH
21054: LD_INT 112
21056: PUSH
21057: LD_INT 116
21059: PUSH
21060: LD_INT 117
21062: PUSH
21063: LD_INT 118
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: ST_TO_ADDR
21082: GO 23745
21084: LD_INT 6
21086: DOUBLE
21087: EQUAL
21088: IFTRUE 21092
21090: GO 21224
21092: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21093: LD_ADDR_VAR 0 1
21097: PUSH
21098: LD_INT 2
21100: PUSH
21101: LD_INT 4
21103: PUSH
21104: LD_INT 5
21106: PUSH
21107: LD_INT 6
21109: PUSH
21110: LD_INT 8
21112: PUSH
21113: LD_INT 11
21115: PUSH
21116: LD_INT 12
21118: PUSH
21119: LD_INT 15
21121: PUSH
21122: LD_INT 16
21124: PUSH
21125: LD_INT 20
21127: PUSH
21128: LD_INT 21
21130: PUSH
21131: LD_INT 22
21133: PUSH
21134: LD_INT 23
21136: PUSH
21137: LD_INT 25
21139: PUSH
21140: LD_INT 26
21142: PUSH
21143: LD_INT 30
21145: PUSH
21146: LD_INT 31
21148: PUSH
21149: LD_INT 32
21151: PUSH
21152: LD_INT 36
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 101
21178: PUSH
21179: LD_INT 102
21181: PUSH
21182: LD_INT 105
21184: PUSH
21185: LD_INT 106
21187: PUSH
21188: LD_INT 108
21190: PUSH
21191: LD_INT 109
21193: PUSH
21194: LD_INT 112
21196: PUSH
21197: LD_INT 116
21199: PUSH
21200: LD_INT 117
21202: PUSH
21203: LD_INT 118
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: ST_TO_ADDR
21222: GO 23745
21224: LD_INT 7
21226: DOUBLE
21227: EQUAL
21228: IFTRUE 21232
21230: GO 21344
21232: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21233: LD_ADDR_VAR 0 1
21237: PUSH
21238: LD_INT 2
21240: PUSH
21241: LD_INT 4
21243: PUSH
21244: LD_INT 5
21246: PUSH
21247: LD_INT 7
21249: PUSH
21250: LD_INT 11
21252: PUSH
21253: LD_INT 12
21255: PUSH
21256: LD_INT 15
21258: PUSH
21259: LD_INT 16
21261: PUSH
21262: LD_INT 20
21264: PUSH
21265: LD_INT 21
21267: PUSH
21268: LD_INT 22
21270: PUSH
21271: LD_INT 23
21273: PUSH
21274: LD_INT 25
21276: PUSH
21277: LD_INT 26
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 101
21298: PUSH
21299: LD_INT 102
21301: PUSH
21302: LD_INT 103
21304: PUSH
21305: LD_INT 105
21307: PUSH
21308: LD_INT 106
21310: PUSH
21311: LD_INT 108
21313: PUSH
21314: LD_INT 112
21316: PUSH
21317: LD_INT 116
21319: PUSH
21320: LD_INT 117
21322: PUSH
21323: LD_INT 118
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: ST_TO_ADDR
21342: GO 23745
21344: LD_INT 8
21346: DOUBLE
21347: EQUAL
21348: IFTRUE 21352
21350: GO 21492
21352: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21353: LD_ADDR_VAR 0 1
21357: PUSH
21358: LD_INT 2
21360: PUSH
21361: LD_INT 4
21363: PUSH
21364: LD_INT 5
21366: PUSH
21367: LD_INT 6
21369: PUSH
21370: LD_INT 7
21372: PUSH
21373: LD_INT 8
21375: PUSH
21376: LD_INT 11
21378: PUSH
21379: LD_INT 12
21381: PUSH
21382: LD_INT 15
21384: PUSH
21385: LD_INT 16
21387: PUSH
21388: LD_INT 20
21390: PUSH
21391: LD_INT 21
21393: PUSH
21394: LD_INT 22
21396: PUSH
21397: LD_INT 23
21399: PUSH
21400: LD_INT 25
21402: PUSH
21403: LD_INT 26
21405: PUSH
21406: LD_INT 30
21408: PUSH
21409: LD_INT 31
21411: PUSH
21412: LD_INT 32
21414: PUSH
21415: LD_INT 36
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 101
21442: PUSH
21443: LD_INT 102
21445: PUSH
21446: LD_INT 103
21448: PUSH
21449: LD_INT 105
21451: PUSH
21452: LD_INT 106
21454: PUSH
21455: LD_INT 108
21457: PUSH
21458: LD_INT 109
21460: PUSH
21461: LD_INT 112
21463: PUSH
21464: LD_INT 116
21466: PUSH
21467: LD_INT 117
21469: PUSH
21470: LD_INT 118
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: ST_TO_ADDR
21490: GO 23745
21492: LD_INT 9
21494: DOUBLE
21495: EQUAL
21496: IFTRUE 21500
21498: GO 21648
21500: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21501: LD_ADDR_VAR 0 1
21505: PUSH
21506: LD_INT 2
21508: PUSH
21509: LD_INT 4
21511: PUSH
21512: LD_INT 5
21514: PUSH
21515: LD_INT 6
21517: PUSH
21518: LD_INT 7
21520: PUSH
21521: LD_INT 8
21523: PUSH
21524: LD_INT 11
21526: PUSH
21527: LD_INT 12
21529: PUSH
21530: LD_INT 15
21532: PUSH
21533: LD_INT 16
21535: PUSH
21536: LD_INT 20
21538: PUSH
21539: LD_INT 21
21541: PUSH
21542: LD_INT 22
21544: PUSH
21545: LD_INT 23
21547: PUSH
21548: LD_INT 25
21550: PUSH
21551: LD_INT 26
21553: PUSH
21554: LD_INT 28
21556: PUSH
21557: LD_INT 30
21559: PUSH
21560: LD_INT 31
21562: PUSH
21563: LD_INT 32
21565: PUSH
21566: LD_INT 36
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 101
21594: PUSH
21595: LD_INT 102
21597: PUSH
21598: LD_INT 103
21600: PUSH
21601: LD_INT 105
21603: PUSH
21604: LD_INT 106
21606: PUSH
21607: LD_INT 108
21609: PUSH
21610: LD_INT 109
21612: PUSH
21613: LD_INT 112
21615: PUSH
21616: LD_INT 114
21618: PUSH
21619: LD_INT 116
21621: PUSH
21622: LD_INT 117
21624: PUSH
21625: LD_INT 118
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: ST_TO_ADDR
21646: GO 23745
21648: LD_INT 10
21650: DOUBLE
21651: EQUAL
21652: IFTRUE 21656
21654: GO 21852
21656: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21657: LD_ADDR_VAR 0 1
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 4
21667: PUSH
21668: LD_INT 5
21670: PUSH
21671: LD_INT 6
21673: PUSH
21674: LD_INT 7
21676: PUSH
21677: LD_INT 8
21679: PUSH
21680: LD_INT 9
21682: PUSH
21683: LD_INT 10
21685: PUSH
21686: LD_INT 11
21688: PUSH
21689: LD_INT 12
21691: PUSH
21692: LD_INT 13
21694: PUSH
21695: LD_INT 14
21697: PUSH
21698: LD_INT 15
21700: PUSH
21701: LD_INT 16
21703: PUSH
21704: LD_INT 17
21706: PUSH
21707: LD_INT 18
21709: PUSH
21710: LD_INT 19
21712: PUSH
21713: LD_INT 20
21715: PUSH
21716: LD_INT 21
21718: PUSH
21719: LD_INT 22
21721: PUSH
21722: LD_INT 23
21724: PUSH
21725: LD_INT 24
21727: PUSH
21728: LD_INT 25
21730: PUSH
21731: LD_INT 26
21733: PUSH
21734: LD_INT 28
21736: PUSH
21737: LD_INT 30
21739: PUSH
21740: LD_INT 31
21742: PUSH
21743: LD_INT 32
21745: PUSH
21746: LD_INT 36
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 101
21782: PUSH
21783: LD_INT 102
21785: PUSH
21786: LD_INT 103
21788: PUSH
21789: LD_INT 104
21791: PUSH
21792: LD_INT 105
21794: PUSH
21795: LD_INT 106
21797: PUSH
21798: LD_INT 107
21800: PUSH
21801: LD_INT 108
21803: PUSH
21804: LD_INT 109
21806: PUSH
21807: LD_INT 110
21809: PUSH
21810: LD_INT 111
21812: PUSH
21813: LD_INT 112
21815: PUSH
21816: LD_INT 114
21818: PUSH
21819: LD_INT 116
21821: PUSH
21822: LD_INT 117
21824: PUSH
21825: LD_INT 118
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: ST_TO_ADDR
21850: GO 23745
21852: LD_INT 11
21854: DOUBLE
21855: EQUAL
21856: IFTRUE 21860
21858: GO 22064
21860: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21861: LD_ADDR_VAR 0 1
21865: PUSH
21866: LD_INT 2
21868: PUSH
21869: LD_INT 3
21871: PUSH
21872: LD_INT 4
21874: PUSH
21875: LD_INT 5
21877: PUSH
21878: LD_INT 6
21880: PUSH
21881: LD_INT 7
21883: PUSH
21884: LD_INT 8
21886: PUSH
21887: LD_INT 9
21889: PUSH
21890: LD_INT 10
21892: PUSH
21893: LD_INT 11
21895: PUSH
21896: LD_INT 12
21898: PUSH
21899: LD_INT 13
21901: PUSH
21902: LD_INT 14
21904: PUSH
21905: LD_INT 15
21907: PUSH
21908: LD_INT 16
21910: PUSH
21911: LD_INT 17
21913: PUSH
21914: LD_INT 18
21916: PUSH
21917: LD_INT 19
21919: PUSH
21920: LD_INT 20
21922: PUSH
21923: LD_INT 21
21925: PUSH
21926: LD_INT 22
21928: PUSH
21929: LD_INT 23
21931: PUSH
21932: LD_INT 24
21934: PUSH
21935: LD_INT 25
21937: PUSH
21938: LD_INT 26
21940: PUSH
21941: LD_INT 28
21943: PUSH
21944: LD_INT 30
21946: PUSH
21947: LD_INT 31
21949: PUSH
21950: LD_INT 32
21952: PUSH
21953: LD_INT 34
21955: PUSH
21956: LD_INT 36
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 101
21994: PUSH
21995: LD_INT 102
21997: PUSH
21998: LD_INT 103
22000: PUSH
22001: LD_INT 104
22003: PUSH
22004: LD_INT 105
22006: PUSH
22007: LD_INT 106
22009: PUSH
22010: LD_INT 107
22012: PUSH
22013: LD_INT 108
22015: PUSH
22016: LD_INT 109
22018: PUSH
22019: LD_INT 110
22021: PUSH
22022: LD_INT 111
22024: PUSH
22025: LD_INT 112
22027: PUSH
22028: LD_INT 114
22030: PUSH
22031: LD_INT 116
22033: PUSH
22034: LD_INT 117
22036: PUSH
22037: LD_INT 118
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: ST_TO_ADDR
22062: GO 23745
22064: LD_INT 12
22066: DOUBLE
22067: EQUAL
22068: IFTRUE 22072
22070: GO 22292
22072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22073: LD_ADDR_VAR 0 1
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 3
22086: PUSH
22087: LD_INT 4
22089: PUSH
22090: LD_INT 5
22092: PUSH
22093: LD_INT 6
22095: PUSH
22096: LD_INT 7
22098: PUSH
22099: LD_INT 8
22101: PUSH
22102: LD_INT 9
22104: PUSH
22105: LD_INT 10
22107: PUSH
22108: LD_INT 11
22110: PUSH
22111: LD_INT 12
22113: PUSH
22114: LD_INT 13
22116: PUSH
22117: LD_INT 14
22119: PUSH
22120: LD_INT 15
22122: PUSH
22123: LD_INT 16
22125: PUSH
22126: LD_INT 17
22128: PUSH
22129: LD_INT 18
22131: PUSH
22132: LD_INT 19
22134: PUSH
22135: LD_INT 20
22137: PUSH
22138: LD_INT 21
22140: PUSH
22141: LD_INT 22
22143: PUSH
22144: LD_INT 23
22146: PUSH
22147: LD_INT 24
22149: PUSH
22150: LD_INT 25
22152: PUSH
22153: LD_INT 26
22155: PUSH
22156: LD_INT 27
22158: PUSH
22159: LD_INT 28
22161: PUSH
22162: LD_INT 30
22164: PUSH
22165: LD_INT 31
22167: PUSH
22168: LD_INT 32
22170: PUSH
22171: LD_INT 33
22173: PUSH
22174: LD_INT 34
22176: PUSH
22177: LD_INT 36
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 101
22218: PUSH
22219: LD_INT 102
22221: PUSH
22222: LD_INT 103
22224: PUSH
22225: LD_INT 104
22227: PUSH
22228: LD_INT 105
22230: PUSH
22231: LD_INT 106
22233: PUSH
22234: LD_INT 107
22236: PUSH
22237: LD_INT 108
22239: PUSH
22240: LD_INT 109
22242: PUSH
22243: LD_INT 110
22245: PUSH
22246: LD_INT 111
22248: PUSH
22249: LD_INT 112
22251: PUSH
22252: LD_INT 113
22254: PUSH
22255: LD_INT 114
22257: PUSH
22258: LD_INT 116
22260: PUSH
22261: LD_INT 117
22263: PUSH
22264: LD_INT 118
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: ST_TO_ADDR
22290: GO 23745
22292: LD_INT 13
22294: DOUBLE
22295: EQUAL
22296: IFTRUE 22300
22298: GO 22508
22300: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22301: LD_ADDR_VAR 0 1
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: LD_INT 2
22311: PUSH
22312: LD_INT 3
22314: PUSH
22315: LD_INT 4
22317: PUSH
22318: LD_INT 5
22320: PUSH
22321: LD_INT 8
22323: PUSH
22324: LD_INT 9
22326: PUSH
22327: LD_INT 10
22329: PUSH
22330: LD_INT 11
22332: PUSH
22333: LD_INT 12
22335: PUSH
22336: LD_INT 14
22338: PUSH
22339: LD_INT 15
22341: PUSH
22342: LD_INT 16
22344: PUSH
22345: LD_INT 17
22347: PUSH
22348: LD_INT 18
22350: PUSH
22351: LD_INT 19
22353: PUSH
22354: LD_INT 20
22356: PUSH
22357: LD_INT 21
22359: PUSH
22360: LD_INT 22
22362: PUSH
22363: LD_INT 23
22365: PUSH
22366: LD_INT 24
22368: PUSH
22369: LD_INT 25
22371: PUSH
22372: LD_INT 26
22374: PUSH
22375: LD_INT 27
22377: PUSH
22378: LD_INT 28
22380: PUSH
22381: LD_INT 30
22383: PUSH
22384: LD_INT 31
22386: PUSH
22387: LD_INT 32
22389: PUSH
22390: LD_INT 33
22392: PUSH
22393: LD_INT 34
22395: PUSH
22396: LD_INT 36
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 101
22434: PUSH
22435: LD_INT 102
22437: PUSH
22438: LD_INT 103
22440: PUSH
22441: LD_INT 104
22443: PUSH
22444: LD_INT 105
22446: PUSH
22447: LD_INT 106
22449: PUSH
22450: LD_INT 107
22452: PUSH
22453: LD_INT 108
22455: PUSH
22456: LD_INT 109
22458: PUSH
22459: LD_INT 110
22461: PUSH
22462: LD_INT 111
22464: PUSH
22465: LD_INT 112
22467: PUSH
22468: LD_INT 113
22470: PUSH
22471: LD_INT 114
22473: PUSH
22474: LD_INT 116
22476: PUSH
22477: LD_INT 117
22479: PUSH
22480: LD_INT 118
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: ST_TO_ADDR
22506: GO 23745
22508: LD_INT 14
22510: DOUBLE
22511: EQUAL
22512: IFTRUE 22516
22514: GO 22740
22516: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22517: LD_ADDR_VAR 0 1
22521: PUSH
22522: LD_INT 1
22524: PUSH
22525: LD_INT 2
22527: PUSH
22528: LD_INT 3
22530: PUSH
22531: LD_INT 4
22533: PUSH
22534: LD_INT 5
22536: PUSH
22537: LD_INT 6
22539: PUSH
22540: LD_INT 7
22542: PUSH
22543: LD_INT 8
22545: PUSH
22546: LD_INT 9
22548: PUSH
22549: LD_INT 10
22551: PUSH
22552: LD_INT 11
22554: PUSH
22555: LD_INT 12
22557: PUSH
22558: LD_INT 13
22560: PUSH
22561: LD_INT 14
22563: PUSH
22564: LD_INT 15
22566: PUSH
22567: LD_INT 16
22569: PUSH
22570: LD_INT 17
22572: PUSH
22573: LD_INT 18
22575: PUSH
22576: LD_INT 19
22578: PUSH
22579: LD_INT 20
22581: PUSH
22582: LD_INT 21
22584: PUSH
22585: LD_INT 22
22587: PUSH
22588: LD_INT 23
22590: PUSH
22591: LD_INT 24
22593: PUSH
22594: LD_INT 25
22596: PUSH
22597: LD_INT 26
22599: PUSH
22600: LD_INT 27
22602: PUSH
22603: LD_INT 28
22605: PUSH
22606: LD_INT 29
22608: PUSH
22609: LD_INT 30
22611: PUSH
22612: LD_INT 31
22614: PUSH
22615: LD_INT 32
22617: PUSH
22618: LD_INT 33
22620: PUSH
22621: LD_INT 34
22623: PUSH
22624: LD_INT 36
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 101
22666: PUSH
22667: LD_INT 102
22669: PUSH
22670: LD_INT 103
22672: PUSH
22673: LD_INT 104
22675: PUSH
22676: LD_INT 105
22678: PUSH
22679: LD_INT 106
22681: PUSH
22682: LD_INT 107
22684: PUSH
22685: LD_INT 108
22687: PUSH
22688: LD_INT 109
22690: PUSH
22691: LD_INT 110
22693: PUSH
22694: LD_INT 111
22696: PUSH
22697: LD_INT 112
22699: PUSH
22700: LD_INT 113
22702: PUSH
22703: LD_INT 114
22705: PUSH
22706: LD_INT 116
22708: PUSH
22709: LD_INT 117
22711: PUSH
22712: LD_INT 118
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: ST_TO_ADDR
22738: GO 23745
22740: LD_INT 15
22742: DOUBLE
22743: EQUAL
22744: IFTRUE 22748
22746: GO 22972
22748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22749: LD_ADDR_VAR 0 1
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: LD_INT 2
22759: PUSH
22760: LD_INT 3
22762: PUSH
22763: LD_INT 4
22765: PUSH
22766: LD_INT 5
22768: PUSH
22769: LD_INT 6
22771: PUSH
22772: LD_INT 7
22774: PUSH
22775: LD_INT 8
22777: PUSH
22778: LD_INT 9
22780: PUSH
22781: LD_INT 10
22783: PUSH
22784: LD_INT 11
22786: PUSH
22787: LD_INT 12
22789: PUSH
22790: LD_INT 13
22792: PUSH
22793: LD_INT 14
22795: PUSH
22796: LD_INT 15
22798: PUSH
22799: LD_INT 16
22801: PUSH
22802: LD_INT 17
22804: PUSH
22805: LD_INT 18
22807: PUSH
22808: LD_INT 19
22810: PUSH
22811: LD_INT 20
22813: PUSH
22814: LD_INT 21
22816: PUSH
22817: LD_INT 22
22819: PUSH
22820: LD_INT 23
22822: PUSH
22823: LD_INT 24
22825: PUSH
22826: LD_INT 25
22828: PUSH
22829: LD_INT 26
22831: PUSH
22832: LD_INT 27
22834: PUSH
22835: LD_INT 28
22837: PUSH
22838: LD_INT 29
22840: PUSH
22841: LD_INT 30
22843: PUSH
22844: LD_INT 31
22846: PUSH
22847: LD_INT 32
22849: PUSH
22850: LD_INT 33
22852: PUSH
22853: LD_INT 34
22855: PUSH
22856: LD_INT 36
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 101
22898: PUSH
22899: LD_INT 102
22901: PUSH
22902: LD_INT 103
22904: PUSH
22905: LD_INT 104
22907: PUSH
22908: LD_INT 105
22910: PUSH
22911: LD_INT 106
22913: PUSH
22914: LD_INT 107
22916: PUSH
22917: LD_INT 108
22919: PUSH
22920: LD_INT 109
22922: PUSH
22923: LD_INT 110
22925: PUSH
22926: LD_INT 111
22928: PUSH
22929: LD_INT 112
22931: PUSH
22932: LD_INT 113
22934: PUSH
22935: LD_INT 114
22937: PUSH
22938: LD_INT 116
22940: PUSH
22941: LD_INT 117
22943: PUSH
22944: LD_INT 118
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: ST_TO_ADDR
22970: GO 23745
22972: LD_INT 16
22974: DOUBLE
22975: EQUAL
22976: IFTRUE 22980
22978: GO 23116
22980: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22981: LD_ADDR_VAR 0 1
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: LD_INT 4
22991: PUSH
22992: LD_INT 5
22994: PUSH
22995: LD_INT 7
22997: PUSH
22998: LD_INT 11
23000: PUSH
23001: LD_INT 12
23003: PUSH
23004: LD_INT 15
23006: PUSH
23007: LD_INT 16
23009: PUSH
23010: LD_INT 20
23012: PUSH
23013: LD_INT 21
23015: PUSH
23016: LD_INT 22
23018: PUSH
23019: LD_INT 23
23021: PUSH
23022: LD_INT 25
23024: PUSH
23025: LD_INT 26
23027: PUSH
23028: LD_INT 30
23030: PUSH
23031: LD_INT 31
23033: PUSH
23034: LD_INT 32
23036: PUSH
23037: LD_INT 33
23039: PUSH
23040: LD_INT 34
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 101
23066: PUSH
23067: LD_INT 102
23069: PUSH
23070: LD_INT 103
23072: PUSH
23073: LD_INT 106
23075: PUSH
23076: LD_INT 108
23078: PUSH
23079: LD_INT 112
23081: PUSH
23082: LD_INT 113
23084: PUSH
23085: LD_INT 114
23087: PUSH
23088: LD_INT 116
23090: PUSH
23091: LD_INT 117
23093: PUSH
23094: LD_INT 118
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: ST_TO_ADDR
23114: GO 23745
23116: LD_INT 17
23118: DOUBLE
23119: EQUAL
23120: IFTRUE 23124
23122: GO 23348
23124: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23125: LD_ADDR_VAR 0 1
23129: PUSH
23130: LD_INT 1
23132: PUSH
23133: LD_INT 2
23135: PUSH
23136: LD_INT 3
23138: PUSH
23139: LD_INT 4
23141: PUSH
23142: LD_INT 5
23144: PUSH
23145: LD_INT 6
23147: PUSH
23148: LD_INT 7
23150: PUSH
23151: LD_INT 8
23153: PUSH
23154: LD_INT 9
23156: PUSH
23157: LD_INT 10
23159: PUSH
23160: LD_INT 11
23162: PUSH
23163: LD_INT 12
23165: PUSH
23166: LD_INT 13
23168: PUSH
23169: LD_INT 14
23171: PUSH
23172: LD_INT 15
23174: PUSH
23175: LD_INT 16
23177: PUSH
23178: LD_INT 17
23180: PUSH
23181: LD_INT 18
23183: PUSH
23184: LD_INT 19
23186: PUSH
23187: LD_INT 20
23189: PUSH
23190: LD_INT 21
23192: PUSH
23193: LD_INT 22
23195: PUSH
23196: LD_INT 23
23198: PUSH
23199: LD_INT 24
23201: PUSH
23202: LD_INT 25
23204: PUSH
23205: LD_INT 26
23207: PUSH
23208: LD_INT 27
23210: PUSH
23211: LD_INT 28
23213: PUSH
23214: LD_INT 29
23216: PUSH
23217: LD_INT 30
23219: PUSH
23220: LD_INT 31
23222: PUSH
23223: LD_INT 32
23225: PUSH
23226: LD_INT 33
23228: PUSH
23229: LD_INT 34
23231: PUSH
23232: LD_INT 36
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 101
23274: PUSH
23275: LD_INT 102
23277: PUSH
23278: LD_INT 103
23280: PUSH
23281: LD_INT 104
23283: PUSH
23284: LD_INT 105
23286: PUSH
23287: LD_INT 106
23289: PUSH
23290: LD_INT 107
23292: PUSH
23293: LD_INT 108
23295: PUSH
23296: LD_INT 109
23298: PUSH
23299: LD_INT 110
23301: PUSH
23302: LD_INT 111
23304: PUSH
23305: LD_INT 112
23307: PUSH
23308: LD_INT 113
23310: PUSH
23311: LD_INT 114
23313: PUSH
23314: LD_INT 116
23316: PUSH
23317: LD_INT 117
23319: PUSH
23320: LD_INT 118
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: ST_TO_ADDR
23346: GO 23745
23348: LD_INT 18
23350: DOUBLE
23351: EQUAL
23352: IFTRUE 23356
23354: GO 23504
23356: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23357: LD_ADDR_VAR 0 1
23361: PUSH
23362: LD_INT 2
23364: PUSH
23365: LD_INT 4
23367: PUSH
23368: LD_INT 5
23370: PUSH
23371: LD_INT 7
23373: PUSH
23374: LD_INT 11
23376: PUSH
23377: LD_INT 12
23379: PUSH
23380: LD_INT 15
23382: PUSH
23383: LD_INT 16
23385: PUSH
23386: LD_INT 20
23388: PUSH
23389: LD_INT 21
23391: PUSH
23392: LD_INT 22
23394: PUSH
23395: LD_INT 23
23397: PUSH
23398: LD_INT 25
23400: PUSH
23401: LD_INT 26
23403: PUSH
23404: LD_INT 30
23406: PUSH
23407: LD_INT 31
23409: PUSH
23410: LD_INT 32
23412: PUSH
23413: LD_INT 33
23415: PUSH
23416: LD_INT 34
23418: PUSH
23419: LD_INT 35
23421: PUSH
23422: LD_INT 36
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 101
23450: PUSH
23451: LD_INT 102
23453: PUSH
23454: LD_INT 103
23456: PUSH
23457: LD_INT 106
23459: PUSH
23460: LD_INT 108
23462: PUSH
23463: LD_INT 112
23465: PUSH
23466: LD_INT 113
23468: PUSH
23469: LD_INT 114
23471: PUSH
23472: LD_INT 115
23474: PUSH
23475: LD_INT 116
23477: PUSH
23478: LD_INT 117
23480: PUSH
23481: LD_INT 118
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: ST_TO_ADDR
23502: GO 23745
23504: LD_INT 19
23506: DOUBLE
23507: EQUAL
23508: IFTRUE 23512
23510: GO 23744
23512: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23513: LD_ADDR_VAR 0 1
23517: PUSH
23518: LD_INT 1
23520: PUSH
23521: LD_INT 2
23523: PUSH
23524: LD_INT 3
23526: PUSH
23527: LD_INT 4
23529: PUSH
23530: LD_INT 5
23532: PUSH
23533: LD_INT 6
23535: PUSH
23536: LD_INT 7
23538: PUSH
23539: LD_INT 8
23541: PUSH
23542: LD_INT 9
23544: PUSH
23545: LD_INT 10
23547: PUSH
23548: LD_INT 11
23550: PUSH
23551: LD_INT 12
23553: PUSH
23554: LD_INT 13
23556: PUSH
23557: LD_INT 14
23559: PUSH
23560: LD_INT 15
23562: PUSH
23563: LD_INT 16
23565: PUSH
23566: LD_INT 17
23568: PUSH
23569: LD_INT 18
23571: PUSH
23572: LD_INT 19
23574: PUSH
23575: LD_INT 20
23577: PUSH
23578: LD_INT 21
23580: PUSH
23581: LD_INT 22
23583: PUSH
23584: LD_INT 23
23586: PUSH
23587: LD_INT 24
23589: PUSH
23590: LD_INT 25
23592: PUSH
23593: LD_INT 26
23595: PUSH
23596: LD_INT 27
23598: PUSH
23599: LD_INT 28
23601: PUSH
23602: LD_INT 29
23604: PUSH
23605: LD_INT 30
23607: PUSH
23608: LD_INT 31
23610: PUSH
23611: LD_INT 32
23613: PUSH
23614: LD_INT 33
23616: PUSH
23617: LD_INT 34
23619: PUSH
23620: LD_INT 35
23622: PUSH
23623: LD_INT 36
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 101
23666: PUSH
23667: LD_INT 102
23669: PUSH
23670: LD_INT 103
23672: PUSH
23673: LD_INT 104
23675: PUSH
23676: LD_INT 105
23678: PUSH
23679: LD_INT 106
23681: PUSH
23682: LD_INT 107
23684: PUSH
23685: LD_INT 108
23687: PUSH
23688: LD_INT 109
23690: PUSH
23691: LD_INT 110
23693: PUSH
23694: LD_INT 111
23696: PUSH
23697: LD_INT 112
23699: PUSH
23700: LD_INT 113
23702: PUSH
23703: LD_INT 114
23705: PUSH
23706: LD_INT 115
23708: PUSH
23709: LD_INT 116
23711: PUSH
23712: LD_INT 117
23714: PUSH
23715: LD_INT 118
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: ST_TO_ADDR
23742: GO 23745
23744: POP
// end else
23745: GO 23976
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23747: LD_ADDR_VAR 0 1
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: LD_INT 2
23757: PUSH
23758: LD_INT 3
23760: PUSH
23761: LD_INT 4
23763: PUSH
23764: LD_INT 5
23766: PUSH
23767: LD_INT 6
23769: PUSH
23770: LD_INT 7
23772: PUSH
23773: LD_INT 8
23775: PUSH
23776: LD_INT 9
23778: PUSH
23779: LD_INT 10
23781: PUSH
23782: LD_INT 11
23784: PUSH
23785: LD_INT 12
23787: PUSH
23788: LD_INT 13
23790: PUSH
23791: LD_INT 14
23793: PUSH
23794: LD_INT 15
23796: PUSH
23797: LD_INT 16
23799: PUSH
23800: LD_INT 17
23802: PUSH
23803: LD_INT 18
23805: PUSH
23806: LD_INT 19
23808: PUSH
23809: LD_INT 20
23811: PUSH
23812: LD_INT 21
23814: PUSH
23815: LD_INT 22
23817: PUSH
23818: LD_INT 23
23820: PUSH
23821: LD_INT 24
23823: PUSH
23824: LD_INT 25
23826: PUSH
23827: LD_INT 26
23829: PUSH
23830: LD_INT 27
23832: PUSH
23833: LD_INT 28
23835: PUSH
23836: LD_INT 29
23838: PUSH
23839: LD_INT 30
23841: PUSH
23842: LD_INT 31
23844: PUSH
23845: LD_INT 32
23847: PUSH
23848: LD_INT 33
23850: PUSH
23851: LD_INT 34
23853: PUSH
23854: LD_INT 35
23856: PUSH
23857: LD_INT 36
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 101
23900: PUSH
23901: LD_INT 102
23903: PUSH
23904: LD_INT 103
23906: PUSH
23907: LD_INT 104
23909: PUSH
23910: LD_INT 105
23912: PUSH
23913: LD_INT 106
23915: PUSH
23916: LD_INT 107
23918: PUSH
23919: LD_INT 108
23921: PUSH
23922: LD_INT 109
23924: PUSH
23925: LD_INT 110
23927: PUSH
23928: LD_INT 111
23930: PUSH
23931: LD_INT 112
23933: PUSH
23934: LD_INT 113
23936: PUSH
23937: LD_INT 114
23939: PUSH
23940: LD_INT 115
23942: PUSH
23943: LD_INT 116
23945: PUSH
23946: LD_INT 117
23948: PUSH
23949: LD_INT 118
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: ST_TO_ADDR
// if result then
23976: LD_VAR 0 1
23980: IFFALSE 24269
// begin normal :=  ;
23982: LD_ADDR_VAR 0 3
23986: PUSH
23987: LD_STRING 
23989: ST_TO_ADDR
// hardcore :=  ;
23990: LD_ADDR_VAR 0 4
23994: PUSH
23995: LD_STRING 
23997: ST_TO_ADDR
// for i = 1 to normalCounter do
23998: LD_ADDR_VAR 0 5
24002: PUSH
24003: DOUBLE
24004: LD_INT 1
24006: DEC
24007: ST_TO_ADDR
24008: LD_EXP 63
24012: PUSH
24013: FOR_TO
24014: IFFALSE 24115
// begin tmp := 0 ;
24016: LD_ADDR_VAR 0 2
24020: PUSH
24021: LD_STRING 0
24023: ST_TO_ADDR
// if result [ 1 ] then
24024: LD_VAR 0 1
24028: PUSH
24029: LD_INT 1
24031: ARRAY
24032: IFFALSE 24097
// if result [ 1 ] [ 1 ] = i then
24034: LD_VAR 0 1
24038: PUSH
24039: LD_INT 1
24041: ARRAY
24042: PUSH
24043: LD_INT 1
24045: ARRAY
24046: PUSH
24047: LD_VAR 0 5
24051: EQUAL
24052: IFFALSE 24097
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24054: LD_ADDR_VAR 0 1
24058: PUSH
24059: LD_VAR 0 1
24063: PPUSH
24064: LD_INT 1
24066: PPUSH
24067: LD_VAR 0 1
24071: PUSH
24072: LD_INT 1
24074: ARRAY
24075: PPUSH
24076: LD_INT 1
24078: PPUSH
24079: CALL_OW 3
24083: PPUSH
24084: CALL_OW 1
24088: ST_TO_ADDR
// tmp := 1 ;
24089: LD_ADDR_VAR 0 2
24093: PUSH
24094: LD_STRING 1
24096: ST_TO_ADDR
// end ; normal := normal & tmp ;
24097: LD_ADDR_VAR 0 3
24101: PUSH
24102: LD_VAR 0 3
24106: PUSH
24107: LD_VAR 0 2
24111: STR
24112: ST_TO_ADDR
// end ;
24113: GO 24013
24115: POP
24116: POP
// for i = 1 to hardcoreCounter do
24117: LD_ADDR_VAR 0 5
24121: PUSH
24122: DOUBLE
24123: LD_INT 1
24125: DEC
24126: ST_TO_ADDR
24127: LD_EXP 64
24131: PUSH
24132: FOR_TO
24133: IFFALSE 24238
// begin tmp := 0 ;
24135: LD_ADDR_VAR 0 2
24139: PUSH
24140: LD_STRING 0
24142: ST_TO_ADDR
// if result [ 2 ] then
24143: LD_VAR 0 1
24147: PUSH
24148: LD_INT 2
24150: ARRAY
24151: IFFALSE 24220
// if result [ 2 ] [ 1 ] = 100 + i then
24153: LD_VAR 0 1
24157: PUSH
24158: LD_INT 2
24160: ARRAY
24161: PUSH
24162: LD_INT 1
24164: ARRAY
24165: PUSH
24166: LD_INT 100
24168: PUSH
24169: LD_VAR 0 5
24173: PLUS
24174: EQUAL
24175: IFFALSE 24220
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24177: LD_ADDR_VAR 0 1
24181: PUSH
24182: LD_VAR 0 1
24186: PPUSH
24187: LD_INT 2
24189: PPUSH
24190: LD_VAR 0 1
24194: PUSH
24195: LD_INT 2
24197: ARRAY
24198: PPUSH
24199: LD_INT 1
24201: PPUSH
24202: CALL_OW 3
24206: PPUSH
24207: CALL_OW 1
24211: ST_TO_ADDR
// tmp := 1 ;
24212: LD_ADDR_VAR 0 2
24216: PUSH
24217: LD_STRING 1
24219: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24220: LD_ADDR_VAR 0 4
24224: PUSH
24225: LD_VAR 0 4
24229: PUSH
24230: LD_VAR 0 2
24234: STR
24235: ST_TO_ADDR
// end ;
24236: GO 24132
24238: POP
24239: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24240: LD_STRING getStreamItemsFromMission("
24242: PUSH
24243: LD_VAR 0 3
24247: STR
24248: PUSH
24249: LD_STRING ","
24251: STR
24252: PUSH
24253: LD_VAR 0 4
24257: STR
24258: PUSH
24259: LD_STRING ")
24261: STR
24262: PPUSH
24263: CALL_OW 559
// end else
24267: GO 24276
// ToLua ( getStreamItemsFromMission("","") ) ;
24269: LD_STRING getStreamItemsFromMission("","")
24271: PPUSH
24272: CALL_OW 559
// end ;
24276: LD_VAR 0 1
24280: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24281: LD_EXP 62
24285: PUSH
24286: LD_EXP 67
24290: AND
24291: IFFALSE 24415
24293: GO 24295
24295: DISABLE
24296: LD_INT 0
24298: PPUSH
24299: PPUSH
// begin enable ;
24300: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24301: LD_ADDR_VAR 0 2
24305: PUSH
24306: LD_INT 22
24308: PUSH
24309: LD_OWVAR 2
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 2
24320: PUSH
24321: LD_INT 34
24323: PUSH
24324: LD_INT 7
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 34
24333: PUSH
24334: LD_INT 45
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 34
24343: PUSH
24344: LD_INT 28
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 34
24353: PUSH
24354: LD_INT 47
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PPUSH
24372: CALL_OW 69
24376: ST_TO_ADDR
// if not tmp then
24377: LD_VAR 0 2
24381: NOT
24382: IFFALSE 24386
// exit ;
24384: GO 24415
// for i in tmp do
24386: LD_ADDR_VAR 0 1
24390: PUSH
24391: LD_VAR 0 2
24395: PUSH
24396: FOR_IN
24397: IFFALSE 24413
// begin SetLives ( i , 0 ) ;
24399: LD_VAR 0 1
24403: PPUSH
24404: LD_INT 0
24406: PPUSH
24407: CALL_OW 234
// end ;
24411: GO 24396
24413: POP
24414: POP
// end ;
24415: PPOPN 2
24417: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24418: LD_EXP 62
24422: PUSH
24423: LD_EXP 68
24427: AND
24428: IFFALSE 24512
24430: GO 24432
24432: DISABLE
24433: LD_INT 0
24435: PPUSH
24436: PPUSH
// begin enable ;
24437: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24438: LD_ADDR_VAR 0 2
24442: PUSH
24443: LD_INT 22
24445: PUSH
24446: LD_OWVAR 2
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 32
24457: PUSH
24458: LD_INT 3
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PPUSH
24469: CALL_OW 69
24473: ST_TO_ADDR
// if not tmp then
24474: LD_VAR 0 2
24478: NOT
24479: IFFALSE 24483
// exit ;
24481: GO 24512
// for i in tmp do
24483: LD_ADDR_VAR 0 1
24487: PUSH
24488: LD_VAR 0 2
24492: PUSH
24493: FOR_IN
24494: IFFALSE 24510
// begin SetLives ( i , 0 ) ;
24496: LD_VAR 0 1
24500: PPUSH
24501: LD_INT 0
24503: PPUSH
24504: CALL_OW 234
// end ;
24508: GO 24493
24510: POP
24511: POP
// end ;
24512: PPOPN 2
24514: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24515: LD_EXP 62
24519: PUSH
24520: LD_EXP 65
24524: AND
24525: IFFALSE 24618
24527: GO 24529
24529: DISABLE
24530: LD_INT 0
24532: PPUSH
// begin enable ;
24533: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24534: LD_ADDR_VAR 0 1
24538: PUSH
24539: LD_INT 22
24541: PUSH
24542: LD_OWVAR 2
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: LD_INT 25
24556: PUSH
24557: LD_INT 5
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 25
24566: PUSH
24567: LD_INT 9
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 25
24576: PUSH
24577: LD_INT 8
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PPUSH
24594: CALL_OW 69
24598: PUSH
24599: FOR_IN
24600: IFFALSE 24616
// begin SetClass ( i , 1 ) ;
24602: LD_VAR 0 1
24606: PPUSH
24607: LD_INT 1
24609: PPUSH
24610: CALL_OW 336
// end ;
24614: GO 24599
24616: POP
24617: POP
// end ;
24618: PPOPN 1
24620: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24621: LD_EXP 62
24625: PUSH
24626: LD_EXP 66
24630: AND
24631: PUSH
24632: LD_OWVAR 65
24636: PUSH
24637: LD_INT 7
24639: LESS
24640: AND
24641: IFFALSE 24655
24643: GO 24645
24645: DISABLE
// begin enable ;
24646: ENABLE
// game_speed := 7 ;
24647: LD_ADDR_OWVAR 65
24651: PUSH
24652: LD_INT 7
24654: ST_TO_ADDR
// end ;
24655: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24656: LD_EXP 62
24660: PUSH
24661: LD_EXP 69
24665: AND
24666: IFFALSE 24868
24668: GO 24670
24670: DISABLE
24671: LD_INT 0
24673: PPUSH
24674: PPUSH
24675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24676: LD_ADDR_VAR 0 3
24680: PUSH
24681: LD_INT 81
24683: PUSH
24684: LD_OWVAR 2
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 21
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PPUSH
24707: CALL_OW 69
24711: ST_TO_ADDR
// if not tmp then
24712: LD_VAR 0 3
24716: NOT
24717: IFFALSE 24721
// exit ;
24719: GO 24868
// if tmp > 5 then
24721: LD_VAR 0 3
24725: PUSH
24726: LD_INT 5
24728: GREATER
24729: IFFALSE 24741
// k := 5 else
24731: LD_ADDR_VAR 0 2
24735: PUSH
24736: LD_INT 5
24738: ST_TO_ADDR
24739: GO 24751
// k := tmp ;
24741: LD_ADDR_VAR 0 2
24745: PUSH
24746: LD_VAR 0 3
24750: ST_TO_ADDR
// for i := 1 to k do
24751: LD_ADDR_VAR 0 1
24755: PUSH
24756: DOUBLE
24757: LD_INT 1
24759: DEC
24760: ST_TO_ADDR
24761: LD_VAR 0 2
24765: PUSH
24766: FOR_TO
24767: IFFALSE 24866
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24769: LD_VAR 0 3
24773: PUSH
24774: LD_VAR 0 1
24778: ARRAY
24779: PPUSH
24780: LD_VAR 0 1
24784: PUSH
24785: LD_INT 4
24787: MOD
24788: PUSH
24789: LD_INT 1
24791: PLUS
24792: PPUSH
24793: CALL_OW 259
24797: PUSH
24798: LD_INT 10
24800: LESS
24801: IFFALSE 24864
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24803: LD_VAR 0 3
24807: PUSH
24808: LD_VAR 0 1
24812: ARRAY
24813: PPUSH
24814: LD_VAR 0 1
24818: PUSH
24819: LD_INT 4
24821: MOD
24822: PUSH
24823: LD_INT 1
24825: PLUS
24826: PPUSH
24827: LD_VAR 0 3
24831: PUSH
24832: LD_VAR 0 1
24836: ARRAY
24837: PPUSH
24838: LD_VAR 0 1
24842: PUSH
24843: LD_INT 4
24845: MOD
24846: PUSH
24847: LD_INT 1
24849: PLUS
24850: PPUSH
24851: CALL_OW 259
24855: PUSH
24856: LD_INT 1
24858: PLUS
24859: PPUSH
24860: CALL_OW 237
24864: GO 24766
24866: POP
24867: POP
// end ;
24868: PPOPN 3
24870: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24871: LD_EXP 62
24875: PUSH
24876: LD_EXP 70
24880: AND
24881: IFFALSE 24901
24883: GO 24885
24885: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24886: LD_INT 4
24888: PPUSH
24889: LD_OWVAR 2
24893: PPUSH
24894: LD_INT 0
24896: PPUSH
24897: CALL_OW 324
24901: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24902: LD_EXP 62
24906: PUSH
24907: LD_EXP 99
24911: AND
24912: IFFALSE 24932
24914: GO 24916
24916: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24917: LD_INT 19
24919: PPUSH
24920: LD_OWVAR 2
24924: PPUSH
24925: LD_INT 0
24927: PPUSH
24928: CALL_OW 324
24932: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24933: LD_EXP 62
24937: PUSH
24938: LD_EXP 71
24942: AND
24943: IFFALSE 25045
24945: GO 24947
24947: DISABLE
24948: LD_INT 0
24950: PPUSH
24951: PPUSH
// begin enable ;
24952: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24953: LD_ADDR_VAR 0 2
24957: PUSH
24958: LD_INT 22
24960: PUSH
24961: LD_OWVAR 2
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: LD_INT 34
24975: PUSH
24976: LD_INT 11
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 34
24985: PUSH
24986: LD_INT 30
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: LIST
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PPUSH
25002: CALL_OW 69
25006: ST_TO_ADDR
// if not tmp then
25007: LD_VAR 0 2
25011: NOT
25012: IFFALSE 25016
// exit ;
25014: GO 25045
// for i in tmp do
25016: LD_ADDR_VAR 0 1
25020: PUSH
25021: LD_VAR 0 2
25025: PUSH
25026: FOR_IN
25027: IFFALSE 25043
// begin SetLives ( i , 0 ) ;
25029: LD_VAR 0 1
25033: PPUSH
25034: LD_INT 0
25036: PPUSH
25037: CALL_OW 234
// end ;
25041: GO 25026
25043: POP
25044: POP
// end ;
25045: PPOPN 2
25047: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25048: LD_EXP 62
25052: PUSH
25053: LD_EXP 72
25057: AND
25058: IFFALSE 25078
25060: GO 25062
25062: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25063: LD_INT 32
25065: PPUSH
25066: LD_OWVAR 2
25070: PPUSH
25071: LD_INT 0
25073: PPUSH
25074: CALL_OW 324
25078: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25079: LD_EXP 62
25083: PUSH
25084: LD_EXP 73
25088: AND
25089: IFFALSE 25270
25091: GO 25093
25093: DISABLE
25094: LD_INT 0
25096: PPUSH
25097: PPUSH
25098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25099: LD_ADDR_VAR 0 2
25103: PUSH
25104: LD_INT 22
25106: PUSH
25107: LD_OWVAR 2
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 33
25118: PUSH
25119: LD_INT 3
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PPUSH
25130: CALL_OW 69
25134: ST_TO_ADDR
// if not tmp then
25135: LD_VAR 0 2
25139: NOT
25140: IFFALSE 25144
// exit ;
25142: GO 25270
// side := 0 ;
25144: LD_ADDR_VAR 0 3
25148: PUSH
25149: LD_INT 0
25151: ST_TO_ADDR
// for i := 1 to 8 do
25152: LD_ADDR_VAR 0 1
25156: PUSH
25157: DOUBLE
25158: LD_INT 1
25160: DEC
25161: ST_TO_ADDR
25162: LD_INT 8
25164: PUSH
25165: FOR_TO
25166: IFFALSE 25214
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25168: LD_OWVAR 2
25172: PUSH
25173: LD_VAR 0 1
25177: NONEQUAL
25178: PUSH
25179: LD_OWVAR 2
25183: PPUSH
25184: LD_VAR 0 1
25188: PPUSH
25189: CALL_OW 81
25193: PUSH
25194: LD_INT 2
25196: EQUAL
25197: AND
25198: IFFALSE 25212
// begin side := i ;
25200: LD_ADDR_VAR 0 3
25204: PUSH
25205: LD_VAR 0 1
25209: ST_TO_ADDR
// break ;
25210: GO 25214
// end ;
25212: GO 25165
25214: POP
25215: POP
// if not side then
25216: LD_VAR 0 3
25220: NOT
25221: IFFALSE 25225
// exit ;
25223: GO 25270
// for i := 1 to tmp do
25225: LD_ADDR_VAR 0 1
25229: PUSH
25230: DOUBLE
25231: LD_INT 1
25233: DEC
25234: ST_TO_ADDR
25235: LD_VAR 0 2
25239: PUSH
25240: FOR_TO
25241: IFFALSE 25268
// if Prob ( 60 ) then
25243: LD_INT 60
25245: PPUSH
25246: CALL_OW 13
25250: IFFALSE 25266
// SetSide ( i , side ) ;
25252: LD_VAR 0 1
25256: PPUSH
25257: LD_VAR 0 3
25261: PPUSH
25262: CALL_OW 235
25266: GO 25240
25268: POP
25269: POP
// end ;
25270: PPOPN 3
25272: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25273: LD_EXP 62
25277: PUSH
25278: LD_EXP 75
25282: AND
25283: IFFALSE 25402
25285: GO 25287
25287: DISABLE
25288: LD_INT 0
25290: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25291: LD_ADDR_VAR 0 1
25295: PUSH
25296: LD_INT 22
25298: PUSH
25299: LD_OWVAR 2
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 21
25310: PUSH
25311: LD_INT 1
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 3
25320: PUSH
25321: LD_INT 23
25323: PUSH
25324: LD_INT 0
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: LIST
25339: PPUSH
25340: CALL_OW 69
25344: PUSH
25345: FOR_IN
25346: IFFALSE 25400
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25348: LD_VAR 0 1
25352: PPUSH
25353: CALL_OW 257
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: LD_INT 2
25363: PUSH
25364: LD_INT 3
25366: PUSH
25367: LD_INT 4
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: IN
25376: IFFALSE 25398
// SetClass ( un , rand ( 1 , 4 ) ) ;
25378: LD_VAR 0 1
25382: PPUSH
25383: LD_INT 1
25385: PPUSH
25386: LD_INT 4
25388: PPUSH
25389: CALL_OW 12
25393: PPUSH
25394: CALL_OW 336
25398: GO 25345
25400: POP
25401: POP
// end ;
25402: PPOPN 1
25404: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25405: LD_EXP 62
25409: PUSH
25410: LD_EXP 74
25414: AND
25415: IFFALSE 25494
25417: GO 25419
25419: DISABLE
25420: LD_INT 0
25422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25423: LD_ADDR_VAR 0 1
25427: PUSH
25428: LD_INT 22
25430: PUSH
25431: LD_OWVAR 2
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 21
25442: PUSH
25443: LD_INT 3
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PPUSH
25454: CALL_OW 69
25458: ST_TO_ADDR
// if not tmp then
25459: LD_VAR 0 1
25463: NOT
25464: IFFALSE 25468
// exit ;
25466: GO 25494
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25468: LD_VAR 0 1
25472: PUSH
25473: LD_INT 1
25475: PPUSH
25476: LD_VAR 0 1
25480: PPUSH
25481: CALL_OW 12
25485: ARRAY
25486: PPUSH
25487: LD_INT 100
25489: PPUSH
25490: CALL_OW 234
// end ;
25494: PPOPN 1
25496: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25497: LD_EXP 62
25501: PUSH
25502: LD_EXP 76
25506: AND
25507: IFFALSE 25605
25509: GO 25511
25511: DISABLE
25512: LD_INT 0
25514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25515: LD_ADDR_VAR 0 1
25519: PUSH
25520: LD_INT 22
25522: PUSH
25523: LD_OWVAR 2
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 21
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PPUSH
25546: CALL_OW 69
25550: ST_TO_ADDR
// if not tmp then
25551: LD_VAR 0 1
25555: NOT
25556: IFFALSE 25560
// exit ;
25558: GO 25605
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25560: LD_VAR 0 1
25564: PUSH
25565: LD_INT 1
25567: PPUSH
25568: LD_VAR 0 1
25572: PPUSH
25573: CALL_OW 12
25577: ARRAY
25578: PPUSH
25579: LD_INT 1
25581: PPUSH
25582: LD_INT 4
25584: PPUSH
25585: CALL_OW 12
25589: PPUSH
25590: LD_INT 3000
25592: PPUSH
25593: LD_INT 9000
25595: PPUSH
25596: CALL_OW 12
25600: PPUSH
25601: CALL_OW 492
// end ;
25605: PPOPN 1
25607: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25608: LD_EXP 62
25612: PUSH
25613: LD_EXP 77
25617: AND
25618: IFFALSE 25638
25620: GO 25622
25622: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25623: LD_INT 1
25625: PPUSH
25626: LD_OWVAR 2
25630: PPUSH
25631: LD_INT 0
25633: PPUSH
25634: CALL_OW 324
25638: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25639: LD_EXP 62
25643: PUSH
25644: LD_EXP 78
25648: AND
25649: IFFALSE 25732
25651: GO 25653
25653: DISABLE
25654: LD_INT 0
25656: PPUSH
25657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25658: LD_ADDR_VAR 0 2
25662: PUSH
25663: LD_INT 22
25665: PUSH
25666: LD_OWVAR 2
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 21
25677: PUSH
25678: LD_INT 3
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PPUSH
25689: CALL_OW 69
25693: ST_TO_ADDR
// if not tmp then
25694: LD_VAR 0 2
25698: NOT
25699: IFFALSE 25703
// exit ;
25701: GO 25732
// for i in tmp do
25703: LD_ADDR_VAR 0 1
25707: PUSH
25708: LD_VAR 0 2
25712: PUSH
25713: FOR_IN
25714: IFFALSE 25730
// SetBLevel ( i , 10 ) ;
25716: LD_VAR 0 1
25720: PPUSH
25721: LD_INT 10
25723: PPUSH
25724: CALL_OW 241
25728: GO 25713
25730: POP
25731: POP
// end ;
25732: PPOPN 2
25734: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25735: LD_EXP 62
25739: PUSH
25740: LD_EXP 79
25744: AND
25745: IFFALSE 25856
25747: GO 25749
25749: DISABLE
25750: LD_INT 0
25752: PPUSH
25753: PPUSH
25754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25755: LD_ADDR_VAR 0 3
25759: PUSH
25760: LD_INT 22
25762: PUSH
25763: LD_OWVAR 2
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 25
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PPUSH
25786: CALL_OW 69
25790: ST_TO_ADDR
// if not tmp then
25791: LD_VAR 0 3
25795: NOT
25796: IFFALSE 25800
// exit ;
25798: GO 25856
// un := tmp [ rand ( 1 , tmp ) ] ;
25800: LD_ADDR_VAR 0 2
25804: PUSH
25805: LD_VAR 0 3
25809: PUSH
25810: LD_INT 1
25812: PPUSH
25813: LD_VAR 0 3
25817: PPUSH
25818: CALL_OW 12
25822: ARRAY
25823: ST_TO_ADDR
// if Crawls ( un ) then
25824: LD_VAR 0 2
25828: PPUSH
25829: CALL_OW 318
25833: IFFALSE 25844
// ComWalk ( un ) ;
25835: LD_VAR 0 2
25839: PPUSH
25840: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25844: LD_VAR 0 2
25848: PPUSH
25849: LD_INT 5
25851: PPUSH
25852: CALL_OW 336
// end ;
25856: PPOPN 3
25858: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25859: LD_EXP 62
25863: PUSH
25864: LD_EXP 80
25868: AND
25869: PUSH
25870: LD_OWVAR 67
25874: PUSH
25875: LD_INT 4
25877: LESS
25878: AND
25879: IFFALSE 25898
25881: GO 25883
25883: DISABLE
// begin Difficulty := Difficulty + 1 ;
25884: LD_ADDR_OWVAR 67
25888: PUSH
25889: LD_OWVAR 67
25893: PUSH
25894: LD_INT 1
25896: PLUS
25897: ST_TO_ADDR
// end ;
25898: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25899: LD_EXP 62
25903: PUSH
25904: LD_EXP 81
25908: AND
25909: IFFALSE 26012
25911: GO 25913
25913: DISABLE
25914: LD_INT 0
25916: PPUSH
// begin for i := 1 to 5 do
25917: LD_ADDR_VAR 0 1
25921: PUSH
25922: DOUBLE
25923: LD_INT 1
25925: DEC
25926: ST_TO_ADDR
25927: LD_INT 5
25929: PUSH
25930: FOR_TO
25931: IFFALSE 26010
// begin uc_nation := nation_nature ;
25933: LD_ADDR_OWVAR 21
25937: PUSH
25938: LD_INT 0
25940: ST_TO_ADDR
// uc_side := 0 ;
25941: LD_ADDR_OWVAR 20
25945: PUSH
25946: LD_INT 0
25948: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25949: LD_ADDR_OWVAR 29
25953: PUSH
25954: LD_INT 12
25956: PUSH
25957: LD_INT 12
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: ST_TO_ADDR
// hc_agressivity := 20 ;
25964: LD_ADDR_OWVAR 35
25968: PUSH
25969: LD_INT 20
25971: ST_TO_ADDR
// hc_class := class_tiger ;
25972: LD_ADDR_OWVAR 28
25976: PUSH
25977: LD_INT 14
25979: ST_TO_ADDR
// hc_gallery :=  ;
25980: LD_ADDR_OWVAR 33
25984: PUSH
25985: LD_STRING 
25987: ST_TO_ADDR
// hc_name :=  ;
25988: LD_ADDR_OWVAR 26
25992: PUSH
25993: LD_STRING 
25995: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25996: CALL_OW 44
26000: PPUSH
26001: LD_INT 0
26003: PPUSH
26004: CALL_OW 51
// end ;
26008: GO 25930
26010: POP
26011: POP
// end ;
26012: PPOPN 1
26014: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26015: LD_EXP 62
26019: PUSH
26020: LD_EXP 82
26024: AND
26025: IFFALSE 26034
26027: GO 26029
26029: DISABLE
// StreamSibBomb ;
26030: CALL 26035 0 0
26034: END
// export function StreamSibBomb ; var i , x , y ; begin
26035: LD_INT 0
26037: PPUSH
26038: PPUSH
26039: PPUSH
26040: PPUSH
// result := false ;
26041: LD_ADDR_VAR 0 1
26045: PUSH
26046: LD_INT 0
26048: ST_TO_ADDR
// for i := 1 to 16 do
26049: LD_ADDR_VAR 0 2
26053: PUSH
26054: DOUBLE
26055: LD_INT 1
26057: DEC
26058: ST_TO_ADDR
26059: LD_INT 16
26061: PUSH
26062: FOR_TO
26063: IFFALSE 26262
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26065: LD_ADDR_VAR 0 3
26069: PUSH
26070: LD_INT 10
26072: PUSH
26073: LD_INT 20
26075: PUSH
26076: LD_INT 30
26078: PUSH
26079: LD_INT 40
26081: PUSH
26082: LD_INT 50
26084: PUSH
26085: LD_INT 60
26087: PUSH
26088: LD_INT 70
26090: PUSH
26091: LD_INT 80
26093: PUSH
26094: LD_INT 90
26096: PUSH
26097: LD_INT 100
26099: PUSH
26100: LD_INT 110
26102: PUSH
26103: LD_INT 120
26105: PUSH
26106: LD_INT 130
26108: PUSH
26109: LD_INT 140
26111: PUSH
26112: LD_INT 150
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: PPUSH
26135: LD_INT 15
26137: PPUSH
26138: CALL_OW 12
26142: ARRAY
26143: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26144: LD_ADDR_VAR 0 4
26148: PUSH
26149: LD_INT 10
26151: PUSH
26152: LD_INT 20
26154: PUSH
26155: LD_INT 30
26157: PUSH
26158: LD_INT 40
26160: PUSH
26161: LD_INT 50
26163: PUSH
26164: LD_INT 60
26166: PUSH
26167: LD_INT 70
26169: PUSH
26170: LD_INT 80
26172: PUSH
26173: LD_INT 90
26175: PUSH
26176: LD_INT 100
26178: PUSH
26179: LD_INT 110
26181: PUSH
26182: LD_INT 120
26184: PUSH
26185: LD_INT 130
26187: PUSH
26188: LD_INT 140
26190: PUSH
26191: LD_INT 150
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 1
26213: PPUSH
26214: LD_INT 15
26216: PPUSH
26217: CALL_OW 12
26221: ARRAY
26222: ST_TO_ADDR
// if ValidHex ( x , y ) then
26223: LD_VAR 0 3
26227: PPUSH
26228: LD_VAR 0 4
26232: PPUSH
26233: CALL_OW 488
26237: IFFALSE 26260
// begin result := [ x , y ] ;
26239: LD_ADDR_VAR 0 1
26243: PUSH
26244: LD_VAR 0 3
26248: PUSH
26249: LD_VAR 0 4
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: ST_TO_ADDR
// break ;
26258: GO 26262
// end ; end ;
26260: GO 26062
26262: POP
26263: POP
// if result then
26264: LD_VAR 0 1
26268: IFFALSE 26328
// begin ToLua ( playSibBomb() ) ;
26270: LD_STRING playSibBomb()
26272: PPUSH
26273: CALL_OW 559
// wait ( 0 0$14 ) ;
26277: LD_INT 490
26279: PPUSH
26280: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26284: LD_VAR 0 1
26288: PUSH
26289: LD_INT 1
26291: ARRAY
26292: PPUSH
26293: LD_VAR 0 1
26297: PUSH
26298: LD_INT 2
26300: ARRAY
26301: PPUSH
26302: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26306: LD_VAR 0 1
26310: PUSH
26311: LD_INT 1
26313: ARRAY
26314: PPUSH
26315: LD_VAR 0 1
26319: PUSH
26320: LD_INT 2
26322: ARRAY
26323: PPUSH
26324: CALL_OW 429
// end ; end ;
26328: LD_VAR 0 1
26332: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26333: LD_EXP 62
26337: PUSH
26338: LD_EXP 84
26342: AND
26343: IFFALSE 26355
26345: GO 26347
26347: DISABLE
// YouLost (  ) ;
26348: LD_STRING 
26350: PPUSH
26351: CALL_OW 104
26355: END
// every 0 0$1 trigger StreamModeActive and sFog do
26356: LD_EXP 62
26360: PUSH
26361: LD_EXP 83
26365: AND
26366: IFFALSE 26380
26368: GO 26370
26370: DISABLE
// FogOff ( your_side ) ;
26371: LD_OWVAR 2
26375: PPUSH
26376: CALL_OW 344
26380: END
// every 0 0$1 trigger StreamModeActive and sSun do
26381: LD_EXP 62
26385: PUSH
26386: LD_EXP 85
26390: AND
26391: IFFALSE 26419
26393: GO 26395
26395: DISABLE
// begin solar_recharge_percent := 0 ;
26396: LD_ADDR_OWVAR 79
26400: PUSH
26401: LD_INT 0
26403: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26404: LD_INT 10500
26406: PPUSH
26407: CALL_OW 67
// solar_recharge_percent := 100 ;
26411: LD_ADDR_OWVAR 79
26415: PUSH
26416: LD_INT 100
26418: ST_TO_ADDR
// end ;
26419: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26420: LD_EXP 62
26424: PUSH
26425: LD_EXP 86
26429: AND
26430: IFFALSE 26669
26432: GO 26434
26434: DISABLE
26435: LD_INT 0
26437: PPUSH
26438: PPUSH
26439: PPUSH
// begin tmp := [ ] ;
26440: LD_ADDR_VAR 0 3
26444: PUSH
26445: EMPTY
26446: ST_TO_ADDR
// for i := 1 to 6 do
26447: LD_ADDR_VAR 0 1
26451: PUSH
26452: DOUBLE
26453: LD_INT 1
26455: DEC
26456: ST_TO_ADDR
26457: LD_INT 6
26459: PUSH
26460: FOR_TO
26461: IFFALSE 26566
// begin uc_nation := nation_nature ;
26463: LD_ADDR_OWVAR 21
26467: PUSH
26468: LD_INT 0
26470: ST_TO_ADDR
// uc_side := 0 ;
26471: LD_ADDR_OWVAR 20
26475: PUSH
26476: LD_INT 0
26478: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26479: LD_ADDR_OWVAR 29
26483: PUSH
26484: LD_INT 12
26486: PUSH
26487: LD_INT 12
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: ST_TO_ADDR
// hc_agressivity := 20 ;
26494: LD_ADDR_OWVAR 35
26498: PUSH
26499: LD_INT 20
26501: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26502: LD_ADDR_OWVAR 28
26506: PUSH
26507: LD_INT 17
26509: ST_TO_ADDR
// hc_gallery :=  ;
26510: LD_ADDR_OWVAR 33
26514: PUSH
26515: LD_STRING 
26517: ST_TO_ADDR
// hc_name :=  ;
26518: LD_ADDR_OWVAR 26
26522: PUSH
26523: LD_STRING 
26525: ST_TO_ADDR
// un := CreateHuman ;
26526: LD_ADDR_VAR 0 2
26530: PUSH
26531: CALL_OW 44
26535: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26536: LD_VAR 0 2
26540: PPUSH
26541: LD_INT 1
26543: PPUSH
26544: CALL_OW 51
// tmp := tmp ^ un ;
26548: LD_ADDR_VAR 0 3
26552: PUSH
26553: LD_VAR 0 3
26557: PUSH
26558: LD_VAR 0 2
26562: ADD
26563: ST_TO_ADDR
// end ;
26564: GO 26460
26566: POP
26567: POP
// repeat wait ( 0 0$1 ) ;
26568: LD_INT 35
26570: PPUSH
26571: CALL_OW 67
// for un in tmp do
26575: LD_ADDR_VAR 0 2
26579: PUSH
26580: LD_VAR 0 3
26584: PUSH
26585: FOR_IN
26586: IFFALSE 26660
// begin if IsDead ( un ) then
26588: LD_VAR 0 2
26592: PPUSH
26593: CALL_OW 301
26597: IFFALSE 26617
// begin tmp := tmp diff un ;
26599: LD_ADDR_VAR 0 3
26603: PUSH
26604: LD_VAR 0 3
26608: PUSH
26609: LD_VAR 0 2
26613: DIFF
26614: ST_TO_ADDR
// continue ;
26615: GO 26585
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26617: LD_VAR 0 2
26621: PPUSH
26622: LD_INT 3
26624: PUSH
26625: LD_INT 22
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PPUSH
26639: CALL_OW 69
26643: PPUSH
26644: LD_VAR 0 2
26648: PPUSH
26649: CALL_OW 74
26653: PPUSH
26654: CALL_OW 115
// end ;
26658: GO 26585
26660: POP
26661: POP
// until not tmp ;
26662: LD_VAR 0 3
26666: NOT
26667: IFFALSE 26568
// end ;
26669: PPOPN 3
26671: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26672: LD_EXP 62
26676: PUSH
26677: LD_EXP 87
26681: AND
26682: IFFALSE 26736
26684: GO 26686
26686: DISABLE
// begin ToLua ( displayTroll(); ) ;
26687: LD_STRING displayTroll();
26689: PPUSH
26690: CALL_OW 559
// wait ( 3 3$00 ) ;
26694: LD_INT 6300
26696: PPUSH
26697: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26701: LD_STRING hideTroll();
26703: PPUSH
26704: CALL_OW 559
// wait ( 1 1$00 ) ;
26708: LD_INT 2100
26710: PPUSH
26711: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26715: LD_STRING displayTroll();
26717: PPUSH
26718: CALL_OW 559
// wait ( 1 1$00 ) ;
26722: LD_INT 2100
26724: PPUSH
26725: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26729: LD_STRING hideTroll();
26731: PPUSH
26732: CALL_OW 559
// end ;
26736: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26737: LD_EXP 62
26741: PUSH
26742: LD_EXP 88
26746: AND
26747: IFFALSE 26810
26749: GO 26751
26751: DISABLE
26752: LD_INT 0
26754: PPUSH
// begin p := 0 ;
26755: LD_ADDR_VAR 0 1
26759: PUSH
26760: LD_INT 0
26762: ST_TO_ADDR
// repeat game_speed := 1 ;
26763: LD_ADDR_OWVAR 65
26767: PUSH
26768: LD_INT 1
26770: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26771: LD_INT 35
26773: PPUSH
26774: CALL_OW 67
// p := p + 1 ;
26778: LD_ADDR_VAR 0 1
26782: PUSH
26783: LD_VAR 0 1
26787: PUSH
26788: LD_INT 1
26790: PLUS
26791: ST_TO_ADDR
// until p >= 60 ;
26792: LD_VAR 0 1
26796: PUSH
26797: LD_INT 60
26799: GREATEREQUAL
26800: IFFALSE 26763
// game_speed := 4 ;
26802: LD_ADDR_OWVAR 65
26806: PUSH
26807: LD_INT 4
26809: ST_TO_ADDR
// end ;
26810: PPOPN 1
26812: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26813: LD_EXP 62
26817: PUSH
26818: LD_EXP 89
26822: AND
26823: IFFALSE 26969
26825: GO 26827
26827: DISABLE
26828: LD_INT 0
26830: PPUSH
26831: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26832: LD_ADDR_VAR 0 1
26836: PUSH
26837: LD_INT 22
26839: PUSH
26840: LD_OWVAR 2
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 2
26851: PUSH
26852: LD_INT 30
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 30
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: LIST
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PPUSH
26881: CALL_OW 69
26885: ST_TO_ADDR
// if not depot then
26886: LD_VAR 0 1
26890: NOT
26891: IFFALSE 26895
// exit ;
26893: GO 26969
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26895: LD_ADDR_VAR 0 2
26899: PUSH
26900: LD_VAR 0 1
26904: PUSH
26905: LD_INT 1
26907: PPUSH
26908: LD_VAR 0 1
26912: PPUSH
26913: CALL_OW 12
26917: ARRAY
26918: PPUSH
26919: CALL_OW 274
26923: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26924: LD_VAR 0 2
26928: PPUSH
26929: LD_INT 1
26931: PPUSH
26932: LD_INT 0
26934: PPUSH
26935: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26939: LD_VAR 0 2
26943: PPUSH
26944: LD_INT 2
26946: PPUSH
26947: LD_INT 0
26949: PPUSH
26950: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26954: LD_VAR 0 2
26958: PPUSH
26959: LD_INT 3
26961: PPUSH
26962: LD_INT 0
26964: PPUSH
26965: CALL_OW 277
// end ;
26969: PPOPN 2
26971: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26972: LD_EXP 62
26976: PUSH
26977: LD_EXP 90
26981: AND
26982: IFFALSE 27079
26984: GO 26986
26986: DISABLE
26987: LD_INT 0
26989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26990: LD_ADDR_VAR 0 1
26994: PUSH
26995: LD_INT 22
26997: PUSH
26998: LD_OWVAR 2
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 21
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 3
27019: PUSH
27020: LD_INT 23
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: LIST
27038: PPUSH
27039: CALL_OW 69
27043: ST_TO_ADDR
// if not tmp then
27044: LD_VAR 0 1
27048: NOT
27049: IFFALSE 27053
// exit ;
27051: GO 27079
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27053: LD_VAR 0 1
27057: PUSH
27058: LD_INT 1
27060: PPUSH
27061: LD_VAR 0 1
27065: PPUSH
27066: CALL_OW 12
27070: ARRAY
27071: PPUSH
27072: LD_INT 200
27074: PPUSH
27075: CALL_OW 234
// end ;
27079: PPOPN 1
27081: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27082: LD_EXP 62
27086: PUSH
27087: LD_EXP 91
27091: AND
27092: IFFALSE 27171
27094: GO 27096
27096: DISABLE
27097: LD_INT 0
27099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27100: LD_ADDR_VAR 0 1
27104: PUSH
27105: LD_INT 22
27107: PUSH
27108: LD_OWVAR 2
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 21
27119: PUSH
27120: LD_INT 2
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PPUSH
27131: CALL_OW 69
27135: ST_TO_ADDR
// if not tmp then
27136: LD_VAR 0 1
27140: NOT
27141: IFFALSE 27145
// exit ;
27143: GO 27171
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27145: LD_VAR 0 1
27149: PUSH
27150: LD_INT 1
27152: PPUSH
27153: LD_VAR 0 1
27157: PPUSH
27158: CALL_OW 12
27162: ARRAY
27163: PPUSH
27164: LD_INT 60
27166: PPUSH
27167: CALL_OW 234
// end ;
27171: PPOPN 1
27173: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27174: LD_EXP 62
27178: PUSH
27179: LD_EXP 92
27183: AND
27184: IFFALSE 27283
27186: GO 27188
27188: DISABLE
27189: LD_INT 0
27191: PPUSH
27192: PPUSH
// begin enable ;
27193: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27194: LD_ADDR_VAR 0 1
27198: PUSH
27199: LD_INT 22
27201: PUSH
27202: LD_OWVAR 2
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 61
27213: PUSH
27214: EMPTY
27215: LIST
27216: PUSH
27217: LD_INT 33
27219: PUSH
27220: LD_INT 2
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: PPUSH
27232: CALL_OW 69
27236: ST_TO_ADDR
// if not tmp then
27237: LD_VAR 0 1
27241: NOT
27242: IFFALSE 27246
// exit ;
27244: GO 27283
// for i in tmp do
27246: LD_ADDR_VAR 0 2
27250: PUSH
27251: LD_VAR 0 1
27255: PUSH
27256: FOR_IN
27257: IFFALSE 27281
// if IsControledBy ( i ) then
27259: LD_VAR 0 2
27263: PPUSH
27264: CALL_OW 312
27268: IFFALSE 27279
// ComUnlink ( i ) ;
27270: LD_VAR 0 2
27274: PPUSH
27275: CALL_OW 136
27279: GO 27256
27281: POP
27282: POP
// end ;
27283: PPOPN 2
27285: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27286: LD_EXP 62
27290: PUSH
27291: LD_EXP 93
27295: AND
27296: IFFALSE 27436
27298: GO 27300
27300: DISABLE
27301: LD_INT 0
27303: PPUSH
27304: PPUSH
// begin ToLua ( displayPowell(); ) ;
27305: LD_STRING displayPowell();
27307: PPUSH
27308: CALL_OW 559
// uc_side := 0 ;
27312: LD_ADDR_OWVAR 20
27316: PUSH
27317: LD_INT 0
27319: ST_TO_ADDR
// uc_nation := 2 ;
27320: LD_ADDR_OWVAR 21
27324: PUSH
27325: LD_INT 2
27327: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27328: LD_ADDR_OWVAR 37
27332: PUSH
27333: LD_INT 14
27335: ST_TO_ADDR
// vc_engine := engine_siberite ;
27336: LD_ADDR_OWVAR 39
27340: PUSH
27341: LD_INT 3
27343: ST_TO_ADDR
// vc_control := control_apeman ;
27344: LD_ADDR_OWVAR 38
27348: PUSH
27349: LD_INT 5
27351: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27352: LD_ADDR_OWVAR 40
27356: PUSH
27357: LD_INT 29
27359: ST_TO_ADDR
// un := CreateVehicle ;
27360: LD_ADDR_VAR 0 2
27364: PUSH
27365: CALL_OW 45
27369: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27370: LD_VAR 0 2
27374: PPUSH
27375: LD_INT 1
27377: PPUSH
27378: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27382: LD_INT 35
27384: PPUSH
27385: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27389: LD_VAR 0 2
27393: PPUSH
27394: LD_INT 22
27396: PUSH
27397: LD_OWVAR 2
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PPUSH
27406: CALL_OW 69
27410: PPUSH
27411: LD_VAR 0 2
27415: PPUSH
27416: CALL_OW 74
27420: PPUSH
27421: CALL_OW 115
// until IsDead ( un ) ;
27425: LD_VAR 0 2
27429: PPUSH
27430: CALL_OW 301
27434: IFFALSE 27382
// end ;
27436: PPOPN 2
27438: END
// every 0 0$1 trigger StreamModeActive and sStu do
27439: LD_EXP 62
27443: PUSH
27444: LD_EXP 101
27448: AND
27449: IFFALSE 27465
27451: GO 27453
27453: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27454: LD_STRING displayStucuk();
27456: PPUSH
27457: CALL_OW 559
// ResetFog ;
27461: CALL_OW 335
// end ;
27465: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27466: LD_EXP 62
27470: PUSH
27471: LD_EXP 94
27475: AND
27476: IFFALSE 27617
27478: GO 27480
27480: DISABLE
27481: LD_INT 0
27483: PPUSH
27484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27485: LD_ADDR_VAR 0 2
27489: PUSH
27490: LD_INT 22
27492: PUSH
27493: LD_OWVAR 2
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 21
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PPUSH
27516: CALL_OW 69
27520: ST_TO_ADDR
// if not tmp then
27521: LD_VAR 0 2
27525: NOT
27526: IFFALSE 27530
// exit ;
27528: GO 27617
// un := tmp [ rand ( 1 , tmp ) ] ;
27530: LD_ADDR_VAR 0 1
27534: PUSH
27535: LD_VAR 0 2
27539: PUSH
27540: LD_INT 1
27542: PPUSH
27543: LD_VAR 0 2
27547: PPUSH
27548: CALL_OW 12
27552: ARRAY
27553: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27554: LD_VAR 0 1
27558: PPUSH
27559: LD_INT 0
27561: PPUSH
27562: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27566: LD_VAR 0 1
27570: PPUSH
27571: LD_OWVAR 3
27575: PUSH
27576: LD_VAR 0 1
27580: DIFF
27581: PPUSH
27582: LD_VAR 0 1
27586: PPUSH
27587: CALL_OW 74
27591: PPUSH
27592: CALL_OW 115
// wait ( 0 0$20 ) ;
27596: LD_INT 700
27598: PPUSH
27599: CALL_OW 67
// SetSide ( un , your_side ) ;
27603: LD_VAR 0 1
27607: PPUSH
27608: LD_OWVAR 2
27612: PPUSH
27613: CALL_OW 235
// end ;
27617: PPOPN 2
27619: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27620: LD_EXP 62
27624: PUSH
27625: LD_EXP 95
27629: AND
27630: IFFALSE 27736
27632: GO 27634
27634: DISABLE
27635: LD_INT 0
27637: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27638: LD_ADDR_VAR 0 1
27642: PUSH
27643: LD_INT 22
27645: PUSH
27646: LD_OWVAR 2
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: LD_INT 30
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 30
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: LIST
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PPUSH
27687: CALL_OW 69
27691: ST_TO_ADDR
// if not depot then
27692: LD_VAR 0 1
27696: NOT
27697: IFFALSE 27701
// exit ;
27699: GO 27736
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27701: LD_VAR 0 1
27705: PUSH
27706: LD_INT 1
27708: ARRAY
27709: PPUSH
27710: CALL_OW 250
27714: PPUSH
27715: LD_VAR 0 1
27719: PUSH
27720: LD_INT 1
27722: ARRAY
27723: PPUSH
27724: CALL_OW 251
27728: PPUSH
27729: LD_INT 70
27731: PPUSH
27732: CALL_OW 495
// end ;
27736: PPOPN 1
27738: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27739: LD_EXP 62
27743: PUSH
27744: LD_EXP 96
27748: AND
27749: IFFALSE 27960
27751: GO 27753
27753: DISABLE
27754: LD_INT 0
27756: PPUSH
27757: PPUSH
27758: PPUSH
27759: PPUSH
27760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27761: LD_ADDR_VAR 0 5
27765: PUSH
27766: LD_INT 22
27768: PUSH
27769: LD_OWVAR 2
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 21
27780: PUSH
27781: LD_INT 1
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PPUSH
27792: CALL_OW 69
27796: ST_TO_ADDR
// if not tmp then
27797: LD_VAR 0 5
27801: NOT
27802: IFFALSE 27806
// exit ;
27804: GO 27960
// for i in tmp do
27806: LD_ADDR_VAR 0 1
27810: PUSH
27811: LD_VAR 0 5
27815: PUSH
27816: FOR_IN
27817: IFFALSE 27958
// begin d := rand ( 0 , 5 ) ;
27819: LD_ADDR_VAR 0 4
27823: PUSH
27824: LD_INT 0
27826: PPUSH
27827: LD_INT 5
27829: PPUSH
27830: CALL_OW 12
27834: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27835: LD_ADDR_VAR 0 2
27839: PUSH
27840: LD_VAR 0 1
27844: PPUSH
27845: CALL_OW 250
27849: PPUSH
27850: LD_VAR 0 4
27854: PPUSH
27855: LD_INT 3
27857: PPUSH
27858: LD_INT 12
27860: PPUSH
27861: CALL_OW 12
27865: PPUSH
27866: CALL_OW 272
27870: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27871: LD_ADDR_VAR 0 3
27875: PUSH
27876: LD_VAR 0 1
27880: PPUSH
27881: CALL_OW 251
27885: PPUSH
27886: LD_VAR 0 4
27890: PPUSH
27891: LD_INT 3
27893: PPUSH
27894: LD_INT 12
27896: PPUSH
27897: CALL_OW 12
27901: PPUSH
27902: CALL_OW 273
27906: ST_TO_ADDR
// if ValidHex ( x , y ) then
27907: LD_VAR 0 2
27911: PPUSH
27912: LD_VAR 0 3
27916: PPUSH
27917: CALL_OW 488
27921: IFFALSE 27956
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27923: LD_VAR 0 1
27927: PPUSH
27928: LD_VAR 0 2
27932: PPUSH
27933: LD_VAR 0 3
27937: PPUSH
27938: LD_INT 3
27940: PPUSH
27941: LD_INT 6
27943: PPUSH
27944: CALL_OW 12
27948: PPUSH
27949: LD_INT 1
27951: PPUSH
27952: CALL_OW 483
// end ;
27956: GO 27816
27958: POP
27959: POP
// end ;
27960: PPOPN 5
27962: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27963: LD_EXP 62
27967: PUSH
27968: LD_EXP 97
27972: AND
27973: IFFALSE 28067
27975: GO 27977
27977: DISABLE
27978: LD_INT 0
27980: PPUSH
27981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27982: LD_ADDR_VAR 0 2
27986: PUSH
27987: LD_INT 22
27989: PUSH
27990: LD_OWVAR 2
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 32
28001: PUSH
28002: LD_INT 1
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 21
28011: PUSH
28012: LD_INT 2
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: LIST
28023: PPUSH
28024: CALL_OW 69
28028: ST_TO_ADDR
// if not tmp then
28029: LD_VAR 0 2
28033: NOT
28034: IFFALSE 28038
// exit ;
28036: GO 28067
// for i in tmp do
28038: LD_ADDR_VAR 0 1
28042: PUSH
28043: LD_VAR 0 2
28047: PUSH
28048: FOR_IN
28049: IFFALSE 28065
// SetFuel ( i , 0 ) ;
28051: LD_VAR 0 1
28055: PPUSH
28056: LD_INT 0
28058: PPUSH
28059: CALL_OW 240
28063: GO 28048
28065: POP
28066: POP
// end ;
28067: PPOPN 2
28069: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28070: LD_EXP 62
28074: PUSH
28075: LD_EXP 98
28079: AND
28080: IFFALSE 28146
28082: GO 28084
28084: DISABLE
28085: LD_INT 0
28087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28088: LD_ADDR_VAR 0 1
28092: PUSH
28093: LD_INT 22
28095: PUSH
28096: LD_OWVAR 2
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 30
28107: PUSH
28108: LD_INT 29
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PPUSH
28119: CALL_OW 69
28123: ST_TO_ADDR
// if not tmp then
28124: LD_VAR 0 1
28128: NOT
28129: IFFALSE 28133
// exit ;
28131: GO 28146
// DestroyUnit ( tmp [ 1 ] ) ;
28133: LD_VAR 0 1
28137: PUSH
28138: LD_INT 1
28140: ARRAY
28141: PPUSH
28142: CALL_OW 65
// end ;
28146: PPOPN 1
28148: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28149: LD_EXP 62
28153: PUSH
28154: LD_EXP 100
28158: AND
28159: IFFALSE 28288
28161: GO 28163
28163: DISABLE
28164: LD_INT 0
28166: PPUSH
// begin uc_side := 0 ;
28167: LD_ADDR_OWVAR 20
28171: PUSH
28172: LD_INT 0
28174: ST_TO_ADDR
// uc_nation := nation_arabian ;
28175: LD_ADDR_OWVAR 21
28179: PUSH
28180: LD_INT 2
28182: ST_TO_ADDR
// hc_gallery :=  ;
28183: LD_ADDR_OWVAR 33
28187: PUSH
28188: LD_STRING 
28190: ST_TO_ADDR
// hc_name :=  ;
28191: LD_ADDR_OWVAR 26
28195: PUSH
28196: LD_STRING 
28198: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28199: LD_INT 1
28201: PPUSH
28202: LD_INT 11
28204: PPUSH
28205: LD_INT 10
28207: PPUSH
28208: CALL_OW 380
// un := CreateHuman ;
28212: LD_ADDR_VAR 0 1
28216: PUSH
28217: CALL_OW 44
28221: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28222: LD_VAR 0 1
28226: PPUSH
28227: LD_INT 1
28229: PPUSH
28230: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28234: LD_INT 35
28236: PPUSH
28237: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28241: LD_VAR 0 1
28245: PPUSH
28246: LD_INT 22
28248: PUSH
28249: LD_OWVAR 2
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PPUSH
28258: CALL_OW 69
28262: PPUSH
28263: LD_VAR 0 1
28267: PPUSH
28268: CALL_OW 74
28272: PPUSH
28273: CALL_OW 115
// until IsDead ( un ) ;
28277: LD_VAR 0 1
28281: PPUSH
28282: CALL_OW 301
28286: IFFALSE 28234
// end ;
28288: PPOPN 1
28290: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28291: LD_EXP 62
28295: PUSH
28296: LD_EXP 102
28300: AND
28301: IFFALSE 28313
28303: GO 28305
28305: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28306: LD_STRING earthquake(getX(game), 0, 32)
28308: PPUSH
28309: CALL_OW 559
28313: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28314: LD_EXP 62
28318: PUSH
28319: LD_EXP 103
28323: AND
28324: IFFALSE 28415
28326: GO 28328
28328: DISABLE
28329: LD_INT 0
28331: PPUSH
// begin enable ;
28332: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28333: LD_ADDR_VAR 0 1
28337: PUSH
28338: LD_INT 22
28340: PUSH
28341: LD_OWVAR 2
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 21
28352: PUSH
28353: LD_INT 2
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 33
28362: PUSH
28363: LD_INT 3
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: LIST
28374: PPUSH
28375: CALL_OW 69
28379: ST_TO_ADDR
// if not tmp then
28380: LD_VAR 0 1
28384: NOT
28385: IFFALSE 28389
// exit ;
28387: GO 28415
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28389: LD_VAR 0 1
28393: PUSH
28394: LD_INT 1
28396: PPUSH
28397: LD_VAR 0 1
28401: PPUSH
28402: CALL_OW 12
28406: ARRAY
28407: PPUSH
28408: LD_INT 1
28410: PPUSH
28411: CALL_OW 234
// end ;
28415: PPOPN 1
28417: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28418: LD_EXP 62
28422: PUSH
28423: LD_EXP 104
28427: AND
28428: IFFALSE 28569
28430: GO 28432
28432: DISABLE
28433: LD_INT 0
28435: PPUSH
28436: PPUSH
28437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28438: LD_ADDR_VAR 0 3
28442: PUSH
28443: LD_INT 22
28445: PUSH
28446: LD_OWVAR 2
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 25
28457: PUSH
28458: LD_INT 1
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PPUSH
28469: CALL_OW 69
28473: ST_TO_ADDR
// if not tmp then
28474: LD_VAR 0 3
28478: NOT
28479: IFFALSE 28483
// exit ;
28481: GO 28569
// un := tmp [ rand ( 1 , tmp ) ] ;
28483: LD_ADDR_VAR 0 2
28487: PUSH
28488: LD_VAR 0 3
28492: PUSH
28493: LD_INT 1
28495: PPUSH
28496: LD_VAR 0 3
28500: PPUSH
28501: CALL_OW 12
28505: ARRAY
28506: ST_TO_ADDR
// if Crawls ( un ) then
28507: LD_VAR 0 2
28511: PPUSH
28512: CALL_OW 318
28516: IFFALSE 28527
// ComWalk ( un ) ;
28518: LD_VAR 0 2
28522: PPUSH
28523: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28527: LD_VAR 0 2
28531: PPUSH
28532: LD_INT 9
28534: PPUSH
28535: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28539: LD_INT 28
28541: PPUSH
28542: LD_OWVAR 2
28546: PPUSH
28547: LD_INT 2
28549: PPUSH
28550: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28554: LD_INT 29
28556: PPUSH
28557: LD_OWVAR 2
28561: PPUSH
28562: LD_INT 2
28564: PPUSH
28565: CALL_OW 322
// end ;
28569: PPOPN 3
28571: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28572: LD_EXP 62
28576: PUSH
28577: LD_EXP 105
28581: AND
28582: IFFALSE 28693
28584: GO 28586
28586: DISABLE
28587: LD_INT 0
28589: PPUSH
28590: PPUSH
28591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28592: LD_ADDR_VAR 0 3
28596: PUSH
28597: LD_INT 22
28599: PUSH
28600: LD_OWVAR 2
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 25
28611: PUSH
28612: LD_INT 1
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PPUSH
28623: CALL_OW 69
28627: ST_TO_ADDR
// if not tmp then
28628: LD_VAR 0 3
28632: NOT
28633: IFFALSE 28637
// exit ;
28635: GO 28693
// un := tmp [ rand ( 1 , tmp ) ] ;
28637: LD_ADDR_VAR 0 2
28641: PUSH
28642: LD_VAR 0 3
28646: PUSH
28647: LD_INT 1
28649: PPUSH
28650: LD_VAR 0 3
28654: PPUSH
28655: CALL_OW 12
28659: ARRAY
28660: ST_TO_ADDR
// if Crawls ( un ) then
28661: LD_VAR 0 2
28665: PPUSH
28666: CALL_OW 318
28670: IFFALSE 28681
// ComWalk ( un ) ;
28672: LD_VAR 0 2
28676: PPUSH
28677: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28681: LD_VAR 0 2
28685: PPUSH
28686: LD_INT 8
28688: PPUSH
28689: CALL_OW 336
// end ;
28693: PPOPN 3
28695: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28696: LD_EXP 62
28700: PUSH
28701: LD_EXP 106
28705: AND
28706: IFFALSE 28850
28708: GO 28710
28710: DISABLE
28711: LD_INT 0
28713: PPUSH
28714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28715: LD_ADDR_VAR 0 2
28719: PUSH
28720: LD_INT 22
28722: PUSH
28723: LD_OWVAR 2
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 21
28734: PUSH
28735: LD_INT 2
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 2
28744: PUSH
28745: LD_INT 34
28747: PUSH
28748: LD_INT 12
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 34
28757: PUSH
28758: LD_INT 51
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 34
28767: PUSH
28768: LD_INT 32
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: LIST
28785: PPUSH
28786: CALL_OW 69
28790: ST_TO_ADDR
// if not tmp then
28791: LD_VAR 0 2
28795: NOT
28796: IFFALSE 28800
// exit ;
28798: GO 28850
// for i in tmp do
28800: LD_ADDR_VAR 0 1
28804: PUSH
28805: LD_VAR 0 2
28809: PUSH
28810: FOR_IN
28811: IFFALSE 28848
// if GetCargo ( i , mat_artifact ) = 0 then
28813: LD_VAR 0 1
28817: PPUSH
28818: LD_INT 4
28820: PPUSH
28821: CALL_OW 289
28825: PUSH
28826: LD_INT 0
28828: EQUAL
28829: IFFALSE 28846
// SetCargo ( i , mat_siberit , 100 ) ;
28831: LD_VAR 0 1
28835: PPUSH
28836: LD_INT 3
28838: PPUSH
28839: LD_INT 100
28841: PPUSH
28842: CALL_OW 290
28846: GO 28810
28848: POP
28849: POP
// end ;
28850: PPOPN 2
28852: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28853: LD_EXP 62
28857: PUSH
28858: LD_EXP 107
28862: AND
28863: IFFALSE 29046
28865: GO 28867
28867: DISABLE
28868: LD_INT 0
28870: PPUSH
28871: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28872: LD_ADDR_VAR 0 2
28876: PUSH
28877: LD_INT 22
28879: PUSH
28880: LD_OWVAR 2
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PPUSH
28889: CALL_OW 69
28893: ST_TO_ADDR
// if not tmp then
28894: LD_VAR 0 2
28898: NOT
28899: IFFALSE 28903
// exit ;
28901: GO 29046
// for i := 1 to 2 do
28903: LD_ADDR_VAR 0 1
28907: PUSH
28908: DOUBLE
28909: LD_INT 1
28911: DEC
28912: ST_TO_ADDR
28913: LD_INT 2
28915: PUSH
28916: FOR_TO
28917: IFFALSE 29044
// begin uc_side := your_side ;
28919: LD_ADDR_OWVAR 20
28923: PUSH
28924: LD_OWVAR 2
28928: ST_TO_ADDR
// uc_nation := nation_american ;
28929: LD_ADDR_OWVAR 21
28933: PUSH
28934: LD_INT 1
28936: ST_TO_ADDR
// vc_chassis := us_morphling ;
28937: LD_ADDR_OWVAR 37
28941: PUSH
28942: LD_INT 5
28944: ST_TO_ADDR
// vc_engine := engine_siberite ;
28945: LD_ADDR_OWVAR 39
28949: PUSH
28950: LD_INT 3
28952: ST_TO_ADDR
// vc_control := control_computer ;
28953: LD_ADDR_OWVAR 38
28957: PUSH
28958: LD_INT 3
28960: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28961: LD_ADDR_OWVAR 40
28965: PUSH
28966: LD_INT 10
28968: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28969: LD_VAR 0 2
28973: PUSH
28974: LD_INT 1
28976: ARRAY
28977: PPUSH
28978: CALL_OW 310
28982: NOT
28983: IFFALSE 29030
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28985: CALL_OW 45
28989: PPUSH
28990: LD_VAR 0 2
28994: PUSH
28995: LD_INT 1
28997: ARRAY
28998: PPUSH
28999: CALL_OW 250
29003: PPUSH
29004: LD_VAR 0 2
29008: PUSH
29009: LD_INT 1
29011: ARRAY
29012: PPUSH
29013: CALL_OW 251
29017: PPUSH
29018: LD_INT 12
29020: PPUSH
29021: LD_INT 1
29023: PPUSH
29024: CALL_OW 50
29028: GO 29042
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29030: CALL_OW 45
29034: PPUSH
29035: LD_INT 1
29037: PPUSH
29038: CALL_OW 51
// end ;
29042: GO 28916
29044: POP
29045: POP
// end ;
29046: PPOPN 2
29048: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29049: LD_EXP 62
29053: PUSH
29054: LD_EXP 108
29058: AND
29059: IFFALSE 29281
29061: GO 29063
29063: DISABLE
29064: LD_INT 0
29066: PPUSH
29067: PPUSH
29068: PPUSH
29069: PPUSH
29070: PPUSH
29071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29072: LD_ADDR_VAR 0 6
29076: PUSH
29077: LD_INT 22
29079: PUSH
29080: LD_OWVAR 2
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 21
29091: PUSH
29092: LD_INT 1
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 3
29101: PUSH
29102: LD_INT 23
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: PPUSH
29121: CALL_OW 69
29125: ST_TO_ADDR
// if not tmp then
29126: LD_VAR 0 6
29130: NOT
29131: IFFALSE 29135
// exit ;
29133: GO 29281
// s1 := rand ( 1 , 4 ) ;
29135: LD_ADDR_VAR 0 2
29139: PUSH
29140: LD_INT 1
29142: PPUSH
29143: LD_INT 4
29145: PPUSH
29146: CALL_OW 12
29150: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29151: LD_ADDR_VAR 0 4
29155: PUSH
29156: LD_VAR 0 6
29160: PUSH
29161: LD_INT 1
29163: ARRAY
29164: PPUSH
29165: LD_VAR 0 2
29169: PPUSH
29170: CALL_OW 259
29174: ST_TO_ADDR
// if s1 = 1 then
29175: LD_VAR 0 2
29179: PUSH
29180: LD_INT 1
29182: EQUAL
29183: IFFALSE 29203
// s2 := rand ( 2 , 4 ) else
29185: LD_ADDR_VAR 0 3
29189: PUSH
29190: LD_INT 2
29192: PPUSH
29193: LD_INT 4
29195: PPUSH
29196: CALL_OW 12
29200: ST_TO_ADDR
29201: GO 29211
// s2 := 1 ;
29203: LD_ADDR_VAR 0 3
29207: PUSH
29208: LD_INT 1
29210: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29211: LD_ADDR_VAR 0 5
29215: PUSH
29216: LD_VAR 0 6
29220: PUSH
29221: LD_INT 1
29223: ARRAY
29224: PPUSH
29225: LD_VAR 0 3
29229: PPUSH
29230: CALL_OW 259
29234: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29235: LD_VAR 0 6
29239: PUSH
29240: LD_INT 1
29242: ARRAY
29243: PPUSH
29244: LD_VAR 0 2
29248: PPUSH
29249: LD_VAR 0 5
29253: PPUSH
29254: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29258: LD_VAR 0 6
29262: PUSH
29263: LD_INT 1
29265: ARRAY
29266: PPUSH
29267: LD_VAR 0 3
29271: PPUSH
29272: LD_VAR 0 4
29276: PPUSH
29277: CALL_OW 237
// end ;
29281: PPOPN 6
29283: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29284: LD_EXP 62
29288: PUSH
29289: LD_EXP 109
29293: AND
29294: IFFALSE 29373
29296: GO 29298
29298: DISABLE
29299: LD_INT 0
29301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29302: LD_ADDR_VAR 0 1
29306: PUSH
29307: LD_INT 22
29309: PUSH
29310: LD_OWVAR 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 30
29321: PUSH
29322: LD_INT 3
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PPUSH
29333: CALL_OW 69
29337: ST_TO_ADDR
// if not tmp then
29338: LD_VAR 0 1
29342: NOT
29343: IFFALSE 29347
// exit ;
29345: GO 29373
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29347: LD_VAR 0 1
29351: PUSH
29352: LD_INT 1
29354: PPUSH
29355: LD_VAR 0 1
29359: PPUSH
29360: CALL_OW 12
29364: ARRAY
29365: PPUSH
29366: LD_INT 1
29368: PPUSH
29369: CALL_OW 234
// end ;
29373: PPOPN 1
29375: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29376: LD_EXP 62
29380: PUSH
29381: LD_EXP 110
29385: AND
29386: IFFALSE 29498
29388: GO 29390
29390: DISABLE
29391: LD_INT 0
29393: PPUSH
29394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29395: LD_ADDR_VAR 0 2
29399: PUSH
29400: LD_INT 22
29402: PUSH
29403: LD_OWVAR 2
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: LD_INT 30
29417: PUSH
29418: LD_INT 27
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 30
29427: PUSH
29428: LD_INT 26
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 30
29437: PUSH
29438: LD_INT 28
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PPUSH
29455: CALL_OW 69
29459: ST_TO_ADDR
// if not tmp then
29460: LD_VAR 0 2
29464: NOT
29465: IFFALSE 29469
// exit ;
29467: GO 29498
// for i in tmp do
29469: LD_ADDR_VAR 0 1
29473: PUSH
29474: LD_VAR 0 2
29478: PUSH
29479: FOR_IN
29480: IFFALSE 29496
// SetLives ( i , 1 ) ;
29482: LD_VAR 0 1
29486: PPUSH
29487: LD_INT 1
29489: PPUSH
29490: CALL_OW 234
29494: GO 29479
29496: POP
29497: POP
// end ;
29498: PPOPN 2
29500: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29501: LD_EXP 62
29505: PUSH
29506: LD_EXP 111
29510: AND
29511: IFFALSE 29798
29513: GO 29515
29515: DISABLE
29516: LD_INT 0
29518: PPUSH
29519: PPUSH
29520: PPUSH
// begin i := rand ( 1 , 7 ) ;
29521: LD_ADDR_VAR 0 1
29525: PUSH
29526: LD_INT 1
29528: PPUSH
29529: LD_INT 7
29531: PPUSH
29532: CALL_OW 12
29536: ST_TO_ADDR
// case i of 1 :
29537: LD_VAR 0 1
29541: PUSH
29542: LD_INT 1
29544: DOUBLE
29545: EQUAL
29546: IFTRUE 29550
29548: GO 29560
29550: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29551: LD_STRING earthquake(getX(game), 0, 32)
29553: PPUSH
29554: CALL_OW 559
29558: GO 29798
29560: LD_INT 2
29562: DOUBLE
29563: EQUAL
29564: IFTRUE 29568
29566: GO 29582
29568: POP
// begin ToLua ( displayStucuk(); ) ;
29569: LD_STRING displayStucuk();
29571: PPUSH
29572: CALL_OW 559
// ResetFog ;
29576: CALL_OW 335
// end ; 3 :
29580: GO 29798
29582: LD_INT 3
29584: DOUBLE
29585: EQUAL
29586: IFTRUE 29590
29588: GO 29694
29590: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29591: LD_ADDR_VAR 0 2
29595: PUSH
29596: LD_INT 22
29598: PUSH
29599: LD_OWVAR 2
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 25
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PPUSH
29622: CALL_OW 69
29626: ST_TO_ADDR
// if not tmp then
29627: LD_VAR 0 2
29631: NOT
29632: IFFALSE 29636
// exit ;
29634: GO 29798
// un := tmp [ rand ( 1 , tmp ) ] ;
29636: LD_ADDR_VAR 0 3
29640: PUSH
29641: LD_VAR 0 2
29645: PUSH
29646: LD_INT 1
29648: PPUSH
29649: LD_VAR 0 2
29653: PPUSH
29654: CALL_OW 12
29658: ARRAY
29659: ST_TO_ADDR
// if Crawls ( un ) then
29660: LD_VAR 0 3
29664: PPUSH
29665: CALL_OW 318
29669: IFFALSE 29680
// ComWalk ( un ) ;
29671: LD_VAR 0 3
29675: PPUSH
29676: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29680: LD_VAR 0 3
29684: PPUSH
29685: LD_INT 8
29687: PPUSH
29688: CALL_OW 336
// end ; 4 :
29692: GO 29798
29694: LD_INT 4
29696: DOUBLE
29697: EQUAL
29698: IFTRUE 29702
29700: GO 29776
29702: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29703: LD_ADDR_VAR 0 2
29707: PUSH
29708: LD_INT 22
29710: PUSH
29711: LD_OWVAR 2
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 30
29722: PUSH
29723: LD_INT 29
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PPUSH
29734: CALL_OW 69
29738: ST_TO_ADDR
// if not tmp then
29739: LD_VAR 0 2
29743: NOT
29744: IFFALSE 29748
// exit ;
29746: GO 29798
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29748: LD_VAR 0 2
29752: PUSH
29753: LD_INT 1
29755: ARRAY
29756: PPUSH
29757: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29761: LD_VAR 0 2
29765: PUSH
29766: LD_INT 1
29768: ARRAY
29769: PPUSH
29770: CALL_OW 65
// end ; 5 .. 7 :
29774: GO 29798
29776: LD_INT 5
29778: DOUBLE
29779: GREATEREQUAL
29780: IFFALSE 29788
29782: LD_INT 7
29784: DOUBLE
29785: LESSEQUAL
29786: IFTRUE 29790
29788: GO 29797
29790: POP
// StreamSibBomb ; end ;
29791: CALL 26035 0 0
29795: GO 29798
29797: POP
// end ;
29798: PPOPN 3
29800: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29801: LD_EXP 62
29805: PUSH
29806: LD_EXP 112
29810: AND
29811: IFFALSE 29967
29813: GO 29815
29815: DISABLE
29816: LD_INT 0
29818: PPUSH
29819: PPUSH
29820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29821: LD_ADDR_VAR 0 2
29825: PUSH
29826: LD_INT 81
29828: PUSH
29829: LD_OWVAR 2
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 2
29840: PUSH
29841: LD_INT 21
29843: PUSH
29844: LD_INT 1
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 21
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PPUSH
29870: CALL_OW 69
29874: ST_TO_ADDR
// if not tmp then
29875: LD_VAR 0 2
29879: NOT
29880: IFFALSE 29884
// exit ;
29882: GO 29967
// p := 0 ;
29884: LD_ADDR_VAR 0 3
29888: PUSH
29889: LD_INT 0
29891: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29892: LD_INT 35
29894: PPUSH
29895: CALL_OW 67
// p := p + 1 ;
29899: LD_ADDR_VAR 0 3
29903: PUSH
29904: LD_VAR 0 3
29908: PUSH
29909: LD_INT 1
29911: PLUS
29912: ST_TO_ADDR
// for i in tmp do
29913: LD_ADDR_VAR 0 1
29917: PUSH
29918: LD_VAR 0 2
29922: PUSH
29923: FOR_IN
29924: IFFALSE 29955
// if GetLives ( i ) < 1000 then
29926: LD_VAR 0 1
29930: PPUSH
29931: CALL_OW 256
29935: PUSH
29936: LD_INT 1000
29938: LESS
29939: IFFALSE 29953
// SetLives ( i , 1000 ) ;
29941: LD_VAR 0 1
29945: PPUSH
29946: LD_INT 1000
29948: PPUSH
29949: CALL_OW 234
29953: GO 29923
29955: POP
29956: POP
// until p > 20 ;
29957: LD_VAR 0 3
29961: PUSH
29962: LD_INT 20
29964: GREATER
29965: IFFALSE 29892
// end ;
29967: PPOPN 3
29969: END
// every 0 0$1 trigger StreamModeActive and sTime do
29970: LD_EXP 62
29974: PUSH
29975: LD_EXP 113
29979: AND
29980: IFFALSE 30015
29982: GO 29984
29984: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29985: LD_INT 28
29987: PPUSH
29988: LD_OWVAR 2
29992: PPUSH
29993: LD_INT 2
29995: PPUSH
29996: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30000: LD_INT 30
30002: PPUSH
30003: LD_OWVAR 2
30007: PPUSH
30008: LD_INT 2
30010: PPUSH
30011: CALL_OW 322
// end ;
30015: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30016: LD_EXP 62
30020: PUSH
30021: LD_EXP 114
30025: AND
30026: IFFALSE 30147
30028: GO 30030
30030: DISABLE
30031: LD_INT 0
30033: PPUSH
30034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30035: LD_ADDR_VAR 0 2
30039: PUSH
30040: LD_INT 22
30042: PUSH
30043: LD_OWVAR 2
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 21
30054: PUSH
30055: LD_INT 1
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 3
30064: PUSH
30065: LD_INT 23
30067: PUSH
30068: LD_INT 0
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: LIST
30083: PPUSH
30084: CALL_OW 69
30088: ST_TO_ADDR
// if not tmp then
30089: LD_VAR 0 2
30093: NOT
30094: IFFALSE 30098
// exit ;
30096: GO 30147
// for i in tmp do
30098: LD_ADDR_VAR 0 1
30102: PUSH
30103: LD_VAR 0 2
30107: PUSH
30108: FOR_IN
30109: IFFALSE 30145
// begin if Crawls ( i ) then
30111: LD_VAR 0 1
30115: PPUSH
30116: CALL_OW 318
30120: IFFALSE 30131
// ComWalk ( i ) ;
30122: LD_VAR 0 1
30126: PPUSH
30127: CALL_OW 138
// SetClass ( i , 2 ) ;
30131: LD_VAR 0 1
30135: PPUSH
30136: LD_INT 2
30138: PPUSH
30139: CALL_OW 336
// end ;
30143: GO 30108
30145: POP
30146: POP
// end ;
30147: PPOPN 2
30149: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30150: LD_EXP 62
30154: PUSH
30155: LD_EXP 115
30159: AND
30160: IFFALSE 30448
30162: GO 30164
30164: DISABLE
30165: LD_INT 0
30167: PPUSH
30168: PPUSH
30169: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30170: LD_OWVAR 2
30174: PPUSH
30175: LD_INT 9
30177: PPUSH
30178: LD_INT 1
30180: PPUSH
30181: LD_INT 1
30183: PPUSH
30184: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30188: LD_INT 9
30190: PPUSH
30191: LD_OWVAR 2
30195: PPUSH
30196: CALL_OW 343
// uc_side := 9 ;
30200: LD_ADDR_OWVAR 20
30204: PUSH
30205: LD_INT 9
30207: ST_TO_ADDR
// uc_nation := 2 ;
30208: LD_ADDR_OWVAR 21
30212: PUSH
30213: LD_INT 2
30215: ST_TO_ADDR
// hc_name := Dark Warrior ;
30216: LD_ADDR_OWVAR 26
30220: PUSH
30221: LD_STRING Dark Warrior
30223: ST_TO_ADDR
// hc_gallery :=  ;
30224: LD_ADDR_OWVAR 33
30228: PUSH
30229: LD_STRING 
30231: ST_TO_ADDR
// hc_noskilllimit := true ;
30232: LD_ADDR_OWVAR 76
30236: PUSH
30237: LD_INT 1
30239: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30240: LD_ADDR_OWVAR 31
30244: PUSH
30245: LD_INT 30
30247: PUSH
30248: LD_INT 30
30250: PUSH
30251: LD_INT 30
30253: PUSH
30254: LD_INT 30
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: ST_TO_ADDR
// un := CreateHuman ;
30263: LD_ADDR_VAR 0 3
30267: PUSH
30268: CALL_OW 44
30272: ST_TO_ADDR
// hc_noskilllimit := false ;
30273: LD_ADDR_OWVAR 76
30277: PUSH
30278: LD_INT 0
30280: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30281: LD_VAR 0 3
30285: PPUSH
30286: LD_INT 1
30288: PPUSH
30289: CALL_OW 51
// ToLua ( playRanger() ) ;
30293: LD_STRING playRanger()
30295: PPUSH
30296: CALL_OW 559
// p := 0 ;
30300: LD_ADDR_VAR 0 2
30304: PUSH
30305: LD_INT 0
30307: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30308: LD_INT 35
30310: PPUSH
30311: CALL_OW 67
// p := p + 1 ;
30315: LD_ADDR_VAR 0 2
30319: PUSH
30320: LD_VAR 0 2
30324: PUSH
30325: LD_INT 1
30327: PLUS
30328: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30329: LD_VAR 0 3
30333: PPUSH
30334: CALL_OW 256
30338: PUSH
30339: LD_INT 1000
30341: LESS
30342: IFFALSE 30356
// SetLives ( un , 1000 ) ;
30344: LD_VAR 0 3
30348: PPUSH
30349: LD_INT 1000
30351: PPUSH
30352: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30356: LD_VAR 0 3
30360: PPUSH
30361: LD_INT 81
30363: PUSH
30364: LD_OWVAR 2
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 91
30375: PUSH
30376: LD_VAR 0 3
30380: PUSH
30381: LD_INT 30
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: LIST
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PPUSH
30393: CALL_OW 69
30397: PPUSH
30398: LD_VAR 0 3
30402: PPUSH
30403: CALL_OW 74
30407: PPUSH
30408: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30412: LD_VAR 0 2
30416: PUSH
30417: LD_INT 80
30419: GREATER
30420: PUSH
30421: LD_VAR 0 3
30425: PPUSH
30426: CALL_OW 301
30430: OR
30431: IFFALSE 30308
// if un then
30433: LD_VAR 0 3
30437: IFFALSE 30448
// RemoveUnit ( un ) ;
30439: LD_VAR 0 3
30443: PPUSH
30444: CALL_OW 64
// end ;
30448: PPOPN 3
30450: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30451: LD_EXP 116
30455: IFFALSE 30571
30457: GO 30459
30459: DISABLE
30460: LD_INT 0
30462: PPUSH
30463: PPUSH
30464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30465: LD_ADDR_VAR 0 2
30469: PUSH
30470: LD_INT 81
30472: PUSH
30473: LD_OWVAR 2
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 21
30484: PUSH
30485: LD_INT 1
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PPUSH
30496: CALL_OW 69
30500: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30501: LD_STRING playComputer()
30503: PPUSH
30504: CALL_OW 559
// if not tmp then
30508: LD_VAR 0 2
30512: NOT
30513: IFFALSE 30517
// exit ;
30515: GO 30571
// for i in tmp do
30517: LD_ADDR_VAR 0 1
30521: PUSH
30522: LD_VAR 0 2
30526: PUSH
30527: FOR_IN
30528: IFFALSE 30569
// for j := 1 to 4 do
30530: LD_ADDR_VAR 0 3
30534: PUSH
30535: DOUBLE
30536: LD_INT 1
30538: DEC
30539: ST_TO_ADDR
30540: LD_INT 4
30542: PUSH
30543: FOR_TO
30544: IFFALSE 30565
// SetSkill ( i , j , 10 ) ;
30546: LD_VAR 0 1
30550: PPUSH
30551: LD_VAR 0 3
30555: PPUSH
30556: LD_INT 10
30558: PPUSH
30559: CALL_OW 237
30563: GO 30543
30565: POP
30566: POP
30567: GO 30527
30569: POP
30570: POP
// end ;
30571: PPOPN 3
30573: END
// every 0 0$1 trigger s30 do var i , tmp ;
30574: LD_EXP 117
30578: IFFALSE 30647
30580: GO 30582
30582: DISABLE
30583: LD_INT 0
30585: PPUSH
30586: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30587: LD_ADDR_VAR 0 2
30591: PUSH
30592: LD_INT 22
30594: PUSH
30595: LD_OWVAR 2
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PPUSH
30604: CALL_OW 69
30608: ST_TO_ADDR
// if not tmp then
30609: LD_VAR 0 2
30613: NOT
30614: IFFALSE 30618
// exit ;
30616: GO 30647
// for i in tmp do
30618: LD_ADDR_VAR 0 1
30622: PUSH
30623: LD_VAR 0 2
30627: PUSH
30628: FOR_IN
30629: IFFALSE 30645
// SetLives ( i , 300 ) ;
30631: LD_VAR 0 1
30635: PPUSH
30636: LD_INT 300
30638: PPUSH
30639: CALL_OW 234
30643: GO 30628
30645: POP
30646: POP
// end ;
30647: PPOPN 2
30649: END
// every 0 0$1 trigger s60 do var i , tmp ;
30650: LD_EXP 118
30654: IFFALSE 30723
30656: GO 30658
30658: DISABLE
30659: LD_INT 0
30661: PPUSH
30662: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30663: LD_ADDR_VAR 0 2
30667: PUSH
30668: LD_INT 22
30670: PUSH
30671: LD_OWVAR 2
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PPUSH
30680: CALL_OW 69
30684: ST_TO_ADDR
// if not tmp then
30685: LD_VAR 0 2
30689: NOT
30690: IFFALSE 30694
// exit ;
30692: GO 30723
// for i in tmp do
30694: LD_ADDR_VAR 0 1
30698: PUSH
30699: LD_VAR 0 2
30703: PUSH
30704: FOR_IN
30705: IFFALSE 30721
// SetLives ( i , 600 ) ;
30707: LD_VAR 0 1
30711: PPUSH
30712: LD_INT 600
30714: PPUSH
30715: CALL_OW 234
30719: GO 30704
30721: POP
30722: POP
// end ;
30723: PPOPN 2
30725: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30726: LD_INT 0
30728: PPUSH
// case cmd of 301 :
30729: LD_VAR 0 1
30733: PUSH
30734: LD_INT 301
30736: DOUBLE
30737: EQUAL
30738: IFTRUE 30742
30740: GO 30774
30742: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30743: LD_VAR 0 6
30747: PPUSH
30748: LD_VAR 0 7
30752: PPUSH
30753: LD_VAR 0 8
30757: PPUSH
30758: LD_VAR 0 4
30762: PPUSH
30763: LD_VAR 0 5
30767: PPUSH
30768: CALL 31975 0 5
30772: GO 30895
30774: LD_INT 302
30776: DOUBLE
30777: EQUAL
30778: IFTRUE 30782
30780: GO 30819
30782: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30783: LD_VAR 0 6
30787: PPUSH
30788: LD_VAR 0 7
30792: PPUSH
30793: LD_VAR 0 8
30797: PPUSH
30798: LD_VAR 0 9
30802: PPUSH
30803: LD_VAR 0 4
30807: PPUSH
30808: LD_VAR 0 5
30812: PPUSH
30813: CALL 32066 0 6
30817: GO 30895
30819: LD_INT 303
30821: DOUBLE
30822: EQUAL
30823: IFTRUE 30827
30825: GO 30864
30827: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30828: LD_VAR 0 6
30832: PPUSH
30833: LD_VAR 0 7
30837: PPUSH
30838: LD_VAR 0 8
30842: PPUSH
30843: LD_VAR 0 9
30847: PPUSH
30848: LD_VAR 0 4
30852: PPUSH
30853: LD_VAR 0 5
30857: PPUSH
30858: CALL 30900 0 6
30862: GO 30895
30864: LD_INT 304
30866: DOUBLE
30867: EQUAL
30868: IFTRUE 30872
30870: GO 30894
30872: POP
// hHackTeleport ( unit , x , y ) ; end ;
30873: LD_VAR 0 2
30877: PPUSH
30878: LD_VAR 0 4
30882: PPUSH
30883: LD_VAR 0 5
30887: PPUSH
30888: CALL 32659 0 3
30892: GO 30895
30894: POP
// end ;
30895: LD_VAR 0 12
30899: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30900: LD_INT 0
30902: PPUSH
30903: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30904: LD_VAR 0 1
30908: PUSH
30909: LD_INT 1
30911: LESS
30912: PUSH
30913: LD_VAR 0 1
30917: PUSH
30918: LD_INT 3
30920: GREATER
30921: OR
30922: PUSH
30923: LD_VAR 0 5
30927: PPUSH
30928: LD_VAR 0 6
30932: PPUSH
30933: CALL_OW 428
30937: OR
30938: IFFALSE 30942
// exit ;
30940: GO 31662
// uc_side := your_side ;
30942: LD_ADDR_OWVAR 20
30946: PUSH
30947: LD_OWVAR 2
30951: ST_TO_ADDR
// uc_nation := nation ;
30952: LD_ADDR_OWVAR 21
30956: PUSH
30957: LD_VAR 0 1
30961: ST_TO_ADDR
// bc_level = 1 ;
30962: LD_ADDR_OWVAR 43
30966: PUSH
30967: LD_INT 1
30969: ST_TO_ADDR
// case btype of 1 :
30970: LD_VAR 0 2
30974: PUSH
30975: LD_INT 1
30977: DOUBLE
30978: EQUAL
30979: IFTRUE 30983
30981: GO 30994
30983: POP
// bc_type := b_depot ; 2 :
30984: LD_ADDR_OWVAR 42
30988: PUSH
30989: LD_INT 0
30991: ST_TO_ADDR
30992: GO 31606
30994: LD_INT 2
30996: DOUBLE
30997: EQUAL
30998: IFTRUE 31002
31000: GO 31013
31002: POP
// bc_type := b_warehouse ; 3 :
31003: LD_ADDR_OWVAR 42
31007: PUSH
31008: LD_INT 1
31010: ST_TO_ADDR
31011: GO 31606
31013: LD_INT 3
31015: DOUBLE
31016: EQUAL
31017: IFTRUE 31021
31019: GO 31032
31021: POP
// bc_type := b_lab ; 4 .. 9 :
31022: LD_ADDR_OWVAR 42
31026: PUSH
31027: LD_INT 6
31029: ST_TO_ADDR
31030: GO 31606
31032: LD_INT 4
31034: DOUBLE
31035: GREATEREQUAL
31036: IFFALSE 31044
31038: LD_INT 9
31040: DOUBLE
31041: LESSEQUAL
31042: IFTRUE 31046
31044: GO 31098
31046: POP
// begin bc_type := b_lab_half ;
31047: LD_ADDR_OWVAR 42
31051: PUSH
31052: LD_INT 7
31054: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31055: LD_ADDR_OWVAR 44
31059: PUSH
31060: LD_INT 10
31062: PUSH
31063: LD_INT 11
31065: PUSH
31066: LD_INT 12
31068: PUSH
31069: LD_INT 15
31071: PUSH
31072: LD_INT 14
31074: PUSH
31075: LD_INT 13
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: PUSH
31086: LD_VAR 0 2
31090: PUSH
31091: LD_INT 3
31093: MINUS
31094: ARRAY
31095: ST_TO_ADDR
// end ; 10 .. 13 :
31096: GO 31606
31098: LD_INT 10
31100: DOUBLE
31101: GREATEREQUAL
31102: IFFALSE 31110
31104: LD_INT 13
31106: DOUBLE
31107: LESSEQUAL
31108: IFTRUE 31112
31110: GO 31189
31112: POP
// begin bc_type := b_lab_full ;
31113: LD_ADDR_OWVAR 42
31117: PUSH
31118: LD_INT 8
31120: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31121: LD_ADDR_OWVAR 44
31125: PUSH
31126: LD_INT 10
31128: PUSH
31129: LD_INT 12
31131: PUSH
31132: LD_INT 14
31134: PUSH
31135: LD_INT 13
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: PUSH
31144: LD_VAR 0 2
31148: PUSH
31149: LD_INT 9
31151: MINUS
31152: ARRAY
31153: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31154: LD_ADDR_OWVAR 45
31158: PUSH
31159: LD_INT 11
31161: PUSH
31162: LD_INT 15
31164: PUSH
31165: LD_INT 12
31167: PUSH
31168: LD_INT 15
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: PUSH
31177: LD_VAR 0 2
31181: PUSH
31182: LD_INT 9
31184: MINUS
31185: ARRAY
31186: ST_TO_ADDR
// end ; 14 :
31187: GO 31606
31189: LD_INT 14
31191: DOUBLE
31192: EQUAL
31193: IFTRUE 31197
31195: GO 31208
31197: POP
// bc_type := b_workshop ; 15 :
31198: LD_ADDR_OWVAR 42
31202: PUSH
31203: LD_INT 2
31205: ST_TO_ADDR
31206: GO 31606
31208: LD_INT 15
31210: DOUBLE
31211: EQUAL
31212: IFTRUE 31216
31214: GO 31227
31216: POP
// bc_type := b_factory ; 16 :
31217: LD_ADDR_OWVAR 42
31221: PUSH
31222: LD_INT 3
31224: ST_TO_ADDR
31225: GO 31606
31227: LD_INT 16
31229: DOUBLE
31230: EQUAL
31231: IFTRUE 31235
31233: GO 31246
31235: POP
// bc_type := b_ext_gun ; 17 :
31236: LD_ADDR_OWVAR 42
31240: PUSH
31241: LD_INT 17
31243: ST_TO_ADDR
31244: GO 31606
31246: LD_INT 17
31248: DOUBLE
31249: EQUAL
31250: IFTRUE 31254
31252: GO 31282
31254: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31255: LD_ADDR_OWVAR 42
31259: PUSH
31260: LD_INT 19
31262: PUSH
31263: LD_INT 23
31265: PUSH
31266: LD_INT 19
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: LIST
31273: PUSH
31274: LD_VAR 0 1
31278: ARRAY
31279: ST_TO_ADDR
31280: GO 31606
31282: LD_INT 18
31284: DOUBLE
31285: EQUAL
31286: IFTRUE 31290
31288: GO 31301
31290: POP
// bc_type := b_ext_radar ; 19 :
31291: LD_ADDR_OWVAR 42
31295: PUSH
31296: LD_INT 20
31298: ST_TO_ADDR
31299: GO 31606
31301: LD_INT 19
31303: DOUBLE
31304: EQUAL
31305: IFTRUE 31309
31307: GO 31320
31309: POP
// bc_type := b_ext_radio ; 20 :
31310: LD_ADDR_OWVAR 42
31314: PUSH
31315: LD_INT 22
31317: ST_TO_ADDR
31318: GO 31606
31320: LD_INT 20
31322: DOUBLE
31323: EQUAL
31324: IFTRUE 31328
31326: GO 31339
31328: POP
// bc_type := b_ext_siberium ; 21 :
31329: LD_ADDR_OWVAR 42
31333: PUSH
31334: LD_INT 21
31336: ST_TO_ADDR
31337: GO 31606
31339: LD_INT 21
31341: DOUBLE
31342: EQUAL
31343: IFTRUE 31347
31345: GO 31358
31347: POP
// bc_type := b_ext_computer ; 22 :
31348: LD_ADDR_OWVAR 42
31352: PUSH
31353: LD_INT 24
31355: ST_TO_ADDR
31356: GO 31606
31358: LD_INT 22
31360: DOUBLE
31361: EQUAL
31362: IFTRUE 31366
31364: GO 31377
31366: POP
// bc_type := b_ext_track ; 23 :
31367: LD_ADDR_OWVAR 42
31371: PUSH
31372: LD_INT 16
31374: ST_TO_ADDR
31375: GO 31606
31377: LD_INT 23
31379: DOUBLE
31380: EQUAL
31381: IFTRUE 31385
31383: GO 31396
31385: POP
// bc_type := b_ext_laser ; 24 :
31386: LD_ADDR_OWVAR 42
31390: PUSH
31391: LD_INT 25
31393: ST_TO_ADDR
31394: GO 31606
31396: LD_INT 24
31398: DOUBLE
31399: EQUAL
31400: IFTRUE 31404
31402: GO 31415
31404: POP
// bc_type := b_control_tower ; 25 :
31405: LD_ADDR_OWVAR 42
31409: PUSH
31410: LD_INT 36
31412: ST_TO_ADDR
31413: GO 31606
31415: LD_INT 25
31417: DOUBLE
31418: EQUAL
31419: IFTRUE 31423
31421: GO 31434
31423: POP
// bc_type := b_breastwork ; 26 :
31424: LD_ADDR_OWVAR 42
31428: PUSH
31429: LD_INT 31
31431: ST_TO_ADDR
31432: GO 31606
31434: LD_INT 26
31436: DOUBLE
31437: EQUAL
31438: IFTRUE 31442
31440: GO 31453
31442: POP
// bc_type := b_bunker ; 27 :
31443: LD_ADDR_OWVAR 42
31447: PUSH
31448: LD_INT 32
31450: ST_TO_ADDR
31451: GO 31606
31453: LD_INT 27
31455: DOUBLE
31456: EQUAL
31457: IFTRUE 31461
31459: GO 31472
31461: POP
// bc_type := b_turret ; 28 :
31462: LD_ADDR_OWVAR 42
31466: PUSH
31467: LD_INT 33
31469: ST_TO_ADDR
31470: GO 31606
31472: LD_INT 28
31474: DOUBLE
31475: EQUAL
31476: IFTRUE 31480
31478: GO 31491
31480: POP
// bc_type := b_armoury ; 29 :
31481: LD_ADDR_OWVAR 42
31485: PUSH
31486: LD_INT 4
31488: ST_TO_ADDR
31489: GO 31606
31491: LD_INT 29
31493: DOUBLE
31494: EQUAL
31495: IFTRUE 31499
31497: GO 31510
31499: POP
// bc_type := b_barracks ; 30 :
31500: LD_ADDR_OWVAR 42
31504: PUSH
31505: LD_INT 5
31507: ST_TO_ADDR
31508: GO 31606
31510: LD_INT 30
31512: DOUBLE
31513: EQUAL
31514: IFTRUE 31518
31516: GO 31529
31518: POP
// bc_type := b_solar_power ; 31 :
31519: LD_ADDR_OWVAR 42
31523: PUSH
31524: LD_INT 27
31526: ST_TO_ADDR
31527: GO 31606
31529: LD_INT 31
31531: DOUBLE
31532: EQUAL
31533: IFTRUE 31537
31535: GO 31548
31537: POP
// bc_type := b_oil_power ; 32 :
31538: LD_ADDR_OWVAR 42
31542: PUSH
31543: LD_INT 26
31545: ST_TO_ADDR
31546: GO 31606
31548: LD_INT 32
31550: DOUBLE
31551: EQUAL
31552: IFTRUE 31556
31554: GO 31567
31556: POP
// bc_type := b_siberite_power ; 33 :
31557: LD_ADDR_OWVAR 42
31561: PUSH
31562: LD_INT 28
31564: ST_TO_ADDR
31565: GO 31606
31567: LD_INT 33
31569: DOUBLE
31570: EQUAL
31571: IFTRUE 31575
31573: GO 31586
31575: POP
// bc_type := b_oil_mine ; 34 :
31576: LD_ADDR_OWVAR 42
31580: PUSH
31581: LD_INT 29
31583: ST_TO_ADDR
31584: GO 31606
31586: LD_INT 34
31588: DOUBLE
31589: EQUAL
31590: IFTRUE 31594
31592: GO 31605
31594: POP
// bc_type := b_siberite_mine ; end ;
31595: LD_ADDR_OWVAR 42
31599: PUSH
31600: LD_INT 30
31602: ST_TO_ADDR
31603: GO 31606
31605: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31606: LD_ADDR_VAR 0 8
31610: PUSH
31611: LD_VAR 0 5
31615: PPUSH
31616: LD_VAR 0 6
31620: PPUSH
31621: LD_VAR 0 3
31625: PPUSH
31626: CALL_OW 47
31630: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31631: LD_OWVAR 42
31635: PUSH
31636: LD_INT 32
31638: PUSH
31639: LD_INT 33
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: IN
31646: IFFALSE 31662
// PlaceWeaponTurret ( b , weapon ) ;
31648: LD_VAR 0 8
31652: PPUSH
31653: LD_VAR 0 4
31657: PPUSH
31658: CALL_OW 431
// end ;
31662: LD_VAR 0 7
31666: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31667: LD_INT 0
31669: PPUSH
31670: PPUSH
31671: PPUSH
31672: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31673: LD_ADDR_VAR 0 4
31677: PUSH
31678: LD_INT 22
31680: PUSH
31681: LD_OWVAR 2
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: LD_INT 30
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 30
31705: PUSH
31706: LD_INT 1
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: LIST
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PPUSH
31722: CALL_OW 69
31726: ST_TO_ADDR
// if not tmp then
31727: LD_VAR 0 4
31731: NOT
31732: IFFALSE 31736
// exit ;
31734: GO 31795
// for i in tmp do
31736: LD_ADDR_VAR 0 2
31740: PUSH
31741: LD_VAR 0 4
31745: PUSH
31746: FOR_IN
31747: IFFALSE 31793
// for j = 1 to 3 do
31749: LD_ADDR_VAR 0 3
31753: PUSH
31754: DOUBLE
31755: LD_INT 1
31757: DEC
31758: ST_TO_ADDR
31759: LD_INT 3
31761: PUSH
31762: FOR_TO
31763: IFFALSE 31789
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31765: LD_VAR 0 2
31769: PPUSH
31770: CALL_OW 274
31774: PPUSH
31775: LD_VAR 0 3
31779: PPUSH
31780: LD_INT 99999
31782: PPUSH
31783: CALL_OW 277
31787: GO 31762
31789: POP
31790: POP
31791: GO 31746
31793: POP
31794: POP
// end ;
31795: LD_VAR 0 1
31799: RET
// export function hHackSetLevel10 ; var i , j ; begin
31800: LD_INT 0
31802: PPUSH
31803: PPUSH
31804: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31805: LD_ADDR_VAR 0 2
31809: PUSH
31810: LD_INT 21
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PPUSH
31820: CALL_OW 69
31824: PUSH
31825: FOR_IN
31826: IFFALSE 31878
// if IsSelected ( i ) then
31828: LD_VAR 0 2
31832: PPUSH
31833: CALL_OW 306
31837: IFFALSE 31876
// begin for j := 1 to 4 do
31839: LD_ADDR_VAR 0 3
31843: PUSH
31844: DOUBLE
31845: LD_INT 1
31847: DEC
31848: ST_TO_ADDR
31849: LD_INT 4
31851: PUSH
31852: FOR_TO
31853: IFFALSE 31874
// SetSkill ( i , j , 10 ) ;
31855: LD_VAR 0 2
31859: PPUSH
31860: LD_VAR 0 3
31864: PPUSH
31865: LD_INT 10
31867: PPUSH
31868: CALL_OW 237
31872: GO 31852
31874: POP
31875: POP
// end ;
31876: GO 31825
31878: POP
31879: POP
// end ;
31880: LD_VAR 0 1
31884: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31885: LD_INT 0
31887: PPUSH
31888: PPUSH
31889: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31890: LD_ADDR_VAR 0 2
31894: PUSH
31895: LD_INT 22
31897: PUSH
31898: LD_OWVAR 2
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 21
31909: PUSH
31910: LD_INT 1
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PPUSH
31921: CALL_OW 69
31925: PUSH
31926: FOR_IN
31927: IFFALSE 31968
// begin for j := 1 to 4 do
31929: LD_ADDR_VAR 0 3
31933: PUSH
31934: DOUBLE
31935: LD_INT 1
31937: DEC
31938: ST_TO_ADDR
31939: LD_INT 4
31941: PUSH
31942: FOR_TO
31943: IFFALSE 31964
// SetSkill ( i , j , 10 ) ;
31945: LD_VAR 0 2
31949: PPUSH
31950: LD_VAR 0 3
31954: PPUSH
31955: LD_INT 10
31957: PPUSH
31958: CALL_OW 237
31962: GO 31942
31964: POP
31965: POP
// end ;
31966: GO 31926
31968: POP
31969: POP
// end ;
31970: LD_VAR 0 1
31974: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31975: LD_INT 0
31977: PPUSH
// uc_side := your_side ;
31978: LD_ADDR_OWVAR 20
31982: PUSH
31983: LD_OWVAR 2
31987: ST_TO_ADDR
// uc_nation := nation ;
31988: LD_ADDR_OWVAR 21
31992: PUSH
31993: LD_VAR 0 1
31997: ST_TO_ADDR
// InitHc ;
31998: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32002: LD_INT 0
32004: PPUSH
32005: LD_VAR 0 2
32009: PPUSH
32010: LD_VAR 0 3
32014: PPUSH
32015: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32019: LD_VAR 0 4
32023: PPUSH
32024: LD_VAR 0 5
32028: PPUSH
32029: CALL_OW 428
32033: PUSH
32034: LD_INT 0
32036: EQUAL
32037: IFFALSE 32061
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32039: CALL_OW 44
32043: PPUSH
32044: LD_VAR 0 4
32048: PPUSH
32049: LD_VAR 0 5
32053: PPUSH
32054: LD_INT 1
32056: PPUSH
32057: CALL_OW 48
// end ;
32061: LD_VAR 0 6
32065: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32066: LD_INT 0
32068: PPUSH
32069: PPUSH
// uc_side := your_side ;
32070: LD_ADDR_OWVAR 20
32074: PUSH
32075: LD_OWVAR 2
32079: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32080: LD_VAR 0 1
32084: PUSH
32085: LD_INT 1
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: LD_INT 4
32096: PUSH
32097: LD_INT 5
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: IN
32107: IFFALSE 32119
// uc_nation := nation_american else
32109: LD_ADDR_OWVAR 21
32113: PUSH
32114: LD_INT 1
32116: ST_TO_ADDR
32117: GO 32162
// if chassis in [ 11 , 12 , 13 , 14 ] then
32119: LD_VAR 0 1
32123: PUSH
32124: LD_INT 11
32126: PUSH
32127: LD_INT 12
32129: PUSH
32130: LD_INT 13
32132: PUSH
32133: LD_INT 14
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: IN
32142: IFFALSE 32154
// uc_nation := nation_arabian else
32144: LD_ADDR_OWVAR 21
32148: PUSH
32149: LD_INT 2
32151: ST_TO_ADDR
32152: GO 32162
// uc_nation := nation_russian ;
32154: LD_ADDR_OWVAR 21
32158: PUSH
32159: LD_INT 3
32161: ST_TO_ADDR
// vc_chassis := chassis ;
32162: LD_ADDR_OWVAR 37
32166: PUSH
32167: LD_VAR 0 1
32171: ST_TO_ADDR
// vc_engine := engine ;
32172: LD_ADDR_OWVAR 39
32176: PUSH
32177: LD_VAR 0 2
32181: ST_TO_ADDR
// vc_control := control ;
32182: LD_ADDR_OWVAR 38
32186: PUSH
32187: LD_VAR 0 3
32191: ST_TO_ADDR
// vc_weapon := weapon ;
32192: LD_ADDR_OWVAR 40
32196: PUSH
32197: LD_VAR 0 4
32201: ST_TO_ADDR
// un := CreateVehicle ;
32202: LD_ADDR_VAR 0 8
32206: PUSH
32207: CALL_OW 45
32211: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32212: LD_VAR 0 8
32216: PPUSH
32217: LD_INT 0
32219: PPUSH
32220: LD_INT 5
32222: PPUSH
32223: CALL_OW 12
32227: PPUSH
32228: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32232: LD_VAR 0 8
32236: PPUSH
32237: LD_VAR 0 5
32241: PPUSH
32242: LD_VAR 0 6
32246: PPUSH
32247: LD_INT 1
32249: PPUSH
32250: CALL_OW 48
// end ;
32254: LD_VAR 0 7
32258: RET
// export hInvincible ; every 1 do
32259: GO 32261
32261: DISABLE
// hInvincible := [ ] ;
32262: LD_ADDR_EXP 119
32266: PUSH
32267: EMPTY
32268: ST_TO_ADDR
32269: END
// every 10 do var i ;
32270: GO 32272
32272: DISABLE
32273: LD_INT 0
32275: PPUSH
// begin enable ;
32276: ENABLE
// if not hInvincible then
32277: LD_EXP 119
32281: NOT
32282: IFFALSE 32286
// exit ;
32284: GO 32330
// for i in hInvincible do
32286: LD_ADDR_VAR 0 1
32290: PUSH
32291: LD_EXP 119
32295: PUSH
32296: FOR_IN
32297: IFFALSE 32328
// if GetLives ( i ) < 1000 then
32299: LD_VAR 0 1
32303: PPUSH
32304: CALL_OW 256
32308: PUSH
32309: LD_INT 1000
32311: LESS
32312: IFFALSE 32326
// SetLives ( i , 1000 ) ;
32314: LD_VAR 0 1
32318: PPUSH
32319: LD_INT 1000
32321: PPUSH
32322: CALL_OW 234
32326: GO 32296
32328: POP
32329: POP
// end ;
32330: PPOPN 1
32332: END
// export function hHackInvincible ; var i ; begin
32333: LD_INT 0
32335: PPUSH
32336: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32337: LD_ADDR_VAR 0 2
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 21
32347: PUSH
32348: LD_INT 1
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 21
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: LIST
32369: PPUSH
32370: CALL_OW 69
32374: PUSH
32375: FOR_IN
32376: IFFALSE 32437
// if IsSelected ( i ) then
32378: LD_VAR 0 2
32382: PPUSH
32383: CALL_OW 306
32387: IFFALSE 32435
// begin if i in hInvincible then
32389: LD_VAR 0 2
32393: PUSH
32394: LD_EXP 119
32398: IN
32399: IFFALSE 32419
// hInvincible := hInvincible diff i else
32401: LD_ADDR_EXP 119
32405: PUSH
32406: LD_EXP 119
32410: PUSH
32411: LD_VAR 0 2
32415: DIFF
32416: ST_TO_ADDR
32417: GO 32435
// hInvincible := hInvincible union i ;
32419: LD_ADDR_EXP 119
32423: PUSH
32424: LD_EXP 119
32428: PUSH
32429: LD_VAR 0 2
32433: UNION
32434: ST_TO_ADDR
// end ;
32435: GO 32375
32437: POP
32438: POP
// end ;
32439: LD_VAR 0 1
32443: RET
// export function hHackInvisible ; var i , j ; begin
32444: LD_INT 0
32446: PPUSH
32447: PPUSH
32448: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32449: LD_ADDR_VAR 0 2
32453: PUSH
32454: LD_INT 21
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PPUSH
32464: CALL_OW 69
32468: PUSH
32469: FOR_IN
32470: IFFALSE 32494
// if IsSelected ( i ) then
32472: LD_VAR 0 2
32476: PPUSH
32477: CALL_OW 306
32481: IFFALSE 32492
// ComForceInvisible ( i ) ;
32483: LD_VAR 0 2
32487: PPUSH
32488: CALL_OW 496
32492: GO 32469
32494: POP
32495: POP
// end ;
32496: LD_VAR 0 1
32500: RET
// export function hHackChangeYourSide ; begin
32501: LD_INT 0
32503: PPUSH
// if your_side = 8 then
32504: LD_OWVAR 2
32508: PUSH
32509: LD_INT 8
32511: EQUAL
32512: IFFALSE 32524
// your_side := 0 else
32514: LD_ADDR_OWVAR 2
32518: PUSH
32519: LD_INT 0
32521: ST_TO_ADDR
32522: GO 32538
// your_side := your_side + 1 ;
32524: LD_ADDR_OWVAR 2
32528: PUSH
32529: LD_OWVAR 2
32533: PUSH
32534: LD_INT 1
32536: PLUS
32537: ST_TO_ADDR
// end ;
32538: LD_VAR 0 1
32542: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32543: LD_INT 0
32545: PPUSH
32546: PPUSH
32547: PPUSH
// for i in all_units do
32548: LD_ADDR_VAR 0 2
32552: PUSH
32553: LD_OWVAR 3
32557: PUSH
32558: FOR_IN
32559: IFFALSE 32637
// if IsSelected ( i ) then
32561: LD_VAR 0 2
32565: PPUSH
32566: CALL_OW 306
32570: IFFALSE 32635
// begin j := GetSide ( i ) ;
32572: LD_ADDR_VAR 0 3
32576: PUSH
32577: LD_VAR 0 2
32581: PPUSH
32582: CALL_OW 255
32586: ST_TO_ADDR
// if j = 8 then
32587: LD_VAR 0 3
32591: PUSH
32592: LD_INT 8
32594: EQUAL
32595: IFFALSE 32607
// j := 0 else
32597: LD_ADDR_VAR 0 3
32601: PUSH
32602: LD_INT 0
32604: ST_TO_ADDR
32605: GO 32621
// j := j + 1 ;
32607: LD_ADDR_VAR 0 3
32611: PUSH
32612: LD_VAR 0 3
32616: PUSH
32617: LD_INT 1
32619: PLUS
32620: ST_TO_ADDR
// SetSide ( i , j ) ;
32621: LD_VAR 0 2
32625: PPUSH
32626: LD_VAR 0 3
32630: PPUSH
32631: CALL_OW 235
// end ;
32635: GO 32558
32637: POP
32638: POP
// end ;
32639: LD_VAR 0 1
32643: RET
// export function hHackFog ; begin
32644: LD_INT 0
32646: PPUSH
// FogOff ( true ) ;
32647: LD_INT 1
32649: PPUSH
32650: CALL_OW 344
// end ;
32654: LD_VAR 0 1
32658: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32659: LD_INT 0
32661: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32662: LD_VAR 0 1
32666: PPUSH
32667: LD_VAR 0 2
32671: PPUSH
32672: LD_VAR 0 3
32676: PPUSH
32677: LD_INT 1
32679: PPUSH
32680: LD_INT 1
32682: PPUSH
32683: CALL_OW 483
// CenterOnXY ( x , y ) ;
32687: LD_VAR 0 2
32691: PPUSH
32692: LD_VAR 0 3
32696: PPUSH
32697: CALL_OW 84
// end ; end_of_file
32701: LD_VAR 0 4
32705: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32706: LD_INT 0
32708: PPUSH
32709: PPUSH
32710: PPUSH
32711: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32712: LD_VAR 0 1
32716: PPUSH
32717: CALL_OW 264
32721: PUSH
32722: LD_EXP 47
32726: EQUAL
32727: IFFALSE 32799
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32729: LD_INT 68
32731: PPUSH
32732: LD_VAR 0 1
32736: PPUSH
32737: CALL_OW 255
32741: PPUSH
32742: CALL_OW 321
32746: PUSH
32747: LD_INT 2
32749: EQUAL
32750: IFFALSE 32762
// eff := 70 else
32752: LD_ADDR_VAR 0 4
32756: PUSH
32757: LD_INT 70
32759: ST_TO_ADDR
32760: GO 32770
// eff := 30 ;
32762: LD_ADDR_VAR 0 4
32766: PUSH
32767: LD_INT 30
32769: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32770: LD_VAR 0 1
32774: PPUSH
32775: CALL_OW 250
32779: PPUSH
32780: LD_VAR 0 1
32784: PPUSH
32785: CALL_OW 251
32789: PPUSH
32790: LD_VAR 0 4
32794: PPUSH
32795: CALL_OW 495
// end ; end ;
32799: LD_VAR 0 2
32803: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32804: LD_INT 0
32806: PPUSH
// end ;
32807: LD_VAR 0 4
32811: RET
// export function SOS_Command ( cmd ) ; begin
32812: LD_INT 0
32814: PPUSH
// end ;
32815: LD_VAR 0 2
32819: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32820: LD_INT 0
32822: PPUSH
// end ;
32823: LD_VAR 0 6
32827: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32828: LD_INT 0
32830: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32831: LD_VAR 0 1
32835: PUSH
32836: LD_INT 250
32838: EQUAL
32839: PUSH
32840: LD_VAR 0 2
32844: PPUSH
32845: CALL_OW 264
32849: PUSH
32850: LD_EXP 50
32854: EQUAL
32855: AND
32856: IFFALSE 32877
// MinerPlaceMine ( unit , x , y ) ;
32858: LD_VAR 0 2
32862: PPUSH
32863: LD_VAR 0 4
32867: PPUSH
32868: LD_VAR 0 5
32872: PPUSH
32873: CALL 35226 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32877: LD_VAR 0 1
32881: PUSH
32882: LD_INT 251
32884: EQUAL
32885: PUSH
32886: LD_VAR 0 2
32890: PPUSH
32891: CALL_OW 264
32895: PUSH
32896: LD_EXP 50
32900: EQUAL
32901: AND
32902: IFFALSE 32923
// MinerDetonateMine ( unit , x , y ) ;
32904: LD_VAR 0 2
32908: PPUSH
32909: LD_VAR 0 4
32913: PPUSH
32914: LD_VAR 0 5
32918: PPUSH
32919: CALL 35503 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32923: LD_VAR 0 1
32927: PUSH
32928: LD_INT 252
32930: EQUAL
32931: PUSH
32932: LD_VAR 0 2
32936: PPUSH
32937: CALL_OW 264
32941: PUSH
32942: LD_EXP 50
32946: EQUAL
32947: AND
32948: IFFALSE 32969
// MinerCreateMinefield ( unit , x , y ) ;
32950: LD_VAR 0 2
32954: PPUSH
32955: LD_VAR 0 4
32959: PPUSH
32960: LD_VAR 0 5
32964: PPUSH
32965: CALL 35920 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32969: LD_VAR 0 1
32973: PUSH
32974: LD_INT 253
32976: EQUAL
32977: PUSH
32978: LD_VAR 0 2
32982: PPUSH
32983: CALL_OW 257
32987: PUSH
32988: LD_INT 5
32990: EQUAL
32991: AND
32992: IFFALSE 33013
// ComBinocular ( unit , x , y ) ;
32994: LD_VAR 0 2
32998: PPUSH
32999: LD_VAR 0 4
33003: PPUSH
33004: LD_VAR 0 5
33008: PPUSH
33009: CALL 36291 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33013: LD_VAR 0 1
33017: PUSH
33018: LD_INT 254
33020: EQUAL
33021: PUSH
33022: LD_VAR 0 2
33026: PPUSH
33027: CALL_OW 264
33031: PUSH
33032: LD_EXP 45
33036: EQUAL
33037: AND
33038: PUSH
33039: LD_VAR 0 3
33043: PPUSH
33044: CALL_OW 263
33048: PUSH
33049: LD_INT 3
33051: EQUAL
33052: AND
33053: IFFALSE 33069
// HackDestroyVehicle ( unit , selectedUnit ) ;
33055: LD_VAR 0 2
33059: PPUSH
33060: LD_VAR 0 3
33064: PPUSH
33065: CALL 34586 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33069: LD_VAR 0 1
33073: PUSH
33074: LD_INT 255
33076: EQUAL
33077: PUSH
33078: LD_VAR 0 2
33082: PPUSH
33083: CALL_OW 264
33087: PUSH
33088: LD_INT 14
33090: PUSH
33091: LD_INT 53
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: IN
33098: AND
33099: PUSH
33100: LD_VAR 0 4
33104: PPUSH
33105: LD_VAR 0 5
33109: PPUSH
33110: CALL_OW 488
33114: AND
33115: IFFALSE 33139
// CutTreeXYR ( unit , x , y , 12 ) ;
33117: LD_VAR 0 2
33121: PPUSH
33122: LD_VAR 0 4
33126: PPUSH
33127: LD_VAR 0 5
33131: PPUSH
33132: LD_INT 12
33134: PPUSH
33135: CALL 33152 0 4
// end ;
33139: LD_VAR 0 6
33143: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33144: LD_INT 0
33146: PPUSH
// end ;
33147: LD_VAR 0 4
33151: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33152: LD_INT 0
33154: PPUSH
33155: PPUSH
33156: PPUSH
33157: PPUSH
33158: PPUSH
33159: PPUSH
33160: PPUSH
33161: PPUSH
33162: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33163: LD_VAR 0 1
33167: NOT
33168: PUSH
33169: LD_VAR 0 2
33173: PPUSH
33174: LD_VAR 0 3
33178: PPUSH
33179: CALL_OW 488
33183: NOT
33184: OR
33185: PUSH
33186: LD_VAR 0 4
33190: NOT
33191: OR
33192: IFFALSE 33196
// exit ;
33194: GO 33536
// list := [ ] ;
33196: LD_ADDR_VAR 0 13
33200: PUSH
33201: EMPTY
33202: ST_TO_ADDR
// if x - r < 0 then
33203: LD_VAR 0 2
33207: PUSH
33208: LD_VAR 0 4
33212: MINUS
33213: PUSH
33214: LD_INT 0
33216: LESS
33217: IFFALSE 33229
// min_x := 0 else
33219: LD_ADDR_VAR 0 7
33223: PUSH
33224: LD_INT 0
33226: ST_TO_ADDR
33227: GO 33245
// min_x := x - r ;
33229: LD_ADDR_VAR 0 7
33233: PUSH
33234: LD_VAR 0 2
33238: PUSH
33239: LD_VAR 0 4
33243: MINUS
33244: ST_TO_ADDR
// if y - r < 0 then
33245: LD_VAR 0 3
33249: PUSH
33250: LD_VAR 0 4
33254: MINUS
33255: PUSH
33256: LD_INT 0
33258: LESS
33259: IFFALSE 33271
// min_y := 0 else
33261: LD_ADDR_VAR 0 8
33265: PUSH
33266: LD_INT 0
33268: ST_TO_ADDR
33269: GO 33287
// min_y := y - r ;
33271: LD_ADDR_VAR 0 8
33275: PUSH
33276: LD_VAR 0 3
33280: PUSH
33281: LD_VAR 0 4
33285: MINUS
33286: ST_TO_ADDR
// max_x := x + r ;
33287: LD_ADDR_VAR 0 9
33291: PUSH
33292: LD_VAR 0 2
33296: PUSH
33297: LD_VAR 0 4
33301: PLUS
33302: ST_TO_ADDR
// max_y := y + r ;
33303: LD_ADDR_VAR 0 10
33307: PUSH
33308: LD_VAR 0 3
33312: PUSH
33313: LD_VAR 0 4
33317: PLUS
33318: ST_TO_ADDR
// for _x = min_x to max_x do
33319: LD_ADDR_VAR 0 11
33323: PUSH
33324: DOUBLE
33325: LD_VAR 0 7
33329: DEC
33330: ST_TO_ADDR
33331: LD_VAR 0 9
33335: PUSH
33336: FOR_TO
33337: IFFALSE 33454
// for _y = min_y to max_y do
33339: LD_ADDR_VAR 0 12
33343: PUSH
33344: DOUBLE
33345: LD_VAR 0 8
33349: DEC
33350: ST_TO_ADDR
33351: LD_VAR 0 10
33355: PUSH
33356: FOR_TO
33357: IFFALSE 33450
// begin if not ValidHex ( _x , _y ) then
33359: LD_VAR 0 11
33363: PPUSH
33364: LD_VAR 0 12
33368: PPUSH
33369: CALL_OW 488
33373: NOT
33374: IFFALSE 33378
// continue ;
33376: GO 33356
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33378: LD_VAR 0 11
33382: PPUSH
33383: LD_VAR 0 12
33387: PPUSH
33388: CALL_OW 351
33392: PUSH
33393: LD_VAR 0 11
33397: PPUSH
33398: LD_VAR 0 12
33402: PPUSH
33403: CALL_OW 554
33407: AND
33408: IFFALSE 33448
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33410: LD_ADDR_VAR 0 13
33414: PUSH
33415: LD_VAR 0 13
33419: PPUSH
33420: LD_VAR 0 13
33424: PUSH
33425: LD_INT 1
33427: PLUS
33428: PPUSH
33429: LD_VAR 0 11
33433: PUSH
33434: LD_VAR 0 12
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PPUSH
33443: CALL_OW 2
33447: ST_TO_ADDR
// end ;
33448: GO 33356
33450: POP
33451: POP
33452: GO 33336
33454: POP
33455: POP
// if not list then
33456: LD_VAR 0 13
33460: NOT
33461: IFFALSE 33465
// exit ;
33463: GO 33536
// for i in list do
33465: LD_ADDR_VAR 0 6
33469: PUSH
33470: LD_VAR 0 13
33474: PUSH
33475: FOR_IN
33476: IFFALSE 33534
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33478: LD_VAR 0 1
33482: PPUSH
33483: LD_STRING M
33485: PUSH
33486: LD_VAR 0 6
33490: PUSH
33491: LD_INT 1
33493: ARRAY
33494: PUSH
33495: LD_VAR 0 6
33499: PUSH
33500: LD_INT 2
33502: ARRAY
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: LD_INT 0
33509: PUSH
33510: LD_INT 0
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: PUSH
33525: EMPTY
33526: LIST
33527: PPUSH
33528: CALL_OW 447
33532: GO 33475
33534: POP
33535: POP
// end ;
33536: LD_VAR 0 5
33540: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33541: LD_EXP 122
33545: NOT
33546: IFFALSE 33596
33548: GO 33550
33550: DISABLE
// begin initHack := true ;
33551: LD_ADDR_EXP 122
33555: PUSH
33556: LD_INT 1
33558: ST_TO_ADDR
// hackTanks := [ ] ;
33559: LD_ADDR_EXP 123
33563: PUSH
33564: EMPTY
33565: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33566: LD_ADDR_EXP 124
33570: PUSH
33571: EMPTY
33572: ST_TO_ADDR
// hackLimit := 3 ;
33573: LD_ADDR_EXP 125
33577: PUSH
33578: LD_INT 3
33580: ST_TO_ADDR
// hackDist := 12 ;
33581: LD_ADDR_EXP 126
33585: PUSH
33586: LD_INT 12
33588: ST_TO_ADDR
// hackCounter := [ ] ;
33589: LD_ADDR_EXP 127
33593: PUSH
33594: EMPTY
33595: ST_TO_ADDR
// end ;
33596: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33597: LD_EXP 122
33601: PUSH
33602: LD_INT 34
33604: PUSH
33605: LD_EXP 45
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PPUSH
33614: CALL_OW 69
33618: AND
33619: IFFALSE 33874
33621: GO 33623
33623: DISABLE
33624: LD_INT 0
33626: PPUSH
33627: PPUSH
// begin enable ;
33628: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33629: LD_ADDR_VAR 0 1
33633: PUSH
33634: LD_INT 34
33636: PUSH
33637: LD_EXP 45
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PPUSH
33646: CALL_OW 69
33650: PUSH
33651: FOR_IN
33652: IFFALSE 33872
// begin if not i in hackTanks then
33654: LD_VAR 0 1
33658: PUSH
33659: LD_EXP 123
33663: IN
33664: NOT
33665: IFFALSE 33748
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33667: LD_ADDR_EXP 123
33671: PUSH
33672: LD_EXP 123
33676: PPUSH
33677: LD_EXP 123
33681: PUSH
33682: LD_INT 1
33684: PLUS
33685: PPUSH
33686: LD_VAR 0 1
33690: PPUSH
33691: CALL_OW 1
33695: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33696: LD_ADDR_EXP 124
33700: PUSH
33701: LD_EXP 124
33705: PPUSH
33706: LD_EXP 124
33710: PUSH
33711: LD_INT 1
33713: PLUS
33714: PPUSH
33715: EMPTY
33716: PPUSH
33717: CALL_OW 1
33721: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33722: LD_ADDR_EXP 127
33726: PUSH
33727: LD_EXP 127
33731: PPUSH
33732: LD_EXP 127
33736: PUSH
33737: LD_INT 1
33739: PLUS
33740: PPUSH
33741: EMPTY
33742: PPUSH
33743: CALL_OW 1
33747: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33748: LD_VAR 0 1
33752: PPUSH
33753: CALL_OW 302
33757: NOT
33758: IFFALSE 33771
// begin HackUnlinkAll ( i ) ;
33760: LD_VAR 0 1
33764: PPUSH
33765: CALL 33877 0 1
// continue ;
33769: GO 33651
// end ; HackCheckCapturedStatus ( i ) ;
33771: LD_VAR 0 1
33775: PPUSH
33776: CALL 34320 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33780: LD_ADDR_VAR 0 2
33784: PUSH
33785: LD_INT 81
33787: PUSH
33788: LD_VAR 0 1
33792: PPUSH
33793: CALL_OW 255
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 33
33804: PUSH
33805: LD_INT 3
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 91
33814: PUSH
33815: LD_VAR 0 1
33819: PUSH
33820: LD_EXP 126
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 50
33832: PUSH
33833: EMPTY
33834: LIST
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: PPUSH
33842: CALL_OW 69
33846: ST_TO_ADDR
// if not tmp then
33847: LD_VAR 0 2
33851: NOT
33852: IFFALSE 33856
// continue ;
33854: GO 33651
// HackLink ( i , tmp ) ;
33856: LD_VAR 0 1
33860: PPUSH
33861: LD_VAR 0 2
33865: PPUSH
33866: CALL 34013 0 2
// end ;
33870: GO 33651
33872: POP
33873: POP
// end ;
33874: PPOPN 2
33876: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33877: LD_INT 0
33879: PPUSH
33880: PPUSH
33881: PPUSH
// if not hack in hackTanks then
33882: LD_VAR 0 1
33886: PUSH
33887: LD_EXP 123
33891: IN
33892: NOT
33893: IFFALSE 33897
// exit ;
33895: GO 34008
// index := GetElementIndex ( hackTanks , hack ) ;
33897: LD_ADDR_VAR 0 4
33901: PUSH
33902: LD_EXP 123
33906: PPUSH
33907: LD_VAR 0 1
33911: PPUSH
33912: CALL 41482 0 2
33916: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33917: LD_EXP 124
33921: PUSH
33922: LD_VAR 0 4
33926: ARRAY
33927: IFFALSE 34008
// begin for i in hackTanksCaptured [ index ] do
33929: LD_ADDR_VAR 0 3
33933: PUSH
33934: LD_EXP 124
33938: PUSH
33939: LD_VAR 0 4
33943: ARRAY
33944: PUSH
33945: FOR_IN
33946: IFFALSE 33972
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33948: LD_VAR 0 3
33952: PUSH
33953: LD_INT 1
33955: ARRAY
33956: PPUSH
33957: LD_VAR 0 3
33961: PUSH
33962: LD_INT 2
33964: ARRAY
33965: PPUSH
33966: CALL_OW 235
33970: GO 33945
33972: POP
33973: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33974: LD_ADDR_EXP 124
33978: PUSH
33979: LD_EXP 124
33983: PPUSH
33984: LD_VAR 0 4
33988: PPUSH
33989: EMPTY
33990: PPUSH
33991: CALL_OW 1
33995: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33996: LD_VAR 0 1
34000: PPUSH
34001: LD_INT 0
34003: PPUSH
34004: CALL_OW 505
// end ; end ;
34008: LD_VAR 0 2
34012: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34013: LD_INT 0
34015: PPUSH
34016: PPUSH
34017: PPUSH
// if not hack in hackTanks or not vehicles then
34018: LD_VAR 0 1
34022: PUSH
34023: LD_EXP 123
34027: IN
34028: NOT
34029: PUSH
34030: LD_VAR 0 2
34034: NOT
34035: OR
34036: IFFALSE 34040
// exit ;
34038: GO 34315
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34040: LD_ADDR_VAR 0 2
34044: PUSH
34045: LD_VAR 0 1
34049: PPUSH
34050: LD_VAR 0 2
34054: PPUSH
34055: LD_INT 1
34057: PPUSH
34058: LD_INT 1
34060: PPUSH
34061: CALL 42132 0 4
34065: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34066: LD_ADDR_VAR 0 5
34070: PUSH
34071: LD_EXP 123
34075: PPUSH
34076: LD_VAR 0 1
34080: PPUSH
34081: CALL 41482 0 2
34085: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34086: LD_EXP 124
34090: PUSH
34091: LD_VAR 0 5
34095: ARRAY
34096: PUSH
34097: LD_EXP 125
34101: LESS
34102: IFFALSE 34291
// begin for i := 1 to vehicles do
34104: LD_ADDR_VAR 0 4
34108: PUSH
34109: DOUBLE
34110: LD_INT 1
34112: DEC
34113: ST_TO_ADDR
34114: LD_VAR 0 2
34118: PUSH
34119: FOR_TO
34120: IFFALSE 34289
// begin if hackTanksCaptured [ index ] = hackLimit then
34122: LD_EXP 124
34126: PUSH
34127: LD_VAR 0 5
34131: ARRAY
34132: PUSH
34133: LD_EXP 125
34137: EQUAL
34138: IFFALSE 34142
// break ;
34140: GO 34289
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34142: LD_ADDR_EXP 127
34146: PUSH
34147: LD_EXP 127
34151: PPUSH
34152: LD_VAR 0 5
34156: PPUSH
34157: LD_EXP 127
34161: PUSH
34162: LD_VAR 0 5
34166: ARRAY
34167: PUSH
34168: LD_INT 1
34170: PLUS
34171: PPUSH
34172: CALL_OW 1
34176: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34177: LD_ADDR_EXP 124
34181: PUSH
34182: LD_EXP 124
34186: PPUSH
34187: LD_VAR 0 5
34191: PUSH
34192: LD_EXP 124
34196: PUSH
34197: LD_VAR 0 5
34201: ARRAY
34202: PUSH
34203: LD_INT 1
34205: PLUS
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PPUSH
34211: LD_VAR 0 2
34215: PUSH
34216: LD_VAR 0 4
34220: ARRAY
34221: PUSH
34222: LD_VAR 0 2
34226: PUSH
34227: LD_VAR 0 4
34231: ARRAY
34232: PPUSH
34233: CALL_OW 255
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PPUSH
34242: CALL 41697 0 3
34246: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34247: LD_VAR 0 2
34251: PUSH
34252: LD_VAR 0 4
34256: ARRAY
34257: PPUSH
34258: LD_VAR 0 1
34262: PPUSH
34263: CALL_OW 255
34267: PPUSH
34268: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34272: LD_VAR 0 2
34276: PUSH
34277: LD_VAR 0 4
34281: ARRAY
34282: PPUSH
34283: CALL_OW 141
// end ;
34287: GO 34119
34289: POP
34290: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34291: LD_VAR 0 1
34295: PPUSH
34296: LD_EXP 124
34300: PUSH
34301: LD_VAR 0 5
34305: ARRAY
34306: PUSH
34307: LD_INT 0
34309: PLUS
34310: PPUSH
34311: CALL_OW 505
// end ;
34315: LD_VAR 0 3
34319: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34320: LD_INT 0
34322: PPUSH
34323: PPUSH
34324: PPUSH
34325: PPUSH
// if not hack in hackTanks then
34326: LD_VAR 0 1
34330: PUSH
34331: LD_EXP 123
34335: IN
34336: NOT
34337: IFFALSE 34341
// exit ;
34339: GO 34581
// index := GetElementIndex ( hackTanks , hack ) ;
34341: LD_ADDR_VAR 0 4
34345: PUSH
34346: LD_EXP 123
34350: PPUSH
34351: LD_VAR 0 1
34355: PPUSH
34356: CALL 41482 0 2
34360: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34361: LD_ADDR_VAR 0 3
34365: PUSH
34366: DOUBLE
34367: LD_EXP 124
34371: PUSH
34372: LD_VAR 0 4
34376: ARRAY
34377: INC
34378: ST_TO_ADDR
34379: LD_INT 1
34381: PUSH
34382: FOR_DOWNTO
34383: IFFALSE 34555
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34385: LD_ADDR_VAR 0 5
34389: PUSH
34390: LD_EXP 124
34394: PUSH
34395: LD_VAR 0 4
34399: ARRAY
34400: PUSH
34401: LD_VAR 0 3
34405: ARRAY
34406: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34407: LD_VAR 0 5
34411: PUSH
34412: LD_INT 1
34414: ARRAY
34415: PPUSH
34416: CALL_OW 302
34420: NOT
34421: PUSH
34422: LD_VAR 0 5
34426: PUSH
34427: LD_INT 1
34429: ARRAY
34430: PPUSH
34431: CALL_OW 255
34435: PUSH
34436: LD_VAR 0 1
34440: PPUSH
34441: CALL_OW 255
34445: NONEQUAL
34446: OR
34447: IFFALSE 34553
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34449: LD_VAR 0 5
34453: PUSH
34454: LD_INT 1
34456: ARRAY
34457: PPUSH
34458: CALL_OW 305
34462: PUSH
34463: LD_VAR 0 5
34467: PUSH
34468: LD_INT 1
34470: ARRAY
34471: PPUSH
34472: CALL_OW 255
34476: PUSH
34477: LD_VAR 0 1
34481: PPUSH
34482: CALL_OW 255
34486: EQUAL
34487: AND
34488: IFFALSE 34512
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34490: LD_VAR 0 5
34494: PUSH
34495: LD_INT 1
34497: ARRAY
34498: PPUSH
34499: LD_VAR 0 5
34503: PUSH
34504: LD_INT 2
34506: ARRAY
34507: PPUSH
34508: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34512: LD_ADDR_EXP 124
34516: PUSH
34517: LD_EXP 124
34521: PPUSH
34522: LD_VAR 0 4
34526: PPUSH
34527: LD_EXP 124
34531: PUSH
34532: LD_VAR 0 4
34536: ARRAY
34537: PPUSH
34538: LD_VAR 0 3
34542: PPUSH
34543: CALL_OW 3
34547: PPUSH
34548: CALL_OW 1
34552: ST_TO_ADDR
// end ; end ;
34553: GO 34382
34555: POP
34556: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34557: LD_VAR 0 1
34561: PPUSH
34562: LD_EXP 124
34566: PUSH
34567: LD_VAR 0 4
34571: ARRAY
34572: PUSH
34573: LD_INT 0
34575: PLUS
34576: PPUSH
34577: CALL_OW 505
// end ;
34581: LD_VAR 0 2
34585: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34586: LD_INT 0
34588: PPUSH
34589: PPUSH
34590: PPUSH
34591: PPUSH
// if not hack in hackTanks then
34592: LD_VAR 0 1
34596: PUSH
34597: LD_EXP 123
34601: IN
34602: NOT
34603: IFFALSE 34607
// exit ;
34605: GO 34692
// index := GetElementIndex ( hackTanks , hack ) ;
34607: LD_ADDR_VAR 0 5
34611: PUSH
34612: LD_EXP 123
34616: PPUSH
34617: LD_VAR 0 1
34621: PPUSH
34622: CALL 41482 0 2
34626: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34627: LD_ADDR_VAR 0 4
34631: PUSH
34632: DOUBLE
34633: LD_INT 1
34635: DEC
34636: ST_TO_ADDR
34637: LD_EXP 124
34641: PUSH
34642: LD_VAR 0 5
34646: ARRAY
34647: PUSH
34648: FOR_TO
34649: IFFALSE 34690
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34651: LD_EXP 124
34655: PUSH
34656: LD_VAR 0 5
34660: ARRAY
34661: PUSH
34662: LD_VAR 0 4
34666: ARRAY
34667: PUSH
34668: LD_INT 1
34670: ARRAY
34671: PUSH
34672: LD_VAR 0 2
34676: EQUAL
34677: IFFALSE 34688
// KillUnit ( vehicle ) ;
34679: LD_VAR 0 2
34683: PPUSH
34684: CALL_OW 66
34688: GO 34648
34690: POP
34691: POP
// end ;
34692: LD_VAR 0 3
34696: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34697: LD_EXP 128
34701: NOT
34702: IFFALSE 34737
34704: GO 34706
34706: DISABLE
// begin initMiner := true ;
34707: LD_ADDR_EXP 128
34711: PUSH
34712: LD_INT 1
34714: ST_TO_ADDR
// minersList := [ ] ;
34715: LD_ADDR_EXP 129
34719: PUSH
34720: EMPTY
34721: ST_TO_ADDR
// minerMinesList := [ ] ;
34722: LD_ADDR_EXP 130
34726: PUSH
34727: EMPTY
34728: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34729: LD_ADDR_EXP 131
34733: PUSH
34734: LD_INT 5
34736: ST_TO_ADDR
// end ;
34737: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34738: LD_EXP 128
34742: PUSH
34743: LD_INT 34
34745: PUSH
34746: LD_EXP 50
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PPUSH
34755: CALL_OW 69
34759: AND
34760: IFFALSE 35223
34762: GO 34764
34764: DISABLE
34765: LD_INT 0
34767: PPUSH
34768: PPUSH
34769: PPUSH
34770: PPUSH
// begin enable ;
34771: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34772: LD_ADDR_VAR 0 1
34776: PUSH
34777: LD_INT 34
34779: PUSH
34780: LD_EXP 50
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PPUSH
34789: CALL_OW 69
34793: PUSH
34794: FOR_IN
34795: IFFALSE 34867
// begin if not i in minersList then
34797: LD_VAR 0 1
34801: PUSH
34802: LD_EXP 129
34806: IN
34807: NOT
34808: IFFALSE 34865
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34810: LD_ADDR_EXP 129
34814: PUSH
34815: LD_EXP 129
34819: PPUSH
34820: LD_EXP 129
34824: PUSH
34825: LD_INT 1
34827: PLUS
34828: PPUSH
34829: LD_VAR 0 1
34833: PPUSH
34834: CALL_OW 1
34838: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34839: LD_ADDR_EXP 130
34843: PUSH
34844: LD_EXP 130
34848: PPUSH
34849: LD_EXP 130
34853: PUSH
34854: LD_INT 1
34856: PLUS
34857: PPUSH
34858: EMPTY
34859: PPUSH
34860: CALL_OW 1
34864: ST_TO_ADDR
// end end ;
34865: GO 34794
34867: POP
34868: POP
// for i := minerMinesList downto 1 do
34869: LD_ADDR_VAR 0 1
34873: PUSH
34874: DOUBLE
34875: LD_EXP 130
34879: INC
34880: ST_TO_ADDR
34881: LD_INT 1
34883: PUSH
34884: FOR_DOWNTO
34885: IFFALSE 35221
// begin if IsLive ( minersList [ i ] ) then
34887: LD_EXP 129
34891: PUSH
34892: LD_VAR 0 1
34896: ARRAY
34897: PPUSH
34898: CALL_OW 300
34902: IFFALSE 34930
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34904: LD_EXP 129
34908: PUSH
34909: LD_VAR 0 1
34913: ARRAY
34914: PPUSH
34915: LD_EXP 130
34919: PUSH
34920: LD_VAR 0 1
34924: ARRAY
34925: PPUSH
34926: CALL_OW 505
// if not minerMinesList [ i ] then
34930: LD_EXP 130
34934: PUSH
34935: LD_VAR 0 1
34939: ARRAY
34940: NOT
34941: IFFALSE 34945
// continue ;
34943: GO 34884
// for j := minerMinesList [ i ] downto 1 do
34945: LD_ADDR_VAR 0 2
34949: PUSH
34950: DOUBLE
34951: LD_EXP 130
34955: PUSH
34956: LD_VAR 0 1
34960: ARRAY
34961: INC
34962: ST_TO_ADDR
34963: LD_INT 1
34965: PUSH
34966: FOR_DOWNTO
34967: IFFALSE 35217
// begin side := GetSide ( minersList [ i ] ) ;
34969: LD_ADDR_VAR 0 3
34973: PUSH
34974: LD_EXP 129
34978: PUSH
34979: LD_VAR 0 1
34983: ARRAY
34984: PPUSH
34985: CALL_OW 255
34989: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34990: LD_ADDR_VAR 0 4
34994: PUSH
34995: LD_EXP 130
34999: PUSH
35000: LD_VAR 0 1
35004: ARRAY
35005: PUSH
35006: LD_VAR 0 2
35010: ARRAY
35011: PUSH
35012: LD_INT 1
35014: ARRAY
35015: PPUSH
35016: LD_EXP 130
35020: PUSH
35021: LD_VAR 0 1
35025: ARRAY
35026: PUSH
35027: LD_VAR 0 2
35031: ARRAY
35032: PUSH
35033: LD_INT 2
35035: ARRAY
35036: PPUSH
35037: CALL_OW 428
35041: ST_TO_ADDR
// if not tmp then
35042: LD_VAR 0 4
35046: NOT
35047: IFFALSE 35051
// continue ;
35049: GO 34966
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35051: LD_VAR 0 4
35055: PUSH
35056: LD_INT 81
35058: PUSH
35059: LD_VAR 0 3
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PPUSH
35068: CALL_OW 69
35072: IN
35073: PUSH
35074: LD_EXP 130
35078: PUSH
35079: LD_VAR 0 1
35083: ARRAY
35084: PUSH
35085: LD_VAR 0 2
35089: ARRAY
35090: PUSH
35091: LD_INT 1
35093: ARRAY
35094: PPUSH
35095: LD_EXP 130
35099: PUSH
35100: LD_VAR 0 1
35104: ARRAY
35105: PUSH
35106: LD_VAR 0 2
35110: ARRAY
35111: PUSH
35112: LD_INT 2
35114: ARRAY
35115: PPUSH
35116: CALL_OW 458
35120: AND
35121: IFFALSE 35215
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35123: LD_EXP 130
35127: PUSH
35128: LD_VAR 0 1
35132: ARRAY
35133: PUSH
35134: LD_VAR 0 2
35138: ARRAY
35139: PUSH
35140: LD_INT 1
35142: ARRAY
35143: PPUSH
35144: LD_EXP 130
35148: PUSH
35149: LD_VAR 0 1
35153: ARRAY
35154: PUSH
35155: LD_VAR 0 2
35159: ARRAY
35160: PUSH
35161: LD_INT 2
35163: ARRAY
35164: PPUSH
35165: LD_VAR 0 3
35169: PPUSH
35170: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35174: LD_ADDR_EXP 130
35178: PUSH
35179: LD_EXP 130
35183: PPUSH
35184: LD_VAR 0 1
35188: PPUSH
35189: LD_EXP 130
35193: PUSH
35194: LD_VAR 0 1
35198: ARRAY
35199: PPUSH
35200: LD_VAR 0 2
35204: PPUSH
35205: CALL_OW 3
35209: PPUSH
35210: CALL_OW 1
35214: ST_TO_ADDR
// end ; end ;
35215: GO 34966
35217: POP
35218: POP
// end ;
35219: GO 34884
35221: POP
35222: POP
// end ;
35223: PPOPN 4
35225: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35226: LD_INT 0
35228: PPUSH
35229: PPUSH
// result := false ;
35230: LD_ADDR_VAR 0 4
35234: PUSH
35235: LD_INT 0
35237: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35238: LD_VAR 0 1
35242: PPUSH
35243: CALL_OW 264
35247: PUSH
35248: LD_EXP 50
35252: EQUAL
35253: NOT
35254: IFFALSE 35258
// exit ;
35256: GO 35498
// index := GetElementIndex ( minersList , unit ) ;
35258: LD_ADDR_VAR 0 5
35262: PUSH
35263: LD_EXP 129
35267: PPUSH
35268: LD_VAR 0 1
35272: PPUSH
35273: CALL 41482 0 2
35277: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35278: LD_EXP 130
35282: PUSH
35283: LD_VAR 0 5
35287: ARRAY
35288: PUSH
35289: LD_EXP 131
35293: GREATEREQUAL
35294: IFFALSE 35298
// exit ;
35296: GO 35498
// ComMoveXY ( unit , x , y ) ;
35298: LD_VAR 0 1
35302: PPUSH
35303: LD_VAR 0 2
35307: PPUSH
35308: LD_VAR 0 3
35312: PPUSH
35313: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35317: LD_INT 35
35319: PPUSH
35320: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35324: LD_VAR 0 1
35328: PPUSH
35329: LD_VAR 0 2
35333: PPUSH
35334: LD_VAR 0 3
35338: PPUSH
35339: CALL 72254 0 3
35343: NOT
35344: PUSH
35345: LD_VAR 0 1
35349: PPUSH
35350: CALL_OW 314
35354: AND
35355: IFFALSE 35359
// exit ;
35357: GO 35498
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35359: LD_VAR 0 2
35363: PPUSH
35364: LD_VAR 0 3
35368: PPUSH
35369: CALL_OW 428
35373: PUSH
35374: LD_VAR 0 1
35378: EQUAL
35379: PUSH
35380: LD_VAR 0 1
35384: PPUSH
35385: CALL_OW 314
35389: NOT
35390: AND
35391: IFFALSE 35317
// PlaySoundXY ( x , y , PlantMine ) ;
35393: LD_VAR 0 2
35397: PPUSH
35398: LD_VAR 0 3
35402: PPUSH
35403: LD_STRING PlantMine
35405: PPUSH
35406: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35410: LD_VAR 0 2
35414: PPUSH
35415: LD_VAR 0 3
35419: PPUSH
35420: LD_VAR 0 1
35424: PPUSH
35425: CALL_OW 255
35429: PPUSH
35430: LD_INT 0
35432: PPUSH
35433: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35437: LD_ADDR_EXP 130
35441: PUSH
35442: LD_EXP 130
35446: PPUSH
35447: LD_VAR 0 5
35451: PUSH
35452: LD_EXP 130
35456: PUSH
35457: LD_VAR 0 5
35461: ARRAY
35462: PUSH
35463: LD_INT 1
35465: PLUS
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PPUSH
35471: LD_VAR 0 2
35475: PUSH
35476: LD_VAR 0 3
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PPUSH
35485: CALL 41697 0 3
35489: ST_TO_ADDR
// result := true ;
35490: LD_ADDR_VAR 0 4
35494: PUSH
35495: LD_INT 1
35497: ST_TO_ADDR
// end ;
35498: LD_VAR 0 4
35502: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35503: LD_INT 0
35505: PPUSH
35506: PPUSH
35507: PPUSH
// if not unit in minersList then
35508: LD_VAR 0 1
35512: PUSH
35513: LD_EXP 129
35517: IN
35518: NOT
35519: IFFALSE 35523
// exit ;
35521: GO 35915
// index := GetElementIndex ( minersList , unit ) ;
35523: LD_ADDR_VAR 0 6
35527: PUSH
35528: LD_EXP 129
35532: PPUSH
35533: LD_VAR 0 1
35537: PPUSH
35538: CALL 41482 0 2
35542: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35543: LD_ADDR_VAR 0 5
35547: PUSH
35548: DOUBLE
35549: LD_EXP 130
35553: PUSH
35554: LD_VAR 0 6
35558: ARRAY
35559: INC
35560: ST_TO_ADDR
35561: LD_INT 1
35563: PUSH
35564: FOR_DOWNTO
35565: IFFALSE 35726
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35567: LD_EXP 130
35571: PUSH
35572: LD_VAR 0 6
35576: ARRAY
35577: PUSH
35578: LD_VAR 0 5
35582: ARRAY
35583: PUSH
35584: LD_INT 1
35586: ARRAY
35587: PUSH
35588: LD_VAR 0 2
35592: EQUAL
35593: PUSH
35594: LD_EXP 130
35598: PUSH
35599: LD_VAR 0 6
35603: ARRAY
35604: PUSH
35605: LD_VAR 0 5
35609: ARRAY
35610: PUSH
35611: LD_INT 2
35613: ARRAY
35614: PUSH
35615: LD_VAR 0 3
35619: EQUAL
35620: AND
35621: IFFALSE 35724
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35623: LD_EXP 130
35627: PUSH
35628: LD_VAR 0 6
35632: ARRAY
35633: PUSH
35634: LD_VAR 0 5
35638: ARRAY
35639: PUSH
35640: LD_INT 1
35642: ARRAY
35643: PPUSH
35644: LD_EXP 130
35648: PUSH
35649: LD_VAR 0 6
35653: ARRAY
35654: PUSH
35655: LD_VAR 0 5
35659: ARRAY
35660: PUSH
35661: LD_INT 2
35663: ARRAY
35664: PPUSH
35665: LD_VAR 0 1
35669: PPUSH
35670: CALL_OW 255
35674: PPUSH
35675: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35679: LD_ADDR_EXP 130
35683: PUSH
35684: LD_EXP 130
35688: PPUSH
35689: LD_VAR 0 6
35693: PPUSH
35694: LD_EXP 130
35698: PUSH
35699: LD_VAR 0 6
35703: ARRAY
35704: PPUSH
35705: LD_VAR 0 5
35709: PPUSH
35710: CALL_OW 3
35714: PPUSH
35715: CALL_OW 1
35719: ST_TO_ADDR
// exit ;
35720: POP
35721: POP
35722: GO 35915
// end ; end ;
35724: GO 35564
35726: POP
35727: POP
// for i := minerMinesList [ index ] downto 1 do
35728: LD_ADDR_VAR 0 5
35732: PUSH
35733: DOUBLE
35734: LD_EXP 130
35738: PUSH
35739: LD_VAR 0 6
35743: ARRAY
35744: INC
35745: ST_TO_ADDR
35746: LD_INT 1
35748: PUSH
35749: FOR_DOWNTO
35750: IFFALSE 35913
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35752: LD_EXP 130
35756: PUSH
35757: LD_VAR 0 6
35761: ARRAY
35762: PUSH
35763: LD_VAR 0 5
35767: ARRAY
35768: PUSH
35769: LD_INT 1
35771: ARRAY
35772: PPUSH
35773: LD_EXP 130
35777: PUSH
35778: LD_VAR 0 6
35782: ARRAY
35783: PUSH
35784: LD_VAR 0 5
35788: ARRAY
35789: PUSH
35790: LD_INT 2
35792: ARRAY
35793: PPUSH
35794: LD_VAR 0 2
35798: PPUSH
35799: LD_VAR 0 3
35803: PPUSH
35804: CALL_OW 298
35808: PUSH
35809: LD_INT 6
35811: LESS
35812: IFFALSE 35911
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35814: LD_EXP 130
35818: PUSH
35819: LD_VAR 0 6
35823: ARRAY
35824: PUSH
35825: LD_VAR 0 5
35829: ARRAY
35830: PUSH
35831: LD_INT 1
35833: ARRAY
35834: PPUSH
35835: LD_EXP 130
35839: PUSH
35840: LD_VAR 0 6
35844: ARRAY
35845: PUSH
35846: LD_VAR 0 5
35850: ARRAY
35851: PUSH
35852: LD_INT 2
35854: ARRAY
35855: PPUSH
35856: LD_VAR 0 1
35860: PPUSH
35861: CALL_OW 255
35865: PPUSH
35866: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35870: LD_ADDR_EXP 130
35874: PUSH
35875: LD_EXP 130
35879: PPUSH
35880: LD_VAR 0 6
35884: PPUSH
35885: LD_EXP 130
35889: PUSH
35890: LD_VAR 0 6
35894: ARRAY
35895: PPUSH
35896: LD_VAR 0 5
35900: PPUSH
35901: CALL_OW 3
35905: PPUSH
35906: CALL_OW 1
35910: ST_TO_ADDR
// end ; end ;
35911: GO 35749
35913: POP
35914: POP
// end ;
35915: LD_VAR 0 4
35919: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35920: LD_INT 0
35922: PPUSH
35923: PPUSH
35924: PPUSH
35925: PPUSH
35926: PPUSH
35927: PPUSH
35928: PPUSH
35929: PPUSH
35930: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35931: LD_VAR 0 1
35935: PPUSH
35936: CALL_OW 264
35940: PUSH
35941: LD_EXP 50
35945: EQUAL
35946: NOT
35947: PUSH
35948: LD_VAR 0 1
35952: PUSH
35953: LD_EXP 129
35957: IN
35958: NOT
35959: OR
35960: IFFALSE 35964
// exit ;
35962: GO 36286
// index := GetElementIndex ( minersList , unit ) ;
35964: LD_ADDR_VAR 0 6
35968: PUSH
35969: LD_EXP 129
35973: PPUSH
35974: LD_VAR 0 1
35978: PPUSH
35979: CALL 41482 0 2
35983: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35984: LD_ADDR_VAR 0 8
35988: PUSH
35989: LD_EXP 131
35993: PUSH
35994: LD_EXP 130
35998: PUSH
35999: LD_VAR 0 6
36003: ARRAY
36004: MINUS
36005: ST_TO_ADDR
// if not minesFreeAmount then
36006: LD_VAR 0 8
36010: NOT
36011: IFFALSE 36015
// exit ;
36013: GO 36286
// tmp := [ ] ;
36015: LD_ADDR_VAR 0 7
36019: PUSH
36020: EMPTY
36021: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36022: LD_ADDR_VAR 0 5
36026: PUSH
36027: DOUBLE
36028: LD_INT 1
36030: DEC
36031: ST_TO_ADDR
36032: LD_VAR 0 8
36036: PUSH
36037: FOR_TO
36038: IFFALSE 36233
// begin _d := rand ( 0 , 5 ) ;
36040: LD_ADDR_VAR 0 11
36044: PUSH
36045: LD_INT 0
36047: PPUSH
36048: LD_INT 5
36050: PPUSH
36051: CALL_OW 12
36055: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36056: LD_ADDR_VAR 0 12
36060: PUSH
36061: LD_INT 2
36063: PPUSH
36064: LD_INT 6
36066: PPUSH
36067: CALL_OW 12
36071: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36072: LD_ADDR_VAR 0 9
36076: PUSH
36077: LD_VAR 0 2
36081: PPUSH
36082: LD_VAR 0 11
36086: PPUSH
36087: LD_VAR 0 12
36091: PPUSH
36092: CALL_OW 272
36096: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36097: LD_ADDR_VAR 0 10
36101: PUSH
36102: LD_VAR 0 3
36106: PPUSH
36107: LD_VAR 0 11
36111: PPUSH
36112: LD_VAR 0 12
36116: PPUSH
36117: CALL_OW 273
36121: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36122: LD_VAR 0 9
36126: PPUSH
36127: LD_VAR 0 10
36131: PPUSH
36132: CALL_OW 488
36136: PUSH
36137: LD_VAR 0 9
36141: PUSH
36142: LD_VAR 0 10
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_VAR 0 7
36155: IN
36156: NOT
36157: AND
36158: PUSH
36159: LD_VAR 0 9
36163: PPUSH
36164: LD_VAR 0 10
36168: PPUSH
36169: CALL_OW 458
36173: NOT
36174: AND
36175: IFFALSE 36217
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36177: LD_ADDR_VAR 0 7
36181: PUSH
36182: LD_VAR 0 7
36186: PPUSH
36187: LD_VAR 0 7
36191: PUSH
36192: LD_INT 1
36194: PLUS
36195: PPUSH
36196: LD_VAR 0 9
36200: PUSH
36201: LD_VAR 0 10
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PPUSH
36210: CALL_OW 1
36214: ST_TO_ADDR
36215: GO 36231
// i := i - 1 ;
36217: LD_ADDR_VAR 0 5
36221: PUSH
36222: LD_VAR 0 5
36226: PUSH
36227: LD_INT 1
36229: MINUS
36230: ST_TO_ADDR
// end ;
36231: GO 36037
36233: POP
36234: POP
// for i in tmp do
36235: LD_ADDR_VAR 0 5
36239: PUSH
36240: LD_VAR 0 7
36244: PUSH
36245: FOR_IN
36246: IFFALSE 36284
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36248: LD_VAR 0 1
36252: PPUSH
36253: LD_VAR 0 5
36257: PUSH
36258: LD_INT 1
36260: ARRAY
36261: PPUSH
36262: LD_VAR 0 5
36266: PUSH
36267: LD_INT 2
36269: ARRAY
36270: PPUSH
36271: CALL 35226 0 3
36275: NOT
36276: IFFALSE 36282
// exit ;
36278: POP
36279: POP
36280: GO 36286
36282: GO 36245
36284: POP
36285: POP
// end ;
36286: LD_VAR 0 4
36290: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36291: LD_INT 0
36293: PPUSH
36294: PPUSH
36295: PPUSH
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
// if not GetClass ( unit ) = class_sniper then
36300: LD_VAR 0 1
36304: PPUSH
36305: CALL_OW 257
36309: PUSH
36310: LD_INT 5
36312: EQUAL
36313: NOT
36314: IFFALSE 36318
// exit ;
36316: GO 36706
// dist := 8 ;
36318: LD_ADDR_VAR 0 5
36322: PUSH
36323: LD_INT 8
36325: ST_TO_ADDR
// viewRange := 12 ;
36326: LD_ADDR_VAR 0 7
36330: PUSH
36331: LD_INT 12
36333: ST_TO_ADDR
// side := GetSide ( unit ) ;
36334: LD_ADDR_VAR 0 6
36338: PUSH
36339: LD_VAR 0 1
36343: PPUSH
36344: CALL_OW 255
36348: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36349: LD_INT 61
36351: PPUSH
36352: LD_VAR 0 6
36356: PPUSH
36357: CALL_OW 321
36361: PUSH
36362: LD_INT 2
36364: EQUAL
36365: IFFALSE 36375
// viewRange := 16 ;
36367: LD_ADDR_VAR 0 7
36371: PUSH
36372: LD_INT 16
36374: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36375: LD_VAR 0 1
36379: PPUSH
36380: LD_VAR 0 2
36384: PPUSH
36385: LD_VAR 0 3
36389: PPUSH
36390: CALL_OW 297
36394: PUSH
36395: LD_VAR 0 5
36399: GREATER
36400: IFFALSE 36479
// begin ComMoveXY ( unit , x , y ) ;
36402: LD_VAR 0 1
36406: PPUSH
36407: LD_VAR 0 2
36411: PPUSH
36412: LD_VAR 0 3
36416: PPUSH
36417: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36421: LD_INT 35
36423: PPUSH
36424: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36428: LD_VAR 0 1
36432: PPUSH
36433: LD_VAR 0 2
36437: PPUSH
36438: LD_VAR 0 3
36442: PPUSH
36443: CALL 72254 0 3
36447: NOT
36448: IFFALSE 36452
// exit ;
36450: GO 36706
// until GetDistUnitXY ( unit , x , y ) < dist ;
36452: LD_VAR 0 1
36456: PPUSH
36457: LD_VAR 0 2
36461: PPUSH
36462: LD_VAR 0 3
36466: PPUSH
36467: CALL_OW 297
36471: PUSH
36472: LD_VAR 0 5
36476: LESS
36477: IFFALSE 36421
// end ; ComTurnXY ( unit , x , y ) ;
36479: LD_VAR 0 1
36483: PPUSH
36484: LD_VAR 0 2
36488: PPUSH
36489: LD_VAR 0 3
36493: PPUSH
36494: CALL_OW 118
// wait ( 5 ) ;
36498: LD_INT 5
36500: PPUSH
36501: CALL_OW 67
// _d := GetDir ( unit ) ;
36505: LD_ADDR_VAR 0 10
36509: PUSH
36510: LD_VAR 0 1
36514: PPUSH
36515: CALL_OW 254
36519: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36520: LD_ADDR_VAR 0 8
36524: PUSH
36525: LD_VAR 0 1
36529: PPUSH
36530: CALL_OW 250
36534: PPUSH
36535: LD_VAR 0 10
36539: PPUSH
36540: LD_VAR 0 5
36544: PPUSH
36545: CALL_OW 272
36549: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36550: LD_ADDR_VAR 0 9
36554: PUSH
36555: LD_VAR 0 1
36559: PPUSH
36560: CALL_OW 251
36564: PPUSH
36565: LD_VAR 0 10
36569: PPUSH
36570: LD_VAR 0 5
36574: PPUSH
36575: CALL_OW 273
36579: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36580: LD_VAR 0 8
36584: PPUSH
36585: LD_VAR 0 9
36589: PPUSH
36590: CALL_OW 488
36594: NOT
36595: IFFALSE 36599
// exit ;
36597: GO 36706
// ComAnimCustom ( unit , 1 ) ;
36599: LD_VAR 0 1
36603: PPUSH
36604: LD_INT 1
36606: PPUSH
36607: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36611: LD_VAR 0 8
36615: PPUSH
36616: LD_VAR 0 9
36620: PPUSH
36621: LD_VAR 0 6
36625: PPUSH
36626: LD_VAR 0 7
36630: PPUSH
36631: CALL_OW 330
// repeat wait ( 1 ) ;
36635: LD_INT 1
36637: PPUSH
36638: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36642: LD_VAR 0 1
36646: PPUSH
36647: CALL_OW 316
36651: PUSH
36652: LD_VAR 0 1
36656: PPUSH
36657: CALL_OW 314
36661: OR
36662: PUSH
36663: LD_VAR 0 1
36667: PPUSH
36668: CALL_OW 302
36672: NOT
36673: OR
36674: PUSH
36675: LD_VAR 0 1
36679: PPUSH
36680: CALL_OW 301
36684: OR
36685: IFFALSE 36635
// RemoveSeeing ( _x , _y , side ) ;
36687: LD_VAR 0 8
36691: PPUSH
36692: LD_VAR 0 9
36696: PPUSH
36697: LD_VAR 0 6
36701: PPUSH
36702: CALL_OW 331
// end ; end_of_file
36706: LD_VAR 0 4
36710: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36711: LD_INT 0
36713: PPUSH
36714: PPUSH
// if exist_mode then
36715: LD_VAR 0 2
36719: IFFALSE 36744
// unit := CreateCharacter ( prefix & ident ) else
36721: LD_ADDR_VAR 0 5
36725: PUSH
36726: LD_VAR 0 3
36730: PUSH
36731: LD_VAR 0 1
36735: STR
36736: PPUSH
36737: CALL_OW 34
36741: ST_TO_ADDR
36742: GO 36759
// unit := NewCharacter ( ident ) ;
36744: LD_ADDR_VAR 0 5
36748: PUSH
36749: LD_VAR 0 1
36753: PPUSH
36754: CALL_OW 25
36758: ST_TO_ADDR
// result := unit ;
36759: LD_ADDR_VAR 0 4
36763: PUSH
36764: LD_VAR 0 5
36768: ST_TO_ADDR
// end ;
36769: LD_VAR 0 4
36773: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36774: LD_INT 0
36776: PPUSH
36777: PPUSH
// if not side or not nation then
36778: LD_VAR 0 1
36782: NOT
36783: PUSH
36784: LD_VAR 0 2
36788: NOT
36789: OR
36790: IFFALSE 36794
// exit ;
36792: GO 37562
// case nation of nation_american :
36794: LD_VAR 0 2
36798: PUSH
36799: LD_INT 1
36801: DOUBLE
36802: EQUAL
36803: IFTRUE 36807
36805: GO 37021
36807: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36808: LD_ADDR_VAR 0 4
36812: PUSH
36813: LD_INT 35
36815: PUSH
36816: LD_INT 45
36818: PUSH
36819: LD_INT 46
36821: PUSH
36822: LD_INT 47
36824: PUSH
36825: LD_INT 82
36827: PUSH
36828: LD_INT 83
36830: PUSH
36831: LD_INT 84
36833: PUSH
36834: LD_INT 85
36836: PUSH
36837: LD_INT 86
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: LD_INT 2
36845: PUSH
36846: LD_INT 6
36848: PUSH
36849: LD_INT 15
36851: PUSH
36852: LD_INT 16
36854: PUSH
36855: LD_INT 7
36857: PUSH
36858: LD_INT 12
36860: PUSH
36861: LD_INT 13
36863: PUSH
36864: LD_INT 10
36866: PUSH
36867: LD_INT 14
36869: PUSH
36870: LD_INT 20
36872: PUSH
36873: LD_INT 21
36875: PUSH
36876: LD_INT 22
36878: PUSH
36879: LD_INT 25
36881: PUSH
36882: LD_INT 32
36884: PUSH
36885: LD_INT 27
36887: PUSH
36888: LD_INT 36
36890: PUSH
36891: LD_INT 69
36893: PUSH
36894: LD_INT 39
36896: PUSH
36897: LD_INT 34
36899: PUSH
36900: LD_INT 40
36902: PUSH
36903: LD_INT 48
36905: PUSH
36906: LD_INT 49
36908: PUSH
36909: LD_INT 50
36911: PUSH
36912: LD_INT 51
36914: PUSH
36915: LD_INT 52
36917: PUSH
36918: LD_INT 53
36920: PUSH
36921: LD_INT 54
36923: PUSH
36924: LD_INT 55
36926: PUSH
36927: LD_INT 56
36929: PUSH
36930: LD_INT 57
36932: PUSH
36933: LD_INT 58
36935: PUSH
36936: LD_INT 59
36938: PUSH
36939: LD_INT 60
36941: PUSH
36942: LD_INT 61
36944: PUSH
36945: LD_INT 62
36947: PUSH
36948: LD_INT 80
36950: PUSH
36951: LD_INT 82
36953: PUSH
36954: LD_INT 83
36956: PUSH
36957: LD_INT 84
36959: PUSH
36960: LD_INT 85
36962: PUSH
36963: LD_INT 86
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: ST_TO_ADDR
37019: GO 37486
37021: LD_INT 2
37023: DOUBLE
37024: EQUAL
37025: IFTRUE 37029
37027: GO 37255
37029: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37030: LD_ADDR_VAR 0 4
37034: PUSH
37035: LD_INT 35
37037: PUSH
37038: LD_INT 45
37040: PUSH
37041: LD_INT 46
37043: PUSH
37044: LD_INT 47
37046: PUSH
37047: LD_INT 82
37049: PUSH
37050: LD_INT 83
37052: PUSH
37053: LD_INT 84
37055: PUSH
37056: LD_INT 85
37058: PUSH
37059: LD_INT 87
37061: PUSH
37062: LD_INT 70
37064: PUSH
37065: LD_INT 1
37067: PUSH
37068: LD_INT 11
37070: PUSH
37071: LD_INT 3
37073: PUSH
37074: LD_INT 4
37076: PUSH
37077: LD_INT 5
37079: PUSH
37080: LD_INT 6
37082: PUSH
37083: LD_INT 15
37085: PUSH
37086: LD_INT 18
37088: PUSH
37089: LD_INT 7
37091: PUSH
37092: LD_INT 17
37094: PUSH
37095: LD_INT 8
37097: PUSH
37098: LD_INT 20
37100: PUSH
37101: LD_INT 21
37103: PUSH
37104: LD_INT 22
37106: PUSH
37107: LD_INT 72
37109: PUSH
37110: LD_INT 26
37112: PUSH
37113: LD_INT 69
37115: PUSH
37116: LD_INT 39
37118: PUSH
37119: LD_INT 40
37121: PUSH
37122: LD_INT 41
37124: PUSH
37125: LD_INT 42
37127: PUSH
37128: LD_INT 43
37130: PUSH
37131: LD_INT 48
37133: PUSH
37134: LD_INT 49
37136: PUSH
37137: LD_INT 50
37139: PUSH
37140: LD_INT 51
37142: PUSH
37143: LD_INT 52
37145: PUSH
37146: LD_INT 53
37148: PUSH
37149: LD_INT 54
37151: PUSH
37152: LD_INT 55
37154: PUSH
37155: LD_INT 56
37157: PUSH
37158: LD_INT 60
37160: PUSH
37161: LD_INT 61
37163: PUSH
37164: LD_INT 62
37166: PUSH
37167: LD_INT 66
37169: PUSH
37170: LD_INT 67
37172: PUSH
37173: LD_INT 68
37175: PUSH
37176: LD_INT 81
37178: PUSH
37179: LD_INT 82
37181: PUSH
37182: LD_INT 83
37184: PUSH
37185: LD_INT 84
37187: PUSH
37188: LD_INT 85
37190: PUSH
37191: LD_INT 87
37193: PUSH
37194: LD_INT 88
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: ST_TO_ADDR
37253: GO 37486
37255: LD_INT 3
37257: DOUBLE
37258: EQUAL
37259: IFTRUE 37263
37261: GO 37485
37263: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37264: LD_ADDR_VAR 0 4
37268: PUSH
37269: LD_INT 46
37271: PUSH
37272: LD_INT 47
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 2
37280: PUSH
37281: LD_INT 82
37283: PUSH
37284: LD_INT 83
37286: PUSH
37287: LD_INT 84
37289: PUSH
37290: LD_INT 85
37292: PUSH
37293: LD_INT 86
37295: PUSH
37296: LD_INT 11
37298: PUSH
37299: LD_INT 9
37301: PUSH
37302: LD_INT 20
37304: PUSH
37305: LD_INT 19
37307: PUSH
37308: LD_INT 21
37310: PUSH
37311: LD_INT 24
37313: PUSH
37314: LD_INT 22
37316: PUSH
37317: LD_INT 25
37319: PUSH
37320: LD_INT 28
37322: PUSH
37323: LD_INT 29
37325: PUSH
37326: LD_INT 30
37328: PUSH
37329: LD_INT 31
37331: PUSH
37332: LD_INT 37
37334: PUSH
37335: LD_INT 38
37337: PUSH
37338: LD_INT 32
37340: PUSH
37341: LD_INT 27
37343: PUSH
37344: LD_INT 33
37346: PUSH
37347: LD_INT 69
37349: PUSH
37350: LD_INT 39
37352: PUSH
37353: LD_INT 34
37355: PUSH
37356: LD_INT 40
37358: PUSH
37359: LD_INT 71
37361: PUSH
37362: LD_INT 23
37364: PUSH
37365: LD_INT 44
37367: PUSH
37368: LD_INT 48
37370: PUSH
37371: LD_INT 49
37373: PUSH
37374: LD_INT 50
37376: PUSH
37377: LD_INT 51
37379: PUSH
37380: LD_INT 52
37382: PUSH
37383: LD_INT 53
37385: PUSH
37386: LD_INT 54
37388: PUSH
37389: LD_INT 55
37391: PUSH
37392: LD_INT 56
37394: PUSH
37395: LD_INT 57
37397: PUSH
37398: LD_INT 58
37400: PUSH
37401: LD_INT 59
37403: PUSH
37404: LD_INT 63
37406: PUSH
37407: LD_INT 64
37409: PUSH
37410: LD_INT 65
37412: PUSH
37413: LD_INT 82
37415: PUSH
37416: LD_INT 83
37418: PUSH
37419: LD_INT 84
37421: PUSH
37422: LD_INT 85
37424: PUSH
37425: LD_INT 86
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: ST_TO_ADDR
37483: GO 37486
37485: POP
// if state > - 1 and state < 3 then
37486: LD_VAR 0 3
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: GREATER
37495: PUSH
37496: LD_VAR 0 3
37500: PUSH
37501: LD_INT 3
37503: LESS
37504: AND
37505: IFFALSE 37562
// for i in result do
37507: LD_ADDR_VAR 0 5
37511: PUSH
37512: LD_VAR 0 4
37516: PUSH
37517: FOR_IN
37518: IFFALSE 37560
// if GetTech ( i , side ) <> state then
37520: LD_VAR 0 5
37524: PPUSH
37525: LD_VAR 0 1
37529: PPUSH
37530: CALL_OW 321
37534: PUSH
37535: LD_VAR 0 3
37539: NONEQUAL
37540: IFFALSE 37558
// result := result diff i ;
37542: LD_ADDR_VAR 0 4
37546: PUSH
37547: LD_VAR 0 4
37551: PUSH
37552: LD_VAR 0 5
37556: DIFF
37557: ST_TO_ADDR
37558: GO 37517
37560: POP
37561: POP
// end ;
37562: LD_VAR 0 4
37566: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37567: LD_INT 0
37569: PPUSH
37570: PPUSH
37571: PPUSH
// result := true ;
37572: LD_ADDR_VAR 0 3
37576: PUSH
37577: LD_INT 1
37579: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37580: LD_ADDR_VAR 0 5
37584: PUSH
37585: LD_VAR 0 2
37589: PPUSH
37590: CALL_OW 480
37594: ST_TO_ADDR
// if not tmp then
37595: LD_VAR 0 5
37599: NOT
37600: IFFALSE 37604
// exit ;
37602: GO 37653
// for i in tmp do
37604: LD_ADDR_VAR 0 4
37608: PUSH
37609: LD_VAR 0 5
37613: PUSH
37614: FOR_IN
37615: IFFALSE 37651
// if GetTech ( i , side ) <> state_researched then
37617: LD_VAR 0 4
37621: PPUSH
37622: LD_VAR 0 1
37626: PPUSH
37627: CALL_OW 321
37631: PUSH
37632: LD_INT 2
37634: NONEQUAL
37635: IFFALSE 37649
// begin result := false ;
37637: LD_ADDR_VAR 0 3
37641: PUSH
37642: LD_INT 0
37644: ST_TO_ADDR
// exit ;
37645: POP
37646: POP
37647: GO 37653
// end ;
37649: GO 37614
37651: POP
37652: POP
// end ;
37653: LD_VAR 0 3
37657: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37658: LD_INT 0
37660: PPUSH
37661: PPUSH
37662: PPUSH
37663: PPUSH
37664: PPUSH
37665: PPUSH
37666: PPUSH
37667: PPUSH
37668: PPUSH
37669: PPUSH
37670: PPUSH
37671: PPUSH
37672: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37673: LD_VAR 0 1
37677: NOT
37678: PUSH
37679: LD_VAR 0 1
37683: PPUSH
37684: CALL_OW 257
37688: PUSH
37689: LD_INT 9
37691: NONEQUAL
37692: OR
37693: IFFALSE 37697
// exit ;
37695: GO 38270
// side := GetSide ( unit ) ;
37697: LD_ADDR_VAR 0 9
37701: PUSH
37702: LD_VAR 0 1
37706: PPUSH
37707: CALL_OW 255
37711: ST_TO_ADDR
// tech_space := tech_spacanom ;
37712: LD_ADDR_VAR 0 12
37716: PUSH
37717: LD_INT 29
37719: ST_TO_ADDR
// tech_time := tech_taurad ;
37720: LD_ADDR_VAR 0 13
37724: PUSH
37725: LD_INT 28
37727: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37728: LD_ADDR_VAR 0 11
37732: PUSH
37733: LD_VAR 0 1
37737: PPUSH
37738: CALL_OW 310
37742: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37743: LD_VAR 0 11
37747: PPUSH
37748: CALL_OW 247
37752: PUSH
37753: LD_INT 2
37755: EQUAL
37756: IFFALSE 37760
// exit ;
37758: GO 38270
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37760: LD_ADDR_VAR 0 8
37764: PUSH
37765: LD_INT 81
37767: PUSH
37768: LD_VAR 0 9
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 3
37779: PUSH
37780: LD_INT 21
37782: PUSH
37783: LD_INT 3
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PPUSH
37798: CALL_OW 69
37802: ST_TO_ADDR
// if not tmp then
37803: LD_VAR 0 8
37807: NOT
37808: IFFALSE 37812
// exit ;
37810: GO 38270
// if in_unit then
37812: LD_VAR 0 11
37816: IFFALSE 37840
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37818: LD_ADDR_VAR 0 10
37822: PUSH
37823: LD_VAR 0 8
37827: PPUSH
37828: LD_VAR 0 11
37832: PPUSH
37833: CALL_OW 74
37837: ST_TO_ADDR
37838: GO 37860
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37840: LD_ADDR_VAR 0 10
37844: PUSH
37845: LD_VAR 0 8
37849: PPUSH
37850: LD_VAR 0 1
37854: PPUSH
37855: CALL_OW 74
37859: ST_TO_ADDR
// if not enemy then
37860: LD_VAR 0 10
37864: NOT
37865: IFFALSE 37869
// exit ;
37867: GO 38270
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37869: LD_VAR 0 11
37873: PUSH
37874: LD_VAR 0 11
37878: PPUSH
37879: LD_VAR 0 10
37883: PPUSH
37884: CALL_OW 296
37888: PUSH
37889: LD_INT 13
37891: GREATER
37892: AND
37893: PUSH
37894: LD_VAR 0 1
37898: PPUSH
37899: LD_VAR 0 10
37903: PPUSH
37904: CALL_OW 296
37908: PUSH
37909: LD_INT 12
37911: GREATER
37912: OR
37913: IFFALSE 37917
// exit ;
37915: GO 38270
// missile := [ 1 ] ;
37917: LD_ADDR_VAR 0 14
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: EMPTY
37926: LIST
37927: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37928: LD_VAR 0 9
37932: PPUSH
37933: LD_VAR 0 12
37937: PPUSH
37938: CALL_OW 325
37942: IFFALSE 37971
// missile := Insert ( missile , missile + 1 , 2 ) ;
37944: LD_ADDR_VAR 0 14
37948: PUSH
37949: LD_VAR 0 14
37953: PPUSH
37954: LD_VAR 0 14
37958: PUSH
37959: LD_INT 1
37961: PLUS
37962: PPUSH
37963: LD_INT 2
37965: PPUSH
37966: CALL_OW 2
37970: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37971: LD_VAR 0 9
37975: PPUSH
37976: LD_VAR 0 13
37980: PPUSH
37981: CALL_OW 325
37985: PUSH
37986: LD_VAR 0 10
37990: PPUSH
37991: CALL_OW 255
37995: PPUSH
37996: LD_VAR 0 13
38000: PPUSH
38001: CALL_OW 325
38005: NOT
38006: AND
38007: IFFALSE 38036
// missile := Insert ( missile , missile + 1 , 3 ) ;
38009: LD_ADDR_VAR 0 14
38013: PUSH
38014: LD_VAR 0 14
38018: PPUSH
38019: LD_VAR 0 14
38023: PUSH
38024: LD_INT 1
38026: PLUS
38027: PPUSH
38028: LD_INT 3
38030: PPUSH
38031: CALL_OW 2
38035: ST_TO_ADDR
// if missile < 2 then
38036: LD_VAR 0 14
38040: PUSH
38041: LD_INT 2
38043: LESS
38044: IFFALSE 38048
// exit ;
38046: GO 38270
// x := GetX ( enemy ) ;
38048: LD_ADDR_VAR 0 4
38052: PUSH
38053: LD_VAR 0 10
38057: PPUSH
38058: CALL_OW 250
38062: ST_TO_ADDR
// y := GetY ( enemy ) ;
38063: LD_ADDR_VAR 0 5
38067: PUSH
38068: LD_VAR 0 10
38072: PPUSH
38073: CALL_OW 251
38077: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38078: LD_ADDR_VAR 0 6
38082: PUSH
38083: LD_VAR 0 4
38087: PUSH
38088: LD_INT 1
38090: NEG
38091: PPUSH
38092: LD_INT 1
38094: PPUSH
38095: CALL_OW 12
38099: PLUS
38100: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38101: LD_ADDR_VAR 0 7
38105: PUSH
38106: LD_VAR 0 5
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: PPUSH
38115: LD_INT 1
38117: PPUSH
38118: CALL_OW 12
38122: PLUS
38123: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38124: LD_VAR 0 6
38128: PPUSH
38129: LD_VAR 0 7
38133: PPUSH
38134: CALL_OW 488
38138: NOT
38139: IFFALSE 38161
// begin _x := x ;
38141: LD_ADDR_VAR 0 6
38145: PUSH
38146: LD_VAR 0 4
38150: ST_TO_ADDR
// _y := y ;
38151: LD_ADDR_VAR 0 7
38155: PUSH
38156: LD_VAR 0 5
38160: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38161: LD_ADDR_VAR 0 3
38165: PUSH
38166: LD_INT 1
38168: PPUSH
38169: LD_VAR 0 14
38173: PPUSH
38174: CALL_OW 12
38178: ST_TO_ADDR
// case i of 1 :
38179: LD_VAR 0 3
38183: PUSH
38184: LD_INT 1
38186: DOUBLE
38187: EQUAL
38188: IFTRUE 38192
38190: GO 38209
38192: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38193: LD_VAR 0 1
38197: PPUSH
38198: LD_VAR 0 10
38202: PPUSH
38203: CALL_OW 115
38207: GO 38270
38209: LD_INT 2
38211: DOUBLE
38212: EQUAL
38213: IFTRUE 38217
38215: GO 38239
38217: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38218: LD_VAR 0 1
38222: PPUSH
38223: LD_VAR 0 6
38227: PPUSH
38228: LD_VAR 0 7
38232: PPUSH
38233: CALL_OW 153
38237: GO 38270
38239: LD_INT 3
38241: DOUBLE
38242: EQUAL
38243: IFTRUE 38247
38245: GO 38269
38247: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38248: LD_VAR 0 1
38252: PPUSH
38253: LD_VAR 0 6
38257: PPUSH
38258: LD_VAR 0 7
38262: PPUSH
38263: CALL_OW 154
38267: GO 38270
38269: POP
// end ;
38270: LD_VAR 0 2
38274: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38275: LD_INT 0
38277: PPUSH
38278: PPUSH
38279: PPUSH
38280: PPUSH
38281: PPUSH
38282: PPUSH
// if not unit or not building then
38283: LD_VAR 0 1
38287: NOT
38288: PUSH
38289: LD_VAR 0 2
38293: NOT
38294: OR
38295: IFFALSE 38299
// exit ;
38297: GO 38457
// x := GetX ( building ) ;
38299: LD_ADDR_VAR 0 5
38303: PUSH
38304: LD_VAR 0 2
38308: PPUSH
38309: CALL_OW 250
38313: ST_TO_ADDR
// y := GetY ( building ) ;
38314: LD_ADDR_VAR 0 6
38318: PUSH
38319: LD_VAR 0 2
38323: PPUSH
38324: CALL_OW 251
38328: ST_TO_ADDR
// for i = 0 to 5 do
38329: LD_ADDR_VAR 0 4
38333: PUSH
38334: DOUBLE
38335: LD_INT 0
38337: DEC
38338: ST_TO_ADDR
38339: LD_INT 5
38341: PUSH
38342: FOR_TO
38343: IFFALSE 38455
// begin _x := ShiftX ( x , i , 3 ) ;
38345: LD_ADDR_VAR 0 7
38349: PUSH
38350: LD_VAR 0 5
38354: PPUSH
38355: LD_VAR 0 4
38359: PPUSH
38360: LD_INT 3
38362: PPUSH
38363: CALL_OW 272
38367: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38368: LD_ADDR_VAR 0 8
38372: PUSH
38373: LD_VAR 0 6
38377: PPUSH
38378: LD_VAR 0 4
38382: PPUSH
38383: LD_INT 3
38385: PPUSH
38386: CALL_OW 273
38390: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38391: LD_VAR 0 7
38395: PPUSH
38396: LD_VAR 0 8
38400: PPUSH
38401: CALL_OW 488
38405: NOT
38406: IFFALSE 38410
// continue ;
38408: GO 38342
// if HexInfo ( _x , _y ) = 0 then
38410: LD_VAR 0 7
38414: PPUSH
38415: LD_VAR 0 8
38419: PPUSH
38420: CALL_OW 428
38424: PUSH
38425: LD_INT 0
38427: EQUAL
38428: IFFALSE 38453
// begin ComMoveXY ( unit , _x , _y ) ;
38430: LD_VAR 0 1
38434: PPUSH
38435: LD_VAR 0 7
38439: PPUSH
38440: LD_VAR 0 8
38444: PPUSH
38445: CALL_OW 111
// exit ;
38449: POP
38450: POP
38451: GO 38457
// end ; end ;
38453: GO 38342
38455: POP
38456: POP
// end ;
38457: LD_VAR 0 3
38461: RET
// export function ScanBase ( side , base_area ) ; begin
38462: LD_INT 0
38464: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38465: LD_ADDR_VAR 0 3
38469: PUSH
38470: LD_VAR 0 2
38474: PPUSH
38475: LD_INT 81
38477: PUSH
38478: LD_VAR 0 1
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PPUSH
38487: CALL_OW 70
38491: ST_TO_ADDR
// end ;
38492: LD_VAR 0 3
38496: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38497: LD_INT 0
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
// result := false ;
38503: LD_ADDR_VAR 0 2
38507: PUSH
38508: LD_INT 0
38510: ST_TO_ADDR
// side := GetSide ( unit ) ;
38511: LD_ADDR_VAR 0 3
38515: PUSH
38516: LD_VAR 0 1
38520: PPUSH
38521: CALL_OW 255
38525: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38526: LD_ADDR_VAR 0 4
38530: PUSH
38531: LD_VAR 0 1
38535: PPUSH
38536: CALL_OW 248
38540: ST_TO_ADDR
// case nat of 1 :
38541: LD_VAR 0 4
38545: PUSH
38546: LD_INT 1
38548: DOUBLE
38549: EQUAL
38550: IFTRUE 38554
38552: GO 38565
38554: POP
// tech := tech_lassight ; 2 :
38555: LD_ADDR_VAR 0 5
38559: PUSH
38560: LD_INT 12
38562: ST_TO_ADDR
38563: GO 38604
38565: LD_INT 2
38567: DOUBLE
38568: EQUAL
38569: IFTRUE 38573
38571: GO 38584
38573: POP
// tech := tech_mortar ; 3 :
38574: LD_ADDR_VAR 0 5
38578: PUSH
38579: LD_INT 41
38581: ST_TO_ADDR
38582: GO 38604
38584: LD_INT 3
38586: DOUBLE
38587: EQUAL
38588: IFTRUE 38592
38590: GO 38603
38592: POP
// tech := tech_bazooka ; end ;
38593: LD_ADDR_VAR 0 5
38597: PUSH
38598: LD_INT 44
38600: ST_TO_ADDR
38601: GO 38604
38603: POP
// if Researched ( side , tech ) then
38604: LD_VAR 0 3
38608: PPUSH
38609: LD_VAR 0 5
38613: PPUSH
38614: CALL_OW 325
38618: IFFALSE 38645
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38620: LD_ADDR_VAR 0 2
38624: PUSH
38625: LD_INT 5
38627: PUSH
38628: LD_INT 8
38630: PUSH
38631: LD_INT 9
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: LIST
38638: PUSH
38639: LD_VAR 0 4
38643: ARRAY
38644: ST_TO_ADDR
// end ;
38645: LD_VAR 0 2
38649: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38650: LD_INT 0
38652: PPUSH
38653: PPUSH
38654: PPUSH
// if not mines then
38655: LD_VAR 0 2
38659: NOT
38660: IFFALSE 38664
// exit ;
38662: GO 38808
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38664: LD_ADDR_VAR 0 5
38668: PUSH
38669: LD_INT 81
38671: PUSH
38672: LD_VAR 0 1
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 3
38683: PUSH
38684: LD_INT 21
38686: PUSH
38687: LD_INT 3
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PPUSH
38702: CALL_OW 69
38706: ST_TO_ADDR
// for i in mines do
38707: LD_ADDR_VAR 0 4
38711: PUSH
38712: LD_VAR 0 2
38716: PUSH
38717: FOR_IN
38718: IFFALSE 38806
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38720: LD_VAR 0 4
38724: PUSH
38725: LD_INT 1
38727: ARRAY
38728: PPUSH
38729: LD_VAR 0 4
38733: PUSH
38734: LD_INT 2
38736: ARRAY
38737: PPUSH
38738: CALL_OW 458
38742: NOT
38743: IFFALSE 38747
// continue ;
38745: GO 38717
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38747: LD_VAR 0 4
38751: PUSH
38752: LD_INT 1
38754: ARRAY
38755: PPUSH
38756: LD_VAR 0 4
38760: PUSH
38761: LD_INT 2
38763: ARRAY
38764: PPUSH
38765: CALL_OW 428
38769: PUSH
38770: LD_VAR 0 5
38774: IN
38775: IFFALSE 38804
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38777: LD_VAR 0 4
38781: PUSH
38782: LD_INT 1
38784: ARRAY
38785: PPUSH
38786: LD_VAR 0 4
38790: PUSH
38791: LD_INT 2
38793: ARRAY
38794: PPUSH
38795: LD_VAR 0 1
38799: PPUSH
38800: CALL_OW 456
// end ;
38804: GO 38717
38806: POP
38807: POP
// end ;
38808: LD_VAR 0 3
38812: RET
// export function Count ( array ) ; var i ; begin
38813: LD_INT 0
38815: PPUSH
38816: PPUSH
// result := 0 ;
38817: LD_ADDR_VAR 0 2
38821: PUSH
38822: LD_INT 0
38824: ST_TO_ADDR
// for i in array do
38825: LD_ADDR_VAR 0 3
38829: PUSH
38830: LD_VAR 0 1
38834: PUSH
38835: FOR_IN
38836: IFFALSE 38860
// if i then
38838: LD_VAR 0 3
38842: IFFALSE 38858
// result := result + 1 ;
38844: LD_ADDR_VAR 0 2
38848: PUSH
38849: LD_VAR 0 2
38853: PUSH
38854: LD_INT 1
38856: PLUS
38857: ST_TO_ADDR
38858: GO 38835
38860: POP
38861: POP
// end ;
38862: LD_VAR 0 2
38866: RET
// export function IsEmpty ( building ) ; begin
38867: LD_INT 0
38869: PPUSH
// if not building then
38870: LD_VAR 0 1
38874: NOT
38875: IFFALSE 38879
// exit ;
38877: GO 38922
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38879: LD_ADDR_VAR 0 2
38883: PUSH
38884: LD_VAR 0 1
38888: PUSH
38889: LD_INT 22
38891: PUSH
38892: LD_VAR 0 1
38896: PPUSH
38897: CALL_OW 255
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 58
38908: PUSH
38909: EMPTY
38910: LIST
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PPUSH
38916: CALL_OW 69
38920: IN
38921: ST_TO_ADDR
// end ;
38922: LD_VAR 0 2
38926: RET
// export function IsNotFull ( building ) ; begin
38927: LD_INT 0
38929: PPUSH
// if not building then
38930: LD_VAR 0 1
38934: NOT
38935: IFFALSE 38939
// exit ;
38937: GO 38958
// result := UnitsInside ( building ) < 6 ;
38939: LD_ADDR_VAR 0 2
38943: PUSH
38944: LD_VAR 0 1
38948: PPUSH
38949: CALL_OW 313
38953: PUSH
38954: LD_INT 6
38956: LESS
38957: ST_TO_ADDR
// end ;
38958: LD_VAR 0 2
38962: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38963: LD_INT 0
38965: PPUSH
38966: PPUSH
38967: PPUSH
38968: PPUSH
// tmp := [ ] ;
38969: LD_ADDR_VAR 0 3
38973: PUSH
38974: EMPTY
38975: ST_TO_ADDR
// list := [ ] ;
38976: LD_ADDR_VAR 0 5
38980: PUSH
38981: EMPTY
38982: ST_TO_ADDR
// for i = 16 to 25 do
38983: LD_ADDR_VAR 0 4
38987: PUSH
38988: DOUBLE
38989: LD_INT 16
38991: DEC
38992: ST_TO_ADDR
38993: LD_INT 25
38995: PUSH
38996: FOR_TO
38997: IFFALSE 39070
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38999: LD_ADDR_VAR 0 3
39003: PUSH
39004: LD_VAR 0 3
39008: PUSH
39009: LD_INT 22
39011: PUSH
39012: LD_VAR 0 1
39016: PPUSH
39017: CALL_OW 255
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 91
39028: PUSH
39029: LD_VAR 0 1
39033: PUSH
39034: LD_INT 6
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 30
39044: PUSH
39045: LD_VAR 0 4
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: PUSH
39059: EMPTY
39060: LIST
39061: PPUSH
39062: CALL_OW 69
39066: ADD
39067: ST_TO_ADDR
39068: GO 38996
39070: POP
39071: POP
// for i = 1 to tmp do
39072: LD_ADDR_VAR 0 4
39076: PUSH
39077: DOUBLE
39078: LD_INT 1
39080: DEC
39081: ST_TO_ADDR
39082: LD_VAR 0 3
39086: PUSH
39087: FOR_TO
39088: IFFALSE 39176
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39090: LD_ADDR_VAR 0 5
39094: PUSH
39095: LD_VAR 0 5
39099: PUSH
39100: LD_VAR 0 3
39104: PUSH
39105: LD_VAR 0 4
39109: ARRAY
39110: PPUSH
39111: CALL_OW 266
39115: PUSH
39116: LD_VAR 0 3
39120: PUSH
39121: LD_VAR 0 4
39125: ARRAY
39126: PPUSH
39127: CALL_OW 250
39131: PUSH
39132: LD_VAR 0 3
39136: PUSH
39137: LD_VAR 0 4
39141: ARRAY
39142: PPUSH
39143: CALL_OW 251
39147: PUSH
39148: LD_VAR 0 3
39152: PUSH
39153: LD_VAR 0 4
39157: ARRAY
39158: PPUSH
39159: CALL_OW 254
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: PUSH
39170: EMPTY
39171: LIST
39172: ADD
39173: ST_TO_ADDR
39174: GO 39087
39176: POP
39177: POP
// result := list ;
39178: LD_ADDR_VAR 0 2
39182: PUSH
39183: LD_VAR 0 5
39187: ST_TO_ADDR
// end ;
39188: LD_VAR 0 2
39192: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39193: LD_INT 0
39195: PPUSH
39196: PPUSH
39197: PPUSH
39198: PPUSH
39199: PPUSH
39200: PPUSH
39201: PPUSH
// if not factory then
39202: LD_VAR 0 1
39206: NOT
39207: IFFALSE 39211
// exit ;
39209: GO 39804
// if control = control_apeman then
39211: LD_VAR 0 4
39215: PUSH
39216: LD_INT 5
39218: EQUAL
39219: IFFALSE 39328
// begin tmp := UnitsInside ( factory ) ;
39221: LD_ADDR_VAR 0 8
39225: PUSH
39226: LD_VAR 0 1
39230: PPUSH
39231: CALL_OW 313
39235: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39236: LD_VAR 0 8
39240: PPUSH
39241: LD_INT 25
39243: PUSH
39244: LD_INT 12
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PPUSH
39251: CALL_OW 72
39255: NOT
39256: IFFALSE 39266
// control := control_manual ;
39258: LD_ADDR_VAR 0 4
39262: PUSH
39263: LD_INT 1
39265: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39266: LD_ADDR_VAR 0 8
39270: PUSH
39271: LD_VAR 0 1
39275: PPUSH
39276: CALL 38963 0 1
39280: ST_TO_ADDR
// if tmp then
39281: LD_VAR 0 8
39285: IFFALSE 39328
// begin for i in tmp do
39287: LD_ADDR_VAR 0 7
39291: PUSH
39292: LD_VAR 0 8
39296: PUSH
39297: FOR_IN
39298: IFFALSE 39326
// if i [ 1 ] = b_ext_radio then
39300: LD_VAR 0 7
39304: PUSH
39305: LD_INT 1
39307: ARRAY
39308: PUSH
39309: LD_INT 22
39311: EQUAL
39312: IFFALSE 39324
// begin control := control_remote ;
39314: LD_ADDR_VAR 0 4
39318: PUSH
39319: LD_INT 2
39321: ST_TO_ADDR
// break ;
39322: GO 39326
// end ;
39324: GO 39297
39326: POP
39327: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39328: LD_VAR 0 1
39332: PPUSH
39333: LD_VAR 0 2
39337: PPUSH
39338: LD_VAR 0 3
39342: PPUSH
39343: LD_VAR 0 4
39347: PPUSH
39348: LD_VAR 0 5
39352: PPUSH
39353: CALL_OW 448
39357: IFFALSE 39392
// begin result := [ chassis , engine , control , weapon ] ;
39359: LD_ADDR_VAR 0 6
39363: PUSH
39364: LD_VAR 0 2
39368: PUSH
39369: LD_VAR 0 3
39373: PUSH
39374: LD_VAR 0 4
39378: PUSH
39379: LD_VAR 0 5
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: ST_TO_ADDR
// exit ;
39390: GO 39804
// end ; _chassis := AvailableChassisList ( factory ) ;
39392: LD_ADDR_VAR 0 9
39396: PUSH
39397: LD_VAR 0 1
39401: PPUSH
39402: CALL_OW 475
39406: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39407: LD_ADDR_VAR 0 11
39411: PUSH
39412: LD_VAR 0 1
39416: PPUSH
39417: CALL_OW 476
39421: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39422: LD_ADDR_VAR 0 12
39426: PUSH
39427: LD_VAR 0 1
39431: PPUSH
39432: CALL_OW 477
39436: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39437: LD_ADDR_VAR 0 10
39441: PUSH
39442: LD_VAR 0 1
39446: PPUSH
39447: CALL_OW 478
39451: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39452: LD_VAR 0 9
39456: NOT
39457: PUSH
39458: LD_VAR 0 11
39462: NOT
39463: OR
39464: PUSH
39465: LD_VAR 0 12
39469: NOT
39470: OR
39471: PUSH
39472: LD_VAR 0 10
39476: NOT
39477: OR
39478: IFFALSE 39513
// begin result := [ chassis , engine , control , weapon ] ;
39480: LD_ADDR_VAR 0 6
39484: PUSH
39485: LD_VAR 0 2
39489: PUSH
39490: LD_VAR 0 3
39494: PUSH
39495: LD_VAR 0 4
39499: PUSH
39500: LD_VAR 0 5
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: ST_TO_ADDR
// exit ;
39511: GO 39804
// end ; if not chassis in _chassis then
39513: LD_VAR 0 2
39517: PUSH
39518: LD_VAR 0 9
39522: IN
39523: NOT
39524: IFFALSE 39550
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39526: LD_ADDR_VAR 0 2
39530: PUSH
39531: LD_VAR 0 9
39535: PUSH
39536: LD_INT 1
39538: PPUSH
39539: LD_VAR 0 9
39543: PPUSH
39544: CALL_OW 12
39548: ARRAY
39549: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39550: LD_VAR 0 2
39554: PPUSH
39555: LD_VAR 0 3
39559: PPUSH
39560: CALL 39809 0 2
39564: NOT
39565: IFFALSE 39624
// repeat engine := _engine [ 1 ] ;
39567: LD_ADDR_VAR 0 3
39571: PUSH
39572: LD_VAR 0 11
39576: PUSH
39577: LD_INT 1
39579: ARRAY
39580: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39581: LD_ADDR_VAR 0 11
39585: PUSH
39586: LD_VAR 0 11
39590: PPUSH
39591: LD_INT 1
39593: PPUSH
39594: CALL_OW 3
39598: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39599: LD_VAR 0 2
39603: PPUSH
39604: LD_VAR 0 3
39608: PPUSH
39609: CALL 39809 0 2
39613: PUSH
39614: LD_VAR 0 11
39618: PUSH
39619: EMPTY
39620: EQUAL
39621: OR
39622: IFFALSE 39567
// if not control in _control then
39624: LD_VAR 0 4
39628: PUSH
39629: LD_VAR 0 12
39633: IN
39634: NOT
39635: IFFALSE 39661
// control := _control [ rand ( 1 , _control ) ] ;
39637: LD_ADDR_VAR 0 4
39641: PUSH
39642: LD_VAR 0 12
39646: PUSH
39647: LD_INT 1
39649: PPUSH
39650: LD_VAR 0 12
39654: PPUSH
39655: CALL_OW 12
39659: ARRAY
39660: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39661: LD_VAR 0 2
39665: PPUSH
39666: LD_VAR 0 5
39670: PPUSH
39671: CALL 40029 0 2
39675: NOT
39676: IFFALSE 39735
// repeat weapon := _weapon [ 1 ] ;
39678: LD_ADDR_VAR 0 5
39682: PUSH
39683: LD_VAR 0 10
39687: PUSH
39688: LD_INT 1
39690: ARRAY
39691: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39692: LD_ADDR_VAR 0 10
39696: PUSH
39697: LD_VAR 0 10
39701: PPUSH
39702: LD_INT 1
39704: PPUSH
39705: CALL_OW 3
39709: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39710: LD_VAR 0 2
39714: PPUSH
39715: LD_VAR 0 5
39719: PPUSH
39720: CALL 40029 0 2
39724: PUSH
39725: LD_VAR 0 10
39729: PUSH
39730: EMPTY
39731: EQUAL
39732: OR
39733: IFFALSE 39678
// result := [ ] ;
39735: LD_ADDR_VAR 0 6
39739: PUSH
39740: EMPTY
39741: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39742: LD_VAR 0 1
39746: PPUSH
39747: LD_VAR 0 2
39751: PPUSH
39752: LD_VAR 0 3
39756: PPUSH
39757: LD_VAR 0 4
39761: PPUSH
39762: LD_VAR 0 5
39766: PPUSH
39767: CALL_OW 448
39771: IFFALSE 39804
// result := [ chassis , engine , control , weapon ] ;
39773: LD_ADDR_VAR 0 6
39777: PUSH
39778: LD_VAR 0 2
39782: PUSH
39783: LD_VAR 0 3
39787: PUSH
39788: LD_VAR 0 4
39792: PUSH
39793: LD_VAR 0 5
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: ST_TO_ADDR
// end ;
39804: LD_VAR 0 6
39808: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39809: LD_INT 0
39811: PPUSH
// if not chassis or not engine then
39812: LD_VAR 0 1
39816: NOT
39817: PUSH
39818: LD_VAR 0 2
39822: NOT
39823: OR
39824: IFFALSE 39828
// exit ;
39826: GO 40024
// case engine of engine_solar :
39828: LD_VAR 0 2
39832: PUSH
39833: LD_INT 2
39835: DOUBLE
39836: EQUAL
39837: IFTRUE 39841
39839: GO 39879
39841: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39842: LD_ADDR_VAR 0 3
39846: PUSH
39847: LD_INT 11
39849: PUSH
39850: LD_INT 12
39852: PUSH
39853: LD_INT 13
39855: PUSH
39856: LD_INT 14
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: LD_INT 2
39864: PUSH
39865: LD_INT 3
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: ST_TO_ADDR
39877: GO 40008
39879: LD_INT 1
39881: DOUBLE
39882: EQUAL
39883: IFTRUE 39887
39885: GO 39949
39887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39888: LD_ADDR_VAR 0 3
39892: PUSH
39893: LD_INT 11
39895: PUSH
39896: LD_INT 12
39898: PUSH
39899: LD_INT 13
39901: PUSH
39902: LD_INT 14
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: LD_INT 3
39913: PUSH
39914: LD_INT 4
39916: PUSH
39917: LD_INT 5
39919: PUSH
39920: LD_INT 21
39922: PUSH
39923: LD_INT 23
39925: PUSH
39926: LD_INT 22
39928: PUSH
39929: LD_INT 24
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: ST_TO_ADDR
39947: GO 40008
39949: LD_INT 3
39951: DOUBLE
39952: EQUAL
39953: IFTRUE 39957
39955: GO 40007
39957: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39958: LD_ADDR_VAR 0 3
39962: PUSH
39963: LD_INT 13
39965: PUSH
39966: LD_INT 14
39968: PUSH
39969: LD_INT 2
39971: PUSH
39972: LD_INT 3
39974: PUSH
39975: LD_INT 4
39977: PUSH
39978: LD_INT 5
39980: PUSH
39981: LD_INT 21
39983: PUSH
39984: LD_INT 22
39986: PUSH
39987: LD_INT 23
39989: PUSH
39990: LD_INT 24
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: ST_TO_ADDR
40005: GO 40008
40007: POP
// result := ( chassis in result ) ;
40008: LD_ADDR_VAR 0 3
40012: PUSH
40013: LD_VAR 0 1
40017: PUSH
40018: LD_VAR 0 3
40022: IN
40023: ST_TO_ADDR
// end ;
40024: LD_VAR 0 3
40028: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40029: LD_INT 0
40031: PPUSH
// if not chassis or not weapon then
40032: LD_VAR 0 1
40036: NOT
40037: PUSH
40038: LD_VAR 0 2
40042: NOT
40043: OR
40044: IFFALSE 40048
// exit ;
40046: GO 41110
// case weapon of us_machine_gun :
40048: LD_VAR 0 2
40052: PUSH
40053: LD_INT 2
40055: DOUBLE
40056: EQUAL
40057: IFTRUE 40061
40059: GO 40091
40061: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40062: LD_ADDR_VAR 0 3
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: LD_INT 2
40072: PUSH
40073: LD_INT 3
40075: PUSH
40076: LD_INT 4
40078: PUSH
40079: LD_INT 5
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: ST_TO_ADDR
40089: GO 41094
40091: LD_INT 3
40093: DOUBLE
40094: EQUAL
40095: IFTRUE 40099
40097: GO 40129
40099: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40100: LD_ADDR_VAR 0 3
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: LD_INT 2
40110: PUSH
40111: LD_INT 3
40113: PUSH
40114: LD_INT 4
40116: PUSH
40117: LD_INT 5
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: ST_TO_ADDR
40127: GO 41094
40129: LD_INT 11
40131: DOUBLE
40132: EQUAL
40133: IFTRUE 40137
40135: GO 40167
40137: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40138: LD_ADDR_VAR 0 3
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: LD_INT 3
40151: PUSH
40152: LD_INT 4
40154: PUSH
40155: LD_INT 5
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: ST_TO_ADDR
40165: GO 41094
40167: LD_INT 4
40169: DOUBLE
40170: EQUAL
40171: IFTRUE 40175
40173: GO 40201
40175: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40176: LD_ADDR_VAR 0 3
40180: PUSH
40181: LD_INT 2
40183: PUSH
40184: LD_INT 3
40186: PUSH
40187: LD_INT 4
40189: PUSH
40190: LD_INT 5
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: ST_TO_ADDR
40199: GO 41094
40201: LD_INT 5
40203: DOUBLE
40204: EQUAL
40205: IFTRUE 40209
40207: GO 40235
40209: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40210: LD_ADDR_VAR 0 3
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: LD_INT 3
40220: PUSH
40221: LD_INT 4
40223: PUSH
40224: LD_INT 5
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: ST_TO_ADDR
40233: GO 41094
40235: LD_INT 9
40237: DOUBLE
40238: EQUAL
40239: IFTRUE 40243
40241: GO 40269
40243: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40244: LD_ADDR_VAR 0 3
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: LD_INT 3
40254: PUSH
40255: LD_INT 4
40257: PUSH
40258: LD_INT 5
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: ST_TO_ADDR
40267: GO 41094
40269: LD_INT 7
40271: DOUBLE
40272: EQUAL
40273: IFTRUE 40277
40275: GO 40303
40277: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40278: LD_ADDR_VAR 0 3
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: LD_INT 3
40288: PUSH
40289: LD_INT 4
40291: PUSH
40292: LD_INT 5
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: ST_TO_ADDR
40301: GO 41094
40303: LD_INT 12
40305: DOUBLE
40306: EQUAL
40307: IFTRUE 40311
40309: GO 40337
40311: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40312: LD_ADDR_VAR 0 3
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: LD_INT 3
40322: PUSH
40323: LD_INT 4
40325: PUSH
40326: LD_INT 5
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: ST_TO_ADDR
40335: GO 41094
40337: LD_INT 13
40339: DOUBLE
40340: EQUAL
40341: IFTRUE 40345
40343: GO 40371
40345: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40346: LD_ADDR_VAR 0 3
40350: PUSH
40351: LD_INT 2
40353: PUSH
40354: LD_INT 3
40356: PUSH
40357: LD_INT 4
40359: PUSH
40360: LD_INT 5
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: ST_TO_ADDR
40369: GO 41094
40371: LD_INT 14
40373: DOUBLE
40374: EQUAL
40375: IFTRUE 40379
40377: GO 40397
40379: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40380: LD_ADDR_VAR 0 3
40384: PUSH
40385: LD_INT 4
40387: PUSH
40388: LD_INT 5
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: ST_TO_ADDR
40395: GO 41094
40397: LD_INT 6
40399: DOUBLE
40400: EQUAL
40401: IFTRUE 40405
40403: GO 40423
40405: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40406: LD_ADDR_VAR 0 3
40410: PUSH
40411: LD_INT 4
40413: PUSH
40414: LD_INT 5
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: ST_TO_ADDR
40421: GO 41094
40423: LD_INT 10
40425: DOUBLE
40426: EQUAL
40427: IFTRUE 40431
40429: GO 40449
40431: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40432: LD_ADDR_VAR 0 3
40436: PUSH
40437: LD_INT 4
40439: PUSH
40440: LD_INT 5
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: ST_TO_ADDR
40447: GO 41094
40449: LD_INT 22
40451: DOUBLE
40452: EQUAL
40453: IFTRUE 40457
40455: GO 40483
40457: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40458: LD_ADDR_VAR 0 3
40462: PUSH
40463: LD_INT 11
40465: PUSH
40466: LD_INT 12
40468: PUSH
40469: LD_INT 13
40471: PUSH
40472: LD_INT 14
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: ST_TO_ADDR
40481: GO 41094
40483: LD_INT 23
40485: DOUBLE
40486: EQUAL
40487: IFTRUE 40491
40489: GO 40517
40491: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40492: LD_ADDR_VAR 0 3
40496: PUSH
40497: LD_INT 11
40499: PUSH
40500: LD_INT 12
40502: PUSH
40503: LD_INT 13
40505: PUSH
40506: LD_INT 14
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: ST_TO_ADDR
40515: GO 41094
40517: LD_INT 24
40519: DOUBLE
40520: EQUAL
40521: IFTRUE 40525
40523: GO 40551
40525: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40526: LD_ADDR_VAR 0 3
40530: PUSH
40531: LD_INT 11
40533: PUSH
40534: LD_INT 12
40536: PUSH
40537: LD_INT 13
40539: PUSH
40540: LD_INT 14
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: ST_TO_ADDR
40549: GO 41094
40551: LD_INT 30
40553: DOUBLE
40554: EQUAL
40555: IFTRUE 40559
40557: GO 40585
40559: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40560: LD_ADDR_VAR 0 3
40564: PUSH
40565: LD_INT 11
40567: PUSH
40568: LD_INT 12
40570: PUSH
40571: LD_INT 13
40573: PUSH
40574: LD_INT 14
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: ST_TO_ADDR
40583: GO 41094
40585: LD_INT 25
40587: DOUBLE
40588: EQUAL
40589: IFTRUE 40593
40591: GO 40611
40593: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40594: LD_ADDR_VAR 0 3
40598: PUSH
40599: LD_INT 13
40601: PUSH
40602: LD_INT 14
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: ST_TO_ADDR
40609: GO 41094
40611: LD_INT 27
40613: DOUBLE
40614: EQUAL
40615: IFTRUE 40619
40617: GO 40637
40619: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40620: LD_ADDR_VAR 0 3
40624: PUSH
40625: LD_INT 13
40627: PUSH
40628: LD_INT 14
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: ST_TO_ADDR
40635: GO 41094
40637: LD_EXP 48
40641: DOUBLE
40642: EQUAL
40643: IFTRUE 40647
40645: GO 40673
40647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40648: LD_ADDR_VAR 0 3
40652: PUSH
40653: LD_INT 11
40655: PUSH
40656: LD_INT 12
40658: PUSH
40659: LD_INT 13
40661: PUSH
40662: LD_INT 14
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: ST_TO_ADDR
40671: GO 41094
40673: LD_INT 28
40675: DOUBLE
40676: EQUAL
40677: IFTRUE 40681
40679: GO 40699
40681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40682: LD_ADDR_VAR 0 3
40686: PUSH
40687: LD_INT 13
40689: PUSH
40690: LD_INT 14
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: ST_TO_ADDR
40697: GO 41094
40699: LD_INT 29
40701: DOUBLE
40702: EQUAL
40703: IFTRUE 40707
40705: GO 40725
40707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40708: LD_ADDR_VAR 0 3
40712: PUSH
40713: LD_INT 13
40715: PUSH
40716: LD_INT 14
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: ST_TO_ADDR
40723: GO 41094
40725: LD_INT 31
40727: DOUBLE
40728: EQUAL
40729: IFTRUE 40733
40731: GO 40751
40733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40734: LD_ADDR_VAR 0 3
40738: PUSH
40739: LD_INT 13
40741: PUSH
40742: LD_INT 14
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: ST_TO_ADDR
40749: GO 41094
40751: LD_INT 26
40753: DOUBLE
40754: EQUAL
40755: IFTRUE 40759
40757: GO 40777
40759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40760: LD_ADDR_VAR 0 3
40764: PUSH
40765: LD_INT 13
40767: PUSH
40768: LD_INT 14
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: ST_TO_ADDR
40775: GO 41094
40777: LD_INT 42
40779: DOUBLE
40780: EQUAL
40781: IFTRUE 40785
40783: GO 40811
40785: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40786: LD_ADDR_VAR 0 3
40790: PUSH
40791: LD_INT 21
40793: PUSH
40794: LD_INT 22
40796: PUSH
40797: LD_INT 23
40799: PUSH
40800: LD_INT 24
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: ST_TO_ADDR
40809: GO 41094
40811: LD_INT 43
40813: DOUBLE
40814: EQUAL
40815: IFTRUE 40819
40817: GO 40845
40819: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40820: LD_ADDR_VAR 0 3
40824: PUSH
40825: LD_INT 21
40827: PUSH
40828: LD_INT 22
40830: PUSH
40831: LD_INT 23
40833: PUSH
40834: LD_INT 24
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: ST_TO_ADDR
40843: GO 41094
40845: LD_INT 44
40847: DOUBLE
40848: EQUAL
40849: IFTRUE 40853
40851: GO 40879
40853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40854: LD_ADDR_VAR 0 3
40858: PUSH
40859: LD_INT 21
40861: PUSH
40862: LD_INT 22
40864: PUSH
40865: LD_INT 23
40867: PUSH
40868: LD_INT 24
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: ST_TO_ADDR
40877: GO 41094
40879: LD_INT 45
40881: DOUBLE
40882: EQUAL
40883: IFTRUE 40887
40885: GO 40913
40887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40888: LD_ADDR_VAR 0 3
40892: PUSH
40893: LD_INT 21
40895: PUSH
40896: LD_INT 22
40898: PUSH
40899: LD_INT 23
40901: PUSH
40902: LD_INT 24
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: ST_TO_ADDR
40911: GO 41094
40913: LD_INT 49
40915: DOUBLE
40916: EQUAL
40917: IFTRUE 40921
40919: GO 40947
40921: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40922: LD_ADDR_VAR 0 3
40926: PUSH
40927: LD_INT 21
40929: PUSH
40930: LD_INT 22
40932: PUSH
40933: LD_INT 23
40935: PUSH
40936: LD_INT 24
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: ST_TO_ADDR
40945: GO 41094
40947: LD_INT 51
40949: DOUBLE
40950: EQUAL
40951: IFTRUE 40955
40953: GO 40981
40955: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40956: LD_ADDR_VAR 0 3
40960: PUSH
40961: LD_INT 21
40963: PUSH
40964: LD_INT 22
40966: PUSH
40967: LD_INT 23
40969: PUSH
40970: LD_INT 24
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: ST_TO_ADDR
40979: GO 41094
40981: LD_INT 52
40983: DOUBLE
40984: EQUAL
40985: IFTRUE 40989
40987: GO 41015
40989: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40990: LD_ADDR_VAR 0 3
40994: PUSH
40995: LD_INT 21
40997: PUSH
40998: LD_INT 22
41000: PUSH
41001: LD_INT 23
41003: PUSH
41004: LD_INT 24
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: ST_TO_ADDR
41013: GO 41094
41015: LD_INT 53
41017: DOUBLE
41018: EQUAL
41019: IFTRUE 41023
41021: GO 41041
41023: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41024: LD_ADDR_VAR 0 3
41028: PUSH
41029: LD_INT 23
41031: PUSH
41032: LD_INT 24
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: ST_TO_ADDR
41039: GO 41094
41041: LD_INT 46
41043: DOUBLE
41044: EQUAL
41045: IFTRUE 41049
41047: GO 41067
41049: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41050: LD_ADDR_VAR 0 3
41054: PUSH
41055: LD_INT 23
41057: PUSH
41058: LD_INT 24
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: ST_TO_ADDR
41065: GO 41094
41067: LD_INT 47
41069: DOUBLE
41070: EQUAL
41071: IFTRUE 41075
41073: GO 41093
41075: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41076: LD_ADDR_VAR 0 3
41080: PUSH
41081: LD_INT 23
41083: PUSH
41084: LD_INT 24
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: ST_TO_ADDR
41091: GO 41094
41093: POP
// result := ( chassis in result ) ;
41094: LD_ADDR_VAR 0 3
41098: PUSH
41099: LD_VAR 0 1
41103: PUSH
41104: LD_VAR 0 3
41108: IN
41109: ST_TO_ADDR
// end ;
41110: LD_VAR 0 3
41114: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41115: LD_INT 0
41117: PPUSH
41118: PPUSH
41119: PPUSH
41120: PPUSH
41121: PPUSH
41122: PPUSH
41123: PPUSH
// result := array ;
41124: LD_ADDR_VAR 0 5
41128: PUSH
41129: LD_VAR 0 1
41133: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41134: LD_VAR 0 1
41138: NOT
41139: PUSH
41140: LD_VAR 0 2
41144: NOT
41145: OR
41146: PUSH
41147: LD_VAR 0 3
41151: NOT
41152: OR
41153: PUSH
41154: LD_VAR 0 2
41158: PUSH
41159: LD_VAR 0 1
41163: GREATER
41164: OR
41165: PUSH
41166: LD_VAR 0 3
41170: PUSH
41171: LD_VAR 0 1
41175: GREATER
41176: OR
41177: IFFALSE 41181
// exit ;
41179: GO 41477
// if direction then
41181: LD_VAR 0 4
41185: IFFALSE 41249
// begin d := 1 ;
41187: LD_ADDR_VAR 0 9
41191: PUSH
41192: LD_INT 1
41194: ST_TO_ADDR
// if i_from > i_to then
41195: LD_VAR 0 2
41199: PUSH
41200: LD_VAR 0 3
41204: GREATER
41205: IFFALSE 41231
// length := ( array - i_from ) + i_to else
41207: LD_ADDR_VAR 0 11
41211: PUSH
41212: LD_VAR 0 1
41216: PUSH
41217: LD_VAR 0 2
41221: MINUS
41222: PUSH
41223: LD_VAR 0 3
41227: PLUS
41228: ST_TO_ADDR
41229: GO 41247
// length := i_to - i_from ;
41231: LD_ADDR_VAR 0 11
41235: PUSH
41236: LD_VAR 0 3
41240: PUSH
41241: LD_VAR 0 2
41245: MINUS
41246: ST_TO_ADDR
// end else
41247: GO 41310
// begin d := - 1 ;
41249: LD_ADDR_VAR 0 9
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: ST_TO_ADDR
// if i_from > i_to then
41258: LD_VAR 0 2
41262: PUSH
41263: LD_VAR 0 3
41267: GREATER
41268: IFFALSE 41288
// length := i_from - i_to else
41270: LD_ADDR_VAR 0 11
41274: PUSH
41275: LD_VAR 0 2
41279: PUSH
41280: LD_VAR 0 3
41284: MINUS
41285: ST_TO_ADDR
41286: GO 41310
// length := ( array - i_to ) + i_from ;
41288: LD_ADDR_VAR 0 11
41292: PUSH
41293: LD_VAR 0 1
41297: PUSH
41298: LD_VAR 0 3
41302: MINUS
41303: PUSH
41304: LD_VAR 0 2
41308: PLUS
41309: ST_TO_ADDR
// end ; if not length then
41310: LD_VAR 0 11
41314: NOT
41315: IFFALSE 41319
// exit ;
41317: GO 41477
// tmp := array ;
41319: LD_ADDR_VAR 0 10
41323: PUSH
41324: LD_VAR 0 1
41328: ST_TO_ADDR
// for i = 1 to length do
41329: LD_ADDR_VAR 0 6
41333: PUSH
41334: DOUBLE
41335: LD_INT 1
41337: DEC
41338: ST_TO_ADDR
41339: LD_VAR 0 11
41343: PUSH
41344: FOR_TO
41345: IFFALSE 41465
// begin for j = 1 to array do
41347: LD_ADDR_VAR 0 7
41351: PUSH
41352: DOUBLE
41353: LD_INT 1
41355: DEC
41356: ST_TO_ADDR
41357: LD_VAR 0 1
41361: PUSH
41362: FOR_TO
41363: IFFALSE 41451
// begin k := j + d ;
41365: LD_ADDR_VAR 0 8
41369: PUSH
41370: LD_VAR 0 7
41374: PUSH
41375: LD_VAR 0 9
41379: PLUS
41380: ST_TO_ADDR
// if k > array then
41381: LD_VAR 0 8
41385: PUSH
41386: LD_VAR 0 1
41390: GREATER
41391: IFFALSE 41401
// k := 1 ;
41393: LD_ADDR_VAR 0 8
41397: PUSH
41398: LD_INT 1
41400: ST_TO_ADDR
// if not k then
41401: LD_VAR 0 8
41405: NOT
41406: IFFALSE 41418
// k := array ;
41408: LD_ADDR_VAR 0 8
41412: PUSH
41413: LD_VAR 0 1
41417: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41418: LD_ADDR_VAR 0 10
41422: PUSH
41423: LD_VAR 0 10
41427: PPUSH
41428: LD_VAR 0 8
41432: PPUSH
41433: LD_VAR 0 1
41437: PUSH
41438: LD_VAR 0 7
41442: ARRAY
41443: PPUSH
41444: CALL_OW 1
41448: ST_TO_ADDR
// end ;
41449: GO 41362
41451: POP
41452: POP
// array := tmp ;
41453: LD_ADDR_VAR 0 1
41457: PUSH
41458: LD_VAR 0 10
41462: ST_TO_ADDR
// end ;
41463: GO 41344
41465: POP
41466: POP
// result := array ;
41467: LD_ADDR_VAR 0 5
41471: PUSH
41472: LD_VAR 0 1
41476: ST_TO_ADDR
// end ;
41477: LD_VAR 0 5
41481: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41482: LD_INT 0
41484: PPUSH
41485: PPUSH
// result := 0 ;
41486: LD_ADDR_VAR 0 3
41490: PUSH
41491: LD_INT 0
41493: ST_TO_ADDR
// if not array or not value in array then
41494: LD_VAR 0 1
41498: NOT
41499: PUSH
41500: LD_VAR 0 2
41504: PUSH
41505: LD_VAR 0 1
41509: IN
41510: NOT
41511: OR
41512: IFFALSE 41516
// exit ;
41514: GO 41570
// for i = 1 to array do
41516: LD_ADDR_VAR 0 4
41520: PUSH
41521: DOUBLE
41522: LD_INT 1
41524: DEC
41525: ST_TO_ADDR
41526: LD_VAR 0 1
41530: PUSH
41531: FOR_TO
41532: IFFALSE 41568
// if value = array [ i ] then
41534: LD_VAR 0 2
41538: PUSH
41539: LD_VAR 0 1
41543: PUSH
41544: LD_VAR 0 4
41548: ARRAY
41549: EQUAL
41550: IFFALSE 41566
// begin result := i ;
41552: LD_ADDR_VAR 0 3
41556: PUSH
41557: LD_VAR 0 4
41561: ST_TO_ADDR
// exit ;
41562: POP
41563: POP
41564: GO 41570
// end ;
41566: GO 41531
41568: POP
41569: POP
// end ;
41570: LD_VAR 0 3
41574: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41575: LD_INT 0
41577: PPUSH
// vc_chassis := chassis ;
41578: LD_ADDR_OWVAR 37
41582: PUSH
41583: LD_VAR 0 1
41587: ST_TO_ADDR
// vc_engine := engine ;
41588: LD_ADDR_OWVAR 39
41592: PUSH
41593: LD_VAR 0 2
41597: ST_TO_ADDR
// vc_control := control ;
41598: LD_ADDR_OWVAR 38
41602: PUSH
41603: LD_VAR 0 3
41607: ST_TO_ADDR
// vc_weapon := weapon ;
41608: LD_ADDR_OWVAR 40
41612: PUSH
41613: LD_VAR 0 4
41617: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41618: LD_ADDR_OWVAR 41
41622: PUSH
41623: LD_VAR 0 5
41627: ST_TO_ADDR
// end ;
41628: LD_VAR 0 6
41632: RET
// export function WantPlant ( unit ) ; var task ; begin
41633: LD_INT 0
41635: PPUSH
41636: PPUSH
// result := false ;
41637: LD_ADDR_VAR 0 2
41641: PUSH
41642: LD_INT 0
41644: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41645: LD_ADDR_VAR 0 3
41649: PUSH
41650: LD_VAR 0 1
41654: PPUSH
41655: CALL_OW 437
41659: ST_TO_ADDR
// if task then
41660: LD_VAR 0 3
41664: IFFALSE 41692
// if task [ 1 ] [ 1 ] = p then
41666: LD_VAR 0 3
41670: PUSH
41671: LD_INT 1
41673: ARRAY
41674: PUSH
41675: LD_INT 1
41677: ARRAY
41678: PUSH
41679: LD_STRING p
41681: EQUAL
41682: IFFALSE 41692
// result := true ;
41684: LD_ADDR_VAR 0 2
41688: PUSH
41689: LD_INT 1
41691: ST_TO_ADDR
// end ;
41692: LD_VAR 0 2
41696: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41697: LD_INT 0
41699: PPUSH
41700: PPUSH
41701: PPUSH
41702: PPUSH
// if pos < 1 then
41703: LD_VAR 0 2
41707: PUSH
41708: LD_INT 1
41710: LESS
41711: IFFALSE 41715
// exit ;
41713: GO 42018
// if pos = 1 then
41715: LD_VAR 0 2
41719: PUSH
41720: LD_INT 1
41722: EQUAL
41723: IFFALSE 41756
// result := Replace ( arr , pos [ 1 ] , value ) else
41725: LD_ADDR_VAR 0 4
41729: PUSH
41730: LD_VAR 0 1
41734: PPUSH
41735: LD_VAR 0 2
41739: PUSH
41740: LD_INT 1
41742: ARRAY
41743: PPUSH
41744: LD_VAR 0 3
41748: PPUSH
41749: CALL_OW 1
41753: ST_TO_ADDR
41754: GO 42018
// begin tmp := arr ;
41756: LD_ADDR_VAR 0 6
41760: PUSH
41761: LD_VAR 0 1
41765: ST_TO_ADDR
// s_arr := [ tmp ] ;
41766: LD_ADDR_VAR 0 7
41770: PUSH
41771: LD_VAR 0 6
41775: PUSH
41776: EMPTY
41777: LIST
41778: ST_TO_ADDR
// for i = 1 to pos - 1 do
41779: LD_ADDR_VAR 0 5
41783: PUSH
41784: DOUBLE
41785: LD_INT 1
41787: DEC
41788: ST_TO_ADDR
41789: LD_VAR 0 2
41793: PUSH
41794: LD_INT 1
41796: MINUS
41797: PUSH
41798: FOR_TO
41799: IFFALSE 41844
// begin tmp := tmp [ pos [ i ] ] ;
41801: LD_ADDR_VAR 0 6
41805: PUSH
41806: LD_VAR 0 6
41810: PUSH
41811: LD_VAR 0 2
41815: PUSH
41816: LD_VAR 0 5
41820: ARRAY
41821: ARRAY
41822: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41823: LD_ADDR_VAR 0 7
41827: PUSH
41828: LD_VAR 0 7
41832: PUSH
41833: LD_VAR 0 6
41837: PUSH
41838: EMPTY
41839: LIST
41840: ADD
41841: ST_TO_ADDR
// end ;
41842: GO 41798
41844: POP
41845: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41846: LD_ADDR_VAR 0 6
41850: PUSH
41851: LD_VAR 0 6
41855: PPUSH
41856: LD_VAR 0 2
41860: PUSH
41861: LD_VAR 0 2
41865: ARRAY
41866: PPUSH
41867: LD_VAR 0 3
41871: PPUSH
41872: CALL_OW 1
41876: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41877: LD_ADDR_VAR 0 7
41881: PUSH
41882: LD_VAR 0 7
41886: PPUSH
41887: LD_VAR 0 7
41891: PPUSH
41892: LD_VAR 0 6
41896: PPUSH
41897: CALL_OW 1
41901: ST_TO_ADDR
// for i = s_arr downto 2 do
41902: LD_ADDR_VAR 0 5
41906: PUSH
41907: DOUBLE
41908: LD_VAR 0 7
41912: INC
41913: ST_TO_ADDR
41914: LD_INT 2
41916: PUSH
41917: FOR_DOWNTO
41918: IFFALSE 42002
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41920: LD_ADDR_VAR 0 6
41924: PUSH
41925: LD_VAR 0 7
41929: PUSH
41930: LD_VAR 0 5
41934: PUSH
41935: LD_INT 1
41937: MINUS
41938: ARRAY
41939: PPUSH
41940: LD_VAR 0 2
41944: PUSH
41945: LD_VAR 0 5
41949: PUSH
41950: LD_INT 1
41952: MINUS
41953: ARRAY
41954: PPUSH
41955: LD_VAR 0 7
41959: PUSH
41960: LD_VAR 0 5
41964: ARRAY
41965: PPUSH
41966: CALL_OW 1
41970: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41971: LD_ADDR_VAR 0 7
41975: PUSH
41976: LD_VAR 0 7
41980: PPUSH
41981: LD_VAR 0 5
41985: PUSH
41986: LD_INT 1
41988: MINUS
41989: PPUSH
41990: LD_VAR 0 6
41994: PPUSH
41995: CALL_OW 1
41999: ST_TO_ADDR
// end ;
42000: GO 41917
42002: POP
42003: POP
// result := s_arr [ 1 ] ;
42004: LD_ADDR_VAR 0 4
42008: PUSH
42009: LD_VAR 0 7
42013: PUSH
42014: LD_INT 1
42016: ARRAY
42017: ST_TO_ADDR
// end ; end ;
42018: LD_VAR 0 4
42022: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42023: LD_INT 0
42025: PPUSH
42026: PPUSH
// if not list then
42027: LD_VAR 0 1
42031: NOT
42032: IFFALSE 42036
// exit ;
42034: GO 42127
// i := list [ pos1 ] ;
42036: LD_ADDR_VAR 0 5
42040: PUSH
42041: LD_VAR 0 1
42045: PUSH
42046: LD_VAR 0 2
42050: ARRAY
42051: ST_TO_ADDR
// if not i then
42052: LD_VAR 0 5
42056: NOT
42057: IFFALSE 42061
// exit ;
42059: GO 42127
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42061: LD_ADDR_VAR 0 1
42065: PUSH
42066: LD_VAR 0 1
42070: PPUSH
42071: LD_VAR 0 2
42075: PPUSH
42076: LD_VAR 0 1
42080: PUSH
42081: LD_VAR 0 3
42085: ARRAY
42086: PPUSH
42087: CALL_OW 1
42091: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42092: LD_ADDR_VAR 0 1
42096: PUSH
42097: LD_VAR 0 1
42101: PPUSH
42102: LD_VAR 0 3
42106: PPUSH
42107: LD_VAR 0 5
42111: PPUSH
42112: CALL_OW 1
42116: ST_TO_ADDR
// result := list ;
42117: LD_ADDR_VAR 0 4
42121: PUSH
42122: LD_VAR 0 1
42126: ST_TO_ADDR
// end ;
42127: LD_VAR 0 4
42131: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42132: LD_INT 0
42134: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42135: LD_ADDR_VAR 0 5
42139: PUSH
42140: LD_VAR 0 1
42144: PPUSH
42145: CALL_OW 250
42149: PPUSH
42150: LD_VAR 0 1
42154: PPUSH
42155: CALL_OW 251
42159: PPUSH
42160: LD_VAR 0 2
42164: PPUSH
42165: LD_VAR 0 3
42169: PPUSH
42170: LD_VAR 0 4
42174: PPUSH
42175: CALL 42185 0 5
42179: ST_TO_ADDR
// end ;
42180: LD_VAR 0 5
42184: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42185: LD_INT 0
42187: PPUSH
42188: PPUSH
42189: PPUSH
42190: PPUSH
// if not list then
42191: LD_VAR 0 3
42195: NOT
42196: IFFALSE 42200
// exit ;
42198: GO 42588
// result := [ ] ;
42200: LD_ADDR_VAR 0 6
42204: PUSH
42205: EMPTY
42206: ST_TO_ADDR
// for i in list do
42207: LD_ADDR_VAR 0 7
42211: PUSH
42212: LD_VAR 0 3
42216: PUSH
42217: FOR_IN
42218: IFFALSE 42420
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42220: LD_ADDR_VAR 0 9
42224: PUSH
42225: LD_VAR 0 7
42229: PPUSH
42230: LD_VAR 0 1
42234: PPUSH
42235: LD_VAR 0 2
42239: PPUSH
42240: CALL_OW 297
42244: ST_TO_ADDR
// if not result then
42245: LD_VAR 0 6
42249: NOT
42250: IFFALSE 42276
// result := [ [ i , tmp ] ] else
42252: LD_ADDR_VAR 0 6
42256: PUSH
42257: LD_VAR 0 7
42261: PUSH
42262: LD_VAR 0 9
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: EMPTY
42272: LIST
42273: ST_TO_ADDR
42274: GO 42418
// begin if result [ result ] [ 2 ] < tmp then
42276: LD_VAR 0 6
42280: PUSH
42281: LD_VAR 0 6
42285: ARRAY
42286: PUSH
42287: LD_INT 2
42289: ARRAY
42290: PUSH
42291: LD_VAR 0 9
42295: LESS
42296: IFFALSE 42338
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42298: LD_ADDR_VAR 0 6
42302: PUSH
42303: LD_VAR 0 6
42307: PPUSH
42308: LD_VAR 0 6
42312: PUSH
42313: LD_INT 1
42315: PLUS
42316: PPUSH
42317: LD_VAR 0 7
42321: PUSH
42322: LD_VAR 0 9
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PPUSH
42331: CALL_OW 2
42335: ST_TO_ADDR
42336: GO 42418
// for j = 1 to result do
42338: LD_ADDR_VAR 0 8
42342: PUSH
42343: DOUBLE
42344: LD_INT 1
42346: DEC
42347: ST_TO_ADDR
42348: LD_VAR 0 6
42352: PUSH
42353: FOR_TO
42354: IFFALSE 42416
// begin if tmp < result [ j ] [ 2 ] then
42356: LD_VAR 0 9
42360: PUSH
42361: LD_VAR 0 6
42365: PUSH
42366: LD_VAR 0 8
42370: ARRAY
42371: PUSH
42372: LD_INT 2
42374: ARRAY
42375: LESS
42376: IFFALSE 42414
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42378: LD_ADDR_VAR 0 6
42382: PUSH
42383: LD_VAR 0 6
42387: PPUSH
42388: LD_VAR 0 8
42392: PPUSH
42393: LD_VAR 0 7
42397: PUSH
42398: LD_VAR 0 9
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PPUSH
42407: CALL_OW 2
42411: ST_TO_ADDR
// break ;
42412: GO 42416
// end ; end ;
42414: GO 42353
42416: POP
42417: POP
// end ; end ;
42418: GO 42217
42420: POP
42421: POP
// if result and not asc then
42422: LD_VAR 0 6
42426: PUSH
42427: LD_VAR 0 4
42431: NOT
42432: AND
42433: IFFALSE 42508
// begin tmp := result ;
42435: LD_ADDR_VAR 0 9
42439: PUSH
42440: LD_VAR 0 6
42444: ST_TO_ADDR
// for i = tmp downto 1 do
42445: LD_ADDR_VAR 0 7
42449: PUSH
42450: DOUBLE
42451: LD_VAR 0 9
42455: INC
42456: ST_TO_ADDR
42457: LD_INT 1
42459: PUSH
42460: FOR_DOWNTO
42461: IFFALSE 42506
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42463: LD_ADDR_VAR 0 6
42467: PUSH
42468: LD_VAR 0 6
42472: PPUSH
42473: LD_VAR 0 9
42477: PUSH
42478: LD_VAR 0 7
42482: MINUS
42483: PUSH
42484: LD_INT 1
42486: PLUS
42487: PPUSH
42488: LD_VAR 0 9
42492: PUSH
42493: LD_VAR 0 7
42497: ARRAY
42498: PPUSH
42499: CALL_OW 1
42503: ST_TO_ADDR
42504: GO 42460
42506: POP
42507: POP
// end ; tmp := [ ] ;
42508: LD_ADDR_VAR 0 9
42512: PUSH
42513: EMPTY
42514: ST_TO_ADDR
// if mode then
42515: LD_VAR 0 5
42519: IFFALSE 42588
// begin for i = 1 to result do
42521: LD_ADDR_VAR 0 7
42525: PUSH
42526: DOUBLE
42527: LD_INT 1
42529: DEC
42530: ST_TO_ADDR
42531: LD_VAR 0 6
42535: PUSH
42536: FOR_TO
42537: IFFALSE 42576
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42539: LD_ADDR_VAR 0 9
42543: PUSH
42544: LD_VAR 0 9
42548: PPUSH
42549: LD_VAR 0 7
42553: PPUSH
42554: LD_VAR 0 6
42558: PUSH
42559: LD_VAR 0 7
42563: ARRAY
42564: PUSH
42565: LD_INT 1
42567: ARRAY
42568: PPUSH
42569: CALL_OW 1
42573: ST_TO_ADDR
42574: GO 42536
42576: POP
42577: POP
// result := tmp ;
42578: LD_ADDR_VAR 0 6
42582: PUSH
42583: LD_VAR 0 9
42587: ST_TO_ADDR
// end ; end ;
42588: LD_VAR 0 6
42592: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42593: LD_INT 0
42595: PPUSH
42596: PPUSH
42597: PPUSH
42598: PPUSH
42599: PPUSH
42600: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42601: LD_ADDR_VAR 0 5
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: ST_TO_ADDR
// if not x or not y then
42623: LD_VAR 0 2
42627: NOT
42628: PUSH
42629: LD_VAR 0 3
42633: NOT
42634: OR
42635: IFFALSE 42639
// exit ;
42637: GO 44291
// if not range then
42639: LD_VAR 0 4
42643: NOT
42644: IFFALSE 42654
// range := 10 ;
42646: LD_ADDR_VAR 0 4
42650: PUSH
42651: LD_INT 10
42653: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42654: LD_ADDR_VAR 0 8
42658: PUSH
42659: LD_INT 81
42661: PUSH
42662: LD_VAR 0 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 92
42673: PUSH
42674: LD_VAR 0 2
42678: PUSH
42679: LD_VAR 0 3
42683: PUSH
42684: LD_VAR 0 4
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 3
42697: PUSH
42698: LD_INT 21
42700: PUSH
42701: LD_INT 3
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: LIST
42716: PPUSH
42717: CALL_OW 69
42721: ST_TO_ADDR
// if not tmp then
42722: LD_VAR 0 8
42726: NOT
42727: IFFALSE 42731
// exit ;
42729: GO 44291
// for i in tmp do
42731: LD_ADDR_VAR 0 6
42735: PUSH
42736: LD_VAR 0 8
42740: PUSH
42741: FOR_IN
42742: IFFALSE 44266
// begin points := [ 0 , 0 , 0 ] ;
42744: LD_ADDR_VAR 0 9
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: LIST
42762: ST_TO_ADDR
// bpoints := 1 ;
42763: LD_ADDR_VAR 0 10
42767: PUSH
42768: LD_INT 1
42770: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42771: LD_VAR 0 6
42775: PPUSH
42776: CALL_OW 247
42780: PUSH
42781: LD_INT 1
42783: DOUBLE
42784: EQUAL
42785: IFTRUE 42789
42787: GO 43367
42789: POP
// begin if GetClass ( i ) = 1 then
42790: LD_VAR 0 6
42794: PPUSH
42795: CALL_OW 257
42799: PUSH
42800: LD_INT 1
42802: EQUAL
42803: IFFALSE 42824
// points := [ 10 , 5 , 3 ] ;
42805: LD_ADDR_VAR 0 9
42809: PUSH
42810: LD_INT 10
42812: PUSH
42813: LD_INT 5
42815: PUSH
42816: LD_INT 3
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: LIST
42823: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42824: LD_VAR 0 6
42828: PPUSH
42829: CALL_OW 257
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: LD_INT 3
42839: PUSH
42840: LD_INT 4
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: LIST
42847: IN
42848: IFFALSE 42869
// points := [ 3 , 2 , 1 ] ;
42850: LD_ADDR_VAR 0 9
42854: PUSH
42855: LD_INT 3
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: LIST
42868: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42869: LD_VAR 0 6
42873: PPUSH
42874: CALL_OW 257
42878: PUSH
42879: LD_INT 5
42881: EQUAL
42882: IFFALSE 42903
// points := [ 130 , 5 , 2 ] ;
42884: LD_ADDR_VAR 0 9
42888: PUSH
42889: LD_INT 130
42891: PUSH
42892: LD_INT 5
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42903: LD_VAR 0 6
42907: PPUSH
42908: CALL_OW 257
42912: PUSH
42913: LD_INT 8
42915: EQUAL
42916: IFFALSE 42937
// points := [ 35 , 35 , 30 ] ;
42918: LD_ADDR_VAR 0 9
42922: PUSH
42923: LD_INT 35
42925: PUSH
42926: LD_INT 35
42928: PUSH
42929: LD_INT 30
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: LIST
42936: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42937: LD_VAR 0 6
42941: PPUSH
42942: CALL_OW 257
42946: PUSH
42947: LD_INT 9
42949: EQUAL
42950: IFFALSE 42971
// points := [ 20 , 55 , 40 ] ;
42952: LD_ADDR_VAR 0 9
42956: PUSH
42957: LD_INT 20
42959: PUSH
42960: LD_INT 55
42962: PUSH
42963: LD_INT 40
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: LIST
42970: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42971: LD_VAR 0 6
42975: PPUSH
42976: CALL_OW 257
42980: PUSH
42981: LD_INT 12
42983: PUSH
42984: LD_INT 16
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: IN
42991: IFFALSE 43012
// points := [ 5 , 3 , 2 ] ;
42993: LD_ADDR_VAR 0 9
42997: PUSH
42998: LD_INT 5
43000: PUSH
43001: LD_INT 3
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: LIST
43011: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43012: LD_VAR 0 6
43016: PPUSH
43017: CALL_OW 257
43021: PUSH
43022: LD_INT 17
43024: EQUAL
43025: IFFALSE 43046
// points := [ 100 , 50 , 75 ] ;
43027: LD_ADDR_VAR 0 9
43031: PUSH
43032: LD_INT 100
43034: PUSH
43035: LD_INT 50
43037: PUSH
43038: LD_INT 75
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: LIST
43045: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43046: LD_VAR 0 6
43050: PPUSH
43051: CALL_OW 257
43055: PUSH
43056: LD_INT 15
43058: EQUAL
43059: IFFALSE 43080
// points := [ 10 , 5 , 3 ] ;
43061: LD_ADDR_VAR 0 9
43065: PUSH
43066: LD_INT 10
43068: PUSH
43069: LD_INT 5
43071: PUSH
43072: LD_INT 3
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43080: LD_VAR 0 6
43084: PPUSH
43085: CALL_OW 257
43089: PUSH
43090: LD_INT 14
43092: EQUAL
43093: IFFALSE 43114
// points := [ 10 , 0 , 0 ] ;
43095: LD_ADDR_VAR 0 9
43099: PUSH
43100: LD_INT 10
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: LIST
43113: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43114: LD_VAR 0 6
43118: PPUSH
43119: CALL_OW 257
43123: PUSH
43124: LD_INT 11
43126: EQUAL
43127: IFFALSE 43148
// points := [ 30 , 10 , 5 ] ;
43129: LD_ADDR_VAR 0 9
43133: PUSH
43134: LD_INT 30
43136: PUSH
43137: LD_INT 10
43139: PUSH
43140: LD_INT 5
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: LIST
43147: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43148: LD_VAR 0 1
43152: PPUSH
43153: LD_INT 5
43155: PPUSH
43156: CALL_OW 321
43160: PUSH
43161: LD_INT 2
43163: EQUAL
43164: IFFALSE 43181
// bpoints := bpoints * 1.8 ;
43166: LD_ADDR_VAR 0 10
43170: PUSH
43171: LD_VAR 0 10
43175: PUSH
43176: LD_REAL  1.80000000000000E+0000
43179: MUL
43180: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43181: LD_VAR 0 6
43185: PPUSH
43186: CALL_OW 257
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: LD_INT 2
43196: PUSH
43197: LD_INT 3
43199: PUSH
43200: LD_INT 4
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: IN
43209: PUSH
43210: LD_VAR 0 1
43214: PPUSH
43215: LD_INT 51
43217: PPUSH
43218: CALL_OW 321
43222: PUSH
43223: LD_INT 2
43225: EQUAL
43226: AND
43227: IFFALSE 43244
// bpoints := bpoints * 1.2 ;
43229: LD_ADDR_VAR 0 10
43233: PUSH
43234: LD_VAR 0 10
43238: PUSH
43239: LD_REAL  1.20000000000000E+0000
43242: MUL
43243: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43244: LD_VAR 0 6
43248: PPUSH
43249: CALL_OW 257
43253: PUSH
43254: LD_INT 5
43256: PUSH
43257: LD_INT 7
43259: PUSH
43260: LD_INT 9
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: LIST
43267: IN
43268: PUSH
43269: LD_VAR 0 1
43273: PPUSH
43274: LD_INT 52
43276: PPUSH
43277: CALL_OW 321
43281: PUSH
43282: LD_INT 2
43284: EQUAL
43285: AND
43286: IFFALSE 43303
// bpoints := bpoints * 1.5 ;
43288: LD_ADDR_VAR 0 10
43292: PUSH
43293: LD_VAR 0 10
43297: PUSH
43298: LD_REAL  1.50000000000000E+0000
43301: MUL
43302: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43303: LD_VAR 0 1
43307: PPUSH
43308: LD_INT 66
43310: PPUSH
43311: CALL_OW 321
43315: PUSH
43316: LD_INT 2
43318: EQUAL
43319: IFFALSE 43336
// bpoints := bpoints * 1.1 ;
43321: LD_ADDR_VAR 0 10
43325: PUSH
43326: LD_VAR 0 10
43330: PUSH
43331: LD_REAL  1.10000000000000E+0000
43334: MUL
43335: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43336: LD_ADDR_VAR 0 10
43340: PUSH
43341: LD_VAR 0 10
43345: PUSH
43346: LD_VAR 0 6
43350: PPUSH
43351: LD_INT 1
43353: PPUSH
43354: CALL_OW 259
43358: PUSH
43359: LD_REAL  1.15000000000000E+0000
43362: MUL
43363: MUL
43364: ST_TO_ADDR
// end ; unit_vehicle :
43365: GO 44195
43367: LD_INT 2
43369: DOUBLE
43370: EQUAL
43371: IFTRUE 43375
43373: GO 44183
43375: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43376: LD_VAR 0 6
43380: PPUSH
43381: CALL_OW 264
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: LD_INT 42
43391: PUSH
43392: LD_INT 24
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: LIST
43399: IN
43400: IFFALSE 43421
// points := [ 25 , 5 , 3 ] ;
43402: LD_ADDR_VAR 0 9
43406: PUSH
43407: LD_INT 25
43409: PUSH
43410: LD_INT 5
43412: PUSH
43413: LD_INT 3
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: LIST
43420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43421: LD_VAR 0 6
43425: PPUSH
43426: CALL_OW 264
43430: PUSH
43431: LD_INT 4
43433: PUSH
43434: LD_INT 43
43436: PUSH
43437: LD_INT 25
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: IN
43445: IFFALSE 43466
// points := [ 40 , 15 , 5 ] ;
43447: LD_ADDR_VAR 0 9
43451: PUSH
43452: LD_INT 40
43454: PUSH
43455: LD_INT 15
43457: PUSH
43458: LD_INT 5
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: LIST
43465: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43466: LD_VAR 0 6
43470: PPUSH
43471: CALL_OW 264
43475: PUSH
43476: LD_INT 3
43478: PUSH
43479: LD_INT 23
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: IN
43486: IFFALSE 43507
// points := [ 7 , 25 , 8 ] ;
43488: LD_ADDR_VAR 0 9
43492: PUSH
43493: LD_INT 7
43495: PUSH
43496: LD_INT 25
43498: PUSH
43499: LD_INT 8
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: LIST
43506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43507: LD_VAR 0 6
43511: PPUSH
43512: CALL_OW 264
43516: PUSH
43517: LD_INT 5
43519: PUSH
43520: LD_INT 27
43522: PUSH
43523: LD_INT 44
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: IN
43531: IFFALSE 43552
// points := [ 14 , 50 , 16 ] ;
43533: LD_ADDR_VAR 0 9
43537: PUSH
43538: LD_INT 14
43540: PUSH
43541: LD_INT 50
43543: PUSH
43544: LD_INT 16
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: LIST
43551: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43552: LD_VAR 0 6
43556: PPUSH
43557: CALL_OW 264
43561: PUSH
43562: LD_INT 6
43564: PUSH
43565: LD_INT 46
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: IN
43572: IFFALSE 43593
// points := [ 32 , 120 , 70 ] ;
43574: LD_ADDR_VAR 0 9
43578: PUSH
43579: LD_INT 32
43581: PUSH
43582: LD_INT 120
43584: PUSH
43585: LD_INT 70
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: LIST
43592: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43593: LD_VAR 0 6
43597: PPUSH
43598: CALL_OW 264
43602: PUSH
43603: LD_INT 7
43605: PUSH
43606: LD_INT 28
43608: PUSH
43609: LD_INT 45
43611: PUSH
43612: LD_EXP 48
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: IN
43623: IFFALSE 43644
// points := [ 35 , 20 , 45 ] ;
43625: LD_ADDR_VAR 0 9
43629: PUSH
43630: LD_INT 35
43632: PUSH
43633: LD_INT 20
43635: PUSH
43636: LD_INT 45
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: LIST
43643: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43644: LD_VAR 0 6
43648: PPUSH
43649: CALL_OW 264
43653: PUSH
43654: LD_INT 47
43656: PUSH
43657: EMPTY
43658: LIST
43659: IN
43660: IFFALSE 43681
// points := [ 67 , 45 , 75 ] ;
43662: LD_ADDR_VAR 0 9
43666: PUSH
43667: LD_INT 67
43669: PUSH
43670: LD_INT 45
43672: PUSH
43673: LD_INT 75
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43681: LD_VAR 0 6
43685: PPUSH
43686: CALL_OW 264
43690: PUSH
43691: LD_INT 26
43693: PUSH
43694: EMPTY
43695: LIST
43696: IN
43697: IFFALSE 43718
// points := [ 120 , 30 , 80 ] ;
43699: LD_ADDR_VAR 0 9
43703: PUSH
43704: LD_INT 120
43706: PUSH
43707: LD_INT 30
43709: PUSH
43710: LD_INT 80
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43718: LD_VAR 0 6
43722: PPUSH
43723: CALL_OW 264
43727: PUSH
43728: LD_INT 22
43730: PUSH
43731: EMPTY
43732: LIST
43733: IN
43734: IFFALSE 43755
// points := [ 40 , 1 , 1 ] ;
43736: LD_ADDR_VAR 0 9
43740: PUSH
43741: LD_INT 40
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: LIST
43754: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43755: LD_VAR 0 6
43759: PPUSH
43760: CALL_OW 264
43764: PUSH
43765: LD_INT 29
43767: PUSH
43768: EMPTY
43769: LIST
43770: IN
43771: IFFALSE 43792
// points := [ 70 , 200 , 400 ] ;
43773: LD_ADDR_VAR 0 9
43777: PUSH
43778: LD_INT 70
43780: PUSH
43781: LD_INT 200
43783: PUSH
43784: LD_INT 400
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43792: LD_VAR 0 6
43796: PPUSH
43797: CALL_OW 264
43801: PUSH
43802: LD_INT 14
43804: PUSH
43805: LD_INT 53
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: IN
43812: IFFALSE 43833
// points := [ 40 , 10 , 20 ] ;
43814: LD_ADDR_VAR 0 9
43818: PUSH
43819: LD_INT 40
43821: PUSH
43822: LD_INT 10
43824: PUSH
43825: LD_INT 20
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43833: LD_VAR 0 6
43837: PPUSH
43838: CALL_OW 264
43842: PUSH
43843: LD_INT 9
43845: PUSH
43846: EMPTY
43847: LIST
43848: IN
43849: IFFALSE 43870
// points := [ 5 , 70 , 20 ] ;
43851: LD_ADDR_VAR 0 9
43855: PUSH
43856: LD_INT 5
43858: PUSH
43859: LD_INT 70
43861: PUSH
43862: LD_INT 20
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: LIST
43869: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43870: LD_VAR 0 6
43874: PPUSH
43875: CALL_OW 264
43879: PUSH
43880: LD_INT 10
43882: PUSH
43883: EMPTY
43884: LIST
43885: IN
43886: IFFALSE 43907
// points := [ 35 , 110 , 70 ] ;
43888: LD_ADDR_VAR 0 9
43892: PUSH
43893: LD_INT 35
43895: PUSH
43896: LD_INT 110
43898: PUSH
43899: LD_INT 70
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: LIST
43906: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43907: LD_VAR 0 6
43911: PPUSH
43912: CALL_OW 265
43916: PUSH
43917: LD_INT 25
43919: EQUAL
43920: IFFALSE 43941
// points := [ 80 , 65 , 100 ] ;
43922: LD_ADDR_VAR 0 9
43926: PUSH
43927: LD_INT 80
43929: PUSH
43930: LD_INT 65
43932: PUSH
43933: LD_INT 100
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: LIST
43940: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43941: LD_VAR 0 6
43945: PPUSH
43946: CALL_OW 263
43950: PUSH
43951: LD_INT 1
43953: EQUAL
43954: IFFALSE 43989
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43956: LD_ADDR_VAR 0 10
43960: PUSH
43961: LD_VAR 0 10
43965: PUSH
43966: LD_VAR 0 6
43970: PPUSH
43971: CALL_OW 311
43975: PPUSH
43976: LD_INT 3
43978: PPUSH
43979: CALL_OW 259
43983: PUSH
43984: LD_INT 4
43986: MUL
43987: MUL
43988: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43989: LD_VAR 0 6
43993: PPUSH
43994: CALL_OW 263
43998: PUSH
43999: LD_INT 2
44001: EQUAL
44002: IFFALSE 44053
// begin j := IsControledBy ( i ) ;
44004: LD_ADDR_VAR 0 7
44008: PUSH
44009: LD_VAR 0 6
44013: PPUSH
44014: CALL_OW 312
44018: ST_TO_ADDR
// if j then
44019: LD_VAR 0 7
44023: IFFALSE 44053
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44025: LD_ADDR_VAR 0 10
44029: PUSH
44030: LD_VAR 0 10
44034: PUSH
44035: LD_VAR 0 7
44039: PPUSH
44040: LD_INT 3
44042: PPUSH
44043: CALL_OW 259
44047: PUSH
44048: LD_INT 3
44050: MUL
44051: MUL
44052: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44053: LD_VAR 0 6
44057: PPUSH
44058: CALL_OW 264
44062: PUSH
44063: LD_INT 5
44065: PUSH
44066: LD_INT 6
44068: PUSH
44069: LD_INT 46
44071: PUSH
44072: LD_INT 44
44074: PUSH
44075: LD_INT 47
44077: PUSH
44078: LD_INT 45
44080: PUSH
44081: LD_INT 28
44083: PUSH
44084: LD_INT 7
44086: PUSH
44087: LD_INT 27
44089: PUSH
44090: LD_INT 29
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: IN
44105: PUSH
44106: LD_VAR 0 1
44110: PPUSH
44111: LD_INT 52
44113: PPUSH
44114: CALL_OW 321
44118: PUSH
44119: LD_INT 2
44121: EQUAL
44122: AND
44123: IFFALSE 44140
// bpoints := bpoints * 1.2 ;
44125: LD_ADDR_VAR 0 10
44129: PUSH
44130: LD_VAR 0 10
44134: PUSH
44135: LD_REAL  1.20000000000000E+0000
44138: MUL
44139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44140: LD_VAR 0 6
44144: PPUSH
44145: CALL_OW 264
44149: PUSH
44150: LD_INT 6
44152: PUSH
44153: LD_INT 46
44155: PUSH
44156: LD_INT 47
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: LIST
44163: IN
44164: IFFALSE 44181
// bpoints := bpoints * 1.2 ;
44166: LD_ADDR_VAR 0 10
44170: PUSH
44171: LD_VAR 0 10
44175: PUSH
44176: LD_REAL  1.20000000000000E+0000
44179: MUL
44180: ST_TO_ADDR
// end ; unit_building :
44181: GO 44195
44183: LD_INT 3
44185: DOUBLE
44186: EQUAL
44187: IFTRUE 44191
44189: GO 44194
44191: POP
// ; end ;
44192: GO 44195
44194: POP
// for j = 1 to 3 do
44195: LD_ADDR_VAR 0 7
44199: PUSH
44200: DOUBLE
44201: LD_INT 1
44203: DEC
44204: ST_TO_ADDR
44205: LD_INT 3
44207: PUSH
44208: FOR_TO
44209: IFFALSE 44262
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44211: LD_ADDR_VAR 0 5
44215: PUSH
44216: LD_VAR 0 5
44220: PPUSH
44221: LD_VAR 0 7
44225: PPUSH
44226: LD_VAR 0 5
44230: PUSH
44231: LD_VAR 0 7
44235: ARRAY
44236: PUSH
44237: LD_VAR 0 9
44241: PUSH
44242: LD_VAR 0 7
44246: ARRAY
44247: PUSH
44248: LD_VAR 0 10
44252: MUL
44253: PLUS
44254: PPUSH
44255: CALL_OW 1
44259: ST_TO_ADDR
44260: GO 44208
44262: POP
44263: POP
// end ;
44264: GO 42741
44266: POP
44267: POP
// result := Replace ( result , 4 , tmp ) ;
44268: LD_ADDR_VAR 0 5
44272: PUSH
44273: LD_VAR 0 5
44277: PPUSH
44278: LD_INT 4
44280: PPUSH
44281: LD_VAR 0 8
44285: PPUSH
44286: CALL_OW 1
44290: ST_TO_ADDR
// end ;
44291: LD_VAR 0 5
44295: RET
// export function DangerAtRange ( unit , range ) ; begin
44296: LD_INT 0
44298: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44299: LD_ADDR_VAR 0 3
44303: PUSH
44304: LD_VAR 0 1
44308: PPUSH
44309: CALL_OW 255
44313: PPUSH
44314: LD_VAR 0 1
44318: PPUSH
44319: CALL_OW 250
44323: PPUSH
44324: LD_VAR 0 1
44328: PPUSH
44329: CALL_OW 251
44333: PPUSH
44334: LD_VAR 0 2
44338: PPUSH
44339: CALL 42593 0 4
44343: ST_TO_ADDR
// end ;
44344: LD_VAR 0 3
44348: RET
// export function DangerInArea ( side , area ) ; begin
44349: LD_INT 0
44351: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44352: LD_ADDR_VAR 0 3
44356: PUSH
44357: LD_VAR 0 2
44361: PPUSH
44362: LD_INT 81
44364: PUSH
44365: LD_VAR 0 1
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PPUSH
44374: CALL_OW 70
44378: ST_TO_ADDR
// end ;
44379: LD_VAR 0 3
44383: RET
// export function IsExtension ( b ) ; begin
44384: LD_INT 0
44386: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44387: LD_ADDR_VAR 0 2
44391: PUSH
44392: LD_VAR 0 1
44396: PUSH
44397: LD_INT 23
44399: PUSH
44400: LD_INT 20
44402: PUSH
44403: LD_INT 22
44405: PUSH
44406: LD_INT 17
44408: PUSH
44409: LD_INT 24
44411: PUSH
44412: LD_INT 21
44414: PUSH
44415: LD_INT 19
44417: PUSH
44418: LD_INT 16
44420: PUSH
44421: LD_INT 25
44423: PUSH
44424: LD_INT 18
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: IN
44439: ST_TO_ADDR
// end ;
44440: LD_VAR 0 2
44444: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44445: LD_INT 0
44447: PPUSH
44448: PPUSH
44449: PPUSH
// result := [ ] ;
44450: LD_ADDR_VAR 0 4
44454: PUSH
44455: EMPTY
44456: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44457: LD_ADDR_VAR 0 5
44461: PUSH
44462: LD_VAR 0 2
44466: PPUSH
44467: LD_INT 21
44469: PUSH
44470: LD_INT 3
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PPUSH
44477: CALL_OW 70
44481: ST_TO_ADDR
// if not tmp then
44482: LD_VAR 0 5
44486: NOT
44487: IFFALSE 44491
// exit ;
44489: GO 44555
// if checkLink then
44491: LD_VAR 0 3
44495: IFFALSE 44545
// begin for i in tmp do
44497: LD_ADDR_VAR 0 6
44501: PUSH
44502: LD_VAR 0 5
44506: PUSH
44507: FOR_IN
44508: IFFALSE 44543
// if GetBase ( i ) <> base then
44510: LD_VAR 0 6
44514: PPUSH
44515: CALL_OW 274
44519: PUSH
44520: LD_VAR 0 1
44524: NONEQUAL
44525: IFFALSE 44541
// ComLinkToBase ( base , i ) ;
44527: LD_VAR 0 1
44531: PPUSH
44532: LD_VAR 0 6
44536: PPUSH
44537: CALL_OW 169
44541: GO 44507
44543: POP
44544: POP
// end ; result := tmp ;
44545: LD_ADDR_VAR 0 4
44549: PUSH
44550: LD_VAR 0 5
44554: ST_TO_ADDR
// end ;
44555: LD_VAR 0 4
44559: RET
// export function ComComplete ( units , b ) ; var i ; begin
44560: LD_INT 0
44562: PPUSH
44563: PPUSH
// if not units then
44564: LD_VAR 0 1
44568: NOT
44569: IFFALSE 44573
// exit ;
44571: GO 44663
// for i in units do
44573: LD_ADDR_VAR 0 4
44577: PUSH
44578: LD_VAR 0 1
44582: PUSH
44583: FOR_IN
44584: IFFALSE 44661
// if BuildingStatus ( b ) = bs_build then
44586: LD_VAR 0 2
44590: PPUSH
44591: CALL_OW 461
44595: PUSH
44596: LD_INT 1
44598: EQUAL
44599: IFFALSE 44659
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44601: LD_VAR 0 4
44605: PPUSH
44606: LD_STRING h
44608: PUSH
44609: LD_VAR 0 2
44613: PPUSH
44614: CALL_OW 250
44618: PUSH
44619: LD_VAR 0 2
44623: PPUSH
44624: CALL_OW 251
44628: PUSH
44629: LD_VAR 0 2
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: PUSH
44652: EMPTY
44653: LIST
44654: PPUSH
44655: CALL_OW 446
44659: GO 44583
44661: POP
44662: POP
// end ;
44663: LD_VAR 0 3
44667: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44668: LD_INT 0
44670: PPUSH
44671: PPUSH
44672: PPUSH
44673: PPUSH
44674: PPUSH
44675: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44676: LD_VAR 0 1
44680: NOT
44681: PUSH
44682: LD_VAR 0 1
44686: PPUSH
44687: CALL_OW 263
44691: PUSH
44692: LD_INT 2
44694: NONEQUAL
44695: OR
44696: IFFALSE 44700
// exit ;
44698: GO 45016
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44700: LD_ADDR_VAR 0 6
44704: PUSH
44705: LD_INT 22
44707: PUSH
44708: LD_VAR 0 1
44712: PPUSH
44713: CALL_OW 255
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: LD_INT 30
44727: PUSH
44728: LD_INT 36
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 34
44737: PUSH
44738: LD_INT 31
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PPUSH
44754: CALL_OW 69
44758: ST_TO_ADDR
// if not tmp then
44759: LD_VAR 0 6
44763: NOT
44764: IFFALSE 44768
// exit ;
44766: GO 45016
// result := [ ] ;
44768: LD_ADDR_VAR 0 2
44772: PUSH
44773: EMPTY
44774: ST_TO_ADDR
// for i in tmp do
44775: LD_ADDR_VAR 0 3
44779: PUSH
44780: LD_VAR 0 6
44784: PUSH
44785: FOR_IN
44786: IFFALSE 44857
// begin t := UnitsInside ( i ) ;
44788: LD_ADDR_VAR 0 4
44792: PUSH
44793: LD_VAR 0 3
44797: PPUSH
44798: CALL_OW 313
44802: ST_TO_ADDR
// if t then
44803: LD_VAR 0 4
44807: IFFALSE 44855
// for j in t do
44809: LD_ADDR_VAR 0 7
44813: PUSH
44814: LD_VAR 0 4
44818: PUSH
44819: FOR_IN
44820: IFFALSE 44853
// result := Replace ( result , result + 1 , j ) ;
44822: LD_ADDR_VAR 0 2
44826: PUSH
44827: LD_VAR 0 2
44831: PPUSH
44832: LD_VAR 0 2
44836: PUSH
44837: LD_INT 1
44839: PLUS
44840: PPUSH
44841: LD_VAR 0 7
44845: PPUSH
44846: CALL_OW 1
44850: ST_TO_ADDR
44851: GO 44819
44853: POP
44854: POP
// end ;
44855: GO 44785
44857: POP
44858: POP
// if not result then
44859: LD_VAR 0 2
44863: NOT
44864: IFFALSE 44868
// exit ;
44866: GO 45016
// mech := result [ 1 ] ;
44868: LD_ADDR_VAR 0 5
44872: PUSH
44873: LD_VAR 0 2
44877: PUSH
44878: LD_INT 1
44880: ARRAY
44881: ST_TO_ADDR
// if result > 1 then
44882: LD_VAR 0 2
44886: PUSH
44887: LD_INT 1
44889: GREATER
44890: IFFALSE 45002
// begin for i = 2 to result do
44892: LD_ADDR_VAR 0 3
44896: PUSH
44897: DOUBLE
44898: LD_INT 2
44900: DEC
44901: ST_TO_ADDR
44902: LD_VAR 0 2
44906: PUSH
44907: FOR_TO
44908: IFFALSE 45000
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44910: LD_ADDR_VAR 0 4
44914: PUSH
44915: LD_VAR 0 2
44919: PUSH
44920: LD_VAR 0 3
44924: ARRAY
44925: PPUSH
44926: LD_INT 3
44928: PPUSH
44929: CALL_OW 259
44933: PUSH
44934: LD_VAR 0 2
44938: PUSH
44939: LD_VAR 0 3
44943: ARRAY
44944: PPUSH
44945: CALL_OW 432
44949: MINUS
44950: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44951: LD_VAR 0 4
44955: PUSH
44956: LD_VAR 0 5
44960: PPUSH
44961: LD_INT 3
44963: PPUSH
44964: CALL_OW 259
44968: PUSH
44969: LD_VAR 0 5
44973: PPUSH
44974: CALL_OW 432
44978: MINUS
44979: GREATEREQUAL
44980: IFFALSE 44998
// mech := result [ i ] ;
44982: LD_ADDR_VAR 0 5
44986: PUSH
44987: LD_VAR 0 2
44991: PUSH
44992: LD_VAR 0 3
44996: ARRAY
44997: ST_TO_ADDR
// end ;
44998: GO 44907
45000: POP
45001: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45002: LD_VAR 0 1
45006: PPUSH
45007: LD_VAR 0 5
45011: PPUSH
45012: CALL_OW 135
// end ;
45016: LD_VAR 0 2
45020: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45021: LD_INT 0
45023: PPUSH
45024: PPUSH
45025: PPUSH
45026: PPUSH
45027: PPUSH
45028: PPUSH
45029: PPUSH
45030: PPUSH
45031: PPUSH
45032: PPUSH
45033: PPUSH
45034: PPUSH
45035: PPUSH
// result := [ ] ;
45036: LD_ADDR_VAR 0 7
45040: PUSH
45041: EMPTY
45042: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45043: LD_VAR 0 1
45047: PPUSH
45048: CALL_OW 266
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: IN
45063: NOT
45064: IFFALSE 45068
// exit ;
45066: GO 46702
// if name then
45068: LD_VAR 0 3
45072: IFFALSE 45088
// SetBName ( base_dep , name ) ;
45074: LD_VAR 0 1
45078: PPUSH
45079: LD_VAR 0 3
45083: PPUSH
45084: CALL_OW 500
// base := GetBase ( base_dep ) ;
45088: LD_ADDR_VAR 0 15
45092: PUSH
45093: LD_VAR 0 1
45097: PPUSH
45098: CALL_OW 274
45102: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45103: LD_ADDR_VAR 0 16
45107: PUSH
45108: LD_VAR 0 1
45112: PPUSH
45113: CALL_OW 255
45117: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45118: LD_ADDR_VAR 0 17
45122: PUSH
45123: LD_VAR 0 1
45127: PPUSH
45128: CALL_OW 248
45132: ST_TO_ADDR
// if sources then
45133: LD_VAR 0 5
45137: IFFALSE 45184
// for i = 1 to 3 do
45139: LD_ADDR_VAR 0 8
45143: PUSH
45144: DOUBLE
45145: LD_INT 1
45147: DEC
45148: ST_TO_ADDR
45149: LD_INT 3
45151: PUSH
45152: FOR_TO
45153: IFFALSE 45182
// AddResourceType ( base , i , sources [ i ] ) ;
45155: LD_VAR 0 15
45159: PPUSH
45160: LD_VAR 0 8
45164: PPUSH
45165: LD_VAR 0 5
45169: PUSH
45170: LD_VAR 0 8
45174: ARRAY
45175: PPUSH
45176: CALL_OW 276
45180: GO 45152
45182: POP
45183: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45184: LD_ADDR_VAR 0 18
45188: PUSH
45189: LD_VAR 0 15
45193: PPUSH
45194: LD_VAR 0 2
45198: PPUSH
45199: LD_INT 1
45201: PPUSH
45202: CALL 44445 0 3
45206: ST_TO_ADDR
// InitHc ;
45207: CALL_OW 19
// InitUc ;
45211: CALL_OW 18
// uc_side := side ;
45215: LD_ADDR_OWVAR 20
45219: PUSH
45220: LD_VAR 0 16
45224: ST_TO_ADDR
// uc_nation := nation ;
45225: LD_ADDR_OWVAR 21
45229: PUSH
45230: LD_VAR 0 17
45234: ST_TO_ADDR
// if buildings then
45235: LD_VAR 0 18
45239: IFFALSE 46561
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45241: LD_ADDR_VAR 0 19
45245: PUSH
45246: LD_VAR 0 18
45250: PPUSH
45251: LD_INT 2
45253: PUSH
45254: LD_INT 30
45256: PUSH
45257: LD_INT 29
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 30
45266: PUSH
45267: LD_INT 30
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: LIST
45278: PPUSH
45279: CALL_OW 72
45283: ST_TO_ADDR
// if tmp then
45284: LD_VAR 0 19
45288: IFFALSE 45336
// for i in tmp do
45290: LD_ADDR_VAR 0 8
45294: PUSH
45295: LD_VAR 0 19
45299: PUSH
45300: FOR_IN
45301: IFFALSE 45334
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45303: LD_VAR 0 8
45307: PPUSH
45308: CALL_OW 250
45312: PPUSH
45313: LD_VAR 0 8
45317: PPUSH
45318: CALL_OW 251
45322: PPUSH
45323: LD_VAR 0 16
45327: PPUSH
45328: CALL_OW 441
45332: GO 45300
45334: POP
45335: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45336: LD_VAR 0 18
45340: PPUSH
45341: LD_INT 2
45343: PUSH
45344: LD_INT 30
45346: PUSH
45347: LD_INT 32
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 30
45356: PUSH
45357: LD_INT 33
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: LIST
45368: PPUSH
45369: CALL_OW 72
45373: IFFALSE 45461
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45375: LD_ADDR_VAR 0 8
45379: PUSH
45380: LD_VAR 0 18
45384: PPUSH
45385: LD_INT 2
45387: PUSH
45388: LD_INT 30
45390: PUSH
45391: LD_INT 32
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 30
45400: PUSH
45401: LD_INT 33
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: LIST
45412: PPUSH
45413: CALL_OW 72
45417: PUSH
45418: FOR_IN
45419: IFFALSE 45459
// begin if not GetBWeapon ( i ) then
45421: LD_VAR 0 8
45425: PPUSH
45426: CALL_OW 269
45430: NOT
45431: IFFALSE 45457
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45433: LD_VAR 0 8
45437: PPUSH
45438: LD_VAR 0 8
45442: PPUSH
45443: LD_VAR 0 2
45447: PPUSH
45448: CALL 46707 0 2
45452: PPUSH
45453: CALL_OW 431
// end ;
45457: GO 45418
45459: POP
45460: POP
// end ; for i = 1 to personel do
45461: LD_ADDR_VAR 0 8
45465: PUSH
45466: DOUBLE
45467: LD_INT 1
45469: DEC
45470: ST_TO_ADDR
45471: LD_VAR 0 6
45475: PUSH
45476: FOR_TO
45477: IFFALSE 46541
// begin if i > 4 then
45479: LD_VAR 0 8
45483: PUSH
45484: LD_INT 4
45486: GREATER
45487: IFFALSE 45491
// break ;
45489: GO 46541
// case i of 1 :
45491: LD_VAR 0 8
45495: PUSH
45496: LD_INT 1
45498: DOUBLE
45499: EQUAL
45500: IFTRUE 45504
45502: GO 45584
45504: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45505: LD_ADDR_VAR 0 12
45509: PUSH
45510: LD_VAR 0 18
45514: PPUSH
45515: LD_INT 22
45517: PUSH
45518: LD_VAR 0 16
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 58
45529: PUSH
45530: EMPTY
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: LD_INT 30
45538: PUSH
45539: LD_INT 32
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 30
45548: PUSH
45549: LD_INT 4
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 30
45558: PUSH
45559: LD_INT 5
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: LIST
45576: PPUSH
45577: CALL_OW 72
45581: ST_TO_ADDR
45582: GO 45806
45584: LD_INT 2
45586: DOUBLE
45587: EQUAL
45588: IFTRUE 45592
45590: GO 45654
45592: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45593: LD_ADDR_VAR 0 12
45597: PUSH
45598: LD_VAR 0 18
45602: PPUSH
45603: LD_INT 22
45605: PUSH
45606: LD_VAR 0 16
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: LD_INT 30
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 30
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: LIST
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PPUSH
45647: CALL_OW 72
45651: ST_TO_ADDR
45652: GO 45806
45654: LD_INT 3
45656: DOUBLE
45657: EQUAL
45658: IFTRUE 45662
45660: GO 45724
45662: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45663: LD_ADDR_VAR 0 12
45667: PUSH
45668: LD_VAR 0 18
45672: PPUSH
45673: LD_INT 22
45675: PUSH
45676: LD_VAR 0 16
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: LD_INT 30
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 30
45700: PUSH
45701: LD_INT 3
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PPUSH
45717: CALL_OW 72
45721: ST_TO_ADDR
45722: GO 45806
45724: LD_INT 4
45726: DOUBLE
45727: EQUAL
45728: IFTRUE 45732
45730: GO 45805
45732: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45733: LD_ADDR_VAR 0 12
45737: PUSH
45738: LD_VAR 0 18
45742: PPUSH
45743: LD_INT 22
45745: PUSH
45746: LD_VAR 0 16
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: LD_INT 30
45760: PUSH
45761: LD_INT 6
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 30
45770: PUSH
45771: LD_INT 7
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 30
45780: PUSH
45781: LD_INT 8
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PPUSH
45798: CALL_OW 72
45802: ST_TO_ADDR
45803: GO 45806
45805: POP
// if i = 1 then
45806: LD_VAR 0 8
45810: PUSH
45811: LD_INT 1
45813: EQUAL
45814: IFFALSE 45925
// begin tmp := [ ] ;
45816: LD_ADDR_VAR 0 19
45820: PUSH
45821: EMPTY
45822: ST_TO_ADDR
// for j in f do
45823: LD_ADDR_VAR 0 9
45827: PUSH
45828: LD_VAR 0 12
45832: PUSH
45833: FOR_IN
45834: IFFALSE 45907
// if GetBType ( j ) = b_bunker then
45836: LD_VAR 0 9
45840: PPUSH
45841: CALL_OW 266
45845: PUSH
45846: LD_INT 32
45848: EQUAL
45849: IFFALSE 45876
// tmp := Insert ( tmp , 1 , j ) else
45851: LD_ADDR_VAR 0 19
45855: PUSH
45856: LD_VAR 0 19
45860: PPUSH
45861: LD_INT 1
45863: PPUSH
45864: LD_VAR 0 9
45868: PPUSH
45869: CALL_OW 2
45873: ST_TO_ADDR
45874: GO 45905
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45876: LD_ADDR_VAR 0 19
45880: PUSH
45881: LD_VAR 0 19
45885: PPUSH
45886: LD_VAR 0 19
45890: PUSH
45891: LD_INT 1
45893: PLUS
45894: PPUSH
45895: LD_VAR 0 9
45899: PPUSH
45900: CALL_OW 2
45904: ST_TO_ADDR
45905: GO 45833
45907: POP
45908: POP
// if tmp then
45909: LD_VAR 0 19
45913: IFFALSE 45925
// f := tmp ;
45915: LD_ADDR_VAR 0 12
45919: PUSH
45920: LD_VAR 0 19
45924: ST_TO_ADDR
// end ; x := personel [ i ] ;
45925: LD_ADDR_VAR 0 13
45929: PUSH
45930: LD_VAR 0 6
45934: PUSH
45935: LD_VAR 0 8
45939: ARRAY
45940: ST_TO_ADDR
// if x = - 1 then
45941: LD_VAR 0 13
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: EQUAL
45950: IFFALSE 46159
// begin for j in f do
45952: LD_ADDR_VAR 0 9
45956: PUSH
45957: LD_VAR 0 12
45961: PUSH
45962: FOR_IN
45963: IFFALSE 46155
// repeat InitHc ;
45965: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45969: LD_VAR 0 9
45973: PPUSH
45974: CALL_OW 266
45978: PUSH
45979: LD_INT 5
45981: EQUAL
45982: IFFALSE 46052
// begin if UnitsInside ( j ) < 3 then
45984: LD_VAR 0 9
45988: PPUSH
45989: CALL_OW 313
45993: PUSH
45994: LD_INT 3
45996: LESS
45997: IFFALSE 46033
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45999: LD_INT 0
46001: PPUSH
46002: LD_INT 5
46004: PUSH
46005: LD_INT 8
46007: PUSH
46008: LD_INT 9
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: PUSH
46016: LD_VAR 0 17
46020: ARRAY
46021: PPUSH
46022: LD_VAR 0 4
46026: PPUSH
46027: CALL_OW 380
46031: GO 46050
// PrepareHuman ( false , i , skill ) ;
46033: LD_INT 0
46035: PPUSH
46036: LD_VAR 0 8
46040: PPUSH
46041: LD_VAR 0 4
46045: PPUSH
46046: CALL_OW 380
// end else
46050: GO 46069
// PrepareHuman ( false , i , skill ) ;
46052: LD_INT 0
46054: PPUSH
46055: LD_VAR 0 8
46059: PPUSH
46060: LD_VAR 0 4
46064: PPUSH
46065: CALL_OW 380
// un := CreateHuman ;
46069: LD_ADDR_VAR 0 14
46073: PUSH
46074: CALL_OW 44
46078: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46079: LD_ADDR_VAR 0 7
46083: PUSH
46084: LD_VAR 0 7
46088: PPUSH
46089: LD_INT 1
46091: PPUSH
46092: LD_VAR 0 14
46096: PPUSH
46097: CALL_OW 2
46101: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46102: LD_VAR 0 14
46106: PPUSH
46107: LD_VAR 0 9
46111: PPUSH
46112: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46116: LD_VAR 0 9
46120: PPUSH
46121: CALL_OW 313
46125: PUSH
46126: LD_INT 6
46128: EQUAL
46129: PUSH
46130: LD_VAR 0 9
46134: PPUSH
46135: CALL_OW 266
46139: PUSH
46140: LD_INT 32
46142: PUSH
46143: LD_INT 31
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: IN
46150: OR
46151: IFFALSE 45965
46153: GO 45962
46155: POP
46156: POP
// end else
46157: GO 46539
// for j = 1 to x do
46159: LD_ADDR_VAR 0 9
46163: PUSH
46164: DOUBLE
46165: LD_INT 1
46167: DEC
46168: ST_TO_ADDR
46169: LD_VAR 0 13
46173: PUSH
46174: FOR_TO
46175: IFFALSE 46537
// begin InitHc ;
46177: CALL_OW 19
// if not f then
46181: LD_VAR 0 12
46185: NOT
46186: IFFALSE 46275
// begin PrepareHuman ( false , i , skill ) ;
46188: LD_INT 0
46190: PPUSH
46191: LD_VAR 0 8
46195: PPUSH
46196: LD_VAR 0 4
46200: PPUSH
46201: CALL_OW 380
// un := CreateHuman ;
46205: LD_ADDR_VAR 0 14
46209: PUSH
46210: CALL_OW 44
46214: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46215: LD_ADDR_VAR 0 7
46219: PUSH
46220: LD_VAR 0 7
46224: PPUSH
46225: LD_INT 1
46227: PPUSH
46228: LD_VAR 0 14
46232: PPUSH
46233: CALL_OW 2
46237: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46238: LD_VAR 0 14
46242: PPUSH
46243: LD_VAR 0 1
46247: PPUSH
46248: CALL_OW 250
46252: PPUSH
46253: LD_VAR 0 1
46257: PPUSH
46258: CALL_OW 251
46262: PPUSH
46263: LD_INT 10
46265: PPUSH
46266: LD_INT 0
46268: PPUSH
46269: CALL_OW 50
// continue ;
46273: GO 46174
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46275: LD_VAR 0 12
46279: PUSH
46280: LD_INT 1
46282: ARRAY
46283: PPUSH
46284: CALL_OW 313
46288: PUSH
46289: LD_VAR 0 12
46293: PUSH
46294: LD_INT 1
46296: ARRAY
46297: PPUSH
46298: CALL_OW 266
46302: PUSH
46303: LD_INT 32
46305: PUSH
46306: LD_INT 31
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: IN
46313: AND
46314: PUSH
46315: LD_VAR 0 12
46319: PUSH
46320: LD_INT 1
46322: ARRAY
46323: PPUSH
46324: CALL_OW 313
46328: PUSH
46329: LD_INT 6
46331: EQUAL
46332: OR
46333: IFFALSE 46353
// f := Delete ( f , 1 ) ;
46335: LD_ADDR_VAR 0 12
46339: PUSH
46340: LD_VAR 0 12
46344: PPUSH
46345: LD_INT 1
46347: PPUSH
46348: CALL_OW 3
46352: ST_TO_ADDR
// if not f then
46353: LD_VAR 0 12
46357: NOT
46358: IFFALSE 46376
// begin x := x + 2 ;
46360: LD_ADDR_VAR 0 13
46364: PUSH
46365: LD_VAR 0 13
46369: PUSH
46370: LD_INT 2
46372: PLUS
46373: ST_TO_ADDR
// continue ;
46374: GO 46174
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46376: LD_VAR 0 12
46380: PUSH
46381: LD_INT 1
46383: ARRAY
46384: PPUSH
46385: CALL_OW 266
46389: PUSH
46390: LD_INT 5
46392: EQUAL
46393: IFFALSE 46467
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46395: LD_VAR 0 12
46399: PUSH
46400: LD_INT 1
46402: ARRAY
46403: PPUSH
46404: CALL_OW 313
46408: PUSH
46409: LD_INT 3
46411: LESS
46412: IFFALSE 46448
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46414: LD_INT 0
46416: PPUSH
46417: LD_INT 5
46419: PUSH
46420: LD_INT 8
46422: PUSH
46423: LD_INT 9
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: LIST
46430: PUSH
46431: LD_VAR 0 17
46435: ARRAY
46436: PPUSH
46437: LD_VAR 0 4
46441: PPUSH
46442: CALL_OW 380
46446: GO 46465
// PrepareHuman ( false , i , skill ) ;
46448: LD_INT 0
46450: PPUSH
46451: LD_VAR 0 8
46455: PPUSH
46456: LD_VAR 0 4
46460: PPUSH
46461: CALL_OW 380
// end else
46465: GO 46484
// PrepareHuman ( false , i , skill ) ;
46467: LD_INT 0
46469: PPUSH
46470: LD_VAR 0 8
46474: PPUSH
46475: LD_VAR 0 4
46479: PPUSH
46480: CALL_OW 380
// un := CreateHuman ;
46484: LD_ADDR_VAR 0 14
46488: PUSH
46489: CALL_OW 44
46493: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46494: LD_ADDR_VAR 0 7
46498: PUSH
46499: LD_VAR 0 7
46503: PPUSH
46504: LD_INT 1
46506: PPUSH
46507: LD_VAR 0 14
46511: PPUSH
46512: CALL_OW 2
46516: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46517: LD_VAR 0 14
46521: PPUSH
46522: LD_VAR 0 12
46526: PUSH
46527: LD_INT 1
46529: ARRAY
46530: PPUSH
46531: CALL_OW 52
// end ;
46535: GO 46174
46537: POP
46538: POP
// end ;
46539: GO 45476
46541: POP
46542: POP
// result := result ^ buildings ;
46543: LD_ADDR_VAR 0 7
46547: PUSH
46548: LD_VAR 0 7
46552: PUSH
46553: LD_VAR 0 18
46557: ADD
46558: ST_TO_ADDR
// end else
46559: GO 46702
// begin for i = 1 to personel do
46561: LD_ADDR_VAR 0 8
46565: PUSH
46566: DOUBLE
46567: LD_INT 1
46569: DEC
46570: ST_TO_ADDR
46571: LD_VAR 0 6
46575: PUSH
46576: FOR_TO
46577: IFFALSE 46700
// begin if i > 4 then
46579: LD_VAR 0 8
46583: PUSH
46584: LD_INT 4
46586: GREATER
46587: IFFALSE 46591
// break ;
46589: GO 46700
// x := personel [ i ] ;
46591: LD_ADDR_VAR 0 13
46595: PUSH
46596: LD_VAR 0 6
46600: PUSH
46601: LD_VAR 0 8
46605: ARRAY
46606: ST_TO_ADDR
// if x = - 1 then
46607: LD_VAR 0 13
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: EQUAL
46616: IFFALSE 46620
// continue ;
46618: GO 46576
// PrepareHuman ( false , i , skill ) ;
46620: LD_INT 0
46622: PPUSH
46623: LD_VAR 0 8
46627: PPUSH
46628: LD_VAR 0 4
46632: PPUSH
46633: CALL_OW 380
// un := CreateHuman ;
46637: LD_ADDR_VAR 0 14
46641: PUSH
46642: CALL_OW 44
46646: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46647: LD_VAR 0 14
46651: PPUSH
46652: LD_VAR 0 1
46656: PPUSH
46657: CALL_OW 250
46661: PPUSH
46662: LD_VAR 0 1
46666: PPUSH
46667: CALL_OW 251
46671: PPUSH
46672: LD_INT 10
46674: PPUSH
46675: LD_INT 0
46677: PPUSH
46678: CALL_OW 50
// result := result ^ un ;
46682: LD_ADDR_VAR 0 7
46686: PUSH
46687: LD_VAR 0 7
46691: PUSH
46692: LD_VAR 0 14
46696: ADD
46697: ST_TO_ADDR
// end ;
46698: GO 46576
46700: POP
46701: POP
// end ; end ;
46702: LD_VAR 0 7
46706: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46707: LD_INT 0
46709: PPUSH
46710: PPUSH
46711: PPUSH
46712: PPUSH
46713: PPUSH
46714: PPUSH
46715: PPUSH
46716: PPUSH
46717: PPUSH
46718: PPUSH
46719: PPUSH
46720: PPUSH
46721: PPUSH
46722: PPUSH
46723: PPUSH
46724: PPUSH
// result := false ;
46725: LD_ADDR_VAR 0 3
46729: PUSH
46730: LD_INT 0
46732: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46733: LD_VAR 0 1
46737: NOT
46738: PUSH
46739: LD_VAR 0 1
46743: PPUSH
46744: CALL_OW 266
46748: PUSH
46749: LD_INT 32
46751: PUSH
46752: LD_INT 33
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: IN
46759: NOT
46760: OR
46761: IFFALSE 46765
// exit ;
46763: GO 47874
// nat := GetNation ( tower ) ;
46765: LD_ADDR_VAR 0 12
46769: PUSH
46770: LD_VAR 0 1
46774: PPUSH
46775: CALL_OW 248
46779: ST_TO_ADDR
// side := GetSide ( tower ) ;
46780: LD_ADDR_VAR 0 16
46784: PUSH
46785: LD_VAR 0 1
46789: PPUSH
46790: CALL_OW 255
46794: ST_TO_ADDR
// x := GetX ( tower ) ;
46795: LD_ADDR_VAR 0 10
46799: PUSH
46800: LD_VAR 0 1
46804: PPUSH
46805: CALL_OW 250
46809: ST_TO_ADDR
// y := GetY ( tower ) ;
46810: LD_ADDR_VAR 0 11
46814: PUSH
46815: LD_VAR 0 1
46819: PPUSH
46820: CALL_OW 251
46824: ST_TO_ADDR
// if not x or not y then
46825: LD_VAR 0 10
46829: NOT
46830: PUSH
46831: LD_VAR 0 11
46835: NOT
46836: OR
46837: IFFALSE 46841
// exit ;
46839: GO 47874
// weapon := 0 ;
46841: LD_ADDR_VAR 0 18
46845: PUSH
46846: LD_INT 0
46848: ST_TO_ADDR
// fac_list := [ ] ;
46849: LD_ADDR_VAR 0 17
46853: PUSH
46854: EMPTY
46855: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46856: LD_ADDR_VAR 0 6
46860: PUSH
46861: LD_VAR 0 1
46865: PPUSH
46866: CALL_OW 274
46870: PPUSH
46871: LD_VAR 0 2
46875: PPUSH
46876: LD_INT 0
46878: PPUSH
46879: CALL 44445 0 3
46883: PPUSH
46884: LD_INT 30
46886: PUSH
46887: LD_INT 3
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PPUSH
46894: CALL_OW 72
46898: ST_TO_ADDR
// if not factories then
46899: LD_VAR 0 6
46903: NOT
46904: IFFALSE 46908
// exit ;
46906: GO 47874
// for i in factories do
46908: LD_ADDR_VAR 0 8
46912: PUSH
46913: LD_VAR 0 6
46917: PUSH
46918: FOR_IN
46919: IFFALSE 46944
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46921: LD_ADDR_VAR 0 17
46925: PUSH
46926: LD_VAR 0 17
46930: PUSH
46931: LD_VAR 0 8
46935: PPUSH
46936: CALL_OW 478
46940: UNION
46941: ST_TO_ADDR
46942: GO 46918
46944: POP
46945: POP
// if not fac_list then
46946: LD_VAR 0 17
46950: NOT
46951: IFFALSE 46955
// exit ;
46953: GO 47874
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46955: LD_ADDR_VAR 0 5
46959: PUSH
46960: LD_INT 4
46962: PUSH
46963: LD_INT 5
46965: PUSH
46966: LD_INT 9
46968: PUSH
46969: LD_INT 10
46971: PUSH
46972: LD_INT 6
46974: PUSH
46975: LD_INT 7
46977: PUSH
46978: LD_INT 11
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 27
46992: PUSH
46993: LD_INT 28
46995: PUSH
46996: LD_INT 26
46998: PUSH
46999: LD_INT 30
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 43
47010: PUSH
47011: LD_INT 44
47013: PUSH
47014: LD_INT 46
47016: PUSH
47017: LD_INT 45
47019: PUSH
47020: LD_INT 47
47022: PUSH
47023: LD_INT 49
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: LIST
47038: PUSH
47039: LD_VAR 0 12
47043: ARRAY
47044: ST_TO_ADDR
// list := list isect fac_list ;
47045: LD_ADDR_VAR 0 5
47049: PUSH
47050: LD_VAR 0 5
47054: PUSH
47055: LD_VAR 0 17
47059: ISECT
47060: ST_TO_ADDR
// if not list then
47061: LD_VAR 0 5
47065: NOT
47066: IFFALSE 47070
// exit ;
47068: GO 47874
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47070: LD_VAR 0 12
47074: PUSH
47075: LD_INT 3
47077: EQUAL
47078: PUSH
47079: LD_INT 49
47081: PUSH
47082: LD_VAR 0 5
47086: IN
47087: AND
47088: PUSH
47089: LD_INT 31
47091: PPUSH
47092: LD_VAR 0 16
47096: PPUSH
47097: CALL_OW 321
47101: PUSH
47102: LD_INT 2
47104: EQUAL
47105: AND
47106: IFFALSE 47166
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47108: LD_INT 22
47110: PUSH
47111: LD_VAR 0 16
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 35
47122: PUSH
47123: LD_INT 49
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 91
47132: PUSH
47133: LD_VAR 0 1
47137: PUSH
47138: LD_INT 10
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: LIST
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: LIST
47150: PPUSH
47151: CALL_OW 69
47155: NOT
47156: IFFALSE 47166
// weapon := ru_time_lapser ;
47158: LD_ADDR_VAR 0 18
47162: PUSH
47163: LD_INT 49
47165: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47166: LD_VAR 0 12
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: IN
47181: PUSH
47182: LD_INT 11
47184: PUSH
47185: LD_VAR 0 5
47189: IN
47190: PUSH
47191: LD_INT 30
47193: PUSH
47194: LD_VAR 0 5
47198: IN
47199: OR
47200: AND
47201: PUSH
47202: LD_INT 6
47204: PPUSH
47205: LD_VAR 0 16
47209: PPUSH
47210: CALL_OW 321
47214: PUSH
47215: LD_INT 2
47217: EQUAL
47218: AND
47219: IFFALSE 47384
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47221: LD_INT 22
47223: PUSH
47224: LD_VAR 0 16
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: LD_INT 35
47238: PUSH
47239: LD_INT 11
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 35
47248: PUSH
47249: LD_INT 30
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 91
47263: PUSH
47264: LD_VAR 0 1
47268: PUSH
47269: LD_INT 18
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: LIST
47281: PPUSH
47282: CALL_OW 69
47286: NOT
47287: PUSH
47288: LD_INT 22
47290: PUSH
47291: LD_VAR 0 16
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 30
47305: PUSH
47306: LD_INT 32
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 30
47315: PUSH
47316: LD_INT 33
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 91
47330: PUSH
47331: LD_VAR 0 1
47335: PUSH
47336: LD_INT 12
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: LIST
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: PUSH
47349: EMPTY
47350: LIST
47351: PPUSH
47352: CALL_OW 69
47356: PUSH
47357: LD_INT 2
47359: GREATER
47360: AND
47361: IFFALSE 47384
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47363: LD_ADDR_VAR 0 18
47367: PUSH
47368: LD_INT 11
47370: PUSH
47371: LD_INT 30
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_VAR 0 12
47382: ARRAY
47383: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47384: LD_VAR 0 18
47388: NOT
47389: PUSH
47390: LD_INT 40
47392: PPUSH
47393: LD_VAR 0 16
47397: PPUSH
47398: CALL_OW 321
47402: PUSH
47403: LD_INT 2
47405: EQUAL
47406: AND
47407: PUSH
47408: LD_INT 7
47410: PUSH
47411: LD_VAR 0 5
47415: IN
47416: PUSH
47417: LD_INT 28
47419: PUSH
47420: LD_VAR 0 5
47424: IN
47425: OR
47426: PUSH
47427: LD_INT 45
47429: PUSH
47430: LD_VAR 0 5
47434: IN
47435: OR
47436: AND
47437: IFFALSE 47691
// begin hex := GetHexInfo ( x , y ) ;
47439: LD_ADDR_VAR 0 4
47443: PUSH
47444: LD_VAR 0 10
47448: PPUSH
47449: LD_VAR 0 11
47453: PPUSH
47454: CALL_OW 546
47458: ST_TO_ADDR
// if hex [ 1 ] then
47459: LD_VAR 0 4
47463: PUSH
47464: LD_INT 1
47466: ARRAY
47467: IFFALSE 47471
// exit ;
47469: GO 47874
// height := hex [ 2 ] ;
47471: LD_ADDR_VAR 0 15
47475: PUSH
47476: LD_VAR 0 4
47480: PUSH
47481: LD_INT 2
47483: ARRAY
47484: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47485: LD_ADDR_VAR 0 14
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: LD_INT 3
47498: PUSH
47499: LD_INT 5
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: ST_TO_ADDR
// for i in tmp do
47508: LD_ADDR_VAR 0 8
47512: PUSH
47513: LD_VAR 0 14
47517: PUSH
47518: FOR_IN
47519: IFFALSE 47689
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47521: LD_ADDR_VAR 0 9
47525: PUSH
47526: LD_VAR 0 10
47530: PPUSH
47531: LD_VAR 0 8
47535: PPUSH
47536: LD_INT 5
47538: PPUSH
47539: CALL_OW 272
47543: PUSH
47544: LD_VAR 0 11
47548: PPUSH
47549: LD_VAR 0 8
47553: PPUSH
47554: LD_INT 5
47556: PPUSH
47557: CALL_OW 273
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47566: LD_VAR 0 9
47570: PUSH
47571: LD_INT 1
47573: ARRAY
47574: PPUSH
47575: LD_VAR 0 9
47579: PUSH
47580: LD_INT 2
47582: ARRAY
47583: PPUSH
47584: CALL_OW 488
47588: IFFALSE 47687
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47590: LD_ADDR_VAR 0 4
47594: PUSH
47595: LD_VAR 0 9
47599: PUSH
47600: LD_INT 1
47602: ARRAY
47603: PPUSH
47604: LD_VAR 0 9
47608: PUSH
47609: LD_INT 2
47611: ARRAY
47612: PPUSH
47613: CALL_OW 546
47617: ST_TO_ADDR
// if hex [ 1 ] then
47618: LD_VAR 0 4
47622: PUSH
47623: LD_INT 1
47625: ARRAY
47626: IFFALSE 47630
// continue ;
47628: GO 47518
// h := hex [ 2 ] ;
47630: LD_ADDR_VAR 0 13
47634: PUSH
47635: LD_VAR 0 4
47639: PUSH
47640: LD_INT 2
47642: ARRAY
47643: ST_TO_ADDR
// if h + 7 < height then
47644: LD_VAR 0 13
47648: PUSH
47649: LD_INT 7
47651: PLUS
47652: PUSH
47653: LD_VAR 0 15
47657: LESS
47658: IFFALSE 47687
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47660: LD_ADDR_VAR 0 18
47664: PUSH
47665: LD_INT 7
47667: PUSH
47668: LD_INT 28
47670: PUSH
47671: LD_INT 45
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: PUSH
47679: LD_VAR 0 12
47683: ARRAY
47684: ST_TO_ADDR
// break ;
47685: GO 47689
// end ; end ; end ;
47687: GO 47518
47689: POP
47690: POP
// end ; if not weapon then
47691: LD_VAR 0 18
47695: NOT
47696: IFFALSE 47756
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47698: LD_ADDR_VAR 0 5
47702: PUSH
47703: LD_VAR 0 5
47707: PUSH
47708: LD_INT 11
47710: PUSH
47711: LD_INT 30
47713: PUSH
47714: LD_INT 49
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: DIFF
47722: ST_TO_ADDR
// if not list then
47723: LD_VAR 0 5
47727: NOT
47728: IFFALSE 47732
// exit ;
47730: GO 47874
// weapon := list [ rand ( 1 , list ) ] ;
47732: LD_ADDR_VAR 0 18
47736: PUSH
47737: LD_VAR 0 5
47741: PUSH
47742: LD_INT 1
47744: PPUSH
47745: LD_VAR 0 5
47749: PPUSH
47750: CALL_OW 12
47754: ARRAY
47755: ST_TO_ADDR
// end ; if weapon then
47756: LD_VAR 0 18
47760: IFFALSE 47874
// begin tmp := CostOfWeapon ( weapon ) ;
47762: LD_ADDR_VAR 0 14
47766: PUSH
47767: LD_VAR 0 18
47771: PPUSH
47772: CALL_OW 451
47776: ST_TO_ADDR
// j := GetBase ( tower ) ;
47777: LD_ADDR_VAR 0 9
47781: PUSH
47782: LD_VAR 0 1
47786: PPUSH
47787: CALL_OW 274
47791: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47792: LD_VAR 0 9
47796: PPUSH
47797: LD_INT 1
47799: PPUSH
47800: CALL_OW 275
47804: PUSH
47805: LD_VAR 0 14
47809: PUSH
47810: LD_INT 1
47812: ARRAY
47813: GREATEREQUAL
47814: PUSH
47815: LD_VAR 0 9
47819: PPUSH
47820: LD_INT 2
47822: PPUSH
47823: CALL_OW 275
47827: PUSH
47828: LD_VAR 0 14
47832: PUSH
47833: LD_INT 2
47835: ARRAY
47836: GREATEREQUAL
47837: AND
47838: PUSH
47839: LD_VAR 0 9
47843: PPUSH
47844: LD_INT 3
47846: PPUSH
47847: CALL_OW 275
47851: PUSH
47852: LD_VAR 0 14
47856: PUSH
47857: LD_INT 3
47859: ARRAY
47860: GREATEREQUAL
47861: AND
47862: IFFALSE 47874
// result := weapon ;
47864: LD_ADDR_VAR 0 3
47868: PUSH
47869: LD_VAR 0 18
47873: ST_TO_ADDR
// end ; end ;
47874: LD_VAR 0 3
47878: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47879: LD_INT 0
47881: PPUSH
47882: PPUSH
// result := true ;
47883: LD_ADDR_VAR 0 3
47887: PUSH
47888: LD_INT 1
47890: ST_TO_ADDR
// if array1 = array2 then
47891: LD_VAR 0 1
47895: PUSH
47896: LD_VAR 0 2
47900: EQUAL
47901: IFFALSE 47961
// begin for i = 1 to array1 do
47903: LD_ADDR_VAR 0 4
47907: PUSH
47908: DOUBLE
47909: LD_INT 1
47911: DEC
47912: ST_TO_ADDR
47913: LD_VAR 0 1
47917: PUSH
47918: FOR_TO
47919: IFFALSE 47957
// if array1 [ i ] <> array2 [ i ] then
47921: LD_VAR 0 1
47925: PUSH
47926: LD_VAR 0 4
47930: ARRAY
47931: PUSH
47932: LD_VAR 0 2
47936: PUSH
47937: LD_VAR 0 4
47941: ARRAY
47942: NONEQUAL
47943: IFFALSE 47955
// begin result := false ;
47945: LD_ADDR_VAR 0 3
47949: PUSH
47950: LD_INT 0
47952: ST_TO_ADDR
// break ;
47953: GO 47957
// end ;
47955: GO 47918
47957: POP
47958: POP
// end else
47959: GO 47969
// result := false ;
47961: LD_ADDR_VAR 0 3
47965: PUSH
47966: LD_INT 0
47968: ST_TO_ADDR
// end ;
47969: LD_VAR 0 3
47973: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47974: LD_INT 0
47976: PPUSH
47977: PPUSH
// if not array1 or not array2 then
47978: LD_VAR 0 1
47982: NOT
47983: PUSH
47984: LD_VAR 0 2
47988: NOT
47989: OR
47990: IFFALSE 47994
// exit ;
47992: GO 48058
// result := true ;
47994: LD_ADDR_VAR 0 3
47998: PUSH
47999: LD_INT 1
48001: ST_TO_ADDR
// for i = 1 to array1 do
48002: LD_ADDR_VAR 0 4
48006: PUSH
48007: DOUBLE
48008: LD_INT 1
48010: DEC
48011: ST_TO_ADDR
48012: LD_VAR 0 1
48016: PUSH
48017: FOR_TO
48018: IFFALSE 48056
// if array1 [ i ] <> array2 [ i ] then
48020: LD_VAR 0 1
48024: PUSH
48025: LD_VAR 0 4
48029: ARRAY
48030: PUSH
48031: LD_VAR 0 2
48035: PUSH
48036: LD_VAR 0 4
48040: ARRAY
48041: NONEQUAL
48042: IFFALSE 48054
// begin result := false ;
48044: LD_ADDR_VAR 0 3
48048: PUSH
48049: LD_INT 0
48051: ST_TO_ADDR
// break ;
48052: GO 48056
// end ;
48054: GO 48017
48056: POP
48057: POP
// end ;
48058: LD_VAR 0 3
48062: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48063: LD_INT 0
48065: PPUSH
48066: PPUSH
48067: PPUSH
// pom := GetBase ( fac ) ;
48068: LD_ADDR_VAR 0 5
48072: PUSH
48073: LD_VAR 0 1
48077: PPUSH
48078: CALL_OW 274
48082: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48083: LD_ADDR_VAR 0 4
48087: PUSH
48088: LD_VAR 0 2
48092: PUSH
48093: LD_INT 1
48095: ARRAY
48096: PPUSH
48097: LD_VAR 0 2
48101: PUSH
48102: LD_INT 2
48104: ARRAY
48105: PPUSH
48106: LD_VAR 0 2
48110: PUSH
48111: LD_INT 3
48113: ARRAY
48114: PPUSH
48115: LD_VAR 0 2
48119: PUSH
48120: LD_INT 4
48122: ARRAY
48123: PPUSH
48124: CALL_OW 449
48128: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48129: LD_ADDR_VAR 0 3
48133: PUSH
48134: LD_VAR 0 5
48138: PPUSH
48139: LD_INT 1
48141: PPUSH
48142: CALL_OW 275
48146: PUSH
48147: LD_VAR 0 4
48151: PUSH
48152: LD_INT 1
48154: ARRAY
48155: GREATEREQUAL
48156: PUSH
48157: LD_VAR 0 5
48161: PPUSH
48162: LD_INT 2
48164: PPUSH
48165: CALL_OW 275
48169: PUSH
48170: LD_VAR 0 4
48174: PUSH
48175: LD_INT 2
48177: ARRAY
48178: GREATEREQUAL
48179: AND
48180: PUSH
48181: LD_VAR 0 5
48185: PPUSH
48186: LD_INT 3
48188: PPUSH
48189: CALL_OW 275
48193: PUSH
48194: LD_VAR 0 4
48198: PUSH
48199: LD_INT 3
48201: ARRAY
48202: GREATEREQUAL
48203: AND
48204: ST_TO_ADDR
// end ;
48205: LD_VAR 0 3
48209: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48210: LD_INT 0
48212: PPUSH
48213: PPUSH
48214: PPUSH
48215: PPUSH
// pom := GetBase ( building ) ;
48216: LD_ADDR_VAR 0 3
48220: PUSH
48221: LD_VAR 0 1
48225: PPUSH
48226: CALL_OW 274
48230: ST_TO_ADDR
// if not pom then
48231: LD_VAR 0 3
48235: NOT
48236: IFFALSE 48240
// exit ;
48238: GO 48410
// btype := GetBType ( building ) ;
48240: LD_ADDR_VAR 0 5
48244: PUSH
48245: LD_VAR 0 1
48249: PPUSH
48250: CALL_OW 266
48254: ST_TO_ADDR
// if btype = b_armoury then
48255: LD_VAR 0 5
48259: PUSH
48260: LD_INT 4
48262: EQUAL
48263: IFFALSE 48273
// btype := b_barracks ;
48265: LD_ADDR_VAR 0 5
48269: PUSH
48270: LD_INT 5
48272: ST_TO_ADDR
// if btype = b_depot then
48273: LD_VAR 0 5
48277: PUSH
48278: LD_INT 0
48280: EQUAL
48281: IFFALSE 48291
// btype := b_warehouse ;
48283: LD_ADDR_VAR 0 5
48287: PUSH
48288: LD_INT 1
48290: ST_TO_ADDR
// if btype = b_workshop then
48291: LD_VAR 0 5
48295: PUSH
48296: LD_INT 2
48298: EQUAL
48299: IFFALSE 48309
// btype := b_factory ;
48301: LD_ADDR_VAR 0 5
48305: PUSH
48306: LD_INT 3
48308: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48309: LD_ADDR_VAR 0 4
48313: PUSH
48314: LD_VAR 0 5
48318: PPUSH
48319: LD_VAR 0 1
48323: PPUSH
48324: CALL_OW 248
48328: PPUSH
48329: CALL_OW 450
48333: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48334: LD_ADDR_VAR 0 2
48338: PUSH
48339: LD_VAR 0 3
48343: PPUSH
48344: LD_INT 1
48346: PPUSH
48347: CALL_OW 275
48351: PUSH
48352: LD_VAR 0 4
48356: PUSH
48357: LD_INT 1
48359: ARRAY
48360: GREATEREQUAL
48361: PUSH
48362: LD_VAR 0 3
48366: PPUSH
48367: LD_INT 2
48369: PPUSH
48370: CALL_OW 275
48374: PUSH
48375: LD_VAR 0 4
48379: PUSH
48380: LD_INT 2
48382: ARRAY
48383: GREATEREQUAL
48384: AND
48385: PUSH
48386: LD_VAR 0 3
48390: PPUSH
48391: LD_INT 3
48393: PPUSH
48394: CALL_OW 275
48398: PUSH
48399: LD_VAR 0 4
48403: PUSH
48404: LD_INT 3
48406: ARRAY
48407: GREATEREQUAL
48408: AND
48409: ST_TO_ADDR
// end ;
48410: LD_VAR 0 2
48414: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48415: LD_INT 0
48417: PPUSH
48418: PPUSH
48419: PPUSH
// pom := GetBase ( building ) ;
48420: LD_ADDR_VAR 0 4
48424: PUSH
48425: LD_VAR 0 1
48429: PPUSH
48430: CALL_OW 274
48434: ST_TO_ADDR
// if not pom then
48435: LD_VAR 0 4
48439: NOT
48440: IFFALSE 48444
// exit ;
48442: GO 48545
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48444: LD_ADDR_VAR 0 5
48448: PUSH
48449: LD_VAR 0 2
48453: PPUSH
48454: LD_VAR 0 1
48458: PPUSH
48459: CALL_OW 248
48463: PPUSH
48464: CALL_OW 450
48468: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48469: LD_ADDR_VAR 0 3
48473: PUSH
48474: LD_VAR 0 4
48478: PPUSH
48479: LD_INT 1
48481: PPUSH
48482: CALL_OW 275
48486: PUSH
48487: LD_VAR 0 5
48491: PUSH
48492: LD_INT 1
48494: ARRAY
48495: GREATEREQUAL
48496: PUSH
48497: LD_VAR 0 4
48501: PPUSH
48502: LD_INT 2
48504: PPUSH
48505: CALL_OW 275
48509: PUSH
48510: LD_VAR 0 5
48514: PUSH
48515: LD_INT 2
48517: ARRAY
48518: GREATEREQUAL
48519: AND
48520: PUSH
48521: LD_VAR 0 4
48525: PPUSH
48526: LD_INT 3
48528: PPUSH
48529: CALL_OW 275
48533: PUSH
48534: LD_VAR 0 5
48538: PUSH
48539: LD_INT 3
48541: ARRAY
48542: GREATEREQUAL
48543: AND
48544: ST_TO_ADDR
// end ;
48545: LD_VAR 0 3
48549: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48550: LD_INT 0
48552: PPUSH
48553: PPUSH
48554: PPUSH
48555: PPUSH
48556: PPUSH
48557: PPUSH
48558: PPUSH
48559: PPUSH
48560: PPUSH
48561: PPUSH
48562: PPUSH
// result := false ;
48563: LD_ADDR_VAR 0 8
48567: PUSH
48568: LD_INT 0
48570: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48571: LD_VAR 0 5
48575: NOT
48576: PUSH
48577: LD_VAR 0 1
48581: NOT
48582: OR
48583: PUSH
48584: LD_VAR 0 2
48588: NOT
48589: OR
48590: PUSH
48591: LD_VAR 0 3
48595: NOT
48596: OR
48597: IFFALSE 48601
// exit ;
48599: GO 49415
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48601: LD_ADDR_VAR 0 14
48605: PUSH
48606: LD_VAR 0 1
48610: PPUSH
48611: LD_VAR 0 2
48615: PPUSH
48616: LD_VAR 0 3
48620: PPUSH
48621: LD_VAR 0 4
48625: PPUSH
48626: LD_VAR 0 5
48630: PUSH
48631: LD_INT 1
48633: ARRAY
48634: PPUSH
48635: CALL_OW 248
48639: PPUSH
48640: LD_INT 0
48642: PPUSH
48643: CALL 50652 0 6
48647: ST_TO_ADDR
// if not hexes then
48648: LD_VAR 0 14
48652: NOT
48653: IFFALSE 48657
// exit ;
48655: GO 49415
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48657: LD_ADDR_VAR 0 17
48661: PUSH
48662: LD_VAR 0 5
48666: PPUSH
48667: LD_INT 22
48669: PUSH
48670: LD_VAR 0 13
48674: PPUSH
48675: CALL_OW 255
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: PUSH
48687: LD_INT 30
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 30
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: LIST
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PPUSH
48716: CALL_OW 72
48720: ST_TO_ADDR
// for i = 1 to hexes do
48721: LD_ADDR_VAR 0 9
48725: PUSH
48726: DOUBLE
48727: LD_INT 1
48729: DEC
48730: ST_TO_ADDR
48731: LD_VAR 0 14
48735: PUSH
48736: FOR_TO
48737: IFFALSE 49413
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48739: LD_ADDR_VAR 0 13
48743: PUSH
48744: LD_VAR 0 14
48748: PUSH
48749: LD_VAR 0 9
48753: ARRAY
48754: PUSH
48755: LD_INT 1
48757: ARRAY
48758: PPUSH
48759: LD_VAR 0 14
48763: PUSH
48764: LD_VAR 0 9
48768: ARRAY
48769: PUSH
48770: LD_INT 2
48772: ARRAY
48773: PPUSH
48774: CALL_OW 428
48778: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48779: LD_VAR 0 14
48783: PUSH
48784: LD_VAR 0 9
48788: ARRAY
48789: PUSH
48790: LD_INT 1
48792: ARRAY
48793: PPUSH
48794: LD_VAR 0 14
48798: PUSH
48799: LD_VAR 0 9
48803: ARRAY
48804: PUSH
48805: LD_INT 2
48807: ARRAY
48808: PPUSH
48809: CALL_OW 351
48813: PUSH
48814: LD_VAR 0 14
48818: PUSH
48819: LD_VAR 0 9
48823: ARRAY
48824: PUSH
48825: LD_INT 1
48827: ARRAY
48828: PPUSH
48829: LD_VAR 0 14
48833: PUSH
48834: LD_VAR 0 9
48838: ARRAY
48839: PUSH
48840: LD_INT 2
48842: ARRAY
48843: PPUSH
48844: CALL_OW 488
48848: NOT
48849: OR
48850: PUSH
48851: LD_VAR 0 13
48855: PPUSH
48856: CALL_OW 247
48860: PUSH
48861: LD_INT 3
48863: EQUAL
48864: OR
48865: IFFALSE 48871
// exit ;
48867: POP
48868: POP
48869: GO 49415
// if not tmp then
48871: LD_VAR 0 13
48875: NOT
48876: IFFALSE 48880
// continue ;
48878: GO 48736
// result := true ;
48880: LD_ADDR_VAR 0 8
48884: PUSH
48885: LD_INT 1
48887: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48888: LD_VAR 0 6
48892: PUSH
48893: LD_VAR 0 13
48897: PPUSH
48898: CALL_OW 247
48902: PUSH
48903: LD_INT 2
48905: EQUAL
48906: AND
48907: PUSH
48908: LD_VAR 0 13
48912: PPUSH
48913: CALL_OW 263
48917: PUSH
48918: LD_INT 1
48920: EQUAL
48921: AND
48922: IFFALSE 49086
// begin if IsDrivenBy ( tmp ) then
48924: LD_VAR 0 13
48928: PPUSH
48929: CALL_OW 311
48933: IFFALSE 48937
// continue ;
48935: GO 48736
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48937: LD_VAR 0 6
48941: PPUSH
48942: LD_INT 3
48944: PUSH
48945: LD_INT 60
48947: PUSH
48948: EMPTY
48949: LIST
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 3
48957: PUSH
48958: LD_INT 55
48960: PUSH
48961: EMPTY
48962: LIST
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PPUSH
48972: CALL_OW 72
48976: IFFALSE 49084
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48978: LD_ADDR_VAR 0 18
48982: PUSH
48983: LD_VAR 0 6
48987: PPUSH
48988: LD_INT 3
48990: PUSH
48991: LD_INT 60
48993: PUSH
48994: EMPTY
48995: LIST
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 3
49003: PUSH
49004: LD_INT 55
49006: PUSH
49007: EMPTY
49008: LIST
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PPUSH
49018: CALL_OW 72
49022: PUSH
49023: LD_INT 1
49025: ARRAY
49026: ST_TO_ADDR
// if IsInUnit ( driver ) then
49027: LD_VAR 0 18
49031: PPUSH
49032: CALL_OW 310
49036: IFFALSE 49047
// ComExit ( driver ) ;
49038: LD_VAR 0 18
49042: PPUSH
49043: CALL 73836 0 1
// AddComEnterUnit ( driver , tmp ) ;
49047: LD_VAR 0 18
49051: PPUSH
49052: LD_VAR 0 13
49056: PPUSH
49057: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49061: LD_VAR 0 18
49065: PPUSH
49066: LD_VAR 0 7
49070: PPUSH
49071: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49075: LD_VAR 0 18
49079: PPUSH
49080: CALL_OW 181
// end ; continue ;
49084: GO 48736
// end ; if not cleaners or not tmp in cleaners then
49086: LD_VAR 0 6
49090: NOT
49091: PUSH
49092: LD_VAR 0 13
49096: PUSH
49097: LD_VAR 0 6
49101: IN
49102: NOT
49103: OR
49104: IFFALSE 49411
// begin if dep then
49106: LD_VAR 0 17
49110: IFFALSE 49246
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49112: LD_ADDR_VAR 0 16
49116: PUSH
49117: LD_VAR 0 17
49121: PUSH
49122: LD_INT 1
49124: ARRAY
49125: PPUSH
49126: CALL_OW 250
49130: PPUSH
49131: LD_VAR 0 17
49135: PUSH
49136: LD_INT 1
49138: ARRAY
49139: PPUSH
49140: CALL_OW 254
49144: PPUSH
49145: LD_INT 5
49147: PPUSH
49148: CALL_OW 272
49152: PUSH
49153: LD_VAR 0 17
49157: PUSH
49158: LD_INT 1
49160: ARRAY
49161: PPUSH
49162: CALL_OW 251
49166: PPUSH
49167: LD_VAR 0 17
49171: PUSH
49172: LD_INT 1
49174: ARRAY
49175: PPUSH
49176: CALL_OW 254
49180: PPUSH
49181: LD_INT 5
49183: PPUSH
49184: CALL_OW 273
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49193: LD_VAR 0 16
49197: PUSH
49198: LD_INT 1
49200: ARRAY
49201: PPUSH
49202: LD_VAR 0 16
49206: PUSH
49207: LD_INT 2
49209: ARRAY
49210: PPUSH
49211: CALL_OW 488
49215: IFFALSE 49246
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49217: LD_VAR 0 13
49221: PPUSH
49222: LD_VAR 0 16
49226: PUSH
49227: LD_INT 1
49229: ARRAY
49230: PPUSH
49231: LD_VAR 0 16
49235: PUSH
49236: LD_INT 2
49238: ARRAY
49239: PPUSH
49240: CALL_OW 111
// continue ;
49244: GO 48736
// end ; end ; r := GetDir ( tmp ) ;
49246: LD_ADDR_VAR 0 15
49250: PUSH
49251: LD_VAR 0 13
49255: PPUSH
49256: CALL_OW 254
49260: ST_TO_ADDR
// if r = 5 then
49261: LD_VAR 0 15
49265: PUSH
49266: LD_INT 5
49268: EQUAL
49269: IFFALSE 49279
// r := 0 ;
49271: LD_ADDR_VAR 0 15
49275: PUSH
49276: LD_INT 0
49278: ST_TO_ADDR
// for j = r to 5 do
49279: LD_ADDR_VAR 0 10
49283: PUSH
49284: DOUBLE
49285: LD_VAR 0 15
49289: DEC
49290: ST_TO_ADDR
49291: LD_INT 5
49293: PUSH
49294: FOR_TO
49295: IFFALSE 49409
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49297: LD_ADDR_VAR 0 11
49301: PUSH
49302: LD_VAR 0 13
49306: PPUSH
49307: CALL_OW 250
49311: PPUSH
49312: LD_VAR 0 10
49316: PPUSH
49317: LD_INT 2
49319: PPUSH
49320: CALL_OW 272
49324: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49325: LD_ADDR_VAR 0 12
49329: PUSH
49330: LD_VAR 0 13
49334: PPUSH
49335: CALL_OW 251
49339: PPUSH
49340: LD_VAR 0 10
49344: PPUSH
49345: LD_INT 2
49347: PPUSH
49348: CALL_OW 273
49352: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49353: LD_VAR 0 11
49357: PPUSH
49358: LD_VAR 0 12
49362: PPUSH
49363: CALL_OW 488
49367: PUSH
49368: LD_VAR 0 11
49372: PPUSH
49373: LD_VAR 0 12
49377: PPUSH
49378: CALL_OW 428
49382: NOT
49383: AND
49384: IFFALSE 49407
// begin ComMoveXY ( tmp , _x , _y ) ;
49386: LD_VAR 0 13
49390: PPUSH
49391: LD_VAR 0 11
49395: PPUSH
49396: LD_VAR 0 12
49400: PPUSH
49401: CALL_OW 111
// break ;
49405: GO 49409
// end ; end ;
49407: GO 49294
49409: POP
49410: POP
// end ; end ;
49411: GO 48736
49413: POP
49414: POP
// end ;
49415: LD_VAR 0 8
49419: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49420: LD_INT 0
49422: PPUSH
// result := true ;
49423: LD_ADDR_VAR 0 3
49427: PUSH
49428: LD_INT 1
49430: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49431: LD_VAR 0 2
49435: PUSH
49436: LD_INT 24
49438: DOUBLE
49439: EQUAL
49440: IFTRUE 49450
49442: LD_INT 33
49444: DOUBLE
49445: EQUAL
49446: IFTRUE 49450
49448: GO 49475
49450: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49451: LD_ADDR_VAR 0 3
49455: PUSH
49456: LD_INT 32
49458: PPUSH
49459: LD_VAR 0 1
49463: PPUSH
49464: CALL_OW 321
49468: PUSH
49469: LD_INT 2
49471: EQUAL
49472: ST_TO_ADDR
49473: GO 49795
49475: LD_INT 20
49477: DOUBLE
49478: EQUAL
49479: IFTRUE 49483
49481: GO 49508
49483: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49484: LD_ADDR_VAR 0 3
49488: PUSH
49489: LD_INT 6
49491: PPUSH
49492: LD_VAR 0 1
49496: PPUSH
49497: CALL_OW 321
49501: PUSH
49502: LD_INT 2
49504: EQUAL
49505: ST_TO_ADDR
49506: GO 49795
49508: LD_INT 22
49510: DOUBLE
49511: EQUAL
49512: IFTRUE 49522
49514: LD_INT 36
49516: DOUBLE
49517: EQUAL
49518: IFTRUE 49522
49520: GO 49547
49522: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49523: LD_ADDR_VAR 0 3
49527: PUSH
49528: LD_INT 15
49530: PPUSH
49531: LD_VAR 0 1
49535: PPUSH
49536: CALL_OW 321
49540: PUSH
49541: LD_INT 2
49543: EQUAL
49544: ST_TO_ADDR
49545: GO 49795
49547: LD_INT 30
49549: DOUBLE
49550: EQUAL
49551: IFTRUE 49555
49553: GO 49580
49555: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49556: LD_ADDR_VAR 0 3
49560: PUSH
49561: LD_INT 20
49563: PPUSH
49564: LD_VAR 0 1
49568: PPUSH
49569: CALL_OW 321
49573: PUSH
49574: LD_INT 2
49576: EQUAL
49577: ST_TO_ADDR
49578: GO 49795
49580: LD_INT 28
49582: DOUBLE
49583: EQUAL
49584: IFTRUE 49594
49586: LD_INT 21
49588: DOUBLE
49589: EQUAL
49590: IFTRUE 49594
49592: GO 49619
49594: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49595: LD_ADDR_VAR 0 3
49599: PUSH
49600: LD_INT 21
49602: PPUSH
49603: LD_VAR 0 1
49607: PPUSH
49608: CALL_OW 321
49612: PUSH
49613: LD_INT 2
49615: EQUAL
49616: ST_TO_ADDR
49617: GO 49795
49619: LD_INT 16
49621: DOUBLE
49622: EQUAL
49623: IFTRUE 49627
49625: GO 49654
49627: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49628: LD_ADDR_VAR 0 3
49632: PUSH
49633: LD_EXP 55
49637: PPUSH
49638: LD_VAR 0 1
49642: PPUSH
49643: CALL_OW 321
49647: PUSH
49648: LD_INT 2
49650: EQUAL
49651: ST_TO_ADDR
49652: GO 49795
49654: LD_INT 19
49656: DOUBLE
49657: EQUAL
49658: IFTRUE 49668
49660: LD_INT 23
49662: DOUBLE
49663: EQUAL
49664: IFTRUE 49668
49666: GO 49695
49668: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49669: LD_ADDR_VAR 0 3
49673: PUSH
49674: LD_EXP 54
49678: PPUSH
49679: LD_VAR 0 1
49683: PPUSH
49684: CALL_OW 321
49688: PUSH
49689: LD_INT 2
49691: EQUAL
49692: ST_TO_ADDR
49693: GO 49795
49695: LD_INT 17
49697: DOUBLE
49698: EQUAL
49699: IFTRUE 49703
49701: GO 49728
49703: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49704: LD_ADDR_VAR 0 3
49708: PUSH
49709: LD_INT 39
49711: PPUSH
49712: LD_VAR 0 1
49716: PPUSH
49717: CALL_OW 321
49721: PUSH
49722: LD_INT 2
49724: EQUAL
49725: ST_TO_ADDR
49726: GO 49795
49728: LD_INT 18
49730: DOUBLE
49731: EQUAL
49732: IFTRUE 49736
49734: GO 49761
49736: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49737: LD_ADDR_VAR 0 3
49741: PUSH
49742: LD_INT 40
49744: PPUSH
49745: LD_VAR 0 1
49749: PPUSH
49750: CALL_OW 321
49754: PUSH
49755: LD_INT 2
49757: EQUAL
49758: ST_TO_ADDR
49759: GO 49795
49761: LD_INT 27
49763: DOUBLE
49764: EQUAL
49765: IFTRUE 49769
49767: GO 49794
49769: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49770: LD_ADDR_VAR 0 3
49774: PUSH
49775: LD_INT 35
49777: PPUSH
49778: LD_VAR 0 1
49782: PPUSH
49783: CALL_OW 321
49787: PUSH
49788: LD_INT 2
49790: EQUAL
49791: ST_TO_ADDR
49792: GO 49795
49794: POP
// end ;
49795: LD_VAR 0 3
49799: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49800: LD_INT 0
49802: PPUSH
49803: PPUSH
49804: PPUSH
49805: PPUSH
49806: PPUSH
49807: PPUSH
49808: PPUSH
49809: PPUSH
49810: PPUSH
49811: PPUSH
49812: PPUSH
// result := false ;
49813: LD_ADDR_VAR 0 6
49817: PUSH
49818: LD_INT 0
49820: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49821: LD_VAR 0 1
49825: NOT
49826: PUSH
49827: LD_VAR 0 1
49831: PPUSH
49832: CALL_OW 266
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: IN
49847: NOT
49848: OR
49849: PUSH
49850: LD_VAR 0 2
49854: NOT
49855: OR
49856: PUSH
49857: LD_VAR 0 5
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: LD_INT 3
49873: PUSH
49874: LD_INT 4
49876: PUSH
49877: LD_INT 5
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: IN
49888: NOT
49889: OR
49890: PUSH
49891: LD_VAR 0 3
49895: PPUSH
49896: LD_VAR 0 4
49900: PPUSH
49901: CALL_OW 488
49905: NOT
49906: OR
49907: IFFALSE 49911
// exit ;
49909: GO 50647
// side := GetSide ( depot ) ;
49911: LD_ADDR_VAR 0 9
49915: PUSH
49916: LD_VAR 0 1
49920: PPUSH
49921: CALL_OW 255
49925: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49926: LD_VAR 0 9
49930: PPUSH
49931: LD_VAR 0 2
49935: PPUSH
49936: CALL 49420 0 2
49940: NOT
49941: IFFALSE 49945
// exit ;
49943: GO 50647
// pom := GetBase ( depot ) ;
49945: LD_ADDR_VAR 0 10
49949: PUSH
49950: LD_VAR 0 1
49954: PPUSH
49955: CALL_OW 274
49959: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49960: LD_ADDR_VAR 0 11
49964: PUSH
49965: LD_VAR 0 2
49969: PPUSH
49970: LD_VAR 0 1
49974: PPUSH
49975: CALL_OW 248
49979: PPUSH
49980: CALL_OW 450
49984: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49985: LD_VAR 0 10
49989: PPUSH
49990: LD_INT 1
49992: PPUSH
49993: CALL_OW 275
49997: PUSH
49998: LD_VAR 0 11
50002: PUSH
50003: LD_INT 1
50005: ARRAY
50006: GREATEREQUAL
50007: PUSH
50008: LD_VAR 0 10
50012: PPUSH
50013: LD_INT 2
50015: PPUSH
50016: CALL_OW 275
50020: PUSH
50021: LD_VAR 0 11
50025: PUSH
50026: LD_INT 2
50028: ARRAY
50029: GREATEREQUAL
50030: AND
50031: PUSH
50032: LD_VAR 0 10
50036: PPUSH
50037: LD_INT 3
50039: PPUSH
50040: CALL_OW 275
50044: PUSH
50045: LD_VAR 0 11
50049: PUSH
50050: LD_INT 3
50052: ARRAY
50053: GREATEREQUAL
50054: AND
50055: NOT
50056: IFFALSE 50060
// exit ;
50058: GO 50647
// if GetBType ( depot ) = b_depot then
50060: LD_VAR 0 1
50064: PPUSH
50065: CALL_OW 266
50069: PUSH
50070: LD_INT 0
50072: EQUAL
50073: IFFALSE 50085
// dist := 28 else
50075: LD_ADDR_VAR 0 14
50079: PUSH
50080: LD_INT 28
50082: ST_TO_ADDR
50083: GO 50093
// dist := 36 ;
50085: LD_ADDR_VAR 0 14
50089: PUSH
50090: LD_INT 36
50092: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50093: LD_VAR 0 1
50097: PPUSH
50098: LD_VAR 0 3
50102: PPUSH
50103: LD_VAR 0 4
50107: PPUSH
50108: CALL_OW 297
50112: PUSH
50113: LD_VAR 0 14
50117: GREATER
50118: IFFALSE 50122
// exit ;
50120: GO 50647
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50122: LD_ADDR_VAR 0 12
50126: PUSH
50127: LD_VAR 0 2
50131: PPUSH
50132: LD_VAR 0 3
50136: PPUSH
50137: LD_VAR 0 4
50141: PPUSH
50142: LD_VAR 0 5
50146: PPUSH
50147: LD_VAR 0 1
50151: PPUSH
50152: CALL_OW 248
50156: PPUSH
50157: LD_INT 0
50159: PPUSH
50160: CALL 50652 0 6
50164: ST_TO_ADDR
// if not hexes then
50165: LD_VAR 0 12
50169: NOT
50170: IFFALSE 50174
// exit ;
50172: GO 50647
// hex := GetHexInfo ( x , y ) ;
50174: LD_ADDR_VAR 0 15
50178: PUSH
50179: LD_VAR 0 3
50183: PPUSH
50184: LD_VAR 0 4
50188: PPUSH
50189: CALL_OW 546
50193: ST_TO_ADDR
// if hex [ 1 ] then
50194: LD_VAR 0 15
50198: PUSH
50199: LD_INT 1
50201: ARRAY
50202: IFFALSE 50206
// exit ;
50204: GO 50647
// height := hex [ 2 ] ;
50206: LD_ADDR_VAR 0 13
50210: PUSH
50211: LD_VAR 0 15
50215: PUSH
50216: LD_INT 2
50218: ARRAY
50219: ST_TO_ADDR
// for i = 1 to hexes do
50220: LD_ADDR_VAR 0 7
50224: PUSH
50225: DOUBLE
50226: LD_INT 1
50228: DEC
50229: ST_TO_ADDR
50230: LD_VAR 0 12
50234: PUSH
50235: FOR_TO
50236: IFFALSE 50566
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50238: LD_VAR 0 12
50242: PUSH
50243: LD_VAR 0 7
50247: ARRAY
50248: PUSH
50249: LD_INT 1
50251: ARRAY
50252: PPUSH
50253: LD_VAR 0 12
50257: PUSH
50258: LD_VAR 0 7
50262: ARRAY
50263: PUSH
50264: LD_INT 2
50266: ARRAY
50267: PPUSH
50268: CALL_OW 488
50272: NOT
50273: PUSH
50274: LD_VAR 0 12
50278: PUSH
50279: LD_VAR 0 7
50283: ARRAY
50284: PUSH
50285: LD_INT 1
50287: ARRAY
50288: PPUSH
50289: LD_VAR 0 12
50293: PUSH
50294: LD_VAR 0 7
50298: ARRAY
50299: PUSH
50300: LD_INT 2
50302: ARRAY
50303: PPUSH
50304: CALL_OW 428
50308: PUSH
50309: LD_INT 0
50311: GREATER
50312: OR
50313: PUSH
50314: LD_VAR 0 12
50318: PUSH
50319: LD_VAR 0 7
50323: ARRAY
50324: PUSH
50325: LD_INT 1
50327: ARRAY
50328: PPUSH
50329: LD_VAR 0 12
50333: PUSH
50334: LD_VAR 0 7
50338: ARRAY
50339: PUSH
50340: LD_INT 2
50342: ARRAY
50343: PPUSH
50344: CALL_OW 351
50348: OR
50349: IFFALSE 50355
// exit ;
50351: POP
50352: POP
50353: GO 50647
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50355: LD_ADDR_VAR 0 8
50359: PUSH
50360: LD_VAR 0 12
50364: PUSH
50365: LD_VAR 0 7
50369: ARRAY
50370: PUSH
50371: LD_INT 1
50373: ARRAY
50374: PPUSH
50375: LD_VAR 0 12
50379: PUSH
50380: LD_VAR 0 7
50384: ARRAY
50385: PUSH
50386: LD_INT 2
50388: ARRAY
50389: PPUSH
50390: CALL_OW 546
50394: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50395: LD_VAR 0 8
50399: PUSH
50400: LD_INT 1
50402: ARRAY
50403: PUSH
50404: LD_VAR 0 8
50408: PUSH
50409: LD_INT 2
50411: ARRAY
50412: PUSH
50413: LD_VAR 0 13
50417: PUSH
50418: LD_INT 2
50420: PLUS
50421: GREATER
50422: OR
50423: PUSH
50424: LD_VAR 0 8
50428: PUSH
50429: LD_INT 2
50431: ARRAY
50432: PUSH
50433: LD_VAR 0 13
50437: PUSH
50438: LD_INT 2
50440: MINUS
50441: LESS
50442: OR
50443: PUSH
50444: LD_VAR 0 8
50448: PUSH
50449: LD_INT 3
50451: ARRAY
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 8
50458: PUSH
50459: LD_INT 9
50461: PUSH
50462: LD_INT 10
50464: PUSH
50465: LD_INT 11
50467: PUSH
50468: LD_INT 12
50470: PUSH
50471: LD_INT 13
50473: PUSH
50474: LD_INT 16
50476: PUSH
50477: LD_INT 17
50479: PUSH
50480: LD_INT 18
50482: PUSH
50483: LD_INT 19
50485: PUSH
50486: LD_INT 20
50488: PUSH
50489: LD_INT 21
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: IN
50507: NOT
50508: OR
50509: PUSH
50510: LD_VAR 0 8
50514: PUSH
50515: LD_INT 5
50517: ARRAY
50518: NOT
50519: OR
50520: PUSH
50521: LD_VAR 0 8
50525: PUSH
50526: LD_INT 6
50528: ARRAY
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 7
50538: PUSH
50539: LD_INT 9
50541: PUSH
50542: LD_INT 10
50544: PUSH
50545: LD_INT 11
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: IN
50556: NOT
50557: OR
50558: IFFALSE 50564
// exit ;
50560: POP
50561: POP
50562: GO 50647
// end ;
50564: GO 50235
50566: POP
50567: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50568: LD_VAR 0 9
50572: PPUSH
50573: LD_VAR 0 3
50577: PPUSH
50578: LD_VAR 0 4
50582: PPUSH
50583: LD_INT 20
50585: PPUSH
50586: CALL 42593 0 4
50590: PUSH
50591: LD_INT 4
50593: ARRAY
50594: IFFALSE 50598
// exit ;
50596: GO 50647
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50598: LD_VAR 0 2
50602: PUSH
50603: LD_INT 29
50605: PUSH
50606: LD_INT 30
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: IN
50613: PUSH
50614: LD_VAR 0 3
50618: PPUSH
50619: LD_VAR 0 4
50623: PPUSH
50624: LD_VAR 0 9
50628: PPUSH
50629: CALL_OW 440
50633: NOT
50634: AND
50635: IFFALSE 50639
// exit ;
50637: GO 50647
// result := true ;
50639: LD_ADDR_VAR 0 6
50643: PUSH
50644: LD_INT 1
50646: ST_TO_ADDR
// end ;
50647: LD_VAR 0 6
50651: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50652: LD_INT 0
50654: PPUSH
50655: PPUSH
50656: PPUSH
50657: PPUSH
50658: PPUSH
50659: PPUSH
50660: PPUSH
50661: PPUSH
50662: PPUSH
50663: PPUSH
50664: PPUSH
50665: PPUSH
50666: PPUSH
50667: PPUSH
50668: PPUSH
50669: PPUSH
50670: PPUSH
50671: PPUSH
50672: PPUSH
50673: PPUSH
50674: PPUSH
50675: PPUSH
50676: PPUSH
50677: PPUSH
50678: PPUSH
50679: PPUSH
50680: PPUSH
50681: PPUSH
50682: PPUSH
50683: PPUSH
50684: PPUSH
50685: PPUSH
50686: PPUSH
50687: PPUSH
50688: PPUSH
50689: PPUSH
50690: PPUSH
50691: PPUSH
50692: PPUSH
50693: PPUSH
50694: PPUSH
50695: PPUSH
50696: PPUSH
50697: PPUSH
50698: PPUSH
50699: PPUSH
50700: PPUSH
50701: PPUSH
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
50706: PPUSH
50707: PPUSH
50708: PPUSH
50709: PPUSH
50710: PPUSH
50711: PPUSH
// result = [ ] ;
50712: LD_ADDR_VAR 0 7
50716: PUSH
50717: EMPTY
50718: ST_TO_ADDR
// temp_list = [ ] ;
50719: LD_ADDR_VAR 0 9
50723: PUSH
50724: EMPTY
50725: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50726: LD_VAR 0 4
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 3
50742: PUSH
50743: LD_INT 4
50745: PUSH
50746: LD_INT 5
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: IN
50757: NOT
50758: PUSH
50759: LD_VAR 0 1
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: IN
50774: PUSH
50775: LD_VAR 0 5
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: LD_INT 2
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: LIST
50793: IN
50794: NOT
50795: AND
50796: OR
50797: IFFALSE 50801
// exit ;
50799: GO 69192
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50801: LD_VAR 0 1
50805: PUSH
50806: LD_INT 6
50808: PUSH
50809: LD_INT 7
50811: PUSH
50812: LD_INT 8
50814: PUSH
50815: LD_INT 13
50817: PUSH
50818: LD_INT 12
50820: PUSH
50821: LD_INT 15
50823: PUSH
50824: LD_INT 11
50826: PUSH
50827: LD_INT 14
50829: PUSH
50830: LD_INT 10
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: IN
50844: IFFALSE 50854
// btype = b_lab ;
50846: LD_ADDR_VAR 0 1
50850: PUSH
50851: LD_INT 6
50853: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50854: LD_VAR 0 6
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: LIST
50872: IN
50873: NOT
50874: PUSH
50875: LD_VAR 0 1
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: LD_INT 3
50891: PUSH
50892: LD_INT 6
50894: PUSH
50895: LD_INT 36
50897: PUSH
50898: LD_INT 4
50900: PUSH
50901: LD_INT 5
50903: PUSH
50904: LD_INT 31
50906: PUSH
50907: LD_INT 32
50909: PUSH
50910: LD_INT 33
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: IN
50926: NOT
50927: PUSH
50928: LD_VAR 0 6
50932: PUSH
50933: LD_INT 1
50935: EQUAL
50936: AND
50937: OR
50938: PUSH
50939: LD_VAR 0 1
50943: PUSH
50944: LD_INT 2
50946: PUSH
50947: LD_INT 3
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: IN
50954: NOT
50955: PUSH
50956: LD_VAR 0 6
50960: PUSH
50961: LD_INT 2
50963: EQUAL
50964: AND
50965: OR
50966: IFFALSE 50976
// mode = 0 ;
50968: LD_ADDR_VAR 0 6
50972: PUSH
50973: LD_INT 0
50975: ST_TO_ADDR
// case mode of 0 :
50976: LD_VAR 0 6
50980: PUSH
50981: LD_INT 0
50983: DOUBLE
50984: EQUAL
50985: IFTRUE 50989
50987: GO 62442
50989: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50990: LD_ADDR_VAR 0 11
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: LD_INT 3
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: LD_INT 3
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51183: LD_ADDR_VAR 0 12
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: NEG
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: NEG
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 3
51340: NEG
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 3
51351: NEG
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51379: LD_ADDR_VAR 0 13
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 2
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: NEG
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: NEG
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: LD_INT 3
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 3
51538: NEG
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 3
51550: NEG
51551: PUSH
51552: LD_INT 3
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51578: LD_ADDR_VAR 0 14
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: LD_INT 2
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 3
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 3
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51774: LD_ADDR_VAR 0 15
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 3
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 3
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51967: LD_ADDR_VAR 0 16
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 3
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 3
52124: PUSH
52125: LD_INT 3
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: LD_INT 3
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52160: LD_ADDR_VAR 0 17
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: LD_INT 2
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 2
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: NEG
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52390: LD_ADDR_VAR 0 18
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52620: LD_ADDR_VAR 0 19
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 2
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52850: LD_ADDR_VAR 0 20
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 2
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 2
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53080: LD_ADDR_VAR 0 21
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 2
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 2
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 2
53215: PUSH
53216: LD_INT 2
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 2
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: LD_INT 2
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53310: LD_ADDR_VAR 0 22
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 2
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: LD_INT 2
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53540: LD_ADDR_VAR 0 23
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: LD_INT 2
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 2
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 2
53675: PUSH
53676: LD_INT 2
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: LD_INT 2
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: NEG
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: LD_INT 3
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: LD_INT 3
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: LD_INT 2
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53820: LD_ADDR_VAR 0 24
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 2
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 3
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54096: LD_ADDR_VAR 0 25
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: NEG
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 2
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: LD_INT 2
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: LD_INT 2
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: NEG
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 2
54295: NEG
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 3
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 3
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54370: LD_ADDR_VAR 0 26
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: LD_INT 3
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: LD_INT 3
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54646: LD_ADDR_VAR 0 27
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: NEG
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 3
54879: NEG
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 3
54891: NEG
54892: PUSH
54893: LD_INT 2
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54926: LD_ADDR_VAR 0 28
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 2
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: LD_INT 2
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: LD_INT 3
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: LD_INT 3
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 3
55161: NEG
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 3
55173: NEG
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55208: LD_ADDR_VAR 0 29
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 2
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 2
55386: NEG
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 2
55398: NEG
55399: PUSH
55400: LD_INT 3
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 3
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: LD_INT 3
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55487: LD_ADDR_VAR 0 30
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: NEG
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 1
55568: NEG
55569: PUSH
55570: LD_INT 2
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 3
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 3
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 3
55730: NEG
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55765: LD_ADDR_VAR 0 31
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 2
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: LD_INT 1
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: NEG
55943: PUSH
55944: LD_INT 2
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: NEG
55955: PUSH
55956: LD_INT 3
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 3
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 3
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 3
56008: NEG
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56043: LD_ADDR_VAR 0 32
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: LD_INT 2
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 2
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 2
56209: NEG
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: NEG
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: LD_INT 3
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 3
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: LD_INT 3
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 3
56286: NEG
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56321: LD_ADDR_VAR 0 33
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 2
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 2
56476: NEG
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 3
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 3
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: LD_INT 2
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 3
56565: NEG
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56600: LD_ADDR_VAR 0 34
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: LD_INT 2
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: LD_INT 1
56707: NEG
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 2
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: LD_INT 3
56795: NEG
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: LD_INT 2
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 3
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: LD_INT 3
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 3
56845: NEG
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56880: LD_ADDR_VAR 0 35
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56992: LD_ADDR_VAR 0 36
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57104: LD_ADDR_VAR 0 37
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 1
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: LD_INT 1
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57216: LD_ADDR_VAR 0 38
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 2
57307: NEG
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57328: LD_ADDR_VAR 0 39
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: LD_INT 2
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57440: LD_ADDR_VAR 0 40
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 1
57509: NEG
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57552: LD_ADDR_VAR 0 41
57556: PUSH
57557: LD_INT 0
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: LD_INT 2
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: NEG
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 3
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 3
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 3
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 3
57795: PUSH
57796: LD_INT 3
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 2
57815: NEG
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: NEG
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 3
57837: NEG
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 3
57849: NEG
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 3
57861: NEG
57862: PUSH
57863: LD_INT 3
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57902: LD_ADDR_VAR 0 42
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: LD_INT 3
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 1
58104: NEG
58105: PUSH
58106: LD_INT 3
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: LD_INT 3
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 3
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 3
58148: PUSH
58149: LD_INT 3
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 2
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: LD_INT 3
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 3
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: NEG
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 3
58211: NEG
58212: PUSH
58213: LD_INT 3
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58252: LD_ADDR_VAR 0 43
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 0
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 2
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 2
58418: NEG
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: NEG
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: LD_INT 3
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: LD_INT 3
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 2
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 3
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 3
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 3
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: LD_INT 3
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: LD_INT 2
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: NEG
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 3
58559: NEG
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58600: LD_ADDR_VAR 0 44
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: NEG
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: LD_INT 2
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 2
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 2
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 2
58766: NEG
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: LD_INT 2
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: LD_INT 3
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 3
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 3
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 3
58833: PUSH
58834: LD_INT 2
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: LD_INT 3
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 3
58885: NEG
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 3
58897: NEG
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 3
58909: NEG
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58950: LD_ADDR_VAR 0 45
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 2
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: LD_INT 2
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 2
59128: NEG
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: LD_INT 3
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 1
59152: NEG
59153: PUSH
59154: LD_INT 3
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 3
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 3
59196: PUSH
59197: LD_INT 3
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 2
59206: PUSH
59207: LD_INT 3
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: LD_INT 3
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: LD_INT 3
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 3
59247: NEG
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 3
59259: NEG
59260: PUSH
59261: LD_INT 3
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59300: LD_ADDR_VAR 0 46
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: LD_INT 2
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: LD_INT 2
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 2
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: NEG
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: LD_INT 3
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 0
59501: PUSH
59502: LD_INT 3
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 3
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 3
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: LD_INT 3
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 3
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: LD_INT 2
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: NEG
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 3
59596: NEG
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 3
59607: NEG
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59648: LD_ADDR_VAR 0 47
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: LD_INT 2
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: LD_INT 1
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 2
59775: NEG
59776: PUSH
59777: LD_INT 2
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59799: LD_ADDR_VAR 0 48
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 1
59880: NEG
59881: PUSH
59882: LD_INT 2
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 2
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 2
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59946: LD_ADDR_VAR 0 49
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 2
60038: PUSH
60039: LD_INT 0
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60090: LD_ADDR_VAR 0 50
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 2
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: LD_INT 2
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60234: LD_ADDR_VAR 0 51
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: LD_INT 2
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 2
60346: NEG
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: NEG
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60381: LD_ADDR_VAR 0 52
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 2
60485: NEG
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: LD_INT 2
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60532: LD_ADDR_VAR 0 53
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: LD_INT 1
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 2
60667: PUSH
60668: LD_INT 2
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: LD_INT 2
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: NEG
60698: PUSH
60699: LD_INT 1
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 2
60708: NEG
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 2
60719: NEG
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 2
60731: NEG
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60762: LD_ADDR_VAR 0 54
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: LD_INT 1
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: LD_INT 2
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 2
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 2
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 2
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: LD_INT 2
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: LD_INT 1
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 2
60938: NEG
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 2
60949: NEG
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 2
60961: NEG
60962: PUSH
60963: LD_INT 2
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60992: LD_ADDR_VAR 0 55
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: LD_INT 1
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: LD_INT 2
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: LD_INT 2
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: LD_INT 2
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 2
61168: NEG
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 2
61179: NEG
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 2
61191: NEG
61192: PUSH
61193: LD_INT 2
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61222: LD_ADDR_VAR 0 56
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 2
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: LD_INT 2
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: LD_INT 2
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 2
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: LD_INT 1
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 2
61398: NEG
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 2
61409: NEG
61410: PUSH
61411: LD_INT 1
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 2
61421: NEG
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61452: LD_ADDR_VAR 0 57
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: LD_INT 1
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: LD_INT 1
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: LD_INT 1
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: LD_INT 2
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 2
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 2
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 2
61587: PUSH
61588: LD_INT 2
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: LD_INT 2
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 2
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 1
61617: NEG
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 2
61628: NEG
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PUSH
61653: LD_INT 2
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61682: LD_ADDR_VAR 0 58
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 1
61740: NEG
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: LD_INT 2
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: LD_INT 2
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: LD_INT 1
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 2
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 2
61817: PUSH
61818: LD_INT 2
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: LD_INT 2
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 2
61858: NEG
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 2
61869: NEG
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 2
61881: NEG
61882: PUSH
61883: LD_INT 2
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61912: LD_ADDR_VAR 0 59
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: LD_INT 1
61985: NEG
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62000: LD_ADDR_VAR 0 60
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 1
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: NEG
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62088: LD_ADDR_VAR 0 61
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: LD_INT 1
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: LD_INT 1
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 1
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62176: LD_ADDR_VAR 0 62
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: LD_INT 1
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62264: LD_ADDR_VAR 0 63
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: LD_INT 1
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 1
62322: NEG
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 1
62333: NEG
62334: PUSH
62335: LD_INT 1
62337: NEG
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62352: LD_ADDR_VAR 0 64
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: ST_TO_ADDR
// end ; 1 :
62440: GO 68337
62442: LD_INT 1
62444: DOUBLE
62445: EQUAL
62446: IFTRUE 62450
62448: GO 65073
62450: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62451: LD_ADDR_VAR 0 11
62455: PUSH
62456: LD_INT 1
62458: NEG
62459: PUSH
62460: LD_INT 3
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 0
62470: PUSH
62471: LD_INT 3
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: PUSH
62482: LD_INT 2
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: LIST
62494: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62495: LD_ADDR_VAR 0 12
62499: PUSH
62500: LD_INT 2
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 3
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 3
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: LIST
62535: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62536: LD_ADDR_VAR 0 13
62540: PUSH
62541: LD_INT 3
62543: PUSH
62544: LD_INT 2
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 3
62553: PUSH
62554: LD_INT 3
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 2
62563: PUSH
62564: LD_INT 3
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: LIST
62575: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62576: LD_ADDR_VAR 0 14
62580: PUSH
62581: LD_INT 1
62583: PUSH
62584: LD_INT 3
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 3
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 1
62603: NEG
62604: PUSH
62605: LD_INT 2
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: LIST
62616: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62617: LD_ADDR_VAR 0 15
62621: PUSH
62622: LD_INT 2
62624: NEG
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 3
62635: NEG
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 3
62646: NEG
62647: PUSH
62648: LD_INT 1
62650: NEG
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: LIST
62660: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62661: LD_ADDR_VAR 0 16
62665: PUSH
62666: LD_INT 2
62668: NEG
62669: PUSH
62670: LD_INT 3
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 3
62680: NEG
62681: PUSH
62682: LD_INT 2
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: LD_INT 3
62696: NEG
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: LIST
62706: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62707: LD_ADDR_VAR 0 17
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: LD_INT 3
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: LD_INT 2
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: LIST
62750: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62751: LD_ADDR_VAR 0 18
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 3
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 3
62779: PUSH
62780: LD_INT 1
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62792: LD_ADDR_VAR 0 19
62796: PUSH
62797: LD_INT 3
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 3
62809: PUSH
62810: LD_INT 3
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 2
62819: PUSH
62820: LD_INT 3
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: LIST
62831: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62832: LD_ADDR_VAR 0 20
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: LD_INT 3
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: LD_INT 3
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: LD_INT 2
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: LIST
62872: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62873: LD_ADDR_VAR 0 21
62877: PUSH
62878: LD_INT 2
62880: NEG
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 3
62891: NEG
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 3
62902: NEG
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: LIST
62916: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62917: LD_ADDR_VAR 0 22
62921: PUSH
62922: LD_INT 2
62924: NEG
62925: PUSH
62926: LD_INT 3
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 3
62936: NEG
62937: PUSH
62938: LD_INT 2
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 3
62948: NEG
62949: PUSH
62950: LD_INT 3
62952: NEG
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: LIST
62962: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62963: LD_ADDR_VAR 0 23
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: LD_INT 3
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: NEG
62982: PUSH
62983: LD_INT 4
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: LD_INT 3
62996: NEG
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: LIST
63006: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63007: LD_ADDR_VAR 0 24
63011: PUSH
63012: LD_INT 3
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 3
63024: PUSH
63025: LD_INT 1
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 4
63035: PUSH
63036: LD_INT 1
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: LIST
63047: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63048: LD_ADDR_VAR 0 25
63052: PUSH
63053: LD_INT 3
63055: PUSH
63056: LD_INT 3
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 4
63065: PUSH
63066: LD_INT 3
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 3
63075: PUSH
63076: LD_INT 4
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: LIST
63087: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63088: LD_ADDR_VAR 0 26
63092: PUSH
63093: LD_INT 0
63095: PUSH
63096: LD_INT 3
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: LD_INT 4
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: LD_INT 3
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: LIST
63128: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63129: LD_ADDR_VAR 0 27
63133: PUSH
63134: LD_INT 3
63136: NEG
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 3
63147: NEG
63148: PUSH
63149: LD_INT 1
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 4
63158: NEG
63159: PUSH
63160: LD_INT 1
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: LIST
63172: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63173: LD_ADDR_VAR 0 28
63177: PUSH
63178: LD_INT 3
63180: NEG
63181: PUSH
63182: LD_INT 3
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 3
63192: NEG
63193: PUSH
63194: LD_INT 4
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 4
63204: NEG
63205: PUSH
63206: LD_INT 3
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: LIST
63218: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63219: LD_ADDR_VAR 0 29
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: LD_INT 3
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: LD_INT 3
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: LD_INT 2
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: LD_INT 4
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: LD_INT 4
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: LD_INT 3
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: LD_INT 5
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: LD_INT 5
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: LD_INT 4
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 1
63328: NEG
63329: PUSH
63330: LD_INT 6
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: LD_INT 6
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: LD_INT 5
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63374: LD_ADDR_VAR 0 30
63378: PUSH
63379: LD_INT 2
63381: PUSH
63382: LD_INT 1
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 3
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 3
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 3
63412: PUSH
63413: LD_INT 1
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 4
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 4
63433: PUSH
63434: LD_INT 1
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 4
63443: PUSH
63444: LD_INT 1
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 5
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 5
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 5
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 6
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 6
63495: PUSH
63496: LD_INT 1
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63517: LD_ADDR_VAR 0 31
63521: PUSH
63522: LD_INT 3
63524: PUSH
63525: LD_INT 2
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: LD_INT 3
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 2
63544: PUSH
63545: LD_INT 3
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 4
63554: PUSH
63555: LD_INT 3
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 4
63564: PUSH
63565: LD_INT 4
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 3
63574: PUSH
63575: LD_INT 4
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 5
63584: PUSH
63585: LD_INT 4
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 5
63594: PUSH
63595: LD_INT 5
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 4
63604: PUSH
63605: LD_INT 5
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 6
63614: PUSH
63615: LD_INT 5
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 6
63624: PUSH
63625: LD_INT 6
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 5
63634: PUSH
63635: LD_INT 6
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63656: LD_ADDR_VAR 0 32
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 3
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 3
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: LD_INT 4
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: LD_INT 4
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: LD_INT 3
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: LD_INT 5
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: LD_INT 5
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: LD_INT 4
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: PUSH
63757: LD_INT 6
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: LD_INT 6
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: LD_INT 5
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63799: LD_ADDR_VAR 0 33
63803: PUSH
63804: LD_INT 2
63806: NEG
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 3
63817: NEG
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 3
63828: NEG
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 3
63840: NEG
63841: PUSH
63842: LD_INT 1
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 4
63851: NEG
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 4
63862: NEG
63863: PUSH
63864: LD_INT 1
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 4
63874: NEG
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 5
63885: NEG
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 5
63896: NEG
63897: PUSH
63898: LD_INT 1
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 5
63908: NEG
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 6
63919: NEG
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 6
63930: NEG
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63954: LD_ADDR_VAR 0 34
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: LD_INT 3
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 3
63973: NEG
63974: PUSH
63975: LD_INT 2
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 3
63985: NEG
63986: PUSH
63987: LD_INT 3
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 3
63997: NEG
63998: PUSH
63999: LD_INT 4
64001: NEG
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 4
64009: NEG
64010: PUSH
64011: LD_INT 3
64013: NEG
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 4
64021: NEG
64022: PUSH
64023: LD_INT 4
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 4
64033: NEG
64034: PUSH
64035: LD_INT 5
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 5
64045: NEG
64046: PUSH
64047: LD_INT 4
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 5
64057: NEG
64058: PUSH
64059: LD_INT 5
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 5
64069: NEG
64070: PUSH
64071: LD_INT 6
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 6
64081: NEG
64082: PUSH
64083: LD_INT 5
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 6
64093: NEG
64094: PUSH
64095: LD_INT 6
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64117: LD_ADDR_VAR 0 41
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: LD_INT 2
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: LD_INT 3
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: LD_INT 2
64150: NEG
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: LIST
64160: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64161: LD_ADDR_VAR 0 42
64165: PUSH
64166: LD_INT 2
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_INT 2
64178: PUSH
64179: LD_INT 1
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 3
64189: PUSH
64190: LD_INT 1
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: LIST
64201: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64202: LD_ADDR_VAR 0 43
64206: PUSH
64207: LD_INT 2
64209: PUSH
64210: LD_INT 2
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 3
64219: PUSH
64220: LD_INT 2
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 2
64229: PUSH
64230: LD_INT 3
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: LIST
64241: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64242: LD_ADDR_VAR 0 44
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 2
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: LD_INT 3
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: NEG
64270: PUSH
64271: LD_INT 2
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: LIST
64282: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64283: LD_ADDR_VAR 0 45
64287: PUSH
64288: LD_INT 2
64290: NEG
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 2
64301: NEG
64302: PUSH
64303: LD_INT 1
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 3
64312: NEG
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: LIST
64326: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64327: LD_ADDR_VAR 0 46
64331: PUSH
64332: LD_INT 2
64334: NEG
64335: PUSH
64336: LD_INT 2
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 2
64346: NEG
64347: PUSH
64348: LD_INT 3
64350: NEG
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 3
64358: NEG
64359: PUSH
64360: LD_INT 2
64362: NEG
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: LIST
64372: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64373: LD_ADDR_VAR 0 47
64377: PUSH
64378: LD_INT 2
64380: NEG
64381: PUSH
64382: LD_INT 3
64384: NEG
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 1
64392: NEG
64393: PUSH
64394: LD_INT 3
64396: NEG
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64406: LD_ADDR_VAR 0 48
64410: PUSH
64411: LD_INT 1
64413: PUSH
64414: LD_INT 2
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 2
64424: PUSH
64425: LD_INT 1
64427: NEG
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64437: LD_ADDR_VAR 0 49
64441: PUSH
64442: LD_INT 3
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 3
64454: PUSH
64455: LD_INT 2
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64466: LD_ADDR_VAR 0 50
64470: PUSH
64471: LD_INT 2
64473: PUSH
64474: LD_INT 3
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: LD_INT 3
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64495: LD_ADDR_VAR 0 51
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: LD_INT 2
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 2
64513: NEG
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64526: LD_ADDR_VAR 0 52
64530: PUSH
64531: LD_INT 3
64533: NEG
64534: PUSH
64535: LD_INT 1
64537: NEG
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 3
64545: NEG
64546: PUSH
64547: LD_INT 2
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64559: LD_ADDR_VAR 0 53
64563: PUSH
64564: LD_INT 1
64566: NEG
64567: PUSH
64568: LD_INT 3
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: LD_INT 3
64581: NEG
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: PUSH
64590: LD_INT 2
64592: NEG
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: LIST
64602: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64603: LD_ADDR_VAR 0 54
64607: PUSH
64608: LD_INT 2
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 3
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 3
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: LIST
64643: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64644: LD_ADDR_VAR 0 55
64648: PUSH
64649: LD_INT 3
64651: PUSH
64652: LD_INT 2
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 3
64661: PUSH
64662: LD_INT 3
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 2
64671: PUSH
64672: LD_INT 3
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: LIST
64683: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64684: LD_ADDR_VAR 0 56
64688: PUSH
64689: LD_INT 1
64691: PUSH
64692: LD_INT 3
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 0
64701: PUSH
64702: LD_INT 3
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: LD_INT 2
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: LIST
64724: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64725: LD_ADDR_VAR 0 57
64729: PUSH
64730: LD_INT 2
64732: NEG
64733: PUSH
64734: LD_INT 1
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 3
64743: NEG
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 3
64754: NEG
64755: PUSH
64756: LD_INT 1
64758: NEG
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: LIST
64768: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64769: LD_ADDR_VAR 0 58
64773: PUSH
64774: LD_INT 2
64776: NEG
64777: PUSH
64778: LD_INT 3
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 3
64788: NEG
64789: PUSH
64790: LD_INT 2
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 3
64800: NEG
64801: PUSH
64802: LD_INT 3
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: LIST
64814: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64815: LD_ADDR_VAR 0 59
64819: PUSH
64820: LD_INT 1
64822: NEG
64823: PUSH
64824: LD_INT 2
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: LD_INT 2
64837: NEG
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 1
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: LIST
64858: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64859: LD_ADDR_VAR 0 60
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: LD_INT 1
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 2
64887: PUSH
64888: LD_INT 1
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: LIST
64899: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64900: LD_ADDR_VAR 0 61
64904: PUSH
64905: LD_INT 2
64907: PUSH
64908: LD_INT 1
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 2
64917: PUSH
64918: LD_INT 2
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 1
64927: PUSH
64928: LD_INT 2
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: LIST
64939: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64940: LD_ADDR_VAR 0 62
64944: PUSH
64945: LD_INT 1
64947: PUSH
64948: LD_INT 2
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: LD_INT 2
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 1
64967: NEG
64968: PUSH
64969: LD_INT 1
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: LIST
64980: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64981: LD_ADDR_VAR 0 63
64985: PUSH
64986: LD_INT 1
64988: NEG
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 2
64999: NEG
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 2
65010: NEG
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: LIST
65024: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65025: LD_ADDR_VAR 0 64
65029: PUSH
65030: LD_INT 1
65032: NEG
65033: PUSH
65034: LD_INT 2
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 2
65044: NEG
65045: PUSH
65046: LD_INT 1
65048: NEG
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 2
65056: NEG
65057: PUSH
65058: LD_INT 2
65060: NEG
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: LIST
65070: ST_TO_ADDR
// end ; 2 :
65071: GO 68337
65073: LD_INT 2
65075: DOUBLE
65076: EQUAL
65077: IFTRUE 65081
65079: GO 68336
65081: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65082: LD_ADDR_VAR 0 29
65086: PUSH
65087: LD_INT 4
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 4
65099: PUSH
65100: LD_INT 1
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 5
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 5
65120: PUSH
65121: LD_INT 1
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 4
65130: PUSH
65131: LD_INT 1
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 3
65140: PUSH
65141: LD_INT 0
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 3
65150: PUSH
65151: LD_INT 1
65153: NEG
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 3
65161: PUSH
65162: LD_INT 2
65164: NEG
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 5
65172: PUSH
65173: LD_INT 2
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 3
65182: PUSH
65183: LD_INT 3
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 3
65192: PUSH
65193: LD_INT 2
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 4
65202: PUSH
65203: LD_INT 3
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 4
65212: PUSH
65213: LD_INT 4
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 3
65222: PUSH
65223: LD_INT 4
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 2
65232: PUSH
65233: LD_INT 3
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 2
65242: PUSH
65243: LD_INT 2
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 4
65252: PUSH
65253: LD_INT 2
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 2
65262: PUSH
65263: LD_INT 4
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: LD_INT 4
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 0
65282: PUSH
65283: LD_INT 3
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 1
65292: PUSH
65293: LD_INT 4
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 1
65302: PUSH
65303: LD_INT 5
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: LD_INT 5
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 1
65322: NEG
65323: PUSH
65324: LD_INT 4
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: LD_INT 3
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 2
65344: PUSH
65345: LD_INT 5
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 2
65354: NEG
65355: PUSH
65356: LD_INT 3
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 3
65365: NEG
65366: PUSH
65367: LD_INT 0
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 3
65376: NEG
65377: PUSH
65378: LD_INT 1
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 2
65388: NEG
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 2
65399: NEG
65400: PUSH
65401: LD_INT 1
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 3
65410: NEG
65411: PUSH
65412: LD_INT 1
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 4
65421: NEG
65422: PUSH
65423: LD_INT 0
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 4
65432: NEG
65433: PUSH
65434: LD_INT 1
65436: NEG
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 4
65444: NEG
65445: PUSH
65446: LD_INT 2
65448: NEG
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 2
65456: NEG
65457: PUSH
65458: LD_INT 2
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 4
65467: NEG
65468: PUSH
65469: LD_INT 4
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 4
65479: NEG
65480: PUSH
65481: LD_INT 5
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 3
65491: NEG
65492: PUSH
65493: LD_INT 4
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 3
65503: NEG
65504: PUSH
65505: LD_INT 3
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 4
65515: NEG
65516: PUSH
65517: LD_INT 3
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 5
65527: NEG
65528: PUSH
65529: LD_INT 4
65531: NEG
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 5
65539: NEG
65540: PUSH
65541: LD_INT 5
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 3
65551: NEG
65552: PUSH
65553: LD_INT 5
65555: NEG
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 5
65563: NEG
65564: PUSH
65565: LD_INT 3
65567: NEG
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65620: LD_ADDR_VAR 0 30
65624: PUSH
65625: LD_INT 4
65627: PUSH
65628: LD_INT 4
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 4
65637: PUSH
65638: LD_INT 3
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 5
65647: PUSH
65648: LD_INT 4
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 5
65657: PUSH
65658: LD_INT 5
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 4
65667: PUSH
65668: LD_INT 5
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 3
65677: PUSH
65678: LD_INT 4
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 3
65687: PUSH
65688: LD_INT 3
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 5
65697: PUSH
65698: LD_INT 3
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 3
65707: PUSH
65708: LD_INT 5
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: LD_INT 3
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 0
65727: PUSH
65728: LD_INT 2
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 1
65737: PUSH
65738: LD_INT 3
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 1
65747: PUSH
65748: LD_INT 4
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 0
65757: PUSH
65758: LD_INT 4
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 1
65767: NEG
65768: PUSH
65769: LD_INT 3
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 1
65778: NEG
65779: PUSH
65780: LD_INT 2
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 2
65789: PUSH
65790: LD_INT 4
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 2
65799: NEG
65800: PUSH
65801: LD_INT 2
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 4
65810: NEG
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 4
65821: NEG
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 3
65833: NEG
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 3
65844: NEG
65845: PUSH
65846: LD_INT 1
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 4
65855: NEG
65856: PUSH
65857: LD_INT 1
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 5
65866: NEG
65867: PUSH
65868: LD_INT 0
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 5
65877: NEG
65878: PUSH
65879: LD_INT 1
65881: NEG
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 5
65889: NEG
65890: PUSH
65891: LD_INT 2
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 3
65901: NEG
65902: PUSH
65903: LD_INT 2
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 3
65912: NEG
65913: PUSH
65914: LD_INT 3
65916: NEG
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 3
65924: NEG
65925: PUSH
65926: LD_INT 4
65928: NEG
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 2
65936: NEG
65937: PUSH
65938: LD_INT 3
65940: NEG
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 2
65948: NEG
65949: PUSH
65950: LD_INT 2
65952: NEG
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 3
65960: NEG
65961: PUSH
65962: LD_INT 2
65964: NEG
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 4
65972: NEG
65973: PUSH
65974: LD_INT 3
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 4
65984: NEG
65985: PUSH
65986: LD_INT 4
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 2
65996: NEG
65997: PUSH
65998: LD_INT 4
66000: NEG
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 4
66008: NEG
66009: PUSH
66010: LD_INT 2
66012: NEG
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: LD_INT 4
66023: NEG
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 0
66031: PUSH
66032: LD_INT 5
66034: NEG
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 1
66042: PUSH
66043: LD_INT 4
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 1
66053: PUSH
66054: LD_INT 3
66056: NEG
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 0
66064: PUSH
66065: LD_INT 3
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: LD_INT 4
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 1
66087: NEG
66088: PUSH
66089: LD_INT 5
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 2
66099: PUSH
66100: LD_INT 3
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 2
66110: NEG
66111: PUSH
66112: LD_INT 5
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66167: LD_ADDR_VAR 0 31
66171: PUSH
66172: LD_INT 0
66174: PUSH
66175: LD_INT 4
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: LD_INT 3
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: LD_INT 4
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 1
66204: PUSH
66205: LD_INT 5
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: LD_INT 5
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 1
66224: NEG
66225: PUSH
66226: LD_INT 4
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 1
66235: NEG
66236: PUSH
66237: LD_INT 3
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 2
66246: PUSH
66247: LD_INT 5
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 2
66256: NEG
66257: PUSH
66258: LD_INT 3
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 3
66267: NEG
66268: PUSH
66269: LD_INT 0
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 3
66278: NEG
66279: PUSH
66280: LD_INT 1
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 2
66290: NEG
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 2
66301: NEG
66302: PUSH
66303: LD_INT 1
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 3
66312: NEG
66313: PUSH
66314: LD_INT 1
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 4
66323: NEG
66324: PUSH
66325: LD_INT 0
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 4
66334: NEG
66335: PUSH
66336: LD_INT 1
66338: NEG
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 4
66346: NEG
66347: PUSH
66348: LD_INT 2
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 2
66358: NEG
66359: PUSH
66360: LD_INT 2
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 4
66369: NEG
66370: PUSH
66371: LD_INT 4
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 4
66381: NEG
66382: PUSH
66383: LD_INT 5
66385: NEG
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 3
66393: NEG
66394: PUSH
66395: LD_INT 4
66397: NEG
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 3
66405: NEG
66406: PUSH
66407: LD_INT 3
66409: NEG
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 4
66417: NEG
66418: PUSH
66419: LD_INT 3
66421: NEG
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 5
66429: NEG
66430: PUSH
66431: LD_INT 4
66433: NEG
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 5
66441: NEG
66442: PUSH
66443: LD_INT 5
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 3
66453: NEG
66454: PUSH
66455: LD_INT 5
66457: NEG
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 5
66465: NEG
66466: PUSH
66467: LD_INT 3
66469: NEG
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: LD_INT 3
66480: NEG
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 0
66488: PUSH
66489: LD_INT 4
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 1
66499: PUSH
66500: LD_INT 3
66502: NEG
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 1
66510: PUSH
66511: LD_INT 2
66513: NEG
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: LD_INT 2
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: LD_INT 3
66536: NEG
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 1
66544: NEG
66545: PUSH
66546: LD_INT 4
66548: NEG
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 2
66556: PUSH
66557: LD_INT 2
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 2
66567: NEG
66568: PUSH
66569: LD_INT 4
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 4
66579: PUSH
66580: LD_INT 0
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 4
66589: PUSH
66590: LD_INT 1
66592: NEG
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 5
66600: PUSH
66601: LD_INT 0
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 5
66610: PUSH
66611: LD_INT 1
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 4
66620: PUSH
66621: LD_INT 1
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 3
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 3
66640: PUSH
66641: LD_INT 1
66643: NEG
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 3
66651: PUSH
66652: LD_INT 2
66654: NEG
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 5
66662: PUSH
66663: LD_INT 2
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66717: LD_ADDR_VAR 0 32
66721: PUSH
66722: LD_INT 4
66724: NEG
66725: PUSH
66726: LD_INT 0
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 4
66735: NEG
66736: PUSH
66737: LD_INT 1
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 3
66747: NEG
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 3
66758: NEG
66759: PUSH
66760: LD_INT 1
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 4
66769: NEG
66770: PUSH
66771: LD_INT 1
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 5
66780: NEG
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 5
66791: NEG
66792: PUSH
66793: LD_INT 1
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 5
66803: NEG
66804: PUSH
66805: LD_INT 2
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 3
66815: NEG
66816: PUSH
66817: LD_INT 2
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 3
66826: NEG
66827: PUSH
66828: LD_INT 3
66830: NEG
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 3
66838: NEG
66839: PUSH
66840: LD_INT 4
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 2
66850: NEG
66851: PUSH
66852: LD_INT 3
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 2
66862: NEG
66863: PUSH
66864: LD_INT 2
66866: NEG
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 3
66874: NEG
66875: PUSH
66876: LD_INT 2
66878: NEG
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 4
66886: NEG
66887: PUSH
66888: LD_INT 3
66890: NEG
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 4
66898: NEG
66899: PUSH
66900: LD_INT 4
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 2
66910: NEG
66911: PUSH
66912: LD_INT 4
66914: NEG
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 4
66922: NEG
66923: PUSH
66924: LD_INT 2
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 0
66934: PUSH
66935: LD_INT 4
66937: NEG
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: LD_INT 5
66948: NEG
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 1
66956: PUSH
66957: LD_INT 4
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: LD_INT 3
66970: NEG
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 0
66978: PUSH
66979: LD_INT 3
66981: NEG
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 1
66989: NEG
66990: PUSH
66991: LD_INT 4
66993: NEG
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 1
67001: NEG
67002: PUSH
67003: LD_INT 5
67005: NEG
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 2
67013: PUSH
67014: LD_INT 3
67016: NEG
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 2
67024: NEG
67025: PUSH
67026: LD_INT 5
67028: NEG
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 3
67036: PUSH
67037: LD_INT 0
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 3
67046: PUSH
67047: LD_INT 1
67049: NEG
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 4
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 4
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 3
67077: PUSH
67078: LD_INT 1
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 2
67087: PUSH
67088: LD_INT 0
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 2
67097: PUSH
67098: LD_INT 1
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 2
67108: PUSH
67109: LD_INT 2
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 4
67119: PUSH
67120: LD_INT 2
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 4
67129: PUSH
67130: LD_INT 4
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 4
67139: PUSH
67140: LD_INT 3
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 5
67149: PUSH
67150: LD_INT 4
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 5
67159: PUSH
67160: LD_INT 5
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 4
67169: PUSH
67170: LD_INT 5
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 3
67179: PUSH
67180: LD_INT 4
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 3
67189: PUSH
67190: LD_INT 3
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 5
67199: PUSH
67200: LD_INT 3
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: PUSH
67207: LD_INT 3
67209: PUSH
67210: LD_INT 5
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67264: LD_ADDR_VAR 0 33
67268: PUSH
67269: LD_INT 4
67271: NEG
67272: PUSH
67273: LD_INT 4
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 4
67283: NEG
67284: PUSH
67285: LD_INT 5
67287: NEG
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 3
67295: NEG
67296: PUSH
67297: LD_INT 4
67299: NEG
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 3
67307: NEG
67308: PUSH
67309: LD_INT 3
67311: NEG
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 4
67319: NEG
67320: PUSH
67321: LD_INT 3
67323: NEG
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 5
67331: NEG
67332: PUSH
67333: LD_INT 4
67335: NEG
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 5
67343: NEG
67344: PUSH
67345: LD_INT 5
67347: NEG
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 3
67355: NEG
67356: PUSH
67357: LD_INT 5
67359: NEG
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 5
67367: NEG
67368: PUSH
67369: LD_INT 3
67371: NEG
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 0
67379: PUSH
67380: LD_INT 3
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: LD_INT 4
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 1
67401: PUSH
67402: LD_INT 3
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 1
67412: PUSH
67413: LD_INT 2
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 0
67423: PUSH
67424: LD_INT 2
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 1
67434: NEG
67435: PUSH
67436: LD_INT 3
67438: NEG
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 1
67446: NEG
67447: PUSH
67448: LD_INT 4
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 2
67458: PUSH
67459: LD_INT 2
67461: NEG
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 2
67469: NEG
67470: PUSH
67471: LD_INT 4
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 4
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 4
67491: PUSH
67492: LD_INT 1
67494: NEG
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 5
67502: PUSH
67503: LD_INT 0
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 5
67512: PUSH
67513: LD_INT 1
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 4
67522: PUSH
67523: LD_INT 1
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 3
67532: PUSH
67533: LD_INT 0
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 3
67542: PUSH
67543: LD_INT 1
67545: NEG
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 3
67553: PUSH
67554: LD_INT 2
67556: NEG
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 5
67564: PUSH
67565: LD_INT 2
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 3
67574: PUSH
67575: LD_INT 3
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 3
67584: PUSH
67585: LD_INT 2
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 4
67594: PUSH
67595: LD_INT 3
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 4
67604: PUSH
67605: LD_INT 4
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 3
67614: PUSH
67615: LD_INT 4
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 2
67624: PUSH
67625: LD_INT 3
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 2
67634: PUSH
67635: LD_INT 2
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 4
67644: PUSH
67645: LD_INT 2
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 2
67654: PUSH
67655: LD_INT 4
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: LD_INT 4
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 0
67674: PUSH
67675: LD_INT 3
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 1
67684: PUSH
67685: LD_INT 4
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 1
67694: PUSH
67695: LD_INT 5
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 0
67704: PUSH
67705: LD_INT 5
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 1
67714: NEG
67715: PUSH
67716: LD_INT 4
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 1
67725: NEG
67726: PUSH
67727: LD_INT 3
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 2
67736: PUSH
67737: LD_INT 5
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 2
67746: NEG
67747: PUSH
67748: LD_INT 3
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67802: LD_ADDR_VAR 0 34
67806: PUSH
67807: LD_INT 0
67809: PUSH
67810: LD_INT 4
67812: NEG
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 0
67820: PUSH
67821: LD_INT 5
67823: NEG
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 1
67831: PUSH
67832: LD_INT 4
67834: NEG
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 1
67842: PUSH
67843: LD_INT 3
67845: NEG
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 0
67853: PUSH
67854: LD_INT 3
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 1
67864: NEG
67865: PUSH
67866: LD_INT 4
67868: NEG
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 1
67876: NEG
67877: PUSH
67878: LD_INT 5
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 2
67888: PUSH
67889: LD_INT 3
67891: NEG
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 2
67899: NEG
67900: PUSH
67901: LD_INT 5
67903: NEG
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 3
67911: PUSH
67912: LD_INT 0
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 3
67921: PUSH
67922: LD_INT 1
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 4
67932: PUSH
67933: LD_INT 0
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 4
67942: PUSH
67943: LD_INT 1
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 3
67952: PUSH
67953: LD_INT 1
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 2
67962: PUSH
67963: LD_INT 0
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 2
67972: PUSH
67973: LD_INT 1
67975: NEG
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 2
67983: PUSH
67984: LD_INT 2
67986: NEG
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 4
67994: PUSH
67995: LD_INT 2
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 4
68004: PUSH
68005: LD_INT 4
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 4
68014: PUSH
68015: LD_INT 3
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 5
68024: PUSH
68025: LD_INT 4
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 5
68034: PUSH
68035: LD_INT 5
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 4
68044: PUSH
68045: LD_INT 5
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 3
68054: PUSH
68055: LD_INT 4
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 3
68064: PUSH
68065: LD_INT 3
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 5
68074: PUSH
68075: LD_INT 3
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 3
68084: PUSH
68085: LD_INT 5
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 0
68094: PUSH
68095: LD_INT 3
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: LD_INT 2
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 1
68114: PUSH
68115: LD_INT 3
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 1
68124: PUSH
68125: LD_INT 4
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 0
68134: PUSH
68135: LD_INT 4
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 1
68144: NEG
68145: PUSH
68146: LD_INT 3
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 1
68155: NEG
68156: PUSH
68157: LD_INT 2
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 2
68166: PUSH
68167: LD_INT 4
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 2
68176: NEG
68177: PUSH
68178: LD_INT 2
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 4
68187: NEG
68188: PUSH
68189: LD_INT 0
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 4
68198: NEG
68199: PUSH
68200: LD_INT 1
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 3
68210: NEG
68211: PUSH
68212: LD_INT 0
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 3
68221: NEG
68222: PUSH
68223: LD_INT 1
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 4
68232: NEG
68233: PUSH
68234: LD_INT 1
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 5
68243: NEG
68244: PUSH
68245: LD_INT 0
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 5
68254: NEG
68255: PUSH
68256: LD_INT 1
68258: NEG
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 5
68266: NEG
68267: PUSH
68268: LD_INT 2
68270: NEG
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 3
68278: NEG
68279: PUSH
68280: LD_INT 2
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: ST_TO_ADDR
// end ; end ;
68334: GO 68337
68336: POP
// case btype of b_depot , b_warehouse :
68337: LD_VAR 0 1
68341: PUSH
68342: LD_INT 0
68344: DOUBLE
68345: EQUAL
68346: IFTRUE 68356
68348: LD_INT 1
68350: DOUBLE
68351: EQUAL
68352: IFTRUE 68356
68354: GO 68557
68356: POP
// case nation of nation_american :
68357: LD_VAR 0 5
68361: PUSH
68362: LD_INT 1
68364: DOUBLE
68365: EQUAL
68366: IFTRUE 68370
68368: GO 68426
68370: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68371: LD_ADDR_VAR 0 9
68375: PUSH
68376: LD_VAR 0 11
68380: PUSH
68381: LD_VAR 0 12
68385: PUSH
68386: LD_VAR 0 13
68390: PUSH
68391: LD_VAR 0 14
68395: PUSH
68396: LD_VAR 0 15
68400: PUSH
68401: LD_VAR 0 16
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: PUSH
68414: LD_VAR 0 4
68418: PUSH
68419: LD_INT 1
68421: PLUS
68422: ARRAY
68423: ST_TO_ADDR
68424: GO 68555
68426: LD_INT 2
68428: DOUBLE
68429: EQUAL
68430: IFTRUE 68434
68432: GO 68490
68434: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68435: LD_ADDR_VAR 0 9
68439: PUSH
68440: LD_VAR 0 17
68444: PUSH
68445: LD_VAR 0 18
68449: PUSH
68450: LD_VAR 0 19
68454: PUSH
68455: LD_VAR 0 20
68459: PUSH
68460: LD_VAR 0 21
68464: PUSH
68465: LD_VAR 0 22
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: PUSH
68478: LD_VAR 0 4
68482: PUSH
68483: LD_INT 1
68485: PLUS
68486: ARRAY
68487: ST_TO_ADDR
68488: GO 68555
68490: LD_INT 3
68492: DOUBLE
68493: EQUAL
68494: IFTRUE 68498
68496: GO 68554
68498: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68499: LD_ADDR_VAR 0 9
68503: PUSH
68504: LD_VAR 0 23
68508: PUSH
68509: LD_VAR 0 24
68513: PUSH
68514: LD_VAR 0 25
68518: PUSH
68519: LD_VAR 0 26
68523: PUSH
68524: LD_VAR 0 27
68528: PUSH
68529: LD_VAR 0 28
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: PUSH
68542: LD_VAR 0 4
68546: PUSH
68547: LD_INT 1
68549: PLUS
68550: ARRAY
68551: ST_TO_ADDR
68552: GO 68555
68554: POP
68555: GO 69110
68557: LD_INT 2
68559: DOUBLE
68560: EQUAL
68561: IFTRUE 68571
68563: LD_INT 3
68565: DOUBLE
68566: EQUAL
68567: IFTRUE 68571
68569: GO 68627
68571: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68572: LD_ADDR_VAR 0 9
68576: PUSH
68577: LD_VAR 0 29
68581: PUSH
68582: LD_VAR 0 30
68586: PUSH
68587: LD_VAR 0 31
68591: PUSH
68592: LD_VAR 0 32
68596: PUSH
68597: LD_VAR 0 33
68601: PUSH
68602: LD_VAR 0 34
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: PUSH
68615: LD_VAR 0 4
68619: PUSH
68620: LD_INT 1
68622: PLUS
68623: ARRAY
68624: ST_TO_ADDR
68625: GO 69110
68627: LD_INT 16
68629: DOUBLE
68630: EQUAL
68631: IFTRUE 68689
68633: LD_INT 17
68635: DOUBLE
68636: EQUAL
68637: IFTRUE 68689
68639: LD_INT 18
68641: DOUBLE
68642: EQUAL
68643: IFTRUE 68689
68645: LD_INT 19
68647: DOUBLE
68648: EQUAL
68649: IFTRUE 68689
68651: LD_INT 22
68653: DOUBLE
68654: EQUAL
68655: IFTRUE 68689
68657: LD_INT 20
68659: DOUBLE
68660: EQUAL
68661: IFTRUE 68689
68663: LD_INT 21
68665: DOUBLE
68666: EQUAL
68667: IFTRUE 68689
68669: LD_INT 23
68671: DOUBLE
68672: EQUAL
68673: IFTRUE 68689
68675: LD_INT 24
68677: DOUBLE
68678: EQUAL
68679: IFTRUE 68689
68681: LD_INT 25
68683: DOUBLE
68684: EQUAL
68685: IFTRUE 68689
68687: GO 68745
68689: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68690: LD_ADDR_VAR 0 9
68694: PUSH
68695: LD_VAR 0 35
68699: PUSH
68700: LD_VAR 0 36
68704: PUSH
68705: LD_VAR 0 37
68709: PUSH
68710: LD_VAR 0 38
68714: PUSH
68715: LD_VAR 0 39
68719: PUSH
68720: LD_VAR 0 40
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: PUSH
68733: LD_VAR 0 4
68737: PUSH
68738: LD_INT 1
68740: PLUS
68741: ARRAY
68742: ST_TO_ADDR
68743: GO 69110
68745: LD_INT 6
68747: DOUBLE
68748: EQUAL
68749: IFTRUE 68801
68751: LD_INT 7
68753: DOUBLE
68754: EQUAL
68755: IFTRUE 68801
68757: LD_INT 8
68759: DOUBLE
68760: EQUAL
68761: IFTRUE 68801
68763: LD_INT 13
68765: DOUBLE
68766: EQUAL
68767: IFTRUE 68801
68769: LD_INT 12
68771: DOUBLE
68772: EQUAL
68773: IFTRUE 68801
68775: LD_INT 15
68777: DOUBLE
68778: EQUAL
68779: IFTRUE 68801
68781: LD_INT 11
68783: DOUBLE
68784: EQUAL
68785: IFTRUE 68801
68787: LD_INT 14
68789: DOUBLE
68790: EQUAL
68791: IFTRUE 68801
68793: LD_INT 10
68795: DOUBLE
68796: EQUAL
68797: IFTRUE 68801
68799: GO 68857
68801: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68802: LD_ADDR_VAR 0 9
68806: PUSH
68807: LD_VAR 0 41
68811: PUSH
68812: LD_VAR 0 42
68816: PUSH
68817: LD_VAR 0 43
68821: PUSH
68822: LD_VAR 0 44
68826: PUSH
68827: LD_VAR 0 45
68831: PUSH
68832: LD_VAR 0 46
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: PUSH
68845: LD_VAR 0 4
68849: PUSH
68850: LD_INT 1
68852: PLUS
68853: ARRAY
68854: ST_TO_ADDR
68855: GO 69110
68857: LD_INT 36
68859: DOUBLE
68860: EQUAL
68861: IFTRUE 68865
68863: GO 68921
68865: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68866: LD_ADDR_VAR 0 9
68870: PUSH
68871: LD_VAR 0 47
68875: PUSH
68876: LD_VAR 0 48
68880: PUSH
68881: LD_VAR 0 49
68885: PUSH
68886: LD_VAR 0 50
68890: PUSH
68891: LD_VAR 0 51
68895: PUSH
68896: LD_VAR 0 52
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: PUSH
68909: LD_VAR 0 4
68913: PUSH
68914: LD_INT 1
68916: PLUS
68917: ARRAY
68918: ST_TO_ADDR
68919: GO 69110
68921: LD_INT 4
68923: DOUBLE
68924: EQUAL
68925: IFTRUE 68947
68927: LD_INT 5
68929: DOUBLE
68930: EQUAL
68931: IFTRUE 68947
68933: LD_INT 34
68935: DOUBLE
68936: EQUAL
68937: IFTRUE 68947
68939: LD_INT 37
68941: DOUBLE
68942: EQUAL
68943: IFTRUE 68947
68945: GO 69003
68947: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68948: LD_ADDR_VAR 0 9
68952: PUSH
68953: LD_VAR 0 53
68957: PUSH
68958: LD_VAR 0 54
68962: PUSH
68963: LD_VAR 0 55
68967: PUSH
68968: LD_VAR 0 56
68972: PUSH
68973: LD_VAR 0 57
68977: PUSH
68978: LD_VAR 0 58
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: PUSH
68991: LD_VAR 0 4
68995: PUSH
68996: LD_INT 1
68998: PLUS
68999: ARRAY
69000: ST_TO_ADDR
69001: GO 69110
69003: LD_INT 31
69005: DOUBLE
69006: EQUAL
69007: IFTRUE 69053
69009: LD_INT 32
69011: DOUBLE
69012: EQUAL
69013: IFTRUE 69053
69015: LD_INT 33
69017: DOUBLE
69018: EQUAL
69019: IFTRUE 69053
69021: LD_INT 27
69023: DOUBLE
69024: EQUAL
69025: IFTRUE 69053
69027: LD_INT 26
69029: DOUBLE
69030: EQUAL
69031: IFTRUE 69053
69033: LD_INT 28
69035: DOUBLE
69036: EQUAL
69037: IFTRUE 69053
69039: LD_INT 29
69041: DOUBLE
69042: EQUAL
69043: IFTRUE 69053
69045: LD_INT 30
69047: DOUBLE
69048: EQUAL
69049: IFTRUE 69053
69051: GO 69109
69053: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69054: LD_ADDR_VAR 0 9
69058: PUSH
69059: LD_VAR 0 59
69063: PUSH
69064: LD_VAR 0 60
69068: PUSH
69069: LD_VAR 0 61
69073: PUSH
69074: LD_VAR 0 62
69078: PUSH
69079: LD_VAR 0 63
69083: PUSH
69084: LD_VAR 0 64
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: PUSH
69097: LD_VAR 0 4
69101: PUSH
69102: LD_INT 1
69104: PLUS
69105: ARRAY
69106: ST_TO_ADDR
69107: GO 69110
69109: POP
// temp_list2 = [ ] ;
69110: LD_ADDR_VAR 0 10
69114: PUSH
69115: EMPTY
69116: ST_TO_ADDR
// for i in temp_list do
69117: LD_ADDR_VAR 0 8
69121: PUSH
69122: LD_VAR 0 9
69126: PUSH
69127: FOR_IN
69128: IFFALSE 69180
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69130: LD_ADDR_VAR 0 10
69134: PUSH
69135: LD_VAR 0 10
69139: PUSH
69140: LD_VAR 0 8
69144: PUSH
69145: LD_INT 1
69147: ARRAY
69148: PUSH
69149: LD_VAR 0 2
69153: PLUS
69154: PUSH
69155: LD_VAR 0 8
69159: PUSH
69160: LD_INT 2
69162: ARRAY
69163: PUSH
69164: LD_VAR 0 3
69168: PLUS
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: EMPTY
69175: LIST
69176: ADD
69177: ST_TO_ADDR
69178: GO 69127
69180: POP
69181: POP
// result = temp_list2 ;
69182: LD_ADDR_VAR 0 7
69186: PUSH
69187: LD_VAR 0 10
69191: ST_TO_ADDR
// end ;
69192: LD_VAR 0 7
69196: RET
// export function EnemyInRange ( unit , dist ) ; begin
69197: LD_INT 0
69199: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69200: LD_ADDR_VAR 0 3
69204: PUSH
69205: LD_VAR 0 1
69209: PPUSH
69210: CALL_OW 255
69214: PPUSH
69215: LD_VAR 0 1
69219: PPUSH
69220: CALL_OW 250
69224: PPUSH
69225: LD_VAR 0 1
69229: PPUSH
69230: CALL_OW 251
69234: PPUSH
69235: LD_VAR 0 2
69239: PPUSH
69240: CALL 42593 0 4
69244: PUSH
69245: LD_INT 4
69247: ARRAY
69248: ST_TO_ADDR
// end ;
69249: LD_VAR 0 3
69253: RET
// export function PlayerSeeMe ( unit ) ; begin
69254: LD_INT 0
69256: PPUSH
// result := See ( your_side , unit ) ;
69257: LD_ADDR_VAR 0 2
69261: PUSH
69262: LD_OWVAR 2
69266: PPUSH
69267: LD_VAR 0 1
69271: PPUSH
69272: CALL_OW 292
69276: ST_TO_ADDR
// end ;
69277: LD_VAR 0 2
69281: RET
// export function ReverseDir ( unit ) ; begin
69282: LD_INT 0
69284: PPUSH
// if not unit then
69285: LD_VAR 0 1
69289: NOT
69290: IFFALSE 69294
// exit ;
69292: GO 69317
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69294: LD_ADDR_VAR 0 2
69298: PUSH
69299: LD_VAR 0 1
69303: PPUSH
69304: CALL_OW 254
69308: PUSH
69309: LD_INT 3
69311: PLUS
69312: PUSH
69313: LD_INT 6
69315: MOD
69316: ST_TO_ADDR
// end ;
69317: LD_VAR 0 2
69321: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69322: LD_INT 0
69324: PPUSH
69325: PPUSH
69326: PPUSH
69327: PPUSH
69328: PPUSH
// if not hexes then
69329: LD_VAR 0 2
69333: NOT
69334: IFFALSE 69338
// exit ;
69336: GO 69486
// dist := 9999 ;
69338: LD_ADDR_VAR 0 5
69342: PUSH
69343: LD_INT 9999
69345: ST_TO_ADDR
// for i = 1 to hexes do
69346: LD_ADDR_VAR 0 4
69350: PUSH
69351: DOUBLE
69352: LD_INT 1
69354: DEC
69355: ST_TO_ADDR
69356: LD_VAR 0 2
69360: PUSH
69361: FOR_TO
69362: IFFALSE 69474
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69364: LD_VAR 0 1
69368: PPUSH
69369: LD_VAR 0 2
69373: PUSH
69374: LD_VAR 0 4
69378: ARRAY
69379: PUSH
69380: LD_INT 1
69382: ARRAY
69383: PPUSH
69384: LD_VAR 0 2
69388: PUSH
69389: LD_VAR 0 4
69393: ARRAY
69394: PUSH
69395: LD_INT 2
69397: ARRAY
69398: PPUSH
69399: CALL_OW 297
69403: PUSH
69404: LD_VAR 0 5
69408: LESS
69409: IFFALSE 69472
// begin hex := hexes [ i ] ;
69411: LD_ADDR_VAR 0 7
69415: PUSH
69416: LD_VAR 0 2
69420: PUSH
69421: LD_VAR 0 4
69425: ARRAY
69426: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69427: LD_ADDR_VAR 0 5
69431: PUSH
69432: LD_VAR 0 1
69436: PPUSH
69437: LD_VAR 0 2
69441: PUSH
69442: LD_VAR 0 4
69446: ARRAY
69447: PUSH
69448: LD_INT 1
69450: ARRAY
69451: PPUSH
69452: LD_VAR 0 2
69456: PUSH
69457: LD_VAR 0 4
69461: ARRAY
69462: PUSH
69463: LD_INT 2
69465: ARRAY
69466: PPUSH
69467: CALL_OW 297
69471: ST_TO_ADDR
// end ; end ;
69472: GO 69361
69474: POP
69475: POP
// result := hex ;
69476: LD_ADDR_VAR 0 3
69480: PUSH
69481: LD_VAR 0 7
69485: ST_TO_ADDR
// end ;
69486: LD_VAR 0 3
69490: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69491: LD_INT 0
69493: PPUSH
69494: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69495: LD_VAR 0 1
69499: NOT
69500: PUSH
69501: LD_VAR 0 1
69505: PUSH
69506: LD_INT 21
69508: PUSH
69509: LD_INT 2
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 23
69518: PUSH
69519: LD_INT 2
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PPUSH
69530: CALL_OW 69
69534: IN
69535: NOT
69536: OR
69537: IFFALSE 69541
// exit ;
69539: GO 69588
// for i = 1 to 3 do
69541: LD_ADDR_VAR 0 3
69545: PUSH
69546: DOUBLE
69547: LD_INT 1
69549: DEC
69550: ST_TO_ADDR
69551: LD_INT 3
69553: PUSH
69554: FOR_TO
69555: IFFALSE 69586
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69557: LD_VAR 0 1
69561: PPUSH
69562: CALL_OW 250
69566: PPUSH
69567: LD_VAR 0 1
69571: PPUSH
69572: CALL_OW 251
69576: PPUSH
69577: LD_INT 1
69579: PPUSH
69580: CALL_OW 453
69584: GO 69554
69586: POP
69587: POP
// end ;
69588: LD_VAR 0 2
69592: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69593: LD_INT 0
69595: PPUSH
69596: PPUSH
69597: PPUSH
69598: PPUSH
69599: PPUSH
69600: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69601: LD_VAR 0 1
69605: NOT
69606: PUSH
69607: LD_VAR 0 2
69611: NOT
69612: OR
69613: PUSH
69614: LD_VAR 0 1
69618: PPUSH
69619: CALL_OW 314
69623: OR
69624: IFFALSE 69628
// exit ;
69626: GO 70069
// x := GetX ( enemy_unit ) ;
69628: LD_ADDR_VAR 0 7
69632: PUSH
69633: LD_VAR 0 2
69637: PPUSH
69638: CALL_OW 250
69642: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69643: LD_ADDR_VAR 0 8
69647: PUSH
69648: LD_VAR 0 2
69652: PPUSH
69653: CALL_OW 251
69657: ST_TO_ADDR
// if not x or not y then
69658: LD_VAR 0 7
69662: NOT
69663: PUSH
69664: LD_VAR 0 8
69668: NOT
69669: OR
69670: IFFALSE 69674
// exit ;
69672: GO 70069
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69674: LD_ADDR_VAR 0 6
69678: PUSH
69679: LD_VAR 0 7
69683: PPUSH
69684: LD_INT 0
69686: PPUSH
69687: LD_INT 4
69689: PPUSH
69690: CALL_OW 272
69694: PUSH
69695: LD_VAR 0 8
69699: PPUSH
69700: LD_INT 0
69702: PPUSH
69703: LD_INT 4
69705: PPUSH
69706: CALL_OW 273
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_VAR 0 7
69719: PPUSH
69720: LD_INT 1
69722: PPUSH
69723: LD_INT 4
69725: PPUSH
69726: CALL_OW 272
69730: PUSH
69731: LD_VAR 0 8
69735: PPUSH
69736: LD_INT 1
69738: PPUSH
69739: LD_INT 4
69741: PPUSH
69742: CALL_OW 273
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_VAR 0 7
69755: PPUSH
69756: LD_INT 2
69758: PPUSH
69759: LD_INT 4
69761: PPUSH
69762: CALL_OW 272
69766: PUSH
69767: LD_VAR 0 8
69771: PPUSH
69772: LD_INT 2
69774: PPUSH
69775: LD_INT 4
69777: PPUSH
69778: CALL_OW 273
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_VAR 0 7
69791: PPUSH
69792: LD_INT 3
69794: PPUSH
69795: LD_INT 4
69797: PPUSH
69798: CALL_OW 272
69802: PUSH
69803: LD_VAR 0 8
69807: PPUSH
69808: LD_INT 3
69810: PPUSH
69811: LD_INT 4
69813: PPUSH
69814: CALL_OW 273
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_VAR 0 7
69827: PPUSH
69828: LD_INT 4
69830: PPUSH
69831: LD_INT 4
69833: PPUSH
69834: CALL_OW 272
69838: PUSH
69839: LD_VAR 0 8
69843: PPUSH
69844: LD_INT 4
69846: PPUSH
69847: LD_INT 4
69849: PPUSH
69850: CALL_OW 273
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_VAR 0 7
69863: PPUSH
69864: LD_INT 5
69866: PPUSH
69867: LD_INT 4
69869: PPUSH
69870: CALL_OW 272
69874: PUSH
69875: LD_VAR 0 8
69879: PPUSH
69880: LD_INT 5
69882: PPUSH
69883: LD_INT 4
69885: PPUSH
69886: CALL_OW 273
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: ST_TO_ADDR
// for i = tmp downto 1 do
69903: LD_ADDR_VAR 0 4
69907: PUSH
69908: DOUBLE
69909: LD_VAR 0 6
69913: INC
69914: ST_TO_ADDR
69915: LD_INT 1
69917: PUSH
69918: FOR_DOWNTO
69919: IFFALSE 70020
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69921: LD_VAR 0 6
69925: PUSH
69926: LD_VAR 0 4
69930: ARRAY
69931: PUSH
69932: LD_INT 1
69934: ARRAY
69935: PPUSH
69936: LD_VAR 0 6
69940: PUSH
69941: LD_VAR 0 4
69945: ARRAY
69946: PUSH
69947: LD_INT 2
69949: ARRAY
69950: PPUSH
69951: CALL_OW 488
69955: NOT
69956: PUSH
69957: LD_VAR 0 6
69961: PUSH
69962: LD_VAR 0 4
69966: ARRAY
69967: PUSH
69968: LD_INT 1
69970: ARRAY
69971: PPUSH
69972: LD_VAR 0 6
69976: PUSH
69977: LD_VAR 0 4
69981: ARRAY
69982: PUSH
69983: LD_INT 2
69985: ARRAY
69986: PPUSH
69987: CALL_OW 428
69991: PUSH
69992: LD_INT 0
69994: NONEQUAL
69995: OR
69996: IFFALSE 70018
// tmp := Delete ( tmp , i ) ;
69998: LD_ADDR_VAR 0 6
70002: PUSH
70003: LD_VAR 0 6
70007: PPUSH
70008: LD_VAR 0 4
70012: PPUSH
70013: CALL_OW 3
70017: ST_TO_ADDR
70018: GO 69918
70020: POP
70021: POP
// j := GetClosestHex ( unit , tmp ) ;
70022: LD_ADDR_VAR 0 5
70026: PUSH
70027: LD_VAR 0 1
70031: PPUSH
70032: LD_VAR 0 6
70036: PPUSH
70037: CALL 69322 0 2
70041: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70042: LD_VAR 0 1
70046: PPUSH
70047: LD_VAR 0 5
70051: PUSH
70052: LD_INT 1
70054: ARRAY
70055: PPUSH
70056: LD_VAR 0 5
70060: PUSH
70061: LD_INT 2
70063: ARRAY
70064: PPUSH
70065: CALL_OW 111
// end ;
70069: LD_VAR 0 3
70073: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70074: LD_INT 0
70076: PPUSH
70077: PPUSH
70078: PPUSH
// uc_side = 0 ;
70079: LD_ADDR_OWVAR 20
70083: PUSH
70084: LD_INT 0
70086: ST_TO_ADDR
// uc_nation = 0 ;
70087: LD_ADDR_OWVAR 21
70091: PUSH
70092: LD_INT 0
70094: ST_TO_ADDR
// InitHc_All ( ) ;
70095: CALL_OW 584
// InitVc ;
70099: CALL_OW 20
// if mastodonts then
70103: LD_VAR 0 6
70107: IFFALSE 70174
// for i = 1 to mastodonts do
70109: LD_ADDR_VAR 0 11
70113: PUSH
70114: DOUBLE
70115: LD_INT 1
70117: DEC
70118: ST_TO_ADDR
70119: LD_VAR 0 6
70123: PUSH
70124: FOR_TO
70125: IFFALSE 70172
// begin vc_chassis := 31 ;
70127: LD_ADDR_OWVAR 37
70131: PUSH
70132: LD_INT 31
70134: ST_TO_ADDR
// vc_control := control_rider ;
70135: LD_ADDR_OWVAR 38
70139: PUSH
70140: LD_INT 4
70142: ST_TO_ADDR
// animal := CreateVehicle ;
70143: LD_ADDR_VAR 0 12
70147: PUSH
70148: CALL_OW 45
70152: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70153: LD_VAR 0 12
70157: PPUSH
70158: LD_VAR 0 8
70162: PPUSH
70163: LD_INT 0
70165: PPUSH
70166: CALL 72362 0 3
// end ;
70170: GO 70124
70172: POP
70173: POP
// if horses then
70174: LD_VAR 0 5
70178: IFFALSE 70245
// for i = 1 to horses do
70180: LD_ADDR_VAR 0 11
70184: PUSH
70185: DOUBLE
70186: LD_INT 1
70188: DEC
70189: ST_TO_ADDR
70190: LD_VAR 0 5
70194: PUSH
70195: FOR_TO
70196: IFFALSE 70243
// begin hc_class := 21 ;
70198: LD_ADDR_OWVAR 28
70202: PUSH
70203: LD_INT 21
70205: ST_TO_ADDR
// hc_gallery :=  ;
70206: LD_ADDR_OWVAR 33
70210: PUSH
70211: LD_STRING 
70213: ST_TO_ADDR
// animal := CreateHuman ;
70214: LD_ADDR_VAR 0 12
70218: PUSH
70219: CALL_OW 44
70223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70224: LD_VAR 0 12
70228: PPUSH
70229: LD_VAR 0 8
70233: PPUSH
70234: LD_INT 0
70236: PPUSH
70237: CALL 72362 0 3
// end ;
70241: GO 70195
70243: POP
70244: POP
// if birds then
70245: LD_VAR 0 1
70249: IFFALSE 70316
// for i = 1 to birds do
70251: LD_ADDR_VAR 0 11
70255: PUSH
70256: DOUBLE
70257: LD_INT 1
70259: DEC
70260: ST_TO_ADDR
70261: LD_VAR 0 1
70265: PUSH
70266: FOR_TO
70267: IFFALSE 70314
// begin hc_class = 18 ;
70269: LD_ADDR_OWVAR 28
70273: PUSH
70274: LD_INT 18
70276: ST_TO_ADDR
// hc_gallery =  ;
70277: LD_ADDR_OWVAR 33
70281: PUSH
70282: LD_STRING 
70284: ST_TO_ADDR
// animal := CreateHuman ;
70285: LD_ADDR_VAR 0 12
70289: PUSH
70290: CALL_OW 44
70294: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70295: LD_VAR 0 12
70299: PPUSH
70300: LD_VAR 0 8
70304: PPUSH
70305: LD_INT 0
70307: PPUSH
70308: CALL 72362 0 3
// end ;
70312: GO 70266
70314: POP
70315: POP
// if tigers then
70316: LD_VAR 0 2
70320: IFFALSE 70404
// for i = 1 to tigers do
70322: LD_ADDR_VAR 0 11
70326: PUSH
70327: DOUBLE
70328: LD_INT 1
70330: DEC
70331: ST_TO_ADDR
70332: LD_VAR 0 2
70336: PUSH
70337: FOR_TO
70338: IFFALSE 70402
// begin hc_class = class_tiger ;
70340: LD_ADDR_OWVAR 28
70344: PUSH
70345: LD_INT 14
70347: ST_TO_ADDR
// hc_gallery =  ;
70348: LD_ADDR_OWVAR 33
70352: PUSH
70353: LD_STRING 
70355: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70356: LD_ADDR_OWVAR 35
70360: PUSH
70361: LD_INT 7
70363: NEG
70364: PPUSH
70365: LD_INT 7
70367: PPUSH
70368: CALL_OW 12
70372: ST_TO_ADDR
// animal := CreateHuman ;
70373: LD_ADDR_VAR 0 12
70377: PUSH
70378: CALL_OW 44
70382: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70383: LD_VAR 0 12
70387: PPUSH
70388: LD_VAR 0 8
70392: PPUSH
70393: LD_INT 0
70395: PPUSH
70396: CALL 72362 0 3
// end ;
70400: GO 70337
70402: POP
70403: POP
// if apemans then
70404: LD_VAR 0 3
70408: IFFALSE 70531
// for i = 1 to apemans do
70410: LD_ADDR_VAR 0 11
70414: PUSH
70415: DOUBLE
70416: LD_INT 1
70418: DEC
70419: ST_TO_ADDR
70420: LD_VAR 0 3
70424: PUSH
70425: FOR_TO
70426: IFFALSE 70529
// begin hc_class = class_apeman ;
70428: LD_ADDR_OWVAR 28
70432: PUSH
70433: LD_INT 12
70435: ST_TO_ADDR
// hc_gallery =  ;
70436: LD_ADDR_OWVAR 33
70440: PUSH
70441: LD_STRING 
70443: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70444: LD_ADDR_OWVAR 35
70448: PUSH
70449: LD_INT 2
70451: NEG
70452: PPUSH
70453: LD_INT 2
70455: PPUSH
70456: CALL_OW 12
70460: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70461: LD_ADDR_OWVAR 31
70465: PUSH
70466: LD_INT 1
70468: PPUSH
70469: LD_INT 3
70471: PPUSH
70472: CALL_OW 12
70476: PUSH
70477: LD_INT 1
70479: PPUSH
70480: LD_INT 3
70482: PPUSH
70483: CALL_OW 12
70487: PUSH
70488: LD_INT 0
70490: PUSH
70491: LD_INT 0
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: ST_TO_ADDR
// animal := CreateHuman ;
70500: LD_ADDR_VAR 0 12
70504: PUSH
70505: CALL_OW 44
70509: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70510: LD_VAR 0 12
70514: PPUSH
70515: LD_VAR 0 8
70519: PPUSH
70520: LD_INT 0
70522: PPUSH
70523: CALL 72362 0 3
// end ;
70527: GO 70425
70529: POP
70530: POP
// if enchidnas then
70531: LD_VAR 0 4
70535: IFFALSE 70602
// for i = 1 to enchidnas do
70537: LD_ADDR_VAR 0 11
70541: PUSH
70542: DOUBLE
70543: LD_INT 1
70545: DEC
70546: ST_TO_ADDR
70547: LD_VAR 0 4
70551: PUSH
70552: FOR_TO
70553: IFFALSE 70600
// begin hc_class = 13 ;
70555: LD_ADDR_OWVAR 28
70559: PUSH
70560: LD_INT 13
70562: ST_TO_ADDR
// hc_gallery =  ;
70563: LD_ADDR_OWVAR 33
70567: PUSH
70568: LD_STRING 
70570: ST_TO_ADDR
// animal := CreateHuman ;
70571: LD_ADDR_VAR 0 12
70575: PUSH
70576: CALL_OW 44
70580: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70581: LD_VAR 0 12
70585: PPUSH
70586: LD_VAR 0 8
70590: PPUSH
70591: LD_INT 0
70593: PPUSH
70594: CALL 72362 0 3
// end ;
70598: GO 70552
70600: POP
70601: POP
// if fishes then
70602: LD_VAR 0 7
70606: IFFALSE 70673
// for i = 1 to fishes do
70608: LD_ADDR_VAR 0 11
70612: PUSH
70613: DOUBLE
70614: LD_INT 1
70616: DEC
70617: ST_TO_ADDR
70618: LD_VAR 0 7
70622: PUSH
70623: FOR_TO
70624: IFFALSE 70671
// begin hc_class = 20 ;
70626: LD_ADDR_OWVAR 28
70630: PUSH
70631: LD_INT 20
70633: ST_TO_ADDR
// hc_gallery =  ;
70634: LD_ADDR_OWVAR 33
70638: PUSH
70639: LD_STRING 
70641: ST_TO_ADDR
// animal := CreateHuman ;
70642: LD_ADDR_VAR 0 12
70646: PUSH
70647: CALL_OW 44
70651: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70652: LD_VAR 0 12
70656: PPUSH
70657: LD_VAR 0 9
70661: PPUSH
70662: LD_INT 0
70664: PPUSH
70665: CALL 72362 0 3
// end ;
70669: GO 70623
70671: POP
70672: POP
// end ;
70673: LD_VAR 0 10
70677: RET
// export function WantHeal ( sci , unit ) ; begin
70678: LD_INT 0
70680: PPUSH
// if GetTaskList ( sci ) > 0 then
70681: LD_VAR 0 1
70685: PPUSH
70686: CALL_OW 437
70690: PUSH
70691: LD_INT 0
70693: GREATER
70694: IFFALSE 70764
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70696: LD_VAR 0 1
70700: PPUSH
70701: CALL_OW 437
70705: PUSH
70706: LD_INT 1
70708: ARRAY
70709: PUSH
70710: LD_INT 1
70712: ARRAY
70713: PUSH
70714: LD_STRING l
70716: EQUAL
70717: PUSH
70718: LD_VAR 0 1
70722: PPUSH
70723: CALL_OW 437
70727: PUSH
70728: LD_INT 1
70730: ARRAY
70731: PUSH
70732: LD_INT 4
70734: ARRAY
70735: PUSH
70736: LD_VAR 0 2
70740: EQUAL
70741: AND
70742: IFFALSE 70754
// result := true else
70744: LD_ADDR_VAR 0 3
70748: PUSH
70749: LD_INT 1
70751: ST_TO_ADDR
70752: GO 70762
// result := false ;
70754: LD_ADDR_VAR 0 3
70758: PUSH
70759: LD_INT 0
70761: ST_TO_ADDR
// end else
70762: GO 70772
// result := false ;
70764: LD_ADDR_VAR 0 3
70768: PUSH
70769: LD_INT 0
70771: ST_TO_ADDR
// end ;
70772: LD_VAR 0 3
70776: RET
// export function HealTarget ( sci ) ; begin
70777: LD_INT 0
70779: PPUSH
// if not sci then
70780: LD_VAR 0 1
70784: NOT
70785: IFFALSE 70789
// exit ;
70787: GO 70854
// result := 0 ;
70789: LD_ADDR_VAR 0 2
70793: PUSH
70794: LD_INT 0
70796: ST_TO_ADDR
// if GetTaskList ( sci ) then
70797: LD_VAR 0 1
70801: PPUSH
70802: CALL_OW 437
70806: IFFALSE 70854
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70808: LD_VAR 0 1
70812: PPUSH
70813: CALL_OW 437
70817: PUSH
70818: LD_INT 1
70820: ARRAY
70821: PUSH
70822: LD_INT 1
70824: ARRAY
70825: PUSH
70826: LD_STRING l
70828: EQUAL
70829: IFFALSE 70854
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70831: LD_ADDR_VAR 0 2
70835: PUSH
70836: LD_VAR 0 1
70840: PPUSH
70841: CALL_OW 437
70845: PUSH
70846: LD_INT 1
70848: ARRAY
70849: PUSH
70850: LD_INT 4
70852: ARRAY
70853: ST_TO_ADDR
// end ;
70854: LD_VAR 0 2
70858: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70859: LD_INT 0
70861: PPUSH
70862: PPUSH
70863: PPUSH
70864: PPUSH
// if not base_units then
70865: LD_VAR 0 1
70869: NOT
70870: IFFALSE 70874
// exit ;
70872: GO 70961
// result := false ;
70874: LD_ADDR_VAR 0 2
70878: PUSH
70879: LD_INT 0
70881: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70882: LD_ADDR_VAR 0 5
70886: PUSH
70887: LD_VAR 0 1
70891: PPUSH
70892: LD_INT 21
70894: PUSH
70895: LD_INT 3
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PPUSH
70902: CALL_OW 72
70906: ST_TO_ADDR
// if not tmp then
70907: LD_VAR 0 5
70911: NOT
70912: IFFALSE 70916
// exit ;
70914: GO 70961
// for i in tmp do
70916: LD_ADDR_VAR 0 3
70920: PUSH
70921: LD_VAR 0 5
70925: PUSH
70926: FOR_IN
70927: IFFALSE 70959
// begin result := EnemyInRange ( i , 22 ) ;
70929: LD_ADDR_VAR 0 2
70933: PUSH
70934: LD_VAR 0 3
70938: PPUSH
70939: LD_INT 22
70941: PPUSH
70942: CALL 69197 0 2
70946: ST_TO_ADDR
// if result then
70947: LD_VAR 0 2
70951: IFFALSE 70957
// exit ;
70953: POP
70954: POP
70955: GO 70961
// end ;
70957: GO 70926
70959: POP
70960: POP
// end ;
70961: LD_VAR 0 2
70965: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70966: LD_INT 0
70968: PPUSH
70969: PPUSH
// if not units then
70970: LD_VAR 0 1
70974: NOT
70975: IFFALSE 70979
// exit ;
70977: GO 71049
// result := [ ] ;
70979: LD_ADDR_VAR 0 3
70983: PUSH
70984: EMPTY
70985: ST_TO_ADDR
// for i in units do
70986: LD_ADDR_VAR 0 4
70990: PUSH
70991: LD_VAR 0 1
70995: PUSH
70996: FOR_IN
70997: IFFALSE 71047
// if GetTag ( i ) = tag then
70999: LD_VAR 0 4
71003: PPUSH
71004: CALL_OW 110
71008: PUSH
71009: LD_VAR 0 2
71013: EQUAL
71014: IFFALSE 71045
// result := Replace ( result , result + 1 , i ) ;
71016: LD_ADDR_VAR 0 3
71020: PUSH
71021: LD_VAR 0 3
71025: PPUSH
71026: LD_VAR 0 3
71030: PUSH
71031: LD_INT 1
71033: PLUS
71034: PPUSH
71035: LD_VAR 0 4
71039: PPUSH
71040: CALL_OW 1
71044: ST_TO_ADDR
71045: GO 70996
71047: POP
71048: POP
// end ;
71049: LD_VAR 0 3
71053: RET
// export function IsDriver ( un ) ; begin
71054: LD_INT 0
71056: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71057: LD_ADDR_VAR 0 2
71061: PUSH
71062: LD_VAR 0 1
71066: PUSH
71067: LD_INT 55
71069: PUSH
71070: EMPTY
71071: LIST
71072: PPUSH
71073: CALL_OW 69
71077: IN
71078: ST_TO_ADDR
// end ;
71079: LD_VAR 0 2
71083: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71084: LD_INT 0
71086: PPUSH
71087: PPUSH
// list := [ ] ;
71088: LD_ADDR_VAR 0 5
71092: PUSH
71093: EMPTY
71094: ST_TO_ADDR
// case d of 0 :
71095: LD_VAR 0 3
71099: PUSH
71100: LD_INT 0
71102: DOUBLE
71103: EQUAL
71104: IFTRUE 71108
71106: GO 71241
71108: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71109: LD_ADDR_VAR 0 5
71113: PUSH
71114: LD_VAR 0 1
71118: PUSH
71119: LD_INT 4
71121: MINUS
71122: PUSH
71123: LD_VAR 0 2
71127: PUSH
71128: LD_INT 4
71130: MINUS
71131: PUSH
71132: LD_INT 2
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: LIST
71139: PUSH
71140: LD_VAR 0 1
71144: PUSH
71145: LD_INT 3
71147: MINUS
71148: PUSH
71149: LD_VAR 0 2
71153: PUSH
71154: LD_INT 1
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: LIST
71161: PUSH
71162: LD_VAR 0 1
71166: PUSH
71167: LD_INT 4
71169: PLUS
71170: PUSH
71171: LD_VAR 0 2
71175: PUSH
71176: LD_INT 4
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: LIST
71183: PUSH
71184: LD_VAR 0 1
71188: PUSH
71189: LD_INT 3
71191: PLUS
71192: PUSH
71193: LD_VAR 0 2
71197: PUSH
71198: LD_INT 3
71200: PLUS
71201: PUSH
71202: LD_INT 5
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: LIST
71209: PUSH
71210: LD_VAR 0 1
71214: PUSH
71215: LD_VAR 0 2
71219: PUSH
71220: LD_INT 4
71222: PLUS
71223: PUSH
71224: LD_INT 0
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: LIST
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: ST_TO_ADDR
// end ; 1 :
71239: GO 71939
71241: LD_INT 1
71243: DOUBLE
71244: EQUAL
71245: IFTRUE 71249
71247: GO 71382
71249: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71250: LD_ADDR_VAR 0 5
71254: PUSH
71255: LD_VAR 0 1
71259: PUSH
71260: LD_VAR 0 2
71264: PUSH
71265: LD_INT 4
71267: MINUS
71268: PUSH
71269: LD_INT 3
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: LIST
71276: PUSH
71277: LD_VAR 0 1
71281: PUSH
71282: LD_INT 3
71284: MINUS
71285: PUSH
71286: LD_VAR 0 2
71290: PUSH
71291: LD_INT 3
71293: MINUS
71294: PUSH
71295: LD_INT 2
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: LIST
71302: PUSH
71303: LD_VAR 0 1
71307: PUSH
71308: LD_INT 4
71310: MINUS
71311: PUSH
71312: LD_VAR 0 2
71316: PUSH
71317: LD_INT 1
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: LIST
71324: PUSH
71325: LD_VAR 0 1
71329: PUSH
71330: LD_VAR 0 2
71334: PUSH
71335: LD_INT 3
71337: PLUS
71338: PUSH
71339: LD_INT 0
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: LIST
71346: PUSH
71347: LD_VAR 0 1
71351: PUSH
71352: LD_INT 4
71354: PLUS
71355: PUSH
71356: LD_VAR 0 2
71360: PUSH
71361: LD_INT 4
71363: PLUS
71364: PUSH
71365: LD_INT 5
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: LIST
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: ST_TO_ADDR
// end ; 2 :
71380: GO 71939
71382: LD_INT 2
71384: DOUBLE
71385: EQUAL
71386: IFTRUE 71390
71388: GO 71519
71390: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71391: LD_ADDR_VAR 0 5
71395: PUSH
71396: LD_VAR 0 1
71400: PUSH
71401: LD_VAR 0 2
71405: PUSH
71406: LD_INT 3
71408: MINUS
71409: PUSH
71410: LD_INT 3
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: LIST
71417: PUSH
71418: LD_VAR 0 1
71422: PUSH
71423: LD_INT 4
71425: PLUS
71426: PUSH
71427: LD_VAR 0 2
71431: PUSH
71432: LD_INT 4
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: LIST
71439: PUSH
71440: LD_VAR 0 1
71444: PUSH
71445: LD_VAR 0 2
71449: PUSH
71450: LD_INT 4
71452: PLUS
71453: PUSH
71454: LD_INT 0
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: LIST
71461: PUSH
71462: LD_VAR 0 1
71466: PUSH
71467: LD_INT 3
71469: MINUS
71470: PUSH
71471: LD_VAR 0 2
71475: PUSH
71476: LD_INT 1
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: LIST
71483: PUSH
71484: LD_VAR 0 1
71488: PUSH
71489: LD_INT 4
71491: MINUS
71492: PUSH
71493: LD_VAR 0 2
71497: PUSH
71498: LD_INT 4
71500: MINUS
71501: PUSH
71502: LD_INT 2
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: LIST
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: ST_TO_ADDR
// end ; 3 :
71517: GO 71939
71519: LD_INT 3
71521: DOUBLE
71522: EQUAL
71523: IFTRUE 71527
71525: GO 71660
71527: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71528: LD_ADDR_VAR 0 5
71532: PUSH
71533: LD_VAR 0 1
71537: PUSH
71538: LD_INT 3
71540: PLUS
71541: PUSH
71542: LD_VAR 0 2
71546: PUSH
71547: LD_INT 4
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: LIST
71554: PUSH
71555: LD_VAR 0 1
71559: PUSH
71560: LD_INT 4
71562: PLUS
71563: PUSH
71564: LD_VAR 0 2
71568: PUSH
71569: LD_INT 4
71571: PLUS
71572: PUSH
71573: LD_INT 5
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: LIST
71580: PUSH
71581: LD_VAR 0 1
71585: PUSH
71586: LD_INT 4
71588: MINUS
71589: PUSH
71590: LD_VAR 0 2
71594: PUSH
71595: LD_INT 1
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: LIST
71602: PUSH
71603: LD_VAR 0 1
71607: PUSH
71608: LD_VAR 0 2
71612: PUSH
71613: LD_INT 4
71615: MINUS
71616: PUSH
71617: LD_INT 3
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: LIST
71624: PUSH
71625: LD_VAR 0 1
71629: PUSH
71630: LD_INT 3
71632: MINUS
71633: PUSH
71634: LD_VAR 0 2
71638: PUSH
71639: LD_INT 3
71641: MINUS
71642: PUSH
71643: LD_INT 2
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: LIST
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: ST_TO_ADDR
// end ; 4 :
71658: GO 71939
71660: LD_INT 4
71662: DOUBLE
71663: EQUAL
71664: IFTRUE 71668
71666: GO 71801
71668: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71669: LD_ADDR_VAR 0 5
71673: PUSH
71674: LD_VAR 0 1
71678: PUSH
71679: LD_VAR 0 2
71683: PUSH
71684: LD_INT 4
71686: PLUS
71687: PUSH
71688: LD_INT 0
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: LIST
71695: PUSH
71696: LD_VAR 0 1
71700: PUSH
71701: LD_INT 3
71703: PLUS
71704: PUSH
71705: LD_VAR 0 2
71709: PUSH
71710: LD_INT 3
71712: PLUS
71713: PUSH
71714: LD_INT 5
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: LIST
71721: PUSH
71722: LD_VAR 0 1
71726: PUSH
71727: LD_INT 4
71729: PLUS
71730: PUSH
71731: LD_VAR 0 2
71735: PUSH
71736: LD_INT 4
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: LIST
71743: PUSH
71744: LD_VAR 0 1
71748: PUSH
71749: LD_VAR 0 2
71753: PUSH
71754: LD_INT 3
71756: MINUS
71757: PUSH
71758: LD_INT 3
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: LIST
71765: PUSH
71766: LD_VAR 0 1
71770: PUSH
71771: LD_INT 4
71773: MINUS
71774: PUSH
71775: LD_VAR 0 2
71779: PUSH
71780: LD_INT 4
71782: MINUS
71783: PUSH
71784: LD_INT 2
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: LIST
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: ST_TO_ADDR
// end ; 5 :
71799: GO 71939
71801: LD_INT 5
71803: DOUBLE
71804: EQUAL
71805: IFTRUE 71809
71807: GO 71938
71809: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71810: LD_ADDR_VAR 0 5
71814: PUSH
71815: LD_VAR 0 1
71819: PUSH
71820: LD_INT 4
71822: MINUS
71823: PUSH
71824: LD_VAR 0 2
71828: PUSH
71829: LD_INT 1
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: LIST
71836: PUSH
71837: LD_VAR 0 1
71841: PUSH
71842: LD_VAR 0 2
71846: PUSH
71847: LD_INT 4
71849: MINUS
71850: PUSH
71851: LD_INT 3
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: LIST
71858: PUSH
71859: LD_VAR 0 1
71863: PUSH
71864: LD_INT 4
71866: PLUS
71867: PUSH
71868: LD_VAR 0 2
71872: PUSH
71873: LD_INT 4
71875: PLUS
71876: PUSH
71877: LD_INT 5
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: LIST
71884: PUSH
71885: LD_VAR 0 1
71889: PUSH
71890: LD_INT 3
71892: PLUS
71893: PUSH
71894: LD_VAR 0 2
71898: PUSH
71899: LD_INT 4
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: LIST
71906: PUSH
71907: LD_VAR 0 1
71911: PUSH
71912: LD_VAR 0 2
71916: PUSH
71917: LD_INT 3
71919: PLUS
71920: PUSH
71921: LD_INT 0
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: LIST
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: ST_TO_ADDR
// end ; end ;
71936: GO 71939
71938: POP
// result := list ;
71939: LD_ADDR_VAR 0 4
71943: PUSH
71944: LD_VAR 0 5
71948: ST_TO_ADDR
// end ;
71949: LD_VAR 0 4
71953: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71954: LD_INT 0
71956: PPUSH
71957: PPUSH
71958: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71959: LD_VAR 0 1
71963: NOT
71964: PUSH
71965: LD_VAR 0 2
71969: PUSH
71970: LD_INT 1
71972: PUSH
71973: LD_INT 2
71975: PUSH
71976: LD_INT 3
71978: PUSH
71979: LD_INT 4
71981: PUSH
71982: EMPTY
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: IN
71988: NOT
71989: OR
71990: IFFALSE 71994
// exit ;
71992: GO 72086
// tmp := [ ] ;
71994: LD_ADDR_VAR 0 5
71998: PUSH
71999: EMPTY
72000: ST_TO_ADDR
// for i in units do
72001: LD_ADDR_VAR 0 4
72005: PUSH
72006: LD_VAR 0 1
72010: PUSH
72011: FOR_IN
72012: IFFALSE 72055
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72014: LD_ADDR_VAR 0 5
72018: PUSH
72019: LD_VAR 0 5
72023: PPUSH
72024: LD_VAR 0 5
72028: PUSH
72029: LD_INT 1
72031: PLUS
72032: PPUSH
72033: LD_VAR 0 4
72037: PPUSH
72038: LD_VAR 0 2
72042: PPUSH
72043: CALL_OW 259
72047: PPUSH
72048: CALL_OW 2
72052: ST_TO_ADDR
72053: GO 72011
72055: POP
72056: POP
// if not tmp then
72057: LD_VAR 0 5
72061: NOT
72062: IFFALSE 72066
// exit ;
72064: GO 72086
// result := SortListByListDesc ( units , tmp ) ;
72066: LD_ADDR_VAR 0 3
72070: PUSH
72071: LD_VAR 0 1
72075: PPUSH
72076: LD_VAR 0 5
72080: PPUSH
72081: CALL_OW 77
72085: ST_TO_ADDR
// end ;
72086: LD_VAR 0 3
72090: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72091: LD_INT 0
72093: PPUSH
72094: PPUSH
72095: PPUSH
// result := false ;
72096: LD_ADDR_VAR 0 3
72100: PUSH
72101: LD_INT 0
72103: ST_TO_ADDR
// x := GetX ( building ) ;
72104: LD_ADDR_VAR 0 4
72108: PUSH
72109: LD_VAR 0 2
72113: PPUSH
72114: CALL_OW 250
72118: ST_TO_ADDR
// y := GetY ( building ) ;
72119: LD_ADDR_VAR 0 5
72123: PUSH
72124: LD_VAR 0 2
72128: PPUSH
72129: CALL_OW 251
72133: ST_TO_ADDR
// if not building or not x or not y then
72134: LD_VAR 0 2
72138: NOT
72139: PUSH
72140: LD_VAR 0 4
72144: NOT
72145: OR
72146: PUSH
72147: LD_VAR 0 5
72151: NOT
72152: OR
72153: IFFALSE 72157
// exit ;
72155: GO 72249
// if GetTaskList ( unit ) then
72157: LD_VAR 0 1
72161: PPUSH
72162: CALL_OW 437
72166: IFFALSE 72249
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72168: LD_STRING e
72170: PUSH
72171: LD_VAR 0 1
72175: PPUSH
72176: CALL_OW 437
72180: PUSH
72181: LD_INT 1
72183: ARRAY
72184: PUSH
72185: LD_INT 1
72187: ARRAY
72188: EQUAL
72189: PUSH
72190: LD_VAR 0 4
72194: PUSH
72195: LD_VAR 0 1
72199: PPUSH
72200: CALL_OW 437
72204: PUSH
72205: LD_INT 1
72207: ARRAY
72208: PUSH
72209: LD_INT 2
72211: ARRAY
72212: EQUAL
72213: AND
72214: PUSH
72215: LD_VAR 0 5
72219: PUSH
72220: LD_VAR 0 1
72224: PPUSH
72225: CALL_OW 437
72229: PUSH
72230: LD_INT 1
72232: ARRAY
72233: PUSH
72234: LD_INT 3
72236: ARRAY
72237: EQUAL
72238: AND
72239: IFFALSE 72249
// result := true end ;
72241: LD_ADDR_VAR 0 3
72245: PUSH
72246: LD_INT 1
72248: ST_TO_ADDR
// end ;
72249: LD_VAR 0 3
72253: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72254: LD_INT 0
72256: PPUSH
// result := false ;
72257: LD_ADDR_VAR 0 4
72261: PUSH
72262: LD_INT 0
72264: ST_TO_ADDR
// if GetTaskList ( unit ) then
72265: LD_VAR 0 1
72269: PPUSH
72270: CALL_OW 437
72274: IFFALSE 72357
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72276: LD_STRING M
72278: PUSH
72279: LD_VAR 0 1
72283: PPUSH
72284: CALL_OW 437
72288: PUSH
72289: LD_INT 1
72291: ARRAY
72292: PUSH
72293: LD_INT 1
72295: ARRAY
72296: EQUAL
72297: PUSH
72298: LD_VAR 0 2
72302: PUSH
72303: LD_VAR 0 1
72307: PPUSH
72308: CALL_OW 437
72312: PUSH
72313: LD_INT 1
72315: ARRAY
72316: PUSH
72317: LD_INT 2
72319: ARRAY
72320: EQUAL
72321: AND
72322: PUSH
72323: LD_VAR 0 3
72327: PUSH
72328: LD_VAR 0 1
72332: PPUSH
72333: CALL_OW 437
72337: PUSH
72338: LD_INT 1
72340: ARRAY
72341: PUSH
72342: LD_INT 3
72344: ARRAY
72345: EQUAL
72346: AND
72347: IFFALSE 72357
// result := true ;
72349: LD_ADDR_VAR 0 4
72353: PUSH
72354: LD_INT 1
72356: ST_TO_ADDR
// end ; end ;
72357: LD_VAR 0 4
72361: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72362: LD_INT 0
72364: PPUSH
72365: PPUSH
72366: PPUSH
72367: PPUSH
// if not unit or not area then
72368: LD_VAR 0 1
72372: NOT
72373: PUSH
72374: LD_VAR 0 2
72378: NOT
72379: OR
72380: IFFALSE 72384
// exit ;
72382: GO 72548
// tmp := AreaToList ( area , i ) ;
72384: LD_ADDR_VAR 0 6
72388: PUSH
72389: LD_VAR 0 2
72393: PPUSH
72394: LD_VAR 0 5
72398: PPUSH
72399: CALL_OW 517
72403: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72404: LD_ADDR_VAR 0 5
72408: PUSH
72409: DOUBLE
72410: LD_INT 1
72412: DEC
72413: ST_TO_ADDR
72414: LD_VAR 0 6
72418: PUSH
72419: LD_INT 1
72421: ARRAY
72422: PUSH
72423: FOR_TO
72424: IFFALSE 72546
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72426: LD_ADDR_VAR 0 7
72430: PUSH
72431: LD_VAR 0 6
72435: PUSH
72436: LD_INT 1
72438: ARRAY
72439: PUSH
72440: LD_VAR 0 5
72444: ARRAY
72445: PUSH
72446: LD_VAR 0 6
72450: PUSH
72451: LD_INT 2
72453: ARRAY
72454: PUSH
72455: LD_VAR 0 5
72459: ARRAY
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72465: LD_VAR 0 7
72469: PUSH
72470: LD_INT 1
72472: ARRAY
72473: PPUSH
72474: LD_VAR 0 7
72478: PUSH
72479: LD_INT 2
72481: ARRAY
72482: PPUSH
72483: CALL_OW 428
72487: PUSH
72488: LD_INT 0
72490: EQUAL
72491: IFFALSE 72544
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72493: LD_VAR 0 1
72497: PPUSH
72498: LD_VAR 0 7
72502: PUSH
72503: LD_INT 1
72505: ARRAY
72506: PPUSH
72507: LD_VAR 0 7
72511: PUSH
72512: LD_INT 2
72514: ARRAY
72515: PPUSH
72516: LD_VAR 0 3
72520: PPUSH
72521: CALL_OW 48
// result := IsPlaced ( unit ) ;
72525: LD_ADDR_VAR 0 4
72529: PUSH
72530: LD_VAR 0 1
72534: PPUSH
72535: CALL_OW 305
72539: ST_TO_ADDR
// exit ;
72540: POP
72541: POP
72542: GO 72548
// end ; end ;
72544: GO 72423
72546: POP
72547: POP
// end ;
72548: LD_VAR 0 4
72552: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72553: LD_INT 0
72555: PPUSH
72556: PPUSH
72557: PPUSH
// if not side or side > 8 then
72558: LD_VAR 0 1
72562: NOT
72563: PUSH
72564: LD_VAR 0 1
72568: PUSH
72569: LD_INT 8
72571: GREATER
72572: OR
72573: IFFALSE 72577
// exit ;
72575: GO 72764
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72577: LD_ADDR_VAR 0 4
72581: PUSH
72582: LD_INT 22
72584: PUSH
72585: LD_VAR 0 1
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 21
72596: PUSH
72597: LD_INT 3
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PPUSH
72608: CALL_OW 69
72612: ST_TO_ADDR
// if not tmp then
72613: LD_VAR 0 4
72617: NOT
72618: IFFALSE 72622
// exit ;
72620: GO 72764
// enable_addtolog := true ;
72622: LD_ADDR_OWVAR 81
72626: PUSH
72627: LD_INT 1
72629: ST_TO_ADDR
// AddToLog ( [ ) ;
72630: LD_STRING [
72632: PPUSH
72633: CALL_OW 561
// for i in tmp do
72637: LD_ADDR_VAR 0 3
72641: PUSH
72642: LD_VAR 0 4
72646: PUSH
72647: FOR_IN
72648: IFFALSE 72755
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72650: LD_STRING [
72652: PUSH
72653: LD_VAR 0 3
72657: PPUSH
72658: CALL_OW 266
72662: STR
72663: PUSH
72664: LD_STRING , 
72666: STR
72667: PUSH
72668: LD_VAR 0 3
72672: PPUSH
72673: CALL_OW 250
72677: STR
72678: PUSH
72679: LD_STRING , 
72681: STR
72682: PUSH
72683: LD_VAR 0 3
72687: PPUSH
72688: CALL_OW 251
72692: STR
72693: PUSH
72694: LD_STRING , 
72696: STR
72697: PUSH
72698: LD_VAR 0 3
72702: PPUSH
72703: CALL_OW 254
72707: STR
72708: PUSH
72709: LD_STRING , 
72711: STR
72712: PUSH
72713: LD_VAR 0 3
72717: PPUSH
72718: LD_INT 1
72720: PPUSH
72721: CALL_OW 268
72725: STR
72726: PUSH
72727: LD_STRING , 
72729: STR
72730: PUSH
72731: LD_VAR 0 3
72735: PPUSH
72736: LD_INT 2
72738: PPUSH
72739: CALL_OW 268
72743: STR
72744: PUSH
72745: LD_STRING ],
72747: STR
72748: PPUSH
72749: CALL_OW 561
// end ;
72753: GO 72647
72755: POP
72756: POP
// AddToLog ( ]; ) ;
72757: LD_STRING ];
72759: PPUSH
72760: CALL_OW 561
// end ;
72764: LD_VAR 0 2
72768: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72769: LD_INT 0
72771: PPUSH
72772: PPUSH
72773: PPUSH
72774: PPUSH
72775: PPUSH
// if not area or not rate or not max then
72776: LD_VAR 0 1
72780: NOT
72781: PUSH
72782: LD_VAR 0 2
72786: NOT
72787: OR
72788: PUSH
72789: LD_VAR 0 4
72793: NOT
72794: OR
72795: IFFALSE 72799
// exit ;
72797: GO 72991
// while 1 do
72799: LD_INT 1
72801: IFFALSE 72991
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72803: LD_ADDR_VAR 0 9
72807: PUSH
72808: LD_VAR 0 1
72812: PPUSH
72813: LD_INT 1
72815: PPUSH
72816: CALL_OW 287
72820: PUSH
72821: LD_INT 10
72823: MUL
72824: ST_TO_ADDR
// r := rate / 10 ;
72825: LD_ADDR_VAR 0 7
72829: PUSH
72830: LD_VAR 0 2
72834: PUSH
72835: LD_INT 10
72837: DIVREAL
72838: ST_TO_ADDR
// time := 1 1$00 ;
72839: LD_ADDR_VAR 0 8
72843: PUSH
72844: LD_INT 2100
72846: ST_TO_ADDR
// if amount < min then
72847: LD_VAR 0 9
72851: PUSH
72852: LD_VAR 0 3
72856: LESS
72857: IFFALSE 72875
// r := r * 2 else
72859: LD_ADDR_VAR 0 7
72863: PUSH
72864: LD_VAR 0 7
72868: PUSH
72869: LD_INT 2
72871: MUL
72872: ST_TO_ADDR
72873: GO 72901
// if amount > max then
72875: LD_VAR 0 9
72879: PUSH
72880: LD_VAR 0 4
72884: GREATER
72885: IFFALSE 72901
// r := r / 2 ;
72887: LD_ADDR_VAR 0 7
72891: PUSH
72892: LD_VAR 0 7
72896: PUSH
72897: LD_INT 2
72899: DIVREAL
72900: ST_TO_ADDR
// time := time / r ;
72901: LD_ADDR_VAR 0 8
72905: PUSH
72906: LD_VAR 0 8
72910: PUSH
72911: LD_VAR 0 7
72915: DIVREAL
72916: ST_TO_ADDR
// if time < 0 then
72917: LD_VAR 0 8
72921: PUSH
72922: LD_INT 0
72924: LESS
72925: IFFALSE 72942
// time := time * - 1 ;
72927: LD_ADDR_VAR 0 8
72931: PUSH
72932: LD_VAR 0 8
72936: PUSH
72937: LD_INT 1
72939: NEG
72940: MUL
72941: ST_TO_ADDR
// wait ( time ) ;
72942: LD_VAR 0 8
72946: PPUSH
72947: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72951: LD_INT 35
72953: PPUSH
72954: LD_INT 875
72956: PPUSH
72957: CALL_OW 12
72961: PPUSH
72962: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72966: LD_INT 1
72968: PPUSH
72969: LD_INT 5
72971: PPUSH
72972: CALL_OW 12
72976: PPUSH
72977: LD_VAR 0 1
72981: PPUSH
72982: LD_INT 1
72984: PPUSH
72985: CALL_OW 55
// end ;
72989: GO 72799
// end ;
72991: LD_VAR 0 5
72995: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72996: LD_INT 0
72998: PPUSH
72999: PPUSH
73000: PPUSH
73001: PPUSH
73002: PPUSH
73003: PPUSH
73004: PPUSH
73005: PPUSH
// if not turrets or not factories then
73006: LD_VAR 0 1
73010: NOT
73011: PUSH
73012: LD_VAR 0 2
73016: NOT
73017: OR
73018: IFFALSE 73022
// exit ;
73020: GO 73329
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73022: LD_ADDR_VAR 0 10
73026: PUSH
73027: LD_INT 5
73029: PUSH
73030: LD_INT 6
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: PUSH
73037: LD_INT 2
73039: PUSH
73040: LD_INT 4
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PUSH
73047: LD_INT 3
73049: PUSH
73050: LD_INT 5
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: LIST
73061: PUSH
73062: LD_INT 24
73064: PUSH
73065: LD_INT 25
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: PUSH
73072: LD_INT 23
73074: PUSH
73075: LD_INT 27
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: PUSH
73086: LD_INT 42
73088: PUSH
73089: LD_INT 43
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: PUSH
73096: LD_INT 44
73098: PUSH
73099: LD_INT 46
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: LD_INT 45
73108: PUSH
73109: LD_INT 47
73111: PUSH
73112: EMPTY
73113: LIST
73114: LIST
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: LIST
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: LIST
73125: ST_TO_ADDR
// result := [ ] ;
73126: LD_ADDR_VAR 0 3
73130: PUSH
73131: EMPTY
73132: ST_TO_ADDR
// for i in turrets do
73133: LD_ADDR_VAR 0 4
73137: PUSH
73138: LD_VAR 0 1
73142: PUSH
73143: FOR_IN
73144: IFFALSE 73327
// begin nat := GetNation ( i ) ;
73146: LD_ADDR_VAR 0 7
73150: PUSH
73151: LD_VAR 0 4
73155: PPUSH
73156: CALL_OW 248
73160: ST_TO_ADDR
// weapon := 0 ;
73161: LD_ADDR_VAR 0 8
73165: PUSH
73166: LD_INT 0
73168: ST_TO_ADDR
// if not nat then
73169: LD_VAR 0 7
73173: NOT
73174: IFFALSE 73178
// continue ;
73176: GO 73143
// for j in list [ nat ] do
73178: LD_ADDR_VAR 0 5
73182: PUSH
73183: LD_VAR 0 10
73187: PUSH
73188: LD_VAR 0 7
73192: ARRAY
73193: PUSH
73194: FOR_IN
73195: IFFALSE 73236
// if GetBWeapon ( i ) = j [ 1 ] then
73197: LD_VAR 0 4
73201: PPUSH
73202: CALL_OW 269
73206: PUSH
73207: LD_VAR 0 5
73211: PUSH
73212: LD_INT 1
73214: ARRAY
73215: EQUAL
73216: IFFALSE 73234
// begin weapon := j [ 2 ] ;
73218: LD_ADDR_VAR 0 8
73222: PUSH
73223: LD_VAR 0 5
73227: PUSH
73228: LD_INT 2
73230: ARRAY
73231: ST_TO_ADDR
// break ;
73232: GO 73236
// end ;
73234: GO 73194
73236: POP
73237: POP
// if not weapon then
73238: LD_VAR 0 8
73242: NOT
73243: IFFALSE 73247
// continue ;
73245: GO 73143
// for k in factories do
73247: LD_ADDR_VAR 0 6
73251: PUSH
73252: LD_VAR 0 2
73256: PUSH
73257: FOR_IN
73258: IFFALSE 73323
// begin weapons := AvailableWeaponList ( k ) ;
73260: LD_ADDR_VAR 0 9
73264: PUSH
73265: LD_VAR 0 6
73269: PPUSH
73270: CALL_OW 478
73274: ST_TO_ADDR
// if not weapons then
73275: LD_VAR 0 9
73279: NOT
73280: IFFALSE 73284
// continue ;
73282: GO 73257
// if weapon in weapons then
73284: LD_VAR 0 8
73288: PUSH
73289: LD_VAR 0 9
73293: IN
73294: IFFALSE 73321
// begin result := [ i , weapon ] ;
73296: LD_ADDR_VAR 0 3
73300: PUSH
73301: LD_VAR 0 4
73305: PUSH
73306: LD_VAR 0 8
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: ST_TO_ADDR
// exit ;
73315: POP
73316: POP
73317: POP
73318: POP
73319: GO 73329
// end ; end ;
73321: GO 73257
73323: POP
73324: POP
// end ;
73325: GO 73143
73327: POP
73328: POP
// end ;
73329: LD_VAR 0 3
73333: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73334: LD_INT 0
73336: PPUSH
// if not side or side > 8 then
73337: LD_VAR 0 3
73341: NOT
73342: PUSH
73343: LD_VAR 0 3
73347: PUSH
73348: LD_INT 8
73350: GREATER
73351: OR
73352: IFFALSE 73356
// exit ;
73354: GO 73415
// if not range then
73356: LD_VAR 0 4
73360: NOT
73361: IFFALSE 73372
// range := - 12 ;
73363: LD_ADDR_VAR 0 4
73367: PUSH
73368: LD_INT 12
73370: NEG
73371: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73372: LD_VAR 0 1
73376: PPUSH
73377: LD_VAR 0 2
73381: PPUSH
73382: LD_VAR 0 3
73386: PPUSH
73387: LD_VAR 0 4
73391: PPUSH
73392: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73396: LD_VAR 0 1
73400: PPUSH
73401: LD_VAR 0 2
73405: PPUSH
73406: LD_VAR 0 3
73410: PPUSH
73411: CALL_OW 331
// end ;
73415: LD_VAR 0 5
73419: RET
// export function Video ( mode ) ; begin
73420: LD_INT 0
73422: PPUSH
// ingame_video = mode ;
73423: LD_ADDR_OWVAR 52
73427: PUSH
73428: LD_VAR 0 1
73432: ST_TO_ADDR
// interface_hidden = mode ;
73433: LD_ADDR_OWVAR 54
73437: PUSH
73438: LD_VAR 0 1
73442: ST_TO_ADDR
// end ;
73443: LD_VAR 0 2
73447: RET
// export function Join ( array , element ) ; begin
73448: LD_INT 0
73450: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73451: LD_ADDR_VAR 0 3
73455: PUSH
73456: LD_VAR 0 1
73460: PPUSH
73461: LD_VAR 0 1
73465: PUSH
73466: LD_INT 1
73468: PLUS
73469: PPUSH
73470: LD_VAR 0 2
73474: PPUSH
73475: CALL_OW 1
73479: ST_TO_ADDR
// end ;
73480: LD_VAR 0 3
73484: RET
// export function JoinUnion ( array , element ) ; begin
73485: LD_INT 0
73487: PPUSH
// result := array union element ;
73488: LD_ADDR_VAR 0 3
73492: PUSH
73493: LD_VAR 0 1
73497: PUSH
73498: LD_VAR 0 2
73502: UNION
73503: ST_TO_ADDR
// end ;
73504: LD_VAR 0 3
73508: RET
// export function GetBehemoths ( side ) ; begin
73509: LD_INT 0
73511: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73512: LD_ADDR_VAR 0 2
73516: PUSH
73517: LD_INT 22
73519: PUSH
73520: LD_VAR 0 1
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PUSH
73529: LD_INT 31
73531: PUSH
73532: LD_INT 25
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: PPUSH
73543: CALL_OW 69
73547: ST_TO_ADDR
// end ;
73548: LD_VAR 0 2
73552: RET
// export function Shuffle ( array ) ; var i , index ; begin
73553: LD_INT 0
73555: PPUSH
73556: PPUSH
73557: PPUSH
// result := [ ] ;
73558: LD_ADDR_VAR 0 2
73562: PUSH
73563: EMPTY
73564: ST_TO_ADDR
// if not array then
73565: LD_VAR 0 1
73569: NOT
73570: IFFALSE 73574
// exit ;
73572: GO 73673
// Randomize ;
73574: CALL_OW 10
// for i = array downto 1 do
73578: LD_ADDR_VAR 0 3
73582: PUSH
73583: DOUBLE
73584: LD_VAR 0 1
73588: INC
73589: ST_TO_ADDR
73590: LD_INT 1
73592: PUSH
73593: FOR_DOWNTO
73594: IFFALSE 73671
// begin index := rand ( 1 , array ) ;
73596: LD_ADDR_VAR 0 4
73600: PUSH
73601: LD_INT 1
73603: PPUSH
73604: LD_VAR 0 1
73608: PPUSH
73609: CALL_OW 12
73613: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73614: LD_ADDR_VAR 0 2
73618: PUSH
73619: LD_VAR 0 2
73623: PPUSH
73624: LD_VAR 0 2
73628: PUSH
73629: LD_INT 1
73631: PLUS
73632: PPUSH
73633: LD_VAR 0 1
73637: PUSH
73638: LD_VAR 0 4
73642: ARRAY
73643: PPUSH
73644: CALL_OW 2
73648: ST_TO_ADDR
// array := Delete ( array , index ) ;
73649: LD_ADDR_VAR 0 1
73653: PUSH
73654: LD_VAR 0 1
73658: PPUSH
73659: LD_VAR 0 4
73663: PPUSH
73664: CALL_OW 3
73668: ST_TO_ADDR
// end ;
73669: GO 73593
73671: POP
73672: POP
// end ;
73673: LD_VAR 0 2
73677: RET
// export function GetBaseMaterials ( base ) ; begin
73678: LD_INT 0
73680: PPUSH
// result := [ 0 , 0 , 0 ] ;
73681: LD_ADDR_VAR 0 2
73685: PUSH
73686: LD_INT 0
73688: PUSH
73689: LD_INT 0
73691: PUSH
73692: LD_INT 0
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: LIST
73699: ST_TO_ADDR
// if not base then
73700: LD_VAR 0 1
73704: NOT
73705: IFFALSE 73709
// exit ;
73707: GO 73758
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73709: LD_ADDR_VAR 0 2
73713: PUSH
73714: LD_VAR 0 1
73718: PPUSH
73719: LD_INT 1
73721: PPUSH
73722: CALL_OW 275
73726: PUSH
73727: LD_VAR 0 1
73731: PPUSH
73732: LD_INT 2
73734: PPUSH
73735: CALL_OW 275
73739: PUSH
73740: LD_VAR 0 1
73744: PPUSH
73745: LD_INT 3
73747: PPUSH
73748: CALL_OW 275
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: LIST
73757: ST_TO_ADDR
// end ;
73758: LD_VAR 0 2
73762: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73763: LD_INT 0
73765: PPUSH
73766: PPUSH
// result := array ;
73767: LD_ADDR_VAR 0 3
73771: PUSH
73772: LD_VAR 0 1
73776: ST_TO_ADDR
// if size > 0 then
73777: LD_VAR 0 2
73781: PUSH
73782: LD_INT 0
73784: GREATER
73785: IFFALSE 73831
// for i := array downto size do
73787: LD_ADDR_VAR 0 4
73791: PUSH
73792: DOUBLE
73793: LD_VAR 0 1
73797: INC
73798: ST_TO_ADDR
73799: LD_VAR 0 2
73803: PUSH
73804: FOR_DOWNTO
73805: IFFALSE 73829
// result := Delete ( result , result ) ;
73807: LD_ADDR_VAR 0 3
73811: PUSH
73812: LD_VAR 0 3
73816: PPUSH
73817: LD_VAR 0 3
73821: PPUSH
73822: CALL_OW 3
73826: ST_TO_ADDR
73827: GO 73804
73829: POP
73830: POP
// end ;
73831: LD_VAR 0 3
73835: RET
// export function ComExit ( unit ) ; var tmp ; begin
73836: LD_INT 0
73838: PPUSH
73839: PPUSH
// if not IsInUnit ( unit ) then
73840: LD_VAR 0 1
73844: PPUSH
73845: CALL_OW 310
73849: NOT
73850: IFFALSE 73854
// exit ;
73852: GO 73914
// tmp := IsInUnit ( unit ) ;
73854: LD_ADDR_VAR 0 3
73858: PUSH
73859: LD_VAR 0 1
73863: PPUSH
73864: CALL_OW 310
73868: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73869: LD_VAR 0 3
73873: PPUSH
73874: CALL_OW 247
73878: PUSH
73879: LD_INT 2
73881: EQUAL
73882: IFFALSE 73895
// ComExitVehicle ( unit ) else
73884: LD_VAR 0 1
73888: PPUSH
73889: CALL_OW 121
73893: GO 73904
// ComExitBuilding ( unit ) ;
73895: LD_VAR 0 1
73899: PPUSH
73900: CALL_OW 122
// result := tmp ;
73904: LD_ADDR_VAR 0 2
73908: PUSH
73909: LD_VAR 0 3
73913: ST_TO_ADDR
// end ;
73914: LD_VAR 0 2
73918: RET
// export function ComExitAll ( units ) ; var i ; begin
73919: LD_INT 0
73921: PPUSH
73922: PPUSH
// if not units then
73923: LD_VAR 0 1
73927: NOT
73928: IFFALSE 73932
// exit ;
73930: GO 73958
// for i in units do
73932: LD_ADDR_VAR 0 3
73936: PUSH
73937: LD_VAR 0 1
73941: PUSH
73942: FOR_IN
73943: IFFALSE 73956
// ComExit ( i ) ;
73945: LD_VAR 0 3
73949: PPUSH
73950: CALL 73836 0 1
73954: GO 73942
73956: POP
73957: POP
// end ;
73958: LD_VAR 0 2
73962: RET
// export function ResetHc ; begin
73963: LD_INT 0
73965: PPUSH
// InitHc ;
73966: CALL_OW 19
// hc_importance := 0 ;
73970: LD_ADDR_OWVAR 32
73974: PUSH
73975: LD_INT 0
73977: ST_TO_ADDR
// end ;
73978: LD_VAR 0 1
73982: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73983: LD_INT 0
73985: PPUSH
73986: PPUSH
73987: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73988: LD_ADDR_VAR 0 6
73992: PUSH
73993: LD_VAR 0 1
73997: PUSH
73998: LD_VAR 0 3
74002: PLUS
74003: PUSH
74004: LD_INT 2
74006: DIV
74007: ST_TO_ADDR
// if _x < 0 then
74008: LD_VAR 0 6
74012: PUSH
74013: LD_INT 0
74015: LESS
74016: IFFALSE 74033
// _x := _x * - 1 ;
74018: LD_ADDR_VAR 0 6
74022: PUSH
74023: LD_VAR 0 6
74027: PUSH
74028: LD_INT 1
74030: NEG
74031: MUL
74032: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74033: LD_ADDR_VAR 0 7
74037: PUSH
74038: LD_VAR 0 2
74042: PUSH
74043: LD_VAR 0 4
74047: PLUS
74048: PUSH
74049: LD_INT 2
74051: DIV
74052: ST_TO_ADDR
// if _y < 0 then
74053: LD_VAR 0 7
74057: PUSH
74058: LD_INT 0
74060: LESS
74061: IFFALSE 74078
// _y := _y * - 1 ;
74063: LD_ADDR_VAR 0 7
74067: PUSH
74068: LD_VAR 0 7
74072: PUSH
74073: LD_INT 1
74075: NEG
74076: MUL
74077: ST_TO_ADDR
// result := [ _x , _y ] ;
74078: LD_ADDR_VAR 0 5
74082: PUSH
74083: LD_VAR 0 6
74087: PUSH
74088: LD_VAR 0 7
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: ST_TO_ADDR
// end ;
74097: LD_VAR 0 5
74101: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74102: LD_INT 0
74104: PPUSH
74105: PPUSH
74106: PPUSH
74107: PPUSH
// task := GetTaskList ( unit ) ;
74108: LD_ADDR_VAR 0 7
74112: PUSH
74113: LD_VAR 0 1
74117: PPUSH
74118: CALL_OW 437
74122: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74123: LD_VAR 0 7
74127: NOT
74128: PUSH
74129: LD_VAR 0 1
74133: PPUSH
74134: LD_VAR 0 2
74138: PPUSH
74139: CALL_OW 308
74143: NOT
74144: AND
74145: IFFALSE 74149
// exit ;
74147: GO 74267
// if IsInArea ( unit , area ) then
74149: LD_VAR 0 1
74153: PPUSH
74154: LD_VAR 0 2
74158: PPUSH
74159: CALL_OW 308
74163: IFFALSE 74181
// begin ComMoveToArea ( unit , goAway ) ;
74165: LD_VAR 0 1
74169: PPUSH
74170: LD_VAR 0 3
74174: PPUSH
74175: CALL_OW 113
// exit ;
74179: GO 74267
// end ; if task [ 1 ] [ 1 ] <> M then
74181: LD_VAR 0 7
74185: PUSH
74186: LD_INT 1
74188: ARRAY
74189: PUSH
74190: LD_INT 1
74192: ARRAY
74193: PUSH
74194: LD_STRING M
74196: NONEQUAL
74197: IFFALSE 74201
// exit ;
74199: GO 74267
// x := task [ 1 ] [ 2 ] ;
74201: LD_ADDR_VAR 0 5
74205: PUSH
74206: LD_VAR 0 7
74210: PUSH
74211: LD_INT 1
74213: ARRAY
74214: PUSH
74215: LD_INT 2
74217: ARRAY
74218: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74219: LD_ADDR_VAR 0 6
74223: PUSH
74224: LD_VAR 0 7
74228: PUSH
74229: LD_INT 1
74231: ARRAY
74232: PUSH
74233: LD_INT 3
74235: ARRAY
74236: ST_TO_ADDR
// if InArea ( x , y , area ) then
74237: LD_VAR 0 5
74241: PPUSH
74242: LD_VAR 0 6
74246: PPUSH
74247: LD_VAR 0 2
74251: PPUSH
74252: CALL_OW 309
74256: IFFALSE 74267
// ComStop ( unit ) ;
74258: LD_VAR 0 1
74262: PPUSH
74263: CALL_OW 141
// end ;
74267: LD_VAR 0 4
74271: RET
// export function Abs ( value ) ; begin
74272: LD_INT 0
74274: PPUSH
// result := value ;
74275: LD_ADDR_VAR 0 2
74279: PUSH
74280: LD_VAR 0 1
74284: ST_TO_ADDR
// if value < 0 then
74285: LD_VAR 0 1
74289: PUSH
74290: LD_INT 0
74292: LESS
74293: IFFALSE 74310
// result := value * - 1 ;
74295: LD_ADDR_VAR 0 2
74299: PUSH
74300: LD_VAR 0 1
74304: PUSH
74305: LD_INT 1
74307: NEG
74308: MUL
74309: ST_TO_ADDR
// end ;
74310: LD_VAR 0 2
74314: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74315: LD_INT 0
74317: PPUSH
74318: PPUSH
74319: PPUSH
74320: PPUSH
74321: PPUSH
74322: PPUSH
74323: PPUSH
74324: PPUSH
// if not unit or not building then
74325: LD_VAR 0 1
74329: NOT
74330: PUSH
74331: LD_VAR 0 2
74335: NOT
74336: OR
74337: IFFALSE 74341
// exit ;
74339: GO 74567
// x := GetX ( building ) ;
74341: LD_ADDR_VAR 0 4
74345: PUSH
74346: LD_VAR 0 2
74350: PPUSH
74351: CALL_OW 250
74355: ST_TO_ADDR
// y := GetY ( building ) ;
74356: LD_ADDR_VAR 0 6
74360: PUSH
74361: LD_VAR 0 2
74365: PPUSH
74366: CALL_OW 251
74370: ST_TO_ADDR
// d := GetDir ( building ) ;
74371: LD_ADDR_VAR 0 8
74375: PUSH
74376: LD_VAR 0 2
74380: PPUSH
74381: CALL_OW 254
74385: ST_TO_ADDR
// r := 4 ;
74386: LD_ADDR_VAR 0 9
74390: PUSH
74391: LD_INT 4
74393: ST_TO_ADDR
// for i := 1 to 5 do
74394: LD_ADDR_VAR 0 10
74398: PUSH
74399: DOUBLE
74400: LD_INT 1
74402: DEC
74403: ST_TO_ADDR
74404: LD_INT 5
74406: PUSH
74407: FOR_TO
74408: IFFALSE 74565
// begin _x := ShiftX ( x , d , r + i ) ;
74410: LD_ADDR_VAR 0 5
74414: PUSH
74415: LD_VAR 0 4
74419: PPUSH
74420: LD_VAR 0 8
74424: PPUSH
74425: LD_VAR 0 9
74429: PUSH
74430: LD_VAR 0 10
74434: PLUS
74435: PPUSH
74436: CALL_OW 272
74440: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74441: LD_ADDR_VAR 0 7
74445: PUSH
74446: LD_VAR 0 6
74450: PPUSH
74451: LD_VAR 0 8
74455: PPUSH
74456: LD_VAR 0 9
74460: PUSH
74461: LD_VAR 0 10
74465: PLUS
74466: PPUSH
74467: CALL_OW 273
74471: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74472: LD_VAR 0 5
74476: PPUSH
74477: LD_VAR 0 7
74481: PPUSH
74482: CALL_OW 488
74486: PUSH
74487: LD_VAR 0 5
74491: PPUSH
74492: LD_VAR 0 7
74496: PPUSH
74497: CALL_OW 428
74501: PPUSH
74502: CALL_OW 247
74506: PUSH
74507: LD_INT 3
74509: PUSH
74510: LD_INT 2
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: IN
74517: NOT
74518: AND
74519: IFFALSE 74563
// begin ComMoveXY ( unit , _x , _y ) ;
74521: LD_VAR 0 1
74525: PPUSH
74526: LD_VAR 0 5
74530: PPUSH
74531: LD_VAR 0 7
74535: PPUSH
74536: CALL_OW 111
// result := [ _x , _y ] ;
74540: LD_ADDR_VAR 0 3
74544: PUSH
74545: LD_VAR 0 5
74549: PUSH
74550: LD_VAR 0 7
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: ST_TO_ADDR
// exit ;
74559: POP
74560: POP
74561: GO 74567
// end ; end ;
74563: GO 74407
74565: POP
74566: POP
// end ;
74567: LD_VAR 0 3
74571: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74572: LD_INT 0
74574: PPUSH
74575: PPUSH
74576: PPUSH
// result := 0 ;
74577: LD_ADDR_VAR 0 3
74581: PUSH
74582: LD_INT 0
74584: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74585: LD_VAR 0 1
74589: PUSH
74590: LD_INT 0
74592: LESS
74593: PUSH
74594: LD_VAR 0 1
74598: PUSH
74599: LD_INT 8
74601: GREATER
74602: OR
74603: PUSH
74604: LD_VAR 0 2
74608: PUSH
74609: LD_INT 0
74611: LESS
74612: OR
74613: PUSH
74614: LD_VAR 0 2
74618: PUSH
74619: LD_INT 8
74621: GREATER
74622: OR
74623: IFFALSE 74627
// exit ;
74625: GO 74702
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74627: LD_ADDR_VAR 0 4
74631: PUSH
74632: LD_INT 22
74634: PUSH
74635: LD_VAR 0 2
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: PPUSH
74644: CALL_OW 69
74648: PUSH
74649: FOR_IN
74650: IFFALSE 74700
// begin un := UnitShoot ( i ) ;
74652: LD_ADDR_VAR 0 5
74656: PUSH
74657: LD_VAR 0 4
74661: PPUSH
74662: CALL_OW 504
74666: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74667: LD_VAR 0 5
74671: PPUSH
74672: CALL_OW 255
74676: PUSH
74677: LD_VAR 0 1
74681: EQUAL
74682: IFFALSE 74698
// begin result := un ;
74684: LD_ADDR_VAR 0 3
74688: PUSH
74689: LD_VAR 0 5
74693: ST_TO_ADDR
// exit ;
74694: POP
74695: POP
74696: GO 74702
// end ; end ;
74698: GO 74649
74700: POP
74701: POP
// end ;
74702: LD_VAR 0 3
74706: RET
// export function GetCargoBay ( units ) ; begin
74707: LD_INT 0
74709: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74710: LD_ADDR_VAR 0 2
74714: PUSH
74715: LD_VAR 0 1
74719: PPUSH
74720: LD_INT 2
74722: PUSH
74723: LD_INT 34
74725: PUSH
74726: LD_INT 12
74728: PUSH
74729: EMPTY
74730: LIST
74731: LIST
74732: PUSH
74733: LD_INT 34
74735: PUSH
74736: LD_INT 51
74738: PUSH
74739: EMPTY
74740: LIST
74741: LIST
74742: PUSH
74743: LD_INT 34
74745: PUSH
74746: LD_INT 32
74748: PUSH
74749: EMPTY
74750: LIST
74751: LIST
74752: PUSH
74753: LD_INT 34
74755: PUSH
74756: LD_EXP 44
74760: PUSH
74761: EMPTY
74762: LIST
74763: LIST
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: LIST
74769: LIST
74770: LIST
74771: PPUSH
74772: CALL_OW 72
74776: ST_TO_ADDR
// end ;
74777: LD_VAR 0 2
74781: RET
// export function Negate ( value ) ; begin
74782: LD_INT 0
74784: PPUSH
// result := not value ;
74785: LD_ADDR_VAR 0 2
74789: PUSH
74790: LD_VAR 0 1
74794: NOT
74795: ST_TO_ADDR
// end ;
74796: LD_VAR 0 2
74800: RET
// export function Inc ( value ) ; begin
74801: LD_INT 0
74803: PPUSH
// result := value + 1 ;
74804: LD_ADDR_VAR 0 2
74808: PUSH
74809: LD_VAR 0 1
74813: PUSH
74814: LD_INT 1
74816: PLUS
74817: ST_TO_ADDR
// end ;
74818: LD_VAR 0 2
74822: RET
// export function Dec ( value ) ; begin
74823: LD_INT 0
74825: PPUSH
// result := value - 1 ;
74826: LD_ADDR_VAR 0 2
74830: PUSH
74831: LD_VAR 0 1
74835: PUSH
74836: LD_INT 1
74838: MINUS
74839: ST_TO_ADDR
// end ;
74840: LD_VAR 0 2
74844: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74845: LD_INT 0
74847: PPUSH
74848: PPUSH
74849: PPUSH
74850: PPUSH
74851: PPUSH
74852: PPUSH
74853: PPUSH
74854: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74855: LD_VAR 0 1
74859: PPUSH
74860: LD_VAR 0 2
74864: PPUSH
74865: CALL_OW 488
74869: NOT
74870: PUSH
74871: LD_VAR 0 3
74875: PPUSH
74876: LD_VAR 0 4
74880: PPUSH
74881: CALL_OW 488
74885: NOT
74886: OR
74887: IFFALSE 74900
// begin result := - 1 ;
74889: LD_ADDR_VAR 0 5
74893: PUSH
74894: LD_INT 1
74896: NEG
74897: ST_TO_ADDR
// exit ;
74898: GO 75135
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74900: LD_ADDR_VAR 0 12
74904: PUSH
74905: LD_VAR 0 1
74909: PPUSH
74910: LD_VAR 0 2
74914: PPUSH
74915: LD_VAR 0 3
74919: PPUSH
74920: LD_VAR 0 4
74924: PPUSH
74925: CALL 73983 0 4
74929: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74930: LD_ADDR_VAR 0 11
74934: PUSH
74935: LD_VAR 0 1
74939: PPUSH
74940: LD_VAR 0 2
74944: PPUSH
74945: LD_VAR 0 12
74949: PUSH
74950: LD_INT 1
74952: ARRAY
74953: PPUSH
74954: LD_VAR 0 12
74958: PUSH
74959: LD_INT 2
74961: ARRAY
74962: PPUSH
74963: CALL_OW 298
74967: ST_TO_ADDR
// distance := 9999 ;
74968: LD_ADDR_VAR 0 10
74972: PUSH
74973: LD_INT 9999
74975: ST_TO_ADDR
// for i := 0 to 5 do
74976: LD_ADDR_VAR 0 6
74980: PUSH
74981: DOUBLE
74982: LD_INT 0
74984: DEC
74985: ST_TO_ADDR
74986: LD_INT 5
74988: PUSH
74989: FOR_TO
74990: IFFALSE 75133
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74992: LD_ADDR_VAR 0 7
74996: PUSH
74997: LD_VAR 0 1
75001: PPUSH
75002: LD_VAR 0 6
75006: PPUSH
75007: LD_VAR 0 11
75011: PPUSH
75012: CALL_OW 272
75016: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75017: LD_ADDR_VAR 0 8
75021: PUSH
75022: LD_VAR 0 2
75026: PPUSH
75027: LD_VAR 0 6
75031: PPUSH
75032: LD_VAR 0 11
75036: PPUSH
75037: CALL_OW 273
75041: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75042: LD_VAR 0 7
75046: PPUSH
75047: LD_VAR 0 8
75051: PPUSH
75052: CALL_OW 488
75056: NOT
75057: IFFALSE 75061
// continue ;
75059: GO 74989
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75061: LD_ADDR_VAR 0 9
75065: PUSH
75066: LD_VAR 0 12
75070: PUSH
75071: LD_INT 1
75073: ARRAY
75074: PPUSH
75075: LD_VAR 0 12
75079: PUSH
75080: LD_INT 2
75082: ARRAY
75083: PPUSH
75084: LD_VAR 0 7
75088: PPUSH
75089: LD_VAR 0 8
75093: PPUSH
75094: CALL_OW 298
75098: ST_TO_ADDR
// if tmp < distance then
75099: LD_VAR 0 9
75103: PUSH
75104: LD_VAR 0 10
75108: LESS
75109: IFFALSE 75131
// begin result := i ;
75111: LD_ADDR_VAR 0 5
75115: PUSH
75116: LD_VAR 0 6
75120: ST_TO_ADDR
// distance := tmp ;
75121: LD_ADDR_VAR 0 10
75125: PUSH
75126: LD_VAR 0 9
75130: ST_TO_ADDR
// end ; end ;
75131: GO 74989
75133: POP
75134: POP
// end ;
75135: LD_VAR 0 5
75139: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75140: LD_INT 0
75142: PPUSH
75143: PPUSH
// if not driver or not IsInUnit ( driver ) then
75144: LD_VAR 0 1
75148: NOT
75149: PUSH
75150: LD_VAR 0 1
75154: PPUSH
75155: CALL_OW 310
75159: NOT
75160: OR
75161: IFFALSE 75165
// exit ;
75163: GO 75255
// vehicle := IsInUnit ( driver ) ;
75165: LD_ADDR_VAR 0 3
75169: PUSH
75170: LD_VAR 0 1
75174: PPUSH
75175: CALL_OW 310
75179: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75180: LD_VAR 0 1
75184: PPUSH
75185: LD_STRING \
75187: PUSH
75188: LD_INT 0
75190: PUSH
75191: LD_INT 0
75193: PUSH
75194: LD_INT 0
75196: PUSH
75197: LD_INT 0
75199: PUSH
75200: LD_INT 0
75202: PUSH
75203: LD_INT 0
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: PUSH
75215: LD_STRING E
75217: PUSH
75218: LD_INT 0
75220: PUSH
75221: LD_INT 0
75223: PUSH
75224: LD_VAR 0 3
75228: PUSH
75229: LD_INT 0
75231: PUSH
75232: LD_INT 0
75234: PUSH
75235: LD_INT 0
75237: PUSH
75238: EMPTY
75239: LIST
75240: LIST
75241: LIST
75242: LIST
75243: LIST
75244: LIST
75245: LIST
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: PPUSH
75251: CALL_OW 446
// end ;
75255: LD_VAR 0 2
75259: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75260: LD_INT 0
75262: PPUSH
75263: PPUSH
// if not driver or not IsInUnit ( driver ) then
75264: LD_VAR 0 1
75268: NOT
75269: PUSH
75270: LD_VAR 0 1
75274: PPUSH
75275: CALL_OW 310
75279: NOT
75280: OR
75281: IFFALSE 75285
// exit ;
75283: GO 75375
// vehicle := IsInUnit ( driver ) ;
75285: LD_ADDR_VAR 0 3
75289: PUSH
75290: LD_VAR 0 1
75294: PPUSH
75295: CALL_OW 310
75299: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75300: LD_VAR 0 1
75304: PPUSH
75305: LD_STRING \
75307: PUSH
75308: LD_INT 0
75310: PUSH
75311: LD_INT 0
75313: PUSH
75314: LD_INT 0
75316: PUSH
75317: LD_INT 0
75319: PUSH
75320: LD_INT 0
75322: PUSH
75323: LD_INT 0
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: LIST
75330: LIST
75331: LIST
75332: LIST
75333: LIST
75334: PUSH
75335: LD_STRING E
75337: PUSH
75338: LD_INT 0
75340: PUSH
75341: LD_INT 0
75343: PUSH
75344: LD_VAR 0 3
75348: PUSH
75349: LD_INT 0
75351: PUSH
75352: LD_INT 0
75354: PUSH
75355: LD_INT 0
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: PPUSH
75371: CALL_OW 447
// end ;
75375: LD_VAR 0 2
75379: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75380: LD_INT 0
75382: PPUSH
75383: PPUSH
75384: PPUSH
// tmp := [ ] ;
75385: LD_ADDR_VAR 0 5
75389: PUSH
75390: EMPTY
75391: ST_TO_ADDR
// for i in units do
75392: LD_ADDR_VAR 0 4
75396: PUSH
75397: LD_VAR 0 1
75401: PUSH
75402: FOR_IN
75403: IFFALSE 75441
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75405: LD_ADDR_VAR 0 5
75409: PUSH
75410: LD_VAR 0 5
75414: PPUSH
75415: LD_VAR 0 5
75419: PUSH
75420: LD_INT 1
75422: PLUS
75423: PPUSH
75424: LD_VAR 0 4
75428: PPUSH
75429: CALL_OW 256
75433: PPUSH
75434: CALL_OW 2
75438: ST_TO_ADDR
75439: GO 75402
75441: POP
75442: POP
// if not tmp then
75443: LD_VAR 0 5
75447: NOT
75448: IFFALSE 75452
// exit ;
75450: GO 75500
// if asc then
75452: LD_VAR 0 2
75456: IFFALSE 75480
// result := SortListByListAsc ( units , tmp ) else
75458: LD_ADDR_VAR 0 3
75462: PUSH
75463: LD_VAR 0 1
75467: PPUSH
75468: LD_VAR 0 5
75472: PPUSH
75473: CALL_OW 76
75477: ST_TO_ADDR
75478: GO 75500
// result := SortListByListDesc ( units , tmp ) ;
75480: LD_ADDR_VAR 0 3
75484: PUSH
75485: LD_VAR 0 1
75489: PPUSH
75490: LD_VAR 0 5
75494: PPUSH
75495: CALL_OW 77
75499: ST_TO_ADDR
// end ;
75500: LD_VAR 0 3
75504: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75505: LD_INT 0
75507: PPUSH
75508: PPUSH
// task := GetTaskList ( mech ) ;
75509: LD_ADDR_VAR 0 4
75513: PUSH
75514: LD_VAR 0 1
75518: PPUSH
75519: CALL_OW 437
75523: ST_TO_ADDR
// if not task then
75524: LD_VAR 0 4
75528: NOT
75529: IFFALSE 75533
// exit ;
75531: GO 75575
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75533: LD_ADDR_VAR 0 3
75537: PUSH
75538: LD_VAR 0 4
75542: PUSH
75543: LD_INT 1
75545: ARRAY
75546: PUSH
75547: LD_INT 1
75549: ARRAY
75550: PUSH
75551: LD_STRING r
75553: EQUAL
75554: PUSH
75555: LD_VAR 0 4
75559: PUSH
75560: LD_INT 1
75562: ARRAY
75563: PUSH
75564: LD_INT 4
75566: ARRAY
75567: PUSH
75568: LD_VAR 0 2
75572: EQUAL
75573: AND
75574: ST_TO_ADDR
// end ;
75575: LD_VAR 0 3
75579: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75580: LD_INT 0
75582: PPUSH
// SetDir ( unit , d ) ;
75583: LD_VAR 0 1
75587: PPUSH
75588: LD_VAR 0 4
75592: PPUSH
75593: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75597: LD_VAR 0 1
75601: PPUSH
75602: LD_VAR 0 2
75606: PPUSH
75607: LD_VAR 0 3
75611: PPUSH
75612: LD_VAR 0 5
75616: PPUSH
75617: CALL_OW 48
// end ;
75621: LD_VAR 0 6
75625: RET
// export function ToNaturalNumber ( number ) ; begin
75626: LD_INT 0
75628: PPUSH
// result := number div 1 ;
75629: LD_ADDR_VAR 0 2
75633: PUSH
75634: LD_VAR 0 1
75638: PUSH
75639: LD_INT 1
75641: DIV
75642: ST_TO_ADDR
// if number < 0 then
75643: LD_VAR 0 1
75647: PUSH
75648: LD_INT 0
75650: LESS
75651: IFFALSE 75661
// result := 0 ;
75653: LD_ADDR_VAR 0 2
75657: PUSH
75658: LD_INT 0
75660: ST_TO_ADDR
// end ;
75661: LD_VAR 0 2
75665: RET
// export function SortByClass ( units , class ) ; var un ; begin
75666: LD_INT 0
75668: PPUSH
75669: PPUSH
// if not units or not class then
75670: LD_VAR 0 1
75674: NOT
75675: PUSH
75676: LD_VAR 0 2
75680: NOT
75681: OR
75682: IFFALSE 75686
// exit ;
75684: GO 75781
// result := [ ] ;
75686: LD_ADDR_VAR 0 3
75690: PUSH
75691: EMPTY
75692: ST_TO_ADDR
// for un in units do
75693: LD_ADDR_VAR 0 4
75697: PUSH
75698: LD_VAR 0 1
75702: PUSH
75703: FOR_IN
75704: IFFALSE 75779
// if GetClass ( un ) = class then
75706: LD_VAR 0 4
75710: PPUSH
75711: CALL_OW 257
75715: PUSH
75716: LD_VAR 0 2
75720: EQUAL
75721: IFFALSE 75748
// result := Insert ( result , 1 , un ) else
75723: LD_ADDR_VAR 0 3
75727: PUSH
75728: LD_VAR 0 3
75732: PPUSH
75733: LD_INT 1
75735: PPUSH
75736: LD_VAR 0 4
75740: PPUSH
75741: CALL_OW 2
75745: ST_TO_ADDR
75746: GO 75777
// result := Replace ( result , result + 1 , un ) ;
75748: LD_ADDR_VAR 0 3
75752: PUSH
75753: LD_VAR 0 3
75757: PPUSH
75758: LD_VAR 0 3
75762: PUSH
75763: LD_INT 1
75765: PLUS
75766: PPUSH
75767: LD_VAR 0 4
75771: PPUSH
75772: CALL_OW 1
75776: ST_TO_ADDR
75777: GO 75703
75779: POP
75780: POP
// end ;
75781: LD_VAR 0 3
75785: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75786: LD_INT 0
75788: PPUSH
75789: PPUSH
75790: PPUSH
75791: PPUSH
75792: PPUSH
75793: PPUSH
75794: PPUSH
// result := [ ] ;
75795: LD_ADDR_VAR 0 4
75799: PUSH
75800: EMPTY
75801: ST_TO_ADDR
// if x - r < 0 then
75802: LD_VAR 0 1
75806: PUSH
75807: LD_VAR 0 3
75811: MINUS
75812: PUSH
75813: LD_INT 0
75815: LESS
75816: IFFALSE 75828
// min_x := 0 else
75818: LD_ADDR_VAR 0 8
75822: PUSH
75823: LD_INT 0
75825: ST_TO_ADDR
75826: GO 75844
// min_x := x - r ;
75828: LD_ADDR_VAR 0 8
75832: PUSH
75833: LD_VAR 0 1
75837: PUSH
75838: LD_VAR 0 3
75842: MINUS
75843: ST_TO_ADDR
// if y - r < 0 then
75844: LD_VAR 0 2
75848: PUSH
75849: LD_VAR 0 3
75853: MINUS
75854: PUSH
75855: LD_INT 0
75857: LESS
75858: IFFALSE 75870
// min_y := 0 else
75860: LD_ADDR_VAR 0 7
75864: PUSH
75865: LD_INT 0
75867: ST_TO_ADDR
75868: GO 75886
// min_y := y - r ;
75870: LD_ADDR_VAR 0 7
75874: PUSH
75875: LD_VAR 0 2
75879: PUSH
75880: LD_VAR 0 3
75884: MINUS
75885: ST_TO_ADDR
// max_x := x + r ;
75886: LD_ADDR_VAR 0 9
75890: PUSH
75891: LD_VAR 0 1
75895: PUSH
75896: LD_VAR 0 3
75900: PLUS
75901: ST_TO_ADDR
// max_y := y + r ;
75902: LD_ADDR_VAR 0 10
75906: PUSH
75907: LD_VAR 0 2
75911: PUSH
75912: LD_VAR 0 3
75916: PLUS
75917: ST_TO_ADDR
// for _x = min_x to max_x do
75918: LD_ADDR_VAR 0 5
75922: PUSH
75923: DOUBLE
75924: LD_VAR 0 8
75928: DEC
75929: ST_TO_ADDR
75930: LD_VAR 0 9
75934: PUSH
75935: FOR_TO
75936: IFFALSE 76037
// for _y = min_y to max_y do
75938: LD_ADDR_VAR 0 6
75942: PUSH
75943: DOUBLE
75944: LD_VAR 0 7
75948: DEC
75949: ST_TO_ADDR
75950: LD_VAR 0 10
75954: PUSH
75955: FOR_TO
75956: IFFALSE 76033
// begin if not ValidHex ( _x , _y ) then
75958: LD_VAR 0 5
75962: PPUSH
75963: LD_VAR 0 6
75967: PPUSH
75968: CALL_OW 488
75972: NOT
75973: IFFALSE 75977
// continue ;
75975: GO 75955
// if GetResourceTypeXY ( _x , _y ) then
75977: LD_VAR 0 5
75981: PPUSH
75982: LD_VAR 0 6
75986: PPUSH
75987: CALL_OW 283
75991: IFFALSE 76031
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75993: LD_ADDR_VAR 0 4
75997: PUSH
75998: LD_VAR 0 4
76002: PPUSH
76003: LD_VAR 0 4
76007: PUSH
76008: LD_INT 1
76010: PLUS
76011: PPUSH
76012: LD_VAR 0 5
76016: PUSH
76017: LD_VAR 0 6
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: PPUSH
76026: CALL_OW 1
76030: ST_TO_ADDR
// end ;
76031: GO 75955
76033: POP
76034: POP
76035: GO 75935
76037: POP
76038: POP
// end ;
76039: LD_VAR 0 4
76043: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76044: LD_INT 0
76046: PPUSH
76047: PPUSH
76048: PPUSH
76049: PPUSH
76050: PPUSH
76051: PPUSH
76052: PPUSH
76053: PPUSH
// if not units then
76054: LD_VAR 0 1
76058: NOT
76059: IFFALSE 76063
// exit ;
76061: GO 76488
// result := UnitFilter ( units , [ f_ok ] ) ;
76063: LD_ADDR_VAR 0 3
76067: PUSH
76068: LD_VAR 0 1
76072: PPUSH
76073: LD_INT 50
76075: PUSH
76076: EMPTY
76077: LIST
76078: PPUSH
76079: CALL_OW 72
76083: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76084: LD_ADDR_VAR 0 8
76088: PUSH
76089: LD_VAR 0 1
76093: PUSH
76094: LD_INT 1
76096: ARRAY
76097: PPUSH
76098: CALL_OW 255
76102: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
76103: LD_ADDR_VAR 0 10
76107: PUSH
76108: LD_INT 29
76110: PUSH
76111: LD_EXP 47
76115: PUSH
76116: EMPTY
76117: LIST
76118: LIST
76119: ST_TO_ADDR
// if not result then
76120: LD_VAR 0 3
76124: NOT
76125: IFFALSE 76129
// exit ;
76127: GO 76488
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76129: LD_ADDR_VAR 0 5
76133: PUSH
76134: LD_INT 81
76136: PUSH
76137: LD_VAR 0 8
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: PPUSH
76146: CALL_OW 69
76150: ST_TO_ADDR
// for i in result do
76151: LD_ADDR_VAR 0 4
76155: PUSH
76156: LD_VAR 0 3
76160: PUSH
76161: FOR_IN
76162: IFFALSE 76486
// begin tag := GetTag ( i ) + 1 ;
76164: LD_ADDR_VAR 0 9
76168: PUSH
76169: LD_VAR 0 4
76173: PPUSH
76174: CALL_OW 110
76178: PUSH
76179: LD_INT 1
76181: PLUS
76182: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76183: LD_ADDR_VAR 0 7
76187: PUSH
76188: LD_VAR 0 4
76192: PPUSH
76193: CALL_OW 250
76197: PPUSH
76198: LD_VAR 0 4
76202: PPUSH
76203: CALL_OW 251
76207: PPUSH
76208: LD_INT 6
76210: PPUSH
76211: CALL 75786 0 3
76215: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76216: LD_VAR 0 7
76220: PUSH
76221: LD_VAR 0 4
76225: PPUSH
76226: CALL_OW 264
76230: PUSH
76231: LD_VAR 0 10
76235: IN
76236: NOT
76237: AND
76238: IFFALSE 76277
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76240: LD_VAR 0 4
76244: PPUSH
76245: LD_VAR 0 7
76249: PUSH
76250: LD_INT 1
76252: ARRAY
76253: PUSH
76254: LD_INT 1
76256: ARRAY
76257: PPUSH
76258: LD_VAR 0 7
76262: PUSH
76263: LD_INT 1
76265: ARRAY
76266: PUSH
76267: LD_INT 2
76269: ARRAY
76270: PPUSH
76271: CALL_OW 116
76275: GO 76484
// if path > tag then
76277: LD_VAR 0 2
76281: PUSH
76282: LD_VAR 0 9
76286: GREATER
76287: IFFALSE 76454
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
76289: LD_ADDR_VAR 0 6
76293: PUSH
76294: LD_VAR 0 5
76298: PPUSH
76299: LD_INT 91
76301: PUSH
76302: LD_VAR 0 4
76306: PUSH
76307: LD_INT 12
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: LIST
76314: PPUSH
76315: CALL_OW 72
76319: ST_TO_ADDR
// if nearEnemy then
76320: LD_VAR 0 6
76324: IFFALSE 76352
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76326: LD_VAR 0 4
76330: PPUSH
76331: LD_VAR 0 6
76335: PPUSH
76336: LD_VAR 0 4
76340: PPUSH
76341: CALL_OW 74
76345: PPUSH
76346: CALL_OW 115
76350: GO 76452
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76352: LD_VAR 0 4
76356: PPUSH
76357: LD_VAR 0 2
76361: PUSH
76362: LD_VAR 0 9
76366: ARRAY
76367: PUSH
76368: LD_INT 1
76370: ARRAY
76371: PPUSH
76372: LD_VAR 0 2
76376: PUSH
76377: LD_VAR 0 9
76381: ARRAY
76382: PUSH
76383: LD_INT 2
76385: ARRAY
76386: PPUSH
76387: CALL_OW 297
76391: PUSH
76392: LD_INT 6
76394: GREATER
76395: IFFALSE 76438
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76397: LD_VAR 0 4
76401: PPUSH
76402: LD_VAR 0 2
76406: PUSH
76407: LD_VAR 0 9
76411: ARRAY
76412: PUSH
76413: LD_INT 1
76415: ARRAY
76416: PPUSH
76417: LD_VAR 0 2
76421: PUSH
76422: LD_VAR 0 9
76426: ARRAY
76427: PUSH
76428: LD_INT 2
76430: ARRAY
76431: PPUSH
76432: CALL_OW 114
76436: GO 76452
// SetTag ( i , tag ) ;
76438: LD_VAR 0 4
76442: PPUSH
76443: LD_VAR 0 9
76447: PPUSH
76448: CALL_OW 109
// end else
76452: GO 76484
// if enemy then
76454: LD_VAR 0 5
76458: IFFALSE 76484
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76460: LD_VAR 0 4
76464: PPUSH
76465: LD_VAR 0 5
76469: PPUSH
76470: LD_VAR 0 4
76474: PPUSH
76475: CALL_OW 74
76479: PPUSH
76480: CALL_OW 115
// end ;
76484: GO 76161
76486: POP
76487: POP
// end ;
76488: LD_VAR 0 3
76492: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76493: LD_INT 0
76495: PPUSH
76496: PPUSH
76497: PPUSH
// if not unit or IsInUnit ( unit ) then
76498: LD_VAR 0 1
76502: NOT
76503: PUSH
76504: LD_VAR 0 1
76508: PPUSH
76509: CALL_OW 310
76513: OR
76514: IFFALSE 76518
// exit ;
76516: GO 76609
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76518: LD_ADDR_VAR 0 4
76522: PUSH
76523: LD_VAR 0 1
76527: PPUSH
76528: CALL_OW 250
76532: PPUSH
76533: LD_VAR 0 2
76537: PPUSH
76538: LD_INT 1
76540: PPUSH
76541: CALL_OW 272
76545: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76546: LD_ADDR_VAR 0 5
76550: PUSH
76551: LD_VAR 0 1
76555: PPUSH
76556: CALL_OW 251
76560: PPUSH
76561: LD_VAR 0 2
76565: PPUSH
76566: LD_INT 1
76568: PPUSH
76569: CALL_OW 273
76573: ST_TO_ADDR
// if ValidHex ( x , y ) then
76574: LD_VAR 0 4
76578: PPUSH
76579: LD_VAR 0 5
76583: PPUSH
76584: CALL_OW 488
76588: IFFALSE 76609
// ComTurnXY ( unit , x , y ) ;
76590: LD_VAR 0 1
76594: PPUSH
76595: LD_VAR 0 4
76599: PPUSH
76600: LD_VAR 0 5
76604: PPUSH
76605: CALL_OW 118
// end ;
76609: LD_VAR 0 3
76613: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76614: LD_INT 0
76616: PPUSH
76617: PPUSH
// result := false ;
76618: LD_ADDR_VAR 0 3
76622: PUSH
76623: LD_INT 0
76625: ST_TO_ADDR
// if not units then
76626: LD_VAR 0 2
76630: NOT
76631: IFFALSE 76635
// exit ;
76633: GO 76680
// for i in units do
76635: LD_ADDR_VAR 0 4
76639: PUSH
76640: LD_VAR 0 2
76644: PUSH
76645: FOR_IN
76646: IFFALSE 76678
// if See ( side , i ) then
76648: LD_VAR 0 1
76652: PPUSH
76653: LD_VAR 0 4
76657: PPUSH
76658: CALL_OW 292
76662: IFFALSE 76676
// begin result := true ;
76664: LD_ADDR_VAR 0 3
76668: PUSH
76669: LD_INT 1
76671: ST_TO_ADDR
// exit ;
76672: POP
76673: POP
76674: GO 76680
// end ;
76676: GO 76645
76678: POP
76679: POP
// end ;
76680: LD_VAR 0 3
76684: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76685: LD_INT 0
76687: PPUSH
76688: PPUSH
76689: PPUSH
76690: PPUSH
// if not unit or not points then
76691: LD_VAR 0 1
76695: NOT
76696: PUSH
76697: LD_VAR 0 2
76701: NOT
76702: OR
76703: IFFALSE 76707
// exit ;
76705: GO 76797
// dist := 99999 ;
76707: LD_ADDR_VAR 0 5
76711: PUSH
76712: LD_INT 99999
76714: ST_TO_ADDR
// for i in points do
76715: LD_ADDR_VAR 0 4
76719: PUSH
76720: LD_VAR 0 2
76724: PUSH
76725: FOR_IN
76726: IFFALSE 76795
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76728: LD_ADDR_VAR 0 6
76732: PUSH
76733: LD_VAR 0 1
76737: PPUSH
76738: LD_VAR 0 4
76742: PUSH
76743: LD_INT 1
76745: ARRAY
76746: PPUSH
76747: LD_VAR 0 4
76751: PUSH
76752: LD_INT 2
76754: ARRAY
76755: PPUSH
76756: CALL_OW 297
76760: ST_TO_ADDR
// if tmpDist < dist then
76761: LD_VAR 0 6
76765: PUSH
76766: LD_VAR 0 5
76770: LESS
76771: IFFALSE 76793
// begin result := i ;
76773: LD_ADDR_VAR 0 3
76777: PUSH
76778: LD_VAR 0 4
76782: ST_TO_ADDR
// dist := tmpDist ;
76783: LD_ADDR_VAR 0 5
76787: PUSH
76788: LD_VAR 0 6
76792: ST_TO_ADDR
// end ; end ;
76793: GO 76725
76795: POP
76796: POP
// end ; end_of_file
76797: LD_VAR 0 3
76801: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76802: LD_VAR 0 1
76806: PUSH
76807: LD_INT 200
76809: DOUBLE
76810: GREATEREQUAL
76811: IFFALSE 76819
76813: LD_INT 299
76815: DOUBLE
76816: LESSEQUAL
76817: IFTRUE 76821
76819: GO 76853
76821: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76822: LD_VAR 0 1
76826: PPUSH
76827: LD_VAR 0 2
76831: PPUSH
76832: LD_VAR 0 3
76836: PPUSH
76837: LD_VAR 0 4
76841: PPUSH
76842: LD_VAR 0 5
76846: PPUSH
76847: CALL 32828 0 5
76851: GO 76930
76853: LD_INT 300
76855: DOUBLE
76856: GREATEREQUAL
76857: IFFALSE 76865
76859: LD_INT 399
76861: DOUBLE
76862: LESSEQUAL
76863: IFTRUE 76867
76865: GO 76929
76867: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76868: LD_VAR 0 1
76872: PPUSH
76873: LD_VAR 0 2
76877: PPUSH
76878: LD_VAR 0 3
76882: PPUSH
76883: LD_VAR 0 4
76887: PPUSH
76888: LD_VAR 0 5
76892: PPUSH
76893: LD_VAR 0 6
76897: PPUSH
76898: LD_VAR 0 7
76902: PPUSH
76903: LD_VAR 0 8
76907: PPUSH
76908: LD_VAR 0 9
76912: PPUSH
76913: LD_VAR 0 10
76917: PPUSH
76918: LD_VAR 0 11
76922: PPUSH
76923: CALL 30726 0 11
76927: GO 76930
76929: POP
// end ;
76930: PPOPN 11
76932: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76933: LD_VAR 0 1
76937: PPUSH
76938: LD_VAR 0 2
76942: PPUSH
76943: LD_VAR 0 3
76947: PPUSH
76948: LD_VAR 0 4
76952: PPUSH
76953: LD_VAR 0 5
76957: PPUSH
76958: CALL 32820 0 5
// end ; end_of_file
76962: PPOPN 5
76964: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76965: LD_VAR 0 1
76969: PPUSH
76970: LD_VAR 0 2
76974: PPUSH
76975: LD_VAR 0 3
76979: PPUSH
76980: LD_VAR 0 4
76984: PPUSH
76985: LD_VAR 0 5
76989: PPUSH
76990: LD_VAR 0 6
76994: PPUSH
76995: CALL 18921 0 6
// end ;
76999: PPOPN 6
77001: END
