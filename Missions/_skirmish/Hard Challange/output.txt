// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10090 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10220 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11627 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13856 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 2000 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 2000
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8309 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6358 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6358 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6358 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6358 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6358 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6209 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6209 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8082 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6209 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6209 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8082 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10608 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5233
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6118 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10534 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5451 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5451 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9125 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 73594 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6358 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6499 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6574 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8481 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6358 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6913 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7521 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7812 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6209 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6209 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6209 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7960 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7960 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7960 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8082 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8082 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6118 0 1
3087: PPUSH
3088: CALL 5810 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6118 0 1
3108: PPUSH
3109: CALL 5810 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11332 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5451 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3480
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3478
// if GetLives ( ru_attack_list [ i ] ) >= 250 then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: IFFALSE 3476
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3417: LD_EXP 10
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_INT 81
3430: PUSH
3431: LD_EXP 10
3435: PUSH
3436: LD_VAR 0 1
3440: ARRAY
3441: PPUSH
3442: CALL_OW 255
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: PPUSH
3456: LD_EXP 10
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 74
3471: PPUSH
3472: CALL_OW 115
3476: GO 3393
3478: POP
3479: POP
// end ; if GetBehemoth ( 3 ) then
3480: LD_INT 3
3482: PPUSH
3483: CALL 11332 0 1
3487: IFFALSE 3859
// begin if ru_mech >= 4 then
3489: LD_EXP 22
3493: PUSH
3494: LD_INT 4
3496: GREATEREQUAL
3497: IFFALSE 3548
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3499: LD_ADDR_EXP 15
3503: PUSH
3504: LD_EXP 22
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: PUSH
3513: LD_EXP 22
3517: PUSH
3518: LD_INT 2
3520: ARRAY
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 3
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 4
3538: ARRAY
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
3546: GO 3558
// ru_behemoth_mechanic := ru_mech ;
3548: LD_ADDR_EXP 15
3552: PUSH
3553: LD_EXP 22
3557: ST_TO_ADDR
// for i = 1 to ru_mech do
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: DOUBLE
3564: LD_INT 1
3566: DEC
3567: ST_TO_ADDR
3568: LD_EXP 22
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3628
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3576: LD_EXP 22
3580: PUSH
3581: LD_VAR 0 1
3585: ARRAY
3586: PPUSH
3587: CALL_OW 310
3591: PUSH
3592: LD_EXP 22
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PUSH
3603: LD_EXP 15
3607: IN
3608: AND
3609: IFFALSE 3626
// ComExitBuilding ( ru_mech [ i ] ) ;
3611: LD_EXP 22
3615: PUSH
3616: LD_VAR 0 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 122
3626: GO 3573
3628: POP
3629: POP
// if UnitsInside ( ru_fac ) = 0 then
3630: LD_INT 14
3632: PPUSH
3633: CALL_OW 313
3637: PUSH
3638: LD_INT 0
3640: EQUAL
3641: IFFALSE 3708
// begin InitHc_All ;
3643: CALL_OW 584
// for i := 1 to 5 do
3647: LD_ADDR_VAR 0 1
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 5
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3706
// begin uc_side := 3 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 3
3670: ST_TO_ADDR
// uc_nation := 3 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 3
3678: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3679: LD_INT 0
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 7
3687: PPUSH
3688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3692: CALL_OW 44
3696: PPUSH
3697: LD_INT 14
3699: PPUSH
3700: CALL_OW 52
// end ;
3704: GO 3660
3706: POP
3707: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3708: LD_INT 12
3710: PPUSH
3711: LD_INT 22
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 21
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 70
3739: PUSH
3740: LD_INT 0
3742: GREATER
3743: IFFALSE 3803
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3745: LD_INT 3
3747: PPUSH
3748: CALL 11332 0 1
3752: PUSH
3753: LD_INT 1
3755: ARRAY
3756: PPUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 34
3769: PUSH
3770: LD_INT 49
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PPUSH
3786: LD_EXP 15
3790: PPUSH
3791: LD_INT 97
3793: PPUSH
3794: LD_INT 9
3796: PPUSH
3797: CALL 10829 0 5
3801: GO 3859
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3803: LD_INT 3
3805: PPUSH
3806: CALL 11332 0 1
3810: PUSH
3811: LD_INT 1
3813: ARRAY
3814: PPUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 49
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: PPUSH
3839: CALL_OW 69
3843: PPUSH
3844: LD_EXP 15
3848: PPUSH
3849: LD_INT 153
3851: PPUSH
3852: LD_INT 102
3854: PPUSH
3855: CALL 10829 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3859: LD_EXP 24
3863: PUSH
3864: LD_INT 0
3866: EQUAL
3867: PUSH
3868: LD_INT 44
3870: PPUSH
3871: LD_INT 3
3873: PPUSH
3874: CALL_OW 321
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3894
// ComChangeClassToBazooker ( ru_sold ) ;
3885: LD_EXP 20
3889: PPUSH
3890: CALL 9766 0 1
// if ru_bazz then
3894: LD_EXP 24
3898: IFFALSE 3912
// IntBazooka ( ru_bazz , 1 ) ;
3900: LD_EXP 24
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL 9485 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3912: LD_INT 67
3914: PPUSH
3915: LD_INT 39
3917: PPUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL_OW 440
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: PUSH
3930: LD_INT 20
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: CALL_OW 321
3940: PUSH
3941: LD_INT 2
3943: EQUAL
3944: AND
3945: IFFALSE 3966
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3947: LD_EXP 23
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_INT 67
3958: PPUSH
3959: LD_INT 39
3961: PPUSH
3962: CALL 9064 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3966: LD_INT 89
3968: PPUSH
3969: LD_INT 66
3971: PPUSH
3972: LD_INT 3
3974: PPUSH
3975: CALL_OW 440
3979: PUSH
3980: LD_INT 0
3982: EQUAL
3983: IFFALSE 4004
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
3985: LD_EXP 23
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_INT 87
3996: PPUSH
3997: LD_INT 60
3999: PPUSH
4000: CALL 9064 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4004: LD_INT 104
4006: PPUSH
4007: LD_INT 94
4009: PPUSH
4010: LD_INT 3
4012: PPUSH
4013: CALL_OW 440
4017: PUSH
4018: LD_INT 0
4020: EQUAL
4021: PUSH
4022: LD_INT 20
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: CALL_OW 321
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: AND
4037: IFFALSE 4058
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4039: LD_EXP 23
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: PPUSH
4048: LD_INT 104
4050: PPUSH
4051: LD_INT 94
4053: PPUSH
4054: CALL 9064 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4058: LD_INT 3
4060: PPUSH
4061: LD_INT 24
4063: PPUSH
4064: LD_INT 53
4066: PPUSH
4067: CALL 7960 0 3
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: PUSH
4076: LD_EXP 18
4080: AND
4081: IFFALSE 4222
// begin need_buldozer := false ;
4083: LD_ADDR_EXP 18
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4091: LD_INT 3
4093: PPUSH
4094: LD_INT 24
4096: PPUSH
4097: LD_INT 53
4099: PPUSH
4100: CALL 7960 0 3
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_INT 67
4111: PPUSH
4112: LD_INT 39
4114: PPUSH
4115: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 24
4124: PPUSH
4125: LD_INT 53
4127: PPUSH
4128: CALL 7960 0 3
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PPUSH
4137: LD_INT 71
4139: PPUSH
4140: LD_INT 10
4142: PPUSH
4143: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4147: LD_INT 3
4149: PPUSH
4150: LD_INT 24
4152: PPUSH
4153: LD_INT 53
4155: PPUSH
4156: CALL 7960 0 3
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: PPUSH
4165: LD_INT 15
4167: PPUSH
4168: CALL 5551 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 24
4177: PPUSH
4178: LD_INT 53
4180: PPUSH
4181: CALL 7960 0 3
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: PPUSH
4190: LD_INT 350
4192: PPUSH
4193: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 24
4202: PPUSH
4203: LD_INT 53
4205: PPUSH
4206: CALL 7960 0 3
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PPUSH
4215: LD_INT 14
4217: PPUSH
4218: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4222: LD_INT 67
4224: PPUSH
4225: LD_INT 39
4227: PPUSH
4228: LD_INT 3
4230: PPUSH
4231: CALL_OW 440
4235: PUSH
4236: LD_INT 67
4238: PPUSH
4239: LD_INT 39
4241: PPUSH
4242: CALL_OW 428
4246: PUSH
4247: LD_INT 0
4249: EQUAL
4250: AND
4251: PUSH
4252: LD_INT 79
4254: PPUSH
4255: LD_INT 45
4257: PPUSH
4258: CALL_OW 428
4262: PPUSH
4263: CALL_OW 266
4267: PUSH
4268: LD_INT 0
4270: EQUAL
4271: AND
4272: PUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_INT 79
4278: PPUSH
4279: LD_INT 45
4281: PPUSH
4282: CALL 5451 0 3
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: AND
4291: IFFALSE 4394
// begin for i = 1 to ru_eng do
4293: LD_ADDR_VAR 0 1
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_EXP 21
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4392
// if IsInUnit ( ru_eng [ i ] ) then
4311: LD_EXP 21
4315: PUSH
4316: LD_VAR 0 1
4320: ARRAY
4321: PPUSH
4322: CALL_OW 310
4326: IFFALSE 4345
// ComExitBuilding ( ru_eng [ i ] ) else
4328: LD_EXP 21
4332: PUSH
4333: LD_VAR 0 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 122
4343: GO 4390
// if not HasTask ( ru_eng [ i ] ) then
4345: LD_EXP 21
4349: PUSH
4350: LD_VAR 0 1
4354: ARRAY
4355: PPUSH
4356: CALL_OW 314
4360: NOT
4361: IFFALSE 4390
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: LD_INT 30
4376: PPUSH
4377: LD_INT 67
4379: PPUSH
4380: LD_INT 39
4382: PPUSH
4383: LD_INT 3
4385: PPUSH
4386: CALL_OW 145
4390: GO 4308
4392: POP
4393: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 79
4399: PPUSH
4400: LD_INT 45
4402: PPUSH
4403: CALL 5451 0 3
4407: PUSH
4408: LD_INT 0
4410: EQUAL
4411: IFFALSE 4607
// begin if HexInfo ( 79 , 45 ) = 0 then
4413: LD_INT 79
4415: PPUSH
4416: LD_INT 45
4418: PPUSH
4419: CALL_OW 428
4423: PUSH
4424: LD_INT 0
4426: EQUAL
4427: IFFALSE 4449
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4429: LD_EXP 21
4433: PPUSH
4434: LD_INT 79
4436: PPUSH
4437: LD_INT 45
4439: PPUSH
4440: LD_INT 3
4442: PPUSH
4443: CALL 6975 0 4
4447: GO 4607
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4449: LD_INT 89
4451: PPUSH
4452: LD_INT 66
4454: PPUSH
4455: CALL_OW 428
4459: PUSH
4460: LD_INT 0
4462: EQUAL
4463: PUSH
4464: LD_INT 89
4466: PPUSH
4467: LD_INT 66
4469: PPUSH
4470: LD_INT 3
4472: PPUSH
4473: CALL_OW 440
4477: AND
4478: IFFALSE 4607
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4480: LD_INT 79
4482: PPUSH
4483: LD_INT 45
4485: PPUSH
4486: CALL_OW 428
4490: PPUSH
4491: CALL_OW 274
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 100
4501: PPUSH
4502: CALL_OW 277
// for i = 1 to ru_eng do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 21
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4605
// if IsInUnit ( ru_eng [ i ] ) then
4524: LD_EXP 21
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 310
4539: IFFALSE 4558
// ComExitBuilding ( ru_eng [ i ] ) else
4541: LD_EXP 21
4545: PUSH
4546: LD_VAR 0 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 122
4556: GO 4603
// if not HasTask ( ru_eng [ i ] ) then
4558: LD_EXP 21
4562: PUSH
4563: LD_VAR 0 1
4567: ARRAY
4568: PPUSH
4569: CALL_OW 314
4573: NOT
4574: IFFALSE 4603
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: LD_INT 29
4589: PPUSH
4590: LD_INT 89
4592: PPUSH
4593: LD_INT 66
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: CALL_OW 145
4603: GO 4521
4605: POP
4606: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4607: LD_INT 3
4609: PPUSH
4610: LD_INT 29
4612: PPUSH
4613: CALL 6209 0 2
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: PUSH
4622: LD_INT 1
4624: PPUSH
4625: LD_INT 36
4627: PPUSH
4628: LD_INT 6
4630: PPUSH
4631: CALL 5451 0 3
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: AND
4640: PUSH
4641: LD_INT 3
4643: PPUSH
4644: CALL 6118 0 1
4648: PPUSH
4649: LD_INT 29
4651: PPUSH
4652: CALL 5694 0 2
4656: AND
4657: IFFALSE 4760
// begin for i = 1 to ru_eng do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_EXP 21
4673: PUSH
4674: FOR_TO
4675: IFFALSE 4758
// begin if IsInUnit ( ru_eng [ i ] ) then
4677: LD_EXP 21
4681: PUSH
4682: LD_VAR 0 1
4686: ARRAY
4687: PPUSH
4688: CALL_OW 310
4692: IFFALSE 4711
// ComExitBuilding ( ru_eng [ i ] ) else
4694: LD_EXP 21
4698: PUSH
4699: LD_VAR 0 1
4703: ARRAY
4704: PPUSH
4705: CALL_OW 122
4709: GO 4756
// if not HasTask ( ru_eng [ i ] ) then
4711: LD_EXP 21
4715: PUSH
4716: LD_VAR 0 1
4720: ARRAY
4721: PPUSH
4722: CALL_OW 314
4726: NOT
4727: IFFALSE 4756
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: LD_INT 29
4742: PPUSH
4743: LD_INT 33
4745: PPUSH
4746: LD_INT 4
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL_OW 205
// end ; end ;
4756: GO 4674
4758: POP
4759: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4760: LD_EXP 21
4764: PUSH
4765: LD_INT 79
4767: PPUSH
4768: LD_INT 45
4770: PPUSH
4771: CALL_OW 428
4775: PUSH
4776: LD_INT 0
4778: GREATER
4779: AND
4780: PUSH
4781: LD_INT 79
4783: PPUSH
4784: LD_INT 45
4786: PPUSH
4787: CALL_OW 428
4791: PPUSH
4792: CALL_OW 266
4796: PUSH
4797: LD_INT 0
4799: EQUAL
4800: AND
4801: IFFALSE 4961
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4803: LD_INT 79
4805: PPUSH
4806: LD_INT 45
4808: PPUSH
4809: CALL_OW 428
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: LD_INT 3
4821: EQUAL
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 79
4828: PPUSH
4829: LD_INT 45
4831: PPUSH
4832: CALL 5451 0 3
4836: PUSH
4837: LD_INT 0
4839: EQUAL
4840: AND
4841: PUSH
4842: LD_INT 79
4844: PPUSH
4845: LD_INT 45
4847: PPUSH
4848: CALL_OW 428
4852: PPUSH
4853: CALL_OW 274
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: CALL_OW 275
4865: PUSH
4866: LD_INT 10
4868: GREATEREQUAL
4869: AND
4870: IFFALSE 4961
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4872: LD_EXP 21
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: CALL_OW 310
4885: IFFALSE 4902
// ComExitBuilding ( ru_eng [ 1 ] ) else
4887: LD_EXP 21
4891: PUSH
4892: LD_INT 1
4894: ARRAY
4895: PPUSH
4896: CALL_OW 122
4900: GO 4961
// if not HasTask ( ru_eng [ 1 ] ) then
4902: LD_EXP 21
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: CALL_OW 314
4915: NOT
4916: IFFALSE 4961
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4918: LD_EXP 21
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_INT 79
4929: PPUSH
4930: LD_INT 45
4932: PPUSH
4933: CALL_OW 428
4937: PPUSH
4938: LD_INT 3
4940: PPUSH
4941: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4945: LD_EXP 21
4949: PUSH
4950: LD_INT 1
4952: ARRAY
4953: PPUSH
4954: LD_INT 2
4956: PPUSH
4957: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4961: LD_EXP 21
4965: PUSH
4966: LD_INT 2
4968: GREATER
4969: PUSH
4970: LD_INT 79
4972: PPUSH
4973: LD_INT 45
4975: PPUSH
4976: CALL_OW 428
4980: PUSH
4981: LD_INT 0
4983: GREATER
4984: AND
4985: PUSH
4986: LD_INT 79
4988: PPUSH
4989: LD_INT 45
4991: PPUSH
4992: CALL_OW 428
4996: PPUSH
4997: CALL_OW 266
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: IFFALSE 5166
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5008: LD_INT 79
5010: PPUSH
5011: LD_INT 45
5013: PPUSH
5014: CALL_OW 428
5018: PPUSH
5019: CALL_OW 255
5023: PUSH
5024: LD_INT 3
5026: EQUAL
5027: PUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 79
5033: PPUSH
5034: LD_INT 45
5036: PPUSH
5037: CALL 5451 0 3
5041: PUSH
5042: LD_INT 0
5044: EQUAL
5045: AND
5046: PUSH
5047: LD_INT 79
5049: PPUSH
5050: LD_INT 45
5052: PPUSH
5053: CALL_OW 428
5057: PPUSH
5058: CALL_OW 274
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 275
5070: PUSH
5071: LD_INT 20
5073: GREATER
5074: AND
5075: IFFALSE 5166
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5077: LD_EXP 21
5081: PUSH
5082: LD_INT 2
5084: ARRAY
5085: PPUSH
5086: CALL_OW 310
5090: IFFALSE 5107
// ComExitBuilding ( ru_eng [ 2 ] ) else
5092: LD_EXP 21
5096: PUSH
5097: LD_INT 2
5099: ARRAY
5100: PPUSH
5101: CALL_OW 122
5105: GO 5166
// if not HasTask ( ru_eng [ 2 ] ) then
5107: LD_EXP 21
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 314
5120: NOT
5121: IFFALSE 5166
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5123: LD_EXP 21
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_INT 79
5134: PPUSH
5135: LD_INT 45
5137: PPUSH
5138: CALL_OW 428
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5150: LD_EXP 21
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: LD_INT 2
5161: PPUSH
5162: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 59
5171: PPUSH
5172: LD_INT 60
5174: PPUSH
5175: CALL 5451 0 3
5179: PUSH
5180: LD_INT 0
5182: EQUAL
5183: PUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 67
5189: PPUSH
5190: LD_INT 76
5192: PPUSH
5193: CALL 5451 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: AND
5202: PUSH
5203: LD_INT 1
5205: PPUSH
5206: LD_INT 79
5208: PPUSH
5209: LD_INT 100
5211: PPUSH
5212: CALL 5451 0 3
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5233
// CollectCrates ( 3 , west_crates ) ;
5223: LD_INT 3
5225: PPUSH
5226: LD_INT 13
5228: PPUSH
5229: CALL 11376 0 2
// end ;
5233: PPOPN 10
5235: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5236: LD_OWVAR 1
5240: PUSH
5241: LD_INT 111300
5243: LESSEQUAL
5244: PUSH
5245: LD_EXP 30
5249: NOT
5250: OR
5251: IFFALSE 5448
5253: GO 5255
5255: DISABLE
5256: LD_INT 0
5258: PPUSH
// begin enable ;
5259: ENABLE
// uc_nation := 3 ;
5260: LD_ADDR_OWVAR 21
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_side := 3 ;
5268: LD_ADDR_OWVAR 20
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5276: LD_ADDR_OWVAR 37
5280: PUSH
5281: LD_INT 22
5283: ST_TO_ADDR
// vc_engine := engine_siberite ;
5284: LD_ADDR_OWVAR 39
5288: PUSH
5289: LD_INT 3
5291: ST_TO_ADDR
// vc_control := control_computer ;
5292: LD_ADDR_OWVAR 38
5296: PUSH
5297: LD_INT 3
5299: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5300: LD_ADDR_OWVAR 40
5304: PUSH
5305: LD_INT 51
5307: ST_TO_ADDR
// veh := CreateVehicle ;
5308: LD_ADDR_VAR 0 1
5312: PUSH
5313: CALL_OW 45
5317: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 4
5325: PPUSH
5326: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5330: LD_VAR 0 1
5334: PPUSH
5335: LD_INT 10
5337: PPUSH
5338: LD_INT 0
5340: PPUSH
5341: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_INT 1
5352: PUSH
5353: LD_INT 2
5355: PUSH
5356: LD_INT 3
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 4
5373: PPUSH
5374: CALL_OW 12
5378: ARRAY
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5387: LD_VAR 0 1
5391: PPUSH
5392: LD_INT 2
5394: PPUSH
5395: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_INT 10
5406: PPUSH
5407: CALL_OW 173
// Wait ( 0 0$10 ) ;
5411: LD_INT 350
5413: PPUSH
5414: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5418: LD_INT 35
5420: PPUSH
5421: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5425: LD_VAR 0 1
5429: PPUSH
5430: LD_INT 10
5432: PPUSH
5433: CALL_OW 308
5437: IFFALSE 5418
// RemoveUnit ( veh ) ;
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 64
// end ; end_of_file
5448: PPOPN 1
5450: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5451: LD_INT 0
5453: PPUSH
5454: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5455: LD_ADDR_VAR 0 5
5459: PUSH
5460: LD_INT 22
5462: PUSH
5463: LD_VAR 0 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 69
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 73
5491: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5492: LD_ADDR_VAR 0 4
5496: PUSH
5497: LD_VAR 0 5
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_VAR 0 3
5511: PPUSH
5512: CALL_OW 297
5516: PUSH
5517: LD_INT 15
5519: LESS
5520: PUSH
5521: LD_INT 2
5523: PPUSH
5524: LD_INT 22
5526: PUSH
5527: LD_VAR 0 1
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 70
5540: PUSH
5541: LD_INT 0
5543: GREATER
5544: OR
5545: ST_TO_ADDR
// end ;
5546: LD_VAR 0 4
5550: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5551: LD_INT 0
5553: PPUSH
5554: PPUSH
// area = ListEnvironmentArea ( area ) ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 353
5569: ST_TO_ADDR
// if bulldozer > 0 then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_INT 0
5577: GREATER
5578: IFFALSE 5689
// for i = 1 to area do
5580: LD_ADDR_VAR 0 4
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_VAR 0 2
5594: PUSH
5595: FOR_TO
5596: IFFALSE 5687
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_VAR 0 4
5607: ARRAY
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 4
5622: ARRAY
5623: PUSH
5624: LD_INT 2
5626: ARRAY
5627: PPUSH
5628: CALL_OW 351
5632: IFFALSE 5685
// if not HasTask ( bulldozer ) then
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 314
5643: NOT
5644: IFFALSE 5685
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5646: LD_VAR 0 1
5650: PPUSH
5651: LD_VAR 0 2
5655: PUSH
5656: LD_VAR 0 4
5660: ARRAY
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_VAR 0 2
5670: PUSH
5671: LD_VAR 0 4
5675: ARRAY
5676: PUSH
5677: LD_INT 2
5679: ARRAY
5680: PPUSH
5681: CALL_OW 171
5685: GO 5595
5687: POP
5688: POP
// end ;
5689: LD_VAR 0 3
5693: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
// pom := GetBase ( bdepot ) ;
5699: LD_ADDR_VAR 0 4
5703: PUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 274
5713: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5714: LD_ADDR_VAR 0 5
5718: PUSH
5719: LD_VAR 0 2
5723: PPUSH
5724: LD_VAR 0 1
5728: PPUSH
5729: CALL_OW 248
5733: PPUSH
5734: CALL_OW 450
5738: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5739: LD_VAR 0 4
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 275
5751: PUSH
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: GREATEREQUAL
5761: PUSH
5762: LD_VAR 0 4
5766: PPUSH
5767: LD_INT 3
5769: PPUSH
5770: CALL_OW 275
5774: PUSH
5775: LD_VAR 0 5
5779: PUSH
5780: LD_INT 3
5782: ARRAY
5783: GREATEREQUAL
5784: AND
5785: IFFALSE 5797
// result := true else
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
5795: GO 5805
// result := false ;
5797: LD_ADDR_VAR 0 3
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// end ;
5805: LD_VAR 0 3
5809: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
5814: PPUSH
// pom := GetBase ( bdepot ) ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 274
5829: ST_TO_ADDR
// sor := [ ] ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: EMPTY
5836: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5837: LD_ADDR_VAR 0 4
5841: PUSH
5842: LD_VAR 0 4
5846: PUSH
5847: LD_VAR 0 3
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 275
5859: ADD
5860: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_VAR 0 4
5870: PUSH
5871: LD_VAR 0 3
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: CALL_OW 275
5883: ADD
5884: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_VAR 0 4
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: CALL_OW 275
5907: ADD
5908: ST_TO_ADDR
// result := sor ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_VAR 0 4
5918: ST_TO_ADDR
// end ;
5919: LD_VAR 0 2
5923: RET
// export function Hex ( x , y ) ; begin
5924: LD_INT 0
5926: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5927: LD_VAR 0 1
5931: PPUSH
5932: LD_VAR 0 2
5936: PPUSH
5937: CALL_OW 488
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: CALL_OW 428
5956: PUSH
5957: LD_INT 0
5959: EQUAL
5960: AND
5961: IFFALSE 5973
// result := true else
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 1
5970: ST_TO_ADDR
5971: GO 5981
// result := false ;
5973: LD_ADDR_VAR 0 3
5977: PUSH
5978: LD_INT 0
5980: ST_TO_ADDR
// end ;
5981: LD_VAR 0 3
5985: RET
// export function NeedBuilding ( side , btype ) ; begin
5986: LD_INT 0
5988: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
5989: LD_INT 22
5991: PUSH
5992: LD_VAR 0 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_VAR 0 2
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 3
6015: PUSH
6016: LD_INT 57
6018: PUSH
6019: EMPTY
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PPUSH
6031: CALL_OW 69
6035: PUSH
6036: LD_INT 0
6038: EQUAL
6039: IFFALSE 6051
// result := true else
6041: LD_ADDR_VAR 0 3
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
6049: GO 6059
// result := false ;
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// end ;
6059: LD_VAR 0 3
6063: RET
// export function NeedBase ( side ) ; begin
6064: LD_INT 0
6066: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6067: LD_VAR 0 1
6071: PPUSH
6072: LD_INT 0
6074: PPUSH
6075: CALL 5986 0 2
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL 5986 0 2
6092: AND
6093: IFFALSE 6105
// result := true else
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
6103: GO 6113
// result := false ;
6105: LD_ADDR_VAR 0 2
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// end ;
6113: LD_VAR 0 2
6117: RET
// export function MyBase ( side ) ; begin
6118: LD_INT 0
6120: PPUSH
// if not NeedBase ( side ) then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL 6064 0 1
6130: NOT
6131: IFFALSE 6196
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6133: LD_ADDR_VAR 0 2
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 2
6152: PUSH
6153: LD_INT 30
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: ST_TO_ADDR
6194: GO 6204
// result := false ;
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 2
6208: RET
// export function GetBuilding ( side , btype ) ; begin
6209: LD_INT 0
6211: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6212: LD_INT 22
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 30
6226: PUSH
6227: LD_VAR 0 2
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: LD_INT 0
6247: GREATER
6248: IFFALSE 6290
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6250: LD_ADDR_VAR 0 3
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 30
6269: PUSH
6270: LD_VAR 0 2
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 69
6287: ST_TO_ADDR
6288: GO 6298
// result := false ;
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// end ;
6298: LD_VAR 0 3
6302: RET
// export function GetCrates ( side ) ; begin
6303: LD_INT 0
6305: PPUSH
// result := 0 ;
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// if MyBase ( side ) then
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL 6118 0 1
6323: IFFALSE 6353
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL 6118 0 1
6339: PPUSH
6340: CALL_OW 274
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 275
6352: ST_TO_ADDR
// end ;
6353: LD_VAR 0 2
6357: RET
// export function GetLabs ( side ) ; begin
6358: LD_INT 0
6360: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 30
6383: PUSH
6384: LD_INT 6
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 8
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 30
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: PPUSH
6424: CALL_OW 69
6428: ST_TO_ADDR
// end ;
6429: LD_VAR 0 2
6433: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
6438: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6439: LD_ADDR_VAR 0 3
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: LD_INT 1
6451: PPUSH
6452: CALL_OW 268
6456: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6457: LD_ADDR_VAR 0 4
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 2
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: LD_VAR 0 3
6484: PUSH
6485: LD_VAR 0 4
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// end ;
6494: LD_VAR 0 2
6498: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6499: LD_INT 0
6501: PPUSH
6502: PPUSH
// result := false ;
6503: LD_ADDR_VAR 0 3
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// for i = 1 to tlist do
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_VAR 0 2
6525: PUSH
6526: FOR_TO
6527: IFFALSE 6567
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6529: LD_VAR 0 2
6533: PUSH
6534: LD_VAR 0 4
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 321
6549: PUSH
6550: LD_INT 2
6552: NONEQUAL
6553: IFFALSE 6565
// begin result := true ;
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// break ;
6563: GO 6567
// end ;
6565: GO 6526
6567: POP
6568: POP
// end ;
6569: LD_VAR 0 3
6573: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
// lab := GetLabs ( side ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL 6358 0 1
6598: ST_TO_ADDR
// tmp := 0 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 0
6606: ST_TO_ADDR
// list := [ ] ;
6607: LD_ADDR_VAR 0 8
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6614: LD_ADDR_VAR 0 10
6618: PUSH
6619: LD_INT 35
6621: PUSH
6622: LD_INT 45
6624: PUSH
6625: LD_INT 46
6627: PUSH
6628: LD_INT 47
6630: PUSH
6631: LD_INT 1
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 48
6639: PUSH
6640: LD_INT 49
6642: PUSH
6643: LD_INT 50
6645: PUSH
6646: LD_INT 20
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: ST_TO_ADDR
// for i = 1 to tlist do
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 2
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6729
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_VAR 0 4
6688: ARRAY
6689: PPUSH
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 321
6699: PUSH
6700: LD_INT 2
6702: NONEQUAL
6703: IFFALSE 6727
// list := list ^ tlist [ i ] ;
6705: LD_ADDR_VAR 0 8
6709: PUSH
6710: LD_VAR 0 8
6714: PUSH
6715: LD_VAR 0 2
6719: PUSH
6720: LD_VAR 0 4
6724: ARRAY
6725: ADD
6726: ST_TO_ADDR
6727: GO 6676
6729: POP
6730: POP
// if list then
6731: LD_VAR 0 8
6735: IFFALSE 6900
// begin for i = 1 to lab do
6737: LD_ADDR_VAR 0 4
6741: PUSH
6742: DOUBLE
6743: LD_INT 1
6745: DEC
6746: ST_TO_ADDR
6747: LD_VAR 0 5
6751: PUSH
6752: FOR_TO
6753: IFFALSE 6823
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6755: LD_VAR 0 8
6759: PUSH
6760: LD_INT 1
6762: ARRAY
6763: PUSH
6764: LD_VAR 0 10
6768: IN
6769: PUSH
6770: LD_VAR 0 8
6774: PUSH
6775: LD_INT 1
6777: ARRAY
6778: PPUSH
6779: CALL_OW 481
6783: PUSH
6784: LD_VAR 0 5
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: PPUSH
6795: CALL 6434 0 1
6799: IN
6800: OR
6801: IFFALSE 6821
// begin mylab := lab [ i ] ;
6803: LD_ADDR_VAR 0 9
6807: PUSH
6808: LD_VAR 0 5
6812: PUSH
6813: LD_VAR 0 4
6817: ARRAY
6818: ST_TO_ADDR
// break ;
6819: GO 6823
// end ;
6821: GO 6752
6823: POP
6824: POP
// if mylab then
6825: LD_VAR 0 9
6829: IFFALSE 6890
// begin if BuildingStatus ( mylab ) = bs_idle then
6831: LD_VAR 0 9
6835: PPUSH
6836: CALL_OW 461
6840: PUSH
6841: LD_INT 2
6843: EQUAL
6844: IFFALSE 6888
// for i = 1 to list do
6846: LD_ADDR_VAR 0 4
6850: PUSH
6851: DOUBLE
6852: LD_INT 1
6854: DEC
6855: ST_TO_ADDR
6856: LD_VAR 0 8
6860: PUSH
6861: FOR_TO
6862: IFFALSE 6886
// AddComResearch ( mylab , list [ i ] ) ;
6864: LD_VAR 0 9
6868: PPUSH
6869: LD_VAR 0 8
6873: PUSH
6874: LD_VAR 0 4
6878: ARRAY
6879: PPUSH
6880: CALL_OW 184
6884: GO 6861
6886: POP
6887: POP
// end else
6888: GO 6898
// result := false ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// end else
6898: GO 6908
// result := false ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// end ;
6908: LD_VAR 0 3
6912: RET
// export function GetTowers ( side ) ; begin
6913: LD_INT 0
6915: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6916: LD_ADDR_VAR 0 2
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_VAR 0 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 32
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 30
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 2
6974: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
// if Hex ( x , y ) then
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_VAR 0 3
6988: PPUSH
6989: CALL 5924 0 2
6993: IFFALSE 7068
// for i = 1 to plist do
6995: LD_ADDR_VAR 0 6
6999: PUSH
7000: DOUBLE
7001: LD_INT 1
7003: DEC
7004: ST_TO_ADDR
7005: LD_VAR 0 1
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7066
// if not HasTask ( plist [ i ] ) then
7013: LD_VAR 0 1
7017: PUSH
7018: LD_VAR 0 6
7022: ARRAY
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: IFFALSE 7064
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: LD_INT 0
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: LD_VAR 0 4
7059: PPUSH
7060: CALL_OW 145
7064: GO 7010
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 5
7072: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 266
7086: PUSH
7087: LD_INT 0
7089: EQUAL
7090: PUSH
7091: LD_VAR 0 2
7095: PPUSH
7096: LD_INT 1
7098: PPUSH
7099: CALL 5694 0 2
7103: AND
7104: PUSH
7105: LD_VAR 0 1
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: CALL_OW 255
7118: PPUSH
7119: CALL_OW 345
7123: NOT
7124: AND
7125: IFFALSE 7221
// begin ComUpgrade ( bident ) ;
7127: LD_VAR 0 2
7131: PPUSH
7132: CALL_OW 146
// for i = 1 to plist do
7136: LD_ADDR_VAR 0 4
7140: PUSH
7141: DOUBLE
7142: LD_INT 1
7144: DEC
7145: ST_TO_ADDR
7146: LD_VAR 0 1
7150: PUSH
7151: FOR_TO
7152: IFFALSE 7209
// if not HasTask ( plist [ i ] ) then
7154: LD_VAR 0 1
7158: PUSH
7159: LD_VAR 0 4
7163: ARRAY
7164: PPUSH
7165: CALL_OW 314
7169: NOT
7170: IFFALSE 7207
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: CALL_OW 250
7192: PPUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 251
7202: PPUSH
7203: CALL_OW 111
7207: GO 7151
7209: POP
7210: POP
// result := true ;
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// end else
7219: GO 7229
// result := false ;
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// end ;
7229: LD_VAR 0 3
7233: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7238: LD_VAR 0 1
7242: PUSH
7243: LD_INT 1
7245: ARRAY
7246: PPUSH
7247: CALL_OW 255
7251: PPUSH
7252: CALL 6303 0 1
7256: PUSH
7257: LD_INT 20
7259: GREATEREQUAL
7260: PUSH
7261: LD_VAR 0 2
7265: PPUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL 5924 0 2
7275: AND
7276: IFFALSE 7361
// begin for i = 1 to plist do
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: DOUBLE
7284: LD_INT 1
7286: DEC
7287: ST_TO_ADDR
7288: LD_VAR 0 1
7292: PUSH
7293: FOR_TO
7294: IFFALSE 7349
// if not HasTask ( plist [ i ] ) then
7296: LD_VAR 0 1
7300: PUSH
7301: LD_VAR 0 6
7305: ARRAY
7306: PPUSH
7307: CALL_OW 314
7311: NOT
7312: IFFALSE 7347
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: LD_VAR 0 3
7337: PPUSH
7338: LD_VAR 0 4
7342: PPUSH
7343: CALL_OW 145
7347: GO 7293
7349: POP
7350: POP
// result := true ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// end else
7359: GO 7369
// result := false ;
7361: LD_ADDR_VAR 0 5
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// end ;
7369: LD_VAR 0 5
7373: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7374: LD_INT 0
7376: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7377: LD_VAR 0 1
7381: PPUSH
7382: LD_INT 1
7384: PPUSH
7385: CALL_OW 268
7389: PUSH
7390: LD_INT 9
7392: EQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: CALL_OW 268
7406: PUSH
7407: LD_INT 9
7409: EQUAL
7410: AND
7411: IFFALSE 7508
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_VAR 0 2
7422: PPUSH
7423: CALL 5694 0 2
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: CALL 5694 0 2
7442: AND
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 461
7453: PUSH
7454: LD_INT 2
7456: EQUAL
7457: AND
7458: IFFALSE 7498
// begin ComUpgradeLab ( lab , bkind1 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_VAR 0 2
7469: PPUSH
7470: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: LD_VAR 0 3
7483: PPUSH
7484: CALL_OW 207
// result := true ;
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// end else
7496: GO 7506
// result := false ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 0
7505: ST_TO_ADDR
// end else
7506: GO 7516
// result := false ;
7508: LD_ADDR_VAR 0 4
7512: PUSH
7513: LD_INT 0
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 4
7520: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7521: LD_INT 0
7523: PPUSH
7524: PPUSH
7525: PPUSH
7526: PPUSH
7527: PPUSH
// p := 1 ;
7528: LD_ADDR_VAR 0 6
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 4
7553: DIVREAL
7554: PUSH
7555: FOR_TO
7556: IFFALSE 7805
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7558: LD_VAR 0 2
7562: PUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 1
7570: PLUS
7571: ARRAY
7572: PPUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 6
7582: PUSH
7583: LD_INT 2
7585: PLUS
7586: ARRAY
7587: PPUSH
7588: CALL_OW 428
7592: PUSH
7593: LD_INT 0
7595: EQUAL
7596: PUSH
7597: LD_VAR 0 2
7601: PUSH
7602: LD_VAR 0 6
7606: PUSH
7607: LD_INT 1
7609: PLUS
7610: ARRAY
7611: PPUSH
7612: LD_VAR 0 2
7616: PUSH
7617: LD_VAR 0 6
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: ARRAY
7626: PPUSH
7627: CALL 5924 0 2
7631: AND
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PPUSH
7642: CALL_OW 255
7646: PPUSH
7647: CALL 6303 0 1
7651: PUSH
7652: LD_INT 20
7654: GREATEREQUAL
7655: AND
7656: IFFALSE 7773
// begin for c = 1 to plist do
7658: LD_ADDR_VAR 0 7
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 1
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7767
// if not HasTask ( plist [ c ] ) then
7676: LD_VAR 0 1
7680: PUSH
7681: LD_VAR 0 7
7685: ARRAY
7686: PPUSH
7687: CALL_OW 314
7691: NOT
7692: IFFALSE 7765
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: LD_VAR 0 2
7709: PUSH
7710: LD_VAR 0 6
7714: ARRAY
7715: PPUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 1
7728: PLUS
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 2
7735: PUSH
7736: LD_VAR 0 6
7740: PUSH
7741: LD_INT 2
7743: PLUS
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 6
7755: PUSH
7756: LD_INT 3
7758: PLUS
7759: ARRAY
7760: PPUSH
7761: CALL_OW 145
7765: GO 7673
7767: POP
7768: POP
// break ;
7769: GO 7805
// end else
7771: GO 7803
// if ( p + 4 < tlist ) then
7773: LD_VAR 0 6
7777: PUSH
7778: LD_INT 4
7780: PLUS
7781: PUSH
7782: LD_VAR 0 2
7786: LESS
7787: IFFALSE 7803
// p := p + 4 ;
7789: LD_ADDR_VAR 0 6
7793: PUSH
7794: LD_VAR 0 6
7798: PUSH
7799: LD_INT 4
7801: PLUS
7802: ST_TO_ADDR
// end ;
7803: GO 7555
7805: POP
7806: POP
// end ;
7807: LD_VAR 0 3
7811: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
// tmp := GetTowers ( side ) ;
7818: LD_ADDR_VAR 0 5
7822: PUSH
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL 6913 0 1
7832: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7833: LD_ADDR_VAR 0 6
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 3
7845: PPUSH
7846: CALL 6209 0 2
7850: PUSH
7851: LD_INT 1
7853: ARRAY
7854: ST_TO_ADDR
// if fac then
7855: LD_VAR 0 6
7859: IFFALSE 7955
// for i = 1 to tmp do
7861: LD_ADDR_VAR 0 4
7865: PUSH
7866: DOUBLE
7867: LD_INT 1
7869: DEC
7870: ST_TO_ADDR
7871: LD_VAR 0 5
7875: PUSH
7876: FOR_TO
7877: IFFALSE 7953
// if GetBWeapon ( tmp [ i ] ) = 0 then
7879: LD_VAR 0 5
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PPUSH
7890: CALL_OW 269
7894: PUSH
7895: LD_INT 0
7897: EQUAL
7898: IFFALSE 7951
// begin if BuildingStatus ( fac ) = bs_idle then
7900: LD_VAR 0 6
7904: PPUSH
7905: CALL_OW 461
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: IFFALSE 7949
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7915: LD_VAR 0 5
7919: PUSH
7920: LD_VAR 0 4
7924: ARRAY
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: PPUSH
7934: LD_VAR 0 2
7938: PPUSH
7939: CALL_OW 12
7943: ARRAY
7944: PPUSH
7945: CALL_OW 148
// break ;
7949: GO 7953
// end ;
7951: GO 7876
7953: POP
7954: POP
// end ;
7955: LD_VAR 0 3
7959: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7960: LD_INT 0
7962: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7963: LD_INT 22
7965: PUSH
7966: LD_VAR 0 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 34
7977: PUSH
7978: LD_VAR 0 3
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 31
7989: PUSH
7990: LD_VAR 0 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: PPUSH
8007: CALL_OW 69
8011: IFFALSE 8069
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_INT 22
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 34
8032: PUSH
8033: LD_VAR 0 3
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 31
8044: PUSH
8045: LD_VAR 0 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: ST_TO_ADDR
8067: GO 8077
// result := false ;
8069: LD_ADDR_VAR 0 4
8073: PUSH
8074: LD_INT 0
8076: ST_TO_ADDR
// end ;
8077: LD_VAR 0 4
8081: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8082: LD_INT 0
8084: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: LD_VAR 0 5
8109: PPUSH
8110: CALL_OW 448
8114: PUSH
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_VAR 0 3
8124: PPUSH
8125: LD_VAR 0 4
8129: PPUSH
8130: LD_VAR 0 5
8134: PPUSH
8135: CALL_OW 449
8139: PUSH
8140: LD_INT 1
8142: ARRAY
8143: PUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL 5810 0 1
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: LESSEQUAL
8158: AND
8159: PUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: LD_VAR 0 3
8169: PPUSH
8170: LD_VAR 0 4
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 449
8184: PUSH
8185: LD_INT 2
8187: ARRAY
8188: PUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL 5810 0 1
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: LESSEQUAL
8203: AND
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_VAR 0 3
8214: PPUSH
8215: LD_VAR 0 4
8219: PPUSH
8220: LD_VAR 0 5
8224: PPUSH
8225: CALL_OW 449
8229: PUSH
8230: LD_INT 3
8232: ARRAY
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL 5810 0 1
8243: PUSH
8244: LD_INT 3
8246: ARRAY
8247: LESSEQUAL
8248: AND
8249: IFFALSE 8296
// begin if debug then
8251: LD_EXP 1
8255: IFFALSE 8265
// display_strings := Factory work! ;
8257: LD_ADDR_OWVAR 47
8261: PUSH
8262: LD_STRING Factory work!
8264: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_VAR 0 5
8289: PPUSH
8290: CALL_OW 125
// end else
8294: GO 8304
// result := false ;
8296: LD_ADDR_VAR 0 6
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// end ;
8304: LD_VAR 0 6
8308: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8309: LD_INT 0
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8315: LD_ADDR_VAR 0 6
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 30
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PPUSH
8348: CALL_OW 69
8352: ST_TO_ADDR
// tmp := [ ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for i = 1 to filter do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_VAR 0 6
8374: PUSH
8375: FOR_TO
8376: IFFALSE 8464
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_VAR 0 5
8387: PUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_VAR 0 4
8397: ARRAY
8398: PPUSH
8399: CALL_OW 266
8403: PUSH
8404: LD_VAR 0 6
8408: PUSH
8409: LD_VAR 0 4
8413: ARRAY
8414: PPUSH
8415: CALL_OW 250
8419: PUSH
8420: LD_VAR 0 6
8424: PUSH
8425: LD_VAR 0 4
8429: ARRAY
8430: PPUSH
8431: CALL_OW 251
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_VAR 0 4
8445: ARRAY
8446: PPUSH
8447: CALL_OW 254
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: ADD
8461: ST_TO_ADDR
// end ;
8462: GO 8375
8464: POP
8465: POP
// result := tmp ;
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: LD_VAR 0 5
8475: ST_TO_ADDR
// end ;
8476: LD_VAR 0 3
8480: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8481: LD_INT 0
8483: PPUSH
8484: PPUSH
8485: PPUSH
// for i = 1 to list do
8486: LD_ADDR_VAR 0 4
8490: PUSH
8491: DOUBLE
8492: LD_INT 1
8494: DEC
8495: ST_TO_ADDR
8496: LD_VAR 0 2
8500: PUSH
8501: FOR_TO
8502: IFFALSE 9057
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8504: LD_VAR 0 2
8508: PUSH
8509: LD_VAR 0 4
8513: ARRAY
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 2
8523: PUSH
8524: LD_VAR 0 4
8528: ARRAY
8529: PUSH
8530: LD_INT 2
8532: ARRAY
8533: PPUSH
8534: CALL_OW 428
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: IFFALSE 8828
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8544: LD_VAR 0 2
8548: PUSH
8549: LD_VAR 0 4
8553: ARRAY
8554: PUSH
8555: LD_INT 1
8557: ARRAY
8558: PPUSH
8559: LD_VAR 0 2
8563: PUSH
8564: LD_VAR 0 4
8568: ARRAY
8569: PUSH
8570: LD_INT 2
8572: ARRAY
8573: PPUSH
8574: CALL_OW 428
8578: PPUSH
8579: CALL_OW 248
8583: PUSH
8584: LD_INT 3
8586: EQUAL
8587: IFFALSE 8713
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_VAR 0 4
8598: ARRAY
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_VAR 0 4
8613: ARRAY
8614: PUSH
8615: LD_INT 2
8617: ARRAY
8618: PPUSH
8619: CALL_OW 428
8623: PPUSH
8624: CALL_OW 274
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: CALL_OW 275
8636: PUSH
8637: LD_INT 15
8639: GREATEREQUAL
8640: IFFALSE 8711
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8642: LD_VAR 0 2
8646: PUSH
8647: LD_VAR 0 4
8651: ARRAY
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 2
8661: PUSH
8662: LD_VAR 0 4
8666: ARRAY
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: CALL_OW 428
8676: PPUSH
8677: LD_VAR 0 2
8681: PUSH
8682: LD_VAR 0 4
8686: ARRAY
8687: PUSH
8688: LD_INT 4
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 2
8696: PUSH
8697: LD_VAR 0 4
8701: ARRAY
8702: PUSH
8703: LD_INT 5
8705: ARRAY
8706: PPUSH
8707: CALL 7374 0 3
// end else
8711: GO 8782
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8713: LD_VAR 0 2
8717: PUSH
8718: LD_VAR 0 4
8722: ARRAY
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: LD_VAR 0 2
8732: PUSH
8733: LD_VAR 0 4
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: PPUSH
8743: CALL_OW 428
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 4
8761: ARRAY
8762: PPUSH
8763: LD_VAR 0 2
8767: PUSH
8768: LD_VAR 0 4
8772: ARRAY
8773: PUSH
8774: LD_INT 5
8776: ARRAY
8777: PPUSH
8778: CALL 7374 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8782: LD_VAR 0 1
8786: PPUSH
8787: LD_VAR 0 2
8791: PUSH
8792: LD_VAR 0 4
8796: ARRAY
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_VAR 0 4
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: PPUSH
8817: CALL_OW 428
8821: PPUSH
8822: CALL 10326 0 2
// end else
8826: GO 9055
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8828: LD_VAR 0 1
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PPUSH
8837: CALL_OW 255
8841: PPUSH
8842: CALL 6118 0 1
8846: PPUSH
8847: LD_INT 6
8849: PPUSH
8850: CALL 5694 0 2
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: CALL_OW 255
8868: PPUSH
8869: CALL 6118 0 1
8873: PPUSH
8874: LD_VAR 0 2
8878: PUSH
8879: LD_VAR 0 4
8883: ARRAY
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PPUSH
8889: CALL 5694 0 2
8893: AND
8894: PUSH
8895: LD_VAR 0 1
8899: PUSH
8900: LD_INT 1
8902: ARRAY
8903: PPUSH
8904: CALL_OW 255
8908: PPUSH
8909: CALL 6118 0 1
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: ARRAY
8924: PUSH
8925: LD_INT 5
8927: ARRAY
8928: PPUSH
8929: CALL 5694 0 2
8933: AND
8934: IFFALSE 9055
// for p = 1 to plist do
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_VAR 0 1
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9053
// if IsInUnit ( plist [ p ] ) then
8954: LD_VAR 0 1
8958: PUSH
8959: LD_VAR 0 5
8963: ARRAY
8964: PPUSH
8965: CALL_OW 310
8969: IFFALSE 8988
// ComExitBuilding ( plist [ p ] ) else
8971: LD_VAR 0 1
8975: PUSH
8976: LD_VAR 0 5
8980: ARRAY
8981: PPUSH
8982: CALL_OW 122
8986: GO 9051
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
8988: LD_VAR 0 1
8992: PUSH
8993: LD_VAR 0 5
8997: ARRAY
8998: PPUSH
8999: LD_INT 6
9001: PPUSH
9002: LD_VAR 0 2
9006: PUSH
9007: LD_VAR 0 4
9011: ARRAY
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: LD_VAR 0 2
9021: PUSH
9022: LD_VAR 0 4
9026: ARRAY
9027: PUSH
9028: LD_INT 2
9030: ARRAY
9031: PPUSH
9032: LD_VAR 0 2
9036: PUSH
9037: LD_VAR 0 4
9041: ARRAY
9042: PUSH
9043: LD_INT 3
9045: ARRAY
9046: PPUSH
9047: CALL_OW 145
9051: GO 8951
9053: POP
9054: POP
// end ;
9055: GO 8501
9057: POP
9058: POP
// end ;
9059: LD_VAR 0 3
9063: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9064: LD_INT 0
9066: PPUSH
// if IsInUnit ( sci ) then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 310
9076: IFFALSE 9089
// ComExitBuilding ( sci ) else
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 122
9087: GO 9120
// if not HasTask ( sci ) then
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 314
9098: NOT
9099: IFFALSE 9120
// begin ComMoveXY ( sci , x , y ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: CALL_OW 111
// end ; end ;
9120: LD_VAR 0 4
9124: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
9130: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_INT 22
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 21
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: PUSH
9167: LD_VAR 0 3
9171: DIFF
9172: ST_TO_ADDR
// tmp := tag_list ;
9173: LD_ADDR_VAR 0 7
9177: PUSH
9178: LD_VAR 0 2
9182: ST_TO_ADDR
// for i = 1 to filter do
9183: LD_ADDR_VAR 0 5
9187: PUSH
9188: DOUBLE
9189: LD_INT 1
9191: DEC
9192: ST_TO_ADDR
9193: LD_VAR 0 6
9197: PUSH
9198: FOR_TO
9199: IFFALSE 9468
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9201: LD_VAR 0 6
9205: PUSH
9206: LD_VAR 0 5
9210: ARRAY
9211: PPUSH
9212: CALL_OW 256
9216: PUSH
9217: LD_INT 1000
9219: EQUAL
9220: PUSH
9221: LD_VAR 0 6
9225: PUSH
9226: LD_VAR 0 5
9230: ARRAY
9231: PPUSH
9232: CALL_OW 110
9236: PUSH
9237: LD_INT 100
9239: GREATEREQUAL
9240: AND
9241: IFFALSE 9283
// begin SetTag ( filter [ i ] , 0 ) ;
9243: LD_VAR 0 6
9247: PUSH
9248: LD_VAR 0 5
9252: ARRAY
9253: PPUSH
9254: LD_INT 0
9256: PPUSH
9257: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9261: LD_ADDR_VAR 0 7
9265: PUSH
9266: LD_VAR 0 7
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_VAR 0 5
9280: ARRAY
9281: DIFF
9282: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9283: LD_VAR 0 6
9287: PUSH
9288: LD_VAR 0 5
9292: ARRAY
9293: PPUSH
9294: CALL_OW 256
9298: PUSH
9299: LD_INT 1000
9301: LESS
9302: IFFALSE 9466
// begin if not filter [ i ] in tmp then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_VAR 0 5
9313: ARRAY
9314: PUSH
9315: LD_VAR 0 7
9319: IN
9320: NOT
9321: IFFALSE 9345
// tmp := tmp ^ filter [ i ] ;
9323: LD_ADDR_VAR 0 7
9327: PUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_VAR 0 6
9337: PUSH
9338: LD_VAR 0 5
9342: ARRAY
9343: ADD
9344: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9345: LD_VAR 0 6
9349: PUSH
9350: LD_VAR 0 5
9354: ARRAY
9355: PPUSH
9356: CALL_OW 256
9360: PUSH
9361: LD_INT 250
9363: LESS
9364: IFFALSE 9386
// SetTag ( filter [ i ] , 100 ) else
9366: LD_VAR 0 6
9370: PUSH
9371: LD_VAR 0 5
9375: ARRAY
9376: PPUSH
9377: LD_INT 100
9379: PPUSH
9380: CALL_OW 109
9384: GO 9466
// if GetLives ( filter [ i ] ) < 500 then
9386: LD_VAR 0 6
9390: PUSH
9391: LD_VAR 0 5
9395: ARRAY
9396: PPUSH
9397: CALL_OW 256
9401: PUSH
9402: LD_INT 500
9404: LESS
9405: IFFALSE 9427
// SetTag ( filter [ i ] , 101 ) else
9407: LD_VAR 0 6
9411: PUSH
9412: LD_VAR 0 5
9416: ARRAY
9417: PPUSH
9418: LD_INT 101
9420: PPUSH
9421: CALL_OW 109
9425: GO 9466
// if GetLives ( filter [ i ] ) < 1000 then
9427: LD_VAR 0 6
9431: PUSH
9432: LD_VAR 0 5
9436: ARRAY
9437: PPUSH
9438: CALL_OW 256
9442: PUSH
9443: LD_INT 1000
9445: LESS
9446: IFFALSE 9466
// SetTag ( filter [ i ] , 102 ) ;
9448: LD_VAR 0 6
9452: PUSH
9453: LD_VAR 0 5
9457: ARRAY
9458: PPUSH
9459: LD_INT 102
9461: PPUSH
9462: CALL_OW 109
// end ; end ;
9466: GO 9198
9468: POP
9469: POP
// result := tmp ;
9470: LD_ADDR_VAR 0 4
9474: PUSH
9475: LD_VAR 0 7
9479: ST_TO_ADDR
// end ;
9480: LD_VAR 0 4
9484: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9492: LD_ADDR_VAR 0 7
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 3
9545: PPUSH
9546: CALL_OW 12
9550: ST_TO_ADDR
// if filter > 0 then
9551: LD_VAR 0 7
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 9761
// for i = 1 to list do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_VAR 0 1
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9759
// for ta in filter do
9579: LD_ADDR_VAR 0 4
9583: PUSH
9584: LD_VAR 0 7
9588: PUSH
9589: FOR_IN
9590: IFFALSE 9755
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9592: LD_VAR 0 1
9596: PUSH
9597: LD_VAR 0 6
9601: ARRAY
9602: PPUSH
9603: LD_VAR 0 4
9607: PPUSH
9608: CALL_OW 296
9612: PUSH
9613: LD_INT 13
9615: LESSEQUAL
9616: IFFALSE 9753
// begin case c of 1 :
9618: LD_VAR 0 5
9622: PUSH
9623: LD_INT 1
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9669
9631: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9632: LD_VAR 0 1
9636: PUSH
9637: LD_VAR 0 6
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 4
9647: PPUSH
9648: CALL_OW 250
9652: PPUSH
9653: LD_VAR 0 4
9657: PPUSH
9658: CALL_OW 251
9662: PPUSH
9663: CALL_OW 154
9667: GO 9753
9669: LD_INT 2
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9741
9677: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9678: LD_VAR 0 1
9682: PUSH
9683: LD_VAR 0 6
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 4
9693: PPUSH
9694: CALL_OW 250
9698: PUSH
9699: LD_INT 1
9701: NEG
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 12
9710: PLUS
9711: PPUSH
9712: LD_VAR 0 4
9716: PPUSH
9717: CALL_OW 251
9721: PUSH
9722: LD_INT 1
9724: NEG
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 12
9733: PLUS
9734: PPUSH
9735: CALL_OW 153
9739: GO 9753
9741: LD_INT 3
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9752
9749: POP
// ; end ;
9750: GO 9753
9752: POP
// end ; end ;
9753: GO 9589
9755: POP
9756: POP
9757: GO 9576
9759: POP
9760: POP
// end ;
9761: LD_VAR 0 3
9765: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9766: LD_INT 0
9768: PPUSH
9769: PPUSH
// for i = 1 to plist do
9770: LD_ADDR_VAR 0 3
9774: PUSH
9775: DOUBLE
9776: LD_INT 1
9778: DEC
9779: ST_TO_ADDR
9780: LD_VAR 0 1
9784: PUSH
9785: FOR_TO
9786: IFFALSE 9988
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9788: LD_VAR 0 1
9792: PUSH
9793: LD_VAR 0 3
9797: ARRAY
9798: PPUSH
9799: CALL_OW 310
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: PPUSH
9817: CALL_OW 69
9821: IN
9822: NOT
9823: IFFALSE 9968
// begin if IsInUnit ( plist [ i ] ) then
9825: LD_VAR 0 1
9829: PUSH
9830: LD_VAR 0 3
9834: ARRAY
9835: PPUSH
9836: CALL_OW 310
9840: IFFALSE 9859
// ComExitBuilding ( plist [ i ] ) else
9842: LD_VAR 0 1
9846: PUSH
9847: LD_VAR 0 3
9851: ARRAY
9852: PPUSH
9853: CALL_OW 122
9857: GO 9966
// if not HasTask ( plist [ i ] ) then
9859: LD_VAR 0 1
9863: PUSH
9864: LD_VAR 0 3
9868: ARRAY
9869: PPUSH
9870: CALL_OW 314
9874: NOT
9875: IFFALSE 9966
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: CALL_OW 255
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 30
9911: PUSH
9912: LD_INT 5
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: PPUSH
9928: LD_VAR 0 1
9932: PUSH
9933: LD_VAR 0 3
9937: ARRAY
9938: PPUSH
9939: CALL_OW 74
9943: PPUSH
9944: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9948: LD_VAR 0 1
9952: PUSH
9953: LD_VAR 0 3
9957: ARRAY
9958: PPUSH
9959: LD_INT 9
9961: PPUSH
9962: CALL_OW 183
// end ; end else
9966: GO 9986
// ComChangeProfession ( plist [ i ] , 9 ) ;
9968: LD_VAR 0 1
9972: PUSH
9973: LD_VAR 0 3
9977: ARRAY
9978: PPUSH
9979: LD_INT 9
9981: PPUSH
9982: CALL_OW 123
9986: GO 9785
9988: POP
9989: POP
// end ;
9990: LD_VAR 0 2
9994: RET
// export function GetHuman ( side ) ; begin
9995: LD_INT 0
9997: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_VAR 0 1
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 21
10017: PUSH
10018: LD_INT 1
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 25
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 25
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: ST_TO_ADDR
// end ;
10085: LD_VAR 0 2
10089: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
// uc_side := 0 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_nation := 0 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: DOUBLE
10117: LD_INT 1
10119: DEC
10120: ST_TO_ADDR
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: LD_INT 6
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: LD_OWVAR 67
10139: ARRAY
10140: PUSH
10141: FOR_TO
10142: IFFALSE 10213
// begin hc_class = class_tiger ;
10144: LD_ADDR_OWVAR 28
10148: PUSH
10149: LD_INT 14
10151: ST_TO_ADDR
// hc_gallery = sandnature ;
10152: LD_ADDR_OWVAR 33
10156: PUSH
10157: LD_STRING sandnature
10159: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10160: LD_ADDR_OWVAR 35
10164: PUSH
10165: LD_INT 0
10167: PPUSH
10168: LD_INT 50
10170: PPUSH
10171: CALL_OW 12
10175: ST_TO_ADDR
// hc_face_number = 3 ;
10176: LD_ADDR_OWVAR 34
10180: PUSH
10181: LD_INT 3
10183: ST_TO_ADDR
// tiger := CreateHuman ;
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: CALL_OW 44
10193: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: LD_INT 0
10206: PPUSH
10207: CALL_OW 49
// end ;
10211: GO 10141
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10220: LD_INT 0
10222: PPUSH
10223: PPUSH
10224: PPUSH
// uc_side := 0 ;
10225: LD_ADDR_OWVAR 20
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// uc_nation := 0 ;
10233: LD_ADDR_OWVAR 21
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// for i = 1 to 8 do
10241: LD_ADDR_VAR 0 4
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_INT 8
10253: PUSH
10254: FOR_TO
10255: IFFALSE 10319
// begin hc_class = class_apeman ;
10257: LD_ADDR_OWVAR 28
10261: PUSH
10262: LD_INT 12
10264: ST_TO_ADDR
// hc_gallery =  ;
10265: LD_ADDR_OWVAR 33
10269: PUSH
10270: LD_STRING 
10272: ST_TO_ADDR
// hc_agressivity = Rand ( - 2 , 2 ) ;
10273: LD_ADDR_OWVAR 35
10277: PUSH
10278: LD_INT 2
10280: NEG
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: CALL_OW 12
10289: ST_TO_ADDR
// ape := CreateHuman ;
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: CALL_OW 44
10299: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// end ;
10317: GO 10254
10319: POP
10320: POP
// end ;
10321: LD_VAR 0 2
10325: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// if BuildingStatus ( b ) = bs_build then
10330: LD_VAR 0 2
10334: PPUSH
10335: CALL_OW 461
10339: PUSH
10340: LD_INT 1
10342: EQUAL
10343: IFFALSE 10529
// for i = 1 to plist do
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: DOUBLE
10351: LD_INT 1
10353: DEC
10354: ST_TO_ADDR
10355: LD_VAR 0 1
10359: PUSH
10360: FOR_TO
10361: IFFALSE 10527
// if IsInUnit ( plist [ i ] ) then
10363: LD_VAR 0 1
10367: PUSH
10368: LD_VAR 0 4
10372: ARRAY
10373: PPUSH
10374: CALL_OW 310
10378: IFFALSE 10461
// begin ComExitBuilding ( plist [ i ] ) ;
10380: LD_VAR 0 1
10384: PUSH
10385: LD_VAR 0 4
10389: ARRAY
10390: PPUSH
10391: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10395: LD_VAR 0 1
10399: PUSH
10400: LD_VAR 0 4
10404: ARRAY
10405: PPUSH
10406: LD_STRING h
10408: PUSH
10409: LD_VAR 0 2
10413: PPUSH
10414: CALL_OW 250
10418: PUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 251
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: PPUSH
10455: CALL_OW 447
// end else
10459: GO 10525
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10461: LD_VAR 0 1
10465: PUSH
10466: LD_VAR 0 4
10470: ARRAY
10471: PPUSH
10472: LD_STRING h
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 251
10494: PUSH
10495: LD_VAR 0 2
10499: PUSH
10500: LD_INT 0
10502: PUSH
10503: LD_INT 0
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: PPUSH
10521: CALL_OW 446
10525: GO 10360
10527: POP
10528: POP
// end ;
10529: LD_VAR 0 3
10533: RET
// export function WantRepair ( eng ) ; begin
10534: LD_INT 0
10536: PPUSH
// if GetTaskList ( eng ) > 0 then
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 437
10546: PUSH
10547: LD_INT 0
10549: GREATER
10550: IFFALSE 10595
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 437
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PUSH
10566: LD_INT 1
10568: ARRAY
10569: PUSH
10570: LD_STRING o
10572: EQUAL
10573: IFFALSE 10585
// result := true else
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
10583: GO 10593
// result := false ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 0
10592: ST_TO_ADDR
// end else
10593: GO 10603
// result := false ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// end ;
10603: LD_VAR 0 2
10607: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// if btype = - 1 then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: NEG
10622: EQUAL
10623: IFFALSE 10663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10625: LD_ADDR_VAR 0 5
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: ST_TO_ADDR
10661: GO 10701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10663: LD_ADDR_VAR 0 5
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_VAR 0 2
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// list := [ ] ;
10701: LD_ADDR_VAR 0 6
10705: PUSH
10706: EMPTY
10707: ST_TO_ADDR
// for i = 1 to tmp do
10708: LD_ADDR_VAR 0 4
10712: PUSH
10713: DOUBLE
10714: LD_INT 1
10716: DEC
10717: ST_TO_ADDR
10718: LD_VAR 0 5
10722: PUSH
10723: FOR_TO
10724: IFFALSE 10812
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10726: LD_ADDR_VAR 0 6
10730: PUSH
10731: LD_VAR 0 6
10735: PUSH
10736: LD_VAR 0 5
10740: PUSH
10741: LD_VAR 0 4
10745: ARRAY
10746: PPUSH
10747: CALL_OW 266
10751: PUSH
10752: LD_VAR 0 5
10756: PUSH
10757: LD_VAR 0 4
10761: ARRAY
10762: PPUSH
10763: CALL_OW 250
10767: PUSH
10768: LD_VAR 0 5
10772: PUSH
10773: LD_VAR 0 4
10777: ARRAY
10778: PPUSH
10779: CALL_OW 251
10783: PUSH
10784: LD_VAR 0 5
10788: PUSH
10789: LD_VAR 0 4
10793: ARRAY
10794: PPUSH
10795: CALL_OW 254
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: ADD
10809: ST_TO_ADDR
10810: GO 10723
10812: POP
10813: POP
// result = list ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_VAR 0 6
10823: ST_TO_ADDR
// end ;
10824: LD_VAR 0 3
10828: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 81
10842: PUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 255
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PPUSH
10862: LD_VAR 0 1
10866: PPUSH
10867: CALL_OW 74
10871: PPUSH
10872: CALL_OW 296
10876: PUSH
10877: LD_INT 18
10879: LESS
10880: IFFALSE 10925
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 81
10889: PUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 255
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 69
10908: PPUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: CALL_OW 74
10918: PPUSH
10919: CALL_OW 115
10923: GO 10944
// ComMoveXY ( behemoth , x , y ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_VAR 0 4
10934: PPUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: CALL_OW 111
// if time_lapsers_list > 0 then
10944: LD_VAR 0 2
10948: PUSH
10949: LD_INT 0
10951: GREATER
10952: IFFALSE 11142
// begin for i = 1 to time_lapsers_list do
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: DOUBLE
10960: LD_INT 1
10962: DEC
10963: ST_TO_ADDR
10964: LD_VAR 0 2
10968: PUSH
10969: FOR_TO
10970: IFFALSE 11140
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10972: LD_VAR 0 2
10976: PUSH
10977: LD_VAR 0 7
10981: ARRAY
10982: PPUSH
10983: CALL_OW 256
10987: PUSH
10988: LD_INT 250
10990: GREATEREQUAL
10991: PUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 7
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 296
11012: PUSH
11013: LD_INT 9
11015: GREATER
11016: AND
11017: IFFALSE 11054
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 7
11028: ARRAY
11029: PPUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 250
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 251
11049: PPUSH
11050: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11054: LD_VAR 0 2
11058: PUSH
11059: LD_VAR 0 7
11063: ARRAY
11064: PPUSH
11065: CALL_OW 256
11069: PUSH
11070: LD_INT 500
11072: LESS
11073: PUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 256
11083: PUSH
11084: LD_INT 700
11086: GREATER
11087: AND
11088: IFFALSE 11138
// for p = 1 to mechanic_list do
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: DOUBLE
11096: LD_INT 1
11098: DEC
11099: ST_TO_ADDR
11100: LD_VAR 0 3
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11136
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11108: LD_VAR 0 3
11112: PUSH
11113: LD_VAR 0 8
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 2
11123: PUSH
11124: LD_VAR 0 7
11128: ARRAY
11129: PPUSH
11130: CALL_OW 129
11134: GO 11105
11136: POP
11137: POP
// end ;
11138: GO 10969
11140: POP
11141: POP
// end ; if mechanic_list then
11142: LD_VAR 0 3
11146: IFFALSE 11327
// begin for i = 1 to mechanic_list do
11148: LD_ADDR_VAR 0 7
11152: PUSH
11153: DOUBLE
11154: LD_INT 1
11156: DEC
11157: ST_TO_ADDR
11158: LD_VAR 0 3
11162: PUSH
11163: FOR_TO
11164: IFFALSE 11325
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 7
11175: ARRAY
11176: PPUSH
11177: CALL_OW 256
11181: PUSH
11182: LD_INT 333
11184: LESS
11185: IFFALSE 11209
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11187: LD_ADDR_EXP 15
11191: PUSH
11192: LD_EXP 15
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 7
11206: ARRAY
11207: DIFF
11208: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_VAR 0 7
11218: ARRAY
11219: PPUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 296
11229: PUSH
11230: LD_INT 9
11232: GREATER
11233: PUSH
11234: LD_VAR 0 3
11238: PUSH
11239: LD_VAR 0 7
11243: ARRAY
11244: PPUSH
11245: CALL_OW 314
11249: NOT
11250: AND
11251: IFFALSE 11288
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11253: LD_VAR 0 3
11257: PUSH
11258: LD_VAR 0 7
11262: ARRAY
11263: PPUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 250
11273: PPUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 251
11283: PPUSH
11284: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 256
11297: PUSH
11298: LD_INT 700
11300: LESS
11301: IFFALSE 11323
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11303: LD_VAR 0 3
11307: PUSH
11308: LD_VAR 0 7
11312: ARRAY
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 129
// end ;
11323: GO 11163
11325: POP
11326: POP
// end ; end ;
11327: LD_VAR 0 6
11331: RET
// export function GetBehemoth ( side ) ; begin
11332: LD_INT 0
11334: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_VAR 0 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 31
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// end ;
11371: LD_VAR 0 2
11375: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11376: LD_INT 0
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11384: LD_ADDR_VAR 0 6
11388: PUSH
11389: LD_VAR 0 2
11393: PPUSH
11394: CALL_OW 435
11398: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11399: LD_ADDR_VAR 0 5
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_VAR 0 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: ST_TO_ADDR
// if skr then
11453: LD_VAR 0 6
11457: IFFALSE 11622
// begin if engs then
11459: LD_VAR 0 5
11463: IFFALSE 11622
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11465: LD_ADDR_VAR 0 8
11469: PUSH
11470: LD_VAR 0 6
11474: PUSH
11475: LD_INT 1
11477: ARRAY
11478: PPUSH
11479: LD_VAR 0 6
11483: PUSH
11484: LD_INT 2
11486: ARRAY
11487: PPUSH
11488: CALL_OW 284
11492: ST_TO_ADDR
// if am > engs then
11493: LD_VAR 0 8
11497: PUSH
11498: LD_VAR 0 5
11502: GREATER
11503: IFFALSE 11515
// am := engs ;
11505: LD_ADDR_VAR 0 8
11509: PUSH
11510: LD_VAR 0 5
11514: ST_TO_ADDR
// for i = 1 to am do
11515: LD_ADDR_VAR 0 7
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_VAR 0 8
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11620
// begin if IsInUnit ( engs [ i ] ) then
11533: LD_VAR 0 5
11537: PUSH
11538: LD_VAR 0 7
11542: ARRAY
11543: PPUSH
11544: CALL_OW 310
11548: IFFALSE 11567
// ComExitBuilding ( engs [ i ] ) else
11550: LD_VAR 0 5
11554: PUSH
11555: LD_VAR 0 7
11559: ARRAY
11560: PPUSH
11561: CALL_OW 122
11565: GO 11618
// if not HasTask ( engs [ i ] ) then
11567: LD_VAR 0 5
11571: PUSH
11572: LD_VAR 0 7
11576: ARRAY
11577: PPUSH
11578: CALL_OW 314
11582: NOT
11583: IFFALSE 11618
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: LD_VAR 0 6
11600: PUSH
11601: LD_INT 1
11603: ARRAY
11604: PPUSH
11605: LD_VAR 0 6
11609: PUSH
11610: LD_INT 2
11612: ARRAY
11613: PPUSH
11614: CALL_OW 117
// end ;
11618: GO 11530
11620: POP
11621: POP
// end ; end ; end ; end_of_file
11622: LD_VAR 0 3
11626: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// uc_side := 1 ;
11631: LD_ADDR_OWVAR 20
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// uc_nation := 1 ;
11639: LD_ADDR_OWVAR 21
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 6
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: LD_INT 4
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: LD_OWVAR 67
11670: ARRAY
11671: ST_TO_ADDR
// game_status := false ;
11672: LD_ADDR_EXP 29
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// helps_arrive := false ;
11680: LD_ADDR_EXP 30
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// helps_can_arrive := false ;
11688: LD_ADDR_EXP 31
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// beta_come := false ;
11696: LD_ADDR_EXP 32
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// gamma_come := false ;
11704: LD_ADDR_EXP 33
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// zeta_come := false ;
11712: LD_ADDR_EXP 34
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// mine_ck := false ;
11720: LD_ADDR_EXP 35
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sib_bomb_constructed := false ;
11728: LD_ADDR_EXP 36
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// mine_constructed := false ;
11736: LD_ADDR_EXP 37
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11744: LD_INT 35
11746: PPUSH
11747: CALL_OW 274
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: LD_INT 200
11757: PUSH
11758: LD_INT 100
11760: PUSH
11761: LD_INT 70
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: PUSH
11769: LD_OWVAR 67
11773: ARRAY
11774: PPUSH
11775: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11779: LD_INT 35
11781: PPUSH
11782: LD_INT 4
11784: PPUSH
11785: CALL_OW 235
// hc_importance := 100 ;
11789: LD_ADDR_OWVAR 32
11793: PUSH
11794: LD_INT 100
11796: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 2
11802: PPUSH
11803: LD_VAR 0 2
11807: PUSH
11808: LD_INT 1
11810: PLUS
11811: PPUSH
11812: CALL_OW 380
// hc_gallery := hardch ;
11816: LD_ADDR_OWVAR 33
11820: PUSH
11821: LD_STRING hardch
11823: ST_TO_ADDR
// hc_face_number := 1 ;
11824: LD_ADDR_OWVAR 34
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// guyA := CreateHuman ;
11832: LD_ADDR_EXP 38
11836: PUSH
11837: CALL_OW 44
11841: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11842: LD_INT 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL_OW 380
// hc_face_number := 2 ;
11857: LD_ADDR_OWVAR 34
11861: PUSH
11862: LD_INT 2
11864: ST_TO_ADDR
// guyB := CreateHuman ;
11865: LD_ADDR_EXP 39
11869: PUSH
11870: CALL_OW 44
11874: ST_TO_ADDR
// hc_importance := 0 ;
11875: LD_ADDR_OWVAR 32
11879: PUSH
11880: LD_INT 0
11882: ST_TO_ADDR
// hc_gallery :=  ;
11883: LD_ADDR_OWVAR 33
11887: PUSH
11888: LD_STRING 
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
// uc_side := 4 ;
11907: LD_ADDR_OWVAR 20
11911: PUSH
11912: LD_INT 4
11914: ST_TO_ADDR
// uc_nation := 1 ;
11915: LD_ADDR_OWVAR 21
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11923: LD_ADDR_VAR 0 10
11927: PUSH
11928: LD_INT 6
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_OWVAR 67
11946: ARRAY
11947: ST_TO_ADDR
// Beta_Squad := [ ] ;
11948: LD_ADDR_EXP 40
11952: PUSH
11953: EMPTY
11954: ST_TO_ADDR
// case num of 1 :
11955: LD_VAR 0 1
11959: PUSH
11960: LD_INT 1
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12011
11968: POP
// begin sold := 2 ;
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_INT 2
11976: ST_TO_ADDR
// sci := 1 ;
11977: LD_ADDR_VAR 0 6
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// mech := 2 ;
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_INT 2
11992: ST_TO_ADDR
// tank := 1 ;
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// cargo := 1 ;
12001: LD_ADDR_VAR 0 9
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// end ; 2 :
12009: GO 12114
12011: LD_INT 2
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12062
12019: POP
// begin sold := 2 ;
12020: LD_ADDR_VAR 0 5
12024: PUSH
12025: LD_INT 2
12027: ST_TO_ADDR
// sci := 1 ;
12028: LD_ADDR_VAR 0 6
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// mech := 1 ;
12036: LD_ADDR_VAR 0 7
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// tank := 1 ;
12044: LD_ADDR_VAR 0 8
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// cargo := 0 ;
12052: LD_ADDR_VAR 0 9
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// end ; 3 :
12060: GO 12114
12062: LD_INT 3
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12113
12070: POP
// begin sold := 1 ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// sci := 1 ;
12079: LD_ADDR_VAR 0 6
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// mech := 1 ;
12087: LD_ADDR_VAR 0 7
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// tank := 1 ;
12095: LD_ADDR_VAR 0 8
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// cargo := 0 ;
12103: LD_ADDR_VAR 0 9
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// end ; end ;
12111: GO 12114
12113: POP
// for i = 1 to sold do
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_VAR 0 5
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12202
// begin if i = 1 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: EQUAL
12140: IFFALSE 12159
// PrepareHuman ( sex_male , 1 , skill ) else
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: LD_VAR 0 10
12152: PPUSH
12153: CALL_OW 380
12157: GO 12174
// PrepareHuman ( false , 1 , skill ) ;
12159: LD_INT 0
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: LD_VAR 0 10
12169: PPUSH
12170: CALL_OW 380
// un := CreateHuman ;
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: CALL_OW 44
12183: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12184: LD_ADDR_EXP 40
12188: PUSH
12189: LD_EXP 40
12193: PUSH
12194: LD_VAR 0 4
12198: ADD
12199: ST_TO_ADDR
// end ;
12200: GO 12129
12202: POP
12203: POP
// for i = 1 to mech do
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: DOUBLE
12210: LD_INT 1
12212: DEC
12213: ST_TO_ADDR
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12277
// begin PrepareHuman ( false , 3 , skill ) ;
12222: LD_INT 0
12224: PPUSH
12225: LD_INT 3
12227: PPUSH
12228: LD_VAR 0 10
12232: PPUSH
12233: CALL_OW 380
// un := CreateHuman ;
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: CALL_OW 44
12246: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12247: LD_VAR 0 4
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12259: LD_ADDR_EXP 40
12263: PUSH
12264: LD_EXP 40
12268: PUSH
12269: LD_VAR 0 4
12273: ADD
12274: ST_TO_ADDR
// end ;
12275: GO 12219
12277: POP
12278: POP
// for i = 1 to sci do
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: DOUBLE
12285: LD_INT 1
12287: DEC
12288: ST_TO_ADDR
12289: LD_VAR 0 6
12293: PUSH
12294: FOR_TO
12295: IFFALSE 12340
// begin PrepareHuman ( false , 4 , skill ) ;
12297: LD_INT 0
12299: PPUSH
12300: LD_INT 4
12302: PPUSH
12303: LD_VAR 0 10
12307: PPUSH
12308: CALL_OW 380
// un := CreateHuman ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: CALL_OW 44
12321: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12322: LD_ADDR_EXP 40
12326: PUSH
12327: LD_EXP 40
12331: PUSH
12332: LD_VAR 0 4
12336: ADD
12337: ST_TO_ADDR
// end ;
12338: GO 12294
12340: POP
12341: POP
// for i = 1 to tank do
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_VAR 0 8
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12471
// begin Randomize ;
12360: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12364: LD_ADDR_OWVAR 37
12368: PUSH
12369: LD_INT 3
12371: ST_TO_ADDR
// vc_engine := engine_solar ;
12372: LD_ADDR_OWVAR 39
12376: PUSH
12377: LD_INT 2
12379: ST_TO_ADDR
// vc_control := control_manual ;
12380: LD_ADDR_OWVAR 38
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12388: LD_ADDR_OWVAR 40
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: LD_INT 5
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 1
12405: PPUSH
12406: LD_INT 2
12408: PPUSH
12409: CALL_OW 12
12413: ARRAY
12414: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12415: LD_ADDR_OWVAR 41
12419: PUSH
12420: LD_INT 35
12422: PPUSH
12423: LD_INT 55
12425: PPUSH
12426: CALL_OW 12
12430: ST_TO_ADDR
// un := CreateVehicle ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: CALL_OW 45
12440: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12441: LD_VAR 0 4
12445: PPUSH
12446: LD_INT 5
12448: PPUSH
12449: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12453: LD_ADDR_EXP 40
12457: PUSH
12458: LD_EXP 40
12462: PUSH
12463: LD_VAR 0 4
12467: ADD
12468: ST_TO_ADDR
// end ;
12469: GO 12357
12471: POP
12472: POP
// if cargo then
12473: LD_VAR 0 9
12477: IFFALSE 12580
// begin vc_chassis := us_medium_tracked ;
12479: LD_ADDR_OWVAR 37
12483: PUSH
12484: LD_INT 3
12486: ST_TO_ADDR
// vc_engine := engine_solar ;
12487: LD_ADDR_OWVAR 39
12491: PUSH
12492: LD_INT 2
12494: ST_TO_ADDR
// vc_control := control_manual ;
12495: LD_ADDR_OWVAR 38
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12503: LD_ADDR_OWVAR 40
12507: PUSH
12508: LD_INT 12
12510: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12511: LD_ADDR_OWVAR 41
12515: PUSH
12516: LD_INT 35
12518: PPUSH
12519: LD_INT 55
12521: PPUSH
12522: CALL_OW 12
12526: ST_TO_ADDR
// un := CreateVehicle ;
12527: LD_ADDR_VAR 0 4
12531: PUSH
12532: CALL_OW 45
12536: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12537: LD_VAR 0 4
12541: PPUSH
12542: LD_INT 5
12544: PPUSH
12545: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12549: LD_ADDR_EXP 40
12553: PUSH
12554: LD_EXP 40
12558: PUSH
12559: LD_VAR 0 4
12563: ADD
12564: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12565: LD_VAR 0 4
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: LD_INT 60
12575: PPUSH
12576: CALL_OW 290
// end ; end ;
12580: LD_VAR 0 2
12584: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12585: LD_INT 0
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
// uc_side := 4 ;
12597: LD_ADDR_OWVAR 20
12601: PUSH
12602: LD_INT 4
12604: ST_TO_ADDR
// uc_nation := 1 ;
12605: LD_ADDR_OWVAR 21
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12613: LD_ADDR_VAR 0 11
12617: PUSH
12618: LD_INT 6
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: LD_INT 4
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_OWVAR 67
12636: ARRAY
12637: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12638: LD_ADDR_EXP 41
12642: PUSH
12643: EMPTY
12644: ST_TO_ADDR
// case num of 1 :
12645: LD_VAR 0 1
12649: PUSH
12650: LD_INT 1
12652: DOUBLE
12653: EQUAL
12654: IFTRUE 12658
12656: GO 12709
12658: POP
// begin sold := 2 ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_INT 2
12666: ST_TO_ADDR
// eng := 2 ;
12667: LD_ADDR_VAR 0 6
12671: PUSH
12672: LD_INT 2
12674: ST_TO_ADDR
// sci := 0 ;
12675: LD_ADDR_VAR 0 7
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// mech := 1 ;
12683: LD_ADDR_VAR 0 8
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// tank := 0 ;
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// cargo := 1 ;
12699: LD_ADDR_VAR 0 10
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// end ; 2 :
12707: GO 12828
12709: LD_INT 2
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12768
12717: POP
// begin sold := 1 ;
12718: LD_ADDR_VAR 0 5
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// eng := 2 ;
12726: LD_ADDR_VAR 0 6
12730: PUSH
12731: LD_INT 2
12733: ST_TO_ADDR
// sci := 0 ;
12734: LD_ADDR_VAR 0 7
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// mech := 1 ;
12742: LD_ADDR_VAR 0 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// tank := 0 ;
12750: LD_ADDR_VAR 0 9
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// cargo := 1 ;
12758: LD_ADDR_VAR 0 10
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// end ; 3 :
12766: GO 12828
12768: LD_INT 3
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12827
12776: POP
// begin sold := 1 ;
12777: LD_ADDR_VAR 0 5
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// eng := 1 ;
12785: LD_ADDR_VAR 0 6
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// sci := 0 ;
12793: LD_ADDR_VAR 0 7
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// mech := 1 ;
12801: LD_ADDR_VAR 0 8
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// tank := 0 ;
12809: LD_ADDR_VAR 0 9
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// cargo := 1 ;
12817: LD_ADDR_VAR 0 10
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// end ; end ;
12825: GO 12828
12827: POP
// for i = 1 to sold do
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_VAR 0 5
12842: PUSH
12843: FOR_TO
12844: IFFALSE 12916
// begin if i = 1 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 1
12853: EQUAL
12854: IFFALSE 12873
// PrepareHuman ( sex_male , 1 , skill ) else
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: LD_VAR 0 11
12866: PPUSH
12867: CALL_OW 380
12871: GO 12888
// PrepareHuman ( false , 1 , skill ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: LD_VAR 0 11
12883: PPUSH
12884: CALL_OW 380
// un := CreateHuman ;
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: CALL_OW 44
12897: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12898: LD_ADDR_EXP 41
12902: PUSH
12903: LD_EXP 41
12907: PUSH
12908: LD_VAR 0 4
12912: ADD
12913: ST_TO_ADDR
// end ;
12914: GO 12843
12916: POP
12917: POP
// for i = 1 to mech do
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: DOUBLE
12924: LD_INT 1
12926: DEC
12927: ST_TO_ADDR
12928: LD_VAR 0 8
12932: PUSH
12933: FOR_TO
12934: IFFALSE 12991
// begin PrepareHuman ( false , 3 , skill ) ;
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_VAR 0 11
12946: PPUSH
12947: CALL_OW 380
// un := CreateHuman ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: CALL_OW 44
12960: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12961: LD_VAR 0 4
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12973: LD_ADDR_EXP 41
12977: PUSH
12978: LD_EXP 41
12982: PUSH
12983: LD_VAR 0 4
12987: ADD
12988: ST_TO_ADDR
// end ;
12989: GO 12933
12991: POP
12992: POP
// for i = 1 to eng do
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: DOUBLE
12999: LD_INT 1
13001: DEC
13002: ST_TO_ADDR
13003: LD_VAR 0 6
13007: PUSH
13008: FOR_TO
13009: IFFALSE 13054
// begin PrepareHuman ( false , 2 , skill ) ;
13011: LD_INT 0
13013: PPUSH
13014: LD_INT 2
13016: PPUSH
13017: LD_VAR 0 11
13021: PPUSH
13022: CALL_OW 380
// un := CreateHuman ;
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: CALL_OW 44
13035: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13036: LD_ADDR_EXP 41
13040: PUSH
13041: LD_EXP 41
13045: PUSH
13046: LD_VAR 0 4
13050: ADD
13051: ST_TO_ADDR
// end ;
13052: GO 13008
13054: POP
13055: POP
// for i = 1 to tank do
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: DOUBLE
13062: LD_INT 1
13064: DEC
13065: ST_TO_ADDR
13066: LD_VAR 0 9
13070: PUSH
13071: FOR_TO
13072: IFFALSE 13185
// begin Randomize ;
13074: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13078: LD_ADDR_OWVAR 37
13082: PUSH
13083: LD_INT 2
13085: ST_TO_ADDR
// vc_engine := engine_siberite ;
13086: LD_ADDR_OWVAR 39
13090: PUSH
13091: LD_INT 3
13093: ST_TO_ADDR
// vc_control := control_manual ;
13094: LD_ADDR_OWVAR 38
13098: PUSH
13099: LD_INT 1
13101: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13102: LD_ADDR_OWVAR 40
13106: PUSH
13107: LD_INT 7
13109: PUSH
13110: LD_INT 9
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 1
13119: PPUSH
13120: LD_INT 2
13122: PPUSH
13123: CALL_OW 12
13127: ARRAY
13128: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13129: LD_ADDR_OWVAR 41
13133: PUSH
13134: LD_INT 35
13136: PPUSH
13137: LD_INT 55
13139: PPUSH
13140: CALL_OW 12
13144: ST_TO_ADDR
// un := CreateVehicle ;
13145: LD_ADDR_VAR 0 4
13149: PUSH
13150: CALL_OW 45
13154: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13155: LD_VAR 0 4
13159: PPUSH
13160: LD_INT 5
13162: PPUSH
13163: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13167: LD_ADDR_EXP 41
13171: PUSH
13172: LD_EXP 41
13176: PUSH
13177: LD_VAR 0 4
13181: ADD
13182: ST_TO_ADDR
// end ;
13183: GO 13071
13185: POP
13186: POP
// if cargo then
13187: LD_VAR 0 10
13191: IFFALSE 13309
// begin vc_chassis := us_medium_tracked ;
13193: LD_ADDR_OWVAR 37
13197: PUSH
13198: LD_INT 3
13200: ST_TO_ADDR
// vc_engine := engine_combustion ;
13201: LD_ADDR_OWVAR 39
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// vc_control := control_manual ;
13209: LD_ADDR_OWVAR 38
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13217: LD_ADDR_OWVAR 40
13221: PUSH
13222: LD_INT 12
13224: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13225: LD_ADDR_OWVAR 41
13229: PUSH
13230: LD_INT 35
13232: PPUSH
13233: LD_INT 55
13235: PPUSH
13236: CALL_OW 12
13240: ST_TO_ADDR
// un := CreateVehicle ;
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: CALL_OW 45
13250: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13251: LD_VAR 0 4
13255: PPUSH
13256: LD_INT 5
13258: PPUSH
13259: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13263: LD_ADDR_EXP 41
13267: PUSH
13268: LD_EXP 41
13272: PUSH
13273: LD_VAR 0 4
13277: ADD
13278: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_INT 3
13286: PPUSH
13287: LD_INT 30
13289: PPUSH
13290: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13294: LD_VAR 0 4
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: LD_INT 40
13304: PPUSH
13305: CALL_OW 290
// end ; end ;
13309: LD_VAR 0 2
13313: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
// uc_side := 4 ;
13326: LD_ADDR_OWVAR 20
13330: PUSH
13331: LD_INT 4
13333: ST_TO_ADDR
// uc_nation := 1 ;
13334: LD_ADDR_OWVAR 21
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13342: LD_ADDR_VAR 0 10
13346: PUSH
13347: LD_INT 6
13349: PUSH
13350: LD_INT 5
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: PUSH
13361: LD_OWVAR 67
13365: ARRAY
13366: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13367: LD_ADDR_EXP 42
13371: PUSH
13372: EMPTY
13373: ST_TO_ADDR
// sold := 1 ;
13374: LD_ADDR_VAR 0 4
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// eng := 0 ;
13382: LD_ADDR_VAR 0 5
13386: PUSH
13387: LD_INT 0
13389: ST_TO_ADDR
// sci := 0 ;
13390: LD_ADDR_VAR 0 6
13394: PUSH
13395: LD_INT 0
13397: ST_TO_ADDR
// mech := 3 ;
13398: LD_ADDR_VAR 0 7
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// tank := 3 ;
13406: LD_ADDR_VAR 0 8
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// cargo := 0 ;
13414: LD_ADDR_VAR 0 9
13418: PUSH
13419: LD_INT 0
13421: ST_TO_ADDR
// for i = 1 to sold do
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: DOUBLE
13428: LD_INT 1
13430: DEC
13431: ST_TO_ADDR
13432: LD_VAR 0 4
13436: PUSH
13437: FOR_TO
13438: IFFALSE 13510
// begin if i = 1 then
13440: LD_VAR 0 2
13444: PUSH
13445: LD_INT 1
13447: EQUAL
13448: IFFALSE 13467
// PrepareHuman ( sex_male , 1 , skill ) else
13450: LD_INT 1
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_VAR 0 10
13460: PPUSH
13461: CALL_OW 380
13465: GO 13482
// PrepareHuman ( false , 1 , skill ) ;
13467: LD_INT 0
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_VAR 0 10
13477: PPUSH
13478: CALL_OW 380
// un := CreateHuman ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: CALL_OW 44
13491: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13492: LD_ADDR_EXP 42
13496: PUSH
13497: LD_EXP 42
13501: PUSH
13502: LD_VAR 0 3
13506: ADD
13507: ST_TO_ADDR
// end ;
13508: GO 13437
13510: POP
13511: POP
// for i = 1 to mech do
13512: LD_ADDR_VAR 0 2
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_VAR 0 7
13526: PUSH
13527: FOR_TO
13528: IFFALSE 13585
// begin PrepareHuman ( false , 3 , skill ) ;
13530: LD_INT 0
13532: PPUSH
13533: LD_INT 3
13535: PPUSH
13536: LD_VAR 0 10
13540: PPUSH
13541: CALL_OW 380
// un := CreateHuman ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: CALL_OW 44
13554: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13567: LD_ADDR_EXP 42
13571: PUSH
13572: LD_EXP 42
13576: PUSH
13577: LD_VAR 0 3
13581: ADD
13582: ST_TO_ADDR
// end ;
13583: GO 13527
13585: POP
13586: POP
// for i = 1 to tank do
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: DOUBLE
13593: LD_INT 1
13595: DEC
13596: ST_TO_ADDR
13597: LD_VAR 0 8
13601: PUSH
13602: FOR_TO
13603: IFFALSE 13849
// begin Randomize ;
13605: CALL_OW 10
// if i < 3 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 3
13616: LESS
13617: IFFALSE 13726
// begin vc_chassis := us_medium_tracked ;
13619: LD_ADDR_OWVAR 37
13623: PUSH
13624: LD_INT 3
13626: ST_TO_ADDR
// vc_engine := engine_combustion ;
13627: LD_ADDR_OWVAR 39
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// vc_control := control_manual ;
13635: LD_ADDR_OWVAR 38
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13643: LD_ADDR_OWVAR 40
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 9
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 1
13660: PPUSH
13661: LD_INT 2
13663: PPUSH
13664: CALL_OW 12
13668: ARRAY
13669: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13670: LD_ADDR_OWVAR 41
13674: PUSH
13675: LD_INT 35
13677: PPUSH
13678: LD_INT 55
13680: PPUSH
13681: CALL_OW 12
13685: ST_TO_ADDR
// un := CreateVehicle ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: CALL_OW 45
13695: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13696: LD_VAR 0 3
13700: PPUSH
13701: LD_INT 5
13703: PPUSH
13704: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13708: LD_ADDR_EXP 42
13712: PUSH
13713: LD_EXP 42
13717: PUSH
13718: LD_VAR 0 3
13722: ADD
13723: ST_TO_ADDR
// end else
13724: GO 13847
// begin uc_nation := 3 ;
13726: LD_ADDR_OWVAR 21
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13734: LD_ADDR_OWVAR 37
13738: PUSH
13739: LD_INT 22
13741: ST_TO_ADDR
// vc_engine := engine_combustion ;
13742: LD_ADDR_OWVAR 39
13746: PUSH
13747: LD_INT 1
13749: ST_TO_ADDR
// vc_control := control_manual ;
13750: LD_ADDR_OWVAR 38
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13758: LD_ADDR_OWVAR 40
13762: PUSH
13763: LD_INT 51
13765: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13766: LD_ADDR_OWVAR 41
13770: PUSH
13771: LD_INT 35
13773: PPUSH
13774: LD_INT 55
13776: PPUSH
13777: CALL_OW 12
13781: ST_TO_ADDR
// un := CreateVehicle ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: CALL_OW 45
13791: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13792: LD_VAR 0 3
13796: PPUSH
13797: LD_INT 496
13799: PPUSH
13800: CALL_OW 234
// SetTag ( un , 5 ) ;
13804: LD_VAR 0 3
13808: PPUSH
13809: LD_INT 5
13811: PPUSH
13812: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13816: LD_VAR 0 3
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: LD_INT 100
13826: PPUSH
13827: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13831: LD_ADDR_EXP 42
13835: PUSH
13836: LD_EXP 42
13840: PUSH
13841: LD_VAR 0 3
13845: ADD
13846: ST_TO_ADDR
// end ; end ;
13847: GO 13602
13849: POP
13850: POP
// end ; end_of_file
13851: LD_VAR 0 1
13855: RET
// export function Action ; begin
13856: LD_INT 0
13858: PPUSH
// InGameOn ;
13859: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13863: LD_INT 151
13865: PPUSH
13866: LD_INT 107
13868: PPUSH
13869: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13873: LD_EXP 38
13877: PPUSH
13878: LD_INT 171
13880: PPUSH
13881: LD_INT 108
13883: PPUSH
13884: LD_INT 0
13886: PPUSH
13887: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13891: LD_EXP 39
13895: PPUSH
13896: LD_INT 172
13898: PPUSH
13899: LD_INT 110
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13909: LD_EXP 38
13913: PPUSH
13914: LD_INT 156
13916: PPUSH
13917: LD_INT 107
13919: PPUSH
13920: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13924: LD_EXP 39
13928: PPUSH
13929: LD_INT 154
13931: PPUSH
13932: LD_INT 105
13934: PPUSH
13935: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13946: LD_EXP 38
13950: PPUSH
13951: CALL_OW 250
13955: PUSH
13956: LD_INT 156
13958: EQUAL
13959: PUSH
13960: LD_EXP 38
13964: PPUSH
13965: CALL_OW 251
13969: PUSH
13970: LD_INT 107
13972: EQUAL
13973: AND
13974: IFFALSE 13939
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13976: LD_EXP 38
13980: PUSH
13981: LD_EXP 39
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
13997: LD_EXP 38
14001: PPUSH
14002: LD_STRING D1-A-1
14004: PPUSH
14005: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14009: LD_EXP 39
14013: PPUSH
14014: LD_STRING D1-B-1
14016: PPUSH
14017: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14021: LD_EXP 38
14025: PPUSH
14026: LD_STRING D1-A-2
14028: PPUSH
14029: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14033: LD_EXP 39
14037: PPUSH
14038: LD_STRING D1-B-2
14040: PPUSH
14041: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14045: LD_EXP 38
14049: PUSH
14050: LD_EXP 39
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: LD_INT 147
14061: PPUSH
14062: LD_INT 108
14064: PPUSH
14065: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14069: LD_EXP 38
14073: PPUSH
14074: LD_STRING D1-A-3
14076: PPUSH
14077: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14081: LD_INT 4
14083: PPUSH
14084: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14088: LD_EXP 38
14092: PPUSH
14093: LD_INT 35
14095: PPUSH
14096: CALL_OW 296
14100: PUSH
14101: LD_INT 8
14103: LESS
14104: IFFALSE 14081
// ComTurnUnit ( guyA , guyB ) ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_EXP 39
14115: PPUSH
14116: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14120: LD_EXP 39
14124: PPUSH
14125: LD_EXP 38
14129: PPUSH
14130: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14134: LD_EXP 38
14138: PPUSH
14139: LD_STRING D1-A-10
14141: PPUSH
14142: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14146: LD_EXP 39
14150: PPUSH
14151: LD_STRING D1-B-10
14153: PPUSH
14154: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14158: LD_EXP 38
14162: PPUSH
14163: LD_STRING D1-A-11
14165: PPUSH
14166: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14170: LD_EXP 39
14174: PPUSH
14175: LD_STRING D1-B-11
14177: PPUSH
14178: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14182: LD_EXP 38
14186: PPUSH
14187: LD_STRING D1-A-12
14189: PPUSH
14190: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14194: LD_EXP 39
14198: PPUSH
14199: LD_STRING D1-B-12
14201: PPUSH
14202: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14206: LD_EXP 38
14210: PPUSH
14211: LD_STRING D1-A-13
14213: PPUSH
14214: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14218: LD_EXP 39
14222: PPUSH
14223: LD_STRING D1-B-13
14225: PPUSH
14226: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14230: LD_EXP 38
14234: PPUSH
14235: LD_STRING D1-A-14
14237: PPUSH
14238: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14242: LD_EXP 39
14246: PPUSH
14247: LD_STRING D1-B-14
14249: PPUSH
14250: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14254: LD_EXP 38
14258: PPUSH
14259: LD_STRING D1-A-15
14261: PPUSH
14262: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14266: LD_EXP 39
14270: PPUSH
14271: LD_STRING D1-B-15
14273: PPUSH
14274: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14278: LD_EXP 38
14282: PPUSH
14283: LD_STRING D1-A-16
14285: PPUSH
14286: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14290: LD_EXP 39
14294: PPUSH
14295: LD_STRING D1-B-16
14297: PPUSH
14298: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14302: LD_EXP 38
14306: PPUSH
14307: LD_STRING D1-A-17
14309: PPUSH
14310: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14314: LD_EXP 39
14318: PPUSH
14319: LD_STRING D1-B-17
14321: PPUSH
14322: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14326: LD_EXP 38
14330: PPUSH
14331: LD_STRING D1-A-18
14333: PPUSH
14334: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14338: LD_INT 35
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14348: LD_EXP 38
14352: PUSH
14353: LD_EXP 39
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: LD_INT 35
14364: PPUSH
14365: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14369: LD_INT 4
14371: PPUSH
14372: CALL_OW 67
// until IsInUnit ( guyA ) ;
14376: LD_EXP 38
14380: PPUSH
14381: CALL_OW 310
14385: IFFALSE 14369
// Wait ( 0 0$02 ) ;
14387: LD_INT 70
14389: PPUSH
14390: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14394: LD_EXP 38
14398: PPUSH
14399: LD_STRING D1-A-19
14401: PPUSH
14402: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14406: LD_EXP 39
14410: PPUSH
14411: LD_STRING D1-B-19
14413: PPUSH
14414: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14418: LD_EXP 38
14422: PPUSH
14423: LD_STRING D1-A-20
14425: PPUSH
14426: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14430: LD_INT 10
14432: PPUSH
14433: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14437: LD_EXP 39
14441: PPUSH
14442: LD_STRING D1-B-20
14444: PPUSH
14445: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14449: LD_EXP 38
14453: PPUSH
14454: LD_STRING D1-A-21
14456: PPUSH
14457: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14461: LD_EXP 39
14465: PPUSH
14466: LD_STRING D1-B-21
14468: PPUSH
14469: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14473: LD_EXP 38
14477: PPUSH
14478: LD_STRING D1-A-22
14480: PPUSH
14481: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D1-B-22
14492: PPUSH
14493: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14497: LD_EXP 38
14501: PPUSH
14502: LD_STRING D1-A-23
14504: PPUSH
14505: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14509: LD_EXP 39
14513: PPUSH
14514: LD_STRING D1-B-23
14516: PPUSH
14517: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14521: LD_EXP 38
14525: PPUSH
14526: LD_STRING D1-A-24
14528: PPUSH
14529: CALL_OW 88
// InGameOff ;
14533: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14537: LD_STRING M_main
14539: PPUSH
14540: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14544: LD_INT 4
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 343
// game_status := true ;
14554: LD_ADDR_EXP 29
14558: PUSH
14559: LD_INT 1
14561: ST_TO_ADDR
// end ;
14562: LD_VAR 0 1
14566: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14567: LD_INT 1
14569: PPUSH
14570: CALL 6358 0 1
14574: PUSH
14575: LD_INT 0
14577: GREATER
14578: IFFALSE 14680
14580: GO 14582
14582: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14590: LD_INT 1
14592: PPUSH
14593: CALL 6358 0 1
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: CALL_OW 461
14606: PUSH
14607: LD_INT 1
14609: NONEQUAL
14610: IFFALSE 14583
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14612: LD_EXP 38
14616: PPUSH
14617: CALL_OW 300
14621: PUSH
14622: LD_EXP 39
14626: PPUSH
14627: CALL_OW 300
14631: AND
14632: PUSH
14633: LD_EXP 30
14637: NOT
14638: AND
14639: IFFALSE 14665
// begin Say ( guyA , DL-A-1 ) ;
14641: LD_EXP 38
14645: PPUSH
14646: LD_STRING DL-A-1
14648: PPUSH
14649: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14653: LD_EXP 39
14657: PPUSH
14658: LD_STRING DL-B-1
14660: PPUSH
14661: CALL_OW 88
// end ; if not helps_can_arrive then
14665: LD_EXP 31
14669: NOT
14670: IFFALSE 14680
// helps_can_arrive := true ;
14672: LD_ADDR_EXP 31
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// end ;
14680: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14681: LD_INT 1
14683: PPUSH
14684: CALL 6358 0 1
14688: PUSH
14689: LD_INT 0
14691: GREATER
14692: PUSH
14693: LD_EXP 38
14697: PPUSH
14698: CALL_OW 300
14702: AND
14703: PUSH
14704: LD_EXP 39
14708: PPUSH
14709: CALL_OW 300
14713: AND
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 25
14727: PUSH
14728: LD_INT 12
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: PUSH
14744: LD_INT 0
14746: EQUAL
14747: AND
14748: PUSH
14749: LD_INT 1
14751: PPUSH
14752: LD_INT 25
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: PPUSH
14767: LD_EXP 38
14771: PPUSH
14772: CALL_OW 74
14776: PPUSH
14777: CALL_OW 292
14781: AND
14782: IFFALSE 14823
14784: GO 14786
14786: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14787: LD_EXP 38
14791: PPUSH
14792: LD_STRING DA-A-1
14794: PPUSH
14795: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14799: LD_EXP 39
14803: PPUSH
14804: LD_STRING DA-B-1
14806: PPUSH
14807: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14811: LD_EXP 38
14815: PPUSH
14816: LD_STRING DA-A-2
14818: PPUSH
14819: CALL_OW 88
// end ;
14823: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14824: LD_EXP 29
14828: PUSH
14829: LD_EXP 38
14833: PPUSH
14834: LD_INT 6
14836: PPUSH
14837: CALL_OW 299
14841: PUSH
14842: LD_INT 7
14844: LESS
14845: AND
14846: IFFALSE 14899
14848: GO 14850
14850: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14851: LD_INT 117
14853: PPUSH
14854: LD_INT 50
14856: PPUSH
14857: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14861: LD_INT 1
14863: PPUSH
14864: CALL 9995 0 1
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_STRING D5-A-1
14875: PPUSH
14876: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14880: LD_INT 1
14882: PPUSH
14883: CALL 9995 0 1
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: LD_STRING D5-B-1
14894: PPUSH
14895: CALL_OW 88
// end ;
14899: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14900: LD_INT 7
14902: PPUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: PUSH
14918: LD_INT 0
14920: GREATER
14921: IFFALSE 15066
14923: GO 14925
14925: DISABLE
// begin Wait ( 0 0$03 ) ;
14926: LD_INT 105
14928: PPUSH
14929: CALL_OW 67
// DialogueOn ;
14933: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14937: LD_INT 1
14939: PPUSH
14940: CALL 9995 0 1
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_STRING D6-A-1
14951: PPUSH
14952: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14956: LD_INT 1
14958: PPUSH
14959: CALL 9995 0 1
14963: PUSH
14964: LD_INT 2
14966: ARRAY
14967: PPUSH
14968: LD_STRING D6-B-1
14970: PPUSH
14971: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14975: LD_INT 95
14977: PPUSH
14978: LD_INT 8
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_INT 20
14986: PPUSH
14987: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
14991: LD_INT 10
14993: PPUSH
14994: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
14998: LD_INT 1
15000: PPUSH
15001: CALL 9995 0 1
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: LD_STRING D6-A-2
15012: PPUSH
15013: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15017: LD_INT 1
15019: PPUSH
15020: CALL 9995 0 1
15024: PUSH
15025: LD_INT 2
15027: ARRAY
15028: PPUSH
15029: LD_STRING D6-B-2
15031: PPUSH
15032: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15036: LD_INT 1
15038: PPUSH
15039: CALL 9995 0 1
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_STRING D6-A-3
15050: PPUSH
15051: CALL_OW 88
// DialogueOff ;
15055: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15059: LD_STRING M_base
15061: PPUSH
15062: CALL_OW 337
// end ;
15066: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15067: LD_EXP 30
15071: NOT
15072: PUSH
15073: LD_INT 22
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_INT 0
15104: GREATER
15105: AND
15106: IFFALSE 15239
15108: GO 15110
15110: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15111: LD_INT 35
15113: PPUSH
15114: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15118: LD_INT 22
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 21
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 69
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL 9995 0 1
15154: PUSH
15155: LD_INT 1
15157: ARRAY
15158: PPUSH
15159: CALL_OW 74
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL 9995 0 1
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 296
15180: PUSH
15181: LD_INT 7
15183: LESS
15184: IFFALSE 15111
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15186: LD_INT 1
15188: PPUSH
15189: CALL 9995 0 1
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_STRING DR-A-1
15200: PPUSH
15201: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15205: LD_INT 1
15207: PPUSH
15208: CALL 9995 0 1
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_STRING DR-B-1
15219: PPUSH
15220: CALL_OW 88
// Wait ( 3 3$00 ) ;
15224: LD_INT 6300
15226: PPUSH
15227: CALL_OW 67
// ru_spotted := true ;
15231: LD_ADDR_EXP 16
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// end ;
15239: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15240: LD_INT 35
15242: PPUSH
15243: CALL_OW 300
15247: NOT
15248: IFFALSE 15272
15250: GO 15252
15252: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15253: LD_INT 1
15255: PPUSH
15256: CALL 9995 0 1
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_STRING DDR-A-1
15267: PPUSH
15268: CALL_OW 88
15272: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15273: LD_INT 1
15275: PPUSH
15276: LD_INT 30
15278: PPUSH
15279: CALL 6209 0 2
15283: IFFALSE 15365
15285: GO 15287
15287: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15288: LD_INT 35
15290: PPUSH
15291: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15295: LD_INT 1
15297: PPUSH
15298: LD_INT 30
15300: PPUSH
15301: CALL 6209 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 461
15314: PUSH
15315: LD_INT 1
15317: NONEQUAL
15318: IFFALSE 15288
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15320: LD_INT 1
15322: PPUSH
15323: CALL 9995 0 1
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: LD_STRING D8-A-1
15334: PPUSH
15335: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15339: LD_INT 1
15341: PPUSH
15342: CALL 9995 0 1
15346: PUSH
15347: LD_INT 2
15349: ARRAY
15350: PPUSH
15351: LD_STRING D8-B-1
15353: PPUSH
15354: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15358: LD_STRING M_mineok
15360: PPUSH
15361: CALL_OW 337
// end ;
15365: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15366: LD_INT 22
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 30
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 57
15391: PUSH
15392: EMPTY
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: PUSH
15409: LD_INT 1
15411: GREATER
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: LD_INT 57
15438: PUSH
15439: EMPTY
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: PUSH
15456: LD_INT 1
15458: EQUAL
15459: PUSH
15460: LD_INT 35
15462: PPUSH
15463: CALL_OW 300
15467: NOT
15468: AND
15469: OR
15470: IFFALSE 15522
15472: GO 15474
15474: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 25
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: PUSH
15504: LD_INT 1
15506: ARRAY
15507: PPUSH
15508: LD_STRING D7-A-1
15510: PPUSH
15511: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15515: LD_STRING M_baseok
15517: PPUSH
15518: CALL_OW 337
// end ;
15522: END
// every 0 0$01 trigger mine_ck do
15523: LD_EXP 35
15527: IFFALSE 15558
15529: GO 15531
15531: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15532: LD_INT 1
15534: PPUSH
15535: CALL 9995 0 1
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: PPUSH
15544: LD_STRING D9-A-1
15546: PPUSH
15547: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15551: LD_STRING M_minedest
15553: PPUSH
15554: CALL_OW 337
// end ;
15558: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15559: LD_EXP 29
15563: IFFALSE 16069
15565: GO 15567
15567: DISABLE
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15575: LD_OWVAR 67
15579: PPUSH
15580: CALL 11896 0 1
// if not helps_can_arrive then
15584: LD_EXP 31
15588: NOT
15589: IFFALSE 15617
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15591: LD_EXP 40
15595: PUSH
15596: LD_INT 1
15598: ARRAY
15599: PPUSH
15600: LD_STRING DB-Delay
15602: PPUSH
15603: CALL_OW 94
// time := 10 10$00 ;
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 21000
15614: ST_TO_ADDR
// end else
15615: GO 15625
// time := 3 3$00 ;
15617: LD_ADDR_VAR 0 1
15621: PUSH
15622: LD_INT 6300
15624: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 35
15637: MINUS
15638: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15639: LD_INT 35
15641: PPUSH
15642: CALL_OW 67
// end until time = 0 0$00 ;
15646: LD_VAR 0 1
15650: PUSH
15651: LD_INT 0
15653: EQUAL
15654: IFFALSE 15625
// helps_arrive := true ;
15656: LD_ADDR_EXP 30
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// if IsLive ( guyA ) then
15664: LD_EXP 38
15668: PPUSH
15669: CALL_OW 300
15673: IFFALSE 15687
// r := guyA else
15675: LD_ADDR_VAR 0 4
15679: PUSH
15680: LD_EXP 38
15684: ST_TO_ADDR
15685: GO 15697
// r := guyB ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_EXP 39
15696: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15697: LD_EXP 40
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: LD_STRING D2-A-1
15708: PPUSH
15709: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15713: LD_VAR 0 4
15717: PPUSH
15718: LD_STRING D2-B-1
15720: PPUSH
15721: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15725: LD_EXP 40
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PPUSH
15734: LD_STRING D2-A-2
15736: PPUSH
15737: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15741: LD_VAR 0 4
15745: PPUSH
15746: LD_STRING D2-B-2
15748: PPUSH
15749: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15753: LD_EXP 40
15757: PUSH
15758: LD_INT 1
15760: ARRAY
15761: PPUSH
15762: LD_STRING D2-A-3
15764: PPUSH
15765: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15769: LD_VAR 0 4
15773: PPUSH
15774: LD_STRING D2-B-3
15776: PPUSH
15777: CALL_OW 88
// to_veh := [ ] ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: DOUBLE
15794: LD_INT 1
15796: DEC
15797: ST_TO_ADDR
15798: LD_EXP 40
15802: PUSH
15803: FOR_TO
15804: IFFALSE 16067
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15806: LD_EXP 40
15810: PUSH
15811: LD_VAR 0 2
15815: ARRAY
15816: PPUSH
15817: CALL_OW 110
15821: PUSH
15822: LD_INT 3
15824: EQUAL
15825: IFFALSE 15851
// to_veh := to_veh ^ Beta_Squad [ i ] else
15827: LD_ADDR_VAR 0 5
15831: PUSH
15832: LD_VAR 0 5
15836: PUSH
15837: LD_EXP 40
15841: PUSH
15842: LD_VAR 0 2
15846: ARRAY
15847: ADD
15848: ST_TO_ADDR
15849: GO 15976
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 2
15860: ARRAY
15861: PPUSH
15862: CALL_OW 110
15866: PUSH
15867: LD_INT 5
15869: EQUAL
15870: IFFALSE 15955
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15872: LD_EXP 40
15876: PUSH
15877: LD_VAR 0 2
15881: ARRAY
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 5
15903: PPUSH
15904: LD_INT 0
15906: PPUSH
15907: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15911: LD_VAR 0 5
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_EXP 40
15924: PUSH
15925: LD_VAR 0 2
15929: ARRAY
15930: PPUSH
15931: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_VAR 0 5
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 3
15952: ST_TO_ADDR
// end else
15953: GO 15976
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15955: LD_EXP 40
15959: PUSH
15960: LD_VAR 0 2
15964: ARRAY
15965: PPUSH
15966: LD_INT 5
15968: PPUSH
15969: LD_INT 0
15971: PPUSH
15972: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15976: LD_EXP 40
15980: PUSH
15981: LD_VAR 0 2
15985: ARRAY
15986: PPUSH
15987: LD_INT 165
15989: PPUSH
15990: LD_INT 105
15992: PPUSH
15993: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
15997: LD_INT 70
15999: PPUSH
16000: LD_INT 140
16002: PPUSH
16003: CALL_OW 12
16007: PPUSH
16008: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16012: LD_EXP 40
16016: PUSH
16017: LD_VAR 0 2
16021: ARRAY
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 235
// if i = 1 then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: IFFALSE 16050
// CenterNowOnXY ( 168 , 109 ) ;
16040: LD_INT 168
16042: PPUSH
16043: LD_INT 109
16045: PPUSH
16046: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16050: LD_EXP 40
16054: PUSH
16055: LD_VAR 0 2
16059: ARRAY
16060: PPUSH
16061: CALL_OW 141
// end ;
16065: GO 15803
16067: POP
16068: POP
// end ;
16069: PPOPN 5
16071: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16072: LD_EXP 30
16076: IFFALSE 17105
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
// begin Wait ( 5 5$00 ) ;
16085: LD_INT 10500
16087: PPUSH
16088: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16092: LD_OWVAR 67
16096: PPUSH
16097: CALL 12585 0 1
// to_veh := [ ] ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: EMPTY
16107: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: DOUBLE
16114: LD_INT 1
16116: DEC
16117: ST_TO_ADDR
16118: LD_EXP 41
16122: PUSH
16123: FOR_TO
16124: IFFALSE 16352
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16126: LD_EXP 41
16130: PUSH
16131: LD_VAR 0 1
16135: ARRAY
16136: PPUSH
16137: CALL_OW 110
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16171
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16147: LD_ADDR_VAR 0 2
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: LD_EXP 41
16161: PUSH
16162: LD_VAR 0 1
16166: ARRAY
16167: ADD
16168: ST_TO_ADDR
16169: GO 16296
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16171: LD_EXP 41
16175: PUSH
16176: LD_VAR 0 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 110
16186: PUSH
16187: LD_INT 5
16189: EQUAL
16190: IFFALSE 16275
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16192: LD_EXP 41
16196: PUSH
16197: LD_VAR 0 1
16201: ARRAY
16202: PPUSH
16203: LD_INT 4
16205: PPUSH
16206: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 5
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: LD_EXP 41
16244: PUSH
16245: LD_VAR 0 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: CALL_OW 3
16272: ST_TO_ADDR
// end else
16273: GO 16296
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16275: LD_EXP 41
16279: PUSH
16280: LD_VAR 0 1
16284: ARRAY
16285: PPUSH
16286: LD_INT 5
16288: PPUSH
16289: LD_INT 0
16291: PPUSH
16292: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16296: LD_EXP 41
16300: PUSH
16301: LD_VAR 0 1
16305: ARRAY
16306: PPUSH
16307: LD_INT 164
16309: PPUSH
16310: LD_INT 104
16312: PPUSH
16313: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16317: LD_INT 70
16319: PPUSH
16320: LD_INT 140
16322: PPUSH
16323: CALL_OW 12
16327: PPUSH
16328: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16332: LD_EXP 41
16336: PUSH
16337: LD_VAR 0 1
16341: ARRAY
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 235
// end ;
16350: GO 16123
16352: POP
16353: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16354: LD_EXP 41
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_STRING D3-A-1
16365: PPUSH
16366: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16370: LD_INT 1
16372: PPUSH
16373: CALL 9995 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_STRING D3-B-1
16384: PPUSH
16385: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16389: LD_EXP 41
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: LD_STRING D3-A-2
16400: PPUSH
16401: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16405: LD_INT 1
16407: PPUSH
16408: CALL 9995 0 1
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_STRING D3-B-2
16419: PPUSH
16420: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16424: LD_EXP 41
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_STRING D3-A-3
16435: PPUSH
16436: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16440: LD_INT 1
16442: PPUSH
16443: CALL 9995 0 1
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: LD_STRING D3-B-3
16454: PPUSH
16455: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16459: LD_EXP 41
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: PPUSH
16468: LD_STRING D3-A-4
16470: PPUSH
16471: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16475: LD_INT 1
16477: PPUSH
16478: CALL 9995 0 1
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_STRING D3-B-4
16489: PPUSH
16490: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16494: LD_EXP 41
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: LD_STRING D3-A-5
16505: PPUSH
16506: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16510: LD_INT 1
16512: PPUSH
16513: CALL 9995 0 1
16517: PUSH
16518: LD_INT 1
16520: ARRAY
16521: PPUSH
16522: LD_STRING D3-B-5
16524: PPUSH
16525: CALL_OW 88
// for i = 1 to Gamma_Squad do
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: DOUBLE
16535: LD_INT 1
16537: DEC
16538: ST_TO_ADDR
16539: LD_EXP 41
16543: PUSH
16544: FOR_TO
16545: IFFALSE 16567
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16547: LD_EXP 41
16551: PUSH
16552: LD_VAR 0 1
16556: ARRAY
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 235
16565: GO 16544
16567: POP
16568: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16569: LD_INT 6300
16571: PUSH
16572: LD_INT 10500
16574: PUSH
16575: LD_INT 11550
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: LD_OWVAR 67
16587: ARRAY
16588: PPUSH
16589: CALL_OW 67
// AddZetaSquad ;
16593: CALL 13314 0 0
// Wait ( 0 0$10 ) ;
16597: LD_INT 350
16599: PPUSH
16600: CALL_OW 67
// to_veh := [ ] ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: EMPTY
16610: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: DOUBLE
16617: LD_INT 1
16619: DEC
16620: ST_TO_ADDR
16621: LD_EXP 42
16625: PUSH
16626: FOR_TO
16627: IFFALSE 16837
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16629: LD_EXP 42
16633: PUSH
16634: LD_VAR 0 1
16638: ARRAY
16639: PPUSH
16640: CALL_OW 110
16644: PUSH
16645: LD_INT 3
16647: EQUAL
16648: IFFALSE 16674
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_EXP 42
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: ADD
16671: ST_TO_ADDR
16672: GO 16799
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16674: LD_EXP 42
16678: PUSH
16679: LD_VAR 0 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 110
16689: PUSH
16690: LD_INT 5
16692: EQUAL
16693: IFFALSE 16778
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16695: LD_EXP 42
16699: PUSH
16700: LD_VAR 0 1
16704: ARRAY
16705: PPUSH
16706: LD_INT 4
16708: PPUSH
16709: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 5
16726: PPUSH
16727: LD_INT 0
16729: PPUSH
16730: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: PPUSH
16743: LD_EXP 42
16747: PUSH
16748: LD_VAR 0 1
16752: ARRAY
16753: PPUSH
16754: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_VAR 0 2
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 3
16775: ST_TO_ADDR
// end else
16776: GO 16799
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16778: LD_EXP 42
16782: PUSH
16783: LD_VAR 0 1
16787: ARRAY
16788: PPUSH
16789: LD_INT 5
16791: PPUSH
16792: LD_INT 0
16794: PPUSH
16795: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16799: LD_EXP 42
16803: PUSH
16804: LD_VAR 0 1
16808: ARRAY
16809: PPUSH
16810: LD_INT 165
16812: PPUSH
16813: LD_INT 105
16815: PPUSH
16816: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16820: LD_INT 70
16822: PPUSH
16823: LD_INT 140
16825: PPUSH
16826: CALL_OW 12
16830: PPUSH
16831: CALL_OW 67
// end ;
16835: GO 16626
16837: POP
16838: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16839: LD_EXP 42
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: LD_STRING D4-A-1
16850: PPUSH
16851: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16855: LD_INT 1
16857: PPUSH
16858: CALL 9995 0 1
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: LD_STRING D4-B-1
16869: PPUSH
16870: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16874: LD_EXP 42
16878: PUSH
16879: LD_INT 1
16881: ARRAY
16882: PPUSH
16883: LD_STRING D4-A-2
16885: PPUSH
16886: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16890: LD_INT 1
16892: PPUSH
16893: CALL 9995 0 1
16897: PUSH
16898: LD_INT 1
16900: ARRAY
16901: PPUSH
16902: LD_STRING D4-B-2
16904: PPUSH
16905: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16909: LD_EXP 42
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: LD_STRING D4-A-3
16920: PPUSH
16921: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16925: LD_INT 1
16927: PPUSH
16928: CALL 9995 0 1
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_STRING D4-B-3
16939: PPUSH
16940: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16944: LD_EXP 42
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PPUSH
16953: LD_STRING D4-A-4
16955: PPUSH
16956: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16960: LD_INT 1
16962: PPUSH
16963: CALL 9995 0 1
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: LD_STRING D4-B-4
16974: PPUSH
16975: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16979: LD_EXP 42
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: LD_STRING D4-A-5
16990: PPUSH
16991: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
16995: LD_INT 1
16997: PPUSH
16998: CALL 9995 0 1
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: LD_STRING D4-B-5
17009: PPUSH
17010: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17014: LD_EXP 42
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PPUSH
17023: LD_STRING D4-A-6
17025: PPUSH
17026: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17030: LD_INT 1
17032: PPUSH
17033: CALL 9995 0 1
17037: PUSH
17038: LD_INT 1
17040: ARRAY
17041: PPUSH
17042: LD_STRING D4-B-6
17044: PPUSH
17045: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17049: LD_EXP 42
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: LD_STRING D4-A-7
17060: PPUSH
17061: CALL_OW 94
// for i = 1 to Zeta_Squad do
17065: LD_ADDR_VAR 0 1
17069: PUSH
17070: DOUBLE
17071: LD_INT 1
17073: DEC
17074: ST_TO_ADDR
17075: LD_EXP 42
17079: PUSH
17080: FOR_TO
17081: IFFALSE 17103
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17083: LD_EXP 42
17087: PUSH
17088: LD_VAR 0 1
17092: ARRAY
17093: PPUSH
17094: LD_INT 1
17096: PPUSH
17097: CALL_OW 235
17101: GO 17080
17103: POP
17104: POP
// end ;
17105: PPOPN 2
17107: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17108: LD_INT 11
17110: PPUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 70
17127: PUSH
17128: LD_INT 0
17130: GREATER
17131: IFFALSE 17156
17133: GO 17135
17135: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17136: LD_EXP 38
17140: PPUSH
17141: LD_STRING D10-A-1
17143: PPUSH
17144: CALL_OW 88
// ru_spotted := true ;
17148: LD_ADDR_EXP 16
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// end ;
17156: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17157: LD_EXP 38
17161: PPUSH
17162: CALL_OW 301
17166: PUSH
17167: LD_EXP 39
17171: PPUSH
17172: CALL_OW 301
17176: OR
17177: IFFALSE 17189
17179: GO 17181
17181: DISABLE
// begin YouLost ( DieP ) ;
17182: LD_STRING DieP
17184: PPUSH
17185: CALL_OW 104
// end ;
17189: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17190: LD_INT 34
17192: PUSH
17193: LD_INT 8
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: IFFALSE 17217
17206: GO 17208
17208: DISABLE
// sib_bomb_constructed := true ;
17209: LD_ADDR_EXP 36
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
17217: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17218: LD_EXP 29
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PUSH
17238: LD_INT 0
17240: EQUAL
17241: AND
17242: IFFALSE 17445
17244: GO 17246
17246: DISABLE
17247: LD_INT 0
17249: PPUSH
// begin game_status := false ;
17250: LD_ADDR_EXP 29
17254: PUSH
17255: LD_INT 0
17257: ST_TO_ADDR
// if not depotConstructed then
17258: LD_EXP 2
17262: NOT
17263: IFFALSE 17272
// SetAchievement ( ACH_NODEPOT ) ;
17265: LD_STRING ACH_NODEPOT
17267: PPUSH
17268: CALL_OW 543
// if Difficulty = 3 then
17272: LD_OWVAR 67
17276: PUSH
17277: LD_INT 3
17279: EQUAL
17280: IFFALSE 17289
// SetAchievement ( ACH_HARD ) ;
17282: LD_STRING ACH_HARD
17284: PPUSH
17285: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17289: LD_OWVAR 1
17293: PUSH
17294: LD_INT 35
17296: DIVREAL
17297: PUSH
17298: LD_INT 60
17300: DIVREAL
17301: PUSH
17302: LD_INT 70
17304: PUSH
17305: LD_INT 60
17307: PUSH
17308: LD_INT 50
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_OWVAR 67
17320: ARRAY
17321: LESS
17322: IFFALSE 17336
// AddMedal ( play , 1 ) else
17324: LD_STRING play
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: CALL_OW 101
17334: GO 17347
// AddMedal ( play , - 1 ) ;
17336: LD_STRING play
17338: PPUSH
17339: LD_INT 1
17341: NEG
17342: PPUSH
17343: CALL_OW 101
// if sib_bomb_constructed then
17347: LD_EXP 36
17351: IFFALSE 17365
// AddMedal ( sibbomb , 1 ) else
17353: LD_STRING sibbomb
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: CALL_OW 101
17363: GO 17376
// AddMedal ( sibbomb , - 1 ) ;
17365: LD_STRING sibbomb
17367: PPUSH
17368: LD_INT 1
17370: NEG
17371: PPUSH
17372: CALL_OW 101
// if mine_constructed and not mine_ck then
17376: LD_EXP 37
17380: PUSH
17381: LD_EXP 35
17385: NOT
17386: AND
17387: IFFALSE 17399
// AddMedal ( mine , 1 ) ;
17389: LD_STRING mine
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 101
// if mine_ck then
17399: LD_EXP 35
17403: IFFALSE 17416
// AddMedal ( mine , - 1 ) ;
17405: LD_STRING mine
17407: PPUSH
17408: LD_INT 1
17410: NEG
17411: PPUSH
17412: CALL_OW 101
// if not mine_constructed then
17416: LD_EXP 37
17420: NOT
17421: IFFALSE 17434
// AddMedal ( mine , - 2 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 2
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// GiveMedals ( Main ) ;
17434: LD_STRING Main
17436: PPUSH
17437: CALL_OW 102
// YouWin ;
17441: CALL_OW 103
// end ; end_of_file
17445: PPOPN 1
17447: END
// every 0 0$03 trigger game_status do var time ;
17448: LD_EXP 29
17452: IFFALSE 17617
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_INT 1050
17467: PUSH
17468: LD_INT 1575
17470: PUSH
17471: LD_INT 2100
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: LD_OWVAR 67
17483: ARRAY
17484: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17485: LD_VAR 0 1
17489: PUSH
17490: LD_INT 0
17492: PPUSH
17493: LD_INT 420
17495: PPUSH
17496: CALL_OW 12
17500: PLUS
17501: PPUSH
17502: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 5
17511: PPUSH
17512: CALL_OW 12
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17524: LD_INT 105
17526: PPUSH
17527: LD_INT 1050
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17539: LD_INT 1
17541: PPUSH
17542: LD_INT 5
17544: PPUSH
17545: CALL_OW 12
17549: PPUSH
17550: LD_INT 148
17552: PPUSH
17553: LD_INT 107
17555: PPUSH
17556: LD_INT 20
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17566: LD_OWVAR 1
17570: PUSH
17571: LD_INT 44100
17573: PUSH
17574: LD_INT 37800
17576: PUSH
17577: LD_INT 33600
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_OWVAR 67
17589: ARRAY
17590: MOD
17591: IFFALSE 17607
// time := time + 0 0$20 ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 700
17605: PLUS
17606: ST_TO_ADDR
// end until game_status = false ;
17607: LD_EXP 29
17611: PUSH
17612: LD_INT 0
17614: EQUAL
17615: IFFALSE 17485
// end ;
17617: PPOPN 1
17619: END
// every 0 0$03 trigger game_status do var time ;
17620: LD_EXP 29
17624: IFFALSE 17778
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 700
17639: PUSH
17640: LD_INT 875
17642: PUSH
17643: LD_INT 1400
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: LD_OWVAR 67
17655: ARRAY
17656: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 0
17664: PPUSH
17665: LD_INT 385
17667: PPUSH
17668: CALL_OW 12
17672: PLUS
17673: PPUSH
17674: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17678: LD_INT 1
17680: PPUSH
17681: LD_INT 5
17683: PPUSH
17684: CALL_OW 12
17688: PPUSH
17689: LD_INT 102
17691: PPUSH
17692: LD_INT 6
17694: PPUSH
17695: LD_INT 25
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17705: LD_OWVAR 1
17709: PUSH
17710: LD_INT 52500
17712: PUSH
17713: LD_INT 46200
17715: PUSH
17716: LD_INT 42000
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: PUSH
17724: LD_OWVAR 67
17728: ARRAY
17729: MOD
17730: IFFALSE 17746
// time := time + 0 0$25 ;
17732: LD_ADDR_VAR 0 1
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 875
17744: PLUS
17745: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17746: LD_OWVAR 1
17750: PUSH
17751: LD_INT 231000
17753: MOD
17754: PUSH
17755: LD_INT 0
17757: EQUAL
17758: IFFALSE 17768
// time := 0 0$30 ;
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_INT 1050
17767: ST_TO_ADDR
// end until game_status = false ;
17768: LD_EXP 29
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17657
// end ;
17778: PPOPN 1
17780: END
// every 0 0$03 trigger game_status do var time ;
17781: LD_EXP 29
17785: IFFALSE 17921
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: LD_INT 1050
17800: PUSH
17801: LD_INT 1575
17803: PUSH
17804: LD_INT 1750
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: LD_OWVAR 67
17816: ARRAY
17817: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17818: LD_VAR 0 1
17822: PUSH
17823: LD_INT 0
17825: PPUSH
17826: LD_INT 385
17828: PPUSH
17829: CALL_OW 12
17833: PLUS
17834: PPUSH
17835: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 5
17844: PPUSH
17845: CALL_OW 12
17849: PPUSH
17850: LD_INT 51
17852: PPUSH
17853: LD_INT 74
17855: PPUSH
17856: LD_INT 25
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17866: LD_OWVAR 1
17870: PUSH
17871: LD_INT 84000
17873: PUSH
17874: LD_INT 105000
17876: PUSH
17877: LD_INT 136500
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_OWVAR 67
17889: ARRAY
17890: MOD
17891: PUSH
17892: LD_INT 0
17894: EQUAL
17895: IFFALSE 17911
// time := time + 0 0$15 ;
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 525
17909: PLUS
17910: ST_TO_ADDR
// end until game_status = false ;
17911: LD_EXP 29
17915: PUSH
17916: LD_INT 0
17918: EQUAL
17919: IFFALSE 17818
// end ; end_of_file
17921: PPOPN 1
17923: END
// every 0 0$01 trigger not debug do
17924: LD_EXP 1
17928: NOT
17929: IFFALSE 17952
17931: GO 17933
17933: DISABLE
// begin enable ;
17934: ENABLE
// Display_Strings := [ #tick , tick ] ;
17935: LD_ADDR_OWVAR 47
17939: PUSH
17940: LD_STRING #tick
17942: PUSH
17943: LD_OWVAR 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
// end ; end_of_file
17952: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
17953: LD_VAR 0 1
17957: PPUSH
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL 34664 0 2
// if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 255
17976: PUSH
17977: LD_INT 3
17979: EQUAL
17980: PUSH
17981: LD_VAR 0 1
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: LD_INT 34
17991: PUSH
17992: LD_INT 46
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 34
18001: PUSH
18002: LD_INT 47
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 34
18011: PUSH
18012: LD_INT 45
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: PUSH
18025: EMPTY
18026: LIST
18027: PPUSH
18028: CALL_OW 69
18032: IN
18033: AND
18034: IFFALSE 18052
// ru_reserve := ru_reserve ^ un ;
18036: LD_ADDR_EXP 9
18040: PUSH
18041: LD_EXP 9
18045: PUSH
18046: LD_VAR 0 1
18050: ADD
18051: ST_TO_ADDR
// if GetSide ( un ) = 3 and not GetWeapon ( un ) in [ ru_siberium_rocket , ru_crane ] then
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 255
18061: PUSH
18062: LD_INT 3
18064: EQUAL
18065: PUSH
18066: LD_VAR 0 1
18070: PPUSH
18071: CALL_OW 264
18075: PUSH
18076: LD_INT 48
18078: PUSH
18079: LD_INT 52
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: IN
18086: NOT
18087: AND
18088: IFFALSE 18105
// ComMoveXY ( un , 65 , 60 ) ;
18090: LD_VAR 0 1
18094: PPUSH
18095: LD_INT 65
18097: PPUSH
18098: LD_INT 60
18100: PPUSH
18101: CALL_OW 111
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18105: LD_VAR 0 1
18109: PUSH
18110: LD_INT 22
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 34
18122: PUSH
18123: LD_INT 48
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: IN
18139: IFFALSE 18192
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18141: LD_INT 12
18143: PPUSH
18144: LD_INT 22
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PPUSH
18154: CALL_OW 70
18158: IFFALSE 18177
// ComAttackPlace ( un , 98 , 10 ) else
18160: LD_VAR 0 1
18164: PPUSH
18165: LD_INT 98
18167: PPUSH
18168: LD_INT 10
18170: PPUSH
18171: CALL_OW 116
18175: GO 18192
// ComAttackPlace ( un , 134 , 99 ) ;
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_INT 134
18184: PPUSH
18185: LD_INT 99
18187: PPUSH
18188: CALL_OW 116
// end ;
18192: PPOPN 2
18194: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18195: LD_VAR 0 1
18199: PPUSH
18200: CALL 34544 0 1
// if GetChassis ( un ) = 25 then
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 265
18213: PUSH
18214: LD_INT 25
18216: EQUAL
18217: IFFALSE 18226
// SetAchievement ( ACH_BEH ) ;
18219: LD_STRING ACH_BEH
18221: PPUSH
18222: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18226: LD_VAR 0 1
18230: PUSH
18231: LD_INT 22
18233: PUSH
18234: LD_INT 3
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 21
18243: PUSH
18244: LD_INT 3
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PPUSH
18255: CALL_OW 69
18259: IN
18260: PUSH
18261: LD_VAR 0 1
18265: PPUSH
18266: CALL_OW 266
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: LD_INT 29
18276: PUSH
18277: LD_INT 30
18279: PUSH
18280: LD_INT 26
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: IN
18289: NOT
18290: AND
18291: IFFALSE 18377
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18293: LD_ADDR_EXP 13
18297: PUSH
18298: LD_EXP 13
18302: PUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 266
18312: ADD
18313: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18314: LD_ADDR_EXP 13
18318: PUSH
18319: LD_EXP 13
18323: PUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 250
18333: ADD
18334: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18335: LD_ADDR_EXP 13
18339: PUSH
18340: LD_EXP 13
18344: PUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 251
18354: ADD
18355: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18356: LD_ADDR_EXP 13
18360: PUSH
18361: LD_EXP 13
18365: PUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 254
18375: ADD
18376: ST_TO_ADDR
// end ; if un in ru_attack_list then
18377: LD_VAR 0 1
18381: PUSH
18382: LD_EXP 10
18386: IN
18387: IFFALSE 18405
// ru_attack_list := ru_attack_list diff un ;
18389: LD_ADDR_EXP 10
18393: PUSH
18394: LD_EXP 10
18398: PUSH
18399: LD_VAR 0 1
18403: DIFF
18404: ST_TO_ADDR
// if un in ru_protector then
18405: LD_VAR 0 1
18409: PUSH
18410: LD_EXP 17
18414: IN
18415: IFFALSE 18433
// ru_protector := ru_protector diff un ;
18417: LD_ADDR_EXP 17
18421: PUSH
18422: LD_EXP 17
18426: PUSH
18427: LD_VAR 0 1
18431: DIFF
18432: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 266
18442: PUSH
18443: LD_INT 30
18445: EQUAL
18446: PUSH
18447: LD_VAR 0 1
18451: PPUSH
18452: CALL_OW 255
18456: PUSH
18457: LD_INT 1
18459: EQUAL
18460: AND
18461: IFFALSE 18471
// mine_ck := true ;
18463: LD_ADDR_EXP 35
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// end ;
18471: PPOPN 1
18473: END
// on BuildingComplete ( un ) do var i ;
18474: LD_INT 0
18476: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 255
18486: PUSH
18487: LD_INT 1
18489: EQUAL
18490: PUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 266
18500: PUSH
18501: LD_INT 0
18503: EQUAL
18504: AND
18505: IFFALSE 18515
// depotConstructed := true ;
18507: LD_ADDR_EXP 2
18511: PUSH
18512: LD_INT 1
18514: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 255
18524: PUSH
18525: LD_INT 1
18527: EQUAL
18528: PUSH
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 266
18538: PUSH
18539: LD_INT 30
18541: EQUAL
18542: AND
18543: IFFALSE 18553
// mine_constructed := true ;
18545: LD_ADDR_EXP 37
18549: PUSH
18550: LD_INT 1
18552: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 255
18562: PUSH
18563: LD_INT 3
18565: EQUAL
18566: PUSH
18567: LD_VAR 0 1
18571: PPUSH
18572: CALL_OW 266
18576: PUSH
18577: LD_INT 0
18579: EQUAL
18580: AND
18581: IFFALSE 18638
// begin for i = 1 to 2 do
18583: LD_ADDR_VAR 0 2
18587: PUSH
18588: DOUBLE
18589: LD_INT 1
18591: DEC
18592: ST_TO_ADDR
18593: LD_INT 2
18595: PUSH
18596: FOR_TO
18597: IFFALSE 18636
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18599: LD_EXP 20
18603: PUSH
18604: LD_VAR 0 2
18608: ARRAY
18609: PPUSH
18610: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18614: LD_EXP 20
18618: PUSH
18619: LD_VAR 0 2
18623: ARRAY
18624: PPUSH
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 180
// end ;
18634: GO 18596
18636: POP
18637: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18638: LD_VAR 0 1
18642: PPUSH
18643: CALL_OW 255
18647: PUSH
18648: LD_INT 3
18650: EQUAL
18651: PUSH
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 266
18661: PUSH
18662: LD_EXP 13
18666: IN
18667: AND
18668: IFFALSE 18708
// for i = 1 to 4 do
18670: LD_ADDR_VAR 0 2
18674: PUSH
18675: DOUBLE
18676: LD_INT 1
18678: DEC
18679: ST_TO_ADDR
18680: LD_INT 4
18682: PUSH
18683: FOR_TO
18684: IFFALSE 18706
// ru_blist := Delete ( ru_blist , 1 ) ;
18686: LD_ADDR_EXP 13
18690: PUSH
18691: LD_EXP 13
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL_OW 3
18703: ST_TO_ADDR
18704: GO 18683
18706: POP
18707: POP
// end ;
18708: PPOPN 2
18710: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18711: LD_VAR 0 1
18715: PPUSH
18716: LD_VAR 0 2
18720: PPUSH
18721: LD_VAR 0 3
18725: PPUSH
18726: CALL 34640 0 3
// end ;
18730: PPOPN 3
18732: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18733: LD_VAR 0 1
18737: PPUSH
18738: CALL 34648 0 1
// end ; end_of_file end_of_file
18742: PPOPN 1
18744: END
// every 0 0$1 do
18745: GO 18747
18747: DISABLE
// begin enable ;
18748: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18749: LD_STRING updateTimer(
18751: PUSH
18752: LD_OWVAR 1
18756: STR
18757: PUSH
18758: LD_STRING );
18760: STR
18761: PPUSH
18762: CALL_OW 559
// end ;
18766: END
// export function SOS_MapStart ( ) ; begin
18767: LD_INT 0
18769: PPUSH
// if streamModeActive then
18770: LD_EXP 44
18774: IFFALSE 18783
// DefineStreamItems ( true ) ;
18776: LD_INT 1
18778: PPUSH
18779: CALL 20587 0 1
// UpdateLuaVariables ( ) ;
18783: CALL 18800 0 0
// UpdateFactoryWaypoints ( ) ;
18787: CALL 33448 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18791: CALL 33705 0 0
// end ;
18795: LD_VAR 0 1
18799: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
18800: LD_INT 0
18802: PPUSH
// if not globalGameSaveCounter then
18803: LD_EXP 43
18807: NOT
18808: IFFALSE 18819
// ToLua ( setGameSaveCounter(0) ) else
18810: LD_STRING setGameSaveCounter(0)
18812: PPUSH
18813: CALL_OW 559
18817: GO 18851
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
18819: LD_ADDR_EXP 43
18823: PUSH
18824: LD_EXP 43
18828: PPUSH
18829: CALL 77662 0 1
18833: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18834: LD_STRING setGameSaveCounter(
18836: PUSH
18837: LD_EXP 43
18841: STR
18842: PUSH
18843: LD_STRING )
18845: STR
18846: PPUSH
18847: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
18851: LD_STRING setGameDifficulty(
18853: PUSH
18854: LD_OWVAR 67
18858: STR
18859: PUSH
18860: LD_STRING )
18862: STR
18863: PPUSH
18864: CALL_OW 559
// end ;
18868: LD_VAR 0 1
18872: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18873: LD_INT 0
18875: PPUSH
// if p2 = stream_mode then
18876: LD_VAR 0 2
18880: PUSH
18881: LD_INT 100
18883: EQUAL
18884: IFFALSE 19887
// begin if not StreamModeActive then
18886: LD_EXP 44
18890: NOT
18891: IFFALSE 18901
// StreamModeActive := true ;
18893: LD_ADDR_EXP 44
18897: PUSH
18898: LD_INT 1
18900: ST_TO_ADDR
// if p3 = 0 then
18901: LD_VAR 0 3
18905: PUSH
18906: LD_INT 0
18908: EQUAL
18909: IFFALSE 18915
// InitStreamMode ;
18911: CALL 20123 0 0
// if p3 = 1 then
18915: LD_VAR 0 3
18919: PUSH
18920: LD_INT 1
18922: EQUAL
18923: IFFALSE 18933
// sRocket := true ;
18925: LD_ADDR_EXP 49
18929: PUSH
18930: LD_INT 1
18932: ST_TO_ADDR
// if p3 = 2 then
18933: LD_VAR 0 3
18937: PUSH
18938: LD_INT 2
18940: EQUAL
18941: IFFALSE 18951
// sSpeed := true ;
18943: LD_ADDR_EXP 48
18947: PUSH
18948: LD_INT 1
18950: ST_TO_ADDR
// if p3 = 3 then
18951: LD_VAR 0 3
18955: PUSH
18956: LD_INT 3
18958: EQUAL
18959: IFFALSE 18969
// sEngine := true ;
18961: LD_ADDR_EXP 50
18965: PUSH
18966: LD_INT 1
18968: ST_TO_ADDR
// if p3 = 4 then
18969: LD_VAR 0 3
18973: PUSH
18974: LD_INT 4
18976: EQUAL
18977: IFFALSE 18987
// sSpec := true ;
18979: LD_ADDR_EXP 47
18983: PUSH
18984: LD_INT 1
18986: ST_TO_ADDR
// if p3 = 5 then
18987: LD_VAR 0 3
18991: PUSH
18992: LD_INT 5
18994: EQUAL
18995: IFFALSE 19005
// sLevel := true ;
18997: LD_ADDR_EXP 51
19001: PUSH
19002: LD_INT 1
19004: ST_TO_ADDR
// if p3 = 6 then
19005: LD_VAR 0 3
19009: PUSH
19010: LD_INT 6
19012: EQUAL
19013: IFFALSE 19023
// sArmoury := true ;
19015: LD_ADDR_EXP 52
19019: PUSH
19020: LD_INT 1
19022: ST_TO_ADDR
// if p3 = 7 then
19023: LD_VAR 0 3
19027: PUSH
19028: LD_INT 7
19030: EQUAL
19031: IFFALSE 19041
// sRadar := true ;
19033: LD_ADDR_EXP 53
19037: PUSH
19038: LD_INT 1
19040: ST_TO_ADDR
// if p3 = 8 then
19041: LD_VAR 0 3
19045: PUSH
19046: LD_INT 8
19048: EQUAL
19049: IFFALSE 19059
// sBunker := true ;
19051: LD_ADDR_EXP 54
19055: PUSH
19056: LD_INT 1
19058: ST_TO_ADDR
// if p3 = 9 then
19059: LD_VAR 0 3
19063: PUSH
19064: LD_INT 9
19066: EQUAL
19067: IFFALSE 19077
// sHack := true ;
19069: LD_ADDR_EXP 55
19073: PUSH
19074: LD_INT 1
19076: ST_TO_ADDR
// if p3 = 10 then
19077: LD_VAR 0 3
19081: PUSH
19082: LD_INT 10
19084: EQUAL
19085: IFFALSE 19095
// sFire := true ;
19087: LD_ADDR_EXP 56
19091: PUSH
19092: LD_INT 1
19094: ST_TO_ADDR
// if p3 = 11 then
19095: LD_VAR 0 3
19099: PUSH
19100: LD_INT 11
19102: EQUAL
19103: IFFALSE 19113
// sRefresh := true ;
19105: LD_ADDR_EXP 57
19109: PUSH
19110: LD_INT 1
19112: ST_TO_ADDR
// if p3 = 12 then
19113: LD_VAR 0 3
19117: PUSH
19118: LD_INT 12
19120: EQUAL
19121: IFFALSE 19131
// sExp := true ;
19123: LD_ADDR_EXP 58
19127: PUSH
19128: LD_INT 1
19130: ST_TO_ADDR
// if p3 = 13 then
19131: LD_VAR 0 3
19135: PUSH
19136: LD_INT 13
19138: EQUAL
19139: IFFALSE 19149
// sDepot := true ;
19141: LD_ADDR_EXP 59
19145: PUSH
19146: LD_INT 1
19148: ST_TO_ADDR
// if p3 = 14 then
19149: LD_VAR 0 3
19153: PUSH
19154: LD_INT 14
19156: EQUAL
19157: IFFALSE 19167
// sFlag := true ;
19159: LD_ADDR_EXP 60
19163: PUSH
19164: LD_INT 1
19166: ST_TO_ADDR
// if p3 = 15 then
19167: LD_VAR 0 3
19171: PUSH
19172: LD_INT 15
19174: EQUAL
19175: IFFALSE 19185
// sKamikadze := true ;
19177: LD_ADDR_EXP 68
19181: PUSH
19182: LD_INT 1
19184: ST_TO_ADDR
// if p3 = 16 then
19185: LD_VAR 0 3
19189: PUSH
19190: LD_INT 16
19192: EQUAL
19193: IFFALSE 19203
// sTroll := true ;
19195: LD_ADDR_EXP 69
19199: PUSH
19200: LD_INT 1
19202: ST_TO_ADDR
// if p3 = 17 then
19203: LD_VAR 0 3
19207: PUSH
19208: LD_INT 17
19210: EQUAL
19211: IFFALSE 19221
// sSlow := true ;
19213: LD_ADDR_EXP 70
19217: PUSH
19218: LD_INT 1
19220: ST_TO_ADDR
// if p3 = 18 then
19221: LD_VAR 0 3
19225: PUSH
19226: LD_INT 18
19228: EQUAL
19229: IFFALSE 19239
// sLack := true ;
19231: LD_ADDR_EXP 71
19235: PUSH
19236: LD_INT 1
19238: ST_TO_ADDR
// if p3 = 19 then
19239: LD_VAR 0 3
19243: PUSH
19244: LD_INT 19
19246: EQUAL
19247: IFFALSE 19257
// sTank := true ;
19249: LD_ADDR_EXP 73
19253: PUSH
19254: LD_INT 1
19256: ST_TO_ADDR
// if p3 = 20 then
19257: LD_VAR 0 3
19261: PUSH
19262: LD_INT 20
19264: EQUAL
19265: IFFALSE 19275
// sRemote := true ;
19267: LD_ADDR_EXP 74
19271: PUSH
19272: LD_INT 1
19274: ST_TO_ADDR
// if p3 = 21 then
19275: LD_VAR 0 3
19279: PUSH
19280: LD_INT 21
19282: EQUAL
19283: IFFALSE 19293
// sPowell := true ;
19285: LD_ADDR_EXP 75
19289: PUSH
19290: LD_INT 1
19292: ST_TO_ADDR
// if p3 = 22 then
19293: LD_VAR 0 3
19297: PUSH
19298: LD_INT 22
19300: EQUAL
19301: IFFALSE 19311
// sTeleport := true ;
19303: LD_ADDR_EXP 78
19307: PUSH
19308: LD_INT 1
19310: ST_TO_ADDR
// if p3 = 23 then
19311: LD_VAR 0 3
19315: PUSH
19316: LD_INT 23
19318: EQUAL
19319: IFFALSE 19329
// sOilTower := true ;
19321: LD_ADDR_EXP 80
19325: PUSH
19326: LD_INT 1
19328: ST_TO_ADDR
// if p3 = 24 then
19329: LD_VAR 0 3
19333: PUSH
19334: LD_INT 24
19336: EQUAL
19337: IFFALSE 19347
// sShovel := true ;
19339: LD_ADDR_EXP 81
19343: PUSH
19344: LD_INT 1
19346: ST_TO_ADDR
// if p3 = 25 then
19347: LD_VAR 0 3
19351: PUSH
19352: LD_INT 25
19354: EQUAL
19355: IFFALSE 19365
// sSheik := true ;
19357: LD_ADDR_EXP 82
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// if p3 = 26 then
19365: LD_VAR 0 3
19369: PUSH
19370: LD_INT 26
19372: EQUAL
19373: IFFALSE 19383
// sEarthquake := true ;
19375: LD_ADDR_EXP 84
19379: PUSH
19380: LD_INT 1
19382: ST_TO_ADDR
// if p3 = 27 then
19383: LD_VAR 0 3
19387: PUSH
19388: LD_INT 27
19390: EQUAL
19391: IFFALSE 19401
// sAI := true ;
19393: LD_ADDR_EXP 85
19397: PUSH
19398: LD_INT 1
19400: ST_TO_ADDR
// if p3 = 28 then
19401: LD_VAR 0 3
19405: PUSH
19406: LD_INT 28
19408: EQUAL
19409: IFFALSE 19419
// sCargo := true ;
19411: LD_ADDR_EXP 88
19415: PUSH
19416: LD_INT 1
19418: ST_TO_ADDR
// if p3 = 29 then
19419: LD_VAR 0 3
19423: PUSH
19424: LD_INT 29
19426: EQUAL
19427: IFFALSE 19437
// sDLaser := true ;
19429: LD_ADDR_EXP 89
19433: PUSH
19434: LD_INT 1
19436: ST_TO_ADDR
// if p3 = 30 then
19437: LD_VAR 0 3
19441: PUSH
19442: LD_INT 30
19444: EQUAL
19445: IFFALSE 19455
// sExchange := true ;
19447: LD_ADDR_EXP 90
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// if p3 = 31 then
19455: LD_VAR 0 3
19459: PUSH
19460: LD_INT 31
19462: EQUAL
19463: IFFALSE 19473
// sFac := true ;
19465: LD_ADDR_EXP 91
19469: PUSH
19470: LD_INT 1
19472: ST_TO_ADDR
// if p3 = 32 then
19473: LD_VAR 0 3
19477: PUSH
19478: LD_INT 32
19480: EQUAL
19481: IFFALSE 19491
// sPower := true ;
19483: LD_ADDR_EXP 92
19487: PUSH
19488: LD_INT 1
19490: ST_TO_ADDR
// if p3 = 33 then
19491: LD_VAR 0 3
19495: PUSH
19496: LD_INT 33
19498: EQUAL
19499: IFFALSE 19509
// sRandom := true ;
19501: LD_ADDR_EXP 93
19505: PUSH
19506: LD_INT 1
19508: ST_TO_ADDR
// if p3 = 34 then
19509: LD_VAR 0 3
19513: PUSH
19514: LD_INT 34
19516: EQUAL
19517: IFFALSE 19527
// sShield := true ;
19519: LD_ADDR_EXP 94
19523: PUSH
19524: LD_INT 1
19526: ST_TO_ADDR
// if p3 = 35 then
19527: LD_VAR 0 3
19531: PUSH
19532: LD_INT 35
19534: EQUAL
19535: IFFALSE 19545
// sTime := true ;
19537: LD_ADDR_EXP 95
19541: PUSH
19542: LD_INT 1
19544: ST_TO_ADDR
// if p3 = 36 then
19545: LD_VAR 0 3
19549: PUSH
19550: LD_INT 36
19552: EQUAL
19553: IFFALSE 19563
// sTools := true ;
19555: LD_ADDR_EXP 96
19559: PUSH
19560: LD_INT 1
19562: ST_TO_ADDR
// if p3 = 101 then
19563: LD_VAR 0 3
19567: PUSH
19568: LD_INT 101
19570: EQUAL
19571: IFFALSE 19581
// sSold := true ;
19573: LD_ADDR_EXP 61
19577: PUSH
19578: LD_INT 1
19580: ST_TO_ADDR
// if p3 = 102 then
19581: LD_VAR 0 3
19585: PUSH
19586: LD_INT 102
19588: EQUAL
19589: IFFALSE 19599
// sDiff := true ;
19591: LD_ADDR_EXP 62
19595: PUSH
19596: LD_INT 1
19598: ST_TO_ADDR
// if p3 = 103 then
19599: LD_VAR 0 3
19603: PUSH
19604: LD_INT 103
19606: EQUAL
19607: IFFALSE 19617
// sFog := true ;
19609: LD_ADDR_EXP 65
19613: PUSH
19614: LD_INT 1
19616: ST_TO_ADDR
// if p3 = 104 then
19617: LD_VAR 0 3
19621: PUSH
19622: LD_INT 104
19624: EQUAL
19625: IFFALSE 19635
// sReset := true ;
19627: LD_ADDR_EXP 66
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// if p3 = 105 then
19635: LD_VAR 0 3
19639: PUSH
19640: LD_INT 105
19642: EQUAL
19643: IFFALSE 19653
// sSun := true ;
19645: LD_ADDR_EXP 67
19649: PUSH
19650: LD_INT 1
19652: ST_TO_ADDR
// if p3 = 106 then
19653: LD_VAR 0 3
19657: PUSH
19658: LD_INT 106
19660: EQUAL
19661: IFFALSE 19671
// sTiger := true ;
19663: LD_ADDR_EXP 63
19667: PUSH
19668: LD_INT 1
19670: ST_TO_ADDR
// if p3 = 107 then
19671: LD_VAR 0 3
19675: PUSH
19676: LD_INT 107
19678: EQUAL
19679: IFFALSE 19689
// sBomb := true ;
19681: LD_ADDR_EXP 64
19685: PUSH
19686: LD_INT 1
19688: ST_TO_ADDR
// if p3 = 108 then
19689: LD_VAR 0 3
19693: PUSH
19694: LD_INT 108
19696: EQUAL
19697: IFFALSE 19707
// sWound := true ;
19699: LD_ADDR_EXP 72
19703: PUSH
19704: LD_INT 1
19706: ST_TO_ADDR
// if p3 = 109 then
19707: LD_VAR 0 3
19711: PUSH
19712: LD_INT 109
19714: EQUAL
19715: IFFALSE 19725
// sBetray := true ;
19717: LD_ADDR_EXP 76
19721: PUSH
19722: LD_INT 1
19724: ST_TO_ADDR
// if p3 = 110 then
19725: LD_VAR 0 3
19729: PUSH
19730: LD_INT 110
19732: EQUAL
19733: IFFALSE 19743
// sContamin := true ;
19735: LD_ADDR_EXP 77
19739: PUSH
19740: LD_INT 1
19742: ST_TO_ADDR
// if p3 = 111 then
19743: LD_VAR 0 3
19747: PUSH
19748: LD_INT 111
19750: EQUAL
19751: IFFALSE 19761
// sOil := true ;
19753: LD_ADDR_EXP 79
19757: PUSH
19758: LD_INT 1
19760: ST_TO_ADDR
// if p3 = 112 then
19761: LD_VAR 0 3
19765: PUSH
19766: LD_INT 112
19768: EQUAL
19769: IFFALSE 19779
// sStu := true ;
19771: LD_ADDR_EXP 83
19775: PUSH
19776: LD_INT 1
19778: ST_TO_ADDR
// if p3 = 113 then
19779: LD_VAR 0 3
19783: PUSH
19784: LD_INT 113
19786: EQUAL
19787: IFFALSE 19797
// sBazooka := true ;
19789: LD_ADDR_EXP 86
19793: PUSH
19794: LD_INT 1
19796: ST_TO_ADDR
// if p3 = 114 then
19797: LD_VAR 0 3
19801: PUSH
19802: LD_INT 114
19804: EQUAL
19805: IFFALSE 19815
// sMortar := true ;
19807: LD_ADDR_EXP 87
19811: PUSH
19812: LD_INT 1
19814: ST_TO_ADDR
// if p3 = 115 then
19815: LD_VAR 0 3
19819: PUSH
19820: LD_INT 115
19822: EQUAL
19823: IFFALSE 19833
// sRanger := true ;
19825: LD_ADDR_EXP 97
19829: PUSH
19830: LD_INT 1
19832: ST_TO_ADDR
// if p3 = 116 then
19833: LD_VAR 0 3
19837: PUSH
19838: LD_INT 116
19840: EQUAL
19841: IFFALSE 19851
// sComputer := true ;
19843: LD_ADDR_EXP 98
19847: PUSH
19848: LD_INT 1
19850: ST_TO_ADDR
// if p3 = 117 then
19851: LD_VAR 0 3
19855: PUSH
19856: LD_INT 117
19858: EQUAL
19859: IFFALSE 19869
// s30 := true ;
19861: LD_ADDR_EXP 99
19865: PUSH
19866: LD_INT 1
19868: ST_TO_ADDR
// if p3 = 118 then
19869: LD_VAR 0 3
19873: PUSH
19874: LD_INT 118
19876: EQUAL
19877: IFFALSE 19887
// s60 := true ;
19879: LD_ADDR_EXP 100
19883: PUSH
19884: LD_INT 1
19886: ST_TO_ADDR
// end ; if p2 = hack_mode then
19887: LD_VAR 0 2
19891: PUSH
19892: LD_INT 101
19894: EQUAL
19895: IFFALSE 20023
// begin case p3 of 1 :
19897: LD_VAR 0 3
19901: PUSH
19902: LD_INT 1
19904: DOUBLE
19905: EQUAL
19906: IFTRUE 19910
19908: GO 19917
19910: POP
// hHackUnlimitedResources ; 2 :
19911: CALL 32194 0 0
19915: GO 20023
19917: LD_INT 2
19919: DOUBLE
19920: EQUAL
19921: IFTRUE 19925
19923: GO 19932
19925: POP
// hHackSetLevel10 ; 3 :
19926: CALL 32327 0 0
19930: GO 20023
19932: LD_INT 3
19934: DOUBLE
19935: EQUAL
19936: IFTRUE 19940
19938: GO 19947
19940: POP
// hHackSetLevel10YourUnits ; 4 :
19941: CALL 32412 0 0
19945: GO 20023
19947: LD_INT 4
19949: DOUBLE
19950: EQUAL
19951: IFTRUE 19955
19953: GO 19962
19955: POP
// hHackInvincible ; 5 :
19956: CALL 32860 0 0
19960: GO 20023
19962: LD_INT 5
19964: DOUBLE
19965: EQUAL
19966: IFTRUE 19970
19968: GO 19977
19970: POP
// hHackInvisible ; 6 :
19971: CALL 32971 0 0
19975: GO 20023
19977: LD_INT 6
19979: DOUBLE
19980: EQUAL
19981: IFTRUE 19985
19983: GO 19992
19985: POP
// hHackChangeYourSide ; 7 :
19986: CALL 33028 0 0
19990: GO 20023
19992: LD_INT 7
19994: DOUBLE
19995: EQUAL
19996: IFTRUE 20000
19998: GO 20007
20000: POP
// hHackChangeUnitSide ; 8 :
20001: CALL 33070 0 0
20005: GO 20023
20007: LD_INT 8
20009: DOUBLE
20010: EQUAL
20011: IFTRUE 20015
20013: GO 20022
20015: POP
// hHackFog ; end ;
20016: CALL 33171 0 0
20020: GO 20023
20022: POP
// end ; if p2 = game_save_mode then
20023: LD_VAR 0 2
20027: PUSH
20028: LD_INT 102
20030: EQUAL
20031: IFFALSE 20096
// begin if p3 = 1 then
20033: LD_VAR 0 3
20037: PUSH
20038: LD_INT 1
20040: EQUAL
20041: IFFALSE 20053
// globalGameSaveCounter := p4 ;
20043: LD_ADDR_EXP 43
20047: PUSH
20048: LD_VAR 0 4
20052: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20053: LD_VAR 0 3
20057: PUSH
20058: LD_INT 2
20060: EQUAL
20061: PUSH
20062: LD_EXP 43
20066: AND
20067: IFFALSE 20086
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20069: LD_STRING setGameSaveCounter(
20071: PUSH
20072: LD_EXP 43
20076: STR
20077: PUSH
20078: LD_STRING )
20080: STR
20081: PPUSH
20082: CALL_OW 559
// display_strings := globalGameSaveCounter ;
20086: LD_ADDR_OWVAR 47
20090: PUSH
20091: LD_EXP 43
20095: ST_TO_ADDR
// end ; end ;
20096: LD_VAR 0 7
20100: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20101: GO 20103
20103: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20104: LD_STRING initStreamRollete();
20106: PPUSH
20107: CALL_OW 559
// InitStreamMode ;
20111: CALL 20123 0 0
// DefineStreamItems ( false ) ;
20115: LD_INT 0
20117: PPUSH
20118: CALL 20587 0 1
// end ;
20122: END
// function InitStreamMode ; begin
20123: LD_INT 0
20125: PPUSH
// streamModeActive := false ;
20126: LD_ADDR_EXP 44
20130: PUSH
20131: LD_INT 0
20133: ST_TO_ADDR
// normalCounter := 36 ;
20134: LD_ADDR_EXP 45
20138: PUSH
20139: LD_INT 36
20141: ST_TO_ADDR
// hardcoreCounter := 18 ;
20142: LD_ADDR_EXP 46
20146: PUSH
20147: LD_INT 18
20149: ST_TO_ADDR
// sRocket := false ;
20150: LD_ADDR_EXP 49
20154: PUSH
20155: LD_INT 0
20157: ST_TO_ADDR
// sSpeed := false ;
20158: LD_ADDR_EXP 48
20162: PUSH
20163: LD_INT 0
20165: ST_TO_ADDR
// sEngine := false ;
20166: LD_ADDR_EXP 50
20170: PUSH
20171: LD_INT 0
20173: ST_TO_ADDR
// sSpec := false ;
20174: LD_ADDR_EXP 47
20178: PUSH
20179: LD_INT 0
20181: ST_TO_ADDR
// sLevel := false ;
20182: LD_ADDR_EXP 51
20186: PUSH
20187: LD_INT 0
20189: ST_TO_ADDR
// sArmoury := false ;
20190: LD_ADDR_EXP 52
20194: PUSH
20195: LD_INT 0
20197: ST_TO_ADDR
// sRadar := false ;
20198: LD_ADDR_EXP 53
20202: PUSH
20203: LD_INT 0
20205: ST_TO_ADDR
// sBunker := false ;
20206: LD_ADDR_EXP 54
20210: PUSH
20211: LD_INT 0
20213: ST_TO_ADDR
// sHack := false ;
20214: LD_ADDR_EXP 55
20218: PUSH
20219: LD_INT 0
20221: ST_TO_ADDR
// sFire := false ;
20222: LD_ADDR_EXP 56
20226: PUSH
20227: LD_INT 0
20229: ST_TO_ADDR
// sRefresh := false ;
20230: LD_ADDR_EXP 57
20234: PUSH
20235: LD_INT 0
20237: ST_TO_ADDR
// sExp := false ;
20238: LD_ADDR_EXP 58
20242: PUSH
20243: LD_INT 0
20245: ST_TO_ADDR
// sDepot := false ;
20246: LD_ADDR_EXP 59
20250: PUSH
20251: LD_INT 0
20253: ST_TO_ADDR
// sFlag := false ;
20254: LD_ADDR_EXP 60
20258: PUSH
20259: LD_INT 0
20261: ST_TO_ADDR
// sKamikadze := false ;
20262: LD_ADDR_EXP 68
20266: PUSH
20267: LD_INT 0
20269: ST_TO_ADDR
// sTroll := false ;
20270: LD_ADDR_EXP 69
20274: PUSH
20275: LD_INT 0
20277: ST_TO_ADDR
// sSlow := false ;
20278: LD_ADDR_EXP 70
20282: PUSH
20283: LD_INT 0
20285: ST_TO_ADDR
// sLack := false ;
20286: LD_ADDR_EXP 71
20290: PUSH
20291: LD_INT 0
20293: ST_TO_ADDR
// sTank := false ;
20294: LD_ADDR_EXP 73
20298: PUSH
20299: LD_INT 0
20301: ST_TO_ADDR
// sRemote := false ;
20302: LD_ADDR_EXP 74
20306: PUSH
20307: LD_INT 0
20309: ST_TO_ADDR
// sPowell := false ;
20310: LD_ADDR_EXP 75
20314: PUSH
20315: LD_INT 0
20317: ST_TO_ADDR
// sTeleport := false ;
20318: LD_ADDR_EXP 78
20322: PUSH
20323: LD_INT 0
20325: ST_TO_ADDR
// sOilTower := false ;
20326: LD_ADDR_EXP 80
20330: PUSH
20331: LD_INT 0
20333: ST_TO_ADDR
// sShovel := false ;
20334: LD_ADDR_EXP 81
20338: PUSH
20339: LD_INT 0
20341: ST_TO_ADDR
// sSheik := false ;
20342: LD_ADDR_EXP 82
20346: PUSH
20347: LD_INT 0
20349: ST_TO_ADDR
// sEarthquake := false ;
20350: LD_ADDR_EXP 84
20354: PUSH
20355: LD_INT 0
20357: ST_TO_ADDR
// sAI := false ;
20358: LD_ADDR_EXP 85
20362: PUSH
20363: LD_INT 0
20365: ST_TO_ADDR
// sCargo := false ;
20366: LD_ADDR_EXP 88
20370: PUSH
20371: LD_INT 0
20373: ST_TO_ADDR
// sDLaser := false ;
20374: LD_ADDR_EXP 89
20378: PUSH
20379: LD_INT 0
20381: ST_TO_ADDR
// sExchange := false ;
20382: LD_ADDR_EXP 90
20386: PUSH
20387: LD_INT 0
20389: ST_TO_ADDR
// sFac := false ;
20390: LD_ADDR_EXP 91
20394: PUSH
20395: LD_INT 0
20397: ST_TO_ADDR
// sPower := false ;
20398: LD_ADDR_EXP 92
20402: PUSH
20403: LD_INT 0
20405: ST_TO_ADDR
// sRandom := false ;
20406: LD_ADDR_EXP 93
20410: PUSH
20411: LD_INT 0
20413: ST_TO_ADDR
// sShield := false ;
20414: LD_ADDR_EXP 94
20418: PUSH
20419: LD_INT 0
20421: ST_TO_ADDR
// sTime := false ;
20422: LD_ADDR_EXP 95
20426: PUSH
20427: LD_INT 0
20429: ST_TO_ADDR
// sTools := false ;
20430: LD_ADDR_EXP 96
20434: PUSH
20435: LD_INT 0
20437: ST_TO_ADDR
// sSold := false ;
20438: LD_ADDR_EXP 61
20442: PUSH
20443: LD_INT 0
20445: ST_TO_ADDR
// sDiff := false ;
20446: LD_ADDR_EXP 62
20450: PUSH
20451: LD_INT 0
20453: ST_TO_ADDR
// sFog := false ;
20454: LD_ADDR_EXP 65
20458: PUSH
20459: LD_INT 0
20461: ST_TO_ADDR
// sReset := false ;
20462: LD_ADDR_EXP 66
20466: PUSH
20467: LD_INT 0
20469: ST_TO_ADDR
// sSun := false ;
20470: LD_ADDR_EXP 67
20474: PUSH
20475: LD_INT 0
20477: ST_TO_ADDR
// sTiger := false ;
20478: LD_ADDR_EXP 63
20482: PUSH
20483: LD_INT 0
20485: ST_TO_ADDR
// sBomb := false ;
20486: LD_ADDR_EXP 64
20490: PUSH
20491: LD_INT 0
20493: ST_TO_ADDR
// sWound := false ;
20494: LD_ADDR_EXP 72
20498: PUSH
20499: LD_INT 0
20501: ST_TO_ADDR
// sBetray := false ;
20502: LD_ADDR_EXP 76
20506: PUSH
20507: LD_INT 0
20509: ST_TO_ADDR
// sContamin := false ;
20510: LD_ADDR_EXP 77
20514: PUSH
20515: LD_INT 0
20517: ST_TO_ADDR
// sOil := false ;
20518: LD_ADDR_EXP 79
20522: PUSH
20523: LD_INT 0
20525: ST_TO_ADDR
// sStu := false ;
20526: LD_ADDR_EXP 83
20530: PUSH
20531: LD_INT 0
20533: ST_TO_ADDR
// sBazooka := false ;
20534: LD_ADDR_EXP 86
20538: PUSH
20539: LD_INT 0
20541: ST_TO_ADDR
// sMortar := false ;
20542: LD_ADDR_EXP 87
20546: PUSH
20547: LD_INT 0
20549: ST_TO_ADDR
// sRanger := false ;
20550: LD_ADDR_EXP 97
20554: PUSH
20555: LD_INT 0
20557: ST_TO_ADDR
// sComputer := false ;
20558: LD_ADDR_EXP 98
20562: PUSH
20563: LD_INT 0
20565: ST_TO_ADDR
// s30 := false ;
20566: LD_ADDR_EXP 99
20570: PUSH
20571: LD_INT 0
20573: ST_TO_ADDR
// s60 := false ;
20574: LD_ADDR_EXP 100
20578: PUSH
20579: LD_INT 0
20581: ST_TO_ADDR
// end ;
20582: LD_VAR 0 1
20586: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20587: LD_INT 0
20589: PPUSH
20590: PPUSH
20591: PPUSH
20592: PPUSH
20593: PPUSH
20594: PPUSH
20595: PPUSH
// result := [ ] ;
20596: LD_ADDR_VAR 0 2
20600: PUSH
20601: EMPTY
20602: ST_TO_ADDR
// if campaign_id = 1 then
20603: LD_OWVAR 69
20607: PUSH
20608: LD_INT 1
20610: EQUAL
20611: IFFALSE 23777
// begin case mission_number of 1 :
20613: LD_OWVAR 70
20617: PUSH
20618: LD_INT 1
20620: DOUBLE
20621: EQUAL
20622: IFTRUE 20626
20624: GO 20702
20626: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20627: LD_ADDR_VAR 0 2
20631: PUSH
20632: LD_INT 2
20634: PUSH
20635: LD_INT 4
20637: PUSH
20638: LD_INT 11
20640: PUSH
20641: LD_INT 12
20643: PUSH
20644: LD_INT 15
20646: PUSH
20647: LD_INT 16
20649: PUSH
20650: LD_INT 22
20652: PUSH
20653: LD_INT 23
20655: PUSH
20656: LD_INT 26
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 101
20672: PUSH
20673: LD_INT 102
20675: PUSH
20676: LD_INT 106
20678: PUSH
20679: LD_INT 116
20681: PUSH
20682: LD_INT 117
20684: PUSH
20685: LD_INT 118
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: ST_TO_ADDR
20700: GO 23775
20702: LD_INT 2
20704: DOUBLE
20705: EQUAL
20706: IFTRUE 20710
20708: GO 20794
20710: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20711: LD_ADDR_VAR 0 2
20715: PUSH
20716: LD_INT 2
20718: PUSH
20719: LD_INT 4
20721: PUSH
20722: LD_INT 11
20724: PUSH
20725: LD_INT 12
20727: PUSH
20728: LD_INT 15
20730: PUSH
20731: LD_INT 16
20733: PUSH
20734: LD_INT 22
20736: PUSH
20737: LD_INT 23
20739: PUSH
20740: LD_INT 26
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 101
20756: PUSH
20757: LD_INT 102
20759: PUSH
20760: LD_INT 105
20762: PUSH
20763: LD_INT 106
20765: PUSH
20766: LD_INT 108
20768: PUSH
20769: LD_INT 116
20771: PUSH
20772: LD_INT 117
20774: PUSH
20775: LD_INT 118
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: ST_TO_ADDR
20792: GO 23775
20794: LD_INT 3
20796: DOUBLE
20797: EQUAL
20798: IFTRUE 20802
20800: GO 20890
20802: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20803: LD_ADDR_VAR 0 2
20807: PUSH
20808: LD_INT 2
20810: PUSH
20811: LD_INT 4
20813: PUSH
20814: LD_INT 5
20816: PUSH
20817: LD_INT 11
20819: PUSH
20820: LD_INT 12
20822: PUSH
20823: LD_INT 15
20825: PUSH
20826: LD_INT 16
20828: PUSH
20829: LD_INT 22
20831: PUSH
20832: LD_INT 26
20834: PUSH
20835: LD_INT 36
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 101
20852: PUSH
20853: LD_INT 102
20855: PUSH
20856: LD_INT 105
20858: PUSH
20859: LD_INT 106
20861: PUSH
20862: LD_INT 108
20864: PUSH
20865: LD_INT 116
20867: PUSH
20868: LD_INT 117
20870: PUSH
20871: LD_INT 118
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: ST_TO_ADDR
20888: GO 23775
20890: LD_INT 4
20892: DOUBLE
20893: EQUAL
20894: IFTRUE 20898
20896: GO 20994
20898: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20899: LD_ADDR_VAR 0 2
20903: PUSH
20904: LD_INT 2
20906: PUSH
20907: LD_INT 4
20909: PUSH
20910: LD_INT 5
20912: PUSH
20913: LD_INT 8
20915: PUSH
20916: LD_INT 11
20918: PUSH
20919: LD_INT 12
20921: PUSH
20922: LD_INT 15
20924: PUSH
20925: LD_INT 16
20927: PUSH
20928: LD_INT 22
20930: PUSH
20931: LD_INT 23
20933: PUSH
20934: LD_INT 26
20936: PUSH
20937: LD_INT 36
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 101
20956: PUSH
20957: LD_INT 102
20959: PUSH
20960: LD_INT 105
20962: PUSH
20963: LD_INT 106
20965: PUSH
20966: LD_INT 108
20968: PUSH
20969: LD_INT 116
20971: PUSH
20972: LD_INT 117
20974: PUSH
20975: LD_INT 118
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: ST_TO_ADDR
20992: GO 23775
20994: LD_INT 5
20996: DOUBLE
20997: EQUAL
20998: IFTRUE 21002
21000: GO 21114
21002: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21003: LD_ADDR_VAR 0 2
21007: PUSH
21008: LD_INT 2
21010: PUSH
21011: LD_INT 4
21013: PUSH
21014: LD_INT 5
21016: PUSH
21017: LD_INT 6
21019: PUSH
21020: LD_INT 8
21022: PUSH
21023: LD_INT 11
21025: PUSH
21026: LD_INT 12
21028: PUSH
21029: LD_INT 15
21031: PUSH
21032: LD_INT 16
21034: PUSH
21035: LD_INT 22
21037: PUSH
21038: LD_INT 23
21040: PUSH
21041: LD_INT 25
21043: PUSH
21044: LD_INT 26
21046: PUSH
21047: LD_INT 36
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 101
21068: PUSH
21069: LD_INT 102
21071: PUSH
21072: LD_INT 105
21074: PUSH
21075: LD_INT 106
21077: PUSH
21078: LD_INT 108
21080: PUSH
21081: LD_INT 109
21083: PUSH
21084: LD_INT 112
21086: PUSH
21087: LD_INT 116
21089: PUSH
21090: LD_INT 117
21092: PUSH
21093: LD_INT 118
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: ST_TO_ADDR
21112: GO 23775
21114: LD_INT 6
21116: DOUBLE
21117: EQUAL
21118: IFTRUE 21122
21120: GO 21254
21122: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21123: LD_ADDR_VAR 0 2
21127: PUSH
21128: LD_INT 2
21130: PUSH
21131: LD_INT 4
21133: PUSH
21134: LD_INT 5
21136: PUSH
21137: LD_INT 6
21139: PUSH
21140: LD_INT 8
21142: PUSH
21143: LD_INT 11
21145: PUSH
21146: LD_INT 12
21148: PUSH
21149: LD_INT 15
21151: PUSH
21152: LD_INT 16
21154: PUSH
21155: LD_INT 20
21157: PUSH
21158: LD_INT 21
21160: PUSH
21161: LD_INT 22
21163: PUSH
21164: LD_INT 23
21166: PUSH
21167: LD_INT 25
21169: PUSH
21170: LD_INT 26
21172: PUSH
21173: LD_INT 30
21175: PUSH
21176: LD_INT 31
21178: PUSH
21179: LD_INT 32
21181: PUSH
21182: LD_INT 36
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 101
21208: PUSH
21209: LD_INT 102
21211: PUSH
21212: LD_INT 105
21214: PUSH
21215: LD_INT 106
21217: PUSH
21218: LD_INT 108
21220: PUSH
21221: LD_INT 109
21223: PUSH
21224: LD_INT 112
21226: PUSH
21227: LD_INT 116
21229: PUSH
21230: LD_INT 117
21232: PUSH
21233: LD_INT 118
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: ST_TO_ADDR
21252: GO 23775
21254: LD_INT 7
21256: DOUBLE
21257: EQUAL
21258: IFTRUE 21262
21260: GO 21374
21262: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21263: LD_ADDR_VAR 0 2
21267: PUSH
21268: LD_INT 2
21270: PUSH
21271: LD_INT 4
21273: PUSH
21274: LD_INT 5
21276: PUSH
21277: LD_INT 7
21279: PUSH
21280: LD_INT 11
21282: PUSH
21283: LD_INT 12
21285: PUSH
21286: LD_INT 15
21288: PUSH
21289: LD_INT 16
21291: PUSH
21292: LD_INT 20
21294: PUSH
21295: LD_INT 21
21297: PUSH
21298: LD_INT 22
21300: PUSH
21301: LD_INT 23
21303: PUSH
21304: LD_INT 25
21306: PUSH
21307: LD_INT 26
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 101
21328: PUSH
21329: LD_INT 102
21331: PUSH
21332: LD_INT 103
21334: PUSH
21335: LD_INT 105
21337: PUSH
21338: LD_INT 106
21340: PUSH
21341: LD_INT 108
21343: PUSH
21344: LD_INT 112
21346: PUSH
21347: LD_INT 116
21349: PUSH
21350: LD_INT 117
21352: PUSH
21353: LD_INT 118
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: ST_TO_ADDR
21372: GO 23775
21374: LD_INT 8
21376: DOUBLE
21377: EQUAL
21378: IFTRUE 21382
21380: GO 21522
21382: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21383: LD_ADDR_VAR 0 2
21387: PUSH
21388: LD_INT 2
21390: PUSH
21391: LD_INT 4
21393: PUSH
21394: LD_INT 5
21396: PUSH
21397: LD_INT 6
21399: PUSH
21400: LD_INT 7
21402: PUSH
21403: LD_INT 8
21405: PUSH
21406: LD_INT 11
21408: PUSH
21409: LD_INT 12
21411: PUSH
21412: LD_INT 15
21414: PUSH
21415: LD_INT 16
21417: PUSH
21418: LD_INT 20
21420: PUSH
21421: LD_INT 21
21423: PUSH
21424: LD_INT 22
21426: PUSH
21427: LD_INT 23
21429: PUSH
21430: LD_INT 25
21432: PUSH
21433: LD_INT 26
21435: PUSH
21436: LD_INT 30
21438: PUSH
21439: LD_INT 31
21441: PUSH
21442: LD_INT 32
21444: PUSH
21445: LD_INT 36
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 101
21472: PUSH
21473: LD_INT 102
21475: PUSH
21476: LD_INT 103
21478: PUSH
21479: LD_INT 105
21481: PUSH
21482: LD_INT 106
21484: PUSH
21485: LD_INT 108
21487: PUSH
21488: LD_INT 109
21490: PUSH
21491: LD_INT 112
21493: PUSH
21494: LD_INT 116
21496: PUSH
21497: LD_INT 117
21499: PUSH
21500: LD_INT 118
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: ST_TO_ADDR
21520: GO 23775
21522: LD_INT 9
21524: DOUBLE
21525: EQUAL
21526: IFTRUE 21530
21528: GO 21678
21530: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21531: LD_ADDR_VAR 0 2
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: LD_INT 4
21541: PUSH
21542: LD_INT 5
21544: PUSH
21545: LD_INT 6
21547: PUSH
21548: LD_INT 7
21550: PUSH
21551: LD_INT 8
21553: PUSH
21554: LD_INT 11
21556: PUSH
21557: LD_INT 12
21559: PUSH
21560: LD_INT 15
21562: PUSH
21563: LD_INT 16
21565: PUSH
21566: LD_INT 20
21568: PUSH
21569: LD_INT 21
21571: PUSH
21572: LD_INT 22
21574: PUSH
21575: LD_INT 23
21577: PUSH
21578: LD_INT 25
21580: PUSH
21581: LD_INT 26
21583: PUSH
21584: LD_INT 28
21586: PUSH
21587: LD_INT 30
21589: PUSH
21590: LD_INT 31
21592: PUSH
21593: LD_INT 32
21595: PUSH
21596: LD_INT 36
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 101
21624: PUSH
21625: LD_INT 102
21627: PUSH
21628: LD_INT 103
21630: PUSH
21631: LD_INT 105
21633: PUSH
21634: LD_INT 106
21636: PUSH
21637: LD_INT 108
21639: PUSH
21640: LD_INT 109
21642: PUSH
21643: LD_INT 112
21645: PUSH
21646: LD_INT 114
21648: PUSH
21649: LD_INT 116
21651: PUSH
21652: LD_INT 117
21654: PUSH
21655: LD_INT 118
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: ST_TO_ADDR
21676: GO 23775
21678: LD_INT 10
21680: DOUBLE
21681: EQUAL
21682: IFTRUE 21686
21684: GO 21882
21686: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21687: LD_ADDR_VAR 0 2
21691: PUSH
21692: LD_INT 2
21694: PUSH
21695: LD_INT 4
21697: PUSH
21698: LD_INT 5
21700: PUSH
21701: LD_INT 6
21703: PUSH
21704: LD_INT 7
21706: PUSH
21707: LD_INT 8
21709: PUSH
21710: LD_INT 9
21712: PUSH
21713: LD_INT 10
21715: PUSH
21716: LD_INT 11
21718: PUSH
21719: LD_INT 12
21721: PUSH
21722: LD_INT 13
21724: PUSH
21725: LD_INT 14
21727: PUSH
21728: LD_INT 15
21730: PUSH
21731: LD_INT 16
21733: PUSH
21734: LD_INT 17
21736: PUSH
21737: LD_INT 18
21739: PUSH
21740: LD_INT 19
21742: PUSH
21743: LD_INT 20
21745: PUSH
21746: LD_INT 21
21748: PUSH
21749: LD_INT 22
21751: PUSH
21752: LD_INT 23
21754: PUSH
21755: LD_INT 24
21757: PUSH
21758: LD_INT 25
21760: PUSH
21761: LD_INT 26
21763: PUSH
21764: LD_INT 28
21766: PUSH
21767: LD_INT 30
21769: PUSH
21770: LD_INT 31
21772: PUSH
21773: LD_INT 32
21775: PUSH
21776: LD_INT 36
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 101
21812: PUSH
21813: LD_INT 102
21815: PUSH
21816: LD_INT 103
21818: PUSH
21819: LD_INT 104
21821: PUSH
21822: LD_INT 105
21824: PUSH
21825: LD_INT 106
21827: PUSH
21828: LD_INT 107
21830: PUSH
21831: LD_INT 108
21833: PUSH
21834: LD_INT 109
21836: PUSH
21837: LD_INT 110
21839: PUSH
21840: LD_INT 111
21842: PUSH
21843: LD_INT 112
21845: PUSH
21846: LD_INT 114
21848: PUSH
21849: LD_INT 116
21851: PUSH
21852: LD_INT 117
21854: PUSH
21855: LD_INT 118
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: ST_TO_ADDR
21880: GO 23775
21882: LD_INT 11
21884: DOUBLE
21885: EQUAL
21886: IFTRUE 21890
21888: GO 22094
21890: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21891: LD_ADDR_VAR 0 2
21895: PUSH
21896: LD_INT 2
21898: PUSH
21899: LD_INT 3
21901: PUSH
21902: LD_INT 4
21904: PUSH
21905: LD_INT 5
21907: PUSH
21908: LD_INT 6
21910: PUSH
21911: LD_INT 7
21913: PUSH
21914: LD_INT 8
21916: PUSH
21917: LD_INT 9
21919: PUSH
21920: LD_INT 10
21922: PUSH
21923: LD_INT 11
21925: PUSH
21926: LD_INT 12
21928: PUSH
21929: LD_INT 13
21931: PUSH
21932: LD_INT 14
21934: PUSH
21935: LD_INT 15
21937: PUSH
21938: LD_INT 16
21940: PUSH
21941: LD_INT 17
21943: PUSH
21944: LD_INT 18
21946: PUSH
21947: LD_INT 19
21949: PUSH
21950: LD_INT 20
21952: PUSH
21953: LD_INT 21
21955: PUSH
21956: LD_INT 22
21958: PUSH
21959: LD_INT 23
21961: PUSH
21962: LD_INT 24
21964: PUSH
21965: LD_INT 25
21967: PUSH
21968: LD_INT 26
21970: PUSH
21971: LD_INT 28
21973: PUSH
21974: LD_INT 30
21976: PUSH
21977: LD_INT 31
21979: PUSH
21980: LD_INT 32
21982: PUSH
21983: LD_INT 34
21985: PUSH
21986: LD_INT 36
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 101
22024: PUSH
22025: LD_INT 102
22027: PUSH
22028: LD_INT 103
22030: PUSH
22031: LD_INT 104
22033: PUSH
22034: LD_INT 105
22036: PUSH
22037: LD_INT 106
22039: PUSH
22040: LD_INT 107
22042: PUSH
22043: LD_INT 108
22045: PUSH
22046: LD_INT 109
22048: PUSH
22049: LD_INT 110
22051: PUSH
22052: LD_INT 111
22054: PUSH
22055: LD_INT 112
22057: PUSH
22058: LD_INT 114
22060: PUSH
22061: LD_INT 116
22063: PUSH
22064: LD_INT 117
22066: PUSH
22067: LD_INT 118
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: ST_TO_ADDR
22092: GO 23775
22094: LD_INT 12
22096: DOUBLE
22097: EQUAL
22098: IFTRUE 22102
22100: GO 22322
22102: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22103: LD_ADDR_VAR 0 2
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: LD_INT 2
22113: PUSH
22114: LD_INT 3
22116: PUSH
22117: LD_INT 4
22119: PUSH
22120: LD_INT 5
22122: PUSH
22123: LD_INT 6
22125: PUSH
22126: LD_INT 7
22128: PUSH
22129: LD_INT 8
22131: PUSH
22132: LD_INT 9
22134: PUSH
22135: LD_INT 10
22137: PUSH
22138: LD_INT 11
22140: PUSH
22141: LD_INT 12
22143: PUSH
22144: LD_INT 13
22146: PUSH
22147: LD_INT 14
22149: PUSH
22150: LD_INT 15
22152: PUSH
22153: LD_INT 16
22155: PUSH
22156: LD_INT 17
22158: PUSH
22159: LD_INT 18
22161: PUSH
22162: LD_INT 19
22164: PUSH
22165: LD_INT 20
22167: PUSH
22168: LD_INT 21
22170: PUSH
22171: LD_INT 22
22173: PUSH
22174: LD_INT 23
22176: PUSH
22177: LD_INT 24
22179: PUSH
22180: LD_INT 25
22182: PUSH
22183: LD_INT 26
22185: PUSH
22186: LD_INT 27
22188: PUSH
22189: LD_INT 28
22191: PUSH
22192: LD_INT 30
22194: PUSH
22195: LD_INT 31
22197: PUSH
22198: LD_INT 32
22200: PUSH
22201: LD_INT 33
22203: PUSH
22204: LD_INT 34
22206: PUSH
22207: LD_INT 36
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 101
22248: PUSH
22249: LD_INT 102
22251: PUSH
22252: LD_INT 103
22254: PUSH
22255: LD_INT 104
22257: PUSH
22258: LD_INT 105
22260: PUSH
22261: LD_INT 106
22263: PUSH
22264: LD_INT 107
22266: PUSH
22267: LD_INT 108
22269: PUSH
22270: LD_INT 109
22272: PUSH
22273: LD_INT 110
22275: PUSH
22276: LD_INT 111
22278: PUSH
22279: LD_INT 112
22281: PUSH
22282: LD_INT 113
22284: PUSH
22285: LD_INT 114
22287: PUSH
22288: LD_INT 116
22290: PUSH
22291: LD_INT 117
22293: PUSH
22294: LD_INT 118
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: ST_TO_ADDR
22320: GO 23775
22322: LD_INT 13
22324: DOUBLE
22325: EQUAL
22326: IFTRUE 22330
22328: GO 22538
22330: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22331: LD_ADDR_VAR 0 2
22335: PUSH
22336: LD_INT 1
22338: PUSH
22339: LD_INT 2
22341: PUSH
22342: LD_INT 3
22344: PUSH
22345: LD_INT 4
22347: PUSH
22348: LD_INT 5
22350: PUSH
22351: LD_INT 8
22353: PUSH
22354: LD_INT 9
22356: PUSH
22357: LD_INT 10
22359: PUSH
22360: LD_INT 11
22362: PUSH
22363: LD_INT 12
22365: PUSH
22366: LD_INT 14
22368: PUSH
22369: LD_INT 15
22371: PUSH
22372: LD_INT 16
22374: PUSH
22375: LD_INT 17
22377: PUSH
22378: LD_INT 18
22380: PUSH
22381: LD_INT 19
22383: PUSH
22384: LD_INT 20
22386: PUSH
22387: LD_INT 21
22389: PUSH
22390: LD_INT 22
22392: PUSH
22393: LD_INT 23
22395: PUSH
22396: LD_INT 24
22398: PUSH
22399: LD_INT 25
22401: PUSH
22402: LD_INT 26
22404: PUSH
22405: LD_INT 27
22407: PUSH
22408: LD_INT 28
22410: PUSH
22411: LD_INT 30
22413: PUSH
22414: LD_INT 31
22416: PUSH
22417: LD_INT 32
22419: PUSH
22420: LD_INT 33
22422: PUSH
22423: LD_INT 34
22425: PUSH
22426: LD_INT 36
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 101
22464: PUSH
22465: LD_INT 102
22467: PUSH
22468: LD_INT 103
22470: PUSH
22471: LD_INT 104
22473: PUSH
22474: LD_INT 105
22476: PUSH
22477: LD_INT 106
22479: PUSH
22480: LD_INT 107
22482: PUSH
22483: LD_INT 108
22485: PUSH
22486: LD_INT 109
22488: PUSH
22489: LD_INT 110
22491: PUSH
22492: LD_INT 111
22494: PUSH
22495: LD_INT 112
22497: PUSH
22498: LD_INT 113
22500: PUSH
22501: LD_INT 114
22503: PUSH
22504: LD_INT 116
22506: PUSH
22507: LD_INT 117
22509: PUSH
22510: LD_INT 118
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: ST_TO_ADDR
22536: GO 23775
22538: LD_INT 14
22540: DOUBLE
22541: EQUAL
22542: IFTRUE 22546
22544: GO 22770
22546: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22547: LD_ADDR_VAR 0 2
22551: PUSH
22552: LD_INT 1
22554: PUSH
22555: LD_INT 2
22557: PUSH
22558: LD_INT 3
22560: PUSH
22561: LD_INT 4
22563: PUSH
22564: LD_INT 5
22566: PUSH
22567: LD_INT 6
22569: PUSH
22570: LD_INT 7
22572: PUSH
22573: LD_INT 8
22575: PUSH
22576: LD_INT 9
22578: PUSH
22579: LD_INT 10
22581: PUSH
22582: LD_INT 11
22584: PUSH
22585: LD_INT 12
22587: PUSH
22588: LD_INT 13
22590: PUSH
22591: LD_INT 14
22593: PUSH
22594: LD_INT 15
22596: PUSH
22597: LD_INT 16
22599: PUSH
22600: LD_INT 17
22602: PUSH
22603: LD_INT 18
22605: PUSH
22606: LD_INT 19
22608: PUSH
22609: LD_INT 20
22611: PUSH
22612: LD_INT 21
22614: PUSH
22615: LD_INT 22
22617: PUSH
22618: LD_INT 23
22620: PUSH
22621: LD_INT 24
22623: PUSH
22624: LD_INT 25
22626: PUSH
22627: LD_INT 26
22629: PUSH
22630: LD_INT 27
22632: PUSH
22633: LD_INT 28
22635: PUSH
22636: LD_INT 29
22638: PUSH
22639: LD_INT 30
22641: PUSH
22642: LD_INT 31
22644: PUSH
22645: LD_INT 32
22647: PUSH
22648: LD_INT 33
22650: PUSH
22651: LD_INT 34
22653: PUSH
22654: LD_INT 36
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 101
22696: PUSH
22697: LD_INT 102
22699: PUSH
22700: LD_INT 103
22702: PUSH
22703: LD_INT 104
22705: PUSH
22706: LD_INT 105
22708: PUSH
22709: LD_INT 106
22711: PUSH
22712: LD_INT 107
22714: PUSH
22715: LD_INT 108
22717: PUSH
22718: LD_INT 109
22720: PUSH
22721: LD_INT 110
22723: PUSH
22724: LD_INT 111
22726: PUSH
22727: LD_INT 112
22729: PUSH
22730: LD_INT 113
22732: PUSH
22733: LD_INT 114
22735: PUSH
22736: LD_INT 116
22738: PUSH
22739: LD_INT 117
22741: PUSH
22742: LD_INT 118
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: ST_TO_ADDR
22768: GO 23775
22770: LD_INT 15
22772: DOUBLE
22773: EQUAL
22774: IFTRUE 22778
22776: GO 23002
22778: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22779: LD_ADDR_VAR 0 2
22783: PUSH
22784: LD_INT 1
22786: PUSH
22787: LD_INT 2
22789: PUSH
22790: LD_INT 3
22792: PUSH
22793: LD_INT 4
22795: PUSH
22796: LD_INT 5
22798: PUSH
22799: LD_INT 6
22801: PUSH
22802: LD_INT 7
22804: PUSH
22805: LD_INT 8
22807: PUSH
22808: LD_INT 9
22810: PUSH
22811: LD_INT 10
22813: PUSH
22814: LD_INT 11
22816: PUSH
22817: LD_INT 12
22819: PUSH
22820: LD_INT 13
22822: PUSH
22823: LD_INT 14
22825: PUSH
22826: LD_INT 15
22828: PUSH
22829: LD_INT 16
22831: PUSH
22832: LD_INT 17
22834: PUSH
22835: LD_INT 18
22837: PUSH
22838: LD_INT 19
22840: PUSH
22841: LD_INT 20
22843: PUSH
22844: LD_INT 21
22846: PUSH
22847: LD_INT 22
22849: PUSH
22850: LD_INT 23
22852: PUSH
22853: LD_INT 24
22855: PUSH
22856: LD_INT 25
22858: PUSH
22859: LD_INT 26
22861: PUSH
22862: LD_INT 27
22864: PUSH
22865: LD_INT 28
22867: PUSH
22868: LD_INT 29
22870: PUSH
22871: LD_INT 30
22873: PUSH
22874: LD_INT 31
22876: PUSH
22877: LD_INT 32
22879: PUSH
22880: LD_INT 33
22882: PUSH
22883: LD_INT 34
22885: PUSH
22886: LD_INT 36
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 101
22928: PUSH
22929: LD_INT 102
22931: PUSH
22932: LD_INT 103
22934: PUSH
22935: LD_INT 104
22937: PUSH
22938: LD_INT 105
22940: PUSH
22941: LD_INT 106
22943: PUSH
22944: LD_INT 107
22946: PUSH
22947: LD_INT 108
22949: PUSH
22950: LD_INT 109
22952: PUSH
22953: LD_INT 110
22955: PUSH
22956: LD_INT 111
22958: PUSH
22959: LD_INT 112
22961: PUSH
22962: LD_INT 113
22964: PUSH
22965: LD_INT 114
22967: PUSH
22968: LD_INT 116
22970: PUSH
22971: LD_INT 117
22973: PUSH
22974: LD_INT 118
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: ST_TO_ADDR
23000: GO 23775
23002: LD_INT 16
23004: DOUBLE
23005: EQUAL
23006: IFTRUE 23010
23008: GO 23146
23010: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23011: LD_ADDR_VAR 0 2
23015: PUSH
23016: LD_INT 2
23018: PUSH
23019: LD_INT 4
23021: PUSH
23022: LD_INT 5
23024: PUSH
23025: LD_INT 7
23027: PUSH
23028: LD_INT 11
23030: PUSH
23031: LD_INT 12
23033: PUSH
23034: LD_INT 15
23036: PUSH
23037: LD_INT 16
23039: PUSH
23040: LD_INT 20
23042: PUSH
23043: LD_INT 21
23045: PUSH
23046: LD_INT 22
23048: PUSH
23049: LD_INT 23
23051: PUSH
23052: LD_INT 25
23054: PUSH
23055: LD_INT 26
23057: PUSH
23058: LD_INT 30
23060: PUSH
23061: LD_INT 31
23063: PUSH
23064: LD_INT 32
23066: PUSH
23067: LD_INT 33
23069: PUSH
23070: LD_INT 34
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 101
23096: PUSH
23097: LD_INT 102
23099: PUSH
23100: LD_INT 103
23102: PUSH
23103: LD_INT 106
23105: PUSH
23106: LD_INT 108
23108: PUSH
23109: LD_INT 112
23111: PUSH
23112: LD_INT 113
23114: PUSH
23115: LD_INT 114
23117: PUSH
23118: LD_INT 116
23120: PUSH
23121: LD_INT 117
23123: PUSH
23124: LD_INT 118
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: ST_TO_ADDR
23144: GO 23775
23146: LD_INT 17
23148: DOUBLE
23149: EQUAL
23150: IFTRUE 23154
23152: GO 23378
23154: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23155: LD_ADDR_VAR 0 2
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: LD_INT 2
23165: PUSH
23166: LD_INT 3
23168: PUSH
23169: LD_INT 4
23171: PUSH
23172: LD_INT 5
23174: PUSH
23175: LD_INT 6
23177: PUSH
23178: LD_INT 7
23180: PUSH
23181: LD_INT 8
23183: PUSH
23184: LD_INT 9
23186: PUSH
23187: LD_INT 10
23189: PUSH
23190: LD_INT 11
23192: PUSH
23193: LD_INT 12
23195: PUSH
23196: LD_INT 13
23198: PUSH
23199: LD_INT 14
23201: PUSH
23202: LD_INT 15
23204: PUSH
23205: LD_INT 16
23207: PUSH
23208: LD_INT 17
23210: PUSH
23211: LD_INT 18
23213: PUSH
23214: LD_INT 19
23216: PUSH
23217: LD_INT 20
23219: PUSH
23220: LD_INT 21
23222: PUSH
23223: LD_INT 22
23225: PUSH
23226: LD_INT 23
23228: PUSH
23229: LD_INT 24
23231: PUSH
23232: LD_INT 25
23234: PUSH
23235: LD_INT 26
23237: PUSH
23238: LD_INT 27
23240: PUSH
23241: LD_INT 28
23243: PUSH
23244: LD_INT 29
23246: PUSH
23247: LD_INT 30
23249: PUSH
23250: LD_INT 31
23252: PUSH
23253: LD_INT 32
23255: PUSH
23256: LD_INT 33
23258: PUSH
23259: LD_INT 34
23261: PUSH
23262: LD_INT 36
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 101
23304: PUSH
23305: LD_INT 102
23307: PUSH
23308: LD_INT 103
23310: PUSH
23311: LD_INT 104
23313: PUSH
23314: LD_INT 105
23316: PUSH
23317: LD_INT 106
23319: PUSH
23320: LD_INT 107
23322: PUSH
23323: LD_INT 108
23325: PUSH
23326: LD_INT 109
23328: PUSH
23329: LD_INT 110
23331: PUSH
23332: LD_INT 111
23334: PUSH
23335: LD_INT 112
23337: PUSH
23338: LD_INT 113
23340: PUSH
23341: LD_INT 114
23343: PUSH
23344: LD_INT 116
23346: PUSH
23347: LD_INT 117
23349: PUSH
23350: LD_INT 118
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: ST_TO_ADDR
23376: GO 23775
23378: LD_INT 18
23380: DOUBLE
23381: EQUAL
23382: IFTRUE 23386
23384: GO 23534
23386: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23387: LD_ADDR_VAR 0 2
23391: PUSH
23392: LD_INT 2
23394: PUSH
23395: LD_INT 4
23397: PUSH
23398: LD_INT 5
23400: PUSH
23401: LD_INT 7
23403: PUSH
23404: LD_INT 11
23406: PUSH
23407: LD_INT 12
23409: PUSH
23410: LD_INT 15
23412: PUSH
23413: LD_INT 16
23415: PUSH
23416: LD_INT 20
23418: PUSH
23419: LD_INT 21
23421: PUSH
23422: LD_INT 22
23424: PUSH
23425: LD_INT 23
23427: PUSH
23428: LD_INT 25
23430: PUSH
23431: LD_INT 26
23433: PUSH
23434: LD_INT 30
23436: PUSH
23437: LD_INT 31
23439: PUSH
23440: LD_INT 32
23442: PUSH
23443: LD_INT 33
23445: PUSH
23446: LD_INT 34
23448: PUSH
23449: LD_INT 35
23451: PUSH
23452: LD_INT 36
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 101
23480: PUSH
23481: LD_INT 102
23483: PUSH
23484: LD_INT 103
23486: PUSH
23487: LD_INT 106
23489: PUSH
23490: LD_INT 108
23492: PUSH
23493: LD_INT 112
23495: PUSH
23496: LD_INT 113
23498: PUSH
23499: LD_INT 114
23501: PUSH
23502: LD_INT 115
23504: PUSH
23505: LD_INT 116
23507: PUSH
23508: LD_INT 117
23510: PUSH
23511: LD_INT 118
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: ST_TO_ADDR
23532: GO 23775
23534: LD_INT 19
23536: DOUBLE
23537: EQUAL
23538: IFTRUE 23542
23540: GO 23774
23542: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23543: LD_ADDR_VAR 0 2
23547: PUSH
23548: LD_INT 1
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: LD_INT 3
23556: PUSH
23557: LD_INT 4
23559: PUSH
23560: LD_INT 5
23562: PUSH
23563: LD_INT 6
23565: PUSH
23566: LD_INT 7
23568: PUSH
23569: LD_INT 8
23571: PUSH
23572: LD_INT 9
23574: PUSH
23575: LD_INT 10
23577: PUSH
23578: LD_INT 11
23580: PUSH
23581: LD_INT 12
23583: PUSH
23584: LD_INT 13
23586: PUSH
23587: LD_INT 14
23589: PUSH
23590: LD_INT 15
23592: PUSH
23593: LD_INT 16
23595: PUSH
23596: LD_INT 17
23598: PUSH
23599: LD_INT 18
23601: PUSH
23602: LD_INT 19
23604: PUSH
23605: LD_INT 20
23607: PUSH
23608: LD_INT 21
23610: PUSH
23611: LD_INT 22
23613: PUSH
23614: LD_INT 23
23616: PUSH
23617: LD_INT 24
23619: PUSH
23620: LD_INT 25
23622: PUSH
23623: LD_INT 26
23625: PUSH
23626: LD_INT 27
23628: PUSH
23629: LD_INT 28
23631: PUSH
23632: LD_INT 29
23634: PUSH
23635: LD_INT 30
23637: PUSH
23638: LD_INT 31
23640: PUSH
23641: LD_INT 32
23643: PUSH
23644: LD_INT 33
23646: PUSH
23647: LD_INT 34
23649: PUSH
23650: LD_INT 35
23652: PUSH
23653: LD_INT 36
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 101
23696: PUSH
23697: LD_INT 102
23699: PUSH
23700: LD_INT 103
23702: PUSH
23703: LD_INT 104
23705: PUSH
23706: LD_INT 105
23708: PUSH
23709: LD_INT 106
23711: PUSH
23712: LD_INT 107
23714: PUSH
23715: LD_INT 108
23717: PUSH
23718: LD_INT 109
23720: PUSH
23721: LD_INT 110
23723: PUSH
23724: LD_INT 111
23726: PUSH
23727: LD_INT 112
23729: PUSH
23730: LD_INT 113
23732: PUSH
23733: LD_INT 114
23735: PUSH
23736: LD_INT 115
23738: PUSH
23739: LD_INT 116
23741: PUSH
23742: LD_INT 117
23744: PUSH
23745: LD_INT 118
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: ST_TO_ADDR
23772: GO 23775
23774: POP
// end else
23775: GO 24006
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23777: LD_ADDR_VAR 0 2
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: LD_INT 2
23787: PUSH
23788: LD_INT 3
23790: PUSH
23791: LD_INT 4
23793: PUSH
23794: LD_INT 5
23796: PUSH
23797: LD_INT 6
23799: PUSH
23800: LD_INT 7
23802: PUSH
23803: LD_INT 8
23805: PUSH
23806: LD_INT 9
23808: PUSH
23809: LD_INT 10
23811: PUSH
23812: LD_INT 11
23814: PUSH
23815: LD_INT 12
23817: PUSH
23818: LD_INT 13
23820: PUSH
23821: LD_INT 14
23823: PUSH
23824: LD_INT 15
23826: PUSH
23827: LD_INT 16
23829: PUSH
23830: LD_INT 17
23832: PUSH
23833: LD_INT 18
23835: PUSH
23836: LD_INT 19
23838: PUSH
23839: LD_INT 20
23841: PUSH
23842: LD_INT 21
23844: PUSH
23845: LD_INT 22
23847: PUSH
23848: LD_INT 23
23850: PUSH
23851: LD_INT 24
23853: PUSH
23854: LD_INT 25
23856: PUSH
23857: LD_INT 26
23859: PUSH
23860: LD_INT 27
23862: PUSH
23863: LD_INT 28
23865: PUSH
23866: LD_INT 29
23868: PUSH
23869: LD_INT 30
23871: PUSH
23872: LD_INT 31
23874: PUSH
23875: LD_INT 32
23877: PUSH
23878: LD_INT 33
23880: PUSH
23881: LD_INT 34
23883: PUSH
23884: LD_INT 35
23886: PUSH
23887: LD_INT 36
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 101
23930: PUSH
23931: LD_INT 102
23933: PUSH
23934: LD_INT 103
23936: PUSH
23937: LD_INT 104
23939: PUSH
23940: LD_INT 105
23942: PUSH
23943: LD_INT 106
23945: PUSH
23946: LD_INT 107
23948: PUSH
23949: LD_INT 108
23951: PUSH
23952: LD_INT 109
23954: PUSH
23955: LD_INT 110
23957: PUSH
23958: LD_INT 111
23960: PUSH
23961: LD_INT 112
23963: PUSH
23964: LD_INT 113
23966: PUSH
23967: LD_INT 114
23969: PUSH
23970: LD_INT 115
23972: PUSH
23973: LD_INT 116
23975: PUSH
23976: LD_INT 117
23978: PUSH
23979: LD_INT 118
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: ST_TO_ADDR
// if result then
24006: LD_VAR 0 2
24010: IFFALSE 24796
// begin normal :=  ;
24012: LD_ADDR_VAR 0 5
24016: PUSH
24017: LD_STRING 
24019: ST_TO_ADDR
// hardcore :=  ;
24020: LD_ADDR_VAR 0 6
24024: PUSH
24025: LD_STRING 
24027: ST_TO_ADDR
// active :=  ;
24028: LD_ADDR_VAR 0 7
24032: PUSH
24033: LD_STRING 
24035: ST_TO_ADDR
// for i = 1 to normalCounter do
24036: LD_ADDR_VAR 0 8
24040: PUSH
24041: DOUBLE
24042: LD_INT 1
24044: DEC
24045: ST_TO_ADDR
24046: LD_EXP 45
24050: PUSH
24051: FOR_TO
24052: IFFALSE 24153
// begin tmp := 0 ;
24054: LD_ADDR_VAR 0 3
24058: PUSH
24059: LD_STRING 0
24061: ST_TO_ADDR
// if result [ 1 ] then
24062: LD_VAR 0 2
24066: PUSH
24067: LD_INT 1
24069: ARRAY
24070: IFFALSE 24135
// if result [ 1 ] [ 1 ] = i then
24072: LD_VAR 0 2
24076: PUSH
24077: LD_INT 1
24079: ARRAY
24080: PUSH
24081: LD_INT 1
24083: ARRAY
24084: PUSH
24085: LD_VAR 0 8
24089: EQUAL
24090: IFFALSE 24135
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24092: LD_ADDR_VAR 0 2
24096: PUSH
24097: LD_VAR 0 2
24101: PPUSH
24102: LD_INT 1
24104: PPUSH
24105: LD_VAR 0 2
24109: PUSH
24110: LD_INT 1
24112: ARRAY
24113: PPUSH
24114: LD_INT 1
24116: PPUSH
24117: CALL_OW 3
24121: PPUSH
24122: CALL_OW 1
24126: ST_TO_ADDR
// tmp := 1 ;
24127: LD_ADDR_VAR 0 3
24131: PUSH
24132: LD_STRING 1
24134: ST_TO_ADDR
// end ; normal := normal & tmp ;
24135: LD_ADDR_VAR 0 5
24139: PUSH
24140: LD_VAR 0 5
24144: PUSH
24145: LD_VAR 0 3
24149: STR
24150: ST_TO_ADDR
// end ;
24151: GO 24051
24153: POP
24154: POP
// for i = 1 to hardcoreCounter do
24155: LD_ADDR_VAR 0 8
24159: PUSH
24160: DOUBLE
24161: LD_INT 1
24163: DEC
24164: ST_TO_ADDR
24165: LD_EXP 46
24169: PUSH
24170: FOR_TO
24171: IFFALSE 24276
// begin tmp := 0 ;
24173: LD_ADDR_VAR 0 3
24177: PUSH
24178: LD_STRING 0
24180: ST_TO_ADDR
// if result [ 2 ] then
24181: LD_VAR 0 2
24185: PUSH
24186: LD_INT 2
24188: ARRAY
24189: IFFALSE 24258
// if result [ 2 ] [ 1 ] = 100 + i then
24191: LD_VAR 0 2
24195: PUSH
24196: LD_INT 2
24198: ARRAY
24199: PUSH
24200: LD_INT 1
24202: ARRAY
24203: PUSH
24204: LD_INT 100
24206: PUSH
24207: LD_VAR 0 8
24211: PLUS
24212: EQUAL
24213: IFFALSE 24258
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24215: LD_ADDR_VAR 0 2
24219: PUSH
24220: LD_VAR 0 2
24224: PPUSH
24225: LD_INT 2
24227: PPUSH
24228: LD_VAR 0 2
24232: PUSH
24233: LD_INT 2
24235: ARRAY
24236: PPUSH
24237: LD_INT 1
24239: PPUSH
24240: CALL_OW 3
24244: PPUSH
24245: CALL_OW 1
24249: ST_TO_ADDR
// tmp := 1 ;
24250: LD_ADDR_VAR 0 3
24254: PUSH
24255: LD_STRING 1
24257: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24258: LD_ADDR_VAR 0 6
24262: PUSH
24263: LD_VAR 0 6
24267: PUSH
24268: LD_VAR 0 3
24272: STR
24273: ST_TO_ADDR
// end ;
24274: GO 24170
24276: POP
24277: POP
// if isGameLoad then
24278: LD_VAR 0 1
24282: IFFALSE 24757
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24284: LD_ADDR_VAR 0 4
24288: PUSH
24289: LD_EXP 49
24293: PUSH
24294: LD_EXP 48
24298: PUSH
24299: LD_EXP 50
24303: PUSH
24304: LD_EXP 47
24308: PUSH
24309: LD_EXP 51
24313: PUSH
24314: LD_EXP 52
24318: PUSH
24319: LD_EXP 53
24323: PUSH
24324: LD_EXP 54
24328: PUSH
24329: LD_EXP 55
24333: PUSH
24334: LD_EXP 56
24338: PUSH
24339: LD_EXP 57
24343: PUSH
24344: LD_EXP 58
24348: PUSH
24349: LD_EXP 59
24353: PUSH
24354: LD_EXP 60
24358: PUSH
24359: LD_EXP 68
24363: PUSH
24364: LD_EXP 69
24368: PUSH
24369: LD_EXP 70
24373: PUSH
24374: LD_EXP 71
24378: PUSH
24379: LD_EXP 73
24383: PUSH
24384: LD_EXP 74
24388: PUSH
24389: LD_EXP 75
24393: PUSH
24394: LD_EXP 78
24398: PUSH
24399: LD_EXP 80
24403: PUSH
24404: LD_EXP 81
24408: PUSH
24409: LD_EXP 82
24413: PUSH
24414: LD_EXP 84
24418: PUSH
24419: LD_EXP 85
24423: PUSH
24424: LD_EXP 88
24428: PUSH
24429: LD_EXP 89
24433: PUSH
24434: LD_EXP 90
24438: PUSH
24439: LD_EXP 91
24443: PUSH
24444: LD_EXP 92
24448: PUSH
24449: LD_EXP 93
24453: PUSH
24454: LD_EXP 94
24458: PUSH
24459: LD_EXP 95
24463: PUSH
24464: LD_EXP 96
24468: PUSH
24469: LD_EXP 61
24473: PUSH
24474: LD_EXP 62
24478: PUSH
24479: LD_EXP 65
24483: PUSH
24484: LD_EXP 66
24488: PUSH
24489: LD_EXP 67
24493: PUSH
24494: LD_EXP 63
24498: PUSH
24499: LD_EXP 64
24503: PUSH
24504: LD_EXP 72
24508: PUSH
24509: LD_EXP 76
24513: PUSH
24514: LD_EXP 77
24518: PUSH
24519: LD_EXP 79
24523: PUSH
24524: LD_EXP 83
24528: PUSH
24529: LD_EXP 86
24533: PUSH
24534: LD_EXP 87
24538: PUSH
24539: LD_EXP 97
24543: PUSH
24544: LD_EXP 98
24548: PUSH
24549: LD_EXP 99
24553: PUSH
24554: LD_EXP 100
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: ST_TO_ADDR
// tmp :=  ;
24615: LD_ADDR_VAR 0 3
24619: PUSH
24620: LD_STRING 
24622: ST_TO_ADDR
// for i = 1 to normalCounter do
24623: LD_ADDR_VAR 0 8
24627: PUSH
24628: DOUBLE
24629: LD_INT 1
24631: DEC
24632: ST_TO_ADDR
24633: LD_EXP 45
24637: PUSH
24638: FOR_TO
24639: IFFALSE 24675
// begin if flags [ i ] then
24641: LD_VAR 0 4
24645: PUSH
24646: LD_VAR 0 8
24650: ARRAY
24651: IFFALSE 24673
// tmp := tmp & i & ; ;
24653: LD_ADDR_VAR 0 3
24657: PUSH
24658: LD_VAR 0 3
24662: PUSH
24663: LD_VAR 0 8
24667: STR
24668: PUSH
24669: LD_STRING ;
24671: STR
24672: ST_TO_ADDR
// end ;
24673: GO 24638
24675: POP
24676: POP
// for i = 1 to hardcoreCounter do
24677: LD_ADDR_VAR 0 8
24681: PUSH
24682: DOUBLE
24683: LD_INT 1
24685: DEC
24686: ST_TO_ADDR
24687: LD_EXP 46
24691: PUSH
24692: FOR_TO
24693: IFFALSE 24739
// begin if flags [ normalCounter + i ] then
24695: LD_VAR 0 4
24699: PUSH
24700: LD_EXP 45
24704: PUSH
24705: LD_VAR 0 8
24709: PLUS
24710: ARRAY
24711: IFFALSE 24737
// tmp := tmp & ( 100 + i ) & ; ;
24713: LD_ADDR_VAR 0 3
24717: PUSH
24718: LD_VAR 0 3
24722: PUSH
24723: LD_INT 100
24725: PUSH
24726: LD_VAR 0 8
24730: PLUS
24731: STR
24732: PUSH
24733: LD_STRING ;
24735: STR
24736: ST_TO_ADDR
// end ;
24737: GO 24692
24739: POP
24740: POP
// if tmp then
24741: LD_VAR 0 3
24745: IFFALSE 24757
// active := tmp ;
24747: LD_ADDR_VAR 0 7
24751: PUSH
24752: LD_VAR 0 3
24756: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24757: LD_STRING getStreamItemsFromMission("
24759: PUSH
24760: LD_VAR 0 5
24764: STR
24765: PUSH
24766: LD_STRING ","
24768: STR
24769: PUSH
24770: LD_VAR 0 6
24774: STR
24775: PUSH
24776: LD_STRING ","
24778: STR
24779: PUSH
24780: LD_VAR 0 7
24784: STR
24785: PUSH
24786: LD_STRING ")
24788: STR
24789: PPUSH
24790: CALL_OW 559
// end else
24794: GO 24803
// ToLua ( getStreamItemsFromMission("","","") ) ;
24796: LD_STRING getStreamItemsFromMission("","","")
24798: PPUSH
24799: CALL_OW 559
// end ;
24803: LD_VAR 0 2
24807: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24808: LD_EXP 44
24812: PUSH
24813: LD_EXP 49
24817: AND
24818: IFFALSE 24942
24820: GO 24822
24822: DISABLE
24823: LD_INT 0
24825: PPUSH
24826: PPUSH
// begin enable ;
24827: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24828: LD_ADDR_VAR 0 2
24832: PUSH
24833: LD_INT 22
24835: PUSH
24836: LD_OWVAR 2
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 2
24847: PUSH
24848: LD_INT 34
24850: PUSH
24851: LD_INT 7
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 34
24860: PUSH
24861: LD_INT 45
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 34
24870: PUSH
24871: LD_INT 28
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 34
24880: PUSH
24881: LD_INT 47
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PPUSH
24899: CALL_OW 69
24903: ST_TO_ADDR
// if not tmp then
24904: LD_VAR 0 2
24908: NOT
24909: IFFALSE 24913
// exit ;
24911: GO 24942
// for i in tmp do
24913: LD_ADDR_VAR 0 1
24917: PUSH
24918: LD_VAR 0 2
24922: PUSH
24923: FOR_IN
24924: IFFALSE 24940
// begin SetLives ( i , 0 ) ;
24926: LD_VAR 0 1
24930: PPUSH
24931: LD_INT 0
24933: PPUSH
24934: CALL_OW 234
// end ;
24938: GO 24923
24940: POP
24941: POP
// end ;
24942: PPOPN 2
24944: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24945: LD_EXP 44
24949: PUSH
24950: LD_EXP 50
24954: AND
24955: IFFALSE 25039
24957: GO 24959
24959: DISABLE
24960: LD_INT 0
24962: PPUSH
24963: PPUSH
// begin enable ;
24964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24965: LD_ADDR_VAR 0 2
24969: PUSH
24970: LD_INT 22
24972: PUSH
24973: LD_OWVAR 2
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 32
24984: PUSH
24985: LD_INT 3
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PPUSH
24996: CALL_OW 69
25000: ST_TO_ADDR
// if not tmp then
25001: LD_VAR 0 2
25005: NOT
25006: IFFALSE 25010
// exit ;
25008: GO 25039
// for i in tmp do
25010: LD_ADDR_VAR 0 1
25014: PUSH
25015: LD_VAR 0 2
25019: PUSH
25020: FOR_IN
25021: IFFALSE 25037
// begin SetLives ( i , 0 ) ;
25023: LD_VAR 0 1
25027: PPUSH
25028: LD_INT 0
25030: PPUSH
25031: CALL_OW 234
// end ;
25035: GO 25020
25037: POP
25038: POP
// end ;
25039: PPOPN 2
25041: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25042: LD_EXP 44
25046: PUSH
25047: LD_EXP 47
25051: AND
25052: IFFALSE 25145
25054: GO 25056
25056: DISABLE
25057: LD_INT 0
25059: PPUSH
// begin enable ;
25060: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25061: LD_ADDR_VAR 0 1
25065: PUSH
25066: LD_INT 22
25068: PUSH
25069: LD_OWVAR 2
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 2
25080: PUSH
25081: LD_INT 25
25083: PUSH
25084: LD_INT 5
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 25
25093: PUSH
25094: LD_INT 9
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 25
25103: PUSH
25104: LD_INT 8
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PPUSH
25121: CALL_OW 69
25125: PUSH
25126: FOR_IN
25127: IFFALSE 25143
// begin SetClass ( i , 1 ) ;
25129: LD_VAR 0 1
25133: PPUSH
25134: LD_INT 1
25136: PPUSH
25137: CALL_OW 336
// end ;
25141: GO 25126
25143: POP
25144: POP
// end ;
25145: PPOPN 1
25147: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25148: LD_EXP 44
25152: PUSH
25153: LD_EXP 48
25157: AND
25158: PUSH
25159: LD_OWVAR 65
25163: PUSH
25164: LD_INT 7
25166: LESS
25167: AND
25168: IFFALSE 25182
25170: GO 25172
25172: DISABLE
// begin enable ;
25173: ENABLE
// game_speed := 7 ;
25174: LD_ADDR_OWVAR 65
25178: PUSH
25179: LD_INT 7
25181: ST_TO_ADDR
// end ;
25182: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25183: LD_EXP 44
25187: PUSH
25188: LD_EXP 51
25192: AND
25193: IFFALSE 25395
25195: GO 25197
25197: DISABLE
25198: LD_INT 0
25200: PPUSH
25201: PPUSH
25202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25203: LD_ADDR_VAR 0 3
25207: PUSH
25208: LD_INT 81
25210: PUSH
25211: LD_OWVAR 2
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 21
25222: PUSH
25223: LD_INT 1
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PPUSH
25234: CALL_OW 69
25238: ST_TO_ADDR
// if not tmp then
25239: LD_VAR 0 3
25243: NOT
25244: IFFALSE 25248
// exit ;
25246: GO 25395
// if tmp > 5 then
25248: LD_VAR 0 3
25252: PUSH
25253: LD_INT 5
25255: GREATER
25256: IFFALSE 25268
// k := 5 else
25258: LD_ADDR_VAR 0 2
25262: PUSH
25263: LD_INT 5
25265: ST_TO_ADDR
25266: GO 25278
// k := tmp ;
25268: LD_ADDR_VAR 0 2
25272: PUSH
25273: LD_VAR 0 3
25277: ST_TO_ADDR
// for i := 1 to k do
25278: LD_ADDR_VAR 0 1
25282: PUSH
25283: DOUBLE
25284: LD_INT 1
25286: DEC
25287: ST_TO_ADDR
25288: LD_VAR 0 2
25292: PUSH
25293: FOR_TO
25294: IFFALSE 25393
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25296: LD_VAR 0 3
25300: PUSH
25301: LD_VAR 0 1
25305: ARRAY
25306: PPUSH
25307: LD_VAR 0 1
25311: PUSH
25312: LD_INT 4
25314: MOD
25315: PUSH
25316: LD_INT 1
25318: PLUS
25319: PPUSH
25320: CALL_OW 259
25324: PUSH
25325: LD_INT 10
25327: LESS
25328: IFFALSE 25391
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25330: LD_VAR 0 3
25334: PUSH
25335: LD_VAR 0 1
25339: ARRAY
25340: PPUSH
25341: LD_VAR 0 1
25345: PUSH
25346: LD_INT 4
25348: MOD
25349: PUSH
25350: LD_INT 1
25352: PLUS
25353: PPUSH
25354: LD_VAR 0 3
25358: PUSH
25359: LD_VAR 0 1
25363: ARRAY
25364: PPUSH
25365: LD_VAR 0 1
25369: PUSH
25370: LD_INT 4
25372: MOD
25373: PUSH
25374: LD_INT 1
25376: PLUS
25377: PPUSH
25378: CALL_OW 259
25382: PUSH
25383: LD_INT 1
25385: PLUS
25386: PPUSH
25387: CALL_OW 237
25391: GO 25293
25393: POP
25394: POP
// end ;
25395: PPOPN 3
25397: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25398: LD_EXP 44
25402: PUSH
25403: LD_EXP 52
25407: AND
25408: IFFALSE 25428
25410: GO 25412
25412: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25413: LD_INT 4
25415: PPUSH
25416: LD_OWVAR 2
25420: PPUSH
25421: LD_INT 0
25423: PPUSH
25424: CALL_OW 324
25428: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25429: LD_EXP 44
25433: PUSH
25434: LD_EXP 81
25438: AND
25439: IFFALSE 25459
25441: GO 25443
25443: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25444: LD_INT 19
25446: PPUSH
25447: LD_OWVAR 2
25451: PPUSH
25452: LD_INT 0
25454: PPUSH
25455: CALL_OW 324
25459: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25460: LD_EXP 44
25464: PUSH
25465: LD_EXP 53
25469: AND
25470: IFFALSE 25572
25472: GO 25474
25474: DISABLE
25475: LD_INT 0
25477: PPUSH
25478: PPUSH
// begin enable ;
25479: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25480: LD_ADDR_VAR 0 2
25484: PUSH
25485: LD_INT 22
25487: PUSH
25488: LD_OWVAR 2
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 2
25499: PUSH
25500: LD_INT 34
25502: PUSH
25503: LD_INT 11
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 34
25512: PUSH
25513: LD_INT 30
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: LIST
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PPUSH
25529: CALL_OW 69
25533: ST_TO_ADDR
// if not tmp then
25534: LD_VAR 0 2
25538: NOT
25539: IFFALSE 25543
// exit ;
25541: GO 25572
// for i in tmp do
25543: LD_ADDR_VAR 0 1
25547: PUSH
25548: LD_VAR 0 2
25552: PUSH
25553: FOR_IN
25554: IFFALSE 25570
// begin SetLives ( i , 0 ) ;
25556: LD_VAR 0 1
25560: PPUSH
25561: LD_INT 0
25563: PPUSH
25564: CALL_OW 234
// end ;
25568: GO 25553
25570: POP
25571: POP
// end ;
25572: PPOPN 2
25574: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25575: LD_EXP 44
25579: PUSH
25580: LD_EXP 54
25584: AND
25585: IFFALSE 25605
25587: GO 25589
25589: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25590: LD_INT 32
25592: PPUSH
25593: LD_OWVAR 2
25597: PPUSH
25598: LD_INT 0
25600: PPUSH
25601: CALL_OW 324
25605: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25606: LD_EXP 44
25610: PUSH
25611: LD_EXP 55
25615: AND
25616: IFFALSE 25797
25618: GO 25620
25620: DISABLE
25621: LD_INT 0
25623: PPUSH
25624: PPUSH
25625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25626: LD_ADDR_VAR 0 2
25630: PUSH
25631: LD_INT 22
25633: PUSH
25634: LD_OWVAR 2
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 33
25645: PUSH
25646: LD_INT 3
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PPUSH
25657: CALL_OW 69
25661: ST_TO_ADDR
// if not tmp then
25662: LD_VAR 0 2
25666: NOT
25667: IFFALSE 25671
// exit ;
25669: GO 25797
// side := 0 ;
25671: LD_ADDR_VAR 0 3
25675: PUSH
25676: LD_INT 0
25678: ST_TO_ADDR
// for i := 1 to 8 do
25679: LD_ADDR_VAR 0 1
25683: PUSH
25684: DOUBLE
25685: LD_INT 1
25687: DEC
25688: ST_TO_ADDR
25689: LD_INT 8
25691: PUSH
25692: FOR_TO
25693: IFFALSE 25741
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25695: LD_OWVAR 2
25699: PUSH
25700: LD_VAR 0 1
25704: NONEQUAL
25705: PUSH
25706: LD_OWVAR 2
25710: PPUSH
25711: LD_VAR 0 1
25715: PPUSH
25716: CALL_OW 81
25720: PUSH
25721: LD_INT 2
25723: EQUAL
25724: AND
25725: IFFALSE 25739
// begin side := i ;
25727: LD_ADDR_VAR 0 3
25731: PUSH
25732: LD_VAR 0 1
25736: ST_TO_ADDR
// break ;
25737: GO 25741
// end ;
25739: GO 25692
25741: POP
25742: POP
// if not side then
25743: LD_VAR 0 3
25747: NOT
25748: IFFALSE 25752
// exit ;
25750: GO 25797
// for i := 1 to tmp do
25752: LD_ADDR_VAR 0 1
25756: PUSH
25757: DOUBLE
25758: LD_INT 1
25760: DEC
25761: ST_TO_ADDR
25762: LD_VAR 0 2
25766: PUSH
25767: FOR_TO
25768: IFFALSE 25795
// if Prob ( 60 ) then
25770: LD_INT 60
25772: PPUSH
25773: CALL_OW 13
25777: IFFALSE 25793
// SetSide ( i , side ) ;
25779: LD_VAR 0 1
25783: PPUSH
25784: LD_VAR 0 3
25788: PPUSH
25789: CALL_OW 235
25793: GO 25767
25795: POP
25796: POP
// end ;
25797: PPOPN 3
25799: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25800: LD_EXP 44
25804: PUSH
25805: LD_EXP 57
25809: AND
25810: IFFALSE 25929
25812: GO 25814
25814: DISABLE
25815: LD_INT 0
25817: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25818: LD_ADDR_VAR 0 1
25822: PUSH
25823: LD_INT 22
25825: PUSH
25826: LD_OWVAR 2
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 21
25837: PUSH
25838: LD_INT 1
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 3
25847: PUSH
25848: LD_INT 23
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: LIST
25866: PPUSH
25867: CALL_OW 69
25871: PUSH
25872: FOR_IN
25873: IFFALSE 25927
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25875: LD_VAR 0 1
25879: PPUSH
25880: CALL_OW 257
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: LD_INT 2
25890: PUSH
25891: LD_INT 3
25893: PUSH
25894: LD_INT 4
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: IN
25903: IFFALSE 25925
// SetClass ( un , rand ( 1 , 4 ) ) ;
25905: LD_VAR 0 1
25909: PPUSH
25910: LD_INT 1
25912: PPUSH
25913: LD_INT 4
25915: PPUSH
25916: CALL_OW 12
25920: PPUSH
25921: CALL_OW 336
25925: GO 25872
25927: POP
25928: POP
// end ;
25929: PPOPN 1
25931: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25932: LD_EXP 44
25936: PUSH
25937: LD_EXP 56
25941: AND
25942: IFFALSE 26021
25944: GO 25946
25946: DISABLE
25947: LD_INT 0
25949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25950: LD_ADDR_VAR 0 1
25954: PUSH
25955: LD_INT 22
25957: PUSH
25958: LD_OWVAR 2
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 21
25969: PUSH
25970: LD_INT 3
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PPUSH
25981: CALL_OW 69
25985: ST_TO_ADDR
// if not tmp then
25986: LD_VAR 0 1
25990: NOT
25991: IFFALSE 25995
// exit ;
25993: GO 26021
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25995: LD_VAR 0 1
25999: PUSH
26000: LD_INT 1
26002: PPUSH
26003: LD_VAR 0 1
26007: PPUSH
26008: CALL_OW 12
26012: ARRAY
26013: PPUSH
26014: LD_INT 100
26016: PPUSH
26017: CALL_OW 234
// end ;
26021: PPOPN 1
26023: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26024: LD_EXP 44
26028: PUSH
26029: LD_EXP 58
26033: AND
26034: IFFALSE 26132
26036: GO 26038
26038: DISABLE
26039: LD_INT 0
26041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26042: LD_ADDR_VAR 0 1
26046: PUSH
26047: LD_INT 22
26049: PUSH
26050: LD_OWVAR 2
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 21
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PPUSH
26073: CALL_OW 69
26077: ST_TO_ADDR
// if not tmp then
26078: LD_VAR 0 1
26082: NOT
26083: IFFALSE 26087
// exit ;
26085: GO 26132
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26087: LD_VAR 0 1
26091: PUSH
26092: LD_INT 1
26094: PPUSH
26095: LD_VAR 0 1
26099: PPUSH
26100: CALL_OW 12
26104: ARRAY
26105: PPUSH
26106: LD_INT 1
26108: PPUSH
26109: LD_INT 4
26111: PPUSH
26112: CALL_OW 12
26116: PPUSH
26117: LD_INT 3000
26119: PPUSH
26120: LD_INT 9000
26122: PPUSH
26123: CALL_OW 12
26127: PPUSH
26128: CALL_OW 492
// end ;
26132: PPOPN 1
26134: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26135: LD_EXP 44
26139: PUSH
26140: LD_EXP 59
26144: AND
26145: IFFALSE 26165
26147: GO 26149
26149: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26150: LD_INT 1
26152: PPUSH
26153: LD_OWVAR 2
26157: PPUSH
26158: LD_INT 0
26160: PPUSH
26161: CALL_OW 324
26165: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26166: LD_EXP 44
26170: PUSH
26171: LD_EXP 60
26175: AND
26176: IFFALSE 26259
26178: GO 26180
26180: DISABLE
26181: LD_INT 0
26183: PPUSH
26184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26185: LD_ADDR_VAR 0 2
26189: PUSH
26190: LD_INT 22
26192: PUSH
26193: LD_OWVAR 2
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 21
26204: PUSH
26205: LD_INT 3
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PPUSH
26216: CALL_OW 69
26220: ST_TO_ADDR
// if not tmp then
26221: LD_VAR 0 2
26225: NOT
26226: IFFALSE 26230
// exit ;
26228: GO 26259
// for i in tmp do
26230: LD_ADDR_VAR 0 1
26234: PUSH
26235: LD_VAR 0 2
26239: PUSH
26240: FOR_IN
26241: IFFALSE 26257
// SetBLevel ( i , 10 ) ;
26243: LD_VAR 0 1
26247: PPUSH
26248: LD_INT 10
26250: PPUSH
26251: CALL_OW 241
26255: GO 26240
26257: POP
26258: POP
// end ;
26259: PPOPN 2
26261: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26262: LD_EXP 44
26266: PUSH
26267: LD_EXP 61
26271: AND
26272: IFFALSE 26383
26274: GO 26276
26276: DISABLE
26277: LD_INT 0
26279: PPUSH
26280: PPUSH
26281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26282: LD_ADDR_VAR 0 3
26286: PUSH
26287: LD_INT 22
26289: PUSH
26290: LD_OWVAR 2
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 25
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PPUSH
26313: CALL_OW 69
26317: ST_TO_ADDR
// if not tmp then
26318: LD_VAR 0 3
26322: NOT
26323: IFFALSE 26327
// exit ;
26325: GO 26383
// un := tmp [ rand ( 1 , tmp ) ] ;
26327: LD_ADDR_VAR 0 2
26331: PUSH
26332: LD_VAR 0 3
26336: PUSH
26337: LD_INT 1
26339: PPUSH
26340: LD_VAR 0 3
26344: PPUSH
26345: CALL_OW 12
26349: ARRAY
26350: ST_TO_ADDR
// if Crawls ( un ) then
26351: LD_VAR 0 2
26355: PPUSH
26356: CALL_OW 318
26360: IFFALSE 26371
// ComWalk ( un ) ;
26362: LD_VAR 0 2
26366: PPUSH
26367: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26371: LD_VAR 0 2
26375: PPUSH
26376: LD_INT 5
26378: PPUSH
26379: CALL_OW 336
// end ;
26383: PPOPN 3
26385: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26386: LD_EXP 44
26390: PUSH
26391: LD_EXP 62
26395: AND
26396: PUSH
26397: LD_OWVAR 67
26401: PUSH
26402: LD_INT 4
26404: LESS
26405: AND
26406: IFFALSE 26425
26408: GO 26410
26410: DISABLE
// begin Difficulty := Difficulty + 1 ;
26411: LD_ADDR_OWVAR 67
26415: PUSH
26416: LD_OWVAR 67
26420: PUSH
26421: LD_INT 1
26423: PLUS
26424: ST_TO_ADDR
// end ;
26425: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26426: LD_EXP 44
26430: PUSH
26431: LD_EXP 63
26435: AND
26436: IFFALSE 26539
26438: GO 26440
26440: DISABLE
26441: LD_INT 0
26443: PPUSH
// begin for i := 1 to 5 do
26444: LD_ADDR_VAR 0 1
26448: PUSH
26449: DOUBLE
26450: LD_INT 1
26452: DEC
26453: ST_TO_ADDR
26454: LD_INT 5
26456: PUSH
26457: FOR_TO
26458: IFFALSE 26537
// begin uc_nation := nation_nature ;
26460: LD_ADDR_OWVAR 21
26464: PUSH
26465: LD_INT 0
26467: ST_TO_ADDR
// uc_side := 0 ;
26468: LD_ADDR_OWVAR 20
26472: PUSH
26473: LD_INT 0
26475: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26476: LD_ADDR_OWVAR 29
26480: PUSH
26481: LD_INT 12
26483: PUSH
26484: LD_INT 12
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: ST_TO_ADDR
// hc_agressivity := 20 ;
26491: LD_ADDR_OWVAR 35
26495: PUSH
26496: LD_INT 20
26498: ST_TO_ADDR
// hc_class := class_tiger ;
26499: LD_ADDR_OWVAR 28
26503: PUSH
26504: LD_INT 14
26506: ST_TO_ADDR
// hc_gallery :=  ;
26507: LD_ADDR_OWVAR 33
26511: PUSH
26512: LD_STRING 
26514: ST_TO_ADDR
// hc_name :=  ;
26515: LD_ADDR_OWVAR 26
26519: PUSH
26520: LD_STRING 
26522: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26523: CALL_OW 44
26527: PPUSH
26528: LD_INT 0
26530: PPUSH
26531: CALL_OW 51
// end ;
26535: GO 26457
26537: POP
26538: POP
// end ;
26539: PPOPN 1
26541: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26542: LD_EXP 44
26546: PUSH
26547: LD_EXP 64
26551: AND
26552: IFFALSE 26561
26554: GO 26556
26556: DISABLE
// StreamSibBomb ;
26557: CALL 26562 0 0
26561: END
// export function StreamSibBomb ; var i , x , y ; begin
26562: LD_INT 0
26564: PPUSH
26565: PPUSH
26566: PPUSH
26567: PPUSH
// result := false ;
26568: LD_ADDR_VAR 0 1
26572: PUSH
26573: LD_INT 0
26575: ST_TO_ADDR
// for i := 1 to 16 do
26576: LD_ADDR_VAR 0 2
26580: PUSH
26581: DOUBLE
26582: LD_INT 1
26584: DEC
26585: ST_TO_ADDR
26586: LD_INT 16
26588: PUSH
26589: FOR_TO
26590: IFFALSE 26789
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26592: LD_ADDR_VAR 0 3
26596: PUSH
26597: LD_INT 10
26599: PUSH
26600: LD_INT 20
26602: PUSH
26603: LD_INT 30
26605: PUSH
26606: LD_INT 40
26608: PUSH
26609: LD_INT 50
26611: PUSH
26612: LD_INT 60
26614: PUSH
26615: LD_INT 70
26617: PUSH
26618: LD_INT 80
26620: PUSH
26621: LD_INT 90
26623: PUSH
26624: LD_INT 100
26626: PUSH
26627: LD_INT 110
26629: PUSH
26630: LD_INT 120
26632: PUSH
26633: LD_INT 130
26635: PUSH
26636: LD_INT 140
26638: PUSH
26639: LD_INT 150
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 1
26661: PPUSH
26662: LD_INT 15
26664: PPUSH
26665: CALL_OW 12
26669: ARRAY
26670: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26671: LD_ADDR_VAR 0 4
26675: PUSH
26676: LD_INT 10
26678: PUSH
26679: LD_INT 20
26681: PUSH
26682: LD_INT 30
26684: PUSH
26685: LD_INT 40
26687: PUSH
26688: LD_INT 50
26690: PUSH
26691: LD_INT 60
26693: PUSH
26694: LD_INT 70
26696: PUSH
26697: LD_INT 80
26699: PUSH
26700: LD_INT 90
26702: PUSH
26703: LD_INT 100
26705: PUSH
26706: LD_INT 110
26708: PUSH
26709: LD_INT 120
26711: PUSH
26712: LD_INT 130
26714: PUSH
26715: LD_INT 140
26717: PUSH
26718: LD_INT 150
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: PPUSH
26741: LD_INT 15
26743: PPUSH
26744: CALL_OW 12
26748: ARRAY
26749: ST_TO_ADDR
// if ValidHex ( x , y ) then
26750: LD_VAR 0 3
26754: PPUSH
26755: LD_VAR 0 4
26759: PPUSH
26760: CALL_OW 488
26764: IFFALSE 26787
// begin result := [ x , y ] ;
26766: LD_ADDR_VAR 0 1
26770: PUSH
26771: LD_VAR 0 3
26775: PUSH
26776: LD_VAR 0 4
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: ST_TO_ADDR
// break ;
26785: GO 26789
// end ; end ;
26787: GO 26589
26789: POP
26790: POP
// if result then
26791: LD_VAR 0 1
26795: IFFALSE 26855
// begin ToLua ( playSibBomb() ) ;
26797: LD_STRING playSibBomb()
26799: PPUSH
26800: CALL_OW 559
// wait ( 0 0$14 ) ;
26804: LD_INT 490
26806: PPUSH
26807: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26811: LD_VAR 0 1
26815: PUSH
26816: LD_INT 1
26818: ARRAY
26819: PPUSH
26820: LD_VAR 0 1
26824: PUSH
26825: LD_INT 2
26827: ARRAY
26828: PPUSH
26829: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26833: LD_VAR 0 1
26837: PUSH
26838: LD_INT 1
26840: ARRAY
26841: PPUSH
26842: LD_VAR 0 1
26846: PUSH
26847: LD_INT 2
26849: ARRAY
26850: PPUSH
26851: CALL_OW 429
// end ; end ;
26855: LD_VAR 0 1
26859: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26860: LD_EXP 44
26864: PUSH
26865: LD_EXP 66
26869: AND
26870: IFFALSE 26882
26872: GO 26874
26874: DISABLE
// YouLost (  ) ;
26875: LD_STRING 
26877: PPUSH
26878: CALL_OW 104
26882: END
// every 0 0$1 trigger StreamModeActive and sFog do
26883: LD_EXP 44
26887: PUSH
26888: LD_EXP 65
26892: AND
26893: IFFALSE 26907
26895: GO 26897
26897: DISABLE
// FogOff ( your_side ) ;
26898: LD_OWVAR 2
26902: PPUSH
26903: CALL_OW 344
26907: END
// every 0 0$1 trigger StreamModeActive and sSun do
26908: LD_EXP 44
26912: PUSH
26913: LD_EXP 67
26917: AND
26918: IFFALSE 26946
26920: GO 26922
26922: DISABLE
// begin solar_recharge_percent := 0 ;
26923: LD_ADDR_OWVAR 79
26927: PUSH
26928: LD_INT 0
26930: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26931: LD_INT 10500
26933: PPUSH
26934: CALL_OW 67
// solar_recharge_percent := 100 ;
26938: LD_ADDR_OWVAR 79
26942: PUSH
26943: LD_INT 100
26945: ST_TO_ADDR
// end ;
26946: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26947: LD_EXP 44
26951: PUSH
26952: LD_EXP 68
26956: AND
26957: IFFALSE 27196
26959: GO 26961
26961: DISABLE
26962: LD_INT 0
26964: PPUSH
26965: PPUSH
26966: PPUSH
// begin tmp := [ ] ;
26967: LD_ADDR_VAR 0 3
26971: PUSH
26972: EMPTY
26973: ST_TO_ADDR
// for i := 1 to 6 do
26974: LD_ADDR_VAR 0 1
26978: PUSH
26979: DOUBLE
26980: LD_INT 1
26982: DEC
26983: ST_TO_ADDR
26984: LD_INT 6
26986: PUSH
26987: FOR_TO
26988: IFFALSE 27093
// begin uc_nation := nation_nature ;
26990: LD_ADDR_OWVAR 21
26994: PUSH
26995: LD_INT 0
26997: ST_TO_ADDR
// uc_side := 0 ;
26998: LD_ADDR_OWVAR 20
27002: PUSH
27003: LD_INT 0
27005: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27006: LD_ADDR_OWVAR 29
27010: PUSH
27011: LD_INT 12
27013: PUSH
27014: LD_INT 12
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: ST_TO_ADDR
// hc_agressivity := 20 ;
27021: LD_ADDR_OWVAR 35
27025: PUSH
27026: LD_INT 20
27028: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27029: LD_ADDR_OWVAR 28
27033: PUSH
27034: LD_INT 17
27036: ST_TO_ADDR
// hc_gallery :=  ;
27037: LD_ADDR_OWVAR 33
27041: PUSH
27042: LD_STRING 
27044: ST_TO_ADDR
// hc_name :=  ;
27045: LD_ADDR_OWVAR 26
27049: PUSH
27050: LD_STRING 
27052: ST_TO_ADDR
// un := CreateHuman ;
27053: LD_ADDR_VAR 0 2
27057: PUSH
27058: CALL_OW 44
27062: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27063: LD_VAR 0 2
27067: PPUSH
27068: LD_INT 1
27070: PPUSH
27071: CALL_OW 51
// tmp := tmp ^ un ;
27075: LD_ADDR_VAR 0 3
27079: PUSH
27080: LD_VAR 0 3
27084: PUSH
27085: LD_VAR 0 2
27089: ADD
27090: ST_TO_ADDR
// end ;
27091: GO 26987
27093: POP
27094: POP
// repeat wait ( 0 0$1 ) ;
27095: LD_INT 35
27097: PPUSH
27098: CALL_OW 67
// for un in tmp do
27102: LD_ADDR_VAR 0 2
27106: PUSH
27107: LD_VAR 0 3
27111: PUSH
27112: FOR_IN
27113: IFFALSE 27187
// begin if IsDead ( un ) then
27115: LD_VAR 0 2
27119: PPUSH
27120: CALL_OW 301
27124: IFFALSE 27144
// begin tmp := tmp diff un ;
27126: LD_ADDR_VAR 0 3
27130: PUSH
27131: LD_VAR 0 3
27135: PUSH
27136: LD_VAR 0 2
27140: DIFF
27141: ST_TO_ADDR
// continue ;
27142: GO 27112
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27144: LD_VAR 0 2
27148: PPUSH
27149: LD_INT 3
27151: PUSH
27152: LD_INT 22
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PPUSH
27166: CALL_OW 69
27170: PPUSH
27171: LD_VAR 0 2
27175: PPUSH
27176: CALL_OW 74
27180: PPUSH
27181: CALL_OW 115
// end ;
27185: GO 27112
27187: POP
27188: POP
// until not tmp ;
27189: LD_VAR 0 3
27193: NOT
27194: IFFALSE 27095
// end ;
27196: PPOPN 3
27198: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27199: LD_EXP 44
27203: PUSH
27204: LD_EXP 69
27208: AND
27209: IFFALSE 27263
27211: GO 27213
27213: DISABLE
// begin ToLua ( displayTroll(); ) ;
27214: LD_STRING displayTroll();
27216: PPUSH
27217: CALL_OW 559
// wait ( 3 3$00 ) ;
27221: LD_INT 6300
27223: PPUSH
27224: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27228: LD_STRING hideTroll();
27230: PPUSH
27231: CALL_OW 559
// wait ( 1 1$00 ) ;
27235: LD_INT 2100
27237: PPUSH
27238: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27242: LD_STRING displayTroll();
27244: PPUSH
27245: CALL_OW 559
// wait ( 1 1$00 ) ;
27249: LD_INT 2100
27251: PPUSH
27252: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27256: LD_STRING hideTroll();
27258: PPUSH
27259: CALL_OW 559
// end ;
27263: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27264: LD_EXP 44
27268: PUSH
27269: LD_EXP 70
27273: AND
27274: IFFALSE 27337
27276: GO 27278
27278: DISABLE
27279: LD_INT 0
27281: PPUSH
// begin p := 0 ;
27282: LD_ADDR_VAR 0 1
27286: PUSH
27287: LD_INT 0
27289: ST_TO_ADDR
// repeat game_speed := 1 ;
27290: LD_ADDR_OWVAR 65
27294: PUSH
27295: LD_INT 1
27297: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27298: LD_INT 35
27300: PPUSH
27301: CALL_OW 67
// p := p + 1 ;
27305: LD_ADDR_VAR 0 1
27309: PUSH
27310: LD_VAR 0 1
27314: PUSH
27315: LD_INT 1
27317: PLUS
27318: ST_TO_ADDR
// until p >= 60 ;
27319: LD_VAR 0 1
27323: PUSH
27324: LD_INT 60
27326: GREATEREQUAL
27327: IFFALSE 27290
// game_speed := 4 ;
27329: LD_ADDR_OWVAR 65
27333: PUSH
27334: LD_INT 4
27336: ST_TO_ADDR
// end ;
27337: PPOPN 1
27339: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27340: LD_EXP 44
27344: PUSH
27345: LD_EXP 71
27349: AND
27350: IFFALSE 27496
27352: GO 27354
27354: DISABLE
27355: LD_INT 0
27357: PPUSH
27358: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27359: LD_ADDR_VAR 0 1
27363: PUSH
27364: LD_INT 22
27366: PUSH
27367: LD_OWVAR 2
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 2
27378: PUSH
27379: LD_INT 30
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 30
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: LIST
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PPUSH
27408: CALL_OW 69
27412: ST_TO_ADDR
// if not depot then
27413: LD_VAR 0 1
27417: NOT
27418: IFFALSE 27422
// exit ;
27420: GO 27496
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27422: LD_ADDR_VAR 0 2
27426: PUSH
27427: LD_VAR 0 1
27431: PUSH
27432: LD_INT 1
27434: PPUSH
27435: LD_VAR 0 1
27439: PPUSH
27440: CALL_OW 12
27444: ARRAY
27445: PPUSH
27446: CALL_OW 274
27450: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27451: LD_VAR 0 2
27455: PPUSH
27456: LD_INT 1
27458: PPUSH
27459: LD_INT 0
27461: PPUSH
27462: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27466: LD_VAR 0 2
27470: PPUSH
27471: LD_INT 2
27473: PPUSH
27474: LD_INT 0
27476: PPUSH
27477: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27481: LD_VAR 0 2
27485: PPUSH
27486: LD_INT 3
27488: PPUSH
27489: LD_INT 0
27491: PPUSH
27492: CALL_OW 277
// end ;
27496: PPOPN 2
27498: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27499: LD_EXP 44
27503: PUSH
27504: LD_EXP 72
27508: AND
27509: IFFALSE 27606
27511: GO 27513
27513: DISABLE
27514: LD_INT 0
27516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27517: LD_ADDR_VAR 0 1
27521: PUSH
27522: LD_INT 22
27524: PUSH
27525: LD_OWVAR 2
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 21
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 3
27546: PUSH
27547: LD_INT 23
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: LIST
27565: PPUSH
27566: CALL_OW 69
27570: ST_TO_ADDR
// if not tmp then
27571: LD_VAR 0 1
27575: NOT
27576: IFFALSE 27580
// exit ;
27578: GO 27606
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27580: LD_VAR 0 1
27584: PUSH
27585: LD_INT 1
27587: PPUSH
27588: LD_VAR 0 1
27592: PPUSH
27593: CALL_OW 12
27597: ARRAY
27598: PPUSH
27599: LD_INT 200
27601: PPUSH
27602: CALL_OW 234
// end ;
27606: PPOPN 1
27608: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27609: LD_EXP 44
27613: PUSH
27614: LD_EXP 73
27618: AND
27619: IFFALSE 27698
27621: GO 27623
27623: DISABLE
27624: LD_INT 0
27626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27627: LD_ADDR_VAR 0 1
27631: PUSH
27632: LD_INT 22
27634: PUSH
27635: LD_OWVAR 2
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 21
27646: PUSH
27647: LD_INT 2
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PPUSH
27658: CALL_OW 69
27662: ST_TO_ADDR
// if not tmp then
27663: LD_VAR 0 1
27667: NOT
27668: IFFALSE 27672
// exit ;
27670: GO 27698
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27672: LD_VAR 0 1
27676: PUSH
27677: LD_INT 1
27679: PPUSH
27680: LD_VAR 0 1
27684: PPUSH
27685: CALL_OW 12
27689: ARRAY
27690: PPUSH
27691: LD_INT 60
27693: PPUSH
27694: CALL_OW 234
// end ;
27698: PPOPN 1
27700: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27701: LD_EXP 44
27705: PUSH
27706: LD_EXP 74
27710: AND
27711: IFFALSE 27810
27713: GO 27715
27715: DISABLE
27716: LD_INT 0
27718: PPUSH
27719: PPUSH
// begin enable ;
27720: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27721: LD_ADDR_VAR 0 1
27725: PUSH
27726: LD_INT 22
27728: PUSH
27729: LD_OWVAR 2
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 61
27740: PUSH
27741: EMPTY
27742: LIST
27743: PUSH
27744: LD_INT 33
27746: PUSH
27747: LD_INT 2
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: LIST
27758: PPUSH
27759: CALL_OW 69
27763: ST_TO_ADDR
// if not tmp then
27764: LD_VAR 0 1
27768: NOT
27769: IFFALSE 27773
// exit ;
27771: GO 27810
// for i in tmp do
27773: LD_ADDR_VAR 0 2
27777: PUSH
27778: LD_VAR 0 1
27782: PUSH
27783: FOR_IN
27784: IFFALSE 27808
// if IsControledBy ( i ) then
27786: LD_VAR 0 2
27790: PPUSH
27791: CALL_OW 312
27795: IFFALSE 27806
// ComUnlink ( i ) ;
27797: LD_VAR 0 2
27801: PPUSH
27802: CALL_OW 136
27806: GO 27783
27808: POP
27809: POP
// end ;
27810: PPOPN 2
27812: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27813: LD_EXP 44
27817: PUSH
27818: LD_EXP 75
27822: AND
27823: IFFALSE 27963
27825: GO 27827
27827: DISABLE
27828: LD_INT 0
27830: PPUSH
27831: PPUSH
// begin ToLua ( displayPowell(); ) ;
27832: LD_STRING displayPowell();
27834: PPUSH
27835: CALL_OW 559
// uc_side := 0 ;
27839: LD_ADDR_OWVAR 20
27843: PUSH
27844: LD_INT 0
27846: ST_TO_ADDR
// uc_nation := 2 ;
27847: LD_ADDR_OWVAR 21
27851: PUSH
27852: LD_INT 2
27854: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27855: LD_ADDR_OWVAR 37
27859: PUSH
27860: LD_INT 14
27862: ST_TO_ADDR
// vc_engine := engine_siberite ;
27863: LD_ADDR_OWVAR 39
27867: PUSH
27868: LD_INT 3
27870: ST_TO_ADDR
// vc_control := control_apeman ;
27871: LD_ADDR_OWVAR 38
27875: PUSH
27876: LD_INT 5
27878: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27879: LD_ADDR_OWVAR 40
27883: PUSH
27884: LD_INT 29
27886: ST_TO_ADDR
// un := CreateVehicle ;
27887: LD_ADDR_VAR 0 2
27891: PUSH
27892: CALL_OW 45
27896: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27897: LD_VAR 0 2
27901: PPUSH
27902: LD_INT 1
27904: PPUSH
27905: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27909: LD_INT 35
27911: PPUSH
27912: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27916: LD_VAR 0 2
27920: PPUSH
27921: LD_INT 22
27923: PUSH
27924: LD_OWVAR 2
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PPUSH
27933: CALL_OW 69
27937: PPUSH
27938: LD_VAR 0 2
27942: PPUSH
27943: CALL_OW 74
27947: PPUSH
27948: CALL_OW 115
// until IsDead ( un ) ;
27952: LD_VAR 0 2
27956: PPUSH
27957: CALL_OW 301
27961: IFFALSE 27909
// end ;
27963: PPOPN 2
27965: END
// every 0 0$1 trigger StreamModeActive and sStu do
27966: LD_EXP 44
27970: PUSH
27971: LD_EXP 83
27975: AND
27976: IFFALSE 27992
27978: GO 27980
27980: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27981: LD_STRING displayStucuk();
27983: PPUSH
27984: CALL_OW 559
// ResetFog ;
27988: CALL_OW 335
// end ;
27992: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27993: LD_EXP 44
27997: PUSH
27998: LD_EXP 76
28002: AND
28003: IFFALSE 28144
28005: GO 28007
28007: DISABLE
28008: LD_INT 0
28010: PPUSH
28011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28012: LD_ADDR_VAR 0 2
28016: PUSH
28017: LD_INT 22
28019: PUSH
28020: LD_OWVAR 2
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 21
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PPUSH
28043: CALL_OW 69
28047: ST_TO_ADDR
// if not tmp then
28048: LD_VAR 0 2
28052: NOT
28053: IFFALSE 28057
// exit ;
28055: GO 28144
// un := tmp [ rand ( 1 , tmp ) ] ;
28057: LD_ADDR_VAR 0 1
28061: PUSH
28062: LD_VAR 0 2
28066: PUSH
28067: LD_INT 1
28069: PPUSH
28070: LD_VAR 0 2
28074: PPUSH
28075: CALL_OW 12
28079: ARRAY
28080: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28081: LD_VAR 0 1
28085: PPUSH
28086: LD_INT 0
28088: PPUSH
28089: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28093: LD_VAR 0 1
28097: PPUSH
28098: LD_OWVAR 3
28102: PUSH
28103: LD_VAR 0 1
28107: DIFF
28108: PPUSH
28109: LD_VAR 0 1
28113: PPUSH
28114: CALL_OW 74
28118: PPUSH
28119: CALL_OW 115
// wait ( 0 0$20 ) ;
28123: LD_INT 700
28125: PPUSH
28126: CALL_OW 67
// SetSide ( un , your_side ) ;
28130: LD_VAR 0 1
28134: PPUSH
28135: LD_OWVAR 2
28139: PPUSH
28140: CALL_OW 235
// end ;
28144: PPOPN 2
28146: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28147: LD_EXP 44
28151: PUSH
28152: LD_EXP 77
28156: AND
28157: IFFALSE 28263
28159: GO 28161
28161: DISABLE
28162: LD_INT 0
28164: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28165: LD_ADDR_VAR 0 1
28169: PUSH
28170: LD_INT 22
28172: PUSH
28173: LD_OWVAR 2
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 2
28184: PUSH
28185: LD_INT 30
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 30
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: LIST
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PPUSH
28214: CALL_OW 69
28218: ST_TO_ADDR
// if not depot then
28219: LD_VAR 0 1
28223: NOT
28224: IFFALSE 28228
// exit ;
28226: GO 28263
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28228: LD_VAR 0 1
28232: PUSH
28233: LD_INT 1
28235: ARRAY
28236: PPUSH
28237: CALL_OW 250
28241: PPUSH
28242: LD_VAR 0 1
28246: PUSH
28247: LD_INT 1
28249: ARRAY
28250: PPUSH
28251: CALL_OW 251
28255: PPUSH
28256: LD_INT 70
28258: PPUSH
28259: CALL_OW 495
// end ;
28263: PPOPN 1
28265: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28266: LD_EXP 44
28270: PUSH
28271: LD_EXP 78
28275: AND
28276: IFFALSE 28487
28278: GO 28280
28280: DISABLE
28281: LD_INT 0
28283: PPUSH
28284: PPUSH
28285: PPUSH
28286: PPUSH
28287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28288: LD_ADDR_VAR 0 5
28292: PUSH
28293: LD_INT 22
28295: PUSH
28296: LD_OWVAR 2
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 21
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PPUSH
28319: CALL_OW 69
28323: ST_TO_ADDR
// if not tmp then
28324: LD_VAR 0 5
28328: NOT
28329: IFFALSE 28333
// exit ;
28331: GO 28487
// for i in tmp do
28333: LD_ADDR_VAR 0 1
28337: PUSH
28338: LD_VAR 0 5
28342: PUSH
28343: FOR_IN
28344: IFFALSE 28485
// begin d := rand ( 0 , 5 ) ;
28346: LD_ADDR_VAR 0 4
28350: PUSH
28351: LD_INT 0
28353: PPUSH
28354: LD_INT 5
28356: PPUSH
28357: CALL_OW 12
28361: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28362: LD_ADDR_VAR 0 2
28366: PUSH
28367: LD_VAR 0 1
28371: PPUSH
28372: CALL_OW 250
28376: PPUSH
28377: LD_VAR 0 4
28381: PPUSH
28382: LD_INT 3
28384: PPUSH
28385: LD_INT 12
28387: PPUSH
28388: CALL_OW 12
28392: PPUSH
28393: CALL_OW 272
28397: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28398: LD_ADDR_VAR 0 3
28402: PUSH
28403: LD_VAR 0 1
28407: PPUSH
28408: CALL_OW 251
28412: PPUSH
28413: LD_VAR 0 4
28417: PPUSH
28418: LD_INT 3
28420: PPUSH
28421: LD_INT 12
28423: PPUSH
28424: CALL_OW 12
28428: PPUSH
28429: CALL_OW 273
28433: ST_TO_ADDR
// if ValidHex ( x , y ) then
28434: LD_VAR 0 2
28438: PPUSH
28439: LD_VAR 0 3
28443: PPUSH
28444: CALL_OW 488
28448: IFFALSE 28483
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28450: LD_VAR 0 1
28454: PPUSH
28455: LD_VAR 0 2
28459: PPUSH
28460: LD_VAR 0 3
28464: PPUSH
28465: LD_INT 3
28467: PPUSH
28468: LD_INT 6
28470: PPUSH
28471: CALL_OW 12
28475: PPUSH
28476: LD_INT 1
28478: PPUSH
28479: CALL_OW 483
// end ;
28483: GO 28343
28485: POP
28486: POP
// end ;
28487: PPOPN 5
28489: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28490: LD_EXP 44
28494: PUSH
28495: LD_EXP 79
28499: AND
28500: IFFALSE 28594
28502: GO 28504
28504: DISABLE
28505: LD_INT 0
28507: PPUSH
28508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28509: LD_ADDR_VAR 0 2
28513: PUSH
28514: LD_INT 22
28516: PUSH
28517: LD_OWVAR 2
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 32
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 21
28538: PUSH
28539: LD_INT 2
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: LIST
28550: PPUSH
28551: CALL_OW 69
28555: ST_TO_ADDR
// if not tmp then
28556: LD_VAR 0 2
28560: NOT
28561: IFFALSE 28565
// exit ;
28563: GO 28594
// for i in tmp do
28565: LD_ADDR_VAR 0 1
28569: PUSH
28570: LD_VAR 0 2
28574: PUSH
28575: FOR_IN
28576: IFFALSE 28592
// SetFuel ( i , 0 ) ;
28578: LD_VAR 0 1
28582: PPUSH
28583: LD_INT 0
28585: PPUSH
28586: CALL_OW 240
28590: GO 28575
28592: POP
28593: POP
// end ;
28594: PPOPN 2
28596: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28597: LD_EXP 44
28601: PUSH
28602: LD_EXP 80
28606: AND
28607: IFFALSE 28673
28609: GO 28611
28611: DISABLE
28612: LD_INT 0
28614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28615: LD_ADDR_VAR 0 1
28619: PUSH
28620: LD_INT 22
28622: PUSH
28623: LD_OWVAR 2
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 30
28634: PUSH
28635: LD_INT 29
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PPUSH
28646: CALL_OW 69
28650: ST_TO_ADDR
// if not tmp then
28651: LD_VAR 0 1
28655: NOT
28656: IFFALSE 28660
// exit ;
28658: GO 28673
// DestroyUnit ( tmp [ 1 ] ) ;
28660: LD_VAR 0 1
28664: PUSH
28665: LD_INT 1
28667: ARRAY
28668: PPUSH
28669: CALL_OW 65
// end ;
28673: PPOPN 1
28675: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28676: LD_EXP 44
28680: PUSH
28681: LD_EXP 82
28685: AND
28686: IFFALSE 28815
28688: GO 28690
28690: DISABLE
28691: LD_INT 0
28693: PPUSH
// begin uc_side := 0 ;
28694: LD_ADDR_OWVAR 20
28698: PUSH
28699: LD_INT 0
28701: ST_TO_ADDR
// uc_nation := nation_arabian ;
28702: LD_ADDR_OWVAR 21
28706: PUSH
28707: LD_INT 2
28709: ST_TO_ADDR
// hc_gallery :=  ;
28710: LD_ADDR_OWVAR 33
28714: PUSH
28715: LD_STRING 
28717: ST_TO_ADDR
// hc_name :=  ;
28718: LD_ADDR_OWVAR 26
28722: PUSH
28723: LD_STRING 
28725: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28726: LD_INT 1
28728: PPUSH
28729: LD_INT 11
28731: PPUSH
28732: LD_INT 10
28734: PPUSH
28735: CALL_OW 380
// un := CreateHuman ;
28739: LD_ADDR_VAR 0 1
28743: PUSH
28744: CALL_OW 44
28748: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28749: LD_VAR 0 1
28753: PPUSH
28754: LD_INT 1
28756: PPUSH
28757: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28761: LD_INT 35
28763: PPUSH
28764: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28768: LD_VAR 0 1
28772: PPUSH
28773: LD_INT 22
28775: PUSH
28776: LD_OWVAR 2
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PPUSH
28785: CALL_OW 69
28789: PPUSH
28790: LD_VAR 0 1
28794: PPUSH
28795: CALL_OW 74
28799: PPUSH
28800: CALL_OW 115
// until IsDead ( un ) ;
28804: LD_VAR 0 1
28808: PPUSH
28809: CALL_OW 301
28813: IFFALSE 28761
// end ;
28815: PPOPN 1
28817: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28818: LD_EXP 44
28822: PUSH
28823: LD_EXP 84
28827: AND
28828: IFFALSE 28840
28830: GO 28832
28832: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28833: LD_STRING earthquake(getX(game), 0, 32)
28835: PPUSH
28836: CALL_OW 559
28840: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28841: LD_EXP 44
28845: PUSH
28846: LD_EXP 85
28850: AND
28851: IFFALSE 28942
28853: GO 28855
28855: DISABLE
28856: LD_INT 0
28858: PPUSH
// begin enable ;
28859: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28860: LD_ADDR_VAR 0 1
28864: PUSH
28865: LD_INT 22
28867: PUSH
28868: LD_OWVAR 2
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 21
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 33
28889: PUSH
28890: LD_INT 3
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: LIST
28901: PPUSH
28902: CALL_OW 69
28906: ST_TO_ADDR
// if not tmp then
28907: LD_VAR 0 1
28911: NOT
28912: IFFALSE 28916
// exit ;
28914: GO 28942
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28916: LD_VAR 0 1
28920: PUSH
28921: LD_INT 1
28923: PPUSH
28924: LD_VAR 0 1
28928: PPUSH
28929: CALL_OW 12
28933: ARRAY
28934: PPUSH
28935: LD_INT 1
28937: PPUSH
28938: CALL_OW 234
// end ;
28942: PPOPN 1
28944: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28945: LD_EXP 44
28949: PUSH
28950: LD_EXP 86
28954: AND
28955: IFFALSE 29096
28957: GO 28959
28959: DISABLE
28960: LD_INT 0
28962: PPUSH
28963: PPUSH
28964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28965: LD_ADDR_VAR 0 3
28969: PUSH
28970: LD_INT 22
28972: PUSH
28973: LD_OWVAR 2
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 25
28984: PUSH
28985: LD_INT 1
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PPUSH
28996: CALL_OW 69
29000: ST_TO_ADDR
// if not tmp then
29001: LD_VAR 0 3
29005: NOT
29006: IFFALSE 29010
// exit ;
29008: GO 29096
// un := tmp [ rand ( 1 , tmp ) ] ;
29010: LD_ADDR_VAR 0 2
29014: PUSH
29015: LD_VAR 0 3
29019: PUSH
29020: LD_INT 1
29022: PPUSH
29023: LD_VAR 0 3
29027: PPUSH
29028: CALL_OW 12
29032: ARRAY
29033: ST_TO_ADDR
// if Crawls ( un ) then
29034: LD_VAR 0 2
29038: PPUSH
29039: CALL_OW 318
29043: IFFALSE 29054
// ComWalk ( un ) ;
29045: LD_VAR 0 2
29049: PPUSH
29050: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29054: LD_VAR 0 2
29058: PPUSH
29059: LD_INT 9
29061: PPUSH
29062: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29066: LD_INT 28
29068: PPUSH
29069: LD_OWVAR 2
29073: PPUSH
29074: LD_INT 2
29076: PPUSH
29077: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29081: LD_INT 29
29083: PPUSH
29084: LD_OWVAR 2
29088: PPUSH
29089: LD_INT 2
29091: PPUSH
29092: CALL_OW 322
// end ;
29096: PPOPN 3
29098: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29099: LD_EXP 44
29103: PUSH
29104: LD_EXP 87
29108: AND
29109: IFFALSE 29220
29111: GO 29113
29113: DISABLE
29114: LD_INT 0
29116: PPUSH
29117: PPUSH
29118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29119: LD_ADDR_VAR 0 3
29123: PUSH
29124: LD_INT 22
29126: PUSH
29127: LD_OWVAR 2
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 25
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PPUSH
29150: CALL_OW 69
29154: ST_TO_ADDR
// if not tmp then
29155: LD_VAR 0 3
29159: NOT
29160: IFFALSE 29164
// exit ;
29162: GO 29220
// un := tmp [ rand ( 1 , tmp ) ] ;
29164: LD_ADDR_VAR 0 2
29168: PUSH
29169: LD_VAR 0 3
29173: PUSH
29174: LD_INT 1
29176: PPUSH
29177: LD_VAR 0 3
29181: PPUSH
29182: CALL_OW 12
29186: ARRAY
29187: ST_TO_ADDR
// if Crawls ( un ) then
29188: LD_VAR 0 2
29192: PPUSH
29193: CALL_OW 318
29197: IFFALSE 29208
// ComWalk ( un ) ;
29199: LD_VAR 0 2
29203: PPUSH
29204: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29208: LD_VAR 0 2
29212: PPUSH
29213: LD_INT 8
29215: PPUSH
29216: CALL_OW 336
// end ;
29220: PPOPN 3
29222: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29223: LD_EXP 44
29227: PUSH
29228: LD_EXP 88
29232: AND
29233: IFFALSE 29377
29235: GO 29237
29237: DISABLE
29238: LD_INT 0
29240: PPUSH
29241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29242: LD_ADDR_VAR 0 2
29246: PUSH
29247: LD_INT 22
29249: PUSH
29250: LD_OWVAR 2
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 21
29261: PUSH
29262: LD_INT 2
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 2
29271: PUSH
29272: LD_INT 34
29274: PUSH
29275: LD_INT 12
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 34
29284: PUSH
29285: LD_INT 51
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 34
29294: PUSH
29295: LD_INT 32
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: LIST
29312: PPUSH
29313: CALL_OW 69
29317: ST_TO_ADDR
// if not tmp then
29318: LD_VAR 0 2
29322: NOT
29323: IFFALSE 29327
// exit ;
29325: GO 29377
// for i in tmp do
29327: LD_ADDR_VAR 0 1
29331: PUSH
29332: LD_VAR 0 2
29336: PUSH
29337: FOR_IN
29338: IFFALSE 29375
// if GetCargo ( i , mat_artifact ) = 0 then
29340: LD_VAR 0 1
29344: PPUSH
29345: LD_INT 4
29347: PPUSH
29348: CALL_OW 289
29352: PUSH
29353: LD_INT 0
29355: EQUAL
29356: IFFALSE 29373
// SetCargo ( i , mat_siberit , 100 ) ;
29358: LD_VAR 0 1
29362: PPUSH
29363: LD_INT 3
29365: PPUSH
29366: LD_INT 100
29368: PPUSH
29369: CALL_OW 290
29373: GO 29337
29375: POP
29376: POP
// end ;
29377: PPOPN 2
29379: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29380: LD_EXP 44
29384: PUSH
29385: LD_EXP 89
29389: AND
29390: IFFALSE 29573
29392: GO 29394
29394: DISABLE
29395: LD_INT 0
29397: PPUSH
29398: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29399: LD_ADDR_VAR 0 2
29403: PUSH
29404: LD_INT 22
29406: PUSH
29407: LD_OWVAR 2
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PPUSH
29416: CALL_OW 69
29420: ST_TO_ADDR
// if not tmp then
29421: LD_VAR 0 2
29425: NOT
29426: IFFALSE 29430
// exit ;
29428: GO 29573
// for i := 1 to 2 do
29430: LD_ADDR_VAR 0 1
29434: PUSH
29435: DOUBLE
29436: LD_INT 1
29438: DEC
29439: ST_TO_ADDR
29440: LD_INT 2
29442: PUSH
29443: FOR_TO
29444: IFFALSE 29571
// begin uc_side := your_side ;
29446: LD_ADDR_OWVAR 20
29450: PUSH
29451: LD_OWVAR 2
29455: ST_TO_ADDR
// uc_nation := nation_american ;
29456: LD_ADDR_OWVAR 21
29460: PUSH
29461: LD_INT 1
29463: ST_TO_ADDR
// vc_chassis := us_morphling ;
29464: LD_ADDR_OWVAR 37
29468: PUSH
29469: LD_INT 5
29471: ST_TO_ADDR
// vc_engine := engine_siberite ;
29472: LD_ADDR_OWVAR 39
29476: PUSH
29477: LD_INT 3
29479: ST_TO_ADDR
// vc_control := control_computer ;
29480: LD_ADDR_OWVAR 38
29484: PUSH
29485: LD_INT 3
29487: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29488: LD_ADDR_OWVAR 40
29492: PUSH
29493: LD_INT 10
29495: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29496: LD_VAR 0 2
29500: PUSH
29501: LD_INT 1
29503: ARRAY
29504: PPUSH
29505: CALL_OW 310
29509: NOT
29510: IFFALSE 29557
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29512: CALL_OW 45
29516: PPUSH
29517: LD_VAR 0 2
29521: PUSH
29522: LD_INT 1
29524: ARRAY
29525: PPUSH
29526: CALL_OW 250
29530: PPUSH
29531: LD_VAR 0 2
29535: PUSH
29536: LD_INT 1
29538: ARRAY
29539: PPUSH
29540: CALL_OW 251
29544: PPUSH
29545: LD_INT 12
29547: PPUSH
29548: LD_INT 1
29550: PPUSH
29551: CALL_OW 50
29555: GO 29569
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29557: CALL_OW 45
29561: PPUSH
29562: LD_INT 1
29564: PPUSH
29565: CALL_OW 51
// end ;
29569: GO 29443
29571: POP
29572: POP
// end ;
29573: PPOPN 2
29575: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29576: LD_EXP 44
29580: PUSH
29581: LD_EXP 90
29585: AND
29586: IFFALSE 29808
29588: GO 29590
29590: DISABLE
29591: LD_INT 0
29593: PPUSH
29594: PPUSH
29595: PPUSH
29596: PPUSH
29597: PPUSH
29598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29599: LD_ADDR_VAR 0 6
29603: PUSH
29604: LD_INT 22
29606: PUSH
29607: LD_OWVAR 2
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 21
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 3
29628: PUSH
29629: LD_INT 23
29631: PUSH
29632: LD_INT 0
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: LIST
29647: PPUSH
29648: CALL_OW 69
29652: ST_TO_ADDR
// if not tmp then
29653: LD_VAR 0 6
29657: NOT
29658: IFFALSE 29662
// exit ;
29660: GO 29808
// s1 := rand ( 1 , 4 ) ;
29662: LD_ADDR_VAR 0 2
29666: PUSH
29667: LD_INT 1
29669: PPUSH
29670: LD_INT 4
29672: PPUSH
29673: CALL_OW 12
29677: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29678: LD_ADDR_VAR 0 4
29682: PUSH
29683: LD_VAR 0 6
29687: PUSH
29688: LD_INT 1
29690: ARRAY
29691: PPUSH
29692: LD_VAR 0 2
29696: PPUSH
29697: CALL_OW 259
29701: ST_TO_ADDR
// if s1 = 1 then
29702: LD_VAR 0 2
29706: PUSH
29707: LD_INT 1
29709: EQUAL
29710: IFFALSE 29730
// s2 := rand ( 2 , 4 ) else
29712: LD_ADDR_VAR 0 3
29716: PUSH
29717: LD_INT 2
29719: PPUSH
29720: LD_INT 4
29722: PPUSH
29723: CALL_OW 12
29727: ST_TO_ADDR
29728: GO 29738
// s2 := 1 ;
29730: LD_ADDR_VAR 0 3
29734: PUSH
29735: LD_INT 1
29737: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29738: LD_ADDR_VAR 0 5
29742: PUSH
29743: LD_VAR 0 6
29747: PUSH
29748: LD_INT 1
29750: ARRAY
29751: PPUSH
29752: LD_VAR 0 3
29756: PPUSH
29757: CALL_OW 259
29761: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29762: LD_VAR 0 6
29766: PUSH
29767: LD_INT 1
29769: ARRAY
29770: PPUSH
29771: LD_VAR 0 2
29775: PPUSH
29776: LD_VAR 0 5
29780: PPUSH
29781: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29785: LD_VAR 0 6
29789: PUSH
29790: LD_INT 1
29792: ARRAY
29793: PPUSH
29794: LD_VAR 0 3
29798: PPUSH
29799: LD_VAR 0 4
29803: PPUSH
29804: CALL_OW 237
// end ;
29808: PPOPN 6
29810: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29811: LD_EXP 44
29815: PUSH
29816: LD_EXP 91
29820: AND
29821: IFFALSE 29900
29823: GO 29825
29825: DISABLE
29826: LD_INT 0
29828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29829: LD_ADDR_VAR 0 1
29833: PUSH
29834: LD_INT 22
29836: PUSH
29837: LD_OWVAR 2
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 30
29848: PUSH
29849: LD_INT 3
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PPUSH
29860: CALL_OW 69
29864: ST_TO_ADDR
// if not tmp then
29865: LD_VAR 0 1
29869: NOT
29870: IFFALSE 29874
// exit ;
29872: GO 29900
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29874: LD_VAR 0 1
29878: PUSH
29879: LD_INT 1
29881: PPUSH
29882: LD_VAR 0 1
29886: PPUSH
29887: CALL_OW 12
29891: ARRAY
29892: PPUSH
29893: LD_INT 1
29895: PPUSH
29896: CALL_OW 234
// end ;
29900: PPOPN 1
29902: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29903: LD_EXP 44
29907: PUSH
29908: LD_EXP 92
29912: AND
29913: IFFALSE 30025
29915: GO 29917
29917: DISABLE
29918: LD_INT 0
29920: PPUSH
29921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29922: LD_ADDR_VAR 0 2
29926: PUSH
29927: LD_INT 22
29929: PUSH
29930: LD_OWVAR 2
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: LD_INT 30
29944: PUSH
29945: LD_INT 27
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 30
29954: PUSH
29955: LD_INT 26
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 30
29964: PUSH
29965: LD_INT 28
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PPUSH
29982: CALL_OW 69
29986: ST_TO_ADDR
// if not tmp then
29987: LD_VAR 0 2
29991: NOT
29992: IFFALSE 29996
// exit ;
29994: GO 30025
// for i in tmp do
29996: LD_ADDR_VAR 0 1
30000: PUSH
30001: LD_VAR 0 2
30005: PUSH
30006: FOR_IN
30007: IFFALSE 30023
// SetLives ( i , 1 ) ;
30009: LD_VAR 0 1
30013: PPUSH
30014: LD_INT 1
30016: PPUSH
30017: CALL_OW 234
30021: GO 30006
30023: POP
30024: POP
// end ;
30025: PPOPN 2
30027: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30028: LD_EXP 44
30032: PUSH
30033: LD_EXP 93
30037: AND
30038: IFFALSE 30325
30040: GO 30042
30042: DISABLE
30043: LD_INT 0
30045: PPUSH
30046: PPUSH
30047: PPUSH
// begin i := rand ( 1 , 7 ) ;
30048: LD_ADDR_VAR 0 1
30052: PUSH
30053: LD_INT 1
30055: PPUSH
30056: LD_INT 7
30058: PPUSH
30059: CALL_OW 12
30063: ST_TO_ADDR
// case i of 1 :
30064: LD_VAR 0 1
30068: PUSH
30069: LD_INT 1
30071: DOUBLE
30072: EQUAL
30073: IFTRUE 30077
30075: GO 30087
30077: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30078: LD_STRING earthquake(getX(game), 0, 32)
30080: PPUSH
30081: CALL_OW 559
30085: GO 30325
30087: LD_INT 2
30089: DOUBLE
30090: EQUAL
30091: IFTRUE 30095
30093: GO 30109
30095: POP
// begin ToLua ( displayStucuk(); ) ;
30096: LD_STRING displayStucuk();
30098: PPUSH
30099: CALL_OW 559
// ResetFog ;
30103: CALL_OW 335
// end ; 3 :
30107: GO 30325
30109: LD_INT 3
30111: DOUBLE
30112: EQUAL
30113: IFTRUE 30117
30115: GO 30221
30117: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30118: LD_ADDR_VAR 0 2
30122: PUSH
30123: LD_INT 22
30125: PUSH
30126: LD_OWVAR 2
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 25
30137: PUSH
30138: LD_INT 1
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PPUSH
30149: CALL_OW 69
30153: ST_TO_ADDR
// if not tmp then
30154: LD_VAR 0 2
30158: NOT
30159: IFFALSE 30163
// exit ;
30161: GO 30325
// un := tmp [ rand ( 1 , tmp ) ] ;
30163: LD_ADDR_VAR 0 3
30167: PUSH
30168: LD_VAR 0 2
30172: PUSH
30173: LD_INT 1
30175: PPUSH
30176: LD_VAR 0 2
30180: PPUSH
30181: CALL_OW 12
30185: ARRAY
30186: ST_TO_ADDR
// if Crawls ( un ) then
30187: LD_VAR 0 3
30191: PPUSH
30192: CALL_OW 318
30196: IFFALSE 30207
// ComWalk ( un ) ;
30198: LD_VAR 0 3
30202: PPUSH
30203: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30207: LD_VAR 0 3
30211: PPUSH
30212: LD_INT 8
30214: PPUSH
30215: CALL_OW 336
// end ; 4 :
30219: GO 30325
30221: LD_INT 4
30223: DOUBLE
30224: EQUAL
30225: IFTRUE 30229
30227: GO 30303
30229: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30230: LD_ADDR_VAR 0 2
30234: PUSH
30235: LD_INT 22
30237: PUSH
30238: LD_OWVAR 2
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 30
30249: PUSH
30250: LD_INT 29
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PPUSH
30261: CALL_OW 69
30265: ST_TO_ADDR
// if not tmp then
30266: LD_VAR 0 2
30270: NOT
30271: IFFALSE 30275
// exit ;
30273: GO 30325
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30275: LD_VAR 0 2
30279: PUSH
30280: LD_INT 1
30282: ARRAY
30283: PPUSH
30284: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30288: LD_VAR 0 2
30292: PUSH
30293: LD_INT 1
30295: ARRAY
30296: PPUSH
30297: CALL_OW 65
// end ; 5 .. 7 :
30301: GO 30325
30303: LD_INT 5
30305: DOUBLE
30306: GREATEREQUAL
30307: IFFALSE 30315
30309: LD_INT 7
30311: DOUBLE
30312: LESSEQUAL
30313: IFTRUE 30317
30315: GO 30324
30317: POP
// StreamSibBomb ; end ;
30318: CALL 26562 0 0
30322: GO 30325
30324: POP
// end ;
30325: PPOPN 3
30327: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30328: LD_EXP 44
30332: PUSH
30333: LD_EXP 94
30337: AND
30338: IFFALSE 30494
30340: GO 30342
30342: DISABLE
30343: LD_INT 0
30345: PPUSH
30346: PPUSH
30347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30348: LD_ADDR_VAR 0 2
30352: PUSH
30353: LD_INT 81
30355: PUSH
30356: LD_OWVAR 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 2
30367: PUSH
30368: LD_INT 21
30370: PUSH
30371: LD_INT 1
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 21
30380: PUSH
30381: LD_INT 2
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: LIST
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PPUSH
30397: CALL_OW 69
30401: ST_TO_ADDR
// if not tmp then
30402: LD_VAR 0 2
30406: NOT
30407: IFFALSE 30411
// exit ;
30409: GO 30494
// p := 0 ;
30411: LD_ADDR_VAR 0 3
30415: PUSH
30416: LD_INT 0
30418: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30419: LD_INT 35
30421: PPUSH
30422: CALL_OW 67
// p := p + 1 ;
30426: LD_ADDR_VAR 0 3
30430: PUSH
30431: LD_VAR 0 3
30435: PUSH
30436: LD_INT 1
30438: PLUS
30439: ST_TO_ADDR
// for i in tmp do
30440: LD_ADDR_VAR 0 1
30444: PUSH
30445: LD_VAR 0 2
30449: PUSH
30450: FOR_IN
30451: IFFALSE 30482
// if GetLives ( i ) < 1000 then
30453: LD_VAR 0 1
30457: PPUSH
30458: CALL_OW 256
30462: PUSH
30463: LD_INT 1000
30465: LESS
30466: IFFALSE 30480
// SetLives ( i , 1000 ) ;
30468: LD_VAR 0 1
30472: PPUSH
30473: LD_INT 1000
30475: PPUSH
30476: CALL_OW 234
30480: GO 30450
30482: POP
30483: POP
// until p > 20 ;
30484: LD_VAR 0 3
30488: PUSH
30489: LD_INT 20
30491: GREATER
30492: IFFALSE 30419
// end ;
30494: PPOPN 3
30496: END
// every 0 0$1 trigger StreamModeActive and sTime do
30497: LD_EXP 44
30501: PUSH
30502: LD_EXP 95
30506: AND
30507: IFFALSE 30542
30509: GO 30511
30511: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30512: LD_INT 28
30514: PPUSH
30515: LD_OWVAR 2
30519: PPUSH
30520: LD_INT 2
30522: PPUSH
30523: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30527: LD_INT 30
30529: PPUSH
30530: LD_OWVAR 2
30534: PPUSH
30535: LD_INT 2
30537: PPUSH
30538: CALL_OW 322
// end ;
30542: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30543: LD_EXP 44
30547: PUSH
30548: LD_EXP 96
30552: AND
30553: IFFALSE 30674
30555: GO 30557
30557: DISABLE
30558: LD_INT 0
30560: PPUSH
30561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30562: LD_ADDR_VAR 0 2
30566: PUSH
30567: LD_INT 22
30569: PUSH
30570: LD_OWVAR 2
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 21
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: LD_INT 23
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: PPUSH
30611: CALL_OW 69
30615: ST_TO_ADDR
// if not tmp then
30616: LD_VAR 0 2
30620: NOT
30621: IFFALSE 30625
// exit ;
30623: GO 30674
// for i in tmp do
30625: LD_ADDR_VAR 0 1
30629: PUSH
30630: LD_VAR 0 2
30634: PUSH
30635: FOR_IN
30636: IFFALSE 30672
// begin if Crawls ( i ) then
30638: LD_VAR 0 1
30642: PPUSH
30643: CALL_OW 318
30647: IFFALSE 30658
// ComWalk ( i ) ;
30649: LD_VAR 0 1
30653: PPUSH
30654: CALL_OW 138
// SetClass ( i , 2 ) ;
30658: LD_VAR 0 1
30662: PPUSH
30663: LD_INT 2
30665: PPUSH
30666: CALL_OW 336
// end ;
30670: GO 30635
30672: POP
30673: POP
// end ;
30674: PPOPN 2
30676: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30677: LD_EXP 44
30681: PUSH
30682: LD_EXP 97
30686: AND
30687: IFFALSE 30975
30689: GO 30691
30691: DISABLE
30692: LD_INT 0
30694: PPUSH
30695: PPUSH
30696: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30697: LD_OWVAR 2
30701: PPUSH
30702: LD_INT 9
30704: PPUSH
30705: LD_INT 1
30707: PPUSH
30708: LD_INT 1
30710: PPUSH
30711: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30715: LD_INT 9
30717: PPUSH
30718: LD_OWVAR 2
30722: PPUSH
30723: CALL_OW 343
// uc_side := 9 ;
30727: LD_ADDR_OWVAR 20
30731: PUSH
30732: LD_INT 9
30734: ST_TO_ADDR
// uc_nation := 2 ;
30735: LD_ADDR_OWVAR 21
30739: PUSH
30740: LD_INT 2
30742: ST_TO_ADDR
// hc_name := Dark Warrior ;
30743: LD_ADDR_OWVAR 26
30747: PUSH
30748: LD_STRING Dark Warrior
30750: ST_TO_ADDR
// hc_gallery :=  ;
30751: LD_ADDR_OWVAR 33
30755: PUSH
30756: LD_STRING 
30758: ST_TO_ADDR
// hc_noskilllimit := true ;
30759: LD_ADDR_OWVAR 76
30763: PUSH
30764: LD_INT 1
30766: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30767: LD_ADDR_OWVAR 31
30771: PUSH
30772: LD_INT 30
30774: PUSH
30775: LD_INT 30
30777: PUSH
30778: LD_INT 30
30780: PUSH
30781: LD_INT 30
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: ST_TO_ADDR
// un := CreateHuman ;
30790: LD_ADDR_VAR 0 3
30794: PUSH
30795: CALL_OW 44
30799: ST_TO_ADDR
// hc_noskilllimit := false ;
30800: LD_ADDR_OWVAR 76
30804: PUSH
30805: LD_INT 0
30807: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30808: LD_VAR 0 3
30812: PPUSH
30813: LD_INT 1
30815: PPUSH
30816: CALL_OW 51
// ToLua ( playRanger() ) ;
30820: LD_STRING playRanger()
30822: PPUSH
30823: CALL_OW 559
// p := 0 ;
30827: LD_ADDR_VAR 0 2
30831: PUSH
30832: LD_INT 0
30834: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30835: LD_INT 35
30837: PPUSH
30838: CALL_OW 67
// p := p + 1 ;
30842: LD_ADDR_VAR 0 2
30846: PUSH
30847: LD_VAR 0 2
30851: PUSH
30852: LD_INT 1
30854: PLUS
30855: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30856: LD_VAR 0 3
30860: PPUSH
30861: CALL_OW 256
30865: PUSH
30866: LD_INT 1000
30868: LESS
30869: IFFALSE 30883
// SetLives ( un , 1000 ) ;
30871: LD_VAR 0 3
30875: PPUSH
30876: LD_INT 1000
30878: PPUSH
30879: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30883: LD_VAR 0 3
30887: PPUSH
30888: LD_INT 81
30890: PUSH
30891: LD_OWVAR 2
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 91
30902: PUSH
30903: LD_VAR 0 3
30907: PUSH
30908: LD_INT 30
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PPUSH
30920: CALL_OW 69
30924: PPUSH
30925: LD_VAR 0 3
30929: PPUSH
30930: CALL_OW 74
30934: PPUSH
30935: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30939: LD_VAR 0 2
30943: PUSH
30944: LD_INT 80
30946: GREATER
30947: PUSH
30948: LD_VAR 0 3
30952: PPUSH
30953: CALL_OW 301
30957: OR
30958: IFFALSE 30835
// if un then
30960: LD_VAR 0 3
30964: IFFALSE 30975
// RemoveUnit ( un ) ;
30966: LD_VAR 0 3
30970: PPUSH
30971: CALL_OW 64
// end ;
30975: PPOPN 3
30977: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30978: LD_EXP 98
30982: IFFALSE 31098
30984: GO 30986
30986: DISABLE
30987: LD_INT 0
30989: PPUSH
30990: PPUSH
30991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30992: LD_ADDR_VAR 0 2
30996: PUSH
30997: LD_INT 81
30999: PUSH
31000: LD_OWVAR 2
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 21
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PPUSH
31023: CALL_OW 69
31027: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31028: LD_STRING playComputer()
31030: PPUSH
31031: CALL_OW 559
// if not tmp then
31035: LD_VAR 0 2
31039: NOT
31040: IFFALSE 31044
// exit ;
31042: GO 31098
// for i in tmp do
31044: LD_ADDR_VAR 0 1
31048: PUSH
31049: LD_VAR 0 2
31053: PUSH
31054: FOR_IN
31055: IFFALSE 31096
// for j := 1 to 4 do
31057: LD_ADDR_VAR 0 3
31061: PUSH
31062: DOUBLE
31063: LD_INT 1
31065: DEC
31066: ST_TO_ADDR
31067: LD_INT 4
31069: PUSH
31070: FOR_TO
31071: IFFALSE 31092
// SetSkill ( i , j , 10 ) ;
31073: LD_VAR 0 1
31077: PPUSH
31078: LD_VAR 0 3
31082: PPUSH
31083: LD_INT 10
31085: PPUSH
31086: CALL_OW 237
31090: GO 31070
31092: POP
31093: POP
31094: GO 31054
31096: POP
31097: POP
// end ;
31098: PPOPN 3
31100: END
// every 0 0$1 trigger s30 do var i , tmp ;
31101: LD_EXP 99
31105: IFFALSE 31174
31107: GO 31109
31109: DISABLE
31110: LD_INT 0
31112: PPUSH
31113: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31114: LD_ADDR_VAR 0 2
31118: PUSH
31119: LD_INT 22
31121: PUSH
31122: LD_OWVAR 2
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PPUSH
31131: CALL_OW 69
31135: ST_TO_ADDR
// if not tmp then
31136: LD_VAR 0 2
31140: NOT
31141: IFFALSE 31145
// exit ;
31143: GO 31174
// for i in tmp do
31145: LD_ADDR_VAR 0 1
31149: PUSH
31150: LD_VAR 0 2
31154: PUSH
31155: FOR_IN
31156: IFFALSE 31172
// SetLives ( i , 300 ) ;
31158: LD_VAR 0 1
31162: PPUSH
31163: LD_INT 300
31165: PPUSH
31166: CALL_OW 234
31170: GO 31155
31172: POP
31173: POP
// end ;
31174: PPOPN 2
31176: END
// every 0 0$1 trigger s60 do var i , tmp ;
31177: LD_EXP 100
31181: IFFALSE 31250
31183: GO 31185
31185: DISABLE
31186: LD_INT 0
31188: PPUSH
31189: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31190: LD_ADDR_VAR 0 2
31194: PUSH
31195: LD_INT 22
31197: PUSH
31198: LD_OWVAR 2
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PPUSH
31207: CALL_OW 69
31211: ST_TO_ADDR
// if not tmp then
31212: LD_VAR 0 2
31216: NOT
31217: IFFALSE 31221
// exit ;
31219: GO 31250
// for i in tmp do
31221: LD_ADDR_VAR 0 1
31225: PUSH
31226: LD_VAR 0 2
31230: PUSH
31231: FOR_IN
31232: IFFALSE 31248
// SetLives ( i , 600 ) ;
31234: LD_VAR 0 1
31238: PPUSH
31239: LD_INT 600
31241: PPUSH
31242: CALL_OW 234
31246: GO 31231
31248: POP
31249: POP
// end ;
31250: PPOPN 2
31252: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31253: LD_INT 0
31255: PPUSH
// case cmd of 301 :
31256: LD_VAR 0 1
31260: PUSH
31261: LD_INT 301
31263: DOUBLE
31264: EQUAL
31265: IFTRUE 31269
31267: GO 31301
31269: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31270: LD_VAR 0 6
31274: PPUSH
31275: LD_VAR 0 7
31279: PPUSH
31280: LD_VAR 0 8
31284: PPUSH
31285: LD_VAR 0 4
31289: PPUSH
31290: LD_VAR 0 5
31294: PPUSH
31295: CALL 32502 0 5
31299: GO 31422
31301: LD_INT 302
31303: DOUBLE
31304: EQUAL
31305: IFTRUE 31309
31307: GO 31346
31309: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31310: LD_VAR 0 6
31314: PPUSH
31315: LD_VAR 0 7
31319: PPUSH
31320: LD_VAR 0 8
31324: PPUSH
31325: LD_VAR 0 9
31329: PPUSH
31330: LD_VAR 0 4
31334: PPUSH
31335: LD_VAR 0 5
31339: PPUSH
31340: CALL 32593 0 6
31344: GO 31422
31346: LD_INT 303
31348: DOUBLE
31349: EQUAL
31350: IFTRUE 31354
31352: GO 31391
31354: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31355: LD_VAR 0 6
31359: PPUSH
31360: LD_VAR 0 7
31364: PPUSH
31365: LD_VAR 0 8
31369: PPUSH
31370: LD_VAR 0 9
31374: PPUSH
31375: LD_VAR 0 4
31379: PPUSH
31380: LD_VAR 0 5
31384: PPUSH
31385: CALL 31427 0 6
31389: GO 31422
31391: LD_INT 304
31393: DOUBLE
31394: EQUAL
31395: IFTRUE 31399
31397: GO 31421
31399: POP
// hHackTeleport ( unit , x , y ) ; end ;
31400: LD_VAR 0 2
31404: PPUSH
31405: LD_VAR 0 4
31409: PPUSH
31410: LD_VAR 0 5
31414: PPUSH
31415: CALL 33186 0 3
31419: GO 31422
31421: POP
// end ;
31422: LD_VAR 0 12
31426: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31427: LD_INT 0
31429: PPUSH
31430: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31431: LD_VAR 0 1
31435: PUSH
31436: LD_INT 1
31438: LESS
31439: PUSH
31440: LD_VAR 0 1
31444: PUSH
31445: LD_INT 3
31447: GREATER
31448: OR
31449: PUSH
31450: LD_VAR 0 5
31454: PPUSH
31455: LD_VAR 0 6
31459: PPUSH
31460: CALL_OW 428
31464: OR
31465: IFFALSE 31469
// exit ;
31467: GO 32189
// uc_side := your_side ;
31469: LD_ADDR_OWVAR 20
31473: PUSH
31474: LD_OWVAR 2
31478: ST_TO_ADDR
// uc_nation := nation ;
31479: LD_ADDR_OWVAR 21
31483: PUSH
31484: LD_VAR 0 1
31488: ST_TO_ADDR
// bc_level = 1 ;
31489: LD_ADDR_OWVAR 43
31493: PUSH
31494: LD_INT 1
31496: ST_TO_ADDR
// case btype of 1 :
31497: LD_VAR 0 2
31501: PUSH
31502: LD_INT 1
31504: DOUBLE
31505: EQUAL
31506: IFTRUE 31510
31508: GO 31521
31510: POP
// bc_type := b_depot ; 2 :
31511: LD_ADDR_OWVAR 42
31515: PUSH
31516: LD_INT 0
31518: ST_TO_ADDR
31519: GO 32133
31521: LD_INT 2
31523: DOUBLE
31524: EQUAL
31525: IFTRUE 31529
31527: GO 31540
31529: POP
// bc_type := b_warehouse ; 3 :
31530: LD_ADDR_OWVAR 42
31534: PUSH
31535: LD_INT 1
31537: ST_TO_ADDR
31538: GO 32133
31540: LD_INT 3
31542: DOUBLE
31543: EQUAL
31544: IFTRUE 31548
31546: GO 31559
31548: POP
// bc_type := b_lab ; 4 .. 9 :
31549: LD_ADDR_OWVAR 42
31553: PUSH
31554: LD_INT 6
31556: ST_TO_ADDR
31557: GO 32133
31559: LD_INT 4
31561: DOUBLE
31562: GREATEREQUAL
31563: IFFALSE 31571
31565: LD_INT 9
31567: DOUBLE
31568: LESSEQUAL
31569: IFTRUE 31573
31571: GO 31625
31573: POP
// begin bc_type := b_lab_half ;
31574: LD_ADDR_OWVAR 42
31578: PUSH
31579: LD_INT 7
31581: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31582: LD_ADDR_OWVAR 44
31586: PUSH
31587: LD_INT 10
31589: PUSH
31590: LD_INT 11
31592: PUSH
31593: LD_INT 12
31595: PUSH
31596: LD_INT 15
31598: PUSH
31599: LD_INT 14
31601: PUSH
31602: LD_INT 13
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: PUSH
31613: LD_VAR 0 2
31617: PUSH
31618: LD_INT 3
31620: MINUS
31621: ARRAY
31622: ST_TO_ADDR
// end ; 10 .. 13 :
31623: GO 32133
31625: LD_INT 10
31627: DOUBLE
31628: GREATEREQUAL
31629: IFFALSE 31637
31631: LD_INT 13
31633: DOUBLE
31634: LESSEQUAL
31635: IFTRUE 31639
31637: GO 31716
31639: POP
// begin bc_type := b_lab_full ;
31640: LD_ADDR_OWVAR 42
31644: PUSH
31645: LD_INT 8
31647: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31648: LD_ADDR_OWVAR 44
31652: PUSH
31653: LD_INT 10
31655: PUSH
31656: LD_INT 12
31658: PUSH
31659: LD_INT 14
31661: PUSH
31662: LD_INT 13
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: PUSH
31671: LD_VAR 0 2
31675: PUSH
31676: LD_INT 9
31678: MINUS
31679: ARRAY
31680: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31681: LD_ADDR_OWVAR 45
31685: PUSH
31686: LD_INT 11
31688: PUSH
31689: LD_INT 15
31691: PUSH
31692: LD_INT 12
31694: PUSH
31695: LD_INT 15
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: PUSH
31704: LD_VAR 0 2
31708: PUSH
31709: LD_INT 9
31711: MINUS
31712: ARRAY
31713: ST_TO_ADDR
// end ; 14 :
31714: GO 32133
31716: LD_INT 14
31718: DOUBLE
31719: EQUAL
31720: IFTRUE 31724
31722: GO 31735
31724: POP
// bc_type := b_workshop ; 15 :
31725: LD_ADDR_OWVAR 42
31729: PUSH
31730: LD_INT 2
31732: ST_TO_ADDR
31733: GO 32133
31735: LD_INT 15
31737: DOUBLE
31738: EQUAL
31739: IFTRUE 31743
31741: GO 31754
31743: POP
// bc_type := b_factory ; 16 :
31744: LD_ADDR_OWVAR 42
31748: PUSH
31749: LD_INT 3
31751: ST_TO_ADDR
31752: GO 32133
31754: LD_INT 16
31756: DOUBLE
31757: EQUAL
31758: IFTRUE 31762
31760: GO 31773
31762: POP
// bc_type := b_ext_gun ; 17 :
31763: LD_ADDR_OWVAR 42
31767: PUSH
31768: LD_INT 17
31770: ST_TO_ADDR
31771: GO 32133
31773: LD_INT 17
31775: DOUBLE
31776: EQUAL
31777: IFTRUE 31781
31779: GO 31809
31781: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31782: LD_ADDR_OWVAR 42
31786: PUSH
31787: LD_INT 19
31789: PUSH
31790: LD_INT 23
31792: PUSH
31793: LD_INT 19
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: LIST
31800: PUSH
31801: LD_VAR 0 1
31805: ARRAY
31806: ST_TO_ADDR
31807: GO 32133
31809: LD_INT 18
31811: DOUBLE
31812: EQUAL
31813: IFTRUE 31817
31815: GO 31828
31817: POP
// bc_type := b_ext_radar ; 19 :
31818: LD_ADDR_OWVAR 42
31822: PUSH
31823: LD_INT 20
31825: ST_TO_ADDR
31826: GO 32133
31828: LD_INT 19
31830: DOUBLE
31831: EQUAL
31832: IFTRUE 31836
31834: GO 31847
31836: POP
// bc_type := b_ext_radio ; 20 :
31837: LD_ADDR_OWVAR 42
31841: PUSH
31842: LD_INT 22
31844: ST_TO_ADDR
31845: GO 32133
31847: LD_INT 20
31849: DOUBLE
31850: EQUAL
31851: IFTRUE 31855
31853: GO 31866
31855: POP
// bc_type := b_ext_siberium ; 21 :
31856: LD_ADDR_OWVAR 42
31860: PUSH
31861: LD_INT 21
31863: ST_TO_ADDR
31864: GO 32133
31866: LD_INT 21
31868: DOUBLE
31869: EQUAL
31870: IFTRUE 31874
31872: GO 31885
31874: POP
// bc_type := b_ext_computer ; 22 :
31875: LD_ADDR_OWVAR 42
31879: PUSH
31880: LD_INT 24
31882: ST_TO_ADDR
31883: GO 32133
31885: LD_INT 22
31887: DOUBLE
31888: EQUAL
31889: IFTRUE 31893
31891: GO 31904
31893: POP
// bc_type := b_ext_track ; 23 :
31894: LD_ADDR_OWVAR 42
31898: PUSH
31899: LD_INT 16
31901: ST_TO_ADDR
31902: GO 32133
31904: LD_INT 23
31906: DOUBLE
31907: EQUAL
31908: IFTRUE 31912
31910: GO 31923
31912: POP
// bc_type := b_ext_laser ; 24 :
31913: LD_ADDR_OWVAR 42
31917: PUSH
31918: LD_INT 25
31920: ST_TO_ADDR
31921: GO 32133
31923: LD_INT 24
31925: DOUBLE
31926: EQUAL
31927: IFTRUE 31931
31929: GO 31942
31931: POP
// bc_type := b_control_tower ; 25 :
31932: LD_ADDR_OWVAR 42
31936: PUSH
31937: LD_INT 36
31939: ST_TO_ADDR
31940: GO 32133
31942: LD_INT 25
31944: DOUBLE
31945: EQUAL
31946: IFTRUE 31950
31948: GO 31961
31950: POP
// bc_type := b_breastwork ; 26 :
31951: LD_ADDR_OWVAR 42
31955: PUSH
31956: LD_INT 31
31958: ST_TO_ADDR
31959: GO 32133
31961: LD_INT 26
31963: DOUBLE
31964: EQUAL
31965: IFTRUE 31969
31967: GO 31980
31969: POP
// bc_type := b_bunker ; 27 :
31970: LD_ADDR_OWVAR 42
31974: PUSH
31975: LD_INT 32
31977: ST_TO_ADDR
31978: GO 32133
31980: LD_INT 27
31982: DOUBLE
31983: EQUAL
31984: IFTRUE 31988
31986: GO 31999
31988: POP
// bc_type := b_turret ; 28 :
31989: LD_ADDR_OWVAR 42
31993: PUSH
31994: LD_INT 33
31996: ST_TO_ADDR
31997: GO 32133
31999: LD_INT 28
32001: DOUBLE
32002: EQUAL
32003: IFTRUE 32007
32005: GO 32018
32007: POP
// bc_type := b_armoury ; 29 :
32008: LD_ADDR_OWVAR 42
32012: PUSH
32013: LD_INT 4
32015: ST_TO_ADDR
32016: GO 32133
32018: LD_INT 29
32020: DOUBLE
32021: EQUAL
32022: IFTRUE 32026
32024: GO 32037
32026: POP
// bc_type := b_barracks ; 30 :
32027: LD_ADDR_OWVAR 42
32031: PUSH
32032: LD_INT 5
32034: ST_TO_ADDR
32035: GO 32133
32037: LD_INT 30
32039: DOUBLE
32040: EQUAL
32041: IFTRUE 32045
32043: GO 32056
32045: POP
// bc_type := b_solar_power ; 31 :
32046: LD_ADDR_OWVAR 42
32050: PUSH
32051: LD_INT 27
32053: ST_TO_ADDR
32054: GO 32133
32056: LD_INT 31
32058: DOUBLE
32059: EQUAL
32060: IFTRUE 32064
32062: GO 32075
32064: POP
// bc_type := b_oil_power ; 32 :
32065: LD_ADDR_OWVAR 42
32069: PUSH
32070: LD_INT 26
32072: ST_TO_ADDR
32073: GO 32133
32075: LD_INT 32
32077: DOUBLE
32078: EQUAL
32079: IFTRUE 32083
32081: GO 32094
32083: POP
// bc_type := b_siberite_power ; 33 :
32084: LD_ADDR_OWVAR 42
32088: PUSH
32089: LD_INT 28
32091: ST_TO_ADDR
32092: GO 32133
32094: LD_INT 33
32096: DOUBLE
32097: EQUAL
32098: IFTRUE 32102
32100: GO 32113
32102: POP
// bc_type := b_oil_mine ; 34 :
32103: LD_ADDR_OWVAR 42
32107: PUSH
32108: LD_INT 29
32110: ST_TO_ADDR
32111: GO 32133
32113: LD_INT 34
32115: DOUBLE
32116: EQUAL
32117: IFTRUE 32121
32119: GO 32132
32121: POP
// bc_type := b_siberite_mine ; end ;
32122: LD_ADDR_OWVAR 42
32126: PUSH
32127: LD_INT 30
32129: ST_TO_ADDR
32130: GO 32133
32132: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32133: LD_ADDR_VAR 0 8
32137: PUSH
32138: LD_VAR 0 5
32142: PPUSH
32143: LD_VAR 0 6
32147: PPUSH
32148: LD_VAR 0 3
32152: PPUSH
32153: CALL_OW 47
32157: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32158: LD_OWVAR 42
32162: PUSH
32163: LD_INT 32
32165: PUSH
32166: LD_INT 33
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: IN
32173: IFFALSE 32189
// PlaceWeaponTurret ( b , weapon ) ;
32175: LD_VAR 0 8
32179: PPUSH
32180: LD_VAR 0 4
32184: PPUSH
32185: CALL_OW 431
// end ;
32189: LD_VAR 0 7
32193: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32194: LD_INT 0
32196: PPUSH
32197: PPUSH
32198: PPUSH
32199: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32200: LD_ADDR_VAR 0 4
32204: PUSH
32205: LD_INT 22
32207: PUSH
32208: LD_OWVAR 2
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 2
32219: PUSH
32220: LD_INT 30
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 30
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: LIST
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PPUSH
32249: CALL_OW 69
32253: ST_TO_ADDR
// if not tmp then
32254: LD_VAR 0 4
32258: NOT
32259: IFFALSE 32263
// exit ;
32261: GO 32322
// for i in tmp do
32263: LD_ADDR_VAR 0 2
32267: PUSH
32268: LD_VAR 0 4
32272: PUSH
32273: FOR_IN
32274: IFFALSE 32320
// for j = 1 to 3 do
32276: LD_ADDR_VAR 0 3
32280: PUSH
32281: DOUBLE
32282: LD_INT 1
32284: DEC
32285: ST_TO_ADDR
32286: LD_INT 3
32288: PUSH
32289: FOR_TO
32290: IFFALSE 32316
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32292: LD_VAR 0 2
32296: PPUSH
32297: CALL_OW 274
32301: PPUSH
32302: LD_VAR 0 3
32306: PPUSH
32307: LD_INT 99999
32309: PPUSH
32310: CALL_OW 277
32314: GO 32289
32316: POP
32317: POP
32318: GO 32273
32320: POP
32321: POP
// end ;
32322: LD_VAR 0 1
32326: RET
// export function hHackSetLevel10 ; var i , j ; begin
32327: LD_INT 0
32329: PPUSH
32330: PPUSH
32331: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32332: LD_ADDR_VAR 0 2
32336: PUSH
32337: LD_INT 21
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PPUSH
32347: CALL_OW 69
32351: PUSH
32352: FOR_IN
32353: IFFALSE 32405
// if IsSelected ( i ) then
32355: LD_VAR 0 2
32359: PPUSH
32360: CALL_OW 306
32364: IFFALSE 32403
// begin for j := 1 to 4 do
32366: LD_ADDR_VAR 0 3
32370: PUSH
32371: DOUBLE
32372: LD_INT 1
32374: DEC
32375: ST_TO_ADDR
32376: LD_INT 4
32378: PUSH
32379: FOR_TO
32380: IFFALSE 32401
// SetSkill ( i , j , 10 ) ;
32382: LD_VAR 0 2
32386: PPUSH
32387: LD_VAR 0 3
32391: PPUSH
32392: LD_INT 10
32394: PPUSH
32395: CALL_OW 237
32399: GO 32379
32401: POP
32402: POP
// end ;
32403: GO 32352
32405: POP
32406: POP
// end ;
32407: LD_VAR 0 1
32411: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32412: LD_INT 0
32414: PPUSH
32415: PPUSH
32416: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32417: LD_ADDR_VAR 0 2
32421: PUSH
32422: LD_INT 22
32424: PUSH
32425: LD_OWVAR 2
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 21
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PPUSH
32448: CALL_OW 69
32452: PUSH
32453: FOR_IN
32454: IFFALSE 32495
// begin for j := 1 to 4 do
32456: LD_ADDR_VAR 0 3
32460: PUSH
32461: DOUBLE
32462: LD_INT 1
32464: DEC
32465: ST_TO_ADDR
32466: LD_INT 4
32468: PUSH
32469: FOR_TO
32470: IFFALSE 32491
// SetSkill ( i , j , 10 ) ;
32472: LD_VAR 0 2
32476: PPUSH
32477: LD_VAR 0 3
32481: PPUSH
32482: LD_INT 10
32484: PPUSH
32485: CALL_OW 237
32489: GO 32469
32491: POP
32492: POP
// end ;
32493: GO 32453
32495: POP
32496: POP
// end ;
32497: LD_VAR 0 1
32501: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32502: LD_INT 0
32504: PPUSH
// uc_side := your_side ;
32505: LD_ADDR_OWVAR 20
32509: PUSH
32510: LD_OWVAR 2
32514: ST_TO_ADDR
// uc_nation := nation ;
32515: LD_ADDR_OWVAR 21
32519: PUSH
32520: LD_VAR 0 1
32524: ST_TO_ADDR
// InitHc ;
32525: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32529: LD_INT 0
32531: PPUSH
32532: LD_VAR 0 2
32536: PPUSH
32537: LD_VAR 0 3
32541: PPUSH
32542: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32546: LD_VAR 0 4
32550: PPUSH
32551: LD_VAR 0 5
32555: PPUSH
32556: CALL_OW 428
32560: PUSH
32561: LD_INT 0
32563: EQUAL
32564: IFFALSE 32588
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32566: CALL_OW 44
32570: PPUSH
32571: LD_VAR 0 4
32575: PPUSH
32576: LD_VAR 0 5
32580: PPUSH
32581: LD_INT 1
32583: PPUSH
32584: CALL_OW 48
// end ;
32588: LD_VAR 0 6
32592: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32593: LD_INT 0
32595: PPUSH
32596: PPUSH
// uc_side := your_side ;
32597: LD_ADDR_OWVAR 20
32601: PUSH
32602: LD_OWVAR 2
32606: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32607: LD_VAR 0 1
32611: PUSH
32612: LD_INT 1
32614: PUSH
32615: LD_INT 2
32617: PUSH
32618: LD_INT 3
32620: PUSH
32621: LD_INT 4
32623: PUSH
32624: LD_INT 5
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: IN
32634: IFFALSE 32646
// uc_nation := nation_american else
32636: LD_ADDR_OWVAR 21
32640: PUSH
32641: LD_INT 1
32643: ST_TO_ADDR
32644: GO 32689
// if chassis in [ 11 , 12 , 13 , 14 ] then
32646: LD_VAR 0 1
32650: PUSH
32651: LD_INT 11
32653: PUSH
32654: LD_INT 12
32656: PUSH
32657: LD_INT 13
32659: PUSH
32660: LD_INT 14
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: IN
32669: IFFALSE 32681
// uc_nation := nation_arabian else
32671: LD_ADDR_OWVAR 21
32675: PUSH
32676: LD_INT 2
32678: ST_TO_ADDR
32679: GO 32689
// uc_nation := nation_russian ;
32681: LD_ADDR_OWVAR 21
32685: PUSH
32686: LD_INT 3
32688: ST_TO_ADDR
// vc_chassis := chassis ;
32689: LD_ADDR_OWVAR 37
32693: PUSH
32694: LD_VAR 0 1
32698: ST_TO_ADDR
// vc_engine := engine ;
32699: LD_ADDR_OWVAR 39
32703: PUSH
32704: LD_VAR 0 2
32708: ST_TO_ADDR
// vc_control := control ;
32709: LD_ADDR_OWVAR 38
32713: PUSH
32714: LD_VAR 0 3
32718: ST_TO_ADDR
// vc_weapon := weapon ;
32719: LD_ADDR_OWVAR 40
32723: PUSH
32724: LD_VAR 0 4
32728: ST_TO_ADDR
// un := CreateVehicle ;
32729: LD_ADDR_VAR 0 8
32733: PUSH
32734: CALL_OW 45
32738: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32739: LD_VAR 0 8
32743: PPUSH
32744: LD_INT 0
32746: PPUSH
32747: LD_INT 5
32749: PPUSH
32750: CALL_OW 12
32754: PPUSH
32755: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32759: LD_VAR 0 8
32763: PPUSH
32764: LD_VAR 0 5
32768: PPUSH
32769: LD_VAR 0 6
32773: PPUSH
32774: LD_INT 1
32776: PPUSH
32777: CALL_OW 48
// end ;
32781: LD_VAR 0 7
32785: RET
// export hInvincible ; every 1 do
32786: GO 32788
32788: DISABLE
// hInvincible := [ ] ;
32789: LD_ADDR_EXP 101
32793: PUSH
32794: EMPTY
32795: ST_TO_ADDR
32796: END
// every 10 do var i ;
32797: GO 32799
32799: DISABLE
32800: LD_INT 0
32802: PPUSH
// begin enable ;
32803: ENABLE
// if not hInvincible then
32804: LD_EXP 101
32808: NOT
32809: IFFALSE 32813
// exit ;
32811: GO 32857
// for i in hInvincible do
32813: LD_ADDR_VAR 0 1
32817: PUSH
32818: LD_EXP 101
32822: PUSH
32823: FOR_IN
32824: IFFALSE 32855
// if GetLives ( i ) < 1000 then
32826: LD_VAR 0 1
32830: PPUSH
32831: CALL_OW 256
32835: PUSH
32836: LD_INT 1000
32838: LESS
32839: IFFALSE 32853
// SetLives ( i , 1000 ) ;
32841: LD_VAR 0 1
32845: PPUSH
32846: LD_INT 1000
32848: PPUSH
32849: CALL_OW 234
32853: GO 32823
32855: POP
32856: POP
// end ;
32857: PPOPN 1
32859: END
// export function hHackInvincible ; var i ; begin
32860: LD_INT 0
32862: PPUSH
32863: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32864: LD_ADDR_VAR 0 2
32868: PUSH
32869: LD_INT 2
32871: PUSH
32872: LD_INT 21
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 21
32884: PUSH
32885: LD_INT 2
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: LIST
32896: PPUSH
32897: CALL_OW 69
32901: PUSH
32902: FOR_IN
32903: IFFALSE 32964
// if IsSelected ( i ) then
32905: LD_VAR 0 2
32909: PPUSH
32910: CALL_OW 306
32914: IFFALSE 32962
// begin if i in hInvincible then
32916: LD_VAR 0 2
32920: PUSH
32921: LD_EXP 101
32925: IN
32926: IFFALSE 32946
// hInvincible := hInvincible diff i else
32928: LD_ADDR_EXP 101
32932: PUSH
32933: LD_EXP 101
32937: PUSH
32938: LD_VAR 0 2
32942: DIFF
32943: ST_TO_ADDR
32944: GO 32962
// hInvincible := hInvincible union i ;
32946: LD_ADDR_EXP 101
32950: PUSH
32951: LD_EXP 101
32955: PUSH
32956: LD_VAR 0 2
32960: UNION
32961: ST_TO_ADDR
// end ;
32962: GO 32902
32964: POP
32965: POP
// end ;
32966: LD_VAR 0 1
32970: RET
// export function hHackInvisible ; var i , j ; begin
32971: LD_INT 0
32973: PPUSH
32974: PPUSH
32975: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32976: LD_ADDR_VAR 0 2
32980: PUSH
32981: LD_INT 21
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PPUSH
32991: CALL_OW 69
32995: PUSH
32996: FOR_IN
32997: IFFALSE 33021
// if IsSelected ( i ) then
32999: LD_VAR 0 2
33003: PPUSH
33004: CALL_OW 306
33008: IFFALSE 33019
// ComForceInvisible ( i ) ;
33010: LD_VAR 0 2
33014: PPUSH
33015: CALL_OW 496
33019: GO 32996
33021: POP
33022: POP
// end ;
33023: LD_VAR 0 1
33027: RET
// export function hHackChangeYourSide ; begin
33028: LD_INT 0
33030: PPUSH
// if your_side = 8 then
33031: LD_OWVAR 2
33035: PUSH
33036: LD_INT 8
33038: EQUAL
33039: IFFALSE 33051
// your_side := 0 else
33041: LD_ADDR_OWVAR 2
33045: PUSH
33046: LD_INT 0
33048: ST_TO_ADDR
33049: GO 33065
// your_side := your_side + 1 ;
33051: LD_ADDR_OWVAR 2
33055: PUSH
33056: LD_OWVAR 2
33060: PUSH
33061: LD_INT 1
33063: PLUS
33064: ST_TO_ADDR
// end ;
33065: LD_VAR 0 1
33069: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33070: LD_INT 0
33072: PPUSH
33073: PPUSH
33074: PPUSH
// for i in all_units do
33075: LD_ADDR_VAR 0 2
33079: PUSH
33080: LD_OWVAR 3
33084: PUSH
33085: FOR_IN
33086: IFFALSE 33164
// if IsSelected ( i ) then
33088: LD_VAR 0 2
33092: PPUSH
33093: CALL_OW 306
33097: IFFALSE 33162
// begin j := GetSide ( i ) ;
33099: LD_ADDR_VAR 0 3
33103: PUSH
33104: LD_VAR 0 2
33108: PPUSH
33109: CALL_OW 255
33113: ST_TO_ADDR
// if j = 8 then
33114: LD_VAR 0 3
33118: PUSH
33119: LD_INT 8
33121: EQUAL
33122: IFFALSE 33134
// j := 0 else
33124: LD_ADDR_VAR 0 3
33128: PUSH
33129: LD_INT 0
33131: ST_TO_ADDR
33132: GO 33148
// j := j + 1 ;
33134: LD_ADDR_VAR 0 3
33138: PUSH
33139: LD_VAR 0 3
33143: PUSH
33144: LD_INT 1
33146: PLUS
33147: ST_TO_ADDR
// SetSide ( i , j ) ;
33148: LD_VAR 0 2
33152: PPUSH
33153: LD_VAR 0 3
33157: PPUSH
33158: CALL_OW 235
// end ;
33162: GO 33085
33164: POP
33165: POP
// end ;
33166: LD_VAR 0 1
33170: RET
// export function hHackFog ; begin
33171: LD_INT 0
33173: PPUSH
// FogOff ( true ) ;
33174: LD_INT 1
33176: PPUSH
33177: CALL_OW 344
// end ;
33181: LD_VAR 0 1
33185: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33186: LD_INT 0
33188: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33189: LD_VAR 0 1
33193: PPUSH
33194: LD_VAR 0 2
33198: PPUSH
33199: LD_VAR 0 3
33203: PPUSH
33204: LD_INT 1
33206: PPUSH
33207: LD_INT 1
33209: PPUSH
33210: CALL_OW 483
// CenterOnXY ( x , y ) ;
33214: LD_VAR 0 2
33218: PPUSH
33219: LD_VAR 0 3
33223: PPUSH
33224: CALL_OW 84
// end ;
33228: LD_VAR 0 4
33232: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33233: LD_INT 0
33235: PPUSH
33236: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33237: LD_VAR 0 1
33241: NOT
33242: PUSH
33243: LD_VAR 0 2
33247: PPUSH
33248: LD_VAR 0 3
33252: PPUSH
33253: CALL_OW 488
33257: NOT
33258: OR
33259: PUSH
33260: LD_VAR 0 1
33264: PPUSH
33265: CALL_OW 266
33269: PUSH
33270: LD_INT 3
33272: NONEQUAL
33273: PUSH
33274: LD_VAR 0 1
33278: PPUSH
33279: CALL_OW 247
33283: PUSH
33284: LD_INT 1
33286: EQUAL
33287: NOT
33288: AND
33289: OR
33290: IFFALSE 33294
// exit ;
33292: GO 33443
// if GetType ( factory ) = unit_human then
33294: LD_VAR 0 1
33298: PPUSH
33299: CALL_OW 247
33303: PUSH
33304: LD_INT 1
33306: EQUAL
33307: IFFALSE 33324
// factory := IsInUnit ( factory ) ;
33309: LD_ADDR_VAR 0 1
33313: PUSH
33314: LD_VAR 0 1
33318: PPUSH
33319: CALL_OW 310
33323: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33324: LD_VAR 0 1
33328: PPUSH
33329: CALL_OW 266
33333: PUSH
33334: LD_INT 3
33336: NONEQUAL
33337: IFFALSE 33341
// exit ;
33339: GO 33443
// if HexInfo ( x , y ) = factory then
33341: LD_VAR 0 2
33345: PPUSH
33346: LD_VAR 0 3
33350: PPUSH
33351: CALL_OW 428
33355: PUSH
33356: LD_VAR 0 1
33360: EQUAL
33361: IFFALSE 33388
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33363: LD_ADDR_EXP 102
33367: PUSH
33368: LD_EXP 102
33372: PPUSH
33373: LD_VAR 0 1
33377: PPUSH
33378: LD_INT 0
33380: PPUSH
33381: CALL_OW 1
33385: ST_TO_ADDR
33386: GO 33439
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33388: LD_ADDR_EXP 102
33392: PUSH
33393: LD_EXP 102
33397: PPUSH
33398: LD_VAR 0 1
33402: PPUSH
33403: LD_VAR 0 1
33407: PPUSH
33408: CALL_OW 255
33412: PUSH
33413: LD_VAR 0 1
33417: PUSH
33418: LD_VAR 0 2
33422: PUSH
33423: LD_VAR 0 3
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: PPUSH
33434: CALL_OW 1
33438: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33439: CALL 33448 0 0
// end ;
33443: LD_VAR 0 4
33447: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33448: LD_INT 0
33450: PPUSH
33451: PPUSH
33452: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33453: LD_STRING resetFactoryWaypoint();
33455: PPUSH
33456: CALL_OW 559
// if factoryWaypoints then
33460: LD_EXP 102
33464: IFFALSE 33590
// begin list := PrepareArray ( factoryWaypoints ) ;
33466: LD_ADDR_VAR 0 3
33470: PUSH
33471: LD_EXP 102
33475: PPUSH
33476: CALL 80059 0 1
33480: ST_TO_ADDR
// for i := 1 to list do
33481: LD_ADDR_VAR 0 2
33485: PUSH
33486: DOUBLE
33487: LD_INT 1
33489: DEC
33490: ST_TO_ADDR
33491: LD_VAR 0 3
33495: PUSH
33496: FOR_TO
33497: IFFALSE 33588
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33499: LD_STRING setFactoryWaypointXY(
33501: PUSH
33502: LD_VAR 0 3
33506: PUSH
33507: LD_VAR 0 2
33511: ARRAY
33512: PUSH
33513: LD_INT 1
33515: ARRAY
33516: STR
33517: PUSH
33518: LD_STRING ,
33520: STR
33521: PUSH
33522: LD_VAR 0 3
33526: PUSH
33527: LD_VAR 0 2
33531: ARRAY
33532: PUSH
33533: LD_INT 2
33535: ARRAY
33536: STR
33537: PUSH
33538: LD_STRING ,
33540: STR
33541: PUSH
33542: LD_VAR 0 3
33546: PUSH
33547: LD_VAR 0 2
33551: ARRAY
33552: PUSH
33553: LD_INT 3
33555: ARRAY
33556: STR
33557: PUSH
33558: LD_STRING ,
33560: STR
33561: PUSH
33562: LD_VAR 0 3
33566: PUSH
33567: LD_VAR 0 2
33571: ARRAY
33572: PUSH
33573: LD_INT 4
33575: ARRAY
33576: STR
33577: PUSH
33578: LD_STRING )
33580: STR
33581: PPUSH
33582: CALL_OW 559
33586: GO 33496
33588: POP
33589: POP
// end ; end ;
33590: LD_VAR 0 1
33594: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33595: LD_INT 0
33597: PPUSH
// if HexInfo ( x , y ) = warehouse then
33598: LD_VAR 0 2
33602: PPUSH
33603: LD_VAR 0 3
33607: PPUSH
33608: CALL_OW 428
33612: PUSH
33613: LD_VAR 0 1
33617: EQUAL
33618: IFFALSE 33645
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33620: LD_ADDR_EXP 103
33624: PUSH
33625: LD_EXP 103
33629: PPUSH
33630: LD_VAR 0 1
33634: PPUSH
33635: LD_INT 0
33637: PPUSH
33638: CALL_OW 1
33642: ST_TO_ADDR
33643: GO 33696
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33645: LD_ADDR_EXP 103
33649: PUSH
33650: LD_EXP 103
33654: PPUSH
33655: LD_VAR 0 1
33659: PPUSH
33660: LD_VAR 0 1
33664: PPUSH
33665: CALL_OW 255
33669: PUSH
33670: LD_VAR 0 1
33674: PUSH
33675: LD_VAR 0 2
33679: PUSH
33680: LD_VAR 0 3
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: PPUSH
33691: CALL_OW 1
33695: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33696: CALL 33705 0 0
// end ;
33700: LD_VAR 0 4
33704: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33705: LD_INT 0
33707: PPUSH
33708: PPUSH
33709: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33710: LD_STRING resetWarehouseGatheringPoints();
33712: PPUSH
33713: CALL_OW 559
// if warehouseGatheringPoints then
33717: LD_EXP 103
33721: IFFALSE 33847
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33723: LD_ADDR_VAR 0 3
33727: PUSH
33728: LD_EXP 103
33732: PPUSH
33733: CALL 80059 0 1
33737: ST_TO_ADDR
// for i := 1 to list do
33738: LD_ADDR_VAR 0 2
33742: PUSH
33743: DOUBLE
33744: LD_INT 1
33746: DEC
33747: ST_TO_ADDR
33748: LD_VAR 0 3
33752: PUSH
33753: FOR_TO
33754: IFFALSE 33845
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33756: LD_STRING setWarehouseGatheringPointXY(
33758: PUSH
33759: LD_VAR 0 3
33763: PUSH
33764: LD_VAR 0 2
33768: ARRAY
33769: PUSH
33770: LD_INT 1
33772: ARRAY
33773: STR
33774: PUSH
33775: LD_STRING ,
33777: STR
33778: PUSH
33779: LD_VAR 0 3
33783: PUSH
33784: LD_VAR 0 2
33788: ARRAY
33789: PUSH
33790: LD_INT 2
33792: ARRAY
33793: STR
33794: PUSH
33795: LD_STRING ,
33797: STR
33798: PUSH
33799: LD_VAR 0 3
33803: PUSH
33804: LD_VAR 0 2
33808: ARRAY
33809: PUSH
33810: LD_INT 3
33812: ARRAY
33813: STR
33814: PUSH
33815: LD_STRING ,
33817: STR
33818: PUSH
33819: LD_VAR 0 3
33823: PUSH
33824: LD_VAR 0 2
33828: ARRAY
33829: PUSH
33830: LD_INT 4
33832: ARRAY
33833: STR
33834: PUSH
33835: LD_STRING )
33837: STR
33838: PPUSH
33839: CALL_OW 559
33843: GO 33753
33845: POP
33846: POP
// end ; end ;
33847: LD_VAR 0 1
33851: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33852: LD_EXP 103
33856: IFFALSE 34541
33858: GO 33860
33860: DISABLE
33861: LD_INT 0
33863: PPUSH
33864: PPUSH
33865: PPUSH
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
33871: PPUSH
// begin enable ;
33872: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33873: LD_ADDR_VAR 0 3
33877: PUSH
33878: LD_EXP 103
33882: PPUSH
33883: CALL 80059 0 1
33887: ST_TO_ADDR
// if not list then
33888: LD_VAR 0 3
33892: NOT
33893: IFFALSE 33897
// exit ;
33895: GO 34541
// for i := 1 to list do
33897: LD_ADDR_VAR 0 1
33901: PUSH
33902: DOUBLE
33903: LD_INT 1
33905: DEC
33906: ST_TO_ADDR
33907: LD_VAR 0 3
33911: PUSH
33912: FOR_TO
33913: IFFALSE 34539
// begin depot := list [ i ] [ 2 ] ;
33915: LD_ADDR_VAR 0 8
33919: PUSH
33920: LD_VAR 0 3
33924: PUSH
33925: LD_VAR 0 1
33929: ARRAY
33930: PUSH
33931: LD_INT 2
33933: ARRAY
33934: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33935: LD_ADDR_VAR 0 5
33939: PUSH
33940: LD_VAR 0 3
33944: PUSH
33945: LD_VAR 0 1
33949: ARRAY
33950: PUSH
33951: LD_INT 1
33953: ARRAY
33954: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33955: LD_VAR 0 8
33959: PPUSH
33960: CALL_OW 301
33964: PUSH
33965: LD_VAR 0 5
33969: PUSH
33970: LD_VAR 0 8
33974: PPUSH
33975: CALL_OW 255
33979: NONEQUAL
33980: OR
33981: IFFALSE 34010
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33983: LD_ADDR_EXP 103
33987: PUSH
33988: LD_EXP 103
33992: PPUSH
33993: LD_VAR 0 8
33997: PPUSH
33998: LD_INT 0
34000: PPUSH
34001: CALL_OW 1
34005: ST_TO_ADDR
// exit ;
34006: POP
34007: POP
34008: GO 34541
// end ; x := list [ i ] [ 3 ] ;
34010: LD_ADDR_VAR 0 6
34014: PUSH
34015: LD_VAR 0 3
34019: PUSH
34020: LD_VAR 0 1
34024: ARRAY
34025: PUSH
34026: LD_INT 3
34028: ARRAY
34029: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34030: LD_ADDR_VAR 0 7
34034: PUSH
34035: LD_VAR 0 3
34039: PUSH
34040: LD_VAR 0 1
34044: ARRAY
34045: PUSH
34046: LD_INT 4
34048: ARRAY
34049: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34050: LD_ADDR_VAR 0 9
34054: PUSH
34055: LD_VAR 0 6
34059: PPUSH
34060: LD_VAR 0 7
34064: PPUSH
34065: LD_INT 16
34067: PPUSH
34068: CALL 78647 0 3
34072: ST_TO_ADDR
// if not cratesNearbyPoint then
34073: LD_VAR 0 9
34077: NOT
34078: IFFALSE 34084
// exit ;
34080: POP
34081: POP
34082: GO 34541
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34084: LD_ADDR_VAR 0 4
34088: PUSH
34089: LD_INT 22
34091: PUSH
34092: LD_VAR 0 5
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 3
34103: PUSH
34104: LD_INT 60
34106: PUSH
34107: EMPTY
34108: LIST
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 91
34116: PUSH
34117: LD_VAR 0 8
34121: PUSH
34122: LD_INT 6
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 2
34132: PUSH
34133: LD_INT 25
34135: PUSH
34136: LD_INT 2
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 25
34145: PUSH
34146: LD_INT 16
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: PPUSH
34164: CALL_OW 69
34168: PUSH
34169: LD_VAR 0 8
34173: PPUSH
34174: CALL_OW 313
34178: PPUSH
34179: LD_INT 3
34181: PUSH
34182: LD_INT 60
34184: PUSH
34185: EMPTY
34186: LIST
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 2
34194: PUSH
34195: LD_INT 25
34197: PUSH
34198: LD_INT 2
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 25
34207: PUSH
34208: LD_INT 16
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PPUSH
34224: CALL_OW 72
34228: UNION
34229: ST_TO_ADDR
// if tmp then
34230: LD_VAR 0 4
34234: IFFALSE 34314
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34236: LD_ADDR_VAR 0 4
34240: PUSH
34241: LD_VAR 0 4
34245: PPUSH
34246: LD_INT 3
34248: PPUSH
34249: CALL 76616 0 2
34253: ST_TO_ADDR
// for j in tmp do
34254: LD_ADDR_VAR 0 2
34258: PUSH
34259: LD_VAR 0 4
34263: PUSH
34264: FOR_IN
34265: IFFALSE 34308
// begin if IsInUnit ( j ) then
34267: LD_VAR 0 2
34271: PPUSH
34272: CALL_OW 310
34276: IFFALSE 34287
// ComExit ( j ) ;
34278: LD_VAR 0 2
34282: PPUSH
34283: CALL 76699 0 1
// AddComCollect ( j , x , y ) ;
34287: LD_VAR 0 2
34291: PPUSH
34292: LD_VAR 0 6
34296: PPUSH
34297: LD_VAR 0 7
34301: PPUSH
34302: CALL_OW 177
// end ;
34306: GO 34264
34308: POP
34309: POP
// exit ;
34310: POP
34311: POP
34312: GO 34541
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34314: LD_ADDR_VAR 0 4
34318: PUSH
34319: LD_INT 22
34321: PUSH
34322: LD_VAR 0 5
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 91
34333: PUSH
34334: LD_VAR 0 8
34338: PUSH
34339: LD_INT 8
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: LD_INT 34
34352: PUSH
34353: LD_INT 12
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 34
34362: PUSH
34363: LD_INT 51
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 34
34372: PUSH
34373: LD_INT 32
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 34
34382: PUSH
34383: LD_INT 89
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: LIST
34401: PPUSH
34402: CALL_OW 69
34406: ST_TO_ADDR
// if tmp then
34407: LD_VAR 0 4
34411: IFFALSE 34537
// begin for j in tmp do
34413: LD_ADDR_VAR 0 2
34417: PUSH
34418: LD_VAR 0 4
34422: PUSH
34423: FOR_IN
34424: IFFALSE 34535
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34426: LD_VAR 0 2
34430: PPUSH
34431: CALL_OW 262
34435: PUSH
34436: LD_INT 3
34438: EQUAL
34439: PUSH
34440: LD_VAR 0 2
34444: PPUSH
34445: CALL_OW 261
34449: PUSH
34450: LD_INT 20
34452: GREATER
34453: OR
34454: PUSH
34455: LD_VAR 0 2
34459: PPUSH
34460: CALL_OW 314
34464: NOT
34465: AND
34466: PUSH
34467: LD_VAR 0 2
34471: PPUSH
34472: CALL_OW 263
34476: PUSH
34477: LD_INT 1
34479: NONEQUAL
34480: PUSH
34481: LD_VAR 0 2
34485: PPUSH
34486: CALL_OW 311
34490: OR
34491: AND
34492: IFFALSE 34533
// begin ComCollect ( j , x , y ) ;
34494: LD_VAR 0 2
34498: PPUSH
34499: LD_VAR 0 6
34503: PPUSH
34504: LD_VAR 0 7
34508: PPUSH
34509: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34513: LD_VAR 0 2
34517: PPUSH
34518: LD_VAR 0 8
34522: PPUSH
34523: CALL_OW 172
// exit ;
34527: POP
34528: POP
34529: POP
34530: POP
34531: GO 34541
// end ;
34533: GO 34423
34535: POP
34536: POP
// end ; end ;
34537: GO 33912
34539: POP
34540: POP
// end ; end_of_file
34541: PPOPN 9
34543: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34544: LD_INT 0
34546: PPUSH
34547: PPUSH
34548: PPUSH
34549: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34550: LD_VAR 0 1
34554: PPUSH
34555: CALL_OW 264
34559: PUSH
34560: LD_INT 91
34562: EQUAL
34563: IFFALSE 34635
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34565: LD_INT 68
34567: PPUSH
34568: LD_VAR 0 1
34572: PPUSH
34573: CALL_OW 255
34577: PPUSH
34578: CALL_OW 321
34582: PUSH
34583: LD_INT 2
34585: EQUAL
34586: IFFALSE 34598
// eff := 70 else
34588: LD_ADDR_VAR 0 4
34592: PUSH
34593: LD_INT 70
34595: ST_TO_ADDR
34596: GO 34606
// eff := 30 ;
34598: LD_ADDR_VAR 0 4
34602: PUSH
34603: LD_INT 30
34605: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34606: LD_VAR 0 1
34610: PPUSH
34611: CALL_OW 250
34615: PPUSH
34616: LD_VAR 0 1
34620: PPUSH
34621: CALL_OW 251
34625: PPUSH
34626: LD_VAR 0 4
34630: PPUSH
34631: CALL_OW 495
// end ; end ;
34635: LD_VAR 0 2
34639: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34640: LD_INT 0
34642: PPUSH
// end ;
34643: LD_VAR 0 4
34647: RET
// export function SOS_Command ( cmd ) ; begin
34648: LD_INT 0
34650: PPUSH
// end ;
34651: LD_VAR 0 2
34655: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34656: LD_INT 0
34658: PPUSH
// end ;
34659: LD_VAR 0 6
34663: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34664: LD_INT 0
34666: PPUSH
34667: PPUSH
// if not vehicle or not factory then
34668: LD_VAR 0 1
34672: NOT
34673: PUSH
34674: LD_VAR 0 2
34678: NOT
34679: OR
34680: IFFALSE 34684
// exit ;
34682: GO 34915
// if factoryWaypoints >= factory then
34684: LD_EXP 102
34688: PUSH
34689: LD_VAR 0 2
34693: GREATEREQUAL
34694: IFFALSE 34915
// if factoryWaypoints [ factory ] then
34696: LD_EXP 102
34700: PUSH
34701: LD_VAR 0 2
34705: ARRAY
34706: IFFALSE 34915
// begin if GetControl ( vehicle ) = control_manual then
34708: LD_VAR 0 1
34712: PPUSH
34713: CALL_OW 263
34717: PUSH
34718: LD_INT 1
34720: EQUAL
34721: IFFALSE 34802
// begin driver := IsDrivenBy ( vehicle ) ;
34723: LD_ADDR_VAR 0 4
34727: PUSH
34728: LD_VAR 0 1
34732: PPUSH
34733: CALL_OW 311
34737: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34738: LD_VAR 0 4
34742: PPUSH
34743: LD_EXP 102
34747: PUSH
34748: LD_VAR 0 2
34752: ARRAY
34753: PUSH
34754: LD_INT 3
34756: ARRAY
34757: PPUSH
34758: LD_EXP 102
34762: PUSH
34763: LD_VAR 0 2
34767: ARRAY
34768: PUSH
34769: LD_INT 4
34771: ARRAY
34772: PPUSH
34773: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34777: LD_VAR 0 4
34781: PPUSH
34782: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34786: LD_VAR 0 4
34790: PPUSH
34791: LD_VAR 0 2
34795: PPUSH
34796: CALL_OW 180
// end else
34800: GO 34915
// if GetControl ( vehicle ) = control_remote then
34802: LD_VAR 0 1
34806: PPUSH
34807: CALL_OW 263
34811: PUSH
34812: LD_INT 2
34814: EQUAL
34815: IFFALSE 34876
// begin wait ( 0 0$2 ) ;
34817: LD_INT 70
34819: PPUSH
34820: CALL_OW 67
// if Connect ( vehicle ) then
34824: LD_VAR 0 1
34828: PPUSH
34829: CALL 46939 0 1
34833: IFFALSE 34874
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34835: LD_VAR 0 1
34839: PPUSH
34840: LD_EXP 102
34844: PUSH
34845: LD_VAR 0 2
34849: ARRAY
34850: PUSH
34851: LD_INT 3
34853: ARRAY
34854: PPUSH
34855: LD_EXP 102
34859: PUSH
34860: LD_VAR 0 2
34864: ARRAY
34865: PUSH
34866: LD_INT 4
34868: ARRAY
34869: PPUSH
34870: CALL_OW 171
// end else
34874: GO 34915
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34876: LD_VAR 0 1
34880: PPUSH
34881: LD_EXP 102
34885: PUSH
34886: LD_VAR 0 2
34890: ARRAY
34891: PUSH
34892: LD_INT 3
34894: ARRAY
34895: PPUSH
34896: LD_EXP 102
34900: PUSH
34901: LD_VAR 0 2
34905: ARRAY
34906: PUSH
34907: LD_INT 4
34909: ARRAY
34910: PPUSH
34911: CALL_OW 171
// end ; end ;
34915: LD_VAR 0 3
34919: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34920: LD_INT 0
34922: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34923: LD_VAR 0 1
34927: PUSH
34928: LD_INT 250
34930: EQUAL
34931: PUSH
34932: LD_VAR 0 2
34936: PPUSH
34937: CALL_OW 264
34941: PUSH
34942: LD_INT 81
34944: EQUAL
34945: AND
34946: IFFALSE 34967
// MinerPlaceMine ( unit , x , y ) ;
34948: LD_VAR 0 2
34952: PPUSH
34953: LD_VAR 0 4
34957: PPUSH
34958: LD_VAR 0 5
34962: PPUSH
34963: CALL 37352 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34967: LD_VAR 0 1
34971: PUSH
34972: LD_INT 251
34974: EQUAL
34975: PUSH
34976: LD_VAR 0 2
34980: PPUSH
34981: CALL_OW 264
34985: PUSH
34986: LD_INT 81
34988: EQUAL
34989: AND
34990: IFFALSE 35011
// MinerDetonateMine ( unit , x , y ) ;
34992: LD_VAR 0 2
34996: PPUSH
34997: LD_VAR 0 4
35001: PPUSH
35002: LD_VAR 0 5
35006: PPUSH
35007: CALL 37627 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35011: LD_VAR 0 1
35015: PUSH
35016: LD_INT 252
35018: EQUAL
35019: PUSH
35020: LD_VAR 0 2
35024: PPUSH
35025: CALL_OW 264
35029: PUSH
35030: LD_INT 81
35032: EQUAL
35033: AND
35034: IFFALSE 35055
// MinerCreateMinefield ( unit , x , y ) ;
35036: LD_VAR 0 2
35040: PPUSH
35041: LD_VAR 0 4
35045: PPUSH
35046: LD_VAR 0 5
35050: PPUSH
35051: CALL 38044 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35055: LD_VAR 0 1
35059: PUSH
35060: LD_INT 253
35062: EQUAL
35063: PUSH
35064: LD_VAR 0 2
35068: PPUSH
35069: CALL_OW 257
35073: PUSH
35074: LD_INT 5
35076: EQUAL
35077: AND
35078: IFFALSE 35099
// ComBinocular ( unit , x , y ) ;
35080: LD_VAR 0 2
35084: PPUSH
35085: LD_VAR 0 4
35089: PPUSH
35090: LD_VAR 0 5
35094: PPUSH
35095: CALL 38413 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35099: LD_VAR 0 1
35103: PUSH
35104: LD_INT 254
35106: EQUAL
35107: PUSH
35108: LD_VAR 0 2
35112: PPUSH
35113: CALL_OW 264
35117: PUSH
35118: LD_INT 99
35120: EQUAL
35121: AND
35122: PUSH
35123: LD_VAR 0 3
35127: PPUSH
35128: CALL_OW 263
35132: PUSH
35133: LD_INT 3
35135: EQUAL
35136: AND
35137: IFFALSE 35153
// HackDestroyVehicle ( unit , selectedUnit ) ;
35139: LD_VAR 0 2
35143: PPUSH
35144: LD_VAR 0 3
35148: PPUSH
35149: CALL 36716 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35153: LD_VAR 0 1
35157: PUSH
35158: LD_INT 255
35160: EQUAL
35161: PUSH
35162: LD_VAR 0 2
35166: PPUSH
35167: CALL_OW 264
35171: PUSH
35172: LD_INT 14
35174: PUSH
35175: LD_INT 53
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: IN
35182: AND
35183: PUSH
35184: LD_VAR 0 4
35188: PPUSH
35189: LD_VAR 0 5
35193: PPUSH
35194: CALL_OW 488
35198: AND
35199: IFFALSE 35223
// CutTreeXYR ( unit , x , y , 12 ) ;
35201: LD_VAR 0 2
35205: PPUSH
35206: LD_VAR 0 4
35210: PPUSH
35211: LD_VAR 0 5
35215: PPUSH
35216: LD_INT 12
35218: PPUSH
35219: CALL 35286 0 4
// if cmd = 256 then
35223: LD_VAR 0 1
35227: PUSH
35228: LD_INT 256
35230: EQUAL
35231: IFFALSE 35252
// SetFactoryWaypoint ( unit , x , y ) ;
35233: LD_VAR 0 2
35237: PPUSH
35238: LD_VAR 0 4
35242: PPUSH
35243: LD_VAR 0 5
35247: PPUSH
35248: CALL 33233 0 3
// if cmd = 257 then
35252: LD_VAR 0 1
35256: PUSH
35257: LD_INT 257
35259: EQUAL
35260: IFFALSE 35281
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35262: LD_VAR 0 2
35266: PPUSH
35267: LD_VAR 0 4
35271: PPUSH
35272: LD_VAR 0 5
35276: PPUSH
35277: CALL 33595 0 3
// end ;
35281: LD_VAR 0 6
35285: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35286: LD_INT 0
35288: PPUSH
35289: PPUSH
35290: PPUSH
35291: PPUSH
35292: PPUSH
35293: PPUSH
35294: PPUSH
35295: PPUSH
35296: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35297: LD_VAR 0 1
35301: NOT
35302: PUSH
35303: LD_VAR 0 2
35307: PPUSH
35308: LD_VAR 0 3
35312: PPUSH
35313: CALL_OW 488
35317: NOT
35318: OR
35319: PUSH
35320: LD_VAR 0 4
35324: NOT
35325: OR
35326: IFFALSE 35330
// exit ;
35328: GO 35670
// list := [ ] ;
35330: LD_ADDR_VAR 0 13
35334: PUSH
35335: EMPTY
35336: ST_TO_ADDR
// if x - r < 0 then
35337: LD_VAR 0 2
35341: PUSH
35342: LD_VAR 0 4
35346: MINUS
35347: PUSH
35348: LD_INT 0
35350: LESS
35351: IFFALSE 35363
// min_x := 0 else
35353: LD_ADDR_VAR 0 7
35357: PUSH
35358: LD_INT 0
35360: ST_TO_ADDR
35361: GO 35379
// min_x := x - r ;
35363: LD_ADDR_VAR 0 7
35367: PUSH
35368: LD_VAR 0 2
35372: PUSH
35373: LD_VAR 0 4
35377: MINUS
35378: ST_TO_ADDR
// if y - r < 0 then
35379: LD_VAR 0 3
35383: PUSH
35384: LD_VAR 0 4
35388: MINUS
35389: PUSH
35390: LD_INT 0
35392: LESS
35393: IFFALSE 35405
// min_y := 0 else
35395: LD_ADDR_VAR 0 8
35399: PUSH
35400: LD_INT 0
35402: ST_TO_ADDR
35403: GO 35421
// min_y := y - r ;
35405: LD_ADDR_VAR 0 8
35409: PUSH
35410: LD_VAR 0 3
35414: PUSH
35415: LD_VAR 0 4
35419: MINUS
35420: ST_TO_ADDR
// max_x := x + r ;
35421: LD_ADDR_VAR 0 9
35425: PUSH
35426: LD_VAR 0 2
35430: PUSH
35431: LD_VAR 0 4
35435: PLUS
35436: ST_TO_ADDR
// max_y := y + r ;
35437: LD_ADDR_VAR 0 10
35441: PUSH
35442: LD_VAR 0 3
35446: PUSH
35447: LD_VAR 0 4
35451: PLUS
35452: ST_TO_ADDR
// for _x = min_x to max_x do
35453: LD_ADDR_VAR 0 11
35457: PUSH
35458: DOUBLE
35459: LD_VAR 0 7
35463: DEC
35464: ST_TO_ADDR
35465: LD_VAR 0 9
35469: PUSH
35470: FOR_TO
35471: IFFALSE 35588
// for _y = min_y to max_y do
35473: LD_ADDR_VAR 0 12
35477: PUSH
35478: DOUBLE
35479: LD_VAR 0 8
35483: DEC
35484: ST_TO_ADDR
35485: LD_VAR 0 10
35489: PUSH
35490: FOR_TO
35491: IFFALSE 35584
// begin if not ValidHex ( _x , _y ) then
35493: LD_VAR 0 11
35497: PPUSH
35498: LD_VAR 0 12
35502: PPUSH
35503: CALL_OW 488
35507: NOT
35508: IFFALSE 35512
// continue ;
35510: GO 35490
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35512: LD_VAR 0 11
35516: PPUSH
35517: LD_VAR 0 12
35521: PPUSH
35522: CALL_OW 351
35526: PUSH
35527: LD_VAR 0 11
35531: PPUSH
35532: LD_VAR 0 12
35536: PPUSH
35537: CALL_OW 554
35541: AND
35542: IFFALSE 35582
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35544: LD_ADDR_VAR 0 13
35548: PUSH
35549: LD_VAR 0 13
35553: PPUSH
35554: LD_VAR 0 13
35558: PUSH
35559: LD_INT 1
35561: PLUS
35562: PPUSH
35563: LD_VAR 0 11
35567: PUSH
35568: LD_VAR 0 12
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PPUSH
35577: CALL_OW 2
35581: ST_TO_ADDR
// end ;
35582: GO 35490
35584: POP
35585: POP
35586: GO 35470
35588: POP
35589: POP
// if not list then
35590: LD_VAR 0 13
35594: NOT
35595: IFFALSE 35599
// exit ;
35597: GO 35670
// for i in list do
35599: LD_ADDR_VAR 0 6
35603: PUSH
35604: LD_VAR 0 13
35608: PUSH
35609: FOR_IN
35610: IFFALSE 35668
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35612: LD_VAR 0 1
35616: PPUSH
35617: LD_STRING M
35619: PUSH
35620: LD_VAR 0 6
35624: PUSH
35625: LD_INT 1
35627: ARRAY
35628: PUSH
35629: LD_VAR 0 6
35633: PUSH
35634: LD_INT 2
35636: ARRAY
35637: PUSH
35638: LD_INT 0
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: PUSH
35659: EMPTY
35660: LIST
35661: PPUSH
35662: CALL_OW 447
35666: GO 35609
35668: POP
35669: POP
// end ;
35670: LD_VAR 0 5
35674: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35675: LD_EXP 105
35679: NOT
35680: IFFALSE 35730
35682: GO 35684
35684: DISABLE
// begin initHack := true ;
35685: LD_ADDR_EXP 105
35689: PUSH
35690: LD_INT 1
35692: ST_TO_ADDR
// hackTanks := [ ] ;
35693: LD_ADDR_EXP 106
35697: PUSH
35698: EMPTY
35699: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35700: LD_ADDR_EXP 107
35704: PUSH
35705: EMPTY
35706: ST_TO_ADDR
// hackLimit := 3 ;
35707: LD_ADDR_EXP 108
35711: PUSH
35712: LD_INT 3
35714: ST_TO_ADDR
// hackDist := 12 ;
35715: LD_ADDR_EXP 109
35719: PUSH
35720: LD_INT 12
35722: ST_TO_ADDR
// hackCounter := [ ] ;
35723: LD_ADDR_EXP 110
35727: PUSH
35728: EMPTY
35729: ST_TO_ADDR
// end ;
35730: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35731: LD_EXP 105
35735: PUSH
35736: LD_INT 34
35738: PUSH
35739: LD_INT 99
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PPUSH
35746: CALL_OW 69
35750: AND
35751: IFFALSE 36004
35753: GO 35755
35755: DISABLE
35756: LD_INT 0
35758: PPUSH
35759: PPUSH
// begin enable ;
35760: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35761: LD_ADDR_VAR 0 1
35765: PUSH
35766: LD_INT 34
35768: PUSH
35769: LD_INT 99
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PPUSH
35776: CALL_OW 69
35780: PUSH
35781: FOR_IN
35782: IFFALSE 36002
// begin if not i in hackTanks then
35784: LD_VAR 0 1
35788: PUSH
35789: LD_EXP 106
35793: IN
35794: NOT
35795: IFFALSE 35878
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35797: LD_ADDR_EXP 106
35801: PUSH
35802: LD_EXP 106
35806: PPUSH
35807: LD_EXP 106
35811: PUSH
35812: LD_INT 1
35814: PLUS
35815: PPUSH
35816: LD_VAR 0 1
35820: PPUSH
35821: CALL_OW 1
35825: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35826: LD_ADDR_EXP 107
35830: PUSH
35831: LD_EXP 107
35835: PPUSH
35836: LD_EXP 107
35840: PUSH
35841: LD_INT 1
35843: PLUS
35844: PPUSH
35845: EMPTY
35846: PPUSH
35847: CALL_OW 1
35851: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35852: LD_ADDR_EXP 110
35856: PUSH
35857: LD_EXP 110
35861: PPUSH
35862: LD_EXP 110
35866: PUSH
35867: LD_INT 1
35869: PLUS
35870: PPUSH
35871: EMPTY
35872: PPUSH
35873: CALL_OW 1
35877: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35878: LD_VAR 0 1
35882: PPUSH
35883: CALL_OW 302
35887: NOT
35888: IFFALSE 35901
// begin HackUnlinkAll ( i ) ;
35890: LD_VAR 0 1
35894: PPUSH
35895: CALL 36007 0 1
// continue ;
35899: GO 35781
// end ; HackCheckCapturedStatus ( i ) ;
35901: LD_VAR 0 1
35905: PPUSH
35906: CALL 36450 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35910: LD_ADDR_VAR 0 2
35914: PUSH
35915: LD_INT 81
35917: PUSH
35918: LD_VAR 0 1
35922: PPUSH
35923: CALL_OW 255
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 33
35934: PUSH
35935: LD_INT 3
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 91
35944: PUSH
35945: LD_VAR 0 1
35949: PUSH
35950: LD_EXP 109
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 50
35962: PUSH
35963: EMPTY
35964: LIST
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: PPUSH
35972: CALL_OW 69
35976: ST_TO_ADDR
// if not tmp then
35977: LD_VAR 0 2
35981: NOT
35982: IFFALSE 35986
// continue ;
35984: GO 35781
// HackLink ( i , tmp ) ;
35986: LD_VAR 0 1
35990: PPUSH
35991: LD_VAR 0 2
35995: PPUSH
35996: CALL 36143 0 2
// end ;
36000: GO 35781
36002: POP
36003: POP
// end ;
36004: PPOPN 2
36006: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36007: LD_INT 0
36009: PPUSH
36010: PPUSH
36011: PPUSH
// if not hack in hackTanks then
36012: LD_VAR 0 1
36016: PUSH
36017: LD_EXP 106
36021: IN
36022: NOT
36023: IFFALSE 36027
// exit ;
36025: GO 36138
// index := GetElementIndex ( hackTanks , hack ) ;
36027: LD_ADDR_VAR 0 4
36031: PUSH
36032: LD_EXP 106
36036: PPUSH
36037: LD_VAR 0 1
36041: PPUSH
36042: CALL 43755 0 2
36046: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36047: LD_EXP 107
36051: PUSH
36052: LD_VAR 0 4
36056: ARRAY
36057: IFFALSE 36138
// begin for i in hackTanksCaptured [ index ] do
36059: LD_ADDR_VAR 0 3
36063: PUSH
36064: LD_EXP 107
36068: PUSH
36069: LD_VAR 0 4
36073: ARRAY
36074: PUSH
36075: FOR_IN
36076: IFFALSE 36102
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36078: LD_VAR 0 3
36082: PUSH
36083: LD_INT 1
36085: ARRAY
36086: PPUSH
36087: LD_VAR 0 3
36091: PUSH
36092: LD_INT 2
36094: ARRAY
36095: PPUSH
36096: CALL_OW 235
36100: GO 36075
36102: POP
36103: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36104: LD_ADDR_EXP 107
36108: PUSH
36109: LD_EXP 107
36113: PPUSH
36114: LD_VAR 0 4
36118: PPUSH
36119: EMPTY
36120: PPUSH
36121: CALL_OW 1
36125: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36126: LD_VAR 0 1
36130: PPUSH
36131: LD_INT 0
36133: PPUSH
36134: CALL_OW 505
// end ; end ;
36138: LD_VAR 0 2
36142: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36143: LD_INT 0
36145: PPUSH
36146: PPUSH
36147: PPUSH
// if not hack in hackTanks or not vehicles then
36148: LD_VAR 0 1
36152: PUSH
36153: LD_EXP 106
36157: IN
36158: NOT
36159: PUSH
36160: LD_VAR 0 2
36164: NOT
36165: OR
36166: IFFALSE 36170
// exit ;
36168: GO 36445
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36170: LD_ADDR_VAR 0 2
36174: PUSH
36175: LD_VAR 0 1
36179: PPUSH
36180: LD_VAR 0 2
36184: PPUSH
36185: LD_INT 1
36187: PPUSH
36188: LD_INT 1
36190: PPUSH
36191: CALL 44405 0 4
36195: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36196: LD_ADDR_VAR 0 5
36200: PUSH
36201: LD_EXP 106
36205: PPUSH
36206: LD_VAR 0 1
36210: PPUSH
36211: CALL 43755 0 2
36215: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36216: LD_EXP 107
36220: PUSH
36221: LD_VAR 0 5
36225: ARRAY
36226: PUSH
36227: LD_EXP 108
36231: LESS
36232: IFFALSE 36421
// begin for i := 1 to vehicles do
36234: LD_ADDR_VAR 0 4
36238: PUSH
36239: DOUBLE
36240: LD_INT 1
36242: DEC
36243: ST_TO_ADDR
36244: LD_VAR 0 2
36248: PUSH
36249: FOR_TO
36250: IFFALSE 36419
// begin if hackTanksCaptured [ index ] = hackLimit then
36252: LD_EXP 107
36256: PUSH
36257: LD_VAR 0 5
36261: ARRAY
36262: PUSH
36263: LD_EXP 108
36267: EQUAL
36268: IFFALSE 36272
// break ;
36270: GO 36419
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36272: LD_ADDR_EXP 110
36276: PUSH
36277: LD_EXP 110
36281: PPUSH
36282: LD_VAR 0 5
36286: PPUSH
36287: LD_EXP 110
36291: PUSH
36292: LD_VAR 0 5
36296: ARRAY
36297: PUSH
36298: LD_INT 1
36300: PLUS
36301: PPUSH
36302: CALL_OW 1
36306: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36307: LD_ADDR_EXP 107
36311: PUSH
36312: LD_EXP 107
36316: PPUSH
36317: LD_VAR 0 5
36321: PUSH
36322: LD_EXP 107
36326: PUSH
36327: LD_VAR 0 5
36331: ARRAY
36332: PUSH
36333: LD_INT 1
36335: PLUS
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PPUSH
36341: LD_VAR 0 2
36345: PUSH
36346: LD_VAR 0 4
36350: ARRAY
36351: PUSH
36352: LD_VAR 0 2
36356: PUSH
36357: LD_VAR 0 4
36361: ARRAY
36362: PPUSH
36363: CALL_OW 255
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PPUSH
36372: CALL 43970 0 3
36376: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36377: LD_VAR 0 2
36381: PUSH
36382: LD_VAR 0 4
36386: ARRAY
36387: PPUSH
36388: LD_VAR 0 1
36392: PPUSH
36393: CALL_OW 255
36397: PPUSH
36398: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36402: LD_VAR 0 2
36406: PUSH
36407: LD_VAR 0 4
36411: ARRAY
36412: PPUSH
36413: CALL_OW 141
// end ;
36417: GO 36249
36419: POP
36420: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36421: LD_VAR 0 1
36425: PPUSH
36426: LD_EXP 107
36430: PUSH
36431: LD_VAR 0 5
36435: ARRAY
36436: PUSH
36437: LD_INT 0
36439: PLUS
36440: PPUSH
36441: CALL_OW 505
// end ;
36445: LD_VAR 0 3
36449: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36450: LD_INT 0
36452: PPUSH
36453: PPUSH
36454: PPUSH
36455: PPUSH
// if not hack in hackTanks then
36456: LD_VAR 0 1
36460: PUSH
36461: LD_EXP 106
36465: IN
36466: NOT
36467: IFFALSE 36471
// exit ;
36469: GO 36711
// index := GetElementIndex ( hackTanks , hack ) ;
36471: LD_ADDR_VAR 0 4
36475: PUSH
36476: LD_EXP 106
36480: PPUSH
36481: LD_VAR 0 1
36485: PPUSH
36486: CALL 43755 0 2
36490: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36491: LD_ADDR_VAR 0 3
36495: PUSH
36496: DOUBLE
36497: LD_EXP 107
36501: PUSH
36502: LD_VAR 0 4
36506: ARRAY
36507: INC
36508: ST_TO_ADDR
36509: LD_INT 1
36511: PUSH
36512: FOR_DOWNTO
36513: IFFALSE 36685
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36515: LD_ADDR_VAR 0 5
36519: PUSH
36520: LD_EXP 107
36524: PUSH
36525: LD_VAR 0 4
36529: ARRAY
36530: PUSH
36531: LD_VAR 0 3
36535: ARRAY
36536: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36537: LD_VAR 0 5
36541: PUSH
36542: LD_INT 1
36544: ARRAY
36545: PPUSH
36546: CALL_OW 302
36550: NOT
36551: PUSH
36552: LD_VAR 0 5
36556: PUSH
36557: LD_INT 1
36559: ARRAY
36560: PPUSH
36561: CALL_OW 255
36565: PUSH
36566: LD_VAR 0 1
36570: PPUSH
36571: CALL_OW 255
36575: NONEQUAL
36576: OR
36577: IFFALSE 36683
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36579: LD_VAR 0 5
36583: PUSH
36584: LD_INT 1
36586: ARRAY
36587: PPUSH
36588: CALL_OW 305
36592: PUSH
36593: LD_VAR 0 5
36597: PUSH
36598: LD_INT 1
36600: ARRAY
36601: PPUSH
36602: CALL_OW 255
36606: PUSH
36607: LD_VAR 0 1
36611: PPUSH
36612: CALL_OW 255
36616: EQUAL
36617: AND
36618: IFFALSE 36642
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36620: LD_VAR 0 5
36624: PUSH
36625: LD_INT 1
36627: ARRAY
36628: PPUSH
36629: LD_VAR 0 5
36633: PUSH
36634: LD_INT 2
36636: ARRAY
36637: PPUSH
36638: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36642: LD_ADDR_EXP 107
36646: PUSH
36647: LD_EXP 107
36651: PPUSH
36652: LD_VAR 0 4
36656: PPUSH
36657: LD_EXP 107
36661: PUSH
36662: LD_VAR 0 4
36666: ARRAY
36667: PPUSH
36668: LD_VAR 0 3
36672: PPUSH
36673: CALL_OW 3
36677: PPUSH
36678: CALL_OW 1
36682: ST_TO_ADDR
// end ; end ;
36683: GO 36512
36685: POP
36686: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36687: LD_VAR 0 1
36691: PPUSH
36692: LD_EXP 107
36696: PUSH
36697: LD_VAR 0 4
36701: ARRAY
36702: PUSH
36703: LD_INT 0
36705: PLUS
36706: PPUSH
36707: CALL_OW 505
// end ;
36711: LD_VAR 0 2
36715: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36716: LD_INT 0
36718: PPUSH
36719: PPUSH
36720: PPUSH
36721: PPUSH
// if not hack in hackTanks then
36722: LD_VAR 0 1
36726: PUSH
36727: LD_EXP 106
36731: IN
36732: NOT
36733: IFFALSE 36737
// exit ;
36735: GO 36822
// index := GetElementIndex ( hackTanks , hack ) ;
36737: LD_ADDR_VAR 0 5
36741: PUSH
36742: LD_EXP 106
36746: PPUSH
36747: LD_VAR 0 1
36751: PPUSH
36752: CALL 43755 0 2
36756: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36757: LD_ADDR_VAR 0 4
36761: PUSH
36762: DOUBLE
36763: LD_INT 1
36765: DEC
36766: ST_TO_ADDR
36767: LD_EXP 107
36771: PUSH
36772: LD_VAR 0 5
36776: ARRAY
36777: PUSH
36778: FOR_TO
36779: IFFALSE 36820
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36781: LD_EXP 107
36785: PUSH
36786: LD_VAR 0 5
36790: ARRAY
36791: PUSH
36792: LD_VAR 0 4
36796: ARRAY
36797: PUSH
36798: LD_INT 1
36800: ARRAY
36801: PUSH
36802: LD_VAR 0 2
36806: EQUAL
36807: IFFALSE 36818
// KillUnit ( vehicle ) ;
36809: LD_VAR 0 2
36813: PPUSH
36814: CALL_OW 66
36818: GO 36778
36820: POP
36821: POP
// end ;
36822: LD_VAR 0 3
36826: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36827: LD_EXP 111
36831: NOT
36832: IFFALSE 36867
36834: GO 36836
36836: DISABLE
// begin initMiner := true ;
36837: LD_ADDR_EXP 111
36841: PUSH
36842: LD_INT 1
36844: ST_TO_ADDR
// minersList := [ ] ;
36845: LD_ADDR_EXP 112
36849: PUSH
36850: EMPTY
36851: ST_TO_ADDR
// minerMinesList := [ ] ;
36852: LD_ADDR_EXP 113
36856: PUSH
36857: EMPTY
36858: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36859: LD_ADDR_EXP 114
36863: PUSH
36864: LD_INT 5
36866: ST_TO_ADDR
// end ;
36867: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36868: LD_EXP 111
36872: PUSH
36873: LD_INT 34
36875: PUSH
36876: LD_INT 81
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PPUSH
36883: CALL_OW 69
36887: AND
36888: IFFALSE 37349
36890: GO 36892
36892: DISABLE
36893: LD_INT 0
36895: PPUSH
36896: PPUSH
36897: PPUSH
36898: PPUSH
// begin enable ;
36899: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36900: LD_ADDR_VAR 0 1
36904: PUSH
36905: LD_INT 34
36907: PUSH
36908: LD_INT 81
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PPUSH
36915: CALL_OW 69
36919: PUSH
36920: FOR_IN
36921: IFFALSE 36993
// begin if not i in minersList then
36923: LD_VAR 0 1
36927: PUSH
36928: LD_EXP 112
36932: IN
36933: NOT
36934: IFFALSE 36991
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36936: LD_ADDR_EXP 112
36940: PUSH
36941: LD_EXP 112
36945: PPUSH
36946: LD_EXP 112
36950: PUSH
36951: LD_INT 1
36953: PLUS
36954: PPUSH
36955: LD_VAR 0 1
36959: PPUSH
36960: CALL_OW 1
36964: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36965: LD_ADDR_EXP 113
36969: PUSH
36970: LD_EXP 113
36974: PPUSH
36975: LD_EXP 113
36979: PUSH
36980: LD_INT 1
36982: PLUS
36983: PPUSH
36984: EMPTY
36985: PPUSH
36986: CALL_OW 1
36990: ST_TO_ADDR
// end end ;
36991: GO 36920
36993: POP
36994: POP
// for i := minerMinesList downto 1 do
36995: LD_ADDR_VAR 0 1
36999: PUSH
37000: DOUBLE
37001: LD_EXP 113
37005: INC
37006: ST_TO_ADDR
37007: LD_INT 1
37009: PUSH
37010: FOR_DOWNTO
37011: IFFALSE 37347
// begin if IsLive ( minersList [ i ] ) then
37013: LD_EXP 112
37017: PUSH
37018: LD_VAR 0 1
37022: ARRAY
37023: PPUSH
37024: CALL_OW 300
37028: IFFALSE 37056
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37030: LD_EXP 112
37034: PUSH
37035: LD_VAR 0 1
37039: ARRAY
37040: PPUSH
37041: LD_EXP 113
37045: PUSH
37046: LD_VAR 0 1
37050: ARRAY
37051: PPUSH
37052: CALL_OW 505
// if not minerMinesList [ i ] then
37056: LD_EXP 113
37060: PUSH
37061: LD_VAR 0 1
37065: ARRAY
37066: NOT
37067: IFFALSE 37071
// continue ;
37069: GO 37010
// for j := minerMinesList [ i ] downto 1 do
37071: LD_ADDR_VAR 0 2
37075: PUSH
37076: DOUBLE
37077: LD_EXP 113
37081: PUSH
37082: LD_VAR 0 1
37086: ARRAY
37087: INC
37088: ST_TO_ADDR
37089: LD_INT 1
37091: PUSH
37092: FOR_DOWNTO
37093: IFFALSE 37343
// begin side := GetSide ( minersList [ i ] ) ;
37095: LD_ADDR_VAR 0 3
37099: PUSH
37100: LD_EXP 112
37104: PUSH
37105: LD_VAR 0 1
37109: ARRAY
37110: PPUSH
37111: CALL_OW 255
37115: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37116: LD_ADDR_VAR 0 4
37120: PUSH
37121: LD_EXP 113
37125: PUSH
37126: LD_VAR 0 1
37130: ARRAY
37131: PUSH
37132: LD_VAR 0 2
37136: ARRAY
37137: PUSH
37138: LD_INT 1
37140: ARRAY
37141: PPUSH
37142: LD_EXP 113
37146: PUSH
37147: LD_VAR 0 1
37151: ARRAY
37152: PUSH
37153: LD_VAR 0 2
37157: ARRAY
37158: PUSH
37159: LD_INT 2
37161: ARRAY
37162: PPUSH
37163: CALL_OW 428
37167: ST_TO_ADDR
// if not tmp then
37168: LD_VAR 0 4
37172: NOT
37173: IFFALSE 37177
// continue ;
37175: GO 37092
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37177: LD_VAR 0 4
37181: PUSH
37182: LD_INT 81
37184: PUSH
37185: LD_VAR 0 3
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PPUSH
37194: CALL_OW 69
37198: IN
37199: PUSH
37200: LD_EXP 113
37204: PUSH
37205: LD_VAR 0 1
37209: ARRAY
37210: PUSH
37211: LD_VAR 0 2
37215: ARRAY
37216: PUSH
37217: LD_INT 1
37219: ARRAY
37220: PPUSH
37221: LD_EXP 113
37225: PUSH
37226: LD_VAR 0 1
37230: ARRAY
37231: PUSH
37232: LD_VAR 0 2
37236: ARRAY
37237: PUSH
37238: LD_INT 2
37240: ARRAY
37241: PPUSH
37242: CALL_OW 458
37246: AND
37247: IFFALSE 37341
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37249: LD_EXP 113
37253: PUSH
37254: LD_VAR 0 1
37258: ARRAY
37259: PUSH
37260: LD_VAR 0 2
37264: ARRAY
37265: PUSH
37266: LD_INT 1
37268: ARRAY
37269: PPUSH
37270: LD_EXP 113
37274: PUSH
37275: LD_VAR 0 1
37279: ARRAY
37280: PUSH
37281: LD_VAR 0 2
37285: ARRAY
37286: PUSH
37287: LD_INT 2
37289: ARRAY
37290: PPUSH
37291: LD_VAR 0 3
37295: PPUSH
37296: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37300: LD_ADDR_EXP 113
37304: PUSH
37305: LD_EXP 113
37309: PPUSH
37310: LD_VAR 0 1
37314: PPUSH
37315: LD_EXP 113
37319: PUSH
37320: LD_VAR 0 1
37324: ARRAY
37325: PPUSH
37326: LD_VAR 0 2
37330: PPUSH
37331: CALL_OW 3
37335: PPUSH
37336: CALL_OW 1
37340: ST_TO_ADDR
// end ; end ;
37341: GO 37092
37343: POP
37344: POP
// end ;
37345: GO 37010
37347: POP
37348: POP
// end ;
37349: PPOPN 4
37351: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37352: LD_INT 0
37354: PPUSH
37355: PPUSH
// result := false ;
37356: LD_ADDR_VAR 0 4
37360: PUSH
37361: LD_INT 0
37363: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37364: LD_VAR 0 1
37368: PPUSH
37369: CALL_OW 264
37373: PUSH
37374: LD_INT 81
37376: EQUAL
37377: NOT
37378: IFFALSE 37382
// exit ;
37380: GO 37622
// index := GetElementIndex ( minersList , unit ) ;
37382: LD_ADDR_VAR 0 5
37386: PUSH
37387: LD_EXP 112
37391: PPUSH
37392: LD_VAR 0 1
37396: PPUSH
37397: CALL 43755 0 2
37401: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37402: LD_EXP 113
37406: PUSH
37407: LD_VAR 0 5
37411: ARRAY
37412: PUSH
37413: LD_EXP 114
37417: GREATEREQUAL
37418: IFFALSE 37422
// exit ;
37420: GO 37622
// ComMoveXY ( unit , x , y ) ;
37422: LD_VAR 0 1
37426: PPUSH
37427: LD_VAR 0 2
37431: PPUSH
37432: LD_VAR 0 3
37436: PPUSH
37437: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37441: LD_INT 35
37443: PPUSH
37444: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37448: LD_VAR 0 1
37452: PPUSH
37453: LD_VAR 0 2
37457: PPUSH
37458: LD_VAR 0 3
37462: PPUSH
37463: CALL 75110 0 3
37467: NOT
37468: PUSH
37469: LD_VAR 0 1
37473: PPUSH
37474: CALL_OW 314
37478: AND
37479: IFFALSE 37483
// exit ;
37481: GO 37622
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37483: LD_VAR 0 2
37487: PPUSH
37488: LD_VAR 0 3
37492: PPUSH
37493: CALL_OW 428
37497: PUSH
37498: LD_VAR 0 1
37502: EQUAL
37503: PUSH
37504: LD_VAR 0 1
37508: PPUSH
37509: CALL_OW 314
37513: NOT
37514: AND
37515: IFFALSE 37441
// PlaySoundXY ( x , y , PlantMine ) ;
37517: LD_VAR 0 2
37521: PPUSH
37522: LD_VAR 0 3
37526: PPUSH
37527: LD_STRING PlantMine
37529: PPUSH
37530: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37534: LD_VAR 0 2
37538: PPUSH
37539: LD_VAR 0 3
37543: PPUSH
37544: LD_VAR 0 1
37548: PPUSH
37549: CALL_OW 255
37553: PPUSH
37554: LD_INT 0
37556: PPUSH
37557: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37561: LD_ADDR_EXP 113
37565: PUSH
37566: LD_EXP 113
37570: PPUSH
37571: LD_VAR 0 5
37575: PUSH
37576: LD_EXP 113
37580: PUSH
37581: LD_VAR 0 5
37585: ARRAY
37586: PUSH
37587: LD_INT 1
37589: PLUS
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PPUSH
37595: LD_VAR 0 2
37599: PUSH
37600: LD_VAR 0 3
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PPUSH
37609: CALL 43970 0 3
37613: ST_TO_ADDR
// result := true ;
37614: LD_ADDR_VAR 0 4
37618: PUSH
37619: LD_INT 1
37621: ST_TO_ADDR
// end ;
37622: LD_VAR 0 4
37626: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37627: LD_INT 0
37629: PPUSH
37630: PPUSH
37631: PPUSH
// if not unit in minersList then
37632: LD_VAR 0 1
37636: PUSH
37637: LD_EXP 112
37641: IN
37642: NOT
37643: IFFALSE 37647
// exit ;
37645: GO 38039
// index := GetElementIndex ( minersList , unit ) ;
37647: LD_ADDR_VAR 0 6
37651: PUSH
37652: LD_EXP 112
37656: PPUSH
37657: LD_VAR 0 1
37661: PPUSH
37662: CALL 43755 0 2
37666: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37667: LD_ADDR_VAR 0 5
37671: PUSH
37672: DOUBLE
37673: LD_EXP 113
37677: PUSH
37678: LD_VAR 0 6
37682: ARRAY
37683: INC
37684: ST_TO_ADDR
37685: LD_INT 1
37687: PUSH
37688: FOR_DOWNTO
37689: IFFALSE 37850
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37691: LD_EXP 113
37695: PUSH
37696: LD_VAR 0 6
37700: ARRAY
37701: PUSH
37702: LD_VAR 0 5
37706: ARRAY
37707: PUSH
37708: LD_INT 1
37710: ARRAY
37711: PUSH
37712: LD_VAR 0 2
37716: EQUAL
37717: PUSH
37718: LD_EXP 113
37722: PUSH
37723: LD_VAR 0 6
37727: ARRAY
37728: PUSH
37729: LD_VAR 0 5
37733: ARRAY
37734: PUSH
37735: LD_INT 2
37737: ARRAY
37738: PUSH
37739: LD_VAR 0 3
37743: EQUAL
37744: AND
37745: IFFALSE 37848
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37747: LD_EXP 113
37751: PUSH
37752: LD_VAR 0 6
37756: ARRAY
37757: PUSH
37758: LD_VAR 0 5
37762: ARRAY
37763: PUSH
37764: LD_INT 1
37766: ARRAY
37767: PPUSH
37768: LD_EXP 113
37772: PUSH
37773: LD_VAR 0 6
37777: ARRAY
37778: PUSH
37779: LD_VAR 0 5
37783: ARRAY
37784: PUSH
37785: LD_INT 2
37787: ARRAY
37788: PPUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: CALL_OW 255
37798: PPUSH
37799: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37803: LD_ADDR_EXP 113
37807: PUSH
37808: LD_EXP 113
37812: PPUSH
37813: LD_VAR 0 6
37817: PPUSH
37818: LD_EXP 113
37822: PUSH
37823: LD_VAR 0 6
37827: ARRAY
37828: PPUSH
37829: LD_VAR 0 5
37833: PPUSH
37834: CALL_OW 3
37838: PPUSH
37839: CALL_OW 1
37843: ST_TO_ADDR
// exit ;
37844: POP
37845: POP
37846: GO 38039
// end ; end ;
37848: GO 37688
37850: POP
37851: POP
// for i := minerMinesList [ index ] downto 1 do
37852: LD_ADDR_VAR 0 5
37856: PUSH
37857: DOUBLE
37858: LD_EXP 113
37862: PUSH
37863: LD_VAR 0 6
37867: ARRAY
37868: INC
37869: ST_TO_ADDR
37870: LD_INT 1
37872: PUSH
37873: FOR_DOWNTO
37874: IFFALSE 38037
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37876: LD_EXP 113
37880: PUSH
37881: LD_VAR 0 6
37885: ARRAY
37886: PUSH
37887: LD_VAR 0 5
37891: ARRAY
37892: PUSH
37893: LD_INT 1
37895: ARRAY
37896: PPUSH
37897: LD_EXP 113
37901: PUSH
37902: LD_VAR 0 6
37906: ARRAY
37907: PUSH
37908: LD_VAR 0 5
37912: ARRAY
37913: PUSH
37914: LD_INT 2
37916: ARRAY
37917: PPUSH
37918: LD_VAR 0 2
37922: PPUSH
37923: LD_VAR 0 3
37927: PPUSH
37928: CALL_OW 298
37932: PUSH
37933: LD_INT 6
37935: LESS
37936: IFFALSE 38035
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37938: LD_EXP 113
37942: PUSH
37943: LD_VAR 0 6
37947: ARRAY
37948: PUSH
37949: LD_VAR 0 5
37953: ARRAY
37954: PUSH
37955: LD_INT 1
37957: ARRAY
37958: PPUSH
37959: LD_EXP 113
37963: PUSH
37964: LD_VAR 0 6
37968: ARRAY
37969: PUSH
37970: LD_VAR 0 5
37974: ARRAY
37975: PUSH
37976: LD_INT 2
37978: ARRAY
37979: PPUSH
37980: LD_VAR 0 1
37984: PPUSH
37985: CALL_OW 255
37989: PPUSH
37990: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37994: LD_ADDR_EXP 113
37998: PUSH
37999: LD_EXP 113
38003: PPUSH
38004: LD_VAR 0 6
38008: PPUSH
38009: LD_EXP 113
38013: PUSH
38014: LD_VAR 0 6
38018: ARRAY
38019: PPUSH
38020: LD_VAR 0 5
38024: PPUSH
38025: CALL_OW 3
38029: PPUSH
38030: CALL_OW 1
38034: ST_TO_ADDR
// end ; end ;
38035: GO 37873
38037: POP
38038: POP
// end ;
38039: LD_VAR 0 4
38043: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38044: LD_INT 0
38046: PPUSH
38047: PPUSH
38048: PPUSH
38049: PPUSH
38050: PPUSH
38051: PPUSH
38052: PPUSH
38053: PPUSH
38054: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38055: LD_VAR 0 1
38059: PPUSH
38060: CALL_OW 264
38064: PUSH
38065: LD_INT 81
38067: EQUAL
38068: NOT
38069: PUSH
38070: LD_VAR 0 1
38074: PUSH
38075: LD_EXP 112
38079: IN
38080: NOT
38081: OR
38082: IFFALSE 38086
// exit ;
38084: GO 38408
// index := GetElementIndex ( minersList , unit ) ;
38086: LD_ADDR_VAR 0 6
38090: PUSH
38091: LD_EXP 112
38095: PPUSH
38096: LD_VAR 0 1
38100: PPUSH
38101: CALL 43755 0 2
38105: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38106: LD_ADDR_VAR 0 8
38110: PUSH
38111: LD_EXP 114
38115: PUSH
38116: LD_EXP 113
38120: PUSH
38121: LD_VAR 0 6
38125: ARRAY
38126: MINUS
38127: ST_TO_ADDR
// if not minesFreeAmount then
38128: LD_VAR 0 8
38132: NOT
38133: IFFALSE 38137
// exit ;
38135: GO 38408
// tmp := [ ] ;
38137: LD_ADDR_VAR 0 7
38141: PUSH
38142: EMPTY
38143: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38144: LD_ADDR_VAR 0 5
38148: PUSH
38149: DOUBLE
38150: LD_INT 1
38152: DEC
38153: ST_TO_ADDR
38154: LD_VAR 0 8
38158: PUSH
38159: FOR_TO
38160: IFFALSE 38355
// begin _d := rand ( 0 , 5 ) ;
38162: LD_ADDR_VAR 0 11
38166: PUSH
38167: LD_INT 0
38169: PPUSH
38170: LD_INT 5
38172: PPUSH
38173: CALL_OW 12
38177: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38178: LD_ADDR_VAR 0 12
38182: PUSH
38183: LD_INT 2
38185: PPUSH
38186: LD_INT 6
38188: PPUSH
38189: CALL_OW 12
38193: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38194: LD_ADDR_VAR 0 9
38198: PUSH
38199: LD_VAR 0 2
38203: PPUSH
38204: LD_VAR 0 11
38208: PPUSH
38209: LD_VAR 0 12
38213: PPUSH
38214: CALL_OW 272
38218: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38219: LD_ADDR_VAR 0 10
38223: PUSH
38224: LD_VAR 0 3
38228: PPUSH
38229: LD_VAR 0 11
38233: PPUSH
38234: LD_VAR 0 12
38238: PPUSH
38239: CALL_OW 273
38243: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38244: LD_VAR 0 9
38248: PPUSH
38249: LD_VAR 0 10
38253: PPUSH
38254: CALL_OW 488
38258: PUSH
38259: LD_VAR 0 9
38263: PUSH
38264: LD_VAR 0 10
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_VAR 0 7
38277: IN
38278: NOT
38279: AND
38280: PUSH
38281: LD_VAR 0 9
38285: PPUSH
38286: LD_VAR 0 10
38290: PPUSH
38291: CALL_OW 458
38295: NOT
38296: AND
38297: IFFALSE 38339
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38299: LD_ADDR_VAR 0 7
38303: PUSH
38304: LD_VAR 0 7
38308: PPUSH
38309: LD_VAR 0 7
38313: PUSH
38314: LD_INT 1
38316: PLUS
38317: PPUSH
38318: LD_VAR 0 9
38322: PUSH
38323: LD_VAR 0 10
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PPUSH
38332: CALL_OW 1
38336: ST_TO_ADDR
38337: GO 38353
// i := i - 1 ;
38339: LD_ADDR_VAR 0 5
38343: PUSH
38344: LD_VAR 0 5
38348: PUSH
38349: LD_INT 1
38351: MINUS
38352: ST_TO_ADDR
// end ;
38353: GO 38159
38355: POP
38356: POP
// for i in tmp do
38357: LD_ADDR_VAR 0 5
38361: PUSH
38362: LD_VAR 0 7
38366: PUSH
38367: FOR_IN
38368: IFFALSE 38406
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38370: LD_VAR 0 1
38374: PPUSH
38375: LD_VAR 0 5
38379: PUSH
38380: LD_INT 1
38382: ARRAY
38383: PPUSH
38384: LD_VAR 0 5
38388: PUSH
38389: LD_INT 2
38391: ARRAY
38392: PPUSH
38393: CALL 37352 0 3
38397: NOT
38398: IFFALSE 38404
// exit ;
38400: POP
38401: POP
38402: GO 38408
38404: GO 38367
38406: POP
38407: POP
// end ;
38408: LD_VAR 0 4
38412: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38413: LD_INT 0
38415: PPUSH
38416: PPUSH
38417: PPUSH
38418: PPUSH
38419: PPUSH
38420: PPUSH
38421: PPUSH
// if not GetClass ( unit ) = class_sniper then
38422: LD_VAR 0 1
38426: PPUSH
38427: CALL_OW 257
38431: PUSH
38432: LD_INT 5
38434: EQUAL
38435: NOT
38436: IFFALSE 38440
// exit ;
38438: GO 38828
// dist := 8 ;
38440: LD_ADDR_VAR 0 5
38444: PUSH
38445: LD_INT 8
38447: ST_TO_ADDR
// viewRange := 12 ;
38448: LD_ADDR_VAR 0 7
38452: PUSH
38453: LD_INT 12
38455: ST_TO_ADDR
// side := GetSide ( unit ) ;
38456: LD_ADDR_VAR 0 6
38460: PUSH
38461: LD_VAR 0 1
38465: PPUSH
38466: CALL_OW 255
38470: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38471: LD_INT 61
38473: PPUSH
38474: LD_VAR 0 6
38478: PPUSH
38479: CALL_OW 321
38483: PUSH
38484: LD_INT 2
38486: EQUAL
38487: IFFALSE 38497
// viewRange := 16 ;
38489: LD_ADDR_VAR 0 7
38493: PUSH
38494: LD_INT 16
38496: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38497: LD_VAR 0 1
38501: PPUSH
38502: LD_VAR 0 2
38506: PPUSH
38507: LD_VAR 0 3
38511: PPUSH
38512: CALL_OW 297
38516: PUSH
38517: LD_VAR 0 5
38521: GREATER
38522: IFFALSE 38601
// begin ComMoveXY ( unit , x , y ) ;
38524: LD_VAR 0 1
38528: PPUSH
38529: LD_VAR 0 2
38533: PPUSH
38534: LD_VAR 0 3
38538: PPUSH
38539: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38543: LD_INT 35
38545: PPUSH
38546: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38550: LD_VAR 0 1
38554: PPUSH
38555: LD_VAR 0 2
38559: PPUSH
38560: LD_VAR 0 3
38564: PPUSH
38565: CALL 75110 0 3
38569: NOT
38570: IFFALSE 38574
// exit ;
38572: GO 38828
// until GetDistUnitXY ( unit , x , y ) < dist ;
38574: LD_VAR 0 1
38578: PPUSH
38579: LD_VAR 0 2
38583: PPUSH
38584: LD_VAR 0 3
38588: PPUSH
38589: CALL_OW 297
38593: PUSH
38594: LD_VAR 0 5
38598: LESS
38599: IFFALSE 38543
// end ; ComTurnXY ( unit , x , y ) ;
38601: LD_VAR 0 1
38605: PPUSH
38606: LD_VAR 0 2
38610: PPUSH
38611: LD_VAR 0 3
38615: PPUSH
38616: CALL_OW 118
// wait ( 5 ) ;
38620: LD_INT 5
38622: PPUSH
38623: CALL_OW 67
// _d := GetDir ( unit ) ;
38627: LD_ADDR_VAR 0 10
38631: PUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: CALL_OW 254
38641: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38642: LD_ADDR_VAR 0 8
38646: PUSH
38647: LD_VAR 0 1
38651: PPUSH
38652: CALL_OW 250
38656: PPUSH
38657: LD_VAR 0 10
38661: PPUSH
38662: LD_VAR 0 5
38666: PPUSH
38667: CALL_OW 272
38671: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38672: LD_ADDR_VAR 0 9
38676: PUSH
38677: LD_VAR 0 1
38681: PPUSH
38682: CALL_OW 251
38686: PPUSH
38687: LD_VAR 0 10
38691: PPUSH
38692: LD_VAR 0 5
38696: PPUSH
38697: CALL_OW 273
38701: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38702: LD_VAR 0 8
38706: PPUSH
38707: LD_VAR 0 9
38711: PPUSH
38712: CALL_OW 488
38716: NOT
38717: IFFALSE 38721
// exit ;
38719: GO 38828
// ComAnimCustom ( unit , 1 ) ;
38721: LD_VAR 0 1
38725: PPUSH
38726: LD_INT 1
38728: PPUSH
38729: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38733: LD_VAR 0 8
38737: PPUSH
38738: LD_VAR 0 9
38742: PPUSH
38743: LD_VAR 0 6
38747: PPUSH
38748: LD_VAR 0 7
38752: PPUSH
38753: CALL_OW 330
// repeat wait ( 1 ) ;
38757: LD_INT 1
38759: PPUSH
38760: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38764: LD_VAR 0 1
38768: PPUSH
38769: CALL_OW 316
38773: PUSH
38774: LD_VAR 0 1
38778: PPUSH
38779: CALL_OW 314
38783: OR
38784: PUSH
38785: LD_VAR 0 1
38789: PPUSH
38790: CALL_OW 302
38794: NOT
38795: OR
38796: PUSH
38797: LD_VAR 0 1
38801: PPUSH
38802: CALL_OW 301
38806: OR
38807: IFFALSE 38757
// RemoveSeeing ( _x , _y , side ) ;
38809: LD_VAR 0 8
38813: PPUSH
38814: LD_VAR 0 9
38818: PPUSH
38819: LD_VAR 0 6
38823: PPUSH
38824: CALL_OW 331
// end ; end_of_file
38828: LD_VAR 0 4
38832: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38833: LD_INT 0
38835: PPUSH
38836: PPUSH
// if exist_mode then
38837: LD_VAR 0 2
38841: IFFALSE 38866
// unit := CreateCharacter ( prefix & ident ) else
38843: LD_ADDR_VAR 0 5
38847: PUSH
38848: LD_VAR 0 3
38852: PUSH
38853: LD_VAR 0 1
38857: STR
38858: PPUSH
38859: CALL_OW 34
38863: ST_TO_ADDR
38864: GO 38881
// unit := NewCharacter ( ident ) ;
38866: LD_ADDR_VAR 0 5
38870: PUSH
38871: LD_VAR 0 1
38875: PPUSH
38876: CALL_OW 25
38880: ST_TO_ADDR
// result := unit ;
38881: LD_ADDR_VAR 0 4
38885: PUSH
38886: LD_VAR 0 5
38890: ST_TO_ADDR
// end ;
38891: LD_VAR 0 4
38895: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38896: LD_INT 0
38898: PPUSH
38899: PPUSH
// if not side or not nation then
38900: LD_VAR 0 1
38904: NOT
38905: PUSH
38906: LD_VAR 0 2
38910: NOT
38911: OR
38912: IFFALSE 38916
// exit ;
38914: GO 39684
// case nation of nation_american :
38916: LD_VAR 0 2
38920: PUSH
38921: LD_INT 1
38923: DOUBLE
38924: EQUAL
38925: IFTRUE 38929
38927: GO 39143
38929: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38930: LD_ADDR_VAR 0 4
38934: PUSH
38935: LD_INT 35
38937: PUSH
38938: LD_INT 45
38940: PUSH
38941: LD_INT 46
38943: PUSH
38944: LD_INT 47
38946: PUSH
38947: LD_INT 82
38949: PUSH
38950: LD_INT 83
38952: PUSH
38953: LD_INT 84
38955: PUSH
38956: LD_INT 85
38958: PUSH
38959: LD_INT 86
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 2
38967: PUSH
38968: LD_INT 6
38970: PUSH
38971: LD_INT 15
38973: PUSH
38974: LD_INT 16
38976: PUSH
38977: LD_INT 7
38979: PUSH
38980: LD_INT 12
38982: PUSH
38983: LD_INT 13
38985: PUSH
38986: LD_INT 10
38988: PUSH
38989: LD_INT 14
38991: PUSH
38992: LD_INT 20
38994: PUSH
38995: LD_INT 21
38997: PUSH
38998: LD_INT 22
39000: PUSH
39001: LD_INT 25
39003: PUSH
39004: LD_INT 32
39006: PUSH
39007: LD_INT 27
39009: PUSH
39010: LD_INT 36
39012: PUSH
39013: LD_INT 69
39015: PUSH
39016: LD_INT 39
39018: PUSH
39019: LD_INT 34
39021: PUSH
39022: LD_INT 40
39024: PUSH
39025: LD_INT 48
39027: PUSH
39028: LD_INT 49
39030: PUSH
39031: LD_INT 50
39033: PUSH
39034: LD_INT 51
39036: PUSH
39037: LD_INT 52
39039: PUSH
39040: LD_INT 53
39042: PUSH
39043: LD_INT 54
39045: PUSH
39046: LD_INT 55
39048: PUSH
39049: LD_INT 56
39051: PUSH
39052: LD_INT 57
39054: PUSH
39055: LD_INT 58
39057: PUSH
39058: LD_INT 59
39060: PUSH
39061: LD_INT 60
39063: PUSH
39064: LD_INT 61
39066: PUSH
39067: LD_INT 62
39069: PUSH
39070: LD_INT 80
39072: PUSH
39073: LD_INT 82
39075: PUSH
39076: LD_INT 83
39078: PUSH
39079: LD_INT 84
39081: PUSH
39082: LD_INT 85
39084: PUSH
39085: LD_INT 86
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: ST_TO_ADDR
39141: GO 39608
39143: LD_INT 2
39145: DOUBLE
39146: EQUAL
39147: IFTRUE 39151
39149: GO 39377
39151: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39152: LD_ADDR_VAR 0 4
39156: PUSH
39157: LD_INT 35
39159: PUSH
39160: LD_INT 45
39162: PUSH
39163: LD_INT 46
39165: PUSH
39166: LD_INT 47
39168: PUSH
39169: LD_INT 82
39171: PUSH
39172: LD_INT 83
39174: PUSH
39175: LD_INT 84
39177: PUSH
39178: LD_INT 85
39180: PUSH
39181: LD_INT 87
39183: PUSH
39184: LD_INT 70
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: LD_INT 11
39192: PUSH
39193: LD_INT 3
39195: PUSH
39196: LD_INT 4
39198: PUSH
39199: LD_INT 5
39201: PUSH
39202: LD_INT 6
39204: PUSH
39205: LD_INT 15
39207: PUSH
39208: LD_INT 18
39210: PUSH
39211: LD_INT 7
39213: PUSH
39214: LD_INT 17
39216: PUSH
39217: LD_INT 8
39219: PUSH
39220: LD_INT 20
39222: PUSH
39223: LD_INT 21
39225: PUSH
39226: LD_INT 22
39228: PUSH
39229: LD_INT 72
39231: PUSH
39232: LD_INT 26
39234: PUSH
39235: LD_INT 69
39237: PUSH
39238: LD_INT 39
39240: PUSH
39241: LD_INT 40
39243: PUSH
39244: LD_INT 41
39246: PUSH
39247: LD_INT 42
39249: PUSH
39250: LD_INT 43
39252: PUSH
39253: LD_INT 48
39255: PUSH
39256: LD_INT 49
39258: PUSH
39259: LD_INT 50
39261: PUSH
39262: LD_INT 51
39264: PUSH
39265: LD_INT 52
39267: PUSH
39268: LD_INT 53
39270: PUSH
39271: LD_INT 54
39273: PUSH
39274: LD_INT 55
39276: PUSH
39277: LD_INT 56
39279: PUSH
39280: LD_INT 60
39282: PUSH
39283: LD_INT 61
39285: PUSH
39286: LD_INT 62
39288: PUSH
39289: LD_INT 66
39291: PUSH
39292: LD_INT 67
39294: PUSH
39295: LD_INT 68
39297: PUSH
39298: LD_INT 81
39300: PUSH
39301: LD_INT 82
39303: PUSH
39304: LD_INT 83
39306: PUSH
39307: LD_INT 84
39309: PUSH
39310: LD_INT 85
39312: PUSH
39313: LD_INT 87
39315: PUSH
39316: LD_INT 88
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: ST_TO_ADDR
39375: GO 39608
39377: LD_INT 3
39379: DOUBLE
39380: EQUAL
39381: IFTRUE 39385
39383: GO 39607
39385: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39386: LD_ADDR_VAR 0 4
39390: PUSH
39391: LD_INT 46
39393: PUSH
39394: LD_INT 47
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: LD_INT 82
39405: PUSH
39406: LD_INT 83
39408: PUSH
39409: LD_INT 84
39411: PUSH
39412: LD_INT 85
39414: PUSH
39415: LD_INT 86
39417: PUSH
39418: LD_INT 11
39420: PUSH
39421: LD_INT 9
39423: PUSH
39424: LD_INT 20
39426: PUSH
39427: LD_INT 19
39429: PUSH
39430: LD_INT 21
39432: PUSH
39433: LD_INT 24
39435: PUSH
39436: LD_INT 22
39438: PUSH
39439: LD_INT 25
39441: PUSH
39442: LD_INT 28
39444: PUSH
39445: LD_INT 29
39447: PUSH
39448: LD_INT 30
39450: PUSH
39451: LD_INT 31
39453: PUSH
39454: LD_INT 37
39456: PUSH
39457: LD_INT 38
39459: PUSH
39460: LD_INT 32
39462: PUSH
39463: LD_INT 27
39465: PUSH
39466: LD_INT 33
39468: PUSH
39469: LD_INT 69
39471: PUSH
39472: LD_INT 39
39474: PUSH
39475: LD_INT 34
39477: PUSH
39478: LD_INT 40
39480: PUSH
39481: LD_INT 71
39483: PUSH
39484: LD_INT 23
39486: PUSH
39487: LD_INT 44
39489: PUSH
39490: LD_INT 48
39492: PUSH
39493: LD_INT 49
39495: PUSH
39496: LD_INT 50
39498: PUSH
39499: LD_INT 51
39501: PUSH
39502: LD_INT 52
39504: PUSH
39505: LD_INT 53
39507: PUSH
39508: LD_INT 54
39510: PUSH
39511: LD_INT 55
39513: PUSH
39514: LD_INT 56
39516: PUSH
39517: LD_INT 57
39519: PUSH
39520: LD_INT 58
39522: PUSH
39523: LD_INT 59
39525: PUSH
39526: LD_INT 63
39528: PUSH
39529: LD_INT 64
39531: PUSH
39532: LD_INT 65
39534: PUSH
39535: LD_INT 82
39537: PUSH
39538: LD_INT 83
39540: PUSH
39541: LD_INT 84
39543: PUSH
39544: LD_INT 85
39546: PUSH
39547: LD_INT 86
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: ST_TO_ADDR
39605: GO 39608
39607: POP
// if state > - 1 and state < 3 then
39608: LD_VAR 0 3
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: GREATER
39617: PUSH
39618: LD_VAR 0 3
39622: PUSH
39623: LD_INT 3
39625: LESS
39626: AND
39627: IFFALSE 39684
// for i in result do
39629: LD_ADDR_VAR 0 5
39633: PUSH
39634: LD_VAR 0 4
39638: PUSH
39639: FOR_IN
39640: IFFALSE 39682
// if GetTech ( i , side ) <> state then
39642: LD_VAR 0 5
39646: PPUSH
39647: LD_VAR 0 1
39651: PPUSH
39652: CALL_OW 321
39656: PUSH
39657: LD_VAR 0 3
39661: NONEQUAL
39662: IFFALSE 39680
// result := result diff i ;
39664: LD_ADDR_VAR 0 4
39668: PUSH
39669: LD_VAR 0 4
39673: PUSH
39674: LD_VAR 0 5
39678: DIFF
39679: ST_TO_ADDR
39680: GO 39639
39682: POP
39683: POP
// end ;
39684: LD_VAR 0 4
39688: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39689: LD_INT 0
39691: PPUSH
39692: PPUSH
39693: PPUSH
// result := true ;
39694: LD_ADDR_VAR 0 3
39698: PUSH
39699: LD_INT 1
39701: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39702: LD_ADDR_VAR 0 5
39706: PUSH
39707: LD_VAR 0 2
39711: PPUSH
39712: CALL_OW 480
39716: ST_TO_ADDR
// if not tmp then
39717: LD_VAR 0 5
39721: NOT
39722: IFFALSE 39726
// exit ;
39724: GO 39775
// for i in tmp do
39726: LD_ADDR_VAR 0 4
39730: PUSH
39731: LD_VAR 0 5
39735: PUSH
39736: FOR_IN
39737: IFFALSE 39773
// if GetTech ( i , side ) <> state_researched then
39739: LD_VAR 0 4
39743: PPUSH
39744: LD_VAR 0 1
39748: PPUSH
39749: CALL_OW 321
39753: PUSH
39754: LD_INT 2
39756: NONEQUAL
39757: IFFALSE 39771
// begin result := false ;
39759: LD_ADDR_VAR 0 3
39763: PUSH
39764: LD_INT 0
39766: ST_TO_ADDR
// exit ;
39767: POP
39768: POP
39769: GO 39775
// end ;
39771: GO 39736
39773: POP
39774: POP
// end ;
39775: LD_VAR 0 3
39779: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39780: LD_INT 0
39782: PPUSH
39783: PPUSH
39784: PPUSH
39785: PPUSH
39786: PPUSH
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39795: LD_VAR 0 1
39799: NOT
39800: PUSH
39801: LD_VAR 0 1
39805: PPUSH
39806: CALL_OW 257
39810: PUSH
39811: LD_INT 9
39813: NONEQUAL
39814: OR
39815: IFFALSE 39819
// exit ;
39817: GO 40392
// side := GetSide ( unit ) ;
39819: LD_ADDR_VAR 0 9
39823: PUSH
39824: LD_VAR 0 1
39828: PPUSH
39829: CALL_OW 255
39833: ST_TO_ADDR
// tech_space := tech_spacanom ;
39834: LD_ADDR_VAR 0 12
39838: PUSH
39839: LD_INT 29
39841: ST_TO_ADDR
// tech_time := tech_taurad ;
39842: LD_ADDR_VAR 0 13
39846: PUSH
39847: LD_INT 28
39849: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39850: LD_ADDR_VAR 0 11
39854: PUSH
39855: LD_VAR 0 1
39859: PPUSH
39860: CALL_OW 310
39864: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39865: LD_VAR 0 11
39869: PPUSH
39870: CALL_OW 247
39874: PUSH
39875: LD_INT 2
39877: EQUAL
39878: IFFALSE 39882
// exit ;
39880: GO 40392
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39882: LD_ADDR_VAR 0 8
39886: PUSH
39887: LD_INT 81
39889: PUSH
39890: LD_VAR 0 9
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 3
39901: PUSH
39902: LD_INT 21
39904: PUSH
39905: LD_INT 3
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PPUSH
39920: CALL_OW 69
39924: ST_TO_ADDR
// if not tmp then
39925: LD_VAR 0 8
39929: NOT
39930: IFFALSE 39934
// exit ;
39932: GO 40392
// if in_unit then
39934: LD_VAR 0 11
39938: IFFALSE 39962
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39940: LD_ADDR_VAR 0 10
39944: PUSH
39945: LD_VAR 0 8
39949: PPUSH
39950: LD_VAR 0 11
39954: PPUSH
39955: CALL_OW 74
39959: ST_TO_ADDR
39960: GO 39982
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39962: LD_ADDR_VAR 0 10
39966: PUSH
39967: LD_VAR 0 8
39971: PPUSH
39972: LD_VAR 0 1
39976: PPUSH
39977: CALL_OW 74
39981: ST_TO_ADDR
// if not enemy then
39982: LD_VAR 0 10
39986: NOT
39987: IFFALSE 39991
// exit ;
39989: GO 40392
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39991: LD_VAR 0 11
39995: PUSH
39996: LD_VAR 0 11
40000: PPUSH
40001: LD_VAR 0 10
40005: PPUSH
40006: CALL_OW 296
40010: PUSH
40011: LD_INT 13
40013: GREATER
40014: AND
40015: PUSH
40016: LD_VAR 0 1
40020: PPUSH
40021: LD_VAR 0 10
40025: PPUSH
40026: CALL_OW 296
40030: PUSH
40031: LD_INT 12
40033: GREATER
40034: OR
40035: IFFALSE 40039
// exit ;
40037: GO 40392
// missile := [ 1 ] ;
40039: LD_ADDR_VAR 0 14
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: EMPTY
40048: LIST
40049: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40050: LD_VAR 0 9
40054: PPUSH
40055: LD_VAR 0 12
40059: PPUSH
40060: CALL_OW 325
40064: IFFALSE 40093
// missile := Replace ( missile , missile + 1 , 2 ) ;
40066: LD_ADDR_VAR 0 14
40070: PUSH
40071: LD_VAR 0 14
40075: PPUSH
40076: LD_VAR 0 14
40080: PUSH
40081: LD_INT 1
40083: PLUS
40084: PPUSH
40085: LD_INT 2
40087: PPUSH
40088: CALL_OW 1
40092: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40093: LD_VAR 0 9
40097: PPUSH
40098: LD_VAR 0 13
40102: PPUSH
40103: CALL_OW 325
40107: PUSH
40108: LD_VAR 0 10
40112: PPUSH
40113: CALL_OW 255
40117: PPUSH
40118: LD_VAR 0 13
40122: PPUSH
40123: CALL_OW 325
40127: NOT
40128: AND
40129: IFFALSE 40158
// missile := Replace ( missile , missile + 1 , 3 ) ;
40131: LD_ADDR_VAR 0 14
40135: PUSH
40136: LD_VAR 0 14
40140: PPUSH
40141: LD_VAR 0 14
40145: PUSH
40146: LD_INT 1
40148: PLUS
40149: PPUSH
40150: LD_INT 3
40152: PPUSH
40153: CALL_OW 1
40157: ST_TO_ADDR
// if missile < 2 then
40158: LD_VAR 0 14
40162: PUSH
40163: LD_INT 2
40165: LESS
40166: IFFALSE 40170
// exit ;
40168: GO 40392
// x := GetX ( enemy ) ;
40170: LD_ADDR_VAR 0 4
40174: PUSH
40175: LD_VAR 0 10
40179: PPUSH
40180: CALL_OW 250
40184: ST_TO_ADDR
// y := GetY ( enemy ) ;
40185: LD_ADDR_VAR 0 5
40189: PUSH
40190: LD_VAR 0 10
40194: PPUSH
40195: CALL_OW 251
40199: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40200: LD_ADDR_VAR 0 6
40204: PUSH
40205: LD_VAR 0 4
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PPUSH
40214: LD_INT 1
40216: PPUSH
40217: CALL_OW 12
40221: PLUS
40222: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40223: LD_ADDR_VAR 0 7
40227: PUSH
40228: LD_VAR 0 5
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PPUSH
40237: LD_INT 1
40239: PPUSH
40240: CALL_OW 12
40244: PLUS
40245: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40246: LD_VAR 0 6
40250: PPUSH
40251: LD_VAR 0 7
40255: PPUSH
40256: CALL_OW 488
40260: NOT
40261: IFFALSE 40283
// begin _x := x ;
40263: LD_ADDR_VAR 0 6
40267: PUSH
40268: LD_VAR 0 4
40272: ST_TO_ADDR
// _y := y ;
40273: LD_ADDR_VAR 0 7
40277: PUSH
40278: LD_VAR 0 5
40282: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40283: LD_ADDR_VAR 0 3
40287: PUSH
40288: LD_INT 1
40290: PPUSH
40291: LD_VAR 0 14
40295: PPUSH
40296: CALL_OW 12
40300: ST_TO_ADDR
// case i of 1 :
40301: LD_VAR 0 3
40305: PUSH
40306: LD_INT 1
40308: DOUBLE
40309: EQUAL
40310: IFTRUE 40314
40312: GO 40331
40314: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40315: LD_VAR 0 1
40319: PPUSH
40320: LD_VAR 0 10
40324: PPUSH
40325: CALL_OW 115
40329: GO 40392
40331: LD_INT 2
40333: DOUBLE
40334: EQUAL
40335: IFTRUE 40339
40337: GO 40361
40339: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40340: LD_VAR 0 1
40344: PPUSH
40345: LD_VAR 0 6
40349: PPUSH
40350: LD_VAR 0 7
40354: PPUSH
40355: CALL_OW 153
40359: GO 40392
40361: LD_INT 3
40363: DOUBLE
40364: EQUAL
40365: IFTRUE 40369
40367: GO 40391
40369: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40370: LD_VAR 0 1
40374: PPUSH
40375: LD_VAR 0 6
40379: PPUSH
40380: LD_VAR 0 7
40384: PPUSH
40385: CALL_OW 154
40389: GO 40392
40391: POP
// end ;
40392: LD_VAR 0 2
40396: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40397: LD_INT 0
40399: PPUSH
40400: PPUSH
40401: PPUSH
40402: PPUSH
40403: PPUSH
40404: PPUSH
// if not unit or not building then
40405: LD_VAR 0 1
40409: NOT
40410: PUSH
40411: LD_VAR 0 2
40415: NOT
40416: OR
40417: IFFALSE 40421
// exit ;
40419: GO 40579
// x := GetX ( building ) ;
40421: LD_ADDR_VAR 0 5
40425: PUSH
40426: LD_VAR 0 2
40430: PPUSH
40431: CALL_OW 250
40435: ST_TO_ADDR
// y := GetY ( building ) ;
40436: LD_ADDR_VAR 0 6
40440: PUSH
40441: LD_VAR 0 2
40445: PPUSH
40446: CALL_OW 251
40450: ST_TO_ADDR
// for i = 0 to 5 do
40451: LD_ADDR_VAR 0 4
40455: PUSH
40456: DOUBLE
40457: LD_INT 0
40459: DEC
40460: ST_TO_ADDR
40461: LD_INT 5
40463: PUSH
40464: FOR_TO
40465: IFFALSE 40577
// begin _x := ShiftX ( x , i , 3 ) ;
40467: LD_ADDR_VAR 0 7
40471: PUSH
40472: LD_VAR 0 5
40476: PPUSH
40477: LD_VAR 0 4
40481: PPUSH
40482: LD_INT 3
40484: PPUSH
40485: CALL_OW 272
40489: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40490: LD_ADDR_VAR 0 8
40494: PUSH
40495: LD_VAR 0 6
40499: PPUSH
40500: LD_VAR 0 4
40504: PPUSH
40505: LD_INT 3
40507: PPUSH
40508: CALL_OW 273
40512: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40513: LD_VAR 0 7
40517: PPUSH
40518: LD_VAR 0 8
40522: PPUSH
40523: CALL_OW 488
40527: NOT
40528: IFFALSE 40532
// continue ;
40530: GO 40464
// if HexInfo ( _x , _y ) = 0 then
40532: LD_VAR 0 7
40536: PPUSH
40537: LD_VAR 0 8
40541: PPUSH
40542: CALL_OW 428
40546: PUSH
40547: LD_INT 0
40549: EQUAL
40550: IFFALSE 40575
// begin ComMoveXY ( unit , _x , _y ) ;
40552: LD_VAR 0 1
40556: PPUSH
40557: LD_VAR 0 7
40561: PPUSH
40562: LD_VAR 0 8
40566: PPUSH
40567: CALL_OW 111
// exit ;
40571: POP
40572: POP
40573: GO 40579
// end ; end ;
40575: GO 40464
40577: POP
40578: POP
// end ;
40579: LD_VAR 0 3
40583: RET
// export function ScanBase ( side , base_area ) ; begin
40584: LD_INT 0
40586: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40587: LD_ADDR_VAR 0 3
40591: PUSH
40592: LD_VAR 0 2
40596: PPUSH
40597: LD_INT 81
40599: PUSH
40600: LD_VAR 0 1
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PPUSH
40609: CALL_OW 70
40613: ST_TO_ADDR
// end ;
40614: LD_VAR 0 3
40618: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40619: LD_INT 0
40621: PPUSH
40622: PPUSH
40623: PPUSH
40624: PPUSH
// result := false ;
40625: LD_ADDR_VAR 0 2
40629: PUSH
40630: LD_INT 0
40632: ST_TO_ADDR
// side := GetSide ( unit ) ;
40633: LD_ADDR_VAR 0 3
40637: PUSH
40638: LD_VAR 0 1
40642: PPUSH
40643: CALL_OW 255
40647: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40648: LD_ADDR_VAR 0 4
40652: PUSH
40653: LD_VAR 0 1
40657: PPUSH
40658: CALL_OW 248
40662: ST_TO_ADDR
// case nat of 1 :
40663: LD_VAR 0 4
40667: PUSH
40668: LD_INT 1
40670: DOUBLE
40671: EQUAL
40672: IFTRUE 40676
40674: GO 40687
40676: POP
// tech := tech_lassight ; 2 :
40677: LD_ADDR_VAR 0 5
40681: PUSH
40682: LD_INT 12
40684: ST_TO_ADDR
40685: GO 40726
40687: LD_INT 2
40689: DOUBLE
40690: EQUAL
40691: IFTRUE 40695
40693: GO 40706
40695: POP
// tech := tech_mortar ; 3 :
40696: LD_ADDR_VAR 0 5
40700: PUSH
40701: LD_INT 41
40703: ST_TO_ADDR
40704: GO 40726
40706: LD_INT 3
40708: DOUBLE
40709: EQUAL
40710: IFTRUE 40714
40712: GO 40725
40714: POP
// tech := tech_bazooka ; end ;
40715: LD_ADDR_VAR 0 5
40719: PUSH
40720: LD_INT 44
40722: ST_TO_ADDR
40723: GO 40726
40725: POP
// if Researched ( side , tech ) then
40726: LD_VAR 0 3
40730: PPUSH
40731: LD_VAR 0 5
40735: PPUSH
40736: CALL_OW 325
40740: IFFALSE 40767
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40742: LD_ADDR_VAR 0 2
40746: PUSH
40747: LD_INT 5
40749: PUSH
40750: LD_INT 8
40752: PUSH
40753: LD_INT 9
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: LIST
40760: PUSH
40761: LD_VAR 0 4
40765: ARRAY
40766: ST_TO_ADDR
// end ;
40767: LD_VAR 0 2
40771: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40772: LD_INT 0
40774: PPUSH
40775: PPUSH
40776: PPUSH
// if not mines then
40777: LD_VAR 0 2
40781: NOT
40782: IFFALSE 40786
// exit ;
40784: GO 40930
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40786: LD_ADDR_VAR 0 5
40790: PUSH
40791: LD_INT 81
40793: PUSH
40794: LD_VAR 0 1
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 3
40805: PUSH
40806: LD_INT 21
40808: PUSH
40809: LD_INT 3
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PPUSH
40824: CALL_OW 69
40828: ST_TO_ADDR
// for i in mines do
40829: LD_ADDR_VAR 0 4
40833: PUSH
40834: LD_VAR 0 2
40838: PUSH
40839: FOR_IN
40840: IFFALSE 40928
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40842: LD_VAR 0 4
40846: PUSH
40847: LD_INT 1
40849: ARRAY
40850: PPUSH
40851: LD_VAR 0 4
40855: PUSH
40856: LD_INT 2
40858: ARRAY
40859: PPUSH
40860: CALL_OW 458
40864: NOT
40865: IFFALSE 40869
// continue ;
40867: GO 40839
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40869: LD_VAR 0 4
40873: PUSH
40874: LD_INT 1
40876: ARRAY
40877: PPUSH
40878: LD_VAR 0 4
40882: PUSH
40883: LD_INT 2
40885: ARRAY
40886: PPUSH
40887: CALL_OW 428
40891: PUSH
40892: LD_VAR 0 5
40896: IN
40897: IFFALSE 40926
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40899: LD_VAR 0 4
40903: PUSH
40904: LD_INT 1
40906: ARRAY
40907: PPUSH
40908: LD_VAR 0 4
40912: PUSH
40913: LD_INT 2
40915: ARRAY
40916: PPUSH
40917: LD_VAR 0 1
40921: PPUSH
40922: CALL_OW 456
// end ;
40926: GO 40839
40928: POP
40929: POP
// end ;
40930: LD_VAR 0 3
40934: RET
// export function Count ( array ) ; var i ; begin
40935: LD_INT 0
40937: PPUSH
40938: PPUSH
// result := 0 ;
40939: LD_ADDR_VAR 0 2
40943: PUSH
40944: LD_INT 0
40946: ST_TO_ADDR
// for i in array do
40947: LD_ADDR_VAR 0 3
40951: PUSH
40952: LD_VAR 0 1
40956: PUSH
40957: FOR_IN
40958: IFFALSE 40982
// if i then
40960: LD_VAR 0 3
40964: IFFALSE 40980
// result := result + 1 ;
40966: LD_ADDR_VAR 0 2
40970: PUSH
40971: LD_VAR 0 2
40975: PUSH
40976: LD_INT 1
40978: PLUS
40979: ST_TO_ADDR
40980: GO 40957
40982: POP
40983: POP
// end ;
40984: LD_VAR 0 2
40988: RET
// export function IsEmpty ( building ) ; begin
40989: LD_INT 0
40991: PPUSH
// if not building then
40992: LD_VAR 0 1
40996: NOT
40997: IFFALSE 41001
// exit ;
40999: GO 41044
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41001: LD_ADDR_VAR 0 2
41005: PUSH
41006: LD_VAR 0 1
41010: PUSH
41011: LD_INT 22
41013: PUSH
41014: LD_VAR 0 1
41018: PPUSH
41019: CALL_OW 255
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 58
41030: PUSH
41031: EMPTY
41032: LIST
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PPUSH
41038: CALL_OW 69
41042: IN
41043: ST_TO_ADDR
// end ;
41044: LD_VAR 0 2
41048: RET
// export function IsNotFull ( building ) ; var places ; begin
41049: LD_INT 0
41051: PPUSH
41052: PPUSH
// if not building then
41053: LD_VAR 0 1
41057: NOT
41058: IFFALSE 41062
// exit ;
41060: GO 41233
// result := false ;
41062: LD_ADDR_VAR 0 2
41066: PUSH
41067: LD_INT 0
41069: ST_TO_ADDR
// places := 0 ;
41070: LD_ADDR_VAR 0 3
41074: PUSH
41075: LD_INT 0
41077: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41078: LD_VAR 0 1
41082: PPUSH
41083: CALL_OW 266
41087: PUSH
41088: LD_INT 0
41090: DOUBLE
41091: EQUAL
41092: IFTRUE 41150
41094: LD_INT 1
41096: DOUBLE
41097: EQUAL
41098: IFTRUE 41150
41100: LD_INT 6
41102: DOUBLE
41103: EQUAL
41104: IFTRUE 41150
41106: LD_INT 7
41108: DOUBLE
41109: EQUAL
41110: IFTRUE 41150
41112: LD_INT 8
41114: DOUBLE
41115: EQUAL
41116: IFTRUE 41150
41118: LD_INT 4
41120: DOUBLE
41121: EQUAL
41122: IFTRUE 41150
41124: LD_INT 5
41126: DOUBLE
41127: EQUAL
41128: IFTRUE 41150
41130: LD_INT 2
41132: DOUBLE
41133: EQUAL
41134: IFTRUE 41150
41136: LD_INT 3
41138: DOUBLE
41139: EQUAL
41140: IFTRUE 41150
41142: LD_INT 35
41144: DOUBLE
41145: EQUAL
41146: IFTRUE 41150
41148: GO 41161
41150: POP
// places := 6 ; b_bunker , b_breastwork :
41151: LD_ADDR_VAR 0 3
41155: PUSH
41156: LD_INT 6
41158: ST_TO_ADDR
41159: GO 41206
41161: LD_INT 32
41163: DOUBLE
41164: EQUAL
41165: IFTRUE 41175
41167: LD_INT 31
41169: DOUBLE
41170: EQUAL
41171: IFTRUE 41175
41173: GO 41186
41175: POP
// places := 1 ; b_control_tower :
41176: LD_ADDR_VAR 0 3
41180: PUSH
41181: LD_INT 1
41183: ST_TO_ADDR
41184: GO 41206
41186: LD_INT 36
41188: DOUBLE
41189: EQUAL
41190: IFTRUE 41194
41192: GO 41205
41194: POP
// places := 3 ; end ;
41195: LD_ADDR_VAR 0 3
41199: PUSH
41200: LD_INT 3
41202: ST_TO_ADDR
41203: GO 41206
41205: POP
// if places then
41206: LD_VAR 0 3
41210: IFFALSE 41233
// result := UnitsInside ( building ) < places ;
41212: LD_ADDR_VAR 0 2
41216: PUSH
41217: LD_VAR 0 1
41221: PPUSH
41222: CALL_OW 313
41226: PUSH
41227: LD_VAR 0 3
41231: LESS
41232: ST_TO_ADDR
// end ;
41233: LD_VAR 0 2
41237: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41238: LD_INT 0
41240: PPUSH
41241: PPUSH
41242: PPUSH
41243: PPUSH
// tmp := [ ] ;
41244: LD_ADDR_VAR 0 3
41248: PUSH
41249: EMPTY
41250: ST_TO_ADDR
// list := [ ] ;
41251: LD_ADDR_VAR 0 5
41255: PUSH
41256: EMPTY
41257: ST_TO_ADDR
// for i = 16 to 25 do
41258: LD_ADDR_VAR 0 4
41262: PUSH
41263: DOUBLE
41264: LD_INT 16
41266: DEC
41267: ST_TO_ADDR
41268: LD_INT 25
41270: PUSH
41271: FOR_TO
41272: IFFALSE 41345
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41274: LD_ADDR_VAR 0 3
41278: PUSH
41279: LD_VAR 0 3
41283: PUSH
41284: LD_INT 22
41286: PUSH
41287: LD_VAR 0 1
41291: PPUSH
41292: CALL_OW 255
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 91
41303: PUSH
41304: LD_VAR 0 1
41308: PUSH
41309: LD_INT 6
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 30
41319: PUSH
41320: LD_VAR 0 4
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: LIST
41333: PUSH
41334: EMPTY
41335: LIST
41336: PPUSH
41337: CALL_OW 69
41341: ADD
41342: ST_TO_ADDR
41343: GO 41271
41345: POP
41346: POP
// for i = 1 to tmp do
41347: LD_ADDR_VAR 0 4
41351: PUSH
41352: DOUBLE
41353: LD_INT 1
41355: DEC
41356: ST_TO_ADDR
41357: LD_VAR 0 3
41361: PUSH
41362: FOR_TO
41363: IFFALSE 41451
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41365: LD_ADDR_VAR 0 5
41369: PUSH
41370: LD_VAR 0 5
41374: PUSH
41375: LD_VAR 0 3
41379: PUSH
41380: LD_VAR 0 4
41384: ARRAY
41385: PPUSH
41386: CALL_OW 266
41390: PUSH
41391: LD_VAR 0 3
41395: PUSH
41396: LD_VAR 0 4
41400: ARRAY
41401: PPUSH
41402: CALL_OW 250
41406: PUSH
41407: LD_VAR 0 3
41411: PUSH
41412: LD_VAR 0 4
41416: ARRAY
41417: PPUSH
41418: CALL_OW 251
41422: PUSH
41423: LD_VAR 0 3
41427: PUSH
41428: LD_VAR 0 4
41432: ARRAY
41433: PPUSH
41434: CALL_OW 254
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: PUSH
41445: EMPTY
41446: LIST
41447: ADD
41448: ST_TO_ADDR
41449: GO 41362
41451: POP
41452: POP
// result := list ;
41453: LD_ADDR_VAR 0 2
41457: PUSH
41458: LD_VAR 0 5
41462: ST_TO_ADDR
// end ;
41463: LD_VAR 0 2
41467: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41468: LD_INT 0
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
// if not factory then
41477: LD_VAR 0 1
41481: NOT
41482: IFFALSE 41486
// exit ;
41484: GO 42079
// if control = control_apeman then
41486: LD_VAR 0 4
41490: PUSH
41491: LD_INT 5
41493: EQUAL
41494: IFFALSE 41603
// begin tmp := UnitsInside ( factory ) ;
41496: LD_ADDR_VAR 0 8
41500: PUSH
41501: LD_VAR 0 1
41505: PPUSH
41506: CALL_OW 313
41510: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41511: LD_VAR 0 8
41515: PPUSH
41516: LD_INT 25
41518: PUSH
41519: LD_INT 12
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PPUSH
41526: CALL_OW 72
41530: NOT
41531: IFFALSE 41541
// control := control_manual ;
41533: LD_ADDR_VAR 0 4
41537: PUSH
41538: LD_INT 1
41540: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41541: LD_ADDR_VAR 0 8
41545: PUSH
41546: LD_VAR 0 1
41550: PPUSH
41551: CALL 41238 0 1
41555: ST_TO_ADDR
// if tmp then
41556: LD_VAR 0 8
41560: IFFALSE 41603
// begin for i in tmp do
41562: LD_ADDR_VAR 0 7
41566: PUSH
41567: LD_VAR 0 8
41571: PUSH
41572: FOR_IN
41573: IFFALSE 41601
// if i [ 1 ] = b_ext_radio then
41575: LD_VAR 0 7
41579: PUSH
41580: LD_INT 1
41582: ARRAY
41583: PUSH
41584: LD_INT 22
41586: EQUAL
41587: IFFALSE 41599
// begin control := control_remote ;
41589: LD_ADDR_VAR 0 4
41593: PUSH
41594: LD_INT 2
41596: ST_TO_ADDR
// break ;
41597: GO 41601
// end ;
41599: GO 41572
41601: POP
41602: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41603: LD_VAR 0 1
41607: PPUSH
41608: LD_VAR 0 2
41612: PPUSH
41613: LD_VAR 0 3
41617: PPUSH
41618: LD_VAR 0 4
41622: PPUSH
41623: LD_VAR 0 5
41627: PPUSH
41628: CALL_OW 448
41632: IFFALSE 41667
// begin result := [ chassis , engine , control , weapon ] ;
41634: LD_ADDR_VAR 0 6
41638: PUSH
41639: LD_VAR 0 2
41643: PUSH
41644: LD_VAR 0 3
41648: PUSH
41649: LD_VAR 0 4
41653: PUSH
41654: LD_VAR 0 5
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: ST_TO_ADDR
// exit ;
41665: GO 42079
// end ; _chassis := AvailableChassisList ( factory ) ;
41667: LD_ADDR_VAR 0 9
41671: PUSH
41672: LD_VAR 0 1
41676: PPUSH
41677: CALL_OW 475
41681: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41682: LD_ADDR_VAR 0 11
41686: PUSH
41687: LD_VAR 0 1
41691: PPUSH
41692: CALL_OW 476
41696: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41697: LD_ADDR_VAR 0 12
41701: PUSH
41702: LD_VAR 0 1
41706: PPUSH
41707: CALL_OW 477
41711: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41712: LD_ADDR_VAR 0 10
41716: PUSH
41717: LD_VAR 0 1
41721: PPUSH
41722: CALL_OW 478
41726: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41727: LD_VAR 0 9
41731: NOT
41732: PUSH
41733: LD_VAR 0 11
41737: NOT
41738: OR
41739: PUSH
41740: LD_VAR 0 12
41744: NOT
41745: OR
41746: PUSH
41747: LD_VAR 0 10
41751: NOT
41752: OR
41753: IFFALSE 41788
// begin result := [ chassis , engine , control , weapon ] ;
41755: LD_ADDR_VAR 0 6
41759: PUSH
41760: LD_VAR 0 2
41764: PUSH
41765: LD_VAR 0 3
41769: PUSH
41770: LD_VAR 0 4
41774: PUSH
41775: LD_VAR 0 5
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: ST_TO_ADDR
// exit ;
41786: GO 42079
// end ; if not chassis in _chassis then
41788: LD_VAR 0 2
41792: PUSH
41793: LD_VAR 0 9
41797: IN
41798: NOT
41799: IFFALSE 41825
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41801: LD_ADDR_VAR 0 2
41805: PUSH
41806: LD_VAR 0 9
41810: PUSH
41811: LD_INT 1
41813: PPUSH
41814: LD_VAR 0 9
41818: PPUSH
41819: CALL_OW 12
41823: ARRAY
41824: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41825: LD_VAR 0 2
41829: PPUSH
41830: LD_VAR 0 3
41834: PPUSH
41835: CALL 42084 0 2
41839: NOT
41840: IFFALSE 41899
// repeat engine := _engine [ 1 ] ;
41842: LD_ADDR_VAR 0 3
41846: PUSH
41847: LD_VAR 0 11
41851: PUSH
41852: LD_INT 1
41854: ARRAY
41855: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41856: LD_ADDR_VAR 0 11
41860: PUSH
41861: LD_VAR 0 11
41865: PPUSH
41866: LD_INT 1
41868: PPUSH
41869: CALL_OW 3
41873: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41874: LD_VAR 0 2
41878: PPUSH
41879: LD_VAR 0 3
41883: PPUSH
41884: CALL 42084 0 2
41888: PUSH
41889: LD_VAR 0 11
41893: PUSH
41894: EMPTY
41895: EQUAL
41896: OR
41897: IFFALSE 41842
// if not control in _control then
41899: LD_VAR 0 4
41903: PUSH
41904: LD_VAR 0 12
41908: IN
41909: NOT
41910: IFFALSE 41936
// control := _control [ rand ( 1 , _control ) ] ;
41912: LD_ADDR_VAR 0 4
41916: PUSH
41917: LD_VAR 0 12
41921: PUSH
41922: LD_INT 1
41924: PPUSH
41925: LD_VAR 0 12
41929: PPUSH
41930: CALL_OW 12
41934: ARRAY
41935: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41936: LD_VAR 0 2
41940: PPUSH
41941: LD_VAR 0 5
41945: PPUSH
41946: CALL 42304 0 2
41950: NOT
41951: IFFALSE 42010
// repeat weapon := _weapon [ 1 ] ;
41953: LD_ADDR_VAR 0 5
41957: PUSH
41958: LD_VAR 0 10
41962: PUSH
41963: LD_INT 1
41965: ARRAY
41966: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41967: LD_ADDR_VAR 0 10
41971: PUSH
41972: LD_VAR 0 10
41976: PPUSH
41977: LD_INT 1
41979: PPUSH
41980: CALL_OW 3
41984: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41985: LD_VAR 0 2
41989: PPUSH
41990: LD_VAR 0 5
41994: PPUSH
41995: CALL 42304 0 2
41999: PUSH
42000: LD_VAR 0 10
42004: PUSH
42005: EMPTY
42006: EQUAL
42007: OR
42008: IFFALSE 41953
// result := [ ] ;
42010: LD_ADDR_VAR 0 6
42014: PUSH
42015: EMPTY
42016: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42017: LD_VAR 0 1
42021: PPUSH
42022: LD_VAR 0 2
42026: PPUSH
42027: LD_VAR 0 3
42031: PPUSH
42032: LD_VAR 0 4
42036: PPUSH
42037: LD_VAR 0 5
42041: PPUSH
42042: CALL_OW 448
42046: IFFALSE 42079
// result := [ chassis , engine , control , weapon ] ;
42048: LD_ADDR_VAR 0 6
42052: PUSH
42053: LD_VAR 0 2
42057: PUSH
42058: LD_VAR 0 3
42062: PUSH
42063: LD_VAR 0 4
42067: PUSH
42068: LD_VAR 0 5
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: ST_TO_ADDR
// end ;
42079: LD_VAR 0 6
42083: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42084: LD_INT 0
42086: PPUSH
// if not chassis or not engine then
42087: LD_VAR 0 1
42091: NOT
42092: PUSH
42093: LD_VAR 0 2
42097: NOT
42098: OR
42099: IFFALSE 42103
// exit ;
42101: GO 42299
// case engine of engine_solar :
42103: LD_VAR 0 2
42107: PUSH
42108: LD_INT 2
42110: DOUBLE
42111: EQUAL
42112: IFTRUE 42116
42114: GO 42154
42116: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42117: LD_ADDR_VAR 0 3
42121: PUSH
42122: LD_INT 11
42124: PUSH
42125: LD_INT 12
42127: PUSH
42128: LD_INT 13
42130: PUSH
42131: LD_INT 14
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 3
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: ST_TO_ADDR
42152: GO 42283
42154: LD_INT 1
42156: DOUBLE
42157: EQUAL
42158: IFTRUE 42162
42160: GO 42224
42162: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42163: LD_ADDR_VAR 0 3
42167: PUSH
42168: LD_INT 11
42170: PUSH
42171: LD_INT 12
42173: PUSH
42174: LD_INT 13
42176: PUSH
42177: LD_INT 14
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: LD_INT 3
42188: PUSH
42189: LD_INT 4
42191: PUSH
42192: LD_INT 5
42194: PUSH
42195: LD_INT 21
42197: PUSH
42198: LD_INT 23
42200: PUSH
42201: LD_INT 22
42203: PUSH
42204: LD_INT 24
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: ST_TO_ADDR
42222: GO 42283
42224: LD_INT 3
42226: DOUBLE
42227: EQUAL
42228: IFTRUE 42232
42230: GO 42282
42232: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42233: LD_ADDR_VAR 0 3
42237: PUSH
42238: LD_INT 13
42240: PUSH
42241: LD_INT 14
42243: PUSH
42244: LD_INT 2
42246: PUSH
42247: LD_INT 3
42249: PUSH
42250: LD_INT 4
42252: PUSH
42253: LD_INT 5
42255: PUSH
42256: LD_INT 21
42258: PUSH
42259: LD_INT 22
42261: PUSH
42262: LD_INT 23
42264: PUSH
42265: LD_INT 24
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: ST_TO_ADDR
42280: GO 42283
42282: POP
// result := ( chassis in result ) ;
42283: LD_ADDR_VAR 0 3
42287: PUSH
42288: LD_VAR 0 1
42292: PUSH
42293: LD_VAR 0 3
42297: IN
42298: ST_TO_ADDR
// end ;
42299: LD_VAR 0 3
42303: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42304: LD_INT 0
42306: PPUSH
// if not chassis or not weapon then
42307: LD_VAR 0 1
42311: NOT
42312: PUSH
42313: LD_VAR 0 2
42317: NOT
42318: OR
42319: IFFALSE 42323
// exit ;
42321: GO 43383
// case weapon of us_machine_gun :
42323: LD_VAR 0 2
42327: PUSH
42328: LD_INT 2
42330: DOUBLE
42331: EQUAL
42332: IFTRUE 42336
42334: GO 42366
42336: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42337: LD_ADDR_VAR 0 3
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: LD_INT 3
42350: PUSH
42351: LD_INT 4
42353: PUSH
42354: LD_INT 5
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: ST_TO_ADDR
42364: GO 43367
42366: LD_INT 3
42368: DOUBLE
42369: EQUAL
42370: IFTRUE 42374
42372: GO 42404
42374: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42375: LD_ADDR_VAR 0 3
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: LD_INT 3
42388: PUSH
42389: LD_INT 4
42391: PUSH
42392: LD_INT 5
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: ST_TO_ADDR
42402: GO 43367
42404: LD_INT 11
42406: DOUBLE
42407: EQUAL
42408: IFTRUE 42412
42410: GO 42442
42412: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42413: LD_ADDR_VAR 0 3
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: LD_INT 2
42423: PUSH
42424: LD_INT 3
42426: PUSH
42427: LD_INT 4
42429: PUSH
42430: LD_INT 5
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: ST_TO_ADDR
42440: GO 43367
42442: LD_INT 4
42444: DOUBLE
42445: EQUAL
42446: IFTRUE 42450
42448: GO 42476
42450: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42451: LD_ADDR_VAR 0 3
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: LD_INT 3
42461: PUSH
42462: LD_INT 4
42464: PUSH
42465: LD_INT 5
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: ST_TO_ADDR
42474: GO 43367
42476: LD_INT 5
42478: DOUBLE
42479: EQUAL
42480: IFTRUE 42484
42482: GO 42510
42484: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42485: LD_ADDR_VAR 0 3
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: LD_INT 3
42495: PUSH
42496: LD_INT 4
42498: PUSH
42499: LD_INT 5
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: ST_TO_ADDR
42508: GO 43367
42510: LD_INT 9
42512: DOUBLE
42513: EQUAL
42514: IFTRUE 42518
42516: GO 42544
42518: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42519: LD_ADDR_VAR 0 3
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: LD_INT 3
42529: PUSH
42530: LD_INT 4
42532: PUSH
42533: LD_INT 5
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: ST_TO_ADDR
42542: GO 43367
42544: LD_INT 7
42546: DOUBLE
42547: EQUAL
42548: IFTRUE 42552
42550: GO 42578
42552: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42553: LD_ADDR_VAR 0 3
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: LD_INT 3
42563: PUSH
42564: LD_INT 4
42566: PUSH
42567: LD_INT 5
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: ST_TO_ADDR
42576: GO 43367
42578: LD_INT 12
42580: DOUBLE
42581: EQUAL
42582: IFTRUE 42586
42584: GO 42612
42586: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42587: LD_ADDR_VAR 0 3
42591: PUSH
42592: LD_INT 2
42594: PUSH
42595: LD_INT 3
42597: PUSH
42598: LD_INT 4
42600: PUSH
42601: LD_INT 5
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: ST_TO_ADDR
42610: GO 43367
42612: LD_INT 13
42614: DOUBLE
42615: EQUAL
42616: IFTRUE 42620
42618: GO 42646
42620: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42621: LD_ADDR_VAR 0 3
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: LD_INT 3
42631: PUSH
42632: LD_INT 4
42634: PUSH
42635: LD_INT 5
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: ST_TO_ADDR
42644: GO 43367
42646: LD_INT 14
42648: DOUBLE
42649: EQUAL
42650: IFTRUE 42654
42652: GO 42672
42654: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42655: LD_ADDR_VAR 0 3
42659: PUSH
42660: LD_INT 4
42662: PUSH
42663: LD_INT 5
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: ST_TO_ADDR
42670: GO 43367
42672: LD_INT 6
42674: DOUBLE
42675: EQUAL
42676: IFTRUE 42680
42678: GO 42698
42680: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42681: LD_ADDR_VAR 0 3
42685: PUSH
42686: LD_INT 4
42688: PUSH
42689: LD_INT 5
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: ST_TO_ADDR
42696: GO 43367
42698: LD_INT 10
42700: DOUBLE
42701: EQUAL
42702: IFTRUE 42706
42704: GO 42724
42706: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42707: LD_ADDR_VAR 0 3
42711: PUSH
42712: LD_INT 4
42714: PUSH
42715: LD_INT 5
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: ST_TO_ADDR
42722: GO 43367
42724: LD_INT 22
42726: DOUBLE
42727: EQUAL
42728: IFTRUE 42732
42730: GO 42758
42732: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42733: LD_ADDR_VAR 0 3
42737: PUSH
42738: LD_INT 11
42740: PUSH
42741: LD_INT 12
42743: PUSH
42744: LD_INT 13
42746: PUSH
42747: LD_INT 14
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: ST_TO_ADDR
42756: GO 43367
42758: LD_INT 23
42760: DOUBLE
42761: EQUAL
42762: IFTRUE 42766
42764: GO 42792
42766: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42767: LD_ADDR_VAR 0 3
42771: PUSH
42772: LD_INT 11
42774: PUSH
42775: LD_INT 12
42777: PUSH
42778: LD_INT 13
42780: PUSH
42781: LD_INT 14
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: ST_TO_ADDR
42790: GO 43367
42792: LD_INT 24
42794: DOUBLE
42795: EQUAL
42796: IFTRUE 42800
42798: GO 42826
42800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42801: LD_ADDR_VAR 0 3
42805: PUSH
42806: LD_INT 11
42808: PUSH
42809: LD_INT 12
42811: PUSH
42812: LD_INT 13
42814: PUSH
42815: LD_INT 14
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: ST_TO_ADDR
42824: GO 43367
42826: LD_INT 30
42828: DOUBLE
42829: EQUAL
42830: IFTRUE 42834
42832: GO 42860
42834: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42835: LD_ADDR_VAR 0 3
42839: PUSH
42840: LD_INT 11
42842: PUSH
42843: LD_INT 12
42845: PUSH
42846: LD_INT 13
42848: PUSH
42849: LD_INT 14
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: ST_TO_ADDR
42858: GO 43367
42860: LD_INT 25
42862: DOUBLE
42863: EQUAL
42864: IFTRUE 42868
42866: GO 42886
42868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42869: LD_ADDR_VAR 0 3
42873: PUSH
42874: LD_INT 13
42876: PUSH
42877: LD_INT 14
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: ST_TO_ADDR
42884: GO 43367
42886: LD_INT 27
42888: DOUBLE
42889: EQUAL
42890: IFTRUE 42894
42892: GO 42912
42894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42895: LD_ADDR_VAR 0 3
42899: PUSH
42900: LD_INT 13
42902: PUSH
42903: LD_INT 14
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: ST_TO_ADDR
42910: GO 43367
42912: LD_INT 92
42914: DOUBLE
42915: EQUAL
42916: IFTRUE 42920
42918: GO 42946
42920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42921: LD_ADDR_VAR 0 3
42925: PUSH
42926: LD_INT 11
42928: PUSH
42929: LD_INT 12
42931: PUSH
42932: LD_INT 13
42934: PUSH
42935: LD_INT 14
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: ST_TO_ADDR
42944: GO 43367
42946: LD_INT 28
42948: DOUBLE
42949: EQUAL
42950: IFTRUE 42954
42952: GO 42972
42954: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42955: LD_ADDR_VAR 0 3
42959: PUSH
42960: LD_INT 13
42962: PUSH
42963: LD_INT 14
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: ST_TO_ADDR
42970: GO 43367
42972: LD_INT 29
42974: DOUBLE
42975: EQUAL
42976: IFTRUE 42980
42978: GO 42998
42980: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42981: LD_ADDR_VAR 0 3
42985: PUSH
42986: LD_INT 13
42988: PUSH
42989: LD_INT 14
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: ST_TO_ADDR
42996: GO 43367
42998: LD_INT 31
43000: DOUBLE
43001: EQUAL
43002: IFTRUE 43006
43004: GO 43024
43006: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43007: LD_ADDR_VAR 0 3
43011: PUSH
43012: LD_INT 13
43014: PUSH
43015: LD_INT 14
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: ST_TO_ADDR
43022: GO 43367
43024: LD_INT 26
43026: DOUBLE
43027: EQUAL
43028: IFTRUE 43032
43030: GO 43050
43032: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43033: LD_ADDR_VAR 0 3
43037: PUSH
43038: LD_INT 13
43040: PUSH
43041: LD_INT 14
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: ST_TO_ADDR
43048: GO 43367
43050: LD_INT 42
43052: DOUBLE
43053: EQUAL
43054: IFTRUE 43058
43056: GO 43084
43058: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43059: LD_ADDR_VAR 0 3
43063: PUSH
43064: LD_INT 21
43066: PUSH
43067: LD_INT 22
43069: PUSH
43070: LD_INT 23
43072: PUSH
43073: LD_INT 24
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: ST_TO_ADDR
43082: GO 43367
43084: LD_INT 43
43086: DOUBLE
43087: EQUAL
43088: IFTRUE 43092
43090: GO 43118
43092: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43093: LD_ADDR_VAR 0 3
43097: PUSH
43098: LD_INT 21
43100: PUSH
43101: LD_INT 22
43103: PUSH
43104: LD_INT 23
43106: PUSH
43107: LD_INT 24
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: ST_TO_ADDR
43116: GO 43367
43118: LD_INT 44
43120: DOUBLE
43121: EQUAL
43122: IFTRUE 43126
43124: GO 43152
43126: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43127: LD_ADDR_VAR 0 3
43131: PUSH
43132: LD_INT 21
43134: PUSH
43135: LD_INT 22
43137: PUSH
43138: LD_INT 23
43140: PUSH
43141: LD_INT 24
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: ST_TO_ADDR
43150: GO 43367
43152: LD_INT 45
43154: DOUBLE
43155: EQUAL
43156: IFTRUE 43160
43158: GO 43186
43160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43161: LD_ADDR_VAR 0 3
43165: PUSH
43166: LD_INT 21
43168: PUSH
43169: LD_INT 22
43171: PUSH
43172: LD_INT 23
43174: PUSH
43175: LD_INT 24
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: ST_TO_ADDR
43184: GO 43367
43186: LD_INT 49
43188: DOUBLE
43189: EQUAL
43190: IFTRUE 43194
43192: GO 43220
43194: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43195: LD_ADDR_VAR 0 3
43199: PUSH
43200: LD_INT 21
43202: PUSH
43203: LD_INT 22
43205: PUSH
43206: LD_INT 23
43208: PUSH
43209: LD_INT 24
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: ST_TO_ADDR
43218: GO 43367
43220: LD_INT 51
43222: DOUBLE
43223: EQUAL
43224: IFTRUE 43228
43226: GO 43254
43228: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43229: LD_ADDR_VAR 0 3
43233: PUSH
43234: LD_INT 21
43236: PUSH
43237: LD_INT 22
43239: PUSH
43240: LD_INT 23
43242: PUSH
43243: LD_INT 24
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: ST_TO_ADDR
43252: GO 43367
43254: LD_INT 52
43256: DOUBLE
43257: EQUAL
43258: IFTRUE 43262
43260: GO 43288
43262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43263: LD_ADDR_VAR 0 3
43267: PUSH
43268: LD_INT 21
43270: PUSH
43271: LD_INT 22
43273: PUSH
43274: LD_INT 23
43276: PUSH
43277: LD_INT 24
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: ST_TO_ADDR
43286: GO 43367
43288: LD_INT 53
43290: DOUBLE
43291: EQUAL
43292: IFTRUE 43296
43294: GO 43314
43296: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43297: LD_ADDR_VAR 0 3
43301: PUSH
43302: LD_INT 23
43304: PUSH
43305: LD_INT 24
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: ST_TO_ADDR
43312: GO 43367
43314: LD_INT 46
43316: DOUBLE
43317: EQUAL
43318: IFTRUE 43322
43320: GO 43340
43322: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43323: LD_ADDR_VAR 0 3
43327: PUSH
43328: LD_INT 23
43330: PUSH
43331: LD_INT 24
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: ST_TO_ADDR
43338: GO 43367
43340: LD_INT 47
43342: DOUBLE
43343: EQUAL
43344: IFTRUE 43348
43346: GO 43366
43348: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43349: LD_ADDR_VAR 0 3
43353: PUSH
43354: LD_INT 23
43356: PUSH
43357: LD_INT 24
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: ST_TO_ADDR
43364: GO 43367
43366: POP
// result := ( chassis in result ) ;
43367: LD_ADDR_VAR 0 3
43371: PUSH
43372: LD_VAR 0 1
43376: PUSH
43377: LD_VAR 0 3
43381: IN
43382: ST_TO_ADDR
// end ;
43383: LD_VAR 0 3
43387: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43388: LD_INT 0
43390: PPUSH
43391: PPUSH
43392: PPUSH
43393: PPUSH
43394: PPUSH
43395: PPUSH
43396: PPUSH
// result := array ;
43397: LD_ADDR_VAR 0 5
43401: PUSH
43402: LD_VAR 0 1
43406: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43407: LD_VAR 0 1
43411: NOT
43412: PUSH
43413: LD_VAR 0 2
43417: NOT
43418: OR
43419: PUSH
43420: LD_VAR 0 3
43424: NOT
43425: OR
43426: PUSH
43427: LD_VAR 0 2
43431: PUSH
43432: LD_VAR 0 1
43436: GREATER
43437: OR
43438: PUSH
43439: LD_VAR 0 3
43443: PUSH
43444: LD_VAR 0 1
43448: GREATER
43449: OR
43450: IFFALSE 43454
// exit ;
43452: GO 43750
// if direction then
43454: LD_VAR 0 4
43458: IFFALSE 43522
// begin d := 1 ;
43460: LD_ADDR_VAR 0 9
43464: PUSH
43465: LD_INT 1
43467: ST_TO_ADDR
// if i_from > i_to then
43468: LD_VAR 0 2
43472: PUSH
43473: LD_VAR 0 3
43477: GREATER
43478: IFFALSE 43504
// length := ( array - i_from ) + i_to else
43480: LD_ADDR_VAR 0 11
43484: PUSH
43485: LD_VAR 0 1
43489: PUSH
43490: LD_VAR 0 2
43494: MINUS
43495: PUSH
43496: LD_VAR 0 3
43500: PLUS
43501: ST_TO_ADDR
43502: GO 43520
// length := i_to - i_from ;
43504: LD_ADDR_VAR 0 11
43508: PUSH
43509: LD_VAR 0 3
43513: PUSH
43514: LD_VAR 0 2
43518: MINUS
43519: ST_TO_ADDR
// end else
43520: GO 43583
// begin d := - 1 ;
43522: LD_ADDR_VAR 0 9
43526: PUSH
43527: LD_INT 1
43529: NEG
43530: ST_TO_ADDR
// if i_from > i_to then
43531: LD_VAR 0 2
43535: PUSH
43536: LD_VAR 0 3
43540: GREATER
43541: IFFALSE 43561
// length := i_from - i_to else
43543: LD_ADDR_VAR 0 11
43547: PUSH
43548: LD_VAR 0 2
43552: PUSH
43553: LD_VAR 0 3
43557: MINUS
43558: ST_TO_ADDR
43559: GO 43583
// length := ( array - i_to ) + i_from ;
43561: LD_ADDR_VAR 0 11
43565: PUSH
43566: LD_VAR 0 1
43570: PUSH
43571: LD_VAR 0 3
43575: MINUS
43576: PUSH
43577: LD_VAR 0 2
43581: PLUS
43582: ST_TO_ADDR
// end ; if not length then
43583: LD_VAR 0 11
43587: NOT
43588: IFFALSE 43592
// exit ;
43590: GO 43750
// tmp := array ;
43592: LD_ADDR_VAR 0 10
43596: PUSH
43597: LD_VAR 0 1
43601: ST_TO_ADDR
// for i = 1 to length do
43602: LD_ADDR_VAR 0 6
43606: PUSH
43607: DOUBLE
43608: LD_INT 1
43610: DEC
43611: ST_TO_ADDR
43612: LD_VAR 0 11
43616: PUSH
43617: FOR_TO
43618: IFFALSE 43738
// begin for j = 1 to array do
43620: LD_ADDR_VAR 0 7
43624: PUSH
43625: DOUBLE
43626: LD_INT 1
43628: DEC
43629: ST_TO_ADDR
43630: LD_VAR 0 1
43634: PUSH
43635: FOR_TO
43636: IFFALSE 43724
// begin k := j + d ;
43638: LD_ADDR_VAR 0 8
43642: PUSH
43643: LD_VAR 0 7
43647: PUSH
43648: LD_VAR 0 9
43652: PLUS
43653: ST_TO_ADDR
// if k > array then
43654: LD_VAR 0 8
43658: PUSH
43659: LD_VAR 0 1
43663: GREATER
43664: IFFALSE 43674
// k := 1 ;
43666: LD_ADDR_VAR 0 8
43670: PUSH
43671: LD_INT 1
43673: ST_TO_ADDR
// if not k then
43674: LD_VAR 0 8
43678: NOT
43679: IFFALSE 43691
// k := array ;
43681: LD_ADDR_VAR 0 8
43685: PUSH
43686: LD_VAR 0 1
43690: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43691: LD_ADDR_VAR 0 10
43695: PUSH
43696: LD_VAR 0 10
43700: PPUSH
43701: LD_VAR 0 8
43705: PPUSH
43706: LD_VAR 0 1
43710: PUSH
43711: LD_VAR 0 7
43715: ARRAY
43716: PPUSH
43717: CALL_OW 1
43721: ST_TO_ADDR
// end ;
43722: GO 43635
43724: POP
43725: POP
// array := tmp ;
43726: LD_ADDR_VAR 0 1
43730: PUSH
43731: LD_VAR 0 10
43735: ST_TO_ADDR
// end ;
43736: GO 43617
43738: POP
43739: POP
// result := array ;
43740: LD_ADDR_VAR 0 5
43744: PUSH
43745: LD_VAR 0 1
43749: ST_TO_ADDR
// end ;
43750: LD_VAR 0 5
43754: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43755: LD_INT 0
43757: PPUSH
43758: PPUSH
// result := 0 ;
43759: LD_ADDR_VAR 0 3
43763: PUSH
43764: LD_INT 0
43766: ST_TO_ADDR
// if not array or not value in array then
43767: LD_VAR 0 1
43771: NOT
43772: PUSH
43773: LD_VAR 0 2
43777: PUSH
43778: LD_VAR 0 1
43782: IN
43783: NOT
43784: OR
43785: IFFALSE 43789
// exit ;
43787: GO 43843
// for i = 1 to array do
43789: LD_ADDR_VAR 0 4
43793: PUSH
43794: DOUBLE
43795: LD_INT 1
43797: DEC
43798: ST_TO_ADDR
43799: LD_VAR 0 1
43803: PUSH
43804: FOR_TO
43805: IFFALSE 43841
// if value = array [ i ] then
43807: LD_VAR 0 2
43811: PUSH
43812: LD_VAR 0 1
43816: PUSH
43817: LD_VAR 0 4
43821: ARRAY
43822: EQUAL
43823: IFFALSE 43839
// begin result := i ;
43825: LD_ADDR_VAR 0 3
43829: PUSH
43830: LD_VAR 0 4
43834: ST_TO_ADDR
// exit ;
43835: POP
43836: POP
43837: GO 43843
// end ;
43839: GO 43804
43841: POP
43842: POP
// end ;
43843: LD_VAR 0 3
43847: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43848: LD_INT 0
43850: PPUSH
// vc_chassis := chassis ;
43851: LD_ADDR_OWVAR 37
43855: PUSH
43856: LD_VAR 0 1
43860: ST_TO_ADDR
// vc_engine := engine ;
43861: LD_ADDR_OWVAR 39
43865: PUSH
43866: LD_VAR 0 2
43870: ST_TO_ADDR
// vc_control := control ;
43871: LD_ADDR_OWVAR 38
43875: PUSH
43876: LD_VAR 0 3
43880: ST_TO_ADDR
// vc_weapon := weapon ;
43881: LD_ADDR_OWVAR 40
43885: PUSH
43886: LD_VAR 0 4
43890: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43891: LD_ADDR_OWVAR 41
43895: PUSH
43896: LD_VAR 0 5
43900: ST_TO_ADDR
// end ;
43901: LD_VAR 0 6
43905: RET
// export function WantPlant ( unit ) ; var task ; begin
43906: LD_INT 0
43908: PPUSH
43909: PPUSH
// result := false ;
43910: LD_ADDR_VAR 0 2
43914: PUSH
43915: LD_INT 0
43917: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43918: LD_ADDR_VAR 0 3
43922: PUSH
43923: LD_VAR 0 1
43927: PPUSH
43928: CALL_OW 437
43932: ST_TO_ADDR
// if task then
43933: LD_VAR 0 3
43937: IFFALSE 43965
// if task [ 1 ] [ 1 ] = p then
43939: LD_VAR 0 3
43943: PUSH
43944: LD_INT 1
43946: ARRAY
43947: PUSH
43948: LD_INT 1
43950: ARRAY
43951: PUSH
43952: LD_STRING p
43954: EQUAL
43955: IFFALSE 43965
// result := true ;
43957: LD_ADDR_VAR 0 2
43961: PUSH
43962: LD_INT 1
43964: ST_TO_ADDR
// end ;
43965: LD_VAR 0 2
43969: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43970: LD_INT 0
43972: PPUSH
43973: PPUSH
43974: PPUSH
43975: PPUSH
// if pos < 1 then
43976: LD_VAR 0 2
43980: PUSH
43981: LD_INT 1
43983: LESS
43984: IFFALSE 43988
// exit ;
43986: GO 44291
// if pos = 1 then
43988: LD_VAR 0 2
43992: PUSH
43993: LD_INT 1
43995: EQUAL
43996: IFFALSE 44029
// result := Replace ( arr , pos [ 1 ] , value ) else
43998: LD_ADDR_VAR 0 4
44002: PUSH
44003: LD_VAR 0 1
44007: PPUSH
44008: LD_VAR 0 2
44012: PUSH
44013: LD_INT 1
44015: ARRAY
44016: PPUSH
44017: LD_VAR 0 3
44021: PPUSH
44022: CALL_OW 1
44026: ST_TO_ADDR
44027: GO 44291
// begin tmp := arr ;
44029: LD_ADDR_VAR 0 6
44033: PUSH
44034: LD_VAR 0 1
44038: ST_TO_ADDR
// s_arr := [ tmp ] ;
44039: LD_ADDR_VAR 0 7
44043: PUSH
44044: LD_VAR 0 6
44048: PUSH
44049: EMPTY
44050: LIST
44051: ST_TO_ADDR
// for i = 1 to pos - 1 do
44052: LD_ADDR_VAR 0 5
44056: PUSH
44057: DOUBLE
44058: LD_INT 1
44060: DEC
44061: ST_TO_ADDR
44062: LD_VAR 0 2
44066: PUSH
44067: LD_INT 1
44069: MINUS
44070: PUSH
44071: FOR_TO
44072: IFFALSE 44117
// begin tmp := tmp [ pos [ i ] ] ;
44074: LD_ADDR_VAR 0 6
44078: PUSH
44079: LD_VAR 0 6
44083: PUSH
44084: LD_VAR 0 2
44088: PUSH
44089: LD_VAR 0 5
44093: ARRAY
44094: ARRAY
44095: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44096: LD_ADDR_VAR 0 7
44100: PUSH
44101: LD_VAR 0 7
44105: PUSH
44106: LD_VAR 0 6
44110: PUSH
44111: EMPTY
44112: LIST
44113: ADD
44114: ST_TO_ADDR
// end ;
44115: GO 44071
44117: POP
44118: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44119: LD_ADDR_VAR 0 6
44123: PUSH
44124: LD_VAR 0 6
44128: PPUSH
44129: LD_VAR 0 2
44133: PUSH
44134: LD_VAR 0 2
44138: ARRAY
44139: PPUSH
44140: LD_VAR 0 3
44144: PPUSH
44145: CALL_OW 1
44149: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44150: LD_ADDR_VAR 0 7
44154: PUSH
44155: LD_VAR 0 7
44159: PPUSH
44160: LD_VAR 0 7
44164: PPUSH
44165: LD_VAR 0 6
44169: PPUSH
44170: CALL_OW 1
44174: ST_TO_ADDR
// for i = s_arr downto 2 do
44175: LD_ADDR_VAR 0 5
44179: PUSH
44180: DOUBLE
44181: LD_VAR 0 7
44185: INC
44186: ST_TO_ADDR
44187: LD_INT 2
44189: PUSH
44190: FOR_DOWNTO
44191: IFFALSE 44275
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44193: LD_ADDR_VAR 0 6
44197: PUSH
44198: LD_VAR 0 7
44202: PUSH
44203: LD_VAR 0 5
44207: PUSH
44208: LD_INT 1
44210: MINUS
44211: ARRAY
44212: PPUSH
44213: LD_VAR 0 2
44217: PUSH
44218: LD_VAR 0 5
44222: PUSH
44223: LD_INT 1
44225: MINUS
44226: ARRAY
44227: PPUSH
44228: LD_VAR 0 7
44232: PUSH
44233: LD_VAR 0 5
44237: ARRAY
44238: PPUSH
44239: CALL_OW 1
44243: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44244: LD_ADDR_VAR 0 7
44248: PUSH
44249: LD_VAR 0 7
44253: PPUSH
44254: LD_VAR 0 5
44258: PUSH
44259: LD_INT 1
44261: MINUS
44262: PPUSH
44263: LD_VAR 0 6
44267: PPUSH
44268: CALL_OW 1
44272: ST_TO_ADDR
// end ;
44273: GO 44190
44275: POP
44276: POP
// result := s_arr [ 1 ] ;
44277: LD_ADDR_VAR 0 4
44281: PUSH
44282: LD_VAR 0 7
44286: PUSH
44287: LD_INT 1
44289: ARRAY
44290: ST_TO_ADDR
// end ; end ;
44291: LD_VAR 0 4
44295: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44296: LD_INT 0
44298: PPUSH
44299: PPUSH
// if not list then
44300: LD_VAR 0 1
44304: NOT
44305: IFFALSE 44309
// exit ;
44307: GO 44400
// i := list [ pos1 ] ;
44309: LD_ADDR_VAR 0 5
44313: PUSH
44314: LD_VAR 0 1
44318: PUSH
44319: LD_VAR 0 2
44323: ARRAY
44324: ST_TO_ADDR
// if not i then
44325: LD_VAR 0 5
44329: NOT
44330: IFFALSE 44334
// exit ;
44332: GO 44400
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44334: LD_ADDR_VAR 0 1
44338: PUSH
44339: LD_VAR 0 1
44343: PPUSH
44344: LD_VAR 0 2
44348: PPUSH
44349: LD_VAR 0 1
44353: PUSH
44354: LD_VAR 0 3
44358: ARRAY
44359: PPUSH
44360: CALL_OW 1
44364: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44365: LD_ADDR_VAR 0 1
44369: PUSH
44370: LD_VAR 0 1
44374: PPUSH
44375: LD_VAR 0 3
44379: PPUSH
44380: LD_VAR 0 5
44384: PPUSH
44385: CALL_OW 1
44389: ST_TO_ADDR
// result := list ;
44390: LD_ADDR_VAR 0 4
44394: PUSH
44395: LD_VAR 0 1
44399: ST_TO_ADDR
// end ;
44400: LD_VAR 0 4
44404: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44405: LD_INT 0
44407: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44408: LD_ADDR_VAR 0 5
44412: PUSH
44413: LD_VAR 0 1
44417: PPUSH
44418: CALL_OW 250
44422: PPUSH
44423: LD_VAR 0 1
44427: PPUSH
44428: CALL_OW 251
44432: PPUSH
44433: LD_VAR 0 2
44437: PPUSH
44438: LD_VAR 0 3
44442: PPUSH
44443: LD_VAR 0 4
44447: PPUSH
44448: CALL 44458 0 5
44452: ST_TO_ADDR
// end ;
44453: LD_VAR 0 5
44457: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44458: LD_INT 0
44460: PPUSH
44461: PPUSH
44462: PPUSH
44463: PPUSH
// if not list then
44464: LD_VAR 0 3
44468: NOT
44469: IFFALSE 44473
// exit ;
44471: GO 44861
// result := [ ] ;
44473: LD_ADDR_VAR 0 6
44477: PUSH
44478: EMPTY
44479: ST_TO_ADDR
// for i in list do
44480: LD_ADDR_VAR 0 7
44484: PUSH
44485: LD_VAR 0 3
44489: PUSH
44490: FOR_IN
44491: IFFALSE 44693
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44493: LD_ADDR_VAR 0 9
44497: PUSH
44498: LD_VAR 0 7
44502: PPUSH
44503: LD_VAR 0 1
44507: PPUSH
44508: LD_VAR 0 2
44512: PPUSH
44513: CALL_OW 297
44517: ST_TO_ADDR
// if not result then
44518: LD_VAR 0 6
44522: NOT
44523: IFFALSE 44549
// result := [ [ i , tmp ] ] else
44525: LD_ADDR_VAR 0 6
44529: PUSH
44530: LD_VAR 0 7
44534: PUSH
44535: LD_VAR 0 9
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: EMPTY
44545: LIST
44546: ST_TO_ADDR
44547: GO 44691
// begin if result [ result ] [ 2 ] < tmp then
44549: LD_VAR 0 6
44553: PUSH
44554: LD_VAR 0 6
44558: ARRAY
44559: PUSH
44560: LD_INT 2
44562: ARRAY
44563: PUSH
44564: LD_VAR 0 9
44568: LESS
44569: IFFALSE 44611
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44571: LD_ADDR_VAR 0 6
44575: PUSH
44576: LD_VAR 0 6
44580: PPUSH
44581: LD_VAR 0 6
44585: PUSH
44586: LD_INT 1
44588: PLUS
44589: PPUSH
44590: LD_VAR 0 7
44594: PUSH
44595: LD_VAR 0 9
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PPUSH
44604: CALL_OW 2
44608: ST_TO_ADDR
44609: GO 44691
// for j = 1 to result do
44611: LD_ADDR_VAR 0 8
44615: PUSH
44616: DOUBLE
44617: LD_INT 1
44619: DEC
44620: ST_TO_ADDR
44621: LD_VAR 0 6
44625: PUSH
44626: FOR_TO
44627: IFFALSE 44689
// begin if tmp < result [ j ] [ 2 ] then
44629: LD_VAR 0 9
44633: PUSH
44634: LD_VAR 0 6
44638: PUSH
44639: LD_VAR 0 8
44643: ARRAY
44644: PUSH
44645: LD_INT 2
44647: ARRAY
44648: LESS
44649: IFFALSE 44687
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44651: LD_ADDR_VAR 0 6
44655: PUSH
44656: LD_VAR 0 6
44660: PPUSH
44661: LD_VAR 0 8
44665: PPUSH
44666: LD_VAR 0 7
44670: PUSH
44671: LD_VAR 0 9
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PPUSH
44680: CALL_OW 2
44684: ST_TO_ADDR
// break ;
44685: GO 44689
// end ; end ;
44687: GO 44626
44689: POP
44690: POP
// end ; end ;
44691: GO 44490
44693: POP
44694: POP
// if result and not asc then
44695: LD_VAR 0 6
44699: PUSH
44700: LD_VAR 0 4
44704: NOT
44705: AND
44706: IFFALSE 44781
// begin tmp := result ;
44708: LD_ADDR_VAR 0 9
44712: PUSH
44713: LD_VAR 0 6
44717: ST_TO_ADDR
// for i = tmp downto 1 do
44718: LD_ADDR_VAR 0 7
44722: PUSH
44723: DOUBLE
44724: LD_VAR 0 9
44728: INC
44729: ST_TO_ADDR
44730: LD_INT 1
44732: PUSH
44733: FOR_DOWNTO
44734: IFFALSE 44779
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44736: LD_ADDR_VAR 0 6
44740: PUSH
44741: LD_VAR 0 6
44745: PPUSH
44746: LD_VAR 0 9
44750: PUSH
44751: LD_VAR 0 7
44755: MINUS
44756: PUSH
44757: LD_INT 1
44759: PLUS
44760: PPUSH
44761: LD_VAR 0 9
44765: PUSH
44766: LD_VAR 0 7
44770: ARRAY
44771: PPUSH
44772: CALL_OW 1
44776: ST_TO_ADDR
44777: GO 44733
44779: POP
44780: POP
// end ; tmp := [ ] ;
44781: LD_ADDR_VAR 0 9
44785: PUSH
44786: EMPTY
44787: ST_TO_ADDR
// if mode then
44788: LD_VAR 0 5
44792: IFFALSE 44861
// begin for i = 1 to result do
44794: LD_ADDR_VAR 0 7
44798: PUSH
44799: DOUBLE
44800: LD_INT 1
44802: DEC
44803: ST_TO_ADDR
44804: LD_VAR 0 6
44808: PUSH
44809: FOR_TO
44810: IFFALSE 44849
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44812: LD_ADDR_VAR 0 9
44816: PUSH
44817: LD_VAR 0 9
44821: PPUSH
44822: LD_VAR 0 7
44826: PPUSH
44827: LD_VAR 0 6
44831: PUSH
44832: LD_VAR 0 7
44836: ARRAY
44837: PUSH
44838: LD_INT 1
44840: ARRAY
44841: PPUSH
44842: CALL_OW 1
44846: ST_TO_ADDR
44847: GO 44809
44849: POP
44850: POP
// result := tmp ;
44851: LD_ADDR_VAR 0 6
44855: PUSH
44856: LD_VAR 0 9
44860: ST_TO_ADDR
// end ; end ;
44861: LD_VAR 0 6
44865: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44866: LD_INT 0
44868: PPUSH
44869: PPUSH
44870: PPUSH
44871: PPUSH
44872: PPUSH
44873: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44874: LD_ADDR_VAR 0 5
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: ST_TO_ADDR
// if not x or not y then
44896: LD_VAR 0 2
44900: NOT
44901: PUSH
44902: LD_VAR 0 3
44906: NOT
44907: OR
44908: IFFALSE 44912
// exit ;
44910: GO 46562
// if not range then
44912: LD_VAR 0 4
44916: NOT
44917: IFFALSE 44927
// range := 10 ;
44919: LD_ADDR_VAR 0 4
44923: PUSH
44924: LD_INT 10
44926: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44927: LD_ADDR_VAR 0 8
44931: PUSH
44932: LD_INT 81
44934: PUSH
44935: LD_VAR 0 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 92
44946: PUSH
44947: LD_VAR 0 2
44951: PUSH
44952: LD_VAR 0 3
44956: PUSH
44957: LD_VAR 0 4
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 3
44970: PUSH
44971: LD_INT 21
44973: PUSH
44974: LD_INT 3
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: LIST
44989: PPUSH
44990: CALL_OW 69
44994: ST_TO_ADDR
// if not tmp then
44995: LD_VAR 0 8
44999: NOT
45000: IFFALSE 45004
// exit ;
45002: GO 46562
// for i in tmp do
45004: LD_ADDR_VAR 0 6
45008: PUSH
45009: LD_VAR 0 8
45013: PUSH
45014: FOR_IN
45015: IFFALSE 46537
// begin points := [ 0 , 0 , 0 ] ;
45017: LD_ADDR_VAR 0 9
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: LIST
45035: ST_TO_ADDR
// bpoints := 1 ;
45036: LD_ADDR_VAR 0 10
45040: PUSH
45041: LD_INT 1
45043: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45044: LD_VAR 0 6
45048: PPUSH
45049: CALL_OW 247
45053: PUSH
45054: LD_INT 1
45056: DOUBLE
45057: EQUAL
45058: IFTRUE 45062
45060: GO 45640
45062: POP
// begin if GetClass ( i ) = 1 then
45063: LD_VAR 0 6
45067: PPUSH
45068: CALL_OW 257
45072: PUSH
45073: LD_INT 1
45075: EQUAL
45076: IFFALSE 45097
// points := [ 10 , 5 , 3 ] ;
45078: LD_ADDR_VAR 0 9
45082: PUSH
45083: LD_INT 10
45085: PUSH
45086: LD_INT 5
45088: PUSH
45089: LD_INT 3
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: LIST
45096: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45097: LD_VAR 0 6
45101: PPUSH
45102: CALL_OW 257
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 3
45112: PUSH
45113: LD_INT 4
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: LIST
45120: IN
45121: IFFALSE 45142
// points := [ 3 , 2 , 1 ] ;
45123: LD_ADDR_VAR 0 9
45127: PUSH
45128: LD_INT 3
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: LIST
45141: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45142: LD_VAR 0 6
45146: PPUSH
45147: CALL_OW 257
45151: PUSH
45152: LD_INT 5
45154: EQUAL
45155: IFFALSE 45176
// points := [ 130 , 5 , 2 ] ;
45157: LD_ADDR_VAR 0 9
45161: PUSH
45162: LD_INT 130
45164: PUSH
45165: LD_INT 5
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: LIST
45175: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45176: LD_VAR 0 6
45180: PPUSH
45181: CALL_OW 257
45185: PUSH
45186: LD_INT 8
45188: EQUAL
45189: IFFALSE 45210
// points := [ 35 , 35 , 30 ] ;
45191: LD_ADDR_VAR 0 9
45195: PUSH
45196: LD_INT 35
45198: PUSH
45199: LD_INT 35
45201: PUSH
45202: LD_INT 30
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: LIST
45209: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45210: LD_VAR 0 6
45214: PPUSH
45215: CALL_OW 257
45219: PUSH
45220: LD_INT 9
45222: EQUAL
45223: IFFALSE 45244
// points := [ 20 , 55 , 40 ] ;
45225: LD_ADDR_VAR 0 9
45229: PUSH
45230: LD_INT 20
45232: PUSH
45233: LD_INT 55
45235: PUSH
45236: LD_INT 40
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: LIST
45243: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45244: LD_VAR 0 6
45248: PPUSH
45249: CALL_OW 257
45253: PUSH
45254: LD_INT 12
45256: PUSH
45257: LD_INT 16
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: IN
45264: IFFALSE 45285
// points := [ 5 , 3 , 2 ] ;
45266: LD_ADDR_VAR 0 9
45270: PUSH
45271: LD_INT 5
45273: PUSH
45274: LD_INT 3
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: LIST
45284: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45285: LD_VAR 0 6
45289: PPUSH
45290: CALL_OW 257
45294: PUSH
45295: LD_INT 17
45297: EQUAL
45298: IFFALSE 45319
// points := [ 100 , 50 , 75 ] ;
45300: LD_ADDR_VAR 0 9
45304: PUSH
45305: LD_INT 100
45307: PUSH
45308: LD_INT 50
45310: PUSH
45311: LD_INT 75
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: LIST
45318: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45319: LD_VAR 0 6
45323: PPUSH
45324: CALL_OW 257
45328: PUSH
45329: LD_INT 15
45331: EQUAL
45332: IFFALSE 45353
// points := [ 10 , 5 , 3 ] ;
45334: LD_ADDR_VAR 0 9
45338: PUSH
45339: LD_INT 10
45341: PUSH
45342: LD_INT 5
45344: PUSH
45345: LD_INT 3
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45353: LD_VAR 0 6
45357: PPUSH
45358: CALL_OW 257
45362: PUSH
45363: LD_INT 14
45365: EQUAL
45366: IFFALSE 45387
// points := [ 10 , 0 , 0 ] ;
45368: LD_ADDR_VAR 0 9
45372: PUSH
45373: LD_INT 10
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: LIST
45386: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45387: LD_VAR 0 6
45391: PPUSH
45392: CALL_OW 257
45396: PUSH
45397: LD_INT 11
45399: EQUAL
45400: IFFALSE 45421
// points := [ 30 , 10 , 5 ] ;
45402: LD_ADDR_VAR 0 9
45406: PUSH
45407: LD_INT 30
45409: PUSH
45410: LD_INT 10
45412: PUSH
45413: LD_INT 5
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45421: LD_VAR 0 1
45425: PPUSH
45426: LD_INT 5
45428: PPUSH
45429: CALL_OW 321
45433: PUSH
45434: LD_INT 2
45436: EQUAL
45437: IFFALSE 45454
// bpoints := bpoints * 1.8 ;
45439: LD_ADDR_VAR 0 10
45443: PUSH
45444: LD_VAR 0 10
45448: PUSH
45449: LD_REAL  1.80000000000000E+0000
45452: MUL
45453: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45454: LD_VAR 0 6
45458: PPUSH
45459: CALL_OW 257
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: LD_INT 2
45469: PUSH
45470: LD_INT 3
45472: PUSH
45473: LD_INT 4
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: IN
45482: PUSH
45483: LD_VAR 0 1
45487: PPUSH
45488: LD_INT 51
45490: PPUSH
45491: CALL_OW 321
45495: PUSH
45496: LD_INT 2
45498: EQUAL
45499: AND
45500: IFFALSE 45517
// bpoints := bpoints * 1.2 ;
45502: LD_ADDR_VAR 0 10
45506: PUSH
45507: LD_VAR 0 10
45511: PUSH
45512: LD_REAL  1.20000000000000E+0000
45515: MUL
45516: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45517: LD_VAR 0 6
45521: PPUSH
45522: CALL_OW 257
45526: PUSH
45527: LD_INT 5
45529: PUSH
45530: LD_INT 7
45532: PUSH
45533: LD_INT 9
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: LIST
45540: IN
45541: PUSH
45542: LD_VAR 0 1
45546: PPUSH
45547: LD_INT 52
45549: PPUSH
45550: CALL_OW 321
45554: PUSH
45555: LD_INT 2
45557: EQUAL
45558: AND
45559: IFFALSE 45576
// bpoints := bpoints * 1.5 ;
45561: LD_ADDR_VAR 0 10
45565: PUSH
45566: LD_VAR 0 10
45570: PUSH
45571: LD_REAL  1.50000000000000E+0000
45574: MUL
45575: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45576: LD_VAR 0 1
45580: PPUSH
45581: LD_INT 66
45583: PPUSH
45584: CALL_OW 321
45588: PUSH
45589: LD_INT 2
45591: EQUAL
45592: IFFALSE 45609
// bpoints := bpoints * 1.1 ;
45594: LD_ADDR_VAR 0 10
45598: PUSH
45599: LD_VAR 0 10
45603: PUSH
45604: LD_REAL  1.10000000000000E+0000
45607: MUL
45608: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45609: LD_ADDR_VAR 0 10
45613: PUSH
45614: LD_VAR 0 10
45618: PUSH
45619: LD_VAR 0 6
45623: PPUSH
45624: LD_INT 1
45626: PPUSH
45627: CALL_OW 259
45631: PUSH
45632: LD_REAL  1.15000000000000E+0000
45635: MUL
45636: MUL
45637: ST_TO_ADDR
// end ; unit_vehicle :
45638: GO 46466
45640: LD_INT 2
45642: DOUBLE
45643: EQUAL
45644: IFTRUE 45648
45646: GO 46454
45648: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45649: LD_VAR 0 6
45653: PPUSH
45654: CALL_OW 264
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: LD_INT 42
45664: PUSH
45665: LD_INT 24
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: IN
45673: IFFALSE 45694
// points := [ 25 , 5 , 3 ] ;
45675: LD_ADDR_VAR 0 9
45679: PUSH
45680: LD_INT 25
45682: PUSH
45683: LD_INT 5
45685: PUSH
45686: LD_INT 3
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: LIST
45693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45694: LD_VAR 0 6
45698: PPUSH
45699: CALL_OW 264
45703: PUSH
45704: LD_INT 4
45706: PUSH
45707: LD_INT 43
45709: PUSH
45710: LD_INT 25
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: LIST
45717: IN
45718: IFFALSE 45739
// points := [ 40 , 15 , 5 ] ;
45720: LD_ADDR_VAR 0 9
45724: PUSH
45725: LD_INT 40
45727: PUSH
45728: LD_INT 15
45730: PUSH
45731: LD_INT 5
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: LIST
45738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45739: LD_VAR 0 6
45743: PPUSH
45744: CALL_OW 264
45748: PUSH
45749: LD_INT 3
45751: PUSH
45752: LD_INT 23
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: IN
45759: IFFALSE 45780
// points := [ 7 , 25 , 8 ] ;
45761: LD_ADDR_VAR 0 9
45765: PUSH
45766: LD_INT 7
45768: PUSH
45769: LD_INT 25
45771: PUSH
45772: LD_INT 8
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45780: LD_VAR 0 6
45784: PPUSH
45785: CALL_OW 264
45789: PUSH
45790: LD_INT 5
45792: PUSH
45793: LD_INT 27
45795: PUSH
45796: LD_INT 44
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: LIST
45803: IN
45804: IFFALSE 45825
// points := [ 14 , 50 , 16 ] ;
45806: LD_ADDR_VAR 0 9
45810: PUSH
45811: LD_INT 14
45813: PUSH
45814: LD_INT 50
45816: PUSH
45817: LD_INT 16
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: LIST
45824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45825: LD_VAR 0 6
45829: PPUSH
45830: CALL_OW 264
45834: PUSH
45835: LD_INT 6
45837: PUSH
45838: LD_INT 46
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: IN
45845: IFFALSE 45866
// points := [ 32 , 120 , 70 ] ;
45847: LD_ADDR_VAR 0 9
45851: PUSH
45852: LD_INT 32
45854: PUSH
45855: LD_INT 120
45857: PUSH
45858: LD_INT 70
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: LIST
45865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45866: LD_VAR 0 6
45870: PPUSH
45871: CALL_OW 264
45875: PUSH
45876: LD_INT 7
45878: PUSH
45879: LD_INT 28
45881: PUSH
45882: LD_INT 45
45884: PUSH
45885: LD_INT 92
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: IN
45894: IFFALSE 45915
// points := [ 35 , 20 , 45 ] ;
45896: LD_ADDR_VAR 0 9
45900: PUSH
45901: LD_INT 35
45903: PUSH
45904: LD_INT 20
45906: PUSH
45907: LD_INT 45
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: LIST
45914: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45915: LD_VAR 0 6
45919: PPUSH
45920: CALL_OW 264
45924: PUSH
45925: LD_INT 47
45927: PUSH
45928: EMPTY
45929: LIST
45930: IN
45931: IFFALSE 45952
// points := [ 67 , 45 , 75 ] ;
45933: LD_ADDR_VAR 0 9
45937: PUSH
45938: LD_INT 67
45940: PUSH
45941: LD_INT 45
45943: PUSH
45944: LD_INT 75
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: LIST
45951: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45952: LD_VAR 0 6
45956: PPUSH
45957: CALL_OW 264
45961: PUSH
45962: LD_INT 26
45964: PUSH
45965: EMPTY
45966: LIST
45967: IN
45968: IFFALSE 45989
// points := [ 120 , 30 , 80 ] ;
45970: LD_ADDR_VAR 0 9
45974: PUSH
45975: LD_INT 120
45977: PUSH
45978: LD_INT 30
45980: PUSH
45981: LD_INT 80
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: LIST
45988: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45989: LD_VAR 0 6
45993: PPUSH
45994: CALL_OW 264
45998: PUSH
45999: LD_INT 22
46001: PUSH
46002: EMPTY
46003: LIST
46004: IN
46005: IFFALSE 46026
// points := [ 40 , 1 , 1 ] ;
46007: LD_ADDR_VAR 0 9
46011: PUSH
46012: LD_INT 40
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: LIST
46025: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46026: LD_VAR 0 6
46030: PPUSH
46031: CALL_OW 264
46035: PUSH
46036: LD_INT 29
46038: PUSH
46039: EMPTY
46040: LIST
46041: IN
46042: IFFALSE 46063
// points := [ 70 , 200 , 400 ] ;
46044: LD_ADDR_VAR 0 9
46048: PUSH
46049: LD_INT 70
46051: PUSH
46052: LD_INT 200
46054: PUSH
46055: LD_INT 400
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: LIST
46062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46063: LD_VAR 0 6
46067: PPUSH
46068: CALL_OW 264
46072: PUSH
46073: LD_INT 14
46075: PUSH
46076: LD_INT 53
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: IN
46083: IFFALSE 46104
// points := [ 40 , 10 , 20 ] ;
46085: LD_ADDR_VAR 0 9
46089: PUSH
46090: LD_INT 40
46092: PUSH
46093: LD_INT 10
46095: PUSH
46096: LD_INT 20
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46104: LD_VAR 0 6
46108: PPUSH
46109: CALL_OW 264
46113: PUSH
46114: LD_INT 9
46116: PUSH
46117: EMPTY
46118: LIST
46119: IN
46120: IFFALSE 46141
// points := [ 5 , 70 , 20 ] ;
46122: LD_ADDR_VAR 0 9
46126: PUSH
46127: LD_INT 5
46129: PUSH
46130: LD_INT 70
46132: PUSH
46133: LD_INT 20
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: LIST
46140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46141: LD_VAR 0 6
46145: PPUSH
46146: CALL_OW 264
46150: PUSH
46151: LD_INT 10
46153: PUSH
46154: EMPTY
46155: LIST
46156: IN
46157: IFFALSE 46178
// points := [ 35 , 110 , 70 ] ;
46159: LD_ADDR_VAR 0 9
46163: PUSH
46164: LD_INT 35
46166: PUSH
46167: LD_INT 110
46169: PUSH
46170: LD_INT 70
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: LIST
46177: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46178: LD_VAR 0 6
46182: PPUSH
46183: CALL_OW 265
46187: PUSH
46188: LD_INT 25
46190: EQUAL
46191: IFFALSE 46212
// points := [ 80 , 65 , 100 ] ;
46193: LD_ADDR_VAR 0 9
46197: PUSH
46198: LD_INT 80
46200: PUSH
46201: LD_INT 65
46203: PUSH
46204: LD_INT 100
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46212: LD_VAR 0 6
46216: PPUSH
46217: CALL_OW 263
46221: PUSH
46222: LD_INT 1
46224: EQUAL
46225: IFFALSE 46260
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46227: LD_ADDR_VAR 0 10
46231: PUSH
46232: LD_VAR 0 10
46236: PUSH
46237: LD_VAR 0 6
46241: PPUSH
46242: CALL_OW 311
46246: PPUSH
46247: LD_INT 3
46249: PPUSH
46250: CALL_OW 259
46254: PUSH
46255: LD_INT 4
46257: MUL
46258: MUL
46259: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46260: LD_VAR 0 6
46264: PPUSH
46265: CALL_OW 263
46269: PUSH
46270: LD_INT 2
46272: EQUAL
46273: IFFALSE 46324
// begin j := IsControledBy ( i ) ;
46275: LD_ADDR_VAR 0 7
46279: PUSH
46280: LD_VAR 0 6
46284: PPUSH
46285: CALL_OW 312
46289: ST_TO_ADDR
// if j then
46290: LD_VAR 0 7
46294: IFFALSE 46324
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46296: LD_ADDR_VAR 0 10
46300: PUSH
46301: LD_VAR 0 10
46305: PUSH
46306: LD_VAR 0 7
46310: PPUSH
46311: LD_INT 3
46313: PPUSH
46314: CALL_OW 259
46318: PUSH
46319: LD_INT 3
46321: MUL
46322: MUL
46323: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46324: LD_VAR 0 6
46328: PPUSH
46329: CALL_OW 264
46333: PUSH
46334: LD_INT 5
46336: PUSH
46337: LD_INT 6
46339: PUSH
46340: LD_INT 46
46342: PUSH
46343: LD_INT 44
46345: PUSH
46346: LD_INT 47
46348: PUSH
46349: LD_INT 45
46351: PUSH
46352: LD_INT 28
46354: PUSH
46355: LD_INT 7
46357: PUSH
46358: LD_INT 27
46360: PUSH
46361: LD_INT 29
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: IN
46376: PUSH
46377: LD_VAR 0 1
46381: PPUSH
46382: LD_INT 52
46384: PPUSH
46385: CALL_OW 321
46389: PUSH
46390: LD_INT 2
46392: EQUAL
46393: AND
46394: IFFALSE 46411
// bpoints := bpoints * 1.2 ;
46396: LD_ADDR_VAR 0 10
46400: PUSH
46401: LD_VAR 0 10
46405: PUSH
46406: LD_REAL  1.20000000000000E+0000
46409: MUL
46410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46411: LD_VAR 0 6
46415: PPUSH
46416: CALL_OW 264
46420: PUSH
46421: LD_INT 6
46423: PUSH
46424: LD_INT 46
46426: PUSH
46427: LD_INT 47
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: LIST
46434: IN
46435: IFFALSE 46452
// bpoints := bpoints * 1.2 ;
46437: LD_ADDR_VAR 0 10
46441: PUSH
46442: LD_VAR 0 10
46446: PUSH
46447: LD_REAL  1.20000000000000E+0000
46450: MUL
46451: ST_TO_ADDR
// end ; unit_building :
46452: GO 46466
46454: LD_INT 3
46456: DOUBLE
46457: EQUAL
46458: IFTRUE 46462
46460: GO 46465
46462: POP
// ; end ;
46463: GO 46466
46465: POP
// for j = 1 to 3 do
46466: LD_ADDR_VAR 0 7
46470: PUSH
46471: DOUBLE
46472: LD_INT 1
46474: DEC
46475: ST_TO_ADDR
46476: LD_INT 3
46478: PUSH
46479: FOR_TO
46480: IFFALSE 46533
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46482: LD_ADDR_VAR 0 5
46486: PUSH
46487: LD_VAR 0 5
46491: PPUSH
46492: LD_VAR 0 7
46496: PPUSH
46497: LD_VAR 0 5
46501: PUSH
46502: LD_VAR 0 7
46506: ARRAY
46507: PUSH
46508: LD_VAR 0 9
46512: PUSH
46513: LD_VAR 0 7
46517: ARRAY
46518: PUSH
46519: LD_VAR 0 10
46523: MUL
46524: PLUS
46525: PPUSH
46526: CALL_OW 1
46530: ST_TO_ADDR
46531: GO 46479
46533: POP
46534: POP
// end ;
46535: GO 45014
46537: POP
46538: POP
// result := Replace ( result , 4 , tmp ) ;
46539: LD_ADDR_VAR 0 5
46543: PUSH
46544: LD_VAR 0 5
46548: PPUSH
46549: LD_INT 4
46551: PPUSH
46552: LD_VAR 0 8
46556: PPUSH
46557: CALL_OW 1
46561: ST_TO_ADDR
// end ;
46562: LD_VAR 0 5
46566: RET
// export function DangerAtRange ( unit , range ) ; begin
46567: LD_INT 0
46569: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46570: LD_ADDR_VAR 0 3
46574: PUSH
46575: LD_VAR 0 1
46579: PPUSH
46580: CALL_OW 255
46584: PPUSH
46585: LD_VAR 0 1
46589: PPUSH
46590: CALL_OW 250
46594: PPUSH
46595: LD_VAR 0 1
46599: PPUSH
46600: CALL_OW 251
46604: PPUSH
46605: LD_VAR 0 2
46609: PPUSH
46610: CALL 44866 0 4
46614: ST_TO_ADDR
// end ;
46615: LD_VAR 0 3
46619: RET
// export function DangerInArea ( side , area ) ; begin
46620: LD_INT 0
46622: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46623: LD_ADDR_VAR 0 3
46627: PUSH
46628: LD_VAR 0 2
46632: PPUSH
46633: LD_INT 81
46635: PUSH
46636: LD_VAR 0 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PPUSH
46645: CALL_OW 70
46649: ST_TO_ADDR
// end ;
46650: LD_VAR 0 3
46654: RET
// export function IsExtension ( b ) ; begin
46655: LD_INT 0
46657: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46658: LD_ADDR_VAR 0 2
46662: PUSH
46663: LD_VAR 0 1
46667: PUSH
46668: LD_INT 23
46670: PUSH
46671: LD_INT 20
46673: PUSH
46674: LD_INT 22
46676: PUSH
46677: LD_INT 17
46679: PUSH
46680: LD_INT 24
46682: PUSH
46683: LD_INT 21
46685: PUSH
46686: LD_INT 19
46688: PUSH
46689: LD_INT 16
46691: PUSH
46692: LD_INT 25
46694: PUSH
46695: LD_INT 18
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: IN
46710: ST_TO_ADDR
// end ;
46711: LD_VAR 0 2
46715: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46716: LD_INT 0
46718: PPUSH
46719: PPUSH
46720: PPUSH
// result := [ ] ;
46721: LD_ADDR_VAR 0 4
46725: PUSH
46726: EMPTY
46727: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46728: LD_ADDR_VAR 0 5
46732: PUSH
46733: LD_VAR 0 2
46737: PPUSH
46738: LD_INT 21
46740: PUSH
46741: LD_INT 3
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PPUSH
46748: CALL_OW 70
46752: ST_TO_ADDR
// if not tmp then
46753: LD_VAR 0 5
46757: NOT
46758: IFFALSE 46762
// exit ;
46760: GO 46826
// if checkLink then
46762: LD_VAR 0 3
46766: IFFALSE 46816
// begin for i in tmp do
46768: LD_ADDR_VAR 0 6
46772: PUSH
46773: LD_VAR 0 5
46777: PUSH
46778: FOR_IN
46779: IFFALSE 46814
// if GetBase ( i ) <> base then
46781: LD_VAR 0 6
46785: PPUSH
46786: CALL_OW 274
46790: PUSH
46791: LD_VAR 0 1
46795: NONEQUAL
46796: IFFALSE 46812
// ComLinkToBase ( base , i ) ;
46798: LD_VAR 0 1
46802: PPUSH
46803: LD_VAR 0 6
46807: PPUSH
46808: CALL_OW 169
46812: GO 46778
46814: POP
46815: POP
// end ; result := tmp ;
46816: LD_ADDR_VAR 0 4
46820: PUSH
46821: LD_VAR 0 5
46825: ST_TO_ADDR
// end ;
46826: LD_VAR 0 4
46830: RET
// export function ComComplete ( units , b ) ; var i ; begin
46831: LD_INT 0
46833: PPUSH
46834: PPUSH
// if not units then
46835: LD_VAR 0 1
46839: NOT
46840: IFFALSE 46844
// exit ;
46842: GO 46934
// for i in units do
46844: LD_ADDR_VAR 0 4
46848: PUSH
46849: LD_VAR 0 1
46853: PUSH
46854: FOR_IN
46855: IFFALSE 46932
// if BuildingStatus ( b ) = bs_build then
46857: LD_VAR 0 2
46861: PPUSH
46862: CALL_OW 461
46866: PUSH
46867: LD_INT 1
46869: EQUAL
46870: IFFALSE 46930
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46872: LD_VAR 0 4
46876: PPUSH
46877: LD_STRING h
46879: PUSH
46880: LD_VAR 0 2
46884: PPUSH
46885: CALL_OW 250
46889: PUSH
46890: LD_VAR 0 2
46894: PPUSH
46895: CALL_OW 251
46899: PUSH
46900: LD_VAR 0 2
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: PUSH
46923: EMPTY
46924: LIST
46925: PPUSH
46926: CALL_OW 446
46930: GO 46854
46932: POP
46933: POP
// end ;
46934: LD_VAR 0 3
46938: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46939: LD_INT 0
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46947: LD_VAR 0 1
46951: NOT
46952: PUSH
46953: LD_VAR 0 1
46957: PPUSH
46958: CALL_OW 263
46962: PUSH
46963: LD_INT 2
46965: NONEQUAL
46966: OR
46967: IFFALSE 46971
// exit ;
46969: GO 47287
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46971: LD_ADDR_VAR 0 6
46975: PUSH
46976: LD_INT 22
46978: PUSH
46979: LD_VAR 0 1
46983: PPUSH
46984: CALL_OW 255
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: LD_INT 30
46998: PUSH
46999: LD_INT 36
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 34
47008: PUSH
47009: LD_INT 31
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: LIST
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PPUSH
47025: CALL_OW 69
47029: ST_TO_ADDR
// if not tmp then
47030: LD_VAR 0 6
47034: NOT
47035: IFFALSE 47039
// exit ;
47037: GO 47287
// result := [ ] ;
47039: LD_ADDR_VAR 0 2
47043: PUSH
47044: EMPTY
47045: ST_TO_ADDR
// for i in tmp do
47046: LD_ADDR_VAR 0 3
47050: PUSH
47051: LD_VAR 0 6
47055: PUSH
47056: FOR_IN
47057: IFFALSE 47128
// begin t := UnitsInside ( i ) ;
47059: LD_ADDR_VAR 0 4
47063: PUSH
47064: LD_VAR 0 3
47068: PPUSH
47069: CALL_OW 313
47073: ST_TO_ADDR
// if t then
47074: LD_VAR 0 4
47078: IFFALSE 47126
// for j in t do
47080: LD_ADDR_VAR 0 7
47084: PUSH
47085: LD_VAR 0 4
47089: PUSH
47090: FOR_IN
47091: IFFALSE 47124
// result := Replace ( result , result + 1 , j ) ;
47093: LD_ADDR_VAR 0 2
47097: PUSH
47098: LD_VAR 0 2
47102: PPUSH
47103: LD_VAR 0 2
47107: PUSH
47108: LD_INT 1
47110: PLUS
47111: PPUSH
47112: LD_VAR 0 7
47116: PPUSH
47117: CALL_OW 1
47121: ST_TO_ADDR
47122: GO 47090
47124: POP
47125: POP
// end ;
47126: GO 47056
47128: POP
47129: POP
// if not result then
47130: LD_VAR 0 2
47134: NOT
47135: IFFALSE 47139
// exit ;
47137: GO 47287
// mech := result [ 1 ] ;
47139: LD_ADDR_VAR 0 5
47143: PUSH
47144: LD_VAR 0 2
47148: PUSH
47149: LD_INT 1
47151: ARRAY
47152: ST_TO_ADDR
// if result > 1 then
47153: LD_VAR 0 2
47157: PUSH
47158: LD_INT 1
47160: GREATER
47161: IFFALSE 47273
// begin for i = 2 to result do
47163: LD_ADDR_VAR 0 3
47167: PUSH
47168: DOUBLE
47169: LD_INT 2
47171: DEC
47172: ST_TO_ADDR
47173: LD_VAR 0 2
47177: PUSH
47178: FOR_TO
47179: IFFALSE 47271
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47181: LD_ADDR_VAR 0 4
47185: PUSH
47186: LD_VAR 0 2
47190: PUSH
47191: LD_VAR 0 3
47195: ARRAY
47196: PPUSH
47197: LD_INT 3
47199: PPUSH
47200: CALL_OW 259
47204: PUSH
47205: LD_VAR 0 2
47209: PUSH
47210: LD_VAR 0 3
47214: ARRAY
47215: PPUSH
47216: CALL_OW 432
47220: MINUS
47221: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47222: LD_VAR 0 4
47226: PUSH
47227: LD_VAR 0 5
47231: PPUSH
47232: LD_INT 3
47234: PPUSH
47235: CALL_OW 259
47239: PUSH
47240: LD_VAR 0 5
47244: PPUSH
47245: CALL_OW 432
47249: MINUS
47250: GREATEREQUAL
47251: IFFALSE 47269
// mech := result [ i ] ;
47253: LD_ADDR_VAR 0 5
47257: PUSH
47258: LD_VAR 0 2
47262: PUSH
47263: LD_VAR 0 3
47267: ARRAY
47268: ST_TO_ADDR
// end ;
47269: GO 47178
47271: POP
47272: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47273: LD_VAR 0 1
47277: PPUSH
47278: LD_VAR 0 5
47282: PPUSH
47283: CALL_OW 135
// end ;
47287: LD_VAR 0 2
47291: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47292: LD_INT 0
47294: PPUSH
47295: PPUSH
47296: PPUSH
47297: PPUSH
47298: PPUSH
47299: PPUSH
47300: PPUSH
47301: PPUSH
47302: PPUSH
47303: PPUSH
47304: PPUSH
47305: PPUSH
47306: PPUSH
// result := [ ] ;
47307: LD_ADDR_VAR 0 7
47311: PUSH
47312: EMPTY
47313: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47314: LD_VAR 0 1
47318: PPUSH
47319: CALL_OW 266
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: IN
47334: NOT
47335: IFFALSE 47339
// exit ;
47337: GO 48973
// if name then
47339: LD_VAR 0 3
47343: IFFALSE 47359
// SetBName ( base_dep , name ) ;
47345: LD_VAR 0 1
47349: PPUSH
47350: LD_VAR 0 3
47354: PPUSH
47355: CALL_OW 500
// base := GetBase ( base_dep ) ;
47359: LD_ADDR_VAR 0 15
47363: PUSH
47364: LD_VAR 0 1
47368: PPUSH
47369: CALL_OW 274
47373: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47374: LD_ADDR_VAR 0 16
47378: PUSH
47379: LD_VAR 0 1
47383: PPUSH
47384: CALL_OW 255
47388: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47389: LD_ADDR_VAR 0 17
47393: PUSH
47394: LD_VAR 0 1
47398: PPUSH
47399: CALL_OW 248
47403: ST_TO_ADDR
// if sources then
47404: LD_VAR 0 5
47408: IFFALSE 47455
// for i = 1 to 3 do
47410: LD_ADDR_VAR 0 8
47414: PUSH
47415: DOUBLE
47416: LD_INT 1
47418: DEC
47419: ST_TO_ADDR
47420: LD_INT 3
47422: PUSH
47423: FOR_TO
47424: IFFALSE 47453
// AddResourceType ( base , i , sources [ i ] ) ;
47426: LD_VAR 0 15
47430: PPUSH
47431: LD_VAR 0 8
47435: PPUSH
47436: LD_VAR 0 5
47440: PUSH
47441: LD_VAR 0 8
47445: ARRAY
47446: PPUSH
47447: CALL_OW 276
47451: GO 47423
47453: POP
47454: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47455: LD_ADDR_VAR 0 18
47459: PUSH
47460: LD_VAR 0 15
47464: PPUSH
47465: LD_VAR 0 2
47469: PPUSH
47470: LD_INT 1
47472: PPUSH
47473: CALL 46716 0 3
47477: ST_TO_ADDR
// InitHc ;
47478: CALL_OW 19
// InitUc ;
47482: CALL_OW 18
// uc_side := side ;
47486: LD_ADDR_OWVAR 20
47490: PUSH
47491: LD_VAR 0 16
47495: ST_TO_ADDR
// uc_nation := nation ;
47496: LD_ADDR_OWVAR 21
47500: PUSH
47501: LD_VAR 0 17
47505: ST_TO_ADDR
// if buildings then
47506: LD_VAR 0 18
47510: IFFALSE 48832
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47512: LD_ADDR_VAR 0 19
47516: PUSH
47517: LD_VAR 0 18
47521: PPUSH
47522: LD_INT 2
47524: PUSH
47525: LD_INT 30
47527: PUSH
47528: LD_INT 29
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 30
47537: PUSH
47538: LD_INT 30
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: PPUSH
47550: CALL_OW 72
47554: ST_TO_ADDR
// if tmp then
47555: LD_VAR 0 19
47559: IFFALSE 47607
// for i in tmp do
47561: LD_ADDR_VAR 0 8
47565: PUSH
47566: LD_VAR 0 19
47570: PUSH
47571: FOR_IN
47572: IFFALSE 47605
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47574: LD_VAR 0 8
47578: PPUSH
47579: CALL_OW 250
47583: PPUSH
47584: LD_VAR 0 8
47588: PPUSH
47589: CALL_OW 251
47593: PPUSH
47594: LD_VAR 0 16
47598: PPUSH
47599: CALL_OW 441
47603: GO 47571
47605: POP
47606: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47607: LD_VAR 0 18
47611: PPUSH
47612: LD_INT 2
47614: PUSH
47615: LD_INT 30
47617: PUSH
47618: LD_INT 32
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 30
47627: PUSH
47628: LD_INT 33
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: LIST
47639: PPUSH
47640: CALL_OW 72
47644: IFFALSE 47732
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47646: LD_ADDR_VAR 0 8
47650: PUSH
47651: LD_VAR 0 18
47655: PPUSH
47656: LD_INT 2
47658: PUSH
47659: LD_INT 30
47661: PUSH
47662: LD_INT 32
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 30
47671: PUSH
47672: LD_INT 33
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: LIST
47683: PPUSH
47684: CALL_OW 72
47688: PUSH
47689: FOR_IN
47690: IFFALSE 47730
// begin if not GetBWeapon ( i ) then
47692: LD_VAR 0 8
47696: PPUSH
47697: CALL_OW 269
47701: NOT
47702: IFFALSE 47728
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47704: LD_VAR 0 8
47708: PPUSH
47709: LD_VAR 0 8
47713: PPUSH
47714: LD_VAR 0 2
47718: PPUSH
47719: CALL 48978 0 2
47723: PPUSH
47724: CALL_OW 431
// end ;
47728: GO 47689
47730: POP
47731: POP
// end ; for i = 1 to personel do
47732: LD_ADDR_VAR 0 8
47736: PUSH
47737: DOUBLE
47738: LD_INT 1
47740: DEC
47741: ST_TO_ADDR
47742: LD_VAR 0 6
47746: PUSH
47747: FOR_TO
47748: IFFALSE 48812
// begin if i > 4 then
47750: LD_VAR 0 8
47754: PUSH
47755: LD_INT 4
47757: GREATER
47758: IFFALSE 47762
// break ;
47760: GO 48812
// case i of 1 :
47762: LD_VAR 0 8
47766: PUSH
47767: LD_INT 1
47769: DOUBLE
47770: EQUAL
47771: IFTRUE 47775
47773: GO 47855
47775: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47776: LD_ADDR_VAR 0 12
47780: PUSH
47781: LD_VAR 0 18
47785: PPUSH
47786: LD_INT 22
47788: PUSH
47789: LD_VAR 0 16
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 58
47800: PUSH
47801: EMPTY
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: LD_INT 30
47809: PUSH
47810: LD_INT 32
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 30
47819: PUSH
47820: LD_INT 4
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 30
47829: PUSH
47830: LD_INT 5
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: LIST
47847: PPUSH
47848: CALL_OW 72
47852: ST_TO_ADDR
47853: GO 48077
47855: LD_INT 2
47857: DOUBLE
47858: EQUAL
47859: IFTRUE 47863
47861: GO 47925
47863: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47864: LD_ADDR_VAR 0 12
47868: PUSH
47869: LD_VAR 0 18
47873: PPUSH
47874: LD_INT 22
47876: PUSH
47877: LD_VAR 0 16
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: LD_INT 30
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 30
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PPUSH
47918: CALL_OW 72
47922: ST_TO_ADDR
47923: GO 48077
47925: LD_INT 3
47927: DOUBLE
47928: EQUAL
47929: IFTRUE 47933
47931: GO 47995
47933: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47934: LD_ADDR_VAR 0 12
47938: PUSH
47939: LD_VAR 0 18
47943: PPUSH
47944: LD_INT 22
47946: PUSH
47947: LD_VAR 0 16
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: PUSH
47959: LD_INT 30
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 30
47971: PUSH
47972: LD_INT 3
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PPUSH
47988: CALL_OW 72
47992: ST_TO_ADDR
47993: GO 48077
47995: LD_INT 4
47997: DOUBLE
47998: EQUAL
47999: IFTRUE 48003
48001: GO 48076
48003: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48004: LD_ADDR_VAR 0 12
48008: PUSH
48009: LD_VAR 0 18
48013: PPUSH
48014: LD_INT 22
48016: PUSH
48017: LD_VAR 0 16
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: LD_INT 30
48031: PUSH
48032: LD_INT 6
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 30
48041: PUSH
48042: LD_INT 7
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 30
48051: PUSH
48052: LD_INT 8
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PPUSH
48069: CALL_OW 72
48073: ST_TO_ADDR
48074: GO 48077
48076: POP
// if i = 1 then
48077: LD_VAR 0 8
48081: PUSH
48082: LD_INT 1
48084: EQUAL
48085: IFFALSE 48196
// begin tmp := [ ] ;
48087: LD_ADDR_VAR 0 19
48091: PUSH
48092: EMPTY
48093: ST_TO_ADDR
// for j in f do
48094: LD_ADDR_VAR 0 9
48098: PUSH
48099: LD_VAR 0 12
48103: PUSH
48104: FOR_IN
48105: IFFALSE 48178
// if GetBType ( j ) = b_bunker then
48107: LD_VAR 0 9
48111: PPUSH
48112: CALL_OW 266
48116: PUSH
48117: LD_INT 32
48119: EQUAL
48120: IFFALSE 48147
// tmp := Insert ( tmp , 1 , j ) else
48122: LD_ADDR_VAR 0 19
48126: PUSH
48127: LD_VAR 0 19
48131: PPUSH
48132: LD_INT 1
48134: PPUSH
48135: LD_VAR 0 9
48139: PPUSH
48140: CALL_OW 2
48144: ST_TO_ADDR
48145: GO 48176
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48147: LD_ADDR_VAR 0 19
48151: PUSH
48152: LD_VAR 0 19
48156: PPUSH
48157: LD_VAR 0 19
48161: PUSH
48162: LD_INT 1
48164: PLUS
48165: PPUSH
48166: LD_VAR 0 9
48170: PPUSH
48171: CALL_OW 2
48175: ST_TO_ADDR
48176: GO 48104
48178: POP
48179: POP
// if tmp then
48180: LD_VAR 0 19
48184: IFFALSE 48196
// f := tmp ;
48186: LD_ADDR_VAR 0 12
48190: PUSH
48191: LD_VAR 0 19
48195: ST_TO_ADDR
// end ; x := personel [ i ] ;
48196: LD_ADDR_VAR 0 13
48200: PUSH
48201: LD_VAR 0 6
48205: PUSH
48206: LD_VAR 0 8
48210: ARRAY
48211: ST_TO_ADDR
// if x = - 1 then
48212: LD_VAR 0 13
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: EQUAL
48221: IFFALSE 48430
// begin for j in f do
48223: LD_ADDR_VAR 0 9
48227: PUSH
48228: LD_VAR 0 12
48232: PUSH
48233: FOR_IN
48234: IFFALSE 48426
// repeat InitHc ;
48236: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48240: LD_VAR 0 9
48244: PPUSH
48245: CALL_OW 266
48249: PUSH
48250: LD_INT 5
48252: EQUAL
48253: IFFALSE 48323
// begin if UnitsInside ( j ) < 3 then
48255: LD_VAR 0 9
48259: PPUSH
48260: CALL_OW 313
48264: PUSH
48265: LD_INT 3
48267: LESS
48268: IFFALSE 48304
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48270: LD_INT 0
48272: PPUSH
48273: LD_INT 5
48275: PUSH
48276: LD_INT 8
48278: PUSH
48279: LD_INT 9
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: LIST
48286: PUSH
48287: LD_VAR 0 17
48291: ARRAY
48292: PPUSH
48293: LD_VAR 0 4
48297: PPUSH
48298: CALL_OW 380
48302: GO 48321
// PrepareHuman ( false , i , skill ) ;
48304: LD_INT 0
48306: PPUSH
48307: LD_VAR 0 8
48311: PPUSH
48312: LD_VAR 0 4
48316: PPUSH
48317: CALL_OW 380
// end else
48321: GO 48340
// PrepareHuman ( false , i , skill ) ;
48323: LD_INT 0
48325: PPUSH
48326: LD_VAR 0 8
48330: PPUSH
48331: LD_VAR 0 4
48335: PPUSH
48336: CALL_OW 380
// un := CreateHuman ;
48340: LD_ADDR_VAR 0 14
48344: PUSH
48345: CALL_OW 44
48349: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48350: LD_ADDR_VAR 0 7
48354: PUSH
48355: LD_VAR 0 7
48359: PPUSH
48360: LD_INT 1
48362: PPUSH
48363: LD_VAR 0 14
48367: PPUSH
48368: CALL_OW 2
48372: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48373: LD_VAR 0 14
48377: PPUSH
48378: LD_VAR 0 9
48382: PPUSH
48383: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48387: LD_VAR 0 9
48391: PPUSH
48392: CALL_OW 313
48396: PUSH
48397: LD_INT 6
48399: EQUAL
48400: PUSH
48401: LD_VAR 0 9
48405: PPUSH
48406: CALL_OW 266
48410: PUSH
48411: LD_INT 32
48413: PUSH
48414: LD_INT 31
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: IN
48421: OR
48422: IFFALSE 48236
48424: GO 48233
48426: POP
48427: POP
// end else
48428: GO 48810
// for j = 1 to x do
48430: LD_ADDR_VAR 0 9
48434: PUSH
48435: DOUBLE
48436: LD_INT 1
48438: DEC
48439: ST_TO_ADDR
48440: LD_VAR 0 13
48444: PUSH
48445: FOR_TO
48446: IFFALSE 48808
// begin InitHc ;
48448: CALL_OW 19
// if not f then
48452: LD_VAR 0 12
48456: NOT
48457: IFFALSE 48546
// begin PrepareHuman ( false , i , skill ) ;
48459: LD_INT 0
48461: PPUSH
48462: LD_VAR 0 8
48466: PPUSH
48467: LD_VAR 0 4
48471: PPUSH
48472: CALL_OW 380
// un := CreateHuman ;
48476: LD_ADDR_VAR 0 14
48480: PUSH
48481: CALL_OW 44
48485: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48486: LD_ADDR_VAR 0 7
48490: PUSH
48491: LD_VAR 0 7
48495: PPUSH
48496: LD_INT 1
48498: PPUSH
48499: LD_VAR 0 14
48503: PPUSH
48504: CALL_OW 2
48508: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48509: LD_VAR 0 14
48513: PPUSH
48514: LD_VAR 0 1
48518: PPUSH
48519: CALL_OW 250
48523: PPUSH
48524: LD_VAR 0 1
48528: PPUSH
48529: CALL_OW 251
48533: PPUSH
48534: LD_INT 10
48536: PPUSH
48537: LD_INT 0
48539: PPUSH
48540: CALL_OW 50
// continue ;
48544: GO 48445
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48546: LD_VAR 0 12
48550: PUSH
48551: LD_INT 1
48553: ARRAY
48554: PPUSH
48555: CALL_OW 313
48559: PUSH
48560: LD_VAR 0 12
48564: PUSH
48565: LD_INT 1
48567: ARRAY
48568: PPUSH
48569: CALL_OW 266
48573: PUSH
48574: LD_INT 32
48576: PUSH
48577: LD_INT 31
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: IN
48584: AND
48585: PUSH
48586: LD_VAR 0 12
48590: PUSH
48591: LD_INT 1
48593: ARRAY
48594: PPUSH
48595: CALL_OW 313
48599: PUSH
48600: LD_INT 6
48602: EQUAL
48603: OR
48604: IFFALSE 48624
// f := Delete ( f , 1 ) ;
48606: LD_ADDR_VAR 0 12
48610: PUSH
48611: LD_VAR 0 12
48615: PPUSH
48616: LD_INT 1
48618: PPUSH
48619: CALL_OW 3
48623: ST_TO_ADDR
// if not f then
48624: LD_VAR 0 12
48628: NOT
48629: IFFALSE 48647
// begin x := x + 2 ;
48631: LD_ADDR_VAR 0 13
48635: PUSH
48636: LD_VAR 0 13
48640: PUSH
48641: LD_INT 2
48643: PLUS
48644: ST_TO_ADDR
// continue ;
48645: GO 48445
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48647: LD_VAR 0 12
48651: PUSH
48652: LD_INT 1
48654: ARRAY
48655: PPUSH
48656: CALL_OW 266
48660: PUSH
48661: LD_INT 5
48663: EQUAL
48664: IFFALSE 48738
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48666: LD_VAR 0 12
48670: PUSH
48671: LD_INT 1
48673: ARRAY
48674: PPUSH
48675: CALL_OW 313
48679: PUSH
48680: LD_INT 3
48682: LESS
48683: IFFALSE 48719
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48685: LD_INT 0
48687: PPUSH
48688: LD_INT 5
48690: PUSH
48691: LD_INT 8
48693: PUSH
48694: LD_INT 9
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: LIST
48701: PUSH
48702: LD_VAR 0 17
48706: ARRAY
48707: PPUSH
48708: LD_VAR 0 4
48712: PPUSH
48713: CALL_OW 380
48717: GO 48736
// PrepareHuman ( false , i , skill ) ;
48719: LD_INT 0
48721: PPUSH
48722: LD_VAR 0 8
48726: PPUSH
48727: LD_VAR 0 4
48731: PPUSH
48732: CALL_OW 380
// end else
48736: GO 48755
// PrepareHuman ( false , i , skill ) ;
48738: LD_INT 0
48740: PPUSH
48741: LD_VAR 0 8
48745: PPUSH
48746: LD_VAR 0 4
48750: PPUSH
48751: CALL_OW 380
// un := CreateHuman ;
48755: LD_ADDR_VAR 0 14
48759: PUSH
48760: CALL_OW 44
48764: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48765: LD_ADDR_VAR 0 7
48769: PUSH
48770: LD_VAR 0 7
48774: PPUSH
48775: LD_INT 1
48777: PPUSH
48778: LD_VAR 0 14
48782: PPUSH
48783: CALL_OW 2
48787: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48788: LD_VAR 0 14
48792: PPUSH
48793: LD_VAR 0 12
48797: PUSH
48798: LD_INT 1
48800: ARRAY
48801: PPUSH
48802: CALL_OW 52
// end ;
48806: GO 48445
48808: POP
48809: POP
// end ;
48810: GO 47747
48812: POP
48813: POP
// result := result ^ buildings ;
48814: LD_ADDR_VAR 0 7
48818: PUSH
48819: LD_VAR 0 7
48823: PUSH
48824: LD_VAR 0 18
48828: ADD
48829: ST_TO_ADDR
// end else
48830: GO 48973
// begin for i = 1 to personel do
48832: LD_ADDR_VAR 0 8
48836: PUSH
48837: DOUBLE
48838: LD_INT 1
48840: DEC
48841: ST_TO_ADDR
48842: LD_VAR 0 6
48846: PUSH
48847: FOR_TO
48848: IFFALSE 48971
// begin if i > 4 then
48850: LD_VAR 0 8
48854: PUSH
48855: LD_INT 4
48857: GREATER
48858: IFFALSE 48862
// break ;
48860: GO 48971
// x := personel [ i ] ;
48862: LD_ADDR_VAR 0 13
48866: PUSH
48867: LD_VAR 0 6
48871: PUSH
48872: LD_VAR 0 8
48876: ARRAY
48877: ST_TO_ADDR
// if x = - 1 then
48878: LD_VAR 0 13
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: EQUAL
48887: IFFALSE 48891
// continue ;
48889: GO 48847
// PrepareHuman ( false , i , skill ) ;
48891: LD_INT 0
48893: PPUSH
48894: LD_VAR 0 8
48898: PPUSH
48899: LD_VAR 0 4
48903: PPUSH
48904: CALL_OW 380
// un := CreateHuman ;
48908: LD_ADDR_VAR 0 14
48912: PUSH
48913: CALL_OW 44
48917: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48918: LD_VAR 0 14
48922: PPUSH
48923: LD_VAR 0 1
48927: PPUSH
48928: CALL_OW 250
48932: PPUSH
48933: LD_VAR 0 1
48937: PPUSH
48938: CALL_OW 251
48942: PPUSH
48943: LD_INT 10
48945: PPUSH
48946: LD_INT 0
48948: PPUSH
48949: CALL_OW 50
// result := result ^ un ;
48953: LD_ADDR_VAR 0 7
48957: PUSH
48958: LD_VAR 0 7
48962: PUSH
48963: LD_VAR 0 14
48967: ADD
48968: ST_TO_ADDR
// end ;
48969: GO 48847
48971: POP
48972: POP
// end ; end ;
48973: LD_VAR 0 7
48977: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48978: LD_INT 0
48980: PPUSH
48981: PPUSH
48982: PPUSH
48983: PPUSH
48984: PPUSH
48985: PPUSH
48986: PPUSH
48987: PPUSH
48988: PPUSH
48989: PPUSH
48990: PPUSH
48991: PPUSH
48992: PPUSH
48993: PPUSH
48994: PPUSH
48995: PPUSH
// result := false ;
48996: LD_ADDR_VAR 0 3
49000: PUSH
49001: LD_INT 0
49003: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49004: LD_VAR 0 1
49008: NOT
49009: PUSH
49010: LD_VAR 0 1
49014: PPUSH
49015: CALL_OW 266
49019: PUSH
49020: LD_INT 32
49022: PUSH
49023: LD_INT 33
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: IN
49030: NOT
49031: OR
49032: IFFALSE 49036
// exit ;
49034: GO 50145
// nat := GetNation ( tower ) ;
49036: LD_ADDR_VAR 0 12
49040: PUSH
49041: LD_VAR 0 1
49045: PPUSH
49046: CALL_OW 248
49050: ST_TO_ADDR
// side := GetSide ( tower ) ;
49051: LD_ADDR_VAR 0 16
49055: PUSH
49056: LD_VAR 0 1
49060: PPUSH
49061: CALL_OW 255
49065: ST_TO_ADDR
// x := GetX ( tower ) ;
49066: LD_ADDR_VAR 0 10
49070: PUSH
49071: LD_VAR 0 1
49075: PPUSH
49076: CALL_OW 250
49080: ST_TO_ADDR
// y := GetY ( tower ) ;
49081: LD_ADDR_VAR 0 11
49085: PUSH
49086: LD_VAR 0 1
49090: PPUSH
49091: CALL_OW 251
49095: ST_TO_ADDR
// if not x or not y then
49096: LD_VAR 0 10
49100: NOT
49101: PUSH
49102: LD_VAR 0 11
49106: NOT
49107: OR
49108: IFFALSE 49112
// exit ;
49110: GO 50145
// weapon := 0 ;
49112: LD_ADDR_VAR 0 18
49116: PUSH
49117: LD_INT 0
49119: ST_TO_ADDR
// fac_list := [ ] ;
49120: LD_ADDR_VAR 0 17
49124: PUSH
49125: EMPTY
49126: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49127: LD_ADDR_VAR 0 6
49131: PUSH
49132: LD_VAR 0 1
49136: PPUSH
49137: CALL_OW 274
49141: PPUSH
49142: LD_VAR 0 2
49146: PPUSH
49147: LD_INT 0
49149: PPUSH
49150: CALL 46716 0 3
49154: PPUSH
49155: LD_INT 30
49157: PUSH
49158: LD_INT 3
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PPUSH
49165: CALL_OW 72
49169: ST_TO_ADDR
// if not factories then
49170: LD_VAR 0 6
49174: NOT
49175: IFFALSE 49179
// exit ;
49177: GO 50145
// for i in factories do
49179: LD_ADDR_VAR 0 8
49183: PUSH
49184: LD_VAR 0 6
49188: PUSH
49189: FOR_IN
49190: IFFALSE 49215
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49192: LD_ADDR_VAR 0 17
49196: PUSH
49197: LD_VAR 0 17
49201: PUSH
49202: LD_VAR 0 8
49206: PPUSH
49207: CALL_OW 478
49211: UNION
49212: ST_TO_ADDR
49213: GO 49189
49215: POP
49216: POP
// if not fac_list then
49217: LD_VAR 0 17
49221: NOT
49222: IFFALSE 49226
// exit ;
49224: GO 50145
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49226: LD_ADDR_VAR 0 5
49230: PUSH
49231: LD_INT 4
49233: PUSH
49234: LD_INT 5
49236: PUSH
49237: LD_INT 9
49239: PUSH
49240: LD_INT 10
49242: PUSH
49243: LD_INT 6
49245: PUSH
49246: LD_INT 7
49248: PUSH
49249: LD_INT 11
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 27
49263: PUSH
49264: LD_INT 28
49266: PUSH
49267: LD_INT 26
49269: PUSH
49270: LD_INT 30
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 43
49281: PUSH
49282: LD_INT 44
49284: PUSH
49285: LD_INT 46
49287: PUSH
49288: LD_INT 45
49290: PUSH
49291: LD_INT 47
49293: PUSH
49294: LD_INT 49
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: LIST
49309: PUSH
49310: LD_VAR 0 12
49314: ARRAY
49315: ST_TO_ADDR
// list := list isect fac_list ;
49316: LD_ADDR_VAR 0 5
49320: PUSH
49321: LD_VAR 0 5
49325: PUSH
49326: LD_VAR 0 17
49330: ISECT
49331: ST_TO_ADDR
// if not list then
49332: LD_VAR 0 5
49336: NOT
49337: IFFALSE 49341
// exit ;
49339: GO 50145
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49341: LD_VAR 0 12
49345: PUSH
49346: LD_INT 3
49348: EQUAL
49349: PUSH
49350: LD_INT 49
49352: PUSH
49353: LD_VAR 0 5
49357: IN
49358: AND
49359: PUSH
49360: LD_INT 31
49362: PPUSH
49363: LD_VAR 0 16
49367: PPUSH
49368: CALL_OW 321
49372: PUSH
49373: LD_INT 2
49375: EQUAL
49376: AND
49377: IFFALSE 49437
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49379: LD_INT 22
49381: PUSH
49382: LD_VAR 0 16
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 35
49393: PUSH
49394: LD_INT 49
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 91
49403: PUSH
49404: LD_VAR 0 1
49408: PUSH
49409: LD_INT 10
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: LIST
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: LIST
49421: PPUSH
49422: CALL_OW 69
49426: NOT
49427: IFFALSE 49437
// weapon := ru_time_lapser ;
49429: LD_ADDR_VAR 0 18
49433: PUSH
49434: LD_INT 49
49436: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49437: LD_VAR 0 12
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: IN
49452: PUSH
49453: LD_INT 11
49455: PUSH
49456: LD_VAR 0 5
49460: IN
49461: PUSH
49462: LD_INT 30
49464: PUSH
49465: LD_VAR 0 5
49469: IN
49470: OR
49471: AND
49472: PUSH
49473: LD_INT 6
49475: PPUSH
49476: LD_VAR 0 16
49480: PPUSH
49481: CALL_OW 321
49485: PUSH
49486: LD_INT 2
49488: EQUAL
49489: AND
49490: IFFALSE 49655
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49492: LD_INT 22
49494: PUSH
49495: LD_VAR 0 16
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: LD_INT 35
49509: PUSH
49510: LD_INT 11
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 35
49519: PUSH
49520: LD_INT 30
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 91
49534: PUSH
49535: LD_VAR 0 1
49539: PUSH
49540: LD_INT 18
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: LIST
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: LIST
49552: PPUSH
49553: CALL_OW 69
49557: NOT
49558: PUSH
49559: LD_INT 22
49561: PUSH
49562: LD_VAR 0 16
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: LD_INT 30
49576: PUSH
49577: LD_INT 32
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 30
49586: PUSH
49587: LD_INT 33
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 91
49601: PUSH
49602: LD_VAR 0 1
49606: PUSH
49607: LD_INT 12
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: LIST
49619: PUSH
49620: EMPTY
49621: LIST
49622: PPUSH
49623: CALL_OW 69
49627: PUSH
49628: LD_INT 2
49630: GREATER
49631: AND
49632: IFFALSE 49655
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49634: LD_ADDR_VAR 0 18
49638: PUSH
49639: LD_INT 11
49641: PUSH
49642: LD_INT 30
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_VAR 0 12
49653: ARRAY
49654: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49655: LD_VAR 0 18
49659: NOT
49660: PUSH
49661: LD_INT 40
49663: PPUSH
49664: LD_VAR 0 16
49668: PPUSH
49669: CALL_OW 321
49673: PUSH
49674: LD_INT 2
49676: EQUAL
49677: AND
49678: PUSH
49679: LD_INT 7
49681: PUSH
49682: LD_VAR 0 5
49686: IN
49687: PUSH
49688: LD_INT 28
49690: PUSH
49691: LD_VAR 0 5
49695: IN
49696: OR
49697: PUSH
49698: LD_INT 45
49700: PUSH
49701: LD_VAR 0 5
49705: IN
49706: OR
49707: AND
49708: IFFALSE 49962
// begin hex := GetHexInfo ( x , y ) ;
49710: LD_ADDR_VAR 0 4
49714: PUSH
49715: LD_VAR 0 10
49719: PPUSH
49720: LD_VAR 0 11
49724: PPUSH
49725: CALL_OW 546
49729: ST_TO_ADDR
// if hex [ 1 ] then
49730: LD_VAR 0 4
49734: PUSH
49735: LD_INT 1
49737: ARRAY
49738: IFFALSE 49742
// exit ;
49740: GO 50145
// height := hex [ 2 ] ;
49742: LD_ADDR_VAR 0 15
49746: PUSH
49747: LD_VAR 0 4
49751: PUSH
49752: LD_INT 2
49754: ARRAY
49755: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49756: LD_ADDR_VAR 0 14
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 3
49769: PUSH
49770: LD_INT 5
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: ST_TO_ADDR
// for i in tmp do
49779: LD_ADDR_VAR 0 8
49783: PUSH
49784: LD_VAR 0 14
49788: PUSH
49789: FOR_IN
49790: IFFALSE 49960
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49792: LD_ADDR_VAR 0 9
49796: PUSH
49797: LD_VAR 0 10
49801: PPUSH
49802: LD_VAR 0 8
49806: PPUSH
49807: LD_INT 5
49809: PPUSH
49810: CALL_OW 272
49814: PUSH
49815: LD_VAR 0 11
49819: PPUSH
49820: LD_VAR 0 8
49824: PPUSH
49825: LD_INT 5
49827: PPUSH
49828: CALL_OW 273
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49837: LD_VAR 0 9
49841: PUSH
49842: LD_INT 1
49844: ARRAY
49845: PPUSH
49846: LD_VAR 0 9
49850: PUSH
49851: LD_INT 2
49853: ARRAY
49854: PPUSH
49855: CALL_OW 488
49859: IFFALSE 49958
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49861: LD_ADDR_VAR 0 4
49865: PUSH
49866: LD_VAR 0 9
49870: PUSH
49871: LD_INT 1
49873: ARRAY
49874: PPUSH
49875: LD_VAR 0 9
49879: PUSH
49880: LD_INT 2
49882: ARRAY
49883: PPUSH
49884: CALL_OW 546
49888: ST_TO_ADDR
// if hex [ 1 ] then
49889: LD_VAR 0 4
49893: PUSH
49894: LD_INT 1
49896: ARRAY
49897: IFFALSE 49901
// continue ;
49899: GO 49789
// h := hex [ 2 ] ;
49901: LD_ADDR_VAR 0 13
49905: PUSH
49906: LD_VAR 0 4
49910: PUSH
49911: LD_INT 2
49913: ARRAY
49914: ST_TO_ADDR
// if h + 7 < height then
49915: LD_VAR 0 13
49919: PUSH
49920: LD_INT 7
49922: PLUS
49923: PUSH
49924: LD_VAR 0 15
49928: LESS
49929: IFFALSE 49958
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49931: LD_ADDR_VAR 0 18
49935: PUSH
49936: LD_INT 7
49938: PUSH
49939: LD_INT 28
49941: PUSH
49942: LD_INT 45
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: LIST
49949: PUSH
49950: LD_VAR 0 12
49954: ARRAY
49955: ST_TO_ADDR
// break ;
49956: GO 49960
// end ; end ; end ;
49958: GO 49789
49960: POP
49961: POP
// end ; if not weapon then
49962: LD_VAR 0 18
49966: NOT
49967: IFFALSE 50027
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49969: LD_ADDR_VAR 0 5
49973: PUSH
49974: LD_VAR 0 5
49978: PUSH
49979: LD_INT 11
49981: PUSH
49982: LD_INT 30
49984: PUSH
49985: LD_INT 49
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: LIST
49992: DIFF
49993: ST_TO_ADDR
// if not list then
49994: LD_VAR 0 5
49998: NOT
49999: IFFALSE 50003
// exit ;
50001: GO 50145
// weapon := list [ rand ( 1 , list ) ] ;
50003: LD_ADDR_VAR 0 18
50007: PUSH
50008: LD_VAR 0 5
50012: PUSH
50013: LD_INT 1
50015: PPUSH
50016: LD_VAR 0 5
50020: PPUSH
50021: CALL_OW 12
50025: ARRAY
50026: ST_TO_ADDR
// end ; if weapon then
50027: LD_VAR 0 18
50031: IFFALSE 50145
// begin tmp := CostOfWeapon ( weapon ) ;
50033: LD_ADDR_VAR 0 14
50037: PUSH
50038: LD_VAR 0 18
50042: PPUSH
50043: CALL_OW 451
50047: ST_TO_ADDR
// j := GetBase ( tower ) ;
50048: LD_ADDR_VAR 0 9
50052: PUSH
50053: LD_VAR 0 1
50057: PPUSH
50058: CALL_OW 274
50062: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50063: LD_VAR 0 9
50067: PPUSH
50068: LD_INT 1
50070: PPUSH
50071: CALL_OW 275
50075: PUSH
50076: LD_VAR 0 14
50080: PUSH
50081: LD_INT 1
50083: ARRAY
50084: GREATEREQUAL
50085: PUSH
50086: LD_VAR 0 9
50090: PPUSH
50091: LD_INT 2
50093: PPUSH
50094: CALL_OW 275
50098: PUSH
50099: LD_VAR 0 14
50103: PUSH
50104: LD_INT 2
50106: ARRAY
50107: GREATEREQUAL
50108: AND
50109: PUSH
50110: LD_VAR 0 9
50114: PPUSH
50115: LD_INT 3
50117: PPUSH
50118: CALL_OW 275
50122: PUSH
50123: LD_VAR 0 14
50127: PUSH
50128: LD_INT 3
50130: ARRAY
50131: GREATEREQUAL
50132: AND
50133: IFFALSE 50145
// result := weapon ;
50135: LD_ADDR_VAR 0 3
50139: PUSH
50140: LD_VAR 0 18
50144: ST_TO_ADDR
// end ; end ;
50145: LD_VAR 0 3
50149: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50150: LD_INT 0
50152: PPUSH
50153: PPUSH
// result := true ;
50154: LD_ADDR_VAR 0 3
50158: PUSH
50159: LD_INT 1
50161: ST_TO_ADDR
// if array1 = array2 then
50162: LD_VAR 0 1
50166: PUSH
50167: LD_VAR 0 2
50171: EQUAL
50172: IFFALSE 50232
// begin for i = 1 to array1 do
50174: LD_ADDR_VAR 0 4
50178: PUSH
50179: DOUBLE
50180: LD_INT 1
50182: DEC
50183: ST_TO_ADDR
50184: LD_VAR 0 1
50188: PUSH
50189: FOR_TO
50190: IFFALSE 50228
// if array1 [ i ] <> array2 [ i ] then
50192: LD_VAR 0 1
50196: PUSH
50197: LD_VAR 0 4
50201: ARRAY
50202: PUSH
50203: LD_VAR 0 2
50207: PUSH
50208: LD_VAR 0 4
50212: ARRAY
50213: NONEQUAL
50214: IFFALSE 50226
// begin result := false ;
50216: LD_ADDR_VAR 0 3
50220: PUSH
50221: LD_INT 0
50223: ST_TO_ADDR
// break ;
50224: GO 50228
// end ;
50226: GO 50189
50228: POP
50229: POP
// end else
50230: GO 50240
// result := false ;
50232: LD_ADDR_VAR 0 3
50236: PUSH
50237: LD_INT 0
50239: ST_TO_ADDR
// end ;
50240: LD_VAR 0 3
50244: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50245: LD_INT 0
50247: PPUSH
50248: PPUSH
// if not array1 or not array2 then
50249: LD_VAR 0 1
50253: NOT
50254: PUSH
50255: LD_VAR 0 2
50259: NOT
50260: OR
50261: IFFALSE 50265
// exit ;
50263: GO 50329
// result := true ;
50265: LD_ADDR_VAR 0 3
50269: PUSH
50270: LD_INT 1
50272: ST_TO_ADDR
// for i = 1 to array1 do
50273: LD_ADDR_VAR 0 4
50277: PUSH
50278: DOUBLE
50279: LD_INT 1
50281: DEC
50282: ST_TO_ADDR
50283: LD_VAR 0 1
50287: PUSH
50288: FOR_TO
50289: IFFALSE 50327
// if array1 [ i ] <> array2 [ i ] then
50291: LD_VAR 0 1
50295: PUSH
50296: LD_VAR 0 4
50300: ARRAY
50301: PUSH
50302: LD_VAR 0 2
50306: PUSH
50307: LD_VAR 0 4
50311: ARRAY
50312: NONEQUAL
50313: IFFALSE 50325
// begin result := false ;
50315: LD_ADDR_VAR 0 3
50319: PUSH
50320: LD_INT 0
50322: ST_TO_ADDR
// break ;
50323: GO 50327
// end ;
50325: GO 50288
50327: POP
50328: POP
// end ;
50329: LD_VAR 0 3
50333: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50334: LD_INT 0
50336: PPUSH
50337: PPUSH
50338: PPUSH
// pom := GetBase ( fac ) ;
50339: LD_ADDR_VAR 0 5
50343: PUSH
50344: LD_VAR 0 1
50348: PPUSH
50349: CALL_OW 274
50353: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50354: LD_ADDR_VAR 0 4
50358: PUSH
50359: LD_VAR 0 2
50363: PUSH
50364: LD_INT 1
50366: ARRAY
50367: PPUSH
50368: LD_VAR 0 2
50372: PUSH
50373: LD_INT 2
50375: ARRAY
50376: PPUSH
50377: LD_VAR 0 2
50381: PUSH
50382: LD_INT 3
50384: ARRAY
50385: PPUSH
50386: LD_VAR 0 2
50390: PUSH
50391: LD_INT 4
50393: ARRAY
50394: PPUSH
50395: CALL_OW 449
50399: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50400: LD_ADDR_VAR 0 3
50404: PUSH
50405: LD_VAR 0 5
50409: PPUSH
50410: LD_INT 1
50412: PPUSH
50413: CALL_OW 275
50417: PUSH
50418: LD_VAR 0 4
50422: PUSH
50423: LD_INT 1
50425: ARRAY
50426: GREATEREQUAL
50427: PUSH
50428: LD_VAR 0 5
50432: PPUSH
50433: LD_INT 2
50435: PPUSH
50436: CALL_OW 275
50440: PUSH
50441: LD_VAR 0 4
50445: PUSH
50446: LD_INT 2
50448: ARRAY
50449: GREATEREQUAL
50450: AND
50451: PUSH
50452: LD_VAR 0 5
50456: PPUSH
50457: LD_INT 3
50459: PPUSH
50460: CALL_OW 275
50464: PUSH
50465: LD_VAR 0 4
50469: PUSH
50470: LD_INT 3
50472: ARRAY
50473: GREATEREQUAL
50474: AND
50475: ST_TO_ADDR
// end ;
50476: LD_VAR 0 3
50480: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50481: LD_INT 0
50483: PPUSH
50484: PPUSH
50485: PPUSH
50486: PPUSH
// pom := GetBase ( building ) ;
50487: LD_ADDR_VAR 0 3
50491: PUSH
50492: LD_VAR 0 1
50496: PPUSH
50497: CALL_OW 274
50501: ST_TO_ADDR
// if not pom then
50502: LD_VAR 0 3
50506: NOT
50507: IFFALSE 50511
// exit ;
50509: GO 50681
// btype := GetBType ( building ) ;
50511: LD_ADDR_VAR 0 5
50515: PUSH
50516: LD_VAR 0 1
50520: PPUSH
50521: CALL_OW 266
50525: ST_TO_ADDR
// if btype = b_armoury then
50526: LD_VAR 0 5
50530: PUSH
50531: LD_INT 4
50533: EQUAL
50534: IFFALSE 50544
// btype := b_barracks ;
50536: LD_ADDR_VAR 0 5
50540: PUSH
50541: LD_INT 5
50543: ST_TO_ADDR
// if btype = b_depot then
50544: LD_VAR 0 5
50548: PUSH
50549: LD_INT 0
50551: EQUAL
50552: IFFALSE 50562
// btype := b_warehouse ;
50554: LD_ADDR_VAR 0 5
50558: PUSH
50559: LD_INT 1
50561: ST_TO_ADDR
// if btype = b_workshop then
50562: LD_VAR 0 5
50566: PUSH
50567: LD_INT 2
50569: EQUAL
50570: IFFALSE 50580
// btype := b_factory ;
50572: LD_ADDR_VAR 0 5
50576: PUSH
50577: LD_INT 3
50579: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50580: LD_ADDR_VAR 0 4
50584: PUSH
50585: LD_VAR 0 5
50589: PPUSH
50590: LD_VAR 0 1
50594: PPUSH
50595: CALL_OW 248
50599: PPUSH
50600: CALL_OW 450
50604: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50605: LD_ADDR_VAR 0 2
50609: PUSH
50610: LD_VAR 0 3
50614: PPUSH
50615: LD_INT 1
50617: PPUSH
50618: CALL_OW 275
50622: PUSH
50623: LD_VAR 0 4
50627: PUSH
50628: LD_INT 1
50630: ARRAY
50631: GREATEREQUAL
50632: PUSH
50633: LD_VAR 0 3
50637: PPUSH
50638: LD_INT 2
50640: PPUSH
50641: CALL_OW 275
50645: PUSH
50646: LD_VAR 0 4
50650: PUSH
50651: LD_INT 2
50653: ARRAY
50654: GREATEREQUAL
50655: AND
50656: PUSH
50657: LD_VAR 0 3
50661: PPUSH
50662: LD_INT 3
50664: PPUSH
50665: CALL_OW 275
50669: PUSH
50670: LD_VAR 0 4
50674: PUSH
50675: LD_INT 3
50677: ARRAY
50678: GREATEREQUAL
50679: AND
50680: ST_TO_ADDR
// end ;
50681: LD_VAR 0 2
50685: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50686: LD_INT 0
50688: PPUSH
50689: PPUSH
50690: PPUSH
// pom := GetBase ( building ) ;
50691: LD_ADDR_VAR 0 4
50695: PUSH
50696: LD_VAR 0 1
50700: PPUSH
50701: CALL_OW 274
50705: ST_TO_ADDR
// if not pom then
50706: LD_VAR 0 4
50710: NOT
50711: IFFALSE 50715
// exit ;
50713: GO 50816
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50715: LD_ADDR_VAR 0 5
50719: PUSH
50720: LD_VAR 0 2
50724: PPUSH
50725: LD_VAR 0 1
50729: PPUSH
50730: CALL_OW 248
50734: PPUSH
50735: CALL_OW 450
50739: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50740: LD_ADDR_VAR 0 3
50744: PUSH
50745: LD_VAR 0 4
50749: PPUSH
50750: LD_INT 1
50752: PPUSH
50753: CALL_OW 275
50757: PUSH
50758: LD_VAR 0 5
50762: PUSH
50763: LD_INT 1
50765: ARRAY
50766: GREATEREQUAL
50767: PUSH
50768: LD_VAR 0 4
50772: PPUSH
50773: LD_INT 2
50775: PPUSH
50776: CALL_OW 275
50780: PUSH
50781: LD_VAR 0 5
50785: PUSH
50786: LD_INT 2
50788: ARRAY
50789: GREATEREQUAL
50790: AND
50791: PUSH
50792: LD_VAR 0 4
50796: PPUSH
50797: LD_INT 3
50799: PPUSH
50800: CALL_OW 275
50804: PUSH
50805: LD_VAR 0 5
50809: PUSH
50810: LD_INT 3
50812: ARRAY
50813: GREATEREQUAL
50814: AND
50815: ST_TO_ADDR
// end ;
50816: LD_VAR 0 3
50820: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50821: LD_INT 0
50823: PPUSH
50824: PPUSH
50825: PPUSH
50826: PPUSH
50827: PPUSH
50828: PPUSH
50829: PPUSH
50830: PPUSH
50831: PPUSH
50832: PPUSH
50833: PPUSH
// result := false ;
50834: LD_ADDR_VAR 0 8
50838: PUSH
50839: LD_INT 0
50841: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50842: LD_VAR 0 5
50846: NOT
50847: PUSH
50848: LD_VAR 0 1
50852: NOT
50853: OR
50854: PUSH
50855: LD_VAR 0 2
50859: NOT
50860: OR
50861: PUSH
50862: LD_VAR 0 3
50866: NOT
50867: OR
50868: IFFALSE 50872
// exit ;
50870: GO 51686
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50872: LD_ADDR_VAR 0 14
50876: PUSH
50877: LD_VAR 0 1
50881: PPUSH
50882: LD_VAR 0 2
50886: PPUSH
50887: LD_VAR 0 3
50891: PPUSH
50892: LD_VAR 0 4
50896: PPUSH
50897: LD_VAR 0 5
50901: PUSH
50902: LD_INT 1
50904: ARRAY
50905: PPUSH
50906: CALL_OW 248
50910: PPUSH
50911: LD_INT 0
50913: PPUSH
50914: CALL 52919 0 6
50918: ST_TO_ADDR
// if not hexes then
50919: LD_VAR 0 14
50923: NOT
50924: IFFALSE 50928
// exit ;
50926: GO 51686
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50928: LD_ADDR_VAR 0 17
50932: PUSH
50933: LD_VAR 0 5
50937: PPUSH
50938: LD_INT 22
50940: PUSH
50941: LD_VAR 0 13
50945: PPUSH
50946: CALL_OW 255
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: LD_INT 30
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 30
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PPUSH
50987: CALL_OW 72
50991: ST_TO_ADDR
// for i = 1 to hexes do
50992: LD_ADDR_VAR 0 9
50996: PUSH
50997: DOUBLE
50998: LD_INT 1
51000: DEC
51001: ST_TO_ADDR
51002: LD_VAR 0 14
51006: PUSH
51007: FOR_TO
51008: IFFALSE 51684
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51010: LD_ADDR_VAR 0 13
51014: PUSH
51015: LD_VAR 0 14
51019: PUSH
51020: LD_VAR 0 9
51024: ARRAY
51025: PUSH
51026: LD_INT 1
51028: ARRAY
51029: PPUSH
51030: LD_VAR 0 14
51034: PUSH
51035: LD_VAR 0 9
51039: ARRAY
51040: PUSH
51041: LD_INT 2
51043: ARRAY
51044: PPUSH
51045: CALL_OW 428
51049: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51050: LD_VAR 0 14
51054: PUSH
51055: LD_VAR 0 9
51059: ARRAY
51060: PUSH
51061: LD_INT 1
51063: ARRAY
51064: PPUSH
51065: LD_VAR 0 14
51069: PUSH
51070: LD_VAR 0 9
51074: ARRAY
51075: PUSH
51076: LD_INT 2
51078: ARRAY
51079: PPUSH
51080: CALL_OW 351
51084: PUSH
51085: LD_VAR 0 14
51089: PUSH
51090: LD_VAR 0 9
51094: ARRAY
51095: PUSH
51096: LD_INT 1
51098: ARRAY
51099: PPUSH
51100: LD_VAR 0 14
51104: PUSH
51105: LD_VAR 0 9
51109: ARRAY
51110: PUSH
51111: LD_INT 2
51113: ARRAY
51114: PPUSH
51115: CALL_OW 488
51119: NOT
51120: OR
51121: PUSH
51122: LD_VAR 0 13
51126: PPUSH
51127: CALL_OW 247
51131: PUSH
51132: LD_INT 3
51134: EQUAL
51135: OR
51136: IFFALSE 51142
// exit ;
51138: POP
51139: POP
51140: GO 51686
// if not tmp then
51142: LD_VAR 0 13
51146: NOT
51147: IFFALSE 51151
// continue ;
51149: GO 51007
// result := true ;
51151: LD_ADDR_VAR 0 8
51155: PUSH
51156: LD_INT 1
51158: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51159: LD_VAR 0 6
51163: PUSH
51164: LD_VAR 0 13
51168: PPUSH
51169: CALL_OW 247
51173: PUSH
51174: LD_INT 2
51176: EQUAL
51177: AND
51178: PUSH
51179: LD_VAR 0 13
51183: PPUSH
51184: CALL_OW 263
51188: PUSH
51189: LD_INT 1
51191: EQUAL
51192: AND
51193: IFFALSE 51357
// begin if IsDrivenBy ( tmp ) then
51195: LD_VAR 0 13
51199: PPUSH
51200: CALL_OW 311
51204: IFFALSE 51208
// continue ;
51206: GO 51007
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51208: LD_VAR 0 6
51212: PPUSH
51213: LD_INT 3
51215: PUSH
51216: LD_INT 60
51218: PUSH
51219: EMPTY
51220: LIST
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 3
51228: PUSH
51229: LD_INT 55
51231: PUSH
51232: EMPTY
51233: LIST
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PPUSH
51243: CALL_OW 72
51247: IFFALSE 51355
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51249: LD_ADDR_VAR 0 18
51253: PUSH
51254: LD_VAR 0 6
51258: PPUSH
51259: LD_INT 3
51261: PUSH
51262: LD_INT 60
51264: PUSH
51265: EMPTY
51266: LIST
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 3
51274: PUSH
51275: LD_INT 55
51277: PUSH
51278: EMPTY
51279: LIST
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PPUSH
51289: CALL_OW 72
51293: PUSH
51294: LD_INT 1
51296: ARRAY
51297: ST_TO_ADDR
// if IsInUnit ( driver ) then
51298: LD_VAR 0 18
51302: PPUSH
51303: CALL_OW 310
51307: IFFALSE 51318
// ComExit ( driver ) ;
51309: LD_VAR 0 18
51313: PPUSH
51314: CALL 76699 0 1
// AddComEnterUnit ( driver , tmp ) ;
51318: LD_VAR 0 18
51322: PPUSH
51323: LD_VAR 0 13
51327: PPUSH
51328: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51332: LD_VAR 0 18
51336: PPUSH
51337: LD_VAR 0 7
51341: PPUSH
51342: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51346: LD_VAR 0 18
51350: PPUSH
51351: CALL_OW 181
// end ; continue ;
51355: GO 51007
// end ; if not cleaners or not tmp in cleaners then
51357: LD_VAR 0 6
51361: NOT
51362: PUSH
51363: LD_VAR 0 13
51367: PUSH
51368: LD_VAR 0 6
51372: IN
51373: NOT
51374: OR
51375: IFFALSE 51682
// begin if dep then
51377: LD_VAR 0 17
51381: IFFALSE 51517
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51383: LD_ADDR_VAR 0 16
51387: PUSH
51388: LD_VAR 0 17
51392: PUSH
51393: LD_INT 1
51395: ARRAY
51396: PPUSH
51397: CALL_OW 250
51401: PPUSH
51402: LD_VAR 0 17
51406: PUSH
51407: LD_INT 1
51409: ARRAY
51410: PPUSH
51411: CALL_OW 254
51415: PPUSH
51416: LD_INT 5
51418: PPUSH
51419: CALL_OW 272
51423: PUSH
51424: LD_VAR 0 17
51428: PUSH
51429: LD_INT 1
51431: ARRAY
51432: PPUSH
51433: CALL_OW 251
51437: PPUSH
51438: LD_VAR 0 17
51442: PUSH
51443: LD_INT 1
51445: ARRAY
51446: PPUSH
51447: CALL_OW 254
51451: PPUSH
51452: LD_INT 5
51454: PPUSH
51455: CALL_OW 273
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51464: LD_VAR 0 16
51468: PUSH
51469: LD_INT 1
51471: ARRAY
51472: PPUSH
51473: LD_VAR 0 16
51477: PUSH
51478: LD_INT 2
51480: ARRAY
51481: PPUSH
51482: CALL_OW 488
51486: IFFALSE 51517
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51488: LD_VAR 0 13
51492: PPUSH
51493: LD_VAR 0 16
51497: PUSH
51498: LD_INT 1
51500: ARRAY
51501: PPUSH
51502: LD_VAR 0 16
51506: PUSH
51507: LD_INT 2
51509: ARRAY
51510: PPUSH
51511: CALL_OW 111
// continue ;
51515: GO 51007
// end ; end ; r := GetDir ( tmp ) ;
51517: LD_ADDR_VAR 0 15
51521: PUSH
51522: LD_VAR 0 13
51526: PPUSH
51527: CALL_OW 254
51531: ST_TO_ADDR
// if r = 5 then
51532: LD_VAR 0 15
51536: PUSH
51537: LD_INT 5
51539: EQUAL
51540: IFFALSE 51550
// r := 0 ;
51542: LD_ADDR_VAR 0 15
51546: PUSH
51547: LD_INT 0
51549: ST_TO_ADDR
// for j = r to 5 do
51550: LD_ADDR_VAR 0 10
51554: PUSH
51555: DOUBLE
51556: LD_VAR 0 15
51560: DEC
51561: ST_TO_ADDR
51562: LD_INT 5
51564: PUSH
51565: FOR_TO
51566: IFFALSE 51680
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51568: LD_ADDR_VAR 0 11
51572: PUSH
51573: LD_VAR 0 13
51577: PPUSH
51578: CALL_OW 250
51582: PPUSH
51583: LD_VAR 0 10
51587: PPUSH
51588: LD_INT 2
51590: PPUSH
51591: CALL_OW 272
51595: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51596: LD_ADDR_VAR 0 12
51600: PUSH
51601: LD_VAR 0 13
51605: PPUSH
51606: CALL_OW 251
51610: PPUSH
51611: LD_VAR 0 10
51615: PPUSH
51616: LD_INT 2
51618: PPUSH
51619: CALL_OW 273
51623: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51624: LD_VAR 0 11
51628: PPUSH
51629: LD_VAR 0 12
51633: PPUSH
51634: CALL_OW 488
51638: PUSH
51639: LD_VAR 0 11
51643: PPUSH
51644: LD_VAR 0 12
51648: PPUSH
51649: CALL_OW 428
51653: NOT
51654: AND
51655: IFFALSE 51678
// begin ComMoveXY ( tmp , _x , _y ) ;
51657: LD_VAR 0 13
51661: PPUSH
51662: LD_VAR 0 11
51666: PPUSH
51667: LD_VAR 0 12
51671: PPUSH
51672: CALL_OW 111
// break ;
51676: GO 51680
// end ; end ;
51678: GO 51565
51680: POP
51681: POP
// end ; end ;
51682: GO 51007
51684: POP
51685: POP
// end ;
51686: LD_VAR 0 8
51690: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51691: LD_INT 0
51693: PPUSH
// result := true ;
51694: LD_ADDR_VAR 0 3
51698: PUSH
51699: LD_INT 1
51701: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51702: LD_VAR 0 2
51706: PUSH
51707: LD_INT 24
51709: DOUBLE
51710: EQUAL
51711: IFTRUE 51721
51713: LD_INT 33
51715: DOUBLE
51716: EQUAL
51717: IFTRUE 51721
51719: GO 51746
51721: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51722: LD_ADDR_VAR 0 3
51726: PUSH
51727: LD_INT 32
51729: PPUSH
51730: LD_VAR 0 1
51734: PPUSH
51735: CALL_OW 321
51739: PUSH
51740: LD_INT 2
51742: EQUAL
51743: ST_TO_ADDR
51744: GO 52062
51746: LD_INT 20
51748: DOUBLE
51749: EQUAL
51750: IFTRUE 51754
51752: GO 51779
51754: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51755: LD_ADDR_VAR 0 3
51759: PUSH
51760: LD_INT 6
51762: PPUSH
51763: LD_VAR 0 1
51767: PPUSH
51768: CALL_OW 321
51772: PUSH
51773: LD_INT 2
51775: EQUAL
51776: ST_TO_ADDR
51777: GO 52062
51779: LD_INT 22
51781: DOUBLE
51782: EQUAL
51783: IFTRUE 51793
51785: LD_INT 36
51787: DOUBLE
51788: EQUAL
51789: IFTRUE 51793
51791: GO 51818
51793: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51794: LD_ADDR_VAR 0 3
51798: PUSH
51799: LD_INT 15
51801: PPUSH
51802: LD_VAR 0 1
51806: PPUSH
51807: CALL_OW 321
51811: PUSH
51812: LD_INT 2
51814: EQUAL
51815: ST_TO_ADDR
51816: GO 52062
51818: LD_INT 30
51820: DOUBLE
51821: EQUAL
51822: IFTRUE 51826
51824: GO 51851
51826: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51827: LD_ADDR_VAR 0 3
51831: PUSH
51832: LD_INT 20
51834: PPUSH
51835: LD_VAR 0 1
51839: PPUSH
51840: CALL_OW 321
51844: PUSH
51845: LD_INT 2
51847: EQUAL
51848: ST_TO_ADDR
51849: GO 52062
51851: LD_INT 28
51853: DOUBLE
51854: EQUAL
51855: IFTRUE 51865
51857: LD_INT 21
51859: DOUBLE
51860: EQUAL
51861: IFTRUE 51865
51863: GO 51890
51865: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51866: LD_ADDR_VAR 0 3
51870: PUSH
51871: LD_INT 21
51873: PPUSH
51874: LD_VAR 0 1
51878: PPUSH
51879: CALL_OW 321
51883: PUSH
51884: LD_INT 2
51886: EQUAL
51887: ST_TO_ADDR
51888: GO 52062
51890: LD_INT 16
51892: DOUBLE
51893: EQUAL
51894: IFTRUE 51898
51896: GO 51923
51898: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51899: LD_ADDR_VAR 0 3
51903: PUSH
51904: LD_INT 84
51906: PPUSH
51907: LD_VAR 0 1
51911: PPUSH
51912: CALL_OW 321
51916: PUSH
51917: LD_INT 2
51919: EQUAL
51920: ST_TO_ADDR
51921: GO 52062
51923: LD_INT 19
51925: DOUBLE
51926: EQUAL
51927: IFTRUE 51937
51929: LD_INT 23
51931: DOUBLE
51932: EQUAL
51933: IFTRUE 51937
51935: GO 51962
51937: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51938: LD_ADDR_VAR 0 3
51942: PUSH
51943: LD_INT 83
51945: PPUSH
51946: LD_VAR 0 1
51950: PPUSH
51951: CALL_OW 321
51955: PUSH
51956: LD_INT 2
51958: EQUAL
51959: ST_TO_ADDR
51960: GO 52062
51962: LD_INT 17
51964: DOUBLE
51965: EQUAL
51966: IFTRUE 51970
51968: GO 51995
51970: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51971: LD_ADDR_VAR 0 3
51975: PUSH
51976: LD_INT 39
51978: PPUSH
51979: LD_VAR 0 1
51983: PPUSH
51984: CALL_OW 321
51988: PUSH
51989: LD_INT 2
51991: EQUAL
51992: ST_TO_ADDR
51993: GO 52062
51995: LD_INT 18
51997: DOUBLE
51998: EQUAL
51999: IFTRUE 52003
52001: GO 52028
52003: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52004: LD_ADDR_VAR 0 3
52008: PUSH
52009: LD_INT 40
52011: PPUSH
52012: LD_VAR 0 1
52016: PPUSH
52017: CALL_OW 321
52021: PUSH
52022: LD_INT 2
52024: EQUAL
52025: ST_TO_ADDR
52026: GO 52062
52028: LD_INT 27
52030: DOUBLE
52031: EQUAL
52032: IFTRUE 52036
52034: GO 52061
52036: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52037: LD_ADDR_VAR 0 3
52041: PUSH
52042: LD_INT 35
52044: PPUSH
52045: LD_VAR 0 1
52049: PPUSH
52050: CALL_OW 321
52054: PUSH
52055: LD_INT 2
52057: EQUAL
52058: ST_TO_ADDR
52059: GO 52062
52061: POP
// end ;
52062: LD_VAR 0 3
52066: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52067: LD_INT 0
52069: PPUSH
52070: PPUSH
52071: PPUSH
52072: PPUSH
52073: PPUSH
52074: PPUSH
52075: PPUSH
52076: PPUSH
52077: PPUSH
52078: PPUSH
52079: PPUSH
// result := false ;
52080: LD_ADDR_VAR 0 6
52084: PUSH
52085: LD_INT 0
52087: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52088: LD_VAR 0 1
52092: NOT
52093: PUSH
52094: LD_VAR 0 1
52098: PPUSH
52099: CALL_OW 266
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: IN
52114: NOT
52115: OR
52116: PUSH
52117: LD_VAR 0 2
52121: NOT
52122: OR
52123: PUSH
52124: LD_VAR 0 5
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: LD_INT 4
52143: PUSH
52144: LD_INT 5
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: IN
52155: NOT
52156: OR
52157: PUSH
52158: LD_VAR 0 3
52162: PPUSH
52163: LD_VAR 0 4
52167: PPUSH
52168: CALL_OW 488
52172: NOT
52173: OR
52174: IFFALSE 52178
// exit ;
52176: GO 52914
// side := GetSide ( depot ) ;
52178: LD_ADDR_VAR 0 9
52182: PUSH
52183: LD_VAR 0 1
52187: PPUSH
52188: CALL_OW 255
52192: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52193: LD_VAR 0 9
52197: PPUSH
52198: LD_VAR 0 2
52202: PPUSH
52203: CALL 51691 0 2
52207: NOT
52208: IFFALSE 52212
// exit ;
52210: GO 52914
// pom := GetBase ( depot ) ;
52212: LD_ADDR_VAR 0 10
52216: PUSH
52217: LD_VAR 0 1
52221: PPUSH
52222: CALL_OW 274
52226: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52227: LD_ADDR_VAR 0 11
52231: PUSH
52232: LD_VAR 0 2
52236: PPUSH
52237: LD_VAR 0 1
52241: PPUSH
52242: CALL_OW 248
52246: PPUSH
52247: CALL_OW 450
52251: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52252: LD_VAR 0 10
52256: PPUSH
52257: LD_INT 1
52259: PPUSH
52260: CALL_OW 275
52264: PUSH
52265: LD_VAR 0 11
52269: PUSH
52270: LD_INT 1
52272: ARRAY
52273: GREATEREQUAL
52274: PUSH
52275: LD_VAR 0 10
52279: PPUSH
52280: LD_INT 2
52282: PPUSH
52283: CALL_OW 275
52287: PUSH
52288: LD_VAR 0 11
52292: PUSH
52293: LD_INT 2
52295: ARRAY
52296: GREATEREQUAL
52297: AND
52298: PUSH
52299: LD_VAR 0 10
52303: PPUSH
52304: LD_INT 3
52306: PPUSH
52307: CALL_OW 275
52311: PUSH
52312: LD_VAR 0 11
52316: PUSH
52317: LD_INT 3
52319: ARRAY
52320: GREATEREQUAL
52321: AND
52322: NOT
52323: IFFALSE 52327
// exit ;
52325: GO 52914
// if GetBType ( depot ) = b_depot then
52327: LD_VAR 0 1
52331: PPUSH
52332: CALL_OW 266
52336: PUSH
52337: LD_INT 0
52339: EQUAL
52340: IFFALSE 52352
// dist := 28 else
52342: LD_ADDR_VAR 0 14
52346: PUSH
52347: LD_INT 28
52349: ST_TO_ADDR
52350: GO 52360
// dist := 36 ;
52352: LD_ADDR_VAR 0 14
52356: PUSH
52357: LD_INT 36
52359: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52360: LD_VAR 0 1
52364: PPUSH
52365: LD_VAR 0 3
52369: PPUSH
52370: LD_VAR 0 4
52374: PPUSH
52375: CALL_OW 297
52379: PUSH
52380: LD_VAR 0 14
52384: GREATER
52385: IFFALSE 52389
// exit ;
52387: GO 52914
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52389: LD_ADDR_VAR 0 12
52393: PUSH
52394: LD_VAR 0 2
52398: PPUSH
52399: LD_VAR 0 3
52403: PPUSH
52404: LD_VAR 0 4
52408: PPUSH
52409: LD_VAR 0 5
52413: PPUSH
52414: LD_VAR 0 1
52418: PPUSH
52419: CALL_OW 248
52423: PPUSH
52424: LD_INT 0
52426: PPUSH
52427: CALL 52919 0 6
52431: ST_TO_ADDR
// if not hexes then
52432: LD_VAR 0 12
52436: NOT
52437: IFFALSE 52441
// exit ;
52439: GO 52914
// hex := GetHexInfo ( x , y ) ;
52441: LD_ADDR_VAR 0 15
52445: PUSH
52446: LD_VAR 0 3
52450: PPUSH
52451: LD_VAR 0 4
52455: PPUSH
52456: CALL_OW 546
52460: ST_TO_ADDR
// if hex [ 1 ] then
52461: LD_VAR 0 15
52465: PUSH
52466: LD_INT 1
52468: ARRAY
52469: IFFALSE 52473
// exit ;
52471: GO 52914
// height := hex [ 2 ] ;
52473: LD_ADDR_VAR 0 13
52477: PUSH
52478: LD_VAR 0 15
52482: PUSH
52483: LD_INT 2
52485: ARRAY
52486: ST_TO_ADDR
// for i = 1 to hexes do
52487: LD_ADDR_VAR 0 7
52491: PUSH
52492: DOUBLE
52493: LD_INT 1
52495: DEC
52496: ST_TO_ADDR
52497: LD_VAR 0 12
52501: PUSH
52502: FOR_TO
52503: IFFALSE 52833
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52505: LD_VAR 0 12
52509: PUSH
52510: LD_VAR 0 7
52514: ARRAY
52515: PUSH
52516: LD_INT 1
52518: ARRAY
52519: PPUSH
52520: LD_VAR 0 12
52524: PUSH
52525: LD_VAR 0 7
52529: ARRAY
52530: PUSH
52531: LD_INT 2
52533: ARRAY
52534: PPUSH
52535: CALL_OW 488
52539: NOT
52540: PUSH
52541: LD_VAR 0 12
52545: PUSH
52546: LD_VAR 0 7
52550: ARRAY
52551: PUSH
52552: LD_INT 1
52554: ARRAY
52555: PPUSH
52556: LD_VAR 0 12
52560: PUSH
52561: LD_VAR 0 7
52565: ARRAY
52566: PUSH
52567: LD_INT 2
52569: ARRAY
52570: PPUSH
52571: CALL_OW 428
52575: PUSH
52576: LD_INT 0
52578: GREATER
52579: OR
52580: PUSH
52581: LD_VAR 0 12
52585: PUSH
52586: LD_VAR 0 7
52590: ARRAY
52591: PUSH
52592: LD_INT 1
52594: ARRAY
52595: PPUSH
52596: LD_VAR 0 12
52600: PUSH
52601: LD_VAR 0 7
52605: ARRAY
52606: PUSH
52607: LD_INT 2
52609: ARRAY
52610: PPUSH
52611: CALL_OW 351
52615: OR
52616: IFFALSE 52622
// exit ;
52618: POP
52619: POP
52620: GO 52914
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52622: LD_ADDR_VAR 0 8
52626: PUSH
52627: LD_VAR 0 12
52631: PUSH
52632: LD_VAR 0 7
52636: ARRAY
52637: PUSH
52638: LD_INT 1
52640: ARRAY
52641: PPUSH
52642: LD_VAR 0 12
52646: PUSH
52647: LD_VAR 0 7
52651: ARRAY
52652: PUSH
52653: LD_INT 2
52655: ARRAY
52656: PPUSH
52657: CALL_OW 546
52661: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52662: LD_VAR 0 8
52666: PUSH
52667: LD_INT 1
52669: ARRAY
52670: PUSH
52671: LD_VAR 0 8
52675: PUSH
52676: LD_INT 2
52678: ARRAY
52679: PUSH
52680: LD_VAR 0 13
52684: PUSH
52685: LD_INT 2
52687: PLUS
52688: GREATER
52689: OR
52690: PUSH
52691: LD_VAR 0 8
52695: PUSH
52696: LD_INT 2
52698: ARRAY
52699: PUSH
52700: LD_VAR 0 13
52704: PUSH
52705: LD_INT 2
52707: MINUS
52708: LESS
52709: OR
52710: PUSH
52711: LD_VAR 0 8
52715: PUSH
52716: LD_INT 3
52718: ARRAY
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 8
52725: PUSH
52726: LD_INT 9
52728: PUSH
52729: LD_INT 10
52731: PUSH
52732: LD_INT 11
52734: PUSH
52735: LD_INT 12
52737: PUSH
52738: LD_INT 13
52740: PUSH
52741: LD_INT 16
52743: PUSH
52744: LD_INT 17
52746: PUSH
52747: LD_INT 18
52749: PUSH
52750: LD_INT 19
52752: PUSH
52753: LD_INT 20
52755: PUSH
52756: LD_INT 21
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: IN
52774: NOT
52775: OR
52776: PUSH
52777: LD_VAR 0 8
52781: PUSH
52782: LD_INT 5
52784: ARRAY
52785: NOT
52786: OR
52787: PUSH
52788: LD_VAR 0 8
52792: PUSH
52793: LD_INT 6
52795: ARRAY
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: LD_INT 7
52805: PUSH
52806: LD_INT 9
52808: PUSH
52809: LD_INT 10
52811: PUSH
52812: LD_INT 11
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: IN
52823: NOT
52824: OR
52825: IFFALSE 52831
// exit ;
52827: POP
52828: POP
52829: GO 52914
// end ;
52831: GO 52502
52833: POP
52834: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52835: LD_VAR 0 9
52839: PPUSH
52840: LD_VAR 0 3
52844: PPUSH
52845: LD_VAR 0 4
52849: PPUSH
52850: LD_INT 20
52852: PPUSH
52853: CALL 44866 0 4
52857: PUSH
52858: LD_INT 4
52860: ARRAY
52861: IFFALSE 52865
// exit ;
52863: GO 52914
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52865: LD_VAR 0 2
52869: PUSH
52870: LD_INT 29
52872: PUSH
52873: LD_INT 30
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: IN
52880: PUSH
52881: LD_VAR 0 3
52885: PPUSH
52886: LD_VAR 0 4
52890: PPUSH
52891: LD_VAR 0 9
52895: PPUSH
52896: CALL_OW 440
52900: NOT
52901: AND
52902: IFFALSE 52906
// exit ;
52904: GO 52914
// result := true ;
52906: LD_ADDR_VAR 0 6
52910: PUSH
52911: LD_INT 1
52913: ST_TO_ADDR
// end ;
52914: LD_VAR 0 6
52918: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52919: LD_INT 0
52921: PPUSH
52922: PPUSH
52923: PPUSH
52924: PPUSH
52925: PPUSH
52926: PPUSH
52927: PPUSH
52928: PPUSH
52929: PPUSH
52930: PPUSH
52931: PPUSH
52932: PPUSH
52933: PPUSH
52934: PPUSH
52935: PPUSH
52936: PPUSH
52937: PPUSH
52938: PPUSH
52939: PPUSH
52940: PPUSH
52941: PPUSH
52942: PPUSH
52943: PPUSH
52944: PPUSH
52945: PPUSH
52946: PPUSH
52947: PPUSH
52948: PPUSH
52949: PPUSH
52950: PPUSH
52951: PPUSH
52952: PPUSH
52953: PPUSH
52954: PPUSH
52955: PPUSH
52956: PPUSH
52957: PPUSH
52958: PPUSH
52959: PPUSH
52960: PPUSH
52961: PPUSH
52962: PPUSH
52963: PPUSH
52964: PPUSH
52965: PPUSH
52966: PPUSH
52967: PPUSH
52968: PPUSH
52969: PPUSH
52970: PPUSH
52971: PPUSH
52972: PPUSH
52973: PPUSH
52974: PPUSH
52975: PPUSH
52976: PPUSH
52977: PPUSH
52978: PPUSH
// result = [ ] ;
52979: LD_ADDR_VAR 0 7
52983: PUSH
52984: EMPTY
52985: ST_TO_ADDR
// temp_list = [ ] ;
52986: LD_ADDR_VAR 0 9
52990: PUSH
52991: EMPTY
52992: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52993: LD_VAR 0 4
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 1
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: LD_INT 3
53009: PUSH
53010: LD_INT 4
53012: PUSH
53013: LD_INT 5
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: IN
53024: NOT
53025: PUSH
53026: LD_VAR 0 1
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: IN
53041: PUSH
53042: LD_VAR 0 5
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 3
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: LIST
53060: IN
53061: NOT
53062: AND
53063: OR
53064: IFFALSE 53068
// exit ;
53066: GO 71459
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53068: LD_VAR 0 1
53072: PUSH
53073: LD_INT 6
53075: PUSH
53076: LD_INT 7
53078: PUSH
53079: LD_INT 8
53081: PUSH
53082: LD_INT 13
53084: PUSH
53085: LD_INT 12
53087: PUSH
53088: LD_INT 15
53090: PUSH
53091: LD_INT 11
53093: PUSH
53094: LD_INT 14
53096: PUSH
53097: LD_INT 10
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: IN
53111: IFFALSE 53121
// btype = b_lab ;
53113: LD_ADDR_VAR 0 1
53117: PUSH
53118: LD_INT 6
53120: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53121: LD_VAR 0 6
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: LIST
53139: IN
53140: NOT
53141: PUSH
53142: LD_VAR 0 1
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: LD_INT 3
53158: PUSH
53159: LD_INT 6
53161: PUSH
53162: LD_INT 36
53164: PUSH
53165: LD_INT 4
53167: PUSH
53168: LD_INT 5
53170: PUSH
53171: LD_INT 31
53173: PUSH
53174: LD_INT 32
53176: PUSH
53177: LD_INT 33
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: IN
53193: NOT
53194: PUSH
53195: LD_VAR 0 6
53199: PUSH
53200: LD_INT 1
53202: EQUAL
53203: AND
53204: OR
53205: PUSH
53206: LD_VAR 0 1
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: LD_INT 3
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: IN
53221: NOT
53222: PUSH
53223: LD_VAR 0 6
53227: PUSH
53228: LD_INT 2
53230: EQUAL
53231: AND
53232: OR
53233: IFFALSE 53243
// mode = 0 ;
53235: LD_ADDR_VAR 0 6
53239: PUSH
53240: LD_INT 0
53242: ST_TO_ADDR
// case mode of 0 :
53243: LD_VAR 0 6
53247: PUSH
53248: LD_INT 0
53250: DOUBLE
53251: EQUAL
53252: IFTRUE 53256
53254: GO 64709
53256: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53257: LD_ADDR_VAR 0 11
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: LD_INT 2
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: LD_INT 3
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 3
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53450: LD_ADDR_VAR 0 12
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 2
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 2
53573: NEG
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 3
53607: NEG
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 3
53618: NEG
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53646: LD_ADDR_VAR 0 13
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 0
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 2
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 2
53781: NEG
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: LD_INT 3
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 3
53805: NEG
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 3
53817: NEG
53818: PUSH
53819: LD_INT 3
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53845: LD_ADDR_VAR 0 14
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 2
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: LD_INT 3
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 3
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 2
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54041: LD_ADDR_VAR 0 15
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: NEG
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 3
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 3
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54234: LD_ADDR_VAR 0 16
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 2
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: NEG
54370: PUSH
54371: LD_INT 2
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 3
54391: PUSH
54392: LD_INT 3
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54427: LD_ADDR_VAR 0 17
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: LD_INT 2
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54657: LD_ADDR_VAR 0 18
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 2
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 2
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 2
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 2
54856: NEG
54857: PUSH
54858: LD_INT 2
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54887: LD_ADDR_VAR 0 19
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55117: LD_ADDR_VAR 0 20
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 2
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: LD_INT 2
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55347: LD_ADDR_VAR 0 21
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 2
55546: NEG
55547: PUSH
55548: LD_INT 2
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55577: LD_ADDR_VAR 0 22
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 2
55712: PUSH
55713: LD_INT 2
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 2
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 2
55776: NEG
55777: PUSH
55778: LD_INT 2
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55807: LD_ADDR_VAR 0 23
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 1
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 0
55900: PUSH
55901: LD_INT 2
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 2
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 2
55983: NEG
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: LD_INT 2
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: LD_INT 3
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: LD_INT 3
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 2
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56087: LD_ADDR_VAR 0 24
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: LD_INT 2
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: LD_INT 1
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 2
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 2
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: NEG
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 2
56286: NEG
56287: PUSH
56288: LD_INT 2
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 2
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 3
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 3
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56363: LD_ADDR_VAR 0 25
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 3
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: LD_INT 3
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: LD_INT 3
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56637: LD_ADDR_VAR 0 26
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: LD_INT 2
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: LD_INT 2
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: LD_INT 2
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: LD_INT 3
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: LD_INT 3
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 2
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56913: LD_ADDR_VAR 0 27
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 0
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 0
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: LD_INT 2
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 2
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 2
57048: PUSH
57049: LD_INT 2
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: LD_INT 2
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 2
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 2
57089: NEG
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 3
57146: NEG
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 3
57158: NEG
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57193: LD_ADDR_VAR 0 28
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 2
57369: NEG
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 3
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 3
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 3
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 3
57440: NEG
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57475: LD_ADDR_VAR 0 29
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: LD_INT 2
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: LD_INT 2
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 2
57641: NEG
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: LD_INT 3
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 3
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: LD_INT 3
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 3
57719: NEG
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57754: LD_ADDR_VAR 0 30
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: LD_INT 2
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: LD_INT 2
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 2
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 2
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 2
57920: NEG
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: LD_INT 3
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: LD_INT 2
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 3
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: PUSH
57977: LD_INT 3
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 3
57997: NEG
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58032: LD_ADDR_VAR 0 31
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 2
58197: NEG
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 2
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 3
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: LD_INT 3
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 3
58275: NEG
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58310: LD_ADDR_VAR 0 32
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: LD_INT 2
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: LD_INT 2
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 2
58476: NEG
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: NEG
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: LD_INT 3
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 3
58522: PUSH
58523: LD_INT 2
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: PUSH
58533: LD_INT 3
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 3
58553: NEG
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58588: LD_ADDR_VAR 0 33
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: LD_INT 2
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: NEG
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 2
58766: NEG
58767: PUSH
58768: LD_INT 2
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: LD_INT 2
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: LD_INT 2
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58867: LD_ADDR_VAR 0 34
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 2
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 2
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: NEG
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 3
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 3
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: LD_INT 3
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 3
59112: NEG
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59147: LD_ADDR_VAR 0 35
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 1
59185: PUSH
59186: LD_INT 1
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: NEG
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59259: LD_ADDR_VAR 0 36
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59371: LD_ADDR_VAR 0 37
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_INT 0
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 1
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59483: LD_ADDR_VAR 0 38
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: LD_INT 0
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: LD_INT 1
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: LD_INT 1
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59595: LD_ADDR_VAR 0 39
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: LD_INT 2
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: LD_INT 2
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59707: LD_ADDR_VAR 0 40
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 0
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: LD_INT 1
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59819: LD_ADDR_VAR 0 41
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 1
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 2
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 2
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 2
59943: PUSH
59944: LD_INT 2
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: LD_INT 2
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 2
59974: NEG
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 2
59985: NEG
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 2
59997: NEG
59998: PUSH
59999: LD_INT 2
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: LD_INT 3
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 2
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 3
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 3
60042: PUSH
60043: LD_INT 1
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 3
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 3
60062: PUSH
60063: LD_INT 3
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: LD_INT 3
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: NEG
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 3
60093: NEG
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 3
60104: NEG
60105: PUSH
60106: LD_INT 1
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 3
60116: NEG
60117: PUSH
60118: LD_INT 2
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 3
60128: NEG
60129: PUSH
60130: LD_INT 3
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60169: LD_ADDR_VAR 0 42
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 1
60238: NEG
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: LD_INT 2
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 2
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 2
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 2
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 2
60347: NEG
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: NEG
60360: PUSH
60361: LD_INT 3
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: LD_INT 3
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 3
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 3
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 3
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: LD_INT 3
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 3
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 3
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 2
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 3
60466: NEG
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 3
60478: NEG
60479: PUSH
60480: LD_INT 3
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60519: LD_ADDR_VAR 0 43
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: LD_INT 2
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 2
60685: NEG
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: LD_INT 3
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 3
60723: NEG
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 3
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 3
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 3
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: LD_INT 3
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: LD_INT 2
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 2
60804: NEG
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 3
60815: NEG
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 3
60826: NEG
60827: PUSH
60828: LD_INT 1
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60867: LD_ADDR_VAR 0 44
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 1
60925: NEG
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: LD_INT 2
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 2
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 2
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 2
60991: PUSH
60992: LD_INT 2
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: LD_INT 2
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: NEG
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 2
61033: NEG
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 2
61045: NEG
61046: PUSH
61047: LD_INT 2
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: LD_INT 3
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 3
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 3
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 3
61100: PUSH
61101: LD_INT 2
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: LD_INT 3
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: LD_INT 3
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 2
61130: NEG
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 3
61141: NEG
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 3
61152: NEG
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 3
61164: NEG
61165: PUSH
61166: LD_INT 2
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 3
61176: NEG
61177: PUSH
61178: LD_INT 3
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61217: LD_ADDR_VAR 0 45
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 0
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: NEG
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 1
61286: NEG
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: LD_INT 2
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 0
61310: PUSH
61311: LD_INT 2
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 2
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 2
61342: PUSH
61343: LD_INT 2
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: LD_INT 2
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: LD_INT 2
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 2
61383: NEG
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: NEG
61396: PUSH
61397: LD_INT 2
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: LD_INT 3
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: LD_INT 3
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: LD_INT 3
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: LD_INT 2
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 3
61453: PUSH
61454: LD_INT 2
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 3
61463: PUSH
61464: LD_INT 3
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 2
61473: PUSH
61474: LD_INT 3
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 1
61483: PUSH
61484: LD_INT 3
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: LD_INT 3
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: LD_INT 2
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 3
61514: NEG
61515: PUSH
61516: LD_INT 2
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 3
61526: NEG
61527: PUSH
61528: LD_INT 3
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61567: LD_ADDR_VAR 0 46
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: LD_INT 1
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 1
61625: NEG
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 1
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: LD_INT 2
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: LD_INT 2
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 2
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 2
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 2
61733: NEG
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: PUSH
61758: LD_INT 3
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: LD_INT 3
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 1
61779: PUSH
61780: LD_INT 2
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 3
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 3
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: LD_INT 3
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_INT 3
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: LD_INT 2
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 3
61863: NEG
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 3
61874: NEG
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61915: LD_ADDR_VAR 0 47
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 1
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 1
61973: NEG
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: LD_INT 2
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 0
62008: PUSH
62009: LD_INT 2
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 2
62030: NEG
62031: PUSH
62032: LD_INT 1
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 2
62042: NEG
62043: PUSH
62044: LD_INT 2
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62066: LD_ADDR_VAR 0 48
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 0
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: LD_INT 2
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 2
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 2
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62213: LD_ADDR_VAR 0 49
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: LD_INT 1
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62357: LD_ADDR_VAR 0 50
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 2
62448: PUSH
62449: LD_INT 2
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 1
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: NEG
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62501: LD_ADDR_VAR 0 51
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: LD_INT 1
62521: NEG
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 1
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: LD_INT 1
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 1
62582: PUSH
62583: LD_INT 2
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 0
62592: PUSH
62593: LD_INT 2
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 1
62602: NEG
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 2
62613: NEG
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 2
62624: NEG
62625: PUSH
62626: LD_INT 1
62628: NEG
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62648: LD_ADDR_VAR 0 52
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: NEG
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 1
62717: NEG
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: LD_INT 2
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 2
62752: NEG
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: NEG
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 2
62775: NEG
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62799: LD_ADDR_VAR 0 53
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: LD_INT 1
62819: NEG
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 1
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: LD_INT 1
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: LD_INT 0
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 1
62868: NEG
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: LD_INT 2
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: LD_INT 2
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 2
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 2
62924: PUSH
62925: LD_INT 1
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 2
62934: PUSH
62935: LD_INT 2
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: LD_INT 2
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: LD_INT 2
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 1
62964: NEG
62965: PUSH
62966: LD_INT 1
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 2
62975: NEG
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 2
62986: NEG
62987: PUSH
62988: LD_INT 1
62990: NEG
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 2
62998: NEG
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63029: LD_ADDR_VAR 0 54
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: LD_INT 1
63049: NEG
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: LD_INT 1
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 1
63087: NEG
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 1
63098: NEG
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 1
63110: NEG
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: LD_INT 2
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 2
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 2
63154: PUSH
63155: LD_INT 1
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 2
63164: PUSH
63165: LD_INT 2
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 1
63174: PUSH
63175: LD_INT 2
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 0
63184: PUSH
63185: LD_INT 2
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 1
63194: NEG
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 2
63205: NEG
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 2
63216: NEG
63217: PUSH
63218: LD_INT 1
63220: NEG
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 2
63228: NEG
63229: PUSH
63230: LD_INT 2
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63259: LD_ADDR_VAR 0 55
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 0
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 1
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: NEG
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 1
63328: NEG
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 1
63340: NEG
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: LD_INT 2
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 2
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 2
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 2
63394: PUSH
63395: LD_INT 2
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: LD_INT 2
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: LD_INT 2
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 2
63435: NEG
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 2
63446: NEG
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 2
63458: NEG
63459: PUSH
63460: LD_INT 2
63462: NEG
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63489: LD_ADDR_VAR 0 56
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 1
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 1
63558: NEG
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 1
63570: NEG
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: LD_INT 2
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: LD_INT 1
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 2
63604: PUSH
63605: LD_INT 0
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 2
63614: PUSH
63615: LD_INT 1
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 2
63624: PUSH
63625: LD_INT 2
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 1
63634: PUSH
63635: LD_INT 2
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: LD_INT 2
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 1
63654: NEG
63655: PUSH
63656: LD_INT 1
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 2
63665: NEG
63666: PUSH
63667: LD_INT 0
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 2
63676: NEG
63677: PUSH
63678: LD_INT 1
63680: NEG
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 2
63688: NEG
63689: PUSH
63690: LD_INT 2
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63719: LD_ADDR_VAR 0 57
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 0
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 2
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 2
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 2
63854: PUSH
63855: LD_INT 2
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: LD_INT 2
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 1
63884: NEG
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 2
63895: NEG
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 2
63906: NEG
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 2
63918: NEG
63919: PUSH
63920: LD_INT 2
63922: NEG
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63949: LD_ADDR_VAR 0 58
63953: PUSH
63954: LD_INT 0
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 1
64007: NEG
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 1
64018: NEG
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 1
64030: NEG
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 0
64042: PUSH
64043: LD_INT 2
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 2
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 2
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 2
64084: PUSH
64085: LD_INT 2
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: LD_INT 2
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 2
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 2
64125: NEG
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 2
64136: NEG
64137: PUSH
64138: LD_INT 1
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 2
64148: NEG
64149: PUSH
64150: LD_INT 2
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64179: LD_ADDR_VAR 0 59
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: LD_INT 0
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 1
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 1
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: LIST
64266: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64267: LD_ADDR_VAR 0 60
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: LD_INT 1
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 1
64295: PUSH
64296: LD_INT 0
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 1
64305: PUSH
64306: LD_INT 1
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 0
64315: PUSH
64316: LD_INT 1
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 1
64325: NEG
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 1
64336: NEG
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64355: LD_ADDR_VAR 0 61
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: LD_INT 1
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 1
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 0
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 1
64413: NEG
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64443: LD_ADDR_VAR 0 62
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 1
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: LD_INT 1
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: NEG
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 1
64512: NEG
64513: PUSH
64514: LD_INT 1
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64531: LD_ADDR_VAR 0 63
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 0
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: LD_INT 1
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 1
64569: PUSH
64570: LD_INT 1
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 1
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 1
64589: NEG
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: LD_INT 1
64604: NEG
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64619: LD_ADDR_VAR 0 64
64623: PUSH
64624: LD_INT 0
64626: PUSH
64627: LD_INT 0
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 0
64636: PUSH
64637: LD_INT 1
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 1
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 1
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 0
64667: PUSH
64668: LD_INT 1
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 1
64677: NEG
64678: PUSH
64679: LD_INT 0
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 1
64688: NEG
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: ST_TO_ADDR
// end ; 1 :
64707: GO 70604
64709: LD_INT 1
64711: DOUBLE
64712: EQUAL
64713: IFTRUE 64717
64715: GO 67340
64717: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64718: LD_ADDR_VAR 0 11
64722: PUSH
64723: LD_INT 1
64725: NEG
64726: PUSH
64727: LD_INT 3
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: LD_INT 3
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: LD_INT 2
64751: NEG
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: LIST
64761: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64762: LD_ADDR_VAR 0 12
64766: PUSH
64767: LD_INT 2
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 3
64780: PUSH
64781: LD_INT 0
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 3
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: LIST
64802: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64803: LD_ADDR_VAR 0 13
64807: PUSH
64808: LD_INT 3
64810: PUSH
64811: LD_INT 2
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 3
64820: PUSH
64821: LD_INT 3
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 2
64830: PUSH
64831: LD_INT 3
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: LIST
64842: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64843: LD_ADDR_VAR 0 14
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: LD_INT 3
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: LD_INT 3
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 1
64870: NEG
64871: PUSH
64872: LD_INT 2
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: LIST
64883: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64884: LD_ADDR_VAR 0 15
64888: PUSH
64889: LD_INT 2
64891: NEG
64892: PUSH
64893: LD_INT 1
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 3
64902: NEG
64903: PUSH
64904: LD_INT 0
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 3
64913: NEG
64914: PUSH
64915: LD_INT 1
64917: NEG
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: LIST
64927: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64928: LD_ADDR_VAR 0 16
64932: PUSH
64933: LD_INT 2
64935: NEG
64936: PUSH
64937: LD_INT 3
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 3
64947: NEG
64948: PUSH
64949: LD_INT 2
64951: NEG
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 3
64959: NEG
64960: PUSH
64961: LD_INT 3
64963: NEG
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: LIST
64973: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64974: LD_ADDR_VAR 0 17
64978: PUSH
64979: LD_INT 1
64981: NEG
64982: PUSH
64983: LD_INT 3
64985: NEG
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: LD_INT 3
64996: NEG
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 1
65004: PUSH
65005: LD_INT 2
65007: NEG
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: LIST
65017: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65018: LD_ADDR_VAR 0 18
65022: PUSH
65023: LD_INT 2
65025: PUSH
65026: LD_INT 1
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 3
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 3
65046: PUSH
65047: LD_INT 1
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: LIST
65058: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65059: LD_ADDR_VAR 0 19
65063: PUSH
65064: LD_INT 3
65066: PUSH
65067: LD_INT 2
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 3
65076: PUSH
65077: LD_INT 3
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 2
65086: PUSH
65087: LD_INT 3
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: LIST
65098: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65099: LD_ADDR_VAR 0 20
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: LD_INT 3
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: LD_INT 3
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 1
65126: NEG
65127: PUSH
65128: LD_INT 2
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: LIST
65139: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65140: LD_ADDR_VAR 0 21
65144: PUSH
65145: LD_INT 2
65147: NEG
65148: PUSH
65149: LD_INT 1
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 3
65158: NEG
65159: PUSH
65160: LD_INT 0
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 3
65169: NEG
65170: PUSH
65171: LD_INT 1
65173: NEG
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: LIST
65183: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65184: LD_ADDR_VAR 0 22
65188: PUSH
65189: LD_INT 2
65191: NEG
65192: PUSH
65193: LD_INT 3
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 3
65203: NEG
65204: PUSH
65205: LD_INT 2
65207: NEG
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 3
65215: NEG
65216: PUSH
65217: LD_INT 3
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: LIST
65229: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65230: LD_ADDR_VAR 0 23
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: LD_INT 3
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 1
65248: NEG
65249: PUSH
65250: LD_INT 4
65252: NEG
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 1
65260: PUSH
65261: LD_INT 3
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: LIST
65273: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65274: LD_ADDR_VAR 0 24
65278: PUSH
65279: LD_INT 3
65281: PUSH
65282: LD_INT 0
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 3
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 4
65302: PUSH
65303: LD_INT 1
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65315: LD_ADDR_VAR 0 25
65319: PUSH
65320: LD_INT 3
65322: PUSH
65323: LD_INT 3
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 4
65332: PUSH
65333: LD_INT 3
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 3
65342: PUSH
65343: LD_INT 4
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: LIST
65354: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65355: LD_ADDR_VAR 0 26
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: LD_INT 3
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: LD_INT 4
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: LD_INT 3
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: LIST
65395: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65396: LD_ADDR_VAR 0 27
65400: PUSH
65401: LD_INT 3
65403: NEG
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 3
65414: NEG
65415: PUSH
65416: LD_INT 1
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 4
65425: NEG
65426: PUSH
65427: LD_INT 1
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: LIST
65439: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65440: LD_ADDR_VAR 0 28
65444: PUSH
65445: LD_INT 3
65447: NEG
65448: PUSH
65449: LD_INT 3
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 3
65459: NEG
65460: PUSH
65461: LD_INT 4
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 4
65471: NEG
65472: PUSH
65473: LD_INT 3
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: LIST
65485: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65486: LD_ADDR_VAR 0 29
65490: PUSH
65491: LD_INT 1
65493: NEG
65494: PUSH
65495: LD_INT 3
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: LD_INT 3
65508: NEG
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: LD_INT 2
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: LD_INT 4
65531: NEG
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: LD_INT 4
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 1
65550: PUSH
65551: LD_INT 3
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 1
65561: NEG
65562: PUSH
65563: LD_INT 5
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: LD_INT 5
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: LD_INT 4
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: LD_INT 6
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: LD_INT 6
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: LD_INT 5
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65641: LD_ADDR_VAR 0 30
65645: PUSH
65646: LD_INT 2
65648: PUSH
65649: LD_INT 1
65651: NEG
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 3
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 3
65669: PUSH
65670: LD_INT 1
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 3
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 4
65690: PUSH
65691: LD_INT 0
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 4
65700: PUSH
65701: LD_INT 1
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 4
65710: PUSH
65711: LD_INT 1
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 5
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 5
65731: PUSH
65732: LD_INT 1
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 5
65741: PUSH
65742: LD_INT 1
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 6
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 6
65762: PUSH
65763: LD_INT 1
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65784: LD_ADDR_VAR 0 31
65788: PUSH
65789: LD_INT 3
65791: PUSH
65792: LD_INT 2
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 3
65801: PUSH
65802: LD_INT 3
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 2
65811: PUSH
65812: LD_INT 3
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 4
65821: PUSH
65822: LD_INT 3
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 4
65831: PUSH
65832: LD_INT 4
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 3
65841: PUSH
65842: LD_INT 4
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 5
65851: PUSH
65852: LD_INT 4
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 5
65861: PUSH
65862: LD_INT 5
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 4
65871: PUSH
65872: LD_INT 5
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 6
65881: PUSH
65882: LD_INT 5
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 6
65891: PUSH
65892: LD_INT 6
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 5
65901: PUSH
65902: LD_INT 6
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65923: LD_ADDR_VAR 0 32
65927: PUSH
65928: LD_INT 1
65930: PUSH
65931: LD_INT 3
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 0
65940: PUSH
65941: LD_INT 3
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: NEG
65951: PUSH
65952: LD_INT 2
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 1
65961: PUSH
65962: LD_INT 4
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 0
65971: PUSH
65972: LD_INT 4
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 1
65981: NEG
65982: PUSH
65983: LD_INT 3
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 1
65992: PUSH
65993: LD_INT 5
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 0
66002: PUSH
66003: LD_INT 5
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 1
66012: NEG
66013: PUSH
66014: LD_INT 4
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: LD_INT 6
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 0
66033: PUSH
66034: LD_INT 6
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 1
66043: NEG
66044: PUSH
66045: LD_INT 5
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66066: LD_ADDR_VAR 0 33
66070: PUSH
66071: LD_INT 2
66073: NEG
66074: PUSH
66075: LD_INT 1
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 3
66084: NEG
66085: PUSH
66086: LD_INT 0
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 3
66095: NEG
66096: PUSH
66097: LD_INT 1
66099: NEG
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 3
66107: NEG
66108: PUSH
66109: LD_INT 1
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 4
66118: NEG
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 4
66129: NEG
66130: PUSH
66131: LD_INT 1
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 4
66141: NEG
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 5
66152: NEG
66153: PUSH
66154: LD_INT 0
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 5
66163: NEG
66164: PUSH
66165: LD_INT 1
66167: NEG
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 5
66175: NEG
66176: PUSH
66177: LD_INT 1
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 6
66186: NEG
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 6
66197: NEG
66198: PUSH
66199: LD_INT 1
66201: NEG
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66221: LD_ADDR_VAR 0 34
66225: PUSH
66226: LD_INT 2
66228: NEG
66229: PUSH
66230: LD_INT 3
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 3
66240: NEG
66241: PUSH
66242: LD_INT 2
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 3
66252: NEG
66253: PUSH
66254: LD_INT 3
66256: NEG
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 3
66264: NEG
66265: PUSH
66266: LD_INT 4
66268: NEG
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 4
66276: NEG
66277: PUSH
66278: LD_INT 3
66280: NEG
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 4
66288: NEG
66289: PUSH
66290: LD_INT 4
66292: NEG
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 4
66300: NEG
66301: PUSH
66302: LD_INT 5
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 5
66312: NEG
66313: PUSH
66314: LD_INT 4
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 5
66324: NEG
66325: PUSH
66326: LD_INT 5
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 5
66336: NEG
66337: PUSH
66338: LD_INT 6
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 6
66348: NEG
66349: PUSH
66350: LD_INT 5
66352: NEG
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 6
66360: NEG
66361: PUSH
66362: LD_INT 6
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66384: LD_ADDR_VAR 0 41
66388: PUSH
66389: LD_INT 0
66391: PUSH
66392: LD_INT 2
66394: NEG
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 1
66402: NEG
66403: PUSH
66404: LD_INT 3
66406: NEG
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 1
66414: PUSH
66415: LD_INT 2
66417: NEG
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: LIST
66427: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66428: LD_ADDR_VAR 0 42
66432: PUSH
66433: LD_INT 2
66435: PUSH
66436: LD_INT 0
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 2
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 3
66456: PUSH
66457: LD_INT 1
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: LIST
66468: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66469: LD_ADDR_VAR 0 43
66473: PUSH
66474: LD_INT 2
66476: PUSH
66477: LD_INT 2
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 3
66486: PUSH
66487: LD_INT 2
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 2
66496: PUSH
66497: LD_INT 3
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: LIST
66508: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66509: LD_ADDR_VAR 0 44
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: LD_INT 2
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 1
66526: PUSH
66527: LD_INT 3
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 1
66536: NEG
66537: PUSH
66538: LD_INT 2
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: LIST
66549: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66550: LD_ADDR_VAR 0 45
66554: PUSH
66555: LD_INT 2
66557: NEG
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 2
66568: NEG
66569: PUSH
66570: LD_INT 1
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 3
66579: NEG
66580: PUSH
66581: LD_INT 1
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: LIST
66593: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66594: LD_ADDR_VAR 0 46
66598: PUSH
66599: LD_INT 2
66601: NEG
66602: PUSH
66603: LD_INT 2
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 2
66613: NEG
66614: PUSH
66615: LD_INT 3
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 3
66625: NEG
66626: PUSH
66627: LD_INT 2
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: LIST
66639: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66640: LD_ADDR_VAR 0 47
66644: PUSH
66645: LD_INT 2
66647: NEG
66648: PUSH
66649: LD_INT 3
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 1
66659: NEG
66660: PUSH
66661: LD_INT 3
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66673: LD_ADDR_VAR 0 48
66677: PUSH
66678: LD_INT 1
66680: PUSH
66681: LD_INT 2
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 2
66691: PUSH
66692: LD_INT 1
66694: NEG
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66704: LD_ADDR_VAR 0 49
66708: PUSH
66709: LD_INT 3
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 3
66721: PUSH
66722: LD_INT 2
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66733: LD_ADDR_VAR 0 50
66737: PUSH
66738: LD_INT 2
66740: PUSH
66741: LD_INT 3
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 1
66750: PUSH
66751: LD_INT 3
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66762: LD_ADDR_VAR 0 51
66766: PUSH
66767: LD_INT 1
66769: NEG
66770: PUSH
66771: LD_INT 2
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 2
66780: NEG
66781: PUSH
66782: LD_INT 1
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66793: LD_ADDR_VAR 0 52
66797: PUSH
66798: LD_INT 3
66800: NEG
66801: PUSH
66802: LD_INT 1
66804: NEG
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: LD_INT 3
66812: NEG
66813: PUSH
66814: LD_INT 2
66816: NEG
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66826: LD_ADDR_VAR 0 53
66830: PUSH
66831: LD_INT 1
66833: NEG
66834: PUSH
66835: LD_INT 3
66837: NEG
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 0
66845: PUSH
66846: LD_INT 3
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 1
66856: PUSH
66857: LD_INT 2
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: LIST
66869: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66870: LD_ADDR_VAR 0 54
66874: PUSH
66875: LD_INT 2
66877: PUSH
66878: LD_INT 1
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 3
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 3
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: LIST
66910: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66911: LD_ADDR_VAR 0 55
66915: PUSH
66916: LD_INT 3
66918: PUSH
66919: LD_INT 2
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 3
66928: PUSH
66929: LD_INT 3
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 2
66938: PUSH
66939: LD_INT 3
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: LIST
66950: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66951: LD_ADDR_VAR 0 56
66955: PUSH
66956: LD_INT 1
66958: PUSH
66959: LD_INT 3
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 0
66968: PUSH
66969: LD_INT 3
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 1
66978: NEG
66979: PUSH
66980: LD_INT 2
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: LIST
66991: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66992: LD_ADDR_VAR 0 57
66996: PUSH
66997: LD_INT 2
66999: NEG
67000: PUSH
67001: LD_INT 1
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 3
67010: NEG
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 3
67021: NEG
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: LIST
67035: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67036: LD_ADDR_VAR 0 58
67040: PUSH
67041: LD_INT 2
67043: NEG
67044: PUSH
67045: LD_INT 3
67047: NEG
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 3
67055: NEG
67056: PUSH
67057: LD_INT 2
67059: NEG
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: LD_INT 3
67071: NEG
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: LIST
67081: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67082: LD_ADDR_VAR 0 59
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: LD_INT 2
67093: NEG
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: LD_INT 2
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 1
67112: PUSH
67113: LD_INT 1
67115: NEG
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: LIST
67125: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67126: LD_ADDR_VAR 0 60
67130: PUSH
67131: LD_INT 1
67133: PUSH
67134: LD_INT 1
67136: NEG
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 2
67144: PUSH
67145: LD_INT 0
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 2
67154: PUSH
67155: LD_INT 1
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: LIST
67166: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67167: LD_ADDR_VAR 0 61
67171: PUSH
67172: LD_INT 2
67174: PUSH
67175: LD_INT 1
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 2
67184: PUSH
67185: LD_INT 2
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 1
67194: PUSH
67195: LD_INT 2
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: LIST
67206: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67207: LD_ADDR_VAR 0 62
67211: PUSH
67212: LD_INT 1
67214: PUSH
67215: LD_INT 2
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 0
67224: PUSH
67225: LD_INT 2
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 1
67234: NEG
67235: PUSH
67236: LD_INT 1
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: LIST
67247: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67248: LD_ADDR_VAR 0 63
67252: PUSH
67253: LD_INT 1
67255: NEG
67256: PUSH
67257: LD_INT 1
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 2
67266: NEG
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 2
67277: NEG
67278: PUSH
67279: LD_INT 1
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: LIST
67291: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67292: LD_ADDR_VAR 0 64
67296: PUSH
67297: LD_INT 1
67299: NEG
67300: PUSH
67301: LD_INT 2
67303: NEG
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 2
67311: NEG
67312: PUSH
67313: LD_INT 1
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 2
67323: NEG
67324: PUSH
67325: LD_INT 2
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: LIST
67337: ST_TO_ADDR
// end ; 2 :
67338: GO 70604
67340: LD_INT 2
67342: DOUBLE
67343: EQUAL
67344: IFTRUE 67348
67346: GO 70603
67348: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67349: LD_ADDR_VAR 0 29
67353: PUSH
67354: LD_INT 4
67356: PUSH
67357: LD_INT 0
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 4
67366: PUSH
67367: LD_INT 1
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 5
67377: PUSH
67378: LD_INT 0
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 5
67387: PUSH
67388: LD_INT 1
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 4
67397: PUSH
67398: LD_INT 1
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 3
67407: PUSH
67408: LD_INT 0
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 3
67417: PUSH
67418: LD_INT 1
67420: NEG
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 3
67428: PUSH
67429: LD_INT 2
67431: NEG
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 5
67439: PUSH
67440: LD_INT 2
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 3
67449: PUSH
67450: LD_INT 3
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 3
67459: PUSH
67460: LD_INT 2
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 4
67469: PUSH
67470: LD_INT 3
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 4
67479: PUSH
67480: LD_INT 4
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 3
67489: PUSH
67490: LD_INT 4
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 2
67499: PUSH
67500: LD_INT 3
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 2
67509: PUSH
67510: LD_INT 2
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 4
67519: PUSH
67520: LD_INT 2
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 2
67529: PUSH
67530: LD_INT 4
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 0
67539: PUSH
67540: LD_INT 4
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 0
67549: PUSH
67550: LD_INT 3
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 1
67559: PUSH
67560: LD_INT 4
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 1
67569: PUSH
67570: LD_INT 5
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 0
67579: PUSH
67580: LD_INT 5
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 1
67589: NEG
67590: PUSH
67591: LD_INT 4
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 1
67600: NEG
67601: PUSH
67602: LD_INT 3
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 2
67611: PUSH
67612: LD_INT 5
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 2
67621: NEG
67622: PUSH
67623: LD_INT 3
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 3
67632: NEG
67633: PUSH
67634: LD_INT 0
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 3
67643: NEG
67644: PUSH
67645: LD_INT 1
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 2
67655: NEG
67656: PUSH
67657: LD_INT 0
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 2
67666: NEG
67667: PUSH
67668: LD_INT 1
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 3
67677: NEG
67678: PUSH
67679: LD_INT 1
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 4
67688: NEG
67689: PUSH
67690: LD_INT 0
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 4
67699: NEG
67700: PUSH
67701: LD_INT 1
67703: NEG
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 4
67711: NEG
67712: PUSH
67713: LD_INT 2
67715: NEG
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 2
67723: NEG
67724: PUSH
67725: LD_INT 2
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 4
67734: NEG
67735: PUSH
67736: LD_INT 4
67738: NEG
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 4
67746: NEG
67747: PUSH
67748: LD_INT 5
67750: NEG
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 3
67758: NEG
67759: PUSH
67760: LD_INT 4
67762: NEG
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 3
67770: NEG
67771: PUSH
67772: LD_INT 3
67774: NEG
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 4
67782: NEG
67783: PUSH
67784: LD_INT 3
67786: NEG
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 5
67794: NEG
67795: PUSH
67796: LD_INT 4
67798: NEG
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 5
67806: NEG
67807: PUSH
67808: LD_INT 5
67810: NEG
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 3
67818: NEG
67819: PUSH
67820: LD_INT 5
67822: NEG
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 5
67830: NEG
67831: PUSH
67832: LD_INT 3
67834: NEG
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67887: LD_ADDR_VAR 0 30
67891: PUSH
67892: LD_INT 4
67894: PUSH
67895: LD_INT 4
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 4
67904: PUSH
67905: LD_INT 3
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 5
67914: PUSH
67915: LD_INT 4
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 5
67924: PUSH
67925: LD_INT 5
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 4
67934: PUSH
67935: LD_INT 5
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 3
67944: PUSH
67945: LD_INT 4
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 3
67954: PUSH
67955: LD_INT 3
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 5
67964: PUSH
67965: LD_INT 3
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 3
67974: PUSH
67975: LD_INT 5
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 0
67984: PUSH
67985: LD_INT 3
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 0
67994: PUSH
67995: LD_INT 2
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 1
68004: PUSH
68005: LD_INT 3
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 1
68014: PUSH
68015: LD_INT 4
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 0
68024: PUSH
68025: LD_INT 4
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 1
68034: NEG
68035: PUSH
68036: LD_INT 3
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 1
68045: NEG
68046: PUSH
68047: LD_INT 2
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 2
68056: PUSH
68057: LD_INT 4
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 2
68066: NEG
68067: PUSH
68068: LD_INT 2
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 4
68077: NEG
68078: PUSH
68079: LD_INT 0
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 4
68088: NEG
68089: PUSH
68090: LD_INT 1
68092: NEG
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 3
68100: NEG
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 3
68111: NEG
68112: PUSH
68113: LD_INT 1
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 4
68122: NEG
68123: PUSH
68124: LD_INT 1
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 5
68133: NEG
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 5
68144: NEG
68145: PUSH
68146: LD_INT 1
68148: NEG
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 5
68156: NEG
68157: PUSH
68158: LD_INT 2
68160: NEG
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 3
68168: NEG
68169: PUSH
68170: LD_INT 2
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 3
68179: NEG
68180: PUSH
68181: LD_INT 3
68183: NEG
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 3
68191: NEG
68192: PUSH
68193: LD_INT 4
68195: NEG
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 2
68203: NEG
68204: PUSH
68205: LD_INT 3
68207: NEG
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 2
68215: NEG
68216: PUSH
68217: LD_INT 2
68219: NEG
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 3
68227: NEG
68228: PUSH
68229: LD_INT 2
68231: NEG
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 4
68239: NEG
68240: PUSH
68241: LD_INT 3
68243: NEG
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 4
68251: NEG
68252: PUSH
68253: LD_INT 4
68255: NEG
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 2
68263: NEG
68264: PUSH
68265: LD_INT 4
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 4
68275: NEG
68276: PUSH
68277: LD_INT 2
68279: NEG
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: LD_INT 4
68290: NEG
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 0
68298: PUSH
68299: LD_INT 5
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 1
68309: PUSH
68310: LD_INT 4
68312: NEG
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 1
68320: PUSH
68321: LD_INT 3
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: LD_INT 3
68334: NEG
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 1
68342: NEG
68343: PUSH
68344: LD_INT 4
68346: NEG
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 1
68354: NEG
68355: PUSH
68356: LD_INT 5
68358: NEG
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 2
68366: PUSH
68367: LD_INT 3
68369: NEG
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 2
68377: NEG
68378: PUSH
68379: LD_INT 5
68381: NEG
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68434: LD_ADDR_VAR 0 31
68438: PUSH
68439: LD_INT 0
68441: PUSH
68442: LD_INT 4
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: LD_INT 3
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 1
68461: PUSH
68462: LD_INT 4
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 1
68471: PUSH
68472: LD_INT 5
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 0
68481: PUSH
68482: LD_INT 5
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 1
68491: NEG
68492: PUSH
68493: LD_INT 4
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 1
68502: NEG
68503: PUSH
68504: LD_INT 3
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 2
68513: PUSH
68514: LD_INT 5
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 2
68523: NEG
68524: PUSH
68525: LD_INT 3
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 3
68534: NEG
68535: PUSH
68536: LD_INT 0
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 3
68545: NEG
68546: PUSH
68547: LD_INT 1
68549: NEG
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 2
68557: NEG
68558: PUSH
68559: LD_INT 0
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 2
68568: NEG
68569: PUSH
68570: LD_INT 1
68572: PUSH
68573: EMPTY
68574: LIST
68575: LIST
68576: PUSH
68577: LD_INT 3
68579: NEG
68580: PUSH
68581: LD_INT 1
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 4
68590: NEG
68591: PUSH
68592: LD_INT 0
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 4
68601: NEG
68602: PUSH
68603: LD_INT 1
68605: NEG
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 4
68613: NEG
68614: PUSH
68615: LD_INT 2
68617: NEG
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 2
68625: NEG
68626: PUSH
68627: LD_INT 2
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 4
68636: NEG
68637: PUSH
68638: LD_INT 4
68640: NEG
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 4
68648: NEG
68649: PUSH
68650: LD_INT 5
68652: NEG
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 3
68660: NEG
68661: PUSH
68662: LD_INT 4
68664: NEG
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 3
68672: NEG
68673: PUSH
68674: LD_INT 3
68676: NEG
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 4
68684: NEG
68685: PUSH
68686: LD_INT 3
68688: NEG
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 5
68696: NEG
68697: PUSH
68698: LD_INT 4
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 5
68708: NEG
68709: PUSH
68710: LD_INT 5
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 3
68720: NEG
68721: PUSH
68722: LD_INT 5
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 5
68732: NEG
68733: PUSH
68734: LD_INT 3
68736: NEG
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: LD_INT 3
68747: NEG
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 0
68755: PUSH
68756: LD_INT 4
68758: NEG
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 1
68766: PUSH
68767: LD_INT 3
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 1
68777: PUSH
68778: LD_INT 2
68780: NEG
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 0
68788: PUSH
68789: LD_INT 2
68791: NEG
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 1
68799: NEG
68800: PUSH
68801: LD_INT 3
68803: NEG
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 1
68811: NEG
68812: PUSH
68813: LD_INT 4
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 2
68823: PUSH
68824: LD_INT 2
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 2
68834: NEG
68835: PUSH
68836: LD_INT 4
68838: NEG
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 4
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 4
68856: PUSH
68857: LD_INT 1
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 5
68867: PUSH
68868: LD_INT 0
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 5
68877: PUSH
68878: LD_INT 1
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 4
68887: PUSH
68888: LD_INT 1
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 3
68897: PUSH
68898: LD_INT 0
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 3
68907: PUSH
68908: LD_INT 1
68910: NEG
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 3
68918: PUSH
68919: LD_INT 2
68921: NEG
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 5
68929: PUSH
68930: LD_INT 2
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68984: LD_ADDR_VAR 0 32
68988: PUSH
68989: LD_INT 4
68991: NEG
68992: PUSH
68993: LD_INT 0
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 4
69002: NEG
69003: PUSH
69004: LD_INT 1
69006: NEG
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 3
69014: NEG
69015: PUSH
69016: LD_INT 0
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 3
69025: NEG
69026: PUSH
69027: LD_INT 1
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 4
69036: NEG
69037: PUSH
69038: LD_INT 1
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 5
69047: NEG
69048: PUSH
69049: LD_INT 0
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 5
69058: NEG
69059: PUSH
69060: LD_INT 1
69062: NEG
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 5
69070: NEG
69071: PUSH
69072: LD_INT 2
69074: NEG
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 3
69082: NEG
69083: PUSH
69084: LD_INT 2
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 3
69093: NEG
69094: PUSH
69095: LD_INT 3
69097: NEG
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 3
69105: NEG
69106: PUSH
69107: LD_INT 4
69109: NEG
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 2
69117: NEG
69118: PUSH
69119: LD_INT 3
69121: NEG
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 2
69129: NEG
69130: PUSH
69131: LD_INT 2
69133: NEG
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 3
69141: NEG
69142: PUSH
69143: LD_INT 2
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 4
69153: NEG
69154: PUSH
69155: LD_INT 3
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 4
69165: NEG
69166: PUSH
69167: LD_INT 4
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 2
69177: NEG
69178: PUSH
69179: LD_INT 4
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 4
69189: NEG
69190: PUSH
69191: LD_INT 2
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: LD_INT 4
69204: NEG
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 0
69212: PUSH
69213: LD_INT 5
69215: NEG
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 1
69223: PUSH
69224: LD_INT 4
69226: NEG
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 1
69234: PUSH
69235: LD_INT 3
69237: NEG
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 0
69245: PUSH
69246: LD_INT 3
69248: NEG
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 1
69256: NEG
69257: PUSH
69258: LD_INT 4
69260: NEG
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 1
69268: NEG
69269: PUSH
69270: LD_INT 5
69272: NEG
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 2
69280: PUSH
69281: LD_INT 3
69283: NEG
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 2
69291: NEG
69292: PUSH
69293: LD_INT 5
69295: NEG
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 3
69303: PUSH
69304: LD_INT 0
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 3
69313: PUSH
69314: LD_INT 1
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 4
69324: PUSH
69325: LD_INT 0
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 4
69334: PUSH
69335: LD_INT 1
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 3
69344: PUSH
69345: LD_INT 1
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 2
69354: PUSH
69355: LD_INT 0
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 2
69364: PUSH
69365: LD_INT 1
69367: NEG
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 2
69375: PUSH
69376: LD_INT 2
69378: NEG
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 4
69386: PUSH
69387: LD_INT 2
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 4
69396: PUSH
69397: LD_INT 4
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 4
69406: PUSH
69407: LD_INT 3
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 5
69416: PUSH
69417: LD_INT 4
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 5
69426: PUSH
69427: LD_INT 5
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 4
69436: PUSH
69437: LD_INT 5
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 3
69446: PUSH
69447: LD_INT 4
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 3
69456: PUSH
69457: LD_INT 3
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 5
69466: PUSH
69467: LD_INT 3
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 3
69476: PUSH
69477: LD_INT 5
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69531: LD_ADDR_VAR 0 33
69535: PUSH
69536: LD_INT 4
69538: NEG
69539: PUSH
69540: LD_INT 4
69542: NEG
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 4
69550: NEG
69551: PUSH
69552: LD_INT 5
69554: NEG
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 3
69562: NEG
69563: PUSH
69564: LD_INT 4
69566: NEG
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 3
69574: NEG
69575: PUSH
69576: LD_INT 3
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 4
69586: NEG
69587: PUSH
69588: LD_INT 3
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 5
69598: NEG
69599: PUSH
69600: LD_INT 4
69602: NEG
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 5
69610: NEG
69611: PUSH
69612: LD_INT 5
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 3
69622: NEG
69623: PUSH
69624: LD_INT 5
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 5
69634: NEG
69635: PUSH
69636: LD_INT 3
69638: NEG
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 0
69646: PUSH
69647: LD_INT 3
69649: NEG
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PUSH
69655: LD_INT 0
69657: PUSH
69658: LD_INT 4
69660: NEG
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 1
69668: PUSH
69669: LD_INT 3
69671: NEG
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 1
69679: PUSH
69680: LD_INT 2
69682: NEG
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 0
69690: PUSH
69691: LD_INT 2
69693: NEG
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 1
69701: NEG
69702: PUSH
69703: LD_INT 3
69705: NEG
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 1
69713: NEG
69714: PUSH
69715: LD_INT 4
69717: NEG
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 2
69725: PUSH
69726: LD_INT 2
69728: NEG
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 2
69736: NEG
69737: PUSH
69738: LD_INT 4
69740: NEG
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 4
69748: PUSH
69749: LD_INT 0
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 4
69758: PUSH
69759: LD_INT 1
69761: NEG
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 5
69769: PUSH
69770: LD_INT 0
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 5
69779: PUSH
69780: LD_INT 1
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 4
69789: PUSH
69790: LD_INT 1
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 3
69799: PUSH
69800: LD_INT 0
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 3
69809: PUSH
69810: LD_INT 1
69812: NEG
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 3
69820: PUSH
69821: LD_INT 2
69823: NEG
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 5
69831: PUSH
69832: LD_INT 2
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 3
69841: PUSH
69842: LD_INT 3
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 3
69851: PUSH
69852: LD_INT 2
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 4
69861: PUSH
69862: LD_INT 3
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 4
69871: PUSH
69872: LD_INT 4
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 3
69881: PUSH
69882: LD_INT 4
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 2
69891: PUSH
69892: LD_INT 3
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 2
69901: PUSH
69902: LD_INT 2
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 4
69911: PUSH
69912: LD_INT 2
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 2
69921: PUSH
69922: LD_INT 4
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 0
69931: PUSH
69932: LD_INT 4
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 0
69941: PUSH
69942: LD_INT 3
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 1
69951: PUSH
69952: LD_INT 4
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 1
69961: PUSH
69962: LD_INT 5
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 0
69971: PUSH
69972: LD_INT 5
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 1
69981: NEG
69982: PUSH
69983: LD_INT 4
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 1
69992: NEG
69993: PUSH
69994: LD_INT 3
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 2
70003: PUSH
70004: LD_INT 5
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 2
70013: NEG
70014: PUSH
70015: LD_INT 3
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70069: LD_ADDR_VAR 0 34
70073: PUSH
70074: LD_INT 0
70076: PUSH
70077: LD_INT 4
70079: NEG
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 0
70087: PUSH
70088: LD_INT 5
70090: NEG
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 1
70098: PUSH
70099: LD_INT 4
70101: NEG
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 1
70109: PUSH
70110: LD_INT 3
70112: NEG
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 0
70120: PUSH
70121: LD_INT 3
70123: NEG
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 1
70131: NEG
70132: PUSH
70133: LD_INT 4
70135: NEG
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 1
70143: NEG
70144: PUSH
70145: LD_INT 5
70147: NEG
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 2
70155: PUSH
70156: LD_INT 3
70158: NEG
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 2
70166: NEG
70167: PUSH
70168: LD_INT 5
70170: NEG
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 3
70178: PUSH
70179: LD_INT 0
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 3
70188: PUSH
70189: LD_INT 1
70191: NEG
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 4
70199: PUSH
70200: LD_INT 0
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 4
70209: PUSH
70210: LD_INT 1
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 3
70219: PUSH
70220: LD_INT 1
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 2
70229: PUSH
70230: LD_INT 0
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 2
70239: PUSH
70240: LD_INT 1
70242: NEG
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 2
70250: PUSH
70251: LD_INT 2
70253: NEG
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 4
70261: PUSH
70262: LD_INT 2
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 4
70271: PUSH
70272: LD_INT 4
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 4
70281: PUSH
70282: LD_INT 3
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 5
70291: PUSH
70292: LD_INT 4
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 5
70301: PUSH
70302: LD_INT 5
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 4
70311: PUSH
70312: LD_INT 5
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 3
70321: PUSH
70322: LD_INT 4
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 3
70331: PUSH
70332: LD_INT 3
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 5
70341: PUSH
70342: LD_INT 3
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 3
70351: PUSH
70352: LD_INT 5
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 0
70361: PUSH
70362: LD_INT 3
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: LD_INT 2
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 1
70381: PUSH
70382: LD_INT 3
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 1
70391: PUSH
70392: LD_INT 4
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 0
70401: PUSH
70402: LD_INT 4
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 1
70411: NEG
70412: PUSH
70413: LD_INT 3
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 1
70422: NEG
70423: PUSH
70424: LD_INT 2
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 2
70433: PUSH
70434: LD_INT 4
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 2
70443: NEG
70444: PUSH
70445: LD_INT 2
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 4
70454: NEG
70455: PUSH
70456: LD_INT 0
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 4
70465: NEG
70466: PUSH
70467: LD_INT 1
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 3
70477: NEG
70478: PUSH
70479: LD_INT 0
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 3
70488: NEG
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 4
70499: NEG
70500: PUSH
70501: LD_INT 1
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 5
70510: NEG
70511: PUSH
70512: LD_INT 0
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 5
70521: NEG
70522: PUSH
70523: LD_INT 1
70525: NEG
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 5
70533: NEG
70534: PUSH
70535: LD_INT 2
70537: NEG
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 3
70545: NEG
70546: PUSH
70547: LD_INT 2
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: ST_TO_ADDR
// end ; end ;
70601: GO 70604
70603: POP
// case btype of b_depot , b_warehouse :
70604: LD_VAR 0 1
70608: PUSH
70609: LD_INT 0
70611: DOUBLE
70612: EQUAL
70613: IFTRUE 70623
70615: LD_INT 1
70617: DOUBLE
70618: EQUAL
70619: IFTRUE 70623
70621: GO 70824
70623: POP
// case nation of nation_american :
70624: LD_VAR 0 5
70628: PUSH
70629: LD_INT 1
70631: DOUBLE
70632: EQUAL
70633: IFTRUE 70637
70635: GO 70693
70637: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70638: LD_ADDR_VAR 0 9
70642: PUSH
70643: LD_VAR 0 11
70647: PUSH
70648: LD_VAR 0 12
70652: PUSH
70653: LD_VAR 0 13
70657: PUSH
70658: LD_VAR 0 14
70662: PUSH
70663: LD_VAR 0 15
70667: PUSH
70668: LD_VAR 0 16
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: PUSH
70681: LD_VAR 0 4
70685: PUSH
70686: LD_INT 1
70688: PLUS
70689: ARRAY
70690: ST_TO_ADDR
70691: GO 70822
70693: LD_INT 2
70695: DOUBLE
70696: EQUAL
70697: IFTRUE 70701
70699: GO 70757
70701: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70702: LD_ADDR_VAR 0 9
70706: PUSH
70707: LD_VAR 0 17
70711: PUSH
70712: LD_VAR 0 18
70716: PUSH
70717: LD_VAR 0 19
70721: PUSH
70722: LD_VAR 0 20
70726: PUSH
70727: LD_VAR 0 21
70731: PUSH
70732: LD_VAR 0 22
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: PUSH
70745: LD_VAR 0 4
70749: PUSH
70750: LD_INT 1
70752: PLUS
70753: ARRAY
70754: ST_TO_ADDR
70755: GO 70822
70757: LD_INT 3
70759: DOUBLE
70760: EQUAL
70761: IFTRUE 70765
70763: GO 70821
70765: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70766: LD_ADDR_VAR 0 9
70770: PUSH
70771: LD_VAR 0 23
70775: PUSH
70776: LD_VAR 0 24
70780: PUSH
70781: LD_VAR 0 25
70785: PUSH
70786: LD_VAR 0 26
70790: PUSH
70791: LD_VAR 0 27
70795: PUSH
70796: LD_VAR 0 28
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: PUSH
70809: LD_VAR 0 4
70813: PUSH
70814: LD_INT 1
70816: PLUS
70817: ARRAY
70818: ST_TO_ADDR
70819: GO 70822
70821: POP
70822: GO 71377
70824: LD_INT 2
70826: DOUBLE
70827: EQUAL
70828: IFTRUE 70838
70830: LD_INT 3
70832: DOUBLE
70833: EQUAL
70834: IFTRUE 70838
70836: GO 70894
70838: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70839: LD_ADDR_VAR 0 9
70843: PUSH
70844: LD_VAR 0 29
70848: PUSH
70849: LD_VAR 0 30
70853: PUSH
70854: LD_VAR 0 31
70858: PUSH
70859: LD_VAR 0 32
70863: PUSH
70864: LD_VAR 0 33
70868: PUSH
70869: LD_VAR 0 34
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: PUSH
70882: LD_VAR 0 4
70886: PUSH
70887: LD_INT 1
70889: PLUS
70890: ARRAY
70891: ST_TO_ADDR
70892: GO 71377
70894: LD_INT 16
70896: DOUBLE
70897: EQUAL
70898: IFTRUE 70956
70900: LD_INT 17
70902: DOUBLE
70903: EQUAL
70904: IFTRUE 70956
70906: LD_INT 18
70908: DOUBLE
70909: EQUAL
70910: IFTRUE 70956
70912: LD_INT 19
70914: DOUBLE
70915: EQUAL
70916: IFTRUE 70956
70918: LD_INT 22
70920: DOUBLE
70921: EQUAL
70922: IFTRUE 70956
70924: LD_INT 20
70926: DOUBLE
70927: EQUAL
70928: IFTRUE 70956
70930: LD_INT 21
70932: DOUBLE
70933: EQUAL
70934: IFTRUE 70956
70936: LD_INT 23
70938: DOUBLE
70939: EQUAL
70940: IFTRUE 70956
70942: LD_INT 24
70944: DOUBLE
70945: EQUAL
70946: IFTRUE 70956
70948: LD_INT 25
70950: DOUBLE
70951: EQUAL
70952: IFTRUE 70956
70954: GO 71012
70956: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70957: LD_ADDR_VAR 0 9
70961: PUSH
70962: LD_VAR 0 35
70966: PUSH
70967: LD_VAR 0 36
70971: PUSH
70972: LD_VAR 0 37
70976: PUSH
70977: LD_VAR 0 38
70981: PUSH
70982: LD_VAR 0 39
70986: PUSH
70987: LD_VAR 0 40
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: PUSH
71000: LD_VAR 0 4
71004: PUSH
71005: LD_INT 1
71007: PLUS
71008: ARRAY
71009: ST_TO_ADDR
71010: GO 71377
71012: LD_INT 6
71014: DOUBLE
71015: EQUAL
71016: IFTRUE 71068
71018: LD_INT 7
71020: DOUBLE
71021: EQUAL
71022: IFTRUE 71068
71024: LD_INT 8
71026: DOUBLE
71027: EQUAL
71028: IFTRUE 71068
71030: LD_INT 13
71032: DOUBLE
71033: EQUAL
71034: IFTRUE 71068
71036: LD_INT 12
71038: DOUBLE
71039: EQUAL
71040: IFTRUE 71068
71042: LD_INT 15
71044: DOUBLE
71045: EQUAL
71046: IFTRUE 71068
71048: LD_INT 11
71050: DOUBLE
71051: EQUAL
71052: IFTRUE 71068
71054: LD_INT 14
71056: DOUBLE
71057: EQUAL
71058: IFTRUE 71068
71060: LD_INT 10
71062: DOUBLE
71063: EQUAL
71064: IFTRUE 71068
71066: GO 71124
71068: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71069: LD_ADDR_VAR 0 9
71073: PUSH
71074: LD_VAR 0 41
71078: PUSH
71079: LD_VAR 0 42
71083: PUSH
71084: LD_VAR 0 43
71088: PUSH
71089: LD_VAR 0 44
71093: PUSH
71094: LD_VAR 0 45
71098: PUSH
71099: LD_VAR 0 46
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: PUSH
71112: LD_VAR 0 4
71116: PUSH
71117: LD_INT 1
71119: PLUS
71120: ARRAY
71121: ST_TO_ADDR
71122: GO 71377
71124: LD_INT 36
71126: DOUBLE
71127: EQUAL
71128: IFTRUE 71132
71130: GO 71188
71132: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71133: LD_ADDR_VAR 0 9
71137: PUSH
71138: LD_VAR 0 47
71142: PUSH
71143: LD_VAR 0 48
71147: PUSH
71148: LD_VAR 0 49
71152: PUSH
71153: LD_VAR 0 50
71157: PUSH
71158: LD_VAR 0 51
71162: PUSH
71163: LD_VAR 0 52
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: PUSH
71176: LD_VAR 0 4
71180: PUSH
71181: LD_INT 1
71183: PLUS
71184: ARRAY
71185: ST_TO_ADDR
71186: GO 71377
71188: LD_INT 4
71190: DOUBLE
71191: EQUAL
71192: IFTRUE 71214
71194: LD_INT 5
71196: DOUBLE
71197: EQUAL
71198: IFTRUE 71214
71200: LD_INT 34
71202: DOUBLE
71203: EQUAL
71204: IFTRUE 71214
71206: LD_INT 37
71208: DOUBLE
71209: EQUAL
71210: IFTRUE 71214
71212: GO 71270
71214: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71215: LD_ADDR_VAR 0 9
71219: PUSH
71220: LD_VAR 0 53
71224: PUSH
71225: LD_VAR 0 54
71229: PUSH
71230: LD_VAR 0 55
71234: PUSH
71235: LD_VAR 0 56
71239: PUSH
71240: LD_VAR 0 57
71244: PUSH
71245: LD_VAR 0 58
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: PUSH
71258: LD_VAR 0 4
71262: PUSH
71263: LD_INT 1
71265: PLUS
71266: ARRAY
71267: ST_TO_ADDR
71268: GO 71377
71270: LD_INT 31
71272: DOUBLE
71273: EQUAL
71274: IFTRUE 71320
71276: LD_INT 32
71278: DOUBLE
71279: EQUAL
71280: IFTRUE 71320
71282: LD_INT 33
71284: DOUBLE
71285: EQUAL
71286: IFTRUE 71320
71288: LD_INT 27
71290: DOUBLE
71291: EQUAL
71292: IFTRUE 71320
71294: LD_INT 26
71296: DOUBLE
71297: EQUAL
71298: IFTRUE 71320
71300: LD_INT 28
71302: DOUBLE
71303: EQUAL
71304: IFTRUE 71320
71306: LD_INT 29
71308: DOUBLE
71309: EQUAL
71310: IFTRUE 71320
71312: LD_INT 30
71314: DOUBLE
71315: EQUAL
71316: IFTRUE 71320
71318: GO 71376
71320: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71321: LD_ADDR_VAR 0 9
71325: PUSH
71326: LD_VAR 0 59
71330: PUSH
71331: LD_VAR 0 60
71335: PUSH
71336: LD_VAR 0 61
71340: PUSH
71341: LD_VAR 0 62
71345: PUSH
71346: LD_VAR 0 63
71350: PUSH
71351: LD_VAR 0 64
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: PUSH
71364: LD_VAR 0 4
71368: PUSH
71369: LD_INT 1
71371: PLUS
71372: ARRAY
71373: ST_TO_ADDR
71374: GO 71377
71376: POP
// temp_list2 = [ ] ;
71377: LD_ADDR_VAR 0 10
71381: PUSH
71382: EMPTY
71383: ST_TO_ADDR
// for i in temp_list do
71384: LD_ADDR_VAR 0 8
71388: PUSH
71389: LD_VAR 0 9
71393: PUSH
71394: FOR_IN
71395: IFFALSE 71447
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71397: LD_ADDR_VAR 0 10
71401: PUSH
71402: LD_VAR 0 10
71406: PUSH
71407: LD_VAR 0 8
71411: PUSH
71412: LD_INT 1
71414: ARRAY
71415: PUSH
71416: LD_VAR 0 2
71420: PLUS
71421: PUSH
71422: LD_VAR 0 8
71426: PUSH
71427: LD_INT 2
71429: ARRAY
71430: PUSH
71431: LD_VAR 0 3
71435: PLUS
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: EMPTY
71442: LIST
71443: ADD
71444: ST_TO_ADDR
71445: GO 71394
71447: POP
71448: POP
// result = temp_list2 ;
71449: LD_ADDR_VAR 0 7
71453: PUSH
71454: LD_VAR 0 10
71458: ST_TO_ADDR
// end ;
71459: LD_VAR 0 7
71463: RET
// export function EnemyInRange ( unit , dist ) ; begin
71464: LD_INT 0
71466: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71467: LD_ADDR_VAR 0 3
71471: PUSH
71472: LD_VAR 0 1
71476: PPUSH
71477: CALL_OW 255
71481: PPUSH
71482: LD_VAR 0 1
71486: PPUSH
71487: CALL_OW 250
71491: PPUSH
71492: LD_VAR 0 1
71496: PPUSH
71497: CALL_OW 251
71501: PPUSH
71502: LD_VAR 0 2
71506: PPUSH
71507: CALL 44866 0 4
71511: PUSH
71512: LD_INT 4
71514: ARRAY
71515: ST_TO_ADDR
// end ;
71516: LD_VAR 0 3
71520: RET
// export function PlayerSeeMe ( unit ) ; begin
71521: LD_INT 0
71523: PPUSH
// result := See ( your_side , unit ) ;
71524: LD_ADDR_VAR 0 2
71528: PUSH
71529: LD_OWVAR 2
71533: PPUSH
71534: LD_VAR 0 1
71538: PPUSH
71539: CALL_OW 292
71543: ST_TO_ADDR
// end ;
71544: LD_VAR 0 2
71548: RET
// export function ReverseDir ( unit ) ; begin
71549: LD_INT 0
71551: PPUSH
// if not unit then
71552: LD_VAR 0 1
71556: NOT
71557: IFFALSE 71561
// exit ;
71559: GO 71584
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71561: LD_ADDR_VAR 0 2
71565: PUSH
71566: LD_VAR 0 1
71570: PPUSH
71571: CALL_OW 254
71575: PUSH
71576: LD_INT 3
71578: PLUS
71579: PUSH
71580: LD_INT 6
71582: MOD
71583: ST_TO_ADDR
// end ;
71584: LD_VAR 0 2
71588: RET
// export function ReverseArray ( array ) ; var i ; begin
71589: LD_INT 0
71591: PPUSH
71592: PPUSH
// if not array then
71593: LD_VAR 0 1
71597: NOT
71598: IFFALSE 71602
// exit ;
71600: GO 71657
// result := [ ] ;
71602: LD_ADDR_VAR 0 2
71606: PUSH
71607: EMPTY
71608: ST_TO_ADDR
// for i := array downto 1 do
71609: LD_ADDR_VAR 0 3
71613: PUSH
71614: DOUBLE
71615: LD_VAR 0 1
71619: INC
71620: ST_TO_ADDR
71621: LD_INT 1
71623: PUSH
71624: FOR_DOWNTO
71625: IFFALSE 71655
// result := Join ( result , array [ i ] ) ;
71627: LD_ADDR_VAR 0 2
71631: PUSH
71632: LD_VAR 0 2
71636: PPUSH
71637: LD_VAR 0 1
71641: PUSH
71642: LD_VAR 0 3
71646: ARRAY
71647: PPUSH
71648: CALL 76301 0 2
71652: ST_TO_ADDR
71653: GO 71624
71655: POP
71656: POP
// end ;
71657: LD_VAR 0 2
71661: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71662: LD_INT 0
71664: PPUSH
71665: PPUSH
71666: PPUSH
71667: PPUSH
71668: PPUSH
71669: PPUSH
// if not unit or not hexes then
71670: LD_VAR 0 1
71674: NOT
71675: PUSH
71676: LD_VAR 0 2
71680: NOT
71681: OR
71682: IFFALSE 71686
// exit ;
71684: GO 71809
// dist := 9999 ;
71686: LD_ADDR_VAR 0 5
71690: PUSH
71691: LD_INT 9999
71693: ST_TO_ADDR
// for i = 1 to hexes do
71694: LD_ADDR_VAR 0 4
71698: PUSH
71699: DOUBLE
71700: LD_INT 1
71702: DEC
71703: ST_TO_ADDR
71704: LD_VAR 0 2
71708: PUSH
71709: FOR_TO
71710: IFFALSE 71797
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71712: LD_ADDR_VAR 0 6
71716: PUSH
71717: LD_VAR 0 1
71721: PPUSH
71722: LD_VAR 0 2
71726: PUSH
71727: LD_VAR 0 4
71731: ARRAY
71732: PUSH
71733: LD_INT 1
71735: ARRAY
71736: PPUSH
71737: LD_VAR 0 2
71741: PUSH
71742: LD_VAR 0 4
71746: ARRAY
71747: PUSH
71748: LD_INT 2
71750: ARRAY
71751: PPUSH
71752: CALL_OW 297
71756: ST_TO_ADDR
// if tdist < dist then
71757: LD_VAR 0 6
71761: PUSH
71762: LD_VAR 0 5
71766: LESS
71767: IFFALSE 71795
// begin hex := hexes [ i ] ;
71769: LD_ADDR_VAR 0 8
71773: PUSH
71774: LD_VAR 0 2
71778: PUSH
71779: LD_VAR 0 4
71783: ARRAY
71784: ST_TO_ADDR
// dist := tdist ;
71785: LD_ADDR_VAR 0 5
71789: PUSH
71790: LD_VAR 0 6
71794: ST_TO_ADDR
// end ; end ;
71795: GO 71709
71797: POP
71798: POP
// result := hex ;
71799: LD_ADDR_VAR 0 3
71803: PUSH
71804: LD_VAR 0 8
71808: ST_TO_ADDR
// end ;
71809: LD_VAR 0 3
71813: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71814: LD_INT 0
71816: PPUSH
71817: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71818: LD_VAR 0 1
71822: NOT
71823: PUSH
71824: LD_VAR 0 1
71828: PUSH
71829: LD_INT 21
71831: PUSH
71832: LD_INT 2
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 23
71841: PUSH
71842: LD_INT 2
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PPUSH
71853: CALL_OW 69
71857: IN
71858: NOT
71859: OR
71860: IFFALSE 71864
// exit ;
71862: GO 71911
// for i = 1 to 3 do
71864: LD_ADDR_VAR 0 3
71868: PUSH
71869: DOUBLE
71870: LD_INT 1
71872: DEC
71873: ST_TO_ADDR
71874: LD_INT 3
71876: PUSH
71877: FOR_TO
71878: IFFALSE 71909
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71880: LD_VAR 0 1
71884: PPUSH
71885: CALL_OW 250
71889: PPUSH
71890: LD_VAR 0 1
71894: PPUSH
71895: CALL_OW 251
71899: PPUSH
71900: LD_INT 1
71902: PPUSH
71903: CALL_OW 453
71907: GO 71877
71909: POP
71910: POP
// end ;
71911: LD_VAR 0 2
71915: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71916: LD_INT 0
71918: PPUSH
71919: PPUSH
71920: PPUSH
71921: PPUSH
71922: PPUSH
71923: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71924: LD_VAR 0 1
71928: NOT
71929: PUSH
71930: LD_VAR 0 2
71934: NOT
71935: OR
71936: PUSH
71937: LD_VAR 0 1
71941: PPUSH
71942: CALL_OW 314
71946: OR
71947: IFFALSE 71951
// exit ;
71949: GO 72418
// if GetLives ( i ) < 250 then
71951: LD_VAR 0 4
71955: PPUSH
71956: CALL_OW 256
71960: PUSH
71961: LD_INT 250
71963: LESS
71964: IFFALSE 71977
// begin ComAutodestruct ( i ) ;
71966: LD_VAR 0 4
71970: PPUSH
71971: CALL 71814 0 1
// exit ;
71975: GO 72418
// end ; x := GetX ( enemy_unit ) ;
71977: LD_ADDR_VAR 0 7
71981: PUSH
71982: LD_VAR 0 2
71986: PPUSH
71987: CALL_OW 250
71991: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71992: LD_ADDR_VAR 0 8
71996: PUSH
71997: LD_VAR 0 2
72001: PPUSH
72002: CALL_OW 251
72006: ST_TO_ADDR
// if not x or not y then
72007: LD_VAR 0 7
72011: NOT
72012: PUSH
72013: LD_VAR 0 8
72017: NOT
72018: OR
72019: IFFALSE 72023
// exit ;
72021: GO 72418
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72023: LD_ADDR_VAR 0 6
72027: PUSH
72028: LD_VAR 0 7
72032: PPUSH
72033: LD_INT 0
72035: PPUSH
72036: LD_INT 4
72038: PPUSH
72039: CALL_OW 272
72043: PUSH
72044: LD_VAR 0 8
72048: PPUSH
72049: LD_INT 0
72051: PPUSH
72052: LD_INT 4
72054: PPUSH
72055: CALL_OW 273
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_VAR 0 7
72068: PPUSH
72069: LD_INT 1
72071: PPUSH
72072: LD_INT 4
72074: PPUSH
72075: CALL_OW 272
72079: PUSH
72080: LD_VAR 0 8
72084: PPUSH
72085: LD_INT 1
72087: PPUSH
72088: LD_INT 4
72090: PPUSH
72091: CALL_OW 273
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_VAR 0 7
72104: PPUSH
72105: LD_INT 2
72107: PPUSH
72108: LD_INT 4
72110: PPUSH
72111: CALL_OW 272
72115: PUSH
72116: LD_VAR 0 8
72120: PPUSH
72121: LD_INT 2
72123: PPUSH
72124: LD_INT 4
72126: PPUSH
72127: CALL_OW 273
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: PUSH
72136: LD_VAR 0 7
72140: PPUSH
72141: LD_INT 3
72143: PPUSH
72144: LD_INT 4
72146: PPUSH
72147: CALL_OW 272
72151: PUSH
72152: LD_VAR 0 8
72156: PPUSH
72157: LD_INT 3
72159: PPUSH
72160: LD_INT 4
72162: PPUSH
72163: CALL_OW 273
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_VAR 0 7
72176: PPUSH
72177: LD_INT 4
72179: PPUSH
72180: LD_INT 4
72182: PPUSH
72183: CALL_OW 272
72187: PUSH
72188: LD_VAR 0 8
72192: PPUSH
72193: LD_INT 4
72195: PPUSH
72196: LD_INT 4
72198: PPUSH
72199: CALL_OW 273
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_VAR 0 7
72212: PPUSH
72213: LD_INT 5
72215: PPUSH
72216: LD_INT 4
72218: PPUSH
72219: CALL_OW 272
72223: PUSH
72224: LD_VAR 0 8
72228: PPUSH
72229: LD_INT 5
72231: PPUSH
72232: LD_INT 4
72234: PPUSH
72235: CALL_OW 273
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: ST_TO_ADDR
// for i = tmp downto 1 do
72252: LD_ADDR_VAR 0 4
72256: PUSH
72257: DOUBLE
72258: LD_VAR 0 6
72262: INC
72263: ST_TO_ADDR
72264: LD_INT 1
72266: PUSH
72267: FOR_DOWNTO
72268: IFFALSE 72369
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72270: LD_VAR 0 6
72274: PUSH
72275: LD_VAR 0 4
72279: ARRAY
72280: PUSH
72281: LD_INT 1
72283: ARRAY
72284: PPUSH
72285: LD_VAR 0 6
72289: PUSH
72290: LD_VAR 0 4
72294: ARRAY
72295: PUSH
72296: LD_INT 2
72298: ARRAY
72299: PPUSH
72300: CALL_OW 488
72304: NOT
72305: PUSH
72306: LD_VAR 0 6
72310: PUSH
72311: LD_VAR 0 4
72315: ARRAY
72316: PUSH
72317: LD_INT 1
72319: ARRAY
72320: PPUSH
72321: LD_VAR 0 6
72325: PUSH
72326: LD_VAR 0 4
72330: ARRAY
72331: PUSH
72332: LD_INT 2
72334: ARRAY
72335: PPUSH
72336: CALL_OW 428
72340: PUSH
72341: LD_INT 0
72343: NONEQUAL
72344: OR
72345: IFFALSE 72367
// tmp := Delete ( tmp , i ) ;
72347: LD_ADDR_VAR 0 6
72351: PUSH
72352: LD_VAR 0 6
72356: PPUSH
72357: LD_VAR 0 4
72361: PPUSH
72362: CALL_OW 3
72366: ST_TO_ADDR
72367: GO 72267
72369: POP
72370: POP
// j := GetClosestHex ( unit , tmp ) ;
72371: LD_ADDR_VAR 0 5
72375: PUSH
72376: LD_VAR 0 1
72380: PPUSH
72381: LD_VAR 0 6
72385: PPUSH
72386: CALL 71662 0 2
72390: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72391: LD_VAR 0 1
72395: PPUSH
72396: LD_VAR 0 5
72400: PUSH
72401: LD_INT 1
72403: ARRAY
72404: PPUSH
72405: LD_VAR 0 5
72409: PUSH
72410: LD_INT 2
72412: ARRAY
72413: PPUSH
72414: CALL_OW 111
// end ;
72418: LD_VAR 0 3
72422: RET
// export function PrepareApemanSoldier ( ) ; begin
72423: LD_INT 0
72425: PPUSH
// uc_nation := 0 ;
72426: LD_ADDR_OWVAR 21
72430: PUSH
72431: LD_INT 0
72433: ST_TO_ADDR
// hc_sex := sex_male ;
72434: LD_ADDR_OWVAR 27
72438: PUSH
72439: LD_INT 1
72441: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72442: LD_ADDR_OWVAR 28
72446: PUSH
72447: LD_INT 15
72449: ST_TO_ADDR
// hc_gallery :=  ;
72450: LD_ADDR_OWVAR 33
72454: PUSH
72455: LD_STRING 
72457: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72458: LD_ADDR_OWVAR 31
72462: PUSH
72463: LD_INT 0
72465: PPUSH
72466: LD_INT 3
72468: PPUSH
72469: CALL_OW 12
72473: PUSH
72474: LD_INT 0
72476: PPUSH
72477: LD_INT 3
72479: PPUSH
72480: CALL_OW 12
72484: PUSH
72485: LD_INT 0
72487: PUSH
72488: LD_INT 0
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: ST_TO_ADDR
// end ;
72497: LD_VAR 0 1
72501: RET
// export function PrepareApemanEngineer ( ) ; begin
72502: LD_INT 0
72504: PPUSH
// uc_nation := 0 ;
72505: LD_ADDR_OWVAR 21
72509: PUSH
72510: LD_INT 0
72512: ST_TO_ADDR
// hc_sex := sex_male ;
72513: LD_ADDR_OWVAR 27
72517: PUSH
72518: LD_INT 1
72520: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72521: LD_ADDR_OWVAR 28
72525: PUSH
72526: LD_INT 16
72528: ST_TO_ADDR
// hc_gallery :=  ;
72529: LD_ADDR_OWVAR 33
72533: PUSH
72534: LD_STRING 
72536: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72537: LD_ADDR_OWVAR 31
72541: PUSH
72542: LD_INT 0
72544: PPUSH
72545: LD_INT 3
72547: PPUSH
72548: CALL_OW 12
72552: PUSH
72553: LD_INT 0
72555: PPUSH
72556: LD_INT 3
72558: PPUSH
72559: CALL_OW 12
72563: PUSH
72564: LD_INT 0
72566: PUSH
72567: LD_INT 0
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: ST_TO_ADDR
// end ;
72576: LD_VAR 0 1
72580: RET
// export function PrepareApeman ( agressivity ) ; begin
72581: LD_INT 0
72583: PPUSH
// uc_side := 0 ;
72584: LD_ADDR_OWVAR 20
72588: PUSH
72589: LD_INT 0
72591: ST_TO_ADDR
// uc_nation := 0 ;
72592: LD_ADDR_OWVAR 21
72596: PUSH
72597: LD_INT 0
72599: ST_TO_ADDR
// hc_sex := sex_male ;
72600: LD_ADDR_OWVAR 27
72604: PUSH
72605: LD_INT 1
72607: ST_TO_ADDR
// hc_class := class_apeman ;
72608: LD_ADDR_OWVAR 28
72612: PUSH
72613: LD_INT 12
72615: ST_TO_ADDR
// hc_gallery :=  ;
72616: LD_ADDR_OWVAR 33
72620: PUSH
72621: LD_STRING 
72623: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72624: LD_ADDR_OWVAR 35
72628: PUSH
72629: LD_VAR 0 1
72633: NEG
72634: PPUSH
72635: LD_VAR 0 1
72639: PPUSH
72640: CALL_OW 12
72644: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72645: LD_ADDR_OWVAR 31
72649: PUSH
72650: LD_INT 0
72652: PPUSH
72653: LD_INT 3
72655: PPUSH
72656: CALL_OW 12
72660: PUSH
72661: LD_INT 0
72663: PPUSH
72664: LD_INT 3
72666: PPUSH
72667: CALL_OW 12
72671: PUSH
72672: LD_INT 0
72674: PUSH
72675: LD_INT 0
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: ST_TO_ADDR
// end ;
72684: LD_VAR 0 2
72688: RET
// export function PrepareTiger ( agressivity ) ; begin
72689: LD_INT 0
72691: PPUSH
// uc_side := 0 ;
72692: LD_ADDR_OWVAR 20
72696: PUSH
72697: LD_INT 0
72699: ST_TO_ADDR
// uc_nation := 0 ;
72700: LD_ADDR_OWVAR 21
72704: PUSH
72705: LD_INT 0
72707: ST_TO_ADDR
// hc_class := class_tiger ;
72708: LD_ADDR_OWVAR 28
72712: PUSH
72713: LD_INT 14
72715: ST_TO_ADDR
// hc_gallery :=  ;
72716: LD_ADDR_OWVAR 33
72720: PUSH
72721: LD_STRING 
72723: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72724: LD_ADDR_OWVAR 35
72728: PUSH
72729: LD_VAR 0 1
72733: NEG
72734: PPUSH
72735: LD_VAR 0 1
72739: PPUSH
72740: CALL_OW 12
72744: ST_TO_ADDR
// end ;
72745: LD_VAR 0 2
72749: RET
// export function PrepareEnchidna ( ) ; begin
72750: LD_INT 0
72752: PPUSH
// uc_side := 0 ;
72753: LD_ADDR_OWVAR 20
72757: PUSH
72758: LD_INT 0
72760: ST_TO_ADDR
// uc_nation := 0 ;
72761: LD_ADDR_OWVAR 21
72765: PUSH
72766: LD_INT 0
72768: ST_TO_ADDR
// hc_class := class_baggie ;
72769: LD_ADDR_OWVAR 28
72773: PUSH
72774: LD_INT 13
72776: ST_TO_ADDR
// hc_gallery :=  ;
72777: LD_ADDR_OWVAR 33
72781: PUSH
72782: LD_STRING 
72784: ST_TO_ADDR
// end ;
72785: LD_VAR 0 1
72789: RET
// export function PrepareFrog ( ) ; begin
72790: LD_INT 0
72792: PPUSH
// uc_side := 0 ;
72793: LD_ADDR_OWVAR 20
72797: PUSH
72798: LD_INT 0
72800: ST_TO_ADDR
// uc_nation := 0 ;
72801: LD_ADDR_OWVAR 21
72805: PUSH
72806: LD_INT 0
72808: ST_TO_ADDR
// hc_class := class_frog ;
72809: LD_ADDR_OWVAR 28
72813: PUSH
72814: LD_INT 19
72816: ST_TO_ADDR
// hc_gallery :=  ;
72817: LD_ADDR_OWVAR 33
72821: PUSH
72822: LD_STRING 
72824: ST_TO_ADDR
// end ;
72825: LD_VAR 0 1
72829: RET
// export function PrepareFish ( ) ; begin
72830: LD_INT 0
72832: PPUSH
// uc_side := 0 ;
72833: LD_ADDR_OWVAR 20
72837: PUSH
72838: LD_INT 0
72840: ST_TO_ADDR
// uc_nation := 0 ;
72841: LD_ADDR_OWVAR 21
72845: PUSH
72846: LD_INT 0
72848: ST_TO_ADDR
// hc_class := class_fish ;
72849: LD_ADDR_OWVAR 28
72853: PUSH
72854: LD_INT 20
72856: ST_TO_ADDR
// hc_gallery :=  ;
72857: LD_ADDR_OWVAR 33
72861: PUSH
72862: LD_STRING 
72864: ST_TO_ADDR
// end ;
72865: LD_VAR 0 1
72869: RET
// export function PrepareBird ( ) ; begin
72870: LD_INT 0
72872: PPUSH
// uc_side := 0 ;
72873: LD_ADDR_OWVAR 20
72877: PUSH
72878: LD_INT 0
72880: ST_TO_ADDR
// uc_nation := 0 ;
72881: LD_ADDR_OWVAR 21
72885: PUSH
72886: LD_INT 0
72888: ST_TO_ADDR
// hc_class := class_phororhacos ;
72889: LD_ADDR_OWVAR 28
72893: PUSH
72894: LD_INT 18
72896: ST_TO_ADDR
// hc_gallery :=  ;
72897: LD_ADDR_OWVAR 33
72901: PUSH
72902: LD_STRING 
72904: ST_TO_ADDR
// end ;
72905: LD_VAR 0 1
72909: RET
// export function PrepareHorse ( ) ; begin
72910: LD_INT 0
72912: PPUSH
// uc_side := 0 ;
72913: LD_ADDR_OWVAR 20
72917: PUSH
72918: LD_INT 0
72920: ST_TO_ADDR
// uc_nation := 0 ;
72921: LD_ADDR_OWVAR 21
72925: PUSH
72926: LD_INT 0
72928: ST_TO_ADDR
// hc_class := class_horse ;
72929: LD_ADDR_OWVAR 28
72933: PUSH
72934: LD_INT 21
72936: ST_TO_ADDR
// hc_gallery :=  ;
72937: LD_ADDR_OWVAR 33
72941: PUSH
72942: LD_STRING 
72944: ST_TO_ADDR
// end ;
72945: LD_VAR 0 1
72949: RET
// export function PrepareMastodont ( ) ; begin
72950: LD_INT 0
72952: PPUSH
// uc_side := 0 ;
72953: LD_ADDR_OWVAR 20
72957: PUSH
72958: LD_INT 0
72960: ST_TO_ADDR
// uc_nation := 0 ;
72961: LD_ADDR_OWVAR 21
72965: PUSH
72966: LD_INT 0
72968: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72969: LD_ADDR_OWVAR 37
72973: PUSH
72974: LD_INT 31
72976: ST_TO_ADDR
// vc_control := control_rider ;
72977: LD_ADDR_OWVAR 38
72981: PUSH
72982: LD_INT 4
72984: ST_TO_ADDR
// end ;
72985: LD_VAR 0 1
72989: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72990: LD_INT 0
72992: PPUSH
72993: PPUSH
72994: PPUSH
// uc_side = 0 ;
72995: LD_ADDR_OWVAR 20
72999: PUSH
73000: LD_INT 0
73002: ST_TO_ADDR
// uc_nation = 0 ;
73003: LD_ADDR_OWVAR 21
73007: PUSH
73008: LD_INT 0
73010: ST_TO_ADDR
// InitHc_All ( ) ;
73011: CALL_OW 584
// InitVc ;
73015: CALL_OW 20
// if mastodonts then
73019: LD_VAR 0 6
73023: IFFALSE 73090
// for i = 1 to mastodonts do
73025: LD_ADDR_VAR 0 11
73029: PUSH
73030: DOUBLE
73031: LD_INT 1
73033: DEC
73034: ST_TO_ADDR
73035: LD_VAR 0 6
73039: PUSH
73040: FOR_TO
73041: IFFALSE 73088
// begin vc_chassis := 31 ;
73043: LD_ADDR_OWVAR 37
73047: PUSH
73048: LD_INT 31
73050: ST_TO_ADDR
// vc_control := control_rider ;
73051: LD_ADDR_OWVAR 38
73055: PUSH
73056: LD_INT 4
73058: ST_TO_ADDR
// animal := CreateVehicle ;
73059: LD_ADDR_VAR 0 12
73063: PUSH
73064: CALL_OW 45
73068: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73069: LD_VAR 0 12
73073: PPUSH
73074: LD_VAR 0 8
73078: PPUSH
73079: LD_INT 0
73081: PPUSH
73082: CALL 75218 0 3
// end ;
73086: GO 73040
73088: POP
73089: POP
// if horses then
73090: LD_VAR 0 5
73094: IFFALSE 73161
// for i = 1 to horses do
73096: LD_ADDR_VAR 0 11
73100: PUSH
73101: DOUBLE
73102: LD_INT 1
73104: DEC
73105: ST_TO_ADDR
73106: LD_VAR 0 5
73110: PUSH
73111: FOR_TO
73112: IFFALSE 73159
// begin hc_class := 21 ;
73114: LD_ADDR_OWVAR 28
73118: PUSH
73119: LD_INT 21
73121: ST_TO_ADDR
// hc_gallery :=  ;
73122: LD_ADDR_OWVAR 33
73126: PUSH
73127: LD_STRING 
73129: ST_TO_ADDR
// animal := CreateHuman ;
73130: LD_ADDR_VAR 0 12
73134: PUSH
73135: CALL_OW 44
73139: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73140: LD_VAR 0 12
73144: PPUSH
73145: LD_VAR 0 8
73149: PPUSH
73150: LD_INT 0
73152: PPUSH
73153: CALL 75218 0 3
// end ;
73157: GO 73111
73159: POP
73160: POP
// if birds then
73161: LD_VAR 0 1
73165: IFFALSE 73232
// for i = 1 to birds do
73167: LD_ADDR_VAR 0 11
73171: PUSH
73172: DOUBLE
73173: LD_INT 1
73175: DEC
73176: ST_TO_ADDR
73177: LD_VAR 0 1
73181: PUSH
73182: FOR_TO
73183: IFFALSE 73230
// begin hc_class = 18 ;
73185: LD_ADDR_OWVAR 28
73189: PUSH
73190: LD_INT 18
73192: ST_TO_ADDR
// hc_gallery =  ;
73193: LD_ADDR_OWVAR 33
73197: PUSH
73198: LD_STRING 
73200: ST_TO_ADDR
// animal := CreateHuman ;
73201: LD_ADDR_VAR 0 12
73205: PUSH
73206: CALL_OW 44
73210: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73211: LD_VAR 0 12
73215: PPUSH
73216: LD_VAR 0 8
73220: PPUSH
73221: LD_INT 0
73223: PPUSH
73224: CALL 75218 0 3
// end ;
73228: GO 73182
73230: POP
73231: POP
// if tigers then
73232: LD_VAR 0 2
73236: IFFALSE 73320
// for i = 1 to tigers do
73238: LD_ADDR_VAR 0 11
73242: PUSH
73243: DOUBLE
73244: LD_INT 1
73246: DEC
73247: ST_TO_ADDR
73248: LD_VAR 0 2
73252: PUSH
73253: FOR_TO
73254: IFFALSE 73318
// begin hc_class = class_tiger ;
73256: LD_ADDR_OWVAR 28
73260: PUSH
73261: LD_INT 14
73263: ST_TO_ADDR
// hc_gallery =  ;
73264: LD_ADDR_OWVAR 33
73268: PUSH
73269: LD_STRING 
73271: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73272: LD_ADDR_OWVAR 35
73276: PUSH
73277: LD_INT 7
73279: NEG
73280: PPUSH
73281: LD_INT 7
73283: PPUSH
73284: CALL_OW 12
73288: ST_TO_ADDR
// animal := CreateHuman ;
73289: LD_ADDR_VAR 0 12
73293: PUSH
73294: CALL_OW 44
73298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73299: LD_VAR 0 12
73303: PPUSH
73304: LD_VAR 0 8
73308: PPUSH
73309: LD_INT 0
73311: PPUSH
73312: CALL 75218 0 3
// end ;
73316: GO 73253
73318: POP
73319: POP
// if apemans then
73320: LD_VAR 0 3
73324: IFFALSE 73447
// for i = 1 to apemans do
73326: LD_ADDR_VAR 0 11
73330: PUSH
73331: DOUBLE
73332: LD_INT 1
73334: DEC
73335: ST_TO_ADDR
73336: LD_VAR 0 3
73340: PUSH
73341: FOR_TO
73342: IFFALSE 73445
// begin hc_class = class_apeman ;
73344: LD_ADDR_OWVAR 28
73348: PUSH
73349: LD_INT 12
73351: ST_TO_ADDR
// hc_gallery =  ;
73352: LD_ADDR_OWVAR 33
73356: PUSH
73357: LD_STRING 
73359: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73360: LD_ADDR_OWVAR 35
73364: PUSH
73365: LD_INT 2
73367: NEG
73368: PPUSH
73369: LD_INT 2
73371: PPUSH
73372: CALL_OW 12
73376: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73377: LD_ADDR_OWVAR 31
73381: PUSH
73382: LD_INT 1
73384: PPUSH
73385: LD_INT 3
73387: PPUSH
73388: CALL_OW 12
73392: PUSH
73393: LD_INT 1
73395: PPUSH
73396: LD_INT 3
73398: PPUSH
73399: CALL_OW 12
73403: PUSH
73404: LD_INT 0
73406: PUSH
73407: LD_INT 0
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: ST_TO_ADDR
// animal := CreateHuman ;
73416: LD_ADDR_VAR 0 12
73420: PUSH
73421: CALL_OW 44
73425: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73426: LD_VAR 0 12
73430: PPUSH
73431: LD_VAR 0 8
73435: PPUSH
73436: LD_INT 0
73438: PPUSH
73439: CALL 75218 0 3
// end ;
73443: GO 73341
73445: POP
73446: POP
// if enchidnas then
73447: LD_VAR 0 4
73451: IFFALSE 73518
// for i = 1 to enchidnas do
73453: LD_ADDR_VAR 0 11
73457: PUSH
73458: DOUBLE
73459: LD_INT 1
73461: DEC
73462: ST_TO_ADDR
73463: LD_VAR 0 4
73467: PUSH
73468: FOR_TO
73469: IFFALSE 73516
// begin hc_class = 13 ;
73471: LD_ADDR_OWVAR 28
73475: PUSH
73476: LD_INT 13
73478: ST_TO_ADDR
// hc_gallery =  ;
73479: LD_ADDR_OWVAR 33
73483: PUSH
73484: LD_STRING 
73486: ST_TO_ADDR
// animal := CreateHuman ;
73487: LD_ADDR_VAR 0 12
73491: PUSH
73492: CALL_OW 44
73496: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73497: LD_VAR 0 12
73501: PPUSH
73502: LD_VAR 0 8
73506: PPUSH
73507: LD_INT 0
73509: PPUSH
73510: CALL 75218 0 3
// end ;
73514: GO 73468
73516: POP
73517: POP
// if fishes then
73518: LD_VAR 0 7
73522: IFFALSE 73589
// for i = 1 to fishes do
73524: LD_ADDR_VAR 0 11
73528: PUSH
73529: DOUBLE
73530: LD_INT 1
73532: DEC
73533: ST_TO_ADDR
73534: LD_VAR 0 7
73538: PUSH
73539: FOR_TO
73540: IFFALSE 73587
// begin hc_class = 20 ;
73542: LD_ADDR_OWVAR 28
73546: PUSH
73547: LD_INT 20
73549: ST_TO_ADDR
// hc_gallery =  ;
73550: LD_ADDR_OWVAR 33
73554: PUSH
73555: LD_STRING 
73557: ST_TO_ADDR
// animal := CreateHuman ;
73558: LD_ADDR_VAR 0 12
73562: PUSH
73563: CALL_OW 44
73567: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73568: LD_VAR 0 12
73572: PPUSH
73573: LD_VAR 0 9
73577: PPUSH
73578: LD_INT 0
73580: PPUSH
73581: CALL 75218 0 3
// end ;
73585: GO 73539
73587: POP
73588: POP
// end ;
73589: LD_VAR 0 10
73593: RET
// export function WantHeal ( sci , unit ) ; begin
73594: LD_INT 0
73596: PPUSH
// if GetTaskList ( sci ) > 0 then
73597: LD_VAR 0 1
73601: PPUSH
73602: CALL_OW 437
73606: PUSH
73607: LD_INT 0
73609: GREATER
73610: IFFALSE 73680
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73612: LD_VAR 0 1
73616: PPUSH
73617: CALL_OW 437
73621: PUSH
73622: LD_INT 1
73624: ARRAY
73625: PUSH
73626: LD_INT 1
73628: ARRAY
73629: PUSH
73630: LD_STRING l
73632: EQUAL
73633: PUSH
73634: LD_VAR 0 1
73638: PPUSH
73639: CALL_OW 437
73643: PUSH
73644: LD_INT 1
73646: ARRAY
73647: PUSH
73648: LD_INT 4
73650: ARRAY
73651: PUSH
73652: LD_VAR 0 2
73656: EQUAL
73657: AND
73658: IFFALSE 73670
// result := true else
73660: LD_ADDR_VAR 0 3
73664: PUSH
73665: LD_INT 1
73667: ST_TO_ADDR
73668: GO 73678
// result := false ;
73670: LD_ADDR_VAR 0 3
73674: PUSH
73675: LD_INT 0
73677: ST_TO_ADDR
// end else
73678: GO 73688
// result := false ;
73680: LD_ADDR_VAR 0 3
73684: PUSH
73685: LD_INT 0
73687: ST_TO_ADDR
// end ;
73688: LD_VAR 0 3
73692: RET
// export function HealTarget ( sci ) ; begin
73693: LD_INT 0
73695: PPUSH
// if not sci then
73696: LD_VAR 0 1
73700: NOT
73701: IFFALSE 73705
// exit ;
73703: GO 73770
// result := 0 ;
73705: LD_ADDR_VAR 0 2
73709: PUSH
73710: LD_INT 0
73712: ST_TO_ADDR
// if GetTaskList ( sci ) then
73713: LD_VAR 0 1
73717: PPUSH
73718: CALL_OW 437
73722: IFFALSE 73770
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73724: LD_VAR 0 1
73728: PPUSH
73729: CALL_OW 437
73733: PUSH
73734: LD_INT 1
73736: ARRAY
73737: PUSH
73738: LD_INT 1
73740: ARRAY
73741: PUSH
73742: LD_STRING l
73744: EQUAL
73745: IFFALSE 73770
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73747: LD_ADDR_VAR 0 2
73751: PUSH
73752: LD_VAR 0 1
73756: PPUSH
73757: CALL_OW 437
73761: PUSH
73762: LD_INT 1
73764: ARRAY
73765: PUSH
73766: LD_INT 4
73768: ARRAY
73769: ST_TO_ADDR
// end ;
73770: LD_VAR 0 2
73774: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73775: LD_INT 0
73777: PPUSH
73778: PPUSH
73779: PPUSH
73780: PPUSH
// if not base_units then
73781: LD_VAR 0 1
73785: NOT
73786: IFFALSE 73790
// exit ;
73788: GO 73877
// result := false ;
73790: LD_ADDR_VAR 0 2
73794: PUSH
73795: LD_INT 0
73797: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73798: LD_ADDR_VAR 0 5
73802: PUSH
73803: LD_VAR 0 1
73807: PPUSH
73808: LD_INT 21
73810: PUSH
73811: LD_INT 3
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: PPUSH
73818: CALL_OW 72
73822: ST_TO_ADDR
// if not tmp then
73823: LD_VAR 0 5
73827: NOT
73828: IFFALSE 73832
// exit ;
73830: GO 73877
// for i in tmp do
73832: LD_ADDR_VAR 0 3
73836: PUSH
73837: LD_VAR 0 5
73841: PUSH
73842: FOR_IN
73843: IFFALSE 73875
// begin result := EnemyInRange ( i , 22 ) ;
73845: LD_ADDR_VAR 0 2
73849: PUSH
73850: LD_VAR 0 3
73854: PPUSH
73855: LD_INT 22
73857: PPUSH
73858: CALL 71464 0 2
73862: ST_TO_ADDR
// if result then
73863: LD_VAR 0 2
73867: IFFALSE 73873
// exit ;
73869: POP
73870: POP
73871: GO 73877
// end ;
73873: GO 73842
73875: POP
73876: POP
// end ;
73877: LD_VAR 0 2
73881: RET
// export function FilterByTag ( units , tag ) ; begin
73882: LD_INT 0
73884: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73885: LD_ADDR_VAR 0 3
73889: PUSH
73890: LD_VAR 0 1
73894: PPUSH
73895: LD_INT 120
73897: PUSH
73898: LD_VAR 0 2
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: PPUSH
73907: CALL_OW 72
73911: ST_TO_ADDR
// end ;
73912: LD_VAR 0 3
73916: RET
// export function IsDriver ( un ) ; begin
73917: LD_INT 0
73919: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73920: LD_ADDR_VAR 0 2
73924: PUSH
73925: LD_VAR 0 1
73929: PUSH
73930: LD_INT 55
73932: PUSH
73933: EMPTY
73934: LIST
73935: PPUSH
73936: CALL_OW 69
73940: IN
73941: ST_TO_ADDR
// end ;
73942: LD_VAR 0 2
73946: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73947: LD_INT 0
73949: PPUSH
73950: PPUSH
// list := [ ] ;
73951: LD_ADDR_VAR 0 5
73955: PUSH
73956: EMPTY
73957: ST_TO_ADDR
// case d of 0 :
73958: LD_VAR 0 3
73962: PUSH
73963: LD_INT 0
73965: DOUBLE
73966: EQUAL
73967: IFTRUE 73971
73969: GO 74104
73971: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73972: LD_ADDR_VAR 0 5
73976: PUSH
73977: LD_VAR 0 1
73981: PUSH
73982: LD_INT 4
73984: MINUS
73985: PUSH
73986: LD_VAR 0 2
73990: PUSH
73991: LD_INT 4
73993: MINUS
73994: PUSH
73995: LD_INT 2
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: LIST
74002: PUSH
74003: LD_VAR 0 1
74007: PUSH
74008: LD_INT 3
74010: MINUS
74011: PUSH
74012: LD_VAR 0 2
74016: PUSH
74017: LD_INT 1
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: LIST
74024: PUSH
74025: LD_VAR 0 1
74029: PUSH
74030: LD_INT 4
74032: PLUS
74033: PUSH
74034: LD_VAR 0 2
74038: PUSH
74039: LD_INT 4
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: LIST
74046: PUSH
74047: LD_VAR 0 1
74051: PUSH
74052: LD_INT 3
74054: PLUS
74055: PUSH
74056: LD_VAR 0 2
74060: PUSH
74061: LD_INT 3
74063: PLUS
74064: PUSH
74065: LD_INT 5
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: LIST
74072: PUSH
74073: LD_VAR 0 1
74077: PUSH
74078: LD_VAR 0 2
74082: PUSH
74083: LD_INT 4
74085: PLUS
74086: PUSH
74087: LD_INT 0
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: LIST
74094: PUSH
74095: EMPTY
74096: LIST
74097: LIST
74098: LIST
74099: LIST
74100: LIST
74101: ST_TO_ADDR
// end ; 1 :
74102: GO 74802
74104: LD_INT 1
74106: DOUBLE
74107: EQUAL
74108: IFTRUE 74112
74110: GO 74245
74112: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74113: LD_ADDR_VAR 0 5
74117: PUSH
74118: LD_VAR 0 1
74122: PUSH
74123: LD_VAR 0 2
74127: PUSH
74128: LD_INT 4
74130: MINUS
74131: PUSH
74132: LD_INT 3
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: LIST
74139: PUSH
74140: LD_VAR 0 1
74144: PUSH
74145: LD_INT 3
74147: MINUS
74148: PUSH
74149: LD_VAR 0 2
74153: PUSH
74154: LD_INT 3
74156: MINUS
74157: PUSH
74158: LD_INT 2
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: LIST
74165: PUSH
74166: LD_VAR 0 1
74170: PUSH
74171: LD_INT 4
74173: MINUS
74174: PUSH
74175: LD_VAR 0 2
74179: PUSH
74180: LD_INT 1
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: LIST
74187: PUSH
74188: LD_VAR 0 1
74192: PUSH
74193: LD_VAR 0 2
74197: PUSH
74198: LD_INT 3
74200: PLUS
74201: PUSH
74202: LD_INT 0
74204: PUSH
74205: EMPTY
74206: LIST
74207: LIST
74208: LIST
74209: PUSH
74210: LD_VAR 0 1
74214: PUSH
74215: LD_INT 4
74217: PLUS
74218: PUSH
74219: LD_VAR 0 2
74223: PUSH
74224: LD_INT 4
74226: PLUS
74227: PUSH
74228: LD_INT 5
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: LIST
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: ST_TO_ADDR
// end ; 2 :
74243: GO 74802
74245: LD_INT 2
74247: DOUBLE
74248: EQUAL
74249: IFTRUE 74253
74251: GO 74382
74253: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74254: LD_ADDR_VAR 0 5
74258: PUSH
74259: LD_VAR 0 1
74263: PUSH
74264: LD_VAR 0 2
74268: PUSH
74269: LD_INT 3
74271: MINUS
74272: PUSH
74273: LD_INT 3
74275: PUSH
74276: EMPTY
74277: LIST
74278: LIST
74279: LIST
74280: PUSH
74281: LD_VAR 0 1
74285: PUSH
74286: LD_INT 4
74288: PLUS
74289: PUSH
74290: LD_VAR 0 2
74294: PUSH
74295: LD_INT 4
74297: PUSH
74298: EMPTY
74299: LIST
74300: LIST
74301: LIST
74302: PUSH
74303: LD_VAR 0 1
74307: PUSH
74308: LD_VAR 0 2
74312: PUSH
74313: LD_INT 4
74315: PLUS
74316: PUSH
74317: LD_INT 0
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: LIST
74324: PUSH
74325: LD_VAR 0 1
74329: PUSH
74330: LD_INT 3
74332: MINUS
74333: PUSH
74334: LD_VAR 0 2
74338: PUSH
74339: LD_INT 1
74341: PUSH
74342: EMPTY
74343: LIST
74344: LIST
74345: LIST
74346: PUSH
74347: LD_VAR 0 1
74351: PUSH
74352: LD_INT 4
74354: MINUS
74355: PUSH
74356: LD_VAR 0 2
74360: PUSH
74361: LD_INT 4
74363: MINUS
74364: PUSH
74365: LD_INT 2
74367: PUSH
74368: EMPTY
74369: LIST
74370: LIST
74371: LIST
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: LIST
74377: LIST
74378: LIST
74379: ST_TO_ADDR
// end ; 3 :
74380: GO 74802
74382: LD_INT 3
74384: DOUBLE
74385: EQUAL
74386: IFTRUE 74390
74388: GO 74523
74390: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74391: LD_ADDR_VAR 0 5
74395: PUSH
74396: LD_VAR 0 1
74400: PUSH
74401: LD_INT 3
74403: PLUS
74404: PUSH
74405: LD_VAR 0 2
74409: PUSH
74410: LD_INT 4
74412: PUSH
74413: EMPTY
74414: LIST
74415: LIST
74416: LIST
74417: PUSH
74418: LD_VAR 0 1
74422: PUSH
74423: LD_INT 4
74425: PLUS
74426: PUSH
74427: LD_VAR 0 2
74431: PUSH
74432: LD_INT 4
74434: PLUS
74435: PUSH
74436: LD_INT 5
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: LIST
74443: PUSH
74444: LD_VAR 0 1
74448: PUSH
74449: LD_INT 4
74451: MINUS
74452: PUSH
74453: LD_VAR 0 2
74457: PUSH
74458: LD_INT 1
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: LIST
74465: PUSH
74466: LD_VAR 0 1
74470: PUSH
74471: LD_VAR 0 2
74475: PUSH
74476: LD_INT 4
74478: MINUS
74479: PUSH
74480: LD_INT 3
74482: PUSH
74483: EMPTY
74484: LIST
74485: LIST
74486: LIST
74487: PUSH
74488: LD_VAR 0 1
74492: PUSH
74493: LD_INT 3
74495: MINUS
74496: PUSH
74497: LD_VAR 0 2
74501: PUSH
74502: LD_INT 3
74504: MINUS
74505: PUSH
74506: LD_INT 2
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: LIST
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: LIST
74518: LIST
74519: LIST
74520: ST_TO_ADDR
// end ; 4 :
74521: GO 74802
74523: LD_INT 4
74525: DOUBLE
74526: EQUAL
74527: IFTRUE 74531
74529: GO 74664
74531: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74532: LD_ADDR_VAR 0 5
74536: PUSH
74537: LD_VAR 0 1
74541: PUSH
74542: LD_VAR 0 2
74546: PUSH
74547: LD_INT 4
74549: PLUS
74550: PUSH
74551: LD_INT 0
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: LIST
74558: PUSH
74559: LD_VAR 0 1
74563: PUSH
74564: LD_INT 3
74566: PLUS
74567: PUSH
74568: LD_VAR 0 2
74572: PUSH
74573: LD_INT 3
74575: PLUS
74576: PUSH
74577: LD_INT 5
74579: PUSH
74580: EMPTY
74581: LIST
74582: LIST
74583: LIST
74584: PUSH
74585: LD_VAR 0 1
74589: PUSH
74590: LD_INT 4
74592: PLUS
74593: PUSH
74594: LD_VAR 0 2
74598: PUSH
74599: LD_INT 4
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: LIST
74606: PUSH
74607: LD_VAR 0 1
74611: PUSH
74612: LD_VAR 0 2
74616: PUSH
74617: LD_INT 3
74619: MINUS
74620: PUSH
74621: LD_INT 3
74623: PUSH
74624: EMPTY
74625: LIST
74626: LIST
74627: LIST
74628: PUSH
74629: LD_VAR 0 1
74633: PUSH
74634: LD_INT 4
74636: MINUS
74637: PUSH
74638: LD_VAR 0 2
74642: PUSH
74643: LD_INT 4
74645: MINUS
74646: PUSH
74647: LD_INT 2
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: LIST
74654: PUSH
74655: EMPTY
74656: LIST
74657: LIST
74658: LIST
74659: LIST
74660: LIST
74661: ST_TO_ADDR
// end ; 5 :
74662: GO 74802
74664: LD_INT 5
74666: DOUBLE
74667: EQUAL
74668: IFTRUE 74672
74670: GO 74801
74672: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74673: LD_ADDR_VAR 0 5
74677: PUSH
74678: LD_VAR 0 1
74682: PUSH
74683: LD_INT 4
74685: MINUS
74686: PUSH
74687: LD_VAR 0 2
74691: PUSH
74692: LD_INT 1
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: LIST
74699: PUSH
74700: LD_VAR 0 1
74704: PUSH
74705: LD_VAR 0 2
74709: PUSH
74710: LD_INT 4
74712: MINUS
74713: PUSH
74714: LD_INT 3
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: LIST
74721: PUSH
74722: LD_VAR 0 1
74726: PUSH
74727: LD_INT 4
74729: PLUS
74730: PUSH
74731: LD_VAR 0 2
74735: PUSH
74736: LD_INT 4
74738: PLUS
74739: PUSH
74740: LD_INT 5
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: LIST
74747: PUSH
74748: LD_VAR 0 1
74752: PUSH
74753: LD_INT 3
74755: PLUS
74756: PUSH
74757: LD_VAR 0 2
74761: PUSH
74762: LD_INT 4
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: LIST
74769: PUSH
74770: LD_VAR 0 1
74774: PUSH
74775: LD_VAR 0 2
74779: PUSH
74780: LD_INT 3
74782: PLUS
74783: PUSH
74784: LD_INT 0
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: LIST
74791: PUSH
74792: EMPTY
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: ST_TO_ADDR
// end ; end ;
74799: GO 74802
74801: POP
// result := list ;
74802: LD_ADDR_VAR 0 4
74806: PUSH
74807: LD_VAR 0 5
74811: ST_TO_ADDR
// end ;
74812: LD_VAR 0 4
74816: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74817: LD_INT 0
74819: PPUSH
74820: PPUSH
74821: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74822: LD_VAR 0 1
74826: NOT
74827: PUSH
74828: LD_VAR 0 2
74832: PUSH
74833: LD_INT 1
74835: PUSH
74836: LD_INT 2
74838: PUSH
74839: LD_INT 3
74841: PUSH
74842: LD_INT 4
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: IN
74851: NOT
74852: OR
74853: IFFALSE 74857
// exit ;
74855: GO 74940
// tmp := [ ] ;
74857: LD_ADDR_VAR 0 5
74861: PUSH
74862: EMPTY
74863: ST_TO_ADDR
// for i in units do
74864: LD_ADDR_VAR 0 4
74868: PUSH
74869: LD_VAR 0 1
74873: PUSH
74874: FOR_IN
74875: IFFALSE 74909
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74877: LD_ADDR_VAR 0 5
74881: PUSH
74882: LD_VAR 0 5
74886: PPUSH
74887: LD_VAR 0 4
74891: PPUSH
74892: LD_VAR 0 2
74896: PPUSH
74897: CALL_OW 259
74901: PPUSH
74902: CALL 76301 0 2
74906: ST_TO_ADDR
74907: GO 74874
74909: POP
74910: POP
// if not tmp then
74911: LD_VAR 0 5
74915: NOT
74916: IFFALSE 74920
// exit ;
74918: GO 74940
// result := SortListByListDesc ( units , tmp ) ;
74920: LD_ADDR_VAR 0 3
74924: PUSH
74925: LD_VAR 0 1
74929: PPUSH
74930: LD_VAR 0 5
74934: PPUSH
74935: CALL_OW 77
74939: ST_TO_ADDR
// end ;
74940: LD_VAR 0 3
74944: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74945: LD_INT 0
74947: PPUSH
74948: PPUSH
74949: PPUSH
// result := false ;
74950: LD_ADDR_VAR 0 3
74954: PUSH
74955: LD_INT 0
74957: ST_TO_ADDR
// if not building then
74958: LD_VAR 0 2
74962: NOT
74963: IFFALSE 74967
// exit ;
74965: GO 75105
// x := GetX ( building ) ;
74967: LD_ADDR_VAR 0 4
74971: PUSH
74972: LD_VAR 0 2
74976: PPUSH
74977: CALL_OW 250
74981: ST_TO_ADDR
// y := GetY ( building ) ;
74982: LD_ADDR_VAR 0 5
74986: PUSH
74987: LD_VAR 0 2
74991: PPUSH
74992: CALL_OW 251
74996: ST_TO_ADDR
// if not x or not y then
74997: LD_VAR 0 4
75001: NOT
75002: PUSH
75003: LD_VAR 0 5
75007: NOT
75008: OR
75009: IFFALSE 75013
// exit ;
75011: GO 75105
// if GetTaskList ( unit ) then
75013: LD_VAR 0 1
75017: PPUSH
75018: CALL_OW 437
75022: IFFALSE 75105
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75024: LD_STRING e
75026: PUSH
75027: LD_VAR 0 1
75031: PPUSH
75032: CALL_OW 437
75036: PUSH
75037: LD_INT 1
75039: ARRAY
75040: PUSH
75041: LD_INT 1
75043: ARRAY
75044: EQUAL
75045: PUSH
75046: LD_VAR 0 4
75050: PUSH
75051: LD_VAR 0 1
75055: PPUSH
75056: CALL_OW 437
75060: PUSH
75061: LD_INT 1
75063: ARRAY
75064: PUSH
75065: LD_INT 2
75067: ARRAY
75068: EQUAL
75069: AND
75070: PUSH
75071: LD_VAR 0 5
75075: PUSH
75076: LD_VAR 0 1
75080: PPUSH
75081: CALL_OW 437
75085: PUSH
75086: LD_INT 1
75088: ARRAY
75089: PUSH
75090: LD_INT 3
75092: ARRAY
75093: EQUAL
75094: AND
75095: IFFALSE 75105
// result := true end ;
75097: LD_ADDR_VAR 0 3
75101: PUSH
75102: LD_INT 1
75104: ST_TO_ADDR
// end ;
75105: LD_VAR 0 3
75109: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75110: LD_INT 0
75112: PPUSH
// result := false ;
75113: LD_ADDR_VAR 0 4
75117: PUSH
75118: LD_INT 0
75120: ST_TO_ADDR
// if GetTaskList ( unit ) then
75121: LD_VAR 0 1
75125: PPUSH
75126: CALL_OW 437
75130: IFFALSE 75213
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75132: LD_STRING M
75134: PUSH
75135: LD_VAR 0 1
75139: PPUSH
75140: CALL_OW 437
75144: PUSH
75145: LD_INT 1
75147: ARRAY
75148: PUSH
75149: LD_INT 1
75151: ARRAY
75152: EQUAL
75153: PUSH
75154: LD_VAR 0 2
75158: PUSH
75159: LD_VAR 0 1
75163: PPUSH
75164: CALL_OW 437
75168: PUSH
75169: LD_INT 1
75171: ARRAY
75172: PUSH
75173: LD_INT 2
75175: ARRAY
75176: EQUAL
75177: AND
75178: PUSH
75179: LD_VAR 0 3
75183: PUSH
75184: LD_VAR 0 1
75188: PPUSH
75189: CALL_OW 437
75193: PUSH
75194: LD_INT 1
75196: ARRAY
75197: PUSH
75198: LD_INT 3
75200: ARRAY
75201: EQUAL
75202: AND
75203: IFFALSE 75213
// result := true ;
75205: LD_ADDR_VAR 0 4
75209: PUSH
75210: LD_INT 1
75212: ST_TO_ADDR
// end ; end ;
75213: LD_VAR 0 4
75217: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75218: LD_INT 0
75220: PPUSH
75221: PPUSH
75222: PPUSH
75223: PPUSH
// if not unit or not area then
75224: LD_VAR 0 1
75228: NOT
75229: PUSH
75230: LD_VAR 0 2
75234: NOT
75235: OR
75236: IFFALSE 75240
// exit ;
75238: GO 75404
// tmp := AreaToList ( area , i ) ;
75240: LD_ADDR_VAR 0 6
75244: PUSH
75245: LD_VAR 0 2
75249: PPUSH
75250: LD_VAR 0 5
75254: PPUSH
75255: CALL_OW 517
75259: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75260: LD_ADDR_VAR 0 5
75264: PUSH
75265: DOUBLE
75266: LD_INT 1
75268: DEC
75269: ST_TO_ADDR
75270: LD_VAR 0 6
75274: PUSH
75275: LD_INT 1
75277: ARRAY
75278: PUSH
75279: FOR_TO
75280: IFFALSE 75402
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75282: LD_ADDR_VAR 0 7
75286: PUSH
75287: LD_VAR 0 6
75291: PUSH
75292: LD_INT 1
75294: ARRAY
75295: PUSH
75296: LD_VAR 0 5
75300: ARRAY
75301: PUSH
75302: LD_VAR 0 6
75306: PUSH
75307: LD_INT 2
75309: ARRAY
75310: PUSH
75311: LD_VAR 0 5
75315: ARRAY
75316: PUSH
75317: EMPTY
75318: LIST
75319: LIST
75320: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75321: LD_VAR 0 7
75325: PUSH
75326: LD_INT 1
75328: ARRAY
75329: PPUSH
75330: LD_VAR 0 7
75334: PUSH
75335: LD_INT 2
75337: ARRAY
75338: PPUSH
75339: CALL_OW 428
75343: PUSH
75344: LD_INT 0
75346: EQUAL
75347: IFFALSE 75400
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75349: LD_VAR 0 1
75353: PPUSH
75354: LD_VAR 0 7
75358: PUSH
75359: LD_INT 1
75361: ARRAY
75362: PPUSH
75363: LD_VAR 0 7
75367: PUSH
75368: LD_INT 2
75370: ARRAY
75371: PPUSH
75372: LD_VAR 0 3
75376: PPUSH
75377: CALL_OW 48
// result := IsPlaced ( unit ) ;
75381: LD_ADDR_VAR 0 4
75385: PUSH
75386: LD_VAR 0 1
75390: PPUSH
75391: CALL_OW 305
75395: ST_TO_ADDR
// exit ;
75396: POP
75397: POP
75398: GO 75404
// end ; end ;
75400: GO 75279
75402: POP
75403: POP
// end ;
75404: LD_VAR 0 4
75408: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75409: LD_INT 0
75411: PPUSH
75412: PPUSH
75413: PPUSH
// if not side or side > 8 then
75414: LD_VAR 0 1
75418: NOT
75419: PUSH
75420: LD_VAR 0 1
75424: PUSH
75425: LD_INT 8
75427: GREATER
75428: OR
75429: IFFALSE 75433
// exit ;
75431: GO 75620
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75433: LD_ADDR_VAR 0 4
75437: PUSH
75438: LD_INT 22
75440: PUSH
75441: LD_VAR 0 1
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: LD_INT 21
75452: PUSH
75453: LD_INT 3
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: PUSH
75460: EMPTY
75461: LIST
75462: LIST
75463: PPUSH
75464: CALL_OW 69
75468: ST_TO_ADDR
// if not tmp then
75469: LD_VAR 0 4
75473: NOT
75474: IFFALSE 75478
// exit ;
75476: GO 75620
// enable_addtolog := true ;
75478: LD_ADDR_OWVAR 81
75482: PUSH
75483: LD_INT 1
75485: ST_TO_ADDR
// AddToLog ( [ ) ;
75486: LD_STRING [
75488: PPUSH
75489: CALL_OW 561
// for i in tmp do
75493: LD_ADDR_VAR 0 3
75497: PUSH
75498: LD_VAR 0 4
75502: PUSH
75503: FOR_IN
75504: IFFALSE 75611
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75506: LD_STRING [
75508: PUSH
75509: LD_VAR 0 3
75513: PPUSH
75514: CALL_OW 266
75518: STR
75519: PUSH
75520: LD_STRING , 
75522: STR
75523: PUSH
75524: LD_VAR 0 3
75528: PPUSH
75529: CALL_OW 250
75533: STR
75534: PUSH
75535: LD_STRING , 
75537: STR
75538: PUSH
75539: LD_VAR 0 3
75543: PPUSH
75544: CALL_OW 251
75548: STR
75549: PUSH
75550: LD_STRING , 
75552: STR
75553: PUSH
75554: LD_VAR 0 3
75558: PPUSH
75559: CALL_OW 254
75563: STR
75564: PUSH
75565: LD_STRING , 
75567: STR
75568: PUSH
75569: LD_VAR 0 3
75573: PPUSH
75574: LD_INT 1
75576: PPUSH
75577: CALL_OW 268
75581: STR
75582: PUSH
75583: LD_STRING , 
75585: STR
75586: PUSH
75587: LD_VAR 0 3
75591: PPUSH
75592: LD_INT 2
75594: PPUSH
75595: CALL_OW 268
75599: STR
75600: PUSH
75601: LD_STRING ],
75603: STR
75604: PPUSH
75605: CALL_OW 561
// end ;
75609: GO 75503
75611: POP
75612: POP
// AddToLog ( ]; ) ;
75613: LD_STRING ];
75615: PPUSH
75616: CALL_OW 561
// end ;
75620: LD_VAR 0 2
75624: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75625: LD_INT 0
75627: PPUSH
75628: PPUSH
75629: PPUSH
75630: PPUSH
75631: PPUSH
// if not area or not rate or not max then
75632: LD_VAR 0 1
75636: NOT
75637: PUSH
75638: LD_VAR 0 2
75642: NOT
75643: OR
75644: PUSH
75645: LD_VAR 0 4
75649: NOT
75650: OR
75651: IFFALSE 75655
// exit ;
75653: GO 75844
// while 1 do
75655: LD_INT 1
75657: IFFALSE 75844
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75659: LD_ADDR_VAR 0 9
75663: PUSH
75664: LD_VAR 0 1
75668: PPUSH
75669: LD_INT 1
75671: PPUSH
75672: CALL_OW 287
75676: PUSH
75677: LD_INT 10
75679: MUL
75680: ST_TO_ADDR
// r := rate / 10 ;
75681: LD_ADDR_VAR 0 7
75685: PUSH
75686: LD_VAR 0 2
75690: PUSH
75691: LD_INT 10
75693: DIVREAL
75694: ST_TO_ADDR
// time := 1 1$00 ;
75695: LD_ADDR_VAR 0 8
75699: PUSH
75700: LD_INT 2100
75702: ST_TO_ADDR
// if amount < min then
75703: LD_VAR 0 9
75707: PUSH
75708: LD_VAR 0 3
75712: LESS
75713: IFFALSE 75731
// r := r * 2 else
75715: LD_ADDR_VAR 0 7
75719: PUSH
75720: LD_VAR 0 7
75724: PUSH
75725: LD_INT 2
75727: MUL
75728: ST_TO_ADDR
75729: GO 75757
// if amount > max then
75731: LD_VAR 0 9
75735: PUSH
75736: LD_VAR 0 4
75740: GREATER
75741: IFFALSE 75757
// r := r / 2 ;
75743: LD_ADDR_VAR 0 7
75747: PUSH
75748: LD_VAR 0 7
75752: PUSH
75753: LD_INT 2
75755: DIVREAL
75756: ST_TO_ADDR
// time := time / r ;
75757: LD_ADDR_VAR 0 8
75761: PUSH
75762: LD_VAR 0 8
75766: PUSH
75767: LD_VAR 0 7
75771: DIVREAL
75772: ST_TO_ADDR
// if time < 0 then
75773: LD_VAR 0 8
75777: PUSH
75778: LD_INT 0
75780: LESS
75781: IFFALSE 75798
// time := time * - 1 ;
75783: LD_ADDR_VAR 0 8
75787: PUSH
75788: LD_VAR 0 8
75792: PUSH
75793: LD_INT 1
75795: NEG
75796: MUL
75797: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75798: LD_VAR 0 8
75802: PUSH
75803: LD_INT 35
75805: PPUSH
75806: LD_INT 875
75808: PPUSH
75809: CALL_OW 12
75813: PLUS
75814: PPUSH
75815: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75819: LD_INT 1
75821: PPUSH
75822: LD_INT 5
75824: PPUSH
75825: CALL_OW 12
75829: PPUSH
75830: LD_VAR 0 1
75834: PPUSH
75835: LD_INT 1
75837: PPUSH
75838: CALL_OW 55
// end ;
75842: GO 75655
// end ;
75844: LD_VAR 0 5
75848: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75849: LD_INT 0
75851: PPUSH
75852: PPUSH
75853: PPUSH
75854: PPUSH
75855: PPUSH
75856: PPUSH
75857: PPUSH
75858: PPUSH
// if not turrets or not factories then
75859: LD_VAR 0 1
75863: NOT
75864: PUSH
75865: LD_VAR 0 2
75869: NOT
75870: OR
75871: IFFALSE 75875
// exit ;
75873: GO 76182
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75875: LD_ADDR_VAR 0 10
75879: PUSH
75880: LD_INT 5
75882: PUSH
75883: LD_INT 6
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: PUSH
75890: LD_INT 2
75892: PUSH
75893: LD_INT 4
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: PUSH
75900: LD_INT 3
75902: PUSH
75903: LD_INT 5
75905: PUSH
75906: EMPTY
75907: LIST
75908: LIST
75909: PUSH
75910: EMPTY
75911: LIST
75912: LIST
75913: LIST
75914: PUSH
75915: LD_INT 24
75917: PUSH
75918: LD_INT 25
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: PUSH
75925: LD_INT 23
75927: PUSH
75928: LD_INT 27
75930: PUSH
75931: EMPTY
75932: LIST
75933: LIST
75934: PUSH
75935: EMPTY
75936: LIST
75937: LIST
75938: PUSH
75939: LD_INT 42
75941: PUSH
75942: LD_INT 43
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: PUSH
75949: LD_INT 44
75951: PUSH
75952: LD_INT 46
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: PUSH
75959: LD_INT 45
75961: PUSH
75962: LD_INT 47
75964: PUSH
75965: EMPTY
75966: LIST
75967: LIST
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: LIST
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: LIST
75978: ST_TO_ADDR
// result := [ ] ;
75979: LD_ADDR_VAR 0 3
75983: PUSH
75984: EMPTY
75985: ST_TO_ADDR
// for i in turrets do
75986: LD_ADDR_VAR 0 4
75990: PUSH
75991: LD_VAR 0 1
75995: PUSH
75996: FOR_IN
75997: IFFALSE 76180
// begin nat := GetNation ( i ) ;
75999: LD_ADDR_VAR 0 7
76003: PUSH
76004: LD_VAR 0 4
76008: PPUSH
76009: CALL_OW 248
76013: ST_TO_ADDR
// weapon := 0 ;
76014: LD_ADDR_VAR 0 8
76018: PUSH
76019: LD_INT 0
76021: ST_TO_ADDR
// if not nat then
76022: LD_VAR 0 7
76026: NOT
76027: IFFALSE 76031
// continue ;
76029: GO 75996
// for j in list [ nat ] do
76031: LD_ADDR_VAR 0 5
76035: PUSH
76036: LD_VAR 0 10
76040: PUSH
76041: LD_VAR 0 7
76045: ARRAY
76046: PUSH
76047: FOR_IN
76048: IFFALSE 76089
// if GetBWeapon ( i ) = j [ 1 ] then
76050: LD_VAR 0 4
76054: PPUSH
76055: CALL_OW 269
76059: PUSH
76060: LD_VAR 0 5
76064: PUSH
76065: LD_INT 1
76067: ARRAY
76068: EQUAL
76069: IFFALSE 76087
// begin weapon := j [ 2 ] ;
76071: LD_ADDR_VAR 0 8
76075: PUSH
76076: LD_VAR 0 5
76080: PUSH
76081: LD_INT 2
76083: ARRAY
76084: ST_TO_ADDR
// break ;
76085: GO 76089
// end ;
76087: GO 76047
76089: POP
76090: POP
// if not weapon then
76091: LD_VAR 0 8
76095: NOT
76096: IFFALSE 76100
// continue ;
76098: GO 75996
// for k in factories do
76100: LD_ADDR_VAR 0 6
76104: PUSH
76105: LD_VAR 0 2
76109: PUSH
76110: FOR_IN
76111: IFFALSE 76176
// begin weapons := AvailableWeaponList ( k ) ;
76113: LD_ADDR_VAR 0 9
76117: PUSH
76118: LD_VAR 0 6
76122: PPUSH
76123: CALL_OW 478
76127: ST_TO_ADDR
// if not weapons then
76128: LD_VAR 0 9
76132: NOT
76133: IFFALSE 76137
// continue ;
76135: GO 76110
// if weapon in weapons then
76137: LD_VAR 0 8
76141: PUSH
76142: LD_VAR 0 9
76146: IN
76147: IFFALSE 76174
// begin result := [ i , weapon ] ;
76149: LD_ADDR_VAR 0 3
76153: PUSH
76154: LD_VAR 0 4
76158: PUSH
76159: LD_VAR 0 8
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: ST_TO_ADDR
// exit ;
76168: POP
76169: POP
76170: POP
76171: POP
76172: GO 76182
// end ; end ;
76174: GO 76110
76176: POP
76177: POP
// end ;
76178: GO 75996
76180: POP
76181: POP
// end ;
76182: LD_VAR 0 3
76186: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76187: LD_INT 0
76189: PPUSH
// if not side or side > 8 then
76190: LD_VAR 0 3
76194: NOT
76195: PUSH
76196: LD_VAR 0 3
76200: PUSH
76201: LD_INT 8
76203: GREATER
76204: OR
76205: IFFALSE 76209
// exit ;
76207: GO 76268
// if not range then
76209: LD_VAR 0 4
76213: NOT
76214: IFFALSE 76225
// range := - 12 ;
76216: LD_ADDR_VAR 0 4
76220: PUSH
76221: LD_INT 12
76223: NEG
76224: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76225: LD_VAR 0 1
76229: PPUSH
76230: LD_VAR 0 2
76234: PPUSH
76235: LD_VAR 0 3
76239: PPUSH
76240: LD_VAR 0 4
76244: PPUSH
76245: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76249: LD_VAR 0 1
76253: PPUSH
76254: LD_VAR 0 2
76258: PPUSH
76259: LD_VAR 0 3
76263: PPUSH
76264: CALL_OW 331
// end ;
76268: LD_VAR 0 5
76272: RET
// export function Video ( mode ) ; begin
76273: LD_INT 0
76275: PPUSH
// ingame_video = mode ;
76276: LD_ADDR_OWVAR 52
76280: PUSH
76281: LD_VAR 0 1
76285: ST_TO_ADDR
// interface_hidden = mode ;
76286: LD_ADDR_OWVAR 54
76290: PUSH
76291: LD_VAR 0 1
76295: ST_TO_ADDR
// end ;
76296: LD_VAR 0 2
76300: RET
// export function Join ( array , element ) ; begin
76301: LD_INT 0
76303: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76304: LD_ADDR_VAR 0 3
76308: PUSH
76309: LD_VAR 0 1
76313: PPUSH
76314: LD_VAR 0 1
76318: PUSH
76319: LD_INT 1
76321: PLUS
76322: PPUSH
76323: LD_VAR 0 2
76327: PPUSH
76328: CALL_OW 1
76332: ST_TO_ADDR
// end ;
76333: LD_VAR 0 3
76337: RET
// export function JoinUnion ( array , element ) ; begin
76338: LD_INT 0
76340: PPUSH
// result := array union element ;
76341: LD_ADDR_VAR 0 3
76345: PUSH
76346: LD_VAR 0 1
76350: PUSH
76351: LD_VAR 0 2
76355: UNION
76356: ST_TO_ADDR
// end ;
76357: LD_VAR 0 3
76361: RET
// export function GetBehemoths ( side ) ; begin
76362: LD_INT 0
76364: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76365: LD_ADDR_VAR 0 2
76369: PUSH
76370: LD_INT 22
76372: PUSH
76373: LD_VAR 0 1
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: PUSH
76382: LD_INT 31
76384: PUSH
76385: LD_INT 25
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PUSH
76392: EMPTY
76393: LIST
76394: LIST
76395: PPUSH
76396: CALL_OW 69
76400: ST_TO_ADDR
// end ;
76401: LD_VAR 0 2
76405: RET
// export function Shuffle ( array ) ; var i , index ; begin
76406: LD_INT 0
76408: PPUSH
76409: PPUSH
76410: PPUSH
// result := [ ] ;
76411: LD_ADDR_VAR 0 2
76415: PUSH
76416: EMPTY
76417: ST_TO_ADDR
// if not array then
76418: LD_VAR 0 1
76422: NOT
76423: IFFALSE 76427
// exit ;
76425: GO 76526
// Randomize ;
76427: CALL_OW 10
// for i = array downto 1 do
76431: LD_ADDR_VAR 0 3
76435: PUSH
76436: DOUBLE
76437: LD_VAR 0 1
76441: INC
76442: ST_TO_ADDR
76443: LD_INT 1
76445: PUSH
76446: FOR_DOWNTO
76447: IFFALSE 76524
// begin index := rand ( 1 , array ) ;
76449: LD_ADDR_VAR 0 4
76453: PUSH
76454: LD_INT 1
76456: PPUSH
76457: LD_VAR 0 1
76461: PPUSH
76462: CALL_OW 12
76466: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76467: LD_ADDR_VAR 0 2
76471: PUSH
76472: LD_VAR 0 2
76476: PPUSH
76477: LD_VAR 0 2
76481: PUSH
76482: LD_INT 1
76484: PLUS
76485: PPUSH
76486: LD_VAR 0 1
76490: PUSH
76491: LD_VAR 0 4
76495: ARRAY
76496: PPUSH
76497: CALL_OW 2
76501: ST_TO_ADDR
// array := Delete ( array , index ) ;
76502: LD_ADDR_VAR 0 1
76506: PUSH
76507: LD_VAR 0 1
76511: PPUSH
76512: LD_VAR 0 4
76516: PPUSH
76517: CALL_OW 3
76521: ST_TO_ADDR
// end ;
76522: GO 76446
76524: POP
76525: POP
// end ;
76526: LD_VAR 0 2
76530: RET
// export function GetBaseMaterials ( base ) ; begin
76531: LD_INT 0
76533: PPUSH
// result := [ 0 , 0 , 0 ] ;
76534: LD_ADDR_VAR 0 2
76538: PUSH
76539: LD_INT 0
76541: PUSH
76542: LD_INT 0
76544: PUSH
76545: LD_INT 0
76547: PUSH
76548: EMPTY
76549: LIST
76550: LIST
76551: LIST
76552: ST_TO_ADDR
// if not base then
76553: LD_VAR 0 1
76557: NOT
76558: IFFALSE 76562
// exit ;
76560: GO 76611
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76562: LD_ADDR_VAR 0 2
76566: PUSH
76567: LD_VAR 0 1
76571: PPUSH
76572: LD_INT 1
76574: PPUSH
76575: CALL_OW 275
76579: PUSH
76580: LD_VAR 0 1
76584: PPUSH
76585: LD_INT 2
76587: PPUSH
76588: CALL_OW 275
76592: PUSH
76593: LD_VAR 0 1
76597: PPUSH
76598: LD_INT 3
76600: PPUSH
76601: CALL_OW 275
76605: PUSH
76606: EMPTY
76607: LIST
76608: LIST
76609: LIST
76610: ST_TO_ADDR
// end ;
76611: LD_VAR 0 2
76615: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76616: LD_INT 0
76618: PPUSH
76619: PPUSH
// result := array ;
76620: LD_ADDR_VAR 0 3
76624: PUSH
76625: LD_VAR 0 1
76629: ST_TO_ADDR
// if size >= result then
76630: LD_VAR 0 2
76634: PUSH
76635: LD_VAR 0 3
76639: GREATEREQUAL
76640: IFFALSE 76644
// exit ;
76642: GO 76694
// if size then
76644: LD_VAR 0 2
76648: IFFALSE 76694
// for i := array downto size do
76650: LD_ADDR_VAR 0 4
76654: PUSH
76655: DOUBLE
76656: LD_VAR 0 1
76660: INC
76661: ST_TO_ADDR
76662: LD_VAR 0 2
76666: PUSH
76667: FOR_DOWNTO
76668: IFFALSE 76692
// result := Delete ( result , result ) ;
76670: LD_ADDR_VAR 0 3
76674: PUSH
76675: LD_VAR 0 3
76679: PPUSH
76680: LD_VAR 0 3
76684: PPUSH
76685: CALL_OW 3
76689: ST_TO_ADDR
76690: GO 76667
76692: POP
76693: POP
// end ;
76694: LD_VAR 0 3
76698: RET
// export function ComExit ( unit ) ; var tmp ; begin
76699: LD_INT 0
76701: PPUSH
76702: PPUSH
// if not IsInUnit ( unit ) then
76703: LD_VAR 0 1
76707: PPUSH
76708: CALL_OW 310
76712: NOT
76713: IFFALSE 76717
// exit ;
76715: GO 76777
// tmp := IsInUnit ( unit ) ;
76717: LD_ADDR_VAR 0 3
76721: PUSH
76722: LD_VAR 0 1
76726: PPUSH
76727: CALL_OW 310
76731: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76732: LD_VAR 0 3
76736: PPUSH
76737: CALL_OW 247
76741: PUSH
76742: LD_INT 2
76744: EQUAL
76745: IFFALSE 76758
// ComExitVehicle ( unit ) else
76747: LD_VAR 0 1
76751: PPUSH
76752: CALL_OW 121
76756: GO 76767
// ComExitBuilding ( unit ) ;
76758: LD_VAR 0 1
76762: PPUSH
76763: CALL_OW 122
// result := tmp ;
76767: LD_ADDR_VAR 0 2
76771: PUSH
76772: LD_VAR 0 3
76776: ST_TO_ADDR
// end ;
76777: LD_VAR 0 2
76781: RET
// export function ComExitAll ( units ) ; var i ; begin
76782: LD_INT 0
76784: PPUSH
76785: PPUSH
// if not units then
76786: LD_VAR 0 1
76790: NOT
76791: IFFALSE 76795
// exit ;
76793: GO 76821
// for i in units do
76795: LD_ADDR_VAR 0 3
76799: PUSH
76800: LD_VAR 0 1
76804: PUSH
76805: FOR_IN
76806: IFFALSE 76819
// ComExit ( i ) ;
76808: LD_VAR 0 3
76812: PPUSH
76813: CALL 76699 0 1
76817: GO 76805
76819: POP
76820: POP
// end ;
76821: LD_VAR 0 2
76825: RET
// export function ResetHc ; begin
76826: LD_INT 0
76828: PPUSH
// InitHc ;
76829: CALL_OW 19
// hc_importance := 0 ;
76833: LD_ADDR_OWVAR 32
76837: PUSH
76838: LD_INT 0
76840: ST_TO_ADDR
// end ;
76841: LD_VAR 0 1
76845: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76846: LD_INT 0
76848: PPUSH
76849: PPUSH
76850: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76851: LD_ADDR_VAR 0 6
76855: PUSH
76856: LD_VAR 0 1
76860: PUSH
76861: LD_VAR 0 3
76865: PLUS
76866: PUSH
76867: LD_INT 2
76869: DIV
76870: ST_TO_ADDR
// if _x < 0 then
76871: LD_VAR 0 6
76875: PUSH
76876: LD_INT 0
76878: LESS
76879: IFFALSE 76896
// _x := _x * - 1 ;
76881: LD_ADDR_VAR 0 6
76885: PUSH
76886: LD_VAR 0 6
76890: PUSH
76891: LD_INT 1
76893: NEG
76894: MUL
76895: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76896: LD_ADDR_VAR 0 7
76900: PUSH
76901: LD_VAR 0 2
76905: PUSH
76906: LD_VAR 0 4
76910: PLUS
76911: PUSH
76912: LD_INT 2
76914: DIV
76915: ST_TO_ADDR
// if _y < 0 then
76916: LD_VAR 0 7
76920: PUSH
76921: LD_INT 0
76923: LESS
76924: IFFALSE 76941
// _y := _y * - 1 ;
76926: LD_ADDR_VAR 0 7
76930: PUSH
76931: LD_VAR 0 7
76935: PUSH
76936: LD_INT 1
76938: NEG
76939: MUL
76940: ST_TO_ADDR
// result := [ _x , _y ] ;
76941: LD_ADDR_VAR 0 5
76945: PUSH
76946: LD_VAR 0 6
76950: PUSH
76951: LD_VAR 0 7
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: ST_TO_ADDR
// end ;
76960: LD_VAR 0 5
76964: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76965: LD_INT 0
76967: PPUSH
76968: PPUSH
76969: PPUSH
76970: PPUSH
// task := GetTaskList ( unit ) ;
76971: LD_ADDR_VAR 0 7
76975: PUSH
76976: LD_VAR 0 1
76980: PPUSH
76981: CALL_OW 437
76985: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76986: LD_VAR 0 7
76990: NOT
76991: PUSH
76992: LD_VAR 0 1
76996: PPUSH
76997: LD_VAR 0 2
77001: PPUSH
77002: CALL_OW 308
77006: NOT
77007: AND
77008: IFFALSE 77012
// exit ;
77010: GO 77130
// if IsInArea ( unit , area ) then
77012: LD_VAR 0 1
77016: PPUSH
77017: LD_VAR 0 2
77021: PPUSH
77022: CALL_OW 308
77026: IFFALSE 77044
// begin ComMoveToArea ( unit , goAway ) ;
77028: LD_VAR 0 1
77032: PPUSH
77033: LD_VAR 0 3
77037: PPUSH
77038: CALL_OW 113
// exit ;
77042: GO 77130
// end ; if task [ 1 ] [ 1 ] <> M then
77044: LD_VAR 0 7
77048: PUSH
77049: LD_INT 1
77051: ARRAY
77052: PUSH
77053: LD_INT 1
77055: ARRAY
77056: PUSH
77057: LD_STRING M
77059: NONEQUAL
77060: IFFALSE 77064
// exit ;
77062: GO 77130
// x := task [ 1 ] [ 2 ] ;
77064: LD_ADDR_VAR 0 5
77068: PUSH
77069: LD_VAR 0 7
77073: PUSH
77074: LD_INT 1
77076: ARRAY
77077: PUSH
77078: LD_INT 2
77080: ARRAY
77081: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77082: LD_ADDR_VAR 0 6
77086: PUSH
77087: LD_VAR 0 7
77091: PUSH
77092: LD_INT 1
77094: ARRAY
77095: PUSH
77096: LD_INT 3
77098: ARRAY
77099: ST_TO_ADDR
// if InArea ( x , y , area ) then
77100: LD_VAR 0 5
77104: PPUSH
77105: LD_VAR 0 6
77109: PPUSH
77110: LD_VAR 0 2
77114: PPUSH
77115: CALL_OW 309
77119: IFFALSE 77130
// ComStop ( unit ) ;
77121: LD_VAR 0 1
77125: PPUSH
77126: CALL_OW 141
// end ;
77130: LD_VAR 0 4
77134: RET
// export function Abs ( value ) ; begin
77135: LD_INT 0
77137: PPUSH
// result := value ;
77138: LD_ADDR_VAR 0 2
77142: PUSH
77143: LD_VAR 0 1
77147: ST_TO_ADDR
// if value < 0 then
77148: LD_VAR 0 1
77152: PUSH
77153: LD_INT 0
77155: LESS
77156: IFFALSE 77173
// result := value * - 1 ;
77158: LD_ADDR_VAR 0 2
77162: PUSH
77163: LD_VAR 0 1
77167: PUSH
77168: LD_INT 1
77170: NEG
77171: MUL
77172: ST_TO_ADDR
// end ;
77173: LD_VAR 0 2
77177: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77178: LD_INT 0
77180: PPUSH
77181: PPUSH
77182: PPUSH
77183: PPUSH
77184: PPUSH
77185: PPUSH
77186: PPUSH
77187: PPUSH
// if not unit or not building then
77188: LD_VAR 0 1
77192: NOT
77193: PUSH
77194: LD_VAR 0 2
77198: NOT
77199: OR
77200: IFFALSE 77204
// exit ;
77202: GO 77430
// x := GetX ( building ) ;
77204: LD_ADDR_VAR 0 4
77208: PUSH
77209: LD_VAR 0 2
77213: PPUSH
77214: CALL_OW 250
77218: ST_TO_ADDR
// y := GetY ( building ) ;
77219: LD_ADDR_VAR 0 6
77223: PUSH
77224: LD_VAR 0 2
77228: PPUSH
77229: CALL_OW 251
77233: ST_TO_ADDR
// d := GetDir ( building ) ;
77234: LD_ADDR_VAR 0 8
77238: PUSH
77239: LD_VAR 0 2
77243: PPUSH
77244: CALL_OW 254
77248: ST_TO_ADDR
// r := 4 ;
77249: LD_ADDR_VAR 0 9
77253: PUSH
77254: LD_INT 4
77256: ST_TO_ADDR
// for i := 1 to 5 do
77257: LD_ADDR_VAR 0 10
77261: PUSH
77262: DOUBLE
77263: LD_INT 1
77265: DEC
77266: ST_TO_ADDR
77267: LD_INT 5
77269: PUSH
77270: FOR_TO
77271: IFFALSE 77428
// begin _x := ShiftX ( x , d , r + i ) ;
77273: LD_ADDR_VAR 0 5
77277: PUSH
77278: LD_VAR 0 4
77282: PPUSH
77283: LD_VAR 0 8
77287: PPUSH
77288: LD_VAR 0 9
77292: PUSH
77293: LD_VAR 0 10
77297: PLUS
77298: PPUSH
77299: CALL_OW 272
77303: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77304: LD_ADDR_VAR 0 7
77308: PUSH
77309: LD_VAR 0 6
77313: PPUSH
77314: LD_VAR 0 8
77318: PPUSH
77319: LD_VAR 0 9
77323: PUSH
77324: LD_VAR 0 10
77328: PLUS
77329: PPUSH
77330: CALL_OW 273
77334: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77335: LD_VAR 0 5
77339: PPUSH
77340: LD_VAR 0 7
77344: PPUSH
77345: CALL_OW 488
77349: PUSH
77350: LD_VAR 0 5
77354: PPUSH
77355: LD_VAR 0 7
77359: PPUSH
77360: CALL_OW 428
77364: PPUSH
77365: CALL_OW 247
77369: PUSH
77370: LD_INT 3
77372: PUSH
77373: LD_INT 2
77375: PUSH
77376: EMPTY
77377: LIST
77378: LIST
77379: IN
77380: NOT
77381: AND
77382: IFFALSE 77426
// begin ComMoveXY ( unit , _x , _y ) ;
77384: LD_VAR 0 1
77388: PPUSH
77389: LD_VAR 0 5
77393: PPUSH
77394: LD_VAR 0 7
77398: PPUSH
77399: CALL_OW 111
// result := [ _x , _y ] ;
77403: LD_ADDR_VAR 0 3
77407: PUSH
77408: LD_VAR 0 5
77412: PUSH
77413: LD_VAR 0 7
77417: PUSH
77418: EMPTY
77419: LIST
77420: LIST
77421: ST_TO_ADDR
// exit ;
77422: POP
77423: POP
77424: GO 77430
// end ; end ;
77426: GO 77270
77428: POP
77429: POP
// end ;
77430: LD_VAR 0 3
77434: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77435: LD_INT 0
77437: PPUSH
77438: PPUSH
77439: PPUSH
// result := 0 ;
77440: LD_ADDR_VAR 0 3
77444: PUSH
77445: LD_INT 0
77447: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77448: LD_VAR 0 1
77452: PUSH
77453: LD_INT 0
77455: LESS
77456: PUSH
77457: LD_VAR 0 1
77461: PUSH
77462: LD_INT 8
77464: GREATER
77465: OR
77466: PUSH
77467: LD_VAR 0 2
77471: PUSH
77472: LD_INT 0
77474: LESS
77475: OR
77476: PUSH
77477: LD_VAR 0 2
77481: PUSH
77482: LD_INT 8
77484: GREATER
77485: OR
77486: IFFALSE 77490
// exit ;
77488: GO 77565
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77490: LD_ADDR_VAR 0 4
77494: PUSH
77495: LD_INT 22
77497: PUSH
77498: LD_VAR 0 2
77502: PUSH
77503: EMPTY
77504: LIST
77505: LIST
77506: PPUSH
77507: CALL_OW 69
77511: PUSH
77512: FOR_IN
77513: IFFALSE 77563
// begin un := UnitShoot ( i ) ;
77515: LD_ADDR_VAR 0 5
77519: PUSH
77520: LD_VAR 0 4
77524: PPUSH
77525: CALL_OW 504
77529: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77530: LD_VAR 0 5
77534: PPUSH
77535: CALL_OW 255
77539: PUSH
77540: LD_VAR 0 1
77544: EQUAL
77545: IFFALSE 77561
// begin result := un ;
77547: LD_ADDR_VAR 0 3
77551: PUSH
77552: LD_VAR 0 5
77556: ST_TO_ADDR
// exit ;
77557: POP
77558: POP
77559: GO 77565
// end ; end ;
77561: GO 77512
77563: POP
77564: POP
// end ;
77565: LD_VAR 0 3
77569: RET
// export function GetCargoBay ( units ) ; begin
77570: LD_INT 0
77572: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77573: LD_ADDR_VAR 0 2
77577: PUSH
77578: LD_VAR 0 1
77582: PPUSH
77583: LD_INT 2
77585: PUSH
77586: LD_INT 34
77588: PUSH
77589: LD_INT 12
77591: PUSH
77592: EMPTY
77593: LIST
77594: LIST
77595: PUSH
77596: LD_INT 34
77598: PUSH
77599: LD_INT 51
77601: PUSH
77602: EMPTY
77603: LIST
77604: LIST
77605: PUSH
77606: LD_INT 34
77608: PUSH
77609: LD_INT 32
77611: PUSH
77612: EMPTY
77613: LIST
77614: LIST
77615: PUSH
77616: LD_INT 34
77618: PUSH
77619: LD_INT 89
77621: PUSH
77622: EMPTY
77623: LIST
77624: LIST
77625: PUSH
77626: EMPTY
77627: LIST
77628: LIST
77629: LIST
77630: LIST
77631: LIST
77632: PPUSH
77633: CALL_OW 72
77637: ST_TO_ADDR
// end ;
77638: LD_VAR 0 2
77642: RET
// export function Negate ( value ) ; begin
77643: LD_INT 0
77645: PPUSH
// result := not value ;
77646: LD_ADDR_VAR 0 2
77650: PUSH
77651: LD_VAR 0 1
77655: NOT
77656: ST_TO_ADDR
// end ;
77657: LD_VAR 0 2
77661: RET
// export function Inc ( value ) ; begin
77662: LD_INT 0
77664: PPUSH
// result := value + 1 ;
77665: LD_ADDR_VAR 0 2
77669: PUSH
77670: LD_VAR 0 1
77674: PUSH
77675: LD_INT 1
77677: PLUS
77678: ST_TO_ADDR
// end ;
77679: LD_VAR 0 2
77683: RET
// export function Dec ( value ) ; begin
77684: LD_INT 0
77686: PPUSH
// result := value - 1 ;
77687: LD_ADDR_VAR 0 2
77691: PUSH
77692: LD_VAR 0 1
77696: PUSH
77697: LD_INT 1
77699: MINUS
77700: ST_TO_ADDR
// end ;
77701: LD_VAR 0 2
77705: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77706: LD_INT 0
77708: PPUSH
77709: PPUSH
77710: PPUSH
77711: PPUSH
77712: PPUSH
77713: PPUSH
77714: PPUSH
77715: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77716: LD_VAR 0 1
77720: PPUSH
77721: LD_VAR 0 2
77725: PPUSH
77726: CALL_OW 488
77730: NOT
77731: PUSH
77732: LD_VAR 0 3
77736: PPUSH
77737: LD_VAR 0 4
77741: PPUSH
77742: CALL_OW 488
77746: NOT
77747: OR
77748: IFFALSE 77761
// begin result := - 1 ;
77750: LD_ADDR_VAR 0 5
77754: PUSH
77755: LD_INT 1
77757: NEG
77758: ST_TO_ADDR
// exit ;
77759: GO 77996
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77761: LD_ADDR_VAR 0 12
77765: PUSH
77766: LD_VAR 0 1
77770: PPUSH
77771: LD_VAR 0 2
77775: PPUSH
77776: LD_VAR 0 3
77780: PPUSH
77781: LD_VAR 0 4
77785: PPUSH
77786: CALL 76846 0 4
77790: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77791: LD_ADDR_VAR 0 11
77795: PUSH
77796: LD_VAR 0 1
77800: PPUSH
77801: LD_VAR 0 2
77805: PPUSH
77806: LD_VAR 0 12
77810: PUSH
77811: LD_INT 1
77813: ARRAY
77814: PPUSH
77815: LD_VAR 0 12
77819: PUSH
77820: LD_INT 2
77822: ARRAY
77823: PPUSH
77824: CALL_OW 298
77828: ST_TO_ADDR
// distance := 9999 ;
77829: LD_ADDR_VAR 0 10
77833: PUSH
77834: LD_INT 9999
77836: ST_TO_ADDR
// for i := 0 to 5 do
77837: LD_ADDR_VAR 0 6
77841: PUSH
77842: DOUBLE
77843: LD_INT 0
77845: DEC
77846: ST_TO_ADDR
77847: LD_INT 5
77849: PUSH
77850: FOR_TO
77851: IFFALSE 77994
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77853: LD_ADDR_VAR 0 7
77857: PUSH
77858: LD_VAR 0 1
77862: PPUSH
77863: LD_VAR 0 6
77867: PPUSH
77868: LD_VAR 0 11
77872: PPUSH
77873: CALL_OW 272
77877: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77878: LD_ADDR_VAR 0 8
77882: PUSH
77883: LD_VAR 0 2
77887: PPUSH
77888: LD_VAR 0 6
77892: PPUSH
77893: LD_VAR 0 11
77897: PPUSH
77898: CALL_OW 273
77902: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77903: LD_VAR 0 7
77907: PPUSH
77908: LD_VAR 0 8
77912: PPUSH
77913: CALL_OW 488
77917: NOT
77918: IFFALSE 77922
// continue ;
77920: GO 77850
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77922: LD_ADDR_VAR 0 9
77926: PUSH
77927: LD_VAR 0 12
77931: PUSH
77932: LD_INT 1
77934: ARRAY
77935: PPUSH
77936: LD_VAR 0 12
77940: PUSH
77941: LD_INT 2
77943: ARRAY
77944: PPUSH
77945: LD_VAR 0 7
77949: PPUSH
77950: LD_VAR 0 8
77954: PPUSH
77955: CALL_OW 298
77959: ST_TO_ADDR
// if tmp < distance then
77960: LD_VAR 0 9
77964: PUSH
77965: LD_VAR 0 10
77969: LESS
77970: IFFALSE 77992
// begin result := i ;
77972: LD_ADDR_VAR 0 5
77976: PUSH
77977: LD_VAR 0 6
77981: ST_TO_ADDR
// distance := tmp ;
77982: LD_ADDR_VAR 0 10
77986: PUSH
77987: LD_VAR 0 9
77991: ST_TO_ADDR
// end ; end ;
77992: GO 77850
77994: POP
77995: POP
// end ;
77996: LD_VAR 0 5
78000: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78001: LD_INT 0
78003: PPUSH
78004: PPUSH
// if not driver or not IsInUnit ( driver ) then
78005: LD_VAR 0 1
78009: NOT
78010: PUSH
78011: LD_VAR 0 1
78015: PPUSH
78016: CALL_OW 310
78020: NOT
78021: OR
78022: IFFALSE 78026
// exit ;
78024: GO 78116
// vehicle := IsInUnit ( driver ) ;
78026: LD_ADDR_VAR 0 3
78030: PUSH
78031: LD_VAR 0 1
78035: PPUSH
78036: CALL_OW 310
78040: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78041: LD_VAR 0 1
78045: PPUSH
78046: LD_STRING \
78048: PUSH
78049: LD_INT 0
78051: PUSH
78052: LD_INT 0
78054: PUSH
78055: LD_INT 0
78057: PUSH
78058: LD_INT 0
78060: PUSH
78061: LD_INT 0
78063: PUSH
78064: LD_INT 0
78066: PUSH
78067: EMPTY
78068: LIST
78069: LIST
78070: LIST
78071: LIST
78072: LIST
78073: LIST
78074: LIST
78075: PUSH
78076: LD_STRING E
78078: PUSH
78079: LD_INT 0
78081: PUSH
78082: LD_INT 0
78084: PUSH
78085: LD_VAR 0 3
78089: PUSH
78090: LD_INT 0
78092: PUSH
78093: LD_INT 0
78095: PUSH
78096: LD_INT 0
78098: PUSH
78099: EMPTY
78100: LIST
78101: LIST
78102: LIST
78103: LIST
78104: LIST
78105: LIST
78106: LIST
78107: PUSH
78108: EMPTY
78109: LIST
78110: LIST
78111: PPUSH
78112: CALL_OW 446
// end ;
78116: LD_VAR 0 2
78120: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78121: LD_INT 0
78123: PPUSH
78124: PPUSH
// if not driver or not IsInUnit ( driver ) then
78125: LD_VAR 0 1
78129: NOT
78130: PUSH
78131: LD_VAR 0 1
78135: PPUSH
78136: CALL_OW 310
78140: NOT
78141: OR
78142: IFFALSE 78146
// exit ;
78144: GO 78236
// vehicle := IsInUnit ( driver ) ;
78146: LD_ADDR_VAR 0 3
78150: PUSH
78151: LD_VAR 0 1
78155: PPUSH
78156: CALL_OW 310
78160: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78161: LD_VAR 0 1
78165: PPUSH
78166: LD_STRING \
78168: PUSH
78169: LD_INT 0
78171: PUSH
78172: LD_INT 0
78174: PUSH
78175: LD_INT 0
78177: PUSH
78178: LD_INT 0
78180: PUSH
78181: LD_INT 0
78183: PUSH
78184: LD_INT 0
78186: PUSH
78187: EMPTY
78188: LIST
78189: LIST
78190: LIST
78191: LIST
78192: LIST
78193: LIST
78194: LIST
78195: PUSH
78196: LD_STRING E
78198: PUSH
78199: LD_INT 0
78201: PUSH
78202: LD_INT 0
78204: PUSH
78205: LD_VAR 0 3
78209: PUSH
78210: LD_INT 0
78212: PUSH
78213: LD_INT 0
78215: PUSH
78216: LD_INT 0
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: LIST
78223: LIST
78224: LIST
78225: LIST
78226: LIST
78227: PUSH
78228: EMPTY
78229: LIST
78230: LIST
78231: PPUSH
78232: CALL_OW 447
// end ;
78236: LD_VAR 0 2
78240: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78241: LD_INT 0
78243: PPUSH
78244: PPUSH
78245: PPUSH
// tmp := [ ] ;
78246: LD_ADDR_VAR 0 5
78250: PUSH
78251: EMPTY
78252: ST_TO_ADDR
// for i in units do
78253: LD_ADDR_VAR 0 4
78257: PUSH
78258: LD_VAR 0 1
78262: PUSH
78263: FOR_IN
78264: IFFALSE 78302
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78266: LD_ADDR_VAR 0 5
78270: PUSH
78271: LD_VAR 0 5
78275: PPUSH
78276: LD_VAR 0 5
78280: PUSH
78281: LD_INT 1
78283: PLUS
78284: PPUSH
78285: LD_VAR 0 4
78289: PPUSH
78290: CALL_OW 256
78294: PPUSH
78295: CALL_OW 2
78299: ST_TO_ADDR
78300: GO 78263
78302: POP
78303: POP
// if not tmp then
78304: LD_VAR 0 5
78308: NOT
78309: IFFALSE 78313
// exit ;
78311: GO 78361
// if asc then
78313: LD_VAR 0 2
78317: IFFALSE 78341
// result := SortListByListAsc ( units , tmp ) else
78319: LD_ADDR_VAR 0 3
78323: PUSH
78324: LD_VAR 0 1
78328: PPUSH
78329: LD_VAR 0 5
78333: PPUSH
78334: CALL_OW 76
78338: ST_TO_ADDR
78339: GO 78361
// result := SortListByListDesc ( units , tmp ) ;
78341: LD_ADDR_VAR 0 3
78345: PUSH
78346: LD_VAR 0 1
78350: PPUSH
78351: LD_VAR 0 5
78355: PPUSH
78356: CALL_OW 77
78360: ST_TO_ADDR
// end ;
78361: LD_VAR 0 3
78365: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78366: LD_INT 0
78368: PPUSH
78369: PPUSH
// task := GetTaskList ( mech ) ;
78370: LD_ADDR_VAR 0 4
78374: PUSH
78375: LD_VAR 0 1
78379: PPUSH
78380: CALL_OW 437
78384: ST_TO_ADDR
// if not task then
78385: LD_VAR 0 4
78389: NOT
78390: IFFALSE 78394
// exit ;
78392: GO 78436
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78394: LD_ADDR_VAR 0 3
78398: PUSH
78399: LD_VAR 0 4
78403: PUSH
78404: LD_INT 1
78406: ARRAY
78407: PUSH
78408: LD_INT 1
78410: ARRAY
78411: PUSH
78412: LD_STRING r
78414: EQUAL
78415: PUSH
78416: LD_VAR 0 4
78420: PUSH
78421: LD_INT 1
78423: ARRAY
78424: PUSH
78425: LD_INT 4
78427: ARRAY
78428: PUSH
78429: LD_VAR 0 2
78433: EQUAL
78434: AND
78435: ST_TO_ADDR
// end ;
78436: LD_VAR 0 3
78440: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78441: LD_INT 0
78443: PPUSH
// SetDir ( unit , d ) ;
78444: LD_VAR 0 1
78448: PPUSH
78449: LD_VAR 0 4
78453: PPUSH
78454: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78458: LD_VAR 0 1
78462: PPUSH
78463: LD_VAR 0 2
78467: PPUSH
78468: LD_VAR 0 3
78472: PPUSH
78473: LD_VAR 0 5
78477: PPUSH
78478: CALL_OW 48
// end ;
78482: LD_VAR 0 6
78486: RET
// export function ToNaturalNumber ( number ) ; begin
78487: LD_INT 0
78489: PPUSH
// result := number div 1 ;
78490: LD_ADDR_VAR 0 2
78494: PUSH
78495: LD_VAR 0 1
78499: PUSH
78500: LD_INT 1
78502: DIV
78503: ST_TO_ADDR
// if number < 0 then
78504: LD_VAR 0 1
78508: PUSH
78509: LD_INT 0
78511: LESS
78512: IFFALSE 78522
// result := 0 ;
78514: LD_ADDR_VAR 0 2
78518: PUSH
78519: LD_INT 0
78521: ST_TO_ADDR
// end ;
78522: LD_VAR 0 2
78526: RET
// export function SortByClass ( units , class ) ; var un ; begin
78527: LD_INT 0
78529: PPUSH
78530: PPUSH
// if not units or not class then
78531: LD_VAR 0 1
78535: NOT
78536: PUSH
78537: LD_VAR 0 2
78541: NOT
78542: OR
78543: IFFALSE 78547
// exit ;
78545: GO 78642
// result := [ ] ;
78547: LD_ADDR_VAR 0 3
78551: PUSH
78552: EMPTY
78553: ST_TO_ADDR
// for un in units do
78554: LD_ADDR_VAR 0 4
78558: PUSH
78559: LD_VAR 0 1
78563: PUSH
78564: FOR_IN
78565: IFFALSE 78640
// if GetClass ( un ) = class then
78567: LD_VAR 0 4
78571: PPUSH
78572: CALL_OW 257
78576: PUSH
78577: LD_VAR 0 2
78581: EQUAL
78582: IFFALSE 78609
// result := Insert ( result , 1 , un ) else
78584: LD_ADDR_VAR 0 3
78588: PUSH
78589: LD_VAR 0 3
78593: PPUSH
78594: LD_INT 1
78596: PPUSH
78597: LD_VAR 0 4
78601: PPUSH
78602: CALL_OW 2
78606: ST_TO_ADDR
78607: GO 78638
// result := Replace ( result , result + 1 , un ) ;
78609: LD_ADDR_VAR 0 3
78613: PUSH
78614: LD_VAR 0 3
78618: PPUSH
78619: LD_VAR 0 3
78623: PUSH
78624: LD_INT 1
78626: PLUS
78627: PPUSH
78628: LD_VAR 0 4
78632: PPUSH
78633: CALL_OW 1
78637: ST_TO_ADDR
78638: GO 78564
78640: POP
78641: POP
// end ;
78642: LD_VAR 0 3
78646: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78647: LD_INT 0
78649: PPUSH
78650: PPUSH
78651: PPUSH
78652: PPUSH
78653: PPUSH
78654: PPUSH
78655: PPUSH
// result := [ ] ;
78656: LD_ADDR_VAR 0 4
78660: PUSH
78661: EMPTY
78662: ST_TO_ADDR
// if x - r < 0 then
78663: LD_VAR 0 1
78667: PUSH
78668: LD_VAR 0 3
78672: MINUS
78673: PUSH
78674: LD_INT 0
78676: LESS
78677: IFFALSE 78689
// min_x := 0 else
78679: LD_ADDR_VAR 0 8
78683: PUSH
78684: LD_INT 0
78686: ST_TO_ADDR
78687: GO 78705
// min_x := x - r ;
78689: LD_ADDR_VAR 0 8
78693: PUSH
78694: LD_VAR 0 1
78698: PUSH
78699: LD_VAR 0 3
78703: MINUS
78704: ST_TO_ADDR
// if y - r < 0 then
78705: LD_VAR 0 2
78709: PUSH
78710: LD_VAR 0 3
78714: MINUS
78715: PUSH
78716: LD_INT 0
78718: LESS
78719: IFFALSE 78731
// min_y := 0 else
78721: LD_ADDR_VAR 0 7
78725: PUSH
78726: LD_INT 0
78728: ST_TO_ADDR
78729: GO 78747
// min_y := y - r ;
78731: LD_ADDR_VAR 0 7
78735: PUSH
78736: LD_VAR 0 2
78740: PUSH
78741: LD_VAR 0 3
78745: MINUS
78746: ST_TO_ADDR
// max_x := x + r ;
78747: LD_ADDR_VAR 0 9
78751: PUSH
78752: LD_VAR 0 1
78756: PUSH
78757: LD_VAR 0 3
78761: PLUS
78762: ST_TO_ADDR
// max_y := y + r ;
78763: LD_ADDR_VAR 0 10
78767: PUSH
78768: LD_VAR 0 2
78772: PUSH
78773: LD_VAR 0 3
78777: PLUS
78778: ST_TO_ADDR
// for _x = min_x to max_x do
78779: LD_ADDR_VAR 0 5
78783: PUSH
78784: DOUBLE
78785: LD_VAR 0 8
78789: DEC
78790: ST_TO_ADDR
78791: LD_VAR 0 9
78795: PUSH
78796: FOR_TO
78797: IFFALSE 78898
// for _y = min_y to max_y do
78799: LD_ADDR_VAR 0 6
78803: PUSH
78804: DOUBLE
78805: LD_VAR 0 7
78809: DEC
78810: ST_TO_ADDR
78811: LD_VAR 0 10
78815: PUSH
78816: FOR_TO
78817: IFFALSE 78894
// begin if not ValidHex ( _x , _y ) then
78819: LD_VAR 0 5
78823: PPUSH
78824: LD_VAR 0 6
78828: PPUSH
78829: CALL_OW 488
78833: NOT
78834: IFFALSE 78838
// continue ;
78836: GO 78816
// if GetResourceTypeXY ( _x , _y ) then
78838: LD_VAR 0 5
78842: PPUSH
78843: LD_VAR 0 6
78847: PPUSH
78848: CALL_OW 283
78852: IFFALSE 78892
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78854: LD_ADDR_VAR 0 4
78858: PUSH
78859: LD_VAR 0 4
78863: PPUSH
78864: LD_VAR 0 4
78868: PUSH
78869: LD_INT 1
78871: PLUS
78872: PPUSH
78873: LD_VAR 0 5
78877: PUSH
78878: LD_VAR 0 6
78882: PUSH
78883: EMPTY
78884: LIST
78885: LIST
78886: PPUSH
78887: CALL_OW 1
78891: ST_TO_ADDR
// end ;
78892: GO 78816
78894: POP
78895: POP
78896: GO 78796
78898: POP
78899: POP
// end ;
78900: LD_VAR 0 4
78904: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78905: LD_INT 0
78907: PPUSH
78908: PPUSH
78909: PPUSH
78910: PPUSH
78911: PPUSH
78912: PPUSH
78913: PPUSH
78914: PPUSH
// if not units then
78915: LD_VAR 0 1
78919: NOT
78920: IFFALSE 78924
// exit ;
78922: GO 79448
// result := UnitFilter ( units , [ f_ok ] ) ;
78924: LD_ADDR_VAR 0 3
78928: PUSH
78929: LD_VAR 0 1
78933: PPUSH
78934: LD_INT 50
78936: PUSH
78937: EMPTY
78938: LIST
78939: PPUSH
78940: CALL_OW 72
78944: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78945: LD_ADDR_VAR 0 8
78949: PUSH
78950: LD_VAR 0 1
78954: PUSH
78955: LD_INT 1
78957: ARRAY
78958: PPUSH
78959: CALL_OW 255
78963: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78964: LD_ADDR_VAR 0 10
78968: PUSH
78969: LD_INT 29
78971: PUSH
78972: LD_INT 91
78974: PUSH
78975: LD_INT 49
78977: PUSH
78978: EMPTY
78979: LIST
78980: LIST
78981: LIST
78982: ST_TO_ADDR
// if not result then
78983: LD_VAR 0 3
78987: NOT
78988: IFFALSE 78992
// exit ;
78990: GO 79448
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78992: LD_ADDR_VAR 0 5
78996: PUSH
78997: LD_INT 81
78999: PUSH
79000: LD_VAR 0 8
79004: PUSH
79005: EMPTY
79006: LIST
79007: LIST
79008: PPUSH
79009: CALL_OW 69
79013: ST_TO_ADDR
// for i in result do
79014: LD_ADDR_VAR 0 4
79018: PUSH
79019: LD_VAR 0 3
79023: PUSH
79024: FOR_IN
79025: IFFALSE 79446
// begin tag := GetTag ( i ) + 1 ;
79027: LD_ADDR_VAR 0 9
79031: PUSH
79032: LD_VAR 0 4
79036: PPUSH
79037: CALL_OW 110
79041: PUSH
79042: LD_INT 1
79044: PLUS
79045: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79046: LD_ADDR_VAR 0 7
79050: PUSH
79051: LD_VAR 0 4
79055: PPUSH
79056: CALL_OW 250
79060: PPUSH
79061: LD_VAR 0 4
79065: PPUSH
79066: CALL_OW 251
79070: PPUSH
79071: LD_INT 6
79073: PPUSH
79074: CALL 78647 0 3
79078: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79079: LD_VAR 0 4
79083: PPUSH
79084: CALL_OW 247
79088: PUSH
79089: LD_INT 2
79091: EQUAL
79092: PUSH
79093: LD_VAR 0 7
79097: AND
79098: PUSH
79099: LD_VAR 0 4
79103: PPUSH
79104: CALL_OW 264
79108: PUSH
79109: LD_VAR 0 10
79113: IN
79114: NOT
79115: AND
79116: IFFALSE 79155
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79118: LD_VAR 0 4
79122: PPUSH
79123: LD_VAR 0 7
79127: PUSH
79128: LD_INT 1
79130: ARRAY
79131: PUSH
79132: LD_INT 1
79134: ARRAY
79135: PPUSH
79136: LD_VAR 0 7
79140: PUSH
79141: LD_INT 1
79143: ARRAY
79144: PUSH
79145: LD_INT 2
79147: ARRAY
79148: PPUSH
79149: CALL_OW 116
79153: GO 79444
// if path > tag then
79155: LD_VAR 0 2
79159: PUSH
79160: LD_VAR 0 9
79164: GREATER
79165: IFFALSE 79373
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79167: LD_ADDR_VAR 0 6
79171: PUSH
79172: LD_VAR 0 5
79176: PPUSH
79177: LD_INT 91
79179: PUSH
79180: LD_VAR 0 4
79184: PUSH
79185: LD_INT 8
79187: PUSH
79188: EMPTY
79189: LIST
79190: LIST
79191: LIST
79192: PPUSH
79193: CALL_OW 72
79197: ST_TO_ADDR
// if nearEnemy then
79198: LD_VAR 0 6
79202: IFFALSE 79271
// begin if GetWeapon ( i ) = ru_time_lapser then
79204: LD_VAR 0 4
79208: PPUSH
79209: CALL_OW 264
79213: PUSH
79214: LD_INT 49
79216: EQUAL
79217: IFFALSE 79245
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79219: LD_VAR 0 4
79223: PPUSH
79224: LD_VAR 0 6
79228: PPUSH
79229: LD_VAR 0 4
79233: PPUSH
79234: CALL_OW 74
79238: PPUSH
79239: CALL_OW 112
79243: GO 79269
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79245: LD_VAR 0 4
79249: PPUSH
79250: LD_VAR 0 6
79254: PPUSH
79255: LD_VAR 0 4
79259: PPUSH
79260: CALL_OW 74
79264: PPUSH
79265: CALL_OW 115
// end else
79269: GO 79371
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79271: LD_VAR 0 4
79275: PPUSH
79276: LD_VAR 0 2
79280: PUSH
79281: LD_VAR 0 9
79285: ARRAY
79286: PUSH
79287: LD_INT 1
79289: ARRAY
79290: PPUSH
79291: LD_VAR 0 2
79295: PUSH
79296: LD_VAR 0 9
79300: ARRAY
79301: PUSH
79302: LD_INT 2
79304: ARRAY
79305: PPUSH
79306: CALL_OW 297
79310: PUSH
79311: LD_INT 6
79313: GREATER
79314: IFFALSE 79357
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79316: LD_VAR 0 4
79320: PPUSH
79321: LD_VAR 0 2
79325: PUSH
79326: LD_VAR 0 9
79330: ARRAY
79331: PUSH
79332: LD_INT 1
79334: ARRAY
79335: PPUSH
79336: LD_VAR 0 2
79340: PUSH
79341: LD_VAR 0 9
79345: ARRAY
79346: PUSH
79347: LD_INT 2
79349: ARRAY
79350: PPUSH
79351: CALL_OW 114
79355: GO 79371
// SetTag ( i , tag ) ;
79357: LD_VAR 0 4
79361: PPUSH
79362: LD_VAR 0 9
79366: PPUSH
79367: CALL_OW 109
// end else
79371: GO 79444
// if enemy then
79373: LD_VAR 0 5
79377: IFFALSE 79444
// begin if GetWeapon ( i ) = ru_time_lapser then
79379: LD_VAR 0 4
79383: PPUSH
79384: CALL_OW 264
79388: PUSH
79389: LD_INT 49
79391: EQUAL
79392: IFFALSE 79420
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79394: LD_VAR 0 4
79398: PPUSH
79399: LD_VAR 0 5
79403: PPUSH
79404: LD_VAR 0 4
79408: PPUSH
79409: CALL_OW 74
79413: PPUSH
79414: CALL_OW 112
79418: GO 79444
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79420: LD_VAR 0 4
79424: PPUSH
79425: LD_VAR 0 5
79429: PPUSH
79430: LD_VAR 0 4
79434: PPUSH
79435: CALL_OW 74
79439: PPUSH
79440: CALL_OW 115
// end ; end ;
79444: GO 79024
79446: POP
79447: POP
// end ;
79448: LD_VAR 0 3
79452: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79453: LD_INT 0
79455: PPUSH
79456: PPUSH
79457: PPUSH
// if not unit or IsInUnit ( unit ) then
79458: LD_VAR 0 1
79462: NOT
79463: PUSH
79464: LD_VAR 0 1
79468: PPUSH
79469: CALL_OW 310
79473: OR
79474: IFFALSE 79478
// exit ;
79476: GO 79569
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79478: LD_ADDR_VAR 0 4
79482: PUSH
79483: LD_VAR 0 1
79487: PPUSH
79488: CALL_OW 250
79492: PPUSH
79493: LD_VAR 0 2
79497: PPUSH
79498: LD_INT 1
79500: PPUSH
79501: CALL_OW 272
79505: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79506: LD_ADDR_VAR 0 5
79510: PUSH
79511: LD_VAR 0 1
79515: PPUSH
79516: CALL_OW 251
79520: PPUSH
79521: LD_VAR 0 2
79525: PPUSH
79526: LD_INT 1
79528: PPUSH
79529: CALL_OW 273
79533: ST_TO_ADDR
// if ValidHex ( x , y ) then
79534: LD_VAR 0 4
79538: PPUSH
79539: LD_VAR 0 5
79543: PPUSH
79544: CALL_OW 488
79548: IFFALSE 79569
// ComTurnXY ( unit , x , y ) ;
79550: LD_VAR 0 1
79554: PPUSH
79555: LD_VAR 0 4
79559: PPUSH
79560: LD_VAR 0 5
79564: PPUSH
79565: CALL_OW 118
// end ;
79569: LD_VAR 0 3
79573: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79574: LD_INT 0
79576: PPUSH
79577: PPUSH
// result := false ;
79578: LD_ADDR_VAR 0 3
79582: PUSH
79583: LD_INT 0
79585: ST_TO_ADDR
// if not units then
79586: LD_VAR 0 2
79590: NOT
79591: IFFALSE 79595
// exit ;
79593: GO 79640
// for i in units do
79595: LD_ADDR_VAR 0 4
79599: PUSH
79600: LD_VAR 0 2
79604: PUSH
79605: FOR_IN
79606: IFFALSE 79638
// if See ( side , i ) then
79608: LD_VAR 0 1
79612: PPUSH
79613: LD_VAR 0 4
79617: PPUSH
79618: CALL_OW 292
79622: IFFALSE 79636
// begin result := true ;
79624: LD_ADDR_VAR 0 3
79628: PUSH
79629: LD_INT 1
79631: ST_TO_ADDR
// exit ;
79632: POP
79633: POP
79634: GO 79640
// end ;
79636: GO 79605
79638: POP
79639: POP
// end ;
79640: LD_VAR 0 3
79644: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79645: LD_INT 0
79647: PPUSH
79648: PPUSH
79649: PPUSH
79650: PPUSH
// if not unit or not points then
79651: LD_VAR 0 1
79655: NOT
79656: PUSH
79657: LD_VAR 0 2
79661: NOT
79662: OR
79663: IFFALSE 79667
// exit ;
79665: GO 79757
// dist := 99999 ;
79667: LD_ADDR_VAR 0 5
79671: PUSH
79672: LD_INT 99999
79674: ST_TO_ADDR
// for i in points do
79675: LD_ADDR_VAR 0 4
79679: PUSH
79680: LD_VAR 0 2
79684: PUSH
79685: FOR_IN
79686: IFFALSE 79755
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79688: LD_ADDR_VAR 0 6
79692: PUSH
79693: LD_VAR 0 1
79697: PPUSH
79698: LD_VAR 0 4
79702: PUSH
79703: LD_INT 1
79705: ARRAY
79706: PPUSH
79707: LD_VAR 0 4
79711: PUSH
79712: LD_INT 2
79714: ARRAY
79715: PPUSH
79716: CALL_OW 297
79720: ST_TO_ADDR
// if tmpDist < dist then
79721: LD_VAR 0 6
79725: PUSH
79726: LD_VAR 0 5
79730: LESS
79731: IFFALSE 79753
// begin result := i ;
79733: LD_ADDR_VAR 0 3
79737: PUSH
79738: LD_VAR 0 4
79742: ST_TO_ADDR
// dist := tmpDist ;
79743: LD_ADDR_VAR 0 5
79747: PUSH
79748: LD_VAR 0 6
79752: ST_TO_ADDR
// end ; end ;
79753: GO 79685
79755: POP
79756: POP
// end ;
79757: LD_VAR 0 3
79761: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79762: LD_INT 0
79764: PPUSH
// uc_side := side ;
79765: LD_ADDR_OWVAR 20
79769: PUSH
79770: LD_VAR 0 1
79774: ST_TO_ADDR
// uc_nation := 3 ;
79775: LD_ADDR_OWVAR 21
79779: PUSH
79780: LD_INT 3
79782: ST_TO_ADDR
// vc_chassis := 25 ;
79783: LD_ADDR_OWVAR 37
79787: PUSH
79788: LD_INT 25
79790: ST_TO_ADDR
// vc_engine := engine_siberite ;
79791: LD_ADDR_OWVAR 39
79795: PUSH
79796: LD_INT 3
79798: ST_TO_ADDR
// vc_control := control_computer ;
79799: LD_ADDR_OWVAR 38
79803: PUSH
79804: LD_INT 3
79806: ST_TO_ADDR
// vc_weapon := 59 ;
79807: LD_ADDR_OWVAR 40
79811: PUSH
79812: LD_INT 59
79814: ST_TO_ADDR
// result := CreateVehicle ;
79815: LD_ADDR_VAR 0 5
79819: PUSH
79820: CALL_OW 45
79824: ST_TO_ADDR
// SetDir ( result , d ) ;
79825: LD_VAR 0 5
79829: PPUSH
79830: LD_VAR 0 4
79834: PPUSH
79835: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79839: LD_VAR 0 5
79843: PPUSH
79844: LD_VAR 0 2
79848: PPUSH
79849: LD_VAR 0 3
79853: PPUSH
79854: LD_INT 0
79856: PPUSH
79857: CALL_OW 48
// end ;
79861: LD_VAR 0 5
79865: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79866: LD_INT 0
79868: PPUSH
79869: PPUSH
79870: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79871: LD_ADDR_VAR 0 2
79875: PUSH
79876: LD_INT 0
79878: PUSH
79879: LD_INT 0
79881: PUSH
79882: LD_INT 0
79884: PUSH
79885: LD_INT 0
79887: PUSH
79888: EMPTY
79889: LIST
79890: LIST
79891: LIST
79892: LIST
79893: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79894: LD_VAR 0 1
79898: NOT
79899: PUSH
79900: LD_VAR 0 1
79904: PPUSH
79905: CALL_OW 264
79909: PUSH
79910: LD_INT 12
79912: PUSH
79913: LD_INT 51
79915: PUSH
79916: LD_INT 32
79918: PUSH
79919: LD_INT 89
79921: PUSH
79922: EMPTY
79923: LIST
79924: LIST
79925: LIST
79926: LIST
79927: IN
79928: NOT
79929: OR
79930: IFFALSE 79934
// exit ;
79932: GO 80032
// for i := 1 to 3 do
79934: LD_ADDR_VAR 0 3
79938: PUSH
79939: DOUBLE
79940: LD_INT 1
79942: DEC
79943: ST_TO_ADDR
79944: LD_INT 3
79946: PUSH
79947: FOR_TO
79948: IFFALSE 80030
// begin tmp := GetCargo ( cargo , i ) ;
79950: LD_ADDR_VAR 0 4
79954: PUSH
79955: LD_VAR 0 1
79959: PPUSH
79960: LD_VAR 0 3
79964: PPUSH
79965: CALL_OW 289
79969: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79970: LD_ADDR_VAR 0 2
79974: PUSH
79975: LD_VAR 0 2
79979: PPUSH
79980: LD_VAR 0 3
79984: PPUSH
79985: LD_VAR 0 4
79989: PPUSH
79990: CALL_OW 1
79994: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79995: LD_ADDR_VAR 0 2
79999: PUSH
80000: LD_VAR 0 2
80004: PPUSH
80005: LD_INT 4
80007: PPUSH
80008: LD_VAR 0 2
80012: PUSH
80013: LD_INT 4
80015: ARRAY
80016: PUSH
80017: LD_VAR 0 4
80021: PLUS
80022: PPUSH
80023: CALL_OW 1
80027: ST_TO_ADDR
// end ;
80028: GO 79947
80030: POP
80031: POP
// end ;
80032: LD_VAR 0 2
80036: RET
// export function Length ( array ) ; begin
80037: LD_INT 0
80039: PPUSH
// result := array + 0 ;
80040: LD_ADDR_VAR 0 2
80044: PUSH
80045: LD_VAR 0 1
80049: PUSH
80050: LD_INT 0
80052: PLUS
80053: ST_TO_ADDR
// end ;
80054: LD_VAR 0 2
80058: RET
// export function PrepareArray ( array ) ; begin
80059: LD_INT 0
80061: PPUSH
// result := array diff 0 ;
80062: LD_ADDR_VAR 0 2
80066: PUSH
80067: LD_VAR 0 1
80071: PUSH
80072: LD_INT 0
80074: DIFF
80075: ST_TO_ADDR
// if not result [ 1 ] then
80076: LD_VAR 0 2
80080: PUSH
80081: LD_INT 1
80083: ARRAY
80084: NOT
80085: IFFALSE 80105
// result := Delete ( result , 1 ) ;
80087: LD_ADDR_VAR 0 2
80091: PUSH
80092: LD_VAR 0 2
80096: PPUSH
80097: LD_INT 1
80099: PPUSH
80100: CALL_OW 3
80104: ST_TO_ADDR
// end ;
80105: LD_VAR 0 2
80109: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80110: LD_INT 0
80112: PPUSH
80113: PPUSH
80114: PPUSH
80115: PPUSH
// sibRocketRange := 25 ;
80116: LD_ADDR_VAR 0 6
80120: PUSH
80121: LD_INT 25
80123: ST_TO_ADDR
// result := false ;
80124: LD_ADDR_VAR 0 4
80128: PUSH
80129: LD_INT 0
80131: ST_TO_ADDR
// for i := 0 to 5 do
80132: LD_ADDR_VAR 0 5
80136: PUSH
80137: DOUBLE
80138: LD_INT 0
80140: DEC
80141: ST_TO_ADDR
80142: LD_INT 5
80144: PUSH
80145: FOR_TO
80146: IFFALSE 80213
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80148: LD_VAR 0 1
80152: PPUSH
80153: LD_VAR 0 5
80157: PPUSH
80158: LD_VAR 0 6
80162: PPUSH
80163: CALL_OW 272
80167: PPUSH
80168: LD_VAR 0 2
80172: PPUSH
80173: LD_VAR 0 5
80177: PPUSH
80178: LD_VAR 0 6
80182: PPUSH
80183: CALL_OW 273
80187: PPUSH
80188: LD_VAR 0 3
80192: PPUSH
80193: CALL_OW 309
80197: IFFALSE 80211
// begin result := true ;
80199: LD_ADDR_VAR 0 4
80203: PUSH
80204: LD_INT 1
80206: ST_TO_ADDR
// exit ;
80207: POP
80208: POP
80209: GO 80215
// end ;
80211: GO 80145
80213: POP
80214: POP
// end ;
80215: LD_VAR 0 4
80219: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80220: LD_INT 0
80222: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80223: LD_VAR 0 1
80227: PPUSH
80228: LD_VAR 0 2
80232: PPUSH
80233: LD_INT 0
80235: PPUSH
80236: LD_INT 0
80238: PPUSH
80239: LD_INT 1
80241: PPUSH
80242: LD_INT 0
80244: PPUSH
80245: CALL_OW 587
// end ; end_of_file
80249: LD_VAR 0 3
80253: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80254: LD_VAR 0 1
80258: PUSH
80259: LD_INT 200
80261: DOUBLE
80262: GREATEREQUAL
80263: IFFALSE 80271
80265: LD_INT 299
80267: DOUBLE
80268: LESSEQUAL
80269: IFTRUE 80273
80271: GO 80305
80273: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80274: LD_VAR 0 1
80278: PPUSH
80279: LD_VAR 0 2
80283: PPUSH
80284: LD_VAR 0 3
80288: PPUSH
80289: LD_VAR 0 4
80293: PPUSH
80294: LD_VAR 0 5
80298: PPUSH
80299: CALL 34920 0 5
80303: GO 80382
80305: LD_INT 300
80307: DOUBLE
80308: GREATEREQUAL
80309: IFFALSE 80317
80311: LD_INT 399
80313: DOUBLE
80314: LESSEQUAL
80315: IFTRUE 80319
80317: GO 80381
80319: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80320: LD_VAR 0 1
80324: PPUSH
80325: LD_VAR 0 2
80329: PPUSH
80330: LD_VAR 0 3
80334: PPUSH
80335: LD_VAR 0 4
80339: PPUSH
80340: LD_VAR 0 5
80344: PPUSH
80345: LD_VAR 0 6
80349: PPUSH
80350: LD_VAR 0 7
80354: PPUSH
80355: LD_VAR 0 8
80359: PPUSH
80360: LD_VAR 0 9
80364: PPUSH
80365: LD_VAR 0 10
80369: PPUSH
80370: LD_VAR 0 11
80374: PPUSH
80375: CALL 31253 0 11
80379: GO 80382
80381: POP
// end ;
80382: PPOPN 11
80384: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80385: LD_VAR 0 1
80389: PPUSH
80390: LD_VAR 0 2
80394: PPUSH
80395: LD_VAR 0 3
80399: PPUSH
80400: LD_VAR 0 4
80404: PPUSH
80405: LD_VAR 0 5
80409: PPUSH
80410: CALL 34656 0 5
// end ; end_of_file
80414: PPOPN 5
80416: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80417: LD_VAR 0 1
80421: PPUSH
80422: LD_VAR 0 2
80426: PPUSH
80427: LD_VAR 0 3
80431: PPUSH
80432: LD_VAR 0 4
80436: PPUSH
80437: LD_VAR 0 5
80441: PPUSH
80442: LD_VAR 0 6
80446: PPUSH
80447: CALL 18873 0 6
// end ;
80451: PPOPN 6
80453: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80454: LD_INT 0
80456: PPUSH
// begin if not units then
80457: LD_VAR 0 1
80461: NOT
80462: IFFALSE 80466
// exit ;
80464: GO 80466
// end ;
80466: PPOPN 7
80468: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80469: CALL 18767 0 0
// end ;
80473: PPOPN 1
80475: END
