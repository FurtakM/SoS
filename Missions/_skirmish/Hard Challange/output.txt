// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10208 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10338 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11751 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13980 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 2000 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 2000
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8421 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6446 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6446 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6446 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6446 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6446 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: IFFALSE 1060
1048: PUSH
1049: LD_INT 3
1051: PPUSH
1052: LD_INT 3
1054: PPUSH
1055: CALL 6297 0 2
1059: AND
1060: IFFALSE 1096
1062: GO 1064
1064: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1065: LD_INT 3
1067: PPUSH
1068: LD_INT 3
1070: PPUSH
1071: CALL 6297 0 2
1075: PUSH
1076: LD_INT 1
1078: ARRAY
1079: PPUSH
1080: LD_INT 24
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: LD_INT 3
1088: PPUSH
1089: LD_INT 48
1091: PPUSH
1092: CALL 8188 0 5
1096: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1097: LD_OWVAR 67
1101: PUSH
1102: LD_INT 3
1104: EQUAL
1105: IFFALSE 1119
1107: PUSH
1108: LD_INT 3
1110: PPUSH
1111: LD_INT 3
1113: PPUSH
1114: CALL 6297 0 2
1118: AND
1119: IFFALSE 1155
1121: GO 1123
1123: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1124: LD_INT 3
1126: PPUSH
1127: LD_INT 3
1129: PPUSH
1130: CALL 6297 0 2
1134: PUSH
1135: LD_INT 1
1137: ARRAY
1138: PPUSH
1139: LD_INT 24
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 3
1147: PPUSH
1148: LD_INT 48
1150: PPUSH
1151: CALL 8188 0 5
1155: END
// every 0 0$01 trigger ru_protector do var i ;
1156: LD_EXP 17
1160: IFFALSE 1331
1162: GO 1164
1164: DISABLE
1165: LD_INT 0
1167: PPUSH
// begin enable ;
1168: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1169: LD_INT 14
1171: PPUSH
1172: LD_INT 81
1174: PUSH
1175: LD_INT 3
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: PPUSH
1182: CALL_OW 70
1186: IFFALSE 1261
// begin for i = 1 to ru_protector do
1188: LD_ADDR_VAR 0 1
1192: PUSH
1193: DOUBLE
1194: LD_INT 1
1196: DEC
1197: ST_TO_ADDR
1198: LD_EXP 17
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1257
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1206: LD_EXP 17
1210: PUSH
1211: LD_VAR 0 1
1215: ARRAY
1216: PPUSH
1217: LD_INT 14
1219: PPUSH
1220: LD_INT 81
1222: PUSH
1223: LD_INT 3
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PPUSH
1230: CALL_OW 70
1234: PPUSH
1235: LD_EXP 17
1239: PUSH
1240: LD_VAR 0 1
1244: ARRAY
1245: PPUSH
1246: CALL_OW 74
1250: PPUSH
1251: CALL_OW 115
1255: GO 1203
1257: POP
1258: POP
// end else
1259: GO 1331
// for i = 1 to ru_protector do
1261: LD_ADDR_VAR 0 1
1265: PUSH
1266: DOUBLE
1267: LD_INT 1
1269: DEC
1270: ST_TO_ADDR
1271: LD_EXP 17
1275: PUSH
1276: FOR_TO
1277: IFFALSE 1329
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1279: LD_EXP 17
1283: PUSH
1284: LD_VAR 0 1
1288: ARRAY
1289: PPUSH
1290: LD_INT 49
1292: PPUSH
1293: LD_INT 39
1295: PPUSH
1296: CALL_OW 297
1300: PUSH
1301: LD_INT 10
1303: GREATER
1304: IFFALSE 1327
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1306: LD_EXP 17
1310: PUSH
1311: LD_VAR 0 1
1315: ARRAY
1316: PPUSH
1317: LD_INT 49
1319: PPUSH
1320: LD_INT 39
1322: PPUSH
1323: CALL_OW 111
1327: GO 1276
1329: POP
1330: POP
// end ;
1331: PPOPN 1
1333: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1334: LD_OWVAR 1
1338: PUSH
1339: LD_INT 4200
1341: PUSH
1342: LD_INT 2100
1344: PUSH
1345: LD_INT 1050
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: PUSH
1353: LD_OWVAR 67
1357: ARRAY
1358: GREATER
1359: IFFALSE 1372
1361: GO 1363
1363: DISABLE
// need_buldozer := true ;
1364: LD_ADDR_EXP 18
1368: PUSH
1369: LD_INT 1
1371: ST_TO_ADDR
1372: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1373: GO 1375
1375: DISABLE
// begin enable ;
1376: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1377: LD_ADDR_EXP 20
1381: PUSH
1382: LD_INT 22
1384: PUSH
1385: LD_INT 3
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 25
1394: PUSH
1395: LD_INT 1
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PPUSH
1406: CALL_OW 69
1410: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1411: LD_ADDR_EXP 21
1415: PUSH
1416: LD_INT 22
1418: PUSH
1419: LD_INT 3
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: PUSH
1426: LD_INT 25
1428: PUSH
1429: LD_INT 2
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PPUSH
1440: CALL_OW 69
1444: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1445: LD_ADDR_EXP 22
1449: PUSH
1450: LD_INT 22
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 25
1462: PUSH
1463: LD_INT 3
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PPUSH
1474: CALL_OW 69
1478: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1479: LD_ADDR_EXP 23
1483: PUSH
1484: LD_INT 22
1486: PUSH
1487: LD_INT 3
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 25
1496: PUSH
1497: LD_INT 4
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PPUSH
1508: CALL_OW 69
1512: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1513: LD_ADDR_EXP 24
1517: PUSH
1518: LD_INT 22
1520: PUSH
1521: LD_INT 3
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: PUSH
1528: LD_INT 25
1530: PUSH
1531: LD_INT 9
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: PPUSH
1542: CALL_OW 69
1546: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1547: LD_ADDR_EXP 25
1551: PUSH
1552: LD_INT 2
1554: PPUSH
1555: LD_INT 22
1557: PUSH
1558: LD_INT 3
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 1
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PPUSH
1579: CALL_OW 70
1583: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1584: LD_ADDR_EXP 26
1588: PUSH
1589: LD_INT 34
1591: PUSH
1592: LD_INT 53
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PPUSH
1599: CALL_OW 69
1603: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1604: LD_ADDR_EXP 27
1608: PUSH
1609: LD_INT 34
1611: PUSH
1612: LD_INT 52
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1624: LD_ADDR_EXP 28
1628: PUSH
1629: LD_INT 34
1631: PUSH
1632: LD_INT 51
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: PPUSH
1639: CALL_OW 69
1643: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1644: LD_ADDR_EXP 14
1648: PUSH
1649: LD_INT 3
1651: PPUSH
1652: LD_INT 1
1654: NEG
1655: PPUSH
1656: CALL 10726 0 2
1660: ST_TO_ADDR
// end ;
1661: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1662: LD_INT 22
1664: PUSH
1665: LD_INT 3
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL_OW 69
1676: IFFALSE 1684
1678: PUSH
1679: LD_EXP 29
1683: AND
1684: IFTRUE 1692
1686: PUSH
1687: LD_EXP 1
1691: OR
1692: IFFALSE 5311
1694: GO 1696
1696: DISABLE
1697: LD_INT 0
1699: PPUSH
1700: PPUSH
1701: PPUSH
1702: PPUSH
1703: PPUSH
1704: PPUSH
1705: PPUSH
1706: PPUSH
1707: PPUSH
1708: PPUSH
// begin enable ;
1709: ENABLE
// for i = 1 to ru_eng do
1710: LD_ADDR_VAR 0 1
1714: PUSH
1715: DOUBLE
1716: LD_INT 1
1718: DEC
1719: ST_TO_ADDR
1720: LD_EXP 21
1724: PUSH
1725: FOR_TO
1726: IFFALSE 1791
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1728: LD_EXP 21
1732: PUSH
1733: LD_VAR 0 1
1737: ARRAY
1738: PPUSH
1739: CALL_OW 314
1743: NOT
1744: IFFALSE 1764
1746: PUSH
1747: LD_EXP 21
1751: PUSH
1752: LD_VAR 0 1
1756: ARRAY
1757: PPUSH
1758: CALL_OW 310
1762: NOT
1763: AND
1764: IFFALSE 1789
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1766: LD_EXP 21
1770: PUSH
1771: LD_VAR 0 1
1775: ARRAY
1776: PPUSH
1777: LD_INT 3
1779: PPUSH
1780: CALL 6206 0 1
1784: PPUSH
1785: CALL_OW 120
1789: GO 1725
1791: POP
1792: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1793: LD_INT 2
1795: PPUSH
1796: LD_INT 22
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 21
1808: PUSH
1809: LD_INT 3
1811: PUSH
1812: EMPTY
1813: LIST
1814: LIST
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: LD_INT 24
1821: PUSH
1822: LD_INT 1000
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 70
1842: IFFALSE 2009
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1844: LD_ADDR_VAR 0 4
1848: PUSH
1849: LD_INT 2
1851: PPUSH
1852: LD_INT 22
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 21
1864: PUSH
1865: LD_INT 3
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 3
1874: PUSH
1875: LD_INT 24
1877: PUSH
1878: LD_INT 1000
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: LIST
1893: PPUSH
1894: CALL_OW 70
1898: ST_TO_ADDR
// for i = 1 to ru_eng do
1899: LD_ADDR_VAR 0 1
1903: PUSH
1904: DOUBLE
1905: LD_INT 1
1907: DEC
1908: ST_TO_ADDR
1909: LD_EXP 21
1913: PUSH
1914: FOR_TO
1915: IFFALSE 2007
// begin if IsInUnit ( ru_eng [ i ] ) then
1917: LD_EXP 21
1921: PUSH
1922: LD_VAR 0 1
1926: ARRAY
1927: PPUSH
1928: CALL_OW 310
1932: IFFALSE 1951
// ComExitBuilding ( ru_eng [ i ] ) else
1934: LD_EXP 21
1938: PUSH
1939: LD_VAR 0 1
1943: ARRAY
1944: PPUSH
1945: CALL_OW 122
1949: GO 2005
// if not WantRepair ( ru_eng [ i ] ) then
1951: LD_EXP 21
1955: PUSH
1956: LD_VAR 0 1
1960: ARRAY
1961: PPUSH
1962: CALL 10652 0 1
1966: NOT
1967: IFFALSE 2005
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1969: LD_EXP 21
1973: PUSH
1974: LD_VAR 0 1
1978: ARRAY
1979: PPUSH
1980: LD_VAR 0 4
1984: PPUSH
1985: LD_EXP 21
1989: PUSH
1990: LD_VAR 0 1
1994: ARRAY
1995: PPUSH
1996: CALL_OW 74
2000: PPUSH
2001: CALL_OW 130
// end ;
2005: GO 1914
2007: POP
2008: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
2009: LD_OWVAR 2
2013: PPUSH
2014: LD_INT 38
2016: PPUSH
2017: LD_INT 26
2019: PPUSH
2020: CALL 5531 0 3
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: IFFALSE 2051
2030: PUSH
2031: LD_OWVAR 2
2035: PPUSH
2036: LD_INT 29
2038: PPUSH
2039: LD_INT 37
2041: PPUSH
2042: CALL 5531 0 3
2046: PUSH
2047: LD_INT 0
2049: EQUAL
2050: AND
2051: IFFALSE 2188
// begin if ru_blist > 0 then
2053: LD_EXP 13
2057: PUSH
2058: LD_INT 0
2060: GREATER
2061: IFFALSE 2188
// begin for i = 1 to ru_eng do
2063: LD_ADDR_VAR 0 1
2067: PUSH
2068: DOUBLE
2069: LD_INT 1
2071: DEC
2072: ST_TO_ADDR
2073: LD_EXP 21
2077: PUSH
2078: FOR_TO
2079: IFFALSE 2186
// if IsInUnit ( ru_eng [ i ] ) then
2081: LD_EXP 21
2085: PUSH
2086: LD_VAR 0 1
2090: ARRAY
2091: PPUSH
2092: CALL_OW 310
2096: IFFALSE 2115
// ComExitBuilding ( ru_eng [ i ] ) else
2098: LD_EXP 21
2102: PUSH
2103: LD_VAR 0 1
2107: ARRAY
2108: PPUSH
2109: CALL_OW 122
2113: GO 2184
// if not HasTask ( ru_eng [ i ] ) then
2115: LD_EXP 21
2119: PUSH
2120: LD_VAR 0 1
2124: ARRAY
2125: PPUSH
2126: CALL_OW 314
2130: NOT
2131: IFFALSE 2184
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2133: LD_EXP 21
2137: PUSH
2138: LD_VAR 0 1
2142: ARRAY
2143: PPUSH
2144: LD_EXP 13
2148: PUSH
2149: LD_INT 1
2151: ARRAY
2152: PPUSH
2153: LD_EXP 13
2157: PUSH
2158: LD_INT 2
2160: ARRAY
2161: PPUSH
2162: LD_EXP 13
2166: PUSH
2167: LD_INT 3
2169: ARRAY
2170: PPUSH
2171: LD_EXP 13
2175: PUSH
2176: LD_INT 4
2178: ARRAY
2179: PPUSH
2180: CALL_OW 145
2184: GO 2078
2186: POP
2187: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2188: LD_ADDR_EXP 12
2192: PUSH
2193: LD_INT 3
2195: PPUSH
2196: LD_EXP 12
2200: PPUSH
2201: LD_EXP 15
2205: PPUSH
2206: CALL 9241 0 3
2210: ST_TO_ADDR
// if debug then
2211: LD_EXP 1
2215: IFFALSE 2227
// display_strings := ru_heal_list ;
2217: LD_ADDR_OWVAR 47
2221: PUSH
2222: LD_EXP 12
2226: ST_TO_ADDR
// for i = 1 to ru_sci do
2227: LD_ADDR_VAR 0 1
2231: PUSH
2232: DOUBLE
2233: LD_INT 1
2235: DEC
2236: ST_TO_ADDR
2237: LD_EXP 23
2241: PUSH
2242: FOR_TO
2243: IFFALSE 2581
// begin if ru_heal_list then
2245: LD_EXP 12
2249: IFFALSE 2490
// begin list := ru_heal_list ;
2251: LD_ADDR_VAR 0 9
2255: PUSH
2256: LD_EXP 12
2260: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2261: LD_EXP 23
2265: PUSH
2266: LD_VAR 0 1
2270: ARRAY
2271: PPUSH
2272: CALL_OW 310
2276: IFFALSE 2293
// ComExitBuilding ( ru_sci [ i ] ) ;
2278: LD_EXP 23
2282: PUSH
2283: LD_VAR 0 1
2287: ARRAY
2288: PPUSH
2289: CALL_OW 122
// for p = 1 to list do
2293: LD_ADDR_VAR 0 5
2297: PUSH
2298: DOUBLE
2299: LD_INT 1
2301: DEC
2302: ST_TO_ADDR
2303: LD_VAR 0 9
2307: PUSH
2308: FOR_TO
2309: IFFALSE 2486
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2311: LD_VAR 0 9
2315: PUSH
2316: LD_VAR 0 5
2320: ARRAY
2321: PPUSH
2322: CALL_OW 110
2326: PUSH
2327: LD_INT 100
2329: EQUAL
2330: IFFALSE 2353
2332: PUSH
2333: LD_EXP 23
2337: PUSH
2338: LD_VAR 0 1
2342: ARRAY
2343: PPUSH
2344: LD_INT 100
2346: PPUSH
2347: CALL 76606 0 2
2351: NOT
2352: AND
2353: IFFALSE 2381
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2355: LD_EXP 23
2359: PUSH
2360: LD_VAR 0 1
2364: ARRAY
2365: PPUSH
2366: LD_VAR 0 9
2370: PUSH
2371: LD_VAR 0 5
2375: ARRAY
2376: PPUSH
2377: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2381: LD_VAR 0 9
2385: PUSH
2386: LD_VAR 0 5
2390: ARRAY
2391: PPUSH
2392: CALL_OW 110
2396: PUSH
2397: LD_INT 100
2399: GREATER
2400: IFFALSE 2428
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2402: LD_EXP 23
2406: PUSH
2407: LD_VAR 0 1
2411: ARRAY
2412: PPUSH
2413: LD_VAR 0 9
2417: PUSH
2418: LD_VAR 0 5
2422: ARRAY
2423: PPUSH
2424: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2428: LD_VAR 0 9
2432: PUSH
2433: LD_VAR 0 5
2437: ARRAY
2438: PPUSH
2439: LD_INT 4
2441: PPUSH
2442: CALL_OW 308
2446: NOT
2447: IFFALSE 2469
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2449: LD_VAR 0 9
2453: PUSH
2454: LD_VAR 0 5
2458: ARRAY
2459: PPUSH
2460: LD_INT 4
2462: PPUSH
2463: CALL_OW 113
2467: GO 2484
// ComHold ( list [ p ] ) ;
2469: LD_VAR 0 9
2473: PUSH
2474: LD_VAR 0 5
2478: ARRAY
2479: PPUSH
2480: CALL_OW 140
// end ;
2484: GO 2308
2486: POP
2487: POP
// end else
2488: GO 2579
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2490: LD_EXP 23
2494: PUSH
2495: LD_VAR 0 1
2499: ARRAY
2500: PPUSH
2501: CALL_OW 314
2505: NOT
2506: IFFALSE 2526
2508: PUSH
2509: LD_EXP 23
2513: PUSH
2514: LD_VAR 0 1
2518: ARRAY
2519: PPUSH
2520: CALL_OW 310
2524: NOT
2525: AND
2526: IFFALSE 2538
2528: PUSH
2529: LD_EXP 12
2533: PUSH
2534: LD_INT 0
2536: EQUAL
2537: AND
2538: IFFALSE 2579
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2540: LD_EXP 23
2544: PUSH
2545: LD_VAR 0 1
2549: ARRAY
2550: PPUSH
2551: LD_INT 3
2553: PPUSH
2554: CALL 6446 0 1
2558: PPUSH
2559: LD_EXP 23
2563: PUSH
2564: LD_VAR 0 1
2568: ARRAY
2569: PPUSH
2570: CALL_OW 74
2574: PPUSH
2575: CALL_OW 120
// end ;
2579: GO 2242
2581: POP
2582: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2583: LD_INT 3
2585: PPUSH
2586: LD_EXP 6
2590: PPUSH
2591: CALL 6587 0 2
2595: IFFALSE 2609
// ResearchTechList ( 3 , ru_tech_list ) ;
2597: LD_INT 3
2599: PPUSH
2600: LD_EXP 6
2604: PPUSH
2605: CALL 6662 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2609: LD_EXP 21
2613: PPUSH
2614: LD_EXP 11
2618: PPUSH
2619: CALL 8593 0 2
// lab := GetLabs ( 3 ) ;
2623: LD_ADDR_VAR 0 8
2627: PUSH
2628: LD_INT 3
2630: PPUSH
2631: CALL 6446 0 1
2635: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2636: LD_VAR 0 8
2640: IFFALSE 2652
2642: PUSH
2643: LD_EXP 12
2647: PUSH
2648: LD_INT 0
2650: EQUAL
2651: AND
2652: IFFALSE 2779
// for i = 1 to lab do
2654: LD_ADDR_VAR 0 1
2658: PUSH
2659: DOUBLE
2660: LD_INT 1
2662: DEC
2663: ST_TO_ADDR
2664: LD_VAR 0 8
2668: PUSH
2669: FOR_TO
2670: IFFALSE 2777
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2672: LD_VAR 0 8
2676: PUSH
2677: LD_VAR 0 1
2681: ARRAY
2682: PPUSH
2683: CALL_OW 461
2687: PUSH
2688: LD_INT 6
2690: EQUAL
2691: IFFALSE 2775
// begin for p = 1 to ru_sci do
2693: LD_ADDR_VAR 0 5
2697: PUSH
2698: DOUBLE
2699: LD_INT 1
2701: DEC
2702: ST_TO_ADDR
2703: LD_EXP 23
2707: PUSH
2708: FOR_TO
2709: IFFALSE 2773
// if IsInUnit ( ru_sci [ p ] ) then
2711: LD_EXP 23
2715: PUSH
2716: LD_VAR 0 5
2720: ARRAY
2721: PPUSH
2722: CALL_OW 310
2726: IFFALSE 2745
// ComExitBuilding ( ru_sci [ p ] ) else
2728: LD_EXP 23
2732: PUSH
2733: LD_VAR 0 5
2737: ARRAY
2738: PPUSH
2739: CALL_OW 122
2743: GO 2771
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2745: LD_EXP 23
2749: PUSH
2750: LD_VAR 0 5
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 8
2760: PUSH
2761: LD_VAR 0 1
2765: ARRAY
2766: PPUSH
2767: CALL_OW 120
2771: GO 2708
2773: POP
2774: POP
// end ;
2775: GO 2669
2777: POP
2778: POP
// if GetTowers ( 3 ) < 5 then
2779: LD_INT 3
2781: PPUSH
2782: CALL 7003 0 1
2786: PUSH
2787: LD_INT 5
2789: LESS
2790: IFFALSE 2808
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2792: LD_EXP 21
2796: PPUSH
2797: LD_EXP 7
2801: PPUSH
2802: CALL 7623 0 2
2806: GO 2820
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2808: LD_INT 3
2810: PPUSH
2811: LD_EXP 8
2815: PPUSH
2816: CALL 7918 0 2
// if GetBuilding ( 3 , b_factory ) then
2820: LD_INT 3
2822: PPUSH
2823: LD_INT 3
2825: PPUSH
2826: CALL 6297 0 2
2830: IFFALSE 3106
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2832: LD_INT 3
2834: PPUSH
2835: LD_INT 3
2837: PPUSH
2838: CALL 6297 0 2
2842: PUSH
2843: LD_INT 1
2845: ARRAY
2846: PPUSH
2847: CALL_OW 461
2851: PUSH
2852: LD_INT 2
2854: EQUAL
2855: IFFALSE 3106
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2857: LD_ADDR_VAR 0 7
2861: PUSH
2862: LD_INT 3
2864: PPUSH
2865: LD_INT 3
2867: PPUSH
2868: CALL 6297 0 2
2872: PUSH
2873: LD_INT 1
2875: ARRAY
2876: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2877: LD_INT 3
2879: PPUSH
2880: LD_INT 24
2882: PPUSH
2883: LD_INT 53
2885: PPUSH
2886: CALL 8066 0 3
2890: PUSH
2891: LD_INT 0
2893: EQUAL
2894: IFFALSE 2902
2896: PUSH
2897: LD_EXP 18
2901: AND
2902: IFFALSE 2925
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2904: LD_VAR 0 7
2908: PPUSH
2909: LD_INT 24
2911: PPUSH
2912: LD_INT 1
2914: PPUSH
2915: LD_INT 1
2917: PPUSH
2918: LD_INT 53
2920: PPUSH
2921: CALL 8188 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2925: LD_INT 3
2927: PPUSH
2928: LD_INT 22
2930: PPUSH
2931: LD_INT 52
2933: PPUSH
2934: CALL 8066 0 3
2938: PUSH
2939: LD_INT 0
2941: EQUAL
2942: IFFALSE 2950
2944: PUSH
2945: LD_EXP 19
2949: AND
2950: IFFALSE 2973
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2952: LD_VAR 0 7
2956: PPUSH
2957: LD_INT 22
2959: PPUSH
2960: LD_INT 1
2962: PPUSH
2963: LD_INT 3
2965: PPUSH
2966: LD_INT 52
2968: PPUSH
2969: CALL 8188 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2973: LD_INT 3
2975: PPUSH
2976: LD_INT 22
2978: PPUSH
2979: LD_INT 49
2981: PPUSH
2982: CALL 8066 0 3
2986: PUSH
2987: LD_INT 4
2989: LESS
2990: IFFALSE 3008
2992: PUSH
2993: LD_INT 31
2995: PPUSH
2996: LD_INT 3
2998: PPUSH
2999: CALL_OW 321
3003: PUSH
3004: LD_INT 2
3006: EQUAL
3007: AND
3008: IFFALSE 3031
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
3010: LD_VAR 0 7
3014: PPUSH
3015: LD_INT 22
3017: PPUSH
3018: LD_INT 1
3020: PPUSH
3021: LD_INT 3
3023: PPUSH
3024: LD_INT 49
3026: PPUSH
3027: CALL 8188 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3031: LD_EXP 9
3035: PUSH
3036: LD_INT 5
3038: PUSH
3039: LD_INT 6
3041: PUSH
3042: LD_INT 7
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: LIST
3049: PUSH
3050: LD_OWVAR 67
3054: ARRAY
3055: LESS
3056: IFFALSE 3106
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3058: LD_VAR 0 7
3062: PPUSH
3063: LD_INT 24
3065: PPUSH
3066: LD_INT 1
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 46
3074: PUSH
3075: LD_INT 45
3077: PUSH
3078: LD_INT 47
3080: PUSH
3081: LD_INT 46
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: PUSH
3090: LD_INT 1
3092: PPUSH
3093: LD_INT 4
3095: PPUSH
3096: CALL_OW 12
3100: ARRAY
3101: PPUSH
3102: CALL 8188 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3106: LD_INT 3
3108: PPUSH
3109: CALL 6206 0 1
3113: PPUSH
3114: CALL 5894 0 1
3118: PUSH
3119: LD_INT 1
3121: ARRAY
3122: PUSH
3123: LD_INT 250
3125: GREATER
3126: IFFALSE 3150
3128: PUSH
3129: LD_INT 3
3131: PPUSH
3132: CALL 6206 0 1
3136: PPUSH
3137: CALL 5894 0 1
3141: PUSH
3142: LD_INT 3
3144: ARRAY
3145: PUSH
3146: LD_INT 50
3148: GREATER
3149: AND
3150: IFFALSE 3168
3152: PUSH
3153: LD_INT 23
3155: PPUSH
3156: LD_INT 3
3158: PPUSH
3159: CALL_OW 321
3163: PUSH
3164: LD_INT 2
3166: EQUAL
3167: AND
3168: IFFALSE 3183
3170: PUSH
3171: LD_INT 3
3173: PPUSH
3174: CALL 11456 0 1
3178: PUSH
3179: LD_INT 0
3181: EQUAL
3182: AND
3183: IFFALSE 3219
3185: PUSH
3186: LD_INT 22
3188: PUSH
3189: LD_INT 3
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: PUSH
3196: LD_INT 34
3198: PUSH
3199: LD_INT 49
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PUSH
3215: LD_INT 3
3217: GREATER
3218: AND
3219: IFFALSE 3242
3221: PUSH
3222: LD_OWVAR 2
3226: PPUSH
3227: LD_INT 51
3229: PPUSH
3230: LD_INT 42
3232: PPUSH
3233: CALL 5531 0 3
3237: PUSH
3238: LD_INT 0
3240: EQUAL
3241: AND
3242: IFFALSE 3327
// begin for i = 1 to ru_mech do
3244: LD_ADDR_VAR 0 1
3248: PUSH
3249: DOUBLE
3250: LD_INT 1
3252: DEC
3253: ST_TO_ADDR
3254: LD_EXP 22
3258: PUSH
3259: FOR_TO
3260: IFFALSE 3325
// begin if IsInUnit ( ru_mech [ i ] ) then
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: CALL_OW 310
3277: IFFALSE 3296
// ComExitBuilding ( ru_mech [ i ] ) else
3279: LD_EXP 22
3283: PUSH
3284: LD_VAR 0 1
3288: ARRAY
3289: PPUSH
3290: CALL_OW 122
3294: GO 3323
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3296: LD_EXP 22
3300: PUSH
3301: LD_VAR 0 1
3305: ARRAY
3306: PPUSH
3307: LD_INT 37
3309: PPUSH
3310: LD_INT 51
3312: PPUSH
3313: LD_INT 43
3315: PPUSH
3316: LD_INT 0
3318: PPUSH
3319: CALL_OW 170
// end ;
3323: GO 3259
3325: POP
3326: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3327: LD_OWVAR 1
3331: PUSH
3332: LD_INT 94500
3334: PUSH
3335: LD_INT 84000
3337: PUSH
3338: LD_INT 71400
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: LIST
3345: PUSH
3346: LD_OWVAR 67
3350: ARRAY
3351: GREATEREQUAL
3352: IFFALSE 3408
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3354: LD_OWVAR 1
3358: PUSH
3359: LD_INT 18900
3361: PUSH
3362: LD_INT 16800
3364: PUSH
3365: LD_INT 14700
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: LIST
3372: PUSH
3373: LD_OWVAR 67
3377: ARRAY
3378: MOD
3379: PUSH
3380: LD_INT 0
3382: EQUAL
3383: IFFALSE 3408
// if ru_reserve then
3385: LD_EXP 9
3389: IFFALSE 3408
// begin ru_attack_list := ru_reserve ;
3391: LD_ADDR_EXP 10
3395: PUSH
3396: LD_EXP 9
3400: ST_TO_ADDR
// ru_reserve := [ ] ;
3401: LD_ADDR_EXP 9
3405: PUSH
3406: EMPTY
3407: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3408: LD_EXP 10
3412: IFFALSE 3516
// begin for i = 1 to ru_attack_list do
3414: LD_ADDR_VAR 0 1
3418: PUSH
3419: DOUBLE
3420: LD_INT 1
3422: DEC
3423: ST_TO_ADDR
3424: LD_EXP 10
3428: PUSH
3429: FOR_TO
3430: IFFALSE 3514
// if GetLives ( ru_attack_list [ i ] ) >= 250 then
3432: LD_EXP 10
3436: PUSH
3437: LD_VAR 0 1
3441: ARRAY
3442: PPUSH
3443: CALL_OW 256
3447: PUSH
3448: LD_INT 250
3450: GREATEREQUAL
3451: IFFALSE 3512
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3453: LD_EXP 10
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 81
3466: PUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_VAR 0 1
3476: ARRAY
3477: PPUSH
3478: CALL_OW 255
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PPUSH
3487: CALL_OW 69
3491: PPUSH
3492: LD_EXP 10
3496: PUSH
3497: LD_VAR 0 1
3501: ARRAY
3502: PPUSH
3503: CALL_OW 74
3507: PPUSH
3508: CALL_OW 115
3512: GO 3429
3514: POP
3515: POP
// end ; if GetBehemoth ( 3 ) then
3516: LD_INT 3
3518: PPUSH
3519: CALL 11456 0 1
3523: IFFALSE 3897
// begin if ru_mech >= 4 then
3525: LD_EXP 22
3529: PUSH
3530: LD_INT 4
3532: GREATEREQUAL
3533: IFFALSE 3584
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3535: LD_ADDR_EXP 15
3539: PUSH
3540: LD_EXP 22
3544: PUSH
3545: LD_INT 1
3547: ARRAY
3548: PUSH
3549: LD_EXP 22
3553: PUSH
3554: LD_INT 2
3556: ARRAY
3557: PUSH
3558: LD_EXP 22
3562: PUSH
3563: LD_INT 3
3565: ARRAY
3566: PUSH
3567: LD_EXP 22
3571: PUSH
3572: LD_INT 4
3574: ARRAY
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: ST_TO_ADDR
3582: GO 3594
// ru_behemoth_mechanic := ru_mech ;
3584: LD_ADDR_EXP 15
3588: PUSH
3589: LD_EXP 22
3593: ST_TO_ADDR
// for i = 1 to ru_mech do
3594: LD_ADDR_VAR 0 1
3598: PUSH
3599: DOUBLE
3600: LD_INT 1
3602: DEC
3603: ST_TO_ADDR
3604: LD_EXP 22
3608: PUSH
3609: FOR_TO
3610: IFFALSE 3666
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3612: LD_EXP 22
3616: PUSH
3617: LD_VAR 0 1
3621: ARRAY
3622: PPUSH
3623: CALL_OW 310
3627: IFFALSE 3647
3629: PUSH
3630: LD_EXP 22
3634: PUSH
3635: LD_VAR 0 1
3639: ARRAY
3640: PUSH
3641: LD_EXP 15
3645: IN
3646: AND
3647: IFFALSE 3664
// ComExitBuilding ( ru_mech [ i ] ) ;
3649: LD_EXP 22
3653: PUSH
3654: LD_VAR 0 1
3658: ARRAY
3659: PPUSH
3660: CALL_OW 122
3664: GO 3609
3666: POP
3667: POP
// if UnitsInside ( ru_fac ) = 0 then
3668: LD_INT 14
3670: PPUSH
3671: CALL_OW 313
3675: PUSH
3676: LD_INT 0
3678: EQUAL
3679: IFFALSE 3746
// begin InitHc_All ;
3681: CALL_OW 584
// for i := 1 to 5 do
3685: LD_ADDR_VAR 0 1
3689: PUSH
3690: DOUBLE
3691: LD_INT 1
3693: DEC
3694: ST_TO_ADDR
3695: LD_INT 5
3697: PUSH
3698: FOR_TO
3699: IFFALSE 3744
// begin uc_side := 3 ;
3701: LD_ADDR_OWVAR 20
3705: PUSH
3706: LD_INT 3
3708: ST_TO_ADDR
// uc_nation := 3 ;
3709: LD_ADDR_OWVAR 21
3713: PUSH
3714: LD_INT 3
3716: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3717: LD_INT 0
3719: PPUSH
3720: LD_INT 3
3722: PPUSH
3723: LD_INT 7
3725: PPUSH
3726: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3730: CALL_OW 44
3734: PPUSH
3735: LD_INT 14
3737: PPUSH
3738: CALL_OW 52
// end ;
3742: GO 3698
3744: POP
3745: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3746: LD_INT 12
3748: PPUSH
3749: LD_INT 22
3751: PUSH
3752: LD_INT 1
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: PUSH
3759: LD_INT 21
3761: PUSH
3762: LD_INT 3
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PPUSH
3773: CALL_OW 70
3777: PUSH
3778: LD_INT 0
3780: GREATER
3781: IFFALSE 3841
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3783: LD_INT 3
3785: PPUSH
3786: CALL 11456 0 1
3790: PUSH
3791: LD_INT 1
3793: ARRAY
3794: PPUSH
3795: LD_INT 21
3797: PUSH
3798: LD_INT 2
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 34
3807: PUSH
3808: LD_INT 49
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: PPUSH
3819: CALL_OW 69
3823: PPUSH
3824: LD_EXP 15
3828: PPUSH
3829: LD_INT 97
3831: PPUSH
3832: LD_INT 9
3834: PPUSH
3835: CALL 10947 0 5
3839: GO 3897
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3841: LD_INT 3
3843: PPUSH
3844: CALL 11456 0 1
3848: PUSH
3849: LD_INT 1
3851: ARRAY
3852: PPUSH
3853: LD_INT 21
3855: PUSH
3856: LD_INT 2
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: PUSH
3863: LD_INT 34
3865: PUSH
3866: LD_INT 49
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 69
3881: PPUSH
3882: LD_EXP 15
3886: PPUSH
3887: LD_INT 153
3889: PPUSH
3890: LD_INT 102
3892: PPUSH
3893: CALL 10947 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3897: LD_EXP 24
3901: PUSH
3902: LD_INT 0
3904: EQUAL
3905: IFFALSE 3923
3907: PUSH
3908: LD_INT 44
3910: PPUSH
3911: LD_INT 3
3913: PPUSH
3914: CALL_OW 321
3918: PUSH
3919: LD_INT 2
3921: EQUAL
3922: AND
3923: IFFALSE 3934
// ComChangeClassToBazooker ( ru_sold ) ;
3925: LD_EXP 20
3929: PPUSH
3930: CALL 9884 0 1
// if ru_bazz then
3934: LD_EXP 24
3938: IFFALSE 3952
// IntBazooka ( ru_bazz , 1 ) ;
3940: LD_EXP 24
3944: PPUSH
3945: LD_INT 1
3947: PPUSH
3948: CALL 9603 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3952: LD_INT 67
3954: PPUSH
3955: LD_INT 39
3957: PPUSH
3958: LD_INT 3
3960: PPUSH
3961: CALL_OW 440
3965: PUSH
3966: LD_INT 0
3968: EQUAL
3969: IFFALSE 3987
3971: PUSH
3972: LD_INT 20
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 321
3982: PUSH
3983: LD_INT 2
3985: EQUAL
3986: AND
3987: IFFALSE 4008
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3989: LD_EXP 23
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: LD_INT 67
4000: PPUSH
4001: LD_INT 39
4003: PPUSH
4004: CALL 9180 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
4008: LD_INT 89
4010: PPUSH
4011: LD_INT 66
4013: PPUSH
4014: LD_INT 3
4016: PPUSH
4017: CALL_OW 440
4021: PUSH
4022: LD_INT 0
4024: EQUAL
4025: IFFALSE 4046
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
4027: LD_EXP 23
4031: PUSH
4032: LD_INT 1
4034: ARRAY
4035: PPUSH
4036: LD_INT 87
4038: PPUSH
4039: LD_INT 60
4041: PPUSH
4042: CALL 9180 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4046: LD_INT 104
4048: PPUSH
4049: LD_INT 94
4051: PPUSH
4052: LD_INT 3
4054: PPUSH
4055: CALL_OW 440
4059: PUSH
4060: LD_INT 0
4062: EQUAL
4063: IFFALSE 4081
4065: PUSH
4066: LD_INT 20
4068: PPUSH
4069: LD_INT 3
4071: PPUSH
4072: CALL_OW 321
4076: PUSH
4077: LD_INT 2
4079: EQUAL
4080: AND
4081: IFFALSE 4102
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4083: LD_EXP 23
4087: PUSH
4088: LD_INT 1
4090: ARRAY
4091: PPUSH
4092: LD_INT 104
4094: PPUSH
4095: LD_INT 94
4097: PPUSH
4098: CALL 9180 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4102: LD_INT 3
4104: PPUSH
4105: LD_INT 24
4107: PPUSH
4108: LD_INT 53
4110: PPUSH
4111: CALL 8066 0 3
4115: PUSH
4116: LD_INT 1
4118: EQUAL
4119: IFFALSE 4127
4121: PUSH
4122: LD_EXP 18
4126: AND
4127: IFFALSE 4268
// begin need_buldozer := false ;
4129: LD_ADDR_EXP 18
4133: PUSH
4134: LD_INT 0
4136: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4137: LD_INT 3
4139: PPUSH
4140: LD_INT 24
4142: PPUSH
4143: LD_INT 53
4145: PPUSH
4146: CALL 8066 0 3
4150: PUSH
4151: LD_INT 1
4153: ARRAY
4154: PPUSH
4155: LD_INT 67
4157: PPUSH
4158: LD_INT 39
4160: PPUSH
4161: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4165: LD_INT 3
4167: PPUSH
4168: LD_INT 24
4170: PPUSH
4171: LD_INT 53
4173: PPUSH
4174: CALL 8066 0 3
4178: PUSH
4179: LD_INT 1
4181: ARRAY
4182: PPUSH
4183: LD_INT 71
4185: PPUSH
4186: LD_INT 10
4188: PPUSH
4189: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4193: LD_INT 3
4195: PPUSH
4196: LD_INT 24
4198: PPUSH
4199: LD_INT 53
4201: PPUSH
4202: CALL 8066 0 3
4206: PUSH
4207: LD_INT 1
4209: ARRAY
4210: PPUSH
4211: LD_INT 15
4213: PPUSH
4214: CALL 5633 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4218: LD_INT 3
4220: PPUSH
4221: LD_INT 24
4223: PPUSH
4224: LD_INT 53
4226: PPUSH
4227: CALL 8066 0 3
4231: PUSH
4232: LD_INT 1
4234: ARRAY
4235: PPUSH
4236: LD_INT 350
4238: PPUSH
4239: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4243: LD_INT 3
4245: PPUSH
4246: LD_INT 24
4248: PPUSH
4249: LD_INT 53
4251: PPUSH
4252: CALL 8066 0 3
4256: PUSH
4257: LD_INT 1
4259: ARRAY
4260: PPUSH
4261: LD_INT 14
4263: PPUSH
4264: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4268: LD_INT 67
4270: PPUSH
4271: LD_INT 39
4273: PPUSH
4274: LD_INT 3
4276: PPUSH
4277: CALL_OW 440
4281: IFFALSE 4299
4283: PUSH
4284: LD_INT 67
4286: PPUSH
4287: LD_INT 39
4289: PPUSH
4290: CALL_OW 428
4294: PUSH
4295: LD_INT 0
4297: EQUAL
4298: AND
4299: IFFALSE 4322
4301: PUSH
4302: LD_INT 79
4304: PPUSH
4305: LD_INT 45
4307: PPUSH
4308: CALL_OW 428
4312: PPUSH
4313: CALL_OW 266
4317: PUSH
4318: LD_INT 0
4320: EQUAL
4321: AND
4322: IFFALSE 4343
4324: PUSH
4325: LD_INT 1
4327: PPUSH
4328: LD_INT 79
4330: PPUSH
4331: LD_INT 45
4333: PPUSH
4334: CALL 5531 0 3
4338: PUSH
4339: LD_INT 0
4341: EQUAL
4342: AND
4343: IFFALSE 4446
// begin for i = 1 to ru_eng do
4345: LD_ADDR_VAR 0 1
4349: PUSH
4350: DOUBLE
4351: LD_INT 1
4353: DEC
4354: ST_TO_ADDR
4355: LD_EXP 21
4359: PUSH
4360: FOR_TO
4361: IFFALSE 4444
// if IsInUnit ( ru_eng [ i ] ) then
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: CALL_OW 310
4378: IFFALSE 4397
// ComExitBuilding ( ru_eng [ i ] ) else
4380: LD_EXP 21
4384: PUSH
4385: LD_VAR 0 1
4389: ARRAY
4390: PPUSH
4391: CALL_OW 122
4395: GO 4442
// if not HasTask ( ru_eng [ i ] ) then
4397: LD_EXP 21
4401: PUSH
4402: LD_VAR 0 1
4406: ARRAY
4407: PPUSH
4408: CALL_OW 314
4412: NOT
4413: IFFALSE 4442
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4415: LD_EXP 21
4419: PUSH
4420: LD_VAR 0 1
4424: ARRAY
4425: PPUSH
4426: LD_INT 30
4428: PPUSH
4429: LD_INT 67
4431: PPUSH
4432: LD_INT 39
4434: PPUSH
4435: LD_INT 3
4437: PPUSH
4438: CALL_OW 145
4442: GO 4360
4444: POP
4445: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4446: LD_INT 1
4448: PPUSH
4449: LD_INT 79
4451: PPUSH
4452: LD_INT 45
4454: PPUSH
4455: CALL 5531 0 3
4459: PUSH
4460: LD_INT 0
4462: EQUAL
4463: IFFALSE 4661
// begin if HexInfo ( 79 , 45 ) = 0 then
4465: LD_INT 79
4467: PPUSH
4468: LD_INT 45
4470: PPUSH
4471: CALL_OW 428
4475: PUSH
4476: LD_INT 0
4478: EQUAL
4479: IFFALSE 4501
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4481: LD_EXP 21
4485: PPUSH
4486: LD_INT 79
4488: PPUSH
4489: LD_INT 45
4491: PPUSH
4492: LD_INT 3
4494: PPUSH
4495: CALL 7065 0 4
4499: GO 4661
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4501: LD_INT 89
4503: PPUSH
4504: LD_INT 66
4506: PPUSH
4507: CALL_OW 428
4511: PUSH
4512: LD_INT 0
4514: EQUAL
4515: IFFALSE 4532
4517: PUSH
4518: LD_INT 89
4520: PPUSH
4521: LD_INT 66
4523: PPUSH
4524: LD_INT 3
4526: PPUSH
4527: CALL_OW 440
4531: AND
4532: IFFALSE 4661
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4534: LD_INT 79
4536: PPUSH
4537: LD_INT 45
4539: PPUSH
4540: CALL_OW 428
4544: PPUSH
4545: CALL_OW 274
4549: PPUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_INT 100
4555: PPUSH
4556: CALL_OW 277
// for i = 1 to ru_eng do
4560: LD_ADDR_VAR 0 1
4564: PUSH
4565: DOUBLE
4566: LD_INT 1
4568: DEC
4569: ST_TO_ADDR
4570: LD_EXP 21
4574: PUSH
4575: FOR_TO
4576: IFFALSE 4659
// if IsInUnit ( ru_eng [ i ] ) then
4578: LD_EXP 21
4582: PUSH
4583: LD_VAR 0 1
4587: ARRAY
4588: PPUSH
4589: CALL_OW 310
4593: IFFALSE 4612
// ComExitBuilding ( ru_eng [ i ] ) else
4595: LD_EXP 21
4599: PUSH
4600: LD_VAR 0 1
4604: ARRAY
4605: PPUSH
4606: CALL_OW 122
4610: GO 4657
// if not HasTask ( ru_eng [ i ] ) then
4612: LD_EXP 21
4616: PUSH
4617: LD_VAR 0 1
4621: ARRAY
4622: PPUSH
4623: CALL_OW 314
4627: NOT
4628: IFFALSE 4657
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4630: LD_EXP 21
4634: PUSH
4635: LD_VAR 0 1
4639: ARRAY
4640: PPUSH
4641: LD_INT 29
4643: PPUSH
4644: LD_INT 89
4646: PPUSH
4647: LD_INT 66
4649: PPUSH
4650: LD_INT 3
4652: PPUSH
4653: CALL_OW 145
4657: GO 4575
4659: POP
4660: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4661: LD_INT 3
4663: PPUSH
4664: LD_INT 29
4666: PPUSH
4667: CALL 6297 0 2
4671: PUSH
4672: LD_INT 0
4674: EQUAL
4675: IFFALSE 4696
4677: PUSH
4678: LD_INT 1
4680: PPUSH
4681: LD_INT 36
4683: PPUSH
4684: LD_INT 6
4686: PPUSH
4687: CALL 5531 0 3
4691: PUSH
4692: LD_INT 0
4694: EQUAL
4695: AND
4696: IFFALSE 4715
4698: PUSH
4699: LD_INT 3
4701: PPUSH
4702: CALL 6206 0 1
4706: PPUSH
4707: LD_INT 29
4709: PPUSH
4710: CALL 5776 0 2
4714: AND
4715: IFFALSE 4818
// begin for i = 1 to ru_eng do
4717: LD_ADDR_VAR 0 1
4721: PUSH
4722: DOUBLE
4723: LD_INT 1
4725: DEC
4726: ST_TO_ADDR
4727: LD_EXP 21
4731: PUSH
4732: FOR_TO
4733: IFFALSE 4816
// begin if IsInUnit ( ru_eng [ i ] ) then
4735: LD_EXP 21
4739: PUSH
4740: LD_VAR 0 1
4744: ARRAY
4745: PPUSH
4746: CALL_OW 310
4750: IFFALSE 4769
// ComExitBuilding ( ru_eng [ i ] ) else
4752: LD_EXP 21
4756: PUSH
4757: LD_VAR 0 1
4761: ARRAY
4762: PPUSH
4763: CALL_OW 122
4767: GO 4814
// if not HasTask ( ru_eng [ i ] ) then
4769: LD_EXP 21
4773: PUSH
4774: LD_VAR 0 1
4778: ARRAY
4779: PPUSH
4780: CALL_OW 314
4784: NOT
4785: IFFALSE 4814
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4787: LD_EXP 21
4791: PUSH
4792: LD_VAR 0 1
4796: ARRAY
4797: PPUSH
4798: LD_INT 29
4800: PPUSH
4801: LD_INT 33
4803: PPUSH
4804: LD_INT 4
4806: PPUSH
4807: LD_INT 0
4809: PPUSH
4810: CALL_OW 205
// end ; end ;
4814: GO 4732
4816: POP
4817: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4818: LD_EXP 21
4822: IFFALSE 4840
4824: PUSH
4825: LD_INT 79
4827: PPUSH
4828: LD_INT 45
4830: PPUSH
4831: CALL_OW 428
4835: PUSH
4836: LD_INT 0
4838: GREATER
4839: AND
4840: IFFALSE 4863
4842: PUSH
4843: LD_INT 79
4845: PPUSH
4846: LD_INT 45
4848: PPUSH
4849: CALL_OW 428
4853: PPUSH
4854: CALL_OW 266
4858: PUSH
4859: LD_INT 0
4861: EQUAL
4862: AND
4863: IFFALSE 5027
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4865: LD_INT 79
4867: PPUSH
4868: LD_INT 45
4870: PPUSH
4871: CALL_OW 428
4875: PPUSH
4876: CALL_OW 255
4880: PUSH
4881: LD_INT 3
4883: EQUAL
4884: IFFALSE 4905
4886: PUSH
4887: LD_INT 1
4889: PPUSH
4890: LD_INT 79
4892: PPUSH
4893: LD_INT 45
4895: PPUSH
4896: CALL 5531 0 3
4900: PUSH
4901: LD_INT 0
4903: EQUAL
4904: AND
4905: IFFALSE 4936
4907: PUSH
4908: LD_INT 79
4910: PPUSH
4911: LD_INT 45
4913: PPUSH
4914: CALL_OW 428
4918: PPUSH
4919: CALL_OW 274
4923: PPUSH
4924: LD_INT 3
4926: PPUSH
4927: CALL_OW 275
4931: PUSH
4932: LD_INT 10
4934: GREATEREQUAL
4935: AND
4936: IFFALSE 5027
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4938: LD_EXP 21
4942: PUSH
4943: LD_INT 1
4945: ARRAY
4946: PPUSH
4947: CALL_OW 310
4951: IFFALSE 4968
// ComExitBuilding ( ru_eng [ 1 ] ) else
4953: LD_EXP 21
4957: PUSH
4958: LD_INT 1
4960: ARRAY
4961: PPUSH
4962: CALL_OW 122
4966: GO 5027
// if not HasTask ( ru_eng [ 1 ] ) then
4968: LD_EXP 21
4972: PUSH
4973: LD_INT 1
4975: ARRAY
4976: PPUSH
4977: CALL_OW 314
4981: NOT
4982: IFFALSE 5027
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4984: LD_EXP 21
4988: PUSH
4989: LD_INT 1
4991: ARRAY
4992: PPUSH
4993: LD_INT 79
4995: PPUSH
4996: LD_INT 45
4998: PPUSH
4999: CALL_OW 428
5003: PPUSH
5004: LD_INT 3
5006: PPUSH
5007: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
5011: LD_EXP 21
5015: PUSH
5016: LD_INT 1
5018: ARRAY
5019: PPUSH
5020: LD_INT 2
5022: PPUSH
5023: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
5027: LD_EXP 21
5031: PUSH
5032: LD_INT 2
5034: GREATER
5035: IFFALSE 5053
5037: PUSH
5038: LD_INT 79
5040: PPUSH
5041: LD_INT 45
5043: PPUSH
5044: CALL_OW 428
5048: PUSH
5049: LD_INT 0
5051: GREATER
5052: AND
5053: IFFALSE 5076
5055: PUSH
5056: LD_INT 79
5058: PPUSH
5059: LD_INT 45
5061: PPUSH
5062: CALL_OW 428
5066: PPUSH
5067: CALL_OW 266
5071: PUSH
5072: LD_INT 0
5074: EQUAL
5075: AND
5076: IFFALSE 5240
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5078: LD_INT 79
5080: PPUSH
5081: LD_INT 45
5083: PPUSH
5084: CALL_OW 428
5088: PPUSH
5089: CALL_OW 255
5093: PUSH
5094: LD_INT 3
5096: EQUAL
5097: IFFALSE 5118
5099: PUSH
5100: LD_INT 1
5102: PPUSH
5103: LD_INT 79
5105: PPUSH
5106: LD_INT 45
5108: PPUSH
5109: CALL 5531 0 3
5113: PUSH
5114: LD_INT 0
5116: EQUAL
5117: AND
5118: IFFALSE 5149
5120: PUSH
5121: LD_INT 79
5123: PPUSH
5124: LD_INT 45
5126: PPUSH
5127: CALL_OW 428
5131: PPUSH
5132: CALL_OW 274
5136: PPUSH
5137: LD_INT 1
5139: PPUSH
5140: CALL_OW 275
5144: PUSH
5145: LD_INT 20
5147: GREATER
5148: AND
5149: IFFALSE 5240
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5151: LD_EXP 21
5155: PUSH
5156: LD_INT 2
5158: ARRAY
5159: PPUSH
5160: CALL_OW 310
5164: IFFALSE 5181
// ComExitBuilding ( ru_eng [ 2 ] ) else
5166: LD_EXP 21
5170: PUSH
5171: LD_INT 2
5173: ARRAY
5174: PPUSH
5175: CALL_OW 122
5179: GO 5240
// if not HasTask ( ru_eng [ 2 ] ) then
5181: LD_EXP 21
5185: PUSH
5186: LD_INT 2
5188: ARRAY
5189: PPUSH
5190: CALL_OW 314
5194: NOT
5195: IFFALSE 5240
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5197: LD_EXP 21
5201: PUSH
5202: LD_INT 2
5204: ARRAY
5205: PPUSH
5206: LD_INT 79
5208: PPUSH
5209: LD_INT 45
5211: PPUSH
5212: CALL_OW 428
5216: PPUSH
5217: LD_INT 1
5219: PPUSH
5220: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5224: LD_EXP 21
5228: PUSH
5229: LD_INT 2
5231: ARRAY
5232: PPUSH
5233: LD_INT 2
5235: PPUSH
5236: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5240: LD_INT 1
5242: PPUSH
5243: LD_INT 59
5245: PPUSH
5246: LD_INT 60
5248: PPUSH
5249: CALL 5531 0 3
5253: PUSH
5254: LD_INT 0
5256: EQUAL
5257: IFFALSE 5278
5259: PUSH
5260: LD_INT 1
5262: PPUSH
5263: LD_INT 67
5265: PPUSH
5266: LD_INT 76
5268: PPUSH
5269: CALL 5531 0 3
5273: PUSH
5274: LD_INT 0
5276: EQUAL
5277: AND
5278: IFFALSE 5299
5280: PUSH
5281: LD_INT 1
5283: PPUSH
5284: LD_INT 79
5286: PPUSH
5287: LD_INT 100
5289: PPUSH
5290: CALL 5531 0 3
5294: PUSH
5295: LD_INT 0
5297: EQUAL
5298: AND
5299: IFFALSE 5311
// CollectCrates ( 3 , west_crates ) ;
5301: LD_INT 3
5303: PPUSH
5304: LD_INT 13
5306: PPUSH
5307: CALL 11500 0 2
// end ;
5311: PPOPN 10
5313: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5314: LD_OWVAR 1
5318: PUSH
5319: LD_INT 111300
5321: LESSEQUAL
5322: IFTRUE 5331
5324: PUSH
5325: LD_EXP 30
5329: NOT
5330: OR
5331: IFFALSE 5528
5333: GO 5335
5335: DISABLE
5336: LD_INT 0
5338: PPUSH
// begin enable ;
5339: ENABLE
// uc_nation := 3 ;
5340: LD_ADDR_OWVAR 21
5344: PUSH
5345: LD_INT 3
5347: ST_TO_ADDR
// uc_side := 3 ;
5348: LD_ADDR_OWVAR 20
5352: PUSH
5353: LD_INT 3
5355: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5356: LD_ADDR_OWVAR 37
5360: PUSH
5361: LD_INT 22
5363: ST_TO_ADDR
// vc_engine := engine_siberite ;
5364: LD_ADDR_OWVAR 39
5368: PUSH
5369: LD_INT 3
5371: ST_TO_ADDR
// vc_control := control_computer ;
5372: LD_ADDR_OWVAR 38
5376: PUSH
5377: LD_INT 3
5379: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5380: LD_ADDR_OWVAR 40
5384: PUSH
5385: LD_INT 51
5387: ST_TO_ADDR
// veh := CreateVehicle ;
5388: LD_ADDR_VAR 0 1
5392: PUSH
5393: CALL_OW 45
5397: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5398: LD_VAR 0 1
5402: PPUSH
5403: LD_INT 4
5405: PPUSH
5406: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5410: LD_VAR 0 1
5414: PPUSH
5415: LD_INT 10
5417: PPUSH
5418: LD_INT 0
5420: PPUSH
5421: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5425: LD_VAR 0 1
5429: PPUSH
5430: LD_INT 1
5432: PUSH
5433: LD_INT 2
5435: PUSH
5436: LD_INT 3
5438: PUSH
5439: LD_INT 2
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 1
5450: PPUSH
5451: LD_INT 4
5453: PPUSH
5454: CALL_OW 12
5458: ARRAY
5459: PPUSH
5460: LD_INT 100
5462: PPUSH
5463: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5467: LD_VAR 0 1
5471: PPUSH
5472: LD_INT 2
5474: PPUSH
5475: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5479: LD_VAR 0 1
5483: PPUSH
5484: LD_INT 10
5486: PPUSH
5487: CALL_OW 173
// Wait ( 0 0$10 ) ;
5491: LD_INT 350
5493: PPUSH
5494: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5498: LD_INT 35
5500: PPUSH
5501: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5505: LD_VAR 0 1
5509: PPUSH
5510: LD_INT 10
5512: PPUSH
5513: CALL_OW 308
5517: IFFALSE 5498
// RemoveUnit ( veh ) ;
5519: LD_VAR 0 1
5523: PPUSH
5524: CALL_OW 64
// end ; end_of_file
5528: PPOPN 1
5530: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5531: LD_INT 0
5533: PPUSH
5534: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_INT 22
5542: PUSH
5543: LD_VAR 0 1
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: PPUSH
5552: CALL_OW 69
5556: PPUSH
5557: LD_VAR 0 2
5561: PPUSH
5562: LD_VAR 0 3
5566: PPUSH
5567: CALL_OW 73
5571: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5572: LD_ADDR_VAR 0 4
5576: PUSH
5577: LD_VAR 0 5
5581: PPUSH
5582: LD_VAR 0 2
5586: PPUSH
5587: LD_VAR 0 3
5591: PPUSH
5592: CALL_OW 297
5596: PUSH
5597: LD_INT 15
5599: LESS
5600: IFTRUE 5627
5602: PUSH
5603: LD_INT 2
5605: PPUSH
5606: LD_INT 22
5608: PUSH
5609: LD_VAR 0 1
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PPUSH
5618: CALL_OW 70
5622: PUSH
5623: LD_INT 0
5625: GREATER
5626: OR
5627: ST_TO_ADDR
// end ;
5628: LD_VAR 0 4
5632: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5633: LD_INT 0
5635: PPUSH
5636: PPUSH
// area = ListEnvironmentArea ( area ) ;
5637: LD_ADDR_VAR 0 2
5641: PUSH
5642: LD_VAR 0 2
5646: PPUSH
5647: CALL_OW 353
5651: ST_TO_ADDR
// if bulldozer > 0 then
5652: LD_VAR 0 1
5656: PUSH
5657: LD_INT 0
5659: GREATER
5660: IFFALSE 5771
// for i = 1 to area do
5662: LD_ADDR_VAR 0 4
5666: PUSH
5667: DOUBLE
5668: LD_INT 1
5670: DEC
5671: ST_TO_ADDR
5672: LD_VAR 0 2
5676: PUSH
5677: FOR_TO
5678: IFFALSE 5769
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 4
5689: ARRAY
5690: PUSH
5691: LD_INT 1
5693: ARRAY
5694: PPUSH
5695: LD_VAR 0 2
5699: PUSH
5700: LD_VAR 0 4
5704: ARRAY
5705: PUSH
5706: LD_INT 2
5708: ARRAY
5709: PPUSH
5710: CALL_OW 351
5714: IFFALSE 5767
// if not HasTask ( bulldozer ) then
5716: LD_VAR 0 1
5720: PPUSH
5721: CALL_OW 314
5725: NOT
5726: IFFALSE 5767
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5728: LD_VAR 0 1
5732: PPUSH
5733: LD_VAR 0 2
5737: PUSH
5738: LD_VAR 0 4
5742: ARRAY
5743: PUSH
5744: LD_INT 1
5746: ARRAY
5747: PPUSH
5748: LD_VAR 0 2
5752: PUSH
5753: LD_VAR 0 4
5757: ARRAY
5758: PUSH
5759: LD_INT 2
5761: ARRAY
5762: PPUSH
5763: CALL_OW 171
5767: GO 5677
5769: POP
5770: POP
// end ;
5771: LD_VAR 0 3
5775: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5776: LD_INT 0
5778: PPUSH
5779: PPUSH
5780: PPUSH
// pom := GetBase ( bdepot ) ;
5781: LD_ADDR_VAR 0 4
5785: PUSH
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 274
5795: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5796: LD_ADDR_VAR 0 5
5800: PUSH
5801: LD_VAR 0 2
5805: PPUSH
5806: LD_VAR 0 1
5810: PPUSH
5811: CALL_OW 248
5815: PPUSH
5816: CALL_OW 450
5820: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5821: LD_VAR 0 4
5825: PPUSH
5826: LD_INT 1
5828: PPUSH
5829: CALL_OW 275
5833: PUSH
5834: LD_VAR 0 5
5838: PUSH
5839: LD_INT 1
5841: ARRAY
5842: GREATEREQUAL
5843: IFFALSE 5869
5845: PUSH
5846: LD_VAR 0 4
5850: PPUSH
5851: LD_INT 3
5853: PPUSH
5854: CALL_OW 275
5858: PUSH
5859: LD_VAR 0 5
5863: PUSH
5864: LD_INT 3
5866: ARRAY
5867: GREATEREQUAL
5868: AND
5869: IFFALSE 5881
// result := true else
5871: LD_ADDR_VAR 0 3
5875: PUSH
5876: LD_INT 1
5878: ST_TO_ADDR
5879: GO 5889
// result := false ;
5881: LD_ADDR_VAR 0 3
5885: PUSH
5886: LD_INT 0
5888: ST_TO_ADDR
// end ;
5889: LD_VAR 0 3
5893: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5894: LD_INT 0
5896: PPUSH
5897: PPUSH
5898: PPUSH
// pom := GetBase ( bdepot ) ;
5899: LD_ADDR_VAR 0 3
5903: PUSH
5904: LD_VAR 0 1
5908: PPUSH
5909: CALL_OW 274
5913: ST_TO_ADDR
// sor := [ ] ;
5914: LD_ADDR_VAR 0 4
5918: PUSH
5919: EMPTY
5920: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5921: LD_ADDR_VAR 0 4
5925: PUSH
5926: LD_VAR 0 4
5930: PUSH
5931: LD_VAR 0 3
5935: PPUSH
5936: LD_INT 1
5938: PPUSH
5939: CALL_OW 275
5943: ADD
5944: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5945: LD_ADDR_VAR 0 4
5949: PUSH
5950: LD_VAR 0 4
5954: PUSH
5955: LD_VAR 0 3
5959: PPUSH
5960: LD_INT 2
5962: PPUSH
5963: CALL_OW 275
5967: ADD
5968: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5969: LD_ADDR_VAR 0 4
5973: PUSH
5974: LD_VAR 0 4
5978: PUSH
5979: LD_VAR 0 3
5983: PPUSH
5984: LD_INT 3
5986: PPUSH
5987: CALL_OW 275
5991: ADD
5992: ST_TO_ADDR
// result := sor ;
5993: LD_ADDR_VAR 0 2
5997: PUSH
5998: LD_VAR 0 4
6002: ST_TO_ADDR
// end ;
6003: LD_VAR 0 2
6007: RET
// export function Hex ( x , y ) ; begin
6008: LD_INT 0
6010: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
6011: LD_VAR 0 1
6015: PPUSH
6016: LD_VAR 0 2
6020: PPUSH
6021: CALL_OW 488
6025: IFFALSE 6047
6027: PUSH
6028: LD_VAR 0 1
6032: PPUSH
6033: LD_VAR 0 2
6037: PPUSH
6038: CALL_OW 428
6042: PUSH
6043: LD_INT 0
6045: EQUAL
6046: AND
6047: IFFALSE 6059
// result := true else
6049: LD_ADDR_VAR 0 3
6053: PUSH
6054: LD_INT 1
6056: ST_TO_ADDR
6057: GO 6067
// result := false ;
6059: LD_ADDR_VAR 0 3
6063: PUSH
6064: LD_INT 0
6066: ST_TO_ADDR
// end ;
6067: LD_VAR 0 3
6071: RET
// export function NeedBuilding ( side , btype ) ; begin
6072: LD_INT 0
6074: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
6075: LD_INT 22
6077: PUSH
6078: LD_VAR 0 1
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 30
6089: PUSH
6090: LD_VAR 0 2
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 3
6101: PUSH
6102: LD_INT 57
6104: PUSH
6105: EMPTY
6106: LIST
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: LIST
6116: PPUSH
6117: CALL_OW 69
6121: PUSH
6122: LD_INT 0
6124: EQUAL
6125: IFFALSE 6137
// result := true else
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: LD_INT 1
6134: ST_TO_ADDR
6135: GO 6145
// result := false ;
6137: LD_ADDR_VAR 0 3
6141: PUSH
6142: LD_INT 0
6144: ST_TO_ADDR
// end ;
6145: LD_VAR 0 3
6149: RET
// export function NeedBase ( side ) ; begin
6150: LD_INT 0
6152: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6153: LD_VAR 0 1
6157: PPUSH
6158: LD_INT 0
6160: PPUSH
6161: CALL 6072 0 2
6165: IFFALSE 6181
6167: PUSH
6168: LD_VAR 0 1
6172: PPUSH
6173: LD_INT 1
6175: PPUSH
6176: CALL 6072 0 2
6180: AND
6181: IFFALSE 6193
// result := true else
6183: LD_ADDR_VAR 0 2
6187: PUSH
6188: LD_INT 1
6190: ST_TO_ADDR
6191: GO 6201
// result := false ;
6193: LD_ADDR_VAR 0 2
6197: PUSH
6198: LD_INT 0
6200: ST_TO_ADDR
// end ;
6201: LD_VAR 0 2
6205: RET
// export function MyBase ( side ) ; begin
6206: LD_INT 0
6208: PPUSH
// if not NeedBase ( side ) then
6209: LD_VAR 0 1
6213: PPUSH
6214: CALL 6150 0 1
6218: NOT
6219: IFFALSE 6284
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6221: LD_ADDR_VAR 0 2
6225: PUSH
6226: LD_INT 22
6228: PUSH
6229: LD_VAR 0 1
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: LD_INT 2
6240: PUSH
6241: LD_INT 30
6243: PUSH
6244: LD_INT 0
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 30
6253: PUSH
6254: LD_INT 1
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PUSH
6270: EMPTY
6271: LIST
6272: PPUSH
6273: CALL_OW 69
6277: PUSH
6278: LD_INT 1
6280: ARRAY
6281: ST_TO_ADDR
6282: GO 6292
// result := false ;
6284: LD_ADDR_VAR 0 2
6288: PUSH
6289: LD_INT 0
6291: ST_TO_ADDR
// end ;
6292: LD_VAR 0 2
6296: RET
// export function GetBuilding ( side , btype ) ; begin
6297: LD_INT 0
6299: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6300: LD_INT 22
6302: PUSH
6303: LD_VAR 0 1
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: LD_INT 30
6314: PUSH
6315: LD_VAR 0 2
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PPUSH
6328: CALL_OW 69
6332: PUSH
6333: LD_INT 0
6335: GREATER
6336: IFFALSE 6378
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6338: LD_ADDR_VAR 0 3
6342: PUSH
6343: LD_INT 22
6345: PUSH
6346: LD_VAR 0 1
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: PUSH
6355: LD_INT 30
6357: PUSH
6358: LD_VAR 0 2
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PPUSH
6371: CALL_OW 69
6375: ST_TO_ADDR
6376: GO 6386
// result := false ;
6378: LD_ADDR_VAR 0 3
6382: PUSH
6383: LD_INT 0
6385: ST_TO_ADDR
// end ;
6386: LD_VAR 0 3
6390: RET
// export function GetCrates ( side ) ; begin
6391: LD_INT 0
6393: PPUSH
// result := 0 ;
6394: LD_ADDR_VAR 0 2
6398: PUSH
6399: LD_INT 0
6401: ST_TO_ADDR
// if MyBase ( side ) then
6402: LD_VAR 0 1
6406: PPUSH
6407: CALL 6206 0 1
6411: IFFALSE 6441
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6413: LD_ADDR_VAR 0 2
6417: PUSH
6418: LD_VAR 0 1
6422: PPUSH
6423: CALL 6206 0 1
6427: PPUSH
6428: CALL_OW 274
6432: PPUSH
6433: LD_INT 1
6435: PPUSH
6436: CALL_OW 275
6440: ST_TO_ADDR
// end ;
6441: LD_VAR 0 2
6445: RET
// export function GetLabs ( side ) ; begin
6446: LD_INT 0
6448: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: LD_INT 22
6456: PUSH
6457: LD_VAR 0 1
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: LD_INT 2
6468: PUSH
6469: LD_INT 30
6471: PUSH
6472: LD_INT 6
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 30
6481: PUSH
6482: LD_INT 8
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PUSH
6489: LD_INT 30
6491: PUSH
6492: LD_INT 7
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: EMPTY
6510: LIST
6511: PPUSH
6512: CALL_OW 69
6516: ST_TO_ADDR
// end ;
6517: LD_VAR 0 2
6521: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
6526: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6527: LD_ADDR_VAR 0 3
6531: PUSH
6532: LD_VAR 0 1
6536: PPUSH
6537: LD_INT 1
6539: PPUSH
6540: CALL_OW 268
6544: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6545: LD_ADDR_VAR 0 4
6549: PUSH
6550: LD_VAR 0 1
6554: PPUSH
6555: LD_INT 2
6557: PPUSH
6558: CALL_OW 268
6562: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6563: LD_ADDR_VAR 0 2
6567: PUSH
6568: LD_VAR 0 3
6572: PUSH
6573: LD_VAR 0 4
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: ST_TO_ADDR
// end ;
6582: LD_VAR 0 2
6586: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6587: LD_INT 0
6589: PPUSH
6590: PPUSH
// result := false ;
6591: LD_ADDR_VAR 0 3
6595: PUSH
6596: LD_INT 0
6598: ST_TO_ADDR
// for i = 1 to tlist do
6599: LD_ADDR_VAR 0 4
6603: PUSH
6604: DOUBLE
6605: LD_INT 1
6607: DEC
6608: ST_TO_ADDR
6609: LD_VAR 0 2
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6655
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6617: LD_VAR 0 2
6621: PUSH
6622: LD_VAR 0 4
6626: ARRAY
6627: PPUSH
6628: LD_VAR 0 1
6632: PPUSH
6633: CALL_OW 321
6637: PUSH
6638: LD_INT 2
6640: NONEQUAL
6641: IFFALSE 6653
// begin result := true ;
6643: LD_ADDR_VAR 0 3
6647: PUSH
6648: LD_INT 1
6650: ST_TO_ADDR
// break ;
6651: GO 6655
// end ;
6653: GO 6614
6655: POP
6656: POP
// end ;
6657: LD_VAR 0 3
6661: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6662: LD_INT 0
6664: PPUSH
6665: PPUSH
6666: PPUSH
6667: PPUSH
6668: PPUSH
6669: PPUSH
6670: PPUSH
6671: PPUSH
// lab := GetLabs ( side ) ;
6672: LD_ADDR_VAR 0 5
6676: PUSH
6677: LD_VAR 0 1
6681: PPUSH
6682: CALL 6446 0 1
6686: ST_TO_ADDR
// tmp := 0 ;
6687: LD_ADDR_VAR 0 7
6691: PUSH
6692: LD_INT 0
6694: ST_TO_ADDR
// list := [ ] ;
6695: LD_ADDR_VAR 0 8
6699: PUSH
6700: EMPTY
6701: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6702: LD_ADDR_VAR 0 10
6706: PUSH
6707: LD_INT 35
6709: PUSH
6710: LD_INT 45
6712: PUSH
6713: LD_INT 46
6715: PUSH
6716: LD_INT 47
6718: PUSH
6719: LD_INT 1
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: LD_INT 48
6727: PUSH
6728: LD_INT 49
6730: PUSH
6731: LD_INT 50
6733: PUSH
6734: LD_INT 20
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: ST_TO_ADDR
// for i = 1 to tlist do
6749: LD_ADDR_VAR 0 4
6753: PUSH
6754: DOUBLE
6755: LD_INT 1
6757: DEC
6758: ST_TO_ADDR
6759: LD_VAR 0 2
6763: PUSH
6764: FOR_TO
6765: IFFALSE 6817
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6767: LD_VAR 0 2
6771: PUSH
6772: LD_VAR 0 4
6776: ARRAY
6777: PPUSH
6778: LD_VAR 0 1
6782: PPUSH
6783: CALL_OW 321
6787: PUSH
6788: LD_INT 2
6790: NONEQUAL
6791: IFFALSE 6815
// list := list ^ tlist [ i ] ;
6793: LD_ADDR_VAR 0 8
6797: PUSH
6798: LD_VAR 0 8
6802: PUSH
6803: LD_VAR 0 2
6807: PUSH
6808: LD_VAR 0 4
6812: ARRAY
6813: ADD
6814: ST_TO_ADDR
6815: GO 6764
6817: POP
6818: POP
// if list then
6819: LD_VAR 0 8
6823: IFFALSE 6990
// begin for i = 1 to lab do
6825: LD_ADDR_VAR 0 4
6829: PUSH
6830: DOUBLE
6831: LD_INT 1
6833: DEC
6834: ST_TO_ADDR
6835: LD_VAR 0 5
6839: PUSH
6840: FOR_TO
6841: IFFALSE 6913
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6843: LD_VAR 0 8
6847: PUSH
6848: LD_INT 1
6850: ARRAY
6851: PUSH
6852: LD_VAR 0 10
6856: IN
6857: IFTRUE 6891
6859: PUSH
6860: LD_VAR 0 8
6864: PUSH
6865: LD_INT 1
6867: ARRAY
6868: PPUSH
6869: CALL_OW 481
6873: PUSH
6874: LD_VAR 0 5
6878: PUSH
6879: LD_VAR 0 4
6883: ARRAY
6884: PPUSH
6885: CALL 6522 0 1
6889: IN
6890: OR
6891: IFFALSE 6911
// begin mylab := lab [ i ] ;
6893: LD_ADDR_VAR 0 9
6897: PUSH
6898: LD_VAR 0 5
6902: PUSH
6903: LD_VAR 0 4
6907: ARRAY
6908: ST_TO_ADDR
// break ;
6909: GO 6913
// end ;
6911: GO 6840
6913: POP
6914: POP
// if mylab then
6915: LD_VAR 0 9
6919: IFFALSE 6980
// begin if BuildingStatus ( mylab ) = bs_idle then
6921: LD_VAR 0 9
6925: PPUSH
6926: CALL_OW 461
6930: PUSH
6931: LD_INT 2
6933: EQUAL
6934: IFFALSE 6978
// for i = 1 to list do
6936: LD_ADDR_VAR 0 4
6940: PUSH
6941: DOUBLE
6942: LD_INT 1
6944: DEC
6945: ST_TO_ADDR
6946: LD_VAR 0 8
6950: PUSH
6951: FOR_TO
6952: IFFALSE 6976
// AddComResearch ( mylab , list [ i ] ) ;
6954: LD_VAR 0 9
6958: PPUSH
6959: LD_VAR 0 8
6963: PUSH
6964: LD_VAR 0 4
6968: ARRAY
6969: PPUSH
6970: CALL_OW 184
6974: GO 6951
6976: POP
6977: POP
// end else
6978: GO 6988
// result := false ;
6980: LD_ADDR_VAR 0 3
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// end else
6988: GO 6998
// result := false ;
6990: LD_ADDR_VAR 0 3
6994: PUSH
6995: LD_INT 0
6997: ST_TO_ADDR
// end ;
6998: LD_VAR 0 3
7002: RET
// export function GetTowers ( side ) ; begin
7003: LD_INT 0
7005: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
7006: LD_ADDR_VAR 0 2
7010: PUSH
7011: LD_INT 22
7013: PUSH
7014: LD_VAR 0 1
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 2
7025: PUSH
7026: LD_INT 30
7028: PUSH
7029: LD_INT 32
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: LD_INT 33
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PPUSH
7055: CALL_OW 69
7059: ST_TO_ADDR
// end ;
7060: LD_VAR 0 2
7064: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
7065: LD_INT 0
7067: PPUSH
7068: PPUSH
// if Hex ( x , y ) then
7069: LD_VAR 0 2
7073: PPUSH
7074: LD_VAR 0 3
7078: PPUSH
7079: CALL 6008 0 2
7083: IFFALSE 7158
// for i = 1 to plist do
7085: LD_ADDR_VAR 0 6
7089: PUSH
7090: DOUBLE
7091: LD_INT 1
7093: DEC
7094: ST_TO_ADDR
7095: LD_VAR 0 1
7099: PUSH
7100: FOR_TO
7101: IFFALSE 7156
// if not HasTask ( plist [ i ] ) then
7103: LD_VAR 0 1
7107: PUSH
7108: LD_VAR 0 6
7112: ARRAY
7113: PPUSH
7114: CALL_OW 314
7118: NOT
7119: IFFALSE 7154
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7121: LD_VAR 0 1
7125: PUSH
7126: LD_VAR 0 6
7130: ARRAY
7131: PPUSH
7132: LD_INT 0
7134: PPUSH
7135: LD_VAR 0 2
7139: PPUSH
7140: LD_VAR 0 3
7144: PPUSH
7145: LD_VAR 0 4
7149: PPUSH
7150: CALL_OW 145
7154: GO 7100
7156: POP
7157: POP
// end ;
7158: LD_VAR 0 5
7162: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7163: LD_INT 0
7165: PPUSH
7166: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7167: LD_VAR 0 2
7171: PPUSH
7172: CALL_OW 266
7176: PUSH
7177: LD_INT 0
7179: EQUAL
7180: IFFALSE 7196
7182: PUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: LD_INT 1
7190: PPUSH
7191: CALL 5776 0 2
7195: AND
7196: IFFALSE 7219
7198: PUSH
7199: LD_VAR 0 1
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PPUSH
7208: CALL_OW 255
7212: PPUSH
7213: CALL_OW 345
7217: NOT
7218: AND
7219: IFFALSE 7315
// begin ComUpgrade ( bident ) ;
7221: LD_VAR 0 2
7225: PPUSH
7226: CALL_OW 146
// for i = 1 to plist do
7230: LD_ADDR_VAR 0 4
7234: PUSH
7235: DOUBLE
7236: LD_INT 1
7238: DEC
7239: ST_TO_ADDR
7240: LD_VAR 0 1
7244: PUSH
7245: FOR_TO
7246: IFFALSE 7303
// if not HasTask ( plist [ i ] ) then
7248: LD_VAR 0 1
7252: PUSH
7253: LD_VAR 0 4
7257: ARRAY
7258: PPUSH
7259: CALL_OW 314
7263: NOT
7264: IFFALSE 7301
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7266: LD_VAR 0 1
7270: PUSH
7271: LD_VAR 0 4
7275: ARRAY
7276: PPUSH
7277: LD_VAR 0 2
7281: PPUSH
7282: CALL_OW 250
7286: PPUSH
7287: LD_VAR 0 2
7291: PPUSH
7292: CALL_OW 251
7296: PPUSH
7297: CALL_OW 111
7301: GO 7245
7303: POP
7304: POP
// result := true ;
7305: LD_ADDR_VAR 0 3
7309: PUSH
7310: LD_INT 1
7312: ST_TO_ADDR
// end else
7313: GO 7323
// result := false ;
7315: LD_ADDR_VAR 0 3
7319: PUSH
7320: LD_INT 0
7322: ST_TO_ADDR
// end ;
7323: LD_VAR 0 3
7327: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7328: LD_INT 0
7330: PPUSH
7331: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7332: LD_VAR 0 1
7336: PUSH
7337: LD_INT 1
7339: ARRAY
7340: PPUSH
7341: CALL_OW 255
7345: PPUSH
7346: CALL 6391 0 1
7350: PUSH
7351: LD_INT 20
7353: GREATEREQUAL
7354: IFFALSE 7372
7356: PUSH
7357: LD_VAR 0 2
7361: PPUSH
7362: LD_VAR 0 3
7366: PPUSH
7367: CALL 6008 0 2
7371: AND
7372: IFFALSE 7457
// begin for i = 1 to plist do
7374: LD_ADDR_VAR 0 6
7378: PUSH
7379: DOUBLE
7380: LD_INT 1
7382: DEC
7383: ST_TO_ADDR
7384: LD_VAR 0 1
7388: PUSH
7389: FOR_TO
7390: IFFALSE 7445
// if not HasTask ( plist [ i ] ) then
7392: LD_VAR 0 1
7396: PUSH
7397: LD_VAR 0 6
7401: ARRAY
7402: PPUSH
7403: CALL_OW 314
7407: NOT
7408: IFFALSE 7443
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7410: LD_VAR 0 1
7414: PUSH
7415: LD_VAR 0 6
7419: ARRAY
7420: PPUSH
7421: LD_INT 6
7423: PPUSH
7424: LD_VAR 0 2
7428: PPUSH
7429: LD_VAR 0 3
7433: PPUSH
7434: LD_VAR 0 4
7438: PPUSH
7439: CALL_OW 145
7443: GO 7389
7445: POP
7446: POP
// result := true ;
7447: LD_ADDR_VAR 0 5
7451: PUSH
7452: LD_INT 1
7454: ST_TO_ADDR
// end else
7455: GO 7465
// result := false ;
7457: LD_ADDR_VAR 0 5
7461: PUSH
7462: LD_INT 0
7464: ST_TO_ADDR
// end ;
7465: LD_VAR 0 5
7469: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7470: LD_INT 0
7472: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7473: LD_VAR 0 1
7477: PPUSH
7478: LD_INT 1
7480: PPUSH
7481: CALL_OW 268
7485: PUSH
7486: LD_INT 9
7488: EQUAL
7489: IFFALSE 7509
7491: PUSH
7492: LD_VAR 0 1
7496: PPUSH
7497: LD_INT 2
7499: PPUSH
7500: CALL_OW 268
7504: PUSH
7505: LD_INT 9
7507: EQUAL
7508: AND
7509: IFFALSE 7610
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7511: LD_VAR 0 1
7515: PPUSH
7516: LD_VAR 0 2
7520: PPUSH
7521: CALL 5776 0 2
7525: IFFALSE 7543
7527: PUSH
7528: LD_VAR 0 1
7532: PPUSH
7533: LD_VAR 0 3
7537: PPUSH
7538: CALL 5776 0 2
7542: AND
7543: IFFALSE 7560
7545: PUSH
7546: LD_VAR 0 1
7550: PPUSH
7551: CALL_OW 461
7555: PUSH
7556: LD_INT 2
7558: EQUAL
7559: AND
7560: IFFALSE 7600
// begin ComUpgradeLab ( lab , bkind1 ) ;
7562: LD_VAR 0 1
7566: PPUSH
7567: LD_VAR 0 2
7571: PPUSH
7572: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7576: LD_VAR 0 1
7580: PPUSH
7581: LD_VAR 0 3
7585: PPUSH
7586: CALL_OW 207
// result := true ;
7590: LD_ADDR_VAR 0 4
7594: PUSH
7595: LD_INT 1
7597: ST_TO_ADDR
// end else
7598: GO 7608
// result := false ;
7600: LD_ADDR_VAR 0 4
7604: PUSH
7605: LD_INT 0
7607: ST_TO_ADDR
// end else
7608: GO 7618
// result := false ;
7610: LD_ADDR_VAR 0 4
7614: PUSH
7615: LD_INT 0
7617: ST_TO_ADDR
// end ;
7618: LD_VAR 0 4
7622: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7623: LD_INT 0
7625: PPUSH
7626: PPUSH
7627: PPUSH
7628: PPUSH
7629: PPUSH
// p := 1 ;
7630: LD_ADDR_VAR 0 6
7634: PUSH
7635: LD_INT 1
7637: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7638: LD_ADDR_VAR 0 4
7642: PUSH
7643: DOUBLE
7644: LD_INT 1
7646: DEC
7647: ST_TO_ADDR
7648: LD_VAR 0 2
7652: PUSH
7653: LD_INT 4
7655: DIVREAL
7656: PUSH
7657: FOR_TO
7658: IFFALSE 7911
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7660: LD_VAR 0 2
7664: PUSH
7665: LD_VAR 0 6
7669: PUSH
7670: LD_INT 1
7672: PLUS
7673: ARRAY
7674: PPUSH
7675: LD_VAR 0 2
7679: PUSH
7680: LD_VAR 0 6
7684: PUSH
7685: LD_INT 2
7687: PLUS
7688: ARRAY
7689: PPUSH
7690: CALL_OW 428
7694: PUSH
7695: LD_INT 0
7697: EQUAL
7698: IFFALSE 7736
7700: PUSH
7701: LD_VAR 0 2
7705: PUSH
7706: LD_VAR 0 6
7710: PUSH
7711: LD_INT 1
7713: PLUS
7714: ARRAY
7715: PPUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 2
7728: PLUS
7729: ARRAY
7730: PPUSH
7731: CALL 6008 0 2
7735: AND
7736: IFFALSE 7762
7738: PUSH
7739: LD_VAR 0 1
7743: PUSH
7744: LD_INT 1
7746: ARRAY
7747: PPUSH
7748: CALL_OW 255
7752: PPUSH
7753: CALL 6391 0 1
7757: PUSH
7758: LD_INT 20
7760: GREATEREQUAL
7761: AND
7762: IFFALSE 7879
// begin for c = 1 to plist do
7764: LD_ADDR_VAR 0 7
7768: PUSH
7769: DOUBLE
7770: LD_INT 1
7772: DEC
7773: ST_TO_ADDR
7774: LD_VAR 0 1
7778: PUSH
7779: FOR_TO
7780: IFFALSE 7873
// if not HasTask ( plist [ c ] ) then
7782: LD_VAR 0 1
7786: PUSH
7787: LD_VAR 0 7
7791: ARRAY
7792: PPUSH
7793: CALL_OW 314
7797: NOT
7798: IFFALSE 7871
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7800: LD_VAR 0 1
7804: PUSH
7805: LD_VAR 0 7
7809: ARRAY
7810: PPUSH
7811: LD_VAR 0 2
7815: PUSH
7816: LD_VAR 0 6
7820: ARRAY
7821: PPUSH
7822: LD_VAR 0 2
7826: PUSH
7827: LD_VAR 0 6
7831: PUSH
7832: LD_INT 1
7834: PLUS
7835: ARRAY
7836: PPUSH
7837: LD_VAR 0 2
7841: PUSH
7842: LD_VAR 0 6
7846: PUSH
7847: LD_INT 2
7849: PLUS
7850: ARRAY
7851: PPUSH
7852: LD_VAR 0 2
7856: PUSH
7857: LD_VAR 0 6
7861: PUSH
7862: LD_INT 3
7864: PLUS
7865: ARRAY
7866: PPUSH
7867: CALL_OW 145
7871: GO 7779
7873: POP
7874: POP
// break ;
7875: GO 7911
// end else
7877: GO 7909
// if ( p + 4 < tlist ) then
7879: LD_VAR 0 6
7883: PUSH
7884: LD_INT 4
7886: PLUS
7887: PUSH
7888: LD_VAR 0 2
7892: LESS
7893: IFFALSE 7909
// p := p + 4 ;
7895: LD_ADDR_VAR 0 6
7899: PUSH
7900: LD_VAR 0 6
7904: PUSH
7905: LD_INT 4
7907: PLUS
7908: ST_TO_ADDR
// end ;
7909: GO 7657
7911: POP
7912: POP
// end ;
7913: LD_VAR 0 3
7917: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7918: LD_INT 0
7920: PPUSH
7921: PPUSH
7922: PPUSH
7923: PPUSH
// tmp := GetTowers ( side ) ;
7924: LD_ADDR_VAR 0 5
7928: PUSH
7929: LD_VAR 0 1
7933: PPUSH
7934: CALL 7003 0 1
7938: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7939: LD_ADDR_VAR 0 6
7943: PUSH
7944: LD_VAR 0 1
7948: PPUSH
7949: LD_INT 3
7951: PPUSH
7952: CALL 6297 0 2
7956: PUSH
7957: LD_INT 1
7959: ARRAY
7960: ST_TO_ADDR
// if fac then
7961: LD_VAR 0 6
7965: IFFALSE 8061
// for i = 1 to tmp do
7967: LD_ADDR_VAR 0 4
7971: PUSH
7972: DOUBLE
7973: LD_INT 1
7975: DEC
7976: ST_TO_ADDR
7977: LD_VAR 0 5
7981: PUSH
7982: FOR_TO
7983: IFFALSE 8059
// if GetBWeapon ( tmp [ i ] ) = 0 then
7985: LD_VAR 0 5
7989: PUSH
7990: LD_VAR 0 4
7994: ARRAY
7995: PPUSH
7996: CALL_OW 269
8000: PUSH
8001: LD_INT 0
8003: EQUAL
8004: IFFALSE 8057
// begin if BuildingStatus ( fac ) = bs_idle then
8006: LD_VAR 0 6
8010: PPUSH
8011: CALL_OW 461
8015: PUSH
8016: LD_INT 2
8018: EQUAL
8019: IFFALSE 8055
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
8021: LD_VAR 0 5
8025: PUSH
8026: LD_VAR 0 4
8030: ARRAY
8031: PPUSH
8032: LD_VAR 0 2
8036: PUSH
8037: LD_INT 1
8039: PPUSH
8040: LD_VAR 0 2
8044: PPUSH
8045: CALL_OW 12
8049: ARRAY
8050: PPUSH
8051: CALL_OW 148
// break ;
8055: GO 8059
// end ;
8057: GO 7982
8059: POP
8060: POP
// end ;
8061: LD_VAR 0 3
8065: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
8066: LD_INT 0
8068: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
8069: LD_INT 22
8071: PUSH
8072: LD_VAR 0 1
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PUSH
8081: LD_INT 34
8083: PUSH
8084: LD_VAR 0 3
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 31
8095: PUSH
8096: LD_VAR 0 2
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: LIST
8109: PUSH
8110: EMPTY
8111: LIST
8112: PPUSH
8113: CALL_OW 69
8117: IFFALSE 8175
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8119: LD_ADDR_VAR 0 4
8123: PUSH
8124: LD_INT 22
8126: PUSH
8127: LD_VAR 0 1
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PUSH
8136: LD_INT 34
8138: PUSH
8139: LD_VAR 0 3
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_INT 31
8150: PUSH
8151: LD_VAR 0 2
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: PUSH
8165: EMPTY
8166: LIST
8167: PPUSH
8168: CALL_OW 69
8172: ST_TO_ADDR
8173: GO 8183
// result := false ;
8175: LD_ADDR_VAR 0 4
8179: PUSH
8180: LD_INT 0
8182: ST_TO_ADDR
// end ;
8183: LD_VAR 0 4
8187: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8188: LD_INT 0
8190: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8191: LD_VAR 0 1
8195: PPUSH
8196: LD_VAR 0 2
8200: PPUSH
8201: LD_VAR 0 3
8205: PPUSH
8206: LD_VAR 0 4
8210: PPUSH
8211: LD_VAR 0 5
8215: PPUSH
8216: CALL_OW 448
8220: IFFALSE 8267
8222: PUSH
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_VAR 0 3
8232: PPUSH
8233: LD_VAR 0 4
8237: PPUSH
8238: LD_VAR 0 5
8242: PPUSH
8243: CALL_OW 449
8247: PUSH
8248: LD_INT 1
8250: ARRAY
8251: PUSH
8252: LD_VAR 0 1
8256: PPUSH
8257: CALL 5894 0 1
8261: PUSH
8262: LD_INT 1
8264: ARRAY
8265: LESSEQUAL
8266: AND
8267: IFFALSE 8314
8269: PUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_VAR 0 5
8289: PPUSH
8290: CALL_OW 449
8294: PUSH
8295: LD_INT 2
8297: ARRAY
8298: PUSH
8299: LD_VAR 0 1
8303: PPUSH
8304: CALL 5894 0 1
8308: PUSH
8309: LD_INT 2
8311: ARRAY
8312: LESSEQUAL
8313: AND
8314: IFFALSE 8361
8316: PUSH
8317: LD_VAR 0 2
8321: PPUSH
8322: LD_VAR 0 3
8326: PPUSH
8327: LD_VAR 0 4
8331: PPUSH
8332: LD_VAR 0 5
8336: PPUSH
8337: CALL_OW 449
8341: PUSH
8342: LD_INT 3
8344: ARRAY
8345: PUSH
8346: LD_VAR 0 1
8350: PPUSH
8351: CALL 5894 0 1
8355: PUSH
8356: LD_INT 3
8358: ARRAY
8359: LESSEQUAL
8360: AND
8361: IFFALSE 8408
// begin if debug then
8363: LD_EXP 1
8367: IFFALSE 8377
// display_strings := Factory work! ;
8369: LD_ADDR_OWVAR 47
8373: PUSH
8374: LD_STRING Factory work!
8376: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8377: LD_VAR 0 1
8381: PPUSH
8382: LD_VAR 0 2
8386: PPUSH
8387: LD_VAR 0 3
8391: PPUSH
8392: LD_VAR 0 4
8396: PPUSH
8397: LD_VAR 0 5
8401: PPUSH
8402: CALL_OW 125
// end else
8406: GO 8416
// result := false ;
8408: LD_ADDR_VAR 0 6
8412: PUSH
8413: LD_INT 0
8415: ST_TO_ADDR
// end ;
8416: LD_VAR 0 6
8420: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8421: LD_INT 0
8423: PPUSH
8424: PPUSH
8425: PPUSH
8426: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8427: LD_ADDR_VAR 0 6
8431: PUSH
8432: LD_INT 22
8434: PUSH
8435: LD_VAR 0 1
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 30
8446: PUSH
8447: LD_VAR 0 2
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PPUSH
8460: CALL_OW 69
8464: ST_TO_ADDR
// tmp := [ ] ;
8465: LD_ADDR_VAR 0 5
8469: PUSH
8470: EMPTY
8471: ST_TO_ADDR
// for i = 1 to filter do
8472: LD_ADDR_VAR 0 4
8476: PUSH
8477: DOUBLE
8478: LD_INT 1
8480: DEC
8481: ST_TO_ADDR
8482: LD_VAR 0 6
8486: PUSH
8487: FOR_TO
8488: IFFALSE 8576
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8490: LD_ADDR_VAR 0 5
8494: PUSH
8495: LD_VAR 0 5
8499: PUSH
8500: LD_VAR 0 6
8504: PUSH
8505: LD_VAR 0 4
8509: ARRAY
8510: PPUSH
8511: CALL_OW 266
8515: PUSH
8516: LD_VAR 0 6
8520: PUSH
8521: LD_VAR 0 4
8525: ARRAY
8526: PPUSH
8527: CALL_OW 250
8531: PUSH
8532: LD_VAR 0 6
8536: PUSH
8537: LD_VAR 0 4
8541: ARRAY
8542: PPUSH
8543: CALL_OW 251
8547: PUSH
8548: LD_VAR 0 6
8552: PUSH
8553: LD_VAR 0 4
8557: ARRAY
8558: PPUSH
8559: CALL_OW 254
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: PUSH
8570: EMPTY
8571: LIST
8572: ADD
8573: ST_TO_ADDR
// end ;
8574: GO 8487
8576: POP
8577: POP
// result := tmp ;
8578: LD_ADDR_VAR 0 3
8582: PUSH
8583: LD_VAR 0 5
8587: ST_TO_ADDR
// end ;
8588: LD_VAR 0 3
8592: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8593: LD_INT 0
8595: PPUSH
8596: PPUSH
8597: PPUSH
// for i = 1 to list do
8598: LD_ADDR_VAR 0 4
8602: PUSH
8603: DOUBLE
8604: LD_INT 1
8606: DEC
8607: ST_TO_ADDR
8608: LD_VAR 0 2
8612: PUSH
8613: FOR_TO
8614: IFFALSE 9173
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8616: LD_VAR 0 2
8620: PUSH
8621: LD_VAR 0 4
8625: ARRAY
8626: PUSH
8627: LD_INT 1
8629: ARRAY
8630: PPUSH
8631: LD_VAR 0 2
8635: PUSH
8636: LD_VAR 0 4
8640: ARRAY
8641: PUSH
8642: LD_INT 2
8644: ARRAY
8645: PPUSH
8646: CALL_OW 428
8650: PUSH
8651: LD_INT 0
8653: GREATER
8654: IFFALSE 8940
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8656: LD_VAR 0 2
8660: PUSH
8661: LD_VAR 0 4
8665: ARRAY
8666: PUSH
8667: LD_INT 1
8669: ARRAY
8670: PPUSH
8671: LD_VAR 0 2
8675: PUSH
8676: LD_VAR 0 4
8680: ARRAY
8681: PUSH
8682: LD_INT 2
8684: ARRAY
8685: PPUSH
8686: CALL_OW 428
8690: PPUSH
8691: CALL_OW 248
8695: PUSH
8696: LD_INT 3
8698: EQUAL
8699: IFFALSE 8825
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8701: LD_VAR 0 2
8705: PUSH
8706: LD_VAR 0 4
8710: ARRAY
8711: PUSH
8712: LD_INT 1
8714: ARRAY
8715: PPUSH
8716: LD_VAR 0 2
8720: PUSH
8721: LD_VAR 0 4
8725: ARRAY
8726: PUSH
8727: LD_INT 2
8729: ARRAY
8730: PPUSH
8731: CALL_OW 428
8735: PPUSH
8736: CALL_OW 274
8740: PPUSH
8741: LD_INT 3
8743: PPUSH
8744: CALL_OW 275
8748: PUSH
8749: LD_INT 15
8751: GREATEREQUAL
8752: IFFALSE 8823
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8754: LD_VAR 0 2
8758: PUSH
8759: LD_VAR 0 4
8763: ARRAY
8764: PUSH
8765: LD_INT 1
8767: ARRAY
8768: PPUSH
8769: LD_VAR 0 2
8773: PUSH
8774: LD_VAR 0 4
8778: ARRAY
8779: PUSH
8780: LD_INT 2
8782: ARRAY
8783: PPUSH
8784: CALL_OW 428
8788: PPUSH
8789: LD_VAR 0 2
8793: PUSH
8794: LD_VAR 0 4
8798: ARRAY
8799: PUSH
8800: LD_INT 4
8802: ARRAY
8803: PPUSH
8804: LD_VAR 0 2
8808: PUSH
8809: LD_VAR 0 4
8813: ARRAY
8814: PUSH
8815: LD_INT 5
8817: ARRAY
8818: PPUSH
8819: CALL 7470 0 3
// end else
8823: GO 8894
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8825: LD_VAR 0 2
8829: PUSH
8830: LD_VAR 0 4
8834: ARRAY
8835: PUSH
8836: LD_INT 1
8838: ARRAY
8839: PPUSH
8840: LD_VAR 0 2
8844: PUSH
8845: LD_VAR 0 4
8849: ARRAY
8850: PUSH
8851: LD_INT 2
8853: ARRAY
8854: PPUSH
8855: CALL_OW 428
8859: PPUSH
8860: LD_VAR 0 2
8864: PUSH
8865: LD_VAR 0 4
8869: ARRAY
8870: PUSH
8871: LD_INT 4
8873: ARRAY
8874: PPUSH
8875: LD_VAR 0 2
8879: PUSH
8880: LD_VAR 0 4
8884: ARRAY
8885: PUSH
8886: LD_INT 5
8888: ARRAY
8889: PPUSH
8890: CALL 7470 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8894: LD_VAR 0 1
8898: PPUSH
8899: LD_VAR 0 2
8903: PUSH
8904: LD_VAR 0 4
8908: ARRAY
8909: PUSH
8910: LD_INT 1
8912: ARRAY
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: ARRAY
8924: PUSH
8925: LD_INT 2
8927: ARRAY
8928: PPUSH
8929: CALL_OW 428
8933: PPUSH
8934: CALL 10444 0 2
// end else
8938: GO 9171
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8940: LD_VAR 0 1
8944: PUSH
8945: LD_INT 1
8947: ARRAY
8948: PPUSH
8949: CALL_OW 255
8953: PPUSH
8954: CALL 6206 0 1
8958: PPUSH
8959: LD_INT 6
8961: PPUSH
8962: CALL 5776 0 2
8966: IFFALSE 9008
8968: PUSH
8969: LD_VAR 0 1
8973: PUSH
8974: LD_INT 1
8976: ARRAY
8977: PPUSH
8978: CALL_OW 255
8982: PPUSH
8983: CALL 6206 0 1
8987: PPUSH
8988: LD_VAR 0 2
8992: PUSH
8993: LD_VAR 0 4
8997: ARRAY
8998: PUSH
8999: LD_INT 4
9001: ARRAY
9002: PPUSH
9003: CALL 5776 0 2
9007: AND
9008: IFFALSE 9050
9010: PUSH
9011: LD_VAR 0 1
9015: PUSH
9016: LD_INT 1
9018: ARRAY
9019: PPUSH
9020: CALL_OW 255
9024: PPUSH
9025: CALL 6206 0 1
9029: PPUSH
9030: LD_VAR 0 2
9034: PUSH
9035: LD_VAR 0 4
9039: ARRAY
9040: PUSH
9041: LD_INT 5
9043: ARRAY
9044: PPUSH
9045: CALL 5776 0 2
9049: AND
9050: IFFALSE 9171
// for p = 1 to plist do
9052: LD_ADDR_VAR 0 5
9056: PUSH
9057: DOUBLE
9058: LD_INT 1
9060: DEC
9061: ST_TO_ADDR
9062: LD_VAR 0 1
9066: PUSH
9067: FOR_TO
9068: IFFALSE 9169
// if IsInUnit ( plist [ p ] ) then
9070: LD_VAR 0 1
9074: PUSH
9075: LD_VAR 0 5
9079: ARRAY
9080: PPUSH
9081: CALL_OW 310
9085: IFFALSE 9104
// ComExitBuilding ( plist [ p ] ) else
9087: LD_VAR 0 1
9091: PUSH
9092: LD_VAR 0 5
9096: ARRAY
9097: PPUSH
9098: CALL_OW 122
9102: GO 9167
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
9104: LD_VAR 0 1
9108: PUSH
9109: LD_VAR 0 5
9113: ARRAY
9114: PPUSH
9115: LD_INT 6
9117: PPUSH
9118: LD_VAR 0 2
9122: PUSH
9123: LD_VAR 0 4
9127: ARRAY
9128: PUSH
9129: LD_INT 1
9131: ARRAY
9132: PPUSH
9133: LD_VAR 0 2
9137: PUSH
9138: LD_VAR 0 4
9142: ARRAY
9143: PUSH
9144: LD_INT 2
9146: ARRAY
9147: PPUSH
9148: LD_VAR 0 2
9152: PUSH
9153: LD_VAR 0 4
9157: ARRAY
9158: PUSH
9159: LD_INT 3
9161: ARRAY
9162: PPUSH
9163: CALL_OW 145
9167: GO 9067
9169: POP
9170: POP
// end ;
9171: GO 8613
9173: POP
9174: POP
// end ;
9175: LD_VAR 0 3
9179: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9180: LD_INT 0
9182: PPUSH
// if IsInUnit ( sci ) then
9183: LD_VAR 0 1
9187: PPUSH
9188: CALL_OW 310
9192: IFFALSE 9205
// ComExitBuilding ( sci ) else
9194: LD_VAR 0 1
9198: PPUSH
9199: CALL_OW 122
9203: GO 9236
// if not HasTask ( sci ) then
9205: LD_VAR 0 1
9209: PPUSH
9210: CALL_OW 314
9214: NOT
9215: IFFALSE 9236
// begin ComMoveXY ( sci , x , y ) ;
9217: LD_VAR 0 1
9221: PPUSH
9222: LD_VAR 0 2
9226: PPUSH
9227: LD_VAR 0 3
9231: PPUSH
9232: CALL_OW 111
// end ; end ;
9236: LD_VAR 0 4
9240: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9241: LD_INT 0
9243: PPUSH
9244: PPUSH
9245: PPUSH
9246: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9247: LD_ADDR_VAR 0 6
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_VAR 0 1
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 21
9266: PUSH
9267: LD_INT 1
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PPUSH
9278: CALL_OW 69
9282: PUSH
9283: LD_VAR 0 3
9287: DIFF
9288: ST_TO_ADDR
// tmp := tag_list ;
9289: LD_ADDR_VAR 0 7
9293: PUSH
9294: LD_VAR 0 2
9298: ST_TO_ADDR
// for i = 1 to filter do
9299: LD_ADDR_VAR 0 5
9303: PUSH
9304: DOUBLE
9305: LD_INT 1
9307: DEC
9308: ST_TO_ADDR
9309: LD_VAR 0 6
9313: PUSH
9314: FOR_TO
9315: IFFALSE 9586
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9317: LD_VAR 0 6
9321: PUSH
9322: LD_VAR 0 5
9326: ARRAY
9327: PPUSH
9328: CALL_OW 256
9332: PUSH
9333: LD_INT 1000
9335: EQUAL
9336: IFFALSE 9359
9338: PUSH
9339: LD_VAR 0 6
9343: PUSH
9344: LD_VAR 0 5
9348: ARRAY
9349: PPUSH
9350: CALL_OW 110
9354: PUSH
9355: LD_INT 100
9357: GREATEREQUAL
9358: AND
9359: IFFALSE 9401
// begin SetTag ( filter [ i ] , 0 ) ;
9361: LD_VAR 0 6
9365: PUSH
9366: LD_VAR 0 5
9370: ARRAY
9371: PPUSH
9372: LD_INT 0
9374: PPUSH
9375: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9379: LD_ADDR_VAR 0 7
9383: PUSH
9384: LD_VAR 0 7
9388: PUSH
9389: LD_VAR 0 6
9393: PUSH
9394: LD_VAR 0 5
9398: ARRAY
9399: DIFF
9400: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9401: LD_VAR 0 6
9405: PUSH
9406: LD_VAR 0 5
9410: ARRAY
9411: PPUSH
9412: CALL_OW 256
9416: PUSH
9417: LD_INT 1000
9419: LESS
9420: IFFALSE 9584
// begin if not filter [ i ] in tmp then
9422: LD_VAR 0 6
9426: PUSH
9427: LD_VAR 0 5
9431: ARRAY
9432: PUSH
9433: LD_VAR 0 7
9437: IN
9438: NOT
9439: IFFALSE 9463
// tmp := tmp ^ filter [ i ] ;
9441: LD_ADDR_VAR 0 7
9445: PUSH
9446: LD_VAR 0 7
9450: PUSH
9451: LD_VAR 0 6
9455: PUSH
9456: LD_VAR 0 5
9460: ARRAY
9461: ADD
9462: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9463: LD_VAR 0 6
9467: PUSH
9468: LD_VAR 0 5
9472: ARRAY
9473: PPUSH
9474: CALL_OW 256
9478: PUSH
9479: LD_INT 250
9481: LESS
9482: IFFALSE 9504
// SetTag ( filter [ i ] , 100 ) else
9484: LD_VAR 0 6
9488: PUSH
9489: LD_VAR 0 5
9493: ARRAY
9494: PPUSH
9495: LD_INT 100
9497: PPUSH
9498: CALL_OW 109
9502: GO 9584
// if GetLives ( filter [ i ] ) < 500 then
9504: LD_VAR 0 6
9508: PUSH
9509: LD_VAR 0 5
9513: ARRAY
9514: PPUSH
9515: CALL_OW 256
9519: PUSH
9520: LD_INT 500
9522: LESS
9523: IFFALSE 9545
// SetTag ( filter [ i ] , 101 ) else
9525: LD_VAR 0 6
9529: PUSH
9530: LD_VAR 0 5
9534: ARRAY
9535: PPUSH
9536: LD_INT 101
9538: PPUSH
9539: CALL_OW 109
9543: GO 9584
// if GetLives ( filter [ i ] ) < 1000 then
9545: LD_VAR 0 6
9549: PUSH
9550: LD_VAR 0 5
9554: ARRAY
9555: PPUSH
9556: CALL_OW 256
9560: PUSH
9561: LD_INT 1000
9563: LESS
9564: IFFALSE 9584
// SetTag ( filter [ i ] , 102 ) ;
9566: LD_VAR 0 6
9570: PUSH
9571: LD_VAR 0 5
9575: ARRAY
9576: PPUSH
9577: LD_INT 102
9579: PPUSH
9580: CALL_OW 109
// end ; end ;
9584: GO 9314
9586: POP
9587: POP
// result := tmp ;
9588: LD_ADDR_VAR 0 4
9592: PUSH
9593: LD_VAR 0 7
9597: ST_TO_ADDR
// end ;
9598: LD_VAR 0 4
9602: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9603: LD_INT 0
9605: PPUSH
9606: PPUSH
9607: PPUSH
9608: PPUSH
9609: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9610: LD_ADDR_VAR 0 7
9614: PUSH
9615: LD_INT 22
9617: PUSH
9618: LD_VAR 0 2
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 3
9629: PUSH
9630: LD_INT 21
9632: PUSH
9633: LD_INT 3
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 69
9652: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9653: LD_ADDR_VAR 0 5
9657: PUSH
9658: LD_INT 1
9660: PPUSH
9661: LD_INT 3
9663: PPUSH
9664: CALL_OW 12
9668: ST_TO_ADDR
// if filter > 0 then
9669: LD_VAR 0 7
9673: PUSH
9674: LD_INT 0
9676: GREATER
9677: IFFALSE 9879
// for i = 1 to list do
9679: LD_ADDR_VAR 0 6
9683: PUSH
9684: DOUBLE
9685: LD_INT 1
9687: DEC
9688: ST_TO_ADDR
9689: LD_VAR 0 1
9693: PUSH
9694: FOR_TO
9695: IFFALSE 9877
// for ta in filter do
9697: LD_ADDR_VAR 0 4
9701: PUSH
9702: LD_VAR 0 7
9706: PUSH
9707: FOR_IN
9708: IFFALSE 9873
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9710: LD_VAR 0 1
9714: PUSH
9715: LD_VAR 0 6
9719: ARRAY
9720: PPUSH
9721: LD_VAR 0 4
9725: PPUSH
9726: CALL_OW 296
9730: PUSH
9731: LD_INT 13
9733: LESSEQUAL
9734: IFFALSE 9871
// begin case c of 1 :
9736: LD_VAR 0 5
9740: PUSH
9741: LD_INT 1
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9787
9749: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9750: LD_VAR 0 1
9754: PUSH
9755: LD_VAR 0 6
9759: ARRAY
9760: PPUSH
9761: LD_VAR 0 4
9765: PPUSH
9766: CALL_OW 250
9770: PPUSH
9771: LD_VAR 0 4
9775: PPUSH
9776: CALL_OW 251
9780: PPUSH
9781: CALL_OW 154
9785: GO 9871
9787: LD_INT 2
9789: DOUBLE
9790: EQUAL
9791: IFTRUE 9795
9793: GO 9859
9795: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9796: LD_VAR 0 1
9800: PUSH
9801: LD_VAR 0 6
9805: ARRAY
9806: PPUSH
9807: LD_VAR 0 4
9811: PPUSH
9812: CALL_OW 250
9816: PUSH
9817: LD_INT 1
9819: NEG
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 12
9828: PLUS
9829: PPUSH
9830: LD_VAR 0 4
9834: PPUSH
9835: CALL_OW 251
9839: PUSH
9840: LD_INT 1
9842: NEG
9843: PPUSH
9844: LD_INT 1
9846: PPUSH
9847: CALL_OW 12
9851: PLUS
9852: PPUSH
9853: CALL_OW 153
9857: GO 9871
9859: LD_INT 3
9861: DOUBLE
9862: EQUAL
9863: IFTRUE 9867
9865: GO 9870
9867: POP
// ; end ;
9868: GO 9871
9870: POP
// end ; end ;
9871: GO 9707
9873: POP
9874: POP
9875: GO 9694
9877: POP
9878: POP
// end ;
9879: LD_VAR 0 3
9883: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9884: LD_INT 0
9886: PPUSH
9887: PPUSH
// for i = 1 to plist do
9888: LD_ADDR_VAR 0 3
9892: PUSH
9893: DOUBLE
9894: LD_INT 1
9896: DEC
9897: ST_TO_ADDR
9898: LD_VAR 0 1
9902: PUSH
9903: FOR_TO
9904: IFFALSE 10106
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9906: LD_VAR 0 1
9910: PUSH
9911: LD_VAR 0 3
9915: ARRAY
9916: PPUSH
9917: CALL_OW 310
9921: PUSH
9922: LD_INT 30
9924: PUSH
9925: LD_INT 5
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: PPUSH
9935: CALL_OW 69
9939: IN
9940: NOT
9941: IFFALSE 10086
// begin if IsInUnit ( plist [ i ] ) then
9943: LD_VAR 0 1
9947: PUSH
9948: LD_VAR 0 3
9952: ARRAY
9953: PPUSH
9954: CALL_OW 310
9958: IFFALSE 9977
// ComExitBuilding ( plist [ i ] ) else
9960: LD_VAR 0 1
9964: PUSH
9965: LD_VAR 0 3
9969: ARRAY
9970: PPUSH
9971: CALL_OW 122
9975: GO 10084
// if not HasTask ( plist [ i ] ) then
9977: LD_VAR 0 1
9981: PUSH
9982: LD_VAR 0 3
9986: ARRAY
9987: PPUSH
9988: CALL_OW 314
9992: NOT
9993: IFFALSE 10084
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9995: LD_VAR 0 1
9999: PUSH
10000: LD_VAR 0 3
10004: ARRAY
10005: PPUSH
10006: LD_INT 22
10008: PUSH
10009: LD_VAR 0 1
10013: PUSH
10014: LD_INT 1
10016: ARRAY
10017: PPUSH
10018: CALL_OW 255
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 30
10029: PUSH
10030: LD_INT 5
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PPUSH
10041: CALL_OW 69
10045: PPUSH
10046: LD_VAR 0 1
10050: PUSH
10051: LD_VAR 0 3
10055: ARRAY
10056: PPUSH
10057: CALL_OW 74
10061: PPUSH
10062: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
10066: LD_VAR 0 1
10070: PUSH
10071: LD_VAR 0 3
10075: ARRAY
10076: PPUSH
10077: LD_INT 9
10079: PPUSH
10080: CALL_OW 183
// end ; end else
10084: GO 10104
// ComChangeProfession ( plist [ i ] , 9 ) ;
10086: LD_VAR 0 1
10090: PUSH
10091: LD_VAR 0 3
10095: ARRAY
10096: PPUSH
10097: LD_INT 9
10099: PPUSH
10100: CALL_OW 123
10104: GO 9903
10106: POP
10107: POP
// end ;
10108: LD_VAR 0 2
10112: RET
// export function GetHuman ( side ) ; begin
10113: LD_INT 0
10115: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
10116: LD_ADDR_VAR 0 2
10120: PUSH
10121: LD_INT 22
10123: PUSH
10124: LD_VAR 0 1
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: LD_INT 21
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 2
10145: PUSH
10146: LD_INT 25
10148: PUSH
10149: LD_INT 1
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 25
10158: PUSH
10159: LD_INT 2
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: LD_INT 25
10168: PUSH
10169: LD_INT 3
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 25
10178: PUSH
10179: LD_INT 4
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: PPUSH
10198: CALL_OW 69
10202: ST_TO_ADDR
// end ;
10203: LD_VAR 0 2
10207: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10208: LD_INT 0
10210: PPUSH
10211: PPUSH
10212: PPUSH
// uc_side := 0 ;
10213: LD_ADDR_OWVAR 20
10217: PUSH
10218: LD_INT 0
10220: ST_TO_ADDR
// uc_nation := 0 ;
10221: LD_ADDR_OWVAR 21
10225: PUSH
10226: LD_INT 0
10228: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10229: LD_ADDR_VAR 0 4
10233: PUSH
10234: DOUBLE
10235: LD_INT 1
10237: DEC
10238: ST_TO_ADDR
10239: LD_INT 4
10241: PUSH
10242: LD_INT 5
10244: PUSH
10245: LD_INT 6
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: LIST
10252: PUSH
10253: LD_OWVAR 67
10257: ARRAY
10258: PUSH
10259: FOR_TO
10260: IFFALSE 10331
// begin hc_class = class_tiger ;
10262: LD_ADDR_OWVAR 28
10266: PUSH
10267: LD_INT 14
10269: ST_TO_ADDR
// hc_gallery = sandnature ;
10270: LD_ADDR_OWVAR 33
10274: PUSH
10275: LD_STRING sandnature
10277: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10278: LD_ADDR_OWVAR 35
10282: PUSH
10283: LD_INT 0
10285: PPUSH
10286: LD_INT 50
10288: PPUSH
10289: CALL_OW 12
10293: ST_TO_ADDR
// hc_face_number = 3 ;
10294: LD_ADDR_OWVAR 34
10298: PUSH
10299: LD_INT 3
10301: ST_TO_ADDR
// tiger := CreateHuman ;
10302: LD_ADDR_VAR 0 3
10306: PUSH
10307: CALL_OW 44
10311: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10312: LD_VAR 0 3
10316: PPUSH
10317: LD_VAR 0 1
10321: PPUSH
10322: LD_INT 0
10324: PPUSH
10325: CALL_OW 49
// end ;
10329: GO 10259
10331: POP
10332: POP
// end ;
10333: LD_VAR 0 2
10337: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10338: LD_INT 0
10340: PPUSH
10341: PPUSH
10342: PPUSH
// uc_side := 0 ;
10343: LD_ADDR_OWVAR 20
10347: PUSH
10348: LD_INT 0
10350: ST_TO_ADDR
// uc_nation := 0 ;
10351: LD_ADDR_OWVAR 21
10355: PUSH
10356: LD_INT 0
10358: ST_TO_ADDR
// for i = 1 to 8 do
10359: LD_ADDR_VAR 0 4
10363: PUSH
10364: DOUBLE
10365: LD_INT 1
10367: DEC
10368: ST_TO_ADDR
10369: LD_INT 8
10371: PUSH
10372: FOR_TO
10373: IFFALSE 10437
// begin hc_class = class_apeman ;
10375: LD_ADDR_OWVAR 28
10379: PUSH
10380: LD_INT 12
10382: ST_TO_ADDR
// hc_gallery =  ;
10383: LD_ADDR_OWVAR 33
10387: PUSH
10388: LD_STRING 
10390: ST_TO_ADDR
// hc_agressivity = Rand ( - 2 , 2 ) ;
10391: LD_ADDR_OWVAR 35
10395: PUSH
10396: LD_INT 2
10398: NEG
10399: PPUSH
10400: LD_INT 2
10402: PPUSH
10403: CALL_OW 12
10407: ST_TO_ADDR
// ape := CreateHuman ;
10408: LD_ADDR_VAR 0 3
10412: PUSH
10413: CALL_OW 44
10417: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10418: LD_VAR 0 3
10422: PPUSH
10423: LD_VAR 0 1
10427: PPUSH
10428: LD_INT 0
10430: PPUSH
10431: CALL_OW 49
// end ;
10435: GO 10372
10437: POP
10438: POP
// end ;
10439: LD_VAR 0 2
10443: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10444: LD_INT 0
10446: PPUSH
10447: PPUSH
// if BuildingStatus ( b ) = bs_build then
10448: LD_VAR 0 2
10452: PPUSH
10453: CALL_OW 461
10457: PUSH
10458: LD_INT 1
10460: EQUAL
10461: IFFALSE 10647
// for i = 1 to plist do
10463: LD_ADDR_VAR 0 4
10467: PUSH
10468: DOUBLE
10469: LD_INT 1
10471: DEC
10472: ST_TO_ADDR
10473: LD_VAR 0 1
10477: PUSH
10478: FOR_TO
10479: IFFALSE 10645
// if IsInUnit ( plist [ i ] ) then
10481: LD_VAR 0 1
10485: PUSH
10486: LD_VAR 0 4
10490: ARRAY
10491: PPUSH
10492: CALL_OW 310
10496: IFFALSE 10579
// begin ComExitBuilding ( plist [ i ] ) ;
10498: LD_VAR 0 1
10502: PUSH
10503: LD_VAR 0 4
10507: ARRAY
10508: PPUSH
10509: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10513: LD_VAR 0 1
10517: PUSH
10518: LD_VAR 0 4
10522: ARRAY
10523: PPUSH
10524: LD_STRING h
10526: PUSH
10527: LD_VAR 0 2
10531: PPUSH
10532: CALL_OW 250
10536: PUSH
10537: LD_VAR 0 2
10541: PPUSH
10542: CALL_OW 251
10546: PUSH
10547: LD_VAR 0 2
10551: PUSH
10552: LD_INT 0
10554: PUSH
10555: LD_INT 0
10557: PUSH
10558: LD_INT 0
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: PUSH
10570: EMPTY
10571: LIST
10572: PPUSH
10573: CALL_OW 447
// end else
10577: GO 10643
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10579: LD_VAR 0 1
10583: PUSH
10584: LD_VAR 0 4
10588: ARRAY
10589: PPUSH
10590: LD_STRING h
10592: PUSH
10593: LD_VAR 0 2
10597: PPUSH
10598: CALL_OW 250
10602: PUSH
10603: LD_VAR 0 2
10607: PPUSH
10608: CALL_OW 251
10612: PUSH
10613: LD_VAR 0 2
10617: PUSH
10618: LD_INT 0
10620: PUSH
10621: LD_INT 0
10623: PUSH
10624: LD_INT 0
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: PUSH
10636: EMPTY
10637: LIST
10638: PPUSH
10639: CALL_OW 446
10643: GO 10478
10645: POP
10646: POP
// end ;
10647: LD_VAR 0 3
10651: RET
// export function WantRepair ( eng ) ; begin
10652: LD_INT 0
10654: PPUSH
// if GetTaskList ( eng ) > 0 then
10655: LD_VAR 0 1
10659: PPUSH
10660: CALL_OW 437
10664: PUSH
10665: LD_INT 0
10667: GREATER
10668: IFFALSE 10713
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10670: LD_VAR 0 1
10674: PPUSH
10675: CALL_OW 437
10679: PUSH
10680: LD_INT 1
10682: ARRAY
10683: PUSH
10684: LD_INT 1
10686: ARRAY
10687: PUSH
10688: LD_STRING o
10690: EQUAL
10691: IFFALSE 10703
// result := true else
10693: LD_ADDR_VAR 0 2
10697: PUSH
10698: LD_INT 1
10700: ST_TO_ADDR
10701: GO 10711
// result := false ;
10703: LD_ADDR_VAR 0 2
10707: PUSH
10708: LD_INT 0
10710: ST_TO_ADDR
// end else
10711: GO 10721
// result := false ;
10713: LD_ADDR_VAR 0 2
10717: PUSH
10718: LD_INT 0
10720: ST_TO_ADDR
// end ;
10721: LD_VAR 0 2
10725: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10726: LD_INT 0
10728: PPUSH
10729: PPUSH
10730: PPUSH
10731: PPUSH
// if btype = - 1 then
10732: LD_VAR 0 2
10736: PUSH
10737: LD_INT 1
10739: NEG
10740: EQUAL
10741: IFFALSE 10781
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10743: LD_ADDR_VAR 0 5
10747: PUSH
10748: LD_INT 22
10750: PUSH
10751: LD_VAR 0 1
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 21
10762: PUSH
10763: LD_INT 3
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PPUSH
10774: CALL_OW 69
10778: ST_TO_ADDR
10779: GO 10819
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10781: LD_ADDR_VAR 0 5
10785: PUSH
10786: LD_INT 22
10788: PUSH
10789: LD_VAR 0 1
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: LD_INT 30
10800: PUSH
10801: LD_VAR 0 2
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 69
10818: ST_TO_ADDR
// list := [ ] ;
10819: LD_ADDR_VAR 0 6
10823: PUSH
10824: EMPTY
10825: ST_TO_ADDR
// for i = 1 to tmp do
10826: LD_ADDR_VAR 0 4
10830: PUSH
10831: DOUBLE
10832: LD_INT 1
10834: DEC
10835: ST_TO_ADDR
10836: LD_VAR 0 5
10840: PUSH
10841: FOR_TO
10842: IFFALSE 10930
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10844: LD_ADDR_VAR 0 6
10848: PUSH
10849: LD_VAR 0 6
10853: PUSH
10854: LD_VAR 0 5
10858: PUSH
10859: LD_VAR 0 4
10863: ARRAY
10864: PPUSH
10865: CALL_OW 266
10869: PUSH
10870: LD_VAR 0 5
10874: PUSH
10875: LD_VAR 0 4
10879: ARRAY
10880: PPUSH
10881: CALL_OW 250
10885: PUSH
10886: LD_VAR 0 5
10890: PUSH
10891: LD_VAR 0 4
10895: ARRAY
10896: PPUSH
10897: CALL_OW 251
10901: PUSH
10902: LD_VAR 0 5
10906: PUSH
10907: LD_VAR 0 4
10911: ARRAY
10912: PPUSH
10913: CALL_OW 254
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: ADD
10927: ST_TO_ADDR
10928: GO 10841
10930: POP
10931: POP
// result = list ;
10932: LD_ADDR_VAR 0 3
10936: PUSH
10937: LD_VAR 0 6
10941: ST_TO_ADDR
// end ;
10942: LD_VAR 0 3
10946: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10947: LD_INT 0
10949: PPUSH
10950: PPUSH
10951: PPUSH
10952: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10953: LD_VAR 0 1
10957: PPUSH
10958: LD_INT 81
10960: PUSH
10961: LD_VAR 0 1
10965: PPUSH
10966: CALL_OW 255
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PPUSH
10975: CALL_OW 69
10979: PPUSH
10980: LD_VAR 0 1
10984: PPUSH
10985: CALL_OW 74
10989: PPUSH
10990: CALL_OW 296
10994: PUSH
10995: LD_INT 18
10997: LESS
10998: IFFALSE 11043
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
11000: LD_VAR 0 1
11004: PPUSH
11005: LD_INT 81
11007: PUSH
11008: LD_VAR 0 1
11012: PPUSH
11013: CALL_OW 255
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PPUSH
11022: CALL_OW 69
11026: PPUSH
11027: LD_VAR 0 1
11031: PPUSH
11032: CALL_OW 74
11036: PPUSH
11037: CALL_OW 115
11041: GO 11062
// ComMoveXY ( behemoth , x , y ) ;
11043: LD_VAR 0 1
11047: PPUSH
11048: LD_VAR 0 4
11052: PPUSH
11053: LD_VAR 0 5
11057: PPUSH
11058: CALL_OW 111
// if time_lapsers_list > 0 then
11062: LD_VAR 0 2
11066: PUSH
11067: LD_INT 0
11069: GREATER
11070: IFFALSE 11264
// begin for i = 1 to time_lapsers_list do
11072: LD_ADDR_VAR 0 7
11076: PUSH
11077: DOUBLE
11078: LD_INT 1
11080: DEC
11081: ST_TO_ADDR
11082: LD_VAR 0 2
11086: PUSH
11087: FOR_TO
11088: IFFALSE 11262
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
11090: LD_VAR 0 2
11094: PUSH
11095: LD_VAR 0 7
11099: ARRAY
11100: PPUSH
11101: CALL_OW 256
11105: PUSH
11106: LD_INT 250
11108: GREATEREQUAL
11109: IFFALSE 11137
11111: PUSH
11112: LD_VAR 0 2
11116: PUSH
11117: LD_VAR 0 7
11121: ARRAY
11122: PPUSH
11123: LD_VAR 0 1
11127: PPUSH
11128: CALL_OW 296
11132: PUSH
11133: LD_INT 9
11135: GREATER
11136: AND
11137: IFFALSE 11174
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11139: LD_VAR 0 2
11143: PUSH
11144: LD_VAR 0 7
11148: ARRAY
11149: PPUSH
11150: LD_VAR 0 1
11154: PPUSH
11155: CALL_OW 250
11159: PPUSH
11160: LD_VAR 0 1
11164: PPUSH
11165: CALL_OW 251
11169: PPUSH
11170: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11174: LD_VAR 0 2
11178: PUSH
11179: LD_VAR 0 7
11183: ARRAY
11184: PPUSH
11185: CALL_OW 256
11189: PUSH
11190: LD_INT 500
11192: LESS
11193: IFFALSE 11210
11195: PUSH
11196: LD_VAR 0 1
11200: PPUSH
11201: CALL_OW 256
11205: PUSH
11206: LD_INT 700
11208: GREATER
11209: AND
11210: IFFALSE 11260
// for p = 1 to mechanic_list do
11212: LD_ADDR_VAR 0 8
11216: PUSH
11217: DOUBLE
11218: LD_INT 1
11220: DEC
11221: ST_TO_ADDR
11222: LD_VAR 0 3
11226: PUSH
11227: FOR_TO
11228: IFFALSE 11258
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11230: LD_VAR 0 3
11234: PUSH
11235: LD_VAR 0 8
11239: ARRAY
11240: PPUSH
11241: LD_VAR 0 2
11245: PUSH
11246: LD_VAR 0 7
11250: ARRAY
11251: PPUSH
11252: CALL_OW 129
11256: GO 11227
11258: POP
11259: POP
// end ;
11260: GO 11087
11262: POP
11263: POP
// end ; if mechanic_list then
11264: LD_VAR 0 3
11268: IFFALSE 11451
// begin for i = 1 to mechanic_list do
11270: LD_ADDR_VAR 0 7
11274: PUSH
11275: DOUBLE
11276: LD_INT 1
11278: DEC
11279: ST_TO_ADDR
11280: LD_VAR 0 3
11284: PUSH
11285: FOR_TO
11286: IFFALSE 11449
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11288: LD_VAR 0 3
11292: PUSH
11293: LD_VAR 0 7
11297: ARRAY
11298: PPUSH
11299: CALL_OW 256
11303: PUSH
11304: LD_INT 333
11306: LESS
11307: IFFALSE 11331
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11309: LD_ADDR_EXP 15
11313: PUSH
11314: LD_EXP 15
11318: PUSH
11319: LD_VAR 0 3
11323: PUSH
11324: LD_VAR 0 7
11328: ARRAY
11329: DIFF
11330: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11331: LD_VAR 0 3
11335: PUSH
11336: LD_VAR 0 7
11340: ARRAY
11341: PPUSH
11342: LD_VAR 0 1
11346: PPUSH
11347: CALL_OW 296
11351: PUSH
11352: LD_INT 9
11354: GREATER
11355: IFFALSE 11375
11357: PUSH
11358: LD_VAR 0 3
11362: PUSH
11363: LD_VAR 0 7
11367: ARRAY
11368: PPUSH
11369: CALL_OW 314
11373: NOT
11374: AND
11375: IFFALSE 11412
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11377: LD_VAR 0 3
11381: PUSH
11382: LD_VAR 0 7
11386: ARRAY
11387: PPUSH
11388: LD_VAR 0 1
11392: PPUSH
11393: CALL_OW 250
11397: PPUSH
11398: LD_VAR 0 1
11402: PPUSH
11403: CALL_OW 251
11407: PPUSH
11408: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11412: LD_VAR 0 1
11416: PPUSH
11417: CALL_OW 256
11421: PUSH
11422: LD_INT 700
11424: LESS
11425: IFFALSE 11447
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11427: LD_VAR 0 3
11431: PUSH
11432: LD_VAR 0 7
11436: ARRAY
11437: PPUSH
11438: LD_VAR 0 1
11442: PPUSH
11443: CALL_OW 129
// end ;
11447: GO 11285
11449: POP
11450: POP
// end ; end ;
11451: LD_VAR 0 6
11455: RET
// export function GetBehemoth ( side ) ; begin
11456: LD_INT 0
11458: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11459: LD_ADDR_VAR 0 2
11463: PUSH
11464: LD_INT 22
11466: PUSH
11467: LD_VAR 0 1
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 31
11478: PUSH
11479: LD_INT 25
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PPUSH
11490: CALL_OW 69
11494: ST_TO_ADDR
// end ;
11495: LD_VAR 0 2
11499: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11500: LD_INT 0
11502: PPUSH
11503: PPUSH
11504: PPUSH
11505: PPUSH
11506: PPUSH
11507: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11508: LD_ADDR_VAR 0 6
11512: PUSH
11513: LD_VAR 0 2
11517: PPUSH
11518: CALL_OW 435
11522: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11523: LD_ADDR_VAR 0 5
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: LD_VAR 0 1
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 2
11542: PUSH
11543: LD_INT 25
11545: PUSH
11546: LD_INT 2
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 25
11555: PUSH
11556: LD_INT 16
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: LIST
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PPUSH
11572: CALL_OW 69
11576: ST_TO_ADDR
// if skr then
11577: LD_VAR 0 6
11581: IFFALSE 11746
// begin if engs then
11583: LD_VAR 0 5
11587: IFFALSE 11746
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11589: LD_ADDR_VAR 0 8
11593: PUSH
11594: LD_VAR 0 6
11598: PUSH
11599: LD_INT 1
11601: ARRAY
11602: PPUSH
11603: LD_VAR 0 6
11607: PUSH
11608: LD_INT 2
11610: ARRAY
11611: PPUSH
11612: CALL_OW 284
11616: ST_TO_ADDR
// if am > engs then
11617: LD_VAR 0 8
11621: PUSH
11622: LD_VAR 0 5
11626: GREATER
11627: IFFALSE 11639
// am := engs ;
11629: LD_ADDR_VAR 0 8
11633: PUSH
11634: LD_VAR 0 5
11638: ST_TO_ADDR
// for i = 1 to am do
11639: LD_ADDR_VAR 0 7
11643: PUSH
11644: DOUBLE
11645: LD_INT 1
11647: DEC
11648: ST_TO_ADDR
11649: LD_VAR 0 8
11653: PUSH
11654: FOR_TO
11655: IFFALSE 11744
// begin if IsInUnit ( engs [ i ] ) then
11657: LD_VAR 0 5
11661: PUSH
11662: LD_VAR 0 7
11666: ARRAY
11667: PPUSH
11668: CALL_OW 310
11672: IFFALSE 11691
// ComExitBuilding ( engs [ i ] ) else
11674: LD_VAR 0 5
11678: PUSH
11679: LD_VAR 0 7
11683: ARRAY
11684: PPUSH
11685: CALL_OW 122
11689: GO 11742
// if not HasTask ( engs [ i ] ) then
11691: LD_VAR 0 5
11695: PUSH
11696: LD_VAR 0 7
11700: ARRAY
11701: PPUSH
11702: CALL_OW 314
11706: NOT
11707: IFFALSE 11742
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11709: LD_VAR 0 5
11713: PUSH
11714: LD_VAR 0 7
11718: ARRAY
11719: PPUSH
11720: LD_VAR 0 6
11724: PUSH
11725: LD_INT 1
11727: ARRAY
11728: PPUSH
11729: LD_VAR 0 6
11733: PUSH
11734: LD_INT 2
11736: ARRAY
11737: PPUSH
11738: CALL_OW 117
// end ;
11742: GO 11654
11744: POP
11745: POP
// end ; end ; end ; end_of_file
11746: LD_VAR 0 3
11750: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11751: LD_INT 0
11753: PPUSH
11754: PPUSH
// uc_side := 1 ;
11755: LD_ADDR_OWVAR 20
11759: PUSH
11760: LD_INT 1
11762: ST_TO_ADDR
// uc_nation := 1 ;
11763: LD_ADDR_OWVAR 21
11767: PUSH
11768: LD_INT 1
11770: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11771: LD_ADDR_VAR 0 2
11775: PUSH
11776: LD_INT 6
11778: PUSH
11779: LD_INT 5
11781: PUSH
11782: LD_INT 4
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: PUSH
11790: LD_OWVAR 67
11794: ARRAY
11795: ST_TO_ADDR
// game_status := false ;
11796: LD_ADDR_EXP 29
11800: PUSH
11801: LD_INT 0
11803: ST_TO_ADDR
// helps_arrive := false ;
11804: LD_ADDR_EXP 30
11808: PUSH
11809: LD_INT 0
11811: ST_TO_ADDR
// helps_can_arrive := false ;
11812: LD_ADDR_EXP 31
11816: PUSH
11817: LD_INT 0
11819: ST_TO_ADDR
// beta_come := false ;
11820: LD_ADDR_EXP 32
11824: PUSH
11825: LD_INT 0
11827: ST_TO_ADDR
// gamma_come := false ;
11828: LD_ADDR_EXP 33
11832: PUSH
11833: LD_INT 0
11835: ST_TO_ADDR
// zeta_come := false ;
11836: LD_ADDR_EXP 34
11840: PUSH
11841: LD_INT 0
11843: ST_TO_ADDR
// mine_ck := false ;
11844: LD_ADDR_EXP 35
11848: PUSH
11849: LD_INT 0
11851: ST_TO_ADDR
// sib_bomb_constructed := false ;
11852: LD_ADDR_EXP 36
11856: PUSH
11857: LD_INT 0
11859: ST_TO_ADDR
// mine_constructed := false ;
11860: LD_ADDR_EXP 37
11864: PUSH
11865: LD_INT 0
11867: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11868: LD_INT 35
11870: PPUSH
11871: CALL_OW 274
11875: PPUSH
11876: LD_INT 1
11878: PPUSH
11879: LD_INT 200
11881: PUSH
11882: LD_INT 100
11884: PUSH
11885: LD_INT 70
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: LIST
11892: PUSH
11893: LD_OWVAR 67
11897: ARRAY
11898: PPUSH
11899: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11903: LD_INT 35
11905: PPUSH
11906: LD_INT 4
11908: PPUSH
11909: CALL_OW 235
// hc_importance := 100 ;
11913: LD_ADDR_OWVAR 32
11917: PUSH
11918: LD_INT 100
11920: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11921: LD_INT 1
11923: PPUSH
11924: LD_INT 2
11926: PPUSH
11927: LD_VAR 0 2
11931: PUSH
11932: LD_INT 1
11934: PLUS
11935: PPUSH
11936: CALL_OW 380
// hc_gallery := hardch ;
11940: LD_ADDR_OWVAR 33
11944: PUSH
11945: LD_STRING hardch
11947: ST_TO_ADDR
// hc_face_number := 1 ;
11948: LD_ADDR_OWVAR 34
11952: PUSH
11953: LD_INT 1
11955: ST_TO_ADDR
// guyA := CreateHuman ;
11956: LD_ADDR_EXP 38
11960: PUSH
11961: CALL_OW 44
11965: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11966: LD_INT 1
11968: PPUSH
11969: LD_INT 1
11971: PPUSH
11972: LD_VAR 0 2
11976: PPUSH
11977: CALL_OW 380
// hc_face_number := 2 ;
11981: LD_ADDR_OWVAR 34
11985: PUSH
11986: LD_INT 2
11988: ST_TO_ADDR
// guyB := CreateHuman ;
11989: LD_ADDR_EXP 39
11993: PUSH
11994: CALL_OW 44
11998: ST_TO_ADDR
// hc_importance := 0 ;
11999: LD_ADDR_OWVAR 32
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// hc_gallery :=  ;
12007: LD_ADDR_OWVAR 33
12011: PUSH
12012: LD_STRING 
12014: ST_TO_ADDR
// end ;
12015: LD_VAR 0 1
12019: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
12020: LD_INT 0
12022: PPUSH
12023: PPUSH
12024: PPUSH
12025: PPUSH
12026: PPUSH
12027: PPUSH
12028: PPUSH
12029: PPUSH
12030: PPUSH
// uc_side := 4 ;
12031: LD_ADDR_OWVAR 20
12035: PUSH
12036: LD_INT 4
12038: ST_TO_ADDR
// uc_nation := 1 ;
12039: LD_ADDR_OWVAR 21
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12047: LD_ADDR_VAR 0 10
12051: PUSH
12052: LD_INT 6
12054: PUSH
12055: LD_INT 5
12057: PUSH
12058: LD_INT 4
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: PUSH
12066: LD_OWVAR 67
12070: ARRAY
12071: ST_TO_ADDR
// Beta_Squad := [ ] ;
12072: LD_ADDR_EXP 40
12076: PUSH
12077: EMPTY
12078: ST_TO_ADDR
// case num of 1 :
12079: LD_VAR 0 1
12083: PUSH
12084: LD_INT 1
12086: DOUBLE
12087: EQUAL
12088: IFTRUE 12092
12090: GO 12135
12092: POP
// begin sold := 2 ;
12093: LD_ADDR_VAR 0 5
12097: PUSH
12098: LD_INT 2
12100: ST_TO_ADDR
// sci := 1 ;
12101: LD_ADDR_VAR 0 6
12105: PUSH
12106: LD_INT 1
12108: ST_TO_ADDR
// mech := 2 ;
12109: LD_ADDR_VAR 0 7
12113: PUSH
12114: LD_INT 2
12116: ST_TO_ADDR
// tank := 1 ;
12117: LD_ADDR_VAR 0 8
12121: PUSH
12122: LD_INT 1
12124: ST_TO_ADDR
// cargo := 1 ;
12125: LD_ADDR_VAR 0 9
12129: PUSH
12130: LD_INT 1
12132: ST_TO_ADDR
// end ; 2 :
12133: GO 12238
12135: LD_INT 2
12137: DOUBLE
12138: EQUAL
12139: IFTRUE 12143
12141: GO 12186
12143: POP
// begin sold := 2 ;
12144: LD_ADDR_VAR 0 5
12148: PUSH
12149: LD_INT 2
12151: ST_TO_ADDR
// sci := 1 ;
12152: LD_ADDR_VAR 0 6
12156: PUSH
12157: LD_INT 1
12159: ST_TO_ADDR
// mech := 1 ;
12160: LD_ADDR_VAR 0 7
12164: PUSH
12165: LD_INT 1
12167: ST_TO_ADDR
// tank := 1 ;
12168: LD_ADDR_VAR 0 8
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// cargo := 0 ;
12176: LD_ADDR_VAR 0 9
12180: PUSH
12181: LD_INT 0
12183: ST_TO_ADDR
// end ; 3 :
12184: GO 12238
12186: LD_INT 3
12188: DOUBLE
12189: EQUAL
12190: IFTRUE 12194
12192: GO 12237
12194: POP
// begin sold := 1 ;
12195: LD_ADDR_VAR 0 5
12199: PUSH
12200: LD_INT 1
12202: ST_TO_ADDR
// sci := 1 ;
12203: LD_ADDR_VAR 0 6
12207: PUSH
12208: LD_INT 1
12210: ST_TO_ADDR
// mech := 1 ;
12211: LD_ADDR_VAR 0 7
12215: PUSH
12216: LD_INT 1
12218: ST_TO_ADDR
// tank := 1 ;
12219: LD_ADDR_VAR 0 8
12223: PUSH
12224: LD_INT 1
12226: ST_TO_ADDR
// cargo := 0 ;
12227: LD_ADDR_VAR 0 9
12231: PUSH
12232: LD_INT 0
12234: ST_TO_ADDR
// end ; end ;
12235: GO 12238
12237: POP
// for i = 1 to sold do
12238: LD_ADDR_VAR 0 3
12242: PUSH
12243: DOUBLE
12244: LD_INT 1
12246: DEC
12247: ST_TO_ADDR
12248: LD_VAR 0 5
12252: PUSH
12253: FOR_TO
12254: IFFALSE 12326
// begin if i = 1 then
12256: LD_VAR 0 3
12260: PUSH
12261: LD_INT 1
12263: EQUAL
12264: IFFALSE 12283
// PrepareHuman ( sex_male , 1 , skill ) else
12266: LD_INT 1
12268: PPUSH
12269: LD_INT 1
12271: PPUSH
12272: LD_VAR 0 10
12276: PPUSH
12277: CALL_OW 380
12281: GO 12298
// PrepareHuman ( false , 1 , skill ) ;
12283: LD_INT 0
12285: PPUSH
12286: LD_INT 1
12288: PPUSH
12289: LD_VAR 0 10
12293: PPUSH
12294: CALL_OW 380
// un := CreateHuman ;
12298: LD_ADDR_VAR 0 4
12302: PUSH
12303: CALL_OW 44
12307: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12308: LD_ADDR_EXP 40
12312: PUSH
12313: LD_EXP 40
12317: PUSH
12318: LD_VAR 0 4
12322: ADD
12323: ST_TO_ADDR
// end ;
12324: GO 12253
12326: POP
12327: POP
// for i = 1 to mech do
12328: LD_ADDR_VAR 0 3
12332: PUSH
12333: DOUBLE
12334: LD_INT 1
12336: DEC
12337: ST_TO_ADDR
12338: LD_VAR 0 7
12342: PUSH
12343: FOR_TO
12344: IFFALSE 12401
// begin PrepareHuman ( false , 3 , skill ) ;
12346: LD_INT 0
12348: PPUSH
12349: LD_INT 3
12351: PPUSH
12352: LD_VAR 0 10
12356: PPUSH
12357: CALL_OW 380
// un := CreateHuman ;
12361: LD_ADDR_VAR 0 4
12365: PUSH
12366: CALL_OW 44
12370: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12371: LD_VAR 0 4
12375: PPUSH
12376: LD_INT 3
12378: PPUSH
12379: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12383: LD_ADDR_EXP 40
12387: PUSH
12388: LD_EXP 40
12392: PUSH
12393: LD_VAR 0 4
12397: ADD
12398: ST_TO_ADDR
// end ;
12399: GO 12343
12401: POP
12402: POP
// for i = 1 to sci do
12403: LD_ADDR_VAR 0 3
12407: PUSH
12408: DOUBLE
12409: LD_INT 1
12411: DEC
12412: ST_TO_ADDR
12413: LD_VAR 0 6
12417: PUSH
12418: FOR_TO
12419: IFFALSE 12464
// begin PrepareHuman ( false , 4 , skill ) ;
12421: LD_INT 0
12423: PPUSH
12424: LD_INT 4
12426: PPUSH
12427: LD_VAR 0 10
12431: PPUSH
12432: CALL_OW 380
// un := CreateHuman ;
12436: LD_ADDR_VAR 0 4
12440: PUSH
12441: CALL_OW 44
12445: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12446: LD_ADDR_EXP 40
12450: PUSH
12451: LD_EXP 40
12455: PUSH
12456: LD_VAR 0 4
12460: ADD
12461: ST_TO_ADDR
// end ;
12462: GO 12418
12464: POP
12465: POP
// for i = 1 to tank do
12466: LD_ADDR_VAR 0 3
12470: PUSH
12471: DOUBLE
12472: LD_INT 1
12474: DEC
12475: ST_TO_ADDR
12476: LD_VAR 0 8
12480: PUSH
12481: FOR_TO
12482: IFFALSE 12595
// begin Randomize ;
12484: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12488: LD_ADDR_OWVAR 37
12492: PUSH
12493: LD_INT 3
12495: ST_TO_ADDR
// vc_engine := engine_solar ;
12496: LD_ADDR_OWVAR 39
12500: PUSH
12501: LD_INT 2
12503: ST_TO_ADDR
// vc_control := control_manual ;
12504: LD_ADDR_OWVAR 38
12508: PUSH
12509: LD_INT 1
12511: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12512: LD_ADDR_OWVAR 40
12516: PUSH
12517: LD_INT 4
12519: PUSH
12520: LD_INT 5
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 1
12529: PPUSH
12530: LD_INT 2
12532: PPUSH
12533: CALL_OW 12
12537: ARRAY
12538: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12539: LD_ADDR_OWVAR 41
12543: PUSH
12544: LD_INT 35
12546: PPUSH
12547: LD_INT 55
12549: PPUSH
12550: CALL_OW 12
12554: ST_TO_ADDR
// un := CreateVehicle ;
12555: LD_ADDR_VAR 0 4
12559: PUSH
12560: CALL_OW 45
12564: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12565: LD_VAR 0 4
12569: PPUSH
12570: LD_INT 5
12572: PPUSH
12573: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12577: LD_ADDR_EXP 40
12581: PUSH
12582: LD_EXP 40
12586: PUSH
12587: LD_VAR 0 4
12591: ADD
12592: ST_TO_ADDR
// end ;
12593: GO 12481
12595: POP
12596: POP
// if cargo then
12597: LD_VAR 0 9
12601: IFFALSE 12704
// begin vc_chassis := us_medium_tracked ;
12603: LD_ADDR_OWVAR 37
12607: PUSH
12608: LD_INT 3
12610: ST_TO_ADDR
// vc_engine := engine_solar ;
12611: LD_ADDR_OWVAR 39
12615: PUSH
12616: LD_INT 2
12618: ST_TO_ADDR
// vc_control := control_manual ;
12619: LD_ADDR_OWVAR 38
12623: PUSH
12624: LD_INT 1
12626: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12627: LD_ADDR_OWVAR 40
12631: PUSH
12632: LD_INT 12
12634: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12635: LD_ADDR_OWVAR 41
12639: PUSH
12640: LD_INT 35
12642: PPUSH
12643: LD_INT 55
12645: PPUSH
12646: CALL_OW 12
12650: ST_TO_ADDR
// un := CreateVehicle ;
12651: LD_ADDR_VAR 0 4
12655: PUSH
12656: CALL_OW 45
12660: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12661: LD_VAR 0 4
12665: PPUSH
12666: LD_INT 5
12668: PPUSH
12669: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12673: LD_ADDR_EXP 40
12677: PUSH
12678: LD_EXP 40
12682: PUSH
12683: LD_VAR 0 4
12687: ADD
12688: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12689: LD_VAR 0 4
12693: PPUSH
12694: LD_INT 1
12696: PPUSH
12697: LD_INT 60
12699: PPUSH
12700: CALL_OW 290
// end ; end ;
12704: LD_VAR 0 2
12708: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12709: LD_INT 0
12711: PPUSH
12712: PPUSH
12713: PPUSH
12714: PPUSH
12715: PPUSH
12716: PPUSH
12717: PPUSH
12718: PPUSH
12719: PPUSH
12720: PPUSH
// uc_side := 4 ;
12721: LD_ADDR_OWVAR 20
12725: PUSH
12726: LD_INT 4
12728: ST_TO_ADDR
// uc_nation := 1 ;
12729: LD_ADDR_OWVAR 21
12733: PUSH
12734: LD_INT 1
12736: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12737: LD_ADDR_VAR 0 11
12741: PUSH
12742: LD_INT 6
12744: PUSH
12745: LD_INT 5
12747: PUSH
12748: LD_INT 4
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: PUSH
12756: LD_OWVAR 67
12760: ARRAY
12761: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12762: LD_ADDR_EXP 41
12766: PUSH
12767: EMPTY
12768: ST_TO_ADDR
// case num of 1 :
12769: LD_VAR 0 1
12773: PUSH
12774: LD_INT 1
12776: DOUBLE
12777: EQUAL
12778: IFTRUE 12782
12780: GO 12833
12782: POP
// begin sold := 2 ;
12783: LD_ADDR_VAR 0 5
12787: PUSH
12788: LD_INT 2
12790: ST_TO_ADDR
// eng := 2 ;
12791: LD_ADDR_VAR 0 6
12795: PUSH
12796: LD_INT 2
12798: ST_TO_ADDR
// sci := 0 ;
12799: LD_ADDR_VAR 0 7
12803: PUSH
12804: LD_INT 0
12806: ST_TO_ADDR
// mech := 1 ;
12807: LD_ADDR_VAR 0 8
12811: PUSH
12812: LD_INT 1
12814: ST_TO_ADDR
// tank := 0 ;
12815: LD_ADDR_VAR 0 9
12819: PUSH
12820: LD_INT 0
12822: ST_TO_ADDR
// cargo := 1 ;
12823: LD_ADDR_VAR 0 10
12827: PUSH
12828: LD_INT 1
12830: ST_TO_ADDR
// end ; 2 :
12831: GO 12952
12833: LD_INT 2
12835: DOUBLE
12836: EQUAL
12837: IFTRUE 12841
12839: GO 12892
12841: POP
// begin sold := 1 ;
12842: LD_ADDR_VAR 0 5
12846: PUSH
12847: LD_INT 1
12849: ST_TO_ADDR
// eng := 2 ;
12850: LD_ADDR_VAR 0 6
12854: PUSH
12855: LD_INT 2
12857: ST_TO_ADDR
// sci := 0 ;
12858: LD_ADDR_VAR 0 7
12862: PUSH
12863: LD_INT 0
12865: ST_TO_ADDR
// mech := 1 ;
12866: LD_ADDR_VAR 0 8
12870: PUSH
12871: LD_INT 1
12873: ST_TO_ADDR
// tank := 0 ;
12874: LD_ADDR_VAR 0 9
12878: PUSH
12879: LD_INT 0
12881: ST_TO_ADDR
// cargo := 1 ;
12882: LD_ADDR_VAR 0 10
12886: PUSH
12887: LD_INT 1
12889: ST_TO_ADDR
// end ; 3 :
12890: GO 12952
12892: LD_INT 3
12894: DOUBLE
12895: EQUAL
12896: IFTRUE 12900
12898: GO 12951
12900: POP
// begin sold := 1 ;
12901: LD_ADDR_VAR 0 5
12905: PUSH
12906: LD_INT 1
12908: ST_TO_ADDR
// eng := 1 ;
12909: LD_ADDR_VAR 0 6
12913: PUSH
12914: LD_INT 1
12916: ST_TO_ADDR
// sci := 0 ;
12917: LD_ADDR_VAR 0 7
12921: PUSH
12922: LD_INT 0
12924: ST_TO_ADDR
// mech := 1 ;
12925: LD_ADDR_VAR 0 8
12929: PUSH
12930: LD_INT 1
12932: ST_TO_ADDR
// tank := 0 ;
12933: LD_ADDR_VAR 0 9
12937: PUSH
12938: LD_INT 0
12940: ST_TO_ADDR
// cargo := 1 ;
12941: LD_ADDR_VAR 0 10
12945: PUSH
12946: LD_INT 1
12948: ST_TO_ADDR
// end ; end ;
12949: GO 12952
12951: POP
// for i = 1 to sold do
12952: LD_ADDR_VAR 0 3
12956: PUSH
12957: DOUBLE
12958: LD_INT 1
12960: DEC
12961: ST_TO_ADDR
12962: LD_VAR 0 5
12966: PUSH
12967: FOR_TO
12968: IFFALSE 13040
// begin if i = 1 then
12970: LD_VAR 0 3
12974: PUSH
12975: LD_INT 1
12977: EQUAL
12978: IFFALSE 12997
// PrepareHuman ( sex_male , 1 , skill ) else
12980: LD_INT 1
12982: PPUSH
12983: LD_INT 1
12985: PPUSH
12986: LD_VAR 0 11
12990: PPUSH
12991: CALL_OW 380
12995: GO 13012
// PrepareHuman ( false , 1 , skill ) ;
12997: LD_INT 0
12999: PPUSH
13000: LD_INT 1
13002: PPUSH
13003: LD_VAR 0 11
13007: PPUSH
13008: CALL_OW 380
// un := CreateHuman ;
13012: LD_ADDR_VAR 0 4
13016: PUSH
13017: CALL_OW 44
13021: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13022: LD_ADDR_EXP 41
13026: PUSH
13027: LD_EXP 41
13031: PUSH
13032: LD_VAR 0 4
13036: ADD
13037: ST_TO_ADDR
// end ;
13038: GO 12967
13040: POP
13041: POP
// for i = 1 to mech do
13042: LD_ADDR_VAR 0 3
13046: PUSH
13047: DOUBLE
13048: LD_INT 1
13050: DEC
13051: ST_TO_ADDR
13052: LD_VAR 0 8
13056: PUSH
13057: FOR_TO
13058: IFFALSE 13115
// begin PrepareHuman ( false , 3 , skill ) ;
13060: LD_INT 0
13062: PPUSH
13063: LD_INT 3
13065: PPUSH
13066: LD_VAR 0 11
13070: PPUSH
13071: CALL_OW 380
// un := CreateHuman ;
13075: LD_ADDR_VAR 0 4
13079: PUSH
13080: CALL_OW 44
13084: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13085: LD_VAR 0 4
13089: PPUSH
13090: LD_INT 3
13092: PPUSH
13093: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13097: LD_ADDR_EXP 41
13101: PUSH
13102: LD_EXP 41
13106: PUSH
13107: LD_VAR 0 4
13111: ADD
13112: ST_TO_ADDR
// end ;
13113: GO 13057
13115: POP
13116: POP
// for i = 1 to eng do
13117: LD_ADDR_VAR 0 3
13121: PUSH
13122: DOUBLE
13123: LD_INT 1
13125: DEC
13126: ST_TO_ADDR
13127: LD_VAR 0 6
13131: PUSH
13132: FOR_TO
13133: IFFALSE 13178
// begin PrepareHuman ( false , 2 , skill ) ;
13135: LD_INT 0
13137: PPUSH
13138: LD_INT 2
13140: PPUSH
13141: LD_VAR 0 11
13145: PPUSH
13146: CALL_OW 380
// un := CreateHuman ;
13150: LD_ADDR_VAR 0 4
13154: PUSH
13155: CALL_OW 44
13159: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13160: LD_ADDR_EXP 41
13164: PUSH
13165: LD_EXP 41
13169: PUSH
13170: LD_VAR 0 4
13174: ADD
13175: ST_TO_ADDR
// end ;
13176: GO 13132
13178: POP
13179: POP
// for i = 1 to tank do
13180: LD_ADDR_VAR 0 3
13184: PUSH
13185: DOUBLE
13186: LD_INT 1
13188: DEC
13189: ST_TO_ADDR
13190: LD_VAR 0 9
13194: PUSH
13195: FOR_TO
13196: IFFALSE 13309
// begin Randomize ;
13198: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13202: LD_ADDR_OWVAR 37
13206: PUSH
13207: LD_INT 2
13209: ST_TO_ADDR
// vc_engine := engine_siberite ;
13210: LD_ADDR_OWVAR 39
13214: PUSH
13215: LD_INT 3
13217: ST_TO_ADDR
// vc_control := control_manual ;
13218: LD_ADDR_OWVAR 38
13222: PUSH
13223: LD_INT 1
13225: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13226: LD_ADDR_OWVAR 40
13230: PUSH
13231: LD_INT 7
13233: PUSH
13234: LD_INT 9
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 1
13243: PPUSH
13244: LD_INT 2
13246: PPUSH
13247: CALL_OW 12
13251: ARRAY
13252: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13253: LD_ADDR_OWVAR 41
13257: PUSH
13258: LD_INT 35
13260: PPUSH
13261: LD_INT 55
13263: PPUSH
13264: CALL_OW 12
13268: ST_TO_ADDR
// un := CreateVehicle ;
13269: LD_ADDR_VAR 0 4
13273: PUSH
13274: CALL_OW 45
13278: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_INT 5
13286: PPUSH
13287: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13291: LD_ADDR_EXP 41
13295: PUSH
13296: LD_EXP 41
13300: PUSH
13301: LD_VAR 0 4
13305: ADD
13306: ST_TO_ADDR
// end ;
13307: GO 13195
13309: POP
13310: POP
// if cargo then
13311: LD_VAR 0 10
13315: IFFALSE 13433
// begin vc_chassis := us_medium_tracked ;
13317: LD_ADDR_OWVAR 37
13321: PUSH
13322: LD_INT 3
13324: ST_TO_ADDR
// vc_engine := engine_combustion ;
13325: LD_ADDR_OWVAR 39
13329: PUSH
13330: LD_INT 1
13332: ST_TO_ADDR
// vc_control := control_manual ;
13333: LD_ADDR_OWVAR 38
13337: PUSH
13338: LD_INT 1
13340: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13341: LD_ADDR_OWVAR 40
13345: PUSH
13346: LD_INT 12
13348: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13349: LD_ADDR_OWVAR 41
13353: PUSH
13354: LD_INT 35
13356: PPUSH
13357: LD_INT 55
13359: PPUSH
13360: CALL_OW 12
13364: ST_TO_ADDR
// un := CreateVehicle ;
13365: LD_ADDR_VAR 0 4
13369: PUSH
13370: CALL_OW 45
13374: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13375: LD_VAR 0 4
13379: PPUSH
13380: LD_INT 5
13382: PPUSH
13383: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13387: LD_ADDR_EXP 41
13391: PUSH
13392: LD_EXP 41
13396: PUSH
13397: LD_VAR 0 4
13401: ADD
13402: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13403: LD_VAR 0 4
13407: PPUSH
13408: LD_INT 3
13410: PPUSH
13411: LD_INT 30
13413: PPUSH
13414: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13418: LD_VAR 0 4
13422: PPUSH
13423: LD_INT 1
13425: PPUSH
13426: LD_INT 40
13428: PPUSH
13429: CALL_OW 290
// end ; end ;
13433: LD_VAR 0 2
13437: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13438: LD_INT 0
13440: PPUSH
13441: PPUSH
13442: PPUSH
13443: PPUSH
13444: PPUSH
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
13449: PPUSH
// uc_side := 4 ;
13450: LD_ADDR_OWVAR 20
13454: PUSH
13455: LD_INT 4
13457: ST_TO_ADDR
// uc_nation := 1 ;
13458: LD_ADDR_OWVAR 21
13462: PUSH
13463: LD_INT 1
13465: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13466: LD_ADDR_VAR 0 10
13470: PUSH
13471: LD_INT 6
13473: PUSH
13474: LD_INT 5
13476: PUSH
13477: LD_INT 4
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: LIST
13484: PUSH
13485: LD_OWVAR 67
13489: ARRAY
13490: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13491: LD_ADDR_EXP 42
13495: PUSH
13496: EMPTY
13497: ST_TO_ADDR
// sold := 1 ;
13498: LD_ADDR_VAR 0 4
13502: PUSH
13503: LD_INT 1
13505: ST_TO_ADDR
// eng := 0 ;
13506: LD_ADDR_VAR 0 5
13510: PUSH
13511: LD_INT 0
13513: ST_TO_ADDR
// sci := 0 ;
13514: LD_ADDR_VAR 0 6
13518: PUSH
13519: LD_INT 0
13521: ST_TO_ADDR
// mech := 3 ;
13522: LD_ADDR_VAR 0 7
13526: PUSH
13527: LD_INT 3
13529: ST_TO_ADDR
// tank := 3 ;
13530: LD_ADDR_VAR 0 8
13534: PUSH
13535: LD_INT 3
13537: ST_TO_ADDR
// cargo := 0 ;
13538: LD_ADDR_VAR 0 9
13542: PUSH
13543: LD_INT 0
13545: ST_TO_ADDR
// for i = 1 to sold do
13546: LD_ADDR_VAR 0 2
13550: PUSH
13551: DOUBLE
13552: LD_INT 1
13554: DEC
13555: ST_TO_ADDR
13556: LD_VAR 0 4
13560: PUSH
13561: FOR_TO
13562: IFFALSE 13634
// begin if i = 1 then
13564: LD_VAR 0 2
13568: PUSH
13569: LD_INT 1
13571: EQUAL
13572: IFFALSE 13591
// PrepareHuman ( sex_male , 1 , skill ) else
13574: LD_INT 1
13576: PPUSH
13577: LD_INT 1
13579: PPUSH
13580: LD_VAR 0 10
13584: PPUSH
13585: CALL_OW 380
13589: GO 13606
// PrepareHuman ( false , 1 , skill ) ;
13591: LD_INT 0
13593: PPUSH
13594: LD_INT 1
13596: PPUSH
13597: LD_VAR 0 10
13601: PPUSH
13602: CALL_OW 380
// un := CreateHuman ;
13606: LD_ADDR_VAR 0 3
13610: PUSH
13611: CALL_OW 44
13615: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13616: LD_ADDR_EXP 42
13620: PUSH
13621: LD_EXP 42
13625: PUSH
13626: LD_VAR 0 3
13630: ADD
13631: ST_TO_ADDR
// end ;
13632: GO 13561
13634: POP
13635: POP
// for i = 1 to mech do
13636: LD_ADDR_VAR 0 2
13640: PUSH
13641: DOUBLE
13642: LD_INT 1
13644: DEC
13645: ST_TO_ADDR
13646: LD_VAR 0 7
13650: PUSH
13651: FOR_TO
13652: IFFALSE 13709
// begin PrepareHuman ( false , 3 , skill ) ;
13654: LD_INT 0
13656: PPUSH
13657: LD_INT 3
13659: PPUSH
13660: LD_VAR 0 10
13664: PPUSH
13665: CALL_OW 380
// un := CreateHuman ;
13669: LD_ADDR_VAR 0 3
13673: PUSH
13674: CALL_OW 44
13678: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13679: LD_VAR 0 3
13683: PPUSH
13684: LD_INT 3
13686: PPUSH
13687: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13691: LD_ADDR_EXP 42
13695: PUSH
13696: LD_EXP 42
13700: PUSH
13701: LD_VAR 0 3
13705: ADD
13706: ST_TO_ADDR
// end ;
13707: GO 13651
13709: POP
13710: POP
// for i = 1 to tank do
13711: LD_ADDR_VAR 0 2
13715: PUSH
13716: DOUBLE
13717: LD_INT 1
13719: DEC
13720: ST_TO_ADDR
13721: LD_VAR 0 8
13725: PUSH
13726: FOR_TO
13727: IFFALSE 13973
// begin Randomize ;
13729: CALL_OW 10
// if i < 3 then
13733: LD_VAR 0 2
13737: PUSH
13738: LD_INT 3
13740: LESS
13741: IFFALSE 13850
// begin vc_chassis := us_medium_tracked ;
13743: LD_ADDR_OWVAR 37
13747: PUSH
13748: LD_INT 3
13750: ST_TO_ADDR
// vc_engine := engine_combustion ;
13751: LD_ADDR_OWVAR 39
13755: PUSH
13756: LD_INT 1
13758: ST_TO_ADDR
// vc_control := control_manual ;
13759: LD_ADDR_OWVAR 38
13763: PUSH
13764: LD_INT 1
13766: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13767: LD_ADDR_OWVAR 40
13771: PUSH
13772: LD_INT 3
13774: PUSH
13775: LD_INT 9
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: LD_INT 1
13784: PPUSH
13785: LD_INT 2
13787: PPUSH
13788: CALL_OW 12
13792: ARRAY
13793: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13794: LD_ADDR_OWVAR 41
13798: PUSH
13799: LD_INT 35
13801: PPUSH
13802: LD_INT 55
13804: PPUSH
13805: CALL_OW 12
13809: ST_TO_ADDR
// un := CreateVehicle ;
13810: LD_ADDR_VAR 0 3
13814: PUSH
13815: CALL_OW 45
13819: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13820: LD_VAR 0 3
13824: PPUSH
13825: LD_INT 5
13827: PPUSH
13828: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13832: LD_ADDR_EXP 42
13836: PUSH
13837: LD_EXP 42
13841: PUSH
13842: LD_VAR 0 3
13846: ADD
13847: ST_TO_ADDR
// end else
13848: GO 13971
// begin uc_nation := 3 ;
13850: LD_ADDR_OWVAR 21
13854: PUSH
13855: LD_INT 3
13857: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13858: LD_ADDR_OWVAR 37
13862: PUSH
13863: LD_INT 22
13865: ST_TO_ADDR
// vc_engine := engine_combustion ;
13866: LD_ADDR_OWVAR 39
13870: PUSH
13871: LD_INT 1
13873: ST_TO_ADDR
// vc_control := control_manual ;
13874: LD_ADDR_OWVAR 38
13878: PUSH
13879: LD_INT 1
13881: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13882: LD_ADDR_OWVAR 40
13886: PUSH
13887: LD_INT 51
13889: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13890: LD_ADDR_OWVAR 41
13894: PUSH
13895: LD_INT 35
13897: PPUSH
13898: LD_INT 55
13900: PPUSH
13901: CALL_OW 12
13905: ST_TO_ADDR
// un := CreateVehicle ;
13906: LD_ADDR_VAR 0 3
13910: PUSH
13911: CALL_OW 45
13915: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13916: LD_VAR 0 3
13920: PPUSH
13921: LD_INT 496
13923: PPUSH
13924: CALL_OW 234
// SetTag ( un , 5 ) ;
13928: LD_VAR 0 3
13932: PPUSH
13933: LD_INT 5
13935: PPUSH
13936: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13940: LD_VAR 0 3
13944: PPUSH
13945: LD_INT 2
13947: PPUSH
13948: LD_INT 100
13950: PPUSH
13951: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13955: LD_ADDR_EXP 42
13959: PUSH
13960: LD_EXP 42
13964: PUSH
13965: LD_VAR 0 3
13969: ADD
13970: ST_TO_ADDR
// end ; end ;
13971: GO 13726
13973: POP
13974: POP
// end ; end_of_file
13975: LD_VAR 0 1
13979: RET
// export function Action ; begin
13980: LD_INT 0
13982: PPUSH
// InGameOn ;
13983: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13987: LD_INT 151
13989: PPUSH
13990: LD_INT 107
13992: PPUSH
13993: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13997: LD_EXP 38
14001: PPUSH
14002: LD_INT 171
14004: PPUSH
14005: LD_INT 108
14007: PPUSH
14008: LD_INT 0
14010: PPUSH
14011: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
14015: LD_EXP 39
14019: PPUSH
14020: LD_INT 172
14022: PPUSH
14023: LD_INT 110
14025: PPUSH
14026: LD_INT 0
14028: PPUSH
14029: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
14033: LD_EXP 38
14037: PPUSH
14038: LD_INT 156
14040: PPUSH
14041: LD_INT 107
14043: PPUSH
14044: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
14048: LD_EXP 39
14052: PPUSH
14053: LD_INT 154
14055: PPUSH
14056: LD_INT 105
14058: PPUSH
14059: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
14063: LD_INT 4
14065: PPUSH
14066: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
14070: LD_EXP 38
14074: PPUSH
14075: CALL_OW 250
14079: PUSH
14080: LD_INT 156
14082: EQUAL
14083: IFFALSE 14100
14085: PUSH
14086: LD_EXP 38
14090: PPUSH
14091: CALL_OW 251
14095: PUSH
14096: LD_INT 107
14098: EQUAL
14099: AND
14100: IFFALSE 14063
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
14102: LD_EXP 38
14106: PUSH
14107: LD_EXP 39
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PPUSH
14116: LD_INT 35
14118: PPUSH
14119: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
14123: LD_EXP 38
14127: PPUSH
14128: LD_STRING D1-A-1
14130: PPUSH
14131: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14135: LD_EXP 39
14139: PPUSH
14140: LD_STRING D1-B-1
14142: PPUSH
14143: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14147: LD_EXP 38
14151: PPUSH
14152: LD_STRING D1-A-2
14154: PPUSH
14155: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14159: LD_EXP 39
14163: PPUSH
14164: LD_STRING D1-B-2
14166: PPUSH
14167: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14171: LD_EXP 38
14175: PUSH
14176: LD_EXP 39
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PPUSH
14185: LD_INT 147
14187: PPUSH
14188: LD_INT 108
14190: PPUSH
14191: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14195: LD_EXP 38
14199: PPUSH
14200: LD_STRING D1-A-3
14202: PPUSH
14203: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14207: LD_INT 4
14209: PPUSH
14210: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14214: LD_EXP 38
14218: PPUSH
14219: LD_INT 35
14221: PPUSH
14222: CALL_OW 296
14226: PUSH
14227: LD_INT 8
14229: LESS
14230: IFFALSE 14207
// ComTurnUnit ( guyA , guyB ) ;
14232: LD_EXP 38
14236: PPUSH
14237: LD_EXP 39
14241: PPUSH
14242: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14246: LD_EXP 39
14250: PPUSH
14251: LD_EXP 38
14255: PPUSH
14256: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14260: LD_EXP 38
14264: PPUSH
14265: LD_STRING D1-A-10
14267: PPUSH
14268: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14272: LD_EXP 39
14276: PPUSH
14277: LD_STRING D1-B-10
14279: PPUSH
14280: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14284: LD_EXP 38
14288: PPUSH
14289: LD_STRING D1-A-11
14291: PPUSH
14292: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14296: LD_EXP 39
14300: PPUSH
14301: LD_STRING D1-B-11
14303: PPUSH
14304: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14308: LD_EXP 38
14312: PPUSH
14313: LD_STRING D1-A-12
14315: PPUSH
14316: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14320: LD_EXP 39
14324: PPUSH
14325: LD_STRING D1-B-12
14327: PPUSH
14328: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14332: LD_EXP 38
14336: PPUSH
14337: LD_STRING D1-A-13
14339: PPUSH
14340: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14344: LD_EXP 39
14348: PPUSH
14349: LD_STRING D1-B-13
14351: PPUSH
14352: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14356: LD_EXP 38
14360: PPUSH
14361: LD_STRING D1-A-14
14363: PPUSH
14364: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14368: LD_EXP 39
14372: PPUSH
14373: LD_STRING D1-B-14
14375: PPUSH
14376: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14380: LD_EXP 38
14384: PPUSH
14385: LD_STRING D1-A-15
14387: PPUSH
14388: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14392: LD_EXP 39
14396: PPUSH
14397: LD_STRING D1-B-15
14399: PPUSH
14400: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14404: LD_EXP 38
14408: PPUSH
14409: LD_STRING D1-A-16
14411: PPUSH
14412: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14416: LD_EXP 39
14420: PPUSH
14421: LD_STRING D1-B-16
14423: PPUSH
14424: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14428: LD_EXP 38
14432: PPUSH
14433: LD_STRING D1-A-17
14435: PPUSH
14436: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14440: LD_EXP 39
14444: PPUSH
14445: LD_STRING D1-B-17
14447: PPUSH
14448: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14452: LD_EXP 38
14456: PPUSH
14457: LD_STRING D1-A-18
14459: PPUSH
14460: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14464: LD_INT 35
14466: PPUSH
14467: LD_INT 1
14469: PPUSH
14470: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14474: LD_EXP 38
14478: PUSH
14479: LD_EXP 39
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PPUSH
14488: LD_INT 35
14490: PPUSH
14491: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14495: LD_INT 4
14497: PPUSH
14498: CALL_OW 67
// until IsInUnit ( guyA ) ;
14502: LD_EXP 38
14506: PPUSH
14507: CALL_OW 310
14511: IFFALSE 14495
// Wait ( 0 0$02 ) ;
14513: LD_INT 70
14515: PPUSH
14516: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14520: LD_EXP 38
14524: PPUSH
14525: LD_STRING D1-A-19
14527: PPUSH
14528: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14532: LD_EXP 39
14536: PPUSH
14537: LD_STRING D1-B-19
14539: PPUSH
14540: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14544: LD_EXP 38
14548: PPUSH
14549: LD_STRING D1-A-20
14551: PPUSH
14552: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14556: LD_INT 10
14558: PPUSH
14559: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14563: LD_EXP 39
14567: PPUSH
14568: LD_STRING D1-B-20
14570: PPUSH
14571: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14575: LD_EXP 38
14579: PPUSH
14580: LD_STRING D1-A-21
14582: PPUSH
14583: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14587: LD_EXP 39
14591: PPUSH
14592: LD_STRING D1-B-21
14594: PPUSH
14595: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14599: LD_EXP 38
14603: PPUSH
14604: LD_STRING D1-A-22
14606: PPUSH
14607: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14611: LD_EXP 39
14615: PPUSH
14616: LD_STRING D1-B-22
14618: PPUSH
14619: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14623: LD_EXP 38
14627: PPUSH
14628: LD_STRING D1-A-23
14630: PPUSH
14631: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14635: LD_EXP 39
14639: PPUSH
14640: LD_STRING D1-B-23
14642: PPUSH
14643: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14647: LD_EXP 38
14651: PPUSH
14652: LD_STRING D1-A-24
14654: PPUSH
14655: CALL_OW 88
// InGameOff ;
14659: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14663: LD_STRING M_main
14665: PPUSH
14666: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14670: LD_INT 4
14672: PPUSH
14673: LD_INT 1
14675: PPUSH
14676: CALL_OW 343
// game_status := true ;
14680: LD_ADDR_EXP 29
14684: PUSH
14685: LD_INT 1
14687: ST_TO_ADDR
// end ;
14688: LD_VAR 0 1
14692: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14693: LD_INT 1
14695: PPUSH
14696: CALL 6446 0 1
14700: PUSH
14701: LD_INT 0
14703: GREATER
14704: IFFALSE 14810
14706: GO 14708
14708: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14709: LD_INT 35
14711: PPUSH
14712: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14716: LD_INT 1
14718: PPUSH
14719: CALL 6446 0 1
14723: PUSH
14724: LD_INT 1
14726: ARRAY
14727: PPUSH
14728: CALL_OW 461
14732: PUSH
14733: LD_INT 1
14735: NONEQUAL
14736: IFFALSE 14709
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14738: LD_EXP 38
14742: PPUSH
14743: CALL_OW 300
14747: IFFALSE 14760
14749: PUSH
14750: LD_EXP 39
14754: PPUSH
14755: CALL_OW 300
14759: AND
14760: IFFALSE 14769
14762: PUSH
14763: LD_EXP 30
14767: NOT
14768: AND
14769: IFFALSE 14795
// begin Say ( guyA , DL-A-1 ) ;
14771: LD_EXP 38
14775: PPUSH
14776: LD_STRING DL-A-1
14778: PPUSH
14779: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14783: LD_EXP 39
14787: PPUSH
14788: LD_STRING DL-B-1
14790: PPUSH
14791: CALL_OW 88
// end ; if not helps_can_arrive then
14795: LD_EXP 31
14799: NOT
14800: IFFALSE 14810
// helps_can_arrive := true ;
14802: LD_ADDR_EXP 31
14806: PUSH
14807: LD_INT 1
14809: ST_TO_ADDR
// end ;
14810: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14811: LD_INT 1
14813: PPUSH
14814: CALL 6446 0 1
14818: PUSH
14819: LD_INT 0
14821: GREATER
14822: IFFALSE 14835
14824: PUSH
14825: LD_EXP 38
14829: PPUSH
14830: CALL_OW 300
14834: AND
14835: IFFALSE 14848
14837: PUSH
14838: LD_EXP 39
14842: PPUSH
14843: CALL_OW 300
14847: AND
14848: IFFALSE 14884
14850: PUSH
14851: LD_INT 22
14853: PUSH
14854: LD_INT 1
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 25
14863: PUSH
14864: LD_INT 12
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PPUSH
14875: CALL_OW 69
14879: PUSH
14880: LD_INT 0
14882: EQUAL
14883: AND
14884: IFFALSE 14920
14886: PUSH
14887: LD_INT 1
14889: PPUSH
14890: LD_INT 25
14892: PUSH
14893: LD_INT 12
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PPUSH
14900: CALL_OW 69
14904: PPUSH
14905: LD_EXP 38
14909: PPUSH
14910: CALL_OW 74
14914: PPUSH
14915: CALL_OW 292
14919: AND
14920: IFFALSE 14961
14922: GO 14924
14924: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14925: LD_EXP 38
14929: PPUSH
14930: LD_STRING DA-A-1
14932: PPUSH
14933: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14937: LD_EXP 39
14941: PPUSH
14942: LD_STRING DA-B-1
14944: PPUSH
14945: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14949: LD_EXP 38
14953: PPUSH
14954: LD_STRING DA-A-2
14956: PPUSH
14957: CALL_OW 88
// end ;
14961: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14962: LD_EXP 29
14966: IFFALSE 14986
14968: PUSH
14969: LD_EXP 38
14973: PPUSH
14974: LD_INT 6
14976: PPUSH
14977: CALL_OW 299
14981: PUSH
14982: LD_INT 7
14984: LESS
14985: AND
14986: IFFALSE 15039
14988: GO 14990
14990: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14991: LD_INT 117
14993: PPUSH
14994: LD_INT 50
14996: PPUSH
14997: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
15001: LD_INT 1
15003: PPUSH
15004: CALL 10113 0 1
15008: PUSH
15009: LD_INT 2
15011: ARRAY
15012: PPUSH
15013: LD_STRING D5-A-1
15015: PPUSH
15016: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
15020: LD_INT 1
15022: PPUSH
15023: CALL 10113 0 1
15027: PUSH
15028: LD_INT 1
15030: ARRAY
15031: PPUSH
15032: LD_STRING D5-B-1
15034: PPUSH
15035: CALL_OW 88
// end ;
15039: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
15040: LD_INT 7
15042: PPUSH
15043: LD_INT 22
15045: PUSH
15046: LD_INT 1
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PPUSH
15053: CALL_OW 70
15057: PUSH
15058: LD_INT 0
15060: GREATER
15061: IFFALSE 15206
15063: GO 15065
15065: DISABLE
// begin Wait ( 0 0$03 ) ;
15066: LD_INT 105
15068: PPUSH
15069: CALL_OW 67
// DialogueOn ;
15073: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
15077: LD_INT 1
15079: PPUSH
15080: CALL 10113 0 1
15084: PUSH
15085: LD_INT 1
15087: ARRAY
15088: PPUSH
15089: LD_STRING D6-A-1
15091: PPUSH
15092: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
15096: LD_INT 1
15098: PPUSH
15099: CALL 10113 0 1
15103: PUSH
15104: LD_INT 2
15106: ARRAY
15107: PPUSH
15108: LD_STRING D6-B-1
15110: PPUSH
15111: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
15115: LD_INT 95
15117: PPUSH
15118: LD_INT 8
15120: PPUSH
15121: LD_INT 1
15123: PPUSH
15124: LD_INT 20
15126: PPUSH
15127: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
15131: LD_INT 10
15133: PPUSH
15134: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
15138: LD_INT 1
15140: PPUSH
15141: CALL 10113 0 1
15145: PUSH
15146: LD_INT 1
15148: ARRAY
15149: PPUSH
15150: LD_STRING D6-A-2
15152: PPUSH
15153: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15157: LD_INT 1
15159: PPUSH
15160: CALL 10113 0 1
15164: PUSH
15165: LD_INT 2
15167: ARRAY
15168: PPUSH
15169: LD_STRING D6-B-2
15171: PPUSH
15172: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15176: LD_INT 1
15178: PPUSH
15179: CALL 10113 0 1
15183: PUSH
15184: LD_INT 1
15186: ARRAY
15187: PPUSH
15188: LD_STRING D6-A-3
15190: PPUSH
15191: CALL_OW 88
// DialogueOff ;
15195: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15199: LD_STRING M_base
15201: PPUSH
15202: CALL_OW 337
// end ;
15206: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15207: LD_EXP 30
15211: NOT
15212: IFFALSE 15248
15214: PUSH
15215: LD_INT 22
15217: PUSH
15218: LD_INT 3
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: LD_INT 21
15227: PUSH
15228: LD_INT 2
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PPUSH
15239: CALL_OW 69
15243: PUSH
15244: LD_INT 0
15246: GREATER
15247: AND
15248: IFFALSE 15381
15250: GO 15252
15252: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15253: LD_INT 35
15255: PPUSH
15256: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15260: LD_INT 22
15262: PUSH
15263: LD_INT 3
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 21
15272: PUSH
15273: LD_INT 2
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PPUSH
15284: CALL_OW 69
15288: PPUSH
15289: LD_INT 1
15291: PPUSH
15292: CALL 10113 0 1
15296: PUSH
15297: LD_INT 1
15299: ARRAY
15300: PPUSH
15301: CALL_OW 74
15305: PPUSH
15306: LD_INT 1
15308: PPUSH
15309: CALL 10113 0 1
15313: PUSH
15314: LD_INT 1
15316: ARRAY
15317: PPUSH
15318: CALL_OW 296
15322: PUSH
15323: LD_INT 7
15325: LESS
15326: IFFALSE 15253
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15328: LD_INT 1
15330: PPUSH
15331: CALL 10113 0 1
15335: PUSH
15336: LD_INT 1
15338: ARRAY
15339: PPUSH
15340: LD_STRING DR-A-1
15342: PPUSH
15343: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15347: LD_INT 1
15349: PPUSH
15350: CALL 10113 0 1
15354: PUSH
15355: LD_INT 2
15357: ARRAY
15358: PPUSH
15359: LD_STRING DR-B-1
15361: PPUSH
15362: CALL_OW 88
// Wait ( 3 3$00 ) ;
15366: LD_INT 6300
15368: PPUSH
15369: CALL_OW 67
// ru_spotted := true ;
15373: LD_ADDR_EXP 16
15377: PUSH
15378: LD_INT 1
15380: ST_TO_ADDR
// end ;
15381: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15382: LD_INT 35
15384: PPUSH
15385: CALL_OW 300
15389: NOT
15390: IFFALSE 15414
15392: GO 15394
15394: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15395: LD_INT 1
15397: PPUSH
15398: CALL 10113 0 1
15402: PUSH
15403: LD_INT 1
15405: ARRAY
15406: PPUSH
15407: LD_STRING DDR-A-1
15409: PPUSH
15410: CALL_OW 88
15414: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15415: LD_INT 1
15417: PPUSH
15418: LD_INT 30
15420: PPUSH
15421: CALL 6297 0 2
15425: IFFALSE 15507
15427: GO 15429
15429: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15430: LD_INT 35
15432: PPUSH
15433: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15437: LD_INT 1
15439: PPUSH
15440: LD_INT 30
15442: PPUSH
15443: CALL 6297 0 2
15447: PUSH
15448: LD_INT 1
15450: ARRAY
15451: PPUSH
15452: CALL_OW 461
15456: PUSH
15457: LD_INT 1
15459: NONEQUAL
15460: IFFALSE 15430
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15462: LD_INT 1
15464: PPUSH
15465: CALL 10113 0 1
15469: PUSH
15470: LD_INT 1
15472: ARRAY
15473: PPUSH
15474: LD_STRING D8-A-1
15476: PPUSH
15477: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15481: LD_INT 1
15483: PPUSH
15484: CALL 10113 0 1
15488: PUSH
15489: LD_INT 2
15491: ARRAY
15492: PPUSH
15493: LD_STRING D8-B-1
15495: PPUSH
15496: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15500: LD_STRING M_mineok
15502: PPUSH
15503: CALL_OW 337
// end ;
15507: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15508: LD_INT 22
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 30
15520: PUSH
15521: LD_INT 0
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: LD_INT 57
15533: PUSH
15534: EMPTY
15535: LIST
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: LIST
15545: PPUSH
15546: CALL_OW 69
15550: PUSH
15551: LD_INT 1
15553: GREATER
15554: IFTRUE 15616
15556: PUSH
15557: LD_INT 22
15559: PUSH
15560: LD_INT 1
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 30
15569: PUSH
15570: LD_INT 0
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 3
15579: PUSH
15580: LD_INT 57
15582: PUSH
15583: EMPTY
15584: LIST
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: LIST
15594: PPUSH
15595: CALL_OW 69
15599: PUSH
15600: LD_INT 1
15602: EQUAL
15603: IFFALSE 15615
15605: PUSH
15606: LD_INT 35
15608: PPUSH
15609: CALL_OW 300
15613: NOT
15614: AND
15615: OR
15616: IFFALSE 15668
15618: GO 15620
15620: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15621: LD_INT 22
15623: PUSH
15624: LD_INT 1
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 25
15633: PUSH
15634: LD_INT 2
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PPUSH
15645: CALL_OW 69
15649: PUSH
15650: LD_INT 1
15652: ARRAY
15653: PPUSH
15654: LD_STRING D7-A-1
15656: PPUSH
15657: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15661: LD_STRING M_baseok
15663: PPUSH
15664: CALL_OW 337
// end ;
15668: END
// every 0 0$01 trigger mine_ck do
15669: LD_EXP 35
15673: IFFALSE 15704
15675: GO 15677
15677: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15678: LD_INT 1
15680: PPUSH
15681: CALL 10113 0 1
15685: PUSH
15686: LD_INT 1
15688: ARRAY
15689: PPUSH
15690: LD_STRING D9-A-1
15692: PPUSH
15693: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15697: LD_STRING M_minedest
15699: PPUSH
15700: CALL_OW 337
// end ;
15704: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15705: LD_EXP 29
15709: IFFALSE 16215
15711: GO 15713
15713: DISABLE
15714: LD_INT 0
15716: PPUSH
15717: PPUSH
15718: PPUSH
15719: PPUSH
15720: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15721: LD_OWVAR 67
15725: PPUSH
15726: CALL 12020 0 1
// if not helps_can_arrive then
15730: LD_EXP 31
15734: NOT
15735: IFFALSE 15763
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15737: LD_EXP 40
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PPUSH
15746: LD_STRING DB-Delay
15748: PPUSH
15749: CALL_OW 94
// time := 10 10$00 ;
15753: LD_ADDR_VAR 0 1
15757: PUSH
15758: LD_INT 21000
15760: ST_TO_ADDR
// end else
15761: GO 15771
// time := 3 3$00 ;
15763: LD_ADDR_VAR 0 1
15767: PUSH
15768: LD_INT 6300
15770: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15771: LD_ADDR_VAR 0 1
15775: PUSH
15776: LD_VAR 0 1
15780: PUSH
15781: LD_INT 35
15783: MINUS
15784: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15785: LD_INT 35
15787: PPUSH
15788: CALL_OW 67
// end until time = 0 0$00 ;
15792: LD_VAR 0 1
15796: PUSH
15797: LD_INT 0
15799: EQUAL
15800: IFFALSE 15771
// helps_arrive := true ;
15802: LD_ADDR_EXP 30
15806: PUSH
15807: LD_INT 1
15809: ST_TO_ADDR
// if IsLive ( guyA ) then
15810: LD_EXP 38
15814: PPUSH
15815: CALL_OW 300
15819: IFFALSE 15833
// r := guyA else
15821: LD_ADDR_VAR 0 4
15825: PUSH
15826: LD_EXP 38
15830: ST_TO_ADDR
15831: GO 15843
// r := guyB ;
15833: LD_ADDR_VAR 0 4
15837: PUSH
15838: LD_EXP 39
15842: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15843: LD_EXP 40
15847: PUSH
15848: LD_INT 1
15850: ARRAY
15851: PPUSH
15852: LD_STRING D2-A-1
15854: PPUSH
15855: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15859: LD_VAR 0 4
15863: PPUSH
15864: LD_STRING D2-B-1
15866: PPUSH
15867: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15871: LD_EXP 40
15875: PUSH
15876: LD_INT 1
15878: ARRAY
15879: PPUSH
15880: LD_STRING D2-A-2
15882: PPUSH
15883: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15887: LD_VAR 0 4
15891: PPUSH
15892: LD_STRING D2-B-2
15894: PPUSH
15895: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15899: LD_EXP 40
15903: PUSH
15904: LD_INT 1
15906: ARRAY
15907: PPUSH
15908: LD_STRING D2-A-3
15910: PPUSH
15911: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15915: LD_VAR 0 4
15919: PPUSH
15920: LD_STRING D2-B-3
15922: PPUSH
15923: CALL_OW 88
// to_veh := [ ] ;
15927: LD_ADDR_VAR 0 5
15931: PUSH
15932: EMPTY
15933: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15934: LD_ADDR_VAR 0 2
15938: PUSH
15939: DOUBLE
15940: LD_INT 1
15942: DEC
15943: ST_TO_ADDR
15944: LD_EXP 40
15948: PUSH
15949: FOR_TO
15950: IFFALSE 16213
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15952: LD_EXP 40
15956: PUSH
15957: LD_VAR 0 2
15961: ARRAY
15962: PPUSH
15963: CALL_OW 110
15967: PUSH
15968: LD_INT 3
15970: EQUAL
15971: IFFALSE 15997
// to_veh := to_veh ^ Beta_Squad [ i ] else
15973: LD_ADDR_VAR 0 5
15977: PUSH
15978: LD_VAR 0 5
15982: PUSH
15983: LD_EXP 40
15987: PUSH
15988: LD_VAR 0 2
15992: ARRAY
15993: ADD
15994: ST_TO_ADDR
15995: GO 16122
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15997: LD_EXP 40
16001: PUSH
16002: LD_VAR 0 2
16006: ARRAY
16007: PPUSH
16008: CALL_OW 110
16012: PUSH
16013: LD_INT 5
16015: EQUAL
16016: IFFALSE 16101
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
16018: LD_EXP 40
16022: PUSH
16023: LD_VAR 0 2
16027: ARRAY
16028: PPUSH
16029: LD_INT 4
16031: PPUSH
16032: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
16036: LD_EXP 40
16040: PUSH
16041: LD_VAR 0 2
16045: ARRAY
16046: PPUSH
16047: LD_INT 5
16049: PPUSH
16050: LD_INT 0
16052: PPUSH
16053: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
16057: LD_VAR 0 5
16061: PUSH
16062: LD_INT 1
16064: ARRAY
16065: PPUSH
16066: LD_EXP 40
16070: PUSH
16071: LD_VAR 0 2
16075: ARRAY
16076: PPUSH
16077: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16081: LD_ADDR_VAR 0 5
16085: PUSH
16086: LD_VAR 0 5
16090: PPUSH
16091: LD_INT 1
16093: PPUSH
16094: CALL_OW 3
16098: ST_TO_ADDR
// end else
16099: GO 16122
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
16101: LD_EXP 40
16105: PUSH
16106: LD_VAR 0 2
16110: ARRAY
16111: PPUSH
16112: LD_INT 5
16114: PPUSH
16115: LD_INT 0
16117: PPUSH
16118: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
16122: LD_EXP 40
16126: PUSH
16127: LD_VAR 0 2
16131: ARRAY
16132: PPUSH
16133: LD_INT 165
16135: PPUSH
16136: LD_INT 105
16138: PPUSH
16139: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16143: LD_INT 70
16145: PPUSH
16146: LD_INT 140
16148: PPUSH
16149: CALL_OW 12
16153: PPUSH
16154: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16158: LD_EXP 40
16162: PUSH
16163: LD_VAR 0 2
16167: ARRAY
16168: PPUSH
16169: LD_INT 1
16171: PPUSH
16172: CALL_OW 235
// if i = 1 then
16176: LD_VAR 0 2
16180: PUSH
16181: LD_INT 1
16183: EQUAL
16184: IFFALSE 16196
// CenterNowOnXY ( 168 , 109 ) ;
16186: LD_INT 168
16188: PPUSH
16189: LD_INT 109
16191: PPUSH
16192: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16196: LD_EXP 40
16200: PUSH
16201: LD_VAR 0 2
16205: ARRAY
16206: PPUSH
16207: CALL_OW 141
// end ;
16211: GO 15949
16213: POP
16214: POP
// end ;
16215: PPOPN 5
16217: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16218: LD_EXP 30
16222: IFFALSE 17251
16224: GO 16226
16226: DISABLE
16227: LD_INT 0
16229: PPUSH
16230: PPUSH
// begin Wait ( 5 5$00 ) ;
16231: LD_INT 10500
16233: PPUSH
16234: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16238: LD_OWVAR 67
16242: PPUSH
16243: CALL 12709 0 1
// to_veh := [ ] ;
16247: LD_ADDR_VAR 0 2
16251: PUSH
16252: EMPTY
16253: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16254: LD_ADDR_VAR 0 1
16258: PUSH
16259: DOUBLE
16260: LD_INT 1
16262: DEC
16263: ST_TO_ADDR
16264: LD_EXP 41
16268: PUSH
16269: FOR_TO
16270: IFFALSE 16498
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16272: LD_EXP 41
16276: PUSH
16277: LD_VAR 0 1
16281: ARRAY
16282: PPUSH
16283: CALL_OW 110
16287: PUSH
16288: LD_INT 3
16290: EQUAL
16291: IFFALSE 16317
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16293: LD_ADDR_VAR 0 2
16297: PUSH
16298: LD_VAR 0 2
16302: PUSH
16303: LD_EXP 41
16307: PUSH
16308: LD_VAR 0 1
16312: ARRAY
16313: ADD
16314: ST_TO_ADDR
16315: GO 16442
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16317: LD_EXP 41
16321: PUSH
16322: LD_VAR 0 1
16326: ARRAY
16327: PPUSH
16328: CALL_OW 110
16332: PUSH
16333: LD_INT 5
16335: EQUAL
16336: IFFALSE 16421
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16338: LD_EXP 41
16342: PUSH
16343: LD_VAR 0 1
16347: ARRAY
16348: PPUSH
16349: LD_INT 4
16351: PPUSH
16352: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16356: LD_EXP 41
16360: PUSH
16361: LD_VAR 0 1
16365: ARRAY
16366: PPUSH
16367: LD_INT 5
16369: PPUSH
16370: LD_INT 0
16372: PPUSH
16373: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16377: LD_VAR 0 2
16381: PUSH
16382: LD_INT 1
16384: ARRAY
16385: PPUSH
16386: LD_EXP 41
16390: PUSH
16391: LD_VAR 0 1
16395: ARRAY
16396: PPUSH
16397: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16401: LD_ADDR_VAR 0 2
16405: PUSH
16406: LD_VAR 0 2
16410: PPUSH
16411: LD_INT 1
16413: PPUSH
16414: CALL_OW 3
16418: ST_TO_ADDR
// end else
16419: GO 16442
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16421: LD_EXP 41
16425: PUSH
16426: LD_VAR 0 1
16430: ARRAY
16431: PPUSH
16432: LD_INT 5
16434: PPUSH
16435: LD_INT 0
16437: PPUSH
16438: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16442: LD_EXP 41
16446: PUSH
16447: LD_VAR 0 1
16451: ARRAY
16452: PPUSH
16453: LD_INT 164
16455: PPUSH
16456: LD_INT 104
16458: PPUSH
16459: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16463: LD_INT 70
16465: PPUSH
16466: LD_INT 140
16468: PPUSH
16469: CALL_OW 12
16473: PPUSH
16474: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16478: LD_EXP 41
16482: PUSH
16483: LD_VAR 0 1
16487: ARRAY
16488: PPUSH
16489: LD_INT 1
16491: PPUSH
16492: CALL_OW 235
// end ;
16496: GO 16269
16498: POP
16499: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16500: LD_EXP 41
16504: PUSH
16505: LD_INT 1
16507: ARRAY
16508: PPUSH
16509: LD_STRING D3-A-1
16511: PPUSH
16512: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16516: LD_INT 1
16518: PPUSH
16519: CALL 10113 0 1
16523: PUSH
16524: LD_INT 1
16526: ARRAY
16527: PPUSH
16528: LD_STRING D3-B-1
16530: PPUSH
16531: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16535: LD_EXP 41
16539: PUSH
16540: LD_INT 1
16542: ARRAY
16543: PPUSH
16544: LD_STRING D3-A-2
16546: PPUSH
16547: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16551: LD_INT 1
16553: PPUSH
16554: CALL 10113 0 1
16558: PUSH
16559: LD_INT 1
16561: ARRAY
16562: PPUSH
16563: LD_STRING D3-B-2
16565: PPUSH
16566: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16570: LD_EXP 41
16574: PUSH
16575: LD_INT 1
16577: ARRAY
16578: PPUSH
16579: LD_STRING D3-A-3
16581: PPUSH
16582: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16586: LD_INT 1
16588: PPUSH
16589: CALL 10113 0 1
16593: PUSH
16594: LD_INT 1
16596: ARRAY
16597: PPUSH
16598: LD_STRING D3-B-3
16600: PPUSH
16601: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16605: LD_EXP 41
16609: PUSH
16610: LD_INT 1
16612: ARRAY
16613: PPUSH
16614: LD_STRING D3-A-4
16616: PPUSH
16617: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16621: LD_INT 1
16623: PPUSH
16624: CALL 10113 0 1
16628: PUSH
16629: LD_INT 1
16631: ARRAY
16632: PPUSH
16633: LD_STRING D3-B-4
16635: PPUSH
16636: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16640: LD_EXP 41
16644: PUSH
16645: LD_INT 1
16647: ARRAY
16648: PPUSH
16649: LD_STRING D3-A-5
16651: PPUSH
16652: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16656: LD_INT 1
16658: PPUSH
16659: CALL 10113 0 1
16663: PUSH
16664: LD_INT 1
16666: ARRAY
16667: PPUSH
16668: LD_STRING D3-B-5
16670: PPUSH
16671: CALL_OW 88
// for i = 1 to Gamma_Squad do
16675: LD_ADDR_VAR 0 1
16679: PUSH
16680: DOUBLE
16681: LD_INT 1
16683: DEC
16684: ST_TO_ADDR
16685: LD_EXP 41
16689: PUSH
16690: FOR_TO
16691: IFFALSE 16713
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16693: LD_EXP 41
16697: PUSH
16698: LD_VAR 0 1
16702: ARRAY
16703: PPUSH
16704: LD_INT 1
16706: PPUSH
16707: CALL_OW 235
16711: GO 16690
16713: POP
16714: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16715: LD_INT 6300
16717: PUSH
16718: LD_INT 10500
16720: PUSH
16721: LD_INT 11550
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: PUSH
16729: LD_OWVAR 67
16733: ARRAY
16734: PPUSH
16735: CALL_OW 67
// AddZetaSquad ;
16739: CALL 13438 0 0
// Wait ( 0 0$10 ) ;
16743: LD_INT 350
16745: PPUSH
16746: CALL_OW 67
// to_veh := [ ] ;
16750: LD_ADDR_VAR 0 2
16754: PUSH
16755: EMPTY
16756: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16757: LD_ADDR_VAR 0 1
16761: PUSH
16762: DOUBLE
16763: LD_INT 1
16765: DEC
16766: ST_TO_ADDR
16767: LD_EXP 42
16771: PUSH
16772: FOR_TO
16773: IFFALSE 16983
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16775: LD_EXP 42
16779: PUSH
16780: LD_VAR 0 1
16784: ARRAY
16785: PPUSH
16786: CALL_OW 110
16790: PUSH
16791: LD_INT 3
16793: EQUAL
16794: IFFALSE 16820
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16796: LD_ADDR_VAR 0 2
16800: PUSH
16801: LD_VAR 0 2
16805: PUSH
16806: LD_EXP 42
16810: PUSH
16811: LD_VAR 0 1
16815: ARRAY
16816: ADD
16817: ST_TO_ADDR
16818: GO 16945
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16820: LD_EXP 42
16824: PUSH
16825: LD_VAR 0 1
16829: ARRAY
16830: PPUSH
16831: CALL_OW 110
16835: PUSH
16836: LD_INT 5
16838: EQUAL
16839: IFFALSE 16924
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16841: LD_EXP 42
16845: PUSH
16846: LD_VAR 0 1
16850: ARRAY
16851: PPUSH
16852: LD_INT 4
16854: PPUSH
16855: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16859: LD_EXP 42
16863: PUSH
16864: LD_VAR 0 1
16868: ARRAY
16869: PPUSH
16870: LD_INT 5
16872: PPUSH
16873: LD_INT 0
16875: PPUSH
16876: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16880: LD_VAR 0 2
16884: PUSH
16885: LD_INT 1
16887: ARRAY
16888: PPUSH
16889: LD_EXP 42
16893: PUSH
16894: LD_VAR 0 1
16898: ARRAY
16899: PPUSH
16900: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16904: LD_ADDR_VAR 0 2
16908: PUSH
16909: LD_VAR 0 2
16913: PPUSH
16914: LD_INT 1
16916: PPUSH
16917: CALL_OW 3
16921: ST_TO_ADDR
// end else
16922: GO 16945
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16924: LD_EXP 42
16928: PUSH
16929: LD_VAR 0 1
16933: ARRAY
16934: PPUSH
16935: LD_INT 5
16937: PPUSH
16938: LD_INT 0
16940: PPUSH
16941: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16945: LD_EXP 42
16949: PUSH
16950: LD_VAR 0 1
16954: ARRAY
16955: PPUSH
16956: LD_INT 165
16958: PPUSH
16959: LD_INT 105
16961: PPUSH
16962: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16966: LD_INT 70
16968: PPUSH
16969: LD_INT 140
16971: PPUSH
16972: CALL_OW 12
16976: PPUSH
16977: CALL_OW 67
// end ;
16981: GO 16772
16983: POP
16984: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16985: LD_EXP 42
16989: PUSH
16990: LD_INT 1
16992: ARRAY
16993: PPUSH
16994: LD_STRING D4-A-1
16996: PPUSH
16997: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
17001: LD_INT 1
17003: PPUSH
17004: CALL 10113 0 1
17008: PUSH
17009: LD_INT 1
17011: ARRAY
17012: PPUSH
17013: LD_STRING D4-B-1
17015: PPUSH
17016: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
17020: LD_EXP 42
17024: PUSH
17025: LD_INT 1
17027: ARRAY
17028: PPUSH
17029: LD_STRING D4-A-2
17031: PPUSH
17032: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
17036: LD_INT 1
17038: PPUSH
17039: CALL 10113 0 1
17043: PUSH
17044: LD_INT 1
17046: ARRAY
17047: PPUSH
17048: LD_STRING D4-B-2
17050: PPUSH
17051: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
17055: LD_EXP 42
17059: PUSH
17060: LD_INT 1
17062: ARRAY
17063: PPUSH
17064: LD_STRING D4-A-3
17066: PPUSH
17067: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
17071: LD_INT 1
17073: PPUSH
17074: CALL 10113 0 1
17078: PUSH
17079: LD_INT 1
17081: ARRAY
17082: PPUSH
17083: LD_STRING D4-B-3
17085: PPUSH
17086: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
17090: LD_EXP 42
17094: PUSH
17095: LD_INT 1
17097: ARRAY
17098: PPUSH
17099: LD_STRING D4-A-4
17101: PPUSH
17102: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
17106: LD_INT 1
17108: PPUSH
17109: CALL 10113 0 1
17113: PUSH
17114: LD_INT 1
17116: ARRAY
17117: PPUSH
17118: LD_STRING D4-B-4
17120: PPUSH
17121: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
17125: LD_EXP 42
17129: PUSH
17130: LD_INT 1
17132: ARRAY
17133: PPUSH
17134: LD_STRING D4-A-5
17136: PPUSH
17137: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
17141: LD_INT 1
17143: PPUSH
17144: CALL 10113 0 1
17148: PUSH
17149: LD_INT 1
17151: ARRAY
17152: PPUSH
17153: LD_STRING D4-B-5
17155: PPUSH
17156: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17160: LD_EXP 42
17164: PUSH
17165: LD_INT 1
17167: ARRAY
17168: PPUSH
17169: LD_STRING D4-A-6
17171: PPUSH
17172: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17176: LD_INT 1
17178: PPUSH
17179: CALL 10113 0 1
17183: PUSH
17184: LD_INT 1
17186: ARRAY
17187: PPUSH
17188: LD_STRING D4-B-6
17190: PPUSH
17191: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17195: LD_EXP 42
17199: PUSH
17200: LD_INT 1
17202: ARRAY
17203: PPUSH
17204: LD_STRING D4-A-7
17206: PPUSH
17207: CALL_OW 94
// for i = 1 to Zeta_Squad do
17211: LD_ADDR_VAR 0 1
17215: PUSH
17216: DOUBLE
17217: LD_INT 1
17219: DEC
17220: ST_TO_ADDR
17221: LD_EXP 42
17225: PUSH
17226: FOR_TO
17227: IFFALSE 17249
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17229: LD_EXP 42
17233: PUSH
17234: LD_VAR 0 1
17238: ARRAY
17239: PPUSH
17240: LD_INT 1
17242: PPUSH
17243: CALL_OW 235
17247: GO 17226
17249: POP
17250: POP
// end ;
17251: PPOPN 2
17253: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17254: LD_INT 11
17256: PPUSH
17257: LD_INT 22
17259: PUSH
17260: LD_OWVAR 2
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PPUSH
17269: CALL_OW 70
17273: PUSH
17274: LD_INT 0
17276: GREATER
17277: IFFALSE 17302
17279: GO 17281
17281: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17282: LD_EXP 38
17286: PPUSH
17287: LD_STRING D10-A-1
17289: PPUSH
17290: CALL_OW 88
// ru_spotted := true ;
17294: LD_ADDR_EXP 16
17298: PUSH
17299: LD_INT 1
17301: ST_TO_ADDR
// end ;
17302: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17303: LD_EXP 38
17307: PPUSH
17308: CALL_OW 301
17312: IFTRUE 17325
17314: PUSH
17315: LD_EXP 39
17319: PPUSH
17320: CALL_OW 301
17324: OR
17325: IFFALSE 17337
17327: GO 17329
17329: DISABLE
// begin YouLost ( DieP ) ;
17330: LD_STRING DieP
17332: PPUSH
17333: CALL_OW 104
// end ;
17337: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17338: LD_INT 34
17340: PUSH
17341: LD_INT 8
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PPUSH
17348: CALL_OW 69
17352: IFFALSE 17365
17354: GO 17356
17356: DISABLE
// sib_bomb_constructed := true ;
17357: LD_ADDR_EXP 36
17361: PUSH
17362: LD_INT 1
17364: ST_TO_ADDR
17365: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17366: LD_EXP 29
17370: IFFALSE 17392
17372: PUSH
17373: LD_INT 22
17375: PUSH
17376: LD_INT 3
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PPUSH
17383: CALL_OW 69
17387: PUSH
17388: LD_INT 0
17390: EQUAL
17391: AND
17392: IFFALSE 17597
17394: GO 17396
17396: DISABLE
17397: LD_INT 0
17399: PPUSH
// begin game_status := false ;
17400: LD_ADDR_EXP 29
17404: PUSH
17405: LD_INT 0
17407: ST_TO_ADDR
// if not depotConstructed then
17408: LD_EXP 2
17412: NOT
17413: IFFALSE 17422
// SetAchievement ( ACH_NODEPOT ) ;
17415: LD_STRING ACH_NODEPOT
17417: PPUSH
17418: CALL_OW 543
// if Difficulty = 3 then
17422: LD_OWVAR 67
17426: PUSH
17427: LD_INT 3
17429: EQUAL
17430: IFFALSE 17439
// SetAchievement ( ACH_HARD ) ;
17432: LD_STRING ACH_HARD
17434: PPUSH
17435: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17439: LD_OWVAR 1
17443: PUSH
17444: LD_INT 35
17446: DIVREAL
17447: PUSH
17448: LD_INT 60
17450: DIVREAL
17451: PUSH
17452: LD_INT 70
17454: PUSH
17455: LD_INT 60
17457: PUSH
17458: LD_INT 50
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: PUSH
17466: LD_OWVAR 67
17470: ARRAY
17471: LESS
17472: IFFALSE 17486
// AddMedal ( play , 1 ) else
17474: LD_STRING play
17476: PPUSH
17477: LD_INT 1
17479: PPUSH
17480: CALL_OW 101
17484: GO 17497
// AddMedal ( play , - 1 ) ;
17486: LD_STRING play
17488: PPUSH
17489: LD_INT 1
17491: NEG
17492: PPUSH
17493: CALL_OW 101
// if sib_bomb_constructed then
17497: LD_EXP 36
17501: IFFALSE 17515
// AddMedal ( sibbomb , 1 ) else
17503: LD_STRING sibbomb
17505: PPUSH
17506: LD_INT 1
17508: PPUSH
17509: CALL_OW 101
17513: GO 17526
// AddMedal ( sibbomb , - 1 ) ;
17515: LD_STRING sibbomb
17517: PPUSH
17518: LD_INT 1
17520: NEG
17521: PPUSH
17522: CALL_OW 101
// if mine_constructed and not mine_ck then
17526: LD_EXP 37
17530: IFFALSE 17539
17532: PUSH
17533: LD_EXP 35
17537: NOT
17538: AND
17539: IFFALSE 17551
// AddMedal ( mine , 1 ) ;
17541: LD_STRING mine
17543: PPUSH
17544: LD_INT 1
17546: PPUSH
17547: CALL_OW 101
// if mine_ck then
17551: LD_EXP 35
17555: IFFALSE 17568
// AddMedal ( mine , - 1 ) ;
17557: LD_STRING mine
17559: PPUSH
17560: LD_INT 1
17562: NEG
17563: PPUSH
17564: CALL_OW 101
// if not mine_constructed then
17568: LD_EXP 37
17572: NOT
17573: IFFALSE 17586
// AddMedal ( mine , - 2 ) ;
17575: LD_STRING mine
17577: PPUSH
17578: LD_INT 2
17580: NEG
17581: PPUSH
17582: CALL_OW 101
// GiveMedals ( Main ) ;
17586: LD_STRING Main
17588: PPUSH
17589: CALL_OW 102
// YouWin ;
17593: CALL_OW 103
// end ; end_of_file
17597: PPOPN 1
17599: END
// every 0 0$03 trigger game_status do var time ;
17600: LD_EXP 29
17604: IFFALSE 17769
17606: GO 17608
17608: DISABLE
17609: LD_INT 0
17611: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17612: LD_ADDR_VAR 0 1
17616: PUSH
17617: LD_INT 1050
17619: PUSH
17620: LD_INT 1575
17622: PUSH
17623: LD_INT 2100
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: PUSH
17631: LD_OWVAR 67
17635: ARRAY
17636: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17637: LD_VAR 0 1
17641: PUSH
17642: LD_INT 0
17644: PPUSH
17645: LD_INT 420
17647: PPUSH
17648: CALL_OW 12
17652: PLUS
17653: PPUSH
17654: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17658: LD_INT 1
17660: PPUSH
17661: LD_INT 5
17663: PPUSH
17664: CALL_OW 12
17668: PPUSH
17669: LD_INT 1
17671: PPUSH
17672: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17676: LD_INT 105
17678: PPUSH
17679: LD_INT 1050
17681: PPUSH
17682: CALL_OW 12
17686: PPUSH
17687: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17691: LD_INT 1
17693: PPUSH
17694: LD_INT 5
17696: PPUSH
17697: CALL_OW 12
17701: PPUSH
17702: LD_INT 148
17704: PPUSH
17705: LD_INT 107
17707: PPUSH
17708: LD_INT 20
17710: PPUSH
17711: LD_INT 1
17713: PPUSH
17714: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17718: LD_OWVAR 1
17722: PUSH
17723: LD_INT 44100
17725: PUSH
17726: LD_INT 37800
17728: PUSH
17729: LD_INT 33600
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: LIST
17736: PUSH
17737: LD_OWVAR 67
17741: ARRAY
17742: MOD
17743: IFFALSE 17759
// time := time + 0 0$20 ;
17745: LD_ADDR_VAR 0 1
17749: PUSH
17750: LD_VAR 0 1
17754: PUSH
17755: LD_INT 700
17757: PLUS
17758: ST_TO_ADDR
// end until game_status = false ;
17759: LD_EXP 29
17763: PUSH
17764: LD_INT 0
17766: EQUAL
17767: IFFALSE 17637
// end ;
17769: PPOPN 1
17771: END
// every 0 0$03 trigger game_status do var time ;
17772: LD_EXP 29
17776: IFFALSE 17930
17778: GO 17780
17780: DISABLE
17781: LD_INT 0
17783: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17784: LD_ADDR_VAR 0 1
17788: PUSH
17789: LD_INT 700
17791: PUSH
17792: LD_INT 875
17794: PUSH
17795: LD_INT 1400
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: LIST
17802: PUSH
17803: LD_OWVAR 67
17807: ARRAY
17808: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17809: LD_VAR 0 1
17813: PUSH
17814: LD_INT 0
17816: PPUSH
17817: LD_INT 385
17819: PPUSH
17820: CALL_OW 12
17824: PLUS
17825: PPUSH
17826: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17830: LD_INT 1
17832: PPUSH
17833: LD_INT 5
17835: PPUSH
17836: CALL_OW 12
17840: PPUSH
17841: LD_INT 102
17843: PPUSH
17844: LD_INT 6
17846: PPUSH
17847: LD_INT 25
17849: PPUSH
17850: LD_INT 1
17852: PPUSH
17853: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17857: LD_OWVAR 1
17861: PUSH
17862: LD_INT 52500
17864: PUSH
17865: LD_INT 46200
17867: PUSH
17868: LD_INT 42000
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: LIST
17875: PUSH
17876: LD_OWVAR 67
17880: ARRAY
17881: MOD
17882: IFFALSE 17898
// time := time + 0 0$25 ;
17884: LD_ADDR_VAR 0 1
17888: PUSH
17889: LD_VAR 0 1
17893: PUSH
17894: LD_INT 875
17896: PLUS
17897: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17898: LD_OWVAR 1
17902: PUSH
17903: LD_INT 231000
17905: MOD
17906: PUSH
17907: LD_INT 0
17909: EQUAL
17910: IFFALSE 17920
// time := 0 0$30 ;
17912: LD_ADDR_VAR 0 1
17916: PUSH
17917: LD_INT 1050
17919: ST_TO_ADDR
// end until game_status = false ;
17920: LD_EXP 29
17924: PUSH
17925: LD_INT 0
17927: EQUAL
17928: IFFALSE 17809
// end ;
17930: PPOPN 1
17932: END
// every 0 0$03 trigger game_status do var time ;
17933: LD_EXP 29
17937: IFFALSE 18073
17939: GO 17941
17941: DISABLE
17942: LD_INT 0
17944: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17945: LD_ADDR_VAR 0 1
17949: PUSH
17950: LD_INT 1050
17952: PUSH
17953: LD_INT 1575
17955: PUSH
17956: LD_INT 1750
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: LIST
17963: PUSH
17964: LD_OWVAR 67
17968: ARRAY
17969: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17970: LD_VAR 0 1
17974: PUSH
17975: LD_INT 0
17977: PPUSH
17978: LD_INT 385
17980: PPUSH
17981: CALL_OW 12
17985: PLUS
17986: PPUSH
17987: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17991: LD_INT 1
17993: PPUSH
17994: LD_INT 5
17996: PPUSH
17997: CALL_OW 12
18001: PPUSH
18002: LD_INT 51
18004: PPUSH
18005: LD_INT 74
18007: PPUSH
18008: LD_INT 25
18010: PPUSH
18011: LD_INT 1
18013: PPUSH
18014: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
18018: LD_OWVAR 1
18022: PUSH
18023: LD_INT 84000
18025: PUSH
18026: LD_INT 105000
18028: PUSH
18029: LD_INT 136500
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: PUSH
18037: LD_OWVAR 67
18041: ARRAY
18042: MOD
18043: PUSH
18044: LD_INT 0
18046: EQUAL
18047: IFFALSE 18063
// time := time + 0 0$15 ;
18049: LD_ADDR_VAR 0 1
18053: PUSH
18054: LD_VAR 0 1
18058: PUSH
18059: LD_INT 525
18061: PLUS
18062: ST_TO_ADDR
// end until game_status = false ;
18063: LD_EXP 29
18067: PUSH
18068: LD_INT 0
18070: EQUAL
18071: IFFALSE 17970
// end ; end_of_file
18073: PPOPN 1
18075: END
// every 0 0$01 trigger not debug do
18076: LD_EXP 1
18080: NOT
18081: IFFALSE 18104
18083: GO 18085
18085: DISABLE
// begin enable ;
18086: ENABLE
// Display_Strings := [ #tick , tick ] ;
18087: LD_ADDR_OWVAR 47
18091: PUSH
18092: LD_STRING #tick
18094: PUSH
18095: LD_OWVAR 1
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: ST_TO_ADDR
// end ; end_of_file
18104: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
18105: LD_VAR 0 1
18109: PPUSH
18110: LD_VAR 0 2
18114: PPUSH
18115: CALL 35050 0 2
// if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
18119: LD_VAR 0 1
18123: PPUSH
18124: CALL_OW 255
18128: PUSH
18129: LD_INT 3
18131: EQUAL
18132: IFFALSE 18188
18134: PUSH
18135: LD_VAR 0 1
18139: PUSH
18140: LD_INT 2
18142: PUSH
18143: LD_INT 34
18145: PUSH
18146: LD_INT 46
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 34
18155: PUSH
18156: LD_INT 47
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 34
18165: PUSH
18166: LD_INT 45
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: PUSH
18179: EMPTY
18180: LIST
18181: PPUSH
18182: CALL_OW 69
18186: IN
18187: AND
18188: IFFALSE 18206
// ru_reserve := ru_reserve ^ un ;
18190: LD_ADDR_EXP 9
18194: PUSH
18195: LD_EXP 9
18199: PUSH
18200: LD_VAR 0 1
18204: ADD
18205: ST_TO_ADDR
// if GetSide ( un ) = 3 and not GetWeapon ( un ) in [ ru_siberium_rocket , ru_crane ] then
18206: LD_VAR 0 1
18210: PPUSH
18211: CALL_OW 255
18215: PUSH
18216: LD_INT 3
18218: EQUAL
18219: IFFALSE 18244
18221: PUSH
18222: LD_VAR 0 1
18226: PPUSH
18227: CALL_OW 264
18231: PUSH
18232: LD_INT 48
18234: PUSH
18235: LD_INT 52
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: IN
18242: NOT
18243: AND
18244: IFFALSE 18261
// ComMoveXY ( un , 65 , 60 ) ;
18246: LD_VAR 0 1
18250: PPUSH
18251: LD_INT 65
18253: PPUSH
18254: LD_INT 60
18256: PPUSH
18257: CALL_OW 111
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18261: LD_VAR 0 1
18265: PUSH
18266: LD_INT 22
18268: PUSH
18269: LD_INT 3
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 34
18278: PUSH
18279: LD_INT 48
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PPUSH
18290: CALL_OW 69
18294: IN
18295: IFFALSE 18348
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18297: LD_INT 12
18299: PPUSH
18300: LD_INT 22
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PPUSH
18310: CALL_OW 70
18314: IFFALSE 18333
// ComAttackPlace ( un , 98 , 10 ) else
18316: LD_VAR 0 1
18320: PPUSH
18321: LD_INT 98
18323: PPUSH
18324: LD_INT 10
18326: PPUSH
18327: CALL_OW 116
18331: GO 18348
// ComAttackPlace ( un , 134 , 99 ) ;
18333: LD_VAR 0 1
18337: PPUSH
18338: LD_INT 134
18340: PPUSH
18341: LD_INT 99
18343: PPUSH
18344: CALL_OW 116
// end ;
18348: PPOPN 2
18350: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL 34992 0 1
// if GetChassis ( un ) = 25 then
18360: LD_VAR 0 1
18364: PPUSH
18365: CALL_OW 265
18369: PUSH
18370: LD_INT 25
18372: EQUAL
18373: IFFALSE 18382
// SetAchievement ( ACH_BEH ) ;
18375: LD_STRING ACH_BEH
18377: PPUSH
18378: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18382: LD_VAR 0 1
18386: PUSH
18387: LD_INT 22
18389: PUSH
18390: LD_INT 3
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 21
18399: PUSH
18400: LD_INT 3
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PPUSH
18411: CALL_OW 69
18415: IN
18416: IFFALSE 18449
18418: PUSH
18419: LD_VAR 0 1
18423: PPUSH
18424: CALL_OW 266
18428: PUSH
18429: LD_INT 0
18431: PUSH
18432: LD_INT 29
18434: PUSH
18435: LD_INT 30
18437: PUSH
18438: LD_INT 26
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: IN
18447: NOT
18448: AND
18449: IFFALSE 18535
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18451: LD_ADDR_EXP 13
18455: PUSH
18456: LD_EXP 13
18460: PUSH
18461: LD_VAR 0 1
18465: PPUSH
18466: CALL_OW 266
18470: ADD
18471: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18472: LD_ADDR_EXP 13
18476: PUSH
18477: LD_EXP 13
18481: PUSH
18482: LD_VAR 0 1
18486: PPUSH
18487: CALL_OW 250
18491: ADD
18492: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18493: LD_ADDR_EXP 13
18497: PUSH
18498: LD_EXP 13
18502: PUSH
18503: LD_VAR 0 1
18507: PPUSH
18508: CALL_OW 251
18512: ADD
18513: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18514: LD_ADDR_EXP 13
18518: PUSH
18519: LD_EXP 13
18523: PUSH
18524: LD_VAR 0 1
18528: PPUSH
18529: CALL_OW 254
18533: ADD
18534: ST_TO_ADDR
// end ; if un in ru_attack_list then
18535: LD_VAR 0 1
18539: PUSH
18540: LD_EXP 10
18544: IN
18545: IFFALSE 18563
// ru_attack_list := ru_attack_list diff un ;
18547: LD_ADDR_EXP 10
18551: PUSH
18552: LD_EXP 10
18556: PUSH
18557: LD_VAR 0 1
18561: DIFF
18562: ST_TO_ADDR
// if un in ru_protector then
18563: LD_VAR 0 1
18567: PUSH
18568: LD_EXP 17
18572: IN
18573: IFFALSE 18591
// ru_protector := ru_protector diff un ;
18575: LD_ADDR_EXP 17
18579: PUSH
18580: LD_EXP 17
18584: PUSH
18585: LD_VAR 0 1
18589: DIFF
18590: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18591: LD_VAR 0 1
18595: PPUSH
18596: CALL_OW 266
18600: PUSH
18601: LD_INT 30
18603: EQUAL
18604: IFFALSE 18621
18606: PUSH
18607: LD_VAR 0 1
18611: PPUSH
18612: CALL_OW 255
18616: PUSH
18617: LD_INT 1
18619: EQUAL
18620: AND
18621: IFFALSE 18631
// mine_ck := true ;
18623: LD_ADDR_EXP 35
18627: PUSH
18628: LD_INT 1
18630: ST_TO_ADDR
// end ;
18631: PPOPN 1
18633: END
// on BuildingComplete ( un ) do var i ;
18634: LD_INT 0
18636: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18637: LD_VAR 0 1
18641: PPUSH
18642: CALL_OW 255
18646: PUSH
18647: LD_INT 1
18649: EQUAL
18650: IFFALSE 18667
18652: PUSH
18653: LD_VAR 0 1
18657: PPUSH
18658: CALL_OW 266
18662: PUSH
18663: LD_INT 0
18665: EQUAL
18666: AND
18667: IFFALSE 18677
// depotConstructed := true ;
18669: LD_ADDR_EXP 2
18673: PUSH
18674: LD_INT 1
18676: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18677: LD_VAR 0 1
18681: PPUSH
18682: CALL_OW 255
18686: PUSH
18687: LD_INT 1
18689: EQUAL
18690: IFFALSE 18707
18692: PUSH
18693: LD_VAR 0 1
18697: PPUSH
18698: CALL_OW 266
18702: PUSH
18703: LD_INT 30
18705: EQUAL
18706: AND
18707: IFFALSE 18717
// mine_constructed := true ;
18709: LD_ADDR_EXP 37
18713: PUSH
18714: LD_INT 1
18716: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18717: LD_VAR 0 1
18721: PPUSH
18722: CALL_OW 255
18726: PUSH
18727: LD_INT 3
18729: EQUAL
18730: IFFALSE 18747
18732: PUSH
18733: LD_VAR 0 1
18737: PPUSH
18738: CALL_OW 266
18742: PUSH
18743: LD_INT 0
18745: EQUAL
18746: AND
18747: IFFALSE 18804
// begin for i = 1 to 2 do
18749: LD_ADDR_VAR 0 2
18753: PUSH
18754: DOUBLE
18755: LD_INT 1
18757: DEC
18758: ST_TO_ADDR
18759: LD_INT 2
18761: PUSH
18762: FOR_TO
18763: IFFALSE 18802
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18765: LD_EXP 20
18769: PUSH
18770: LD_VAR 0 2
18774: ARRAY
18775: PPUSH
18776: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18780: LD_EXP 20
18784: PUSH
18785: LD_VAR 0 2
18789: ARRAY
18790: PPUSH
18791: LD_VAR 0 1
18795: PPUSH
18796: CALL_OW 180
// end ;
18800: GO 18762
18802: POP
18803: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL_OW 255
18813: PUSH
18814: LD_INT 3
18816: EQUAL
18817: IFFALSE 18836
18819: PUSH
18820: LD_VAR 0 1
18824: PPUSH
18825: CALL_OW 266
18829: PUSH
18830: LD_EXP 13
18834: IN
18835: AND
18836: IFFALSE 18876
// for i = 1 to 4 do
18838: LD_ADDR_VAR 0 2
18842: PUSH
18843: DOUBLE
18844: LD_INT 1
18846: DEC
18847: ST_TO_ADDR
18848: LD_INT 4
18850: PUSH
18851: FOR_TO
18852: IFFALSE 18874
// ru_blist := Delete ( ru_blist , 1 ) ;
18854: LD_ADDR_EXP 13
18858: PUSH
18859: LD_EXP 13
18863: PPUSH
18864: LD_INT 1
18866: PPUSH
18867: CALL_OW 3
18871: ST_TO_ADDR
18872: GO 18851
18874: POP
18875: POP
// end ;
18876: PPOPN 2
18878: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18879: LD_VAR 0 1
18883: PPUSH
18884: LD_VAR 0 2
18888: PPUSH
18889: LD_VAR 0 3
18893: PPUSH
18894: CALL 35026 0 3
// end ;
18898: PPOPN 3
18900: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL 35034 0 1
// end ; end_of_file end_of_file
18910: PPOPN 1
18912: END
// export globalGameSaveCounter ; every 0 0$1 do
18913: GO 18915
18915: DISABLE
// begin enable ;
18916: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18917: LD_STRING updateTimer(
18919: PUSH
18920: LD_OWVAR 1
18924: STR
18925: PUSH
18926: LD_STRING );
18928: STR
18929: PPUSH
18930: CALL_OW 559
// end ;
18934: END
// every 0 0$1 do
18935: GO 18937
18937: DISABLE
// begin globalGameSaveCounter := 0 ;
18938: LD_ADDR_EXP 43
18942: PUSH
18943: LD_INT 0
18945: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
18946: LD_STRING setGameSaveCounter(0)
18948: PPUSH
18949: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
18953: LD_STRING initStreamRollete();
18955: PPUSH
18956: CALL_OW 559
// InitStreamMode ;
18960: CALL 20305 0 0
// DefineStreamItems ( false ) ;
18964: LD_INT 0
18966: PPUSH
18967: CALL 20769 0 1
// end ;
18971: END
// export function SOS_MapStart ( ) ; begin
18972: LD_INT 0
18974: PPUSH
// if streamModeActive then
18975: LD_EXP 44
18979: IFFALSE 18988
// DefineStreamItems ( true ) ;
18981: LD_INT 1
18983: PPUSH
18984: CALL 20769 0 1
// UpdateLuaVariables ( ) ;
18988: CALL 19005 0 0
// UpdateFactoryWaypoints ( ) ;
18992: CALL 33891 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18996: CALL 34143 0 0
// end ;
19000: LD_VAR 0 1
19004: RET
// function UpdateLuaVariables ( ) ; begin
19005: LD_INT 0
19007: PPUSH
// if globalGameSaveCounter then
19008: LD_EXP 43
19012: IFFALSE 19046
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19014: LD_ADDR_EXP 43
19018: PUSH
19019: LD_EXP 43
19023: PPUSH
19024: CALL 80724 0 1
19028: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19029: LD_STRING setGameSaveCounter(
19031: PUSH
19032: LD_EXP 43
19036: STR
19037: PUSH
19038: LD_STRING )
19040: STR
19041: PPUSH
19042: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19046: LD_STRING setGameDifficulty(
19048: PUSH
19049: LD_OWVAR 67
19053: STR
19054: PUSH
19055: LD_STRING )
19057: STR
19058: PPUSH
19059: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19063: LD_STRING displayDifficulty(
19065: PUSH
19066: LD_OWVAR 67
19070: STR
19071: PUSH
19072: LD_STRING )
19074: STR
19075: PPUSH
19076: CALL_OW 559
// end ;
19080: LD_VAR 0 1
19084: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19085: LD_INT 0
19087: PPUSH
// if p2 = stream_mode then
19088: LD_VAR 0 2
19092: PUSH
19093: LD_INT 100
19095: EQUAL
19096: IFFALSE 20099
// begin if not StreamModeActive then
19098: LD_EXP 44
19102: NOT
19103: IFFALSE 19113
// StreamModeActive := true ;
19105: LD_ADDR_EXP 44
19109: PUSH
19110: LD_INT 1
19112: ST_TO_ADDR
// if p3 = 0 then
19113: LD_VAR 0 3
19117: PUSH
19118: LD_INT 0
19120: EQUAL
19121: IFFALSE 19127
// InitStreamMode ;
19123: CALL 20305 0 0
// if p3 = 1 then
19127: LD_VAR 0 3
19131: PUSH
19132: LD_INT 1
19134: EQUAL
19135: IFFALSE 19145
// sRocket := true ;
19137: LD_ADDR_EXP 49
19141: PUSH
19142: LD_INT 1
19144: ST_TO_ADDR
// if p3 = 2 then
19145: LD_VAR 0 3
19149: PUSH
19150: LD_INT 2
19152: EQUAL
19153: IFFALSE 19163
// sSpeed := true ;
19155: LD_ADDR_EXP 48
19159: PUSH
19160: LD_INT 1
19162: ST_TO_ADDR
// if p3 = 3 then
19163: LD_VAR 0 3
19167: PUSH
19168: LD_INT 3
19170: EQUAL
19171: IFFALSE 19181
// sEngine := true ;
19173: LD_ADDR_EXP 50
19177: PUSH
19178: LD_INT 1
19180: ST_TO_ADDR
// if p3 = 4 then
19181: LD_VAR 0 3
19185: PUSH
19186: LD_INT 4
19188: EQUAL
19189: IFFALSE 19199
// sSpec := true ;
19191: LD_ADDR_EXP 47
19195: PUSH
19196: LD_INT 1
19198: ST_TO_ADDR
// if p3 = 5 then
19199: LD_VAR 0 3
19203: PUSH
19204: LD_INT 5
19206: EQUAL
19207: IFFALSE 19217
// sLevel := true ;
19209: LD_ADDR_EXP 51
19213: PUSH
19214: LD_INT 1
19216: ST_TO_ADDR
// if p3 = 6 then
19217: LD_VAR 0 3
19221: PUSH
19222: LD_INT 6
19224: EQUAL
19225: IFFALSE 19235
// sArmoury := true ;
19227: LD_ADDR_EXP 52
19231: PUSH
19232: LD_INT 1
19234: ST_TO_ADDR
// if p3 = 7 then
19235: LD_VAR 0 3
19239: PUSH
19240: LD_INT 7
19242: EQUAL
19243: IFFALSE 19253
// sRadar := true ;
19245: LD_ADDR_EXP 53
19249: PUSH
19250: LD_INT 1
19252: ST_TO_ADDR
// if p3 = 8 then
19253: LD_VAR 0 3
19257: PUSH
19258: LD_INT 8
19260: EQUAL
19261: IFFALSE 19271
// sBunker := true ;
19263: LD_ADDR_EXP 54
19267: PUSH
19268: LD_INT 1
19270: ST_TO_ADDR
// if p3 = 9 then
19271: LD_VAR 0 3
19275: PUSH
19276: LD_INT 9
19278: EQUAL
19279: IFFALSE 19289
// sHack := true ;
19281: LD_ADDR_EXP 55
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// if p3 = 10 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 10
19296: EQUAL
19297: IFFALSE 19307
// sFire := true ;
19299: LD_ADDR_EXP 56
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// if p3 = 11 then
19307: LD_VAR 0 3
19311: PUSH
19312: LD_INT 11
19314: EQUAL
19315: IFFALSE 19325
// sRefresh := true ;
19317: LD_ADDR_EXP 57
19321: PUSH
19322: LD_INT 1
19324: ST_TO_ADDR
// if p3 = 12 then
19325: LD_VAR 0 3
19329: PUSH
19330: LD_INT 12
19332: EQUAL
19333: IFFALSE 19343
// sExp := true ;
19335: LD_ADDR_EXP 58
19339: PUSH
19340: LD_INT 1
19342: ST_TO_ADDR
// if p3 = 13 then
19343: LD_VAR 0 3
19347: PUSH
19348: LD_INT 13
19350: EQUAL
19351: IFFALSE 19361
// sDepot := true ;
19353: LD_ADDR_EXP 59
19357: PUSH
19358: LD_INT 1
19360: ST_TO_ADDR
// if p3 = 14 then
19361: LD_VAR 0 3
19365: PUSH
19366: LD_INT 14
19368: EQUAL
19369: IFFALSE 19379
// sFlag := true ;
19371: LD_ADDR_EXP 60
19375: PUSH
19376: LD_INT 1
19378: ST_TO_ADDR
// if p3 = 15 then
19379: LD_VAR 0 3
19383: PUSH
19384: LD_INT 15
19386: EQUAL
19387: IFFALSE 19397
// sKamikadze := true ;
19389: LD_ADDR_EXP 68
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
// if p3 = 16 then
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 16
19404: EQUAL
19405: IFFALSE 19415
// sTroll := true ;
19407: LD_ADDR_EXP 69
19411: PUSH
19412: LD_INT 1
19414: ST_TO_ADDR
// if p3 = 17 then
19415: LD_VAR 0 3
19419: PUSH
19420: LD_INT 17
19422: EQUAL
19423: IFFALSE 19433
// sSlow := true ;
19425: LD_ADDR_EXP 70
19429: PUSH
19430: LD_INT 1
19432: ST_TO_ADDR
// if p3 = 18 then
19433: LD_VAR 0 3
19437: PUSH
19438: LD_INT 18
19440: EQUAL
19441: IFFALSE 19451
// sLack := true ;
19443: LD_ADDR_EXP 71
19447: PUSH
19448: LD_INT 1
19450: ST_TO_ADDR
// if p3 = 19 then
19451: LD_VAR 0 3
19455: PUSH
19456: LD_INT 19
19458: EQUAL
19459: IFFALSE 19469
// sTank := true ;
19461: LD_ADDR_EXP 73
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
// if p3 = 20 then
19469: LD_VAR 0 3
19473: PUSH
19474: LD_INT 20
19476: EQUAL
19477: IFFALSE 19487
// sRemote := true ;
19479: LD_ADDR_EXP 74
19483: PUSH
19484: LD_INT 1
19486: ST_TO_ADDR
// if p3 = 21 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 21
19494: EQUAL
19495: IFFALSE 19505
// sPowell := true ;
19497: LD_ADDR_EXP 75
19501: PUSH
19502: LD_INT 1
19504: ST_TO_ADDR
// if p3 = 22 then
19505: LD_VAR 0 3
19509: PUSH
19510: LD_INT 22
19512: EQUAL
19513: IFFALSE 19523
// sTeleport := true ;
19515: LD_ADDR_EXP 78
19519: PUSH
19520: LD_INT 1
19522: ST_TO_ADDR
// if p3 = 23 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 23
19530: EQUAL
19531: IFFALSE 19541
// sOilTower := true ;
19533: LD_ADDR_EXP 80
19537: PUSH
19538: LD_INT 1
19540: ST_TO_ADDR
// if p3 = 24 then
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 24
19548: EQUAL
19549: IFFALSE 19559
// sShovel := true ;
19551: LD_ADDR_EXP 81
19555: PUSH
19556: LD_INT 1
19558: ST_TO_ADDR
// if p3 = 25 then
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 25
19566: EQUAL
19567: IFFALSE 19577
// sSheik := true ;
19569: LD_ADDR_EXP 82
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// if p3 = 26 then
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 26
19584: EQUAL
19585: IFFALSE 19595
// sEarthquake := true ;
19587: LD_ADDR_EXP 84
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// if p3 = 27 then
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 27
19602: EQUAL
19603: IFFALSE 19613
// sAI := true ;
19605: LD_ADDR_EXP 85
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// if p3 = 28 then
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 28
19620: EQUAL
19621: IFFALSE 19631
// sCargo := true ;
19623: LD_ADDR_EXP 88
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// if p3 = 29 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 29
19638: EQUAL
19639: IFFALSE 19649
// sDLaser := true ;
19641: LD_ADDR_EXP 89
19645: PUSH
19646: LD_INT 1
19648: ST_TO_ADDR
// if p3 = 30 then
19649: LD_VAR 0 3
19653: PUSH
19654: LD_INT 30
19656: EQUAL
19657: IFFALSE 19667
// sExchange := true ;
19659: LD_ADDR_EXP 90
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// if p3 = 31 then
19667: LD_VAR 0 3
19671: PUSH
19672: LD_INT 31
19674: EQUAL
19675: IFFALSE 19685
// sFac := true ;
19677: LD_ADDR_EXP 91
19681: PUSH
19682: LD_INT 1
19684: ST_TO_ADDR
// if p3 = 32 then
19685: LD_VAR 0 3
19689: PUSH
19690: LD_INT 32
19692: EQUAL
19693: IFFALSE 19703
// sPower := true ;
19695: LD_ADDR_EXP 92
19699: PUSH
19700: LD_INT 1
19702: ST_TO_ADDR
// if p3 = 33 then
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 33
19710: EQUAL
19711: IFFALSE 19721
// sRandom := true ;
19713: LD_ADDR_EXP 93
19717: PUSH
19718: LD_INT 1
19720: ST_TO_ADDR
// if p3 = 34 then
19721: LD_VAR 0 3
19725: PUSH
19726: LD_INT 34
19728: EQUAL
19729: IFFALSE 19739
// sShield := true ;
19731: LD_ADDR_EXP 94
19735: PUSH
19736: LD_INT 1
19738: ST_TO_ADDR
// if p3 = 35 then
19739: LD_VAR 0 3
19743: PUSH
19744: LD_INT 35
19746: EQUAL
19747: IFFALSE 19757
// sTime := true ;
19749: LD_ADDR_EXP 95
19753: PUSH
19754: LD_INT 1
19756: ST_TO_ADDR
// if p3 = 36 then
19757: LD_VAR 0 3
19761: PUSH
19762: LD_INT 36
19764: EQUAL
19765: IFFALSE 19775
// sTools := true ;
19767: LD_ADDR_EXP 96
19771: PUSH
19772: LD_INT 1
19774: ST_TO_ADDR
// if p3 = 101 then
19775: LD_VAR 0 3
19779: PUSH
19780: LD_INT 101
19782: EQUAL
19783: IFFALSE 19793
// sSold := true ;
19785: LD_ADDR_EXP 61
19789: PUSH
19790: LD_INT 1
19792: ST_TO_ADDR
// if p3 = 102 then
19793: LD_VAR 0 3
19797: PUSH
19798: LD_INT 102
19800: EQUAL
19801: IFFALSE 19811
// sDiff := true ;
19803: LD_ADDR_EXP 62
19807: PUSH
19808: LD_INT 1
19810: ST_TO_ADDR
// if p3 = 103 then
19811: LD_VAR 0 3
19815: PUSH
19816: LD_INT 103
19818: EQUAL
19819: IFFALSE 19829
// sFog := true ;
19821: LD_ADDR_EXP 65
19825: PUSH
19826: LD_INT 1
19828: ST_TO_ADDR
// if p3 = 104 then
19829: LD_VAR 0 3
19833: PUSH
19834: LD_INT 104
19836: EQUAL
19837: IFFALSE 19847
// sReset := true ;
19839: LD_ADDR_EXP 66
19843: PUSH
19844: LD_INT 1
19846: ST_TO_ADDR
// if p3 = 105 then
19847: LD_VAR 0 3
19851: PUSH
19852: LD_INT 105
19854: EQUAL
19855: IFFALSE 19865
// sSun := true ;
19857: LD_ADDR_EXP 67
19861: PUSH
19862: LD_INT 1
19864: ST_TO_ADDR
// if p3 = 106 then
19865: LD_VAR 0 3
19869: PUSH
19870: LD_INT 106
19872: EQUAL
19873: IFFALSE 19883
// sTiger := true ;
19875: LD_ADDR_EXP 63
19879: PUSH
19880: LD_INT 1
19882: ST_TO_ADDR
// if p3 = 107 then
19883: LD_VAR 0 3
19887: PUSH
19888: LD_INT 107
19890: EQUAL
19891: IFFALSE 19901
// sBomb := true ;
19893: LD_ADDR_EXP 64
19897: PUSH
19898: LD_INT 1
19900: ST_TO_ADDR
// if p3 = 108 then
19901: LD_VAR 0 3
19905: PUSH
19906: LD_INT 108
19908: EQUAL
19909: IFFALSE 19919
// sWound := true ;
19911: LD_ADDR_EXP 72
19915: PUSH
19916: LD_INT 1
19918: ST_TO_ADDR
// if p3 = 109 then
19919: LD_VAR 0 3
19923: PUSH
19924: LD_INT 109
19926: EQUAL
19927: IFFALSE 19937
// sBetray := true ;
19929: LD_ADDR_EXP 76
19933: PUSH
19934: LD_INT 1
19936: ST_TO_ADDR
// if p3 = 110 then
19937: LD_VAR 0 3
19941: PUSH
19942: LD_INT 110
19944: EQUAL
19945: IFFALSE 19955
// sContamin := true ;
19947: LD_ADDR_EXP 77
19951: PUSH
19952: LD_INT 1
19954: ST_TO_ADDR
// if p3 = 111 then
19955: LD_VAR 0 3
19959: PUSH
19960: LD_INT 111
19962: EQUAL
19963: IFFALSE 19973
// sOil := true ;
19965: LD_ADDR_EXP 79
19969: PUSH
19970: LD_INT 1
19972: ST_TO_ADDR
// if p3 = 112 then
19973: LD_VAR 0 3
19977: PUSH
19978: LD_INT 112
19980: EQUAL
19981: IFFALSE 19991
// sStu := true ;
19983: LD_ADDR_EXP 83
19987: PUSH
19988: LD_INT 1
19990: ST_TO_ADDR
// if p3 = 113 then
19991: LD_VAR 0 3
19995: PUSH
19996: LD_INT 113
19998: EQUAL
19999: IFFALSE 20009
// sBazooka := true ;
20001: LD_ADDR_EXP 86
20005: PUSH
20006: LD_INT 1
20008: ST_TO_ADDR
// if p3 = 114 then
20009: LD_VAR 0 3
20013: PUSH
20014: LD_INT 114
20016: EQUAL
20017: IFFALSE 20027
// sMortar := true ;
20019: LD_ADDR_EXP 87
20023: PUSH
20024: LD_INT 1
20026: ST_TO_ADDR
// if p3 = 115 then
20027: LD_VAR 0 3
20031: PUSH
20032: LD_INT 115
20034: EQUAL
20035: IFFALSE 20045
// sRanger := true ;
20037: LD_ADDR_EXP 97
20041: PUSH
20042: LD_INT 1
20044: ST_TO_ADDR
// if p3 = 116 then
20045: LD_VAR 0 3
20049: PUSH
20050: LD_INT 116
20052: EQUAL
20053: IFFALSE 20063
// sComputer := true ;
20055: LD_ADDR_EXP 98
20059: PUSH
20060: LD_INT 1
20062: ST_TO_ADDR
// if p3 = 117 then
20063: LD_VAR 0 3
20067: PUSH
20068: LD_INT 117
20070: EQUAL
20071: IFFALSE 20081
// s30 := true ;
20073: LD_ADDR_EXP 99
20077: PUSH
20078: LD_INT 1
20080: ST_TO_ADDR
// if p3 = 118 then
20081: LD_VAR 0 3
20085: PUSH
20086: LD_INT 118
20088: EQUAL
20089: IFFALSE 20099
// s60 := true ;
20091: LD_ADDR_EXP 100
20095: PUSH
20096: LD_INT 1
20098: ST_TO_ADDR
// end ; if p2 = hack_mode then
20099: LD_VAR 0 2
20103: PUSH
20104: LD_INT 101
20106: EQUAL
20107: IFFALSE 20235
// begin case p3 of 1 :
20109: LD_VAR 0 3
20113: PUSH
20114: LD_INT 1
20116: DOUBLE
20117: EQUAL
20118: IFTRUE 20122
20120: GO 20129
20122: POP
// hHackUnlimitedResources ; 2 :
20123: CALL 32498 0 0
20127: GO 20235
20129: LD_INT 2
20131: DOUBLE
20132: EQUAL
20133: IFTRUE 20137
20135: GO 20144
20137: POP
// hHackSetLevel10 ; 3 :
20138: CALL 32631 0 0
20142: GO 20235
20144: LD_INT 3
20146: DOUBLE
20147: EQUAL
20148: IFTRUE 20152
20150: GO 20159
20152: POP
// hHackSetLevel10YourUnits ; 4 :
20153: CALL 32716 0 0
20157: GO 20235
20159: LD_INT 4
20161: DOUBLE
20162: EQUAL
20163: IFTRUE 20167
20165: GO 20174
20167: POP
// hHackInvincible ; 5 :
20168: CALL 33164 0 0
20172: GO 20235
20174: LD_INT 5
20176: DOUBLE
20177: EQUAL
20178: IFTRUE 20182
20180: GO 20189
20182: POP
// hHackInvisible ; 6 :
20183: CALL 33275 0 0
20187: GO 20235
20189: LD_INT 6
20191: DOUBLE
20192: EQUAL
20193: IFTRUE 20197
20195: GO 20204
20197: POP
// hHackChangeYourSide ; 7 :
20198: CALL 33332 0 0
20202: GO 20235
20204: LD_INT 7
20206: DOUBLE
20207: EQUAL
20208: IFTRUE 20212
20210: GO 20219
20212: POP
// hHackChangeUnitSide ; 8 :
20213: CALL 33374 0 0
20217: GO 20235
20219: LD_INT 8
20221: DOUBLE
20222: EQUAL
20223: IFTRUE 20227
20225: GO 20234
20227: POP
// hHackFog ; end ;
20228: CALL 33475 0 0
20232: GO 20235
20234: POP
// end ; if p2 = game_save_mode then
20235: LD_VAR 0 2
20239: PUSH
20240: LD_INT 102
20242: EQUAL
20243: IFFALSE 20300
// begin if p3 = 1 then
20245: LD_VAR 0 3
20249: PUSH
20250: LD_INT 1
20252: EQUAL
20253: IFFALSE 20265
// globalGameSaveCounter := p4 ;
20255: LD_ADDR_EXP 43
20259: PUSH
20260: LD_VAR 0 4
20264: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20265: LD_VAR 0 3
20269: PUSH
20270: LD_INT 2
20272: EQUAL
20273: IFFALSE 20281
20275: PUSH
20276: LD_EXP 43
20280: AND
20281: IFFALSE 20300
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20283: LD_STRING setGameSaveCounter(
20285: PUSH
20286: LD_EXP 43
20290: STR
20291: PUSH
20292: LD_STRING )
20294: STR
20295: PPUSH
20296: CALL_OW 559
// end ; end ;
20300: LD_VAR 0 7
20304: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20305: LD_INT 0
20307: PPUSH
// streamModeActive := false ;
20308: LD_ADDR_EXP 44
20312: PUSH
20313: LD_INT 0
20315: ST_TO_ADDR
// normalCounter := 36 ;
20316: LD_ADDR_EXP 45
20320: PUSH
20321: LD_INT 36
20323: ST_TO_ADDR
// hardcoreCounter := 18 ;
20324: LD_ADDR_EXP 46
20328: PUSH
20329: LD_INT 18
20331: ST_TO_ADDR
// sRocket := false ;
20332: LD_ADDR_EXP 49
20336: PUSH
20337: LD_INT 0
20339: ST_TO_ADDR
// sSpeed := false ;
20340: LD_ADDR_EXP 48
20344: PUSH
20345: LD_INT 0
20347: ST_TO_ADDR
// sEngine := false ;
20348: LD_ADDR_EXP 50
20352: PUSH
20353: LD_INT 0
20355: ST_TO_ADDR
// sSpec := false ;
20356: LD_ADDR_EXP 47
20360: PUSH
20361: LD_INT 0
20363: ST_TO_ADDR
// sLevel := false ;
20364: LD_ADDR_EXP 51
20368: PUSH
20369: LD_INT 0
20371: ST_TO_ADDR
// sArmoury := false ;
20372: LD_ADDR_EXP 52
20376: PUSH
20377: LD_INT 0
20379: ST_TO_ADDR
// sRadar := false ;
20380: LD_ADDR_EXP 53
20384: PUSH
20385: LD_INT 0
20387: ST_TO_ADDR
// sBunker := false ;
20388: LD_ADDR_EXP 54
20392: PUSH
20393: LD_INT 0
20395: ST_TO_ADDR
// sHack := false ;
20396: LD_ADDR_EXP 55
20400: PUSH
20401: LD_INT 0
20403: ST_TO_ADDR
// sFire := false ;
20404: LD_ADDR_EXP 56
20408: PUSH
20409: LD_INT 0
20411: ST_TO_ADDR
// sRefresh := false ;
20412: LD_ADDR_EXP 57
20416: PUSH
20417: LD_INT 0
20419: ST_TO_ADDR
// sExp := false ;
20420: LD_ADDR_EXP 58
20424: PUSH
20425: LD_INT 0
20427: ST_TO_ADDR
// sDepot := false ;
20428: LD_ADDR_EXP 59
20432: PUSH
20433: LD_INT 0
20435: ST_TO_ADDR
// sFlag := false ;
20436: LD_ADDR_EXP 60
20440: PUSH
20441: LD_INT 0
20443: ST_TO_ADDR
// sKamikadze := false ;
20444: LD_ADDR_EXP 68
20448: PUSH
20449: LD_INT 0
20451: ST_TO_ADDR
// sTroll := false ;
20452: LD_ADDR_EXP 69
20456: PUSH
20457: LD_INT 0
20459: ST_TO_ADDR
// sSlow := false ;
20460: LD_ADDR_EXP 70
20464: PUSH
20465: LD_INT 0
20467: ST_TO_ADDR
// sLack := false ;
20468: LD_ADDR_EXP 71
20472: PUSH
20473: LD_INT 0
20475: ST_TO_ADDR
// sTank := false ;
20476: LD_ADDR_EXP 73
20480: PUSH
20481: LD_INT 0
20483: ST_TO_ADDR
// sRemote := false ;
20484: LD_ADDR_EXP 74
20488: PUSH
20489: LD_INT 0
20491: ST_TO_ADDR
// sPowell := false ;
20492: LD_ADDR_EXP 75
20496: PUSH
20497: LD_INT 0
20499: ST_TO_ADDR
// sTeleport := false ;
20500: LD_ADDR_EXP 78
20504: PUSH
20505: LD_INT 0
20507: ST_TO_ADDR
// sOilTower := false ;
20508: LD_ADDR_EXP 80
20512: PUSH
20513: LD_INT 0
20515: ST_TO_ADDR
// sShovel := false ;
20516: LD_ADDR_EXP 81
20520: PUSH
20521: LD_INT 0
20523: ST_TO_ADDR
// sSheik := false ;
20524: LD_ADDR_EXP 82
20528: PUSH
20529: LD_INT 0
20531: ST_TO_ADDR
// sEarthquake := false ;
20532: LD_ADDR_EXP 84
20536: PUSH
20537: LD_INT 0
20539: ST_TO_ADDR
// sAI := false ;
20540: LD_ADDR_EXP 85
20544: PUSH
20545: LD_INT 0
20547: ST_TO_ADDR
// sCargo := false ;
20548: LD_ADDR_EXP 88
20552: PUSH
20553: LD_INT 0
20555: ST_TO_ADDR
// sDLaser := false ;
20556: LD_ADDR_EXP 89
20560: PUSH
20561: LD_INT 0
20563: ST_TO_ADDR
// sExchange := false ;
20564: LD_ADDR_EXP 90
20568: PUSH
20569: LD_INT 0
20571: ST_TO_ADDR
// sFac := false ;
20572: LD_ADDR_EXP 91
20576: PUSH
20577: LD_INT 0
20579: ST_TO_ADDR
// sPower := false ;
20580: LD_ADDR_EXP 92
20584: PUSH
20585: LD_INT 0
20587: ST_TO_ADDR
// sRandom := false ;
20588: LD_ADDR_EXP 93
20592: PUSH
20593: LD_INT 0
20595: ST_TO_ADDR
// sShield := false ;
20596: LD_ADDR_EXP 94
20600: PUSH
20601: LD_INT 0
20603: ST_TO_ADDR
// sTime := false ;
20604: LD_ADDR_EXP 95
20608: PUSH
20609: LD_INT 0
20611: ST_TO_ADDR
// sTools := false ;
20612: LD_ADDR_EXP 96
20616: PUSH
20617: LD_INT 0
20619: ST_TO_ADDR
// sSold := false ;
20620: LD_ADDR_EXP 61
20624: PUSH
20625: LD_INT 0
20627: ST_TO_ADDR
// sDiff := false ;
20628: LD_ADDR_EXP 62
20632: PUSH
20633: LD_INT 0
20635: ST_TO_ADDR
// sFog := false ;
20636: LD_ADDR_EXP 65
20640: PUSH
20641: LD_INT 0
20643: ST_TO_ADDR
// sReset := false ;
20644: LD_ADDR_EXP 66
20648: PUSH
20649: LD_INT 0
20651: ST_TO_ADDR
// sSun := false ;
20652: LD_ADDR_EXP 67
20656: PUSH
20657: LD_INT 0
20659: ST_TO_ADDR
// sTiger := false ;
20660: LD_ADDR_EXP 63
20664: PUSH
20665: LD_INT 0
20667: ST_TO_ADDR
// sBomb := false ;
20668: LD_ADDR_EXP 64
20672: PUSH
20673: LD_INT 0
20675: ST_TO_ADDR
// sWound := false ;
20676: LD_ADDR_EXP 72
20680: PUSH
20681: LD_INT 0
20683: ST_TO_ADDR
// sBetray := false ;
20684: LD_ADDR_EXP 76
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// sContamin := false ;
20692: LD_ADDR_EXP 77
20696: PUSH
20697: LD_INT 0
20699: ST_TO_ADDR
// sOil := false ;
20700: LD_ADDR_EXP 79
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// sStu := false ;
20708: LD_ADDR_EXP 83
20712: PUSH
20713: LD_INT 0
20715: ST_TO_ADDR
// sBazooka := false ;
20716: LD_ADDR_EXP 86
20720: PUSH
20721: LD_INT 0
20723: ST_TO_ADDR
// sMortar := false ;
20724: LD_ADDR_EXP 87
20728: PUSH
20729: LD_INT 0
20731: ST_TO_ADDR
// sRanger := false ;
20732: LD_ADDR_EXP 97
20736: PUSH
20737: LD_INT 0
20739: ST_TO_ADDR
// sComputer := false ;
20740: LD_ADDR_EXP 98
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// s30 := false ;
20748: LD_ADDR_EXP 99
20752: PUSH
20753: LD_INT 0
20755: ST_TO_ADDR
// s60 := false ;
20756: LD_ADDR_EXP 100
20760: PUSH
20761: LD_INT 0
20763: ST_TO_ADDR
// end ;
20764: LD_VAR 0 1
20768: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20769: LD_INT 0
20771: PPUSH
20772: PPUSH
20773: PPUSH
20774: PPUSH
20775: PPUSH
20776: PPUSH
20777: PPUSH
// result := [ ] ;
20778: LD_ADDR_VAR 0 2
20782: PUSH
20783: EMPTY
20784: ST_TO_ADDR
// if campaign_id = 1 then
20785: LD_OWVAR 69
20789: PUSH
20790: LD_INT 1
20792: EQUAL
20793: IFFALSE 23959
// begin case mission_number of 1 :
20795: LD_OWVAR 70
20799: PUSH
20800: LD_INT 1
20802: DOUBLE
20803: EQUAL
20804: IFTRUE 20808
20806: GO 20884
20808: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20809: LD_ADDR_VAR 0 2
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: LD_INT 4
20819: PUSH
20820: LD_INT 11
20822: PUSH
20823: LD_INT 12
20825: PUSH
20826: LD_INT 15
20828: PUSH
20829: LD_INT 16
20831: PUSH
20832: LD_INT 22
20834: PUSH
20835: LD_INT 23
20837: PUSH
20838: LD_INT 26
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 101
20854: PUSH
20855: LD_INT 102
20857: PUSH
20858: LD_INT 106
20860: PUSH
20861: LD_INT 116
20863: PUSH
20864: LD_INT 117
20866: PUSH
20867: LD_INT 118
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: ST_TO_ADDR
20882: GO 23957
20884: LD_INT 2
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20976
20892: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20893: LD_ADDR_VAR 0 2
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: LD_INT 4
20903: PUSH
20904: LD_INT 11
20906: PUSH
20907: LD_INT 12
20909: PUSH
20910: LD_INT 15
20912: PUSH
20913: LD_INT 16
20915: PUSH
20916: LD_INT 22
20918: PUSH
20919: LD_INT 23
20921: PUSH
20922: LD_INT 26
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 101
20938: PUSH
20939: LD_INT 102
20941: PUSH
20942: LD_INT 105
20944: PUSH
20945: LD_INT 106
20947: PUSH
20948: LD_INT 108
20950: PUSH
20951: LD_INT 116
20953: PUSH
20954: LD_INT 117
20956: PUSH
20957: LD_INT 118
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: ST_TO_ADDR
20974: GO 23957
20976: LD_INT 3
20978: DOUBLE
20979: EQUAL
20980: IFTRUE 20984
20982: GO 21072
20984: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20985: LD_ADDR_VAR 0 2
20989: PUSH
20990: LD_INT 2
20992: PUSH
20993: LD_INT 4
20995: PUSH
20996: LD_INT 5
20998: PUSH
20999: LD_INT 11
21001: PUSH
21002: LD_INT 12
21004: PUSH
21005: LD_INT 15
21007: PUSH
21008: LD_INT 16
21010: PUSH
21011: LD_INT 22
21013: PUSH
21014: LD_INT 26
21016: PUSH
21017: LD_INT 36
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 101
21034: PUSH
21035: LD_INT 102
21037: PUSH
21038: LD_INT 105
21040: PUSH
21041: LD_INT 106
21043: PUSH
21044: LD_INT 108
21046: PUSH
21047: LD_INT 116
21049: PUSH
21050: LD_INT 117
21052: PUSH
21053: LD_INT 118
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: ST_TO_ADDR
21070: GO 23957
21072: LD_INT 4
21074: DOUBLE
21075: EQUAL
21076: IFTRUE 21080
21078: GO 21176
21080: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21081: LD_ADDR_VAR 0 2
21085: PUSH
21086: LD_INT 2
21088: PUSH
21089: LD_INT 4
21091: PUSH
21092: LD_INT 5
21094: PUSH
21095: LD_INT 8
21097: PUSH
21098: LD_INT 11
21100: PUSH
21101: LD_INT 12
21103: PUSH
21104: LD_INT 15
21106: PUSH
21107: LD_INT 16
21109: PUSH
21110: LD_INT 22
21112: PUSH
21113: LD_INT 23
21115: PUSH
21116: LD_INT 26
21118: PUSH
21119: LD_INT 36
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 101
21138: PUSH
21139: LD_INT 102
21141: PUSH
21142: LD_INT 105
21144: PUSH
21145: LD_INT 106
21147: PUSH
21148: LD_INT 108
21150: PUSH
21151: LD_INT 116
21153: PUSH
21154: LD_INT 117
21156: PUSH
21157: LD_INT 118
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: ST_TO_ADDR
21174: GO 23957
21176: LD_INT 5
21178: DOUBLE
21179: EQUAL
21180: IFTRUE 21184
21182: GO 21296
21184: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21185: LD_ADDR_VAR 0 2
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: LD_INT 4
21195: PUSH
21196: LD_INT 5
21198: PUSH
21199: LD_INT 6
21201: PUSH
21202: LD_INT 8
21204: PUSH
21205: LD_INT 11
21207: PUSH
21208: LD_INT 12
21210: PUSH
21211: LD_INT 15
21213: PUSH
21214: LD_INT 16
21216: PUSH
21217: LD_INT 22
21219: PUSH
21220: LD_INT 23
21222: PUSH
21223: LD_INT 25
21225: PUSH
21226: LD_INT 26
21228: PUSH
21229: LD_INT 36
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 101
21250: PUSH
21251: LD_INT 102
21253: PUSH
21254: LD_INT 105
21256: PUSH
21257: LD_INT 106
21259: PUSH
21260: LD_INT 108
21262: PUSH
21263: LD_INT 109
21265: PUSH
21266: LD_INT 112
21268: PUSH
21269: LD_INT 116
21271: PUSH
21272: LD_INT 117
21274: PUSH
21275: LD_INT 118
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: ST_TO_ADDR
21294: GO 23957
21296: LD_INT 6
21298: DOUBLE
21299: EQUAL
21300: IFTRUE 21304
21302: GO 21436
21304: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21305: LD_ADDR_VAR 0 2
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: LD_INT 4
21315: PUSH
21316: LD_INT 5
21318: PUSH
21319: LD_INT 6
21321: PUSH
21322: LD_INT 8
21324: PUSH
21325: LD_INT 11
21327: PUSH
21328: LD_INT 12
21330: PUSH
21331: LD_INT 15
21333: PUSH
21334: LD_INT 16
21336: PUSH
21337: LD_INT 20
21339: PUSH
21340: LD_INT 21
21342: PUSH
21343: LD_INT 22
21345: PUSH
21346: LD_INT 23
21348: PUSH
21349: LD_INT 25
21351: PUSH
21352: LD_INT 26
21354: PUSH
21355: LD_INT 30
21357: PUSH
21358: LD_INT 31
21360: PUSH
21361: LD_INT 32
21363: PUSH
21364: LD_INT 36
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 101
21390: PUSH
21391: LD_INT 102
21393: PUSH
21394: LD_INT 105
21396: PUSH
21397: LD_INT 106
21399: PUSH
21400: LD_INT 108
21402: PUSH
21403: LD_INT 109
21405: PUSH
21406: LD_INT 112
21408: PUSH
21409: LD_INT 116
21411: PUSH
21412: LD_INT 117
21414: PUSH
21415: LD_INT 118
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: ST_TO_ADDR
21434: GO 23957
21436: LD_INT 7
21438: DOUBLE
21439: EQUAL
21440: IFTRUE 21444
21442: GO 21556
21444: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21445: LD_ADDR_VAR 0 2
21449: PUSH
21450: LD_INT 2
21452: PUSH
21453: LD_INT 4
21455: PUSH
21456: LD_INT 5
21458: PUSH
21459: LD_INT 7
21461: PUSH
21462: LD_INT 11
21464: PUSH
21465: LD_INT 12
21467: PUSH
21468: LD_INT 15
21470: PUSH
21471: LD_INT 16
21473: PUSH
21474: LD_INT 20
21476: PUSH
21477: LD_INT 21
21479: PUSH
21480: LD_INT 22
21482: PUSH
21483: LD_INT 23
21485: PUSH
21486: LD_INT 25
21488: PUSH
21489: LD_INT 26
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 101
21510: PUSH
21511: LD_INT 102
21513: PUSH
21514: LD_INT 103
21516: PUSH
21517: LD_INT 105
21519: PUSH
21520: LD_INT 106
21522: PUSH
21523: LD_INT 108
21525: PUSH
21526: LD_INT 112
21528: PUSH
21529: LD_INT 116
21531: PUSH
21532: LD_INT 117
21534: PUSH
21535: LD_INT 118
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: ST_TO_ADDR
21554: GO 23957
21556: LD_INT 8
21558: DOUBLE
21559: EQUAL
21560: IFTRUE 21564
21562: GO 21704
21564: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21565: LD_ADDR_VAR 0 2
21569: PUSH
21570: LD_INT 2
21572: PUSH
21573: LD_INT 4
21575: PUSH
21576: LD_INT 5
21578: PUSH
21579: LD_INT 6
21581: PUSH
21582: LD_INT 7
21584: PUSH
21585: LD_INT 8
21587: PUSH
21588: LD_INT 11
21590: PUSH
21591: LD_INT 12
21593: PUSH
21594: LD_INT 15
21596: PUSH
21597: LD_INT 16
21599: PUSH
21600: LD_INT 20
21602: PUSH
21603: LD_INT 21
21605: PUSH
21606: LD_INT 22
21608: PUSH
21609: LD_INT 23
21611: PUSH
21612: LD_INT 25
21614: PUSH
21615: LD_INT 26
21617: PUSH
21618: LD_INT 30
21620: PUSH
21621: LD_INT 31
21623: PUSH
21624: LD_INT 32
21626: PUSH
21627: LD_INT 36
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 101
21654: PUSH
21655: LD_INT 102
21657: PUSH
21658: LD_INT 103
21660: PUSH
21661: LD_INT 105
21663: PUSH
21664: LD_INT 106
21666: PUSH
21667: LD_INT 108
21669: PUSH
21670: LD_INT 109
21672: PUSH
21673: LD_INT 112
21675: PUSH
21676: LD_INT 116
21678: PUSH
21679: LD_INT 117
21681: PUSH
21682: LD_INT 118
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: ST_TO_ADDR
21702: GO 23957
21704: LD_INT 9
21706: DOUBLE
21707: EQUAL
21708: IFTRUE 21712
21710: GO 21860
21712: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21713: LD_ADDR_VAR 0 2
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: LD_INT 4
21723: PUSH
21724: LD_INT 5
21726: PUSH
21727: LD_INT 6
21729: PUSH
21730: LD_INT 7
21732: PUSH
21733: LD_INT 8
21735: PUSH
21736: LD_INT 11
21738: PUSH
21739: LD_INT 12
21741: PUSH
21742: LD_INT 15
21744: PUSH
21745: LD_INT 16
21747: PUSH
21748: LD_INT 20
21750: PUSH
21751: LD_INT 21
21753: PUSH
21754: LD_INT 22
21756: PUSH
21757: LD_INT 23
21759: PUSH
21760: LD_INT 25
21762: PUSH
21763: LD_INT 26
21765: PUSH
21766: LD_INT 28
21768: PUSH
21769: LD_INT 30
21771: PUSH
21772: LD_INT 31
21774: PUSH
21775: LD_INT 32
21777: PUSH
21778: LD_INT 36
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 101
21806: PUSH
21807: LD_INT 102
21809: PUSH
21810: LD_INT 103
21812: PUSH
21813: LD_INT 105
21815: PUSH
21816: LD_INT 106
21818: PUSH
21819: LD_INT 108
21821: PUSH
21822: LD_INT 109
21824: PUSH
21825: LD_INT 112
21827: PUSH
21828: LD_INT 114
21830: PUSH
21831: LD_INT 116
21833: PUSH
21834: LD_INT 117
21836: PUSH
21837: LD_INT 118
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: ST_TO_ADDR
21858: GO 23957
21860: LD_INT 10
21862: DOUBLE
21863: EQUAL
21864: IFTRUE 21868
21866: GO 22064
21868: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21869: LD_ADDR_VAR 0 2
21873: PUSH
21874: LD_INT 2
21876: PUSH
21877: LD_INT 4
21879: PUSH
21880: LD_INT 5
21882: PUSH
21883: LD_INT 6
21885: PUSH
21886: LD_INT 7
21888: PUSH
21889: LD_INT 8
21891: PUSH
21892: LD_INT 9
21894: PUSH
21895: LD_INT 10
21897: PUSH
21898: LD_INT 11
21900: PUSH
21901: LD_INT 12
21903: PUSH
21904: LD_INT 13
21906: PUSH
21907: LD_INT 14
21909: PUSH
21910: LD_INT 15
21912: PUSH
21913: LD_INT 16
21915: PUSH
21916: LD_INT 17
21918: PUSH
21919: LD_INT 18
21921: PUSH
21922: LD_INT 19
21924: PUSH
21925: LD_INT 20
21927: PUSH
21928: LD_INT 21
21930: PUSH
21931: LD_INT 22
21933: PUSH
21934: LD_INT 23
21936: PUSH
21937: LD_INT 24
21939: PUSH
21940: LD_INT 25
21942: PUSH
21943: LD_INT 26
21945: PUSH
21946: LD_INT 28
21948: PUSH
21949: LD_INT 30
21951: PUSH
21952: LD_INT 31
21954: PUSH
21955: LD_INT 32
21957: PUSH
21958: LD_INT 36
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 101
21994: PUSH
21995: LD_INT 102
21997: PUSH
21998: LD_INT 103
22000: PUSH
22001: LD_INT 104
22003: PUSH
22004: LD_INT 105
22006: PUSH
22007: LD_INT 106
22009: PUSH
22010: LD_INT 107
22012: PUSH
22013: LD_INT 108
22015: PUSH
22016: LD_INT 109
22018: PUSH
22019: LD_INT 110
22021: PUSH
22022: LD_INT 111
22024: PUSH
22025: LD_INT 112
22027: PUSH
22028: LD_INT 114
22030: PUSH
22031: LD_INT 116
22033: PUSH
22034: LD_INT 117
22036: PUSH
22037: LD_INT 118
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: ST_TO_ADDR
22062: GO 23957
22064: LD_INT 11
22066: DOUBLE
22067: EQUAL
22068: IFTRUE 22072
22070: GO 22276
22072: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22073: LD_ADDR_VAR 0 2
22077: PUSH
22078: LD_INT 2
22080: PUSH
22081: LD_INT 3
22083: PUSH
22084: LD_INT 4
22086: PUSH
22087: LD_INT 5
22089: PUSH
22090: LD_INT 6
22092: PUSH
22093: LD_INT 7
22095: PUSH
22096: LD_INT 8
22098: PUSH
22099: LD_INT 9
22101: PUSH
22102: LD_INT 10
22104: PUSH
22105: LD_INT 11
22107: PUSH
22108: LD_INT 12
22110: PUSH
22111: LD_INT 13
22113: PUSH
22114: LD_INT 14
22116: PUSH
22117: LD_INT 15
22119: PUSH
22120: LD_INT 16
22122: PUSH
22123: LD_INT 17
22125: PUSH
22126: LD_INT 18
22128: PUSH
22129: LD_INT 19
22131: PUSH
22132: LD_INT 20
22134: PUSH
22135: LD_INT 21
22137: PUSH
22138: LD_INT 22
22140: PUSH
22141: LD_INT 23
22143: PUSH
22144: LD_INT 24
22146: PUSH
22147: LD_INT 25
22149: PUSH
22150: LD_INT 26
22152: PUSH
22153: LD_INT 28
22155: PUSH
22156: LD_INT 30
22158: PUSH
22159: LD_INT 31
22161: PUSH
22162: LD_INT 32
22164: PUSH
22165: LD_INT 34
22167: PUSH
22168: LD_INT 36
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 101
22206: PUSH
22207: LD_INT 102
22209: PUSH
22210: LD_INT 103
22212: PUSH
22213: LD_INT 104
22215: PUSH
22216: LD_INT 105
22218: PUSH
22219: LD_INT 106
22221: PUSH
22222: LD_INT 107
22224: PUSH
22225: LD_INT 108
22227: PUSH
22228: LD_INT 109
22230: PUSH
22231: LD_INT 110
22233: PUSH
22234: LD_INT 111
22236: PUSH
22237: LD_INT 112
22239: PUSH
22240: LD_INT 114
22242: PUSH
22243: LD_INT 116
22245: PUSH
22246: LD_INT 117
22248: PUSH
22249: LD_INT 118
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: ST_TO_ADDR
22274: GO 23957
22276: LD_INT 12
22278: DOUBLE
22279: EQUAL
22280: IFTRUE 22284
22282: GO 22504
22284: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22285: LD_ADDR_VAR 0 2
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: LD_INT 2
22295: PUSH
22296: LD_INT 3
22298: PUSH
22299: LD_INT 4
22301: PUSH
22302: LD_INT 5
22304: PUSH
22305: LD_INT 6
22307: PUSH
22308: LD_INT 7
22310: PUSH
22311: LD_INT 8
22313: PUSH
22314: LD_INT 9
22316: PUSH
22317: LD_INT 10
22319: PUSH
22320: LD_INT 11
22322: PUSH
22323: LD_INT 12
22325: PUSH
22326: LD_INT 13
22328: PUSH
22329: LD_INT 14
22331: PUSH
22332: LD_INT 15
22334: PUSH
22335: LD_INT 16
22337: PUSH
22338: LD_INT 17
22340: PUSH
22341: LD_INT 18
22343: PUSH
22344: LD_INT 19
22346: PUSH
22347: LD_INT 20
22349: PUSH
22350: LD_INT 21
22352: PUSH
22353: LD_INT 22
22355: PUSH
22356: LD_INT 23
22358: PUSH
22359: LD_INT 24
22361: PUSH
22362: LD_INT 25
22364: PUSH
22365: LD_INT 26
22367: PUSH
22368: LD_INT 27
22370: PUSH
22371: LD_INT 28
22373: PUSH
22374: LD_INT 30
22376: PUSH
22377: LD_INT 31
22379: PUSH
22380: LD_INT 32
22382: PUSH
22383: LD_INT 33
22385: PUSH
22386: LD_INT 34
22388: PUSH
22389: LD_INT 36
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 101
22430: PUSH
22431: LD_INT 102
22433: PUSH
22434: LD_INT 103
22436: PUSH
22437: LD_INT 104
22439: PUSH
22440: LD_INT 105
22442: PUSH
22443: LD_INT 106
22445: PUSH
22446: LD_INT 107
22448: PUSH
22449: LD_INT 108
22451: PUSH
22452: LD_INT 109
22454: PUSH
22455: LD_INT 110
22457: PUSH
22458: LD_INT 111
22460: PUSH
22461: LD_INT 112
22463: PUSH
22464: LD_INT 113
22466: PUSH
22467: LD_INT 114
22469: PUSH
22470: LD_INT 116
22472: PUSH
22473: LD_INT 117
22475: PUSH
22476: LD_INT 118
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: ST_TO_ADDR
22502: GO 23957
22504: LD_INT 13
22506: DOUBLE
22507: EQUAL
22508: IFTRUE 22512
22510: GO 22720
22512: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22513: LD_ADDR_VAR 0 2
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: LD_INT 2
22523: PUSH
22524: LD_INT 3
22526: PUSH
22527: LD_INT 4
22529: PUSH
22530: LD_INT 5
22532: PUSH
22533: LD_INT 8
22535: PUSH
22536: LD_INT 9
22538: PUSH
22539: LD_INT 10
22541: PUSH
22542: LD_INT 11
22544: PUSH
22545: LD_INT 12
22547: PUSH
22548: LD_INT 14
22550: PUSH
22551: LD_INT 15
22553: PUSH
22554: LD_INT 16
22556: PUSH
22557: LD_INT 17
22559: PUSH
22560: LD_INT 18
22562: PUSH
22563: LD_INT 19
22565: PUSH
22566: LD_INT 20
22568: PUSH
22569: LD_INT 21
22571: PUSH
22572: LD_INT 22
22574: PUSH
22575: LD_INT 23
22577: PUSH
22578: LD_INT 24
22580: PUSH
22581: LD_INT 25
22583: PUSH
22584: LD_INT 26
22586: PUSH
22587: LD_INT 27
22589: PUSH
22590: LD_INT 28
22592: PUSH
22593: LD_INT 30
22595: PUSH
22596: LD_INT 31
22598: PUSH
22599: LD_INT 32
22601: PUSH
22602: LD_INT 33
22604: PUSH
22605: LD_INT 34
22607: PUSH
22608: LD_INT 36
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 101
22646: PUSH
22647: LD_INT 102
22649: PUSH
22650: LD_INT 103
22652: PUSH
22653: LD_INT 104
22655: PUSH
22656: LD_INT 105
22658: PUSH
22659: LD_INT 106
22661: PUSH
22662: LD_INT 107
22664: PUSH
22665: LD_INT 108
22667: PUSH
22668: LD_INT 109
22670: PUSH
22671: LD_INT 110
22673: PUSH
22674: LD_INT 111
22676: PUSH
22677: LD_INT 112
22679: PUSH
22680: LD_INT 113
22682: PUSH
22683: LD_INT 114
22685: PUSH
22686: LD_INT 116
22688: PUSH
22689: LD_INT 117
22691: PUSH
22692: LD_INT 118
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: ST_TO_ADDR
22718: GO 23957
22720: LD_INT 14
22722: DOUBLE
22723: EQUAL
22724: IFTRUE 22728
22726: GO 22952
22728: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22729: LD_ADDR_VAR 0 2
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: LD_INT 2
22739: PUSH
22740: LD_INT 3
22742: PUSH
22743: LD_INT 4
22745: PUSH
22746: LD_INT 5
22748: PUSH
22749: LD_INT 6
22751: PUSH
22752: LD_INT 7
22754: PUSH
22755: LD_INT 8
22757: PUSH
22758: LD_INT 9
22760: PUSH
22761: LD_INT 10
22763: PUSH
22764: LD_INT 11
22766: PUSH
22767: LD_INT 12
22769: PUSH
22770: LD_INT 13
22772: PUSH
22773: LD_INT 14
22775: PUSH
22776: LD_INT 15
22778: PUSH
22779: LD_INT 16
22781: PUSH
22782: LD_INT 17
22784: PUSH
22785: LD_INT 18
22787: PUSH
22788: LD_INT 19
22790: PUSH
22791: LD_INT 20
22793: PUSH
22794: LD_INT 21
22796: PUSH
22797: LD_INT 22
22799: PUSH
22800: LD_INT 23
22802: PUSH
22803: LD_INT 24
22805: PUSH
22806: LD_INT 25
22808: PUSH
22809: LD_INT 26
22811: PUSH
22812: LD_INT 27
22814: PUSH
22815: LD_INT 28
22817: PUSH
22818: LD_INT 29
22820: PUSH
22821: LD_INT 30
22823: PUSH
22824: LD_INT 31
22826: PUSH
22827: LD_INT 32
22829: PUSH
22830: LD_INT 33
22832: PUSH
22833: LD_INT 34
22835: PUSH
22836: LD_INT 36
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 101
22878: PUSH
22879: LD_INT 102
22881: PUSH
22882: LD_INT 103
22884: PUSH
22885: LD_INT 104
22887: PUSH
22888: LD_INT 105
22890: PUSH
22891: LD_INT 106
22893: PUSH
22894: LD_INT 107
22896: PUSH
22897: LD_INT 108
22899: PUSH
22900: LD_INT 109
22902: PUSH
22903: LD_INT 110
22905: PUSH
22906: LD_INT 111
22908: PUSH
22909: LD_INT 112
22911: PUSH
22912: LD_INT 113
22914: PUSH
22915: LD_INT 114
22917: PUSH
22918: LD_INT 116
22920: PUSH
22921: LD_INT 117
22923: PUSH
22924: LD_INT 118
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: ST_TO_ADDR
22950: GO 23957
22952: LD_INT 15
22954: DOUBLE
22955: EQUAL
22956: IFTRUE 22960
22958: GO 23184
22960: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22961: LD_ADDR_VAR 0 2
22965: PUSH
22966: LD_INT 1
22968: PUSH
22969: LD_INT 2
22971: PUSH
22972: LD_INT 3
22974: PUSH
22975: LD_INT 4
22977: PUSH
22978: LD_INT 5
22980: PUSH
22981: LD_INT 6
22983: PUSH
22984: LD_INT 7
22986: PUSH
22987: LD_INT 8
22989: PUSH
22990: LD_INT 9
22992: PUSH
22993: LD_INT 10
22995: PUSH
22996: LD_INT 11
22998: PUSH
22999: LD_INT 12
23001: PUSH
23002: LD_INT 13
23004: PUSH
23005: LD_INT 14
23007: PUSH
23008: LD_INT 15
23010: PUSH
23011: LD_INT 16
23013: PUSH
23014: LD_INT 17
23016: PUSH
23017: LD_INT 18
23019: PUSH
23020: LD_INT 19
23022: PUSH
23023: LD_INT 20
23025: PUSH
23026: LD_INT 21
23028: PUSH
23029: LD_INT 22
23031: PUSH
23032: LD_INT 23
23034: PUSH
23035: LD_INT 24
23037: PUSH
23038: LD_INT 25
23040: PUSH
23041: LD_INT 26
23043: PUSH
23044: LD_INT 27
23046: PUSH
23047: LD_INT 28
23049: PUSH
23050: LD_INT 29
23052: PUSH
23053: LD_INT 30
23055: PUSH
23056: LD_INT 31
23058: PUSH
23059: LD_INT 32
23061: PUSH
23062: LD_INT 33
23064: PUSH
23065: LD_INT 34
23067: PUSH
23068: LD_INT 36
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 101
23110: PUSH
23111: LD_INT 102
23113: PUSH
23114: LD_INT 103
23116: PUSH
23117: LD_INT 104
23119: PUSH
23120: LD_INT 105
23122: PUSH
23123: LD_INT 106
23125: PUSH
23126: LD_INT 107
23128: PUSH
23129: LD_INT 108
23131: PUSH
23132: LD_INT 109
23134: PUSH
23135: LD_INT 110
23137: PUSH
23138: LD_INT 111
23140: PUSH
23141: LD_INT 112
23143: PUSH
23144: LD_INT 113
23146: PUSH
23147: LD_INT 114
23149: PUSH
23150: LD_INT 116
23152: PUSH
23153: LD_INT 117
23155: PUSH
23156: LD_INT 118
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: ST_TO_ADDR
23182: GO 23957
23184: LD_INT 16
23186: DOUBLE
23187: EQUAL
23188: IFTRUE 23192
23190: GO 23328
23192: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23193: LD_ADDR_VAR 0 2
23197: PUSH
23198: LD_INT 2
23200: PUSH
23201: LD_INT 4
23203: PUSH
23204: LD_INT 5
23206: PUSH
23207: LD_INT 7
23209: PUSH
23210: LD_INT 11
23212: PUSH
23213: LD_INT 12
23215: PUSH
23216: LD_INT 15
23218: PUSH
23219: LD_INT 16
23221: PUSH
23222: LD_INT 20
23224: PUSH
23225: LD_INT 21
23227: PUSH
23228: LD_INT 22
23230: PUSH
23231: LD_INT 23
23233: PUSH
23234: LD_INT 25
23236: PUSH
23237: LD_INT 26
23239: PUSH
23240: LD_INT 30
23242: PUSH
23243: LD_INT 31
23245: PUSH
23246: LD_INT 32
23248: PUSH
23249: LD_INT 33
23251: PUSH
23252: LD_INT 34
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 101
23278: PUSH
23279: LD_INT 102
23281: PUSH
23282: LD_INT 103
23284: PUSH
23285: LD_INT 106
23287: PUSH
23288: LD_INT 108
23290: PUSH
23291: LD_INT 112
23293: PUSH
23294: LD_INT 113
23296: PUSH
23297: LD_INT 114
23299: PUSH
23300: LD_INT 116
23302: PUSH
23303: LD_INT 117
23305: PUSH
23306: LD_INT 118
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: ST_TO_ADDR
23326: GO 23957
23328: LD_INT 17
23330: DOUBLE
23331: EQUAL
23332: IFTRUE 23336
23334: GO 23560
23336: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23337: LD_ADDR_VAR 0 2
23341: PUSH
23342: LD_INT 1
23344: PUSH
23345: LD_INT 2
23347: PUSH
23348: LD_INT 3
23350: PUSH
23351: LD_INT 4
23353: PUSH
23354: LD_INT 5
23356: PUSH
23357: LD_INT 6
23359: PUSH
23360: LD_INT 7
23362: PUSH
23363: LD_INT 8
23365: PUSH
23366: LD_INT 9
23368: PUSH
23369: LD_INT 10
23371: PUSH
23372: LD_INT 11
23374: PUSH
23375: LD_INT 12
23377: PUSH
23378: LD_INT 13
23380: PUSH
23381: LD_INT 14
23383: PUSH
23384: LD_INT 15
23386: PUSH
23387: LD_INT 16
23389: PUSH
23390: LD_INT 17
23392: PUSH
23393: LD_INT 18
23395: PUSH
23396: LD_INT 19
23398: PUSH
23399: LD_INT 20
23401: PUSH
23402: LD_INT 21
23404: PUSH
23405: LD_INT 22
23407: PUSH
23408: LD_INT 23
23410: PUSH
23411: LD_INT 24
23413: PUSH
23414: LD_INT 25
23416: PUSH
23417: LD_INT 26
23419: PUSH
23420: LD_INT 27
23422: PUSH
23423: LD_INT 28
23425: PUSH
23426: LD_INT 29
23428: PUSH
23429: LD_INT 30
23431: PUSH
23432: LD_INT 31
23434: PUSH
23435: LD_INT 32
23437: PUSH
23438: LD_INT 33
23440: PUSH
23441: LD_INT 34
23443: PUSH
23444: LD_INT 36
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 101
23486: PUSH
23487: LD_INT 102
23489: PUSH
23490: LD_INT 103
23492: PUSH
23493: LD_INT 104
23495: PUSH
23496: LD_INT 105
23498: PUSH
23499: LD_INT 106
23501: PUSH
23502: LD_INT 107
23504: PUSH
23505: LD_INT 108
23507: PUSH
23508: LD_INT 109
23510: PUSH
23511: LD_INT 110
23513: PUSH
23514: LD_INT 111
23516: PUSH
23517: LD_INT 112
23519: PUSH
23520: LD_INT 113
23522: PUSH
23523: LD_INT 114
23525: PUSH
23526: LD_INT 116
23528: PUSH
23529: LD_INT 117
23531: PUSH
23532: LD_INT 118
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: ST_TO_ADDR
23558: GO 23957
23560: LD_INT 18
23562: DOUBLE
23563: EQUAL
23564: IFTRUE 23568
23566: GO 23716
23568: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23569: LD_ADDR_VAR 0 2
23573: PUSH
23574: LD_INT 2
23576: PUSH
23577: LD_INT 4
23579: PUSH
23580: LD_INT 5
23582: PUSH
23583: LD_INT 7
23585: PUSH
23586: LD_INT 11
23588: PUSH
23589: LD_INT 12
23591: PUSH
23592: LD_INT 15
23594: PUSH
23595: LD_INT 16
23597: PUSH
23598: LD_INT 20
23600: PUSH
23601: LD_INT 21
23603: PUSH
23604: LD_INT 22
23606: PUSH
23607: LD_INT 23
23609: PUSH
23610: LD_INT 25
23612: PUSH
23613: LD_INT 26
23615: PUSH
23616: LD_INT 30
23618: PUSH
23619: LD_INT 31
23621: PUSH
23622: LD_INT 32
23624: PUSH
23625: LD_INT 33
23627: PUSH
23628: LD_INT 34
23630: PUSH
23631: LD_INT 35
23633: PUSH
23634: LD_INT 36
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 101
23662: PUSH
23663: LD_INT 102
23665: PUSH
23666: LD_INT 103
23668: PUSH
23669: LD_INT 106
23671: PUSH
23672: LD_INT 108
23674: PUSH
23675: LD_INT 112
23677: PUSH
23678: LD_INT 113
23680: PUSH
23681: LD_INT 114
23683: PUSH
23684: LD_INT 115
23686: PUSH
23687: LD_INT 116
23689: PUSH
23690: LD_INT 117
23692: PUSH
23693: LD_INT 118
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: ST_TO_ADDR
23714: GO 23957
23716: LD_INT 19
23718: DOUBLE
23719: EQUAL
23720: IFTRUE 23724
23722: GO 23956
23724: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23725: LD_ADDR_VAR 0 2
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: LD_INT 2
23735: PUSH
23736: LD_INT 3
23738: PUSH
23739: LD_INT 4
23741: PUSH
23742: LD_INT 5
23744: PUSH
23745: LD_INT 6
23747: PUSH
23748: LD_INT 7
23750: PUSH
23751: LD_INT 8
23753: PUSH
23754: LD_INT 9
23756: PUSH
23757: LD_INT 10
23759: PUSH
23760: LD_INT 11
23762: PUSH
23763: LD_INT 12
23765: PUSH
23766: LD_INT 13
23768: PUSH
23769: LD_INT 14
23771: PUSH
23772: LD_INT 15
23774: PUSH
23775: LD_INT 16
23777: PUSH
23778: LD_INT 17
23780: PUSH
23781: LD_INT 18
23783: PUSH
23784: LD_INT 19
23786: PUSH
23787: LD_INT 20
23789: PUSH
23790: LD_INT 21
23792: PUSH
23793: LD_INT 22
23795: PUSH
23796: LD_INT 23
23798: PUSH
23799: LD_INT 24
23801: PUSH
23802: LD_INT 25
23804: PUSH
23805: LD_INT 26
23807: PUSH
23808: LD_INT 27
23810: PUSH
23811: LD_INT 28
23813: PUSH
23814: LD_INT 29
23816: PUSH
23817: LD_INT 30
23819: PUSH
23820: LD_INT 31
23822: PUSH
23823: LD_INT 32
23825: PUSH
23826: LD_INT 33
23828: PUSH
23829: LD_INT 34
23831: PUSH
23832: LD_INT 35
23834: PUSH
23835: LD_INT 36
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 101
23878: PUSH
23879: LD_INT 102
23881: PUSH
23882: LD_INT 103
23884: PUSH
23885: LD_INT 104
23887: PUSH
23888: LD_INT 105
23890: PUSH
23891: LD_INT 106
23893: PUSH
23894: LD_INT 107
23896: PUSH
23897: LD_INT 108
23899: PUSH
23900: LD_INT 109
23902: PUSH
23903: LD_INT 110
23905: PUSH
23906: LD_INT 111
23908: PUSH
23909: LD_INT 112
23911: PUSH
23912: LD_INT 113
23914: PUSH
23915: LD_INT 114
23917: PUSH
23918: LD_INT 115
23920: PUSH
23921: LD_INT 116
23923: PUSH
23924: LD_INT 117
23926: PUSH
23927: LD_INT 118
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: ST_TO_ADDR
23954: GO 23957
23956: POP
// end else
23957: GO 24188
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23959: LD_ADDR_VAR 0 2
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: LD_INT 2
23969: PUSH
23970: LD_INT 3
23972: PUSH
23973: LD_INT 4
23975: PUSH
23976: LD_INT 5
23978: PUSH
23979: LD_INT 6
23981: PUSH
23982: LD_INT 7
23984: PUSH
23985: LD_INT 8
23987: PUSH
23988: LD_INT 9
23990: PUSH
23991: LD_INT 10
23993: PUSH
23994: LD_INT 11
23996: PUSH
23997: LD_INT 12
23999: PUSH
24000: LD_INT 13
24002: PUSH
24003: LD_INT 14
24005: PUSH
24006: LD_INT 15
24008: PUSH
24009: LD_INT 16
24011: PUSH
24012: LD_INT 17
24014: PUSH
24015: LD_INT 18
24017: PUSH
24018: LD_INT 19
24020: PUSH
24021: LD_INT 20
24023: PUSH
24024: LD_INT 21
24026: PUSH
24027: LD_INT 22
24029: PUSH
24030: LD_INT 23
24032: PUSH
24033: LD_INT 24
24035: PUSH
24036: LD_INT 25
24038: PUSH
24039: LD_INT 26
24041: PUSH
24042: LD_INT 27
24044: PUSH
24045: LD_INT 28
24047: PUSH
24048: LD_INT 29
24050: PUSH
24051: LD_INT 30
24053: PUSH
24054: LD_INT 31
24056: PUSH
24057: LD_INT 32
24059: PUSH
24060: LD_INT 33
24062: PUSH
24063: LD_INT 34
24065: PUSH
24066: LD_INT 35
24068: PUSH
24069: LD_INT 36
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 101
24112: PUSH
24113: LD_INT 102
24115: PUSH
24116: LD_INT 103
24118: PUSH
24119: LD_INT 104
24121: PUSH
24122: LD_INT 105
24124: PUSH
24125: LD_INT 106
24127: PUSH
24128: LD_INT 107
24130: PUSH
24131: LD_INT 108
24133: PUSH
24134: LD_INT 109
24136: PUSH
24137: LD_INT 110
24139: PUSH
24140: LD_INT 111
24142: PUSH
24143: LD_INT 112
24145: PUSH
24146: LD_INT 113
24148: PUSH
24149: LD_INT 114
24151: PUSH
24152: LD_INT 115
24154: PUSH
24155: LD_INT 116
24157: PUSH
24158: LD_INT 117
24160: PUSH
24161: LD_INT 118
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: ST_TO_ADDR
// if result then
24188: LD_VAR 0 2
24192: IFFALSE 24978
// begin normal :=  ;
24194: LD_ADDR_VAR 0 5
24198: PUSH
24199: LD_STRING 
24201: ST_TO_ADDR
// hardcore :=  ;
24202: LD_ADDR_VAR 0 6
24206: PUSH
24207: LD_STRING 
24209: ST_TO_ADDR
// active :=  ;
24210: LD_ADDR_VAR 0 7
24214: PUSH
24215: LD_STRING 
24217: ST_TO_ADDR
// for i = 1 to normalCounter do
24218: LD_ADDR_VAR 0 8
24222: PUSH
24223: DOUBLE
24224: LD_INT 1
24226: DEC
24227: ST_TO_ADDR
24228: LD_EXP 45
24232: PUSH
24233: FOR_TO
24234: IFFALSE 24335
// begin tmp := 0 ;
24236: LD_ADDR_VAR 0 3
24240: PUSH
24241: LD_STRING 0
24243: ST_TO_ADDR
// if result [ 1 ] then
24244: LD_VAR 0 2
24248: PUSH
24249: LD_INT 1
24251: ARRAY
24252: IFFALSE 24317
// if result [ 1 ] [ 1 ] = i then
24254: LD_VAR 0 2
24258: PUSH
24259: LD_INT 1
24261: ARRAY
24262: PUSH
24263: LD_INT 1
24265: ARRAY
24266: PUSH
24267: LD_VAR 0 8
24271: EQUAL
24272: IFFALSE 24317
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24274: LD_ADDR_VAR 0 2
24278: PUSH
24279: LD_VAR 0 2
24283: PPUSH
24284: LD_INT 1
24286: PPUSH
24287: LD_VAR 0 2
24291: PUSH
24292: LD_INT 1
24294: ARRAY
24295: PPUSH
24296: LD_INT 1
24298: PPUSH
24299: CALL_OW 3
24303: PPUSH
24304: CALL_OW 1
24308: ST_TO_ADDR
// tmp := 1 ;
24309: LD_ADDR_VAR 0 3
24313: PUSH
24314: LD_STRING 1
24316: ST_TO_ADDR
// end ; normal := normal & tmp ;
24317: LD_ADDR_VAR 0 5
24321: PUSH
24322: LD_VAR 0 5
24326: PUSH
24327: LD_VAR 0 3
24331: STR
24332: ST_TO_ADDR
// end ;
24333: GO 24233
24335: POP
24336: POP
// for i = 1 to hardcoreCounter do
24337: LD_ADDR_VAR 0 8
24341: PUSH
24342: DOUBLE
24343: LD_INT 1
24345: DEC
24346: ST_TO_ADDR
24347: LD_EXP 46
24351: PUSH
24352: FOR_TO
24353: IFFALSE 24458
// begin tmp := 0 ;
24355: LD_ADDR_VAR 0 3
24359: PUSH
24360: LD_STRING 0
24362: ST_TO_ADDR
// if result [ 2 ] then
24363: LD_VAR 0 2
24367: PUSH
24368: LD_INT 2
24370: ARRAY
24371: IFFALSE 24440
// if result [ 2 ] [ 1 ] = 100 + i then
24373: LD_VAR 0 2
24377: PUSH
24378: LD_INT 2
24380: ARRAY
24381: PUSH
24382: LD_INT 1
24384: ARRAY
24385: PUSH
24386: LD_INT 100
24388: PUSH
24389: LD_VAR 0 8
24393: PLUS
24394: EQUAL
24395: IFFALSE 24440
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24397: LD_ADDR_VAR 0 2
24401: PUSH
24402: LD_VAR 0 2
24406: PPUSH
24407: LD_INT 2
24409: PPUSH
24410: LD_VAR 0 2
24414: PUSH
24415: LD_INT 2
24417: ARRAY
24418: PPUSH
24419: LD_INT 1
24421: PPUSH
24422: CALL_OW 3
24426: PPUSH
24427: CALL_OW 1
24431: ST_TO_ADDR
// tmp := 1 ;
24432: LD_ADDR_VAR 0 3
24436: PUSH
24437: LD_STRING 1
24439: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24440: LD_ADDR_VAR 0 6
24444: PUSH
24445: LD_VAR 0 6
24449: PUSH
24450: LD_VAR 0 3
24454: STR
24455: ST_TO_ADDR
// end ;
24456: GO 24352
24458: POP
24459: POP
// if isGameLoad then
24460: LD_VAR 0 1
24464: IFFALSE 24939
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24466: LD_ADDR_VAR 0 4
24470: PUSH
24471: LD_EXP 49
24475: PUSH
24476: LD_EXP 48
24480: PUSH
24481: LD_EXP 50
24485: PUSH
24486: LD_EXP 47
24490: PUSH
24491: LD_EXP 51
24495: PUSH
24496: LD_EXP 52
24500: PUSH
24501: LD_EXP 53
24505: PUSH
24506: LD_EXP 54
24510: PUSH
24511: LD_EXP 55
24515: PUSH
24516: LD_EXP 56
24520: PUSH
24521: LD_EXP 57
24525: PUSH
24526: LD_EXP 58
24530: PUSH
24531: LD_EXP 59
24535: PUSH
24536: LD_EXP 60
24540: PUSH
24541: LD_EXP 68
24545: PUSH
24546: LD_EXP 69
24550: PUSH
24551: LD_EXP 70
24555: PUSH
24556: LD_EXP 71
24560: PUSH
24561: LD_EXP 73
24565: PUSH
24566: LD_EXP 74
24570: PUSH
24571: LD_EXP 75
24575: PUSH
24576: LD_EXP 78
24580: PUSH
24581: LD_EXP 80
24585: PUSH
24586: LD_EXP 81
24590: PUSH
24591: LD_EXP 82
24595: PUSH
24596: LD_EXP 84
24600: PUSH
24601: LD_EXP 85
24605: PUSH
24606: LD_EXP 88
24610: PUSH
24611: LD_EXP 89
24615: PUSH
24616: LD_EXP 90
24620: PUSH
24621: LD_EXP 91
24625: PUSH
24626: LD_EXP 92
24630: PUSH
24631: LD_EXP 93
24635: PUSH
24636: LD_EXP 94
24640: PUSH
24641: LD_EXP 95
24645: PUSH
24646: LD_EXP 96
24650: PUSH
24651: LD_EXP 61
24655: PUSH
24656: LD_EXP 62
24660: PUSH
24661: LD_EXP 65
24665: PUSH
24666: LD_EXP 66
24670: PUSH
24671: LD_EXP 67
24675: PUSH
24676: LD_EXP 63
24680: PUSH
24681: LD_EXP 64
24685: PUSH
24686: LD_EXP 72
24690: PUSH
24691: LD_EXP 76
24695: PUSH
24696: LD_EXP 77
24700: PUSH
24701: LD_EXP 79
24705: PUSH
24706: LD_EXP 83
24710: PUSH
24711: LD_EXP 86
24715: PUSH
24716: LD_EXP 87
24720: PUSH
24721: LD_EXP 97
24725: PUSH
24726: LD_EXP 98
24730: PUSH
24731: LD_EXP 99
24735: PUSH
24736: LD_EXP 100
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: ST_TO_ADDR
// tmp :=  ;
24797: LD_ADDR_VAR 0 3
24801: PUSH
24802: LD_STRING 
24804: ST_TO_ADDR
// for i = 1 to normalCounter do
24805: LD_ADDR_VAR 0 8
24809: PUSH
24810: DOUBLE
24811: LD_INT 1
24813: DEC
24814: ST_TO_ADDR
24815: LD_EXP 45
24819: PUSH
24820: FOR_TO
24821: IFFALSE 24857
// begin if flags [ i ] then
24823: LD_VAR 0 4
24827: PUSH
24828: LD_VAR 0 8
24832: ARRAY
24833: IFFALSE 24855
// tmp := tmp & i & ; ;
24835: LD_ADDR_VAR 0 3
24839: PUSH
24840: LD_VAR 0 3
24844: PUSH
24845: LD_VAR 0 8
24849: STR
24850: PUSH
24851: LD_STRING ;
24853: STR
24854: ST_TO_ADDR
// end ;
24855: GO 24820
24857: POP
24858: POP
// for i = 1 to hardcoreCounter do
24859: LD_ADDR_VAR 0 8
24863: PUSH
24864: DOUBLE
24865: LD_INT 1
24867: DEC
24868: ST_TO_ADDR
24869: LD_EXP 46
24873: PUSH
24874: FOR_TO
24875: IFFALSE 24921
// begin if flags [ normalCounter + i ] then
24877: LD_VAR 0 4
24881: PUSH
24882: LD_EXP 45
24886: PUSH
24887: LD_VAR 0 8
24891: PLUS
24892: ARRAY
24893: IFFALSE 24919
// tmp := tmp & ( 100 + i ) & ; ;
24895: LD_ADDR_VAR 0 3
24899: PUSH
24900: LD_VAR 0 3
24904: PUSH
24905: LD_INT 100
24907: PUSH
24908: LD_VAR 0 8
24912: PLUS
24913: STR
24914: PUSH
24915: LD_STRING ;
24917: STR
24918: ST_TO_ADDR
// end ;
24919: GO 24874
24921: POP
24922: POP
// if tmp then
24923: LD_VAR 0 3
24927: IFFALSE 24939
// active := tmp ;
24929: LD_ADDR_VAR 0 7
24933: PUSH
24934: LD_VAR 0 3
24938: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24939: LD_STRING getStreamItemsFromMission("
24941: PUSH
24942: LD_VAR 0 5
24946: STR
24947: PUSH
24948: LD_STRING ","
24950: STR
24951: PUSH
24952: LD_VAR 0 6
24956: STR
24957: PUSH
24958: LD_STRING ","
24960: STR
24961: PUSH
24962: LD_VAR 0 7
24966: STR
24967: PUSH
24968: LD_STRING ")
24970: STR
24971: PPUSH
24972: CALL_OW 559
// end else
24976: GO 24985
// ToLua ( getStreamItemsFromMission("","","") ) ;
24978: LD_STRING getStreamItemsFromMission("","","")
24980: PPUSH
24981: CALL_OW 559
// end ;
24985: LD_VAR 0 2
24989: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24990: LD_EXP 44
24994: IFFALSE 25002
24996: PUSH
24997: LD_EXP 49
25001: AND
25002: IFFALSE 25126
25004: GO 25006
25006: DISABLE
25007: LD_INT 0
25009: PPUSH
25010: PPUSH
// begin enable ;
25011: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25012: LD_ADDR_VAR 0 2
25016: PUSH
25017: LD_INT 22
25019: PUSH
25020: LD_OWVAR 2
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 2
25031: PUSH
25032: LD_INT 34
25034: PUSH
25035: LD_INT 7
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 34
25044: PUSH
25045: LD_INT 45
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 34
25054: PUSH
25055: LD_INT 28
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 34
25064: PUSH
25065: LD_INT 47
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PPUSH
25083: CALL_OW 69
25087: ST_TO_ADDR
// if not tmp then
25088: LD_VAR 0 2
25092: NOT
25093: IFFALSE 25097
// exit ;
25095: GO 25126
// for i in tmp do
25097: LD_ADDR_VAR 0 1
25101: PUSH
25102: LD_VAR 0 2
25106: PUSH
25107: FOR_IN
25108: IFFALSE 25124
// begin SetLives ( i , 0 ) ;
25110: LD_VAR 0 1
25114: PPUSH
25115: LD_INT 0
25117: PPUSH
25118: CALL_OW 234
// end ;
25122: GO 25107
25124: POP
25125: POP
// end ;
25126: PPOPN 2
25128: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25129: LD_EXP 44
25133: IFFALSE 25141
25135: PUSH
25136: LD_EXP 50
25140: AND
25141: IFFALSE 25225
25143: GO 25145
25145: DISABLE
25146: LD_INT 0
25148: PPUSH
25149: PPUSH
// begin enable ;
25150: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25151: LD_ADDR_VAR 0 2
25155: PUSH
25156: LD_INT 22
25158: PUSH
25159: LD_OWVAR 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 32
25170: PUSH
25171: LD_INT 3
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PPUSH
25182: CALL_OW 69
25186: ST_TO_ADDR
// if not tmp then
25187: LD_VAR 0 2
25191: NOT
25192: IFFALSE 25196
// exit ;
25194: GO 25225
// for i in tmp do
25196: LD_ADDR_VAR 0 1
25200: PUSH
25201: LD_VAR 0 2
25205: PUSH
25206: FOR_IN
25207: IFFALSE 25223
// begin SetLives ( i , 0 ) ;
25209: LD_VAR 0 1
25213: PPUSH
25214: LD_INT 0
25216: PPUSH
25217: CALL_OW 234
// end ;
25221: GO 25206
25223: POP
25224: POP
// end ;
25225: PPOPN 2
25227: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25228: LD_EXP 44
25232: IFFALSE 25240
25234: PUSH
25235: LD_EXP 47
25239: AND
25240: IFFALSE 25333
25242: GO 25244
25244: DISABLE
25245: LD_INT 0
25247: PPUSH
// begin enable ;
25248: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25249: LD_ADDR_VAR 0 1
25253: PUSH
25254: LD_INT 22
25256: PUSH
25257: LD_OWVAR 2
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 2
25268: PUSH
25269: LD_INT 25
25271: PUSH
25272: LD_INT 5
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 25
25281: PUSH
25282: LD_INT 9
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 25
25291: PUSH
25292: LD_INT 8
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PPUSH
25309: CALL_OW 69
25313: PUSH
25314: FOR_IN
25315: IFFALSE 25331
// begin SetClass ( i , 1 ) ;
25317: LD_VAR 0 1
25321: PPUSH
25322: LD_INT 1
25324: PPUSH
25325: CALL_OW 336
// end ;
25329: GO 25314
25331: POP
25332: POP
// end ;
25333: PPOPN 1
25335: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25336: LD_EXP 44
25340: IFFALSE 25348
25342: PUSH
25343: LD_EXP 48
25347: AND
25348: IFFALSE 25360
25350: PUSH
25351: LD_OWVAR 65
25355: PUSH
25356: LD_INT 7
25358: LESS
25359: AND
25360: IFFALSE 25374
25362: GO 25364
25364: DISABLE
// begin enable ;
25365: ENABLE
// game_speed := 7 ;
25366: LD_ADDR_OWVAR 65
25370: PUSH
25371: LD_INT 7
25373: ST_TO_ADDR
// end ;
25374: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25375: LD_EXP 44
25379: IFFALSE 25387
25381: PUSH
25382: LD_EXP 51
25386: AND
25387: IFFALSE 25589
25389: GO 25391
25391: DISABLE
25392: LD_INT 0
25394: PPUSH
25395: PPUSH
25396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25397: LD_ADDR_VAR 0 3
25401: PUSH
25402: LD_INT 81
25404: PUSH
25405: LD_OWVAR 2
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 21
25416: PUSH
25417: LD_INT 1
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PPUSH
25428: CALL_OW 69
25432: ST_TO_ADDR
// if not tmp then
25433: LD_VAR 0 3
25437: NOT
25438: IFFALSE 25442
// exit ;
25440: GO 25589
// if tmp > 5 then
25442: LD_VAR 0 3
25446: PUSH
25447: LD_INT 5
25449: GREATER
25450: IFFALSE 25462
// k := 5 else
25452: LD_ADDR_VAR 0 2
25456: PUSH
25457: LD_INT 5
25459: ST_TO_ADDR
25460: GO 25472
// k := tmp ;
25462: LD_ADDR_VAR 0 2
25466: PUSH
25467: LD_VAR 0 3
25471: ST_TO_ADDR
// for i := 1 to k do
25472: LD_ADDR_VAR 0 1
25476: PUSH
25477: DOUBLE
25478: LD_INT 1
25480: DEC
25481: ST_TO_ADDR
25482: LD_VAR 0 2
25486: PUSH
25487: FOR_TO
25488: IFFALSE 25587
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25490: LD_VAR 0 3
25494: PUSH
25495: LD_VAR 0 1
25499: ARRAY
25500: PPUSH
25501: LD_VAR 0 1
25505: PUSH
25506: LD_INT 4
25508: MOD
25509: PUSH
25510: LD_INT 1
25512: PLUS
25513: PPUSH
25514: CALL_OW 259
25518: PUSH
25519: LD_INT 10
25521: LESS
25522: IFFALSE 25585
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25524: LD_VAR 0 3
25528: PUSH
25529: LD_VAR 0 1
25533: ARRAY
25534: PPUSH
25535: LD_VAR 0 1
25539: PUSH
25540: LD_INT 4
25542: MOD
25543: PUSH
25544: LD_INT 1
25546: PLUS
25547: PPUSH
25548: LD_VAR 0 3
25552: PUSH
25553: LD_VAR 0 1
25557: ARRAY
25558: PPUSH
25559: LD_VAR 0 1
25563: PUSH
25564: LD_INT 4
25566: MOD
25567: PUSH
25568: LD_INT 1
25570: PLUS
25571: PPUSH
25572: CALL_OW 259
25576: PUSH
25577: LD_INT 1
25579: PLUS
25580: PPUSH
25581: CALL_OW 237
25585: GO 25487
25587: POP
25588: POP
// end ;
25589: PPOPN 3
25591: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25592: LD_EXP 44
25596: IFFALSE 25604
25598: PUSH
25599: LD_EXP 52
25603: AND
25604: IFFALSE 25624
25606: GO 25608
25608: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25609: LD_INT 4
25611: PPUSH
25612: LD_OWVAR 2
25616: PPUSH
25617: LD_INT 0
25619: PPUSH
25620: CALL_OW 324
25624: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25625: LD_EXP 44
25629: IFFALSE 25637
25631: PUSH
25632: LD_EXP 81
25636: AND
25637: IFFALSE 25657
25639: GO 25641
25641: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25642: LD_INT 19
25644: PPUSH
25645: LD_OWVAR 2
25649: PPUSH
25650: LD_INT 0
25652: PPUSH
25653: CALL_OW 324
25657: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25658: LD_EXP 44
25662: IFFALSE 25670
25664: PUSH
25665: LD_EXP 53
25669: AND
25670: IFFALSE 25772
25672: GO 25674
25674: DISABLE
25675: LD_INT 0
25677: PPUSH
25678: PPUSH
// begin enable ;
25679: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25680: LD_ADDR_VAR 0 2
25684: PUSH
25685: LD_INT 22
25687: PUSH
25688: LD_OWVAR 2
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 2
25699: PUSH
25700: LD_INT 34
25702: PUSH
25703: LD_INT 11
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 34
25712: PUSH
25713: LD_INT 30
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: LIST
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PPUSH
25729: CALL_OW 69
25733: ST_TO_ADDR
// if not tmp then
25734: LD_VAR 0 2
25738: NOT
25739: IFFALSE 25743
// exit ;
25741: GO 25772
// for i in tmp do
25743: LD_ADDR_VAR 0 1
25747: PUSH
25748: LD_VAR 0 2
25752: PUSH
25753: FOR_IN
25754: IFFALSE 25770
// begin SetLives ( i , 0 ) ;
25756: LD_VAR 0 1
25760: PPUSH
25761: LD_INT 0
25763: PPUSH
25764: CALL_OW 234
// end ;
25768: GO 25753
25770: POP
25771: POP
// end ;
25772: PPOPN 2
25774: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25775: LD_EXP 44
25779: IFFALSE 25787
25781: PUSH
25782: LD_EXP 54
25786: AND
25787: IFFALSE 25807
25789: GO 25791
25791: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25792: LD_INT 32
25794: PPUSH
25795: LD_OWVAR 2
25799: PPUSH
25800: LD_INT 0
25802: PPUSH
25803: CALL_OW 324
25807: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25808: LD_EXP 44
25812: IFFALSE 25820
25814: PUSH
25815: LD_EXP 55
25819: AND
25820: IFFALSE 26003
25822: GO 25824
25824: DISABLE
25825: LD_INT 0
25827: PPUSH
25828: PPUSH
25829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25830: LD_ADDR_VAR 0 2
25834: PUSH
25835: LD_INT 22
25837: PUSH
25838: LD_OWVAR 2
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 33
25849: PUSH
25850: LD_INT 3
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PPUSH
25861: CALL_OW 69
25865: ST_TO_ADDR
// if not tmp then
25866: LD_VAR 0 2
25870: NOT
25871: IFFALSE 25875
// exit ;
25873: GO 26003
// side := 0 ;
25875: LD_ADDR_VAR 0 3
25879: PUSH
25880: LD_INT 0
25882: ST_TO_ADDR
// for i := 1 to 8 do
25883: LD_ADDR_VAR 0 1
25887: PUSH
25888: DOUBLE
25889: LD_INT 1
25891: DEC
25892: ST_TO_ADDR
25893: LD_INT 8
25895: PUSH
25896: FOR_TO
25897: IFFALSE 25947
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25899: LD_OWVAR 2
25903: PUSH
25904: LD_VAR 0 1
25908: NONEQUAL
25909: IFFALSE 25931
25911: PUSH
25912: LD_OWVAR 2
25916: PPUSH
25917: LD_VAR 0 1
25921: PPUSH
25922: CALL_OW 81
25926: PUSH
25927: LD_INT 2
25929: EQUAL
25930: AND
25931: IFFALSE 25945
// begin side := i ;
25933: LD_ADDR_VAR 0 3
25937: PUSH
25938: LD_VAR 0 1
25942: ST_TO_ADDR
// break ;
25943: GO 25947
// end ;
25945: GO 25896
25947: POP
25948: POP
// if not side then
25949: LD_VAR 0 3
25953: NOT
25954: IFFALSE 25958
// exit ;
25956: GO 26003
// for i := 1 to tmp do
25958: LD_ADDR_VAR 0 1
25962: PUSH
25963: DOUBLE
25964: LD_INT 1
25966: DEC
25967: ST_TO_ADDR
25968: LD_VAR 0 2
25972: PUSH
25973: FOR_TO
25974: IFFALSE 26001
// if Prob ( 60 ) then
25976: LD_INT 60
25978: PPUSH
25979: CALL_OW 13
25983: IFFALSE 25999
// SetSide ( i , side ) ;
25985: LD_VAR 0 1
25989: PPUSH
25990: LD_VAR 0 3
25994: PPUSH
25995: CALL_OW 235
25999: GO 25973
26001: POP
26002: POP
// end ;
26003: PPOPN 3
26005: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26006: LD_EXP 44
26010: IFFALSE 26018
26012: PUSH
26013: LD_EXP 57
26017: AND
26018: IFFALSE 26137
26020: GO 26022
26022: DISABLE
26023: LD_INT 0
26025: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26026: LD_ADDR_VAR 0 1
26030: PUSH
26031: LD_INT 22
26033: PUSH
26034: LD_OWVAR 2
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 21
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 3
26055: PUSH
26056: LD_INT 23
26058: PUSH
26059: LD_INT 0
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: LIST
26074: PPUSH
26075: CALL_OW 69
26079: PUSH
26080: FOR_IN
26081: IFFALSE 26135
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26083: LD_VAR 0 1
26087: PPUSH
26088: CALL_OW 257
26092: PUSH
26093: LD_INT 1
26095: PUSH
26096: LD_INT 2
26098: PUSH
26099: LD_INT 3
26101: PUSH
26102: LD_INT 4
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: IN
26111: IFFALSE 26133
// SetClass ( un , rand ( 1 , 4 ) ) ;
26113: LD_VAR 0 1
26117: PPUSH
26118: LD_INT 1
26120: PPUSH
26121: LD_INT 4
26123: PPUSH
26124: CALL_OW 12
26128: PPUSH
26129: CALL_OW 336
26133: GO 26080
26135: POP
26136: POP
// end ;
26137: PPOPN 1
26139: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26140: LD_EXP 44
26144: IFFALSE 26152
26146: PUSH
26147: LD_EXP 56
26151: AND
26152: IFFALSE 26231
26154: GO 26156
26156: DISABLE
26157: LD_INT 0
26159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26160: LD_ADDR_VAR 0 1
26164: PUSH
26165: LD_INT 22
26167: PUSH
26168: LD_OWVAR 2
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 21
26179: PUSH
26180: LD_INT 3
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PPUSH
26191: CALL_OW 69
26195: ST_TO_ADDR
// if not tmp then
26196: LD_VAR 0 1
26200: NOT
26201: IFFALSE 26205
// exit ;
26203: GO 26231
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26205: LD_VAR 0 1
26209: PUSH
26210: LD_INT 1
26212: PPUSH
26213: LD_VAR 0 1
26217: PPUSH
26218: CALL_OW 12
26222: ARRAY
26223: PPUSH
26224: LD_INT 100
26226: PPUSH
26227: CALL_OW 234
// end ;
26231: PPOPN 1
26233: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26234: LD_EXP 44
26238: IFFALSE 26246
26240: PUSH
26241: LD_EXP 58
26245: AND
26246: IFFALSE 26344
26248: GO 26250
26250: DISABLE
26251: LD_INT 0
26253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26254: LD_ADDR_VAR 0 1
26258: PUSH
26259: LD_INT 22
26261: PUSH
26262: LD_OWVAR 2
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 21
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PPUSH
26285: CALL_OW 69
26289: ST_TO_ADDR
// if not tmp then
26290: LD_VAR 0 1
26294: NOT
26295: IFFALSE 26299
// exit ;
26297: GO 26344
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26299: LD_VAR 0 1
26303: PUSH
26304: LD_INT 1
26306: PPUSH
26307: LD_VAR 0 1
26311: PPUSH
26312: CALL_OW 12
26316: ARRAY
26317: PPUSH
26318: LD_INT 1
26320: PPUSH
26321: LD_INT 4
26323: PPUSH
26324: CALL_OW 12
26328: PPUSH
26329: LD_INT 3000
26331: PPUSH
26332: LD_INT 9000
26334: PPUSH
26335: CALL_OW 12
26339: PPUSH
26340: CALL_OW 492
// end ;
26344: PPOPN 1
26346: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26347: LD_EXP 44
26351: IFFALSE 26359
26353: PUSH
26354: LD_EXP 59
26358: AND
26359: IFFALSE 26379
26361: GO 26363
26363: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26364: LD_INT 1
26366: PPUSH
26367: LD_OWVAR 2
26371: PPUSH
26372: LD_INT 0
26374: PPUSH
26375: CALL_OW 324
26379: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26380: LD_EXP 44
26384: IFFALSE 26392
26386: PUSH
26387: LD_EXP 60
26391: AND
26392: IFFALSE 26475
26394: GO 26396
26396: DISABLE
26397: LD_INT 0
26399: PPUSH
26400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26401: LD_ADDR_VAR 0 2
26405: PUSH
26406: LD_INT 22
26408: PUSH
26409: LD_OWVAR 2
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 21
26420: PUSH
26421: LD_INT 3
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PPUSH
26432: CALL_OW 69
26436: ST_TO_ADDR
// if not tmp then
26437: LD_VAR 0 2
26441: NOT
26442: IFFALSE 26446
// exit ;
26444: GO 26475
// for i in tmp do
26446: LD_ADDR_VAR 0 1
26450: PUSH
26451: LD_VAR 0 2
26455: PUSH
26456: FOR_IN
26457: IFFALSE 26473
// SetBLevel ( i , 10 ) ;
26459: LD_VAR 0 1
26463: PPUSH
26464: LD_INT 10
26466: PPUSH
26467: CALL_OW 241
26471: GO 26456
26473: POP
26474: POP
// end ;
26475: PPOPN 2
26477: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26478: LD_EXP 44
26482: IFFALSE 26490
26484: PUSH
26485: LD_EXP 61
26489: AND
26490: IFFALSE 26601
26492: GO 26494
26494: DISABLE
26495: LD_INT 0
26497: PPUSH
26498: PPUSH
26499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26500: LD_ADDR_VAR 0 3
26504: PUSH
26505: LD_INT 22
26507: PUSH
26508: LD_OWVAR 2
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 25
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PPUSH
26531: CALL_OW 69
26535: ST_TO_ADDR
// if not tmp then
26536: LD_VAR 0 3
26540: NOT
26541: IFFALSE 26545
// exit ;
26543: GO 26601
// un := tmp [ rand ( 1 , tmp ) ] ;
26545: LD_ADDR_VAR 0 2
26549: PUSH
26550: LD_VAR 0 3
26554: PUSH
26555: LD_INT 1
26557: PPUSH
26558: LD_VAR 0 3
26562: PPUSH
26563: CALL_OW 12
26567: ARRAY
26568: ST_TO_ADDR
// if Crawls ( un ) then
26569: LD_VAR 0 2
26573: PPUSH
26574: CALL_OW 318
26578: IFFALSE 26589
// ComWalk ( un ) ;
26580: LD_VAR 0 2
26584: PPUSH
26585: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26589: LD_VAR 0 2
26593: PPUSH
26594: LD_INT 5
26596: PPUSH
26597: CALL_OW 336
// end ;
26601: PPOPN 3
26603: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26604: LD_EXP 44
26608: IFFALSE 26616
26610: PUSH
26611: LD_EXP 62
26615: AND
26616: IFFALSE 26628
26618: PUSH
26619: LD_OWVAR 67
26623: PUSH
26624: LD_INT 4
26626: LESS
26627: AND
26628: IFFALSE 26647
26630: GO 26632
26632: DISABLE
// begin Difficulty := Difficulty + 1 ;
26633: LD_ADDR_OWVAR 67
26637: PUSH
26638: LD_OWVAR 67
26642: PUSH
26643: LD_INT 1
26645: PLUS
26646: ST_TO_ADDR
// end ;
26647: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26648: LD_EXP 44
26652: IFFALSE 26660
26654: PUSH
26655: LD_EXP 63
26659: AND
26660: IFFALSE 26763
26662: GO 26664
26664: DISABLE
26665: LD_INT 0
26667: PPUSH
// begin for i := 1 to 5 do
26668: LD_ADDR_VAR 0 1
26672: PUSH
26673: DOUBLE
26674: LD_INT 1
26676: DEC
26677: ST_TO_ADDR
26678: LD_INT 5
26680: PUSH
26681: FOR_TO
26682: IFFALSE 26761
// begin uc_nation := nation_nature ;
26684: LD_ADDR_OWVAR 21
26688: PUSH
26689: LD_INT 0
26691: ST_TO_ADDR
// uc_side := 0 ;
26692: LD_ADDR_OWVAR 20
26696: PUSH
26697: LD_INT 0
26699: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26700: LD_ADDR_OWVAR 29
26704: PUSH
26705: LD_INT 12
26707: PUSH
26708: LD_INT 12
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: ST_TO_ADDR
// hc_agressivity := 20 ;
26715: LD_ADDR_OWVAR 35
26719: PUSH
26720: LD_INT 20
26722: ST_TO_ADDR
// hc_class := class_tiger ;
26723: LD_ADDR_OWVAR 28
26727: PUSH
26728: LD_INT 14
26730: ST_TO_ADDR
// hc_gallery :=  ;
26731: LD_ADDR_OWVAR 33
26735: PUSH
26736: LD_STRING 
26738: ST_TO_ADDR
// hc_name :=  ;
26739: LD_ADDR_OWVAR 26
26743: PUSH
26744: LD_STRING 
26746: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26747: CALL_OW 44
26751: PPUSH
26752: LD_INT 0
26754: PPUSH
26755: CALL_OW 51
// end ;
26759: GO 26681
26761: POP
26762: POP
// end ;
26763: PPOPN 1
26765: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26766: LD_EXP 44
26770: IFFALSE 26778
26772: PUSH
26773: LD_EXP 64
26777: AND
26778: IFFALSE 26787
26780: GO 26782
26782: DISABLE
// StreamSibBomb ;
26783: CALL 26788 0 0
26787: END
// export function StreamSibBomb ; var i , x , y ; begin
26788: LD_INT 0
26790: PPUSH
26791: PPUSH
26792: PPUSH
26793: PPUSH
// result := false ;
26794: LD_ADDR_VAR 0 1
26798: PUSH
26799: LD_INT 0
26801: ST_TO_ADDR
// for i := 1 to 16 do
26802: LD_ADDR_VAR 0 2
26806: PUSH
26807: DOUBLE
26808: LD_INT 1
26810: DEC
26811: ST_TO_ADDR
26812: LD_INT 16
26814: PUSH
26815: FOR_TO
26816: IFFALSE 27015
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26818: LD_ADDR_VAR 0 3
26822: PUSH
26823: LD_INT 10
26825: PUSH
26826: LD_INT 20
26828: PUSH
26829: LD_INT 30
26831: PUSH
26832: LD_INT 40
26834: PUSH
26835: LD_INT 50
26837: PUSH
26838: LD_INT 60
26840: PUSH
26841: LD_INT 70
26843: PUSH
26844: LD_INT 80
26846: PUSH
26847: LD_INT 90
26849: PUSH
26850: LD_INT 100
26852: PUSH
26853: LD_INT 110
26855: PUSH
26856: LD_INT 120
26858: PUSH
26859: LD_INT 130
26861: PUSH
26862: LD_INT 140
26864: PUSH
26865: LD_INT 150
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: PPUSH
26888: LD_INT 15
26890: PPUSH
26891: CALL_OW 12
26895: ARRAY
26896: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26897: LD_ADDR_VAR 0 4
26901: PUSH
26902: LD_INT 10
26904: PUSH
26905: LD_INT 20
26907: PUSH
26908: LD_INT 30
26910: PUSH
26911: LD_INT 40
26913: PUSH
26914: LD_INT 50
26916: PUSH
26917: LD_INT 60
26919: PUSH
26920: LD_INT 70
26922: PUSH
26923: LD_INT 80
26925: PUSH
26926: LD_INT 90
26928: PUSH
26929: LD_INT 100
26931: PUSH
26932: LD_INT 110
26934: PUSH
26935: LD_INT 120
26937: PUSH
26938: LD_INT 130
26940: PUSH
26941: LD_INT 140
26943: PUSH
26944: LD_INT 150
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 1
26966: PPUSH
26967: LD_INT 15
26969: PPUSH
26970: CALL_OW 12
26974: ARRAY
26975: ST_TO_ADDR
// if ValidHex ( x , y ) then
26976: LD_VAR 0 3
26980: PPUSH
26981: LD_VAR 0 4
26985: PPUSH
26986: CALL_OW 488
26990: IFFALSE 27013
// begin result := [ x , y ] ;
26992: LD_ADDR_VAR 0 1
26996: PUSH
26997: LD_VAR 0 3
27001: PUSH
27002: LD_VAR 0 4
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: ST_TO_ADDR
// break ;
27011: GO 27015
// end ; end ;
27013: GO 26815
27015: POP
27016: POP
// if result then
27017: LD_VAR 0 1
27021: IFFALSE 27081
// begin ToLua ( playSibBomb() ) ;
27023: LD_STRING playSibBomb()
27025: PPUSH
27026: CALL_OW 559
// wait ( 0 0$14 ) ;
27030: LD_INT 490
27032: PPUSH
27033: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27037: LD_VAR 0 1
27041: PUSH
27042: LD_INT 1
27044: ARRAY
27045: PPUSH
27046: LD_VAR 0 1
27050: PUSH
27051: LD_INT 2
27053: ARRAY
27054: PPUSH
27055: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27059: LD_VAR 0 1
27063: PUSH
27064: LD_INT 1
27066: ARRAY
27067: PPUSH
27068: LD_VAR 0 1
27072: PUSH
27073: LD_INT 2
27075: ARRAY
27076: PPUSH
27077: CALL_OW 429
// end ; end ;
27081: LD_VAR 0 1
27085: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27086: LD_EXP 44
27090: IFFALSE 27098
27092: PUSH
27093: LD_EXP 66
27097: AND
27098: IFFALSE 27110
27100: GO 27102
27102: DISABLE
// YouLost (  ) ;
27103: LD_STRING 
27105: PPUSH
27106: CALL_OW 104
27110: END
// every 0 0$1 trigger StreamModeActive and sFog do
27111: LD_EXP 44
27115: IFFALSE 27123
27117: PUSH
27118: LD_EXP 65
27122: AND
27123: IFFALSE 27137
27125: GO 27127
27127: DISABLE
// FogOff ( your_side ) ;
27128: LD_OWVAR 2
27132: PPUSH
27133: CALL_OW 344
27137: END
// every 0 0$1 trigger StreamModeActive and sSun do
27138: LD_EXP 44
27142: IFFALSE 27150
27144: PUSH
27145: LD_EXP 67
27149: AND
27150: IFFALSE 27178
27152: GO 27154
27154: DISABLE
// begin solar_recharge_percent := 0 ;
27155: LD_ADDR_OWVAR 79
27159: PUSH
27160: LD_INT 0
27162: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27163: LD_INT 10500
27165: PPUSH
27166: CALL_OW 67
// solar_recharge_percent := 100 ;
27170: LD_ADDR_OWVAR 79
27174: PUSH
27175: LD_INT 100
27177: ST_TO_ADDR
// end ;
27178: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27179: LD_EXP 44
27183: IFFALSE 27191
27185: PUSH
27186: LD_EXP 68
27190: AND
27191: IFFALSE 27430
27193: GO 27195
27195: DISABLE
27196: LD_INT 0
27198: PPUSH
27199: PPUSH
27200: PPUSH
// begin tmp := [ ] ;
27201: LD_ADDR_VAR 0 3
27205: PUSH
27206: EMPTY
27207: ST_TO_ADDR
// for i := 1 to 6 do
27208: LD_ADDR_VAR 0 1
27212: PUSH
27213: DOUBLE
27214: LD_INT 1
27216: DEC
27217: ST_TO_ADDR
27218: LD_INT 6
27220: PUSH
27221: FOR_TO
27222: IFFALSE 27327
// begin uc_nation := nation_nature ;
27224: LD_ADDR_OWVAR 21
27228: PUSH
27229: LD_INT 0
27231: ST_TO_ADDR
// uc_side := 0 ;
27232: LD_ADDR_OWVAR 20
27236: PUSH
27237: LD_INT 0
27239: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27240: LD_ADDR_OWVAR 29
27244: PUSH
27245: LD_INT 12
27247: PUSH
27248: LD_INT 12
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: ST_TO_ADDR
// hc_agressivity := 20 ;
27255: LD_ADDR_OWVAR 35
27259: PUSH
27260: LD_INT 20
27262: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27263: LD_ADDR_OWVAR 28
27267: PUSH
27268: LD_INT 17
27270: ST_TO_ADDR
// hc_gallery :=  ;
27271: LD_ADDR_OWVAR 33
27275: PUSH
27276: LD_STRING 
27278: ST_TO_ADDR
// hc_name :=  ;
27279: LD_ADDR_OWVAR 26
27283: PUSH
27284: LD_STRING 
27286: ST_TO_ADDR
// un := CreateHuman ;
27287: LD_ADDR_VAR 0 2
27291: PUSH
27292: CALL_OW 44
27296: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27297: LD_VAR 0 2
27301: PPUSH
27302: LD_INT 1
27304: PPUSH
27305: CALL_OW 51
// tmp := tmp ^ un ;
27309: LD_ADDR_VAR 0 3
27313: PUSH
27314: LD_VAR 0 3
27318: PUSH
27319: LD_VAR 0 2
27323: ADD
27324: ST_TO_ADDR
// end ;
27325: GO 27221
27327: POP
27328: POP
// repeat wait ( 0 0$1 ) ;
27329: LD_INT 35
27331: PPUSH
27332: CALL_OW 67
// for un in tmp do
27336: LD_ADDR_VAR 0 2
27340: PUSH
27341: LD_VAR 0 3
27345: PUSH
27346: FOR_IN
27347: IFFALSE 27421
// begin if IsDead ( un ) then
27349: LD_VAR 0 2
27353: PPUSH
27354: CALL_OW 301
27358: IFFALSE 27378
// begin tmp := tmp diff un ;
27360: LD_ADDR_VAR 0 3
27364: PUSH
27365: LD_VAR 0 3
27369: PUSH
27370: LD_VAR 0 2
27374: DIFF
27375: ST_TO_ADDR
// continue ;
27376: GO 27346
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27378: LD_VAR 0 2
27382: PPUSH
27383: LD_INT 3
27385: PUSH
27386: LD_INT 22
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PPUSH
27400: CALL_OW 69
27404: PPUSH
27405: LD_VAR 0 2
27409: PPUSH
27410: CALL_OW 74
27414: PPUSH
27415: CALL_OW 115
// end ;
27419: GO 27346
27421: POP
27422: POP
// until not tmp ;
27423: LD_VAR 0 3
27427: NOT
27428: IFFALSE 27329
// end ;
27430: PPOPN 3
27432: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27433: LD_EXP 44
27437: IFFALSE 27445
27439: PUSH
27440: LD_EXP 69
27444: AND
27445: IFFALSE 27499
27447: GO 27449
27449: DISABLE
// begin ToLua ( displayTroll(); ) ;
27450: LD_STRING displayTroll();
27452: PPUSH
27453: CALL_OW 559
// wait ( 3 3$00 ) ;
27457: LD_INT 6300
27459: PPUSH
27460: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27464: LD_STRING hideTroll();
27466: PPUSH
27467: CALL_OW 559
// wait ( 1 1$00 ) ;
27471: LD_INT 2100
27473: PPUSH
27474: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27478: LD_STRING displayTroll();
27480: PPUSH
27481: CALL_OW 559
// wait ( 1 1$00 ) ;
27485: LD_INT 2100
27487: PPUSH
27488: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27492: LD_STRING hideTroll();
27494: PPUSH
27495: CALL_OW 559
// end ;
27499: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27500: LD_EXP 44
27504: IFFALSE 27512
27506: PUSH
27507: LD_EXP 70
27511: AND
27512: IFFALSE 27575
27514: GO 27516
27516: DISABLE
27517: LD_INT 0
27519: PPUSH
// begin p := 0 ;
27520: LD_ADDR_VAR 0 1
27524: PUSH
27525: LD_INT 0
27527: ST_TO_ADDR
// repeat game_speed := 1 ;
27528: LD_ADDR_OWVAR 65
27532: PUSH
27533: LD_INT 1
27535: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27536: LD_INT 35
27538: PPUSH
27539: CALL_OW 67
// p := p + 1 ;
27543: LD_ADDR_VAR 0 1
27547: PUSH
27548: LD_VAR 0 1
27552: PUSH
27553: LD_INT 1
27555: PLUS
27556: ST_TO_ADDR
// until p >= 60 ;
27557: LD_VAR 0 1
27561: PUSH
27562: LD_INT 60
27564: GREATEREQUAL
27565: IFFALSE 27528
// game_speed := 4 ;
27567: LD_ADDR_OWVAR 65
27571: PUSH
27572: LD_INT 4
27574: ST_TO_ADDR
// end ;
27575: PPOPN 1
27577: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27578: LD_EXP 44
27582: IFFALSE 27590
27584: PUSH
27585: LD_EXP 71
27589: AND
27590: IFFALSE 27736
27592: GO 27594
27594: DISABLE
27595: LD_INT 0
27597: PPUSH
27598: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27599: LD_ADDR_VAR 0 1
27603: PUSH
27604: LD_INT 22
27606: PUSH
27607: LD_OWVAR 2
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: LD_INT 30
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 30
27631: PUSH
27632: LD_INT 1
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: LIST
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PPUSH
27648: CALL_OW 69
27652: ST_TO_ADDR
// if not depot then
27653: LD_VAR 0 1
27657: NOT
27658: IFFALSE 27662
// exit ;
27660: GO 27736
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27662: LD_ADDR_VAR 0 2
27666: PUSH
27667: LD_VAR 0 1
27671: PUSH
27672: LD_INT 1
27674: PPUSH
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 12
27684: ARRAY
27685: PPUSH
27686: CALL_OW 274
27690: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27691: LD_VAR 0 2
27695: PPUSH
27696: LD_INT 1
27698: PPUSH
27699: LD_INT 0
27701: PPUSH
27702: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27706: LD_VAR 0 2
27710: PPUSH
27711: LD_INT 2
27713: PPUSH
27714: LD_INT 0
27716: PPUSH
27717: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27721: LD_VAR 0 2
27725: PPUSH
27726: LD_INT 3
27728: PPUSH
27729: LD_INT 0
27731: PPUSH
27732: CALL_OW 277
// end ;
27736: PPOPN 2
27738: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27739: LD_EXP 44
27743: IFFALSE 27751
27745: PUSH
27746: LD_EXP 72
27750: AND
27751: IFFALSE 27848
27753: GO 27755
27755: DISABLE
27756: LD_INT 0
27758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27759: LD_ADDR_VAR 0 1
27763: PUSH
27764: LD_INT 22
27766: PUSH
27767: LD_OWVAR 2
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 21
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 3
27788: PUSH
27789: LD_INT 23
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: LIST
27807: PPUSH
27808: CALL_OW 69
27812: ST_TO_ADDR
// if not tmp then
27813: LD_VAR 0 1
27817: NOT
27818: IFFALSE 27822
// exit ;
27820: GO 27848
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27822: LD_VAR 0 1
27826: PUSH
27827: LD_INT 1
27829: PPUSH
27830: LD_VAR 0 1
27834: PPUSH
27835: CALL_OW 12
27839: ARRAY
27840: PPUSH
27841: LD_INT 200
27843: PPUSH
27844: CALL_OW 234
// end ;
27848: PPOPN 1
27850: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27851: LD_EXP 44
27855: IFFALSE 27863
27857: PUSH
27858: LD_EXP 73
27862: AND
27863: IFFALSE 27942
27865: GO 27867
27867: DISABLE
27868: LD_INT 0
27870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27871: LD_ADDR_VAR 0 1
27875: PUSH
27876: LD_INT 22
27878: PUSH
27879: LD_OWVAR 2
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 21
27890: PUSH
27891: LD_INT 2
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PPUSH
27902: CALL_OW 69
27906: ST_TO_ADDR
// if not tmp then
27907: LD_VAR 0 1
27911: NOT
27912: IFFALSE 27916
// exit ;
27914: GO 27942
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27916: LD_VAR 0 1
27920: PUSH
27921: LD_INT 1
27923: PPUSH
27924: LD_VAR 0 1
27928: PPUSH
27929: CALL_OW 12
27933: ARRAY
27934: PPUSH
27935: LD_INT 60
27937: PPUSH
27938: CALL_OW 234
// end ;
27942: PPOPN 1
27944: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27945: LD_EXP 44
27949: IFFALSE 27957
27951: PUSH
27952: LD_EXP 74
27956: AND
27957: IFFALSE 28056
27959: GO 27961
27961: DISABLE
27962: LD_INT 0
27964: PPUSH
27965: PPUSH
// begin enable ;
27966: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27967: LD_ADDR_VAR 0 1
27971: PUSH
27972: LD_INT 22
27974: PUSH
27975: LD_OWVAR 2
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 61
27986: PUSH
27987: EMPTY
27988: LIST
27989: PUSH
27990: LD_INT 33
27992: PUSH
27993: LD_INT 2
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: LIST
28004: PPUSH
28005: CALL_OW 69
28009: ST_TO_ADDR
// if not tmp then
28010: LD_VAR 0 1
28014: NOT
28015: IFFALSE 28019
// exit ;
28017: GO 28056
// for i in tmp do
28019: LD_ADDR_VAR 0 2
28023: PUSH
28024: LD_VAR 0 1
28028: PUSH
28029: FOR_IN
28030: IFFALSE 28054
// if IsControledBy ( i ) then
28032: LD_VAR 0 2
28036: PPUSH
28037: CALL_OW 312
28041: IFFALSE 28052
// ComUnlink ( i ) ;
28043: LD_VAR 0 2
28047: PPUSH
28048: CALL_OW 136
28052: GO 28029
28054: POP
28055: POP
// end ;
28056: PPOPN 2
28058: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28059: LD_EXP 44
28063: IFFALSE 28071
28065: PUSH
28066: LD_EXP 75
28070: AND
28071: IFFALSE 28211
28073: GO 28075
28075: DISABLE
28076: LD_INT 0
28078: PPUSH
28079: PPUSH
// begin ToLua ( displayPowell(); ) ;
28080: LD_STRING displayPowell();
28082: PPUSH
28083: CALL_OW 559
// uc_side := 0 ;
28087: LD_ADDR_OWVAR 20
28091: PUSH
28092: LD_INT 0
28094: ST_TO_ADDR
// uc_nation := 2 ;
28095: LD_ADDR_OWVAR 21
28099: PUSH
28100: LD_INT 2
28102: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28103: LD_ADDR_OWVAR 37
28107: PUSH
28108: LD_INT 14
28110: ST_TO_ADDR
// vc_engine := engine_siberite ;
28111: LD_ADDR_OWVAR 39
28115: PUSH
28116: LD_INT 3
28118: ST_TO_ADDR
// vc_control := control_apeman ;
28119: LD_ADDR_OWVAR 38
28123: PUSH
28124: LD_INT 5
28126: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28127: LD_ADDR_OWVAR 40
28131: PUSH
28132: LD_INT 29
28134: ST_TO_ADDR
// un := CreateVehicle ;
28135: LD_ADDR_VAR 0 2
28139: PUSH
28140: CALL_OW 45
28144: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28145: LD_VAR 0 2
28149: PPUSH
28150: LD_INT 1
28152: PPUSH
28153: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28157: LD_INT 35
28159: PPUSH
28160: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28164: LD_VAR 0 2
28168: PPUSH
28169: LD_INT 22
28171: PUSH
28172: LD_OWVAR 2
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PPUSH
28181: CALL_OW 69
28185: PPUSH
28186: LD_VAR 0 2
28190: PPUSH
28191: CALL_OW 74
28195: PPUSH
28196: CALL_OW 115
// until IsDead ( un ) ;
28200: LD_VAR 0 2
28204: PPUSH
28205: CALL_OW 301
28209: IFFALSE 28157
// end ;
28211: PPOPN 2
28213: END
// every 0 0$1 trigger StreamModeActive and sStu do
28214: LD_EXP 44
28218: IFFALSE 28226
28220: PUSH
28221: LD_EXP 83
28225: AND
28226: IFFALSE 28242
28228: GO 28230
28230: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28231: LD_STRING displayStucuk();
28233: PPUSH
28234: CALL_OW 559
// ResetFog ;
28238: CALL_OW 335
// end ;
28242: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28243: LD_EXP 44
28247: IFFALSE 28255
28249: PUSH
28250: LD_EXP 76
28254: AND
28255: IFFALSE 28396
28257: GO 28259
28259: DISABLE
28260: LD_INT 0
28262: PPUSH
28263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28264: LD_ADDR_VAR 0 2
28268: PUSH
28269: LD_INT 22
28271: PUSH
28272: LD_OWVAR 2
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 21
28283: PUSH
28284: LD_INT 1
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PPUSH
28295: CALL_OW 69
28299: ST_TO_ADDR
// if not tmp then
28300: LD_VAR 0 2
28304: NOT
28305: IFFALSE 28309
// exit ;
28307: GO 28396
// un := tmp [ rand ( 1 , tmp ) ] ;
28309: LD_ADDR_VAR 0 1
28313: PUSH
28314: LD_VAR 0 2
28318: PUSH
28319: LD_INT 1
28321: PPUSH
28322: LD_VAR 0 2
28326: PPUSH
28327: CALL_OW 12
28331: ARRAY
28332: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28333: LD_VAR 0 1
28337: PPUSH
28338: LD_INT 0
28340: PPUSH
28341: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28345: LD_VAR 0 1
28349: PPUSH
28350: LD_OWVAR 3
28354: PUSH
28355: LD_VAR 0 1
28359: DIFF
28360: PPUSH
28361: LD_VAR 0 1
28365: PPUSH
28366: CALL_OW 74
28370: PPUSH
28371: CALL_OW 115
// wait ( 0 0$20 ) ;
28375: LD_INT 700
28377: PPUSH
28378: CALL_OW 67
// SetSide ( un , your_side ) ;
28382: LD_VAR 0 1
28386: PPUSH
28387: LD_OWVAR 2
28391: PPUSH
28392: CALL_OW 235
// end ;
28396: PPOPN 2
28398: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28399: LD_EXP 44
28403: IFFALSE 28411
28405: PUSH
28406: LD_EXP 77
28410: AND
28411: IFFALSE 28517
28413: GO 28415
28415: DISABLE
28416: LD_INT 0
28418: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28419: LD_ADDR_VAR 0 1
28423: PUSH
28424: LD_INT 22
28426: PUSH
28427: LD_OWVAR 2
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: LD_INT 30
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 30
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PPUSH
28468: CALL_OW 69
28472: ST_TO_ADDR
// if not depot then
28473: LD_VAR 0 1
28477: NOT
28478: IFFALSE 28482
// exit ;
28480: GO 28517
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28482: LD_VAR 0 1
28486: PUSH
28487: LD_INT 1
28489: ARRAY
28490: PPUSH
28491: CALL_OW 250
28495: PPUSH
28496: LD_VAR 0 1
28500: PUSH
28501: LD_INT 1
28503: ARRAY
28504: PPUSH
28505: CALL_OW 251
28509: PPUSH
28510: LD_INT 70
28512: PPUSH
28513: CALL_OW 495
// end ;
28517: PPOPN 1
28519: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28520: LD_EXP 44
28524: IFFALSE 28532
28526: PUSH
28527: LD_EXP 78
28531: AND
28532: IFFALSE 28743
28534: GO 28536
28536: DISABLE
28537: LD_INT 0
28539: PPUSH
28540: PPUSH
28541: PPUSH
28542: PPUSH
28543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28544: LD_ADDR_VAR 0 5
28548: PUSH
28549: LD_INT 22
28551: PUSH
28552: LD_OWVAR 2
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 21
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PPUSH
28575: CALL_OW 69
28579: ST_TO_ADDR
// if not tmp then
28580: LD_VAR 0 5
28584: NOT
28585: IFFALSE 28589
// exit ;
28587: GO 28743
// for i in tmp do
28589: LD_ADDR_VAR 0 1
28593: PUSH
28594: LD_VAR 0 5
28598: PUSH
28599: FOR_IN
28600: IFFALSE 28741
// begin d := rand ( 0 , 5 ) ;
28602: LD_ADDR_VAR 0 4
28606: PUSH
28607: LD_INT 0
28609: PPUSH
28610: LD_INT 5
28612: PPUSH
28613: CALL_OW 12
28617: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28618: LD_ADDR_VAR 0 2
28622: PUSH
28623: LD_VAR 0 1
28627: PPUSH
28628: CALL_OW 250
28632: PPUSH
28633: LD_VAR 0 4
28637: PPUSH
28638: LD_INT 3
28640: PPUSH
28641: LD_INT 12
28643: PPUSH
28644: CALL_OW 12
28648: PPUSH
28649: CALL_OW 272
28653: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28654: LD_ADDR_VAR 0 3
28658: PUSH
28659: LD_VAR 0 1
28663: PPUSH
28664: CALL_OW 251
28668: PPUSH
28669: LD_VAR 0 4
28673: PPUSH
28674: LD_INT 3
28676: PPUSH
28677: LD_INT 12
28679: PPUSH
28680: CALL_OW 12
28684: PPUSH
28685: CALL_OW 273
28689: ST_TO_ADDR
// if ValidHex ( x , y ) then
28690: LD_VAR 0 2
28694: PPUSH
28695: LD_VAR 0 3
28699: PPUSH
28700: CALL_OW 488
28704: IFFALSE 28739
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28706: LD_VAR 0 1
28710: PPUSH
28711: LD_VAR 0 2
28715: PPUSH
28716: LD_VAR 0 3
28720: PPUSH
28721: LD_INT 3
28723: PPUSH
28724: LD_INT 6
28726: PPUSH
28727: CALL_OW 12
28731: PPUSH
28732: LD_INT 1
28734: PPUSH
28735: CALL_OW 483
// end ;
28739: GO 28599
28741: POP
28742: POP
// end ;
28743: PPOPN 5
28745: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28746: LD_EXP 44
28750: IFFALSE 28758
28752: PUSH
28753: LD_EXP 79
28757: AND
28758: IFFALSE 28852
28760: GO 28762
28762: DISABLE
28763: LD_INT 0
28765: PPUSH
28766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28767: LD_ADDR_VAR 0 2
28771: PUSH
28772: LD_INT 22
28774: PUSH
28775: LD_OWVAR 2
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 32
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 21
28796: PUSH
28797: LD_INT 2
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: LIST
28808: PPUSH
28809: CALL_OW 69
28813: ST_TO_ADDR
// if not tmp then
28814: LD_VAR 0 2
28818: NOT
28819: IFFALSE 28823
// exit ;
28821: GO 28852
// for i in tmp do
28823: LD_ADDR_VAR 0 1
28827: PUSH
28828: LD_VAR 0 2
28832: PUSH
28833: FOR_IN
28834: IFFALSE 28850
// SetFuel ( i , 0 ) ;
28836: LD_VAR 0 1
28840: PPUSH
28841: LD_INT 0
28843: PPUSH
28844: CALL_OW 240
28848: GO 28833
28850: POP
28851: POP
// end ;
28852: PPOPN 2
28854: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28855: LD_EXP 44
28859: IFFALSE 28867
28861: PUSH
28862: LD_EXP 80
28866: AND
28867: IFFALSE 28933
28869: GO 28871
28871: DISABLE
28872: LD_INT 0
28874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28875: LD_ADDR_VAR 0 1
28879: PUSH
28880: LD_INT 22
28882: PUSH
28883: LD_OWVAR 2
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 30
28894: PUSH
28895: LD_INT 29
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PPUSH
28906: CALL_OW 69
28910: ST_TO_ADDR
// if not tmp then
28911: LD_VAR 0 1
28915: NOT
28916: IFFALSE 28920
// exit ;
28918: GO 28933
// DestroyUnit ( tmp [ 1 ] ) ;
28920: LD_VAR 0 1
28924: PUSH
28925: LD_INT 1
28927: ARRAY
28928: PPUSH
28929: CALL_OW 65
// end ;
28933: PPOPN 1
28935: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28936: LD_EXP 44
28940: IFFALSE 28948
28942: PUSH
28943: LD_EXP 82
28947: AND
28948: IFFALSE 29077
28950: GO 28952
28952: DISABLE
28953: LD_INT 0
28955: PPUSH
// begin uc_side := 0 ;
28956: LD_ADDR_OWVAR 20
28960: PUSH
28961: LD_INT 0
28963: ST_TO_ADDR
// uc_nation := nation_arabian ;
28964: LD_ADDR_OWVAR 21
28968: PUSH
28969: LD_INT 2
28971: ST_TO_ADDR
// hc_gallery :=  ;
28972: LD_ADDR_OWVAR 33
28976: PUSH
28977: LD_STRING 
28979: ST_TO_ADDR
// hc_name :=  ;
28980: LD_ADDR_OWVAR 26
28984: PUSH
28985: LD_STRING 
28987: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28988: LD_INT 1
28990: PPUSH
28991: LD_INT 11
28993: PPUSH
28994: LD_INT 10
28996: PPUSH
28997: CALL_OW 380
// un := CreateHuman ;
29001: LD_ADDR_VAR 0 1
29005: PUSH
29006: CALL_OW 44
29010: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29011: LD_VAR 0 1
29015: PPUSH
29016: LD_INT 1
29018: PPUSH
29019: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29023: LD_INT 35
29025: PPUSH
29026: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29030: LD_VAR 0 1
29034: PPUSH
29035: LD_INT 22
29037: PUSH
29038: LD_OWVAR 2
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PPUSH
29047: CALL_OW 69
29051: PPUSH
29052: LD_VAR 0 1
29056: PPUSH
29057: CALL_OW 74
29061: PPUSH
29062: CALL_OW 115
// until IsDead ( un ) ;
29066: LD_VAR 0 1
29070: PPUSH
29071: CALL_OW 301
29075: IFFALSE 29023
// end ;
29077: PPOPN 1
29079: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29080: LD_EXP 44
29084: IFFALSE 29092
29086: PUSH
29087: LD_EXP 84
29091: AND
29092: IFFALSE 29104
29094: GO 29096
29096: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29097: LD_STRING earthquake(getX(game), 0, 32)
29099: PPUSH
29100: CALL_OW 559
29104: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29105: LD_EXP 44
29109: IFFALSE 29117
29111: PUSH
29112: LD_EXP 85
29116: AND
29117: IFFALSE 29208
29119: GO 29121
29121: DISABLE
29122: LD_INT 0
29124: PPUSH
// begin enable ;
29125: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29126: LD_ADDR_VAR 0 1
29130: PUSH
29131: LD_INT 22
29133: PUSH
29134: LD_OWVAR 2
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 21
29145: PUSH
29146: LD_INT 2
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 33
29155: PUSH
29156: LD_INT 3
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: PPUSH
29168: CALL_OW 69
29172: ST_TO_ADDR
// if not tmp then
29173: LD_VAR 0 1
29177: NOT
29178: IFFALSE 29182
// exit ;
29180: GO 29208
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29182: LD_VAR 0 1
29186: PUSH
29187: LD_INT 1
29189: PPUSH
29190: LD_VAR 0 1
29194: PPUSH
29195: CALL_OW 12
29199: ARRAY
29200: PPUSH
29201: LD_INT 1
29203: PPUSH
29204: CALL_OW 234
// end ;
29208: PPOPN 1
29210: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29211: LD_EXP 44
29215: IFFALSE 29223
29217: PUSH
29218: LD_EXP 86
29222: AND
29223: IFFALSE 29364
29225: GO 29227
29227: DISABLE
29228: LD_INT 0
29230: PPUSH
29231: PPUSH
29232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29233: LD_ADDR_VAR 0 3
29237: PUSH
29238: LD_INT 22
29240: PUSH
29241: LD_OWVAR 2
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 25
29252: PUSH
29253: LD_INT 1
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PPUSH
29264: CALL_OW 69
29268: ST_TO_ADDR
// if not tmp then
29269: LD_VAR 0 3
29273: NOT
29274: IFFALSE 29278
// exit ;
29276: GO 29364
// un := tmp [ rand ( 1 , tmp ) ] ;
29278: LD_ADDR_VAR 0 2
29282: PUSH
29283: LD_VAR 0 3
29287: PUSH
29288: LD_INT 1
29290: PPUSH
29291: LD_VAR 0 3
29295: PPUSH
29296: CALL_OW 12
29300: ARRAY
29301: ST_TO_ADDR
// if Crawls ( un ) then
29302: LD_VAR 0 2
29306: PPUSH
29307: CALL_OW 318
29311: IFFALSE 29322
// ComWalk ( un ) ;
29313: LD_VAR 0 2
29317: PPUSH
29318: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29322: LD_VAR 0 2
29326: PPUSH
29327: LD_INT 9
29329: PPUSH
29330: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29334: LD_INT 28
29336: PPUSH
29337: LD_OWVAR 2
29341: PPUSH
29342: LD_INT 2
29344: PPUSH
29345: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29349: LD_INT 29
29351: PPUSH
29352: LD_OWVAR 2
29356: PPUSH
29357: LD_INT 2
29359: PPUSH
29360: CALL_OW 322
// end ;
29364: PPOPN 3
29366: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29367: LD_EXP 44
29371: IFFALSE 29379
29373: PUSH
29374: LD_EXP 87
29378: AND
29379: IFFALSE 29490
29381: GO 29383
29383: DISABLE
29384: LD_INT 0
29386: PPUSH
29387: PPUSH
29388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29389: LD_ADDR_VAR 0 3
29393: PUSH
29394: LD_INT 22
29396: PUSH
29397: LD_OWVAR 2
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 25
29408: PUSH
29409: LD_INT 1
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PPUSH
29420: CALL_OW 69
29424: ST_TO_ADDR
// if not tmp then
29425: LD_VAR 0 3
29429: NOT
29430: IFFALSE 29434
// exit ;
29432: GO 29490
// un := tmp [ rand ( 1 , tmp ) ] ;
29434: LD_ADDR_VAR 0 2
29438: PUSH
29439: LD_VAR 0 3
29443: PUSH
29444: LD_INT 1
29446: PPUSH
29447: LD_VAR 0 3
29451: PPUSH
29452: CALL_OW 12
29456: ARRAY
29457: ST_TO_ADDR
// if Crawls ( un ) then
29458: LD_VAR 0 2
29462: PPUSH
29463: CALL_OW 318
29467: IFFALSE 29478
// ComWalk ( un ) ;
29469: LD_VAR 0 2
29473: PPUSH
29474: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29478: LD_VAR 0 2
29482: PPUSH
29483: LD_INT 8
29485: PPUSH
29486: CALL_OW 336
// end ;
29490: PPOPN 3
29492: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29493: LD_EXP 44
29497: IFFALSE 29505
29499: PUSH
29500: LD_EXP 88
29504: AND
29505: IFFALSE 29649
29507: GO 29509
29509: DISABLE
29510: LD_INT 0
29512: PPUSH
29513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29514: LD_ADDR_VAR 0 2
29518: PUSH
29519: LD_INT 22
29521: PUSH
29522: LD_OWVAR 2
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 21
29533: PUSH
29534: LD_INT 2
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 2
29543: PUSH
29544: LD_INT 34
29546: PUSH
29547: LD_INT 12
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 34
29556: PUSH
29557: LD_INT 51
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 34
29566: PUSH
29567: LD_INT 32
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: PPUSH
29585: CALL_OW 69
29589: ST_TO_ADDR
// if not tmp then
29590: LD_VAR 0 2
29594: NOT
29595: IFFALSE 29599
// exit ;
29597: GO 29649
// for i in tmp do
29599: LD_ADDR_VAR 0 1
29603: PUSH
29604: LD_VAR 0 2
29608: PUSH
29609: FOR_IN
29610: IFFALSE 29647
// if GetCargo ( i , mat_artifact ) = 0 then
29612: LD_VAR 0 1
29616: PPUSH
29617: LD_INT 4
29619: PPUSH
29620: CALL_OW 289
29624: PUSH
29625: LD_INT 0
29627: EQUAL
29628: IFFALSE 29645
// SetCargo ( i , mat_siberit , 100 ) ;
29630: LD_VAR 0 1
29634: PPUSH
29635: LD_INT 3
29637: PPUSH
29638: LD_INT 100
29640: PPUSH
29641: CALL_OW 290
29645: GO 29609
29647: POP
29648: POP
// end ;
29649: PPOPN 2
29651: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29652: LD_EXP 44
29656: IFFALSE 29664
29658: PUSH
29659: LD_EXP 89
29663: AND
29664: IFFALSE 29847
29666: GO 29668
29668: DISABLE
29669: LD_INT 0
29671: PPUSH
29672: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29673: LD_ADDR_VAR 0 2
29677: PUSH
29678: LD_INT 22
29680: PUSH
29681: LD_OWVAR 2
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PPUSH
29690: CALL_OW 69
29694: ST_TO_ADDR
// if not tmp then
29695: LD_VAR 0 2
29699: NOT
29700: IFFALSE 29704
// exit ;
29702: GO 29847
// for i := 1 to 2 do
29704: LD_ADDR_VAR 0 1
29708: PUSH
29709: DOUBLE
29710: LD_INT 1
29712: DEC
29713: ST_TO_ADDR
29714: LD_INT 2
29716: PUSH
29717: FOR_TO
29718: IFFALSE 29845
// begin uc_side := your_side ;
29720: LD_ADDR_OWVAR 20
29724: PUSH
29725: LD_OWVAR 2
29729: ST_TO_ADDR
// uc_nation := nation_american ;
29730: LD_ADDR_OWVAR 21
29734: PUSH
29735: LD_INT 1
29737: ST_TO_ADDR
// vc_chassis := us_morphling ;
29738: LD_ADDR_OWVAR 37
29742: PUSH
29743: LD_INT 5
29745: ST_TO_ADDR
// vc_engine := engine_siberite ;
29746: LD_ADDR_OWVAR 39
29750: PUSH
29751: LD_INT 3
29753: ST_TO_ADDR
// vc_control := control_computer ;
29754: LD_ADDR_OWVAR 38
29758: PUSH
29759: LD_INT 3
29761: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29762: LD_ADDR_OWVAR 40
29766: PUSH
29767: LD_INT 10
29769: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29770: LD_VAR 0 2
29774: PUSH
29775: LD_INT 1
29777: ARRAY
29778: PPUSH
29779: CALL_OW 310
29783: NOT
29784: IFFALSE 29831
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29786: CALL_OW 45
29790: PPUSH
29791: LD_VAR 0 2
29795: PUSH
29796: LD_INT 1
29798: ARRAY
29799: PPUSH
29800: CALL_OW 250
29804: PPUSH
29805: LD_VAR 0 2
29809: PUSH
29810: LD_INT 1
29812: ARRAY
29813: PPUSH
29814: CALL_OW 251
29818: PPUSH
29819: LD_INT 12
29821: PPUSH
29822: LD_INT 1
29824: PPUSH
29825: CALL_OW 50
29829: GO 29843
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29831: CALL_OW 45
29835: PPUSH
29836: LD_INT 1
29838: PPUSH
29839: CALL_OW 51
// end ;
29843: GO 29717
29845: POP
29846: POP
// end ;
29847: PPOPN 2
29849: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29850: LD_EXP 44
29854: IFFALSE 29862
29856: PUSH
29857: LD_EXP 90
29861: AND
29862: IFFALSE 30084
29864: GO 29866
29866: DISABLE
29867: LD_INT 0
29869: PPUSH
29870: PPUSH
29871: PPUSH
29872: PPUSH
29873: PPUSH
29874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29875: LD_ADDR_VAR 0 6
29879: PUSH
29880: LD_INT 22
29882: PUSH
29883: LD_OWVAR 2
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 21
29894: PUSH
29895: LD_INT 1
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 3
29904: PUSH
29905: LD_INT 23
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: LIST
29923: PPUSH
29924: CALL_OW 69
29928: ST_TO_ADDR
// if not tmp then
29929: LD_VAR 0 6
29933: NOT
29934: IFFALSE 29938
// exit ;
29936: GO 30084
// s1 := rand ( 1 , 4 ) ;
29938: LD_ADDR_VAR 0 2
29942: PUSH
29943: LD_INT 1
29945: PPUSH
29946: LD_INT 4
29948: PPUSH
29949: CALL_OW 12
29953: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29954: LD_ADDR_VAR 0 4
29958: PUSH
29959: LD_VAR 0 6
29963: PUSH
29964: LD_INT 1
29966: ARRAY
29967: PPUSH
29968: LD_VAR 0 2
29972: PPUSH
29973: CALL_OW 259
29977: ST_TO_ADDR
// if s1 = 1 then
29978: LD_VAR 0 2
29982: PUSH
29983: LD_INT 1
29985: EQUAL
29986: IFFALSE 30006
// s2 := rand ( 2 , 4 ) else
29988: LD_ADDR_VAR 0 3
29992: PUSH
29993: LD_INT 2
29995: PPUSH
29996: LD_INT 4
29998: PPUSH
29999: CALL_OW 12
30003: ST_TO_ADDR
30004: GO 30014
// s2 := 1 ;
30006: LD_ADDR_VAR 0 3
30010: PUSH
30011: LD_INT 1
30013: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30014: LD_ADDR_VAR 0 5
30018: PUSH
30019: LD_VAR 0 6
30023: PUSH
30024: LD_INT 1
30026: ARRAY
30027: PPUSH
30028: LD_VAR 0 3
30032: PPUSH
30033: CALL_OW 259
30037: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30038: LD_VAR 0 6
30042: PUSH
30043: LD_INT 1
30045: ARRAY
30046: PPUSH
30047: LD_VAR 0 2
30051: PPUSH
30052: LD_VAR 0 5
30056: PPUSH
30057: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30061: LD_VAR 0 6
30065: PUSH
30066: LD_INT 1
30068: ARRAY
30069: PPUSH
30070: LD_VAR 0 3
30074: PPUSH
30075: LD_VAR 0 4
30079: PPUSH
30080: CALL_OW 237
// end ;
30084: PPOPN 6
30086: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30087: LD_EXP 44
30091: IFFALSE 30099
30093: PUSH
30094: LD_EXP 91
30098: AND
30099: IFFALSE 30178
30101: GO 30103
30103: DISABLE
30104: LD_INT 0
30106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30107: LD_ADDR_VAR 0 1
30111: PUSH
30112: LD_INT 22
30114: PUSH
30115: LD_OWVAR 2
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 30
30126: PUSH
30127: LD_INT 3
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PPUSH
30138: CALL_OW 69
30142: ST_TO_ADDR
// if not tmp then
30143: LD_VAR 0 1
30147: NOT
30148: IFFALSE 30152
// exit ;
30150: GO 30178
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30152: LD_VAR 0 1
30156: PUSH
30157: LD_INT 1
30159: PPUSH
30160: LD_VAR 0 1
30164: PPUSH
30165: CALL_OW 12
30169: ARRAY
30170: PPUSH
30171: LD_INT 1
30173: PPUSH
30174: CALL_OW 234
// end ;
30178: PPOPN 1
30180: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30181: LD_EXP 44
30185: IFFALSE 30193
30187: PUSH
30188: LD_EXP 92
30192: AND
30193: IFFALSE 30305
30195: GO 30197
30197: DISABLE
30198: LD_INT 0
30200: PPUSH
30201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30202: LD_ADDR_VAR 0 2
30206: PUSH
30207: LD_INT 22
30209: PUSH
30210: LD_OWVAR 2
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 2
30221: PUSH
30222: LD_INT 30
30224: PUSH
30225: LD_INT 27
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 30
30234: PUSH
30235: LD_INT 26
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 30
30244: PUSH
30245: LD_INT 28
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PPUSH
30262: CALL_OW 69
30266: ST_TO_ADDR
// if not tmp then
30267: LD_VAR 0 2
30271: NOT
30272: IFFALSE 30276
// exit ;
30274: GO 30305
// for i in tmp do
30276: LD_ADDR_VAR 0 1
30280: PUSH
30281: LD_VAR 0 2
30285: PUSH
30286: FOR_IN
30287: IFFALSE 30303
// SetLives ( i , 1 ) ;
30289: LD_VAR 0 1
30293: PPUSH
30294: LD_INT 1
30296: PPUSH
30297: CALL_OW 234
30301: GO 30286
30303: POP
30304: POP
// end ;
30305: PPOPN 2
30307: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30308: LD_EXP 44
30312: IFFALSE 30320
30314: PUSH
30315: LD_EXP 93
30319: AND
30320: IFFALSE 30607
30322: GO 30324
30324: DISABLE
30325: LD_INT 0
30327: PPUSH
30328: PPUSH
30329: PPUSH
// begin i := rand ( 1 , 7 ) ;
30330: LD_ADDR_VAR 0 1
30334: PUSH
30335: LD_INT 1
30337: PPUSH
30338: LD_INT 7
30340: PPUSH
30341: CALL_OW 12
30345: ST_TO_ADDR
// case i of 1 :
30346: LD_VAR 0 1
30350: PUSH
30351: LD_INT 1
30353: DOUBLE
30354: EQUAL
30355: IFTRUE 30359
30357: GO 30369
30359: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30360: LD_STRING earthquake(getX(game), 0, 32)
30362: PPUSH
30363: CALL_OW 559
30367: GO 30607
30369: LD_INT 2
30371: DOUBLE
30372: EQUAL
30373: IFTRUE 30377
30375: GO 30391
30377: POP
// begin ToLua ( displayStucuk(); ) ;
30378: LD_STRING displayStucuk();
30380: PPUSH
30381: CALL_OW 559
// ResetFog ;
30385: CALL_OW 335
// end ; 3 :
30389: GO 30607
30391: LD_INT 3
30393: DOUBLE
30394: EQUAL
30395: IFTRUE 30399
30397: GO 30503
30399: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30400: LD_ADDR_VAR 0 2
30404: PUSH
30405: LD_INT 22
30407: PUSH
30408: LD_OWVAR 2
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 25
30419: PUSH
30420: LD_INT 1
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PPUSH
30431: CALL_OW 69
30435: ST_TO_ADDR
// if not tmp then
30436: LD_VAR 0 2
30440: NOT
30441: IFFALSE 30445
// exit ;
30443: GO 30607
// un := tmp [ rand ( 1 , tmp ) ] ;
30445: LD_ADDR_VAR 0 3
30449: PUSH
30450: LD_VAR 0 2
30454: PUSH
30455: LD_INT 1
30457: PPUSH
30458: LD_VAR 0 2
30462: PPUSH
30463: CALL_OW 12
30467: ARRAY
30468: ST_TO_ADDR
// if Crawls ( un ) then
30469: LD_VAR 0 3
30473: PPUSH
30474: CALL_OW 318
30478: IFFALSE 30489
// ComWalk ( un ) ;
30480: LD_VAR 0 3
30484: PPUSH
30485: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30489: LD_VAR 0 3
30493: PPUSH
30494: LD_INT 8
30496: PPUSH
30497: CALL_OW 336
// end ; 4 :
30501: GO 30607
30503: LD_INT 4
30505: DOUBLE
30506: EQUAL
30507: IFTRUE 30511
30509: GO 30585
30511: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30512: LD_ADDR_VAR 0 2
30516: PUSH
30517: LD_INT 22
30519: PUSH
30520: LD_OWVAR 2
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 30
30531: PUSH
30532: LD_INT 29
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PPUSH
30543: CALL_OW 69
30547: ST_TO_ADDR
// if not tmp then
30548: LD_VAR 0 2
30552: NOT
30553: IFFALSE 30557
// exit ;
30555: GO 30607
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30557: LD_VAR 0 2
30561: PUSH
30562: LD_INT 1
30564: ARRAY
30565: PPUSH
30566: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30570: LD_VAR 0 2
30574: PUSH
30575: LD_INT 1
30577: ARRAY
30578: PPUSH
30579: CALL_OW 65
// end ; 5 .. 7 :
30583: GO 30607
30585: LD_INT 5
30587: DOUBLE
30588: GREATEREQUAL
30589: IFFALSE 30597
30591: LD_INT 7
30593: DOUBLE
30594: LESSEQUAL
30595: IFTRUE 30599
30597: GO 30606
30599: POP
// StreamSibBomb ; end ;
30600: CALL 26788 0 0
30604: GO 30607
30606: POP
// end ;
30607: PPOPN 3
30609: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30610: LD_EXP 44
30614: IFFALSE 30622
30616: PUSH
30617: LD_EXP 94
30621: AND
30622: IFFALSE 30778
30624: GO 30626
30626: DISABLE
30627: LD_INT 0
30629: PPUSH
30630: PPUSH
30631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30632: LD_ADDR_VAR 0 2
30636: PUSH
30637: LD_INT 81
30639: PUSH
30640: LD_OWVAR 2
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 2
30651: PUSH
30652: LD_INT 21
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 21
30664: PUSH
30665: LD_INT 2
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: LIST
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PPUSH
30681: CALL_OW 69
30685: ST_TO_ADDR
// if not tmp then
30686: LD_VAR 0 2
30690: NOT
30691: IFFALSE 30695
// exit ;
30693: GO 30778
// p := 0 ;
30695: LD_ADDR_VAR 0 3
30699: PUSH
30700: LD_INT 0
30702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30703: LD_INT 35
30705: PPUSH
30706: CALL_OW 67
// p := p + 1 ;
30710: LD_ADDR_VAR 0 3
30714: PUSH
30715: LD_VAR 0 3
30719: PUSH
30720: LD_INT 1
30722: PLUS
30723: ST_TO_ADDR
// for i in tmp do
30724: LD_ADDR_VAR 0 1
30728: PUSH
30729: LD_VAR 0 2
30733: PUSH
30734: FOR_IN
30735: IFFALSE 30766
// if GetLives ( i ) < 1000 then
30737: LD_VAR 0 1
30741: PPUSH
30742: CALL_OW 256
30746: PUSH
30747: LD_INT 1000
30749: LESS
30750: IFFALSE 30764
// SetLives ( i , 1000 ) ;
30752: LD_VAR 0 1
30756: PPUSH
30757: LD_INT 1000
30759: PPUSH
30760: CALL_OW 234
30764: GO 30734
30766: POP
30767: POP
// until p > 20 ;
30768: LD_VAR 0 3
30772: PUSH
30773: LD_INT 20
30775: GREATER
30776: IFFALSE 30703
// end ;
30778: PPOPN 3
30780: END
// every 0 0$1 trigger StreamModeActive and sTime do
30781: LD_EXP 44
30785: IFFALSE 30793
30787: PUSH
30788: LD_EXP 95
30792: AND
30793: IFFALSE 30828
30795: GO 30797
30797: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30798: LD_INT 28
30800: PPUSH
30801: LD_OWVAR 2
30805: PPUSH
30806: LD_INT 2
30808: PPUSH
30809: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30813: LD_INT 30
30815: PPUSH
30816: LD_OWVAR 2
30820: PPUSH
30821: LD_INT 2
30823: PPUSH
30824: CALL_OW 322
// end ;
30828: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30829: LD_EXP 44
30833: IFFALSE 30841
30835: PUSH
30836: LD_EXP 96
30840: AND
30841: IFFALSE 30962
30843: GO 30845
30845: DISABLE
30846: LD_INT 0
30848: PPUSH
30849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30850: LD_ADDR_VAR 0 2
30854: PUSH
30855: LD_INT 22
30857: PUSH
30858: LD_OWVAR 2
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 21
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 3
30879: PUSH
30880: LD_INT 23
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: LIST
30898: PPUSH
30899: CALL_OW 69
30903: ST_TO_ADDR
// if not tmp then
30904: LD_VAR 0 2
30908: NOT
30909: IFFALSE 30913
// exit ;
30911: GO 30962
// for i in tmp do
30913: LD_ADDR_VAR 0 1
30917: PUSH
30918: LD_VAR 0 2
30922: PUSH
30923: FOR_IN
30924: IFFALSE 30960
// begin if Crawls ( i ) then
30926: LD_VAR 0 1
30930: PPUSH
30931: CALL_OW 318
30935: IFFALSE 30946
// ComWalk ( i ) ;
30937: LD_VAR 0 1
30941: PPUSH
30942: CALL_OW 138
// SetClass ( i , 2 ) ;
30946: LD_VAR 0 1
30950: PPUSH
30951: LD_INT 2
30953: PPUSH
30954: CALL_OW 336
// end ;
30958: GO 30923
30960: POP
30961: POP
// end ;
30962: PPOPN 2
30964: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30965: LD_EXP 44
30969: IFFALSE 30977
30971: PUSH
30972: LD_EXP 97
30976: AND
30977: IFFALSE 31267
30979: GO 30981
30981: DISABLE
30982: LD_INT 0
30984: PPUSH
30985: PPUSH
30986: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30987: LD_OWVAR 2
30991: PPUSH
30992: LD_INT 9
30994: PPUSH
30995: LD_INT 1
30997: PPUSH
30998: LD_INT 1
31000: PPUSH
31001: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31005: LD_INT 9
31007: PPUSH
31008: LD_OWVAR 2
31012: PPUSH
31013: CALL_OW 343
// uc_side := 9 ;
31017: LD_ADDR_OWVAR 20
31021: PUSH
31022: LD_INT 9
31024: ST_TO_ADDR
// uc_nation := 2 ;
31025: LD_ADDR_OWVAR 21
31029: PUSH
31030: LD_INT 2
31032: ST_TO_ADDR
// hc_name := Dark Warrior ;
31033: LD_ADDR_OWVAR 26
31037: PUSH
31038: LD_STRING Dark Warrior
31040: ST_TO_ADDR
// hc_gallery :=  ;
31041: LD_ADDR_OWVAR 33
31045: PUSH
31046: LD_STRING 
31048: ST_TO_ADDR
// hc_noskilllimit := true ;
31049: LD_ADDR_OWVAR 76
31053: PUSH
31054: LD_INT 1
31056: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31057: LD_ADDR_OWVAR 31
31061: PUSH
31062: LD_INT 30
31064: PUSH
31065: LD_INT 30
31067: PUSH
31068: LD_INT 30
31070: PUSH
31071: LD_INT 30
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: ST_TO_ADDR
// un := CreateHuman ;
31080: LD_ADDR_VAR 0 3
31084: PUSH
31085: CALL_OW 44
31089: ST_TO_ADDR
// hc_noskilllimit := false ;
31090: LD_ADDR_OWVAR 76
31094: PUSH
31095: LD_INT 0
31097: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31098: LD_VAR 0 3
31102: PPUSH
31103: LD_INT 1
31105: PPUSH
31106: CALL_OW 51
// ToLua ( playRanger() ) ;
31110: LD_STRING playRanger()
31112: PPUSH
31113: CALL_OW 559
// p := 0 ;
31117: LD_ADDR_VAR 0 2
31121: PUSH
31122: LD_INT 0
31124: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31125: LD_INT 35
31127: PPUSH
31128: CALL_OW 67
// p := p + 1 ;
31132: LD_ADDR_VAR 0 2
31136: PUSH
31137: LD_VAR 0 2
31141: PUSH
31142: LD_INT 1
31144: PLUS
31145: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31146: LD_VAR 0 3
31150: PPUSH
31151: CALL_OW 256
31155: PUSH
31156: LD_INT 1000
31158: LESS
31159: IFFALSE 31173
// SetLives ( un , 1000 ) ;
31161: LD_VAR 0 3
31165: PPUSH
31166: LD_INT 1000
31168: PPUSH
31169: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31173: LD_VAR 0 3
31177: PPUSH
31178: LD_INT 81
31180: PUSH
31181: LD_OWVAR 2
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 91
31192: PUSH
31193: LD_VAR 0 3
31197: PUSH
31198: LD_INT 30
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: LIST
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PPUSH
31210: CALL_OW 69
31214: PPUSH
31215: LD_VAR 0 3
31219: PPUSH
31220: CALL_OW 74
31224: PPUSH
31225: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31229: LD_VAR 0 2
31233: PUSH
31234: LD_INT 80
31236: GREATER
31237: IFTRUE 31250
31239: PUSH
31240: LD_VAR 0 3
31244: PPUSH
31245: CALL_OW 301
31249: OR
31250: IFFALSE 31125
// if un then
31252: LD_VAR 0 3
31256: IFFALSE 31267
// RemoveUnit ( un ) ;
31258: LD_VAR 0 3
31262: PPUSH
31263: CALL_OW 64
// end ;
31267: PPOPN 3
31269: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31270: LD_EXP 98
31274: IFFALSE 31390
31276: GO 31278
31278: DISABLE
31279: LD_INT 0
31281: PPUSH
31282: PPUSH
31283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31284: LD_ADDR_VAR 0 2
31288: PUSH
31289: LD_INT 81
31291: PUSH
31292: LD_OWVAR 2
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 21
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PPUSH
31315: CALL_OW 69
31319: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31320: LD_STRING playComputer()
31322: PPUSH
31323: CALL_OW 559
// if not tmp then
31327: LD_VAR 0 2
31331: NOT
31332: IFFALSE 31336
// exit ;
31334: GO 31390
// for i in tmp do
31336: LD_ADDR_VAR 0 1
31340: PUSH
31341: LD_VAR 0 2
31345: PUSH
31346: FOR_IN
31347: IFFALSE 31388
// for j := 1 to 4 do
31349: LD_ADDR_VAR 0 3
31353: PUSH
31354: DOUBLE
31355: LD_INT 1
31357: DEC
31358: ST_TO_ADDR
31359: LD_INT 4
31361: PUSH
31362: FOR_TO
31363: IFFALSE 31384
// SetSkill ( i , j , 10 ) ;
31365: LD_VAR 0 1
31369: PPUSH
31370: LD_VAR 0 3
31374: PPUSH
31375: LD_INT 10
31377: PPUSH
31378: CALL_OW 237
31382: GO 31362
31384: POP
31385: POP
31386: GO 31346
31388: POP
31389: POP
// end ;
31390: PPOPN 3
31392: END
// every 0 0$1 trigger s30 do var i , tmp ;
31393: LD_EXP 99
31397: IFFALSE 31466
31399: GO 31401
31401: DISABLE
31402: LD_INT 0
31404: PPUSH
31405: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31406: LD_ADDR_VAR 0 2
31410: PUSH
31411: LD_INT 22
31413: PUSH
31414: LD_OWVAR 2
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PPUSH
31423: CALL_OW 69
31427: ST_TO_ADDR
// if not tmp then
31428: LD_VAR 0 2
31432: NOT
31433: IFFALSE 31437
// exit ;
31435: GO 31466
// for i in tmp do
31437: LD_ADDR_VAR 0 1
31441: PUSH
31442: LD_VAR 0 2
31446: PUSH
31447: FOR_IN
31448: IFFALSE 31464
// SetLives ( i , 300 ) ;
31450: LD_VAR 0 1
31454: PPUSH
31455: LD_INT 300
31457: PPUSH
31458: CALL_OW 234
31462: GO 31447
31464: POP
31465: POP
// end ;
31466: PPOPN 2
31468: END
// every 0 0$1 trigger s60 do var i , tmp ;
31469: LD_EXP 100
31473: IFFALSE 31542
31475: GO 31477
31477: DISABLE
31478: LD_INT 0
31480: PPUSH
31481: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31482: LD_ADDR_VAR 0 2
31486: PUSH
31487: LD_INT 22
31489: PUSH
31490: LD_OWVAR 2
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PPUSH
31499: CALL_OW 69
31503: ST_TO_ADDR
// if not tmp then
31504: LD_VAR 0 2
31508: NOT
31509: IFFALSE 31513
// exit ;
31511: GO 31542
// for i in tmp do
31513: LD_ADDR_VAR 0 1
31517: PUSH
31518: LD_VAR 0 2
31522: PUSH
31523: FOR_IN
31524: IFFALSE 31540
// SetLives ( i , 600 ) ;
31526: LD_VAR 0 1
31530: PPUSH
31531: LD_INT 600
31533: PPUSH
31534: CALL_OW 234
31538: GO 31523
31540: POP
31541: POP
// end ;
31542: PPOPN 2
31544: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31545: LD_INT 0
31547: PPUSH
// case cmd of 301 :
31548: LD_VAR 0 1
31552: PUSH
31553: LD_INT 301
31555: DOUBLE
31556: EQUAL
31557: IFTRUE 31561
31559: GO 31593
31561: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31562: LD_VAR 0 6
31566: PPUSH
31567: LD_VAR 0 7
31571: PPUSH
31572: LD_VAR 0 8
31576: PPUSH
31577: LD_VAR 0 4
31581: PPUSH
31582: LD_VAR 0 5
31586: PPUSH
31587: CALL 32806 0 5
31591: GO 31714
31593: LD_INT 302
31595: DOUBLE
31596: EQUAL
31597: IFTRUE 31601
31599: GO 31638
31601: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31602: LD_VAR 0 6
31606: PPUSH
31607: LD_VAR 0 7
31611: PPUSH
31612: LD_VAR 0 8
31616: PPUSH
31617: LD_VAR 0 9
31621: PPUSH
31622: LD_VAR 0 4
31626: PPUSH
31627: LD_VAR 0 5
31631: PPUSH
31632: CALL 32897 0 6
31636: GO 31714
31638: LD_INT 303
31640: DOUBLE
31641: EQUAL
31642: IFTRUE 31646
31644: GO 31683
31646: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31647: LD_VAR 0 6
31651: PPUSH
31652: LD_VAR 0 7
31656: PPUSH
31657: LD_VAR 0 8
31661: PPUSH
31662: LD_VAR 0 9
31666: PPUSH
31667: LD_VAR 0 4
31671: PPUSH
31672: LD_VAR 0 5
31676: PPUSH
31677: CALL 31719 0 6
31681: GO 31714
31683: LD_INT 304
31685: DOUBLE
31686: EQUAL
31687: IFTRUE 31691
31689: GO 31713
31691: POP
// hHackTeleport ( unit , x , y ) ; end ;
31692: LD_VAR 0 2
31696: PPUSH
31697: LD_VAR 0 4
31701: PPUSH
31702: LD_VAR 0 5
31706: PPUSH
31707: CALL 33490 0 3
31711: GO 31714
31713: POP
// end ;
31714: LD_VAR 0 12
31718: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31719: LD_INT 0
31721: PPUSH
31722: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31723: LD_VAR 0 1
31727: PUSH
31728: LD_INT 1
31730: LESS
31731: IFTRUE 31743
31733: PUSH
31734: LD_VAR 0 1
31738: PUSH
31739: LD_INT 3
31741: GREATER
31742: OR
31743: IFTRUE 31761
31745: PUSH
31746: LD_VAR 0 5
31750: PPUSH
31751: LD_VAR 0 6
31755: PPUSH
31756: CALL_OW 428
31760: OR
31761: IFFALSE 31765
// exit ;
31763: GO 32493
// uc_side := your_side ;
31765: LD_ADDR_OWVAR 20
31769: PUSH
31770: LD_OWVAR 2
31774: ST_TO_ADDR
// uc_nation := nation ;
31775: LD_ADDR_OWVAR 21
31779: PUSH
31780: LD_VAR 0 1
31784: ST_TO_ADDR
// bc_level = 1 ;
31785: LD_ADDR_OWVAR 43
31789: PUSH
31790: LD_INT 1
31792: ST_TO_ADDR
// case btype of 1 :
31793: LD_VAR 0 2
31797: PUSH
31798: LD_INT 1
31800: DOUBLE
31801: EQUAL
31802: IFTRUE 31806
31804: GO 31817
31806: POP
// bc_type := b_depot ; 2 :
31807: LD_ADDR_OWVAR 42
31811: PUSH
31812: LD_INT 0
31814: ST_TO_ADDR
31815: GO 32437
31817: LD_INT 2
31819: DOUBLE
31820: EQUAL
31821: IFTRUE 31825
31823: GO 31836
31825: POP
// bc_type := b_warehouse ; 3 :
31826: LD_ADDR_OWVAR 42
31830: PUSH
31831: LD_INT 1
31833: ST_TO_ADDR
31834: GO 32437
31836: LD_INT 3
31838: DOUBLE
31839: EQUAL
31840: IFTRUE 31844
31842: GO 31855
31844: POP
// bc_type := b_lab ; 4 .. 9 :
31845: LD_ADDR_OWVAR 42
31849: PUSH
31850: LD_INT 6
31852: ST_TO_ADDR
31853: GO 32437
31855: LD_INT 4
31857: DOUBLE
31858: GREATEREQUAL
31859: IFFALSE 31867
31861: LD_INT 9
31863: DOUBLE
31864: LESSEQUAL
31865: IFTRUE 31869
31867: GO 31929
31869: POP
// begin bc_type := b_lab_half ;
31870: LD_ADDR_OWVAR 42
31874: PUSH
31875: LD_INT 7
31877: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31878: LD_ADDR_OWVAR 44
31882: PUSH
31883: LD_INT 10
31885: PUSH
31886: LD_INT 11
31888: PUSH
31889: LD_INT 12
31891: PUSH
31892: LD_INT 15
31894: PUSH
31895: LD_INT 14
31897: PUSH
31898: LD_INT 13
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: PUSH
31909: LD_VAR 0 2
31913: PUSH
31914: LD_INT 3
31916: MINUS
31917: ARRAY
31918: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
31919: LD_ADDR_OWVAR 45
31923: PUSH
31924: LD_INT 9
31926: ST_TO_ADDR
// end ; 10 .. 13 :
31927: GO 32437
31929: LD_INT 10
31931: DOUBLE
31932: GREATEREQUAL
31933: IFFALSE 31941
31935: LD_INT 13
31937: DOUBLE
31938: LESSEQUAL
31939: IFTRUE 31943
31941: GO 32020
31943: POP
// begin bc_type := b_lab_full ;
31944: LD_ADDR_OWVAR 42
31948: PUSH
31949: LD_INT 8
31951: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31952: LD_ADDR_OWVAR 44
31956: PUSH
31957: LD_INT 10
31959: PUSH
31960: LD_INT 12
31962: PUSH
31963: LD_INT 14
31965: PUSH
31966: LD_INT 13
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: PUSH
31975: LD_VAR 0 2
31979: PUSH
31980: LD_INT 9
31982: MINUS
31983: ARRAY
31984: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31985: LD_ADDR_OWVAR 45
31989: PUSH
31990: LD_INT 11
31992: PUSH
31993: LD_INT 15
31995: PUSH
31996: LD_INT 12
31998: PUSH
31999: LD_INT 15
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: PUSH
32008: LD_VAR 0 2
32012: PUSH
32013: LD_INT 9
32015: MINUS
32016: ARRAY
32017: ST_TO_ADDR
// end ; 14 :
32018: GO 32437
32020: LD_INT 14
32022: DOUBLE
32023: EQUAL
32024: IFTRUE 32028
32026: GO 32039
32028: POP
// bc_type := b_workshop ; 15 :
32029: LD_ADDR_OWVAR 42
32033: PUSH
32034: LD_INT 2
32036: ST_TO_ADDR
32037: GO 32437
32039: LD_INT 15
32041: DOUBLE
32042: EQUAL
32043: IFTRUE 32047
32045: GO 32058
32047: POP
// bc_type := b_factory ; 16 :
32048: LD_ADDR_OWVAR 42
32052: PUSH
32053: LD_INT 3
32055: ST_TO_ADDR
32056: GO 32437
32058: LD_INT 16
32060: DOUBLE
32061: EQUAL
32062: IFTRUE 32066
32064: GO 32077
32066: POP
// bc_type := b_ext_gun ; 17 :
32067: LD_ADDR_OWVAR 42
32071: PUSH
32072: LD_INT 17
32074: ST_TO_ADDR
32075: GO 32437
32077: LD_INT 17
32079: DOUBLE
32080: EQUAL
32081: IFTRUE 32085
32083: GO 32113
32085: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32086: LD_ADDR_OWVAR 42
32090: PUSH
32091: LD_INT 19
32093: PUSH
32094: LD_INT 23
32096: PUSH
32097: LD_INT 19
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: LIST
32104: PUSH
32105: LD_VAR 0 1
32109: ARRAY
32110: ST_TO_ADDR
32111: GO 32437
32113: LD_INT 18
32115: DOUBLE
32116: EQUAL
32117: IFTRUE 32121
32119: GO 32132
32121: POP
// bc_type := b_ext_radar ; 19 :
32122: LD_ADDR_OWVAR 42
32126: PUSH
32127: LD_INT 20
32129: ST_TO_ADDR
32130: GO 32437
32132: LD_INT 19
32134: DOUBLE
32135: EQUAL
32136: IFTRUE 32140
32138: GO 32151
32140: POP
// bc_type := b_ext_radio ; 20 :
32141: LD_ADDR_OWVAR 42
32145: PUSH
32146: LD_INT 22
32148: ST_TO_ADDR
32149: GO 32437
32151: LD_INT 20
32153: DOUBLE
32154: EQUAL
32155: IFTRUE 32159
32157: GO 32170
32159: POP
// bc_type := b_ext_siberium ; 21 :
32160: LD_ADDR_OWVAR 42
32164: PUSH
32165: LD_INT 21
32167: ST_TO_ADDR
32168: GO 32437
32170: LD_INT 21
32172: DOUBLE
32173: EQUAL
32174: IFTRUE 32178
32176: GO 32189
32178: POP
// bc_type := b_ext_computer ; 22 :
32179: LD_ADDR_OWVAR 42
32183: PUSH
32184: LD_INT 24
32186: ST_TO_ADDR
32187: GO 32437
32189: LD_INT 22
32191: DOUBLE
32192: EQUAL
32193: IFTRUE 32197
32195: GO 32208
32197: POP
// bc_type := b_ext_track ; 23 :
32198: LD_ADDR_OWVAR 42
32202: PUSH
32203: LD_INT 16
32205: ST_TO_ADDR
32206: GO 32437
32208: LD_INT 23
32210: DOUBLE
32211: EQUAL
32212: IFTRUE 32216
32214: GO 32227
32216: POP
// bc_type := b_ext_laser ; 24 :
32217: LD_ADDR_OWVAR 42
32221: PUSH
32222: LD_INT 25
32224: ST_TO_ADDR
32225: GO 32437
32227: LD_INT 24
32229: DOUBLE
32230: EQUAL
32231: IFTRUE 32235
32233: GO 32246
32235: POP
// bc_type := b_control_tower ; 25 :
32236: LD_ADDR_OWVAR 42
32240: PUSH
32241: LD_INT 36
32243: ST_TO_ADDR
32244: GO 32437
32246: LD_INT 25
32248: DOUBLE
32249: EQUAL
32250: IFTRUE 32254
32252: GO 32265
32254: POP
// bc_type := b_breastwork ; 26 :
32255: LD_ADDR_OWVAR 42
32259: PUSH
32260: LD_INT 31
32262: ST_TO_ADDR
32263: GO 32437
32265: LD_INT 26
32267: DOUBLE
32268: EQUAL
32269: IFTRUE 32273
32271: GO 32284
32273: POP
// bc_type := b_bunker ; 27 :
32274: LD_ADDR_OWVAR 42
32278: PUSH
32279: LD_INT 32
32281: ST_TO_ADDR
32282: GO 32437
32284: LD_INT 27
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 32303
32292: POP
// bc_type := b_turret ; 28 :
32293: LD_ADDR_OWVAR 42
32297: PUSH
32298: LD_INT 33
32300: ST_TO_ADDR
32301: GO 32437
32303: LD_INT 28
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32322
32311: POP
// bc_type := b_armoury ; 29 :
32312: LD_ADDR_OWVAR 42
32316: PUSH
32317: LD_INT 4
32319: ST_TO_ADDR
32320: GO 32437
32322: LD_INT 29
32324: DOUBLE
32325: EQUAL
32326: IFTRUE 32330
32328: GO 32341
32330: POP
// bc_type := b_barracks ; 30 :
32331: LD_ADDR_OWVAR 42
32335: PUSH
32336: LD_INT 5
32338: ST_TO_ADDR
32339: GO 32437
32341: LD_INT 30
32343: DOUBLE
32344: EQUAL
32345: IFTRUE 32349
32347: GO 32360
32349: POP
// bc_type := b_solar_power ; 31 :
32350: LD_ADDR_OWVAR 42
32354: PUSH
32355: LD_INT 27
32357: ST_TO_ADDR
32358: GO 32437
32360: LD_INT 31
32362: DOUBLE
32363: EQUAL
32364: IFTRUE 32368
32366: GO 32379
32368: POP
// bc_type := b_oil_power ; 32 :
32369: LD_ADDR_OWVAR 42
32373: PUSH
32374: LD_INT 26
32376: ST_TO_ADDR
32377: GO 32437
32379: LD_INT 32
32381: DOUBLE
32382: EQUAL
32383: IFTRUE 32387
32385: GO 32398
32387: POP
// bc_type := b_siberite_power ; 33 :
32388: LD_ADDR_OWVAR 42
32392: PUSH
32393: LD_INT 28
32395: ST_TO_ADDR
32396: GO 32437
32398: LD_INT 33
32400: DOUBLE
32401: EQUAL
32402: IFTRUE 32406
32404: GO 32417
32406: POP
// bc_type := b_oil_mine ; 34 :
32407: LD_ADDR_OWVAR 42
32411: PUSH
32412: LD_INT 29
32414: ST_TO_ADDR
32415: GO 32437
32417: LD_INT 34
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32425
32423: GO 32436
32425: POP
// bc_type := b_siberite_mine ; end ;
32426: LD_ADDR_OWVAR 42
32430: PUSH
32431: LD_INT 30
32433: ST_TO_ADDR
32434: GO 32437
32436: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32437: LD_ADDR_VAR 0 8
32441: PUSH
32442: LD_VAR 0 5
32446: PPUSH
32447: LD_VAR 0 6
32451: PPUSH
32452: LD_VAR 0 3
32456: PPUSH
32457: CALL_OW 47
32461: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32462: LD_OWVAR 42
32466: PUSH
32467: LD_INT 32
32469: PUSH
32470: LD_INT 33
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: IN
32477: IFFALSE 32493
// PlaceWeaponTurret ( b , weapon ) ;
32479: LD_VAR 0 8
32483: PPUSH
32484: LD_VAR 0 4
32488: PPUSH
32489: CALL_OW 431
// end ;
32493: LD_VAR 0 7
32497: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32498: LD_INT 0
32500: PPUSH
32501: PPUSH
32502: PPUSH
32503: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32504: LD_ADDR_VAR 0 4
32508: PUSH
32509: LD_INT 22
32511: PUSH
32512: LD_OWVAR 2
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 2
32523: PUSH
32524: LD_INT 30
32526: PUSH
32527: LD_INT 0
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 30
32536: PUSH
32537: LD_INT 1
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: LIST
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PPUSH
32553: CALL_OW 69
32557: ST_TO_ADDR
// if not tmp then
32558: LD_VAR 0 4
32562: NOT
32563: IFFALSE 32567
// exit ;
32565: GO 32626
// for i in tmp do
32567: LD_ADDR_VAR 0 2
32571: PUSH
32572: LD_VAR 0 4
32576: PUSH
32577: FOR_IN
32578: IFFALSE 32624
// for j = 1 to 3 do
32580: LD_ADDR_VAR 0 3
32584: PUSH
32585: DOUBLE
32586: LD_INT 1
32588: DEC
32589: ST_TO_ADDR
32590: LD_INT 3
32592: PUSH
32593: FOR_TO
32594: IFFALSE 32620
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32596: LD_VAR 0 2
32600: PPUSH
32601: CALL_OW 274
32605: PPUSH
32606: LD_VAR 0 3
32610: PPUSH
32611: LD_INT 99999
32613: PPUSH
32614: CALL_OW 277
32618: GO 32593
32620: POP
32621: POP
32622: GO 32577
32624: POP
32625: POP
// end ;
32626: LD_VAR 0 1
32630: RET
// export function hHackSetLevel10 ; var i , j ; begin
32631: LD_INT 0
32633: PPUSH
32634: PPUSH
32635: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32636: LD_ADDR_VAR 0 2
32640: PUSH
32641: LD_INT 21
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PPUSH
32651: CALL_OW 69
32655: PUSH
32656: FOR_IN
32657: IFFALSE 32709
// if IsSelected ( i ) then
32659: LD_VAR 0 2
32663: PPUSH
32664: CALL_OW 306
32668: IFFALSE 32707
// begin for j := 1 to 4 do
32670: LD_ADDR_VAR 0 3
32674: PUSH
32675: DOUBLE
32676: LD_INT 1
32678: DEC
32679: ST_TO_ADDR
32680: LD_INT 4
32682: PUSH
32683: FOR_TO
32684: IFFALSE 32705
// SetSkill ( i , j , 10 ) ;
32686: LD_VAR 0 2
32690: PPUSH
32691: LD_VAR 0 3
32695: PPUSH
32696: LD_INT 10
32698: PPUSH
32699: CALL_OW 237
32703: GO 32683
32705: POP
32706: POP
// end ;
32707: GO 32656
32709: POP
32710: POP
// end ;
32711: LD_VAR 0 1
32715: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32716: LD_INT 0
32718: PPUSH
32719: PPUSH
32720: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32721: LD_ADDR_VAR 0 2
32725: PUSH
32726: LD_INT 22
32728: PUSH
32729: LD_OWVAR 2
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 21
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PPUSH
32752: CALL_OW 69
32756: PUSH
32757: FOR_IN
32758: IFFALSE 32799
// begin for j := 1 to 4 do
32760: LD_ADDR_VAR 0 3
32764: PUSH
32765: DOUBLE
32766: LD_INT 1
32768: DEC
32769: ST_TO_ADDR
32770: LD_INT 4
32772: PUSH
32773: FOR_TO
32774: IFFALSE 32795
// SetSkill ( i , j , 10 ) ;
32776: LD_VAR 0 2
32780: PPUSH
32781: LD_VAR 0 3
32785: PPUSH
32786: LD_INT 10
32788: PPUSH
32789: CALL_OW 237
32793: GO 32773
32795: POP
32796: POP
// end ;
32797: GO 32757
32799: POP
32800: POP
// end ;
32801: LD_VAR 0 1
32805: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32806: LD_INT 0
32808: PPUSH
// uc_side := your_side ;
32809: LD_ADDR_OWVAR 20
32813: PUSH
32814: LD_OWVAR 2
32818: ST_TO_ADDR
// uc_nation := nation ;
32819: LD_ADDR_OWVAR 21
32823: PUSH
32824: LD_VAR 0 1
32828: ST_TO_ADDR
// InitHc ;
32829: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32833: LD_INT 0
32835: PPUSH
32836: LD_VAR 0 2
32840: PPUSH
32841: LD_VAR 0 3
32845: PPUSH
32846: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32850: LD_VAR 0 4
32854: PPUSH
32855: LD_VAR 0 5
32859: PPUSH
32860: CALL_OW 428
32864: PUSH
32865: LD_INT 0
32867: EQUAL
32868: IFFALSE 32892
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32870: CALL_OW 44
32874: PPUSH
32875: LD_VAR 0 4
32879: PPUSH
32880: LD_VAR 0 5
32884: PPUSH
32885: LD_INT 1
32887: PPUSH
32888: CALL_OW 48
// end ;
32892: LD_VAR 0 6
32896: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32897: LD_INT 0
32899: PPUSH
32900: PPUSH
// uc_side := your_side ;
32901: LD_ADDR_OWVAR 20
32905: PUSH
32906: LD_OWVAR 2
32910: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32911: LD_VAR 0 1
32915: PUSH
32916: LD_INT 1
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: LD_INT 3
32924: PUSH
32925: LD_INT 4
32927: PUSH
32928: LD_INT 5
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: IN
32938: IFFALSE 32950
// uc_nation := nation_american else
32940: LD_ADDR_OWVAR 21
32944: PUSH
32945: LD_INT 1
32947: ST_TO_ADDR
32948: GO 32993
// if chassis in [ 11 , 12 , 13 , 14 ] then
32950: LD_VAR 0 1
32954: PUSH
32955: LD_INT 11
32957: PUSH
32958: LD_INT 12
32960: PUSH
32961: LD_INT 13
32963: PUSH
32964: LD_INT 14
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: IN
32973: IFFALSE 32985
// uc_nation := nation_arabian else
32975: LD_ADDR_OWVAR 21
32979: PUSH
32980: LD_INT 2
32982: ST_TO_ADDR
32983: GO 32993
// uc_nation := nation_russian ;
32985: LD_ADDR_OWVAR 21
32989: PUSH
32990: LD_INT 3
32992: ST_TO_ADDR
// vc_chassis := chassis ;
32993: LD_ADDR_OWVAR 37
32997: PUSH
32998: LD_VAR 0 1
33002: ST_TO_ADDR
// vc_engine := engine ;
33003: LD_ADDR_OWVAR 39
33007: PUSH
33008: LD_VAR 0 2
33012: ST_TO_ADDR
// vc_control := control ;
33013: LD_ADDR_OWVAR 38
33017: PUSH
33018: LD_VAR 0 3
33022: ST_TO_ADDR
// vc_weapon := weapon ;
33023: LD_ADDR_OWVAR 40
33027: PUSH
33028: LD_VAR 0 4
33032: ST_TO_ADDR
// un := CreateVehicle ;
33033: LD_ADDR_VAR 0 8
33037: PUSH
33038: CALL_OW 45
33042: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33043: LD_VAR 0 8
33047: PPUSH
33048: LD_INT 0
33050: PPUSH
33051: LD_INT 5
33053: PPUSH
33054: CALL_OW 12
33058: PPUSH
33059: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33063: LD_VAR 0 8
33067: PPUSH
33068: LD_VAR 0 5
33072: PPUSH
33073: LD_VAR 0 6
33077: PPUSH
33078: LD_INT 1
33080: PPUSH
33081: CALL_OW 48
// end ;
33085: LD_VAR 0 7
33089: RET
// export hInvincible ; every 1 do
33090: GO 33092
33092: DISABLE
// hInvincible := [ ] ;
33093: LD_ADDR_EXP 101
33097: PUSH
33098: EMPTY
33099: ST_TO_ADDR
33100: END
// every 10 do var i ;
33101: GO 33103
33103: DISABLE
33104: LD_INT 0
33106: PPUSH
// begin enable ;
33107: ENABLE
// if not hInvincible then
33108: LD_EXP 101
33112: NOT
33113: IFFALSE 33117
// exit ;
33115: GO 33161
// for i in hInvincible do
33117: LD_ADDR_VAR 0 1
33121: PUSH
33122: LD_EXP 101
33126: PUSH
33127: FOR_IN
33128: IFFALSE 33159
// if GetLives ( i ) < 1000 then
33130: LD_VAR 0 1
33134: PPUSH
33135: CALL_OW 256
33139: PUSH
33140: LD_INT 1000
33142: LESS
33143: IFFALSE 33157
// SetLives ( i , 1000 ) ;
33145: LD_VAR 0 1
33149: PPUSH
33150: LD_INT 1000
33152: PPUSH
33153: CALL_OW 234
33157: GO 33127
33159: POP
33160: POP
// end ;
33161: PPOPN 1
33163: END
// export function hHackInvincible ; var i ; begin
33164: LD_INT 0
33166: PPUSH
33167: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33168: LD_ADDR_VAR 0 2
33172: PUSH
33173: LD_INT 2
33175: PUSH
33176: LD_INT 21
33178: PUSH
33179: LD_INT 1
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 21
33188: PUSH
33189: LD_INT 2
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: LIST
33200: PPUSH
33201: CALL_OW 69
33205: PUSH
33206: FOR_IN
33207: IFFALSE 33268
// if IsSelected ( i ) then
33209: LD_VAR 0 2
33213: PPUSH
33214: CALL_OW 306
33218: IFFALSE 33266
// begin if i in hInvincible then
33220: LD_VAR 0 2
33224: PUSH
33225: LD_EXP 101
33229: IN
33230: IFFALSE 33250
// hInvincible := hInvincible diff i else
33232: LD_ADDR_EXP 101
33236: PUSH
33237: LD_EXP 101
33241: PUSH
33242: LD_VAR 0 2
33246: DIFF
33247: ST_TO_ADDR
33248: GO 33266
// hInvincible := hInvincible union i ;
33250: LD_ADDR_EXP 101
33254: PUSH
33255: LD_EXP 101
33259: PUSH
33260: LD_VAR 0 2
33264: UNION
33265: ST_TO_ADDR
// end ;
33266: GO 33206
33268: POP
33269: POP
// end ;
33270: LD_VAR 0 1
33274: RET
// export function hHackInvisible ; var i , j ; begin
33275: LD_INT 0
33277: PPUSH
33278: PPUSH
33279: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33280: LD_ADDR_VAR 0 2
33284: PUSH
33285: LD_INT 21
33287: PUSH
33288: LD_INT 1
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PPUSH
33295: CALL_OW 69
33299: PUSH
33300: FOR_IN
33301: IFFALSE 33325
// if IsSelected ( i ) then
33303: LD_VAR 0 2
33307: PPUSH
33308: CALL_OW 306
33312: IFFALSE 33323
// ComForceInvisible ( i ) ;
33314: LD_VAR 0 2
33318: PPUSH
33319: CALL_OW 496
33323: GO 33300
33325: POP
33326: POP
// end ;
33327: LD_VAR 0 1
33331: RET
// export function hHackChangeYourSide ; begin
33332: LD_INT 0
33334: PPUSH
// if your_side = 8 then
33335: LD_OWVAR 2
33339: PUSH
33340: LD_INT 8
33342: EQUAL
33343: IFFALSE 33355
// your_side := 0 else
33345: LD_ADDR_OWVAR 2
33349: PUSH
33350: LD_INT 0
33352: ST_TO_ADDR
33353: GO 33369
// your_side := your_side + 1 ;
33355: LD_ADDR_OWVAR 2
33359: PUSH
33360: LD_OWVAR 2
33364: PUSH
33365: LD_INT 1
33367: PLUS
33368: ST_TO_ADDR
// end ;
33369: LD_VAR 0 1
33373: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33374: LD_INT 0
33376: PPUSH
33377: PPUSH
33378: PPUSH
// for i in all_units do
33379: LD_ADDR_VAR 0 2
33383: PUSH
33384: LD_OWVAR 3
33388: PUSH
33389: FOR_IN
33390: IFFALSE 33468
// if IsSelected ( i ) then
33392: LD_VAR 0 2
33396: PPUSH
33397: CALL_OW 306
33401: IFFALSE 33466
// begin j := GetSide ( i ) ;
33403: LD_ADDR_VAR 0 3
33407: PUSH
33408: LD_VAR 0 2
33412: PPUSH
33413: CALL_OW 255
33417: ST_TO_ADDR
// if j = 8 then
33418: LD_VAR 0 3
33422: PUSH
33423: LD_INT 8
33425: EQUAL
33426: IFFALSE 33438
// j := 0 else
33428: LD_ADDR_VAR 0 3
33432: PUSH
33433: LD_INT 0
33435: ST_TO_ADDR
33436: GO 33452
// j := j + 1 ;
33438: LD_ADDR_VAR 0 3
33442: PUSH
33443: LD_VAR 0 3
33447: PUSH
33448: LD_INT 1
33450: PLUS
33451: ST_TO_ADDR
// SetSide ( i , j ) ;
33452: LD_VAR 0 2
33456: PPUSH
33457: LD_VAR 0 3
33461: PPUSH
33462: CALL_OW 235
// end ;
33466: GO 33389
33468: POP
33469: POP
// end ;
33470: LD_VAR 0 1
33474: RET
// export function hHackFog ; begin
33475: LD_INT 0
33477: PPUSH
// FogOff ( true ) ;
33478: LD_INT 1
33480: PPUSH
33481: CALL_OW 344
// end ;
33485: LD_VAR 0 1
33489: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33490: LD_INT 0
33492: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33493: LD_VAR 0 1
33497: PPUSH
33498: LD_VAR 0 2
33502: PPUSH
33503: LD_VAR 0 3
33507: PPUSH
33508: LD_INT 1
33510: PPUSH
33511: LD_INT 1
33513: PPUSH
33514: CALL_OW 483
// CenterOnXY ( x , y ) ;
33518: LD_VAR 0 2
33522: PPUSH
33523: LD_VAR 0 3
33527: PPUSH
33528: CALL_OW 84
// end ;
33532: LD_VAR 0 4
33536: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33537: LD_INT 0
33539: PPUSH
33540: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33541: LD_VAR 0 1
33545: NOT
33546: IFTRUE 33565
33548: PUSH
33549: LD_VAR 0 2
33553: PPUSH
33554: LD_VAR 0 3
33558: PPUSH
33559: CALL_OW 488
33563: NOT
33564: OR
33565: IFTRUE 33600
33567: PUSH
33568: LD_VAR 0 1
33572: PPUSH
33573: CALL_OW 266
33577: PUSH
33578: LD_INT 3
33580: NONEQUAL
33581: IFFALSE 33599
33583: PUSH
33584: LD_VAR 0 1
33588: PPUSH
33589: CALL_OW 247
33593: PUSH
33594: LD_INT 1
33596: EQUAL
33597: NOT
33598: AND
33599: OR
33600: IFFALSE 33604
// exit ;
33602: GO 33886
// if GetType ( factory ) = unit_human then
33604: LD_VAR 0 1
33608: PPUSH
33609: CALL_OW 247
33613: PUSH
33614: LD_INT 1
33616: EQUAL
33617: IFFALSE 33634
// factory := IsInUnit ( factory ) ;
33619: LD_ADDR_VAR 0 1
33623: PUSH
33624: LD_VAR 0 1
33628: PPUSH
33629: CALL_OW 310
33633: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33634: LD_VAR 0 1
33638: PPUSH
33639: CALL_OW 266
33643: PUSH
33644: LD_INT 3
33646: NONEQUAL
33647: IFFALSE 33651
// exit ;
33649: GO 33886
// for i := 1 to Count ( factoryWaypoints ) do
33651: LD_ADDR_VAR 0 5
33655: PUSH
33656: DOUBLE
33657: LD_INT 1
33659: DEC
33660: ST_TO_ADDR
33661: LD_EXP 102
33665: PPUSH
33666: CALL 43419 0 1
33670: PUSH
33671: FOR_TO
33672: IFFALSE 33834
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
33674: LD_VAR 0 2
33678: PPUSH
33679: LD_VAR 0 3
33683: PPUSH
33684: CALL_OW 428
33688: PUSH
33689: LD_EXP 102
33693: PUSH
33694: LD_VAR 0 5
33698: ARRAY
33699: PUSH
33700: LD_INT 2
33702: ARRAY
33703: EQUAL
33704: IFFALSE 33736
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
33706: LD_ADDR_EXP 102
33710: PUSH
33711: LD_EXP 102
33715: PPUSH
33716: LD_VAR 0 5
33720: PPUSH
33721: CALL_OW 3
33725: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33726: CALL 33891 0 0
// exit ;
33730: POP
33731: POP
33732: GO 33886
// end else
33734: GO 33832
// if factory = factoryWaypoints [ i ] [ 2 ] then
33736: LD_VAR 0 1
33740: PUSH
33741: LD_EXP 102
33745: PUSH
33746: LD_VAR 0 5
33750: ARRAY
33751: PUSH
33752: LD_INT 2
33754: ARRAY
33755: EQUAL
33756: IFFALSE 33832
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
33758: LD_ADDR_EXP 102
33762: PUSH
33763: LD_EXP 102
33767: PPUSH
33768: LD_VAR 0 5
33772: PPUSH
33773: CALL_OW 3
33777: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
33778: LD_ADDR_EXP 102
33782: PUSH
33783: LD_EXP 102
33787: PPUSH
33788: LD_VAR 0 1
33792: PPUSH
33793: CALL_OW 255
33797: PUSH
33798: LD_VAR 0 1
33802: PUSH
33803: LD_VAR 0 2
33807: PUSH
33808: LD_VAR 0 3
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: PPUSH
33819: CALL 79351 0 2
33823: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33824: CALL 33891 0 0
// exit ;
33828: POP
33829: POP
33830: GO 33886
// end ; end ;
33832: GO 33671
33834: POP
33835: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
33836: LD_ADDR_EXP 102
33840: PUSH
33841: LD_EXP 102
33845: PPUSH
33846: LD_VAR 0 1
33850: PPUSH
33851: CALL_OW 255
33855: PUSH
33856: LD_VAR 0 1
33860: PUSH
33861: LD_VAR 0 2
33865: PUSH
33866: LD_VAR 0 3
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: PPUSH
33877: CALL 79351 0 2
33881: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33882: CALL 33891 0 0
// end ;
33886: LD_VAR 0 4
33890: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33891: LD_INT 0
33893: PPUSH
33894: PPUSH
33895: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33896: LD_STRING resetFactoryWaypoint();
33898: PPUSH
33899: CALL_OW 559
// if factoryWaypoints then
33903: LD_EXP 102
33907: IFFALSE 34028
// begin list := factoryWaypoints ;
33909: LD_ADDR_VAR 0 3
33913: PUSH
33914: LD_EXP 102
33918: ST_TO_ADDR
// for i := 1 to list do
33919: LD_ADDR_VAR 0 2
33923: PUSH
33924: DOUBLE
33925: LD_INT 1
33927: DEC
33928: ST_TO_ADDR
33929: LD_VAR 0 3
33933: PUSH
33934: FOR_TO
33935: IFFALSE 34026
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33937: LD_STRING setFactoryWaypointXY(
33939: PUSH
33940: LD_VAR 0 3
33944: PUSH
33945: LD_VAR 0 2
33949: ARRAY
33950: PUSH
33951: LD_INT 1
33953: ARRAY
33954: STR
33955: PUSH
33956: LD_STRING ,
33958: STR
33959: PUSH
33960: LD_VAR 0 3
33964: PUSH
33965: LD_VAR 0 2
33969: ARRAY
33970: PUSH
33971: LD_INT 2
33973: ARRAY
33974: STR
33975: PUSH
33976: LD_STRING ,
33978: STR
33979: PUSH
33980: LD_VAR 0 3
33984: PUSH
33985: LD_VAR 0 2
33989: ARRAY
33990: PUSH
33991: LD_INT 3
33993: ARRAY
33994: STR
33995: PUSH
33996: LD_STRING ,
33998: STR
33999: PUSH
34000: LD_VAR 0 3
34004: PUSH
34005: LD_VAR 0 2
34009: ARRAY
34010: PUSH
34011: LD_INT 4
34013: ARRAY
34014: STR
34015: PUSH
34016: LD_STRING )
34018: STR
34019: PPUSH
34020: CALL_OW 559
34024: GO 33934
34026: POP
34027: POP
// end ; end ;
34028: LD_VAR 0 1
34032: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34033: LD_INT 0
34035: PPUSH
// if HexInfo ( x , y ) = warehouse then
34036: LD_VAR 0 2
34040: PPUSH
34041: LD_VAR 0 3
34045: PPUSH
34046: CALL_OW 428
34050: PUSH
34051: LD_VAR 0 1
34055: EQUAL
34056: IFFALSE 34083
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34058: LD_ADDR_EXP 104
34062: PUSH
34063: LD_EXP 104
34067: PPUSH
34068: LD_VAR 0 1
34072: PPUSH
34073: LD_INT 0
34075: PPUSH
34076: CALL_OW 1
34080: ST_TO_ADDR
34081: GO 34134
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34083: LD_ADDR_EXP 104
34087: PUSH
34088: LD_EXP 104
34092: PPUSH
34093: LD_VAR 0 1
34097: PPUSH
34098: LD_VAR 0 1
34102: PPUSH
34103: CALL_OW 255
34107: PUSH
34108: LD_VAR 0 1
34112: PUSH
34113: LD_VAR 0 2
34117: PUSH
34118: LD_VAR 0 3
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: PPUSH
34129: CALL_OW 1
34133: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34134: CALL 34143 0 0
// end ;
34138: LD_VAR 0 4
34142: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34143: LD_INT 0
34145: PPUSH
34146: PPUSH
34147: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34148: LD_STRING resetWarehouseGatheringPoints();
34150: PPUSH
34151: CALL_OW 559
// if warehouseGatheringPoints then
34155: LD_EXP 104
34159: IFFALSE 34285
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34161: LD_ADDR_VAR 0 3
34165: PUSH
34166: LD_EXP 104
34170: PPUSH
34171: CALL 83285 0 1
34175: ST_TO_ADDR
// for i := 1 to list do
34176: LD_ADDR_VAR 0 2
34180: PUSH
34181: DOUBLE
34182: LD_INT 1
34184: DEC
34185: ST_TO_ADDR
34186: LD_VAR 0 3
34190: PUSH
34191: FOR_TO
34192: IFFALSE 34283
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34194: LD_STRING setWarehouseGatheringPointXY(
34196: PUSH
34197: LD_VAR 0 3
34201: PUSH
34202: LD_VAR 0 2
34206: ARRAY
34207: PUSH
34208: LD_INT 1
34210: ARRAY
34211: STR
34212: PUSH
34213: LD_STRING ,
34215: STR
34216: PUSH
34217: LD_VAR 0 3
34221: PUSH
34222: LD_VAR 0 2
34226: ARRAY
34227: PUSH
34228: LD_INT 2
34230: ARRAY
34231: STR
34232: PUSH
34233: LD_STRING ,
34235: STR
34236: PUSH
34237: LD_VAR 0 3
34241: PUSH
34242: LD_VAR 0 2
34246: ARRAY
34247: PUSH
34248: LD_INT 3
34250: ARRAY
34251: STR
34252: PUSH
34253: LD_STRING ,
34255: STR
34256: PUSH
34257: LD_VAR 0 3
34261: PUSH
34262: LD_VAR 0 2
34266: ARRAY
34267: PUSH
34268: LD_INT 4
34270: ARRAY
34271: STR
34272: PUSH
34273: LD_STRING )
34275: STR
34276: PPUSH
34277: CALL_OW 559
34281: GO 34191
34283: POP
34284: POP
// end ; end ;
34285: LD_VAR 0 1
34289: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34290: LD_EXP 104
34294: IFFALSE 34989
34296: GO 34298
34298: DISABLE
34299: LD_INT 0
34301: PPUSH
34302: PPUSH
34303: PPUSH
34304: PPUSH
34305: PPUSH
34306: PPUSH
34307: PPUSH
34308: PPUSH
34309: PPUSH
// begin enable ;
34310: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34311: LD_ADDR_VAR 0 3
34315: PUSH
34316: LD_EXP 104
34320: PPUSH
34321: CALL 83285 0 1
34325: ST_TO_ADDR
// if not list then
34326: LD_VAR 0 3
34330: NOT
34331: IFFALSE 34335
// exit ;
34333: GO 34989
// for i := 1 to list do
34335: LD_ADDR_VAR 0 1
34339: PUSH
34340: DOUBLE
34341: LD_INT 1
34343: DEC
34344: ST_TO_ADDR
34345: LD_VAR 0 3
34349: PUSH
34350: FOR_TO
34351: IFFALSE 34987
// begin depot := list [ i ] [ 2 ] ;
34353: LD_ADDR_VAR 0 8
34357: PUSH
34358: LD_VAR 0 3
34362: PUSH
34363: LD_VAR 0 1
34367: ARRAY
34368: PUSH
34369: LD_INT 2
34371: ARRAY
34372: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34373: LD_ADDR_VAR 0 5
34377: PUSH
34378: LD_VAR 0 3
34382: PUSH
34383: LD_VAR 0 1
34387: ARRAY
34388: PUSH
34389: LD_INT 1
34391: ARRAY
34392: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34393: LD_VAR 0 8
34397: PPUSH
34398: CALL_OW 301
34402: IFTRUE 34421
34404: PUSH
34405: LD_VAR 0 5
34409: PUSH
34410: LD_VAR 0 8
34414: PPUSH
34415: CALL_OW 255
34419: NONEQUAL
34420: OR
34421: IFFALSE 34450
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34423: LD_ADDR_EXP 104
34427: PUSH
34428: LD_EXP 104
34432: PPUSH
34433: LD_VAR 0 8
34437: PPUSH
34438: LD_INT 0
34440: PPUSH
34441: CALL_OW 1
34445: ST_TO_ADDR
// exit ;
34446: POP
34447: POP
34448: GO 34989
// end ; x := list [ i ] [ 3 ] ;
34450: LD_ADDR_VAR 0 6
34454: PUSH
34455: LD_VAR 0 3
34459: PUSH
34460: LD_VAR 0 1
34464: ARRAY
34465: PUSH
34466: LD_INT 3
34468: ARRAY
34469: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34470: LD_ADDR_VAR 0 7
34474: PUSH
34475: LD_VAR 0 3
34479: PUSH
34480: LD_VAR 0 1
34484: ARRAY
34485: PUSH
34486: LD_INT 4
34488: ARRAY
34489: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34490: LD_ADDR_VAR 0 9
34494: PUSH
34495: LD_VAR 0 6
34499: PPUSH
34500: LD_VAR 0 7
34504: PPUSH
34505: LD_INT 16
34507: PPUSH
34508: CALL 81859 0 3
34512: ST_TO_ADDR
// if not cratesNearbyPoint then
34513: LD_VAR 0 9
34517: NOT
34518: IFFALSE 34524
// exit ;
34520: POP
34521: POP
34522: GO 34989
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34524: LD_ADDR_VAR 0 4
34528: PUSH
34529: LD_INT 22
34531: PUSH
34532: LD_VAR 0 5
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: LD_INT 60
34546: PUSH
34547: EMPTY
34548: LIST
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 91
34556: PUSH
34557: LD_VAR 0 8
34561: PUSH
34562: LD_INT 6
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: LD_INT 25
34575: PUSH
34576: LD_INT 2
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 25
34585: PUSH
34586: LD_INT 16
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: LIST
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: PPUSH
34604: CALL_OW 69
34608: PUSH
34609: LD_VAR 0 8
34613: PPUSH
34614: CALL_OW 313
34618: PPUSH
34619: LD_INT 3
34621: PUSH
34622: LD_INT 60
34624: PUSH
34625: EMPTY
34626: LIST
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: LD_INT 25
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 25
34647: PUSH
34648: LD_INT 16
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: LIST
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PPUSH
34664: CALL_OW 72
34668: UNION
34669: ST_TO_ADDR
// if tmp then
34670: LD_VAR 0 4
34674: IFFALSE 34754
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34676: LD_ADDR_VAR 0 4
34680: PUSH
34681: LD_VAR 0 4
34685: PPUSH
34686: LD_INT 3
34688: PPUSH
34689: CALL 79666 0 2
34693: ST_TO_ADDR
// for j in tmp do
34694: LD_ADDR_VAR 0 2
34698: PUSH
34699: LD_VAR 0 4
34703: PUSH
34704: FOR_IN
34705: IFFALSE 34748
// begin if IsInUnit ( j ) then
34707: LD_VAR 0 2
34711: PPUSH
34712: CALL_OW 310
34716: IFFALSE 34727
// ComExit ( j ) ;
34718: LD_VAR 0 2
34722: PPUSH
34723: CALL 79749 0 1
// AddComCollect ( j , x , y ) ;
34727: LD_VAR 0 2
34731: PPUSH
34732: LD_VAR 0 6
34736: PPUSH
34737: LD_VAR 0 7
34741: PPUSH
34742: CALL_OW 177
// end ;
34746: GO 34704
34748: POP
34749: POP
// exit ;
34750: POP
34751: POP
34752: GO 34989
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34754: LD_ADDR_VAR 0 4
34758: PUSH
34759: LD_INT 22
34761: PUSH
34762: LD_VAR 0 5
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 91
34773: PUSH
34774: LD_VAR 0 8
34778: PUSH
34779: LD_INT 8
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 2
34789: PUSH
34790: LD_INT 34
34792: PUSH
34793: LD_INT 12
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 34
34802: PUSH
34803: LD_INT 51
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 34
34812: PUSH
34813: LD_INT 32
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 34
34822: PUSH
34823: LD_INT 89
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: LIST
34841: PPUSH
34842: CALL_OW 69
34846: ST_TO_ADDR
// if tmp then
34847: LD_VAR 0 4
34851: IFFALSE 34985
// begin for j in tmp do
34853: LD_ADDR_VAR 0 2
34857: PUSH
34858: LD_VAR 0 4
34862: PUSH
34863: FOR_IN
34864: IFFALSE 34983
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34866: LD_VAR 0 2
34870: PPUSH
34871: CALL_OW 262
34875: PUSH
34876: LD_INT 3
34878: EQUAL
34879: IFTRUE 34896
34881: PUSH
34882: LD_VAR 0 2
34886: PPUSH
34887: CALL_OW 261
34891: PUSH
34892: LD_INT 20
34894: GREATER
34895: OR
34896: IFFALSE 34910
34898: PUSH
34899: LD_VAR 0 2
34903: PPUSH
34904: CALL_OW 314
34908: NOT
34909: AND
34910: IFFALSE 34940
34912: PUSH
34913: LD_VAR 0 2
34917: PPUSH
34918: CALL_OW 263
34922: PUSH
34923: LD_INT 1
34925: NONEQUAL
34926: IFTRUE 34939
34928: PUSH
34929: LD_VAR 0 2
34933: PPUSH
34934: CALL_OW 311
34938: OR
34939: AND
34940: IFFALSE 34981
// begin ComCollect ( j , x , y ) ;
34942: LD_VAR 0 2
34946: PPUSH
34947: LD_VAR 0 6
34951: PPUSH
34952: LD_VAR 0 7
34956: PPUSH
34957: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34961: LD_VAR 0 2
34965: PPUSH
34966: LD_VAR 0 8
34970: PPUSH
34971: CALL_OW 172
// exit ;
34975: POP
34976: POP
34977: POP
34978: POP
34979: GO 34989
// end ;
34981: GO 34863
34983: POP
34984: POP
// end ; end ;
34985: GO 34350
34987: POP
34988: POP
// end ; end_of_file
34989: PPOPN 9
34991: END
// export function SOS_UnitDestroyed ( un ) ; begin
34992: LD_INT 0
34994: PPUSH
// ComRadiation ( un ) ;
34995: LD_VAR 0 1
34999: PPUSH
35000: CALL 36081 0 1
// end ;
35004: LD_VAR 0 2
35008: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35009: LD_INT 0
35011: PPUSH
// ComRadiation ( un ) ;
35012: LD_VAR 0 1
35016: PPUSH
35017: CALL 36081 0 1
// end ;
35021: LD_VAR 0 2
35025: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35026: LD_INT 0
35028: PPUSH
// end ;
35029: LD_VAR 0 4
35033: RET
// export function SOS_Command ( cmd ) ; begin
35034: LD_INT 0
35036: PPUSH
// end ;
35037: LD_VAR 0 2
35041: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35042: LD_INT 0
35044: PPUSH
// end ;
35045: LD_VAR 0 6
35049: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
35050: LD_INT 0
35052: PPUSH
35053: PPUSH
35054: PPUSH
35055: PPUSH
// if not vehicle or not factory then
35056: LD_VAR 0 1
35060: NOT
35061: IFTRUE 35070
35063: PUSH
35064: LD_VAR 0 2
35068: NOT
35069: OR
35070: IFFALSE 35074
// exit ;
35072: GO 35656
// if not factoryWaypoints then
35074: LD_EXP 102
35078: NOT
35079: IFFALSE 35083
// exit ;
35081: GO 35656
// for i := 1 to Count ( factoryWaypoints ) do
35083: LD_ADDR_VAR 0 4
35087: PUSH
35088: DOUBLE
35089: LD_INT 1
35091: DEC
35092: ST_TO_ADDR
35093: LD_EXP 102
35097: PPUSH
35098: CALL 43419 0 1
35102: PUSH
35103: FOR_TO
35104: IFFALSE 35654
// if factoryWaypoints [ i ] [ 2 ] = factory then
35106: LD_EXP 102
35110: PUSH
35111: LD_VAR 0 4
35115: ARRAY
35116: PUSH
35117: LD_INT 2
35119: ARRAY
35120: PUSH
35121: LD_VAR 0 2
35125: EQUAL
35126: IFFALSE 35652
// begin if GetControl ( vehicle ) = control_manual then
35128: LD_VAR 0 1
35132: PPUSH
35133: CALL_OW 263
35137: PUSH
35138: LD_INT 1
35140: EQUAL
35141: IFFALSE 35505
// begin driver := IsDrivenBy ( vehicle ) ;
35143: LD_ADDR_VAR 0 5
35147: PUSH
35148: LD_VAR 0 1
35152: PPUSH
35153: CALL_OW 311
35157: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
35158: LD_VAR 0 5
35162: PUSH
35163: LD_EXP 103
35167: IN
35168: IFTRUE 35182
35170: PUSH
35171: LD_VAR 0 1
35175: PUSH
35176: LD_EXP 103
35180: IN
35181: OR
35182: IFFALSE 35188
// exit ;
35184: POP
35185: POP
35186: GO 35656
// if not HasTask ( driver ) then
35188: LD_VAR 0 5
35192: PPUSH
35193: CALL_OW 314
35197: NOT
35198: IFFALSE 35503
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
35200: LD_ADDR_EXP 103
35204: PUSH
35205: LD_EXP 103
35209: PPUSH
35210: LD_VAR 0 5
35214: PPUSH
35215: CALL 79351 0 2
35219: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
35220: LD_ADDR_EXP 103
35224: PUSH
35225: LD_EXP 103
35229: PPUSH
35230: LD_VAR 0 1
35234: PPUSH
35235: CALL 79351 0 2
35239: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35240: LD_ADDR_VAR 0 6
35244: PUSH
35245: LD_EXP 102
35249: PUSH
35250: LD_VAR 0 4
35254: ARRAY
35255: PUSH
35256: LD_INT 3
35258: ARRAY
35259: PPUSH
35260: LD_EXP 102
35264: PUSH
35265: LD_VAR 0 4
35269: ARRAY
35270: PUSH
35271: LD_INT 4
35273: ARRAY
35274: PPUSH
35275: CALL_OW 428
35279: ST_TO_ADDR
// if hex then
35280: LD_VAR 0 6
35284: IFFALSE 35302
// ComMoveUnit ( driver , hex ) else
35286: LD_VAR 0 5
35290: PPUSH
35291: LD_VAR 0 6
35295: PPUSH
35296: CALL_OW 112
35300: GO 35386
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
35302: LD_VAR 0 1
35306: PPUSH
35307: LD_EXP 102
35311: PUSH
35312: LD_VAR 0 4
35316: ARRAY
35317: PUSH
35318: LD_INT 3
35320: ARRAY
35321: PPUSH
35322: LD_EXP 102
35326: PUSH
35327: LD_VAR 0 4
35331: ARRAY
35332: PUSH
35333: LD_INT 4
35335: ARRAY
35336: PPUSH
35337: CALL_OW 297
35341: PUSH
35342: LD_INT 0
35344: GREATER
35345: IFFALSE 35386
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35347: LD_VAR 0 5
35351: PPUSH
35352: LD_EXP 102
35356: PUSH
35357: LD_VAR 0 4
35361: ARRAY
35362: PUSH
35363: LD_INT 3
35365: ARRAY
35366: PPUSH
35367: LD_EXP 102
35371: PUSH
35372: LD_VAR 0 4
35376: ARRAY
35377: PUSH
35378: LD_INT 4
35380: ARRAY
35381: PPUSH
35382: CALL_OW 111
// AddComExitVehicle ( driver ) ;
35386: LD_VAR 0 5
35390: PPUSH
35391: CALL_OW 181
// if Multiplayer then
35395: LD_OWVAR 4
35399: IFFALSE 35448
// begin repeat wait ( 10 ) ;
35401: LD_INT 10
35403: PPUSH
35404: CALL_OW 67
// until not IsInUnit ( driver ) ;
35408: LD_VAR 0 5
35412: PPUSH
35413: CALL_OW 310
35417: NOT
35418: IFFALSE 35401
// if not HasTask ( driver ) then
35420: LD_VAR 0 5
35424: PPUSH
35425: CALL_OW 314
35429: NOT
35430: IFFALSE 35446
// ComEnterUnit ( driver , factory ) ;
35432: LD_VAR 0 5
35436: PPUSH
35437: LD_VAR 0 2
35441: PPUSH
35442: CALL_OW 120
// end else
35446: GO 35462
// AddComEnterUnit ( driver , factory ) ;
35448: LD_VAR 0 5
35452: PPUSH
35453: LD_VAR 0 2
35457: PPUSH
35458: CALL_OW 180
// wait ( 0 0$1 ) ;
35462: LD_INT 35
35464: PPUSH
35465: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
35469: LD_ADDR_EXP 103
35473: PUSH
35474: LD_EXP 103
35478: PUSH
35479: LD_VAR 0 5
35483: DIFF
35484: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
35485: LD_ADDR_EXP 103
35489: PUSH
35490: LD_EXP 103
35494: PUSH
35495: LD_VAR 0 1
35499: DIFF
35500: ST_TO_ADDR
// break ;
35501: GO 35654
// end ; end else
35503: GO 35652
// if GetControl ( vehicle ) = control_remote then
35505: LD_VAR 0 1
35509: PPUSH
35510: CALL_OW 263
35514: PUSH
35515: LD_INT 2
35517: EQUAL
35518: IFFALSE 35604
// begin wait ( 0 0$2 ) ;
35520: LD_INT 70
35522: PPUSH
35523: CALL_OW 67
// repeat wait ( 10 ) ;
35527: LD_INT 10
35529: PPUSH
35530: CALL_OW 67
// Connect ( vehicle ) ;
35534: LD_VAR 0 1
35538: PPUSH
35539: CALL 49663 0 1
// until IsControledBy ( vehicle ) ;
35543: LD_VAR 0 1
35547: PPUSH
35548: CALL_OW 312
35552: IFFALSE 35527
// wait ( 10 ) ;
35554: LD_INT 10
35556: PPUSH
35557: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35561: LD_VAR 0 1
35565: PPUSH
35566: LD_EXP 102
35570: PUSH
35571: LD_VAR 0 4
35575: ARRAY
35576: PUSH
35577: LD_INT 3
35579: ARRAY
35580: PPUSH
35581: LD_EXP 102
35585: PUSH
35586: LD_VAR 0 4
35590: ARRAY
35591: PUSH
35592: LD_INT 4
35594: ARRAY
35595: PPUSH
35596: CALL_OW 111
// break ;
35600: GO 35654
// end else
35602: GO 35652
// begin wait ( 0 0$3 ) ;
35604: LD_INT 105
35606: PPUSH
35607: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35611: LD_VAR 0 1
35615: PPUSH
35616: LD_EXP 102
35620: PUSH
35621: LD_VAR 0 4
35625: ARRAY
35626: PUSH
35627: LD_INT 3
35629: ARRAY
35630: PPUSH
35631: LD_EXP 102
35635: PUSH
35636: LD_VAR 0 4
35640: ARRAY
35641: PUSH
35642: LD_INT 4
35644: ARRAY
35645: PPUSH
35646: CALL_OW 111
// break ;
35650: GO 35654
// end ; end ;
35652: GO 35103
35654: POP
35655: POP
// end ;
35656: LD_VAR 0 3
35660: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35661: LD_INT 0
35663: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35664: LD_VAR 0 1
35668: PUSH
35669: LD_INT 250
35671: EQUAL
35672: IFFALSE 35689
35674: PUSH
35675: LD_VAR 0 2
35679: PPUSH
35680: CALL_OW 264
35684: PUSH
35685: LD_INT 81
35687: EQUAL
35688: AND
35689: IFFALSE 35710
// MinerPlaceMine ( unit , x , y ) ;
35691: LD_VAR 0 2
35695: PPUSH
35696: LD_VAR 0 4
35700: PPUSH
35701: LD_VAR 0 5
35705: PPUSH
35706: CALL 38842 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35710: LD_VAR 0 1
35714: PUSH
35715: LD_INT 251
35717: EQUAL
35718: IFFALSE 35735
35720: PUSH
35721: LD_VAR 0 2
35725: PPUSH
35726: CALL_OW 264
35730: PUSH
35731: LD_INT 81
35733: EQUAL
35734: AND
35735: IFFALSE 35756
// MinerDetonateMine ( unit , x , y ) ;
35737: LD_VAR 0 2
35741: PPUSH
35742: LD_VAR 0 4
35746: PPUSH
35747: LD_VAR 0 5
35751: PPUSH
35752: CALL 39121 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35756: LD_VAR 0 1
35760: PUSH
35761: LD_INT 252
35763: EQUAL
35764: IFFALSE 35781
35766: PUSH
35767: LD_VAR 0 2
35771: PPUSH
35772: CALL_OW 264
35776: PUSH
35777: LD_INT 81
35779: EQUAL
35780: AND
35781: IFFALSE 35802
// MinerCreateMinefield ( unit , x , y ) ;
35783: LD_VAR 0 2
35787: PPUSH
35788: LD_VAR 0 4
35792: PPUSH
35793: LD_VAR 0 5
35797: PPUSH
35798: CALL 39540 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35802: LD_VAR 0 1
35806: PUSH
35807: LD_INT 253
35809: EQUAL
35810: IFFALSE 35827
35812: PUSH
35813: LD_VAR 0 2
35817: PPUSH
35818: CALL_OW 257
35822: PUSH
35823: LD_INT 5
35825: EQUAL
35826: AND
35827: IFFALSE 35848
// ComBinocular ( unit , x , y ) ;
35829: LD_VAR 0 2
35833: PPUSH
35834: LD_VAR 0 4
35838: PPUSH
35839: LD_VAR 0 5
35843: PPUSH
35844: CALL 39915 0 3
// if selectedUnit then
35848: LD_VAR 0 3
35852: IFFALSE 35912
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35854: LD_VAR 0 1
35858: PUSH
35859: LD_INT 254
35861: EQUAL
35862: IFFALSE 35879
35864: PUSH
35865: LD_VAR 0 2
35869: PPUSH
35870: CALL_OW 264
35874: PUSH
35875: LD_INT 99
35877: EQUAL
35878: AND
35879: IFFALSE 35896
35881: PUSH
35882: LD_VAR 0 3
35886: PPUSH
35887: CALL_OW 263
35891: PUSH
35892: LD_INT 3
35894: EQUAL
35895: AND
35896: IFFALSE 35912
// HackDestroyVehicle ( unit , selectedUnit ) ;
35898: LD_VAR 0 2
35902: PPUSH
35903: LD_VAR 0 3
35907: PPUSH
35908: CALL 38202 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35912: LD_VAR 0 1
35916: PUSH
35917: LD_INT 255
35919: EQUAL
35920: IFFALSE 35944
35922: PUSH
35923: LD_VAR 0 2
35927: PPUSH
35928: CALL_OW 264
35932: PUSH
35933: LD_INT 14
35935: PUSH
35936: LD_INT 53
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: IN
35943: AND
35944: IFFALSE 35962
35946: PUSH
35947: LD_VAR 0 4
35951: PPUSH
35952: LD_VAR 0 5
35956: PPUSH
35957: CALL_OW 488
35961: AND
35962: IFFALSE 35986
// CutTreeXYR ( unit , x , y , 12 ) ;
35964: LD_VAR 0 2
35968: PPUSH
35969: LD_VAR 0 4
35973: PPUSH
35974: LD_VAR 0 5
35978: PPUSH
35979: LD_INT 12
35981: PPUSH
35982: CALL 36177 0 4
// if cmd = 256 then
35986: LD_VAR 0 1
35990: PUSH
35991: LD_INT 256
35993: EQUAL
35994: IFFALSE 36015
// SetFactoryWaypoint ( unit , x , y ) ;
35996: LD_VAR 0 2
36000: PPUSH
36001: LD_VAR 0 4
36005: PPUSH
36006: LD_VAR 0 5
36010: PPUSH
36011: CALL 33537 0 3
// if cmd = 257 then
36015: LD_VAR 0 1
36019: PUSH
36020: LD_INT 257
36022: EQUAL
36023: IFFALSE 36044
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36025: LD_VAR 0 2
36029: PPUSH
36030: LD_VAR 0 4
36034: PPUSH
36035: LD_VAR 0 5
36039: PPUSH
36040: CALL 34033 0 3
// if cmd = 258 then
36044: LD_VAR 0 1
36048: PUSH
36049: LD_INT 258
36051: EQUAL
36052: IFFALSE 36076
// BurnTreeXYR ( unit , x , y , 8 ) ;
36054: LD_VAR 0 2
36058: PPUSH
36059: LD_VAR 0 4
36063: PPUSH
36064: LD_VAR 0 5
36068: PPUSH
36069: LD_INT 8
36071: PPUSH
36072: CALL 36577 0 4
// end ;
36076: LD_VAR 0 6
36080: RET
// export function ComRadiation ( un ) ; var eff ; begin
36081: LD_INT 0
36083: PPUSH
36084: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36085: LD_VAR 0 1
36089: PPUSH
36090: CALL_OW 264
36094: PUSH
36095: LD_INT 91
36097: NONEQUAL
36098: IFFALSE 36102
// exit ;
36100: GO 36172
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36102: LD_INT 68
36104: PPUSH
36105: LD_VAR 0 1
36109: PPUSH
36110: CALL_OW 255
36114: PPUSH
36115: CALL_OW 321
36119: PUSH
36120: LD_INT 2
36122: EQUAL
36123: IFFALSE 36135
// eff := 50 else
36125: LD_ADDR_VAR 0 3
36129: PUSH
36130: LD_INT 50
36132: ST_TO_ADDR
36133: GO 36143
// eff := 25 ;
36135: LD_ADDR_VAR 0 3
36139: PUSH
36140: LD_INT 25
36142: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36143: LD_VAR 0 1
36147: PPUSH
36148: CALL_OW 250
36152: PPUSH
36153: LD_VAR 0 1
36157: PPUSH
36158: CALL_OW 251
36162: PPUSH
36163: LD_VAR 0 3
36167: PPUSH
36168: CALL_OW 495
// end ;
36172: LD_VAR 0 2
36176: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36177: LD_INT 0
36179: PPUSH
36180: PPUSH
36181: PPUSH
36182: PPUSH
36183: PPUSH
36184: PPUSH
36185: PPUSH
36186: PPUSH
36187: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36188: LD_VAR 0 1
36192: PPUSH
36193: CALL_OW 302
36197: NOT
36198: IFTRUE 36217
36200: PUSH
36201: LD_VAR 0 2
36205: PPUSH
36206: LD_VAR 0 3
36210: PPUSH
36211: CALL_OW 488
36215: NOT
36216: OR
36217: IFTRUE 36226
36219: PUSH
36220: LD_VAR 0 4
36224: NOT
36225: OR
36226: IFFALSE 36230
// exit ;
36228: GO 36572
// list := [ ] ;
36230: LD_ADDR_VAR 0 13
36234: PUSH
36235: EMPTY
36236: ST_TO_ADDR
// if x - r < 0 then
36237: LD_VAR 0 2
36241: PUSH
36242: LD_VAR 0 4
36246: MINUS
36247: PUSH
36248: LD_INT 0
36250: LESS
36251: IFFALSE 36263
// min_x := 0 else
36253: LD_ADDR_VAR 0 7
36257: PUSH
36258: LD_INT 0
36260: ST_TO_ADDR
36261: GO 36279
// min_x := x - r ;
36263: LD_ADDR_VAR 0 7
36267: PUSH
36268: LD_VAR 0 2
36272: PUSH
36273: LD_VAR 0 4
36277: MINUS
36278: ST_TO_ADDR
// if y - r < 0 then
36279: LD_VAR 0 3
36283: PUSH
36284: LD_VAR 0 4
36288: MINUS
36289: PUSH
36290: LD_INT 0
36292: LESS
36293: IFFALSE 36305
// min_y := 0 else
36295: LD_ADDR_VAR 0 8
36299: PUSH
36300: LD_INT 0
36302: ST_TO_ADDR
36303: GO 36321
// min_y := y - r ;
36305: LD_ADDR_VAR 0 8
36309: PUSH
36310: LD_VAR 0 3
36314: PUSH
36315: LD_VAR 0 4
36319: MINUS
36320: ST_TO_ADDR
// max_x := x + r ;
36321: LD_ADDR_VAR 0 9
36325: PUSH
36326: LD_VAR 0 2
36330: PUSH
36331: LD_VAR 0 4
36335: PLUS
36336: ST_TO_ADDR
// max_y := y + r ;
36337: LD_ADDR_VAR 0 10
36341: PUSH
36342: LD_VAR 0 3
36346: PUSH
36347: LD_VAR 0 4
36351: PLUS
36352: ST_TO_ADDR
// for _x = min_x to max_x do
36353: LD_ADDR_VAR 0 11
36357: PUSH
36358: DOUBLE
36359: LD_VAR 0 7
36363: DEC
36364: ST_TO_ADDR
36365: LD_VAR 0 9
36369: PUSH
36370: FOR_TO
36371: IFFALSE 36490
// for _y = min_y to max_y do
36373: LD_ADDR_VAR 0 12
36377: PUSH
36378: DOUBLE
36379: LD_VAR 0 8
36383: DEC
36384: ST_TO_ADDR
36385: LD_VAR 0 10
36389: PUSH
36390: FOR_TO
36391: IFFALSE 36486
// begin if not ValidHex ( _x , _y ) then
36393: LD_VAR 0 11
36397: PPUSH
36398: LD_VAR 0 12
36402: PPUSH
36403: CALL_OW 488
36407: NOT
36408: IFFALSE 36412
// continue ;
36410: GO 36390
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36412: LD_VAR 0 11
36416: PPUSH
36417: LD_VAR 0 12
36421: PPUSH
36422: CALL_OW 351
36426: IFFALSE 36444
36428: PUSH
36429: LD_VAR 0 11
36433: PPUSH
36434: LD_VAR 0 12
36438: PPUSH
36439: CALL_OW 554
36443: AND
36444: IFFALSE 36484
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36446: LD_ADDR_VAR 0 13
36450: PUSH
36451: LD_VAR 0 13
36455: PPUSH
36456: LD_VAR 0 13
36460: PUSH
36461: LD_INT 1
36463: PLUS
36464: PPUSH
36465: LD_VAR 0 11
36469: PUSH
36470: LD_VAR 0 12
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PPUSH
36479: CALL_OW 2
36483: ST_TO_ADDR
// end ;
36484: GO 36390
36486: POP
36487: POP
36488: GO 36370
36490: POP
36491: POP
// if not list then
36492: LD_VAR 0 13
36496: NOT
36497: IFFALSE 36501
// exit ;
36499: GO 36572
// for i in list do
36501: LD_ADDR_VAR 0 6
36505: PUSH
36506: LD_VAR 0 13
36510: PUSH
36511: FOR_IN
36512: IFFALSE 36570
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36514: LD_VAR 0 1
36518: PPUSH
36519: LD_STRING M
36521: PUSH
36522: LD_VAR 0 6
36526: PUSH
36527: LD_INT 1
36529: ARRAY
36530: PUSH
36531: LD_VAR 0 6
36535: PUSH
36536: LD_INT 2
36538: ARRAY
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: PUSH
36561: EMPTY
36562: LIST
36563: PPUSH
36564: CALL_OW 447
36568: GO 36511
36570: POP
36571: POP
// end ;
36572: LD_VAR 0 5
36576: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36577: LD_INT 0
36579: PPUSH
36580: PPUSH
36581: PPUSH
36582: PPUSH
36583: PPUSH
36584: PPUSH
36585: PPUSH
36586: PPUSH
36587: PPUSH
36588: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36589: LD_VAR 0 1
36593: PPUSH
36594: CALL_OW 302
36598: NOT
36599: IFTRUE 36618
36601: PUSH
36602: LD_VAR 0 2
36606: PPUSH
36607: LD_VAR 0 3
36611: PPUSH
36612: CALL_OW 488
36616: NOT
36617: OR
36618: IFTRUE 36627
36620: PUSH
36621: LD_VAR 0 4
36625: NOT
36626: OR
36627: IFFALSE 36631
// exit ;
36629: GO 37148
// list := [ ] ;
36631: LD_ADDR_VAR 0 13
36635: PUSH
36636: EMPTY
36637: ST_TO_ADDR
// if x - r < 0 then
36638: LD_VAR 0 2
36642: PUSH
36643: LD_VAR 0 4
36647: MINUS
36648: PUSH
36649: LD_INT 0
36651: LESS
36652: IFFALSE 36664
// min_x := 0 else
36654: LD_ADDR_VAR 0 7
36658: PUSH
36659: LD_INT 0
36661: ST_TO_ADDR
36662: GO 36680
// min_x := x - r ;
36664: LD_ADDR_VAR 0 7
36668: PUSH
36669: LD_VAR 0 2
36673: PUSH
36674: LD_VAR 0 4
36678: MINUS
36679: ST_TO_ADDR
// if y - r < 0 then
36680: LD_VAR 0 3
36684: PUSH
36685: LD_VAR 0 4
36689: MINUS
36690: PUSH
36691: LD_INT 0
36693: LESS
36694: IFFALSE 36706
// min_y := 0 else
36696: LD_ADDR_VAR 0 8
36700: PUSH
36701: LD_INT 0
36703: ST_TO_ADDR
36704: GO 36722
// min_y := y - r ;
36706: LD_ADDR_VAR 0 8
36710: PUSH
36711: LD_VAR 0 3
36715: PUSH
36716: LD_VAR 0 4
36720: MINUS
36721: ST_TO_ADDR
// max_x := x + r ;
36722: LD_ADDR_VAR 0 9
36726: PUSH
36727: LD_VAR 0 2
36731: PUSH
36732: LD_VAR 0 4
36736: PLUS
36737: ST_TO_ADDR
// max_y := y + r ;
36738: LD_ADDR_VAR 0 10
36742: PUSH
36743: LD_VAR 0 3
36747: PUSH
36748: LD_VAR 0 4
36752: PLUS
36753: ST_TO_ADDR
// for _x = min_x to max_x do
36754: LD_ADDR_VAR 0 11
36758: PUSH
36759: DOUBLE
36760: LD_VAR 0 7
36764: DEC
36765: ST_TO_ADDR
36766: LD_VAR 0 9
36770: PUSH
36771: FOR_TO
36772: IFFALSE 36891
// for _y = min_y to max_y do
36774: LD_ADDR_VAR 0 12
36778: PUSH
36779: DOUBLE
36780: LD_VAR 0 8
36784: DEC
36785: ST_TO_ADDR
36786: LD_VAR 0 10
36790: PUSH
36791: FOR_TO
36792: IFFALSE 36887
// begin if not ValidHex ( _x , _y ) then
36794: LD_VAR 0 11
36798: PPUSH
36799: LD_VAR 0 12
36803: PPUSH
36804: CALL_OW 488
36808: NOT
36809: IFFALSE 36813
// continue ;
36811: GO 36791
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36813: LD_VAR 0 11
36817: PPUSH
36818: LD_VAR 0 12
36822: PPUSH
36823: CALL_OW 351
36827: IFFALSE 36845
36829: PUSH
36830: LD_VAR 0 11
36834: PPUSH
36835: LD_VAR 0 12
36839: PPUSH
36840: CALL_OW 554
36844: AND
36845: IFFALSE 36885
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36847: LD_ADDR_VAR 0 13
36851: PUSH
36852: LD_VAR 0 13
36856: PPUSH
36857: LD_VAR 0 13
36861: PUSH
36862: LD_INT 1
36864: PLUS
36865: PPUSH
36866: LD_VAR 0 11
36870: PUSH
36871: LD_VAR 0 12
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PPUSH
36880: CALL_OW 2
36884: ST_TO_ADDR
// end ;
36885: GO 36791
36887: POP
36888: POP
36889: GO 36771
36891: POP
36892: POP
// if not list then
36893: LD_VAR 0 13
36897: NOT
36898: IFFALSE 36902
// exit ;
36900: GO 37148
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36902: LD_ADDR_VAR 0 13
36906: PUSH
36907: LD_VAR 0 1
36911: PPUSH
36912: LD_VAR 0 13
36916: PPUSH
36917: LD_INT 1
36919: PPUSH
36920: LD_INT 1
36922: PPUSH
36923: CALL 46791 0 4
36927: ST_TO_ADDR
// ComStop ( flame ) ;
36928: LD_VAR 0 1
36932: PPUSH
36933: CALL_OW 141
// for i in list do
36937: LD_ADDR_VAR 0 6
36941: PUSH
36942: LD_VAR 0 13
36946: PUSH
36947: FOR_IN
36948: IFFALSE 36979
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36950: LD_VAR 0 1
36954: PPUSH
36955: LD_VAR 0 6
36959: PUSH
36960: LD_INT 1
36962: ARRAY
36963: PPUSH
36964: LD_VAR 0 6
36968: PUSH
36969: LD_INT 2
36971: ARRAY
36972: PPUSH
36973: CALL_OW 176
36977: GO 36947
36979: POP
36980: POP
// repeat wait ( 0 0$1 ) ;
36981: LD_INT 35
36983: PPUSH
36984: CALL_OW 67
// task := GetTaskList ( flame ) ;
36988: LD_ADDR_VAR 0 14
36992: PUSH
36993: LD_VAR 0 1
36997: PPUSH
36998: CALL_OW 437
37002: ST_TO_ADDR
// if not task then
37003: LD_VAR 0 14
37007: NOT
37008: IFFALSE 37012
// exit ;
37010: GO 37148
// if task [ 1 ] [ 1 ] <> | then
37012: LD_VAR 0 14
37016: PUSH
37017: LD_INT 1
37019: ARRAY
37020: PUSH
37021: LD_INT 1
37023: ARRAY
37024: PUSH
37025: LD_STRING |
37027: NONEQUAL
37028: IFFALSE 37032
// exit ;
37030: GO 37148
// _x := task [ 1 ] [ 2 ] ;
37032: LD_ADDR_VAR 0 11
37036: PUSH
37037: LD_VAR 0 14
37041: PUSH
37042: LD_INT 1
37044: ARRAY
37045: PUSH
37046: LD_INT 2
37048: ARRAY
37049: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37050: LD_ADDR_VAR 0 12
37054: PUSH
37055: LD_VAR 0 14
37059: PUSH
37060: LD_INT 1
37062: ARRAY
37063: PUSH
37064: LD_INT 3
37066: ARRAY
37067: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37068: LD_VAR 0 11
37072: PPUSH
37073: LD_VAR 0 12
37077: PPUSH
37078: CALL_OW 351
37082: NOT
37083: IFTRUE 37102
37085: PUSH
37086: LD_VAR 0 11
37090: PPUSH
37091: LD_VAR 0 12
37095: PPUSH
37096: CALL_OW 554
37100: NOT
37101: OR
37102: IFFALSE 37136
// begin task := Delete ( task , 1 ) ;
37104: LD_ADDR_VAR 0 14
37108: PUSH
37109: LD_VAR 0 14
37113: PPUSH
37114: LD_INT 1
37116: PPUSH
37117: CALL_OW 3
37121: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37122: LD_VAR 0 1
37126: PPUSH
37127: LD_VAR 0 14
37131: PPUSH
37132: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37136: LD_VAR 0 1
37140: PPUSH
37141: CALL_OW 314
37145: NOT
37146: IFFALSE 36981
// end ;
37148: LD_VAR 0 5
37152: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37153: LD_EXP 106
37157: NOT
37158: IFFALSE 37208
37160: GO 37162
37162: DISABLE
// begin initHack := true ;
37163: LD_ADDR_EXP 106
37167: PUSH
37168: LD_INT 1
37170: ST_TO_ADDR
// hackTanks := [ ] ;
37171: LD_ADDR_EXP 107
37175: PUSH
37176: EMPTY
37177: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37178: LD_ADDR_EXP 108
37182: PUSH
37183: EMPTY
37184: ST_TO_ADDR
// hackLimit := 3 ;
37185: LD_ADDR_EXP 109
37189: PUSH
37190: LD_INT 3
37192: ST_TO_ADDR
// hackDist := 12 ;
37193: LD_ADDR_EXP 110
37197: PUSH
37198: LD_INT 12
37200: ST_TO_ADDR
// hackCounter := [ ] ;
37201: LD_ADDR_EXP 111
37205: PUSH
37206: EMPTY
37207: ST_TO_ADDR
// end ;
37208: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37209: LD_EXP 106
37213: IFFALSE 37231
37215: PUSH
37216: LD_INT 34
37218: PUSH
37219: LD_INT 99
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PPUSH
37226: CALL_OW 69
37230: AND
37231: IFFALSE 37484
37233: GO 37235
37235: DISABLE
37236: LD_INT 0
37238: PPUSH
37239: PPUSH
// begin enable ;
37240: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37241: LD_ADDR_VAR 0 1
37245: PUSH
37246: LD_INT 34
37248: PUSH
37249: LD_INT 99
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PPUSH
37256: CALL_OW 69
37260: PUSH
37261: FOR_IN
37262: IFFALSE 37482
// begin if not i in hackTanks then
37264: LD_VAR 0 1
37268: PUSH
37269: LD_EXP 107
37273: IN
37274: NOT
37275: IFFALSE 37358
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37277: LD_ADDR_EXP 107
37281: PUSH
37282: LD_EXP 107
37286: PPUSH
37287: LD_EXP 107
37291: PUSH
37292: LD_INT 1
37294: PLUS
37295: PPUSH
37296: LD_VAR 0 1
37300: PPUSH
37301: CALL_OW 1
37305: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37306: LD_ADDR_EXP 108
37310: PUSH
37311: LD_EXP 108
37315: PPUSH
37316: LD_EXP 108
37320: PUSH
37321: LD_INT 1
37323: PLUS
37324: PPUSH
37325: EMPTY
37326: PPUSH
37327: CALL_OW 1
37331: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37332: LD_ADDR_EXP 111
37336: PUSH
37337: LD_EXP 111
37341: PPUSH
37342: LD_EXP 111
37346: PUSH
37347: LD_INT 1
37349: PLUS
37350: PPUSH
37351: EMPTY
37352: PPUSH
37353: CALL_OW 1
37357: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37358: LD_VAR 0 1
37362: PPUSH
37363: CALL_OW 302
37367: NOT
37368: IFFALSE 37381
// begin HackUnlinkAll ( i ) ;
37370: LD_VAR 0 1
37374: PPUSH
37375: CALL 37487 0 1
// continue ;
37379: GO 37261
// end ; HackCheckCapturedStatus ( i ) ;
37381: LD_VAR 0 1
37385: PPUSH
37386: CALL 37932 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37390: LD_ADDR_VAR 0 2
37394: PUSH
37395: LD_INT 81
37397: PUSH
37398: LD_VAR 0 1
37402: PPUSH
37403: CALL_OW 255
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 33
37414: PUSH
37415: LD_INT 3
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 91
37424: PUSH
37425: LD_VAR 0 1
37429: PUSH
37430: LD_EXP 110
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 50
37442: PUSH
37443: EMPTY
37444: LIST
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: PPUSH
37452: CALL_OW 69
37456: ST_TO_ADDR
// if not tmp then
37457: LD_VAR 0 2
37461: NOT
37462: IFFALSE 37466
// continue ;
37464: GO 37261
// HackLink ( i , tmp ) ;
37466: LD_VAR 0 1
37470: PPUSH
37471: LD_VAR 0 2
37475: PPUSH
37476: CALL 37623 0 2
// end ;
37480: GO 37261
37482: POP
37483: POP
// end ;
37484: PPOPN 2
37486: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37487: LD_INT 0
37489: PPUSH
37490: PPUSH
37491: PPUSH
// if not hack in hackTanks then
37492: LD_VAR 0 1
37496: PUSH
37497: LD_EXP 107
37501: IN
37502: NOT
37503: IFFALSE 37507
// exit ;
37505: GO 37618
// index := GetElementIndex ( hackTanks , hack ) ;
37507: LD_ADDR_VAR 0 4
37511: PUSH
37512: LD_EXP 107
37516: PPUSH
37517: LD_VAR 0 1
37521: PPUSH
37522: CALL 46086 0 2
37526: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37527: LD_EXP 108
37531: PUSH
37532: LD_VAR 0 4
37536: ARRAY
37537: IFFALSE 37618
// begin for i in hackTanksCaptured [ index ] do
37539: LD_ADDR_VAR 0 3
37543: PUSH
37544: LD_EXP 108
37548: PUSH
37549: LD_VAR 0 4
37553: ARRAY
37554: PUSH
37555: FOR_IN
37556: IFFALSE 37582
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37558: LD_VAR 0 3
37562: PUSH
37563: LD_INT 1
37565: ARRAY
37566: PPUSH
37567: LD_VAR 0 3
37571: PUSH
37572: LD_INT 2
37574: ARRAY
37575: PPUSH
37576: CALL_OW 235
37580: GO 37555
37582: POP
37583: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37584: LD_ADDR_EXP 108
37588: PUSH
37589: LD_EXP 108
37593: PPUSH
37594: LD_VAR 0 4
37598: PPUSH
37599: EMPTY
37600: PPUSH
37601: CALL_OW 1
37605: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37606: LD_VAR 0 1
37610: PPUSH
37611: LD_INT 0
37613: PPUSH
37614: CALL_OW 505
// end ; end ;
37618: LD_VAR 0 2
37622: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37623: LD_INT 0
37625: PPUSH
37626: PPUSH
37627: PPUSH
// if not hack in hackTanks or not vehicles then
37628: LD_VAR 0 1
37632: PUSH
37633: LD_EXP 107
37637: IN
37638: NOT
37639: IFTRUE 37648
37641: PUSH
37642: LD_VAR 0 2
37646: NOT
37647: OR
37648: IFFALSE 37652
// exit ;
37650: GO 37927
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37652: LD_ADDR_VAR 0 2
37656: PUSH
37657: LD_VAR 0 1
37661: PPUSH
37662: LD_VAR 0 2
37666: PPUSH
37667: LD_INT 1
37669: PPUSH
37670: LD_INT 1
37672: PPUSH
37673: CALL 46738 0 4
37677: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37678: LD_ADDR_VAR 0 5
37682: PUSH
37683: LD_EXP 107
37687: PPUSH
37688: LD_VAR 0 1
37692: PPUSH
37693: CALL 46086 0 2
37697: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37698: LD_EXP 108
37702: PUSH
37703: LD_VAR 0 5
37707: ARRAY
37708: PUSH
37709: LD_EXP 109
37713: LESS
37714: IFFALSE 37903
// begin for i := 1 to vehicles do
37716: LD_ADDR_VAR 0 4
37720: PUSH
37721: DOUBLE
37722: LD_INT 1
37724: DEC
37725: ST_TO_ADDR
37726: LD_VAR 0 2
37730: PUSH
37731: FOR_TO
37732: IFFALSE 37901
// begin if hackTanksCaptured [ index ] = hackLimit then
37734: LD_EXP 108
37738: PUSH
37739: LD_VAR 0 5
37743: ARRAY
37744: PUSH
37745: LD_EXP 109
37749: EQUAL
37750: IFFALSE 37754
// break ;
37752: GO 37901
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37754: LD_ADDR_EXP 111
37758: PUSH
37759: LD_EXP 111
37763: PPUSH
37764: LD_VAR 0 5
37768: PPUSH
37769: LD_EXP 111
37773: PUSH
37774: LD_VAR 0 5
37778: ARRAY
37779: PUSH
37780: LD_INT 1
37782: PLUS
37783: PPUSH
37784: CALL_OW 1
37788: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37789: LD_ADDR_EXP 108
37793: PUSH
37794: LD_EXP 108
37798: PPUSH
37799: LD_VAR 0 5
37803: PUSH
37804: LD_EXP 108
37808: PUSH
37809: LD_VAR 0 5
37813: ARRAY
37814: PUSH
37815: LD_INT 1
37817: PLUS
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PPUSH
37823: LD_VAR 0 2
37827: PUSH
37828: LD_VAR 0 4
37832: ARRAY
37833: PUSH
37834: LD_VAR 0 2
37838: PUSH
37839: LD_VAR 0 4
37843: ARRAY
37844: PPUSH
37845: CALL_OW 255
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PPUSH
37854: CALL 46303 0 3
37858: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37859: LD_VAR 0 2
37863: PUSH
37864: LD_VAR 0 4
37868: ARRAY
37869: PPUSH
37870: LD_VAR 0 1
37874: PPUSH
37875: CALL_OW 255
37879: PPUSH
37880: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37884: LD_VAR 0 2
37888: PUSH
37889: LD_VAR 0 4
37893: ARRAY
37894: PPUSH
37895: CALL_OW 141
// end ;
37899: GO 37731
37901: POP
37902: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37903: LD_VAR 0 1
37907: PPUSH
37908: LD_EXP 108
37912: PUSH
37913: LD_VAR 0 5
37917: ARRAY
37918: PUSH
37919: LD_INT 0
37921: PLUS
37922: PPUSH
37923: CALL_OW 505
// end ;
37927: LD_VAR 0 3
37931: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37932: LD_INT 0
37934: PPUSH
37935: PPUSH
37936: PPUSH
37937: PPUSH
// if not hack in hackTanks then
37938: LD_VAR 0 1
37942: PUSH
37943: LD_EXP 107
37947: IN
37948: NOT
37949: IFFALSE 37953
// exit ;
37951: GO 38197
// index := GetElementIndex ( hackTanks , hack ) ;
37953: LD_ADDR_VAR 0 4
37957: PUSH
37958: LD_EXP 107
37962: PPUSH
37963: LD_VAR 0 1
37967: PPUSH
37968: CALL 46086 0 2
37972: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37973: LD_ADDR_VAR 0 3
37977: PUSH
37978: DOUBLE
37979: LD_EXP 108
37983: PUSH
37984: LD_VAR 0 4
37988: ARRAY
37989: INC
37990: ST_TO_ADDR
37991: LD_INT 1
37993: PUSH
37994: FOR_DOWNTO
37995: IFFALSE 38171
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37997: LD_ADDR_VAR 0 5
38001: PUSH
38002: LD_EXP 108
38006: PUSH
38007: LD_VAR 0 4
38011: ARRAY
38012: PUSH
38013: LD_VAR 0 3
38017: ARRAY
38018: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38019: LD_VAR 0 5
38023: PUSH
38024: LD_INT 1
38026: ARRAY
38027: PPUSH
38028: CALL_OW 302
38032: NOT
38033: IFTRUE 38061
38035: PUSH
38036: LD_VAR 0 5
38040: PUSH
38041: LD_INT 1
38043: ARRAY
38044: PPUSH
38045: CALL_OW 255
38049: PUSH
38050: LD_VAR 0 1
38054: PPUSH
38055: CALL_OW 255
38059: NONEQUAL
38060: OR
38061: IFFALSE 38169
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38063: LD_VAR 0 5
38067: PUSH
38068: LD_INT 1
38070: ARRAY
38071: PPUSH
38072: CALL_OW 305
38076: IFFALSE 38104
38078: PUSH
38079: LD_VAR 0 5
38083: PUSH
38084: LD_INT 1
38086: ARRAY
38087: PPUSH
38088: CALL_OW 255
38092: PUSH
38093: LD_VAR 0 1
38097: PPUSH
38098: CALL_OW 255
38102: EQUAL
38103: AND
38104: IFFALSE 38128
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38106: LD_VAR 0 5
38110: PUSH
38111: LD_INT 1
38113: ARRAY
38114: PPUSH
38115: LD_VAR 0 5
38119: PUSH
38120: LD_INT 2
38122: ARRAY
38123: PPUSH
38124: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38128: LD_ADDR_EXP 108
38132: PUSH
38133: LD_EXP 108
38137: PPUSH
38138: LD_VAR 0 4
38142: PPUSH
38143: LD_EXP 108
38147: PUSH
38148: LD_VAR 0 4
38152: ARRAY
38153: PPUSH
38154: LD_VAR 0 3
38158: PPUSH
38159: CALL_OW 3
38163: PPUSH
38164: CALL_OW 1
38168: ST_TO_ADDR
// end ; end ;
38169: GO 37994
38171: POP
38172: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38173: LD_VAR 0 1
38177: PPUSH
38178: LD_EXP 108
38182: PUSH
38183: LD_VAR 0 4
38187: ARRAY
38188: PUSH
38189: LD_INT 0
38191: PLUS
38192: PPUSH
38193: CALL_OW 505
// end ;
38197: LD_VAR 0 2
38201: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38202: LD_INT 0
38204: PPUSH
38205: PPUSH
38206: PPUSH
38207: PPUSH
// if not hack in hackTanks then
38208: LD_VAR 0 1
38212: PUSH
38213: LD_EXP 107
38217: IN
38218: NOT
38219: IFFALSE 38223
// exit ;
38221: GO 38308
// index := GetElementIndex ( hackTanks , hack ) ;
38223: LD_ADDR_VAR 0 5
38227: PUSH
38228: LD_EXP 107
38232: PPUSH
38233: LD_VAR 0 1
38237: PPUSH
38238: CALL 46086 0 2
38242: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38243: LD_ADDR_VAR 0 4
38247: PUSH
38248: DOUBLE
38249: LD_INT 1
38251: DEC
38252: ST_TO_ADDR
38253: LD_EXP 108
38257: PUSH
38258: LD_VAR 0 5
38262: ARRAY
38263: PUSH
38264: FOR_TO
38265: IFFALSE 38306
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38267: LD_EXP 108
38271: PUSH
38272: LD_VAR 0 5
38276: ARRAY
38277: PUSH
38278: LD_VAR 0 4
38282: ARRAY
38283: PUSH
38284: LD_INT 1
38286: ARRAY
38287: PUSH
38288: LD_VAR 0 2
38292: EQUAL
38293: IFFALSE 38304
// KillUnit ( vehicle ) ;
38295: LD_VAR 0 2
38299: PPUSH
38300: CALL_OW 66
38304: GO 38264
38306: POP
38307: POP
// end ;
38308: LD_VAR 0 3
38312: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38313: LD_EXP 112
38317: NOT
38318: IFFALSE 38353
38320: GO 38322
38322: DISABLE
// begin initMiner := true ;
38323: LD_ADDR_EXP 112
38327: PUSH
38328: LD_INT 1
38330: ST_TO_ADDR
// minersList := [ ] ;
38331: LD_ADDR_EXP 113
38335: PUSH
38336: EMPTY
38337: ST_TO_ADDR
// minerMinesList := [ ] ;
38338: LD_ADDR_EXP 114
38342: PUSH
38343: EMPTY
38344: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38345: LD_ADDR_EXP 115
38349: PUSH
38350: LD_INT 5
38352: ST_TO_ADDR
// end ;
38353: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38354: LD_EXP 112
38358: IFFALSE 38376
38360: PUSH
38361: LD_INT 34
38363: PUSH
38364: LD_INT 81
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PPUSH
38371: CALL_OW 69
38375: AND
38376: IFFALSE 38839
38378: GO 38380
38380: DISABLE
38381: LD_INT 0
38383: PPUSH
38384: PPUSH
38385: PPUSH
38386: PPUSH
// begin enable ;
38387: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38388: LD_ADDR_VAR 0 1
38392: PUSH
38393: LD_INT 34
38395: PUSH
38396: LD_INT 81
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PPUSH
38403: CALL_OW 69
38407: PUSH
38408: FOR_IN
38409: IFFALSE 38481
// begin if not i in minersList then
38411: LD_VAR 0 1
38415: PUSH
38416: LD_EXP 113
38420: IN
38421: NOT
38422: IFFALSE 38479
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38424: LD_ADDR_EXP 113
38428: PUSH
38429: LD_EXP 113
38433: PPUSH
38434: LD_EXP 113
38438: PUSH
38439: LD_INT 1
38441: PLUS
38442: PPUSH
38443: LD_VAR 0 1
38447: PPUSH
38448: CALL_OW 1
38452: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38453: LD_ADDR_EXP 114
38457: PUSH
38458: LD_EXP 114
38462: PPUSH
38463: LD_EXP 114
38467: PUSH
38468: LD_INT 1
38470: PLUS
38471: PPUSH
38472: EMPTY
38473: PPUSH
38474: CALL_OW 1
38478: ST_TO_ADDR
// end end ;
38479: GO 38408
38481: POP
38482: POP
// for i := minerMinesList downto 1 do
38483: LD_ADDR_VAR 0 1
38487: PUSH
38488: DOUBLE
38489: LD_EXP 114
38493: INC
38494: ST_TO_ADDR
38495: LD_INT 1
38497: PUSH
38498: FOR_DOWNTO
38499: IFFALSE 38837
// begin if IsLive ( minersList [ i ] ) then
38501: LD_EXP 113
38505: PUSH
38506: LD_VAR 0 1
38510: ARRAY
38511: PPUSH
38512: CALL_OW 300
38516: IFFALSE 38544
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38518: LD_EXP 113
38522: PUSH
38523: LD_VAR 0 1
38527: ARRAY
38528: PPUSH
38529: LD_EXP 114
38533: PUSH
38534: LD_VAR 0 1
38538: ARRAY
38539: PPUSH
38540: CALL_OW 505
// if not minerMinesList [ i ] then
38544: LD_EXP 114
38548: PUSH
38549: LD_VAR 0 1
38553: ARRAY
38554: NOT
38555: IFFALSE 38559
// continue ;
38557: GO 38498
// for j := minerMinesList [ i ] downto 1 do
38559: LD_ADDR_VAR 0 2
38563: PUSH
38564: DOUBLE
38565: LD_EXP 114
38569: PUSH
38570: LD_VAR 0 1
38574: ARRAY
38575: INC
38576: ST_TO_ADDR
38577: LD_INT 1
38579: PUSH
38580: FOR_DOWNTO
38581: IFFALSE 38833
// begin side := GetSide ( minersList [ i ] ) ;
38583: LD_ADDR_VAR 0 3
38587: PUSH
38588: LD_EXP 113
38592: PUSH
38593: LD_VAR 0 1
38597: ARRAY
38598: PPUSH
38599: CALL_OW 255
38603: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38604: LD_ADDR_VAR 0 4
38608: PUSH
38609: LD_EXP 114
38613: PUSH
38614: LD_VAR 0 1
38618: ARRAY
38619: PUSH
38620: LD_VAR 0 2
38624: ARRAY
38625: PUSH
38626: LD_INT 1
38628: ARRAY
38629: PPUSH
38630: LD_EXP 114
38634: PUSH
38635: LD_VAR 0 1
38639: ARRAY
38640: PUSH
38641: LD_VAR 0 2
38645: ARRAY
38646: PUSH
38647: LD_INT 2
38649: ARRAY
38650: PPUSH
38651: CALL_OW 428
38655: ST_TO_ADDR
// if not tmp then
38656: LD_VAR 0 4
38660: NOT
38661: IFFALSE 38665
// continue ;
38663: GO 38580
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38665: LD_VAR 0 4
38669: PUSH
38670: LD_INT 81
38672: PUSH
38673: LD_VAR 0 3
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PPUSH
38682: CALL_OW 69
38686: IN
38687: IFFALSE 38737
38689: PUSH
38690: LD_EXP 114
38694: PUSH
38695: LD_VAR 0 1
38699: ARRAY
38700: PUSH
38701: LD_VAR 0 2
38705: ARRAY
38706: PUSH
38707: LD_INT 1
38709: ARRAY
38710: PPUSH
38711: LD_EXP 114
38715: PUSH
38716: LD_VAR 0 1
38720: ARRAY
38721: PUSH
38722: LD_VAR 0 2
38726: ARRAY
38727: PUSH
38728: LD_INT 2
38730: ARRAY
38731: PPUSH
38732: CALL_OW 458
38736: AND
38737: IFFALSE 38831
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38739: LD_EXP 114
38743: PUSH
38744: LD_VAR 0 1
38748: ARRAY
38749: PUSH
38750: LD_VAR 0 2
38754: ARRAY
38755: PUSH
38756: LD_INT 1
38758: ARRAY
38759: PPUSH
38760: LD_EXP 114
38764: PUSH
38765: LD_VAR 0 1
38769: ARRAY
38770: PUSH
38771: LD_VAR 0 2
38775: ARRAY
38776: PUSH
38777: LD_INT 2
38779: ARRAY
38780: PPUSH
38781: LD_VAR 0 3
38785: PPUSH
38786: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38790: LD_ADDR_EXP 114
38794: PUSH
38795: LD_EXP 114
38799: PPUSH
38800: LD_VAR 0 1
38804: PPUSH
38805: LD_EXP 114
38809: PUSH
38810: LD_VAR 0 1
38814: ARRAY
38815: PPUSH
38816: LD_VAR 0 2
38820: PPUSH
38821: CALL_OW 3
38825: PPUSH
38826: CALL_OW 1
38830: ST_TO_ADDR
// end ; end ;
38831: GO 38580
38833: POP
38834: POP
// end ;
38835: GO 38498
38837: POP
38838: POP
// end ;
38839: PPOPN 4
38841: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38842: LD_INT 0
38844: PPUSH
38845: PPUSH
// result := false ;
38846: LD_ADDR_VAR 0 4
38850: PUSH
38851: LD_INT 0
38853: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38854: LD_VAR 0 1
38858: PPUSH
38859: CALL_OW 264
38863: PUSH
38864: LD_INT 81
38866: EQUAL
38867: NOT
38868: IFFALSE 38872
// exit ;
38870: GO 39116
// index := GetElementIndex ( minersList , unit ) ;
38872: LD_ADDR_VAR 0 5
38876: PUSH
38877: LD_EXP 113
38881: PPUSH
38882: LD_VAR 0 1
38886: PPUSH
38887: CALL 46086 0 2
38891: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38892: LD_EXP 114
38896: PUSH
38897: LD_VAR 0 5
38901: ARRAY
38902: PUSH
38903: LD_EXP 115
38907: GREATEREQUAL
38908: IFFALSE 38912
// exit ;
38910: GO 39116
// ComMoveXY ( unit , x , y ) ;
38912: LD_VAR 0 1
38916: PPUSH
38917: LD_VAR 0 2
38921: PPUSH
38922: LD_VAR 0 3
38926: PPUSH
38927: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38931: LD_INT 35
38933: PPUSH
38934: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38938: LD_VAR 0 1
38942: PPUSH
38943: LD_VAR 0 2
38947: PPUSH
38948: LD_VAR 0 3
38952: PPUSH
38953: CALL 78132 0 3
38957: NOT
38958: IFFALSE 38971
38960: PUSH
38961: LD_VAR 0 1
38965: PPUSH
38966: CALL_OW 314
38970: AND
38971: IFFALSE 38975
// exit ;
38973: GO 39116
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38975: LD_VAR 0 2
38979: PPUSH
38980: LD_VAR 0 3
38984: PPUSH
38985: CALL_OW 428
38989: PUSH
38990: LD_VAR 0 1
38994: EQUAL
38995: IFFALSE 39009
38997: PUSH
38998: LD_VAR 0 1
39002: PPUSH
39003: CALL_OW 314
39007: NOT
39008: AND
39009: IFFALSE 38931
// PlaySoundXY ( x , y , PlantMine ) ;
39011: LD_VAR 0 2
39015: PPUSH
39016: LD_VAR 0 3
39020: PPUSH
39021: LD_STRING PlantMine
39023: PPUSH
39024: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39028: LD_VAR 0 2
39032: PPUSH
39033: LD_VAR 0 3
39037: PPUSH
39038: LD_VAR 0 1
39042: PPUSH
39043: CALL_OW 255
39047: PPUSH
39048: LD_INT 0
39050: PPUSH
39051: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39055: LD_ADDR_EXP 114
39059: PUSH
39060: LD_EXP 114
39064: PPUSH
39065: LD_VAR 0 5
39069: PUSH
39070: LD_EXP 114
39074: PUSH
39075: LD_VAR 0 5
39079: ARRAY
39080: PUSH
39081: LD_INT 1
39083: PLUS
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PPUSH
39089: LD_VAR 0 2
39093: PUSH
39094: LD_VAR 0 3
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PPUSH
39103: CALL 46303 0 3
39107: ST_TO_ADDR
// result := true ;
39108: LD_ADDR_VAR 0 4
39112: PUSH
39113: LD_INT 1
39115: ST_TO_ADDR
// end ;
39116: LD_VAR 0 4
39120: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39121: LD_INT 0
39123: PPUSH
39124: PPUSH
39125: PPUSH
// if not unit in minersList then
39126: LD_VAR 0 1
39130: PUSH
39131: LD_EXP 113
39135: IN
39136: NOT
39137: IFFALSE 39141
// exit ;
39139: GO 39535
// index := GetElementIndex ( minersList , unit ) ;
39141: LD_ADDR_VAR 0 6
39145: PUSH
39146: LD_EXP 113
39150: PPUSH
39151: LD_VAR 0 1
39155: PPUSH
39156: CALL 46086 0 2
39160: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39161: LD_ADDR_VAR 0 5
39165: PUSH
39166: DOUBLE
39167: LD_EXP 114
39171: PUSH
39172: LD_VAR 0 6
39176: ARRAY
39177: INC
39178: ST_TO_ADDR
39179: LD_INT 1
39181: PUSH
39182: FOR_DOWNTO
39183: IFFALSE 39346
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39185: LD_EXP 114
39189: PUSH
39190: LD_VAR 0 6
39194: ARRAY
39195: PUSH
39196: LD_VAR 0 5
39200: ARRAY
39201: PUSH
39202: LD_INT 1
39204: ARRAY
39205: PUSH
39206: LD_VAR 0 2
39210: EQUAL
39211: IFFALSE 39241
39213: PUSH
39214: LD_EXP 114
39218: PUSH
39219: LD_VAR 0 6
39223: ARRAY
39224: PUSH
39225: LD_VAR 0 5
39229: ARRAY
39230: PUSH
39231: LD_INT 2
39233: ARRAY
39234: PUSH
39235: LD_VAR 0 3
39239: EQUAL
39240: AND
39241: IFFALSE 39344
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39243: LD_EXP 114
39247: PUSH
39248: LD_VAR 0 6
39252: ARRAY
39253: PUSH
39254: LD_VAR 0 5
39258: ARRAY
39259: PUSH
39260: LD_INT 1
39262: ARRAY
39263: PPUSH
39264: LD_EXP 114
39268: PUSH
39269: LD_VAR 0 6
39273: ARRAY
39274: PUSH
39275: LD_VAR 0 5
39279: ARRAY
39280: PUSH
39281: LD_INT 2
39283: ARRAY
39284: PPUSH
39285: LD_VAR 0 1
39289: PPUSH
39290: CALL_OW 255
39294: PPUSH
39295: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39299: LD_ADDR_EXP 114
39303: PUSH
39304: LD_EXP 114
39308: PPUSH
39309: LD_VAR 0 6
39313: PPUSH
39314: LD_EXP 114
39318: PUSH
39319: LD_VAR 0 6
39323: ARRAY
39324: PPUSH
39325: LD_VAR 0 5
39329: PPUSH
39330: CALL_OW 3
39334: PPUSH
39335: CALL_OW 1
39339: ST_TO_ADDR
// exit ;
39340: POP
39341: POP
39342: GO 39535
// end ; end ;
39344: GO 39182
39346: POP
39347: POP
// for i := minerMinesList [ index ] downto 1 do
39348: LD_ADDR_VAR 0 5
39352: PUSH
39353: DOUBLE
39354: LD_EXP 114
39358: PUSH
39359: LD_VAR 0 6
39363: ARRAY
39364: INC
39365: ST_TO_ADDR
39366: LD_INT 1
39368: PUSH
39369: FOR_DOWNTO
39370: IFFALSE 39533
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39372: LD_EXP 114
39376: PUSH
39377: LD_VAR 0 6
39381: ARRAY
39382: PUSH
39383: LD_VAR 0 5
39387: ARRAY
39388: PUSH
39389: LD_INT 1
39391: ARRAY
39392: PPUSH
39393: LD_EXP 114
39397: PUSH
39398: LD_VAR 0 6
39402: ARRAY
39403: PUSH
39404: LD_VAR 0 5
39408: ARRAY
39409: PUSH
39410: LD_INT 2
39412: ARRAY
39413: PPUSH
39414: LD_VAR 0 2
39418: PPUSH
39419: LD_VAR 0 3
39423: PPUSH
39424: CALL_OW 298
39428: PUSH
39429: LD_INT 6
39431: LESS
39432: IFFALSE 39531
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39434: LD_EXP 114
39438: PUSH
39439: LD_VAR 0 6
39443: ARRAY
39444: PUSH
39445: LD_VAR 0 5
39449: ARRAY
39450: PUSH
39451: LD_INT 1
39453: ARRAY
39454: PPUSH
39455: LD_EXP 114
39459: PUSH
39460: LD_VAR 0 6
39464: ARRAY
39465: PUSH
39466: LD_VAR 0 5
39470: ARRAY
39471: PUSH
39472: LD_INT 2
39474: ARRAY
39475: PPUSH
39476: LD_VAR 0 1
39480: PPUSH
39481: CALL_OW 255
39485: PPUSH
39486: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39490: LD_ADDR_EXP 114
39494: PUSH
39495: LD_EXP 114
39499: PPUSH
39500: LD_VAR 0 6
39504: PPUSH
39505: LD_EXP 114
39509: PUSH
39510: LD_VAR 0 6
39514: ARRAY
39515: PPUSH
39516: LD_VAR 0 5
39520: PPUSH
39521: CALL_OW 3
39525: PPUSH
39526: CALL_OW 1
39530: ST_TO_ADDR
// end ; end ;
39531: GO 39369
39533: POP
39534: POP
// end ;
39535: LD_VAR 0 4
39539: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39540: LD_INT 0
39542: PPUSH
39543: PPUSH
39544: PPUSH
39545: PPUSH
39546: PPUSH
39547: PPUSH
39548: PPUSH
39549: PPUSH
39550: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39551: LD_VAR 0 1
39555: PPUSH
39556: CALL_OW 264
39560: PUSH
39561: LD_INT 81
39563: EQUAL
39564: NOT
39565: IFTRUE 39580
39567: PUSH
39568: LD_VAR 0 1
39572: PUSH
39573: LD_EXP 113
39577: IN
39578: NOT
39579: OR
39580: IFFALSE 39584
// exit ;
39582: GO 39910
// index := GetElementIndex ( minersList , unit ) ;
39584: LD_ADDR_VAR 0 6
39588: PUSH
39589: LD_EXP 113
39593: PPUSH
39594: LD_VAR 0 1
39598: PPUSH
39599: CALL 46086 0 2
39603: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39604: LD_ADDR_VAR 0 8
39608: PUSH
39609: LD_EXP 115
39613: PUSH
39614: LD_EXP 114
39618: PUSH
39619: LD_VAR 0 6
39623: ARRAY
39624: MINUS
39625: ST_TO_ADDR
// if not minesFreeAmount then
39626: LD_VAR 0 8
39630: NOT
39631: IFFALSE 39635
// exit ;
39633: GO 39910
// tmp := [ ] ;
39635: LD_ADDR_VAR 0 7
39639: PUSH
39640: EMPTY
39641: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39642: LD_ADDR_VAR 0 5
39646: PUSH
39647: DOUBLE
39648: LD_INT 1
39650: DEC
39651: ST_TO_ADDR
39652: LD_VAR 0 8
39656: PUSH
39657: FOR_TO
39658: IFFALSE 39857
// begin _d := rand ( 0 , 5 ) ;
39660: LD_ADDR_VAR 0 11
39664: PUSH
39665: LD_INT 0
39667: PPUSH
39668: LD_INT 5
39670: PPUSH
39671: CALL_OW 12
39675: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39676: LD_ADDR_VAR 0 12
39680: PUSH
39681: LD_INT 2
39683: PPUSH
39684: LD_INT 6
39686: PPUSH
39687: CALL_OW 12
39691: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39692: LD_ADDR_VAR 0 9
39696: PUSH
39697: LD_VAR 0 2
39701: PPUSH
39702: LD_VAR 0 11
39706: PPUSH
39707: LD_VAR 0 12
39711: PPUSH
39712: CALL_OW 272
39716: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39717: LD_ADDR_VAR 0 10
39721: PUSH
39722: LD_VAR 0 3
39726: PPUSH
39727: LD_VAR 0 11
39731: PPUSH
39732: LD_VAR 0 12
39736: PPUSH
39737: CALL_OW 273
39741: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39742: LD_VAR 0 9
39746: PPUSH
39747: LD_VAR 0 10
39751: PPUSH
39752: CALL_OW 488
39756: IFFALSE 39780
39758: PUSH
39759: LD_VAR 0 9
39763: PUSH
39764: LD_VAR 0 10
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_VAR 0 7
39777: IN
39778: NOT
39779: AND
39780: IFFALSE 39799
39782: PUSH
39783: LD_VAR 0 9
39787: PPUSH
39788: LD_VAR 0 10
39792: PPUSH
39793: CALL_OW 458
39797: NOT
39798: AND
39799: IFFALSE 39841
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39801: LD_ADDR_VAR 0 7
39805: PUSH
39806: LD_VAR 0 7
39810: PPUSH
39811: LD_VAR 0 7
39815: PUSH
39816: LD_INT 1
39818: PLUS
39819: PPUSH
39820: LD_VAR 0 9
39824: PUSH
39825: LD_VAR 0 10
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PPUSH
39834: CALL_OW 1
39838: ST_TO_ADDR
39839: GO 39855
// i := i - 1 ;
39841: LD_ADDR_VAR 0 5
39845: PUSH
39846: LD_VAR 0 5
39850: PUSH
39851: LD_INT 1
39853: MINUS
39854: ST_TO_ADDR
// end ;
39855: GO 39657
39857: POP
39858: POP
// for i in tmp do
39859: LD_ADDR_VAR 0 5
39863: PUSH
39864: LD_VAR 0 7
39868: PUSH
39869: FOR_IN
39870: IFFALSE 39908
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39872: LD_VAR 0 1
39876: PPUSH
39877: LD_VAR 0 5
39881: PUSH
39882: LD_INT 1
39884: ARRAY
39885: PPUSH
39886: LD_VAR 0 5
39890: PUSH
39891: LD_INT 2
39893: ARRAY
39894: PPUSH
39895: CALL 38842 0 3
39899: NOT
39900: IFFALSE 39906
// exit ;
39902: POP
39903: POP
39904: GO 39910
39906: GO 39869
39908: POP
39909: POP
// end ;
39910: LD_VAR 0 4
39914: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
39915: LD_INT 0
39917: PPUSH
39918: PPUSH
39919: PPUSH
39920: PPUSH
39921: PPUSH
39922: PPUSH
39923: PPUSH
39924: PPUSH
39925: PPUSH
// if GetClass ( unit ) <> class_sniper then
39926: LD_VAR 0 1
39930: PPUSH
39931: CALL_OW 257
39935: PUSH
39936: LD_INT 5
39938: NONEQUAL
39939: IFFALSE 39943
// exit ;
39941: GO 40413
// dist := 8 ;
39943: LD_ADDR_VAR 0 5
39947: PUSH
39948: LD_INT 8
39950: ST_TO_ADDR
// viewRange := 12 ;
39951: LD_ADDR_VAR 0 8
39955: PUSH
39956: LD_INT 12
39958: ST_TO_ADDR
// side := GetSide ( unit ) ;
39959: LD_ADDR_VAR 0 6
39963: PUSH
39964: LD_VAR 0 1
39968: PPUSH
39969: CALL_OW 255
39973: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39974: LD_INT 61
39976: PPUSH
39977: LD_VAR 0 6
39981: PPUSH
39982: CALL_OW 321
39986: PUSH
39987: LD_INT 2
39989: EQUAL
39990: IFFALSE 40000
// viewRange := 16 ;
39992: LD_ADDR_VAR 0 8
39996: PUSH
39997: LD_INT 16
39999: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40000: LD_VAR 0 1
40004: PPUSH
40005: LD_VAR 0 2
40009: PPUSH
40010: LD_VAR 0 3
40014: PPUSH
40015: CALL_OW 297
40019: PUSH
40020: LD_VAR 0 5
40024: GREATER
40025: IFFALSE 40104
// begin ComMoveXY ( unit , x , y ) ;
40027: LD_VAR 0 1
40031: PPUSH
40032: LD_VAR 0 2
40036: PPUSH
40037: LD_VAR 0 3
40041: PPUSH
40042: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40046: LD_INT 35
40048: PPUSH
40049: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40053: LD_VAR 0 1
40057: PPUSH
40058: LD_VAR 0 2
40062: PPUSH
40063: LD_VAR 0 3
40067: PPUSH
40068: CALL 78132 0 3
40072: NOT
40073: IFFALSE 40077
// exit ;
40075: GO 40413
// until GetDistUnitXY ( unit , x , y ) < dist ;
40077: LD_VAR 0 1
40081: PPUSH
40082: LD_VAR 0 2
40086: PPUSH
40087: LD_VAR 0 3
40091: PPUSH
40092: CALL_OW 297
40096: PUSH
40097: LD_VAR 0 5
40101: LESS
40102: IFFALSE 40046
// end ; ComTurnXY ( unit , x , y ) ;
40104: LD_VAR 0 1
40108: PPUSH
40109: LD_VAR 0 2
40113: PPUSH
40114: LD_VAR 0 3
40118: PPUSH
40119: CALL_OW 118
// repeat if Multiplayer then
40123: LD_OWVAR 4
40127: IFFALSE 40138
// wait ( 35 ) else
40129: LD_INT 35
40131: PPUSH
40132: CALL_OW 67
40136: GO 40145
// wait ( 5 ) ;
40138: LD_INT 5
40140: PPUSH
40141: CALL_OW 67
// _d := GetDir ( unit ) ;
40145: LD_ADDR_VAR 0 11
40149: PUSH
40150: LD_VAR 0 1
40154: PPUSH
40155: CALL_OW 254
40159: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
40160: LD_ADDR_VAR 0 7
40164: PUSH
40165: LD_VAR 0 1
40169: PPUSH
40170: CALL_OW 250
40174: PPUSH
40175: LD_VAR 0 1
40179: PPUSH
40180: CALL_OW 251
40184: PPUSH
40185: LD_VAR 0 2
40189: PPUSH
40190: LD_VAR 0 3
40194: PPUSH
40195: CALL 80768 0 4
40199: ST_TO_ADDR
// until dir = _d ;
40200: LD_VAR 0 7
40204: PUSH
40205: LD_VAR 0 11
40209: EQUAL
40210: IFFALSE 40123
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
40212: LD_ADDR_VAR 0 9
40216: PUSH
40217: LD_VAR 0 1
40221: PPUSH
40222: CALL_OW 250
40226: PPUSH
40227: LD_VAR 0 7
40231: PPUSH
40232: LD_VAR 0 5
40236: PPUSH
40237: CALL_OW 272
40241: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
40242: LD_ADDR_VAR 0 10
40246: PUSH
40247: LD_VAR 0 1
40251: PPUSH
40252: CALL_OW 251
40256: PPUSH
40257: LD_VAR 0 7
40261: PPUSH
40262: LD_VAR 0 5
40266: PPUSH
40267: CALL_OW 273
40271: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40272: LD_VAR 0 9
40276: PPUSH
40277: LD_VAR 0 10
40281: PPUSH
40282: CALL_OW 488
40286: NOT
40287: IFFALSE 40291
// exit ;
40289: GO 40413
// ComAnimCustom ( unit , 1 ) ;
40291: LD_VAR 0 1
40295: PPUSH
40296: LD_INT 1
40298: PPUSH
40299: CALL_OW 592
// p := 0 ;
40303: LD_ADDR_VAR 0 12
40307: PUSH
40308: LD_INT 0
40310: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40311: LD_VAR 0 9
40315: PPUSH
40316: LD_VAR 0 10
40320: PPUSH
40321: LD_VAR 0 6
40325: PPUSH
40326: LD_VAR 0 8
40330: PPUSH
40331: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
40335: LD_INT 35
40337: PPUSH
40338: CALL_OW 67
// p := Inc ( p ) ;
40342: LD_ADDR_VAR 0 12
40346: PUSH
40347: LD_VAR 0 12
40351: PPUSH
40352: CALL 80724 0 1
40356: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
40357: LD_VAR 0 12
40361: PUSH
40362: LD_INT 3
40364: EQUAL
40365: IFTRUE 40379
40367: PUSH
40368: LD_VAR 0 1
40372: PPUSH
40373: CALL_OW 302
40377: NOT
40378: OR
40379: IFTRUE 40392
40381: PUSH
40382: LD_VAR 0 1
40386: PPUSH
40387: CALL_OW 301
40391: OR
40392: IFFALSE 40335
// RemoveSeeing ( _x , _y , side ) ;
40394: LD_VAR 0 9
40398: PPUSH
40399: LD_VAR 0 10
40403: PPUSH
40404: LD_VAR 0 6
40408: PPUSH
40409: CALL_OW 331
// end ;
40413: LD_VAR 0 4
40417: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
40418: LD_INT 0
40420: PPUSH
40421: PPUSH
40422: PPUSH
40423: PPUSH
40424: PPUSH
40425: PPUSH
40426: PPUSH
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
// if not unit then
40431: LD_VAR 0 1
40435: NOT
40436: IFFALSE 40440
// exit ;
40438: GO 40711
// side := GetSide ( unit ) ;
40440: LD_ADDR_VAR 0 3
40444: PUSH
40445: LD_VAR 0 1
40449: PPUSH
40450: CALL_OW 255
40454: ST_TO_ADDR
// x := GetX ( unit ) ;
40455: LD_ADDR_VAR 0 5
40459: PUSH
40460: LD_VAR 0 1
40464: PPUSH
40465: CALL_OW 250
40469: ST_TO_ADDR
// y := GetY ( unit ) ;
40470: LD_ADDR_VAR 0 6
40474: PUSH
40475: LD_VAR 0 1
40479: PPUSH
40480: CALL_OW 251
40484: ST_TO_ADDR
// r := 8 ;
40485: LD_ADDR_VAR 0 4
40489: PUSH
40490: LD_INT 8
40492: ST_TO_ADDR
// if x - r < 0 then
40493: LD_VAR 0 5
40497: PUSH
40498: LD_VAR 0 4
40502: MINUS
40503: PUSH
40504: LD_INT 0
40506: LESS
40507: IFFALSE 40519
// min_x := 0 else
40509: LD_ADDR_VAR 0 7
40513: PUSH
40514: LD_INT 0
40516: ST_TO_ADDR
40517: GO 40535
// min_x := x - r ;
40519: LD_ADDR_VAR 0 7
40523: PUSH
40524: LD_VAR 0 5
40528: PUSH
40529: LD_VAR 0 4
40533: MINUS
40534: ST_TO_ADDR
// if y - r < 0 then
40535: LD_VAR 0 6
40539: PUSH
40540: LD_VAR 0 4
40544: MINUS
40545: PUSH
40546: LD_INT 0
40548: LESS
40549: IFFALSE 40561
// min_y := 0 else
40551: LD_ADDR_VAR 0 8
40555: PUSH
40556: LD_INT 0
40558: ST_TO_ADDR
40559: GO 40577
// min_y := y - r ;
40561: LD_ADDR_VAR 0 8
40565: PUSH
40566: LD_VAR 0 6
40570: PUSH
40571: LD_VAR 0 4
40575: MINUS
40576: ST_TO_ADDR
// max_x := x + r ;
40577: LD_ADDR_VAR 0 9
40581: PUSH
40582: LD_VAR 0 5
40586: PUSH
40587: LD_VAR 0 4
40591: PLUS
40592: ST_TO_ADDR
// max_y := y + r ;
40593: LD_ADDR_VAR 0 10
40597: PUSH
40598: LD_VAR 0 6
40602: PUSH
40603: LD_VAR 0 4
40607: PLUS
40608: ST_TO_ADDR
// for _x = min_x to max_x do
40609: LD_ADDR_VAR 0 11
40613: PUSH
40614: DOUBLE
40615: LD_VAR 0 7
40619: DEC
40620: ST_TO_ADDR
40621: LD_VAR 0 9
40625: PUSH
40626: FOR_TO
40627: IFFALSE 40709
// for _y = min_y to max_y do
40629: LD_ADDR_VAR 0 12
40633: PUSH
40634: DOUBLE
40635: LD_VAR 0 8
40639: DEC
40640: ST_TO_ADDR
40641: LD_VAR 0 10
40645: PUSH
40646: FOR_TO
40647: IFFALSE 40705
// begin if not ValidHex ( _x , _y ) then
40649: LD_VAR 0 11
40653: PPUSH
40654: LD_VAR 0 12
40658: PPUSH
40659: CALL_OW 488
40663: NOT
40664: IFFALSE 40668
// continue ;
40666: GO 40646
// if MineAtPos ( _x , _y ) then
40668: LD_VAR 0 11
40672: PPUSH
40673: LD_VAR 0 12
40677: PPUSH
40678: CALL_OW 458
40682: IFFALSE 40703
// ViewMineAtPos ( _x , _y , side ) ;
40684: LD_VAR 0 11
40688: PPUSH
40689: LD_VAR 0 12
40693: PPUSH
40694: LD_VAR 0 3
40698: PPUSH
40699: CALL_OW 457
// end ;
40703: GO 40646
40705: POP
40706: POP
40707: GO 40626
40709: POP
40710: POP
// end ;
40711: LD_VAR 0 2
40715: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
40716: LD_INT 0
40718: PPUSH
40719: PPUSH
40720: PPUSH
40721: PPUSH
40722: PPUSH
40723: PPUSH
// if not units then
40724: LD_VAR 0 1
40728: NOT
40729: IFFALSE 40733
// exit ;
40731: GO 41163
// scaners := [ ] ;
40733: LD_ADDR_VAR 0 6
40737: PUSH
40738: EMPTY
40739: ST_TO_ADDR
// for i in units do
40740: LD_ADDR_VAR 0 3
40744: PUSH
40745: LD_VAR 0 1
40749: PUSH
40750: FOR_IN
40751: IFFALSE 40908
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
40753: LD_VAR 0 3
40757: PPUSH
40758: CALL_OW 264
40762: PUSH
40763: LD_INT 11
40765: NONEQUAL
40766: IFTRUE 40780
40768: PUSH
40769: LD_VAR 0 3
40773: PPUSH
40774: CALL_OW 302
40778: NOT
40779: OR
40780: IFTRUE 40797
40782: PUSH
40783: LD_VAR 0 3
40787: PPUSH
40788: CALL_OW 110
40792: PUSH
40793: LD_INT 502
40795: EQUAL
40796: OR
40797: IFFALSE 40801
// continue ;
40799: GO 40750
// ComStop ( i ) ;
40801: LD_VAR 0 3
40805: PPUSH
40806: CALL_OW 141
// x := GetX ( i ) ;
40810: LD_ADDR_VAR 0 4
40814: PUSH
40815: LD_VAR 0 3
40819: PPUSH
40820: CALL_OW 250
40824: ST_TO_ADDR
// y := GetY ( i ) ;
40825: LD_ADDR_VAR 0 5
40829: PUSH
40830: LD_VAR 0 3
40834: PPUSH
40835: CALL_OW 251
40839: ST_TO_ADDR
// if GetSide ( i ) = your_side then
40840: LD_VAR 0 3
40844: PPUSH
40845: CALL_OW 255
40849: PUSH
40850: LD_OWVAR 2
40854: EQUAL
40855: IFFALSE 40874
// PlaySoundXY ( x , y , mineDetector ) ;
40857: LD_VAR 0 4
40861: PPUSH
40862: LD_VAR 0 5
40866: PPUSH
40867: LD_STRING mineDetector
40869: PPUSH
40870: CALL_OW 366
// scaners := Join ( scaners , i ) ;
40874: LD_ADDR_VAR 0 6
40878: PUSH
40879: LD_VAR 0 6
40883: PPUSH
40884: LD_VAR 0 3
40888: PPUSH
40889: CALL 79351 0 2
40893: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
40894: LD_VAR 0 3
40898: PPUSH
40899: LD_INT 502
40901: PPUSH
40902: CALL_OW 109
// end ;
40906: GO 40750
40908: POP
40909: POP
// if not scaners then
40910: LD_VAR 0 6
40914: NOT
40915: IFFALSE 40919
// exit ;
40917: GO 41163
// wait ( 3 ) ;
40919: LD_INT 3
40921: PPUSH
40922: CALL_OW 67
// timer := 6 ;
40926: LD_ADDR_VAR 0 7
40930: PUSH
40931: LD_INT 6
40933: ST_TO_ADDR
// repeat for i in scaners do
40934: LD_ADDR_VAR 0 3
40938: PUSH
40939: LD_VAR 0 6
40943: PUSH
40944: FOR_IN
40945: IFFALSE 41061
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
40947: LD_VAR 0 3
40951: PPUSH
40952: CALL_OW 302
40956: NOT
40957: IFTRUE 40970
40959: PUSH
40960: LD_VAR 0 3
40964: PPUSH
40965: CALL_OW 314
40969: OR
40970: IFTRUE 41001
40972: PUSH
40973: LD_VAR 0 3
40977: PPUSH
40978: CALL_OW 263
40982: PUSH
40983: LD_INT 1
40985: EQUAL
40986: IFFALSE 41000
40988: PUSH
40989: LD_VAR 0 3
40993: PPUSH
40994: CALL_OW 311
40998: NOT
40999: AND
41000: OR
41001: IFFALSE 41045
// begin SetUnitDisplayNumber ( i , 0 ) ;
41003: LD_VAR 0 3
41007: PPUSH
41008: LD_INT 0
41010: PPUSH
41011: CALL_OW 505
// SetTag ( i , 0 ) ;
41015: LD_VAR 0 3
41019: PPUSH
41020: LD_INT 0
41022: PPUSH
41023: CALL_OW 109
// scaners := scaners diff i ;
41027: LD_ADDR_VAR 0 6
41031: PUSH
41032: LD_VAR 0 6
41036: PUSH
41037: LD_VAR 0 3
41041: DIFF
41042: ST_TO_ADDR
// continue ;
41043: GO 40944
// end ; SetUnitDisplayNumber ( i , timer ) ;
41045: LD_VAR 0 3
41049: PPUSH
41050: LD_VAR 0 7
41054: PPUSH
41055: CALL_OW 505
// end ;
41059: GO 40944
41061: POP
41062: POP
// if not scaners then
41063: LD_VAR 0 6
41067: NOT
41068: IFFALSE 41072
// exit ;
41070: GO 41163
// timer := Dec ( timer ) ;
41072: LD_ADDR_VAR 0 7
41076: PUSH
41077: LD_VAR 0 7
41081: PPUSH
41082: CALL 80746 0 1
41086: ST_TO_ADDR
// wait ( 0 0$1 ) ;
41087: LD_INT 35
41089: PPUSH
41090: CALL_OW 67
// until timer = 0 ;
41094: LD_VAR 0 7
41098: PUSH
41099: LD_INT 0
41101: EQUAL
41102: IFFALSE 40934
// if not scaners then
41104: LD_VAR 0 6
41108: NOT
41109: IFFALSE 41113
// exit ;
41111: GO 41163
// for i in scaners do
41113: LD_ADDR_VAR 0 3
41117: PUSH
41118: LD_VAR 0 6
41122: PUSH
41123: FOR_IN
41124: IFFALSE 41161
// begin SetUnitDisplayNumber ( i , 0 ) ;
41126: LD_VAR 0 3
41130: PPUSH
41131: LD_INT 0
41133: PPUSH
41134: CALL_OW 505
// SetTag ( i , 0 ) ;
41138: LD_VAR 0 3
41142: PPUSH
41143: LD_INT 0
41145: PPUSH
41146: CALL_OW 109
// RevealDetectorMine ( i ) ;
41150: LD_VAR 0 3
41154: PPUSH
41155: CALL 40418 0 1
// end ;
41159: GO 41123
41161: POP
41162: POP
// end ;
41163: LD_VAR 0 2
41167: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
41168: LD_INT 0
41170: PPUSH
// if p1 = mine_detector_mode then
41171: LD_VAR 0 2
41175: PUSH
41176: LD_INT 103
41178: EQUAL
41179: IFFALSE 41190
// DetectMine ( units ) ;
41181: LD_VAR 0 1
41185: PPUSH
41186: CALL 40716 0 1
// end ; end_of_file
41190: LD_VAR 0 7
41194: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41195: LD_INT 0
41197: PPUSH
41198: PPUSH
// if exist_mode then
41199: LD_VAR 0 2
41203: IFFALSE 41249
// begin unit := CreateCharacter ( prefix & ident ) ;
41205: LD_ADDR_VAR 0 5
41209: PUSH
41210: LD_VAR 0 3
41214: PUSH
41215: LD_VAR 0 1
41219: STR
41220: PPUSH
41221: CALL_OW 34
41225: ST_TO_ADDR
// if unit then
41226: LD_VAR 0 5
41230: IFFALSE 41247
// DeleteCharacters ( prefix & ident ) ;
41232: LD_VAR 0 3
41236: PUSH
41237: LD_VAR 0 1
41241: STR
41242: PPUSH
41243: CALL_OW 40
// end else
41247: GO 41264
// unit := NewCharacter ( ident ) ;
41249: LD_ADDR_VAR 0 5
41253: PUSH
41254: LD_VAR 0 1
41258: PPUSH
41259: CALL_OW 25
41263: ST_TO_ADDR
// result := unit ;
41264: LD_ADDR_VAR 0 4
41268: PUSH
41269: LD_VAR 0 5
41273: ST_TO_ADDR
// end ;
41274: LD_VAR 0 4
41278: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
41279: LD_INT 0
41281: PPUSH
41282: PPUSH
// if exist_mode then
41283: LD_VAR 0 2
41287: IFFALSE 41312
// unit := CreateCharacter ( prefix & ident ) else
41289: LD_ADDR_VAR 0 5
41293: PUSH
41294: LD_VAR 0 3
41298: PUSH
41299: LD_VAR 0 1
41303: STR
41304: PPUSH
41305: CALL_OW 34
41309: ST_TO_ADDR
41310: GO 41327
// unit := NewCharacter ( ident ) ;
41312: LD_ADDR_VAR 0 5
41316: PUSH
41317: LD_VAR 0 1
41321: PPUSH
41322: CALL_OW 25
41326: ST_TO_ADDR
// result := unit ;
41327: LD_ADDR_VAR 0 4
41331: PUSH
41332: LD_VAR 0 5
41336: ST_TO_ADDR
// end ;
41337: LD_VAR 0 4
41341: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41342: LD_INT 0
41344: PPUSH
41345: PPUSH
// if not side or not nation then
41346: LD_VAR 0 1
41350: NOT
41351: IFTRUE 41360
41353: PUSH
41354: LD_VAR 0 2
41358: NOT
41359: OR
41360: IFFALSE 41364
// exit ;
41362: GO 42158
// case nation of nation_american :
41364: LD_VAR 0 2
41368: PUSH
41369: LD_INT 1
41371: DOUBLE
41372: EQUAL
41373: IFTRUE 41377
41375: GO 41599
41377: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
41378: LD_ADDR_VAR 0 4
41382: PUSH
41383: LD_INT 35
41385: PUSH
41386: LD_INT 45
41388: PUSH
41389: LD_INT 46
41391: PUSH
41392: LD_INT 47
41394: PUSH
41395: LD_INT 82
41397: PUSH
41398: LD_INT 83
41400: PUSH
41401: LD_INT 84
41403: PUSH
41404: LD_INT 85
41406: PUSH
41407: LD_INT 86
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: LD_INT 2
41415: PUSH
41416: LD_INT 6
41418: PUSH
41419: LD_INT 15
41421: PUSH
41422: LD_INT 16
41424: PUSH
41425: LD_INT 7
41427: PUSH
41428: LD_INT 12
41430: PUSH
41431: LD_INT 13
41433: PUSH
41434: LD_INT 10
41436: PUSH
41437: LD_INT 14
41439: PUSH
41440: LD_INT 20
41442: PUSH
41443: LD_INT 21
41445: PUSH
41446: LD_INT 22
41448: PUSH
41449: LD_INT 25
41451: PUSH
41452: LD_INT 32
41454: PUSH
41455: LD_INT 27
41457: PUSH
41458: LD_INT 36
41460: PUSH
41461: LD_INT 69
41463: PUSH
41464: LD_INT 39
41466: PUSH
41467: LD_INT 34
41469: PUSH
41470: LD_INT 40
41472: PUSH
41473: LD_INT 48
41475: PUSH
41476: LD_INT 49
41478: PUSH
41479: LD_INT 50
41481: PUSH
41482: LD_INT 51
41484: PUSH
41485: LD_INT 52
41487: PUSH
41488: LD_INT 53
41490: PUSH
41491: LD_INT 54
41493: PUSH
41494: LD_INT 55
41496: PUSH
41497: LD_INT 56
41499: PUSH
41500: LD_INT 57
41502: PUSH
41503: LD_INT 58
41505: PUSH
41506: LD_INT 59
41508: PUSH
41509: LD_INT 60
41511: PUSH
41512: LD_INT 61
41514: PUSH
41515: LD_INT 62
41517: PUSH
41518: LD_INT 80
41520: PUSH
41521: LD_INT 82
41523: PUSH
41524: LD_INT 83
41526: PUSH
41527: LD_INT 84
41529: PUSH
41530: LD_INT 85
41532: PUSH
41533: LD_INT 86
41535: PUSH
41536: LD_INT 90
41538: PUSH
41539: LD_INT 93
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: ST_TO_ADDR
41597: GO 42080
41599: LD_INT 2
41601: DOUBLE
41602: EQUAL
41603: IFTRUE 41607
41605: GO 41841
41607: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
41608: LD_ADDR_VAR 0 4
41612: PUSH
41613: LD_INT 35
41615: PUSH
41616: LD_INT 45
41618: PUSH
41619: LD_INT 46
41621: PUSH
41622: LD_INT 47
41624: PUSH
41625: LD_INT 82
41627: PUSH
41628: LD_INT 83
41630: PUSH
41631: LD_INT 84
41633: PUSH
41634: LD_INT 85
41636: PUSH
41637: LD_INT 87
41639: PUSH
41640: LD_INT 70
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: LD_INT 11
41648: PUSH
41649: LD_INT 3
41651: PUSH
41652: LD_INT 4
41654: PUSH
41655: LD_INT 5
41657: PUSH
41658: LD_INT 6
41660: PUSH
41661: LD_INT 15
41663: PUSH
41664: LD_INT 18
41666: PUSH
41667: LD_INT 7
41669: PUSH
41670: LD_INT 17
41672: PUSH
41673: LD_INT 8
41675: PUSH
41676: LD_INT 20
41678: PUSH
41679: LD_INT 21
41681: PUSH
41682: LD_INT 22
41684: PUSH
41685: LD_INT 72
41687: PUSH
41688: LD_INT 26
41690: PUSH
41691: LD_INT 69
41693: PUSH
41694: LD_INT 39
41696: PUSH
41697: LD_INT 40
41699: PUSH
41700: LD_INT 41
41702: PUSH
41703: LD_INT 42
41705: PUSH
41706: LD_INT 43
41708: PUSH
41709: LD_INT 48
41711: PUSH
41712: LD_INT 49
41714: PUSH
41715: LD_INT 50
41717: PUSH
41718: LD_INT 51
41720: PUSH
41721: LD_INT 52
41723: PUSH
41724: LD_INT 53
41726: PUSH
41727: LD_INT 54
41729: PUSH
41730: LD_INT 55
41732: PUSH
41733: LD_INT 56
41735: PUSH
41736: LD_INT 60
41738: PUSH
41739: LD_INT 61
41741: PUSH
41742: LD_INT 62
41744: PUSH
41745: LD_INT 66
41747: PUSH
41748: LD_INT 67
41750: PUSH
41751: LD_INT 68
41753: PUSH
41754: LD_INT 81
41756: PUSH
41757: LD_INT 82
41759: PUSH
41760: LD_INT 83
41762: PUSH
41763: LD_INT 84
41765: PUSH
41766: LD_INT 85
41768: PUSH
41769: LD_INT 87
41771: PUSH
41772: LD_INT 88
41774: PUSH
41775: LD_INT 92
41777: PUSH
41778: LD_INT 94
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: ST_TO_ADDR
41839: GO 42080
41841: LD_INT 3
41843: DOUBLE
41844: EQUAL
41845: IFTRUE 41849
41847: GO 42079
41849: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
41850: LD_ADDR_VAR 0 4
41854: PUSH
41855: LD_INT 46
41857: PUSH
41858: LD_INT 47
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 2
41866: PUSH
41867: LD_INT 82
41869: PUSH
41870: LD_INT 83
41872: PUSH
41873: LD_INT 84
41875: PUSH
41876: LD_INT 85
41878: PUSH
41879: LD_INT 86
41881: PUSH
41882: LD_INT 11
41884: PUSH
41885: LD_INT 9
41887: PUSH
41888: LD_INT 20
41890: PUSH
41891: LD_INT 19
41893: PUSH
41894: LD_INT 21
41896: PUSH
41897: LD_INT 24
41899: PUSH
41900: LD_INT 22
41902: PUSH
41903: LD_INT 25
41905: PUSH
41906: LD_INT 28
41908: PUSH
41909: LD_INT 29
41911: PUSH
41912: LD_INT 30
41914: PUSH
41915: LD_INT 31
41917: PUSH
41918: LD_INT 37
41920: PUSH
41921: LD_INT 38
41923: PUSH
41924: LD_INT 32
41926: PUSH
41927: LD_INT 27
41929: PUSH
41930: LD_INT 33
41932: PUSH
41933: LD_INT 69
41935: PUSH
41936: LD_INT 39
41938: PUSH
41939: LD_INT 34
41941: PUSH
41942: LD_INT 40
41944: PUSH
41945: LD_INT 71
41947: PUSH
41948: LD_INT 23
41950: PUSH
41951: LD_INT 44
41953: PUSH
41954: LD_INT 48
41956: PUSH
41957: LD_INT 49
41959: PUSH
41960: LD_INT 50
41962: PUSH
41963: LD_INT 51
41965: PUSH
41966: LD_INT 52
41968: PUSH
41969: LD_INT 53
41971: PUSH
41972: LD_INT 54
41974: PUSH
41975: LD_INT 55
41977: PUSH
41978: LD_INT 56
41980: PUSH
41981: LD_INT 57
41983: PUSH
41984: LD_INT 58
41986: PUSH
41987: LD_INT 59
41989: PUSH
41990: LD_INT 63
41992: PUSH
41993: LD_INT 64
41995: PUSH
41996: LD_INT 65
41998: PUSH
41999: LD_INT 82
42001: PUSH
42002: LD_INT 83
42004: PUSH
42005: LD_INT 84
42007: PUSH
42008: LD_INT 85
42010: PUSH
42011: LD_INT 86
42013: PUSH
42014: LD_INT 89
42016: PUSH
42017: LD_INT 91
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: ST_TO_ADDR
42077: GO 42080
42079: POP
// if state > - 1 and state < 3 then
42080: LD_VAR 0 3
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: GREATER
42089: IFFALSE 42101
42091: PUSH
42092: LD_VAR 0 3
42096: PUSH
42097: LD_INT 3
42099: LESS
42100: AND
42101: IFFALSE 42158
// for i in result do
42103: LD_ADDR_VAR 0 5
42107: PUSH
42108: LD_VAR 0 4
42112: PUSH
42113: FOR_IN
42114: IFFALSE 42156
// if GetTech ( i , side ) <> state then
42116: LD_VAR 0 5
42120: PPUSH
42121: LD_VAR 0 1
42125: PPUSH
42126: CALL_OW 321
42130: PUSH
42131: LD_VAR 0 3
42135: NONEQUAL
42136: IFFALSE 42154
// result := result diff i ;
42138: LD_ADDR_VAR 0 4
42142: PUSH
42143: LD_VAR 0 4
42147: PUSH
42148: LD_VAR 0 5
42152: DIFF
42153: ST_TO_ADDR
42154: GO 42113
42156: POP
42157: POP
// end ;
42158: LD_VAR 0 4
42162: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42163: LD_INT 0
42165: PPUSH
42166: PPUSH
42167: PPUSH
// result := true ;
42168: LD_ADDR_VAR 0 3
42172: PUSH
42173: LD_INT 1
42175: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42176: LD_ADDR_VAR 0 5
42180: PUSH
42181: LD_VAR 0 2
42185: PPUSH
42186: CALL_OW 480
42190: ST_TO_ADDR
// if not tmp then
42191: LD_VAR 0 5
42195: NOT
42196: IFFALSE 42200
// exit ;
42198: GO 42249
// for i in tmp do
42200: LD_ADDR_VAR 0 4
42204: PUSH
42205: LD_VAR 0 5
42209: PUSH
42210: FOR_IN
42211: IFFALSE 42247
// if GetTech ( i , side ) <> state_researched then
42213: LD_VAR 0 4
42217: PPUSH
42218: LD_VAR 0 1
42222: PPUSH
42223: CALL_OW 321
42227: PUSH
42228: LD_INT 2
42230: NONEQUAL
42231: IFFALSE 42245
// begin result := false ;
42233: LD_ADDR_VAR 0 3
42237: PUSH
42238: LD_INT 0
42240: ST_TO_ADDR
// exit ;
42241: POP
42242: POP
42243: GO 42249
// end ;
42245: GO 42210
42247: POP
42248: POP
// end ;
42249: LD_VAR 0 3
42253: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42254: LD_INT 0
42256: PPUSH
42257: PPUSH
42258: PPUSH
42259: PPUSH
42260: PPUSH
42261: PPUSH
42262: PPUSH
42263: PPUSH
42264: PPUSH
42265: PPUSH
42266: PPUSH
42267: PPUSH
42268: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42269: LD_VAR 0 1
42273: NOT
42274: IFTRUE 42291
42276: PUSH
42277: LD_VAR 0 1
42281: PPUSH
42282: CALL_OW 257
42286: PUSH
42287: LD_INT 9
42289: NONEQUAL
42290: OR
42291: IFFALSE 42295
// exit ;
42293: GO 42874
// side := GetSide ( unit ) ;
42295: LD_ADDR_VAR 0 9
42299: PUSH
42300: LD_VAR 0 1
42304: PPUSH
42305: CALL_OW 255
42309: ST_TO_ADDR
// tech_space := tech_spacanom ;
42310: LD_ADDR_VAR 0 12
42314: PUSH
42315: LD_INT 29
42317: ST_TO_ADDR
// tech_time := tech_taurad ;
42318: LD_ADDR_VAR 0 13
42322: PUSH
42323: LD_INT 28
42325: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42326: LD_ADDR_VAR 0 11
42330: PUSH
42331: LD_VAR 0 1
42335: PPUSH
42336: CALL_OW 310
42340: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42341: LD_VAR 0 11
42345: PPUSH
42346: CALL_OW 247
42350: PUSH
42351: LD_INT 2
42353: EQUAL
42354: IFFALSE 42358
// exit ;
42356: GO 42874
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42358: LD_ADDR_VAR 0 8
42362: PUSH
42363: LD_INT 81
42365: PUSH
42366: LD_VAR 0 9
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 3
42377: PUSH
42378: LD_INT 21
42380: PUSH
42381: LD_INT 3
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PPUSH
42396: CALL_OW 69
42400: ST_TO_ADDR
// if not tmp then
42401: LD_VAR 0 8
42405: NOT
42406: IFFALSE 42410
// exit ;
42408: GO 42874
// if in_unit then
42410: LD_VAR 0 11
42414: IFFALSE 42438
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42416: LD_ADDR_VAR 0 10
42420: PUSH
42421: LD_VAR 0 8
42425: PPUSH
42426: LD_VAR 0 11
42430: PPUSH
42431: CALL_OW 74
42435: ST_TO_ADDR
42436: GO 42458
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42438: LD_ADDR_VAR 0 10
42442: PUSH
42443: LD_VAR 0 8
42447: PPUSH
42448: LD_VAR 0 1
42452: PPUSH
42453: CALL_OW 74
42457: ST_TO_ADDR
// if not enemy then
42458: LD_VAR 0 10
42462: NOT
42463: IFFALSE 42467
// exit ;
42465: GO 42874
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42467: LD_VAR 0 11
42471: IFFALSE 42493
42473: PUSH
42474: LD_VAR 0 11
42478: PPUSH
42479: LD_VAR 0 10
42483: PPUSH
42484: CALL_OW 296
42488: PUSH
42489: LD_INT 13
42491: GREATER
42492: AND
42493: IFTRUE 42515
42495: PUSH
42496: LD_VAR 0 1
42500: PPUSH
42501: LD_VAR 0 10
42505: PPUSH
42506: CALL_OW 296
42510: PUSH
42511: LD_INT 12
42513: GREATER
42514: OR
42515: IFFALSE 42519
// exit ;
42517: GO 42874
// missile := [ 1 ] ;
42519: LD_ADDR_VAR 0 14
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42530: LD_VAR 0 9
42534: PPUSH
42535: LD_VAR 0 12
42539: PPUSH
42540: CALL_OW 325
42544: IFFALSE 42573
// missile := Replace ( missile , missile + 1 , 2 ) ;
42546: LD_ADDR_VAR 0 14
42550: PUSH
42551: LD_VAR 0 14
42555: PPUSH
42556: LD_VAR 0 14
42560: PUSH
42561: LD_INT 1
42563: PLUS
42564: PPUSH
42565: LD_INT 2
42567: PPUSH
42568: CALL_OW 1
42572: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42573: LD_VAR 0 9
42577: PPUSH
42578: LD_VAR 0 13
42582: PPUSH
42583: CALL_OW 325
42587: IFFALSE 42611
42589: PUSH
42590: LD_VAR 0 10
42594: PPUSH
42595: CALL_OW 255
42599: PPUSH
42600: LD_VAR 0 13
42604: PPUSH
42605: CALL_OW 325
42609: NOT
42610: AND
42611: IFFALSE 42640
// missile := Replace ( missile , missile + 1 , 3 ) ;
42613: LD_ADDR_VAR 0 14
42617: PUSH
42618: LD_VAR 0 14
42622: PPUSH
42623: LD_VAR 0 14
42627: PUSH
42628: LD_INT 1
42630: PLUS
42631: PPUSH
42632: LD_INT 3
42634: PPUSH
42635: CALL_OW 1
42639: ST_TO_ADDR
// if missile < 2 then
42640: LD_VAR 0 14
42644: PUSH
42645: LD_INT 2
42647: LESS
42648: IFFALSE 42652
// exit ;
42650: GO 42874
// x := GetX ( enemy ) ;
42652: LD_ADDR_VAR 0 4
42656: PUSH
42657: LD_VAR 0 10
42661: PPUSH
42662: CALL_OW 250
42666: ST_TO_ADDR
// y := GetY ( enemy ) ;
42667: LD_ADDR_VAR 0 5
42671: PUSH
42672: LD_VAR 0 10
42676: PPUSH
42677: CALL_OW 251
42681: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42682: LD_ADDR_VAR 0 6
42686: PUSH
42687: LD_VAR 0 4
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PPUSH
42696: LD_INT 1
42698: PPUSH
42699: CALL_OW 12
42703: PLUS
42704: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42705: LD_ADDR_VAR 0 7
42709: PUSH
42710: LD_VAR 0 5
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PPUSH
42719: LD_INT 1
42721: PPUSH
42722: CALL_OW 12
42726: PLUS
42727: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42728: LD_VAR 0 6
42732: PPUSH
42733: LD_VAR 0 7
42737: PPUSH
42738: CALL_OW 488
42742: NOT
42743: IFFALSE 42765
// begin _x := x ;
42745: LD_ADDR_VAR 0 6
42749: PUSH
42750: LD_VAR 0 4
42754: ST_TO_ADDR
// _y := y ;
42755: LD_ADDR_VAR 0 7
42759: PUSH
42760: LD_VAR 0 5
42764: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42765: LD_ADDR_VAR 0 3
42769: PUSH
42770: LD_INT 1
42772: PPUSH
42773: LD_VAR 0 14
42777: PPUSH
42778: CALL_OW 12
42782: ST_TO_ADDR
// case i of 1 :
42783: LD_VAR 0 3
42787: PUSH
42788: LD_INT 1
42790: DOUBLE
42791: EQUAL
42792: IFTRUE 42796
42794: GO 42813
42796: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42797: LD_VAR 0 1
42801: PPUSH
42802: LD_VAR 0 10
42806: PPUSH
42807: CALL_OW 115
42811: GO 42874
42813: LD_INT 2
42815: DOUBLE
42816: EQUAL
42817: IFTRUE 42821
42819: GO 42843
42821: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42822: LD_VAR 0 1
42826: PPUSH
42827: LD_VAR 0 6
42831: PPUSH
42832: LD_VAR 0 7
42836: PPUSH
42837: CALL_OW 153
42841: GO 42874
42843: LD_INT 3
42845: DOUBLE
42846: EQUAL
42847: IFTRUE 42851
42849: GO 42873
42851: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42852: LD_VAR 0 1
42856: PPUSH
42857: LD_VAR 0 6
42861: PPUSH
42862: LD_VAR 0 7
42866: PPUSH
42867: CALL_OW 154
42871: GO 42874
42873: POP
// end ;
42874: LD_VAR 0 2
42878: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42879: LD_INT 0
42881: PPUSH
42882: PPUSH
42883: PPUSH
42884: PPUSH
42885: PPUSH
42886: PPUSH
// if not unit or not building then
42887: LD_VAR 0 1
42891: NOT
42892: IFTRUE 42901
42894: PUSH
42895: LD_VAR 0 2
42899: NOT
42900: OR
42901: IFFALSE 42905
// exit ;
42903: GO 43063
// x := GetX ( building ) ;
42905: LD_ADDR_VAR 0 5
42909: PUSH
42910: LD_VAR 0 2
42914: PPUSH
42915: CALL_OW 250
42919: ST_TO_ADDR
// y := GetY ( building ) ;
42920: LD_ADDR_VAR 0 6
42924: PUSH
42925: LD_VAR 0 2
42929: PPUSH
42930: CALL_OW 251
42934: ST_TO_ADDR
// for i := 0 to 5 do
42935: LD_ADDR_VAR 0 4
42939: PUSH
42940: DOUBLE
42941: LD_INT 0
42943: DEC
42944: ST_TO_ADDR
42945: LD_INT 5
42947: PUSH
42948: FOR_TO
42949: IFFALSE 43061
// begin _x := ShiftX ( x , i , 3 ) ;
42951: LD_ADDR_VAR 0 7
42955: PUSH
42956: LD_VAR 0 5
42960: PPUSH
42961: LD_VAR 0 4
42965: PPUSH
42966: LD_INT 3
42968: PPUSH
42969: CALL_OW 272
42973: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42974: LD_ADDR_VAR 0 8
42978: PUSH
42979: LD_VAR 0 6
42983: PPUSH
42984: LD_VAR 0 4
42988: PPUSH
42989: LD_INT 3
42991: PPUSH
42992: CALL_OW 273
42996: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42997: LD_VAR 0 7
43001: PPUSH
43002: LD_VAR 0 8
43006: PPUSH
43007: CALL_OW 488
43011: NOT
43012: IFFALSE 43016
// continue ;
43014: GO 42948
// if HexInfo ( _x , _y ) = 0 then
43016: LD_VAR 0 7
43020: PPUSH
43021: LD_VAR 0 8
43025: PPUSH
43026: CALL_OW 428
43030: PUSH
43031: LD_INT 0
43033: EQUAL
43034: IFFALSE 43059
// begin ComMoveXY ( unit , _x , _y ) ;
43036: LD_VAR 0 1
43040: PPUSH
43041: LD_VAR 0 7
43045: PPUSH
43046: LD_VAR 0 8
43050: PPUSH
43051: CALL_OW 111
// exit ;
43055: POP
43056: POP
43057: GO 43063
// end ; end ;
43059: GO 42948
43061: POP
43062: POP
// end ;
43063: LD_VAR 0 3
43067: RET
// export function ScanBase ( side , base_area ) ; begin
43068: LD_INT 0
43070: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43071: LD_ADDR_VAR 0 3
43075: PUSH
43076: LD_VAR 0 2
43080: PPUSH
43081: LD_INT 81
43083: PUSH
43084: LD_VAR 0 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PPUSH
43093: CALL_OW 70
43097: ST_TO_ADDR
// end ;
43098: LD_VAR 0 3
43102: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43103: LD_INT 0
43105: PPUSH
43106: PPUSH
43107: PPUSH
43108: PPUSH
// result := false ;
43109: LD_ADDR_VAR 0 2
43113: PUSH
43114: LD_INT 0
43116: ST_TO_ADDR
// side := GetSide ( unit ) ;
43117: LD_ADDR_VAR 0 3
43121: PUSH
43122: LD_VAR 0 1
43126: PPUSH
43127: CALL_OW 255
43131: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43132: LD_ADDR_VAR 0 4
43136: PUSH
43137: LD_VAR 0 1
43141: PPUSH
43142: CALL_OW 248
43146: ST_TO_ADDR
// case nat of 1 :
43147: LD_VAR 0 4
43151: PUSH
43152: LD_INT 1
43154: DOUBLE
43155: EQUAL
43156: IFTRUE 43160
43158: GO 43171
43160: POP
// tech := tech_lassight ; 2 :
43161: LD_ADDR_VAR 0 5
43165: PUSH
43166: LD_INT 12
43168: ST_TO_ADDR
43169: GO 43210
43171: LD_INT 2
43173: DOUBLE
43174: EQUAL
43175: IFTRUE 43179
43177: GO 43190
43179: POP
// tech := tech_mortar ; 3 :
43180: LD_ADDR_VAR 0 5
43184: PUSH
43185: LD_INT 41
43187: ST_TO_ADDR
43188: GO 43210
43190: LD_INT 3
43192: DOUBLE
43193: EQUAL
43194: IFTRUE 43198
43196: GO 43209
43198: POP
// tech := tech_bazooka ; end ;
43199: LD_ADDR_VAR 0 5
43203: PUSH
43204: LD_INT 44
43206: ST_TO_ADDR
43207: GO 43210
43209: POP
// if Researched ( side , tech ) then
43210: LD_VAR 0 3
43214: PPUSH
43215: LD_VAR 0 5
43219: PPUSH
43220: CALL_OW 325
43224: IFFALSE 43251
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43226: LD_ADDR_VAR 0 2
43230: PUSH
43231: LD_INT 5
43233: PUSH
43234: LD_INT 8
43236: PUSH
43237: LD_INT 9
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: LIST
43244: PUSH
43245: LD_VAR 0 4
43249: ARRAY
43250: ST_TO_ADDR
// end ;
43251: LD_VAR 0 2
43255: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43256: LD_INT 0
43258: PPUSH
43259: PPUSH
43260: PPUSH
// if not mines then
43261: LD_VAR 0 2
43265: NOT
43266: IFFALSE 43270
// exit ;
43268: GO 43414
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43270: LD_ADDR_VAR 0 5
43274: PUSH
43275: LD_INT 81
43277: PUSH
43278: LD_VAR 0 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 3
43289: PUSH
43290: LD_INT 21
43292: PUSH
43293: LD_INT 3
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PPUSH
43308: CALL_OW 69
43312: ST_TO_ADDR
// for i in mines do
43313: LD_ADDR_VAR 0 4
43317: PUSH
43318: LD_VAR 0 2
43322: PUSH
43323: FOR_IN
43324: IFFALSE 43412
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43326: LD_VAR 0 4
43330: PUSH
43331: LD_INT 1
43333: ARRAY
43334: PPUSH
43335: LD_VAR 0 4
43339: PUSH
43340: LD_INT 2
43342: ARRAY
43343: PPUSH
43344: CALL_OW 458
43348: NOT
43349: IFFALSE 43353
// continue ;
43351: GO 43323
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43353: LD_VAR 0 4
43357: PUSH
43358: LD_INT 1
43360: ARRAY
43361: PPUSH
43362: LD_VAR 0 4
43366: PUSH
43367: LD_INT 2
43369: ARRAY
43370: PPUSH
43371: CALL_OW 428
43375: PUSH
43376: LD_VAR 0 5
43380: IN
43381: IFFALSE 43410
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43383: LD_VAR 0 4
43387: PUSH
43388: LD_INT 1
43390: ARRAY
43391: PPUSH
43392: LD_VAR 0 4
43396: PUSH
43397: LD_INT 2
43399: ARRAY
43400: PPUSH
43401: LD_VAR 0 1
43405: PPUSH
43406: CALL_OW 456
// end ;
43410: GO 43323
43412: POP
43413: POP
// end ;
43414: LD_VAR 0 3
43418: RET
// export function Count ( array ) ; begin
43419: LD_INT 0
43421: PPUSH
// result := array + 0 ;
43422: LD_ADDR_VAR 0 2
43426: PUSH
43427: LD_VAR 0 1
43431: PUSH
43432: LD_INT 0
43434: PLUS
43435: ST_TO_ADDR
// end ;
43436: LD_VAR 0 2
43440: RET
// export function IsEmpty ( building ) ; begin
43441: LD_INT 0
43443: PPUSH
// if not building then
43444: LD_VAR 0 1
43448: NOT
43449: IFFALSE 43453
// exit ;
43451: GO 43496
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43453: LD_ADDR_VAR 0 2
43457: PUSH
43458: LD_VAR 0 1
43462: PUSH
43463: LD_INT 22
43465: PUSH
43466: LD_VAR 0 1
43470: PPUSH
43471: CALL_OW 255
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 58
43482: PUSH
43483: EMPTY
43484: LIST
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PPUSH
43490: CALL_OW 69
43494: IN
43495: ST_TO_ADDR
// end ;
43496: LD_VAR 0 2
43500: RET
// export function IsNotFull ( building ) ; var places ; begin
43501: LD_INT 0
43503: PPUSH
43504: PPUSH
// if not building then
43505: LD_VAR 0 1
43509: NOT
43510: IFFALSE 43514
// exit ;
43512: GO 43542
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43514: LD_ADDR_VAR 0 2
43518: PUSH
43519: LD_VAR 0 1
43523: PPUSH
43524: LD_INT 3
43526: PUSH
43527: LD_INT 62
43529: PUSH
43530: EMPTY
43531: LIST
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PPUSH
43537: CALL_OW 72
43541: ST_TO_ADDR
// end ;
43542: LD_VAR 0 2
43546: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43547: LD_INT 0
43549: PPUSH
43550: PPUSH
43551: PPUSH
43552: PPUSH
// tmp := [ ] ;
43553: LD_ADDR_VAR 0 3
43557: PUSH
43558: EMPTY
43559: ST_TO_ADDR
// list := [ ] ;
43560: LD_ADDR_VAR 0 5
43564: PUSH
43565: EMPTY
43566: ST_TO_ADDR
// for i = 16 to 25 do
43567: LD_ADDR_VAR 0 4
43571: PUSH
43572: DOUBLE
43573: LD_INT 16
43575: DEC
43576: ST_TO_ADDR
43577: LD_INT 25
43579: PUSH
43580: FOR_TO
43581: IFFALSE 43654
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43583: LD_ADDR_VAR 0 3
43587: PUSH
43588: LD_VAR 0 3
43592: PUSH
43593: LD_INT 22
43595: PUSH
43596: LD_VAR 0 1
43600: PPUSH
43601: CALL_OW 255
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 91
43612: PUSH
43613: LD_VAR 0 1
43617: PUSH
43618: LD_INT 6
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 30
43628: PUSH
43629: LD_VAR 0 4
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: LIST
43642: PUSH
43643: EMPTY
43644: LIST
43645: PPUSH
43646: CALL_OW 69
43650: ADD
43651: ST_TO_ADDR
43652: GO 43580
43654: POP
43655: POP
// for i = 1 to tmp do
43656: LD_ADDR_VAR 0 4
43660: PUSH
43661: DOUBLE
43662: LD_INT 1
43664: DEC
43665: ST_TO_ADDR
43666: LD_VAR 0 3
43670: PUSH
43671: FOR_TO
43672: IFFALSE 43760
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43674: LD_ADDR_VAR 0 5
43678: PUSH
43679: LD_VAR 0 5
43683: PUSH
43684: LD_VAR 0 3
43688: PUSH
43689: LD_VAR 0 4
43693: ARRAY
43694: PPUSH
43695: CALL_OW 266
43699: PUSH
43700: LD_VAR 0 3
43704: PUSH
43705: LD_VAR 0 4
43709: ARRAY
43710: PPUSH
43711: CALL_OW 250
43715: PUSH
43716: LD_VAR 0 3
43720: PUSH
43721: LD_VAR 0 4
43725: ARRAY
43726: PPUSH
43727: CALL_OW 251
43731: PUSH
43732: LD_VAR 0 3
43736: PUSH
43737: LD_VAR 0 4
43741: ARRAY
43742: PPUSH
43743: CALL_OW 254
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: PUSH
43754: EMPTY
43755: LIST
43756: ADD
43757: ST_TO_ADDR
43758: GO 43671
43760: POP
43761: POP
// result := list ;
43762: LD_ADDR_VAR 0 2
43766: PUSH
43767: LD_VAR 0 5
43771: ST_TO_ADDR
// end ;
43772: LD_VAR 0 2
43776: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43777: LD_INT 0
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
// if not factory then
43786: LD_VAR 0 1
43790: NOT
43791: IFFALSE 43795
// exit ;
43793: GO 44398
// if control = control_apeman then
43795: LD_VAR 0 4
43799: PUSH
43800: LD_INT 5
43802: EQUAL
43803: IFFALSE 43912
// begin tmp := UnitsInside ( factory ) ;
43805: LD_ADDR_VAR 0 8
43809: PUSH
43810: LD_VAR 0 1
43814: PPUSH
43815: CALL_OW 313
43819: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43820: LD_VAR 0 8
43824: PPUSH
43825: LD_INT 25
43827: PUSH
43828: LD_INT 12
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PPUSH
43835: CALL_OW 72
43839: NOT
43840: IFFALSE 43850
// control := control_manual ;
43842: LD_ADDR_VAR 0 4
43846: PUSH
43847: LD_INT 1
43849: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43850: LD_ADDR_VAR 0 8
43854: PUSH
43855: LD_VAR 0 1
43859: PPUSH
43860: CALL 43547 0 1
43864: ST_TO_ADDR
// if tmp then
43865: LD_VAR 0 8
43869: IFFALSE 43912
// begin for i in tmp do
43871: LD_ADDR_VAR 0 7
43875: PUSH
43876: LD_VAR 0 8
43880: PUSH
43881: FOR_IN
43882: IFFALSE 43910
// if i [ 1 ] = b_ext_radio then
43884: LD_VAR 0 7
43888: PUSH
43889: LD_INT 1
43891: ARRAY
43892: PUSH
43893: LD_INT 22
43895: EQUAL
43896: IFFALSE 43908
// begin control := control_remote ;
43898: LD_ADDR_VAR 0 4
43902: PUSH
43903: LD_INT 2
43905: ST_TO_ADDR
// break ;
43906: GO 43910
// end ;
43908: GO 43881
43910: POP
43911: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43912: LD_VAR 0 1
43916: PPUSH
43917: LD_VAR 0 2
43921: PPUSH
43922: LD_VAR 0 3
43926: PPUSH
43927: LD_VAR 0 4
43931: PPUSH
43932: LD_VAR 0 5
43936: PPUSH
43937: CALL_OW 448
43941: IFFALSE 43976
// begin result := [ chassis , engine , control , weapon ] ;
43943: LD_ADDR_VAR 0 6
43947: PUSH
43948: LD_VAR 0 2
43952: PUSH
43953: LD_VAR 0 3
43957: PUSH
43958: LD_VAR 0 4
43962: PUSH
43963: LD_VAR 0 5
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: ST_TO_ADDR
// exit ;
43974: GO 44398
// end ; _chassis := AvailableChassisList ( factory ) ;
43976: LD_ADDR_VAR 0 9
43980: PUSH
43981: LD_VAR 0 1
43985: PPUSH
43986: CALL_OW 475
43990: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43991: LD_ADDR_VAR 0 11
43995: PUSH
43996: LD_VAR 0 1
44000: PPUSH
44001: CALL_OW 476
44005: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44006: LD_ADDR_VAR 0 12
44010: PUSH
44011: LD_VAR 0 1
44015: PPUSH
44016: CALL_OW 477
44020: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44021: LD_ADDR_VAR 0 10
44025: PUSH
44026: LD_VAR 0 1
44030: PPUSH
44031: CALL_OW 478
44035: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44036: LD_VAR 0 9
44040: NOT
44041: IFTRUE 44050
44043: PUSH
44044: LD_VAR 0 11
44048: NOT
44049: OR
44050: IFTRUE 44059
44052: PUSH
44053: LD_VAR 0 12
44057: NOT
44058: OR
44059: IFTRUE 44068
44061: PUSH
44062: LD_VAR 0 10
44066: NOT
44067: OR
44068: IFFALSE 44103
// begin result := [ chassis , engine , control , weapon ] ;
44070: LD_ADDR_VAR 0 6
44074: PUSH
44075: LD_VAR 0 2
44079: PUSH
44080: LD_VAR 0 3
44084: PUSH
44085: LD_VAR 0 4
44089: PUSH
44090: LD_VAR 0 5
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: ST_TO_ADDR
// exit ;
44101: GO 44398
// end ; if not chassis in _chassis then
44103: LD_VAR 0 2
44107: PUSH
44108: LD_VAR 0 9
44112: IN
44113: NOT
44114: IFFALSE 44140
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44116: LD_ADDR_VAR 0 2
44120: PUSH
44121: LD_VAR 0 9
44125: PUSH
44126: LD_INT 1
44128: PPUSH
44129: LD_VAR 0 9
44133: PPUSH
44134: CALL_OW 12
44138: ARRAY
44139: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44140: LD_VAR 0 2
44144: PPUSH
44145: LD_VAR 0 3
44149: PPUSH
44150: CALL 44403 0 2
44154: NOT
44155: IFFALSE 44216
// repeat engine := _engine [ 1 ] ;
44157: LD_ADDR_VAR 0 3
44161: PUSH
44162: LD_VAR 0 11
44166: PUSH
44167: LD_INT 1
44169: ARRAY
44170: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44171: LD_ADDR_VAR 0 11
44175: PUSH
44176: LD_VAR 0 11
44180: PPUSH
44181: LD_INT 1
44183: PPUSH
44184: CALL_OW 3
44188: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44189: LD_VAR 0 2
44193: PPUSH
44194: LD_VAR 0 3
44198: PPUSH
44199: CALL 44403 0 2
44203: IFTRUE 44214
44205: PUSH
44206: LD_VAR 0 11
44210: PUSH
44211: EMPTY
44212: EQUAL
44213: OR
44214: IFFALSE 44157
// if not control in _control then
44216: LD_VAR 0 4
44220: PUSH
44221: LD_VAR 0 12
44225: IN
44226: NOT
44227: IFFALSE 44253
// control := _control [ rand ( 1 , _control ) ] ;
44229: LD_ADDR_VAR 0 4
44233: PUSH
44234: LD_VAR 0 12
44238: PUSH
44239: LD_INT 1
44241: PPUSH
44242: LD_VAR 0 12
44246: PPUSH
44247: CALL_OW 12
44251: ARRAY
44252: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44253: LD_VAR 0 2
44257: PPUSH
44258: LD_VAR 0 5
44262: PPUSH
44263: CALL 44625 0 2
44267: NOT
44268: IFFALSE 44329
// repeat weapon := _weapon [ 1 ] ;
44270: LD_ADDR_VAR 0 5
44274: PUSH
44275: LD_VAR 0 10
44279: PUSH
44280: LD_INT 1
44282: ARRAY
44283: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44284: LD_ADDR_VAR 0 10
44288: PUSH
44289: LD_VAR 0 10
44293: PPUSH
44294: LD_INT 1
44296: PPUSH
44297: CALL_OW 3
44301: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44302: LD_VAR 0 2
44306: PPUSH
44307: LD_VAR 0 5
44311: PPUSH
44312: CALL 44625 0 2
44316: IFTRUE 44327
44318: PUSH
44319: LD_VAR 0 10
44323: PUSH
44324: EMPTY
44325: EQUAL
44326: OR
44327: IFFALSE 44270
// result := [ ] ;
44329: LD_ADDR_VAR 0 6
44333: PUSH
44334: EMPTY
44335: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44336: LD_VAR 0 1
44340: PPUSH
44341: LD_VAR 0 2
44345: PPUSH
44346: LD_VAR 0 3
44350: PPUSH
44351: LD_VAR 0 4
44355: PPUSH
44356: LD_VAR 0 5
44360: PPUSH
44361: CALL_OW 448
44365: IFFALSE 44398
// result := [ chassis , engine , control , weapon ] ;
44367: LD_ADDR_VAR 0 6
44371: PUSH
44372: LD_VAR 0 2
44376: PUSH
44377: LD_VAR 0 3
44381: PUSH
44382: LD_VAR 0 4
44386: PUSH
44387: LD_VAR 0 5
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: ST_TO_ADDR
// end ;
44398: LD_VAR 0 6
44402: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44403: LD_INT 0
44405: PPUSH
// if not chassis or not engine then
44406: LD_VAR 0 1
44410: NOT
44411: IFTRUE 44420
44413: PUSH
44414: LD_VAR 0 2
44418: NOT
44419: OR
44420: IFFALSE 44424
// exit ;
44422: GO 44620
// case engine of engine_solar :
44424: LD_VAR 0 2
44428: PUSH
44429: LD_INT 2
44431: DOUBLE
44432: EQUAL
44433: IFTRUE 44437
44435: GO 44475
44437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44438: LD_ADDR_VAR 0 3
44442: PUSH
44443: LD_INT 11
44445: PUSH
44446: LD_INT 12
44448: PUSH
44449: LD_INT 13
44451: PUSH
44452: LD_INT 14
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: LD_INT 2
44460: PUSH
44461: LD_INT 3
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: ST_TO_ADDR
44473: GO 44604
44475: LD_INT 1
44477: DOUBLE
44478: EQUAL
44479: IFTRUE 44483
44481: GO 44545
44483: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44484: LD_ADDR_VAR 0 3
44488: PUSH
44489: LD_INT 11
44491: PUSH
44492: LD_INT 12
44494: PUSH
44495: LD_INT 13
44497: PUSH
44498: LD_INT 14
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: LD_INT 3
44509: PUSH
44510: LD_INT 4
44512: PUSH
44513: LD_INT 5
44515: PUSH
44516: LD_INT 21
44518: PUSH
44519: LD_INT 23
44521: PUSH
44522: LD_INT 22
44524: PUSH
44525: LD_INT 24
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: ST_TO_ADDR
44543: GO 44604
44545: LD_INT 3
44547: DOUBLE
44548: EQUAL
44549: IFTRUE 44553
44551: GO 44603
44553: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44554: LD_ADDR_VAR 0 3
44558: PUSH
44559: LD_INT 13
44561: PUSH
44562: LD_INT 14
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: LD_INT 3
44570: PUSH
44571: LD_INT 4
44573: PUSH
44574: LD_INT 5
44576: PUSH
44577: LD_INT 21
44579: PUSH
44580: LD_INT 22
44582: PUSH
44583: LD_INT 23
44585: PUSH
44586: LD_INT 24
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: ST_TO_ADDR
44601: GO 44604
44603: POP
// result := ( chassis in result ) ;
44604: LD_ADDR_VAR 0 3
44608: PUSH
44609: LD_VAR 0 1
44613: PUSH
44614: LD_VAR 0 3
44618: IN
44619: ST_TO_ADDR
// end ;
44620: LD_VAR 0 3
44624: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44625: LD_INT 0
44627: PPUSH
// if not chassis or not weapon then
44628: LD_VAR 0 1
44632: NOT
44633: IFTRUE 44642
44635: PUSH
44636: LD_VAR 0 2
44640: NOT
44641: OR
44642: IFFALSE 44646
// exit ;
44644: GO 45706
// case weapon of us_machine_gun :
44646: LD_VAR 0 2
44650: PUSH
44651: LD_INT 2
44653: DOUBLE
44654: EQUAL
44655: IFTRUE 44659
44657: GO 44689
44659: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44660: LD_ADDR_VAR 0 3
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 3
44673: PUSH
44674: LD_INT 4
44676: PUSH
44677: LD_INT 5
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: ST_TO_ADDR
44687: GO 45690
44689: LD_INT 3
44691: DOUBLE
44692: EQUAL
44693: IFTRUE 44697
44695: GO 44727
44697: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44698: LD_ADDR_VAR 0 3
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 3
44711: PUSH
44712: LD_INT 4
44714: PUSH
44715: LD_INT 5
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: ST_TO_ADDR
44725: GO 45690
44727: LD_INT 11
44729: DOUBLE
44730: EQUAL
44731: IFTRUE 44735
44733: GO 44765
44735: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44736: LD_ADDR_VAR 0 3
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: LD_INT 3
44749: PUSH
44750: LD_INT 4
44752: PUSH
44753: LD_INT 5
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: ST_TO_ADDR
44763: GO 45690
44765: LD_INT 4
44767: DOUBLE
44768: EQUAL
44769: IFTRUE 44773
44771: GO 44799
44773: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44774: LD_ADDR_VAR 0 3
44778: PUSH
44779: LD_INT 2
44781: PUSH
44782: LD_INT 3
44784: PUSH
44785: LD_INT 4
44787: PUSH
44788: LD_INT 5
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: ST_TO_ADDR
44797: GO 45690
44799: LD_INT 5
44801: DOUBLE
44802: EQUAL
44803: IFTRUE 44807
44805: GO 44833
44807: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44808: LD_ADDR_VAR 0 3
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: LD_INT 3
44818: PUSH
44819: LD_INT 4
44821: PUSH
44822: LD_INT 5
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: ST_TO_ADDR
44831: GO 45690
44833: LD_INT 9
44835: DOUBLE
44836: EQUAL
44837: IFTRUE 44841
44839: GO 44867
44841: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44842: LD_ADDR_VAR 0 3
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: LD_INT 3
44852: PUSH
44853: LD_INT 4
44855: PUSH
44856: LD_INT 5
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: ST_TO_ADDR
44865: GO 45690
44867: LD_INT 7
44869: DOUBLE
44870: EQUAL
44871: IFTRUE 44875
44873: GO 44901
44875: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44876: LD_ADDR_VAR 0 3
44880: PUSH
44881: LD_INT 2
44883: PUSH
44884: LD_INT 3
44886: PUSH
44887: LD_INT 4
44889: PUSH
44890: LD_INT 5
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: ST_TO_ADDR
44899: GO 45690
44901: LD_INT 12
44903: DOUBLE
44904: EQUAL
44905: IFTRUE 44909
44907: GO 44935
44909: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44910: LD_ADDR_VAR 0 3
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: LD_INT 3
44920: PUSH
44921: LD_INT 4
44923: PUSH
44924: LD_INT 5
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: ST_TO_ADDR
44933: GO 45690
44935: LD_INT 13
44937: DOUBLE
44938: EQUAL
44939: IFTRUE 44943
44941: GO 44969
44943: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44944: LD_ADDR_VAR 0 3
44948: PUSH
44949: LD_INT 2
44951: PUSH
44952: LD_INT 3
44954: PUSH
44955: LD_INT 4
44957: PUSH
44958: LD_INT 5
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: ST_TO_ADDR
44967: GO 45690
44969: LD_INT 14
44971: DOUBLE
44972: EQUAL
44973: IFTRUE 44977
44975: GO 44995
44977: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44978: LD_ADDR_VAR 0 3
44982: PUSH
44983: LD_INT 4
44985: PUSH
44986: LD_INT 5
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: ST_TO_ADDR
44993: GO 45690
44995: LD_INT 6
44997: DOUBLE
44998: EQUAL
44999: IFTRUE 45003
45001: GO 45021
45003: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45004: LD_ADDR_VAR 0 3
45008: PUSH
45009: LD_INT 4
45011: PUSH
45012: LD_INT 5
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: ST_TO_ADDR
45019: GO 45690
45021: LD_INT 10
45023: DOUBLE
45024: EQUAL
45025: IFTRUE 45029
45027: GO 45047
45029: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45030: LD_ADDR_VAR 0 3
45034: PUSH
45035: LD_INT 4
45037: PUSH
45038: LD_INT 5
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: ST_TO_ADDR
45045: GO 45690
45047: LD_INT 22
45049: DOUBLE
45050: EQUAL
45051: IFTRUE 45055
45053: GO 45081
45055: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45056: LD_ADDR_VAR 0 3
45060: PUSH
45061: LD_INT 11
45063: PUSH
45064: LD_INT 12
45066: PUSH
45067: LD_INT 13
45069: PUSH
45070: LD_INT 14
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: ST_TO_ADDR
45079: GO 45690
45081: LD_INT 23
45083: DOUBLE
45084: EQUAL
45085: IFTRUE 45089
45087: GO 45115
45089: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45090: LD_ADDR_VAR 0 3
45094: PUSH
45095: LD_INT 11
45097: PUSH
45098: LD_INT 12
45100: PUSH
45101: LD_INT 13
45103: PUSH
45104: LD_INT 14
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: ST_TO_ADDR
45113: GO 45690
45115: LD_INT 24
45117: DOUBLE
45118: EQUAL
45119: IFTRUE 45123
45121: GO 45149
45123: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45124: LD_ADDR_VAR 0 3
45128: PUSH
45129: LD_INT 11
45131: PUSH
45132: LD_INT 12
45134: PUSH
45135: LD_INT 13
45137: PUSH
45138: LD_INT 14
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: ST_TO_ADDR
45147: GO 45690
45149: LD_INT 30
45151: DOUBLE
45152: EQUAL
45153: IFTRUE 45157
45155: GO 45183
45157: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45158: LD_ADDR_VAR 0 3
45162: PUSH
45163: LD_INT 11
45165: PUSH
45166: LD_INT 12
45168: PUSH
45169: LD_INT 13
45171: PUSH
45172: LD_INT 14
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: ST_TO_ADDR
45181: GO 45690
45183: LD_INT 25
45185: DOUBLE
45186: EQUAL
45187: IFTRUE 45191
45189: GO 45209
45191: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45192: LD_ADDR_VAR 0 3
45196: PUSH
45197: LD_INT 13
45199: PUSH
45200: LD_INT 14
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: ST_TO_ADDR
45207: GO 45690
45209: LD_INT 27
45211: DOUBLE
45212: EQUAL
45213: IFTRUE 45217
45215: GO 45235
45217: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45218: LD_ADDR_VAR 0 3
45222: PUSH
45223: LD_INT 13
45225: PUSH
45226: LD_INT 14
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: ST_TO_ADDR
45233: GO 45690
45235: LD_INT 92
45237: DOUBLE
45238: EQUAL
45239: IFTRUE 45243
45241: GO 45269
45243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45244: LD_ADDR_VAR 0 3
45248: PUSH
45249: LD_INT 11
45251: PUSH
45252: LD_INT 12
45254: PUSH
45255: LD_INT 13
45257: PUSH
45258: LD_INT 14
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: ST_TO_ADDR
45267: GO 45690
45269: LD_INT 28
45271: DOUBLE
45272: EQUAL
45273: IFTRUE 45277
45275: GO 45295
45277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45278: LD_ADDR_VAR 0 3
45282: PUSH
45283: LD_INT 13
45285: PUSH
45286: LD_INT 14
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: ST_TO_ADDR
45293: GO 45690
45295: LD_INT 29
45297: DOUBLE
45298: EQUAL
45299: IFTRUE 45303
45301: GO 45321
45303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45304: LD_ADDR_VAR 0 3
45308: PUSH
45309: LD_INT 13
45311: PUSH
45312: LD_INT 14
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: ST_TO_ADDR
45319: GO 45690
45321: LD_INT 31
45323: DOUBLE
45324: EQUAL
45325: IFTRUE 45329
45327: GO 45347
45329: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45330: LD_ADDR_VAR 0 3
45334: PUSH
45335: LD_INT 13
45337: PUSH
45338: LD_INT 14
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: ST_TO_ADDR
45345: GO 45690
45347: LD_INT 26
45349: DOUBLE
45350: EQUAL
45351: IFTRUE 45355
45353: GO 45373
45355: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45356: LD_ADDR_VAR 0 3
45360: PUSH
45361: LD_INT 13
45363: PUSH
45364: LD_INT 14
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: ST_TO_ADDR
45371: GO 45690
45373: LD_INT 42
45375: DOUBLE
45376: EQUAL
45377: IFTRUE 45381
45379: GO 45407
45381: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45382: LD_ADDR_VAR 0 3
45386: PUSH
45387: LD_INT 21
45389: PUSH
45390: LD_INT 22
45392: PUSH
45393: LD_INT 23
45395: PUSH
45396: LD_INT 24
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: ST_TO_ADDR
45405: GO 45690
45407: LD_INT 43
45409: DOUBLE
45410: EQUAL
45411: IFTRUE 45415
45413: GO 45441
45415: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45416: LD_ADDR_VAR 0 3
45420: PUSH
45421: LD_INT 21
45423: PUSH
45424: LD_INT 22
45426: PUSH
45427: LD_INT 23
45429: PUSH
45430: LD_INT 24
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: ST_TO_ADDR
45439: GO 45690
45441: LD_INT 44
45443: DOUBLE
45444: EQUAL
45445: IFTRUE 45449
45447: GO 45475
45449: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45450: LD_ADDR_VAR 0 3
45454: PUSH
45455: LD_INT 21
45457: PUSH
45458: LD_INT 22
45460: PUSH
45461: LD_INT 23
45463: PUSH
45464: LD_INT 24
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: ST_TO_ADDR
45473: GO 45690
45475: LD_INT 45
45477: DOUBLE
45478: EQUAL
45479: IFTRUE 45483
45481: GO 45509
45483: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45484: LD_ADDR_VAR 0 3
45488: PUSH
45489: LD_INT 21
45491: PUSH
45492: LD_INT 22
45494: PUSH
45495: LD_INT 23
45497: PUSH
45498: LD_INT 24
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: ST_TO_ADDR
45507: GO 45690
45509: LD_INT 49
45511: DOUBLE
45512: EQUAL
45513: IFTRUE 45517
45515: GO 45543
45517: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45518: LD_ADDR_VAR 0 3
45522: PUSH
45523: LD_INT 21
45525: PUSH
45526: LD_INT 22
45528: PUSH
45529: LD_INT 23
45531: PUSH
45532: LD_INT 24
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: ST_TO_ADDR
45541: GO 45690
45543: LD_INT 51
45545: DOUBLE
45546: EQUAL
45547: IFTRUE 45551
45549: GO 45577
45551: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45552: LD_ADDR_VAR 0 3
45556: PUSH
45557: LD_INT 21
45559: PUSH
45560: LD_INT 22
45562: PUSH
45563: LD_INT 23
45565: PUSH
45566: LD_INT 24
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: ST_TO_ADDR
45575: GO 45690
45577: LD_INT 52
45579: DOUBLE
45580: EQUAL
45581: IFTRUE 45585
45583: GO 45611
45585: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45586: LD_ADDR_VAR 0 3
45590: PUSH
45591: LD_INT 21
45593: PUSH
45594: LD_INT 22
45596: PUSH
45597: LD_INT 23
45599: PUSH
45600: LD_INT 24
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: ST_TO_ADDR
45609: GO 45690
45611: LD_INT 53
45613: DOUBLE
45614: EQUAL
45615: IFTRUE 45619
45617: GO 45637
45619: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45620: LD_ADDR_VAR 0 3
45624: PUSH
45625: LD_INT 23
45627: PUSH
45628: LD_INT 24
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: ST_TO_ADDR
45635: GO 45690
45637: LD_INT 46
45639: DOUBLE
45640: EQUAL
45641: IFTRUE 45645
45643: GO 45663
45645: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45646: LD_ADDR_VAR 0 3
45650: PUSH
45651: LD_INT 23
45653: PUSH
45654: LD_INT 24
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: ST_TO_ADDR
45661: GO 45690
45663: LD_INT 47
45665: DOUBLE
45666: EQUAL
45667: IFTRUE 45671
45669: GO 45689
45671: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45672: LD_ADDR_VAR 0 3
45676: PUSH
45677: LD_INT 23
45679: PUSH
45680: LD_INT 24
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: ST_TO_ADDR
45687: GO 45690
45689: POP
// result := ( chassis in result ) ;
45690: LD_ADDR_VAR 0 3
45694: PUSH
45695: LD_VAR 0 1
45699: PUSH
45700: LD_VAR 0 3
45704: IN
45705: ST_TO_ADDR
// end ;
45706: LD_VAR 0 3
45710: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45711: LD_INT 0
45713: PPUSH
45714: PPUSH
45715: PPUSH
45716: PPUSH
45717: PPUSH
45718: PPUSH
45719: PPUSH
// result := array ;
45720: LD_ADDR_VAR 0 5
45724: PUSH
45725: LD_VAR 0 1
45729: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45730: LD_VAR 0 1
45734: NOT
45735: IFTRUE 45744
45737: PUSH
45738: LD_VAR 0 2
45742: NOT
45743: OR
45744: IFTRUE 45753
45746: PUSH
45747: LD_VAR 0 3
45751: NOT
45752: OR
45753: IFTRUE 45767
45755: PUSH
45756: LD_VAR 0 2
45760: PUSH
45761: LD_VAR 0 1
45765: GREATER
45766: OR
45767: IFTRUE 45781
45769: PUSH
45770: LD_VAR 0 3
45774: PUSH
45775: LD_VAR 0 1
45779: GREATER
45780: OR
45781: IFFALSE 45785
// exit ;
45783: GO 46081
// if direction then
45785: LD_VAR 0 4
45789: IFFALSE 45853
// begin d := 1 ;
45791: LD_ADDR_VAR 0 9
45795: PUSH
45796: LD_INT 1
45798: ST_TO_ADDR
// if i_from > i_to then
45799: LD_VAR 0 2
45803: PUSH
45804: LD_VAR 0 3
45808: GREATER
45809: IFFALSE 45835
// length := ( array - i_from ) + i_to else
45811: LD_ADDR_VAR 0 11
45815: PUSH
45816: LD_VAR 0 1
45820: PUSH
45821: LD_VAR 0 2
45825: MINUS
45826: PUSH
45827: LD_VAR 0 3
45831: PLUS
45832: ST_TO_ADDR
45833: GO 45851
// length := i_to - i_from ;
45835: LD_ADDR_VAR 0 11
45839: PUSH
45840: LD_VAR 0 3
45844: PUSH
45845: LD_VAR 0 2
45849: MINUS
45850: ST_TO_ADDR
// end else
45851: GO 45914
// begin d := - 1 ;
45853: LD_ADDR_VAR 0 9
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: ST_TO_ADDR
// if i_from > i_to then
45862: LD_VAR 0 2
45866: PUSH
45867: LD_VAR 0 3
45871: GREATER
45872: IFFALSE 45892
// length := i_from - i_to else
45874: LD_ADDR_VAR 0 11
45878: PUSH
45879: LD_VAR 0 2
45883: PUSH
45884: LD_VAR 0 3
45888: MINUS
45889: ST_TO_ADDR
45890: GO 45914
// length := ( array - i_to ) + i_from ;
45892: LD_ADDR_VAR 0 11
45896: PUSH
45897: LD_VAR 0 1
45901: PUSH
45902: LD_VAR 0 3
45906: MINUS
45907: PUSH
45908: LD_VAR 0 2
45912: PLUS
45913: ST_TO_ADDR
// end ; if not length then
45914: LD_VAR 0 11
45918: NOT
45919: IFFALSE 45923
// exit ;
45921: GO 46081
// tmp := array ;
45923: LD_ADDR_VAR 0 10
45927: PUSH
45928: LD_VAR 0 1
45932: ST_TO_ADDR
// for i = 1 to length do
45933: LD_ADDR_VAR 0 6
45937: PUSH
45938: DOUBLE
45939: LD_INT 1
45941: DEC
45942: ST_TO_ADDR
45943: LD_VAR 0 11
45947: PUSH
45948: FOR_TO
45949: IFFALSE 46069
// begin for j = 1 to array do
45951: LD_ADDR_VAR 0 7
45955: PUSH
45956: DOUBLE
45957: LD_INT 1
45959: DEC
45960: ST_TO_ADDR
45961: LD_VAR 0 1
45965: PUSH
45966: FOR_TO
45967: IFFALSE 46055
// begin k := j + d ;
45969: LD_ADDR_VAR 0 8
45973: PUSH
45974: LD_VAR 0 7
45978: PUSH
45979: LD_VAR 0 9
45983: PLUS
45984: ST_TO_ADDR
// if k > array then
45985: LD_VAR 0 8
45989: PUSH
45990: LD_VAR 0 1
45994: GREATER
45995: IFFALSE 46005
// k := 1 ;
45997: LD_ADDR_VAR 0 8
46001: PUSH
46002: LD_INT 1
46004: ST_TO_ADDR
// if not k then
46005: LD_VAR 0 8
46009: NOT
46010: IFFALSE 46022
// k := array ;
46012: LD_ADDR_VAR 0 8
46016: PUSH
46017: LD_VAR 0 1
46021: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46022: LD_ADDR_VAR 0 10
46026: PUSH
46027: LD_VAR 0 10
46031: PPUSH
46032: LD_VAR 0 8
46036: PPUSH
46037: LD_VAR 0 1
46041: PUSH
46042: LD_VAR 0 7
46046: ARRAY
46047: PPUSH
46048: CALL_OW 1
46052: ST_TO_ADDR
// end ;
46053: GO 45966
46055: POP
46056: POP
// array := tmp ;
46057: LD_ADDR_VAR 0 1
46061: PUSH
46062: LD_VAR 0 10
46066: ST_TO_ADDR
// end ;
46067: GO 45948
46069: POP
46070: POP
// result := array ;
46071: LD_ADDR_VAR 0 5
46075: PUSH
46076: LD_VAR 0 1
46080: ST_TO_ADDR
// end ;
46081: LD_VAR 0 5
46085: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46086: LD_INT 0
46088: PPUSH
46089: PPUSH
// result := 0 ;
46090: LD_ADDR_VAR 0 3
46094: PUSH
46095: LD_INT 0
46097: ST_TO_ADDR
// if not array or not value in array then
46098: LD_VAR 0 1
46102: NOT
46103: IFTRUE 46118
46105: PUSH
46106: LD_VAR 0 2
46110: PUSH
46111: LD_VAR 0 1
46115: IN
46116: NOT
46117: OR
46118: IFFALSE 46122
// exit ;
46120: GO 46176
// for i = 1 to array do
46122: LD_ADDR_VAR 0 4
46126: PUSH
46127: DOUBLE
46128: LD_INT 1
46130: DEC
46131: ST_TO_ADDR
46132: LD_VAR 0 1
46136: PUSH
46137: FOR_TO
46138: IFFALSE 46174
// if value = array [ i ] then
46140: LD_VAR 0 2
46144: PUSH
46145: LD_VAR 0 1
46149: PUSH
46150: LD_VAR 0 4
46154: ARRAY
46155: EQUAL
46156: IFFALSE 46172
// begin result := i ;
46158: LD_ADDR_VAR 0 3
46162: PUSH
46163: LD_VAR 0 4
46167: ST_TO_ADDR
// exit ;
46168: POP
46169: POP
46170: GO 46176
// end ;
46172: GO 46137
46174: POP
46175: POP
// end ;
46176: LD_VAR 0 3
46180: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46181: LD_INT 0
46183: PPUSH
// vc_chassis := chassis ;
46184: LD_ADDR_OWVAR 37
46188: PUSH
46189: LD_VAR 0 1
46193: ST_TO_ADDR
// vc_engine := engine ;
46194: LD_ADDR_OWVAR 39
46198: PUSH
46199: LD_VAR 0 2
46203: ST_TO_ADDR
// vc_control := control ;
46204: LD_ADDR_OWVAR 38
46208: PUSH
46209: LD_VAR 0 3
46213: ST_TO_ADDR
// vc_weapon := weapon ;
46214: LD_ADDR_OWVAR 40
46218: PUSH
46219: LD_VAR 0 4
46223: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46224: LD_ADDR_OWVAR 41
46228: PUSH
46229: LD_VAR 0 5
46233: ST_TO_ADDR
// end ;
46234: LD_VAR 0 6
46238: RET
// export function WantPlant ( unit ) ; var task ; begin
46239: LD_INT 0
46241: PPUSH
46242: PPUSH
// result := false ;
46243: LD_ADDR_VAR 0 2
46247: PUSH
46248: LD_INT 0
46250: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46251: LD_ADDR_VAR 0 3
46255: PUSH
46256: LD_VAR 0 1
46260: PPUSH
46261: CALL_OW 437
46265: ST_TO_ADDR
// if task then
46266: LD_VAR 0 3
46270: IFFALSE 46298
// if task [ 1 ] [ 1 ] = p then
46272: LD_VAR 0 3
46276: PUSH
46277: LD_INT 1
46279: ARRAY
46280: PUSH
46281: LD_INT 1
46283: ARRAY
46284: PUSH
46285: LD_STRING p
46287: EQUAL
46288: IFFALSE 46298
// result := true ;
46290: LD_ADDR_VAR 0 2
46294: PUSH
46295: LD_INT 1
46297: ST_TO_ADDR
// end ;
46298: LD_VAR 0 2
46302: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46303: LD_INT 0
46305: PPUSH
46306: PPUSH
46307: PPUSH
46308: PPUSH
// if pos < 1 then
46309: LD_VAR 0 2
46313: PUSH
46314: LD_INT 1
46316: LESS
46317: IFFALSE 46321
// exit ;
46319: GO 46624
// if pos = 1 then
46321: LD_VAR 0 2
46325: PUSH
46326: LD_INT 1
46328: EQUAL
46329: IFFALSE 46362
// result := Replace ( arr , pos [ 1 ] , value ) else
46331: LD_ADDR_VAR 0 4
46335: PUSH
46336: LD_VAR 0 1
46340: PPUSH
46341: LD_VAR 0 2
46345: PUSH
46346: LD_INT 1
46348: ARRAY
46349: PPUSH
46350: LD_VAR 0 3
46354: PPUSH
46355: CALL_OW 1
46359: ST_TO_ADDR
46360: GO 46624
// begin tmp := arr ;
46362: LD_ADDR_VAR 0 6
46366: PUSH
46367: LD_VAR 0 1
46371: ST_TO_ADDR
// s_arr := [ tmp ] ;
46372: LD_ADDR_VAR 0 7
46376: PUSH
46377: LD_VAR 0 6
46381: PUSH
46382: EMPTY
46383: LIST
46384: ST_TO_ADDR
// for i = 1 to pos - 1 do
46385: LD_ADDR_VAR 0 5
46389: PUSH
46390: DOUBLE
46391: LD_INT 1
46393: DEC
46394: ST_TO_ADDR
46395: LD_VAR 0 2
46399: PUSH
46400: LD_INT 1
46402: MINUS
46403: PUSH
46404: FOR_TO
46405: IFFALSE 46450
// begin tmp := tmp [ pos [ i ] ] ;
46407: LD_ADDR_VAR 0 6
46411: PUSH
46412: LD_VAR 0 6
46416: PUSH
46417: LD_VAR 0 2
46421: PUSH
46422: LD_VAR 0 5
46426: ARRAY
46427: ARRAY
46428: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46429: LD_ADDR_VAR 0 7
46433: PUSH
46434: LD_VAR 0 7
46438: PUSH
46439: LD_VAR 0 6
46443: PUSH
46444: EMPTY
46445: LIST
46446: ADD
46447: ST_TO_ADDR
// end ;
46448: GO 46404
46450: POP
46451: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46452: LD_ADDR_VAR 0 6
46456: PUSH
46457: LD_VAR 0 6
46461: PPUSH
46462: LD_VAR 0 2
46466: PUSH
46467: LD_VAR 0 2
46471: ARRAY
46472: PPUSH
46473: LD_VAR 0 3
46477: PPUSH
46478: CALL_OW 1
46482: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46483: LD_ADDR_VAR 0 7
46487: PUSH
46488: LD_VAR 0 7
46492: PPUSH
46493: LD_VAR 0 7
46497: PPUSH
46498: LD_VAR 0 6
46502: PPUSH
46503: CALL_OW 1
46507: ST_TO_ADDR
// for i = s_arr downto 2 do
46508: LD_ADDR_VAR 0 5
46512: PUSH
46513: DOUBLE
46514: LD_VAR 0 7
46518: INC
46519: ST_TO_ADDR
46520: LD_INT 2
46522: PUSH
46523: FOR_DOWNTO
46524: IFFALSE 46608
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46526: LD_ADDR_VAR 0 6
46530: PUSH
46531: LD_VAR 0 7
46535: PUSH
46536: LD_VAR 0 5
46540: PUSH
46541: LD_INT 1
46543: MINUS
46544: ARRAY
46545: PPUSH
46546: LD_VAR 0 2
46550: PUSH
46551: LD_VAR 0 5
46555: PUSH
46556: LD_INT 1
46558: MINUS
46559: ARRAY
46560: PPUSH
46561: LD_VAR 0 7
46565: PUSH
46566: LD_VAR 0 5
46570: ARRAY
46571: PPUSH
46572: CALL_OW 1
46576: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46577: LD_ADDR_VAR 0 7
46581: PUSH
46582: LD_VAR 0 7
46586: PPUSH
46587: LD_VAR 0 5
46591: PUSH
46592: LD_INT 1
46594: MINUS
46595: PPUSH
46596: LD_VAR 0 6
46600: PPUSH
46601: CALL_OW 1
46605: ST_TO_ADDR
// end ;
46606: GO 46523
46608: POP
46609: POP
// result := s_arr [ 1 ] ;
46610: LD_ADDR_VAR 0 4
46614: PUSH
46615: LD_VAR 0 7
46619: PUSH
46620: LD_INT 1
46622: ARRAY
46623: ST_TO_ADDR
// end ; end ;
46624: LD_VAR 0 4
46628: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46629: LD_INT 0
46631: PPUSH
46632: PPUSH
// if not list then
46633: LD_VAR 0 1
46637: NOT
46638: IFFALSE 46642
// exit ;
46640: GO 46733
// i := list [ pos1 ] ;
46642: LD_ADDR_VAR 0 5
46646: PUSH
46647: LD_VAR 0 1
46651: PUSH
46652: LD_VAR 0 2
46656: ARRAY
46657: ST_TO_ADDR
// if not i then
46658: LD_VAR 0 5
46662: NOT
46663: IFFALSE 46667
// exit ;
46665: GO 46733
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46667: LD_ADDR_VAR 0 1
46671: PUSH
46672: LD_VAR 0 1
46676: PPUSH
46677: LD_VAR 0 2
46681: PPUSH
46682: LD_VAR 0 1
46686: PUSH
46687: LD_VAR 0 3
46691: ARRAY
46692: PPUSH
46693: CALL_OW 1
46697: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46698: LD_ADDR_VAR 0 1
46702: PUSH
46703: LD_VAR 0 1
46707: PPUSH
46708: LD_VAR 0 3
46712: PPUSH
46713: LD_VAR 0 5
46717: PPUSH
46718: CALL_OW 1
46722: ST_TO_ADDR
// result := list ;
46723: LD_ADDR_VAR 0 4
46727: PUSH
46728: LD_VAR 0 1
46732: ST_TO_ADDR
// end ;
46733: LD_VAR 0 4
46737: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46738: LD_INT 0
46740: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46741: LD_ADDR_VAR 0 5
46745: PUSH
46746: LD_VAR 0 1
46750: PPUSH
46751: CALL_OW 250
46755: PPUSH
46756: LD_VAR 0 1
46760: PPUSH
46761: CALL_OW 251
46765: PPUSH
46766: LD_VAR 0 2
46770: PPUSH
46771: LD_VAR 0 3
46775: PPUSH
46776: LD_VAR 0 4
46780: PPUSH
46781: CALL 47163 0 5
46785: ST_TO_ADDR
// end ;
46786: LD_VAR 0 5
46790: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46791: LD_INT 0
46793: PPUSH
46794: PPUSH
46795: PPUSH
46796: PPUSH
// if not list or not unit then
46797: LD_VAR 0 2
46801: NOT
46802: IFTRUE 46811
46804: PUSH
46805: LD_VAR 0 1
46809: NOT
46810: OR
46811: IFFALSE 46815
// exit ;
46813: GO 47158
// result := [ ] ;
46815: LD_ADDR_VAR 0 5
46819: PUSH
46820: EMPTY
46821: ST_TO_ADDR
// for i in list do
46822: LD_ADDR_VAR 0 6
46826: PUSH
46827: LD_VAR 0 2
46831: PUSH
46832: FOR_IN
46833: IFFALSE 47051
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46835: LD_ADDR_VAR 0 8
46839: PUSH
46840: LD_VAR 0 1
46844: PPUSH
46845: LD_VAR 0 6
46849: PUSH
46850: LD_INT 1
46852: ARRAY
46853: PPUSH
46854: LD_VAR 0 6
46858: PUSH
46859: LD_INT 2
46861: ARRAY
46862: PPUSH
46863: CALL_OW 297
46867: ST_TO_ADDR
// if not Count ( result ) then
46868: LD_VAR 0 5
46872: PPUSH
46873: CALL 43419 0 1
46877: NOT
46878: IFFALSE 46911
// begin result := Join ( result , [ i , tmp ] ) ;
46880: LD_ADDR_VAR 0 5
46884: PUSH
46885: LD_VAR 0 5
46889: PPUSH
46890: LD_VAR 0 6
46894: PUSH
46895: LD_VAR 0 8
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PPUSH
46904: CALL 79351 0 2
46908: ST_TO_ADDR
// continue ;
46909: GO 46832
// end ; if result [ result ] [ 2 ] <= tmp then
46911: LD_VAR 0 5
46915: PUSH
46916: LD_VAR 0 5
46920: ARRAY
46921: PUSH
46922: LD_INT 2
46924: ARRAY
46925: PUSH
46926: LD_VAR 0 8
46930: LESSEQUAL
46931: IFFALSE 46964
// result := Join ( result , [ i , tmp ] ) else
46933: LD_ADDR_VAR 0 5
46937: PUSH
46938: LD_VAR 0 5
46942: PPUSH
46943: LD_VAR 0 6
46947: PUSH
46948: LD_VAR 0 8
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PPUSH
46957: CALL 79351 0 2
46961: ST_TO_ADDR
46962: GO 47049
// begin for j := 1 to Count ( result ) do
46964: LD_ADDR_VAR 0 7
46968: PUSH
46969: DOUBLE
46970: LD_INT 1
46972: DEC
46973: ST_TO_ADDR
46974: LD_VAR 0 5
46978: PPUSH
46979: CALL 43419 0 1
46983: PUSH
46984: FOR_TO
46985: IFFALSE 47047
// begin if tmp < result [ j ] [ 2 ] then
46987: LD_VAR 0 8
46991: PUSH
46992: LD_VAR 0 5
46996: PUSH
46997: LD_VAR 0 7
47001: ARRAY
47002: PUSH
47003: LD_INT 2
47005: ARRAY
47006: LESS
47007: IFFALSE 47045
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47009: LD_ADDR_VAR 0 5
47013: PUSH
47014: LD_VAR 0 5
47018: PPUSH
47019: LD_VAR 0 7
47023: PPUSH
47024: LD_VAR 0 6
47028: PUSH
47029: LD_VAR 0 8
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PPUSH
47038: CALL_OW 2
47042: ST_TO_ADDR
// break ;
47043: GO 47047
// end ; end ;
47045: GO 46984
47047: POP
47048: POP
// end ; end ;
47049: GO 46832
47051: POP
47052: POP
// if result and not asc then
47053: LD_VAR 0 5
47057: IFFALSE 47066
47059: PUSH
47060: LD_VAR 0 3
47064: NOT
47065: AND
47066: IFFALSE 47083
// result := ReverseArray ( result ) ;
47068: LD_ADDR_VAR 0 5
47072: PUSH
47073: LD_VAR 0 5
47077: PPUSH
47078: CALL 74441 0 1
47082: ST_TO_ADDR
// tmp := [ ] ;
47083: LD_ADDR_VAR 0 8
47087: PUSH
47088: EMPTY
47089: ST_TO_ADDR
// if mode then
47090: LD_VAR 0 4
47094: IFFALSE 47158
// begin for i := 1 to result do
47096: LD_ADDR_VAR 0 6
47100: PUSH
47101: DOUBLE
47102: LD_INT 1
47104: DEC
47105: ST_TO_ADDR
47106: LD_VAR 0 5
47110: PUSH
47111: FOR_TO
47112: IFFALSE 47146
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47114: LD_ADDR_VAR 0 8
47118: PUSH
47119: LD_VAR 0 8
47123: PPUSH
47124: LD_VAR 0 5
47128: PUSH
47129: LD_VAR 0 6
47133: ARRAY
47134: PUSH
47135: LD_INT 1
47137: ARRAY
47138: PPUSH
47139: CALL 79351 0 2
47143: ST_TO_ADDR
47144: GO 47111
47146: POP
47147: POP
// result := tmp ;
47148: LD_ADDR_VAR 0 5
47152: PUSH
47153: LD_VAR 0 8
47157: ST_TO_ADDR
// end ; end ;
47158: LD_VAR 0 5
47162: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47163: LD_INT 0
47165: PPUSH
47166: PPUSH
47167: PPUSH
47168: PPUSH
// if not list then
47169: LD_VAR 0 3
47173: NOT
47174: IFFALSE 47178
// exit ;
47176: GO 47568
// result := [ ] ;
47178: LD_ADDR_VAR 0 6
47182: PUSH
47183: EMPTY
47184: ST_TO_ADDR
// for i in list do
47185: LD_ADDR_VAR 0 7
47189: PUSH
47190: LD_VAR 0 3
47194: PUSH
47195: FOR_IN
47196: IFFALSE 47398
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47198: LD_ADDR_VAR 0 9
47202: PUSH
47203: LD_VAR 0 7
47207: PPUSH
47208: LD_VAR 0 1
47212: PPUSH
47213: LD_VAR 0 2
47217: PPUSH
47218: CALL_OW 297
47222: ST_TO_ADDR
// if not result then
47223: LD_VAR 0 6
47227: NOT
47228: IFFALSE 47254
// result := [ [ i , tmp ] ] else
47230: LD_ADDR_VAR 0 6
47234: PUSH
47235: LD_VAR 0 7
47239: PUSH
47240: LD_VAR 0 9
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: EMPTY
47250: LIST
47251: ST_TO_ADDR
47252: GO 47396
// begin if result [ result ] [ 2 ] <= tmp then
47254: LD_VAR 0 6
47258: PUSH
47259: LD_VAR 0 6
47263: ARRAY
47264: PUSH
47265: LD_INT 2
47267: ARRAY
47268: PUSH
47269: LD_VAR 0 9
47273: LESSEQUAL
47274: IFFALSE 47316
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47276: LD_ADDR_VAR 0 6
47280: PUSH
47281: LD_VAR 0 6
47285: PPUSH
47286: LD_VAR 0 6
47290: PUSH
47291: LD_INT 1
47293: PLUS
47294: PPUSH
47295: LD_VAR 0 7
47299: PUSH
47300: LD_VAR 0 9
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PPUSH
47309: CALL_OW 2
47313: ST_TO_ADDR
47314: GO 47396
// for j := 1 to result do
47316: LD_ADDR_VAR 0 8
47320: PUSH
47321: DOUBLE
47322: LD_INT 1
47324: DEC
47325: ST_TO_ADDR
47326: LD_VAR 0 6
47330: PUSH
47331: FOR_TO
47332: IFFALSE 47394
// begin if tmp < result [ j ] [ 2 ] then
47334: LD_VAR 0 9
47338: PUSH
47339: LD_VAR 0 6
47343: PUSH
47344: LD_VAR 0 8
47348: ARRAY
47349: PUSH
47350: LD_INT 2
47352: ARRAY
47353: LESS
47354: IFFALSE 47392
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47356: LD_ADDR_VAR 0 6
47360: PUSH
47361: LD_VAR 0 6
47365: PPUSH
47366: LD_VAR 0 8
47370: PPUSH
47371: LD_VAR 0 7
47375: PUSH
47376: LD_VAR 0 9
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PPUSH
47385: CALL_OW 2
47389: ST_TO_ADDR
// break ;
47390: GO 47394
// end ; end ;
47392: GO 47331
47394: POP
47395: POP
// end ; end ;
47396: GO 47195
47398: POP
47399: POP
// if result and not asc then
47400: LD_VAR 0 6
47404: IFFALSE 47413
47406: PUSH
47407: LD_VAR 0 4
47411: NOT
47412: AND
47413: IFFALSE 47488
// begin tmp := result ;
47415: LD_ADDR_VAR 0 9
47419: PUSH
47420: LD_VAR 0 6
47424: ST_TO_ADDR
// for i = tmp downto 1 do
47425: LD_ADDR_VAR 0 7
47429: PUSH
47430: DOUBLE
47431: LD_VAR 0 9
47435: INC
47436: ST_TO_ADDR
47437: LD_INT 1
47439: PUSH
47440: FOR_DOWNTO
47441: IFFALSE 47486
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47443: LD_ADDR_VAR 0 6
47447: PUSH
47448: LD_VAR 0 6
47452: PPUSH
47453: LD_VAR 0 9
47457: PUSH
47458: LD_VAR 0 7
47462: MINUS
47463: PUSH
47464: LD_INT 1
47466: PLUS
47467: PPUSH
47468: LD_VAR 0 9
47472: PUSH
47473: LD_VAR 0 7
47477: ARRAY
47478: PPUSH
47479: CALL_OW 1
47483: ST_TO_ADDR
47484: GO 47440
47486: POP
47487: POP
// end ; tmp := [ ] ;
47488: LD_ADDR_VAR 0 9
47492: PUSH
47493: EMPTY
47494: ST_TO_ADDR
// if mode then
47495: LD_VAR 0 5
47499: IFFALSE 47568
// begin for i = 1 to result do
47501: LD_ADDR_VAR 0 7
47505: PUSH
47506: DOUBLE
47507: LD_INT 1
47509: DEC
47510: ST_TO_ADDR
47511: LD_VAR 0 6
47515: PUSH
47516: FOR_TO
47517: IFFALSE 47556
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47519: LD_ADDR_VAR 0 9
47523: PUSH
47524: LD_VAR 0 9
47528: PPUSH
47529: LD_VAR 0 7
47533: PPUSH
47534: LD_VAR 0 6
47538: PUSH
47539: LD_VAR 0 7
47543: ARRAY
47544: PUSH
47545: LD_INT 1
47547: ARRAY
47548: PPUSH
47549: CALL_OW 1
47553: ST_TO_ADDR
47554: GO 47516
47556: POP
47557: POP
// result := tmp ;
47558: LD_ADDR_VAR 0 6
47562: PUSH
47563: LD_VAR 0 9
47567: ST_TO_ADDR
// end ; end ;
47568: LD_VAR 0 6
47572: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47573: LD_INT 0
47575: PPUSH
47576: PPUSH
47577: PPUSH
47578: PPUSH
47579: PPUSH
47580: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47581: LD_ADDR_VAR 0 5
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: EMPTY
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: ST_TO_ADDR
// if not x or not y then
47603: LD_VAR 0 2
47607: NOT
47608: IFTRUE 47617
47610: PUSH
47611: LD_VAR 0 3
47615: NOT
47616: OR
47617: IFFALSE 47621
// exit ;
47619: GO 49277
// if not range then
47621: LD_VAR 0 4
47625: NOT
47626: IFFALSE 47636
// range := 10 ;
47628: LD_ADDR_VAR 0 4
47632: PUSH
47633: LD_INT 10
47635: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47636: LD_ADDR_VAR 0 8
47640: PUSH
47641: LD_INT 81
47643: PUSH
47644: LD_VAR 0 1
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 92
47655: PUSH
47656: LD_VAR 0 2
47660: PUSH
47661: LD_VAR 0 3
47665: PUSH
47666: LD_VAR 0 4
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 3
47679: PUSH
47680: LD_INT 21
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: LIST
47698: PPUSH
47699: CALL_OW 69
47703: ST_TO_ADDR
// if not tmp then
47704: LD_VAR 0 8
47708: NOT
47709: IFFALSE 47713
// exit ;
47711: GO 49277
// for i in tmp do
47713: LD_ADDR_VAR 0 6
47717: PUSH
47718: LD_VAR 0 8
47722: PUSH
47723: FOR_IN
47724: IFFALSE 49252
// begin points := [ 0 , 0 , 0 ] ;
47726: LD_ADDR_VAR 0 9
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: ST_TO_ADDR
// bpoints := 1 ;
47745: LD_ADDR_VAR 0 10
47749: PUSH
47750: LD_INT 1
47752: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47753: LD_VAR 0 6
47757: PPUSH
47758: CALL_OW 247
47762: PUSH
47763: LD_INT 1
47765: DOUBLE
47766: EQUAL
47767: IFTRUE 47771
47769: GO 48353
47771: POP
// begin if GetClass ( i ) = 1 then
47772: LD_VAR 0 6
47776: PPUSH
47777: CALL_OW 257
47781: PUSH
47782: LD_INT 1
47784: EQUAL
47785: IFFALSE 47806
// points := [ 10 , 5 , 3 ] ;
47787: LD_ADDR_VAR 0 9
47791: PUSH
47792: LD_INT 10
47794: PUSH
47795: LD_INT 5
47797: PUSH
47798: LD_INT 3
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: LIST
47805: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47806: LD_VAR 0 6
47810: PPUSH
47811: CALL_OW 257
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: LD_INT 3
47821: PUSH
47822: LD_INT 4
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: IN
47830: IFFALSE 47851
// points := [ 3 , 2 , 1 ] ;
47832: LD_ADDR_VAR 0 9
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47851: LD_VAR 0 6
47855: PPUSH
47856: CALL_OW 257
47860: PUSH
47861: LD_INT 5
47863: EQUAL
47864: IFFALSE 47885
// points := [ 130 , 5 , 2 ] ;
47866: LD_ADDR_VAR 0 9
47870: PUSH
47871: LD_INT 130
47873: PUSH
47874: LD_INT 5
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: LIST
47884: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47885: LD_VAR 0 6
47889: PPUSH
47890: CALL_OW 257
47894: PUSH
47895: LD_INT 8
47897: EQUAL
47898: IFFALSE 47919
// points := [ 35 , 35 , 30 ] ;
47900: LD_ADDR_VAR 0 9
47904: PUSH
47905: LD_INT 35
47907: PUSH
47908: LD_INT 35
47910: PUSH
47911: LD_INT 30
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: LIST
47918: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47919: LD_VAR 0 6
47923: PPUSH
47924: CALL_OW 257
47928: PUSH
47929: LD_INT 9
47931: EQUAL
47932: IFFALSE 47953
// points := [ 20 , 55 , 40 ] ;
47934: LD_ADDR_VAR 0 9
47938: PUSH
47939: LD_INT 20
47941: PUSH
47942: LD_INT 55
47944: PUSH
47945: LD_INT 40
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: LIST
47952: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47953: LD_VAR 0 6
47957: PPUSH
47958: CALL_OW 257
47962: PUSH
47963: LD_INT 12
47965: PUSH
47966: LD_INT 16
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: IN
47973: IFFALSE 47994
// points := [ 5 , 3 , 2 ] ;
47975: LD_ADDR_VAR 0 9
47979: PUSH
47980: LD_INT 5
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: LIST
47993: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47994: LD_VAR 0 6
47998: PPUSH
47999: CALL_OW 257
48003: PUSH
48004: LD_INT 17
48006: EQUAL
48007: IFFALSE 48028
// points := [ 100 , 50 , 75 ] ;
48009: LD_ADDR_VAR 0 9
48013: PUSH
48014: LD_INT 100
48016: PUSH
48017: LD_INT 50
48019: PUSH
48020: LD_INT 75
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: LIST
48027: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48028: LD_VAR 0 6
48032: PPUSH
48033: CALL_OW 257
48037: PUSH
48038: LD_INT 15
48040: EQUAL
48041: IFFALSE 48062
// points := [ 10 , 5 , 3 ] ;
48043: LD_ADDR_VAR 0 9
48047: PUSH
48048: LD_INT 10
48050: PUSH
48051: LD_INT 5
48053: PUSH
48054: LD_INT 3
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: LIST
48061: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48062: LD_VAR 0 6
48066: PPUSH
48067: CALL_OW 257
48071: PUSH
48072: LD_INT 14
48074: EQUAL
48075: IFFALSE 48096
// points := [ 10 , 0 , 0 ] ;
48077: LD_ADDR_VAR 0 9
48081: PUSH
48082: LD_INT 10
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: LIST
48095: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48096: LD_VAR 0 6
48100: PPUSH
48101: CALL_OW 257
48105: PUSH
48106: LD_INT 11
48108: EQUAL
48109: IFFALSE 48130
// points := [ 30 , 10 , 5 ] ;
48111: LD_ADDR_VAR 0 9
48115: PUSH
48116: LD_INT 30
48118: PUSH
48119: LD_INT 10
48121: PUSH
48122: LD_INT 5
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: LIST
48129: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48130: LD_VAR 0 1
48134: PPUSH
48135: LD_INT 5
48137: PPUSH
48138: CALL_OW 321
48142: PUSH
48143: LD_INT 2
48145: EQUAL
48146: IFFALSE 48163
// bpoints := bpoints * 1.8 ;
48148: LD_ADDR_VAR 0 10
48152: PUSH
48153: LD_VAR 0 10
48157: PUSH
48158: LD_REAL  1.80000000000000E+0000
48161: MUL
48162: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48163: LD_VAR 0 6
48167: PPUSH
48168: CALL_OW 257
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: LD_INT 3
48181: PUSH
48182: LD_INT 4
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: IN
48191: IFFALSE 48211
48193: PUSH
48194: LD_VAR 0 1
48198: PPUSH
48199: LD_INT 51
48201: PPUSH
48202: CALL_OW 321
48206: PUSH
48207: LD_INT 2
48209: EQUAL
48210: AND
48211: IFFALSE 48228
// bpoints := bpoints * 1.2 ;
48213: LD_ADDR_VAR 0 10
48217: PUSH
48218: LD_VAR 0 10
48222: PUSH
48223: LD_REAL  1.20000000000000E+0000
48226: MUL
48227: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48228: LD_VAR 0 6
48232: PPUSH
48233: CALL_OW 257
48237: PUSH
48238: LD_INT 5
48240: PUSH
48241: LD_INT 7
48243: PUSH
48244: LD_INT 9
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: LIST
48251: IN
48252: IFFALSE 48272
48254: PUSH
48255: LD_VAR 0 1
48259: PPUSH
48260: LD_INT 52
48262: PPUSH
48263: CALL_OW 321
48267: PUSH
48268: LD_INT 2
48270: EQUAL
48271: AND
48272: IFFALSE 48289
// bpoints := bpoints * 1.5 ;
48274: LD_ADDR_VAR 0 10
48278: PUSH
48279: LD_VAR 0 10
48283: PUSH
48284: LD_REAL  1.50000000000000E+0000
48287: MUL
48288: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48289: LD_VAR 0 1
48293: PPUSH
48294: LD_INT 66
48296: PPUSH
48297: CALL_OW 321
48301: PUSH
48302: LD_INT 2
48304: EQUAL
48305: IFFALSE 48322
// bpoints := bpoints * 1.1 ;
48307: LD_ADDR_VAR 0 10
48311: PUSH
48312: LD_VAR 0 10
48316: PUSH
48317: LD_REAL  1.10000000000000E+0000
48320: MUL
48321: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48322: LD_ADDR_VAR 0 10
48326: PUSH
48327: LD_VAR 0 10
48331: PUSH
48332: LD_VAR 0 6
48336: PPUSH
48337: LD_INT 1
48339: PPUSH
48340: CALL_OW 259
48344: PUSH
48345: LD_REAL  1.15000000000000E+0000
48348: MUL
48349: MUL
48350: ST_TO_ADDR
// end ; unit_vehicle :
48351: GO 49181
48353: LD_INT 2
48355: DOUBLE
48356: EQUAL
48357: IFTRUE 48361
48359: GO 49169
48361: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48362: LD_VAR 0 6
48366: PPUSH
48367: CALL_OW 264
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: LD_INT 42
48377: PUSH
48378: LD_INT 24
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: IN
48386: IFFALSE 48407
// points := [ 25 , 5 , 3 ] ;
48388: LD_ADDR_VAR 0 9
48392: PUSH
48393: LD_INT 25
48395: PUSH
48396: LD_INT 5
48398: PUSH
48399: LD_INT 3
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: LIST
48406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48407: LD_VAR 0 6
48411: PPUSH
48412: CALL_OW 264
48416: PUSH
48417: LD_INT 4
48419: PUSH
48420: LD_INT 43
48422: PUSH
48423: LD_INT 25
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: LIST
48430: IN
48431: IFFALSE 48452
// points := [ 40 , 15 , 5 ] ;
48433: LD_ADDR_VAR 0 9
48437: PUSH
48438: LD_INT 40
48440: PUSH
48441: LD_INT 15
48443: PUSH
48444: LD_INT 5
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48452: LD_VAR 0 6
48456: PPUSH
48457: CALL_OW 264
48461: PUSH
48462: LD_INT 3
48464: PUSH
48465: LD_INT 23
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: IN
48472: IFFALSE 48493
// points := [ 7 , 25 , 8 ] ;
48474: LD_ADDR_VAR 0 9
48478: PUSH
48479: LD_INT 7
48481: PUSH
48482: LD_INT 25
48484: PUSH
48485: LD_INT 8
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: LIST
48492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48493: LD_VAR 0 6
48497: PPUSH
48498: CALL_OW 264
48502: PUSH
48503: LD_INT 5
48505: PUSH
48506: LD_INT 27
48508: PUSH
48509: LD_INT 44
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: LIST
48516: IN
48517: IFFALSE 48538
// points := [ 14 , 50 , 16 ] ;
48519: LD_ADDR_VAR 0 9
48523: PUSH
48524: LD_INT 14
48526: PUSH
48527: LD_INT 50
48529: PUSH
48530: LD_INT 16
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: LIST
48537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48538: LD_VAR 0 6
48542: PPUSH
48543: CALL_OW 264
48547: PUSH
48548: LD_INT 6
48550: PUSH
48551: LD_INT 46
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: IN
48558: IFFALSE 48579
// points := [ 32 , 120 , 70 ] ;
48560: LD_ADDR_VAR 0 9
48564: PUSH
48565: LD_INT 32
48567: PUSH
48568: LD_INT 120
48570: PUSH
48571: LD_INT 70
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: LIST
48578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48579: LD_VAR 0 6
48583: PPUSH
48584: CALL_OW 264
48588: PUSH
48589: LD_INT 7
48591: PUSH
48592: LD_INT 28
48594: PUSH
48595: LD_INT 45
48597: PUSH
48598: LD_INT 92
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: IN
48607: IFFALSE 48628
// points := [ 35 , 20 , 45 ] ;
48609: LD_ADDR_VAR 0 9
48613: PUSH
48614: LD_INT 35
48616: PUSH
48617: LD_INT 20
48619: PUSH
48620: LD_INT 45
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: LIST
48627: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48628: LD_VAR 0 6
48632: PPUSH
48633: CALL_OW 264
48637: PUSH
48638: LD_INT 47
48640: PUSH
48641: EMPTY
48642: LIST
48643: IN
48644: IFFALSE 48665
// points := [ 67 , 45 , 75 ] ;
48646: LD_ADDR_VAR 0 9
48650: PUSH
48651: LD_INT 67
48653: PUSH
48654: LD_INT 45
48656: PUSH
48657: LD_INT 75
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: LIST
48664: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48665: LD_VAR 0 6
48669: PPUSH
48670: CALL_OW 264
48674: PUSH
48675: LD_INT 26
48677: PUSH
48678: EMPTY
48679: LIST
48680: IN
48681: IFFALSE 48702
// points := [ 120 , 30 , 80 ] ;
48683: LD_ADDR_VAR 0 9
48687: PUSH
48688: LD_INT 120
48690: PUSH
48691: LD_INT 30
48693: PUSH
48694: LD_INT 80
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: LIST
48701: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48702: LD_VAR 0 6
48706: PPUSH
48707: CALL_OW 264
48711: PUSH
48712: LD_INT 22
48714: PUSH
48715: EMPTY
48716: LIST
48717: IN
48718: IFFALSE 48739
// points := [ 40 , 1 , 1 ] ;
48720: LD_ADDR_VAR 0 9
48724: PUSH
48725: LD_INT 40
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: LIST
48738: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48739: LD_VAR 0 6
48743: PPUSH
48744: CALL_OW 264
48748: PUSH
48749: LD_INT 29
48751: PUSH
48752: EMPTY
48753: LIST
48754: IN
48755: IFFALSE 48776
// points := [ 70 , 200 , 400 ] ;
48757: LD_ADDR_VAR 0 9
48761: PUSH
48762: LD_INT 70
48764: PUSH
48765: LD_INT 200
48767: PUSH
48768: LD_INT 400
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: LIST
48775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48776: LD_VAR 0 6
48780: PPUSH
48781: CALL_OW 264
48785: PUSH
48786: LD_INT 14
48788: PUSH
48789: LD_INT 53
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: IN
48796: IFFALSE 48817
// points := [ 40 , 10 , 20 ] ;
48798: LD_ADDR_VAR 0 9
48802: PUSH
48803: LD_INT 40
48805: PUSH
48806: LD_INT 10
48808: PUSH
48809: LD_INT 20
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: LIST
48816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48817: LD_VAR 0 6
48821: PPUSH
48822: CALL_OW 264
48826: PUSH
48827: LD_INT 9
48829: PUSH
48830: EMPTY
48831: LIST
48832: IN
48833: IFFALSE 48854
// points := [ 5 , 70 , 20 ] ;
48835: LD_ADDR_VAR 0 9
48839: PUSH
48840: LD_INT 5
48842: PUSH
48843: LD_INT 70
48845: PUSH
48846: LD_INT 20
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: LIST
48853: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48854: LD_VAR 0 6
48858: PPUSH
48859: CALL_OW 264
48863: PUSH
48864: LD_INT 10
48866: PUSH
48867: EMPTY
48868: LIST
48869: IN
48870: IFFALSE 48891
// points := [ 35 , 110 , 70 ] ;
48872: LD_ADDR_VAR 0 9
48876: PUSH
48877: LD_INT 35
48879: PUSH
48880: LD_INT 110
48882: PUSH
48883: LD_INT 70
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: LIST
48890: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48891: LD_VAR 0 6
48895: PPUSH
48896: CALL_OW 265
48900: PUSH
48901: LD_INT 25
48903: EQUAL
48904: IFFALSE 48925
// points := [ 80 , 65 , 100 ] ;
48906: LD_ADDR_VAR 0 9
48910: PUSH
48911: LD_INT 80
48913: PUSH
48914: LD_INT 65
48916: PUSH
48917: LD_INT 100
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: LIST
48924: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48925: LD_VAR 0 6
48929: PPUSH
48930: CALL_OW 263
48934: PUSH
48935: LD_INT 1
48937: EQUAL
48938: IFFALSE 48973
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48940: LD_ADDR_VAR 0 10
48944: PUSH
48945: LD_VAR 0 10
48949: PUSH
48950: LD_VAR 0 6
48954: PPUSH
48955: CALL_OW 311
48959: PPUSH
48960: LD_INT 3
48962: PPUSH
48963: CALL_OW 259
48967: PUSH
48968: LD_INT 4
48970: MUL
48971: MUL
48972: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48973: LD_VAR 0 6
48977: PPUSH
48978: CALL_OW 263
48982: PUSH
48983: LD_INT 2
48985: EQUAL
48986: IFFALSE 49037
// begin j := IsControledBy ( i ) ;
48988: LD_ADDR_VAR 0 7
48992: PUSH
48993: LD_VAR 0 6
48997: PPUSH
48998: CALL_OW 312
49002: ST_TO_ADDR
// if j then
49003: LD_VAR 0 7
49007: IFFALSE 49037
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49009: LD_ADDR_VAR 0 10
49013: PUSH
49014: LD_VAR 0 10
49018: PUSH
49019: LD_VAR 0 7
49023: PPUSH
49024: LD_INT 3
49026: PPUSH
49027: CALL_OW 259
49031: PUSH
49032: LD_INT 3
49034: MUL
49035: MUL
49036: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49037: LD_VAR 0 6
49041: PPUSH
49042: CALL_OW 264
49046: PUSH
49047: LD_INT 5
49049: PUSH
49050: LD_INT 6
49052: PUSH
49053: LD_INT 46
49055: PUSH
49056: LD_INT 44
49058: PUSH
49059: LD_INT 47
49061: PUSH
49062: LD_INT 45
49064: PUSH
49065: LD_INT 28
49067: PUSH
49068: LD_INT 7
49070: PUSH
49071: LD_INT 27
49073: PUSH
49074: LD_INT 29
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: IN
49089: IFFALSE 49109
49091: PUSH
49092: LD_VAR 0 1
49096: PPUSH
49097: LD_INT 52
49099: PPUSH
49100: CALL_OW 321
49104: PUSH
49105: LD_INT 2
49107: EQUAL
49108: AND
49109: IFFALSE 49126
// bpoints := bpoints * 1.2 ;
49111: LD_ADDR_VAR 0 10
49115: PUSH
49116: LD_VAR 0 10
49120: PUSH
49121: LD_REAL  1.20000000000000E+0000
49124: MUL
49125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49126: LD_VAR 0 6
49130: PPUSH
49131: CALL_OW 264
49135: PUSH
49136: LD_INT 6
49138: PUSH
49139: LD_INT 46
49141: PUSH
49142: LD_INT 47
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: LIST
49149: IN
49150: IFFALSE 49167
// bpoints := bpoints * 1.2 ;
49152: LD_ADDR_VAR 0 10
49156: PUSH
49157: LD_VAR 0 10
49161: PUSH
49162: LD_REAL  1.20000000000000E+0000
49165: MUL
49166: ST_TO_ADDR
// end ; unit_building :
49167: GO 49181
49169: LD_INT 3
49171: DOUBLE
49172: EQUAL
49173: IFTRUE 49177
49175: GO 49180
49177: POP
// ; end ;
49178: GO 49181
49180: POP
// for j = 1 to 3 do
49181: LD_ADDR_VAR 0 7
49185: PUSH
49186: DOUBLE
49187: LD_INT 1
49189: DEC
49190: ST_TO_ADDR
49191: LD_INT 3
49193: PUSH
49194: FOR_TO
49195: IFFALSE 49248
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49197: LD_ADDR_VAR 0 5
49201: PUSH
49202: LD_VAR 0 5
49206: PPUSH
49207: LD_VAR 0 7
49211: PPUSH
49212: LD_VAR 0 5
49216: PUSH
49217: LD_VAR 0 7
49221: ARRAY
49222: PUSH
49223: LD_VAR 0 9
49227: PUSH
49228: LD_VAR 0 7
49232: ARRAY
49233: PUSH
49234: LD_VAR 0 10
49238: MUL
49239: PLUS
49240: PPUSH
49241: CALL_OW 1
49245: ST_TO_ADDR
49246: GO 49194
49248: POP
49249: POP
// end ;
49250: GO 47723
49252: POP
49253: POP
// result := Replace ( result , 4 , tmp ) ;
49254: LD_ADDR_VAR 0 5
49258: PUSH
49259: LD_VAR 0 5
49263: PPUSH
49264: LD_INT 4
49266: PPUSH
49267: LD_VAR 0 8
49271: PPUSH
49272: CALL_OW 1
49276: ST_TO_ADDR
// end ;
49277: LD_VAR 0 5
49281: RET
// export function DangerAtRange ( unit , range ) ; begin
49282: LD_INT 0
49284: PPUSH
// if not unit then
49285: LD_VAR 0 1
49289: NOT
49290: IFFALSE 49294
// exit ;
49292: GO 49339
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49294: LD_ADDR_VAR 0 3
49298: PUSH
49299: LD_VAR 0 1
49303: PPUSH
49304: CALL_OW 255
49308: PPUSH
49309: LD_VAR 0 1
49313: PPUSH
49314: CALL_OW 250
49318: PPUSH
49319: LD_VAR 0 1
49323: PPUSH
49324: CALL_OW 251
49328: PPUSH
49329: LD_VAR 0 2
49333: PPUSH
49334: CALL 47573 0 4
49338: ST_TO_ADDR
// end ;
49339: LD_VAR 0 3
49343: RET
// export function DangerInArea ( side , area ) ; begin
49344: LD_INT 0
49346: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49347: LD_ADDR_VAR 0 3
49351: PUSH
49352: LD_VAR 0 2
49356: PPUSH
49357: LD_INT 81
49359: PUSH
49360: LD_VAR 0 1
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PPUSH
49369: CALL_OW 70
49373: ST_TO_ADDR
// end ;
49374: LD_VAR 0 3
49378: RET
// export function IsExtension ( b ) ; begin
49379: LD_INT 0
49381: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49382: LD_ADDR_VAR 0 2
49386: PUSH
49387: LD_VAR 0 1
49391: PUSH
49392: LD_INT 23
49394: PUSH
49395: LD_INT 20
49397: PUSH
49398: LD_INT 22
49400: PUSH
49401: LD_INT 17
49403: PUSH
49404: LD_INT 24
49406: PUSH
49407: LD_INT 21
49409: PUSH
49410: LD_INT 19
49412: PUSH
49413: LD_INT 16
49415: PUSH
49416: LD_INT 25
49418: PUSH
49419: LD_INT 18
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: IN
49434: ST_TO_ADDR
// end ;
49435: LD_VAR 0 2
49439: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49440: LD_INT 0
49442: PPUSH
49443: PPUSH
49444: PPUSH
// result := [ ] ;
49445: LD_ADDR_VAR 0 4
49449: PUSH
49450: EMPTY
49451: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49452: LD_ADDR_VAR 0 5
49456: PUSH
49457: LD_VAR 0 2
49461: PPUSH
49462: LD_INT 21
49464: PUSH
49465: LD_INT 3
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PPUSH
49472: CALL_OW 70
49476: ST_TO_ADDR
// if not tmp then
49477: LD_VAR 0 5
49481: NOT
49482: IFFALSE 49486
// exit ;
49484: GO 49550
// if checkLink then
49486: LD_VAR 0 3
49490: IFFALSE 49540
// begin for i in tmp do
49492: LD_ADDR_VAR 0 6
49496: PUSH
49497: LD_VAR 0 5
49501: PUSH
49502: FOR_IN
49503: IFFALSE 49538
// if GetBase ( i ) <> base then
49505: LD_VAR 0 6
49509: PPUSH
49510: CALL_OW 274
49514: PUSH
49515: LD_VAR 0 1
49519: NONEQUAL
49520: IFFALSE 49536
// ComLinkToBase ( base , i ) ;
49522: LD_VAR 0 1
49526: PPUSH
49527: LD_VAR 0 6
49531: PPUSH
49532: CALL_OW 169
49536: GO 49502
49538: POP
49539: POP
// end ; result := tmp ;
49540: LD_ADDR_VAR 0 4
49544: PUSH
49545: LD_VAR 0 5
49549: ST_TO_ADDR
// end ;
49550: LD_VAR 0 4
49554: RET
// export function ComComplete ( units , b ) ; var i ; begin
49555: LD_INT 0
49557: PPUSH
49558: PPUSH
// if not units then
49559: LD_VAR 0 1
49563: NOT
49564: IFFALSE 49568
// exit ;
49566: GO 49658
// for i in units do
49568: LD_ADDR_VAR 0 4
49572: PUSH
49573: LD_VAR 0 1
49577: PUSH
49578: FOR_IN
49579: IFFALSE 49656
// if BuildingStatus ( b ) = bs_build then
49581: LD_VAR 0 2
49585: PPUSH
49586: CALL_OW 461
49590: PUSH
49591: LD_INT 1
49593: EQUAL
49594: IFFALSE 49654
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49596: LD_VAR 0 4
49600: PPUSH
49601: LD_STRING h
49603: PUSH
49604: LD_VAR 0 2
49608: PPUSH
49609: CALL_OW 250
49613: PUSH
49614: LD_VAR 0 2
49618: PPUSH
49619: CALL_OW 251
49623: PUSH
49624: LD_VAR 0 2
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: PUSH
49647: EMPTY
49648: LIST
49649: PPUSH
49650: CALL_OW 446
49654: GO 49578
49656: POP
49657: POP
// end ;
49658: LD_VAR 0 3
49662: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49663: LD_INT 0
49665: PPUSH
49666: PPUSH
49667: PPUSH
49668: PPUSH
49669: PPUSH
49670: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49671: LD_VAR 0 1
49675: NOT
49676: IFTRUE 49693
49678: PUSH
49679: LD_VAR 0 1
49683: PPUSH
49684: CALL_OW 263
49688: PUSH
49689: LD_INT 2
49691: NONEQUAL
49692: OR
49693: IFFALSE 49697
// exit ;
49695: GO 50013
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49697: LD_ADDR_VAR 0 6
49701: PUSH
49702: LD_INT 22
49704: PUSH
49705: LD_VAR 0 1
49709: PPUSH
49710: CALL_OW 255
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: LD_INT 30
49724: PUSH
49725: LD_INT 36
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 34
49734: PUSH
49735: LD_INT 31
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: LIST
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PPUSH
49751: CALL_OW 69
49755: ST_TO_ADDR
// if not tmp then
49756: LD_VAR 0 6
49760: NOT
49761: IFFALSE 49765
// exit ;
49763: GO 50013
// result := [ ] ;
49765: LD_ADDR_VAR 0 2
49769: PUSH
49770: EMPTY
49771: ST_TO_ADDR
// for i in tmp do
49772: LD_ADDR_VAR 0 3
49776: PUSH
49777: LD_VAR 0 6
49781: PUSH
49782: FOR_IN
49783: IFFALSE 49854
// begin t := UnitsInside ( i ) ;
49785: LD_ADDR_VAR 0 4
49789: PUSH
49790: LD_VAR 0 3
49794: PPUSH
49795: CALL_OW 313
49799: ST_TO_ADDR
// if t then
49800: LD_VAR 0 4
49804: IFFALSE 49852
// for j in t do
49806: LD_ADDR_VAR 0 7
49810: PUSH
49811: LD_VAR 0 4
49815: PUSH
49816: FOR_IN
49817: IFFALSE 49850
// result := Replace ( result , result + 1 , j ) ;
49819: LD_ADDR_VAR 0 2
49823: PUSH
49824: LD_VAR 0 2
49828: PPUSH
49829: LD_VAR 0 2
49833: PUSH
49834: LD_INT 1
49836: PLUS
49837: PPUSH
49838: LD_VAR 0 7
49842: PPUSH
49843: CALL_OW 1
49847: ST_TO_ADDR
49848: GO 49816
49850: POP
49851: POP
// end ;
49852: GO 49782
49854: POP
49855: POP
// if not result then
49856: LD_VAR 0 2
49860: NOT
49861: IFFALSE 49865
// exit ;
49863: GO 50013
// mech := result [ 1 ] ;
49865: LD_ADDR_VAR 0 5
49869: PUSH
49870: LD_VAR 0 2
49874: PUSH
49875: LD_INT 1
49877: ARRAY
49878: ST_TO_ADDR
// if result > 1 then
49879: LD_VAR 0 2
49883: PUSH
49884: LD_INT 1
49886: GREATER
49887: IFFALSE 49999
// begin for i = 2 to result do
49889: LD_ADDR_VAR 0 3
49893: PUSH
49894: DOUBLE
49895: LD_INT 2
49897: DEC
49898: ST_TO_ADDR
49899: LD_VAR 0 2
49903: PUSH
49904: FOR_TO
49905: IFFALSE 49997
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49907: LD_ADDR_VAR 0 4
49911: PUSH
49912: LD_VAR 0 2
49916: PUSH
49917: LD_VAR 0 3
49921: ARRAY
49922: PPUSH
49923: LD_INT 3
49925: PPUSH
49926: CALL_OW 259
49930: PUSH
49931: LD_VAR 0 2
49935: PUSH
49936: LD_VAR 0 3
49940: ARRAY
49941: PPUSH
49942: CALL_OW 432
49946: MINUS
49947: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49948: LD_VAR 0 4
49952: PUSH
49953: LD_VAR 0 5
49957: PPUSH
49958: LD_INT 3
49960: PPUSH
49961: CALL_OW 259
49965: PUSH
49966: LD_VAR 0 5
49970: PPUSH
49971: CALL_OW 432
49975: MINUS
49976: GREATEREQUAL
49977: IFFALSE 49995
// mech := result [ i ] ;
49979: LD_ADDR_VAR 0 5
49983: PUSH
49984: LD_VAR 0 2
49988: PUSH
49989: LD_VAR 0 3
49993: ARRAY
49994: ST_TO_ADDR
// end ;
49995: GO 49904
49997: POP
49998: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49999: LD_VAR 0 1
50003: PPUSH
50004: LD_VAR 0 5
50008: PPUSH
50009: CALL_OW 135
// end ;
50013: LD_VAR 0 2
50017: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50018: LD_INT 0
50020: PPUSH
50021: PPUSH
50022: PPUSH
50023: PPUSH
50024: PPUSH
50025: PPUSH
50026: PPUSH
50027: PPUSH
50028: PPUSH
50029: PPUSH
50030: PPUSH
50031: PPUSH
50032: PPUSH
// result := [ ] ;
50033: LD_ADDR_VAR 0 7
50037: PUSH
50038: EMPTY
50039: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50040: LD_VAR 0 1
50044: PPUSH
50045: CALL_OW 266
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: IN
50060: NOT
50061: IFFALSE 50065
// exit ;
50063: GO 51705
// if name then
50065: LD_VAR 0 3
50069: IFFALSE 50085
// SetBName ( base_dep , name ) ;
50071: LD_VAR 0 1
50075: PPUSH
50076: LD_VAR 0 3
50080: PPUSH
50081: CALL_OW 500
// base := GetBase ( base_dep ) ;
50085: LD_ADDR_VAR 0 15
50089: PUSH
50090: LD_VAR 0 1
50094: PPUSH
50095: CALL_OW 274
50099: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50100: LD_ADDR_VAR 0 16
50104: PUSH
50105: LD_VAR 0 1
50109: PPUSH
50110: CALL_OW 255
50114: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50115: LD_ADDR_VAR 0 17
50119: PUSH
50120: LD_VAR 0 1
50124: PPUSH
50125: CALL_OW 248
50129: ST_TO_ADDR
// if sources then
50130: LD_VAR 0 5
50134: IFFALSE 50181
// for i = 1 to 3 do
50136: LD_ADDR_VAR 0 8
50140: PUSH
50141: DOUBLE
50142: LD_INT 1
50144: DEC
50145: ST_TO_ADDR
50146: LD_INT 3
50148: PUSH
50149: FOR_TO
50150: IFFALSE 50179
// AddResourceType ( base , i , sources [ i ] ) ;
50152: LD_VAR 0 15
50156: PPUSH
50157: LD_VAR 0 8
50161: PPUSH
50162: LD_VAR 0 5
50166: PUSH
50167: LD_VAR 0 8
50171: ARRAY
50172: PPUSH
50173: CALL_OW 276
50177: GO 50149
50179: POP
50180: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50181: LD_ADDR_VAR 0 18
50185: PUSH
50186: LD_VAR 0 15
50190: PPUSH
50191: LD_VAR 0 2
50195: PPUSH
50196: LD_INT 1
50198: PPUSH
50199: CALL 49440 0 3
50203: ST_TO_ADDR
// InitHc ;
50204: CALL_OW 19
// InitUc ;
50208: CALL_OW 18
// uc_side := side ;
50212: LD_ADDR_OWVAR 20
50216: PUSH
50217: LD_VAR 0 16
50221: ST_TO_ADDR
// uc_nation := nation ;
50222: LD_ADDR_OWVAR 21
50226: PUSH
50227: LD_VAR 0 17
50231: ST_TO_ADDR
// if buildings then
50232: LD_VAR 0 18
50236: IFFALSE 51564
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50238: LD_ADDR_VAR 0 19
50242: PUSH
50243: LD_VAR 0 18
50247: PPUSH
50248: LD_INT 2
50250: PUSH
50251: LD_INT 30
50253: PUSH
50254: LD_INT 29
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 30
50263: PUSH
50264: LD_INT 30
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: LIST
50275: PPUSH
50276: CALL_OW 72
50280: ST_TO_ADDR
// if tmp then
50281: LD_VAR 0 19
50285: IFFALSE 50333
// for i in tmp do
50287: LD_ADDR_VAR 0 8
50291: PUSH
50292: LD_VAR 0 19
50296: PUSH
50297: FOR_IN
50298: IFFALSE 50331
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50300: LD_VAR 0 8
50304: PPUSH
50305: CALL_OW 250
50309: PPUSH
50310: LD_VAR 0 8
50314: PPUSH
50315: CALL_OW 251
50319: PPUSH
50320: LD_VAR 0 16
50324: PPUSH
50325: CALL_OW 441
50329: GO 50297
50331: POP
50332: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50333: LD_VAR 0 18
50337: PPUSH
50338: LD_INT 2
50340: PUSH
50341: LD_INT 30
50343: PUSH
50344: LD_INT 32
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 30
50353: PUSH
50354: LD_INT 33
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: LIST
50365: PPUSH
50366: CALL_OW 72
50370: IFFALSE 50458
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50372: LD_ADDR_VAR 0 8
50376: PUSH
50377: LD_VAR 0 18
50381: PPUSH
50382: LD_INT 2
50384: PUSH
50385: LD_INT 30
50387: PUSH
50388: LD_INT 32
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 30
50397: PUSH
50398: LD_INT 33
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: LIST
50409: PPUSH
50410: CALL_OW 72
50414: PUSH
50415: FOR_IN
50416: IFFALSE 50456
// begin if not GetBWeapon ( i ) then
50418: LD_VAR 0 8
50422: PPUSH
50423: CALL_OW 269
50427: NOT
50428: IFFALSE 50454
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50430: LD_VAR 0 8
50434: PPUSH
50435: LD_VAR 0 8
50439: PPUSH
50440: LD_VAR 0 2
50444: PPUSH
50445: CALL 51710 0 2
50449: PPUSH
50450: CALL_OW 431
// end ;
50454: GO 50415
50456: POP
50457: POP
// end ; for i = 1 to personel do
50458: LD_ADDR_VAR 0 8
50462: PUSH
50463: DOUBLE
50464: LD_INT 1
50466: DEC
50467: ST_TO_ADDR
50468: LD_VAR 0 6
50472: PUSH
50473: FOR_TO
50474: IFFALSE 51544
// begin if i > 4 then
50476: LD_VAR 0 8
50480: PUSH
50481: LD_INT 4
50483: GREATER
50484: IFFALSE 50488
// break ;
50486: GO 51544
// case i of 1 :
50488: LD_VAR 0 8
50492: PUSH
50493: LD_INT 1
50495: DOUBLE
50496: EQUAL
50497: IFTRUE 50501
50499: GO 50581
50501: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50502: LD_ADDR_VAR 0 12
50506: PUSH
50507: LD_VAR 0 18
50511: PPUSH
50512: LD_INT 22
50514: PUSH
50515: LD_VAR 0 16
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 58
50526: PUSH
50527: EMPTY
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: LD_INT 30
50535: PUSH
50536: LD_INT 32
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 30
50545: PUSH
50546: LD_INT 4
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 30
50555: PUSH
50556: LD_INT 5
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: LIST
50573: PPUSH
50574: CALL_OW 72
50578: ST_TO_ADDR
50579: GO 50803
50581: LD_INT 2
50583: DOUBLE
50584: EQUAL
50585: IFTRUE 50589
50587: GO 50651
50589: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50590: LD_ADDR_VAR 0 12
50594: PUSH
50595: LD_VAR 0 18
50599: PPUSH
50600: LD_INT 22
50602: PUSH
50603: LD_VAR 0 16
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: LD_INT 30
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 30
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: LIST
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PPUSH
50644: CALL_OW 72
50648: ST_TO_ADDR
50649: GO 50803
50651: LD_INT 3
50653: DOUBLE
50654: EQUAL
50655: IFTRUE 50659
50657: GO 50721
50659: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50660: LD_ADDR_VAR 0 12
50664: PUSH
50665: LD_VAR 0 18
50669: PPUSH
50670: LD_INT 22
50672: PUSH
50673: LD_VAR 0 16
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: LD_INT 30
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 30
50697: PUSH
50698: LD_INT 3
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: LIST
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PPUSH
50714: CALL_OW 72
50718: ST_TO_ADDR
50719: GO 50803
50721: LD_INT 4
50723: DOUBLE
50724: EQUAL
50725: IFTRUE 50729
50727: GO 50802
50729: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50730: LD_ADDR_VAR 0 12
50734: PUSH
50735: LD_VAR 0 18
50739: PPUSH
50740: LD_INT 22
50742: PUSH
50743: LD_VAR 0 16
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: LD_INT 30
50757: PUSH
50758: LD_INT 6
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 30
50767: PUSH
50768: LD_INT 7
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 30
50777: PUSH
50778: LD_INT 8
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PPUSH
50795: CALL_OW 72
50799: ST_TO_ADDR
50800: GO 50803
50802: POP
// if i = 1 then
50803: LD_VAR 0 8
50807: PUSH
50808: LD_INT 1
50810: EQUAL
50811: IFFALSE 50922
// begin tmp := [ ] ;
50813: LD_ADDR_VAR 0 19
50817: PUSH
50818: EMPTY
50819: ST_TO_ADDR
// for j in f do
50820: LD_ADDR_VAR 0 9
50824: PUSH
50825: LD_VAR 0 12
50829: PUSH
50830: FOR_IN
50831: IFFALSE 50904
// if GetBType ( j ) = b_bunker then
50833: LD_VAR 0 9
50837: PPUSH
50838: CALL_OW 266
50842: PUSH
50843: LD_INT 32
50845: EQUAL
50846: IFFALSE 50873
// tmp := Insert ( tmp , 1 , j ) else
50848: LD_ADDR_VAR 0 19
50852: PUSH
50853: LD_VAR 0 19
50857: PPUSH
50858: LD_INT 1
50860: PPUSH
50861: LD_VAR 0 9
50865: PPUSH
50866: CALL_OW 2
50870: ST_TO_ADDR
50871: GO 50902
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50873: LD_ADDR_VAR 0 19
50877: PUSH
50878: LD_VAR 0 19
50882: PPUSH
50883: LD_VAR 0 19
50887: PUSH
50888: LD_INT 1
50890: PLUS
50891: PPUSH
50892: LD_VAR 0 9
50896: PPUSH
50897: CALL_OW 2
50901: ST_TO_ADDR
50902: GO 50830
50904: POP
50905: POP
// if tmp then
50906: LD_VAR 0 19
50910: IFFALSE 50922
// f := tmp ;
50912: LD_ADDR_VAR 0 12
50916: PUSH
50917: LD_VAR 0 19
50921: ST_TO_ADDR
// end ; x := personel [ i ] ;
50922: LD_ADDR_VAR 0 13
50926: PUSH
50927: LD_VAR 0 6
50931: PUSH
50932: LD_VAR 0 8
50936: ARRAY
50937: ST_TO_ADDR
// if x = - 1 then
50938: LD_VAR 0 13
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: EQUAL
50947: IFFALSE 51158
// begin for j in f do
50949: LD_ADDR_VAR 0 9
50953: PUSH
50954: LD_VAR 0 12
50958: PUSH
50959: FOR_IN
50960: IFFALSE 51154
// repeat InitHc ;
50962: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50966: LD_VAR 0 9
50970: PPUSH
50971: CALL_OW 266
50975: PUSH
50976: LD_INT 5
50978: EQUAL
50979: IFFALSE 51049
// begin if UnitsInside ( j ) < 3 then
50981: LD_VAR 0 9
50985: PPUSH
50986: CALL_OW 313
50990: PUSH
50991: LD_INT 3
50993: LESS
50994: IFFALSE 51030
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50996: LD_INT 0
50998: PPUSH
50999: LD_INT 5
51001: PUSH
51002: LD_INT 8
51004: PUSH
51005: LD_INT 9
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: PUSH
51013: LD_VAR 0 17
51017: ARRAY
51018: PPUSH
51019: LD_VAR 0 4
51023: PPUSH
51024: CALL_OW 380
51028: GO 51047
// PrepareHuman ( false , i , skill ) ;
51030: LD_INT 0
51032: PPUSH
51033: LD_VAR 0 8
51037: PPUSH
51038: LD_VAR 0 4
51042: PPUSH
51043: CALL_OW 380
// end else
51047: GO 51066
// PrepareHuman ( false , i , skill ) ;
51049: LD_INT 0
51051: PPUSH
51052: LD_VAR 0 8
51056: PPUSH
51057: LD_VAR 0 4
51061: PPUSH
51062: CALL_OW 380
// un := CreateHuman ;
51066: LD_ADDR_VAR 0 14
51070: PUSH
51071: CALL_OW 44
51075: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51076: LD_ADDR_VAR 0 7
51080: PUSH
51081: LD_VAR 0 7
51085: PPUSH
51086: LD_INT 1
51088: PPUSH
51089: LD_VAR 0 14
51093: PPUSH
51094: CALL_OW 2
51098: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51099: LD_VAR 0 14
51103: PPUSH
51104: LD_VAR 0 9
51108: PPUSH
51109: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51113: LD_VAR 0 9
51117: PPUSH
51118: CALL_OW 313
51122: PUSH
51123: LD_INT 6
51125: EQUAL
51126: IFTRUE 51150
51128: PUSH
51129: LD_VAR 0 9
51133: PPUSH
51134: CALL_OW 266
51138: PUSH
51139: LD_INT 32
51141: PUSH
51142: LD_INT 31
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: IN
51149: OR
51150: IFFALSE 50962
51152: GO 50959
51154: POP
51155: POP
// end else
51156: GO 51542
// for j = 1 to x do
51158: LD_ADDR_VAR 0 9
51162: PUSH
51163: DOUBLE
51164: LD_INT 1
51166: DEC
51167: ST_TO_ADDR
51168: LD_VAR 0 13
51172: PUSH
51173: FOR_TO
51174: IFFALSE 51540
// begin InitHc ;
51176: CALL_OW 19
// if not f then
51180: LD_VAR 0 12
51184: NOT
51185: IFFALSE 51274
// begin PrepareHuman ( false , i , skill ) ;
51187: LD_INT 0
51189: PPUSH
51190: LD_VAR 0 8
51194: PPUSH
51195: LD_VAR 0 4
51199: PPUSH
51200: CALL_OW 380
// un := CreateHuman ;
51204: LD_ADDR_VAR 0 14
51208: PUSH
51209: CALL_OW 44
51213: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51214: LD_ADDR_VAR 0 7
51218: PUSH
51219: LD_VAR 0 7
51223: PPUSH
51224: LD_INT 1
51226: PPUSH
51227: LD_VAR 0 14
51231: PPUSH
51232: CALL_OW 2
51236: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51237: LD_VAR 0 14
51241: PPUSH
51242: LD_VAR 0 1
51246: PPUSH
51247: CALL_OW 250
51251: PPUSH
51252: LD_VAR 0 1
51256: PPUSH
51257: CALL_OW 251
51261: PPUSH
51262: LD_INT 10
51264: PPUSH
51265: LD_INT 0
51267: PPUSH
51268: CALL_OW 50
// continue ;
51272: GO 51173
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51274: LD_VAR 0 12
51278: PUSH
51279: LD_INT 1
51281: ARRAY
51282: PPUSH
51283: CALL_OW 313
51287: IFFALSE 51315
51289: PUSH
51290: LD_VAR 0 12
51294: PUSH
51295: LD_INT 1
51297: ARRAY
51298: PPUSH
51299: CALL_OW 266
51303: PUSH
51304: LD_INT 32
51306: PUSH
51307: LD_INT 31
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: IN
51314: AND
51315: IFTRUE 51336
51317: PUSH
51318: LD_VAR 0 12
51322: PUSH
51323: LD_INT 1
51325: ARRAY
51326: PPUSH
51327: CALL_OW 313
51331: PUSH
51332: LD_INT 6
51334: EQUAL
51335: OR
51336: IFFALSE 51356
// f := Delete ( f , 1 ) ;
51338: LD_ADDR_VAR 0 12
51342: PUSH
51343: LD_VAR 0 12
51347: PPUSH
51348: LD_INT 1
51350: PPUSH
51351: CALL_OW 3
51355: ST_TO_ADDR
// if not f then
51356: LD_VAR 0 12
51360: NOT
51361: IFFALSE 51379
// begin x := x + 2 ;
51363: LD_ADDR_VAR 0 13
51367: PUSH
51368: LD_VAR 0 13
51372: PUSH
51373: LD_INT 2
51375: PLUS
51376: ST_TO_ADDR
// continue ;
51377: GO 51173
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51379: LD_VAR 0 12
51383: PUSH
51384: LD_INT 1
51386: ARRAY
51387: PPUSH
51388: CALL_OW 266
51392: PUSH
51393: LD_INT 5
51395: EQUAL
51396: IFFALSE 51470
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51398: LD_VAR 0 12
51402: PUSH
51403: LD_INT 1
51405: ARRAY
51406: PPUSH
51407: CALL_OW 313
51411: PUSH
51412: LD_INT 3
51414: LESS
51415: IFFALSE 51451
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51417: LD_INT 0
51419: PPUSH
51420: LD_INT 5
51422: PUSH
51423: LD_INT 8
51425: PUSH
51426: LD_INT 9
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: LIST
51433: PUSH
51434: LD_VAR 0 17
51438: ARRAY
51439: PPUSH
51440: LD_VAR 0 4
51444: PPUSH
51445: CALL_OW 380
51449: GO 51468
// PrepareHuman ( false , i , skill ) ;
51451: LD_INT 0
51453: PPUSH
51454: LD_VAR 0 8
51458: PPUSH
51459: LD_VAR 0 4
51463: PPUSH
51464: CALL_OW 380
// end else
51468: GO 51487
// PrepareHuman ( false , i , skill ) ;
51470: LD_INT 0
51472: PPUSH
51473: LD_VAR 0 8
51477: PPUSH
51478: LD_VAR 0 4
51482: PPUSH
51483: CALL_OW 380
// un := CreateHuman ;
51487: LD_ADDR_VAR 0 14
51491: PUSH
51492: CALL_OW 44
51496: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51497: LD_ADDR_VAR 0 7
51501: PUSH
51502: LD_VAR 0 7
51506: PPUSH
51507: LD_INT 1
51509: PPUSH
51510: LD_VAR 0 14
51514: PPUSH
51515: CALL_OW 2
51519: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51520: LD_VAR 0 14
51524: PPUSH
51525: LD_VAR 0 12
51529: PUSH
51530: LD_INT 1
51532: ARRAY
51533: PPUSH
51534: CALL_OW 52
// end ;
51538: GO 51173
51540: POP
51541: POP
// end ;
51542: GO 50473
51544: POP
51545: POP
// result := result ^ buildings ;
51546: LD_ADDR_VAR 0 7
51550: PUSH
51551: LD_VAR 0 7
51555: PUSH
51556: LD_VAR 0 18
51560: ADD
51561: ST_TO_ADDR
// end else
51562: GO 51705
// begin for i = 1 to personel do
51564: LD_ADDR_VAR 0 8
51568: PUSH
51569: DOUBLE
51570: LD_INT 1
51572: DEC
51573: ST_TO_ADDR
51574: LD_VAR 0 6
51578: PUSH
51579: FOR_TO
51580: IFFALSE 51703
// begin if i > 4 then
51582: LD_VAR 0 8
51586: PUSH
51587: LD_INT 4
51589: GREATER
51590: IFFALSE 51594
// break ;
51592: GO 51703
// x := personel [ i ] ;
51594: LD_ADDR_VAR 0 13
51598: PUSH
51599: LD_VAR 0 6
51603: PUSH
51604: LD_VAR 0 8
51608: ARRAY
51609: ST_TO_ADDR
// if x = - 1 then
51610: LD_VAR 0 13
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: EQUAL
51619: IFFALSE 51623
// continue ;
51621: GO 51579
// PrepareHuman ( false , i , skill ) ;
51623: LD_INT 0
51625: PPUSH
51626: LD_VAR 0 8
51630: PPUSH
51631: LD_VAR 0 4
51635: PPUSH
51636: CALL_OW 380
// un := CreateHuman ;
51640: LD_ADDR_VAR 0 14
51644: PUSH
51645: CALL_OW 44
51649: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51650: LD_VAR 0 14
51654: PPUSH
51655: LD_VAR 0 1
51659: PPUSH
51660: CALL_OW 250
51664: PPUSH
51665: LD_VAR 0 1
51669: PPUSH
51670: CALL_OW 251
51674: PPUSH
51675: LD_INT 10
51677: PPUSH
51678: LD_INT 0
51680: PPUSH
51681: CALL_OW 50
// result := result ^ un ;
51685: LD_ADDR_VAR 0 7
51689: PUSH
51690: LD_VAR 0 7
51694: PUSH
51695: LD_VAR 0 14
51699: ADD
51700: ST_TO_ADDR
// end ;
51701: GO 51579
51703: POP
51704: POP
// end ; end ;
51705: LD_VAR 0 7
51709: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51710: LD_INT 0
51712: PPUSH
51713: PPUSH
51714: PPUSH
51715: PPUSH
51716: PPUSH
51717: PPUSH
51718: PPUSH
51719: PPUSH
51720: PPUSH
51721: PPUSH
51722: PPUSH
51723: PPUSH
51724: PPUSH
51725: PPUSH
51726: PPUSH
51727: PPUSH
// result := false ;
51728: LD_ADDR_VAR 0 3
51732: PUSH
51733: LD_INT 0
51735: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51736: LD_VAR 0 1
51740: NOT
51741: IFTRUE 51766
51743: PUSH
51744: LD_VAR 0 1
51748: PPUSH
51749: CALL_OW 266
51753: PUSH
51754: LD_INT 32
51756: PUSH
51757: LD_INT 33
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: IN
51764: NOT
51765: OR
51766: IFFALSE 51770
// exit ;
51768: GO 52905
// nat := GetNation ( tower ) ;
51770: LD_ADDR_VAR 0 12
51774: PUSH
51775: LD_VAR 0 1
51779: PPUSH
51780: CALL_OW 248
51784: ST_TO_ADDR
// side := GetSide ( tower ) ;
51785: LD_ADDR_VAR 0 16
51789: PUSH
51790: LD_VAR 0 1
51794: PPUSH
51795: CALL_OW 255
51799: ST_TO_ADDR
// x := GetX ( tower ) ;
51800: LD_ADDR_VAR 0 10
51804: PUSH
51805: LD_VAR 0 1
51809: PPUSH
51810: CALL_OW 250
51814: ST_TO_ADDR
// y := GetY ( tower ) ;
51815: LD_ADDR_VAR 0 11
51819: PUSH
51820: LD_VAR 0 1
51824: PPUSH
51825: CALL_OW 251
51829: ST_TO_ADDR
// if not x or not y then
51830: LD_VAR 0 10
51834: NOT
51835: IFTRUE 51844
51837: PUSH
51838: LD_VAR 0 11
51842: NOT
51843: OR
51844: IFFALSE 51848
// exit ;
51846: GO 52905
// weapon := 0 ;
51848: LD_ADDR_VAR 0 18
51852: PUSH
51853: LD_INT 0
51855: ST_TO_ADDR
// fac_list := [ ] ;
51856: LD_ADDR_VAR 0 17
51860: PUSH
51861: EMPTY
51862: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51863: LD_ADDR_VAR 0 6
51867: PUSH
51868: LD_VAR 0 1
51872: PPUSH
51873: CALL_OW 274
51877: PPUSH
51878: LD_VAR 0 2
51882: PPUSH
51883: LD_INT 0
51885: PPUSH
51886: CALL 49440 0 3
51890: PPUSH
51891: LD_INT 30
51893: PUSH
51894: LD_INT 3
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PPUSH
51901: CALL_OW 72
51905: ST_TO_ADDR
// if not factories then
51906: LD_VAR 0 6
51910: NOT
51911: IFFALSE 51915
// exit ;
51913: GO 52905
// for i in factories do
51915: LD_ADDR_VAR 0 8
51919: PUSH
51920: LD_VAR 0 6
51924: PUSH
51925: FOR_IN
51926: IFFALSE 51951
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51928: LD_ADDR_VAR 0 17
51932: PUSH
51933: LD_VAR 0 17
51937: PUSH
51938: LD_VAR 0 8
51942: PPUSH
51943: CALL_OW 478
51947: UNION
51948: ST_TO_ADDR
51949: GO 51925
51951: POP
51952: POP
// if not fac_list then
51953: LD_VAR 0 17
51957: NOT
51958: IFFALSE 51962
// exit ;
51960: GO 52905
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51962: LD_ADDR_VAR 0 5
51966: PUSH
51967: LD_INT 4
51969: PUSH
51970: LD_INT 5
51972: PUSH
51973: LD_INT 9
51975: PUSH
51976: LD_INT 10
51978: PUSH
51979: LD_INT 6
51981: PUSH
51982: LD_INT 7
51984: PUSH
51985: LD_INT 11
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 27
51999: PUSH
52000: LD_INT 28
52002: PUSH
52003: LD_INT 26
52005: PUSH
52006: LD_INT 30
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 43
52017: PUSH
52018: LD_INT 44
52020: PUSH
52021: LD_INT 46
52023: PUSH
52024: LD_INT 45
52026: PUSH
52027: LD_INT 47
52029: PUSH
52030: LD_INT 49
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: LIST
52045: PUSH
52046: LD_VAR 0 12
52050: ARRAY
52051: ST_TO_ADDR
// list := list isect fac_list ;
52052: LD_ADDR_VAR 0 5
52056: PUSH
52057: LD_VAR 0 5
52061: PUSH
52062: LD_VAR 0 17
52066: ISECT
52067: ST_TO_ADDR
// if not list then
52068: LD_VAR 0 5
52072: NOT
52073: IFFALSE 52077
// exit ;
52075: GO 52905
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52077: LD_VAR 0 12
52081: PUSH
52082: LD_INT 3
52084: EQUAL
52085: IFFALSE 52097
52087: PUSH
52088: LD_INT 49
52090: PUSH
52091: LD_VAR 0 5
52095: IN
52096: AND
52097: IFFALSE 52117
52099: PUSH
52100: LD_INT 31
52102: PPUSH
52103: LD_VAR 0 16
52107: PPUSH
52108: CALL_OW 321
52112: PUSH
52113: LD_INT 2
52115: EQUAL
52116: AND
52117: IFFALSE 52177
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52119: LD_INT 22
52121: PUSH
52122: LD_VAR 0 16
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 35
52133: PUSH
52134: LD_INT 49
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 91
52143: PUSH
52144: LD_VAR 0 1
52148: PUSH
52149: LD_INT 10
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: LIST
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: LIST
52161: PPUSH
52162: CALL_OW 69
52166: NOT
52167: IFFALSE 52177
// weapon := ru_time_lapser ;
52169: LD_ADDR_VAR 0 18
52173: PUSH
52174: LD_INT 49
52176: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52177: LD_VAR 0 12
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: IN
52192: IFFALSE 52216
52194: PUSH
52195: LD_INT 11
52197: PUSH
52198: LD_VAR 0 5
52202: IN
52203: IFTRUE 52215
52205: PUSH
52206: LD_INT 30
52208: PUSH
52209: LD_VAR 0 5
52213: IN
52214: OR
52215: AND
52216: IFFALSE 52236
52218: PUSH
52219: LD_INT 6
52221: PPUSH
52222: LD_VAR 0 16
52226: PPUSH
52227: CALL_OW 321
52231: PUSH
52232: LD_INT 2
52234: EQUAL
52235: AND
52236: IFFALSE 52403
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52238: LD_INT 22
52240: PUSH
52241: LD_VAR 0 16
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: LD_INT 35
52255: PUSH
52256: LD_INT 11
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 35
52265: PUSH
52266: LD_INT 30
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 91
52280: PUSH
52281: LD_VAR 0 1
52285: PUSH
52286: LD_INT 18
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: LIST
52298: PPUSH
52299: CALL_OW 69
52303: NOT
52304: IFFALSE 52380
52306: PUSH
52307: LD_INT 22
52309: PUSH
52310: LD_VAR 0 16
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: LD_INT 30
52324: PUSH
52325: LD_INT 32
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 30
52334: PUSH
52335: LD_INT 33
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 91
52349: PUSH
52350: LD_VAR 0 1
52354: PUSH
52355: LD_INT 12
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: PUSH
52368: EMPTY
52369: LIST
52370: PPUSH
52371: CALL_OW 69
52375: PUSH
52376: LD_INT 2
52378: GREATER
52379: AND
52380: IFFALSE 52403
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52382: LD_ADDR_VAR 0 18
52386: PUSH
52387: LD_INT 11
52389: PUSH
52390: LD_INT 30
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_VAR 0 12
52401: ARRAY
52402: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52403: LD_VAR 0 18
52407: NOT
52408: IFFALSE 52428
52410: PUSH
52411: LD_INT 40
52413: PPUSH
52414: LD_VAR 0 16
52418: PPUSH
52419: CALL_OW 321
52423: PUSH
52424: LD_INT 2
52426: EQUAL
52427: AND
52428: IFFALSE 52464
52430: PUSH
52431: LD_INT 7
52433: PUSH
52434: LD_VAR 0 5
52438: IN
52439: IFTRUE 52451
52441: PUSH
52442: LD_INT 28
52444: PUSH
52445: LD_VAR 0 5
52449: IN
52450: OR
52451: IFTRUE 52463
52453: PUSH
52454: LD_INT 45
52456: PUSH
52457: LD_VAR 0 5
52461: IN
52462: OR
52463: AND
52464: IFFALSE 52718
// begin hex := GetHexInfo ( x , y ) ;
52466: LD_ADDR_VAR 0 4
52470: PUSH
52471: LD_VAR 0 10
52475: PPUSH
52476: LD_VAR 0 11
52480: PPUSH
52481: CALL_OW 546
52485: ST_TO_ADDR
// if hex [ 1 ] then
52486: LD_VAR 0 4
52490: PUSH
52491: LD_INT 1
52493: ARRAY
52494: IFFALSE 52498
// exit ;
52496: GO 52905
// height := hex [ 2 ] ;
52498: LD_ADDR_VAR 0 15
52502: PUSH
52503: LD_VAR 0 4
52507: PUSH
52508: LD_INT 2
52510: ARRAY
52511: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52512: LD_ADDR_VAR 0 14
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: LD_INT 3
52525: PUSH
52526: LD_INT 5
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: ST_TO_ADDR
// for i in tmp do
52535: LD_ADDR_VAR 0 8
52539: PUSH
52540: LD_VAR 0 14
52544: PUSH
52545: FOR_IN
52546: IFFALSE 52716
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52548: LD_ADDR_VAR 0 9
52552: PUSH
52553: LD_VAR 0 10
52557: PPUSH
52558: LD_VAR 0 8
52562: PPUSH
52563: LD_INT 5
52565: PPUSH
52566: CALL_OW 272
52570: PUSH
52571: LD_VAR 0 11
52575: PPUSH
52576: LD_VAR 0 8
52580: PPUSH
52581: LD_INT 5
52583: PPUSH
52584: CALL_OW 273
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52593: LD_VAR 0 9
52597: PUSH
52598: LD_INT 1
52600: ARRAY
52601: PPUSH
52602: LD_VAR 0 9
52606: PUSH
52607: LD_INT 2
52609: ARRAY
52610: PPUSH
52611: CALL_OW 488
52615: IFFALSE 52714
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52617: LD_ADDR_VAR 0 4
52621: PUSH
52622: LD_VAR 0 9
52626: PUSH
52627: LD_INT 1
52629: ARRAY
52630: PPUSH
52631: LD_VAR 0 9
52635: PUSH
52636: LD_INT 2
52638: ARRAY
52639: PPUSH
52640: CALL_OW 546
52644: ST_TO_ADDR
// if hex [ 1 ] then
52645: LD_VAR 0 4
52649: PUSH
52650: LD_INT 1
52652: ARRAY
52653: IFFALSE 52657
// continue ;
52655: GO 52545
// h := hex [ 2 ] ;
52657: LD_ADDR_VAR 0 13
52661: PUSH
52662: LD_VAR 0 4
52666: PUSH
52667: LD_INT 2
52669: ARRAY
52670: ST_TO_ADDR
// if h + 7 < height then
52671: LD_VAR 0 13
52675: PUSH
52676: LD_INT 7
52678: PLUS
52679: PUSH
52680: LD_VAR 0 15
52684: LESS
52685: IFFALSE 52714
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52687: LD_ADDR_VAR 0 18
52691: PUSH
52692: LD_INT 7
52694: PUSH
52695: LD_INT 28
52697: PUSH
52698: LD_INT 45
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: LIST
52705: PUSH
52706: LD_VAR 0 12
52710: ARRAY
52711: ST_TO_ADDR
// break ;
52712: GO 52716
// end ; end ; end ;
52714: GO 52545
52716: POP
52717: POP
// end ; if not weapon then
52718: LD_VAR 0 18
52722: NOT
52723: IFFALSE 52783
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52725: LD_ADDR_VAR 0 5
52729: PUSH
52730: LD_VAR 0 5
52734: PUSH
52735: LD_INT 11
52737: PUSH
52738: LD_INT 30
52740: PUSH
52741: LD_INT 49
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: LIST
52748: DIFF
52749: ST_TO_ADDR
// if not list then
52750: LD_VAR 0 5
52754: NOT
52755: IFFALSE 52759
// exit ;
52757: GO 52905
// weapon := list [ rand ( 1 , list ) ] ;
52759: LD_ADDR_VAR 0 18
52763: PUSH
52764: LD_VAR 0 5
52768: PUSH
52769: LD_INT 1
52771: PPUSH
52772: LD_VAR 0 5
52776: PPUSH
52777: CALL_OW 12
52781: ARRAY
52782: ST_TO_ADDR
// end ; if weapon then
52783: LD_VAR 0 18
52787: IFFALSE 52905
// begin tmp := CostOfWeapon ( weapon ) ;
52789: LD_ADDR_VAR 0 14
52793: PUSH
52794: LD_VAR 0 18
52798: PPUSH
52799: CALL_OW 451
52803: ST_TO_ADDR
// j := GetBase ( tower ) ;
52804: LD_ADDR_VAR 0 9
52808: PUSH
52809: LD_VAR 0 1
52813: PPUSH
52814: CALL_OW 274
52818: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52819: LD_VAR 0 9
52823: PPUSH
52824: LD_INT 1
52826: PPUSH
52827: CALL_OW 275
52831: PUSH
52832: LD_VAR 0 14
52836: PUSH
52837: LD_INT 1
52839: ARRAY
52840: GREATEREQUAL
52841: IFFALSE 52867
52843: PUSH
52844: LD_VAR 0 9
52848: PPUSH
52849: LD_INT 2
52851: PPUSH
52852: CALL_OW 275
52856: PUSH
52857: LD_VAR 0 14
52861: PUSH
52862: LD_INT 2
52864: ARRAY
52865: GREATEREQUAL
52866: AND
52867: IFFALSE 52893
52869: PUSH
52870: LD_VAR 0 9
52874: PPUSH
52875: LD_INT 3
52877: PPUSH
52878: CALL_OW 275
52882: PUSH
52883: LD_VAR 0 14
52887: PUSH
52888: LD_INT 3
52890: ARRAY
52891: GREATEREQUAL
52892: AND
52893: IFFALSE 52905
// result := weapon ;
52895: LD_ADDR_VAR 0 3
52899: PUSH
52900: LD_VAR 0 18
52904: ST_TO_ADDR
// end ; end ;
52905: LD_VAR 0 3
52909: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52910: LD_INT 0
52912: PPUSH
52913: PPUSH
// result := true ;
52914: LD_ADDR_VAR 0 3
52918: PUSH
52919: LD_INT 1
52921: ST_TO_ADDR
// if array1 = array2 then
52922: LD_VAR 0 1
52926: PUSH
52927: LD_VAR 0 2
52931: EQUAL
52932: IFFALSE 52992
// begin for i = 1 to array1 do
52934: LD_ADDR_VAR 0 4
52938: PUSH
52939: DOUBLE
52940: LD_INT 1
52942: DEC
52943: ST_TO_ADDR
52944: LD_VAR 0 1
52948: PUSH
52949: FOR_TO
52950: IFFALSE 52988
// if array1 [ i ] <> array2 [ i ] then
52952: LD_VAR 0 1
52956: PUSH
52957: LD_VAR 0 4
52961: ARRAY
52962: PUSH
52963: LD_VAR 0 2
52967: PUSH
52968: LD_VAR 0 4
52972: ARRAY
52973: NONEQUAL
52974: IFFALSE 52986
// begin result := false ;
52976: LD_ADDR_VAR 0 3
52980: PUSH
52981: LD_INT 0
52983: ST_TO_ADDR
// break ;
52984: GO 52988
// end ;
52986: GO 52949
52988: POP
52989: POP
// end else
52990: GO 53000
// result := false ;
52992: LD_ADDR_VAR 0 3
52996: PUSH
52997: LD_INT 0
52999: ST_TO_ADDR
// end ;
53000: LD_VAR 0 3
53004: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53005: LD_INT 0
53007: PPUSH
53008: PPUSH
// if not array1 or not array2 then
53009: LD_VAR 0 1
53013: NOT
53014: IFTRUE 53023
53016: PUSH
53017: LD_VAR 0 2
53021: NOT
53022: OR
53023: IFFALSE 53027
// exit ;
53025: GO 53091
// result := true ;
53027: LD_ADDR_VAR 0 3
53031: PUSH
53032: LD_INT 1
53034: ST_TO_ADDR
// for i = 1 to array1 do
53035: LD_ADDR_VAR 0 4
53039: PUSH
53040: DOUBLE
53041: LD_INT 1
53043: DEC
53044: ST_TO_ADDR
53045: LD_VAR 0 1
53049: PUSH
53050: FOR_TO
53051: IFFALSE 53089
// if array1 [ i ] <> array2 [ i ] then
53053: LD_VAR 0 1
53057: PUSH
53058: LD_VAR 0 4
53062: ARRAY
53063: PUSH
53064: LD_VAR 0 2
53068: PUSH
53069: LD_VAR 0 4
53073: ARRAY
53074: NONEQUAL
53075: IFFALSE 53087
// begin result := false ;
53077: LD_ADDR_VAR 0 3
53081: PUSH
53082: LD_INT 0
53084: ST_TO_ADDR
// break ;
53085: GO 53089
// end ;
53087: GO 53050
53089: POP
53090: POP
// end ;
53091: LD_VAR 0 3
53095: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53096: LD_INT 0
53098: PPUSH
53099: PPUSH
53100: PPUSH
// pom := GetBase ( fac ) ;
53101: LD_ADDR_VAR 0 5
53105: PUSH
53106: LD_VAR 0 1
53110: PPUSH
53111: CALL_OW 274
53115: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53116: LD_ADDR_VAR 0 4
53120: PUSH
53121: LD_VAR 0 2
53125: PUSH
53126: LD_INT 1
53128: ARRAY
53129: PPUSH
53130: LD_VAR 0 2
53134: PUSH
53135: LD_INT 2
53137: ARRAY
53138: PPUSH
53139: LD_VAR 0 2
53143: PUSH
53144: LD_INT 3
53146: ARRAY
53147: PPUSH
53148: LD_VAR 0 2
53152: PUSH
53153: LD_INT 4
53155: ARRAY
53156: PPUSH
53157: CALL_OW 449
53161: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53162: LD_ADDR_VAR 0 3
53166: PUSH
53167: LD_VAR 0 5
53171: PPUSH
53172: LD_INT 1
53174: PPUSH
53175: CALL_OW 275
53179: PUSH
53180: LD_VAR 0 4
53184: PUSH
53185: LD_INT 1
53187: ARRAY
53188: GREATEREQUAL
53189: IFFALSE 53215
53191: PUSH
53192: LD_VAR 0 5
53196: PPUSH
53197: LD_INT 2
53199: PPUSH
53200: CALL_OW 275
53204: PUSH
53205: LD_VAR 0 4
53209: PUSH
53210: LD_INT 2
53212: ARRAY
53213: GREATEREQUAL
53214: AND
53215: IFFALSE 53241
53217: PUSH
53218: LD_VAR 0 5
53222: PPUSH
53223: LD_INT 3
53225: PPUSH
53226: CALL_OW 275
53230: PUSH
53231: LD_VAR 0 4
53235: PUSH
53236: LD_INT 3
53238: ARRAY
53239: GREATEREQUAL
53240: AND
53241: ST_TO_ADDR
// end ;
53242: LD_VAR 0 3
53246: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53247: LD_INT 0
53249: PPUSH
53250: PPUSH
53251: PPUSH
53252: PPUSH
// pom := GetBase ( building ) ;
53253: LD_ADDR_VAR 0 3
53257: PUSH
53258: LD_VAR 0 1
53262: PPUSH
53263: CALL_OW 274
53267: ST_TO_ADDR
// if not pom then
53268: LD_VAR 0 3
53272: NOT
53273: IFFALSE 53277
// exit ;
53275: GO 53451
// btype := GetBType ( building ) ;
53277: LD_ADDR_VAR 0 5
53281: PUSH
53282: LD_VAR 0 1
53286: PPUSH
53287: CALL_OW 266
53291: ST_TO_ADDR
// if btype = b_armoury then
53292: LD_VAR 0 5
53296: PUSH
53297: LD_INT 4
53299: EQUAL
53300: IFFALSE 53310
// btype := b_barracks ;
53302: LD_ADDR_VAR 0 5
53306: PUSH
53307: LD_INT 5
53309: ST_TO_ADDR
// if btype = b_depot then
53310: LD_VAR 0 5
53314: PUSH
53315: LD_INT 0
53317: EQUAL
53318: IFFALSE 53328
// btype := b_warehouse ;
53320: LD_ADDR_VAR 0 5
53324: PUSH
53325: LD_INT 1
53327: ST_TO_ADDR
// if btype = b_workshop then
53328: LD_VAR 0 5
53332: PUSH
53333: LD_INT 2
53335: EQUAL
53336: IFFALSE 53346
// btype := b_factory ;
53338: LD_ADDR_VAR 0 5
53342: PUSH
53343: LD_INT 3
53345: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53346: LD_ADDR_VAR 0 4
53350: PUSH
53351: LD_VAR 0 5
53355: PPUSH
53356: LD_VAR 0 1
53360: PPUSH
53361: CALL_OW 248
53365: PPUSH
53366: CALL_OW 450
53370: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53371: LD_ADDR_VAR 0 2
53375: PUSH
53376: LD_VAR 0 3
53380: PPUSH
53381: LD_INT 1
53383: PPUSH
53384: CALL_OW 275
53388: PUSH
53389: LD_VAR 0 4
53393: PUSH
53394: LD_INT 1
53396: ARRAY
53397: GREATEREQUAL
53398: IFFALSE 53424
53400: PUSH
53401: LD_VAR 0 3
53405: PPUSH
53406: LD_INT 2
53408: PPUSH
53409: CALL_OW 275
53413: PUSH
53414: LD_VAR 0 4
53418: PUSH
53419: LD_INT 2
53421: ARRAY
53422: GREATEREQUAL
53423: AND
53424: IFFALSE 53450
53426: PUSH
53427: LD_VAR 0 3
53431: PPUSH
53432: LD_INT 3
53434: PPUSH
53435: CALL_OW 275
53439: PUSH
53440: LD_VAR 0 4
53444: PUSH
53445: LD_INT 3
53447: ARRAY
53448: GREATEREQUAL
53449: AND
53450: ST_TO_ADDR
// end ;
53451: LD_VAR 0 2
53455: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53456: LD_INT 0
53458: PPUSH
53459: PPUSH
53460: PPUSH
// pom := GetBase ( building ) ;
53461: LD_ADDR_VAR 0 4
53465: PUSH
53466: LD_VAR 0 1
53470: PPUSH
53471: CALL_OW 274
53475: ST_TO_ADDR
// if not pom then
53476: LD_VAR 0 4
53480: NOT
53481: IFFALSE 53485
// exit ;
53483: GO 53590
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53485: LD_ADDR_VAR 0 5
53489: PUSH
53490: LD_VAR 0 2
53494: PPUSH
53495: LD_VAR 0 1
53499: PPUSH
53500: CALL_OW 248
53504: PPUSH
53505: CALL_OW 450
53509: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53510: LD_ADDR_VAR 0 3
53514: PUSH
53515: LD_VAR 0 4
53519: PPUSH
53520: LD_INT 1
53522: PPUSH
53523: CALL_OW 275
53527: PUSH
53528: LD_VAR 0 5
53532: PUSH
53533: LD_INT 1
53535: ARRAY
53536: GREATEREQUAL
53537: IFFALSE 53563
53539: PUSH
53540: LD_VAR 0 4
53544: PPUSH
53545: LD_INT 2
53547: PPUSH
53548: CALL_OW 275
53552: PUSH
53553: LD_VAR 0 5
53557: PUSH
53558: LD_INT 2
53560: ARRAY
53561: GREATEREQUAL
53562: AND
53563: IFFALSE 53589
53565: PUSH
53566: LD_VAR 0 4
53570: PPUSH
53571: LD_INT 3
53573: PPUSH
53574: CALL_OW 275
53578: PUSH
53579: LD_VAR 0 5
53583: PUSH
53584: LD_INT 3
53586: ARRAY
53587: GREATEREQUAL
53588: AND
53589: ST_TO_ADDR
// end ;
53590: LD_VAR 0 3
53594: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53595: LD_INT 0
53597: PPUSH
53598: PPUSH
53599: PPUSH
53600: PPUSH
53601: PPUSH
53602: PPUSH
53603: PPUSH
53604: PPUSH
53605: PPUSH
53606: PPUSH
53607: PPUSH
// result := false ;
53608: LD_ADDR_VAR 0 8
53612: PUSH
53613: LD_INT 0
53615: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53616: LD_VAR 0 5
53620: NOT
53621: IFTRUE 53630
53623: PUSH
53624: LD_VAR 0 1
53628: NOT
53629: OR
53630: IFTRUE 53639
53632: PUSH
53633: LD_VAR 0 2
53637: NOT
53638: OR
53639: IFTRUE 53648
53641: PUSH
53642: LD_VAR 0 3
53646: NOT
53647: OR
53648: IFFALSE 53652
// exit ;
53650: GO 54478
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53652: LD_ADDR_VAR 0 14
53656: PUSH
53657: LD_VAR 0 1
53661: PPUSH
53662: LD_VAR 0 2
53666: PPUSH
53667: LD_VAR 0 3
53671: PPUSH
53672: LD_VAR 0 4
53676: PPUSH
53677: LD_VAR 0 5
53681: PUSH
53682: LD_INT 1
53684: ARRAY
53685: PPUSH
53686: CALL_OW 248
53690: PPUSH
53691: LD_INT 0
53693: PPUSH
53694: CALL 55759 0 6
53698: ST_TO_ADDR
// if not hexes then
53699: LD_VAR 0 14
53703: NOT
53704: IFFALSE 53708
// exit ;
53706: GO 54478
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53708: LD_ADDR_VAR 0 17
53712: PUSH
53713: LD_VAR 0 5
53717: PPUSH
53718: LD_INT 22
53720: PUSH
53721: LD_VAR 0 13
53725: PPUSH
53726: CALL_OW 255
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: LD_INT 30
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 30
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: LIST
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PPUSH
53767: CALL_OW 72
53771: ST_TO_ADDR
// for i = 1 to hexes do
53772: LD_ADDR_VAR 0 9
53776: PUSH
53777: DOUBLE
53778: LD_INT 1
53780: DEC
53781: ST_TO_ADDR
53782: LD_VAR 0 14
53786: PUSH
53787: FOR_TO
53788: IFFALSE 54476
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53790: LD_ADDR_VAR 0 13
53794: PUSH
53795: LD_VAR 0 14
53799: PUSH
53800: LD_VAR 0 9
53804: ARRAY
53805: PUSH
53806: LD_INT 1
53808: ARRAY
53809: PPUSH
53810: LD_VAR 0 14
53814: PUSH
53815: LD_VAR 0 9
53819: ARRAY
53820: PUSH
53821: LD_INT 2
53823: ARRAY
53824: PPUSH
53825: CALL_OW 428
53829: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53830: LD_VAR 0 14
53834: PUSH
53835: LD_VAR 0 9
53839: ARRAY
53840: PUSH
53841: LD_INT 1
53843: ARRAY
53844: PPUSH
53845: LD_VAR 0 14
53849: PUSH
53850: LD_VAR 0 9
53854: ARRAY
53855: PUSH
53856: LD_INT 2
53858: ARRAY
53859: PPUSH
53860: CALL_OW 351
53864: IFTRUE 53903
53866: PUSH
53867: LD_VAR 0 14
53871: PUSH
53872: LD_VAR 0 9
53876: ARRAY
53877: PUSH
53878: LD_INT 1
53880: ARRAY
53881: PPUSH
53882: LD_VAR 0 14
53886: PUSH
53887: LD_VAR 0 9
53891: ARRAY
53892: PUSH
53893: LD_INT 2
53895: ARRAY
53896: PPUSH
53897: CALL_OW 488
53901: NOT
53902: OR
53903: IFTRUE 53920
53905: PUSH
53906: LD_VAR 0 13
53910: PPUSH
53911: CALL_OW 247
53915: PUSH
53916: LD_INT 3
53918: EQUAL
53919: OR
53920: IFFALSE 53926
// exit ;
53922: POP
53923: POP
53924: GO 54478
// if not tmp then
53926: LD_VAR 0 13
53930: NOT
53931: IFFALSE 53935
// continue ;
53933: GO 53787
// result := true ;
53935: LD_ADDR_VAR 0 8
53939: PUSH
53940: LD_INT 1
53942: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53943: LD_VAR 0 6
53947: IFFALSE 53964
53949: PUSH
53950: LD_VAR 0 13
53954: PPUSH
53955: CALL_OW 247
53959: PUSH
53960: LD_INT 2
53962: EQUAL
53963: AND
53964: IFFALSE 53981
53966: PUSH
53967: LD_VAR 0 13
53971: PPUSH
53972: CALL_OW 263
53976: PUSH
53977: LD_INT 1
53979: EQUAL
53980: AND
53981: IFFALSE 54145
// begin if IsDrivenBy ( tmp ) then
53983: LD_VAR 0 13
53987: PPUSH
53988: CALL_OW 311
53992: IFFALSE 53996
// continue ;
53994: GO 53787
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53996: LD_VAR 0 6
54000: PPUSH
54001: LD_INT 3
54003: PUSH
54004: LD_INT 60
54006: PUSH
54007: EMPTY
54008: LIST
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: PUSH
54017: LD_INT 55
54019: PUSH
54020: EMPTY
54021: LIST
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PPUSH
54031: CALL_OW 72
54035: IFFALSE 54143
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54037: LD_ADDR_VAR 0 18
54041: PUSH
54042: LD_VAR 0 6
54046: PPUSH
54047: LD_INT 3
54049: PUSH
54050: LD_INT 60
54052: PUSH
54053: EMPTY
54054: LIST
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 3
54062: PUSH
54063: LD_INT 55
54065: PUSH
54066: EMPTY
54067: LIST
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PPUSH
54077: CALL_OW 72
54081: PUSH
54082: LD_INT 1
54084: ARRAY
54085: ST_TO_ADDR
// if IsInUnit ( driver ) then
54086: LD_VAR 0 18
54090: PPUSH
54091: CALL_OW 310
54095: IFFALSE 54106
// ComExit ( driver ) ;
54097: LD_VAR 0 18
54101: PPUSH
54102: CALL 79749 0 1
// AddComEnterUnit ( driver , tmp ) ;
54106: LD_VAR 0 18
54110: PPUSH
54111: LD_VAR 0 13
54115: PPUSH
54116: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54120: LD_VAR 0 18
54124: PPUSH
54125: LD_VAR 0 7
54129: PPUSH
54130: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54134: LD_VAR 0 18
54138: PPUSH
54139: CALL_OW 181
// end ; continue ;
54143: GO 53787
// end ; if not cleaners or not tmp in cleaners then
54145: LD_VAR 0 6
54149: NOT
54150: IFTRUE 54165
54152: PUSH
54153: LD_VAR 0 13
54157: PUSH
54158: LD_VAR 0 6
54162: IN
54163: NOT
54164: OR
54165: IFFALSE 54474
// begin if dep then
54167: LD_VAR 0 17
54171: IFFALSE 54307
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54173: LD_ADDR_VAR 0 16
54177: PUSH
54178: LD_VAR 0 17
54182: PUSH
54183: LD_INT 1
54185: ARRAY
54186: PPUSH
54187: CALL_OW 250
54191: PPUSH
54192: LD_VAR 0 17
54196: PUSH
54197: LD_INT 1
54199: ARRAY
54200: PPUSH
54201: CALL_OW 254
54205: PPUSH
54206: LD_INT 5
54208: PPUSH
54209: CALL_OW 272
54213: PUSH
54214: LD_VAR 0 17
54218: PUSH
54219: LD_INT 1
54221: ARRAY
54222: PPUSH
54223: CALL_OW 251
54227: PPUSH
54228: LD_VAR 0 17
54232: PUSH
54233: LD_INT 1
54235: ARRAY
54236: PPUSH
54237: CALL_OW 254
54241: PPUSH
54242: LD_INT 5
54244: PPUSH
54245: CALL_OW 273
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54254: LD_VAR 0 16
54258: PUSH
54259: LD_INT 1
54261: ARRAY
54262: PPUSH
54263: LD_VAR 0 16
54267: PUSH
54268: LD_INT 2
54270: ARRAY
54271: PPUSH
54272: CALL_OW 488
54276: IFFALSE 54307
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54278: LD_VAR 0 13
54282: PPUSH
54283: LD_VAR 0 16
54287: PUSH
54288: LD_INT 1
54290: ARRAY
54291: PPUSH
54292: LD_VAR 0 16
54296: PUSH
54297: LD_INT 2
54299: ARRAY
54300: PPUSH
54301: CALL_OW 111
// continue ;
54305: GO 53787
// end ; end ; r := GetDir ( tmp ) ;
54307: LD_ADDR_VAR 0 15
54311: PUSH
54312: LD_VAR 0 13
54316: PPUSH
54317: CALL_OW 254
54321: ST_TO_ADDR
// if r = 5 then
54322: LD_VAR 0 15
54326: PUSH
54327: LD_INT 5
54329: EQUAL
54330: IFFALSE 54340
// r := 0 ;
54332: LD_ADDR_VAR 0 15
54336: PUSH
54337: LD_INT 0
54339: ST_TO_ADDR
// for j = r to 5 do
54340: LD_ADDR_VAR 0 10
54344: PUSH
54345: DOUBLE
54346: LD_VAR 0 15
54350: DEC
54351: ST_TO_ADDR
54352: LD_INT 5
54354: PUSH
54355: FOR_TO
54356: IFFALSE 54472
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54358: LD_ADDR_VAR 0 11
54362: PUSH
54363: LD_VAR 0 13
54367: PPUSH
54368: CALL_OW 250
54372: PPUSH
54373: LD_VAR 0 10
54377: PPUSH
54378: LD_INT 2
54380: PPUSH
54381: CALL_OW 272
54385: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54386: LD_ADDR_VAR 0 12
54390: PUSH
54391: LD_VAR 0 13
54395: PPUSH
54396: CALL_OW 251
54400: PPUSH
54401: LD_VAR 0 10
54405: PPUSH
54406: LD_INT 2
54408: PPUSH
54409: CALL_OW 273
54413: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54414: LD_VAR 0 11
54418: PPUSH
54419: LD_VAR 0 12
54423: PPUSH
54424: CALL_OW 488
54428: IFFALSE 54447
54430: PUSH
54431: LD_VAR 0 11
54435: PPUSH
54436: LD_VAR 0 12
54440: PPUSH
54441: CALL_OW 428
54445: NOT
54446: AND
54447: IFFALSE 54470
// begin ComMoveXY ( tmp , _x , _y ) ;
54449: LD_VAR 0 13
54453: PPUSH
54454: LD_VAR 0 11
54458: PPUSH
54459: LD_VAR 0 12
54463: PPUSH
54464: CALL_OW 111
// break ;
54468: GO 54472
// end ; end ;
54470: GO 54355
54472: POP
54473: POP
// end ; end ;
54474: GO 53787
54476: POP
54477: POP
// end ;
54478: LD_VAR 0 8
54482: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54483: LD_INT 0
54485: PPUSH
// result := true ;
54486: LD_ADDR_VAR 0 3
54490: PUSH
54491: LD_INT 1
54493: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54494: LD_VAR 0 2
54498: PUSH
54499: LD_INT 24
54501: DOUBLE
54502: EQUAL
54503: IFTRUE 54513
54505: LD_INT 33
54507: DOUBLE
54508: EQUAL
54509: IFTRUE 54513
54511: GO 54538
54513: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54514: LD_ADDR_VAR 0 3
54518: PUSH
54519: LD_INT 32
54521: PPUSH
54522: LD_VAR 0 1
54526: PPUSH
54527: CALL_OW 321
54531: PUSH
54532: LD_INT 2
54534: EQUAL
54535: ST_TO_ADDR
54536: GO 54854
54538: LD_INT 20
54540: DOUBLE
54541: EQUAL
54542: IFTRUE 54546
54544: GO 54571
54546: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54547: LD_ADDR_VAR 0 3
54551: PUSH
54552: LD_INT 6
54554: PPUSH
54555: LD_VAR 0 1
54559: PPUSH
54560: CALL_OW 321
54564: PUSH
54565: LD_INT 2
54567: EQUAL
54568: ST_TO_ADDR
54569: GO 54854
54571: LD_INT 22
54573: DOUBLE
54574: EQUAL
54575: IFTRUE 54585
54577: LD_INT 36
54579: DOUBLE
54580: EQUAL
54581: IFTRUE 54585
54583: GO 54610
54585: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54586: LD_ADDR_VAR 0 3
54590: PUSH
54591: LD_INT 15
54593: PPUSH
54594: LD_VAR 0 1
54598: PPUSH
54599: CALL_OW 321
54603: PUSH
54604: LD_INT 2
54606: EQUAL
54607: ST_TO_ADDR
54608: GO 54854
54610: LD_INT 30
54612: DOUBLE
54613: EQUAL
54614: IFTRUE 54618
54616: GO 54643
54618: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54619: LD_ADDR_VAR 0 3
54623: PUSH
54624: LD_INT 20
54626: PPUSH
54627: LD_VAR 0 1
54631: PPUSH
54632: CALL_OW 321
54636: PUSH
54637: LD_INT 2
54639: EQUAL
54640: ST_TO_ADDR
54641: GO 54854
54643: LD_INT 28
54645: DOUBLE
54646: EQUAL
54647: IFTRUE 54657
54649: LD_INT 21
54651: DOUBLE
54652: EQUAL
54653: IFTRUE 54657
54655: GO 54682
54657: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54658: LD_ADDR_VAR 0 3
54662: PUSH
54663: LD_INT 21
54665: PPUSH
54666: LD_VAR 0 1
54670: PPUSH
54671: CALL_OW 321
54675: PUSH
54676: LD_INT 2
54678: EQUAL
54679: ST_TO_ADDR
54680: GO 54854
54682: LD_INT 16
54684: DOUBLE
54685: EQUAL
54686: IFTRUE 54690
54688: GO 54715
54690: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54691: LD_ADDR_VAR 0 3
54695: PUSH
54696: LD_INT 84
54698: PPUSH
54699: LD_VAR 0 1
54703: PPUSH
54704: CALL_OW 321
54708: PUSH
54709: LD_INT 2
54711: EQUAL
54712: ST_TO_ADDR
54713: GO 54854
54715: LD_INT 19
54717: DOUBLE
54718: EQUAL
54719: IFTRUE 54729
54721: LD_INT 23
54723: DOUBLE
54724: EQUAL
54725: IFTRUE 54729
54727: GO 54754
54729: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54730: LD_ADDR_VAR 0 3
54734: PUSH
54735: LD_INT 83
54737: PPUSH
54738: LD_VAR 0 1
54742: PPUSH
54743: CALL_OW 321
54747: PUSH
54748: LD_INT 2
54750: EQUAL
54751: ST_TO_ADDR
54752: GO 54854
54754: LD_INT 17
54756: DOUBLE
54757: EQUAL
54758: IFTRUE 54762
54760: GO 54787
54762: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54763: LD_ADDR_VAR 0 3
54767: PUSH
54768: LD_INT 39
54770: PPUSH
54771: LD_VAR 0 1
54775: PPUSH
54776: CALL_OW 321
54780: PUSH
54781: LD_INT 2
54783: EQUAL
54784: ST_TO_ADDR
54785: GO 54854
54787: LD_INT 18
54789: DOUBLE
54790: EQUAL
54791: IFTRUE 54795
54793: GO 54820
54795: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54796: LD_ADDR_VAR 0 3
54800: PUSH
54801: LD_INT 40
54803: PPUSH
54804: LD_VAR 0 1
54808: PPUSH
54809: CALL_OW 321
54813: PUSH
54814: LD_INT 2
54816: EQUAL
54817: ST_TO_ADDR
54818: GO 54854
54820: LD_INT 27
54822: DOUBLE
54823: EQUAL
54824: IFTRUE 54828
54826: GO 54853
54828: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54829: LD_ADDR_VAR 0 3
54833: PUSH
54834: LD_INT 35
54836: PPUSH
54837: LD_VAR 0 1
54841: PPUSH
54842: CALL_OW 321
54846: PUSH
54847: LD_INT 2
54849: EQUAL
54850: ST_TO_ADDR
54851: GO 54854
54853: POP
// end ;
54854: LD_VAR 0 3
54858: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54859: LD_INT 0
54861: PPUSH
54862: PPUSH
54863: PPUSH
54864: PPUSH
54865: PPUSH
54866: PPUSH
54867: PPUSH
54868: PPUSH
54869: PPUSH
54870: PPUSH
54871: PPUSH
// result := false ;
54872: LD_ADDR_VAR 0 6
54876: PUSH
54877: LD_INT 0
54879: ST_TO_ADDR
// if btype = b_depot then
54880: LD_VAR 0 2
54884: PUSH
54885: LD_INT 0
54887: EQUAL
54888: IFFALSE 54900
// begin result := true ;
54890: LD_ADDR_VAR 0 6
54894: PUSH
54895: LD_INT 1
54897: ST_TO_ADDR
// exit ;
54898: GO 55754
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54900: LD_VAR 0 1
54904: NOT
54905: IFTRUE 54930
54907: PUSH
54908: LD_VAR 0 1
54912: PPUSH
54913: CALL_OW 266
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: IN
54928: NOT
54929: OR
54930: IFTRUE 54939
54932: PUSH
54933: LD_VAR 0 2
54937: NOT
54938: OR
54939: IFTRUE 54975
54941: PUSH
54942: LD_VAR 0 5
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: LD_INT 3
54958: PUSH
54959: LD_INT 4
54961: PUSH
54962: LD_INT 5
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: IN
54973: NOT
54974: OR
54975: IFTRUE 54994
54977: PUSH
54978: LD_VAR 0 3
54982: PPUSH
54983: LD_VAR 0 4
54987: PPUSH
54988: CALL_OW 488
54992: NOT
54993: OR
54994: IFFALSE 54998
// exit ;
54996: GO 55754
// side := GetSide ( depot ) ;
54998: LD_ADDR_VAR 0 9
55002: PUSH
55003: LD_VAR 0 1
55007: PPUSH
55008: CALL_OW 255
55012: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55013: LD_VAR 0 9
55017: PPUSH
55018: LD_VAR 0 2
55022: PPUSH
55023: CALL 54483 0 2
55027: NOT
55028: IFFALSE 55032
// exit ;
55030: GO 55754
// pom := GetBase ( depot ) ;
55032: LD_ADDR_VAR 0 10
55036: PUSH
55037: LD_VAR 0 1
55041: PPUSH
55042: CALL_OW 274
55046: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55047: LD_ADDR_VAR 0 11
55051: PUSH
55052: LD_VAR 0 2
55056: PPUSH
55057: LD_VAR 0 1
55061: PPUSH
55062: CALL_OW 248
55066: PPUSH
55067: CALL_OW 450
55071: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55072: LD_VAR 0 10
55076: PPUSH
55077: LD_INT 1
55079: PPUSH
55080: CALL_OW 275
55084: PUSH
55085: LD_VAR 0 11
55089: PUSH
55090: LD_INT 1
55092: ARRAY
55093: GREATEREQUAL
55094: IFFALSE 55120
55096: PUSH
55097: LD_VAR 0 10
55101: PPUSH
55102: LD_INT 2
55104: PPUSH
55105: CALL_OW 275
55109: PUSH
55110: LD_VAR 0 11
55114: PUSH
55115: LD_INT 2
55117: ARRAY
55118: GREATEREQUAL
55119: AND
55120: IFFALSE 55146
55122: PUSH
55123: LD_VAR 0 10
55127: PPUSH
55128: LD_INT 3
55130: PPUSH
55131: CALL_OW 275
55135: PUSH
55136: LD_VAR 0 11
55140: PUSH
55141: LD_INT 3
55143: ARRAY
55144: GREATEREQUAL
55145: AND
55146: NOT
55147: IFFALSE 55151
// exit ;
55149: GO 55754
// if GetBType ( depot ) = b_depot then
55151: LD_VAR 0 1
55155: PPUSH
55156: CALL_OW 266
55160: PUSH
55161: LD_INT 0
55163: EQUAL
55164: IFFALSE 55176
// dist := 28 else
55166: LD_ADDR_VAR 0 14
55170: PUSH
55171: LD_INT 28
55173: ST_TO_ADDR
55174: GO 55184
// dist := 36 ;
55176: LD_ADDR_VAR 0 14
55180: PUSH
55181: LD_INT 36
55183: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55184: LD_VAR 0 1
55188: PPUSH
55189: LD_VAR 0 3
55193: PPUSH
55194: LD_VAR 0 4
55198: PPUSH
55199: CALL_OW 297
55203: PUSH
55204: LD_VAR 0 14
55208: GREATER
55209: IFFALSE 55213
// exit ;
55211: GO 55754
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55213: LD_ADDR_VAR 0 12
55217: PUSH
55218: LD_VAR 0 2
55222: PPUSH
55223: LD_VAR 0 3
55227: PPUSH
55228: LD_VAR 0 4
55232: PPUSH
55233: LD_VAR 0 5
55237: PPUSH
55238: LD_VAR 0 1
55242: PPUSH
55243: CALL_OW 248
55247: PPUSH
55248: LD_INT 0
55250: PPUSH
55251: CALL 55759 0 6
55255: ST_TO_ADDR
// if not hexes then
55256: LD_VAR 0 12
55260: NOT
55261: IFFALSE 55265
// exit ;
55263: GO 55754
// hex := GetHexInfo ( x , y ) ;
55265: LD_ADDR_VAR 0 15
55269: PUSH
55270: LD_VAR 0 3
55274: PPUSH
55275: LD_VAR 0 4
55279: PPUSH
55280: CALL_OW 546
55284: ST_TO_ADDR
// if hex [ 1 ] then
55285: LD_VAR 0 15
55289: PUSH
55290: LD_INT 1
55292: ARRAY
55293: IFFALSE 55297
// exit ;
55295: GO 55754
// height := hex [ 2 ] ;
55297: LD_ADDR_VAR 0 13
55301: PUSH
55302: LD_VAR 0 15
55306: PUSH
55307: LD_INT 2
55309: ARRAY
55310: ST_TO_ADDR
// for i = 1 to hexes do
55311: LD_ADDR_VAR 0 7
55315: PUSH
55316: DOUBLE
55317: LD_INT 1
55319: DEC
55320: ST_TO_ADDR
55321: LD_VAR 0 12
55325: PUSH
55326: FOR_TO
55327: IFFALSE 55671
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55329: LD_VAR 0 12
55333: PUSH
55334: LD_VAR 0 7
55338: ARRAY
55339: PUSH
55340: LD_INT 1
55342: ARRAY
55343: PPUSH
55344: LD_VAR 0 12
55348: PUSH
55349: LD_VAR 0 7
55353: ARRAY
55354: PUSH
55355: LD_INT 2
55357: ARRAY
55358: PPUSH
55359: CALL_OW 488
55363: NOT
55364: IFTRUE 55406
55366: PUSH
55367: LD_VAR 0 12
55371: PUSH
55372: LD_VAR 0 7
55376: ARRAY
55377: PUSH
55378: LD_INT 1
55380: ARRAY
55381: PPUSH
55382: LD_VAR 0 12
55386: PUSH
55387: LD_VAR 0 7
55391: ARRAY
55392: PUSH
55393: LD_INT 2
55395: ARRAY
55396: PPUSH
55397: CALL_OW 428
55401: PUSH
55402: LD_INT 0
55404: GREATER
55405: OR
55406: IFTRUE 55444
55408: PUSH
55409: LD_VAR 0 12
55413: PUSH
55414: LD_VAR 0 7
55418: ARRAY
55419: PUSH
55420: LD_INT 1
55422: ARRAY
55423: PPUSH
55424: LD_VAR 0 12
55428: PUSH
55429: LD_VAR 0 7
55433: ARRAY
55434: PUSH
55435: LD_INT 2
55437: ARRAY
55438: PPUSH
55439: CALL_OW 351
55443: OR
55444: IFFALSE 55450
// exit ;
55446: POP
55447: POP
55448: GO 55754
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55450: LD_ADDR_VAR 0 8
55454: PUSH
55455: LD_VAR 0 12
55459: PUSH
55460: LD_VAR 0 7
55464: ARRAY
55465: PUSH
55466: LD_INT 1
55468: ARRAY
55469: PPUSH
55470: LD_VAR 0 12
55474: PUSH
55475: LD_VAR 0 7
55479: ARRAY
55480: PUSH
55481: LD_INT 2
55483: ARRAY
55484: PPUSH
55485: CALL_OW 546
55489: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55490: LD_VAR 0 8
55494: PUSH
55495: LD_INT 1
55497: ARRAY
55498: IFTRUE 55520
55500: PUSH
55501: LD_VAR 0 8
55505: PUSH
55506: LD_INT 2
55508: ARRAY
55509: PUSH
55510: LD_VAR 0 13
55514: PUSH
55515: LD_INT 2
55517: PLUS
55518: GREATER
55519: OR
55520: IFTRUE 55542
55522: PUSH
55523: LD_VAR 0 8
55527: PUSH
55528: LD_INT 2
55530: ARRAY
55531: PUSH
55532: LD_VAR 0 13
55536: PUSH
55537: LD_INT 2
55539: MINUS
55540: LESS
55541: OR
55542: IFTRUE 55610
55544: PUSH
55545: LD_VAR 0 8
55549: PUSH
55550: LD_INT 3
55552: ARRAY
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 8
55559: PUSH
55560: LD_INT 9
55562: PUSH
55563: LD_INT 10
55565: PUSH
55566: LD_INT 11
55568: PUSH
55569: LD_INT 12
55571: PUSH
55572: LD_INT 13
55574: PUSH
55575: LD_INT 16
55577: PUSH
55578: LD_INT 17
55580: PUSH
55581: LD_INT 18
55583: PUSH
55584: LD_INT 19
55586: PUSH
55587: LD_INT 20
55589: PUSH
55590: LD_INT 21
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: IN
55608: NOT
55609: OR
55610: IFTRUE 55623
55612: PUSH
55613: LD_VAR 0 8
55617: PUSH
55618: LD_INT 5
55620: ARRAY
55621: NOT
55622: OR
55623: IFTRUE 55663
55625: PUSH
55626: LD_VAR 0 8
55630: PUSH
55631: LD_INT 6
55633: ARRAY
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: LD_INT 7
55643: PUSH
55644: LD_INT 9
55646: PUSH
55647: LD_INT 10
55649: PUSH
55650: LD_INT 11
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: IN
55661: NOT
55662: OR
55663: IFFALSE 55669
// exit ;
55665: POP
55666: POP
55667: GO 55754
// end ;
55669: GO 55326
55671: POP
55672: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55673: LD_VAR 0 9
55677: PPUSH
55678: LD_VAR 0 3
55682: PPUSH
55683: LD_VAR 0 4
55687: PPUSH
55688: LD_INT 20
55690: PPUSH
55691: CALL 47573 0 4
55695: PUSH
55696: LD_INT 4
55698: ARRAY
55699: IFFALSE 55703
// exit ;
55701: GO 55754
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55703: LD_VAR 0 2
55707: PUSH
55708: LD_INT 29
55710: PUSH
55711: LD_INT 30
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: IN
55718: IFFALSE 55742
55720: PUSH
55721: LD_VAR 0 3
55725: PPUSH
55726: LD_VAR 0 4
55730: PPUSH
55731: LD_VAR 0 9
55735: PPUSH
55736: CALL_OW 440
55740: NOT
55741: AND
55742: IFFALSE 55746
// exit ;
55744: GO 55754
// result := true ;
55746: LD_ADDR_VAR 0 6
55750: PUSH
55751: LD_INT 1
55753: ST_TO_ADDR
// end ;
55754: LD_VAR 0 6
55758: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55759: LD_INT 0
55761: PPUSH
55762: PPUSH
55763: PPUSH
55764: PPUSH
55765: PPUSH
55766: PPUSH
55767: PPUSH
55768: PPUSH
55769: PPUSH
55770: PPUSH
55771: PPUSH
55772: PPUSH
55773: PPUSH
55774: PPUSH
55775: PPUSH
55776: PPUSH
55777: PPUSH
55778: PPUSH
55779: PPUSH
55780: PPUSH
55781: PPUSH
55782: PPUSH
55783: PPUSH
55784: PPUSH
55785: PPUSH
55786: PPUSH
55787: PPUSH
55788: PPUSH
55789: PPUSH
55790: PPUSH
55791: PPUSH
55792: PPUSH
55793: PPUSH
55794: PPUSH
55795: PPUSH
55796: PPUSH
55797: PPUSH
55798: PPUSH
55799: PPUSH
55800: PPUSH
55801: PPUSH
55802: PPUSH
55803: PPUSH
55804: PPUSH
55805: PPUSH
55806: PPUSH
55807: PPUSH
55808: PPUSH
55809: PPUSH
55810: PPUSH
55811: PPUSH
55812: PPUSH
55813: PPUSH
55814: PPUSH
55815: PPUSH
55816: PPUSH
55817: PPUSH
55818: PPUSH
// result = [ ] ;
55819: LD_ADDR_VAR 0 7
55823: PUSH
55824: EMPTY
55825: ST_TO_ADDR
// temp_list = [ ] ;
55826: LD_ADDR_VAR 0 9
55830: PUSH
55831: EMPTY
55832: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55833: LD_VAR 0 4
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 3
55849: PUSH
55850: LD_INT 4
55852: PUSH
55853: LD_INT 5
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: IN
55864: NOT
55865: IFTRUE 55908
55867: PUSH
55868: LD_VAR 0 1
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: IN
55883: IFFALSE 55907
55885: PUSH
55886: LD_VAR 0 5
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: LIST
55904: IN
55905: NOT
55906: AND
55907: OR
55908: IFFALSE 55912
// exit ;
55910: GO 74311
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55912: LD_VAR 0 1
55916: PUSH
55917: LD_INT 6
55919: PUSH
55920: LD_INT 7
55922: PUSH
55923: LD_INT 8
55925: PUSH
55926: LD_INT 13
55928: PUSH
55929: LD_INT 12
55931: PUSH
55932: LD_INT 15
55934: PUSH
55935: LD_INT 11
55937: PUSH
55938: LD_INT 14
55940: PUSH
55941: LD_INT 10
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: IN
55955: IFFALSE 55965
// btype = b_lab ;
55957: LD_ADDR_VAR 0 1
55961: PUSH
55962: LD_INT 6
55964: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55965: LD_VAR 0 6
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: LIST
55983: IN
55984: NOT
55985: IFTRUE 56053
55987: PUSH
55988: LD_VAR 0 1
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: LD_INT 3
56004: PUSH
56005: LD_INT 6
56007: PUSH
56008: LD_INT 36
56010: PUSH
56011: LD_INT 4
56013: PUSH
56014: LD_INT 5
56016: PUSH
56017: LD_INT 31
56019: PUSH
56020: LD_INT 32
56022: PUSH
56023: LD_INT 33
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: IN
56039: NOT
56040: IFFALSE 56052
56042: PUSH
56043: LD_VAR 0 6
56047: PUSH
56048: LD_INT 1
56050: EQUAL
56051: AND
56052: OR
56053: IFTRUE 56085
56055: PUSH
56056: LD_VAR 0 1
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: LD_INT 3
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: IN
56071: NOT
56072: IFFALSE 56084
56074: PUSH
56075: LD_VAR 0 6
56079: PUSH
56080: LD_INT 2
56082: EQUAL
56083: AND
56084: OR
56085: IFFALSE 56095
// mode = 0 ;
56087: LD_ADDR_VAR 0 6
56091: PUSH
56092: LD_INT 0
56094: ST_TO_ADDR
// case mode of 0 :
56095: LD_VAR 0 6
56099: PUSH
56100: LD_INT 0
56102: DOUBLE
56103: EQUAL
56104: IFTRUE 56108
56106: GO 67561
56108: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56109: LD_ADDR_VAR 0 11
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: LD_INT 3
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 3
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: LD_INT 2
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56302: LD_ADDR_VAR 0 12
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 3
56459: NEG
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56498: LD_ADDR_VAR 0 13
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: NEG
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: LD_INT 3
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 3
56669: NEG
56670: PUSH
56671: LD_INT 3
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56697: LD_ADDR_VAR 0 14
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: LD_INT 2
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 2
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 3
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 3
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56893: LD_ADDR_VAR 0 15
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 2
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 3
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 3
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57086: LD_ADDR_VAR 0 16
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: LD_INT 2
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: LD_INT 2
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: NEG
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 3
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: LD_INT 3
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57279: LD_ADDR_VAR 0 17
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: LD_INT 2
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: LD_INT 2
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 2
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 2
57466: NEG
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 2
57478: NEG
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57509: LD_ADDR_VAR 0 18
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 2
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 2
57708: NEG
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57739: LD_ADDR_VAR 0 19
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 2
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: NEG
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: NEG
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 2
57938: NEG
57939: PUSH
57940: LD_INT 2
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57969: LD_ADDR_VAR 0 20
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 0
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: LD_INT 2
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: LD_INT 2
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: LD_INT 2
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 1
58134: NEG
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 2
58145: NEG
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 2
58168: NEG
58169: PUSH
58170: LD_INT 2
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58199: LD_ADDR_VAR 0 21
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: LD_INT 0
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 2
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: LD_INT 2
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: LD_INT 2
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 2
58386: NEG
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 2
58398: NEG
58399: PUSH
58400: LD_INT 2
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58429: LD_ADDR_VAR 0 22
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 2
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: LD_INT 2
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58659: LD_ADDR_VAR 0 23
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: LD_INT 2
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: LD_INT 2
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 2
58835: NEG
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 2
58846: NEG
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 2
58858: NEG
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: NEG
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: LD_INT 3
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 2
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58939: LD_ADDR_VAR 0 24
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 2
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: LD_INT 2
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: LD_INT 2
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 3
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59215: LD_ADDR_VAR 0 25
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: LD_INT 1
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: NEG
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 2
59340: PUSH
59341: LD_INT 1
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: LD_INT 2
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 2
59391: NEG
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: NEG
59415: PUSH
59416: LD_INT 2
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 3
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 3
59436: PUSH
59437: LD_INT 2
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 2
59446: PUSH
59447: LD_INT 3
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: LD_INT 3
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59489: LD_ADDR_VAR 0 26
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 1
59558: NEG
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: LD_INT 2
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 2
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 2
59624: PUSH
59625: LD_INT 2
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 2
59665: NEG
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 2
59688: NEG
59689: PUSH
59690: LD_INT 2
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 2
59700: PUSH
59701: LD_INT 3
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: LD_INT 3
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: LD_INT 1
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59765: LD_ADDR_VAR 0 27
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: LD_INT 2
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: LD_INT 2
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 2
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 2
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: LD_INT 2
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 2
59941: NEG
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 2
59964: NEG
59965: PUSH
59966: LD_INT 2
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: NEG
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 3
59998: NEG
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 3
60010: NEG
60011: PUSH
60012: LD_INT 2
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60045: LD_ADDR_VAR 0 28
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: LD_INT 2
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: LD_INT 2
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 2
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 2
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: LD_INT 2
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: LD_INT 2
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 2
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: LD_INT 1
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 2
60221: NEG
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 2
60244: NEG
60245: PUSH
60246: LD_INT 2
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 2
60256: NEG
60257: PUSH
60258: LD_INT 3
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 1
60268: NEG
60269: PUSH
60270: LD_INT 3
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 3
60292: NEG
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60327: LD_ADDR_VAR 0 29
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: LD_INT 2
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: NEG
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 2
60505: NEG
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: LD_INT 3
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 2
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 3
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: LD_INT 3
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 3
60571: NEG
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60606: LD_ADDR_VAR 0 30
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 0
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 2
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: LD_INT 2
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 2
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 2
60741: PUSH
60742: LD_INT 2
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: LD_INT 2
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 2
60772: NEG
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 2
60783: NEG
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: LD_INT 3
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 3
60818: PUSH
60819: LD_INT 2
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: LD_INT 3
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: NEG
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 3
60849: NEG
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60884: LD_ADDR_VAR 0 31
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 1
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: LD_INT 2
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 2
60988: PUSH
60989: LD_INT 0
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: LD_INT 2
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: LD_INT 2
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 2
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: NEG
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: NEG
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 2
61061: NEG
61062: PUSH
61063: LD_INT 2
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 2
61073: NEG
61074: PUSH
61075: LD_INT 3
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 3
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 3
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 3
61127: NEG
61128: PUSH
61129: LD_INT 2
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61162: LD_ADDR_VAR 0 32
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: LD_INT 1
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: LD_INT 2
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 2
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: LD_INT 2
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 2
61328: NEG
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: LD_INT 3
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: LD_INT 2
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 3
61374: PUSH
61375: LD_INT 2
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 2
61384: PUSH
61385: LD_INT 3
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 2
61394: NEG
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 3
61405: NEG
61406: PUSH
61407: LD_INT 1
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61440: LD_ADDR_VAR 0 33
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: LD_INT 2
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: LD_INT 1
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: LD_INT 2
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: NEG
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 2
61595: NEG
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: LD_INT 2
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: NEG
61631: PUSH
61632: LD_INT 3
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 2
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 3
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: LD_INT 3
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 1
61673: NEG
61674: PUSH
61675: LD_INT 2
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 3
61684: NEG
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61719: LD_ADDR_VAR 0 34
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 1
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 1
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: LD_INT 2
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 2
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 2
61844: PUSH
61845: LD_INT 2
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: LD_INT 2
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 2
61875: NEG
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 2
61898: NEG
61899: PUSH
61900: LD_INT 2
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: LD_INT 3
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 3
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 2
61943: PUSH
61944: LD_INT 3
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 2
61953: NEG
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 3
61964: NEG
61965: PUSH
61966: LD_INT 1
61968: NEG
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61999: LD_ADDR_VAR 0 35
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: LD_INT 1
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: NEG
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: NEG
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 2
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 2
62090: NEG
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62111: LD_ADDR_VAR 0 36
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: LD_INT 1
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 1
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 0
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 1
62169: NEG
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 1
62180: NEG
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: LD_INT 2
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: LD_INT 2
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62223: LD_ADDR_VAR 0 37
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: LD_INT 1
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: LD_INT 1
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: NEG
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62335: LD_ADDR_VAR 0 38
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 2
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 2
62426: NEG
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62447: LD_ADDR_VAR 0 39
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 0
62464: PUSH
62465: LD_INT 1
62467: NEG
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 1
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 0
62495: PUSH
62496: LD_INT 1
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: LD_INT 1
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: LD_INT 2
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: LD_INT 2
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62559: LD_ADDR_VAR 0 40
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: LD_INT 0
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: LD_INT 1
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 1
62617: NEG
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: NEG
62629: PUSH
62630: LD_INT 1
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 1
62651: NEG
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62671: LD_ADDR_VAR 0 41
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 0
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: LD_INT 0
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: LD_INT 1
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: LD_INT 2
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: LD_INT 2
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 1
62805: PUSH
62806: LD_INT 2
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 1
62815: NEG
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 2
62826: NEG
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: NEG
62838: PUSH
62839: LD_INT 1
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 2
62849: NEG
62850: PUSH
62851: LD_INT 2
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 2
62861: NEG
62862: PUSH
62863: LD_INT 3
62865: NEG
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 2
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 3
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 3
62894: PUSH
62895: LD_INT 1
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 3
62904: PUSH
62905: LD_INT 2
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 3
62914: PUSH
62915: LD_INT 3
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 2
62924: PUSH
62925: LD_INT 3
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 2
62934: NEG
62935: PUSH
62936: LD_INT 1
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 3
62945: NEG
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 3
62956: NEG
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 3
62968: NEG
62969: PUSH
62970: LD_INT 2
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 3
62980: NEG
62981: PUSH
62982: LD_INT 3
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63021: LD_ADDR_VAR 0 42
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: NEG
63103: PUSH
63104: LD_INT 2
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 0
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 2
63136: PUSH
63137: LD_INT 1
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: LD_INT 2
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: NEG
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 2
63187: NEG
63188: PUSH
63189: LD_INT 1
63191: NEG
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 2
63199: NEG
63200: PUSH
63201: LD_INT 2
63203: NEG
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 2
63211: NEG
63212: PUSH
63213: LD_INT 3
63215: NEG
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: LD_INT 3
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: LD_INT 3
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: LD_INT 2
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 3
63257: PUSH
63258: LD_INT 2
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 3
63267: PUSH
63268: LD_INT 3
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: LD_INT 3
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 1
63287: PUSH
63288: LD_INT 3
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: LD_INT 3
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: NEG
63308: PUSH
63309: LD_INT 2
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 3
63318: NEG
63319: PUSH
63320: LD_INT 2
63322: NEG
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 3
63330: NEG
63331: PUSH
63332: LD_INT 3
63334: NEG
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63371: LD_ADDR_VAR 0 43
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 1
63452: NEG
63453: PUSH
63454: LD_INT 2
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: LD_INT 2
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 2
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: LD_INT 1
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: LD_INT 2
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: LD_INT 2
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 1
63526: NEG
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 2
63537: NEG
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: NEG
63549: PUSH
63550: LD_INT 1
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 1
63560: NEG
63561: PUSH
63562: LD_INT 3
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: LD_INT 3
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: LD_INT 2
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 2
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 3
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 3
63615: PUSH
63616: LD_INT 1
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 1
63625: PUSH
63626: LD_INT 3
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: LD_INT 3
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: LD_INT 2
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 2
63656: NEG
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 3
63667: NEG
63668: PUSH
63669: LD_INT 0
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 3
63678: NEG
63679: PUSH
63680: LD_INT 1
63682: NEG
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63719: LD_ADDR_VAR 0 44
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 0
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 0
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: LD_INT 0
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 2
63843: PUSH
63844: LD_INT 2
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: NEG
63864: PUSH
63865: LD_INT 1
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 2
63874: NEG
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 2
63885: NEG
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 2
63897: NEG
63898: PUSH
63899: LD_INT 2
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 2
63909: NEG
63910: PUSH
63911: LD_INT 3
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 2
63921: PUSH
63922: LD_INT 1
63924: NEG
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 3
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 3
63942: PUSH
63943: LD_INT 1
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 3
63952: PUSH
63953: LD_INT 2
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 3
63962: PUSH
63963: LD_INT 3
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 2
63972: PUSH
63973: LD_INT 3
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 2
63982: NEG
63983: PUSH
63984: LD_INT 1
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 3
63993: NEG
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 3
64004: NEG
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 3
64016: NEG
64017: PUSH
64018: LD_INT 2
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 3
64028: NEG
64029: PUSH
64030: LD_INT 3
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64069: LD_ADDR_VAR 0 45
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: LD_INT 1
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: LD_INT 1
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: LD_INT 1
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: LD_INT 0
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: LD_INT 1
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 1
64150: NEG
64151: PUSH
64152: LD_INT 2
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: LD_INT 2
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 1
64173: PUSH
64174: LD_INT 1
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 2
64184: PUSH
64185: LD_INT 1
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 2
64194: PUSH
64195: LD_INT 2
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: LD_INT 2
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 0
64214: PUSH
64215: LD_INT 2
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: LD_INT 1
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 2
64235: NEG
64236: PUSH
64237: LD_INT 1
64239: NEG
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 2
64247: NEG
64248: PUSH
64249: LD_INT 2
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 2
64259: NEG
64260: PUSH
64261: LD_INT 3
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: NEG
64272: PUSH
64273: LD_INT 3
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: LD_INT 3
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: LD_INT 2
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 3
64305: PUSH
64306: LD_INT 2
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 3
64315: PUSH
64316: LD_INT 3
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 2
64325: PUSH
64326: LD_INT 3
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 1
64335: PUSH
64336: LD_INT 3
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 0
64345: PUSH
64346: LD_INT 3
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 1
64355: NEG
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 3
64366: NEG
64367: PUSH
64368: LD_INT 2
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 3
64378: NEG
64379: PUSH
64380: LD_INT 3
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64419: LD_ADDR_VAR 0 46
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: LD_INT 1
64439: NEG
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 1
64477: NEG
64478: PUSH
64479: LD_INT 0
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 1
64488: NEG
64489: PUSH
64490: LD_INT 1
64492: NEG
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 1
64500: NEG
64501: PUSH
64502: LD_INT 2
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 0
64512: PUSH
64513: LD_INT 2
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: LD_INT 1
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 2
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 2
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 2
64585: NEG
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 2
64596: NEG
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 1
64608: NEG
64609: PUSH
64610: LD_INT 3
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: LD_INT 3
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: LD_INT 2
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: LD_INT 1
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 3
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 3
64663: PUSH
64664: LD_INT 1
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: LD_INT 3
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: LD_INT 3
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: LD_INT 2
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 2
64704: NEG
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 3
64715: NEG
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 3
64726: NEG
64727: PUSH
64728: LD_INT 1
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64767: LD_ADDR_VAR 0 47
64771: PUSH
64772: LD_INT 0
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 1
64795: PUSH
64796: LD_INT 0
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: PUSH
64806: LD_INT 1
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: LD_INT 1
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 1
64825: NEG
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 1
64836: NEG
64837: PUSH
64838: LD_INT 1
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: LD_INT 2
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 0
64860: PUSH
64861: LD_INT 2
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 2
64882: NEG
64883: PUSH
64884: LD_INT 1
64886: NEG
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: LD_INT 2
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64918: LD_ADDR_VAR 0 48
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 1
64946: PUSH
64947: LD_INT 0
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: LD_INT 1
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: LD_INT 1
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 1
64976: NEG
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 1
64987: NEG
64988: PUSH
64989: LD_INT 1
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 1
64999: NEG
65000: PUSH
65001: LD_INT 2
65003: NEG
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: LD_INT 2
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 1
65022: PUSH
65023: LD_INT 1
65025: NEG
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 2
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 2
65043: PUSH
65044: LD_INT 1
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65065: LD_ADDR_VAR 0 49
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: LD_INT 0
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 0
65082: PUSH
65083: LD_INT 1
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 1
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: LD_INT 1
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 1
65134: NEG
65135: PUSH
65136: LD_INT 1
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: LD_INT 1
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 2
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 2
65167: PUSH
65168: LD_INT 1
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 2
65177: PUSH
65178: LD_INT 2
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 1
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65209: LD_ADDR_VAR 0 50
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: LD_INT 0
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: LD_INT 1
65229: NEG
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 1
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 1
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 0
65257: PUSH
65258: LD_INT 1
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: NEG
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 1
65278: NEG
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 2
65290: PUSH
65291: LD_INT 1
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 2
65300: PUSH
65301: LD_INT 2
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: LD_INT 2
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: LD_INT 2
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 1
65330: NEG
65331: PUSH
65332: LD_INT 1
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65353: LD_ADDR_VAR 0 51
65357: PUSH
65358: LD_INT 0
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: LD_INT 1
65373: NEG
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 1
65381: PUSH
65382: LD_INT 0
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 1
65391: PUSH
65392: LD_INT 1
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: LD_INT 1
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 1
65411: NEG
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 1
65422: NEG
65423: PUSH
65424: LD_INT 1
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: LD_INT 2
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: LD_INT 2
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 1
65454: NEG
65455: PUSH
65456: LD_INT 1
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 2
65465: NEG
65466: PUSH
65467: LD_INT 0
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 2
65476: NEG
65477: PUSH
65478: LD_INT 1
65480: NEG
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65500: LD_ADDR_VAR 0 52
65504: PUSH
65505: LD_INT 0
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 0
65517: PUSH
65518: LD_INT 1
65520: NEG
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 1
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 1
65538: PUSH
65539: LD_INT 1
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 0
65548: PUSH
65549: LD_INT 1
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 1
65558: NEG
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 1
65569: NEG
65570: PUSH
65571: LD_INT 1
65573: NEG
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 1
65581: NEG
65582: PUSH
65583: LD_INT 2
65585: NEG
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 1
65593: NEG
65594: PUSH
65595: LD_INT 1
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 2
65604: NEG
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 2
65615: NEG
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 2
65627: NEG
65628: PUSH
65629: LD_INT 2
65631: NEG
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65651: LD_ADDR_VAR 0 53
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: LD_INT 0
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 0
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 1
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 1
65689: PUSH
65690: LD_INT 1
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 0
65699: PUSH
65700: LD_INT 1
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: LD_INT 0
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 1
65720: NEG
65721: PUSH
65722: LD_INT 1
65724: NEG
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 1
65732: NEG
65733: PUSH
65734: LD_INT 2
65736: NEG
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 0
65744: PUSH
65745: LD_INT 2
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 1
65755: PUSH
65756: LD_INT 1
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 2
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 2
65776: PUSH
65777: LD_INT 1
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 2
65786: PUSH
65787: LD_INT 2
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 1
65796: PUSH
65797: LD_INT 2
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 0
65806: PUSH
65807: LD_INT 2
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 1
65816: NEG
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 2
65827: NEG
65828: PUSH
65829: LD_INT 0
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 2
65838: NEG
65839: PUSH
65840: LD_INT 1
65842: NEG
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 2
65850: NEG
65851: PUSH
65852: LD_INT 2
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65881: LD_ADDR_VAR 0 54
65885: PUSH
65886: LD_INT 0
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: LD_INT 1
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 1
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 0
65929: PUSH
65930: LD_INT 1
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 1
65939: NEG
65940: PUSH
65941: LD_INT 0
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: NEG
65951: PUSH
65952: LD_INT 1
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 1
65962: NEG
65963: PUSH
65964: LD_INT 2
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: LD_INT 2
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: LD_INT 1
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 2
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 2
66006: PUSH
66007: LD_INT 1
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 2
66016: PUSH
66017: LD_INT 2
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: LD_INT 2
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: LD_INT 2
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 1
66046: NEG
66047: PUSH
66048: LD_INT 1
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 2
66057: NEG
66058: PUSH
66059: LD_INT 0
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 2
66068: NEG
66069: PUSH
66070: LD_INT 1
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 2
66080: NEG
66081: PUSH
66082: LD_INT 2
66084: NEG
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66111: LD_ADDR_VAR 0 55
66115: PUSH
66116: LD_INT 0
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 1
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 0
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 1
66169: NEG
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: NEG
66181: PUSH
66182: LD_INT 1
66184: NEG
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 1
66192: NEG
66193: PUSH
66194: LD_INT 2
66196: NEG
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 0
66204: PUSH
66205: LD_INT 2
66207: NEG
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 1
66215: PUSH
66216: LD_INT 1
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 2
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 2
66236: PUSH
66237: LD_INT 1
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 2
66246: PUSH
66247: LD_INT 2
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: LD_INT 2
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 0
66266: PUSH
66267: LD_INT 2
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 1
66276: NEG
66277: PUSH
66278: LD_INT 1
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 2
66287: NEG
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 2
66298: NEG
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 2
66310: NEG
66311: PUSH
66312: LD_INT 2
66314: NEG
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66341: LD_ADDR_VAR 0 56
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 0
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 0
66358: PUSH
66359: LD_INT 1
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: LD_INT 0
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: LD_INT 1
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 0
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 1
66399: NEG
66400: PUSH
66401: LD_INT 0
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 1
66410: NEG
66411: PUSH
66412: LD_INT 1
66414: NEG
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 1
66422: NEG
66423: PUSH
66424: LD_INT 2
66426: NEG
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: LD_INT 2
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 1
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 2
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 2
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 2
66476: PUSH
66477: LD_INT 2
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 1
66486: PUSH
66487: LD_INT 2
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: LD_INT 2
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 1
66506: NEG
66507: PUSH
66508: LD_INT 1
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 2
66517: NEG
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 2
66528: NEG
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 2
66540: NEG
66541: PUSH
66542: LD_INT 2
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66571: LD_ADDR_VAR 0 57
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: LD_INT 1
66591: NEG
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 1
66599: PUSH
66600: LD_INT 0
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 1
66609: PUSH
66610: LD_INT 1
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: LD_INT 1
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 1
66629: NEG
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 1
66640: NEG
66641: PUSH
66642: LD_INT 1
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 1
66652: NEG
66653: PUSH
66654: LD_INT 2
66656: NEG
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: LD_INT 2
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 1
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 2
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 2
66696: PUSH
66697: LD_INT 1
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 2
66706: PUSH
66707: LD_INT 2
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 1
66716: PUSH
66717: LD_INT 2
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: LD_INT 2
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 1
66736: NEG
66737: PUSH
66738: LD_INT 1
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 2
66747: NEG
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 2
66758: NEG
66759: PUSH
66760: LD_INT 1
66762: NEG
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 2
66770: NEG
66771: PUSH
66772: LD_INT 2
66774: NEG
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66801: LD_ADDR_VAR 0 58
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 0
66818: PUSH
66819: LD_INT 1
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 1
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 1
66839: PUSH
66840: LD_INT 1
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 0
66849: PUSH
66850: LD_INT 1
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 1
66859: NEG
66860: PUSH
66861: LD_INT 0
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 1
66870: NEG
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 1
66882: NEG
66883: PUSH
66884: LD_INT 2
66886: NEG
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 0
66894: PUSH
66895: LD_INT 2
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 1
66905: PUSH
66906: LD_INT 1
66908: NEG
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 2
66916: PUSH
66917: LD_INT 0
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 2
66926: PUSH
66927: LD_INT 1
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: LD_INT 2
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 1
66946: PUSH
66947: LD_INT 2
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: LD_INT 0
66956: PUSH
66957: LD_INT 2
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 1
66966: NEG
66967: PUSH
66968: LD_INT 1
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 2
66977: NEG
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 2
66988: NEG
66989: PUSH
66990: LD_INT 1
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 2
67000: NEG
67001: PUSH
67002: LD_INT 2
67004: NEG
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67031: LD_ADDR_VAR 0 59
67035: PUSH
67036: LD_INT 0
67038: PUSH
67039: LD_INT 0
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: LD_INT 1
67051: NEG
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 1
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 1
67069: PUSH
67070: LD_INT 1
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: LD_INT 1
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: LD_INT 0
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 1
67100: NEG
67101: PUSH
67102: LD_INT 1
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67119: LD_ADDR_VAR 0 60
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: LD_INT 0
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 0
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: LD_INT 0
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 1
67157: PUSH
67158: LD_INT 1
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 0
67167: PUSH
67168: LD_INT 1
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 1
67177: NEG
67178: PUSH
67179: LD_INT 0
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 1
67188: NEG
67189: PUSH
67190: LD_INT 1
67192: NEG
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67207: LD_ADDR_VAR 0 61
67211: PUSH
67212: LD_INT 0
67214: PUSH
67215: LD_INT 0
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 0
67224: PUSH
67225: LD_INT 1
67227: NEG
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 1
67235: PUSH
67236: LD_INT 0
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 1
67245: PUSH
67246: LD_INT 1
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 0
67255: PUSH
67256: LD_INT 1
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 1
67265: NEG
67266: PUSH
67267: LD_INT 0
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 1
67276: NEG
67277: PUSH
67278: LD_INT 1
67280: NEG
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67295: LD_ADDR_VAR 0 62
67299: PUSH
67300: LD_INT 0
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 0
67312: PUSH
67313: LD_INT 1
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 1
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 1
67333: PUSH
67334: LD_INT 1
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 0
67343: PUSH
67344: LD_INT 1
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 1
67353: NEG
67354: PUSH
67355: LD_INT 0
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 1
67364: NEG
67365: PUSH
67366: LD_INT 1
67368: NEG
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67383: LD_ADDR_VAR 0 63
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: LD_INT 0
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 0
67400: PUSH
67401: LD_INT 1
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 1
67411: PUSH
67412: LD_INT 0
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 1
67421: PUSH
67422: LD_INT 1
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 0
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 1
67441: NEG
67442: PUSH
67443: LD_INT 0
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 1
67452: NEG
67453: PUSH
67454: LD_INT 1
67456: NEG
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67471: LD_ADDR_VAR 0 64
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 0
67488: PUSH
67489: LD_INT 1
67491: NEG
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 1
67499: PUSH
67500: LD_INT 0
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 1
67509: PUSH
67510: LD_INT 1
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 0
67519: PUSH
67520: LD_INT 1
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 1
67529: NEG
67530: PUSH
67531: LD_INT 0
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 1
67540: NEG
67541: PUSH
67542: LD_INT 1
67544: NEG
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: ST_TO_ADDR
// end ; 1 :
67559: GO 73456
67561: LD_INT 1
67563: DOUBLE
67564: EQUAL
67565: IFTRUE 67569
67567: GO 70192
67569: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67570: LD_ADDR_VAR 0 11
67574: PUSH
67575: LD_INT 1
67577: NEG
67578: PUSH
67579: LD_INT 3
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 0
67589: PUSH
67590: LD_INT 3
67592: NEG
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 1
67600: PUSH
67601: LD_INT 2
67603: NEG
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: LIST
67613: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67614: LD_ADDR_VAR 0 12
67618: PUSH
67619: LD_INT 2
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 3
67632: PUSH
67633: LD_INT 0
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 3
67642: PUSH
67643: LD_INT 1
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: LIST
67654: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67655: LD_ADDR_VAR 0 13
67659: PUSH
67660: LD_INT 3
67662: PUSH
67663: LD_INT 2
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 3
67672: PUSH
67673: LD_INT 3
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 2
67682: PUSH
67683: LD_INT 3
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: LIST
67694: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67695: LD_ADDR_VAR 0 14
67699: PUSH
67700: LD_INT 1
67702: PUSH
67703: LD_INT 3
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 0
67712: PUSH
67713: LD_INT 3
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 1
67722: NEG
67723: PUSH
67724: LD_INT 2
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: LIST
67735: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67736: LD_ADDR_VAR 0 15
67740: PUSH
67741: LD_INT 2
67743: NEG
67744: PUSH
67745: LD_INT 1
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 3
67754: NEG
67755: PUSH
67756: LD_INT 0
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 3
67765: NEG
67766: PUSH
67767: LD_INT 1
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: LIST
67779: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67780: LD_ADDR_VAR 0 16
67784: PUSH
67785: LD_INT 2
67787: NEG
67788: PUSH
67789: LD_INT 3
67791: NEG
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 3
67799: NEG
67800: PUSH
67801: LD_INT 2
67803: NEG
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 3
67811: NEG
67812: PUSH
67813: LD_INT 3
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: LIST
67825: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67826: LD_ADDR_VAR 0 17
67830: PUSH
67831: LD_INT 1
67833: NEG
67834: PUSH
67835: LD_INT 3
67837: NEG
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 0
67845: PUSH
67846: LD_INT 3
67848: NEG
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 1
67856: PUSH
67857: LD_INT 2
67859: NEG
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: LIST
67869: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67870: LD_ADDR_VAR 0 18
67874: PUSH
67875: LD_INT 2
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 3
67888: PUSH
67889: LD_INT 0
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 3
67898: PUSH
67899: LD_INT 1
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: LIST
67910: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67911: LD_ADDR_VAR 0 19
67915: PUSH
67916: LD_INT 3
67918: PUSH
67919: LD_INT 2
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 3
67928: PUSH
67929: LD_INT 3
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 2
67938: PUSH
67939: LD_INT 3
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: LIST
67950: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67951: LD_ADDR_VAR 0 20
67955: PUSH
67956: LD_INT 1
67958: PUSH
67959: LD_INT 3
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 0
67968: PUSH
67969: LD_INT 3
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 1
67978: NEG
67979: PUSH
67980: LD_INT 2
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: LIST
67991: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67992: LD_ADDR_VAR 0 21
67996: PUSH
67997: LD_INT 2
67999: NEG
68000: PUSH
68001: LD_INT 1
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 3
68010: NEG
68011: PUSH
68012: LD_INT 0
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 3
68021: NEG
68022: PUSH
68023: LD_INT 1
68025: NEG
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: LIST
68035: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68036: LD_ADDR_VAR 0 22
68040: PUSH
68041: LD_INT 2
68043: NEG
68044: PUSH
68045: LD_INT 3
68047: NEG
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 3
68055: NEG
68056: PUSH
68057: LD_INT 2
68059: NEG
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 3
68067: NEG
68068: PUSH
68069: LD_INT 3
68071: NEG
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: LIST
68081: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68082: LD_ADDR_VAR 0 23
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: LD_INT 3
68092: NEG
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 1
68100: NEG
68101: PUSH
68102: LD_INT 4
68104: NEG
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 1
68112: PUSH
68113: LD_INT 3
68115: NEG
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: LIST
68125: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68126: LD_ADDR_VAR 0 24
68130: PUSH
68131: LD_INT 3
68133: PUSH
68134: LD_INT 0
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 3
68143: PUSH
68144: LD_INT 1
68146: NEG
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 4
68154: PUSH
68155: LD_INT 1
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: LIST
68166: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68167: LD_ADDR_VAR 0 25
68171: PUSH
68172: LD_INT 3
68174: PUSH
68175: LD_INT 3
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 4
68184: PUSH
68185: LD_INT 3
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 3
68194: PUSH
68195: LD_INT 4
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: LIST
68206: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68207: LD_ADDR_VAR 0 26
68211: PUSH
68212: LD_INT 0
68214: PUSH
68215: LD_INT 3
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 1
68224: PUSH
68225: LD_INT 4
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 1
68234: NEG
68235: PUSH
68236: LD_INT 3
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: LIST
68247: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68248: LD_ADDR_VAR 0 27
68252: PUSH
68253: LD_INT 3
68255: NEG
68256: PUSH
68257: LD_INT 0
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 3
68266: NEG
68267: PUSH
68268: LD_INT 1
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 4
68277: NEG
68278: PUSH
68279: LD_INT 1
68281: NEG
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: LIST
68291: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68292: LD_ADDR_VAR 0 28
68296: PUSH
68297: LD_INT 3
68299: NEG
68300: PUSH
68301: LD_INT 3
68303: NEG
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 3
68311: NEG
68312: PUSH
68313: LD_INT 4
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 4
68323: NEG
68324: PUSH
68325: LD_INT 3
68327: NEG
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: LIST
68337: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68338: LD_ADDR_VAR 0 29
68342: PUSH
68343: LD_INT 1
68345: NEG
68346: PUSH
68347: LD_INT 3
68349: NEG
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 0
68357: PUSH
68358: LD_INT 3
68360: NEG
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 1
68368: PUSH
68369: LD_INT 2
68371: NEG
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 1
68379: NEG
68380: PUSH
68381: LD_INT 4
68383: NEG
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 0
68391: PUSH
68392: LD_INT 4
68394: NEG
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 1
68402: PUSH
68403: LD_INT 3
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 1
68413: NEG
68414: PUSH
68415: LD_INT 5
68417: NEG
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 0
68425: PUSH
68426: LD_INT 5
68428: NEG
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 1
68436: PUSH
68437: LD_INT 4
68439: NEG
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 1
68447: NEG
68448: PUSH
68449: LD_INT 6
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 0
68459: PUSH
68460: LD_INT 6
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 1
68470: PUSH
68471: LD_INT 5
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68493: LD_ADDR_VAR 0 30
68497: PUSH
68498: LD_INT 2
68500: PUSH
68501: LD_INT 1
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 3
68511: PUSH
68512: LD_INT 0
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 3
68521: PUSH
68522: LD_INT 1
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 3
68531: PUSH
68532: LD_INT 1
68534: NEG
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 4
68542: PUSH
68543: LD_INT 0
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 4
68552: PUSH
68553: LD_INT 1
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 4
68562: PUSH
68563: LD_INT 1
68565: NEG
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 5
68573: PUSH
68574: LD_INT 0
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 5
68583: PUSH
68584: LD_INT 1
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 5
68593: PUSH
68594: LD_INT 1
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 6
68604: PUSH
68605: LD_INT 0
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 6
68614: PUSH
68615: LD_INT 1
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68636: LD_ADDR_VAR 0 31
68640: PUSH
68641: LD_INT 3
68643: PUSH
68644: LD_INT 2
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 3
68653: PUSH
68654: LD_INT 3
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 2
68663: PUSH
68664: LD_INT 3
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 4
68673: PUSH
68674: LD_INT 3
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 4
68683: PUSH
68684: LD_INT 4
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 3
68693: PUSH
68694: LD_INT 4
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 5
68703: PUSH
68704: LD_INT 4
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 5
68713: PUSH
68714: LD_INT 5
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 4
68723: PUSH
68724: LD_INT 5
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 6
68733: PUSH
68734: LD_INT 5
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 6
68743: PUSH
68744: LD_INT 6
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 5
68753: PUSH
68754: LD_INT 6
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68775: LD_ADDR_VAR 0 32
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: LD_INT 3
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: LD_INT 3
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 1
68802: NEG
68803: PUSH
68804: LD_INT 2
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 1
68813: PUSH
68814: LD_INT 4
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 0
68823: PUSH
68824: LD_INT 4
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 1
68833: NEG
68834: PUSH
68835: LD_INT 3
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 1
68844: PUSH
68845: LD_INT 5
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 0
68854: PUSH
68855: LD_INT 5
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 1
68864: NEG
68865: PUSH
68866: LD_INT 4
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 1
68875: PUSH
68876: LD_INT 6
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 0
68885: PUSH
68886: LD_INT 6
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 1
68895: NEG
68896: PUSH
68897: LD_INT 5
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68918: LD_ADDR_VAR 0 33
68922: PUSH
68923: LD_INT 2
68925: NEG
68926: PUSH
68927: LD_INT 1
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 3
68936: NEG
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 3
68947: NEG
68948: PUSH
68949: LD_INT 1
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: LD_INT 3
68959: NEG
68960: PUSH
68961: LD_INT 1
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: LD_INT 4
68970: NEG
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 4
68981: NEG
68982: PUSH
68983: LD_INT 1
68985: NEG
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 4
68993: NEG
68994: PUSH
68995: LD_INT 1
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 5
69004: NEG
69005: PUSH
69006: LD_INT 0
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 5
69015: NEG
69016: PUSH
69017: LD_INT 1
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 5
69027: NEG
69028: PUSH
69029: LD_INT 1
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 6
69038: NEG
69039: PUSH
69040: LD_INT 0
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 6
69049: NEG
69050: PUSH
69051: LD_INT 1
69053: NEG
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69073: LD_ADDR_VAR 0 34
69077: PUSH
69078: LD_INT 2
69080: NEG
69081: PUSH
69082: LD_INT 3
69084: NEG
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 3
69092: NEG
69093: PUSH
69094: LD_INT 2
69096: NEG
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 3
69104: NEG
69105: PUSH
69106: LD_INT 3
69108: NEG
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 3
69116: NEG
69117: PUSH
69118: LD_INT 4
69120: NEG
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 4
69128: NEG
69129: PUSH
69130: LD_INT 3
69132: NEG
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 4
69140: NEG
69141: PUSH
69142: LD_INT 4
69144: NEG
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 4
69152: NEG
69153: PUSH
69154: LD_INT 5
69156: NEG
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 5
69164: NEG
69165: PUSH
69166: LD_INT 4
69168: NEG
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 5
69176: NEG
69177: PUSH
69178: LD_INT 5
69180: NEG
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 5
69188: NEG
69189: PUSH
69190: LD_INT 6
69192: NEG
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: LD_INT 6
69200: NEG
69201: PUSH
69202: LD_INT 5
69204: NEG
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 6
69212: NEG
69213: PUSH
69214: LD_INT 6
69216: NEG
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69236: LD_ADDR_VAR 0 41
69240: PUSH
69241: LD_INT 0
69243: PUSH
69244: LD_INT 2
69246: NEG
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 1
69254: NEG
69255: PUSH
69256: LD_INT 3
69258: NEG
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 1
69266: PUSH
69267: LD_INT 2
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: LIST
69279: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69280: LD_ADDR_VAR 0 42
69284: PUSH
69285: LD_INT 2
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 2
69297: PUSH
69298: LD_INT 1
69300: NEG
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 3
69308: PUSH
69309: LD_INT 1
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: LIST
69320: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69321: LD_ADDR_VAR 0 43
69325: PUSH
69326: LD_INT 2
69328: PUSH
69329: LD_INT 2
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 3
69338: PUSH
69339: LD_INT 2
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 2
69348: PUSH
69349: LD_INT 3
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: LIST
69360: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69361: LD_ADDR_VAR 0 44
69365: PUSH
69366: LD_INT 0
69368: PUSH
69369: LD_INT 2
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 1
69378: PUSH
69379: LD_INT 3
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 1
69388: NEG
69389: PUSH
69390: LD_INT 2
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: LIST
69401: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69402: LD_ADDR_VAR 0 45
69406: PUSH
69407: LD_INT 2
69409: NEG
69410: PUSH
69411: LD_INT 0
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 2
69420: NEG
69421: PUSH
69422: LD_INT 1
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 3
69431: NEG
69432: PUSH
69433: LD_INT 1
69435: NEG
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: LIST
69445: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69446: LD_ADDR_VAR 0 46
69450: PUSH
69451: LD_INT 2
69453: NEG
69454: PUSH
69455: LD_INT 2
69457: NEG
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 2
69465: NEG
69466: PUSH
69467: LD_INT 3
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 3
69477: NEG
69478: PUSH
69479: LD_INT 2
69481: NEG
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: LIST
69491: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69492: LD_ADDR_VAR 0 47
69496: PUSH
69497: LD_INT 2
69499: NEG
69500: PUSH
69501: LD_INT 3
69503: NEG
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 1
69511: NEG
69512: PUSH
69513: LD_INT 3
69515: NEG
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69525: LD_ADDR_VAR 0 48
69529: PUSH
69530: LD_INT 1
69532: PUSH
69533: LD_INT 2
69535: NEG
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 2
69543: PUSH
69544: LD_INT 1
69546: NEG
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69556: LD_ADDR_VAR 0 49
69560: PUSH
69561: LD_INT 3
69563: PUSH
69564: LD_INT 1
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 3
69573: PUSH
69574: LD_INT 2
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69585: LD_ADDR_VAR 0 50
69589: PUSH
69590: LD_INT 2
69592: PUSH
69593: LD_INT 3
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 1
69602: PUSH
69603: LD_INT 3
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69614: LD_ADDR_VAR 0 51
69618: PUSH
69619: LD_INT 1
69621: NEG
69622: PUSH
69623: LD_INT 2
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 2
69632: NEG
69633: PUSH
69634: LD_INT 1
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69645: LD_ADDR_VAR 0 52
69649: PUSH
69650: LD_INT 3
69652: NEG
69653: PUSH
69654: LD_INT 1
69656: NEG
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 3
69664: NEG
69665: PUSH
69666: LD_INT 2
69668: NEG
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69678: LD_ADDR_VAR 0 53
69682: PUSH
69683: LD_INT 1
69685: NEG
69686: PUSH
69687: LD_INT 3
69689: NEG
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: LD_INT 0
69697: PUSH
69698: LD_INT 3
69700: NEG
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 1
69708: PUSH
69709: LD_INT 2
69711: NEG
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: LIST
69721: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69722: LD_ADDR_VAR 0 54
69726: PUSH
69727: LD_INT 2
69729: PUSH
69730: LD_INT 1
69732: NEG
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 3
69740: PUSH
69741: LD_INT 0
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 3
69750: PUSH
69751: LD_INT 1
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: LIST
69762: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69763: LD_ADDR_VAR 0 55
69767: PUSH
69768: LD_INT 3
69770: PUSH
69771: LD_INT 2
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 3
69780: PUSH
69781: LD_INT 3
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 2
69790: PUSH
69791: LD_INT 3
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: LIST
69802: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69803: LD_ADDR_VAR 0 56
69807: PUSH
69808: LD_INT 1
69810: PUSH
69811: LD_INT 3
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 0
69820: PUSH
69821: LD_INT 3
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 1
69830: NEG
69831: PUSH
69832: LD_INT 2
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: LIST
69843: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69844: LD_ADDR_VAR 0 57
69848: PUSH
69849: LD_INT 2
69851: NEG
69852: PUSH
69853: LD_INT 1
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 3
69862: NEG
69863: PUSH
69864: LD_INT 0
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 3
69873: NEG
69874: PUSH
69875: LD_INT 1
69877: NEG
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: LIST
69887: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69888: LD_ADDR_VAR 0 58
69892: PUSH
69893: LD_INT 2
69895: NEG
69896: PUSH
69897: LD_INT 3
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 3
69907: NEG
69908: PUSH
69909: LD_INT 2
69911: NEG
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 3
69919: NEG
69920: PUSH
69921: LD_INT 3
69923: NEG
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: LIST
69933: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69934: LD_ADDR_VAR 0 59
69938: PUSH
69939: LD_INT 1
69941: NEG
69942: PUSH
69943: LD_INT 2
69945: NEG
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 0
69953: PUSH
69954: LD_INT 2
69956: NEG
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 1
69964: PUSH
69965: LD_INT 1
69967: NEG
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: LIST
69977: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69978: LD_ADDR_VAR 0 60
69982: PUSH
69983: LD_INT 1
69985: PUSH
69986: LD_INT 1
69988: NEG
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 2
69996: PUSH
69997: LD_INT 0
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 2
70006: PUSH
70007: LD_INT 1
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: LIST
70018: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70019: LD_ADDR_VAR 0 61
70023: PUSH
70024: LD_INT 2
70026: PUSH
70027: LD_INT 1
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 2
70036: PUSH
70037: LD_INT 2
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 1
70046: PUSH
70047: LD_INT 2
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: LIST
70058: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70059: LD_ADDR_VAR 0 62
70063: PUSH
70064: LD_INT 1
70066: PUSH
70067: LD_INT 2
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 0
70076: PUSH
70077: LD_INT 2
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 1
70086: NEG
70087: PUSH
70088: LD_INT 1
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: LIST
70099: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70100: LD_ADDR_VAR 0 63
70104: PUSH
70105: LD_INT 1
70107: NEG
70108: PUSH
70109: LD_INT 1
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 2
70118: NEG
70119: PUSH
70120: LD_INT 0
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 2
70129: NEG
70130: PUSH
70131: LD_INT 1
70133: NEG
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: LIST
70143: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70144: LD_ADDR_VAR 0 64
70148: PUSH
70149: LD_INT 1
70151: NEG
70152: PUSH
70153: LD_INT 2
70155: NEG
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 2
70163: NEG
70164: PUSH
70165: LD_INT 1
70167: NEG
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 2
70175: NEG
70176: PUSH
70177: LD_INT 2
70179: NEG
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: LIST
70189: ST_TO_ADDR
// end ; 2 :
70190: GO 73456
70192: LD_INT 2
70194: DOUBLE
70195: EQUAL
70196: IFTRUE 70200
70198: GO 73455
70200: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70201: LD_ADDR_VAR 0 29
70205: PUSH
70206: LD_INT 4
70208: PUSH
70209: LD_INT 0
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 4
70218: PUSH
70219: LD_INT 1
70221: NEG
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 5
70229: PUSH
70230: LD_INT 0
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: LD_INT 5
70239: PUSH
70240: LD_INT 1
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: PUSH
70247: LD_INT 4
70249: PUSH
70250: LD_INT 1
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 3
70259: PUSH
70260: LD_INT 0
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 3
70269: PUSH
70270: LD_INT 1
70272: NEG
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 3
70280: PUSH
70281: LD_INT 2
70283: NEG
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 5
70291: PUSH
70292: LD_INT 2
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 3
70301: PUSH
70302: LD_INT 3
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 3
70311: PUSH
70312: LD_INT 2
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 4
70321: PUSH
70322: LD_INT 3
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 4
70331: PUSH
70332: LD_INT 4
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 3
70341: PUSH
70342: LD_INT 4
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 2
70351: PUSH
70352: LD_INT 3
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 2
70361: PUSH
70362: LD_INT 2
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 4
70371: PUSH
70372: LD_INT 2
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 2
70381: PUSH
70382: LD_INT 4
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: PUSH
70389: LD_INT 0
70391: PUSH
70392: LD_INT 4
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 0
70401: PUSH
70402: LD_INT 3
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 1
70411: PUSH
70412: LD_INT 4
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 1
70421: PUSH
70422: LD_INT 5
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 0
70431: PUSH
70432: LD_INT 5
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 1
70441: NEG
70442: PUSH
70443: LD_INT 4
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 1
70452: NEG
70453: PUSH
70454: LD_INT 3
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 2
70463: PUSH
70464: LD_INT 5
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 2
70473: NEG
70474: PUSH
70475: LD_INT 3
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 3
70484: NEG
70485: PUSH
70486: LD_INT 0
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 3
70495: NEG
70496: PUSH
70497: LD_INT 1
70499: NEG
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 2
70507: NEG
70508: PUSH
70509: LD_INT 0
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 2
70518: NEG
70519: PUSH
70520: LD_INT 1
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 3
70529: NEG
70530: PUSH
70531: LD_INT 1
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 4
70540: NEG
70541: PUSH
70542: LD_INT 0
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 4
70551: NEG
70552: PUSH
70553: LD_INT 1
70555: NEG
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 4
70563: NEG
70564: PUSH
70565: LD_INT 2
70567: NEG
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 2
70575: NEG
70576: PUSH
70577: LD_INT 2
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 4
70586: NEG
70587: PUSH
70588: LD_INT 4
70590: NEG
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 4
70598: NEG
70599: PUSH
70600: LD_INT 5
70602: NEG
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 3
70610: NEG
70611: PUSH
70612: LD_INT 4
70614: NEG
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 3
70622: NEG
70623: PUSH
70624: LD_INT 3
70626: NEG
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 4
70634: NEG
70635: PUSH
70636: LD_INT 3
70638: NEG
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 5
70646: NEG
70647: PUSH
70648: LD_INT 4
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 5
70658: NEG
70659: PUSH
70660: LD_INT 5
70662: NEG
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 3
70670: NEG
70671: PUSH
70672: LD_INT 5
70674: NEG
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 5
70682: NEG
70683: PUSH
70684: LD_INT 3
70686: NEG
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70739: LD_ADDR_VAR 0 30
70743: PUSH
70744: LD_INT 4
70746: PUSH
70747: LD_INT 4
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 4
70756: PUSH
70757: LD_INT 3
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 5
70766: PUSH
70767: LD_INT 4
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 5
70776: PUSH
70777: LD_INT 5
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 4
70786: PUSH
70787: LD_INT 5
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 3
70796: PUSH
70797: LD_INT 4
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 3
70806: PUSH
70807: LD_INT 3
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 5
70816: PUSH
70817: LD_INT 3
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 3
70826: PUSH
70827: LD_INT 5
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: LD_INT 0
70836: PUSH
70837: LD_INT 3
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 0
70846: PUSH
70847: LD_INT 2
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 1
70856: PUSH
70857: LD_INT 3
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 1
70866: PUSH
70867: LD_INT 4
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 0
70876: PUSH
70877: LD_INT 4
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 1
70886: NEG
70887: PUSH
70888: LD_INT 3
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 1
70897: NEG
70898: PUSH
70899: LD_INT 2
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 2
70908: PUSH
70909: LD_INT 4
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 2
70918: NEG
70919: PUSH
70920: LD_INT 2
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 4
70929: NEG
70930: PUSH
70931: LD_INT 0
70933: PUSH
70934: EMPTY
70935: LIST
70936: LIST
70937: PUSH
70938: LD_INT 4
70940: NEG
70941: PUSH
70942: LD_INT 1
70944: NEG
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 3
70952: NEG
70953: PUSH
70954: LD_INT 0
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 3
70963: NEG
70964: PUSH
70965: LD_INT 1
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 4
70974: NEG
70975: PUSH
70976: LD_INT 1
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 5
70985: NEG
70986: PUSH
70987: LD_INT 0
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 5
70996: NEG
70997: PUSH
70998: LD_INT 1
71000: NEG
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 5
71008: NEG
71009: PUSH
71010: LD_INT 2
71012: NEG
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: LD_INT 3
71020: NEG
71021: PUSH
71022: LD_INT 2
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 3
71031: NEG
71032: PUSH
71033: LD_INT 3
71035: NEG
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 3
71043: NEG
71044: PUSH
71045: LD_INT 4
71047: NEG
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 2
71055: NEG
71056: PUSH
71057: LD_INT 3
71059: NEG
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 2
71067: NEG
71068: PUSH
71069: LD_INT 2
71071: NEG
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 3
71079: NEG
71080: PUSH
71081: LD_INT 2
71083: NEG
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 4
71091: NEG
71092: PUSH
71093: LD_INT 3
71095: NEG
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 4
71103: NEG
71104: PUSH
71105: LD_INT 4
71107: NEG
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 2
71115: NEG
71116: PUSH
71117: LD_INT 4
71119: NEG
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 4
71127: NEG
71128: PUSH
71129: LD_INT 2
71131: NEG
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 0
71139: PUSH
71140: LD_INT 4
71142: NEG
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 0
71150: PUSH
71151: LD_INT 5
71153: NEG
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 1
71161: PUSH
71162: LD_INT 4
71164: NEG
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 1
71172: PUSH
71173: LD_INT 3
71175: NEG
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 0
71183: PUSH
71184: LD_INT 3
71186: NEG
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 1
71194: NEG
71195: PUSH
71196: LD_INT 4
71198: NEG
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 1
71206: NEG
71207: PUSH
71208: LD_INT 5
71210: NEG
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 2
71218: PUSH
71219: LD_INT 3
71221: NEG
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 2
71229: NEG
71230: PUSH
71231: LD_INT 5
71233: NEG
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71286: LD_ADDR_VAR 0 31
71290: PUSH
71291: LD_INT 0
71293: PUSH
71294: LD_INT 4
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 0
71303: PUSH
71304: LD_INT 3
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 1
71313: PUSH
71314: LD_INT 4
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_INT 1
71323: PUSH
71324: LD_INT 5
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 0
71333: PUSH
71334: LD_INT 5
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: LD_INT 1
71343: NEG
71344: PUSH
71345: LD_INT 4
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 1
71354: NEG
71355: PUSH
71356: LD_INT 3
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 2
71365: PUSH
71366: LD_INT 5
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 2
71375: NEG
71376: PUSH
71377: LD_INT 3
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 3
71386: NEG
71387: PUSH
71388: LD_INT 0
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 3
71397: NEG
71398: PUSH
71399: LD_INT 1
71401: NEG
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 2
71409: NEG
71410: PUSH
71411: LD_INT 0
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 2
71420: NEG
71421: PUSH
71422: LD_INT 1
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 3
71431: NEG
71432: PUSH
71433: LD_INT 1
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 4
71442: NEG
71443: PUSH
71444: LD_INT 0
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 4
71453: NEG
71454: PUSH
71455: LD_INT 1
71457: NEG
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 4
71465: NEG
71466: PUSH
71467: LD_INT 2
71469: NEG
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 2
71477: NEG
71478: PUSH
71479: LD_INT 2
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 4
71488: NEG
71489: PUSH
71490: LD_INT 4
71492: NEG
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 4
71500: NEG
71501: PUSH
71502: LD_INT 5
71504: NEG
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 3
71512: NEG
71513: PUSH
71514: LD_INT 4
71516: NEG
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: LD_INT 3
71524: NEG
71525: PUSH
71526: LD_INT 3
71528: NEG
71529: PUSH
71530: EMPTY
71531: LIST
71532: LIST
71533: PUSH
71534: LD_INT 4
71536: NEG
71537: PUSH
71538: LD_INT 3
71540: NEG
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 5
71548: NEG
71549: PUSH
71550: LD_INT 4
71552: NEG
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 5
71560: NEG
71561: PUSH
71562: LD_INT 5
71564: NEG
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 3
71572: NEG
71573: PUSH
71574: LD_INT 5
71576: NEG
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 5
71584: NEG
71585: PUSH
71586: LD_INT 3
71588: NEG
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 0
71596: PUSH
71597: LD_INT 3
71599: NEG
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 0
71607: PUSH
71608: LD_INT 4
71610: NEG
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 1
71618: PUSH
71619: LD_INT 3
71621: NEG
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 1
71629: PUSH
71630: LD_INT 2
71632: NEG
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 0
71640: PUSH
71641: LD_INT 2
71643: NEG
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 1
71651: NEG
71652: PUSH
71653: LD_INT 3
71655: NEG
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 1
71663: NEG
71664: PUSH
71665: LD_INT 4
71667: NEG
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 2
71675: PUSH
71676: LD_INT 2
71678: NEG
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 2
71686: NEG
71687: PUSH
71688: LD_INT 4
71690: NEG
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 4
71698: PUSH
71699: LD_INT 0
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 4
71708: PUSH
71709: LD_INT 1
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 5
71719: PUSH
71720: LD_INT 0
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 5
71729: PUSH
71730: LD_INT 1
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 4
71739: PUSH
71740: LD_INT 1
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 3
71749: PUSH
71750: LD_INT 0
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 3
71759: PUSH
71760: LD_INT 1
71762: NEG
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 3
71770: PUSH
71771: LD_INT 2
71773: NEG
71774: PUSH
71775: EMPTY
71776: LIST
71777: LIST
71778: PUSH
71779: LD_INT 5
71781: PUSH
71782: LD_INT 2
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: LIST
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71836: LD_ADDR_VAR 0 32
71840: PUSH
71841: LD_INT 4
71843: NEG
71844: PUSH
71845: LD_INT 0
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 4
71854: NEG
71855: PUSH
71856: LD_INT 1
71858: NEG
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 3
71866: NEG
71867: PUSH
71868: LD_INT 0
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 3
71877: NEG
71878: PUSH
71879: LD_INT 1
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 4
71888: NEG
71889: PUSH
71890: LD_INT 1
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 5
71899: NEG
71900: PUSH
71901: LD_INT 0
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 5
71910: NEG
71911: PUSH
71912: LD_INT 1
71914: NEG
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: LD_INT 5
71922: NEG
71923: PUSH
71924: LD_INT 2
71926: NEG
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 3
71934: NEG
71935: PUSH
71936: LD_INT 2
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: LD_INT 3
71945: NEG
71946: PUSH
71947: LD_INT 3
71949: NEG
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: PUSH
71955: LD_INT 3
71957: NEG
71958: PUSH
71959: LD_INT 4
71961: NEG
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 2
71969: NEG
71970: PUSH
71971: LD_INT 3
71973: NEG
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 2
71981: NEG
71982: PUSH
71983: LD_INT 2
71985: NEG
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 3
71993: NEG
71994: PUSH
71995: LD_INT 2
71997: NEG
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 4
72005: NEG
72006: PUSH
72007: LD_INT 3
72009: NEG
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 4
72017: NEG
72018: PUSH
72019: LD_INT 4
72021: NEG
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: LD_INT 2
72029: NEG
72030: PUSH
72031: LD_INT 4
72033: NEG
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 4
72041: NEG
72042: PUSH
72043: LD_INT 2
72045: NEG
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 0
72053: PUSH
72054: LD_INT 4
72056: NEG
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 0
72064: PUSH
72065: LD_INT 5
72067: NEG
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 1
72075: PUSH
72076: LD_INT 4
72078: NEG
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 1
72086: PUSH
72087: LD_INT 3
72089: NEG
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PUSH
72095: LD_INT 0
72097: PUSH
72098: LD_INT 3
72100: NEG
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 1
72108: NEG
72109: PUSH
72110: LD_INT 4
72112: NEG
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: LD_INT 1
72120: NEG
72121: PUSH
72122: LD_INT 5
72124: NEG
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 2
72132: PUSH
72133: LD_INT 3
72135: NEG
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 2
72143: NEG
72144: PUSH
72145: LD_INT 5
72147: NEG
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 3
72155: PUSH
72156: LD_INT 0
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: LD_INT 3
72165: PUSH
72166: LD_INT 1
72168: NEG
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 4
72176: PUSH
72177: LD_INT 0
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: PUSH
72184: LD_INT 4
72186: PUSH
72187: LD_INT 1
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PUSH
72194: LD_INT 3
72196: PUSH
72197: LD_INT 1
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PUSH
72204: LD_INT 2
72206: PUSH
72207: LD_INT 0
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 2
72216: PUSH
72217: LD_INT 1
72219: NEG
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 2
72227: PUSH
72228: LD_INT 2
72230: NEG
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: PUSH
72236: LD_INT 4
72238: PUSH
72239: LD_INT 2
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: PUSH
72246: LD_INT 4
72248: PUSH
72249: LD_INT 4
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: LD_INT 4
72258: PUSH
72259: LD_INT 3
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: LD_INT 5
72268: PUSH
72269: LD_INT 4
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: PUSH
72276: LD_INT 5
72278: PUSH
72279: LD_INT 5
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: LD_INT 4
72288: PUSH
72289: LD_INT 5
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: LD_INT 3
72298: PUSH
72299: LD_INT 4
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: PUSH
72306: LD_INT 3
72308: PUSH
72309: LD_INT 3
72311: PUSH
72312: EMPTY
72313: LIST
72314: LIST
72315: PUSH
72316: LD_INT 5
72318: PUSH
72319: LD_INT 3
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 3
72328: PUSH
72329: LD_INT 5
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: LIST
72369: LIST
72370: LIST
72371: LIST
72372: LIST
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72383: LD_ADDR_VAR 0 33
72387: PUSH
72388: LD_INT 4
72390: NEG
72391: PUSH
72392: LD_INT 4
72394: NEG
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PUSH
72400: LD_INT 4
72402: NEG
72403: PUSH
72404: LD_INT 5
72406: NEG
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 3
72414: NEG
72415: PUSH
72416: LD_INT 4
72418: NEG
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: LD_INT 3
72426: NEG
72427: PUSH
72428: LD_INT 3
72430: NEG
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: PUSH
72436: LD_INT 4
72438: NEG
72439: PUSH
72440: LD_INT 3
72442: NEG
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: PUSH
72448: LD_INT 5
72450: NEG
72451: PUSH
72452: LD_INT 4
72454: NEG
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PUSH
72460: LD_INT 5
72462: NEG
72463: PUSH
72464: LD_INT 5
72466: NEG
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PUSH
72472: LD_INT 3
72474: NEG
72475: PUSH
72476: LD_INT 5
72478: NEG
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 5
72486: NEG
72487: PUSH
72488: LD_INT 3
72490: NEG
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: PUSH
72496: LD_INT 0
72498: PUSH
72499: LD_INT 3
72501: NEG
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 0
72509: PUSH
72510: LD_INT 4
72512: NEG
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 1
72520: PUSH
72521: LD_INT 3
72523: NEG
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 1
72531: PUSH
72532: LD_INT 2
72534: NEG
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 0
72542: PUSH
72543: LD_INT 2
72545: NEG
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 1
72553: NEG
72554: PUSH
72555: LD_INT 3
72557: NEG
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: LD_INT 1
72565: NEG
72566: PUSH
72567: LD_INT 4
72569: NEG
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PUSH
72575: LD_INT 2
72577: PUSH
72578: LD_INT 2
72580: NEG
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 2
72588: NEG
72589: PUSH
72590: LD_INT 4
72592: NEG
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 4
72600: PUSH
72601: LD_INT 0
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 4
72610: PUSH
72611: LD_INT 1
72613: NEG
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: PUSH
72619: LD_INT 5
72621: PUSH
72622: LD_INT 0
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: LD_INT 5
72631: PUSH
72632: LD_INT 1
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: LD_INT 4
72641: PUSH
72642: LD_INT 1
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 3
72651: PUSH
72652: LD_INT 0
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: PUSH
72659: LD_INT 3
72661: PUSH
72662: LD_INT 1
72664: NEG
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PUSH
72670: LD_INT 3
72672: PUSH
72673: LD_INT 2
72675: NEG
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: PUSH
72681: LD_INT 5
72683: PUSH
72684: LD_INT 2
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PUSH
72691: LD_INT 3
72693: PUSH
72694: LD_INT 3
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 3
72703: PUSH
72704: LD_INT 2
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: PUSH
72711: LD_INT 4
72713: PUSH
72714: LD_INT 3
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: LD_INT 4
72723: PUSH
72724: LD_INT 4
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: PUSH
72731: LD_INT 3
72733: PUSH
72734: LD_INT 4
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: LD_INT 2
72743: PUSH
72744: LD_INT 3
72746: PUSH
72747: EMPTY
72748: LIST
72749: LIST
72750: PUSH
72751: LD_INT 2
72753: PUSH
72754: LD_INT 2
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: PUSH
72761: LD_INT 4
72763: PUSH
72764: LD_INT 2
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: PUSH
72771: LD_INT 2
72773: PUSH
72774: LD_INT 4
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PUSH
72781: LD_INT 0
72783: PUSH
72784: LD_INT 4
72786: PUSH
72787: EMPTY
72788: LIST
72789: LIST
72790: PUSH
72791: LD_INT 0
72793: PUSH
72794: LD_INT 3
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: LD_INT 1
72803: PUSH
72804: LD_INT 4
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PUSH
72811: LD_INT 1
72813: PUSH
72814: LD_INT 5
72816: PUSH
72817: EMPTY
72818: LIST
72819: LIST
72820: PUSH
72821: LD_INT 0
72823: PUSH
72824: LD_INT 5
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PUSH
72831: LD_INT 1
72833: NEG
72834: PUSH
72835: LD_INT 4
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: LD_INT 1
72844: NEG
72845: PUSH
72846: LD_INT 3
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: PUSH
72853: LD_INT 2
72855: PUSH
72856: LD_INT 5
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: LD_INT 2
72865: NEG
72866: PUSH
72867: LD_INT 3
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: LIST
72917: LIST
72918: LIST
72919: LIST
72920: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72921: LD_ADDR_VAR 0 34
72925: PUSH
72926: LD_INT 0
72928: PUSH
72929: LD_INT 4
72931: NEG
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 0
72939: PUSH
72940: LD_INT 5
72942: NEG
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 1
72950: PUSH
72951: LD_INT 4
72953: NEG
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 1
72961: PUSH
72962: LD_INT 3
72964: NEG
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 0
72972: PUSH
72973: LD_INT 3
72975: NEG
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 1
72983: NEG
72984: PUSH
72985: LD_INT 4
72987: NEG
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: LD_INT 1
72995: NEG
72996: PUSH
72997: LD_INT 5
72999: NEG
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: LD_INT 2
73007: PUSH
73008: LD_INT 3
73010: NEG
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PUSH
73016: LD_INT 2
73018: NEG
73019: PUSH
73020: LD_INT 5
73022: NEG
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 3
73030: PUSH
73031: LD_INT 0
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 3
73040: PUSH
73041: LD_INT 1
73043: NEG
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: PUSH
73049: LD_INT 4
73051: PUSH
73052: LD_INT 0
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: PUSH
73059: LD_INT 4
73061: PUSH
73062: LD_INT 1
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 3
73071: PUSH
73072: LD_INT 1
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PUSH
73079: LD_INT 2
73081: PUSH
73082: LD_INT 0
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: PUSH
73089: LD_INT 2
73091: PUSH
73092: LD_INT 1
73094: NEG
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: PUSH
73100: LD_INT 2
73102: PUSH
73103: LD_INT 2
73105: NEG
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 4
73113: PUSH
73114: LD_INT 2
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: PUSH
73121: LD_INT 4
73123: PUSH
73124: LD_INT 4
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PUSH
73131: LD_INT 4
73133: PUSH
73134: LD_INT 3
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PUSH
73141: LD_INT 5
73143: PUSH
73144: LD_INT 4
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PUSH
73151: LD_INT 5
73153: PUSH
73154: LD_INT 5
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: PUSH
73161: LD_INT 4
73163: PUSH
73164: LD_INT 5
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: LD_INT 3
73173: PUSH
73174: LD_INT 4
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 3
73183: PUSH
73184: LD_INT 3
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: PUSH
73191: LD_INT 5
73193: PUSH
73194: LD_INT 3
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: LD_INT 3
73203: PUSH
73204: LD_INT 5
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: PUSH
73211: LD_INT 0
73213: PUSH
73214: LD_INT 3
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: LD_INT 0
73223: PUSH
73224: LD_INT 2
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 1
73233: PUSH
73234: LD_INT 3
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 1
73243: PUSH
73244: LD_INT 4
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: LD_INT 0
73253: PUSH
73254: LD_INT 4
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: PUSH
73261: LD_INT 1
73263: NEG
73264: PUSH
73265: LD_INT 3
73267: PUSH
73268: EMPTY
73269: LIST
73270: LIST
73271: PUSH
73272: LD_INT 1
73274: NEG
73275: PUSH
73276: LD_INT 2
73278: PUSH
73279: EMPTY
73280: LIST
73281: LIST
73282: PUSH
73283: LD_INT 2
73285: PUSH
73286: LD_INT 4
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_INT 2
73295: NEG
73296: PUSH
73297: LD_INT 2
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PUSH
73304: LD_INT 4
73306: NEG
73307: PUSH
73308: LD_INT 0
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PUSH
73315: LD_INT 4
73317: NEG
73318: PUSH
73319: LD_INT 1
73321: NEG
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: PUSH
73327: LD_INT 3
73329: NEG
73330: PUSH
73331: LD_INT 0
73333: PUSH
73334: EMPTY
73335: LIST
73336: LIST
73337: PUSH
73338: LD_INT 3
73340: NEG
73341: PUSH
73342: LD_INT 1
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PUSH
73349: LD_INT 4
73351: NEG
73352: PUSH
73353: LD_INT 1
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: PUSH
73360: LD_INT 5
73362: NEG
73363: PUSH
73364: LD_INT 0
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: LD_INT 5
73373: NEG
73374: PUSH
73375: LD_INT 1
73377: NEG
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: PUSH
73383: LD_INT 5
73385: NEG
73386: PUSH
73387: LD_INT 2
73389: NEG
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: PUSH
73395: LD_INT 3
73397: NEG
73398: PUSH
73399: LD_INT 2
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: LIST
73410: LIST
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: LIST
73435: LIST
73436: LIST
73437: LIST
73438: LIST
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: ST_TO_ADDR
// end ; end ;
73453: GO 73456
73455: POP
// case btype of b_depot , b_warehouse :
73456: LD_VAR 0 1
73460: PUSH
73461: LD_INT 0
73463: DOUBLE
73464: EQUAL
73465: IFTRUE 73475
73467: LD_INT 1
73469: DOUBLE
73470: EQUAL
73471: IFTRUE 73475
73473: GO 73676
73475: POP
// case nation of nation_american :
73476: LD_VAR 0 5
73480: PUSH
73481: LD_INT 1
73483: DOUBLE
73484: EQUAL
73485: IFTRUE 73489
73487: GO 73545
73489: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73490: LD_ADDR_VAR 0 9
73494: PUSH
73495: LD_VAR 0 11
73499: PUSH
73500: LD_VAR 0 12
73504: PUSH
73505: LD_VAR 0 13
73509: PUSH
73510: LD_VAR 0 14
73514: PUSH
73515: LD_VAR 0 15
73519: PUSH
73520: LD_VAR 0 16
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: PUSH
73533: LD_VAR 0 4
73537: PUSH
73538: LD_INT 1
73540: PLUS
73541: ARRAY
73542: ST_TO_ADDR
73543: GO 73674
73545: LD_INT 2
73547: DOUBLE
73548: EQUAL
73549: IFTRUE 73553
73551: GO 73609
73553: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73554: LD_ADDR_VAR 0 9
73558: PUSH
73559: LD_VAR 0 17
73563: PUSH
73564: LD_VAR 0 18
73568: PUSH
73569: LD_VAR 0 19
73573: PUSH
73574: LD_VAR 0 20
73578: PUSH
73579: LD_VAR 0 21
73583: PUSH
73584: LD_VAR 0 22
73588: PUSH
73589: EMPTY
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: PUSH
73597: LD_VAR 0 4
73601: PUSH
73602: LD_INT 1
73604: PLUS
73605: ARRAY
73606: ST_TO_ADDR
73607: GO 73674
73609: LD_INT 3
73611: DOUBLE
73612: EQUAL
73613: IFTRUE 73617
73615: GO 73673
73617: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73618: LD_ADDR_VAR 0 9
73622: PUSH
73623: LD_VAR 0 23
73627: PUSH
73628: LD_VAR 0 24
73632: PUSH
73633: LD_VAR 0 25
73637: PUSH
73638: LD_VAR 0 26
73642: PUSH
73643: LD_VAR 0 27
73647: PUSH
73648: LD_VAR 0 28
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: LIST
73657: LIST
73658: LIST
73659: LIST
73660: PUSH
73661: LD_VAR 0 4
73665: PUSH
73666: LD_INT 1
73668: PLUS
73669: ARRAY
73670: ST_TO_ADDR
73671: GO 73674
73673: POP
73674: GO 74229
73676: LD_INT 2
73678: DOUBLE
73679: EQUAL
73680: IFTRUE 73690
73682: LD_INT 3
73684: DOUBLE
73685: EQUAL
73686: IFTRUE 73690
73688: GO 73746
73690: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73691: LD_ADDR_VAR 0 9
73695: PUSH
73696: LD_VAR 0 29
73700: PUSH
73701: LD_VAR 0 30
73705: PUSH
73706: LD_VAR 0 31
73710: PUSH
73711: LD_VAR 0 32
73715: PUSH
73716: LD_VAR 0 33
73720: PUSH
73721: LD_VAR 0 34
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: PUSH
73734: LD_VAR 0 4
73738: PUSH
73739: LD_INT 1
73741: PLUS
73742: ARRAY
73743: ST_TO_ADDR
73744: GO 74229
73746: LD_INT 16
73748: DOUBLE
73749: EQUAL
73750: IFTRUE 73808
73752: LD_INT 17
73754: DOUBLE
73755: EQUAL
73756: IFTRUE 73808
73758: LD_INT 18
73760: DOUBLE
73761: EQUAL
73762: IFTRUE 73808
73764: LD_INT 19
73766: DOUBLE
73767: EQUAL
73768: IFTRUE 73808
73770: LD_INT 22
73772: DOUBLE
73773: EQUAL
73774: IFTRUE 73808
73776: LD_INT 20
73778: DOUBLE
73779: EQUAL
73780: IFTRUE 73808
73782: LD_INT 21
73784: DOUBLE
73785: EQUAL
73786: IFTRUE 73808
73788: LD_INT 23
73790: DOUBLE
73791: EQUAL
73792: IFTRUE 73808
73794: LD_INT 24
73796: DOUBLE
73797: EQUAL
73798: IFTRUE 73808
73800: LD_INT 25
73802: DOUBLE
73803: EQUAL
73804: IFTRUE 73808
73806: GO 73864
73808: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73809: LD_ADDR_VAR 0 9
73813: PUSH
73814: LD_VAR 0 35
73818: PUSH
73819: LD_VAR 0 36
73823: PUSH
73824: LD_VAR 0 37
73828: PUSH
73829: LD_VAR 0 38
73833: PUSH
73834: LD_VAR 0 39
73838: PUSH
73839: LD_VAR 0 40
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: PUSH
73852: LD_VAR 0 4
73856: PUSH
73857: LD_INT 1
73859: PLUS
73860: ARRAY
73861: ST_TO_ADDR
73862: GO 74229
73864: LD_INT 6
73866: DOUBLE
73867: EQUAL
73868: IFTRUE 73920
73870: LD_INT 7
73872: DOUBLE
73873: EQUAL
73874: IFTRUE 73920
73876: LD_INT 8
73878: DOUBLE
73879: EQUAL
73880: IFTRUE 73920
73882: LD_INT 13
73884: DOUBLE
73885: EQUAL
73886: IFTRUE 73920
73888: LD_INT 12
73890: DOUBLE
73891: EQUAL
73892: IFTRUE 73920
73894: LD_INT 15
73896: DOUBLE
73897: EQUAL
73898: IFTRUE 73920
73900: LD_INT 11
73902: DOUBLE
73903: EQUAL
73904: IFTRUE 73920
73906: LD_INT 14
73908: DOUBLE
73909: EQUAL
73910: IFTRUE 73920
73912: LD_INT 10
73914: DOUBLE
73915: EQUAL
73916: IFTRUE 73920
73918: GO 73976
73920: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73921: LD_ADDR_VAR 0 9
73925: PUSH
73926: LD_VAR 0 41
73930: PUSH
73931: LD_VAR 0 42
73935: PUSH
73936: LD_VAR 0 43
73940: PUSH
73941: LD_VAR 0 44
73945: PUSH
73946: LD_VAR 0 45
73950: PUSH
73951: LD_VAR 0 46
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: PUSH
73964: LD_VAR 0 4
73968: PUSH
73969: LD_INT 1
73971: PLUS
73972: ARRAY
73973: ST_TO_ADDR
73974: GO 74229
73976: LD_INT 36
73978: DOUBLE
73979: EQUAL
73980: IFTRUE 73984
73982: GO 74040
73984: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73985: LD_ADDR_VAR 0 9
73989: PUSH
73990: LD_VAR 0 47
73994: PUSH
73995: LD_VAR 0 48
73999: PUSH
74000: LD_VAR 0 49
74004: PUSH
74005: LD_VAR 0 50
74009: PUSH
74010: LD_VAR 0 51
74014: PUSH
74015: LD_VAR 0 52
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: PUSH
74028: LD_VAR 0 4
74032: PUSH
74033: LD_INT 1
74035: PLUS
74036: ARRAY
74037: ST_TO_ADDR
74038: GO 74229
74040: LD_INT 4
74042: DOUBLE
74043: EQUAL
74044: IFTRUE 74066
74046: LD_INT 5
74048: DOUBLE
74049: EQUAL
74050: IFTRUE 74066
74052: LD_INT 34
74054: DOUBLE
74055: EQUAL
74056: IFTRUE 74066
74058: LD_INT 37
74060: DOUBLE
74061: EQUAL
74062: IFTRUE 74066
74064: GO 74122
74066: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74067: LD_ADDR_VAR 0 9
74071: PUSH
74072: LD_VAR 0 53
74076: PUSH
74077: LD_VAR 0 54
74081: PUSH
74082: LD_VAR 0 55
74086: PUSH
74087: LD_VAR 0 56
74091: PUSH
74092: LD_VAR 0 57
74096: PUSH
74097: LD_VAR 0 58
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: PUSH
74110: LD_VAR 0 4
74114: PUSH
74115: LD_INT 1
74117: PLUS
74118: ARRAY
74119: ST_TO_ADDR
74120: GO 74229
74122: LD_INT 31
74124: DOUBLE
74125: EQUAL
74126: IFTRUE 74172
74128: LD_INT 32
74130: DOUBLE
74131: EQUAL
74132: IFTRUE 74172
74134: LD_INT 33
74136: DOUBLE
74137: EQUAL
74138: IFTRUE 74172
74140: LD_INT 27
74142: DOUBLE
74143: EQUAL
74144: IFTRUE 74172
74146: LD_INT 26
74148: DOUBLE
74149: EQUAL
74150: IFTRUE 74172
74152: LD_INT 28
74154: DOUBLE
74155: EQUAL
74156: IFTRUE 74172
74158: LD_INT 29
74160: DOUBLE
74161: EQUAL
74162: IFTRUE 74172
74164: LD_INT 30
74166: DOUBLE
74167: EQUAL
74168: IFTRUE 74172
74170: GO 74228
74172: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74173: LD_ADDR_VAR 0 9
74177: PUSH
74178: LD_VAR 0 59
74182: PUSH
74183: LD_VAR 0 60
74187: PUSH
74188: LD_VAR 0 61
74192: PUSH
74193: LD_VAR 0 62
74197: PUSH
74198: LD_VAR 0 63
74202: PUSH
74203: LD_VAR 0 64
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: PUSH
74216: LD_VAR 0 4
74220: PUSH
74221: LD_INT 1
74223: PLUS
74224: ARRAY
74225: ST_TO_ADDR
74226: GO 74229
74228: POP
// temp_list2 = [ ] ;
74229: LD_ADDR_VAR 0 10
74233: PUSH
74234: EMPTY
74235: ST_TO_ADDR
// for i in temp_list do
74236: LD_ADDR_VAR 0 8
74240: PUSH
74241: LD_VAR 0 9
74245: PUSH
74246: FOR_IN
74247: IFFALSE 74299
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74249: LD_ADDR_VAR 0 10
74253: PUSH
74254: LD_VAR 0 10
74258: PUSH
74259: LD_VAR 0 8
74263: PUSH
74264: LD_INT 1
74266: ARRAY
74267: PUSH
74268: LD_VAR 0 2
74272: PLUS
74273: PUSH
74274: LD_VAR 0 8
74278: PUSH
74279: LD_INT 2
74281: ARRAY
74282: PUSH
74283: LD_VAR 0 3
74287: PLUS
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: PUSH
74293: EMPTY
74294: LIST
74295: ADD
74296: ST_TO_ADDR
74297: GO 74246
74299: POP
74300: POP
// result = temp_list2 ;
74301: LD_ADDR_VAR 0 7
74305: PUSH
74306: LD_VAR 0 10
74310: ST_TO_ADDR
// end ;
74311: LD_VAR 0 7
74315: RET
// export function EnemyInRange ( unit , dist ) ; begin
74316: LD_INT 0
74318: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74319: LD_ADDR_VAR 0 3
74323: PUSH
74324: LD_VAR 0 1
74328: PPUSH
74329: CALL_OW 255
74333: PPUSH
74334: LD_VAR 0 1
74338: PPUSH
74339: CALL_OW 250
74343: PPUSH
74344: LD_VAR 0 1
74348: PPUSH
74349: CALL_OW 251
74353: PPUSH
74354: LD_VAR 0 2
74358: PPUSH
74359: CALL 47573 0 4
74363: PUSH
74364: LD_INT 4
74366: ARRAY
74367: ST_TO_ADDR
// end ;
74368: LD_VAR 0 3
74372: RET
// export function PlayerSeeMe ( unit ) ; begin
74373: LD_INT 0
74375: PPUSH
// result := See ( your_side , unit ) ;
74376: LD_ADDR_VAR 0 2
74380: PUSH
74381: LD_OWVAR 2
74385: PPUSH
74386: LD_VAR 0 1
74390: PPUSH
74391: CALL_OW 292
74395: ST_TO_ADDR
// end ;
74396: LD_VAR 0 2
74400: RET
// export function ReverseDir ( unit ) ; begin
74401: LD_INT 0
74403: PPUSH
// if not unit then
74404: LD_VAR 0 1
74408: NOT
74409: IFFALSE 74413
// exit ;
74411: GO 74436
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74413: LD_ADDR_VAR 0 2
74417: PUSH
74418: LD_VAR 0 1
74422: PPUSH
74423: CALL_OW 254
74427: PUSH
74428: LD_INT 3
74430: PLUS
74431: PUSH
74432: LD_INT 6
74434: MOD
74435: ST_TO_ADDR
// end ;
74436: LD_VAR 0 2
74440: RET
// export function ReverseArray ( array ) ; var i ; begin
74441: LD_INT 0
74443: PPUSH
74444: PPUSH
// if not array then
74445: LD_VAR 0 1
74449: NOT
74450: IFFALSE 74454
// exit ;
74452: GO 74509
// result := [ ] ;
74454: LD_ADDR_VAR 0 2
74458: PUSH
74459: EMPTY
74460: ST_TO_ADDR
// for i := array downto 1 do
74461: LD_ADDR_VAR 0 3
74465: PUSH
74466: DOUBLE
74467: LD_VAR 0 1
74471: INC
74472: ST_TO_ADDR
74473: LD_INT 1
74475: PUSH
74476: FOR_DOWNTO
74477: IFFALSE 74507
// result := Join ( result , array [ i ] ) ;
74479: LD_ADDR_VAR 0 2
74483: PUSH
74484: LD_VAR 0 2
74488: PPUSH
74489: LD_VAR 0 1
74493: PUSH
74494: LD_VAR 0 3
74498: ARRAY
74499: PPUSH
74500: CALL 79351 0 2
74504: ST_TO_ADDR
74505: GO 74476
74507: POP
74508: POP
// end ;
74509: LD_VAR 0 2
74513: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74514: LD_INT 0
74516: PPUSH
74517: PPUSH
74518: PPUSH
74519: PPUSH
74520: PPUSH
74521: PPUSH
// if not unit or not hexes then
74522: LD_VAR 0 1
74526: NOT
74527: IFTRUE 74536
74529: PUSH
74530: LD_VAR 0 2
74534: NOT
74535: OR
74536: IFFALSE 74540
// exit ;
74538: GO 74663
// dist := 9999 ;
74540: LD_ADDR_VAR 0 5
74544: PUSH
74545: LD_INT 9999
74547: ST_TO_ADDR
// for i = 1 to hexes do
74548: LD_ADDR_VAR 0 4
74552: PUSH
74553: DOUBLE
74554: LD_INT 1
74556: DEC
74557: ST_TO_ADDR
74558: LD_VAR 0 2
74562: PUSH
74563: FOR_TO
74564: IFFALSE 74651
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74566: LD_ADDR_VAR 0 6
74570: PUSH
74571: LD_VAR 0 1
74575: PPUSH
74576: LD_VAR 0 2
74580: PUSH
74581: LD_VAR 0 4
74585: ARRAY
74586: PUSH
74587: LD_INT 1
74589: ARRAY
74590: PPUSH
74591: LD_VAR 0 2
74595: PUSH
74596: LD_VAR 0 4
74600: ARRAY
74601: PUSH
74602: LD_INT 2
74604: ARRAY
74605: PPUSH
74606: CALL_OW 297
74610: ST_TO_ADDR
// if tdist < dist then
74611: LD_VAR 0 6
74615: PUSH
74616: LD_VAR 0 5
74620: LESS
74621: IFFALSE 74649
// begin hex := hexes [ i ] ;
74623: LD_ADDR_VAR 0 8
74627: PUSH
74628: LD_VAR 0 2
74632: PUSH
74633: LD_VAR 0 4
74637: ARRAY
74638: ST_TO_ADDR
// dist := tdist ;
74639: LD_ADDR_VAR 0 5
74643: PUSH
74644: LD_VAR 0 6
74648: ST_TO_ADDR
// end ; end ;
74649: GO 74563
74651: POP
74652: POP
// result := hex ;
74653: LD_ADDR_VAR 0 3
74657: PUSH
74658: LD_VAR 0 8
74662: ST_TO_ADDR
// end ;
74663: LD_VAR 0 3
74667: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74668: LD_INT 0
74670: PPUSH
74671: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74672: LD_VAR 0 1
74676: NOT
74677: IFTRUE 74716
74679: PUSH
74680: LD_VAR 0 1
74684: PUSH
74685: LD_INT 21
74687: PUSH
74688: LD_INT 2
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: PUSH
74695: LD_INT 23
74697: PUSH
74698: LD_INT 2
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: PUSH
74705: EMPTY
74706: LIST
74707: LIST
74708: PPUSH
74709: CALL_OW 69
74713: IN
74714: NOT
74715: OR
74716: IFFALSE 74720
// exit ;
74718: GO 74767
// for i = 1 to 3 do
74720: LD_ADDR_VAR 0 3
74724: PUSH
74725: DOUBLE
74726: LD_INT 1
74728: DEC
74729: ST_TO_ADDR
74730: LD_INT 3
74732: PUSH
74733: FOR_TO
74734: IFFALSE 74765
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74736: LD_VAR 0 1
74740: PPUSH
74741: CALL_OW 250
74745: PPUSH
74746: LD_VAR 0 1
74750: PPUSH
74751: CALL_OW 251
74755: PPUSH
74756: LD_INT 1
74758: PPUSH
74759: CALL_OW 453
74763: GO 74733
74765: POP
74766: POP
// end ;
74767: LD_VAR 0 2
74771: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74772: LD_INT 0
74774: PPUSH
74775: PPUSH
74776: PPUSH
74777: PPUSH
74778: PPUSH
74779: PPUSH
// if not unit or not enemy_unit then
74780: LD_VAR 0 1
74784: NOT
74785: IFTRUE 74794
74787: PUSH
74788: LD_VAR 0 2
74792: NOT
74793: OR
74794: IFFALSE 74798
// exit ;
74796: GO 75269
// if GetLives ( i ) < 250 then
74798: LD_VAR 0 4
74802: PPUSH
74803: CALL_OW 256
74807: PUSH
74808: LD_INT 250
74810: LESS
74811: IFFALSE 74824
// begin ComAutodestruct ( i ) ;
74813: LD_VAR 0 4
74817: PPUSH
74818: CALL 74668 0 1
// exit ;
74822: GO 75269
// end ; x := GetX ( enemy_unit ) ;
74824: LD_ADDR_VAR 0 7
74828: PUSH
74829: LD_VAR 0 2
74833: PPUSH
74834: CALL_OW 250
74838: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74839: LD_ADDR_VAR 0 8
74843: PUSH
74844: LD_VAR 0 2
74848: PPUSH
74849: CALL_OW 251
74853: ST_TO_ADDR
// if not x or not y then
74854: LD_VAR 0 7
74858: NOT
74859: IFTRUE 74868
74861: PUSH
74862: LD_VAR 0 8
74866: NOT
74867: OR
74868: IFFALSE 74872
// exit ;
74870: GO 75269
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74872: LD_ADDR_VAR 0 6
74876: PUSH
74877: LD_VAR 0 7
74881: PPUSH
74882: LD_INT 0
74884: PPUSH
74885: LD_INT 4
74887: PPUSH
74888: CALL_OW 272
74892: PUSH
74893: LD_VAR 0 8
74897: PPUSH
74898: LD_INT 0
74900: PPUSH
74901: LD_INT 4
74903: PPUSH
74904: CALL_OW 273
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PUSH
74913: LD_VAR 0 7
74917: PPUSH
74918: LD_INT 1
74920: PPUSH
74921: LD_INT 4
74923: PPUSH
74924: CALL_OW 272
74928: PUSH
74929: LD_VAR 0 8
74933: PPUSH
74934: LD_INT 1
74936: PPUSH
74937: LD_INT 4
74939: PPUSH
74940: CALL_OW 273
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: PUSH
74949: LD_VAR 0 7
74953: PPUSH
74954: LD_INT 2
74956: PPUSH
74957: LD_INT 4
74959: PPUSH
74960: CALL_OW 272
74964: PUSH
74965: LD_VAR 0 8
74969: PPUSH
74970: LD_INT 2
74972: PPUSH
74973: LD_INT 4
74975: PPUSH
74976: CALL_OW 273
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PUSH
74985: LD_VAR 0 7
74989: PPUSH
74990: LD_INT 3
74992: PPUSH
74993: LD_INT 4
74995: PPUSH
74996: CALL_OW 272
75000: PUSH
75001: LD_VAR 0 8
75005: PPUSH
75006: LD_INT 3
75008: PPUSH
75009: LD_INT 4
75011: PPUSH
75012: CALL_OW 273
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: PUSH
75021: LD_VAR 0 7
75025: PPUSH
75026: LD_INT 4
75028: PPUSH
75029: LD_INT 4
75031: PPUSH
75032: CALL_OW 272
75036: PUSH
75037: LD_VAR 0 8
75041: PPUSH
75042: LD_INT 4
75044: PPUSH
75045: LD_INT 4
75047: PPUSH
75048: CALL_OW 273
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PUSH
75057: LD_VAR 0 7
75061: PPUSH
75062: LD_INT 5
75064: PPUSH
75065: LD_INT 4
75067: PPUSH
75068: CALL_OW 272
75072: PUSH
75073: LD_VAR 0 8
75077: PPUSH
75078: LD_INT 5
75080: PPUSH
75081: LD_INT 4
75083: PPUSH
75084: CALL_OW 273
75088: PUSH
75089: EMPTY
75090: LIST
75091: LIST
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: LIST
75097: LIST
75098: LIST
75099: LIST
75100: ST_TO_ADDR
// for i = tmp downto 1 do
75101: LD_ADDR_VAR 0 4
75105: PUSH
75106: DOUBLE
75107: LD_VAR 0 6
75111: INC
75112: ST_TO_ADDR
75113: LD_INT 1
75115: PUSH
75116: FOR_DOWNTO
75117: IFFALSE 75220
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75119: LD_VAR 0 6
75123: PUSH
75124: LD_VAR 0 4
75128: ARRAY
75129: PUSH
75130: LD_INT 1
75132: ARRAY
75133: PPUSH
75134: LD_VAR 0 6
75138: PUSH
75139: LD_VAR 0 4
75143: ARRAY
75144: PUSH
75145: LD_INT 2
75147: ARRAY
75148: PPUSH
75149: CALL_OW 488
75153: NOT
75154: IFTRUE 75196
75156: PUSH
75157: LD_VAR 0 6
75161: PUSH
75162: LD_VAR 0 4
75166: ARRAY
75167: PUSH
75168: LD_INT 1
75170: ARRAY
75171: PPUSH
75172: LD_VAR 0 6
75176: PUSH
75177: LD_VAR 0 4
75181: ARRAY
75182: PUSH
75183: LD_INT 2
75185: ARRAY
75186: PPUSH
75187: CALL_OW 428
75191: PUSH
75192: LD_INT 0
75194: NONEQUAL
75195: OR
75196: IFFALSE 75218
// tmp := Delete ( tmp , i ) ;
75198: LD_ADDR_VAR 0 6
75202: PUSH
75203: LD_VAR 0 6
75207: PPUSH
75208: LD_VAR 0 4
75212: PPUSH
75213: CALL_OW 3
75217: ST_TO_ADDR
75218: GO 75116
75220: POP
75221: POP
// j := GetClosestHex ( unit , tmp ) ;
75222: LD_ADDR_VAR 0 5
75226: PUSH
75227: LD_VAR 0 1
75231: PPUSH
75232: LD_VAR 0 6
75236: PPUSH
75237: CALL 74514 0 2
75241: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75242: LD_VAR 0 1
75246: PPUSH
75247: LD_VAR 0 5
75251: PUSH
75252: LD_INT 1
75254: ARRAY
75255: PPUSH
75256: LD_VAR 0 5
75260: PUSH
75261: LD_INT 2
75263: ARRAY
75264: PPUSH
75265: CALL_OW 111
// end ;
75269: LD_VAR 0 3
75273: RET
// export function PrepareApemanSoldier ( ) ; begin
75274: LD_INT 0
75276: PPUSH
// uc_nation := 0 ;
75277: LD_ADDR_OWVAR 21
75281: PUSH
75282: LD_INT 0
75284: ST_TO_ADDR
// hc_sex := sex_male ;
75285: LD_ADDR_OWVAR 27
75289: PUSH
75290: LD_INT 1
75292: ST_TO_ADDR
// hc_name :=  ;
75293: LD_ADDR_OWVAR 26
75297: PUSH
75298: LD_STRING 
75300: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75301: LD_ADDR_OWVAR 28
75305: PUSH
75306: LD_INT 15
75308: ST_TO_ADDR
// hc_gallery :=  ;
75309: LD_ADDR_OWVAR 33
75313: PUSH
75314: LD_STRING 
75316: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75317: LD_ADDR_OWVAR 31
75321: PUSH
75322: LD_INT 0
75324: PPUSH
75325: LD_INT 3
75327: PPUSH
75328: CALL_OW 12
75332: PUSH
75333: LD_INT 0
75335: PPUSH
75336: LD_INT 3
75338: PPUSH
75339: CALL_OW 12
75343: PUSH
75344: LD_INT 0
75346: PUSH
75347: LD_INT 0
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75356: LD_ADDR_OWVAR 29
75360: PUSH
75361: LD_INT 12
75363: PUSH
75364: LD_INT 12
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: ST_TO_ADDR
// end ;
75371: LD_VAR 0 1
75375: RET
// export function PrepareApemanEngineer ( ) ; begin
75376: LD_INT 0
75378: PPUSH
// uc_nation := 0 ;
75379: LD_ADDR_OWVAR 21
75383: PUSH
75384: LD_INT 0
75386: ST_TO_ADDR
// hc_sex := sex_male ;
75387: LD_ADDR_OWVAR 27
75391: PUSH
75392: LD_INT 1
75394: ST_TO_ADDR
// hc_name :=  ;
75395: LD_ADDR_OWVAR 26
75399: PUSH
75400: LD_STRING 
75402: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75403: LD_ADDR_OWVAR 28
75407: PUSH
75408: LD_INT 16
75410: ST_TO_ADDR
// hc_gallery :=  ;
75411: LD_ADDR_OWVAR 33
75415: PUSH
75416: LD_STRING 
75418: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75419: LD_ADDR_OWVAR 31
75423: PUSH
75424: LD_INT 0
75426: PPUSH
75427: LD_INT 3
75429: PPUSH
75430: CALL_OW 12
75434: PUSH
75435: LD_INT 0
75437: PPUSH
75438: LD_INT 3
75440: PPUSH
75441: CALL_OW 12
75445: PUSH
75446: LD_INT 0
75448: PUSH
75449: LD_INT 0
75451: PUSH
75452: EMPTY
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75458: LD_ADDR_OWVAR 29
75462: PUSH
75463: LD_INT 12
75465: PUSH
75466: LD_INT 12
75468: PUSH
75469: EMPTY
75470: LIST
75471: LIST
75472: ST_TO_ADDR
// end ;
75473: LD_VAR 0 1
75477: RET
// export function PrepareApeman ( agressivity ) ; begin
75478: LD_INT 0
75480: PPUSH
// uc_side := 0 ;
75481: LD_ADDR_OWVAR 20
75485: PUSH
75486: LD_INT 0
75488: ST_TO_ADDR
// uc_nation := 0 ;
75489: LD_ADDR_OWVAR 21
75493: PUSH
75494: LD_INT 0
75496: ST_TO_ADDR
// hc_sex := sex_male ;
75497: LD_ADDR_OWVAR 27
75501: PUSH
75502: LD_INT 1
75504: ST_TO_ADDR
// hc_class := class_apeman ;
75505: LD_ADDR_OWVAR 28
75509: PUSH
75510: LD_INT 12
75512: ST_TO_ADDR
// hc_gallery :=  ;
75513: LD_ADDR_OWVAR 33
75517: PUSH
75518: LD_STRING 
75520: ST_TO_ADDR
// hc_name :=  ;
75521: LD_ADDR_OWVAR 26
75525: PUSH
75526: LD_STRING 
75528: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75529: LD_ADDR_OWVAR 29
75533: PUSH
75534: LD_INT 12
75536: PUSH
75537: LD_INT 12
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: ST_TO_ADDR
// if agressivity = 0 then
75544: LD_VAR 0 1
75548: PUSH
75549: LD_INT 0
75551: EQUAL
75552: IFFALSE 75564
// hc_agressivity := 0 else
75554: LD_ADDR_OWVAR 35
75558: PUSH
75559: LD_INT 0
75561: ST_TO_ADDR
75562: GO 75585
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75564: LD_ADDR_OWVAR 35
75568: PUSH
75569: LD_VAR 0 1
75573: NEG
75574: PPUSH
75575: LD_VAR 0 1
75579: PPUSH
75580: CALL_OW 12
75584: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75585: LD_ADDR_OWVAR 31
75589: PUSH
75590: LD_INT 0
75592: PPUSH
75593: LD_INT 3
75595: PPUSH
75596: CALL_OW 12
75600: PUSH
75601: LD_INT 0
75603: PPUSH
75604: LD_INT 3
75606: PPUSH
75607: CALL_OW 12
75611: PUSH
75612: LD_INT 0
75614: PUSH
75615: LD_INT 0
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: LIST
75622: LIST
75623: ST_TO_ADDR
// end ;
75624: LD_VAR 0 2
75628: RET
// export function PrepareTiger ( agressivity ) ; begin
75629: LD_INT 0
75631: PPUSH
// uc_side := 0 ;
75632: LD_ADDR_OWVAR 20
75636: PUSH
75637: LD_INT 0
75639: ST_TO_ADDR
// uc_nation := 0 ;
75640: LD_ADDR_OWVAR 21
75644: PUSH
75645: LD_INT 0
75647: ST_TO_ADDR
// InitHc ;
75648: CALL_OW 19
// hc_class := class_tiger ;
75652: LD_ADDR_OWVAR 28
75656: PUSH
75657: LD_INT 14
75659: ST_TO_ADDR
// hc_gallery :=  ;
75660: LD_ADDR_OWVAR 33
75664: PUSH
75665: LD_STRING 
75667: ST_TO_ADDR
// hc_name :=  ;
75668: LD_ADDR_OWVAR 26
75672: PUSH
75673: LD_STRING 
75675: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75676: LD_ADDR_OWVAR 35
75680: PUSH
75681: LD_VAR 0 1
75685: NEG
75686: PPUSH
75687: LD_VAR 0 1
75691: PPUSH
75692: CALL_OW 12
75696: ST_TO_ADDR
// end ;
75697: LD_VAR 0 2
75701: RET
// export function PrepareEnchidna ( ) ; begin
75702: LD_INT 0
75704: PPUSH
// uc_side := 0 ;
75705: LD_ADDR_OWVAR 20
75709: PUSH
75710: LD_INT 0
75712: ST_TO_ADDR
// uc_nation := 0 ;
75713: LD_ADDR_OWVAR 21
75717: PUSH
75718: LD_INT 0
75720: ST_TO_ADDR
// InitHc ;
75721: CALL_OW 19
// hc_class := class_baggie ;
75725: LD_ADDR_OWVAR 28
75729: PUSH
75730: LD_INT 13
75732: ST_TO_ADDR
// hc_gallery :=  ;
75733: LD_ADDR_OWVAR 33
75737: PUSH
75738: LD_STRING 
75740: ST_TO_ADDR
// hc_name :=  ;
75741: LD_ADDR_OWVAR 26
75745: PUSH
75746: LD_STRING 
75748: ST_TO_ADDR
// end ;
75749: LD_VAR 0 1
75753: RET
// export function PrepareFrog ( ) ; begin
75754: LD_INT 0
75756: PPUSH
// uc_side := 0 ;
75757: LD_ADDR_OWVAR 20
75761: PUSH
75762: LD_INT 0
75764: ST_TO_ADDR
// uc_nation := 0 ;
75765: LD_ADDR_OWVAR 21
75769: PUSH
75770: LD_INT 0
75772: ST_TO_ADDR
// InitHc ;
75773: CALL_OW 19
// hc_class := class_frog ;
75777: LD_ADDR_OWVAR 28
75781: PUSH
75782: LD_INT 19
75784: ST_TO_ADDR
// hc_gallery :=  ;
75785: LD_ADDR_OWVAR 33
75789: PUSH
75790: LD_STRING 
75792: ST_TO_ADDR
// hc_name :=  ;
75793: LD_ADDR_OWVAR 26
75797: PUSH
75798: LD_STRING 
75800: ST_TO_ADDR
// end ;
75801: LD_VAR 0 1
75805: RET
// export function PrepareFish ( ) ; begin
75806: LD_INT 0
75808: PPUSH
// uc_side := 0 ;
75809: LD_ADDR_OWVAR 20
75813: PUSH
75814: LD_INT 0
75816: ST_TO_ADDR
// uc_nation := 0 ;
75817: LD_ADDR_OWVAR 21
75821: PUSH
75822: LD_INT 0
75824: ST_TO_ADDR
// InitHc ;
75825: CALL_OW 19
// hc_class := class_fish ;
75829: LD_ADDR_OWVAR 28
75833: PUSH
75834: LD_INT 20
75836: ST_TO_ADDR
// hc_gallery :=  ;
75837: LD_ADDR_OWVAR 33
75841: PUSH
75842: LD_STRING 
75844: ST_TO_ADDR
// hc_name :=  ;
75845: LD_ADDR_OWVAR 26
75849: PUSH
75850: LD_STRING 
75852: ST_TO_ADDR
// end ;
75853: LD_VAR 0 1
75857: RET
// export function PrepareBird ( ) ; begin
75858: LD_INT 0
75860: PPUSH
// uc_side := 0 ;
75861: LD_ADDR_OWVAR 20
75865: PUSH
75866: LD_INT 0
75868: ST_TO_ADDR
// uc_nation := 0 ;
75869: LD_ADDR_OWVAR 21
75873: PUSH
75874: LD_INT 0
75876: ST_TO_ADDR
// InitHc ;
75877: CALL_OW 19
// hc_class := class_phororhacos ;
75881: LD_ADDR_OWVAR 28
75885: PUSH
75886: LD_INT 18
75888: ST_TO_ADDR
// hc_gallery :=  ;
75889: LD_ADDR_OWVAR 33
75893: PUSH
75894: LD_STRING 
75896: ST_TO_ADDR
// hc_name :=  ;
75897: LD_ADDR_OWVAR 26
75901: PUSH
75902: LD_STRING 
75904: ST_TO_ADDR
// end ;
75905: LD_VAR 0 1
75909: RET
// export function PrepareHorse ( ) ; begin
75910: LD_INT 0
75912: PPUSH
// uc_side := 0 ;
75913: LD_ADDR_OWVAR 20
75917: PUSH
75918: LD_INT 0
75920: ST_TO_ADDR
// uc_nation := 0 ;
75921: LD_ADDR_OWVAR 21
75925: PUSH
75926: LD_INT 0
75928: ST_TO_ADDR
// InitHc ;
75929: CALL_OW 19
// hc_class := class_horse ;
75933: LD_ADDR_OWVAR 28
75937: PUSH
75938: LD_INT 21
75940: ST_TO_ADDR
// hc_gallery :=  ;
75941: LD_ADDR_OWVAR 33
75945: PUSH
75946: LD_STRING 
75948: ST_TO_ADDR
// hc_name :=  ;
75949: LD_ADDR_OWVAR 26
75953: PUSH
75954: LD_STRING 
75956: ST_TO_ADDR
// end ;
75957: LD_VAR 0 1
75961: RET
// export function PrepareMastodont ( ) ; begin
75962: LD_INT 0
75964: PPUSH
// uc_side := 0 ;
75965: LD_ADDR_OWVAR 20
75969: PUSH
75970: LD_INT 0
75972: ST_TO_ADDR
// uc_nation := 0 ;
75973: LD_ADDR_OWVAR 21
75977: PUSH
75978: LD_INT 0
75980: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75981: LD_ADDR_OWVAR 37
75985: PUSH
75986: LD_INT 31
75988: ST_TO_ADDR
// vc_control := control_rider ;
75989: LD_ADDR_OWVAR 38
75993: PUSH
75994: LD_INT 4
75996: ST_TO_ADDR
// end ;
75997: LD_VAR 0 1
76001: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76002: LD_INT 0
76004: PPUSH
76005: PPUSH
76006: PPUSH
// uc_side = 0 ;
76007: LD_ADDR_OWVAR 20
76011: PUSH
76012: LD_INT 0
76014: ST_TO_ADDR
// uc_nation = 0 ;
76015: LD_ADDR_OWVAR 21
76019: PUSH
76020: LD_INT 0
76022: ST_TO_ADDR
// InitHc_All ( ) ;
76023: CALL_OW 584
// InitVc ;
76027: CALL_OW 20
// if mastodonts then
76031: LD_VAR 0 6
76035: IFFALSE 76102
// for i = 1 to mastodonts do
76037: LD_ADDR_VAR 0 11
76041: PUSH
76042: DOUBLE
76043: LD_INT 1
76045: DEC
76046: ST_TO_ADDR
76047: LD_VAR 0 6
76051: PUSH
76052: FOR_TO
76053: IFFALSE 76100
// begin vc_chassis := 31 ;
76055: LD_ADDR_OWVAR 37
76059: PUSH
76060: LD_INT 31
76062: ST_TO_ADDR
// vc_control := control_rider ;
76063: LD_ADDR_OWVAR 38
76067: PUSH
76068: LD_INT 4
76070: ST_TO_ADDR
// animal := CreateVehicle ;
76071: LD_ADDR_VAR 0 12
76075: PUSH
76076: CALL_OW 45
76080: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76081: LD_VAR 0 12
76085: PPUSH
76086: LD_VAR 0 8
76090: PPUSH
76091: LD_INT 0
76093: PPUSH
76094: CALL 78244 0 3
// end ;
76098: GO 76052
76100: POP
76101: POP
// if horses then
76102: LD_VAR 0 5
76106: IFFALSE 76173
// for i = 1 to horses do
76108: LD_ADDR_VAR 0 11
76112: PUSH
76113: DOUBLE
76114: LD_INT 1
76116: DEC
76117: ST_TO_ADDR
76118: LD_VAR 0 5
76122: PUSH
76123: FOR_TO
76124: IFFALSE 76171
// begin hc_class := 21 ;
76126: LD_ADDR_OWVAR 28
76130: PUSH
76131: LD_INT 21
76133: ST_TO_ADDR
// hc_gallery :=  ;
76134: LD_ADDR_OWVAR 33
76138: PUSH
76139: LD_STRING 
76141: ST_TO_ADDR
// animal := CreateHuman ;
76142: LD_ADDR_VAR 0 12
76146: PUSH
76147: CALL_OW 44
76151: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76152: LD_VAR 0 12
76156: PPUSH
76157: LD_VAR 0 8
76161: PPUSH
76162: LD_INT 0
76164: PPUSH
76165: CALL 78244 0 3
// end ;
76169: GO 76123
76171: POP
76172: POP
// if birds then
76173: LD_VAR 0 1
76177: IFFALSE 76244
// for i = 1 to birds do
76179: LD_ADDR_VAR 0 11
76183: PUSH
76184: DOUBLE
76185: LD_INT 1
76187: DEC
76188: ST_TO_ADDR
76189: LD_VAR 0 1
76193: PUSH
76194: FOR_TO
76195: IFFALSE 76242
// begin hc_class := 18 ;
76197: LD_ADDR_OWVAR 28
76201: PUSH
76202: LD_INT 18
76204: ST_TO_ADDR
// hc_gallery =  ;
76205: LD_ADDR_OWVAR 33
76209: PUSH
76210: LD_STRING 
76212: ST_TO_ADDR
// animal := CreateHuman ;
76213: LD_ADDR_VAR 0 12
76217: PUSH
76218: CALL_OW 44
76222: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76223: LD_VAR 0 12
76227: PPUSH
76228: LD_VAR 0 8
76232: PPUSH
76233: LD_INT 0
76235: PPUSH
76236: CALL 78244 0 3
// end ;
76240: GO 76194
76242: POP
76243: POP
// if tigers then
76244: LD_VAR 0 2
76248: IFFALSE 76332
// for i = 1 to tigers do
76250: LD_ADDR_VAR 0 11
76254: PUSH
76255: DOUBLE
76256: LD_INT 1
76258: DEC
76259: ST_TO_ADDR
76260: LD_VAR 0 2
76264: PUSH
76265: FOR_TO
76266: IFFALSE 76330
// begin hc_class = class_tiger ;
76268: LD_ADDR_OWVAR 28
76272: PUSH
76273: LD_INT 14
76275: ST_TO_ADDR
// hc_gallery =  ;
76276: LD_ADDR_OWVAR 33
76280: PUSH
76281: LD_STRING 
76283: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76284: LD_ADDR_OWVAR 35
76288: PUSH
76289: LD_INT 7
76291: NEG
76292: PPUSH
76293: LD_INT 7
76295: PPUSH
76296: CALL_OW 12
76300: ST_TO_ADDR
// animal := CreateHuman ;
76301: LD_ADDR_VAR 0 12
76305: PUSH
76306: CALL_OW 44
76310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76311: LD_VAR 0 12
76315: PPUSH
76316: LD_VAR 0 8
76320: PPUSH
76321: LD_INT 0
76323: PPUSH
76324: CALL 78244 0 3
// end ;
76328: GO 76265
76330: POP
76331: POP
// if apemans then
76332: LD_VAR 0 3
76336: IFFALSE 76459
// for i = 1 to apemans do
76338: LD_ADDR_VAR 0 11
76342: PUSH
76343: DOUBLE
76344: LD_INT 1
76346: DEC
76347: ST_TO_ADDR
76348: LD_VAR 0 3
76352: PUSH
76353: FOR_TO
76354: IFFALSE 76457
// begin hc_class = class_apeman ;
76356: LD_ADDR_OWVAR 28
76360: PUSH
76361: LD_INT 12
76363: ST_TO_ADDR
// hc_gallery =  ;
76364: LD_ADDR_OWVAR 33
76368: PUSH
76369: LD_STRING 
76371: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76372: LD_ADDR_OWVAR 35
76376: PUSH
76377: LD_INT 2
76379: NEG
76380: PPUSH
76381: LD_INT 2
76383: PPUSH
76384: CALL_OW 12
76388: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76389: LD_ADDR_OWVAR 31
76393: PUSH
76394: LD_INT 1
76396: PPUSH
76397: LD_INT 3
76399: PPUSH
76400: CALL_OW 12
76404: PUSH
76405: LD_INT 1
76407: PPUSH
76408: LD_INT 3
76410: PPUSH
76411: CALL_OW 12
76415: PUSH
76416: LD_INT 0
76418: PUSH
76419: LD_INT 0
76421: PUSH
76422: EMPTY
76423: LIST
76424: LIST
76425: LIST
76426: LIST
76427: ST_TO_ADDR
// animal := CreateHuman ;
76428: LD_ADDR_VAR 0 12
76432: PUSH
76433: CALL_OW 44
76437: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76438: LD_VAR 0 12
76442: PPUSH
76443: LD_VAR 0 8
76447: PPUSH
76448: LD_INT 0
76450: PPUSH
76451: CALL 78244 0 3
// end ;
76455: GO 76353
76457: POP
76458: POP
// if enchidnas then
76459: LD_VAR 0 4
76463: IFFALSE 76530
// for i = 1 to enchidnas do
76465: LD_ADDR_VAR 0 11
76469: PUSH
76470: DOUBLE
76471: LD_INT 1
76473: DEC
76474: ST_TO_ADDR
76475: LD_VAR 0 4
76479: PUSH
76480: FOR_TO
76481: IFFALSE 76528
// begin hc_class = 13 ;
76483: LD_ADDR_OWVAR 28
76487: PUSH
76488: LD_INT 13
76490: ST_TO_ADDR
// hc_gallery =  ;
76491: LD_ADDR_OWVAR 33
76495: PUSH
76496: LD_STRING 
76498: ST_TO_ADDR
// animal := CreateHuman ;
76499: LD_ADDR_VAR 0 12
76503: PUSH
76504: CALL_OW 44
76508: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76509: LD_VAR 0 12
76513: PPUSH
76514: LD_VAR 0 8
76518: PPUSH
76519: LD_INT 0
76521: PPUSH
76522: CALL 78244 0 3
// end ;
76526: GO 76480
76528: POP
76529: POP
// if fishes then
76530: LD_VAR 0 7
76534: IFFALSE 76601
// for i = 1 to fishes do
76536: LD_ADDR_VAR 0 11
76540: PUSH
76541: DOUBLE
76542: LD_INT 1
76544: DEC
76545: ST_TO_ADDR
76546: LD_VAR 0 7
76550: PUSH
76551: FOR_TO
76552: IFFALSE 76599
// begin hc_class = 20 ;
76554: LD_ADDR_OWVAR 28
76558: PUSH
76559: LD_INT 20
76561: ST_TO_ADDR
// hc_gallery =  ;
76562: LD_ADDR_OWVAR 33
76566: PUSH
76567: LD_STRING 
76569: ST_TO_ADDR
// animal := CreateHuman ;
76570: LD_ADDR_VAR 0 12
76574: PUSH
76575: CALL_OW 44
76579: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76580: LD_VAR 0 12
76584: PPUSH
76585: LD_VAR 0 9
76589: PPUSH
76590: LD_INT 0
76592: PPUSH
76593: CALL 78244 0 3
// end ;
76597: GO 76551
76599: POP
76600: POP
// end ;
76601: LD_VAR 0 10
76605: RET
// export function WantHeal ( sci , unit ) ; begin
76606: LD_INT 0
76608: PPUSH
// if GetTaskList ( sci ) > 0 then
76609: LD_VAR 0 1
76613: PPUSH
76614: CALL_OW 437
76618: PUSH
76619: LD_INT 0
76621: GREATER
76622: IFFALSE 76694
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76624: LD_VAR 0 1
76628: PPUSH
76629: CALL_OW 437
76633: PUSH
76634: LD_INT 1
76636: ARRAY
76637: PUSH
76638: LD_INT 1
76640: ARRAY
76641: PUSH
76642: LD_STRING l
76644: EQUAL
76645: IFFALSE 76672
76647: PUSH
76648: LD_VAR 0 1
76652: PPUSH
76653: CALL_OW 437
76657: PUSH
76658: LD_INT 1
76660: ARRAY
76661: PUSH
76662: LD_INT 4
76664: ARRAY
76665: PUSH
76666: LD_VAR 0 2
76670: EQUAL
76671: AND
76672: IFFALSE 76684
// result := true else
76674: LD_ADDR_VAR 0 3
76678: PUSH
76679: LD_INT 1
76681: ST_TO_ADDR
76682: GO 76692
// result := false ;
76684: LD_ADDR_VAR 0 3
76688: PUSH
76689: LD_INT 0
76691: ST_TO_ADDR
// end else
76692: GO 76702
// result := false ;
76694: LD_ADDR_VAR 0 3
76698: PUSH
76699: LD_INT 0
76701: ST_TO_ADDR
// end ;
76702: LD_VAR 0 3
76706: RET
// export function HealTarget ( sci ) ; begin
76707: LD_INT 0
76709: PPUSH
// if not sci then
76710: LD_VAR 0 1
76714: NOT
76715: IFFALSE 76719
// exit ;
76717: GO 76784
// result := 0 ;
76719: LD_ADDR_VAR 0 2
76723: PUSH
76724: LD_INT 0
76726: ST_TO_ADDR
// if GetTaskList ( sci ) then
76727: LD_VAR 0 1
76731: PPUSH
76732: CALL_OW 437
76736: IFFALSE 76784
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76738: LD_VAR 0 1
76742: PPUSH
76743: CALL_OW 437
76747: PUSH
76748: LD_INT 1
76750: ARRAY
76751: PUSH
76752: LD_INT 1
76754: ARRAY
76755: PUSH
76756: LD_STRING l
76758: EQUAL
76759: IFFALSE 76784
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76761: LD_ADDR_VAR 0 2
76765: PUSH
76766: LD_VAR 0 1
76770: PPUSH
76771: CALL_OW 437
76775: PUSH
76776: LD_INT 1
76778: ARRAY
76779: PUSH
76780: LD_INT 4
76782: ARRAY
76783: ST_TO_ADDR
// end ;
76784: LD_VAR 0 2
76788: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76789: LD_INT 0
76791: PPUSH
76792: PPUSH
76793: PPUSH
76794: PPUSH
// if not base_units then
76795: LD_VAR 0 1
76799: NOT
76800: IFFALSE 76804
// exit ;
76802: GO 76891
// result := false ;
76804: LD_ADDR_VAR 0 2
76808: PUSH
76809: LD_INT 0
76811: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76812: LD_ADDR_VAR 0 5
76816: PUSH
76817: LD_VAR 0 1
76821: PPUSH
76822: LD_INT 21
76824: PUSH
76825: LD_INT 3
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: PPUSH
76832: CALL_OW 72
76836: ST_TO_ADDR
// if not tmp then
76837: LD_VAR 0 5
76841: NOT
76842: IFFALSE 76846
// exit ;
76844: GO 76891
// for i in tmp do
76846: LD_ADDR_VAR 0 3
76850: PUSH
76851: LD_VAR 0 5
76855: PUSH
76856: FOR_IN
76857: IFFALSE 76889
// begin result := EnemyInRange ( i , 22 ) ;
76859: LD_ADDR_VAR 0 2
76863: PUSH
76864: LD_VAR 0 3
76868: PPUSH
76869: LD_INT 22
76871: PPUSH
76872: CALL 74316 0 2
76876: ST_TO_ADDR
// if result then
76877: LD_VAR 0 2
76881: IFFALSE 76887
// exit ;
76883: POP
76884: POP
76885: GO 76891
// end ;
76887: GO 76856
76889: POP
76890: POP
// end ;
76891: LD_VAR 0 2
76895: RET
// export function FilterByTag ( units , tag ) ; begin
76896: LD_INT 0
76898: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76899: LD_ADDR_VAR 0 3
76903: PUSH
76904: LD_VAR 0 1
76908: PPUSH
76909: LD_INT 120
76911: PUSH
76912: LD_VAR 0 2
76916: PUSH
76917: EMPTY
76918: LIST
76919: LIST
76920: PPUSH
76921: CALL_OW 72
76925: ST_TO_ADDR
// end ;
76926: LD_VAR 0 3
76930: RET
// export function IsDriver ( un ) ; begin
76931: LD_INT 0
76933: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76934: LD_ADDR_VAR 0 2
76938: PUSH
76939: LD_VAR 0 1
76943: PUSH
76944: LD_INT 55
76946: PUSH
76947: EMPTY
76948: LIST
76949: PPUSH
76950: CALL_OW 69
76954: IN
76955: ST_TO_ADDR
// end ;
76956: LD_VAR 0 2
76960: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76961: LD_INT 0
76963: PPUSH
76964: PPUSH
// list := [ ] ;
76965: LD_ADDR_VAR 0 5
76969: PUSH
76970: EMPTY
76971: ST_TO_ADDR
// case d of 0 :
76972: LD_VAR 0 3
76976: PUSH
76977: LD_INT 0
76979: DOUBLE
76980: EQUAL
76981: IFTRUE 76985
76983: GO 77118
76985: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76986: LD_ADDR_VAR 0 5
76990: PUSH
76991: LD_VAR 0 1
76995: PUSH
76996: LD_INT 4
76998: MINUS
76999: PUSH
77000: LD_VAR 0 2
77004: PUSH
77005: LD_INT 4
77007: MINUS
77008: PUSH
77009: LD_INT 2
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: LIST
77016: PUSH
77017: LD_VAR 0 1
77021: PUSH
77022: LD_INT 3
77024: MINUS
77025: PUSH
77026: LD_VAR 0 2
77030: PUSH
77031: LD_INT 1
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: LIST
77038: PUSH
77039: LD_VAR 0 1
77043: PUSH
77044: LD_INT 4
77046: PLUS
77047: PUSH
77048: LD_VAR 0 2
77052: PUSH
77053: LD_INT 4
77055: PUSH
77056: EMPTY
77057: LIST
77058: LIST
77059: LIST
77060: PUSH
77061: LD_VAR 0 1
77065: PUSH
77066: LD_INT 3
77068: PLUS
77069: PUSH
77070: LD_VAR 0 2
77074: PUSH
77075: LD_INT 3
77077: PLUS
77078: PUSH
77079: LD_INT 5
77081: PUSH
77082: EMPTY
77083: LIST
77084: LIST
77085: LIST
77086: PUSH
77087: LD_VAR 0 1
77091: PUSH
77092: LD_VAR 0 2
77096: PUSH
77097: LD_INT 4
77099: PLUS
77100: PUSH
77101: LD_INT 0
77103: PUSH
77104: EMPTY
77105: LIST
77106: LIST
77107: LIST
77108: PUSH
77109: EMPTY
77110: LIST
77111: LIST
77112: LIST
77113: LIST
77114: LIST
77115: ST_TO_ADDR
// end ; 1 :
77116: GO 77816
77118: LD_INT 1
77120: DOUBLE
77121: EQUAL
77122: IFTRUE 77126
77124: GO 77259
77126: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77127: LD_ADDR_VAR 0 5
77131: PUSH
77132: LD_VAR 0 1
77136: PUSH
77137: LD_VAR 0 2
77141: PUSH
77142: LD_INT 4
77144: MINUS
77145: PUSH
77146: LD_INT 3
77148: PUSH
77149: EMPTY
77150: LIST
77151: LIST
77152: LIST
77153: PUSH
77154: LD_VAR 0 1
77158: PUSH
77159: LD_INT 3
77161: MINUS
77162: PUSH
77163: LD_VAR 0 2
77167: PUSH
77168: LD_INT 3
77170: MINUS
77171: PUSH
77172: LD_INT 2
77174: PUSH
77175: EMPTY
77176: LIST
77177: LIST
77178: LIST
77179: PUSH
77180: LD_VAR 0 1
77184: PUSH
77185: LD_INT 4
77187: MINUS
77188: PUSH
77189: LD_VAR 0 2
77193: PUSH
77194: LD_INT 1
77196: PUSH
77197: EMPTY
77198: LIST
77199: LIST
77200: LIST
77201: PUSH
77202: LD_VAR 0 1
77206: PUSH
77207: LD_VAR 0 2
77211: PUSH
77212: LD_INT 3
77214: PLUS
77215: PUSH
77216: LD_INT 0
77218: PUSH
77219: EMPTY
77220: LIST
77221: LIST
77222: LIST
77223: PUSH
77224: LD_VAR 0 1
77228: PUSH
77229: LD_INT 4
77231: PLUS
77232: PUSH
77233: LD_VAR 0 2
77237: PUSH
77238: LD_INT 4
77240: PLUS
77241: PUSH
77242: LD_INT 5
77244: PUSH
77245: EMPTY
77246: LIST
77247: LIST
77248: LIST
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: LIST
77254: LIST
77255: LIST
77256: ST_TO_ADDR
// end ; 2 :
77257: GO 77816
77259: LD_INT 2
77261: DOUBLE
77262: EQUAL
77263: IFTRUE 77267
77265: GO 77396
77267: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77268: LD_ADDR_VAR 0 5
77272: PUSH
77273: LD_VAR 0 1
77277: PUSH
77278: LD_VAR 0 2
77282: PUSH
77283: LD_INT 3
77285: MINUS
77286: PUSH
77287: LD_INT 3
77289: PUSH
77290: EMPTY
77291: LIST
77292: LIST
77293: LIST
77294: PUSH
77295: LD_VAR 0 1
77299: PUSH
77300: LD_INT 4
77302: PLUS
77303: PUSH
77304: LD_VAR 0 2
77308: PUSH
77309: LD_INT 4
77311: PUSH
77312: EMPTY
77313: LIST
77314: LIST
77315: LIST
77316: PUSH
77317: LD_VAR 0 1
77321: PUSH
77322: LD_VAR 0 2
77326: PUSH
77327: LD_INT 4
77329: PLUS
77330: PUSH
77331: LD_INT 0
77333: PUSH
77334: EMPTY
77335: LIST
77336: LIST
77337: LIST
77338: PUSH
77339: LD_VAR 0 1
77343: PUSH
77344: LD_INT 3
77346: MINUS
77347: PUSH
77348: LD_VAR 0 2
77352: PUSH
77353: LD_INT 1
77355: PUSH
77356: EMPTY
77357: LIST
77358: LIST
77359: LIST
77360: PUSH
77361: LD_VAR 0 1
77365: PUSH
77366: LD_INT 4
77368: MINUS
77369: PUSH
77370: LD_VAR 0 2
77374: PUSH
77375: LD_INT 4
77377: MINUS
77378: PUSH
77379: LD_INT 2
77381: PUSH
77382: EMPTY
77383: LIST
77384: LIST
77385: LIST
77386: PUSH
77387: EMPTY
77388: LIST
77389: LIST
77390: LIST
77391: LIST
77392: LIST
77393: ST_TO_ADDR
// end ; 3 :
77394: GO 77816
77396: LD_INT 3
77398: DOUBLE
77399: EQUAL
77400: IFTRUE 77404
77402: GO 77537
77404: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77405: LD_ADDR_VAR 0 5
77409: PUSH
77410: LD_VAR 0 1
77414: PUSH
77415: LD_INT 3
77417: PLUS
77418: PUSH
77419: LD_VAR 0 2
77423: PUSH
77424: LD_INT 4
77426: PUSH
77427: EMPTY
77428: LIST
77429: LIST
77430: LIST
77431: PUSH
77432: LD_VAR 0 1
77436: PUSH
77437: LD_INT 4
77439: PLUS
77440: PUSH
77441: LD_VAR 0 2
77445: PUSH
77446: LD_INT 4
77448: PLUS
77449: PUSH
77450: LD_INT 5
77452: PUSH
77453: EMPTY
77454: LIST
77455: LIST
77456: LIST
77457: PUSH
77458: LD_VAR 0 1
77462: PUSH
77463: LD_INT 4
77465: MINUS
77466: PUSH
77467: LD_VAR 0 2
77471: PUSH
77472: LD_INT 1
77474: PUSH
77475: EMPTY
77476: LIST
77477: LIST
77478: LIST
77479: PUSH
77480: LD_VAR 0 1
77484: PUSH
77485: LD_VAR 0 2
77489: PUSH
77490: LD_INT 4
77492: MINUS
77493: PUSH
77494: LD_INT 3
77496: PUSH
77497: EMPTY
77498: LIST
77499: LIST
77500: LIST
77501: PUSH
77502: LD_VAR 0 1
77506: PUSH
77507: LD_INT 3
77509: MINUS
77510: PUSH
77511: LD_VAR 0 2
77515: PUSH
77516: LD_INT 3
77518: MINUS
77519: PUSH
77520: LD_INT 2
77522: PUSH
77523: EMPTY
77524: LIST
77525: LIST
77526: LIST
77527: PUSH
77528: EMPTY
77529: LIST
77530: LIST
77531: LIST
77532: LIST
77533: LIST
77534: ST_TO_ADDR
// end ; 4 :
77535: GO 77816
77537: LD_INT 4
77539: DOUBLE
77540: EQUAL
77541: IFTRUE 77545
77543: GO 77678
77545: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77546: LD_ADDR_VAR 0 5
77550: PUSH
77551: LD_VAR 0 1
77555: PUSH
77556: LD_VAR 0 2
77560: PUSH
77561: LD_INT 4
77563: PLUS
77564: PUSH
77565: LD_INT 0
77567: PUSH
77568: EMPTY
77569: LIST
77570: LIST
77571: LIST
77572: PUSH
77573: LD_VAR 0 1
77577: PUSH
77578: LD_INT 3
77580: PLUS
77581: PUSH
77582: LD_VAR 0 2
77586: PUSH
77587: LD_INT 3
77589: PLUS
77590: PUSH
77591: LD_INT 5
77593: PUSH
77594: EMPTY
77595: LIST
77596: LIST
77597: LIST
77598: PUSH
77599: LD_VAR 0 1
77603: PUSH
77604: LD_INT 4
77606: PLUS
77607: PUSH
77608: LD_VAR 0 2
77612: PUSH
77613: LD_INT 4
77615: PUSH
77616: EMPTY
77617: LIST
77618: LIST
77619: LIST
77620: PUSH
77621: LD_VAR 0 1
77625: PUSH
77626: LD_VAR 0 2
77630: PUSH
77631: LD_INT 3
77633: MINUS
77634: PUSH
77635: LD_INT 3
77637: PUSH
77638: EMPTY
77639: LIST
77640: LIST
77641: LIST
77642: PUSH
77643: LD_VAR 0 1
77647: PUSH
77648: LD_INT 4
77650: MINUS
77651: PUSH
77652: LD_VAR 0 2
77656: PUSH
77657: LD_INT 4
77659: MINUS
77660: PUSH
77661: LD_INT 2
77663: PUSH
77664: EMPTY
77665: LIST
77666: LIST
77667: LIST
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: LIST
77673: LIST
77674: LIST
77675: ST_TO_ADDR
// end ; 5 :
77676: GO 77816
77678: LD_INT 5
77680: DOUBLE
77681: EQUAL
77682: IFTRUE 77686
77684: GO 77815
77686: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77687: LD_ADDR_VAR 0 5
77691: PUSH
77692: LD_VAR 0 1
77696: PUSH
77697: LD_INT 4
77699: MINUS
77700: PUSH
77701: LD_VAR 0 2
77705: PUSH
77706: LD_INT 1
77708: PUSH
77709: EMPTY
77710: LIST
77711: LIST
77712: LIST
77713: PUSH
77714: LD_VAR 0 1
77718: PUSH
77719: LD_VAR 0 2
77723: PUSH
77724: LD_INT 4
77726: MINUS
77727: PUSH
77728: LD_INT 3
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: LIST
77735: PUSH
77736: LD_VAR 0 1
77740: PUSH
77741: LD_INT 4
77743: PLUS
77744: PUSH
77745: LD_VAR 0 2
77749: PUSH
77750: LD_INT 4
77752: PLUS
77753: PUSH
77754: LD_INT 5
77756: PUSH
77757: EMPTY
77758: LIST
77759: LIST
77760: LIST
77761: PUSH
77762: LD_VAR 0 1
77766: PUSH
77767: LD_INT 3
77769: PLUS
77770: PUSH
77771: LD_VAR 0 2
77775: PUSH
77776: LD_INT 4
77778: PUSH
77779: EMPTY
77780: LIST
77781: LIST
77782: LIST
77783: PUSH
77784: LD_VAR 0 1
77788: PUSH
77789: LD_VAR 0 2
77793: PUSH
77794: LD_INT 3
77796: PLUS
77797: PUSH
77798: LD_INT 0
77800: PUSH
77801: EMPTY
77802: LIST
77803: LIST
77804: LIST
77805: PUSH
77806: EMPTY
77807: LIST
77808: LIST
77809: LIST
77810: LIST
77811: LIST
77812: ST_TO_ADDR
// end ; end ;
77813: GO 77816
77815: POP
// result := list ;
77816: LD_ADDR_VAR 0 4
77820: PUSH
77821: LD_VAR 0 5
77825: ST_TO_ADDR
// end ;
77826: LD_VAR 0 4
77830: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77831: LD_INT 0
77833: PPUSH
77834: PPUSH
77835: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77836: LD_VAR 0 1
77840: NOT
77841: IFTRUE 77869
77843: PUSH
77844: LD_VAR 0 2
77848: PUSH
77849: LD_INT 1
77851: PUSH
77852: LD_INT 2
77854: PUSH
77855: LD_INT 3
77857: PUSH
77858: LD_INT 4
77860: PUSH
77861: EMPTY
77862: LIST
77863: LIST
77864: LIST
77865: LIST
77866: IN
77867: NOT
77868: OR
77869: IFFALSE 77873
// exit ;
77871: GO 77956
// tmp := [ ] ;
77873: LD_ADDR_VAR 0 5
77877: PUSH
77878: EMPTY
77879: ST_TO_ADDR
// for i in units do
77880: LD_ADDR_VAR 0 4
77884: PUSH
77885: LD_VAR 0 1
77889: PUSH
77890: FOR_IN
77891: IFFALSE 77925
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77893: LD_ADDR_VAR 0 5
77897: PUSH
77898: LD_VAR 0 5
77902: PPUSH
77903: LD_VAR 0 4
77907: PPUSH
77908: LD_VAR 0 2
77912: PPUSH
77913: CALL_OW 259
77917: PPUSH
77918: CALL 79351 0 2
77922: ST_TO_ADDR
77923: GO 77890
77925: POP
77926: POP
// if not tmp then
77927: LD_VAR 0 5
77931: NOT
77932: IFFALSE 77936
// exit ;
77934: GO 77956
// result := SortListByListDesc ( units , tmp ) ;
77936: LD_ADDR_VAR 0 3
77940: PUSH
77941: LD_VAR 0 1
77945: PPUSH
77946: LD_VAR 0 5
77950: PPUSH
77951: CALL_OW 77
77955: ST_TO_ADDR
// end ;
77956: LD_VAR 0 3
77960: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77961: LD_INT 0
77963: PPUSH
77964: PPUSH
77965: PPUSH
// result := false ;
77966: LD_ADDR_VAR 0 3
77970: PUSH
77971: LD_INT 0
77973: ST_TO_ADDR
// if not building then
77974: LD_VAR 0 2
77978: NOT
77979: IFFALSE 77983
// exit ;
77981: GO 78127
// x := GetX ( building ) ;
77983: LD_ADDR_VAR 0 4
77987: PUSH
77988: LD_VAR 0 2
77992: PPUSH
77993: CALL_OW 250
77997: ST_TO_ADDR
// y := GetY ( building ) ;
77998: LD_ADDR_VAR 0 5
78002: PUSH
78003: LD_VAR 0 2
78007: PPUSH
78008: CALL_OW 251
78012: ST_TO_ADDR
// if not x or not y then
78013: LD_VAR 0 4
78017: NOT
78018: IFTRUE 78027
78020: PUSH
78021: LD_VAR 0 5
78025: NOT
78026: OR
78027: IFFALSE 78031
// exit ;
78029: GO 78127
// if GetTaskList ( unit ) then
78031: LD_VAR 0 1
78035: PPUSH
78036: CALL_OW 437
78040: IFFALSE 78127
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78042: LD_STRING e
78044: PUSH
78045: LD_VAR 0 1
78049: PPUSH
78050: CALL_OW 437
78054: PUSH
78055: LD_INT 1
78057: ARRAY
78058: PUSH
78059: LD_INT 1
78061: ARRAY
78062: EQUAL
78063: IFFALSE 78090
78065: PUSH
78066: LD_VAR 0 4
78070: PUSH
78071: LD_VAR 0 1
78075: PPUSH
78076: CALL_OW 437
78080: PUSH
78081: LD_INT 1
78083: ARRAY
78084: PUSH
78085: LD_INT 2
78087: ARRAY
78088: EQUAL
78089: AND
78090: IFFALSE 78117
78092: PUSH
78093: LD_VAR 0 5
78097: PUSH
78098: LD_VAR 0 1
78102: PPUSH
78103: CALL_OW 437
78107: PUSH
78108: LD_INT 1
78110: ARRAY
78111: PUSH
78112: LD_INT 3
78114: ARRAY
78115: EQUAL
78116: AND
78117: IFFALSE 78127
// result := true end ;
78119: LD_ADDR_VAR 0 3
78123: PUSH
78124: LD_INT 1
78126: ST_TO_ADDR
// end ;
78127: LD_VAR 0 3
78131: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78132: LD_INT 0
78134: PPUSH
// result := false ;
78135: LD_ADDR_VAR 0 4
78139: PUSH
78140: LD_INT 0
78142: ST_TO_ADDR
// if GetTaskList ( unit ) then
78143: LD_VAR 0 1
78147: PPUSH
78148: CALL_OW 437
78152: IFFALSE 78239
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78154: LD_STRING M
78156: PUSH
78157: LD_VAR 0 1
78161: PPUSH
78162: CALL_OW 437
78166: PUSH
78167: LD_INT 1
78169: ARRAY
78170: PUSH
78171: LD_INT 1
78173: ARRAY
78174: EQUAL
78175: IFFALSE 78202
78177: PUSH
78178: LD_VAR 0 2
78182: PUSH
78183: LD_VAR 0 1
78187: PPUSH
78188: CALL_OW 437
78192: PUSH
78193: LD_INT 1
78195: ARRAY
78196: PUSH
78197: LD_INT 2
78199: ARRAY
78200: EQUAL
78201: AND
78202: IFFALSE 78229
78204: PUSH
78205: LD_VAR 0 3
78209: PUSH
78210: LD_VAR 0 1
78214: PPUSH
78215: CALL_OW 437
78219: PUSH
78220: LD_INT 1
78222: ARRAY
78223: PUSH
78224: LD_INT 3
78226: ARRAY
78227: EQUAL
78228: AND
78229: IFFALSE 78239
// result := true ;
78231: LD_ADDR_VAR 0 4
78235: PUSH
78236: LD_INT 1
78238: ST_TO_ADDR
// end ; end ;
78239: LD_VAR 0 4
78243: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78244: LD_INT 0
78246: PPUSH
78247: PPUSH
78248: PPUSH
78249: PPUSH
// if not unit or not area then
78250: LD_VAR 0 1
78254: NOT
78255: IFTRUE 78264
78257: PUSH
78258: LD_VAR 0 2
78262: NOT
78263: OR
78264: IFFALSE 78268
// exit ;
78266: GO 78444
// tmp := AreaToList ( area , i ) ;
78268: LD_ADDR_VAR 0 6
78272: PUSH
78273: LD_VAR 0 2
78277: PPUSH
78278: LD_VAR 0 5
78282: PPUSH
78283: CALL_OW 517
78287: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78288: LD_ADDR_VAR 0 5
78292: PUSH
78293: DOUBLE
78294: LD_INT 1
78296: DEC
78297: ST_TO_ADDR
78298: LD_VAR 0 6
78302: PUSH
78303: LD_INT 1
78305: ARRAY
78306: PUSH
78307: FOR_TO
78308: IFFALSE 78442
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78310: LD_ADDR_VAR 0 7
78314: PUSH
78315: LD_VAR 0 6
78319: PUSH
78320: LD_INT 1
78322: ARRAY
78323: PUSH
78324: LD_VAR 0 5
78328: ARRAY
78329: PUSH
78330: LD_VAR 0 6
78334: PUSH
78335: LD_INT 2
78337: ARRAY
78338: PUSH
78339: LD_VAR 0 5
78343: ARRAY
78344: PUSH
78345: EMPTY
78346: LIST
78347: LIST
78348: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78349: LD_INT 92
78351: PUSH
78352: LD_VAR 0 7
78356: PUSH
78357: LD_INT 1
78359: ARRAY
78360: PUSH
78361: LD_VAR 0 7
78365: PUSH
78366: LD_INT 2
78368: ARRAY
78369: PUSH
78370: LD_INT 2
78372: PUSH
78373: EMPTY
78374: LIST
78375: LIST
78376: LIST
78377: LIST
78378: PPUSH
78379: CALL_OW 69
78383: PUSH
78384: LD_INT 0
78386: EQUAL
78387: IFFALSE 78440
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78389: LD_VAR 0 1
78393: PPUSH
78394: LD_VAR 0 7
78398: PUSH
78399: LD_INT 1
78401: ARRAY
78402: PPUSH
78403: LD_VAR 0 7
78407: PUSH
78408: LD_INT 2
78410: ARRAY
78411: PPUSH
78412: LD_VAR 0 3
78416: PPUSH
78417: CALL_OW 48
// result := IsPlaced ( unit ) ;
78421: LD_ADDR_VAR 0 4
78425: PUSH
78426: LD_VAR 0 1
78430: PPUSH
78431: CALL_OW 305
78435: ST_TO_ADDR
// exit ;
78436: POP
78437: POP
78438: GO 78444
// end ; end ;
78440: GO 78307
78442: POP
78443: POP
// end ;
78444: LD_VAR 0 4
78448: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78449: LD_INT 0
78451: PPUSH
78452: PPUSH
78453: PPUSH
// if not side or side > 8 then
78454: LD_VAR 0 1
78458: NOT
78459: IFTRUE 78471
78461: PUSH
78462: LD_VAR 0 1
78466: PUSH
78467: LD_INT 8
78469: GREATER
78470: OR
78471: IFFALSE 78475
// exit ;
78473: GO 78662
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78475: LD_ADDR_VAR 0 4
78479: PUSH
78480: LD_INT 22
78482: PUSH
78483: LD_VAR 0 1
78487: PUSH
78488: EMPTY
78489: LIST
78490: LIST
78491: PUSH
78492: LD_INT 21
78494: PUSH
78495: LD_INT 3
78497: PUSH
78498: EMPTY
78499: LIST
78500: LIST
78501: PUSH
78502: EMPTY
78503: LIST
78504: LIST
78505: PPUSH
78506: CALL_OW 69
78510: ST_TO_ADDR
// if not tmp then
78511: LD_VAR 0 4
78515: NOT
78516: IFFALSE 78520
// exit ;
78518: GO 78662
// enable_addtolog := true ;
78520: LD_ADDR_OWVAR 81
78524: PUSH
78525: LD_INT 1
78527: ST_TO_ADDR
// AddToLog ( [ ) ;
78528: LD_STRING [
78530: PPUSH
78531: CALL_OW 561
// for i in tmp do
78535: LD_ADDR_VAR 0 3
78539: PUSH
78540: LD_VAR 0 4
78544: PUSH
78545: FOR_IN
78546: IFFALSE 78653
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78548: LD_STRING [
78550: PUSH
78551: LD_VAR 0 3
78555: PPUSH
78556: CALL_OW 266
78560: STR
78561: PUSH
78562: LD_STRING , 
78564: STR
78565: PUSH
78566: LD_VAR 0 3
78570: PPUSH
78571: CALL_OW 250
78575: STR
78576: PUSH
78577: LD_STRING , 
78579: STR
78580: PUSH
78581: LD_VAR 0 3
78585: PPUSH
78586: CALL_OW 251
78590: STR
78591: PUSH
78592: LD_STRING , 
78594: STR
78595: PUSH
78596: LD_VAR 0 3
78600: PPUSH
78601: CALL_OW 254
78605: STR
78606: PUSH
78607: LD_STRING , 
78609: STR
78610: PUSH
78611: LD_VAR 0 3
78615: PPUSH
78616: LD_INT 1
78618: PPUSH
78619: CALL_OW 268
78623: STR
78624: PUSH
78625: LD_STRING , 
78627: STR
78628: PUSH
78629: LD_VAR 0 3
78633: PPUSH
78634: LD_INT 2
78636: PPUSH
78637: CALL_OW 268
78641: STR
78642: PUSH
78643: LD_STRING ],
78645: STR
78646: PPUSH
78647: CALL_OW 561
// end ;
78651: GO 78545
78653: POP
78654: POP
// AddToLog ( ]; ) ;
78655: LD_STRING ];
78657: PPUSH
78658: CALL_OW 561
// end ;
78662: LD_VAR 0 2
78666: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78667: LD_INT 0
78669: PPUSH
78670: PPUSH
78671: PPUSH
78672: PPUSH
78673: PPUSH
// if not area or not rate or not max then
78674: LD_VAR 0 1
78678: NOT
78679: IFTRUE 78688
78681: PUSH
78682: LD_VAR 0 2
78686: NOT
78687: OR
78688: IFTRUE 78697
78690: PUSH
78691: LD_VAR 0 4
78695: NOT
78696: OR
78697: IFFALSE 78701
// exit ;
78699: GO 78890
// while 1 do
78701: LD_INT 1
78703: IFFALSE 78890
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78705: LD_ADDR_VAR 0 9
78709: PUSH
78710: LD_VAR 0 1
78714: PPUSH
78715: LD_INT 1
78717: PPUSH
78718: CALL_OW 287
78722: PUSH
78723: LD_INT 10
78725: MUL
78726: ST_TO_ADDR
// r := rate / 10 ;
78727: LD_ADDR_VAR 0 7
78731: PUSH
78732: LD_VAR 0 2
78736: PUSH
78737: LD_INT 10
78739: DIVREAL
78740: ST_TO_ADDR
// time := 1 1$00 ;
78741: LD_ADDR_VAR 0 8
78745: PUSH
78746: LD_INT 2100
78748: ST_TO_ADDR
// if amount < min then
78749: LD_VAR 0 9
78753: PUSH
78754: LD_VAR 0 3
78758: LESS
78759: IFFALSE 78777
// r := r * 2 else
78761: LD_ADDR_VAR 0 7
78765: PUSH
78766: LD_VAR 0 7
78770: PUSH
78771: LD_INT 2
78773: MUL
78774: ST_TO_ADDR
78775: GO 78803
// if amount > max then
78777: LD_VAR 0 9
78781: PUSH
78782: LD_VAR 0 4
78786: GREATER
78787: IFFALSE 78803
// r := r / 2 ;
78789: LD_ADDR_VAR 0 7
78793: PUSH
78794: LD_VAR 0 7
78798: PUSH
78799: LD_INT 2
78801: DIVREAL
78802: ST_TO_ADDR
// time := time / r ;
78803: LD_ADDR_VAR 0 8
78807: PUSH
78808: LD_VAR 0 8
78812: PUSH
78813: LD_VAR 0 7
78817: DIVREAL
78818: ST_TO_ADDR
// if time < 0 then
78819: LD_VAR 0 8
78823: PUSH
78824: LD_INT 0
78826: LESS
78827: IFFALSE 78844
// time := time * - 1 ;
78829: LD_ADDR_VAR 0 8
78833: PUSH
78834: LD_VAR 0 8
78838: PUSH
78839: LD_INT 1
78841: NEG
78842: MUL
78843: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78844: LD_VAR 0 8
78848: PUSH
78849: LD_INT 35
78851: PPUSH
78852: LD_INT 875
78854: PPUSH
78855: CALL_OW 12
78859: PLUS
78860: PPUSH
78861: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78865: LD_INT 1
78867: PPUSH
78868: LD_INT 5
78870: PPUSH
78871: CALL_OW 12
78875: PPUSH
78876: LD_VAR 0 1
78880: PPUSH
78881: LD_INT 1
78883: PPUSH
78884: CALL_OW 55
// end ;
78888: GO 78701
// end ;
78890: LD_VAR 0 5
78894: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78895: LD_INT 0
78897: PPUSH
78898: PPUSH
78899: PPUSH
78900: PPUSH
78901: PPUSH
78902: PPUSH
78903: PPUSH
78904: PPUSH
// if not turrets or not factories then
78905: LD_VAR 0 1
78909: NOT
78910: IFTRUE 78919
78912: PUSH
78913: LD_VAR 0 2
78917: NOT
78918: OR
78919: IFFALSE 78923
// exit ;
78921: GO 79230
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78923: LD_ADDR_VAR 0 10
78927: PUSH
78928: LD_INT 5
78930: PUSH
78931: LD_INT 6
78933: PUSH
78934: EMPTY
78935: LIST
78936: LIST
78937: PUSH
78938: LD_INT 2
78940: PUSH
78941: LD_INT 4
78943: PUSH
78944: EMPTY
78945: LIST
78946: LIST
78947: PUSH
78948: LD_INT 3
78950: PUSH
78951: LD_INT 5
78953: PUSH
78954: EMPTY
78955: LIST
78956: LIST
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: LIST
78962: PUSH
78963: LD_INT 24
78965: PUSH
78966: LD_INT 25
78968: PUSH
78969: EMPTY
78970: LIST
78971: LIST
78972: PUSH
78973: LD_INT 23
78975: PUSH
78976: LD_INT 27
78978: PUSH
78979: EMPTY
78980: LIST
78981: LIST
78982: PUSH
78983: EMPTY
78984: LIST
78985: LIST
78986: PUSH
78987: LD_INT 42
78989: PUSH
78990: LD_INT 43
78992: PUSH
78993: EMPTY
78994: LIST
78995: LIST
78996: PUSH
78997: LD_INT 44
78999: PUSH
79000: LD_INT 46
79002: PUSH
79003: EMPTY
79004: LIST
79005: LIST
79006: PUSH
79007: LD_INT 45
79009: PUSH
79010: LD_INT 47
79012: PUSH
79013: EMPTY
79014: LIST
79015: LIST
79016: PUSH
79017: EMPTY
79018: LIST
79019: LIST
79020: LIST
79021: PUSH
79022: EMPTY
79023: LIST
79024: LIST
79025: LIST
79026: ST_TO_ADDR
// result := [ ] ;
79027: LD_ADDR_VAR 0 3
79031: PUSH
79032: EMPTY
79033: ST_TO_ADDR
// for i in turrets do
79034: LD_ADDR_VAR 0 4
79038: PUSH
79039: LD_VAR 0 1
79043: PUSH
79044: FOR_IN
79045: IFFALSE 79228
// begin nat := GetNation ( i ) ;
79047: LD_ADDR_VAR 0 7
79051: PUSH
79052: LD_VAR 0 4
79056: PPUSH
79057: CALL_OW 248
79061: ST_TO_ADDR
// weapon := 0 ;
79062: LD_ADDR_VAR 0 8
79066: PUSH
79067: LD_INT 0
79069: ST_TO_ADDR
// if not nat then
79070: LD_VAR 0 7
79074: NOT
79075: IFFALSE 79079
// continue ;
79077: GO 79044
// for j in list [ nat ] do
79079: LD_ADDR_VAR 0 5
79083: PUSH
79084: LD_VAR 0 10
79088: PUSH
79089: LD_VAR 0 7
79093: ARRAY
79094: PUSH
79095: FOR_IN
79096: IFFALSE 79137
// if GetBWeapon ( i ) = j [ 1 ] then
79098: LD_VAR 0 4
79102: PPUSH
79103: CALL_OW 269
79107: PUSH
79108: LD_VAR 0 5
79112: PUSH
79113: LD_INT 1
79115: ARRAY
79116: EQUAL
79117: IFFALSE 79135
// begin weapon := j [ 2 ] ;
79119: LD_ADDR_VAR 0 8
79123: PUSH
79124: LD_VAR 0 5
79128: PUSH
79129: LD_INT 2
79131: ARRAY
79132: ST_TO_ADDR
// break ;
79133: GO 79137
// end ;
79135: GO 79095
79137: POP
79138: POP
// if not weapon then
79139: LD_VAR 0 8
79143: NOT
79144: IFFALSE 79148
// continue ;
79146: GO 79044
// for k in factories do
79148: LD_ADDR_VAR 0 6
79152: PUSH
79153: LD_VAR 0 2
79157: PUSH
79158: FOR_IN
79159: IFFALSE 79224
// begin weapons := AvailableWeaponList ( k ) ;
79161: LD_ADDR_VAR 0 9
79165: PUSH
79166: LD_VAR 0 6
79170: PPUSH
79171: CALL_OW 478
79175: ST_TO_ADDR
// if not weapons then
79176: LD_VAR 0 9
79180: NOT
79181: IFFALSE 79185
// continue ;
79183: GO 79158
// if weapon in weapons then
79185: LD_VAR 0 8
79189: PUSH
79190: LD_VAR 0 9
79194: IN
79195: IFFALSE 79222
// begin result := [ i , weapon ] ;
79197: LD_ADDR_VAR 0 3
79201: PUSH
79202: LD_VAR 0 4
79206: PUSH
79207: LD_VAR 0 8
79211: PUSH
79212: EMPTY
79213: LIST
79214: LIST
79215: ST_TO_ADDR
// exit ;
79216: POP
79217: POP
79218: POP
79219: POP
79220: GO 79230
// end ; end ;
79222: GO 79158
79224: POP
79225: POP
// end ;
79226: GO 79044
79228: POP
79229: POP
// end ;
79230: LD_VAR 0 3
79234: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79235: LD_INT 0
79237: PPUSH
// if not side or side > 8 then
79238: LD_VAR 0 3
79242: NOT
79243: IFTRUE 79255
79245: PUSH
79246: LD_VAR 0 3
79250: PUSH
79251: LD_INT 8
79253: GREATER
79254: OR
79255: IFFALSE 79259
// exit ;
79257: GO 79318
// if not range then
79259: LD_VAR 0 4
79263: NOT
79264: IFFALSE 79275
// range := - 12 ;
79266: LD_ADDR_VAR 0 4
79270: PUSH
79271: LD_INT 12
79273: NEG
79274: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79275: LD_VAR 0 1
79279: PPUSH
79280: LD_VAR 0 2
79284: PPUSH
79285: LD_VAR 0 3
79289: PPUSH
79290: LD_VAR 0 4
79294: PPUSH
79295: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79299: LD_VAR 0 1
79303: PPUSH
79304: LD_VAR 0 2
79308: PPUSH
79309: LD_VAR 0 3
79313: PPUSH
79314: CALL_OW 331
// end ;
79318: LD_VAR 0 5
79322: RET
// export function Video ( mode ) ; begin
79323: LD_INT 0
79325: PPUSH
// ingame_video = mode ;
79326: LD_ADDR_OWVAR 52
79330: PUSH
79331: LD_VAR 0 1
79335: ST_TO_ADDR
// interface_hidden = mode ;
79336: LD_ADDR_OWVAR 54
79340: PUSH
79341: LD_VAR 0 1
79345: ST_TO_ADDR
// end ;
79346: LD_VAR 0 2
79350: RET
// export function Join ( array , element ) ; begin
79351: LD_INT 0
79353: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79354: LD_ADDR_VAR 0 3
79358: PUSH
79359: LD_VAR 0 1
79363: PPUSH
79364: LD_VAR 0 1
79368: PUSH
79369: LD_INT 1
79371: PLUS
79372: PPUSH
79373: LD_VAR 0 2
79377: PPUSH
79378: CALL_OW 1
79382: ST_TO_ADDR
// end ;
79383: LD_VAR 0 3
79387: RET
// export function JoinUnion ( array , element ) ; begin
79388: LD_INT 0
79390: PPUSH
// result := array union element ;
79391: LD_ADDR_VAR 0 3
79395: PUSH
79396: LD_VAR 0 1
79400: PUSH
79401: LD_VAR 0 2
79405: UNION
79406: ST_TO_ADDR
// end ;
79407: LD_VAR 0 3
79411: RET
// export function GetBehemoths ( side ) ; begin
79412: LD_INT 0
79414: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79415: LD_ADDR_VAR 0 2
79419: PUSH
79420: LD_INT 22
79422: PUSH
79423: LD_VAR 0 1
79427: PUSH
79428: EMPTY
79429: LIST
79430: LIST
79431: PUSH
79432: LD_INT 31
79434: PUSH
79435: LD_INT 25
79437: PUSH
79438: EMPTY
79439: LIST
79440: LIST
79441: PUSH
79442: EMPTY
79443: LIST
79444: LIST
79445: PPUSH
79446: CALL_OW 69
79450: ST_TO_ADDR
// end ;
79451: LD_VAR 0 2
79455: RET
// export function Shuffle ( array ) ; var i , index ; begin
79456: LD_INT 0
79458: PPUSH
79459: PPUSH
79460: PPUSH
// result := [ ] ;
79461: LD_ADDR_VAR 0 2
79465: PUSH
79466: EMPTY
79467: ST_TO_ADDR
// if not array then
79468: LD_VAR 0 1
79472: NOT
79473: IFFALSE 79477
// exit ;
79475: GO 79576
// Randomize ;
79477: CALL_OW 10
// for i = array downto 1 do
79481: LD_ADDR_VAR 0 3
79485: PUSH
79486: DOUBLE
79487: LD_VAR 0 1
79491: INC
79492: ST_TO_ADDR
79493: LD_INT 1
79495: PUSH
79496: FOR_DOWNTO
79497: IFFALSE 79574
// begin index := rand ( 1 , array ) ;
79499: LD_ADDR_VAR 0 4
79503: PUSH
79504: LD_INT 1
79506: PPUSH
79507: LD_VAR 0 1
79511: PPUSH
79512: CALL_OW 12
79516: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79517: LD_ADDR_VAR 0 2
79521: PUSH
79522: LD_VAR 0 2
79526: PPUSH
79527: LD_VAR 0 2
79531: PUSH
79532: LD_INT 1
79534: PLUS
79535: PPUSH
79536: LD_VAR 0 1
79540: PUSH
79541: LD_VAR 0 4
79545: ARRAY
79546: PPUSH
79547: CALL_OW 2
79551: ST_TO_ADDR
// array := Delete ( array , index ) ;
79552: LD_ADDR_VAR 0 1
79556: PUSH
79557: LD_VAR 0 1
79561: PPUSH
79562: LD_VAR 0 4
79566: PPUSH
79567: CALL_OW 3
79571: ST_TO_ADDR
// end ;
79572: GO 79496
79574: POP
79575: POP
// end ;
79576: LD_VAR 0 2
79580: RET
// export function GetBaseMaterials ( base ) ; begin
79581: LD_INT 0
79583: PPUSH
// result := [ 0 , 0 , 0 ] ;
79584: LD_ADDR_VAR 0 2
79588: PUSH
79589: LD_INT 0
79591: PUSH
79592: LD_INT 0
79594: PUSH
79595: LD_INT 0
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: LIST
79602: ST_TO_ADDR
// if not base then
79603: LD_VAR 0 1
79607: NOT
79608: IFFALSE 79612
// exit ;
79610: GO 79661
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79612: LD_ADDR_VAR 0 2
79616: PUSH
79617: LD_VAR 0 1
79621: PPUSH
79622: LD_INT 1
79624: PPUSH
79625: CALL_OW 275
79629: PUSH
79630: LD_VAR 0 1
79634: PPUSH
79635: LD_INT 2
79637: PPUSH
79638: CALL_OW 275
79642: PUSH
79643: LD_VAR 0 1
79647: PPUSH
79648: LD_INT 3
79650: PPUSH
79651: CALL_OW 275
79655: PUSH
79656: EMPTY
79657: LIST
79658: LIST
79659: LIST
79660: ST_TO_ADDR
// end ;
79661: LD_VAR 0 2
79665: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79666: LD_INT 0
79668: PPUSH
79669: PPUSH
// result := array ;
79670: LD_ADDR_VAR 0 3
79674: PUSH
79675: LD_VAR 0 1
79679: ST_TO_ADDR
// if size >= result then
79680: LD_VAR 0 2
79684: PUSH
79685: LD_VAR 0 3
79689: GREATEREQUAL
79690: IFFALSE 79694
// exit ;
79692: GO 79744
// if size then
79694: LD_VAR 0 2
79698: IFFALSE 79744
// for i := array downto size do
79700: LD_ADDR_VAR 0 4
79704: PUSH
79705: DOUBLE
79706: LD_VAR 0 1
79710: INC
79711: ST_TO_ADDR
79712: LD_VAR 0 2
79716: PUSH
79717: FOR_DOWNTO
79718: IFFALSE 79742
// result := Delete ( result , result ) ;
79720: LD_ADDR_VAR 0 3
79724: PUSH
79725: LD_VAR 0 3
79729: PPUSH
79730: LD_VAR 0 3
79734: PPUSH
79735: CALL_OW 3
79739: ST_TO_ADDR
79740: GO 79717
79742: POP
79743: POP
// end ;
79744: LD_VAR 0 3
79748: RET
// export function ComExit ( unit ) ; var tmp ; begin
79749: LD_INT 0
79751: PPUSH
79752: PPUSH
// if not IsInUnit ( unit ) then
79753: LD_VAR 0 1
79757: PPUSH
79758: CALL_OW 310
79762: NOT
79763: IFFALSE 79767
// exit ;
79765: GO 79827
// tmp := IsInUnit ( unit ) ;
79767: LD_ADDR_VAR 0 3
79771: PUSH
79772: LD_VAR 0 1
79776: PPUSH
79777: CALL_OW 310
79781: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79782: LD_VAR 0 3
79786: PPUSH
79787: CALL_OW 247
79791: PUSH
79792: LD_INT 2
79794: EQUAL
79795: IFFALSE 79808
// ComExitVehicle ( unit ) else
79797: LD_VAR 0 1
79801: PPUSH
79802: CALL_OW 121
79806: GO 79817
// ComExitBuilding ( unit ) ;
79808: LD_VAR 0 1
79812: PPUSH
79813: CALL_OW 122
// result := tmp ;
79817: LD_ADDR_VAR 0 2
79821: PUSH
79822: LD_VAR 0 3
79826: ST_TO_ADDR
// end ;
79827: LD_VAR 0 2
79831: RET
// export function ComExitAll ( units ) ; var i ; begin
79832: LD_INT 0
79834: PPUSH
79835: PPUSH
// if not units then
79836: LD_VAR 0 1
79840: NOT
79841: IFFALSE 79845
// exit ;
79843: GO 79871
// for i in units do
79845: LD_ADDR_VAR 0 3
79849: PUSH
79850: LD_VAR 0 1
79854: PUSH
79855: FOR_IN
79856: IFFALSE 79869
// ComExit ( i ) ;
79858: LD_VAR 0 3
79862: PPUSH
79863: CALL 79749 0 1
79867: GO 79855
79869: POP
79870: POP
// end ;
79871: LD_VAR 0 2
79875: RET
// export function ResetHc ; begin
79876: LD_INT 0
79878: PPUSH
// InitHc ;
79879: CALL_OW 19
// hc_importance := 0 ;
79883: LD_ADDR_OWVAR 32
79887: PUSH
79888: LD_INT 0
79890: ST_TO_ADDR
// end ;
79891: LD_VAR 0 1
79895: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79896: LD_INT 0
79898: PPUSH
79899: PPUSH
79900: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79901: LD_ADDR_VAR 0 6
79905: PUSH
79906: LD_VAR 0 1
79910: PUSH
79911: LD_VAR 0 3
79915: PLUS
79916: PUSH
79917: LD_INT 2
79919: DIV
79920: ST_TO_ADDR
// if _x < 0 then
79921: LD_VAR 0 6
79925: PUSH
79926: LD_INT 0
79928: LESS
79929: IFFALSE 79946
// _x := _x * - 1 ;
79931: LD_ADDR_VAR 0 6
79935: PUSH
79936: LD_VAR 0 6
79940: PUSH
79941: LD_INT 1
79943: NEG
79944: MUL
79945: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79946: LD_ADDR_VAR 0 7
79950: PUSH
79951: LD_VAR 0 2
79955: PUSH
79956: LD_VAR 0 4
79960: PLUS
79961: PUSH
79962: LD_INT 2
79964: DIV
79965: ST_TO_ADDR
// if _y < 0 then
79966: LD_VAR 0 7
79970: PUSH
79971: LD_INT 0
79973: LESS
79974: IFFALSE 79991
// _y := _y * - 1 ;
79976: LD_ADDR_VAR 0 7
79980: PUSH
79981: LD_VAR 0 7
79985: PUSH
79986: LD_INT 1
79988: NEG
79989: MUL
79990: ST_TO_ADDR
// result := [ _x , _y ] ;
79991: LD_ADDR_VAR 0 5
79995: PUSH
79996: LD_VAR 0 6
80000: PUSH
80001: LD_VAR 0 7
80005: PUSH
80006: EMPTY
80007: LIST
80008: LIST
80009: ST_TO_ADDR
// end ;
80010: LD_VAR 0 5
80014: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80015: LD_INT 0
80017: PPUSH
80018: PPUSH
80019: PPUSH
80020: PPUSH
// task := GetTaskList ( unit ) ;
80021: LD_ADDR_VAR 0 7
80025: PUSH
80026: LD_VAR 0 1
80030: PPUSH
80031: CALL_OW 437
80035: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80036: LD_VAR 0 7
80040: NOT
80041: IFFALSE 80060
80043: PUSH
80044: LD_VAR 0 1
80048: PPUSH
80049: LD_VAR 0 2
80053: PPUSH
80054: CALL_OW 308
80058: NOT
80059: AND
80060: IFFALSE 80064
// exit ;
80062: GO 80182
// if IsInArea ( unit , area ) then
80064: LD_VAR 0 1
80068: PPUSH
80069: LD_VAR 0 2
80073: PPUSH
80074: CALL_OW 308
80078: IFFALSE 80096
// begin ComMoveToArea ( unit , goAway ) ;
80080: LD_VAR 0 1
80084: PPUSH
80085: LD_VAR 0 3
80089: PPUSH
80090: CALL_OW 113
// exit ;
80094: GO 80182
// end ; if task [ 1 ] [ 1 ] <> M then
80096: LD_VAR 0 7
80100: PUSH
80101: LD_INT 1
80103: ARRAY
80104: PUSH
80105: LD_INT 1
80107: ARRAY
80108: PUSH
80109: LD_STRING M
80111: NONEQUAL
80112: IFFALSE 80116
// exit ;
80114: GO 80182
// x := task [ 1 ] [ 2 ] ;
80116: LD_ADDR_VAR 0 5
80120: PUSH
80121: LD_VAR 0 7
80125: PUSH
80126: LD_INT 1
80128: ARRAY
80129: PUSH
80130: LD_INT 2
80132: ARRAY
80133: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80134: LD_ADDR_VAR 0 6
80138: PUSH
80139: LD_VAR 0 7
80143: PUSH
80144: LD_INT 1
80146: ARRAY
80147: PUSH
80148: LD_INT 3
80150: ARRAY
80151: ST_TO_ADDR
// if InArea ( x , y , area ) then
80152: LD_VAR 0 5
80156: PPUSH
80157: LD_VAR 0 6
80161: PPUSH
80162: LD_VAR 0 2
80166: PPUSH
80167: CALL_OW 309
80171: IFFALSE 80182
// ComStop ( unit ) ;
80173: LD_VAR 0 1
80177: PPUSH
80178: CALL_OW 141
// end ;
80182: LD_VAR 0 4
80186: RET
// export function Abs ( value ) ; begin
80187: LD_INT 0
80189: PPUSH
// result := value ;
80190: LD_ADDR_VAR 0 2
80194: PUSH
80195: LD_VAR 0 1
80199: ST_TO_ADDR
// if value < 0 then
80200: LD_VAR 0 1
80204: PUSH
80205: LD_INT 0
80207: LESS
80208: IFFALSE 80225
// result := value * - 1 ;
80210: LD_ADDR_VAR 0 2
80214: PUSH
80215: LD_VAR 0 1
80219: PUSH
80220: LD_INT 1
80222: NEG
80223: MUL
80224: ST_TO_ADDR
// end ;
80225: LD_VAR 0 2
80229: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80230: LD_INT 0
80232: PPUSH
80233: PPUSH
80234: PPUSH
80235: PPUSH
80236: PPUSH
80237: PPUSH
80238: PPUSH
80239: PPUSH
// if not unit or not building then
80240: LD_VAR 0 1
80244: NOT
80245: IFTRUE 80254
80247: PUSH
80248: LD_VAR 0 2
80252: NOT
80253: OR
80254: IFFALSE 80258
// exit ;
80256: GO 80486
// x := GetX ( building ) ;
80258: LD_ADDR_VAR 0 4
80262: PUSH
80263: LD_VAR 0 2
80267: PPUSH
80268: CALL_OW 250
80272: ST_TO_ADDR
// y := GetY ( building ) ;
80273: LD_ADDR_VAR 0 6
80277: PUSH
80278: LD_VAR 0 2
80282: PPUSH
80283: CALL_OW 251
80287: ST_TO_ADDR
// d := GetDir ( building ) ;
80288: LD_ADDR_VAR 0 8
80292: PUSH
80293: LD_VAR 0 2
80297: PPUSH
80298: CALL_OW 254
80302: ST_TO_ADDR
// r := 4 ;
80303: LD_ADDR_VAR 0 9
80307: PUSH
80308: LD_INT 4
80310: ST_TO_ADDR
// for i := 1 to 5 do
80311: LD_ADDR_VAR 0 10
80315: PUSH
80316: DOUBLE
80317: LD_INT 1
80319: DEC
80320: ST_TO_ADDR
80321: LD_INT 5
80323: PUSH
80324: FOR_TO
80325: IFFALSE 80484
// begin _x := ShiftX ( x , d , r + i ) ;
80327: LD_ADDR_VAR 0 5
80331: PUSH
80332: LD_VAR 0 4
80336: PPUSH
80337: LD_VAR 0 8
80341: PPUSH
80342: LD_VAR 0 9
80346: PUSH
80347: LD_VAR 0 10
80351: PLUS
80352: PPUSH
80353: CALL_OW 272
80357: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80358: LD_ADDR_VAR 0 7
80362: PUSH
80363: LD_VAR 0 6
80367: PPUSH
80368: LD_VAR 0 8
80372: PPUSH
80373: LD_VAR 0 9
80377: PUSH
80378: LD_VAR 0 10
80382: PLUS
80383: PPUSH
80384: CALL_OW 273
80388: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80389: LD_VAR 0 5
80393: PPUSH
80394: LD_VAR 0 7
80398: PPUSH
80399: CALL_OW 488
80403: IFFALSE 80438
80405: PUSH
80406: LD_VAR 0 5
80410: PPUSH
80411: LD_VAR 0 7
80415: PPUSH
80416: CALL_OW 428
80420: PPUSH
80421: CALL_OW 247
80425: PUSH
80426: LD_INT 3
80428: PUSH
80429: LD_INT 2
80431: PUSH
80432: EMPTY
80433: LIST
80434: LIST
80435: IN
80436: NOT
80437: AND
80438: IFFALSE 80482
// begin ComMoveXY ( unit , _x , _y ) ;
80440: LD_VAR 0 1
80444: PPUSH
80445: LD_VAR 0 5
80449: PPUSH
80450: LD_VAR 0 7
80454: PPUSH
80455: CALL_OW 111
// result := [ _x , _y ] ;
80459: LD_ADDR_VAR 0 3
80463: PUSH
80464: LD_VAR 0 5
80468: PUSH
80469: LD_VAR 0 7
80473: PUSH
80474: EMPTY
80475: LIST
80476: LIST
80477: ST_TO_ADDR
// exit ;
80478: POP
80479: POP
80480: GO 80486
// end ; end ;
80482: GO 80324
80484: POP
80485: POP
// end ;
80486: LD_VAR 0 3
80490: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80491: LD_INT 0
80493: PPUSH
80494: PPUSH
80495: PPUSH
// result := 0 ;
80496: LD_ADDR_VAR 0 3
80500: PUSH
80501: LD_INT 0
80503: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80504: LD_VAR 0 1
80508: PUSH
80509: LD_INT 0
80511: LESS
80512: IFTRUE 80524
80514: PUSH
80515: LD_VAR 0 1
80519: PUSH
80520: LD_INT 8
80522: GREATER
80523: OR
80524: IFTRUE 80536
80526: PUSH
80527: LD_VAR 0 2
80531: PUSH
80532: LD_INT 0
80534: LESS
80535: OR
80536: IFTRUE 80548
80538: PUSH
80539: LD_VAR 0 2
80543: PUSH
80544: LD_INT 8
80546: GREATER
80547: OR
80548: IFFALSE 80552
// exit ;
80550: GO 80627
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80552: LD_ADDR_VAR 0 4
80556: PUSH
80557: LD_INT 22
80559: PUSH
80560: LD_VAR 0 2
80564: PUSH
80565: EMPTY
80566: LIST
80567: LIST
80568: PPUSH
80569: CALL_OW 69
80573: PUSH
80574: FOR_IN
80575: IFFALSE 80625
// begin un := UnitShoot ( i ) ;
80577: LD_ADDR_VAR 0 5
80581: PUSH
80582: LD_VAR 0 4
80586: PPUSH
80587: CALL_OW 504
80591: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80592: LD_VAR 0 5
80596: PPUSH
80597: CALL_OW 255
80601: PUSH
80602: LD_VAR 0 1
80606: EQUAL
80607: IFFALSE 80623
// begin result := un ;
80609: LD_ADDR_VAR 0 3
80613: PUSH
80614: LD_VAR 0 5
80618: ST_TO_ADDR
// exit ;
80619: POP
80620: POP
80621: GO 80627
// end ; end ;
80623: GO 80574
80625: POP
80626: POP
// end ;
80627: LD_VAR 0 3
80631: RET
// export function GetCargoBay ( units ) ; begin
80632: LD_INT 0
80634: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80635: LD_ADDR_VAR 0 2
80639: PUSH
80640: LD_VAR 0 1
80644: PPUSH
80645: LD_INT 2
80647: PUSH
80648: LD_INT 34
80650: PUSH
80651: LD_INT 12
80653: PUSH
80654: EMPTY
80655: LIST
80656: LIST
80657: PUSH
80658: LD_INT 34
80660: PUSH
80661: LD_INT 51
80663: PUSH
80664: EMPTY
80665: LIST
80666: LIST
80667: PUSH
80668: LD_INT 34
80670: PUSH
80671: LD_INT 32
80673: PUSH
80674: EMPTY
80675: LIST
80676: LIST
80677: PUSH
80678: LD_INT 34
80680: PUSH
80681: LD_INT 89
80683: PUSH
80684: EMPTY
80685: LIST
80686: LIST
80687: PUSH
80688: EMPTY
80689: LIST
80690: LIST
80691: LIST
80692: LIST
80693: LIST
80694: PPUSH
80695: CALL_OW 72
80699: ST_TO_ADDR
// end ;
80700: LD_VAR 0 2
80704: RET
// export function Negate ( value ) ; begin
80705: LD_INT 0
80707: PPUSH
// result := not value ;
80708: LD_ADDR_VAR 0 2
80712: PUSH
80713: LD_VAR 0 1
80717: NOT
80718: ST_TO_ADDR
// end ;
80719: LD_VAR 0 2
80723: RET
// export function Inc ( value ) ; begin
80724: LD_INT 0
80726: PPUSH
// result := value + 1 ;
80727: LD_ADDR_VAR 0 2
80731: PUSH
80732: LD_VAR 0 1
80736: PUSH
80737: LD_INT 1
80739: PLUS
80740: ST_TO_ADDR
// end ;
80741: LD_VAR 0 2
80745: RET
// export function Dec ( value ) ; begin
80746: LD_INT 0
80748: PPUSH
// result := value - 1 ;
80749: LD_ADDR_VAR 0 2
80753: PUSH
80754: LD_VAR 0 1
80758: PUSH
80759: LD_INT 1
80761: MINUS
80762: ST_TO_ADDR
// end ;
80763: LD_VAR 0 2
80767: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80768: LD_INT 0
80770: PPUSH
80771: PPUSH
80772: PPUSH
80773: PPUSH
80774: PPUSH
80775: PPUSH
80776: PPUSH
80777: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80778: LD_VAR 0 1
80782: PPUSH
80783: LD_VAR 0 2
80787: PPUSH
80788: CALL_OW 488
80792: NOT
80793: IFTRUE 80812
80795: PUSH
80796: LD_VAR 0 3
80800: PPUSH
80801: LD_VAR 0 4
80805: PPUSH
80806: CALL_OW 488
80810: NOT
80811: OR
80812: IFFALSE 80825
// begin result := - 1 ;
80814: LD_ADDR_VAR 0 5
80818: PUSH
80819: LD_INT 1
80821: NEG
80822: ST_TO_ADDR
// exit ;
80823: GO 81060
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80825: LD_ADDR_VAR 0 12
80829: PUSH
80830: LD_VAR 0 1
80834: PPUSH
80835: LD_VAR 0 2
80839: PPUSH
80840: LD_VAR 0 3
80844: PPUSH
80845: LD_VAR 0 4
80849: PPUSH
80850: CALL 79896 0 4
80854: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80855: LD_ADDR_VAR 0 11
80859: PUSH
80860: LD_VAR 0 1
80864: PPUSH
80865: LD_VAR 0 2
80869: PPUSH
80870: LD_VAR 0 12
80874: PUSH
80875: LD_INT 1
80877: ARRAY
80878: PPUSH
80879: LD_VAR 0 12
80883: PUSH
80884: LD_INT 2
80886: ARRAY
80887: PPUSH
80888: CALL_OW 298
80892: ST_TO_ADDR
// distance := 9999 ;
80893: LD_ADDR_VAR 0 10
80897: PUSH
80898: LD_INT 9999
80900: ST_TO_ADDR
// for i := 0 to 5 do
80901: LD_ADDR_VAR 0 6
80905: PUSH
80906: DOUBLE
80907: LD_INT 0
80909: DEC
80910: ST_TO_ADDR
80911: LD_INT 5
80913: PUSH
80914: FOR_TO
80915: IFFALSE 81058
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80917: LD_ADDR_VAR 0 7
80921: PUSH
80922: LD_VAR 0 1
80926: PPUSH
80927: LD_VAR 0 6
80931: PPUSH
80932: LD_VAR 0 11
80936: PPUSH
80937: CALL_OW 272
80941: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80942: LD_ADDR_VAR 0 8
80946: PUSH
80947: LD_VAR 0 2
80951: PPUSH
80952: LD_VAR 0 6
80956: PPUSH
80957: LD_VAR 0 11
80961: PPUSH
80962: CALL_OW 273
80966: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80967: LD_VAR 0 7
80971: PPUSH
80972: LD_VAR 0 8
80976: PPUSH
80977: CALL_OW 488
80981: NOT
80982: IFFALSE 80986
// continue ;
80984: GO 80914
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80986: LD_ADDR_VAR 0 9
80990: PUSH
80991: LD_VAR 0 12
80995: PUSH
80996: LD_INT 1
80998: ARRAY
80999: PPUSH
81000: LD_VAR 0 12
81004: PUSH
81005: LD_INT 2
81007: ARRAY
81008: PPUSH
81009: LD_VAR 0 7
81013: PPUSH
81014: LD_VAR 0 8
81018: PPUSH
81019: CALL_OW 298
81023: ST_TO_ADDR
// if tmp < distance then
81024: LD_VAR 0 9
81028: PUSH
81029: LD_VAR 0 10
81033: LESS
81034: IFFALSE 81056
// begin result := i ;
81036: LD_ADDR_VAR 0 5
81040: PUSH
81041: LD_VAR 0 6
81045: ST_TO_ADDR
// distance := tmp ;
81046: LD_ADDR_VAR 0 10
81050: PUSH
81051: LD_VAR 0 9
81055: ST_TO_ADDR
// end ; end ;
81056: GO 80914
81058: POP
81059: POP
// end ;
81060: LD_VAR 0 5
81064: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81065: LD_INT 0
81067: PPUSH
81068: PPUSH
// if not driver or not IsInUnit ( driver ) then
81069: LD_VAR 0 1
81073: NOT
81074: IFTRUE 81088
81076: PUSH
81077: LD_VAR 0 1
81081: PPUSH
81082: CALL_OW 310
81086: NOT
81087: OR
81088: IFFALSE 81092
// exit ;
81090: GO 81182
// vehicle := IsInUnit ( driver ) ;
81092: LD_ADDR_VAR 0 3
81096: PUSH
81097: LD_VAR 0 1
81101: PPUSH
81102: CALL_OW 310
81106: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81107: LD_VAR 0 1
81111: PPUSH
81112: LD_STRING \
81114: PUSH
81115: LD_INT 0
81117: PUSH
81118: LD_INT 0
81120: PUSH
81121: LD_INT 0
81123: PUSH
81124: LD_INT 0
81126: PUSH
81127: LD_INT 0
81129: PUSH
81130: LD_INT 0
81132: PUSH
81133: EMPTY
81134: LIST
81135: LIST
81136: LIST
81137: LIST
81138: LIST
81139: LIST
81140: LIST
81141: PUSH
81142: LD_STRING E
81144: PUSH
81145: LD_INT 0
81147: PUSH
81148: LD_INT 0
81150: PUSH
81151: LD_VAR 0 3
81155: PUSH
81156: LD_INT 0
81158: PUSH
81159: LD_INT 0
81161: PUSH
81162: LD_INT 0
81164: PUSH
81165: EMPTY
81166: LIST
81167: LIST
81168: LIST
81169: LIST
81170: LIST
81171: LIST
81172: LIST
81173: PUSH
81174: EMPTY
81175: LIST
81176: LIST
81177: PPUSH
81178: CALL_OW 446
// end ;
81182: LD_VAR 0 2
81186: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81187: LD_INT 0
81189: PPUSH
81190: PPUSH
// if not driver or not IsInUnit ( driver ) then
81191: LD_VAR 0 1
81195: NOT
81196: IFTRUE 81210
81198: PUSH
81199: LD_VAR 0 1
81203: PPUSH
81204: CALL_OW 310
81208: NOT
81209: OR
81210: IFFALSE 81214
// exit ;
81212: GO 81304
// vehicle := IsInUnit ( driver ) ;
81214: LD_ADDR_VAR 0 3
81218: PUSH
81219: LD_VAR 0 1
81223: PPUSH
81224: CALL_OW 310
81228: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81229: LD_VAR 0 1
81233: PPUSH
81234: LD_STRING \
81236: PUSH
81237: LD_INT 0
81239: PUSH
81240: LD_INT 0
81242: PUSH
81243: LD_INT 0
81245: PUSH
81246: LD_INT 0
81248: PUSH
81249: LD_INT 0
81251: PUSH
81252: LD_INT 0
81254: PUSH
81255: EMPTY
81256: LIST
81257: LIST
81258: LIST
81259: LIST
81260: LIST
81261: LIST
81262: LIST
81263: PUSH
81264: LD_STRING E
81266: PUSH
81267: LD_INT 0
81269: PUSH
81270: LD_INT 0
81272: PUSH
81273: LD_VAR 0 3
81277: PUSH
81278: LD_INT 0
81280: PUSH
81281: LD_INT 0
81283: PUSH
81284: LD_INT 0
81286: PUSH
81287: EMPTY
81288: LIST
81289: LIST
81290: LIST
81291: LIST
81292: LIST
81293: LIST
81294: LIST
81295: PUSH
81296: EMPTY
81297: LIST
81298: LIST
81299: PPUSH
81300: CALL_OW 447
// end ;
81304: LD_VAR 0 2
81308: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81309: LD_INT 0
81311: PPUSH
81312: PPUSH
81313: PPUSH
// tmp := [ ] ;
81314: LD_ADDR_VAR 0 5
81318: PUSH
81319: EMPTY
81320: ST_TO_ADDR
// for i in units do
81321: LD_ADDR_VAR 0 4
81325: PUSH
81326: LD_VAR 0 1
81330: PUSH
81331: FOR_IN
81332: IFFALSE 81370
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81334: LD_ADDR_VAR 0 5
81338: PUSH
81339: LD_VAR 0 5
81343: PPUSH
81344: LD_VAR 0 5
81348: PUSH
81349: LD_INT 1
81351: PLUS
81352: PPUSH
81353: LD_VAR 0 4
81357: PPUSH
81358: CALL_OW 256
81362: PPUSH
81363: CALL_OW 2
81367: ST_TO_ADDR
81368: GO 81331
81370: POP
81371: POP
// if not tmp then
81372: LD_VAR 0 5
81376: NOT
81377: IFFALSE 81381
// exit ;
81379: GO 81429
// if asc then
81381: LD_VAR 0 2
81385: IFFALSE 81409
// result := SortListByListAsc ( units , tmp ) else
81387: LD_ADDR_VAR 0 3
81391: PUSH
81392: LD_VAR 0 1
81396: PPUSH
81397: LD_VAR 0 5
81401: PPUSH
81402: CALL_OW 76
81406: ST_TO_ADDR
81407: GO 81429
// result := SortListByListDesc ( units , tmp ) ;
81409: LD_ADDR_VAR 0 3
81413: PUSH
81414: LD_VAR 0 1
81418: PPUSH
81419: LD_VAR 0 5
81423: PPUSH
81424: CALL_OW 77
81428: ST_TO_ADDR
// end ;
81429: LD_VAR 0 3
81433: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81434: LD_INT 0
81436: PPUSH
81437: PPUSH
// task := GetTaskList ( mech ) ;
81438: LD_ADDR_VAR 0 4
81442: PUSH
81443: LD_VAR 0 1
81447: PPUSH
81448: CALL_OW 437
81452: ST_TO_ADDR
// if not task then
81453: LD_VAR 0 4
81457: NOT
81458: IFFALSE 81462
// exit ;
81460: GO 81506
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81462: LD_ADDR_VAR 0 3
81466: PUSH
81467: LD_VAR 0 4
81471: PUSH
81472: LD_INT 1
81474: ARRAY
81475: PUSH
81476: LD_INT 1
81478: ARRAY
81479: PUSH
81480: LD_STRING r
81482: EQUAL
81483: IFFALSE 81505
81485: PUSH
81486: LD_VAR 0 4
81490: PUSH
81491: LD_INT 1
81493: ARRAY
81494: PUSH
81495: LD_INT 4
81497: ARRAY
81498: PUSH
81499: LD_VAR 0 2
81503: EQUAL
81504: AND
81505: ST_TO_ADDR
// end ;
81506: LD_VAR 0 3
81510: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81511: LD_INT 0
81513: PPUSH
// SetDir ( unit , d ) ;
81514: LD_VAR 0 1
81518: PPUSH
81519: LD_VAR 0 4
81523: PPUSH
81524: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
81528: LD_ADDR_VAR 0 6
81532: PUSH
81533: LD_VAR 0 1
81537: PPUSH
81538: LD_VAR 0 2
81542: PPUSH
81543: LD_VAR 0 3
81547: PPUSH
81548: LD_VAR 0 5
81552: PPUSH
81553: CALL_OW 48
81557: ST_TO_ADDR
// end ;
81558: LD_VAR 0 6
81562: RET
// export function ToNaturalNumber ( number ) ; begin
81563: LD_INT 0
81565: PPUSH
// result := number div 1 ;
81566: LD_ADDR_VAR 0 2
81570: PUSH
81571: LD_VAR 0 1
81575: PUSH
81576: LD_INT 1
81578: DIV
81579: ST_TO_ADDR
// if number < 0 then
81580: LD_VAR 0 1
81584: PUSH
81585: LD_INT 0
81587: LESS
81588: IFFALSE 81598
// result := 0 ;
81590: LD_ADDR_VAR 0 2
81594: PUSH
81595: LD_INT 0
81597: ST_TO_ADDR
// end ;
81598: LD_VAR 0 2
81602: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
81603: LD_INT 0
81605: PPUSH
81606: PPUSH
81607: PPUSH
// if not buildings then
81608: LD_VAR 0 1
81612: NOT
81613: IFFALSE 81617
// exit ;
81615: GO 81732
// tmp := [ ] ;
81617: LD_ADDR_VAR 0 5
81621: PUSH
81622: EMPTY
81623: ST_TO_ADDR
// for b in buildings do
81624: LD_ADDR_VAR 0 4
81628: PUSH
81629: LD_VAR 0 1
81633: PUSH
81634: FOR_IN
81635: IFFALSE 81673
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
81637: LD_ADDR_VAR 0 5
81641: PUSH
81642: LD_VAR 0 5
81646: PPUSH
81647: LD_VAR 0 5
81651: PUSH
81652: LD_INT 1
81654: PLUS
81655: PPUSH
81656: LD_VAR 0 4
81660: PPUSH
81661: CALL_OW 266
81665: PPUSH
81666: CALL_OW 1
81670: ST_TO_ADDR
81671: GO 81634
81673: POP
81674: POP
// if not tmp then
81675: LD_VAR 0 5
81679: NOT
81680: IFFALSE 81684
// exit ;
81682: GO 81732
// if asc then
81684: LD_VAR 0 2
81688: IFFALSE 81712
// result := SortListByListAsc ( buildings , tmp ) else
81690: LD_ADDR_VAR 0 3
81694: PUSH
81695: LD_VAR 0 1
81699: PPUSH
81700: LD_VAR 0 5
81704: PPUSH
81705: CALL_OW 76
81709: ST_TO_ADDR
81710: GO 81732
// result := SortListByListDesc ( buildings , tmp ) ;
81712: LD_ADDR_VAR 0 3
81716: PUSH
81717: LD_VAR 0 1
81721: PPUSH
81722: LD_VAR 0 5
81726: PPUSH
81727: CALL_OW 77
81731: ST_TO_ADDR
// end ;
81732: LD_VAR 0 3
81736: RET
// export function SortByClass ( units , class ) ; var un ; begin
81737: LD_INT 0
81739: PPUSH
81740: PPUSH
// if not units or not class then
81741: LD_VAR 0 1
81745: NOT
81746: IFTRUE 81755
81748: PUSH
81749: LD_VAR 0 2
81753: NOT
81754: OR
81755: IFFALSE 81759
// exit ;
81757: GO 81854
// result := [ ] ;
81759: LD_ADDR_VAR 0 3
81763: PUSH
81764: EMPTY
81765: ST_TO_ADDR
// for un in units do
81766: LD_ADDR_VAR 0 4
81770: PUSH
81771: LD_VAR 0 1
81775: PUSH
81776: FOR_IN
81777: IFFALSE 81852
// if GetClass ( un ) = class then
81779: LD_VAR 0 4
81783: PPUSH
81784: CALL_OW 257
81788: PUSH
81789: LD_VAR 0 2
81793: EQUAL
81794: IFFALSE 81821
// result := Insert ( result , 1 , un ) else
81796: LD_ADDR_VAR 0 3
81800: PUSH
81801: LD_VAR 0 3
81805: PPUSH
81806: LD_INT 1
81808: PPUSH
81809: LD_VAR 0 4
81813: PPUSH
81814: CALL_OW 2
81818: ST_TO_ADDR
81819: GO 81850
// result := Replace ( result , result + 1 , un ) ;
81821: LD_ADDR_VAR 0 3
81825: PUSH
81826: LD_VAR 0 3
81830: PPUSH
81831: LD_VAR 0 3
81835: PUSH
81836: LD_INT 1
81838: PLUS
81839: PPUSH
81840: LD_VAR 0 4
81844: PPUSH
81845: CALL_OW 1
81849: ST_TO_ADDR
81850: GO 81776
81852: POP
81853: POP
// end ;
81854: LD_VAR 0 3
81858: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81859: LD_INT 0
81861: PPUSH
81862: PPUSH
81863: PPUSH
81864: PPUSH
81865: PPUSH
81866: PPUSH
81867: PPUSH
// result := [ ] ;
81868: LD_ADDR_VAR 0 4
81872: PUSH
81873: EMPTY
81874: ST_TO_ADDR
// if x - r < 0 then
81875: LD_VAR 0 1
81879: PUSH
81880: LD_VAR 0 3
81884: MINUS
81885: PUSH
81886: LD_INT 0
81888: LESS
81889: IFFALSE 81901
// min_x := 0 else
81891: LD_ADDR_VAR 0 8
81895: PUSH
81896: LD_INT 0
81898: ST_TO_ADDR
81899: GO 81917
// min_x := x - r ;
81901: LD_ADDR_VAR 0 8
81905: PUSH
81906: LD_VAR 0 1
81910: PUSH
81911: LD_VAR 0 3
81915: MINUS
81916: ST_TO_ADDR
// if y - r < 0 then
81917: LD_VAR 0 2
81921: PUSH
81922: LD_VAR 0 3
81926: MINUS
81927: PUSH
81928: LD_INT 0
81930: LESS
81931: IFFALSE 81943
// min_y := 0 else
81933: LD_ADDR_VAR 0 7
81937: PUSH
81938: LD_INT 0
81940: ST_TO_ADDR
81941: GO 81959
// min_y := y - r ;
81943: LD_ADDR_VAR 0 7
81947: PUSH
81948: LD_VAR 0 2
81952: PUSH
81953: LD_VAR 0 3
81957: MINUS
81958: ST_TO_ADDR
// max_x := x + r ;
81959: LD_ADDR_VAR 0 9
81963: PUSH
81964: LD_VAR 0 1
81968: PUSH
81969: LD_VAR 0 3
81973: PLUS
81974: ST_TO_ADDR
// max_y := y + r ;
81975: LD_ADDR_VAR 0 10
81979: PUSH
81980: LD_VAR 0 2
81984: PUSH
81985: LD_VAR 0 3
81989: PLUS
81990: ST_TO_ADDR
// for _x = min_x to max_x do
81991: LD_ADDR_VAR 0 5
81995: PUSH
81996: DOUBLE
81997: LD_VAR 0 8
82001: DEC
82002: ST_TO_ADDR
82003: LD_VAR 0 9
82007: PUSH
82008: FOR_TO
82009: IFFALSE 82110
// for _y = min_y to max_y do
82011: LD_ADDR_VAR 0 6
82015: PUSH
82016: DOUBLE
82017: LD_VAR 0 7
82021: DEC
82022: ST_TO_ADDR
82023: LD_VAR 0 10
82027: PUSH
82028: FOR_TO
82029: IFFALSE 82106
// begin if not ValidHex ( _x , _y ) then
82031: LD_VAR 0 5
82035: PPUSH
82036: LD_VAR 0 6
82040: PPUSH
82041: CALL_OW 488
82045: NOT
82046: IFFALSE 82050
// continue ;
82048: GO 82028
// if GetResourceTypeXY ( _x , _y ) then
82050: LD_VAR 0 5
82054: PPUSH
82055: LD_VAR 0 6
82059: PPUSH
82060: CALL_OW 283
82064: IFFALSE 82104
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82066: LD_ADDR_VAR 0 4
82070: PUSH
82071: LD_VAR 0 4
82075: PPUSH
82076: LD_VAR 0 4
82080: PUSH
82081: LD_INT 1
82083: PLUS
82084: PPUSH
82085: LD_VAR 0 5
82089: PUSH
82090: LD_VAR 0 6
82094: PUSH
82095: EMPTY
82096: LIST
82097: LIST
82098: PPUSH
82099: CALL_OW 1
82103: ST_TO_ADDR
// end ;
82104: GO 82028
82106: POP
82107: POP
82108: GO 82008
82110: POP
82111: POP
// end ;
82112: LD_VAR 0 4
82116: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82117: LD_INT 0
82119: PPUSH
82120: PPUSH
82121: PPUSH
82122: PPUSH
82123: PPUSH
82124: PPUSH
82125: PPUSH
82126: PPUSH
// if not units then
82127: LD_VAR 0 1
82131: NOT
82132: IFFALSE 82136
// exit ;
82134: GO 82668
// result := UnitFilter ( units , [ f_ok ] ) ;
82136: LD_ADDR_VAR 0 3
82140: PUSH
82141: LD_VAR 0 1
82145: PPUSH
82146: LD_INT 50
82148: PUSH
82149: EMPTY
82150: LIST
82151: PPUSH
82152: CALL_OW 72
82156: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82157: LD_ADDR_VAR 0 8
82161: PUSH
82162: LD_VAR 0 1
82166: PUSH
82167: LD_INT 1
82169: ARRAY
82170: PPUSH
82171: CALL_OW 255
82175: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82176: LD_ADDR_VAR 0 10
82180: PUSH
82181: LD_INT 29
82183: PUSH
82184: LD_INT 91
82186: PUSH
82187: LD_INT 49
82189: PUSH
82190: EMPTY
82191: LIST
82192: LIST
82193: LIST
82194: ST_TO_ADDR
// if not result then
82195: LD_VAR 0 3
82199: NOT
82200: IFFALSE 82204
// exit ;
82202: GO 82668
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82204: LD_ADDR_VAR 0 5
82208: PUSH
82209: LD_INT 81
82211: PUSH
82212: LD_VAR 0 8
82216: PUSH
82217: EMPTY
82218: LIST
82219: LIST
82220: PPUSH
82221: CALL_OW 69
82225: ST_TO_ADDR
// for i in result do
82226: LD_ADDR_VAR 0 4
82230: PUSH
82231: LD_VAR 0 3
82235: PUSH
82236: FOR_IN
82237: IFFALSE 82666
// begin tag := GetTag ( i ) + 1 ;
82239: LD_ADDR_VAR 0 9
82243: PUSH
82244: LD_VAR 0 4
82248: PPUSH
82249: CALL_OW 110
82253: PUSH
82254: LD_INT 1
82256: PLUS
82257: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
82258: LD_ADDR_VAR 0 7
82262: PUSH
82263: LD_VAR 0 4
82267: PPUSH
82268: CALL_OW 250
82272: PPUSH
82273: LD_VAR 0 4
82277: PPUSH
82278: CALL_OW 251
82282: PPUSH
82283: LD_INT 4
82285: PPUSH
82286: CALL 81859 0 3
82290: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
82291: LD_VAR 0 4
82295: PPUSH
82296: CALL_OW 247
82300: PUSH
82301: LD_INT 2
82303: EQUAL
82304: IFFALSE 82316
82306: PUSH
82307: LD_VAR 0 7
82311: PUSH
82312: LD_INT 2
82314: GREATER
82315: AND
82316: IFFALSE 82336
82318: PUSH
82319: LD_VAR 0 4
82323: PPUSH
82324: CALL_OW 264
82328: PUSH
82329: LD_VAR 0 10
82333: IN
82334: NOT
82335: AND
82336: IFFALSE 82375
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82338: LD_VAR 0 4
82342: PPUSH
82343: LD_VAR 0 7
82347: PUSH
82348: LD_INT 1
82350: ARRAY
82351: PUSH
82352: LD_INT 1
82354: ARRAY
82355: PPUSH
82356: LD_VAR 0 7
82360: PUSH
82361: LD_INT 1
82363: ARRAY
82364: PUSH
82365: LD_INT 2
82367: ARRAY
82368: PPUSH
82369: CALL_OW 116
82373: GO 82664
// if path > tag then
82375: LD_VAR 0 2
82379: PUSH
82380: LD_VAR 0 9
82384: GREATER
82385: IFFALSE 82593
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82387: LD_ADDR_VAR 0 6
82391: PUSH
82392: LD_VAR 0 5
82396: PPUSH
82397: LD_INT 91
82399: PUSH
82400: LD_VAR 0 4
82404: PUSH
82405: LD_INT 8
82407: PUSH
82408: EMPTY
82409: LIST
82410: LIST
82411: LIST
82412: PPUSH
82413: CALL_OW 72
82417: ST_TO_ADDR
// if nearEnemy then
82418: LD_VAR 0 6
82422: IFFALSE 82491
// begin if GetWeapon ( i ) = ru_time_lapser then
82424: LD_VAR 0 4
82428: PPUSH
82429: CALL_OW 264
82433: PUSH
82434: LD_INT 49
82436: EQUAL
82437: IFFALSE 82465
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82439: LD_VAR 0 4
82443: PPUSH
82444: LD_VAR 0 6
82448: PPUSH
82449: LD_VAR 0 4
82453: PPUSH
82454: CALL_OW 74
82458: PPUSH
82459: CALL_OW 112
82463: GO 82489
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82465: LD_VAR 0 4
82469: PPUSH
82470: LD_VAR 0 6
82474: PPUSH
82475: LD_VAR 0 4
82479: PPUSH
82480: CALL_OW 74
82484: PPUSH
82485: CALL 83749 0 2
// end else
82489: GO 82591
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82491: LD_VAR 0 4
82495: PPUSH
82496: LD_VAR 0 2
82500: PUSH
82501: LD_VAR 0 9
82505: ARRAY
82506: PUSH
82507: LD_INT 1
82509: ARRAY
82510: PPUSH
82511: LD_VAR 0 2
82515: PUSH
82516: LD_VAR 0 9
82520: ARRAY
82521: PUSH
82522: LD_INT 2
82524: ARRAY
82525: PPUSH
82526: CALL_OW 297
82530: PUSH
82531: LD_INT 6
82533: GREATER
82534: IFFALSE 82577
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82536: LD_VAR 0 4
82540: PPUSH
82541: LD_VAR 0 2
82545: PUSH
82546: LD_VAR 0 9
82550: ARRAY
82551: PUSH
82552: LD_INT 1
82554: ARRAY
82555: PPUSH
82556: LD_VAR 0 2
82560: PUSH
82561: LD_VAR 0 9
82565: ARRAY
82566: PUSH
82567: LD_INT 2
82569: ARRAY
82570: PPUSH
82571: CALL_OW 114
82575: GO 82591
// SetTag ( i , tag ) ;
82577: LD_VAR 0 4
82581: PPUSH
82582: LD_VAR 0 9
82586: PPUSH
82587: CALL_OW 109
// end else
82591: GO 82664
// if enemy then
82593: LD_VAR 0 5
82597: IFFALSE 82664
// begin if GetWeapon ( i ) = ru_time_lapser then
82599: LD_VAR 0 4
82603: PPUSH
82604: CALL_OW 264
82608: PUSH
82609: LD_INT 49
82611: EQUAL
82612: IFFALSE 82640
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82614: LD_VAR 0 4
82618: PPUSH
82619: LD_VAR 0 5
82623: PPUSH
82624: LD_VAR 0 4
82628: PPUSH
82629: CALL_OW 74
82633: PPUSH
82634: CALL_OW 112
82638: GO 82664
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82640: LD_VAR 0 4
82644: PPUSH
82645: LD_VAR 0 5
82649: PPUSH
82650: LD_VAR 0 4
82654: PPUSH
82655: CALL_OW 74
82659: PPUSH
82660: CALL 83749 0 2
// end ; end ;
82664: GO 82236
82666: POP
82667: POP
// end ;
82668: LD_VAR 0 3
82672: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82673: LD_INT 0
82675: PPUSH
82676: PPUSH
82677: PPUSH
// if not unit or IsInUnit ( unit ) then
82678: LD_VAR 0 1
82682: NOT
82683: IFTRUE 82696
82685: PUSH
82686: LD_VAR 0 1
82690: PPUSH
82691: CALL_OW 310
82695: OR
82696: IFFALSE 82700
// exit ;
82698: GO 82791
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82700: LD_ADDR_VAR 0 4
82704: PUSH
82705: LD_VAR 0 1
82709: PPUSH
82710: CALL_OW 250
82714: PPUSH
82715: LD_VAR 0 2
82719: PPUSH
82720: LD_INT 1
82722: PPUSH
82723: CALL_OW 272
82727: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82728: LD_ADDR_VAR 0 5
82732: PUSH
82733: LD_VAR 0 1
82737: PPUSH
82738: CALL_OW 251
82742: PPUSH
82743: LD_VAR 0 2
82747: PPUSH
82748: LD_INT 1
82750: PPUSH
82751: CALL_OW 273
82755: ST_TO_ADDR
// if ValidHex ( x , y ) then
82756: LD_VAR 0 4
82760: PPUSH
82761: LD_VAR 0 5
82765: PPUSH
82766: CALL_OW 488
82770: IFFALSE 82791
// ComTurnXY ( unit , x , y ) ;
82772: LD_VAR 0 1
82776: PPUSH
82777: LD_VAR 0 4
82781: PPUSH
82782: LD_VAR 0 5
82786: PPUSH
82787: CALL_OW 118
// end ;
82791: LD_VAR 0 3
82795: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82796: LD_INT 0
82798: PPUSH
82799: PPUSH
// result := false ;
82800: LD_ADDR_VAR 0 3
82804: PUSH
82805: LD_INT 0
82807: ST_TO_ADDR
// if not units then
82808: LD_VAR 0 2
82812: NOT
82813: IFFALSE 82817
// exit ;
82815: GO 82862
// for i in units do
82817: LD_ADDR_VAR 0 4
82821: PUSH
82822: LD_VAR 0 2
82826: PUSH
82827: FOR_IN
82828: IFFALSE 82860
// if See ( side , i ) then
82830: LD_VAR 0 1
82834: PPUSH
82835: LD_VAR 0 4
82839: PPUSH
82840: CALL_OW 292
82844: IFFALSE 82858
// begin result := true ;
82846: LD_ADDR_VAR 0 3
82850: PUSH
82851: LD_INT 1
82853: ST_TO_ADDR
// exit ;
82854: POP
82855: POP
82856: GO 82862
// end ;
82858: GO 82827
82860: POP
82861: POP
// end ;
82862: LD_VAR 0 3
82866: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82867: LD_INT 0
82869: PPUSH
82870: PPUSH
82871: PPUSH
82872: PPUSH
// if not unit or not points then
82873: LD_VAR 0 1
82877: NOT
82878: IFTRUE 82887
82880: PUSH
82881: LD_VAR 0 2
82885: NOT
82886: OR
82887: IFFALSE 82891
// exit ;
82889: GO 82981
// dist := 99999 ;
82891: LD_ADDR_VAR 0 5
82895: PUSH
82896: LD_INT 99999
82898: ST_TO_ADDR
// for i in points do
82899: LD_ADDR_VAR 0 4
82903: PUSH
82904: LD_VAR 0 2
82908: PUSH
82909: FOR_IN
82910: IFFALSE 82979
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82912: LD_ADDR_VAR 0 6
82916: PUSH
82917: LD_VAR 0 1
82921: PPUSH
82922: LD_VAR 0 4
82926: PUSH
82927: LD_INT 1
82929: ARRAY
82930: PPUSH
82931: LD_VAR 0 4
82935: PUSH
82936: LD_INT 2
82938: ARRAY
82939: PPUSH
82940: CALL_OW 297
82944: ST_TO_ADDR
// if tmpDist < dist then
82945: LD_VAR 0 6
82949: PUSH
82950: LD_VAR 0 5
82954: LESS
82955: IFFALSE 82977
// begin result := i ;
82957: LD_ADDR_VAR 0 3
82961: PUSH
82962: LD_VAR 0 4
82966: ST_TO_ADDR
// dist := tmpDist ;
82967: LD_ADDR_VAR 0 5
82971: PUSH
82972: LD_VAR 0 6
82976: ST_TO_ADDR
// end ; end ;
82977: GO 82909
82979: POP
82980: POP
// end ;
82981: LD_VAR 0 3
82985: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82986: LD_INT 0
82988: PPUSH
// uc_side := side ;
82989: LD_ADDR_OWVAR 20
82993: PUSH
82994: LD_VAR 0 1
82998: ST_TO_ADDR
// uc_nation := 3 ;
82999: LD_ADDR_OWVAR 21
83003: PUSH
83004: LD_INT 3
83006: ST_TO_ADDR
// vc_chassis := 25 ;
83007: LD_ADDR_OWVAR 37
83011: PUSH
83012: LD_INT 25
83014: ST_TO_ADDR
// vc_engine := engine_siberite ;
83015: LD_ADDR_OWVAR 39
83019: PUSH
83020: LD_INT 3
83022: ST_TO_ADDR
// vc_control := control_computer ;
83023: LD_ADDR_OWVAR 38
83027: PUSH
83028: LD_INT 3
83030: ST_TO_ADDR
// vc_weapon := 59 ;
83031: LD_ADDR_OWVAR 40
83035: PUSH
83036: LD_INT 59
83038: ST_TO_ADDR
// result := CreateVehicle ;
83039: LD_ADDR_VAR 0 5
83043: PUSH
83044: CALL_OW 45
83048: ST_TO_ADDR
// SetDir ( result , d ) ;
83049: LD_VAR 0 5
83053: PPUSH
83054: LD_VAR 0 4
83058: PPUSH
83059: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83063: LD_VAR 0 5
83067: PPUSH
83068: LD_VAR 0 2
83072: PPUSH
83073: LD_VAR 0 3
83077: PPUSH
83078: LD_INT 0
83080: PPUSH
83081: CALL_OW 48
// end ;
83085: LD_VAR 0 5
83089: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83090: LD_INT 0
83092: PPUSH
83093: PPUSH
83094: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83095: LD_ADDR_VAR 0 2
83099: PUSH
83100: LD_INT 0
83102: PUSH
83103: LD_INT 0
83105: PUSH
83106: LD_INT 0
83108: PUSH
83109: LD_INT 0
83111: PUSH
83112: EMPTY
83113: LIST
83114: LIST
83115: LIST
83116: LIST
83117: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83118: LD_VAR 0 1
83122: NOT
83123: IFTRUE 83156
83125: PUSH
83126: LD_VAR 0 1
83130: PPUSH
83131: CALL_OW 264
83135: PUSH
83136: LD_INT 12
83138: PUSH
83139: LD_INT 51
83141: PUSH
83142: LD_INT 32
83144: PUSH
83145: LD_INT 89
83147: PUSH
83148: EMPTY
83149: LIST
83150: LIST
83151: LIST
83152: LIST
83153: IN
83154: NOT
83155: OR
83156: IFFALSE 83160
// exit ;
83158: GO 83258
// for i := 1 to 3 do
83160: LD_ADDR_VAR 0 3
83164: PUSH
83165: DOUBLE
83166: LD_INT 1
83168: DEC
83169: ST_TO_ADDR
83170: LD_INT 3
83172: PUSH
83173: FOR_TO
83174: IFFALSE 83256
// begin tmp := GetCargo ( cargo , i ) ;
83176: LD_ADDR_VAR 0 4
83180: PUSH
83181: LD_VAR 0 1
83185: PPUSH
83186: LD_VAR 0 3
83190: PPUSH
83191: CALL_OW 289
83195: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83196: LD_ADDR_VAR 0 2
83200: PUSH
83201: LD_VAR 0 2
83205: PPUSH
83206: LD_VAR 0 3
83210: PPUSH
83211: LD_VAR 0 4
83215: PPUSH
83216: CALL_OW 1
83220: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83221: LD_ADDR_VAR 0 2
83225: PUSH
83226: LD_VAR 0 2
83230: PPUSH
83231: LD_INT 4
83233: PPUSH
83234: LD_VAR 0 2
83238: PUSH
83239: LD_INT 4
83241: ARRAY
83242: PUSH
83243: LD_VAR 0 4
83247: PLUS
83248: PPUSH
83249: CALL_OW 1
83253: ST_TO_ADDR
// end ;
83254: GO 83173
83256: POP
83257: POP
// end ;
83258: LD_VAR 0 2
83262: RET
// export function Length ( array ) ; begin
83263: LD_INT 0
83265: PPUSH
// result := array + 0 ;
83266: LD_ADDR_VAR 0 2
83270: PUSH
83271: LD_VAR 0 1
83275: PUSH
83276: LD_INT 0
83278: PLUS
83279: ST_TO_ADDR
// end ;
83280: LD_VAR 0 2
83284: RET
// export function PrepareArray ( array ) ; begin
83285: LD_INT 0
83287: PPUSH
// result := array diff 0 ;
83288: LD_ADDR_VAR 0 2
83292: PUSH
83293: LD_VAR 0 1
83297: PUSH
83298: LD_INT 0
83300: DIFF
83301: ST_TO_ADDR
// if not result [ 1 ] then
83302: LD_VAR 0 2
83306: PUSH
83307: LD_INT 1
83309: ARRAY
83310: NOT
83311: IFFALSE 83331
// result := Delete ( result , 1 ) ;
83313: LD_ADDR_VAR 0 2
83317: PUSH
83318: LD_VAR 0 2
83322: PPUSH
83323: LD_INT 1
83325: PPUSH
83326: CALL_OW 3
83330: ST_TO_ADDR
// end ;
83331: LD_VAR 0 2
83335: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83336: LD_INT 0
83338: PPUSH
83339: PPUSH
83340: PPUSH
83341: PPUSH
// sibRocketRange := 25 ;
83342: LD_ADDR_VAR 0 6
83346: PUSH
83347: LD_INT 25
83349: ST_TO_ADDR
// result := false ;
83350: LD_ADDR_VAR 0 4
83354: PUSH
83355: LD_INT 0
83357: ST_TO_ADDR
// for i := 0 to 5 do
83358: LD_ADDR_VAR 0 5
83362: PUSH
83363: DOUBLE
83364: LD_INT 0
83366: DEC
83367: ST_TO_ADDR
83368: LD_INT 5
83370: PUSH
83371: FOR_TO
83372: IFFALSE 83439
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83374: LD_VAR 0 1
83378: PPUSH
83379: LD_VAR 0 5
83383: PPUSH
83384: LD_VAR 0 6
83388: PPUSH
83389: CALL_OW 272
83393: PPUSH
83394: LD_VAR 0 2
83398: PPUSH
83399: LD_VAR 0 5
83403: PPUSH
83404: LD_VAR 0 6
83408: PPUSH
83409: CALL_OW 273
83413: PPUSH
83414: LD_VAR 0 3
83418: PPUSH
83419: CALL_OW 309
83423: IFFALSE 83437
// begin result := true ;
83425: LD_ADDR_VAR 0 4
83429: PUSH
83430: LD_INT 1
83432: ST_TO_ADDR
// exit ;
83433: POP
83434: POP
83435: GO 83441
// end ;
83437: GO 83371
83439: POP
83440: POP
// end ;
83441: LD_VAR 0 4
83445: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83446: LD_INT 0
83448: PPUSH
83449: PPUSH
83450: PPUSH
// if btype = b_depot then
83451: LD_VAR 0 2
83455: PUSH
83456: LD_INT 0
83458: EQUAL
83459: IFFALSE 83471
// begin result := true ;
83461: LD_ADDR_VAR 0 3
83465: PUSH
83466: LD_INT 1
83468: ST_TO_ADDR
// exit ;
83469: GO 83591
// end ; pom := GetBase ( depot ) ;
83471: LD_ADDR_VAR 0 4
83475: PUSH
83476: LD_VAR 0 1
83480: PPUSH
83481: CALL_OW 274
83485: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83486: LD_ADDR_VAR 0 5
83490: PUSH
83491: LD_VAR 0 2
83495: PPUSH
83496: LD_VAR 0 1
83500: PPUSH
83501: CALL_OW 248
83505: PPUSH
83506: CALL_OW 450
83510: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83511: LD_ADDR_VAR 0 3
83515: PUSH
83516: LD_VAR 0 4
83520: PPUSH
83521: LD_INT 1
83523: PPUSH
83524: CALL_OW 275
83528: PUSH
83529: LD_VAR 0 5
83533: PUSH
83534: LD_INT 1
83536: ARRAY
83537: GREATEREQUAL
83538: IFFALSE 83564
83540: PUSH
83541: LD_VAR 0 4
83545: PPUSH
83546: LD_INT 2
83548: PPUSH
83549: CALL_OW 275
83553: PUSH
83554: LD_VAR 0 5
83558: PUSH
83559: LD_INT 2
83561: ARRAY
83562: GREATEREQUAL
83563: AND
83564: IFFALSE 83590
83566: PUSH
83567: LD_VAR 0 4
83571: PPUSH
83572: LD_INT 3
83574: PPUSH
83575: CALL_OW 275
83579: PUSH
83580: LD_VAR 0 5
83584: PUSH
83585: LD_INT 3
83587: ARRAY
83588: GREATEREQUAL
83589: AND
83590: ST_TO_ADDR
// end ;
83591: LD_VAR 0 3
83595: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83596: LD_INT 0
83598: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83599: LD_VAR 0 1
83603: PPUSH
83604: LD_VAR 0 2
83608: PPUSH
83609: LD_INT 0
83611: PPUSH
83612: LD_INT 0
83614: PPUSH
83615: LD_INT 1
83617: PPUSH
83618: LD_INT 0
83620: PPUSH
83621: CALL_OW 587
// end ;
83625: LD_VAR 0 3
83629: RET
// export function CenterOnNow ( unit ) ; begin
83630: LD_INT 0
83632: PPUSH
// result := IsInUnit ( unit ) ;
83633: LD_ADDR_VAR 0 2
83637: PUSH
83638: LD_VAR 0 1
83642: PPUSH
83643: CALL_OW 310
83647: ST_TO_ADDR
// if not result then
83648: LD_VAR 0 2
83652: NOT
83653: IFFALSE 83665
// result := unit ;
83655: LD_ADDR_VAR 0 2
83659: PUSH
83660: LD_VAR 0 1
83664: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83665: LD_VAR 0 1
83669: PPUSH
83670: CALL_OW 87
// end ;
83674: LD_VAR 0 2
83678: RET
// export function ComMoveHex ( unit , hex ) ; begin
83679: LD_INT 0
83681: PPUSH
// if not hex then
83682: LD_VAR 0 2
83686: NOT
83687: IFFALSE 83691
// exit ;
83689: GO 83744
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83691: LD_VAR 0 2
83695: PUSH
83696: LD_INT 1
83698: ARRAY
83699: PPUSH
83700: LD_VAR 0 2
83704: PUSH
83705: LD_INT 2
83707: ARRAY
83708: PPUSH
83709: CALL_OW 428
83713: IFFALSE 83717
// exit ;
83715: GO 83744
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83717: LD_VAR 0 1
83721: PPUSH
83722: LD_VAR 0 2
83726: PUSH
83727: LD_INT 1
83729: ARRAY
83730: PPUSH
83731: LD_VAR 0 2
83735: PUSH
83736: LD_INT 2
83738: ARRAY
83739: PPUSH
83740: CALL_OW 111
// end ;
83744: LD_VAR 0 3
83748: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83749: LD_INT 0
83751: PPUSH
83752: PPUSH
83753: PPUSH
// if not unit or not enemy then
83754: LD_VAR 0 1
83758: NOT
83759: IFTRUE 83768
83761: PUSH
83762: LD_VAR 0 2
83766: NOT
83767: OR
83768: IFFALSE 83772
// exit ;
83770: GO 83898
// x := GetX ( enemy ) ;
83772: LD_ADDR_VAR 0 4
83776: PUSH
83777: LD_VAR 0 2
83781: PPUSH
83782: CALL_OW 250
83786: ST_TO_ADDR
// y := GetY ( enemy ) ;
83787: LD_ADDR_VAR 0 5
83791: PUSH
83792: LD_VAR 0 2
83796: PPUSH
83797: CALL_OW 251
83801: ST_TO_ADDR
// if ValidHex ( x , y ) then
83802: LD_VAR 0 4
83806: PPUSH
83807: LD_VAR 0 5
83811: PPUSH
83812: CALL_OW 488
83816: IFFALSE 83898
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83818: LD_VAR 0 2
83822: PPUSH
83823: CALL_OW 247
83827: PUSH
83828: LD_INT 3
83830: PUSH
83831: LD_INT 2
83833: PUSH
83834: EMPTY
83835: LIST
83836: LIST
83837: IN
83838: IFTRUE 83861
83840: PUSH
83841: LD_VAR 0 1
83845: PPUSH
83846: CALL_OW 255
83850: PPUSH
83851: LD_VAR 0 2
83855: PPUSH
83856: CALL_OW 292
83860: OR
83861: IFFALSE 83879
// ComAttackUnit ( unit , enemy ) else
83863: LD_VAR 0 1
83867: PPUSH
83868: LD_VAR 0 2
83872: PPUSH
83873: CALL_OW 115
83877: GO 83898
// ComAgressiveMove ( unit , x , y ) ;
83879: LD_VAR 0 1
83883: PPUSH
83884: LD_VAR 0 4
83888: PPUSH
83889: LD_VAR 0 5
83893: PPUSH
83894: CALL_OW 114
// end ;
83898: LD_VAR 0 3
83902: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83903: LD_INT 0
83905: PPUSH
83906: PPUSH
83907: PPUSH
// list := AreaToList ( area , 0 ) ;
83908: LD_ADDR_VAR 0 5
83912: PUSH
83913: LD_VAR 0 1
83917: PPUSH
83918: LD_INT 0
83920: PPUSH
83921: CALL_OW 517
83925: ST_TO_ADDR
// if not list then
83926: LD_VAR 0 5
83930: NOT
83931: IFFALSE 83935
// exit ;
83933: GO 84065
// if all then
83935: LD_VAR 0 2
83939: IFFALSE 84027
// begin for i := 1 to list [ 1 ] do
83941: LD_ADDR_VAR 0 4
83945: PUSH
83946: DOUBLE
83947: LD_INT 1
83949: DEC
83950: ST_TO_ADDR
83951: LD_VAR 0 5
83955: PUSH
83956: LD_INT 1
83958: ARRAY
83959: PUSH
83960: FOR_TO
83961: IFFALSE 84023
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83963: LD_ADDR_VAR 0 3
83967: PUSH
83968: LD_VAR 0 3
83972: PPUSH
83973: LD_VAR 0 3
83977: PUSH
83978: LD_INT 1
83980: PLUS
83981: PPUSH
83982: LD_VAR 0 5
83986: PUSH
83987: LD_INT 1
83989: ARRAY
83990: PUSH
83991: LD_VAR 0 4
83995: ARRAY
83996: PUSH
83997: LD_VAR 0 5
84001: PUSH
84002: LD_INT 2
84004: ARRAY
84005: PUSH
84006: LD_VAR 0 4
84010: ARRAY
84011: PUSH
84012: EMPTY
84013: LIST
84014: LIST
84015: PPUSH
84016: CALL_OW 1
84020: ST_TO_ADDR
84021: GO 83960
84023: POP
84024: POP
// exit ;
84025: GO 84065
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84027: LD_ADDR_VAR 0 3
84031: PUSH
84032: LD_VAR 0 5
84036: PUSH
84037: LD_INT 1
84039: ARRAY
84040: PUSH
84041: LD_INT 1
84043: ARRAY
84044: PUSH
84045: LD_VAR 0 5
84049: PUSH
84050: LD_INT 2
84052: ARRAY
84053: PUSH
84054: LD_INT 1
84056: ARRAY
84057: PUSH
84058: EMPTY
84059: LIST
84060: LIST
84061: PUSH
84062: EMPTY
84063: LIST
84064: ST_TO_ADDR
// end ;
84065: LD_VAR 0 3
84069: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84070: LD_INT 0
84072: PPUSH
84073: PPUSH
// list := AreaToList ( area , 0 ) ;
84074: LD_ADDR_VAR 0 4
84078: PUSH
84079: LD_VAR 0 1
84083: PPUSH
84084: LD_INT 0
84086: PPUSH
84087: CALL_OW 517
84091: ST_TO_ADDR
// if not list then
84092: LD_VAR 0 4
84096: NOT
84097: IFFALSE 84101
// exit ;
84099: GO 84142
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84101: LD_ADDR_VAR 0 3
84105: PUSH
84106: LD_VAR 0 4
84110: PUSH
84111: LD_INT 1
84113: ARRAY
84114: PUSH
84115: LD_INT 1
84117: ARRAY
84118: PUSH
84119: LD_VAR 0 4
84123: PUSH
84124: LD_INT 2
84126: ARRAY
84127: PUSH
84128: LD_INT 1
84130: ARRAY
84131: PUSH
84132: LD_VAR 0 2
84136: PUSH
84137: EMPTY
84138: LIST
84139: LIST
84140: LIST
84141: ST_TO_ADDR
// end ;
84142: LD_VAR 0 3
84146: RET
// export function First ( array ) ; begin
84147: LD_INT 0
84149: PPUSH
// if not array then
84150: LD_VAR 0 1
84154: NOT
84155: IFFALSE 84159
// exit ;
84157: GO 84173
// result := array [ 1 ] ;
84159: LD_ADDR_VAR 0 2
84163: PUSH
84164: LD_VAR 0 1
84168: PUSH
84169: LD_INT 1
84171: ARRAY
84172: ST_TO_ADDR
// end ;
84173: LD_VAR 0 2
84177: RET
// export function Last ( array ) ; begin
84178: LD_INT 0
84180: PPUSH
// if not array then
84181: LD_VAR 0 1
84185: NOT
84186: IFFALSE 84190
// exit ;
84188: GO 84206
// result := array [ array ] ;
84190: LD_ADDR_VAR 0 2
84194: PUSH
84195: LD_VAR 0 1
84199: PUSH
84200: LD_VAR 0 1
84204: ARRAY
84205: ST_TO_ADDR
// end ;
84206: LD_VAR 0 2
84210: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84211: LD_INT 0
84213: PPUSH
84214: PPUSH
// result := [ ] ;
84215: LD_ADDR_VAR 0 5
84219: PUSH
84220: EMPTY
84221: ST_TO_ADDR
// if not array then
84222: LD_VAR 0 1
84226: NOT
84227: IFFALSE 84231
// exit ;
84229: GO 84343
// for i := 1 to array do
84231: LD_ADDR_VAR 0 6
84235: PUSH
84236: DOUBLE
84237: LD_INT 1
84239: DEC
84240: ST_TO_ADDR
84241: LD_VAR 0 1
84245: PUSH
84246: FOR_TO
84247: IFFALSE 84341
// if array [ i ] [ index ] = value then
84249: LD_VAR 0 1
84253: PUSH
84254: LD_VAR 0 6
84258: ARRAY
84259: PUSH
84260: LD_VAR 0 2
84264: ARRAY
84265: PUSH
84266: LD_VAR 0 3
84270: EQUAL
84271: IFFALSE 84339
// begin if indexColumn then
84273: LD_VAR 0 4
84277: IFFALSE 84313
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84279: LD_ADDR_VAR 0 5
84283: PUSH
84284: LD_VAR 0 5
84288: PPUSH
84289: LD_VAR 0 1
84293: PUSH
84294: LD_VAR 0 6
84298: ARRAY
84299: PUSH
84300: LD_VAR 0 4
84304: ARRAY
84305: PPUSH
84306: CALL 79351 0 2
84310: ST_TO_ADDR
84311: GO 84339
// result := Join ( result , array [ i ] ) ;
84313: LD_ADDR_VAR 0 5
84317: PUSH
84318: LD_VAR 0 5
84322: PPUSH
84323: LD_VAR 0 1
84327: PUSH
84328: LD_VAR 0 6
84332: ARRAY
84333: PPUSH
84334: CALL 79351 0 2
84338: ST_TO_ADDR
// end ;
84339: GO 84246
84341: POP
84342: POP
// end ;
84343: LD_VAR 0 5
84347: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84348: LD_INT 0
84350: PPUSH
// if not vehicles or not parkingPoint then
84351: LD_VAR 0 1
84355: NOT
84356: IFTRUE 84365
84358: PUSH
84359: LD_VAR 0 2
84363: NOT
84364: OR
84365: IFFALSE 84369
// exit ;
84367: GO 84467
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84369: LD_ADDR_VAR 0 1
84373: PUSH
84374: LD_VAR 0 1
84378: PPUSH
84379: LD_INT 50
84381: PUSH
84382: EMPTY
84383: LIST
84384: PUSH
84385: LD_INT 3
84387: PUSH
84388: LD_INT 92
84390: PUSH
84391: LD_VAR 0 2
84395: PUSH
84396: LD_INT 1
84398: ARRAY
84399: PUSH
84400: LD_VAR 0 2
84404: PUSH
84405: LD_INT 2
84407: ARRAY
84408: PUSH
84409: LD_INT 8
84411: PUSH
84412: EMPTY
84413: LIST
84414: LIST
84415: LIST
84416: LIST
84417: PUSH
84418: EMPTY
84419: LIST
84420: LIST
84421: PUSH
84422: EMPTY
84423: LIST
84424: LIST
84425: PPUSH
84426: CALL_OW 72
84430: ST_TO_ADDR
// if not vehicles then
84431: LD_VAR 0 1
84435: NOT
84436: IFFALSE 84440
// exit ;
84438: GO 84467
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84440: LD_VAR 0 1
84444: PPUSH
84445: LD_VAR 0 2
84449: PUSH
84450: LD_INT 1
84452: ARRAY
84453: PPUSH
84454: LD_VAR 0 2
84458: PUSH
84459: LD_INT 2
84461: ARRAY
84462: PPUSH
84463: CALL_OW 111
// end ;
84467: LD_VAR 0 3
84471: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84472: LD_INT 0
84474: PPUSH
84475: PPUSH
84476: PPUSH
// if not side or not area then
84477: LD_VAR 0 1
84481: NOT
84482: IFTRUE 84491
84484: PUSH
84485: LD_VAR 0 2
84489: NOT
84490: OR
84491: IFFALSE 84495
// exit ;
84493: GO 84614
// tmp := AreaToList ( area , 0 ) ;
84495: LD_ADDR_VAR 0 5
84499: PUSH
84500: LD_VAR 0 2
84504: PPUSH
84505: LD_INT 0
84507: PPUSH
84508: CALL_OW 517
84512: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84513: LD_ADDR_VAR 0 4
84517: PUSH
84518: DOUBLE
84519: LD_INT 1
84521: DEC
84522: ST_TO_ADDR
84523: LD_VAR 0 5
84527: PUSH
84528: LD_INT 1
84530: ARRAY
84531: PUSH
84532: FOR_TO
84533: IFFALSE 84612
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84535: LD_VAR 0 5
84539: PUSH
84540: LD_INT 1
84542: ARRAY
84543: PUSH
84544: LD_VAR 0 4
84548: ARRAY
84549: PPUSH
84550: LD_VAR 0 5
84554: PUSH
84555: LD_INT 2
84557: ARRAY
84558: PUSH
84559: LD_VAR 0 4
84563: ARRAY
84564: PPUSH
84565: CALL_OW 351
84569: IFFALSE 84610
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84571: LD_VAR 0 5
84575: PUSH
84576: LD_INT 1
84578: ARRAY
84579: PUSH
84580: LD_VAR 0 4
84584: ARRAY
84585: PPUSH
84586: LD_VAR 0 5
84590: PUSH
84591: LD_INT 2
84593: ARRAY
84594: PUSH
84595: LD_VAR 0 4
84599: ARRAY
84600: PPUSH
84601: LD_VAR 0 1
84605: PPUSH
84606: CALL_OW 244
// end ;
84610: GO 84532
84612: POP
84613: POP
// end ;
84614: LD_VAR 0 3
84618: RET
// export function UniqueArray ( array ) ; var i ; begin
84619: LD_INT 0
84621: PPUSH
84622: PPUSH
// result := [ ] ;
84623: LD_ADDR_VAR 0 2
84627: PUSH
84628: EMPTY
84629: ST_TO_ADDR
// if not array then
84630: LD_VAR 0 1
84634: NOT
84635: IFFALSE 84639
// exit ;
84637: GO 84700
// for i := 1 to array do
84639: LD_ADDR_VAR 0 3
84643: PUSH
84644: DOUBLE
84645: LD_INT 1
84647: DEC
84648: ST_TO_ADDR
84649: LD_VAR 0 1
84653: PUSH
84654: FOR_TO
84655: IFFALSE 84698
// if not array [ i ] in result then
84657: LD_VAR 0 1
84661: PUSH
84662: LD_VAR 0 3
84666: ARRAY
84667: PUSH
84668: LD_VAR 0 2
84672: IN
84673: NOT
84674: IFFALSE 84696
// result := Join ( result , i ) ;
84676: LD_ADDR_VAR 0 2
84680: PUSH
84681: LD_VAR 0 2
84685: PPUSH
84686: LD_VAR 0 3
84690: PPUSH
84691: CALL 79351 0 2
84695: ST_TO_ADDR
84696: GO 84654
84698: POP
84699: POP
// end ; end_of_file
84700: LD_VAR 0 2
84704: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84705: LD_VAR 0 1
84709: PUSH
84710: LD_INT 200
84712: DOUBLE
84713: GREATEREQUAL
84714: IFFALSE 84722
84716: LD_INT 299
84718: DOUBLE
84719: LESSEQUAL
84720: IFTRUE 84724
84722: GO 84756
84724: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84725: LD_VAR 0 1
84729: PPUSH
84730: LD_VAR 0 2
84734: PPUSH
84735: LD_VAR 0 3
84739: PPUSH
84740: LD_VAR 0 4
84744: PPUSH
84745: LD_VAR 0 5
84749: PPUSH
84750: CALL 35661 0 5
84754: GO 84833
84756: LD_INT 300
84758: DOUBLE
84759: GREATEREQUAL
84760: IFFALSE 84768
84762: LD_INT 399
84764: DOUBLE
84765: LESSEQUAL
84766: IFTRUE 84770
84768: GO 84832
84770: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84771: LD_VAR 0 1
84775: PPUSH
84776: LD_VAR 0 2
84780: PPUSH
84781: LD_VAR 0 3
84785: PPUSH
84786: LD_VAR 0 4
84790: PPUSH
84791: LD_VAR 0 5
84795: PPUSH
84796: LD_VAR 0 6
84800: PPUSH
84801: LD_VAR 0 7
84805: PPUSH
84806: LD_VAR 0 8
84810: PPUSH
84811: LD_VAR 0 9
84815: PPUSH
84816: LD_VAR 0 10
84820: PPUSH
84821: LD_VAR 0 11
84825: PPUSH
84826: CALL 31545 0 11
84830: GO 84833
84832: POP
// end ;
84833: PPOPN 11
84835: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84836: LD_VAR 0 1
84840: PPUSH
84841: LD_VAR 0 2
84845: PPUSH
84846: LD_VAR 0 3
84850: PPUSH
84851: LD_VAR 0 4
84855: PPUSH
84856: LD_VAR 0 5
84860: PPUSH
84861: CALL 35042 0 5
// end ; end_of_file
84865: PPOPN 5
84867: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84868: LD_VAR 0 1
84872: PPUSH
84873: LD_VAR 0 2
84877: PPUSH
84878: LD_VAR 0 3
84882: PPUSH
84883: LD_VAR 0 4
84887: PPUSH
84888: LD_VAR 0 5
84892: PPUSH
84893: LD_VAR 0 6
84897: PPUSH
84898: CALL 19085 0 6
// end ;
84902: PPOPN 6
84904: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84905: LD_INT 0
84907: PPUSH
// begin if not units then
84908: LD_VAR 0 1
84912: NOT
84913: IFFALSE 84917
// exit ;
84915: GO 84951
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
84917: LD_VAR 0 1
84921: PPUSH
84922: LD_VAR 0 2
84926: PPUSH
84927: LD_VAR 0 3
84931: PPUSH
84932: LD_VAR 0 4
84936: PPUSH
84937: LD_VAR 0 5
84941: PPUSH
84942: LD_VAR 0 6
84946: PPUSH
84947: CALL 41168 0 6
// end ;
84951: PPOPN 7
84953: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84954: CALL 18972 0 0
// end ;
84958: PPOPN 1
84960: END
