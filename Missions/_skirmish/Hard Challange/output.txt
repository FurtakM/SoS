// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10108 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10238 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11645 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13874 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 1200 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 1200
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8327 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6376 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6376 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6376 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6376 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6376 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6227 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6227 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8100 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6227 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6227 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8100 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10626 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5251
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6136 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10552 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5469 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5469 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9143 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 66497 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6376 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6517 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6592 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8499 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6376 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6931 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7539 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7830 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6227 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6227 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6227 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7978 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8100 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7978 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8100 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7978 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8100 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8100 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6136 0 1
3087: PPUSH
3088: CALL 5828 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6136 0 1
3108: PPUSH
3109: CALL 5828 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11350 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5469 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3498
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3496
// if GetLives ( ru_attack_list [ i ] ) >= 250 and not HasTask ( ru_attack_list [ i ] ) then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: PUSH
3416: LD_EXP 10
3420: PUSH
3421: LD_VAR 0 1
3425: ARRAY
3426: PPUSH
3427: CALL_OW 314
3431: NOT
3432: AND
3433: IFFALSE 3494
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3435: LD_EXP 10
3439: PUSH
3440: LD_VAR 0 1
3444: ARRAY
3445: PPUSH
3446: LD_INT 81
3448: PUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_VAR 0 1
3458: ARRAY
3459: PPUSH
3460: CALL_OW 255
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 69
3473: PPUSH
3474: LD_EXP 10
3478: PUSH
3479: LD_VAR 0 1
3483: ARRAY
3484: PPUSH
3485: CALL_OW 74
3489: PPUSH
3490: CALL_OW 115
3494: GO 3393
3496: POP
3497: POP
// end ; if GetBehemoth ( 3 ) then
3498: LD_INT 3
3500: PPUSH
3501: CALL 11350 0 1
3505: IFFALSE 3877
// begin if ru_mech >= 4 then
3507: LD_EXP 22
3511: PUSH
3512: LD_INT 4
3514: GREATEREQUAL
3515: IFFALSE 3566
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3517: LD_ADDR_EXP 15
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 1
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 2
3538: ARRAY
3539: PUSH
3540: LD_EXP 22
3544: PUSH
3545: LD_INT 3
3547: ARRAY
3548: PUSH
3549: LD_EXP 22
3553: PUSH
3554: LD_INT 4
3556: ARRAY
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: ST_TO_ADDR
3564: GO 3576
// ru_behemoth_mechanic := ru_mech ;
3566: LD_ADDR_EXP 15
3570: PUSH
3571: LD_EXP 22
3575: ST_TO_ADDR
// for i = 1 to ru_mech do
3576: LD_ADDR_VAR 0 1
3580: PUSH
3581: DOUBLE
3582: LD_INT 1
3584: DEC
3585: ST_TO_ADDR
3586: LD_EXP 22
3590: PUSH
3591: FOR_TO
3592: IFFALSE 3646
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3594: LD_EXP 22
3598: PUSH
3599: LD_VAR 0 1
3603: ARRAY
3604: PPUSH
3605: CALL_OW 310
3609: PUSH
3610: LD_EXP 22
3614: PUSH
3615: LD_VAR 0 1
3619: ARRAY
3620: PUSH
3621: LD_EXP 15
3625: IN
3626: AND
3627: IFFALSE 3644
// ComExitBuilding ( ru_mech [ i ] ) ;
3629: LD_EXP 22
3633: PUSH
3634: LD_VAR 0 1
3638: ARRAY
3639: PPUSH
3640: CALL_OW 122
3644: GO 3591
3646: POP
3647: POP
// if UnitsInside ( ru_fac ) = 0 then
3648: LD_INT 14
3650: PPUSH
3651: CALL_OW 313
3655: PUSH
3656: LD_INT 0
3658: EQUAL
3659: IFFALSE 3726
// begin InitHc_All ;
3661: CALL_OW 584
// for i := 1 to 5 do
3665: LD_ADDR_VAR 0 1
3669: PUSH
3670: DOUBLE
3671: LD_INT 1
3673: DEC
3674: ST_TO_ADDR
3675: LD_INT 5
3677: PUSH
3678: FOR_TO
3679: IFFALSE 3724
// begin uc_side := 3 ;
3681: LD_ADDR_OWVAR 20
3685: PUSH
3686: LD_INT 3
3688: ST_TO_ADDR
// uc_nation := 3 ;
3689: LD_ADDR_OWVAR 21
3693: PUSH
3694: LD_INT 3
3696: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3697: LD_INT 0
3699: PPUSH
3700: LD_INT 3
3702: PPUSH
3703: LD_INT 7
3705: PPUSH
3706: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3710: CALL_OW 44
3714: PPUSH
3715: LD_INT 14
3717: PPUSH
3718: CALL_OW 52
// end ;
3722: GO 3678
3724: POP
3725: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3726: LD_INT 12
3728: PPUSH
3729: LD_INT 22
3731: PUSH
3732: LD_INT 1
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PUSH
3739: LD_INT 21
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PPUSH
3753: CALL_OW 70
3757: PUSH
3758: LD_INT 0
3760: GREATER
3761: IFFALSE 3821
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3763: LD_INT 3
3765: PPUSH
3766: CALL 11350 0 1
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: PPUSH
3775: LD_INT 21
3777: PUSH
3778: LD_INT 2
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 34
3787: PUSH
3788: LD_INT 49
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PPUSH
3799: CALL_OW 69
3803: PPUSH
3804: LD_EXP 15
3808: PPUSH
3809: LD_INT 97
3811: PPUSH
3812: LD_INT 9
3814: PPUSH
3815: CALL 10847 0 5
3819: GO 3877
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3821: LD_INT 3
3823: PPUSH
3824: CALL 11350 0 1
3828: PUSH
3829: LD_INT 1
3831: ARRAY
3832: PPUSH
3833: LD_INT 21
3835: PUSH
3836: LD_INT 2
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 34
3845: PUSH
3846: LD_INT 49
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 69
3861: PPUSH
3862: LD_EXP 15
3866: PPUSH
3867: LD_INT 153
3869: PPUSH
3870: LD_INT 102
3872: PPUSH
3873: CALL 10847 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3877: LD_EXP 24
3881: PUSH
3882: LD_INT 0
3884: EQUAL
3885: PUSH
3886: LD_INT 44
3888: PPUSH
3889: LD_INT 3
3891: PPUSH
3892: CALL_OW 321
3896: PUSH
3897: LD_INT 2
3899: EQUAL
3900: AND
3901: IFFALSE 3912
// ComChangeClassToBazooker ( ru_sold ) ;
3903: LD_EXP 20
3907: PPUSH
3908: CALL 9784 0 1
// if ru_bazz then
3912: LD_EXP 24
3916: IFFALSE 3930
// IntBazooka ( ru_bazz , 1 ) ;
3918: LD_EXP 24
3922: PPUSH
3923: LD_INT 1
3925: PPUSH
3926: CALL 9503 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3930: LD_INT 67
3932: PPUSH
3933: LD_INT 39
3935: PPUSH
3936: LD_INT 3
3938: PPUSH
3939: CALL_OW 440
3943: PUSH
3944: LD_INT 0
3946: EQUAL
3947: PUSH
3948: LD_INT 20
3950: PPUSH
3951: LD_INT 3
3953: PPUSH
3954: CALL_OW 321
3958: PUSH
3959: LD_INT 2
3961: EQUAL
3962: AND
3963: IFFALSE 3984
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3965: LD_EXP 23
3969: PUSH
3970: LD_INT 1
3972: ARRAY
3973: PPUSH
3974: LD_INT 67
3976: PPUSH
3977: LD_INT 39
3979: PPUSH
3980: CALL 9082 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3984: LD_INT 89
3986: PPUSH
3987: LD_INT 66
3989: PPUSH
3990: LD_INT 3
3992: PPUSH
3993: CALL_OW 440
3997: PUSH
3998: LD_INT 0
4000: EQUAL
4001: IFFALSE 4022
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
4003: LD_EXP 23
4007: PUSH
4008: LD_INT 1
4010: ARRAY
4011: PPUSH
4012: LD_INT 87
4014: PPUSH
4015: LD_INT 60
4017: PPUSH
4018: CALL 9082 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4022: LD_INT 104
4024: PPUSH
4025: LD_INT 94
4027: PPUSH
4028: LD_INT 3
4030: PPUSH
4031: CALL_OW 440
4035: PUSH
4036: LD_INT 0
4038: EQUAL
4039: PUSH
4040: LD_INT 20
4042: PPUSH
4043: LD_INT 3
4045: PPUSH
4046: CALL_OW 321
4050: PUSH
4051: LD_INT 2
4053: EQUAL
4054: AND
4055: IFFALSE 4076
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4057: LD_EXP 23
4061: PUSH
4062: LD_INT 1
4064: ARRAY
4065: PPUSH
4066: LD_INT 104
4068: PPUSH
4069: LD_INT 94
4071: PPUSH
4072: CALL 9082 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4076: LD_INT 3
4078: PPUSH
4079: LD_INT 24
4081: PPUSH
4082: LD_INT 53
4084: PPUSH
4085: CALL 7978 0 3
4089: PUSH
4090: LD_INT 1
4092: EQUAL
4093: PUSH
4094: LD_EXP 18
4098: AND
4099: IFFALSE 4240
// begin need_buldozer := false ;
4101: LD_ADDR_EXP 18
4105: PUSH
4106: LD_INT 0
4108: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4109: LD_INT 3
4111: PPUSH
4112: LD_INT 24
4114: PPUSH
4115: LD_INT 53
4117: PPUSH
4118: CALL 7978 0 3
4122: PUSH
4123: LD_INT 1
4125: ARRAY
4126: PPUSH
4127: LD_INT 67
4129: PPUSH
4130: LD_INT 39
4132: PPUSH
4133: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4137: LD_INT 3
4139: PPUSH
4140: LD_INT 24
4142: PPUSH
4143: LD_INT 53
4145: PPUSH
4146: CALL 7978 0 3
4150: PUSH
4151: LD_INT 1
4153: ARRAY
4154: PPUSH
4155: LD_INT 71
4157: PPUSH
4158: LD_INT 10
4160: PPUSH
4161: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4165: LD_INT 3
4167: PPUSH
4168: LD_INT 24
4170: PPUSH
4171: LD_INT 53
4173: PPUSH
4174: CALL 7978 0 3
4178: PUSH
4179: LD_INT 1
4181: ARRAY
4182: PPUSH
4183: LD_INT 15
4185: PPUSH
4186: CALL 5569 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 24
4195: PPUSH
4196: LD_INT 53
4198: PPUSH
4199: CALL 7978 0 3
4203: PUSH
4204: LD_INT 1
4206: ARRAY
4207: PPUSH
4208: LD_INT 350
4210: PPUSH
4211: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4215: LD_INT 3
4217: PPUSH
4218: LD_INT 24
4220: PPUSH
4221: LD_INT 53
4223: PPUSH
4224: CALL 7978 0 3
4228: PUSH
4229: LD_INT 1
4231: ARRAY
4232: PPUSH
4233: LD_INT 14
4235: PPUSH
4236: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4240: LD_INT 67
4242: PPUSH
4243: LD_INT 39
4245: PPUSH
4246: LD_INT 3
4248: PPUSH
4249: CALL_OW 440
4253: PUSH
4254: LD_INT 67
4256: PPUSH
4257: LD_INT 39
4259: PPUSH
4260: CALL_OW 428
4264: PUSH
4265: LD_INT 0
4267: EQUAL
4268: AND
4269: PUSH
4270: LD_INT 79
4272: PPUSH
4273: LD_INT 45
4275: PPUSH
4276: CALL_OW 428
4280: PPUSH
4281: CALL_OW 266
4285: PUSH
4286: LD_INT 0
4288: EQUAL
4289: AND
4290: PUSH
4291: LD_INT 1
4293: PPUSH
4294: LD_INT 79
4296: PPUSH
4297: LD_INT 45
4299: PPUSH
4300: CALL 5469 0 3
4304: PUSH
4305: LD_INT 0
4307: EQUAL
4308: AND
4309: IFFALSE 4412
// begin for i = 1 to ru_eng do
4311: LD_ADDR_VAR 0 1
4315: PUSH
4316: DOUBLE
4317: LD_INT 1
4319: DEC
4320: ST_TO_ADDR
4321: LD_EXP 21
4325: PUSH
4326: FOR_TO
4327: IFFALSE 4410
// if IsInUnit ( ru_eng [ i ] ) then
4329: LD_EXP 21
4333: PUSH
4334: LD_VAR 0 1
4338: ARRAY
4339: PPUSH
4340: CALL_OW 310
4344: IFFALSE 4363
// ComExitBuilding ( ru_eng [ i ] ) else
4346: LD_EXP 21
4350: PUSH
4351: LD_VAR 0 1
4355: ARRAY
4356: PPUSH
4357: CALL_OW 122
4361: GO 4408
// if not HasTask ( ru_eng [ i ] ) then
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: CALL_OW 314
4378: NOT
4379: IFFALSE 4408
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4381: LD_EXP 21
4385: PUSH
4386: LD_VAR 0 1
4390: ARRAY
4391: PPUSH
4392: LD_INT 30
4394: PPUSH
4395: LD_INT 67
4397: PPUSH
4398: LD_INT 39
4400: PPUSH
4401: LD_INT 3
4403: PPUSH
4404: CALL_OW 145
4408: GO 4326
4410: POP
4411: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4412: LD_INT 1
4414: PPUSH
4415: LD_INT 79
4417: PPUSH
4418: LD_INT 45
4420: PPUSH
4421: CALL 5469 0 3
4425: PUSH
4426: LD_INT 0
4428: EQUAL
4429: IFFALSE 4625
// begin if HexInfo ( 79 , 45 ) = 0 then
4431: LD_INT 79
4433: PPUSH
4434: LD_INT 45
4436: PPUSH
4437: CALL_OW 428
4441: PUSH
4442: LD_INT 0
4444: EQUAL
4445: IFFALSE 4467
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4447: LD_EXP 21
4451: PPUSH
4452: LD_INT 79
4454: PPUSH
4455: LD_INT 45
4457: PPUSH
4458: LD_INT 3
4460: PPUSH
4461: CALL 6993 0 4
4465: GO 4625
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4467: LD_INT 89
4469: PPUSH
4470: LD_INT 66
4472: PPUSH
4473: CALL_OW 428
4477: PUSH
4478: LD_INT 0
4480: EQUAL
4481: PUSH
4482: LD_INT 89
4484: PPUSH
4485: LD_INT 66
4487: PPUSH
4488: LD_INT 3
4490: PPUSH
4491: CALL_OW 440
4495: AND
4496: IFFALSE 4625
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4498: LD_INT 79
4500: PPUSH
4501: LD_INT 45
4503: PPUSH
4504: CALL_OW 428
4508: PPUSH
4509: CALL_OW 274
4513: PPUSH
4514: LD_INT 1
4516: PPUSH
4517: LD_INT 100
4519: PPUSH
4520: CALL_OW 277
// for i = 1 to ru_eng do
4524: LD_ADDR_VAR 0 1
4528: PUSH
4529: DOUBLE
4530: LD_INT 1
4532: DEC
4533: ST_TO_ADDR
4534: LD_EXP 21
4538: PUSH
4539: FOR_TO
4540: IFFALSE 4623
// if IsInUnit ( ru_eng [ i ] ) then
4542: LD_EXP 21
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: CALL_OW 310
4557: IFFALSE 4576
// ComExitBuilding ( ru_eng [ i ] ) else
4559: LD_EXP 21
4563: PUSH
4564: LD_VAR 0 1
4568: ARRAY
4569: PPUSH
4570: CALL_OW 122
4574: GO 4621
// if not HasTask ( ru_eng [ i ] ) then
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: CALL_OW 314
4591: NOT
4592: IFFALSE 4621
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4594: LD_EXP 21
4598: PUSH
4599: LD_VAR 0 1
4603: ARRAY
4604: PPUSH
4605: LD_INT 29
4607: PPUSH
4608: LD_INT 89
4610: PPUSH
4611: LD_INT 66
4613: PPUSH
4614: LD_INT 3
4616: PPUSH
4617: CALL_OW 145
4621: GO 4539
4623: POP
4624: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4625: LD_INT 3
4627: PPUSH
4628: LD_INT 29
4630: PPUSH
4631: CALL 6227 0 2
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: PUSH
4640: LD_INT 1
4642: PPUSH
4643: LD_INT 36
4645: PPUSH
4646: LD_INT 6
4648: PPUSH
4649: CALL 5469 0 3
4653: PUSH
4654: LD_INT 0
4656: EQUAL
4657: AND
4658: PUSH
4659: LD_INT 3
4661: PPUSH
4662: CALL 6136 0 1
4666: PPUSH
4667: LD_INT 29
4669: PPUSH
4670: CALL 5712 0 2
4674: AND
4675: IFFALSE 4778
// begin for i = 1 to ru_eng do
4677: LD_ADDR_VAR 0 1
4681: PUSH
4682: DOUBLE
4683: LD_INT 1
4685: DEC
4686: ST_TO_ADDR
4687: LD_EXP 21
4691: PUSH
4692: FOR_TO
4693: IFFALSE 4776
// begin if IsInUnit ( ru_eng [ i ] ) then
4695: LD_EXP 21
4699: PUSH
4700: LD_VAR 0 1
4704: ARRAY
4705: PPUSH
4706: CALL_OW 310
4710: IFFALSE 4729
// ComExitBuilding ( ru_eng [ i ] ) else
4712: LD_EXP 21
4716: PUSH
4717: LD_VAR 0 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 122
4727: GO 4774
// if not HasTask ( ru_eng [ i ] ) then
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: CALL_OW 314
4744: NOT
4745: IFFALSE 4774
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4747: LD_EXP 21
4751: PUSH
4752: LD_VAR 0 1
4756: ARRAY
4757: PPUSH
4758: LD_INT 29
4760: PPUSH
4761: LD_INT 33
4763: PPUSH
4764: LD_INT 4
4766: PPUSH
4767: LD_INT 0
4769: PPUSH
4770: CALL_OW 205
// end ; end ;
4774: GO 4692
4776: POP
4777: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4778: LD_EXP 21
4782: PUSH
4783: LD_INT 79
4785: PPUSH
4786: LD_INT 45
4788: PPUSH
4789: CALL_OW 428
4793: PUSH
4794: LD_INT 0
4796: GREATER
4797: AND
4798: PUSH
4799: LD_INT 79
4801: PPUSH
4802: LD_INT 45
4804: PPUSH
4805: CALL_OW 428
4809: PPUSH
4810: CALL_OW 266
4814: PUSH
4815: LD_INT 0
4817: EQUAL
4818: AND
4819: IFFALSE 4979
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4821: LD_INT 79
4823: PPUSH
4824: LD_INT 45
4826: PPUSH
4827: CALL_OW 428
4831: PPUSH
4832: CALL_OW 255
4836: PUSH
4837: LD_INT 3
4839: EQUAL
4840: PUSH
4841: LD_INT 1
4843: PPUSH
4844: LD_INT 79
4846: PPUSH
4847: LD_INT 45
4849: PPUSH
4850: CALL 5469 0 3
4854: PUSH
4855: LD_INT 0
4857: EQUAL
4858: AND
4859: PUSH
4860: LD_INT 79
4862: PPUSH
4863: LD_INT 45
4865: PPUSH
4866: CALL_OW 428
4870: PPUSH
4871: CALL_OW 274
4875: PPUSH
4876: LD_INT 3
4878: PPUSH
4879: CALL_OW 275
4883: PUSH
4884: LD_INT 10
4886: GREATEREQUAL
4887: AND
4888: IFFALSE 4979
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4890: LD_EXP 21
4894: PUSH
4895: LD_INT 1
4897: ARRAY
4898: PPUSH
4899: CALL_OW 310
4903: IFFALSE 4920
// ComExitBuilding ( ru_eng [ 1 ] ) else
4905: LD_EXP 21
4909: PUSH
4910: LD_INT 1
4912: ARRAY
4913: PPUSH
4914: CALL_OW 122
4918: GO 4979
// if not HasTask ( ru_eng [ 1 ] ) then
4920: LD_EXP 21
4924: PUSH
4925: LD_INT 1
4927: ARRAY
4928: PPUSH
4929: CALL_OW 314
4933: NOT
4934: IFFALSE 4979
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4936: LD_EXP 21
4940: PUSH
4941: LD_INT 1
4943: ARRAY
4944: PPUSH
4945: LD_INT 79
4947: PPUSH
4948: LD_INT 45
4950: PPUSH
4951: CALL_OW 428
4955: PPUSH
4956: LD_INT 3
4958: PPUSH
4959: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4963: LD_EXP 21
4967: PUSH
4968: LD_INT 1
4970: ARRAY
4971: PPUSH
4972: LD_INT 2
4974: PPUSH
4975: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4979: LD_EXP 21
4983: PUSH
4984: LD_INT 2
4986: GREATER
4987: PUSH
4988: LD_INT 79
4990: PPUSH
4991: LD_INT 45
4993: PPUSH
4994: CALL_OW 428
4998: PUSH
4999: LD_INT 0
5001: GREATER
5002: AND
5003: PUSH
5004: LD_INT 79
5006: PPUSH
5007: LD_INT 45
5009: PPUSH
5010: CALL_OW 428
5014: PPUSH
5015: CALL_OW 266
5019: PUSH
5020: LD_INT 0
5022: EQUAL
5023: AND
5024: IFFALSE 5184
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5026: LD_INT 79
5028: PPUSH
5029: LD_INT 45
5031: PPUSH
5032: CALL_OW 428
5036: PPUSH
5037: CALL_OW 255
5041: PUSH
5042: LD_INT 3
5044: EQUAL
5045: PUSH
5046: LD_INT 1
5048: PPUSH
5049: LD_INT 79
5051: PPUSH
5052: LD_INT 45
5054: PPUSH
5055: CALL 5469 0 3
5059: PUSH
5060: LD_INT 0
5062: EQUAL
5063: AND
5064: PUSH
5065: LD_INT 79
5067: PPUSH
5068: LD_INT 45
5070: PPUSH
5071: CALL_OW 428
5075: PPUSH
5076: CALL_OW 274
5080: PPUSH
5081: LD_INT 1
5083: PPUSH
5084: CALL_OW 275
5088: PUSH
5089: LD_INT 20
5091: GREATER
5092: AND
5093: IFFALSE 5184
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5095: LD_EXP 21
5099: PUSH
5100: LD_INT 2
5102: ARRAY
5103: PPUSH
5104: CALL_OW 310
5108: IFFALSE 5125
// ComExitBuilding ( ru_eng [ 2 ] ) else
5110: LD_EXP 21
5114: PUSH
5115: LD_INT 2
5117: ARRAY
5118: PPUSH
5119: CALL_OW 122
5123: GO 5184
// if not HasTask ( ru_eng [ 2 ] ) then
5125: LD_EXP 21
5129: PUSH
5130: LD_INT 2
5132: ARRAY
5133: PPUSH
5134: CALL_OW 314
5138: NOT
5139: IFFALSE 5184
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5141: LD_EXP 21
5145: PUSH
5146: LD_INT 2
5148: ARRAY
5149: PPUSH
5150: LD_INT 79
5152: PPUSH
5153: LD_INT 45
5155: PPUSH
5156: CALL_OW 428
5160: PPUSH
5161: LD_INT 1
5163: PPUSH
5164: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5168: LD_EXP 21
5172: PUSH
5173: LD_INT 2
5175: ARRAY
5176: PPUSH
5177: LD_INT 2
5179: PPUSH
5180: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 59
5189: PPUSH
5190: LD_INT 60
5192: PPUSH
5193: CALL 5469 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: PUSH
5202: LD_INT 1
5204: PPUSH
5205: LD_INT 67
5207: PPUSH
5208: LD_INT 76
5210: PPUSH
5211: CALL 5469 0 3
5215: PUSH
5216: LD_INT 0
5218: EQUAL
5219: AND
5220: PUSH
5221: LD_INT 1
5223: PPUSH
5224: LD_INT 79
5226: PPUSH
5227: LD_INT 100
5229: PPUSH
5230: CALL 5469 0 3
5234: PUSH
5235: LD_INT 0
5237: EQUAL
5238: AND
5239: IFFALSE 5251
// CollectCrates ( 3 , west_crates ) ;
5241: LD_INT 3
5243: PPUSH
5244: LD_INT 13
5246: PPUSH
5247: CALL 11394 0 2
// end ;
5251: PPOPN 10
5253: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5254: LD_OWVAR 1
5258: PUSH
5259: LD_INT 111300
5261: LESSEQUAL
5262: PUSH
5263: LD_EXP 30
5267: NOT
5268: OR
5269: IFFALSE 5466
5271: GO 5273
5273: DISABLE
5274: LD_INT 0
5276: PPUSH
// begin enable ;
5277: ENABLE
// uc_nation := 3 ;
5278: LD_ADDR_OWVAR 21
5282: PUSH
5283: LD_INT 3
5285: ST_TO_ADDR
// uc_side := 3 ;
5286: LD_ADDR_OWVAR 20
5290: PUSH
5291: LD_INT 3
5293: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5294: LD_ADDR_OWVAR 37
5298: PUSH
5299: LD_INT 22
5301: ST_TO_ADDR
// vc_engine := engine_siberite ;
5302: LD_ADDR_OWVAR 39
5306: PUSH
5307: LD_INT 3
5309: ST_TO_ADDR
// vc_control := control_computer ;
5310: LD_ADDR_OWVAR 38
5314: PUSH
5315: LD_INT 3
5317: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5318: LD_ADDR_OWVAR 40
5322: PUSH
5323: LD_INT 51
5325: ST_TO_ADDR
// veh := CreateVehicle ;
5326: LD_ADDR_VAR 0 1
5330: PUSH
5331: CALL_OW 45
5335: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5336: LD_VAR 0 1
5340: PPUSH
5341: LD_INT 4
5343: PPUSH
5344: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 10
5355: PPUSH
5356: LD_INT 0
5358: PPUSH
5359: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5363: LD_VAR 0 1
5367: PPUSH
5368: LD_INT 1
5370: PUSH
5371: LD_INT 2
5373: PUSH
5374: LD_INT 3
5376: PUSH
5377: LD_INT 2
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 1
5388: PPUSH
5389: LD_INT 4
5391: PPUSH
5392: CALL_OW 12
5396: ARRAY
5397: PPUSH
5398: LD_INT 100
5400: PPUSH
5401: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5405: LD_VAR 0 1
5409: PPUSH
5410: LD_INT 2
5412: PPUSH
5413: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5417: LD_VAR 0 1
5421: PPUSH
5422: LD_INT 10
5424: PPUSH
5425: CALL_OW 173
// Wait ( 0 0$10 ) ;
5429: LD_INT 350
5431: PPUSH
5432: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5436: LD_INT 35
5438: PPUSH
5439: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5443: LD_VAR 0 1
5447: PPUSH
5448: LD_INT 10
5450: PPUSH
5451: CALL_OW 308
5455: IFFALSE 5436
// RemoveUnit ( veh ) ;
5457: LD_VAR 0 1
5461: PPUSH
5462: CALL_OW 64
// end ; end_of_file
5466: PPOPN 1
5468: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5469: LD_INT 0
5471: PPUSH
5472: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5473: LD_ADDR_VAR 0 5
5477: PUSH
5478: LD_INT 22
5480: PUSH
5481: LD_VAR 0 1
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: PPUSH
5490: CALL_OW 69
5494: PPUSH
5495: LD_VAR 0 2
5499: PPUSH
5500: LD_VAR 0 3
5504: PPUSH
5505: CALL_OW 73
5509: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5510: LD_ADDR_VAR 0 4
5514: PUSH
5515: LD_VAR 0 5
5519: PPUSH
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_VAR 0 3
5529: PPUSH
5530: CALL_OW 297
5534: PUSH
5535: LD_INT 15
5537: LESS
5538: PUSH
5539: LD_INT 2
5541: PPUSH
5542: LD_INT 22
5544: PUSH
5545: LD_VAR 0 1
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PPUSH
5554: CALL_OW 70
5558: PUSH
5559: LD_INT 0
5561: GREATER
5562: OR
5563: ST_TO_ADDR
// end ;
5564: LD_VAR 0 4
5568: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5569: LD_INT 0
5571: PPUSH
5572: PPUSH
// area = ListEnvironmentArea ( area ) ;
5573: LD_ADDR_VAR 0 2
5577: PUSH
5578: LD_VAR 0 2
5582: PPUSH
5583: CALL_OW 353
5587: ST_TO_ADDR
// if bulldozer > 0 then
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 0
5595: GREATER
5596: IFFALSE 5707
// for i = 1 to area do
5598: LD_ADDR_VAR 0 4
5602: PUSH
5603: DOUBLE
5604: LD_INT 1
5606: DEC
5607: ST_TO_ADDR
5608: LD_VAR 0 2
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5705
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5616: LD_VAR 0 2
5620: PUSH
5621: LD_VAR 0 4
5625: ARRAY
5626: PUSH
5627: LD_INT 1
5629: ARRAY
5630: PPUSH
5631: LD_VAR 0 2
5635: PUSH
5636: LD_VAR 0 4
5640: ARRAY
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: CALL_OW 351
5650: IFFALSE 5703
// if not HasTask ( bulldozer ) then
5652: LD_VAR 0 1
5656: PPUSH
5657: CALL_OW 314
5661: NOT
5662: IFFALSE 5703
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5664: LD_VAR 0 1
5668: PPUSH
5669: LD_VAR 0 2
5673: PUSH
5674: LD_VAR 0 4
5678: ARRAY
5679: PUSH
5680: LD_INT 1
5682: ARRAY
5683: PPUSH
5684: LD_VAR 0 2
5688: PUSH
5689: LD_VAR 0 4
5693: ARRAY
5694: PUSH
5695: LD_INT 2
5697: ARRAY
5698: PPUSH
5699: CALL_OW 171
5703: GO 5613
5705: POP
5706: POP
// end ;
5707: LD_VAR 0 3
5711: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5712: LD_INT 0
5714: PPUSH
5715: PPUSH
5716: PPUSH
// pom := GetBase ( bdepot ) ;
5717: LD_ADDR_VAR 0 4
5721: PUSH
5722: LD_VAR 0 1
5726: PPUSH
5727: CALL_OW 274
5731: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5732: LD_ADDR_VAR 0 5
5736: PUSH
5737: LD_VAR 0 2
5741: PPUSH
5742: LD_VAR 0 1
5746: PPUSH
5747: CALL_OW 248
5751: PPUSH
5752: CALL_OW 450
5756: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5757: LD_VAR 0 4
5761: PPUSH
5762: LD_INT 1
5764: PPUSH
5765: CALL_OW 275
5769: PUSH
5770: LD_VAR 0 5
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: GREATEREQUAL
5779: PUSH
5780: LD_VAR 0 4
5784: PPUSH
5785: LD_INT 3
5787: PPUSH
5788: CALL_OW 275
5792: PUSH
5793: LD_VAR 0 5
5797: PUSH
5798: LD_INT 3
5800: ARRAY
5801: GREATEREQUAL
5802: AND
5803: IFFALSE 5815
// result := true else
5805: LD_ADDR_VAR 0 3
5809: PUSH
5810: LD_INT 1
5812: ST_TO_ADDR
5813: GO 5823
// result := false ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_INT 0
5822: ST_TO_ADDR
// end ;
5823: LD_VAR 0 3
5827: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5828: LD_INT 0
5830: PPUSH
5831: PPUSH
5832: PPUSH
// pom := GetBase ( bdepot ) ;
5833: LD_ADDR_VAR 0 3
5837: PUSH
5838: LD_VAR 0 1
5842: PPUSH
5843: CALL_OW 274
5847: ST_TO_ADDR
// sor := [ ] ;
5848: LD_ADDR_VAR 0 4
5852: PUSH
5853: EMPTY
5854: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5855: LD_ADDR_VAR 0 4
5859: PUSH
5860: LD_VAR 0 4
5864: PUSH
5865: LD_VAR 0 3
5869: PPUSH
5870: LD_INT 1
5872: PPUSH
5873: CALL_OW 275
5877: ADD
5878: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5879: LD_ADDR_VAR 0 4
5883: PUSH
5884: LD_VAR 0 4
5888: PUSH
5889: LD_VAR 0 3
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: CALL_OW 275
5901: ADD
5902: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5903: LD_ADDR_VAR 0 4
5907: PUSH
5908: LD_VAR 0 4
5912: PUSH
5913: LD_VAR 0 3
5917: PPUSH
5918: LD_INT 3
5920: PPUSH
5921: CALL_OW 275
5925: ADD
5926: ST_TO_ADDR
// result := sor ;
5927: LD_ADDR_VAR 0 2
5931: PUSH
5932: LD_VAR 0 4
5936: ST_TO_ADDR
// end ;
5937: LD_VAR 0 2
5941: RET
// export function Hex ( x , y ) ; begin
5942: LD_INT 0
5944: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5945: LD_VAR 0 1
5949: PPUSH
5950: LD_VAR 0 2
5954: PPUSH
5955: CALL_OW 488
5959: PUSH
5960: LD_VAR 0 1
5964: PPUSH
5965: LD_VAR 0 2
5969: PPUSH
5970: CALL_OW 428
5974: PUSH
5975: LD_INT 0
5977: EQUAL
5978: AND
5979: IFFALSE 5991
// result := true else
5981: LD_ADDR_VAR 0 3
5985: PUSH
5986: LD_INT 1
5988: ST_TO_ADDR
5989: GO 5999
// result := false ;
5991: LD_ADDR_VAR 0 3
5995: PUSH
5996: LD_INT 0
5998: ST_TO_ADDR
// end ;
5999: LD_VAR 0 3
6003: RET
// export function NeedBuilding ( side , btype ) ; begin
6004: LD_INT 0
6006: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
6007: LD_INT 22
6009: PUSH
6010: LD_VAR 0 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 30
6021: PUSH
6022: LD_VAR 0 2
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: LD_INT 3
6033: PUSH
6034: LD_INT 57
6036: PUSH
6037: EMPTY
6038: LIST
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: PPUSH
6049: CALL_OW 69
6053: PUSH
6054: LD_INT 0
6056: EQUAL
6057: IFFALSE 6069
// result := true else
6059: LD_ADDR_VAR 0 3
6063: PUSH
6064: LD_INT 1
6066: ST_TO_ADDR
6067: GO 6077
// result := false ;
6069: LD_ADDR_VAR 0 3
6073: PUSH
6074: LD_INT 0
6076: ST_TO_ADDR
// end ;
6077: LD_VAR 0 3
6081: RET
// export function NeedBase ( side ) ; begin
6082: LD_INT 0
6084: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6085: LD_VAR 0 1
6089: PPUSH
6090: LD_INT 0
6092: PPUSH
6093: CALL 6004 0 2
6097: PUSH
6098: LD_VAR 0 1
6102: PPUSH
6103: LD_INT 1
6105: PPUSH
6106: CALL 6004 0 2
6110: AND
6111: IFFALSE 6123
// result := true else
6113: LD_ADDR_VAR 0 2
6117: PUSH
6118: LD_INT 1
6120: ST_TO_ADDR
6121: GO 6131
// result := false ;
6123: LD_ADDR_VAR 0 2
6127: PUSH
6128: LD_INT 0
6130: ST_TO_ADDR
// end ;
6131: LD_VAR 0 2
6135: RET
// export function MyBase ( side ) ; begin
6136: LD_INT 0
6138: PPUSH
// if not NeedBase ( side ) then
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL 6082 0 1
6148: NOT
6149: IFFALSE 6214
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6151: LD_ADDR_VAR 0 2
6155: PUSH
6156: LD_INT 22
6158: PUSH
6159: LD_VAR 0 1
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 2
6170: PUSH
6171: LD_INT 30
6173: PUSH
6174: LD_INT 0
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 30
6183: PUSH
6184: LD_INT 1
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: PPUSH
6203: CALL_OW 69
6207: PUSH
6208: LD_INT 1
6210: ARRAY
6211: ST_TO_ADDR
6212: GO 6222
// result := false ;
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: LD_INT 0
6221: ST_TO_ADDR
// end ;
6222: LD_VAR 0 2
6226: RET
// export function GetBuilding ( side , btype ) ; begin
6227: LD_INT 0
6229: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6230: LD_INT 22
6232: PUSH
6233: LD_VAR 0 1
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 30
6244: PUSH
6245: LD_VAR 0 2
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PPUSH
6258: CALL_OW 69
6262: PUSH
6263: LD_INT 0
6265: GREATER
6266: IFFALSE 6308
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6268: LD_ADDR_VAR 0 3
6272: PUSH
6273: LD_INT 22
6275: PUSH
6276: LD_VAR 0 1
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: LD_INT 30
6287: PUSH
6288: LD_VAR 0 2
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PPUSH
6301: CALL_OW 69
6305: ST_TO_ADDR
6306: GO 6316
// result := false ;
6308: LD_ADDR_VAR 0 3
6312: PUSH
6313: LD_INT 0
6315: ST_TO_ADDR
// end ;
6316: LD_VAR 0 3
6320: RET
// export function GetCrates ( side ) ; begin
6321: LD_INT 0
6323: PPUSH
// result := 0 ;
6324: LD_ADDR_VAR 0 2
6328: PUSH
6329: LD_INT 0
6331: ST_TO_ADDR
// if MyBase ( side ) then
6332: LD_VAR 0 1
6336: PPUSH
6337: CALL 6136 0 1
6341: IFFALSE 6371
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6343: LD_ADDR_VAR 0 2
6347: PUSH
6348: LD_VAR 0 1
6352: PPUSH
6353: CALL 6136 0 1
6357: PPUSH
6358: CALL_OW 274
6362: PPUSH
6363: LD_INT 1
6365: PPUSH
6366: CALL_OW 275
6370: ST_TO_ADDR
// end ;
6371: LD_VAR 0 2
6375: RET
// export function GetLabs ( side ) ; begin
6376: LD_INT 0
6378: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6379: LD_ADDR_VAR 0 2
6383: PUSH
6384: LD_INT 22
6386: PUSH
6387: LD_VAR 0 1
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 2
6398: PUSH
6399: LD_INT 30
6401: PUSH
6402: LD_INT 6
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 30
6411: PUSH
6412: LD_INT 8
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 30
6421: PUSH
6422: LD_INT 7
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PUSH
6439: EMPTY
6440: LIST
6441: PPUSH
6442: CALL_OW 69
6446: ST_TO_ADDR
// end ;
6447: LD_VAR 0 2
6451: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6452: LD_INT 0
6454: PPUSH
6455: PPUSH
6456: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6457: LD_ADDR_VAR 0 3
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 1
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6475: LD_ADDR_VAR 0 4
6479: PUSH
6480: LD_VAR 0 1
6484: PPUSH
6485: LD_INT 2
6487: PPUSH
6488: CALL_OW 268
6492: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6493: LD_ADDR_VAR 0 2
6497: PUSH
6498: LD_VAR 0 3
6502: PUSH
6503: LD_VAR 0 4
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: ST_TO_ADDR
// end ;
6512: LD_VAR 0 2
6516: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6517: LD_INT 0
6519: PPUSH
6520: PPUSH
// result := false ;
6521: LD_ADDR_VAR 0 3
6525: PUSH
6526: LD_INT 0
6528: ST_TO_ADDR
// for i = 1 to tlist do
6529: LD_ADDR_VAR 0 4
6533: PUSH
6534: DOUBLE
6535: LD_INT 1
6537: DEC
6538: ST_TO_ADDR
6539: LD_VAR 0 2
6543: PUSH
6544: FOR_TO
6545: IFFALSE 6585
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6547: LD_VAR 0 2
6551: PUSH
6552: LD_VAR 0 4
6556: ARRAY
6557: PPUSH
6558: LD_VAR 0 1
6562: PPUSH
6563: CALL_OW 321
6567: PUSH
6568: LD_INT 2
6570: NONEQUAL
6571: IFFALSE 6583
// begin result := true ;
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_INT 1
6580: ST_TO_ADDR
// break ;
6581: GO 6585
// end ;
6583: GO 6544
6585: POP
6586: POP
// end ;
6587: LD_VAR 0 3
6591: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6592: LD_INT 0
6594: PPUSH
6595: PPUSH
6596: PPUSH
6597: PPUSH
6598: PPUSH
6599: PPUSH
6600: PPUSH
6601: PPUSH
// lab := GetLabs ( side ) ;
6602: LD_ADDR_VAR 0 5
6606: PUSH
6607: LD_VAR 0 1
6611: PPUSH
6612: CALL 6376 0 1
6616: ST_TO_ADDR
// tmp := 0 ;
6617: LD_ADDR_VAR 0 7
6621: PUSH
6622: LD_INT 0
6624: ST_TO_ADDR
// list := [ ] ;
6625: LD_ADDR_VAR 0 8
6629: PUSH
6630: EMPTY
6631: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6632: LD_ADDR_VAR 0 10
6636: PUSH
6637: LD_INT 35
6639: PUSH
6640: LD_INT 45
6642: PUSH
6643: LD_INT 46
6645: PUSH
6646: LD_INT 47
6648: PUSH
6649: LD_INT 1
6651: PUSH
6652: LD_INT 2
6654: PUSH
6655: LD_INT 48
6657: PUSH
6658: LD_INT 49
6660: PUSH
6661: LD_INT 50
6663: PUSH
6664: LD_INT 20
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: ST_TO_ADDR
// for i = 1 to tlist do
6679: LD_ADDR_VAR 0 4
6683: PUSH
6684: DOUBLE
6685: LD_INT 1
6687: DEC
6688: ST_TO_ADDR
6689: LD_VAR 0 2
6693: PUSH
6694: FOR_TO
6695: IFFALSE 6747
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6697: LD_VAR 0 2
6701: PUSH
6702: LD_VAR 0 4
6706: ARRAY
6707: PPUSH
6708: LD_VAR 0 1
6712: PPUSH
6713: CALL_OW 321
6717: PUSH
6718: LD_INT 2
6720: NONEQUAL
6721: IFFALSE 6745
// list := list ^ tlist [ i ] ;
6723: LD_ADDR_VAR 0 8
6727: PUSH
6728: LD_VAR 0 8
6732: PUSH
6733: LD_VAR 0 2
6737: PUSH
6738: LD_VAR 0 4
6742: ARRAY
6743: ADD
6744: ST_TO_ADDR
6745: GO 6694
6747: POP
6748: POP
// if list then
6749: LD_VAR 0 8
6753: IFFALSE 6918
// begin for i = 1 to lab do
6755: LD_ADDR_VAR 0 4
6759: PUSH
6760: DOUBLE
6761: LD_INT 1
6763: DEC
6764: ST_TO_ADDR
6765: LD_VAR 0 5
6769: PUSH
6770: FOR_TO
6771: IFFALSE 6841
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6773: LD_VAR 0 8
6777: PUSH
6778: LD_INT 1
6780: ARRAY
6781: PUSH
6782: LD_VAR 0 10
6786: IN
6787: PUSH
6788: LD_VAR 0 8
6792: PUSH
6793: LD_INT 1
6795: ARRAY
6796: PPUSH
6797: CALL_OW 481
6801: PUSH
6802: LD_VAR 0 5
6806: PUSH
6807: LD_VAR 0 4
6811: ARRAY
6812: PPUSH
6813: CALL 6452 0 1
6817: IN
6818: OR
6819: IFFALSE 6839
// begin mylab := lab [ i ] ;
6821: LD_ADDR_VAR 0 9
6825: PUSH
6826: LD_VAR 0 5
6830: PUSH
6831: LD_VAR 0 4
6835: ARRAY
6836: ST_TO_ADDR
// break ;
6837: GO 6841
// end ;
6839: GO 6770
6841: POP
6842: POP
// if mylab then
6843: LD_VAR 0 9
6847: IFFALSE 6908
// begin if BuildingStatus ( mylab ) = bs_idle then
6849: LD_VAR 0 9
6853: PPUSH
6854: CALL_OW 461
6858: PUSH
6859: LD_INT 2
6861: EQUAL
6862: IFFALSE 6906
// for i = 1 to list do
6864: LD_ADDR_VAR 0 4
6868: PUSH
6869: DOUBLE
6870: LD_INT 1
6872: DEC
6873: ST_TO_ADDR
6874: LD_VAR 0 8
6878: PUSH
6879: FOR_TO
6880: IFFALSE 6904
// AddComResearch ( mylab , list [ i ] ) ;
6882: LD_VAR 0 9
6886: PPUSH
6887: LD_VAR 0 8
6891: PUSH
6892: LD_VAR 0 4
6896: ARRAY
6897: PPUSH
6898: CALL_OW 184
6902: GO 6879
6904: POP
6905: POP
// end else
6906: GO 6916
// result := false ;
6908: LD_ADDR_VAR 0 3
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// end else
6916: GO 6926
// result := false ;
6918: LD_ADDR_VAR 0 3
6922: PUSH
6923: LD_INT 0
6925: ST_TO_ADDR
// end ;
6926: LD_VAR 0 3
6930: RET
// export function GetTowers ( side ) ; begin
6931: LD_INT 0
6933: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6934: LD_ADDR_VAR 0 2
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_VAR 0 1
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 2
6953: PUSH
6954: LD_INT 30
6956: PUSH
6957: LD_INT 32
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: LD_INT 30
6966: PUSH
6967: LD_INT 33
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PPUSH
6983: CALL_OW 69
6987: ST_TO_ADDR
// end ;
6988: LD_VAR 0 2
6992: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6993: LD_INT 0
6995: PPUSH
6996: PPUSH
// if Hex ( x , y ) then
6997: LD_VAR 0 2
7001: PPUSH
7002: LD_VAR 0 3
7006: PPUSH
7007: CALL 5942 0 2
7011: IFFALSE 7086
// for i = 1 to plist do
7013: LD_ADDR_VAR 0 6
7017: PUSH
7018: DOUBLE
7019: LD_INT 1
7021: DEC
7022: ST_TO_ADDR
7023: LD_VAR 0 1
7027: PUSH
7028: FOR_TO
7029: IFFALSE 7084
// if not HasTask ( plist [ i ] ) then
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: CALL_OW 314
7046: NOT
7047: IFFALSE 7082
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7049: LD_VAR 0 1
7053: PUSH
7054: LD_VAR 0 6
7058: ARRAY
7059: PPUSH
7060: LD_INT 0
7062: PPUSH
7063: LD_VAR 0 2
7067: PPUSH
7068: LD_VAR 0 3
7072: PPUSH
7073: LD_VAR 0 4
7077: PPUSH
7078: CALL_OW 145
7082: GO 7028
7084: POP
7085: POP
// end ;
7086: LD_VAR 0 5
7090: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7091: LD_INT 0
7093: PPUSH
7094: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL_OW 266
7104: PUSH
7105: LD_INT 0
7107: EQUAL
7108: PUSH
7109: LD_VAR 0 2
7113: PPUSH
7114: LD_INT 1
7116: PPUSH
7117: CALL 5712 0 2
7121: AND
7122: PUSH
7123: LD_VAR 0 1
7127: PUSH
7128: LD_INT 1
7130: ARRAY
7131: PPUSH
7132: CALL_OW 255
7136: PPUSH
7137: CALL_OW 345
7141: NOT
7142: AND
7143: IFFALSE 7239
// begin ComUpgrade ( bident ) ;
7145: LD_VAR 0 2
7149: PPUSH
7150: CALL_OW 146
// for i = 1 to plist do
7154: LD_ADDR_VAR 0 4
7158: PUSH
7159: DOUBLE
7160: LD_INT 1
7162: DEC
7163: ST_TO_ADDR
7164: LD_VAR 0 1
7168: PUSH
7169: FOR_TO
7170: IFFALSE 7227
// if not HasTask ( plist [ i ] ) then
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: CALL_OW 314
7187: NOT
7188: IFFALSE 7225
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7190: LD_VAR 0 1
7194: PUSH
7195: LD_VAR 0 4
7199: ARRAY
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: CALL_OW 250
7210: PPUSH
7211: LD_VAR 0 2
7215: PPUSH
7216: CALL_OW 251
7220: PPUSH
7221: CALL_OW 111
7225: GO 7169
7227: POP
7228: POP
// result := true ;
7229: LD_ADDR_VAR 0 3
7233: PUSH
7234: LD_INT 1
7236: ST_TO_ADDR
// end else
7237: GO 7247
// result := false ;
7239: LD_ADDR_VAR 0 3
7243: PUSH
7244: LD_INT 0
7246: ST_TO_ADDR
// end ;
7247: LD_VAR 0 3
7251: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7252: LD_INT 0
7254: PPUSH
7255: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7256: LD_VAR 0 1
7260: PUSH
7261: LD_INT 1
7263: ARRAY
7264: PPUSH
7265: CALL_OW 255
7269: PPUSH
7270: CALL 6321 0 1
7274: PUSH
7275: LD_INT 20
7277: GREATEREQUAL
7278: PUSH
7279: LD_VAR 0 2
7283: PPUSH
7284: LD_VAR 0 3
7288: PPUSH
7289: CALL 5942 0 2
7293: AND
7294: IFFALSE 7379
// begin for i = 1 to plist do
7296: LD_ADDR_VAR 0 6
7300: PUSH
7301: DOUBLE
7302: LD_INT 1
7304: DEC
7305: ST_TO_ADDR
7306: LD_VAR 0 1
7310: PUSH
7311: FOR_TO
7312: IFFALSE 7367
// if not HasTask ( plist [ i ] ) then
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: CALL_OW 314
7329: NOT
7330: IFFALSE 7365
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7332: LD_VAR 0 1
7336: PUSH
7337: LD_VAR 0 6
7341: ARRAY
7342: PPUSH
7343: LD_INT 6
7345: PPUSH
7346: LD_VAR 0 2
7350: PPUSH
7351: LD_VAR 0 3
7355: PPUSH
7356: LD_VAR 0 4
7360: PPUSH
7361: CALL_OW 145
7365: GO 7311
7367: POP
7368: POP
// result := true ;
7369: LD_ADDR_VAR 0 5
7373: PUSH
7374: LD_INT 1
7376: ST_TO_ADDR
// end else
7377: GO 7387
// result := false ;
7379: LD_ADDR_VAR 0 5
7383: PUSH
7384: LD_INT 0
7386: ST_TO_ADDR
// end ;
7387: LD_VAR 0 5
7391: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7392: LD_INT 0
7394: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7395: LD_VAR 0 1
7399: PPUSH
7400: LD_INT 1
7402: PPUSH
7403: CALL_OW 268
7407: PUSH
7408: LD_INT 9
7410: EQUAL
7411: PUSH
7412: LD_VAR 0 1
7416: PPUSH
7417: LD_INT 2
7419: PPUSH
7420: CALL_OW 268
7424: PUSH
7425: LD_INT 9
7427: EQUAL
7428: AND
7429: IFFALSE 7526
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7431: LD_VAR 0 1
7435: PPUSH
7436: LD_VAR 0 2
7440: PPUSH
7441: CALL 5712 0 2
7445: PUSH
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_VAR 0 3
7455: PPUSH
7456: CALL 5712 0 2
7460: AND
7461: PUSH
7462: LD_VAR 0 1
7466: PPUSH
7467: CALL_OW 461
7471: PUSH
7472: LD_INT 2
7474: EQUAL
7475: AND
7476: IFFALSE 7516
// begin ComUpgradeLab ( lab , bkind1 ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: LD_VAR 0 2
7487: PPUSH
7488: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7492: LD_VAR 0 1
7496: PPUSH
7497: LD_VAR 0 3
7501: PPUSH
7502: CALL_OW 207
// result := true ;
7506: LD_ADDR_VAR 0 4
7510: PUSH
7511: LD_INT 1
7513: ST_TO_ADDR
// end else
7514: GO 7524
// result := false ;
7516: LD_ADDR_VAR 0 4
7520: PUSH
7521: LD_INT 0
7523: ST_TO_ADDR
// end else
7524: GO 7534
// result := false ;
7526: LD_ADDR_VAR 0 4
7530: PUSH
7531: LD_INT 0
7533: ST_TO_ADDR
// end ;
7534: LD_VAR 0 4
7538: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7539: LD_INT 0
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
7545: PPUSH
// p := 1 ;
7546: LD_ADDR_VAR 0 6
7550: PUSH
7551: LD_INT 1
7553: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7554: LD_ADDR_VAR 0 4
7558: PUSH
7559: DOUBLE
7560: LD_INT 1
7562: DEC
7563: ST_TO_ADDR
7564: LD_VAR 0 2
7568: PUSH
7569: LD_INT 4
7571: DIVREAL
7572: PUSH
7573: FOR_TO
7574: IFFALSE 7823
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7576: LD_VAR 0 2
7580: PUSH
7581: LD_VAR 0 6
7585: PUSH
7586: LD_INT 1
7588: PLUS
7589: ARRAY
7590: PPUSH
7591: LD_VAR 0 2
7595: PUSH
7596: LD_VAR 0 6
7600: PUSH
7601: LD_INT 2
7603: PLUS
7604: ARRAY
7605: PPUSH
7606: CALL_OW 428
7610: PUSH
7611: LD_INT 0
7613: EQUAL
7614: PUSH
7615: LD_VAR 0 2
7619: PUSH
7620: LD_VAR 0 6
7624: PUSH
7625: LD_INT 1
7627: PLUS
7628: ARRAY
7629: PPUSH
7630: LD_VAR 0 2
7634: PUSH
7635: LD_VAR 0 6
7639: PUSH
7640: LD_INT 2
7642: PLUS
7643: ARRAY
7644: PPUSH
7645: CALL 5942 0 2
7649: AND
7650: PUSH
7651: LD_VAR 0 1
7655: PUSH
7656: LD_INT 1
7658: ARRAY
7659: PPUSH
7660: CALL_OW 255
7664: PPUSH
7665: CALL 6321 0 1
7669: PUSH
7670: LD_INT 20
7672: GREATEREQUAL
7673: AND
7674: IFFALSE 7791
// begin for c = 1 to plist do
7676: LD_ADDR_VAR 0 7
7680: PUSH
7681: DOUBLE
7682: LD_INT 1
7684: DEC
7685: ST_TO_ADDR
7686: LD_VAR 0 1
7690: PUSH
7691: FOR_TO
7692: IFFALSE 7785
// if not HasTask ( plist [ c ] ) then
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: CALL_OW 314
7709: NOT
7710: IFFALSE 7783
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7712: LD_VAR 0 1
7716: PUSH
7717: LD_VAR 0 7
7721: ARRAY
7722: PPUSH
7723: LD_VAR 0 2
7727: PUSH
7728: LD_VAR 0 6
7732: ARRAY
7733: PPUSH
7734: LD_VAR 0 2
7738: PUSH
7739: LD_VAR 0 6
7743: PUSH
7744: LD_INT 1
7746: PLUS
7747: ARRAY
7748: PPUSH
7749: LD_VAR 0 2
7753: PUSH
7754: LD_VAR 0 6
7758: PUSH
7759: LD_INT 2
7761: PLUS
7762: ARRAY
7763: PPUSH
7764: LD_VAR 0 2
7768: PUSH
7769: LD_VAR 0 6
7773: PUSH
7774: LD_INT 3
7776: PLUS
7777: ARRAY
7778: PPUSH
7779: CALL_OW 145
7783: GO 7691
7785: POP
7786: POP
// break ;
7787: GO 7823
// end else
7789: GO 7821
// if ( p + 4 < tlist ) then
7791: LD_VAR 0 6
7795: PUSH
7796: LD_INT 4
7798: PLUS
7799: PUSH
7800: LD_VAR 0 2
7804: LESS
7805: IFFALSE 7821
// p := p + 4 ;
7807: LD_ADDR_VAR 0 6
7811: PUSH
7812: LD_VAR 0 6
7816: PUSH
7817: LD_INT 4
7819: PLUS
7820: ST_TO_ADDR
// end ;
7821: GO 7573
7823: POP
7824: POP
// end ;
7825: LD_VAR 0 3
7829: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7830: LD_INT 0
7832: PPUSH
7833: PPUSH
7834: PPUSH
7835: PPUSH
// tmp := GetTowers ( side ) ;
7836: LD_ADDR_VAR 0 5
7840: PUSH
7841: LD_VAR 0 1
7845: PPUSH
7846: CALL 6931 0 1
7850: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7851: LD_ADDR_VAR 0 6
7855: PUSH
7856: LD_VAR 0 1
7860: PPUSH
7861: LD_INT 3
7863: PPUSH
7864: CALL 6227 0 2
7868: PUSH
7869: LD_INT 1
7871: ARRAY
7872: ST_TO_ADDR
// if fac then
7873: LD_VAR 0 6
7877: IFFALSE 7973
// for i = 1 to tmp do
7879: LD_ADDR_VAR 0 4
7883: PUSH
7884: DOUBLE
7885: LD_INT 1
7887: DEC
7888: ST_TO_ADDR
7889: LD_VAR 0 5
7893: PUSH
7894: FOR_TO
7895: IFFALSE 7971
// if GetBWeapon ( tmp [ i ] ) = 0 then
7897: LD_VAR 0 5
7901: PUSH
7902: LD_VAR 0 4
7906: ARRAY
7907: PPUSH
7908: CALL_OW 269
7912: PUSH
7913: LD_INT 0
7915: EQUAL
7916: IFFALSE 7969
// begin if BuildingStatus ( fac ) = bs_idle then
7918: LD_VAR 0 6
7922: PPUSH
7923: CALL_OW 461
7927: PUSH
7928: LD_INT 2
7930: EQUAL
7931: IFFALSE 7967
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7933: LD_VAR 0 5
7937: PUSH
7938: LD_VAR 0 4
7942: ARRAY
7943: PPUSH
7944: LD_VAR 0 2
7948: PUSH
7949: LD_INT 1
7951: PPUSH
7952: LD_VAR 0 2
7956: PPUSH
7957: CALL_OW 12
7961: ARRAY
7962: PPUSH
7963: CALL_OW 148
// break ;
7967: GO 7971
// end ;
7969: GO 7894
7971: POP
7972: POP
// end ;
7973: LD_VAR 0 3
7977: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7978: LD_INT 0
7980: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7981: LD_INT 22
7983: PUSH
7984: LD_VAR 0 1
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PUSH
7993: LD_INT 34
7995: PUSH
7996: LD_VAR 0 3
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 31
8007: PUSH
8008: LD_VAR 0 2
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: PUSH
8022: EMPTY
8023: LIST
8024: PPUSH
8025: CALL_OW 69
8029: IFFALSE 8087
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8031: LD_ADDR_VAR 0 4
8035: PUSH
8036: LD_INT 22
8038: PUSH
8039: LD_VAR 0 1
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 34
8050: PUSH
8051: LD_VAR 0 3
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 31
8062: PUSH
8063: LD_VAR 0 2
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: PPUSH
8080: CALL_OW 69
8084: ST_TO_ADDR
8085: GO 8095
// result := false ;
8087: LD_ADDR_VAR 0 4
8091: PUSH
8092: LD_INT 0
8094: ST_TO_ADDR
// end ;
8095: LD_VAR 0 4
8099: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8100: LD_INT 0
8102: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8103: LD_VAR 0 1
8107: PPUSH
8108: LD_VAR 0 2
8112: PPUSH
8113: LD_VAR 0 3
8117: PPUSH
8118: LD_VAR 0 4
8122: PPUSH
8123: LD_VAR 0 5
8127: PPUSH
8128: CALL_OW 448
8132: PUSH
8133: LD_VAR 0 2
8137: PPUSH
8138: LD_VAR 0 3
8142: PPUSH
8143: LD_VAR 0 4
8147: PPUSH
8148: LD_VAR 0 5
8152: PPUSH
8153: CALL_OW 449
8157: PUSH
8158: LD_INT 1
8160: ARRAY
8161: PUSH
8162: LD_VAR 0 1
8166: PPUSH
8167: CALL 5828 0 1
8171: PUSH
8172: LD_INT 1
8174: ARRAY
8175: LESSEQUAL
8176: AND
8177: PUSH
8178: LD_VAR 0 2
8182: PPUSH
8183: LD_VAR 0 3
8187: PPUSH
8188: LD_VAR 0 4
8192: PPUSH
8193: LD_VAR 0 5
8197: PPUSH
8198: CALL_OW 449
8202: PUSH
8203: LD_INT 2
8205: ARRAY
8206: PUSH
8207: LD_VAR 0 1
8211: PPUSH
8212: CALL 5828 0 1
8216: PUSH
8217: LD_INT 2
8219: ARRAY
8220: LESSEQUAL
8221: AND
8222: PUSH
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_VAR 0 3
8232: PPUSH
8233: LD_VAR 0 4
8237: PPUSH
8238: LD_VAR 0 5
8242: PPUSH
8243: CALL_OW 449
8247: PUSH
8248: LD_INT 3
8250: ARRAY
8251: PUSH
8252: LD_VAR 0 1
8256: PPUSH
8257: CALL 5828 0 1
8261: PUSH
8262: LD_INT 3
8264: ARRAY
8265: LESSEQUAL
8266: AND
8267: IFFALSE 8314
// begin if debug then
8269: LD_EXP 1
8273: IFFALSE 8283
// display_strings := Factory work! ;
8275: LD_ADDR_OWVAR 47
8279: PUSH
8280: LD_STRING Factory work!
8282: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8283: LD_VAR 0 1
8287: PPUSH
8288: LD_VAR 0 2
8292: PPUSH
8293: LD_VAR 0 3
8297: PPUSH
8298: LD_VAR 0 4
8302: PPUSH
8303: LD_VAR 0 5
8307: PPUSH
8308: CALL_OW 125
// end else
8312: GO 8322
// result := false ;
8314: LD_ADDR_VAR 0 6
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// end ;
8322: LD_VAR 0 6
8326: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8327: LD_INT 0
8329: PPUSH
8330: PPUSH
8331: PPUSH
8332: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8333: LD_ADDR_VAR 0 6
8337: PUSH
8338: LD_INT 22
8340: PUSH
8341: LD_VAR 0 1
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: LD_INT 30
8352: PUSH
8353: LD_VAR 0 2
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PPUSH
8366: CALL_OW 69
8370: ST_TO_ADDR
// tmp := [ ] ;
8371: LD_ADDR_VAR 0 5
8375: PUSH
8376: EMPTY
8377: ST_TO_ADDR
// for i = 1 to filter do
8378: LD_ADDR_VAR 0 4
8382: PUSH
8383: DOUBLE
8384: LD_INT 1
8386: DEC
8387: ST_TO_ADDR
8388: LD_VAR 0 6
8392: PUSH
8393: FOR_TO
8394: IFFALSE 8482
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8396: LD_ADDR_VAR 0 5
8400: PUSH
8401: LD_VAR 0 5
8405: PUSH
8406: LD_VAR 0 6
8410: PUSH
8411: LD_VAR 0 4
8415: ARRAY
8416: PPUSH
8417: CALL_OW 266
8421: PUSH
8422: LD_VAR 0 6
8426: PUSH
8427: LD_VAR 0 4
8431: ARRAY
8432: PPUSH
8433: CALL_OW 250
8437: PUSH
8438: LD_VAR 0 6
8442: PUSH
8443: LD_VAR 0 4
8447: ARRAY
8448: PPUSH
8449: CALL_OW 251
8453: PUSH
8454: LD_VAR 0 6
8458: PUSH
8459: LD_VAR 0 4
8463: ARRAY
8464: PPUSH
8465: CALL_OW 254
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: PUSH
8476: EMPTY
8477: LIST
8478: ADD
8479: ST_TO_ADDR
// end ;
8480: GO 8393
8482: POP
8483: POP
// result := tmp ;
8484: LD_ADDR_VAR 0 3
8488: PUSH
8489: LD_VAR 0 5
8493: ST_TO_ADDR
// end ;
8494: LD_VAR 0 3
8498: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8499: LD_INT 0
8501: PPUSH
8502: PPUSH
8503: PPUSH
// for i = 1 to list do
8504: LD_ADDR_VAR 0 4
8508: PUSH
8509: DOUBLE
8510: LD_INT 1
8512: DEC
8513: ST_TO_ADDR
8514: LD_VAR 0 2
8518: PUSH
8519: FOR_TO
8520: IFFALSE 9075
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8522: LD_VAR 0 2
8526: PUSH
8527: LD_VAR 0 4
8531: ARRAY
8532: PUSH
8533: LD_INT 1
8535: ARRAY
8536: PPUSH
8537: LD_VAR 0 2
8541: PUSH
8542: LD_VAR 0 4
8546: ARRAY
8547: PUSH
8548: LD_INT 2
8550: ARRAY
8551: PPUSH
8552: CALL_OW 428
8556: PUSH
8557: LD_INT 0
8559: GREATER
8560: IFFALSE 8846
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8562: LD_VAR 0 2
8566: PUSH
8567: LD_VAR 0 4
8571: ARRAY
8572: PUSH
8573: LD_INT 1
8575: ARRAY
8576: PPUSH
8577: LD_VAR 0 2
8581: PUSH
8582: LD_VAR 0 4
8586: ARRAY
8587: PUSH
8588: LD_INT 2
8590: ARRAY
8591: PPUSH
8592: CALL_OW 428
8596: PPUSH
8597: CALL_OW 248
8601: PUSH
8602: LD_INT 3
8604: EQUAL
8605: IFFALSE 8731
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8607: LD_VAR 0 2
8611: PUSH
8612: LD_VAR 0 4
8616: ARRAY
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: PPUSH
8622: LD_VAR 0 2
8626: PUSH
8627: LD_VAR 0 4
8631: ARRAY
8632: PUSH
8633: LD_INT 2
8635: ARRAY
8636: PPUSH
8637: CALL_OW 428
8641: PPUSH
8642: CALL_OW 274
8646: PPUSH
8647: LD_INT 3
8649: PPUSH
8650: CALL_OW 275
8654: PUSH
8655: LD_INT 15
8657: GREATEREQUAL
8658: IFFALSE 8729
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8660: LD_VAR 0 2
8664: PUSH
8665: LD_VAR 0 4
8669: ARRAY
8670: PUSH
8671: LD_INT 1
8673: ARRAY
8674: PPUSH
8675: LD_VAR 0 2
8679: PUSH
8680: LD_VAR 0 4
8684: ARRAY
8685: PUSH
8686: LD_INT 2
8688: ARRAY
8689: PPUSH
8690: CALL_OW 428
8694: PPUSH
8695: LD_VAR 0 2
8699: PUSH
8700: LD_VAR 0 4
8704: ARRAY
8705: PUSH
8706: LD_INT 4
8708: ARRAY
8709: PPUSH
8710: LD_VAR 0 2
8714: PUSH
8715: LD_VAR 0 4
8719: ARRAY
8720: PUSH
8721: LD_INT 5
8723: ARRAY
8724: PPUSH
8725: CALL 7392 0 3
// end else
8729: GO 8800
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8731: LD_VAR 0 2
8735: PUSH
8736: LD_VAR 0 4
8740: ARRAY
8741: PUSH
8742: LD_INT 1
8744: ARRAY
8745: PPUSH
8746: LD_VAR 0 2
8750: PUSH
8751: LD_VAR 0 4
8755: ARRAY
8756: PUSH
8757: LD_INT 2
8759: ARRAY
8760: PPUSH
8761: CALL_OW 428
8765: PPUSH
8766: LD_VAR 0 2
8770: PUSH
8771: LD_VAR 0 4
8775: ARRAY
8776: PUSH
8777: LD_INT 4
8779: ARRAY
8780: PPUSH
8781: LD_VAR 0 2
8785: PUSH
8786: LD_VAR 0 4
8790: ARRAY
8791: PUSH
8792: LD_INT 5
8794: ARRAY
8795: PPUSH
8796: CALL 7392 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8800: LD_VAR 0 1
8804: PPUSH
8805: LD_VAR 0 2
8809: PUSH
8810: LD_VAR 0 4
8814: ARRAY
8815: PUSH
8816: LD_INT 1
8818: ARRAY
8819: PPUSH
8820: LD_VAR 0 2
8824: PUSH
8825: LD_VAR 0 4
8829: ARRAY
8830: PUSH
8831: LD_INT 2
8833: ARRAY
8834: PPUSH
8835: CALL_OW 428
8839: PPUSH
8840: CALL 10344 0 2
// end else
8844: GO 9073
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8846: LD_VAR 0 1
8850: PUSH
8851: LD_INT 1
8853: ARRAY
8854: PPUSH
8855: CALL_OW 255
8859: PPUSH
8860: CALL 6136 0 1
8864: PPUSH
8865: LD_INT 6
8867: PPUSH
8868: CALL 5712 0 2
8872: PUSH
8873: LD_VAR 0 1
8877: PUSH
8878: LD_INT 1
8880: ARRAY
8881: PPUSH
8882: CALL_OW 255
8886: PPUSH
8887: CALL 6136 0 1
8891: PPUSH
8892: LD_VAR 0 2
8896: PUSH
8897: LD_VAR 0 4
8901: ARRAY
8902: PUSH
8903: LD_INT 4
8905: ARRAY
8906: PPUSH
8907: CALL 5712 0 2
8911: AND
8912: PUSH
8913: LD_VAR 0 1
8917: PUSH
8918: LD_INT 1
8920: ARRAY
8921: PPUSH
8922: CALL_OW 255
8926: PPUSH
8927: CALL 6136 0 1
8931: PPUSH
8932: LD_VAR 0 2
8936: PUSH
8937: LD_VAR 0 4
8941: ARRAY
8942: PUSH
8943: LD_INT 5
8945: ARRAY
8946: PPUSH
8947: CALL 5712 0 2
8951: AND
8952: IFFALSE 9073
// for p = 1 to plist do
8954: LD_ADDR_VAR 0 5
8958: PUSH
8959: DOUBLE
8960: LD_INT 1
8962: DEC
8963: ST_TO_ADDR
8964: LD_VAR 0 1
8968: PUSH
8969: FOR_TO
8970: IFFALSE 9071
// if IsInUnit ( plist [ p ] ) then
8972: LD_VAR 0 1
8976: PUSH
8977: LD_VAR 0 5
8981: ARRAY
8982: PPUSH
8983: CALL_OW 310
8987: IFFALSE 9006
// ComExitBuilding ( plist [ p ] ) else
8989: LD_VAR 0 1
8993: PUSH
8994: LD_VAR 0 5
8998: ARRAY
8999: PPUSH
9000: CALL_OW 122
9004: GO 9069
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
9006: LD_VAR 0 1
9010: PUSH
9011: LD_VAR 0 5
9015: ARRAY
9016: PPUSH
9017: LD_INT 6
9019: PPUSH
9020: LD_VAR 0 2
9024: PUSH
9025: LD_VAR 0 4
9029: ARRAY
9030: PUSH
9031: LD_INT 1
9033: ARRAY
9034: PPUSH
9035: LD_VAR 0 2
9039: PUSH
9040: LD_VAR 0 4
9044: ARRAY
9045: PUSH
9046: LD_INT 2
9048: ARRAY
9049: PPUSH
9050: LD_VAR 0 2
9054: PUSH
9055: LD_VAR 0 4
9059: ARRAY
9060: PUSH
9061: LD_INT 3
9063: ARRAY
9064: PPUSH
9065: CALL_OW 145
9069: GO 8969
9071: POP
9072: POP
// end ;
9073: GO 8519
9075: POP
9076: POP
// end ;
9077: LD_VAR 0 3
9081: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9082: LD_INT 0
9084: PPUSH
// if IsInUnit ( sci ) then
9085: LD_VAR 0 1
9089: PPUSH
9090: CALL_OW 310
9094: IFFALSE 9107
// ComExitBuilding ( sci ) else
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 122
9105: GO 9138
// if not HasTask ( sci ) then
9107: LD_VAR 0 1
9111: PPUSH
9112: CALL_OW 314
9116: NOT
9117: IFFALSE 9138
// begin ComMoveXY ( sci , x , y ) ;
9119: LD_VAR 0 1
9123: PPUSH
9124: LD_VAR 0 2
9128: PPUSH
9129: LD_VAR 0 3
9133: PPUSH
9134: CALL_OW 111
// end ; end ;
9138: LD_VAR 0 4
9142: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9143: LD_INT 0
9145: PPUSH
9146: PPUSH
9147: PPUSH
9148: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9149: LD_ADDR_VAR 0 6
9153: PUSH
9154: LD_INT 22
9156: PUSH
9157: LD_VAR 0 1
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PUSH
9166: LD_INT 21
9168: PUSH
9169: LD_INT 1
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PPUSH
9180: CALL_OW 69
9184: PUSH
9185: LD_VAR 0 3
9189: DIFF
9190: ST_TO_ADDR
// tmp := tag_list ;
9191: LD_ADDR_VAR 0 7
9195: PUSH
9196: LD_VAR 0 2
9200: ST_TO_ADDR
// for i = 1 to filter do
9201: LD_ADDR_VAR 0 5
9205: PUSH
9206: DOUBLE
9207: LD_INT 1
9209: DEC
9210: ST_TO_ADDR
9211: LD_VAR 0 6
9215: PUSH
9216: FOR_TO
9217: IFFALSE 9486
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9219: LD_VAR 0 6
9223: PUSH
9224: LD_VAR 0 5
9228: ARRAY
9229: PPUSH
9230: CALL_OW 256
9234: PUSH
9235: LD_INT 1000
9237: EQUAL
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_VAR 0 5
9248: ARRAY
9249: PPUSH
9250: CALL_OW 110
9254: PUSH
9255: LD_INT 100
9257: GREATEREQUAL
9258: AND
9259: IFFALSE 9301
// begin SetTag ( filter [ i ] , 0 ) ;
9261: LD_VAR 0 6
9265: PUSH
9266: LD_VAR 0 5
9270: ARRAY
9271: PPUSH
9272: LD_INT 0
9274: PPUSH
9275: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9279: LD_ADDR_VAR 0 7
9283: PUSH
9284: LD_VAR 0 7
9288: PUSH
9289: LD_VAR 0 6
9293: PUSH
9294: LD_VAR 0 5
9298: ARRAY
9299: DIFF
9300: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9301: LD_VAR 0 6
9305: PUSH
9306: LD_VAR 0 5
9310: ARRAY
9311: PPUSH
9312: CALL_OW 256
9316: PUSH
9317: LD_INT 1000
9319: LESS
9320: IFFALSE 9484
// begin if not filter [ i ] in tmp then
9322: LD_VAR 0 6
9326: PUSH
9327: LD_VAR 0 5
9331: ARRAY
9332: PUSH
9333: LD_VAR 0 7
9337: IN
9338: NOT
9339: IFFALSE 9363
// tmp := tmp ^ filter [ i ] ;
9341: LD_ADDR_VAR 0 7
9345: PUSH
9346: LD_VAR 0 7
9350: PUSH
9351: LD_VAR 0 6
9355: PUSH
9356: LD_VAR 0 5
9360: ARRAY
9361: ADD
9362: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9363: LD_VAR 0 6
9367: PUSH
9368: LD_VAR 0 5
9372: ARRAY
9373: PPUSH
9374: CALL_OW 256
9378: PUSH
9379: LD_INT 250
9381: LESS
9382: IFFALSE 9404
// SetTag ( filter [ i ] , 100 ) else
9384: LD_VAR 0 6
9388: PUSH
9389: LD_VAR 0 5
9393: ARRAY
9394: PPUSH
9395: LD_INT 100
9397: PPUSH
9398: CALL_OW 109
9402: GO 9484
// if GetLives ( filter [ i ] ) < 500 then
9404: LD_VAR 0 6
9408: PUSH
9409: LD_VAR 0 5
9413: ARRAY
9414: PPUSH
9415: CALL_OW 256
9419: PUSH
9420: LD_INT 500
9422: LESS
9423: IFFALSE 9445
// SetTag ( filter [ i ] , 101 ) else
9425: LD_VAR 0 6
9429: PUSH
9430: LD_VAR 0 5
9434: ARRAY
9435: PPUSH
9436: LD_INT 101
9438: PPUSH
9439: CALL_OW 109
9443: GO 9484
// if GetLives ( filter [ i ] ) < 1000 then
9445: LD_VAR 0 6
9449: PUSH
9450: LD_VAR 0 5
9454: ARRAY
9455: PPUSH
9456: CALL_OW 256
9460: PUSH
9461: LD_INT 1000
9463: LESS
9464: IFFALSE 9484
// SetTag ( filter [ i ] , 102 ) ;
9466: LD_VAR 0 6
9470: PUSH
9471: LD_VAR 0 5
9475: ARRAY
9476: PPUSH
9477: LD_INT 102
9479: PPUSH
9480: CALL_OW 109
// end ; end ;
9484: GO 9216
9486: POP
9487: POP
// result := tmp ;
9488: LD_ADDR_VAR 0 4
9492: PUSH
9493: LD_VAR 0 7
9497: ST_TO_ADDR
// end ;
9498: LD_VAR 0 4
9502: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9503: LD_INT 0
9505: PPUSH
9506: PPUSH
9507: PPUSH
9508: PPUSH
9509: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9510: LD_ADDR_VAR 0 7
9514: PUSH
9515: LD_INT 22
9517: PUSH
9518: LD_VAR 0 2
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: LD_INT 3
9529: PUSH
9530: LD_INT 21
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PPUSH
9548: CALL_OW 69
9552: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9553: LD_ADDR_VAR 0 5
9557: PUSH
9558: LD_INT 1
9560: PPUSH
9561: LD_INT 3
9563: PPUSH
9564: CALL_OW 12
9568: ST_TO_ADDR
// if filter > 0 then
9569: LD_VAR 0 7
9573: PUSH
9574: LD_INT 0
9576: GREATER
9577: IFFALSE 9779
// for i = 1 to list do
9579: LD_ADDR_VAR 0 6
9583: PUSH
9584: DOUBLE
9585: LD_INT 1
9587: DEC
9588: ST_TO_ADDR
9589: LD_VAR 0 1
9593: PUSH
9594: FOR_TO
9595: IFFALSE 9777
// for ta in filter do
9597: LD_ADDR_VAR 0 4
9601: PUSH
9602: LD_VAR 0 7
9606: PUSH
9607: FOR_IN
9608: IFFALSE 9773
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9610: LD_VAR 0 1
9614: PUSH
9615: LD_VAR 0 6
9619: ARRAY
9620: PPUSH
9621: LD_VAR 0 4
9625: PPUSH
9626: CALL_OW 296
9630: PUSH
9631: LD_INT 13
9633: LESSEQUAL
9634: IFFALSE 9771
// begin case c of 1 :
9636: LD_VAR 0 5
9640: PUSH
9641: LD_INT 1
9643: DOUBLE
9644: EQUAL
9645: IFTRUE 9649
9647: GO 9687
9649: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9650: LD_VAR 0 1
9654: PUSH
9655: LD_VAR 0 6
9659: ARRAY
9660: PPUSH
9661: LD_VAR 0 4
9665: PPUSH
9666: CALL_OW 250
9670: PPUSH
9671: LD_VAR 0 4
9675: PPUSH
9676: CALL_OW 251
9680: PPUSH
9681: CALL_OW 154
9685: GO 9771
9687: LD_INT 2
9689: DOUBLE
9690: EQUAL
9691: IFTRUE 9695
9693: GO 9759
9695: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9696: LD_VAR 0 1
9700: PUSH
9701: LD_VAR 0 6
9705: ARRAY
9706: PPUSH
9707: LD_VAR 0 4
9711: PPUSH
9712: CALL_OW 250
9716: PUSH
9717: LD_INT 1
9719: NEG
9720: PPUSH
9721: LD_INT 1
9723: PPUSH
9724: CALL_OW 12
9728: PLUS
9729: PPUSH
9730: LD_VAR 0 4
9734: PPUSH
9735: CALL_OW 251
9739: PUSH
9740: LD_INT 1
9742: NEG
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: CALL_OW 12
9751: PLUS
9752: PPUSH
9753: CALL_OW 153
9757: GO 9771
9759: LD_INT 3
9761: DOUBLE
9762: EQUAL
9763: IFTRUE 9767
9765: GO 9770
9767: POP
// ; end ;
9768: GO 9771
9770: POP
// end ; end ;
9771: GO 9607
9773: POP
9774: POP
9775: GO 9594
9777: POP
9778: POP
// end ;
9779: LD_VAR 0 3
9783: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9784: LD_INT 0
9786: PPUSH
9787: PPUSH
// for i = 1 to plist do
9788: LD_ADDR_VAR 0 3
9792: PUSH
9793: DOUBLE
9794: LD_INT 1
9796: DEC
9797: ST_TO_ADDR
9798: LD_VAR 0 1
9802: PUSH
9803: FOR_TO
9804: IFFALSE 10006
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9806: LD_VAR 0 1
9810: PUSH
9811: LD_VAR 0 3
9815: ARRAY
9816: PPUSH
9817: CALL_OW 310
9821: PUSH
9822: LD_INT 30
9824: PUSH
9825: LD_INT 5
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: EMPTY
9833: LIST
9834: PPUSH
9835: CALL_OW 69
9839: IN
9840: NOT
9841: IFFALSE 9986
// begin if IsInUnit ( plist [ i ] ) then
9843: LD_VAR 0 1
9847: PUSH
9848: LD_VAR 0 3
9852: ARRAY
9853: PPUSH
9854: CALL_OW 310
9858: IFFALSE 9877
// ComExitBuilding ( plist [ i ] ) else
9860: LD_VAR 0 1
9864: PUSH
9865: LD_VAR 0 3
9869: ARRAY
9870: PPUSH
9871: CALL_OW 122
9875: GO 9984
// if not HasTask ( plist [ i ] ) then
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: CALL_OW 314
9892: NOT
9893: IFFALSE 9984
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9895: LD_VAR 0 1
9899: PUSH
9900: LD_VAR 0 3
9904: ARRAY
9905: PPUSH
9906: LD_INT 22
9908: PUSH
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 1
9916: ARRAY
9917: PPUSH
9918: CALL_OW 255
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 30
9929: PUSH
9930: LD_INT 5
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PPUSH
9941: CALL_OW 69
9945: PPUSH
9946: LD_VAR 0 1
9950: PUSH
9951: LD_VAR 0 3
9955: ARRAY
9956: PPUSH
9957: CALL_OW 74
9961: PPUSH
9962: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9966: LD_VAR 0 1
9970: PUSH
9971: LD_VAR 0 3
9975: ARRAY
9976: PPUSH
9977: LD_INT 9
9979: PPUSH
9980: CALL_OW 183
// end ; end else
9984: GO 10004
// ComChangeProfession ( plist [ i ] , 9 ) ;
9986: LD_VAR 0 1
9990: PUSH
9991: LD_VAR 0 3
9995: ARRAY
9996: PPUSH
9997: LD_INT 9
9999: PPUSH
10000: CALL_OW 123
10004: GO 9803
10006: POP
10007: POP
// end ;
10008: LD_VAR 0 2
10012: RET
// export function GetHuman ( side ) ; begin
10013: LD_INT 0
10015: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
10016: LD_ADDR_VAR 0 2
10020: PUSH
10021: LD_INT 22
10023: PUSH
10024: LD_VAR 0 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 21
10035: PUSH
10036: LD_INT 1
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 2
10045: PUSH
10046: LD_INT 25
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 25
10058: PUSH
10059: LD_INT 2
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 25
10068: PUSH
10069: LD_INT 3
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 25
10078: PUSH
10079: LD_INT 4
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: LIST
10097: PPUSH
10098: CALL_OW 69
10102: ST_TO_ADDR
// end ;
10103: LD_VAR 0 2
10107: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10108: LD_INT 0
10110: PPUSH
10111: PPUSH
10112: PPUSH
// uc_side := 0 ;
10113: LD_ADDR_OWVAR 20
10117: PUSH
10118: LD_INT 0
10120: ST_TO_ADDR
// uc_nation := 0 ;
10121: LD_ADDR_OWVAR 21
10125: PUSH
10126: LD_INT 0
10128: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10129: LD_ADDR_VAR 0 4
10133: PUSH
10134: DOUBLE
10135: LD_INT 1
10137: DEC
10138: ST_TO_ADDR
10139: LD_INT 4
10141: PUSH
10142: LD_INT 5
10144: PUSH
10145: LD_INT 6
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: PUSH
10153: LD_OWVAR 67
10157: ARRAY
10158: PUSH
10159: FOR_TO
10160: IFFALSE 10231
// begin hc_class = class_tiger ;
10162: LD_ADDR_OWVAR 28
10166: PUSH
10167: LD_INT 14
10169: ST_TO_ADDR
// hc_gallery = sandnature ;
10170: LD_ADDR_OWVAR 33
10174: PUSH
10175: LD_STRING sandnature
10177: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10178: LD_ADDR_OWVAR 35
10182: PUSH
10183: LD_INT 0
10185: PPUSH
10186: LD_INT 50
10188: PPUSH
10189: CALL_OW 12
10193: ST_TO_ADDR
// hc_face_number = 3 ;
10194: LD_ADDR_OWVAR 34
10198: PUSH
10199: LD_INT 3
10201: ST_TO_ADDR
// tiger := CreateHuman ;
10202: LD_ADDR_VAR 0 3
10206: PUSH
10207: CALL_OW 44
10211: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10212: LD_VAR 0 3
10216: PPUSH
10217: LD_VAR 0 1
10221: PPUSH
10222: LD_INT 0
10224: PPUSH
10225: CALL_OW 49
// end ;
10229: GO 10159
10231: POP
10232: POP
// end ;
10233: LD_VAR 0 2
10237: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10238: LD_INT 0
10240: PPUSH
10241: PPUSH
10242: PPUSH
// uc_side := 0 ;
10243: LD_ADDR_OWVAR 20
10247: PUSH
10248: LD_INT 0
10250: ST_TO_ADDR
// uc_nation := 0 ;
10251: LD_ADDR_OWVAR 21
10255: PUSH
10256: LD_INT 0
10258: ST_TO_ADDR
// for i = 1 to 8 do
10259: LD_ADDR_VAR 0 4
10263: PUSH
10264: DOUBLE
10265: LD_INT 1
10267: DEC
10268: ST_TO_ADDR
10269: LD_INT 8
10271: PUSH
10272: FOR_TO
10273: IFFALSE 10337
// begin hc_class = class_apeman ;
10275: LD_ADDR_OWVAR 28
10279: PUSH
10280: LD_INT 12
10282: ST_TO_ADDR
// hc_gallery =  ;
10283: LD_ADDR_OWVAR 33
10287: PUSH
10288: LD_STRING 
10290: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 20 ) ;
10291: LD_ADDR_OWVAR 35
10295: PUSH
10296: LD_INT 5
10298: NEG
10299: PPUSH
10300: LD_INT 20
10302: PPUSH
10303: CALL_OW 12
10307: ST_TO_ADDR
// ape := CreateHuman ;
10308: LD_ADDR_VAR 0 3
10312: PUSH
10313: CALL_OW 44
10317: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10318: LD_VAR 0 3
10322: PPUSH
10323: LD_VAR 0 1
10327: PPUSH
10328: LD_INT 0
10330: PPUSH
10331: CALL_OW 49
// end ;
10335: GO 10272
10337: POP
10338: POP
// end ;
10339: LD_VAR 0 2
10343: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10344: LD_INT 0
10346: PPUSH
10347: PPUSH
// if BuildingStatus ( b ) = bs_build then
10348: LD_VAR 0 2
10352: PPUSH
10353: CALL_OW 461
10357: PUSH
10358: LD_INT 1
10360: EQUAL
10361: IFFALSE 10547
// for i = 1 to plist do
10363: LD_ADDR_VAR 0 4
10367: PUSH
10368: DOUBLE
10369: LD_INT 1
10371: DEC
10372: ST_TO_ADDR
10373: LD_VAR 0 1
10377: PUSH
10378: FOR_TO
10379: IFFALSE 10545
// if IsInUnit ( plist [ i ] ) then
10381: LD_VAR 0 1
10385: PUSH
10386: LD_VAR 0 4
10390: ARRAY
10391: PPUSH
10392: CALL_OW 310
10396: IFFALSE 10479
// begin ComExitBuilding ( plist [ i ] ) ;
10398: LD_VAR 0 1
10402: PUSH
10403: LD_VAR 0 4
10407: ARRAY
10408: PPUSH
10409: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10413: LD_VAR 0 1
10417: PUSH
10418: LD_VAR 0 4
10422: ARRAY
10423: PPUSH
10424: LD_STRING h
10426: PUSH
10427: LD_VAR 0 2
10431: PPUSH
10432: CALL_OW 250
10436: PUSH
10437: LD_VAR 0 2
10441: PPUSH
10442: CALL_OW 251
10446: PUSH
10447: LD_VAR 0 2
10451: PUSH
10452: LD_INT 0
10454: PUSH
10455: LD_INT 0
10457: PUSH
10458: LD_INT 0
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: PPUSH
10473: CALL_OW 447
// end else
10477: GO 10543
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10479: LD_VAR 0 1
10483: PUSH
10484: LD_VAR 0 4
10488: ARRAY
10489: PPUSH
10490: LD_STRING h
10492: PUSH
10493: LD_VAR 0 2
10497: PPUSH
10498: CALL_OW 250
10502: PUSH
10503: LD_VAR 0 2
10507: PPUSH
10508: CALL_OW 251
10512: PUSH
10513: LD_VAR 0 2
10517: PUSH
10518: LD_INT 0
10520: PUSH
10521: LD_INT 0
10523: PUSH
10524: LD_INT 0
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: PUSH
10536: EMPTY
10537: LIST
10538: PPUSH
10539: CALL_OW 446
10543: GO 10378
10545: POP
10546: POP
// end ;
10547: LD_VAR 0 3
10551: RET
// export function WantRepair ( eng ) ; begin
10552: LD_INT 0
10554: PPUSH
// if GetTaskList ( eng ) > 0 then
10555: LD_VAR 0 1
10559: PPUSH
10560: CALL_OW 437
10564: PUSH
10565: LD_INT 0
10567: GREATER
10568: IFFALSE 10613
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10570: LD_VAR 0 1
10574: PPUSH
10575: CALL_OW 437
10579: PUSH
10580: LD_INT 1
10582: ARRAY
10583: PUSH
10584: LD_INT 1
10586: ARRAY
10587: PUSH
10588: LD_STRING o
10590: EQUAL
10591: IFFALSE 10603
// result := true else
10593: LD_ADDR_VAR 0 2
10597: PUSH
10598: LD_INT 1
10600: ST_TO_ADDR
10601: GO 10611
// result := false ;
10603: LD_ADDR_VAR 0 2
10607: PUSH
10608: LD_INT 0
10610: ST_TO_ADDR
// end else
10611: GO 10621
// result := false ;
10613: LD_ADDR_VAR 0 2
10617: PUSH
10618: LD_INT 0
10620: ST_TO_ADDR
// end ;
10621: LD_VAR 0 2
10625: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10626: LD_INT 0
10628: PPUSH
10629: PPUSH
10630: PPUSH
10631: PPUSH
// if btype = - 1 then
10632: LD_VAR 0 2
10636: PUSH
10637: LD_INT 1
10639: NEG
10640: EQUAL
10641: IFFALSE 10681
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10643: LD_ADDR_VAR 0 5
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_VAR 0 1
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 21
10662: PUSH
10663: LD_INT 3
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PPUSH
10674: CALL_OW 69
10678: ST_TO_ADDR
10679: GO 10719
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10681: LD_ADDR_VAR 0 5
10685: PUSH
10686: LD_INT 22
10688: PUSH
10689: LD_VAR 0 1
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 30
10700: PUSH
10701: LD_VAR 0 2
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PPUSH
10714: CALL_OW 69
10718: ST_TO_ADDR
// list := [ ] ;
10719: LD_ADDR_VAR 0 6
10723: PUSH
10724: EMPTY
10725: ST_TO_ADDR
// for i = 1 to tmp do
10726: LD_ADDR_VAR 0 4
10730: PUSH
10731: DOUBLE
10732: LD_INT 1
10734: DEC
10735: ST_TO_ADDR
10736: LD_VAR 0 5
10740: PUSH
10741: FOR_TO
10742: IFFALSE 10830
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10744: LD_ADDR_VAR 0 6
10748: PUSH
10749: LD_VAR 0 6
10753: PUSH
10754: LD_VAR 0 5
10758: PUSH
10759: LD_VAR 0 4
10763: ARRAY
10764: PPUSH
10765: CALL_OW 266
10769: PUSH
10770: LD_VAR 0 5
10774: PUSH
10775: LD_VAR 0 4
10779: ARRAY
10780: PPUSH
10781: CALL_OW 250
10785: PUSH
10786: LD_VAR 0 5
10790: PUSH
10791: LD_VAR 0 4
10795: ARRAY
10796: PPUSH
10797: CALL_OW 251
10801: PUSH
10802: LD_VAR 0 5
10806: PUSH
10807: LD_VAR 0 4
10811: ARRAY
10812: PPUSH
10813: CALL_OW 254
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: PUSH
10824: EMPTY
10825: LIST
10826: ADD
10827: ST_TO_ADDR
10828: GO 10741
10830: POP
10831: POP
// result = list ;
10832: LD_ADDR_VAR 0 3
10836: PUSH
10837: LD_VAR 0 6
10841: ST_TO_ADDR
// end ;
10842: LD_VAR 0 3
10846: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10847: LD_INT 0
10849: PPUSH
10850: PPUSH
10851: PPUSH
10852: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10853: LD_VAR 0 1
10857: PPUSH
10858: LD_INT 81
10860: PUSH
10861: LD_VAR 0 1
10865: PPUSH
10866: CALL_OW 255
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PPUSH
10875: CALL_OW 69
10879: PPUSH
10880: LD_VAR 0 1
10884: PPUSH
10885: CALL_OW 74
10889: PPUSH
10890: CALL_OW 296
10894: PUSH
10895: LD_INT 18
10897: LESS
10898: IFFALSE 10943
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10900: LD_VAR 0 1
10904: PPUSH
10905: LD_INT 81
10907: PUSH
10908: LD_VAR 0 1
10912: PPUSH
10913: CALL_OW 255
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PPUSH
10922: CALL_OW 69
10926: PPUSH
10927: LD_VAR 0 1
10931: PPUSH
10932: CALL_OW 74
10936: PPUSH
10937: CALL_OW 115
10941: GO 10962
// ComMoveXY ( behemoth , x , y ) ;
10943: LD_VAR 0 1
10947: PPUSH
10948: LD_VAR 0 4
10952: PPUSH
10953: LD_VAR 0 5
10957: PPUSH
10958: CALL_OW 111
// if time_lapsers_list > 0 then
10962: LD_VAR 0 2
10966: PUSH
10967: LD_INT 0
10969: GREATER
10970: IFFALSE 11160
// begin for i = 1 to time_lapsers_list do
10972: LD_ADDR_VAR 0 7
10976: PUSH
10977: DOUBLE
10978: LD_INT 1
10980: DEC
10981: ST_TO_ADDR
10982: LD_VAR 0 2
10986: PUSH
10987: FOR_TO
10988: IFFALSE 11158
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10990: LD_VAR 0 2
10994: PUSH
10995: LD_VAR 0 7
10999: ARRAY
11000: PPUSH
11001: CALL_OW 256
11005: PUSH
11006: LD_INT 250
11008: GREATEREQUAL
11009: PUSH
11010: LD_VAR 0 2
11014: PUSH
11015: LD_VAR 0 7
11019: ARRAY
11020: PPUSH
11021: LD_VAR 0 1
11025: PPUSH
11026: CALL_OW 296
11030: PUSH
11031: LD_INT 9
11033: GREATER
11034: AND
11035: IFFALSE 11072
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11037: LD_VAR 0 2
11041: PUSH
11042: LD_VAR 0 7
11046: ARRAY
11047: PPUSH
11048: LD_VAR 0 1
11052: PPUSH
11053: CALL_OW 250
11057: PPUSH
11058: LD_VAR 0 1
11062: PPUSH
11063: CALL_OW 251
11067: PPUSH
11068: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11072: LD_VAR 0 2
11076: PUSH
11077: LD_VAR 0 7
11081: ARRAY
11082: PPUSH
11083: CALL_OW 256
11087: PUSH
11088: LD_INT 500
11090: LESS
11091: PUSH
11092: LD_VAR 0 1
11096: PPUSH
11097: CALL_OW 256
11101: PUSH
11102: LD_INT 700
11104: GREATER
11105: AND
11106: IFFALSE 11156
// for p = 1 to mechanic_list do
11108: LD_ADDR_VAR 0 8
11112: PUSH
11113: DOUBLE
11114: LD_INT 1
11116: DEC
11117: ST_TO_ADDR
11118: LD_VAR 0 3
11122: PUSH
11123: FOR_TO
11124: IFFALSE 11154
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11126: LD_VAR 0 3
11130: PUSH
11131: LD_VAR 0 8
11135: ARRAY
11136: PPUSH
11137: LD_VAR 0 2
11141: PUSH
11142: LD_VAR 0 7
11146: ARRAY
11147: PPUSH
11148: CALL_OW 129
11152: GO 11123
11154: POP
11155: POP
// end ;
11156: GO 10987
11158: POP
11159: POP
// end ; if mechanic_list then
11160: LD_VAR 0 3
11164: IFFALSE 11345
// begin for i = 1 to mechanic_list do
11166: LD_ADDR_VAR 0 7
11170: PUSH
11171: DOUBLE
11172: LD_INT 1
11174: DEC
11175: ST_TO_ADDR
11176: LD_VAR 0 3
11180: PUSH
11181: FOR_TO
11182: IFFALSE 11343
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11184: LD_VAR 0 3
11188: PUSH
11189: LD_VAR 0 7
11193: ARRAY
11194: PPUSH
11195: CALL_OW 256
11199: PUSH
11200: LD_INT 333
11202: LESS
11203: IFFALSE 11227
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11205: LD_ADDR_EXP 15
11209: PUSH
11210: LD_EXP 15
11214: PUSH
11215: LD_VAR 0 3
11219: PUSH
11220: LD_VAR 0 7
11224: ARRAY
11225: DIFF
11226: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11227: LD_VAR 0 3
11231: PUSH
11232: LD_VAR 0 7
11236: ARRAY
11237: PPUSH
11238: LD_VAR 0 1
11242: PPUSH
11243: CALL_OW 296
11247: PUSH
11248: LD_INT 9
11250: GREATER
11251: PUSH
11252: LD_VAR 0 3
11256: PUSH
11257: LD_VAR 0 7
11261: ARRAY
11262: PPUSH
11263: CALL_OW 314
11267: NOT
11268: AND
11269: IFFALSE 11306
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11271: LD_VAR 0 3
11275: PUSH
11276: LD_VAR 0 7
11280: ARRAY
11281: PPUSH
11282: LD_VAR 0 1
11286: PPUSH
11287: CALL_OW 250
11291: PPUSH
11292: LD_VAR 0 1
11296: PPUSH
11297: CALL_OW 251
11301: PPUSH
11302: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11306: LD_VAR 0 1
11310: PPUSH
11311: CALL_OW 256
11315: PUSH
11316: LD_INT 700
11318: LESS
11319: IFFALSE 11341
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11321: LD_VAR 0 3
11325: PUSH
11326: LD_VAR 0 7
11330: ARRAY
11331: PPUSH
11332: LD_VAR 0 1
11336: PPUSH
11337: CALL_OW 129
// end ;
11341: GO 11181
11343: POP
11344: POP
// end ; end ;
11345: LD_VAR 0 6
11349: RET
// export function GetBehemoth ( side ) ; begin
11350: LD_INT 0
11352: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11353: LD_ADDR_VAR 0 2
11357: PUSH
11358: LD_INT 22
11360: PUSH
11361: LD_VAR 0 1
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 31
11372: PUSH
11373: LD_INT 25
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: PPUSH
11384: CALL_OW 69
11388: ST_TO_ADDR
// end ;
11389: LD_VAR 0 2
11393: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11394: LD_INT 0
11396: PPUSH
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11402: LD_ADDR_VAR 0 6
11406: PUSH
11407: LD_VAR 0 2
11411: PPUSH
11412: CALL_OW 435
11416: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11417: LD_ADDR_VAR 0 5
11421: PUSH
11422: LD_INT 22
11424: PUSH
11425: LD_VAR 0 1
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: LD_INT 2
11436: PUSH
11437: LD_INT 25
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 25
11449: PUSH
11450: LD_INT 16
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PPUSH
11466: CALL_OW 69
11470: ST_TO_ADDR
// if skr then
11471: LD_VAR 0 6
11475: IFFALSE 11640
// begin if engs then
11477: LD_VAR 0 5
11481: IFFALSE 11640
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11483: LD_ADDR_VAR 0 8
11487: PUSH
11488: LD_VAR 0 6
11492: PUSH
11493: LD_INT 1
11495: ARRAY
11496: PPUSH
11497: LD_VAR 0 6
11501: PUSH
11502: LD_INT 2
11504: ARRAY
11505: PPUSH
11506: CALL_OW 284
11510: ST_TO_ADDR
// if am > engs then
11511: LD_VAR 0 8
11515: PUSH
11516: LD_VAR 0 5
11520: GREATER
11521: IFFALSE 11533
// am := engs ;
11523: LD_ADDR_VAR 0 8
11527: PUSH
11528: LD_VAR 0 5
11532: ST_TO_ADDR
// for i = 1 to am do
11533: LD_ADDR_VAR 0 7
11537: PUSH
11538: DOUBLE
11539: LD_INT 1
11541: DEC
11542: ST_TO_ADDR
11543: LD_VAR 0 8
11547: PUSH
11548: FOR_TO
11549: IFFALSE 11638
// begin if IsInUnit ( engs [ i ] ) then
11551: LD_VAR 0 5
11555: PUSH
11556: LD_VAR 0 7
11560: ARRAY
11561: PPUSH
11562: CALL_OW 310
11566: IFFALSE 11585
// ComExitBuilding ( engs [ i ] ) else
11568: LD_VAR 0 5
11572: PUSH
11573: LD_VAR 0 7
11577: ARRAY
11578: PPUSH
11579: CALL_OW 122
11583: GO 11636
// if not HasTask ( engs [ i ] ) then
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: CALL_OW 314
11600: NOT
11601: IFFALSE 11636
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11603: LD_VAR 0 5
11607: PUSH
11608: LD_VAR 0 7
11612: ARRAY
11613: PPUSH
11614: LD_VAR 0 6
11618: PUSH
11619: LD_INT 1
11621: ARRAY
11622: PPUSH
11623: LD_VAR 0 6
11627: PUSH
11628: LD_INT 2
11630: ARRAY
11631: PPUSH
11632: CALL_OW 117
// end ;
11636: GO 11548
11638: POP
11639: POP
// end ; end ; end ; end_of_file
11640: LD_VAR 0 3
11644: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11645: LD_INT 0
11647: PPUSH
11648: PPUSH
// uc_side := 1 ;
11649: LD_ADDR_OWVAR 20
11653: PUSH
11654: LD_INT 1
11656: ST_TO_ADDR
// uc_nation := 1 ;
11657: LD_ADDR_OWVAR 21
11661: PUSH
11662: LD_INT 1
11664: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11665: LD_ADDR_VAR 0 2
11669: PUSH
11670: LD_INT 6
11672: PUSH
11673: LD_INT 5
11675: PUSH
11676: LD_INT 4
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: LIST
11683: PUSH
11684: LD_OWVAR 67
11688: ARRAY
11689: ST_TO_ADDR
// game_status := false ;
11690: LD_ADDR_EXP 29
11694: PUSH
11695: LD_INT 0
11697: ST_TO_ADDR
// helps_arrive := false ;
11698: LD_ADDR_EXP 30
11702: PUSH
11703: LD_INT 0
11705: ST_TO_ADDR
// helps_can_arrive := false ;
11706: LD_ADDR_EXP 31
11710: PUSH
11711: LD_INT 0
11713: ST_TO_ADDR
// beta_come := false ;
11714: LD_ADDR_EXP 32
11718: PUSH
11719: LD_INT 0
11721: ST_TO_ADDR
// gamma_come := false ;
11722: LD_ADDR_EXP 33
11726: PUSH
11727: LD_INT 0
11729: ST_TO_ADDR
// zeta_come := false ;
11730: LD_ADDR_EXP 34
11734: PUSH
11735: LD_INT 0
11737: ST_TO_ADDR
// mine_ck := false ;
11738: LD_ADDR_EXP 35
11742: PUSH
11743: LD_INT 0
11745: ST_TO_ADDR
// sib_bomb_constructed := false ;
11746: LD_ADDR_EXP 36
11750: PUSH
11751: LD_INT 0
11753: ST_TO_ADDR
// mine_constructed := false ;
11754: LD_ADDR_EXP 37
11758: PUSH
11759: LD_INT 0
11761: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11762: LD_INT 35
11764: PPUSH
11765: CALL_OW 274
11769: PPUSH
11770: LD_INT 1
11772: PPUSH
11773: LD_INT 200
11775: PUSH
11776: LD_INT 100
11778: PUSH
11779: LD_INT 70
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: PUSH
11787: LD_OWVAR 67
11791: ARRAY
11792: PPUSH
11793: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11797: LD_INT 35
11799: PPUSH
11800: LD_INT 4
11802: PPUSH
11803: CALL_OW 235
// hc_importance := 100 ;
11807: LD_ADDR_OWVAR 32
11811: PUSH
11812: LD_INT 100
11814: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11815: LD_INT 1
11817: PPUSH
11818: LD_INT 2
11820: PPUSH
11821: LD_VAR 0 2
11825: PUSH
11826: LD_INT 1
11828: PLUS
11829: PPUSH
11830: CALL_OW 380
// hc_gallery := hardch ;
11834: LD_ADDR_OWVAR 33
11838: PUSH
11839: LD_STRING hardch
11841: ST_TO_ADDR
// hc_face_number := 1 ;
11842: LD_ADDR_OWVAR 34
11846: PUSH
11847: LD_INT 1
11849: ST_TO_ADDR
// guyA := CreateHuman ;
11850: LD_ADDR_EXP 38
11854: PUSH
11855: CALL_OW 44
11859: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11860: LD_INT 1
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: LD_VAR 0 2
11870: PPUSH
11871: CALL_OW 380
// hc_face_number := 2 ;
11875: LD_ADDR_OWVAR 34
11879: PUSH
11880: LD_INT 2
11882: ST_TO_ADDR
// guyB := CreateHuman ;
11883: LD_ADDR_EXP 39
11887: PUSH
11888: CALL_OW 44
11892: ST_TO_ADDR
// hc_importance := 0 ;
11893: LD_ADDR_OWVAR 32
11897: PUSH
11898: LD_INT 0
11900: ST_TO_ADDR
// hc_gallery :=  ;
11901: LD_ADDR_OWVAR 33
11905: PUSH
11906: LD_STRING 
11908: ST_TO_ADDR
// end ;
11909: LD_VAR 0 1
11913: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11914: LD_INT 0
11916: PPUSH
11917: PPUSH
11918: PPUSH
11919: PPUSH
11920: PPUSH
11921: PPUSH
11922: PPUSH
11923: PPUSH
11924: PPUSH
// uc_side := 4 ;
11925: LD_ADDR_OWVAR 20
11929: PUSH
11930: LD_INT 4
11932: ST_TO_ADDR
// uc_nation := 1 ;
11933: LD_ADDR_OWVAR 21
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11941: LD_ADDR_VAR 0 10
11945: PUSH
11946: LD_INT 6
11948: PUSH
11949: LD_INT 5
11951: PUSH
11952: LD_INT 4
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: PUSH
11960: LD_OWVAR 67
11964: ARRAY
11965: ST_TO_ADDR
// Beta_Squad := [ ] ;
11966: LD_ADDR_EXP 40
11970: PUSH
11971: EMPTY
11972: ST_TO_ADDR
// case num of 1 :
11973: LD_VAR 0 1
11977: PUSH
11978: LD_INT 1
11980: DOUBLE
11981: EQUAL
11982: IFTRUE 11986
11984: GO 12029
11986: POP
// begin sold := 2 ;
11987: LD_ADDR_VAR 0 5
11991: PUSH
11992: LD_INT 2
11994: ST_TO_ADDR
// sci := 1 ;
11995: LD_ADDR_VAR 0 6
11999: PUSH
12000: LD_INT 1
12002: ST_TO_ADDR
// mech := 2 ;
12003: LD_ADDR_VAR 0 7
12007: PUSH
12008: LD_INT 2
12010: ST_TO_ADDR
// tank := 1 ;
12011: LD_ADDR_VAR 0 8
12015: PUSH
12016: LD_INT 1
12018: ST_TO_ADDR
// cargo := 1 ;
12019: LD_ADDR_VAR 0 9
12023: PUSH
12024: LD_INT 1
12026: ST_TO_ADDR
// end ; 2 :
12027: GO 12132
12029: LD_INT 2
12031: DOUBLE
12032: EQUAL
12033: IFTRUE 12037
12035: GO 12080
12037: POP
// begin sold := 2 ;
12038: LD_ADDR_VAR 0 5
12042: PUSH
12043: LD_INT 2
12045: ST_TO_ADDR
// sci := 1 ;
12046: LD_ADDR_VAR 0 6
12050: PUSH
12051: LD_INT 1
12053: ST_TO_ADDR
// mech := 1 ;
12054: LD_ADDR_VAR 0 7
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// tank := 1 ;
12062: LD_ADDR_VAR 0 8
12066: PUSH
12067: LD_INT 1
12069: ST_TO_ADDR
// cargo := 0 ;
12070: LD_ADDR_VAR 0 9
12074: PUSH
12075: LD_INT 0
12077: ST_TO_ADDR
// end ; 3 :
12078: GO 12132
12080: LD_INT 3
12082: DOUBLE
12083: EQUAL
12084: IFTRUE 12088
12086: GO 12131
12088: POP
// begin sold := 1 ;
12089: LD_ADDR_VAR 0 5
12093: PUSH
12094: LD_INT 1
12096: ST_TO_ADDR
// sci := 1 ;
12097: LD_ADDR_VAR 0 6
12101: PUSH
12102: LD_INT 1
12104: ST_TO_ADDR
// mech := 1 ;
12105: LD_ADDR_VAR 0 7
12109: PUSH
12110: LD_INT 1
12112: ST_TO_ADDR
// tank := 1 ;
12113: LD_ADDR_VAR 0 8
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// cargo := 0 ;
12121: LD_ADDR_VAR 0 9
12125: PUSH
12126: LD_INT 0
12128: ST_TO_ADDR
// end ; end ;
12129: GO 12132
12131: POP
// for i = 1 to sold do
12132: LD_ADDR_VAR 0 3
12136: PUSH
12137: DOUBLE
12138: LD_INT 1
12140: DEC
12141: ST_TO_ADDR
12142: LD_VAR 0 5
12146: PUSH
12147: FOR_TO
12148: IFFALSE 12220
// begin if i = 1 then
12150: LD_VAR 0 3
12154: PUSH
12155: LD_INT 1
12157: EQUAL
12158: IFFALSE 12177
// PrepareHuman ( sex_male , 1 , skill ) else
12160: LD_INT 1
12162: PPUSH
12163: LD_INT 1
12165: PPUSH
12166: LD_VAR 0 10
12170: PPUSH
12171: CALL_OW 380
12175: GO 12192
// PrepareHuman ( false , 1 , skill ) ;
12177: LD_INT 0
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_VAR 0 10
12187: PPUSH
12188: CALL_OW 380
// un := CreateHuman ;
12192: LD_ADDR_VAR 0 4
12196: PUSH
12197: CALL_OW 44
12201: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12202: LD_ADDR_EXP 40
12206: PUSH
12207: LD_EXP 40
12211: PUSH
12212: LD_VAR 0 4
12216: ADD
12217: ST_TO_ADDR
// end ;
12218: GO 12147
12220: POP
12221: POP
// for i = 1 to mech do
12222: LD_ADDR_VAR 0 3
12226: PUSH
12227: DOUBLE
12228: LD_INT 1
12230: DEC
12231: ST_TO_ADDR
12232: LD_VAR 0 7
12236: PUSH
12237: FOR_TO
12238: IFFALSE 12295
// begin PrepareHuman ( false , 3 , skill ) ;
12240: LD_INT 0
12242: PPUSH
12243: LD_INT 3
12245: PPUSH
12246: LD_VAR 0 10
12250: PPUSH
12251: CALL_OW 380
// un := CreateHuman ;
12255: LD_ADDR_VAR 0 4
12259: PUSH
12260: CALL_OW 44
12264: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12265: LD_VAR 0 4
12269: PPUSH
12270: LD_INT 3
12272: PPUSH
12273: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12277: LD_ADDR_EXP 40
12281: PUSH
12282: LD_EXP 40
12286: PUSH
12287: LD_VAR 0 4
12291: ADD
12292: ST_TO_ADDR
// end ;
12293: GO 12237
12295: POP
12296: POP
// for i = 1 to sci do
12297: LD_ADDR_VAR 0 3
12301: PUSH
12302: DOUBLE
12303: LD_INT 1
12305: DEC
12306: ST_TO_ADDR
12307: LD_VAR 0 6
12311: PUSH
12312: FOR_TO
12313: IFFALSE 12358
// begin PrepareHuman ( false , 4 , skill ) ;
12315: LD_INT 0
12317: PPUSH
12318: LD_INT 4
12320: PPUSH
12321: LD_VAR 0 10
12325: PPUSH
12326: CALL_OW 380
// un := CreateHuman ;
12330: LD_ADDR_VAR 0 4
12334: PUSH
12335: CALL_OW 44
12339: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12340: LD_ADDR_EXP 40
12344: PUSH
12345: LD_EXP 40
12349: PUSH
12350: LD_VAR 0 4
12354: ADD
12355: ST_TO_ADDR
// end ;
12356: GO 12312
12358: POP
12359: POP
// for i = 1 to tank do
12360: LD_ADDR_VAR 0 3
12364: PUSH
12365: DOUBLE
12366: LD_INT 1
12368: DEC
12369: ST_TO_ADDR
12370: LD_VAR 0 8
12374: PUSH
12375: FOR_TO
12376: IFFALSE 12489
// begin Randomize ;
12378: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12382: LD_ADDR_OWVAR 37
12386: PUSH
12387: LD_INT 3
12389: ST_TO_ADDR
// vc_engine := engine_solar ;
12390: LD_ADDR_OWVAR 39
12394: PUSH
12395: LD_INT 2
12397: ST_TO_ADDR
// vc_control := control_manual ;
12398: LD_ADDR_OWVAR 38
12402: PUSH
12403: LD_INT 1
12405: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12406: LD_ADDR_OWVAR 40
12410: PUSH
12411: LD_INT 4
12413: PUSH
12414: LD_INT 5
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 1
12423: PPUSH
12424: LD_INT 2
12426: PPUSH
12427: CALL_OW 12
12431: ARRAY
12432: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12433: LD_ADDR_OWVAR 41
12437: PUSH
12438: LD_INT 35
12440: PPUSH
12441: LD_INT 55
12443: PPUSH
12444: CALL_OW 12
12448: ST_TO_ADDR
// un := CreateVehicle ;
12449: LD_ADDR_VAR 0 4
12453: PUSH
12454: CALL_OW 45
12458: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12459: LD_VAR 0 4
12463: PPUSH
12464: LD_INT 5
12466: PPUSH
12467: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12471: LD_ADDR_EXP 40
12475: PUSH
12476: LD_EXP 40
12480: PUSH
12481: LD_VAR 0 4
12485: ADD
12486: ST_TO_ADDR
// end ;
12487: GO 12375
12489: POP
12490: POP
// if cargo then
12491: LD_VAR 0 9
12495: IFFALSE 12598
// begin vc_chassis := us_medium_tracked ;
12497: LD_ADDR_OWVAR 37
12501: PUSH
12502: LD_INT 3
12504: ST_TO_ADDR
// vc_engine := engine_solar ;
12505: LD_ADDR_OWVAR 39
12509: PUSH
12510: LD_INT 2
12512: ST_TO_ADDR
// vc_control := control_manual ;
12513: LD_ADDR_OWVAR 38
12517: PUSH
12518: LD_INT 1
12520: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12521: LD_ADDR_OWVAR 40
12525: PUSH
12526: LD_INT 12
12528: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12529: LD_ADDR_OWVAR 41
12533: PUSH
12534: LD_INT 35
12536: PPUSH
12537: LD_INT 55
12539: PPUSH
12540: CALL_OW 12
12544: ST_TO_ADDR
// un := CreateVehicle ;
12545: LD_ADDR_VAR 0 4
12549: PUSH
12550: CALL_OW 45
12554: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12555: LD_VAR 0 4
12559: PPUSH
12560: LD_INT 5
12562: PPUSH
12563: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12567: LD_ADDR_EXP 40
12571: PUSH
12572: LD_EXP 40
12576: PUSH
12577: LD_VAR 0 4
12581: ADD
12582: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12583: LD_VAR 0 4
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: LD_INT 60
12593: PPUSH
12594: CALL_OW 290
// end ; end ;
12598: LD_VAR 0 2
12602: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12603: LD_INT 0
12605: PPUSH
12606: PPUSH
12607: PPUSH
12608: PPUSH
12609: PPUSH
12610: PPUSH
12611: PPUSH
12612: PPUSH
12613: PPUSH
12614: PPUSH
// uc_side := 4 ;
12615: LD_ADDR_OWVAR 20
12619: PUSH
12620: LD_INT 4
12622: ST_TO_ADDR
// uc_nation := 1 ;
12623: LD_ADDR_OWVAR 21
12627: PUSH
12628: LD_INT 1
12630: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12631: LD_ADDR_VAR 0 11
12635: PUSH
12636: LD_INT 6
12638: PUSH
12639: LD_INT 5
12641: PUSH
12642: LD_INT 4
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: LIST
12649: PUSH
12650: LD_OWVAR 67
12654: ARRAY
12655: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12656: LD_ADDR_EXP 41
12660: PUSH
12661: EMPTY
12662: ST_TO_ADDR
// case num of 1 :
12663: LD_VAR 0 1
12667: PUSH
12668: LD_INT 1
12670: DOUBLE
12671: EQUAL
12672: IFTRUE 12676
12674: GO 12727
12676: POP
// begin sold := 2 ;
12677: LD_ADDR_VAR 0 5
12681: PUSH
12682: LD_INT 2
12684: ST_TO_ADDR
// eng := 2 ;
12685: LD_ADDR_VAR 0 6
12689: PUSH
12690: LD_INT 2
12692: ST_TO_ADDR
// sci := 0 ;
12693: LD_ADDR_VAR 0 7
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// mech := 1 ;
12701: LD_ADDR_VAR 0 8
12705: PUSH
12706: LD_INT 1
12708: ST_TO_ADDR
// tank := 0 ;
12709: LD_ADDR_VAR 0 9
12713: PUSH
12714: LD_INT 0
12716: ST_TO_ADDR
// cargo := 1 ;
12717: LD_ADDR_VAR 0 10
12721: PUSH
12722: LD_INT 1
12724: ST_TO_ADDR
// end ; 2 :
12725: GO 12846
12727: LD_INT 2
12729: DOUBLE
12730: EQUAL
12731: IFTRUE 12735
12733: GO 12786
12735: POP
// begin sold := 1 ;
12736: LD_ADDR_VAR 0 5
12740: PUSH
12741: LD_INT 1
12743: ST_TO_ADDR
// eng := 2 ;
12744: LD_ADDR_VAR 0 6
12748: PUSH
12749: LD_INT 2
12751: ST_TO_ADDR
// sci := 0 ;
12752: LD_ADDR_VAR 0 7
12756: PUSH
12757: LD_INT 0
12759: ST_TO_ADDR
// mech := 1 ;
12760: LD_ADDR_VAR 0 8
12764: PUSH
12765: LD_INT 1
12767: ST_TO_ADDR
// tank := 0 ;
12768: LD_ADDR_VAR 0 9
12772: PUSH
12773: LD_INT 0
12775: ST_TO_ADDR
// cargo := 1 ;
12776: LD_ADDR_VAR 0 10
12780: PUSH
12781: LD_INT 1
12783: ST_TO_ADDR
// end ; 3 :
12784: GO 12846
12786: LD_INT 3
12788: DOUBLE
12789: EQUAL
12790: IFTRUE 12794
12792: GO 12845
12794: POP
// begin sold := 1 ;
12795: LD_ADDR_VAR 0 5
12799: PUSH
12800: LD_INT 1
12802: ST_TO_ADDR
// eng := 1 ;
12803: LD_ADDR_VAR 0 6
12807: PUSH
12808: LD_INT 1
12810: ST_TO_ADDR
// sci := 0 ;
12811: LD_ADDR_VAR 0 7
12815: PUSH
12816: LD_INT 0
12818: ST_TO_ADDR
// mech := 1 ;
12819: LD_ADDR_VAR 0 8
12823: PUSH
12824: LD_INT 1
12826: ST_TO_ADDR
// tank := 0 ;
12827: LD_ADDR_VAR 0 9
12831: PUSH
12832: LD_INT 0
12834: ST_TO_ADDR
// cargo := 1 ;
12835: LD_ADDR_VAR 0 10
12839: PUSH
12840: LD_INT 1
12842: ST_TO_ADDR
// end ; end ;
12843: GO 12846
12845: POP
// for i = 1 to sold do
12846: LD_ADDR_VAR 0 3
12850: PUSH
12851: DOUBLE
12852: LD_INT 1
12854: DEC
12855: ST_TO_ADDR
12856: LD_VAR 0 5
12860: PUSH
12861: FOR_TO
12862: IFFALSE 12934
// begin if i = 1 then
12864: LD_VAR 0 3
12868: PUSH
12869: LD_INT 1
12871: EQUAL
12872: IFFALSE 12891
// PrepareHuman ( sex_male , 1 , skill ) else
12874: LD_INT 1
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: LD_VAR 0 11
12884: PPUSH
12885: CALL_OW 380
12889: GO 12906
// PrepareHuman ( false , 1 , skill ) ;
12891: LD_INT 0
12893: PPUSH
12894: LD_INT 1
12896: PPUSH
12897: LD_VAR 0 11
12901: PPUSH
12902: CALL_OW 380
// un := CreateHuman ;
12906: LD_ADDR_VAR 0 4
12910: PUSH
12911: CALL_OW 44
12915: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12916: LD_ADDR_EXP 41
12920: PUSH
12921: LD_EXP 41
12925: PUSH
12926: LD_VAR 0 4
12930: ADD
12931: ST_TO_ADDR
// end ;
12932: GO 12861
12934: POP
12935: POP
// for i = 1 to mech do
12936: LD_ADDR_VAR 0 3
12940: PUSH
12941: DOUBLE
12942: LD_INT 1
12944: DEC
12945: ST_TO_ADDR
12946: LD_VAR 0 8
12950: PUSH
12951: FOR_TO
12952: IFFALSE 13009
// begin PrepareHuman ( false , 3 , skill ) ;
12954: LD_INT 0
12956: PPUSH
12957: LD_INT 3
12959: PPUSH
12960: LD_VAR 0 11
12964: PPUSH
12965: CALL_OW 380
// un := CreateHuman ;
12969: LD_ADDR_VAR 0 4
12973: PUSH
12974: CALL_OW 44
12978: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12979: LD_VAR 0 4
12983: PPUSH
12984: LD_INT 3
12986: PPUSH
12987: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12991: LD_ADDR_EXP 41
12995: PUSH
12996: LD_EXP 41
13000: PUSH
13001: LD_VAR 0 4
13005: ADD
13006: ST_TO_ADDR
// end ;
13007: GO 12951
13009: POP
13010: POP
// for i = 1 to eng do
13011: LD_ADDR_VAR 0 3
13015: PUSH
13016: DOUBLE
13017: LD_INT 1
13019: DEC
13020: ST_TO_ADDR
13021: LD_VAR 0 6
13025: PUSH
13026: FOR_TO
13027: IFFALSE 13072
// begin PrepareHuman ( false , 2 , skill ) ;
13029: LD_INT 0
13031: PPUSH
13032: LD_INT 2
13034: PPUSH
13035: LD_VAR 0 11
13039: PPUSH
13040: CALL_OW 380
// un := CreateHuman ;
13044: LD_ADDR_VAR 0 4
13048: PUSH
13049: CALL_OW 44
13053: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13054: LD_ADDR_EXP 41
13058: PUSH
13059: LD_EXP 41
13063: PUSH
13064: LD_VAR 0 4
13068: ADD
13069: ST_TO_ADDR
// end ;
13070: GO 13026
13072: POP
13073: POP
// for i = 1 to tank do
13074: LD_ADDR_VAR 0 3
13078: PUSH
13079: DOUBLE
13080: LD_INT 1
13082: DEC
13083: ST_TO_ADDR
13084: LD_VAR 0 9
13088: PUSH
13089: FOR_TO
13090: IFFALSE 13203
// begin Randomize ;
13092: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13096: LD_ADDR_OWVAR 37
13100: PUSH
13101: LD_INT 2
13103: ST_TO_ADDR
// vc_engine := engine_siberite ;
13104: LD_ADDR_OWVAR 39
13108: PUSH
13109: LD_INT 3
13111: ST_TO_ADDR
// vc_control := control_manual ;
13112: LD_ADDR_OWVAR 38
13116: PUSH
13117: LD_INT 1
13119: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13120: LD_ADDR_OWVAR 40
13124: PUSH
13125: LD_INT 7
13127: PUSH
13128: LD_INT 9
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 1
13137: PPUSH
13138: LD_INT 2
13140: PPUSH
13141: CALL_OW 12
13145: ARRAY
13146: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13147: LD_ADDR_OWVAR 41
13151: PUSH
13152: LD_INT 35
13154: PPUSH
13155: LD_INT 55
13157: PPUSH
13158: CALL_OW 12
13162: ST_TO_ADDR
// un := CreateVehicle ;
13163: LD_ADDR_VAR 0 4
13167: PUSH
13168: CALL_OW 45
13172: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13173: LD_VAR 0 4
13177: PPUSH
13178: LD_INT 5
13180: PPUSH
13181: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13185: LD_ADDR_EXP 41
13189: PUSH
13190: LD_EXP 41
13194: PUSH
13195: LD_VAR 0 4
13199: ADD
13200: ST_TO_ADDR
// end ;
13201: GO 13089
13203: POP
13204: POP
// if cargo then
13205: LD_VAR 0 10
13209: IFFALSE 13327
// begin vc_chassis := us_medium_tracked ;
13211: LD_ADDR_OWVAR 37
13215: PUSH
13216: LD_INT 3
13218: ST_TO_ADDR
// vc_engine := engine_combustion ;
13219: LD_ADDR_OWVAR 39
13223: PUSH
13224: LD_INT 1
13226: ST_TO_ADDR
// vc_control := control_manual ;
13227: LD_ADDR_OWVAR 38
13231: PUSH
13232: LD_INT 1
13234: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13235: LD_ADDR_OWVAR 40
13239: PUSH
13240: LD_INT 12
13242: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13243: LD_ADDR_OWVAR 41
13247: PUSH
13248: LD_INT 35
13250: PPUSH
13251: LD_INT 55
13253: PPUSH
13254: CALL_OW 12
13258: ST_TO_ADDR
// un := CreateVehicle ;
13259: LD_ADDR_VAR 0 4
13263: PUSH
13264: CALL_OW 45
13268: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13269: LD_VAR 0 4
13273: PPUSH
13274: LD_INT 5
13276: PPUSH
13277: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13281: LD_ADDR_EXP 41
13285: PUSH
13286: LD_EXP 41
13290: PUSH
13291: LD_VAR 0 4
13295: ADD
13296: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13297: LD_VAR 0 4
13301: PPUSH
13302: LD_INT 3
13304: PPUSH
13305: LD_INT 30
13307: PPUSH
13308: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13312: LD_VAR 0 4
13316: PPUSH
13317: LD_INT 1
13319: PPUSH
13320: LD_INT 40
13322: PPUSH
13323: CALL_OW 290
// end ; end ;
13327: LD_VAR 0 2
13331: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13332: LD_INT 0
13334: PPUSH
13335: PPUSH
13336: PPUSH
13337: PPUSH
13338: PPUSH
13339: PPUSH
13340: PPUSH
13341: PPUSH
13342: PPUSH
13343: PPUSH
// uc_side := 4 ;
13344: LD_ADDR_OWVAR 20
13348: PUSH
13349: LD_INT 4
13351: ST_TO_ADDR
// uc_nation := 1 ;
13352: LD_ADDR_OWVAR 21
13356: PUSH
13357: LD_INT 1
13359: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13360: LD_ADDR_VAR 0 10
13364: PUSH
13365: LD_INT 6
13367: PUSH
13368: LD_INT 5
13370: PUSH
13371: LD_INT 4
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: PUSH
13379: LD_OWVAR 67
13383: ARRAY
13384: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13385: LD_ADDR_EXP 42
13389: PUSH
13390: EMPTY
13391: ST_TO_ADDR
// sold := 1 ;
13392: LD_ADDR_VAR 0 4
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// eng := 0 ;
13400: LD_ADDR_VAR 0 5
13404: PUSH
13405: LD_INT 0
13407: ST_TO_ADDR
// sci := 0 ;
13408: LD_ADDR_VAR 0 6
13412: PUSH
13413: LD_INT 0
13415: ST_TO_ADDR
// mech := 3 ;
13416: LD_ADDR_VAR 0 7
13420: PUSH
13421: LD_INT 3
13423: ST_TO_ADDR
// tank := 3 ;
13424: LD_ADDR_VAR 0 8
13428: PUSH
13429: LD_INT 3
13431: ST_TO_ADDR
// cargo := 0 ;
13432: LD_ADDR_VAR 0 9
13436: PUSH
13437: LD_INT 0
13439: ST_TO_ADDR
// for i = 1 to sold do
13440: LD_ADDR_VAR 0 2
13444: PUSH
13445: DOUBLE
13446: LD_INT 1
13448: DEC
13449: ST_TO_ADDR
13450: LD_VAR 0 4
13454: PUSH
13455: FOR_TO
13456: IFFALSE 13528
// begin if i = 1 then
13458: LD_VAR 0 2
13462: PUSH
13463: LD_INT 1
13465: EQUAL
13466: IFFALSE 13485
// PrepareHuman ( sex_male , 1 , skill ) else
13468: LD_INT 1
13470: PPUSH
13471: LD_INT 1
13473: PPUSH
13474: LD_VAR 0 10
13478: PPUSH
13479: CALL_OW 380
13483: GO 13500
// PrepareHuman ( false , 1 , skill ) ;
13485: LD_INT 0
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: LD_VAR 0 10
13495: PPUSH
13496: CALL_OW 380
// un := CreateHuman ;
13500: LD_ADDR_VAR 0 3
13504: PUSH
13505: CALL_OW 44
13509: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13510: LD_ADDR_EXP 42
13514: PUSH
13515: LD_EXP 42
13519: PUSH
13520: LD_VAR 0 3
13524: ADD
13525: ST_TO_ADDR
// end ;
13526: GO 13455
13528: POP
13529: POP
// for i = 1 to mech do
13530: LD_ADDR_VAR 0 2
13534: PUSH
13535: DOUBLE
13536: LD_INT 1
13538: DEC
13539: ST_TO_ADDR
13540: LD_VAR 0 7
13544: PUSH
13545: FOR_TO
13546: IFFALSE 13603
// begin PrepareHuman ( false , 3 , skill ) ;
13548: LD_INT 0
13550: PPUSH
13551: LD_INT 3
13553: PPUSH
13554: LD_VAR 0 10
13558: PPUSH
13559: CALL_OW 380
// un := CreateHuman ;
13563: LD_ADDR_VAR 0 3
13567: PUSH
13568: CALL_OW 44
13572: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13573: LD_VAR 0 3
13577: PPUSH
13578: LD_INT 3
13580: PPUSH
13581: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13585: LD_ADDR_EXP 42
13589: PUSH
13590: LD_EXP 42
13594: PUSH
13595: LD_VAR 0 3
13599: ADD
13600: ST_TO_ADDR
// end ;
13601: GO 13545
13603: POP
13604: POP
// for i = 1 to tank do
13605: LD_ADDR_VAR 0 2
13609: PUSH
13610: DOUBLE
13611: LD_INT 1
13613: DEC
13614: ST_TO_ADDR
13615: LD_VAR 0 8
13619: PUSH
13620: FOR_TO
13621: IFFALSE 13867
// begin Randomize ;
13623: CALL_OW 10
// if i < 3 then
13627: LD_VAR 0 2
13631: PUSH
13632: LD_INT 3
13634: LESS
13635: IFFALSE 13744
// begin vc_chassis := us_medium_tracked ;
13637: LD_ADDR_OWVAR 37
13641: PUSH
13642: LD_INT 3
13644: ST_TO_ADDR
// vc_engine := engine_combustion ;
13645: LD_ADDR_OWVAR 39
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// vc_control := control_manual ;
13653: LD_ADDR_OWVAR 38
13657: PUSH
13658: LD_INT 1
13660: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13661: LD_ADDR_OWVAR 40
13665: PUSH
13666: LD_INT 3
13668: PUSH
13669: LD_INT 9
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 1
13678: PPUSH
13679: LD_INT 2
13681: PPUSH
13682: CALL_OW 12
13686: ARRAY
13687: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13688: LD_ADDR_OWVAR 41
13692: PUSH
13693: LD_INT 35
13695: PPUSH
13696: LD_INT 55
13698: PPUSH
13699: CALL_OW 12
13703: ST_TO_ADDR
// un := CreateVehicle ;
13704: LD_ADDR_VAR 0 3
13708: PUSH
13709: CALL_OW 45
13713: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13714: LD_VAR 0 3
13718: PPUSH
13719: LD_INT 5
13721: PPUSH
13722: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13726: LD_ADDR_EXP 42
13730: PUSH
13731: LD_EXP 42
13735: PUSH
13736: LD_VAR 0 3
13740: ADD
13741: ST_TO_ADDR
// end else
13742: GO 13865
// begin uc_nation := 3 ;
13744: LD_ADDR_OWVAR 21
13748: PUSH
13749: LD_INT 3
13751: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13752: LD_ADDR_OWVAR 37
13756: PUSH
13757: LD_INT 22
13759: ST_TO_ADDR
// vc_engine := engine_combustion ;
13760: LD_ADDR_OWVAR 39
13764: PUSH
13765: LD_INT 1
13767: ST_TO_ADDR
// vc_control := control_manual ;
13768: LD_ADDR_OWVAR 38
13772: PUSH
13773: LD_INT 1
13775: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13776: LD_ADDR_OWVAR 40
13780: PUSH
13781: LD_INT 51
13783: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13784: LD_ADDR_OWVAR 41
13788: PUSH
13789: LD_INT 35
13791: PPUSH
13792: LD_INT 55
13794: PPUSH
13795: CALL_OW 12
13799: ST_TO_ADDR
// un := CreateVehicle ;
13800: LD_ADDR_VAR 0 3
13804: PUSH
13805: CALL_OW 45
13809: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13810: LD_VAR 0 3
13814: PPUSH
13815: LD_INT 496
13817: PPUSH
13818: CALL_OW 234
// SetTag ( un , 5 ) ;
13822: LD_VAR 0 3
13826: PPUSH
13827: LD_INT 5
13829: PPUSH
13830: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13834: LD_VAR 0 3
13838: PPUSH
13839: LD_INT 2
13841: PPUSH
13842: LD_INT 100
13844: PPUSH
13845: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13849: LD_ADDR_EXP 42
13853: PUSH
13854: LD_EXP 42
13858: PUSH
13859: LD_VAR 0 3
13863: ADD
13864: ST_TO_ADDR
// end ; end ;
13865: GO 13620
13867: POP
13868: POP
// end ; end_of_file
13869: LD_VAR 0 1
13873: RET
// export function Action ; begin
13874: LD_INT 0
13876: PPUSH
// InGameOn ;
13877: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13881: LD_INT 151
13883: PPUSH
13884: LD_INT 107
13886: PPUSH
13887: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13891: LD_EXP 38
13895: PPUSH
13896: LD_INT 171
13898: PPUSH
13899: LD_INT 108
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13909: LD_EXP 39
13913: PPUSH
13914: LD_INT 172
13916: PPUSH
13917: LD_INT 110
13919: PPUSH
13920: LD_INT 0
13922: PPUSH
13923: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13927: LD_EXP 38
13931: PPUSH
13932: LD_INT 156
13934: PPUSH
13935: LD_INT 107
13937: PPUSH
13938: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13942: LD_EXP 39
13946: PPUSH
13947: LD_INT 154
13949: PPUSH
13950: LD_INT 105
13952: PPUSH
13953: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13957: LD_INT 4
13959: PPUSH
13960: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13964: LD_EXP 38
13968: PPUSH
13969: CALL_OW 250
13973: PUSH
13974: LD_INT 156
13976: EQUAL
13977: PUSH
13978: LD_EXP 38
13982: PPUSH
13983: CALL_OW 251
13987: PUSH
13988: LD_INT 107
13990: EQUAL
13991: AND
13992: IFFALSE 13957
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13994: LD_EXP 38
13998: PUSH
13999: LD_EXP 39
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PPUSH
14008: LD_INT 35
14010: PPUSH
14011: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
14015: LD_EXP 38
14019: PPUSH
14020: LD_STRING D1-A-1
14022: PPUSH
14023: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14027: LD_EXP 39
14031: PPUSH
14032: LD_STRING D1-B-1
14034: PPUSH
14035: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14039: LD_EXP 38
14043: PPUSH
14044: LD_STRING D1-A-2
14046: PPUSH
14047: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14051: LD_EXP 39
14055: PPUSH
14056: LD_STRING D1-B-2
14058: PPUSH
14059: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14063: LD_EXP 38
14067: PUSH
14068: LD_EXP 39
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PPUSH
14077: LD_INT 147
14079: PPUSH
14080: LD_INT 108
14082: PPUSH
14083: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14087: LD_EXP 38
14091: PPUSH
14092: LD_STRING D1-A-3
14094: PPUSH
14095: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14099: LD_INT 4
14101: PPUSH
14102: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_INT 35
14113: PPUSH
14114: CALL_OW 296
14118: PUSH
14119: LD_INT 8
14121: LESS
14122: IFFALSE 14099
// ComTurnUnit ( guyA , guyB ) ;
14124: LD_EXP 38
14128: PPUSH
14129: LD_EXP 39
14133: PPUSH
14134: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14138: LD_EXP 39
14142: PPUSH
14143: LD_EXP 38
14147: PPUSH
14148: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14152: LD_EXP 38
14156: PPUSH
14157: LD_STRING D1-A-10
14159: PPUSH
14160: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14164: LD_EXP 39
14168: PPUSH
14169: LD_STRING D1-B-10
14171: PPUSH
14172: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14176: LD_EXP 38
14180: PPUSH
14181: LD_STRING D1-A-11
14183: PPUSH
14184: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14188: LD_EXP 39
14192: PPUSH
14193: LD_STRING D1-B-11
14195: PPUSH
14196: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14200: LD_EXP 38
14204: PPUSH
14205: LD_STRING D1-A-12
14207: PPUSH
14208: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14212: LD_EXP 39
14216: PPUSH
14217: LD_STRING D1-B-12
14219: PPUSH
14220: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14224: LD_EXP 38
14228: PPUSH
14229: LD_STRING D1-A-13
14231: PPUSH
14232: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14236: LD_EXP 39
14240: PPUSH
14241: LD_STRING D1-B-13
14243: PPUSH
14244: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14248: LD_EXP 38
14252: PPUSH
14253: LD_STRING D1-A-14
14255: PPUSH
14256: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14260: LD_EXP 39
14264: PPUSH
14265: LD_STRING D1-B-14
14267: PPUSH
14268: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14272: LD_EXP 38
14276: PPUSH
14277: LD_STRING D1-A-15
14279: PPUSH
14280: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14284: LD_EXP 39
14288: PPUSH
14289: LD_STRING D1-B-15
14291: PPUSH
14292: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14296: LD_EXP 38
14300: PPUSH
14301: LD_STRING D1-A-16
14303: PPUSH
14304: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14308: LD_EXP 39
14312: PPUSH
14313: LD_STRING D1-B-16
14315: PPUSH
14316: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14320: LD_EXP 38
14324: PPUSH
14325: LD_STRING D1-A-17
14327: PPUSH
14328: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14332: LD_EXP 39
14336: PPUSH
14337: LD_STRING D1-B-17
14339: PPUSH
14340: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14344: LD_EXP 38
14348: PPUSH
14349: LD_STRING D1-A-18
14351: PPUSH
14352: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14356: LD_INT 35
14358: PPUSH
14359: LD_INT 1
14361: PPUSH
14362: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14366: LD_EXP 38
14370: PUSH
14371: LD_EXP 39
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PPUSH
14380: LD_INT 35
14382: PPUSH
14383: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14387: LD_INT 4
14389: PPUSH
14390: CALL_OW 67
// until IsInUnit ( guyA ) ;
14394: LD_EXP 38
14398: PPUSH
14399: CALL_OW 310
14403: IFFALSE 14387
// Wait ( 0 0$02 ) ;
14405: LD_INT 70
14407: PPUSH
14408: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14412: LD_EXP 38
14416: PPUSH
14417: LD_STRING D1-A-19
14419: PPUSH
14420: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14424: LD_EXP 39
14428: PPUSH
14429: LD_STRING D1-B-19
14431: PPUSH
14432: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14436: LD_EXP 38
14440: PPUSH
14441: LD_STRING D1-A-20
14443: PPUSH
14444: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14448: LD_INT 10
14450: PPUSH
14451: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14455: LD_EXP 39
14459: PPUSH
14460: LD_STRING D1-B-20
14462: PPUSH
14463: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14467: LD_EXP 38
14471: PPUSH
14472: LD_STRING D1-A-21
14474: PPUSH
14475: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14479: LD_EXP 39
14483: PPUSH
14484: LD_STRING D1-B-21
14486: PPUSH
14487: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14491: LD_EXP 38
14495: PPUSH
14496: LD_STRING D1-A-22
14498: PPUSH
14499: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14503: LD_EXP 39
14507: PPUSH
14508: LD_STRING D1-B-22
14510: PPUSH
14511: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14515: LD_EXP 38
14519: PPUSH
14520: LD_STRING D1-A-23
14522: PPUSH
14523: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14527: LD_EXP 39
14531: PPUSH
14532: LD_STRING D1-B-23
14534: PPUSH
14535: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14539: LD_EXP 38
14543: PPUSH
14544: LD_STRING D1-A-24
14546: PPUSH
14547: CALL_OW 88
// InGameOff ;
14551: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14555: LD_STRING M_main
14557: PPUSH
14558: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14562: LD_INT 4
14564: PPUSH
14565: LD_INT 1
14567: PPUSH
14568: CALL_OW 343
// game_status := true ;
14572: LD_ADDR_EXP 29
14576: PUSH
14577: LD_INT 1
14579: ST_TO_ADDR
// end ;
14580: LD_VAR 0 1
14584: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14585: LD_INT 1
14587: PPUSH
14588: CALL 6376 0 1
14592: PUSH
14593: LD_INT 0
14595: GREATER
14596: IFFALSE 14698
14598: GO 14600
14600: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14601: LD_INT 35
14603: PPUSH
14604: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14608: LD_INT 1
14610: PPUSH
14611: CALL 6376 0 1
14615: PUSH
14616: LD_INT 1
14618: ARRAY
14619: PPUSH
14620: CALL_OW 461
14624: PUSH
14625: LD_INT 1
14627: NONEQUAL
14628: IFFALSE 14601
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14630: LD_EXP 38
14634: PPUSH
14635: CALL_OW 300
14639: PUSH
14640: LD_EXP 39
14644: PPUSH
14645: CALL_OW 300
14649: AND
14650: PUSH
14651: LD_EXP 30
14655: NOT
14656: AND
14657: IFFALSE 14683
// begin Say ( guyA , DL-A-1 ) ;
14659: LD_EXP 38
14663: PPUSH
14664: LD_STRING DL-A-1
14666: PPUSH
14667: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14671: LD_EXP 39
14675: PPUSH
14676: LD_STRING DL-B-1
14678: PPUSH
14679: CALL_OW 88
// end ; if not helps_can_arrive then
14683: LD_EXP 31
14687: NOT
14688: IFFALSE 14698
// helps_can_arrive := true ;
14690: LD_ADDR_EXP 31
14694: PUSH
14695: LD_INT 1
14697: ST_TO_ADDR
// end ;
14698: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14699: LD_INT 1
14701: PPUSH
14702: CALL 6376 0 1
14706: PUSH
14707: LD_INT 0
14709: GREATER
14710: PUSH
14711: LD_EXP 38
14715: PPUSH
14716: CALL_OW 300
14720: AND
14721: PUSH
14722: LD_EXP 39
14726: PPUSH
14727: CALL_OW 300
14731: AND
14732: PUSH
14733: LD_INT 22
14735: PUSH
14736: LD_INT 1
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: LD_INT 25
14745: PUSH
14746: LD_INT 12
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PPUSH
14757: CALL_OW 69
14761: PUSH
14762: LD_INT 0
14764: EQUAL
14765: AND
14766: PUSH
14767: LD_INT 1
14769: PPUSH
14770: LD_INT 25
14772: PUSH
14773: LD_INT 12
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PPUSH
14780: CALL_OW 69
14784: PPUSH
14785: LD_EXP 38
14789: PPUSH
14790: CALL_OW 74
14794: PPUSH
14795: CALL_OW 292
14799: AND
14800: IFFALSE 14841
14802: GO 14804
14804: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14805: LD_EXP 38
14809: PPUSH
14810: LD_STRING DA-A-1
14812: PPUSH
14813: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14817: LD_EXP 39
14821: PPUSH
14822: LD_STRING DA-B-1
14824: PPUSH
14825: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14829: LD_EXP 38
14833: PPUSH
14834: LD_STRING DA-A-2
14836: PPUSH
14837: CALL_OW 88
// end ;
14841: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14842: LD_EXP 29
14846: PUSH
14847: LD_EXP 38
14851: PPUSH
14852: LD_INT 6
14854: PPUSH
14855: CALL_OW 299
14859: PUSH
14860: LD_INT 7
14862: LESS
14863: AND
14864: IFFALSE 14917
14866: GO 14868
14868: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14869: LD_INT 117
14871: PPUSH
14872: LD_INT 50
14874: PPUSH
14875: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14879: LD_INT 1
14881: PPUSH
14882: CALL 10013 0 1
14886: PUSH
14887: LD_INT 2
14889: ARRAY
14890: PPUSH
14891: LD_STRING D5-A-1
14893: PPUSH
14894: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14898: LD_INT 1
14900: PPUSH
14901: CALL 10013 0 1
14905: PUSH
14906: LD_INT 1
14908: ARRAY
14909: PPUSH
14910: LD_STRING D5-B-1
14912: PPUSH
14913: CALL_OW 88
// end ;
14917: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14918: LD_INT 7
14920: PPUSH
14921: LD_INT 22
14923: PUSH
14924: LD_INT 1
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PPUSH
14931: CALL_OW 70
14935: PUSH
14936: LD_INT 0
14938: GREATER
14939: IFFALSE 15084
14941: GO 14943
14943: DISABLE
// begin Wait ( 0 0$03 ) ;
14944: LD_INT 105
14946: PPUSH
14947: CALL_OW 67
// DialogueOn ;
14951: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14955: LD_INT 1
14957: PPUSH
14958: CALL 10013 0 1
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PPUSH
14967: LD_STRING D6-A-1
14969: PPUSH
14970: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14974: LD_INT 1
14976: PPUSH
14977: CALL 10013 0 1
14981: PUSH
14982: LD_INT 2
14984: ARRAY
14985: PPUSH
14986: LD_STRING D6-B-1
14988: PPUSH
14989: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14993: LD_INT 95
14995: PPUSH
14996: LD_INT 8
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: LD_INT 20
15004: PPUSH
15005: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
15009: LD_INT 10
15011: PPUSH
15012: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
15016: LD_INT 1
15018: PPUSH
15019: CALL 10013 0 1
15023: PUSH
15024: LD_INT 1
15026: ARRAY
15027: PPUSH
15028: LD_STRING D6-A-2
15030: PPUSH
15031: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15035: LD_INT 1
15037: PPUSH
15038: CALL 10013 0 1
15042: PUSH
15043: LD_INT 2
15045: ARRAY
15046: PPUSH
15047: LD_STRING D6-B-2
15049: PPUSH
15050: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15054: LD_INT 1
15056: PPUSH
15057: CALL 10013 0 1
15061: PUSH
15062: LD_INT 1
15064: ARRAY
15065: PPUSH
15066: LD_STRING D6-A-3
15068: PPUSH
15069: CALL_OW 88
// DialogueOff ;
15073: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15077: LD_STRING M_base
15079: PPUSH
15080: CALL_OW 337
// end ;
15084: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15085: LD_EXP 30
15089: NOT
15090: PUSH
15091: LD_INT 22
15093: PUSH
15094: LD_INT 3
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 21
15103: PUSH
15104: LD_INT 2
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PPUSH
15115: CALL_OW 69
15119: PUSH
15120: LD_INT 0
15122: GREATER
15123: AND
15124: IFFALSE 15257
15126: GO 15128
15128: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15129: LD_INT 35
15131: PPUSH
15132: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15136: LD_INT 22
15138: PUSH
15139: LD_INT 3
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 21
15148: PUSH
15149: LD_INT 2
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PPUSH
15160: CALL_OW 69
15164: PPUSH
15165: LD_INT 1
15167: PPUSH
15168: CALL 10013 0 1
15172: PUSH
15173: LD_INT 1
15175: ARRAY
15176: PPUSH
15177: CALL_OW 74
15181: PPUSH
15182: LD_INT 1
15184: PPUSH
15185: CALL 10013 0 1
15189: PUSH
15190: LD_INT 1
15192: ARRAY
15193: PPUSH
15194: CALL_OW 296
15198: PUSH
15199: LD_INT 7
15201: LESS
15202: IFFALSE 15129
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15204: LD_INT 1
15206: PPUSH
15207: CALL 10013 0 1
15211: PUSH
15212: LD_INT 1
15214: ARRAY
15215: PPUSH
15216: LD_STRING DR-A-1
15218: PPUSH
15219: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15223: LD_INT 1
15225: PPUSH
15226: CALL 10013 0 1
15230: PUSH
15231: LD_INT 2
15233: ARRAY
15234: PPUSH
15235: LD_STRING DR-B-1
15237: PPUSH
15238: CALL_OW 88
// Wait ( 3 3$00 ) ;
15242: LD_INT 6300
15244: PPUSH
15245: CALL_OW 67
// ru_spotted := true ;
15249: LD_ADDR_EXP 16
15253: PUSH
15254: LD_INT 1
15256: ST_TO_ADDR
// end ;
15257: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15258: LD_INT 35
15260: PPUSH
15261: CALL_OW 300
15265: NOT
15266: IFFALSE 15290
15268: GO 15270
15270: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15271: LD_INT 1
15273: PPUSH
15274: CALL 10013 0 1
15278: PUSH
15279: LD_INT 1
15281: ARRAY
15282: PPUSH
15283: LD_STRING DDR-A-1
15285: PPUSH
15286: CALL_OW 88
15290: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15291: LD_INT 1
15293: PPUSH
15294: LD_INT 30
15296: PPUSH
15297: CALL 6227 0 2
15301: IFFALSE 15383
15303: GO 15305
15305: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15306: LD_INT 35
15308: PPUSH
15309: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15313: LD_INT 1
15315: PPUSH
15316: LD_INT 30
15318: PPUSH
15319: CALL 6227 0 2
15323: PUSH
15324: LD_INT 1
15326: ARRAY
15327: PPUSH
15328: CALL_OW 461
15332: PUSH
15333: LD_INT 1
15335: NONEQUAL
15336: IFFALSE 15306
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15338: LD_INT 1
15340: PPUSH
15341: CALL 10013 0 1
15345: PUSH
15346: LD_INT 1
15348: ARRAY
15349: PPUSH
15350: LD_STRING D8-A-1
15352: PPUSH
15353: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15357: LD_INT 1
15359: PPUSH
15360: CALL 10013 0 1
15364: PUSH
15365: LD_INT 2
15367: ARRAY
15368: PPUSH
15369: LD_STRING D8-B-1
15371: PPUSH
15372: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15376: LD_STRING M_mineok
15378: PPUSH
15379: CALL_OW 337
// end ;
15383: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15384: LD_INT 22
15386: PUSH
15387: LD_INT 1
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 30
15396: PUSH
15397: LD_INT 0
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: LD_INT 3
15406: PUSH
15407: LD_INT 57
15409: PUSH
15410: EMPTY
15411: LIST
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: LIST
15421: PPUSH
15422: CALL_OW 69
15426: PUSH
15427: LD_INT 1
15429: GREATER
15430: PUSH
15431: LD_INT 22
15433: PUSH
15434: LD_INT 1
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 30
15443: PUSH
15444: LD_INT 0
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 3
15453: PUSH
15454: LD_INT 57
15456: PUSH
15457: EMPTY
15458: LIST
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: LIST
15468: PPUSH
15469: CALL_OW 69
15473: PUSH
15474: LD_INT 1
15476: EQUAL
15477: PUSH
15478: LD_INT 35
15480: PPUSH
15481: CALL_OW 300
15485: NOT
15486: AND
15487: OR
15488: IFFALSE 15540
15490: GO 15492
15492: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15493: LD_INT 22
15495: PUSH
15496: LD_INT 1
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 25
15505: PUSH
15506: LD_INT 2
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PPUSH
15517: CALL_OW 69
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: PPUSH
15526: LD_STRING D7-A-1
15528: PPUSH
15529: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15533: LD_STRING M_baseok
15535: PPUSH
15536: CALL_OW 337
// end ;
15540: END
// every 0 0$01 trigger mine_ck do
15541: LD_EXP 35
15545: IFFALSE 15576
15547: GO 15549
15549: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15550: LD_INT 1
15552: PPUSH
15553: CALL 10013 0 1
15557: PUSH
15558: LD_INT 1
15560: ARRAY
15561: PPUSH
15562: LD_STRING D9-A-1
15564: PPUSH
15565: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15569: LD_STRING M_minedest
15571: PPUSH
15572: CALL_OW 337
// end ;
15576: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15577: LD_EXP 29
15581: IFFALSE 16087
15583: GO 15585
15585: DISABLE
15586: LD_INT 0
15588: PPUSH
15589: PPUSH
15590: PPUSH
15591: PPUSH
15592: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15593: LD_OWVAR 67
15597: PPUSH
15598: CALL 11914 0 1
// if not helps_can_arrive then
15602: LD_EXP 31
15606: NOT
15607: IFFALSE 15635
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15609: LD_EXP 40
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PPUSH
15618: LD_STRING DB-Delay
15620: PPUSH
15621: CALL_OW 94
// time := 10 10$00 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_INT 21000
15632: ST_TO_ADDR
// end else
15633: GO 15643
// time := 3 3$00 ;
15635: LD_ADDR_VAR 0 1
15639: PUSH
15640: LD_INT 6300
15642: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15643: LD_ADDR_VAR 0 1
15647: PUSH
15648: LD_VAR 0 1
15652: PUSH
15653: LD_INT 35
15655: MINUS
15656: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15657: LD_INT 35
15659: PPUSH
15660: CALL_OW 67
// end until time = 0 0$00 ;
15664: LD_VAR 0 1
15668: PUSH
15669: LD_INT 0
15671: EQUAL
15672: IFFALSE 15643
// helps_arrive := true ;
15674: LD_ADDR_EXP 30
15678: PUSH
15679: LD_INT 1
15681: ST_TO_ADDR
// if IsLive ( guyA ) then
15682: LD_EXP 38
15686: PPUSH
15687: CALL_OW 300
15691: IFFALSE 15705
// r := guyA else
15693: LD_ADDR_VAR 0 4
15697: PUSH
15698: LD_EXP 38
15702: ST_TO_ADDR
15703: GO 15715
// r := guyB ;
15705: LD_ADDR_VAR 0 4
15709: PUSH
15710: LD_EXP 39
15714: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15715: LD_EXP 40
15719: PUSH
15720: LD_INT 1
15722: ARRAY
15723: PPUSH
15724: LD_STRING D2-A-1
15726: PPUSH
15727: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15731: LD_VAR 0 4
15735: PPUSH
15736: LD_STRING D2-B-1
15738: PPUSH
15739: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15743: LD_EXP 40
15747: PUSH
15748: LD_INT 1
15750: ARRAY
15751: PPUSH
15752: LD_STRING D2-A-2
15754: PPUSH
15755: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15759: LD_VAR 0 4
15763: PPUSH
15764: LD_STRING D2-B-2
15766: PPUSH
15767: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15771: LD_EXP 40
15775: PUSH
15776: LD_INT 1
15778: ARRAY
15779: PPUSH
15780: LD_STRING D2-A-3
15782: PPUSH
15783: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15787: LD_VAR 0 4
15791: PPUSH
15792: LD_STRING D2-B-3
15794: PPUSH
15795: CALL_OW 88
// to_veh := [ ] ;
15799: LD_ADDR_VAR 0 5
15803: PUSH
15804: EMPTY
15805: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15806: LD_ADDR_VAR 0 2
15810: PUSH
15811: DOUBLE
15812: LD_INT 1
15814: DEC
15815: ST_TO_ADDR
15816: LD_EXP 40
15820: PUSH
15821: FOR_TO
15822: IFFALSE 16085
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15824: LD_EXP 40
15828: PUSH
15829: LD_VAR 0 2
15833: ARRAY
15834: PPUSH
15835: CALL_OW 110
15839: PUSH
15840: LD_INT 3
15842: EQUAL
15843: IFFALSE 15869
// to_veh := to_veh ^ Beta_Squad [ i ] else
15845: LD_ADDR_VAR 0 5
15849: PUSH
15850: LD_VAR 0 5
15854: PUSH
15855: LD_EXP 40
15859: PUSH
15860: LD_VAR 0 2
15864: ARRAY
15865: ADD
15866: ST_TO_ADDR
15867: GO 15994
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15869: LD_EXP 40
15873: PUSH
15874: LD_VAR 0 2
15878: ARRAY
15879: PPUSH
15880: CALL_OW 110
15884: PUSH
15885: LD_INT 5
15887: EQUAL
15888: IFFALSE 15973
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 4
15903: PPUSH
15904: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15908: LD_EXP 40
15912: PUSH
15913: LD_VAR 0 2
15917: ARRAY
15918: PPUSH
15919: LD_INT 5
15921: PPUSH
15922: LD_INT 0
15924: PPUSH
15925: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15929: LD_VAR 0 5
15933: PUSH
15934: LD_INT 1
15936: ARRAY
15937: PPUSH
15938: LD_EXP 40
15942: PUSH
15943: LD_VAR 0 2
15947: ARRAY
15948: PPUSH
15949: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15953: LD_ADDR_VAR 0 5
15957: PUSH
15958: LD_VAR 0 5
15962: PPUSH
15963: LD_INT 1
15965: PPUSH
15966: CALL_OW 3
15970: ST_TO_ADDR
// end else
15971: GO 15994
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15973: LD_EXP 40
15977: PUSH
15978: LD_VAR 0 2
15982: ARRAY
15983: PPUSH
15984: LD_INT 5
15986: PPUSH
15987: LD_INT 0
15989: PPUSH
15990: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15994: LD_EXP 40
15998: PUSH
15999: LD_VAR 0 2
16003: ARRAY
16004: PPUSH
16005: LD_INT 165
16007: PPUSH
16008: LD_INT 105
16010: PPUSH
16011: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16015: LD_INT 70
16017: PPUSH
16018: LD_INT 140
16020: PPUSH
16021: CALL_OW 12
16025: PPUSH
16026: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16030: LD_EXP 40
16034: PUSH
16035: LD_VAR 0 2
16039: ARRAY
16040: PPUSH
16041: LD_INT 1
16043: PPUSH
16044: CALL_OW 235
// if i = 1 then
16048: LD_VAR 0 2
16052: PUSH
16053: LD_INT 1
16055: EQUAL
16056: IFFALSE 16068
// CenterNowOnXY ( 168 , 109 ) ;
16058: LD_INT 168
16060: PPUSH
16061: LD_INT 109
16063: PPUSH
16064: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16068: LD_EXP 40
16072: PUSH
16073: LD_VAR 0 2
16077: ARRAY
16078: PPUSH
16079: CALL_OW 141
// end ;
16083: GO 15821
16085: POP
16086: POP
// end ;
16087: PPOPN 5
16089: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16090: LD_EXP 30
16094: IFFALSE 17123
16096: GO 16098
16098: DISABLE
16099: LD_INT 0
16101: PPUSH
16102: PPUSH
// begin Wait ( 5 5$00 ) ;
16103: LD_INT 10500
16105: PPUSH
16106: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16110: LD_OWVAR 67
16114: PPUSH
16115: CALL 12603 0 1
// to_veh := [ ] ;
16119: LD_ADDR_VAR 0 2
16123: PUSH
16124: EMPTY
16125: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16126: LD_ADDR_VAR 0 1
16130: PUSH
16131: DOUBLE
16132: LD_INT 1
16134: DEC
16135: ST_TO_ADDR
16136: LD_EXP 41
16140: PUSH
16141: FOR_TO
16142: IFFALSE 16370
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16144: LD_EXP 41
16148: PUSH
16149: LD_VAR 0 1
16153: ARRAY
16154: PPUSH
16155: CALL_OW 110
16159: PUSH
16160: LD_INT 3
16162: EQUAL
16163: IFFALSE 16189
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16165: LD_ADDR_VAR 0 2
16169: PUSH
16170: LD_VAR 0 2
16174: PUSH
16175: LD_EXP 41
16179: PUSH
16180: LD_VAR 0 1
16184: ARRAY
16185: ADD
16186: ST_TO_ADDR
16187: GO 16314
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16189: LD_EXP 41
16193: PUSH
16194: LD_VAR 0 1
16198: ARRAY
16199: PPUSH
16200: CALL_OW 110
16204: PUSH
16205: LD_INT 5
16207: EQUAL
16208: IFFALSE 16293
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 4
16223: PPUSH
16224: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16228: LD_EXP 41
16232: PUSH
16233: LD_VAR 0 1
16237: ARRAY
16238: PPUSH
16239: LD_INT 5
16241: PPUSH
16242: LD_INT 0
16244: PPUSH
16245: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16249: LD_VAR 0 2
16253: PUSH
16254: LD_INT 1
16256: ARRAY
16257: PPUSH
16258: LD_EXP 41
16262: PUSH
16263: LD_VAR 0 1
16267: ARRAY
16268: PPUSH
16269: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16273: LD_ADDR_VAR 0 2
16277: PUSH
16278: LD_VAR 0 2
16282: PPUSH
16283: LD_INT 1
16285: PPUSH
16286: CALL_OW 3
16290: ST_TO_ADDR
// end else
16291: GO 16314
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16293: LD_EXP 41
16297: PUSH
16298: LD_VAR 0 1
16302: ARRAY
16303: PPUSH
16304: LD_INT 5
16306: PPUSH
16307: LD_INT 0
16309: PPUSH
16310: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16314: LD_EXP 41
16318: PUSH
16319: LD_VAR 0 1
16323: ARRAY
16324: PPUSH
16325: LD_INT 164
16327: PPUSH
16328: LD_INT 104
16330: PPUSH
16331: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16335: LD_INT 70
16337: PPUSH
16338: LD_INT 140
16340: PPUSH
16341: CALL_OW 12
16345: PPUSH
16346: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16350: LD_EXP 41
16354: PUSH
16355: LD_VAR 0 1
16359: ARRAY
16360: PPUSH
16361: LD_INT 1
16363: PPUSH
16364: CALL_OW 235
// end ;
16368: GO 16141
16370: POP
16371: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16372: LD_EXP 41
16376: PUSH
16377: LD_INT 1
16379: ARRAY
16380: PPUSH
16381: LD_STRING D3-A-1
16383: PPUSH
16384: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16388: LD_INT 1
16390: PPUSH
16391: CALL 10013 0 1
16395: PUSH
16396: LD_INT 1
16398: ARRAY
16399: PPUSH
16400: LD_STRING D3-B-1
16402: PPUSH
16403: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16407: LD_EXP 41
16411: PUSH
16412: LD_INT 1
16414: ARRAY
16415: PPUSH
16416: LD_STRING D3-A-2
16418: PPUSH
16419: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16423: LD_INT 1
16425: PPUSH
16426: CALL 10013 0 1
16430: PUSH
16431: LD_INT 1
16433: ARRAY
16434: PPUSH
16435: LD_STRING D3-B-2
16437: PPUSH
16438: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16442: LD_EXP 41
16446: PUSH
16447: LD_INT 1
16449: ARRAY
16450: PPUSH
16451: LD_STRING D3-A-3
16453: PPUSH
16454: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16458: LD_INT 1
16460: PPUSH
16461: CALL 10013 0 1
16465: PUSH
16466: LD_INT 1
16468: ARRAY
16469: PPUSH
16470: LD_STRING D3-B-3
16472: PPUSH
16473: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16477: LD_EXP 41
16481: PUSH
16482: LD_INT 1
16484: ARRAY
16485: PPUSH
16486: LD_STRING D3-A-4
16488: PPUSH
16489: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16493: LD_INT 1
16495: PPUSH
16496: CALL 10013 0 1
16500: PUSH
16501: LD_INT 1
16503: ARRAY
16504: PPUSH
16505: LD_STRING D3-B-4
16507: PPUSH
16508: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16512: LD_EXP 41
16516: PUSH
16517: LD_INT 1
16519: ARRAY
16520: PPUSH
16521: LD_STRING D3-A-5
16523: PPUSH
16524: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16528: LD_INT 1
16530: PPUSH
16531: CALL 10013 0 1
16535: PUSH
16536: LD_INT 1
16538: ARRAY
16539: PPUSH
16540: LD_STRING D3-B-5
16542: PPUSH
16543: CALL_OW 88
// for i = 1 to Gamma_Squad do
16547: LD_ADDR_VAR 0 1
16551: PUSH
16552: DOUBLE
16553: LD_INT 1
16555: DEC
16556: ST_TO_ADDR
16557: LD_EXP 41
16561: PUSH
16562: FOR_TO
16563: IFFALSE 16585
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16565: LD_EXP 41
16569: PUSH
16570: LD_VAR 0 1
16574: ARRAY
16575: PPUSH
16576: LD_INT 1
16578: PPUSH
16579: CALL_OW 235
16583: GO 16562
16585: POP
16586: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16587: LD_INT 6300
16589: PUSH
16590: LD_INT 10500
16592: PUSH
16593: LD_INT 11550
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: LIST
16600: PUSH
16601: LD_OWVAR 67
16605: ARRAY
16606: PPUSH
16607: CALL_OW 67
// AddZetaSquad ;
16611: CALL 13332 0 0
// Wait ( 0 0$10 ) ;
16615: LD_INT 350
16617: PPUSH
16618: CALL_OW 67
// to_veh := [ ] ;
16622: LD_ADDR_VAR 0 2
16626: PUSH
16627: EMPTY
16628: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16629: LD_ADDR_VAR 0 1
16633: PUSH
16634: DOUBLE
16635: LD_INT 1
16637: DEC
16638: ST_TO_ADDR
16639: LD_EXP 42
16643: PUSH
16644: FOR_TO
16645: IFFALSE 16855
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16647: LD_EXP 42
16651: PUSH
16652: LD_VAR 0 1
16656: ARRAY
16657: PPUSH
16658: CALL_OW 110
16662: PUSH
16663: LD_INT 3
16665: EQUAL
16666: IFFALSE 16692
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16668: LD_ADDR_VAR 0 2
16672: PUSH
16673: LD_VAR 0 2
16677: PUSH
16678: LD_EXP 42
16682: PUSH
16683: LD_VAR 0 1
16687: ARRAY
16688: ADD
16689: ST_TO_ADDR
16690: GO 16817
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16692: LD_EXP 42
16696: PUSH
16697: LD_VAR 0 1
16701: ARRAY
16702: PPUSH
16703: CALL_OW 110
16707: PUSH
16708: LD_INT 5
16710: EQUAL
16711: IFFALSE 16796
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 4
16726: PPUSH
16727: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16731: LD_EXP 42
16735: PUSH
16736: LD_VAR 0 1
16740: ARRAY
16741: PPUSH
16742: LD_INT 5
16744: PPUSH
16745: LD_INT 0
16747: PPUSH
16748: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16752: LD_VAR 0 2
16756: PUSH
16757: LD_INT 1
16759: ARRAY
16760: PPUSH
16761: LD_EXP 42
16765: PUSH
16766: LD_VAR 0 1
16770: ARRAY
16771: PPUSH
16772: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16776: LD_ADDR_VAR 0 2
16780: PUSH
16781: LD_VAR 0 2
16785: PPUSH
16786: LD_INT 1
16788: PPUSH
16789: CALL_OW 3
16793: ST_TO_ADDR
// end else
16794: GO 16817
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16796: LD_EXP 42
16800: PUSH
16801: LD_VAR 0 1
16805: ARRAY
16806: PPUSH
16807: LD_INT 5
16809: PPUSH
16810: LD_INT 0
16812: PPUSH
16813: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16817: LD_EXP 42
16821: PUSH
16822: LD_VAR 0 1
16826: ARRAY
16827: PPUSH
16828: LD_INT 165
16830: PPUSH
16831: LD_INT 105
16833: PPUSH
16834: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16838: LD_INT 70
16840: PPUSH
16841: LD_INT 140
16843: PPUSH
16844: CALL_OW 12
16848: PPUSH
16849: CALL_OW 67
// end ;
16853: GO 16644
16855: POP
16856: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16857: LD_EXP 42
16861: PUSH
16862: LD_INT 1
16864: ARRAY
16865: PPUSH
16866: LD_STRING D4-A-1
16868: PPUSH
16869: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16873: LD_INT 1
16875: PPUSH
16876: CALL 10013 0 1
16880: PUSH
16881: LD_INT 1
16883: ARRAY
16884: PPUSH
16885: LD_STRING D4-B-1
16887: PPUSH
16888: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16892: LD_EXP 42
16896: PUSH
16897: LD_INT 1
16899: ARRAY
16900: PPUSH
16901: LD_STRING D4-A-2
16903: PPUSH
16904: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16908: LD_INT 1
16910: PPUSH
16911: CALL 10013 0 1
16915: PUSH
16916: LD_INT 1
16918: ARRAY
16919: PPUSH
16920: LD_STRING D4-B-2
16922: PPUSH
16923: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16927: LD_EXP 42
16931: PUSH
16932: LD_INT 1
16934: ARRAY
16935: PPUSH
16936: LD_STRING D4-A-3
16938: PPUSH
16939: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16943: LD_INT 1
16945: PPUSH
16946: CALL 10013 0 1
16950: PUSH
16951: LD_INT 1
16953: ARRAY
16954: PPUSH
16955: LD_STRING D4-B-3
16957: PPUSH
16958: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16962: LD_EXP 42
16966: PUSH
16967: LD_INT 1
16969: ARRAY
16970: PPUSH
16971: LD_STRING D4-A-4
16973: PPUSH
16974: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16978: LD_INT 1
16980: PPUSH
16981: CALL 10013 0 1
16985: PUSH
16986: LD_INT 1
16988: ARRAY
16989: PPUSH
16990: LD_STRING D4-B-4
16992: PPUSH
16993: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16997: LD_EXP 42
17001: PUSH
17002: LD_INT 1
17004: ARRAY
17005: PPUSH
17006: LD_STRING D4-A-5
17008: PPUSH
17009: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
17013: LD_INT 1
17015: PPUSH
17016: CALL 10013 0 1
17020: PUSH
17021: LD_INT 1
17023: ARRAY
17024: PPUSH
17025: LD_STRING D4-B-5
17027: PPUSH
17028: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17032: LD_EXP 42
17036: PUSH
17037: LD_INT 1
17039: ARRAY
17040: PPUSH
17041: LD_STRING D4-A-6
17043: PPUSH
17044: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17048: LD_INT 1
17050: PPUSH
17051: CALL 10013 0 1
17055: PUSH
17056: LD_INT 1
17058: ARRAY
17059: PPUSH
17060: LD_STRING D4-B-6
17062: PPUSH
17063: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17067: LD_EXP 42
17071: PUSH
17072: LD_INT 1
17074: ARRAY
17075: PPUSH
17076: LD_STRING D4-A-7
17078: PPUSH
17079: CALL_OW 94
// for i = 1 to Zeta_Squad do
17083: LD_ADDR_VAR 0 1
17087: PUSH
17088: DOUBLE
17089: LD_INT 1
17091: DEC
17092: ST_TO_ADDR
17093: LD_EXP 42
17097: PUSH
17098: FOR_TO
17099: IFFALSE 17121
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17101: LD_EXP 42
17105: PUSH
17106: LD_VAR 0 1
17110: ARRAY
17111: PPUSH
17112: LD_INT 1
17114: PPUSH
17115: CALL_OW 235
17119: GO 17098
17121: POP
17122: POP
// end ;
17123: PPOPN 2
17125: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17126: LD_INT 11
17128: PPUSH
17129: LD_INT 22
17131: PUSH
17132: LD_OWVAR 2
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PPUSH
17141: CALL_OW 70
17145: PUSH
17146: LD_INT 0
17148: GREATER
17149: IFFALSE 17174
17151: GO 17153
17153: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17154: LD_EXP 38
17158: PPUSH
17159: LD_STRING D10-A-1
17161: PPUSH
17162: CALL_OW 88
// ru_spotted := true ;
17166: LD_ADDR_EXP 16
17170: PUSH
17171: LD_INT 1
17173: ST_TO_ADDR
// end ;
17174: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17175: LD_EXP 38
17179: PPUSH
17180: CALL_OW 301
17184: PUSH
17185: LD_EXP 39
17189: PPUSH
17190: CALL_OW 301
17194: OR
17195: IFFALSE 17207
17197: GO 17199
17199: DISABLE
// begin YouLost ( DieP ) ;
17200: LD_STRING DieP
17202: PPUSH
17203: CALL_OW 104
// end ;
17207: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17208: LD_INT 34
17210: PUSH
17211: LD_INT 8
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PPUSH
17218: CALL_OW 69
17222: IFFALSE 17235
17224: GO 17226
17226: DISABLE
// sib_bomb_constructed := true ;
17227: LD_ADDR_EXP 36
17231: PUSH
17232: LD_INT 1
17234: ST_TO_ADDR
17235: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17236: LD_EXP 29
17240: PUSH
17241: LD_INT 22
17243: PUSH
17244: LD_INT 3
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PPUSH
17251: CALL_OW 69
17255: PUSH
17256: LD_INT 0
17258: EQUAL
17259: AND
17260: IFFALSE 17463
17262: GO 17264
17264: DISABLE
17265: LD_INT 0
17267: PPUSH
// begin game_status := false ;
17268: LD_ADDR_EXP 29
17272: PUSH
17273: LD_INT 0
17275: ST_TO_ADDR
// if not depotConstructed then
17276: LD_EXP 2
17280: NOT
17281: IFFALSE 17290
// SetAchievement ( ACH_NODEPOT ) ;
17283: LD_STRING ACH_NODEPOT
17285: PPUSH
17286: CALL_OW 543
// if Difficulty = 3 then
17290: LD_OWVAR 67
17294: PUSH
17295: LD_INT 3
17297: EQUAL
17298: IFFALSE 17307
// SetAchievement ( ACH_HARD ) ;
17300: LD_STRING ACH_HARD
17302: PPUSH
17303: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17307: LD_OWVAR 1
17311: PUSH
17312: LD_INT 35
17314: DIVREAL
17315: PUSH
17316: LD_INT 60
17318: DIVREAL
17319: PUSH
17320: LD_INT 70
17322: PUSH
17323: LD_INT 60
17325: PUSH
17326: LD_INT 50
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: PUSH
17334: LD_OWVAR 67
17338: ARRAY
17339: LESS
17340: IFFALSE 17354
// AddMedal ( play , 1 ) else
17342: LD_STRING play
17344: PPUSH
17345: LD_INT 1
17347: PPUSH
17348: CALL_OW 101
17352: GO 17365
// AddMedal ( play , - 1 ) ;
17354: LD_STRING play
17356: PPUSH
17357: LD_INT 1
17359: NEG
17360: PPUSH
17361: CALL_OW 101
// if sib_bomb_constructed then
17365: LD_EXP 36
17369: IFFALSE 17383
// AddMedal ( sibbomb , 1 ) else
17371: LD_STRING sibbomb
17373: PPUSH
17374: LD_INT 1
17376: PPUSH
17377: CALL_OW 101
17381: GO 17394
// AddMedal ( sibbomb , - 1 ) ;
17383: LD_STRING sibbomb
17385: PPUSH
17386: LD_INT 1
17388: NEG
17389: PPUSH
17390: CALL_OW 101
// if mine_constructed and not mine_ck then
17394: LD_EXP 37
17398: PUSH
17399: LD_EXP 35
17403: NOT
17404: AND
17405: IFFALSE 17417
// AddMedal ( mine , 1 ) ;
17407: LD_STRING mine
17409: PPUSH
17410: LD_INT 1
17412: PPUSH
17413: CALL_OW 101
// if mine_ck then
17417: LD_EXP 35
17421: IFFALSE 17434
// AddMedal ( mine , - 1 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 1
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// if not mine_constructed then
17434: LD_EXP 37
17438: NOT
17439: IFFALSE 17452
// AddMedal ( mine , - 2 ) ;
17441: LD_STRING mine
17443: PPUSH
17444: LD_INT 2
17446: NEG
17447: PPUSH
17448: CALL_OW 101
// GiveMedals ( Main ) ;
17452: LD_STRING Main
17454: PPUSH
17455: CALL_OW 102
// YouWin ;
17459: CALL_OW 103
// end ; end_of_file
17463: PPOPN 1
17465: END
// every 0 0$03 trigger game_status do var time ;
17466: LD_EXP 29
17470: IFFALSE 17635
17472: GO 17474
17474: DISABLE
17475: LD_INT 0
17477: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17478: LD_ADDR_VAR 0 1
17482: PUSH
17483: LD_INT 1050
17485: PUSH
17486: LD_INT 1575
17488: PUSH
17489: LD_INT 2100
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: LD_OWVAR 67
17501: ARRAY
17502: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17503: LD_VAR 0 1
17507: PUSH
17508: LD_INT 0
17510: PPUSH
17511: LD_INT 420
17513: PPUSH
17514: CALL_OW 12
17518: PLUS
17519: PPUSH
17520: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17524: LD_INT 1
17526: PPUSH
17527: LD_INT 5
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: LD_INT 1
17537: PPUSH
17538: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17542: LD_INT 105
17544: PPUSH
17545: LD_INT 1050
17547: PPUSH
17548: CALL_OW 12
17552: PPUSH
17553: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17557: LD_INT 1
17559: PPUSH
17560: LD_INT 5
17562: PPUSH
17563: CALL_OW 12
17567: PPUSH
17568: LD_INT 148
17570: PPUSH
17571: LD_INT 107
17573: PPUSH
17574: LD_INT 20
17576: PPUSH
17577: LD_INT 1
17579: PPUSH
17580: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17584: LD_OWVAR 1
17588: PUSH
17589: LD_INT 44100
17591: PUSH
17592: LD_INT 37800
17594: PUSH
17595: LD_INT 33600
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: LIST
17602: PUSH
17603: LD_OWVAR 67
17607: ARRAY
17608: MOD
17609: IFFALSE 17625
// time := time + 0 0$20 ;
17611: LD_ADDR_VAR 0 1
17615: PUSH
17616: LD_VAR 0 1
17620: PUSH
17621: LD_INT 700
17623: PLUS
17624: ST_TO_ADDR
// end until game_status = false ;
17625: LD_EXP 29
17629: PUSH
17630: LD_INT 0
17632: EQUAL
17633: IFFALSE 17503
// end ;
17635: PPOPN 1
17637: END
// every 0 0$03 trigger game_status do var time ;
17638: LD_EXP 29
17642: IFFALSE 17796
17644: GO 17646
17646: DISABLE
17647: LD_INT 0
17649: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17650: LD_ADDR_VAR 0 1
17654: PUSH
17655: LD_INT 700
17657: PUSH
17658: LD_INT 875
17660: PUSH
17661: LD_INT 1400
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: PUSH
17669: LD_OWVAR 67
17673: ARRAY
17674: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17675: LD_VAR 0 1
17679: PUSH
17680: LD_INT 0
17682: PPUSH
17683: LD_INT 385
17685: PPUSH
17686: CALL_OW 12
17690: PLUS
17691: PPUSH
17692: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17696: LD_INT 1
17698: PPUSH
17699: LD_INT 5
17701: PPUSH
17702: CALL_OW 12
17706: PPUSH
17707: LD_INT 102
17709: PPUSH
17710: LD_INT 6
17712: PPUSH
17713: LD_INT 25
17715: PPUSH
17716: LD_INT 1
17718: PPUSH
17719: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17723: LD_OWVAR 1
17727: PUSH
17728: LD_INT 52500
17730: PUSH
17731: LD_INT 46200
17733: PUSH
17734: LD_INT 42000
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: LIST
17741: PUSH
17742: LD_OWVAR 67
17746: ARRAY
17747: MOD
17748: IFFALSE 17764
// time := time + 0 0$25 ;
17750: LD_ADDR_VAR 0 1
17754: PUSH
17755: LD_VAR 0 1
17759: PUSH
17760: LD_INT 875
17762: PLUS
17763: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17764: LD_OWVAR 1
17768: PUSH
17769: LD_INT 231000
17771: MOD
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17786
// time := 0 0$30 ;
17778: LD_ADDR_VAR 0 1
17782: PUSH
17783: LD_INT 1050
17785: ST_TO_ADDR
// end until game_status = false ;
17786: LD_EXP 29
17790: PUSH
17791: LD_INT 0
17793: EQUAL
17794: IFFALSE 17675
// end ;
17796: PPOPN 1
17798: END
// every 0 0$03 trigger game_status do var time ;
17799: LD_EXP 29
17803: IFFALSE 17939
17805: GO 17807
17807: DISABLE
17808: LD_INT 0
17810: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17811: LD_ADDR_VAR 0 1
17815: PUSH
17816: LD_INT 1050
17818: PUSH
17819: LD_INT 1575
17821: PUSH
17822: LD_INT 1750
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: PUSH
17830: LD_OWVAR 67
17834: ARRAY
17835: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17836: LD_VAR 0 1
17840: PUSH
17841: LD_INT 0
17843: PPUSH
17844: LD_INT 385
17846: PPUSH
17847: CALL_OW 12
17851: PLUS
17852: PPUSH
17853: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17857: LD_INT 1
17859: PPUSH
17860: LD_INT 5
17862: PPUSH
17863: CALL_OW 12
17867: PPUSH
17868: LD_INT 51
17870: PPUSH
17871: LD_INT 74
17873: PPUSH
17874: LD_INT 25
17876: PPUSH
17877: LD_INT 1
17879: PPUSH
17880: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17884: LD_OWVAR 1
17888: PUSH
17889: LD_INT 84000
17891: PUSH
17892: LD_INT 105000
17894: PUSH
17895: LD_INT 136500
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: PUSH
17903: LD_OWVAR 67
17907: ARRAY
17908: MOD
17909: PUSH
17910: LD_INT 0
17912: EQUAL
17913: IFFALSE 17929
// time := time + 0 0$15 ;
17915: LD_ADDR_VAR 0 1
17919: PUSH
17920: LD_VAR 0 1
17924: PUSH
17925: LD_INT 525
17927: PLUS
17928: ST_TO_ADDR
// end until game_status = false ;
17929: LD_EXP 29
17933: PUSH
17934: LD_INT 0
17936: EQUAL
17937: IFFALSE 17836
// end ; end_of_file
17939: PPOPN 1
17941: END
// every 0 0$01 trigger not debug do
17942: LD_EXP 1
17946: NOT
17947: IFFALSE 17970
17949: GO 17951
17951: DISABLE
// begin enable ;
17952: ENABLE
// Display_Strings := [ #tick , tick ] ;
17953: LD_ADDR_OWVAR 47
17957: PUSH
17958: LD_STRING #tick
17960: PUSH
17961: LD_OWVAR 1
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: ST_TO_ADDR
// end ; end_of_file
17970: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17971: LD_VAR 0 1
17975: PPUSH
17976: CALL_OW 255
17980: PUSH
17981: LD_INT 3
17983: EQUAL
17984: PUSH
17985: LD_VAR 0 1
17989: PUSH
17990: LD_INT 2
17992: PUSH
17993: LD_INT 34
17995: PUSH
17996: LD_INT 46
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 34
18005: PUSH
18006: LD_INT 47
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 34
18015: PUSH
18016: LD_INT 45
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: PUSH
18029: EMPTY
18030: LIST
18031: PPUSH
18032: CALL_OW 69
18036: IN
18037: AND
18038: IFFALSE 18056
// ru_reserve := ru_reserve ^ un ;
18040: LD_ADDR_EXP 9
18044: PUSH
18045: LD_EXP 9
18049: PUSH
18050: LD_VAR 0 1
18054: ADD
18055: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18056: LD_VAR 0 1
18060: PUSH
18061: LD_INT 22
18063: PUSH
18064: LD_INT 3
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 34
18073: PUSH
18074: LD_INT 48
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PPUSH
18085: CALL_OW 69
18089: IN
18090: IFFALSE 18143
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18092: LD_INT 12
18094: PPUSH
18095: LD_INT 22
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PPUSH
18105: CALL_OW 70
18109: IFFALSE 18128
// ComAttackPlace ( un , 98 , 10 ) else
18111: LD_VAR 0 1
18115: PPUSH
18116: LD_INT 98
18118: PPUSH
18119: LD_INT 10
18121: PPUSH
18122: CALL_OW 116
18126: GO 18143
// ComAttackPlace ( un , 134 , 99 ) ;
18128: LD_VAR 0 1
18132: PPUSH
18133: LD_INT 134
18135: PPUSH
18136: LD_INT 99
18138: PPUSH
18139: CALL_OW 116
// end ;
18143: PPOPN 2
18145: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18146: LD_VAR 0 1
18150: PPUSH
18151: CALL 31490 0 1
// if GetChassis ( un ) = 25 then
18155: LD_VAR 0 1
18159: PPUSH
18160: CALL_OW 265
18164: PUSH
18165: LD_INT 25
18167: EQUAL
18168: IFFALSE 18177
// SetAchievement ( ACH_BEH ) ;
18170: LD_STRING ACH_BEH
18172: PPUSH
18173: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18177: LD_VAR 0 1
18181: PUSH
18182: LD_INT 22
18184: PUSH
18185: LD_INT 3
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 21
18194: PUSH
18195: LD_INT 3
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PPUSH
18206: CALL_OW 69
18210: IN
18211: PUSH
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 266
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: LD_INT 29
18227: PUSH
18228: LD_INT 30
18230: PUSH
18231: LD_INT 26
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: IN
18240: NOT
18241: AND
18242: IFFALSE 18328
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18244: LD_ADDR_EXP 13
18248: PUSH
18249: LD_EXP 13
18253: PUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 266
18263: ADD
18264: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18265: LD_ADDR_EXP 13
18269: PUSH
18270: LD_EXP 13
18274: PUSH
18275: LD_VAR 0 1
18279: PPUSH
18280: CALL_OW 250
18284: ADD
18285: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18286: LD_ADDR_EXP 13
18290: PUSH
18291: LD_EXP 13
18295: PUSH
18296: LD_VAR 0 1
18300: PPUSH
18301: CALL_OW 251
18305: ADD
18306: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18307: LD_ADDR_EXP 13
18311: PUSH
18312: LD_EXP 13
18316: PUSH
18317: LD_VAR 0 1
18321: PPUSH
18322: CALL_OW 254
18326: ADD
18327: ST_TO_ADDR
// end ; if un in ru_attack_list then
18328: LD_VAR 0 1
18332: PUSH
18333: LD_EXP 10
18337: IN
18338: IFFALSE 18356
// ru_attack_list := ru_attack_list diff un ;
18340: LD_ADDR_EXP 10
18344: PUSH
18345: LD_EXP 10
18349: PUSH
18350: LD_VAR 0 1
18354: DIFF
18355: ST_TO_ADDR
// if un in ru_protector then
18356: LD_VAR 0 1
18360: PUSH
18361: LD_EXP 17
18365: IN
18366: IFFALSE 18384
// ru_protector := ru_protector diff un ;
18368: LD_ADDR_EXP 17
18372: PUSH
18373: LD_EXP 17
18377: PUSH
18378: LD_VAR 0 1
18382: DIFF
18383: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18384: LD_VAR 0 1
18388: PPUSH
18389: CALL_OW 266
18393: PUSH
18394: LD_INT 30
18396: EQUAL
18397: PUSH
18398: LD_VAR 0 1
18402: PPUSH
18403: CALL_OW 255
18407: PUSH
18408: LD_INT 1
18410: EQUAL
18411: AND
18412: IFFALSE 18422
// mine_ck := true ;
18414: LD_ADDR_EXP 35
18418: PUSH
18419: LD_INT 1
18421: ST_TO_ADDR
// end ;
18422: PPOPN 1
18424: END
// on BuildingComplete ( un ) do var i ;
18425: LD_INT 0
18427: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18428: LD_VAR 0 1
18432: PPUSH
18433: CALL_OW 255
18437: PUSH
18438: LD_INT 1
18440: EQUAL
18441: PUSH
18442: LD_VAR 0 1
18446: PPUSH
18447: CALL_OW 266
18451: PUSH
18452: LD_INT 0
18454: EQUAL
18455: AND
18456: IFFALSE 18466
// depotConstructed := true ;
18458: LD_ADDR_EXP 2
18462: PUSH
18463: LD_INT 1
18465: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18466: LD_VAR 0 1
18470: PPUSH
18471: CALL_OW 255
18475: PUSH
18476: LD_INT 1
18478: EQUAL
18479: PUSH
18480: LD_VAR 0 1
18484: PPUSH
18485: CALL_OW 266
18489: PUSH
18490: LD_INT 30
18492: EQUAL
18493: AND
18494: IFFALSE 18504
// mine_constructed := true ;
18496: LD_ADDR_EXP 37
18500: PUSH
18501: LD_INT 1
18503: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 255
18513: PUSH
18514: LD_INT 3
18516: EQUAL
18517: PUSH
18518: LD_VAR 0 1
18522: PPUSH
18523: CALL_OW 266
18527: PUSH
18528: LD_INT 0
18530: EQUAL
18531: AND
18532: IFFALSE 18589
// begin for i = 1 to 2 do
18534: LD_ADDR_VAR 0 2
18538: PUSH
18539: DOUBLE
18540: LD_INT 1
18542: DEC
18543: ST_TO_ADDR
18544: LD_INT 2
18546: PUSH
18547: FOR_TO
18548: IFFALSE 18587
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18550: LD_EXP 20
18554: PUSH
18555: LD_VAR 0 2
18559: ARRAY
18560: PPUSH
18561: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18565: LD_EXP 20
18569: PUSH
18570: LD_VAR 0 2
18574: ARRAY
18575: PPUSH
18576: LD_VAR 0 1
18580: PPUSH
18581: CALL_OW 180
// end ;
18585: GO 18547
18587: POP
18588: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18589: LD_VAR 0 1
18593: PPUSH
18594: CALL_OW 255
18598: PUSH
18599: LD_INT 3
18601: EQUAL
18602: PUSH
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 266
18612: PUSH
18613: LD_EXP 13
18617: IN
18618: AND
18619: IFFALSE 18659
// for i = 1 to 4 do
18621: LD_ADDR_VAR 0 2
18625: PUSH
18626: DOUBLE
18627: LD_INT 1
18629: DEC
18630: ST_TO_ADDR
18631: LD_INT 4
18633: PUSH
18634: FOR_TO
18635: IFFALSE 18657
// ru_blist := Delete ( ru_blist , 1 ) ;
18637: LD_ADDR_EXP 13
18641: PUSH
18642: LD_EXP 13
18646: PPUSH
18647: LD_INT 1
18649: PPUSH
18650: CALL_OW 3
18654: ST_TO_ADDR
18655: GO 18634
18657: POP
18658: POP
// end ;
18659: PPOPN 2
18661: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18662: LD_VAR 0 1
18666: PPUSH
18667: LD_VAR 0 2
18671: PPUSH
18672: LD_VAR 0 3
18676: PPUSH
18677: CALL 31588 0 3
// end ;
18681: PPOPN 3
18683: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18684: LD_VAR 0 1
18688: PPUSH
18689: CALL 31596 0 1
// end ; end_of_file
18693: PPOPN 1
18695: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
18696: LD_INT 0
18698: PPUSH
// ar_crane := 88 ;
18699: LD_ADDR_EXP 49
18703: PUSH
18704: LD_INT 88
18706: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18707: LD_ADDR_EXP 44
18711: PUSH
18712: LD_INT 89
18714: ST_TO_ADDR
// us_hack := 99 ;
18715: LD_ADDR_EXP 45
18719: PUSH
18720: LD_INT 99
18722: ST_TO_ADDR
// us_artillery := 97 ;
18723: LD_ADDR_EXP 46
18727: PUSH
18728: LD_INT 97
18730: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18731: LD_ADDR_EXP 47
18735: PUSH
18736: LD_INT 91
18738: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
18739: LD_ADDR_EXP 48
18743: PUSH
18744: LD_INT 92
18746: ST_TO_ADDR
// ru_radar := 98 ;
18747: LD_ADDR_EXP 43
18751: PUSH
18752: LD_INT 98
18754: ST_TO_ADDR
// tech_Artillery := 80 ;
18755: LD_ADDR_EXP 50
18759: PUSH
18760: LD_INT 80
18762: ST_TO_ADDR
// tech_RadMat := 81 ;
18763: LD_ADDR_EXP 51
18767: PUSH
18768: LD_INT 81
18770: ST_TO_ADDR
// tech_BasicTools := 82 ;
18771: LD_ADDR_EXP 52
18775: PUSH
18776: LD_INT 82
18778: ST_TO_ADDR
// tech_Cargo := 83 ;
18779: LD_ADDR_EXP 53
18783: PUSH
18784: LD_INT 83
18786: ST_TO_ADDR
// tech_Track := 84 ;
18787: LD_ADDR_EXP 54
18791: PUSH
18792: LD_INT 84
18794: ST_TO_ADDR
// tech_Crane := 85 ;
18795: LD_ADDR_EXP 55
18799: PUSH
18800: LD_INT 85
18802: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18803: LD_ADDR_EXP 56
18807: PUSH
18808: LD_INT 86
18810: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18811: LD_ADDR_EXP 57
18815: PUSH
18816: LD_INT 87
18818: ST_TO_ADDR
// end ;
18819: LD_VAR 0 1
18823: RET
// every 1 do
18824: GO 18826
18826: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18827: CALL 18696 0 0
18831: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18832: LD_VAR 0 2
18836: PUSH
18837: LD_INT 100
18839: EQUAL
18840: IFFALSE 19789
// begin if not StreamModeActive then
18842: LD_EXP 58
18846: NOT
18847: IFFALSE 18857
// StreamModeActive := true ;
18849: LD_ADDR_EXP 58
18853: PUSH
18854: LD_INT 1
18856: ST_TO_ADDR
// if p3 = 0 then
18857: LD_VAR 0 3
18861: PUSH
18862: LD_INT 0
18864: EQUAL
18865: IFFALSE 18871
// InitStreamMode ;
18867: CALL 20022 0 0
// if p3 = 1 then
18871: LD_VAR 0 3
18875: PUSH
18876: LD_INT 1
18878: EQUAL
18879: IFFALSE 18889
// sRocket := true ;
18881: LD_ADDR_EXP 63
18885: PUSH
18886: LD_INT 1
18888: ST_TO_ADDR
// if p3 = 2 then
18889: LD_VAR 0 3
18893: PUSH
18894: LD_INT 2
18896: EQUAL
18897: IFFALSE 18907
// sSpeed := true ;
18899: LD_ADDR_EXP 62
18903: PUSH
18904: LD_INT 1
18906: ST_TO_ADDR
// if p3 = 3 then
18907: LD_VAR 0 3
18911: PUSH
18912: LD_INT 3
18914: EQUAL
18915: IFFALSE 18925
// sEngine := true ;
18917: LD_ADDR_EXP 64
18921: PUSH
18922: LD_INT 1
18924: ST_TO_ADDR
// if p3 = 4 then
18925: LD_VAR 0 3
18929: PUSH
18930: LD_INT 4
18932: EQUAL
18933: IFFALSE 18943
// sSpec := true ;
18935: LD_ADDR_EXP 61
18939: PUSH
18940: LD_INT 1
18942: ST_TO_ADDR
// if p3 = 5 then
18943: LD_VAR 0 3
18947: PUSH
18948: LD_INT 5
18950: EQUAL
18951: IFFALSE 18961
// sLevel := true ;
18953: LD_ADDR_EXP 65
18957: PUSH
18958: LD_INT 1
18960: ST_TO_ADDR
// if p3 = 6 then
18961: LD_VAR 0 3
18965: PUSH
18966: LD_INT 6
18968: EQUAL
18969: IFFALSE 18979
// sArmoury := true ;
18971: LD_ADDR_EXP 66
18975: PUSH
18976: LD_INT 1
18978: ST_TO_ADDR
// if p3 = 7 then
18979: LD_VAR 0 3
18983: PUSH
18984: LD_INT 7
18986: EQUAL
18987: IFFALSE 18997
// sRadar := true ;
18989: LD_ADDR_EXP 67
18993: PUSH
18994: LD_INT 1
18996: ST_TO_ADDR
// if p3 = 8 then
18997: LD_VAR 0 3
19001: PUSH
19002: LD_INT 8
19004: EQUAL
19005: IFFALSE 19015
// sBunker := true ;
19007: LD_ADDR_EXP 68
19011: PUSH
19012: LD_INT 1
19014: ST_TO_ADDR
// if p3 = 9 then
19015: LD_VAR 0 3
19019: PUSH
19020: LD_INT 9
19022: EQUAL
19023: IFFALSE 19033
// sHack := true ;
19025: LD_ADDR_EXP 69
19029: PUSH
19030: LD_INT 1
19032: ST_TO_ADDR
// if p3 = 10 then
19033: LD_VAR 0 3
19037: PUSH
19038: LD_INT 10
19040: EQUAL
19041: IFFALSE 19051
// sFire := true ;
19043: LD_ADDR_EXP 70
19047: PUSH
19048: LD_INT 1
19050: ST_TO_ADDR
// if p3 = 11 then
19051: LD_VAR 0 3
19055: PUSH
19056: LD_INT 11
19058: EQUAL
19059: IFFALSE 19069
// sRefresh := true ;
19061: LD_ADDR_EXP 71
19065: PUSH
19066: LD_INT 1
19068: ST_TO_ADDR
// if p3 = 12 then
19069: LD_VAR 0 3
19073: PUSH
19074: LD_INT 12
19076: EQUAL
19077: IFFALSE 19087
// sExp := true ;
19079: LD_ADDR_EXP 72
19083: PUSH
19084: LD_INT 1
19086: ST_TO_ADDR
// if p3 = 13 then
19087: LD_VAR 0 3
19091: PUSH
19092: LD_INT 13
19094: EQUAL
19095: IFFALSE 19105
// sDepot := true ;
19097: LD_ADDR_EXP 73
19101: PUSH
19102: LD_INT 1
19104: ST_TO_ADDR
// if p3 = 14 then
19105: LD_VAR 0 3
19109: PUSH
19110: LD_INT 14
19112: EQUAL
19113: IFFALSE 19123
// sFlag := true ;
19115: LD_ADDR_EXP 74
19119: PUSH
19120: LD_INT 1
19122: ST_TO_ADDR
// if p3 = 15 then
19123: LD_VAR 0 3
19127: PUSH
19128: LD_INT 15
19130: EQUAL
19131: IFFALSE 19141
// sKamikadze := true ;
19133: LD_ADDR_EXP 82
19137: PUSH
19138: LD_INT 1
19140: ST_TO_ADDR
// if p3 = 16 then
19141: LD_VAR 0 3
19145: PUSH
19146: LD_INT 16
19148: EQUAL
19149: IFFALSE 19159
// sTroll := true ;
19151: LD_ADDR_EXP 83
19155: PUSH
19156: LD_INT 1
19158: ST_TO_ADDR
// if p3 = 17 then
19159: LD_VAR 0 3
19163: PUSH
19164: LD_INT 17
19166: EQUAL
19167: IFFALSE 19177
// sSlow := true ;
19169: LD_ADDR_EXP 84
19173: PUSH
19174: LD_INT 1
19176: ST_TO_ADDR
// if p3 = 18 then
19177: LD_VAR 0 3
19181: PUSH
19182: LD_INT 18
19184: EQUAL
19185: IFFALSE 19195
// sLack := true ;
19187: LD_ADDR_EXP 85
19191: PUSH
19192: LD_INT 1
19194: ST_TO_ADDR
// if p3 = 19 then
19195: LD_VAR 0 3
19199: PUSH
19200: LD_INT 19
19202: EQUAL
19203: IFFALSE 19213
// sTank := true ;
19205: LD_ADDR_EXP 87
19209: PUSH
19210: LD_INT 1
19212: ST_TO_ADDR
// if p3 = 20 then
19213: LD_VAR 0 3
19217: PUSH
19218: LD_INT 20
19220: EQUAL
19221: IFFALSE 19231
// sRemote := true ;
19223: LD_ADDR_EXP 88
19227: PUSH
19228: LD_INT 1
19230: ST_TO_ADDR
// if p3 = 21 then
19231: LD_VAR 0 3
19235: PUSH
19236: LD_INT 21
19238: EQUAL
19239: IFFALSE 19249
// sPowell := true ;
19241: LD_ADDR_EXP 89
19245: PUSH
19246: LD_INT 1
19248: ST_TO_ADDR
// if p3 = 22 then
19249: LD_VAR 0 3
19253: PUSH
19254: LD_INT 22
19256: EQUAL
19257: IFFALSE 19267
// sTeleport := true ;
19259: LD_ADDR_EXP 92
19263: PUSH
19264: LD_INT 1
19266: ST_TO_ADDR
// if p3 = 23 then
19267: LD_VAR 0 3
19271: PUSH
19272: LD_INT 23
19274: EQUAL
19275: IFFALSE 19285
// sOilTower := true ;
19277: LD_ADDR_EXP 94
19281: PUSH
19282: LD_INT 1
19284: ST_TO_ADDR
// if p3 = 24 then
19285: LD_VAR 0 3
19289: PUSH
19290: LD_INT 24
19292: EQUAL
19293: IFFALSE 19303
// sShovel := true ;
19295: LD_ADDR_EXP 95
19299: PUSH
19300: LD_INT 1
19302: ST_TO_ADDR
// if p3 = 25 then
19303: LD_VAR 0 3
19307: PUSH
19308: LD_INT 25
19310: EQUAL
19311: IFFALSE 19321
// sSheik := true ;
19313: LD_ADDR_EXP 96
19317: PUSH
19318: LD_INT 1
19320: ST_TO_ADDR
// if p3 = 26 then
19321: LD_VAR 0 3
19325: PUSH
19326: LD_INT 26
19328: EQUAL
19329: IFFALSE 19339
// sEarthquake := true ;
19331: LD_ADDR_EXP 98
19335: PUSH
19336: LD_INT 1
19338: ST_TO_ADDR
// if p3 = 27 then
19339: LD_VAR 0 3
19343: PUSH
19344: LD_INT 27
19346: EQUAL
19347: IFFALSE 19357
// sAI := true ;
19349: LD_ADDR_EXP 99
19353: PUSH
19354: LD_INT 1
19356: ST_TO_ADDR
// if p3 = 28 then
19357: LD_VAR 0 3
19361: PUSH
19362: LD_INT 28
19364: EQUAL
19365: IFFALSE 19375
// sCargo := true ;
19367: LD_ADDR_EXP 102
19371: PUSH
19372: LD_INT 1
19374: ST_TO_ADDR
// if p3 = 29 then
19375: LD_VAR 0 3
19379: PUSH
19380: LD_INT 29
19382: EQUAL
19383: IFFALSE 19393
// sDLaser := true ;
19385: LD_ADDR_EXP 103
19389: PUSH
19390: LD_INT 1
19392: ST_TO_ADDR
// if p3 = 30 then
19393: LD_VAR 0 3
19397: PUSH
19398: LD_INT 30
19400: EQUAL
19401: IFFALSE 19411
// sExchange := true ;
19403: LD_ADDR_EXP 104
19407: PUSH
19408: LD_INT 1
19410: ST_TO_ADDR
// if p3 = 31 then
19411: LD_VAR 0 3
19415: PUSH
19416: LD_INT 31
19418: EQUAL
19419: IFFALSE 19429
// sFac := true ;
19421: LD_ADDR_EXP 105
19425: PUSH
19426: LD_INT 1
19428: ST_TO_ADDR
// if p3 = 32 then
19429: LD_VAR 0 3
19433: PUSH
19434: LD_INT 32
19436: EQUAL
19437: IFFALSE 19447
// sPower := true ;
19439: LD_ADDR_EXP 106
19443: PUSH
19444: LD_INT 1
19446: ST_TO_ADDR
// if p3 = 33 then
19447: LD_VAR 0 3
19451: PUSH
19452: LD_INT 33
19454: EQUAL
19455: IFFALSE 19465
// sRandom := true ;
19457: LD_ADDR_EXP 107
19461: PUSH
19462: LD_INT 1
19464: ST_TO_ADDR
// if p3 = 34 then
19465: LD_VAR 0 3
19469: PUSH
19470: LD_INT 34
19472: EQUAL
19473: IFFALSE 19483
// sShield := true ;
19475: LD_ADDR_EXP 108
19479: PUSH
19480: LD_INT 1
19482: ST_TO_ADDR
// if p3 = 35 then
19483: LD_VAR 0 3
19487: PUSH
19488: LD_INT 35
19490: EQUAL
19491: IFFALSE 19501
// sTime := true ;
19493: LD_ADDR_EXP 109
19497: PUSH
19498: LD_INT 1
19500: ST_TO_ADDR
// if p3 = 36 then
19501: LD_VAR 0 3
19505: PUSH
19506: LD_INT 36
19508: EQUAL
19509: IFFALSE 19519
// sTools := true ;
19511: LD_ADDR_EXP 110
19515: PUSH
19516: LD_INT 1
19518: ST_TO_ADDR
// if p3 = 101 then
19519: LD_VAR 0 3
19523: PUSH
19524: LD_INT 101
19526: EQUAL
19527: IFFALSE 19537
// sSold := true ;
19529: LD_ADDR_EXP 75
19533: PUSH
19534: LD_INT 1
19536: ST_TO_ADDR
// if p3 = 102 then
19537: LD_VAR 0 3
19541: PUSH
19542: LD_INT 102
19544: EQUAL
19545: IFFALSE 19555
// sDiff := true ;
19547: LD_ADDR_EXP 76
19551: PUSH
19552: LD_INT 1
19554: ST_TO_ADDR
// if p3 = 103 then
19555: LD_VAR 0 3
19559: PUSH
19560: LD_INT 103
19562: EQUAL
19563: IFFALSE 19573
// sFog := true ;
19565: LD_ADDR_EXP 79
19569: PUSH
19570: LD_INT 1
19572: ST_TO_ADDR
// if p3 = 104 then
19573: LD_VAR 0 3
19577: PUSH
19578: LD_INT 104
19580: EQUAL
19581: IFFALSE 19591
// sReset := true ;
19583: LD_ADDR_EXP 80
19587: PUSH
19588: LD_INT 1
19590: ST_TO_ADDR
// if p3 = 105 then
19591: LD_VAR 0 3
19595: PUSH
19596: LD_INT 105
19598: EQUAL
19599: IFFALSE 19609
// sSun := true ;
19601: LD_ADDR_EXP 81
19605: PUSH
19606: LD_INT 1
19608: ST_TO_ADDR
// if p3 = 106 then
19609: LD_VAR 0 3
19613: PUSH
19614: LD_INT 106
19616: EQUAL
19617: IFFALSE 19627
// sTiger := true ;
19619: LD_ADDR_EXP 77
19623: PUSH
19624: LD_INT 1
19626: ST_TO_ADDR
// if p3 = 107 then
19627: LD_VAR 0 3
19631: PUSH
19632: LD_INT 107
19634: EQUAL
19635: IFFALSE 19645
// sBomb := true ;
19637: LD_ADDR_EXP 78
19641: PUSH
19642: LD_INT 1
19644: ST_TO_ADDR
// if p3 = 108 then
19645: LD_VAR 0 3
19649: PUSH
19650: LD_INT 108
19652: EQUAL
19653: IFFALSE 19663
// sWound := true ;
19655: LD_ADDR_EXP 86
19659: PUSH
19660: LD_INT 1
19662: ST_TO_ADDR
// if p3 = 109 then
19663: LD_VAR 0 3
19667: PUSH
19668: LD_INT 109
19670: EQUAL
19671: IFFALSE 19681
// sBetray := true ;
19673: LD_ADDR_EXP 90
19677: PUSH
19678: LD_INT 1
19680: ST_TO_ADDR
// if p3 = 110 then
19681: LD_VAR 0 3
19685: PUSH
19686: LD_INT 110
19688: EQUAL
19689: IFFALSE 19699
// sContamin := true ;
19691: LD_ADDR_EXP 91
19695: PUSH
19696: LD_INT 1
19698: ST_TO_ADDR
// if p3 = 111 then
19699: LD_VAR 0 3
19703: PUSH
19704: LD_INT 111
19706: EQUAL
19707: IFFALSE 19717
// sOil := true ;
19709: LD_ADDR_EXP 93
19713: PUSH
19714: LD_INT 1
19716: ST_TO_ADDR
// if p3 = 112 then
19717: LD_VAR 0 3
19721: PUSH
19722: LD_INT 112
19724: EQUAL
19725: IFFALSE 19735
// sStu := true ;
19727: LD_ADDR_EXP 97
19731: PUSH
19732: LD_INT 1
19734: ST_TO_ADDR
// if p3 = 113 then
19735: LD_VAR 0 3
19739: PUSH
19740: LD_INT 113
19742: EQUAL
19743: IFFALSE 19753
// sBazooka := true ;
19745: LD_ADDR_EXP 100
19749: PUSH
19750: LD_INT 1
19752: ST_TO_ADDR
// if p3 = 114 then
19753: LD_VAR 0 3
19757: PUSH
19758: LD_INT 114
19760: EQUAL
19761: IFFALSE 19771
// sMortar := true ;
19763: LD_ADDR_EXP 101
19767: PUSH
19768: LD_INT 1
19770: ST_TO_ADDR
// if p3 = 115 then
19771: LD_VAR 0 3
19775: PUSH
19776: LD_INT 115
19778: EQUAL
19779: IFFALSE 19789
// sRanger := true ;
19781: LD_ADDR_EXP 111
19785: PUSH
19786: LD_INT 1
19788: ST_TO_ADDR
// end ; if p2 = 101 then
19789: LD_VAR 0 2
19793: PUSH
19794: LD_INT 101
19796: EQUAL
19797: IFFALSE 20000
// begin case p3 of 1 :
19799: LD_VAR 0 3
19803: PUSH
19804: LD_INT 1
19806: DOUBLE
19807: EQUAL
19808: IFTRUE 19812
19810: GO 19819
19812: POP
// hHackUnlimitedResources ; 2 :
19813: CALL 30094 0 0
19817: GO 20000
19819: LD_INT 2
19821: DOUBLE
19822: EQUAL
19823: IFTRUE 19827
19825: GO 19834
19827: POP
// hHackSetLevel10 ; 3 :
19828: CALL 30227 0 0
19832: GO 20000
19834: LD_INT 3
19836: DOUBLE
19837: EQUAL
19838: IFTRUE 19842
19840: GO 19849
19842: POP
// hHackSetLevel10YourUnits ; 4 :
19843: CALL 30312 0 0
19847: GO 20000
19849: LD_INT 4
19851: DOUBLE
19852: EQUAL
19853: IFTRUE 19857
19855: GO 19879
19857: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
19858: LD_VAR 0 4
19862: PPUSH
19863: LD_VAR 0 5
19867: PPUSH
19868: LD_VAR 0 6
19872: PPUSH
19873: CALL 30402 0 3
19877: GO 20000
19879: LD_INT 5
19881: DOUBLE
19882: EQUAL
19883: IFTRUE 19887
19885: GO 19894
19887: POP
// hHackSpawnVehicle ; 6 :
19888: CALL 30463 0 0
19892: GO 20000
19894: LD_INT 6
19896: DOUBLE
19897: EQUAL
19898: IFTRUE 19902
19900: GO 19909
19902: POP
// hHackInvincible ; 7 :
19903: CALL 31009 0 0
19907: GO 20000
19909: LD_INT 7
19911: DOUBLE
19912: EQUAL
19913: IFTRUE 19917
19915: GO 19924
19917: POP
// hHackInvisible ; 8 :
19918: CALL 31120 0 0
19922: GO 20000
19924: LD_INT 8
19926: DOUBLE
19927: EQUAL
19928: IFTRUE 19932
19930: GO 19939
19932: POP
// hHackChangeYourSide ; 9 :
19933: CALL 31177 0 0
19937: GO 20000
19939: LD_INT 9
19941: DOUBLE
19942: EQUAL
19943: IFTRUE 19947
19945: GO 19954
19947: POP
// hHackChangeUnitSide ; 10 :
19948: CALL 31219 0 0
19952: GO 20000
19954: LD_INT 10
19956: DOUBLE
19957: EQUAL
19958: IFTRUE 19962
19960: GO 19969
19962: POP
// hHackFog ; 11 :
19963: CALL 31320 0 0
19967: GO 20000
19969: LD_INT 11
19971: DOUBLE
19972: EQUAL
19973: IFTRUE 19977
19975: GO 19984
19977: POP
// hHackApeman ; 12 :
19978: CALL 31335 0 0
19982: GO 20000
19984: LD_INT 12
19986: DOUBLE
19987: EQUAL
19988: IFTRUE 19992
19990: GO 19999
19992: POP
// hHackBoom ; end ;
19993: CALL 31420 0 0
19997: GO 20000
19999: POP
// end ; end ;
20000: PPOPN 6
20002: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20003: GO 20005
20005: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20006: LD_STRING initStreamRollete();
20008: PPUSH
20009: CALL_OW 559
// InitStreamMode ;
20013: CALL 20022 0 0
// DefineStreamItems ( ) ;
20017: CALL 20462 0 0
// end ;
20021: END
// function InitStreamMode ; begin
20022: LD_INT 0
20024: PPUSH
// streamModeActive := false ;
20025: LD_ADDR_EXP 58
20029: PUSH
20030: LD_INT 0
20032: ST_TO_ADDR
// normalCounter := 36 ;
20033: LD_ADDR_EXP 59
20037: PUSH
20038: LD_INT 36
20040: ST_TO_ADDR
// hardcoreCounter := 16 ;
20041: LD_ADDR_EXP 60
20045: PUSH
20046: LD_INT 16
20048: ST_TO_ADDR
// sRocket := false ;
20049: LD_ADDR_EXP 63
20053: PUSH
20054: LD_INT 0
20056: ST_TO_ADDR
// sSpeed := false ;
20057: LD_ADDR_EXP 62
20061: PUSH
20062: LD_INT 0
20064: ST_TO_ADDR
// sEngine := false ;
20065: LD_ADDR_EXP 64
20069: PUSH
20070: LD_INT 0
20072: ST_TO_ADDR
// sSpec := false ;
20073: LD_ADDR_EXP 61
20077: PUSH
20078: LD_INT 0
20080: ST_TO_ADDR
// sLevel := false ;
20081: LD_ADDR_EXP 65
20085: PUSH
20086: LD_INT 0
20088: ST_TO_ADDR
// sArmoury := false ;
20089: LD_ADDR_EXP 66
20093: PUSH
20094: LD_INT 0
20096: ST_TO_ADDR
// sRadar := false ;
20097: LD_ADDR_EXP 67
20101: PUSH
20102: LD_INT 0
20104: ST_TO_ADDR
// sBunker := false ;
20105: LD_ADDR_EXP 68
20109: PUSH
20110: LD_INT 0
20112: ST_TO_ADDR
// sHack := false ;
20113: LD_ADDR_EXP 69
20117: PUSH
20118: LD_INT 0
20120: ST_TO_ADDR
// sFire := false ;
20121: LD_ADDR_EXP 70
20125: PUSH
20126: LD_INT 0
20128: ST_TO_ADDR
// sRefresh := false ;
20129: LD_ADDR_EXP 71
20133: PUSH
20134: LD_INT 0
20136: ST_TO_ADDR
// sExp := false ;
20137: LD_ADDR_EXP 72
20141: PUSH
20142: LD_INT 0
20144: ST_TO_ADDR
// sDepot := false ;
20145: LD_ADDR_EXP 73
20149: PUSH
20150: LD_INT 0
20152: ST_TO_ADDR
// sFlag := false ;
20153: LD_ADDR_EXP 74
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// sKamikadze := false ;
20161: LD_ADDR_EXP 82
20165: PUSH
20166: LD_INT 0
20168: ST_TO_ADDR
// sTroll := false ;
20169: LD_ADDR_EXP 83
20173: PUSH
20174: LD_INT 0
20176: ST_TO_ADDR
// sSlow := false ;
20177: LD_ADDR_EXP 84
20181: PUSH
20182: LD_INT 0
20184: ST_TO_ADDR
// sLack := false ;
20185: LD_ADDR_EXP 85
20189: PUSH
20190: LD_INT 0
20192: ST_TO_ADDR
// sTank := false ;
20193: LD_ADDR_EXP 87
20197: PUSH
20198: LD_INT 0
20200: ST_TO_ADDR
// sRemote := false ;
20201: LD_ADDR_EXP 88
20205: PUSH
20206: LD_INT 0
20208: ST_TO_ADDR
// sPowell := false ;
20209: LD_ADDR_EXP 89
20213: PUSH
20214: LD_INT 0
20216: ST_TO_ADDR
// sTeleport := false ;
20217: LD_ADDR_EXP 92
20221: PUSH
20222: LD_INT 0
20224: ST_TO_ADDR
// sOilTower := false ;
20225: LD_ADDR_EXP 94
20229: PUSH
20230: LD_INT 0
20232: ST_TO_ADDR
// sShovel := false ;
20233: LD_ADDR_EXP 95
20237: PUSH
20238: LD_INT 0
20240: ST_TO_ADDR
// sSheik := false ;
20241: LD_ADDR_EXP 96
20245: PUSH
20246: LD_INT 0
20248: ST_TO_ADDR
// sEarthquake := false ;
20249: LD_ADDR_EXP 98
20253: PUSH
20254: LD_INT 0
20256: ST_TO_ADDR
// sAI := false ;
20257: LD_ADDR_EXP 99
20261: PUSH
20262: LD_INT 0
20264: ST_TO_ADDR
// sCargo := false ;
20265: LD_ADDR_EXP 102
20269: PUSH
20270: LD_INT 0
20272: ST_TO_ADDR
// sDLaser := false ;
20273: LD_ADDR_EXP 103
20277: PUSH
20278: LD_INT 0
20280: ST_TO_ADDR
// sExchange := false ;
20281: LD_ADDR_EXP 104
20285: PUSH
20286: LD_INT 0
20288: ST_TO_ADDR
// sFac := false ;
20289: LD_ADDR_EXP 105
20293: PUSH
20294: LD_INT 0
20296: ST_TO_ADDR
// sPower := false ;
20297: LD_ADDR_EXP 106
20301: PUSH
20302: LD_INT 0
20304: ST_TO_ADDR
// sRandom := false ;
20305: LD_ADDR_EXP 107
20309: PUSH
20310: LD_INT 0
20312: ST_TO_ADDR
// sShield := false ;
20313: LD_ADDR_EXP 108
20317: PUSH
20318: LD_INT 0
20320: ST_TO_ADDR
// sTime := false ;
20321: LD_ADDR_EXP 109
20325: PUSH
20326: LD_INT 0
20328: ST_TO_ADDR
// sTools := false ;
20329: LD_ADDR_EXP 110
20333: PUSH
20334: LD_INT 0
20336: ST_TO_ADDR
// sSold := false ;
20337: LD_ADDR_EXP 75
20341: PUSH
20342: LD_INT 0
20344: ST_TO_ADDR
// sDiff := false ;
20345: LD_ADDR_EXP 76
20349: PUSH
20350: LD_INT 0
20352: ST_TO_ADDR
// sFog := false ;
20353: LD_ADDR_EXP 79
20357: PUSH
20358: LD_INT 0
20360: ST_TO_ADDR
// sReset := false ;
20361: LD_ADDR_EXP 80
20365: PUSH
20366: LD_INT 0
20368: ST_TO_ADDR
// sSun := false ;
20369: LD_ADDR_EXP 81
20373: PUSH
20374: LD_INT 0
20376: ST_TO_ADDR
// sTiger := false ;
20377: LD_ADDR_EXP 77
20381: PUSH
20382: LD_INT 0
20384: ST_TO_ADDR
// sBomb := false ;
20385: LD_ADDR_EXP 78
20389: PUSH
20390: LD_INT 0
20392: ST_TO_ADDR
// sWound := false ;
20393: LD_ADDR_EXP 86
20397: PUSH
20398: LD_INT 0
20400: ST_TO_ADDR
// sBetray := false ;
20401: LD_ADDR_EXP 90
20405: PUSH
20406: LD_INT 0
20408: ST_TO_ADDR
// sContamin := false ;
20409: LD_ADDR_EXP 91
20413: PUSH
20414: LD_INT 0
20416: ST_TO_ADDR
// sOil := false ;
20417: LD_ADDR_EXP 93
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// sStu := false ;
20425: LD_ADDR_EXP 97
20429: PUSH
20430: LD_INT 0
20432: ST_TO_ADDR
// sBazooka := false ;
20433: LD_ADDR_EXP 100
20437: PUSH
20438: LD_INT 0
20440: ST_TO_ADDR
// sMortar := false ;
20441: LD_ADDR_EXP 101
20445: PUSH
20446: LD_INT 0
20448: ST_TO_ADDR
// sRanger := false ;
20449: LD_ADDR_EXP 111
20453: PUSH
20454: LD_INT 0
20456: ST_TO_ADDR
// end ;
20457: LD_VAR 0 1
20461: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20462: LD_INT 0
20464: PPUSH
20465: PPUSH
20466: PPUSH
20467: PPUSH
20468: PPUSH
// result := [ ] ;
20469: LD_ADDR_VAR 0 1
20473: PUSH
20474: EMPTY
20475: ST_TO_ADDR
// if campaign_id = 1 then
20476: LD_OWVAR 69
20480: PUSH
20481: LD_INT 1
20483: EQUAL
20484: IFFALSE 23422
// begin case mission_number of 1 :
20486: LD_OWVAR 70
20490: PUSH
20491: LD_INT 1
20493: DOUBLE
20494: EQUAL
20495: IFTRUE 20499
20497: GO 20563
20499: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20500: LD_ADDR_VAR 0 1
20504: PUSH
20505: LD_INT 2
20507: PUSH
20508: LD_INT 4
20510: PUSH
20511: LD_INT 11
20513: PUSH
20514: LD_INT 12
20516: PUSH
20517: LD_INT 15
20519: PUSH
20520: LD_INT 16
20522: PUSH
20523: LD_INT 22
20525: PUSH
20526: LD_INT 23
20528: PUSH
20529: LD_INT 26
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 101
20545: PUSH
20546: LD_INT 102
20548: PUSH
20549: LD_INT 106
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: LIST
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: ST_TO_ADDR
20561: GO 23420
20563: LD_INT 2
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20643
20571: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20572: LD_ADDR_VAR 0 1
20576: PUSH
20577: LD_INT 2
20579: PUSH
20580: LD_INT 4
20582: PUSH
20583: LD_INT 11
20585: PUSH
20586: LD_INT 12
20588: PUSH
20589: LD_INT 15
20591: PUSH
20592: LD_INT 16
20594: PUSH
20595: LD_INT 22
20597: PUSH
20598: LD_INT 23
20600: PUSH
20601: LD_INT 26
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 101
20617: PUSH
20618: LD_INT 102
20620: PUSH
20621: LD_INT 105
20623: PUSH
20624: LD_INT 106
20626: PUSH
20627: LD_INT 108
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: ST_TO_ADDR
20641: GO 23420
20643: LD_INT 3
20645: DOUBLE
20646: EQUAL
20647: IFTRUE 20651
20649: GO 20727
20651: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20652: LD_ADDR_VAR 0 1
20656: PUSH
20657: LD_INT 2
20659: PUSH
20660: LD_INT 4
20662: PUSH
20663: LD_INT 5
20665: PUSH
20666: LD_INT 11
20668: PUSH
20669: LD_INT 12
20671: PUSH
20672: LD_INT 15
20674: PUSH
20675: LD_INT 16
20677: PUSH
20678: LD_INT 22
20680: PUSH
20681: LD_INT 26
20683: PUSH
20684: LD_INT 36
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 101
20701: PUSH
20702: LD_INT 102
20704: PUSH
20705: LD_INT 105
20707: PUSH
20708: LD_INT 106
20710: PUSH
20711: LD_INT 108
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: ST_TO_ADDR
20725: GO 23420
20727: LD_INT 4
20729: DOUBLE
20730: EQUAL
20731: IFTRUE 20735
20733: GO 20819
20735: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20736: LD_ADDR_VAR 0 1
20740: PUSH
20741: LD_INT 2
20743: PUSH
20744: LD_INT 4
20746: PUSH
20747: LD_INT 5
20749: PUSH
20750: LD_INT 8
20752: PUSH
20753: LD_INT 11
20755: PUSH
20756: LD_INT 12
20758: PUSH
20759: LD_INT 15
20761: PUSH
20762: LD_INT 16
20764: PUSH
20765: LD_INT 22
20767: PUSH
20768: LD_INT 23
20770: PUSH
20771: LD_INT 26
20773: PUSH
20774: LD_INT 36
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 101
20793: PUSH
20794: LD_INT 102
20796: PUSH
20797: LD_INT 105
20799: PUSH
20800: LD_INT 106
20802: PUSH
20803: LD_INT 108
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: ST_TO_ADDR
20817: GO 23420
20819: LD_INT 5
20821: DOUBLE
20822: EQUAL
20823: IFTRUE 20827
20825: GO 20927
20827: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20828: LD_ADDR_VAR 0 1
20832: PUSH
20833: LD_INT 2
20835: PUSH
20836: LD_INT 4
20838: PUSH
20839: LD_INT 5
20841: PUSH
20842: LD_INT 6
20844: PUSH
20845: LD_INT 8
20847: PUSH
20848: LD_INT 11
20850: PUSH
20851: LD_INT 12
20853: PUSH
20854: LD_INT 15
20856: PUSH
20857: LD_INT 16
20859: PUSH
20860: LD_INT 22
20862: PUSH
20863: LD_INT 23
20865: PUSH
20866: LD_INT 25
20868: PUSH
20869: LD_INT 26
20871: PUSH
20872: LD_INT 36
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 101
20893: PUSH
20894: LD_INT 102
20896: PUSH
20897: LD_INT 105
20899: PUSH
20900: LD_INT 106
20902: PUSH
20903: LD_INT 108
20905: PUSH
20906: LD_INT 109
20908: PUSH
20909: LD_INT 112
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: ST_TO_ADDR
20925: GO 23420
20927: LD_INT 6
20929: DOUBLE
20930: EQUAL
20931: IFTRUE 20935
20933: GO 21055
20935: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20936: LD_ADDR_VAR 0 1
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: LD_INT 4
20946: PUSH
20947: LD_INT 5
20949: PUSH
20950: LD_INT 6
20952: PUSH
20953: LD_INT 8
20955: PUSH
20956: LD_INT 11
20958: PUSH
20959: LD_INT 12
20961: PUSH
20962: LD_INT 15
20964: PUSH
20965: LD_INT 16
20967: PUSH
20968: LD_INT 20
20970: PUSH
20971: LD_INT 21
20973: PUSH
20974: LD_INT 22
20976: PUSH
20977: LD_INT 23
20979: PUSH
20980: LD_INT 25
20982: PUSH
20983: LD_INT 26
20985: PUSH
20986: LD_INT 30
20988: PUSH
20989: LD_INT 31
20991: PUSH
20992: LD_INT 32
20994: PUSH
20995: LD_INT 36
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 101
21021: PUSH
21022: LD_INT 102
21024: PUSH
21025: LD_INT 105
21027: PUSH
21028: LD_INT 106
21030: PUSH
21031: LD_INT 108
21033: PUSH
21034: LD_INT 109
21036: PUSH
21037: LD_INT 112
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: ST_TO_ADDR
21053: GO 23420
21055: LD_INT 7
21057: DOUBLE
21058: EQUAL
21059: IFTRUE 21063
21061: GO 21163
21063: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21064: LD_ADDR_VAR 0 1
21068: PUSH
21069: LD_INT 2
21071: PUSH
21072: LD_INT 4
21074: PUSH
21075: LD_INT 5
21077: PUSH
21078: LD_INT 7
21080: PUSH
21081: LD_INT 11
21083: PUSH
21084: LD_INT 12
21086: PUSH
21087: LD_INT 15
21089: PUSH
21090: LD_INT 16
21092: PUSH
21093: LD_INT 20
21095: PUSH
21096: LD_INT 21
21098: PUSH
21099: LD_INT 22
21101: PUSH
21102: LD_INT 23
21104: PUSH
21105: LD_INT 25
21107: PUSH
21108: LD_INT 26
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 101
21129: PUSH
21130: LD_INT 102
21132: PUSH
21133: LD_INT 103
21135: PUSH
21136: LD_INT 105
21138: PUSH
21139: LD_INT 106
21141: PUSH
21142: LD_INT 108
21144: PUSH
21145: LD_INT 112
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: ST_TO_ADDR
21161: GO 23420
21163: LD_INT 8
21165: DOUBLE
21166: EQUAL
21167: IFTRUE 21171
21169: GO 21299
21171: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21172: LD_ADDR_VAR 0 1
21176: PUSH
21177: LD_INT 2
21179: PUSH
21180: LD_INT 4
21182: PUSH
21183: LD_INT 5
21185: PUSH
21186: LD_INT 6
21188: PUSH
21189: LD_INT 7
21191: PUSH
21192: LD_INT 8
21194: PUSH
21195: LD_INT 11
21197: PUSH
21198: LD_INT 12
21200: PUSH
21201: LD_INT 15
21203: PUSH
21204: LD_INT 16
21206: PUSH
21207: LD_INT 20
21209: PUSH
21210: LD_INT 21
21212: PUSH
21213: LD_INT 22
21215: PUSH
21216: LD_INT 23
21218: PUSH
21219: LD_INT 25
21221: PUSH
21222: LD_INT 26
21224: PUSH
21225: LD_INT 30
21227: PUSH
21228: LD_INT 31
21230: PUSH
21231: LD_INT 32
21233: PUSH
21234: LD_INT 36
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 101
21261: PUSH
21262: LD_INT 102
21264: PUSH
21265: LD_INT 103
21267: PUSH
21268: LD_INT 105
21270: PUSH
21271: LD_INT 106
21273: PUSH
21274: LD_INT 108
21276: PUSH
21277: LD_INT 109
21279: PUSH
21280: LD_INT 112
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: ST_TO_ADDR
21297: GO 23420
21299: LD_INT 9
21301: DOUBLE
21302: EQUAL
21303: IFTRUE 21307
21305: GO 21443
21307: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21308: LD_ADDR_VAR 0 1
21312: PUSH
21313: LD_INT 2
21315: PUSH
21316: LD_INT 4
21318: PUSH
21319: LD_INT 5
21321: PUSH
21322: LD_INT 6
21324: PUSH
21325: LD_INT 7
21327: PUSH
21328: LD_INT 8
21330: PUSH
21331: LD_INT 11
21333: PUSH
21334: LD_INT 12
21336: PUSH
21337: LD_INT 15
21339: PUSH
21340: LD_INT 16
21342: PUSH
21343: LD_INT 20
21345: PUSH
21346: LD_INT 21
21348: PUSH
21349: LD_INT 22
21351: PUSH
21352: LD_INT 23
21354: PUSH
21355: LD_INT 25
21357: PUSH
21358: LD_INT 26
21360: PUSH
21361: LD_INT 28
21363: PUSH
21364: LD_INT 30
21366: PUSH
21367: LD_INT 31
21369: PUSH
21370: LD_INT 32
21372: PUSH
21373: LD_INT 36
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 101
21401: PUSH
21402: LD_INT 102
21404: PUSH
21405: LD_INT 103
21407: PUSH
21408: LD_INT 105
21410: PUSH
21411: LD_INT 106
21413: PUSH
21414: LD_INT 108
21416: PUSH
21417: LD_INT 109
21419: PUSH
21420: LD_INT 112
21422: PUSH
21423: LD_INT 114
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: ST_TO_ADDR
21441: GO 23420
21443: LD_INT 10
21445: DOUBLE
21446: EQUAL
21447: IFTRUE 21451
21449: GO 21635
21451: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21452: LD_ADDR_VAR 0 1
21456: PUSH
21457: LD_INT 2
21459: PUSH
21460: LD_INT 4
21462: PUSH
21463: LD_INT 5
21465: PUSH
21466: LD_INT 6
21468: PUSH
21469: LD_INT 7
21471: PUSH
21472: LD_INT 8
21474: PUSH
21475: LD_INT 9
21477: PUSH
21478: LD_INT 10
21480: PUSH
21481: LD_INT 11
21483: PUSH
21484: LD_INT 12
21486: PUSH
21487: LD_INT 13
21489: PUSH
21490: LD_INT 14
21492: PUSH
21493: LD_INT 15
21495: PUSH
21496: LD_INT 16
21498: PUSH
21499: LD_INT 17
21501: PUSH
21502: LD_INT 18
21504: PUSH
21505: LD_INT 19
21507: PUSH
21508: LD_INT 20
21510: PUSH
21511: LD_INT 21
21513: PUSH
21514: LD_INT 22
21516: PUSH
21517: LD_INT 23
21519: PUSH
21520: LD_INT 24
21522: PUSH
21523: LD_INT 25
21525: PUSH
21526: LD_INT 26
21528: PUSH
21529: LD_INT 28
21531: PUSH
21532: LD_INT 30
21534: PUSH
21535: LD_INT 31
21537: PUSH
21538: LD_INT 32
21540: PUSH
21541: LD_INT 36
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 101
21577: PUSH
21578: LD_INT 102
21580: PUSH
21581: LD_INT 103
21583: PUSH
21584: LD_INT 104
21586: PUSH
21587: LD_INT 105
21589: PUSH
21590: LD_INT 106
21592: PUSH
21593: LD_INT 107
21595: PUSH
21596: LD_INT 108
21598: PUSH
21599: LD_INT 109
21601: PUSH
21602: LD_INT 110
21604: PUSH
21605: LD_INT 111
21607: PUSH
21608: LD_INT 112
21610: PUSH
21611: LD_INT 114
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: ST_TO_ADDR
21633: GO 23420
21635: LD_INT 11
21637: DOUBLE
21638: EQUAL
21639: IFTRUE 21643
21641: GO 21835
21643: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21644: LD_ADDR_VAR 0 1
21648: PUSH
21649: LD_INT 2
21651: PUSH
21652: LD_INT 3
21654: PUSH
21655: LD_INT 4
21657: PUSH
21658: LD_INT 5
21660: PUSH
21661: LD_INT 6
21663: PUSH
21664: LD_INT 7
21666: PUSH
21667: LD_INT 8
21669: PUSH
21670: LD_INT 9
21672: PUSH
21673: LD_INT 10
21675: PUSH
21676: LD_INT 11
21678: PUSH
21679: LD_INT 12
21681: PUSH
21682: LD_INT 13
21684: PUSH
21685: LD_INT 14
21687: PUSH
21688: LD_INT 15
21690: PUSH
21691: LD_INT 16
21693: PUSH
21694: LD_INT 17
21696: PUSH
21697: LD_INT 18
21699: PUSH
21700: LD_INT 19
21702: PUSH
21703: LD_INT 20
21705: PUSH
21706: LD_INT 21
21708: PUSH
21709: LD_INT 22
21711: PUSH
21712: LD_INT 23
21714: PUSH
21715: LD_INT 24
21717: PUSH
21718: LD_INT 25
21720: PUSH
21721: LD_INT 26
21723: PUSH
21724: LD_INT 28
21726: PUSH
21727: LD_INT 30
21729: PUSH
21730: LD_INT 31
21732: PUSH
21733: LD_INT 32
21735: PUSH
21736: LD_INT 34
21738: PUSH
21739: LD_INT 36
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 101
21777: PUSH
21778: LD_INT 102
21780: PUSH
21781: LD_INT 103
21783: PUSH
21784: LD_INT 104
21786: PUSH
21787: LD_INT 105
21789: PUSH
21790: LD_INT 106
21792: PUSH
21793: LD_INT 107
21795: PUSH
21796: LD_INT 108
21798: PUSH
21799: LD_INT 109
21801: PUSH
21802: LD_INT 110
21804: PUSH
21805: LD_INT 111
21807: PUSH
21808: LD_INT 112
21810: PUSH
21811: LD_INT 114
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: ST_TO_ADDR
21833: GO 23420
21835: LD_INT 12
21837: DOUBLE
21838: EQUAL
21839: IFTRUE 21843
21841: GO 22051
21843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21844: LD_ADDR_VAR 0 1
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: LD_INT 2
21854: PUSH
21855: LD_INT 3
21857: PUSH
21858: LD_INT 4
21860: PUSH
21861: LD_INT 5
21863: PUSH
21864: LD_INT 6
21866: PUSH
21867: LD_INT 7
21869: PUSH
21870: LD_INT 8
21872: PUSH
21873: LD_INT 9
21875: PUSH
21876: LD_INT 10
21878: PUSH
21879: LD_INT 11
21881: PUSH
21882: LD_INT 12
21884: PUSH
21885: LD_INT 13
21887: PUSH
21888: LD_INT 14
21890: PUSH
21891: LD_INT 15
21893: PUSH
21894: LD_INT 16
21896: PUSH
21897: LD_INT 17
21899: PUSH
21900: LD_INT 18
21902: PUSH
21903: LD_INT 19
21905: PUSH
21906: LD_INT 20
21908: PUSH
21909: LD_INT 21
21911: PUSH
21912: LD_INT 22
21914: PUSH
21915: LD_INT 23
21917: PUSH
21918: LD_INT 24
21920: PUSH
21921: LD_INT 25
21923: PUSH
21924: LD_INT 26
21926: PUSH
21927: LD_INT 27
21929: PUSH
21930: LD_INT 28
21932: PUSH
21933: LD_INT 30
21935: PUSH
21936: LD_INT 31
21938: PUSH
21939: LD_INT 32
21941: PUSH
21942: LD_INT 33
21944: PUSH
21945: LD_INT 34
21947: PUSH
21948: LD_INT 36
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 101
21989: PUSH
21990: LD_INT 102
21992: PUSH
21993: LD_INT 103
21995: PUSH
21996: LD_INT 104
21998: PUSH
21999: LD_INT 105
22001: PUSH
22002: LD_INT 106
22004: PUSH
22005: LD_INT 107
22007: PUSH
22008: LD_INT 108
22010: PUSH
22011: LD_INT 109
22013: PUSH
22014: LD_INT 110
22016: PUSH
22017: LD_INT 111
22019: PUSH
22020: LD_INT 112
22022: PUSH
22023: LD_INT 113
22025: PUSH
22026: LD_INT 114
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: ST_TO_ADDR
22049: GO 23420
22051: LD_INT 13
22053: DOUBLE
22054: EQUAL
22055: IFTRUE 22059
22057: GO 22255
22059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22060: LD_ADDR_VAR 0 1
22064: PUSH
22065: LD_INT 1
22067: PUSH
22068: LD_INT 2
22070: PUSH
22071: LD_INT 3
22073: PUSH
22074: LD_INT 4
22076: PUSH
22077: LD_INT 5
22079: PUSH
22080: LD_INT 8
22082: PUSH
22083: LD_INT 9
22085: PUSH
22086: LD_INT 10
22088: PUSH
22089: LD_INT 11
22091: PUSH
22092: LD_INT 12
22094: PUSH
22095: LD_INT 14
22097: PUSH
22098: LD_INT 15
22100: PUSH
22101: LD_INT 16
22103: PUSH
22104: LD_INT 17
22106: PUSH
22107: LD_INT 18
22109: PUSH
22110: LD_INT 19
22112: PUSH
22113: LD_INT 20
22115: PUSH
22116: LD_INT 21
22118: PUSH
22119: LD_INT 22
22121: PUSH
22122: LD_INT 23
22124: PUSH
22125: LD_INT 24
22127: PUSH
22128: LD_INT 25
22130: PUSH
22131: LD_INT 26
22133: PUSH
22134: LD_INT 27
22136: PUSH
22137: LD_INT 28
22139: PUSH
22140: LD_INT 30
22142: PUSH
22143: LD_INT 31
22145: PUSH
22146: LD_INT 32
22148: PUSH
22149: LD_INT 33
22151: PUSH
22152: LD_INT 34
22154: PUSH
22155: LD_INT 36
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 101
22193: PUSH
22194: LD_INT 102
22196: PUSH
22197: LD_INT 103
22199: PUSH
22200: LD_INT 104
22202: PUSH
22203: LD_INT 105
22205: PUSH
22206: LD_INT 106
22208: PUSH
22209: LD_INT 107
22211: PUSH
22212: LD_INT 108
22214: PUSH
22215: LD_INT 109
22217: PUSH
22218: LD_INT 110
22220: PUSH
22221: LD_INT 111
22223: PUSH
22224: LD_INT 112
22226: PUSH
22227: LD_INT 113
22229: PUSH
22230: LD_INT 114
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: ST_TO_ADDR
22253: GO 23420
22255: LD_INT 14
22257: DOUBLE
22258: EQUAL
22259: IFTRUE 22263
22261: GO 22475
22263: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22264: LD_ADDR_VAR 0 1
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: LD_INT 2
22274: PUSH
22275: LD_INT 3
22277: PUSH
22278: LD_INT 4
22280: PUSH
22281: LD_INT 5
22283: PUSH
22284: LD_INT 6
22286: PUSH
22287: LD_INT 7
22289: PUSH
22290: LD_INT 8
22292: PUSH
22293: LD_INT 9
22295: PUSH
22296: LD_INT 10
22298: PUSH
22299: LD_INT 11
22301: PUSH
22302: LD_INT 12
22304: PUSH
22305: LD_INT 13
22307: PUSH
22308: LD_INT 14
22310: PUSH
22311: LD_INT 15
22313: PUSH
22314: LD_INT 16
22316: PUSH
22317: LD_INT 17
22319: PUSH
22320: LD_INT 18
22322: PUSH
22323: LD_INT 19
22325: PUSH
22326: LD_INT 20
22328: PUSH
22329: LD_INT 21
22331: PUSH
22332: LD_INT 22
22334: PUSH
22335: LD_INT 23
22337: PUSH
22338: LD_INT 24
22340: PUSH
22341: LD_INT 25
22343: PUSH
22344: LD_INT 26
22346: PUSH
22347: LD_INT 27
22349: PUSH
22350: LD_INT 28
22352: PUSH
22353: LD_INT 29
22355: PUSH
22356: LD_INT 30
22358: PUSH
22359: LD_INT 31
22361: PUSH
22362: LD_INT 32
22364: PUSH
22365: LD_INT 33
22367: PUSH
22368: LD_INT 34
22370: PUSH
22371: LD_INT 36
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 101
22413: PUSH
22414: LD_INT 102
22416: PUSH
22417: LD_INT 103
22419: PUSH
22420: LD_INT 104
22422: PUSH
22423: LD_INT 105
22425: PUSH
22426: LD_INT 106
22428: PUSH
22429: LD_INT 107
22431: PUSH
22432: LD_INT 108
22434: PUSH
22435: LD_INT 109
22437: PUSH
22438: LD_INT 110
22440: PUSH
22441: LD_INT 111
22443: PUSH
22444: LD_INT 112
22446: PUSH
22447: LD_INT 113
22449: PUSH
22450: LD_INT 114
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: ST_TO_ADDR
22473: GO 23420
22475: LD_INT 15
22477: DOUBLE
22478: EQUAL
22479: IFTRUE 22483
22481: GO 22695
22483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22484: LD_ADDR_VAR 0 1
22488: PUSH
22489: LD_INT 1
22491: PUSH
22492: LD_INT 2
22494: PUSH
22495: LD_INT 3
22497: PUSH
22498: LD_INT 4
22500: PUSH
22501: LD_INT 5
22503: PUSH
22504: LD_INT 6
22506: PUSH
22507: LD_INT 7
22509: PUSH
22510: LD_INT 8
22512: PUSH
22513: LD_INT 9
22515: PUSH
22516: LD_INT 10
22518: PUSH
22519: LD_INT 11
22521: PUSH
22522: LD_INT 12
22524: PUSH
22525: LD_INT 13
22527: PUSH
22528: LD_INT 14
22530: PUSH
22531: LD_INT 15
22533: PUSH
22534: LD_INT 16
22536: PUSH
22537: LD_INT 17
22539: PUSH
22540: LD_INT 18
22542: PUSH
22543: LD_INT 19
22545: PUSH
22546: LD_INT 20
22548: PUSH
22549: LD_INT 21
22551: PUSH
22552: LD_INT 22
22554: PUSH
22555: LD_INT 23
22557: PUSH
22558: LD_INT 24
22560: PUSH
22561: LD_INT 25
22563: PUSH
22564: LD_INT 26
22566: PUSH
22567: LD_INT 27
22569: PUSH
22570: LD_INT 28
22572: PUSH
22573: LD_INT 29
22575: PUSH
22576: LD_INT 30
22578: PUSH
22579: LD_INT 31
22581: PUSH
22582: LD_INT 32
22584: PUSH
22585: LD_INT 33
22587: PUSH
22588: LD_INT 34
22590: PUSH
22591: LD_INT 36
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 101
22633: PUSH
22634: LD_INT 102
22636: PUSH
22637: LD_INT 103
22639: PUSH
22640: LD_INT 104
22642: PUSH
22643: LD_INT 105
22645: PUSH
22646: LD_INT 106
22648: PUSH
22649: LD_INT 107
22651: PUSH
22652: LD_INT 108
22654: PUSH
22655: LD_INT 109
22657: PUSH
22658: LD_INT 110
22660: PUSH
22661: LD_INT 111
22663: PUSH
22664: LD_INT 112
22666: PUSH
22667: LD_INT 113
22669: PUSH
22670: LD_INT 114
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: ST_TO_ADDR
22693: GO 23420
22695: LD_INT 16
22697: DOUBLE
22698: EQUAL
22699: IFTRUE 22703
22701: GO 22827
22703: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22704: LD_ADDR_VAR 0 1
22708: PUSH
22709: LD_INT 2
22711: PUSH
22712: LD_INT 4
22714: PUSH
22715: LD_INT 5
22717: PUSH
22718: LD_INT 7
22720: PUSH
22721: LD_INT 11
22723: PUSH
22724: LD_INT 12
22726: PUSH
22727: LD_INT 15
22729: PUSH
22730: LD_INT 16
22732: PUSH
22733: LD_INT 20
22735: PUSH
22736: LD_INT 21
22738: PUSH
22739: LD_INT 22
22741: PUSH
22742: LD_INT 23
22744: PUSH
22745: LD_INT 25
22747: PUSH
22748: LD_INT 26
22750: PUSH
22751: LD_INT 30
22753: PUSH
22754: LD_INT 31
22756: PUSH
22757: LD_INT 32
22759: PUSH
22760: LD_INT 33
22762: PUSH
22763: LD_INT 34
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 101
22789: PUSH
22790: LD_INT 102
22792: PUSH
22793: LD_INT 103
22795: PUSH
22796: LD_INT 106
22798: PUSH
22799: LD_INT 108
22801: PUSH
22802: LD_INT 112
22804: PUSH
22805: LD_INT 113
22807: PUSH
22808: LD_INT 114
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: ST_TO_ADDR
22825: GO 23420
22827: LD_INT 17
22829: DOUBLE
22830: EQUAL
22831: IFTRUE 22835
22833: GO 23047
22835: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22836: LD_ADDR_VAR 0 1
22840: PUSH
22841: LD_INT 1
22843: PUSH
22844: LD_INT 2
22846: PUSH
22847: LD_INT 3
22849: PUSH
22850: LD_INT 4
22852: PUSH
22853: LD_INT 5
22855: PUSH
22856: LD_INT 6
22858: PUSH
22859: LD_INT 7
22861: PUSH
22862: LD_INT 8
22864: PUSH
22865: LD_INT 9
22867: PUSH
22868: LD_INT 10
22870: PUSH
22871: LD_INT 11
22873: PUSH
22874: LD_INT 12
22876: PUSH
22877: LD_INT 13
22879: PUSH
22880: LD_INT 14
22882: PUSH
22883: LD_INT 15
22885: PUSH
22886: LD_INT 16
22888: PUSH
22889: LD_INT 17
22891: PUSH
22892: LD_INT 18
22894: PUSH
22895: LD_INT 19
22897: PUSH
22898: LD_INT 20
22900: PUSH
22901: LD_INT 21
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_INT 23
22909: PUSH
22910: LD_INT 24
22912: PUSH
22913: LD_INT 25
22915: PUSH
22916: LD_INT 26
22918: PUSH
22919: LD_INT 27
22921: PUSH
22922: LD_INT 28
22924: PUSH
22925: LD_INT 29
22927: PUSH
22928: LD_INT 30
22930: PUSH
22931: LD_INT 31
22933: PUSH
22934: LD_INT 32
22936: PUSH
22937: LD_INT 33
22939: PUSH
22940: LD_INT 34
22942: PUSH
22943: LD_INT 36
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 101
22985: PUSH
22986: LD_INT 102
22988: PUSH
22989: LD_INT 103
22991: PUSH
22992: LD_INT 104
22994: PUSH
22995: LD_INT 105
22997: PUSH
22998: LD_INT 106
23000: PUSH
23001: LD_INT 107
23003: PUSH
23004: LD_INT 108
23006: PUSH
23007: LD_INT 109
23009: PUSH
23010: LD_INT 110
23012: PUSH
23013: LD_INT 111
23015: PUSH
23016: LD_INT 112
23018: PUSH
23019: LD_INT 113
23021: PUSH
23022: LD_INT 114
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: ST_TO_ADDR
23045: GO 23420
23047: LD_INT 18
23049: DOUBLE
23050: EQUAL
23051: IFTRUE 23055
23053: GO 23191
23055: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23056: LD_ADDR_VAR 0 1
23060: PUSH
23061: LD_INT 2
23063: PUSH
23064: LD_INT 4
23066: PUSH
23067: LD_INT 5
23069: PUSH
23070: LD_INT 7
23072: PUSH
23073: LD_INT 11
23075: PUSH
23076: LD_INT 12
23078: PUSH
23079: LD_INT 15
23081: PUSH
23082: LD_INT 16
23084: PUSH
23085: LD_INT 20
23087: PUSH
23088: LD_INT 21
23090: PUSH
23091: LD_INT 22
23093: PUSH
23094: LD_INT 23
23096: PUSH
23097: LD_INT 25
23099: PUSH
23100: LD_INT 26
23102: PUSH
23103: LD_INT 30
23105: PUSH
23106: LD_INT 31
23108: PUSH
23109: LD_INT 32
23111: PUSH
23112: LD_INT 33
23114: PUSH
23115: LD_INT 34
23117: PUSH
23118: LD_INT 35
23120: PUSH
23121: LD_INT 36
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 101
23149: PUSH
23150: LD_INT 102
23152: PUSH
23153: LD_INT 103
23155: PUSH
23156: LD_INT 106
23158: PUSH
23159: LD_INT 108
23161: PUSH
23162: LD_INT 112
23164: PUSH
23165: LD_INT 113
23167: PUSH
23168: LD_INT 114
23170: PUSH
23171: LD_INT 115
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: ST_TO_ADDR
23189: GO 23420
23191: LD_INT 19
23193: DOUBLE
23194: EQUAL
23195: IFTRUE 23199
23197: GO 23419
23199: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23200: LD_ADDR_VAR 0 1
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: LD_INT 2
23210: PUSH
23211: LD_INT 3
23213: PUSH
23214: LD_INT 4
23216: PUSH
23217: LD_INT 5
23219: PUSH
23220: LD_INT 6
23222: PUSH
23223: LD_INT 7
23225: PUSH
23226: LD_INT 8
23228: PUSH
23229: LD_INT 9
23231: PUSH
23232: LD_INT 10
23234: PUSH
23235: LD_INT 11
23237: PUSH
23238: LD_INT 12
23240: PUSH
23241: LD_INT 13
23243: PUSH
23244: LD_INT 14
23246: PUSH
23247: LD_INT 15
23249: PUSH
23250: LD_INT 16
23252: PUSH
23253: LD_INT 17
23255: PUSH
23256: LD_INT 18
23258: PUSH
23259: LD_INT 19
23261: PUSH
23262: LD_INT 20
23264: PUSH
23265: LD_INT 21
23267: PUSH
23268: LD_INT 22
23270: PUSH
23271: LD_INT 23
23273: PUSH
23274: LD_INT 24
23276: PUSH
23277: LD_INT 25
23279: PUSH
23280: LD_INT 26
23282: PUSH
23283: LD_INT 27
23285: PUSH
23286: LD_INT 28
23288: PUSH
23289: LD_INT 29
23291: PUSH
23292: LD_INT 30
23294: PUSH
23295: LD_INT 31
23297: PUSH
23298: LD_INT 32
23300: PUSH
23301: LD_INT 33
23303: PUSH
23304: LD_INT 34
23306: PUSH
23307: LD_INT 35
23309: PUSH
23310: LD_INT 36
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 101
23353: PUSH
23354: LD_INT 102
23356: PUSH
23357: LD_INT 103
23359: PUSH
23360: LD_INT 104
23362: PUSH
23363: LD_INT 105
23365: PUSH
23366: LD_INT 106
23368: PUSH
23369: LD_INT 107
23371: PUSH
23372: LD_INT 108
23374: PUSH
23375: LD_INT 109
23377: PUSH
23378: LD_INT 110
23380: PUSH
23381: LD_INT 111
23383: PUSH
23384: LD_INT 112
23386: PUSH
23387: LD_INT 113
23389: PUSH
23390: LD_INT 114
23392: PUSH
23393: LD_INT 115
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: ST_TO_ADDR
23417: GO 23420
23419: POP
// end else
23420: GO 23639
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23422: LD_ADDR_VAR 0 1
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: LD_INT 2
23432: PUSH
23433: LD_INT 3
23435: PUSH
23436: LD_INT 4
23438: PUSH
23439: LD_INT 5
23441: PUSH
23442: LD_INT 6
23444: PUSH
23445: LD_INT 7
23447: PUSH
23448: LD_INT 8
23450: PUSH
23451: LD_INT 9
23453: PUSH
23454: LD_INT 10
23456: PUSH
23457: LD_INT 11
23459: PUSH
23460: LD_INT 12
23462: PUSH
23463: LD_INT 13
23465: PUSH
23466: LD_INT 14
23468: PUSH
23469: LD_INT 15
23471: PUSH
23472: LD_INT 16
23474: PUSH
23475: LD_INT 17
23477: PUSH
23478: LD_INT 18
23480: PUSH
23481: LD_INT 19
23483: PUSH
23484: LD_INT 20
23486: PUSH
23487: LD_INT 21
23489: PUSH
23490: LD_INT 22
23492: PUSH
23493: LD_INT 23
23495: PUSH
23496: LD_INT 24
23498: PUSH
23499: LD_INT 25
23501: PUSH
23502: LD_INT 26
23504: PUSH
23505: LD_INT 27
23507: PUSH
23508: LD_INT 28
23510: PUSH
23511: LD_INT 29
23513: PUSH
23514: LD_INT 30
23516: PUSH
23517: LD_INT 31
23519: PUSH
23520: LD_INT 32
23522: PUSH
23523: LD_INT 33
23525: PUSH
23526: LD_INT 34
23528: PUSH
23529: LD_INT 35
23531: PUSH
23532: LD_INT 36
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 101
23575: PUSH
23576: LD_INT 102
23578: PUSH
23579: LD_INT 103
23581: PUSH
23582: LD_INT 104
23584: PUSH
23585: LD_INT 105
23587: PUSH
23588: LD_INT 106
23590: PUSH
23591: LD_INT 107
23593: PUSH
23594: LD_INT 108
23596: PUSH
23597: LD_INT 109
23599: PUSH
23600: LD_INT 110
23602: PUSH
23603: LD_INT 111
23605: PUSH
23606: LD_INT 112
23608: PUSH
23609: LD_INT 113
23611: PUSH
23612: LD_INT 114
23614: PUSH
23615: LD_INT 115
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: ST_TO_ADDR
// if result then
23639: LD_VAR 0 1
23643: IFFALSE 23932
// begin normal :=  ;
23645: LD_ADDR_VAR 0 3
23649: PUSH
23650: LD_STRING 
23652: ST_TO_ADDR
// hardcore :=  ;
23653: LD_ADDR_VAR 0 4
23657: PUSH
23658: LD_STRING 
23660: ST_TO_ADDR
// for i = 1 to normalCounter do
23661: LD_ADDR_VAR 0 5
23665: PUSH
23666: DOUBLE
23667: LD_INT 1
23669: DEC
23670: ST_TO_ADDR
23671: LD_EXP 59
23675: PUSH
23676: FOR_TO
23677: IFFALSE 23778
// begin tmp := 0 ;
23679: LD_ADDR_VAR 0 2
23683: PUSH
23684: LD_STRING 0
23686: ST_TO_ADDR
// if result [ 1 ] then
23687: LD_VAR 0 1
23691: PUSH
23692: LD_INT 1
23694: ARRAY
23695: IFFALSE 23760
// if result [ 1 ] [ 1 ] = i then
23697: LD_VAR 0 1
23701: PUSH
23702: LD_INT 1
23704: ARRAY
23705: PUSH
23706: LD_INT 1
23708: ARRAY
23709: PUSH
23710: LD_VAR 0 5
23714: EQUAL
23715: IFFALSE 23760
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23717: LD_ADDR_VAR 0 1
23721: PUSH
23722: LD_VAR 0 1
23726: PPUSH
23727: LD_INT 1
23729: PPUSH
23730: LD_VAR 0 1
23734: PUSH
23735: LD_INT 1
23737: ARRAY
23738: PPUSH
23739: LD_INT 1
23741: PPUSH
23742: CALL_OW 3
23746: PPUSH
23747: CALL_OW 1
23751: ST_TO_ADDR
// tmp := 1 ;
23752: LD_ADDR_VAR 0 2
23756: PUSH
23757: LD_STRING 1
23759: ST_TO_ADDR
// end ; normal := normal & tmp ;
23760: LD_ADDR_VAR 0 3
23764: PUSH
23765: LD_VAR 0 3
23769: PUSH
23770: LD_VAR 0 2
23774: STR
23775: ST_TO_ADDR
// end ;
23776: GO 23676
23778: POP
23779: POP
// for i = 1 to hardcoreCounter do
23780: LD_ADDR_VAR 0 5
23784: PUSH
23785: DOUBLE
23786: LD_INT 1
23788: DEC
23789: ST_TO_ADDR
23790: LD_EXP 60
23794: PUSH
23795: FOR_TO
23796: IFFALSE 23901
// begin tmp := 0 ;
23798: LD_ADDR_VAR 0 2
23802: PUSH
23803: LD_STRING 0
23805: ST_TO_ADDR
// if result [ 2 ] then
23806: LD_VAR 0 1
23810: PUSH
23811: LD_INT 2
23813: ARRAY
23814: IFFALSE 23883
// if result [ 2 ] [ 1 ] = 100 + i then
23816: LD_VAR 0 1
23820: PUSH
23821: LD_INT 2
23823: ARRAY
23824: PUSH
23825: LD_INT 1
23827: ARRAY
23828: PUSH
23829: LD_INT 100
23831: PUSH
23832: LD_VAR 0 5
23836: PLUS
23837: EQUAL
23838: IFFALSE 23883
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23840: LD_ADDR_VAR 0 1
23844: PUSH
23845: LD_VAR 0 1
23849: PPUSH
23850: LD_INT 2
23852: PPUSH
23853: LD_VAR 0 1
23857: PUSH
23858: LD_INT 2
23860: ARRAY
23861: PPUSH
23862: LD_INT 1
23864: PPUSH
23865: CALL_OW 3
23869: PPUSH
23870: CALL_OW 1
23874: ST_TO_ADDR
// tmp := 1 ;
23875: LD_ADDR_VAR 0 2
23879: PUSH
23880: LD_STRING 1
23882: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23883: LD_ADDR_VAR 0 4
23887: PUSH
23888: LD_VAR 0 4
23892: PUSH
23893: LD_VAR 0 2
23897: STR
23898: ST_TO_ADDR
// end ;
23899: GO 23795
23901: POP
23902: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23903: LD_STRING getStreamItemsFromMission("
23905: PUSH
23906: LD_VAR 0 3
23910: STR
23911: PUSH
23912: LD_STRING ","
23914: STR
23915: PUSH
23916: LD_VAR 0 4
23920: STR
23921: PUSH
23922: LD_STRING ")
23924: STR
23925: PPUSH
23926: CALL_OW 559
// end else
23930: GO 23939
// ToLua ( getStreamItemsFromMission("","") ) ;
23932: LD_STRING getStreamItemsFromMission("","")
23934: PPUSH
23935: CALL_OW 559
// end ;
23939: LD_VAR 0 1
23943: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23944: LD_EXP 58
23948: PUSH
23949: LD_EXP 63
23953: AND
23954: IFFALSE 24078
23956: GO 23958
23958: DISABLE
23959: LD_INT 0
23961: PPUSH
23962: PPUSH
// begin enable ;
23963: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23964: LD_ADDR_VAR 0 2
23968: PUSH
23969: LD_INT 22
23971: PUSH
23972: LD_OWVAR 2
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 2
23983: PUSH
23984: LD_INT 34
23986: PUSH
23987: LD_INT 7
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 34
23996: PUSH
23997: LD_INT 45
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 34
24006: PUSH
24007: LD_INT 28
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 34
24016: PUSH
24017: LD_INT 47
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PPUSH
24035: CALL_OW 69
24039: ST_TO_ADDR
// if not tmp then
24040: LD_VAR 0 2
24044: NOT
24045: IFFALSE 24049
// exit ;
24047: GO 24078
// for i in tmp do
24049: LD_ADDR_VAR 0 1
24053: PUSH
24054: LD_VAR 0 2
24058: PUSH
24059: FOR_IN
24060: IFFALSE 24076
// begin SetLives ( i , 0 ) ;
24062: LD_VAR 0 1
24066: PPUSH
24067: LD_INT 0
24069: PPUSH
24070: CALL_OW 234
// end ;
24074: GO 24059
24076: POP
24077: POP
// end ;
24078: PPOPN 2
24080: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24081: LD_EXP 58
24085: PUSH
24086: LD_EXP 64
24090: AND
24091: IFFALSE 24175
24093: GO 24095
24095: DISABLE
24096: LD_INT 0
24098: PPUSH
24099: PPUSH
// begin enable ;
24100: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24101: LD_ADDR_VAR 0 2
24105: PUSH
24106: LD_INT 22
24108: PUSH
24109: LD_OWVAR 2
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 32
24120: PUSH
24121: LD_INT 3
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PPUSH
24132: CALL_OW 69
24136: ST_TO_ADDR
// if not tmp then
24137: LD_VAR 0 2
24141: NOT
24142: IFFALSE 24146
// exit ;
24144: GO 24175
// for i in tmp do
24146: LD_ADDR_VAR 0 1
24150: PUSH
24151: LD_VAR 0 2
24155: PUSH
24156: FOR_IN
24157: IFFALSE 24173
// begin SetLives ( i , 0 ) ;
24159: LD_VAR 0 1
24163: PPUSH
24164: LD_INT 0
24166: PPUSH
24167: CALL_OW 234
// end ;
24171: GO 24156
24173: POP
24174: POP
// end ;
24175: PPOPN 2
24177: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24178: LD_EXP 58
24182: PUSH
24183: LD_EXP 61
24187: AND
24188: IFFALSE 24281
24190: GO 24192
24192: DISABLE
24193: LD_INT 0
24195: PPUSH
// begin enable ;
24196: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24197: LD_ADDR_VAR 0 1
24201: PUSH
24202: LD_INT 22
24204: PUSH
24205: LD_OWVAR 2
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 2
24216: PUSH
24217: LD_INT 25
24219: PUSH
24220: LD_INT 5
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 25
24229: PUSH
24230: LD_INT 9
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 25
24239: PUSH
24240: LD_INT 8
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PPUSH
24257: CALL_OW 69
24261: PUSH
24262: FOR_IN
24263: IFFALSE 24279
// begin SetClass ( i , 1 ) ;
24265: LD_VAR 0 1
24269: PPUSH
24270: LD_INT 1
24272: PPUSH
24273: CALL_OW 336
// end ;
24277: GO 24262
24279: POP
24280: POP
// end ;
24281: PPOPN 1
24283: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24284: LD_EXP 58
24288: PUSH
24289: LD_EXP 62
24293: AND
24294: PUSH
24295: LD_OWVAR 65
24299: PUSH
24300: LD_INT 7
24302: LESS
24303: AND
24304: IFFALSE 24318
24306: GO 24308
24308: DISABLE
// begin enable ;
24309: ENABLE
// game_speed := 7 ;
24310: LD_ADDR_OWVAR 65
24314: PUSH
24315: LD_INT 7
24317: ST_TO_ADDR
// end ;
24318: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24319: LD_EXP 58
24323: PUSH
24324: LD_EXP 65
24328: AND
24329: IFFALSE 24531
24331: GO 24333
24333: DISABLE
24334: LD_INT 0
24336: PPUSH
24337: PPUSH
24338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24339: LD_ADDR_VAR 0 3
24343: PUSH
24344: LD_INT 81
24346: PUSH
24347: LD_OWVAR 2
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 21
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PPUSH
24370: CALL_OW 69
24374: ST_TO_ADDR
// if not tmp then
24375: LD_VAR 0 3
24379: NOT
24380: IFFALSE 24384
// exit ;
24382: GO 24531
// if tmp > 5 then
24384: LD_VAR 0 3
24388: PUSH
24389: LD_INT 5
24391: GREATER
24392: IFFALSE 24404
// k := 5 else
24394: LD_ADDR_VAR 0 2
24398: PUSH
24399: LD_INT 5
24401: ST_TO_ADDR
24402: GO 24414
// k := tmp ;
24404: LD_ADDR_VAR 0 2
24408: PUSH
24409: LD_VAR 0 3
24413: ST_TO_ADDR
// for i := 1 to k do
24414: LD_ADDR_VAR 0 1
24418: PUSH
24419: DOUBLE
24420: LD_INT 1
24422: DEC
24423: ST_TO_ADDR
24424: LD_VAR 0 2
24428: PUSH
24429: FOR_TO
24430: IFFALSE 24529
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24432: LD_VAR 0 3
24436: PUSH
24437: LD_VAR 0 1
24441: ARRAY
24442: PPUSH
24443: LD_VAR 0 1
24447: PUSH
24448: LD_INT 4
24450: MOD
24451: PUSH
24452: LD_INT 1
24454: PLUS
24455: PPUSH
24456: CALL_OW 259
24460: PUSH
24461: LD_INT 10
24463: LESS
24464: IFFALSE 24527
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24466: LD_VAR 0 3
24470: PUSH
24471: LD_VAR 0 1
24475: ARRAY
24476: PPUSH
24477: LD_VAR 0 1
24481: PUSH
24482: LD_INT 4
24484: MOD
24485: PUSH
24486: LD_INT 1
24488: PLUS
24489: PPUSH
24490: LD_VAR 0 3
24494: PUSH
24495: LD_VAR 0 1
24499: ARRAY
24500: PPUSH
24501: LD_VAR 0 1
24505: PUSH
24506: LD_INT 4
24508: MOD
24509: PUSH
24510: LD_INT 1
24512: PLUS
24513: PPUSH
24514: CALL_OW 259
24518: PUSH
24519: LD_INT 1
24521: PLUS
24522: PPUSH
24523: CALL_OW 237
24527: GO 24429
24529: POP
24530: POP
// end ;
24531: PPOPN 3
24533: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24534: LD_EXP 58
24538: PUSH
24539: LD_EXP 66
24543: AND
24544: IFFALSE 24564
24546: GO 24548
24548: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24549: LD_INT 4
24551: PPUSH
24552: LD_OWVAR 2
24556: PPUSH
24557: LD_INT 0
24559: PPUSH
24560: CALL_OW 324
24564: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24565: LD_EXP 58
24569: PUSH
24570: LD_EXP 95
24574: AND
24575: IFFALSE 24595
24577: GO 24579
24579: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24580: LD_INT 19
24582: PPUSH
24583: LD_OWVAR 2
24587: PPUSH
24588: LD_INT 0
24590: PPUSH
24591: CALL_OW 324
24595: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24596: LD_EXP 58
24600: PUSH
24601: LD_EXP 67
24605: AND
24606: IFFALSE 24708
24608: GO 24610
24610: DISABLE
24611: LD_INT 0
24613: PPUSH
24614: PPUSH
// begin enable ;
24615: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24616: LD_ADDR_VAR 0 2
24620: PUSH
24621: LD_INT 22
24623: PUSH
24624: LD_OWVAR 2
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: LD_INT 34
24638: PUSH
24639: LD_INT 11
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 34
24648: PUSH
24649: LD_INT 30
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PPUSH
24665: CALL_OW 69
24669: ST_TO_ADDR
// if not tmp then
24670: LD_VAR 0 2
24674: NOT
24675: IFFALSE 24679
// exit ;
24677: GO 24708
// for i in tmp do
24679: LD_ADDR_VAR 0 1
24683: PUSH
24684: LD_VAR 0 2
24688: PUSH
24689: FOR_IN
24690: IFFALSE 24706
// begin SetLives ( i , 0 ) ;
24692: LD_VAR 0 1
24696: PPUSH
24697: LD_INT 0
24699: PPUSH
24700: CALL_OW 234
// end ;
24704: GO 24689
24706: POP
24707: POP
// end ;
24708: PPOPN 2
24710: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24711: LD_EXP 58
24715: PUSH
24716: LD_EXP 68
24720: AND
24721: IFFALSE 24741
24723: GO 24725
24725: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24726: LD_INT 32
24728: PPUSH
24729: LD_OWVAR 2
24733: PPUSH
24734: LD_INT 0
24736: PPUSH
24737: CALL_OW 324
24741: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24742: LD_EXP 58
24746: PUSH
24747: LD_EXP 69
24751: AND
24752: IFFALSE 24933
24754: GO 24756
24756: DISABLE
24757: LD_INT 0
24759: PPUSH
24760: PPUSH
24761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24762: LD_ADDR_VAR 0 2
24766: PUSH
24767: LD_INT 22
24769: PUSH
24770: LD_OWVAR 2
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 33
24781: PUSH
24782: LD_INT 3
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PPUSH
24793: CALL_OW 69
24797: ST_TO_ADDR
// if not tmp then
24798: LD_VAR 0 2
24802: NOT
24803: IFFALSE 24807
// exit ;
24805: GO 24933
// side := 0 ;
24807: LD_ADDR_VAR 0 3
24811: PUSH
24812: LD_INT 0
24814: ST_TO_ADDR
// for i := 1 to 8 do
24815: LD_ADDR_VAR 0 1
24819: PUSH
24820: DOUBLE
24821: LD_INT 1
24823: DEC
24824: ST_TO_ADDR
24825: LD_INT 8
24827: PUSH
24828: FOR_TO
24829: IFFALSE 24877
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24831: LD_OWVAR 2
24835: PUSH
24836: LD_VAR 0 1
24840: NONEQUAL
24841: PUSH
24842: LD_OWVAR 2
24846: PPUSH
24847: LD_VAR 0 1
24851: PPUSH
24852: CALL_OW 81
24856: PUSH
24857: LD_INT 2
24859: EQUAL
24860: AND
24861: IFFALSE 24875
// begin side := i ;
24863: LD_ADDR_VAR 0 3
24867: PUSH
24868: LD_VAR 0 1
24872: ST_TO_ADDR
// break ;
24873: GO 24877
// end ;
24875: GO 24828
24877: POP
24878: POP
// if not side then
24879: LD_VAR 0 3
24883: NOT
24884: IFFALSE 24888
// exit ;
24886: GO 24933
// for i := 1 to tmp do
24888: LD_ADDR_VAR 0 1
24892: PUSH
24893: DOUBLE
24894: LD_INT 1
24896: DEC
24897: ST_TO_ADDR
24898: LD_VAR 0 2
24902: PUSH
24903: FOR_TO
24904: IFFALSE 24931
// if Prob ( 60 ) then
24906: LD_INT 60
24908: PPUSH
24909: CALL_OW 13
24913: IFFALSE 24929
// SetSide ( i , side ) ;
24915: LD_VAR 0 1
24919: PPUSH
24920: LD_VAR 0 3
24924: PPUSH
24925: CALL_OW 235
24929: GO 24903
24931: POP
24932: POP
// end ;
24933: PPOPN 3
24935: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24936: LD_EXP 58
24940: PUSH
24941: LD_EXP 71
24945: AND
24946: IFFALSE 25065
24948: GO 24950
24950: DISABLE
24951: LD_INT 0
24953: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24954: LD_ADDR_VAR 0 1
24958: PUSH
24959: LD_INT 22
24961: PUSH
24962: LD_OWVAR 2
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 21
24973: PUSH
24974: LD_INT 1
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 3
24983: PUSH
24984: LD_INT 23
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: LIST
25002: PPUSH
25003: CALL_OW 69
25007: PUSH
25008: FOR_IN
25009: IFFALSE 25063
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25011: LD_VAR 0 1
25015: PPUSH
25016: CALL_OW 257
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: LD_INT 2
25026: PUSH
25027: LD_INT 3
25029: PUSH
25030: LD_INT 4
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: IN
25039: IFFALSE 25061
// SetClass ( un , rand ( 1 , 4 ) ) ;
25041: LD_VAR 0 1
25045: PPUSH
25046: LD_INT 1
25048: PPUSH
25049: LD_INT 4
25051: PPUSH
25052: CALL_OW 12
25056: PPUSH
25057: CALL_OW 336
25061: GO 25008
25063: POP
25064: POP
// end ;
25065: PPOPN 1
25067: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25068: LD_EXP 58
25072: PUSH
25073: LD_EXP 70
25077: AND
25078: IFFALSE 25157
25080: GO 25082
25082: DISABLE
25083: LD_INT 0
25085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25086: LD_ADDR_VAR 0 1
25090: PUSH
25091: LD_INT 22
25093: PUSH
25094: LD_OWVAR 2
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 21
25105: PUSH
25106: LD_INT 3
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PPUSH
25117: CALL_OW 69
25121: ST_TO_ADDR
// if not tmp then
25122: LD_VAR 0 1
25126: NOT
25127: IFFALSE 25131
// exit ;
25129: GO 25157
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25131: LD_VAR 0 1
25135: PUSH
25136: LD_INT 1
25138: PPUSH
25139: LD_VAR 0 1
25143: PPUSH
25144: CALL_OW 12
25148: ARRAY
25149: PPUSH
25150: LD_INT 100
25152: PPUSH
25153: CALL_OW 234
// end ;
25157: PPOPN 1
25159: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25160: LD_EXP 58
25164: PUSH
25165: LD_EXP 72
25169: AND
25170: IFFALSE 25268
25172: GO 25174
25174: DISABLE
25175: LD_INT 0
25177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25178: LD_ADDR_VAR 0 1
25182: PUSH
25183: LD_INT 22
25185: PUSH
25186: LD_OWVAR 2
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 21
25197: PUSH
25198: LD_INT 1
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PPUSH
25209: CALL_OW 69
25213: ST_TO_ADDR
// if not tmp then
25214: LD_VAR 0 1
25218: NOT
25219: IFFALSE 25223
// exit ;
25221: GO 25268
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25223: LD_VAR 0 1
25227: PUSH
25228: LD_INT 1
25230: PPUSH
25231: LD_VAR 0 1
25235: PPUSH
25236: CALL_OW 12
25240: ARRAY
25241: PPUSH
25242: LD_INT 1
25244: PPUSH
25245: LD_INT 4
25247: PPUSH
25248: CALL_OW 12
25252: PPUSH
25253: LD_INT 3000
25255: PPUSH
25256: LD_INT 9000
25258: PPUSH
25259: CALL_OW 12
25263: PPUSH
25264: CALL_OW 492
// end ;
25268: PPOPN 1
25270: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25271: LD_EXP 58
25275: PUSH
25276: LD_EXP 73
25280: AND
25281: IFFALSE 25301
25283: GO 25285
25285: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25286: LD_INT 1
25288: PPUSH
25289: LD_OWVAR 2
25293: PPUSH
25294: LD_INT 0
25296: PPUSH
25297: CALL_OW 324
25301: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25302: LD_EXP 58
25306: PUSH
25307: LD_EXP 74
25311: AND
25312: IFFALSE 25395
25314: GO 25316
25316: DISABLE
25317: LD_INT 0
25319: PPUSH
25320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25321: LD_ADDR_VAR 0 2
25325: PUSH
25326: LD_INT 22
25328: PUSH
25329: LD_OWVAR 2
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 21
25340: PUSH
25341: LD_INT 3
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PPUSH
25352: CALL_OW 69
25356: ST_TO_ADDR
// if not tmp then
25357: LD_VAR 0 2
25361: NOT
25362: IFFALSE 25366
// exit ;
25364: GO 25395
// for i in tmp do
25366: LD_ADDR_VAR 0 1
25370: PUSH
25371: LD_VAR 0 2
25375: PUSH
25376: FOR_IN
25377: IFFALSE 25393
// SetBLevel ( i , 10 ) ;
25379: LD_VAR 0 1
25383: PPUSH
25384: LD_INT 10
25386: PPUSH
25387: CALL_OW 241
25391: GO 25376
25393: POP
25394: POP
// end ;
25395: PPOPN 2
25397: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25398: LD_EXP 58
25402: PUSH
25403: LD_EXP 75
25407: AND
25408: IFFALSE 25519
25410: GO 25412
25412: DISABLE
25413: LD_INT 0
25415: PPUSH
25416: PPUSH
25417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25418: LD_ADDR_VAR 0 3
25422: PUSH
25423: LD_INT 22
25425: PUSH
25426: LD_OWVAR 2
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 25
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PPUSH
25449: CALL_OW 69
25453: ST_TO_ADDR
// if not tmp then
25454: LD_VAR 0 3
25458: NOT
25459: IFFALSE 25463
// exit ;
25461: GO 25519
// un := tmp [ rand ( 1 , tmp ) ] ;
25463: LD_ADDR_VAR 0 2
25467: PUSH
25468: LD_VAR 0 3
25472: PUSH
25473: LD_INT 1
25475: PPUSH
25476: LD_VAR 0 3
25480: PPUSH
25481: CALL_OW 12
25485: ARRAY
25486: ST_TO_ADDR
// if Crawls ( un ) then
25487: LD_VAR 0 2
25491: PPUSH
25492: CALL_OW 318
25496: IFFALSE 25507
// ComWalk ( un ) ;
25498: LD_VAR 0 2
25502: PPUSH
25503: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25507: LD_VAR 0 2
25511: PPUSH
25512: LD_INT 5
25514: PPUSH
25515: CALL_OW 336
// end ;
25519: PPOPN 3
25521: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25522: LD_EXP 58
25526: PUSH
25527: LD_EXP 76
25531: AND
25532: PUSH
25533: LD_OWVAR 67
25537: PUSH
25538: LD_INT 3
25540: LESS
25541: AND
25542: IFFALSE 25561
25544: GO 25546
25546: DISABLE
// Difficulty := Difficulty + 1 ;
25547: LD_ADDR_OWVAR 67
25551: PUSH
25552: LD_OWVAR 67
25556: PUSH
25557: LD_INT 1
25559: PLUS
25560: ST_TO_ADDR
25561: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25562: LD_EXP 58
25566: PUSH
25567: LD_EXP 77
25571: AND
25572: IFFALSE 25675
25574: GO 25576
25576: DISABLE
25577: LD_INT 0
25579: PPUSH
// begin for i := 1 to 5 do
25580: LD_ADDR_VAR 0 1
25584: PUSH
25585: DOUBLE
25586: LD_INT 1
25588: DEC
25589: ST_TO_ADDR
25590: LD_INT 5
25592: PUSH
25593: FOR_TO
25594: IFFALSE 25673
// begin uc_nation := nation_nature ;
25596: LD_ADDR_OWVAR 21
25600: PUSH
25601: LD_INT 0
25603: ST_TO_ADDR
// uc_side := 0 ;
25604: LD_ADDR_OWVAR 20
25608: PUSH
25609: LD_INT 0
25611: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25612: LD_ADDR_OWVAR 29
25616: PUSH
25617: LD_INT 12
25619: PUSH
25620: LD_INT 12
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: ST_TO_ADDR
// hc_agressivity := 20 ;
25627: LD_ADDR_OWVAR 35
25631: PUSH
25632: LD_INT 20
25634: ST_TO_ADDR
// hc_class := class_tiger ;
25635: LD_ADDR_OWVAR 28
25639: PUSH
25640: LD_INT 14
25642: ST_TO_ADDR
// hc_gallery :=  ;
25643: LD_ADDR_OWVAR 33
25647: PUSH
25648: LD_STRING 
25650: ST_TO_ADDR
// hc_name :=  ;
25651: LD_ADDR_OWVAR 26
25655: PUSH
25656: LD_STRING 
25658: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25659: CALL_OW 44
25663: PPUSH
25664: LD_INT 0
25666: PPUSH
25667: CALL_OW 51
// end ;
25671: GO 25593
25673: POP
25674: POP
// end ;
25675: PPOPN 1
25677: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25678: LD_EXP 58
25682: PUSH
25683: LD_EXP 78
25687: AND
25688: IFFALSE 25697
25690: GO 25692
25692: DISABLE
// StreamSibBomb ;
25693: CALL 25698 0 0
25697: END
// export function StreamSibBomb ; var i , x , y ; begin
25698: LD_INT 0
25700: PPUSH
25701: PPUSH
25702: PPUSH
25703: PPUSH
// result := false ;
25704: LD_ADDR_VAR 0 1
25708: PUSH
25709: LD_INT 0
25711: ST_TO_ADDR
// for i := 1 to 16 do
25712: LD_ADDR_VAR 0 2
25716: PUSH
25717: DOUBLE
25718: LD_INT 1
25720: DEC
25721: ST_TO_ADDR
25722: LD_INT 16
25724: PUSH
25725: FOR_TO
25726: IFFALSE 25925
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25728: LD_ADDR_VAR 0 3
25732: PUSH
25733: LD_INT 10
25735: PUSH
25736: LD_INT 20
25738: PUSH
25739: LD_INT 30
25741: PUSH
25742: LD_INT 40
25744: PUSH
25745: LD_INT 50
25747: PUSH
25748: LD_INT 60
25750: PUSH
25751: LD_INT 70
25753: PUSH
25754: LD_INT 80
25756: PUSH
25757: LD_INT 90
25759: PUSH
25760: LD_INT 100
25762: PUSH
25763: LD_INT 110
25765: PUSH
25766: LD_INT 120
25768: PUSH
25769: LD_INT 130
25771: PUSH
25772: LD_INT 140
25774: PUSH
25775: LD_INT 150
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: PPUSH
25798: LD_INT 15
25800: PPUSH
25801: CALL_OW 12
25805: ARRAY
25806: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25807: LD_ADDR_VAR 0 4
25811: PUSH
25812: LD_INT 10
25814: PUSH
25815: LD_INT 20
25817: PUSH
25818: LD_INT 30
25820: PUSH
25821: LD_INT 40
25823: PUSH
25824: LD_INT 50
25826: PUSH
25827: LD_INT 60
25829: PUSH
25830: LD_INT 70
25832: PUSH
25833: LD_INT 80
25835: PUSH
25836: LD_INT 90
25838: PUSH
25839: LD_INT 100
25841: PUSH
25842: LD_INT 110
25844: PUSH
25845: LD_INT 120
25847: PUSH
25848: LD_INT 130
25850: PUSH
25851: LD_INT 140
25853: PUSH
25854: LD_INT 150
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 1
25876: PPUSH
25877: LD_INT 15
25879: PPUSH
25880: CALL_OW 12
25884: ARRAY
25885: ST_TO_ADDR
// if ValidHex ( x , y ) then
25886: LD_VAR 0 3
25890: PPUSH
25891: LD_VAR 0 4
25895: PPUSH
25896: CALL_OW 488
25900: IFFALSE 25923
// begin result := [ x , y ] ;
25902: LD_ADDR_VAR 0 1
25906: PUSH
25907: LD_VAR 0 3
25911: PUSH
25912: LD_VAR 0 4
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: ST_TO_ADDR
// break ;
25921: GO 25925
// end ; end ;
25923: GO 25725
25925: POP
25926: POP
// if result then
25927: LD_VAR 0 1
25931: IFFALSE 25991
// begin ToLua ( playSibBomb() ) ;
25933: LD_STRING playSibBomb()
25935: PPUSH
25936: CALL_OW 559
// wait ( 0 0$14 ) ;
25940: LD_INT 490
25942: PPUSH
25943: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25947: LD_VAR 0 1
25951: PUSH
25952: LD_INT 1
25954: ARRAY
25955: PPUSH
25956: LD_VAR 0 1
25960: PUSH
25961: LD_INT 2
25963: ARRAY
25964: PPUSH
25965: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25969: LD_VAR 0 1
25973: PUSH
25974: LD_INT 1
25976: ARRAY
25977: PPUSH
25978: LD_VAR 0 1
25982: PUSH
25983: LD_INT 2
25985: ARRAY
25986: PPUSH
25987: CALL_OW 429
// end ; end ;
25991: LD_VAR 0 1
25995: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25996: LD_EXP 58
26000: PUSH
26001: LD_EXP 80
26005: AND
26006: IFFALSE 26018
26008: GO 26010
26010: DISABLE
// YouLost (  ) ;
26011: LD_STRING 
26013: PPUSH
26014: CALL_OW 104
26018: END
// every 0 0$1 trigger StreamModeActive and sFog do
26019: LD_EXP 58
26023: PUSH
26024: LD_EXP 79
26028: AND
26029: IFFALSE 26043
26031: GO 26033
26033: DISABLE
// FogOff ( your_side ) ;
26034: LD_OWVAR 2
26038: PPUSH
26039: CALL_OW 344
26043: END
// every 0 0$1 trigger StreamModeActive and sSun do
26044: LD_EXP 58
26048: PUSH
26049: LD_EXP 81
26053: AND
26054: IFFALSE 26082
26056: GO 26058
26058: DISABLE
// begin solar_recharge_percent := 0 ;
26059: LD_ADDR_OWVAR 79
26063: PUSH
26064: LD_INT 0
26066: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26067: LD_INT 10500
26069: PPUSH
26070: CALL_OW 67
// solar_recharge_percent := 100 ;
26074: LD_ADDR_OWVAR 79
26078: PUSH
26079: LD_INT 100
26081: ST_TO_ADDR
// end ;
26082: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26083: LD_EXP 58
26087: PUSH
26088: LD_EXP 82
26092: AND
26093: IFFALSE 26332
26095: GO 26097
26097: DISABLE
26098: LD_INT 0
26100: PPUSH
26101: PPUSH
26102: PPUSH
// begin tmp := [ ] ;
26103: LD_ADDR_VAR 0 3
26107: PUSH
26108: EMPTY
26109: ST_TO_ADDR
// for i := 1 to 6 do
26110: LD_ADDR_VAR 0 1
26114: PUSH
26115: DOUBLE
26116: LD_INT 1
26118: DEC
26119: ST_TO_ADDR
26120: LD_INT 6
26122: PUSH
26123: FOR_TO
26124: IFFALSE 26229
// begin uc_nation := nation_nature ;
26126: LD_ADDR_OWVAR 21
26130: PUSH
26131: LD_INT 0
26133: ST_TO_ADDR
// uc_side := 0 ;
26134: LD_ADDR_OWVAR 20
26138: PUSH
26139: LD_INT 0
26141: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26142: LD_ADDR_OWVAR 29
26146: PUSH
26147: LD_INT 12
26149: PUSH
26150: LD_INT 12
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: ST_TO_ADDR
// hc_agressivity := 20 ;
26157: LD_ADDR_OWVAR 35
26161: PUSH
26162: LD_INT 20
26164: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26165: LD_ADDR_OWVAR 28
26169: PUSH
26170: LD_INT 17
26172: ST_TO_ADDR
// hc_gallery :=  ;
26173: LD_ADDR_OWVAR 33
26177: PUSH
26178: LD_STRING 
26180: ST_TO_ADDR
// hc_name :=  ;
26181: LD_ADDR_OWVAR 26
26185: PUSH
26186: LD_STRING 
26188: ST_TO_ADDR
// un := CreateHuman ;
26189: LD_ADDR_VAR 0 2
26193: PUSH
26194: CALL_OW 44
26198: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26199: LD_VAR 0 2
26203: PPUSH
26204: LD_INT 1
26206: PPUSH
26207: CALL_OW 51
// tmp := tmp ^ un ;
26211: LD_ADDR_VAR 0 3
26215: PUSH
26216: LD_VAR 0 3
26220: PUSH
26221: LD_VAR 0 2
26225: ADD
26226: ST_TO_ADDR
// end ;
26227: GO 26123
26229: POP
26230: POP
// repeat wait ( 0 0$1 ) ;
26231: LD_INT 35
26233: PPUSH
26234: CALL_OW 67
// for un in tmp do
26238: LD_ADDR_VAR 0 2
26242: PUSH
26243: LD_VAR 0 3
26247: PUSH
26248: FOR_IN
26249: IFFALSE 26323
// begin if IsDead ( un ) then
26251: LD_VAR 0 2
26255: PPUSH
26256: CALL_OW 301
26260: IFFALSE 26280
// begin tmp := tmp diff un ;
26262: LD_ADDR_VAR 0 3
26266: PUSH
26267: LD_VAR 0 3
26271: PUSH
26272: LD_VAR 0 2
26276: DIFF
26277: ST_TO_ADDR
// continue ;
26278: GO 26248
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26280: LD_VAR 0 2
26284: PPUSH
26285: LD_INT 3
26287: PUSH
26288: LD_INT 22
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PPUSH
26302: CALL_OW 69
26306: PPUSH
26307: LD_VAR 0 2
26311: PPUSH
26312: CALL_OW 74
26316: PPUSH
26317: CALL_OW 115
// end ;
26321: GO 26248
26323: POP
26324: POP
// until not tmp ;
26325: LD_VAR 0 3
26329: NOT
26330: IFFALSE 26231
// end ;
26332: PPOPN 3
26334: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26335: LD_EXP 58
26339: PUSH
26340: LD_EXP 83
26344: AND
26345: IFFALSE 26399
26347: GO 26349
26349: DISABLE
// begin ToLua ( displayTroll(); ) ;
26350: LD_STRING displayTroll();
26352: PPUSH
26353: CALL_OW 559
// wait ( 3 3$00 ) ;
26357: LD_INT 6300
26359: PPUSH
26360: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26364: LD_STRING hideTroll();
26366: PPUSH
26367: CALL_OW 559
// wait ( 1 1$00 ) ;
26371: LD_INT 2100
26373: PPUSH
26374: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26378: LD_STRING displayTroll();
26380: PPUSH
26381: CALL_OW 559
// wait ( 1 1$00 ) ;
26385: LD_INT 2100
26387: PPUSH
26388: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26392: LD_STRING hideTroll();
26394: PPUSH
26395: CALL_OW 559
// end ;
26399: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26400: LD_EXP 58
26404: PUSH
26405: LD_EXP 84
26409: AND
26410: IFFALSE 26473
26412: GO 26414
26414: DISABLE
26415: LD_INT 0
26417: PPUSH
// begin p := 0 ;
26418: LD_ADDR_VAR 0 1
26422: PUSH
26423: LD_INT 0
26425: ST_TO_ADDR
// repeat game_speed := 1 ;
26426: LD_ADDR_OWVAR 65
26430: PUSH
26431: LD_INT 1
26433: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26434: LD_INT 35
26436: PPUSH
26437: CALL_OW 67
// p := p + 1 ;
26441: LD_ADDR_VAR 0 1
26445: PUSH
26446: LD_VAR 0 1
26450: PUSH
26451: LD_INT 1
26453: PLUS
26454: ST_TO_ADDR
// until p >= 60 ;
26455: LD_VAR 0 1
26459: PUSH
26460: LD_INT 60
26462: GREATEREQUAL
26463: IFFALSE 26426
// game_speed := 4 ;
26465: LD_ADDR_OWVAR 65
26469: PUSH
26470: LD_INT 4
26472: ST_TO_ADDR
// end ;
26473: PPOPN 1
26475: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26476: LD_EXP 58
26480: PUSH
26481: LD_EXP 85
26485: AND
26486: IFFALSE 26632
26488: GO 26490
26490: DISABLE
26491: LD_INT 0
26493: PPUSH
26494: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26495: LD_ADDR_VAR 0 1
26499: PUSH
26500: LD_INT 22
26502: PUSH
26503: LD_OWVAR 2
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: LD_INT 30
26517: PUSH
26518: LD_INT 0
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 30
26527: PUSH
26528: LD_INT 1
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PPUSH
26544: CALL_OW 69
26548: ST_TO_ADDR
// if not depot then
26549: LD_VAR 0 1
26553: NOT
26554: IFFALSE 26558
// exit ;
26556: GO 26632
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26558: LD_ADDR_VAR 0 2
26562: PUSH
26563: LD_VAR 0 1
26567: PUSH
26568: LD_INT 1
26570: PPUSH
26571: LD_VAR 0 1
26575: PPUSH
26576: CALL_OW 12
26580: ARRAY
26581: PPUSH
26582: CALL_OW 274
26586: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26587: LD_VAR 0 2
26591: PPUSH
26592: LD_INT 1
26594: PPUSH
26595: LD_INT 0
26597: PPUSH
26598: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26602: LD_VAR 0 2
26606: PPUSH
26607: LD_INT 2
26609: PPUSH
26610: LD_INT 0
26612: PPUSH
26613: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26617: LD_VAR 0 2
26621: PPUSH
26622: LD_INT 3
26624: PPUSH
26625: LD_INT 0
26627: PPUSH
26628: CALL_OW 277
// end ;
26632: PPOPN 2
26634: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26635: LD_EXP 58
26639: PUSH
26640: LD_EXP 86
26644: AND
26645: IFFALSE 26742
26647: GO 26649
26649: DISABLE
26650: LD_INT 0
26652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26653: LD_ADDR_VAR 0 1
26657: PUSH
26658: LD_INT 22
26660: PUSH
26661: LD_OWVAR 2
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 21
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 3
26682: PUSH
26683: LD_INT 23
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: LIST
26701: PPUSH
26702: CALL_OW 69
26706: ST_TO_ADDR
// if not tmp then
26707: LD_VAR 0 1
26711: NOT
26712: IFFALSE 26716
// exit ;
26714: GO 26742
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26716: LD_VAR 0 1
26720: PUSH
26721: LD_INT 1
26723: PPUSH
26724: LD_VAR 0 1
26728: PPUSH
26729: CALL_OW 12
26733: ARRAY
26734: PPUSH
26735: LD_INT 200
26737: PPUSH
26738: CALL_OW 234
// end ;
26742: PPOPN 1
26744: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26745: LD_EXP 58
26749: PUSH
26750: LD_EXP 87
26754: AND
26755: IFFALSE 26834
26757: GO 26759
26759: DISABLE
26760: LD_INT 0
26762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26763: LD_ADDR_VAR 0 1
26767: PUSH
26768: LD_INT 22
26770: PUSH
26771: LD_OWVAR 2
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 21
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PPUSH
26794: CALL_OW 69
26798: ST_TO_ADDR
// if not tmp then
26799: LD_VAR 0 1
26803: NOT
26804: IFFALSE 26808
// exit ;
26806: GO 26834
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26808: LD_VAR 0 1
26812: PUSH
26813: LD_INT 1
26815: PPUSH
26816: LD_VAR 0 1
26820: PPUSH
26821: CALL_OW 12
26825: ARRAY
26826: PPUSH
26827: LD_INT 60
26829: PPUSH
26830: CALL_OW 234
// end ;
26834: PPOPN 1
26836: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26837: LD_EXP 58
26841: PUSH
26842: LD_EXP 88
26846: AND
26847: IFFALSE 26946
26849: GO 26851
26851: DISABLE
26852: LD_INT 0
26854: PPUSH
26855: PPUSH
// begin enable ;
26856: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26857: LD_ADDR_VAR 0 1
26861: PUSH
26862: LD_INT 22
26864: PUSH
26865: LD_OWVAR 2
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 61
26876: PUSH
26877: EMPTY
26878: LIST
26879: PUSH
26880: LD_INT 33
26882: PUSH
26883: LD_INT 2
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: PPUSH
26895: CALL_OW 69
26899: ST_TO_ADDR
// if not tmp then
26900: LD_VAR 0 1
26904: NOT
26905: IFFALSE 26909
// exit ;
26907: GO 26946
// for i in tmp do
26909: LD_ADDR_VAR 0 2
26913: PUSH
26914: LD_VAR 0 1
26918: PUSH
26919: FOR_IN
26920: IFFALSE 26944
// if IsControledBy ( i ) then
26922: LD_VAR 0 2
26926: PPUSH
26927: CALL_OW 312
26931: IFFALSE 26942
// ComUnlink ( i ) ;
26933: LD_VAR 0 2
26937: PPUSH
26938: CALL_OW 136
26942: GO 26919
26944: POP
26945: POP
// end ;
26946: PPOPN 2
26948: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26949: LD_EXP 58
26953: PUSH
26954: LD_EXP 89
26958: AND
26959: IFFALSE 27099
26961: GO 26963
26963: DISABLE
26964: LD_INT 0
26966: PPUSH
26967: PPUSH
// begin ToLua ( displayPowell(); ) ;
26968: LD_STRING displayPowell();
26970: PPUSH
26971: CALL_OW 559
// uc_side := 0 ;
26975: LD_ADDR_OWVAR 20
26979: PUSH
26980: LD_INT 0
26982: ST_TO_ADDR
// uc_nation := 2 ;
26983: LD_ADDR_OWVAR 21
26987: PUSH
26988: LD_INT 2
26990: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26991: LD_ADDR_OWVAR 37
26995: PUSH
26996: LD_INT 14
26998: ST_TO_ADDR
// vc_engine := engine_siberite ;
26999: LD_ADDR_OWVAR 39
27003: PUSH
27004: LD_INT 3
27006: ST_TO_ADDR
// vc_control := control_apeman ;
27007: LD_ADDR_OWVAR 38
27011: PUSH
27012: LD_INT 5
27014: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27015: LD_ADDR_OWVAR 40
27019: PUSH
27020: LD_INT 29
27022: ST_TO_ADDR
// un := CreateVehicle ;
27023: LD_ADDR_VAR 0 2
27027: PUSH
27028: CALL_OW 45
27032: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27033: LD_VAR 0 2
27037: PPUSH
27038: LD_INT 1
27040: PPUSH
27041: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27045: LD_INT 35
27047: PPUSH
27048: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27052: LD_VAR 0 2
27056: PPUSH
27057: LD_INT 22
27059: PUSH
27060: LD_OWVAR 2
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PPUSH
27069: CALL_OW 69
27073: PPUSH
27074: LD_VAR 0 2
27078: PPUSH
27079: CALL_OW 74
27083: PPUSH
27084: CALL_OW 115
// until IsDead ( un ) ;
27088: LD_VAR 0 2
27092: PPUSH
27093: CALL_OW 301
27097: IFFALSE 27045
// end ;
27099: PPOPN 2
27101: END
// every 0 0$1 trigger StreamModeActive and sStu do
27102: LD_EXP 58
27106: PUSH
27107: LD_EXP 97
27111: AND
27112: IFFALSE 27128
27114: GO 27116
27116: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27117: LD_STRING displayStucuk();
27119: PPUSH
27120: CALL_OW 559
// ResetFog ;
27124: CALL_OW 335
// end ;
27128: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27129: LD_EXP 58
27133: PUSH
27134: LD_EXP 90
27138: AND
27139: IFFALSE 27280
27141: GO 27143
27143: DISABLE
27144: LD_INT 0
27146: PPUSH
27147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27148: LD_ADDR_VAR 0 2
27152: PUSH
27153: LD_INT 22
27155: PUSH
27156: LD_OWVAR 2
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 21
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PPUSH
27179: CALL_OW 69
27183: ST_TO_ADDR
// if not tmp then
27184: LD_VAR 0 2
27188: NOT
27189: IFFALSE 27193
// exit ;
27191: GO 27280
// un := tmp [ rand ( 1 , tmp ) ] ;
27193: LD_ADDR_VAR 0 1
27197: PUSH
27198: LD_VAR 0 2
27202: PUSH
27203: LD_INT 1
27205: PPUSH
27206: LD_VAR 0 2
27210: PPUSH
27211: CALL_OW 12
27215: ARRAY
27216: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27217: LD_VAR 0 1
27221: PPUSH
27222: LD_INT 0
27224: PPUSH
27225: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27229: LD_VAR 0 1
27233: PPUSH
27234: LD_OWVAR 3
27238: PUSH
27239: LD_VAR 0 1
27243: DIFF
27244: PPUSH
27245: LD_VAR 0 1
27249: PPUSH
27250: CALL_OW 74
27254: PPUSH
27255: CALL_OW 115
// wait ( 0 0$20 ) ;
27259: LD_INT 700
27261: PPUSH
27262: CALL_OW 67
// SetSide ( un , your_side ) ;
27266: LD_VAR 0 1
27270: PPUSH
27271: LD_OWVAR 2
27275: PPUSH
27276: CALL_OW 235
// end ;
27280: PPOPN 2
27282: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27283: LD_EXP 58
27287: PUSH
27288: LD_EXP 91
27292: AND
27293: IFFALSE 27399
27295: GO 27297
27297: DISABLE
27298: LD_INT 0
27300: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27301: LD_ADDR_VAR 0 1
27305: PUSH
27306: LD_INT 22
27308: PUSH
27309: LD_OWVAR 2
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 2
27320: PUSH
27321: LD_INT 30
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 30
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: LIST
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PPUSH
27350: CALL_OW 69
27354: ST_TO_ADDR
// if not depot then
27355: LD_VAR 0 1
27359: NOT
27360: IFFALSE 27364
// exit ;
27362: GO 27399
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27364: LD_VAR 0 1
27368: PUSH
27369: LD_INT 1
27371: ARRAY
27372: PPUSH
27373: CALL_OW 250
27377: PPUSH
27378: LD_VAR 0 1
27382: PUSH
27383: LD_INT 1
27385: ARRAY
27386: PPUSH
27387: CALL_OW 251
27391: PPUSH
27392: LD_INT 70
27394: PPUSH
27395: CALL_OW 495
// end ;
27399: PPOPN 1
27401: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27402: LD_EXP 58
27406: PUSH
27407: LD_EXP 92
27411: AND
27412: IFFALSE 27623
27414: GO 27416
27416: DISABLE
27417: LD_INT 0
27419: PPUSH
27420: PPUSH
27421: PPUSH
27422: PPUSH
27423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27424: LD_ADDR_VAR 0 5
27428: PUSH
27429: LD_INT 22
27431: PUSH
27432: LD_OWVAR 2
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 21
27443: PUSH
27444: LD_INT 1
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PPUSH
27455: CALL_OW 69
27459: ST_TO_ADDR
// if not tmp then
27460: LD_VAR 0 5
27464: NOT
27465: IFFALSE 27469
// exit ;
27467: GO 27623
// for i in tmp do
27469: LD_ADDR_VAR 0 1
27473: PUSH
27474: LD_VAR 0 5
27478: PUSH
27479: FOR_IN
27480: IFFALSE 27621
// begin d := rand ( 0 , 5 ) ;
27482: LD_ADDR_VAR 0 4
27486: PUSH
27487: LD_INT 0
27489: PPUSH
27490: LD_INT 5
27492: PPUSH
27493: CALL_OW 12
27497: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27498: LD_ADDR_VAR 0 2
27502: PUSH
27503: LD_VAR 0 1
27507: PPUSH
27508: CALL_OW 250
27512: PPUSH
27513: LD_VAR 0 4
27517: PPUSH
27518: LD_INT 3
27520: PPUSH
27521: LD_INT 12
27523: PPUSH
27524: CALL_OW 12
27528: PPUSH
27529: CALL_OW 272
27533: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27534: LD_ADDR_VAR 0 3
27538: PUSH
27539: LD_VAR 0 1
27543: PPUSH
27544: CALL_OW 251
27548: PPUSH
27549: LD_VAR 0 4
27553: PPUSH
27554: LD_INT 3
27556: PPUSH
27557: LD_INT 12
27559: PPUSH
27560: CALL_OW 12
27564: PPUSH
27565: CALL_OW 273
27569: ST_TO_ADDR
// if ValidHex ( x , y ) then
27570: LD_VAR 0 2
27574: PPUSH
27575: LD_VAR 0 3
27579: PPUSH
27580: CALL_OW 488
27584: IFFALSE 27619
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27586: LD_VAR 0 1
27590: PPUSH
27591: LD_VAR 0 2
27595: PPUSH
27596: LD_VAR 0 3
27600: PPUSH
27601: LD_INT 3
27603: PPUSH
27604: LD_INT 6
27606: PPUSH
27607: CALL_OW 12
27611: PPUSH
27612: LD_INT 1
27614: PPUSH
27615: CALL_OW 483
// end ;
27619: GO 27479
27621: POP
27622: POP
// end ;
27623: PPOPN 5
27625: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27626: LD_EXP 58
27630: PUSH
27631: LD_EXP 93
27635: AND
27636: IFFALSE 27730
27638: GO 27640
27640: DISABLE
27641: LD_INT 0
27643: PPUSH
27644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27645: LD_ADDR_VAR 0 2
27649: PUSH
27650: LD_INT 22
27652: PUSH
27653: LD_OWVAR 2
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 32
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 21
27674: PUSH
27675: LD_INT 2
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: PPUSH
27687: CALL_OW 69
27691: ST_TO_ADDR
// if not tmp then
27692: LD_VAR 0 2
27696: NOT
27697: IFFALSE 27701
// exit ;
27699: GO 27730
// for i in tmp do
27701: LD_ADDR_VAR 0 1
27705: PUSH
27706: LD_VAR 0 2
27710: PUSH
27711: FOR_IN
27712: IFFALSE 27728
// SetFuel ( i , 0 ) ;
27714: LD_VAR 0 1
27718: PPUSH
27719: LD_INT 0
27721: PPUSH
27722: CALL_OW 240
27726: GO 27711
27728: POP
27729: POP
// end ;
27730: PPOPN 2
27732: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27733: LD_EXP 58
27737: PUSH
27738: LD_EXP 94
27742: AND
27743: IFFALSE 27809
27745: GO 27747
27747: DISABLE
27748: LD_INT 0
27750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27751: LD_ADDR_VAR 0 1
27755: PUSH
27756: LD_INT 22
27758: PUSH
27759: LD_OWVAR 2
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 30
27770: PUSH
27771: LD_INT 29
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PPUSH
27782: CALL_OW 69
27786: ST_TO_ADDR
// if not tmp then
27787: LD_VAR 0 1
27791: NOT
27792: IFFALSE 27796
// exit ;
27794: GO 27809
// DestroyUnit ( tmp [ 1 ] ) ;
27796: LD_VAR 0 1
27800: PUSH
27801: LD_INT 1
27803: ARRAY
27804: PPUSH
27805: CALL_OW 65
// end ;
27809: PPOPN 1
27811: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27812: LD_EXP 58
27816: PUSH
27817: LD_EXP 96
27821: AND
27822: IFFALSE 27951
27824: GO 27826
27826: DISABLE
27827: LD_INT 0
27829: PPUSH
// begin uc_side := 0 ;
27830: LD_ADDR_OWVAR 20
27834: PUSH
27835: LD_INT 0
27837: ST_TO_ADDR
// uc_nation := nation_arabian ;
27838: LD_ADDR_OWVAR 21
27842: PUSH
27843: LD_INT 2
27845: ST_TO_ADDR
// hc_gallery :=  ;
27846: LD_ADDR_OWVAR 33
27850: PUSH
27851: LD_STRING 
27853: ST_TO_ADDR
// hc_name :=  ;
27854: LD_ADDR_OWVAR 26
27858: PUSH
27859: LD_STRING 
27861: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27862: LD_INT 1
27864: PPUSH
27865: LD_INT 11
27867: PPUSH
27868: LD_INT 10
27870: PPUSH
27871: CALL_OW 380
// un := CreateHuman ;
27875: LD_ADDR_VAR 0 1
27879: PUSH
27880: CALL_OW 44
27884: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27885: LD_VAR 0 1
27889: PPUSH
27890: LD_INT 1
27892: PPUSH
27893: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27897: LD_INT 35
27899: PPUSH
27900: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27904: LD_VAR 0 1
27908: PPUSH
27909: LD_INT 22
27911: PUSH
27912: LD_OWVAR 2
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PPUSH
27921: CALL_OW 69
27925: PPUSH
27926: LD_VAR 0 1
27930: PPUSH
27931: CALL_OW 74
27935: PPUSH
27936: CALL_OW 115
// until IsDead ( un ) ;
27940: LD_VAR 0 1
27944: PPUSH
27945: CALL_OW 301
27949: IFFALSE 27897
// end ;
27951: PPOPN 1
27953: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27954: LD_EXP 58
27958: PUSH
27959: LD_EXP 98
27963: AND
27964: IFFALSE 27976
27966: GO 27968
27968: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27969: LD_STRING earthquake(getX(game), 0, 32)
27971: PPUSH
27972: CALL_OW 559
27976: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27977: LD_EXP 58
27981: PUSH
27982: LD_EXP 99
27986: AND
27987: IFFALSE 28078
27989: GO 27991
27991: DISABLE
27992: LD_INT 0
27994: PPUSH
// begin enable ;
27995: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27996: LD_ADDR_VAR 0 1
28000: PUSH
28001: LD_INT 22
28003: PUSH
28004: LD_OWVAR 2
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 21
28015: PUSH
28016: LD_INT 2
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 33
28025: PUSH
28026: LD_INT 3
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: PPUSH
28038: CALL_OW 69
28042: ST_TO_ADDR
// if not tmp then
28043: LD_VAR 0 1
28047: NOT
28048: IFFALSE 28052
// exit ;
28050: GO 28078
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28052: LD_VAR 0 1
28056: PUSH
28057: LD_INT 1
28059: PPUSH
28060: LD_VAR 0 1
28064: PPUSH
28065: CALL_OW 12
28069: ARRAY
28070: PPUSH
28071: LD_INT 1
28073: PPUSH
28074: CALL_OW 234
// end ;
28078: PPOPN 1
28080: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28081: LD_EXP 58
28085: PUSH
28086: LD_EXP 100
28090: AND
28091: IFFALSE 28232
28093: GO 28095
28095: DISABLE
28096: LD_INT 0
28098: PPUSH
28099: PPUSH
28100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28101: LD_ADDR_VAR 0 3
28105: PUSH
28106: LD_INT 22
28108: PUSH
28109: LD_OWVAR 2
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 25
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PPUSH
28132: CALL_OW 69
28136: ST_TO_ADDR
// if not tmp then
28137: LD_VAR 0 3
28141: NOT
28142: IFFALSE 28146
// exit ;
28144: GO 28232
// un := tmp [ rand ( 1 , tmp ) ] ;
28146: LD_ADDR_VAR 0 2
28150: PUSH
28151: LD_VAR 0 3
28155: PUSH
28156: LD_INT 1
28158: PPUSH
28159: LD_VAR 0 3
28163: PPUSH
28164: CALL_OW 12
28168: ARRAY
28169: ST_TO_ADDR
// if Crawls ( un ) then
28170: LD_VAR 0 2
28174: PPUSH
28175: CALL_OW 318
28179: IFFALSE 28190
// ComWalk ( un ) ;
28181: LD_VAR 0 2
28185: PPUSH
28186: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28190: LD_VAR 0 2
28194: PPUSH
28195: LD_INT 9
28197: PPUSH
28198: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28202: LD_INT 28
28204: PPUSH
28205: LD_OWVAR 2
28209: PPUSH
28210: LD_INT 2
28212: PPUSH
28213: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28217: LD_INT 29
28219: PPUSH
28220: LD_OWVAR 2
28224: PPUSH
28225: LD_INT 2
28227: PPUSH
28228: CALL_OW 322
// end ;
28232: PPOPN 3
28234: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28235: LD_EXP 58
28239: PUSH
28240: LD_EXP 101
28244: AND
28245: IFFALSE 28356
28247: GO 28249
28249: DISABLE
28250: LD_INT 0
28252: PPUSH
28253: PPUSH
28254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28255: LD_ADDR_VAR 0 3
28259: PUSH
28260: LD_INT 22
28262: PUSH
28263: LD_OWVAR 2
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 25
28274: PUSH
28275: LD_INT 1
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PPUSH
28286: CALL_OW 69
28290: ST_TO_ADDR
// if not tmp then
28291: LD_VAR 0 3
28295: NOT
28296: IFFALSE 28300
// exit ;
28298: GO 28356
// un := tmp [ rand ( 1 , tmp ) ] ;
28300: LD_ADDR_VAR 0 2
28304: PUSH
28305: LD_VAR 0 3
28309: PUSH
28310: LD_INT 1
28312: PPUSH
28313: LD_VAR 0 3
28317: PPUSH
28318: CALL_OW 12
28322: ARRAY
28323: ST_TO_ADDR
// if Crawls ( un ) then
28324: LD_VAR 0 2
28328: PPUSH
28329: CALL_OW 318
28333: IFFALSE 28344
// ComWalk ( un ) ;
28335: LD_VAR 0 2
28339: PPUSH
28340: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28344: LD_VAR 0 2
28348: PPUSH
28349: LD_INT 8
28351: PPUSH
28352: CALL_OW 336
// end ;
28356: PPOPN 3
28358: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28359: LD_EXP 58
28363: PUSH
28364: LD_EXP 102
28368: AND
28369: IFFALSE 28513
28371: GO 28373
28373: DISABLE
28374: LD_INT 0
28376: PPUSH
28377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28378: LD_ADDR_VAR 0 2
28382: PUSH
28383: LD_INT 22
28385: PUSH
28386: LD_OWVAR 2
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 21
28397: PUSH
28398: LD_INT 2
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 2
28407: PUSH
28408: LD_INT 34
28410: PUSH
28411: LD_INT 12
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 34
28420: PUSH
28421: LD_INT 51
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 34
28430: PUSH
28431: LD_INT 32
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: LIST
28448: PPUSH
28449: CALL_OW 69
28453: ST_TO_ADDR
// if not tmp then
28454: LD_VAR 0 2
28458: NOT
28459: IFFALSE 28463
// exit ;
28461: GO 28513
// for i in tmp do
28463: LD_ADDR_VAR 0 1
28467: PUSH
28468: LD_VAR 0 2
28472: PUSH
28473: FOR_IN
28474: IFFALSE 28511
// if GetCargo ( i , mat_artifact ) = 0 then
28476: LD_VAR 0 1
28480: PPUSH
28481: LD_INT 4
28483: PPUSH
28484: CALL_OW 289
28488: PUSH
28489: LD_INT 0
28491: EQUAL
28492: IFFALSE 28509
// SetCargo ( i , mat_siberit , 100 ) ;
28494: LD_VAR 0 1
28498: PPUSH
28499: LD_INT 3
28501: PPUSH
28502: LD_INT 100
28504: PPUSH
28505: CALL_OW 290
28509: GO 28473
28511: POP
28512: POP
// end ;
28513: PPOPN 2
28515: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28516: LD_EXP 58
28520: PUSH
28521: LD_EXP 103
28525: AND
28526: IFFALSE 28709
28528: GO 28530
28530: DISABLE
28531: LD_INT 0
28533: PPUSH
28534: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28535: LD_ADDR_VAR 0 2
28539: PUSH
28540: LD_INT 22
28542: PUSH
28543: LD_OWVAR 2
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PPUSH
28552: CALL_OW 69
28556: ST_TO_ADDR
// if not tmp then
28557: LD_VAR 0 2
28561: NOT
28562: IFFALSE 28566
// exit ;
28564: GO 28709
// for i := 1 to 2 do
28566: LD_ADDR_VAR 0 1
28570: PUSH
28571: DOUBLE
28572: LD_INT 1
28574: DEC
28575: ST_TO_ADDR
28576: LD_INT 2
28578: PUSH
28579: FOR_TO
28580: IFFALSE 28707
// begin uc_side := your_side ;
28582: LD_ADDR_OWVAR 20
28586: PUSH
28587: LD_OWVAR 2
28591: ST_TO_ADDR
// uc_nation := nation_american ;
28592: LD_ADDR_OWVAR 21
28596: PUSH
28597: LD_INT 1
28599: ST_TO_ADDR
// vc_chassis := us_morphling ;
28600: LD_ADDR_OWVAR 37
28604: PUSH
28605: LD_INT 5
28607: ST_TO_ADDR
// vc_engine := engine_siberite ;
28608: LD_ADDR_OWVAR 39
28612: PUSH
28613: LD_INT 3
28615: ST_TO_ADDR
// vc_control := control_computer ;
28616: LD_ADDR_OWVAR 38
28620: PUSH
28621: LD_INT 3
28623: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28624: LD_ADDR_OWVAR 40
28628: PUSH
28629: LD_INT 10
28631: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28632: LD_VAR 0 2
28636: PUSH
28637: LD_INT 1
28639: ARRAY
28640: PPUSH
28641: CALL_OW 310
28645: NOT
28646: IFFALSE 28693
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28648: CALL_OW 45
28652: PPUSH
28653: LD_VAR 0 2
28657: PUSH
28658: LD_INT 1
28660: ARRAY
28661: PPUSH
28662: CALL_OW 250
28666: PPUSH
28667: LD_VAR 0 2
28671: PUSH
28672: LD_INT 1
28674: ARRAY
28675: PPUSH
28676: CALL_OW 251
28680: PPUSH
28681: LD_INT 12
28683: PPUSH
28684: LD_INT 1
28686: PPUSH
28687: CALL_OW 50
28691: GO 28705
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28693: CALL_OW 45
28697: PPUSH
28698: LD_INT 1
28700: PPUSH
28701: CALL_OW 51
// end ;
28705: GO 28579
28707: POP
28708: POP
// end ;
28709: PPOPN 2
28711: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28712: LD_EXP 58
28716: PUSH
28717: LD_EXP 104
28721: AND
28722: IFFALSE 28944
28724: GO 28726
28726: DISABLE
28727: LD_INT 0
28729: PPUSH
28730: PPUSH
28731: PPUSH
28732: PPUSH
28733: PPUSH
28734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28735: LD_ADDR_VAR 0 6
28739: PUSH
28740: LD_INT 22
28742: PUSH
28743: LD_OWVAR 2
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 21
28754: PUSH
28755: LD_INT 1
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 3
28764: PUSH
28765: LD_INT 23
28767: PUSH
28768: LD_INT 0
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: PPUSH
28784: CALL_OW 69
28788: ST_TO_ADDR
// if not tmp then
28789: LD_VAR 0 6
28793: NOT
28794: IFFALSE 28798
// exit ;
28796: GO 28944
// s1 := rand ( 1 , 4 ) ;
28798: LD_ADDR_VAR 0 2
28802: PUSH
28803: LD_INT 1
28805: PPUSH
28806: LD_INT 4
28808: PPUSH
28809: CALL_OW 12
28813: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28814: LD_ADDR_VAR 0 4
28818: PUSH
28819: LD_VAR 0 6
28823: PUSH
28824: LD_INT 1
28826: ARRAY
28827: PPUSH
28828: LD_VAR 0 2
28832: PPUSH
28833: CALL_OW 259
28837: ST_TO_ADDR
// if s1 = 1 then
28838: LD_VAR 0 2
28842: PUSH
28843: LD_INT 1
28845: EQUAL
28846: IFFALSE 28866
// s2 := rand ( 2 , 4 ) else
28848: LD_ADDR_VAR 0 3
28852: PUSH
28853: LD_INT 2
28855: PPUSH
28856: LD_INT 4
28858: PPUSH
28859: CALL_OW 12
28863: ST_TO_ADDR
28864: GO 28874
// s2 := 1 ;
28866: LD_ADDR_VAR 0 3
28870: PUSH
28871: LD_INT 1
28873: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28874: LD_ADDR_VAR 0 5
28878: PUSH
28879: LD_VAR 0 6
28883: PUSH
28884: LD_INT 1
28886: ARRAY
28887: PPUSH
28888: LD_VAR 0 3
28892: PPUSH
28893: CALL_OW 259
28897: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28898: LD_VAR 0 6
28902: PUSH
28903: LD_INT 1
28905: ARRAY
28906: PPUSH
28907: LD_VAR 0 2
28911: PPUSH
28912: LD_VAR 0 5
28916: PPUSH
28917: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28921: LD_VAR 0 6
28925: PUSH
28926: LD_INT 1
28928: ARRAY
28929: PPUSH
28930: LD_VAR 0 3
28934: PPUSH
28935: LD_VAR 0 4
28939: PPUSH
28940: CALL_OW 237
// end ;
28944: PPOPN 6
28946: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28947: LD_EXP 58
28951: PUSH
28952: LD_EXP 105
28956: AND
28957: IFFALSE 29036
28959: GO 28961
28961: DISABLE
28962: LD_INT 0
28964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28965: LD_ADDR_VAR 0 1
28969: PUSH
28970: LD_INT 22
28972: PUSH
28973: LD_OWVAR 2
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 30
28984: PUSH
28985: LD_INT 3
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PPUSH
28996: CALL_OW 69
29000: ST_TO_ADDR
// if not tmp then
29001: LD_VAR 0 1
29005: NOT
29006: IFFALSE 29010
// exit ;
29008: GO 29036
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29010: LD_VAR 0 1
29014: PUSH
29015: LD_INT 1
29017: PPUSH
29018: LD_VAR 0 1
29022: PPUSH
29023: CALL_OW 12
29027: ARRAY
29028: PPUSH
29029: LD_INT 1
29031: PPUSH
29032: CALL_OW 234
// end ;
29036: PPOPN 1
29038: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29039: LD_EXP 58
29043: PUSH
29044: LD_EXP 106
29048: AND
29049: IFFALSE 29161
29051: GO 29053
29053: DISABLE
29054: LD_INT 0
29056: PPUSH
29057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29058: LD_ADDR_VAR 0 2
29062: PUSH
29063: LD_INT 22
29065: PUSH
29066: LD_OWVAR 2
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 2
29077: PUSH
29078: LD_INT 30
29080: PUSH
29081: LD_INT 27
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 30
29090: PUSH
29091: LD_INT 26
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 30
29100: PUSH
29101: LD_INT 28
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PPUSH
29118: CALL_OW 69
29122: ST_TO_ADDR
// if not tmp then
29123: LD_VAR 0 2
29127: NOT
29128: IFFALSE 29132
// exit ;
29130: GO 29161
// for i in tmp do
29132: LD_ADDR_VAR 0 1
29136: PUSH
29137: LD_VAR 0 2
29141: PUSH
29142: FOR_IN
29143: IFFALSE 29159
// SetLives ( i , 1 ) ;
29145: LD_VAR 0 1
29149: PPUSH
29150: LD_INT 1
29152: PPUSH
29153: CALL_OW 234
29157: GO 29142
29159: POP
29160: POP
// end ;
29161: PPOPN 2
29163: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29164: LD_EXP 58
29168: PUSH
29169: LD_EXP 107
29173: AND
29174: IFFALSE 29448
29176: GO 29178
29178: DISABLE
29179: LD_INT 0
29181: PPUSH
29182: PPUSH
29183: PPUSH
// begin i := rand ( 1 , 7 ) ;
29184: LD_ADDR_VAR 0 1
29188: PUSH
29189: LD_INT 1
29191: PPUSH
29192: LD_INT 7
29194: PPUSH
29195: CALL_OW 12
29199: ST_TO_ADDR
// case i of 1 :
29200: LD_VAR 0 1
29204: PUSH
29205: LD_INT 1
29207: DOUBLE
29208: EQUAL
29209: IFTRUE 29213
29211: GO 29223
29213: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29214: LD_STRING earthquake(getX(game), 0, 32)
29216: PPUSH
29217: CALL_OW 559
29221: GO 29448
29223: LD_INT 2
29225: DOUBLE
29226: EQUAL
29227: IFTRUE 29231
29229: GO 29245
29231: POP
// begin ToLua ( displayStucuk(); ) ;
29232: LD_STRING displayStucuk();
29234: PPUSH
29235: CALL_OW 559
// ResetFog ;
29239: CALL_OW 335
// end ; 3 :
29243: GO 29448
29245: LD_INT 3
29247: DOUBLE
29248: EQUAL
29249: IFTRUE 29253
29251: GO 29357
29253: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29254: LD_ADDR_VAR 0 2
29258: PUSH
29259: LD_INT 22
29261: PUSH
29262: LD_OWVAR 2
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 25
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PPUSH
29285: CALL_OW 69
29289: ST_TO_ADDR
// if not tmp then
29290: LD_VAR 0 2
29294: NOT
29295: IFFALSE 29299
// exit ;
29297: GO 29448
// un := tmp [ rand ( 1 , tmp ) ] ;
29299: LD_ADDR_VAR 0 3
29303: PUSH
29304: LD_VAR 0 2
29308: PUSH
29309: LD_INT 1
29311: PPUSH
29312: LD_VAR 0 2
29316: PPUSH
29317: CALL_OW 12
29321: ARRAY
29322: ST_TO_ADDR
// if Crawls ( un ) then
29323: LD_VAR 0 3
29327: PPUSH
29328: CALL_OW 318
29332: IFFALSE 29343
// ComWalk ( un ) ;
29334: LD_VAR 0 3
29338: PPUSH
29339: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29343: LD_VAR 0 3
29347: PPUSH
29348: LD_INT 8
29350: PPUSH
29351: CALL_OW 336
// end ; 4 :
29355: GO 29448
29357: LD_INT 4
29359: DOUBLE
29360: EQUAL
29361: IFTRUE 29365
29363: GO 29426
29365: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29366: LD_ADDR_VAR 0 2
29370: PUSH
29371: LD_INT 22
29373: PUSH
29374: LD_OWVAR 2
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 30
29385: PUSH
29386: LD_INT 29
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PPUSH
29397: CALL_OW 69
29401: ST_TO_ADDR
// if not tmp then
29402: LD_VAR 0 2
29406: NOT
29407: IFFALSE 29411
// exit ;
29409: GO 29448
// DestroyUnit ( tmp [ 1 ] ) ;
29411: LD_VAR 0 2
29415: PUSH
29416: LD_INT 1
29418: ARRAY
29419: PPUSH
29420: CALL_OW 65
// end ; 5 .. 7 :
29424: GO 29448
29426: LD_INT 5
29428: DOUBLE
29429: GREATEREQUAL
29430: IFFALSE 29438
29432: LD_INT 7
29434: DOUBLE
29435: LESSEQUAL
29436: IFTRUE 29440
29438: GO 29447
29440: POP
// StreamSibBomb ; end ;
29441: CALL 25698 0 0
29445: GO 29448
29447: POP
// end ;
29448: PPOPN 3
29450: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29451: LD_EXP 58
29455: PUSH
29456: LD_EXP 108
29460: AND
29461: IFFALSE 29617
29463: GO 29465
29465: DISABLE
29466: LD_INT 0
29468: PPUSH
29469: PPUSH
29470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29471: LD_ADDR_VAR 0 2
29475: PUSH
29476: LD_INT 81
29478: PUSH
29479: LD_OWVAR 2
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 2
29490: PUSH
29491: LD_INT 21
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 21
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: LIST
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PPUSH
29520: CALL_OW 69
29524: ST_TO_ADDR
// if not tmp then
29525: LD_VAR 0 2
29529: NOT
29530: IFFALSE 29534
// exit ;
29532: GO 29617
// p := 0 ;
29534: LD_ADDR_VAR 0 3
29538: PUSH
29539: LD_INT 0
29541: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29542: LD_INT 35
29544: PPUSH
29545: CALL_OW 67
// p := p + 1 ;
29549: LD_ADDR_VAR 0 3
29553: PUSH
29554: LD_VAR 0 3
29558: PUSH
29559: LD_INT 1
29561: PLUS
29562: ST_TO_ADDR
// for i in tmp do
29563: LD_ADDR_VAR 0 1
29567: PUSH
29568: LD_VAR 0 2
29572: PUSH
29573: FOR_IN
29574: IFFALSE 29605
// if GetLives ( i ) < 1000 then
29576: LD_VAR 0 1
29580: PPUSH
29581: CALL_OW 256
29585: PUSH
29586: LD_INT 1000
29588: LESS
29589: IFFALSE 29603
// SetLives ( i , 1000 ) ;
29591: LD_VAR 0 1
29595: PPUSH
29596: LD_INT 1000
29598: PPUSH
29599: CALL_OW 234
29603: GO 29573
29605: POP
29606: POP
// until p > 20 ;
29607: LD_VAR 0 3
29611: PUSH
29612: LD_INT 20
29614: GREATER
29615: IFFALSE 29542
// end ;
29617: PPOPN 3
29619: END
// every 0 0$1 trigger StreamModeActive and sTime do
29620: LD_EXP 58
29624: PUSH
29625: LD_EXP 109
29629: AND
29630: IFFALSE 29665
29632: GO 29634
29634: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29635: LD_INT 28
29637: PPUSH
29638: LD_OWVAR 2
29642: PPUSH
29643: LD_INT 2
29645: PPUSH
29646: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29650: LD_INT 30
29652: PPUSH
29653: LD_OWVAR 2
29657: PPUSH
29658: LD_INT 2
29660: PPUSH
29661: CALL_OW 322
// end ;
29665: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29666: LD_EXP 58
29670: PUSH
29671: LD_EXP 110
29675: AND
29676: IFFALSE 29797
29678: GO 29680
29680: DISABLE
29681: LD_INT 0
29683: PPUSH
29684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29685: LD_ADDR_VAR 0 2
29689: PUSH
29690: LD_INT 22
29692: PUSH
29693: LD_OWVAR 2
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 21
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 3
29714: PUSH
29715: LD_INT 23
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: LIST
29733: PPUSH
29734: CALL_OW 69
29738: ST_TO_ADDR
// if not tmp then
29739: LD_VAR 0 2
29743: NOT
29744: IFFALSE 29748
// exit ;
29746: GO 29797
// for i in tmp do
29748: LD_ADDR_VAR 0 1
29752: PUSH
29753: LD_VAR 0 2
29757: PUSH
29758: FOR_IN
29759: IFFALSE 29795
// begin if Crawls ( i ) then
29761: LD_VAR 0 1
29765: PPUSH
29766: CALL_OW 318
29770: IFFALSE 29781
// ComWalk ( i ) ;
29772: LD_VAR 0 1
29776: PPUSH
29777: CALL_OW 138
// SetClass ( i , 2 ) ;
29781: LD_VAR 0 1
29785: PPUSH
29786: LD_INT 2
29788: PPUSH
29789: CALL_OW 336
// end ;
29793: GO 29758
29795: POP
29796: POP
// end ;
29797: PPOPN 2
29799: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29800: LD_EXP 58
29804: PUSH
29805: LD_EXP 111
29809: AND
29810: IFFALSE 30091
29812: GO 29814
29814: DISABLE
29815: LD_INT 0
29817: PPUSH
29818: PPUSH
29819: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29820: LD_OWVAR 2
29824: PPUSH
29825: LD_INT 9
29827: PPUSH
29828: LD_INT 1
29830: PPUSH
29831: LD_INT 1
29833: PPUSH
29834: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29838: LD_INT 9
29840: PPUSH
29841: LD_OWVAR 2
29845: PPUSH
29846: CALL_OW 343
// uc_side := 9 ;
29850: LD_ADDR_OWVAR 20
29854: PUSH
29855: LD_INT 9
29857: ST_TO_ADDR
// uc_nation := 2 ;
29858: LD_ADDR_OWVAR 21
29862: PUSH
29863: LD_INT 2
29865: ST_TO_ADDR
// hc_name := Dark Warrior ;
29866: LD_ADDR_OWVAR 26
29870: PUSH
29871: LD_STRING Dark Warrior
29873: ST_TO_ADDR
// hc_gallery :=  ;
29874: LD_ADDR_OWVAR 33
29878: PUSH
29879: LD_STRING 
29881: ST_TO_ADDR
// hc_noskilllimit := true ;
29882: LD_ADDR_OWVAR 76
29886: PUSH
29887: LD_INT 1
29889: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29890: LD_ADDR_OWVAR 31
29894: PUSH
29895: LD_INT 30
29897: PUSH
29898: LD_INT 30
29900: PUSH
29901: LD_INT 30
29903: PUSH
29904: LD_INT 30
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: ST_TO_ADDR
// un := CreateHuman ;
29913: LD_ADDR_VAR 0 3
29917: PUSH
29918: CALL_OW 44
29922: ST_TO_ADDR
// hc_noskilllimit := false ;
29923: LD_ADDR_OWVAR 76
29927: PUSH
29928: LD_INT 0
29930: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29931: LD_VAR 0 3
29935: PPUSH
29936: LD_INT 1
29938: PPUSH
29939: CALL_OW 51
// p := 0 ;
29943: LD_ADDR_VAR 0 2
29947: PUSH
29948: LD_INT 0
29950: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29951: LD_INT 35
29953: PPUSH
29954: CALL_OW 67
// p := p + 1 ;
29958: LD_ADDR_VAR 0 2
29962: PUSH
29963: LD_VAR 0 2
29967: PUSH
29968: LD_INT 1
29970: PLUS
29971: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29972: LD_VAR 0 3
29976: PPUSH
29977: CALL_OW 256
29981: PUSH
29982: LD_INT 1000
29984: LESS
29985: IFFALSE 29999
// SetLives ( un , 1000 ) ;
29987: LD_VAR 0 3
29991: PPUSH
29992: LD_INT 1000
29994: PPUSH
29995: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29999: LD_VAR 0 3
30003: PPUSH
30004: LD_INT 81
30006: PUSH
30007: LD_OWVAR 2
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 91
30018: PUSH
30019: LD_VAR 0 3
30023: PUSH
30024: LD_INT 30
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: LIST
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PPUSH
30036: CALL_OW 69
30040: PPUSH
30041: LD_VAR 0 3
30045: PPUSH
30046: CALL_OW 74
30050: PPUSH
30051: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30055: LD_VAR 0 2
30059: PUSH
30060: LD_INT 60
30062: GREATER
30063: PUSH
30064: LD_VAR 0 3
30068: PPUSH
30069: CALL_OW 301
30073: OR
30074: IFFALSE 29951
// if un then
30076: LD_VAR 0 3
30080: IFFALSE 30091
// RemoveUnit ( un ) ;
30082: LD_VAR 0 3
30086: PPUSH
30087: CALL_OW 64
// end ;
30091: PPOPN 3
30093: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30094: LD_INT 0
30096: PPUSH
30097: PPUSH
30098: PPUSH
30099: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30100: LD_ADDR_VAR 0 4
30104: PUSH
30105: LD_INT 22
30107: PUSH
30108: LD_OWVAR 2
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: LD_INT 30
30122: PUSH
30123: LD_INT 0
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 30
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: LIST
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PPUSH
30149: CALL_OW 69
30153: ST_TO_ADDR
// if not tmp then
30154: LD_VAR 0 4
30158: NOT
30159: IFFALSE 30163
// exit ;
30161: GO 30222
// for i in tmp do
30163: LD_ADDR_VAR 0 2
30167: PUSH
30168: LD_VAR 0 4
30172: PUSH
30173: FOR_IN
30174: IFFALSE 30220
// for j = 1 to 3 do
30176: LD_ADDR_VAR 0 3
30180: PUSH
30181: DOUBLE
30182: LD_INT 1
30184: DEC
30185: ST_TO_ADDR
30186: LD_INT 3
30188: PUSH
30189: FOR_TO
30190: IFFALSE 30216
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30192: LD_VAR 0 2
30196: PPUSH
30197: CALL_OW 274
30201: PPUSH
30202: LD_VAR 0 3
30206: PPUSH
30207: LD_INT 99999
30209: PPUSH
30210: CALL_OW 277
30214: GO 30189
30216: POP
30217: POP
30218: GO 30173
30220: POP
30221: POP
// end ;
30222: LD_VAR 0 1
30226: RET
// export function hHackSetLevel10 ; var i , j ; begin
30227: LD_INT 0
30229: PPUSH
30230: PPUSH
30231: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30232: LD_ADDR_VAR 0 2
30236: PUSH
30237: LD_INT 21
30239: PUSH
30240: LD_INT 1
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PPUSH
30247: CALL_OW 69
30251: PUSH
30252: FOR_IN
30253: IFFALSE 30305
// if IsSelected ( i ) then
30255: LD_VAR 0 2
30259: PPUSH
30260: CALL_OW 306
30264: IFFALSE 30303
// begin for j := 1 to 4 do
30266: LD_ADDR_VAR 0 3
30270: PUSH
30271: DOUBLE
30272: LD_INT 1
30274: DEC
30275: ST_TO_ADDR
30276: LD_INT 4
30278: PUSH
30279: FOR_TO
30280: IFFALSE 30301
// SetSkill ( i , j , 10 ) ;
30282: LD_VAR 0 2
30286: PPUSH
30287: LD_VAR 0 3
30291: PPUSH
30292: LD_INT 10
30294: PPUSH
30295: CALL_OW 237
30299: GO 30279
30301: POP
30302: POP
// end ;
30303: GO 30252
30305: POP
30306: POP
// end ;
30307: LD_VAR 0 1
30311: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30312: LD_INT 0
30314: PPUSH
30315: PPUSH
30316: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30317: LD_ADDR_VAR 0 2
30321: PUSH
30322: LD_INT 22
30324: PUSH
30325: LD_OWVAR 2
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 21
30336: PUSH
30337: LD_INT 1
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PPUSH
30348: CALL_OW 69
30352: PUSH
30353: FOR_IN
30354: IFFALSE 30395
// begin for j := 1 to 4 do
30356: LD_ADDR_VAR 0 3
30360: PUSH
30361: DOUBLE
30362: LD_INT 1
30364: DEC
30365: ST_TO_ADDR
30366: LD_INT 4
30368: PUSH
30369: FOR_TO
30370: IFFALSE 30391
// SetSkill ( i , j , 10 ) ;
30372: LD_VAR 0 2
30376: PPUSH
30377: LD_VAR 0 3
30381: PPUSH
30382: LD_INT 10
30384: PPUSH
30385: CALL_OW 237
30389: GO 30369
30391: POP
30392: POP
// end ;
30393: GO 30353
30395: POP
30396: POP
// end ;
30397: LD_VAR 0 1
30401: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
30402: LD_INT 0
30404: PPUSH
// uc_side := your_side ;
30405: LD_ADDR_OWVAR 20
30409: PUSH
30410: LD_OWVAR 2
30414: ST_TO_ADDR
// uc_nation := nation ;
30415: LD_ADDR_OWVAR 21
30419: PUSH
30420: LD_VAR 0 1
30424: ST_TO_ADDR
// InitHc ;
30425: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30429: LD_INT 0
30431: PPUSH
30432: LD_VAR 0 2
30436: PPUSH
30437: LD_VAR 0 3
30441: PPUSH
30442: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
30446: CALL_OW 44
30450: PPUSH
30451: LD_INT 1
30453: PPUSH
30454: CALL_OW 51
// end ;
30458: LD_VAR 0 4
30462: RET
// export function hHackSpawnVehicle ; begin
30463: LD_INT 0
30465: PPUSH
// uc_side := your_side ;
30466: LD_ADDR_OWVAR 20
30470: PUSH
30471: LD_OWVAR 2
30475: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
30476: LD_ADDR_OWVAR 21
30480: PUSH
30481: LD_INT 1
30483: PPUSH
30484: LD_INT 3
30486: PPUSH
30487: CALL_OW 12
30491: ST_TO_ADDR
// InitVc ;
30492: CALL_OW 20
// case uc_nation of 1 :
30496: LD_OWVAR 21
30500: PUSH
30501: LD_INT 1
30503: DOUBLE
30504: EQUAL
30505: IFTRUE 30509
30507: GO 30653
30509: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
30510: LD_ADDR_OWVAR 37
30514: PUSH
30515: LD_INT 1
30517: PUSH
30518: LD_INT 2
30520: PUSH
30521: LD_INT 3
30523: PUSH
30524: LD_INT 4
30526: PUSH
30527: LD_INT 5
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 1
30539: PPUSH
30540: LD_INT 5
30542: PPUSH
30543: CALL_OW 12
30547: ARRAY
30548: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30549: LD_ADDR_OWVAR 39
30553: PUSH
30554: LD_INT 1
30556: PPUSH
30557: LD_INT 3
30559: PPUSH
30560: CALL_OW 12
30564: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
30565: LD_ADDR_OWVAR 38
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: LD_INT 2
30575: PUSH
30576: LD_INT 3
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 1
30586: PPUSH
30587: LD_INT 3
30589: PPUSH
30590: CALL_OW 12
30594: ARRAY
30595: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
30596: LD_ADDR_OWVAR 40
30600: PUSH
30601: LD_INT 2
30603: PUSH
30604: LD_INT 4
30606: PUSH
30607: LD_INT 5
30609: PUSH
30610: LD_INT 3
30612: PUSH
30613: LD_INT 7
30615: PUSH
30616: LD_INT 8
30618: PUSH
30619: LD_INT 9
30621: PUSH
30622: LD_INT 10
30624: PUSH
30625: LD_INT 6
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: PPUSH
30642: LD_INT 9
30644: PPUSH
30645: CALL_OW 12
30649: ARRAY
30650: ST_TO_ADDR
// end ; 2 :
30651: GO 30918
30653: LD_INT 2
30655: DOUBLE
30656: EQUAL
30657: IFTRUE 30661
30659: GO 30785
30661: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
30662: LD_ADDR_OWVAR 37
30666: PUSH
30667: LD_INT 11
30669: PUSH
30670: LD_INT 12
30672: PUSH
30673: LD_INT 13
30675: PUSH
30676: LD_INT 14
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 1
30687: PPUSH
30688: LD_INT 4
30690: PPUSH
30691: CALL_OW 12
30695: ARRAY
30696: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30697: LD_ADDR_OWVAR 39
30701: PUSH
30702: LD_INT 1
30704: PPUSH
30705: LD_INT 3
30707: PPUSH
30708: CALL_OW 12
30712: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
30713: LD_ADDR_OWVAR 38
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: LD_INT 2
30723: PUSH
30724: LD_INT 5
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: PPUSH
30735: LD_INT 3
30737: PPUSH
30738: CALL_OW 12
30742: ARRAY
30743: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
30744: LD_ADDR_OWVAR 40
30748: PUSH
30749: LD_INT 24
30751: PUSH
30752: LD_INT 26
30754: PUSH
30755: LD_INT 27
30757: PUSH
30758: LD_INT 28
30760: PUSH
30761: LD_INT 29
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 1
30773: PPUSH
30774: LD_INT 5
30776: PPUSH
30777: CALL_OW 12
30781: ARRAY
30782: ST_TO_ADDR
// end ; 3 :
30783: GO 30918
30785: LD_INT 3
30787: DOUBLE
30788: EQUAL
30789: IFTRUE 30793
30791: GO 30917
30793: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
30794: LD_ADDR_OWVAR 37
30798: PUSH
30799: LD_INT 21
30801: PUSH
30802: LD_INT 23
30804: PUSH
30805: LD_INT 22
30807: PUSH
30808: LD_INT 24
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 1
30819: PPUSH
30820: LD_INT 4
30822: PPUSH
30823: CALL_OW 12
30827: ARRAY
30828: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
30829: LD_ADDR_OWVAR 39
30833: PUSH
30834: LD_INT 1
30836: PPUSH
30837: LD_INT 3
30839: PPUSH
30840: CALL_OW 12
30844: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
30845: LD_ADDR_OWVAR 38
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: LD_INT 3
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: PPUSH
30863: LD_INT 2
30865: PPUSH
30866: CALL_OW 12
30870: ARRAY
30871: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
30872: LD_ADDR_OWVAR 40
30876: PUSH
30877: LD_INT 42
30879: PUSH
30880: LD_INT 43
30882: PUSH
30883: LD_INT 44
30885: PUSH
30886: LD_INT 46
30888: PUSH
30889: LD_INT 48
30891: PUSH
30892: LD_INT 47
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 1
30905: PPUSH
30906: LD_INT 6
30908: PPUSH
30909: CALL_OW 12
30913: ARRAY
30914: ST_TO_ADDR
// end ; end ;
30915: GO 30918
30917: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30918: CALL_OW 45
30922: PPUSH
30923: LD_INT 1
30925: PPUSH
30926: CALL_OW 51
// end ;
30930: LD_VAR 0 1
30934: RET
// export hInvincible ; every 1 do
30935: GO 30937
30937: DISABLE
// hInvincible := [ ] ;
30938: LD_ADDR_EXP 112
30942: PUSH
30943: EMPTY
30944: ST_TO_ADDR
30945: END
// every 10 do var i ;
30946: GO 30948
30948: DISABLE
30949: LD_INT 0
30951: PPUSH
// begin enable ;
30952: ENABLE
// if not hInvincible then
30953: LD_EXP 112
30957: NOT
30958: IFFALSE 30962
// exit ;
30960: GO 31006
// for i in hInvincible do
30962: LD_ADDR_VAR 0 1
30966: PUSH
30967: LD_EXP 112
30971: PUSH
30972: FOR_IN
30973: IFFALSE 31004
// if GetLives ( i ) < 1000 then
30975: LD_VAR 0 1
30979: PPUSH
30980: CALL_OW 256
30984: PUSH
30985: LD_INT 1000
30987: LESS
30988: IFFALSE 31002
// SetLives ( i , 1000 ) ;
30990: LD_VAR 0 1
30994: PPUSH
30995: LD_INT 1000
30997: PPUSH
30998: CALL_OW 234
31002: GO 30972
31004: POP
31005: POP
// end ;
31006: PPOPN 1
31008: END
// export function hHackInvincible ; var i ; begin
31009: LD_INT 0
31011: PPUSH
31012: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31013: LD_ADDR_VAR 0 2
31017: PUSH
31018: LD_INT 2
31020: PUSH
31021: LD_INT 21
31023: PUSH
31024: LD_INT 1
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 21
31033: PUSH
31034: LD_INT 2
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: LIST
31045: PPUSH
31046: CALL_OW 69
31050: PUSH
31051: FOR_IN
31052: IFFALSE 31113
// if IsSelected ( i ) then
31054: LD_VAR 0 2
31058: PPUSH
31059: CALL_OW 306
31063: IFFALSE 31111
// begin if i in hInvincible then
31065: LD_VAR 0 2
31069: PUSH
31070: LD_EXP 112
31074: IN
31075: IFFALSE 31095
// hInvincible := hInvincible diff i else
31077: LD_ADDR_EXP 112
31081: PUSH
31082: LD_EXP 112
31086: PUSH
31087: LD_VAR 0 2
31091: DIFF
31092: ST_TO_ADDR
31093: GO 31111
// hInvincible := hInvincible union i ;
31095: LD_ADDR_EXP 112
31099: PUSH
31100: LD_EXP 112
31104: PUSH
31105: LD_VAR 0 2
31109: UNION
31110: ST_TO_ADDR
// end ;
31111: GO 31051
31113: POP
31114: POP
// end ;
31115: LD_VAR 0 1
31119: RET
// export function hHackInvisible ; var i , j ; begin
31120: LD_INT 0
31122: PPUSH
31123: PPUSH
31124: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31125: LD_ADDR_VAR 0 2
31129: PUSH
31130: LD_INT 21
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PPUSH
31140: CALL_OW 69
31144: PUSH
31145: FOR_IN
31146: IFFALSE 31170
// if IsSelected ( i ) then
31148: LD_VAR 0 2
31152: PPUSH
31153: CALL_OW 306
31157: IFFALSE 31168
// ComForceInvisible ( i ) ;
31159: LD_VAR 0 2
31163: PPUSH
31164: CALL_OW 496
31168: GO 31145
31170: POP
31171: POP
// end ;
31172: LD_VAR 0 1
31176: RET
// export function hHackChangeYourSide ; begin
31177: LD_INT 0
31179: PPUSH
// if your_side = 8 then
31180: LD_OWVAR 2
31184: PUSH
31185: LD_INT 8
31187: EQUAL
31188: IFFALSE 31200
// your_side := 0 else
31190: LD_ADDR_OWVAR 2
31194: PUSH
31195: LD_INT 0
31197: ST_TO_ADDR
31198: GO 31214
// your_side := your_side + 1 ;
31200: LD_ADDR_OWVAR 2
31204: PUSH
31205: LD_OWVAR 2
31209: PUSH
31210: LD_INT 1
31212: PLUS
31213: ST_TO_ADDR
// end ;
31214: LD_VAR 0 1
31218: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31219: LD_INT 0
31221: PPUSH
31222: PPUSH
31223: PPUSH
// for i in all_units do
31224: LD_ADDR_VAR 0 2
31228: PUSH
31229: LD_OWVAR 3
31233: PUSH
31234: FOR_IN
31235: IFFALSE 31313
// if IsSelected ( i ) then
31237: LD_VAR 0 2
31241: PPUSH
31242: CALL_OW 306
31246: IFFALSE 31311
// begin j := GetSide ( i ) ;
31248: LD_ADDR_VAR 0 3
31252: PUSH
31253: LD_VAR 0 2
31257: PPUSH
31258: CALL_OW 255
31262: ST_TO_ADDR
// if j = 8 then
31263: LD_VAR 0 3
31267: PUSH
31268: LD_INT 8
31270: EQUAL
31271: IFFALSE 31283
// j := 0 else
31273: LD_ADDR_VAR 0 3
31277: PUSH
31278: LD_INT 0
31280: ST_TO_ADDR
31281: GO 31297
// j := j + 1 ;
31283: LD_ADDR_VAR 0 3
31287: PUSH
31288: LD_VAR 0 3
31292: PUSH
31293: LD_INT 1
31295: PLUS
31296: ST_TO_ADDR
// SetSide ( i , j ) ;
31297: LD_VAR 0 2
31301: PPUSH
31302: LD_VAR 0 3
31306: PPUSH
31307: CALL_OW 235
// end ;
31311: GO 31234
31313: POP
31314: POP
// end ;
31315: LD_VAR 0 1
31319: RET
// export function hHackFog ; begin
31320: LD_INT 0
31322: PPUSH
// FogOff ( true ) ;
31323: LD_INT 1
31325: PPUSH
31326: CALL_OW 344
// end ;
31330: LD_VAR 0 1
31334: RET
// export function hHackApeman ; begin
31335: LD_INT 0
31337: PPUSH
// uc_side := your_side ;
31338: LD_ADDR_OWVAR 20
31342: PUSH
31343: LD_OWVAR 2
31347: ST_TO_ADDR
// uc_nation := 0 ;
31348: LD_ADDR_OWVAR 21
31352: PUSH
31353: LD_INT 0
31355: ST_TO_ADDR
// hc_name :=  ;
31356: LD_ADDR_OWVAR 26
31360: PUSH
31361: LD_STRING 
31363: ST_TO_ADDR
// hc_gallery :=  ;
31364: LD_ADDR_OWVAR 33
31368: PUSH
31369: LD_STRING 
31371: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
31372: LD_ADDR_OWVAR 31
31376: PUSH
31377: LD_INT 0
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: LD_INT 0
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: ST_TO_ADDR
// hc_class := class_apeman ;
31395: LD_ADDR_OWVAR 28
31399: PUSH
31400: LD_INT 12
31402: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
31403: CALL_OW 44
31407: PPUSH
31408: LD_INT 1
31410: PPUSH
31411: CALL_OW 51
// end ;
31415: LD_VAR 0 1
31419: RET
// export function hHackBoom ; begin
31420: LD_INT 0
31422: PPUSH
// uc_side := your_side ;
31423: LD_ADDR_OWVAR 20
31427: PUSH
31428: LD_OWVAR 2
31432: ST_TO_ADDR
// uc_nation := 1 ;
31433: LD_ADDR_OWVAR 21
31437: PUSH
31438: LD_INT 1
31440: ST_TO_ADDR
// vc_chassis := us_morphling ;
31441: LD_ADDR_OWVAR 37
31445: PUSH
31446: LD_INT 5
31448: ST_TO_ADDR
// vc_engine := engine_siberite ;
31449: LD_ADDR_OWVAR 39
31453: PUSH
31454: LD_INT 3
31456: ST_TO_ADDR
// vc_control := control_computer ;
31457: LD_ADDR_OWVAR 38
31461: PUSH
31462: LD_INT 3
31464: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
31465: LD_ADDR_OWVAR 40
31469: PUSH
31470: LD_INT 8
31472: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31473: CALL_OW 45
31477: PPUSH
31478: LD_INT 1
31480: PPUSH
31481: CALL_OW 51
// end ; end_of_file
31485: LD_VAR 0 1
31489: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31490: LD_INT 0
31492: PPUSH
31493: PPUSH
31494: PPUSH
31495: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31496: LD_VAR 0 1
31500: PPUSH
31501: CALL_OW 264
31505: PUSH
31506: LD_EXP 47
31510: EQUAL
31511: IFFALSE 31583
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31513: LD_INT 68
31515: PPUSH
31516: LD_VAR 0 1
31520: PPUSH
31521: CALL_OW 255
31525: PPUSH
31526: CALL_OW 321
31530: PUSH
31531: LD_INT 2
31533: EQUAL
31534: IFFALSE 31546
// eff := 70 else
31536: LD_ADDR_VAR 0 4
31540: PUSH
31541: LD_INT 70
31543: ST_TO_ADDR
31544: GO 31554
// eff := 30 ;
31546: LD_ADDR_VAR 0 4
31550: PUSH
31551: LD_INT 30
31553: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31554: LD_VAR 0 1
31558: PPUSH
31559: CALL_OW 250
31563: PPUSH
31564: LD_VAR 0 1
31568: PPUSH
31569: CALL_OW 251
31573: PPUSH
31574: LD_VAR 0 4
31578: PPUSH
31579: CALL_OW 495
// end ; end ;
31583: LD_VAR 0 2
31587: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31588: LD_INT 0
31590: PPUSH
// end ;
31591: LD_VAR 0 4
31595: RET
// export function SOS_Command ( cmd ) ; begin
31596: LD_INT 0
31598: PPUSH
// end ;
31599: LD_VAR 0 2
31603: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31604: LD_VAR 0 1
31608: PUSH
31609: LD_INT 254
31611: EQUAL
31612: PUSH
31613: LD_VAR 0 2
31617: PPUSH
31618: CALL_OW 264
31622: PUSH
31623: LD_EXP 45
31627: EQUAL
31628: AND
31629: PUSH
31630: LD_VAR 0 3
31634: PPUSH
31635: CALL_OW 263
31639: PUSH
31640: LD_INT 3
31642: EQUAL
31643: AND
31644: IFFALSE 31660
// HackDestroyVehicle ( unit , selectedUnit ) ;
31646: LD_VAR 0 2
31650: PPUSH
31651: LD_VAR 0 3
31655: PPUSH
31656: CALL 33167 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31660: LD_VAR 0 1
31664: PUSH
31665: LD_INT 255
31667: EQUAL
31668: PUSH
31669: LD_VAR 0 2
31673: PPUSH
31674: CALL_OW 264
31678: PUSH
31679: LD_INT 14
31681: PUSH
31682: LD_INT 53
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: IN
31689: AND
31690: PUSH
31691: LD_VAR 0 4
31695: PPUSH
31696: LD_VAR 0 5
31700: PPUSH
31701: CALL_OW 488
31705: AND
31706: IFFALSE 31730
// CutTreeXYR ( unit , x , y , 12 ) ;
31708: LD_VAR 0 2
31712: PPUSH
31713: LD_VAR 0 4
31717: PPUSH
31718: LD_VAR 0 5
31722: PPUSH
31723: LD_INT 12
31725: PPUSH
31726: CALL 31733 0 4
// end ;
31730: PPOPN 5
31732: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31733: LD_INT 0
31735: PPUSH
31736: PPUSH
31737: PPUSH
31738: PPUSH
31739: PPUSH
31740: PPUSH
31741: PPUSH
31742: PPUSH
31743: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31744: LD_VAR 0 1
31748: NOT
31749: PUSH
31750: LD_VAR 0 2
31754: PPUSH
31755: LD_VAR 0 3
31759: PPUSH
31760: CALL_OW 488
31764: NOT
31765: OR
31766: PUSH
31767: LD_VAR 0 4
31771: NOT
31772: OR
31773: IFFALSE 31777
// exit ;
31775: GO 32117
// list := [ ] ;
31777: LD_ADDR_VAR 0 13
31781: PUSH
31782: EMPTY
31783: ST_TO_ADDR
// if x - r < 0 then
31784: LD_VAR 0 2
31788: PUSH
31789: LD_VAR 0 4
31793: MINUS
31794: PUSH
31795: LD_INT 0
31797: LESS
31798: IFFALSE 31810
// min_x := 0 else
31800: LD_ADDR_VAR 0 7
31804: PUSH
31805: LD_INT 0
31807: ST_TO_ADDR
31808: GO 31826
// min_x := x - r ;
31810: LD_ADDR_VAR 0 7
31814: PUSH
31815: LD_VAR 0 2
31819: PUSH
31820: LD_VAR 0 4
31824: MINUS
31825: ST_TO_ADDR
// if y - r < 0 then
31826: LD_VAR 0 3
31830: PUSH
31831: LD_VAR 0 4
31835: MINUS
31836: PUSH
31837: LD_INT 0
31839: LESS
31840: IFFALSE 31852
// min_y := 0 else
31842: LD_ADDR_VAR 0 8
31846: PUSH
31847: LD_INT 0
31849: ST_TO_ADDR
31850: GO 31868
// min_y := y - r ;
31852: LD_ADDR_VAR 0 8
31856: PUSH
31857: LD_VAR 0 3
31861: PUSH
31862: LD_VAR 0 4
31866: MINUS
31867: ST_TO_ADDR
// max_x := x + r ;
31868: LD_ADDR_VAR 0 9
31872: PUSH
31873: LD_VAR 0 2
31877: PUSH
31878: LD_VAR 0 4
31882: PLUS
31883: ST_TO_ADDR
// max_y := y + r ;
31884: LD_ADDR_VAR 0 10
31888: PUSH
31889: LD_VAR 0 3
31893: PUSH
31894: LD_VAR 0 4
31898: PLUS
31899: ST_TO_ADDR
// for _x = min_x to max_x do
31900: LD_ADDR_VAR 0 11
31904: PUSH
31905: DOUBLE
31906: LD_VAR 0 7
31910: DEC
31911: ST_TO_ADDR
31912: LD_VAR 0 9
31916: PUSH
31917: FOR_TO
31918: IFFALSE 32035
// for _y = min_y to max_y do
31920: LD_ADDR_VAR 0 12
31924: PUSH
31925: DOUBLE
31926: LD_VAR 0 8
31930: DEC
31931: ST_TO_ADDR
31932: LD_VAR 0 10
31936: PUSH
31937: FOR_TO
31938: IFFALSE 32031
// begin if not ValidHex ( _x , _y ) then
31940: LD_VAR 0 11
31944: PPUSH
31945: LD_VAR 0 12
31949: PPUSH
31950: CALL_OW 488
31954: NOT
31955: IFFALSE 31959
// continue ;
31957: GO 31937
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31959: LD_VAR 0 11
31963: PPUSH
31964: LD_VAR 0 12
31968: PPUSH
31969: CALL_OW 351
31973: PUSH
31974: LD_VAR 0 11
31978: PPUSH
31979: LD_VAR 0 12
31983: PPUSH
31984: CALL_OW 554
31988: AND
31989: IFFALSE 32029
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31991: LD_ADDR_VAR 0 13
31995: PUSH
31996: LD_VAR 0 13
32000: PPUSH
32001: LD_VAR 0 13
32005: PUSH
32006: LD_INT 1
32008: PLUS
32009: PPUSH
32010: LD_VAR 0 11
32014: PUSH
32015: LD_VAR 0 12
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PPUSH
32024: CALL_OW 2
32028: ST_TO_ADDR
// end ;
32029: GO 31937
32031: POP
32032: POP
32033: GO 31917
32035: POP
32036: POP
// if not list then
32037: LD_VAR 0 13
32041: NOT
32042: IFFALSE 32046
// exit ;
32044: GO 32117
// for i in list do
32046: LD_ADDR_VAR 0 6
32050: PUSH
32051: LD_VAR 0 13
32055: PUSH
32056: FOR_IN
32057: IFFALSE 32115
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32059: LD_VAR 0 1
32063: PPUSH
32064: LD_STRING M
32066: PUSH
32067: LD_VAR 0 6
32071: PUSH
32072: LD_INT 1
32074: ARRAY
32075: PUSH
32076: LD_VAR 0 6
32080: PUSH
32081: LD_INT 2
32083: ARRAY
32084: PUSH
32085: LD_INT 0
32087: PUSH
32088: LD_INT 0
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: LD_INT 0
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: PUSH
32106: EMPTY
32107: LIST
32108: PPUSH
32109: CALL_OW 447
32113: GO 32056
32115: POP
32116: POP
// end ;
32117: LD_VAR 0 5
32121: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32122: LD_EXP 113
32126: NOT
32127: IFFALSE 32177
32129: GO 32131
32131: DISABLE
// begin initHack := true ;
32132: LD_ADDR_EXP 113
32136: PUSH
32137: LD_INT 1
32139: ST_TO_ADDR
// hackTanks := [ ] ;
32140: LD_ADDR_EXP 114
32144: PUSH
32145: EMPTY
32146: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32147: LD_ADDR_EXP 115
32151: PUSH
32152: EMPTY
32153: ST_TO_ADDR
// hackLimit := 3 ;
32154: LD_ADDR_EXP 116
32158: PUSH
32159: LD_INT 3
32161: ST_TO_ADDR
// hackDist := 12 ;
32162: LD_ADDR_EXP 117
32166: PUSH
32167: LD_INT 12
32169: ST_TO_ADDR
// hackCounter := [ ] ;
32170: LD_ADDR_EXP 118
32174: PUSH
32175: EMPTY
32176: ST_TO_ADDR
// end ;
32177: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32178: LD_EXP 113
32182: PUSH
32183: LD_INT 34
32185: PUSH
32186: LD_EXP 45
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PPUSH
32195: CALL_OW 69
32199: AND
32200: IFFALSE 32455
32202: GO 32204
32204: DISABLE
32205: LD_INT 0
32207: PPUSH
32208: PPUSH
// begin enable ;
32209: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32210: LD_ADDR_VAR 0 1
32214: PUSH
32215: LD_INT 34
32217: PUSH
32218: LD_EXP 45
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PPUSH
32227: CALL_OW 69
32231: PUSH
32232: FOR_IN
32233: IFFALSE 32453
// begin if not i in hackTanks then
32235: LD_VAR 0 1
32239: PUSH
32240: LD_EXP 114
32244: IN
32245: NOT
32246: IFFALSE 32329
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32248: LD_ADDR_EXP 114
32252: PUSH
32253: LD_EXP 114
32257: PPUSH
32258: LD_EXP 114
32262: PUSH
32263: LD_INT 1
32265: PLUS
32266: PPUSH
32267: LD_VAR 0 1
32271: PPUSH
32272: CALL_OW 1
32276: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32277: LD_ADDR_EXP 115
32281: PUSH
32282: LD_EXP 115
32286: PPUSH
32287: LD_EXP 115
32291: PUSH
32292: LD_INT 1
32294: PLUS
32295: PPUSH
32296: EMPTY
32297: PPUSH
32298: CALL_OW 1
32302: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32303: LD_ADDR_EXP 118
32307: PUSH
32308: LD_EXP 118
32312: PPUSH
32313: LD_EXP 118
32317: PUSH
32318: LD_INT 1
32320: PLUS
32321: PPUSH
32322: EMPTY
32323: PPUSH
32324: CALL_OW 1
32328: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32329: LD_VAR 0 1
32333: PPUSH
32334: CALL_OW 302
32338: NOT
32339: IFFALSE 32352
// begin HackUnlinkAll ( i ) ;
32341: LD_VAR 0 1
32345: PPUSH
32346: CALL 32458 0 1
// continue ;
32350: GO 32232
// end ; HackCheckCapturedStatus ( i ) ;
32352: LD_VAR 0 1
32356: PPUSH
32357: CALL 32901 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32361: LD_ADDR_VAR 0 2
32365: PUSH
32366: LD_INT 81
32368: PUSH
32369: LD_VAR 0 1
32373: PPUSH
32374: CALL_OW 255
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 33
32385: PUSH
32386: LD_INT 3
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 91
32395: PUSH
32396: LD_VAR 0 1
32400: PUSH
32401: LD_EXP 117
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 50
32413: PUSH
32414: EMPTY
32415: LIST
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: PPUSH
32423: CALL_OW 69
32427: ST_TO_ADDR
// if not tmp then
32428: LD_VAR 0 2
32432: NOT
32433: IFFALSE 32437
// continue ;
32435: GO 32232
// HackLink ( i , tmp ) ;
32437: LD_VAR 0 1
32441: PPUSH
32442: LD_VAR 0 2
32446: PPUSH
32447: CALL 32594 0 2
// end ;
32451: GO 32232
32453: POP
32454: POP
// end ;
32455: PPOPN 2
32457: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32458: LD_INT 0
32460: PPUSH
32461: PPUSH
32462: PPUSH
// if not hack in hackTanks then
32463: LD_VAR 0 1
32467: PUSH
32468: LD_EXP 114
32472: IN
32473: NOT
32474: IFFALSE 32478
// exit ;
32476: GO 32589
// index := GetElementIndex ( hackTanks , hack ) ;
32478: LD_ADDR_VAR 0 4
32482: PUSH
32483: LD_EXP 114
32487: PPUSH
32488: LD_VAR 0 1
32492: PPUSH
32493: CALL 38009 0 2
32497: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32498: LD_EXP 115
32502: PUSH
32503: LD_VAR 0 4
32507: ARRAY
32508: IFFALSE 32589
// begin for i in hackTanksCaptured [ index ] do
32510: LD_ADDR_VAR 0 3
32514: PUSH
32515: LD_EXP 115
32519: PUSH
32520: LD_VAR 0 4
32524: ARRAY
32525: PUSH
32526: FOR_IN
32527: IFFALSE 32553
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32529: LD_VAR 0 3
32533: PUSH
32534: LD_INT 1
32536: ARRAY
32537: PPUSH
32538: LD_VAR 0 3
32542: PUSH
32543: LD_INT 2
32545: ARRAY
32546: PPUSH
32547: CALL_OW 235
32551: GO 32526
32553: POP
32554: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32555: LD_ADDR_EXP 115
32559: PUSH
32560: LD_EXP 115
32564: PPUSH
32565: LD_VAR 0 4
32569: PPUSH
32570: EMPTY
32571: PPUSH
32572: CALL_OW 1
32576: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32577: LD_VAR 0 1
32581: PPUSH
32582: LD_INT 0
32584: PPUSH
32585: CALL_OW 505
// end ; end ;
32589: LD_VAR 0 2
32593: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32594: LD_INT 0
32596: PPUSH
32597: PPUSH
32598: PPUSH
// if not hack in hackTanks or not vehicles then
32599: LD_VAR 0 1
32603: PUSH
32604: LD_EXP 114
32608: IN
32609: NOT
32610: PUSH
32611: LD_VAR 0 2
32615: NOT
32616: OR
32617: IFFALSE 32621
// exit ;
32619: GO 32896
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32621: LD_ADDR_VAR 0 2
32625: PUSH
32626: LD_VAR 0 1
32630: PPUSH
32631: LD_VAR 0 2
32635: PPUSH
32636: LD_INT 1
32638: PPUSH
32639: LD_INT 1
32641: PPUSH
32642: CALL 38659 0 4
32646: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32647: LD_ADDR_VAR 0 5
32651: PUSH
32652: LD_EXP 114
32656: PPUSH
32657: LD_VAR 0 1
32661: PPUSH
32662: CALL 38009 0 2
32666: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32667: LD_EXP 115
32671: PUSH
32672: LD_VAR 0 5
32676: ARRAY
32677: PUSH
32678: LD_EXP 116
32682: LESS
32683: IFFALSE 32872
// begin for i := 1 to vehicles do
32685: LD_ADDR_VAR 0 4
32689: PUSH
32690: DOUBLE
32691: LD_INT 1
32693: DEC
32694: ST_TO_ADDR
32695: LD_VAR 0 2
32699: PUSH
32700: FOR_TO
32701: IFFALSE 32870
// begin if hackTanksCaptured [ index ] = hackLimit then
32703: LD_EXP 115
32707: PUSH
32708: LD_VAR 0 5
32712: ARRAY
32713: PUSH
32714: LD_EXP 116
32718: EQUAL
32719: IFFALSE 32723
// break ;
32721: GO 32870
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32723: LD_ADDR_EXP 118
32727: PUSH
32728: LD_EXP 118
32732: PPUSH
32733: LD_VAR 0 5
32737: PPUSH
32738: LD_EXP 118
32742: PUSH
32743: LD_VAR 0 5
32747: ARRAY
32748: PUSH
32749: LD_INT 1
32751: PLUS
32752: PPUSH
32753: CALL_OW 1
32757: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32758: LD_ADDR_EXP 115
32762: PUSH
32763: LD_EXP 115
32767: PPUSH
32768: LD_VAR 0 5
32772: PUSH
32773: LD_EXP 115
32777: PUSH
32778: LD_VAR 0 5
32782: ARRAY
32783: PUSH
32784: LD_INT 1
32786: PLUS
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PPUSH
32792: LD_VAR 0 2
32796: PUSH
32797: LD_VAR 0 4
32801: ARRAY
32802: PUSH
32803: LD_VAR 0 2
32807: PUSH
32808: LD_VAR 0 4
32812: ARRAY
32813: PPUSH
32814: CALL_OW 255
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PPUSH
32823: CALL 38224 0 3
32827: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32828: LD_VAR 0 2
32832: PUSH
32833: LD_VAR 0 4
32837: ARRAY
32838: PPUSH
32839: LD_VAR 0 1
32843: PPUSH
32844: CALL_OW 255
32848: PPUSH
32849: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32853: LD_VAR 0 2
32857: PUSH
32858: LD_VAR 0 4
32862: ARRAY
32863: PPUSH
32864: CALL_OW 141
// end ;
32868: GO 32700
32870: POP
32871: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32872: LD_VAR 0 1
32876: PPUSH
32877: LD_EXP 115
32881: PUSH
32882: LD_VAR 0 5
32886: ARRAY
32887: PUSH
32888: LD_INT 0
32890: PLUS
32891: PPUSH
32892: CALL_OW 505
// end ;
32896: LD_VAR 0 3
32900: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32901: LD_INT 0
32903: PPUSH
32904: PPUSH
32905: PPUSH
32906: PPUSH
// if not hack in hackTanks then
32907: LD_VAR 0 1
32911: PUSH
32912: LD_EXP 114
32916: IN
32917: NOT
32918: IFFALSE 32922
// exit ;
32920: GO 33162
// index := GetElementIndex ( hackTanks , hack ) ;
32922: LD_ADDR_VAR 0 4
32926: PUSH
32927: LD_EXP 114
32931: PPUSH
32932: LD_VAR 0 1
32936: PPUSH
32937: CALL 38009 0 2
32941: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32942: LD_ADDR_VAR 0 3
32946: PUSH
32947: DOUBLE
32948: LD_EXP 115
32952: PUSH
32953: LD_VAR 0 4
32957: ARRAY
32958: INC
32959: ST_TO_ADDR
32960: LD_INT 1
32962: PUSH
32963: FOR_DOWNTO
32964: IFFALSE 33136
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
32966: LD_ADDR_VAR 0 5
32970: PUSH
32971: LD_EXP 115
32975: PUSH
32976: LD_VAR 0 4
32980: ARRAY
32981: PUSH
32982: LD_VAR 0 3
32986: ARRAY
32987: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
32988: LD_VAR 0 5
32992: PUSH
32993: LD_INT 1
32995: ARRAY
32996: PPUSH
32997: CALL_OW 302
33001: NOT
33002: PUSH
33003: LD_VAR 0 5
33007: PUSH
33008: LD_INT 1
33010: ARRAY
33011: PPUSH
33012: CALL_OW 255
33016: PUSH
33017: LD_VAR 0 1
33021: PPUSH
33022: CALL_OW 255
33026: NONEQUAL
33027: OR
33028: IFFALSE 33134
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33030: LD_VAR 0 5
33034: PUSH
33035: LD_INT 1
33037: ARRAY
33038: PPUSH
33039: CALL_OW 305
33043: PUSH
33044: LD_VAR 0 5
33048: PUSH
33049: LD_INT 1
33051: ARRAY
33052: PPUSH
33053: CALL_OW 255
33057: PUSH
33058: LD_VAR 0 1
33062: PPUSH
33063: CALL_OW 255
33067: EQUAL
33068: AND
33069: IFFALSE 33093
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33071: LD_VAR 0 5
33075: PUSH
33076: LD_INT 1
33078: ARRAY
33079: PPUSH
33080: LD_VAR 0 5
33084: PUSH
33085: LD_INT 2
33087: ARRAY
33088: PPUSH
33089: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33093: LD_ADDR_EXP 115
33097: PUSH
33098: LD_EXP 115
33102: PPUSH
33103: LD_VAR 0 4
33107: PPUSH
33108: LD_EXP 115
33112: PUSH
33113: LD_VAR 0 4
33117: ARRAY
33118: PPUSH
33119: LD_VAR 0 3
33123: PPUSH
33124: CALL_OW 3
33128: PPUSH
33129: CALL_OW 1
33133: ST_TO_ADDR
// end ; end ;
33134: GO 32963
33136: POP
33137: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33138: LD_VAR 0 1
33142: PPUSH
33143: LD_EXP 115
33147: PUSH
33148: LD_VAR 0 4
33152: ARRAY
33153: PUSH
33154: LD_INT 0
33156: PLUS
33157: PPUSH
33158: CALL_OW 505
// end ;
33162: LD_VAR 0 2
33166: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33167: LD_INT 0
33169: PPUSH
33170: PPUSH
33171: PPUSH
33172: PPUSH
// if not hack in hackTanks then
33173: LD_VAR 0 1
33177: PUSH
33178: LD_EXP 114
33182: IN
33183: NOT
33184: IFFALSE 33188
// exit ;
33186: GO 33273
// index := GetElementIndex ( hackTanks , hack ) ;
33188: LD_ADDR_VAR 0 5
33192: PUSH
33193: LD_EXP 114
33197: PPUSH
33198: LD_VAR 0 1
33202: PPUSH
33203: CALL 38009 0 2
33207: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33208: LD_ADDR_VAR 0 4
33212: PUSH
33213: DOUBLE
33214: LD_INT 1
33216: DEC
33217: ST_TO_ADDR
33218: LD_EXP 115
33222: PUSH
33223: LD_VAR 0 5
33227: ARRAY
33228: PUSH
33229: FOR_TO
33230: IFFALSE 33271
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33232: LD_EXP 115
33236: PUSH
33237: LD_VAR 0 5
33241: ARRAY
33242: PUSH
33243: LD_VAR 0 4
33247: ARRAY
33248: PUSH
33249: LD_INT 1
33251: ARRAY
33252: PUSH
33253: LD_VAR 0 2
33257: EQUAL
33258: IFFALSE 33269
// KillUnit ( vehicle ) ;
33260: LD_VAR 0 2
33264: PPUSH
33265: CALL_OW 66
33269: GO 33229
33271: POP
33272: POP
// end ; end_of_file
33273: LD_VAR 0 3
33277: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33278: LD_INT 0
33280: PPUSH
33281: PPUSH
// if exist_mode then
33282: LD_VAR 0 2
33286: IFFALSE 33311
// unit := CreateCharacter ( prefix & ident ) else
33288: LD_ADDR_VAR 0 5
33292: PUSH
33293: LD_VAR 0 3
33297: PUSH
33298: LD_VAR 0 1
33302: STR
33303: PPUSH
33304: CALL_OW 34
33308: ST_TO_ADDR
33309: GO 33326
// unit := NewCharacter ( ident ) ;
33311: LD_ADDR_VAR 0 5
33315: PUSH
33316: LD_VAR 0 1
33320: PPUSH
33321: CALL_OW 25
33325: ST_TO_ADDR
// result := unit ;
33326: LD_ADDR_VAR 0 4
33330: PUSH
33331: LD_VAR 0 5
33335: ST_TO_ADDR
// end ;
33336: LD_VAR 0 4
33340: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33341: LD_INT 0
33343: PPUSH
33344: PPUSH
// if not side or not nation then
33345: LD_VAR 0 1
33349: NOT
33350: PUSH
33351: LD_VAR 0 2
33355: NOT
33356: OR
33357: IFFALSE 33361
// exit ;
33359: GO 34125
// case nation of nation_american :
33361: LD_VAR 0 2
33365: PUSH
33366: LD_INT 1
33368: DOUBLE
33369: EQUAL
33370: IFTRUE 33374
33372: GO 33588
33374: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33375: LD_ADDR_VAR 0 4
33379: PUSH
33380: LD_INT 35
33382: PUSH
33383: LD_INT 45
33385: PUSH
33386: LD_INT 46
33388: PUSH
33389: LD_INT 47
33391: PUSH
33392: LD_INT 82
33394: PUSH
33395: LD_INT 83
33397: PUSH
33398: LD_INT 84
33400: PUSH
33401: LD_INT 85
33403: PUSH
33404: LD_INT 86
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: LD_INT 2
33412: PUSH
33413: LD_INT 6
33415: PUSH
33416: LD_INT 15
33418: PUSH
33419: LD_INT 16
33421: PUSH
33422: LD_INT 7
33424: PUSH
33425: LD_INT 12
33427: PUSH
33428: LD_INT 13
33430: PUSH
33431: LD_INT 10
33433: PUSH
33434: LD_INT 14
33436: PUSH
33437: LD_INT 20
33439: PUSH
33440: LD_INT 21
33442: PUSH
33443: LD_INT 22
33445: PUSH
33446: LD_INT 25
33448: PUSH
33449: LD_INT 32
33451: PUSH
33452: LD_INT 27
33454: PUSH
33455: LD_INT 36
33457: PUSH
33458: LD_INT 69
33460: PUSH
33461: LD_INT 39
33463: PUSH
33464: LD_INT 34
33466: PUSH
33467: LD_INT 40
33469: PUSH
33470: LD_INT 48
33472: PUSH
33473: LD_INT 49
33475: PUSH
33476: LD_INT 50
33478: PUSH
33479: LD_INT 51
33481: PUSH
33482: LD_INT 52
33484: PUSH
33485: LD_INT 53
33487: PUSH
33488: LD_INT 54
33490: PUSH
33491: LD_INT 55
33493: PUSH
33494: LD_INT 56
33496: PUSH
33497: LD_INT 57
33499: PUSH
33500: LD_INT 58
33502: PUSH
33503: LD_INT 59
33505: PUSH
33506: LD_INT 60
33508: PUSH
33509: LD_INT 61
33511: PUSH
33512: LD_INT 62
33514: PUSH
33515: LD_INT 80
33517: PUSH
33518: LD_INT 82
33520: PUSH
33521: LD_INT 83
33523: PUSH
33524: LD_INT 84
33526: PUSH
33527: LD_INT 85
33529: PUSH
33530: LD_INT 86
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: ST_TO_ADDR
33586: GO 34049
33588: LD_INT 2
33590: DOUBLE
33591: EQUAL
33592: IFTRUE 33596
33594: GO 33818
33596: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
33597: LD_ADDR_VAR 0 4
33601: PUSH
33602: LD_INT 35
33604: PUSH
33605: LD_INT 45
33607: PUSH
33608: LD_INT 46
33610: PUSH
33611: LD_INT 47
33613: PUSH
33614: LD_INT 82
33616: PUSH
33617: LD_INT 83
33619: PUSH
33620: LD_INT 84
33622: PUSH
33623: LD_INT 85
33625: PUSH
33626: LD_INT 87
33628: PUSH
33629: LD_INT 70
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: LD_INT 11
33637: PUSH
33638: LD_INT 3
33640: PUSH
33641: LD_INT 4
33643: PUSH
33644: LD_INT 5
33646: PUSH
33647: LD_INT 6
33649: PUSH
33650: LD_INT 15
33652: PUSH
33653: LD_INT 18
33655: PUSH
33656: LD_INT 7
33658: PUSH
33659: LD_INT 17
33661: PUSH
33662: LD_INT 8
33664: PUSH
33665: LD_INT 20
33667: PUSH
33668: LD_INT 21
33670: PUSH
33671: LD_INT 22
33673: PUSH
33674: LD_INT 72
33676: PUSH
33677: LD_INT 26
33679: PUSH
33680: LD_INT 69
33682: PUSH
33683: LD_INT 39
33685: PUSH
33686: LD_INT 40
33688: PUSH
33689: LD_INT 41
33691: PUSH
33692: LD_INT 42
33694: PUSH
33695: LD_INT 43
33697: PUSH
33698: LD_INT 48
33700: PUSH
33701: LD_INT 49
33703: PUSH
33704: LD_INT 50
33706: PUSH
33707: LD_INT 51
33709: PUSH
33710: LD_INT 52
33712: PUSH
33713: LD_INT 53
33715: PUSH
33716: LD_INT 54
33718: PUSH
33719: LD_INT 55
33721: PUSH
33722: LD_INT 56
33724: PUSH
33725: LD_INT 60
33727: PUSH
33728: LD_INT 61
33730: PUSH
33731: LD_INT 62
33733: PUSH
33734: LD_INT 66
33736: PUSH
33737: LD_INT 67
33739: PUSH
33740: LD_INT 68
33742: PUSH
33743: LD_INT 81
33745: PUSH
33746: LD_INT 82
33748: PUSH
33749: LD_INT 83
33751: PUSH
33752: LD_INT 84
33754: PUSH
33755: LD_INT 85
33757: PUSH
33758: LD_INT 87
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: ST_TO_ADDR
33816: GO 34049
33818: LD_INT 3
33820: DOUBLE
33821: EQUAL
33822: IFTRUE 33826
33824: GO 34048
33826: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33827: LD_ADDR_VAR 0 4
33831: PUSH
33832: LD_INT 46
33834: PUSH
33835: LD_INT 47
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: LD_INT 2
33843: PUSH
33844: LD_INT 82
33846: PUSH
33847: LD_INT 83
33849: PUSH
33850: LD_INT 84
33852: PUSH
33853: LD_INT 85
33855: PUSH
33856: LD_INT 86
33858: PUSH
33859: LD_INT 11
33861: PUSH
33862: LD_INT 9
33864: PUSH
33865: LD_INT 20
33867: PUSH
33868: LD_INT 19
33870: PUSH
33871: LD_INT 21
33873: PUSH
33874: LD_INT 24
33876: PUSH
33877: LD_INT 22
33879: PUSH
33880: LD_INT 25
33882: PUSH
33883: LD_INT 28
33885: PUSH
33886: LD_INT 29
33888: PUSH
33889: LD_INT 30
33891: PUSH
33892: LD_INT 31
33894: PUSH
33895: LD_INT 37
33897: PUSH
33898: LD_INT 38
33900: PUSH
33901: LD_INT 32
33903: PUSH
33904: LD_INT 27
33906: PUSH
33907: LD_INT 33
33909: PUSH
33910: LD_INT 69
33912: PUSH
33913: LD_INT 39
33915: PUSH
33916: LD_INT 34
33918: PUSH
33919: LD_INT 40
33921: PUSH
33922: LD_INT 71
33924: PUSH
33925: LD_INT 23
33927: PUSH
33928: LD_INT 44
33930: PUSH
33931: LD_INT 48
33933: PUSH
33934: LD_INT 49
33936: PUSH
33937: LD_INT 50
33939: PUSH
33940: LD_INT 51
33942: PUSH
33943: LD_INT 52
33945: PUSH
33946: LD_INT 53
33948: PUSH
33949: LD_INT 54
33951: PUSH
33952: LD_INT 55
33954: PUSH
33955: LD_INT 56
33957: PUSH
33958: LD_INT 57
33960: PUSH
33961: LD_INT 58
33963: PUSH
33964: LD_INT 59
33966: PUSH
33967: LD_INT 63
33969: PUSH
33970: LD_INT 64
33972: PUSH
33973: LD_INT 65
33975: PUSH
33976: LD_INT 82
33978: PUSH
33979: LD_INT 83
33981: PUSH
33982: LD_INT 84
33984: PUSH
33985: LD_INT 85
33987: PUSH
33988: LD_INT 86
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: ST_TO_ADDR
34046: GO 34049
34048: POP
// if state > - 1 and state < 3 then
34049: LD_VAR 0 3
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: GREATER
34058: PUSH
34059: LD_VAR 0 3
34063: PUSH
34064: LD_INT 3
34066: LESS
34067: AND
34068: IFFALSE 34125
// for i in result do
34070: LD_ADDR_VAR 0 5
34074: PUSH
34075: LD_VAR 0 4
34079: PUSH
34080: FOR_IN
34081: IFFALSE 34123
// if GetTech ( i , side ) <> state then
34083: LD_VAR 0 5
34087: PPUSH
34088: LD_VAR 0 1
34092: PPUSH
34093: CALL_OW 321
34097: PUSH
34098: LD_VAR 0 3
34102: NONEQUAL
34103: IFFALSE 34121
// result := result diff i ;
34105: LD_ADDR_VAR 0 4
34109: PUSH
34110: LD_VAR 0 4
34114: PUSH
34115: LD_VAR 0 5
34119: DIFF
34120: ST_TO_ADDR
34121: GO 34080
34123: POP
34124: POP
// end ;
34125: LD_VAR 0 4
34129: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34130: LD_INT 0
34132: PPUSH
34133: PPUSH
34134: PPUSH
// result := true ;
34135: LD_ADDR_VAR 0 3
34139: PUSH
34140: LD_INT 1
34142: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34143: LD_ADDR_VAR 0 5
34147: PUSH
34148: LD_VAR 0 2
34152: PPUSH
34153: CALL_OW 480
34157: ST_TO_ADDR
// if not tmp then
34158: LD_VAR 0 5
34162: NOT
34163: IFFALSE 34167
// exit ;
34165: GO 34216
// for i in tmp do
34167: LD_ADDR_VAR 0 4
34171: PUSH
34172: LD_VAR 0 5
34176: PUSH
34177: FOR_IN
34178: IFFALSE 34214
// if GetTech ( i , side ) <> state_researched then
34180: LD_VAR 0 4
34184: PPUSH
34185: LD_VAR 0 1
34189: PPUSH
34190: CALL_OW 321
34194: PUSH
34195: LD_INT 2
34197: NONEQUAL
34198: IFFALSE 34212
// begin result := false ;
34200: LD_ADDR_VAR 0 3
34204: PUSH
34205: LD_INT 0
34207: ST_TO_ADDR
// exit ;
34208: POP
34209: POP
34210: GO 34216
// end ;
34212: GO 34177
34214: POP
34215: POP
// end ;
34216: LD_VAR 0 3
34220: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34221: LD_INT 0
34223: PPUSH
34224: PPUSH
34225: PPUSH
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
34230: PPUSH
34231: PPUSH
34232: PPUSH
34233: PPUSH
34234: PPUSH
34235: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34236: LD_VAR 0 1
34240: NOT
34241: PUSH
34242: LD_VAR 0 1
34246: PPUSH
34247: CALL_OW 257
34251: PUSH
34252: LD_INT 9
34254: NONEQUAL
34255: OR
34256: IFFALSE 34260
// exit ;
34258: GO 34833
// side := GetSide ( unit ) ;
34260: LD_ADDR_VAR 0 9
34264: PUSH
34265: LD_VAR 0 1
34269: PPUSH
34270: CALL_OW 255
34274: ST_TO_ADDR
// tech_space := tech_spacanom ;
34275: LD_ADDR_VAR 0 12
34279: PUSH
34280: LD_INT 29
34282: ST_TO_ADDR
// tech_time := tech_taurad ;
34283: LD_ADDR_VAR 0 13
34287: PUSH
34288: LD_INT 28
34290: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34291: LD_ADDR_VAR 0 11
34295: PUSH
34296: LD_VAR 0 1
34300: PPUSH
34301: CALL_OW 310
34305: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34306: LD_VAR 0 11
34310: PPUSH
34311: CALL_OW 247
34315: PUSH
34316: LD_INT 2
34318: EQUAL
34319: IFFALSE 34323
// exit ;
34321: GO 34833
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34323: LD_ADDR_VAR 0 8
34327: PUSH
34328: LD_INT 81
34330: PUSH
34331: LD_VAR 0 9
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 3
34342: PUSH
34343: LD_INT 21
34345: PUSH
34346: LD_INT 3
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PPUSH
34361: CALL_OW 69
34365: ST_TO_ADDR
// if not tmp then
34366: LD_VAR 0 8
34370: NOT
34371: IFFALSE 34375
// exit ;
34373: GO 34833
// if in_unit then
34375: LD_VAR 0 11
34379: IFFALSE 34403
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34381: LD_ADDR_VAR 0 10
34385: PUSH
34386: LD_VAR 0 8
34390: PPUSH
34391: LD_VAR 0 11
34395: PPUSH
34396: CALL_OW 74
34400: ST_TO_ADDR
34401: GO 34423
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34403: LD_ADDR_VAR 0 10
34407: PUSH
34408: LD_VAR 0 8
34412: PPUSH
34413: LD_VAR 0 1
34417: PPUSH
34418: CALL_OW 74
34422: ST_TO_ADDR
// if not enemy then
34423: LD_VAR 0 10
34427: NOT
34428: IFFALSE 34432
// exit ;
34430: GO 34833
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34432: LD_VAR 0 11
34436: PUSH
34437: LD_VAR 0 11
34441: PPUSH
34442: LD_VAR 0 10
34446: PPUSH
34447: CALL_OW 296
34451: PUSH
34452: LD_INT 13
34454: GREATER
34455: AND
34456: PUSH
34457: LD_VAR 0 1
34461: PPUSH
34462: LD_VAR 0 10
34466: PPUSH
34467: CALL_OW 296
34471: PUSH
34472: LD_INT 12
34474: GREATER
34475: OR
34476: IFFALSE 34480
// exit ;
34478: GO 34833
// missile := [ 1 ] ;
34480: LD_ADDR_VAR 0 14
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: EMPTY
34489: LIST
34490: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34491: LD_VAR 0 9
34495: PPUSH
34496: LD_VAR 0 12
34500: PPUSH
34501: CALL_OW 325
34505: IFFALSE 34534
// missile := Insert ( missile , missile + 1 , 2 ) ;
34507: LD_ADDR_VAR 0 14
34511: PUSH
34512: LD_VAR 0 14
34516: PPUSH
34517: LD_VAR 0 14
34521: PUSH
34522: LD_INT 1
34524: PLUS
34525: PPUSH
34526: LD_INT 2
34528: PPUSH
34529: CALL_OW 2
34533: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34534: LD_VAR 0 9
34538: PPUSH
34539: LD_VAR 0 13
34543: PPUSH
34544: CALL_OW 325
34548: PUSH
34549: LD_VAR 0 10
34553: PPUSH
34554: CALL_OW 255
34558: PPUSH
34559: LD_VAR 0 13
34563: PPUSH
34564: CALL_OW 325
34568: NOT
34569: AND
34570: IFFALSE 34599
// missile := Insert ( missile , missile + 1 , 3 ) ;
34572: LD_ADDR_VAR 0 14
34576: PUSH
34577: LD_VAR 0 14
34581: PPUSH
34582: LD_VAR 0 14
34586: PUSH
34587: LD_INT 1
34589: PLUS
34590: PPUSH
34591: LD_INT 3
34593: PPUSH
34594: CALL_OW 2
34598: ST_TO_ADDR
// if missile < 2 then
34599: LD_VAR 0 14
34603: PUSH
34604: LD_INT 2
34606: LESS
34607: IFFALSE 34611
// exit ;
34609: GO 34833
// x := GetX ( enemy ) ;
34611: LD_ADDR_VAR 0 4
34615: PUSH
34616: LD_VAR 0 10
34620: PPUSH
34621: CALL_OW 250
34625: ST_TO_ADDR
// y := GetY ( enemy ) ;
34626: LD_ADDR_VAR 0 5
34630: PUSH
34631: LD_VAR 0 10
34635: PPUSH
34636: CALL_OW 251
34640: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34641: LD_ADDR_VAR 0 6
34645: PUSH
34646: LD_VAR 0 4
34650: PUSH
34651: LD_INT 1
34653: NEG
34654: PPUSH
34655: LD_INT 1
34657: PPUSH
34658: CALL_OW 12
34662: PLUS
34663: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34664: LD_ADDR_VAR 0 7
34668: PUSH
34669: LD_VAR 0 5
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PPUSH
34678: LD_INT 1
34680: PPUSH
34681: CALL_OW 12
34685: PLUS
34686: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34687: LD_VAR 0 6
34691: PPUSH
34692: LD_VAR 0 7
34696: PPUSH
34697: CALL_OW 488
34701: NOT
34702: IFFALSE 34724
// begin _x := x ;
34704: LD_ADDR_VAR 0 6
34708: PUSH
34709: LD_VAR 0 4
34713: ST_TO_ADDR
// _y := y ;
34714: LD_ADDR_VAR 0 7
34718: PUSH
34719: LD_VAR 0 5
34723: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34724: LD_ADDR_VAR 0 3
34728: PUSH
34729: LD_INT 1
34731: PPUSH
34732: LD_VAR 0 14
34736: PPUSH
34737: CALL_OW 12
34741: ST_TO_ADDR
// case i of 1 :
34742: LD_VAR 0 3
34746: PUSH
34747: LD_INT 1
34749: DOUBLE
34750: EQUAL
34751: IFTRUE 34755
34753: GO 34772
34755: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34756: LD_VAR 0 1
34760: PPUSH
34761: LD_VAR 0 10
34765: PPUSH
34766: CALL_OW 115
34770: GO 34833
34772: LD_INT 2
34774: DOUBLE
34775: EQUAL
34776: IFTRUE 34780
34778: GO 34802
34780: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34781: LD_VAR 0 1
34785: PPUSH
34786: LD_VAR 0 6
34790: PPUSH
34791: LD_VAR 0 7
34795: PPUSH
34796: CALL_OW 153
34800: GO 34833
34802: LD_INT 3
34804: DOUBLE
34805: EQUAL
34806: IFTRUE 34810
34808: GO 34832
34810: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34811: LD_VAR 0 1
34815: PPUSH
34816: LD_VAR 0 6
34820: PPUSH
34821: LD_VAR 0 7
34825: PPUSH
34826: CALL_OW 154
34830: GO 34833
34832: POP
// end ;
34833: LD_VAR 0 2
34837: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34838: LD_INT 0
34840: PPUSH
34841: PPUSH
34842: PPUSH
34843: PPUSH
34844: PPUSH
34845: PPUSH
// if not unit or not building then
34846: LD_VAR 0 1
34850: NOT
34851: PUSH
34852: LD_VAR 0 2
34856: NOT
34857: OR
34858: IFFALSE 34862
// exit ;
34860: GO 35020
// x := GetX ( building ) ;
34862: LD_ADDR_VAR 0 5
34866: PUSH
34867: LD_VAR 0 2
34871: PPUSH
34872: CALL_OW 250
34876: ST_TO_ADDR
// y := GetY ( building ) ;
34877: LD_ADDR_VAR 0 6
34881: PUSH
34882: LD_VAR 0 2
34886: PPUSH
34887: CALL_OW 251
34891: ST_TO_ADDR
// for i = 0 to 5 do
34892: LD_ADDR_VAR 0 4
34896: PUSH
34897: DOUBLE
34898: LD_INT 0
34900: DEC
34901: ST_TO_ADDR
34902: LD_INT 5
34904: PUSH
34905: FOR_TO
34906: IFFALSE 35018
// begin _x := ShiftX ( x , i , 3 ) ;
34908: LD_ADDR_VAR 0 7
34912: PUSH
34913: LD_VAR 0 5
34917: PPUSH
34918: LD_VAR 0 4
34922: PPUSH
34923: LD_INT 3
34925: PPUSH
34926: CALL_OW 272
34930: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34931: LD_ADDR_VAR 0 8
34935: PUSH
34936: LD_VAR 0 6
34940: PPUSH
34941: LD_VAR 0 4
34945: PPUSH
34946: LD_INT 3
34948: PPUSH
34949: CALL_OW 273
34953: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34954: LD_VAR 0 7
34958: PPUSH
34959: LD_VAR 0 8
34963: PPUSH
34964: CALL_OW 488
34968: NOT
34969: IFFALSE 34973
// continue ;
34971: GO 34905
// if HexInfo ( _x , _y ) = 0 then
34973: LD_VAR 0 7
34977: PPUSH
34978: LD_VAR 0 8
34982: PPUSH
34983: CALL_OW 428
34987: PUSH
34988: LD_INT 0
34990: EQUAL
34991: IFFALSE 35016
// begin ComMoveXY ( unit , _x , _y ) ;
34993: LD_VAR 0 1
34997: PPUSH
34998: LD_VAR 0 7
35002: PPUSH
35003: LD_VAR 0 8
35007: PPUSH
35008: CALL_OW 111
// exit ;
35012: POP
35013: POP
35014: GO 35020
// end ; end ;
35016: GO 34905
35018: POP
35019: POP
// end ;
35020: LD_VAR 0 3
35024: RET
// export function ScanBase ( side , base_area ) ; begin
35025: LD_INT 0
35027: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35028: LD_ADDR_VAR 0 3
35032: PUSH
35033: LD_VAR 0 2
35037: PPUSH
35038: LD_INT 81
35040: PUSH
35041: LD_VAR 0 1
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PPUSH
35050: CALL_OW 70
35054: ST_TO_ADDR
// end ;
35055: LD_VAR 0 3
35059: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35060: LD_INT 0
35062: PPUSH
35063: PPUSH
35064: PPUSH
35065: PPUSH
// result := false ;
35066: LD_ADDR_VAR 0 2
35070: PUSH
35071: LD_INT 0
35073: ST_TO_ADDR
// side := GetSide ( unit ) ;
35074: LD_ADDR_VAR 0 3
35078: PUSH
35079: LD_VAR 0 1
35083: PPUSH
35084: CALL_OW 255
35088: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35089: LD_ADDR_VAR 0 4
35093: PUSH
35094: LD_VAR 0 1
35098: PPUSH
35099: CALL_OW 248
35103: ST_TO_ADDR
// case nat of 1 :
35104: LD_VAR 0 4
35108: PUSH
35109: LD_INT 1
35111: DOUBLE
35112: EQUAL
35113: IFTRUE 35117
35115: GO 35128
35117: POP
// tech := tech_lassight ; 2 :
35118: LD_ADDR_VAR 0 5
35122: PUSH
35123: LD_INT 12
35125: ST_TO_ADDR
35126: GO 35167
35128: LD_INT 2
35130: DOUBLE
35131: EQUAL
35132: IFTRUE 35136
35134: GO 35147
35136: POP
// tech := tech_mortar ; 3 :
35137: LD_ADDR_VAR 0 5
35141: PUSH
35142: LD_INT 41
35144: ST_TO_ADDR
35145: GO 35167
35147: LD_INT 3
35149: DOUBLE
35150: EQUAL
35151: IFTRUE 35155
35153: GO 35166
35155: POP
// tech := tech_bazooka ; end ;
35156: LD_ADDR_VAR 0 5
35160: PUSH
35161: LD_INT 44
35163: ST_TO_ADDR
35164: GO 35167
35166: POP
// if Researched ( side , tech ) then
35167: LD_VAR 0 3
35171: PPUSH
35172: LD_VAR 0 5
35176: PPUSH
35177: CALL_OW 325
35181: IFFALSE 35208
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35183: LD_ADDR_VAR 0 2
35187: PUSH
35188: LD_INT 5
35190: PUSH
35191: LD_INT 8
35193: PUSH
35194: LD_INT 9
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: LIST
35201: PUSH
35202: LD_VAR 0 4
35206: ARRAY
35207: ST_TO_ADDR
// end ;
35208: LD_VAR 0 2
35212: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35213: LD_INT 0
35215: PPUSH
35216: PPUSH
35217: PPUSH
// if not mines then
35218: LD_VAR 0 2
35222: NOT
35223: IFFALSE 35227
// exit ;
35225: GO 35371
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35227: LD_ADDR_VAR 0 5
35231: PUSH
35232: LD_INT 81
35234: PUSH
35235: LD_VAR 0 1
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 3
35246: PUSH
35247: LD_INT 21
35249: PUSH
35250: LD_INT 3
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PPUSH
35265: CALL_OW 69
35269: ST_TO_ADDR
// for i in mines do
35270: LD_ADDR_VAR 0 4
35274: PUSH
35275: LD_VAR 0 2
35279: PUSH
35280: FOR_IN
35281: IFFALSE 35369
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35283: LD_VAR 0 4
35287: PUSH
35288: LD_INT 1
35290: ARRAY
35291: PPUSH
35292: LD_VAR 0 4
35296: PUSH
35297: LD_INT 2
35299: ARRAY
35300: PPUSH
35301: CALL_OW 458
35305: NOT
35306: IFFALSE 35310
// continue ;
35308: GO 35280
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35310: LD_VAR 0 4
35314: PUSH
35315: LD_INT 1
35317: ARRAY
35318: PPUSH
35319: LD_VAR 0 4
35323: PUSH
35324: LD_INT 2
35326: ARRAY
35327: PPUSH
35328: CALL_OW 428
35332: PUSH
35333: LD_VAR 0 5
35337: IN
35338: IFFALSE 35367
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35340: LD_VAR 0 4
35344: PUSH
35345: LD_INT 1
35347: ARRAY
35348: PPUSH
35349: LD_VAR 0 4
35353: PUSH
35354: LD_INT 2
35356: ARRAY
35357: PPUSH
35358: LD_VAR 0 1
35362: PPUSH
35363: CALL_OW 456
// end ;
35367: GO 35280
35369: POP
35370: POP
// end ;
35371: LD_VAR 0 3
35375: RET
// export function Count ( array ) ; var i ; begin
35376: LD_INT 0
35378: PPUSH
35379: PPUSH
// result := 0 ;
35380: LD_ADDR_VAR 0 2
35384: PUSH
35385: LD_INT 0
35387: ST_TO_ADDR
// for i in array do
35388: LD_ADDR_VAR 0 3
35392: PUSH
35393: LD_VAR 0 1
35397: PUSH
35398: FOR_IN
35399: IFFALSE 35423
// if i then
35401: LD_VAR 0 3
35405: IFFALSE 35421
// result := result + 1 ;
35407: LD_ADDR_VAR 0 2
35411: PUSH
35412: LD_VAR 0 2
35416: PUSH
35417: LD_INT 1
35419: PLUS
35420: ST_TO_ADDR
35421: GO 35398
35423: POP
35424: POP
// end ;
35425: LD_VAR 0 2
35429: RET
// export function IsEmpty ( building ) ; begin
35430: LD_INT 0
35432: PPUSH
// if not building then
35433: LD_VAR 0 1
35437: NOT
35438: IFFALSE 35442
// exit ;
35440: GO 35485
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35442: LD_ADDR_VAR 0 2
35446: PUSH
35447: LD_VAR 0 1
35451: PUSH
35452: LD_INT 22
35454: PUSH
35455: LD_VAR 0 1
35459: PPUSH
35460: CALL_OW 255
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 58
35471: PUSH
35472: EMPTY
35473: LIST
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PPUSH
35479: CALL_OW 69
35483: IN
35484: ST_TO_ADDR
// end ;
35485: LD_VAR 0 2
35489: RET
// export function IsNotFull ( building ) ; begin
35490: LD_INT 0
35492: PPUSH
// if not building then
35493: LD_VAR 0 1
35497: NOT
35498: IFFALSE 35502
// exit ;
35500: GO 35521
// result := UnitsInside ( building ) < 6 ;
35502: LD_ADDR_VAR 0 2
35506: PUSH
35507: LD_VAR 0 1
35511: PPUSH
35512: CALL_OW 313
35516: PUSH
35517: LD_INT 6
35519: LESS
35520: ST_TO_ADDR
// end ;
35521: LD_VAR 0 2
35525: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35526: LD_INT 0
35528: PPUSH
35529: PPUSH
35530: PPUSH
35531: PPUSH
// tmp := [ ] ;
35532: LD_ADDR_VAR 0 3
35536: PUSH
35537: EMPTY
35538: ST_TO_ADDR
// list := [ ] ;
35539: LD_ADDR_VAR 0 5
35543: PUSH
35544: EMPTY
35545: ST_TO_ADDR
// for i = 16 to 25 do
35546: LD_ADDR_VAR 0 4
35550: PUSH
35551: DOUBLE
35552: LD_INT 16
35554: DEC
35555: ST_TO_ADDR
35556: LD_INT 25
35558: PUSH
35559: FOR_TO
35560: IFFALSE 35633
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35562: LD_ADDR_VAR 0 3
35566: PUSH
35567: LD_VAR 0 3
35571: PUSH
35572: LD_INT 22
35574: PUSH
35575: LD_VAR 0 1
35579: PPUSH
35580: CALL_OW 255
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 91
35591: PUSH
35592: LD_VAR 0 1
35596: PUSH
35597: LD_INT 6
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 30
35607: PUSH
35608: LD_VAR 0 4
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: PUSH
35622: EMPTY
35623: LIST
35624: PPUSH
35625: CALL_OW 69
35629: ADD
35630: ST_TO_ADDR
35631: GO 35559
35633: POP
35634: POP
// for i = 1 to tmp do
35635: LD_ADDR_VAR 0 4
35639: PUSH
35640: DOUBLE
35641: LD_INT 1
35643: DEC
35644: ST_TO_ADDR
35645: LD_VAR 0 3
35649: PUSH
35650: FOR_TO
35651: IFFALSE 35739
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35653: LD_ADDR_VAR 0 5
35657: PUSH
35658: LD_VAR 0 5
35662: PUSH
35663: LD_VAR 0 3
35667: PUSH
35668: LD_VAR 0 4
35672: ARRAY
35673: PPUSH
35674: CALL_OW 266
35678: PUSH
35679: LD_VAR 0 3
35683: PUSH
35684: LD_VAR 0 4
35688: ARRAY
35689: PPUSH
35690: CALL_OW 250
35694: PUSH
35695: LD_VAR 0 3
35699: PUSH
35700: LD_VAR 0 4
35704: ARRAY
35705: PPUSH
35706: CALL_OW 251
35710: PUSH
35711: LD_VAR 0 3
35715: PUSH
35716: LD_VAR 0 4
35720: ARRAY
35721: PPUSH
35722: CALL_OW 254
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: PUSH
35733: EMPTY
35734: LIST
35735: ADD
35736: ST_TO_ADDR
35737: GO 35650
35739: POP
35740: POP
// result := list ;
35741: LD_ADDR_VAR 0 2
35745: PUSH
35746: LD_VAR 0 5
35750: ST_TO_ADDR
// end ;
35751: LD_VAR 0 2
35755: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35756: LD_INT 0
35758: PPUSH
35759: PPUSH
35760: PPUSH
35761: PPUSH
35762: PPUSH
35763: PPUSH
35764: PPUSH
// if not factory then
35765: LD_VAR 0 1
35769: NOT
35770: IFFALSE 35774
// exit ;
35772: GO 36367
// if control = control_apeman then
35774: LD_VAR 0 4
35778: PUSH
35779: LD_INT 5
35781: EQUAL
35782: IFFALSE 35891
// begin tmp := UnitsInside ( factory ) ;
35784: LD_ADDR_VAR 0 8
35788: PUSH
35789: LD_VAR 0 1
35793: PPUSH
35794: CALL_OW 313
35798: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35799: LD_VAR 0 8
35803: PPUSH
35804: LD_INT 25
35806: PUSH
35807: LD_INT 12
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PPUSH
35814: CALL_OW 72
35818: NOT
35819: IFFALSE 35829
// control := control_manual ;
35821: LD_ADDR_VAR 0 4
35825: PUSH
35826: LD_INT 1
35828: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35829: LD_ADDR_VAR 0 8
35833: PUSH
35834: LD_VAR 0 1
35838: PPUSH
35839: CALL 35526 0 1
35843: ST_TO_ADDR
// if tmp then
35844: LD_VAR 0 8
35848: IFFALSE 35891
// begin for i in tmp do
35850: LD_ADDR_VAR 0 7
35854: PUSH
35855: LD_VAR 0 8
35859: PUSH
35860: FOR_IN
35861: IFFALSE 35889
// if i [ 1 ] = b_ext_radio then
35863: LD_VAR 0 7
35867: PUSH
35868: LD_INT 1
35870: ARRAY
35871: PUSH
35872: LD_INT 22
35874: EQUAL
35875: IFFALSE 35887
// begin control := control_remote ;
35877: LD_ADDR_VAR 0 4
35881: PUSH
35882: LD_INT 2
35884: ST_TO_ADDR
// break ;
35885: GO 35889
// end ;
35887: GO 35860
35889: POP
35890: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35891: LD_VAR 0 1
35895: PPUSH
35896: LD_VAR 0 2
35900: PPUSH
35901: LD_VAR 0 3
35905: PPUSH
35906: LD_VAR 0 4
35910: PPUSH
35911: LD_VAR 0 5
35915: PPUSH
35916: CALL_OW 448
35920: IFFALSE 35955
// begin result := [ chassis , engine , control , weapon ] ;
35922: LD_ADDR_VAR 0 6
35926: PUSH
35927: LD_VAR 0 2
35931: PUSH
35932: LD_VAR 0 3
35936: PUSH
35937: LD_VAR 0 4
35941: PUSH
35942: LD_VAR 0 5
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: ST_TO_ADDR
// exit ;
35953: GO 36367
// end ; _chassis := AvailableChassisList ( factory ) ;
35955: LD_ADDR_VAR 0 9
35959: PUSH
35960: LD_VAR 0 1
35964: PPUSH
35965: CALL_OW 475
35969: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35970: LD_ADDR_VAR 0 11
35974: PUSH
35975: LD_VAR 0 1
35979: PPUSH
35980: CALL_OW 476
35984: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35985: LD_ADDR_VAR 0 12
35989: PUSH
35990: LD_VAR 0 1
35994: PPUSH
35995: CALL_OW 477
35999: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36000: LD_ADDR_VAR 0 10
36004: PUSH
36005: LD_VAR 0 1
36009: PPUSH
36010: CALL_OW 478
36014: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36015: LD_VAR 0 9
36019: NOT
36020: PUSH
36021: LD_VAR 0 11
36025: NOT
36026: OR
36027: PUSH
36028: LD_VAR 0 12
36032: NOT
36033: OR
36034: PUSH
36035: LD_VAR 0 10
36039: NOT
36040: OR
36041: IFFALSE 36076
// begin result := [ chassis , engine , control , weapon ] ;
36043: LD_ADDR_VAR 0 6
36047: PUSH
36048: LD_VAR 0 2
36052: PUSH
36053: LD_VAR 0 3
36057: PUSH
36058: LD_VAR 0 4
36062: PUSH
36063: LD_VAR 0 5
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: ST_TO_ADDR
// exit ;
36074: GO 36367
// end ; if not chassis in _chassis then
36076: LD_VAR 0 2
36080: PUSH
36081: LD_VAR 0 9
36085: IN
36086: NOT
36087: IFFALSE 36113
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36089: LD_ADDR_VAR 0 2
36093: PUSH
36094: LD_VAR 0 9
36098: PUSH
36099: LD_INT 1
36101: PPUSH
36102: LD_VAR 0 9
36106: PPUSH
36107: CALL_OW 12
36111: ARRAY
36112: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36113: LD_VAR 0 2
36117: PPUSH
36118: LD_VAR 0 3
36122: PPUSH
36123: CALL 36372 0 2
36127: NOT
36128: IFFALSE 36187
// repeat engine := _engine [ 1 ] ;
36130: LD_ADDR_VAR 0 3
36134: PUSH
36135: LD_VAR 0 11
36139: PUSH
36140: LD_INT 1
36142: ARRAY
36143: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36144: LD_ADDR_VAR 0 11
36148: PUSH
36149: LD_VAR 0 11
36153: PPUSH
36154: LD_INT 1
36156: PPUSH
36157: CALL_OW 3
36161: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36162: LD_VAR 0 2
36166: PPUSH
36167: LD_VAR 0 3
36171: PPUSH
36172: CALL 36372 0 2
36176: PUSH
36177: LD_VAR 0 11
36181: PUSH
36182: EMPTY
36183: EQUAL
36184: OR
36185: IFFALSE 36130
// if not control in _control then
36187: LD_VAR 0 4
36191: PUSH
36192: LD_VAR 0 12
36196: IN
36197: NOT
36198: IFFALSE 36224
// control := _control [ rand ( 1 , _control ) ] ;
36200: LD_ADDR_VAR 0 4
36204: PUSH
36205: LD_VAR 0 12
36209: PUSH
36210: LD_INT 1
36212: PPUSH
36213: LD_VAR 0 12
36217: PPUSH
36218: CALL_OW 12
36222: ARRAY
36223: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36224: LD_VAR 0 2
36228: PPUSH
36229: LD_VAR 0 5
36233: PPUSH
36234: CALL 36592 0 2
36238: NOT
36239: IFFALSE 36298
// repeat weapon := _weapon [ 1 ] ;
36241: LD_ADDR_VAR 0 5
36245: PUSH
36246: LD_VAR 0 10
36250: PUSH
36251: LD_INT 1
36253: ARRAY
36254: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36255: LD_ADDR_VAR 0 10
36259: PUSH
36260: LD_VAR 0 10
36264: PPUSH
36265: LD_INT 1
36267: PPUSH
36268: CALL_OW 3
36272: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36273: LD_VAR 0 2
36277: PPUSH
36278: LD_VAR 0 5
36282: PPUSH
36283: CALL 36592 0 2
36287: PUSH
36288: LD_VAR 0 10
36292: PUSH
36293: EMPTY
36294: EQUAL
36295: OR
36296: IFFALSE 36241
// result := [ ] ;
36298: LD_ADDR_VAR 0 6
36302: PUSH
36303: EMPTY
36304: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36305: LD_VAR 0 1
36309: PPUSH
36310: LD_VAR 0 2
36314: PPUSH
36315: LD_VAR 0 3
36319: PPUSH
36320: LD_VAR 0 4
36324: PPUSH
36325: LD_VAR 0 5
36329: PPUSH
36330: CALL_OW 448
36334: IFFALSE 36367
// result := [ chassis , engine , control , weapon ] ;
36336: LD_ADDR_VAR 0 6
36340: PUSH
36341: LD_VAR 0 2
36345: PUSH
36346: LD_VAR 0 3
36350: PUSH
36351: LD_VAR 0 4
36355: PUSH
36356: LD_VAR 0 5
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: ST_TO_ADDR
// end ;
36367: LD_VAR 0 6
36371: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36372: LD_INT 0
36374: PPUSH
// if not chassis or not engine then
36375: LD_VAR 0 1
36379: NOT
36380: PUSH
36381: LD_VAR 0 2
36385: NOT
36386: OR
36387: IFFALSE 36391
// exit ;
36389: GO 36587
// case engine of engine_solar :
36391: LD_VAR 0 2
36395: PUSH
36396: LD_INT 2
36398: DOUBLE
36399: EQUAL
36400: IFTRUE 36404
36402: GO 36442
36404: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36405: LD_ADDR_VAR 0 3
36409: PUSH
36410: LD_INT 11
36412: PUSH
36413: LD_INT 12
36415: PUSH
36416: LD_INT 13
36418: PUSH
36419: LD_INT 14
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: LD_INT 2
36427: PUSH
36428: LD_INT 3
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: ST_TO_ADDR
36440: GO 36571
36442: LD_INT 1
36444: DOUBLE
36445: EQUAL
36446: IFTRUE 36450
36448: GO 36512
36450: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36451: LD_ADDR_VAR 0 3
36455: PUSH
36456: LD_INT 11
36458: PUSH
36459: LD_INT 12
36461: PUSH
36462: LD_INT 13
36464: PUSH
36465: LD_INT 14
36467: PUSH
36468: LD_INT 1
36470: PUSH
36471: LD_INT 2
36473: PUSH
36474: LD_INT 3
36476: PUSH
36477: LD_INT 4
36479: PUSH
36480: LD_INT 5
36482: PUSH
36483: LD_INT 21
36485: PUSH
36486: LD_INT 23
36488: PUSH
36489: LD_INT 22
36491: PUSH
36492: LD_INT 24
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: ST_TO_ADDR
36510: GO 36571
36512: LD_INT 3
36514: DOUBLE
36515: EQUAL
36516: IFTRUE 36520
36518: GO 36570
36520: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36521: LD_ADDR_VAR 0 3
36525: PUSH
36526: LD_INT 13
36528: PUSH
36529: LD_INT 14
36531: PUSH
36532: LD_INT 2
36534: PUSH
36535: LD_INT 3
36537: PUSH
36538: LD_INT 4
36540: PUSH
36541: LD_INT 5
36543: PUSH
36544: LD_INT 21
36546: PUSH
36547: LD_INT 22
36549: PUSH
36550: LD_INT 23
36552: PUSH
36553: LD_INT 24
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: ST_TO_ADDR
36568: GO 36571
36570: POP
// result := ( chassis in result ) ;
36571: LD_ADDR_VAR 0 3
36575: PUSH
36576: LD_VAR 0 1
36580: PUSH
36581: LD_VAR 0 3
36585: IN
36586: ST_TO_ADDR
// end ;
36587: LD_VAR 0 3
36591: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36592: LD_INT 0
36594: PPUSH
// if not chassis or not weapon then
36595: LD_VAR 0 1
36599: NOT
36600: PUSH
36601: LD_VAR 0 2
36605: NOT
36606: OR
36607: IFFALSE 36611
// exit ;
36609: GO 37637
// case weapon of us_machine_gun :
36611: LD_VAR 0 2
36615: PUSH
36616: LD_INT 2
36618: DOUBLE
36619: EQUAL
36620: IFTRUE 36624
36622: GO 36654
36624: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36625: LD_ADDR_VAR 0 3
36629: PUSH
36630: LD_INT 1
36632: PUSH
36633: LD_INT 2
36635: PUSH
36636: LD_INT 3
36638: PUSH
36639: LD_INT 4
36641: PUSH
36642: LD_INT 5
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: ST_TO_ADDR
36652: GO 37621
36654: LD_INT 3
36656: DOUBLE
36657: EQUAL
36658: IFTRUE 36662
36660: GO 36692
36662: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36663: LD_ADDR_VAR 0 3
36667: PUSH
36668: LD_INT 1
36670: PUSH
36671: LD_INT 2
36673: PUSH
36674: LD_INT 3
36676: PUSH
36677: LD_INT 4
36679: PUSH
36680: LD_INT 5
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
36690: GO 37621
36692: LD_INT 11
36694: DOUBLE
36695: EQUAL
36696: IFTRUE 36700
36698: GO 36730
36700: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36701: LD_ADDR_VAR 0 3
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 2
36711: PUSH
36712: LD_INT 3
36714: PUSH
36715: LD_INT 4
36717: PUSH
36718: LD_INT 5
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: ST_TO_ADDR
36728: GO 37621
36730: LD_INT 4
36732: DOUBLE
36733: EQUAL
36734: IFTRUE 36738
36736: GO 36764
36738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36739: LD_ADDR_VAR 0 3
36743: PUSH
36744: LD_INT 2
36746: PUSH
36747: LD_INT 3
36749: PUSH
36750: LD_INT 4
36752: PUSH
36753: LD_INT 5
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: ST_TO_ADDR
36762: GO 37621
36764: LD_INT 5
36766: DOUBLE
36767: EQUAL
36768: IFTRUE 36772
36770: GO 36798
36772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36773: LD_ADDR_VAR 0 3
36777: PUSH
36778: LD_INT 2
36780: PUSH
36781: LD_INT 3
36783: PUSH
36784: LD_INT 4
36786: PUSH
36787: LD_INT 5
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: ST_TO_ADDR
36796: GO 37621
36798: LD_INT 9
36800: DOUBLE
36801: EQUAL
36802: IFTRUE 36806
36804: GO 36832
36806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36807: LD_ADDR_VAR 0 3
36811: PUSH
36812: LD_INT 2
36814: PUSH
36815: LD_INT 3
36817: PUSH
36818: LD_INT 4
36820: PUSH
36821: LD_INT 5
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: ST_TO_ADDR
36830: GO 37621
36832: LD_INT 7
36834: DOUBLE
36835: EQUAL
36836: IFTRUE 36840
36838: GO 36866
36840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36841: LD_ADDR_VAR 0 3
36845: PUSH
36846: LD_INT 2
36848: PUSH
36849: LD_INT 3
36851: PUSH
36852: LD_INT 4
36854: PUSH
36855: LD_INT 5
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: ST_TO_ADDR
36864: GO 37621
36866: LD_INT 12
36868: DOUBLE
36869: EQUAL
36870: IFTRUE 36874
36872: GO 36900
36874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36875: LD_ADDR_VAR 0 3
36879: PUSH
36880: LD_INT 2
36882: PUSH
36883: LD_INT 3
36885: PUSH
36886: LD_INT 4
36888: PUSH
36889: LD_INT 5
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: ST_TO_ADDR
36898: GO 37621
36900: LD_INT 13
36902: DOUBLE
36903: EQUAL
36904: IFTRUE 36908
36906: GO 36934
36908: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36909: LD_ADDR_VAR 0 3
36913: PUSH
36914: LD_INT 2
36916: PUSH
36917: LD_INT 3
36919: PUSH
36920: LD_INT 4
36922: PUSH
36923: LD_INT 5
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: ST_TO_ADDR
36932: GO 37621
36934: LD_INT 14
36936: DOUBLE
36937: EQUAL
36938: IFTRUE 36942
36940: GO 36960
36942: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36943: LD_ADDR_VAR 0 3
36947: PUSH
36948: LD_INT 4
36950: PUSH
36951: LD_INT 5
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: ST_TO_ADDR
36958: GO 37621
36960: LD_INT 6
36962: DOUBLE
36963: EQUAL
36964: IFTRUE 36968
36966: GO 36986
36968: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36969: LD_ADDR_VAR 0 3
36973: PUSH
36974: LD_INT 4
36976: PUSH
36977: LD_INT 5
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: ST_TO_ADDR
36984: GO 37621
36986: LD_INT 10
36988: DOUBLE
36989: EQUAL
36990: IFTRUE 36994
36992: GO 37012
36994: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36995: LD_ADDR_VAR 0 3
36999: PUSH
37000: LD_INT 4
37002: PUSH
37003: LD_INT 5
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: ST_TO_ADDR
37010: GO 37621
37012: LD_INT 22
37014: DOUBLE
37015: EQUAL
37016: IFTRUE 37020
37018: GO 37046
37020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37021: LD_ADDR_VAR 0 3
37025: PUSH
37026: LD_INT 11
37028: PUSH
37029: LD_INT 12
37031: PUSH
37032: LD_INT 13
37034: PUSH
37035: LD_INT 14
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: ST_TO_ADDR
37044: GO 37621
37046: LD_INT 23
37048: DOUBLE
37049: EQUAL
37050: IFTRUE 37054
37052: GO 37080
37054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37055: LD_ADDR_VAR 0 3
37059: PUSH
37060: LD_INT 11
37062: PUSH
37063: LD_INT 12
37065: PUSH
37066: LD_INT 13
37068: PUSH
37069: LD_INT 14
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: ST_TO_ADDR
37078: GO 37621
37080: LD_INT 24
37082: DOUBLE
37083: EQUAL
37084: IFTRUE 37088
37086: GO 37114
37088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37089: LD_ADDR_VAR 0 3
37093: PUSH
37094: LD_INT 11
37096: PUSH
37097: LD_INT 12
37099: PUSH
37100: LD_INT 13
37102: PUSH
37103: LD_INT 14
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: ST_TO_ADDR
37112: GO 37621
37114: LD_INT 30
37116: DOUBLE
37117: EQUAL
37118: IFTRUE 37122
37120: GO 37148
37122: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37123: LD_ADDR_VAR 0 3
37127: PUSH
37128: LD_INT 11
37130: PUSH
37131: LD_INT 12
37133: PUSH
37134: LD_INT 13
37136: PUSH
37137: LD_INT 14
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: ST_TO_ADDR
37146: GO 37621
37148: LD_INT 25
37150: DOUBLE
37151: EQUAL
37152: IFTRUE 37156
37154: GO 37174
37156: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37157: LD_ADDR_VAR 0 3
37161: PUSH
37162: LD_INT 13
37164: PUSH
37165: LD_INT 14
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: ST_TO_ADDR
37172: GO 37621
37174: LD_INT 27
37176: DOUBLE
37177: EQUAL
37178: IFTRUE 37182
37180: GO 37200
37182: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37183: LD_ADDR_VAR 0 3
37187: PUSH
37188: LD_INT 13
37190: PUSH
37191: LD_INT 14
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: ST_TO_ADDR
37198: GO 37621
37200: LD_INT 28
37202: DOUBLE
37203: EQUAL
37204: IFTRUE 37208
37206: GO 37226
37208: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37209: LD_ADDR_VAR 0 3
37213: PUSH
37214: LD_INT 13
37216: PUSH
37217: LD_INT 14
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: ST_TO_ADDR
37224: GO 37621
37226: LD_INT 29
37228: DOUBLE
37229: EQUAL
37230: IFTRUE 37234
37232: GO 37252
37234: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37235: LD_ADDR_VAR 0 3
37239: PUSH
37240: LD_INT 13
37242: PUSH
37243: LD_INT 14
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: ST_TO_ADDR
37250: GO 37621
37252: LD_INT 31
37254: DOUBLE
37255: EQUAL
37256: IFTRUE 37260
37258: GO 37278
37260: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37261: LD_ADDR_VAR 0 3
37265: PUSH
37266: LD_INT 13
37268: PUSH
37269: LD_INT 14
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: ST_TO_ADDR
37276: GO 37621
37278: LD_INT 26
37280: DOUBLE
37281: EQUAL
37282: IFTRUE 37286
37284: GO 37304
37286: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37287: LD_ADDR_VAR 0 3
37291: PUSH
37292: LD_INT 13
37294: PUSH
37295: LD_INT 14
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: ST_TO_ADDR
37302: GO 37621
37304: LD_INT 42
37306: DOUBLE
37307: EQUAL
37308: IFTRUE 37312
37310: GO 37338
37312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37313: LD_ADDR_VAR 0 3
37317: PUSH
37318: LD_INT 21
37320: PUSH
37321: LD_INT 22
37323: PUSH
37324: LD_INT 23
37326: PUSH
37327: LD_INT 24
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: ST_TO_ADDR
37336: GO 37621
37338: LD_INT 43
37340: DOUBLE
37341: EQUAL
37342: IFTRUE 37346
37344: GO 37372
37346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37347: LD_ADDR_VAR 0 3
37351: PUSH
37352: LD_INT 21
37354: PUSH
37355: LD_INT 22
37357: PUSH
37358: LD_INT 23
37360: PUSH
37361: LD_INT 24
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: ST_TO_ADDR
37370: GO 37621
37372: LD_INT 44
37374: DOUBLE
37375: EQUAL
37376: IFTRUE 37380
37378: GO 37406
37380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37381: LD_ADDR_VAR 0 3
37385: PUSH
37386: LD_INT 21
37388: PUSH
37389: LD_INT 22
37391: PUSH
37392: LD_INT 23
37394: PUSH
37395: LD_INT 24
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: ST_TO_ADDR
37404: GO 37621
37406: LD_INT 45
37408: DOUBLE
37409: EQUAL
37410: IFTRUE 37414
37412: GO 37440
37414: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37415: LD_ADDR_VAR 0 3
37419: PUSH
37420: LD_INT 21
37422: PUSH
37423: LD_INT 22
37425: PUSH
37426: LD_INT 23
37428: PUSH
37429: LD_INT 24
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: ST_TO_ADDR
37438: GO 37621
37440: LD_INT 49
37442: DOUBLE
37443: EQUAL
37444: IFTRUE 37448
37446: GO 37474
37448: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37449: LD_ADDR_VAR 0 3
37453: PUSH
37454: LD_INT 21
37456: PUSH
37457: LD_INT 22
37459: PUSH
37460: LD_INT 23
37462: PUSH
37463: LD_INT 24
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: ST_TO_ADDR
37472: GO 37621
37474: LD_INT 51
37476: DOUBLE
37477: EQUAL
37478: IFTRUE 37482
37480: GO 37508
37482: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37483: LD_ADDR_VAR 0 3
37487: PUSH
37488: LD_INT 21
37490: PUSH
37491: LD_INT 22
37493: PUSH
37494: LD_INT 23
37496: PUSH
37497: LD_INT 24
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: ST_TO_ADDR
37506: GO 37621
37508: LD_INT 52
37510: DOUBLE
37511: EQUAL
37512: IFTRUE 37516
37514: GO 37542
37516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37517: LD_ADDR_VAR 0 3
37521: PUSH
37522: LD_INT 21
37524: PUSH
37525: LD_INT 22
37527: PUSH
37528: LD_INT 23
37530: PUSH
37531: LD_INT 24
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: ST_TO_ADDR
37540: GO 37621
37542: LD_INT 53
37544: DOUBLE
37545: EQUAL
37546: IFTRUE 37550
37548: GO 37568
37550: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37551: LD_ADDR_VAR 0 3
37555: PUSH
37556: LD_INT 23
37558: PUSH
37559: LD_INT 24
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: ST_TO_ADDR
37566: GO 37621
37568: LD_INT 46
37570: DOUBLE
37571: EQUAL
37572: IFTRUE 37576
37574: GO 37594
37576: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37577: LD_ADDR_VAR 0 3
37581: PUSH
37582: LD_INT 23
37584: PUSH
37585: LD_INT 24
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: ST_TO_ADDR
37592: GO 37621
37594: LD_INT 47
37596: DOUBLE
37597: EQUAL
37598: IFTRUE 37602
37600: GO 37620
37602: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37603: LD_ADDR_VAR 0 3
37607: PUSH
37608: LD_INT 23
37610: PUSH
37611: LD_INT 24
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: ST_TO_ADDR
37618: GO 37621
37620: POP
// result := ( chassis in result ) ;
37621: LD_ADDR_VAR 0 3
37625: PUSH
37626: LD_VAR 0 1
37630: PUSH
37631: LD_VAR 0 3
37635: IN
37636: ST_TO_ADDR
// end ;
37637: LD_VAR 0 3
37641: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37642: LD_INT 0
37644: PPUSH
37645: PPUSH
37646: PPUSH
37647: PPUSH
37648: PPUSH
37649: PPUSH
37650: PPUSH
// result := array ;
37651: LD_ADDR_VAR 0 5
37655: PUSH
37656: LD_VAR 0 1
37660: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37661: LD_VAR 0 1
37665: NOT
37666: PUSH
37667: LD_VAR 0 2
37671: NOT
37672: OR
37673: PUSH
37674: LD_VAR 0 3
37678: NOT
37679: OR
37680: PUSH
37681: LD_VAR 0 2
37685: PUSH
37686: LD_VAR 0 1
37690: GREATER
37691: OR
37692: PUSH
37693: LD_VAR 0 3
37697: PUSH
37698: LD_VAR 0 1
37702: GREATER
37703: OR
37704: IFFALSE 37708
// exit ;
37706: GO 38004
// if direction then
37708: LD_VAR 0 4
37712: IFFALSE 37776
// begin d := 1 ;
37714: LD_ADDR_VAR 0 9
37718: PUSH
37719: LD_INT 1
37721: ST_TO_ADDR
// if i_from > i_to then
37722: LD_VAR 0 2
37726: PUSH
37727: LD_VAR 0 3
37731: GREATER
37732: IFFALSE 37758
// length := ( array - i_from ) + i_to else
37734: LD_ADDR_VAR 0 11
37738: PUSH
37739: LD_VAR 0 1
37743: PUSH
37744: LD_VAR 0 2
37748: MINUS
37749: PUSH
37750: LD_VAR 0 3
37754: PLUS
37755: ST_TO_ADDR
37756: GO 37774
// length := i_to - i_from ;
37758: LD_ADDR_VAR 0 11
37762: PUSH
37763: LD_VAR 0 3
37767: PUSH
37768: LD_VAR 0 2
37772: MINUS
37773: ST_TO_ADDR
// end else
37774: GO 37837
// begin d := - 1 ;
37776: LD_ADDR_VAR 0 9
37780: PUSH
37781: LD_INT 1
37783: NEG
37784: ST_TO_ADDR
// if i_from > i_to then
37785: LD_VAR 0 2
37789: PUSH
37790: LD_VAR 0 3
37794: GREATER
37795: IFFALSE 37815
// length := i_from - i_to else
37797: LD_ADDR_VAR 0 11
37801: PUSH
37802: LD_VAR 0 2
37806: PUSH
37807: LD_VAR 0 3
37811: MINUS
37812: ST_TO_ADDR
37813: GO 37837
// length := ( array - i_to ) + i_from ;
37815: LD_ADDR_VAR 0 11
37819: PUSH
37820: LD_VAR 0 1
37824: PUSH
37825: LD_VAR 0 3
37829: MINUS
37830: PUSH
37831: LD_VAR 0 2
37835: PLUS
37836: ST_TO_ADDR
// end ; if not length then
37837: LD_VAR 0 11
37841: NOT
37842: IFFALSE 37846
// exit ;
37844: GO 38004
// tmp := array ;
37846: LD_ADDR_VAR 0 10
37850: PUSH
37851: LD_VAR 0 1
37855: ST_TO_ADDR
// for i = 1 to length do
37856: LD_ADDR_VAR 0 6
37860: PUSH
37861: DOUBLE
37862: LD_INT 1
37864: DEC
37865: ST_TO_ADDR
37866: LD_VAR 0 11
37870: PUSH
37871: FOR_TO
37872: IFFALSE 37992
// begin for j = 1 to array do
37874: LD_ADDR_VAR 0 7
37878: PUSH
37879: DOUBLE
37880: LD_INT 1
37882: DEC
37883: ST_TO_ADDR
37884: LD_VAR 0 1
37888: PUSH
37889: FOR_TO
37890: IFFALSE 37978
// begin k := j + d ;
37892: LD_ADDR_VAR 0 8
37896: PUSH
37897: LD_VAR 0 7
37901: PUSH
37902: LD_VAR 0 9
37906: PLUS
37907: ST_TO_ADDR
// if k > array then
37908: LD_VAR 0 8
37912: PUSH
37913: LD_VAR 0 1
37917: GREATER
37918: IFFALSE 37928
// k := 1 ;
37920: LD_ADDR_VAR 0 8
37924: PUSH
37925: LD_INT 1
37927: ST_TO_ADDR
// if not k then
37928: LD_VAR 0 8
37932: NOT
37933: IFFALSE 37945
// k := array ;
37935: LD_ADDR_VAR 0 8
37939: PUSH
37940: LD_VAR 0 1
37944: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37945: LD_ADDR_VAR 0 10
37949: PUSH
37950: LD_VAR 0 10
37954: PPUSH
37955: LD_VAR 0 8
37959: PPUSH
37960: LD_VAR 0 1
37964: PUSH
37965: LD_VAR 0 7
37969: ARRAY
37970: PPUSH
37971: CALL_OW 1
37975: ST_TO_ADDR
// end ;
37976: GO 37889
37978: POP
37979: POP
// array := tmp ;
37980: LD_ADDR_VAR 0 1
37984: PUSH
37985: LD_VAR 0 10
37989: ST_TO_ADDR
// end ;
37990: GO 37871
37992: POP
37993: POP
// result := array ;
37994: LD_ADDR_VAR 0 5
37998: PUSH
37999: LD_VAR 0 1
38003: ST_TO_ADDR
// end ;
38004: LD_VAR 0 5
38008: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38009: LD_INT 0
38011: PPUSH
38012: PPUSH
// result := 0 ;
38013: LD_ADDR_VAR 0 3
38017: PUSH
38018: LD_INT 0
38020: ST_TO_ADDR
// if not array or not value in array then
38021: LD_VAR 0 1
38025: NOT
38026: PUSH
38027: LD_VAR 0 2
38031: PUSH
38032: LD_VAR 0 1
38036: IN
38037: NOT
38038: OR
38039: IFFALSE 38043
// exit ;
38041: GO 38097
// for i = 1 to array do
38043: LD_ADDR_VAR 0 4
38047: PUSH
38048: DOUBLE
38049: LD_INT 1
38051: DEC
38052: ST_TO_ADDR
38053: LD_VAR 0 1
38057: PUSH
38058: FOR_TO
38059: IFFALSE 38095
// if value = array [ i ] then
38061: LD_VAR 0 2
38065: PUSH
38066: LD_VAR 0 1
38070: PUSH
38071: LD_VAR 0 4
38075: ARRAY
38076: EQUAL
38077: IFFALSE 38093
// begin result := i ;
38079: LD_ADDR_VAR 0 3
38083: PUSH
38084: LD_VAR 0 4
38088: ST_TO_ADDR
// exit ;
38089: POP
38090: POP
38091: GO 38097
// end ;
38093: GO 38058
38095: POP
38096: POP
// end ;
38097: LD_VAR 0 3
38101: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38102: LD_INT 0
38104: PPUSH
// vc_chassis := chassis ;
38105: LD_ADDR_OWVAR 37
38109: PUSH
38110: LD_VAR 0 1
38114: ST_TO_ADDR
// vc_engine := engine ;
38115: LD_ADDR_OWVAR 39
38119: PUSH
38120: LD_VAR 0 2
38124: ST_TO_ADDR
// vc_control := control ;
38125: LD_ADDR_OWVAR 38
38129: PUSH
38130: LD_VAR 0 3
38134: ST_TO_ADDR
// vc_weapon := weapon ;
38135: LD_ADDR_OWVAR 40
38139: PUSH
38140: LD_VAR 0 4
38144: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38145: LD_ADDR_OWVAR 41
38149: PUSH
38150: LD_VAR 0 5
38154: ST_TO_ADDR
// end ;
38155: LD_VAR 0 6
38159: RET
// export function WantPlant ( unit ) ; var task ; begin
38160: LD_INT 0
38162: PPUSH
38163: PPUSH
// result := false ;
38164: LD_ADDR_VAR 0 2
38168: PUSH
38169: LD_INT 0
38171: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38172: LD_ADDR_VAR 0 3
38176: PUSH
38177: LD_VAR 0 1
38181: PPUSH
38182: CALL_OW 437
38186: ST_TO_ADDR
// if task then
38187: LD_VAR 0 3
38191: IFFALSE 38219
// if task [ 1 ] [ 1 ] = p then
38193: LD_VAR 0 3
38197: PUSH
38198: LD_INT 1
38200: ARRAY
38201: PUSH
38202: LD_INT 1
38204: ARRAY
38205: PUSH
38206: LD_STRING p
38208: EQUAL
38209: IFFALSE 38219
// result := true ;
38211: LD_ADDR_VAR 0 2
38215: PUSH
38216: LD_INT 1
38218: ST_TO_ADDR
// end ;
38219: LD_VAR 0 2
38223: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38224: LD_INT 0
38226: PPUSH
38227: PPUSH
38228: PPUSH
38229: PPUSH
// if pos < 1 then
38230: LD_VAR 0 2
38234: PUSH
38235: LD_INT 1
38237: LESS
38238: IFFALSE 38242
// exit ;
38240: GO 38545
// if pos = 1 then
38242: LD_VAR 0 2
38246: PUSH
38247: LD_INT 1
38249: EQUAL
38250: IFFALSE 38283
// result := Replace ( arr , pos [ 1 ] , value ) else
38252: LD_ADDR_VAR 0 4
38256: PUSH
38257: LD_VAR 0 1
38261: PPUSH
38262: LD_VAR 0 2
38266: PUSH
38267: LD_INT 1
38269: ARRAY
38270: PPUSH
38271: LD_VAR 0 3
38275: PPUSH
38276: CALL_OW 1
38280: ST_TO_ADDR
38281: GO 38545
// begin tmp := arr ;
38283: LD_ADDR_VAR 0 6
38287: PUSH
38288: LD_VAR 0 1
38292: ST_TO_ADDR
// s_arr := [ tmp ] ;
38293: LD_ADDR_VAR 0 7
38297: PUSH
38298: LD_VAR 0 6
38302: PUSH
38303: EMPTY
38304: LIST
38305: ST_TO_ADDR
// for i = 1 to pos - 1 do
38306: LD_ADDR_VAR 0 5
38310: PUSH
38311: DOUBLE
38312: LD_INT 1
38314: DEC
38315: ST_TO_ADDR
38316: LD_VAR 0 2
38320: PUSH
38321: LD_INT 1
38323: MINUS
38324: PUSH
38325: FOR_TO
38326: IFFALSE 38371
// begin tmp := tmp [ pos [ i ] ] ;
38328: LD_ADDR_VAR 0 6
38332: PUSH
38333: LD_VAR 0 6
38337: PUSH
38338: LD_VAR 0 2
38342: PUSH
38343: LD_VAR 0 5
38347: ARRAY
38348: ARRAY
38349: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38350: LD_ADDR_VAR 0 7
38354: PUSH
38355: LD_VAR 0 7
38359: PUSH
38360: LD_VAR 0 6
38364: PUSH
38365: EMPTY
38366: LIST
38367: ADD
38368: ST_TO_ADDR
// end ;
38369: GO 38325
38371: POP
38372: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38373: LD_ADDR_VAR 0 6
38377: PUSH
38378: LD_VAR 0 6
38382: PPUSH
38383: LD_VAR 0 2
38387: PUSH
38388: LD_VAR 0 2
38392: ARRAY
38393: PPUSH
38394: LD_VAR 0 3
38398: PPUSH
38399: CALL_OW 1
38403: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38404: LD_ADDR_VAR 0 7
38408: PUSH
38409: LD_VAR 0 7
38413: PPUSH
38414: LD_VAR 0 7
38418: PPUSH
38419: LD_VAR 0 6
38423: PPUSH
38424: CALL_OW 1
38428: ST_TO_ADDR
// for i = s_arr downto 2 do
38429: LD_ADDR_VAR 0 5
38433: PUSH
38434: DOUBLE
38435: LD_VAR 0 7
38439: INC
38440: ST_TO_ADDR
38441: LD_INT 2
38443: PUSH
38444: FOR_DOWNTO
38445: IFFALSE 38529
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38447: LD_ADDR_VAR 0 6
38451: PUSH
38452: LD_VAR 0 7
38456: PUSH
38457: LD_VAR 0 5
38461: PUSH
38462: LD_INT 1
38464: MINUS
38465: ARRAY
38466: PPUSH
38467: LD_VAR 0 2
38471: PUSH
38472: LD_VAR 0 5
38476: PUSH
38477: LD_INT 1
38479: MINUS
38480: ARRAY
38481: PPUSH
38482: LD_VAR 0 7
38486: PUSH
38487: LD_VAR 0 5
38491: ARRAY
38492: PPUSH
38493: CALL_OW 1
38497: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38498: LD_ADDR_VAR 0 7
38502: PUSH
38503: LD_VAR 0 7
38507: PPUSH
38508: LD_VAR 0 5
38512: PUSH
38513: LD_INT 1
38515: MINUS
38516: PPUSH
38517: LD_VAR 0 6
38521: PPUSH
38522: CALL_OW 1
38526: ST_TO_ADDR
// end ;
38527: GO 38444
38529: POP
38530: POP
// result := s_arr [ 1 ] ;
38531: LD_ADDR_VAR 0 4
38535: PUSH
38536: LD_VAR 0 7
38540: PUSH
38541: LD_INT 1
38543: ARRAY
38544: ST_TO_ADDR
// end ; end ;
38545: LD_VAR 0 4
38549: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38550: LD_INT 0
38552: PPUSH
38553: PPUSH
// if not list then
38554: LD_VAR 0 1
38558: NOT
38559: IFFALSE 38563
// exit ;
38561: GO 38654
// i := list [ pos1 ] ;
38563: LD_ADDR_VAR 0 5
38567: PUSH
38568: LD_VAR 0 1
38572: PUSH
38573: LD_VAR 0 2
38577: ARRAY
38578: ST_TO_ADDR
// if not i then
38579: LD_VAR 0 5
38583: NOT
38584: IFFALSE 38588
// exit ;
38586: GO 38654
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38588: LD_ADDR_VAR 0 1
38592: PUSH
38593: LD_VAR 0 1
38597: PPUSH
38598: LD_VAR 0 2
38602: PPUSH
38603: LD_VAR 0 1
38607: PUSH
38608: LD_VAR 0 3
38612: ARRAY
38613: PPUSH
38614: CALL_OW 1
38618: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38619: LD_ADDR_VAR 0 1
38623: PUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: LD_VAR 0 3
38633: PPUSH
38634: LD_VAR 0 5
38638: PPUSH
38639: CALL_OW 1
38643: ST_TO_ADDR
// result := list ;
38644: LD_ADDR_VAR 0 4
38648: PUSH
38649: LD_VAR 0 1
38653: ST_TO_ADDR
// end ;
38654: LD_VAR 0 4
38658: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38659: LD_INT 0
38661: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38662: LD_ADDR_VAR 0 5
38666: PUSH
38667: LD_VAR 0 1
38671: PPUSH
38672: CALL_OW 250
38676: PPUSH
38677: LD_VAR 0 1
38681: PPUSH
38682: CALL_OW 251
38686: PPUSH
38687: LD_VAR 0 2
38691: PPUSH
38692: LD_VAR 0 3
38696: PPUSH
38697: LD_VAR 0 4
38701: PPUSH
38702: CALL 38712 0 5
38706: ST_TO_ADDR
// end ;
38707: LD_VAR 0 5
38711: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38712: LD_INT 0
38714: PPUSH
38715: PPUSH
38716: PPUSH
38717: PPUSH
// if not list then
38718: LD_VAR 0 3
38722: NOT
38723: IFFALSE 38727
// exit ;
38725: GO 39115
// result := [ ] ;
38727: LD_ADDR_VAR 0 6
38731: PUSH
38732: EMPTY
38733: ST_TO_ADDR
// for i in list do
38734: LD_ADDR_VAR 0 7
38738: PUSH
38739: LD_VAR 0 3
38743: PUSH
38744: FOR_IN
38745: IFFALSE 38947
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38747: LD_ADDR_VAR 0 9
38751: PUSH
38752: LD_VAR 0 7
38756: PPUSH
38757: LD_VAR 0 1
38761: PPUSH
38762: LD_VAR 0 2
38766: PPUSH
38767: CALL_OW 297
38771: ST_TO_ADDR
// if not result then
38772: LD_VAR 0 6
38776: NOT
38777: IFFALSE 38803
// result := [ [ i , tmp ] ] else
38779: LD_ADDR_VAR 0 6
38783: PUSH
38784: LD_VAR 0 7
38788: PUSH
38789: LD_VAR 0 9
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: EMPTY
38799: LIST
38800: ST_TO_ADDR
38801: GO 38945
// begin if result [ result ] [ 2 ] < tmp then
38803: LD_VAR 0 6
38807: PUSH
38808: LD_VAR 0 6
38812: ARRAY
38813: PUSH
38814: LD_INT 2
38816: ARRAY
38817: PUSH
38818: LD_VAR 0 9
38822: LESS
38823: IFFALSE 38865
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38825: LD_ADDR_VAR 0 6
38829: PUSH
38830: LD_VAR 0 6
38834: PPUSH
38835: LD_VAR 0 6
38839: PUSH
38840: LD_INT 1
38842: PLUS
38843: PPUSH
38844: LD_VAR 0 7
38848: PUSH
38849: LD_VAR 0 9
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PPUSH
38858: CALL_OW 2
38862: ST_TO_ADDR
38863: GO 38945
// for j = 1 to result do
38865: LD_ADDR_VAR 0 8
38869: PUSH
38870: DOUBLE
38871: LD_INT 1
38873: DEC
38874: ST_TO_ADDR
38875: LD_VAR 0 6
38879: PUSH
38880: FOR_TO
38881: IFFALSE 38943
// begin if tmp < result [ j ] [ 2 ] then
38883: LD_VAR 0 9
38887: PUSH
38888: LD_VAR 0 6
38892: PUSH
38893: LD_VAR 0 8
38897: ARRAY
38898: PUSH
38899: LD_INT 2
38901: ARRAY
38902: LESS
38903: IFFALSE 38941
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38905: LD_ADDR_VAR 0 6
38909: PUSH
38910: LD_VAR 0 6
38914: PPUSH
38915: LD_VAR 0 8
38919: PPUSH
38920: LD_VAR 0 7
38924: PUSH
38925: LD_VAR 0 9
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PPUSH
38934: CALL_OW 2
38938: ST_TO_ADDR
// break ;
38939: GO 38943
// end ; end ;
38941: GO 38880
38943: POP
38944: POP
// end ; end ;
38945: GO 38744
38947: POP
38948: POP
// if result and not asc then
38949: LD_VAR 0 6
38953: PUSH
38954: LD_VAR 0 4
38958: NOT
38959: AND
38960: IFFALSE 39035
// begin tmp := result ;
38962: LD_ADDR_VAR 0 9
38966: PUSH
38967: LD_VAR 0 6
38971: ST_TO_ADDR
// for i = tmp downto 1 do
38972: LD_ADDR_VAR 0 7
38976: PUSH
38977: DOUBLE
38978: LD_VAR 0 9
38982: INC
38983: ST_TO_ADDR
38984: LD_INT 1
38986: PUSH
38987: FOR_DOWNTO
38988: IFFALSE 39033
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38990: LD_ADDR_VAR 0 6
38994: PUSH
38995: LD_VAR 0 6
38999: PPUSH
39000: LD_VAR 0 9
39004: PUSH
39005: LD_VAR 0 7
39009: MINUS
39010: PUSH
39011: LD_INT 1
39013: PLUS
39014: PPUSH
39015: LD_VAR 0 9
39019: PUSH
39020: LD_VAR 0 7
39024: ARRAY
39025: PPUSH
39026: CALL_OW 1
39030: ST_TO_ADDR
39031: GO 38987
39033: POP
39034: POP
// end ; tmp := [ ] ;
39035: LD_ADDR_VAR 0 9
39039: PUSH
39040: EMPTY
39041: ST_TO_ADDR
// if mode then
39042: LD_VAR 0 5
39046: IFFALSE 39115
// begin for i = 1 to result do
39048: LD_ADDR_VAR 0 7
39052: PUSH
39053: DOUBLE
39054: LD_INT 1
39056: DEC
39057: ST_TO_ADDR
39058: LD_VAR 0 6
39062: PUSH
39063: FOR_TO
39064: IFFALSE 39103
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39066: LD_ADDR_VAR 0 9
39070: PUSH
39071: LD_VAR 0 9
39075: PPUSH
39076: LD_VAR 0 7
39080: PPUSH
39081: LD_VAR 0 6
39085: PUSH
39086: LD_VAR 0 7
39090: ARRAY
39091: PUSH
39092: LD_INT 1
39094: ARRAY
39095: PPUSH
39096: CALL_OW 1
39100: ST_TO_ADDR
39101: GO 39063
39103: POP
39104: POP
// result := tmp ;
39105: LD_ADDR_VAR 0 6
39109: PUSH
39110: LD_VAR 0 9
39114: ST_TO_ADDR
// end ; end ;
39115: LD_VAR 0 6
39119: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39120: LD_INT 0
39122: PPUSH
39123: PPUSH
39124: PPUSH
39125: PPUSH
39126: PPUSH
39127: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39128: LD_ADDR_VAR 0 5
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: EMPTY
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: ST_TO_ADDR
// if not x or not y then
39150: LD_VAR 0 2
39154: NOT
39155: PUSH
39156: LD_VAR 0 3
39160: NOT
39161: OR
39162: IFFALSE 39166
// exit ;
39164: GO 40812
// if not range then
39166: LD_VAR 0 4
39170: NOT
39171: IFFALSE 39181
// range := 10 ;
39173: LD_ADDR_VAR 0 4
39177: PUSH
39178: LD_INT 10
39180: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39181: LD_ADDR_VAR 0 8
39185: PUSH
39186: LD_INT 81
39188: PUSH
39189: LD_VAR 0 1
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 92
39200: PUSH
39201: LD_VAR 0 2
39205: PUSH
39206: LD_VAR 0 3
39210: PUSH
39211: LD_VAR 0 4
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 3
39224: PUSH
39225: LD_INT 21
39227: PUSH
39228: LD_INT 3
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: LIST
39243: PPUSH
39244: CALL_OW 69
39248: ST_TO_ADDR
// if not tmp then
39249: LD_VAR 0 8
39253: NOT
39254: IFFALSE 39258
// exit ;
39256: GO 40812
// for i in tmp do
39258: LD_ADDR_VAR 0 6
39262: PUSH
39263: LD_VAR 0 8
39267: PUSH
39268: FOR_IN
39269: IFFALSE 40787
// begin points := [ 0 , 0 , 0 ] ;
39271: LD_ADDR_VAR 0 9
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: LIST
39289: ST_TO_ADDR
// bpoints := 1 ;
39290: LD_ADDR_VAR 0 10
39294: PUSH
39295: LD_INT 1
39297: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39298: LD_VAR 0 6
39302: PPUSH
39303: CALL_OW 247
39307: PUSH
39308: LD_INT 1
39310: DOUBLE
39311: EQUAL
39312: IFTRUE 39316
39314: GO 39894
39316: POP
// begin if GetClass ( i ) = 1 then
39317: LD_VAR 0 6
39321: PPUSH
39322: CALL_OW 257
39326: PUSH
39327: LD_INT 1
39329: EQUAL
39330: IFFALSE 39351
// points := [ 10 , 5 , 3 ] ;
39332: LD_ADDR_VAR 0 9
39336: PUSH
39337: LD_INT 10
39339: PUSH
39340: LD_INT 5
39342: PUSH
39343: LD_INT 3
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: LIST
39350: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39351: LD_VAR 0 6
39355: PPUSH
39356: CALL_OW 257
39360: PUSH
39361: LD_INT 2
39363: PUSH
39364: LD_INT 3
39366: PUSH
39367: LD_INT 4
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: LIST
39374: IN
39375: IFFALSE 39396
// points := [ 3 , 2 , 1 ] ;
39377: LD_ADDR_VAR 0 9
39381: PUSH
39382: LD_INT 3
39384: PUSH
39385: LD_INT 2
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: LIST
39395: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39396: LD_VAR 0 6
39400: PPUSH
39401: CALL_OW 257
39405: PUSH
39406: LD_INT 5
39408: EQUAL
39409: IFFALSE 39430
// points := [ 130 , 5 , 2 ] ;
39411: LD_ADDR_VAR 0 9
39415: PUSH
39416: LD_INT 130
39418: PUSH
39419: LD_INT 5
39421: PUSH
39422: LD_INT 2
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: LIST
39429: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39430: LD_VAR 0 6
39434: PPUSH
39435: CALL_OW 257
39439: PUSH
39440: LD_INT 8
39442: EQUAL
39443: IFFALSE 39464
// points := [ 35 , 35 , 30 ] ;
39445: LD_ADDR_VAR 0 9
39449: PUSH
39450: LD_INT 35
39452: PUSH
39453: LD_INT 35
39455: PUSH
39456: LD_INT 30
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: LIST
39463: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39464: LD_VAR 0 6
39468: PPUSH
39469: CALL_OW 257
39473: PUSH
39474: LD_INT 9
39476: EQUAL
39477: IFFALSE 39498
// points := [ 20 , 55 , 40 ] ;
39479: LD_ADDR_VAR 0 9
39483: PUSH
39484: LD_INT 20
39486: PUSH
39487: LD_INT 55
39489: PUSH
39490: LD_INT 40
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: LIST
39497: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39498: LD_VAR 0 6
39502: PPUSH
39503: CALL_OW 257
39507: PUSH
39508: LD_INT 12
39510: PUSH
39511: LD_INT 16
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: IN
39518: IFFALSE 39539
// points := [ 5 , 3 , 2 ] ;
39520: LD_ADDR_VAR 0 9
39524: PUSH
39525: LD_INT 5
39527: PUSH
39528: LD_INT 3
39530: PUSH
39531: LD_INT 2
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: LIST
39538: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39539: LD_VAR 0 6
39543: PPUSH
39544: CALL_OW 257
39548: PUSH
39549: LD_INT 17
39551: EQUAL
39552: IFFALSE 39573
// points := [ 100 , 50 , 75 ] ;
39554: LD_ADDR_VAR 0 9
39558: PUSH
39559: LD_INT 100
39561: PUSH
39562: LD_INT 50
39564: PUSH
39565: LD_INT 75
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39573: LD_VAR 0 6
39577: PPUSH
39578: CALL_OW 257
39582: PUSH
39583: LD_INT 15
39585: EQUAL
39586: IFFALSE 39607
// points := [ 10 , 5 , 3 ] ;
39588: LD_ADDR_VAR 0 9
39592: PUSH
39593: LD_INT 10
39595: PUSH
39596: LD_INT 5
39598: PUSH
39599: LD_INT 3
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: LIST
39606: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39607: LD_VAR 0 6
39611: PPUSH
39612: CALL_OW 257
39616: PUSH
39617: LD_INT 14
39619: EQUAL
39620: IFFALSE 39641
// points := [ 10 , 0 , 0 ] ;
39622: LD_ADDR_VAR 0 9
39626: PUSH
39627: LD_INT 10
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39641: LD_VAR 0 6
39645: PPUSH
39646: CALL_OW 257
39650: PUSH
39651: LD_INT 11
39653: EQUAL
39654: IFFALSE 39675
// points := [ 30 , 10 , 5 ] ;
39656: LD_ADDR_VAR 0 9
39660: PUSH
39661: LD_INT 30
39663: PUSH
39664: LD_INT 10
39666: PUSH
39667: LD_INT 5
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: LIST
39674: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39675: LD_VAR 0 1
39679: PPUSH
39680: LD_INT 5
39682: PPUSH
39683: CALL_OW 321
39687: PUSH
39688: LD_INT 2
39690: EQUAL
39691: IFFALSE 39708
// bpoints := bpoints * 1.8 ;
39693: LD_ADDR_VAR 0 10
39697: PUSH
39698: LD_VAR 0 10
39702: PUSH
39703: LD_REAL  1.80000000000000E+0000
39706: MUL
39707: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39708: LD_VAR 0 6
39712: PPUSH
39713: CALL_OW 257
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: LD_INT 3
39726: PUSH
39727: LD_INT 4
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: IN
39736: PUSH
39737: LD_VAR 0 1
39741: PPUSH
39742: LD_INT 51
39744: PPUSH
39745: CALL_OW 321
39749: PUSH
39750: LD_INT 2
39752: EQUAL
39753: AND
39754: IFFALSE 39771
// bpoints := bpoints * 1.2 ;
39756: LD_ADDR_VAR 0 10
39760: PUSH
39761: LD_VAR 0 10
39765: PUSH
39766: LD_REAL  1.20000000000000E+0000
39769: MUL
39770: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39771: LD_VAR 0 6
39775: PPUSH
39776: CALL_OW 257
39780: PUSH
39781: LD_INT 5
39783: PUSH
39784: LD_INT 7
39786: PUSH
39787: LD_INT 9
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: IN
39795: PUSH
39796: LD_VAR 0 1
39800: PPUSH
39801: LD_INT 52
39803: PPUSH
39804: CALL_OW 321
39808: PUSH
39809: LD_INT 2
39811: EQUAL
39812: AND
39813: IFFALSE 39830
// bpoints := bpoints * 1.5 ;
39815: LD_ADDR_VAR 0 10
39819: PUSH
39820: LD_VAR 0 10
39824: PUSH
39825: LD_REAL  1.50000000000000E+0000
39828: MUL
39829: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39830: LD_VAR 0 1
39834: PPUSH
39835: LD_INT 66
39837: PPUSH
39838: CALL_OW 321
39842: PUSH
39843: LD_INT 2
39845: EQUAL
39846: IFFALSE 39863
// bpoints := bpoints * 1.1 ;
39848: LD_ADDR_VAR 0 10
39852: PUSH
39853: LD_VAR 0 10
39857: PUSH
39858: LD_REAL  1.10000000000000E+0000
39861: MUL
39862: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39863: LD_ADDR_VAR 0 10
39867: PUSH
39868: LD_VAR 0 10
39872: PUSH
39873: LD_VAR 0 6
39877: PPUSH
39878: LD_INT 1
39880: PPUSH
39881: CALL_OW 259
39885: PUSH
39886: LD_REAL  1.15000000000000E+0000
39889: MUL
39890: MUL
39891: ST_TO_ADDR
// end ; unit_vehicle :
39892: GO 40716
39894: LD_INT 2
39896: DOUBLE
39897: EQUAL
39898: IFTRUE 39902
39900: GO 40704
39902: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39903: LD_VAR 0 6
39907: PPUSH
39908: CALL_OW 264
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: LD_INT 42
39918: PUSH
39919: LD_INT 24
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: LIST
39926: IN
39927: IFFALSE 39948
// points := [ 25 , 5 , 3 ] ;
39929: LD_ADDR_VAR 0 9
39933: PUSH
39934: LD_INT 25
39936: PUSH
39937: LD_INT 5
39939: PUSH
39940: LD_INT 3
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39948: LD_VAR 0 6
39952: PPUSH
39953: CALL_OW 264
39957: PUSH
39958: LD_INT 4
39960: PUSH
39961: LD_INT 43
39963: PUSH
39964: LD_INT 25
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: LIST
39971: IN
39972: IFFALSE 39993
// points := [ 40 , 15 , 5 ] ;
39974: LD_ADDR_VAR 0 9
39978: PUSH
39979: LD_INT 40
39981: PUSH
39982: LD_INT 15
39984: PUSH
39985: LD_INT 5
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39993: LD_VAR 0 6
39997: PPUSH
39998: CALL_OW 264
40002: PUSH
40003: LD_INT 3
40005: PUSH
40006: LD_INT 23
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: IN
40013: IFFALSE 40034
// points := [ 7 , 25 , 8 ] ;
40015: LD_ADDR_VAR 0 9
40019: PUSH
40020: LD_INT 7
40022: PUSH
40023: LD_INT 25
40025: PUSH
40026: LD_INT 8
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: LIST
40033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40034: LD_VAR 0 6
40038: PPUSH
40039: CALL_OW 264
40043: PUSH
40044: LD_INT 5
40046: PUSH
40047: LD_INT 27
40049: PUSH
40050: LD_INT 44
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: LIST
40057: IN
40058: IFFALSE 40079
// points := [ 14 , 50 , 16 ] ;
40060: LD_ADDR_VAR 0 9
40064: PUSH
40065: LD_INT 14
40067: PUSH
40068: LD_INT 50
40070: PUSH
40071: LD_INT 16
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: LIST
40078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40079: LD_VAR 0 6
40083: PPUSH
40084: CALL_OW 264
40088: PUSH
40089: LD_INT 6
40091: PUSH
40092: LD_INT 46
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: IN
40099: IFFALSE 40120
// points := [ 32 , 120 , 70 ] ;
40101: LD_ADDR_VAR 0 9
40105: PUSH
40106: LD_INT 32
40108: PUSH
40109: LD_INT 120
40111: PUSH
40112: LD_INT 70
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
40120: LD_VAR 0 6
40124: PPUSH
40125: CALL_OW 264
40129: PUSH
40130: LD_INT 7
40132: PUSH
40133: LD_INT 28
40135: PUSH
40136: LD_INT 45
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: LIST
40143: IN
40144: IFFALSE 40165
// points := [ 35 , 20 , 45 ] ;
40146: LD_ADDR_VAR 0 9
40150: PUSH
40151: LD_INT 35
40153: PUSH
40154: LD_INT 20
40156: PUSH
40157: LD_INT 45
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: LIST
40164: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40165: LD_VAR 0 6
40169: PPUSH
40170: CALL_OW 264
40174: PUSH
40175: LD_INT 47
40177: PUSH
40178: EMPTY
40179: LIST
40180: IN
40181: IFFALSE 40202
// points := [ 67 , 45 , 75 ] ;
40183: LD_ADDR_VAR 0 9
40187: PUSH
40188: LD_INT 67
40190: PUSH
40191: LD_INT 45
40193: PUSH
40194: LD_INT 75
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: LIST
40201: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40202: LD_VAR 0 6
40206: PPUSH
40207: CALL_OW 264
40211: PUSH
40212: LD_INT 26
40214: PUSH
40215: EMPTY
40216: LIST
40217: IN
40218: IFFALSE 40239
// points := [ 120 , 30 , 80 ] ;
40220: LD_ADDR_VAR 0 9
40224: PUSH
40225: LD_INT 120
40227: PUSH
40228: LD_INT 30
40230: PUSH
40231: LD_INT 80
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40239: LD_VAR 0 6
40243: PPUSH
40244: CALL_OW 264
40248: PUSH
40249: LD_INT 22
40251: PUSH
40252: EMPTY
40253: LIST
40254: IN
40255: IFFALSE 40276
// points := [ 40 , 1 , 1 ] ;
40257: LD_ADDR_VAR 0 9
40261: PUSH
40262: LD_INT 40
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40276: LD_VAR 0 6
40280: PPUSH
40281: CALL_OW 264
40285: PUSH
40286: LD_INT 29
40288: PUSH
40289: EMPTY
40290: LIST
40291: IN
40292: IFFALSE 40313
// points := [ 70 , 200 , 400 ] ;
40294: LD_ADDR_VAR 0 9
40298: PUSH
40299: LD_INT 70
40301: PUSH
40302: LD_INT 200
40304: PUSH
40305: LD_INT 400
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: LIST
40312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40313: LD_VAR 0 6
40317: PPUSH
40318: CALL_OW 264
40322: PUSH
40323: LD_INT 14
40325: PUSH
40326: LD_INT 53
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: IN
40333: IFFALSE 40354
// points := [ 40 , 10 , 20 ] ;
40335: LD_ADDR_VAR 0 9
40339: PUSH
40340: LD_INT 40
40342: PUSH
40343: LD_INT 10
40345: PUSH
40346: LD_INT 20
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: LIST
40353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40354: LD_VAR 0 6
40358: PPUSH
40359: CALL_OW 264
40363: PUSH
40364: LD_INT 9
40366: PUSH
40367: EMPTY
40368: LIST
40369: IN
40370: IFFALSE 40391
// points := [ 5 , 70 , 20 ] ;
40372: LD_ADDR_VAR 0 9
40376: PUSH
40377: LD_INT 5
40379: PUSH
40380: LD_INT 70
40382: PUSH
40383: LD_INT 20
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: LIST
40390: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40391: LD_VAR 0 6
40395: PPUSH
40396: CALL_OW 264
40400: PUSH
40401: LD_INT 10
40403: PUSH
40404: EMPTY
40405: LIST
40406: IN
40407: IFFALSE 40428
// points := [ 35 , 110 , 70 ] ;
40409: LD_ADDR_VAR 0 9
40413: PUSH
40414: LD_INT 35
40416: PUSH
40417: LD_INT 110
40419: PUSH
40420: LD_INT 70
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: LIST
40427: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40428: LD_VAR 0 6
40432: PPUSH
40433: CALL_OW 265
40437: PUSH
40438: LD_INT 25
40440: EQUAL
40441: IFFALSE 40462
// points := [ 80 , 65 , 100 ] ;
40443: LD_ADDR_VAR 0 9
40447: PUSH
40448: LD_INT 80
40450: PUSH
40451: LD_INT 65
40453: PUSH
40454: LD_INT 100
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: LIST
40461: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40462: LD_VAR 0 6
40466: PPUSH
40467: CALL_OW 263
40471: PUSH
40472: LD_INT 1
40474: EQUAL
40475: IFFALSE 40510
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40477: LD_ADDR_VAR 0 10
40481: PUSH
40482: LD_VAR 0 10
40486: PUSH
40487: LD_VAR 0 6
40491: PPUSH
40492: CALL_OW 311
40496: PPUSH
40497: LD_INT 3
40499: PPUSH
40500: CALL_OW 259
40504: PUSH
40505: LD_INT 4
40507: MUL
40508: MUL
40509: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40510: LD_VAR 0 6
40514: PPUSH
40515: CALL_OW 263
40519: PUSH
40520: LD_INT 2
40522: EQUAL
40523: IFFALSE 40574
// begin j := IsControledBy ( i ) ;
40525: LD_ADDR_VAR 0 7
40529: PUSH
40530: LD_VAR 0 6
40534: PPUSH
40535: CALL_OW 312
40539: ST_TO_ADDR
// if j then
40540: LD_VAR 0 7
40544: IFFALSE 40574
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40546: LD_ADDR_VAR 0 10
40550: PUSH
40551: LD_VAR 0 10
40555: PUSH
40556: LD_VAR 0 7
40560: PPUSH
40561: LD_INT 3
40563: PPUSH
40564: CALL_OW 259
40568: PUSH
40569: LD_INT 3
40571: MUL
40572: MUL
40573: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40574: LD_VAR 0 6
40578: PPUSH
40579: CALL_OW 264
40583: PUSH
40584: LD_INT 5
40586: PUSH
40587: LD_INT 6
40589: PUSH
40590: LD_INT 46
40592: PUSH
40593: LD_INT 44
40595: PUSH
40596: LD_INT 47
40598: PUSH
40599: LD_INT 45
40601: PUSH
40602: LD_INT 28
40604: PUSH
40605: LD_INT 7
40607: PUSH
40608: LD_INT 27
40610: PUSH
40611: LD_INT 29
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: IN
40626: PUSH
40627: LD_VAR 0 1
40631: PPUSH
40632: LD_INT 52
40634: PPUSH
40635: CALL_OW 321
40639: PUSH
40640: LD_INT 2
40642: EQUAL
40643: AND
40644: IFFALSE 40661
// bpoints := bpoints * 1.2 ;
40646: LD_ADDR_VAR 0 10
40650: PUSH
40651: LD_VAR 0 10
40655: PUSH
40656: LD_REAL  1.20000000000000E+0000
40659: MUL
40660: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40661: LD_VAR 0 6
40665: PPUSH
40666: CALL_OW 264
40670: PUSH
40671: LD_INT 6
40673: PUSH
40674: LD_INT 46
40676: PUSH
40677: LD_INT 47
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: LIST
40684: IN
40685: IFFALSE 40702
// bpoints := bpoints * 1.2 ;
40687: LD_ADDR_VAR 0 10
40691: PUSH
40692: LD_VAR 0 10
40696: PUSH
40697: LD_REAL  1.20000000000000E+0000
40700: MUL
40701: ST_TO_ADDR
// end ; unit_building :
40702: GO 40716
40704: LD_INT 3
40706: DOUBLE
40707: EQUAL
40708: IFTRUE 40712
40710: GO 40715
40712: POP
// ; end ;
40713: GO 40716
40715: POP
// for j = 1 to 3 do
40716: LD_ADDR_VAR 0 7
40720: PUSH
40721: DOUBLE
40722: LD_INT 1
40724: DEC
40725: ST_TO_ADDR
40726: LD_INT 3
40728: PUSH
40729: FOR_TO
40730: IFFALSE 40783
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40732: LD_ADDR_VAR 0 5
40736: PUSH
40737: LD_VAR 0 5
40741: PPUSH
40742: LD_VAR 0 7
40746: PPUSH
40747: LD_VAR 0 5
40751: PUSH
40752: LD_VAR 0 7
40756: ARRAY
40757: PUSH
40758: LD_VAR 0 9
40762: PUSH
40763: LD_VAR 0 7
40767: ARRAY
40768: PUSH
40769: LD_VAR 0 10
40773: MUL
40774: PLUS
40775: PPUSH
40776: CALL_OW 1
40780: ST_TO_ADDR
40781: GO 40729
40783: POP
40784: POP
// end ;
40785: GO 39268
40787: POP
40788: POP
// result := Replace ( result , 4 , tmp ) ;
40789: LD_ADDR_VAR 0 5
40793: PUSH
40794: LD_VAR 0 5
40798: PPUSH
40799: LD_INT 4
40801: PPUSH
40802: LD_VAR 0 8
40806: PPUSH
40807: CALL_OW 1
40811: ST_TO_ADDR
// end ;
40812: LD_VAR 0 5
40816: RET
// export function DangerAtRange ( unit , range ) ; begin
40817: LD_INT 0
40819: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40820: LD_ADDR_VAR 0 3
40824: PUSH
40825: LD_VAR 0 1
40829: PPUSH
40830: CALL_OW 255
40834: PPUSH
40835: LD_VAR 0 1
40839: PPUSH
40840: CALL_OW 250
40844: PPUSH
40845: LD_VAR 0 1
40849: PPUSH
40850: CALL_OW 251
40854: PPUSH
40855: LD_VAR 0 2
40859: PPUSH
40860: CALL 39120 0 4
40864: ST_TO_ADDR
// end ;
40865: LD_VAR 0 3
40869: RET
// export function DangerInArea ( side , area ) ; begin
40870: LD_INT 0
40872: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40873: LD_ADDR_VAR 0 3
40877: PUSH
40878: LD_VAR 0 2
40882: PPUSH
40883: LD_INT 81
40885: PUSH
40886: LD_VAR 0 1
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PPUSH
40895: CALL_OW 70
40899: ST_TO_ADDR
// end ;
40900: LD_VAR 0 3
40904: RET
// export function IsExtension ( b ) ; begin
40905: LD_INT 0
40907: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40908: LD_ADDR_VAR 0 2
40912: PUSH
40913: LD_VAR 0 1
40917: PUSH
40918: LD_INT 23
40920: PUSH
40921: LD_INT 20
40923: PUSH
40924: LD_INT 22
40926: PUSH
40927: LD_INT 17
40929: PUSH
40930: LD_INT 24
40932: PUSH
40933: LD_INT 21
40935: PUSH
40936: LD_INT 19
40938: PUSH
40939: LD_INT 16
40941: PUSH
40942: LD_INT 25
40944: PUSH
40945: LD_INT 18
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: IN
40960: ST_TO_ADDR
// end ;
40961: LD_VAR 0 2
40965: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
40966: LD_INT 0
40968: PPUSH
40969: PPUSH
40970: PPUSH
// result := [ ] ;
40971: LD_ADDR_VAR 0 3
40975: PUSH
40976: EMPTY
40977: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40978: LD_ADDR_VAR 0 4
40982: PUSH
40983: LD_VAR 0 2
40987: PPUSH
40988: LD_INT 21
40990: PUSH
40991: LD_INT 3
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PPUSH
40998: CALL_OW 70
41002: ST_TO_ADDR
// if not tmp then
41003: LD_VAR 0 4
41007: NOT
41008: IFFALSE 41012
// exit ;
41010: GO 41070
// for i in tmp do
41012: LD_ADDR_VAR 0 5
41016: PUSH
41017: LD_VAR 0 4
41021: PUSH
41022: FOR_IN
41023: IFFALSE 41058
// if GetBase ( i ) <> base then
41025: LD_VAR 0 5
41029: PPUSH
41030: CALL_OW 274
41034: PUSH
41035: LD_VAR 0 1
41039: NONEQUAL
41040: IFFALSE 41056
// ComLinkToBase ( base , i ) ;
41042: LD_VAR 0 1
41046: PPUSH
41047: LD_VAR 0 5
41051: PPUSH
41052: CALL_OW 169
41056: GO 41022
41058: POP
41059: POP
// result := tmp ;
41060: LD_ADDR_VAR 0 3
41064: PUSH
41065: LD_VAR 0 4
41069: ST_TO_ADDR
// end ;
41070: LD_VAR 0 3
41074: RET
// export function ComComplete ( unit , b ) ; var i ; begin
41075: LD_INT 0
41077: PPUSH
41078: PPUSH
// if BuildingStatus ( b ) = bs_build then
41079: LD_VAR 0 2
41083: PPUSH
41084: CALL_OW 461
41088: PUSH
41089: LD_INT 1
41091: EQUAL
41092: IFFALSE 41152
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41094: LD_VAR 0 1
41098: PPUSH
41099: LD_STRING h
41101: PUSH
41102: LD_VAR 0 2
41106: PPUSH
41107: CALL_OW 250
41111: PUSH
41112: LD_VAR 0 2
41116: PPUSH
41117: CALL_OW 251
41121: PUSH
41122: LD_VAR 0 2
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: PUSH
41145: EMPTY
41146: LIST
41147: PPUSH
41148: CALL_OW 446
// end ;
41152: LD_VAR 0 3
41156: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41157: LD_INT 0
41159: PPUSH
41160: PPUSH
41161: PPUSH
41162: PPUSH
41163: PPUSH
41164: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
41165: LD_VAR 0 1
41169: NOT
41170: PUSH
41171: LD_VAR 0 1
41175: PPUSH
41176: CALL_OW 263
41180: PUSH
41181: LD_INT 2
41183: EQUAL
41184: NOT
41185: OR
41186: IFFALSE 41190
// exit ;
41188: GO 41506
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41190: LD_ADDR_VAR 0 6
41194: PUSH
41195: LD_INT 22
41197: PUSH
41198: LD_VAR 0 1
41202: PPUSH
41203: CALL_OW 255
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 2
41214: PUSH
41215: LD_INT 30
41217: PUSH
41218: LD_INT 36
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 34
41227: PUSH
41228: LD_INT 31
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: LIST
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PPUSH
41244: CALL_OW 69
41248: ST_TO_ADDR
// if not tmp then
41249: LD_VAR 0 6
41253: NOT
41254: IFFALSE 41258
// exit ;
41256: GO 41506
// result := [ ] ;
41258: LD_ADDR_VAR 0 2
41262: PUSH
41263: EMPTY
41264: ST_TO_ADDR
// for i in tmp do
41265: LD_ADDR_VAR 0 3
41269: PUSH
41270: LD_VAR 0 6
41274: PUSH
41275: FOR_IN
41276: IFFALSE 41347
// begin t := UnitsInside ( i ) ;
41278: LD_ADDR_VAR 0 4
41282: PUSH
41283: LD_VAR 0 3
41287: PPUSH
41288: CALL_OW 313
41292: ST_TO_ADDR
// if t then
41293: LD_VAR 0 4
41297: IFFALSE 41345
// for j in t do
41299: LD_ADDR_VAR 0 7
41303: PUSH
41304: LD_VAR 0 4
41308: PUSH
41309: FOR_IN
41310: IFFALSE 41343
// result := Insert ( result , result + 1 , j ) ;
41312: LD_ADDR_VAR 0 2
41316: PUSH
41317: LD_VAR 0 2
41321: PPUSH
41322: LD_VAR 0 2
41326: PUSH
41327: LD_INT 1
41329: PLUS
41330: PPUSH
41331: LD_VAR 0 7
41335: PPUSH
41336: CALL_OW 2
41340: ST_TO_ADDR
41341: GO 41309
41343: POP
41344: POP
// end ;
41345: GO 41275
41347: POP
41348: POP
// if not result then
41349: LD_VAR 0 2
41353: NOT
41354: IFFALSE 41358
// exit ;
41356: GO 41506
// mech := result [ 1 ] ;
41358: LD_ADDR_VAR 0 5
41362: PUSH
41363: LD_VAR 0 2
41367: PUSH
41368: LD_INT 1
41370: ARRAY
41371: ST_TO_ADDR
// if result > 1 then
41372: LD_VAR 0 2
41376: PUSH
41377: LD_INT 1
41379: GREATER
41380: IFFALSE 41492
// for i = 2 to result do
41382: LD_ADDR_VAR 0 3
41386: PUSH
41387: DOUBLE
41388: LD_INT 2
41390: DEC
41391: ST_TO_ADDR
41392: LD_VAR 0 2
41396: PUSH
41397: FOR_TO
41398: IFFALSE 41490
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41400: LD_ADDR_VAR 0 4
41404: PUSH
41405: LD_VAR 0 2
41409: PUSH
41410: LD_VAR 0 3
41414: ARRAY
41415: PPUSH
41416: LD_INT 3
41418: PPUSH
41419: CALL_OW 259
41423: PUSH
41424: LD_VAR 0 2
41428: PUSH
41429: LD_VAR 0 3
41433: ARRAY
41434: PPUSH
41435: CALL_OW 432
41439: MINUS
41440: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41441: LD_VAR 0 4
41445: PUSH
41446: LD_VAR 0 5
41450: PPUSH
41451: LD_INT 3
41453: PPUSH
41454: CALL_OW 259
41458: PUSH
41459: LD_VAR 0 5
41463: PPUSH
41464: CALL_OW 432
41468: MINUS
41469: GREATEREQUAL
41470: IFFALSE 41488
// mech := result [ i ] ;
41472: LD_ADDR_VAR 0 5
41476: PUSH
41477: LD_VAR 0 2
41481: PUSH
41482: LD_VAR 0 3
41486: ARRAY
41487: ST_TO_ADDR
// end ;
41488: GO 41397
41490: POP
41491: POP
// ComLinkTo ( vehicle , mech ) ;
41492: LD_VAR 0 1
41496: PPUSH
41497: LD_VAR 0 5
41501: PPUSH
41502: CALL_OW 135
// end ;
41506: LD_VAR 0 2
41510: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41511: LD_INT 0
41513: PPUSH
41514: PPUSH
41515: PPUSH
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
41523: PPUSH
41524: PPUSH
41525: PPUSH
// result := [ ] ;
41526: LD_ADDR_VAR 0 7
41530: PUSH
41531: EMPTY
41532: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41533: LD_VAR 0 1
41537: PPUSH
41538: CALL_OW 266
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: IN
41553: NOT
41554: IFFALSE 41558
// exit ;
41556: GO 43189
// if name then
41558: LD_VAR 0 3
41562: IFFALSE 41578
// SetBName ( base_dep , name ) ;
41564: LD_VAR 0 1
41568: PPUSH
41569: LD_VAR 0 3
41573: PPUSH
41574: CALL_OW 500
// base := GetBase ( base_dep ) ;
41578: LD_ADDR_VAR 0 15
41582: PUSH
41583: LD_VAR 0 1
41587: PPUSH
41588: CALL_OW 274
41592: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41593: LD_ADDR_VAR 0 16
41597: PUSH
41598: LD_VAR 0 1
41602: PPUSH
41603: CALL_OW 255
41607: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41608: LD_ADDR_VAR 0 17
41612: PUSH
41613: LD_VAR 0 1
41617: PPUSH
41618: CALL_OW 248
41622: ST_TO_ADDR
// if sources then
41623: LD_VAR 0 5
41627: IFFALSE 41674
// for i = 1 to 3 do
41629: LD_ADDR_VAR 0 8
41633: PUSH
41634: DOUBLE
41635: LD_INT 1
41637: DEC
41638: ST_TO_ADDR
41639: LD_INT 3
41641: PUSH
41642: FOR_TO
41643: IFFALSE 41672
// AddResourceType ( base , i , sources [ i ] ) ;
41645: LD_VAR 0 15
41649: PPUSH
41650: LD_VAR 0 8
41654: PPUSH
41655: LD_VAR 0 5
41659: PUSH
41660: LD_VAR 0 8
41664: ARRAY
41665: PPUSH
41666: CALL_OW 276
41670: GO 41642
41672: POP
41673: POP
// buildings := GetBaseBuildings ( base , area ) ;
41674: LD_ADDR_VAR 0 18
41678: PUSH
41679: LD_VAR 0 15
41683: PPUSH
41684: LD_VAR 0 2
41688: PPUSH
41689: CALL 40966 0 2
41693: ST_TO_ADDR
// InitHc ;
41694: CALL_OW 19
// InitUc ;
41698: CALL_OW 18
// uc_side := side ;
41702: LD_ADDR_OWVAR 20
41706: PUSH
41707: LD_VAR 0 16
41711: ST_TO_ADDR
// uc_nation := nation ;
41712: LD_ADDR_OWVAR 21
41716: PUSH
41717: LD_VAR 0 17
41721: ST_TO_ADDR
// if buildings then
41722: LD_VAR 0 18
41726: IFFALSE 43048
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41728: LD_ADDR_VAR 0 19
41732: PUSH
41733: LD_VAR 0 18
41737: PPUSH
41738: LD_INT 2
41740: PUSH
41741: LD_INT 30
41743: PUSH
41744: LD_INT 29
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 30
41753: PUSH
41754: LD_INT 30
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: LIST
41765: PPUSH
41766: CALL_OW 72
41770: ST_TO_ADDR
// if tmp then
41771: LD_VAR 0 19
41775: IFFALSE 41823
// for i in tmp do
41777: LD_ADDR_VAR 0 8
41781: PUSH
41782: LD_VAR 0 19
41786: PUSH
41787: FOR_IN
41788: IFFALSE 41821
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41790: LD_VAR 0 8
41794: PPUSH
41795: CALL_OW 250
41799: PPUSH
41800: LD_VAR 0 8
41804: PPUSH
41805: CALL_OW 251
41809: PPUSH
41810: LD_VAR 0 16
41814: PPUSH
41815: CALL_OW 441
41819: GO 41787
41821: POP
41822: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41823: LD_VAR 0 18
41827: PPUSH
41828: LD_INT 2
41830: PUSH
41831: LD_INT 30
41833: PUSH
41834: LD_INT 32
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 30
41843: PUSH
41844: LD_INT 33
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: LIST
41855: PPUSH
41856: CALL_OW 72
41860: IFFALSE 41948
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41862: LD_ADDR_VAR 0 8
41866: PUSH
41867: LD_VAR 0 18
41871: PPUSH
41872: LD_INT 2
41874: PUSH
41875: LD_INT 30
41877: PUSH
41878: LD_INT 32
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 30
41887: PUSH
41888: LD_INT 33
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: LIST
41899: PPUSH
41900: CALL_OW 72
41904: PUSH
41905: FOR_IN
41906: IFFALSE 41946
// begin if not GetBWeapon ( i ) then
41908: LD_VAR 0 8
41912: PPUSH
41913: CALL_OW 269
41917: NOT
41918: IFFALSE 41944
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41920: LD_VAR 0 8
41924: PPUSH
41925: LD_VAR 0 8
41929: PPUSH
41930: LD_VAR 0 2
41934: PPUSH
41935: CALL 43194 0 2
41939: PPUSH
41940: CALL_OW 431
// end ;
41944: GO 41905
41946: POP
41947: POP
// end ; for i = 1 to personel do
41948: LD_ADDR_VAR 0 8
41952: PUSH
41953: DOUBLE
41954: LD_INT 1
41956: DEC
41957: ST_TO_ADDR
41958: LD_VAR 0 6
41962: PUSH
41963: FOR_TO
41964: IFFALSE 43028
// begin if i > 4 then
41966: LD_VAR 0 8
41970: PUSH
41971: LD_INT 4
41973: GREATER
41974: IFFALSE 41978
// break ;
41976: GO 43028
// case i of 1 :
41978: LD_VAR 0 8
41982: PUSH
41983: LD_INT 1
41985: DOUBLE
41986: EQUAL
41987: IFTRUE 41991
41989: GO 42071
41991: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41992: LD_ADDR_VAR 0 12
41996: PUSH
41997: LD_VAR 0 18
42001: PPUSH
42002: LD_INT 22
42004: PUSH
42005: LD_VAR 0 16
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 58
42016: PUSH
42017: EMPTY
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: PUSH
42023: LD_INT 30
42025: PUSH
42026: LD_INT 32
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 30
42035: PUSH
42036: LD_INT 4
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 30
42045: PUSH
42046: LD_INT 5
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: PPUSH
42064: CALL_OW 72
42068: ST_TO_ADDR
42069: GO 42293
42071: LD_INT 2
42073: DOUBLE
42074: EQUAL
42075: IFTRUE 42079
42077: GO 42141
42079: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42080: LD_ADDR_VAR 0 12
42084: PUSH
42085: LD_VAR 0 18
42089: PPUSH
42090: LD_INT 22
42092: PUSH
42093: LD_VAR 0 16
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 2
42104: PUSH
42105: LD_INT 30
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 30
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PPUSH
42134: CALL_OW 72
42138: ST_TO_ADDR
42139: GO 42293
42141: LD_INT 3
42143: DOUBLE
42144: EQUAL
42145: IFTRUE 42149
42147: GO 42211
42149: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42150: LD_ADDR_VAR 0 12
42154: PUSH
42155: LD_VAR 0 18
42159: PPUSH
42160: LD_INT 22
42162: PUSH
42163: LD_VAR 0 16
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: LD_INT 30
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 30
42187: PUSH
42188: LD_INT 3
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: LIST
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PPUSH
42204: CALL_OW 72
42208: ST_TO_ADDR
42209: GO 42293
42211: LD_INT 4
42213: DOUBLE
42214: EQUAL
42215: IFTRUE 42219
42217: GO 42292
42219: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42220: LD_ADDR_VAR 0 12
42224: PUSH
42225: LD_VAR 0 18
42229: PPUSH
42230: LD_INT 22
42232: PUSH
42233: LD_VAR 0 16
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: PUSH
42245: LD_INT 30
42247: PUSH
42248: LD_INT 6
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 30
42257: PUSH
42258: LD_INT 7
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 30
42267: PUSH
42268: LD_INT 8
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PPUSH
42285: CALL_OW 72
42289: ST_TO_ADDR
42290: GO 42293
42292: POP
// if i = 1 then
42293: LD_VAR 0 8
42297: PUSH
42298: LD_INT 1
42300: EQUAL
42301: IFFALSE 42412
// begin tmp := [ ] ;
42303: LD_ADDR_VAR 0 19
42307: PUSH
42308: EMPTY
42309: ST_TO_ADDR
// for j in f do
42310: LD_ADDR_VAR 0 9
42314: PUSH
42315: LD_VAR 0 12
42319: PUSH
42320: FOR_IN
42321: IFFALSE 42394
// if GetBType ( j ) = b_bunker then
42323: LD_VAR 0 9
42327: PPUSH
42328: CALL_OW 266
42332: PUSH
42333: LD_INT 32
42335: EQUAL
42336: IFFALSE 42363
// tmp := Insert ( tmp , 1 , j ) else
42338: LD_ADDR_VAR 0 19
42342: PUSH
42343: LD_VAR 0 19
42347: PPUSH
42348: LD_INT 1
42350: PPUSH
42351: LD_VAR 0 9
42355: PPUSH
42356: CALL_OW 2
42360: ST_TO_ADDR
42361: GO 42392
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42363: LD_ADDR_VAR 0 19
42367: PUSH
42368: LD_VAR 0 19
42372: PPUSH
42373: LD_VAR 0 19
42377: PUSH
42378: LD_INT 1
42380: PLUS
42381: PPUSH
42382: LD_VAR 0 9
42386: PPUSH
42387: CALL_OW 2
42391: ST_TO_ADDR
42392: GO 42320
42394: POP
42395: POP
// if tmp then
42396: LD_VAR 0 19
42400: IFFALSE 42412
// f := tmp ;
42402: LD_ADDR_VAR 0 12
42406: PUSH
42407: LD_VAR 0 19
42411: ST_TO_ADDR
// end ; x := personel [ i ] ;
42412: LD_ADDR_VAR 0 13
42416: PUSH
42417: LD_VAR 0 6
42421: PUSH
42422: LD_VAR 0 8
42426: ARRAY
42427: ST_TO_ADDR
// if x = - 1 then
42428: LD_VAR 0 13
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: EQUAL
42437: IFFALSE 42646
// begin for j in f do
42439: LD_ADDR_VAR 0 9
42443: PUSH
42444: LD_VAR 0 12
42448: PUSH
42449: FOR_IN
42450: IFFALSE 42642
// repeat InitHc ;
42452: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42456: LD_VAR 0 9
42460: PPUSH
42461: CALL_OW 266
42465: PUSH
42466: LD_INT 5
42468: EQUAL
42469: IFFALSE 42539
// begin if UnitsInside ( j ) < 3 then
42471: LD_VAR 0 9
42475: PPUSH
42476: CALL_OW 313
42480: PUSH
42481: LD_INT 3
42483: LESS
42484: IFFALSE 42520
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42486: LD_INT 0
42488: PPUSH
42489: LD_INT 5
42491: PUSH
42492: LD_INT 8
42494: PUSH
42495: LD_INT 9
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: LIST
42502: PUSH
42503: LD_VAR 0 17
42507: ARRAY
42508: PPUSH
42509: LD_VAR 0 4
42513: PPUSH
42514: CALL_OW 380
42518: GO 42537
// PrepareHuman ( false , i , skill ) ;
42520: LD_INT 0
42522: PPUSH
42523: LD_VAR 0 8
42527: PPUSH
42528: LD_VAR 0 4
42532: PPUSH
42533: CALL_OW 380
// end else
42537: GO 42556
// PrepareHuman ( false , i , skill ) ;
42539: LD_INT 0
42541: PPUSH
42542: LD_VAR 0 8
42546: PPUSH
42547: LD_VAR 0 4
42551: PPUSH
42552: CALL_OW 380
// un := CreateHuman ;
42556: LD_ADDR_VAR 0 14
42560: PUSH
42561: CALL_OW 44
42565: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42566: LD_ADDR_VAR 0 7
42570: PUSH
42571: LD_VAR 0 7
42575: PPUSH
42576: LD_INT 1
42578: PPUSH
42579: LD_VAR 0 14
42583: PPUSH
42584: CALL_OW 2
42588: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42589: LD_VAR 0 14
42593: PPUSH
42594: LD_VAR 0 9
42598: PPUSH
42599: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42603: LD_VAR 0 9
42607: PPUSH
42608: CALL_OW 313
42612: PUSH
42613: LD_INT 6
42615: EQUAL
42616: PUSH
42617: LD_VAR 0 9
42621: PPUSH
42622: CALL_OW 266
42626: PUSH
42627: LD_INT 32
42629: PUSH
42630: LD_INT 31
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: IN
42637: OR
42638: IFFALSE 42452
42640: GO 42449
42642: POP
42643: POP
// end else
42644: GO 43026
// for j = 1 to x do
42646: LD_ADDR_VAR 0 9
42650: PUSH
42651: DOUBLE
42652: LD_INT 1
42654: DEC
42655: ST_TO_ADDR
42656: LD_VAR 0 13
42660: PUSH
42661: FOR_TO
42662: IFFALSE 43024
// begin InitHc ;
42664: CALL_OW 19
// if not f then
42668: LD_VAR 0 12
42672: NOT
42673: IFFALSE 42762
// begin PrepareHuman ( false , i , skill ) ;
42675: LD_INT 0
42677: PPUSH
42678: LD_VAR 0 8
42682: PPUSH
42683: LD_VAR 0 4
42687: PPUSH
42688: CALL_OW 380
// un := CreateHuman ;
42692: LD_ADDR_VAR 0 14
42696: PUSH
42697: CALL_OW 44
42701: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42702: LD_ADDR_VAR 0 7
42706: PUSH
42707: LD_VAR 0 7
42711: PPUSH
42712: LD_INT 1
42714: PPUSH
42715: LD_VAR 0 14
42719: PPUSH
42720: CALL_OW 2
42724: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42725: LD_VAR 0 14
42729: PPUSH
42730: LD_VAR 0 1
42734: PPUSH
42735: CALL_OW 250
42739: PPUSH
42740: LD_VAR 0 1
42744: PPUSH
42745: CALL_OW 251
42749: PPUSH
42750: LD_INT 10
42752: PPUSH
42753: LD_INT 0
42755: PPUSH
42756: CALL_OW 50
// continue ;
42760: GO 42661
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42762: LD_VAR 0 12
42766: PUSH
42767: LD_INT 1
42769: ARRAY
42770: PPUSH
42771: CALL_OW 313
42775: PUSH
42776: LD_VAR 0 12
42780: PUSH
42781: LD_INT 1
42783: ARRAY
42784: PPUSH
42785: CALL_OW 266
42789: PUSH
42790: LD_INT 32
42792: PUSH
42793: LD_INT 31
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: IN
42800: AND
42801: PUSH
42802: LD_VAR 0 12
42806: PUSH
42807: LD_INT 1
42809: ARRAY
42810: PPUSH
42811: CALL_OW 313
42815: PUSH
42816: LD_INT 6
42818: EQUAL
42819: OR
42820: IFFALSE 42840
// f := Delete ( f , 1 ) ;
42822: LD_ADDR_VAR 0 12
42826: PUSH
42827: LD_VAR 0 12
42831: PPUSH
42832: LD_INT 1
42834: PPUSH
42835: CALL_OW 3
42839: ST_TO_ADDR
// if not f then
42840: LD_VAR 0 12
42844: NOT
42845: IFFALSE 42863
// begin x := x + 2 ;
42847: LD_ADDR_VAR 0 13
42851: PUSH
42852: LD_VAR 0 13
42856: PUSH
42857: LD_INT 2
42859: PLUS
42860: ST_TO_ADDR
// continue ;
42861: GO 42661
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42863: LD_VAR 0 12
42867: PUSH
42868: LD_INT 1
42870: ARRAY
42871: PPUSH
42872: CALL_OW 266
42876: PUSH
42877: LD_INT 5
42879: EQUAL
42880: IFFALSE 42954
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42882: LD_VAR 0 12
42886: PUSH
42887: LD_INT 1
42889: ARRAY
42890: PPUSH
42891: CALL_OW 313
42895: PUSH
42896: LD_INT 3
42898: LESS
42899: IFFALSE 42935
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42901: LD_INT 0
42903: PPUSH
42904: LD_INT 5
42906: PUSH
42907: LD_INT 8
42909: PUSH
42910: LD_INT 9
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: PUSH
42918: LD_VAR 0 17
42922: ARRAY
42923: PPUSH
42924: LD_VAR 0 4
42928: PPUSH
42929: CALL_OW 380
42933: GO 42952
// PrepareHuman ( false , i , skill ) ;
42935: LD_INT 0
42937: PPUSH
42938: LD_VAR 0 8
42942: PPUSH
42943: LD_VAR 0 4
42947: PPUSH
42948: CALL_OW 380
// end else
42952: GO 42971
// PrepareHuman ( false , i , skill ) ;
42954: LD_INT 0
42956: PPUSH
42957: LD_VAR 0 8
42961: PPUSH
42962: LD_VAR 0 4
42966: PPUSH
42967: CALL_OW 380
// un := CreateHuman ;
42971: LD_ADDR_VAR 0 14
42975: PUSH
42976: CALL_OW 44
42980: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42981: LD_ADDR_VAR 0 7
42985: PUSH
42986: LD_VAR 0 7
42990: PPUSH
42991: LD_INT 1
42993: PPUSH
42994: LD_VAR 0 14
42998: PPUSH
42999: CALL_OW 2
43003: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43004: LD_VAR 0 14
43008: PPUSH
43009: LD_VAR 0 12
43013: PUSH
43014: LD_INT 1
43016: ARRAY
43017: PPUSH
43018: CALL_OW 52
// end ;
43022: GO 42661
43024: POP
43025: POP
// end ;
43026: GO 41963
43028: POP
43029: POP
// result := result ^ buildings ;
43030: LD_ADDR_VAR 0 7
43034: PUSH
43035: LD_VAR 0 7
43039: PUSH
43040: LD_VAR 0 18
43044: ADD
43045: ST_TO_ADDR
// end else
43046: GO 43189
// begin for i = 1 to personel do
43048: LD_ADDR_VAR 0 8
43052: PUSH
43053: DOUBLE
43054: LD_INT 1
43056: DEC
43057: ST_TO_ADDR
43058: LD_VAR 0 6
43062: PUSH
43063: FOR_TO
43064: IFFALSE 43187
// begin if i > 4 then
43066: LD_VAR 0 8
43070: PUSH
43071: LD_INT 4
43073: GREATER
43074: IFFALSE 43078
// break ;
43076: GO 43187
// x := personel [ i ] ;
43078: LD_ADDR_VAR 0 13
43082: PUSH
43083: LD_VAR 0 6
43087: PUSH
43088: LD_VAR 0 8
43092: ARRAY
43093: ST_TO_ADDR
// if x = - 1 then
43094: LD_VAR 0 13
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: EQUAL
43103: IFFALSE 43107
// continue ;
43105: GO 43063
// PrepareHuman ( false , i , skill ) ;
43107: LD_INT 0
43109: PPUSH
43110: LD_VAR 0 8
43114: PPUSH
43115: LD_VAR 0 4
43119: PPUSH
43120: CALL_OW 380
// un := CreateHuman ;
43124: LD_ADDR_VAR 0 14
43128: PUSH
43129: CALL_OW 44
43133: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43134: LD_VAR 0 14
43138: PPUSH
43139: LD_VAR 0 1
43143: PPUSH
43144: CALL_OW 250
43148: PPUSH
43149: LD_VAR 0 1
43153: PPUSH
43154: CALL_OW 251
43158: PPUSH
43159: LD_INT 10
43161: PPUSH
43162: LD_INT 0
43164: PPUSH
43165: CALL_OW 50
// result := result ^ un ;
43169: LD_ADDR_VAR 0 7
43173: PUSH
43174: LD_VAR 0 7
43178: PUSH
43179: LD_VAR 0 14
43183: ADD
43184: ST_TO_ADDR
// end ;
43185: GO 43063
43187: POP
43188: POP
// end ; end ;
43189: LD_VAR 0 7
43193: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43194: LD_INT 0
43196: PPUSH
43197: PPUSH
43198: PPUSH
43199: PPUSH
43200: PPUSH
43201: PPUSH
43202: PPUSH
43203: PPUSH
43204: PPUSH
43205: PPUSH
43206: PPUSH
43207: PPUSH
43208: PPUSH
43209: PPUSH
43210: PPUSH
43211: PPUSH
// result := false ;
43212: LD_ADDR_VAR 0 3
43216: PUSH
43217: LD_INT 0
43219: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43220: LD_VAR 0 1
43224: NOT
43225: PUSH
43226: LD_VAR 0 1
43230: PPUSH
43231: CALL_OW 266
43235: PUSH
43236: LD_INT 32
43238: PUSH
43239: LD_INT 33
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: IN
43246: NOT
43247: OR
43248: IFFALSE 43252
// exit ;
43250: GO 44388
// nat := GetNation ( tower ) ;
43252: LD_ADDR_VAR 0 12
43256: PUSH
43257: LD_VAR 0 1
43261: PPUSH
43262: CALL_OW 248
43266: ST_TO_ADDR
// side := GetSide ( tower ) ;
43267: LD_ADDR_VAR 0 16
43271: PUSH
43272: LD_VAR 0 1
43276: PPUSH
43277: CALL_OW 255
43281: ST_TO_ADDR
// x := GetX ( tower ) ;
43282: LD_ADDR_VAR 0 10
43286: PUSH
43287: LD_VAR 0 1
43291: PPUSH
43292: CALL_OW 250
43296: ST_TO_ADDR
// y := GetY ( tower ) ;
43297: LD_ADDR_VAR 0 11
43301: PUSH
43302: LD_VAR 0 1
43306: PPUSH
43307: CALL_OW 251
43311: ST_TO_ADDR
// if not x or not y then
43312: LD_VAR 0 10
43316: NOT
43317: PUSH
43318: LD_VAR 0 11
43322: NOT
43323: OR
43324: IFFALSE 43328
// exit ;
43326: GO 44388
// weapon := 0 ;
43328: LD_ADDR_VAR 0 18
43332: PUSH
43333: LD_INT 0
43335: ST_TO_ADDR
// fac_list := [ ] ;
43336: LD_ADDR_VAR 0 17
43340: PUSH
43341: EMPTY
43342: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
43343: LD_ADDR_VAR 0 6
43347: PUSH
43348: LD_VAR 0 1
43352: PPUSH
43353: CALL_OW 274
43357: PPUSH
43358: LD_VAR 0 2
43362: PPUSH
43363: CALL 40966 0 2
43367: PPUSH
43368: LD_INT 30
43370: PUSH
43371: LD_INT 3
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PPUSH
43378: CALL_OW 72
43382: ST_TO_ADDR
// if not factories then
43383: LD_VAR 0 6
43387: NOT
43388: IFFALSE 43392
// exit ;
43390: GO 44388
// for i in factories do
43392: LD_ADDR_VAR 0 8
43396: PUSH
43397: LD_VAR 0 6
43401: PUSH
43402: FOR_IN
43403: IFFALSE 43428
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43405: LD_ADDR_VAR 0 17
43409: PUSH
43410: LD_VAR 0 17
43414: PUSH
43415: LD_VAR 0 8
43419: PPUSH
43420: CALL_OW 478
43424: UNION
43425: ST_TO_ADDR
43426: GO 43402
43428: POP
43429: POP
// if not fac_list then
43430: LD_VAR 0 17
43434: NOT
43435: IFFALSE 43439
// exit ;
43437: GO 44388
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43439: LD_ADDR_VAR 0 5
43443: PUSH
43444: LD_INT 4
43446: PUSH
43447: LD_INT 5
43449: PUSH
43450: LD_INT 9
43452: PUSH
43453: LD_INT 10
43455: PUSH
43456: LD_INT 6
43458: PUSH
43459: LD_INT 7
43461: PUSH
43462: LD_INT 11
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 27
43476: PUSH
43477: LD_INT 28
43479: PUSH
43480: LD_INT 26
43482: PUSH
43483: LD_INT 30
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 43
43494: PUSH
43495: LD_INT 44
43497: PUSH
43498: LD_INT 46
43500: PUSH
43501: LD_INT 45
43503: PUSH
43504: LD_INT 47
43506: PUSH
43507: LD_INT 49
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: LIST
43522: PUSH
43523: LD_VAR 0 12
43527: ARRAY
43528: ST_TO_ADDR
// for i in list do
43529: LD_ADDR_VAR 0 8
43533: PUSH
43534: LD_VAR 0 5
43538: PUSH
43539: FOR_IN
43540: IFFALSE 43573
// if not i in fac_list then
43542: LD_VAR 0 8
43546: PUSH
43547: LD_VAR 0 17
43551: IN
43552: NOT
43553: IFFALSE 43571
// list := list diff i ;
43555: LD_ADDR_VAR 0 5
43559: PUSH
43560: LD_VAR 0 5
43564: PUSH
43565: LD_VAR 0 8
43569: DIFF
43570: ST_TO_ADDR
43571: GO 43539
43573: POP
43574: POP
// if not list then
43575: LD_VAR 0 5
43579: NOT
43580: IFFALSE 43584
// exit ;
43582: GO 44388
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43584: LD_VAR 0 12
43588: PUSH
43589: LD_INT 3
43591: EQUAL
43592: PUSH
43593: LD_INT 49
43595: PUSH
43596: LD_VAR 0 5
43600: IN
43601: AND
43602: PUSH
43603: LD_INT 31
43605: PPUSH
43606: LD_VAR 0 16
43610: PPUSH
43611: CALL_OW 321
43615: PUSH
43616: LD_INT 2
43618: EQUAL
43619: AND
43620: IFFALSE 43680
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43622: LD_INT 22
43624: PUSH
43625: LD_VAR 0 16
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 35
43636: PUSH
43637: LD_INT 49
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 91
43646: PUSH
43647: LD_VAR 0 1
43651: PUSH
43652: LD_INT 10
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: LIST
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: LIST
43664: PPUSH
43665: CALL_OW 69
43669: NOT
43670: IFFALSE 43680
// weapon := ru_time_lapser ;
43672: LD_ADDR_VAR 0 18
43676: PUSH
43677: LD_INT 49
43679: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43680: LD_VAR 0 12
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: IN
43695: PUSH
43696: LD_INT 11
43698: PUSH
43699: LD_VAR 0 5
43703: IN
43704: PUSH
43705: LD_INT 30
43707: PUSH
43708: LD_VAR 0 5
43712: IN
43713: OR
43714: AND
43715: PUSH
43716: LD_INT 6
43718: PPUSH
43719: LD_VAR 0 16
43723: PPUSH
43724: CALL_OW 321
43728: PUSH
43729: LD_INT 2
43731: EQUAL
43732: AND
43733: IFFALSE 43898
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43735: LD_INT 22
43737: PUSH
43738: LD_VAR 0 16
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 35
43752: PUSH
43753: LD_INT 11
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 35
43762: PUSH
43763: LD_INT 30
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 91
43777: PUSH
43778: LD_VAR 0 1
43782: PUSH
43783: LD_INT 18
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: LIST
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: LIST
43795: PPUSH
43796: CALL_OW 69
43800: NOT
43801: PUSH
43802: LD_INT 22
43804: PUSH
43805: LD_VAR 0 16
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: LD_INT 30
43819: PUSH
43820: LD_INT 32
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 30
43829: PUSH
43830: LD_INT 33
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 91
43844: PUSH
43845: LD_VAR 0 1
43849: PUSH
43850: LD_INT 12
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: LIST
43862: PUSH
43863: EMPTY
43864: LIST
43865: PPUSH
43866: CALL_OW 69
43870: PUSH
43871: LD_INT 2
43873: GREATER
43874: AND
43875: IFFALSE 43898
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43877: LD_ADDR_VAR 0 18
43881: PUSH
43882: LD_INT 11
43884: PUSH
43885: LD_INT 30
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_VAR 0 12
43896: ARRAY
43897: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43898: LD_VAR 0 18
43902: NOT
43903: PUSH
43904: LD_INT 40
43906: PPUSH
43907: LD_VAR 0 16
43911: PPUSH
43912: CALL_OW 321
43916: PUSH
43917: LD_INT 2
43919: EQUAL
43920: AND
43921: PUSH
43922: LD_INT 7
43924: PUSH
43925: LD_VAR 0 5
43929: IN
43930: PUSH
43931: LD_INT 28
43933: PUSH
43934: LD_VAR 0 5
43938: IN
43939: OR
43940: PUSH
43941: LD_INT 45
43943: PUSH
43944: LD_VAR 0 5
43948: IN
43949: OR
43950: AND
43951: IFFALSE 44205
// begin hex := GetHexInfo ( x , y ) ;
43953: LD_ADDR_VAR 0 4
43957: PUSH
43958: LD_VAR 0 10
43962: PPUSH
43963: LD_VAR 0 11
43967: PPUSH
43968: CALL_OW 546
43972: ST_TO_ADDR
// if hex [ 1 ] then
43973: LD_VAR 0 4
43977: PUSH
43978: LD_INT 1
43980: ARRAY
43981: IFFALSE 43985
// exit ;
43983: GO 44388
// height := hex [ 2 ] ;
43985: LD_ADDR_VAR 0 15
43989: PUSH
43990: LD_VAR 0 4
43994: PUSH
43995: LD_INT 2
43997: ARRAY
43998: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43999: LD_ADDR_VAR 0 14
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: LD_INT 3
44012: PUSH
44013: LD_INT 5
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: ST_TO_ADDR
// for i in tmp do
44022: LD_ADDR_VAR 0 8
44026: PUSH
44027: LD_VAR 0 14
44031: PUSH
44032: FOR_IN
44033: IFFALSE 44203
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44035: LD_ADDR_VAR 0 9
44039: PUSH
44040: LD_VAR 0 10
44044: PPUSH
44045: LD_VAR 0 8
44049: PPUSH
44050: LD_INT 5
44052: PPUSH
44053: CALL_OW 272
44057: PUSH
44058: LD_VAR 0 11
44062: PPUSH
44063: LD_VAR 0 8
44067: PPUSH
44068: LD_INT 5
44070: PPUSH
44071: CALL_OW 273
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44080: LD_VAR 0 9
44084: PUSH
44085: LD_INT 1
44087: ARRAY
44088: PPUSH
44089: LD_VAR 0 9
44093: PUSH
44094: LD_INT 2
44096: ARRAY
44097: PPUSH
44098: CALL_OW 488
44102: IFFALSE 44201
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44104: LD_ADDR_VAR 0 4
44108: PUSH
44109: LD_VAR 0 9
44113: PUSH
44114: LD_INT 1
44116: ARRAY
44117: PPUSH
44118: LD_VAR 0 9
44122: PUSH
44123: LD_INT 2
44125: ARRAY
44126: PPUSH
44127: CALL_OW 546
44131: ST_TO_ADDR
// if hex [ 1 ] then
44132: LD_VAR 0 4
44136: PUSH
44137: LD_INT 1
44139: ARRAY
44140: IFFALSE 44144
// continue ;
44142: GO 44032
// h := hex [ 2 ] ;
44144: LD_ADDR_VAR 0 13
44148: PUSH
44149: LD_VAR 0 4
44153: PUSH
44154: LD_INT 2
44156: ARRAY
44157: ST_TO_ADDR
// if h + 7 < height then
44158: LD_VAR 0 13
44162: PUSH
44163: LD_INT 7
44165: PLUS
44166: PUSH
44167: LD_VAR 0 15
44171: LESS
44172: IFFALSE 44201
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44174: LD_ADDR_VAR 0 18
44178: PUSH
44179: LD_INT 7
44181: PUSH
44182: LD_INT 28
44184: PUSH
44185: LD_INT 45
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: LIST
44192: PUSH
44193: LD_VAR 0 12
44197: ARRAY
44198: ST_TO_ADDR
// break ;
44199: GO 44203
// end ; end ; end ;
44201: GO 44032
44203: POP
44204: POP
// end ; if not weapon then
44205: LD_VAR 0 18
44209: NOT
44210: IFFALSE 44270
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44212: LD_ADDR_VAR 0 5
44216: PUSH
44217: LD_VAR 0 5
44221: PUSH
44222: LD_INT 11
44224: PUSH
44225: LD_INT 30
44227: PUSH
44228: LD_INT 49
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: LIST
44235: DIFF
44236: ST_TO_ADDR
// if not list then
44237: LD_VAR 0 5
44241: NOT
44242: IFFALSE 44246
// exit ;
44244: GO 44388
// weapon := list [ rand ( 1 , list ) ] ;
44246: LD_ADDR_VAR 0 18
44250: PUSH
44251: LD_VAR 0 5
44255: PUSH
44256: LD_INT 1
44258: PPUSH
44259: LD_VAR 0 5
44263: PPUSH
44264: CALL_OW 12
44268: ARRAY
44269: ST_TO_ADDR
// end ; if weapon then
44270: LD_VAR 0 18
44274: IFFALSE 44388
// begin tmp := CostOfWeapon ( weapon ) ;
44276: LD_ADDR_VAR 0 14
44280: PUSH
44281: LD_VAR 0 18
44285: PPUSH
44286: CALL_OW 451
44290: ST_TO_ADDR
// j := GetBase ( tower ) ;
44291: LD_ADDR_VAR 0 9
44295: PUSH
44296: LD_VAR 0 1
44300: PPUSH
44301: CALL_OW 274
44305: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44306: LD_VAR 0 9
44310: PPUSH
44311: LD_INT 1
44313: PPUSH
44314: CALL_OW 275
44318: PUSH
44319: LD_VAR 0 14
44323: PUSH
44324: LD_INT 1
44326: ARRAY
44327: GREATEREQUAL
44328: PUSH
44329: LD_VAR 0 9
44333: PPUSH
44334: LD_INT 2
44336: PPUSH
44337: CALL_OW 275
44341: PUSH
44342: LD_VAR 0 14
44346: PUSH
44347: LD_INT 2
44349: ARRAY
44350: GREATEREQUAL
44351: AND
44352: PUSH
44353: LD_VAR 0 9
44357: PPUSH
44358: LD_INT 3
44360: PPUSH
44361: CALL_OW 275
44365: PUSH
44366: LD_VAR 0 14
44370: PUSH
44371: LD_INT 3
44373: ARRAY
44374: GREATEREQUAL
44375: AND
44376: IFFALSE 44388
// result := weapon ;
44378: LD_ADDR_VAR 0 3
44382: PUSH
44383: LD_VAR 0 18
44387: ST_TO_ADDR
// end ; end ;
44388: LD_VAR 0 3
44392: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44393: LD_INT 0
44395: PPUSH
44396: PPUSH
// result := true ;
44397: LD_ADDR_VAR 0 3
44401: PUSH
44402: LD_INT 1
44404: ST_TO_ADDR
// if array1 = array2 then
44405: LD_VAR 0 1
44409: PUSH
44410: LD_VAR 0 2
44414: EQUAL
44415: IFFALSE 44475
// begin for i = 1 to array1 do
44417: LD_ADDR_VAR 0 4
44421: PUSH
44422: DOUBLE
44423: LD_INT 1
44425: DEC
44426: ST_TO_ADDR
44427: LD_VAR 0 1
44431: PUSH
44432: FOR_TO
44433: IFFALSE 44471
// if array1 [ i ] <> array2 [ i ] then
44435: LD_VAR 0 1
44439: PUSH
44440: LD_VAR 0 4
44444: ARRAY
44445: PUSH
44446: LD_VAR 0 2
44450: PUSH
44451: LD_VAR 0 4
44455: ARRAY
44456: NONEQUAL
44457: IFFALSE 44469
// begin result := false ;
44459: LD_ADDR_VAR 0 3
44463: PUSH
44464: LD_INT 0
44466: ST_TO_ADDR
// break ;
44467: GO 44471
// end ;
44469: GO 44432
44471: POP
44472: POP
// end else
44473: GO 44483
// result := false ;
44475: LD_ADDR_VAR 0 3
44479: PUSH
44480: LD_INT 0
44482: ST_TO_ADDR
// end ;
44483: LD_VAR 0 3
44487: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44488: LD_INT 0
44490: PPUSH
44491: PPUSH
44492: PPUSH
// pom := GetBase ( fac ) ;
44493: LD_ADDR_VAR 0 5
44497: PUSH
44498: LD_VAR 0 1
44502: PPUSH
44503: CALL_OW 274
44507: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44508: LD_ADDR_VAR 0 4
44512: PUSH
44513: LD_VAR 0 2
44517: PUSH
44518: LD_INT 1
44520: ARRAY
44521: PPUSH
44522: LD_VAR 0 2
44526: PUSH
44527: LD_INT 2
44529: ARRAY
44530: PPUSH
44531: LD_VAR 0 2
44535: PUSH
44536: LD_INT 3
44538: ARRAY
44539: PPUSH
44540: LD_VAR 0 2
44544: PUSH
44545: LD_INT 4
44547: ARRAY
44548: PPUSH
44549: CALL_OW 449
44553: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44554: LD_ADDR_VAR 0 3
44558: PUSH
44559: LD_VAR 0 5
44563: PPUSH
44564: LD_INT 1
44566: PPUSH
44567: CALL_OW 275
44571: PUSH
44572: LD_VAR 0 4
44576: PUSH
44577: LD_INT 1
44579: ARRAY
44580: GREATEREQUAL
44581: PUSH
44582: LD_VAR 0 5
44586: PPUSH
44587: LD_INT 2
44589: PPUSH
44590: CALL_OW 275
44594: PUSH
44595: LD_VAR 0 4
44599: PUSH
44600: LD_INT 2
44602: ARRAY
44603: GREATEREQUAL
44604: AND
44605: PUSH
44606: LD_VAR 0 5
44610: PPUSH
44611: LD_INT 3
44613: PPUSH
44614: CALL_OW 275
44618: PUSH
44619: LD_VAR 0 4
44623: PUSH
44624: LD_INT 3
44626: ARRAY
44627: GREATEREQUAL
44628: AND
44629: ST_TO_ADDR
// end ;
44630: LD_VAR 0 3
44634: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44635: LD_INT 0
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
// pom := GetBase ( building ) ;
44641: LD_ADDR_VAR 0 3
44645: PUSH
44646: LD_VAR 0 1
44650: PPUSH
44651: CALL_OW 274
44655: ST_TO_ADDR
// if not pom then
44656: LD_VAR 0 3
44660: NOT
44661: IFFALSE 44665
// exit ;
44663: GO 44835
// btype := GetBType ( building ) ;
44665: LD_ADDR_VAR 0 5
44669: PUSH
44670: LD_VAR 0 1
44674: PPUSH
44675: CALL_OW 266
44679: ST_TO_ADDR
// if btype = b_armoury then
44680: LD_VAR 0 5
44684: PUSH
44685: LD_INT 4
44687: EQUAL
44688: IFFALSE 44698
// btype := b_barracks ;
44690: LD_ADDR_VAR 0 5
44694: PUSH
44695: LD_INT 5
44697: ST_TO_ADDR
// if btype = b_depot then
44698: LD_VAR 0 5
44702: PUSH
44703: LD_INT 0
44705: EQUAL
44706: IFFALSE 44716
// btype := b_warehouse ;
44708: LD_ADDR_VAR 0 5
44712: PUSH
44713: LD_INT 1
44715: ST_TO_ADDR
// if btype = b_workshop then
44716: LD_VAR 0 5
44720: PUSH
44721: LD_INT 2
44723: EQUAL
44724: IFFALSE 44734
// btype := b_factory ;
44726: LD_ADDR_VAR 0 5
44730: PUSH
44731: LD_INT 3
44733: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44734: LD_ADDR_VAR 0 4
44738: PUSH
44739: LD_VAR 0 5
44743: PPUSH
44744: LD_VAR 0 1
44748: PPUSH
44749: CALL_OW 248
44753: PPUSH
44754: CALL_OW 450
44758: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44759: LD_ADDR_VAR 0 2
44763: PUSH
44764: LD_VAR 0 3
44768: PPUSH
44769: LD_INT 1
44771: PPUSH
44772: CALL_OW 275
44776: PUSH
44777: LD_VAR 0 4
44781: PUSH
44782: LD_INT 1
44784: ARRAY
44785: GREATEREQUAL
44786: PUSH
44787: LD_VAR 0 3
44791: PPUSH
44792: LD_INT 2
44794: PPUSH
44795: CALL_OW 275
44799: PUSH
44800: LD_VAR 0 4
44804: PUSH
44805: LD_INT 2
44807: ARRAY
44808: GREATEREQUAL
44809: AND
44810: PUSH
44811: LD_VAR 0 3
44815: PPUSH
44816: LD_INT 3
44818: PPUSH
44819: CALL_OW 275
44823: PUSH
44824: LD_VAR 0 4
44828: PUSH
44829: LD_INT 3
44831: ARRAY
44832: GREATEREQUAL
44833: AND
44834: ST_TO_ADDR
// end ;
44835: LD_VAR 0 2
44839: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44840: LD_INT 0
44842: PPUSH
44843: PPUSH
44844: PPUSH
// pom := GetBase ( building ) ;
44845: LD_ADDR_VAR 0 4
44849: PUSH
44850: LD_VAR 0 1
44854: PPUSH
44855: CALL_OW 274
44859: ST_TO_ADDR
// if not pom then
44860: LD_VAR 0 4
44864: NOT
44865: IFFALSE 44869
// exit ;
44867: GO 44970
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44869: LD_ADDR_VAR 0 5
44873: PUSH
44874: LD_VAR 0 2
44878: PPUSH
44879: LD_VAR 0 1
44883: PPUSH
44884: CALL_OW 248
44888: PPUSH
44889: CALL_OW 450
44893: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44894: LD_ADDR_VAR 0 3
44898: PUSH
44899: LD_VAR 0 4
44903: PPUSH
44904: LD_INT 1
44906: PPUSH
44907: CALL_OW 275
44911: PUSH
44912: LD_VAR 0 5
44916: PUSH
44917: LD_INT 1
44919: ARRAY
44920: GREATEREQUAL
44921: PUSH
44922: LD_VAR 0 4
44926: PPUSH
44927: LD_INT 2
44929: PPUSH
44930: CALL_OW 275
44934: PUSH
44935: LD_VAR 0 5
44939: PUSH
44940: LD_INT 2
44942: ARRAY
44943: GREATEREQUAL
44944: AND
44945: PUSH
44946: LD_VAR 0 4
44950: PPUSH
44951: LD_INT 3
44953: PPUSH
44954: CALL_OW 275
44958: PUSH
44959: LD_VAR 0 5
44963: PUSH
44964: LD_INT 3
44966: ARRAY
44967: GREATEREQUAL
44968: AND
44969: ST_TO_ADDR
// end ;
44970: LD_VAR 0 3
44974: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
44975: LD_INT 0
44977: PPUSH
44978: PPUSH
44979: PPUSH
44980: PPUSH
44981: PPUSH
44982: PPUSH
44983: PPUSH
44984: PPUSH
44985: PPUSH
44986: PPUSH
// result := false ;
44987: LD_ADDR_VAR 0 6
44991: PUSH
44992: LD_INT 0
44994: ST_TO_ADDR
// if not base or not btype or not x or not y then
44995: LD_VAR 0 1
44999: NOT
45000: PUSH
45001: LD_VAR 0 2
45005: NOT
45006: OR
45007: PUSH
45008: LD_VAR 0 3
45012: NOT
45013: OR
45014: PUSH
45015: LD_VAR 0 4
45019: NOT
45020: OR
45021: IFFALSE 45025
// exit ;
45023: GO 45634
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
45025: LD_ADDR_VAR 0 12
45029: PUSH
45030: LD_VAR 0 2
45034: PPUSH
45035: LD_VAR 0 3
45039: PPUSH
45040: LD_VAR 0 4
45044: PPUSH
45045: LD_VAR 0 5
45049: PPUSH
45050: LD_VAR 0 1
45054: PUSH
45055: LD_INT 1
45057: ARRAY
45058: PPUSH
45059: CALL_OW 248
45063: PPUSH
45064: LD_INT 0
45066: PPUSH
45067: CALL 46471 0 6
45071: ST_TO_ADDR
// if not hexes then
45072: LD_VAR 0 12
45076: NOT
45077: IFFALSE 45081
// exit ;
45079: GO 45634
// for i = 1 to hexes do
45081: LD_ADDR_VAR 0 7
45085: PUSH
45086: DOUBLE
45087: LD_INT 1
45089: DEC
45090: ST_TO_ADDR
45091: LD_VAR 0 12
45095: PUSH
45096: FOR_TO
45097: IFFALSE 45632
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45099: LD_ADDR_VAR 0 11
45103: PUSH
45104: LD_VAR 0 12
45108: PUSH
45109: LD_VAR 0 7
45113: ARRAY
45114: PUSH
45115: LD_INT 1
45117: ARRAY
45118: PPUSH
45119: LD_VAR 0 12
45123: PUSH
45124: LD_VAR 0 7
45128: ARRAY
45129: PUSH
45130: LD_INT 2
45132: ARRAY
45133: PPUSH
45134: CALL_OW 428
45138: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45139: LD_VAR 0 12
45143: PUSH
45144: LD_VAR 0 7
45148: ARRAY
45149: PUSH
45150: LD_INT 1
45152: ARRAY
45153: PPUSH
45154: LD_VAR 0 12
45158: PUSH
45159: LD_VAR 0 7
45163: ARRAY
45164: PUSH
45165: LD_INT 2
45167: ARRAY
45168: PPUSH
45169: CALL_OW 351
45173: PUSH
45174: LD_VAR 0 12
45178: PUSH
45179: LD_VAR 0 7
45183: ARRAY
45184: PUSH
45185: LD_INT 1
45187: ARRAY
45188: PPUSH
45189: LD_VAR 0 12
45193: PUSH
45194: LD_VAR 0 7
45198: ARRAY
45199: PUSH
45200: LD_INT 2
45202: ARRAY
45203: PPUSH
45204: CALL_OW 488
45208: NOT
45209: OR
45210: PUSH
45211: LD_VAR 0 11
45215: PPUSH
45216: CALL_OW 247
45220: PUSH
45221: LD_INT 3
45223: EQUAL
45224: OR
45225: IFFALSE 45231
// exit ;
45227: POP
45228: POP
45229: GO 45634
// if not tmp or not tmp in base then
45231: LD_VAR 0 11
45235: NOT
45236: PUSH
45237: LD_VAR 0 11
45241: PUSH
45242: LD_VAR 0 1
45246: IN
45247: NOT
45248: OR
45249: IFFALSE 45253
// continue ;
45251: GO 45096
// result := true ;
45253: LD_ADDR_VAR 0 6
45257: PUSH
45258: LD_INT 1
45260: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45261: LD_ADDR_VAR 0 15
45265: PUSH
45266: LD_VAR 0 1
45270: PPUSH
45271: LD_INT 22
45273: PUSH
45274: LD_VAR 0 11
45278: PPUSH
45279: CALL_OW 255
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: LD_INT 30
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 30
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: LIST
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PPUSH
45320: CALL_OW 72
45324: ST_TO_ADDR
// if dep then
45325: LD_VAR 0 15
45329: IFFALSE 45465
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45331: LD_ADDR_VAR 0 14
45335: PUSH
45336: LD_VAR 0 15
45340: PUSH
45341: LD_INT 1
45343: ARRAY
45344: PPUSH
45345: CALL_OW 250
45349: PPUSH
45350: LD_VAR 0 15
45354: PUSH
45355: LD_INT 1
45357: ARRAY
45358: PPUSH
45359: CALL_OW 254
45363: PPUSH
45364: LD_INT 5
45366: PPUSH
45367: CALL_OW 272
45371: PUSH
45372: LD_VAR 0 15
45376: PUSH
45377: LD_INT 1
45379: ARRAY
45380: PPUSH
45381: CALL_OW 251
45385: PPUSH
45386: LD_VAR 0 15
45390: PUSH
45391: LD_INT 1
45393: ARRAY
45394: PPUSH
45395: CALL_OW 254
45399: PPUSH
45400: LD_INT 5
45402: PPUSH
45403: CALL_OW 273
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45412: LD_VAR 0 14
45416: PUSH
45417: LD_INT 1
45419: ARRAY
45420: PPUSH
45421: LD_VAR 0 14
45425: PUSH
45426: LD_INT 2
45428: ARRAY
45429: PPUSH
45430: CALL_OW 488
45434: IFFALSE 45465
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45436: LD_VAR 0 11
45440: PPUSH
45441: LD_VAR 0 14
45445: PUSH
45446: LD_INT 1
45448: ARRAY
45449: PPUSH
45450: LD_VAR 0 14
45454: PUSH
45455: LD_INT 2
45457: ARRAY
45458: PPUSH
45459: CALL_OW 111
// continue ;
45463: GO 45096
// end ; end ; r := GetDir ( tmp ) ;
45465: LD_ADDR_VAR 0 13
45469: PUSH
45470: LD_VAR 0 11
45474: PPUSH
45475: CALL_OW 254
45479: ST_TO_ADDR
// if r = 5 then
45480: LD_VAR 0 13
45484: PUSH
45485: LD_INT 5
45487: EQUAL
45488: IFFALSE 45498
// r := 0 ;
45490: LD_ADDR_VAR 0 13
45494: PUSH
45495: LD_INT 0
45497: ST_TO_ADDR
// for j = r to 5 do
45498: LD_ADDR_VAR 0 8
45502: PUSH
45503: DOUBLE
45504: LD_VAR 0 13
45508: DEC
45509: ST_TO_ADDR
45510: LD_INT 5
45512: PUSH
45513: FOR_TO
45514: IFFALSE 45628
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45516: LD_ADDR_VAR 0 9
45520: PUSH
45521: LD_VAR 0 11
45525: PPUSH
45526: CALL_OW 250
45530: PPUSH
45531: LD_VAR 0 8
45535: PPUSH
45536: LD_INT 2
45538: PPUSH
45539: CALL_OW 272
45543: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45544: LD_ADDR_VAR 0 10
45548: PUSH
45549: LD_VAR 0 11
45553: PPUSH
45554: CALL_OW 251
45558: PPUSH
45559: LD_VAR 0 8
45563: PPUSH
45564: LD_INT 2
45566: PPUSH
45567: CALL_OW 273
45571: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45572: LD_VAR 0 9
45576: PPUSH
45577: LD_VAR 0 10
45581: PPUSH
45582: CALL_OW 488
45586: PUSH
45587: LD_VAR 0 9
45591: PPUSH
45592: LD_VAR 0 10
45596: PPUSH
45597: CALL_OW 428
45601: NOT
45602: AND
45603: IFFALSE 45626
// begin ComMoveXY ( tmp , _x , _y ) ;
45605: LD_VAR 0 11
45609: PPUSH
45610: LD_VAR 0 9
45614: PPUSH
45615: LD_VAR 0 10
45619: PPUSH
45620: CALL_OW 111
// break ;
45624: GO 45628
// end ; end ;
45626: GO 45513
45628: POP
45629: POP
// end ;
45630: GO 45096
45632: POP
45633: POP
// end ;
45634: LD_VAR 0 6
45638: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
45639: LD_INT 0
45641: PPUSH
45642: PPUSH
45643: PPUSH
45644: PPUSH
45645: PPUSH
45646: PPUSH
45647: PPUSH
45648: PPUSH
45649: PPUSH
45650: PPUSH
// result := false ;
45651: LD_ADDR_VAR 0 6
45655: PUSH
45656: LD_INT 0
45658: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45659: LD_VAR 0 1
45663: NOT
45664: PUSH
45665: LD_VAR 0 1
45669: PPUSH
45670: CALL_OW 266
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: IN
45685: NOT
45686: OR
45687: PUSH
45688: LD_VAR 0 2
45692: NOT
45693: OR
45694: PUSH
45695: LD_VAR 0 5
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: LD_INT 3
45711: PUSH
45712: LD_INT 4
45714: PUSH
45715: LD_INT 5
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: IN
45726: NOT
45727: OR
45728: PUSH
45729: LD_VAR 0 3
45733: PPUSH
45734: LD_VAR 0 4
45738: PPUSH
45739: CALL_OW 488
45743: NOT
45744: OR
45745: IFFALSE 45749
// exit ;
45747: GO 46466
// pom := GetBase ( depot ) ;
45749: LD_ADDR_VAR 0 10
45753: PUSH
45754: LD_VAR 0 1
45758: PPUSH
45759: CALL_OW 274
45763: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45764: LD_ADDR_VAR 0 11
45768: PUSH
45769: LD_VAR 0 2
45773: PPUSH
45774: LD_VAR 0 1
45778: PPUSH
45779: CALL_OW 248
45783: PPUSH
45784: CALL_OW 450
45788: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45789: LD_VAR 0 10
45793: PPUSH
45794: LD_INT 1
45796: PPUSH
45797: CALL_OW 275
45801: PUSH
45802: LD_VAR 0 11
45806: PUSH
45807: LD_INT 1
45809: ARRAY
45810: GREATEREQUAL
45811: PUSH
45812: LD_VAR 0 10
45816: PPUSH
45817: LD_INT 2
45819: PPUSH
45820: CALL_OW 275
45824: PUSH
45825: LD_VAR 0 11
45829: PUSH
45830: LD_INT 2
45832: ARRAY
45833: GREATEREQUAL
45834: AND
45835: PUSH
45836: LD_VAR 0 10
45840: PPUSH
45841: LD_INT 3
45843: PPUSH
45844: CALL_OW 275
45848: PUSH
45849: LD_VAR 0 11
45853: PUSH
45854: LD_INT 3
45856: ARRAY
45857: GREATEREQUAL
45858: AND
45859: NOT
45860: IFFALSE 45864
// exit ;
45862: GO 46466
// if GetBType ( depot ) = b_depot then
45864: LD_VAR 0 1
45868: PPUSH
45869: CALL_OW 266
45873: PUSH
45874: LD_INT 0
45876: EQUAL
45877: IFFALSE 45889
// dist := 28 else
45879: LD_ADDR_VAR 0 14
45883: PUSH
45884: LD_INT 28
45886: ST_TO_ADDR
45887: GO 45897
// dist := 36 ;
45889: LD_ADDR_VAR 0 14
45893: PUSH
45894: LD_INT 36
45896: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45897: LD_VAR 0 1
45901: PPUSH
45902: LD_VAR 0 3
45906: PPUSH
45907: LD_VAR 0 4
45911: PPUSH
45912: CALL_OW 297
45916: PUSH
45917: LD_VAR 0 14
45921: GREATER
45922: IFFALSE 45926
// exit ;
45924: GO 46466
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45926: LD_ADDR_VAR 0 12
45930: PUSH
45931: LD_VAR 0 2
45935: PPUSH
45936: LD_VAR 0 3
45940: PPUSH
45941: LD_VAR 0 4
45945: PPUSH
45946: LD_VAR 0 5
45950: PPUSH
45951: LD_VAR 0 1
45955: PPUSH
45956: CALL_OW 248
45960: PPUSH
45961: LD_INT 0
45963: PPUSH
45964: CALL 46471 0 6
45968: ST_TO_ADDR
// if not hexes then
45969: LD_VAR 0 12
45973: NOT
45974: IFFALSE 45978
// exit ;
45976: GO 46466
// hex := GetHexInfo ( x , y ) ;
45978: LD_ADDR_VAR 0 15
45982: PUSH
45983: LD_VAR 0 3
45987: PPUSH
45988: LD_VAR 0 4
45992: PPUSH
45993: CALL_OW 546
45997: ST_TO_ADDR
// if hex [ 1 ] then
45998: LD_VAR 0 15
46002: PUSH
46003: LD_INT 1
46005: ARRAY
46006: IFFALSE 46010
// exit ;
46008: GO 46466
// height := hex [ 2 ] ;
46010: LD_ADDR_VAR 0 13
46014: PUSH
46015: LD_VAR 0 15
46019: PUSH
46020: LD_INT 2
46022: ARRAY
46023: ST_TO_ADDR
// for i = 1 to hexes do
46024: LD_ADDR_VAR 0 7
46028: PUSH
46029: DOUBLE
46030: LD_INT 1
46032: DEC
46033: ST_TO_ADDR
46034: LD_VAR 0 12
46038: PUSH
46039: FOR_TO
46040: IFFALSE 46370
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46042: LD_VAR 0 12
46046: PUSH
46047: LD_VAR 0 7
46051: ARRAY
46052: PUSH
46053: LD_INT 1
46055: ARRAY
46056: PPUSH
46057: LD_VAR 0 12
46061: PUSH
46062: LD_VAR 0 7
46066: ARRAY
46067: PUSH
46068: LD_INT 2
46070: ARRAY
46071: PPUSH
46072: CALL_OW 488
46076: NOT
46077: PUSH
46078: LD_VAR 0 12
46082: PUSH
46083: LD_VAR 0 7
46087: ARRAY
46088: PUSH
46089: LD_INT 1
46091: ARRAY
46092: PPUSH
46093: LD_VAR 0 12
46097: PUSH
46098: LD_VAR 0 7
46102: ARRAY
46103: PUSH
46104: LD_INT 2
46106: ARRAY
46107: PPUSH
46108: CALL_OW 428
46112: PUSH
46113: LD_INT 0
46115: GREATER
46116: OR
46117: PUSH
46118: LD_VAR 0 12
46122: PUSH
46123: LD_VAR 0 7
46127: ARRAY
46128: PUSH
46129: LD_INT 1
46131: ARRAY
46132: PPUSH
46133: LD_VAR 0 12
46137: PUSH
46138: LD_VAR 0 7
46142: ARRAY
46143: PUSH
46144: LD_INT 2
46146: ARRAY
46147: PPUSH
46148: CALL_OW 351
46152: OR
46153: IFFALSE 46159
// exit ;
46155: POP
46156: POP
46157: GO 46466
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46159: LD_ADDR_VAR 0 8
46163: PUSH
46164: LD_VAR 0 12
46168: PUSH
46169: LD_VAR 0 7
46173: ARRAY
46174: PUSH
46175: LD_INT 1
46177: ARRAY
46178: PPUSH
46179: LD_VAR 0 12
46183: PUSH
46184: LD_VAR 0 7
46188: ARRAY
46189: PUSH
46190: LD_INT 2
46192: ARRAY
46193: PPUSH
46194: CALL_OW 546
46198: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46199: LD_VAR 0 8
46203: PUSH
46204: LD_INT 1
46206: ARRAY
46207: PUSH
46208: LD_VAR 0 8
46212: PUSH
46213: LD_INT 2
46215: ARRAY
46216: PUSH
46217: LD_VAR 0 13
46221: PUSH
46222: LD_INT 2
46224: PLUS
46225: GREATER
46226: OR
46227: PUSH
46228: LD_VAR 0 8
46232: PUSH
46233: LD_INT 2
46235: ARRAY
46236: PUSH
46237: LD_VAR 0 13
46241: PUSH
46242: LD_INT 2
46244: MINUS
46245: LESS
46246: OR
46247: PUSH
46248: LD_VAR 0 8
46252: PUSH
46253: LD_INT 3
46255: ARRAY
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 8
46262: PUSH
46263: LD_INT 9
46265: PUSH
46266: LD_INT 10
46268: PUSH
46269: LD_INT 11
46271: PUSH
46272: LD_INT 12
46274: PUSH
46275: LD_INT 13
46277: PUSH
46278: LD_INT 16
46280: PUSH
46281: LD_INT 17
46283: PUSH
46284: LD_INT 18
46286: PUSH
46287: LD_INT 19
46289: PUSH
46290: LD_INT 20
46292: PUSH
46293: LD_INT 21
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: IN
46311: NOT
46312: OR
46313: PUSH
46314: LD_VAR 0 8
46318: PUSH
46319: LD_INT 5
46321: ARRAY
46322: NOT
46323: OR
46324: PUSH
46325: LD_VAR 0 8
46329: PUSH
46330: LD_INT 6
46332: ARRAY
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: LD_INT 7
46342: PUSH
46343: LD_INT 9
46345: PUSH
46346: LD_INT 10
46348: PUSH
46349: LD_INT 11
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: IN
46360: NOT
46361: OR
46362: IFFALSE 46368
// exit ;
46364: POP
46365: POP
46366: GO 46466
// end ;
46368: GO 46039
46370: POP
46371: POP
// side := GetSide ( depot ) ;
46372: LD_ADDR_VAR 0 9
46376: PUSH
46377: LD_VAR 0 1
46381: PPUSH
46382: CALL_OW 255
46386: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46387: LD_VAR 0 9
46391: PPUSH
46392: LD_VAR 0 3
46396: PPUSH
46397: LD_VAR 0 4
46401: PPUSH
46402: LD_INT 20
46404: PPUSH
46405: CALL 39120 0 4
46409: PUSH
46410: LD_INT 4
46412: ARRAY
46413: IFFALSE 46417
// exit ;
46415: GO 46466
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46417: LD_VAR 0 2
46421: PUSH
46422: LD_INT 29
46424: PUSH
46425: LD_INT 30
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: IN
46432: PUSH
46433: LD_VAR 0 3
46437: PPUSH
46438: LD_VAR 0 4
46442: PPUSH
46443: LD_VAR 0 9
46447: PPUSH
46448: CALL_OW 440
46452: NOT
46453: AND
46454: IFFALSE 46458
// exit ;
46456: GO 46466
// result := true ;
46458: LD_ADDR_VAR 0 6
46462: PUSH
46463: LD_INT 1
46465: ST_TO_ADDR
// end ;
46466: LD_VAR 0 6
46470: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
46471: LD_INT 0
46473: PPUSH
46474: PPUSH
46475: PPUSH
46476: PPUSH
46477: PPUSH
46478: PPUSH
46479: PPUSH
46480: PPUSH
46481: PPUSH
46482: PPUSH
46483: PPUSH
46484: PPUSH
46485: PPUSH
46486: PPUSH
46487: PPUSH
46488: PPUSH
46489: PPUSH
46490: PPUSH
46491: PPUSH
46492: PPUSH
46493: PPUSH
46494: PPUSH
46495: PPUSH
46496: PPUSH
46497: PPUSH
46498: PPUSH
46499: PPUSH
46500: PPUSH
46501: PPUSH
46502: PPUSH
46503: PPUSH
46504: PPUSH
46505: PPUSH
46506: PPUSH
46507: PPUSH
46508: PPUSH
46509: PPUSH
46510: PPUSH
46511: PPUSH
46512: PPUSH
46513: PPUSH
46514: PPUSH
46515: PPUSH
46516: PPUSH
46517: PPUSH
46518: PPUSH
46519: PPUSH
46520: PPUSH
46521: PPUSH
46522: PPUSH
46523: PPUSH
46524: PPUSH
46525: PPUSH
46526: PPUSH
46527: PPUSH
46528: PPUSH
46529: PPUSH
46530: PPUSH
// result = [ ] ;
46531: LD_ADDR_VAR 0 7
46535: PUSH
46536: EMPTY
46537: ST_TO_ADDR
// temp_list = [ ] ;
46538: LD_ADDR_VAR 0 9
46542: PUSH
46543: EMPTY
46544: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46545: LD_VAR 0 4
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 3
46561: PUSH
46562: LD_INT 4
46564: PUSH
46565: LD_INT 5
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: IN
46576: NOT
46577: PUSH
46578: LD_VAR 0 1
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: IN
46593: PUSH
46594: LD_VAR 0 5
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: LD_INT 3
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: LIST
46612: IN
46613: NOT
46614: AND
46615: OR
46616: IFFALSE 46620
// exit ;
46618: GO 65011
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46620: LD_VAR 0 1
46624: PUSH
46625: LD_INT 6
46627: PUSH
46628: LD_INT 7
46630: PUSH
46631: LD_INT 8
46633: PUSH
46634: LD_INT 13
46636: PUSH
46637: LD_INT 12
46639: PUSH
46640: LD_INT 15
46642: PUSH
46643: LD_INT 11
46645: PUSH
46646: LD_INT 14
46648: PUSH
46649: LD_INT 10
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: IN
46663: IFFALSE 46673
// btype = b_lab ;
46665: LD_ADDR_VAR 0 1
46669: PUSH
46670: LD_INT 6
46672: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46673: LD_VAR 0 6
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: LIST
46691: IN
46692: NOT
46693: PUSH
46694: LD_VAR 0 1
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: LD_INT 3
46710: PUSH
46711: LD_INT 6
46713: PUSH
46714: LD_INT 36
46716: PUSH
46717: LD_INT 4
46719: PUSH
46720: LD_INT 5
46722: PUSH
46723: LD_INT 31
46725: PUSH
46726: LD_INT 32
46728: PUSH
46729: LD_INT 33
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: IN
46745: NOT
46746: PUSH
46747: LD_VAR 0 6
46751: PUSH
46752: LD_INT 1
46754: EQUAL
46755: AND
46756: OR
46757: PUSH
46758: LD_VAR 0 1
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: LD_INT 3
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: IN
46773: NOT
46774: PUSH
46775: LD_VAR 0 6
46779: PUSH
46780: LD_INT 2
46782: EQUAL
46783: AND
46784: OR
46785: IFFALSE 46795
// mode = 0 ;
46787: LD_ADDR_VAR 0 6
46791: PUSH
46792: LD_INT 0
46794: ST_TO_ADDR
// case mode of 0 :
46795: LD_VAR 0 6
46799: PUSH
46800: LD_INT 0
46802: DOUBLE
46803: EQUAL
46804: IFTRUE 46808
46806: GO 58261
46808: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46809: LD_ADDR_VAR 0 11
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 3
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 3
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47002: LD_ADDR_VAR 0 12
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: NEG
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 3
47159: NEG
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 3
47170: NEG
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47198: LD_ADDR_VAR 0 13
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 2
47321: NEG
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: LD_INT 3
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 3
47357: NEG
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 3
47369: NEG
47370: PUSH
47371: LD_INT 3
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47397: LD_ADDR_VAR 0 14
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: LD_INT 3
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 3
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: LD_INT 2
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47593: LD_ADDR_VAR 0 15
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: NEG
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 3
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 3
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47786: LD_ADDR_VAR 0 16
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: NEG
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: LD_INT 3
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47979: LD_ADDR_VAR 0 17
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: LD_INT 2
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48209: LD_ADDR_VAR 0 18
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48439: LD_ADDR_VAR 0 19
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48669: LD_ADDR_VAR 0 20
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 2
48845: NEG
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48899: LD_ADDR_VAR 0 21
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49129: LD_ADDR_VAR 0 22
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: NEG
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49359: LD_ADDR_VAR 0 23
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 0
49452: PUSH
49453: LD_INT 2
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 2
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 2
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 2
49570: NEG
49571: PUSH
49572: LD_INT 3
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: LD_INT 3
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 2
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49639: LD_ADDR_VAR 0 24
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 2
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: LD_INT 2
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: NEG
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 3
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 3
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49915: LD_ADDR_VAR 0 25
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 2
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 2
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: NEG
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 3
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 3
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 2
50146: PUSH
50147: LD_INT 3
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 3
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50189: LD_ADDR_VAR 0 26
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 2
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: LD_INT 3
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 3
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50465: LD_ADDR_VAR 0 27
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: LD_INT 2
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 2
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: LD_INT 2
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 3
50698: NEG
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 3
50710: NEG
50711: PUSH
50712: LD_INT 2
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50745: LD_ADDR_VAR 0 28
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 2
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 2
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: PUSH
50881: LD_INT 2
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 2
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 3
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 3
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 3
50992: NEG
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51027: LD_ADDR_VAR 0 29
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: NEG
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 2
51205: NEG
51206: PUSH
51207: LD_INT 2
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 3
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 3
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: NEG
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51306: LD_ADDR_VAR 0 30
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 1
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 3
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 3
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: LD_INT 3
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51584: LD_ADDR_VAR 0 31
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: NEG
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 2
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 3
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 3
51827: NEG
51828: PUSH
51829: LD_INT 2
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51862: LD_ADDR_VAR 0 32
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: LD_INT 2
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: LD_INT 3
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: LD_INT 2
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 3
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: LD_INT 3
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 2
52094: NEG
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 3
52105: NEG
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52140: LD_ADDR_VAR 0 33
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 2
52295: NEG
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: NEG
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: LD_INT 2
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: LD_INT 3
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 3
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 3
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 3
52384: NEG
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52419: LD_ADDR_VAR 0 34
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 2
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: LD_INT 2
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 2
52575: NEG
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: NEG
52599: PUSH
52600: LD_INT 2
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 3
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 3
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: LD_INT 3
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 3
52664: NEG
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52699: LD_ADDR_VAR 0 35
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52811: LD_ADDR_VAR 0 36
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52923: LD_ADDR_VAR 0 37
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53035: LD_ADDR_VAR 0 38
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53147: LD_ADDR_VAR 0 39
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: LD_INT 2
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53259: LD_ADDR_VAR 0 40
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53371: LD_ADDR_VAR 0 41
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: NEG
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: LD_INT 3
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 3
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 3
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 3
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 3
53614: PUSH
53615: LD_INT 3
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 3
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 3
53645: NEG
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 3
53656: NEG
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 3
53668: NEG
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 3
53680: NEG
53681: PUSH
53682: LD_INT 3
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53721: LD_ADDR_VAR 0 42
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 2
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 2
53899: NEG
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: LD_INT 3
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 3
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: LD_INT 3
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: LD_INT 2
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 3
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 3
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 3
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 2
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 3
54018: NEG
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: LD_INT 3
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54071: LD_ADDR_VAR 0 43
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: LD_INT 2
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: NEG
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 2
54248: NEG
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: LD_INT 3
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 3
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: LD_INT 2
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 3
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 3
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: NEG
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 3
54367: NEG
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 3
54378: NEG
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54419: LD_ADDR_VAR 0 44
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 2
54597: NEG
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: LD_INT 3
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 3
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 3
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: PUSH
54663: LD_INT 3
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: LD_INT 3
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 3
54693: NEG
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 3
54704: NEG
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 3
54716: NEG
54717: PUSH
54718: LD_INT 2
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 3
54728: NEG
54729: PUSH
54730: LD_INT 3
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54769: LD_ADDR_VAR 0 45
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: NEG
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: LD_INT 3
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 3
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 3
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 3
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 3
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 3
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 3
55078: NEG
55079: PUSH
55080: LD_INT 3
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55119: LD_ADDR_VAR 0 46
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 1
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: LD_INT 3
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: LD_INT 3
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 3
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 3
55363: PUSH
55364: LD_INT 1
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 3
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 3
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 2
55404: NEG
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 3
55415: NEG
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 3
55426: NEG
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55467: LD_ADDR_VAR 0 47
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: NEG
55595: PUSH
55596: LD_INT 2
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55618: LD_ADDR_VAR 0 48
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: LD_INT 1
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55765: LD_ADDR_VAR 0 49
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: LD_INT 1
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55909: LD_ADDR_VAR 0 50
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56053: LD_ADDR_VAR 0 51
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 2
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56200: LD_ADDR_VAR 0 52
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: LD_INT 1
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: LD_INT 2
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 2
56327: NEG
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56351: LD_ADDR_VAR 0 53
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 2
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56581: LD_ADDR_VAR 0 54
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 2
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 2
56768: NEG
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: NEG
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56811: LD_ADDR_VAR 0 55
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 0
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 2
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: LD_INT 2
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 2
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: NEG
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57041: LD_ADDR_VAR 0 56
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 2
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 2
57240: NEG
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57271: LD_ADDR_VAR 0 57
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: LD_INT 2
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 2
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 2
57458: NEG
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57501: LD_ADDR_VAR 0 58
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 2
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 2
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 2
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: LD_INT 2
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 2
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 2
57688: NEG
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57731: LD_ADDR_VAR 0 59
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: LD_INT 0
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57819: LD_ADDR_VAR 0 60
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: NEG
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57907: LD_ADDR_VAR 0 61
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57995: LD_ADDR_VAR 0 62
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58083: LD_ADDR_VAR 0 63
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58171: LD_ADDR_VAR 0 64
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: ST_TO_ADDR
// end ; 1 :
58259: GO 64156
58261: LD_INT 1
58263: DOUBLE
58264: EQUAL
58265: IFTRUE 58269
58267: GO 60892
58269: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58270: LD_ADDR_VAR 0 11
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: LD_INT 3
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 3
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58314: LD_ADDR_VAR 0 12
58318: PUSH
58319: LD_INT 2
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 3
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 3
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: LIST
58354: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58355: LD_ADDR_VAR 0 13
58359: PUSH
58360: LD_INT 3
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 3
58372: PUSH
58373: LD_INT 3
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: LD_INT 3
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: LIST
58394: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58395: LD_ADDR_VAR 0 14
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: LD_INT 3
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: LD_INT 3
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: LD_INT 2
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: LIST
58435: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58436: LD_ADDR_VAR 0 15
58440: PUSH
58441: LD_INT 2
58443: NEG
58444: PUSH
58445: LD_INT 1
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 3
58454: NEG
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: LIST
58479: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58480: LD_ADDR_VAR 0 16
58484: PUSH
58485: LD_INT 2
58487: NEG
58488: PUSH
58489: LD_INT 3
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 3
58499: NEG
58500: PUSH
58501: LD_INT 2
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 3
58511: NEG
58512: PUSH
58513: LD_INT 3
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58526: LD_ADDR_VAR 0 17
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: LD_INT 3
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: LIST
58569: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58570: LD_ADDR_VAR 0 18
58574: PUSH
58575: LD_INT 2
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 3
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: LIST
58610: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58611: LD_ADDR_VAR 0 19
58615: PUSH
58616: LD_INT 3
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 3
58628: PUSH
58629: LD_INT 3
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: LIST
58650: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58651: LD_ADDR_VAR 0 20
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: LD_INT 3
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58692: LD_ADDR_VAR 0 21
58696: PUSH
58697: LD_INT 2
58699: NEG
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 3
58710: NEG
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58736: LD_ADDR_VAR 0 22
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: LD_INT 3
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 3
58755: NEG
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 3
58767: NEG
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: LIST
58781: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58782: LD_ADDR_VAR 0 23
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 3
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: LD_INT 4
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: LD_INT 3
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: LIST
58825: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58826: LD_ADDR_VAR 0 24
58830: PUSH
58831: LD_INT 3
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 3
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 4
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: LIST
58866: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58867: LD_ADDR_VAR 0 25
58871: PUSH
58872: LD_INT 3
58874: PUSH
58875: LD_INT 3
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 4
58884: PUSH
58885: LD_INT 3
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 3
58894: PUSH
58895: LD_INT 4
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: LIST
58906: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58907: LD_ADDR_VAR 0 26
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 3
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: LD_INT 4
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: LD_INT 3
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58948: LD_ADDR_VAR 0 27
58952: PUSH
58953: LD_INT 3
58955: NEG
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 3
58966: NEG
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 4
58977: NEG
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58992: LD_ADDR_VAR 0 28
58996: PUSH
58997: LD_INT 3
58999: NEG
59000: PUSH
59001: LD_INT 3
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: LD_INT 4
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 4
59023: NEG
59024: PUSH
59025: LD_INT 3
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: LIST
59037: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59038: LD_ADDR_VAR 0 29
59042: PUSH
59043: LD_INT 1
59045: NEG
59046: PUSH
59047: LD_INT 3
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: LD_INT 3
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: LD_INT 4
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 0
59091: PUSH
59092: LD_INT 4
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: LD_INT 3
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: LD_INT 5
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: LD_INT 5
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: PUSH
59137: LD_INT 4
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 6
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: LD_INT 6
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: LD_INT 5
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59193: LD_ADDR_VAR 0 30
59197: PUSH
59198: LD_INT 2
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 3
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 3
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 3
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 4
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 4
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 4
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 5
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 5
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 5
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 6
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 6
59314: PUSH
59315: LD_INT 1
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59336: LD_ADDR_VAR 0 31
59340: PUSH
59341: LD_INT 3
59343: PUSH
59344: LD_INT 2
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 3
59353: PUSH
59354: LD_INT 3
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 4
59373: PUSH
59374: LD_INT 3
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 4
59383: PUSH
59384: LD_INT 4
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 3
59393: PUSH
59394: LD_INT 4
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 5
59403: PUSH
59404: LD_INT 4
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 5
59413: PUSH
59414: LD_INT 5
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 4
59423: PUSH
59424: LD_INT 5
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 6
59433: PUSH
59434: LD_INT 5
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 6
59443: PUSH
59444: LD_INT 6
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 5
59453: PUSH
59454: LD_INT 6
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59475: LD_ADDR_VAR 0 32
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: LD_INT 3
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: LD_INT 3
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 1
59502: NEG
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: LD_INT 4
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: LD_INT 4
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: LD_INT 3
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: LD_INT 5
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 5
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: LD_INT 4
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: LD_INT 6
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: LD_INT 6
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: LD_INT 5
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59618: LD_ADDR_VAR 0 33
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 3
59636: NEG
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 3
59647: NEG
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 3
59659: NEG
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 4
59670: NEG
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 4
59681: NEG
59682: PUSH
59683: LD_INT 1
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 4
59693: NEG
59694: PUSH
59695: LD_INT 1
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 5
59704: NEG
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 5
59715: NEG
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 5
59727: NEG
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 6
59738: NEG
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 6
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59773: LD_ADDR_VAR 0 34
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: LD_INT 3
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 3
59792: NEG
59793: PUSH
59794: LD_INT 2
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 3
59804: NEG
59805: PUSH
59806: LD_INT 3
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 3
59816: NEG
59817: PUSH
59818: LD_INT 4
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 4
59828: NEG
59829: PUSH
59830: LD_INT 3
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 4
59840: NEG
59841: PUSH
59842: LD_INT 4
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 4
59852: NEG
59853: PUSH
59854: LD_INT 5
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 5
59864: NEG
59865: PUSH
59866: LD_INT 4
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 5
59876: NEG
59877: PUSH
59878: LD_INT 5
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 5
59888: NEG
59889: PUSH
59890: LD_INT 6
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 6
59900: NEG
59901: PUSH
59902: LD_INT 5
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 6
59912: NEG
59913: PUSH
59914: LD_INT 6
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59936: LD_ADDR_VAR 0 41
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 2
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 3
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: LIST
59979: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59980: LD_ADDR_VAR 0 42
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 2
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 3
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60021: LD_ADDR_VAR 0 43
60025: PUSH
60026: LD_INT 2
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 3
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: LIST
60060: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60061: LD_ADDR_VAR 0 44
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: LD_INT 3
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: LIST
60101: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60102: LD_ADDR_VAR 0 45
60106: PUSH
60107: LD_INT 2
60109: NEG
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 2
60120: NEG
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 3
60131: NEG
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: LIST
60145: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60146: LD_ADDR_VAR 0 46
60150: PUSH
60151: LD_INT 2
60153: NEG
60154: PUSH
60155: LD_INT 2
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: LD_INT 3
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 3
60177: NEG
60178: PUSH
60179: LD_INT 2
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: LIST
60191: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60192: LD_ADDR_VAR 0 47
60196: PUSH
60197: LD_INT 2
60199: NEG
60200: PUSH
60201: LD_INT 3
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: LD_INT 3
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60225: LD_ADDR_VAR 0 48
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60256: LD_ADDR_VAR 0 49
60260: PUSH
60261: LD_INT 3
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 3
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60285: LD_ADDR_VAR 0 50
60289: PUSH
60290: LD_INT 2
60292: PUSH
60293: LD_INT 3
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: LD_INT 3
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60314: LD_ADDR_VAR 0 51
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: LD_INT 2
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 2
60332: NEG
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60345: LD_ADDR_VAR 0 52
60349: PUSH
60350: LD_INT 3
60352: NEG
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 3
60364: NEG
60365: PUSH
60366: LD_INT 2
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60378: LD_ADDR_VAR 0 53
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: LD_INT 3
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: LD_INT 3
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60422: LD_ADDR_VAR 0 54
60426: PUSH
60427: LD_INT 2
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 3
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 3
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60463: LD_ADDR_VAR 0 55
60467: PUSH
60468: LD_INT 3
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 2
60490: PUSH
60491: LD_INT 3
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: LIST
60502: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60503: LD_ADDR_VAR 0 56
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: LD_INT 3
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 3
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: LIST
60543: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60544: LD_ADDR_VAR 0 57
60548: PUSH
60549: LD_INT 2
60551: NEG
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 3
60562: NEG
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 3
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: LIST
60587: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60588: LD_ADDR_VAR 0 58
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: LD_INT 3
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 3
60607: NEG
60608: PUSH
60609: LD_INT 2
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 3
60619: NEG
60620: PUSH
60621: LD_INT 3
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: LIST
60633: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60634: LD_ADDR_VAR 0 59
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 2
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: LD_INT 2
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: LIST
60677: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60678: LD_ADDR_VAR 0 60
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: LIST
60718: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60719: LD_ADDR_VAR 0 61
60723: PUSH
60724: LD_INT 2
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: LD_INT 2
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: LD_INT 2
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: LIST
60758: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60759: LD_ADDR_VAR 0 62
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 2
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: LIST
60799: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60800: LD_ADDR_VAR 0 63
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 2
60818: NEG
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 2
60829: NEG
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: LIST
60843: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60844: LD_ADDR_VAR 0 64
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: PUSH
60853: LD_INT 2
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 2
60863: NEG
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 2
60875: NEG
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: LIST
60889: ST_TO_ADDR
// end ; 2 :
60890: GO 64156
60892: LD_INT 2
60894: DOUBLE
60895: EQUAL
60896: IFTRUE 60900
60898: GO 64155
60900: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60901: LD_ADDR_VAR 0 29
60905: PUSH
60906: LD_INT 4
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 4
60918: PUSH
60919: LD_INT 1
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 5
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 5
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 4
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 3
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 3
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: LD_INT 2
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 5
60991: PUSH
60992: LD_INT 2
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 3
61001: PUSH
61002: LD_INT 3
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 3
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 4
61021: PUSH
61022: LD_INT 3
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 4
61031: PUSH
61032: LD_INT 4
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 3
61041: PUSH
61042: LD_INT 4
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 2
61051: PUSH
61052: LD_INT 3
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 2
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 4
61071: PUSH
61072: LD_INT 2
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 2
61081: PUSH
61082: LD_INT 4
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: LD_INT 4
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: LD_INT 3
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: PUSH
61112: LD_INT 4
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 1
61121: PUSH
61122: LD_INT 5
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: LD_INT 5
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: LD_INT 4
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: LD_INT 3
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 2
61163: PUSH
61164: LD_INT 5
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 2
61173: NEG
61174: PUSH
61175: LD_INT 3
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 3
61184: NEG
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 3
61195: NEG
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 2
61207: NEG
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: NEG
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 3
61229: NEG
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 4
61240: NEG
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 4
61251: NEG
61252: PUSH
61253: LD_INT 1
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 4
61263: NEG
61264: PUSH
61265: LD_INT 2
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 2
61275: NEG
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 4
61286: NEG
61287: PUSH
61288: LD_INT 4
61290: NEG
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 4
61298: NEG
61299: PUSH
61300: LD_INT 5
61302: NEG
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 3
61310: NEG
61311: PUSH
61312: LD_INT 4
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 3
61322: NEG
61323: PUSH
61324: LD_INT 3
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 4
61334: NEG
61335: PUSH
61336: LD_INT 3
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 5
61346: NEG
61347: PUSH
61348: LD_INT 4
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 5
61358: NEG
61359: PUSH
61360: LD_INT 5
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 3
61370: NEG
61371: PUSH
61372: LD_INT 5
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 5
61382: NEG
61383: PUSH
61384: LD_INT 3
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61439: LD_ADDR_VAR 0 30
61443: PUSH
61444: LD_INT 4
61446: PUSH
61447: LD_INT 4
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 4
61456: PUSH
61457: LD_INT 3
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 5
61466: PUSH
61467: LD_INT 4
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 5
61476: PUSH
61477: LD_INT 5
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 4
61486: PUSH
61487: LD_INT 5
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 3
61496: PUSH
61497: LD_INT 4
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 3
61506: PUSH
61507: LD_INT 3
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 5
61516: PUSH
61517: LD_INT 3
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 3
61526: PUSH
61527: LD_INT 5
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: LD_INT 3
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: LD_INT 2
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: LD_INT 3
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: PUSH
61567: LD_INT 4
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: LD_INT 4
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: LD_INT 3
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: LD_INT 2
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 2
61608: PUSH
61609: LD_INT 4
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: LD_INT 2
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 4
61629: NEG
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 4
61640: NEG
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 3
61652: NEG
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 3
61663: NEG
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 4
61674: NEG
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 5
61685: NEG
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 5
61696: NEG
61697: PUSH
61698: LD_INT 1
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 5
61708: NEG
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 3
61720: NEG
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 3
61731: NEG
61732: PUSH
61733: LD_INT 3
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 3
61743: NEG
61744: PUSH
61745: LD_INT 4
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 2
61755: NEG
61756: PUSH
61757: LD_INT 3
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 2
61767: NEG
61768: PUSH
61769: LD_INT 2
61771: NEG
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 3
61779: NEG
61780: PUSH
61781: LD_INT 2
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 4
61791: NEG
61792: PUSH
61793: LD_INT 3
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 4
61803: NEG
61804: PUSH
61805: LD_INT 4
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 2
61815: NEG
61816: PUSH
61817: LD_INT 4
61819: NEG
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 4
61827: NEG
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: LD_INT 4
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: LD_INT 5
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: LD_INT 4
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: LD_INT 3
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: LD_INT 4
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: LD_INT 5
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: LD_INT 3
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: NEG
61930: PUSH
61931: LD_INT 5
61933: NEG
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61986: LD_ADDR_VAR 0 31
61990: PUSH
61991: LD_INT 0
61993: PUSH
61994: LD_INT 4
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: LD_INT 3
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: LD_INT 4
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: LD_INT 5
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: LD_INT 5
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: LD_INT 4
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: LD_INT 3
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 2
62065: PUSH
62066: LD_INT 5
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 3
62086: NEG
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 3
62097: NEG
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 2
62109: NEG
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 2
62120: NEG
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 3
62131: NEG
62132: PUSH
62133: LD_INT 1
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 4
62142: NEG
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 4
62153: NEG
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 4
62165: NEG
62166: PUSH
62167: LD_INT 2
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 2
62177: NEG
62178: PUSH
62179: LD_INT 2
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 4
62188: NEG
62189: PUSH
62190: LD_INT 4
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 4
62200: NEG
62201: PUSH
62202: LD_INT 5
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 3
62212: NEG
62213: PUSH
62214: LD_INT 4
62216: NEG
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 3
62224: NEG
62225: PUSH
62226: LD_INT 3
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 4
62236: NEG
62237: PUSH
62238: LD_INT 3
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 5
62248: NEG
62249: PUSH
62250: LD_INT 4
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 5
62260: NEG
62261: PUSH
62262: LD_INT 5
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 3
62272: NEG
62273: PUSH
62274: LD_INT 5
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 5
62284: NEG
62285: PUSH
62286: LD_INT 3
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: LD_INT 3
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: LD_INT 4
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 3
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: LD_INT 2
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: LD_INT 2
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: LD_INT 3
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: LD_INT 4
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: LD_INT 2
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 2
62386: NEG
62387: PUSH
62388: LD_INT 4
62390: NEG
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 4
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 4
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 5
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 5
62429: PUSH
62430: LD_INT 1
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 4
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 3
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 3
62459: PUSH
62460: LD_INT 1
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: PUSH
62471: LD_INT 2
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 5
62481: PUSH
62482: LD_INT 2
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62536: LD_ADDR_VAR 0 32
62540: PUSH
62541: LD_INT 4
62543: NEG
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 4
62554: NEG
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 3
62566: NEG
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 3
62577: NEG
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 4
62588: NEG
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 5
62599: NEG
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 5
62610: NEG
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 5
62622: NEG
62623: PUSH
62624: LD_INT 2
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 3
62634: NEG
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 3
62645: NEG
62646: PUSH
62647: LD_INT 3
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 3
62657: NEG
62658: PUSH
62659: LD_INT 4
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 2
62669: NEG
62670: PUSH
62671: LD_INT 3
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: LD_INT 2
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 3
62693: NEG
62694: PUSH
62695: LD_INT 2
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 4
62705: NEG
62706: PUSH
62707: LD_INT 3
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 4
62717: NEG
62718: PUSH
62719: LD_INT 4
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 2
62729: NEG
62730: PUSH
62731: LD_INT 4
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 4
62741: NEG
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: LD_INT 4
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: LD_INT 5
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: LD_INT 4
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: LD_INT 3
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: LD_INT 3
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: LD_INT 4
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: LD_INT 5
62824: NEG
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: PUSH
62833: LD_INT 3
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 2
62843: NEG
62844: PUSH
62845: LD_INT 5
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 3
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: LD_INT 1
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 4
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 4
62886: PUSH
62887: LD_INT 1
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 3
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 2
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 2
62916: PUSH
62917: LD_INT 1
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 2
62927: PUSH
62928: LD_INT 2
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 4
62938: PUSH
62939: LD_INT 2
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 4
62948: PUSH
62949: LD_INT 4
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 4
62958: PUSH
62959: LD_INT 3
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 5
62968: PUSH
62969: LD_INT 4
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 5
62978: PUSH
62979: LD_INT 5
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 4
62988: PUSH
62989: LD_INT 5
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 3
62998: PUSH
62999: LD_INT 4
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 3
63008: PUSH
63009: LD_INT 3
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 5
63018: PUSH
63019: LD_INT 3
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 3
63028: PUSH
63029: LD_INT 5
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63083: LD_ADDR_VAR 0 33
63087: PUSH
63088: LD_INT 4
63090: NEG
63091: PUSH
63092: LD_INT 4
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 4
63102: NEG
63103: PUSH
63104: LD_INT 5
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 3
63114: NEG
63115: PUSH
63116: LD_INT 4
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 3
63126: NEG
63127: PUSH
63128: LD_INT 3
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 4
63138: NEG
63139: PUSH
63140: LD_INT 3
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 5
63150: NEG
63151: PUSH
63152: LD_INT 4
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 5
63162: NEG
63163: PUSH
63164: LD_INT 5
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 3
63174: NEG
63175: PUSH
63176: LD_INT 5
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 5
63186: NEG
63187: PUSH
63188: LD_INT 3
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: LD_INT 3
63201: NEG
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: LD_INT 4
63212: NEG
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: LD_INT 3
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: LD_INT 2
63245: NEG
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: LD_INT 3
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: LD_INT 4
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: LD_INT 2
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: NEG
63289: PUSH
63290: LD_INT 4
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 4
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 4
63310: PUSH
63311: LD_INT 1
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 5
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 5
63331: PUSH
63332: LD_INT 1
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 4
63341: PUSH
63342: LD_INT 1
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 3
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 3
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 3
63372: PUSH
63373: LD_INT 2
63375: NEG
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 5
63383: PUSH
63384: LD_INT 2
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 3
63393: PUSH
63394: LD_INT 3
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 3
63403: PUSH
63404: LD_INT 2
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 4
63413: PUSH
63414: LD_INT 3
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 4
63423: PUSH
63424: LD_INT 4
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 3
63433: PUSH
63434: LD_INT 4
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 2
63443: PUSH
63444: LD_INT 3
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 2
63453: PUSH
63454: LD_INT 2
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 4
63463: PUSH
63464: LD_INT 2
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 2
63473: PUSH
63474: LD_INT 4
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: LD_INT 4
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 0
63493: PUSH
63494: LD_INT 3
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 1
63503: PUSH
63504: LD_INT 4
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: PUSH
63514: LD_INT 5
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: LD_INT 5
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 1
63533: NEG
63534: PUSH
63535: LD_INT 4
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: LD_INT 3
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 2
63555: PUSH
63556: LD_INT 5
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 2
63565: NEG
63566: PUSH
63567: LD_INT 3
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63621: LD_ADDR_VAR 0 34
63625: PUSH
63626: LD_INT 0
63628: PUSH
63629: LD_INT 4
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 0
63639: PUSH
63640: LD_INT 5
63642: NEG
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 1
63650: PUSH
63651: LD_INT 4
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: LD_INT 3
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: LD_INT 3
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 4
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: LD_INT 5
63699: NEG
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: LD_INT 3
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 2
63718: NEG
63719: PUSH
63720: LD_INT 5
63722: NEG
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 3
63730: PUSH
63731: LD_INT 0
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 3
63740: PUSH
63741: LD_INT 1
63743: NEG
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 4
63751: PUSH
63752: LD_INT 0
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 4
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 3
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 2
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 2
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 2
63802: PUSH
63803: LD_INT 2
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 4
63813: PUSH
63814: LD_INT 2
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 4
63823: PUSH
63824: LD_INT 4
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 4
63833: PUSH
63834: LD_INT 3
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 5
63843: PUSH
63844: LD_INT 4
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 5
63853: PUSH
63854: LD_INT 5
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 4
63863: PUSH
63864: LD_INT 5
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 3
63873: PUSH
63874: LD_INT 4
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 3
63883: PUSH
63884: LD_INT 3
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 5
63893: PUSH
63894: LD_INT 3
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 3
63903: PUSH
63904: LD_INT 5
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: LD_INT 3
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: LD_INT 2
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 1
63933: PUSH
63934: LD_INT 3
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 1
63943: PUSH
63944: LD_INT 4
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: LD_INT 4
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 1
63963: NEG
63964: PUSH
63965: LD_INT 3
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 1
63974: NEG
63975: PUSH
63976: LD_INT 2
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 2
63985: PUSH
63986: LD_INT 4
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 2
63995: NEG
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 4
64006: NEG
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 4
64017: NEG
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 3
64029: NEG
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 3
64040: NEG
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 4
64051: NEG
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 5
64062: NEG
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 5
64073: NEG
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 5
64085: NEG
64086: PUSH
64087: LD_INT 2
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 3
64097: NEG
64098: PUSH
64099: LD_INT 2
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: ST_TO_ADDR
// end ; end ;
64153: GO 64156
64155: POP
// case btype of b_depot , b_warehouse :
64156: LD_VAR 0 1
64160: PUSH
64161: LD_INT 0
64163: DOUBLE
64164: EQUAL
64165: IFTRUE 64175
64167: LD_INT 1
64169: DOUBLE
64170: EQUAL
64171: IFTRUE 64175
64173: GO 64376
64175: POP
// case nation of nation_american :
64176: LD_VAR 0 5
64180: PUSH
64181: LD_INT 1
64183: DOUBLE
64184: EQUAL
64185: IFTRUE 64189
64187: GO 64245
64189: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
64190: LD_ADDR_VAR 0 9
64194: PUSH
64195: LD_VAR 0 11
64199: PUSH
64200: LD_VAR 0 12
64204: PUSH
64205: LD_VAR 0 13
64209: PUSH
64210: LD_VAR 0 14
64214: PUSH
64215: LD_VAR 0 15
64219: PUSH
64220: LD_VAR 0 16
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: PUSH
64233: LD_VAR 0 4
64237: PUSH
64238: LD_INT 1
64240: PLUS
64241: ARRAY
64242: ST_TO_ADDR
64243: GO 64374
64245: LD_INT 2
64247: DOUBLE
64248: EQUAL
64249: IFTRUE 64253
64251: GO 64309
64253: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
64254: LD_ADDR_VAR 0 9
64258: PUSH
64259: LD_VAR 0 17
64263: PUSH
64264: LD_VAR 0 18
64268: PUSH
64269: LD_VAR 0 19
64273: PUSH
64274: LD_VAR 0 20
64278: PUSH
64279: LD_VAR 0 21
64283: PUSH
64284: LD_VAR 0 22
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: PUSH
64297: LD_VAR 0 4
64301: PUSH
64302: LD_INT 1
64304: PLUS
64305: ARRAY
64306: ST_TO_ADDR
64307: GO 64374
64309: LD_INT 3
64311: DOUBLE
64312: EQUAL
64313: IFTRUE 64317
64315: GO 64373
64317: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64318: LD_ADDR_VAR 0 9
64322: PUSH
64323: LD_VAR 0 23
64327: PUSH
64328: LD_VAR 0 24
64332: PUSH
64333: LD_VAR 0 25
64337: PUSH
64338: LD_VAR 0 26
64342: PUSH
64343: LD_VAR 0 27
64347: PUSH
64348: LD_VAR 0 28
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: PUSH
64361: LD_VAR 0 4
64365: PUSH
64366: LD_INT 1
64368: PLUS
64369: ARRAY
64370: ST_TO_ADDR
64371: GO 64374
64373: POP
64374: GO 64929
64376: LD_INT 2
64378: DOUBLE
64379: EQUAL
64380: IFTRUE 64390
64382: LD_INT 3
64384: DOUBLE
64385: EQUAL
64386: IFTRUE 64390
64388: GO 64446
64390: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64391: LD_ADDR_VAR 0 9
64395: PUSH
64396: LD_VAR 0 29
64400: PUSH
64401: LD_VAR 0 30
64405: PUSH
64406: LD_VAR 0 31
64410: PUSH
64411: LD_VAR 0 32
64415: PUSH
64416: LD_VAR 0 33
64420: PUSH
64421: LD_VAR 0 34
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: PUSH
64434: LD_VAR 0 4
64438: PUSH
64439: LD_INT 1
64441: PLUS
64442: ARRAY
64443: ST_TO_ADDR
64444: GO 64929
64446: LD_INT 16
64448: DOUBLE
64449: EQUAL
64450: IFTRUE 64508
64452: LD_INT 17
64454: DOUBLE
64455: EQUAL
64456: IFTRUE 64508
64458: LD_INT 18
64460: DOUBLE
64461: EQUAL
64462: IFTRUE 64508
64464: LD_INT 19
64466: DOUBLE
64467: EQUAL
64468: IFTRUE 64508
64470: LD_INT 22
64472: DOUBLE
64473: EQUAL
64474: IFTRUE 64508
64476: LD_INT 20
64478: DOUBLE
64479: EQUAL
64480: IFTRUE 64508
64482: LD_INT 21
64484: DOUBLE
64485: EQUAL
64486: IFTRUE 64508
64488: LD_INT 23
64490: DOUBLE
64491: EQUAL
64492: IFTRUE 64508
64494: LD_INT 24
64496: DOUBLE
64497: EQUAL
64498: IFTRUE 64508
64500: LD_INT 25
64502: DOUBLE
64503: EQUAL
64504: IFTRUE 64508
64506: GO 64564
64508: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64509: LD_ADDR_VAR 0 9
64513: PUSH
64514: LD_VAR 0 35
64518: PUSH
64519: LD_VAR 0 36
64523: PUSH
64524: LD_VAR 0 37
64528: PUSH
64529: LD_VAR 0 38
64533: PUSH
64534: LD_VAR 0 39
64538: PUSH
64539: LD_VAR 0 40
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: PUSH
64552: LD_VAR 0 4
64556: PUSH
64557: LD_INT 1
64559: PLUS
64560: ARRAY
64561: ST_TO_ADDR
64562: GO 64929
64564: LD_INT 6
64566: DOUBLE
64567: EQUAL
64568: IFTRUE 64620
64570: LD_INT 7
64572: DOUBLE
64573: EQUAL
64574: IFTRUE 64620
64576: LD_INT 8
64578: DOUBLE
64579: EQUAL
64580: IFTRUE 64620
64582: LD_INT 13
64584: DOUBLE
64585: EQUAL
64586: IFTRUE 64620
64588: LD_INT 12
64590: DOUBLE
64591: EQUAL
64592: IFTRUE 64620
64594: LD_INT 15
64596: DOUBLE
64597: EQUAL
64598: IFTRUE 64620
64600: LD_INT 11
64602: DOUBLE
64603: EQUAL
64604: IFTRUE 64620
64606: LD_INT 14
64608: DOUBLE
64609: EQUAL
64610: IFTRUE 64620
64612: LD_INT 10
64614: DOUBLE
64615: EQUAL
64616: IFTRUE 64620
64618: GO 64676
64620: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
64621: LD_ADDR_VAR 0 9
64625: PUSH
64626: LD_VAR 0 41
64630: PUSH
64631: LD_VAR 0 42
64635: PUSH
64636: LD_VAR 0 43
64640: PUSH
64641: LD_VAR 0 44
64645: PUSH
64646: LD_VAR 0 45
64650: PUSH
64651: LD_VAR 0 46
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: PUSH
64664: LD_VAR 0 4
64668: PUSH
64669: LD_INT 1
64671: PLUS
64672: ARRAY
64673: ST_TO_ADDR
64674: GO 64929
64676: LD_INT 36
64678: DOUBLE
64679: EQUAL
64680: IFTRUE 64684
64682: GO 64740
64684: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64685: LD_ADDR_VAR 0 9
64689: PUSH
64690: LD_VAR 0 47
64694: PUSH
64695: LD_VAR 0 48
64699: PUSH
64700: LD_VAR 0 49
64704: PUSH
64705: LD_VAR 0 50
64709: PUSH
64710: LD_VAR 0 51
64714: PUSH
64715: LD_VAR 0 52
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: PUSH
64728: LD_VAR 0 4
64732: PUSH
64733: LD_INT 1
64735: PLUS
64736: ARRAY
64737: ST_TO_ADDR
64738: GO 64929
64740: LD_INT 4
64742: DOUBLE
64743: EQUAL
64744: IFTRUE 64766
64746: LD_INT 5
64748: DOUBLE
64749: EQUAL
64750: IFTRUE 64766
64752: LD_INT 34
64754: DOUBLE
64755: EQUAL
64756: IFTRUE 64766
64758: LD_INT 37
64760: DOUBLE
64761: EQUAL
64762: IFTRUE 64766
64764: GO 64822
64766: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64767: LD_ADDR_VAR 0 9
64771: PUSH
64772: LD_VAR 0 53
64776: PUSH
64777: LD_VAR 0 54
64781: PUSH
64782: LD_VAR 0 55
64786: PUSH
64787: LD_VAR 0 56
64791: PUSH
64792: LD_VAR 0 57
64796: PUSH
64797: LD_VAR 0 58
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: PUSH
64810: LD_VAR 0 4
64814: PUSH
64815: LD_INT 1
64817: PLUS
64818: ARRAY
64819: ST_TO_ADDR
64820: GO 64929
64822: LD_INT 31
64824: DOUBLE
64825: EQUAL
64826: IFTRUE 64872
64828: LD_INT 32
64830: DOUBLE
64831: EQUAL
64832: IFTRUE 64872
64834: LD_INT 33
64836: DOUBLE
64837: EQUAL
64838: IFTRUE 64872
64840: LD_INT 27
64842: DOUBLE
64843: EQUAL
64844: IFTRUE 64872
64846: LD_INT 26
64848: DOUBLE
64849: EQUAL
64850: IFTRUE 64872
64852: LD_INT 28
64854: DOUBLE
64855: EQUAL
64856: IFTRUE 64872
64858: LD_INT 29
64860: DOUBLE
64861: EQUAL
64862: IFTRUE 64872
64864: LD_INT 30
64866: DOUBLE
64867: EQUAL
64868: IFTRUE 64872
64870: GO 64928
64872: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
64873: LD_ADDR_VAR 0 9
64877: PUSH
64878: LD_VAR 0 59
64882: PUSH
64883: LD_VAR 0 60
64887: PUSH
64888: LD_VAR 0 61
64892: PUSH
64893: LD_VAR 0 62
64897: PUSH
64898: LD_VAR 0 63
64902: PUSH
64903: LD_VAR 0 64
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: PUSH
64916: LD_VAR 0 4
64920: PUSH
64921: LD_INT 1
64923: PLUS
64924: ARRAY
64925: ST_TO_ADDR
64926: GO 64929
64928: POP
// temp_list2 = [ ] ;
64929: LD_ADDR_VAR 0 10
64933: PUSH
64934: EMPTY
64935: ST_TO_ADDR
// for i in temp_list do
64936: LD_ADDR_VAR 0 8
64940: PUSH
64941: LD_VAR 0 9
64945: PUSH
64946: FOR_IN
64947: IFFALSE 64999
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64949: LD_ADDR_VAR 0 10
64953: PUSH
64954: LD_VAR 0 10
64958: PUSH
64959: LD_VAR 0 8
64963: PUSH
64964: LD_INT 1
64966: ARRAY
64967: PUSH
64968: LD_VAR 0 2
64972: PLUS
64973: PUSH
64974: LD_VAR 0 8
64978: PUSH
64979: LD_INT 2
64981: ARRAY
64982: PUSH
64983: LD_VAR 0 3
64987: PLUS
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: EMPTY
64994: LIST
64995: ADD
64996: ST_TO_ADDR
64997: GO 64946
64999: POP
65000: POP
// result = temp_list2 ;
65001: LD_ADDR_VAR 0 7
65005: PUSH
65006: LD_VAR 0 10
65010: ST_TO_ADDR
// end ;
65011: LD_VAR 0 7
65015: RET
// export function EnemyInRange ( unit , dist ) ; begin
65016: LD_INT 0
65018: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65019: LD_ADDR_VAR 0 3
65023: PUSH
65024: LD_VAR 0 1
65028: PPUSH
65029: CALL_OW 255
65033: PPUSH
65034: LD_VAR 0 1
65038: PPUSH
65039: CALL_OW 250
65043: PPUSH
65044: LD_VAR 0 1
65048: PPUSH
65049: CALL_OW 251
65053: PPUSH
65054: LD_VAR 0 2
65058: PPUSH
65059: CALL 39120 0 4
65063: PUSH
65064: LD_INT 4
65066: ARRAY
65067: ST_TO_ADDR
// end ;
65068: LD_VAR 0 3
65072: RET
// export function PlayerSeeMe ( unit ) ; begin
65073: LD_INT 0
65075: PPUSH
// result := See ( your_side , unit ) ;
65076: LD_ADDR_VAR 0 2
65080: PUSH
65081: LD_OWVAR 2
65085: PPUSH
65086: LD_VAR 0 1
65090: PPUSH
65091: CALL_OW 292
65095: ST_TO_ADDR
// end ;
65096: LD_VAR 0 2
65100: RET
// export function ReverseDir ( unit ) ; begin
65101: LD_INT 0
65103: PPUSH
// if not unit then
65104: LD_VAR 0 1
65108: NOT
65109: IFFALSE 65113
// exit ;
65111: GO 65136
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65113: LD_ADDR_VAR 0 2
65117: PUSH
65118: LD_VAR 0 1
65122: PPUSH
65123: CALL_OW 254
65127: PUSH
65128: LD_INT 3
65130: PLUS
65131: PUSH
65132: LD_INT 6
65134: MOD
65135: ST_TO_ADDR
// end ;
65136: LD_VAR 0 2
65140: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65141: LD_INT 0
65143: PPUSH
65144: PPUSH
65145: PPUSH
65146: PPUSH
65147: PPUSH
// if not hexes then
65148: LD_VAR 0 2
65152: NOT
65153: IFFALSE 65157
// exit ;
65155: GO 65305
// dist := 9999 ;
65157: LD_ADDR_VAR 0 5
65161: PUSH
65162: LD_INT 9999
65164: ST_TO_ADDR
// for i = 1 to hexes do
65165: LD_ADDR_VAR 0 4
65169: PUSH
65170: DOUBLE
65171: LD_INT 1
65173: DEC
65174: ST_TO_ADDR
65175: LD_VAR 0 2
65179: PUSH
65180: FOR_TO
65181: IFFALSE 65293
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65183: LD_VAR 0 1
65187: PPUSH
65188: LD_VAR 0 2
65192: PUSH
65193: LD_VAR 0 4
65197: ARRAY
65198: PUSH
65199: LD_INT 1
65201: ARRAY
65202: PPUSH
65203: LD_VAR 0 2
65207: PUSH
65208: LD_VAR 0 4
65212: ARRAY
65213: PUSH
65214: LD_INT 2
65216: ARRAY
65217: PPUSH
65218: CALL_OW 297
65222: PUSH
65223: LD_VAR 0 5
65227: LESS
65228: IFFALSE 65291
// begin hex := hexes [ i ] ;
65230: LD_ADDR_VAR 0 7
65234: PUSH
65235: LD_VAR 0 2
65239: PUSH
65240: LD_VAR 0 4
65244: ARRAY
65245: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65246: LD_ADDR_VAR 0 5
65250: PUSH
65251: LD_VAR 0 1
65255: PPUSH
65256: LD_VAR 0 2
65260: PUSH
65261: LD_VAR 0 4
65265: ARRAY
65266: PUSH
65267: LD_INT 1
65269: ARRAY
65270: PPUSH
65271: LD_VAR 0 2
65275: PUSH
65276: LD_VAR 0 4
65280: ARRAY
65281: PUSH
65282: LD_INT 2
65284: ARRAY
65285: PPUSH
65286: CALL_OW 297
65290: ST_TO_ADDR
// end ; end ;
65291: GO 65180
65293: POP
65294: POP
// result := hex ;
65295: LD_ADDR_VAR 0 3
65299: PUSH
65300: LD_VAR 0 7
65304: ST_TO_ADDR
// end ;
65305: LD_VAR 0 3
65309: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65310: LD_INT 0
65312: PPUSH
65313: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65314: LD_VAR 0 1
65318: NOT
65319: PUSH
65320: LD_VAR 0 1
65324: PUSH
65325: LD_INT 21
65327: PUSH
65328: LD_INT 2
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 23
65337: PUSH
65338: LD_INT 2
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PPUSH
65349: CALL_OW 69
65353: IN
65354: NOT
65355: OR
65356: IFFALSE 65360
// exit ;
65358: GO 65407
// for i = 1 to 3 do
65360: LD_ADDR_VAR 0 3
65364: PUSH
65365: DOUBLE
65366: LD_INT 1
65368: DEC
65369: ST_TO_ADDR
65370: LD_INT 3
65372: PUSH
65373: FOR_TO
65374: IFFALSE 65405
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65376: LD_VAR 0 1
65380: PPUSH
65381: CALL_OW 250
65385: PPUSH
65386: LD_VAR 0 1
65390: PPUSH
65391: CALL_OW 251
65395: PPUSH
65396: LD_INT 1
65398: PPUSH
65399: CALL_OW 453
65403: GO 65373
65405: POP
65406: POP
// end ;
65407: LD_VAR 0 2
65411: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65412: LD_INT 0
65414: PPUSH
65415: PPUSH
65416: PPUSH
65417: PPUSH
65418: PPUSH
65419: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65420: LD_VAR 0 1
65424: NOT
65425: PUSH
65426: LD_VAR 0 2
65430: NOT
65431: OR
65432: PUSH
65433: LD_VAR 0 1
65437: PPUSH
65438: CALL_OW 314
65442: OR
65443: IFFALSE 65447
// exit ;
65445: GO 65888
// x := GetX ( enemy_unit ) ;
65447: LD_ADDR_VAR 0 7
65451: PUSH
65452: LD_VAR 0 2
65456: PPUSH
65457: CALL_OW 250
65461: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65462: LD_ADDR_VAR 0 8
65466: PUSH
65467: LD_VAR 0 2
65471: PPUSH
65472: CALL_OW 251
65476: ST_TO_ADDR
// if not x or not y then
65477: LD_VAR 0 7
65481: NOT
65482: PUSH
65483: LD_VAR 0 8
65487: NOT
65488: OR
65489: IFFALSE 65493
// exit ;
65491: GO 65888
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65493: LD_ADDR_VAR 0 6
65497: PUSH
65498: LD_VAR 0 7
65502: PPUSH
65503: LD_INT 0
65505: PPUSH
65506: LD_INT 4
65508: PPUSH
65509: CALL_OW 272
65513: PUSH
65514: LD_VAR 0 8
65518: PPUSH
65519: LD_INT 0
65521: PPUSH
65522: LD_INT 4
65524: PPUSH
65525: CALL_OW 273
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_VAR 0 7
65538: PPUSH
65539: LD_INT 1
65541: PPUSH
65542: LD_INT 4
65544: PPUSH
65545: CALL_OW 272
65549: PUSH
65550: LD_VAR 0 8
65554: PPUSH
65555: LD_INT 1
65557: PPUSH
65558: LD_INT 4
65560: PPUSH
65561: CALL_OW 273
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_VAR 0 7
65574: PPUSH
65575: LD_INT 2
65577: PPUSH
65578: LD_INT 4
65580: PPUSH
65581: CALL_OW 272
65585: PUSH
65586: LD_VAR 0 8
65590: PPUSH
65591: LD_INT 2
65593: PPUSH
65594: LD_INT 4
65596: PPUSH
65597: CALL_OW 273
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_VAR 0 7
65610: PPUSH
65611: LD_INT 3
65613: PPUSH
65614: LD_INT 4
65616: PPUSH
65617: CALL_OW 272
65621: PUSH
65622: LD_VAR 0 8
65626: PPUSH
65627: LD_INT 3
65629: PPUSH
65630: LD_INT 4
65632: PPUSH
65633: CALL_OW 273
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_VAR 0 7
65646: PPUSH
65647: LD_INT 4
65649: PPUSH
65650: LD_INT 4
65652: PPUSH
65653: CALL_OW 272
65657: PUSH
65658: LD_VAR 0 8
65662: PPUSH
65663: LD_INT 4
65665: PPUSH
65666: LD_INT 4
65668: PPUSH
65669: CALL_OW 273
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_VAR 0 7
65682: PPUSH
65683: LD_INT 5
65685: PPUSH
65686: LD_INT 4
65688: PPUSH
65689: CALL_OW 272
65693: PUSH
65694: LD_VAR 0 8
65698: PPUSH
65699: LD_INT 5
65701: PPUSH
65702: LD_INT 4
65704: PPUSH
65705: CALL_OW 273
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: ST_TO_ADDR
// for i = tmp downto 1 do
65722: LD_ADDR_VAR 0 4
65726: PUSH
65727: DOUBLE
65728: LD_VAR 0 6
65732: INC
65733: ST_TO_ADDR
65734: LD_INT 1
65736: PUSH
65737: FOR_DOWNTO
65738: IFFALSE 65839
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65740: LD_VAR 0 6
65744: PUSH
65745: LD_VAR 0 4
65749: ARRAY
65750: PUSH
65751: LD_INT 1
65753: ARRAY
65754: PPUSH
65755: LD_VAR 0 6
65759: PUSH
65760: LD_VAR 0 4
65764: ARRAY
65765: PUSH
65766: LD_INT 2
65768: ARRAY
65769: PPUSH
65770: CALL_OW 488
65774: NOT
65775: PUSH
65776: LD_VAR 0 6
65780: PUSH
65781: LD_VAR 0 4
65785: ARRAY
65786: PUSH
65787: LD_INT 1
65789: ARRAY
65790: PPUSH
65791: LD_VAR 0 6
65795: PUSH
65796: LD_VAR 0 4
65800: ARRAY
65801: PUSH
65802: LD_INT 2
65804: ARRAY
65805: PPUSH
65806: CALL_OW 428
65810: PUSH
65811: LD_INT 0
65813: NONEQUAL
65814: OR
65815: IFFALSE 65837
// tmp := Delete ( tmp , i ) ;
65817: LD_ADDR_VAR 0 6
65821: PUSH
65822: LD_VAR 0 6
65826: PPUSH
65827: LD_VAR 0 4
65831: PPUSH
65832: CALL_OW 3
65836: ST_TO_ADDR
65837: GO 65737
65839: POP
65840: POP
// j := GetClosestHex ( unit , tmp ) ;
65841: LD_ADDR_VAR 0 5
65845: PUSH
65846: LD_VAR 0 1
65850: PPUSH
65851: LD_VAR 0 6
65855: PPUSH
65856: CALL 65141 0 2
65860: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65861: LD_VAR 0 1
65865: PPUSH
65866: LD_VAR 0 5
65870: PUSH
65871: LD_INT 1
65873: ARRAY
65874: PPUSH
65875: LD_VAR 0 5
65879: PUSH
65880: LD_INT 2
65882: ARRAY
65883: PPUSH
65884: CALL_OW 111
// end ;
65888: LD_VAR 0 3
65892: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65893: LD_INT 0
65895: PPUSH
65896: PPUSH
65897: PPUSH
// uc_side = 0 ;
65898: LD_ADDR_OWVAR 20
65902: PUSH
65903: LD_INT 0
65905: ST_TO_ADDR
// uc_nation = 0 ;
65906: LD_ADDR_OWVAR 21
65910: PUSH
65911: LD_INT 0
65913: ST_TO_ADDR
// InitHc ;
65914: CALL_OW 19
// InitVc ;
65918: CALL_OW 20
// if mastodonts then
65922: LD_VAR 0 6
65926: IFFALSE 65993
// for i = 1 to mastodonts do
65928: LD_ADDR_VAR 0 11
65932: PUSH
65933: DOUBLE
65934: LD_INT 1
65936: DEC
65937: ST_TO_ADDR
65938: LD_VAR 0 6
65942: PUSH
65943: FOR_TO
65944: IFFALSE 65991
// begin vc_chassis := 31 ;
65946: LD_ADDR_OWVAR 37
65950: PUSH
65951: LD_INT 31
65953: ST_TO_ADDR
// vc_control := control_rider ;
65954: LD_ADDR_OWVAR 38
65958: PUSH
65959: LD_INT 4
65961: ST_TO_ADDR
// animal := CreateVehicle ;
65962: LD_ADDR_VAR 0 12
65966: PUSH
65967: CALL_OW 45
65971: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65972: LD_VAR 0 12
65976: PPUSH
65977: LD_VAR 0 8
65981: PPUSH
65982: LD_INT 0
65984: PPUSH
65985: CALL 68062 0 3
// end ;
65989: GO 65943
65991: POP
65992: POP
// if horses then
65993: LD_VAR 0 5
65997: IFFALSE 66064
// for i = 1 to horses do
65999: LD_ADDR_VAR 0 11
66003: PUSH
66004: DOUBLE
66005: LD_INT 1
66007: DEC
66008: ST_TO_ADDR
66009: LD_VAR 0 5
66013: PUSH
66014: FOR_TO
66015: IFFALSE 66062
// begin hc_class := 21 ;
66017: LD_ADDR_OWVAR 28
66021: PUSH
66022: LD_INT 21
66024: ST_TO_ADDR
// hc_gallery :=  ;
66025: LD_ADDR_OWVAR 33
66029: PUSH
66030: LD_STRING 
66032: ST_TO_ADDR
// animal := CreateHuman ;
66033: LD_ADDR_VAR 0 12
66037: PUSH
66038: CALL_OW 44
66042: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66043: LD_VAR 0 12
66047: PPUSH
66048: LD_VAR 0 8
66052: PPUSH
66053: LD_INT 0
66055: PPUSH
66056: CALL 68062 0 3
// end ;
66060: GO 66014
66062: POP
66063: POP
// if birds then
66064: LD_VAR 0 1
66068: IFFALSE 66135
// for i = 1 to birds do
66070: LD_ADDR_VAR 0 11
66074: PUSH
66075: DOUBLE
66076: LD_INT 1
66078: DEC
66079: ST_TO_ADDR
66080: LD_VAR 0 1
66084: PUSH
66085: FOR_TO
66086: IFFALSE 66133
// begin hc_class = 18 ;
66088: LD_ADDR_OWVAR 28
66092: PUSH
66093: LD_INT 18
66095: ST_TO_ADDR
// hc_gallery =  ;
66096: LD_ADDR_OWVAR 33
66100: PUSH
66101: LD_STRING 
66103: ST_TO_ADDR
// animal := CreateHuman ;
66104: LD_ADDR_VAR 0 12
66108: PUSH
66109: CALL_OW 44
66113: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66114: LD_VAR 0 12
66118: PPUSH
66119: LD_VAR 0 8
66123: PPUSH
66124: LD_INT 0
66126: PPUSH
66127: CALL 68062 0 3
// end ;
66131: GO 66085
66133: POP
66134: POP
// if tigers then
66135: LD_VAR 0 2
66139: IFFALSE 66223
// for i = 1 to tigers do
66141: LD_ADDR_VAR 0 11
66145: PUSH
66146: DOUBLE
66147: LD_INT 1
66149: DEC
66150: ST_TO_ADDR
66151: LD_VAR 0 2
66155: PUSH
66156: FOR_TO
66157: IFFALSE 66221
// begin hc_class = class_tiger ;
66159: LD_ADDR_OWVAR 28
66163: PUSH
66164: LD_INT 14
66166: ST_TO_ADDR
// hc_gallery =  ;
66167: LD_ADDR_OWVAR 33
66171: PUSH
66172: LD_STRING 
66174: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66175: LD_ADDR_OWVAR 35
66179: PUSH
66180: LD_INT 7
66182: NEG
66183: PPUSH
66184: LD_INT 7
66186: PPUSH
66187: CALL_OW 12
66191: ST_TO_ADDR
// animal := CreateHuman ;
66192: LD_ADDR_VAR 0 12
66196: PUSH
66197: CALL_OW 44
66201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66202: LD_VAR 0 12
66206: PPUSH
66207: LD_VAR 0 8
66211: PPUSH
66212: LD_INT 0
66214: PPUSH
66215: CALL 68062 0 3
// end ;
66219: GO 66156
66221: POP
66222: POP
// if apemans then
66223: LD_VAR 0 3
66227: IFFALSE 66350
// for i = 1 to apemans do
66229: LD_ADDR_VAR 0 11
66233: PUSH
66234: DOUBLE
66235: LD_INT 1
66237: DEC
66238: ST_TO_ADDR
66239: LD_VAR 0 3
66243: PUSH
66244: FOR_TO
66245: IFFALSE 66348
// begin hc_class = class_apeman ;
66247: LD_ADDR_OWVAR 28
66251: PUSH
66252: LD_INT 12
66254: ST_TO_ADDR
// hc_gallery =  ;
66255: LD_ADDR_OWVAR 33
66259: PUSH
66260: LD_STRING 
66262: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
66263: LD_ADDR_OWVAR 35
66267: PUSH
66268: LD_INT 5
66270: NEG
66271: PPUSH
66272: LD_INT 5
66274: PPUSH
66275: CALL_OW 12
66279: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66280: LD_ADDR_OWVAR 31
66284: PUSH
66285: LD_INT 1
66287: PPUSH
66288: LD_INT 3
66290: PPUSH
66291: CALL_OW 12
66295: PUSH
66296: LD_INT 1
66298: PPUSH
66299: LD_INT 3
66301: PPUSH
66302: CALL_OW 12
66306: PUSH
66307: LD_INT 0
66309: PUSH
66310: LD_INT 0
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: ST_TO_ADDR
// animal := CreateHuman ;
66319: LD_ADDR_VAR 0 12
66323: PUSH
66324: CALL_OW 44
66328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66329: LD_VAR 0 12
66333: PPUSH
66334: LD_VAR 0 8
66338: PPUSH
66339: LD_INT 0
66341: PPUSH
66342: CALL 68062 0 3
// end ;
66346: GO 66244
66348: POP
66349: POP
// if enchidnas then
66350: LD_VAR 0 4
66354: IFFALSE 66421
// for i = 1 to enchidnas do
66356: LD_ADDR_VAR 0 11
66360: PUSH
66361: DOUBLE
66362: LD_INT 1
66364: DEC
66365: ST_TO_ADDR
66366: LD_VAR 0 4
66370: PUSH
66371: FOR_TO
66372: IFFALSE 66419
// begin hc_class = 13 ;
66374: LD_ADDR_OWVAR 28
66378: PUSH
66379: LD_INT 13
66381: ST_TO_ADDR
// hc_gallery =  ;
66382: LD_ADDR_OWVAR 33
66386: PUSH
66387: LD_STRING 
66389: ST_TO_ADDR
// animal := CreateHuman ;
66390: LD_ADDR_VAR 0 12
66394: PUSH
66395: CALL_OW 44
66399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66400: LD_VAR 0 12
66404: PPUSH
66405: LD_VAR 0 8
66409: PPUSH
66410: LD_INT 0
66412: PPUSH
66413: CALL 68062 0 3
// end ;
66417: GO 66371
66419: POP
66420: POP
// if fishes then
66421: LD_VAR 0 7
66425: IFFALSE 66492
// for i = 1 to fishes do
66427: LD_ADDR_VAR 0 11
66431: PUSH
66432: DOUBLE
66433: LD_INT 1
66435: DEC
66436: ST_TO_ADDR
66437: LD_VAR 0 7
66441: PUSH
66442: FOR_TO
66443: IFFALSE 66490
// begin hc_class = 20 ;
66445: LD_ADDR_OWVAR 28
66449: PUSH
66450: LD_INT 20
66452: ST_TO_ADDR
// hc_gallery =  ;
66453: LD_ADDR_OWVAR 33
66457: PUSH
66458: LD_STRING 
66460: ST_TO_ADDR
// animal := CreateHuman ;
66461: LD_ADDR_VAR 0 12
66465: PUSH
66466: CALL_OW 44
66470: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66471: LD_VAR 0 12
66475: PPUSH
66476: LD_VAR 0 9
66480: PPUSH
66481: LD_INT 0
66483: PPUSH
66484: CALL 68062 0 3
// end ;
66488: GO 66442
66490: POP
66491: POP
// end ;
66492: LD_VAR 0 10
66496: RET
// export function WantHeal ( sci , unit ) ; begin
66497: LD_INT 0
66499: PPUSH
// if GetTaskList ( sci ) > 0 then
66500: LD_VAR 0 1
66504: PPUSH
66505: CALL_OW 437
66509: PUSH
66510: LD_INT 0
66512: GREATER
66513: IFFALSE 66583
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66515: LD_VAR 0 1
66519: PPUSH
66520: CALL_OW 437
66524: PUSH
66525: LD_INT 1
66527: ARRAY
66528: PUSH
66529: LD_INT 1
66531: ARRAY
66532: PUSH
66533: LD_STRING l
66535: EQUAL
66536: PUSH
66537: LD_VAR 0 1
66541: PPUSH
66542: CALL_OW 437
66546: PUSH
66547: LD_INT 1
66549: ARRAY
66550: PUSH
66551: LD_INT 4
66553: ARRAY
66554: PUSH
66555: LD_VAR 0 2
66559: EQUAL
66560: AND
66561: IFFALSE 66573
// result := true else
66563: LD_ADDR_VAR 0 3
66567: PUSH
66568: LD_INT 1
66570: ST_TO_ADDR
66571: GO 66581
// result := false ;
66573: LD_ADDR_VAR 0 3
66577: PUSH
66578: LD_INT 0
66580: ST_TO_ADDR
// end else
66581: GO 66591
// result := false ;
66583: LD_ADDR_VAR 0 3
66587: PUSH
66588: LD_INT 0
66590: ST_TO_ADDR
// end ;
66591: LD_VAR 0 3
66595: RET
// export function HealTarget ( sci ) ; begin
66596: LD_INT 0
66598: PPUSH
// if not sci then
66599: LD_VAR 0 1
66603: NOT
66604: IFFALSE 66608
// exit ;
66606: GO 66673
// result := 0 ;
66608: LD_ADDR_VAR 0 2
66612: PUSH
66613: LD_INT 0
66615: ST_TO_ADDR
// if GetTaskList ( sci ) then
66616: LD_VAR 0 1
66620: PPUSH
66621: CALL_OW 437
66625: IFFALSE 66673
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66627: LD_VAR 0 1
66631: PPUSH
66632: CALL_OW 437
66636: PUSH
66637: LD_INT 1
66639: ARRAY
66640: PUSH
66641: LD_INT 1
66643: ARRAY
66644: PUSH
66645: LD_STRING l
66647: EQUAL
66648: IFFALSE 66673
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66650: LD_ADDR_VAR 0 2
66654: PUSH
66655: LD_VAR 0 1
66659: PPUSH
66660: CALL_OW 437
66664: PUSH
66665: LD_INT 1
66667: ARRAY
66668: PUSH
66669: LD_INT 4
66671: ARRAY
66672: ST_TO_ADDR
// end ;
66673: LD_VAR 0 2
66677: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66678: LD_INT 0
66680: PPUSH
66681: PPUSH
66682: PPUSH
66683: PPUSH
// if not base_units then
66684: LD_VAR 0 1
66688: NOT
66689: IFFALSE 66693
// exit ;
66691: GO 66780
// result := false ;
66693: LD_ADDR_VAR 0 2
66697: PUSH
66698: LD_INT 0
66700: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66701: LD_ADDR_VAR 0 5
66705: PUSH
66706: LD_VAR 0 1
66710: PPUSH
66711: LD_INT 21
66713: PUSH
66714: LD_INT 3
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PPUSH
66721: CALL_OW 72
66725: ST_TO_ADDR
// if not tmp then
66726: LD_VAR 0 5
66730: NOT
66731: IFFALSE 66735
// exit ;
66733: GO 66780
// for i in tmp do
66735: LD_ADDR_VAR 0 3
66739: PUSH
66740: LD_VAR 0 5
66744: PUSH
66745: FOR_IN
66746: IFFALSE 66778
// begin result := EnemyInRange ( i , 22 ) ;
66748: LD_ADDR_VAR 0 2
66752: PUSH
66753: LD_VAR 0 3
66757: PPUSH
66758: LD_INT 22
66760: PPUSH
66761: CALL 65016 0 2
66765: ST_TO_ADDR
// if result then
66766: LD_VAR 0 2
66770: IFFALSE 66776
// exit ;
66772: POP
66773: POP
66774: GO 66780
// end ;
66776: GO 66745
66778: POP
66779: POP
// end ;
66780: LD_VAR 0 2
66784: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66785: LD_INT 0
66787: PPUSH
66788: PPUSH
// if not units then
66789: LD_VAR 0 1
66793: NOT
66794: IFFALSE 66798
// exit ;
66796: GO 66868
// result := [ ] ;
66798: LD_ADDR_VAR 0 3
66802: PUSH
66803: EMPTY
66804: ST_TO_ADDR
// for i in units do
66805: LD_ADDR_VAR 0 4
66809: PUSH
66810: LD_VAR 0 1
66814: PUSH
66815: FOR_IN
66816: IFFALSE 66866
// if GetTag ( i ) = tag then
66818: LD_VAR 0 4
66822: PPUSH
66823: CALL_OW 110
66827: PUSH
66828: LD_VAR 0 2
66832: EQUAL
66833: IFFALSE 66864
// result := Insert ( result , result + 1 , i ) ;
66835: LD_ADDR_VAR 0 3
66839: PUSH
66840: LD_VAR 0 3
66844: PPUSH
66845: LD_VAR 0 3
66849: PUSH
66850: LD_INT 1
66852: PLUS
66853: PPUSH
66854: LD_VAR 0 4
66858: PPUSH
66859: CALL_OW 2
66863: ST_TO_ADDR
66864: GO 66815
66866: POP
66867: POP
// end ;
66868: LD_VAR 0 3
66872: RET
// export function IsDriver ( un ) ; begin
66873: LD_INT 0
66875: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66876: LD_ADDR_VAR 0 2
66880: PUSH
66881: LD_VAR 0 1
66885: PUSH
66886: LD_INT 55
66888: PUSH
66889: EMPTY
66890: LIST
66891: PPUSH
66892: CALL_OW 69
66896: IN
66897: ST_TO_ADDR
// end ;
66898: LD_VAR 0 2
66902: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66903: LD_INT 0
66905: PPUSH
66906: PPUSH
// list := [ ] ;
66907: LD_ADDR_VAR 0 5
66911: PUSH
66912: EMPTY
66913: ST_TO_ADDR
// case d of 0 :
66914: LD_VAR 0 3
66918: PUSH
66919: LD_INT 0
66921: DOUBLE
66922: EQUAL
66923: IFTRUE 66927
66925: GO 67060
66927: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66928: LD_ADDR_VAR 0 5
66932: PUSH
66933: LD_VAR 0 1
66937: PUSH
66938: LD_INT 4
66940: MINUS
66941: PUSH
66942: LD_VAR 0 2
66946: PUSH
66947: LD_INT 4
66949: MINUS
66950: PUSH
66951: LD_INT 2
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: LIST
66958: PUSH
66959: LD_VAR 0 1
66963: PUSH
66964: LD_INT 3
66966: MINUS
66967: PUSH
66968: LD_VAR 0 2
66972: PUSH
66973: LD_INT 1
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: LIST
66980: PUSH
66981: LD_VAR 0 1
66985: PUSH
66986: LD_INT 4
66988: PLUS
66989: PUSH
66990: LD_VAR 0 2
66994: PUSH
66995: LD_INT 4
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: LIST
67002: PUSH
67003: LD_VAR 0 1
67007: PUSH
67008: LD_INT 3
67010: PLUS
67011: PUSH
67012: LD_VAR 0 2
67016: PUSH
67017: LD_INT 3
67019: PLUS
67020: PUSH
67021: LD_INT 5
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: LIST
67028: PUSH
67029: LD_VAR 0 1
67033: PUSH
67034: LD_VAR 0 2
67038: PUSH
67039: LD_INT 4
67041: PLUS
67042: PUSH
67043: LD_INT 0
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: LIST
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: ST_TO_ADDR
// end ; 1 :
67058: GO 67758
67060: LD_INT 1
67062: DOUBLE
67063: EQUAL
67064: IFTRUE 67068
67066: GO 67201
67068: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67069: LD_ADDR_VAR 0 5
67073: PUSH
67074: LD_VAR 0 1
67078: PUSH
67079: LD_VAR 0 2
67083: PUSH
67084: LD_INT 4
67086: MINUS
67087: PUSH
67088: LD_INT 3
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: LIST
67095: PUSH
67096: LD_VAR 0 1
67100: PUSH
67101: LD_INT 3
67103: MINUS
67104: PUSH
67105: LD_VAR 0 2
67109: PUSH
67110: LD_INT 3
67112: MINUS
67113: PUSH
67114: LD_INT 2
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: LIST
67121: PUSH
67122: LD_VAR 0 1
67126: PUSH
67127: LD_INT 4
67129: MINUS
67130: PUSH
67131: LD_VAR 0 2
67135: PUSH
67136: LD_INT 1
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: LIST
67143: PUSH
67144: LD_VAR 0 1
67148: PUSH
67149: LD_VAR 0 2
67153: PUSH
67154: LD_INT 3
67156: PLUS
67157: PUSH
67158: LD_INT 0
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: LIST
67165: PUSH
67166: LD_VAR 0 1
67170: PUSH
67171: LD_INT 4
67173: PLUS
67174: PUSH
67175: LD_VAR 0 2
67179: PUSH
67180: LD_INT 4
67182: PLUS
67183: PUSH
67184: LD_INT 5
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: LIST
67191: PUSH
67192: EMPTY
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: ST_TO_ADDR
// end ; 2 :
67199: GO 67758
67201: LD_INT 2
67203: DOUBLE
67204: EQUAL
67205: IFTRUE 67209
67207: GO 67338
67209: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67210: LD_ADDR_VAR 0 5
67214: PUSH
67215: LD_VAR 0 1
67219: PUSH
67220: LD_VAR 0 2
67224: PUSH
67225: LD_INT 3
67227: MINUS
67228: PUSH
67229: LD_INT 3
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: LIST
67236: PUSH
67237: LD_VAR 0 1
67241: PUSH
67242: LD_INT 4
67244: PLUS
67245: PUSH
67246: LD_VAR 0 2
67250: PUSH
67251: LD_INT 4
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: LIST
67258: PUSH
67259: LD_VAR 0 1
67263: PUSH
67264: LD_VAR 0 2
67268: PUSH
67269: LD_INT 4
67271: PLUS
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: LIST
67280: PUSH
67281: LD_VAR 0 1
67285: PUSH
67286: LD_INT 3
67288: MINUS
67289: PUSH
67290: LD_VAR 0 2
67294: PUSH
67295: LD_INT 1
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: LIST
67302: PUSH
67303: LD_VAR 0 1
67307: PUSH
67308: LD_INT 4
67310: MINUS
67311: PUSH
67312: LD_VAR 0 2
67316: PUSH
67317: LD_INT 4
67319: MINUS
67320: PUSH
67321: LD_INT 2
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: LIST
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: ST_TO_ADDR
// end ; 3 :
67336: GO 67758
67338: LD_INT 3
67340: DOUBLE
67341: EQUAL
67342: IFTRUE 67346
67344: GO 67479
67346: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67347: LD_ADDR_VAR 0 5
67351: PUSH
67352: LD_VAR 0 1
67356: PUSH
67357: LD_INT 3
67359: PLUS
67360: PUSH
67361: LD_VAR 0 2
67365: PUSH
67366: LD_INT 4
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: LIST
67373: PUSH
67374: LD_VAR 0 1
67378: PUSH
67379: LD_INT 4
67381: PLUS
67382: PUSH
67383: LD_VAR 0 2
67387: PUSH
67388: LD_INT 4
67390: PLUS
67391: PUSH
67392: LD_INT 5
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: LIST
67399: PUSH
67400: LD_VAR 0 1
67404: PUSH
67405: LD_INT 4
67407: MINUS
67408: PUSH
67409: LD_VAR 0 2
67413: PUSH
67414: LD_INT 1
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: LIST
67421: PUSH
67422: LD_VAR 0 1
67426: PUSH
67427: LD_VAR 0 2
67431: PUSH
67432: LD_INT 4
67434: MINUS
67435: PUSH
67436: LD_INT 3
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: LIST
67443: PUSH
67444: LD_VAR 0 1
67448: PUSH
67449: LD_INT 3
67451: MINUS
67452: PUSH
67453: LD_VAR 0 2
67457: PUSH
67458: LD_INT 3
67460: MINUS
67461: PUSH
67462: LD_INT 2
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: LIST
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: ST_TO_ADDR
// end ; 4 :
67477: GO 67758
67479: LD_INT 4
67481: DOUBLE
67482: EQUAL
67483: IFTRUE 67487
67485: GO 67620
67487: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67488: LD_ADDR_VAR 0 5
67492: PUSH
67493: LD_VAR 0 1
67497: PUSH
67498: LD_VAR 0 2
67502: PUSH
67503: LD_INT 4
67505: PLUS
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: LIST
67514: PUSH
67515: LD_VAR 0 1
67519: PUSH
67520: LD_INT 3
67522: PLUS
67523: PUSH
67524: LD_VAR 0 2
67528: PUSH
67529: LD_INT 3
67531: PLUS
67532: PUSH
67533: LD_INT 5
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: LIST
67540: PUSH
67541: LD_VAR 0 1
67545: PUSH
67546: LD_INT 4
67548: PLUS
67549: PUSH
67550: LD_VAR 0 2
67554: PUSH
67555: LD_INT 4
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: LIST
67562: PUSH
67563: LD_VAR 0 1
67567: PUSH
67568: LD_VAR 0 2
67572: PUSH
67573: LD_INT 3
67575: MINUS
67576: PUSH
67577: LD_INT 3
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: LIST
67584: PUSH
67585: LD_VAR 0 1
67589: PUSH
67590: LD_INT 4
67592: MINUS
67593: PUSH
67594: LD_VAR 0 2
67598: PUSH
67599: LD_INT 4
67601: MINUS
67602: PUSH
67603: LD_INT 2
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: LIST
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: ST_TO_ADDR
// end ; 5 :
67618: GO 67758
67620: LD_INT 5
67622: DOUBLE
67623: EQUAL
67624: IFTRUE 67628
67626: GO 67757
67628: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67629: LD_ADDR_VAR 0 5
67633: PUSH
67634: LD_VAR 0 1
67638: PUSH
67639: LD_INT 4
67641: MINUS
67642: PUSH
67643: LD_VAR 0 2
67647: PUSH
67648: LD_INT 1
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: LIST
67655: PUSH
67656: LD_VAR 0 1
67660: PUSH
67661: LD_VAR 0 2
67665: PUSH
67666: LD_INT 4
67668: MINUS
67669: PUSH
67670: LD_INT 3
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: LIST
67677: PUSH
67678: LD_VAR 0 1
67682: PUSH
67683: LD_INT 4
67685: PLUS
67686: PUSH
67687: LD_VAR 0 2
67691: PUSH
67692: LD_INT 4
67694: PLUS
67695: PUSH
67696: LD_INT 5
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: LIST
67703: PUSH
67704: LD_VAR 0 1
67708: PUSH
67709: LD_INT 3
67711: PLUS
67712: PUSH
67713: LD_VAR 0 2
67717: PUSH
67718: LD_INT 4
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: LIST
67725: PUSH
67726: LD_VAR 0 1
67730: PUSH
67731: LD_VAR 0 2
67735: PUSH
67736: LD_INT 3
67738: PLUS
67739: PUSH
67740: LD_INT 0
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: LIST
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: ST_TO_ADDR
// end ; end ;
67755: GO 67758
67757: POP
// result := list ;
67758: LD_ADDR_VAR 0 4
67762: PUSH
67763: LD_VAR 0 5
67767: ST_TO_ADDR
// end ;
67768: LD_VAR 0 4
67772: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67773: LD_INT 0
67775: PPUSH
67776: PPUSH
67777: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67778: LD_VAR 0 1
67782: NOT
67783: PUSH
67784: LD_VAR 0 2
67788: PUSH
67789: LD_INT 1
67791: PUSH
67792: LD_INT 2
67794: PUSH
67795: LD_INT 3
67797: PUSH
67798: LD_INT 4
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: IN
67807: NOT
67808: OR
67809: IFFALSE 67813
// exit ;
67811: GO 67905
// tmp := [ ] ;
67813: LD_ADDR_VAR 0 5
67817: PUSH
67818: EMPTY
67819: ST_TO_ADDR
// for i in units do
67820: LD_ADDR_VAR 0 4
67824: PUSH
67825: LD_VAR 0 1
67829: PUSH
67830: FOR_IN
67831: IFFALSE 67874
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67833: LD_ADDR_VAR 0 5
67837: PUSH
67838: LD_VAR 0 5
67842: PPUSH
67843: LD_VAR 0 5
67847: PUSH
67848: LD_INT 1
67850: PLUS
67851: PPUSH
67852: LD_VAR 0 4
67856: PPUSH
67857: LD_VAR 0 2
67861: PPUSH
67862: CALL_OW 259
67866: PPUSH
67867: CALL_OW 2
67871: ST_TO_ADDR
67872: GO 67830
67874: POP
67875: POP
// if not tmp then
67876: LD_VAR 0 5
67880: NOT
67881: IFFALSE 67885
// exit ;
67883: GO 67905
// result := SortListByListDesc ( units , tmp ) ;
67885: LD_ADDR_VAR 0 3
67889: PUSH
67890: LD_VAR 0 1
67894: PPUSH
67895: LD_VAR 0 5
67899: PPUSH
67900: CALL_OW 77
67904: ST_TO_ADDR
// end ;
67905: LD_VAR 0 3
67909: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67910: LD_INT 0
67912: PPUSH
67913: PPUSH
67914: PPUSH
// x := GetX ( building ) ;
67915: LD_ADDR_VAR 0 4
67919: PUSH
67920: LD_VAR 0 2
67924: PPUSH
67925: CALL_OW 250
67929: ST_TO_ADDR
// y := GetY ( building ) ;
67930: LD_ADDR_VAR 0 5
67934: PUSH
67935: LD_VAR 0 2
67939: PPUSH
67940: CALL_OW 251
67944: ST_TO_ADDR
// if GetTaskList ( unit ) then
67945: LD_VAR 0 1
67949: PPUSH
67950: CALL_OW 437
67954: IFFALSE 68049
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67956: LD_STRING e
67958: PUSH
67959: LD_VAR 0 1
67963: PPUSH
67964: CALL_OW 437
67968: PUSH
67969: LD_INT 1
67971: ARRAY
67972: PUSH
67973: LD_INT 1
67975: ARRAY
67976: EQUAL
67977: PUSH
67978: LD_VAR 0 4
67982: PUSH
67983: LD_VAR 0 1
67987: PPUSH
67988: CALL_OW 437
67992: PUSH
67993: LD_INT 1
67995: ARRAY
67996: PUSH
67997: LD_INT 2
67999: ARRAY
68000: EQUAL
68001: AND
68002: PUSH
68003: LD_VAR 0 5
68007: PUSH
68008: LD_VAR 0 1
68012: PPUSH
68013: CALL_OW 437
68017: PUSH
68018: LD_INT 1
68020: ARRAY
68021: PUSH
68022: LD_INT 3
68024: ARRAY
68025: EQUAL
68026: AND
68027: IFFALSE 68039
// result := true else
68029: LD_ADDR_VAR 0 3
68033: PUSH
68034: LD_INT 1
68036: ST_TO_ADDR
68037: GO 68047
// result := false ;
68039: LD_ADDR_VAR 0 3
68043: PUSH
68044: LD_INT 0
68046: ST_TO_ADDR
// end else
68047: GO 68057
// result := false ;
68049: LD_ADDR_VAR 0 3
68053: PUSH
68054: LD_INT 0
68056: ST_TO_ADDR
// end ;
68057: LD_VAR 0 3
68061: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68062: LD_INT 0
68064: PPUSH
68065: PPUSH
68066: PPUSH
68067: PPUSH
// if not unit or not area then
68068: LD_VAR 0 1
68072: NOT
68073: PUSH
68074: LD_VAR 0 2
68078: NOT
68079: OR
68080: IFFALSE 68084
// exit ;
68082: GO 68248
// tmp := AreaToList ( area , i ) ;
68084: LD_ADDR_VAR 0 6
68088: PUSH
68089: LD_VAR 0 2
68093: PPUSH
68094: LD_VAR 0 5
68098: PPUSH
68099: CALL_OW 517
68103: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68104: LD_ADDR_VAR 0 5
68108: PUSH
68109: DOUBLE
68110: LD_INT 1
68112: DEC
68113: ST_TO_ADDR
68114: LD_VAR 0 6
68118: PUSH
68119: LD_INT 1
68121: ARRAY
68122: PUSH
68123: FOR_TO
68124: IFFALSE 68246
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68126: LD_ADDR_VAR 0 7
68130: PUSH
68131: LD_VAR 0 6
68135: PUSH
68136: LD_INT 1
68138: ARRAY
68139: PUSH
68140: LD_VAR 0 5
68144: ARRAY
68145: PUSH
68146: LD_VAR 0 6
68150: PUSH
68151: LD_INT 2
68153: ARRAY
68154: PUSH
68155: LD_VAR 0 5
68159: ARRAY
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68165: LD_VAR 0 7
68169: PUSH
68170: LD_INT 1
68172: ARRAY
68173: PPUSH
68174: LD_VAR 0 7
68178: PUSH
68179: LD_INT 2
68181: ARRAY
68182: PPUSH
68183: CALL_OW 428
68187: PUSH
68188: LD_INT 0
68190: EQUAL
68191: IFFALSE 68244
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68193: LD_VAR 0 1
68197: PPUSH
68198: LD_VAR 0 7
68202: PUSH
68203: LD_INT 1
68205: ARRAY
68206: PPUSH
68207: LD_VAR 0 7
68211: PUSH
68212: LD_INT 2
68214: ARRAY
68215: PPUSH
68216: LD_VAR 0 3
68220: PPUSH
68221: CALL_OW 48
// result := IsPlaced ( unit ) ;
68225: LD_ADDR_VAR 0 4
68229: PUSH
68230: LD_VAR 0 1
68234: PPUSH
68235: CALL_OW 305
68239: ST_TO_ADDR
// exit ;
68240: POP
68241: POP
68242: GO 68248
// end ; end ;
68244: GO 68123
68246: POP
68247: POP
// end ;
68248: LD_VAR 0 4
68252: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68253: LD_INT 0
68255: PPUSH
68256: PPUSH
68257: PPUSH
// if not side or side > 8 then
68258: LD_VAR 0 1
68262: NOT
68263: PUSH
68264: LD_VAR 0 1
68268: PUSH
68269: LD_INT 8
68271: GREATER
68272: OR
68273: IFFALSE 68277
// exit ;
68275: GO 68464
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68277: LD_ADDR_VAR 0 4
68281: PUSH
68282: LD_INT 22
68284: PUSH
68285: LD_VAR 0 1
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 21
68296: PUSH
68297: LD_INT 3
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PPUSH
68308: CALL_OW 69
68312: ST_TO_ADDR
// if not tmp then
68313: LD_VAR 0 4
68317: NOT
68318: IFFALSE 68322
// exit ;
68320: GO 68464
// enable_addtolog := true ;
68322: LD_ADDR_OWVAR 81
68326: PUSH
68327: LD_INT 1
68329: ST_TO_ADDR
// AddToLog ( [ ) ;
68330: LD_STRING [
68332: PPUSH
68333: CALL_OW 561
// for i in tmp do
68337: LD_ADDR_VAR 0 3
68341: PUSH
68342: LD_VAR 0 4
68346: PUSH
68347: FOR_IN
68348: IFFALSE 68455
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68350: LD_STRING [
68352: PUSH
68353: LD_VAR 0 3
68357: PPUSH
68358: CALL_OW 266
68362: STR
68363: PUSH
68364: LD_STRING , 
68366: STR
68367: PUSH
68368: LD_VAR 0 3
68372: PPUSH
68373: CALL_OW 250
68377: STR
68378: PUSH
68379: LD_STRING , 
68381: STR
68382: PUSH
68383: LD_VAR 0 3
68387: PPUSH
68388: CALL_OW 251
68392: STR
68393: PUSH
68394: LD_STRING , 
68396: STR
68397: PUSH
68398: LD_VAR 0 3
68402: PPUSH
68403: CALL_OW 254
68407: STR
68408: PUSH
68409: LD_STRING , 
68411: STR
68412: PUSH
68413: LD_VAR 0 3
68417: PPUSH
68418: LD_INT 1
68420: PPUSH
68421: CALL_OW 268
68425: STR
68426: PUSH
68427: LD_STRING , 
68429: STR
68430: PUSH
68431: LD_VAR 0 3
68435: PPUSH
68436: LD_INT 2
68438: PPUSH
68439: CALL_OW 268
68443: STR
68444: PUSH
68445: LD_STRING ],
68447: STR
68448: PPUSH
68449: CALL_OW 561
// end ;
68453: GO 68347
68455: POP
68456: POP
// AddToLog ( ]; ) ;
68457: LD_STRING ];
68459: PPUSH
68460: CALL_OW 561
// end ;
68464: LD_VAR 0 2
68468: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68469: LD_INT 0
68471: PPUSH
68472: PPUSH
68473: PPUSH
68474: PPUSH
68475: PPUSH
// if not area or not rate or not max then
68476: LD_VAR 0 1
68480: NOT
68481: PUSH
68482: LD_VAR 0 2
68486: NOT
68487: OR
68488: PUSH
68489: LD_VAR 0 4
68493: NOT
68494: OR
68495: IFFALSE 68499
// exit ;
68497: GO 68691
// while 1 do
68499: LD_INT 1
68501: IFFALSE 68691
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68503: LD_ADDR_VAR 0 9
68507: PUSH
68508: LD_VAR 0 1
68512: PPUSH
68513: LD_INT 1
68515: PPUSH
68516: CALL_OW 287
68520: PUSH
68521: LD_INT 10
68523: MUL
68524: ST_TO_ADDR
// r := rate / 10 ;
68525: LD_ADDR_VAR 0 7
68529: PUSH
68530: LD_VAR 0 2
68534: PUSH
68535: LD_INT 10
68537: DIVREAL
68538: ST_TO_ADDR
// time := 1 1$00 ;
68539: LD_ADDR_VAR 0 8
68543: PUSH
68544: LD_INT 2100
68546: ST_TO_ADDR
// if amount < min then
68547: LD_VAR 0 9
68551: PUSH
68552: LD_VAR 0 3
68556: LESS
68557: IFFALSE 68575
// r := r * 2 else
68559: LD_ADDR_VAR 0 7
68563: PUSH
68564: LD_VAR 0 7
68568: PUSH
68569: LD_INT 2
68571: MUL
68572: ST_TO_ADDR
68573: GO 68601
// if amount > max then
68575: LD_VAR 0 9
68579: PUSH
68580: LD_VAR 0 4
68584: GREATER
68585: IFFALSE 68601
// r := r / 2 ;
68587: LD_ADDR_VAR 0 7
68591: PUSH
68592: LD_VAR 0 7
68596: PUSH
68597: LD_INT 2
68599: DIVREAL
68600: ST_TO_ADDR
// time := time / r ;
68601: LD_ADDR_VAR 0 8
68605: PUSH
68606: LD_VAR 0 8
68610: PUSH
68611: LD_VAR 0 7
68615: DIVREAL
68616: ST_TO_ADDR
// if time < 0 then
68617: LD_VAR 0 8
68621: PUSH
68622: LD_INT 0
68624: LESS
68625: IFFALSE 68642
// time := time * - 1 ;
68627: LD_ADDR_VAR 0 8
68631: PUSH
68632: LD_VAR 0 8
68636: PUSH
68637: LD_INT 1
68639: NEG
68640: MUL
68641: ST_TO_ADDR
// wait ( time ) ;
68642: LD_VAR 0 8
68646: PPUSH
68647: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68651: LD_INT 35
68653: PPUSH
68654: LD_INT 875
68656: PPUSH
68657: CALL_OW 12
68661: PPUSH
68662: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68666: LD_INT 1
68668: PPUSH
68669: LD_INT 5
68671: PPUSH
68672: CALL_OW 12
68676: PPUSH
68677: LD_VAR 0 1
68681: PPUSH
68682: LD_INT 1
68684: PPUSH
68685: CALL_OW 55
// end ;
68689: GO 68499
// end ;
68691: LD_VAR 0 5
68695: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68696: LD_INT 0
68698: PPUSH
68699: PPUSH
68700: PPUSH
68701: PPUSH
68702: PPUSH
68703: PPUSH
68704: PPUSH
68705: PPUSH
// if not turrets or not factories then
68706: LD_VAR 0 1
68710: NOT
68711: PUSH
68712: LD_VAR 0 2
68716: NOT
68717: OR
68718: IFFALSE 68722
// exit ;
68720: GO 69029
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68722: LD_ADDR_VAR 0 10
68726: PUSH
68727: LD_INT 5
68729: PUSH
68730: LD_INT 6
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 2
68739: PUSH
68740: LD_INT 4
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 3
68749: PUSH
68750: LD_INT 5
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 24
68764: PUSH
68765: LD_INT 25
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 23
68774: PUSH
68775: LD_INT 27
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 42
68788: PUSH
68789: LD_INT 43
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 44
68798: PUSH
68799: LD_INT 46
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 45
68808: PUSH
68809: LD_INT 47
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: LIST
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: LIST
68825: ST_TO_ADDR
// result := [ ] ;
68826: LD_ADDR_VAR 0 3
68830: PUSH
68831: EMPTY
68832: ST_TO_ADDR
// for i in turrets do
68833: LD_ADDR_VAR 0 4
68837: PUSH
68838: LD_VAR 0 1
68842: PUSH
68843: FOR_IN
68844: IFFALSE 69027
// begin nat := GetNation ( i ) ;
68846: LD_ADDR_VAR 0 7
68850: PUSH
68851: LD_VAR 0 4
68855: PPUSH
68856: CALL_OW 248
68860: ST_TO_ADDR
// weapon := 0 ;
68861: LD_ADDR_VAR 0 8
68865: PUSH
68866: LD_INT 0
68868: ST_TO_ADDR
// if not nat then
68869: LD_VAR 0 7
68873: NOT
68874: IFFALSE 68878
// continue ;
68876: GO 68843
// for j in list [ nat ] do
68878: LD_ADDR_VAR 0 5
68882: PUSH
68883: LD_VAR 0 10
68887: PUSH
68888: LD_VAR 0 7
68892: ARRAY
68893: PUSH
68894: FOR_IN
68895: IFFALSE 68936
// if GetBWeapon ( i ) = j [ 1 ] then
68897: LD_VAR 0 4
68901: PPUSH
68902: CALL_OW 269
68906: PUSH
68907: LD_VAR 0 5
68911: PUSH
68912: LD_INT 1
68914: ARRAY
68915: EQUAL
68916: IFFALSE 68934
// begin weapon := j [ 2 ] ;
68918: LD_ADDR_VAR 0 8
68922: PUSH
68923: LD_VAR 0 5
68927: PUSH
68928: LD_INT 2
68930: ARRAY
68931: ST_TO_ADDR
// break ;
68932: GO 68936
// end ;
68934: GO 68894
68936: POP
68937: POP
// if not weapon then
68938: LD_VAR 0 8
68942: NOT
68943: IFFALSE 68947
// continue ;
68945: GO 68843
// for k in factories do
68947: LD_ADDR_VAR 0 6
68951: PUSH
68952: LD_VAR 0 2
68956: PUSH
68957: FOR_IN
68958: IFFALSE 69023
// begin weapons := AvailableWeaponList ( k ) ;
68960: LD_ADDR_VAR 0 9
68964: PUSH
68965: LD_VAR 0 6
68969: PPUSH
68970: CALL_OW 478
68974: ST_TO_ADDR
// if not weapons then
68975: LD_VAR 0 9
68979: NOT
68980: IFFALSE 68984
// continue ;
68982: GO 68957
// if weapon in weapons then
68984: LD_VAR 0 8
68988: PUSH
68989: LD_VAR 0 9
68993: IN
68994: IFFALSE 69021
// begin result := [ i , weapon ] ;
68996: LD_ADDR_VAR 0 3
69000: PUSH
69001: LD_VAR 0 4
69005: PUSH
69006: LD_VAR 0 8
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: ST_TO_ADDR
// exit ;
69015: POP
69016: POP
69017: POP
69018: POP
69019: GO 69029
// end ; end ;
69021: GO 68957
69023: POP
69024: POP
// end ;
69025: GO 68843
69027: POP
69028: POP
// end ;
69029: LD_VAR 0 3
69033: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69034: LD_INT 0
69036: PPUSH
// if not side or side > 8 then
69037: LD_VAR 0 3
69041: NOT
69042: PUSH
69043: LD_VAR 0 3
69047: PUSH
69048: LD_INT 8
69050: GREATER
69051: OR
69052: IFFALSE 69056
// exit ;
69054: GO 69115
// if not range then
69056: LD_VAR 0 4
69060: NOT
69061: IFFALSE 69072
// range := - 12 ;
69063: LD_ADDR_VAR 0 4
69067: PUSH
69068: LD_INT 12
69070: NEG
69071: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69072: LD_VAR 0 1
69076: PPUSH
69077: LD_VAR 0 2
69081: PPUSH
69082: LD_VAR 0 3
69086: PPUSH
69087: LD_VAR 0 4
69091: PPUSH
69092: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69096: LD_VAR 0 1
69100: PPUSH
69101: LD_VAR 0 2
69105: PPUSH
69106: LD_VAR 0 3
69110: PPUSH
69111: CALL_OW 331
// end ;
69115: LD_VAR 0 5
69119: RET
// export function Video ( mode ) ; begin
69120: LD_INT 0
69122: PPUSH
// ingame_video = mode ;
69123: LD_ADDR_OWVAR 52
69127: PUSH
69128: LD_VAR 0 1
69132: ST_TO_ADDR
// interface_hidden = mode ;
69133: LD_ADDR_OWVAR 54
69137: PUSH
69138: LD_VAR 0 1
69142: ST_TO_ADDR
// end ;
69143: LD_VAR 0 2
69147: RET
// export function Join ( array , element ) ; begin
69148: LD_INT 0
69150: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69151: LD_ADDR_VAR 0 3
69155: PUSH
69156: LD_VAR 0 1
69160: PPUSH
69161: LD_VAR 0 1
69165: PUSH
69166: LD_INT 1
69168: PLUS
69169: PPUSH
69170: LD_VAR 0 2
69174: PPUSH
69175: CALL_OW 1
69179: ST_TO_ADDR
// end ;
69180: LD_VAR 0 3
69184: RET
// export function JoinUnion ( array , element ) ; begin
69185: LD_INT 0
69187: PPUSH
// result := array union element ;
69188: LD_ADDR_VAR 0 3
69192: PUSH
69193: LD_VAR 0 1
69197: PUSH
69198: LD_VAR 0 2
69202: UNION
69203: ST_TO_ADDR
// end ;
69204: LD_VAR 0 3
69208: RET
// export function GetBehemoths ( side ) ; begin
69209: LD_INT 0
69211: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69212: LD_ADDR_VAR 0 2
69216: PUSH
69217: LD_INT 22
69219: PUSH
69220: LD_VAR 0 1
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 31
69231: PUSH
69232: LD_INT 25
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PPUSH
69243: CALL_OW 69
69247: ST_TO_ADDR
// end ;
69248: LD_VAR 0 2
69252: RET
// export function Shuffle ( array ) ; var i , index ; begin
69253: LD_INT 0
69255: PPUSH
69256: PPUSH
69257: PPUSH
// result := [ ] ;
69258: LD_ADDR_VAR 0 2
69262: PUSH
69263: EMPTY
69264: ST_TO_ADDR
// if not array then
69265: LD_VAR 0 1
69269: NOT
69270: IFFALSE 69274
// exit ;
69272: GO 69373
// Randomize ;
69274: CALL_OW 10
// for i = array downto 1 do
69278: LD_ADDR_VAR 0 3
69282: PUSH
69283: DOUBLE
69284: LD_VAR 0 1
69288: INC
69289: ST_TO_ADDR
69290: LD_INT 1
69292: PUSH
69293: FOR_DOWNTO
69294: IFFALSE 69371
// begin index := rand ( 1 , array ) ;
69296: LD_ADDR_VAR 0 4
69300: PUSH
69301: LD_INT 1
69303: PPUSH
69304: LD_VAR 0 1
69308: PPUSH
69309: CALL_OW 12
69313: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69314: LD_ADDR_VAR 0 2
69318: PUSH
69319: LD_VAR 0 2
69323: PPUSH
69324: LD_VAR 0 2
69328: PUSH
69329: LD_INT 1
69331: PLUS
69332: PPUSH
69333: LD_VAR 0 1
69337: PUSH
69338: LD_VAR 0 4
69342: ARRAY
69343: PPUSH
69344: CALL_OW 2
69348: ST_TO_ADDR
// array := Delete ( array , index ) ;
69349: LD_ADDR_VAR 0 1
69353: PUSH
69354: LD_VAR 0 1
69358: PPUSH
69359: LD_VAR 0 4
69363: PPUSH
69364: CALL_OW 3
69368: ST_TO_ADDR
// end ;
69369: GO 69293
69371: POP
69372: POP
// end ;
69373: LD_VAR 0 2
69377: RET
// export function GetBaseMaterials ( base ) ; begin
69378: LD_INT 0
69380: PPUSH
// result := [ 0 , 0 , 0 ] ;
69381: LD_ADDR_VAR 0 2
69385: PUSH
69386: LD_INT 0
69388: PUSH
69389: LD_INT 0
69391: PUSH
69392: LD_INT 0
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: LIST
69399: ST_TO_ADDR
// if not base then
69400: LD_VAR 0 1
69404: NOT
69405: IFFALSE 69409
// exit ;
69407: GO 69458
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69409: LD_ADDR_VAR 0 2
69413: PUSH
69414: LD_VAR 0 1
69418: PPUSH
69419: LD_INT 1
69421: PPUSH
69422: CALL_OW 275
69426: PUSH
69427: LD_VAR 0 1
69431: PPUSH
69432: LD_INT 2
69434: PPUSH
69435: CALL_OW 275
69439: PUSH
69440: LD_VAR 0 1
69444: PPUSH
69445: LD_INT 3
69447: PPUSH
69448: CALL_OW 275
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: LIST
69457: ST_TO_ADDR
// end ;
69458: LD_VAR 0 2
69462: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69463: LD_INT 0
69465: PPUSH
69466: PPUSH
// result := array ;
69467: LD_ADDR_VAR 0 3
69471: PUSH
69472: LD_VAR 0 1
69476: ST_TO_ADDR
// if size > 0 then
69477: LD_VAR 0 2
69481: PUSH
69482: LD_INT 0
69484: GREATER
69485: IFFALSE 69531
// for i := array downto size do
69487: LD_ADDR_VAR 0 4
69491: PUSH
69492: DOUBLE
69493: LD_VAR 0 1
69497: INC
69498: ST_TO_ADDR
69499: LD_VAR 0 2
69503: PUSH
69504: FOR_DOWNTO
69505: IFFALSE 69529
// result := Delete ( result , result ) ;
69507: LD_ADDR_VAR 0 3
69511: PUSH
69512: LD_VAR 0 3
69516: PPUSH
69517: LD_VAR 0 3
69521: PPUSH
69522: CALL_OW 3
69526: ST_TO_ADDR
69527: GO 69504
69529: POP
69530: POP
// end ;
69531: LD_VAR 0 3
69535: RET
// export function ComExit ( unit ) ; var tmp ; begin
69536: LD_INT 0
69538: PPUSH
69539: PPUSH
// if not IsInUnit ( unit ) then
69540: LD_VAR 0 1
69544: PPUSH
69545: CALL_OW 310
69549: NOT
69550: IFFALSE 69554
// exit ;
69552: GO 69614
// tmp := IsInUnit ( unit ) ;
69554: LD_ADDR_VAR 0 3
69558: PUSH
69559: LD_VAR 0 1
69563: PPUSH
69564: CALL_OW 310
69568: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69569: LD_VAR 0 3
69573: PPUSH
69574: CALL_OW 247
69578: PUSH
69579: LD_INT 2
69581: EQUAL
69582: IFFALSE 69595
// ComExitVehicle ( unit ) else
69584: LD_VAR 0 1
69588: PPUSH
69589: CALL_OW 121
69593: GO 69604
// ComExitBuilding ( unit ) ;
69595: LD_VAR 0 1
69599: PPUSH
69600: CALL_OW 122
// result := tmp ;
69604: LD_ADDR_VAR 0 2
69608: PUSH
69609: LD_VAR 0 3
69613: ST_TO_ADDR
// end ;
69614: LD_VAR 0 2
69618: RET
// export function ResetHc ; begin
69619: LD_INT 0
69621: PPUSH
// InitHc ;
69622: CALL_OW 19
// hc_importance := 0 ;
69626: LD_ADDR_OWVAR 32
69630: PUSH
69631: LD_INT 0
69633: ST_TO_ADDR
// end ;
69634: LD_VAR 0 1
69638: RET
