// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10090 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10220 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11627 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13856 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 2000 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 2000
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8309 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6358 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6358 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6358 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6358 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6358 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6209 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6209 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8082 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6209 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6209 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8082 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10608 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5233
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6118 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10534 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5451 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5451 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9125 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 73589 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6358 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6499 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6574 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8481 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6358 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6913 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7521 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7812 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6209 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6209 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6209 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7960 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7960 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8082 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7960 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8082 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8082 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6118 0 1
3087: PPUSH
3088: CALL 5810 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6118 0 1
3108: PPUSH
3109: CALL 5810 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11332 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5451 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3480
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3478
// if GetLives ( ru_attack_list [ i ] ) >= 250 then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: IFFALSE 3476
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3417: LD_EXP 10
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_INT 81
3430: PUSH
3431: LD_EXP 10
3435: PUSH
3436: LD_VAR 0 1
3440: ARRAY
3441: PPUSH
3442: CALL_OW 255
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: PPUSH
3456: LD_EXP 10
3460: PUSH
3461: LD_VAR 0 1
3465: ARRAY
3466: PPUSH
3467: CALL_OW 74
3471: PPUSH
3472: CALL_OW 115
3476: GO 3393
3478: POP
3479: POP
// end ; if GetBehemoth ( 3 ) then
3480: LD_INT 3
3482: PPUSH
3483: CALL 11332 0 1
3487: IFFALSE 3859
// begin if ru_mech >= 4 then
3489: LD_EXP 22
3493: PUSH
3494: LD_INT 4
3496: GREATEREQUAL
3497: IFFALSE 3548
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3499: LD_ADDR_EXP 15
3503: PUSH
3504: LD_EXP 22
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: PUSH
3513: LD_EXP 22
3517: PUSH
3518: LD_INT 2
3520: ARRAY
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 3
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 4
3538: ARRAY
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
3546: GO 3558
// ru_behemoth_mechanic := ru_mech ;
3548: LD_ADDR_EXP 15
3552: PUSH
3553: LD_EXP 22
3557: ST_TO_ADDR
// for i = 1 to ru_mech do
3558: LD_ADDR_VAR 0 1
3562: PUSH
3563: DOUBLE
3564: LD_INT 1
3566: DEC
3567: ST_TO_ADDR
3568: LD_EXP 22
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3628
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3576: LD_EXP 22
3580: PUSH
3581: LD_VAR 0 1
3585: ARRAY
3586: PPUSH
3587: CALL_OW 310
3591: PUSH
3592: LD_EXP 22
3596: PUSH
3597: LD_VAR 0 1
3601: ARRAY
3602: PUSH
3603: LD_EXP 15
3607: IN
3608: AND
3609: IFFALSE 3626
// ComExitBuilding ( ru_mech [ i ] ) ;
3611: LD_EXP 22
3615: PUSH
3616: LD_VAR 0 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 122
3626: GO 3573
3628: POP
3629: POP
// if UnitsInside ( ru_fac ) = 0 then
3630: LD_INT 14
3632: PPUSH
3633: CALL_OW 313
3637: PUSH
3638: LD_INT 0
3640: EQUAL
3641: IFFALSE 3708
// begin InitHc_All ;
3643: CALL_OW 584
// for i := 1 to 5 do
3647: LD_ADDR_VAR 0 1
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 5
3659: PUSH
3660: FOR_TO
3661: IFFALSE 3706
// begin uc_side := 3 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 3
3670: ST_TO_ADDR
// uc_nation := 3 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 3
3678: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3679: LD_INT 0
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 7
3687: PPUSH
3688: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3692: CALL_OW 44
3696: PPUSH
3697: LD_INT 14
3699: PPUSH
3700: CALL_OW 52
// end ;
3704: GO 3660
3706: POP
3707: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3708: LD_INT 12
3710: PPUSH
3711: LD_INT 22
3713: PUSH
3714: LD_INT 1
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 21
3723: PUSH
3724: LD_INT 3
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 70
3739: PUSH
3740: LD_INT 0
3742: GREATER
3743: IFFALSE 3803
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3745: LD_INT 3
3747: PPUSH
3748: CALL 11332 0 1
3752: PUSH
3753: LD_INT 1
3755: ARRAY
3756: PPUSH
3757: LD_INT 21
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 34
3769: PUSH
3770: LD_INT 49
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PPUSH
3786: LD_EXP 15
3790: PPUSH
3791: LD_INT 97
3793: PPUSH
3794: LD_INT 9
3796: PPUSH
3797: CALL 10829 0 5
3801: GO 3859
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3803: LD_INT 3
3805: PPUSH
3806: CALL 11332 0 1
3810: PUSH
3811: LD_INT 1
3813: ARRAY
3814: PPUSH
3815: LD_INT 21
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 49
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: PPUSH
3839: CALL_OW 69
3843: PPUSH
3844: LD_EXP 15
3848: PPUSH
3849: LD_INT 153
3851: PPUSH
3852: LD_INT 102
3854: PPUSH
3855: CALL 10829 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3859: LD_EXP 24
3863: PUSH
3864: LD_INT 0
3866: EQUAL
3867: PUSH
3868: LD_INT 44
3870: PPUSH
3871: LD_INT 3
3873: PPUSH
3874: CALL_OW 321
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3894
// ComChangeClassToBazooker ( ru_sold ) ;
3885: LD_EXP 20
3889: PPUSH
3890: CALL 9766 0 1
// if ru_bazz then
3894: LD_EXP 24
3898: IFFALSE 3912
// IntBazooka ( ru_bazz , 1 ) ;
3900: LD_EXP 24
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL 9485 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3912: LD_INT 67
3914: PPUSH
3915: LD_INT 39
3917: PPUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL_OW 440
3925: PUSH
3926: LD_INT 0
3928: EQUAL
3929: PUSH
3930: LD_INT 20
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: CALL_OW 321
3940: PUSH
3941: LD_INT 2
3943: EQUAL
3944: AND
3945: IFFALSE 3966
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3947: LD_EXP 23
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: PPUSH
3956: LD_INT 67
3958: PPUSH
3959: LD_INT 39
3961: PPUSH
3962: CALL 9064 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3966: LD_INT 89
3968: PPUSH
3969: LD_INT 66
3971: PPUSH
3972: LD_INT 3
3974: PPUSH
3975: CALL_OW 440
3979: PUSH
3980: LD_INT 0
3982: EQUAL
3983: IFFALSE 4004
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
3985: LD_EXP 23
3989: PUSH
3990: LD_INT 1
3992: ARRAY
3993: PPUSH
3994: LD_INT 87
3996: PPUSH
3997: LD_INT 60
3999: PPUSH
4000: CALL 9064 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4004: LD_INT 104
4006: PPUSH
4007: LD_INT 94
4009: PPUSH
4010: LD_INT 3
4012: PPUSH
4013: CALL_OW 440
4017: PUSH
4018: LD_INT 0
4020: EQUAL
4021: PUSH
4022: LD_INT 20
4024: PPUSH
4025: LD_INT 3
4027: PPUSH
4028: CALL_OW 321
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: AND
4037: IFFALSE 4058
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4039: LD_EXP 23
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: PPUSH
4048: LD_INT 104
4050: PPUSH
4051: LD_INT 94
4053: PPUSH
4054: CALL 9064 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4058: LD_INT 3
4060: PPUSH
4061: LD_INT 24
4063: PPUSH
4064: LD_INT 53
4066: PPUSH
4067: CALL 7960 0 3
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: PUSH
4076: LD_EXP 18
4080: AND
4081: IFFALSE 4222
// begin need_buldozer := false ;
4083: LD_ADDR_EXP 18
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4091: LD_INT 3
4093: PPUSH
4094: LD_INT 24
4096: PPUSH
4097: LD_INT 53
4099: PPUSH
4100: CALL 7960 0 3
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PPUSH
4109: LD_INT 67
4111: PPUSH
4112: LD_INT 39
4114: PPUSH
4115: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4119: LD_INT 3
4121: PPUSH
4122: LD_INT 24
4124: PPUSH
4125: LD_INT 53
4127: PPUSH
4128: CALL 7960 0 3
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PPUSH
4137: LD_INT 71
4139: PPUSH
4140: LD_INT 10
4142: PPUSH
4143: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4147: LD_INT 3
4149: PPUSH
4150: LD_INT 24
4152: PPUSH
4153: LD_INT 53
4155: PPUSH
4156: CALL 7960 0 3
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: PPUSH
4165: LD_INT 15
4167: PPUSH
4168: CALL 5551 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 24
4177: PPUSH
4178: LD_INT 53
4180: PPUSH
4181: CALL 7960 0 3
4185: PUSH
4186: LD_INT 1
4188: ARRAY
4189: PPUSH
4190: LD_INT 350
4192: PPUSH
4193: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 24
4202: PPUSH
4203: LD_INT 53
4205: PPUSH
4206: CALL 7960 0 3
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PPUSH
4215: LD_INT 14
4217: PPUSH
4218: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4222: LD_INT 67
4224: PPUSH
4225: LD_INT 39
4227: PPUSH
4228: LD_INT 3
4230: PPUSH
4231: CALL_OW 440
4235: PUSH
4236: LD_INT 67
4238: PPUSH
4239: LD_INT 39
4241: PPUSH
4242: CALL_OW 428
4246: PUSH
4247: LD_INT 0
4249: EQUAL
4250: AND
4251: PUSH
4252: LD_INT 79
4254: PPUSH
4255: LD_INT 45
4257: PPUSH
4258: CALL_OW 428
4262: PPUSH
4263: CALL_OW 266
4267: PUSH
4268: LD_INT 0
4270: EQUAL
4271: AND
4272: PUSH
4273: LD_INT 1
4275: PPUSH
4276: LD_INT 79
4278: PPUSH
4279: LD_INT 45
4281: PPUSH
4282: CALL 5451 0 3
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: AND
4291: IFFALSE 4394
// begin for i = 1 to ru_eng do
4293: LD_ADDR_VAR 0 1
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_EXP 21
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4392
// if IsInUnit ( ru_eng [ i ] ) then
4311: LD_EXP 21
4315: PUSH
4316: LD_VAR 0 1
4320: ARRAY
4321: PPUSH
4322: CALL_OW 310
4326: IFFALSE 4345
// ComExitBuilding ( ru_eng [ i ] ) else
4328: LD_EXP 21
4332: PUSH
4333: LD_VAR 0 1
4337: ARRAY
4338: PPUSH
4339: CALL_OW 122
4343: GO 4390
// if not HasTask ( ru_eng [ i ] ) then
4345: LD_EXP 21
4349: PUSH
4350: LD_VAR 0 1
4354: ARRAY
4355: PPUSH
4356: CALL_OW 314
4360: NOT
4361: IFFALSE 4390
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: LD_INT 30
4376: PPUSH
4377: LD_INT 67
4379: PPUSH
4380: LD_INT 39
4382: PPUSH
4383: LD_INT 3
4385: PPUSH
4386: CALL_OW 145
4390: GO 4308
4392: POP
4393: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4394: LD_INT 1
4396: PPUSH
4397: LD_INT 79
4399: PPUSH
4400: LD_INT 45
4402: PPUSH
4403: CALL 5451 0 3
4407: PUSH
4408: LD_INT 0
4410: EQUAL
4411: IFFALSE 4607
// begin if HexInfo ( 79 , 45 ) = 0 then
4413: LD_INT 79
4415: PPUSH
4416: LD_INT 45
4418: PPUSH
4419: CALL_OW 428
4423: PUSH
4424: LD_INT 0
4426: EQUAL
4427: IFFALSE 4449
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4429: LD_EXP 21
4433: PPUSH
4434: LD_INT 79
4436: PPUSH
4437: LD_INT 45
4439: PPUSH
4440: LD_INT 3
4442: PPUSH
4443: CALL 6975 0 4
4447: GO 4607
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4449: LD_INT 89
4451: PPUSH
4452: LD_INT 66
4454: PPUSH
4455: CALL_OW 428
4459: PUSH
4460: LD_INT 0
4462: EQUAL
4463: PUSH
4464: LD_INT 89
4466: PPUSH
4467: LD_INT 66
4469: PPUSH
4470: LD_INT 3
4472: PPUSH
4473: CALL_OW 440
4477: AND
4478: IFFALSE 4607
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4480: LD_INT 79
4482: PPUSH
4483: LD_INT 45
4485: PPUSH
4486: CALL_OW 428
4490: PPUSH
4491: CALL_OW 274
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 100
4501: PPUSH
4502: CALL_OW 277
// for i = 1 to ru_eng do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_EXP 21
4520: PUSH
4521: FOR_TO
4522: IFFALSE 4605
// if IsInUnit ( ru_eng [ i ] ) then
4524: LD_EXP 21
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 310
4539: IFFALSE 4558
// ComExitBuilding ( ru_eng [ i ] ) else
4541: LD_EXP 21
4545: PUSH
4546: LD_VAR 0 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 122
4556: GO 4603
// if not HasTask ( ru_eng [ i ] ) then
4558: LD_EXP 21
4562: PUSH
4563: LD_VAR 0 1
4567: ARRAY
4568: PPUSH
4569: CALL_OW 314
4573: NOT
4574: IFFALSE 4603
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: LD_INT 29
4589: PPUSH
4590: LD_INT 89
4592: PPUSH
4593: LD_INT 66
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: CALL_OW 145
4603: GO 4521
4605: POP
4606: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4607: LD_INT 3
4609: PPUSH
4610: LD_INT 29
4612: PPUSH
4613: CALL 6209 0 2
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: PUSH
4622: LD_INT 1
4624: PPUSH
4625: LD_INT 36
4627: PPUSH
4628: LD_INT 6
4630: PPUSH
4631: CALL 5451 0 3
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: AND
4640: PUSH
4641: LD_INT 3
4643: PPUSH
4644: CALL 6118 0 1
4648: PPUSH
4649: LD_INT 29
4651: PPUSH
4652: CALL 5694 0 2
4656: AND
4657: IFFALSE 4760
// begin for i = 1 to ru_eng do
4659: LD_ADDR_VAR 0 1
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_EXP 21
4673: PUSH
4674: FOR_TO
4675: IFFALSE 4758
// begin if IsInUnit ( ru_eng [ i ] ) then
4677: LD_EXP 21
4681: PUSH
4682: LD_VAR 0 1
4686: ARRAY
4687: PPUSH
4688: CALL_OW 310
4692: IFFALSE 4711
// ComExitBuilding ( ru_eng [ i ] ) else
4694: LD_EXP 21
4698: PUSH
4699: LD_VAR 0 1
4703: ARRAY
4704: PPUSH
4705: CALL_OW 122
4709: GO 4756
// if not HasTask ( ru_eng [ i ] ) then
4711: LD_EXP 21
4715: PUSH
4716: LD_VAR 0 1
4720: ARRAY
4721: PPUSH
4722: CALL_OW 314
4726: NOT
4727: IFFALSE 4756
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: LD_INT 29
4742: PPUSH
4743: LD_INT 33
4745: PPUSH
4746: LD_INT 4
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL_OW 205
// end ; end ;
4756: GO 4674
4758: POP
4759: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4760: LD_EXP 21
4764: PUSH
4765: LD_INT 79
4767: PPUSH
4768: LD_INT 45
4770: PPUSH
4771: CALL_OW 428
4775: PUSH
4776: LD_INT 0
4778: GREATER
4779: AND
4780: PUSH
4781: LD_INT 79
4783: PPUSH
4784: LD_INT 45
4786: PPUSH
4787: CALL_OW 428
4791: PPUSH
4792: CALL_OW 266
4796: PUSH
4797: LD_INT 0
4799: EQUAL
4800: AND
4801: IFFALSE 4961
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4803: LD_INT 79
4805: PPUSH
4806: LD_INT 45
4808: PPUSH
4809: CALL_OW 428
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: LD_INT 3
4821: EQUAL
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 79
4828: PPUSH
4829: LD_INT 45
4831: PPUSH
4832: CALL 5451 0 3
4836: PUSH
4837: LD_INT 0
4839: EQUAL
4840: AND
4841: PUSH
4842: LD_INT 79
4844: PPUSH
4845: LD_INT 45
4847: PPUSH
4848: CALL_OW 428
4852: PPUSH
4853: CALL_OW 274
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: CALL_OW 275
4865: PUSH
4866: LD_INT 10
4868: GREATEREQUAL
4869: AND
4870: IFFALSE 4961
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4872: LD_EXP 21
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: CALL_OW 310
4885: IFFALSE 4902
// ComExitBuilding ( ru_eng [ 1 ] ) else
4887: LD_EXP 21
4891: PUSH
4892: LD_INT 1
4894: ARRAY
4895: PPUSH
4896: CALL_OW 122
4900: GO 4961
// if not HasTask ( ru_eng [ 1 ] ) then
4902: LD_EXP 21
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: CALL_OW 314
4915: NOT
4916: IFFALSE 4961
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4918: LD_EXP 21
4922: PUSH
4923: LD_INT 1
4925: ARRAY
4926: PPUSH
4927: LD_INT 79
4929: PPUSH
4930: LD_INT 45
4932: PPUSH
4933: CALL_OW 428
4937: PPUSH
4938: LD_INT 3
4940: PPUSH
4941: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4945: LD_EXP 21
4949: PUSH
4950: LD_INT 1
4952: ARRAY
4953: PPUSH
4954: LD_INT 2
4956: PPUSH
4957: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4961: LD_EXP 21
4965: PUSH
4966: LD_INT 2
4968: GREATER
4969: PUSH
4970: LD_INT 79
4972: PPUSH
4973: LD_INT 45
4975: PPUSH
4976: CALL_OW 428
4980: PUSH
4981: LD_INT 0
4983: GREATER
4984: AND
4985: PUSH
4986: LD_INT 79
4988: PPUSH
4989: LD_INT 45
4991: PPUSH
4992: CALL_OW 428
4996: PPUSH
4997: CALL_OW 266
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: IFFALSE 5166
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5008: LD_INT 79
5010: PPUSH
5011: LD_INT 45
5013: PPUSH
5014: CALL_OW 428
5018: PPUSH
5019: CALL_OW 255
5023: PUSH
5024: LD_INT 3
5026: EQUAL
5027: PUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 79
5033: PPUSH
5034: LD_INT 45
5036: PPUSH
5037: CALL 5451 0 3
5041: PUSH
5042: LD_INT 0
5044: EQUAL
5045: AND
5046: PUSH
5047: LD_INT 79
5049: PPUSH
5050: LD_INT 45
5052: PPUSH
5053: CALL_OW 428
5057: PPUSH
5058: CALL_OW 274
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 275
5070: PUSH
5071: LD_INT 20
5073: GREATER
5074: AND
5075: IFFALSE 5166
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5077: LD_EXP 21
5081: PUSH
5082: LD_INT 2
5084: ARRAY
5085: PPUSH
5086: CALL_OW 310
5090: IFFALSE 5107
// ComExitBuilding ( ru_eng [ 2 ] ) else
5092: LD_EXP 21
5096: PUSH
5097: LD_INT 2
5099: ARRAY
5100: PPUSH
5101: CALL_OW 122
5105: GO 5166
// if not HasTask ( ru_eng [ 2 ] ) then
5107: LD_EXP 21
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 314
5120: NOT
5121: IFFALSE 5166
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5123: LD_EXP 21
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_INT 79
5134: PPUSH
5135: LD_INT 45
5137: PPUSH
5138: CALL_OW 428
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5150: LD_EXP 21
5154: PUSH
5155: LD_INT 2
5157: ARRAY
5158: PPUSH
5159: LD_INT 2
5161: PPUSH
5162: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5166: LD_INT 1
5168: PPUSH
5169: LD_INT 59
5171: PPUSH
5172: LD_INT 60
5174: PPUSH
5175: CALL 5451 0 3
5179: PUSH
5180: LD_INT 0
5182: EQUAL
5183: PUSH
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 67
5189: PPUSH
5190: LD_INT 76
5192: PPUSH
5193: CALL 5451 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: AND
5202: PUSH
5203: LD_INT 1
5205: PPUSH
5206: LD_INT 79
5208: PPUSH
5209: LD_INT 100
5211: PPUSH
5212: CALL 5451 0 3
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5233
// CollectCrates ( 3 , west_crates ) ;
5223: LD_INT 3
5225: PPUSH
5226: LD_INT 13
5228: PPUSH
5229: CALL 11376 0 2
// end ;
5233: PPOPN 10
5235: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5236: LD_OWVAR 1
5240: PUSH
5241: LD_INT 111300
5243: LESSEQUAL
5244: PUSH
5245: LD_EXP 30
5249: NOT
5250: OR
5251: IFFALSE 5448
5253: GO 5255
5255: DISABLE
5256: LD_INT 0
5258: PPUSH
// begin enable ;
5259: ENABLE
// uc_nation := 3 ;
5260: LD_ADDR_OWVAR 21
5264: PUSH
5265: LD_INT 3
5267: ST_TO_ADDR
// uc_side := 3 ;
5268: LD_ADDR_OWVAR 20
5272: PUSH
5273: LD_INT 3
5275: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5276: LD_ADDR_OWVAR 37
5280: PUSH
5281: LD_INT 22
5283: ST_TO_ADDR
// vc_engine := engine_siberite ;
5284: LD_ADDR_OWVAR 39
5288: PUSH
5289: LD_INT 3
5291: ST_TO_ADDR
// vc_control := control_computer ;
5292: LD_ADDR_OWVAR 38
5296: PUSH
5297: LD_INT 3
5299: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5300: LD_ADDR_OWVAR 40
5304: PUSH
5305: LD_INT 51
5307: ST_TO_ADDR
// veh := CreateVehicle ;
5308: LD_ADDR_VAR 0 1
5312: PUSH
5313: CALL_OW 45
5317: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5318: LD_VAR 0 1
5322: PPUSH
5323: LD_INT 4
5325: PPUSH
5326: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5330: LD_VAR 0 1
5334: PPUSH
5335: LD_INT 10
5337: PPUSH
5338: LD_INT 0
5340: PPUSH
5341: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_INT 1
5352: PUSH
5353: LD_INT 2
5355: PUSH
5356: LD_INT 3
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 4
5373: PPUSH
5374: CALL_OW 12
5378: ARRAY
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5387: LD_VAR 0 1
5391: PPUSH
5392: LD_INT 2
5394: PPUSH
5395: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5399: LD_VAR 0 1
5403: PPUSH
5404: LD_INT 10
5406: PPUSH
5407: CALL_OW 173
// Wait ( 0 0$10 ) ;
5411: LD_INT 350
5413: PPUSH
5414: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5418: LD_INT 35
5420: PPUSH
5421: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5425: LD_VAR 0 1
5429: PPUSH
5430: LD_INT 10
5432: PPUSH
5433: CALL_OW 308
5437: IFFALSE 5418
// RemoveUnit ( veh ) ;
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 64
// end ; end_of_file
5448: PPOPN 1
5450: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5451: LD_INT 0
5453: PPUSH
5454: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5455: LD_ADDR_VAR 0 5
5459: PUSH
5460: LD_INT 22
5462: PUSH
5463: LD_VAR 0 1
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 69
5476: PPUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_VAR 0 3
5486: PPUSH
5487: CALL_OW 73
5491: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5492: LD_ADDR_VAR 0 4
5496: PUSH
5497: LD_VAR 0 5
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: LD_VAR 0 3
5511: PPUSH
5512: CALL_OW 297
5516: PUSH
5517: LD_INT 15
5519: LESS
5520: PUSH
5521: LD_INT 2
5523: PPUSH
5524: LD_INT 22
5526: PUSH
5527: LD_VAR 0 1
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 70
5540: PUSH
5541: LD_INT 0
5543: GREATER
5544: OR
5545: ST_TO_ADDR
// end ;
5546: LD_VAR 0 4
5550: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5551: LD_INT 0
5553: PPUSH
5554: PPUSH
// area = ListEnvironmentArea ( area ) ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 353
5569: ST_TO_ADDR
// if bulldozer > 0 then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_INT 0
5577: GREATER
5578: IFFALSE 5689
// for i = 1 to area do
5580: LD_ADDR_VAR 0 4
5584: PUSH
5585: DOUBLE
5586: LD_INT 1
5588: DEC
5589: ST_TO_ADDR
5590: LD_VAR 0 2
5594: PUSH
5595: FOR_TO
5596: IFFALSE 5687
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5598: LD_VAR 0 2
5602: PUSH
5603: LD_VAR 0 4
5607: ARRAY
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 2
5617: PUSH
5618: LD_VAR 0 4
5622: ARRAY
5623: PUSH
5624: LD_INT 2
5626: ARRAY
5627: PPUSH
5628: CALL_OW 351
5632: IFFALSE 5685
// if not HasTask ( bulldozer ) then
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 314
5643: NOT
5644: IFFALSE 5685
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5646: LD_VAR 0 1
5650: PPUSH
5651: LD_VAR 0 2
5655: PUSH
5656: LD_VAR 0 4
5660: ARRAY
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: LD_VAR 0 2
5670: PUSH
5671: LD_VAR 0 4
5675: ARRAY
5676: PUSH
5677: LD_INT 2
5679: ARRAY
5680: PPUSH
5681: CALL_OW 171
5685: GO 5595
5687: POP
5688: POP
// end ;
5689: LD_VAR 0 3
5693: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
5698: PPUSH
// pom := GetBase ( bdepot ) ;
5699: LD_ADDR_VAR 0 4
5703: PUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 274
5713: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5714: LD_ADDR_VAR 0 5
5718: PUSH
5719: LD_VAR 0 2
5723: PPUSH
5724: LD_VAR 0 1
5728: PPUSH
5729: CALL_OW 248
5733: PPUSH
5734: CALL_OW 450
5738: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5739: LD_VAR 0 4
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 275
5751: PUSH
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: GREATEREQUAL
5761: PUSH
5762: LD_VAR 0 4
5766: PPUSH
5767: LD_INT 3
5769: PPUSH
5770: CALL_OW 275
5774: PUSH
5775: LD_VAR 0 5
5779: PUSH
5780: LD_INT 3
5782: ARRAY
5783: GREATEREQUAL
5784: AND
5785: IFFALSE 5797
// result := true else
5787: LD_ADDR_VAR 0 3
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
5795: GO 5805
// result := false ;
5797: LD_ADDR_VAR 0 3
5801: PUSH
5802: LD_INT 0
5804: ST_TO_ADDR
// end ;
5805: LD_VAR 0 3
5809: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5810: LD_INT 0
5812: PPUSH
5813: PPUSH
5814: PPUSH
// pom := GetBase ( bdepot ) ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 274
5829: ST_TO_ADDR
// sor := [ ] ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: EMPTY
5836: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5837: LD_ADDR_VAR 0 4
5841: PUSH
5842: LD_VAR 0 4
5846: PUSH
5847: LD_VAR 0 3
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 275
5859: ADD
5860: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_VAR 0 4
5870: PUSH
5871: LD_VAR 0 3
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: CALL_OW 275
5883: ADD
5884: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_VAR 0 4
5894: PUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: CALL_OW 275
5907: ADD
5908: ST_TO_ADDR
// result := sor ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_VAR 0 4
5918: ST_TO_ADDR
// end ;
5919: LD_VAR 0 2
5923: RET
// export function Hex ( x , y ) ; begin
5924: LD_INT 0
5926: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5927: LD_VAR 0 1
5931: PPUSH
5932: LD_VAR 0 2
5936: PPUSH
5937: CALL_OW 488
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: CALL_OW 428
5956: PUSH
5957: LD_INT 0
5959: EQUAL
5960: AND
5961: IFFALSE 5973
// result := true else
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_INT 1
5970: ST_TO_ADDR
5971: GO 5981
// result := false ;
5973: LD_ADDR_VAR 0 3
5977: PUSH
5978: LD_INT 0
5980: ST_TO_ADDR
// end ;
5981: LD_VAR 0 3
5985: RET
// export function NeedBuilding ( side , btype ) ; begin
5986: LD_INT 0
5988: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
5989: LD_INT 22
5991: PUSH
5992: LD_VAR 0 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_VAR 0 2
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 3
6015: PUSH
6016: LD_INT 57
6018: PUSH
6019: EMPTY
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: PPUSH
6031: CALL_OW 69
6035: PUSH
6036: LD_INT 0
6038: EQUAL
6039: IFFALSE 6051
// result := true else
6041: LD_ADDR_VAR 0 3
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
6049: GO 6059
// result := false ;
6051: LD_ADDR_VAR 0 3
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// end ;
6059: LD_VAR 0 3
6063: RET
// export function NeedBase ( side ) ; begin
6064: LD_INT 0
6066: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6067: LD_VAR 0 1
6071: PPUSH
6072: LD_INT 0
6074: PPUSH
6075: CALL 5986 0 2
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: CALL 5986 0 2
6092: AND
6093: IFFALSE 6105
// result := true else
6095: LD_ADDR_VAR 0 2
6099: PUSH
6100: LD_INT 1
6102: ST_TO_ADDR
6103: GO 6113
// result := false ;
6105: LD_ADDR_VAR 0 2
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// end ;
6113: LD_VAR 0 2
6117: RET
// export function MyBase ( side ) ; begin
6118: LD_INT 0
6120: PPUSH
// if not NeedBase ( side ) then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL 6064 0 1
6130: NOT
6131: IFFALSE 6196
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6133: LD_ADDR_VAR 0 2
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 2
6152: PUSH
6153: LD_INT 30
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 1
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: PPUSH
6185: CALL_OW 69
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: ST_TO_ADDR
6194: GO 6204
// result := false ;
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 2
6208: RET
// export function GetBuilding ( side , btype ) ; begin
6209: LD_INT 0
6211: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6212: LD_INT 22
6214: PUSH
6215: LD_VAR 0 1
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 30
6226: PUSH
6227: LD_VAR 0 2
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: LD_INT 0
6247: GREATER
6248: IFFALSE 6290
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6250: LD_ADDR_VAR 0 3
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: LD_VAR 0 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 30
6269: PUSH
6270: LD_VAR 0 2
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PPUSH
6283: CALL_OW 69
6287: ST_TO_ADDR
6288: GO 6298
// result := false ;
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: LD_INT 0
6297: ST_TO_ADDR
// end ;
6298: LD_VAR 0 3
6302: RET
// export function GetCrates ( side ) ; begin
6303: LD_INT 0
6305: PPUSH
// result := 0 ;
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
// if MyBase ( side ) then
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL 6118 0 1
6323: IFFALSE 6353
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6325: LD_ADDR_VAR 0 2
6329: PUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL 6118 0 1
6339: PPUSH
6340: CALL_OW 274
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 275
6352: ST_TO_ADDR
// end ;
6353: LD_VAR 0 2
6357: RET
// export function GetLabs ( side ) ; begin
6358: LD_INT 0
6360: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 30
6383: PUSH
6384: LD_INT 6
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 8
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 30
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: PPUSH
6424: CALL_OW 69
6428: ST_TO_ADDR
// end ;
6429: LD_VAR 0 2
6433: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
6438: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6439: LD_ADDR_VAR 0 3
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: LD_INT 1
6451: PPUSH
6452: CALL_OW 268
6456: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6457: LD_ADDR_VAR 0 4
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 2
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: LD_VAR 0 3
6484: PUSH
6485: LD_VAR 0 4
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: ST_TO_ADDR
// end ;
6494: LD_VAR 0 2
6498: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6499: LD_INT 0
6501: PPUSH
6502: PPUSH
// result := false ;
6503: LD_ADDR_VAR 0 3
6507: PUSH
6508: LD_INT 0
6510: ST_TO_ADDR
// for i = 1 to tlist do
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: DOUBLE
6517: LD_INT 1
6519: DEC
6520: ST_TO_ADDR
6521: LD_VAR 0 2
6525: PUSH
6526: FOR_TO
6527: IFFALSE 6567
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6529: LD_VAR 0 2
6533: PUSH
6534: LD_VAR 0 4
6538: ARRAY
6539: PPUSH
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 321
6549: PUSH
6550: LD_INT 2
6552: NONEQUAL
6553: IFFALSE 6565
// begin result := true ;
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_INT 1
6562: ST_TO_ADDR
// break ;
6563: GO 6567
// end ;
6565: GO 6526
6567: POP
6568: POP
// end ;
6569: LD_VAR 0 3
6573: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
// lab := GetLabs ( side ) ;
6584: LD_ADDR_VAR 0 5
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL 6358 0 1
6598: ST_TO_ADDR
// tmp := 0 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 0
6606: ST_TO_ADDR
// list := [ ] ;
6607: LD_ADDR_VAR 0 8
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6614: LD_ADDR_VAR 0 10
6618: PUSH
6619: LD_INT 35
6621: PUSH
6622: LD_INT 45
6624: PUSH
6625: LD_INT 46
6627: PUSH
6628: LD_INT 47
6630: PUSH
6631: LD_INT 1
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 48
6639: PUSH
6640: LD_INT 49
6642: PUSH
6643: LD_INT 50
6645: PUSH
6646: LD_INT 20
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: ST_TO_ADDR
// for i = 1 to tlist do
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 2
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6729
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_VAR 0 4
6688: ARRAY
6689: PPUSH
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 321
6699: PUSH
6700: LD_INT 2
6702: NONEQUAL
6703: IFFALSE 6727
// list := list ^ tlist [ i ] ;
6705: LD_ADDR_VAR 0 8
6709: PUSH
6710: LD_VAR 0 8
6714: PUSH
6715: LD_VAR 0 2
6719: PUSH
6720: LD_VAR 0 4
6724: ARRAY
6725: ADD
6726: ST_TO_ADDR
6727: GO 6676
6729: POP
6730: POP
// if list then
6731: LD_VAR 0 8
6735: IFFALSE 6900
// begin for i = 1 to lab do
6737: LD_ADDR_VAR 0 4
6741: PUSH
6742: DOUBLE
6743: LD_INT 1
6745: DEC
6746: ST_TO_ADDR
6747: LD_VAR 0 5
6751: PUSH
6752: FOR_TO
6753: IFFALSE 6823
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6755: LD_VAR 0 8
6759: PUSH
6760: LD_INT 1
6762: ARRAY
6763: PUSH
6764: LD_VAR 0 10
6768: IN
6769: PUSH
6770: LD_VAR 0 8
6774: PUSH
6775: LD_INT 1
6777: ARRAY
6778: PPUSH
6779: CALL_OW 481
6783: PUSH
6784: LD_VAR 0 5
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: PPUSH
6795: CALL 6434 0 1
6799: IN
6800: OR
6801: IFFALSE 6821
// begin mylab := lab [ i ] ;
6803: LD_ADDR_VAR 0 9
6807: PUSH
6808: LD_VAR 0 5
6812: PUSH
6813: LD_VAR 0 4
6817: ARRAY
6818: ST_TO_ADDR
// break ;
6819: GO 6823
// end ;
6821: GO 6752
6823: POP
6824: POP
// if mylab then
6825: LD_VAR 0 9
6829: IFFALSE 6890
// begin if BuildingStatus ( mylab ) = bs_idle then
6831: LD_VAR 0 9
6835: PPUSH
6836: CALL_OW 461
6840: PUSH
6841: LD_INT 2
6843: EQUAL
6844: IFFALSE 6888
// for i = 1 to list do
6846: LD_ADDR_VAR 0 4
6850: PUSH
6851: DOUBLE
6852: LD_INT 1
6854: DEC
6855: ST_TO_ADDR
6856: LD_VAR 0 8
6860: PUSH
6861: FOR_TO
6862: IFFALSE 6886
// AddComResearch ( mylab , list [ i ] ) ;
6864: LD_VAR 0 9
6868: PPUSH
6869: LD_VAR 0 8
6873: PUSH
6874: LD_VAR 0 4
6878: ARRAY
6879: PPUSH
6880: CALL_OW 184
6884: GO 6861
6886: POP
6887: POP
// end else
6888: GO 6898
// result := false ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 0
6897: ST_TO_ADDR
// end else
6898: GO 6908
// result := false ;
6900: LD_ADDR_VAR 0 3
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// end ;
6908: LD_VAR 0 3
6912: RET
// export function GetTowers ( side ) ; begin
6913: LD_INT 0
6915: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6916: LD_ADDR_VAR 0 2
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_VAR 0 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 30
6938: PUSH
6939: LD_INT 32
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 30
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 2
6974: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
// if Hex ( x , y ) then
6979: LD_VAR 0 2
6983: PPUSH
6984: LD_VAR 0 3
6988: PPUSH
6989: CALL 5924 0 2
6993: IFFALSE 7068
// for i = 1 to plist do
6995: LD_ADDR_VAR 0 6
6999: PUSH
7000: DOUBLE
7001: LD_INT 1
7003: DEC
7004: ST_TO_ADDR
7005: LD_VAR 0 1
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7066
// if not HasTask ( plist [ i ] ) then
7013: LD_VAR 0 1
7017: PUSH
7018: LD_VAR 0 6
7022: ARRAY
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: IFFALSE 7064
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: LD_INT 0
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: LD_VAR 0 4
7059: PPUSH
7060: CALL_OW 145
7064: GO 7010
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 5
7072: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7077: LD_VAR 0 2
7081: PPUSH
7082: CALL_OW 266
7086: PUSH
7087: LD_INT 0
7089: EQUAL
7090: PUSH
7091: LD_VAR 0 2
7095: PPUSH
7096: LD_INT 1
7098: PPUSH
7099: CALL 5694 0 2
7103: AND
7104: PUSH
7105: LD_VAR 0 1
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: CALL_OW 255
7118: PPUSH
7119: CALL_OW 345
7123: NOT
7124: AND
7125: IFFALSE 7221
// begin ComUpgrade ( bident ) ;
7127: LD_VAR 0 2
7131: PPUSH
7132: CALL_OW 146
// for i = 1 to plist do
7136: LD_ADDR_VAR 0 4
7140: PUSH
7141: DOUBLE
7142: LD_INT 1
7144: DEC
7145: ST_TO_ADDR
7146: LD_VAR 0 1
7150: PUSH
7151: FOR_TO
7152: IFFALSE 7209
// if not HasTask ( plist [ i ] ) then
7154: LD_VAR 0 1
7158: PUSH
7159: LD_VAR 0 4
7163: ARRAY
7164: PPUSH
7165: CALL_OW 314
7169: NOT
7170: IFFALSE 7207
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: CALL_OW 250
7192: PPUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 251
7202: PPUSH
7203: CALL_OW 111
7207: GO 7151
7209: POP
7210: POP
// result := true ;
7211: LD_ADDR_VAR 0 3
7215: PUSH
7216: LD_INT 1
7218: ST_TO_ADDR
// end else
7219: GO 7229
// result := false ;
7221: LD_ADDR_VAR 0 3
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// end ;
7229: LD_VAR 0 3
7233: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7238: LD_VAR 0 1
7242: PUSH
7243: LD_INT 1
7245: ARRAY
7246: PPUSH
7247: CALL_OW 255
7251: PPUSH
7252: CALL 6303 0 1
7256: PUSH
7257: LD_INT 20
7259: GREATEREQUAL
7260: PUSH
7261: LD_VAR 0 2
7265: PPUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL 5924 0 2
7275: AND
7276: IFFALSE 7361
// begin for i = 1 to plist do
7278: LD_ADDR_VAR 0 6
7282: PUSH
7283: DOUBLE
7284: LD_INT 1
7286: DEC
7287: ST_TO_ADDR
7288: LD_VAR 0 1
7292: PUSH
7293: FOR_TO
7294: IFFALSE 7349
// if not HasTask ( plist [ i ] ) then
7296: LD_VAR 0 1
7300: PUSH
7301: LD_VAR 0 6
7305: ARRAY
7306: PPUSH
7307: CALL_OW 314
7311: NOT
7312: IFFALSE 7347
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: LD_INT 6
7327: PPUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: LD_VAR 0 3
7337: PPUSH
7338: LD_VAR 0 4
7342: PPUSH
7343: CALL_OW 145
7347: GO 7293
7349: POP
7350: POP
// result := true ;
7351: LD_ADDR_VAR 0 5
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// end else
7359: GO 7369
// result := false ;
7361: LD_ADDR_VAR 0 5
7365: PUSH
7366: LD_INT 0
7368: ST_TO_ADDR
// end ;
7369: LD_VAR 0 5
7373: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7374: LD_INT 0
7376: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7377: LD_VAR 0 1
7381: PPUSH
7382: LD_INT 1
7384: PPUSH
7385: CALL_OW 268
7389: PUSH
7390: LD_INT 9
7392: EQUAL
7393: PUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: CALL_OW 268
7406: PUSH
7407: LD_INT 9
7409: EQUAL
7410: AND
7411: IFFALSE 7508
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_VAR 0 2
7422: PPUSH
7423: CALL 5694 0 2
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: CALL 5694 0 2
7442: AND
7443: PUSH
7444: LD_VAR 0 1
7448: PPUSH
7449: CALL_OW 461
7453: PUSH
7454: LD_INT 2
7456: EQUAL
7457: AND
7458: IFFALSE 7498
// begin ComUpgradeLab ( lab , bkind1 ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: LD_VAR 0 2
7469: PPUSH
7470: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: LD_VAR 0 3
7483: PPUSH
7484: CALL_OW 207
// result := true ;
7488: LD_ADDR_VAR 0 4
7492: PUSH
7493: LD_INT 1
7495: ST_TO_ADDR
// end else
7496: GO 7506
// result := false ;
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_INT 0
7505: ST_TO_ADDR
// end else
7506: GO 7516
// result := false ;
7508: LD_ADDR_VAR 0 4
7512: PUSH
7513: LD_INT 0
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 4
7520: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7521: LD_INT 0
7523: PPUSH
7524: PPUSH
7525: PPUSH
7526: PPUSH
7527: PPUSH
// p := 1 ;
7528: LD_ADDR_VAR 0 6
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: DOUBLE
7542: LD_INT 1
7544: DEC
7545: ST_TO_ADDR
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 4
7553: DIVREAL
7554: PUSH
7555: FOR_TO
7556: IFFALSE 7805
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7558: LD_VAR 0 2
7562: PUSH
7563: LD_VAR 0 6
7567: PUSH
7568: LD_INT 1
7570: PLUS
7571: ARRAY
7572: PPUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_VAR 0 6
7582: PUSH
7583: LD_INT 2
7585: PLUS
7586: ARRAY
7587: PPUSH
7588: CALL_OW 428
7592: PUSH
7593: LD_INT 0
7595: EQUAL
7596: PUSH
7597: LD_VAR 0 2
7601: PUSH
7602: LD_VAR 0 6
7606: PUSH
7607: LD_INT 1
7609: PLUS
7610: ARRAY
7611: PPUSH
7612: LD_VAR 0 2
7616: PUSH
7617: LD_VAR 0 6
7621: PUSH
7622: LD_INT 2
7624: PLUS
7625: ARRAY
7626: PPUSH
7627: CALL 5924 0 2
7631: AND
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PPUSH
7642: CALL_OW 255
7646: PPUSH
7647: CALL 6303 0 1
7651: PUSH
7652: LD_INT 20
7654: GREATEREQUAL
7655: AND
7656: IFFALSE 7773
// begin for c = 1 to plist do
7658: LD_ADDR_VAR 0 7
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 1
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7767
// if not HasTask ( plist [ c ] ) then
7676: LD_VAR 0 1
7680: PUSH
7681: LD_VAR 0 7
7685: ARRAY
7686: PPUSH
7687: CALL_OW 314
7691: NOT
7692: IFFALSE 7765
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: LD_VAR 0 2
7709: PUSH
7710: LD_VAR 0 6
7714: ARRAY
7715: PPUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 1
7728: PLUS
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 2
7735: PUSH
7736: LD_VAR 0 6
7740: PUSH
7741: LD_INT 2
7743: PLUS
7744: ARRAY
7745: PPUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 6
7755: PUSH
7756: LD_INT 3
7758: PLUS
7759: ARRAY
7760: PPUSH
7761: CALL_OW 145
7765: GO 7673
7767: POP
7768: POP
// break ;
7769: GO 7805
// end else
7771: GO 7803
// if ( p + 4 < tlist ) then
7773: LD_VAR 0 6
7777: PUSH
7778: LD_INT 4
7780: PLUS
7781: PUSH
7782: LD_VAR 0 2
7786: LESS
7787: IFFALSE 7803
// p := p + 4 ;
7789: LD_ADDR_VAR 0 6
7793: PUSH
7794: LD_VAR 0 6
7798: PUSH
7799: LD_INT 4
7801: PLUS
7802: ST_TO_ADDR
// end ;
7803: GO 7555
7805: POP
7806: POP
// end ;
7807: LD_VAR 0 3
7811: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
// tmp := GetTowers ( side ) ;
7818: LD_ADDR_VAR 0 5
7822: PUSH
7823: LD_VAR 0 1
7827: PPUSH
7828: CALL 6913 0 1
7832: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7833: LD_ADDR_VAR 0 6
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 3
7845: PPUSH
7846: CALL 6209 0 2
7850: PUSH
7851: LD_INT 1
7853: ARRAY
7854: ST_TO_ADDR
// if fac then
7855: LD_VAR 0 6
7859: IFFALSE 7955
// for i = 1 to tmp do
7861: LD_ADDR_VAR 0 4
7865: PUSH
7866: DOUBLE
7867: LD_INT 1
7869: DEC
7870: ST_TO_ADDR
7871: LD_VAR 0 5
7875: PUSH
7876: FOR_TO
7877: IFFALSE 7953
// if GetBWeapon ( tmp [ i ] ) = 0 then
7879: LD_VAR 0 5
7883: PUSH
7884: LD_VAR 0 4
7888: ARRAY
7889: PPUSH
7890: CALL_OW 269
7894: PUSH
7895: LD_INT 0
7897: EQUAL
7898: IFFALSE 7951
// begin if BuildingStatus ( fac ) = bs_idle then
7900: LD_VAR 0 6
7904: PPUSH
7905: CALL_OW 461
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: IFFALSE 7949
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7915: LD_VAR 0 5
7919: PUSH
7920: LD_VAR 0 4
7924: ARRAY
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: PPUSH
7934: LD_VAR 0 2
7938: PPUSH
7939: CALL_OW 12
7943: ARRAY
7944: PPUSH
7945: CALL_OW 148
// break ;
7949: GO 7953
// end ;
7951: GO 7876
7953: POP
7954: POP
// end ;
7955: LD_VAR 0 3
7959: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7960: LD_INT 0
7962: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7963: LD_INT 22
7965: PUSH
7966: LD_VAR 0 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 34
7977: PUSH
7978: LD_VAR 0 3
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 31
7989: PUSH
7990: LD_VAR 0 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: EMPTY
8005: LIST
8006: PPUSH
8007: CALL_OW 69
8011: IFFALSE 8069
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8013: LD_ADDR_VAR 0 4
8017: PUSH
8018: LD_INT 22
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 34
8032: PUSH
8033: LD_VAR 0 3
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 31
8044: PUSH
8045: LD_VAR 0 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: PPUSH
8062: CALL_OW 69
8066: ST_TO_ADDR
8067: GO 8077
// result := false ;
8069: LD_ADDR_VAR 0 4
8073: PUSH
8074: LD_INT 0
8076: ST_TO_ADDR
// end ;
8077: LD_VAR 0 4
8081: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8082: LD_INT 0
8084: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_VAR 0 3
8099: PPUSH
8100: LD_VAR 0 4
8104: PPUSH
8105: LD_VAR 0 5
8109: PPUSH
8110: CALL_OW 448
8114: PUSH
8115: LD_VAR 0 2
8119: PPUSH
8120: LD_VAR 0 3
8124: PPUSH
8125: LD_VAR 0 4
8129: PPUSH
8130: LD_VAR 0 5
8134: PPUSH
8135: CALL_OW 449
8139: PUSH
8140: LD_INT 1
8142: ARRAY
8143: PUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL 5810 0 1
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: LESSEQUAL
8158: AND
8159: PUSH
8160: LD_VAR 0 2
8164: PPUSH
8165: LD_VAR 0 3
8169: PPUSH
8170: LD_VAR 0 4
8174: PPUSH
8175: LD_VAR 0 5
8179: PPUSH
8180: CALL_OW 449
8184: PUSH
8185: LD_INT 2
8187: ARRAY
8188: PUSH
8189: LD_VAR 0 1
8193: PPUSH
8194: CALL 5810 0 1
8198: PUSH
8199: LD_INT 2
8201: ARRAY
8202: LESSEQUAL
8203: AND
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_VAR 0 3
8214: PPUSH
8215: LD_VAR 0 4
8219: PPUSH
8220: LD_VAR 0 5
8224: PPUSH
8225: CALL_OW 449
8229: PUSH
8230: LD_INT 3
8232: ARRAY
8233: PUSH
8234: LD_VAR 0 1
8238: PPUSH
8239: CALL 5810 0 1
8243: PUSH
8244: LD_INT 3
8246: ARRAY
8247: LESSEQUAL
8248: AND
8249: IFFALSE 8296
// begin if debug then
8251: LD_EXP 1
8255: IFFALSE 8265
// display_strings := Factory work! ;
8257: LD_ADDR_OWVAR 47
8261: PUSH
8262: LD_STRING Factory work!
8264: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_VAR 0 5
8289: PPUSH
8290: CALL_OW 125
// end else
8294: GO 8304
// result := false ;
8296: LD_ADDR_VAR 0 6
8300: PUSH
8301: LD_INT 0
8303: ST_TO_ADDR
// end ;
8304: LD_VAR 0 6
8308: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8309: LD_INT 0
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8315: LD_ADDR_VAR 0 6
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 30
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PPUSH
8348: CALL_OW 69
8352: ST_TO_ADDR
// tmp := [ ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for i = 1 to filter do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_VAR 0 6
8374: PUSH
8375: FOR_TO
8376: IFFALSE 8464
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_VAR 0 5
8387: PUSH
8388: LD_VAR 0 6
8392: PUSH
8393: LD_VAR 0 4
8397: ARRAY
8398: PPUSH
8399: CALL_OW 266
8403: PUSH
8404: LD_VAR 0 6
8408: PUSH
8409: LD_VAR 0 4
8413: ARRAY
8414: PPUSH
8415: CALL_OW 250
8419: PUSH
8420: LD_VAR 0 6
8424: PUSH
8425: LD_VAR 0 4
8429: ARRAY
8430: PPUSH
8431: CALL_OW 251
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: LD_VAR 0 4
8445: ARRAY
8446: PPUSH
8447: CALL_OW 254
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: ADD
8461: ST_TO_ADDR
// end ;
8462: GO 8375
8464: POP
8465: POP
// result := tmp ;
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: LD_VAR 0 5
8475: ST_TO_ADDR
// end ;
8476: LD_VAR 0 3
8480: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8481: LD_INT 0
8483: PPUSH
8484: PPUSH
8485: PPUSH
// for i = 1 to list do
8486: LD_ADDR_VAR 0 4
8490: PUSH
8491: DOUBLE
8492: LD_INT 1
8494: DEC
8495: ST_TO_ADDR
8496: LD_VAR 0 2
8500: PUSH
8501: FOR_TO
8502: IFFALSE 9057
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8504: LD_VAR 0 2
8508: PUSH
8509: LD_VAR 0 4
8513: ARRAY
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 2
8523: PUSH
8524: LD_VAR 0 4
8528: ARRAY
8529: PUSH
8530: LD_INT 2
8532: ARRAY
8533: PPUSH
8534: CALL_OW 428
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: IFFALSE 8828
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8544: LD_VAR 0 2
8548: PUSH
8549: LD_VAR 0 4
8553: ARRAY
8554: PUSH
8555: LD_INT 1
8557: ARRAY
8558: PPUSH
8559: LD_VAR 0 2
8563: PUSH
8564: LD_VAR 0 4
8568: ARRAY
8569: PUSH
8570: LD_INT 2
8572: ARRAY
8573: PPUSH
8574: CALL_OW 428
8578: PPUSH
8579: CALL_OW 248
8583: PUSH
8584: LD_INT 3
8586: EQUAL
8587: IFFALSE 8713
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8589: LD_VAR 0 2
8593: PUSH
8594: LD_VAR 0 4
8598: ARRAY
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_VAR 0 4
8613: ARRAY
8614: PUSH
8615: LD_INT 2
8617: ARRAY
8618: PPUSH
8619: CALL_OW 428
8623: PPUSH
8624: CALL_OW 274
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: CALL_OW 275
8636: PUSH
8637: LD_INT 15
8639: GREATEREQUAL
8640: IFFALSE 8711
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8642: LD_VAR 0 2
8646: PUSH
8647: LD_VAR 0 4
8651: ARRAY
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 2
8661: PUSH
8662: LD_VAR 0 4
8666: ARRAY
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: CALL_OW 428
8676: PPUSH
8677: LD_VAR 0 2
8681: PUSH
8682: LD_VAR 0 4
8686: ARRAY
8687: PUSH
8688: LD_INT 4
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 2
8696: PUSH
8697: LD_VAR 0 4
8701: ARRAY
8702: PUSH
8703: LD_INT 5
8705: ARRAY
8706: PPUSH
8707: CALL 7374 0 3
// end else
8711: GO 8782
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8713: LD_VAR 0 2
8717: PUSH
8718: LD_VAR 0 4
8722: ARRAY
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: LD_VAR 0 2
8732: PUSH
8733: LD_VAR 0 4
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: PPUSH
8743: CALL_OW 428
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_VAR 0 4
8757: ARRAY
8758: PUSH
8759: LD_INT 4
8761: ARRAY
8762: PPUSH
8763: LD_VAR 0 2
8767: PUSH
8768: LD_VAR 0 4
8772: ARRAY
8773: PUSH
8774: LD_INT 5
8776: ARRAY
8777: PPUSH
8778: CALL 7374 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8782: LD_VAR 0 1
8786: PPUSH
8787: LD_VAR 0 2
8791: PUSH
8792: LD_VAR 0 4
8796: ARRAY
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_VAR 0 4
8811: ARRAY
8812: PUSH
8813: LD_INT 2
8815: ARRAY
8816: PPUSH
8817: CALL_OW 428
8821: PPUSH
8822: CALL 10326 0 2
// end else
8826: GO 9055
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8828: LD_VAR 0 1
8832: PUSH
8833: LD_INT 1
8835: ARRAY
8836: PPUSH
8837: CALL_OW 255
8841: PPUSH
8842: CALL 6118 0 1
8846: PPUSH
8847: LD_INT 6
8849: PPUSH
8850: CALL 5694 0 2
8854: PUSH
8855: LD_VAR 0 1
8859: PUSH
8860: LD_INT 1
8862: ARRAY
8863: PPUSH
8864: CALL_OW 255
8868: PPUSH
8869: CALL 6118 0 1
8873: PPUSH
8874: LD_VAR 0 2
8878: PUSH
8879: LD_VAR 0 4
8883: ARRAY
8884: PUSH
8885: LD_INT 4
8887: ARRAY
8888: PPUSH
8889: CALL 5694 0 2
8893: AND
8894: PUSH
8895: LD_VAR 0 1
8899: PUSH
8900: LD_INT 1
8902: ARRAY
8903: PPUSH
8904: CALL_OW 255
8908: PPUSH
8909: CALL 6118 0 1
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: ARRAY
8924: PUSH
8925: LD_INT 5
8927: ARRAY
8928: PPUSH
8929: CALL 5694 0 2
8933: AND
8934: IFFALSE 9055
// for p = 1 to plist do
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_VAR 0 1
8950: PUSH
8951: FOR_TO
8952: IFFALSE 9053
// if IsInUnit ( plist [ p ] ) then
8954: LD_VAR 0 1
8958: PUSH
8959: LD_VAR 0 5
8963: ARRAY
8964: PPUSH
8965: CALL_OW 310
8969: IFFALSE 8988
// ComExitBuilding ( plist [ p ] ) else
8971: LD_VAR 0 1
8975: PUSH
8976: LD_VAR 0 5
8980: ARRAY
8981: PPUSH
8982: CALL_OW 122
8986: GO 9051
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
8988: LD_VAR 0 1
8992: PUSH
8993: LD_VAR 0 5
8997: ARRAY
8998: PPUSH
8999: LD_INT 6
9001: PPUSH
9002: LD_VAR 0 2
9006: PUSH
9007: LD_VAR 0 4
9011: ARRAY
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: LD_VAR 0 2
9021: PUSH
9022: LD_VAR 0 4
9026: ARRAY
9027: PUSH
9028: LD_INT 2
9030: ARRAY
9031: PPUSH
9032: LD_VAR 0 2
9036: PUSH
9037: LD_VAR 0 4
9041: ARRAY
9042: PUSH
9043: LD_INT 3
9045: ARRAY
9046: PPUSH
9047: CALL_OW 145
9051: GO 8951
9053: POP
9054: POP
// end ;
9055: GO 8501
9057: POP
9058: POP
// end ;
9059: LD_VAR 0 3
9063: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9064: LD_INT 0
9066: PPUSH
// if IsInUnit ( sci ) then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 310
9076: IFFALSE 9089
// ComExitBuilding ( sci ) else
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 122
9087: GO 9120
// if not HasTask ( sci ) then
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 314
9098: NOT
9099: IFFALSE 9120
// begin ComMoveXY ( sci , x , y ) ;
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: CALL_OW 111
// end ; end ;
9120: LD_VAR 0 4
9124: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
9130: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_INT 22
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 21
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: PUSH
9167: LD_VAR 0 3
9171: DIFF
9172: ST_TO_ADDR
// tmp := tag_list ;
9173: LD_ADDR_VAR 0 7
9177: PUSH
9178: LD_VAR 0 2
9182: ST_TO_ADDR
// for i = 1 to filter do
9183: LD_ADDR_VAR 0 5
9187: PUSH
9188: DOUBLE
9189: LD_INT 1
9191: DEC
9192: ST_TO_ADDR
9193: LD_VAR 0 6
9197: PUSH
9198: FOR_TO
9199: IFFALSE 9468
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9201: LD_VAR 0 6
9205: PUSH
9206: LD_VAR 0 5
9210: ARRAY
9211: PPUSH
9212: CALL_OW 256
9216: PUSH
9217: LD_INT 1000
9219: EQUAL
9220: PUSH
9221: LD_VAR 0 6
9225: PUSH
9226: LD_VAR 0 5
9230: ARRAY
9231: PPUSH
9232: CALL_OW 110
9236: PUSH
9237: LD_INT 100
9239: GREATEREQUAL
9240: AND
9241: IFFALSE 9283
// begin SetTag ( filter [ i ] , 0 ) ;
9243: LD_VAR 0 6
9247: PUSH
9248: LD_VAR 0 5
9252: ARRAY
9253: PPUSH
9254: LD_INT 0
9256: PPUSH
9257: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9261: LD_ADDR_VAR 0 7
9265: PUSH
9266: LD_VAR 0 7
9270: PUSH
9271: LD_VAR 0 6
9275: PUSH
9276: LD_VAR 0 5
9280: ARRAY
9281: DIFF
9282: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9283: LD_VAR 0 6
9287: PUSH
9288: LD_VAR 0 5
9292: ARRAY
9293: PPUSH
9294: CALL_OW 256
9298: PUSH
9299: LD_INT 1000
9301: LESS
9302: IFFALSE 9466
// begin if not filter [ i ] in tmp then
9304: LD_VAR 0 6
9308: PUSH
9309: LD_VAR 0 5
9313: ARRAY
9314: PUSH
9315: LD_VAR 0 7
9319: IN
9320: NOT
9321: IFFALSE 9345
// tmp := tmp ^ filter [ i ] ;
9323: LD_ADDR_VAR 0 7
9327: PUSH
9328: LD_VAR 0 7
9332: PUSH
9333: LD_VAR 0 6
9337: PUSH
9338: LD_VAR 0 5
9342: ARRAY
9343: ADD
9344: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9345: LD_VAR 0 6
9349: PUSH
9350: LD_VAR 0 5
9354: ARRAY
9355: PPUSH
9356: CALL_OW 256
9360: PUSH
9361: LD_INT 250
9363: LESS
9364: IFFALSE 9386
// SetTag ( filter [ i ] , 100 ) else
9366: LD_VAR 0 6
9370: PUSH
9371: LD_VAR 0 5
9375: ARRAY
9376: PPUSH
9377: LD_INT 100
9379: PPUSH
9380: CALL_OW 109
9384: GO 9466
// if GetLives ( filter [ i ] ) < 500 then
9386: LD_VAR 0 6
9390: PUSH
9391: LD_VAR 0 5
9395: ARRAY
9396: PPUSH
9397: CALL_OW 256
9401: PUSH
9402: LD_INT 500
9404: LESS
9405: IFFALSE 9427
// SetTag ( filter [ i ] , 101 ) else
9407: LD_VAR 0 6
9411: PUSH
9412: LD_VAR 0 5
9416: ARRAY
9417: PPUSH
9418: LD_INT 101
9420: PPUSH
9421: CALL_OW 109
9425: GO 9466
// if GetLives ( filter [ i ] ) < 1000 then
9427: LD_VAR 0 6
9431: PUSH
9432: LD_VAR 0 5
9436: ARRAY
9437: PPUSH
9438: CALL_OW 256
9442: PUSH
9443: LD_INT 1000
9445: LESS
9446: IFFALSE 9466
// SetTag ( filter [ i ] , 102 ) ;
9448: LD_VAR 0 6
9452: PUSH
9453: LD_VAR 0 5
9457: ARRAY
9458: PPUSH
9459: LD_INT 102
9461: PPUSH
9462: CALL_OW 109
// end ; end ;
9466: GO 9198
9468: POP
9469: POP
// result := tmp ;
9470: LD_ADDR_VAR 0 4
9474: PUSH
9475: LD_VAR 0 7
9479: ST_TO_ADDR
// end ;
9480: LD_VAR 0 4
9484: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9492: LD_ADDR_VAR 0 7
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9535: LD_ADDR_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_INT 3
9545: PPUSH
9546: CALL_OW 12
9550: ST_TO_ADDR
// if filter > 0 then
9551: LD_VAR 0 7
9555: PUSH
9556: LD_INT 0
9558: GREATER
9559: IFFALSE 9761
// for i = 1 to list do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_VAR 0 1
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9759
// for ta in filter do
9579: LD_ADDR_VAR 0 4
9583: PUSH
9584: LD_VAR 0 7
9588: PUSH
9589: FOR_IN
9590: IFFALSE 9755
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9592: LD_VAR 0 1
9596: PUSH
9597: LD_VAR 0 6
9601: ARRAY
9602: PPUSH
9603: LD_VAR 0 4
9607: PPUSH
9608: CALL_OW 296
9612: PUSH
9613: LD_INT 13
9615: LESSEQUAL
9616: IFFALSE 9753
// begin case c of 1 :
9618: LD_VAR 0 5
9622: PUSH
9623: LD_INT 1
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9669
9631: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9632: LD_VAR 0 1
9636: PUSH
9637: LD_VAR 0 6
9641: ARRAY
9642: PPUSH
9643: LD_VAR 0 4
9647: PPUSH
9648: CALL_OW 250
9652: PPUSH
9653: LD_VAR 0 4
9657: PPUSH
9658: CALL_OW 251
9662: PPUSH
9663: CALL_OW 154
9667: GO 9753
9669: LD_INT 2
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9741
9677: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9678: LD_VAR 0 1
9682: PUSH
9683: LD_VAR 0 6
9687: ARRAY
9688: PPUSH
9689: LD_VAR 0 4
9693: PPUSH
9694: CALL_OW 250
9698: PUSH
9699: LD_INT 1
9701: NEG
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 12
9710: PLUS
9711: PPUSH
9712: LD_VAR 0 4
9716: PPUSH
9717: CALL_OW 251
9721: PUSH
9722: LD_INT 1
9724: NEG
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 12
9733: PLUS
9734: PPUSH
9735: CALL_OW 153
9739: GO 9753
9741: LD_INT 3
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9752
9749: POP
// ; end ;
9750: GO 9753
9752: POP
// end ; end ;
9753: GO 9589
9755: POP
9756: POP
9757: GO 9576
9759: POP
9760: POP
// end ;
9761: LD_VAR 0 3
9765: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9766: LD_INT 0
9768: PPUSH
9769: PPUSH
// for i = 1 to plist do
9770: LD_ADDR_VAR 0 3
9774: PUSH
9775: DOUBLE
9776: LD_INT 1
9778: DEC
9779: ST_TO_ADDR
9780: LD_VAR 0 1
9784: PUSH
9785: FOR_TO
9786: IFFALSE 9988
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9788: LD_VAR 0 1
9792: PUSH
9793: LD_VAR 0 3
9797: ARRAY
9798: PPUSH
9799: CALL_OW 310
9803: PUSH
9804: LD_INT 30
9806: PUSH
9807: LD_INT 5
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: PPUSH
9817: CALL_OW 69
9821: IN
9822: NOT
9823: IFFALSE 9968
// begin if IsInUnit ( plist [ i ] ) then
9825: LD_VAR 0 1
9829: PUSH
9830: LD_VAR 0 3
9834: ARRAY
9835: PPUSH
9836: CALL_OW 310
9840: IFFALSE 9859
// ComExitBuilding ( plist [ i ] ) else
9842: LD_VAR 0 1
9846: PUSH
9847: LD_VAR 0 3
9851: ARRAY
9852: PPUSH
9853: CALL_OW 122
9857: GO 9966
// if not HasTask ( plist [ i ] ) then
9859: LD_VAR 0 1
9863: PUSH
9864: LD_VAR 0 3
9868: ARRAY
9869: PPUSH
9870: CALL_OW 314
9874: NOT
9875: IFFALSE 9966
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: CALL_OW 255
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 30
9911: PUSH
9912: LD_INT 5
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: PPUSH
9928: LD_VAR 0 1
9932: PUSH
9933: LD_VAR 0 3
9937: ARRAY
9938: PPUSH
9939: CALL_OW 74
9943: PPUSH
9944: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9948: LD_VAR 0 1
9952: PUSH
9953: LD_VAR 0 3
9957: ARRAY
9958: PPUSH
9959: LD_INT 9
9961: PPUSH
9962: CALL_OW 183
// end ; end else
9966: GO 9986
// ComChangeProfession ( plist [ i ] , 9 ) ;
9968: LD_VAR 0 1
9972: PUSH
9973: LD_VAR 0 3
9977: ARRAY
9978: PPUSH
9979: LD_INT 9
9981: PPUSH
9982: CALL_OW 123
9986: GO 9785
9988: POP
9989: POP
// end ;
9990: LD_VAR 0 2
9994: RET
// export function GetHuman ( side ) ; begin
9995: LD_INT 0
9997: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
9998: LD_ADDR_VAR 0 2
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_VAR 0 1
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 21
10017: PUSH
10018: LD_INT 1
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 1
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: LD_INT 25
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 25
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PUSH
10058: LD_INT 25
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: PPUSH
10080: CALL_OW 69
10084: ST_TO_ADDR
// end ;
10085: LD_VAR 0 2
10089: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
// uc_side := 0 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_nation := 0 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: DOUBLE
10117: LD_INT 1
10119: DEC
10120: ST_TO_ADDR
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: LD_INT 6
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: LD_OWVAR 67
10139: ARRAY
10140: PUSH
10141: FOR_TO
10142: IFFALSE 10213
// begin hc_class = class_tiger ;
10144: LD_ADDR_OWVAR 28
10148: PUSH
10149: LD_INT 14
10151: ST_TO_ADDR
// hc_gallery = sandnature ;
10152: LD_ADDR_OWVAR 33
10156: PUSH
10157: LD_STRING sandnature
10159: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10160: LD_ADDR_OWVAR 35
10164: PUSH
10165: LD_INT 0
10167: PPUSH
10168: LD_INT 50
10170: PPUSH
10171: CALL_OW 12
10175: ST_TO_ADDR
// hc_face_number = 3 ;
10176: LD_ADDR_OWVAR 34
10180: PUSH
10181: LD_INT 3
10183: ST_TO_ADDR
// tiger := CreateHuman ;
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: CALL_OW 44
10193: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: LD_INT 0
10206: PPUSH
10207: CALL_OW 49
// end ;
10211: GO 10141
10213: POP
10214: POP
// end ;
10215: LD_VAR 0 2
10219: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10220: LD_INT 0
10222: PPUSH
10223: PPUSH
10224: PPUSH
// uc_side := 0 ;
10225: LD_ADDR_OWVAR 20
10229: PUSH
10230: LD_INT 0
10232: ST_TO_ADDR
// uc_nation := 0 ;
10233: LD_ADDR_OWVAR 21
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// for i = 1 to 8 do
10241: LD_ADDR_VAR 0 4
10245: PUSH
10246: DOUBLE
10247: LD_INT 1
10249: DEC
10250: ST_TO_ADDR
10251: LD_INT 8
10253: PUSH
10254: FOR_TO
10255: IFFALSE 10319
// begin hc_class = class_apeman ;
10257: LD_ADDR_OWVAR 28
10261: PUSH
10262: LD_INT 12
10264: ST_TO_ADDR
// hc_gallery =  ;
10265: LD_ADDR_OWVAR 33
10269: PUSH
10270: LD_STRING 
10272: ST_TO_ADDR
// hc_agressivity = Rand ( - 2 , 2 ) ;
10273: LD_ADDR_OWVAR 35
10277: PUSH
10278: LD_INT 2
10280: NEG
10281: PPUSH
10282: LD_INT 2
10284: PPUSH
10285: CALL_OW 12
10289: ST_TO_ADDR
// ape := CreateHuman ;
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: CALL_OW 44
10299: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 49
// end ;
10317: GO 10254
10319: POP
10320: POP
// end ;
10321: LD_VAR 0 2
10325: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
// if BuildingStatus ( b ) = bs_build then
10330: LD_VAR 0 2
10334: PPUSH
10335: CALL_OW 461
10339: PUSH
10340: LD_INT 1
10342: EQUAL
10343: IFFALSE 10529
// for i = 1 to plist do
10345: LD_ADDR_VAR 0 4
10349: PUSH
10350: DOUBLE
10351: LD_INT 1
10353: DEC
10354: ST_TO_ADDR
10355: LD_VAR 0 1
10359: PUSH
10360: FOR_TO
10361: IFFALSE 10527
// if IsInUnit ( plist [ i ] ) then
10363: LD_VAR 0 1
10367: PUSH
10368: LD_VAR 0 4
10372: ARRAY
10373: PPUSH
10374: CALL_OW 310
10378: IFFALSE 10461
// begin ComExitBuilding ( plist [ i ] ) ;
10380: LD_VAR 0 1
10384: PUSH
10385: LD_VAR 0 4
10389: ARRAY
10390: PPUSH
10391: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10395: LD_VAR 0 1
10399: PUSH
10400: LD_VAR 0 4
10404: ARRAY
10405: PPUSH
10406: LD_STRING h
10408: PUSH
10409: LD_VAR 0 2
10413: PPUSH
10414: CALL_OW 250
10418: PUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 251
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: PPUSH
10455: CALL_OW 447
// end else
10459: GO 10525
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10461: LD_VAR 0 1
10465: PUSH
10466: LD_VAR 0 4
10470: ARRAY
10471: PPUSH
10472: LD_STRING h
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 250
10484: PUSH
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 251
10494: PUSH
10495: LD_VAR 0 2
10499: PUSH
10500: LD_INT 0
10502: PUSH
10503: LD_INT 0
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: PPUSH
10521: CALL_OW 446
10525: GO 10360
10527: POP
10528: POP
// end ;
10529: LD_VAR 0 3
10533: RET
// export function WantRepair ( eng ) ; begin
10534: LD_INT 0
10536: PPUSH
// if GetTaskList ( eng ) > 0 then
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 437
10546: PUSH
10547: LD_INT 0
10549: GREATER
10550: IFFALSE 10595
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 437
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PUSH
10566: LD_INT 1
10568: ARRAY
10569: PUSH
10570: LD_STRING o
10572: EQUAL
10573: IFFALSE 10585
// result := true else
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: LD_INT 1
10582: ST_TO_ADDR
10583: GO 10593
// result := false ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 0
10592: ST_TO_ADDR
// end else
10593: GO 10603
// result := false ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// end ;
10603: LD_VAR 0 2
10607: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10608: LD_INT 0
10610: PPUSH
10611: PPUSH
10612: PPUSH
10613: PPUSH
// if btype = - 1 then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: NEG
10622: EQUAL
10623: IFFALSE 10663
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10625: LD_ADDR_VAR 0 5
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_VAR 0 1
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: ST_TO_ADDR
10661: GO 10701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10663: LD_ADDR_VAR 0 5
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_VAR 0 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_VAR 0 2
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// list := [ ] ;
10701: LD_ADDR_VAR 0 6
10705: PUSH
10706: EMPTY
10707: ST_TO_ADDR
// for i = 1 to tmp do
10708: LD_ADDR_VAR 0 4
10712: PUSH
10713: DOUBLE
10714: LD_INT 1
10716: DEC
10717: ST_TO_ADDR
10718: LD_VAR 0 5
10722: PUSH
10723: FOR_TO
10724: IFFALSE 10812
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10726: LD_ADDR_VAR 0 6
10730: PUSH
10731: LD_VAR 0 6
10735: PUSH
10736: LD_VAR 0 5
10740: PUSH
10741: LD_VAR 0 4
10745: ARRAY
10746: PPUSH
10747: CALL_OW 266
10751: PUSH
10752: LD_VAR 0 5
10756: PUSH
10757: LD_VAR 0 4
10761: ARRAY
10762: PPUSH
10763: CALL_OW 250
10767: PUSH
10768: LD_VAR 0 5
10772: PUSH
10773: LD_VAR 0 4
10777: ARRAY
10778: PPUSH
10779: CALL_OW 251
10783: PUSH
10784: LD_VAR 0 5
10788: PUSH
10789: LD_VAR 0 4
10793: ARRAY
10794: PPUSH
10795: CALL_OW 254
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: ADD
10809: ST_TO_ADDR
10810: GO 10723
10812: POP
10813: POP
// result = list ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_VAR 0 6
10823: ST_TO_ADDR
// end ;
10824: LD_VAR 0 3
10828: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10829: LD_INT 0
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10835: LD_VAR 0 1
10839: PPUSH
10840: LD_INT 81
10842: PUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 255
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PPUSH
10862: LD_VAR 0 1
10866: PPUSH
10867: CALL_OW 74
10871: PPUSH
10872: CALL_OW 296
10876: PUSH
10877: LD_INT 18
10879: LESS
10880: IFFALSE 10925
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 81
10889: PUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 255
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 69
10908: PPUSH
10909: LD_VAR 0 1
10913: PPUSH
10914: CALL_OW 74
10918: PPUSH
10919: CALL_OW 115
10923: GO 10944
// ComMoveXY ( behemoth , x , y ) ;
10925: LD_VAR 0 1
10929: PPUSH
10930: LD_VAR 0 4
10934: PPUSH
10935: LD_VAR 0 5
10939: PPUSH
10940: CALL_OW 111
// if time_lapsers_list > 0 then
10944: LD_VAR 0 2
10948: PUSH
10949: LD_INT 0
10951: GREATER
10952: IFFALSE 11142
// begin for i = 1 to time_lapsers_list do
10954: LD_ADDR_VAR 0 7
10958: PUSH
10959: DOUBLE
10960: LD_INT 1
10962: DEC
10963: ST_TO_ADDR
10964: LD_VAR 0 2
10968: PUSH
10969: FOR_TO
10970: IFFALSE 11140
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10972: LD_VAR 0 2
10976: PUSH
10977: LD_VAR 0 7
10981: ARRAY
10982: PPUSH
10983: CALL_OW 256
10987: PUSH
10988: LD_INT 250
10990: GREATEREQUAL
10991: PUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 7
11001: ARRAY
11002: PPUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 296
11012: PUSH
11013: LD_INT 9
11015: GREATER
11016: AND
11017: IFFALSE 11054
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 7
11028: ARRAY
11029: PPUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 250
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 251
11049: PPUSH
11050: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11054: LD_VAR 0 2
11058: PUSH
11059: LD_VAR 0 7
11063: ARRAY
11064: PPUSH
11065: CALL_OW 256
11069: PUSH
11070: LD_INT 500
11072: LESS
11073: PUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 256
11083: PUSH
11084: LD_INT 700
11086: GREATER
11087: AND
11088: IFFALSE 11138
// for p = 1 to mechanic_list do
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: DOUBLE
11096: LD_INT 1
11098: DEC
11099: ST_TO_ADDR
11100: LD_VAR 0 3
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11136
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11108: LD_VAR 0 3
11112: PUSH
11113: LD_VAR 0 8
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 2
11123: PUSH
11124: LD_VAR 0 7
11128: ARRAY
11129: PPUSH
11130: CALL_OW 129
11134: GO 11105
11136: POP
11137: POP
// end ;
11138: GO 10969
11140: POP
11141: POP
// end ; if mechanic_list then
11142: LD_VAR 0 3
11146: IFFALSE 11327
// begin for i = 1 to mechanic_list do
11148: LD_ADDR_VAR 0 7
11152: PUSH
11153: DOUBLE
11154: LD_INT 1
11156: DEC
11157: ST_TO_ADDR
11158: LD_VAR 0 3
11162: PUSH
11163: FOR_TO
11164: IFFALSE 11325
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11166: LD_VAR 0 3
11170: PUSH
11171: LD_VAR 0 7
11175: ARRAY
11176: PPUSH
11177: CALL_OW 256
11181: PUSH
11182: LD_INT 333
11184: LESS
11185: IFFALSE 11209
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11187: LD_ADDR_EXP 15
11191: PUSH
11192: LD_EXP 15
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 7
11206: ARRAY
11207: DIFF
11208: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11209: LD_VAR 0 3
11213: PUSH
11214: LD_VAR 0 7
11218: ARRAY
11219: PPUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 296
11229: PUSH
11230: LD_INT 9
11232: GREATER
11233: PUSH
11234: LD_VAR 0 3
11238: PUSH
11239: LD_VAR 0 7
11243: ARRAY
11244: PPUSH
11245: CALL_OW 314
11249: NOT
11250: AND
11251: IFFALSE 11288
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11253: LD_VAR 0 3
11257: PUSH
11258: LD_VAR 0 7
11262: ARRAY
11263: PPUSH
11264: LD_VAR 0 1
11268: PPUSH
11269: CALL_OW 250
11273: PPUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 251
11283: PPUSH
11284: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 256
11297: PUSH
11298: LD_INT 700
11300: LESS
11301: IFFALSE 11323
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11303: LD_VAR 0 3
11307: PUSH
11308: LD_VAR 0 7
11312: ARRAY
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 129
// end ;
11323: GO 11163
11325: POP
11326: POP
// end ; end ;
11327: LD_VAR 0 6
11331: RET
// export function GetBehemoth ( side ) ; begin
11332: LD_INT 0
11334: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_VAR 0 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 31
11354: PUSH
11355: LD_INT 25
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// end ;
11371: LD_VAR 0 2
11375: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11376: LD_INT 0
11378: PPUSH
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11384: LD_ADDR_VAR 0 6
11388: PUSH
11389: LD_VAR 0 2
11393: PPUSH
11394: CALL_OW 435
11398: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11399: LD_ADDR_VAR 0 5
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_VAR 0 1
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 25
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: ST_TO_ADDR
// if skr then
11453: LD_VAR 0 6
11457: IFFALSE 11622
// begin if engs then
11459: LD_VAR 0 5
11463: IFFALSE 11622
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11465: LD_ADDR_VAR 0 8
11469: PUSH
11470: LD_VAR 0 6
11474: PUSH
11475: LD_INT 1
11477: ARRAY
11478: PPUSH
11479: LD_VAR 0 6
11483: PUSH
11484: LD_INT 2
11486: ARRAY
11487: PPUSH
11488: CALL_OW 284
11492: ST_TO_ADDR
// if am > engs then
11493: LD_VAR 0 8
11497: PUSH
11498: LD_VAR 0 5
11502: GREATER
11503: IFFALSE 11515
// am := engs ;
11505: LD_ADDR_VAR 0 8
11509: PUSH
11510: LD_VAR 0 5
11514: ST_TO_ADDR
// for i = 1 to am do
11515: LD_ADDR_VAR 0 7
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_VAR 0 8
11529: PUSH
11530: FOR_TO
11531: IFFALSE 11620
// begin if IsInUnit ( engs [ i ] ) then
11533: LD_VAR 0 5
11537: PUSH
11538: LD_VAR 0 7
11542: ARRAY
11543: PPUSH
11544: CALL_OW 310
11548: IFFALSE 11567
// ComExitBuilding ( engs [ i ] ) else
11550: LD_VAR 0 5
11554: PUSH
11555: LD_VAR 0 7
11559: ARRAY
11560: PPUSH
11561: CALL_OW 122
11565: GO 11618
// if not HasTask ( engs [ i ] ) then
11567: LD_VAR 0 5
11571: PUSH
11572: LD_VAR 0 7
11576: ARRAY
11577: PPUSH
11578: CALL_OW 314
11582: NOT
11583: IFFALSE 11618
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: LD_VAR 0 6
11600: PUSH
11601: LD_INT 1
11603: ARRAY
11604: PPUSH
11605: LD_VAR 0 6
11609: PUSH
11610: LD_INT 2
11612: ARRAY
11613: PPUSH
11614: CALL_OW 117
// end ;
11618: GO 11530
11620: POP
11621: POP
// end ; end ; end ; end_of_file
11622: LD_VAR 0 3
11626: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11627: LD_INT 0
11629: PPUSH
11630: PPUSH
// uc_side := 1 ;
11631: LD_ADDR_OWVAR 20
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// uc_nation := 1 ;
11639: LD_ADDR_OWVAR 21
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 6
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: LD_INT 4
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: LD_OWVAR 67
11670: ARRAY
11671: ST_TO_ADDR
// game_status := false ;
11672: LD_ADDR_EXP 29
11676: PUSH
11677: LD_INT 0
11679: ST_TO_ADDR
// helps_arrive := false ;
11680: LD_ADDR_EXP 30
11684: PUSH
11685: LD_INT 0
11687: ST_TO_ADDR
// helps_can_arrive := false ;
11688: LD_ADDR_EXP 31
11692: PUSH
11693: LD_INT 0
11695: ST_TO_ADDR
// beta_come := false ;
11696: LD_ADDR_EXP 32
11700: PUSH
11701: LD_INT 0
11703: ST_TO_ADDR
// gamma_come := false ;
11704: LD_ADDR_EXP 33
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// zeta_come := false ;
11712: LD_ADDR_EXP 34
11716: PUSH
11717: LD_INT 0
11719: ST_TO_ADDR
// mine_ck := false ;
11720: LD_ADDR_EXP 35
11724: PUSH
11725: LD_INT 0
11727: ST_TO_ADDR
// sib_bomb_constructed := false ;
11728: LD_ADDR_EXP 36
11732: PUSH
11733: LD_INT 0
11735: ST_TO_ADDR
// mine_constructed := false ;
11736: LD_ADDR_EXP 37
11740: PUSH
11741: LD_INT 0
11743: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11744: LD_INT 35
11746: PPUSH
11747: CALL_OW 274
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: LD_INT 200
11757: PUSH
11758: LD_INT 100
11760: PUSH
11761: LD_INT 70
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: PUSH
11769: LD_OWVAR 67
11773: ARRAY
11774: PPUSH
11775: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11779: LD_INT 35
11781: PPUSH
11782: LD_INT 4
11784: PPUSH
11785: CALL_OW 235
// hc_importance := 100 ;
11789: LD_ADDR_OWVAR 32
11793: PUSH
11794: LD_INT 100
11796: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11797: LD_INT 1
11799: PPUSH
11800: LD_INT 2
11802: PPUSH
11803: LD_VAR 0 2
11807: PUSH
11808: LD_INT 1
11810: PLUS
11811: PPUSH
11812: CALL_OW 380
// hc_gallery := hardch ;
11816: LD_ADDR_OWVAR 33
11820: PUSH
11821: LD_STRING hardch
11823: ST_TO_ADDR
// hc_face_number := 1 ;
11824: LD_ADDR_OWVAR 34
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// guyA := CreateHuman ;
11832: LD_ADDR_EXP 38
11836: PUSH
11837: CALL_OW 44
11841: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11842: LD_INT 1
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL_OW 380
// hc_face_number := 2 ;
11857: LD_ADDR_OWVAR 34
11861: PUSH
11862: LD_INT 2
11864: ST_TO_ADDR
// guyB := CreateHuman ;
11865: LD_ADDR_EXP 39
11869: PUSH
11870: CALL_OW 44
11874: ST_TO_ADDR
// hc_importance := 0 ;
11875: LD_ADDR_OWVAR 32
11879: PUSH
11880: LD_INT 0
11882: ST_TO_ADDR
// hc_gallery :=  ;
11883: LD_ADDR_OWVAR 33
11887: PUSH
11888: LD_STRING 
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
// uc_side := 4 ;
11907: LD_ADDR_OWVAR 20
11911: PUSH
11912: LD_INT 4
11914: ST_TO_ADDR
// uc_nation := 1 ;
11915: LD_ADDR_OWVAR 21
11919: PUSH
11920: LD_INT 1
11922: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11923: LD_ADDR_VAR 0 10
11927: PUSH
11928: LD_INT 6
11930: PUSH
11931: LD_INT 5
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: LD_OWVAR 67
11946: ARRAY
11947: ST_TO_ADDR
// Beta_Squad := [ ] ;
11948: LD_ADDR_EXP 40
11952: PUSH
11953: EMPTY
11954: ST_TO_ADDR
// case num of 1 :
11955: LD_VAR 0 1
11959: PUSH
11960: LD_INT 1
11962: DOUBLE
11963: EQUAL
11964: IFTRUE 11968
11966: GO 12011
11968: POP
// begin sold := 2 ;
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_INT 2
11976: ST_TO_ADDR
// sci := 1 ;
11977: LD_ADDR_VAR 0 6
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// mech := 2 ;
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_INT 2
11992: ST_TO_ADDR
// tank := 1 ;
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// cargo := 1 ;
12001: LD_ADDR_VAR 0 9
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// end ; 2 :
12009: GO 12114
12011: LD_INT 2
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12062
12019: POP
// begin sold := 2 ;
12020: LD_ADDR_VAR 0 5
12024: PUSH
12025: LD_INT 2
12027: ST_TO_ADDR
// sci := 1 ;
12028: LD_ADDR_VAR 0 6
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// mech := 1 ;
12036: LD_ADDR_VAR 0 7
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// tank := 1 ;
12044: LD_ADDR_VAR 0 8
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// cargo := 0 ;
12052: LD_ADDR_VAR 0 9
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// end ; 3 :
12060: GO 12114
12062: LD_INT 3
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12113
12070: POP
// begin sold := 1 ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_INT 1
12078: ST_TO_ADDR
// sci := 1 ;
12079: LD_ADDR_VAR 0 6
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// mech := 1 ;
12087: LD_ADDR_VAR 0 7
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// tank := 1 ;
12095: LD_ADDR_VAR 0 8
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// cargo := 0 ;
12103: LD_ADDR_VAR 0 9
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// end ; end ;
12111: GO 12114
12113: POP
// for i = 1 to sold do
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: DOUBLE
12120: LD_INT 1
12122: DEC
12123: ST_TO_ADDR
12124: LD_VAR 0 5
12128: PUSH
12129: FOR_TO
12130: IFFALSE 12202
// begin if i = 1 then
12132: LD_VAR 0 3
12136: PUSH
12137: LD_INT 1
12139: EQUAL
12140: IFFALSE 12159
// PrepareHuman ( sex_male , 1 , skill ) else
12142: LD_INT 1
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: LD_VAR 0 10
12152: PPUSH
12153: CALL_OW 380
12157: GO 12174
// PrepareHuman ( false , 1 , skill ) ;
12159: LD_INT 0
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: LD_VAR 0 10
12169: PPUSH
12170: CALL_OW 380
// un := CreateHuman ;
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: CALL_OW 44
12183: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12184: LD_ADDR_EXP 40
12188: PUSH
12189: LD_EXP 40
12193: PUSH
12194: LD_VAR 0 4
12198: ADD
12199: ST_TO_ADDR
// end ;
12200: GO 12129
12202: POP
12203: POP
// for i = 1 to mech do
12204: LD_ADDR_VAR 0 3
12208: PUSH
12209: DOUBLE
12210: LD_INT 1
12212: DEC
12213: ST_TO_ADDR
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_TO
12220: IFFALSE 12277
// begin PrepareHuman ( false , 3 , skill ) ;
12222: LD_INT 0
12224: PPUSH
12225: LD_INT 3
12227: PPUSH
12228: LD_VAR 0 10
12232: PPUSH
12233: CALL_OW 380
// un := CreateHuman ;
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: CALL_OW 44
12246: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12247: LD_VAR 0 4
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12259: LD_ADDR_EXP 40
12263: PUSH
12264: LD_EXP 40
12268: PUSH
12269: LD_VAR 0 4
12273: ADD
12274: ST_TO_ADDR
// end ;
12275: GO 12219
12277: POP
12278: POP
// for i = 1 to sci do
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: DOUBLE
12285: LD_INT 1
12287: DEC
12288: ST_TO_ADDR
12289: LD_VAR 0 6
12293: PUSH
12294: FOR_TO
12295: IFFALSE 12340
// begin PrepareHuman ( false , 4 , skill ) ;
12297: LD_INT 0
12299: PPUSH
12300: LD_INT 4
12302: PPUSH
12303: LD_VAR 0 10
12307: PPUSH
12308: CALL_OW 380
// un := CreateHuman ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: CALL_OW 44
12321: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12322: LD_ADDR_EXP 40
12326: PUSH
12327: LD_EXP 40
12331: PUSH
12332: LD_VAR 0 4
12336: ADD
12337: ST_TO_ADDR
// end ;
12338: GO 12294
12340: POP
12341: POP
// for i = 1 to tank do
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_VAR 0 8
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12471
// begin Randomize ;
12360: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12364: LD_ADDR_OWVAR 37
12368: PUSH
12369: LD_INT 3
12371: ST_TO_ADDR
// vc_engine := engine_solar ;
12372: LD_ADDR_OWVAR 39
12376: PUSH
12377: LD_INT 2
12379: ST_TO_ADDR
// vc_control := control_manual ;
12380: LD_ADDR_OWVAR 38
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12388: LD_ADDR_OWVAR 40
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: LD_INT 5
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 1
12405: PPUSH
12406: LD_INT 2
12408: PPUSH
12409: CALL_OW 12
12413: ARRAY
12414: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12415: LD_ADDR_OWVAR 41
12419: PUSH
12420: LD_INT 35
12422: PPUSH
12423: LD_INT 55
12425: PPUSH
12426: CALL_OW 12
12430: ST_TO_ADDR
// un := CreateVehicle ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: CALL_OW 45
12440: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12441: LD_VAR 0 4
12445: PPUSH
12446: LD_INT 5
12448: PPUSH
12449: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12453: LD_ADDR_EXP 40
12457: PUSH
12458: LD_EXP 40
12462: PUSH
12463: LD_VAR 0 4
12467: ADD
12468: ST_TO_ADDR
// end ;
12469: GO 12357
12471: POP
12472: POP
// if cargo then
12473: LD_VAR 0 9
12477: IFFALSE 12580
// begin vc_chassis := us_medium_tracked ;
12479: LD_ADDR_OWVAR 37
12483: PUSH
12484: LD_INT 3
12486: ST_TO_ADDR
// vc_engine := engine_solar ;
12487: LD_ADDR_OWVAR 39
12491: PUSH
12492: LD_INT 2
12494: ST_TO_ADDR
// vc_control := control_manual ;
12495: LD_ADDR_OWVAR 38
12499: PUSH
12500: LD_INT 1
12502: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12503: LD_ADDR_OWVAR 40
12507: PUSH
12508: LD_INT 12
12510: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12511: LD_ADDR_OWVAR 41
12515: PUSH
12516: LD_INT 35
12518: PPUSH
12519: LD_INT 55
12521: PPUSH
12522: CALL_OW 12
12526: ST_TO_ADDR
// un := CreateVehicle ;
12527: LD_ADDR_VAR 0 4
12531: PUSH
12532: CALL_OW 45
12536: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12537: LD_VAR 0 4
12541: PPUSH
12542: LD_INT 5
12544: PPUSH
12545: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12549: LD_ADDR_EXP 40
12553: PUSH
12554: LD_EXP 40
12558: PUSH
12559: LD_VAR 0 4
12563: ADD
12564: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12565: LD_VAR 0 4
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: LD_INT 60
12575: PPUSH
12576: CALL_OW 290
// end ; end ;
12580: LD_VAR 0 2
12584: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12585: LD_INT 0
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
12596: PPUSH
// uc_side := 4 ;
12597: LD_ADDR_OWVAR 20
12601: PUSH
12602: LD_INT 4
12604: ST_TO_ADDR
// uc_nation := 1 ;
12605: LD_ADDR_OWVAR 21
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12613: LD_ADDR_VAR 0 11
12617: PUSH
12618: LD_INT 6
12620: PUSH
12621: LD_INT 5
12623: PUSH
12624: LD_INT 4
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_OWVAR 67
12636: ARRAY
12637: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12638: LD_ADDR_EXP 41
12642: PUSH
12643: EMPTY
12644: ST_TO_ADDR
// case num of 1 :
12645: LD_VAR 0 1
12649: PUSH
12650: LD_INT 1
12652: DOUBLE
12653: EQUAL
12654: IFTRUE 12658
12656: GO 12709
12658: POP
// begin sold := 2 ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_INT 2
12666: ST_TO_ADDR
// eng := 2 ;
12667: LD_ADDR_VAR 0 6
12671: PUSH
12672: LD_INT 2
12674: ST_TO_ADDR
// sci := 0 ;
12675: LD_ADDR_VAR 0 7
12679: PUSH
12680: LD_INT 0
12682: ST_TO_ADDR
// mech := 1 ;
12683: LD_ADDR_VAR 0 8
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// tank := 0 ;
12691: LD_ADDR_VAR 0 9
12695: PUSH
12696: LD_INT 0
12698: ST_TO_ADDR
// cargo := 1 ;
12699: LD_ADDR_VAR 0 10
12703: PUSH
12704: LD_INT 1
12706: ST_TO_ADDR
// end ; 2 :
12707: GO 12828
12709: LD_INT 2
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12768
12717: POP
// begin sold := 1 ;
12718: LD_ADDR_VAR 0 5
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// eng := 2 ;
12726: LD_ADDR_VAR 0 6
12730: PUSH
12731: LD_INT 2
12733: ST_TO_ADDR
// sci := 0 ;
12734: LD_ADDR_VAR 0 7
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// mech := 1 ;
12742: LD_ADDR_VAR 0 8
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// tank := 0 ;
12750: LD_ADDR_VAR 0 9
12754: PUSH
12755: LD_INT 0
12757: ST_TO_ADDR
// cargo := 1 ;
12758: LD_ADDR_VAR 0 10
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// end ; 3 :
12766: GO 12828
12768: LD_INT 3
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12827
12776: POP
// begin sold := 1 ;
12777: LD_ADDR_VAR 0 5
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// eng := 1 ;
12785: LD_ADDR_VAR 0 6
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// sci := 0 ;
12793: LD_ADDR_VAR 0 7
12797: PUSH
12798: LD_INT 0
12800: ST_TO_ADDR
// mech := 1 ;
12801: LD_ADDR_VAR 0 8
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// tank := 0 ;
12809: LD_ADDR_VAR 0 9
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// cargo := 1 ;
12817: LD_ADDR_VAR 0 10
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
// end ; end ;
12825: GO 12828
12827: POP
// for i = 1 to sold do
12828: LD_ADDR_VAR 0 3
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_VAR 0 5
12842: PUSH
12843: FOR_TO
12844: IFFALSE 12916
// begin if i = 1 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 1
12853: EQUAL
12854: IFFALSE 12873
// PrepareHuman ( sex_male , 1 , skill ) else
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: LD_VAR 0 11
12866: PPUSH
12867: CALL_OW 380
12871: GO 12888
// PrepareHuman ( false , 1 , skill ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: LD_VAR 0 11
12883: PPUSH
12884: CALL_OW 380
// un := CreateHuman ;
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: CALL_OW 44
12897: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12898: LD_ADDR_EXP 41
12902: PUSH
12903: LD_EXP 41
12907: PUSH
12908: LD_VAR 0 4
12912: ADD
12913: ST_TO_ADDR
// end ;
12914: GO 12843
12916: POP
12917: POP
// for i = 1 to mech do
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: DOUBLE
12924: LD_INT 1
12926: DEC
12927: ST_TO_ADDR
12928: LD_VAR 0 8
12932: PUSH
12933: FOR_TO
12934: IFFALSE 12991
// begin PrepareHuman ( false , 3 , skill ) ;
12936: LD_INT 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_VAR 0 11
12946: PPUSH
12947: CALL_OW 380
// un := CreateHuman ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: CALL_OW 44
12960: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12961: LD_VAR 0 4
12965: PPUSH
12966: LD_INT 3
12968: PPUSH
12969: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12973: LD_ADDR_EXP 41
12977: PUSH
12978: LD_EXP 41
12982: PUSH
12983: LD_VAR 0 4
12987: ADD
12988: ST_TO_ADDR
// end ;
12989: GO 12933
12991: POP
12992: POP
// for i = 1 to eng do
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: DOUBLE
12999: LD_INT 1
13001: DEC
13002: ST_TO_ADDR
13003: LD_VAR 0 6
13007: PUSH
13008: FOR_TO
13009: IFFALSE 13054
// begin PrepareHuman ( false , 2 , skill ) ;
13011: LD_INT 0
13013: PPUSH
13014: LD_INT 2
13016: PPUSH
13017: LD_VAR 0 11
13021: PPUSH
13022: CALL_OW 380
// un := CreateHuman ;
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: CALL_OW 44
13035: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13036: LD_ADDR_EXP 41
13040: PUSH
13041: LD_EXP 41
13045: PUSH
13046: LD_VAR 0 4
13050: ADD
13051: ST_TO_ADDR
// end ;
13052: GO 13008
13054: POP
13055: POP
// for i = 1 to tank do
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: DOUBLE
13062: LD_INT 1
13064: DEC
13065: ST_TO_ADDR
13066: LD_VAR 0 9
13070: PUSH
13071: FOR_TO
13072: IFFALSE 13185
// begin Randomize ;
13074: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13078: LD_ADDR_OWVAR 37
13082: PUSH
13083: LD_INT 2
13085: ST_TO_ADDR
// vc_engine := engine_siberite ;
13086: LD_ADDR_OWVAR 39
13090: PUSH
13091: LD_INT 3
13093: ST_TO_ADDR
// vc_control := control_manual ;
13094: LD_ADDR_OWVAR 38
13098: PUSH
13099: LD_INT 1
13101: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13102: LD_ADDR_OWVAR 40
13106: PUSH
13107: LD_INT 7
13109: PUSH
13110: LD_INT 9
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 1
13119: PPUSH
13120: LD_INT 2
13122: PPUSH
13123: CALL_OW 12
13127: ARRAY
13128: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13129: LD_ADDR_OWVAR 41
13133: PUSH
13134: LD_INT 35
13136: PPUSH
13137: LD_INT 55
13139: PPUSH
13140: CALL_OW 12
13144: ST_TO_ADDR
// un := CreateVehicle ;
13145: LD_ADDR_VAR 0 4
13149: PUSH
13150: CALL_OW 45
13154: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13155: LD_VAR 0 4
13159: PPUSH
13160: LD_INT 5
13162: PPUSH
13163: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13167: LD_ADDR_EXP 41
13171: PUSH
13172: LD_EXP 41
13176: PUSH
13177: LD_VAR 0 4
13181: ADD
13182: ST_TO_ADDR
// end ;
13183: GO 13071
13185: POP
13186: POP
// if cargo then
13187: LD_VAR 0 10
13191: IFFALSE 13309
// begin vc_chassis := us_medium_tracked ;
13193: LD_ADDR_OWVAR 37
13197: PUSH
13198: LD_INT 3
13200: ST_TO_ADDR
// vc_engine := engine_combustion ;
13201: LD_ADDR_OWVAR 39
13205: PUSH
13206: LD_INT 1
13208: ST_TO_ADDR
// vc_control := control_manual ;
13209: LD_ADDR_OWVAR 38
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13217: LD_ADDR_OWVAR 40
13221: PUSH
13222: LD_INT 12
13224: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13225: LD_ADDR_OWVAR 41
13229: PUSH
13230: LD_INT 35
13232: PPUSH
13233: LD_INT 55
13235: PPUSH
13236: CALL_OW 12
13240: ST_TO_ADDR
// un := CreateVehicle ;
13241: LD_ADDR_VAR 0 4
13245: PUSH
13246: CALL_OW 45
13250: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13251: LD_VAR 0 4
13255: PPUSH
13256: LD_INT 5
13258: PPUSH
13259: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13263: LD_ADDR_EXP 41
13267: PUSH
13268: LD_EXP 41
13272: PUSH
13273: LD_VAR 0 4
13277: ADD
13278: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_INT 3
13286: PPUSH
13287: LD_INT 30
13289: PPUSH
13290: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13294: LD_VAR 0 4
13298: PPUSH
13299: LD_INT 1
13301: PPUSH
13302: LD_INT 40
13304: PPUSH
13305: CALL_OW 290
// end ; end ;
13309: LD_VAR 0 2
13313: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
// uc_side := 4 ;
13326: LD_ADDR_OWVAR 20
13330: PUSH
13331: LD_INT 4
13333: ST_TO_ADDR
// uc_nation := 1 ;
13334: LD_ADDR_OWVAR 21
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13342: LD_ADDR_VAR 0 10
13346: PUSH
13347: LD_INT 6
13349: PUSH
13350: LD_INT 5
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: PUSH
13361: LD_OWVAR 67
13365: ARRAY
13366: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13367: LD_ADDR_EXP 42
13371: PUSH
13372: EMPTY
13373: ST_TO_ADDR
// sold := 1 ;
13374: LD_ADDR_VAR 0 4
13378: PUSH
13379: LD_INT 1
13381: ST_TO_ADDR
// eng := 0 ;
13382: LD_ADDR_VAR 0 5
13386: PUSH
13387: LD_INT 0
13389: ST_TO_ADDR
// sci := 0 ;
13390: LD_ADDR_VAR 0 6
13394: PUSH
13395: LD_INT 0
13397: ST_TO_ADDR
// mech := 3 ;
13398: LD_ADDR_VAR 0 7
13402: PUSH
13403: LD_INT 3
13405: ST_TO_ADDR
// tank := 3 ;
13406: LD_ADDR_VAR 0 8
13410: PUSH
13411: LD_INT 3
13413: ST_TO_ADDR
// cargo := 0 ;
13414: LD_ADDR_VAR 0 9
13418: PUSH
13419: LD_INT 0
13421: ST_TO_ADDR
// for i = 1 to sold do
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: DOUBLE
13428: LD_INT 1
13430: DEC
13431: ST_TO_ADDR
13432: LD_VAR 0 4
13436: PUSH
13437: FOR_TO
13438: IFFALSE 13510
// begin if i = 1 then
13440: LD_VAR 0 2
13444: PUSH
13445: LD_INT 1
13447: EQUAL
13448: IFFALSE 13467
// PrepareHuman ( sex_male , 1 , skill ) else
13450: LD_INT 1
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_VAR 0 10
13460: PPUSH
13461: CALL_OW 380
13465: GO 13482
// PrepareHuman ( false , 1 , skill ) ;
13467: LD_INT 0
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: LD_VAR 0 10
13477: PPUSH
13478: CALL_OW 380
// un := CreateHuman ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: CALL_OW 44
13491: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13492: LD_ADDR_EXP 42
13496: PUSH
13497: LD_EXP 42
13501: PUSH
13502: LD_VAR 0 3
13506: ADD
13507: ST_TO_ADDR
// end ;
13508: GO 13437
13510: POP
13511: POP
// for i = 1 to mech do
13512: LD_ADDR_VAR 0 2
13516: PUSH
13517: DOUBLE
13518: LD_INT 1
13520: DEC
13521: ST_TO_ADDR
13522: LD_VAR 0 7
13526: PUSH
13527: FOR_TO
13528: IFFALSE 13585
// begin PrepareHuman ( false , 3 , skill ) ;
13530: LD_INT 0
13532: PPUSH
13533: LD_INT 3
13535: PPUSH
13536: LD_VAR 0 10
13540: PPUSH
13541: CALL_OW 380
// un := CreateHuman ;
13545: LD_ADDR_VAR 0 3
13549: PUSH
13550: CALL_OW 44
13554: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13567: LD_ADDR_EXP 42
13571: PUSH
13572: LD_EXP 42
13576: PUSH
13577: LD_VAR 0 3
13581: ADD
13582: ST_TO_ADDR
// end ;
13583: GO 13527
13585: POP
13586: POP
// for i = 1 to tank do
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: DOUBLE
13593: LD_INT 1
13595: DEC
13596: ST_TO_ADDR
13597: LD_VAR 0 8
13601: PUSH
13602: FOR_TO
13603: IFFALSE 13849
// begin Randomize ;
13605: CALL_OW 10
// if i < 3 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 3
13616: LESS
13617: IFFALSE 13726
// begin vc_chassis := us_medium_tracked ;
13619: LD_ADDR_OWVAR 37
13623: PUSH
13624: LD_INT 3
13626: ST_TO_ADDR
// vc_engine := engine_combustion ;
13627: LD_ADDR_OWVAR 39
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// vc_control := control_manual ;
13635: LD_ADDR_OWVAR 38
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13643: LD_ADDR_OWVAR 40
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 9
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 1
13660: PPUSH
13661: LD_INT 2
13663: PPUSH
13664: CALL_OW 12
13668: ARRAY
13669: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13670: LD_ADDR_OWVAR 41
13674: PUSH
13675: LD_INT 35
13677: PPUSH
13678: LD_INT 55
13680: PPUSH
13681: CALL_OW 12
13685: ST_TO_ADDR
// un := CreateVehicle ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: CALL_OW 45
13695: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13696: LD_VAR 0 3
13700: PPUSH
13701: LD_INT 5
13703: PPUSH
13704: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13708: LD_ADDR_EXP 42
13712: PUSH
13713: LD_EXP 42
13717: PUSH
13718: LD_VAR 0 3
13722: ADD
13723: ST_TO_ADDR
// end else
13724: GO 13847
// begin uc_nation := 3 ;
13726: LD_ADDR_OWVAR 21
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13734: LD_ADDR_OWVAR 37
13738: PUSH
13739: LD_INT 22
13741: ST_TO_ADDR
// vc_engine := engine_combustion ;
13742: LD_ADDR_OWVAR 39
13746: PUSH
13747: LD_INT 1
13749: ST_TO_ADDR
// vc_control := control_manual ;
13750: LD_ADDR_OWVAR 38
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13758: LD_ADDR_OWVAR 40
13762: PUSH
13763: LD_INT 51
13765: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13766: LD_ADDR_OWVAR 41
13770: PUSH
13771: LD_INT 35
13773: PPUSH
13774: LD_INT 55
13776: PPUSH
13777: CALL_OW 12
13781: ST_TO_ADDR
// un := CreateVehicle ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: CALL_OW 45
13791: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13792: LD_VAR 0 3
13796: PPUSH
13797: LD_INT 496
13799: PPUSH
13800: CALL_OW 234
// SetTag ( un , 5 ) ;
13804: LD_VAR 0 3
13808: PPUSH
13809: LD_INT 5
13811: PPUSH
13812: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13816: LD_VAR 0 3
13820: PPUSH
13821: LD_INT 2
13823: PPUSH
13824: LD_INT 100
13826: PPUSH
13827: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13831: LD_ADDR_EXP 42
13835: PUSH
13836: LD_EXP 42
13840: PUSH
13841: LD_VAR 0 3
13845: ADD
13846: ST_TO_ADDR
// end ; end ;
13847: GO 13602
13849: POP
13850: POP
// end ; end_of_file
13851: LD_VAR 0 1
13855: RET
// export function Action ; begin
13856: LD_INT 0
13858: PPUSH
// InGameOn ;
13859: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13863: LD_INT 151
13865: PPUSH
13866: LD_INT 107
13868: PPUSH
13869: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13873: LD_EXP 38
13877: PPUSH
13878: LD_INT 171
13880: PPUSH
13881: LD_INT 108
13883: PPUSH
13884: LD_INT 0
13886: PPUSH
13887: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13891: LD_EXP 39
13895: PPUSH
13896: LD_INT 172
13898: PPUSH
13899: LD_INT 110
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13909: LD_EXP 38
13913: PPUSH
13914: LD_INT 156
13916: PPUSH
13917: LD_INT 107
13919: PPUSH
13920: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13924: LD_EXP 39
13928: PPUSH
13929: LD_INT 154
13931: PPUSH
13932: LD_INT 105
13934: PPUSH
13935: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13939: LD_INT 4
13941: PPUSH
13942: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13946: LD_EXP 38
13950: PPUSH
13951: CALL_OW 250
13955: PUSH
13956: LD_INT 156
13958: EQUAL
13959: PUSH
13960: LD_EXP 38
13964: PPUSH
13965: CALL_OW 251
13969: PUSH
13970: LD_INT 107
13972: EQUAL
13973: AND
13974: IFFALSE 13939
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13976: LD_EXP 38
13980: PUSH
13981: LD_EXP 39
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
13997: LD_EXP 38
14001: PPUSH
14002: LD_STRING D1-A-1
14004: PPUSH
14005: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14009: LD_EXP 39
14013: PPUSH
14014: LD_STRING D1-B-1
14016: PPUSH
14017: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14021: LD_EXP 38
14025: PPUSH
14026: LD_STRING D1-A-2
14028: PPUSH
14029: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14033: LD_EXP 39
14037: PPUSH
14038: LD_STRING D1-B-2
14040: PPUSH
14041: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14045: LD_EXP 38
14049: PUSH
14050: LD_EXP 39
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: LD_INT 147
14061: PPUSH
14062: LD_INT 108
14064: PPUSH
14065: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14069: LD_EXP 38
14073: PPUSH
14074: LD_STRING D1-A-3
14076: PPUSH
14077: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14081: LD_INT 4
14083: PPUSH
14084: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14088: LD_EXP 38
14092: PPUSH
14093: LD_INT 35
14095: PPUSH
14096: CALL_OW 296
14100: PUSH
14101: LD_INT 8
14103: LESS
14104: IFFALSE 14081
// ComTurnUnit ( guyA , guyB ) ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_EXP 39
14115: PPUSH
14116: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14120: LD_EXP 39
14124: PPUSH
14125: LD_EXP 38
14129: PPUSH
14130: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14134: LD_EXP 38
14138: PPUSH
14139: LD_STRING D1-A-10
14141: PPUSH
14142: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14146: LD_EXP 39
14150: PPUSH
14151: LD_STRING D1-B-10
14153: PPUSH
14154: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14158: LD_EXP 38
14162: PPUSH
14163: LD_STRING D1-A-11
14165: PPUSH
14166: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14170: LD_EXP 39
14174: PPUSH
14175: LD_STRING D1-B-11
14177: PPUSH
14178: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14182: LD_EXP 38
14186: PPUSH
14187: LD_STRING D1-A-12
14189: PPUSH
14190: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14194: LD_EXP 39
14198: PPUSH
14199: LD_STRING D1-B-12
14201: PPUSH
14202: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14206: LD_EXP 38
14210: PPUSH
14211: LD_STRING D1-A-13
14213: PPUSH
14214: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14218: LD_EXP 39
14222: PPUSH
14223: LD_STRING D1-B-13
14225: PPUSH
14226: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14230: LD_EXP 38
14234: PPUSH
14235: LD_STRING D1-A-14
14237: PPUSH
14238: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14242: LD_EXP 39
14246: PPUSH
14247: LD_STRING D1-B-14
14249: PPUSH
14250: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14254: LD_EXP 38
14258: PPUSH
14259: LD_STRING D1-A-15
14261: PPUSH
14262: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14266: LD_EXP 39
14270: PPUSH
14271: LD_STRING D1-B-15
14273: PPUSH
14274: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14278: LD_EXP 38
14282: PPUSH
14283: LD_STRING D1-A-16
14285: PPUSH
14286: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14290: LD_EXP 39
14294: PPUSH
14295: LD_STRING D1-B-16
14297: PPUSH
14298: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14302: LD_EXP 38
14306: PPUSH
14307: LD_STRING D1-A-17
14309: PPUSH
14310: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14314: LD_EXP 39
14318: PPUSH
14319: LD_STRING D1-B-17
14321: PPUSH
14322: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14326: LD_EXP 38
14330: PPUSH
14331: LD_STRING D1-A-18
14333: PPUSH
14334: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14338: LD_INT 35
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14348: LD_EXP 38
14352: PUSH
14353: LD_EXP 39
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: LD_INT 35
14364: PPUSH
14365: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14369: LD_INT 4
14371: PPUSH
14372: CALL_OW 67
// until IsInUnit ( guyA ) ;
14376: LD_EXP 38
14380: PPUSH
14381: CALL_OW 310
14385: IFFALSE 14369
// Wait ( 0 0$02 ) ;
14387: LD_INT 70
14389: PPUSH
14390: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14394: LD_EXP 38
14398: PPUSH
14399: LD_STRING D1-A-19
14401: PPUSH
14402: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14406: LD_EXP 39
14410: PPUSH
14411: LD_STRING D1-B-19
14413: PPUSH
14414: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14418: LD_EXP 38
14422: PPUSH
14423: LD_STRING D1-A-20
14425: PPUSH
14426: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14430: LD_INT 10
14432: PPUSH
14433: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14437: LD_EXP 39
14441: PPUSH
14442: LD_STRING D1-B-20
14444: PPUSH
14445: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14449: LD_EXP 38
14453: PPUSH
14454: LD_STRING D1-A-21
14456: PPUSH
14457: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14461: LD_EXP 39
14465: PPUSH
14466: LD_STRING D1-B-21
14468: PPUSH
14469: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14473: LD_EXP 38
14477: PPUSH
14478: LD_STRING D1-A-22
14480: PPUSH
14481: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14485: LD_EXP 39
14489: PPUSH
14490: LD_STRING D1-B-22
14492: PPUSH
14493: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14497: LD_EXP 38
14501: PPUSH
14502: LD_STRING D1-A-23
14504: PPUSH
14505: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14509: LD_EXP 39
14513: PPUSH
14514: LD_STRING D1-B-23
14516: PPUSH
14517: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14521: LD_EXP 38
14525: PPUSH
14526: LD_STRING D1-A-24
14528: PPUSH
14529: CALL_OW 88
// InGameOff ;
14533: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14537: LD_STRING M_main
14539: PPUSH
14540: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14544: LD_INT 4
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 343
// game_status := true ;
14554: LD_ADDR_EXP 29
14558: PUSH
14559: LD_INT 1
14561: ST_TO_ADDR
// end ;
14562: LD_VAR 0 1
14566: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14567: LD_INT 1
14569: PPUSH
14570: CALL 6358 0 1
14574: PUSH
14575: LD_INT 0
14577: GREATER
14578: IFFALSE 14680
14580: GO 14582
14582: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14590: LD_INT 1
14592: PPUSH
14593: CALL 6358 0 1
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: CALL_OW 461
14606: PUSH
14607: LD_INT 1
14609: NONEQUAL
14610: IFFALSE 14583
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14612: LD_EXP 38
14616: PPUSH
14617: CALL_OW 300
14621: PUSH
14622: LD_EXP 39
14626: PPUSH
14627: CALL_OW 300
14631: AND
14632: PUSH
14633: LD_EXP 30
14637: NOT
14638: AND
14639: IFFALSE 14665
// begin Say ( guyA , DL-A-1 ) ;
14641: LD_EXP 38
14645: PPUSH
14646: LD_STRING DL-A-1
14648: PPUSH
14649: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14653: LD_EXP 39
14657: PPUSH
14658: LD_STRING DL-B-1
14660: PPUSH
14661: CALL_OW 88
// end ; if not helps_can_arrive then
14665: LD_EXP 31
14669: NOT
14670: IFFALSE 14680
// helps_can_arrive := true ;
14672: LD_ADDR_EXP 31
14676: PUSH
14677: LD_INT 1
14679: ST_TO_ADDR
// end ;
14680: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14681: LD_INT 1
14683: PPUSH
14684: CALL 6358 0 1
14688: PUSH
14689: LD_INT 0
14691: GREATER
14692: PUSH
14693: LD_EXP 38
14697: PPUSH
14698: CALL_OW 300
14702: AND
14703: PUSH
14704: LD_EXP 39
14708: PPUSH
14709: CALL_OW 300
14713: AND
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 25
14727: PUSH
14728: LD_INT 12
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: PUSH
14744: LD_INT 0
14746: EQUAL
14747: AND
14748: PUSH
14749: LD_INT 1
14751: PPUSH
14752: LD_INT 25
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: PPUSH
14767: LD_EXP 38
14771: PPUSH
14772: CALL_OW 74
14776: PPUSH
14777: CALL_OW 292
14781: AND
14782: IFFALSE 14823
14784: GO 14786
14786: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14787: LD_EXP 38
14791: PPUSH
14792: LD_STRING DA-A-1
14794: PPUSH
14795: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14799: LD_EXP 39
14803: PPUSH
14804: LD_STRING DA-B-1
14806: PPUSH
14807: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14811: LD_EXP 38
14815: PPUSH
14816: LD_STRING DA-A-2
14818: PPUSH
14819: CALL_OW 88
// end ;
14823: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14824: LD_EXP 29
14828: PUSH
14829: LD_EXP 38
14833: PPUSH
14834: LD_INT 6
14836: PPUSH
14837: CALL_OW 299
14841: PUSH
14842: LD_INT 7
14844: LESS
14845: AND
14846: IFFALSE 14899
14848: GO 14850
14850: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14851: LD_INT 117
14853: PPUSH
14854: LD_INT 50
14856: PPUSH
14857: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14861: LD_INT 1
14863: PPUSH
14864: CALL 9995 0 1
14868: PUSH
14869: LD_INT 2
14871: ARRAY
14872: PPUSH
14873: LD_STRING D5-A-1
14875: PPUSH
14876: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14880: LD_INT 1
14882: PPUSH
14883: CALL 9995 0 1
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: LD_STRING D5-B-1
14894: PPUSH
14895: CALL_OW 88
// end ;
14899: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14900: LD_INT 7
14902: PPUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: PUSH
14918: LD_INT 0
14920: GREATER
14921: IFFALSE 15066
14923: GO 14925
14925: DISABLE
// begin Wait ( 0 0$03 ) ;
14926: LD_INT 105
14928: PPUSH
14929: CALL_OW 67
// DialogueOn ;
14933: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14937: LD_INT 1
14939: PPUSH
14940: CALL 9995 0 1
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_STRING D6-A-1
14951: PPUSH
14952: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14956: LD_INT 1
14958: PPUSH
14959: CALL 9995 0 1
14963: PUSH
14964: LD_INT 2
14966: ARRAY
14967: PPUSH
14968: LD_STRING D6-B-1
14970: PPUSH
14971: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14975: LD_INT 95
14977: PPUSH
14978: LD_INT 8
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_INT 20
14986: PPUSH
14987: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
14991: LD_INT 10
14993: PPUSH
14994: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
14998: LD_INT 1
15000: PPUSH
15001: CALL 9995 0 1
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: LD_STRING D6-A-2
15012: PPUSH
15013: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15017: LD_INT 1
15019: PPUSH
15020: CALL 9995 0 1
15024: PUSH
15025: LD_INT 2
15027: ARRAY
15028: PPUSH
15029: LD_STRING D6-B-2
15031: PPUSH
15032: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15036: LD_INT 1
15038: PPUSH
15039: CALL 9995 0 1
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_STRING D6-A-3
15050: PPUSH
15051: CALL_OW 88
// DialogueOff ;
15055: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15059: LD_STRING M_base
15061: PPUSH
15062: CALL_OW 337
// end ;
15066: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15067: LD_EXP 30
15071: NOT
15072: PUSH
15073: LD_INT 22
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 2
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PUSH
15102: LD_INT 0
15104: GREATER
15105: AND
15106: IFFALSE 15239
15108: GO 15110
15110: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15111: LD_INT 35
15113: PPUSH
15114: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15118: LD_INT 22
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 21
15130: PUSH
15131: LD_INT 2
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PPUSH
15142: CALL_OW 69
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL 9995 0 1
15154: PUSH
15155: LD_INT 1
15157: ARRAY
15158: PPUSH
15159: CALL_OW 74
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL 9995 0 1
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 296
15180: PUSH
15181: LD_INT 7
15183: LESS
15184: IFFALSE 15111
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15186: LD_INT 1
15188: PPUSH
15189: CALL 9995 0 1
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_STRING DR-A-1
15200: PPUSH
15201: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15205: LD_INT 1
15207: PPUSH
15208: CALL 9995 0 1
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: LD_STRING DR-B-1
15219: PPUSH
15220: CALL_OW 88
// Wait ( 3 3$00 ) ;
15224: LD_INT 6300
15226: PPUSH
15227: CALL_OW 67
// ru_spotted := true ;
15231: LD_ADDR_EXP 16
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// end ;
15239: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15240: LD_INT 35
15242: PPUSH
15243: CALL_OW 300
15247: NOT
15248: IFFALSE 15272
15250: GO 15252
15252: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15253: LD_INT 1
15255: PPUSH
15256: CALL 9995 0 1
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_STRING DDR-A-1
15267: PPUSH
15268: CALL_OW 88
15272: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15273: LD_INT 1
15275: PPUSH
15276: LD_INT 30
15278: PPUSH
15279: CALL 6209 0 2
15283: IFFALSE 15365
15285: GO 15287
15287: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15288: LD_INT 35
15290: PPUSH
15291: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15295: LD_INT 1
15297: PPUSH
15298: LD_INT 30
15300: PPUSH
15301: CALL 6209 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 461
15314: PUSH
15315: LD_INT 1
15317: NONEQUAL
15318: IFFALSE 15288
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15320: LD_INT 1
15322: PPUSH
15323: CALL 9995 0 1
15327: PUSH
15328: LD_INT 1
15330: ARRAY
15331: PPUSH
15332: LD_STRING D8-A-1
15334: PPUSH
15335: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15339: LD_INT 1
15341: PPUSH
15342: CALL 9995 0 1
15346: PUSH
15347: LD_INT 2
15349: ARRAY
15350: PPUSH
15351: LD_STRING D8-B-1
15353: PPUSH
15354: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15358: LD_STRING M_mineok
15360: PPUSH
15361: CALL_OW 337
// end ;
15365: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15366: LD_INT 22
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 30
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: LD_INT 57
15391: PUSH
15392: EMPTY
15393: LIST
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: PUSH
15409: LD_INT 1
15411: GREATER
15412: PUSH
15413: LD_INT 22
15415: PUSH
15416: LD_INT 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: LD_INT 57
15438: PUSH
15439: EMPTY
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: PPUSH
15451: CALL_OW 69
15455: PUSH
15456: LD_INT 1
15458: EQUAL
15459: PUSH
15460: LD_INT 35
15462: PPUSH
15463: CALL_OW 300
15467: NOT
15468: AND
15469: OR
15470: IFFALSE 15522
15472: GO 15474
15474: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 25
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: PUSH
15504: LD_INT 1
15506: ARRAY
15507: PPUSH
15508: LD_STRING D7-A-1
15510: PPUSH
15511: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15515: LD_STRING M_baseok
15517: PPUSH
15518: CALL_OW 337
// end ;
15522: END
// every 0 0$01 trigger mine_ck do
15523: LD_EXP 35
15527: IFFALSE 15558
15529: GO 15531
15531: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15532: LD_INT 1
15534: PPUSH
15535: CALL 9995 0 1
15539: PUSH
15540: LD_INT 1
15542: ARRAY
15543: PPUSH
15544: LD_STRING D9-A-1
15546: PPUSH
15547: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15551: LD_STRING M_minedest
15553: PPUSH
15554: CALL_OW 337
// end ;
15558: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15559: LD_EXP 29
15563: IFFALSE 16069
15565: GO 15567
15567: DISABLE
15568: LD_INT 0
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15575: LD_OWVAR 67
15579: PPUSH
15580: CALL 11896 0 1
// if not helps_can_arrive then
15584: LD_EXP 31
15588: NOT
15589: IFFALSE 15617
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15591: LD_EXP 40
15595: PUSH
15596: LD_INT 1
15598: ARRAY
15599: PPUSH
15600: LD_STRING DB-Delay
15602: PPUSH
15603: CALL_OW 94
// time := 10 10$00 ;
15607: LD_ADDR_VAR 0 1
15611: PUSH
15612: LD_INT 21000
15614: ST_TO_ADDR
// end else
15615: GO 15625
// time := 3 3$00 ;
15617: LD_ADDR_VAR 0 1
15621: PUSH
15622: LD_INT 6300
15624: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 35
15637: MINUS
15638: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15639: LD_INT 35
15641: PPUSH
15642: CALL_OW 67
// end until time = 0 0$00 ;
15646: LD_VAR 0 1
15650: PUSH
15651: LD_INT 0
15653: EQUAL
15654: IFFALSE 15625
// helps_arrive := true ;
15656: LD_ADDR_EXP 30
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// if IsLive ( guyA ) then
15664: LD_EXP 38
15668: PPUSH
15669: CALL_OW 300
15673: IFFALSE 15687
// r := guyA else
15675: LD_ADDR_VAR 0 4
15679: PUSH
15680: LD_EXP 38
15684: ST_TO_ADDR
15685: GO 15697
// r := guyB ;
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: LD_EXP 39
15696: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15697: LD_EXP 40
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: LD_STRING D2-A-1
15708: PPUSH
15709: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15713: LD_VAR 0 4
15717: PPUSH
15718: LD_STRING D2-B-1
15720: PPUSH
15721: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15725: LD_EXP 40
15729: PUSH
15730: LD_INT 1
15732: ARRAY
15733: PPUSH
15734: LD_STRING D2-A-2
15736: PPUSH
15737: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15741: LD_VAR 0 4
15745: PPUSH
15746: LD_STRING D2-B-2
15748: PPUSH
15749: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15753: LD_EXP 40
15757: PUSH
15758: LD_INT 1
15760: ARRAY
15761: PPUSH
15762: LD_STRING D2-A-3
15764: PPUSH
15765: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15769: LD_VAR 0 4
15773: PPUSH
15774: LD_STRING D2-B-3
15776: PPUSH
15777: CALL_OW 88
// to_veh := [ ] ;
15781: LD_ADDR_VAR 0 5
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: DOUBLE
15794: LD_INT 1
15796: DEC
15797: ST_TO_ADDR
15798: LD_EXP 40
15802: PUSH
15803: FOR_TO
15804: IFFALSE 16067
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15806: LD_EXP 40
15810: PUSH
15811: LD_VAR 0 2
15815: ARRAY
15816: PPUSH
15817: CALL_OW 110
15821: PUSH
15822: LD_INT 3
15824: EQUAL
15825: IFFALSE 15851
// to_veh := to_veh ^ Beta_Squad [ i ] else
15827: LD_ADDR_VAR 0 5
15831: PUSH
15832: LD_VAR 0 5
15836: PUSH
15837: LD_EXP 40
15841: PUSH
15842: LD_VAR 0 2
15846: ARRAY
15847: ADD
15848: ST_TO_ADDR
15849: GO 15976
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15851: LD_EXP 40
15855: PUSH
15856: LD_VAR 0 2
15860: ARRAY
15861: PPUSH
15862: CALL_OW 110
15866: PUSH
15867: LD_INT 5
15869: EQUAL
15870: IFFALSE 15955
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15872: LD_EXP 40
15876: PUSH
15877: LD_VAR 0 2
15881: ARRAY
15882: PPUSH
15883: LD_INT 4
15885: PPUSH
15886: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 5
15903: PPUSH
15904: LD_INT 0
15906: PPUSH
15907: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15911: LD_VAR 0 5
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_EXP 40
15924: PUSH
15925: LD_VAR 0 2
15929: ARRAY
15930: PPUSH
15931: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15935: LD_ADDR_VAR 0 5
15939: PUSH
15940: LD_VAR 0 5
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 3
15952: ST_TO_ADDR
// end else
15953: GO 15976
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15955: LD_EXP 40
15959: PUSH
15960: LD_VAR 0 2
15964: ARRAY
15965: PPUSH
15966: LD_INT 5
15968: PPUSH
15969: LD_INT 0
15971: PPUSH
15972: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15976: LD_EXP 40
15980: PUSH
15981: LD_VAR 0 2
15985: ARRAY
15986: PPUSH
15987: LD_INT 165
15989: PPUSH
15990: LD_INT 105
15992: PPUSH
15993: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
15997: LD_INT 70
15999: PPUSH
16000: LD_INT 140
16002: PPUSH
16003: CALL_OW 12
16007: PPUSH
16008: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16012: LD_EXP 40
16016: PUSH
16017: LD_VAR 0 2
16021: ARRAY
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 235
// if i = 1 then
16030: LD_VAR 0 2
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: IFFALSE 16050
// CenterNowOnXY ( 168 , 109 ) ;
16040: LD_INT 168
16042: PPUSH
16043: LD_INT 109
16045: PPUSH
16046: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16050: LD_EXP 40
16054: PUSH
16055: LD_VAR 0 2
16059: ARRAY
16060: PPUSH
16061: CALL_OW 141
// end ;
16065: GO 15803
16067: POP
16068: POP
// end ;
16069: PPOPN 5
16071: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16072: LD_EXP 30
16076: IFFALSE 17105
16078: GO 16080
16080: DISABLE
16081: LD_INT 0
16083: PPUSH
16084: PPUSH
// begin Wait ( 5 5$00 ) ;
16085: LD_INT 10500
16087: PPUSH
16088: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16092: LD_OWVAR 67
16096: PPUSH
16097: CALL 12585 0 1
// to_veh := [ ] ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: EMPTY
16107: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16108: LD_ADDR_VAR 0 1
16112: PUSH
16113: DOUBLE
16114: LD_INT 1
16116: DEC
16117: ST_TO_ADDR
16118: LD_EXP 41
16122: PUSH
16123: FOR_TO
16124: IFFALSE 16352
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16126: LD_EXP 41
16130: PUSH
16131: LD_VAR 0 1
16135: ARRAY
16136: PPUSH
16137: CALL_OW 110
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16171
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16147: LD_ADDR_VAR 0 2
16151: PUSH
16152: LD_VAR 0 2
16156: PUSH
16157: LD_EXP 41
16161: PUSH
16162: LD_VAR 0 1
16166: ARRAY
16167: ADD
16168: ST_TO_ADDR
16169: GO 16296
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16171: LD_EXP 41
16175: PUSH
16176: LD_VAR 0 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 110
16186: PUSH
16187: LD_INT 5
16189: EQUAL
16190: IFFALSE 16275
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16192: LD_EXP 41
16196: PUSH
16197: LD_VAR 0 1
16201: ARRAY
16202: PPUSH
16203: LD_INT 4
16205: PPUSH
16206: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 5
16223: PPUSH
16224: LD_INT 0
16226: PPUSH
16227: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: LD_EXP 41
16244: PUSH
16245: LD_VAR 0 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: CALL_OW 3
16272: ST_TO_ADDR
// end else
16273: GO 16296
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16275: LD_EXP 41
16279: PUSH
16280: LD_VAR 0 1
16284: ARRAY
16285: PPUSH
16286: LD_INT 5
16288: PPUSH
16289: LD_INT 0
16291: PPUSH
16292: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16296: LD_EXP 41
16300: PUSH
16301: LD_VAR 0 1
16305: ARRAY
16306: PPUSH
16307: LD_INT 164
16309: PPUSH
16310: LD_INT 104
16312: PPUSH
16313: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16317: LD_INT 70
16319: PPUSH
16320: LD_INT 140
16322: PPUSH
16323: CALL_OW 12
16327: PPUSH
16328: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16332: LD_EXP 41
16336: PUSH
16337: LD_VAR 0 1
16341: ARRAY
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 235
// end ;
16350: GO 16123
16352: POP
16353: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16354: LD_EXP 41
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_STRING D3-A-1
16365: PPUSH
16366: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16370: LD_INT 1
16372: PPUSH
16373: CALL 9995 0 1
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_STRING D3-B-1
16384: PPUSH
16385: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16389: LD_EXP 41
16393: PUSH
16394: LD_INT 1
16396: ARRAY
16397: PPUSH
16398: LD_STRING D3-A-2
16400: PPUSH
16401: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16405: LD_INT 1
16407: PPUSH
16408: CALL 9995 0 1
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_STRING D3-B-2
16419: PPUSH
16420: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16424: LD_EXP 41
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: LD_STRING D3-A-3
16435: PPUSH
16436: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16440: LD_INT 1
16442: PPUSH
16443: CALL 9995 0 1
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: PPUSH
16452: LD_STRING D3-B-3
16454: PPUSH
16455: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16459: LD_EXP 41
16463: PUSH
16464: LD_INT 1
16466: ARRAY
16467: PPUSH
16468: LD_STRING D3-A-4
16470: PPUSH
16471: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16475: LD_INT 1
16477: PPUSH
16478: CALL 9995 0 1
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_STRING D3-B-4
16489: PPUSH
16490: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16494: LD_EXP 41
16498: PUSH
16499: LD_INT 1
16501: ARRAY
16502: PPUSH
16503: LD_STRING D3-A-5
16505: PPUSH
16506: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16510: LD_INT 1
16512: PPUSH
16513: CALL 9995 0 1
16517: PUSH
16518: LD_INT 1
16520: ARRAY
16521: PPUSH
16522: LD_STRING D3-B-5
16524: PPUSH
16525: CALL_OW 88
// for i = 1 to Gamma_Squad do
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: DOUBLE
16535: LD_INT 1
16537: DEC
16538: ST_TO_ADDR
16539: LD_EXP 41
16543: PUSH
16544: FOR_TO
16545: IFFALSE 16567
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16547: LD_EXP 41
16551: PUSH
16552: LD_VAR 0 1
16556: ARRAY
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 235
16565: GO 16544
16567: POP
16568: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16569: LD_INT 6300
16571: PUSH
16572: LD_INT 10500
16574: PUSH
16575: LD_INT 11550
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: LD_OWVAR 67
16587: ARRAY
16588: PPUSH
16589: CALL_OW 67
// AddZetaSquad ;
16593: CALL 13314 0 0
// Wait ( 0 0$10 ) ;
16597: LD_INT 350
16599: PPUSH
16600: CALL_OW 67
// to_veh := [ ] ;
16604: LD_ADDR_VAR 0 2
16608: PUSH
16609: EMPTY
16610: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: DOUBLE
16617: LD_INT 1
16619: DEC
16620: ST_TO_ADDR
16621: LD_EXP 42
16625: PUSH
16626: FOR_TO
16627: IFFALSE 16837
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16629: LD_EXP 42
16633: PUSH
16634: LD_VAR 0 1
16638: ARRAY
16639: PPUSH
16640: CALL_OW 110
16644: PUSH
16645: LD_INT 3
16647: EQUAL
16648: IFFALSE 16674
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_EXP 42
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: ADD
16671: ST_TO_ADDR
16672: GO 16799
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16674: LD_EXP 42
16678: PUSH
16679: LD_VAR 0 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 110
16689: PUSH
16690: LD_INT 5
16692: EQUAL
16693: IFFALSE 16778
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16695: LD_EXP 42
16699: PUSH
16700: LD_VAR 0 1
16704: ARRAY
16705: PPUSH
16706: LD_INT 4
16708: PPUSH
16709: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 5
16726: PPUSH
16727: LD_INT 0
16729: PPUSH
16730: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 1
16741: ARRAY
16742: PPUSH
16743: LD_EXP 42
16747: PUSH
16748: LD_VAR 0 1
16752: ARRAY
16753: PPUSH
16754: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16758: LD_ADDR_VAR 0 2
16762: PUSH
16763: LD_VAR 0 2
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 3
16775: ST_TO_ADDR
// end else
16776: GO 16799
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16778: LD_EXP 42
16782: PUSH
16783: LD_VAR 0 1
16787: ARRAY
16788: PPUSH
16789: LD_INT 5
16791: PPUSH
16792: LD_INT 0
16794: PPUSH
16795: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16799: LD_EXP 42
16803: PUSH
16804: LD_VAR 0 1
16808: ARRAY
16809: PPUSH
16810: LD_INT 165
16812: PPUSH
16813: LD_INT 105
16815: PPUSH
16816: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16820: LD_INT 70
16822: PPUSH
16823: LD_INT 140
16825: PPUSH
16826: CALL_OW 12
16830: PPUSH
16831: CALL_OW 67
// end ;
16835: GO 16626
16837: POP
16838: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16839: LD_EXP 42
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: LD_STRING D4-A-1
16850: PPUSH
16851: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16855: LD_INT 1
16857: PPUSH
16858: CALL 9995 0 1
16862: PUSH
16863: LD_INT 1
16865: ARRAY
16866: PPUSH
16867: LD_STRING D4-B-1
16869: PPUSH
16870: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16874: LD_EXP 42
16878: PUSH
16879: LD_INT 1
16881: ARRAY
16882: PPUSH
16883: LD_STRING D4-A-2
16885: PPUSH
16886: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16890: LD_INT 1
16892: PPUSH
16893: CALL 9995 0 1
16897: PUSH
16898: LD_INT 1
16900: ARRAY
16901: PPUSH
16902: LD_STRING D4-B-2
16904: PPUSH
16905: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16909: LD_EXP 42
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: LD_STRING D4-A-3
16920: PPUSH
16921: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16925: LD_INT 1
16927: PPUSH
16928: CALL 9995 0 1
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_STRING D4-B-3
16939: PPUSH
16940: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16944: LD_EXP 42
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: PPUSH
16953: LD_STRING D4-A-4
16955: PPUSH
16956: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16960: LD_INT 1
16962: PPUSH
16963: CALL 9995 0 1
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: LD_STRING D4-B-4
16974: PPUSH
16975: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16979: LD_EXP 42
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: LD_STRING D4-A-5
16990: PPUSH
16991: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
16995: LD_INT 1
16997: PPUSH
16998: CALL 9995 0 1
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PPUSH
17007: LD_STRING D4-B-5
17009: PPUSH
17010: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17014: LD_EXP 42
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: PPUSH
17023: LD_STRING D4-A-6
17025: PPUSH
17026: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17030: LD_INT 1
17032: PPUSH
17033: CALL 9995 0 1
17037: PUSH
17038: LD_INT 1
17040: ARRAY
17041: PPUSH
17042: LD_STRING D4-B-6
17044: PPUSH
17045: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17049: LD_EXP 42
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: LD_STRING D4-A-7
17060: PPUSH
17061: CALL_OW 94
// for i = 1 to Zeta_Squad do
17065: LD_ADDR_VAR 0 1
17069: PUSH
17070: DOUBLE
17071: LD_INT 1
17073: DEC
17074: ST_TO_ADDR
17075: LD_EXP 42
17079: PUSH
17080: FOR_TO
17081: IFFALSE 17103
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17083: LD_EXP 42
17087: PUSH
17088: LD_VAR 0 1
17092: ARRAY
17093: PPUSH
17094: LD_INT 1
17096: PPUSH
17097: CALL_OW 235
17101: GO 17080
17103: POP
17104: POP
// end ;
17105: PPOPN 2
17107: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17108: LD_INT 11
17110: PPUSH
17111: LD_INT 22
17113: PUSH
17114: LD_OWVAR 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 70
17127: PUSH
17128: LD_INT 0
17130: GREATER
17131: IFFALSE 17156
17133: GO 17135
17135: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17136: LD_EXP 38
17140: PPUSH
17141: LD_STRING D10-A-1
17143: PPUSH
17144: CALL_OW 88
// ru_spotted := true ;
17148: LD_ADDR_EXP 16
17152: PUSH
17153: LD_INT 1
17155: ST_TO_ADDR
// end ;
17156: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17157: LD_EXP 38
17161: PPUSH
17162: CALL_OW 301
17166: PUSH
17167: LD_EXP 39
17171: PPUSH
17172: CALL_OW 301
17176: OR
17177: IFFALSE 17189
17179: GO 17181
17181: DISABLE
// begin YouLost ( DieP ) ;
17182: LD_STRING DieP
17184: PPUSH
17185: CALL_OW 104
// end ;
17189: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17190: LD_INT 34
17192: PUSH
17193: LD_INT 8
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PPUSH
17200: CALL_OW 69
17204: IFFALSE 17217
17206: GO 17208
17208: DISABLE
// sib_bomb_constructed := true ;
17209: LD_ADDR_EXP 36
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
17217: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17218: LD_EXP 29
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 3
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PUSH
17238: LD_INT 0
17240: EQUAL
17241: AND
17242: IFFALSE 17445
17244: GO 17246
17246: DISABLE
17247: LD_INT 0
17249: PPUSH
// begin game_status := false ;
17250: LD_ADDR_EXP 29
17254: PUSH
17255: LD_INT 0
17257: ST_TO_ADDR
// if not depotConstructed then
17258: LD_EXP 2
17262: NOT
17263: IFFALSE 17272
// SetAchievement ( ACH_NODEPOT ) ;
17265: LD_STRING ACH_NODEPOT
17267: PPUSH
17268: CALL_OW 543
// if Difficulty = 3 then
17272: LD_OWVAR 67
17276: PUSH
17277: LD_INT 3
17279: EQUAL
17280: IFFALSE 17289
// SetAchievement ( ACH_HARD ) ;
17282: LD_STRING ACH_HARD
17284: PPUSH
17285: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17289: LD_OWVAR 1
17293: PUSH
17294: LD_INT 35
17296: DIVREAL
17297: PUSH
17298: LD_INT 60
17300: DIVREAL
17301: PUSH
17302: LD_INT 70
17304: PUSH
17305: LD_INT 60
17307: PUSH
17308: LD_INT 50
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_OWVAR 67
17320: ARRAY
17321: LESS
17322: IFFALSE 17336
// AddMedal ( play , 1 ) else
17324: LD_STRING play
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: CALL_OW 101
17334: GO 17347
// AddMedal ( play , - 1 ) ;
17336: LD_STRING play
17338: PPUSH
17339: LD_INT 1
17341: NEG
17342: PPUSH
17343: CALL_OW 101
// if sib_bomb_constructed then
17347: LD_EXP 36
17351: IFFALSE 17365
// AddMedal ( sibbomb , 1 ) else
17353: LD_STRING sibbomb
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: CALL_OW 101
17363: GO 17376
// AddMedal ( sibbomb , - 1 ) ;
17365: LD_STRING sibbomb
17367: PPUSH
17368: LD_INT 1
17370: NEG
17371: PPUSH
17372: CALL_OW 101
// if mine_constructed and not mine_ck then
17376: LD_EXP 37
17380: PUSH
17381: LD_EXP 35
17385: NOT
17386: AND
17387: IFFALSE 17399
// AddMedal ( mine , 1 ) ;
17389: LD_STRING mine
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 101
// if mine_ck then
17399: LD_EXP 35
17403: IFFALSE 17416
// AddMedal ( mine , - 1 ) ;
17405: LD_STRING mine
17407: PPUSH
17408: LD_INT 1
17410: NEG
17411: PPUSH
17412: CALL_OW 101
// if not mine_constructed then
17416: LD_EXP 37
17420: NOT
17421: IFFALSE 17434
// AddMedal ( mine , - 2 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 2
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// GiveMedals ( Main ) ;
17434: LD_STRING Main
17436: PPUSH
17437: CALL_OW 102
// YouWin ;
17441: CALL_OW 103
// end ; end_of_file
17445: PPOPN 1
17447: END
// every 0 0$03 trigger game_status do var time ;
17448: LD_EXP 29
17452: IFFALSE 17617
17454: GO 17456
17456: DISABLE
17457: LD_INT 0
17459: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_INT 1050
17467: PUSH
17468: LD_INT 1575
17470: PUSH
17471: LD_INT 2100
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: LD_OWVAR 67
17483: ARRAY
17484: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17485: LD_VAR 0 1
17489: PUSH
17490: LD_INT 0
17492: PPUSH
17493: LD_INT 420
17495: PPUSH
17496: CALL_OW 12
17500: PLUS
17501: PPUSH
17502: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17506: LD_INT 1
17508: PPUSH
17509: LD_INT 5
17511: PPUSH
17512: CALL_OW 12
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17524: LD_INT 105
17526: PPUSH
17527: LD_INT 1050
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17539: LD_INT 1
17541: PPUSH
17542: LD_INT 5
17544: PPUSH
17545: CALL_OW 12
17549: PPUSH
17550: LD_INT 148
17552: PPUSH
17553: LD_INT 107
17555: PPUSH
17556: LD_INT 20
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17566: LD_OWVAR 1
17570: PUSH
17571: LD_INT 44100
17573: PUSH
17574: LD_INT 37800
17576: PUSH
17577: LD_INT 33600
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_OWVAR 67
17589: ARRAY
17590: MOD
17591: IFFALSE 17607
// time := time + 0 0$20 ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 700
17605: PLUS
17606: ST_TO_ADDR
// end until game_status = false ;
17607: LD_EXP 29
17611: PUSH
17612: LD_INT 0
17614: EQUAL
17615: IFFALSE 17485
// end ;
17617: PPOPN 1
17619: END
// every 0 0$03 trigger game_status do var time ;
17620: LD_EXP 29
17624: IFFALSE 17778
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 700
17639: PUSH
17640: LD_INT 875
17642: PUSH
17643: LD_INT 1400
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: LD_OWVAR 67
17655: ARRAY
17656: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17657: LD_VAR 0 1
17661: PUSH
17662: LD_INT 0
17664: PPUSH
17665: LD_INT 385
17667: PPUSH
17668: CALL_OW 12
17672: PLUS
17673: PPUSH
17674: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17678: LD_INT 1
17680: PPUSH
17681: LD_INT 5
17683: PPUSH
17684: CALL_OW 12
17688: PPUSH
17689: LD_INT 102
17691: PPUSH
17692: LD_INT 6
17694: PPUSH
17695: LD_INT 25
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17705: LD_OWVAR 1
17709: PUSH
17710: LD_INT 52500
17712: PUSH
17713: LD_INT 46200
17715: PUSH
17716: LD_INT 42000
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: PUSH
17724: LD_OWVAR 67
17728: ARRAY
17729: MOD
17730: IFFALSE 17746
// time := time + 0 0$25 ;
17732: LD_ADDR_VAR 0 1
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: LD_INT 875
17744: PLUS
17745: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17746: LD_OWVAR 1
17750: PUSH
17751: LD_INT 231000
17753: MOD
17754: PUSH
17755: LD_INT 0
17757: EQUAL
17758: IFFALSE 17768
// time := 0 0$30 ;
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_INT 1050
17767: ST_TO_ADDR
// end until game_status = false ;
17768: LD_EXP 29
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17657
// end ;
17778: PPOPN 1
17780: END
// every 0 0$03 trigger game_status do var time ;
17781: LD_EXP 29
17785: IFFALSE 17921
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: LD_INT 1050
17800: PUSH
17801: LD_INT 1575
17803: PUSH
17804: LD_INT 1750
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: LD_OWVAR 67
17816: ARRAY
17817: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17818: LD_VAR 0 1
17822: PUSH
17823: LD_INT 0
17825: PPUSH
17826: LD_INT 385
17828: PPUSH
17829: CALL_OW 12
17833: PLUS
17834: PPUSH
17835: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 5
17844: PPUSH
17845: CALL_OW 12
17849: PPUSH
17850: LD_INT 51
17852: PPUSH
17853: LD_INT 74
17855: PPUSH
17856: LD_INT 25
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17866: LD_OWVAR 1
17870: PUSH
17871: LD_INT 84000
17873: PUSH
17874: LD_INT 105000
17876: PUSH
17877: LD_INT 136500
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_OWVAR 67
17889: ARRAY
17890: MOD
17891: PUSH
17892: LD_INT 0
17894: EQUAL
17895: IFFALSE 17911
// time := time + 0 0$15 ;
17897: LD_ADDR_VAR 0 1
17901: PUSH
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 525
17909: PLUS
17910: ST_TO_ADDR
// end until game_status = false ;
17911: LD_EXP 29
17915: PUSH
17916: LD_INT 0
17918: EQUAL
17919: IFFALSE 17818
// end ; end_of_file
17921: PPOPN 1
17923: END
// every 0 0$01 trigger not debug do
17924: LD_EXP 1
17928: NOT
17929: IFFALSE 17952
17931: GO 17933
17933: DISABLE
// begin enable ;
17934: ENABLE
// Display_Strings := [ #tick , tick ] ;
17935: LD_ADDR_OWVAR 47
17939: PUSH
17940: LD_STRING #tick
17942: PUSH
17943: LD_OWVAR 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
// end ; end_of_file
17952: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
17953: LD_VAR 0 1
17957: PPUSH
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL 34659 0 2
// if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 255
17976: PUSH
17977: LD_INT 3
17979: EQUAL
17980: PUSH
17981: LD_VAR 0 1
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: LD_INT 34
17991: PUSH
17992: LD_INT 46
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 34
18001: PUSH
18002: LD_INT 47
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 34
18011: PUSH
18012: LD_INT 45
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: PUSH
18025: EMPTY
18026: LIST
18027: PPUSH
18028: CALL_OW 69
18032: IN
18033: AND
18034: IFFALSE 18052
// ru_reserve := ru_reserve ^ un ;
18036: LD_ADDR_EXP 9
18040: PUSH
18041: LD_EXP 9
18045: PUSH
18046: LD_VAR 0 1
18050: ADD
18051: ST_TO_ADDR
// if GetSide ( un ) = 3 and not GetWeapon ( un ) in [ ru_siberium_rocket , ru_crane ] then
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 255
18061: PUSH
18062: LD_INT 3
18064: EQUAL
18065: PUSH
18066: LD_VAR 0 1
18070: PPUSH
18071: CALL_OW 264
18075: PUSH
18076: LD_INT 48
18078: PUSH
18079: LD_INT 52
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: IN
18086: NOT
18087: AND
18088: IFFALSE 18105
// ComMoveXY ( un , 65 , 60 ) ;
18090: LD_VAR 0 1
18094: PPUSH
18095: LD_INT 65
18097: PPUSH
18098: LD_INT 60
18100: PPUSH
18101: CALL_OW 111
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18105: LD_VAR 0 1
18109: PUSH
18110: LD_INT 22
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 34
18122: PUSH
18123: LD_INT 48
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 69
18138: IN
18139: IFFALSE 18192
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18141: LD_INT 12
18143: PPUSH
18144: LD_INT 22
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PPUSH
18154: CALL_OW 70
18158: IFFALSE 18177
// ComAttackPlace ( un , 98 , 10 ) else
18160: LD_VAR 0 1
18164: PPUSH
18165: LD_INT 98
18167: PPUSH
18168: LD_INT 10
18170: PPUSH
18171: CALL_OW 116
18175: GO 18192
// ComAttackPlace ( un , 134 , 99 ) ;
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_INT 134
18184: PPUSH
18185: LD_INT 99
18187: PPUSH
18188: CALL_OW 116
// end ;
18192: PPOPN 2
18194: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18195: LD_VAR 0 1
18199: PPUSH
18200: CALL 34539 0 1
// if GetChassis ( un ) = 25 then
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 265
18213: PUSH
18214: LD_INT 25
18216: EQUAL
18217: IFFALSE 18226
// SetAchievement ( ACH_BEH ) ;
18219: LD_STRING ACH_BEH
18221: PPUSH
18222: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18226: LD_VAR 0 1
18230: PUSH
18231: LD_INT 22
18233: PUSH
18234: LD_INT 3
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 21
18243: PUSH
18244: LD_INT 3
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PPUSH
18255: CALL_OW 69
18259: IN
18260: PUSH
18261: LD_VAR 0 1
18265: PPUSH
18266: CALL_OW 266
18270: PUSH
18271: LD_INT 0
18273: PUSH
18274: LD_INT 29
18276: PUSH
18277: LD_INT 30
18279: PUSH
18280: LD_INT 26
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: IN
18289: NOT
18290: AND
18291: IFFALSE 18377
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18293: LD_ADDR_EXP 13
18297: PUSH
18298: LD_EXP 13
18302: PUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 266
18312: ADD
18313: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18314: LD_ADDR_EXP 13
18318: PUSH
18319: LD_EXP 13
18323: PUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 250
18333: ADD
18334: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18335: LD_ADDR_EXP 13
18339: PUSH
18340: LD_EXP 13
18344: PUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 251
18354: ADD
18355: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18356: LD_ADDR_EXP 13
18360: PUSH
18361: LD_EXP 13
18365: PUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 254
18375: ADD
18376: ST_TO_ADDR
// end ; if un in ru_attack_list then
18377: LD_VAR 0 1
18381: PUSH
18382: LD_EXP 10
18386: IN
18387: IFFALSE 18405
// ru_attack_list := ru_attack_list diff un ;
18389: LD_ADDR_EXP 10
18393: PUSH
18394: LD_EXP 10
18398: PUSH
18399: LD_VAR 0 1
18403: DIFF
18404: ST_TO_ADDR
// if un in ru_protector then
18405: LD_VAR 0 1
18409: PUSH
18410: LD_EXP 17
18414: IN
18415: IFFALSE 18433
// ru_protector := ru_protector diff un ;
18417: LD_ADDR_EXP 17
18421: PUSH
18422: LD_EXP 17
18426: PUSH
18427: LD_VAR 0 1
18431: DIFF
18432: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 266
18442: PUSH
18443: LD_INT 30
18445: EQUAL
18446: PUSH
18447: LD_VAR 0 1
18451: PPUSH
18452: CALL_OW 255
18456: PUSH
18457: LD_INT 1
18459: EQUAL
18460: AND
18461: IFFALSE 18471
// mine_ck := true ;
18463: LD_ADDR_EXP 35
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// end ;
18471: PPOPN 1
18473: END
// on BuildingComplete ( un ) do var i ;
18474: LD_INT 0
18476: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18477: LD_VAR 0 1
18481: PPUSH
18482: CALL_OW 255
18486: PUSH
18487: LD_INT 1
18489: EQUAL
18490: PUSH
18491: LD_VAR 0 1
18495: PPUSH
18496: CALL_OW 266
18500: PUSH
18501: LD_INT 0
18503: EQUAL
18504: AND
18505: IFFALSE 18515
// depotConstructed := true ;
18507: LD_ADDR_EXP 2
18511: PUSH
18512: LD_INT 1
18514: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 255
18524: PUSH
18525: LD_INT 1
18527: EQUAL
18528: PUSH
18529: LD_VAR 0 1
18533: PPUSH
18534: CALL_OW 266
18538: PUSH
18539: LD_INT 30
18541: EQUAL
18542: AND
18543: IFFALSE 18553
// mine_constructed := true ;
18545: LD_ADDR_EXP 37
18549: PUSH
18550: LD_INT 1
18552: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 255
18562: PUSH
18563: LD_INT 3
18565: EQUAL
18566: PUSH
18567: LD_VAR 0 1
18571: PPUSH
18572: CALL_OW 266
18576: PUSH
18577: LD_INT 0
18579: EQUAL
18580: AND
18581: IFFALSE 18638
// begin for i = 1 to 2 do
18583: LD_ADDR_VAR 0 2
18587: PUSH
18588: DOUBLE
18589: LD_INT 1
18591: DEC
18592: ST_TO_ADDR
18593: LD_INT 2
18595: PUSH
18596: FOR_TO
18597: IFFALSE 18636
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18599: LD_EXP 20
18603: PUSH
18604: LD_VAR 0 2
18608: ARRAY
18609: PPUSH
18610: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18614: LD_EXP 20
18618: PUSH
18619: LD_VAR 0 2
18623: ARRAY
18624: PPUSH
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 180
// end ;
18634: GO 18596
18636: POP
18637: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18638: LD_VAR 0 1
18642: PPUSH
18643: CALL_OW 255
18647: PUSH
18648: LD_INT 3
18650: EQUAL
18651: PUSH
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 266
18661: PUSH
18662: LD_EXP 13
18666: IN
18667: AND
18668: IFFALSE 18708
// for i = 1 to 4 do
18670: LD_ADDR_VAR 0 2
18674: PUSH
18675: DOUBLE
18676: LD_INT 1
18678: DEC
18679: ST_TO_ADDR
18680: LD_INT 4
18682: PUSH
18683: FOR_TO
18684: IFFALSE 18706
// ru_blist := Delete ( ru_blist , 1 ) ;
18686: LD_ADDR_EXP 13
18690: PUSH
18691: LD_EXP 13
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL_OW 3
18703: ST_TO_ADDR
18704: GO 18683
18706: POP
18707: POP
// end ;
18708: PPOPN 2
18710: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18711: LD_VAR 0 1
18715: PPUSH
18716: LD_VAR 0 2
18720: PPUSH
18721: LD_VAR 0 3
18725: PPUSH
18726: CALL 34635 0 3
// end ;
18730: PPOPN 3
18732: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18733: LD_VAR 0 1
18737: PPUSH
18738: CALL 34643 0 1
// end ; end_of_file end_of_file
18742: PPOPN 1
18744: END
// export globalGameSaveCounter ; every 0 0$1 do
18745: GO 18747
18747: DISABLE
// begin enable ;
18748: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18749: LD_STRING updateTimer(
18751: PUSH
18752: LD_OWVAR 1
18756: STR
18757: PUSH
18758: LD_STRING );
18760: STR
18761: PPUSH
18762: CALL_OW 559
// end ;
18766: END
// every 0 0$1 do
18767: GO 18769
18769: DISABLE
// begin globalGameSaveCounter := 0 ;
18770: LD_ADDR_EXP 43
18774: PUSH
18775: LD_INT 0
18777: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
18778: LD_STRING setGameSaveCounter(0)
18780: PPUSH
18781: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
18785: LD_STRING initStreamRollete();
18787: PPUSH
18788: CALL_OW 559
// InitStreamMode ;
18792: CALL 20118 0 0
// DefineStreamItems ( false ) ;
18796: LD_INT 0
18798: PPUSH
18799: CALL 20582 0 1
// end ;
18803: END
// export function SOS_MapStart ( ) ; begin
18804: LD_INT 0
18806: PPUSH
// if streamModeActive then
18807: LD_EXP 44
18811: IFFALSE 18820
// DefineStreamItems ( true ) ;
18813: LD_INT 1
18815: PPUSH
18816: CALL 20582 0 1
// UpdateLuaVariables ( ) ;
18820: CALL 18837 0 0
// UpdateFactoryWaypoints ( ) ;
18824: CALL 33443 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18828: CALL 33700 0 0
// end ;
18832: LD_VAR 0 1
18836: RET
// function UpdateLuaVariables ( ) ; begin
18837: LD_INT 0
18839: PPUSH
// if globalGameSaveCounter then
18840: LD_EXP 43
18844: IFFALSE 18878
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
18846: LD_ADDR_EXP 43
18850: PUSH
18851: LD_EXP 43
18855: PPUSH
18856: CALL 77657 0 1
18860: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18861: LD_STRING setGameSaveCounter(
18863: PUSH
18864: LD_EXP 43
18868: STR
18869: PUSH
18870: LD_STRING )
18872: STR
18873: PPUSH
18874: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
18878: LD_STRING setGameDifficulty(
18880: PUSH
18881: LD_OWVAR 67
18885: STR
18886: PUSH
18887: LD_STRING )
18889: STR
18890: PPUSH
18891: CALL_OW 559
// end ;
18895: LD_VAR 0 1
18899: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18900: LD_INT 0
18902: PPUSH
// if p2 = stream_mode then
18903: LD_VAR 0 2
18907: PUSH
18908: LD_INT 100
18910: EQUAL
18911: IFFALSE 19914
// begin if not StreamModeActive then
18913: LD_EXP 44
18917: NOT
18918: IFFALSE 18928
// StreamModeActive := true ;
18920: LD_ADDR_EXP 44
18924: PUSH
18925: LD_INT 1
18927: ST_TO_ADDR
// if p3 = 0 then
18928: LD_VAR 0 3
18932: PUSH
18933: LD_INT 0
18935: EQUAL
18936: IFFALSE 18942
// InitStreamMode ;
18938: CALL 20118 0 0
// if p3 = 1 then
18942: LD_VAR 0 3
18946: PUSH
18947: LD_INT 1
18949: EQUAL
18950: IFFALSE 18960
// sRocket := true ;
18952: LD_ADDR_EXP 49
18956: PUSH
18957: LD_INT 1
18959: ST_TO_ADDR
// if p3 = 2 then
18960: LD_VAR 0 3
18964: PUSH
18965: LD_INT 2
18967: EQUAL
18968: IFFALSE 18978
// sSpeed := true ;
18970: LD_ADDR_EXP 48
18974: PUSH
18975: LD_INT 1
18977: ST_TO_ADDR
// if p3 = 3 then
18978: LD_VAR 0 3
18982: PUSH
18983: LD_INT 3
18985: EQUAL
18986: IFFALSE 18996
// sEngine := true ;
18988: LD_ADDR_EXP 50
18992: PUSH
18993: LD_INT 1
18995: ST_TO_ADDR
// if p3 = 4 then
18996: LD_VAR 0 3
19000: PUSH
19001: LD_INT 4
19003: EQUAL
19004: IFFALSE 19014
// sSpec := true ;
19006: LD_ADDR_EXP 47
19010: PUSH
19011: LD_INT 1
19013: ST_TO_ADDR
// if p3 = 5 then
19014: LD_VAR 0 3
19018: PUSH
19019: LD_INT 5
19021: EQUAL
19022: IFFALSE 19032
// sLevel := true ;
19024: LD_ADDR_EXP 51
19028: PUSH
19029: LD_INT 1
19031: ST_TO_ADDR
// if p3 = 6 then
19032: LD_VAR 0 3
19036: PUSH
19037: LD_INT 6
19039: EQUAL
19040: IFFALSE 19050
// sArmoury := true ;
19042: LD_ADDR_EXP 52
19046: PUSH
19047: LD_INT 1
19049: ST_TO_ADDR
// if p3 = 7 then
19050: LD_VAR 0 3
19054: PUSH
19055: LD_INT 7
19057: EQUAL
19058: IFFALSE 19068
// sRadar := true ;
19060: LD_ADDR_EXP 53
19064: PUSH
19065: LD_INT 1
19067: ST_TO_ADDR
// if p3 = 8 then
19068: LD_VAR 0 3
19072: PUSH
19073: LD_INT 8
19075: EQUAL
19076: IFFALSE 19086
// sBunker := true ;
19078: LD_ADDR_EXP 54
19082: PUSH
19083: LD_INT 1
19085: ST_TO_ADDR
// if p3 = 9 then
19086: LD_VAR 0 3
19090: PUSH
19091: LD_INT 9
19093: EQUAL
19094: IFFALSE 19104
// sHack := true ;
19096: LD_ADDR_EXP 55
19100: PUSH
19101: LD_INT 1
19103: ST_TO_ADDR
// if p3 = 10 then
19104: LD_VAR 0 3
19108: PUSH
19109: LD_INT 10
19111: EQUAL
19112: IFFALSE 19122
// sFire := true ;
19114: LD_ADDR_EXP 56
19118: PUSH
19119: LD_INT 1
19121: ST_TO_ADDR
// if p3 = 11 then
19122: LD_VAR 0 3
19126: PUSH
19127: LD_INT 11
19129: EQUAL
19130: IFFALSE 19140
// sRefresh := true ;
19132: LD_ADDR_EXP 57
19136: PUSH
19137: LD_INT 1
19139: ST_TO_ADDR
// if p3 = 12 then
19140: LD_VAR 0 3
19144: PUSH
19145: LD_INT 12
19147: EQUAL
19148: IFFALSE 19158
// sExp := true ;
19150: LD_ADDR_EXP 58
19154: PUSH
19155: LD_INT 1
19157: ST_TO_ADDR
// if p3 = 13 then
19158: LD_VAR 0 3
19162: PUSH
19163: LD_INT 13
19165: EQUAL
19166: IFFALSE 19176
// sDepot := true ;
19168: LD_ADDR_EXP 59
19172: PUSH
19173: LD_INT 1
19175: ST_TO_ADDR
// if p3 = 14 then
19176: LD_VAR 0 3
19180: PUSH
19181: LD_INT 14
19183: EQUAL
19184: IFFALSE 19194
// sFlag := true ;
19186: LD_ADDR_EXP 60
19190: PUSH
19191: LD_INT 1
19193: ST_TO_ADDR
// if p3 = 15 then
19194: LD_VAR 0 3
19198: PUSH
19199: LD_INT 15
19201: EQUAL
19202: IFFALSE 19212
// sKamikadze := true ;
19204: LD_ADDR_EXP 68
19208: PUSH
19209: LD_INT 1
19211: ST_TO_ADDR
// if p3 = 16 then
19212: LD_VAR 0 3
19216: PUSH
19217: LD_INT 16
19219: EQUAL
19220: IFFALSE 19230
// sTroll := true ;
19222: LD_ADDR_EXP 69
19226: PUSH
19227: LD_INT 1
19229: ST_TO_ADDR
// if p3 = 17 then
19230: LD_VAR 0 3
19234: PUSH
19235: LD_INT 17
19237: EQUAL
19238: IFFALSE 19248
// sSlow := true ;
19240: LD_ADDR_EXP 70
19244: PUSH
19245: LD_INT 1
19247: ST_TO_ADDR
// if p3 = 18 then
19248: LD_VAR 0 3
19252: PUSH
19253: LD_INT 18
19255: EQUAL
19256: IFFALSE 19266
// sLack := true ;
19258: LD_ADDR_EXP 71
19262: PUSH
19263: LD_INT 1
19265: ST_TO_ADDR
// if p3 = 19 then
19266: LD_VAR 0 3
19270: PUSH
19271: LD_INT 19
19273: EQUAL
19274: IFFALSE 19284
// sTank := true ;
19276: LD_ADDR_EXP 73
19280: PUSH
19281: LD_INT 1
19283: ST_TO_ADDR
// if p3 = 20 then
19284: LD_VAR 0 3
19288: PUSH
19289: LD_INT 20
19291: EQUAL
19292: IFFALSE 19302
// sRemote := true ;
19294: LD_ADDR_EXP 74
19298: PUSH
19299: LD_INT 1
19301: ST_TO_ADDR
// if p3 = 21 then
19302: LD_VAR 0 3
19306: PUSH
19307: LD_INT 21
19309: EQUAL
19310: IFFALSE 19320
// sPowell := true ;
19312: LD_ADDR_EXP 75
19316: PUSH
19317: LD_INT 1
19319: ST_TO_ADDR
// if p3 = 22 then
19320: LD_VAR 0 3
19324: PUSH
19325: LD_INT 22
19327: EQUAL
19328: IFFALSE 19338
// sTeleport := true ;
19330: LD_ADDR_EXP 78
19334: PUSH
19335: LD_INT 1
19337: ST_TO_ADDR
// if p3 = 23 then
19338: LD_VAR 0 3
19342: PUSH
19343: LD_INT 23
19345: EQUAL
19346: IFFALSE 19356
// sOilTower := true ;
19348: LD_ADDR_EXP 80
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// if p3 = 24 then
19356: LD_VAR 0 3
19360: PUSH
19361: LD_INT 24
19363: EQUAL
19364: IFFALSE 19374
// sShovel := true ;
19366: LD_ADDR_EXP 81
19370: PUSH
19371: LD_INT 1
19373: ST_TO_ADDR
// if p3 = 25 then
19374: LD_VAR 0 3
19378: PUSH
19379: LD_INT 25
19381: EQUAL
19382: IFFALSE 19392
// sSheik := true ;
19384: LD_ADDR_EXP 82
19388: PUSH
19389: LD_INT 1
19391: ST_TO_ADDR
// if p3 = 26 then
19392: LD_VAR 0 3
19396: PUSH
19397: LD_INT 26
19399: EQUAL
19400: IFFALSE 19410
// sEarthquake := true ;
19402: LD_ADDR_EXP 84
19406: PUSH
19407: LD_INT 1
19409: ST_TO_ADDR
// if p3 = 27 then
19410: LD_VAR 0 3
19414: PUSH
19415: LD_INT 27
19417: EQUAL
19418: IFFALSE 19428
// sAI := true ;
19420: LD_ADDR_EXP 85
19424: PUSH
19425: LD_INT 1
19427: ST_TO_ADDR
// if p3 = 28 then
19428: LD_VAR 0 3
19432: PUSH
19433: LD_INT 28
19435: EQUAL
19436: IFFALSE 19446
// sCargo := true ;
19438: LD_ADDR_EXP 88
19442: PUSH
19443: LD_INT 1
19445: ST_TO_ADDR
// if p3 = 29 then
19446: LD_VAR 0 3
19450: PUSH
19451: LD_INT 29
19453: EQUAL
19454: IFFALSE 19464
// sDLaser := true ;
19456: LD_ADDR_EXP 89
19460: PUSH
19461: LD_INT 1
19463: ST_TO_ADDR
// if p3 = 30 then
19464: LD_VAR 0 3
19468: PUSH
19469: LD_INT 30
19471: EQUAL
19472: IFFALSE 19482
// sExchange := true ;
19474: LD_ADDR_EXP 90
19478: PUSH
19479: LD_INT 1
19481: ST_TO_ADDR
// if p3 = 31 then
19482: LD_VAR 0 3
19486: PUSH
19487: LD_INT 31
19489: EQUAL
19490: IFFALSE 19500
// sFac := true ;
19492: LD_ADDR_EXP 91
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// if p3 = 32 then
19500: LD_VAR 0 3
19504: PUSH
19505: LD_INT 32
19507: EQUAL
19508: IFFALSE 19518
// sPower := true ;
19510: LD_ADDR_EXP 92
19514: PUSH
19515: LD_INT 1
19517: ST_TO_ADDR
// if p3 = 33 then
19518: LD_VAR 0 3
19522: PUSH
19523: LD_INT 33
19525: EQUAL
19526: IFFALSE 19536
// sRandom := true ;
19528: LD_ADDR_EXP 93
19532: PUSH
19533: LD_INT 1
19535: ST_TO_ADDR
// if p3 = 34 then
19536: LD_VAR 0 3
19540: PUSH
19541: LD_INT 34
19543: EQUAL
19544: IFFALSE 19554
// sShield := true ;
19546: LD_ADDR_EXP 94
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// if p3 = 35 then
19554: LD_VAR 0 3
19558: PUSH
19559: LD_INT 35
19561: EQUAL
19562: IFFALSE 19572
// sTime := true ;
19564: LD_ADDR_EXP 95
19568: PUSH
19569: LD_INT 1
19571: ST_TO_ADDR
// if p3 = 36 then
19572: LD_VAR 0 3
19576: PUSH
19577: LD_INT 36
19579: EQUAL
19580: IFFALSE 19590
// sTools := true ;
19582: LD_ADDR_EXP 96
19586: PUSH
19587: LD_INT 1
19589: ST_TO_ADDR
// if p3 = 101 then
19590: LD_VAR 0 3
19594: PUSH
19595: LD_INT 101
19597: EQUAL
19598: IFFALSE 19608
// sSold := true ;
19600: LD_ADDR_EXP 61
19604: PUSH
19605: LD_INT 1
19607: ST_TO_ADDR
// if p3 = 102 then
19608: LD_VAR 0 3
19612: PUSH
19613: LD_INT 102
19615: EQUAL
19616: IFFALSE 19626
// sDiff := true ;
19618: LD_ADDR_EXP 62
19622: PUSH
19623: LD_INT 1
19625: ST_TO_ADDR
// if p3 = 103 then
19626: LD_VAR 0 3
19630: PUSH
19631: LD_INT 103
19633: EQUAL
19634: IFFALSE 19644
// sFog := true ;
19636: LD_ADDR_EXP 65
19640: PUSH
19641: LD_INT 1
19643: ST_TO_ADDR
// if p3 = 104 then
19644: LD_VAR 0 3
19648: PUSH
19649: LD_INT 104
19651: EQUAL
19652: IFFALSE 19662
// sReset := true ;
19654: LD_ADDR_EXP 66
19658: PUSH
19659: LD_INT 1
19661: ST_TO_ADDR
// if p3 = 105 then
19662: LD_VAR 0 3
19666: PUSH
19667: LD_INT 105
19669: EQUAL
19670: IFFALSE 19680
// sSun := true ;
19672: LD_ADDR_EXP 67
19676: PUSH
19677: LD_INT 1
19679: ST_TO_ADDR
// if p3 = 106 then
19680: LD_VAR 0 3
19684: PUSH
19685: LD_INT 106
19687: EQUAL
19688: IFFALSE 19698
// sTiger := true ;
19690: LD_ADDR_EXP 63
19694: PUSH
19695: LD_INT 1
19697: ST_TO_ADDR
// if p3 = 107 then
19698: LD_VAR 0 3
19702: PUSH
19703: LD_INT 107
19705: EQUAL
19706: IFFALSE 19716
// sBomb := true ;
19708: LD_ADDR_EXP 64
19712: PUSH
19713: LD_INT 1
19715: ST_TO_ADDR
// if p3 = 108 then
19716: LD_VAR 0 3
19720: PUSH
19721: LD_INT 108
19723: EQUAL
19724: IFFALSE 19734
// sWound := true ;
19726: LD_ADDR_EXP 72
19730: PUSH
19731: LD_INT 1
19733: ST_TO_ADDR
// if p3 = 109 then
19734: LD_VAR 0 3
19738: PUSH
19739: LD_INT 109
19741: EQUAL
19742: IFFALSE 19752
// sBetray := true ;
19744: LD_ADDR_EXP 76
19748: PUSH
19749: LD_INT 1
19751: ST_TO_ADDR
// if p3 = 110 then
19752: LD_VAR 0 3
19756: PUSH
19757: LD_INT 110
19759: EQUAL
19760: IFFALSE 19770
// sContamin := true ;
19762: LD_ADDR_EXP 77
19766: PUSH
19767: LD_INT 1
19769: ST_TO_ADDR
// if p3 = 111 then
19770: LD_VAR 0 3
19774: PUSH
19775: LD_INT 111
19777: EQUAL
19778: IFFALSE 19788
// sOil := true ;
19780: LD_ADDR_EXP 79
19784: PUSH
19785: LD_INT 1
19787: ST_TO_ADDR
// if p3 = 112 then
19788: LD_VAR 0 3
19792: PUSH
19793: LD_INT 112
19795: EQUAL
19796: IFFALSE 19806
// sStu := true ;
19798: LD_ADDR_EXP 83
19802: PUSH
19803: LD_INT 1
19805: ST_TO_ADDR
// if p3 = 113 then
19806: LD_VAR 0 3
19810: PUSH
19811: LD_INT 113
19813: EQUAL
19814: IFFALSE 19824
// sBazooka := true ;
19816: LD_ADDR_EXP 86
19820: PUSH
19821: LD_INT 1
19823: ST_TO_ADDR
// if p3 = 114 then
19824: LD_VAR 0 3
19828: PUSH
19829: LD_INT 114
19831: EQUAL
19832: IFFALSE 19842
// sMortar := true ;
19834: LD_ADDR_EXP 87
19838: PUSH
19839: LD_INT 1
19841: ST_TO_ADDR
// if p3 = 115 then
19842: LD_VAR 0 3
19846: PUSH
19847: LD_INT 115
19849: EQUAL
19850: IFFALSE 19860
// sRanger := true ;
19852: LD_ADDR_EXP 97
19856: PUSH
19857: LD_INT 1
19859: ST_TO_ADDR
// if p3 = 116 then
19860: LD_VAR 0 3
19864: PUSH
19865: LD_INT 116
19867: EQUAL
19868: IFFALSE 19878
// sComputer := true ;
19870: LD_ADDR_EXP 98
19874: PUSH
19875: LD_INT 1
19877: ST_TO_ADDR
// if p3 = 117 then
19878: LD_VAR 0 3
19882: PUSH
19883: LD_INT 117
19885: EQUAL
19886: IFFALSE 19896
// s30 := true ;
19888: LD_ADDR_EXP 99
19892: PUSH
19893: LD_INT 1
19895: ST_TO_ADDR
// if p3 = 118 then
19896: LD_VAR 0 3
19900: PUSH
19901: LD_INT 118
19903: EQUAL
19904: IFFALSE 19914
// s60 := true ;
19906: LD_ADDR_EXP 100
19910: PUSH
19911: LD_INT 1
19913: ST_TO_ADDR
// end ; if p2 = hack_mode then
19914: LD_VAR 0 2
19918: PUSH
19919: LD_INT 101
19921: EQUAL
19922: IFFALSE 20050
// begin case p3 of 1 :
19924: LD_VAR 0 3
19928: PUSH
19929: LD_INT 1
19931: DOUBLE
19932: EQUAL
19933: IFTRUE 19937
19935: GO 19944
19937: POP
// hHackUnlimitedResources ; 2 :
19938: CALL 32189 0 0
19942: GO 20050
19944: LD_INT 2
19946: DOUBLE
19947: EQUAL
19948: IFTRUE 19952
19950: GO 19959
19952: POP
// hHackSetLevel10 ; 3 :
19953: CALL 32322 0 0
19957: GO 20050
19959: LD_INT 3
19961: DOUBLE
19962: EQUAL
19963: IFTRUE 19967
19965: GO 19974
19967: POP
// hHackSetLevel10YourUnits ; 4 :
19968: CALL 32407 0 0
19972: GO 20050
19974: LD_INT 4
19976: DOUBLE
19977: EQUAL
19978: IFTRUE 19982
19980: GO 19989
19982: POP
// hHackInvincible ; 5 :
19983: CALL 32855 0 0
19987: GO 20050
19989: LD_INT 5
19991: DOUBLE
19992: EQUAL
19993: IFTRUE 19997
19995: GO 20004
19997: POP
// hHackInvisible ; 6 :
19998: CALL 32966 0 0
20002: GO 20050
20004: LD_INT 6
20006: DOUBLE
20007: EQUAL
20008: IFTRUE 20012
20010: GO 20019
20012: POP
// hHackChangeYourSide ; 7 :
20013: CALL 33023 0 0
20017: GO 20050
20019: LD_INT 7
20021: DOUBLE
20022: EQUAL
20023: IFTRUE 20027
20025: GO 20034
20027: POP
// hHackChangeUnitSide ; 8 :
20028: CALL 33065 0 0
20032: GO 20050
20034: LD_INT 8
20036: DOUBLE
20037: EQUAL
20038: IFTRUE 20042
20040: GO 20049
20042: POP
// hHackFog ; end ;
20043: CALL 33166 0 0
20047: GO 20050
20049: POP
// end ; if p2 = game_save_mode then
20050: LD_VAR 0 2
20054: PUSH
20055: LD_INT 102
20057: EQUAL
20058: IFFALSE 20113
// begin if p3 = 1 then
20060: LD_VAR 0 3
20064: PUSH
20065: LD_INT 1
20067: EQUAL
20068: IFFALSE 20080
// globalGameSaveCounter := p4 ;
20070: LD_ADDR_EXP 43
20074: PUSH
20075: LD_VAR 0 4
20079: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20080: LD_VAR 0 3
20084: PUSH
20085: LD_INT 2
20087: EQUAL
20088: PUSH
20089: LD_EXP 43
20093: AND
20094: IFFALSE 20113
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20096: LD_STRING setGameSaveCounter(
20098: PUSH
20099: LD_EXP 43
20103: STR
20104: PUSH
20105: LD_STRING )
20107: STR
20108: PPUSH
20109: CALL_OW 559
// end ; end ;
20113: LD_VAR 0 7
20117: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20118: LD_INT 0
20120: PPUSH
// streamModeActive := false ;
20121: LD_ADDR_EXP 44
20125: PUSH
20126: LD_INT 0
20128: ST_TO_ADDR
// normalCounter := 36 ;
20129: LD_ADDR_EXP 45
20133: PUSH
20134: LD_INT 36
20136: ST_TO_ADDR
// hardcoreCounter := 18 ;
20137: LD_ADDR_EXP 46
20141: PUSH
20142: LD_INT 18
20144: ST_TO_ADDR
// sRocket := false ;
20145: LD_ADDR_EXP 49
20149: PUSH
20150: LD_INT 0
20152: ST_TO_ADDR
// sSpeed := false ;
20153: LD_ADDR_EXP 48
20157: PUSH
20158: LD_INT 0
20160: ST_TO_ADDR
// sEngine := false ;
20161: LD_ADDR_EXP 50
20165: PUSH
20166: LD_INT 0
20168: ST_TO_ADDR
// sSpec := false ;
20169: LD_ADDR_EXP 47
20173: PUSH
20174: LD_INT 0
20176: ST_TO_ADDR
// sLevel := false ;
20177: LD_ADDR_EXP 51
20181: PUSH
20182: LD_INT 0
20184: ST_TO_ADDR
// sArmoury := false ;
20185: LD_ADDR_EXP 52
20189: PUSH
20190: LD_INT 0
20192: ST_TO_ADDR
// sRadar := false ;
20193: LD_ADDR_EXP 53
20197: PUSH
20198: LD_INT 0
20200: ST_TO_ADDR
// sBunker := false ;
20201: LD_ADDR_EXP 54
20205: PUSH
20206: LD_INT 0
20208: ST_TO_ADDR
// sHack := false ;
20209: LD_ADDR_EXP 55
20213: PUSH
20214: LD_INT 0
20216: ST_TO_ADDR
// sFire := false ;
20217: LD_ADDR_EXP 56
20221: PUSH
20222: LD_INT 0
20224: ST_TO_ADDR
// sRefresh := false ;
20225: LD_ADDR_EXP 57
20229: PUSH
20230: LD_INT 0
20232: ST_TO_ADDR
// sExp := false ;
20233: LD_ADDR_EXP 58
20237: PUSH
20238: LD_INT 0
20240: ST_TO_ADDR
// sDepot := false ;
20241: LD_ADDR_EXP 59
20245: PUSH
20246: LD_INT 0
20248: ST_TO_ADDR
// sFlag := false ;
20249: LD_ADDR_EXP 60
20253: PUSH
20254: LD_INT 0
20256: ST_TO_ADDR
// sKamikadze := false ;
20257: LD_ADDR_EXP 68
20261: PUSH
20262: LD_INT 0
20264: ST_TO_ADDR
// sTroll := false ;
20265: LD_ADDR_EXP 69
20269: PUSH
20270: LD_INT 0
20272: ST_TO_ADDR
// sSlow := false ;
20273: LD_ADDR_EXP 70
20277: PUSH
20278: LD_INT 0
20280: ST_TO_ADDR
// sLack := false ;
20281: LD_ADDR_EXP 71
20285: PUSH
20286: LD_INT 0
20288: ST_TO_ADDR
// sTank := false ;
20289: LD_ADDR_EXP 73
20293: PUSH
20294: LD_INT 0
20296: ST_TO_ADDR
// sRemote := false ;
20297: LD_ADDR_EXP 74
20301: PUSH
20302: LD_INT 0
20304: ST_TO_ADDR
// sPowell := false ;
20305: LD_ADDR_EXP 75
20309: PUSH
20310: LD_INT 0
20312: ST_TO_ADDR
// sTeleport := false ;
20313: LD_ADDR_EXP 78
20317: PUSH
20318: LD_INT 0
20320: ST_TO_ADDR
// sOilTower := false ;
20321: LD_ADDR_EXP 80
20325: PUSH
20326: LD_INT 0
20328: ST_TO_ADDR
// sShovel := false ;
20329: LD_ADDR_EXP 81
20333: PUSH
20334: LD_INT 0
20336: ST_TO_ADDR
// sSheik := false ;
20337: LD_ADDR_EXP 82
20341: PUSH
20342: LD_INT 0
20344: ST_TO_ADDR
// sEarthquake := false ;
20345: LD_ADDR_EXP 84
20349: PUSH
20350: LD_INT 0
20352: ST_TO_ADDR
// sAI := false ;
20353: LD_ADDR_EXP 85
20357: PUSH
20358: LD_INT 0
20360: ST_TO_ADDR
// sCargo := false ;
20361: LD_ADDR_EXP 88
20365: PUSH
20366: LD_INT 0
20368: ST_TO_ADDR
// sDLaser := false ;
20369: LD_ADDR_EXP 89
20373: PUSH
20374: LD_INT 0
20376: ST_TO_ADDR
// sExchange := false ;
20377: LD_ADDR_EXP 90
20381: PUSH
20382: LD_INT 0
20384: ST_TO_ADDR
// sFac := false ;
20385: LD_ADDR_EXP 91
20389: PUSH
20390: LD_INT 0
20392: ST_TO_ADDR
// sPower := false ;
20393: LD_ADDR_EXP 92
20397: PUSH
20398: LD_INT 0
20400: ST_TO_ADDR
// sRandom := false ;
20401: LD_ADDR_EXP 93
20405: PUSH
20406: LD_INT 0
20408: ST_TO_ADDR
// sShield := false ;
20409: LD_ADDR_EXP 94
20413: PUSH
20414: LD_INT 0
20416: ST_TO_ADDR
// sTime := false ;
20417: LD_ADDR_EXP 95
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// sTools := false ;
20425: LD_ADDR_EXP 96
20429: PUSH
20430: LD_INT 0
20432: ST_TO_ADDR
// sSold := false ;
20433: LD_ADDR_EXP 61
20437: PUSH
20438: LD_INT 0
20440: ST_TO_ADDR
// sDiff := false ;
20441: LD_ADDR_EXP 62
20445: PUSH
20446: LD_INT 0
20448: ST_TO_ADDR
// sFog := false ;
20449: LD_ADDR_EXP 65
20453: PUSH
20454: LD_INT 0
20456: ST_TO_ADDR
// sReset := false ;
20457: LD_ADDR_EXP 66
20461: PUSH
20462: LD_INT 0
20464: ST_TO_ADDR
// sSun := false ;
20465: LD_ADDR_EXP 67
20469: PUSH
20470: LD_INT 0
20472: ST_TO_ADDR
// sTiger := false ;
20473: LD_ADDR_EXP 63
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// sBomb := false ;
20481: LD_ADDR_EXP 64
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// sWound := false ;
20489: LD_ADDR_EXP 72
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
// sBetray := false ;
20497: LD_ADDR_EXP 76
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// sContamin := false ;
20505: LD_ADDR_EXP 77
20509: PUSH
20510: LD_INT 0
20512: ST_TO_ADDR
// sOil := false ;
20513: LD_ADDR_EXP 79
20517: PUSH
20518: LD_INT 0
20520: ST_TO_ADDR
// sStu := false ;
20521: LD_ADDR_EXP 83
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// sBazooka := false ;
20529: LD_ADDR_EXP 86
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// sMortar := false ;
20537: LD_ADDR_EXP 87
20541: PUSH
20542: LD_INT 0
20544: ST_TO_ADDR
// sRanger := false ;
20545: LD_ADDR_EXP 97
20549: PUSH
20550: LD_INT 0
20552: ST_TO_ADDR
// sComputer := false ;
20553: LD_ADDR_EXP 98
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// s30 := false ;
20561: LD_ADDR_EXP 99
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// s60 := false ;
20569: LD_ADDR_EXP 100
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// end ;
20577: LD_VAR 0 1
20581: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20582: LD_INT 0
20584: PPUSH
20585: PPUSH
20586: PPUSH
20587: PPUSH
20588: PPUSH
20589: PPUSH
20590: PPUSH
// result := [ ] ;
20591: LD_ADDR_VAR 0 2
20595: PUSH
20596: EMPTY
20597: ST_TO_ADDR
// if campaign_id = 1 then
20598: LD_OWVAR 69
20602: PUSH
20603: LD_INT 1
20605: EQUAL
20606: IFFALSE 23772
// begin case mission_number of 1 :
20608: LD_OWVAR 70
20612: PUSH
20613: LD_INT 1
20615: DOUBLE
20616: EQUAL
20617: IFTRUE 20621
20619: GO 20697
20621: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20622: LD_ADDR_VAR 0 2
20626: PUSH
20627: LD_INT 2
20629: PUSH
20630: LD_INT 4
20632: PUSH
20633: LD_INT 11
20635: PUSH
20636: LD_INT 12
20638: PUSH
20639: LD_INT 15
20641: PUSH
20642: LD_INT 16
20644: PUSH
20645: LD_INT 22
20647: PUSH
20648: LD_INT 23
20650: PUSH
20651: LD_INT 26
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 101
20667: PUSH
20668: LD_INT 102
20670: PUSH
20671: LD_INT 106
20673: PUSH
20674: LD_INT 116
20676: PUSH
20677: LD_INT 117
20679: PUSH
20680: LD_INT 118
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: ST_TO_ADDR
20695: GO 23770
20697: LD_INT 2
20699: DOUBLE
20700: EQUAL
20701: IFTRUE 20705
20703: GO 20789
20705: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20706: LD_ADDR_VAR 0 2
20710: PUSH
20711: LD_INT 2
20713: PUSH
20714: LD_INT 4
20716: PUSH
20717: LD_INT 11
20719: PUSH
20720: LD_INT 12
20722: PUSH
20723: LD_INT 15
20725: PUSH
20726: LD_INT 16
20728: PUSH
20729: LD_INT 22
20731: PUSH
20732: LD_INT 23
20734: PUSH
20735: LD_INT 26
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 101
20751: PUSH
20752: LD_INT 102
20754: PUSH
20755: LD_INT 105
20757: PUSH
20758: LD_INT 106
20760: PUSH
20761: LD_INT 108
20763: PUSH
20764: LD_INT 116
20766: PUSH
20767: LD_INT 117
20769: PUSH
20770: LD_INT 118
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: ST_TO_ADDR
20787: GO 23770
20789: LD_INT 3
20791: DOUBLE
20792: EQUAL
20793: IFTRUE 20797
20795: GO 20885
20797: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20798: LD_ADDR_VAR 0 2
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: LD_INT 4
20808: PUSH
20809: LD_INT 5
20811: PUSH
20812: LD_INT 11
20814: PUSH
20815: LD_INT 12
20817: PUSH
20818: LD_INT 15
20820: PUSH
20821: LD_INT 16
20823: PUSH
20824: LD_INT 22
20826: PUSH
20827: LD_INT 26
20829: PUSH
20830: LD_INT 36
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 101
20847: PUSH
20848: LD_INT 102
20850: PUSH
20851: LD_INT 105
20853: PUSH
20854: LD_INT 106
20856: PUSH
20857: LD_INT 108
20859: PUSH
20860: LD_INT 116
20862: PUSH
20863: LD_INT 117
20865: PUSH
20866: LD_INT 118
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: ST_TO_ADDR
20883: GO 23770
20885: LD_INT 4
20887: DOUBLE
20888: EQUAL
20889: IFTRUE 20893
20891: GO 20989
20893: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20894: LD_ADDR_VAR 0 2
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: LD_INT 4
20904: PUSH
20905: LD_INT 5
20907: PUSH
20908: LD_INT 8
20910: PUSH
20911: LD_INT 11
20913: PUSH
20914: LD_INT 12
20916: PUSH
20917: LD_INT 15
20919: PUSH
20920: LD_INT 16
20922: PUSH
20923: LD_INT 22
20925: PUSH
20926: LD_INT 23
20928: PUSH
20929: LD_INT 26
20931: PUSH
20932: LD_INT 36
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 101
20951: PUSH
20952: LD_INT 102
20954: PUSH
20955: LD_INT 105
20957: PUSH
20958: LD_INT 106
20960: PUSH
20961: LD_INT 108
20963: PUSH
20964: LD_INT 116
20966: PUSH
20967: LD_INT 117
20969: PUSH
20970: LD_INT 118
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: ST_TO_ADDR
20987: GO 23770
20989: LD_INT 5
20991: DOUBLE
20992: EQUAL
20993: IFTRUE 20997
20995: GO 21109
20997: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20998: LD_ADDR_VAR 0 2
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: LD_INT 4
21008: PUSH
21009: LD_INT 5
21011: PUSH
21012: LD_INT 6
21014: PUSH
21015: LD_INT 8
21017: PUSH
21018: LD_INT 11
21020: PUSH
21021: LD_INT 12
21023: PUSH
21024: LD_INT 15
21026: PUSH
21027: LD_INT 16
21029: PUSH
21030: LD_INT 22
21032: PUSH
21033: LD_INT 23
21035: PUSH
21036: LD_INT 25
21038: PUSH
21039: LD_INT 26
21041: PUSH
21042: LD_INT 36
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 101
21063: PUSH
21064: LD_INT 102
21066: PUSH
21067: LD_INT 105
21069: PUSH
21070: LD_INT 106
21072: PUSH
21073: LD_INT 108
21075: PUSH
21076: LD_INT 109
21078: PUSH
21079: LD_INT 112
21081: PUSH
21082: LD_INT 116
21084: PUSH
21085: LD_INT 117
21087: PUSH
21088: LD_INT 118
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: ST_TO_ADDR
21107: GO 23770
21109: LD_INT 6
21111: DOUBLE
21112: EQUAL
21113: IFTRUE 21117
21115: GO 21249
21117: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21118: LD_ADDR_VAR 0 2
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: LD_INT 4
21128: PUSH
21129: LD_INT 5
21131: PUSH
21132: LD_INT 6
21134: PUSH
21135: LD_INT 8
21137: PUSH
21138: LD_INT 11
21140: PUSH
21141: LD_INT 12
21143: PUSH
21144: LD_INT 15
21146: PUSH
21147: LD_INT 16
21149: PUSH
21150: LD_INT 20
21152: PUSH
21153: LD_INT 21
21155: PUSH
21156: LD_INT 22
21158: PUSH
21159: LD_INT 23
21161: PUSH
21162: LD_INT 25
21164: PUSH
21165: LD_INT 26
21167: PUSH
21168: LD_INT 30
21170: PUSH
21171: LD_INT 31
21173: PUSH
21174: LD_INT 32
21176: PUSH
21177: LD_INT 36
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 101
21203: PUSH
21204: LD_INT 102
21206: PUSH
21207: LD_INT 105
21209: PUSH
21210: LD_INT 106
21212: PUSH
21213: LD_INT 108
21215: PUSH
21216: LD_INT 109
21218: PUSH
21219: LD_INT 112
21221: PUSH
21222: LD_INT 116
21224: PUSH
21225: LD_INT 117
21227: PUSH
21228: LD_INT 118
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: ST_TO_ADDR
21247: GO 23770
21249: LD_INT 7
21251: DOUBLE
21252: EQUAL
21253: IFTRUE 21257
21255: GO 21369
21257: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21258: LD_ADDR_VAR 0 2
21262: PUSH
21263: LD_INT 2
21265: PUSH
21266: LD_INT 4
21268: PUSH
21269: LD_INT 5
21271: PUSH
21272: LD_INT 7
21274: PUSH
21275: LD_INT 11
21277: PUSH
21278: LD_INT 12
21280: PUSH
21281: LD_INT 15
21283: PUSH
21284: LD_INT 16
21286: PUSH
21287: LD_INT 20
21289: PUSH
21290: LD_INT 21
21292: PUSH
21293: LD_INT 22
21295: PUSH
21296: LD_INT 23
21298: PUSH
21299: LD_INT 25
21301: PUSH
21302: LD_INT 26
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 101
21323: PUSH
21324: LD_INT 102
21326: PUSH
21327: LD_INT 103
21329: PUSH
21330: LD_INT 105
21332: PUSH
21333: LD_INT 106
21335: PUSH
21336: LD_INT 108
21338: PUSH
21339: LD_INT 112
21341: PUSH
21342: LD_INT 116
21344: PUSH
21345: LD_INT 117
21347: PUSH
21348: LD_INT 118
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: ST_TO_ADDR
21367: GO 23770
21369: LD_INT 8
21371: DOUBLE
21372: EQUAL
21373: IFTRUE 21377
21375: GO 21517
21377: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21378: LD_ADDR_VAR 0 2
21382: PUSH
21383: LD_INT 2
21385: PUSH
21386: LD_INT 4
21388: PUSH
21389: LD_INT 5
21391: PUSH
21392: LD_INT 6
21394: PUSH
21395: LD_INT 7
21397: PUSH
21398: LD_INT 8
21400: PUSH
21401: LD_INT 11
21403: PUSH
21404: LD_INT 12
21406: PUSH
21407: LD_INT 15
21409: PUSH
21410: LD_INT 16
21412: PUSH
21413: LD_INT 20
21415: PUSH
21416: LD_INT 21
21418: PUSH
21419: LD_INT 22
21421: PUSH
21422: LD_INT 23
21424: PUSH
21425: LD_INT 25
21427: PUSH
21428: LD_INT 26
21430: PUSH
21431: LD_INT 30
21433: PUSH
21434: LD_INT 31
21436: PUSH
21437: LD_INT 32
21439: PUSH
21440: LD_INT 36
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 101
21467: PUSH
21468: LD_INT 102
21470: PUSH
21471: LD_INT 103
21473: PUSH
21474: LD_INT 105
21476: PUSH
21477: LD_INT 106
21479: PUSH
21480: LD_INT 108
21482: PUSH
21483: LD_INT 109
21485: PUSH
21486: LD_INT 112
21488: PUSH
21489: LD_INT 116
21491: PUSH
21492: LD_INT 117
21494: PUSH
21495: LD_INT 118
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: ST_TO_ADDR
21515: GO 23770
21517: LD_INT 9
21519: DOUBLE
21520: EQUAL
21521: IFTRUE 21525
21523: GO 21673
21525: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21526: LD_ADDR_VAR 0 2
21530: PUSH
21531: LD_INT 2
21533: PUSH
21534: LD_INT 4
21536: PUSH
21537: LD_INT 5
21539: PUSH
21540: LD_INT 6
21542: PUSH
21543: LD_INT 7
21545: PUSH
21546: LD_INT 8
21548: PUSH
21549: LD_INT 11
21551: PUSH
21552: LD_INT 12
21554: PUSH
21555: LD_INT 15
21557: PUSH
21558: LD_INT 16
21560: PUSH
21561: LD_INT 20
21563: PUSH
21564: LD_INT 21
21566: PUSH
21567: LD_INT 22
21569: PUSH
21570: LD_INT 23
21572: PUSH
21573: LD_INT 25
21575: PUSH
21576: LD_INT 26
21578: PUSH
21579: LD_INT 28
21581: PUSH
21582: LD_INT 30
21584: PUSH
21585: LD_INT 31
21587: PUSH
21588: LD_INT 32
21590: PUSH
21591: LD_INT 36
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 101
21619: PUSH
21620: LD_INT 102
21622: PUSH
21623: LD_INT 103
21625: PUSH
21626: LD_INT 105
21628: PUSH
21629: LD_INT 106
21631: PUSH
21632: LD_INT 108
21634: PUSH
21635: LD_INT 109
21637: PUSH
21638: LD_INT 112
21640: PUSH
21641: LD_INT 114
21643: PUSH
21644: LD_INT 116
21646: PUSH
21647: LD_INT 117
21649: PUSH
21650: LD_INT 118
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: ST_TO_ADDR
21671: GO 23770
21673: LD_INT 10
21675: DOUBLE
21676: EQUAL
21677: IFTRUE 21681
21679: GO 21877
21681: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21682: LD_ADDR_VAR 0 2
21686: PUSH
21687: LD_INT 2
21689: PUSH
21690: LD_INT 4
21692: PUSH
21693: LD_INT 5
21695: PUSH
21696: LD_INT 6
21698: PUSH
21699: LD_INT 7
21701: PUSH
21702: LD_INT 8
21704: PUSH
21705: LD_INT 9
21707: PUSH
21708: LD_INT 10
21710: PUSH
21711: LD_INT 11
21713: PUSH
21714: LD_INT 12
21716: PUSH
21717: LD_INT 13
21719: PUSH
21720: LD_INT 14
21722: PUSH
21723: LD_INT 15
21725: PUSH
21726: LD_INT 16
21728: PUSH
21729: LD_INT 17
21731: PUSH
21732: LD_INT 18
21734: PUSH
21735: LD_INT 19
21737: PUSH
21738: LD_INT 20
21740: PUSH
21741: LD_INT 21
21743: PUSH
21744: LD_INT 22
21746: PUSH
21747: LD_INT 23
21749: PUSH
21750: LD_INT 24
21752: PUSH
21753: LD_INT 25
21755: PUSH
21756: LD_INT 26
21758: PUSH
21759: LD_INT 28
21761: PUSH
21762: LD_INT 30
21764: PUSH
21765: LD_INT 31
21767: PUSH
21768: LD_INT 32
21770: PUSH
21771: LD_INT 36
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 101
21807: PUSH
21808: LD_INT 102
21810: PUSH
21811: LD_INT 103
21813: PUSH
21814: LD_INT 104
21816: PUSH
21817: LD_INT 105
21819: PUSH
21820: LD_INT 106
21822: PUSH
21823: LD_INT 107
21825: PUSH
21826: LD_INT 108
21828: PUSH
21829: LD_INT 109
21831: PUSH
21832: LD_INT 110
21834: PUSH
21835: LD_INT 111
21837: PUSH
21838: LD_INT 112
21840: PUSH
21841: LD_INT 114
21843: PUSH
21844: LD_INT 116
21846: PUSH
21847: LD_INT 117
21849: PUSH
21850: LD_INT 118
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: ST_TO_ADDR
21875: GO 23770
21877: LD_INT 11
21879: DOUBLE
21880: EQUAL
21881: IFTRUE 21885
21883: GO 22089
21885: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21886: LD_ADDR_VAR 0 2
21890: PUSH
21891: LD_INT 2
21893: PUSH
21894: LD_INT 3
21896: PUSH
21897: LD_INT 4
21899: PUSH
21900: LD_INT 5
21902: PUSH
21903: LD_INT 6
21905: PUSH
21906: LD_INT 7
21908: PUSH
21909: LD_INT 8
21911: PUSH
21912: LD_INT 9
21914: PUSH
21915: LD_INT 10
21917: PUSH
21918: LD_INT 11
21920: PUSH
21921: LD_INT 12
21923: PUSH
21924: LD_INT 13
21926: PUSH
21927: LD_INT 14
21929: PUSH
21930: LD_INT 15
21932: PUSH
21933: LD_INT 16
21935: PUSH
21936: LD_INT 17
21938: PUSH
21939: LD_INT 18
21941: PUSH
21942: LD_INT 19
21944: PUSH
21945: LD_INT 20
21947: PUSH
21948: LD_INT 21
21950: PUSH
21951: LD_INT 22
21953: PUSH
21954: LD_INT 23
21956: PUSH
21957: LD_INT 24
21959: PUSH
21960: LD_INT 25
21962: PUSH
21963: LD_INT 26
21965: PUSH
21966: LD_INT 28
21968: PUSH
21969: LD_INT 30
21971: PUSH
21972: LD_INT 31
21974: PUSH
21975: LD_INT 32
21977: PUSH
21978: LD_INT 34
21980: PUSH
21981: LD_INT 36
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 101
22019: PUSH
22020: LD_INT 102
22022: PUSH
22023: LD_INT 103
22025: PUSH
22026: LD_INT 104
22028: PUSH
22029: LD_INT 105
22031: PUSH
22032: LD_INT 106
22034: PUSH
22035: LD_INT 107
22037: PUSH
22038: LD_INT 108
22040: PUSH
22041: LD_INT 109
22043: PUSH
22044: LD_INT 110
22046: PUSH
22047: LD_INT 111
22049: PUSH
22050: LD_INT 112
22052: PUSH
22053: LD_INT 114
22055: PUSH
22056: LD_INT 116
22058: PUSH
22059: LD_INT 117
22061: PUSH
22062: LD_INT 118
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: ST_TO_ADDR
22087: GO 23770
22089: LD_INT 12
22091: DOUBLE
22092: EQUAL
22093: IFTRUE 22097
22095: GO 22317
22097: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22098: LD_ADDR_VAR 0 2
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: LD_INT 2
22108: PUSH
22109: LD_INT 3
22111: PUSH
22112: LD_INT 4
22114: PUSH
22115: LD_INT 5
22117: PUSH
22118: LD_INT 6
22120: PUSH
22121: LD_INT 7
22123: PUSH
22124: LD_INT 8
22126: PUSH
22127: LD_INT 9
22129: PUSH
22130: LD_INT 10
22132: PUSH
22133: LD_INT 11
22135: PUSH
22136: LD_INT 12
22138: PUSH
22139: LD_INT 13
22141: PUSH
22142: LD_INT 14
22144: PUSH
22145: LD_INT 15
22147: PUSH
22148: LD_INT 16
22150: PUSH
22151: LD_INT 17
22153: PUSH
22154: LD_INT 18
22156: PUSH
22157: LD_INT 19
22159: PUSH
22160: LD_INT 20
22162: PUSH
22163: LD_INT 21
22165: PUSH
22166: LD_INT 22
22168: PUSH
22169: LD_INT 23
22171: PUSH
22172: LD_INT 24
22174: PUSH
22175: LD_INT 25
22177: PUSH
22178: LD_INT 26
22180: PUSH
22181: LD_INT 27
22183: PUSH
22184: LD_INT 28
22186: PUSH
22187: LD_INT 30
22189: PUSH
22190: LD_INT 31
22192: PUSH
22193: LD_INT 32
22195: PUSH
22196: LD_INT 33
22198: PUSH
22199: LD_INT 34
22201: PUSH
22202: LD_INT 36
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 101
22243: PUSH
22244: LD_INT 102
22246: PUSH
22247: LD_INT 103
22249: PUSH
22250: LD_INT 104
22252: PUSH
22253: LD_INT 105
22255: PUSH
22256: LD_INT 106
22258: PUSH
22259: LD_INT 107
22261: PUSH
22262: LD_INT 108
22264: PUSH
22265: LD_INT 109
22267: PUSH
22268: LD_INT 110
22270: PUSH
22271: LD_INT 111
22273: PUSH
22274: LD_INT 112
22276: PUSH
22277: LD_INT 113
22279: PUSH
22280: LD_INT 114
22282: PUSH
22283: LD_INT 116
22285: PUSH
22286: LD_INT 117
22288: PUSH
22289: LD_INT 118
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: ST_TO_ADDR
22315: GO 23770
22317: LD_INT 13
22319: DOUBLE
22320: EQUAL
22321: IFTRUE 22325
22323: GO 22533
22325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22326: LD_ADDR_VAR 0 2
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: LD_INT 2
22336: PUSH
22337: LD_INT 3
22339: PUSH
22340: LD_INT 4
22342: PUSH
22343: LD_INT 5
22345: PUSH
22346: LD_INT 8
22348: PUSH
22349: LD_INT 9
22351: PUSH
22352: LD_INT 10
22354: PUSH
22355: LD_INT 11
22357: PUSH
22358: LD_INT 12
22360: PUSH
22361: LD_INT 14
22363: PUSH
22364: LD_INT 15
22366: PUSH
22367: LD_INT 16
22369: PUSH
22370: LD_INT 17
22372: PUSH
22373: LD_INT 18
22375: PUSH
22376: LD_INT 19
22378: PUSH
22379: LD_INT 20
22381: PUSH
22382: LD_INT 21
22384: PUSH
22385: LD_INT 22
22387: PUSH
22388: LD_INT 23
22390: PUSH
22391: LD_INT 24
22393: PUSH
22394: LD_INT 25
22396: PUSH
22397: LD_INT 26
22399: PUSH
22400: LD_INT 27
22402: PUSH
22403: LD_INT 28
22405: PUSH
22406: LD_INT 30
22408: PUSH
22409: LD_INT 31
22411: PUSH
22412: LD_INT 32
22414: PUSH
22415: LD_INT 33
22417: PUSH
22418: LD_INT 34
22420: PUSH
22421: LD_INT 36
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 101
22459: PUSH
22460: LD_INT 102
22462: PUSH
22463: LD_INT 103
22465: PUSH
22466: LD_INT 104
22468: PUSH
22469: LD_INT 105
22471: PUSH
22472: LD_INT 106
22474: PUSH
22475: LD_INT 107
22477: PUSH
22478: LD_INT 108
22480: PUSH
22481: LD_INT 109
22483: PUSH
22484: LD_INT 110
22486: PUSH
22487: LD_INT 111
22489: PUSH
22490: LD_INT 112
22492: PUSH
22493: LD_INT 113
22495: PUSH
22496: LD_INT 114
22498: PUSH
22499: LD_INT 116
22501: PUSH
22502: LD_INT 117
22504: PUSH
22505: LD_INT 118
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: ST_TO_ADDR
22531: GO 23770
22533: LD_INT 14
22535: DOUBLE
22536: EQUAL
22537: IFTRUE 22541
22539: GO 22765
22541: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22542: LD_ADDR_VAR 0 2
22546: PUSH
22547: LD_INT 1
22549: PUSH
22550: LD_INT 2
22552: PUSH
22553: LD_INT 3
22555: PUSH
22556: LD_INT 4
22558: PUSH
22559: LD_INT 5
22561: PUSH
22562: LD_INT 6
22564: PUSH
22565: LD_INT 7
22567: PUSH
22568: LD_INT 8
22570: PUSH
22571: LD_INT 9
22573: PUSH
22574: LD_INT 10
22576: PUSH
22577: LD_INT 11
22579: PUSH
22580: LD_INT 12
22582: PUSH
22583: LD_INT 13
22585: PUSH
22586: LD_INT 14
22588: PUSH
22589: LD_INT 15
22591: PUSH
22592: LD_INT 16
22594: PUSH
22595: LD_INT 17
22597: PUSH
22598: LD_INT 18
22600: PUSH
22601: LD_INT 19
22603: PUSH
22604: LD_INT 20
22606: PUSH
22607: LD_INT 21
22609: PUSH
22610: LD_INT 22
22612: PUSH
22613: LD_INT 23
22615: PUSH
22616: LD_INT 24
22618: PUSH
22619: LD_INT 25
22621: PUSH
22622: LD_INT 26
22624: PUSH
22625: LD_INT 27
22627: PUSH
22628: LD_INT 28
22630: PUSH
22631: LD_INT 29
22633: PUSH
22634: LD_INT 30
22636: PUSH
22637: LD_INT 31
22639: PUSH
22640: LD_INT 32
22642: PUSH
22643: LD_INT 33
22645: PUSH
22646: LD_INT 34
22648: PUSH
22649: LD_INT 36
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 101
22691: PUSH
22692: LD_INT 102
22694: PUSH
22695: LD_INT 103
22697: PUSH
22698: LD_INT 104
22700: PUSH
22701: LD_INT 105
22703: PUSH
22704: LD_INT 106
22706: PUSH
22707: LD_INT 107
22709: PUSH
22710: LD_INT 108
22712: PUSH
22713: LD_INT 109
22715: PUSH
22716: LD_INT 110
22718: PUSH
22719: LD_INT 111
22721: PUSH
22722: LD_INT 112
22724: PUSH
22725: LD_INT 113
22727: PUSH
22728: LD_INT 114
22730: PUSH
22731: LD_INT 116
22733: PUSH
22734: LD_INT 117
22736: PUSH
22737: LD_INT 118
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: ST_TO_ADDR
22763: GO 23770
22765: LD_INT 15
22767: DOUBLE
22768: EQUAL
22769: IFTRUE 22773
22771: GO 22997
22773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22774: LD_ADDR_VAR 0 2
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: LD_INT 4
22790: PUSH
22791: LD_INT 5
22793: PUSH
22794: LD_INT 6
22796: PUSH
22797: LD_INT 7
22799: PUSH
22800: LD_INT 8
22802: PUSH
22803: LD_INT 9
22805: PUSH
22806: LD_INT 10
22808: PUSH
22809: LD_INT 11
22811: PUSH
22812: LD_INT 12
22814: PUSH
22815: LD_INT 13
22817: PUSH
22818: LD_INT 14
22820: PUSH
22821: LD_INT 15
22823: PUSH
22824: LD_INT 16
22826: PUSH
22827: LD_INT 17
22829: PUSH
22830: LD_INT 18
22832: PUSH
22833: LD_INT 19
22835: PUSH
22836: LD_INT 20
22838: PUSH
22839: LD_INT 21
22841: PUSH
22842: LD_INT 22
22844: PUSH
22845: LD_INT 23
22847: PUSH
22848: LD_INT 24
22850: PUSH
22851: LD_INT 25
22853: PUSH
22854: LD_INT 26
22856: PUSH
22857: LD_INT 27
22859: PUSH
22860: LD_INT 28
22862: PUSH
22863: LD_INT 29
22865: PUSH
22866: LD_INT 30
22868: PUSH
22869: LD_INT 31
22871: PUSH
22872: LD_INT 32
22874: PUSH
22875: LD_INT 33
22877: PUSH
22878: LD_INT 34
22880: PUSH
22881: LD_INT 36
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 101
22923: PUSH
22924: LD_INT 102
22926: PUSH
22927: LD_INT 103
22929: PUSH
22930: LD_INT 104
22932: PUSH
22933: LD_INT 105
22935: PUSH
22936: LD_INT 106
22938: PUSH
22939: LD_INT 107
22941: PUSH
22942: LD_INT 108
22944: PUSH
22945: LD_INT 109
22947: PUSH
22948: LD_INT 110
22950: PUSH
22951: LD_INT 111
22953: PUSH
22954: LD_INT 112
22956: PUSH
22957: LD_INT 113
22959: PUSH
22960: LD_INT 114
22962: PUSH
22963: LD_INT 116
22965: PUSH
22966: LD_INT 117
22968: PUSH
22969: LD_INT 118
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: ST_TO_ADDR
22995: GO 23770
22997: LD_INT 16
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23141
23005: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23006: LD_ADDR_VAR 0 2
23010: PUSH
23011: LD_INT 2
23013: PUSH
23014: LD_INT 4
23016: PUSH
23017: LD_INT 5
23019: PUSH
23020: LD_INT 7
23022: PUSH
23023: LD_INT 11
23025: PUSH
23026: LD_INT 12
23028: PUSH
23029: LD_INT 15
23031: PUSH
23032: LD_INT 16
23034: PUSH
23035: LD_INT 20
23037: PUSH
23038: LD_INT 21
23040: PUSH
23041: LD_INT 22
23043: PUSH
23044: LD_INT 23
23046: PUSH
23047: LD_INT 25
23049: PUSH
23050: LD_INT 26
23052: PUSH
23053: LD_INT 30
23055: PUSH
23056: LD_INT 31
23058: PUSH
23059: LD_INT 32
23061: PUSH
23062: LD_INT 33
23064: PUSH
23065: LD_INT 34
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 101
23091: PUSH
23092: LD_INT 102
23094: PUSH
23095: LD_INT 103
23097: PUSH
23098: LD_INT 106
23100: PUSH
23101: LD_INT 108
23103: PUSH
23104: LD_INT 112
23106: PUSH
23107: LD_INT 113
23109: PUSH
23110: LD_INT 114
23112: PUSH
23113: LD_INT 116
23115: PUSH
23116: LD_INT 117
23118: PUSH
23119: LD_INT 118
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: ST_TO_ADDR
23139: GO 23770
23141: LD_INT 17
23143: DOUBLE
23144: EQUAL
23145: IFTRUE 23149
23147: GO 23373
23149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23150: LD_ADDR_VAR 0 2
23154: PUSH
23155: LD_INT 1
23157: PUSH
23158: LD_INT 2
23160: PUSH
23161: LD_INT 3
23163: PUSH
23164: LD_INT 4
23166: PUSH
23167: LD_INT 5
23169: PUSH
23170: LD_INT 6
23172: PUSH
23173: LD_INT 7
23175: PUSH
23176: LD_INT 8
23178: PUSH
23179: LD_INT 9
23181: PUSH
23182: LD_INT 10
23184: PUSH
23185: LD_INT 11
23187: PUSH
23188: LD_INT 12
23190: PUSH
23191: LD_INT 13
23193: PUSH
23194: LD_INT 14
23196: PUSH
23197: LD_INT 15
23199: PUSH
23200: LD_INT 16
23202: PUSH
23203: LD_INT 17
23205: PUSH
23206: LD_INT 18
23208: PUSH
23209: LD_INT 19
23211: PUSH
23212: LD_INT 20
23214: PUSH
23215: LD_INT 21
23217: PUSH
23218: LD_INT 22
23220: PUSH
23221: LD_INT 23
23223: PUSH
23224: LD_INT 24
23226: PUSH
23227: LD_INT 25
23229: PUSH
23230: LD_INT 26
23232: PUSH
23233: LD_INT 27
23235: PUSH
23236: LD_INT 28
23238: PUSH
23239: LD_INT 29
23241: PUSH
23242: LD_INT 30
23244: PUSH
23245: LD_INT 31
23247: PUSH
23248: LD_INT 32
23250: PUSH
23251: LD_INT 33
23253: PUSH
23254: LD_INT 34
23256: PUSH
23257: LD_INT 36
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 101
23299: PUSH
23300: LD_INT 102
23302: PUSH
23303: LD_INT 103
23305: PUSH
23306: LD_INT 104
23308: PUSH
23309: LD_INT 105
23311: PUSH
23312: LD_INT 106
23314: PUSH
23315: LD_INT 107
23317: PUSH
23318: LD_INT 108
23320: PUSH
23321: LD_INT 109
23323: PUSH
23324: LD_INT 110
23326: PUSH
23327: LD_INT 111
23329: PUSH
23330: LD_INT 112
23332: PUSH
23333: LD_INT 113
23335: PUSH
23336: LD_INT 114
23338: PUSH
23339: LD_INT 116
23341: PUSH
23342: LD_INT 117
23344: PUSH
23345: LD_INT 118
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: ST_TO_ADDR
23371: GO 23770
23373: LD_INT 18
23375: DOUBLE
23376: EQUAL
23377: IFTRUE 23381
23379: GO 23529
23381: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23382: LD_ADDR_VAR 0 2
23386: PUSH
23387: LD_INT 2
23389: PUSH
23390: LD_INT 4
23392: PUSH
23393: LD_INT 5
23395: PUSH
23396: LD_INT 7
23398: PUSH
23399: LD_INT 11
23401: PUSH
23402: LD_INT 12
23404: PUSH
23405: LD_INT 15
23407: PUSH
23408: LD_INT 16
23410: PUSH
23411: LD_INT 20
23413: PUSH
23414: LD_INT 21
23416: PUSH
23417: LD_INT 22
23419: PUSH
23420: LD_INT 23
23422: PUSH
23423: LD_INT 25
23425: PUSH
23426: LD_INT 26
23428: PUSH
23429: LD_INT 30
23431: PUSH
23432: LD_INT 31
23434: PUSH
23435: LD_INT 32
23437: PUSH
23438: LD_INT 33
23440: PUSH
23441: LD_INT 34
23443: PUSH
23444: LD_INT 35
23446: PUSH
23447: LD_INT 36
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 101
23475: PUSH
23476: LD_INT 102
23478: PUSH
23479: LD_INT 103
23481: PUSH
23482: LD_INT 106
23484: PUSH
23485: LD_INT 108
23487: PUSH
23488: LD_INT 112
23490: PUSH
23491: LD_INT 113
23493: PUSH
23494: LD_INT 114
23496: PUSH
23497: LD_INT 115
23499: PUSH
23500: LD_INT 116
23502: PUSH
23503: LD_INT 117
23505: PUSH
23506: LD_INT 118
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: ST_TO_ADDR
23527: GO 23770
23529: LD_INT 19
23531: DOUBLE
23532: EQUAL
23533: IFTRUE 23537
23535: GO 23769
23537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23538: LD_ADDR_VAR 0 2
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 3
23551: PUSH
23552: LD_INT 4
23554: PUSH
23555: LD_INT 5
23557: PUSH
23558: LD_INT 6
23560: PUSH
23561: LD_INT 7
23563: PUSH
23564: LD_INT 8
23566: PUSH
23567: LD_INT 9
23569: PUSH
23570: LD_INT 10
23572: PUSH
23573: LD_INT 11
23575: PUSH
23576: LD_INT 12
23578: PUSH
23579: LD_INT 13
23581: PUSH
23582: LD_INT 14
23584: PUSH
23585: LD_INT 15
23587: PUSH
23588: LD_INT 16
23590: PUSH
23591: LD_INT 17
23593: PUSH
23594: LD_INT 18
23596: PUSH
23597: LD_INT 19
23599: PUSH
23600: LD_INT 20
23602: PUSH
23603: LD_INT 21
23605: PUSH
23606: LD_INT 22
23608: PUSH
23609: LD_INT 23
23611: PUSH
23612: LD_INT 24
23614: PUSH
23615: LD_INT 25
23617: PUSH
23618: LD_INT 26
23620: PUSH
23621: LD_INT 27
23623: PUSH
23624: LD_INT 28
23626: PUSH
23627: LD_INT 29
23629: PUSH
23630: LD_INT 30
23632: PUSH
23633: LD_INT 31
23635: PUSH
23636: LD_INT 32
23638: PUSH
23639: LD_INT 33
23641: PUSH
23642: LD_INT 34
23644: PUSH
23645: LD_INT 35
23647: PUSH
23648: LD_INT 36
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 101
23691: PUSH
23692: LD_INT 102
23694: PUSH
23695: LD_INT 103
23697: PUSH
23698: LD_INT 104
23700: PUSH
23701: LD_INT 105
23703: PUSH
23704: LD_INT 106
23706: PUSH
23707: LD_INT 107
23709: PUSH
23710: LD_INT 108
23712: PUSH
23713: LD_INT 109
23715: PUSH
23716: LD_INT 110
23718: PUSH
23719: LD_INT 111
23721: PUSH
23722: LD_INT 112
23724: PUSH
23725: LD_INT 113
23727: PUSH
23728: LD_INT 114
23730: PUSH
23731: LD_INT 115
23733: PUSH
23734: LD_INT 116
23736: PUSH
23737: LD_INT 117
23739: PUSH
23740: LD_INT 118
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: ST_TO_ADDR
23767: GO 23770
23769: POP
// end else
23770: GO 24001
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23772: LD_ADDR_VAR 0 2
23776: PUSH
23777: LD_INT 1
23779: PUSH
23780: LD_INT 2
23782: PUSH
23783: LD_INT 3
23785: PUSH
23786: LD_INT 4
23788: PUSH
23789: LD_INT 5
23791: PUSH
23792: LD_INT 6
23794: PUSH
23795: LD_INT 7
23797: PUSH
23798: LD_INT 8
23800: PUSH
23801: LD_INT 9
23803: PUSH
23804: LD_INT 10
23806: PUSH
23807: LD_INT 11
23809: PUSH
23810: LD_INT 12
23812: PUSH
23813: LD_INT 13
23815: PUSH
23816: LD_INT 14
23818: PUSH
23819: LD_INT 15
23821: PUSH
23822: LD_INT 16
23824: PUSH
23825: LD_INT 17
23827: PUSH
23828: LD_INT 18
23830: PUSH
23831: LD_INT 19
23833: PUSH
23834: LD_INT 20
23836: PUSH
23837: LD_INT 21
23839: PUSH
23840: LD_INT 22
23842: PUSH
23843: LD_INT 23
23845: PUSH
23846: LD_INT 24
23848: PUSH
23849: LD_INT 25
23851: PUSH
23852: LD_INT 26
23854: PUSH
23855: LD_INT 27
23857: PUSH
23858: LD_INT 28
23860: PUSH
23861: LD_INT 29
23863: PUSH
23864: LD_INT 30
23866: PUSH
23867: LD_INT 31
23869: PUSH
23870: LD_INT 32
23872: PUSH
23873: LD_INT 33
23875: PUSH
23876: LD_INT 34
23878: PUSH
23879: LD_INT 35
23881: PUSH
23882: LD_INT 36
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 101
23925: PUSH
23926: LD_INT 102
23928: PUSH
23929: LD_INT 103
23931: PUSH
23932: LD_INT 104
23934: PUSH
23935: LD_INT 105
23937: PUSH
23938: LD_INT 106
23940: PUSH
23941: LD_INT 107
23943: PUSH
23944: LD_INT 108
23946: PUSH
23947: LD_INT 109
23949: PUSH
23950: LD_INT 110
23952: PUSH
23953: LD_INT 111
23955: PUSH
23956: LD_INT 112
23958: PUSH
23959: LD_INT 113
23961: PUSH
23962: LD_INT 114
23964: PUSH
23965: LD_INT 115
23967: PUSH
23968: LD_INT 116
23970: PUSH
23971: LD_INT 117
23973: PUSH
23974: LD_INT 118
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: ST_TO_ADDR
// if result then
24001: LD_VAR 0 2
24005: IFFALSE 24791
// begin normal :=  ;
24007: LD_ADDR_VAR 0 5
24011: PUSH
24012: LD_STRING 
24014: ST_TO_ADDR
// hardcore :=  ;
24015: LD_ADDR_VAR 0 6
24019: PUSH
24020: LD_STRING 
24022: ST_TO_ADDR
// active :=  ;
24023: LD_ADDR_VAR 0 7
24027: PUSH
24028: LD_STRING 
24030: ST_TO_ADDR
// for i = 1 to normalCounter do
24031: LD_ADDR_VAR 0 8
24035: PUSH
24036: DOUBLE
24037: LD_INT 1
24039: DEC
24040: ST_TO_ADDR
24041: LD_EXP 45
24045: PUSH
24046: FOR_TO
24047: IFFALSE 24148
// begin tmp := 0 ;
24049: LD_ADDR_VAR 0 3
24053: PUSH
24054: LD_STRING 0
24056: ST_TO_ADDR
// if result [ 1 ] then
24057: LD_VAR 0 2
24061: PUSH
24062: LD_INT 1
24064: ARRAY
24065: IFFALSE 24130
// if result [ 1 ] [ 1 ] = i then
24067: LD_VAR 0 2
24071: PUSH
24072: LD_INT 1
24074: ARRAY
24075: PUSH
24076: LD_INT 1
24078: ARRAY
24079: PUSH
24080: LD_VAR 0 8
24084: EQUAL
24085: IFFALSE 24130
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24087: LD_ADDR_VAR 0 2
24091: PUSH
24092: LD_VAR 0 2
24096: PPUSH
24097: LD_INT 1
24099: PPUSH
24100: LD_VAR 0 2
24104: PUSH
24105: LD_INT 1
24107: ARRAY
24108: PPUSH
24109: LD_INT 1
24111: PPUSH
24112: CALL_OW 3
24116: PPUSH
24117: CALL_OW 1
24121: ST_TO_ADDR
// tmp := 1 ;
24122: LD_ADDR_VAR 0 3
24126: PUSH
24127: LD_STRING 1
24129: ST_TO_ADDR
// end ; normal := normal & tmp ;
24130: LD_ADDR_VAR 0 5
24134: PUSH
24135: LD_VAR 0 5
24139: PUSH
24140: LD_VAR 0 3
24144: STR
24145: ST_TO_ADDR
// end ;
24146: GO 24046
24148: POP
24149: POP
// for i = 1 to hardcoreCounter do
24150: LD_ADDR_VAR 0 8
24154: PUSH
24155: DOUBLE
24156: LD_INT 1
24158: DEC
24159: ST_TO_ADDR
24160: LD_EXP 46
24164: PUSH
24165: FOR_TO
24166: IFFALSE 24271
// begin tmp := 0 ;
24168: LD_ADDR_VAR 0 3
24172: PUSH
24173: LD_STRING 0
24175: ST_TO_ADDR
// if result [ 2 ] then
24176: LD_VAR 0 2
24180: PUSH
24181: LD_INT 2
24183: ARRAY
24184: IFFALSE 24253
// if result [ 2 ] [ 1 ] = 100 + i then
24186: LD_VAR 0 2
24190: PUSH
24191: LD_INT 2
24193: ARRAY
24194: PUSH
24195: LD_INT 1
24197: ARRAY
24198: PUSH
24199: LD_INT 100
24201: PUSH
24202: LD_VAR 0 8
24206: PLUS
24207: EQUAL
24208: IFFALSE 24253
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24210: LD_ADDR_VAR 0 2
24214: PUSH
24215: LD_VAR 0 2
24219: PPUSH
24220: LD_INT 2
24222: PPUSH
24223: LD_VAR 0 2
24227: PUSH
24228: LD_INT 2
24230: ARRAY
24231: PPUSH
24232: LD_INT 1
24234: PPUSH
24235: CALL_OW 3
24239: PPUSH
24240: CALL_OW 1
24244: ST_TO_ADDR
// tmp := 1 ;
24245: LD_ADDR_VAR 0 3
24249: PUSH
24250: LD_STRING 1
24252: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24253: LD_ADDR_VAR 0 6
24257: PUSH
24258: LD_VAR 0 6
24262: PUSH
24263: LD_VAR 0 3
24267: STR
24268: ST_TO_ADDR
// end ;
24269: GO 24165
24271: POP
24272: POP
// if isGameLoad then
24273: LD_VAR 0 1
24277: IFFALSE 24752
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24279: LD_ADDR_VAR 0 4
24283: PUSH
24284: LD_EXP 49
24288: PUSH
24289: LD_EXP 48
24293: PUSH
24294: LD_EXP 50
24298: PUSH
24299: LD_EXP 47
24303: PUSH
24304: LD_EXP 51
24308: PUSH
24309: LD_EXP 52
24313: PUSH
24314: LD_EXP 53
24318: PUSH
24319: LD_EXP 54
24323: PUSH
24324: LD_EXP 55
24328: PUSH
24329: LD_EXP 56
24333: PUSH
24334: LD_EXP 57
24338: PUSH
24339: LD_EXP 58
24343: PUSH
24344: LD_EXP 59
24348: PUSH
24349: LD_EXP 60
24353: PUSH
24354: LD_EXP 68
24358: PUSH
24359: LD_EXP 69
24363: PUSH
24364: LD_EXP 70
24368: PUSH
24369: LD_EXP 71
24373: PUSH
24374: LD_EXP 73
24378: PUSH
24379: LD_EXP 74
24383: PUSH
24384: LD_EXP 75
24388: PUSH
24389: LD_EXP 78
24393: PUSH
24394: LD_EXP 80
24398: PUSH
24399: LD_EXP 81
24403: PUSH
24404: LD_EXP 82
24408: PUSH
24409: LD_EXP 84
24413: PUSH
24414: LD_EXP 85
24418: PUSH
24419: LD_EXP 88
24423: PUSH
24424: LD_EXP 89
24428: PUSH
24429: LD_EXP 90
24433: PUSH
24434: LD_EXP 91
24438: PUSH
24439: LD_EXP 92
24443: PUSH
24444: LD_EXP 93
24448: PUSH
24449: LD_EXP 94
24453: PUSH
24454: LD_EXP 95
24458: PUSH
24459: LD_EXP 96
24463: PUSH
24464: LD_EXP 61
24468: PUSH
24469: LD_EXP 62
24473: PUSH
24474: LD_EXP 65
24478: PUSH
24479: LD_EXP 66
24483: PUSH
24484: LD_EXP 67
24488: PUSH
24489: LD_EXP 63
24493: PUSH
24494: LD_EXP 64
24498: PUSH
24499: LD_EXP 72
24503: PUSH
24504: LD_EXP 76
24508: PUSH
24509: LD_EXP 77
24513: PUSH
24514: LD_EXP 79
24518: PUSH
24519: LD_EXP 83
24523: PUSH
24524: LD_EXP 86
24528: PUSH
24529: LD_EXP 87
24533: PUSH
24534: LD_EXP 97
24538: PUSH
24539: LD_EXP 98
24543: PUSH
24544: LD_EXP 99
24548: PUSH
24549: LD_EXP 100
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: ST_TO_ADDR
// tmp :=  ;
24610: LD_ADDR_VAR 0 3
24614: PUSH
24615: LD_STRING 
24617: ST_TO_ADDR
// for i = 1 to normalCounter do
24618: LD_ADDR_VAR 0 8
24622: PUSH
24623: DOUBLE
24624: LD_INT 1
24626: DEC
24627: ST_TO_ADDR
24628: LD_EXP 45
24632: PUSH
24633: FOR_TO
24634: IFFALSE 24670
// begin if flags [ i ] then
24636: LD_VAR 0 4
24640: PUSH
24641: LD_VAR 0 8
24645: ARRAY
24646: IFFALSE 24668
// tmp := tmp & i & ; ;
24648: LD_ADDR_VAR 0 3
24652: PUSH
24653: LD_VAR 0 3
24657: PUSH
24658: LD_VAR 0 8
24662: STR
24663: PUSH
24664: LD_STRING ;
24666: STR
24667: ST_TO_ADDR
// end ;
24668: GO 24633
24670: POP
24671: POP
// for i = 1 to hardcoreCounter do
24672: LD_ADDR_VAR 0 8
24676: PUSH
24677: DOUBLE
24678: LD_INT 1
24680: DEC
24681: ST_TO_ADDR
24682: LD_EXP 46
24686: PUSH
24687: FOR_TO
24688: IFFALSE 24734
// begin if flags [ normalCounter + i ] then
24690: LD_VAR 0 4
24694: PUSH
24695: LD_EXP 45
24699: PUSH
24700: LD_VAR 0 8
24704: PLUS
24705: ARRAY
24706: IFFALSE 24732
// tmp := tmp & ( 100 + i ) & ; ;
24708: LD_ADDR_VAR 0 3
24712: PUSH
24713: LD_VAR 0 3
24717: PUSH
24718: LD_INT 100
24720: PUSH
24721: LD_VAR 0 8
24725: PLUS
24726: STR
24727: PUSH
24728: LD_STRING ;
24730: STR
24731: ST_TO_ADDR
// end ;
24732: GO 24687
24734: POP
24735: POP
// if tmp then
24736: LD_VAR 0 3
24740: IFFALSE 24752
// active := tmp ;
24742: LD_ADDR_VAR 0 7
24746: PUSH
24747: LD_VAR 0 3
24751: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24752: LD_STRING getStreamItemsFromMission("
24754: PUSH
24755: LD_VAR 0 5
24759: STR
24760: PUSH
24761: LD_STRING ","
24763: STR
24764: PUSH
24765: LD_VAR 0 6
24769: STR
24770: PUSH
24771: LD_STRING ","
24773: STR
24774: PUSH
24775: LD_VAR 0 7
24779: STR
24780: PUSH
24781: LD_STRING ")
24783: STR
24784: PPUSH
24785: CALL_OW 559
// end else
24789: GO 24798
// ToLua ( getStreamItemsFromMission("","","") ) ;
24791: LD_STRING getStreamItemsFromMission("","","")
24793: PPUSH
24794: CALL_OW 559
// end ;
24798: LD_VAR 0 2
24802: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24803: LD_EXP 44
24807: PUSH
24808: LD_EXP 49
24812: AND
24813: IFFALSE 24937
24815: GO 24817
24817: DISABLE
24818: LD_INT 0
24820: PPUSH
24821: PPUSH
// begin enable ;
24822: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24823: LD_ADDR_VAR 0 2
24827: PUSH
24828: LD_INT 22
24830: PUSH
24831: LD_OWVAR 2
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: LD_INT 34
24845: PUSH
24846: LD_INT 7
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 34
24855: PUSH
24856: LD_INT 45
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 34
24865: PUSH
24866: LD_INT 28
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 34
24875: PUSH
24876: LD_INT 47
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PPUSH
24894: CALL_OW 69
24898: ST_TO_ADDR
// if not tmp then
24899: LD_VAR 0 2
24903: NOT
24904: IFFALSE 24908
// exit ;
24906: GO 24937
// for i in tmp do
24908: LD_ADDR_VAR 0 1
24912: PUSH
24913: LD_VAR 0 2
24917: PUSH
24918: FOR_IN
24919: IFFALSE 24935
// begin SetLives ( i , 0 ) ;
24921: LD_VAR 0 1
24925: PPUSH
24926: LD_INT 0
24928: PPUSH
24929: CALL_OW 234
// end ;
24933: GO 24918
24935: POP
24936: POP
// end ;
24937: PPOPN 2
24939: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24940: LD_EXP 44
24944: PUSH
24945: LD_EXP 50
24949: AND
24950: IFFALSE 25034
24952: GO 24954
24954: DISABLE
24955: LD_INT 0
24957: PPUSH
24958: PPUSH
// begin enable ;
24959: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24960: LD_ADDR_VAR 0 2
24964: PUSH
24965: LD_INT 22
24967: PUSH
24968: LD_OWVAR 2
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 32
24979: PUSH
24980: LD_INT 3
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PPUSH
24991: CALL_OW 69
24995: ST_TO_ADDR
// if not tmp then
24996: LD_VAR 0 2
25000: NOT
25001: IFFALSE 25005
// exit ;
25003: GO 25034
// for i in tmp do
25005: LD_ADDR_VAR 0 1
25009: PUSH
25010: LD_VAR 0 2
25014: PUSH
25015: FOR_IN
25016: IFFALSE 25032
// begin SetLives ( i , 0 ) ;
25018: LD_VAR 0 1
25022: PPUSH
25023: LD_INT 0
25025: PPUSH
25026: CALL_OW 234
// end ;
25030: GO 25015
25032: POP
25033: POP
// end ;
25034: PPOPN 2
25036: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25037: LD_EXP 44
25041: PUSH
25042: LD_EXP 47
25046: AND
25047: IFFALSE 25140
25049: GO 25051
25051: DISABLE
25052: LD_INT 0
25054: PPUSH
// begin enable ;
25055: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25056: LD_ADDR_VAR 0 1
25060: PUSH
25061: LD_INT 22
25063: PUSH
25064: LD_OWVAR 2
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 25
25078: PUSH
25079: LD_INT 5
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 25
25088: PUSH
25089: LD_INT 9
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 25
25098: PUSH
25099: LD_INT 8
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PPUSH
25116: CALL_OW 69
25120: PUSH
25121: FOR_IN
25122: IFFALSE 25138
// begin SetClass ( i , 1 ) ;
25124: LD_VAR 0 1
25128: PPUSH
25129: LD_INT 1
25131: PPUSH
25132: CALL_OW 336
// end ;
25136: GO 25121
25138: POP
25139: POP
// end ;
25140: PPOPN 1
25142: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25143: LD_EXP 44
25147: PUSH
25148: LD_EXP 48
25152: AND
25153: PUSH
25154: LD_OWVAR 65
25158: PUSH
25159: LD_INT 7
25161: LESS
25162: AND
25163: IFFALSE 25177
25165: GO 25167
25167: DISABLE
// begin enable ;
25168: ENABLE
// game_speed := 7 ;
25169: LD_ADDR_OWVAR 65
25173: PUSH
25174: LD_INT 7
25176: ST_TO_ADDR
// end ;
25177: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25178: LD_EXP 44
25182: PUSH
25183: LD_EXP 51
25187: AND
25188: IFFALSE 25390
25190: GO 25192
25192: DISABLE
25193: LD_INT 0
25195: PPUSH
25196: PPUSH
25197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25198: LD_ADDR_VAR 0 3
25202: PUSH
25203: LD_INT 81
25205: PUSH
25206: LD_OWVAR 2
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 21
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PPUSH
25229: CALL_OW 69
25233: ST_TO_ADDR
// if not tmp then
25234: LD_VAR 0 3
25238: NOT
25239: IFFALSE 25243
// exit ;
25241: GO 25390
// if tmp > 5 then
25243: LD_VAR 0 3
25247: PUSH
25248: LD_INT 5
25250: GREATER
25251: IFFALSE 25263
// k := 5 else
25253: LD_ADDR_VAR 0 2
25257: PUSH
25258: LD_INT 5
25260: ST_TO_ADDR
25261: GO 25273
// k := tmp ;
25263: LD_ADDR_VAR 0 2
25267: PUSH
25268: LD_VAR 0 3
25272: ST_TO_ADDR
// for i := 1 to k do
25273: LD_ADDR_VAR 0 1
25277: PUSH
25278: DOUBLE
25279: LD_INT 1
25281: DEC
25282: ST_TO_ADDR
25283: LD_VAR 0 2
25287: PUSH
25288: FOR_TO
25289: IFFALSE 25388
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25291: LD_VAR 0 3
25295: PUSH
25296: LD_VAR 0 1
25300: ARRAY
25301: PPUSH
25302: LD_VAR 0 1
25306: PUSH
25307: LD_INT 4
25309: MOD
25310: PUSH
25311: LD_INT 1
25313: PLUS
25314: PPUSH
25315: CALL_OW 259
25319: PUSH
25320: LD_INT 10
25322: LESS
25323: IFFALSE 25386
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25325: LD_VAR 0 3
25329: PUSH
25330: LD_VAR 0 1
25334: ARRAY
25335: PPUSH
25336: LD_VAR 0 1
25340: PUSH
25341: LD_INT 4
25343: MOD
25344: PUSH
25345: LD_INT 1
25347: PLUS
25348: PPUSH
25349: LD_VAR 0 3
25353: PUSH
25354: LD_VAR 0 1
25358: ARRAY
25359: PPUSH
25360: LD_VAR 0 1
25364: PUSH
25365: LD_INT 4
25367: MOD
25368: PUSH
25369: LD_INT 1
25371: PLUS
25372: PPUSH
25373: CALL_OW 259
25377: PUSH
25378: LD_INT 1
25380: PLUS
25381: PPUSH
25382: CALL_OW 237
25386: GO 25288
25388: POP
25389: POP
// end ;
25390: PPOPN 3
25392: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25393: LD_EXP 44
25397: PUSH
25398: LD_EXP 52
25402: AND
25403: IFFALSE 25423
25405: GO 25407
25407: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25408: LD_INT 4
25410: PPUSH
25411: LD_OWVAR 2
25415: PPUSH
25416: LD_INT 0
25418: PPUSH
25419: CALL_OW 324
25423: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25424: LD_EXP 44
25428: PUSH
25429: LD_EXP 81
25433: AND
25434: IFFALSE 25454
25436: GO 25438
25438: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25439: LD_INT 19
25441: PPUSH
25442: LD_OWVAR 2
25446: PPUSH
25447: LD_INT 0
25449: PPUSH
25450: CALL_OW 324
25454: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25455: LD_EXP 44
25459: PUSH
25460: LD_EXP 53
25464: AND
25465: IFFALSE 25567
25467: GO 25469
25469: DISABLE
25470: LD_INT 0
25472: PPUSH
25473: PPUSH
// begin enable ;
25474: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25475: LD_ADDR_VAR 0 2
25479: PUSH
25480: LD_INT 22
25482: PUSH
25483: LD_OWVAR 2
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: LD_INT 34
25497: PUSH
25498: LD_INT 11
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 34
25507: PUSH
25508: LD_INT 30
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PPUSH
25524: CALL_OW 69
25528: ST_TO_ADDR
// if not tmp then
25529: LD_VAR 0 2
25533: NOT
25534: IFFALSE 25538
// exit ;
25536: GO 25567
// for i in tmp do
25538: LD_ADDR_VAR 0 1
25542: PUSH
25543: LD_VAR 0 2
25547: PUSH
25548: FOR_IN
25549: IFFALSE 25565
// begin SetLives ( i , 0 ) ;
25551: LD_VAR 0 1
25555: PPUSH
25556: LD_INT 0
25558: PPUSH
25559: CALL_OW 234
// end ;
25563: GO 25548
25565: POP
25566: POP
// end ;
25567: PPOPN 2
25569: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25570: LD_EXP 44
25574: PUSH
25575: LD_EXP 54
25579: AND
25580: IFFALSE 25600
25582: GO 25584
25584: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25585: LD_INT 32
25587: PPUSH
25588: LD_OWVAR 2
25592: PPUSH
25593: LD_INT 0
25595: PPUSH
25596: CALL_OW 324
25600: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25601: LD_EXP 44
25605: PUSH
25606: LD_EXP 55
25610: AND
25611: IFFALSE 25792
25613: GO 25615
25615: DISABLE
25616: LD_INT 0
25618: PPUSH
25619: PPUSH
25620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25621: LD_ADDR_VAR 0 2
25625: PUSH
25626: LD_INT 22
25628: PUSH
25629: LD_OWVAR 2
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 33
25640: PUSH
25641: LD_INT 3
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PPUSH
25652: CALL_OW 69
25656: ST_TO_ADDR
// if not tmp then
25657: LD_VAR 0 2
25661: NOT
25662: IFFALSE 25666
// exit ;
25664: GO 25792
// side := 0 ;
25666: LD_ADDR_VAR 0 3
25670: PUSH
25671: LD_INT 0
25673: ST_TO_ADDR
// for i := 1 to 8 do
25674: LD_ADDR_VAR 0 1
25678: PUSH
25679: DOUBLE
25680: LD_INT 1
25682: DEC
25683: ST_TO_ADDR
25684: LD_INT 8
25686: PUSH
25687: FOR_TO
25688: IFFALSE 25736
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25690: LD_OWVAR 2
25694: PUSH
25695: LD_VAR 0 1
25699: NONEQUAL
25700: PUSH
25701: LD_OWVAR 2
25705: PPUSH
25706: LD_VAR 0 1
25710: PPUSH
25711: CALL_OW 81
25715: PUSH
25716: LD_INT 2
25718: EQUAL
25719: AND
25720: IFFALSE 25734
// begin side := i ;
25722: LD_ADDR_VAR 0 3
25726: PUSH
25727: LD_VAR 0 1
25731: ST_TO_ADDR
// break ;
25732: GO 25736
// end ;
25734: GO 25687
25736: POP
25737: POP
// if not side then
25738: LD_VAR 0 3
25742: NOT
25743: IFFALSE 25747
// exit ;
25745: GO 25792
// for i := 1 to tmp do
25747: LD_ADDR_VAR 0 1
25751: PUSH
25752: DOUBLE
25753: LD_INT 1
25755: DEC
25756: ST_TO_ADDR
25757: LD_VAR 0 2
25761: PUSH
25762: FOR_TO
25763: IFFALSE 25790
// if Prob ( 60 ) then
25765: LD_INT 60
25767: PPUSH
25768: CALL_OW 13
25772: IFFALSE 25788
// SetSide ( i , side ) ;
25774: LD_VAR 0 1
25778: PPUSH
25779: LD_VAR 0 3
25783: PPUSH
25784: CALL_OW 235
25788: GO 25762
25790: POP
25791: POP
// end ;
25792: PPOPN 3
25794: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25795: LD_EXP 44
25799: PUSH
25800: LD_EXP 57
25804: AND
25805: IFFALSE 25924
25807: GO 25809
25809: DISABLE
25810: LD_INT 0
25812: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25813: LD_ADDR_VAR 0 1
25817: PUSH
25818: LD_INT 22
25820: PUSH
25821: LD_OWVAR 2
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 21
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 3
25842: PUSH
25843: LD_INT 23
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: PPUSH
25862: CALL_OW 69
25866: PUSH
25867: FOR_IN
25868: IFFALSE 25922
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25870: LD_VAR 0 1
25874: PPUSH
25875: CALL_OW 257
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: LD_INT 3
25888: PUSH
25889: LD_INT 4
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: IN
25898: IFFALSE 25920
// SetClass ( un , rand ( 1 , 4 ) ) ;
25900: LD_VAR 0 1
25904: PPUSH
25905: LD_INT 1
25907: PPUSH
25908: LD_INT 4
25910: PPUSH
25911: CALL_OW 12
25915: PPUSH
25916: CALL_OW 336
25920: GO 25867
25922: POP
25923: POP
// end ;
25924: PPOPN 1
25926: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25927: LD_EXP 44
25931: PUSH
25932: LD_EXP 56
25936: AND
25937: IFFALSE 26016
25939: GO 25941
25941: DISABLE
25942: LD_INT 0
25944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25945: LD_ADDR_VAR 0 1
25949: PUSH
25950: LD_INT 22
25952: PUSH
25953: LD_OWVAR 2
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 21
25964: PUSH
25965: LD_INT 3
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PPUSH
25976: CALL_OW 69
25980: ST_TO_ADDR
// if not tmp then
25981: LD_VAR 0 1
25985: NOT
25986: IFFALSE 25990
// exit ;
25988: GO 26016
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25990: LD_VAR 0 1
25994: PUSH
25995: LD_INT 1
25997: PPUSH
25998: LD_VAR 0 1
26002: PPUSH
26003: CALL_OW 12
26007: ARRAY
26008: PPUSH
26009: LD_INT 100
26011: PPUSH
26012: CALL_OW 234
// end ;
26016: PPOPN 1
26018: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26019: LD_EXP 44
26023: PUSH
26024: LD_EXP 58
26028: AND
26029: IFFALSE 26127
26031: GO 26033
26033: DISABLE
26034: LD_INT 0
26036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26037: LD_ADDR_VAR 0 1
26041: PUSH
26042: LD_INT 22
26044: PUSH
26045: LD_OWVAR 2
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 21
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PPUSH
26068: CALL_OW 69
26072: ST_TO_ADDR
// if not tmp then
26073: LD_VAR 0 1
26077: NOT
26078: IFFALSE 26082
// exit ;
26080: GO 26127
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26082: LD_VAR 0 1
26086: PUSH
26087: LD_INT 1
26089: PPUSH
26090: LD_VAR 0 1
26094: PPUSH
26095: CALL_OW 12
26099: ARRAY
26100: PPUSH
26101: LD_INT 1
26103: PPUSH
26104: LD_INT 4
26106: PPUSH
26107: CALL_OW 12
26111: PPUSH
26112: LD_INT 3000
26114: PPUSH
26115: LD_INT 9000
26117: PPUSH
26118: CALL_OW 12
26122: PPUSH
26123: CALL_OW 492
// end ;
26127: PPOPN 1
26129: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26130: LD_EXP 44
26134: PUSH
26135: LD_EXP 59
26139: AND
26140: IFFALSE 26160
26142: GO 26144
26144: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26145: LD_INT 1
26147: PPUSH
26148: LD_OWVAR 2
26152: PPUSH
26153: LD_INT 0
26155: PPUSH
26156: CALL_OW 324
26160: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26161: LD_EXP 44
26165: PUSH
26166: LD_EXP 60
26170: AND
26171: IFFALSE 26254
26173: GO 26175
26175: DISABLE
26176: LD_INT 0
26178: PPUSH
26179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26180: LD_ADDR_VAR 0 2
26184: PUSH
26185: LD_INT 22
26187: PUSH
26188: LD_OWVAR 2
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 21
26199: PUSH
26200: LD_INT 3
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PPUSH
26211: CALL_OW 69
26215: ST_TO_ADDR
// if not tmp then
26216: LD_VAR 0 2
26220: NOT
26221: IFFALSE 26225
// exit ;
26223: GO 26254
// for i in tmp do
26225: LD_ADDR_VAR 0 1
26229: PUSH
26230: LD_VAR 0 2
26234: PUSH
26235: FOR_IN
26236: IFFALSE 26252
// SetBLevel ( i , 10 ) ;
26238: LD_VAR 0 1
26242: PPUSH
26243: LD_INT 10
26245: PPUSH
26246: CALL_OW 241
26250: GO 26235
26252: POP
26253: POP
// end ;
26254: PPOPN 2
26256: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26257: LD_EXP 44
26261: PUSH
26262: LD_EXP 61
26266: AND
26267: IFFALSE 26378
26269: GO 26271
26271: DISABLE
26272: LD_INT 0
26274: PPUSH
26275: PPUSH
26276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26277: LD_ADDR_VAR 0 3
26281: PUSH
26282: LD_INT 22
26284: PUSH
26285: LD_OWVAR 2
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 25
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PPUSH
26308: CALL_OW 69
26312: ST_TO_ADDR
// if not tmp then
26313: LD_VAR 0 3
26317: NOT
26318: IFFALSE 26322
// exit ;
26320: GO 26378
// un := tmp [ rand ( 1 , tmp ) ] ;
26322: LD_ADDR_VAR 0 2
26326: PUSH
26327: LD_VAR 0 3
26331: PUSH
26332: LD_INT 1
26334: PPUSH
26335: LD_VAR 0 3
26339: PPUSH
26340: CALL_OW 12
26344: ARRAY
26345: ST_TO_ADDR
// if Crawls ( un ) then
26346: LD_VAR 0 2
26350: PPUSH
26351: CALL_OW 318
26355: IFFALSE 26366
// ComWalk ( un ) ;
26357: LD_VAR 0 2
26361: PPUSH
26362: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26366: LD_VAR 0 2
26370: PPUSH
26371: LD_INT 5
26373: PPUSH
26374: CALL_OW 336
// end ;
26378: PPOPN 3
26380: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26381: LD_EXP 44
26385: PUSH
26386: LD_EXP 62
26390: AND
26391: PUSH
26392: LD_OWVAR 67
26396: PUSH
26397: LD_INT 4
26399: LESS
26400: AND
26401: IFFALSE 26420
26403: GO 26405
26405: DISABLE
// begin Difficulty := Difficulty + 1 ;
26406: LD_ADDR_OWVAR 67
26410: PUSH
26411: LD_OWVAR 67
26415: PUSH
26416: LD_INT 1
26418: PLUS
26419: ST_TO_ADDR
// end ;
26420: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26421: LD_EXP 44
26425: PUSH
26426: LD_EXP 63
26430: AND
26431: IFFALSE 26534
26433: GO 26435
26435: DISABLE
26436: LD_INT 0
26438: PPUSH
// begin for i := 1 to 5 do
26439: LD_ADDR_VAR 0 1
26443: PUSH
26444: DOUBLE
26445: LD_INT 1
26447: DEC
26448: ST_TO_ADDR
26449: LD_INT 5
26451: PUSH
26452: FOR_TO
26453: IFFALSE 26532
// begin uc_nation := nation_nature ;
26455: LD_ADDR_OWVAR 21
26459: PUSH
26460: LD_INT 0
26462: ST_TO_ADDR
// uc_side := 0 ;
26463: LD_ADDR_OWVAR 20
26467: PUSH
26468: LD_INT 0
26470: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26471: LD_ADDR_OWVAR 29
26475: PUSH
26476: LD_INT 12
26478: PUSH
26479: LD_INT 12
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: ST_TO_ADDR
// hc_agressivity := 20 ;
26486: LD_ADDR_OWVAR 35
26490: PUSH
26491: LD_INT 20
26493: ST_TO_ADDR
// hc_class := class_tiger ;
26494: LD_ADDR_OWVAR 28
26498: PUSH
26499: LD_INT 14
26501: ST_TO_ADDR
// hc_gallery :=  ;
26502: LD_ADDR_OWVAR 33
26506: PUSH
26507: LD_STRING 
26509: ST_TO_ADDR
// hc_name :=  ;
26510: LD_ADDR_OWVAR 26
26514: PUSH
26515: LD_STRING 
26517: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26518: CALL_OW 44
26522: PPUSH
26523: LD_INT 0
26525: PPUSH
26526: CALL_OW 51
// end ;
26530: GO 26452
26532: POP
26533: POP
// end ;
26534: PPOPN 1
26536: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26537: LD_EXP 44
26541: PUSH
26542: LD_EXP 64
26546: AND
26547: IFFALSE 26556
26549: GO 26551
26551: DISABLE
// StreamSibBomb ;
26552: CALL 26557 0 0
26556: END
// export function StreamSibBomb ; var i , x , y ; begin
26557: LD_INT 0
26559: PPUSH
26560: PPUSH
26561: PPUSH
26562: PPUSH
// result := false ;
26563: LD_ADDR_VAR 0 1
26567: PUSH
26568: LD_INT 0
26570: ST_TO_ADDR
// for i := 1 to 16 do
26571: LD_ADDR_VAR 0 2
26575: PUSH
26576: DOUBLE
26577: LD_INT 1
26579: DEC
26580: ST_TO_ADDR
26581: LD_INT 16
26583: PUSH
26584: FOR_TO
26585: IFFALSE 26784
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26587: LD_ADDR_VAR 0 3
26591: PUSH
26592: LD_INT 10
26594: PUSH
26595: LD_INT 20
26597: PUSH
26598: LD_INT 30
26600: PUSH
26601: LD_INT 40
26603: PUSH
26604: LD_INT 50
26606: PUSH
26607: LD_INT 60
26609: PUSH
26610: LD_INT 70
26612: PUSH
26613: LD_INT 80
26615: PUSH
26616: LD_INT 90
26618: PUSH
26619: LD_INT 100
26621: PUSH
26622: LD_INT 110
26624: PUSH
26625: LD_INT 120
26627: PUSH
26628: LD_INT 130
26630: PUSH
26631: LD_INT 140
26633: PUSH
26634: LD_INT 150
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PPUSH
26657: LD_INT 15
26659: PPUSH
26660: CALL_OW 12
26664: ARRAY
26665: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26666: LD_ADDR_VAR 0 4
26670: PUSH
26671: LD_INT 10
26673: PUSH
26674: LD_INT 20
26676: PUSH
26677: LD_INT 30
26679: PUSH
26680: LD_INT 40
26682: PUSH
26683: LD_INT 50
26685: PUSH
26686: LD_INT 60
26688: PUSH
26689: LD_INT 70
26691: PUSH
26692: LD_INT 80
26694: PUSH
26695: LD_INT 90
26697: PUSH
26698: LD_INT 100
26700: PUSH
26701: LD_INT 110
26703: PUSH
26704: LD_INT 120
26706: PUSH
26707: LD_INT 130
26709: PUSH
26710: LD_INT 140
26712: PUSH
26713: LD_INT 150
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: PPUSH
26736: LD_INT 15
26738: PPUSH
26739: CALL_OW 12
26743: ARRAY
26744: ST_TO_ADDR
// if ValidHex ( x , y ) then
26745: LD_VAR 0 3
26749: PPUSH
26750: LD_VAR 0 4
26754: PPUSH
26755: CALL_OW 488
26759: IFFALSE 26782
// begin result := [ x , y ] ;
26761: LD_ADDR_VAR 0 1
26765: PUSH
26766: LD_VAR 0 3
26770: PUSH
26771: LD_VAR 0 4
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: ST_TO_ADDR
// break ;
26780: GO 26784
// end ; end ;
26782: GO 26584
26784: POP
26785: POP
// if result then
26786: LD_VAR 0 1
26790: IFFALSE 26850
// begin ToLua ( playSibBomb() ) ;
26792: LD_STRING playSibBomb()
26794: PPUSH
26795: CALL_OW 559
// wait ( 0 0$14 ) ;
26799: LD_INT 490
26801: PPUSH
26802: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26806: LD_VAR 0 1
26810: PUSH
26811: LD_INT 1
26813: ARRAY
26814: PPUSH
26815: LD_VAR 0 1
26819: PUSH
26820: LD_INT 2
26822: ARRAY
26823: PPUSH
26824: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26828: LD_VAR 0 1
26832: PUSH
26833: LD_INT 1
26835: ARRAY
26836: PPUSH
26837: LD_VAR 0 1
26841: PUSH
26842: LD_INT 2
26844: ARRAY
26845: PPUSH
26846: CALL_OW 429
// end ; end ;
26850: LD_VAR 0 1
26854: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26855: LD_EXP 44
26859: PUSH
26860: LD_EXP 66
26864: AND
26865: IFFALSE 26877
26867: GO 26869
26869: DISABLE
// YouLost (  ) ;
26870: LD_STRING 
26872: PPUSH
26873: CALL_OW 104
26877: END
// every 0 0$1 trigger StreamModeActive and sFog do
26878: LD_EXP 44
26882: PUSH
26883: LD_EXP 65
26887: AND
26888: IFFALSE 26902
26890: GO 26892
26892: DISABLE
// FogOff ( your_side ) ;
26893: LD_OWVAR 2
26897: PPUSH
26898: CALL_OW 344
26902: END
// every 0 0$1 trigger StreamModeActive and sSun do
26903: LD_EXP 44
26907: PUSH
26908: LD_EXP 67
26912: AND
26913: IFFALSE 26941
26915: GO 26917
26917: DISABLE
// begin solar_recharge_percent := 0 ;
26918: LD_ADDR_OWVAR 79
26922: PUSH
26923: LD_INT 0
26925: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26926: LD_INT 10500
26928: PPUSH
26929: CALL_OW 67
// solar_recharge_percent := 100 ;
26933: LD_ADDR_OWVAR 79
26937: PUSH
26938: LD_INT 100
26940: ST_TO_ADDR
// end ;
26941: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26942: LD_EXP 44
26946: PUSH
26947: LD_EXP 68
26951: AND
26952: IFFALSE 27191
26954: GO 26956
26956: DISABLE
26957: LD_INT 0
26959: PPUSH
26960: PPUSH
26961: PPUSH
// begin tmp := [ ] ;
26962: LD_ADDR_VAR 0 3
26966: PUSH
26967: EMPTY
26968: ST_TO_ADDR
// for i := 1 to 6 do
26969: LD_ADDR_VAR 0 1
26973: PUSH
26974: DOUBLE
26975: LD_INT 1
26977: DEC
26978: ST_TO_ADDR
26979: LD_INT 6
26981: PUSH
26982: FOR_TO
26983: IFFALSE 27088
// begin uc_nation := nation_nature ;
26985: LD_ADDR_OWVAR 21
26989: PUSH
26990: LD_INT 0
26992: ST_TO_ADDR
// uc_side := 0 ;
26993: LD_ADDR_OWVAR 20
26997: PUSH
26998: LD_INT 0
27000: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27001: LD_ADDR_OWVAR 29
27005: PUSH
27006: LD_INT 12
27008: PUSH
27009: LD_INT 12
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: ST_TO_ADDR
// hc_agressivity := 20 ;
27016: LD_ADDR_OWVAR 35
27020: PUSH
27021: LD_INT 20
27023: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27024: LD_ADDR_OWVAR 28
27028: PUSH
27029: LD_INT 17
27031: ST_TO_ADDR
// hc_gallery :=  ;
27032: LD_ADDR_OWVAR 33
27036: PUSH
27037: LD_STRING 
27039: ST_TO_ADDR
// hc_name :=  ;
27040: LD_ADDR_OWVAR 26
27044: PUSH
27045: LD_STRING 
27047: ST_TO_ADDR
// un := CreateHuman ;
27048: LD_ADDR_VAR 0 2
27052: PUSH
27053: CALL_OW 44
27057: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27058: LD_VAR 0 2
27062: PPUSH
27063: LD_INT 1
27065: PPUSH
27066: CALL_OW 51
// tmp := tmp ^ un ;
27070: LD_ADDR_VAR 0 3
27074: PUSH
27075: LD_VAR 0 3
27079: PUSH
27080: LD_VAR 0 2
27084: ADD
27085: ST_TO_ADDR
// end ;
27086: GO 26982
27088: POP
27089: POP
// repeat wait ( 0 0$1 ) ;
27090: LD_INT 35
27092: PPUSH
27093: CALL_OW 67
// for un in tmp do
27097: LD_ADDR_VAR 0 2
27101: PUSH
27102: LD_VAR 0 3
27106: PUSH
27107: FOR_IN
27108: IFFALSE 27182
// begin if IsDead ( un ) then
27110: LD_VAR 0 2
27114: PPUSH
27115: CALL_OW 301
27119: IFFALSE 27139
// begin tmp := tmp diff un ;
27121: LD_ADDR_VAR 0 3
27125: PUSH
27126: LD_VAR 0 3
27130: PUSH
27131: LD_VAR 0 2
27135: DIFF
27136: ST_TO_ADDR
// continue ;
27137: GO 27107
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27139: LD_VAR 0 2
27143: PPUSH
27144: LD_INT 3
27146: PUSH
27147: LD_INT 22
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PPUSH
27161: CALL_OW 69
27165: PPUSH
27166: LD_VAR 0 2
27170: PPUSH
27171: CALL_OW 74
27175: PPUSH
27176: CALL_OW 115
// end ;
27180: GO 27107
27182: POP
27183: POP
// until not tmp ;
27184: LD_VAR 0 3
27188: NOT
27189: IFFALSE 27090
// end ;
27191: PPOPN 3
27193: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27194: LD_EXP 44
27198: PUSH
27199: LD_EXP 69
27203: AND
27204: IFFALSE 27258
27206: GO 27208
27208: DISABLE
// begin ToLua ( displayTroll(); ) ;
27209: LD_STRING displayTroll();
27211: PPUSH
27212: CALL_OW 559
// wait ( 3 3$00 ) ;
27216: LD_INT 6300
27218: PPUSH
27219: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27223: LD_STRING hideTroll();
27225: PPUSH
27226: CALL_OW 559
// wait ( 1 1$00 ) ;
27230: LD_INT 2100
27232: PPUSH
27233: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27237: LD_STRING displayTroll();
27239: PPUSH
27240: CALL_OW 559
// wait ( 1 1$00 ) ;
27244: LD_INT 2100
27246: PPUSH
27247: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27251: LD_STRING hideTroll();
27253: PPUSH
27254: CALL_OW 559
// end ;
27258: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27259: LD_EXP 44
27263: PUSH
27264: LD_EXP 70
27268: AND
27269: IFFALSE 27332
27271: GO 27273
27273: DISABLE
27274: LD_INT 0
27276: PPUSH
// begin p := 0 ;
27277: LD_ADDR_VAR 0 1
27281: PUSH
27282: LD_INT 0
27284: ST_TO_ADDR
// repeat game_speed := 1 ;
27285: LD_ADDR_OWVAR 65
27289: PUSH
27290: LD_INT 1
27292: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27293: LD_INT 35
27295: PPUSH
27296: CALL_OW 67
// p := p + 1 ;
27300: LD_ADDR_VAR 0 1
27304: PUSH
27305: LD_VAR 0 1
27309: PUSH
27310: LD_INT 1
27312: PLUS
27313: ST_TO_ADDR
// until p >= 60 ;
27314: LD_VAR 0 1
27318: PUSH
27319: LD_INT 60
27321: GREATEREQUAL
27322: IFFALSE 27285
// game_speed := 4 ;
27324: LD_ADDR_OWVAR 65
27328: PUSH
27329: LD_INT 4
27331: ST_TO_ADDR
// end ;
27332: PPOPN 1
27334: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27335: LD_EXP 44
27339: PUSH
27340: LD_EXP 71
27344: AND
27345: IFFALSE 27491
27347: GO 27349
27349: DISABLE
27350: LD_INT 0
27352: PPUSH
27353: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27354: LD_ADDR_VAR 0 1
27358: PUSH
27359: LD_INT 22
27361: PUSH
27362: LD_OWVAR 2
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 2
27373: PUSH
27374: LD_INT 30
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 30
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: LIST
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PPUSH
27403: CALL_OW 69
27407: ST_TO_ADDR
// if not depot then
27408: LD_VAR 0 1
27412: NOT
27413: IFFALSE 27417
// exit ;
27415: GO 27491
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27417: LD_ADDR_VAR 0 2
27421: PUSH
27422: LD_VAR 0 1
27426: PUSH
27427: LD_INT 1
27429: PPUSH
27430: LD_VAR 0 1
27434: PPUSH
27435: CALL_OW 12
27439: ARRAY
27440: PPUSH
27441: CALL_OW 274
27445: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27446: LD_VAR 0 2
27450: PPUSH
27451: LD_INT 1
27453: PPUSH
27454: LD_INT 0
27456: PPUSH
27457: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27461: LD_VAR 0 2
27465: PPUSH
27466: LD_INT 2
27468: PPUSH
27469: LD_INT 0
27471: PPUSH
27472: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27476: LD_VAR 0 2
27480: PPUSH
27481: LD_INT 3
27483: PPUSH
27484: LD_INT 0
27486: PPUSH
27487: CALL_OW 277
// end ;
27491: PPOPN 2
27493: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27494: LD_EXP 44
27498: PUSH
27499: LD_EXP 72
27503: AND
27504: IFFALSE 27601
27506: GO 27508
27508: DISABLE
27509: LD_INT 0
27511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27512: LD_ADDR_VAR 0 1
27516: PUSH
27517: LD_INT 22
27519: PUSH
27520: LD_OWVAR 2
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 21
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 3
27541: PUSH
27542: LD_INT 23
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: PPUSH
27561: CALL_OW 69
27565: ST_TO_ADDR
// if not tmp then
27566: LD_VAR 0 1
27570: NOT
27571: IFFALSE 27575
// exit ;
27573: GO 27601
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27575: LD_VAR 0 1
27579: PUSH
27580: LD_INT 1
27582: PPUSH
27583: LD_VAR 0 1
27587: PPUSH
27588: CALL_OW 12
27592: ARRAY
27593: PPUSH
27594: LD_INT 200
27596: PPUSH
27597: CALL_OW 234
// end ;
27601: PPOPN 1
27603: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27604: LD_EXP 44
27608: PUSH
27609: LD_EXP 73
27613: AND
27614: IFFALSE 27693
27616: GO 27618
27618: DISABLE
27619: LD_INT 0
27621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27622: LD_ADDR_VAR 0 1
27626: PUSH
27627: LD_INT 22
27629: PUSH
27630: LD_OWVAR 2
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 21
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PPUSH
27653: CALL_OW 69
27657: ST_TO_ADDR
// if not tmp then
27658: LD_VAR 0 1
27662: NOT
27663: IFFALSE 27667
// exit ;
27665: GO 27693
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27667: LD_VAR 0 1
27671: PUSH
27672: LD_INT 1
27674: PPUSH
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 12
27684: ARRAY
27685: PPUSH
27686: LD_INT 60
27688: PPUSH
27689: CALL_OW 234
// end ;
27693: PPOPN 1
27695: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27696: LD_EXP 44
27700: PUSH
27701: LD_EXP 74
27705: AND
27706: IFFALSE 27805
27708: GO 27710
27710: DISABLE
27711: LD_INT 0
27713: PPUSH
27714: PPUSH
// begin enable ;
27715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27716: LD_ADDR_VAR 0 1
27720: PUSH
27721: LD_INT 22
27723: PUSH
27724: LD_OWVAR 2
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 61
27735: PUSH
27736: EMPTY
27737: LIST
27738: PUSH
27739: LD_INT 33
27741: PUSH
27742: LD_INT 2
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: LIST
27753: PPUSH
27754: CALL_OW 69
27758: ST_TO_ADDR
// if not tmp then
27759: LD_VAR 0 1
27763: NOT
27764: IFFALSE 27768
// exit ;
27766: GO 27805
// for i in tmp do
27768: LD_ADDR_VAR 0 2
27772: PUSH
27773: LD_VAR 0 1
27777: PUSH
27778: FOR_IN
27779: IFFALSE 27803
// if IsControledBy ( i ) then
27781: LD_VAR 0 2
27785: PPUSH
27786: CALL_OW 312
27790: IFFALSE 27801
// ComUnlink ( i ) ;
27792: LD_VAR 0 2
27796: PPUSH
27797: CALL_OW 136
27801: GO 27778
27803: POP
27804: POP
// end ;
27805: PPOPN 2
27807: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27808: LD_EXP 44
27812: PUSH
27813: LD_EXP 75
27817: AND
27818: IFFALSE 27958
27820: GO 27822
27822: DISABLE
27823: LD_INT 0
27825: PPUSH
27826: PPUSH
// begin ToLua ( displayPowell(); ) ;
27827: LD_STRING displayPowell();
27829: PPUSH
27830: CALL_OW 559
// uc_side := 0 ;
27834: LD_ADDR_OWVAR 20
27838: PUSH
27839: LD_INT 0
27841: ST_TO_ADDR
// uc_nation := 2 ;
27842: LD_ADDR_OWVAR 21
27846: PUSH
27847: LD_INT 2
27849: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27850: LD_ADDR_OWVAR 37
27854: PUSH
27855: LD_INT 14
27857: ST_TO_ADDR
// vc_engine := engine_siberite ;
27858: LD_ADDR_OWVAR 39
27862: PUSH
27863: LD_INT 3
27865: ST_TO_ADDR
// vc_control := control_apeman ;
27866: LD_ADDR_OWVAR 38
27870: PUSH
27871: LD_INT 5
27873: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27874: LD_ADDR_OWVAR 40
27878: PUSH
27879: LD_INT 29
27881: ST_TO_ADDR
// un := CreateVehicle ;
27882: LD_ADDR_VAR 0 2
27886: PUSH
27887: CALL_OW 45
27891: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27892: LD_VAR 0 2
27896: PPUSH
27897: LD_INT 1
27899: PPUSH
27900: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27904: LD_INT 35
27906: PPUSH
27907: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27911: LD_VAR 0 2
27915: PPUSH
27916: LD_INT 22
27918: PUSH
27919: LD_OWVAR 2
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PPUSH
27928: CALL_OW 69
27932: PPUSH
27933: LD_VAR 0 2
27937: PPUSH
27938: CALL_OW 74
27942: PPUSH
27943: CALL_OW 115
// until IsDead ( un ) ;
27947: LD_VAR 0 2
27951: PPUSH
27952: CALL_OW 301
27956: IFFALSE 27904
// end ;
27958: PPOPN 2
27960: END
// every 0 0$1 trigger StreamModeActive and sStu do
27961: LD_EXP 44
27965: PUSH
27966: LD_EXP 83
27970: AND
27971: IFFALSE 27987
27973: GO 27975
27975: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27976: LD_STRING displayStucuk();
27978: PPUSH
27979: CALL_OW 559
// ResetFog ;
27983: CALL_OW 335
// end ;
27987: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27988: LD_EXP 44
27992: PUSH
27993: LD_EXP 76
27997: AND
27998: IFFALSE 28139
28000: GO 28002
28002: DISABLE
28003: LD_INT 0
28005: PPUSH
28006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28007: LD_ADDR_VAR 0 2
28011: PUSH
28012: LD_INT 22
28014: PUSH
28015: LD_OWVAR 2
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 21
28026: PUSH
28027: LD_INT 1
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PPUSH
28038: CALL_OW 69
28042: ST_TO_ADDR
// if not tmp then
28043: LD_VAR 0 2
28047: NOT
28048: IFFALSE 28052
// exit ;
28050: GO 28139
// un := tmp [ rand ( 1 , tmp ) ] ;
28052: LD_ADDR_VAR 0 1
28056: PUSH
28057: LD_VAR 0 2
28061: PUSH
28062: LD_INT 1
28064: PPUSH
28065: LD_VAR 0 2
28069: PPUSH
28070: CALL_OW 12
28074: ARRAY
28075: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28076: LD_VAR 0 1
28080: PPUSH
28081: LD_INT 0
28083: PPUSH
28084: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28088: LD_VAR 0 1
28092: PPUSH
28093: LD_OWVAR 3
28097: PUSH
28098: LD_VAR 0 1
28102: DIFF
28103: PPUSH
28104: LD_VAR 0 1
28108: PPUSH
28109: CALL_OW 74
28113: PPUSH
28114: CALL_OW 115
// wait ( 0 0$20 ) ;
28118: LD_INT 700
28120: PPUSH
28121: CALL_OW 67
// SetSide ( un , your_side ) ;
28125: LD_VAR 0 1
28129: PPUSH
28130: LD_OWVAR 2
28134: PPUSH
28135: CALL_OW 235
// end ;
28139: PPOPN 2
28141: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28142: LD_EXP 44
28146: PUSH
28147: LD_EXP 77
28151: AND
28152: IFFALSE 28258
28154: GO 28156
28156: DISABLE
28157: LD_INT 0
28159: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28160: LD_ADDR_VAR 0 1
28164: PUSH
28165: LD_INT 22
28167: PUSH
28168: LD_OWVAR 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 30
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 30
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: LIST
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PPUSH
28209: CALL_OW 69
28213: ST_TO_ADDR
// if not depot then
28214: LD_VAR 0 1
28218: NOT
28219: IFFALSE 28223
// exit ;
28221: GO 28258
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28223: LD_VAR 0 1
28227: PUSH
28228: LD_INT 1
28230: ARRAY
28231: PPUSH
28232: CALL_OW 250
28236: PPUSH
28237: LD_VAR 0 1
28241: PUSH
28242: LD_INT 1
28244: ARRAY
28245: PPUSH
28246: CALL_OW 251
28250: PPUSH
28251: LD_INT 70
28253: PPUSH
28254: CALL_OW 495
// end ;
28258: PPOPN 1
28260: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28261: LD_EXP 44
28265: PUSH
28266: LD_EXP 78
28270: AND
28271: IFFALSE 28482
28273: GO 28275
28275: DISABLE
28276: LD_INT 0
28278: PPUSH
28279: PPUSH
28280: PPUSH
28281: PPUSH
28282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28283: LD_ADDR_VAR 0 5
28287: PUSH
28288: LD_INT 22
28290: PUSH
28291: LD_OWVAR 2
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 21
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PPUSH
28314: CALL_OW 69
28318: ST_TO_ADDR
// if not tmp then
28319: LD_VAR 0 5
28323: NOT
28324: IFFALSE 28328
// exit ;
28326: GO 28482
// for i in tmp do
28328: LD_ADDR_VAR 0 1
28332: PUSH
28333: LD_VAR 0 5
28337: PUSH
28338: FOR_IN
28339: IFFALSE 28480
// begin d := rand ( 0 , 5 ) ;
28341: LD_ADDR_VAR 0 4
28345: PUSH
28346: LD_INT 0
28348: PPUSH
28349: LD_INT 5
28351: PPUSH
28352: CALL_OW 12
28356: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28357: LD_ADDR_VAR 0 2
28361: PUSH
28362: LD_VAR 0 1
28366: PPUSH
28367: CALL_OW 250
28371: PPUSH
28372: LD_VAR 0 4
28376: PPUSH
28377: LD_INT 3
28379: PPUSH
28380: LD_INT 12
28382: PPUSH
28383: CALL_OW 12
28387: PPUSH
28388: CALL_OW 272
28392: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28393: LD_ADDR_VAR 0 3
28397: PUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL_OW 251
28407: PPUSH
28408: LD_VAR 0 4
28412: PPUSH
28413: LD_INT 3
28415: PPUSH
28416: LD_INT 12
28418: PPUSH
28419: CALL_OW 12
28423: PPUSH
28424: CALL_OW 273
28428: ST_TO_ADDR
// if ValidHex ( x , y ) then
28429: LD_VAR 0 2
28433: PPUSH
28434: LD_VAR 0 3
28438: PPUSH
28439: CALL_OW 488
28443: IFFALSE 28478
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28445: LD_VAR 0 1
28449: PPUSH
28450: LD_VAR 0 2
28454: PPUSH
28455: LD_VAR 0 3
28459: PPUSH
28460: LD_INT 3
28462: PPUSH
28463: LD_INT 6
28465: PPUSH
28466: CALL_OW 12
28470: PPUSH
28471: LD_INT 1
28473: PPUSH
28474: CALL_OW 483
// end ;
28478: GO 28338
28480: POP
28481: POP
// end ;
28482: PPOPN 5
28484: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28485: LD_EXP 44
28489: PUSH
28490: LD_EXP 79
28494: AND
28495: IFFALSE 28589
28497: GO 28499
28499: DISABLE
28500: LD_INT 0
28502: PPUSH
28503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28504: LD_ADDR_VAR 0 2
28508: PUSH
28509: LD_INT 22
28511: PUSH
28512: LD_OWVAR 2
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 32
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 21
28533: PUSH
28534: LD_INT 2
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: PPUSH
28546: CALL_OW 69
28550: ST_TO_ADDR
// if not tmp then
28551: LD_VAR 0 2
28555: NOT
28556: IFFALSE 28560
// exit ;
28558: GO 28589
// for i in tmp do
28560: LD_ADDR_VAR 0 1
28564: PUSH
28565: LD_VAR 0 2
28569: PUSH
28570: FOR_IN
28571: IFFALSE 28587
// SetFuel ( i , 0 ) ;
28573: LD_VAR 0 1
28577: PPUSH
28578: LD_INT 0
28580: PPUSH
28581: CALL_OW 240
28585: GO 28570
28587: POP
28588: POP
// end ;
28589: PPOPN 2
28591: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28592: LD_EXP 44
28596: PUSH
28597: LD_EXP 80
28601: AND
28602: IFFALSE 28668
28604: GO 28606
28606: DISABLE
28607: LD_INT 0
28609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28610: LD_ADDR_VAR 0 1
28614: PUSH
28615: LD_INT 22
28617: PUSH
28618: LD_OWVAR 2
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 30
28629: PUSH
28630: LD_INT 29
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PPUSH
28641: CALL_OW 69
28645: ST_TO_ADDR
// if not tmp then
28646: LD_VAR 0 1
28650: NOT
28651: IFFALSE 28655
// exit ;
28653: GO 28668
// DestroyUnit ( tmp [ 1 ] ) ;
28655: LD_VAR 0 1
28659: PUSH
28660: LD_INT 1
28662: ARRAY
28663: PPUSH
28664: CALL_OW 65
// end ;
28668: PPOPN 1
28670: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28671: LD_EXP 44
28675: PUSH
28676: LD_EXP 82
28680: AND
28681: IFFALSE 28810
28683: GO 28685
28685: DISABLE
28686: LD_INT 0
28688: PPUSH
// begin uc_side := 0 ;
28689: LD_ADDR_OWVAR 20
28693: PUSH
28694: LD_INT 0
28696: ST_TO_ADDR
// uc_nation := nation_arabian ;
28697: LD_ADDR_OWVAR 21
28701: PUSH
28702: LD_INT 2
28704: ST_TO_ADDR
// hc_gallery :=  ;
28705: LD_ADDR_OWVAR 33
28709: PUSH
28710: LD_STRING 
28712: ST_TO_ADDR
// hc_name :=  ;
28713: LD_ADDR_OWVAR 26
28717: PUSH
28718: LD_STRING 
28720: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28721: LD_INT 1
28723: PPUSH
28724: LD_INT 11
28726: PPUSH
28727: LD_INT 10
28729: PPUSH
28730: CALL_OW 380
// un := CreateHuman ;
28734: LD_ADDR_VAR 0 1
28738: PUSH
28739: CALL_OW 44
28743: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28744: LD_VAR 0 1
28748: PPUSH
28749: LD_INT 1
28751: PPUSH
28752: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28756: LD_INT 35
28758: PPUSH
28759: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28763: LD_VAR 0 1
28767: PPUSH
28768: LD_INT 22
28770: PUSH
28771: LD_OWVAR 2
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PPUSH
28780: CALL_OW 69
28784: PPUSH
28785: LD_VAR 0 1
28789: PPUSH
28790: CALL_OW 74
28794: PPUSH
28795: CALL_OW 115
// until IsDead ( un ) ;
28799: LD_VAR 0 1
28803: PPUSH
28804: CALL_OW 301
28808: IFFALSE 28756
// end ;
28810: PPOPN 1
28812: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28813: LD_EXP 44
28817: PUSH
28818: LD_EXP 84
28822: AND
28823: IFFALSE 28835
28825: GO 28827
28827: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28828: LD_STRING earthquake(getX(game), 0, 32)
28830: PPUSH
28831: CALL_OW 559
28835: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28836: LD_EXP 44
28840: PUSH
28841: LD_EXP 85
28845: AND
28846: IFFALSE 28937
28848: GO 28850
28850: DISABLE
28851: LD_INT 0
28853: PPUSH
// begin enable ;
28854: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28855: LD_ADDR_VAR 0 1
28859: PUSH
28860: LD_INT 22
28862: PUSH
28863: LD_OWVAR 2
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 21
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 33
28884: PUSH
28885: LD_INT 3
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: PPUSH
28897: CALL_OW 69
28901: ST_TO_ADDR
// if not tmp then
28902: LD_VAR 0 1
28906: NOT
28907: IFFALSE 28911
// exit ;
28909: GO 28937
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28911: LD_VAR 0 1
28915: PUSH
28916: LD_INT 1
28918: PPUSH
28919: LD_VAR 0 1
28923: PPUSH
28924: CALL_OW 12
28928: ARRAY
28929: PPUSH
28930: LD_INT 1
28932: PPUSH
28933: CALL_OW 234
// end ;
28937: PPOPN 1
28939: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28940: LD_EXP 44
28944: PUSH
28945: LD_EXP 86
28949: AND
28950: IFFALSE 29091
28952: GO 28954
28954: DISABLE
28955: LD_INT 0
28957: PPUSH
28958: PPUSH
28959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28960: LD_ADDR_VAR 0 3
28964: PUSH
28965: LD_INT 22
28967: PUSH
28968: LD_OWVAR 2
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 25
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PPUSH
28991: CALL_OW 69
28995: ST_TO_ADDR
// if not tmp then
28996: LD_VAR 0 3
29000: NOT
29001: IFFALSE 29005
// exit ;
29003: GO 29091
// un := tmp [ rand ( 1 , tmp ) ] ;
29005: LD_ADDR_VAR 0 2
29009: PUSH
29010: LD_VAR 0 3
29014: PUSH
29015: LD_INT 1
29017: PPUSH
29018: LD_VAR 0 3
29022: PPUSH
29023: CALL_OW 12
29027: ARRAY
29028: ST_TO_ADDR
// if Crawls ( un ) then
29029: LD_VAR 0 2
29033: PPUSH
29034: CALL_OW 318
29038: IFFALSE 29049
// ComWalk ( un ) ;
29040: LD_VAR 0 2
29044: PPUSH
29045: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29049: LD_VAR 0 2
29053: PPUSH
29054: LD_INT 9
29056: PPUSH
29057: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29061: LD_INT 28
29063: PPUSH
29064: LD_OWVAR 2
29068: PPUSH
29069: LD_INT 2
29071: PPUSH
29072: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29076: LD_INT 29
29078: PPUSH
29079: LD_OWVAR 2
29083: PPUSH
29084: LD_INT 2
29086: PPUSH
29087: CALL_OW 322
// end ;
29091: PPOPN 3
29093: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29094: LD_EXP 44
29098: PUSH
29099: LD_EXP 87
29103: AND
29104: IFFALSE 29215
29106: GO 29108
29108: DISABLE
29109: LD_INT 0
29111: PPUSH
29112: PPUSH
29113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29114: LD_ADDR_VAR 0 3
29118: PUSH
29119: LD_INT 22
29121: PUSH
29122: LD_OWVAR 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 25
29133: PUSH
29134: LD_INT 1
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PPUSH
29145: CALL_OW 69
29149: ST_TO_ADDR
// if not tmp then
29150: LD_VAR 0 3
29154: NOT
29155: IFFALSE 29159
// exit ;
29157: GO 29215
// un := tmp [ rand ( 1 , tmp ) ] ;
29159: LD_ADDR_VAR 0 2
29163: PUSH
29164: LD_VAR 0 3
29168: PUSH
29169: LD_INT 1
29171: PPUSH
29172: LD_VAR 0 3
29176: PPUSH
29177: CALL_OW 12
29181: ARRAY
29182: ST_TO_ADDR
// if Crawls ( un ) then
29183: LD_VAR 0 2
29187: PPUSH
29188: CALL_OW 318
29192: IFFALSE 29203
// ComWalk ( un ) ;
29194: LD_VAR 0 2
29198: PPUSH
29199: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29203: LD_VAR 0 2
29207: PPUSH
29208: LD_INT 8
29210: PPUSH
29211: CALL_OW 336
// end ;
29215: PPOPN 3
29217: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29218: LD_EXP 44
29222: PUSH
29223: LD_EXP 88
29227: AND
29228: IFFALSE 29372
29230: GO 29232
29232: DISABLE
29233: LD_INT 0
29235: PPUSH
29236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29237: LD_ADDR_VAR 0 2
29241: PUSH
29242: LD_INT 22
29244: PUSH
29245: LD_OWVAR 2
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 21
29256: PUSH
29257: LD_INT 2
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 2
29266: PUSH
29267: LD_INT 34
29269: PUSH
29270: LD_INT 12
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 34
29279: PUSH
29280: LD_INT 51
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 34
29289: PUSH
29290: LD_INT 32
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: LIST
29307: PPUSH
29308: CALL_OW 69
29312: ST_TO_ADDR
// if not tmp then
29313: LD_VAR 0 2
29317: NOT
29318: IFFALSE 29322
// exit ;
29320: GO 29372
// for i in tmp do
29322: LD_ADDR_VAR 0 1
29326: PUSH
29327: LD_VAR 0 2
29331: PUSH
29332: FOR_IN
29333: IFFALSE 29370
// if GetCargo ( i , mat_artifact ) = 0 then
29335: LD_VAR 0 1
29339: PPUSH
29340: LD_INT 4
29342: PPUSH
29343: CALL_OW 289
29347: PUSH
29348: LD_INT 0
29350: EQUAL
29351: IFFALSE 29368
// SetCargo ( i , mat_siberit , 100 ) ;
29353: LD_VAR 0 1
29357: PPUSH
29358: LD_INT 3
29360: PPUSH
29361: LD_INT 100
29363: PPUSH
29364: CALL_OW 290
29368: GO 29332
29370: POP
29371: POP
// end ;
29372: PPOPN 2
29374: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29375: LD_EXP 44
29379: PUSH
29380: LD_EXP 89
29384: AND
29385: IFFALSE 29568
29387: GO 29389
29389: DISABLE
29390: LD_INT 0
29392: PPUSH
29393: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29394: LD_ADDR_VAR 0 2
29398: PUSH
29399: LD_INT 22
29401: PUSH
29402: LD_OWVAR 2
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PPUSH
29411: CALL_OW 69
29415: ST_TO_ADDR
// if not tmp then
29416: LD_VAR 0 2
29420: NOT
29421: IFFALSE 29425
// exit ;
29423: GO 29568
// for i := 1 to 2 do
29425: LD_ADDR_VAR 0 1
29429: PUSH
29430: DOUBLE
29431: LD_INT 1
29433: DEC
29434: ST_TO_ADDR
29435: LD_INT 2
29437: PUSH
29438: FOR_TO
29439: IFFALSE 29566
// begin uc_side := your_side ;
29441: LD_ADDR_OWVAR 20
29445: PUSH
29446: LD_OWVAR 2
29450: ST_TO_ADDR
// uc_nation := nation_american ;
29451: LD_ADDR_OWVAR 21
29455: PUSH
29456: LD_INT 1
29458: ST_TO_ADDR
// vc_chassis := us_morphling ;
29459: LD_ADDR_OWVAR 37
29463: PUSH
29464: LD_INT 5
29466: ST_TO_ADDR
// vc_engine := engine_siberite ;
29467: LD_ADDR_OWVAR 39
29471: PUSH
29472: LD_INT 3
29474: ST_TO_ADDR
// vc_control := control_computer ;
29475: LD_ADDR_OWVAR 38
29479: PUSH
29480: LD_INT 3
29482: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29483: LD_ADDR_OWVAR 40
29487: PUSH
29488: LD_INT 10
29490: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29491: LD_VAR 0 2
29495: PUSH
29496: LD_INT 1
29498: ARRAY
29499: PPUSH
29500: CALL_OW 310
29504: NOT
29505: IFFALSE 29552
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29507: CALL_OW 45
29511: PPUSH
29512: LD_VAR 0 2
29516: PUSH
29517: LD_INT 1
29519: ARRAY
29520: PPUSH
29521: CALL_OW 250
29525: PPUSH
29526: LD_VAR 0 2
29530: PUSH
29531: LD_INT 1
29533: ARRAY
29534: PPUSH
29535: CALL_OW 251
29539: PPUSH
29540: LD_INT 12
29542: PPUSH
29543: LD_INT 1
29545: PPUSH
29546: CALL_OW 50
29550: GO 29564
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29552: CALL_OW 45
29556: PPUSH
29557: LD_INT 1
29559: PPUSH
29560: CALL_OW 51
// end ;
29564: GO 29438
29566: POP
29567: POP
// end ;
29568: PPOPN 2
29570: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29571: LD_EXP 44
29575: PUSH
29576: LD_EXP 90
29580: AND
29581: IFFALSE 29803
29583: GO 29585
29585: DISABLE
29586: LD_INT 0
29588: PPUSH
29589: PPUSH
29590: PPUSH
29591: PPUSH
29592: PPUSH
29593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29594: LD_ADDR_VAR 0 6
29598: PUSH
29599: LD_INT 22
29601: PUSH
29602: LD_OWVAR 2
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 21
29613: PUSH
29614: LD_INT 1
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: LD_INT 23
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: PPUSH
29643: CALL_OW 69
29647: ST_TO_ADDR
// if not tmp then
29648: LD_VAR 0 6
29652: NOT
29653: IFFALSE 29657
// exit ;
29655: GO 29803
// s1 := rand ( 1 , 4 ) ;
29657: LD_ADDR_VAR 0 2
29661: PUSH
29662: LD_INT 1
29664: PPUSH
29665: LD_INT 4
29667: PPUSH
29668: CALL_OW 12
29672: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29673: LD_ADDR_VAR 0 4
29677: PUSH
29678: LD_VAR 0 6
29682: PUSH
29683: LD_INT 1
29685: ARRAY
29686: PPUSH
29687: LD_VAR 0 2
29691: PPUSH
29692: CALL_OW 259
29696: ST_TO_ADDR
// if s1 = 1 then
29697: LD_VAR 0 2
29701: PUSH
29702: LD_INT 1
29704: EQUAL
29705: IFFALSE 29725
// s2 := rand ( 2 , 4 ) else
29707: LD_ADDR_VAR 0 3
29711: PUSH
29712: LD_INT 2
29714: PPUSH
29715: LD_INT 4
29717: PPUSH
29718: CALL_OW 12
29722: ST_TO_ADDR
29723: GO 29733
// s2 := 1 ;
29725: LD_ADDR_VAR 0 3
29729: PUSH
29730: LD_INT 1
29732: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29733: LD_ADDR_VAR 0 5
29737: PUSH
29738: LD_VAR 0 6
29742: PUSH
29743: LD_INT 1
29745: ARRAY
29746: PPUSH
29747: LD_VAR 0 3
29751: PPUSH
29752: CALL_OW 259
29756: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29757: LD_VAR 0 6
29761: PUSH
29762: LD_INT 1
29764: ARRAY
29765: PPUSH
29766: LD_VAR 0 2
29770: PPUSH
29771: LD_VAR 0 5
29775: PPUSH
29776: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29780: LD_VAR 0 6
29784: PUSH
29785: LD_INT 1
29787: ARRAY
29788: PPUSH
29789: LD_VAR 0 3
29793: PPUSH
29794: LD_VAR 0 4
29798: PPUSH
29799: CALL_OW 237
// end ;
29803: PPOPN 6
29805: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29806: LD_EXP 44
29810: PUSH
29811: LD_EXP 91
29815: AND
29816: IFFALSE 29895
29818: GO 29820
29820: DISABLE
29821: LD_INT 0
29823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29824: LD_ADDR_VAR 0 1
29828: PUSH
29829: LD_INT 22
29831: PUSH
29832: LD_OWVAR 2
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 30
29843: PUSH
29844: LD_INT 3
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PPUSH
29855: CALL_OW 69
29859: ST_TO_ADDR
// if not tmp then
29860: LD_VAR 0 1
29864: NOT
29865: IFFALSE 29869
// exit ;
29867: GO 29895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29869: LD_VAR 0 1
29873: PUSH
29874: LD_INT 1
29876: PPUSH
29877: LD_VAR 0 1
29881: PPUSH
29882: CALL_OW 12
29886: ARRAY
29887: PPUSH
29888: LD_INT 1
29890: PPUSH
29891: CALL_OW 234
// end ;
29895: PPOPN 1
29897: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29898: LD_EXP 44
29902: PUSH
29903: LD_EXP 92
29907: AND
29908: IFFALSE 30020
29910: GO 29912
29912: DISABLE
29913: LD_INT 0
29915: PPUSH
29916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29917: LD_ADDR_VAR 0 2
29921: PUSH
29922: LD_INT 22
29924: PUSH
29925: LD_OWVAR 2
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 2
29936: PUSH
29937: LD_INT 30
29939: PUSH
29940: LD_INT 27
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 30
29949: PUSH
29950: LD_INT 26
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 30
29959: PUSH
29960: LD_INT 28
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PPUSH
29977: CALL_OW 69
29981: ST_TO_ADDR
// if not tmp then
29982: LD_VAR 0 2
29986: NOT
29987: IFFALSE 29991
// exit ;
29989: GO 30020
// for i in tmp do
29991: LD_ADDR_VAR 0 1
29995: PUSH
29996: LD_VAR 0 2
30000: PUSH
30001: FOR_IN
30002: IFFALSE 30018
// SetLives ( i , 1 ) ;
30004: LD_VAR 0 1
30008: PPUSH
30009: LD_INT 1
30011: PPUSH
30012: CALL_OW 234
30016: GO 30001
30018: POP
30019: POP
// end ;
30020: PPOPN 2
30022: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30023: LD_EXP 44
30027: PUSH
30028: LD_EXP 93
30032: AND
30033: IFFALSE 30320
30035: GO 30037
30037: DISABLE
30038: LD_INT 0
30040: PPUSH
30041: PPUSH
30042: PPUSH
// begin i := rand ( 1 , 7 ) ;
30043: LD_ADDR_VAR 0 1
30047: PUSH
30048: LD_INT 1
30050: PPUSH
30051: LD_INT 7
30053: PPUSH
30054: CALL_OW 12
30058: ST_TO_ADDR
// case i of 1 :
30059: LD_VAR 0 1
30063: PUSH
30064: LD_INT 1
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30082
30072: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30073: LD_STRING earthquake(getX(game), 0, 32)
30075: PPUSH
30076: CALL_OW 559
30080: GO 30320
30082: LD_INT 2
30084: DOUBLE
30085: EQUAL
30086: IFTRUE 30090
30088: GO 30104
30090: POP
// begin ToLua ( displayStucuk(); ) ;
30091: LD_STRING displayStucuk();
30093: PPUSH
30094: CALL_OW 559
// ResetFog ;
30098: CALL_OW 335
// end ; 3 :
30102: GO 30320
30104: LD_INT 3
30106: DOUBLE
30107: EQUAL
30108: IFTRUE 30112
30110: GO 30216
30112: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30113: LD_ADDR_VAR 0 2
30117: PUSH
30118: LD_INT 22
30120: PUSH
30121: LD_OWVAR 2
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 25
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PPUSH
30144: CALL_OW 69
30148: ST_TO_ADDR
// if not tmp then
30149: LD_VAR 0 2
30153: NOT
30154: IFFALSE 30158
// exit ;
30156: GO 30320
// un := tmp [ rand ( 1 , tmp ) ] ;
30158: LD_ADDR_VAR 0 3
30162: PUSH
30163: LD_VAR 0 2
30167: PUSH
30168: LD_INT 1
30170: PPUSH
30171: LD_VAR 0 2
30175: PPUSH
30176: CALL_OW 12
30180: ARRAY
30181: ST_TO_ADDR
// if Crawls ( un ) then
30182: LD_VAR 0 3
30186: PPUSH
30187: CALL_OW 318
30191: IFFALSE 30202
// ComWalk ( un ) ;
30193: LD_VAR 0 3
30197: PPUSH
30198: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30202: LD_VAR 0 3
30206: PPUSH
30207: LD_INT 8
30209: PPUSH
30210: CALL_OW 336
// end ; 4 :
30214: GO 30320
30216: LD_INT 4
30218: DOUBLE
30219: EQUAL
30220: IFTRUE 30224
30222: GO 30298
30224: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30225: LD_ADDR_VAR 0 2
30229: PUSH
30230: LD_INT 22
30232: PUSH
30233: LD_OWVAR 2
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 30
30244: PUSH
30245: LD_INT 29
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PPUSH
30256: CALL_OW 69
30260: ST_TO_ADDR
// if not tmp then
30261: LD_VAR 0 2
30265: NOT
30266: IFFALSE 30270
// exit ;
30268: GO 30320
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30270: LD_VAR 0 2
30274: PUSH
30275: LD_INT 1
30277: ARRAY
30278: PPUSH
30279: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30283: LD_VAR 0 2
30287: PUSH
30288: LD_INT 1
30290: ARRAY
30291: PPUSH
30292: CALL_OW 65
// end ; 5 .. 7 :
30296: GO 30320
30298: LD_INT 5
30300: DOUBLE
30301: GREATEREQUAL
30302: IFFALSE 30310
30304: LD_INT 7
30306: DOUBLE
30307: LESSEQUAL
30308: IFTRUE 30312
30310: GO 30319
30312: POP
// StreamSibBomb ; end ;
30313: CALL 26557 0 0
30317: GO 30320
30319: POP
// end ;
30320: PPOPN 3
30322: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30323: LD_EXP 44
30327: PUSH
30328: LD_EXP 94
30332: AND
30333: IFFALSE 30489
30335: GO 30337
30337: DISABLE
30338: LD_INT 0
30340: PPUSH
30341: PPUSH
30342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30343: LD_ADDR_VAR 0 2
30347: PUSH
30348: LD_INT 81
30350: PUSH
30351: LD_OWVAR 2
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 2
30362: PUSH
30363: LD_INT 21
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 21
30375: PUSH
30376: LD_INT 2
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PPUSH
30392: CALL_OW 69
30396: ST_TO_ADDR
// if not tmp then
30397: LD_VAR 0 2
30401: NOT
30402: IFFALSE 30406
// exit ;
30404: GO 30489
// p := 0 ;
30406: LD_ADDR_VAR 0 3
30410: PUSH
30411: LD_INT 0
30413: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30414: LD_INT 35
30416: PPUSH
30417: CALL_OW 67
// p := p + 1 ;
30421: LD_ADDR_VAR 0 3
30425: PUSH
30426: LD_VAR 0 3
30430: PUSH
30431: LD_INT 1
30433: PLUS
30434: ST_TO_ADDR
// for i in tmp do
30435: LD_ADDR_VAR 0 1
30439: PUSH
30440: LD_VAR 0 2
30444: PUSH
30445: FOR_IN
30446: IFFALSE 30477
// if GetLives ( i ) < 1000 then
30448: LD_VAR 0 1
30452: PPUSH
30453: CALL_OW 256
30457: PUSH
30458: LD_INT 1000
30460: LESS
30461: IFFALSE 30475
// SetLives ( i , 1000 ) ;
30463: LD_VAR 0 1
30467: PPUSH
30468: LD_INT 1000
30470: PPUSH
30471: CALL_OW 234
30475: GO 30445
30477: POP
30478: POP
// until p > 20 ;
30479: LD_VAR 0 3
30483: PUSH
30484: LD_INT 20
30486: GREATER
30487: IFFALSE 30414
// end ;
30489: PPOPN 3
30491: END
// every 0 0$1 trigger StreamModeActive and sTime do
30492: LD_EXP 44
30496: PUSH
30497: LD_EXP 95
30501: AND
30502: IFFALSE 30537
30504: GO 30506
30506: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30507: LD_INT 28
30509: PPUSH
30510: LD_OWVAR 2
30514: PPUSH
30515: LD_INT 2
30517: PPUSH
30518: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30522: LD_INT 30
30524: PPUSH
30525: LD_OWVAR 2
30529: PPUSH
30530: LD_INT 2
30532: PPUSH
30533: CALL_OW 322
// end ;
30537: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30538: LD_EXP 44
30542: PUSH
30543: LD_EXP 96
30547: AND
30548: IFFALSE 30669
30550: GO 30552
30552: DISABLE
30553: LD_INT 0
30555: PPUSH
30556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30557: LD_ADDR_VAR 0 2
30561: PUSH
30562: LD_INT 22
30564: PUSH
30565: LD_OWVAR 2
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 21
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 3
30586: PUSH
30587: LD_INT 23
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: PPUSH
30606: CALL_OW 69
30610: ST_TO_ADDR
// if not tmp then
30611: LD_VAR 0 2
30615: NOT
30616: IFFALSE 30620
// exit ;
30618: GO 30669
// for i in tmp do
30620: LD_ADDR_VAR 0 1
30624: PUSH
30625: LD_VAR 0 2
30629: PUSH
30630: FOR_IN
30631: IFFALSE 30667
// begin if Crawls ( i ) then
30633: LD_VAR 0 1
30637: PPUSH
30638: CALL_OW 318
30642: IFFALSE 30653
// ComWalk ( i ) ;
30644: LD_VAR 0 1
30648: PPUSH
30649: CALL_OW 138
// SetClass ( i , 2 ) ;
30653: LD_VAR 0 1
30657: PPUSH
30658: LD_INT 2
30660: PPUSH
30661: CALL_OW 336
// end ;
30665: GO 30630
30667: POP
30668: POP
// end ;
30669: PPOPN 2
30671: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30672: LD_EXP 44
30676: PUSH
30677: LD_EXP 97
30681: AND
30682: IFFALSE 30970
30684: GO 30686
30686: DISABLE
30687: LD_INT 0
30689: PPUSH
30690: PPUSH
30691: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30692: LD_OWVAR 2
30696: PPUSH
30697: LD_INT 9
30699: PPUSH
30700: LD_INT 1
30702: PPUSH
30703: LD_INT 1
30705: PPUSH
30706: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30710: LD_INT 9
30712: PPUSH
30713: LD_OWVAR 2
30717: PPUSH
30718: CALL_OW 343
// uc_side := 9 ;
30722: LD_ADDR_OWVAR 20
30726: PUSH
30727: LD_INT 9
30729: ST_TO_ADDR
// uc_nation := 2 ;
30730: LD_ADDR_OWVAR 21
30734: PUSH
30735: LD_INT 2
30737: ST_TO_ADDR
// hc_name := Dark Warrior ;
30738: LD_ADDR_OWVAR 26
30742: PUSH
30743: LD_STRING Dark Warrior
30745: ST_TO_ADDR
// hc_gallery :=  ;
30746: LD_ADDR_OWVAR 33
30750: PUSH
30751: LD_STRING 
30753: ST_TO_ADDR
// hc_noskilllimit := true ;
30754: LD_ADDR_OWVAR 76
30758: PUSH
30759: LD_INT 1
30761: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30762: LD_ADDR_OWVAR 31
30766: PUSH
30767: LD_INT 30
30769: PUSH
30770: LD_INT 30
30772: PUSH
30773: LD_INT 30
30775: PUSH
30776: LD_INT 30
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: ST_TO_ADDR
// un := CreateHuman ;
30785: LD_ADDR_VAR 0 3
30789: PUSH
30790: CALL_OW 44
30794: ST_TO_ADDR
// hc_noskilllimit := false ;
30795: LD_ADDR_OWVAR 76
30799: PUSH
30800: LD_INT 0
30802: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30803: LD_VAR 0 3
30807: PPUSH
30808: LD_INT 1
30810: PPUSH
30811: CALL_OW 51
// ToLua ( playRanger() ) ;
30815: LD_STRING playRanger()
30817: PPUSH
30818: CALL_OW 559
// p := 0 ;
30822: LD_ADDR_VAR 0 2
30826: PUSH
30827: LD_INT 0
30829: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30830: LD_INT 35
30832: PPUSH
30833: CALL_OW 67
// p := p + 1 ;
30837: LD_ADDR_VAR 0 2
30841: PUSH
30842: LD_VAR 0 2
30846: PUSH
30847: LD_INT 1
30849: PLUS
30850: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30851: LD_VAR 0 3
30855: PPUSH
30856: CALL_OW 256
30860: PUSH
30861: LD_INT 1000
30863: LESS
30864: IFFALSE 30878
// SetLives ( un , 1000 ) ;
30866: LD_VAR 0 3
30870: PPUSH
30871: LD_INT 1000
30873: PPUSH
30874: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30878: LD_VAR 0 3
30882: PPUSH
30883: LD_INT 81
30885: PUSH
30886: LD_OWVAR 2
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 91
30897: PUSH
30898: LD_VAR 0 3
30902: PUSH
30903: LD_INT 30
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PPUSH
30915: CALL_OW 69
30919: PPUSH
30920: LD_VAR 0 3
30924: PPUSH
30925: CALL_OW 74
30929: PPUSH
30930: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30934: LD_VAR 0 2
30938: PUSH
30939: LD_INT 80
30941: GREATER
30942: PUSH
30943: LD_VAR 0 3
30947: PPUSH
30948: CALL_OW 301
30952: OR
30953: IFFALSE 30830
// if un then
30955: LD_VAR 0 3
30959: IFFALSE 30970
// RemoveUnit ( un ) ;
30961: LD_VAR 0 3
30965: PPUSH
30966: CALL_OW 64
// end ;
30970: PPOPN 3
30972: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30973: LD_EXP 98
30977: IFFALSE 31093
30979: GO 30981
30981: DISABLE
30982: LD_INT 0
30984: PPUSH
30985: PPUSH
30986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30987: LD_ADDR_VAR 0 2
30991: PUSH
30992: LD_INT 81
30994: PUSH
30995: LD_OWVAR 2
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 21
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PPUSH
31018: CALL_OW 69
31022: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31023: LD_STRING playComputer()
31025: PPUSH
31026: CALL_OW 559
// if not tmp then
31030: LD_VAR 0 2
31034: NOT
31035: IFFALSE 31039
// exit ;
31037: GO 31093
// for i in tmp do
31039: LD_ADDR_VAR 0 1
31043: PUSH
31044: LD_VAR 0 2
31048: PUSH
31049: FOR_IN
31050: IFFALSE 31091
// for j := 1 to 4 do
31052: LD_ADDR_VAR 0 3
31056: PUSH
31057: DOUBLE
31058: LD_INT 1
31060: DEC
31061: ST_TO_ADDR
31062: LD_INT 4
31064: PUSH
31065: FOR_TO
31066: IFFALSE 31087
// SetSkill ( i , j , 10 ) ;
31068: LD_VAR 0 1
31072: PPUSH
31073: LD_VAR 0 3
31077: PPUSH
31078: LD_INT 10
31080: PPUSH
31081: CALL_OW 237
31085: GO 31065
31087: POP
31088: POP
31089: GO 31049
31091: POP
31092: POP
// end ;
31093: PPOPN 3
31095: END
// every 0 0$1 trigger s30 do var i , tmp ;
31096: LD_EXP 99
31100: IFFALSE 31169
31102: GO 31104
31104: DISABLE
31105: LD_INT 0
31107: PPUSH
31108: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31109: LD_ADDR_VAR 0 2
31113: PUSH
31114: LD_INT 22
31116: PUSH
31117: LD_OWVAR 2
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PPUSH
31126: CALL_OW 69
31130: ST_TO_ADDR
// if not tmp then
31131: LD_VAR 0 2
31135: NOT
31136: IFFALSE 31140
// exit ;
31138: GO 31169
// for i in tmp do
31140: LD_ADDR_VAR 0 1
31144: PUSH
31145: LD_VAR 0 2
31149: PUSH
31150: FOR_IN
31151: IFFALSE 31167
// SetLives ( i , 300 ) ;
31153: LD_VAR 0 1
31157: PPUSH
31158: LD_INT 300
31160: PPUSH
31161: CALL_OW 234
31165: GO 31150
31167: POP
31168: POP
// end ;
31169: PPOPN 2
31171: END
// every 0 0$1 trigger s60 do var i , tmp ;
31172: LD_EXP 100
31176: IFFALSE 31245
31178: GO 31180
31180: DISABLE
31181: LD_INT 0
31183: PPUSH
31184: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31185: LD_ADDR_VAR 0 2
31189: PUSH
31190: LD_INT 22
31192: PUSH
31193: LD_OWVAR 2
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PPUSH
31202: CALL_OW 69
31206: ST_TO_ADDR
// if not tmp then
31207: LD_VAR 0 2
31211: NOT
31212: IFFALSE 31216
// exit ;
31214: GO 31245
// for i in tmp do
31216: LD_ADDR_VAR 0 1
31220: PUSH
31221: LD_VAR 0 2
31225: PUSH
31226: FOR_IN
31227: IFFALSE 31243
// SetLives ( i , 600 ) ;
31229: LD_VAR 0 1
31233: PPUSH
31234: LD_INT 600
31236: PPUSH
31237: CALL_OW 234
31241: GO 31226
31243: POP
31244: POP
// end ;
31245: PPOPN 2
31247: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31248: LD_INT 0
31250: PPUSH
// case cmd of 301 :
31251: LD_VAR 0 1
31255: PUSH
31256: LD_INT 301
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 31296
31264: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31265: LD_VAR 0 6
31269: PPUSH
31270: LD_VAR 0 7
31274: PPUSH
31275: LD_VAR 0 8
31279: PPUSH
31280: LD_VAR 0 4
31284: PPUSH
31285: LD_VAR 0 5
31289: PPUSH
31290: CALL 32497 0 5
31294: GO 31417
31296: LD_INT 302
31298: DOUBLE
31299: EQUAL
31300: IFTRUE 31304
31302: GO 31341
31304: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31305: LD_VAR 0 6
31309: PPUSH
31310: LD_VAR 0 7
31314: PPUSH
31315: LD_VAR 0 8
31319: PPUSH
31320: LD_VAR 0 9
31324: PPUSH
31325: LD_VAR 0 4
31329: PPUSH
31330: LD_VAR 0 5
31334: PPUSH
31335: CALL 32588 0 6
31339: GO 31417
31341: LD_INT 303
31343: DOUBLE
31344: EQUAL
31345: IFTRUE 31349
31347: GO 31386
31349: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31350: LD_VAR 0 6
31354: PPUSH
31355: LD_VAR 0 7
31359: PPUSH
31360: LD_VAR 0 8
31364: PPUSH
31365: LD_VAR 0 9
31369: PPUSH
31370: LD_VAR 0 4
31374: PPUSH
31375: LD_VAR 0 5
31379: PPUSH
31380: CALL 31422 0 6
31384: GO 31417
31386: LD_INT 304
31388: DOUBLE
31389: EQUAL
31390: IFTRUE 31394
31392: GO 31416
31394: POP
// hHackTeleport ( unit , x , y ) ; end ;
31395: LD_VAR 0 2
31399: PPUSH
31400: LD_VAR 0 4
31404: PPUSH
31405: LD_VAR 0 5
31409: PPUSH
31410: CALL 33181 0 3
31414: GO 31417
31416: POP
// end ;
31417: LD_VAR 0 12
31421: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31422: LD_INT 0
31424: PPUSH
31425: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31426: LD_VAR 0 1
31430: PUSH
31431: LD_INT 1
31433: LESS
31434: PUSH
31435: LD_VAR 0 1
31439: PUSH
31440: LD_INT 3
31442: GREATER
31443: OR
31444: PUSH
31445: LD_VAR 0 5
31449: PPUSH
31450: LD_VAR 0 6
31454: PPUSH
31455: CALL_OW 428
31459: OR
31460: IFFALSE 31464
// exit ;
31462: GO 32184
// uc_side := your_side ;
31464: LD_ADDR_OWVAR 20
31468: PUSH
31469: LD_OWVAR 2
31473: ST_TO_ADDR
// uc_nation := nation ;
31474: LD_ADDR_OWVAR 21
31478: PUSH
31479: LD_VAR 0 1
31483: ST_TO_ADDR
// bc_level = 1 ;
31484: LD_ADDR_OWVAR 43
31488: PUSH
31489: LD_INT 1
31491: ST_TO_ADDR
// case btype of 1 :
31492: LD_VAR 0 2
31496: PUSH
31497: LD_INT 1
31499: DOUBLE
31500: EQUAL
31501: IFTRUE 31505
31503: GO 31516
31505: POP
// bc_type := b_depot ; 2 :
31506: LD_ADDR_OWVAR 42
31510: PUSH
31511: LD_INT 0
31513: ST_TO_ADDR
31514: GO 32128
31516: LD_INT 2
31518: DOUBLE
31519: EQUAL
31520: IFTRUE 31524
31522: GO 31535
31524: POP
// bc_type := b_warehouse ; 3 :
31525: LD_ADDR_OWVAR 42
31529: PUSH
31530: LD_INT 1
31532: ST_TO_ADDR
31533: GO 32128
31535: LD_INT 3
31537: DOUBLE
31538: EQUAL
31539: IFTRUE 31543
31541: GO 31554
31543: POP
// bc_type := b_lab ; 4 .. 9 :
31544: LD_ADDR_OWVAR 42
31548: PUSH
31549: LD_INT 6
31551: ST_TO_ADDR
31552: GO 32128
31554: LD_INT 4
31556: DOUBLE
31557: GREATEREQUAL
31558: IFFALSE 31566
31560: LD_INT 9
31562: DOUBLE
31563: LESSEQUAL
31564: IFTRUE 31568
31566: GO 31620
31568: POP
// begin bc_type := b_lab_half ;
31569: LD_ADDR_OWVAR 42
31573: PUSH
31574: LD_INT 7
31576: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31577: LD_ADDR_OWVAR 44
31581: PUSH
31582: LD_INT 10
31584: PUSH
31585: LD_INT 11
31587: PUSH
31588: LD_INT 12
31590: PUSH
31591: LD_INT 15
31593: PUSH
31594: LD_INT 14
31596: PUSH
31597: LD_INT 13
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: PUSH
31608: LD_VAR 0 2
31612: PUSH
31613: LD_INT 3
31615: MINUS
31616: ARRAY
31617: ST_TO_ADDR
// end ; 10 .. 13 :
31618: GO 32128
31620: LD_INT 10
31622: DOUBLE
31623: GREATEREQUAL
31624: IFFALSE 31632
31626: LD_INT 13
31628: DOUBLE
31629: LESSEQUAL
31630: IFTRUE 31634
31632: GO 31711
31634: POP
// begin bc_type := b_lab_full ;
31635: LD_ADDR_OWVAR 42
31639: PUSH
31640: LD_INT 8
31642: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31643: LD_ADDR_OWVAR 44
31647: PUSH
31648: LD_INT 10
31650: PUSH
31651: LD_INT 12
31653: PUSH
31654: LD_INT 14
31656: PUSH
31657: LD_INT 13
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: PUSH
31666: LD_VAR 0 2
31670: PUSH
31671: LD_INT 9
31673: MINUS
31674: ARRAY
31675: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31676: LD_ADDR_OWVAR 45
31680: PUSH
31681: LD_INT 11
31683: PUSH
31684: LD_INT 15
31686: PUSH
31687: LD_INT 12
31689: PUSH
31690: LD_INT 15
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: PUSH
31699: LD_VAR 0 2
31703: PUSH
31704: LD_INT 9
31706: MINUS
31707: ARRAY
31708: ST_TO_ADDR
// end ; 14 :
31709: GO 32128
31711: LD_INT 14
31713: DOUBLE
31714: EQUAL
31715: IFTRUE 31719
31717: GO 31730
31719: POP
// bc_type := b_workshop ; 15 :
31720: LD_ADDR_OWVAR 42
31724: PUSH
31725: LD_INT 2
31727: ST_TO_ADDR
31728: GO 32128
31730: LD_INT 15
31732: DOUBLE
31733: EQUAL
31734: IFTRUE 31738
31736: GO 31749
31738: POP
// bc_type := b_factory ; 16 :
31739: LD_ADDR_OWVAR 42
31743: PUSH
31744: LD_INT 3
31746: ST_TO_ADDR
31747: GO 32128
31749: LD_INT 16
31751: DOUBLE
31752: EQUAL
31753: IFTRUE 31757
31755: GO 31768
31757: POP
// bc_type := b_ext_gun ; 17 :
31758: LD_ADDR_OWVAR 42
31762: PUSH
31763: LD_INT 17
31765: ST_TO_ADDR
31766: GO 32128
31768: LD_INT 17
31770: DOUBLE
31771: EQUAL
31772: IFTRUE 31776
31774: GO 31804
31776: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31777: LD_ADDR_OWVAR 42
31781: PUSH
31782: LD_INT 19
31784: PUSH
31785: LD_INT 23
31787: PUSH
31788: LD_INT 19
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: PUSH
31796: LD_VAR 0 1
31800: ARRAY
31801: ST_TO_ADDR
31802: GO 32128
31804: LD_INT 18
31806: DOUBLE
31807: EQUAL
31808: IFTRUE 31812
31810: GO 31823
31812: POP
// bc_type := b_ext_radar ; 19 :
31813: LD_ADDR_OWVAR 42
31817: PUSH
31818: LD_INT 20
31820: ST_TO_ADDR
31821: GO 32128
31823: LD_INT 19
31825: DOUBLE
31826: EQUAL
31827: IFTRUE 31831
31829: GO 31842
31831: POP
// bc_type := b_ext_radio ; 20 :
31832: LD_ADDR_OWVAR 42
31836: PUSH
31837: LD_INT 22
31839: ST_TO_ADDR
31840: GO 32128
31842: LD_INT 20
31844: DOUBLE
31845: EQUAL
31846: IFTRUE 31850
31848: GO 31861
31850: POP
// bc_type := b_ext_siberium ; 21 :
31851: LD_ADDR_OWVAR 42
31855: PUSH
31856: LD_INT 21
31858: ST_TO_ADDR
31859: GO 32128
31861: LD_INT 21
31863: DOUBLE
31864: EQUAL
31865: IFTRUE 31869
31867: GO 31880
31869: POP
// bc_type := b_ext_computer ; 22 :
31870: LD_ADDR_OWVAR 42
31874: PUSH
31875: LD_INT 24
31877: ST_TO_ADDR
31878: GO 32128
31880: LD_INT 22
31882: DOUBLE
31883: EQUAL
31884: IFTRUE 31888
31886: GO 31899
31888: POP
// bc_type := b_ext_track ; 23 :
31889: LD_ADDR_OWVAR 42
31893: PUSH
31894: LD_INT 16
31896: ST_TO_ADDR
31897: GO 32128
31899: LD_INT 23
31901: DOUBLE
31902: EQUAL
31903: IFTRUE 31907
31905: GO 31918
31907: POP
// bc_type := b_ext_laser ; 24 :
31908: LD_ADDR_OWVAR 42
31912: PUSH
31913: LD_INT 25
31915: ST_TO_ADDR
31916: GO 32128
31918: LD_INT 24
31920: DOUBLE
31921: EQUAL
31922: IFTRUE 31926
31924: GO 31937
31926: POP
// bc_type := b_control_tower ; 25 :
31927: LD_ADDR_OWVAR 42
31931: PUSH
31932: LD_INT 36
31934: ST_TO_ADDR
31935: GO 32128
31937: LD_INT 25
31939: DOUBLE
31940: EQUAL
31941: IFTRUE 31945
31943: GO 31956
31945: POP
// bc_type := b_breastwork ; 26 :
31946: LD_ADDR_OWVAR 42
31950: PUSH
31951: LD_INT 31
31953: ST_TO_ADDR
31954: GO 32128
31956: LD_INT 26
31958: DOUBLE
31959: EQUAL
31960: IFTRUE 31964
31962: GO 31975
31964: POP
// bc_type := b_bunker ; 27 :
31965: LD_ADDR_OWVAR 42
31969: PUSH
31970: LD_INT 32
31972: ST_TO_ADDR
31973: GO 32128
31975: LD_INT 27
31977: DOUBLE
31978: EQUAL
31979: IFTRUE 31983
31981: GO 31994
31983: POP
// bc_type := b_turret ; 28 :
31984: LD_ADDR_OWVAR 42
31988: PUSH
31989: LD_INT 33
31991: ST_TO_ADDR
31992: GO 32128
31994: LD_INT 28
31996: DOUBLE
31997: EQUAL
31998: IFTRUE 32002
32000: GO 32013
32002: POP
// bc_type := b_armoury ; 29 :
32003: LD_ADDR_OWVAR 42
32007: PUSH
32008: LD_INT 4
32010: ST_TO_ADDR
32011: GO 32128
32013: LD_INT 29
32015: DOUBLE
32016: EQUAL
32017: IFTRUE 32021
32019: GO 32032
32021: POP
// bc_type := b_barracks ; 30 :
32022: LD_ADDR_OWVAR 42
32026: PUSH
32027: LD_INT 5
32029: ST_TO_ADDR
32030: GO 32128
32032: LD_INT 30
32034: DOUBLE
32035: EQUAL
32036: IFTRUE 32040
32038: GO 32051
32040: POP
// bc_type := b_solar_power ; 31 :
32041: LD_ADDR_OWVAR 42
32045: PUSH
32046: LD_INT 27
32048: ST_TO_ADDR
32049: GO 32128
32051: LD_INT 31
32053: DOUBLE
32054: EQUAL
32055: IFTRUE 32059
32057: GO 32070
32059: POP
// bc_type := b_oil_power ; 32 :
32060: LD_ADDR_OWVAR 42
32064: PUSH
32065: LD_INT 26
32067: ST_TO_ADDR
32068: GO 32128
32070: LD_INT 32
32072: DOUBLE
32073: EQUAL
32074: IFTRUE 32078
32076: GO 32089
32078: POP
// bc_type := b_siberite_power ; 33 :
32079: LD_ADDR_OWVAR 42
32083: PUSH
32084: LD_INT 28
32086: ST_TO_ADDR
32087: GO 32128
32089: LD_INT 33
32091: DOUBLE
32092: EQUAL
32093: IFTRUE 32097
32095: GO 32108
32097: POP
// bc_type := b_oil_mine ; 34 :
32098: LD_ADDR_OWVAR 42
32102: PUSH
32103: LD_INT 29
32105: ST_TO_ADDR
32106: GO 32128
32108: LD_INT 34
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32127
32116: POP
// bc_type := b_siberite_mine ; end ;
32117: LD_ADDR_OWVAR 42
32121: PUSH
32122: LD_INT 30
32124: ST_TO_ADDR
32125: GO 32128
32127: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32128: LD_ADDR_VAR 0 8
32132: PUSH
32133: LD_VAR 0 5
32137: PPUSH
32138: LD_VAR 0 6
32142: PPUSH
32143: LD_VAR 0 3
32147: PPUSH
32148: CALL_OW 47
32152: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32153: LD_OWVAR 42
32157: PUSH
32158: LD_INT 32
32160: PUSH
32161: LD_INT 33
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: IN
32168: IFFALSE 32184
// PlaceWeaponTurret ( b , weapon ) ;
32170: LD_VAR 0 8
32174: PPUSH
32175: LD_VAR 0 4
32179: PPUSH
32180: CALL_OW 431
// end ;
32184: LD_VAR 0 7
32188: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32189: LD_INT 0
32191: PPUSH
32192: PPUSH
32193: PPUSH
32194: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32195: LD_ADDR_VAR 0 4
32199: PUSH
32200: LD_INT 22
32202: PUSH
32203: LD_OWVAR 2
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: LD_INT 30
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 30
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: LIST
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PPUSH
32244: CALL_OW 69
32248: ST_TO_ADDR
// if not tmp then
32249: LD_VAR 0 4
32253: NOT
32254: IFFALSE 32258
// exit ;
32256: GO 32317
// for i in tmp do
32258: LD_ADDR_VAR 0 2
32262: PUSH
32263: LD_VAR 0 4
32267: PUSH
32268: FOR_IN
32269: IFFALSE 32315
// for j = 1 to 3 do
32271: LD_ADDR_VAR 0 3
32275: PUSH
32276: DOUBLE
32277: LD_INT 1
32279: DEC
32280: ST_TO_ADDR
32281: LD_INT 3
32283: PUSH
32284: FOR_TO
32285: IFFALSE 32311
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32287: LD_VAR 0 2
32291: PPUSH
32292: CALL_OW 274
32296: PPUSH
32297: LD_VAR 0 3
32301: PPUSH
32302: LD_INT 99999
32304: PPUSH
32305: CALL_OW 277
32309: GO 32284
32311: POP
32312: POP
32313: GO 32268
32315: POP
32316: POP
// end ;
32317: LD_VAR 0 1
32321: RET
// export function hHackSetLevel10 ; var i , j ; begin
32322: LD_INT 0
32324: PPUSH
32325: PPUSH
32326: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32327: LD_ADDR_VAR 0 2
32331: PUSH
32332: LD_INT 21
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PPUSH
32342: CALL_OW 69
32346: PUSH
32347: FOR_IN
32348: IFFALSE 32400
// if IsSelected ( i ) then
32350: LD_VAR 0 2
32354: PPUSH
32355: CALL_OW 306
32359: IFFALSE 32398
// begin for j := 1 to 4 do
32361: LD_ADDR_VAR 0 3
32365: PUSH
32366: DOUBLE
32367: LD_INT 1
32369: DEC
32370: ST_TO_ADDR
32371: LD_INT 4
32373: PUSH
32374: FOR_TO
32375: IFFALSE 32396
// SetSkill ( i , j , 10 ) ;
32377: LD_VAR 0 2
32381: PPUSH
32382: LD_VAR 0 3
32386: PPUSH
32387: LD_INT 10
32389: PPUSH
32390: CALL_OW 237
32394: GO 32374
32396: POP
32397: POP
// end ;
32398: GO 32347
32400: POP
32401: POP
// end ;
32402: LD_VAR 0 1
32406: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32407: LD_INT 0
32409: PPUSH
32410: PPUSH
32411: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32412: LD_ADDR_VAR 0 2
32416: PUSH
32417: LD_INT 22
32419: PUSH
32420: LD_OWVAR 2
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 21
32431: PUSH
32432: LD_INT 1
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PPUSH
32443: CALL_OW 69
32447: PUSH
32448: FOR_IN
32449: IFFALSE 32490
// begin for j := 1 to 4 do
32451: LD_ADDR_VAR 0 3
32455: PUSH
32456: DOUBLE
32457: LD_INT 1
32459: DEC
32460: ST_TO_ADDR
32461: LD_INT 4
32463: PUSH
32464: FOR_TO
32465: IFFALSE 32486
// SetSkill ( i , j , 10 ) ;
32467: LD_VAR 0 2
32471: PPUSH
32472: LD_VAR 0 3
32476: PPUSH
32477: LD_INT 10
32479: PPUSH
32480: CALL_OW 237
32484: GO 32464
32486: POP
32487: POP
// end ;
32488: GO 32448
32490: POP
32491: POP
// end ;
32492: LD_VAR 0 1
32496: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32497: LD_INT 0
32499: PPUSH
// uc_side := your_side ;
32500: LD_ADDR_OWVAR 20
32504: PUSH
32505: LD_OWVAR 2
32509: ST_TO_ADDR
// uc_nation := nation ;
32510: LD_ADDR_OWVAR 21
32514: PUSH
32515: LD_VAR 0 1
32519: ST_TO_ADDR
// InitHc ;
32520: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32524: LD_INT 0
32526: PPUSH
32527: LD_VAR 0 2
32531: PPUSH
32532: LD_VAR 0 3
32536: PPUSH
32537: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32541: LD_VAR 0 4
32545: PPUSH
32546: LD_VAR 0 5
32550: PPUSH
32551: CALL_OW 428
32555: PUSH
32556: LD_INT 0
32558: EQUAL
32559: IFFALSE 32583
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32561: CALL_OW 44
32565: PPUSH
32566: LD_VAR 0 4
32570: PPUSH
32571: LD_VAR 0 5
32575: PPUSH
32576: LD_INT 1
32578: PPUSH
32579: CALL_OW 48
// end ;
32583: LD_VAR 0 6
32587: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32588: LD_INT 0
32590: PPUSH
32591: PPUSH
// uc_side := your_side ;
32592: LD_ADDR_OWVAR 20
32596: PUSH
32597: LD_OWVAR 2
32601: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32602: LD_VAR 0 1
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: LD_INT 2
32612: PUSH
32613: LD_INT 3
32615: PUSH
32616: LD_INT 4
32618: PUSH
32619: LD_INT 5
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: IN
32629: IFFALSE 32641
// uc_nation := nation_american else
32631: LD_ADDR_OWVAR 21
32635: PUSH
32636: LD_INT 1
32638: ST_TO_ADDR
32639: GO 32684
// if chassis in [ 11 , 12 , 13 , 14 ] then
32641: LD_VAR 0 1
32645: PUSH
32646: LD_INT 11
32648: PUSH
32649: LD_INT 12
32651: PUSH
32652: LD_INT 13
32654: PUSH
32655: LD_INT 14
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: IN
32664: IFFALSE 32676
// uc_nation := nation_arabian else
32666: LD_ADDR_OWVAR 21
32670: PUSH
32671: LD_INT 2
32673: ST_TO_ADDR
32674: GO 32684
// uc_nation := nation_russian ;
32676: LD_ADDR_OWVAR 21
32680: PUSH
32681: LD_INT 3
32683: ST_TO_ADDR
// vc_chassis := chassis ;
32684: LD_ADDR_OWVAR 37
32688: PUSH
32689: LD_VAR 0 1
32693: ST_TO_ADDR
// vc_engine := engine ;
32694: LD_ADDR_OWVAR 39
32698: PUSH
32699: LD_VAR 0 2
32703: ST_TO_ADDR
// vc_control := control ;
32704: LD_ADDR_OWVAR 38
32708: PUSH
32709: LD_VAR 0 3
32713: ST_TO_ADDR
// vc_weapon := weapon ;
32714: LD_ADDR_OWVAR 40
32718: PUSH
32719: LD_VAR 0 4
32723: ST_TO_ADDR
// un := CreateVehicle ;
32724: LD_ADDR_VAR 0 8
32728: PUSH
32729: CALL_OW 45
32733: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32734: LD_VAR 0 8
32738: PPUSH
32739: LD_INT 0
32741: PPUSH
32742: LD_INT 5
32744: PPUSH
32745: CALL_OW 12
32749: PPUSH
32750: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32754: LD_VAR 0 8
32758: PPUSH
32759: LD_VAR 0 5
32763: PPUSH
32764: LD_VAR 0 6
32768: PPUSH
32769: LD_INT 1
32771: PPUSH
32772: CALL_OW 48
// end ;
32776: LD_VAR 0 7
32780: RET
// export hInvincible ; every 1 do
32781: GO 32783
32783: DISABLE
// hInvincible := [ ] ;
32784: LD_ADDR_EXP 101
32788: PUSH
32789: EMPTY
32790: ST_TO_ADDR
32791: END
// every 10 do var i ;
32792: GO 32794
32794: DISABLE
32795: LD_INT 0
32797: PPUSH
// begin enable ;
32798: ENABLE
// if not hInvincible then
32799: LD_EXP 101
32803: NOT
32804: IFFALSE 32808
// exit ;
32806: GO 32852
// for i in hInvincible do
32808: LD_ADDR_VAR 0 1
32812: PUSH
32813: LD_EXP 101
32817: PUSH
32818: FOR_IN
32819: IFFALSE 32850
// if GetLives ( i ) < 1000 then
32821: LD_VAR 0 1
32825: PPUSH
32826: CALL_OW 256
32830: PUSH
32831: LD_INT 1000
32833: LESS
32834: IFFALSE 32848
// SetLives ( i , 1000 ) ;
32836: LD_VAR 0 1
32840: PPUSH
32841: LD_INT 1000
32843: PPUSH
32844: CALL_OW 234
32848: GO 32818
32850: POP
32851: POP
// end ;
32852: PPOPN 1
32854: END
// export function hHackInvincible ; var i ; begin
32855: LD_INT 0
32857: PPUSH
32858: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32859: LD_ADDR_VAR 0 2
32863: PUSH
32864: LD_INT 2
32866: PUSH
32867: LD_INT 21
32869: PUSH
32870: LD_INT 1
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 21
32879: PUSH
32880: LD_INT 2
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: PPUSH
32892: CALL_OW 69
32896: PUSH
32897: FOR_IN
32898: IFFALSE 32959
// if IsSelected ( i ) then
32900: LD_VAR 0 2
32904: PPUSH
32905: CALL_OW 306
32909: IFFALSE 32957
// begin if i in hInvincible then
32911: LD_VAR 0 2
32915: PUSH
32916: LD_EXP 101
32920: IN
32921: IFFALSE 32941
// hInvincible := hInvincible diff i else
32923: LD_ADDR_EXP 101
32927: PUSH
32928: LD_EXP 101
32932: PUSH
32933: LD_VAR 0 2
32937: DIFF
32938: ST_TO_ADDR
32939: GO 32957
// hInvincible := hInvincible union i ;
32941: LD_ADDR_EXP 101
32945: PUSH
32946: LD_EXP 101
32950: PUSH
32951: LD_VAR 0 2
32955: UNION
32956: ST_TO_ADDR
// end ;
32957: GO 32897
32959: POP
32960: POP
// end ;
32961: LD_VAR 0 1
32965: RET
// export function hHackInvisible ; var i , j ; begin
32966: LD_INT 0
32968: PPUSH
32969: PPUSH
32970: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32971: LD_ADDR_VAR 0 2
32975: PUSH
32976: LD_INT 21
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PPUSH
32986: CALL_OW 69
32990: PUSH
32991: FOR_IN
32992: IFFALSE 33016
// if IsSelected ( i ) then
32994: LD_VAR 0 2
32998: PPUSH
32999: CALL_OW 306
33003: IFFALSE 33014
// ComForceInvisible ( i ) ;
33005: LD_VAR 0 2
33009: PPUSH
33010: CALL_OW 496
33014: GO 32991
33016: POP
33017: POP
// end ;
33018: LD_VAR 0 1
33022: RET
// export function hHackChangeYourSide ; begin
33023: LD_INT 0
33025: PPUSH
// if your_side = 8 then
33026: LD_OWVAR 2
33030: PUSH
33031: LD_INT 8
33033: EQUAL
33034: IFFALSE 33046
// your_side := 0 else
33036: LD_ADDR_OWVAR 2
33040: PUSH
33041: LD_INT 0
33043: ST_TO_ADDR
33044: GO 33060
// your_side := your_side + 1 ;
33046: LD_ADDR_OWVAR 2
33050: PUSH
33051: LD_OWVAR 2
33055: PUSH
33056: LD_INT 1
33058: PLUS
33059: ST_TO_ADDR
// end ;
33060: LD_VAR 0 1
33064: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33065: LD_INT 0
33067: PPUSH
33068: PPUSH
33069: PPUSH
// for i in all_units do
33070: LD_ADDR_VAR 0 2
33074: PUSH
33075: LD_OWVAR 3
33079: PUSH
33080: FOR_IN
33081: IFFALSE 33159
// if IsSelected ( i ) then
33083: LD_VAR 0 2
33087: PPUSH
33088: CALL_OW 306
33092: IFFALSE 33157
// begin j := GetSide ( i ) ;
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: LD_VAR 0 2
33103: PPUSH
33104: CALL_OW 255
33108: ST_TO_ADDR
// if j = 8 then
33109: LD_VAR 0 3
33113: PUSH
33114: LD_INT 8
33116: EQUAL
33117: IFFALSE 33129
// j := 0 else
33119: LD_ADDR_VAR 0 3
33123: PUSH
33124: LD_INT 0
33126: ST_TO_ADDR
33127: GO 33143
// j := j + 1 ;
33129: LD_ADDR_VAR 0 3
33133: PUSH
33134: LD_VAR 0 3
33138: PUSH
33139: LD_INT 1
33141: PLUS
33142: ST_TO_ADDR
// SetSide ( i , j ) ;
33143: LD_VAR 0 2
33147: PPUSH
33148: LD_VAR 0 3
33152: PPUSH
33153: CALL_OW 235
// end ;
33157: GO 33080
33159: POP
33160: POP
// end ;
33161: LD_VAR 0 1
33165: RET
// export function hHackFog ; begin
33166: LD_INT 0
33168: PPUSH
// FogOff ( true ) ;
33169: LD_INT 1
33171: PPUSH
33172: CALL_OW 344
// end ;
33176: LD_VAR 0 1
33180: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33181: LD_INT 0
33183: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33184: LD_VAR 0 1
33188: PPUSH
33189: LD_VAR 0 2
33193: PPUSH
33194: LD_VAR 0 3
33198: PPUSH
33199: LD_INT 1
33201: PPUSH
33202: LD_INT 1
33204: PPUSH
33205: CALL_OW 483
// CenterOnXY ( x , y ) ;
33209: LD_VAR 0 2
33213: PPUSH
33214: LD_VAR 0 3
33218: PPUSH
33219: CALL_OW 84
// end ;
33223: LD_VAR 0 4
33227: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33228: LD_INT 0
33230: PPUSH
33231: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33232: LD_VAR 0 1
33236: NOT
33237: PUSH
33238: LD_VAR 0 2
33242: PPUSH
33243: LD_VAR 0 3
33247: PPUSH
33248: CALL_OW 488
33252: NOT
33253: OR
33254: PUSH
33255: LD_VAR 0 1
33259: PPUSH
33260: CALL_OW 266
33264: PUSH
33265: LD_INT 3
33267: NONEQUAL
33268: PUSH
33269: LD_VAR 0 1
33273: PPUSH
33274: CALL_OW 247
33278: PUSH
33279: LD_INT 1
33281: EQUAL
33282: NOT
33283: AND
33284: OR
33285: IFFALSE 33289
// exit ;
33287: GO 33438
// if GetType ( factory ) = unit_human then
33289: LD_VAR 0 1
33293: PPUSH
33294: CALL_OW 247
33298: PUSH
33299: LD_INT 1
33301: EQUAL
33302: IFFALSE 33319
// factory := IsInUnit ( factory ) ;
33304: LD_ADDR_VAR 0 1
33308: PUSH
33309: LD_VAR 0 1
33313: PPUSH
33314: CALL_OW 310
33318: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33319: LD_VAR 0 1
33323: PPUSH
33324: CALL_OW 266
33328: PUSH
33329: LD_INT 3
33331: NONEQUAL
33332: IFFALSE 33336
// exit ;
33334: GO 33438
// if HexInfo ( x , y ) = factory then
33336: LD_VAR 0 2
33340: PPUSH
33341: LD_VAR 0 3
33345: PPUSH
33346: CALL_OW 428
33350: PUSH
33351: LD_VAR 0 1
33355: EQUAL
33356: IFFALSE 33383
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33358: LD_ADDR_EXP 102
33362: PUSH
33363: LD_EXP 102
33367: PPUSH
33368: LD_VAR 0 1
33372: PPUSH
33373: LD_INT 0
33375: PPUSH
33376: CALL_OW 1
33380: ST_TO_ADDR
33381: GO 33434
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33383: LD_ADDR_EXP 102
33387: PUSH
33388: LD_EXP 102
33392: PPUSH
33393: LD_VAR 0 1
33397: PPUSH
33398: LD_VAR 0 1
33402: PPUSH
33403: CALL_OW 255
33407: PUSH
33408: LD_VAR 0 1
33412: PUSH
33413: LD_VAR 0 2
33417: PUSH
33418: LD_VAR 0 3
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: PPUSH
33429: CALL_OW 1
33433: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33434: CALL 33443 0 0
// end ;
33438: LD_VAR 0 4
33442: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33443: LD_INT 0
33445: PPUSH
33446: PPUSH
33447: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33448: LD_STRING resetFactoryWaypoint();
33450: PPUSH
33451: CALL_OW 559
// if factoryWaypoints then
33455: LD_EXP 102
33459: IFFALSE 33585
// begin list := PrepareArray ( factoryWaypoints ) ;
33461: LD_ADDR_VAR 0 3
33465: PUSH
33466: LD_EXP 102
33470: PPUSH
33471: CALL 80054 0 1
33475: ST_TO_ADDR
// for i := 1 to list do
33476: LD_ADDR_VAR 0 2
33480: PUSH
33481: DOUBLE
33482: LD_INT 1
33484: DEC
33485: ST_TO_ADDR
33486: LD_VAR 0 3
33490: PUSH
33491: FOR_TO
33492: IFFALSE 33583
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33494: LD_STRING setFactoryWaypointXY(
33496: PUSH
33497: LD_VAR 0 3
33501: PUSH
33502: LD_VAR 0 2
33506: ARRAY
33507: PUSH
33508: LD_INT 1
33510: ARRAY
33511: STR
33512: PUSH
33513: LD_STRING ,
33515: STR
33516: PUSH
33517: LD_VAR 0 3
33521: PUSH
33522: LD_VAR 0 2
33526: ARRAY
33527: PUSH
33528: LD_INT 2
33530: ARRAY
33531: STR
33532: PUSH
33533: LD_STRING ,
33535: STR
33536: PUSH
33537: LD_VAR 0 3
33541: PUSH
33542: LD_VAR 0 2
33546: ARRAY
33547: PUSH
33548: LD_INT 3
33550: ARRAY
33551: STR
33552: PUSH
33553: LD_STRING ,
33555: STR
33556: PUSH
33557: LD_VAR 0 3
33561: PUSH
33562: LD_VAR 0 2
33566: ARRAY
33567: PUSH
33568: LD_INT 4
33570: ARRAY
33571: STR
33572: PUSH
33573: LD_STRING )
33575: STR
33576: PPUSH
33577: CALL_OW 559
33581: GO 33491
33583: POP
33584: POP
// end ; end ;
33585: LD_VAR 0 1
33589: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33590: LD_INT 0
33592: PPUSH
// if HexInfo ( x , y ) = warehouse then
33593: LD_VAR 0 2
33597: PPUSH
33598: LD_VAR 0 3
33602: PPUSH
33603: CALL_OW 428
33607: PUSH
33608: LD_VAR 0 1
33612: EQUAL
33613: IFFALSE 33640
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33615: LD_ADDR_EXP 103
33619: PUSH
33620: LD_EXP 103
33624: PPUSH
33625: LD_VAR 0 1
33629: PPUSH
33630: LD_INT 0
33632: PPUSH
33633: CALL_OW 1
33637: ST_TO_ADDR
33638: GO 33691
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33640: LD_ADDR_EXP 103
33644: PUSH
33645: LD_EXP 103
33649: PPUSH
33650: LD_VAR 0 1
33654: PPUSH
33655: LD_VAR 0 1
33659: PPUSH
33660: CALL_OW 255
33664: PUSH
33665: LD_VAR 0 1
33669: PUSH
33670: LD_VAR 0 2
33674: PUSH
33675: LD_VAR 0 3
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: PPUSH
33686: CALL_OW 1
33690: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33691: CALL 33700 0 0
// end ;
33695: LD_VAR 0 4
33699: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33700: LD_INT 0
33702: PPUSH
33703: PPUSH
33704: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33705: LD_STRING resetWarehouseGatheringPoints();
33707: PPUSH
33708: CALL_OW 559
// if warehouseGatheringPoints then
33712: LD_EXP 103
33716: IFFALSE 33842
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33718: LD_ADDR_VAR 0 3
33722: PUSH
33723: LD_EXP 103
33727: PPUSH
33728: CALL 80054 0 1
33732: ST_TO_ADDR
// for i := 1 to list do
33733: LD_ADDR_VAR 0 2
33737: PUSH
33738: DOUBLE
33739: LD_INT 1
33741: DEC
33742: ST_TO_ADDR
33743: LD_VAR 0 3
33747: PUSH
33748: FOR_TO
33749: IFFALSE 33840
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33751: LD_STRING setWarehouseGatheringPointXY(
33753: PUSH
33754: LD_VAR 0 3
33758: PUSH
33759: LD_VAR 0 2
33763: ARRAY
33764: PUSH
33765: LD_INT 1
33767: ARRAY
33768: STR
33769: PUSH
33770: LD_STRING ,
33772: STR
33773: PUSH
33774: LD_VAR 0 3
33778: PUSH
33779: LD_VAR 0 2
33783: ARRAY
33784: PUSH
33785: LD_INT 2
33787: ARRAY
33788: STR
33789: PUSH
33790: LD_STRING ,
33792: STR
33793: PUSH
33794: LD_VAR 0 3
33798: PUSH
33799: LD_VAR 0 2
33803: ARRAY
33804: PUSH
33805: LD_INT 3
33807: ARRAY
33808: STR
33809: PUSH
33810: LD_STRING ,
33812: STR
33813: PUSH
33814: LD_VAR 0 3
33818: PUSH
33819: LD_VAR 0 2
33823: ARRAY
33824: PUSH
33825: LD_INT 4
33827: ARRAY
33828: STR
33829: PUSH
33830: LD_STRING )
33832: STR
33833: PPUSH
33834: CALL_OW 559
33838: GO 33748
33840: POP
33841: POP
// end ; end ;
33842: LD_VAR 0 1
33846: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33847: LD_EXP 103
33851: IFFALSE 34536
33853: GO 33855
33855: DISABLE
33856: LD_INT 0
33858: PPUSH
33859: PPUSH
33860: PPUSH
33861: PPUSH
33862: PPUSH
33863: PPUSH
33864: PPUSH
33865: PPUSH
33866: PPUSH
// begin enable ;
33867: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33868: LD_ADDR_VAR 0 3
33872: PUSH
33873: LD_EXP 103
33877: PPUSH
33878: CALL 80054 0 1
33882: ST_TO_ADDR
// if not list then
33883: LD_VAR 0 3
33887: NOT
33888: IFFALSE 33892
// exit ;
33890: GO 34536
// for i := 1 to list do
33892: LD_ADDR_VAR 0 1
33896: PUSH
33897: DOUBLE
33898: LD_INT 1
33900: DEC
33901: ST_TO_ADDR
33902: LD_VAR 0 3
33906: PUSH
33907: FOR_TO
33908: IFFALSE 34534
// begin depot := list [ i ] [ 2 ] ;
33910: LD_ADDR_VAR 0 8
33914: PUSH
33915: LD_VAR 0 3
33919: PUSH
33920: LD_VAR 0 1
33924: ARRAY
33925: PUSH
33926: LD_INT 2
33928: ARRAY
33929: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33930: LD_ADDR_VAR 0 5
33934: PUSH
33935: LD_VAR 0 3
33939: PUSH
33940: LD_VAR 0 1
33944: ARRAY
33945: PUSH
33946: LD_INT 1
33948: ARRAY
33949: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33950: LD_VAR 0 8
33954: PPUSH
33955: CALL_OW 301
33959: PUSH
33960: LD_VAR 0 5
33964: PUSH
33965: LD_VAR 0 8
33969: PPUSH
33970: CALL_OW 255
33974: NONEQUAL
33975: OR
33976: IFFALSE 34005
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33978: LD_ADDR_EXP 103
33982: PUSH
33983: LD_EXP 103
33987: PPUSH
33988: LD_VAR 0 8
33992: PPUSH
33993: LD_INT 0
33995: PPUSH
33996: CALL_OW 1
34000: ST_TO_ADDR
// exit ;
34001: POP
34002: POP
34003: GO 34536
// end ; x := list [ i ] [ 3 ] ;
34005: LD_ADDR_VAR 0 6
34009: PUSH
34010: LD_VAR 0 3
34014: PUSH
34015: LD_VAR 0 1
34019: ARRAY
34020: PUSH
34021: LD_INT 3
34023: ARRAY
34024: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34025: LD_ADDR_VAR 0 7
34029: PUSH
34030: LD_VAR 0 3
34034: PUSH
34035: LD_VAR 0 1
34039: ARRAY
34040: PUSH
34041: LD_INT 4
34043: ARRAY
34044: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34045: LD_ADDR_VAR 0 9
34049: PUSH
34050: LD_VAR 0 6
34054: PPUSH
34055: LD_VAR 0 7
34059: PPUSH
34060: LD_INT 16
34062: PPUSH
34063: CALL 78642 0 3
34067: ST_TO_ADDR
// if not cratesNearbyPoint then
34068: LD_VAR 0 9
34072: NOT
34073: IFFALSE 34079
// exit ;
34075: POP
34076: POP
34077: GO 34536
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34079: LD_ADDR_VAR 0 4
34083: PUSH
34084: LD_INT 22
34086: PUSH
34087: LD_VAR 0 5
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 3
34098: PUSH
34099: LD_INT 60
34101: PUSH
34102: EMPTY
34103: LIST
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 91
34111: PUSH
34112: LD_VAR 0 8
34116: PUSH
34117: LD_INT 6
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: LD_INT 25
34130: PUSH
34131: LD_INT 2
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 25
34140: PUSH
34141: LD_INT 16
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: LIST
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: PPUSH
34159: CALL_OW 69
34163: PUSH
34164: LD_VAR 0 8
34168: PPUSH
34169: CALL_OW 313
34173: PPUSH
34174: LD_INT 3
34176: PUSH
34177: LD_INT 60
34179: PUSH
34180: EMPTY
34181: LIST
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 2
34189: PUSH
34190: LD_INT 25
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 25
34202: PUSH
34203: LD_INT 16
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: LIST
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PPUSH
34219: CALL_OW 72
34223: UNION
34224: ST_TO_ADDR
// if tmp then
34225: LD_VAR 0 4
34229: IFFALSE 34309
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34231: LD_ADDR_VAR 0 4
34235: PUSH
34236: LD_VAR 0 4
34240: PPUSH
34241: LD_INT 3
34243: PPUSH
34244: CALL 76611 0 2
34248: ST_TO_ADDR
// for j in tmp do
34249: LD_ADDR_VAR 0 2
34253: PUSH
34254: LD_VAR 0 4
34258: PUSH
34259: FOR_IN
34260: IFFALSE 34303
// begin if IsInUnit ( j ) then
34262: LD_VAR 0 2
34266: PPUSH
34267: CALL_OW 310
34271: IFFALSE 34282
// ComExit ( j ) ;
34273: LD_VAR 0 2
34277: PPUSH
34278: CALL 76694 0 1
// AddComCollect ( j , x , y ) ;
34282: LD_VAR 0 2
34286: PPUSH
34287: LD_VAR 0 6
34291: PPUSH
34292: LD_VAR 0 7
34296: PPUSH
34297: CALL_OW 177
// end ;
34301: GO 34259
34303: POP
34304: POP
// exit ;
34305: POP
34306: POP
34307: GO 34536
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34309: LD_ADDR_VAR 0 4
34313: PUSH
34314: LD_INT 22
34316: PUSH
34317: LD_VAR 0 5
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 91
34328: PUSH
34329: LD_VAR 0 8
34333: PUSH
34334: LD_INT 8
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 2
34344: PUSH
34345: LD_INT 34
34347: PUSH
34348: LD_INT 12
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 34
34357: PUSH
34358: LD_INT 51
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 34
34367: PUSH
34368: LD_INT 32
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 34
34377: PUSH
34378: LD_INT 89
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: LIST
34396: PPUSH
34397: CALL_OW 69
34401: ST_TO_ADDR
// if tmp then
34402: LD_VAR 0 4
34406: IFFALSE 34532
// begin for j in tmp do
34408: LD_ADDR_VAR 0 2
34412: PUSH
34413: LD_VAR 0 4
34417: PUSH
34418: FOR_IN
34419: IFFALSE 34530
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34421: LD_VAR 0 2
34425: PPUSH
34426: CALL_OW 262
34430: PUSH
34431: LD_INT 3
34433: EQUAL
34434: PUSH
34435: LD_VAR 0 2
34439: PPUSH
34440: CALL_OW 261
34444: PUSH
34445: LD_INT 20
34447: GREATER
34448: OR
34449: PUSH
34450: LD_VAR 0 2
34454: PPUSH
34455: CALL_OW 314
34459: NOT
34460: AND
34461: PUSH
34462: LD_VAR 0 2
34466: PPUSH
34467: CALL_OW 263
34471: PUSH
34472: LD_INT 1
34474: NONEQUAL
34475: PUSH
34476: LD_VAR 0 2
34480: PPUSH
34481: CALL_OW 311
34485: OR
34486: AND
34487: IFFALSE 34528
// begin ComCollect ( j , x , y ) ;
34489: LD_VAR 0 2
34493: PPUSH
34494: LD_VAR 0 6
34498: PPUSH
34499: LD_VAR 0 7
34503: PPUSH
34504: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34508: LD_VAR 0 2
34512: PPUSH
34513: LD_VAR 0 8
34517: PPUSH
34518: CALL_OW 172
// exit ;
34522: POP
34523: POP
34524: POP
34525: POP
34526: GO 34536
// end ;
34528: GO 34418
34530: POP
34531: POP
// end ; end ;
34532: GO 33907
34534: POP
34535: POP
// end ; end_of_file
34536: PPOPN 9
34538: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34539: LD_INT 0
34541: PPUSH
34542: PPUSH
34543: PPUSH
34544: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34545: LD_VAR 0 1
34549: PPUSH
34550: CALL_OW 264
34554: PUSH
34555: LD_INT 91
34557: EQUAL
34558: IFFALSE 34630
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34560: LD_INT 68
34562: PPUSH
34563: LD_VAR 0 1
34567: PPUSH
34568: CALL_OW 255
34572: PPUSH
34573: CALL_OW 321
34577: PUSH
34578: LD_INT 2
34580: EQUAL
34581: IFFALSE 34593
// eff := 70 else
34583: LD_ADDR_VAR 0 4
34587: PUSH
34588: LD_INT 70
34590: ST_TO_ADDR
34591: GO 34601
// eff := 30 ;
34593: LD_ADDR_VAR 0 4
34597: PUSH
34598: LD_INT 30
34600: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34601: LD_VAR 0 1
34605: PPUSH
34606: CALL_OW 250
34610: PPUSH
34611: LD_VAR 0 1
34615: PPUSH
34616: CALL_OW 251
34620: PPUSH
34621: LD_VAR 0 4
34625: PPUSH
34626: CALL_OW 495
// end ; end ;
34630: LD_VAR 0 2
34634: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34635: LD_INT 0
34637: PPUSH
// end ;
34638: LD_VAR 0 4
34642: RET
// export function SOS_Command ( cmd ) ; begin
34643: LD_INT 0
34645: PPUSH
// end ;
34646: LD_VAR 0 2
34650: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34651: LD_INT 0
34653: PPUSH
// end ;
34654: LD_VAR 0 6
34658: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34659: LD_INT 0
34661: PPUSH
34662: PPUSH
// if not vehicle or not factory then
34663: LD_VAR 0 1
34667: NOT
34668: PUSH
34669: LD_VAR 0 2
34673: NOT
34674: OR
34675: IFFALSE 34679
// exit ;
34677: GO 34910
// if factoryWaypoints >= factory then
34679: LD_EXP 102
34683: PUSH
34684: LD_VAR 0 2
34688: GREATEREQUAL
34689: IFFALSE 34910
// if factoryWaypoints [ factory ] then
34691: LD_EXP 102
34695: PUSH
34696: LD_VAR 0 2
34700: ARRAY
34701: IFFALSE 34910
// begin if GetControl ( vehicle ) = control_manual then
34703: LD_VAR 0 1
34707: PPUSH
34708: CALL_OW 263
34712: PUSH
34713: LD_INT 1
34715: EQUAL
34716: IFFALSE 34797
// begin driver := IsDrivenBy ( vehicle ) ;
34718: LD_ADDR_VAR 0 4
34722: PUSH
34723: LD_VAR 0 1
34727: PPUSH
34728: CALL_OW 311
34732: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34733: LD_VAR 0 4
34737: PPUSH
34738: LD_EXP 102
34742: PUSH
34743: LD_VAR 0 2
34747: ARRAY
34748: PUSH
34749: LD_INT 3
34751: ARRAY
34752: PPUSH
34753: LD_EXP 102
34757: PUSH
34758: LD_VAR 0 2
34762: ARRAY
34763: PUSH
34764: LD_INT 4
34766: ARRAY
34767: PPUSH
34768: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34772: LD_VAR 0 4
34776: PPUSH
34777: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34781: LD_VAR 0 4
34785: PPUSH
34786: LD_VAR 0 2
34790: PPUSH
34791: CALL_OW 180
// end else
34795: GO 34910
// if GetControl ( vehicle ) = control_remote then
34797: LD_VAR 0 1
34801: PPUSH
34802: CALL_OW 263
34806: PUSH
34807: LD_INT 2
34809: EQUAL
34810: IFFALSE 34871
// begin wait ( 0 0$2 ) ;
34812: LD_INT 70
34814: PPUSH
34815: CALL_OW 67
// if Connect ( vehicle ) then
34819: LD_VAR 0 1
34823: PPUSH
34824: CALL 46934 0 1
34828: IFFALSE 34869
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34830: LD_VAR 0 1
34834: PPUSH
34835: LD_EXP 102
34839: PUSH
34840: LD_VAR 0 2
34844: ARRAY
34845: PUSH
34846: LD_INT 3
34848: ARRAY
34849: PPUSH
34850: LD_EXP 102
34854: PUSH
34855: LD_VAR 0 2
34859: ARRAY
34860: PUSH
34861: LD_INT 4
34863: ARRAY
34864: PPUSH
34865: CALL_OW 171
// end else
34869: GO 34910
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34871: LD_VAR 0 1
34875: PPUSH
34876: LD_EXP 102
34880: PUSH
34881: LD_VAR 0 2
34885: ARRAY
34886: PUSH
34887: LD_INT 3
34889: ARRAY
34890: PPUSH
34891: LD_EXP 102
34895: PUSH
34896: LD_VAR 0 2
34900: ARRAY
34901: PUSH
34902: LD_INT 4
34904: ARRAY
34905: PPUSH
34906: CALL_OW 171
// end ; end ;
34910: LD_VAR 0 3
34914: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34915: LD_INT 0
34917: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34918: LD_VAR 0 1
34922: PUSH
34923: LD_INT 250
34925: EQUAL
34926: PUSH
34927: LD_VAR 0 2
34931: PPUSH
34932: CALL_OW 264
34936: PUSH
34937: LD_INT 81
34939: EQUAL
34940: AND
34941: IFFALSE 34962
// MinerPlaceMine ( unit , x , y ) ;
34943: LD_VAR 0 2
34947: PPUSH
34948: LD_VAR 0 4
34952: PPUSH
34953: LD_VAR 0 5
34957: PPUSH
34958: CALL 37347 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34962: LD_VAR 0 1
34966: PUSH
34967: LD_INT 251
34969: EQUAL
34970: PUSH
34971: LD_VAR 0 2
34975: PPUSH
34976: CALL_OW 264
34980: PUSH
34981: LD_INT 81
34983: EQUAL
34984: AND
34985: IFFALSE 35006
// MinerDetonateMine ( unit , x , y ) ;
34987: LD_VAR 0 2
34991: PPUSH
34992: LD_VAR 0 4
34996: PPUSH
34997: LD_VAR 0 5
35001: PPUSH
35002: CALL 37622 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35006: LD_VAR 0 1
35010: PUSH
35011: LD_INT 252
35013: EQUAL
35014: PUSH
35015: LD_VAR 0 2
35019: PPUSH
35020: CALL_OW 264
35024: PUSH
35025: LD_INT 81
35027: EQUAL
35028: AND
35029: IFFALSE 35050
// MinerCreateMinefield ( unit , x , y ) ;
35031: LD_VAR 0 2
35035: PPUSH
35036: LD_VAR 0 4
35040: PPUSH
35041: LD_VAR 0 5
35045: PPUSH
35046: CALL 38039 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35050: LD_VAR 0 1
35054: PUSH
35055: LD_INT 253
35057: EQUAL
35058: PUSH
35059: LD_VAR 0 2
35063: PPUSH
35064: CALL_OW 257
35068: PUSH
35069: LD_INT 5
35071: EQUAL
35072: AND
35073: IFFALSE 35094
// ComBinocular ( unit , x , y ) ;
35075: LD_VAR 0 2
35079: PPUSH
35080: LD_VAR 0 4
35084: PPUSH
35085: LD_VAR 0 5
35089: PPUSH
35090: CALL 38408 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35094: LD_VAR 0 1
35098: PUSH
35099: LD_INT 254
35101: EQUAL
35102: PUSH
35103: LD_VAR 0 2
35107: PPUSH
35108: CALL_OW 264
35112: PUSH
35113: LD_INT 99
35115: EQUAL
35116: AND
35117: PUSH
35118: LD_VAR 0 3
35122: PPUSH
35123: CALL_OW 263
35127: PUSH
35128: LD_INT 3
35130: EQUAL
35131: AND
35132: IFFALSE 35148
// HackDestroyVehicle ( unit , selectedUnit ) ;
35134: LD_VAR 0 2
35138: PPUSH
35139: LD_VAR 0 3
35143: PPUSH
35144: CALL 36711 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35148: LD_VAR 0 1
35152: PUSH
35153: LD_INT 255
35155: EQUAL
35156: PUSH
35157: LD_VAR 0 2
35161: PPUSH
35162: CALL_OW 264
35166: PUSH
35167: LD_INT 14
35169: PUSH
35170: LD_INT 53
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: IN
35177: AND
35178: PUSH
35179: LD_VAR 0 4
35183: PPUSH
35184: LD_VAR 0 5
35188: PPUSH
35189: CALL_OW 488
35193: AND
35194: IFFALSE 35218
// CutTreeXYR ( unit , x , y , 12 ) ;
35196: LD_VAR 0 2
35200: PPUSH
35201: LD_VAR 0 4
35205: PPUSH
35206: LD_VAR 0 5
35210: PPUSH
35211: LD_INT 12
35213: PPUSH
35214: CALL 35281 0 4
// if cmd = 256 then
35218: LD_VAR 0 1
35222: PUSH
35223: LD_INT 256
35225: EQUAL
35226: IFFALSE 35247
// SetFactoryWaypoint ( unit , x , y ) ;
35228: LD_VAR 0 2
35232: PPUSH
35233: LD_VAR 0 4
35237: PPUSH
35238: LD_VAR 0 5
35242: PPUSH
35243: CALL 33228 0 3
// if cmd = 257 then
35247: LD_VAR 0 1
35251: PUSH
35252: LD_INT 257
35254: EQUAL
35255: IFFALSE 35276
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35257: LD_VAR 0 2
35261: PPUSH
35262: LD_VAR 0 4
35266: PPUSH
35267: LD_VAR 0 5
35271: PPUSH
35272: CALL 33590 0 3
// end ;
35276: LD_VAR 0 6
35280: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35281: LD_INT 0
35283: PPUSH
35284: PPUSH
35285: PPUSH
35286: PPUSH
35287: PPUSH
35288: PPUSH
35289: PPUSH
35290: PPUSH
35291: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35292: LD_VAR 0 1
35296: NOT
35297: PUSH
35298: LD_VAR 0 2
35302: PPUSH
35303: LD_VAR 0 3
35307: PPUSH
35308: CALL_OW 488
35312: NOT
35313: OR
35314: PUSH
35315: LD_VAR 0 4
35319: NOT
35320: OR
35321: IFFALSE 35325
// exit ;
35323: GO 35665
// list := [ ] ;
35325: LD_ADDR_VAR 0 13
35329: PUSH
35330: EMPTY
35331: ST_TO_ADDR
// if x - r < 0 then
35332: LD_VAR 0 2
35336: PUSH
35337: LD_VAR 0 4
35341: MINUS
35342: PUSH
35343: LD_INT 0
35345: LESS
35346: IFFALSE 35358
// min_x := 0 else
35348: LD_ADDR_VAR 0 7
35352: PUSH
35353: LD_INT 0
35355: ST_TO_ADDR
35356: GO 35374
// min_x := x - r ;
35358: LD_ADDR_VAR 0 7
35362: PUSH
35363: LD_VAR 0 2
35367: PUSH
35368: LD_VAR 0 4
35372: MINUS
35373: ST_TO_ADDR
// if y - r < 0 then
35374: LD_VAR 0 3
35378: PUSH
35379: LD_VAR 0 4
35383: MINUS
35384: PUSH
35385: LD_INT 0
35387: LESS
35388: IFFALSE 35400
// min_y := 0 else
35390: LD_ADDR_VAR 0 8
35394: PUSH
35395: LD_INT 0
35397: ST_TO_ADDR
35398: GO 35416
// min_y := y - r ;
35400: LD_ADDR_VAR 0 8
35404: PUSH
35405: LD_VAR 0 3
35409: PUSH
35410: LD_VAR 0 4
35414: MINUS
35415: ST_TO_ADDR
// max_x := x + r ;
35416: LD_ADDR_VAR 0 9
35420: PUSH
35421: LD_VAR 0 2
35425: PUSH
35426: LD_VAR 0 4
35430: PLUS
35431: ST_TO_ADDR
// max_y := y + r ;
35432: LD_ADDR_VAR 0 10
35436: PUSH
35437: LD_VAR 0 3
35441: PUSH
35442: LD_VAR 0 4
35446: PLUS
35447: ST_TO_ADDR
// for _x = min_x to max_x do
35448: LD_ADDR_VAR 0 11
35452: PUSH
35453: DOUBLE
35454: LD_VAR 0 7
35458: DEC
35459: ST_TO_ADDR
35460: LD_VAR 0 9
35464: PUSH
35465: FOR_TO
35466: IFFALSE 35583
// for _y = min_y to max_y do
35468: LD_ADDR_VAR 0 12
35472: PUSH
35473: DOUBLE
35474: LD_VAR 0 8
35478: DEC
35479: ST_TO_ADDR
35480: LD_VAR 0 10
35484: PUSH
35485: FOR_TO
35486: IFFALSE 35579
// begin if not ValidHex ( _x , _y ) then
35488: LD_VAR 0 11
35492: PPUSH
35493: LD_VAR 0 12
35497: PPUSH
35498: CALL_OW 488
35502: NOT
35503: IFFALSE 35507
// continue ;
35505: GO 35485
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35507: LD_VAR 0 11
35511: PPUSH
35512: LD_VAR 0 12
35516: PPUSH
35517: CALL_OW 351
35521: PUSH
35522: LD_VAR 0 11
35526: PPUSH
35527: LD_VAR 0 12
35531: PPUSH
35532: CALL_OW 554
35536: AND
35537: IFFALSE 35577
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35539: LD_ADDR_VAR 0 13
35543: PUSH
35544: LD_VAR 0 13
35548: PPUSH
35549: LD_VAR 0 13
35553: PUSH
35554: LD_INT 1
35556: PLUS
35557: PPUSH
35558: LD_VAR 0 11
35562: PUSH
35563: LD_VAR 0 12
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PPUSH
35572: CALL_OW 2
35576: ST_TO_ADDR
// end ;
35577: GO 35485
35579: POP
35580: POP
35581: GO 35465
35583: POP
35584: POP
// if not list then
35585: LD_VAR 0 13
35589: NOT
35590: IFFALSE 35594
// exit ;
35592: GO 35665
// for i in list do
35594: LD_ADDR_VAR 0 6
35598: PUSH
35599: LD_VAR 0 13
35603: PUSH
35604: FOR_IN
35605: IFFALSE 35663
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35607: LD_VAR 0 1
35611: PPUSH
35612: LD_STRING M
35614: PUSH
35615: LD_VAR 0 6
35619: PUSH
35620: LD_INT 1
35622: ARRAY
35623: PUSH
35624: LD_VAR 0 6
35628: PUSH
35629: LD_INT 2
35631: ARRAY
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: LD_INT 0
35638: PUSH
35639: LD_INT 0
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: PUSH
35654: EMPTY
35655: LIST
35656: PPUSH
35657: CALL_OW 447
35661: GO 35604
35663: POP
35664: POP
// end ;
35665: LD_VAR 0 5
35669: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35670: LD_EXP 105
35674: NOT
35675: IFFALSE 35725
35677: GO 35679
35679: DISABLE
// begin initHack := true ;
35680: LD_ADDR_EXP 105
35684: PUSH
35685: LD_INT 1
35687: ST_TO_ADDR
// hackTanks := [ ] ;
35688: LD_ADDR_EXP 106
35692: PUSH
35693: EMPTY
35694: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35695: LD_ADDR_EXP 107
35699: PUSH
35700: EMPTY
35701: ST_TO_ADDR
// hackLimit := 3 ;
35702: LD_ADDR_EXP 108
35706: PUSH
35707: LD_INT 3
35709: ST_TO_ADDR
// hackDist := 12 ;
35710: LD_ADDR_EXP 109
35714: PUSH
35715: LD_INT 12
35717: ST_TO_ADDR
// hackCounter := [ ] ;
35718: LD_ADDR_EXP 110
35722: PUSH
35723: EMPTY
35724: ST_TO_ADDR
// end ;
35725: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35726: LD_EXP 105
35730: PUSH
35731: LD_INT 34
35733: PUSH
35734: LD_INT 99
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PPUSH
35741: CALL_OW 69
35745: AND
35746: IFFALSE 35999
35748: GO 35750
35750: DISABLE
35751: LD_INT 0
35753: PPUSH
35754: PPUSH
// begin enable ;
35755: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35756: LD_ADDR_VAR 0 1
35760: PUSH
35761: LD_INT 34
35763: PUSH
35764: LD_INT 99
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PPUSH
35771: CALL_OW 69
35775: PUSH
35776: FOR_IN
35777: IFFALSE 35997
// begin if not i in hackTanks then
35779: LD_VAR 0 1
35783: PUSH
35784: LD_EXP 106
35788: IN
35789: NOT
35790: IFFALSE 35873
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35792: LD_ADDR_EXP 106
35796: PUSH
35797: LD_EXP 106
35801: PPUSH
35802: LD_EXP 106
35806: PUSH
35807: LD_INT 1
35809: PLUS
35810: PPUSH
35811: LD_VAR 0 1
35815: PPUSH
35816: CALL_OW 1
35820: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35821: LD_ADDR_EXP 107
35825: PUSH
35826: LD_EXP 107
35830: PPUSH
35831: LD_EXP 107
35835: PUSH
35836: LD_INT 1
35838: PLUS
35839: PPUSH
35840: EMPTY
35841: PPUSH
35842: CALL_OW 1
35846: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35847: LD_ADDR_EXP 110
35851: PUSH
35852: LD_EXP 110
35856: PPUSH
35857: LD_EXP 110
35861: PUSH
35862: LD_INT 1
35864: PLUS
35865: PPUSH
35866: EMPTY
35867: PPUSH
35868: CALL_OW 1
35872: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35873: LD_VAR 0 1
35877: PPUSH
35878: CALL_OW 302
35882: NOT
35883: IFFALSE 35896
// begin HackUnlinkAll ( i ) ;
35885: LD_VAR 0 1
35889: PPUSH
35890: CALL 36002 0 1
// continue ;
35894: GO 35776
// end ; HackCheckCapturedStatus ( i ) ;
35896: LD_VAR 0 1
35900: PPUSH
35901: CALL 36445 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35905: LD_ADDR_VAR 0 2
35909: PUSH
35910: LD_INT 81
35912: PUSH
35913: LD_VAR 0 1
35917: PPUSH
35918: CALL_OW 255
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 33
35929: PUSH
35930: LD_INT 3
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 91
35939: PUSH
35940: LD_VAR 0 1
35944: PUSH
35945: LD_EXP 109
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 50
35957: PUSH
35958: EMPTY
35959: LIST
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: PPUSH
35967: CALL_OW 69
35971: ST_TO_ADDR
// if not tmp then
35972: LD_VAR 0 2
35976: NOT
35977: IFFALSE 35981
// continue ;
35979: GO 35776
// HackLink ( i , tmp ) ;
35981: LD_VAR 0 1
35985: PPUSH
35986: LD_VAR 0 2
35990: PPUSH
35991: CALL 36138 0 2
// end ;
35995: GO 35776
35997: POP
35998: POP
// end ;
35999: PPOPN 2
36001: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36002: LD_INT 0
36004: PPUSH
36005: PPUSH
36006: PPUSH
// if not hack in hackTanks then
36007: LD_VAR 0 1
36011: PUSH
36012: LD_EXP 106
36016: IN
36017: NOT
36018: IFFALSE 36022
// exit ;
36020: GO 36133
// index := GetElementIndex ( hackTanks , hack ) ;
36022: LD_ADDR_VAR 0 4
36026: PUSH
36027: LD_EXP 106
36031: PPUSH
36032: LD_VAR 0 1
36036: PPUSH
36037: CALL 43750 0 2
36041: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36042: LD_EXP 107
36046: PUSH
36047: LD_VAR 0 4
36051: ARRAY
36052: IFFALSE 36133
// begin for i in hackTanksCaptured [ index ] do
36054: LD_ADDR_VAR 0 3
36058: PUSH
36059: LD_EXP 107
36063: PUSH
36064: LD_VAR 0 4
36068: ARRAY
36069: PUSH
36070: FOR_IN
36071: IFFALSE 36097
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36073: LD_VAR 0 3
36077: PUSH
36078: LD_INT 1
36080: ARRAY
36081: PPUSH
36082: LD_VAR 0 3
36086: PUSH
36087: LD_INT 2
36089: ARRAY
36090: PPUSH
36091: CALL_OW 235
36095: GO 36070
36097: POP
36098: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36099: LD_ADDR_EXP 107
36103: PUSH
36104: LD_EXP 107
36108: PPUSH
36109: LD_VAR 0 4
36113: PPUSH
36114: EMPTY
36115: PPUSH
36116: CALL_OW 1
36120: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36121: LD_VAR 0 1
36125: PPUSH
36126: LD_INT 0
36128: PPUSH
36129: CALL_OW 505
// end ; end ;
36133: LD_VAR 0 2
36137: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36138: LD_INT 0
36140: PPUSH
36141: PPUSH
36142: PPUSH
// if not hack in hackTanks or not vehicles then
36143: LD_VAR 0 1
36147: PUSH
36148: LD_EXP 106
36152: IN
36153: NOT
36154: PUSH
36155: LD_VAR 0 2
36159: NOT
36160: OR
36161: IFFALSE 36165
// exit ;
36163: GO 36440
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36165: LD_ADDR_VAR 0 2
36169: PUSH
36170: LD_VAR 0 1
36174: PPUSH
36175: LD_VAR 0 2
36179: PPUSH
36180: LD_INT 1
36182: PPUSH
36183: LD_INT 1
36185: PPUSH
36186: CALL 44400 0 4
36190: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36191: LD_ADDR_VAR 0 5
36195: PUSH
36196: LD_EXP 106
36200: PPUSH
36201: LD_VAR 0 1
36205: PPUSH
36206: CALL 43750 0 2
36210: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36211: LD_EXP 107
36215: PUSH
36216: LD_VAR 0 5
36220: ARRAY
36221: PUSH
36222: LD_EXP 108
36226: LESS
36227: IFFALSE 36416
// begin for i := 1 to vehicles do
36229: LD_ADDR_VAR 0 4
36233: PUSH
36234: DOUBLE
36235: LD_INT 1
36237: DEC
36238: ST_TO_ADDR
36239: LD_VAR 0 2
36243: PUSH
36244: FOR_TO
36245: IFFALSE 36414
// begin if hackTanksCaptured [ index ] = hackLimit then
36247: LD_EXP 107
36251: PUSH
36252: LD_VAR 0 5
36256: ARRAY
36257: PUSH
36258: LD_EXP 108
36262: EQUAL
36263: IFFALSE 36267
// break ;
36265: GO 36414
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36267: LD_ADDR_EXP 110
36271: PUSH
36272: LD_EXP 110
36276: PPUSH
36277: LD_VAR 0 5
36281: PPUSH
36282: LD_EXP 110
36286: PUSH
36287: LD_VAR 0 5
36291: ARRAY
36292: PUSH
36293: LD_INT 1
36295: PLUS
36296: PPUSH
36297: CALL_OW 1
36301: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36302: LD_ADDR_EXP 107
36306: PUSH
36307: LD_EXP 107
36311: PPUSH
36312: LD_VAR 0 5
36316: PUSH
36317: LD_EXP 107
36321: PUSH
36322: LD_VAR 0 5
36326: ARRAY
36327: PUSH
36328: LD_INT 1
36330: PLUS
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PPUSH
36336: LD_VAR 0 2
36340: PUSH
36341: LD_VAR 0 4
36345: ARRAY
36346: PUSH
36347: LD_VAR 0 2
36351: PUSH
36352: LD_VAR 0 4
36356: ARRAY
36357: PPUSH
36358: CALL_OW 255
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PPUSH
36367: CALL 43965 0 3
36371: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36372: LD_VAR 0 2
36376: PUSH
36377: LD_VAR 0 4
36381: ARRAY
36382: PPUSH
36383: LD_VAR 0 1
36387: PPUSH
36388: CALL_OW 255
36392: PPUSH
36393: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36397: LD_VAR 0 2
36401: PUSH
36402: LD_VAR 0 4
36406: ARRAY
36407: PPUSH
36408: CALL_OW 141
// end ;
36412: GO 36244
36414: POP
36415: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36416: LD_VAR 0 1
36420: PPUSH
36421: LD_EXP 107
36425: PUSH
36426: LD_VAR 0 5
36430: ARRAY
36431: PUSH
36432: LD_INT 0
36434: PLUS
36435: PPUSH
36436: CALL_OW 505
// end ;
36440: LD_VAR 0 3
36444: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36445: LD_INT 0
36447: PPUSH
36448: PPUSH
36449: PPUSH
36450: PPUSH
// if not hack in hackTanks then
36451: LD_VAR 0 1
36455: PUSH
36456: LD_EXP 106
36460: IN
36461: NOT
36462: IFFALSE 36466
// exit ;
36464: GO 36706
// index := GetElementIndex ( hackTanks , hack ) ;
36466: LD_ADDR_VAR 0 4
36470: PUSH
36471: LD_EXP 106
36475: PPUSH
36476: LD_VAR 0 1
36480: PPUSH
36481: CALL 43750 0 2
36485: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36486: LD_ADDR_VAR 0 3
36490: PUSH
36491: DOUBLE
36492: LD_EXP 107
36496: PUSH
36497: LD_VAR 0 4
36501: ARRAY
36502: INC
36503: ST_TO_ADDR
36504: LD_INT 1
36506: PUSH
36507: FOR_DOWNTO
36508: IFFALSE 36680
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36510: LD_ADDR_VAR 0 5
36514: PUSH
36515: LD_EXP 107
36519: PUSH
36520: LD_VAR 0 4
36524: ARRAY
36525: PUSH
36526: LD_VAR 0 3
36530: ARRAY
36531: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36532: LD_VAR 0 5
36536: PUSH
36537: LD_INT 1
36539: ARRAY
36540: PPUSH
36541: CALL_OW 302
36545: NOT
36546: PUSH
36547: LD_VAR 0 5
36551: PUSH
36552: LD_INT 1
36554: ARRAY
36555: PPUSH
36556: CALL_OW 255
36560: PUSH
36561: LD_VAR 0 1
36565: PPUSH
36566: CALL_OW 255
36570: NONEQUAL
36571: OR
36572: IFFALSE 36678
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36574: LD_VAR 0 5
36578: PUSH
36579: LD_INT 1
36581: ARRAY
36582: PPUSH
36583: CALL_OW 305
36587: PUSH
36588: LD_VAR 0 5
36592: PUSH
36593: LD_INT 1
36595: ARRAY
36596: PPUSH
36597: CALL_OW 255
36601: PUSH
36602: LD_VAR 0 1
36606: PPUSH
36607: CALL_OW 255
36611: EQUAL
36612: AND
36613: IFFALSE 36637
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36615: LD_VAR 0 5
36619: PUSH
36620: LD_INT 1
36622: ARRAY
36623: PPUSH
36624: LD_VAR 0 5
36628: PUSH
36629: LD_INT 2
36631: ARRAY
36632: PPUSH
36633: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36637: LD_ADDR_EXP 107
36641: PUSH
36642: LD_EXP 107
36646: PPUSH
36647: LD_VAR 0 4
36651: PPUSH
36652: LD_EXP 107
36656: PUSH
36657: LD_VAR 0 4
36661: ARRAY
36662: PPUSH
36663: LD_VAR 0 3
36667: PPUSH
36668: CALL_OW 3
36672: PPUSH
36673: CALL_OW 1
36677: ST_TO_ADDR
// end ; end ;
36678: GO 36507
36680: POP
36681: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36682: LD_VAR 0 1
36686: PPUSH
36687: LD_EXP 107
36691: PUSH
36692: LD_VAR 0 4
36696: ARRAY
36697: PUSH
36698: LD_INT 0
36700: PLUS
36701: PPUSH
36702: CALL_OW 505
// end ;
36706: LD_VAR 0 2
36710: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36711: LD_INT 0
36713: PPUSH
36714: PPUSH
36715: PPUSH
36716: PPUSH
// if not hack in hackTanks then
36717: LD_VAR 0 1
36721: PUSH
36722: LD_EXP 106
36726: IN
36727: NOT
36728: IFFALSE 36732
// exit ;
36730: GO 36817
// index := GetElementIndex ( hackTanks , hack ) ;
36732: LD_ADDR_VAR 0 5
36736: PUSH
36737: LD_EXP 106
36741: PPUSH
36742: LD_VAR 0 1
36746: PPUSH
36747: CALL 43750 0 2
36751: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36752: LD_ADDR_VAR 0 4
36756: PUSH
36757: DOUBLE
36758: LD_INT 1
36760: DEC
36761: ST_TO_ADDR
36762: LD_EXP 107
36766: PUSH
36767: LD_VAR 0 5
36771: ARRAY
36772: PUSH
36773: FOR_TO
36774: IFFALSE 36815
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36776: LD_EXP 107
36780: PUSH
36781: LD_VAR 0 5
36785: ARRAY
36786: PUSH
36787: LD_VAR 0 4
36791: ARRAY
36792: PUSH
36793: LD_INT 1
36795: ARRAY
36796: PUSH
36797: LD_VAR 0 2
36801: EQUAL
36802: IFFALSE 36813
// KillUnit ( vehicle ) ;
36804: LD_VAR 0 2
36808: PPUSH
36809: CALL_OW 66
36813: GO 36773
36815: POP
36816: POP
// end ;
36817: LD_VAR 0 3
36821: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36822: LD_EXP 111
36826: NOT
36827: IFFALSE 36862
36829: GO 36831
36831: DISABLE
// begin initMiner := true ;
36832: LD_ADDR_EXP 111
36836: PUSH
36837: LD_INT 1
36839: ST_TO_ADDR
// minersList := [ ] ;
36840: LD_ADDR_EXP 112
36844: PUSH
36845: EMPTY
36846: ST_TO_ADDR
// minerMinesList := [ ] ;
36847: LD_ADDR_EXP 113
36851: PUSH
36852: EMPTY
36853: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36854: LD_ADDR_EXP 114
36858: PUSH
36859: LD_INT 5
36861: ST_TO_ADDR
// end ;
36862: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36863: LD_EXP 111
36867: PUSH
36868: LD_INT 34
36870: PUSH
36871: LD_INT 81
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PPUSH
36878: CALL_OW 69
36882: AND
36883: IFFALSE 37344
36885: GO 36887
36887: DISABLE
36888: LD_INT 0
36890: PPUSH
36891: PPUSH
36892: PPUSH
36893: PPUSH
// begin enable ;
36894: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36895: LD_ADDR_VAR 0 1
36899: PUSH
36900: LD_INT 34
36902: PUSH
36903: LD_INT 81
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PPUSH
36910: CALL_OW 69
36914: PUSH
36915: FOR_IN
36916: IFFALSE 36988
// begin if not i in minersList then
36918: LD_VAR 0 1
36922: PUSH
36923: LD_EXP 112
36927: IN
36928: NOT
36929: IFFALSE 36986
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36931: LD_ADDR_EXP 112
36935: PUSH
36936: LD_EXP 112
36940: PPUSH
36941: LD_EXP 112
36945: PUSH
36946: LD_INT 1
36948: PLUS
36949: PPUSH
36950: LD_VAR 0 1
36954: PPUSH
36955: CALL_OW 1
36959: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36960: LD_ADDR_EXP 113
36964: PUSH
36965: LD_EXP 113
36969: PPUSH
36970: LD_EXP 113
36974: PUSH
36975: LD_INT 1
36977: PLUS
36978: PPUSH
36979: EMPTY
36980: PPUSH
36981: CALL_OW 1
36985: ST_TO_ADDR
// end end ;
36986: GO 36915
36988: POP
36989: POP
// for i := minerMinesList downto 1 do
36990: LD_ADDR_VAR 0 1
36994: PUSH
36995: DOUBLE
36996: LD_EXP 113
37000: INC
37001: ST_TO_ADDR
37002: LD_INT 1
37004: PUSH
37005: FOR_DOWNTO
37006: IFFALSE 37342
// begin if IsLive ( minersList [ i ] ) then
37008: LD_EXP 112
37012: PUSH
37013: LD_VAR 0 1
37017: ARRAY
37018: PPUSH
37019: CALL_OW 300
37023: IFFALSE 37051
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37025: LD_EXP 112
37029: PUSH
37030: LD_VAR 0 1
37034: ARRAY
37035: PPUSH
37036: LD_EXP 113
37040: PUSH
37041: LD_VAR 0 1
37045: ARRAY
37046: PPUSH
37047: CALL_OW 505
// if not minerMinesList [ i ] then
37051: LD_EXP 113
37055: PUSH
37056: LD_VAR 0 1
37060: ARRAY
37061: NOT
37062: IFFALSE 37066
// continue ;
37064: GO 37005
// for j := minerMinesList [ i ] downto 1 do
37066: LD_ADDR_VAR 0 2
37070: PUSH
37071: DOUBLE
37072: LD_EXP 113
37076: PUSH
37077: LD_VAR 0 1
37081: ARRAY
37082: INC
37083: ST_TO_ADDR
37084: LD_INT 1
37086: PUSH
37087: FOR_DOWNTO
37088: IFFALSE 37338
// begin side := GetSide ( minersList [ i ] ) ;
37090: LD_ADDR_VAR 0 3
37094: PUSH
37095: LD_EXP 112
37099: PUSH
37100: LD_VAR 0 1
37104: ARRAY
37105: PPUSH
37106: CALL_OW 255
37110: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37111: LD_ADDR_VAR 0 4
37115: PUSH
37116: LD_EXP 113
37120: PUSH
37121: LD_VAR 0 1
37125: ARRAY
37126: PUSH
37127: LD_VAR 0 2
37131: ARRAY
37132: PUSH
37133: LD_INT 1
37135: ARRAY
37136: PPUSH
37137: LD_EXP 113
37141: PUSH
37142: LD_VAR 0 1
37146: ARRAY
37147: PUSH
37148: LD_VAR 0 2
37152: ARRAY
37153: PUSH
37154: LD_INT 2
37156: ARRAY
37157: PPUSH
37158: CALL_OW 428
37162: ST_TO_ADDR
// if not tmp then
37163: LD_VAR 0 4
37167: NOT
37168: IFFALSE 37172
// continue ;
37170: GO 37087
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37172: LD_VAR 0 4
37176: PUSH
37177: LD_INT 81
37179: PUSH
37180: LD_VAR 0 3
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PPUSH
37189: CALL_OW 69
37193: IN
37194: PUSH
37195: LD_EXP 113
37199: PUSH
37200: LD_VAR 0 1
37204: ARRAY
37205: PUSH
37206: LD_VAR 0 2
37210: ARRAY
37211: PUSH
37212: LD_INT 1
37214: ARRAY
37215: PPUSH
37216: LD_EXP 113
37220: PUSH
37221: LD_VAR 0 1
37225: ARRAY
37226: PUSH
37227: LD_VAR 0 2
37231: ARRAY
37232: PUSH
37233: LD_INT 2
37235: ARRAY
37236: PPUSH
37237: CALL_OW 458
37241: AND
37242: IFFALSE 37336
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37244: LD_EXP 113
37248: PUSH
37249: LD_VAR 0 1
37253: ARRAY
37254: PUSH
37255: LD_VAR 0 2
37259: ARRAY
37260: PUSH
37261: LD_INT 1
37263: ARRAY
37264: PPUSH
37265: LD_EXP 113
37269: PUSH
37270: LD_VAR 0 1
37274: ARRAY
37275: PUSH
37276: LD_VAR 0 2
37280: ARRAY
37281: PUSH
37282: LD_INT 2
37284: ARRAY
37285: PPUSH
37286: LD_VAR 0 3
37290: PPUSH
37291: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37295: LD_ADDR_EXP 113
37299: PUSH
37300: LD_EXP 113
37304: PPUSH
37305: LD_VAR 0 1
37309: PPUSH
37310: LD_EXP 113
37314: PUSH
37315: LD_VAR 0 1
37319: ARRAY
37320: PPUSH
37321: LD_VAR 0 2
37325: PPUSH
37326: CALL_OW 3
37330: PPUSH
37331: CALL_OW 1
37335: ST_TO_ADDR
// end ; end ;
37336: GO 37087
37338: POP
37339: POP
// end ;
37340: GO 37005
37342: POP
37343: POP
// end ;
37344: PPOPN 4
37346: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37347: LD_INT 0
37349: PPUSH
37350: PPUSH
// result := false ;
37351: LD_ADDR_VAR 0 4
37355: PUSH
37356: LD_INT 0
37358: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37359: LD_VAR 0 1
37363: PPUSH
37364: CALL_OW 264
37368: PUSH
37369: LD_INT 81
37371: EQUAL
37372: NOT
37373: IFFALSE 37377
// exit ;
37375: GO 37617
// index := GetElementIndex ( minersList , unit ) ;
37377: LD_ADDR_VAR 0 5
37381: PUSH
37382: LD_EXP 112
37386: PPUSH
37387: LD_VAR 0 1
37391: PPUSH
37392: CALL 43750 0 2
37396: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37397: LD_EXP 113
37401: PUSH
37402: LD_VAR 0 5
37406: ARRAY
37407: PUSH
37408: LD_EXP 114
37412: GREATEREQUAL
37413: IFFALSE 37417
// exit ;
37415: GO 37617
// ComMoveXY ( unit , x , y ) ;
37417: LD_VAR 0 1
37421: PPUSH
37422: LD_VAR 0 2
37426: PPUSH
37427: LD_VAR 0 3
37431: PPUSH
37432: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37436: LD_INT 35
37438: PPUSH
37439: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37443: LD_VAR 0 1
37447: PPUSH
37448: LD_VAR 0 2
37452: PPUSH
37453: LD_VAR 0 3
37457: PPUSH
37458: CALL 75105 0 3
37462: NOT
37463: PUSH
37464: LD_VAR 0 1
37468: PPUSH
37469: CALL_OW 314
37473: AND
37474: IFFALSE 37478
// exit ;
37476: GO 37617
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37478: LD_VAR 0 2
37482: PPUSH
37483: LD_VAR 0 3
37487: PPUSH
37488: CALL_OW 428
37492: PUSH
37493: LD_VAR 0 1
37497: EQUAL
37498: PUSH
37499: LD_VAR 0 1
37503: PPUSH
37504: CALL_OW 314
37508: NOT
37509: AND
37510: IFFALSE 37436
// PlaySoundXY ( x , y , PlantMine ) ;
37512: LD_VAR 0 2
37516: PPUSH
37517: LD_VAR 0 3
37521: PPUSH
37522: LD_STRING PlantMine
37524: PPUSH
37525: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37529: LD_VAR 0 2
37533: PPUSH
37534: LD_VAR 0 3
37538: PPUSH
37539: LD_VAR 0 1
37543: PPUSH
37544: CALL_OW 255
37548: PPUSH
37549: LD_INT 0
37551: PPUSH
37552: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37556: LD_ADDR_EXP 113
37560: PUSH
37561: LD_EXP 113
37565: PPUSH
37566: LD_VAR 0 5
37570: PUSH
37571: LD_EXP 113
37575: PUSH
37576: LD_VAR 0 5
37580: ARRAY
37581: PUSH
37582: LD_INT 1
37584: PLUS
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PPUSH
37590: LD_VAR 0 2
37594: PUSH
37595: LD_VAR 0 3
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PPUSH
37604: CALL 43965 0 3
37608: ST_TO_ADDR
// result := true ;
37609: LD_ADDR_VAR 0 4
37613: PUSH
37614: LD_INT 1
37616: ST_TO_ADDR
// end ;
37617: LD_VAR 0 4
37621: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37622: LD_INT 0
37624: PPUSH
37625: PPUSH
37626: PPUSH
// if not unit in minersList then
37627: LD_VAR 0 1
37631: PUSH
37632: LD_EXP 112
37636: IN
37637: NOT
37638: IFFALSE 37642
// exit ;
37640: GO 38034
// index := GetElementIndex ( minersList , unit ) ;
37642: LD_ADDR_VAR 0 6
37646: PUSH
37647: LD_EXP 112
37651: PPUSH
37652: LD_VAR 0 1
37656: PPUSH
37657: CALL 43750 0 2
37661: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37662: LD_ADDR_VAR 0 5
37666: PUSH
37667: DOUBLE
37668: LD_EXP 113
37672: PUSH
37673: LD_VAR 0 6
37677: ARRAY
37678: INC
37679: ST_TO_ADDR
37680: LD_INT 1
37682: PUSH
37683: FOR_DOWNTO
37684: IFFALSE 37845
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37686: LD_EXP 113
37690: PUSH
37691: LD_VAR 0 6
37695: ARRAY
37696: PUSH
37697: LD_VAR 0 5
37701: ARRAY
37702: PUSH
37703: LD_INT 1
37705: ARRAY
37706: PUSH
37707: LD_VAR 0 2
37711: EQUAL
37712: PUSH
37713: LD_EXP 113
37717: PUSH
37718: LD_VAR 0 6
37722: ARRAY
37723: PUSH
37724: LD_VAR 0 5
37728: ARRAY
37729: PUSH
37730: LD_INT 2
37732: ARRAY
37733: PUSH
37734: LD_VAR 0 3
37738: EQUAL
37739: AND
37740: IFFALSE 37843
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37742: LD_EXP 113
37746: PUSH
37747: LD_VAR 0 6
37751: ARRAY
37752: PUSH
37753: LD_VAR 0 5
37757: ARRAY
37758: PUSH
37759: LD_INT 1
37761: ARRAY
37762: PPUSH
37763: LD_EXP 113
37767: PUSH
37768: LD_VAR 0 6
37772: ARRAY
37773: PUSH
37774: LD_VAR 0 5
37778: ARRAY
37779: PUSH
37780: LD_INT 2
37782: ARRAY
37783: PPUSH
37784: LD_VAR 0 1
37788: PPUSH
37789: CALL_OW 255
37793: PPUSH
37794: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37798: LD_ADDR_EXP 113
37802: PUSH
37803: LD_EXP 113
37807: PPUSH
37808: LD_VAR 0 6
37812: PPUSH
37813: LD_EXP 113
37817: PUSH
37818: LD_VAR 0 6
37822: ARRAY
37823: PPUSH
37824: LD_VAR 0 5
37828: PPUSH
37829: CALL_OW 3
37833: PPUSH
37834: CALL_OW 1
37838: ST_TO_ADDR
// exit ;
37839: POP
37840: POP
37841: GO 38034
// end ; end ;
37843: GO 37683
37845: POP
37846: POP
// for i := minerMinesList [ index ] downto 1 do
37847: LD_ADDR_VAR 0 5
37851: PUSH
37852: DOUBLE
37853: LD_EXP 113
37857: PUSH
37858: LD_VAR 0 6
37862: ARRAY
37863: INC
37864: ST_TO_ADDR
37865: LD_INT 1
37867: PUSH
37868: FOR_DOWNTO
37869: IFFALSE 38032
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37871: LD_EXP 113
37875: PUSH
37876: LD_VAR 0 6
37880: ARRAY
37881: PUSH
37882: LD_VAR 0 5
37886: ARRAY
37887: PUSH
37888: LD_INT 1
37890: ARRAY
37891: PPUSH
37892: LD_EXP 113
37896: PUSH
37897: LD_VAR 0 6
37901: ARRAY
37902: PUSH
37903: LD_VAR 0 5
37907: ARRAY
37908: PUSH
37909: LD_INT 2
37911: ARRAY
37912: PPUSH
37913: LD_VAR 0 2
37917: PPUSH
37918: LD_VAR 0 3
37922: PPUSH
37923: CALL_OW 298
37927: PUSH
37928: LD_INT 6
37930: LESS
37931: IFFALSE 38030
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37933: LD_EXP 113
37937: PUSH
37938: LD_VAR 0 6
37942: ARRAY
37943: PUSH
37944: LD_VAR 0 5
37948: ARRAY
37949: PUSH
37950: LD_INT 1
37952: ARRAY
37953: PPUSH
37954: LD_EXP 113
37958: PUSH
37959: LD_VAR 0 6
37963: ARRAY
37964: PUSH
37965: LD_VAR 0 5
37969: ARRAY
37970: PUSH
37971: LD_INT 2
37973: ARRAY
37974: PPUSH
37975: LD_VAR 0 1
37979: PPUSH
37980: CALL_OW 255
37984: PPUSH
37985: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37989: LD_ADDR_EXP 113
37993: PUSH
37994: LD_EXP 113
37998: PPUSH
37999: LD_VAR 0 6
38003: PPUSH
38004: LD_EXP 113
38008: PUSH
38009: LD_VAR 0 6
38013: ARRAY
38014: PPUSH
38015: LD_VAR 0 5
38019: PPUSH
38020: CALL_OW 3
38024: PPUSH
38025: CALL_OW 1
38029: ST_TO_ADDR
// end ; end ;
38030: GO 37868
38032: POP
38033: POP
// end ;
38034: LD_VAR 0 4
38038: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38039: LD_INT 0
38041: PPUSH
38042: PPUSH
38043: PPUSH
38044: PPUSH
38045: PPUSH
38046: PPUSH
38047: PPUSH
38048: PPUSH
38049: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38050: LD_VAR 0 1
38054: PPUSH
38055: CALL_OW 264
38059: PUSH
38060: LD_INT 81
38062: EQUAL
38063: NOT
38064: PUSH
38065: LD_VAR 0 1
38069: PUSH
38070: LD_EXP 112
38074: IN
38075: NOT
38076: OR
38077: IFFALSE 38081
// exit ;
38079: GO 38403
// index := GetElementIndex ( minersList , unit ) ;
38081: LD_ADDR_VAR 0 6
38085: PUSH
38086: LD_EXP 112
38090: PPUSH
38091: LD_VAR 0 1
38095: PPUSH
38096: CALL 43750 0 2
38100: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38101: LD_ADDR_VAR 0 8
38105: PUSH
38106: LD_EXP 114
38110: PUSH
38111: LD_EXP 113
38115: PUSH
38116: LD_VAR 0 6
38120: ARRAY
38121: MINUS
38122: ST_TO_ADDR
// if not minesFreeAmount then
38123: LD_VAR 0 8
38127: NOT
38128: IFFALSE 38132
// exit ;
38130: GO 38403
// tmp := [ ] ;
38132: LD_ADDR_VAR 0 7
38136: PUSH
38137: EMPTY
38138: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38139: LD_ADDR_VAR 0 5
38143: PUSH
38144: DOUBLE
38145: LD_INT 1
38147: DEC
38148: ST_TO_ADDR
38149: LD_VAR 0 8
38153: PUSH
38154: FOR_TO
38155: IFFALSE 38350
// begin _d := rand ( 0 , 5 ) ;
38157: LD_ADDR_VAR 0 11
38161: PUSH
38162: LD_INT 0
38164: PPUSH
38165: LD_INT 5
38167: PPUSH
38168: CALL_OW 12
38172: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38173: LD_ADDR_VAR 0 12
38177: PUSH
38178: LD_INT 2
38180: PPUSH
38181: LD_INT 6
38183: PPUSH
38184: CALL_OW 12
38188: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38189: LD_ADDR_VAR 0 9
38193: PUSH
38194: LD_VAR 0 2
38198: PPUSH
38199: LD_VAR 0 11
38203: PPUSH
38204: LD_VAR 0 12
38208: PPUSH
38209: CALL_OW 272
38213: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38214: LD_ADDR_VAR 0 10
38218: PUSH
38219: LD_VAR 0 3
38223: PPUSH
38224: LD_VAR 0 11
38228: PPUSH
38229: LD_VAR 0 12
38233: PPUSH
38234: CALL_OW 273
38238: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38239: LD_VAR 0 9
38243: PPUSH
38244: LD_VAR 0 10
38248: PPUSH
38249: CALL_OW 488
38253: PUSH
38254: LD_VAR 0 9
38258: PUSH
38259: LD_VAR 0 10
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_VAR 0 7
38272: IN
38273: NOT
38274: AND
38275: PUSH
38276: LD_VAR 0 9
38280: PPUSH
38281: LD_VAR 0 10
38285: PPUSH
38286: CALL_OW 458
38290: NOT
38291: AND
38292: IFFALSE 38334
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38294: LD_ADDR_VAR 0 7
38298: PUSH
38299: LD_VAR 0 7
38303: PPUSH
38304: LD_VAR 0 7
38308: PUSH
38309: LD_INT 1
38311: PLUS
38312: PPUSH
38313: LD_VAR 0 9
38317: PUSH
38318: LD_VAR 0 10
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PPUSH
38327: CALL_OW 1
38331: ST_TO_ADDR
38332: GO 38348
// i := i - 1 ;
38334: LD_ADDR_VAR 0 5
38338: PUSH
38339: LD_VAR 0 5
38343: PUSH
38344: LD_INT 1
38346: MINUS
38347: ST_TO_ADDR
// end ;
38348: GO 38154
38350: POP
38351: POP
// for i in tmp do
38352: LD_ADDR_VAR 0 5
38356: PUSH
38357: LD_VAR 0 7
38361: PUSH
38362: FOR_IN
38363: IFFALSE 38401
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38365: LD_VAR 0 1
38369: PPUSH
38370: LD_VAR 0 5
38374: PUSH
38375: LD_INT 1
38377: ARRAY
38378: PPUSH
38379: LD_VAR 0 5
38383: PUSH
38384: LD_INT 2
38386: ARRAY
38387: PPUSH
38388: CALL 37347 0 3
38392: NOT
38393: IFFALSE 38399
// exit ;
38395: POP
38396: POP
38397: GO 38403
38399: GO 38362
38401: POP
38402: POP
// end ;
38403: LD_VAR 0 4
38407: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38408: LD_INT 0
38410: PPUSH
38411: PPUSH
38412: PPUSH
38413: PPUSH
38414: PPUSH
38415: PPUSH
38416: PPUSH
// if not GetClass ( unit ) = class_sniper then
38417: LD_VAR 0 1
38421: PPUSH
38422: CALL_OW 257
38426: PUSH
38427: LD_INT 5
38429: EQUAL
38430: NOT
38431: IFFALSE 38435
// exit ;
38433: GO 38823
// dist := 8 ;
38435: LD_ADDR_VAR 0 5
38439: PUSH
38440: LD_INT 8
38442: ST_TO_ADDR
// viewRange := 12 ;
38443: LD_ADDR_VAR 0 7
38447: PUSH
38448: LD_INT 12
38450: ST_TO_ADDR
// side := GetSide ( unit ) ;
38451: LD_ADDR_VAR 0 6
38455: PUSH
38456: LD_VAR 0 1
38460: PPUSH
38461: CALL_OW 255
38465: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38466: LD_INT 61
38468: PPUSH
38469: LD_VAR 0 6
38473: PPUSH
38474: CALL_OW 321
38478: PUSH
38479: LD_INT 2
38481: EQUAL
38482: IFFALSE 38492
// viewRange := 16 ;
38484: LD_ADDR_VAR 0 7
38488: PUSH
38489: LD_INT 16
38491: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38492: LD_VAR 0 1
38496: PPUSH
38497: LD_VAR 0 2
38501: PPUSH
38502: LD_VAR 0 3
38506: PPUSH
38507: CALL_OW 297
38511: PUSH
38512: LD_VAR 0 5
38516: GREATER
38517: IFFALSE 38596
// begin ComMoveXY ( unit , x , y ) ;
38519: LD_VAR 0 1
38523: PPUSH
38524: LD_VAR 0 2
38528: PPUSH
38529: LD_VAR 0 3
38533: PPUSH
38534: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38538: LD_INT 35
38540: PPUSH
38541: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38545: LD_VAR 0 1
38549: PPUSH
38550: LD_VAR 0 2
38554: PPUSH
38555: LD_VAR 0 3
38559: PPUSH
38560: CALL 75105 0 3
38564: NOT
38565: IFFALSE 38569
// exit ;
38567: GO 38823
// until GetDistUnitXY ( unit , x , y ) < dist ;
38569: LD_VAR 0 1
38573: PPUSH
38574: LD_VAR 0 2
38578: PPUSH
38579: LD_VAR 0 3
38583: PPUSH
38584: CALL_OW 297
38588: PUSH
38589: LD_VAR 0 5
38593: LESS
38594: IFFALSE 38538
// end ; ComTurnXY ( unit , x , y ) ;
38596: LD_VAR 0 1
38600: PPUSH
38601: LD_VAR 0 2
38605: PPUSH
38606: LD_VAR 0 3
38610: PPUSH
38611: CALL_OW 118
// wait ( 5 ) ;
38615: LD_INT 5
38617: PPUSH
38618: CALL_OW 67
// _d := GetDir ( unit ) ;
38622: LD_ADDR_VAR 0 10
38626: PUSH
38627: LD_VAR 0 1
38631: PPUSH
38632: CALL_OW 254
38636: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38637: LD_ADDR_VAR 0 8
38641: PUSH
38642: LD_VAR 0 1
38646: PPUSH
38647: CALL_OW 250
38651: PPUSH
38652: LD_VAR 0 10
38656: PPUSH
38657: LD_VAR 0 5
38661: PPUSH
38662: CALL_OW 272
38666: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38667: LD_ADDR_VAR 0 9
38671: PUSH
38672: LD_VAR 0 1
38676: PPUSH
38677: CALL_OW 251
38681: PPUSH
38682: LD_VAR 0 10
38686: PPUSH
38687: LD_VAR 0 5
38691: PPUSH
38692: CALL_OW 273
38696: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38697: LD_VAR 0 8
38701: PPUSH
38702: LD_VAR 0 9
38706: PPUSH
38707: CALL_OW 488
38711: NOT
38712: IFFALSE 38716
// exit ;
38714: GO 38823
// ComAnimCustom ( unit , 1 ) ;
38716: LD_VAR 0 1
38720: PPUSH
38721: LD_INT 1
38723: PPUSH
38724: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38728: LD_VAR 0 8
38732: PPUSH
38733: LD_VAR 0 9
38737: PPUSH
38738: LD_VAR 0 6
38742: PPUSH
38743: LD_VAR 0 7
38747: PPUSH
38748: CALL_OW 330
// repeat wait ( 1 ) ;
38752: LD_INT 1
38754: PPUSH
38755: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38759: LD_VAR 0 1
38763: PPUSH
38764: CALL_OW 316
38768: PUSH
38769: LD_VAR 0 1
38773: PPUSH
38774: CALL_OW 314
38778: OR
38779: PUSH
38780: LD_VAR 0 1
38784: PPUSH
38785: CALL_OW 302
38789: NOT
38790: OR
38791: PUSH
38792: LD_VAR 0 1
38796: PPUSH
38797: CALL_OW 301
38801: OR
38802: IFFALSE 38752
// RemoveSeeing ( _x , _y , side ) ;
38804: LD_VAR 0 8
38808: PPUSH
38809: LD_VAR 0 9
38813: PPUSH
38814: LD_VAR 0 6
38818: PPUSH
38819: CALL_OW 331
// end ; end_of_file
38823: LD_VAR 0 4
38827: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38828: LD_INT 0
38830: PPUSH
38831: PPUSH
// if exist_mode then
38832: LD_VAR 0 2
38836: IFFALSE 38861
// unit := CreateCharacter ( prefix & ident ) else
38838: LD_ADDR_VAR 0 5
38842: PUSH
38843: LD_VAR 0 3
38847: PUSH
38848: LD_VAR 0 1
38852: STR
38853: PPUSH
38854: CALL_OW 34
38858: ST_TO_ADDR
38859: GO 38876
// unit := NewCharacter ( ident ) ;
38861: LD_ADDR_VAR 0 5
38865: PUSH
38866: LD_VAR 0 1
38870: PPUSH
38871: CALL_OW 25
38875: ST_TO_ADDR
// result := unit ;
38876: LD_ADDR_VAR 0 4
38880: PUSH
38881: LD_VAR 0 5
38885: ST_TO_ADDR
// end ;
38886: LD_VAR 0 4
38890: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38891: LD_INT 0
38893: PPUSH
38894: PPUSH
// if not side or not nation then
38895: LD_VAR 0 1
38899: NOT
38900: PUSH
38901: LD_VAR 0 2
38905: NOT
38906: OR
38907: IFFALSE 38911
// exit ;
38909: GO 39679
// case nation of nation_american :
38911: LD_VAR 0 2
38915: PUSH
38916: LD_INT 1
38918: DOUBLE
38919: EQUAL
38920: IFTRUE 38924
38922: GO 39138
38924: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38925: LD_ADDR_VAR 0 4
38929: PUSH
38930: LD_INT 35
38932: PUSH
38933: LD_INT 45
38935: PUSH
38936: LD_INT 46
38938: PUSH
38939: LD_INT 47
38941: PUSH
38942: LD_INT 82
38944: PUSH
38945: LD_INT 83
38947: PUSH
38948: LD_INT 84
38950: PUSH
38951: LD_INT 85
38953: PUSH
38954: LD_INT 86
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: LD_INT 6
38965: PUSH
38966: LD_INT 15
38968: PUSH
38969: LD_INT 16
38971: PUSH
38972: LD_INT 7
38974: PUSH
38975: LD_INT 12
38977: PUSH
38978: LD_INT 13
38980: PUSH
38981: LD_INT 10
38983: PUSH
38984: LD_INT 14
38986: PUSH
38987: LD_INT 20
38989: PUSH
38990: LD_INT 21
38992: PUSH
38993: LD_INT 22
38995: PUSH
38996: LD_INT 25
38998: PUSH
38999: LD_INT 32
39001: PUSH
39002: LD_INT 27
39004: PUSH
39005: LD_INT 36
39007: PUSH
39008: LD_INT 69
39010: PUSH
39011: LD_INT 39
39013: PUSH
39014: LD_INT 34
39016: PUSH
39017: LD_INT 40
39019: PUSH
39020: LD_INT 48
39022: PUSH
39023: LD_INT 49
39025: PUSH
39026: LD_INT 50
39028: PUSH
39029: LD_INT 51
39031: PUSH
39032: LD_INT 52
39034: PUSH
39035: LD_INT 53
39037: PUSH
39038: LD_INT 54
39040: PUSH
39041: LD_INT 55
39043: PUSH
39044: LD_INT 56
39046: PUSH
39047: LD_INT 57
39049: PUSH
39050: LD_INT 58
39052: PUSH
39053: LD_INT 59
39055: PUSH
39056: LD_INT 60
39058: PUSH
39059: LD_INT 61
39061: PUSH
39062: LD_INT 62
39064: PUSH
39065: LD_INT 80
39067: PUSH
39068: LD_INT 82
39070: PUSH
39071: LD_INT 83
39073: PUSH
39074: LD_INT 84
39076: PUSH
39077: LD_INT 85
39079: PUSH
39080: LD_INT 86
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: ST_TO_ADDR
39136: GO 39603
39138: LD_INT 2
39140: DOUBLE
39141: EQUAL
39142: IFTRUE 39146
39144: GO 39372
39146: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39147: LD_ADDR_VAR 0 4
39151: PUSH
39152: LD_INT 35
39154: PUSH
39155: LD_INT 45
39157: PUSH
39158: LD_INT 46
39160: PUSH
39161: LD_INT 47
39163: PUSH
39164: LD_INT 82
39166: PUSH
39167: LD_INT 83
39169: PUSH
39170: LD_INT 84
39172: PUSH
39173: LD_INT 85
39175: PUSH
39176: LD_INT 87
39178: PUSH
39179: LD_INT 70
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: LD_INT 11
39187: PUSH
39188: LD_INT 3
39190: PUSH
39191: LD_INT 4
39193: PUSH
39194: LD_INT 5
39196: PUSH
39197: LD_INT 6
39199: PUSH
39200: LD_INT 15
39202: PUSH
39203: LD_INT 18
39205: PUSH
39206: LD_INT 7
39208: PUSH
39209: LD_INT 17
39211: PUSH
39212: LD_INT 8
39214: PUSH
39215: LD_INT 20
39217: PUSH
39218: LD_INT 21
39220: PUSH
39221: LD_INT 22
39223: PUSH
39224: LD_INT 72
39226: PUSH
39227: LD_INT 26
39229: PUSH
39230: LD_INT 69
39232: PUSH
39233: LD_INT 39
39235: PUSH
39236: LD_INT 40
39238: PUSH
39239: LD_INT 41
39241: PUSH
39242: LD_INT 42
39244: PUSH
39245: LD_INT 43
39247: PUSH
39248: LD_INT 48
39250: PUSH
39251: LD_INT 49
39253: PUSH
39254: LD_INT 50
39256: PUSH
39257: LD_INT 51
39259: PUSH
39260: LD_INT 52
39262: PUSH
39263: LD_INT 53
39265: PUSH
39266: LD_INT 54
39268: PUSH
39269: LD_INT 55
39271: PUSH
39272: LD_INT 56
39274: PUSH
39275: LD_INT 60
39277: PUSH
39278: LD_INT 61
39280: PUSH
39281: LD_INT 62
39283: PUSH
39284: LD_INT 66
39286: PUSH
39287: LD_INT 67
39289: PUSH
39290: LD_INT 68
39292: PUSH
39293: LD_INT 81
39295: PUSH
39296: LD_INT 82
39298: PUSH
39299: LD_INT 83
39301: PUSH
39302: LD_INT 84
39304: PUSH
39305: LD_INT 85
39307: PUSH
39308: LD_INT 87
39310: PUSH
39311: LD_INT 88
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: ST_TO_ADDR
39370: GO 39603
39372: LD_INT 3
39374: DOUBLE
39375: EQUAL
39376: IFTRUE 39380
39378: GO 39602
39380: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39381: LD_ADDR_VAR 0 4
39385: PUSH
39386: LD_INT 46
39388: PUSH
39389: LD_INT 47
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: LD_INT 2
39397: PUSH
39398: LD_INT 82
39400: PUSH
39401: LD_INT 83
39403: PUSH
39404: LD_INT 84
39406: PUSH
39407: LD_INT 85
39409: PUSH
39410: LD_INT 86
39412: PUSH
39413: LD_INT 11
39415: PUSH
39416: LD_INT 9
39418: PUSH
39419: LD_INT 20
39421: PUSH
39422: LD_INT 19
39424: PUSH
39425: LD_INT 21
39427: PUSH
39428: LD_INT 24
39430: PUSH
39431: LD_INT 22
39433: PUSH
39434: LD_INT 25
39436: PUSH
39437: LD_INT 28
39439: PUSH
39440: LD_INT 29
39442: PUSH
39443: LD_INT 30
39445: PUSH
39446: LD_INT 31
39448: PUSH
39449: LD_INT 37
39451: PUSH
39452: LD_INT 38
39454: PUSH
39455: LD_INT 32
39457: PUSH
39458: LD_INT 27
39460: PUSH
39461: LD_INT 33
39463: PUSH
39464: LD_INT 69
39466: PUSH
39467: LD_INT 39
39469: PUSH
39470: LD_INT 34
39472: PUSH
39473: LD_INT 40
39475: PUSH
39476: LD_INT 71
39478: PUSH
39479: LD_INT 23
39481: PUSH
39482: LD_INT 44
39484: PUSH
39485: LD_INT 48
39487: PUSH
39488: LD_INT 49
39490: PUSH
39491: LD_INT 50
39493: PUSH
39494: LD_INT 51
39496: PUSH
39497: LD_INT 52
39499: PUSH
39500: LD_INT 53
39502: PUSH
39503: LD_INT 54
39505: PUSH
39506: LD_INT 55
39508: PUSH
39509: LD_INT 56
39511: PUSH
39512: LD_INT 57
39514: PUSH
39515: LD_INT 58
39517: PUSH
39518: LD_INT 59
39520: PUSH
39521: LD_INT 63
39523: PUSH
39524: LD_INT 64
39526: PUSH
39527: LD_INT 65
39529: PUSH
39530: LD_INT 82
39532: PUSH
39533: LD_INT 83
39535: PUSH
39536: LD_INT 84
39538: PUSH
39539: LD_INT 85
39541: PUSH
39542: LD_INT 86
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: ST_TO_ADDR
39600: GO 39603
39602: POP
// if state > - 1 and state < 3 then
39603: LD_VAR 0 3
39607: PUSH
39608: LD_INT 1
39610: NEG
39611: GREATER
39612: PUSH
39613: LD_VAR 0 3
39617: PUSH
39618: LD_INT 3
39620: LESS
39621: AND
39622: IFFALSE 39679
// for i in result do
39624: LD_ADDR_VAR 0 5
39628: PUSH
39629: LD_VAR 0 4
39633: PUSH
39634: FOR_IN
39635: IFFALSE 39677
// if GetTech ( i , side ) <> state then
39637: LD_VAR 0 5
39641: PPUSH
39642: LD_VAR 0 1
39646: PPUSH
39647: CALL_OW 321
39651: PUSH
39652: LD_VAR 0 3
39656: NONEQUAL
39657: IFFALSE 39675
// result := result diff i ;
39659: LD_ADDR_VAR 0 4
39663: PUSH
39664: LD_VAR 0 4
39668: PUSH
39669: LD_VAR 0 5
39673: DIFF
39674: ST_TO_ADDR
39675: GO 39634
39677: POP
39678: POP
// end ;
39679: LD_VAR 0 4
39683: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39684: LD_INT 0
39686: PPUSH
39687: PPUSH
39688: PPUSH
// result := true ;
39689: LD_ADDR_VAR 0 3
39693: PUSH
39694: LD_INT 1
39696: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39697: LD_ADDR_VAR 0 5
39701: PUSH
39702: LD_VAR 0 2
39706: PPUSH
39707: CALL_OW 480
39711: ST_TO_ADDR
// if not tmp then
39712: LD_VAR 0 5
39716: NOT
39717: IFFALSE 39721
// exit ;
39719: GO 39770
// for i in tmp do
39721: LD_ADDR_VAR 0 4
39725: PUSH
39726: LD_VAR 0 5
39730: PUSH
39731: FOR_IN
39732: IFFALSE 39768
// if GetTech ( i , side ) <> state_researched then
39734: LD_VAR 0 4
39738: PPUSH
39739: LD_VAR 0 1
39743: PPUSH
39744: CALL_OW 321
39748: PUSH
39749: LD_INT 2
39751: NONEQUAL
39752: IFFALSE 39766
// begin result := false ;
39754: LD_ADDR_VAR 0 3
39758: PUSH
39759: LD_INT 0
39761: ST_TO_ADDR
// exit ;
39762: POP
39763: POP
39764: GO 39770
// end ;
39766: GO 39731
39768: POP
39769: POP
// end ;
39770: LD_VAR 0 3
39774: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39775: LD_INT 0
39777: PPUSH
39778: PPUSH
39779: PPUSH
39780: PPUSH
39781: PPUSH
39782: PPUSH
39783: PPUSH
39784: PPUSH
39785: PPUSH
39786: PPUSH
39787: PPUSH
39788: PPUSH
39789: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39790: LD_VAR 0 1
39794: NOT
39795: PUSH
39796: LD_VAR 0 1
39800: PPUSH
39801: CALL_OW 257
39805: PUSH
39806: LD_INT 9
39808: NONEQUAL
39809: OR
39810: IFFALSE 39814
// exit ;
39812: GO 40387
// side := GetSide ( unit ) ;
39814: LD_ADDR_VAR 0 9
39818: PUSH
39819: LD_VAR 0 1
39823: PPUSH
39824: CALL_OW 255
39828: ST_TO_ADDR
// tech_space := tech_spacanom ;
39829: LD_ADDR_VAR 0 12
39833: PUSH
39834: LD_INT 29
39836: ST_TO_ADDR
// tech_time := tech_taurad ;
39837: LD_ADDR_VAR 0 13
39841: PUSH
39842: LD_INT 28
39844: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39845: LD_ADDR_VAR 0 11
39849: PUSH
39850: LD_VAR 0 1
39854: PPUSH
39855: CALL_OW 310
39859: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39860: LD_VAR 0 11
39864: PPUSH
39865: CALL_OW 247
39869: PUSH
39870: LD_INT 2
39872: EQUAL
39873: IFFALSE 39877
// exit ;
39875: GO 40387
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39877: LD_ADDR_VAR 0 8
39881: PUSH
39882: LD_INT 81
39884: PUSH
39885: LD_VAR 0 9
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 3
39896: PUSH
39897: LD_INT 21
39899: PUSH
39900: LD_INT 3
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PPUSH
39915: CALL_OW 69
39919: ST_TO_ADDR
// if not tmp then
39920: LD_VAR 0 8
39924: NOT
39925: IFFALSE 39929
// exit ;
39927: GO 40387
// if in_unit then
39929: LD_VAR 0 11
39933: IFFALSE 39957
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39935: LD_ADDR_VAR 0 10
39939: PUSH
39940: LD_VAR 0 8
39944: PPUSH
39945: LD_VAR 0 11
39949: PPUSH
39950: CALL_OW 74
39954: ST_TO_ADDR
39955: GO 39977
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39957: LD_ADDR_VAR 0 10
39961: PUSH
39962: LD_VAR 0 8
39966: PPUSH
39967: LD_VAR 0 1
39971: PPUSH
39972: CALL_OW 74
39976: ST_TO_ADDR
// if not enemy then
39977: LD_VAR 0 10
39981: NOT
39982: IFFALSE 39986
// exit ;
39984: GO 40387
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39986: LD_VAR 0 11
39990: PUSH
39991: LD_VAR 0 11
39995: PPUSH
39996: LD_VAR 0 10
40000: PPUSH
40001: CALL_OW 296
40005: PUSH
40006: LD_INT 13
40008: GREATER
40009: AND
40010: PUSH
40011: LD_VAR 0 1
40015: PPUSH
40016: LD_VAR 0 10
40020: PPUSH
40021: CALL_OW 296
40025: PUSH
40026: LD_INT 12
40028: GREATER
40029: OR
40030: IFFALSE 40034
// exit ;
40032: GO 40387
// missile := [ 1 ] ;
40034: LD_ADDR_VAR 0 14
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40045: LD_VAR 0 9
40049: PPUSH
40050: LD_VAR 0 12
40054: PPUSH
40055: CALL_OW 325
40059: IFFALSE 40088
// missile := Replace ( missile , missile + 1 , 2 ) ;
40061: LD_ADDR_VAR 0 14
40065: PUSH
40066: LD_VAR 0 14
40070: PPUSH
40071: LD_VAR 0 14
40075: PUSH
40076: LD_INT 1
40078: PLUS
40079: PPUSH
40080: LD_INT 2
40082: PPUSH
40083: CALL_OW 1
40087: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40088: LD_VAR 0 9
40092: PPUSH
40093: LD_VAR 0 13
40097: PPUSH
40098: CALL_OW 325
40102: PUSH
40103: LD_VAR 0 10
40107: PPUSH
40108: CALL_OW 255
40112: PPUSH
40113: LD_VAR 0 13
40117: PPUSH
40118: CALL_OW 325
40122: NOT
40123: AND
40124: IFFALSE 40153
// missile := Replace ( missile , missile + 1 , 3 ) ;
40126: LD_ADDR_VAR 0 14
40130: PUSH
40131: LD_VAR 0 14
40135: PPUSH
40136: LD_VAR 0 14
40140: PUSH
40141: LD_INT 1
40143: PLUS
40144: PPUSH
40145: LD_INT 3
40147: PPUSH
40148: CALL_OW 1
40152: ST_TO_ADDR
// if missile < 2 then
40153: LD_VAR 0 14
40157: PUSH
40158: LD_INT 2
40160: LESS
40161: IFFALSE 40165
// exit ;
40163: GO 40387
// x := GetX ( enemy ) ;
40165: LD_ADDR_VAR 0 4
40169: PUSH
40170: LD_VAR 0 10
40174: PPUSH
40175: CALL_OW 250
40179: ST_TO_ADDR
// y := GetY ( enemy ) ;
40180: LD_ADDR_VAR 0 5
40184: PUSH
40185: LD_VAR 0 10
40189: PPUSH
40190: CALL_OW 251
40194: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40195: LD_ADDR_VAR 0 6
40199: PUSH
40200: LD_VAR 0 4
40204: PUSH
40205: LD_INT 1
40207: NEG
40208: PPUSH
40209: LD_INT 1
40211: PPUSH
40212: CALL_OW 12
40216: PLUS
40217: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40218: LD_ADDR_VAR 0 7
40222: PUSH
40223: LD_VAR 0 5
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PPUSH
40232: LD_INT 1
40234: PPUSH
40235: CALL_OW 12
40239: PLUS
40240: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40241: LD_VAR 0 6
40245: PPUSH
40246: LD_VAR 0 7
40250: PPUSH
40251: CALL_OW 488
40255: NOT
40256: IFFALSE 40278
// begin _x := x ;
40258: LD_ADDR_VAR 0 6
40262: PUSH
40263: LD_VAR 0 4
40267: ST_TO_ADDR
// _y := y ;
40268: LD_ADDR_VAR 0 7
40272: PUSH
40273: LD_VAR 0 5
40277: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40278: LD_ADDR_VAR 0 3
40282: PUSH
40283: LD_INT 1
40285: PPUSH
40286: LD_VAR 0 14
40290: PPUSH
40291: CALL_OW 12
40295: ST_TO_ADDR
// case i of 1 :
40296: LD_VAR 0 3
40300: PUSH
40301: LD_INT 1
40303: DOUBLE
40304: EQUAL
40305: IFTRUE 40309
40307: GO 40326
40309: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40310: LD_VAR 0 1
40314: PPUSH
40315: LD_VAR 0 10
40319: PPUSH
40320: CALL_OW 115
40324: GO 40387
40326: LD_INT 2
40328: DOUBLE
40329: EQUAL
40330: IFTRUE 40334
40332: GO 40356
40334: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40335: LD_VAR 0 1
40339: PPUSH
40340: LD_VAR 0 6
40344: PPUSH
40345: LD_VAR 0 7
40349: PPUSH
40350: CALL_OW 153
40354: GO 40387
40356: LD_INT 3
40358: DOUBLE
40359: EQUAL
40360: IFTRUE 40364
40362: GO 40386
40364: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40365: LD_VAR 0 1
40369: PPUSH
40370: LD_VAR 0 6
40374: PPUSH
40375: LD_VAR 0 7
40379: PPUSH
40380: CALL_OW 154
40384: GO 40387
40386: POP
// end ;
40387: LD_VAR 0 2
40391: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40392: LD_INT 0
40394: PPUSH
40395: PPUSH
40396: PPUSH
40397: PPUSH
40398: PPUSH
40399: PPUSH
// if not unit or not building then
40400: LD_VAR 0 1
40404: NOT
40405: PUSH
40406: LD_VAR 0 2
40410: NOT
40411: OR
40412: IFFALSE 40416
// exit ;
40414: GO 40574
// x := GetX ( building ) ;
40416: LD_ADDR_VAR 0 5
40420: PUSH
40421: LD_VAR 0 2
40425: PPUSH
40426: CALL_OW 250
40430: ST_TO_ADDR
// y := GetY ( building ) ;
40431: LD_ADDR_VAR 0 6
40435: PUSH
40436: LD_VAR 0 2
40440: PPUSH
40441: CALL_OW 251
40445: ST_TO_ADDR
// for i = 0 to 5 do
40446: LD_ADDR_VAR 0 4
40450: PUSH
40451: DOUBLE
40452: LD_INT 0
40454: DEC
40455: ST_TO_ADDR
40456: LD_INT 5
40458: PUSH
40459: FOR_TO
40460: IFFALSE 40572
// begin _x := ShiftX ( x , i , 3 ) ;
40462: LD_ADDR_VAR 0 7
40466: PUSH
40467: LD_VAR 0 5
40471: PPUSH
40472: LD_VAR 0 4
40476: PPUSH
40477: LD_INT 3
40479: PPUSH
40480: CALL_OW 272
40484: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40485: LD_ADDR_VAR 0 8
40489: PUSH
40490: LD_VAR 0 6
40494: PPUSH
40495: LD_VAR 0 4
40499: PPUSH
40500: LD_INT 3
40502: PPUSH
40503: CALL_OW 273
40507: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40508: LD_VAR 0 7
40512: PPUSH
40513: LD_VAR 0 8
40517: PPUSH
40518: CALL_OW 488
40522: NOT
40523: IFFALSE 40527
// continue ;
40525: GO 40459
// if HexInfo ( _x , _y ) = 0 then
40527: LD_VAR 0 7
40531: PPUSH
40532: LD_VAR 0 8
40536: PPUSH
40537: CALL_OW 428
40541: PUSH
40542: LD_INT 0
40544: EQUAL
40545: IFFALSE 40570
// begin ComMoveXY ( unit , _x , _y ) ;
40547: LD_VAR 0 1
40551: PPUSH
40552: LD_VAR 0 7
40556: PPUSH
40557: LD_VAR 0 8
40561: PPUSH
40562: CALL_OW 111
// exit ;
40566: POP
40567: POP
40568: GO 40574
// end ; end ;
40570: GO 40459
40572: POP
40573: POP
// end ;
40574: LD_VAR 0 3
40578: RET
// export function ScanBase ( side , base_area ) ; begin
40579: LD_INT 0
40581: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40582: LD_ADDR_VAR 0 3
40586: PUSH
40587: LD_VAR 0 2
40591: PPUSH
40592: LD_INT 81
40594: PUSH
40595: LD_VAR 0 1
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PPUSH
40604: CALL_OW 70
40608: ST_TO_ADDR
// end ;
40609: LD_VAR 0 3
40613: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40614: LD_INT 0
40616: PPUSH
40617: PPUSH
40618: PPUSH
40619: PPUSH
// result := false ;
40620: LD_ADDR_VAR 0 2
40624: PUSH
40625: LD_INT 0
40627: ST_TO_ADDR
// side := GetSide ( unit ) ;
40628: LD_ADDR_VAR 0 3
40632: PUSH
40633: LD_VAR 0 1
40637: PPUSH
40638: CALL_OW 255
40642: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40643: LD_ADDR_VAR 0 4
40647: PUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 248
40657: ST_TO_ADDR
// case nat of 1 :
40658: LD_VAR 0 4
40662: PUSH
40663: LD_INT 1
40665: DOUBLE
40666: EQUAL
40667: IFTRUE 40671
40669: GO 40682
40671: POP
// tech := tech_lassight ; 2 :
40672: LD_ADDR_VAR 0 5
40676: PUSH
40677: LD_INT 12
40679: ST_TO_ADDR
40680: GO 40721
40682: LD_INT 2
40684: DOUBLE
40685: EQUAL
40686: IFTRUE 40690
40688: GO 40701
40690: POP
// tech := tech_mortar ; 3 :
40691: LD_ADDR_VAR 0 5
40695: PUSH
40696: LD_INT 41
40698: ST_TO_ADDR
40699: GO 40721
40701: LD_INT 3
40703: DOUBLE
40704: EQUAL
40705: IFTRUE 40709
40707: GO 40720
40709: POP
// tech := tech_bazooka ; end ;
40710: LD_ADDR_VAR 0 5
40714: PUSH
40715: LD_INT 44
40717: ST_TO_ADDR
40718: GO 40721
40720: POP
// if Researched ( side , tech ) then
40721: LD_VAR 0 3
40725: PPUSH
40726: LD_VAR 0 5
40730: PPUSH
40731: CALL_OW 325
40735: IFFALSE 40762
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40737: LD_ADDR_VAR 0 2
40741: PUSH
40742: LD_INT 5
40744: PUSH
40745: LD_INT 8
40747: PUSH
40748: LD_INT 9
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: LIST
40755: PUSH
40756: LD_VAR 0 4
40760: ARRAY
40761: ST_TO_ADDR
// end ;
40762: LD_VAR 0 2
40766: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40767: LD_INT 0
40769: PPUSH
40770: PPUSH
40771: PPUSH
// if not mines then
40772: LD_VAR 0 2
40776: NOT
40777: IFFALSE 40781
// exit ;
40779: GO 40925
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40781: LD_ADDR_VAR 0 5
40785: PUSH
40786: LD_INT 81
40788: PUSH
40789: LD_VAR 0 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 3
40800: PUSH
40801: LD_INT 21
40803: PUSH
40804: LD_INT 3
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PPUSH
40819: CALL_OW 69
40823: ST_TO_ADDR
// for i in mines do
40824: LD_ADDR_VAR 0 4
40828: PUSH
40829: LD_VAR 0 2
40833: PUSH
40834: FOR_IN
40835: IFFALSE 40923
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40837: LD_VAR 0 4
40841: PUSH
40842: LD_INT 1
40844: ARRAY
40845: PPUSH
40846: LD_VAR 0 4
40850: PUSH
40851: LD_INT 2
40853: ARRAY
40854: PPUSH
40855: CALL_OW 458
40859: NOT
40860: IFFALSE 40864
// continue ;
40862: GO 40834
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40864: LD_VAR 0 4
40868: PUSH
40869: LD_INT 1
40871: ARRAY
40872: PPUSH
40873: LD_VAR 0 4
40877: PUSH
40878: LD_INT 2
40880: ARRAY
40881: PPUSH
40882: CALL_OW 428
40886: PUSH
40887: LD_VAR 0 5
40891: IN
40892: IFFALSE 40921
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40894: LD_VAR 0 4
40898: PUSH
40899: LD_INT 1
40901: ARRAY
40902: PPUSH
40903: LD_VAR 0 4
40907: PUSH
40908: LD_INT 2
40910: ARRAY
40911: PPUSH
40912: LD_VAR 0 1
40916: PPUSH
40917: CALL_OW 456
// end ;
40921: GO 40834
40923: POP
40924: POP
// end ;
40925: LD_VAR 0 3
40929: RET
// export function Count ( array ) ; var i ; begin
40930: LD_INT 0
40932: PPUSH
40933: PPUSH
// result := 0 ;
40934: LD_ADDR_VAR 0 2
40938: PUSH
40939: LD_INT 0
40941: ST_TO_ADDR
// for i in array do
40942: LD_ADDR_VAR 0 3
40946: PUSH
40947: LD_VAR 0 1
40951: PUSH
40952: FOR_IN
40953: IFFALSE 40977
// if i then
40955: LD_VAR 0 3
40959: IFFALSE 40975
// result := result + 1 ;
40961: LD_ADDR_VAR 0 2
40965: PUSH
40966: LD_VAR 0 2
40970: PUSH
40971: LD_INT 1
40973: PLUS
40974: ST_TO_ADDR
40975: GO 40952
40977: POP
40978: POP
// end ;
40979: LD_VAR 0 2
40983: RET
// export function IsEmpty ( building ) ; begin
40984: LD_INT 0
40986: PPUSH
// if not building then
40987: LD_VAR 0 1
40991: NOT
40992: IFFALSE 40996
// exit ;
40994: GO 41039
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40996: LD_ADDR_VAR 0 2
41000: PUSH
41001: LD_VAR 0 1
41005: PUSH
41006: LD_INT 22
41008: PUSH
41009: LD_VAR 0 1
41013: PPUSH
41014: CALL_OW 255
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 58
41025: PUSH
41026: EMPTY
41027: LIST
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PPUSH
41033: CALL_OW 69
41037: IN
41038: ST_TO_ADDR
// end ;
41039: LD_VAR 0 2
41043: RET
// export function IsNotFull ( building ) ; var places ; begin
41044: LD_INT 0
41046: PPUSH
41047: PPUSH
// if not building then
41048: LD_VAR 0 1
41052: NOT
41053: IFFALSE 41057
// exit ;
41055: GO 41228
// result := false ;
41057: LD_ADDR_VAR 0 2
41061: PUSH
41062: LD_INT 0
41064: ST_TO_ADDR
// places := 0 ;
41065: LD_ADDR_VAR 0 3
41069: PUSH
41070: LD_INT 0
41072: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41073: LD_VAR 0 1
41077: PPUSH
41078: CALL_OW 266
41082: PUSH
41083: LD_INT 0
41085: DOUBLE
41086: EQUAL
41087: IFTRUE 41145
41089: LD_INT 1
41091: DOUBLE
41092: EQUAL
41093: IFTRUE 41145
41095: LD_INT 6
41097: DOUBLE
41098: EQUAL
41099: IFTRUE 41145
41101: LD_INT 7
41103: DOUBLE
41104: EQUAL
41105: IFTRUE 41145
41107: LD_INT 8
41109: DOUBLE
41110: EQUAL
41111: IFTRUE 41145
41113: LD_INT 4
41115: DOUBLE
41116: EQUAL
41117: IFTRUE 41145
41119: LD_INT 5
41121: DOUBLE
41122: EQUAL
41123: IFTRUE 41145
41125: LD_INT 2
41127: DOUBLE
41128: EQUAL
41129: IFTRUE 41145
41131: LD_INT 3
41133: DOUBLE
41134: EQUAL
41135: IFTRUE 41145
41137: LD_INT 35
41139: DOUBLE
41140: EQUAL
41141: IFTRUE 41145
41143: GO 41156
41145: POP
// places := 6 ; b_bunker , b_breastwork :
41146: LD_ADDR_VAR 0 3
41150: PUSH
41151: LD_INT 6
41153: ST_TO_ADDR
41154: GO 41201
41156: LD_INT 32
41158: DOUBLE
41159: EQUAL
41160: IFTRUE 41170
41162: LD_INT 31
41164: DOUBLE
41165: EQUAL
41166: IFTRUE 41170
41168: GO 41181
41170: POP
// places := 1 ; b_control_tower :
41171: LD_ADDR_VAR 0 3
41175: PUSH
41176: LD_INT 1
41178: ST_TO_ADDR
41179: GO 41201
41181: LD_INT 36
41183: DOUBLE
41184: EQUAL
41185: IFTRUE 41189
41187: GO 41200
41189: POP
// places := 3 ; end ;
41190: LD_ADDR_VAR 0 3
41194: PUSH
41195: LD_INT 3
41197: ST_TO_ADDR
41198: GO 41201
41200: POP
// if places then
41201: LD_VAR 0 3
41205: IFFALSE 41228
// result := UnitsInside ( building ) < places ;
41207: LD_ADDR_VAR 0 2
41211: PUSH
41212: LD_VAR 0 1
41216: PPUSH
41217: CALL_OW 313
41221: PUSH
41222: LD_VAR 0 3
41226: LESS
41227: ST_TO_ADDR
// end ;
41228: LD_VAR 0 2
41232: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41233: LD_INT 0
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
// tmp := [ ] ;
41239: LD_ADDR_VAR 0 3
41243: PUSH
41244: EMPTY
41245: ST_TO_ADDR
// list := [ ] ;
41246: LD_ADDR_VAR 0 5
41250: PUSH
41251: EMPTY
41252: ST_TO_ADDR
// for i = 16 to 25 do
41253: LD_ADDR_VAR 0 4
41257: PUSH
41258: DOUBLE
41259: LD_INT 16
41261: DEC
41262: ST_TO_ADDR
41263: LD_INT 25
41265: PUSH
41266: FOR_TO
41267: IFFALSE 41340
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41269: LD_ADDR_VAR 0 3
41273: PUSH
41274: LD_VAR 0 3
41278: PUSH
41279: LD_INT 22
41281: PUSH
41282: LD_VAR 0 1
41286: PPUSH
41287: CALL_OW 255
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 91
41298: PUSH
41299: LD_VAR 0 1
41303: PUSH
41304: LD_INT 6
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 30
41314: PUSH
41315: LD_VAR 0 4
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: LIST
41328: PUSH
41329: EMPTY
41330: LIST
41331: PPUSH
41332: CALL_OW 69
41336: ADD
41337: ST_TO_ADDR
41338: GO 41266
41340: POP
41341: POP
// for i = 1 to tmp do
41342: LD_ADDR_VAR 0 4
41346: PUSH
41347: DOUBLE
41348: LD_INT 1
41350: DEC
41351: ST_TO_ADDR
41352: LD_VAR 0 3
41356: PUSH
41357: FOR_TO
41358: IFFALSE 41446
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41360: LD_ADDR_VAR 0 5
41364: PUSH
41365: LD_VAR 0 5
41369: PUSH
41370: LD_VAR 0 3
41374: PUSH
41375: LD_VAR 0 4
41379: ARRAY
41380: PPUSH
41381: CALL_OW 266
41385: PUSH
41386: LD_VAR 0 3
41390: PUSH
41391: LD_VAR 0 4
41395: ARRAY
41396: PPUSH
41397: CALL_OW 250
41401: PUSH
41402: LD_VAR 0 3
41406: PUSH
41407: LD_VAR 0 4
41411: ARRAY
41412: PPUSH
41413: CALL_OW 251
41417: PUSH
41418: LD_VAR 0 3
41422: PUSH
41423: LD_VAR 0 4
41427: ARRAY
41428: PPUSH
41429: CALL_OW 254
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: PUSH
41440: EMPTY
41441: LIST
41442: ADD
41443: ST_TO_ADDR
41444: GO 41357
41446: POP
41447: POP
// result := list ;
41448: LD_ADDR_VAR 0 2
41452: PUSH
41453: LD_VAR 0 5
41457: ST_TO_ADDR
// end ;
41458: LD_VAR 0 2
41462: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41463: LD_INT 0
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
// if not factory then
41472: LD_VAR 0 1
41476: NOT
41477: IFFALSE 41481
// exit ;
41479: GO 42074
// if control = control_apeman then
41481: LD_VAR 0 4
41485: PUSH
41486: LD_INT 5
41488: EQUAL
41489: IFFALSE 41598
// begin tmp := UnitsInside ( factory ) ;
41491: LD_ADDR_VAR 0 8
41495: PUSH
41496: LD_VAR 0 1
41500: PPUSH
41501: CALL_OW 313
41505: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41506: LD_VAR 0 8
41510: PPUSH
41511: LD_INT 25
41513: PUSH
41514: LD_INT 12
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PPUSH
41521: CALL_OW 72
41525: NOT
41526: IFFALSE 41536
// control := control_manual ;
41528: LD_ADDR_VAR 0 4
41532: PUSH
41533: LD_INT 1
41535: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41536: LD_ADDR_VAR 0 8
41540: PUSH
41541: LD_VAR 0 1
41545: PPUSH
41546: CALL 41233 0 1
41550: ST_TO_ADDR
// if tmp then
41551: LD_VAR 0 8
41555: IFFALSE 41598
// begin for i in tmp do
41557: LD_ADDR_VAR 0 7
41561: PUSH
41562: LD_VAR 0 8
41566: PUSH
41567: FOR_IN
41568: IFFALSE 41596
// if i [ 1 ] = b_ext_radio then
41570: LD_VAR 0 7
41574: PUSH
41575: LD_INT 1
41577: ARRAY
41578: PUSH
41579: LD_INT 22
41581: EQUAL
41582: IFFALSE 41594
// begin control := control_remote ;
41584: LD_ADDR_VAR 0 4
41588: PUSH
41589: LD_INT 2
41591: ST_TO_ADDR
// break ;
41592: GO 41596
// end ;
41594: GO 41567
41596: POP
41597: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41598: LD_VAR 0 1
41602: PPUSH
41603: LD_VAR 0 2
41607: PPUSH
41608: LD_VAR 0 3
41612: PPUSH
41613: LD_VAR 0 4
41617: PPUSH
41618: LD_VAR 0 5
41622: PPUSH
41623: CALL_OW 448
41627: IFFALSE 41662
// begin result := [ chassis , engine , control , weapon ] ;
41629: LD_ADDR_VAR 0 6
41633: PUSH
41634: LD_VAR 0 2
41638: PUSH
41639: LD_VAR 0 3
41643: PUSH
41644: LD_VAR 0 4
41648: PUSH
41649: LD_VAR 0 5
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: ST_TO_ADDR
// exit ;
41660: GO 42074
// end ; _chassis := AvailableChassisList ( factory ) ;
41662: LD_ADDR_VAR 0 9
41666: PUSH
41667: LD_VAR 0 1
41671: PPUSH
41672: CALL_OW 475
41676: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41677: LD_ADDR_VAR 0 11
41681: PUSH
41682: LD_VAR 0 1
41686: PPUSH
41687: CALL_OW 476
41691: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41692: LD_ADDR_VAR 0 12
41696: PUSH
41697: LD_VAR 0 1
41701: PPUSH
41702: CALL_OW 477
41706: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41707: LD_ADDR_VAR 0 10
41711: PUSH
41712: LD_VAR 0 1
41716: PPUSH
41717: CALL_OW 478
41721: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41722: LD_VAR 0 9
41726: NOT
41727: PUSH
41728: LD_VAR 0 11
41732: NOT
41733: OR
41734: PUSH
41735: LD_VAR 0 12
41739: NOT
41740: OR
41741: PUSH
41742: LD_VAR 0 10
41746: NOT
41747: OR
41748: IFFALSE 41783
// begin result := [ chassis , engine , control , weapon ] ;
41750: LD_ADDR_VAR 0 6
41754: PUSH
41755: LD_VAR 0 2
41759: PUSH
41760: LD_VAR 0 3
41764: PUSH
41765: LD_VAR 0 4
41769: PUSH
41770: LD_VAR 0 5
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: ST_TO_ADDR
// exit ;
41781: GO 42074
// end ; if not chassis in _chassis then
41783: LD_VAR 0 2
41787: PUSH
41788: LD_VAR 0 9
41792: IN
41793: NOT
41794: IFFALSE 41820
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41796: LD_ADDR_VAR 0 2
41800: PUSH
41801: LD_VAR 0 9
41805: PUSH
41806: LD_INT 1
41808: PPUSH
41809: LD_VAR 0 9
41813: PPUSH
41814: CALL_OW 12
41818: ARRAY
41819: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41820: LD_VAR 0 2
41824: PPUSH
41825: LD_VAR 0 3
41829: PPUSH
41830: CALL 42079 0 2
41834: NOT
41835: IFFALSE 41894
// repeat engine := _engine [ 1 ] ;
41837: LD_ADDR_VAR 0 3
41841: PUSH
41842: LD_VAR 0 11
41846: PUSH
41847: LD_INT 1
41849: ARRAY
41850: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41851: LD_ADDR_VAR 0 11
41855: PUSH
41856: LD_VAR 0 11
41860: PPUSH
41861: LD_INT 1
41863: PPUSH
41864: CALL_OW 3
41868: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41869: LD_VAR 0 2
41873: PPUSH
41874: LD_VAR 0 3
41878: PPUSH
41879: CALL 42079 0 2
41883: PUSH
41884: LD_VAR 0 11
41888: PUSH
41889: EMPTY
41890: EQUAL
41891: OR
41892: IFFALSE 41837
// if not control in _control then
41894: LD_VAR 0 4
41898: PUSH
41899: LD_VAR 0 12
41903: IN
41904: NOT
41905: IFFALSE 41931
// control := _control [ rand ( 1 , _control ) ] ;
41907: LD_ADDR_VAR 0 4
41911: PUSH
41912: LD_VAR 0 12
41916: PUSH
41917: LD_INT 1
41919: PPUSH
41920: LD_VAR 0 12
41924: PPUSH
41925: CALL_OW 12
41929: ARRAY
41930: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41931: LD_VAR 0 2
41935: PPUSH
41936: LD_VAR 0 5
41940: PPUSH
41941: CALL 42299 0 2
41945: NOT
41946: IFFALSE 42005
// repeat weapon := _weapon [ 1 ] ;
41948: LD_ADDR_VAR 0 5
41952: PUSH
41953: LD_VAR 0 10
41957: PUSH
41958: LD_INT 1
41960: ARRAY
41961: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41962: LD_ADDR_VAR 0 10
41966: PUSH
41967: LD_VAR 0 10
41971: PPUSH
41972: LD_INT 1
41974: PPUSH
41975: CALL_OW 3
41979: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41980: LD_VAR 0 2
41984: PPUSH
41985: LD_VAR 0 5
41989: PPUSH
41990: CALL 42299 0 2
41994: PUSH
41995: LD_VAR 0 10
41999: PUSH
42000: EMPTY
42001: EQUAL
42002: OR
42003: IFFALSE 41948
// result := [ ] ;
42005: LD_ADDR_VAR 0 6
42009: PUSH
42010: EMPTY
42011: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42012: LD_VAR 0 1
42016: PPUSH
42017: LD_VAR 0 2
42021: PPUSH
42022: LD_VAR 0 3
42026: PPUSH
42027: LD_VAR 0 4
42031: PPUSH
42032: LD_VAR 0 5
42036: PPUSH
42037: CALL_OW 448
42041: IFFALSE 42074
// result := [ chassis , engine , control , weapon ] ;
42043: LD_ADDR_VAR 0 6
42047: PUSH
42048: LD_VAR 0 2
42052: PUSH
42053: LD_VAR 0 3
42057: PUSH
42058: LD_VAR 0 4
42062: PUSH
42063: LD_VAR 0 5
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: ST_TO_ADDR
// end ;
42074: LD_VAR 0 6
42078: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42079: LD_INT 0
42081: PPUSH
// if not chassis or not engine then
42082: LD_VAR 0 1
42086: NOT
42087: PUSH
42088: LD_VAR 0 2
42092: NOT
42093: OR
42094: IFFALSE 42098
// exit ;
42096: GO 42294
// case engine of engine_solar :
42098: LD_VAR 0 2
42102: PUSH
42103: LD_INT 2
42105: DOUBLE
42106: EQUAL
42107: IFTRUE 42111
42109: GO 42149
42111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42112: LD_ADDR_VAR 0 3
42116: PUSH
42117: LD_INT 11
42119: PUSH
42120: LD_INT 12
42122: PUSH
42123: LD_INT 13
42125: PUSH
42126: LD_INT 14
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: LD_INT 3
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: ST_TO_ADDR
42147: GO 42278
42149: LD_INT 1
42151: DOUBLE
42152: EQUAL
42153: IFTRUE 42157
42155: GO 42219
42157: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42158: LD_ADDR_VAR 0 3
42162: PUSH
42163: LD_INT 11
42165: PUSH
42166: LD_INT 12
42168: PUSH
42169: LD_INT 13
42171: PUSH
42172: LD_INT 14
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 3
42183: PUSH
42184: LD_INT 4
42186: PUSH
42187: LD_INT 5
42189: PUSH
42190: LD_INT 21
42192: PUSH
42193: LD_INT 23
42195: PUSH
42196: LD_INT 22
42198: PUSH
42199: LD_INT 24
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: ST_TO_ADDR
42217: GO 42278
42219: LD_INT 3
42221: DOUBLE
42222: EQUAL
42223: IFTRUE 42227
42225: GO 42277
42227: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42228: LD_ADDR_VAR 0 3
42232: PUSH
42233: LD_INT 13
42235: PUSH
42236: LD_INT 14
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: LD_INT 3
42244: PUSH
42245: LD_INT 4
42247: PUSH
42248: LD_INT 5
42250: PUSH
42251: LD_INT 21
42253: PUSH
42254: LD_INT 22
42256: PUSH
42257: LD_INT 23
42259: PUSH
42260: LD_INT 24
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: ST_TO_ADDR
42275: GO 42278
42277: POP
// result := ( chassis in result ) ;
42278: LD_ADDR_VAR 0 3
42282: PUSH
42283: LD_VAR 0 1
42287: PUSH
42288: LD_VAR 0 3
42292: IN
42293: ST_TO_ADDR
// end ;
42294: LD_VAR 0 3
42298: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42299: LD_INT 0
42301: PPUSH
// if not chassis or not weapon then
42302: LD_VAR 0 1
42306: NOT
42307: PUSH
42308: LD_VAR 0 2
42312: NOT
42313: OR
42314: IFFALSE 42318
// exit ;
42316: GO 43378
// case weapon of us_machine_gun :
42318: LD_VAR 0 2
42322: PUSH
42323: LD_INT 2
42325: DOUBLE
42326: EQUAL
42327: IFTRUE 42331
42329: GO 42361
42331: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42332: LD_ADDR_VAR 0 3
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: LD_INT 3
42345: PUSH
42346: LD_INT 4
42348: PUSH
42349: LD_INT 5
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: ST_TO_ADDR
42359: GO 43362
42361: LD_INT 3
42363: DOUBLE
42364: EQUAL
42365: IFTRUE 42369
42367: GO 42399
42369: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42370: LD_ADDR_VAR 0 3
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: LD_INT 3
42383: PUSH
42384: LD_INT 4
42386: PUSH
42387: LD_INT 5
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: ST_TO_ADDR
42397: GO 43362
42399: LD_INT 11
42401: DOUBLE
42402: EQUAL
42403: IFTRUE 42407
42405: GO 42437
42407: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42408: LD_ADDR_VAR 0 3
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: LD_INT 3
42421: PUSH
42422: LD_INT 4
42424: PUSH
42425: LD_INT 5
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: ST_TO_ADDR
42435: GO 43362
42437: LD_INT 4
42439: DOUBLE
42440: EQUAL
42441: IFTRUE 42445
42443: GO 42471
42445: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42446: LD_ADDR_VAR 0 3
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: LD_INT 3
42456: PUSH
42457: LD_INT 4
42459: PUSH
42460: LD_INT 5
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: ST_TO_ADDR
42469: GO 43362
42471: LD_INT 5
42473: DOUBLE
42474: EQUAL
42475: IFTRUE 42479
42477: GO 42505
42479: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42480: LD_ADDR_VAR 0 3
42484: PUSH
42485: LD_INT 2
42487: PUSH
42488: LD_INT 3
42490: PUSH
42491: LD_INT 4
42493: PUSH
42494: LD_INT 5
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: ST_TO_ADDR
42503: GO 43362
42505: LD_INT 9
42507: DOUBLE
42508: EQUAL
42509: IFTRUE 42513
42511: GO 42539
42513: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42514: LD_ADDR_VAR 0 3
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: LD_INT 3
42524: PUSH
42525: LD_INT 4
42527: PUSH
42528: LD_INT 5
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: ST_TO_ADDR
42537: GO 43362
42539: LD_INT 7
42541: DOUBLE
42542: EQUAL
42543: IFTRUE 42547
42545: GO 42573
42547: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42548: LD_ADDR_VAR 0 3
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: LD_INT 3
42558: PUSH
42559: LD_INT 4
42561: PUSH
42562: LD_INT 5
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: ST_TO_ADDR
42571: GO 43362
42573: LD_INT 12
42575: DOUBLE
42576: EQUAL
42577: IFTRUE 42581
42579: GO 42607
42581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42582: LD_ADDR_VAR 0 3
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: LD_INT 4
42595: PUSH
42596: LD_INT 5
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: ST_TO_ADDR
42605: GO 43362
42607: LD_INT 13
42609: DOUBLE
42610: EQUAL
42611: IFTRUE 42615
42613: GO 42641
42615: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42616: LD_ADDR_VAR 0 3
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: LD_INT 3
42626: PUSH
42627: LD_INT 4
42629: PUSH
42630: LD_INT 5
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: ST_TO_ADDR
42639: GO 43362
42641: LD_INT 14
42643: DOUBLE
42644: EQUAL
42645: IFTRUE 42649
42647: GO 42667
42649: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42650: LD_ADDR_VAR 0 3
42654: PUSH
42655: LD_INT 4
42657: PUSH
42658: LD_INT 5
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: ST_TO_ADDR
42665: GO 43362
42667: LD_INT 6
42669: DOUBLE
42670: EQUAL
42671: IFTRUE 42675
42673: GO 42693
42675: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42676: LD_ADDR_VAR 0 3
42680: PUSH
42681: LD_INT 4
42683: PUSH
42684: LD_INT 5
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: ST_TO_ADDR
42691: GO 43362
42693: LD_INT 10
42695: DOUBLE
42696: EQUAL
42697: IFTRUE 42701
42699: GO 42719
42701: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42702: LD_ADDR_VAR 0 3
42706: PUSH
42707: LD_INT 4
42709: PUSH
42710: LD_INT 5
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: ST_TO_ADDR
42717: GO 43362
42719: LD_INT 22
42721: DOUBLE
42722: EQUAL
42723: IFTRUE 42727
42725: GO 42753
42727: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42728: LD_ADDR_VAR 0 3
42732: PUSH
42733: LD_INT 11
42735: PUSH
42736: LD_INT 12
42738: PUSH
42739: LD_INT 13
42741: PUSH
42742: LD_INT 14
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: ST_TO_ADDR
42751: GO 43362
42753: LD_INT 23
42755: DOUBLE
42756: EQUAL
42757: IFTRUE 42761
42759: GO 42787
42761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42762: LD_ADDR_VAR 0 3
42766: PUSH
42767: LD_INT 11
42769: PUSH
42770: LD_INT 12
42772: PUSH
42773: LD_INT 13
42775: PUSH
42776: LD_INT 14
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: ST_TO_ADDR
42785: GO 43362
42787: LD_INT 24
42789: DOUBLE
42790: EQUAL
42791: IFTRUE 42795
42793: GO 42821
42795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42796: LD_ADDR_VAR 0 3
42800: PUSH
42801: LD_INT 11
42803: PUSH
42804: LD_INT 12
42806: PUSH
42807: LD_INT 13
42809: PUSH
42810: LD_INT 14
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: ST_TO_ADDR
42819: GO 43362
42821: LD_INT 30
42823: DOUBLE
42824: EQUAL
42825: IFTRUE 42829
42827: GO 42855
42829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42830: LD_ADDR_VAR 0 3
42834: PUSH
42835: LD_INT 11
42837: PUSH
42838: LD_INT 12
42840: PUSH
42841: LD_INT 13
42843: PUSH
42844: LD_INT 14
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: ST_TO_ADDR
42853: GO 43362
42855: LD_INT 25
42857: DOUBLE
42858: EQUAL
42859: IFTRUE 42863
42861: GO 42881
42863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42864: LD_ADDR_VAR 0 3
42868: PUSH
42869: LD_INT 13
42871: PUSH
42872: LD_INT 14
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: ST_TO_ADDR
42879: GO 43362
42881: LD_INT 27
42883: DOUBLE
42884: EQUAL
42885: IFTRUE 42889
42887: GO 42907
42889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42890: LD_ADDR_VAR 0 3
42894: PUSH
42895: LD_INT 13
42897: PUSH
42898: LD_INT 14
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: ST_TO_ADDR
42905: GO 43362
42907: LD_INT 92
42909: DOUBLE
42910: EQUAL
42911: IFTRUE 42915
42913: GO 42941
42915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42916: LD_ADDR_VAR 0 3
42920: PUSH
42921: LD_INT 11
42923: PUSH
42924: LD_INT 12
42926: PUSH
42927: LD_INT 13
42929: PUSH
42930: LD_INT 14
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: ST_TO_ADDR
42939: GO 43362
42941: LD_INT 28
42943: DOUBLE
42944: EQUAL
42945: IFTRUE 42949
42947: GO 42967
42949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42950: LD_ADDR_VAR 0 3
42954: PUSH
42955: LD_INT 13
42957: PUSH
42958: LD_INT 14
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: ST_TO_ADDR
42965: GO 43362
42967: LD_INT 29
42969: DOUBLE
42970: EQUAL
42971: IFTRUE 42975
42973: GO 42993
42975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42976: LD_ADDR_VAR 0 3
42980: PUSH
42981: LD_INT 13
42983: PUSH
42984: LD_INT 14
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: ST_TO_ADDR
42991: GO 43362
42993: LD_INT 31
42995: DOUBLE
42996: EQUAL
42997: IFTRUE 43001
42999: GO 43019
43001: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43002: LD_ADDR_VAR 0 3
43006: PUSH
43007: LD_INT 13
43009: PUSH
43010: LD_INT 14
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: ST_TO_ADDR
43017: GO 43362
43019: LD_INT 26
43021: DOUBLE
43022: EQUAL
43023: IFTRUE 43027
43025: GO 43045
43027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43028: LD_ADDR_VAR 0 3
43032: PUSH
43033: LD_INT 13
43035: PUSH
43036: LD_INT 14
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: ST_TO_ADDR
43043: GO 43362
43045: LD_INT 42
43047: DOUBLE
43048: EQUAL
43049: IFTRUE 43053
43051: GO 43079
43053: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43054: LD_ADDR_VAR 0 3
43058: PUSH
43059: LD_INT 21
43061: PUSH
43062: LD_INT 22
43064: PUSH
43065: LD_INT 23
43067: PUSH
43068: LD_INT 24
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: ST_TO_ADDR
43077: GO 43362
43079: LD_INT 43
43081: DOUBLE
43082: EQUAL
43083: IFTRUE 43087
43085: GO 43113
43087: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43088: LD_ADDR_VAR 0 3
43092: PUSH
43093: LD_INT 21
43095: PUSH
43096: LD_INT 22
43098: PUSH
43099: LD_INT 23
43101: PUSH
43102: LD_INT 24
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: ST_TO_ADDR
43111: GO 43362
43113: LD_INT 44
43115: DOUBLE
43116: EQUAL
43117: IFTRUE 43121
43119: GO 43147
43121: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43122: LD_ADDR_VAR 0 3
43126: PUSH
43127: LD_INT 21
43129: PUSH
43130: LD_INT 22
43132: PUSH
43133: LD_INT 23
43135: PUSH
43136: LD_INT 24
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: ST_TO_ADDR
43145: GO 43362
43147: LD_INT 45
43149: DOUBLE
43150: EQUAL
43151: IFTRUE 43155
43153: GO 43181
43155: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43156: LD_ADDR_VAR 0 3
43160: PUSH
43161: LD_INT 21
43163: PUSH
43164: LD_INT 22
43166: PUSH
43167: LD_INT 23
43169: PUSH
43170: LD_INT 24
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: ST_TO_ADDR
43179: GO 43362
43181: LD_INT 49
43183: DOUBLE
43184: EQUAL
43185: IFTRUE 43189
43187: GO 43215
43189: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43190: LD_ADDR_VAR 0 3
43194: PUSH
43195: LD_INT 21
43197: PUSH
43198: LD_INT 22
43200: PUSH
43201: LD_INT 23
43203: PUSH
43204: LD_INT 24
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: ST_TO_ADDR
43213: GO 43362
43215: LD_INT 51
43217: DOUBLE
43218: EQUAL
43219: IFTRUE 43223
43221: GO 43249
43223: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43224: LD_ADDR_VAR 0 3
43228: PUSH
43229: LD_INT 21
43231: PUSH
43232: LD_INT 22
43234: PUSH
43235: LD_INT 23
43237: PUSH
43238: LD_INT 24
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: ST_TO_ADDR
43247: GO 43362
43249: LD_INT 52
43251: DOUBLE
43252: EQUAL
43253: IFTRUE 43257
43255: GO 43283
43257: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43258: LD_ADDR_VAR 0 3
43262: PUSH
43263: LD_INT 21
43265: PUSH
43266: LD_INT 22
43268: PUSH
43269: LD_INT 23
43271: PUSH
43272: LD_INT 24
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: ST_TO_ADDR
43281: GO 43362
43283: LD_INT 53
43285: DOUBLE
43286: EQUAL
43287: IFTRUE 43291
43289: GO 43309
43291: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43292: LD_ADDR_VAR 0 3
43296: PUSH
43297: LD_INT 23
43299: PUSH
43300: LD_INT 24
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: ST_TO_ADDR
43307: GO 43362
43309: LD_INT 46
43311: DOUBLE
43312: EQUAL
43313: IFTRUE 43317
43315: GO 43335
43317: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43318: LD_ADDR_VAR 0 3
43322: PUSH
43323: LD_INT 23
43325: PUSH
43326: LD_INT 24
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: ST_TO_ADDR
43333: GO 43362
43335: LD_INT 47
43337: DOUBLE
43338: EQUAL
43339: IFTRUE 43343
43341: GO 43361
43343: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43344: LD_ADDR_VAR 0 3
43348: PUSH
43349: LD_INT 23
43351: PUSH
43352: LD_INT 24
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: ST_TO_ADDR
43359: GO 43362
43361: POP
// result := ( chassis in result ) ;
43362: LD_ADDR_VAR 0 3
43366: PUSH
43367: LD_VAR 0 1
43371: PUSH
43372: LD_VAR 0 3
43376: IN
43377: ST_TO_ADDR
// end ;
43378: LD_VAR 0 3
43382: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43383: LD_INT 0
43385: PPUSH
43386: PPUSH
43387: PPUSH
43388: PPUSH
43389: PPUSH
43390: PPUSH
43391: PPUSH
// result := array ;
43392: LD_ADDR_VAR 0 5
43396: PUSH
43397: LD_VAR 0 1
43401: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43402: LD_VAR 0 1
43406: NOT
43407: PUSH
43408: LD_VAR 0 2
43412: NOT
43413: OR
43414: PUSH
43415: LD_VAR 0 3
43419: NOT
43420: OR
43421: PUSH
43422: LD_VAR 0 2
43426: PUSH
43427: LD_VAR 0 1
43431: GREATER
43432: OR
43433: PUSH
43434: LD_VAR 0 3
43438: PUSH
43439: LD_VAR 0 1
43443: GREATER
43444: OR
43445: IFFALSE 43449
// exit ;
43447: GO 43745
// if direction then
43449: LD_VAR 0 4
43453: IFFALSE 43517
// begin d := 1 ;
43455: LD_ADDR_VAR 0 9
43459: PUSH
43460: LD_INT 1
43462: ST_TO_ADDR
// if i_from > i_to then
43463: LD_VAR 0 2
43467: PUSH
43468: LD_VAR 0 3
43472: GREATER
43473: IFFALSE 43499
// length := ( array - i_from ) + i_to else
43475: LD_ADDR_VAR 0 11
43479: PUSH
43480: LD_VAR 0 1
43484: PUSH
43485: LD_VAR 0 2
43489: MINUS
43490: PUSH
43491: LD_VAR 0 3
43495: PLUS
43496: ST_TO_ADDR
43497: GO 43515
// length := i_to - i_from ;
43499: LD_ADDR_VAR 0 11
43503: PUSH
43504: LD_VAR 0 3
43508: PUSH
43509: LD_VAR 0 2
43513: MINUS
43514: ST_TO_ADDR
// end else
43515: GO 43578
// begin d := - 1 ;
43517: LD_ADDR_VAR 0 9
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: ST_TO_ADDR
// if i_from > i_to then
43526: LD_VAR 0 2
43530: PUSH
43531: LD_VAR 0 3
43535: GREATER
43536: IFFALSE 43556
// length := i_from - i_to else
43538: LD_ADDR_VAR 0 11
43542: PUSH
43543: LD_VAR 0 2
43547: PUSH
43548: LD_VAR 0 3
43552: MINUS
43553: ST_TO_ADDR
43554: GO 43578
// length := ( array - i_to ) + i_from ;
43556: LD_ADDR_VAR 0 11
43560: PUSH
43561: LD_VAR 0 1
43565: PUSH
43566: LD_VAR 0 3
43570: MINUS
43571: PUSH
43572: LD_VAR 0 2
43576: PLUS
43577: ST_TO_ADDR
// end ; if not length then
43578: LD_VAR 0 11
43582: NOT
43583: IFFALSE 43587
// exit ;
43585: GO 43745
// tmp := array ;
43587: LD_ADDR_VAR 0 10
43591: PUSH
43592: LD_VAR 0 1
43596: ST_TO_ADDR
// for i = 1 to length do
43597: LD_ADDR_VAR 0 6
43601: PUSH
43602: DOUBLE
43603: LD_INT 1
43605: DEC
43606: ST_TO_ADDR
43607: LD_VAR 0 11
43611: PUSH
43612: FOR_TO
43613: IFFALSE 43733
// begin for j = 1 to array do
43615: LD_ADDR_VAR 0 7
43619: PUSH
43620: DOUBLE
43621: LD_INT 1
43623: DEC
43624: ST_TO_ADDR
43625: LD_VAR 0 1
43629: PUSH
43630: FOR_TO
43631: IFFALSE 43719
// begin k := j + d ;
43633: LD_ADDR_VAR 0 8
43637: PUSH
43638: LD_VAR 0 7
43642: PUSH
43643: LD_VAR 0 9
43647: PLUS
43648: ST_TO_ADDR
// if k > array then
43649: LD_VAR 0 8
43653: PUSH
43654: LD_VAR 0 1
43658: GREATER
43659: IFFALSE 43669
// k := 1 ;
43661: LD_ADDR_VAR 0 8
43665: PUSH
43666: LD_INT 1
43668: ST_TO_ADDR
// if not k then
43669: LD_VAR 0 8
43673: NOT
43674: IFFALSE 43686
// k := array ;
43676: LD_ADDR_VAR 0 8
43680: PUSH
43681: LD_VAR 0 1
43685: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43686: LD_ADDR_VAR 0 10
43690: PUSH
43691: LD_VAR 0 10
43695: PPUSH
43696: LD_VAR 0 8
43700: PPUSH
43701: LD_VAR 0 1
43705: PUSH
43706: LD_VAR 0 7
43710: ARRAY
43711: PPUSH
43712: CALL_OW 1
43716: ST_TO_ADDR
// end ;
43717: GO 43630
43719: POP
43720: POP
// array := tmp ;
43721: LD_ADDR_VAR 0 1
43725: PUSH
43726: LD_VAR 0 10
43730: ST_TO_ADDR
// end ;
43731: GO 43612
43733: POP
43734: POP
// result := array ;
43735: LD_ADDR_VAR 0 5
43739: PUSH
43740: LD_VAR 0 1
43744: ST_TO_ADDR
// end ;
43745: LD_VAR 0 5
43749: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43750: LD_INT 0
43752: PPUSH
43753: PPUSH
// result := 0 ;
43754: LD_ADDR_VAR 0 3
43758: PUSH
43759: LD_INT 0
43761: ST_TO_ADDR
// if not array or not value in array then
43762: LD_VAR 0 1
43766: NOT
43767: PUSH
43768: LD_VAR 0 2
43772: PUSH
43773: LD_VAR 0 1
43777: IN
43778: NOT
43779: OR
43780: IFFALSE 43784
// exit ;
43782: GO 43838
// for i = 1 to array do
43784: LD_ADDR_VAR 0 4
43788: PUSH
43789: DOUBLE
43790: LD_INT 1
43792: DEC
43793: ST_TO_ADDR
43794: LD_VAR 0 1
43798: PUSH
43799: FOR_TO
43800: IFFALSE 43836
// if value = array [ i ] then
43802: LD_VAR 0 2
43806: PUSH
43807: LD_VAR 0 1
43811: PUSH
43812: LD_VAR 0 4
43816: ARRAY
43817: EQUAL
43818: IFFALSE 43834
// begin result := i ;
43820: LD_ADDR_VAR 0 3
43824: PUSH
43825: LD_VAR 0 4
43829: ST_TO_ADDR
// exit ;
43830: POP
43831: POP
43832: GO 43838
// end ;
43834: GO 43799
43836: POP
43837: POP
// end ;
43838: LD_VAR 0 3
43842: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43843: LD_INT 0
43845: PPUSH
// vc_chassis := chassis ;
43846: LD_ADDR_OWVAR 37
43850: PUSH
43851: LD_VAR 0 1
43855: ST_TO_ADDR
// vc_engine := engine ;
43856: LD_ADDR_OWVAR 39
43860: PUSH
43861: LD_VAR 0 2
43865: ST_TO_ADDR
// vc_control := control ;
43866: LD_ADDR_OWVAR 38
43870: PUSH
43871: LD_VAR 0 3
43875: ST_TO_ADDR
// vc_weapon := weapon ;
43876: LD_ADDR_OWVAR 40
43880: PUSH
43881: LD_VAR 0 4
43885: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43886: LD_ADDR_OWVAR 41
43890: PUSH
43891: LD_VAR 0 5
43895: ST_TO_ADDR
// end ;
43896: LD_VAR 0 6
43900: RET
// export function WantPlant ( unit ) ; var task ; begin
43901: LD_INT 0
43903: PPUSH
43904: PPUSH
// result := false ;
43905: LD_ADDR_VAR 0 2
43909: PUSH
43910: LD_INT 0
43912: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43913: LD_ADDR_VAR 0 3
43917: PUSH
43918: LD_VAR 0 1
43922: PPUSH
43923: CALL_OW 437
43927: ST_TO_ADDR
// if task then
43928: LD_VAR 0 3
43932: IFFALSE 43960
// if task [ 1 ] [ 1 ] = p then
43934: LD_VAR 0 3
43938: PUSH
43939: LD_INT 1
43941: ARRAY
43942: PUSH
43943: LD_INT 1
43945: ARRAY
43946: PUSH
43947: LD_STRING p
43949: EQUAL
43950: IFFALSE 43960
// result := true ;
43952: LD_ADDR_VAR 0 2
43956: PUSH
43957: LD_INT 1
43959: ST_TO_ADDR
// end ;
43960: LD_VAR 0 2
43964: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43965: LD_INT 0
43967: PPUSH
43968: PPUSH
43969: PPUSH
43970: PPUSH
// if pos < 1 then
43971: LD_VAR 0 2
43975: PUSH
43976: LD_INT 1
43978: LESS
43979: IFFALSE 43983
// exit ;
43981: GO 44286
// if pos = 1 then
43983: LD_VAR 0 2
43987: PUSH
43988: LD_INT 1
43990: EQUAL
43991: IFFALSE 44024
// result := Replace ( arr , pos [ 1 ] , value ) else
43993: LD_ADDR_VAR 0 4
43997: PUSH
43998: LD_VAR 0 1
44002: PPUSH
44003: LD_VAR 0 2
44007: PUSH
44008: LD_INT 1
44010: ARRAY
44011: PPUSH
44012: LD_VAR 0 3
44016: PPUSH
44017: CALL_OW 1
44021: ST_TO_ADDR
44022: GO 44286
// begin tmp := arr ;
44024: LD_ADDR_VAR 0 6
44028: PUSH
44029: LD_VAR 0 1
44033: ST_TO_ADDR
// s_arr := [ tmp ] ;
44034: LD_ADDR_VAR 0 7
44038: PUSH
44039: LD_VAR 0 6
44043: PUSH
44044: EMPTY
44045: LIST
44046: ST_TO_ADDR
// for i = 1 to pos - 1 do
44047: LD_ADDR_VAR 0 5
44051: PUSH
44052: DOUBLE
44053: LD_INT 1
44055: DEC
44056: ST_TO_ADDR
44057: LD_VAR 0 2
44061: PUSH
44062: LD_INT 1
44064: MINUS
44065: PUSH
44066: FOR_TO
44067: IFFALSE 44112
// begin tmp := tmp [ pos [ i ] ] ;
44069: LD_ADDR_VAR 0 6
44073: PUSH
44074: LD_VAR 0 6
44078: PUSH
44079: LD_VAR 0 2
44083: PUSH
44084: LD_VAR 0 5
44088: ARRAY
44089: ARRAY
44090: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44091: LD_ADDR_VAR 0 7
44095: PUSH
44096: LD_VAR 0 7
44100: PUSH
44101: LD_VAR 0 6
44105: PUSH
44106: EMPTY
44107: LIST
44108: ADD
44109: ST_TO_ADDR
// end ;
44110: GO 44066
44112: POP
44113: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44114: LD_ADDR_VAR 0 6
44118: PUSH
44119: LD_VAR 0 6
44123: PPUSH
44124: LD_VAR 0 2
44128: PUSH
44129: LD_VAR 0 2
44133: ARRAY
44134: PPUSH
44135: LD_VAR 0 3
44139: PPUSH
44140: CALL_OW 1
44144: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44145: LD_ADDR_VAR 0 7
44149: PUSH
44150: LD_VAR 0 7
44154: PPUSH
44155: LD_VAR 0 7
44159: PPUSH
44160: LD_VAR 0 6
44164: PPUSH
44165: CALL_OW 1
44169: ST_TO_ADDR
// for i = s_arr downto 2 do
44170: LD_ADDR_VAR 0 5
44174: PUSH
44175: DOUBLE
44176: LD_VAR 0 7
44180: INC
44181: ST_TO_ADDR
44182: LD_INT 2
44184: PUSH
44185: FOR_DOWNTO
44186: IFFALSE 44270
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44188: LD_ADDR_VAR 0 6
44192: PUSH
44193: LD_VAR 0 7
44197: PUSH
44198: LD_VAR 0 5
44202: PUSH
44203: LD_INT 1
44205: MINUS
44206: ARRAY
44207: PPUSH
44208: LD_VAR 0 2
44212: PUSH
44213: LD_VAR 0 5
44217: PUSH
44218: LD_INT 1
44220: MINUS
44221: ARRAY
44222: PPUSH
44223: LD_VAR 0 7
44227: PUSH
44228: LD_VAR 0 5
44232: ARRAY
44233: PPUSH
44234: CALL_OW 1
44238: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44239: LD_ADDR_VAR 0 7
44243: PUSH
44244: LD_VAR 0 7
44248: PPUSH
44249: LD_VAR 0 5
44253: PUSH
44254: LD_INT 1
44256: MINUS
44257: PPUSH
44258: LD_VAR 0 6
44262: PPUSH
44263: CALL_OW 1
44267: ST_TO_ADDR
// end ;
44268: GO 44185
44270: POP
44271: POP
// result := s_arr [ 1 ] ;
44272: LD_ADDR_VAR 0 4
44276: PUSH
44277: LD_VAR 0 7
44281: PUSH
44282: LD_INT 1
44284: ARRAY
44285: ST_TO_ADDR
// end ; end ;
44286: LD_VAR 0 4
44290: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44291: LD_INT 0
44293: PPUSH
44294: PPUSH
// if not list then
44295: LD_VAR 0 1
44299: NOT
44300: IFFALSE 44304
// exit ;
44302: GO 44395
// i := list [ pos1 ] ;
44304: LD_ADDR_VAR 0 5
44308: PUSH
44309: LD_VAR 0 1
44313: PUSH
44314: LD_VAR 0 2
44318: ARRAY
44319: ST_TO_ADDR
// if not i then
44320: LD_VAR 0 5
44324: NOT
44325: IFFALSE 44329
// exit ;
44327: GO 44395
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44329: LD_ADDR_VAR 0 1
44333: PUSH
44334: LD_VAR 0 1
44338: PPUSH
44339: LD_VAR 0 2
44343: PPUSH
44344: LD_VAR 0 1
44348: PUSH
44349: LD_VAR 0 3
44353: ARRAY
44354: PPUSH
44355: CALL_OW 1
44359: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44360: LD_ADDR_VAR 0 1
44364: PUSH
44365: LD_VAR 0 1
44369: PPUSH
44370: LD_VAR 0 3
44374: PPUSH
44375: LD_VAR 0 5
44379: PPUSH
44380: CALL_OW 1
44384: ST_TO_ADDR
// result := list ;
44385: LD_ADDR_VAR 0 4
44389: PUSH
44390: LD_VAR 0 1
44394: ST_TO_ADDR
// end ;
44395: LD_VAR 0 4
44399: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44400: LD_INT 0
44402: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44403: LD_ADDR_VAR 0 5
44407: PUSH
44408: LD_VAR 0 1
44412: PPUSH
44413: CALL_OW 250
44417: PPUSH
44418: LD_VAR 0 1
44422: PPUSH
44423: CALL_OW 251
44427: PPUSH
44428: LD_VAR 0 2
44432: PPUSH
44433: LD_VAR 0 3
44437: PPUSH
44438: LD_VAR 0 4
44442: PPUSH
44443: CALL 44453 0 5
44447: ST_TO_ADDR
// end ;
44448: LD_VAR 0 5
44452: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44453: LD_INT 0
44455: PPUSH
44456: PPUSH
44457: PPUSH
44458: PPUSH
// if not list then
44459: LD_VAR 0 3
44463: NOT
44464: IFFALSE 44468
// exit ;
44466: GO 44856
// result := [ ] ;
44468: LD_ADDR_VAR 0 6
44472: PUSH
44473: EMPTY
44474: ST_TO_ADDR
// for i in list do
44475: LD_ADDR_VAR 0 7
44479: PUSH
44480: LD_VAR 0 3
44484: PUSH
44485: FOR_IN
44486: IFFALSE 44688
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44488: LD_ADDR_VAR 0 9
44492: PUSH
44493: LD_VAR 0 7
44497: PPUSH
44498: LD_VAR 0 1
44502: PPUSH
44503: LD_VAR 0 2
44507: PPUSH
44508: CALL_OW 297
44512: ST_TO_ADDR
// if not result then
44513: LD_VAR 0 6
44517: NOT
44518: IFFALSE 44544
// result := [ [ i , tmp ] ] else
44520: LD_ADDR_VAR 0 6
44524: PUSH
44525: LD_VAR 0 7
44529: PUSH
44530: LD_VAR 0 9
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: EMPTY
44540: LIST
44541: ST_TO_ADDR
44542: GO 44686
// begin if result [ result ] [ 2 ] < tmp then
44544: LD_VAR 0 6
44548: PUSH
44549: LD_VAR 0 6
44553: ARRAY
44554: PUSH
44555: LD_INT 2
44557: ARRAY
44558: PUSH
44559: LD_VAR 0 9
44563: LESS
44564: IFFALSE 44606
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44566: LD_ADDR_VAR 0 6
44570: PUSH
44571: LD_VAR 0 6
44575: PPUSH
44576: LD_VAR 0 6
44580: PUSH
44581: LD_INT 1
44583: PLUS
44584: PPUSH
44585: LD_VAR 0 7
44589: PUSH
44590: LD_VAR 0 9
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PPUSH
44599: CALL_OW 2
44603: ST_TO_ADDR
44604: GO 44686
// for j = 1 to result do
44606: LD_ADDR_VAR 0 8
44610: PUSH
44611: DOUBLE
44612: LD_INT 1
44614: DEC
44615: ST_TO_ADDR
44616: LD_VAR 0 6
44620: PUSH
44621: FOR_TO
44622: IFFALSE 44684
// begin if tmp < result [ j ] [ 2 ] then
44624: LD_VAR 0 9
44628: PUSH
44629: LD_VAR 0 6
44633: PUSH
44634: LD_VAR 0 8
44638: ARRAY
44639: PUSH
44640: LD_INT 2
44642: ARRAY
44643: LESS
44644: IFFALSE 44682
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44646: LD_ADDR_VAR 0 6
44650: PUSH
44651: LD_VAR 0 6
44655: PPUSH
44656: LD_VAR 0 8
44660: PPUSH
44661: LD_VAR 0 7
44665: PUSH
44666: LD_VAR 0 9
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PPUSH
44675: CALL_OW 2
44679: ST_TO_ADDR
// break ;
44680: GO 44684
// end ; end ;
44682: GO 44621
44684: POP
44685: POP
// end ; end ;
44686: GO 44485
44688: POP
44689: POP
// if result and not asc then
44690: LD_VAR 0 6
44694: PUSH
44695: LD_VAR 0 4
44699: NOT
44700: AND
44701: IFFALSE 44776
// begin tmp := result ;
44703: LD_ADDR_VAR 0 9
44707: PUSH
44708: LD_VAR 0 6
44712: ST_TO_ADDR
// for i = tmp downto 1 do
44713: LD_ADDR_VAR 0 7
44717: PUSH
44718: DOUBLE
44719: LD_VAR 0 9
44723: INC
44724: ST_TO_ADDR
44725: LD_INT 1
44727: PUSH
44728: FOR_DOWNTO
44729: IFFALSE 44774
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44731: LD_ADDR_VAR 0 6
44735: PUSH
44736: LD_VAR 0 6
44740: PPUSH
44741: LD_VAR 0 9
44745: PUSH
44746: LD_VAR 0 7
44750: MINUS
44751: PUSH
44752: LD_INT 1
44754: PLUS
44755: PPUSH
44756: LD_VAR 0 9
44760: PUSH
44761: LD_VAR 0 7
44765: ARRAY
44766: PPUSH
44767: CALL_OW 1
44771: ST_TO_ADDR
44772: GO 44728
44774: POP
44775: POP
// end ; tmp := [ ] ;
44776: LD_ADDR_VAR 0 9
44780: PUSH
44781: EMPTY
44782: ST_TO_ADDR
// if mode then
44783: LD_VAR 0 5
44787: IFFALSE 44856
// begin for i = 1 to result do
44789: LD_ADDR_VAR 0 7
44793: PUSH
44794: DOUBLE
44795: LD_INT 1
44797: DEC
44798: ST_TO_ADDR
44799: LD_VAR 0 6
44803: PUSH
44804: FOR_TO
44805: IFFALSE 44844
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44807: LD_ADDR_VAR 0 9
44811: PUSH
44812: LD_VAR 0 9
44816: PPUSH
44817: LD_VAR 0 7
44821: PPUSH
44822: LD_VAR 0 6
44826: PUSH
44827: LD_VAR 0 7
44831: ARRAY
44832: PUSH
44833: LD_INT 1
44835: ARRAY
44836: PPUSH
44837: CALL_OW 1
44841: ST_TO_ADDR
44842: GO 44804
44844: POP
44845: POP
// result := tmp ;
44846: LD_ADDR_VAR 0 6
44850: PUSH
44851: LD_VAR 0 9
44855: ST_TO_ADDR
// end ; end ;
44856: LD_VAR 0 6
44860: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44861: LD_INT 0
44863: PPUSH
44864: PPUSH
44865: PPUSH
44866: PPUSH
44867: PPUSH
44868: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44869: LD_ADDR_VAR 0 5
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: ST_TO_ADDR
// if not x or not y then
44891: LD_VAR 0 2
44895: NOT
44896: PUSH
44897: LD_VAR 0 3
44901: NOT
44902: OR
44903: IFFALSE 44907
// exit ;
44905: GO 46557
// if not range then
44907: LD_VAR 0 4
44911: NOT
44912: IFFALSE 44922
// range := 10 ;
44914: LD_ADDR_VAR 0 4
44918: PUSH
44919: LD_INT 10
44921: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44922: LD_ADDR_VAR 0 8
44926: PUSH
44927: LD_INT 81
44929: PUSH
44930: LD_VAR 0 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 92
44941: PUSH
44942: LD_VAR 0 2
44946: PUSH
44947: LD_VAR 0 3
44951: PUSH
44952: LD_VAR 0 4
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 3
44965: PUSH
44966: LD_INT 21
44968: PUSH
44969: LD_INT 3
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: LIST
44984: PPUSH
44985: CALL_OW 69
44989: ST_TO_ADDR
// if not tmp then
44990: LD_VAR 0 8
44994: NOT
44995: IFFALSE 44999
// exit ;
44997: GO 46557
// for i in tmp do
44999: LD_ADDR_VAR 0 6
45003: PUSH
45004: LD_VAR 0 8
45008: PUSH
45009: FOR_IN
45010: IFFALSE 46532
// begin points := [ 0 , 0 , 0 ] ;
45012: LD_ADDR_VAR 0 9
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: LIST
45030: ST_TO_ADDR
// bpoints := 1 ;
45031: LD_ADDR_VAR 0 10
45035: PUSH
45036: LD_INT 1
45038: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45039: LD_VAR 0 6
45043: PPUSH
45044: CALL_OW 247
45048: PUSH
45049: LD_INT 1
45051: DOUBLE
45052: EQUAL
45053: IFTRUE 45057
45055: GO 45635
45057: POP
// begin if GetClass ( i ) = 1 then
45058: LD_VAR 0 6
45062: PPUSH
45063: CALL_OW 257
45067: PUSH
45068: LD_INT 1
45070: EQUAL
45071: IFFALSE 45092
// points := [ 10 , 5 , 3 ] ;
45073: LD_ADDR_VAR 0 9
45077: PUSH
45078: LD_INT 10
45080: PUSH
45081: LD_INT 5
45083: PUSH
45084: LD_INT 3
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45092: LD_VAR 0 6
45096: PPUSH
45097: CALL_OW 257
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: LD_INT 3
45107: PUSH
45108: LD_INT 4
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: LIST
45115: IN
45116: IFFALSE 45137
// points := [ 3 , 2 , 1 ] ;
45118: LD_ADDR_VAR 0 9
45122: PUSH
45123: LD_INT 3
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: LIST
45136: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45137: LD_VAR 0 6
45141: PPUSH
45142: CALL_OW 257
45146: PUSH
45147: LD_INT 5
45149: EQUAL
45150: IFFALSE 45171
// points := [ 130 , 5 , 2 ] ;
45152: LD_ADDR_VAR 0 9
45156: PUSH
45157: LD_INT 130
45159: PUSH
45160: LD_INT 5
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: LIST
45170: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45171: LD_VAR 0 6
45175: PPUSH
45176: CALL_OW 257
45180: PUSH
45181: LD_INT 8
45183: EQUAL
45184: IFFALSE 45205
// points := [ 35 , 35 , 30 ] ;
45186: LD_ADDR_VAR 0 9
45190: PUSH
45191: LD_INT 35
45193: PUSH
45194: LD_INT 35
45196: PUSH
45197: LD_INT 30
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: LIST
45204: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45205: LD_VAR 0 6
45209: PPUSH
45210: CALL_OW 257
45214: PUSH
45215: LD_INT 9
45217: EQUAL
45218: IFFALSE 45239
// points := [ 20 , 55 , 40 ] ;
45220: LD_ADDR_VAR 0 9
45224: PUSH
45225: LD_INT 20
45227: PUSH
45228: LD_INT 55
45230: PUSH
45231: LD_INT 40
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: LIST
45238: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45239: LD_VAR 0 6
45243: PPUSH
45244: CALL_OW 257
45248: PUSH
45249: LD_INT 12
45251: PUSH
45252: LD_INT 16
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: IN
45259: IFFALSE 45280
// points := [ 5 , 3 , 2 ] ;
45261: LD_ADDR_VAR 0 9
45265: PUSH
45266: LD_INT 5
45268: PUSH
45269: LD_INT 3
45271: PUSH
45272: LD_INT 2
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: LIST
45279: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45280: LD_VAR 0 6
45284: PPUSH
45285: CALL_OW 257
45289: PUSH
45290: LD_INT 17
45292: EQUAL
45293: IFFALSE 45314
// points := [ 100 , 50 , 75 ] ;
45295: LD_ADDR_VAR 0 9
45299: PUSH
45300: LD_INT 100
45302: PUSH
45303: LD_INT 50
45305: PUSH
45306: LD_INT 75
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45314: LD_VAR 0 6
45318: PPUSH
45319: CALL_OW 257
45323: PUSH
45324: LD_INT 15
45326: EQUAL
45327: IFFALSE 45348
// points := [ 10 , 5 , 3 ] ;
45329: LD_ADDR_VAR 0 9
45333: PUSH
45334: LD_INT 10
45336: PUSH
45337: LD_INT 5
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45348: LD_VAR 0 6
45352: PPUSH
45353: CALL_OW 257
45357: PUSH
45358: LD_INT 14
45360: EQUAL
45361: IFFALSE 45382
// points := [ 10 , 0 , 0 ] ;
45363: LD_ADDR_VAR 0 9
45367: PUSH
45368: LD_INT 10
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: LIST
45381: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45382: LD_VAR 0 6
45386: PPUSH
45387: CALL_OW 257
45391: PUSH
45392: LD_INT 11
45394: EQUAL
45395: IFFALSE 45416
// points := [ 30 , 10 , 5 ] ;
45397: LD_ADDR_VAR 0 9
45401: PUSH
45402: LD_INT 30
45404: PUSH
45405: LD_INT 10
45407: PUSH
45408: LD_INT 5
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: LIST
45415: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45416: LD_VAR 0 1
45420: PPUSH
45421: LD_INT 5
45423: PPUSH
45424: CALL_OW 321
45428: PUSH
45429: LD_INT 2
45431: EQUAL
45432: IFFALSE 45449
// bpoints := bpoints * 1.8 ;
45434: LD_ADDR_VAR 0 10
45438: PUSH
45439: LD_VAR 0 10
45443: PUSH
45444: LD_REAL  1.80000000000000E+0000
45447: MUL
45448: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45449: LD_VAR 0 6
45453: PPUSH
45454: CALL_OW 257
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: LD_INT 3
45467: PUSH
45468: LD_INT 4
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: IN
45477: PUSH
45478: LD_VAR 0 1
45482: PPUSH
45483: LD_INT 51
45485: PPUSH
45486: CALL_OW 321
45490: PUSH
45491: LD_INT 2
45493: EQUAL
45494: AND
45495: IFFALSE 45512
// bpoints := bpoints * 1.2 ;
45497: LD_ADDR_VAR 0 10
45501: PUSH
45502: LD_VAR 0 10
45506: PUSH
45507: LD_REAL  1.20000000000000E+0000
45510: MUL
45511: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45512: LD_VAR 0 6
45516: PPUSH
45517: CALL_OW 257
45521: PUSH
45522: LD_INT 5
45524: PUSH
45525: LD_INT 7
45527: PUSH
45528: LD_INT 9
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: LIST
45535: IN
45536: PUSH
45537: LD_VAR 0 1
45541: PPUSH
45542: LD_INT 52
45544: PPUSH
45545: CALL_OW 321
45549: PUSH
45550: LD_INT 2
45552: EQUAL
45553: AND
45554: IFFALSE 45571
// bpoints := bpoints * 1.5 ;
45556: LD_ADDR_VAR 0 10
45560: PUSH
45561: LD_VAR 0 10
45565: PUSH
45566: LD_REAL  1.50000000000000E+0000
45569: MUL
45570: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45571: LD_VAR 0 1
45575: PPUSH
45576: LD_INT 66
45578: PPUSH
45579: CALL_OW 321
45583: PUSH
45584: LD_INT 2
45586: EQUAL
45587: IFFALSE 45604
// bpoints := bpoints * 1.1 ;
45589: LD_ADDR_VAR 0 10
45593: PUSH
45594: LD_VAR 0 10
45598: PUSH
45599: LD_REAL  1.10000000000000E+0000
45602: MUL
45603: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45604: LD_ADDR_VAR 0 10
45608: PUSH
45609: LD_VAR 0 10
45613: PUSH
45614: LD_VAR 0 6
45618: PPUSH
45619: LD_INT 1
45621: PPUSH
45622: CALL_OW 259
45626: PUSH
45627: LD_REAL  1.15000000000000E+0000
45630: MUL
45631: MUL
45632: ST_TO_ADDR
// end ; unit_vehicle :
45633: GO 46461
45635: LD_INT 2
45637: DOUBLE
45638: EQUAL
45639: IFTRUE 45643
45641: GO 46449
45643: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45644: LD_VAR 0 6
45648: PPUSH
45649: CALL_OW 264
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: LD_INT 42
45659: PUSH
45660: LD_INT 24
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: LIST
45667: IN
45668: IFFALSE 45689
// points := [ 25 , 5 , 3 ] ;
45670: LD_ADDR_VAR 0 9
45674: PUSH
45675: LD_INT 25
45677: PUSH
45678: LD_INT 5
45680: PUSH
45681: LD_INT 3
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: LIST
45688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45689: LD_VAR 0 6
45693: PPUSH
45694: CALL_OW 264
45698: PUSH
45699: LD_INT 4
45701: PUSH
45702: LD_INT 43
45704: PUSH
45705: LD_INT 25
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: IN
45713: IFFALSE 45734
// points := [ 40 , 15 , 5 ] ;
45715: LD_ADDR_VAR 0 9
45719: PUSH
45720: LD_INT 40
45722: PUSH
45723: LD_INT 15
45725: PUSH
45726: LD_INT 5
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: LIST
45733: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45734: LD_VAR 0 6
45738: PPUSH
45739: CALL_OW 264
45743: PUSH
45744: LD_INT 3
45746: PUSH
45747: LD_INT 23
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: IN
45754: IFFALSE 45775
// points := [ 7 , 25 , 8 ] ;
45756: LD_ADDR_VAR 0 9
45760: PUSH
45761: LD_INT 7
45763: PUSH
45764: LD_INT 25
45766: PUSH
45767: LD_INT 8
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: LIST
45774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45775: LD_VAR 0 6
45779: PPUSH
45780: CALL_OW 264
45784: PUSH
45785: LD_INT 5
45787: PUSH
45788: LD_INT 27
45790: PUSH
45791: LD_INT 44
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: LIST
45798: IN
45799: IFFALSE 45820
// points := [ 14 , 50 , 16 ] ;
45801: LD_ADDR_VAR 0 9
45805: PUSH
45806: LD_INT 14
45808: PUSH
45809: LD_INT 50
45811: PUSH
45812: LD_INT 16
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: LIST
45819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45820: LD_VAR 0 6
45824: PPUSH
45825: CALL_OW 264
45829: PUSH
45830: LD_INT 6
45832: PUSH
45833: LD_INT 46
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: IN
45840: IFFALSE 45861
// points := [ 32 , 120 , 70 ] ;
45842: LD_ADDR_VAR 0 9
45846: PUSH
45847: LD_INT 32
45849: PUSH
45850: LD_INT 120
45852: PUSH
45853: LD_INT 70
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: LIST
45860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45861: LD_VAR 0 6
45865: PPUSH
45866: CALL_OW 264
45870: PUSH
45871: LD_INT 7
45873: PUSH
45874: LD_INT 28
45876: PUSH
45877: LD_INT 45
45879: PUSH
45880: LD_INT 92
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: IN
45889: IFFALSE 45910
// points := [ 35 , 20 , 45 ] ;
45891: LD_ADDR_VAR 0 9
45895: PUSH
45896: LD_INT 35
45898: PUSH
45899: LD_INT 20
45901: PUSH
45902: LD_INT 45
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: LIST
45909: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45910: LD_VAR 0 6
45914: PPUSH
45915: CALL_OW 264
45919: PUSH
45920: LD_INT 47
45922: PUSH
45923: EMPTY
45924: LIST
45925: IN
45926: IFFALSE 45947
// points := [ 67 , 45 , 75 ] ;
45928: LD_ADDR_VAR 0 9
45932: PUSH
45933: LD_INT 67
45935: PUSH
45936: LD_INT 45
45938: PUSH
45939: LD_INT 75
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: LIST
45946: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45947: LD_VAR 0 6
45951: PPUSH
45952: CALL_OW 264
45956: PUSH
45957: LD_INT 26
45959: PUSH
45960: EMPTY
45961: LIST
45962: IN
45963: IFFALSE 45984
// points := [ 120 , 30 , 80 ] ;
45965: LD_ADDR_VAR 0 9
45969: PUSH
45970: LD_INT 120
45972: PUSH
45973: LD_INT 30
45975: PUSH
45976: LD_INT 80
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: LIST
45983: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45984: LD_VAR 0 6
45988: PPUSH
45989: CALL_OW 264
45993: PUSH
45994: LD_INT 22
45996: PUSH
45997: EMPTY
45998: LIST
45999: IN
46000: IFFALSE 46021
// points := [ 40 , 1 , 1 ] ;
46002: LD_ADDR_VAR 0 9
46006: PUSH
46007: LD_INT 40
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: LIST
46020: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46021: LD_VAR 0 6
46025: PPUSH
46026: CALL_OW 264
46030: PUSH
46031: LD_INT 29
46033: PUSH
46034: EMPTY
46035: LIST
46036: IN
46037: IFFALSE 46058
// points := [ 70 , 200 , 400 ] ;
46039: LD_ADDR_VAR 0 9
46043: PUSH
46044: LD_INT 70
46046: PUSH
46047: LD_INT 200
46049: PUSH
46050: LD_INT 400
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: LIST
46057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46058: LD_VAR 0 6
46062: PPUSH
46063: CALL_OW 264
46067: PUSH
46068: LD_INT 14
46070: PUSH
46071: LD_INT 53
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: IN
46078: IFFALSE 46099
// points := [ 40 , 10 , 20 ] ;
46080: LD_ADDR_VAR 0 9
46084: PUSH
46085: LD_INT 40
46087: PUSH
46088: LD_INT 10
46090: PUSH
46091: LD_INT 20
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: LIST
46098: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46099: LD_VAR 0 6
46103: PPUSH
46104: CALL_OW 264
46108: PUSH
46109: LD_INT 9
46111: PUSH
46112: EMPTY
46113: LIST
46114: IN
46115: IFFALSE 46136
// points := [ 5 , 70 , 20 ] ;
46117: LD_ADDR_VAR 0 9
46121: PUSH
46122: LD_INT 5
46124: PUSH
46125: LD_INT 70
46127: PUSH
46128: LD_INT 20
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: LIST
46135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46136: LD_VAR 0 6
46140: PPUSH
46141: CALL_OW 264
46145: PUSH
46146: LD_INT 10
46148: PUSH
46149: EMPTY
46150: LIST
46151: IN
46152: IFFALSE 46173
// points := [ 35 , 110 , 70 ] ;
46154: LD_ADDR_VAR 0 9
46158: PUSH
46159: LD_INT 35
46161: PUSH
46162: LD_INT 110
46164: PUSH
46165: LD_INT 70
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: LIST
46172: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46173: LD_VAR 0 6
46177: PPUSH
46178: CALL_OW 265
46182: PUSH
46183: LD_INT 25
46185: EQUAL
46186: IFFALSE 46207
// points := [ 80 , 65 , 100 ] ;
46188: LD_ADDR_VAR 0 9
46192: PUSH
46193: LD_INT 80
46195: PUSH
46196: LD_INT 65
46198: PUSH
46199: LD_INT 100
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: LIST
46206: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46207: LD_VAR 0 6
46211: PPUSH
46212: CALL_OW 263
46216: PUSH
46217: LD_INT 1
46219: EQUAL
46220: IFFALSE 46255
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46222: LD_ADDR_VAR 0 10
46226: PUSH
46227: LD_VAR 0 10
46231: PUSH
46232: LD_VAR 0 6
46236: PPUSH
46237: CALL_OW 311
46241: PPUSH
46242: LD_INT 3
46244: PPUSH
46245: CALL_OW 259
46249: PUSH
46250: LD_INT 4
46252: MUL
46253: MUL
46254: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46255: LD_VAR 0 6
46259: PPUSH
46260: CALL_OW 263
46264: PUSH
46265: LD_INT 2
46267: EQUAL
46268: IFFALSE 46319
// begin j := IsControledBy ( i ) ;
46270: LD_ADDR_VAR 0 7
46274: PUSH
46275: LD_VAR 0 6
46279: PPUSH
46280: CALL_OW 312
46284: ST_TO_ADDR
// if j then
46285: LD_VAR 0 7
46289: IFFALSE 46319
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46291: LD_ADDR_VAR 0 10
46295: PUSH
46296: LD_VAR 0 10
46300: PUSH
46301: LD_VAR 0 7
46305: PPUSH
46306: LD_INT 3
46308: PPUSH
46309: CALL_OW 259
46313: PUSH
46314: LD_INT 3
46316: MUL
46317: MUL
46318: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46319: LD_VAR 0 6
46323: PPUSH
46324: CALL_OW 264
46328: PUSH
46329: LD_INT 5
46331: PUSH
46332: LD_INT 6
46334: PUSH
46335: LD_INT 46
46337: PUSH
46338: LD_INT 44
46340: PUSH
46341: LD_INT 47
46343: PUSH
46344: LD_INT 45
46346: PUSH
46347: LD_INT 28
46349: PUSH
46350: LD_INT 7
46352: PUSH
46353: LD_INT 27
46355: PUSH
46356: LD_INT 29
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: IN
46371: PUSH
46372: LD_VAR 0 1
46376: PPUSH
46377: LD_INT 52
46379: PPUSH
46380: CALL_OW 321
46384: PUSH
46385: LD_INT 2
46387: EQUAL
46388: AND
46389: IFFALSE 46406
// bpoints := bpoints * 1.2 ;
46391: LD_ADDR_VAR 0 10
46395: PUSH
46396: LD_VAR 0 10
46400: PUSH
46401: LD_REAL  1.20000000000000E+0000
46404: MUL
46405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46406: LD_VAR 0 6
46410: PPUSH
46411: CALL_OW 264
46415: PUSH
46416: LD_INT 6
46418: PUSH
46419: LD_INT 46
46421: PUSH
46422: LD_INT 47
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: LIST
46429: IN
46430: IFFALSE 46447
// bpoints := bpoints * 1.2 ;
46432: LD_ADDR_VAR 0 10
46436: PUSH
46437: LD_VAR 0 10
46441: PUSH
46442: LD_REAL  1.20000000000000E+0000
46445: MUL
46446: ST_TO_ADDR
// end ; unit_building :
46447: GO 46461
46449: LD_INT 3
46451: DOUBLE
46452: EQUAL
46453: IFTRUE 46457
46455: GO 46460
46457: POP
// ; end ;
46458: GO 46461
46460: POP
// for j = 1 to 3 do
46461: LD_ADDR_VAR 0 7
46465: PUSH
46466: DOUBLE
46467: LD_INT 1
46469: DEC
46470: ST_TO_ADDR
46471: LD_INT 3
46473: PUSH
46474: FOR_TO
46475: IFFALSE 46528
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46477: LD_ADDR_VAR 0 5
46481: PUSH
46482: LD_VAR 0 5
46486: PPUSH
46487: LD_VAR 0 7
46491: PPUSH
46492: LD_VAR 0 5
46496: PUSH
46497: LD_VAR 0 7
46501: ARRAY
46502: PUSH
46503: LD_VAR 0 9
46507: PUSH
46508: LD_VAR 0 7
46512: ARRAY
46513: PUSH
46514: LD_VAR 0 10
46518: MUL
46519: PLUS
46520: PPUSH
46521: CALL_OW 1
46525: ST_TO_ADDR
46526: GO 46474
46528: POP
46529: POP
// end ;
46530: GO 45009
46532: POP
46533: POP
// result := Replace ( result , 4 , tmp ) ;
46534: LD_ADDR_VAR 0 5
46538: PUSH
46539: LD_VAR 0 5
46543: PPUSH
46544: LD_INT 4
46546: PPUSH
46547: LD_VAR 0 8
46551: PPUSH
46552: CALL_OW 1
46556: ST_TO_ADDR
// end ;
46557: LD_VAR 0 5
46561: RET
// export function DangerAtRange ( unit , range ) ; begin
46562: LD_INT 0
46564: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46565: LD_ADDR_VAR 0 3
46569: PUSH
46570: LD_VAR 0 1
46574: PPUSH
46575: CALL_OW 255
46579: PPUSH
46580: LD_VAR 0 1
46584: PPUSH
46585: CALL_OW 250
46589: PPUSH
46590: LD_VAR 0 1
46594: PPUSH
46595: CALL_OW 251
46599: PPUSH
46600: LD_VAR 0 2
46604: PPUSH
46605: CALL 44861 0 4
46609: ST_TO_ADDR
// end ;
46610: LD_VAR 0 3
46614: RET
// export function DangerInArea ( side , area ) ; begin
46615: LD_INT 0
46617: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46618: LD_ADDR_VAR 0 3
46622: PUSH
46623: LD_VAR 0 2
46627: PPUSH
46628: LD_INT 81
46630: PUSH
46631: LD_VAR 0 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PPUSH
46640: CALL_OW 70
46644: ST_TO_ADDR
// end ;
46645: LD_VAR 0 3
46649: RET
// export function IsExtension ( b ) ; begin
46650: LD_INT 0
46652: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46653: LD_ADDR_VAR 0 2
46657: PUSH
46658: LD_VAR 0 1
46662: PUSH
46663: LD_INT 23
46665: PUSH
46666: LD_INT 20
46668: PUSH
46669: LD_INT 22
46671: PUSH
46672: LD_INT 17
46674: PUSH
46675: LD_INT 24
46677: PUSH
46678: LD_INT 21
46680: PUSH
46681: LD_INT 19
46683: PUSH
46684: LD_INT 16
46686: PUSH
46687: LD_INT 25
46689: PUSH
46690: LD_INT 18
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: IN
46705: ST_TO_ADDR
// end ;
46706: LD_VAR 0 2
46710: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46711: LD_INT 0
46713: PPUSH
46714: PPUSH
46715: PPUSH
// result := [ ] ;
46716: LD_ADDR_VAR 0 4
46720: PUSH
46721: EMPTY
46722: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46723: LD_ADDR_VAR 0 5
46727: PUSH
46728: LD_VAR 0 2
46732: PPUSH
46733: LD_INT 21
46735: PUSH
46736: LD_INT 3
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PPUSH
46743: CALL_OW 70
46747: ST_TO_ADDR
// if not tmp then
46748: LD_VAR 0 5
46752: NOT
46753: IFFALSE 46757
// exit ;
46755: GO 46821
// if checkLink then
46757: LD_VAR 0 3
46761: IFFALSE 46811
// begin for i in tmp do
46763: LD_ADDR_VAR 0 6
46767: PUSH
46768: LD_VAR 0 5
46772: PUSH
46773: FOR_IN
46774: IFFALSE 46809
// if GetBase ( i ) <> base then
46776: LD_VAR 0 6
46780: PPUSH
46781: CALL_OW 274
46785: PUSH
46786: LD_VAR 0 1
46790: NONEQUAL
46791: IFFALSE 46807
// ComLinkToBase ( base , i ) ;
46793: LD_VAR 0 1
46797: PPUSH
46798: LD_VAR 0 6
46802: PPUSH
46803: CALL_OW 169
46807: GO 46773
46809: POP
46810: POP
// end ; result := tmp ;
46811: LD_ADDR_VAR 0 4
46815: PUSH
46816: LD_VAR 0 5
46820: ST_TO_ADDR
// end ;
46821: LD_VAR 0 4
46825: RET
// export function ComComplete ( units , b ) ; var i ; begin
46826: LD_INT 0
46828: PPUSH
46829: PPUSH
// if not units then
46830: LD_VAR 0 1
46834: NOT
46835: IFFALSE 46839
// exit ;
46837: GO 46929
// for i in units do
46839: LD_ADDR_VAR 0 4
46843: PUSH
46844: LD_VAR 0 1
46848: PUSH
46849: FOR_IN
46850: IFFALSE 46927
// if BuildingStatus ( b ) = bs_build then
46852: LD_VAR 0 2
46856: PPUSH
46857: CALL_OW 461
46861: PUSH
46862: LD_INT 1
46864: EQUAL
46865: IFFALSE 46925
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46867: LD_VAR 0 4
46871: PPUSH
46872: LD_STRING h
46874: PUSH
46875: LD_VAR 0 2
46879: PPUSH
46880: CALL_OW 250
46884: PUSH
46885: LD_VAR 0 2
46889: PPUSH
46890: CALL_OW 251
46894: PUSH
46895: LD_VAR 0 2
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: PUSH
46918: EMPTY
46919: LIST
46920: PPUSH
46921: CALL_OW 446
46925: GO 46849
46927: POP
46928: POP
// end ;
46929: LD_VAR 0 3
46933: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46934: LD_INT 0
46936: PPUSH
46937: PPUSH
46938: PPUSH
46939: PPUSH
46940: PPUSH
46941: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46942: LD_VAR 0 1
46946: NOT
46947: PUSH
46948: LD_VAR 0 1
46952: PPUSH
46953: CALL_OW 263
46957: PUSH
46958: LD_INT 2
46960: NONEQUAL
46961: OR
46962: IFFALSE 46966
// exit ;
46964: GO 47282
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46966: LD_ADDR_VAR 0 6
46970: PUSH
46971: LD_INT 22
46973: PUSH
46974: LD_VAR 0 1
46978: PPUSH
46979: CALL_OW 255
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: LD_INT 30
46993: PUSH
46994: LD_INT 36
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 34
47003: PUSH
47004: LD_INT 31
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: LIST
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PPUSH
47020: CALL_OW 69
47024: ST_TO_ADDR
// if not tmp then
47025: LD_VAR 0 6
47029: NOT
47030: IFFALSE 47034
// exit ;
47032: GO 47282
// result := [ ] ;
47034: LD_ADDR_VAR 0 2
47038: PUSH
47039: EMPTY
47040: ST_TO_ADDR
// for i in tmp do
47041: LD_ADDR_VAR 0 3
47045: PUSH
47046: LD_VAR 0 6
47050: PUSH
47051: FOR_IN
47052: IFFALSE 47123
// begin t := UnitsInside ( i ) ;
47054: LD_ADDR_VAR 0 4
47058: PUSH
47059: LD_VAR 0 3
47063: PPUSH
47064: CALL_OW 313
47068: ST_TO_ADDR
// if t then
47069: LD_VAR 0 4
47073: IFFALSE 47121
// for j in t do
47075: LD_ADDR_VAR 0 7
47079: PUSH
47080: LD_VAR 0 4
47084: PUSH
47085: FOR_IN
47086: IFFALSE 47119
// result := Replace ( result , result + 1 , j ) ;
47088: LD_ADDR_VAR 0 2
47092: PUSH
47093: LD_VAR 0 2
47097: PPUSH
47098: LD_VAR 0 2
47102: PUSH
47103: LD_INT 1
47105: PLUS
47106: PPUSH
47107: LD_VAR 0 7
47111: PPUSH
47112: CALL_OW 1
47116: ST_TO_ADDR
47117: GO 47085
47119: POP
47120: POP
// end ;
47121: GO 47051
47123: POP
47124: POP
// if not result then
47125: LD_VAR 0 2
47129: NOT
47130: IFFALSE 47134
// exit ;
47132: GO 47282
// mech := result [ 1 ] ;
47134: LD_ADDR_VAR 0 5
47138: PUSH
47139: LD_VAR 0 2
47143: PUSH
47144: LD_INT 1
47146: ARRAY
47147: ST_TO_ADDR
// if result > 1 then
47148: LD_VAR 0 2
47152: PUSH
47153: LD_INT 1
47155: GREATER
47156: IFFALSE 47268
// begin for i = 2 to result do
47158: LD_ADDR_VAR 0 3
47162: PUSH
47163: DOUBLE
47164: LD_INT 2
47166: DEC
47167: ST_TO_ADDR
47168: LD_VAR 0 2
47172: PUSH
47173: FOR_TO
47174: IFFALSE 47266
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47176: LD_ADDR_VAR 0 4
47180: PUSH
47181: LD_VAR 0 2
47185: PUSH
47186: LD_VAR 0 3
47190: ARRAY
47191: PPUSH
47192: LD_INT 3
47194: PPUSH
47195: CALL_OW 259
47199: PUSH
47200: LD_VAR 0 2
47204: PUSH
47205: LD_VAR 0 3
47209: ARRAY
47210: PPUSH
47211: CALL_OW 432
47215: MINUS
47216: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47217: LD_VAR 0 4
47221: PUSH
47222: LD_VAR 0 5
47226: PPUSH
47227: LD_INT 3
47229: PPUSH
47230: CALL_OW 259
47234: PUSH
47235: LD_VAR 0 5
47239: PPUSH
47240: CALL_OW 432
47244: MINUS
47245: GREATEREQUAL
47246: IFFALSE 47264
// mech := result [ i ] ;
47248: LD_ADDR_VAR 0 5
47252: PUSH
47253: LD_VAR 0 2
47257: PUSH
47258: LD_VAR 0 3
47262: ARRAY
47263: ST_TO_ADDR
// end ;
47264: GO 47173
47266: POP
47267: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47268: LD_VAR 0 1
47272: PPUSH
47273: LD_VAR 0 5
47277: PPUSH
47278: CALL_OW 135
// end ;
47282: LD_VAR 0 2
47286: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47287: LD_INT 0
47289: PPUSH
47290: PPUSH
47291: PPUSH
47292: PPUSH
47293: PPUSH
47294: PPUSH
47295: PPUSH
47296: PPUSH
47297: PPUSH
47298: PPUSH
47299: PPUSH
47300: PPUSH
47301: PPUSH
// result := [ ] ;
47302: LD_ADDR_VAR 0 7
47306: PUSH
47307: EMPTY
47308: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47309: LD_VAR 0 1
47313: PPUSH
47314: CALL_OW 266
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: IN
47329: NOT
47330: IFFALSE 47334
// exit ;
47332: GO 48968
// if name then
47334: LD_VAR 0 3
47338: IFFALSE 47354
// SetBName ( base_dep , name ) ;
47340: LD_VAR 0 1
47344: PPUSH
47345: LD_VAR 0 3
47349: PPUSH
47350: CALL_OW 500
// base := GetBase ( base_dep ) ;
47354: LD_ADDR_VAR 0 15
47358: PUSH
47359: LD_VAR 0 1
47363: PPUSH
47364: CALL_OW 274
47368: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47369: LD_ADDR_VAR 0 16
47373: PUSH
47374: LD_VAR 0 1
47378: PPUSH
47379: CALL_OW 255
47383: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47384: LD_ADDR_VAR 0 17
47388: PUSH
47389: LD_VAR 0 1
47393: PPUSH
47394: CALL_OW 248
47398: ST_TO_ADDR
// if sources then
47399: LD_VAR 0 5
47403: IFFALSE 47450
// for i = 1 to 3 do
47405: LD_ADDR_VAR 0 8
47409: PUSH
47410: DOUBLE
47411: LD_INT 1
47413: DEC
47414: ST_TO_ADDR
47415: LD_INT 3
47417: PUSH
47418: FOR_TO
47419: IFFALSE 47448
// AddResourceType ( base , i , sources [ i ] ) ;
47421: LD_VAR 0 15
47425: PPUSH
47426: LD_VAR 0 8
47430: PPUSH
47431: LD_VAR 0 5
47435: PUSH
47436: LD_VAR 0 8
47440: ARRAY
47441: PPUSH
47442: CALL_OW 276
47446: GO 47418
47448: POP
47449: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47450: LD_ADDR_VAR 0 18
47454: PUSH
47455: LD_VAR 0 15
47459: PPUSH
47460: LD_VAR 0 2
47464: PPUSH
47465: LD_INT 1
47467: PPUSH
47468: CALL 46711 0 3
47472: ST_TO_ADDR
// InitHc ;
47473: CALL_OW 19
// InitUc ;
47477: CALL_OW 18
// uc_side := side ;
47481: LD_ADDR_OWVAR 20
47485: PUSH
47486: LD_VAR 0 16
47490: ST_TO_ADDR
// uc_nation := nation ;
47491: LD_ADDR_OWVAR 21
47495: PUSH
47496: LD_VAR 0 17
47500: ST_TO_ADDR
// if buildings then
47501: LD_VAR 0 18
47505: IFFALSE 48827
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47507: LD_ADDR_VAR 0 19
47511: PUSH
47512: LD_VAR 0 18
47516: PPUSH
47517: LD_INT 2
47519: PUSH
47520: LD_INT 30
47522: PUSH
47523: LD_INT 29
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 30
47532: PUSH
47533: LD_INT 30
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: PPUSH
47545: CALL_OW 72
47549: ST_TO_ADDR
// if tmp then
47550: LD_VAR 0 19
47554: IFFALSE 47602
// for i in tmp do
47556: LD_ADDR_VAR 0 8
47560: PUSH
47561: LD_VAR 0 19
47565: PUSH
47566: FOR_IN
47567: IFFALSE 47600
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47569: LD_VAR 0 8
47573: PPUSH
47574: CALL_OW 250
47578: PPUSH
47579: LD_VAR 0 8
47583: PPUSH
47584: CALL_OW 251
47588: PPUSH
47589: LD_VAR 0 16
47593: PPUSH
47594: CALL_OW 441
47598: GO 47566
47600: POP
47601: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47602: LD_VAR 0 18
47606: PPUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 30
47612: PUSH
47613: LD_INT 32
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 30
47622: PUSH
47623: LD_INT 33
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: LIST
47634: PPUSH
47635: CALL_OW 72
47639: IFFALSE 47727
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47641: LD_ADDR_VAR 0 8
47645: PUSH
47646: LD_VAR 0 18
47650: PPUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 30
47656: PUSH
47657: LD_INT 32
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 30
47666: PUSH
47667: LD_INT 33
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: LIST
47678: PPUSH
47679: CALL_OW 72
47683: PUSH
47684: FOR_IN
47685: IFFALSE 47725
// begin if not GetBWeapon ( i ) then
47687: LD_VAR 0 8
47691: PPUSH
47692: CALL_OW 269
47696: NOT
47697: IFFALSE 47723
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47699: LD_VAR 0 8
47703: PPUSH
47704: LD_VAR 0 8
47708: PPUSH
47709: LD_VAR 0 2
47713: PPUSH
47714: CALL 48973 0 2
47718: PPUSH
47719: CALL_OW 431
// end ;
47723: GO 47684
47725: POP
47726: POP
// end ; for i = 1 to personel do
47727: LD_ADDR_VAR 0 8
47731: PUSH
47732: DOUBLE
47733: LD_INT 1
47735: DEC
47736: ST_TO_ADDR
47737: LD_VAR 0 6
47741: PUSH
47742: FOR_TO
47743: IFFALSE 48807
// begin if i > 4 then
47745: LD_VAR 0 8
47749: PUSH
47750: LD_INT 4
47752: GREATER
47753: IFFALSE 47757
// break ;
47755: GO 48807
// case i of 1 :
47757: LD_VAR 0 8
47761: PUSH
47762: LD_INT 1
47764: DOUBLE
47765: EQUAL
47766: IFTRUE 47770
47768: GO 47850
47770: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47771: LD_ADDR_VAR 0 12
47775: PUSH
47776: LD_VAR 0 18
47780: PPUSH
47781: LD_INT 22
47783: PUSH
47784: LD_VAR 0 16
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 58
47795: PUSH
47796: EMPTY
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 30
47804: PUSH
47805: LD_INT 32
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 30
47814: PUSH
47815: LD_INT 4
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 30
47824: PUSH
47825: LD_INT 5
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: LIST
47842: PPUSH
47843: CALL_OW 72
47847: ST_TO_ADDR
47848: GO 48072
47850: LD_INT 2
47852: DOUBLE
47853: EQUAL
47854: IFTRUE 47858
47856: GO 47920
47858: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47859: LD_ADDR_VAR 0 12
47863: PUSH
47864: LD_VAR 0 18
47868: PPUSH
47869: LD_INT 22
47871: PUSH
47872: LD_VAR 0 16
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: LD_INT 30
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 30
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PPUSH
47913: CALL_OW 72
47917: ST_TO_ADDR
47918: GO 48072
47920: LD_INT 3
47922: DOUBLE
47923: EQUAL
47924: IFTRUE 47928
47926: GO 47990
47928: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47929: LD_ADDR_VAR 0 12
47933: PUSH
47934: LD_VAR 0 18
47938: PPUSH
47939: LD_INT 22
47941: PUSH
47942: LD_VAR 0 16
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 30
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 30
47966: PUSH
47967: LD_INT 3
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: LIST
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PPUSH
47983: CALL_OW 72
47987: ST_TO_ADDR
47988: GO 48072
47990: LD_INT 4
47992: DOUBLE
47993: EQUAL
47994: IFTRUE 47998
47996: GO 48071
47998: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47999: LD_ADDR_VAR 0 12
48003: PUSH
48004: LD_VAR 0 18
48008: PPUSH
48009: LD_INT 22
48011: PUSH
48012: LD_VAR 0 16
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: LD_INT 30
48026: PUSH
48027: LD_INT 6
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 30
48036: PUSH
48037: LD_INT 7
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 30
48046: PUSH
48047: LD_INT 8
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PPUSH
48064: CALL_OW 72
48068: ST_TO_ADDR
48069: GO 48072
48071: POP
// if i = 1 then
48072: LD_VAR 0 8
48076: PUSH
48077: LD_INT 1
48079: EQUAL
48080: IFFALSE 48191
// begin tmp := [ ] ;
48082: LD_ADDR_VAR 0 19
48086: PUSH
48087: EMPTY
48088: ST_TO_ADDR
// for j in f do
48089: LD_ADDR_VAR 0 9
48093: PUSH
48094: LD_VAR 0 12
48098: PUSH
48099: FOR_IN
48100: IFFALSE 48173
// if GetBType ( j ) = b_bunker then
48102: LD_VAR 0 9
48106: PPUSH
48107: CALL_OW 266
48111: PUSH
48112: LD_INT 32
48114: EQUAL
48115: IFFALSE 48142
// tmp := Insert ( tmp , 1 , j ) else
48117: LD_ADDR_VAR 0 19
48121: PUSH
48122: LD_VAR 0 19
48126: PPUSH
48127: LD_INT 1
48129: PPUSH
48130: LD_VAR 0 9
48134: PPUSH
48135: CALL_OW 2
48139: ST_TO_ADDR
48140: GO 48171
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48142: LD_ADDR_VAR 0 19
48146: PUSH
48147: LD_VAR 0 19
48151: PPUSH
48152: LD_VAR 0 19
48156: PUSH
48157: LD_INT 1
48159: PLUS
48160: PPUSH
48161: LD_VAR 0 9
48165: PPUSH
48166: CALL_OW 2
48170: ST_TO_ADDR
48171: GO 48099
48173: POP
48174: POP
// if tmp then
48175: LD_VAR 0 19
48179: IFFALSE 48191
// f := tmp ;
48181: LD_ADDR_VAR 0 12
48185: PUSH
48186: LD_VAR 0 19
48190: ST_TO_ADDR
// end ; x := personel [ i ] ;
48191: LD_ADDR_VAR 0 13
48195: PUSH
48196: LD_VAR 0 6
48200: PUSH
48201: LD_VAR 0 8
48205: ARRAY
48206: ST_TO_ADDR
// if x = - 1 then
48207: LD_VAR 0 13
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: EQUAL
48216: IFFALSE 48425
// begin for j in f do
48218: LD_ADDR_VAR 0 9
48222: PUSH
48223: LD_VAR 0 12
48227: PUSH
48228: FOR_IN
48229: IFFALSE 48421
// repeat InitHc ;
48231: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48235: LD_VAR 0 9
48239: PPUSH
48240: CALL_OW 266
48244: PUSH
48245: LD_INT 5
48247: EQUAL
48248: IFFALSE 48318
// begin if UnitsInside ( j ) < 3 then
48250: LD_VAR 0 9
48254: PPUSH
48255: CALL_OW 313
48259: PUSH
48260: LD_INT 3
48262: LESS
48263: IFFALSE 48299
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48265: LD_INT 0
48267: PPUSH
48268: LD_INT 5
48270: PUSH
48271: LD_INT 8
48273: PUSH
48274: LD_INT 9
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: LIST
48281: PUSH
48282: LD_VAR 0 17
48286: ARRAY
48287: PPUSH
48288: LD_VAR 0 4
48292: PPUSH
48293: CALL_OW 380
48297: GO 48316
// PrepareHuman ( false , i , skill ) ;
48299: LD_INT 0
48301: PPUSH
48302: LD_VAR 0 8
48306: PPUSH
48307: LD_VAR 0 4
48311: PPUSH
48312: CALL_OW 380
// end else
48316: GO 48335
// PrepareHuman ( false , i , skill ) ;
48318: LD_INT 0
48320: PPUSH
48321: LD_VAR 0 8
48325: PPUSH
48326: LD_VAR 0 4
48330: PPUSH
48331: CALL_OW 380
// un := CreateHuman ;
48335: LD_ADDR_VAR 0 14
48339: PUSH
48340: CALL_OW 44
48344: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48345: LD_ADDR_VAR 0 7
48349: PUSH
48350: LD_VAR 0 7
48354: PPUSH
48355: LD_INT 1
48357: PPUSH
48358: LD_VAR 0 14
48362: PPUSH
48363: CALL_OW 2
48367: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48368: LD_VAR 0 14
48372: PPUSH
48373: LD_VAR 0 9
48377: PPUSH
48378: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48382: LD_VAR 0 9
48386: PPUSH
48387: CALL_OW 313
48391: PUSH
48392: LD_INT 6
48394: EQUAL
48395: PUSH
48396: LD_VAR 0 9
48400: PPUSH
48401: CALL_OW 266
48405: PUSH
48406: LD_INT 32
48408: PUSH
48409: LD_INT 31
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: IN
48416: OR
48417: IFFALSE 48231
48419: GO 48228
48421: POP
48422: POP
// end else
48423: GO 48805
// for j = 1 to x do
48425: LD_ADDR_VAR 0 9
48429: PUSH
48430: DOUBLE
48431: LD_INT 1
48433: DEC
48434: ST_TO_ADDR
48435: LD_VAR 0 13
48439: PUSH
48440: FOR_TO
48441: IFFALSE 48803
// begin InitHc ;
48443: CALL_OW 19
// if not f then
48447: LD_VAR 0 12
48451: NOT
48452: IFFALSE 48541
// begin PrepareHuman ( false , i , skill ) ;
48454: LD_INT 0
48456: PPUSH
48457: LD_VAR 0 8
48461: PPUSH
48462: LD_VAR 0 4
48466: PPUSH
48467: CALL_OW 380
// un := CreateHuman ;
48471: LD_ADDR_VAR 0 14
48475: PUSH
48476: CALL_OW 44
48480: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48481: LD_ADDR_VAR 0 7
48485: PUSH
48486: LD_VAR 0 7
48490: PPUSH
48491: LD_INT 1
48493: PPUSH
48494: LD_VAR 0 14
48498: PPUSH
48499: CALL_OW 2
48503: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48504: LD_VAR 0 14
48508: PPUSH
48509: LD_VAR 0 1
48513: PPUSH
48514: CALL_OW 250
48518: PPUSH
48519: LD_VAR 0 1
48523: PPUSH
48524: CALL_OW 251
48528: PPUSH
48529: LD_INT 10
48531: PPUSH
48532: LD_INT 0
48534: PPUSH
48535: CALL_OW 50
// continue ;
48539: GO 48440
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48541: LD_VAR 0 12
48545: PUSH
48546: LD_INT 1
48548: ARRAY
48549: PPUSH
48550: CALL_OW 313
48554: PUSH
48555: LD_VAR 0 12
48559: PUSH
48560: LD_INT 1
48562: ARRAY
48563: PPUSH
48564: CALL_OW 266
48568: PUSH
48569: LD_INT 32
48571: PUSH
48572: LD_INT 31
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: IN
48579: AND
48580: PUSH
48581: LD_VAR 0 12
48585: PUSH
48586: LD_INT 1
48588: ARRAY
48589: PPUSH
48590: CALL_OW 313
48594: PUSH
48595: LD_INT 6
48597: EQUAL
48598: OR
48599: IFFALSE 48619
// f := Delete ( f , 1 ) ;
48601: LD_ADDR_VAR 0 12
48605: PUSH
48606: LD_VAR 0 12
48610: PPUSH
48611: LD_INT 1
48613: PPUSH
48614: CALL_OW 3
48618: ST_TO_ADDR
// if not f then
48619: LD_VAR 0 12
48623: NOT
48624: IFFALSE 48642
// begin x := x + 2 ;
48626: LD_ADDR_VAR 0 13
48630: PUSH
48631: LD_VAR 0 13
48635: PUSH
48636: LD_INT 2
48638: PLUS
48639: ST_TO_ADDR
// continue ;
48640: GO 48440
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48642: LD_VAR 0 12
48646: PUSH
48647: LD_INT 1
48649: ARRAY
48650: PPUSH
48651: CALL_OW 266
48655: PUSH
48656: LD_INT 5
48658: EQUAL
48659: IFFALSE 48733
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48661: LD_VAR 0 12
48665: PUSH
48666: LD_INT 1
48668: ARRAY
48669: PPUSH
48670: CALL_OW 313
48674: PUSH
48675: LD_INT 3
48677: LESS
48678: IFFALSE 48714
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48680: LD_INT 0
48682: PPUSH
48683: LD_INT 5
48685: PUSH
48686: LD_INT 8
48688: PUSH
48689: LD_INT 9
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: LIST
48696: PUSH
48697: LD_VAR 0 17
48701: ARRAY
48702: PPUSH
48703: LD_VAR 0 4
48707: PPUSH
48708: CALL_OW 380
48712: GO 48731
// PrepareHuman ( false , i , skill ) ;
48714: LD_INT 0
48716: PPUSH
48717: LD_VAR 0 8
48721: PPUSH
48722: LD_VAR 0 4
48726: PPUSH
48727: CALL_OW 380
// end else
48731: GO 48750
// PrepareHuman ( false , i , skill ) ;
48733: LD_INT 0
48735: PPUSH
48736: LD_VAR 0 8
48740: PPUSH
48741: LD_VAR 0 4
48745: PPUSH
48746: CALL_OW 380
// un := CreateHuman ;
48750: LD_ADDR_VAR 0 14
48754: PUSH
48755: CALL_OW 44
48759: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48760: LD_ADDR_VAR 0 7
48764: PUSH
48765: LD_VAR 0 7
48769: PPUSH
48770: LD_INT 1
48772: PPUSH
48773: LD_VAR 0 14
48777: PPUSH
48778: CALL_OW 2
48782: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48783: LD_VAR 0 14
48787: PPUSH
48788: LD_VAR 0 12
48792: PUSH
48793: LD_INT 1
48795: ARRAY
48796: PPUSH
48797: CALL_OW 52
// end ;
48801: GO 48440
48803: POP
48804: POP
// end ;
48805: GO 47742
48807: POP
48808: POP
// result := result ^ buildings ;
48809: LD_ADDR_VAR 0 7
48813: PUSH
48814: LD_VAR 0 7
48818: PUSH
48819: LD_VAR 0 18
48823: ADD
48824: ST_TO_ADDR
// end else
48825: GO 48968
// begin for i = 1 to personel do
48827: LD_ADDR_VAR 0 8
48831: PUSH
48832: DOUBLE
48833: LD_INT 1
48835: DEC
48836: ST_TO_ADDR
48837: LD_VAR 0 6
48841: PUSH
48842: FOR_TO
48843: IFFALSE 48966
// begin if i > 4 then
48845: LD_VAR 0 8
48849: PUSH
48850: LD_INT 4
48852: GREATER
48853: IFFALSE 48857
// break ;
48855: GO 48966
// x := personel [ i ] ;
48857: LD_ADDR_VAR 0 13
48861: PUSH
48862: LD_VAR 0 6
48866: PUSH
48867: LD_VAR 0 8
48871: ARRAY
48872: ST_TO_ADDR
// if x = - 1 then
48873: LD_VAR 0 13
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: EQUAL
48882: IFFALSE 48886
// continue ;
48884: GO 48842
// PrepareHuman ( false , i , skill ) ;
48886: LD_INT 0
48888: PPUSH
48889: LD_VAR 0 8
48893: PPUSH
48894: LD_VAR 0 4
48898: PPUSH
48899: CALL_OW 380
// un := CreateHuman ;
48903: LD_ADDR_VAR 0 14
48907: PUSH
48908: CALL_OW 44
48912: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48913: LD_VAR 0 14
48917: PPUSH
48918: LD_VAR 0 1
48922: PPUSH
48923: CALL_OW 250
48927: PPUSH
48928: LD_VAR 0 1
48932: PPUSH
48933: CALL_OW 251
48937: PPUSH
48938: LD_INT 10
48940: PPUSH
48941: LD_INT 0
48943: PPUSH
48944: CALL_OW 50
// result := result ^ un ;
48948: LD_ADDR_VAR 0 7
48952: PUSH
48953: LD_VAR 0 7
48957: PUSH
48958: LD_VAR 0 14
48962: ADD
48963: ST_TO_ADDR
// end ;
48964: GO 48842
48966: POP
48967: POP
// end ; end ;
48968: LD_VAR 0 7
48972: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48973: LD_INT 0
48975: PPUSH
48976: PPUSH
48977: PPUSH
48978: PPUSH
48979: PPUSH
48980: PPUSH
48981: PPUSH
48982: PPUSH
48983: PPUSH
48984: PPUSH
48985: PPUSH
48986: PPUSH
48987: PPUSH
48988: PPUSH
48989: PPUSH
48990: PPUSH
// result := false ;
48991: LD_ADDR_VAR 0 3
48995: PUSH
48996: LD_INT 0
48998: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48999: LD_VAR 0 1
49003: NOT
49004: PUSH
49005: LD_VAR 0 1
49009: PPUSH
49010: CALL_OW 266
49014: PUSH
49015: LD_INT 32
49017: PUSH
49018: LD_INT 33
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: IN
49025: NOT
49026: OR
49027: IFFALSE 49031
// exit ;
49029: GO 50140
// nat := GetNation ( tower ) ;
49031: LD_ADDR_VAR 0 12
49035: PUSH
49036: LD_VAR 0 1
49040: PPUSH
49041: CALL_OW 248
49045: ST_TO_ADDR
// side := GetSide ( tower ) ;
49046: LD_ADDR_VAR 0 16
49050: PUSH
49051: LD_VAR 0 1
49055: PPUSH
49056: CALL_OW 255
49060: ST_TO_ADDR
// x := GetX ( tower ) ;
49061: LD_ADDR_VAR 0 10
49065: PUSH
49066: LD_VAR 0 1
49070: PPUSH
49071: CALL_OW 250
49075: ST_TO_ADDR
// y := GetY ( tower ) ;
49076: LD_ADDR_VAR 0 11
49080: PUSH
49081: LD_VAR 0 1
49085: PPUSH
49086: CALL_OW 251
49090: ST_TO_ADDR
// if not x or not y then
49091: LD_VAR 0 10
49095: NOT
49096: PUSH
49097: LD_VAR 0 11
49101: NOT
49102: OR
49103: IFFALSE 49107
// exit ;
49105: GO 50140
// weapon := 0 ;
49107: LD_ADDR_VAR 0 18
49111: PUSH
49112: LD_INT 0
49114: ST_TO_ADDR
// fac_list := [ ] ;
49115: LD_ADDR_VAR 0 17
49119: PUSH
49120: EMPTY
49121: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49122: LD_ADDR_VAR 0 6
49126: PUSH
49127: LD_VAR 0 1
49131: PPUSH
49132: CALL_OW 274
49136: PPUSH
49137: LD_VAR 0 2
49141: PPUSH
49142: LD_INT 0
49144: PPUSH
49145: CALL 46711 0 3
49149: PPUSH
49150: LD_INT 30
49152: PUSH
49153: LD_INT 3
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PPUSH
49160: CALL_OW 72
49164: ST_TO_ADDR
// if not factories then
49165: LD_VAR 0 6
49169: NOT
49170: IFFALSE 49174
// exit ;
49172: GO 50140
// for i in factories do
49174: LD_ADDR_VAR 0 8
49178: PUSH
49179: LD_VAR 0 6
49183: PUSH
49184: FOR_IN
49185: IFFALSE 49210
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49187: LD_ADDR_VAR 0 17
49191: PUSH
49192: LD_VAR 0 17
49196: PUSH
49197: LD_VAR 0 8
49201: PPUSH
49202: CALL_OW 478
49206: UNION
49207: ST_TO_ADDR
49208: GO 49184
49210: POP
49211: POP
// if not fac_list then
49212: LD_VAR 0 17
49216: NOT
49217: IFFALSE 49221
// exit ;
49219: GO 50140
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49221: LD_ADDR_VAR 0 5
49225: PUSH
49226: LD_INT 4
49228: PUSH
49229: LD_INT 5
49231: PUSH
49232: LD_INT 9
49234: PUSH
49235: LD_INT 10
49237: PUSH
49238: LD_INT 6
49240: PUSH
49241: LD_INT 7
49243: PUSH
49244: LD_INT 11
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 27
49258: PUSH
49259: LD_INT 28
49261: PUSH
49262: LD_INT 26
49264: PUSH
49265: LD_INT 30
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 43
49276: PUSH
49277: LD_INT 44
49279: PUSH
49280: LD_INT 46
49282: PUSH
49283: LD_INT 45
49285: PUSH
49286: LD_INT 47
49288: PUSH
49289: LD_INT 49
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: LIST
49304: PUSH
49305: LD_VAR 0 12
49309: ARRAY
49310: ST_TO_ADDR
// list := list isect fac_list ;
49311: LD_ADDR_VAR 0 5
49315: PUSH
49316: LD_VAR 0 5
49320: PUSH
49321: LD_VAR 0 17
49325: ISECT
49326: ST_TO_ADDR
// if not list then
49327: LD_VAR 0 5
49331: NOT
49332: IFFALSE 49336
// exit ;
49334: GO 50140
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49336: LD_VAR 0 12
49340: PUSH
49341: LD_INT 3
49343: EQUAL
49344: PUSH
49345: LD_INT 49
49347: PUSH
49348: LD_VAR 0 5
49352: IN
49353: AND
49354: PUSH
49355: LD_INT 31
49357: PPUSH
49358: LD_VAR 0 16
49362: PPUSH
49363: CALL_OW 321
49367: PUSH
49368: LD_INT 2
49370: EQUAL
49371: AND
49372: IFFALSE 49432
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49374: LD_INT 22
49376: PUSH
49377: LD_VAR 0 16
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 35
49388: PUSH
49389: LD_INT 49
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 91
49398: PUSH
49399: LD_VAR 0 1
49403: PUSH
49404: LD_INT 10
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: LIST
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: LIST
49416: PPUSH
49417: CALL_OW 69
49421: NOT
49422: IFFALSE 49432
// weapon := ru_time_lapser ;
49424: LD_ADDR_VAR 0 18
49428: PUSH
49429: LD_INT 49
49431: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49432: LD_VAR 0 12
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: IN
49447: PUSH
49448: LD_INT 11
49450: PUSH
49451: LD_VAR 0 5
49455: IN
49456: PUSH
49457: LD_INT 30
49459: PUSH
49460: LD_VAR 0 5
49464: IN
49465: OR
49466: AND
49467: PUSH
49468: LD_INT 6
49470: PPUSH
49471: LD_VAR 0 16
49475: PPUSH
49476: CALL_OW 321
49480: PUSH
49481: LD_INT 2
49483: EQUAL
49484: AND
49485: IFFALSE 49650
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49487: LD_INT 22
49489: PUSH
49490: LD_VAR 0 16
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: LD_INT 35
49504: PUSH
49505: LD_INT 11
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 35
49514: PUSH
49515: LD_INT 30
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 91
49529: PUSH
49530: LD_VAR 0 1
49534: PUSH
49535: LD_INT 18
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: LIST
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: LIST
49547: PPUSH
49548: CALL_OW 69
49552: NOT
49553: PUSH
49554: LD_INT 22
49556: PUSH
49557: LD_VAR 0 16
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 30
49571: PUSH
49572: LD_INT 32
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 30
49581: PUSH
49582: LD_INT 33
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 91
49596: PUSH
49597: LD_VAR 0 1
49601: PUSH
49602: LD_INT 12
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: LIST
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: PUSH
49615: EMPTY
49616: LIST
49617: PPUSH
49618: CALL_OW 69
49622: PUSH
49623: LD_INT 2
49625: GREATER
49626: AND
49627: IFFALSE 49650
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49629: LD_ADDR_VAR 0 18
49633: PUSH
49634: LD_INT 11
49636: PUSH
49637: LD_INT 30
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_VAR 0 12
49648: ARRAY
49649: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49650: LD_VAR 0 18
49654: NOT
49655: PUSH
49656: LD_INT 40
49658: PPUSH
49659: LD_VAR 0 16
49663: PPUSH
49664: CALL_OW 321
49668: PUSH
49669: LD_INT 2
49671: EQUAL
49672: AND
49673: PUSH
49674: LD_INT 7
49676: PUSH
49677: LD_VAR 0 5
49681: IN
49682: PUSH
49683: LD_INT 28
49685: PUSH
49686: LD_VAR 0 5
49690: IN
49691: OR
49692: PUSH
49693: LD_INT 45
49695: PUSH
49696: LD_VAR 0 5
49700: IN
49701: OR
49702: AND
49703: IFFALSE 49957
// begin hex := GetHexInfo ( x , y ) ;
49705: LD_ADDR_VAR 0 4
49709: PUSH
49710: LD_VAR 0 10
49714: PPUSH
49715: LD_VAR 0 11
49719: PPUSH
49720: CALL_OW 546
49724: ST_TO_ADDR
// if hex [ 1 ] then
49725: LD_VAR 0 4
49729: PUSH
49730: LD_INT 1
49732: ARRAY
49733: IFFALSE 49737
// exit ;
49735: GO 50140
// height := hex [ 2 ] ;
49737: LD_ADDR_VAR 0 15
49741: PUSH
49742: LD_VAR 0 4
49746: PUSH
49747: LD_INT 2
49749: ARRAY
49750: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49751: LD_ADDR_VAR 0 14
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: LD_INT 5
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: ST_TO_ADDR
// for i in tmp do
49774: LD_ADDR_VAR 0 8
49778: PUSH
49779: LD_VAR 0 14
49783: PUSH
49784: FOR_IN
49785: IFFALSE 49955
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49787: LD_ADDR_VAR 0 9
49791: PUSH
49792: LD_VAR 0 10
49796: PPUSH
49797: LD_VAR 0 8
49801: PPUSH
49802: LD_INT 5
49804: PPUSH
49805: CALL_OW 272
49809: PUSH
49810: LD_VAR 0 11
49814: PPUSH
49815: LD_VAR 0 8
49819: PPUSH
49820: LD_INT 5
49822: PPUSH
49823: CALL_OW 273
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49832: LD_VAR 0 9
49836: PUSH
49837: LD_INT 1
49839: ARRAY
49840: PPUSH
49841: LD_VAR 0 9
49845: PUSH
49846: LD_INT 2
49848: ARRAY
49849: PPUSH
49850: CALL_OW 488
49854: IFFALSE 49953
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49856: LD_ADDR_VAR 0 4
49860: PUSH
49861: LD_VAR 0 9
49865: PUSH
49866: LD_INT 1
49868: ARRAY
49869: PPUSH
49870: LD_VAR 0 9
49874: PUSH
49875: LD_INT 2
49877: ARRAY
49878: PPUSH
49879: CALL_OW 546
49883: ST_TO_ADDR
// if hex [ 1 ] then
49884: LD_VAR 0 4
49888: PUSH
49889: LD_INT 1
49891: ARRAY
49892: IFFALSE 49896
// continue ;
49894: GO 49784
// h := hex [ 2 ] ;
49896: LD_ADDR_VAR 0 13
49900: PUSH
49901: LD_VAR 0 4
49905: PUSH
49906: LD_INT 2
49908: ARRAY
49909: ST_TO_ADDR
// if h + 7 < height then
49910: LD_VAR 0 13
49914: PUSH
49915: LD_INT 7
49917: PLUS
49918: PUSH
49919: LD_VAR 0 15
49923: LESS
49924: IFFALSE 49953
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49926: LD_ADDR_VAR 0 18
49930: PUSH
49931: LD_INT 7
49933: PUSH
49934: LD_INT 28
49936: PUSH
49937: LD_INT 45
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: LIST
49944: PUSH
49945: LD_VAR 0 12
49949: ARRAY
49950: ST_TO_ADDR
// break ;
49951: GO 49955
// end ; end ; end ;
49953: GO 49784
49955: POP
49956: POP
// end ; if not weapon then
49957: LD_VAR 0 18
49961: NOT
49962: IFFALSE 50022
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49964: LD_ADDR_VAR 0 5
49968: PUSH
49969: LD_VAR 0 5
49973: PUSH
49974: LD_INT 11
49976: PUSH
49977: LD_INT 30
49979: PUSH
49980: LD_INT 49
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: LIST
49987: DIFF
49988: ST_TO_ADDR
// if not list then
49989: LD_VAR 0 5
49993: NOT
49994: IFFALSE 49998
// exit ;
49996: GO 50140
// weapon := list [ rand ( 1 , list ) ] ;
49998: LD_ADDR_VAR 0 18
50002: PUSH
50003: LD_VAR 0 5
50007: PUSH
50008: LD_INT 1
50010: PPUSH
50011: LD_VAR 0 5
50015: PPUSH
50016: CALL_OW 12
50020: ARRAY
50021: ST_TO_ADDR
// end ; if weapon then
50022: LD_VAR 0 18
50026: IFFALSE 50140
// begin tmp := CostOfWeapon ( weapon ) ;
50028: LD_ADDR_VAR 0 14
50032: PUSH
50033: LD_VAR 0 18
50037: PPUSH
50038: CALL_OW 451
50042: ST_TO_ADDR
// j := GetBase ( tower ) ;
50043: LD_ADDR_VAR 0 9
50047: PUSH
50048: LD_VAR 0 1
50052: PPUSH
50053: CALL_OW 274
50057: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50058: LD_VAR 0 9
50062: PPUSH
50063: LD_INT 1
50065: PPUSH
50066: CALL_OW 275
50070: PUSH
50071: LD_VAR 0 14
50075: PUSH
50076: LD_INT 1
50078: ARRAY
50079: GREATEREQUAL
50080: PUSH
50081: LD_VAR 0 9
50085: PPUSH
50086: LD_INT 2
50088: PPUSH
50089: CALL_OW 275
50093: PUSH
50094: LD_VAR 0 14
50098: PUSH
50099: LD_INT 2
50101: ARRAY
50102: GREATEREQUAL
50103: AND
50104: PUSH
50105: LD_VAR 0 9
50109: PPUSH
50110: LD_INT 3
50112: PPUSH
50113: CALL_OW 275
50117: PUSH
50118: LD_VAR 0 14
50122: PUSH
50123: LD_INT 3
50125: ARRAY
50126: GREATEREQUAL
50127: AND
50128: IFFALSE 50140
// result := weapon ;
50130: LD_ADDR_VAR 0 3
50134: PUSH
50135: LD_VAR 0 18
50139: ST_TO_ADDR
// end ; end ;
50140: LD_VAR 0 3
50144: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50145: LD_INT 0
50147: PPUSH
50148: PPUSH
// result := true ;
50149: LD_ADDR_VAR 0 3
50153: PUSH
50154: LD_INT 1
50156: ST_TO_ADDR
// if array1 = array2 then
50157: LD_VAR 0 1
50161: PUSH
50162: LD_VAR 0 2
50166: EQUAL
50167: IFFALSE 50227
// begin for i = 1 to array1 do
50169: LD_ADDR_VAR 0 4
50173: PUSH
50174: DOUBLE
50175: LD_INT 1
50177: DEC
50178: ST_TO_ADDR
50179: LD_VAR 0 1
50183: PUSH
50184: FOR_TO
50185: IFFALSE 50223
// if array1 [ i ] <> array2 [ i ] then
50187: LD_VAR 0 1
50191: PUSH
50192: LD_VAR 0 4
50196: ARRAY
50197: PUSH
50198: LD_VAR 0 2
50202: PUSH
50203: LD_VAR 0 4
50207: ARRAY
50208: NONEQUAL
50209: IFFALSE 50221
// begin result := false ;
50211: LD_ADDR_VAR 0 3
50215: PUSH
50216: LD_INT 0
50218: ST_TO_ADDR
// break ;
50219: GO 50223
// end ;
50221: GO 50184
50223: POP
50224: POP
// end else
50225: GO 50235
// result := false ;
50227: LD_ADDR_VAR 0 3
50231: PUSH
50232: LD_INT 0
50234: ST_TO_ADDR
// end ;
50235: LD_VAR 0 3
50239: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50240: LD_INT 0
50242: PPUSH
50243: PPUSH
// if not array1 or not array2 then
50244: LD_VAR 0 1
50248: NOT
50249: PUSH
50250: LD_VAR 0 2
50254: NOT
50255: OR
50256: IFFALSE 50260
// exit ;
50258: GO 50324
// result := true ;
50260: LD_ADDR_VAR 0 3
50264: PUSH
50265: LD_INT 1
50267: ST_TO_ADDR
// for i = 1 to array1 do
50268: LD_ADDR_VAR 0 4
50272: PUSH
50273: DOUBLE
50274: LD_INT 1
50276: DEC
50277: ST_TO_ADDR
50278: LD_VAR 0 1
50282: PUSH
50283: FOR_TO
50284: IFFALSE 50322
// if array1 [ i ] <> array2 [ i ] then
50286: LD_VAR 0 1
50290: PUSH
50291: LD_VAR 0 4
50295: ARRAY
50296: PUSH
50297: LD_VAR 0 2
50301: PUSH
50302: LD_VAR 0 4
50306: ARRAY
50307: NONEQUAL
50308: IFFALSE 50320
// begin result := false ;
50310: LD_ADDR_VAR 0 3
50314: PUSH
50315: LD_INT 0
50317: ST_TO_ADDR
// break ;
50318: GO 50322
// end ;
50320: GO 50283
50322: POP
50323: POP
// end ;
50324: LD_VAR 0 3
50328: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50329: LD_INT 0
50331: PPUSH
50332: PPUSH
50333: PPUSH
// pom := GetBase ( fac ) ;
50334: LD_ADDR_VAR 0 5
50338: PUSH
50339: LD_VAR 0 1
50343: PPUSH
50344: CALL_OW 274
50348: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50349: LD_ADDR_VAR 0 4
50353: PUSH
50354: LD_VAR 0 2
50358: PUSH
50359: LD_INT 1
50361: ARRAY
50362: PPUSH
50363: LD_VAR 0 2
50367: PUSH
50368: LD_INT 2
50370: ARRAY
50371: PPUSH
50372: LD_VAR 0 2
50376: PUSH
50377: LD_INT 3
50379: ARRAY
50380: PPUSH
50381: LD_VAR 0 2
50385: PUSH
50386: LD_INT 4
50388: ARRAY
50389: PPUSH
50390: CALL_OW 449
50394: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50395: LD_ADDR_VAR 0 3
50399: PUSH
50400: LD_VAR 0 5
50404: PPUSH
50405: LD_INT 1
50407: PPUSH
50408: CALL_OW 275
50412: PUSH
50413: LD_VAR 0 4
50417: PUSH
50418: LD_INT 1
50420: ARRAY
50421: GREATEREQUAL
50422: PUSH
50423: LD_VAR 0 5
50427: PPUSH
50428: LD_INT 2
50430: PPUSH
50431: CALL_OW 275
50435: PUSH
50436: LD_VAR 0 4
50440: PUSH
50441: LD_INT 2
50443: ARRAY
50444: GREATEREQUAL
50445: AND
50446: PUSH
50447: LD_VAR 0 5
50451: PPUSH
50452: LD_INT 3
50454: PPUSH
50455: CALL_OW 275
50459: PUSH
50460: LD_VAR 0 4
50464: PUSH
50465: LD_INT 3
50467: ARRAY
50468: GREATEREQUAL
50469: AND
50470: ST_TO_ADDR
// end ;
50471: LD_VAR 0 3
50475: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50476: LD_INT 0
50478: PPUSH
50479: PPUSH
50480: PPUSH
50481: PPUSH
// pom := GetBase ( building ) ;
50482: LD_ADDR_VAR 0 3
50486: PUSH
50487: LD_VAR 0 1
50491: PPUSH
50492: CALL_OW 274
50496: ST_TO_ADDR
// if not pom then
50497: LD_VAR 0 3
50501: NOT
50502: IFFALSE 50506
// exit ;
50504: GO 50676
// btype := GetBType ( building ) ;
50506: LD_ADDR_VAR 0 5
50510: PUSH
50511: LD_VAR 0 1
50515: PPUSH
50516: CALL_OW 266
50520: ST_TO_ADDR
// if btype = b_armoury then
50521: LD_VAR 0 5
50525: PUSH
50526: LD_INT 4
50528: EQUAL
50529: IFFALSE 50539
// btype := b_barracks ;
50531: LD_ADDR_VAR 0 5
50535: PUSH
50536: LD_INT 5
50538: ST_TO_ADDR
// if btype = b_depot then
50539: LD_VAR 0 5
50543: PUSH
50544: LD_INT 0
50546: EQUAL
50547: IFFALSE 50557
// btype := b_warehouse ;
50549: LD_ADDR_VAR 0 5
50553: PUSH
50554: LD_INT 1
50556: ST_TO_ADDR
// if btype = b_workshop then
50557: LD_VAR 0 5
50561: PUSH
50562: LD_INT 2
50564: EQUAL
50565: IFFALSE 50575
// btype := b_factory ;
50567: LD_ADDR_VAR 0 5
50571: PUSH
50572: LD_INT 3
50574: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50575: LD_ADDR_VAR 0 4
50579: PUSH
50580: LD_VAR 0 5
50584: PPUSH
50585: LD_VAR 0 1
50589: PPUSH
50590: CALL_OW 248
50594: PPUSH
50595: CALL_OW 450
50599: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50600: LD_ADDR_VAR 0 2
50604: PUSH
50605: LD_VAR 0 3
50609: PPUSH
50610: LD_INT 1
50612: PPUSH
50613: CALL_OW 275
50617: PUSH
50618: LD_VAR 0 4
50622: PUSH
50623: LD_INT 1
50625: ARRAY
50626: GREATEREQUAL
50627: PUSH
50628: LD_VAR 0 3
50632: PPUSH
50633: LD_INT 2
50635: PPUSH
50636: CALL_OW 275
50640: PUSH
50641: LD_VAR 0 4
50645: PUSH
50646: LD_INT 2
50648: ARRAY
50649: GREATEREQUAL
50650: AND
50651: PUSH
50652: LD_VAR 0 3
50656: PPUSH
50657: LD_INT 3
50659: PPUSH
50660: CALL_OW 275
50664: PUSH
50665: LD_VAR 0 4
50669: PUSH
50670: LD_INT 3
50672: ARRAY
50673: GREATEREQUAL
50674: AND
50675: ST_TO_ADDR
// end ;
50676: LD_VAR 0 2
50680: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50681: LD_INT 0
50683: PPUSH
50684: PPUSH
50685: PPUSH
// pom := GetBase ( building ) ;
50686: LD_ADDR_VAR 0 4
50690: PUSH
50691: LD_VAR 0 1
50695: PPUSH
50696: CALL_OW 274
50700: ST_TO_ADDR
// if not pom then
50701: LD_VAR 0 4
50705: NOT
50706: IFFALSE 50710
// exit ;
50708: GO 50811
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50710: LD_ADDR_VAR 0 5
50714: PUSH
50715: LD_VAR 0 2
50719: PPUSH
50720: LD_VAR 0 1
50724: PPUSH
50725: CALL_OW 248
50729: PPUSH
50730: CALL_OW 450
50734: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50735: LD_ADDR_VAR 0 3
50739: PUSH
50740: LD_VAR 0 4
50744: PPUSH
50745: LD_INT 1
50747: PPUSH
50748: CALL_OW 275
50752: PUSH
50753: LD_VAR 0 5
50757: PUSH
50758: LD_INT 1
50760: ARRAY
50761: GREATEREQUAL
50762: PUSH
50763: LD_VAR 0 4
50767: PPUSH
50768: LD_INT 2
50770: PPUSH
50771: CALL_OW 275
50775: PUSH
50776: LD_VAR 0 5
50780: PUSH
50781: LD_INT 2
50783: ARRAY
50784: GREATEREQUAL
50785: AND
50786: PUSH
50787: LD_VAR 0 4
50791: PPUSH
50792: LD_INT 3
50794: PPUSH
50795: CALL_OW 275
50799: PUSH
50800: LD_VAR 0 5
50804: PUSH
50805: LD_INT 3
50807: ARRAY
50808: GREATEREQUAL
50809: AND
50810: ST_TO_ADDR
// end ;
50811: LD_VAR 0 3
50815: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50816: LD_INT 0
50818: PPUSH
50819: PPUSH
50820: PPUSH
50821: PPUSH
50822: PPUSH
50823: PPUSH
50824: PPUSH
50825: PPUSH
50826: PPUSH
50827: PPUSH
50828: PPUSH
// result := false ;
50829: LD_ADDR_VAR 0 8
50833: PUSH
50834: LD_INT 0
50836: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50837: LD_VAR 0 5
50841: NOT
50842: PUSH
50843: LD_VAR 0 1
50847: NOT
50848: OR
50849: PUSH
50850: LD_VAR 0 2
50854: NOT
50855: OR
50856: PUSH
50857: LD_VAR 0 3
50861: NOT
50862: OR
50863: IFFALSE 50867
// exit ;
50865: GO 51681
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50867: LD_ADDR_VAR 0 14
50871: PUSH
50872: LD_VAR 0 1
50876: PPUSH
50877: LD_VAR 0 2
50881: PPUSH
50882: LD_VAR 0 3
50886: PPUSH
50887: LD_VAR 0 4
50891: PPUSH
50892: LD_VAR 0 5
50896: PUSH
50897: LD_INT 1
50899: ARRAY
50900: PPUSH
50901: CALL_OW 248
50905: PPUSH
50906: LD_INT 0
50908: PPUSH
50909: CALL 52914 0 6
50913: ST_TO_ADDR
// if not hexes then
50914: LD_VAR 0 14
50918: NOT
50919: IFFALSE 50923
// exit ;
50921: GO 51681
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50923: LD_ADDR_VAR 0 17
50927: PUSH
50928: LD_VAR 0 5
50932: PPUSH
50933: LD_INT 22
50935: PUSH
50936: LD_VAR 0 13
50940: PPUSH
50941: CALL_OW 255
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: LD_INT 30
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 30
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: LIST
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PPUSH
50982: CALL_OW 72
50986: ST_TO_ADDR
// for i = 1 to hexes do
50987: LD_ADDR_VAR 0 9
50991: PUSH
50992: DOUBLE
50993: LD_INT 1
50995: DEC
50996: ST_TO_ADDR
50997: LD_VAR 0 14
51001: PUSH
51002: FOR_TO
51003: IFFALSE 51679
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51005: LD_ADDR_VAR 0 13
51009: PUSH
51010: LD_VAR 0 14
51014: PUSH
51015: LD_VAR 0 9
51019: ARRAY
51020: PUSH
51021: LD_INT 1
51023: ARRAY
51024: PPUSH
51025: LD_VAR 0 14
51029: PUSH
51030: LD_VAR 0 9
51034: ARRAY
51035: PUSH
51036: LD_INT 2
51038: ARRAY
51039: PPUSH
51040: CALL_OW 428
51044: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51045: LD_VAR 0 14
51049: PUSH
51050: LD_VAR 0 9
51054: ARRAY
51055: PUSH
51056: LD_INT 1
51058: ARRAY
51059: PPUSH
51060: LD_VAR 0 14
51064: PUSH
51065: LD_VAR 0 9
51069: ARRAY
51070: PUSH
51071: LD_INT 2
51073: ARRAY
51074: PPUSH
51075: CALL_OW 351
51079: PUSH
51080: LD_VAR 0 14
51084: PUSH
51085: LD_VAR 0 9
51089: ARRAY
51090: PUSH
51091: LD_INT 1
51093: ARRAY
51094: PPUSH
51095: LD_VAR 0 14
51099: PUSH
51100: LD_VAR 0 9
51104: ARRAY
51105: PUSH
51106: LD_INT 2
51108: ARRAY
51109: PPUSH
51110: CALL_OW 488
51114: NOT
51115: OR
51116: PUSH
51117: LD_VAR 0 13
51121: PPUSH
51122: CALL_OW 247
51126: PUSH
51127: LD_INT 3
51129: EQUAL
51130: OR
51131: IFFALSE 51137
// exit ;
51133: POP
51134: POP
51135: GO 51681
// if not tmp then
51137: LD_VAR 0 13
51141: NOT
51142: IFFALSE 51146
// continue ;
51144: GO 51002
// result := true ;
51146: LD_ADDR_VAR 0 8
51150: PUSH
51151: LD_INT 1
51153: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51154: LD_VAR 0 6
51158: PUSH
51159: LD_VAR 0 13
51163: PPUSH
51164: CALL_OW 247
51168: PUSH
51169: LD_INT 2
51171: EQUAL
51172: AND
51173: PUSH
51174: LD_VAR 0 13
51178: PPUSH
51179: CALL_OW 263
51183: PUSH
51184: LD_INT 1
51186: EQUAL
51187: AND
51188: IFFALSE 51352
// begin if IsDrivenBy ( tmp ) then
51190: LD_VAR 0 13
51194: PPUSH
51195: CALL_OW 311
51199: IFFALSE 51203
// continue ;
51201: GO 51002
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51203: LD_VAR 0 6
51207: PPUSH
51208: LD_INT 3
51210: PUSH
51211: LD_INT 60
51213: PUSH
51214: EMPTY
51215: LIST
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 3
51223: PUSH
51224: LD_INT 55
51226: PUSH
51227: EMPTY
51228: LIST
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PPUSH
51238: CALL_OW 72
51242: IFFALSE 51350
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51244: LD_ADDR_VAR 0 18
51248: PUSH
51249: LD_VAR 0 6
51253: PPUSH
51254: LD_INT 3
51256: PUSH
51257: LD_INT 60
51259: PUSH
51260: EMPTY
51261: LIST
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 3
51269: PUSH
51270: LD_INT 55
51272: PUSH
51273: EMPTY
51274: LIST
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PPUSH
51284: CALL_OW 72
51288: PUSH
51289: LD_INT 1
51291: ARRAY
51292: ST_TO_ADDR
// if IsInUnit ( driver ) then
51293: LD_VAR 0 18
51297: PPUSH
51298: CALL_OW 310
51302: IFFALSE 51313
// ComExit ( driver ) ;
51304: LD_VAR 0 18
51308: PPUSH
51309: CALL 76694 0 1
// AddComEnterUnit ( driver , tmp ) ;
51313: LD_VAR 0 18
51317: PPUSH
51318: LD_VAR 0 13
51322: PPUSH
51323: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51327: LD_VAR 0 18
51331: PPUSH
51332: LD_VAR 0 7
51336: PPUSH
51337: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51341: LD_VAR 0 18
51345: PPUSH
51346: CALL_OW 181
// end ; continue ;
51350: GO 51002
// end ; if not cleaners or not tmp in cleaners then
51352: LD_VAR 0 6
51356: NOT
51357: PUSH
51358: LD_VAR 0 13
51362: PUSH
51363: LD_VAR 0 6
51367: IN
51368: NOT
51369: OR
51370: IFFALSE 51677
// begin if dep then
51372: LD_VAR 0 17
51376: IFFALSE 51512
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51378: LD_ADDR_VAR 0 16
51382: PUSH
51383: LD_VAR 0 17
51387: PUSH
51388: LD_INT 1
51390: ARRAY
51391: PPUSH
51392: CALL_OW 250
51396: PPUSH
51397: LD_VAR 0 17
51401: PUSH
51402: LD_INT 1
51404: ARRAY
51405: PPUSH
51406: CALL_OW 254
51410: PPUSH
51411: LD_INT 5
51413: PPUSH
51414: CALL_OW 272
51418: PUSH
51419: LD_VAR 0 17
51423: PUSH
51424: LD_INT 1
51426: ARRAY
51427: PPUSH
51428: CALL_OW 251
51432: PPUSH
51433: LD_VAR 0 17
51437: PUSH
51438: LD_INT 1
51440: ARRAY
51441: PPUSH
51442: CALL_OW 254
51446: PPUSH
51447: LD_INT 5
51449: PPUSH
51450: CALL_OW 273
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51459: LD_VAR 0 16
51463: PUSH
51464: LD_INT 1
51466: ARRAY
51467: PPUSH
51468: LD_VAR 0 16
51472: PUSH
51473: LD_INT 2
51475: ARRAY
51476: PPUSH
51477: CALL_OW 488
51481: IFFALSE 51512
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51483: LD_VAR 0 13
51487: PPUSH
51488: LD_VAR 0 16
51492: PUSH
51493: LD_INT 1
51495: ARRAY
51496: PPUSH
51497: LD_VAR 0 16
51501: PUSH
51502: LD_INT 2
51504: ARRAY
51505: PPUSH
51506: CALL_OW 111
// continue ;
51510: GO 51002
// end ; end ; r := GetDir ( tmp ) ;
51512: LD_ADDR_VAR 0 15
51516: PUSH
51517: LD_VAR 0 13
51521: PPUSH
51522: CALL_OW 254
51526: ST_TO_ADDR
// if r = 5 then
51527: LD_VAR 0 15
51531: PUSH
51532: LD_INT 5
51534: EQUAL
51535: IFFALSE 51545
// r := 0 ;
51537: LD_ADDR_VAR 0 15
51541: PUSH
51542: LD_INT 0
51544: ST_TO_ADDR
// for j = r to 5 do
51545: LD_ADDR_VAR 0 10
51549: PUSH
51550: DOUBLE
51551: LD_VAR 0 15
51555: DEC
51556: ST_TO_ADDR
51557: LD_INT 5
51559: PUSH
51560: FOR_TO
51561: IFFALSE 51675
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51563: LD_ADDR_VAR 0 11
51567: PUSH
51568: LD_VAR 0 13
51572: PPUSH
51573: CALL_OW 250
51577: PPUSH
51578: LD_VAR 0 10
51582: PPUSH
51583: LD_INT 2
51585: PPUSH
51586: CALL_OW 272
51590: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51591: LD_ADDR_VAR 0 12
51595: PUSH
51596: LD_VAR 0 13
51600: PPUSH
51601: CALL_OW 251
51605: PPUSH
51606: LD_VAR 0 10
51610: PPUSH
51611: LD_INT 2
51613: PPUSH
51614: CALL_OW 273
51618: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51619: LD_VAR 0 11
51623: PPUSH
51624: LD_VAR 0 12
51628: PPUSH
51629: CALL_OW 488
51633: PUSH
51634: LD_VAR 0 11
51638: PPUSH
51639: LD_VAR 0 12
51643: PPUSH
51644: CALL_OW 428
51648: NOT
51649: AND
51650: IFFALSE 51673
// begin ComMoveXY ( tmp , _x , _y ) ;
51652: LD_VAR 0 13
51656: PPUSH
51657: LD_VAR 0 11
51661: PPUSH
51662: LD_VAR 0 12
51666: PPUSH
51667: CALL_OW 111
// break ;
51671: GO 51675
// end ; end ;
51673: GO 51560
51675: POP
51676: POP
// end ; end ;
51677: GO 51002
51679: POP
51680: POP
// end ;
51681: LD_VAR 0 8
51685: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51686: LD_INT 0
51688: PPUSH
// result := true ;
51689: LD_ADDR_VAR 0 3
51693: PUSH
51694: LD_INT 1
51696: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51697: LD_VAR 0 2
51701: PUSH
51702: LD_INT 24
51704: DOUBLE
51705: EQUAL
51706: IFTRUE 51716
51708: LD_INT 33
51710: DOUBLE
51711: EQUAL
51712: IFTRUE 51716
51714: GO 51741
51716: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51717: LD_ADDR_VAR 0 3
51721: PUSH
51722: LD_INT 32
51724: PPUSH
51725: LD_VAR 0 1
51729: PPUSH
51730: CALL_OW 321
51734: PUSH
51735: LD_INT 2
51737: EQUAL
51738: ST_TO_ADDR
51739: GO 52057
51741: LD_INT 20
51743: DOUBLE
51744: EQUAL
51745: IFTRUE 51749
51747: GO 51774
51749: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51750: LD_ADDR_VAR 0 3
51754: PUSH
51755: LD_INT 6
51757: PPUSH
51758: LD_VAR 0 1
51762: PPUSH
51763: CALL_OW 321
51767: PUSH
51768: LD_INT 2
51770: EQUAL
51771: ST_TO_ADDR
51772: GO 52057
51774: LD_INT 22
51776: DOUBLE
51777: EQUAL
51778: IFTRUE 51788
51780: LD_INT 36
51782: DOUBLE
51783: EQUAL
51784: IFTRUE 51788
51786: GO 51813
51788: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51789: LD_ADDR_VAR 0 3
51793: PUSH
51794: LD_INT 15
51796: PPUSH
51797: LD_VAR 0 1
51801: PPUSH
51802: CALL_OW 321
51806: PUSH
51807: LD_INT 2
51809: EQUAL
51810: ST_TO_ADDR
51811: GO 52057
51813: LD_INT 30
51815: DOUBLE
51816: EQUAL
51817: IFTRUE 51821
51819: GO 51846
51821: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51822: LD_ADDR_VAR 0 3
51826: PUSH
51827: LD_INT 20
51829: PPUSH
51830: LD_VAR 0 1
51834: PPUSH
51835: CALL_OW 321
51839: PUSH
51840: LD_INT 2
51842: EQUAL
51843: ST_TO_ADDR
51844: GO 52057
51846: LD_INT 28
51848: DOUBLE
51849: EQUAL
51850: IFTRUE 51860
51852: LD_INT 21
51854: DOUBLE
51855: EQUAL
51856: IFTRUE 51860
51858: GO 51885
51860: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51861: LD_ADDR_VAR 0 3
51865: PUSH
51866: LD_INT 21
51868: PPUSH
51869: LD_VAR 0 1
51873: PPUSH
51874: CALL_OW 321
51878: PUSH
51879: LD_INT 2
51881: EQUAL
51882: ST_TO_ADDR
51883: GO 52057
51885: LD_INT 16
51887: DOUBLE
51888: EQUAL
51889: IFTRUE 51893
51891: GO 51918
51893: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51894: LD_ADDR_VAR 0 3
51898: PUSH
51899: LD_INT 84
51901: PPUSH
51902: LD_VAR 0 1
51906: PPUSH
51907: CALL_OW 321
51911: PUSH
51912: LD_INT 2
51914: EQUAL
51915: ST_TO_ADDR
51916: GO 52057
51918: LD_INT 19
51920: DOUBLE
51921: EQUAL
51922: IFTRUE 51932
51924: LD_INT 23
51926: DOUBLE
51927: EQUAL
51928: IFTRUE 51932
51930: GO 51957
51932: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51933: LD_ADDR_VAR 0 3
51937: PUSH
51938: LD_INT 83
51940: PPUSH
51941: LD_VAR 0 1
51945: PPUSH
51946: CALL_OW 321
51950: PUSH
51951: LD_INT 2
51953: EQUAL
51954: ST_TO_ADDR
51955: GO 52057
51957: LD_INT 17
51959: DOUBLE
51960: EQUAL
51961: IFTRUE 51965
51963: GO 51990
51965: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51966: LD_ADDR_VAR 0 3
51970: PUSH
51971: LD_INT 39
51973: PPUSH
51974: LD_VAR 0 1
51978: PPUSH
51979: CALL_OW 321
51983: PUSH
51984: LD_INT 2
51986: EQUAL
51987: ST_TO_ADDR
51988: GO 52057
51990: LD_INT 18
51992: DOUBLE
51993: EQUAL
51994: IFTRUE 51998
51996: GO 52023
51998: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51999: LD_ADDR_VAR 0 3
52003: PUSH
52004: LD_INT 40
52006: PPUSH
52007: LD_VAR 0 1
52011: PPUSH
52012: CALL_OW 321
52016: PUSH
52017: LD_INT 2
52019: EQUAL
52020: ST_TO_ADDR
52021: GO 52057
52023: LD_INT 27
52025: DOUBLE
52026: EQUAL
52027: IFTRUE 52031
52029: GO 52056
52031: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52032: LD_ADDR_VAR 0 3
52036: PUSH
52037: LD_INT 35
52039: PPUSH
52040: LD_VAR 0 1
52044: PPUSH
52045: CALL_OW 321
52049: PUSH
52050: LD_INT 2
52052: EQUAL
52053: ST_TO_ADDR
52054: GO 52057
52056: POP
// end ;
52057: LD_VAR 0 3
52061: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52062: LD_INT 0
52064: PPUSH
52065: PPUSH
52066: PPUSH
52067: PPUSH
52068: PPUSH
52069: PPUSH
52070: PPUSH
52071: PPUSH
52072: PPUSH
52073: PPUSH
52074: PPUSH
// result := false ;
52075: LD_ADDR_VAR 0 6
52079: PUSH
52080: LD_INT 0
52082: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52083: LD_VAR 0 1
52087: NOT
52088: PUSH
52089: LD_VAR 0 1
52093: PPUSH
52094: CALL_OW 266
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: IN
52109: NOT
52110: OR
52111: PUSH
52112: LD_VAR 0 2
52116: NOT
52117: OR
52118: PUSH
52119: LD_VAR 0 5
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 3
52135: PUSH
52136: LD_INT 4
52138: PUSH
52139: LD_INT 5
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: IN
52150: NOT
52151: OR
52152: PUSH
52153: LD_VAR 0 3
52157: PPUSH
52158: LD_VAR 0 4
52162: PPUSH
52163: CALL_OW 488
52167: NOT
52168: OR
52169: IFFALSE 52173
// exit ;
52171: GO 52909
// side := GetSide ( depot ) ;
52173: LD_ADDR_VAR 0 9
52177: PUSH
52178: LD_VAR 0 1
52182: PPUSH
52183: CALL_OW 255
52187: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52188: LD_VAR 0 9
52192: PPUSH
52193: LD_VAR 0 2
52197: PPUSH
52198: CALL 51686 0 2
52202: NOT
52203: IFFALSE 52207
// exit ;
52205: GO 52909
// pom := GetBase ( depot ) ;
52207: LD_ADDR_VAR 0 10
52211: PUSH
52212: LD_VAR 0 1
52216: PPUSH
52217: CALL_OW 274
52221: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52222: LD_ADDR_VAR 0 11
52226: PUSH
52227: LD_VAR 0 2
52231: PPUSH
52232: LD_VAR 0 1
52236: PPUSH
52237: CALL_OW 248
52241: PPUSH
52242: CALL_OW 450
52246: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52247: LD_VAR 0 10
52251: PPUSH
52252: LD_INT 1
52254: PPUSH
52255: CALL_OW 275
52259: PUSH
52260: LD_VAR 0 11
52264: PUSH
52265: LD_INT 1
52267: ARRAY
52268: GREATEREQUAL
52269: PUSH
52270: LD_VAR 0 10
52274: PPUSH
52275: LD_INT 2
52277: PPUSH
52278: CALL_OW 275
52282: PUSH
52283: LD_VAR 0 11
52287: PUSH
52288: LD_INT 2
52290: ARRAY
52291: GREATEREQUAL
52292: AND
52293: PUSH
52294: LD_VAR 0 10
52298: PPUSH
52299: LD_INT 3
52301: PPUSH
52302: CALL_OW 275
52306: PUSH
52307: LD_VAR 0 11
52311: PUSH
52312: LD_INT 3
52314: ARRAY
52315: GREATEREQUAL
52316: AND
52317: NOT
52318: IFFALSE 52322
// exit ;
52320: GO 52909
// if GetBType ( depot ) = b_depot then
52322: LD_VAR 0 1
52326: PPUSH
52327: CALL_OW 266
52331: PUSH
52332: LD_INT 0
52334: EQUAL
52335: IFFALSE 52347
// dist := 28 else
52337: LD_ADDR_VAR 0 14
52341: PUSH
52342: LD_INT 28
52344: ST_TO_ADDR
52345: GO 52355
// dist := 36 ;
52347: LD_ADDR_VAR 0 14
52351: PUSH
52352: LD_INT 36
52354: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52355: LD_VAR 0 1
52359: PPUSH
52360: LD_VAR 0 3
52364: PPUSH
52365: LD_VAR 0 4
52369: PPUSH
52370: CALL_OW 297
52374: PUSH
52375: LD_VAR 0 14
52379: GREATER
52380: IFFALSE 52384
// exit ;
52382: GO 52909
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52384: LD_ADDR_VAR 0 12
52388: PUSH
52389: LD_VAR 0 2
52393: PPUSH
52394: LD_VAR 0 3
52398: PPUSH
52399: LD_VAR 0 4
52403: PPUSH
52404: LD_VAR 0 5
52408: PPUSH
52409: LD_VAR 0 1
52413: PPUSH
52414: CALL_OW 248
52418: PPUSH
52419: LD_INT 0
52421: PPUSH
52422: CALL 52914 0 6
52426: ST_TO_ADDR
// if not hexes then
52427: LD_VAR 0 12
52431: NOT
52432: IFFALSE 52436
// exit ;
52434: GO 52909
// hex := GetHexInfo ( x , y ) ;
52436: LD_ADDR_VAR 0 15
52440: PUSH
52441: LD_VAR 0 3
52445: PPUSH
52446: LD_VAR 0 4
52450: PPUSH
52451: CALL_OW 546
52455: ST_TO_ADDR
// if hex [ 1 ] then
52456: LD_VAR 0 15
52460: PUSH
52461: LD_INT 1
52463: ARRAY
52464: IFFALSE 52468
// exit ;
52466: GO 52909
// height := hex [ 2 ] ;
52468: LD_ADDR_VAR 0 13
52472: PUSH
52473: LD_VAR 0 15
52477: PUSH
52478: LD_INT 2
52480: ARRAY
52481: ST_TO_ADDR
// for i = 1 to hexes do
52482: LD_ADDR_VAR 0 7
52486: PUSH
52487: DOUBLE
52488: LD_INT 1
52490: DEC
52491: ST_TO_ADDR
52492: LD_VAR 0 12
52496: PUSH
52497: FOR_TO
52498: IFFALSE 52828
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52500: LD_VAR 0 12
52504: PUSH
52505: LD_VAR 0 7
52509: ARRAY
52510: PUSH
52511: LD_INT 1
52513: ARRAY
52514: PPUSH
52515: LD_VAR 0 12
52519: PUSH
52520: LD_VAR 0 7
52524: ARRAY
52525: PUSH
52526: LD_INT 2
52528: ARRAY
52529: PPUSH
52530: CALL_OW 488
52534: NOT
52535: PUSH
52536: LD_VAR 0 12
52540: PUSH
52541: LD_VAR 0 7
52545: ARRAY
52546: PUSH
52547: LD_INT 1
52549: ARRAY
52550: PPUSH
52551: LD_VAR 0 12
52555: PUSH
52556: LD_VAR 0 7
52560: ARRAY
52561: PUSH
52562: LD_INT 2
52564: ARRAY
52565: PPUSH
52566: CALL_OW 428
52570: PUSH
52571: LD_INT 0
52573: GREATER
52574: OR
52575: PUSH
52576: LD_VAR 0 12
52580: PUSH
52581: LD_VAR 0 7
52585: ARRAY
52586: PUSH
52587: LD_INT 1
52589: ARRAY
52590: PPUSH
52591: LD_VAR 0 12
52595: PUSH
52596: LD_VAR 0 7
52600: ARRAY
52601: PUSH
52602: LD_INT 2
52604: ARRAY
52605: PPUSH
52606: CALL_OW 351
52610: OR
52611: IFFALSE 52617
// exit ;
52613: POP
52614: POP
52615: GO 52909
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52617: LD_ADDR_VAR 0 8
52621: PUSH
52622: LD_VAR 0 12
52626: PUSH
52627: LD_VAR 0 7
52631: ARRAY
52632: PUSH
52633: LD_INT 1
52635: ARRAY
52636: PPUSH
52637: LD_VAR 0 12
52641: PUSH
52642: LD_VAR 0 7
52646: ARRAY
52647: PUSH
52648: LD_INT 2
52650: ARRAY
52651: PPUSH
52652: CALL_OW 546
52656: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52657: LD_VAR 0 8
52661: PUSH
52662: LD_INT 1
52664: ARRAY
52665: PUSH
52666: LD_VAR 0 8
52670: PUSH
52671: LD_INT 2
52673: ARRAY
52674: PUSH
52675: LD_VAR 0 13
52679: PUSH
52680: LD_INT 2
52682: PLUS
52683: GREATER
52684: OR
52685: PUSH
52686: LD_VAR 0 8
52690: PUSH
52691: LD_INT 2
52693: ARRAY
52694: PUSH
52695: LD_VAR 0 13
52699: PUSH
52700: LD_INT 2
52702: MINUS
52703: LESS
52704: OR
52705: PUSH
52706: LD_VAR 0 8
52710: PUSH
52711: LD_INT 3
52713: ARRAY
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 8
52720: PUSH
52721: LD_INT 9
52723: PUSH
52724: LD_INT 10
52726: PUSH
52727: LD_INT 11
52729: PUSH
52730: LD_INT 12
52732: PUSH
52733: LD_INT 13
52735: PUSH
52736: LD_INT 16
52738: PUSH
52739: LD_INT 17
52741: PUSH
52742: LD_INT 18
52744: PUSH
52745: LD_INT 19
52747: PUSH
52748: LD_INT 20
52750: PUSH
52751: LD_INT 21
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: IN
52769: NOT
52770: OR
52771: PUSH
52772: LD_VAR 0 8
52776: PUSH
52777: LD_INT 5
52779: ARRAY
52780: NOT
52781: OR
52782: PUSH
52783: LD_VAR 0 8
52787: PUSH
52788: LD_INT 6
52790: ARRAY
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: LD_INT 7
52800: PUSH
52801: LD_INT 9
52803: PUSH
52804: LD_INT 10
52806: PUSH
52807: LD_INT 11
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: IN
52818: NOT
52819: OR
52820: IFFALSE 52826
// exit ;
52822: POP
52823: POP
52824: GO 52909
// end ;
52826: GO 52497
52828: POP
52829: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52830: LD_VAR 0 9
52834: PPUSH
52835: LD_VAR 0 3
52839: PPUSH
52840: LD_VAR 0 4
52844: PPUSH
52845: LD_INT 20
52847: PPUSH
52848: CALL 44861 0 4
52852: PUSH
52853: LD_INT 4
52855: ARRAY
52856: IFFALSE 52860
// exit ;
52858: GO 52909
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52860: LD_VAR 0 2
52864: PUSH
52865: LD_INT 29
52867: PUSH
52868: LD_INT 30
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: IN
52875: PUSH
52876: LD_VAR 0 3
52880: PPUSH
52881: LD_VAR 0 4
52885: PPUSH
52886: LD_VAR 0 9
52890: PPUSH
52891: CALL_OW 440
52895: NOT
52896: AND
52897: IFFALSE 52901
// exit ;
52899: GO 52909
// result := true ;
52901: LD_ADDR_VAR 0 6
52905: PUSH
52906: LD_INT 1
52908: ST_TO_ADDR
// end ;
52909: LD_VAR 0 6
52913: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52914: LD_INT 0
52916: PPUSH
52917: PPUSH
52918: PPUSH
52919: PPUSH
52920: PPUSH
52921: PPUSH
52922: PPUSH
52923: PPUSH
52924: PPUSH
52925: PPUSH
52926: PPUSH
52927: PPUSH
52928: PPUSH
52929: PPUSH
52930: PPUSH
52931: PPUSH
52932: PPUSH
52933: PPUSH
52934: PPUSH
52935: PPUSH
52936: PPUSH
52937: PPUSH
52938: PPUSH
52939: PPUSH
52940: PPUSH
52941: PPUSH
52942: PPUSH
52943: PPUSH
52944: PPUSH
52945: PPUSH
52946: PPUSH
52947: PPUSH
52948: PPUSH
52949: PPUSH
52950: PPUSH
52951: PPUSH
52952: PPUSH
52953: PPUSH
52954: PPUSH
52955: PPUSH
52956: PPUSH
52957: PPUSH
52958: PPUSH
52959: PPUSH
52960: PPUSH
52961: PPUSH
52962: PPUSH
52963: PPUSH
52964: PPUSH
52965: PPUSH
52966: PPUSH
52967: PPUSH
52968: PPUSH
52969: PPUSH
52970: PPUSH
52971: PPUSH
52972: PPUSH
52973: PPUSH
// result = [ ] ;
52974: LD_ADDR_VAR 0 7
52978: PUSH
52979: EMPTY
52980: ST_TO_ADDR
// temp_list = [ ] ;
52981: LD_ADDR_VAR 0 9
52985: PUSH
52986: EMPTY
52987: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52988: LD_VAR 0 4
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 2
53001: PUSH
53002: LD_INT 3
53004: PUSH
53005: LD_INT 4
53007: PUSH
53008: LD_INT 5
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: IN
53019: NOT
53020: PUSH
53021: LD_VAR 0 1
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: IN
53036: PUSH
53037: LD_VAR 0 5
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: LD_INT 3
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: LIST
53055: IN
53056: NOT
53057: AND
53058: OR
53059: IFFALSE 53063
// exit ;
53061: GO 71454
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53063: LD_VAR 0 1
53067: PUSH
53068: LD_INT 6
53070: PUSH
53071: LD_INT 7
53073: PUSH
53074: LD_INT 8
53076: PUSH
53077: LD_INT 13
53079: PUSH
53080: LD_INT 12
53082: PUSH
53083: LD_INT 15
53085: PUSH
53086: LD_INT 11
53088: PUSH
53089: LD_INT 14
53091: PUSH
53092: LD_INT 10
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: IN
53106: IFFALSE 53116
// btype = b_lab ;
53108: LD_ADDR_VAR 0 1
53112: PUSH
53113: LD_INT 6
53115: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53116: LD_VAR 0 6
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: IN
53135: NOT
53136: PUSH
53137: LD_VAR 0 1
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: LD_INT 3
53153: PUSH
53154: LD_INT 6
53156: PUSH
53157: LD_INT 36
53159: PUSH
53160: LD_INT 4
53162: PUSH
53163: LD_INT 5
53165: PUSH
53166: LD_INT 31
53168: PUSH
53169: LD_INT 32
53171: PUSH
53172: LD_INT 33
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: IN
53188: NOT
53189: PUSH
53190: LD_VAR 0 6
53194: PUSH
53195: LD_INT 1
53197: EQUAL
53198: AND
53199: OR
53200: PUSH
53201: LD_VAR 0 1
53205: PUSH
53206: LD_INT 2
53208: PUSH
53209: LD_INT 3
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: IN
53216: NOT
53217: PUSH
53218: LD_VAR 0 6
53222: PUSH
53223: LD_INT 2
53225: EQUAL
53226: AND
53227: OR
53228: IFFALSE 53238
// mode = 0 ;
53230: LD_ADDR_VAR 0 6
53234: PUSH
53235: LD_INT 0
53237: ST_TO_ADDR
// case mode of 0 :
53238: LD_VAR 0 6
53242: PUSH
53243: LD_INT 0
53245: DOUBLE
53246: EQUAL
53247: IFTRUE 53251
53249: GO 64704
53251: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53252: LD_ADDR_VAR 0 11
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: LD_INT 2
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: LD_INT 2
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: LD_INT 3
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53445: LD_ADDR_VAR 0 12
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: NEG
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 3
53613: NEG
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53641: LD_ADDR_VAR 0 13
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: LD_INT 2
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: LD_INT 3
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 3
53800: NEG
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 3
53812: NEG
53813: PUSH
53814: LD_INT 3
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53840: LD_ADDR_VAR 0 14
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: LD_INT 3
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: LD_INT 3
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54036: LD_ADDR_VAR 0 15
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 2
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 3
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54229: LD_ADDR_VAR 0 16
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: NEG
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 2
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: LD_INT 2
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 2
54364: NEG
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 3
54386: PUSH
54387: LD_INT 3
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: LD_INT 3
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54422: LD_ADDR_VAR 0 17
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: LD_INT 2
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54652: LD_ADDR_VAR 0 18
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 1
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 2
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: LD_INT 2
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 2
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: NEG
54852: PUSH
54853: LD_INT 2
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54882: LD_ADDR_VAR 0 19
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 2
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: LD_INT 2
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55112: LD_ADDR_VAR 0 20
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 2
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 2
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: LD_INT 2
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55342: LD_ADDR_VAR 0 21
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: NEG
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 2
55541: NEG
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55572: LD_ADDR_VAR 0 22
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: LD_INT 1
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: LD_INT 2
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: LD_INT 2
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: LD_INT 2
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: NEG
55772: PUSH
55773: LD_INT 2
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55802: LD_ADDR_VAR 0 23
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: NEG
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: NEG
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: LD_INT 3
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 3
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56082: LD_ADDR_VAR 0 24
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: NEG
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: LD_INT 2
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 3
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56358: LD_ADDR_VAR 0 25
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 3
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 3
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: LD_INT 3
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 3
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56632: LD_ADDR_VAR 0 26
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 2
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 2
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 2
56808: NEG
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: LD_INT 2
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: LD_INT 3
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 3
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56908: LD_ADDR_VAR 0 27
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: LD_INT 2
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 2
57095: NEG
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 3
57141: NEG
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 3
57153: NEG
57154: PUSH
57155: LD_INT 2
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57188: LD_ADDR_VAR 0 28
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 2
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 2
57375: NEG
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 3
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 3
57435: NEG
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57470: LD_ADDR_VAR 0 29
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: NEG
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: LD_INT 3
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 3
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: LD_INT 3
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: LD_INT 2
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 3
57714: NEG
57715: PUSH
57716: LD_INT 2
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57749: LD_ADDR_VAR 0 30
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 2
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: NEG
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: NEG
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 3
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 3
57961: PUSH
57962: LD_INT 2
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: PUSH
57972: LD_INT 3
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 2
57981: NEG
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 3
57992: NEG
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58027: LD_ADDR_VAR 0 31
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: NEG
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: NEG
58109: PUSH
58110: LD_INT 2
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 2
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: NEG
58205: PUSH
58206: LD_INT 2
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: LD_INT 3
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 3
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: LD_INT 3
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: LD_INT 2
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 3
58270: NEG
58271: PUSH
58272: LD_INT 2
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58305: LD_ADDR_VAR 0 32
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: LD_INT 2
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: LD_INT 2
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: LD_INT 1
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: LD_INT 2
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: LD_INT 2
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: LD_INT 3
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 2
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 3
58517: PUSH
58518: LD_INT 2
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 2
58527: PUSH
58528: LD_INT 3
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: NEG
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58583: LD_ADDR_VAR 0 33
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 2
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 2
58749: NEG
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: LD_INT 2
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: LD_INT 3
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 3
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: LD_INT 3
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: LD_INT 2
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 3
58827: NEG
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58862: LD_ADDR_VAR 0 34
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: LD_INT 2
58947: NEG
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: LD_INT 2
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: NEG
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: NEG
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 2
59041: NEG
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: LD_INT 3
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: LD_INT 2
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 3
59076: PUSH
59077: LD_INT 2
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 2
59086: PUSH
59087: LD_INT 3
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 3
59107: NEG
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59142: LD_ADDR_VAR 0 35
59146: PUSH
59147: LD_INT 0
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: NEG
59201: PUSH
59202: LD_INT 0
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: LD_INT 1
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: NEG
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59254: LD_ADDR_VAR 0 36
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: LD_INT 2
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59366: LD_ADDR_VAR 0 37
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59478: LD_ADDR_VAR 0 38
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 2
59559: PUSH
59560: LD_INT 1
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 2
59569: NEG
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59590: LD_ADDR_VAR 0 39
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: LD_INT 1
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: NEG
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 1
59671: NEG
59672: PUSH
59673: LD_INT 2
59675: NEG
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59702: LD_ADDR_VAR 0 40
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59814: LD_ADDR_VAR 0 41
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: LD_INT 1
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: LD_INT 2
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: NEG
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: NEG
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 2
59992: NEG
59993: PUSH
59994: LD_INT 2
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: LD_INT 3
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 3
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 3
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 3
60057: PUSH
60058: LD_INT 3
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: LD_INT 3
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 2
60077: NEG
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 3
60088: NEG
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 3
60099: NEG
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 3
60111: NEG
60112: PUSH
60113: LD_INT 2
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 3
60123: NEG
60124: PUSH
60125: LD_INT 3
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60164: LD_ADDR_VAR 0 42
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: LD_INT 1
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: LD_INT 2
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: LD_INT 2
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 2
60279: PUSH
60280: LD_INT 1
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: LD_INT 2
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 1
60299: PUSH
60300: LD_INT 2
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: LD_INT 2
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 2
60330: NEG
60331: PUSH
60332: LD_INT 1
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: LD_INT 2
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: LD_INT 3
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: LD_INT 3
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: LD_INT 3
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: LD_INT 2
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 3
60400: PUSH
60401: LD_INT 2
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 3
60410: PUSH
60411: LD_INT 3
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 2
60420: PUSH
60421: LD_INT 3
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 1
60430: PUSH
60431: LD_INT 3
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: LD_INT 3
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 2
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 3
60461: NEG
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 3
60473: NEG
60474: PUSH
60475: LD_INT 3
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60514: LD_ADDR_VAR 0 43
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: NEG
60596: PUSH
60597: LD_INT 2
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: LD_INT 2
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 2
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 2
60680: NEG
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 2
60691: NEG
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: LD_INT 3
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: LD_INT 3
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: LD_INT 2
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 2
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 3
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 3
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: LD_INT 3
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: LD_INT 2
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 3
60810: NEG
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 3
60821: NEG
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60862: LD_ADDR_VAR 0 44
60866: PUSH
60867: LD_INT 0
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: LD_INT 1
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 1
60931: NEG
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: LD_INT 2
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: LD_INT 2
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 2
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: NEG
61053: PUSH
61054: LD_INT 3
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 2
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 3
61075: PUSH
61076: LD_INT 0
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 3
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 3
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 3
61105: PUSH
61106: LD_INT 3
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 2
61115: PUSH
61116: LD_INT 3
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 2
61125: NEG
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: NEG
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 3
61147: NEG
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 3
61159: NEG
61160: PUSH
61161: LD_INT 2
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 3
61171: NEG
61172: PUSH
61173: LD_INT 3
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61212: LD_ADDR_VAR 0 45
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 0
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: NEG
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: LD_INT 2
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 2
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: PUSH
61338: LD_INT 2
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: LD_INT 2
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: LD_INT 2
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: LD_INT 1
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: LD_INT 2
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: NEG
61403: PUSH
61404: LD_INT 3
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: LD_INT 3
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: LD_INT 3
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: LD_INT 2
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 3
61448: PUSH
61449: LD_INT 2
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 3
61458: PUSH
61459: LD_INT 3
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 2
61468: PUSH
61469: LD_INT 3
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: LD_INT 3
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 3
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 3
61509: NEG
61510: PUSH
61511: LD_INT 2
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 3
61521: NEG
61522: PUSH
61523: LD_INT 3
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61562: LD_ADDR_VAR 0 46
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 0
61655: PUSH
61656: LD_INT 2
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: LD_INT 1
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: PUSH
61688: LD_INT 1
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: PUSH
61698: LD_INT 2
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: LD_INT 2
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 1
61717: NEG
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 2
61739: NEG
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 0
61763: PUSH
61764: LD_INT 3
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 1
61774: PUSH
61775: LD_INT 2
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 2
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 3
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 3
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: LD_INT 3
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_INT 3
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: LD_INT 2
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 2
61847: NEG
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 3
61858: NEG
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 3
61869: NEG
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61910: LD_ADDR_VAR 0 47
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: LD_INT 0
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 1
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 1
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: LD_INT 1
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: NEG
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: LD_INT 2
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 2
62025: NEG
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 2
62037: NEG
62038: PUSH
62039: LD_INT 2
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62061: LD_ADDR_VAR 0 48
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 1
62142: NEG
62143: PUSH
62144: LD_INT 2
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 1
62165: PUSH
62166: LD_INT 1
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 2
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62208: LD_ADDR_VAR 0 49
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: LD_INT 1
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: LD_INT 1
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 1
62266: NEG
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 2
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 2
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 2
62320: PUSH
62321: LD_INT 2
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: LD_INT 2
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62352: LD_ADDR_VAR 0 50
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 2
62443: PUSH
62444: LD_INT 2
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: LD_INT 2
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: LD_INT 2
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: LD_INT 1
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62496: LD_ADDR_VAR 0 51
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 0
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: LD_INT 2
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 2
62608: NEG
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 2
62619: NEG
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62643: LD_ADDR_VAR 0 52
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: LD_INT 0
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: LD_INT 1
62663: NEG
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 0
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 1
62712: NEG
62713: PUSH
62714: LD_INT 1
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: LD_INT 2
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 2
62747: NEG
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 2
62758: NEG
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 2
62770: NEG
62771: PUSH
62772: LD_INT 2
62774: NEG
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62794: LD_ADDR_VAR 0 53
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: LD_INT 1
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: NEG
62876: PUSH
62877: LD_INT 2
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: LD_INT 2
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 1
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 2
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 2
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 2
62929: PUSH
62930: LD_INT 2
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: LD_INT 2
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: LD_INT 2
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 2
62970: NEG
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 2
62981: NEG
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 2
62993: NEG
62994: PUSH
62995: LD_INT 2
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63024: LD_ADDR_VAR 0 54
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: LD_INT 1
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: LD_INT 2
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: LD_INT 2
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 2
63139: PUSH
63140: LD_INT 0
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 2
63149: PUSH
63150: LD_INT 1
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: LD_INT 2
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: LD_INT 2
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 2
63200: NEG
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 2
63211: NEG
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 2
63223: NEG
63224: PUSH
63225: LD_INT 2
63227: NEG
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63254: LD_ADDR_VAR 0 55
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 1
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: LD_INT 1
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: LD_INT 1
63327: NEG
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 1
63335: NEG
63336: PUSH
63337: LD_INT 2
63339: NEG
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: LD_INT 2
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: LD_INT 0
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: LD_INT 2
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: LD_INT 2
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 2
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 2
63430: NEG
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 2
63441: NEG
63442: PUSH
63443: LD_INT 1
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 2
63453: NEG
63454: PUSH
63455: LD_INT 2
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63484: LD_ADDR_VAR 0 56
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: LD_INT 1
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: LD_INT 1
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 1
63542: NEG
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: NEG
63554: PUSH
63555: LD_INT 1
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: LD_INT 2
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 0
63577: PUSH
63578: LD_INT 2
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 1
63588: PUSH
63589: LD_INT 1
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 2
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 2
63609: PUSH
63610: LD_INT 1
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 2
63619: PUSH
63620: LD_INT 2
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: PUSH
63630: LD_INT 2
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 0
63639: PUSH
63640: LD_INT 2
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 2
63660: NEG
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 2
63671: NEG
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 2
63683: NEG
63684: PUSH
63685: LD_INT 2
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63714: LD_ADDR_VAR 0 57
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: PUSH
63753: LD_INT 1
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: LD_INT 1
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 1
63772: NEG
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 1
63783: NEG
63784: PUSH
63785: LD_INT 1
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: LD_INT 2
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 0
63807: PUSH
63808: LD_INT 2
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 2
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 2
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 2
63849: PUSH
63850: LD_INT 2
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 1
63859: PUSH
63860: LD_INT 2
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 0
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: LD_INT 1
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 2
63890: NEG
63891: PUSH
63892: LD_INT 0
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 2
63901: NEG
63902: PUSH
63903: LD_INT 1
63905: NEG
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 2
63913: NEG
63914: PUSH
63915: LD_INT 2
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63944: LD_ADDR_VAR 0 58
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: LD_INT 1
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: LD_INT 1
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 1
64013: NEG
64014: PUSH
64015: LD_INT 1
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: LD_INT 2
64029: NEG
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: LD_INT 2
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 2
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 2
64069: PUSH
64070: LD_INT 1
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 2
64079: PUSH
64080: LD_INT 2
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: LD_INT 2
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 0
64099: PUSH
64100: LD_INT 2
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 1
64109: NEG
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 2
64120: NEG
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 2
64131: NEG
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: LD_INT 2
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64174: LD_ADDR_VAR 0 59
64178: PUSH
64179: LD_INT 0
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 1
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: LD_INT 1
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: LD_INT 1
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64262: LD_ADDR_VAR 0 60
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: PUSH
64301: LD_INT 1
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 1
64331: NEG
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64350: LD_ADDR_VAR 0 61
64354: PUSH
64355: LD_INT 0
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: LD_INT 1
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 1
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 1
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: LD_INT 1
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: NEG
64420: PUSH
64421: LD_INT 1
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64438: LD_ADDR_VAR 0 62
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: LD_INT 1
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 1
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: LD_INT 1
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 1
64507: NEG
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64526: LD_ADDR_VAR 0 63
64530: PUSH
64531: LD_INT 0
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 0
64543: PUSH
64544: LD_INT 1
64546: NEG
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: LD_INT 1
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 1
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: LD_INT 0
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: NEG
64596: PUSH
64597: LD_INT 1
64599: NEG
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64614: LD_ADDR_VAR 0 64
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 0
64631: PUSH
64632: LD_INT 1
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: LD_INT 1
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: LD_INT 1
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: LD_INT 0
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: ST_TO_ADDR
// end ; 1 :
64702: GO 70599
64704: LD_INT 1
64706: DOUBLE
64707: EQUAL
64708: IFTRUE 64712
64710: GO 67335
64712: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64713: LD_ADDR_VAR 0 11
64717: PUSH
64718: LD_INT 1
64720: NEG
64721: PUSH
64722: LD_INT 3
64724: NEG
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: LD_INT 3
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 1
64743: PUSH
64744: LD_INT 2
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: LIST
64756: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64757: LD_ADDR_VAR 0 12
64761: PUSH
64762: LD_INT 2
64764: PUSH
64765: LD_INT 1
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 3
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 3
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: LIST
64797: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64798: LD_ADDR_VAR 0 13
64802: PUSH
64803: LD_INT 3
64805: PUSH
64806: LD_INT 2
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 3
64815: PUSH
64816: LD_INT 3
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 2
64825: PUSH
64826: LD_INT 3
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: LIST
64837: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64838: LD_ADDR_VAR 0 14
64842: PUSH
64843: LD_INT 1
64845: PUSH
64846: LD_INT 3
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: LD_INT 3
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 1
64865: NEG
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: LIST
64878: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64879: LD_ADDR_VAR 0 15
64883: PUSH
64884: LD_INT 2
64886: NEG
64887: PUSH
64888: LD_INT 1
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 3
64897: NEG
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 3
64908: NEG
64909: PUSH
64910: LD_INT 1
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: LIST
64922: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64923: LD_ADDR_VAR 0 16
64927: PUSH
64928: LD_INT 2
64930: NEG
64931: PUSH
64932: LD_INT 3
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 3
64942: NEG
64943: PUSH
64944: LD_INT 2
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 3
64954: NEG
64955: PUSH
64956: LD_INT 3
64958: NEG
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: LIST
64968: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64969: LD_ADDR_VAR 0 17
64973: PUSH
64974: LD_INT 1
64976: NEG
64977: PUSH
64978: LD_INT 3
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: LD_INT 3
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 1
64999: PUSH
65000: LD_INT 2
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: LIST
65012: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65013: LD_ADDR_VAR 0 18
65017: PUSH
65018: LD_INT 2
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 3
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 3
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65054: LD_ADDR_VAR 0 19
65058: PUSH
65059: LD_INT 3
65061: PUSH
65062: LD_INT 2
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 3
65071: PUSH
65072: LD_INT 3
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 2
65081: PUSH
65082: LD_INT 3
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: LIST
65093: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65094: LD_ADDR_VAR 0 20
65098: PUSH
65099: LD_INT 1
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 0
65111: PUSH
65112: LD_INT 3
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: LD_INT 2
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: LIST
65134: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65135: LD_ADDR_VAR 0 21
65139: PUSH
65140: LD_INT 2
65142: NEG
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 3
65153: NEG
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 3
65164: NEG
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: LIST
65178: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65179: LD_ADDR_VAR 0 22
65183: PUSH
65184: LD_INT 2
65186: NEG
65187: PUSH
65188: LD_INT 3
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 3
65198: NEG
65199: PUSH
65200: LD_INT 2
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 3
65210: NEG
65211: PUSH
65212: LD_INT 3
65214: NEG
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: LIST
65224: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65225: LD_ADDR_VAR 0 23
65229: PUSH
65230: LD_INT 0
65232: PUSH
65233: LD_INT 3
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: PUSH
65245: LD_INT 4
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: LD_INT 3
65258: NEG
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: LIST
65268: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65269: LD_ADDR_VAR 0 24
65273: PUSH
65274: LD_INT 3
65276: PUSH
65277: LD_INT 0
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 3
65286: PUSH
65287: LD_INT 1
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 4
65297: PUSH
65298: LD_INT 1
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: LIST
65309: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65310: LD_ADDR_VAR 0 25
65314: PUSH
65315: LD_INT 3
65317: PUSH
65318: LD_INT 3
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 4
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 3
65337: PUSH
65338: LD_INT 4
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: LIST
65349: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65350: LD_ADDR_VAR 0 26
65354: PUSH
65355: LD_INT 0
65357: PUSH
65358: LD_INT 3
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 1
65367: PUSH
65368: LD_INT 4
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 1
65377: NEG
65378: PUSH
65379: LD_INT 3
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: LIST
65390: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65391: LD_ADDR_VAR 0 27
65395: PUSH
65396: LD_INT 3
65398: NEG
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 3
65409: NEG
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 4
65420: NEG
65421: PUSH
65422: LD_INT 1
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: LIST
65434: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65435: LD_ADDR_VAR 0 28
65439: PUSH
65440: LD_INT 3
65442: NEG
65443: PUSH
65444: LD_INT 3
65446: NEG
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 3
65454: NEG
65455: PUSH
65456: LD_INT 4
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 4
65466: NEG
65467: PUSH
65468: LD_INT 3
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: LIST
65480: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65481: LD_ADDR_VAR 0 29
65485: PUSH
65486: LD_INT 1
65488: NEG
65489: PUSH
65490: LD_INT 3
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: LD_INT 3
65503: NEG
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: LD_INT 2
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 1
65522: NEG
65523: PUSH
65524: LD_INT 4
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 0
65534: PUSH
65535: LD_INT 4
65537: NEG
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 1
65545: PUSH
65546: LD_INT 3
65548: NEG
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 1
65556: NEG
65557: PUSH
65558: LD_INT 5
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 0
65568: PUSH
65569: LD_INT 5
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: LD_INT 4
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: LD_INT 6
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: LD_INT 6
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: LD_INT 5
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65636: LD_ADDR_VAR 0 30
65640: PUSH
65641: LD_INT 2
65643: PUSH
65644: LD_INT 1
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 3
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 3
65664: PUSH
65665: LD_INT 1
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 3
65674: PUSH
65675: LD_INT 1
65677: NEG
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 4
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 4
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 4
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 5
65716: PUSH
65717: LD_INT 0
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 5
65726: PUSH
65727: LD_INT 1
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 5
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 6
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 6
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65779: LD_ADDR_VAR 0 31
65783: PUSH
65784: LD_INT 3
65786: PUSH
65787: LD_INT 2
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 3
65796: PUSH
65797: LD_INT 3
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 2
65806: PUSH
65807: LD_INT 3
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 4
65816: PUSH
65817: LD_INT 3
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 4
65826: PUSH
65827: LD_INT 4
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 3
65836: PUSH
65837: LD_INT 4
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 5
65846: PUSH
65847: LD_INT 4
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 5
65856: PUSH
65857: LD_INT 5
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 4
65866: PUSH
65867: LD_INT 5
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 6
65876: PUSH
65877: LD_INT 5
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 6
65886: PUSH
65887: LD_INT 6
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 5
65896: PUSH
65897: LD_INT 6
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65918: LD_ADDR_VAR 0 32
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: LD_INT 3
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: LD_INT 3
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 1
65945: NEG
65946: PUSH
65947: LD_INT 2
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 1
65956: PUSH
65957: LD_INT 4
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 0
65966: PUSH
65967: LD_INT 4
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: LD_INT 3
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 1
65987: PUSH
65988: LD_INT 5
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: LD_INT 5
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 1
66007: NEG
66008: PUSH
66009: LD_INT 4
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 1
66018: PUSH
66019: LD_INT 6
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 0
66028: PUSH
66029: LD_INT 6
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 1
66038: NEG
66039: PUSH
66040: LD_INT 5
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66061: LD_ADDR_VAR 0 33
66065: PUSH
66066: LD_INT 2
66068: NEG
66069: PUSH
66070: LD_INT 1
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 3
66079: NEG
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 3
66090: NEG
66091: PUSH
66092: LD_INT 1
66094: NEG
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 3
66102: NEG
66103: PUSH
66104: LD_INT 1
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 4
66113: NEG
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 4
66124: NEG
66125: PUSH
66126: LD_INT 1
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 4
66136: NEG
66137: PUSH
66138: LD_INT 1
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 5
66147: NEG
66148: PUSH
66149: LD_INT 0
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 5
66158: NEG
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 5
66170: NEG
66171: PUSH
66172: LD_INT 1
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 6
66181: NEG
66182: PUSH
66183: LD_INT 0
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 6
66192: NEG
66193: PUSH
66194: LD_INT 1
66196: NEG
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66216: LD_ADDR_VAR 0 34
66220: PUSH
66221: LD_INT 2
66223: NEG
66224: PUSH
66225: LD_INT 3
66227: NEG
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 3
66235: NEG
66236: PUSH
66237: LD_INT 2
66239: NEG
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 3
66247: NEG
66248: PUSH
66249: LD_INT 3
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 3
66259: NEG
66260: PUSH
66261: LD_INT 4
66263: NEG
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 4
66271: NEG
66272: PUSH
66273: LD_INT 3
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 4
66283: NEG
66284: PUSH
66285: LD_INT 4
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 4
66295: NEG
66296: PUSH
66297: LD_INT 5
66299: NEG
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 5
66307: NEG
66308: PUSH
66309: LD_INT 4
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 5
66319: NEG
66320: PUSH
66321: LD_INT 5
66323: NEG
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 5
66331: NEG
66332: PUSH
66333: LD_INT 6
66335: NEG
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 6
66343: NEG
66344: PUSH
66345: LD_INT 5
66347: NEG
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 6
66355: NEG
66356: PUSH
66357: LD_INT 6
66359: NEG
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66379: LD_ADDR_VAR 0 41
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 2
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 1
66397: NEG
66398: PUSH
66399: LD_INT 3
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 1
66409: PUSH
66410: LD_INT 2
66412: NEG
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: LIST
66422: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66423: LD_ADDR_VAR 0 42
66427: PUSH
66428: LD_INT 2
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 2
66440: PUSH
66441: LD_INT 1
66443: NEG
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 3
66451: PUSH
66452: LD_INT 1
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: LIST
66463: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66464: LD_ADDR_VAR 0 43
66468: PUSH
66469: LD_INT 2
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 3
66481: PUSH
66482: LD_INT 2
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 2
66491: PUSH
66492: LD_INT 3
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: LIST
66503: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66504: LD_ADDR_VAR 0 44
66508: PUSH
66509: LD_INT 0
66511: PUSH
66512: LD_INT 2
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 1
66521: PUSH
66522: LD_INT 3
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 1
66531: NEG
66532: PUSH
66533: LD_INT 2
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: LIST
66544: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66545: LD_ADDR_VAR 0 45
66549: PUSH
66550: LD_INT 2
66552: NEG
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 2
66563: NEG
66564: PUSH
66565: LD_INT 1
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 3
66574: NEG
66575: PUSH
66576: LD_INT 1
66578: NEG
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: LIST
66588: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66589: LD_ADDR_VAR 0 46
66593: PUSH
66594: LD_INT 2
66596: NEG
66597: PUSH
66598: LD_INT 2
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 2
66608: NEG
66609: PUSH
66610: LD_INT 3
66612: NEG
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 3
66620: NEG
66621: PUSH
66622: LD_INT 2
66624: NEG
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: LIST
66634: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66635: LD_ADDR_VAR 0 47
66639: PUSH
66640: LD_INT 2
66642: NEG
66643: PUSH
66644: LD_INT 3
66646: NEG
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: LD_INT 3
66658: NEG
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66668: LD_ADDR_VAR 0 48
66672: PUSH
66673: LD_INT 1
66675: PUSH
66676: LD_INT 2
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 2
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66699: LD_ADDR_VAR 0 49
66703: PUSH
66704: LD_INT 3
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 3
66716: PUSH
66717: LD_INT 2
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66728: LD_ADDR_VAR 0 50
66732: PUSH
66733: LD_INT 2
66735: PUSH
66736: LD_INT 3
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 1
66745: PUSH
66746: LD_INT 3
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66757: LD_ADDR_VAR 0 51
66761: PUSH
66762: LD_INT 1
66764: NEG
66765: PUSH
66766: LD_INT 2
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 2
66775: NEG
66776: PUSH
66777: LD_INT 1
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66788: LD_ADDR_VAR 0 52
66792: PUSH
66793: LD_INT 3
66795: NEG
66796: PUSH
66797: LD_INT 1
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 3
66807: NEG
66808: PUSH
66809: LD_INT 2
66811: NEG
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66821: LD_ADDR_VAR 0 53
66825: PUSH
66826: LD_INT 1
66828: NEG
66829: PUSH
66830: LD_INT 3
66832: NEG
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 0
66840: PUSH
66841: LD_INT 3
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 1
66851: PUSH
66852: LD_INT 2
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: LIST
66864: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66865: LD_ADDR_VAR 0 54
66869: PUSH
66870: LD_INT 2
66872: PUSH
66873: LD_INT 1
66875: NEG
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 3
66883: PUSH
66884: LD_INT 0
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 3
66893: PUSH
66894: LD_INT 1
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: LIST
66905: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66906: LD_ADDR_VAR 0 55
66910: PUSH
66911: LD_INT 3
66913: PUSH
66914: LD_INT 2
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 3
66923: PUSH
66924: LD_INT 3
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 2
66933: PUSH
66934: LD_INT 3
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: LIST
66945: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66946: LD_ADDR_VAR 0 56
66950: PUSH
66951: LD_INT 1
66953: PUSH
66954: LD_INT 3
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 0
66963: PUSH
66964: LD_INT 3
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 1
66973: NEG
66974: PUSH
66975: LD_INT 2
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: LIST
66986: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66987: LD_ADDR_VAR 0 57
66991: PUSH
66992: LD_INT 2
66994: NEG
66995: PUSH
66996: LD_INT 1
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 3
67005: NEG
67006: PUSH
67007: LD_INT 0
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 3
67016: NEG
67017: PUSH
67018: LD_INT 1
67020: NEG
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: LIST
67030: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67031: LD_ADDR_VAR 0 58
67035: PUSH
67036: LD_INT 2
67038: NEG
67039: PUSH
67040: LD_INT 3
67042: NEG
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 3
67050: NEG
67051: PUSH
67052: LD_INT 2
67054: NEG
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 3
67062: NEG
67063: PUSH
67064: LD_INT 3
67066: NEG
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: LIST
67076: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67077: LD_ADDR_VAR 0 59
67081: PUSH
67082: LD_INT 1
67084: NEG
67085: PUSH
67086: LD_INT 2
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 0
67096: PUSH
67097: LD_INT 2
67099: NEG
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 1
67107: PUSH
67108: LD_INT 1
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: LIST
67120: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67121: LD_ADDR_VAR 0 60
67125: PUSH
67126: LD_INT 1
67128: PUSH
67129: LD_INT 1
67131: NEG
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 2
67139: PUSH
67140: LD_INT 0
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 2
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: LIST
67161: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67162: LD_ADDR_VAR 0 61
67166: PUSH
67167: LD_INT 2
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 2
67179: PUSH
67180: LD_INT 2
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 1
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: LIST
67201: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67202: LD_ADDR_VAR 0 62
67206: PUSH
67207: LD_INT 1
67209: PUSH
67210: LD_INT 2
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: LD_INT 2
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 1
67229: NEG
67230: PUSH
67231: LD_INT 1
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: LIST
67242: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67243: LD_ADDR_VAR 0 63
67247: PUSH
67248: LD_INT 1
67250: NEG
67251: PUSH
67252: LD_INT 1
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 2
67261: NEG
67262: PUSH
67263: LD_INT 0
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 2
67272: NEG
67273: PUSH
67274: LD_INT 1
67276: NEG
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: LIST
67286: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67287: LD_ADDR_VAR 0 64
67291: PUSH
67292: LD_INT 1
67294: NEG
67295: PUSH
67296: LD_INT 2
67298: NEG
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 2
67306: NEG
67307: PUSH
67308: LD_INT 1
67310: NEG
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 2
67318: NEG
67319: PUSH
67320: LD_INT 2
67322: NEG
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: LIST
67332: ST_TO_ADDR
// end ; 2 :
67333: GO 70599
67335: LD_INT 2
67337: DOUBLE
67338: EQUAL
67339: IFTRUE 67343
67341: GO 70598
67343: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67344: LD_ADDR_VAR 0 29
67348: PUSH
67349: LD_INT 4
67351: PUSH
67352: LD_INT 0
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 4
67361: PUSH
67362: LD_INT 1
67364: NEG
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 5
67372: PUSH
67373: LD_INT 0
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 5
67382: PUSH
67383: LD_INT 1
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 4
67392: PUSH
67393: LD_INT 1
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 3
67402: PUSH
67403: LD_INT 0
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 3
67412: PUSH
67413: LD_INT 1
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 3
67423: PUSH
67424: LD_INT 2
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 5
67434: PUSH
67435: LD_INT 2
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 3
67444: PUSH
67445: LD_INT 3
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 3
67454: PUSH
67455: LD_INT 2
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 4
67464: PUSH
67465: LD_INT 3
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 4
67474: PUSH
67475: LD_INT 4
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 3
67484: PUSH
67485: LD_INT 4
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 2
67494: PUSH
67495: LD_INT 3
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 2
67504: PUSH
67505: LD_INT 2
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 4
67514: PUSH
67515: LD_INT 2
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 2
67524: PUSH
67525: LD_INT 4
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: LD_INT 4
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 0
67544: PUSH
67545: LD_INT 3
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 1
67554: PUSH
67555: LD_INT 4
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 1
67564: PUSH
67565: LD_INT 5
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 0
67574: PUSH
67575: LD_INT 5
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: PUSH
67586: LD_INT 4
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 1
67595: NEG
67596: PUSH
67597: LD_INT 3
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 2
67606: PUSH
67607: LD_INT 5
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 2
67616: NEG
67617: PUSH
67618: LD_INT 3
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 3
67627: NEG
67628: PUSH
67629: LD_INT 0
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 3
67638: NEG
67639: PUSH
67640: LD_INT 1
67642: NEG
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 2
67650: NEG
67651: PUSH
67652: LD_INT 0
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 2
67661: NEG
67662: PUSH
67663: LD_INT 1
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 3
67672: NEG
67673: PUSH
67674: LD_INT 1
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 4
67683: NEG
67684: PUSH
67685: LD_INT 0
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 4
67694: NEG
67695: PUSH
67696: LD_INT 1
67698: NEG
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 4
67706: NEG
67707: PUSH
67708: LD_INT 2
67710: NEG
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 2
67718: NEG
67719: PUSH
67720: LD_INT 2
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 4
67729: NEG
67730: PUSH
67731: LD_INT 4
67733: NEG
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 4
67741: NEG
67742: PUSH
67743: LD_INT 5
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 3
67753: NEG
67754: PUSH
67755: LD_INT 4
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 3
67765: NEG
67766: PUSH
67767: LD_INT 3
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 4
67777: NEG
67778: PUSH
67779: LD_INT 3
67781: NEG
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 5
67789: NEG
67790: PUSH
67791: LD_INT 4
67793: NEG
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 5
67801: NEG
67802: PUSH
67803: LD_INT 5
67805: NEG
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 3
67813: NEG
67814: PUSH
67815: LD_INT 5
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 5
67825: NEG
67826: PUSH
67827: LD_INT 3
67829: NEG
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67882: LD_ADDR_VAR 0 30
67886: PUSH
67887: LD_INT 4
67889: PUSH
67890: LD_INT 4
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 4
67899: PUSH
67900: LD_INT 3
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 5
67909: PUSH
67910: LD_INT 4
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 5
67919: PUSH
67920: LD_INT 5
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 4
67929: PUSH
67930: LD_INT 5
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 3
67939: PUSH
67940: LD_INT 4
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 3
67949: PUSH
67950: LD_INT 3
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 5
67959: PUSH
67960: LD_INT 3
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 3
67969: PUSH
67970: LD_INT 5
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 0
67979: PUSH
67980: LD_INT 3
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 0
67989: PUSH
67990: LD_INT 2
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 1
67999: PUSH
68000: LD_INT 3
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 1
68009: PUSH
68010: LD_INT 4
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 0
68019: PUSH
68020: LD_INT 4
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 1
68029: NEG
68030: PUSH
68031: LD_INT 3
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 1
68040: NEG
68041: PUSH
68042: LD_INT 2
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 2
68051: PUSH
68052: LD_INT 4
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 2
68061: NEG
68062: PUSH
68063: LD_INT 2
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 4
68072: NEG
68073: PUSH
68074: LD_INT 0
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 4
68083: NEG
68084: PUSH
68085: LD_INT 1
68087: NEG
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 3
68095: NEG
68096: PUSH
68097: LD_INT 0
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 3
68106: NEG
68107: PUSH
68108: LD_INT 1
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 4
68117: NEG
68118: PUSH
68119: LD_INT 1
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 5
68128: NEG
68129: PUSH
68130: LD_INT 0
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 5
68139: NEG
68140: PUSH
68141: LD_INT 1
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 5
68151: NEG
68152: PUSH
68153: LD_INT 2
68155: NEG
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 3
68163: NEG
68164: PUSH
68165: LD_INT 2
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 3
68174: NEG
68175: PUSH
68176: LD_INT 3
68178: NEG
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 3
68186: NEG
68187: PUSH
68188: LD_INT 4
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 2
68198: NEG
68199: PUSH
68200: LD_INT 3
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 2
68210: NEG
68211: PUSH
68212: LD_INT 2
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 3
68222: NEG
68223: PUSH
68224: LD_INT 2
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 4
68234: NEG
68235: PUSH
68236: LD_INT 3
68238: NEG
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 4
68246: NEG
68247: PUSH
68248: LD_INT 4
68250: NEG
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 2
68258: NEG
68259: PUSH
68260: LD_INT 4
68262: NEG
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 4
68270: NEG
68271: PUSH
68272: LD_INT 2
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 0
68282: PUSH
68283: LD_INT 4
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 0
68293: PUSH
68294: LD_INT 5
68296: NEG
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 1
68304: PUSH
68305: LD_INT 4
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 1
68315: PUSH
68316: LD_INT 3
68318: NEG
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: LD_INT 3
68329: NEG
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 1
68337: NEG
68338: PUSH
68339: LD_INT 4
68341: NEG
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 1
68349: NEG
68350: PUSH
68351: LD_INT 5
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 2
68361: PUSH
68362: LD_INT 3
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 2
68372: NEG
68373: PUSH
68374: LD_INT 5
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68429: LD_ADDR_VAR 0 31
68433: PUSH
68434: LD_INT 0
68436: PUSH
68437: LD_INT 4
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: LD_INT 3
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 1
68456: PUSH
68457: LD_INT 4
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 1
68466: PUSH
68467: LD_INT 5
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 0
68476: PUSH
68477: LD_INT 5
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 1
68486: NEG
68487: PUSH
68488: LD_INT 4
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 1
68497: NEG
68498: PUSH
68499: LD_INT 3
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 2
68508: PUSH
68509: LD_INT 5
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 2
68518: NEG
68519: PUSH
68520: LD_INT 3
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 3
68529: NEG
68530: PUSH
68531: LD_INT 0
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 3
68540: NEG
68541: PUSH
68542: LD_INT 1
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 2
68552: NEG
68553: PUSH
68554: LD_INT 0
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 2
68563: NEG
68564: PUSH
68565: LD_INT 1
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 3
68574: NEG
68575: PUSH
68576: LD_INT 1
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 4
68585: NEG
68586: PUSH
68587: LD_INT 0
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 4
68596: NEG
68597: PUSH
68598: LD_INT 1
68600: NEG
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 4
68608: NEG
68609: PUSH
68610: LD_INT 2
68612: NEG
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 2
68620: NEG
68621: PUSH
68622: LD_INT 2
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 4
68631: NEG
68632: PUSH
68633: LD_INT 4
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 4
68643: NEG
68644: PUSH
68645: LD_INT 5
68647: NEG
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 3
68655: NEG
68656: PUSH
68657: LD_INT 4
68659: NEG
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 3
68667: NEG
68668: PUSH
68669: LD_INT 3
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 4
68679: NEG
68680: PUSH
68681: LD_INT 3
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 5
68691: NEG
68692: PUSH
68693: LD_INT 4
68695: NEG
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 5
68703: NEG
68704: PUSH
68705: LD_INT 5
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 3
68715: NEG
68716: PUSH
68717: LD_INT 5
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 5
68727: NEG
68728: PUSH
68729: LD_INT 3
68731: NEG
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 0
68739: PUSH
68740: LD_INT 3
68742: NEG
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: LD_INT 4
68753: NEG
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: LD_INT 1
68761: PUSH
68762: LD_INT 3
68764: NEG
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 1
68772: PUSH
68773: LD_INT 2
68775: NEG
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 0
68783: PUSH
68784: LD_INT 2
68786: NEG
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 1
68794: NEG
68795: PUSH
68796: LD_INT 3
68798: NEG
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 1
68806: NEG
68807: PUSH
68808: LD_INT 4
68810: NEG
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 2
68818: PUSH
68819: LD_INT 2
68821: NEG
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 2
68829: NEG
68830: PUSH
68831: LD_INT 4
68833: NEG
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: LD_INT 4
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 4
68851: PUSH
68852: LD_INT 1
68854: NEG
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 5
68862: PUSH
68863: LD_INT 0
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 5
68872: PUSH
68873: LD_INT 1
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 4
68882: PUSH
68883: LD_INT 1
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 3
68892: PUSH
68893: LD_INT 0
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 3
68902: PUSH
68903: LD_INT 1
68905: NEG
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 3
68913: PUSH
68914: LD_INT 2
68916: NEG
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 5
68924: PUSH
68925: LD_INT 2
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68979: LD_ADDR_VAR 0 32
68983: PUSH
68984: LD_INT 4
68986: NEG
68987: PUSH
68988: LD_INT 0
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 4
68997: NEG
68998: PUSH
68999: LD_INT 1
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 3
69009: NEG
69010: PUSH
69011: LD_INT 0
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 3
69020: NEG
69021: PUSH
69022: LD_INT 1
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 4
69031: NEG
69032: PUSH
69033: LD_INT 1
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 5
69042: NEG
69043: PUSH
69044: LD_INT 0
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 5
69053: NEG
69054: PUSH
69055: LD_INT 1
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 5
69065: NEG
69066: PUSH
69067: LD_INT 2
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 3
69077: NEG
69078: PUSH
69079: LD_INT 2
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 3
69088: NEG
69089: PUSH
69090: LD_INT 3
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 3
69100: NEG
69101: PUSH
69102: LD_INT 4
69104: NEG
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 2
69112: NEG
69113: PUSH
69114: LD_INT 3
69116: NEG
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 2
69124: NEG
69125: PUSH
69126: LD_INT 2
69128: NEG
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 3
69136: NEG
69137: PUSH
69138: LD_INT 2
69140: NEG
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 4
69148: NEG
69149: PUSH
69150: LD_INT 3
69152: NEG
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 4
69160: NEG
69161: PUSH
69162: LD_INT 4
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 2
69172: NEG
69173: PUSH
69174: LD_INT 4
69176: NEG
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 4
69184: NEG
69185: PUSH
69186: LD_INT 2
69188: NEG
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 0
69196: PUSH
69197: LD_INT 4
69199: NEG
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 0
69207: PUSH
69208: LD_INT 5
69210: NEG
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 1
69218: PUSH
69219: LD_INT 4
69221: NEG
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 1
69229: PUSH
69230: LD_INT 3
69232: NEG
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 0
69240: PUSH
69241: LD_INT 3
69243: NEG
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 1
69251: NEG
69252: PUSH
69253: LD_INT 4
69255: NEG
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 1
69263: NEG
69264: PUSH
69265: LD_INT 5
69267: NEG
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 2
69275: PUSH
69276: LD_INT 3
69278: NEG
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 2
69286: NEG
69287: PUSH
69288: LD_INT 5
69290: NEG
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 3
69298: PUSH
69299: LD_INT 0
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 3
69308: PUSH
69309: LD_INT 1
69311: NEG
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 4
69319: PUSH
69320: LD_INT 0
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 4
69329: PUSH
69330: LD_INT 1
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 3
69339: PUSH
69340: LD_INT 1
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 2
69349: PUSH
69350: LD_INT 0
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 2
69359: PUSH
69360: LD_INT 1
69362: NEG
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 2
69370: PUSH
69371: LD_INT 2
69373: NEG
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 4
69381: PUSH
69382: LD_INT 2
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 4
69391: PUSH
69392: LD_INT 4
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 4
69401: PUSH
69402: LD_INT 3
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 5
69411: PUSH
69412: LD_INT 4
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 5
69421: PUSH
69422: LD_INT 5
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 4
69431: PUSH
69432: LD_INT 5
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 3
69441: PUSH
69442: LD_INT 4
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 3
69451: PUSH
69452: LD_INT 3
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 5
69461: PUSH
69462: LD_INT 3
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: LD_INT 3
69471: PUSH
69472: LD_INT 5
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69526: LD_ADDR_VAR 0 33
69530: PUSH
69531: LD_INT 4
69533: NEG
69534: PUSH
69535: LD_INT 4
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 4
69545: NEG
69546: PUSH
69547: LD_INT 5
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 3
69557: NEG
69558: PUSH
69559: LD_INT 4
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 3
69569: NEG
69570: PUSH
69571: LD_INT 3
69573: NEG
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 4
69581: NEG
69582: PUSH
69583: LD_INT 3
69585: NEG
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 5
69593: NEG
69594: PUSH
69595: LD_INT 4
69597: NEG
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 5
69605: NEG
69606: PUSH
69607: LD_INT 5
69609: NEG
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 3
69617: NEG
69618: PUSH
69619: LD_INT 5
69621: NEG
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 5
69629: NEG
69630: PUSH
69631: LD_INT 3
69633: NEG
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 0
69641: PUSH
69642: LD_INT 3
69644: NEG
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: LD_INT 4
69655: NEG
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 1
69663: PUSH
69664: LD_INT 3
69666: NEG
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 1
69674: PUSH
69675: LD_INT 2
69677: NEG
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 0
69685: PUSH
69686: LD_INT 2
69688: NEG
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 1
69696: NEG
69697: PUSH
69698: LD_INT 3
69700: NEG
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 1
69708: NEG
69709: PUSH
69710: LD_INT 4
69712: NEG
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 2
69720: PUSH
69721: LD_INT 2
69723: NEG
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 2
69731: NEG
69732: PUSH
69733: LD_INT 4
69735: NEG
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 4
69743: PUSH
69744: LD_INT 0
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 4
69753: PUSH
69754: LD_INT 1
69756: NEG
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 5
69764: PUSH
69765: LD_INT 0
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 5
69774: PUSH
69775: LD_INT 1
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 4
69784: PUSH
69785: LD_INT 1
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 3
69794: PUSH
69795: LD_INT 0
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 3
69804: PUSH
69805: LD_INT 1
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 3
69815: PUSH
69816: LD_INT 2
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 5
69826: PUSH
69827: LD_INT 2
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 3
69836: PUSH
69837: LD_INT 3
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 3
69846: PUSH
69847: LD_INT 2
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 4
69856: PUSH
69857: LD_INT 3
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 4
69866: PUSH
69867: LD_INT 4
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 3
69876: PUSH
69877: LD_INT 4
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 2
69886: PUSH
69887: LD_INT 3
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 2
69896: PUSH
69897: LD_INT 2
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 4
69906: PUSH
69907: LD_INT 2
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: LD_INT 2
69916: PUSH
69917: LD_INT 4
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 0
69926: PUSH
69927: LD_INT 4
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_INT 0
69936: PUSH
69937: LD_INT 3
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 1
69946: PUSH
69947: LD_INT 4
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 1
69956: PUSH
69957: LD_INT 5
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 0
69966: PUSH
69967: LD_INT 5
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 1
69976: NEG
69977: PUSH
69978: LD_INT 4
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 1
69987: NEG
69988: PUSH
69989: LD_INT 3
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 2
69998: PUSH
69999: LD_INT 5
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 2
70008: NEG
70009: PUSH
70010: LD_INT 3
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70064: LD_ADDR_VAR 0 34
70068: PUSH
70069: LD_INT 0
70071: PUSH
70072: LD_INT 4
70074: NEG
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 0
70082: PUSH
70083: LD_INT 5
70085: NEG
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 1
70093: PUSH
70094: LD_INT 4
70096: NEG
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 1
70104: PUSH
70105: LD_INT 3
70107: NEG
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 0
70115: PUSH
70116: LD_INT 3
70118: NEG
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 1
70126: NEG
70127: PUSH
70128: LD_INT 4
70130: NEG
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 1
70138: NEG
70139: PUSH
70140: LD_INT 5
70142: NEG
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 2
70150: PUSH
70151: LD_INT 3
70153: NEG
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 2
70161: NEG
70162: PUSH
70163: LD_INT 5
70165: NEG
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 3
70173: PUSH
70174: LD_INT 0
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 3
70183: PUSH
70184: LD_INT 1
70186: NEG
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 4
70194: PUSH
70195: LD_INT 0
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 4
70204: PUSH
70205: LD_INT 1
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 3
70214: PUSH
70215: LD_INT 1
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 2
70224: PUSH
70225: LD_INT 0
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 2
70234: PUSH
70235: LD_INT 1
70237: NEG
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 2
70245: PUSH
70246: LD_INT 2
70248: NEG
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 4
70256: PUSH
70257: LD_INT 2
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 4
70266: PUSH
70267: LD_INT 4
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 4
70276: PUSH
70277: LD_INT 3
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 5
70286: PUSH
70287: LD_INT 4
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 5
70296: PUSH
70297: LD_INT 5
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 4
70306: PUSH
70307: LD_INT 5
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 3
70316: PUSH
70317: LD_INT 4
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 3
70326: PUSH
70327: LD_INT 3
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 5
70336: PUSH
70337: LD_INT 3
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: LD_INT 3
70346: PUSH
70347: LD_INT 5
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 0
70356: PUSH
70357: LD_INT 3
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 0
70366: PUSH
70367: LD_INT 2
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 1
70376: PUSH
70377: LD_INT 3
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 1
70386: PUSH
70387: LD_INT 4
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: LD_INT 0
70396: PUSH
70397: LD_INT 4
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: LD_INT 1
70406: NEG
70407: PUSH
70408: LD_INT 3
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 1
70417: NEG
70418: PUSH
70419: LD_INT 2
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 2
70428: PUSH
70429: LD_INT 4
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 2
70438: NEG
70439: PUSH
70440: LD_INT 2
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 4
70449: NEG
70450: PUSH
70451: LD_INT 0
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 4
70460: NEG
70461: PUSH
70462: LD_INT 1
70464: NEG
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 3
70472: NEG
70473: PUSH
70474: LD_INT 0
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 3
70483: NEG
70484: PUSH
70485: LD_INT 1
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 4
70494: NEG
70495: PUSH
70496: LD_INT 1
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 5
70505: NEG
70506: PUSH
70507: LD_INT 0
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 5
70516: NEG
70517: PUSH
70518: LD_INT 1
70520: NEG
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 5
70528: NEG
70529: PUSH
70530: LD_INT 2
70532: NEG
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 3
70540: NEG
70541: PUSH
70542: LD_INT 2
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: ST_TO_ADDR
// end ; end ;
70596: GO 70599
70598: POP
// case btype of b_depot , b_warehouse :
70599: LD_VAR 0 1
70603: PUSH
70604: LD_INT 0
70606: DOUBLE
70607: EQUAL
70608: IFTRUE 70618
70610: LD_INT 1
70612: DOUBLE
70613: EQUAL
70614: IFTRUE 70618
70616: GO 70819
70618: POP
// case nation of nation_american :
70619: LD_VAR 0 5
70623: PUSH
70624: LD_INT 1
70626: DOUBLE
70627: EQUAL
70628: IFTRUE 70632
70630: GO 70688
70632: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70633: LD_ADDR_VAR 0 9
70637: PUSH
70638: LD_VAR 0 11
70642: PUSH
70643: LD_VAR 0 12
70647: PUSH
70648: LD_VAR 0 13
70652: PUSH
70653: LD_VAR 0 14
70657: PUSH
70658: LD_VAR 0 15
70662: PUSH
70663: LD_VAR 0 16
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: PUSH
70676: LD_VAR 0 4
70680: PUSH
70681: LD_INT 1
70683: PLUS
70684: ARRAY
70685: ST_TO_ADDR
70686: GO 70817
70688: LD_INT 2
70690: DOUBLE
70691: EQUAL
70692: IFTRUE 70696
70694: GO 70752
70696: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70697: LD_ADDR_VAR 0 9
70701: PUSH
70702: LD_VAR 0 17
70706: PUSH
70707: LD_VAR 0 18
70711: PUSH
70712: LD_VAR 0 19
70716: PUSH
70717: LD_VAR 0 20
70721: PUSH
70722: LD_VAR 0 21
70726: PUSH
70727: LD_VAR 0 22
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: PUSH
70740: LD_VAR 0 4
70744: PUSH
70745: LD_INT 1
70747: PLUS
70748: ARRAY
70749: ST_TO_ADDR
70750: GO 70817
70752: LD_INT 3
70754: DOUBLE
70755: EQUAL
70756: IFTRUE 70760
70758: GO 70816
70760: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70761: LD_ADDR_VAR 0 9
70765: PUSH
70766: LD_VAR 0 23
70770: PUSH
70771: LD_VAR 0 24
70775: PUSH
70776: LD_VAR 0 25
70780: PUSH
70781: LD_VAR 0 26
70785: PUSH
70786: LD_VAR 0 27
70790: PUSH
70791: LD_VAR 0 28
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: PUSH
70804: LD_VAR 0 4
70808: PUSH
70809: LD_INT 1
70811: PLUS
70812: ARRAY
70813: ST_TO_ADDR
70814: GO 70817
70816: POP
70817: GO 71372
70819: LD_INT 2
70821: DOUBLE
70822: EQUAL
70823: IFTRUE 70833
70825: LD_INT 3
70827: DOUBLE
70828: EQUAL
70829: IFTRUE 70833
70831: GO 70889
70833: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70834: LD_ADDR_VAR 0 9
70838: PUSH
70839: LD_VAR 0 29
70843: PUSH
70844: LD_VAR 0 30
70848: PUSH
70849: LD_VAR 0 31
70853: PUSH
70854: LD_VAR 0 32
70858: PUSH
70859: LD_VAR 0 33
70863: PUSH
70864: LD_VAR 0 34
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: PUSH
70877: LD_VAR 0 4
70881: PUSH
70882: LD_INT 1
70884: PLUS
70885: ARRAY
70886: ST_TO_ADDR
70887: GO 71372
70889: LD_INT 16
70891: DOUBLE
70892: EQUAL
70893: IFTRUE 70951
70895: LD_INT 17
70897: DOUBLE
70898: EQUAL
70899: IFTRUE 70951
70901: LD_INT 18
70903: DOUBLE
70904: EQUAL
70905: IFTRUE 70951
70907: LD_INT 19
70909: DOUBLE
70910: EQUAL
70911: IFTRUE 70951
70913: LD_INT 22
70915: DOUBLE
70916: EQUAL
70917: IFTRUE 70951
70919: LD_INT 20
70921: DOUBLE
70922: EQUAL
70923: IFTRUE 70951
70925: LD_INT 21
70927: DOUBLE
70928: EQUAL
70929: IFTRUE 70951
70931: LD_INT 23
70933: DOUBLE
70934: EQUAL
70935: IFTRUE 70951
70937: LD_INT 24
70939: DOUBLE
70940: EQUAL
70941: IFTRUE 70951
70943: LD_INT 25
70945: DOUBLE
70946: EQUAL
70947: IFTRUE 70951
70949: GO 71007
70951: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70952: LD_ADDR_VAR 0 9
70956: PUSH
70957: LD_VAR 0 35
70961: PUSH
70962: LD_VAR 0 36
70966: PUSH
70967: LD_VAR 0 37
70971: PUSH
70972: LD_VAR 0 38
70976: PUSH
70977: LD_VAR 0 39
70981: PUSH
70982: LD_VAR 0 40
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: PUSH
70995: LD_VAR 0 4
70999: PUSH
71000: LD_INT 1
71002: PLUS
71003: ARRAY
71004: ST_TO_ADDR
71005: GO 71372
71007: LD_INT 6
71009: DOUBLE
71010: EQUAL
71011: IFTRUE 71063
71013: LD_INT 7
71015: DOUBLE
71016: EQUAL
71017: IFTRUE 71063
71019: LD_INT 8
71021: DOUBLE
71022: EQUAL
71023: IFTRUE 71063
71025: LD_INT 13
71027: DOUBLE
71028: EQUAL
71029: IFTRUE 71063
71031: LD_INT 12
71033: DOUBLE
71034: EQUAL
71035: IFTRUE 71063
71037: LD_INT 15
71039: DOUBLE
71040: EQUAL
71041: IFTRUE 71063
71043: LD_INT 11
71045: DOUBLE
71046: EQUAL
71047: IFTRUE 71063
71049: LD_INT 14
71051: DOUBLE
71052: EQUAL
71053: IFTRUE 71063
71055: LD_INT 10
71057: DOUBLE
71058: EQUAL
71059: IFTRUE 71063
71061: GO 71119
71063: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71064: LD_ADDR_VAR 0 9
71068: PUSH
71069: LD_VAR 0 41
71073: PUSH
71074: LD_VAR 0 42
71078: PUSH
71079: LD_VAR 0 43
71083: PUSH
71084: LD_VAR 0 44
71088: PUSH
71089: LD_VAR 0 45
71093: PUSH
71094: LD_VAR 0 46
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: PUSH
71107: LD_VAR 0 4
71111: PUSH
71112: LD_INT 1
71114: PLUS
71115: ARRAY
71116: ST_TO_ADDR
71117: GO 71372
71119: LD_INT 36
71121: DOUBLE
71122: EQUAL
71123: IFTRUE 71127
71125: GO 71183
71127: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71128: LD_ADDR_VAR 0 9
71132: PUSH
71133: LD_VAR 0 47
71137: PUSH
71138: LD_VAR 0 48
71142: PUSH
71143: LD_VAR 0 49
71147: PUSH
71148: LD_VAR 0 50
71152: PUSH
71153: LD_VAR 0 51
71157: PUSH
71158: LD_VAR 0 52
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: PUSH
71171: LD_VAR 0 4
71175: PUSH
71176: LD_INT 1
71178: PLUS
71179: ARRAY
71180: ST_TO_ADDR
71181: GO 71372
71183: LD_INT 4
71185: DOUBLE
71186: EQUAL
71187: IFTRUE 71209
71189: LD_INT 5
71191: DOUBLE
71192: EQUAL
71193: IFTRUE 71209
71195: LD_INT 34
71197: DOUBLE
71198: EQUAL
71199: IFTRUE 71209
71201: LD_INT 37
71203: DOUBLE
71204: EQUAL
71205: IFTRUE 71209
71207: GO 71265
71209: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71210: LD_ADDR_VAR 0 9
71214: PUSH
71215: LD_VAR 0 53
71219: PUSH
71220: LD_VAR 0 54
71224: PUSH
71225: LD_VAR 0 55
71229: PUSH
71230: LD_VAR 0 56
71234: PUSH
71235: LD_VAR 0 57
71239: PUSH
71240: LD_VAR 0 58
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: PUSH
71253: LD_VAR 0 4
71257: PUSH
71258: LD_INT 1
71260: PLUS
71261: ARRAY
71262: ST_TO_ADDR
71263: GO 71372
71265: LD_INT 31
71267: DOUBLE
71268: EQUAL
71269: IFTRUE 71315
71271: LD_INT 32
71273: DOUBLE
71274: EQUAL
71275: IFTRUE 71315
71277: LD_INT 33
71279: DOUBLE
71280: EQUAL
71281: IFTRUE 71315
71283: LD_INT 27
71285: DOUBLE
71286: EQUAL
71287: IFTRUE 71315
71289: LD_INT 26
71291: DOUBLE
71292: EQUAL
71293: IFTRUE 71315
71295: LD_INT 28
71297: DOUBLE
71298: EQUAL
71299: IFTRUE 71315
71301: LD_INT 29
71303: DOUBLE
71304: EQUAL
71305: IFTRUE 71315
71307: LD_INT 30
71309: DOUBLE
71310: EQUAL
71311: IFTRUE 71315
71313: GO 71371
71315: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71316: LD_ADDR_VAR 0 9
71320: PUSH
71321: LD_VAR 0 59
71325: PUSH
71326: LD_VAR 0 60
71330: PUSH
71331: LD_VAR 0 61
71335: PUSH
71336: LD_VAR 0 62
71340: PUSH
71341: LD_VAR 0 63
71345: PUSH
71346: LD_VAR 0 64
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: PUSH
71359: LD_VAR 0 4
71363: PUSH
71364: LD_INT 1
71366: PLUS
71367: ARRAY
71368: ST_TO_ADDR
71369: GO 71372
71371: POP
// temp_list2 = [ ] ;
71372: LD_ADDR_VAR 0 10
71376: PUSH
71377: EMPTY
71378: ST_TO_ADDR
// for i in temp_list do
71379: LD_ADDR_VAR 0 8
71383: PUSH
71384: LD_VAR 0 9
71388: PUSH
71389: FOR_IN
71390: IFFALSE 71442
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71392: LD_ADDR_VAR 0 10
71396: PUSH
71397: LD_VAR 0 10
71401: PUSH
71402: LD_VAR 0 8
71406: PUSH
71407: LD_INT 1
71409: ARRAY
71410: PUSH
71411: LD_VAR 0 2
71415: PLUS
71416: PUSH
71417: LD_VAR 0 8
71421: PUSH
71422: LD_INT 2
71424: ARRAY
71425: PUSH
71426: LD_VAR 0 3
71430: PLUS
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: EMPTY
71437: LIST
71438: ADD
71439: ST_TO_ADDR
71440: GO 71389
71442: POP
71443: POP
// result = temp_list2 ;
71444: LD_ADDR_VAR 0 7
71448: PUSH
71449: LD_VAR 0 10
71453: ST_TO_ADDR
// end ;
71454: LD_VAR 0 7
71458: RET
// export function EnemyInRange ( unit , dist ) ; begin
71459: LD_INT 0
71461: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71462: LD_ADDR_VAR 0 3
71466: PUSH
71467: LD_VAR 0 1
71471: PPUSH
71472: CALL_OW 255
71476: PPUSH
71477: LD_VAR 0 1
71481: PPUSH
71482: CALL_OW 250
71486: PPUSH
71487: LD_VAR 0 1
71491: PPUSH
71492: CALL_OW 251
71496: PPUSH
71497: LD_VAR 0 2
71501: PPUSH
71502: CALL 44861 0 4
71506: PUSH
71507: LD_INT 4
71509: ARRAY
71510: ST_TO_ADDR
// end ;
71511: LD_VAR 0 3
71515: RET
// export function PlayerSeeMe ( unit ) ; begin
71516: LD_INT 0
71518: PPUSH
// result := See ( your_side , unit ) ;
71519: LD_ADDR_VAR 0 2
71523: PUSH
71524: LD_OWVAR 2
71528: PPUSH
71529: LD_VAR 0 1
71533: PPUSH
71534: CALL_OW 292
71538: ST_TO_ADDR
// end ;
71539: LD_VAR 0 2
71543: RET
// export function ReverseDir ( unit ) ; begin
71544: LD_INT 0
71546: PPUSH
// if not unit then
71547: LD_VAR 0 1
71551: NOT
71552: IFFALSE 71556
// exit ;
71554: GO 71579
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71556: LD_ADDR_VAR 0 2
71560: PUSH
71561: LD_VAR 0 1
71565: PPUSH
71566: CALL_OW 254
71570: PUSH
71571: LD_INT 3
71573: PLUS
71574: PUSH
71575: LD_INT 6
71577: MOD
71578: ST_TO_ADDR
// end ;
71579: LD_VAR 0 2
71583: RET
// export function ReverseArray ( array ) ; var i ; begin
71584: LD_INT 0
71586: PPUSH
71587: PPUSH
// if not array then
71588: LD_VAR 0 1
71592: NOT
71593: IFFALSE 71597
// exit ;
71595: GO 71652
// result := [ ] ;
71597: LD_ADDR_VAR 0 2
71601: PUSH
71602: EMPTY
71603: ST_TO_ADDR
// for i := array downto 1 do
71604: LD_ADDR_VAR 0 3
71608: PUSH
71609: DOUBLE
71610: LD_VAR 0 1
71614: INC
71615: ST_TO_ADDR
71616: LD_INT 1
71618: PUSH
71619: FOR_DOWNTO
71620: IFFALSE 71650
// result := Join ( result , array [ i ] ) ;
71622: LD_ADDR_VAR 0 2
71626: PUSH
71627: LD_VAR 0 2
71631: PPUSH
71632: LD_VAR 0 1
71636: PUSH
71637: LD_VAR 0 3
71641: ARRAY
71642: PPUSH
71643: CALL 76296 0 2
71647: ST_TO_ADDR
71648: GO 71619
71650: POP
71651: POP
// end ;
71652: LD_VAR 0 2
71656: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71657: LD_INT 0
71659: PPUSH
71660: PPUSH
71661: PPUSH
71662: PPUSH
71663: PPUSH
71664: PPUSH
// if not unit or not hexes then
71665: LD_VAR 0 1
71669: NOT
71670: PUSH
71671: LD_VAR 0 2
71675: NOT
71676: OR
71677: IFFALSE 71681
// exit ;
71679: GO 71804
// dist := 9999 ;
71681: LD_ADDR_VAR 0 5
71685: PUSH
71686: LD_INT 9999
71688: ST_TO_ADDR
// for i = 1 to hexes do
71689: LD_ADDR_VAR 0 4
71693: PUSH
71694: DOUBLE
71695: LD_INT 1
71697: DEC
71698: ST_TO_ADDR
71699: LD_VAR 0 2
71703: PUSH
71704: FOR_TO
71705: IFFALSE 71792
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71707: LD_ADDR_VAR 0 6
71711: PUSH
71712: LD_VAR 0 1
71716: PPUSH
71717: LD_VAR 0 2
71721: PUSH
71722: LD_VAR 0 4
71726: ARRAY
71727: PUSH
71728: LD_INT 1
71730: ARRAY
71731: PPUSH
71732: LD_VAR 0 2
71736: PUSH
71737: LD_VAR 0 4
71741: ARRAY
71742: PUSH
71743: LD_INT 2
71745: ARRAY
71746: PPUSH
71747: CALL_OW 297
71751: ST_TO_ADDR
// if tdist < dist then
71752: LD_VAR 0 6
71756: PUSH
71757: LD_VAR 0 5
71761: LESS
71762: IFFALSE 71790
// begin hex := hexes [ i ] ;
71764: LD_ADDR_VAR 0 8
71768: PUSH
71769: LD_VAR 0 2
71773: PUSH
71774: LD_VAR 0 4
71778: ARRAY
71779: ST_TO_ADDR
// dist := tdist ;
71780: LD_ADDR_VAR 0 5
71784: PUSH
71785: LD_VAR 0 6
71789: ST_TO_ADDR
// end ; end ;
71790: GO 71704
71792: POP
71793: POP
// result := hex ;
71794: LD_ADDR_VAR 0 3
71798: PUSH
71799: LD_VAR 0 8
71803: ST_TO_ADDR
// end ;
71804: LD_VAR 0 3
71808: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71809: LD_INT 0
71811: PPUSH
71812: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71813: LD_VAR 0 1
71817: NOT
71818: PUSH
71819: LD_VAR 0 1
71823: PUSH
71824: LD_INT 21
71826: PUSH
71827: LD_INT 2
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 23
71836: PUSH
71837: LD_INT 2
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: PPUSH
71848: CALL_OW 69
71852: IN
71853: NOT
71854: OR
71855: IFFALSE 71859
// exit ;
71857: GO 71906
// for i = 1 to 3 do
71859: LD_ADDR_VAR 0 3
71863: PUSH
71864: DOUBLE
71865: LD_INT 1
71867: DEC
71868: ST_TO_ADDR
71869: LD_INT 3
71871: PUSH
71872: FOR_TO
71873: IFFALSE 71904
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71875: LD_VAR 0 1
71879: PPUSH
71880: CALL_OW 250
71884: PPUSH
71885: LD_VAR 0 1
71889: PPUSH
71890: CALL_OW 251
71894: PPUSH
71895: LD_INT 1
71897: PPUSH
71898: CALL_OW 453
71902: GO 71872
71904: POP
71905: POP
// end ;
71906: LD_VAR 0 2
71910: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71911: LD_INT 0
71913: PPUSH
71914: PPUSH
71915: PPUSH
71916: PPUSH
71917: PPUSH
71918: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71919: LD_VAR 0 1
71923: NOT
71924: PUSH
71925: LD_VAR 0 2
71929: NOT
71930: OR
71931: PUSH
71932: LD_VAR 0 1
71936: PPUSH
71937: CALL_OW 314
71941: OR
71942: IFFALSE 71946
// exit ;
71944: GO 72413
// if GetLives ( i ) < 250 then
71946: LD_VAR 0 4
71950: PPUSH
71951: CALL_OW 256
71955: PUSH
71956: LD_INT 250
71958: LESS
71959: IFFALSE 71972
// begin ComAutodestruct ( i ) ;
71961: LD_VAR 0 4
71965: PPUSH
71966: CALL 71809 0 1
// exit ;
71970: GO 72413
// end ; x := GetX ( enemy_unit ) ;
71972: LD_ADDR_VAR 0 7
71976: PUSH
71977: LD_VAR 0 2
71981: PPUSH
71982: CALL_OW 250
71986: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71987: LD_ADDR_VAR 0 8
71991: PUSH
71992: LD_VAR 0 2
71996: PPUSH
71997: CALL_OW 251
72001: ST_TO_ADDR
// if not x or not y then
72002: LD_VAR 0 7
72006: NOT
72007: PUSH
72008: LD_VAR 0 8
72012: NOT
72013: OR
72014: IFFALSE 72018
// exit ;
72016: GO 72413
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72018: LD_ADDR_VAR 0 6
72022: PUSH
72023: LD_VAR 0 7
72027: PPUSH
72028: LD_INT 0
72030: PPUSH
72031: LD_INT 4
72033: PPUSH
72034: CALL_OW 272
72038: PUSH
72039: LD_VAR 0 8
72043: PPUSH
72044: LD_INT 0
72046: PPUSH
72047: LD_INT 4
72049: PPUSH
72050: CALL_OW 273
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_VAR 0 7
72063: PPUSH
72064: LD_INT 1
72066: PPUSH
72067: LD_INT 4
72069: PPUSH
72070: CALL_OW 272
72074: PUSH
72075: LD_VAR 0 8
72079: PPUSH
72080: LD_INT 1
72082: PPUSH
72083: LD_INT 4
72085: PPUSH
72086: CALL_OW 273
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PUSH
72095: LD_VAR 0 7
72099: PPUSH
72100: LD_INT 2
72102: PPUSH
72103: LD_INT 4
72105: PPUSH
72106: CALL_OW 272
72110: PUSH
72111: LD_VAR 0 8
72115: PPUSH
72116: LD_INT 2
72118: PPUSH
72119: LD_INT 4
72121: PPUSH
72122: CALL_OW 273
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_VAR 0 7
72135: PPUSH
72136: LD_INT 3
72138: PPUSH
72139: LD_INT 4
72141: PPUSH
72142: CALL_OW 272
72146: PUSH
72147: LD_VAR 0 8
72151: PPUSH
72152: LD_INT 3
72154: PPUSH
72155: LD_INT 4
72157: PPUSH
72158: CALL_OW 273
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PUSH
72167: LD_VAR 0 7
72171: PPUSH
72172: LD_INT 4
72174: PPUSH
72175: LD_INT 4
72177: PPUSH
72178: CALL_OW 272
72182: PUSH
72183: LD_VAR 0 8
72187: PPUSH
72188: LD_INT 4
72190: PPUSH
72191: LD_INT 4
72193: PPUSH
72194: CALL_OW 273
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_VAR 0 7
72207: PPUSH
72208: LD_INT 5
72210: PPUSH
72211: LD_INT 4
72213: PPUSH
72214: CALL_OW 272
72218: PUSH
72219: LD_VAR 0 8
72223: PPUSH
72224: LD_INT 5
72226: PPUSH
72227: LD_INT 4
72229: PPUSH
72230: CALL_OW 273
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: ST_TO_ADDR
// for i = tmp downto 1 do
72247: LD_ADDR_VAR 0 4
72251: PUSH
72252: DOUBLE
72253: LD_VAR 0 6
72257: INC
72258: ST_TO_ADDR
72259: LD_INT 1
72261: PUSH
72262: FOR_DOWNTO
72263: IFFALSE 72364
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72265: LD_VAR 0 6
72269: PUSH
72270: LD_VAR 0 4
72274: ARRAY
72275: PUSH
72276: LD_INT 1
72278: ARRAY
72279: PPUSH
72280: LD_VAR 0 6
72284: PUSH
72285: LD_VAR 0 4
72289: ARRAY
72290: PUSH
72291: LD_INT 2
72293: ARRAY
72294: PPUSH
72295: CALL_OW 488
72299: NOT
72300: PUSH
72301: LD_VAR 0 6
72305: PUSH
72306: LD_VAR 0 4
72310: ARRAY
72311: PUSH
72312: LD_INT 1
72314: ARRAY
72315: PPUSH
72316: LD_VAR 0 6
72320: PUSH
72321: LD_VAR 0 4
72325: ARRAY
72326: PUSH
72327: LD_INT 2
72329: ARRAY
72330: PPUSH
72331: CALL_OW 428
72335: PUSH
72336: LD_INT 0
72338: NONEQUAL
72339: OR
72340: IFFALSE 72362
// tmp := Delete ( tmp , i ) ;
72342: LD_ADDR_VAR 0 6
72346: PUSH
72347: LD_VAR 0 6
72351: PPUSH
72352: LD_VAR 0 4
72356: PPUSH
72357: CALL_OW 3
72361: ST_TO_ADDR
72362: GO 72262
72364: POP
72365: POP
// j := GetClosestHex ( unit , tmp ) ;
72366: LD_ADDR_VAR 0 5
72370: PUSH
72371: LD_VAR 0 1
72375: PPUSH
72376: LD_VAR 0 6
72380: PPUSH
72381: CALL 71657 0 2
72385: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72386: LD_VAR 0 1
72390: PPUSH
72391: LD_VAR 0 5
72395: PUSH
72396: LD_INT 1
72398: ARRAY
72399: PPUSH
72400: LD_VAR 0 5
72404: PUSH
72405: LD_INT 2
72407: ARRAY
72408: PPUSH
72409: CALL_OW 111
// end ;
72413: LD_VAR 0 3
72417: RET
// export function PrepareApemanSoldier ( ) ; begin
72418: LD_INT 0
72420: PPUSH
// uc_nation := 0 ;
72421: LD_ADDR_OWVAR 21
72425: PUSH
72426: LD_INT 0
72428: ST_TO_ADDR
// hc_sex := sex_male ;
72429: LD_ADDR_OWVAR 27
72433: PUSH
72434: LD_INT 1
72436: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72437: LD_ADDR_OWVAR 28
72441: PUSH
72442: LD_INT 15
72444: ST_TO_ADDR
// hc_gallery :=  ;
72445: LD_ADDR_OWVAR 33
72449: PUSH
72450: LD_STRING 
72452: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72453: LD_ADDR_OWVAR 31
72457: PUSH
72458: LD_INT 0
72460: PPUSH
72461: LD_INT 3
72463: PPUSH
72464: CALL_OW 12
72468: PUSH
72469: LD_INT 0
72471: PPUSH
72472: LD_INT 3
72474: PPUSH
72475: CALL_OW 12
72479: PUSH
72480: LD_INT 0
72482: PUSH
72483: LD_INT 0
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: ST_TO_ADDR
// end ;
72492: LD_VAR 0 1
72496: RET
// export function PrepareApemanEngineer ( ) ; begin
72497: LD_INT 0
72499: PPUSH
// uc_nation := 0 ;
72500: LD_ADDR_OWVAR 21
72504: PUSH
72505: LD_INT 0
72507: ST_TO_ADDR
// hc_sex := sex_male ;
72508: LD_ADDR_OWVAR 27
72512: PUSH
72513: LD_INT 1
72515: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72516: LD_ADDR_OWVAR 28
72520: PUSH
72521: LD_INT 16
72523: ST_TO_ADDR
// hc_gallery :=  ;
72524: LD_ADDR_OWVAR 33
72528: PUSH
72529: LD_STRING 
72531: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72532: LD_ADDR_OWVAR 31
72536: PUSH
72537: LD_INT 0
72539: PPUSH
72540: LD_INT 3
72542: PPUSH
72543: CALL_OW 12
72547: PUSH
72548: LD_INT 0
72550: PPUSH
72551: LD_INT 3
72553: PPUSH
72554: CALL_OW 12
72558: PUSH
72559: LD_INT 0
72561: PUSH
72562: LD_INT 0
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: ST_TO_ADDR
// end ;
72571: LD_VAR 0 1
72575: RET
// export function PrepareApeman ( agressivity ) ; begin
72576: LD_INT 0
72578: PPUSH
// uc_side := 0 ;
72579: LD_ADDR_OWVAR 20
72583: PUSH
72584: LD_INT 0
72586: ST_TO_ADDR
// uc_nation := 0 ;
72587: LD_ADDR_OWVAR 21
72591: PUSH
72592: LD_INT 0
72594: ST_TO_ADDR
// hc_sex := sex_male ;
72595: LD_ADDR_OWVAR 27
72599: PUSH
72600: LD_INT 1
72602: ST_TO_ADDR
// hc_class := class_apeman ;
72603: LD_ADDR_OWVAR 28
72607: PUSH
72608: LD_INT 12
72610: ST_TO_ADDR
// hc_gallery :=  ;
72611: LD_ADDR_OWVAR 33
72615: PUSH
72616: LD_STRING 
72618: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72619: LD_ADDR_OWVAR 35
72623: PUSH
72624: LD_VAR 0 1
72628: NEG
72629: PPUSH
72630: LD_VAR 0 1
72634: PPUSH
72635: CALL_OW 12
72639: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72640: LD_ADDR_OWVAR 31
72644: PUSH
72645: LD_INT 0
72647: PPUSH
72648: LD_INT 3
72650: PPUSH
72651: CALL_OW 12
72655: PUSH
72656: LD_INT 0
72658: PPUSH
72659: LD_INT 3
72661: PPUSH
72662: CALL_OW 12
72666: PUSH
72667: LD_INT 0
72669: PUSH
72670: LD_INT 0
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: ST_TO_ADDR
// end ;
72679: LD_VAR 0 2
72683: RET
// export function PrepareTiger ( agressivity ) ; begin
72684: LD_INT 0
72686: PPUSH
// uc_side := 0 ;
72687: LD_ADDR_OWVAR 20
72691: PUSH
72692: LD_INT 0
72694: ST_TO_ADDR
// uc_nation := 0 ;
72695: LD_ADDR_OWVAR 21
72699: PUSH
72700: LD_INT 0
72702: ST_TO_ADDR
// hc_class := class_tiger ;
72703: LD_ADDR_OWVAR 28
72707: PUSH
72708: LD_INT 14
72710: ST_TO_ADDR
// hc_gallery :=  ;
72711: LD_ADDR_OWVAR 33
72715: PUSH
72716: LD_STRING 
72718: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72719: LD_ADDR_OWVAR 35
72723: PUSH
72724: LD_VAR 0 1
72728: NEG
72729: PPUSH
72730: LD_VAR 0 1
72734: PPUSH
72735: CALL_OW 12
72739: ST_TO_ADDR
// end ;
72740: LD_VAR 0 2
72744: RET
// export function PrepareEnchidna ( ) ; begin
72745: LD_INT 0
72747: PPUSH
// uc_side := 0 ;
72748: LD_ADDR_OWVAR 20
72752: PUSH
72753: LD_INT 0
72755: ST_TO_ADDR
// uc_nation := 0 ;
72756: LD_ADDR_OWVAR 21
72760: PUSH
72761: LD_INT 0
72763: ST_TO_ADDR
// hc_class := class_baggie ;
72764: LD_ADDR_OWVAR 28
72768: PUSH
72769: LD_INT 13
72771: ST_TO_ADDR
// hc_gallery :=  ;
72772: LD_ADDR_OWVAR 33
72776: PUSH
72777: LD_STRING 
72779: ST_TO_ADDR
// end ;
72780: LD_VAR 0 1
72784: RET
// export function PrepareFrog ( ) ; begin
72785: LD_INT 0
72787: PPUSH
// uc_side := 0 ;
72788: LD_ADDR_OWVAR 20
72792: PUSH
72793: LD_INT 0
72795: ST_TO_ADDR
// uc_nation := 0 ;
72796: LD_ADDR_OWVAR 21
72800: PUSH
72801: LD_INT 0
72803: ST_TO_ADDR
// hc_class := class_frog ;
72804: LD_ADDR_OWVAR 28
72808: PUSH
72809: LD_INT 19
72811: ST_TO_ADDR
// hc_gallery :=  ;
72812: LD_ADDR_OWVAR 33
72816: PUSH
72817: LD_STRING 
72819: ST_TO_ADDR
// end ;
72820: LD_VAR 0 1
72824: RET
// export function PrepareFish ( ) ; begin
72825: LD_INT 0
72827: PPUSH
// uc_side := 0 ;
72828: LD_ADDR_OWVAR 20
72832: PUSH
72833: LD_INT 0
72835: ST_TO_ADDR
// uc_nation := 0 ;
72836: LD_ADDR_OWVAR 21
72840: PUSH
72841: LD_INT 0
72843: ST_TO_ADDR
// hc_class := class_fish ;
72844: LD_ADDR_OWVAR 28
72848: PUSH
72849: LD_INT 20
72851: ST_TO_ADDR
// hc_gallery :=  ;
72852: LD_ADDR_OWVAR 33
72856: PUSH
72857: LD_STRING 
72859: ST_TO_ADDR
// end ;
72860: LD_VAR 0 1
72864: RET
// export function PrepareBird ( ) ; begin
72865: LD_INT 0
72867: PPUSH
// uc_side := 0 ;
72868: LD_ADDR_OWVAR 20
72872: PUSH
72873: LD_INT 0
72875: ST_TO_ADDR
// uc_nation := 0 ;
72876: LD_ADDR_OWVAR 21
72880: PUSH
72881: LD_INT 0
72883: ST_TO_ADDR
// hc_class := class_phororhacos ;
72884: LD_ADDR_OWVAR 28
72888: PUSH
72889: LD_INT 18
72891: ST_TO_ADDR
// hc_gallery :=  ;
72892: LD_ADDR_OWVAR 33
72896: PUSH
72897: LD_STRING 
72899: ST_TO_ADDR
// end ;
72900: LD_VAR 0 1
72904: RET
// export function PrepareHorse ( ) ; begin
72905: LD_INT 0
72907: PPUSH
// uc_side := 0 ;
72908: LD_ADDR_OWVAR 20
72912: PUSH
72913: LD_INT 0
72915: ST_TO_ADDR
// uc_nation := 0 ;
72916: LD_ADDR_OWVAR 21
72920: PUSH
72921: LD_INT 0
72923: ST_TO_ADDR
// hc_class := class_horse ;
72924: LD_ADDR_OWVAR 28
72928: PUSH
72929: LD_INT 21
72931: ST_TO_ADDR
// hc_gallery :=  ;
72932: LD_ADDR_OWVAR 33
72936: PUSH
72937: LD_STRING 
72939: ST_TO_ADDR
// end ;
72940: LD_VAR 0 1
72944: RET
// export function PrepareMastodont ( ) ; begin
72945: LD_INT 0
72947: PPUSH
// uc_side := 0 ;
72948: LD_ADDR_OWVAR 20
72952: PUSH
72953: LD_INT 0
72955: ST_TO_ADDR
// uc_nation := 0 ;
72956: LD_ADDR_OWVAR 21
72960: PUSH
72961: LD_INT 0
72963: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72964: LD_ADDR_OWVAR 37
72968: PUSH
72969: LD_INT 31
72971: ST_TO_ADDR
// vc_control := control_rider ;
72972: LD_ADDR_OWVAR 38
72976: PUSH
72977: LD_INT 4
72979: ST_TO_ADDR
// end ;
72980: LD_VAR 0 1
72984: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72985: LD_INT 0
72987: PPUSH
72988: PPUSH
72989: PPUSH
// uc_side = 0 ;
72990: LD_ADDR_OWVAR 20
72994: PUSH
72995: LD_INT 0
72997: ST_TO_ADDR
// uc_nation = 0 ;
72998: LD_ADDR_OWVAR 21
73002: PUSH
73003: LD_INT 0
73005: ST_TO_ADDR
// InitHc_All ( ) ;
73006: CALL_OW 584
// InitVc ;
73010: CALL_OW 20
// if mastodonts then
73014: LD_VAR 0 6
73018: IFFALSE 73085
// for i = 1 to mastodonts do
73020: LD_ADDR_VAR 0 11
73024: PUSH
73025: DOUBLE
73026: LD_INT 1
73028: DEC
73029: ST_TO_ADDR
73030: LD_VAR 0 6
73034: PUSH
73035: FOR_TO
73036: IFFALSE 73083
// begin vc_chassis := 31 ;
73038: LD_ADDR_OWVAR 37
73042: PUSH
73043: LD_INT 31
73045: ST_TO_ADDR
// vc_control := control_rider ;
73046: LD_ADDR_OWVAR 38
73050: PUSH
73051: LD_INT 4
73053: ST_TO_ADDR
// animal := CreateVehicle ;
73054: LD_ADDR_VAR 0 12
73058: PUSH
73059: CALL_OW 45
73063: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73064: LD_VAR 0 12
73068: PPUSH
73069: LD_VAR 0 8
73073: PPUSH
73074: LD_INT 0
73076: PPUSH
73077: CALL 75213 0 3
// end ;
73081: GO 73035
73083: POP
73084: POP
// if horses then
73085: LD_VAR 0 5
73089: IFFALSE 73156
// for i = 1 to horses do
73091: LD_ADDR_VAR 0 11
73095: PUSH
73096: DOUBLE
73097: LD_INT 1
73099: DEC
73100: ST_TO_ADDR
73101: LD_VAR 0 5
73105: PUSH
73106: FOR_TO
73107: IFFALSE 73154
// begin hc_class := 21 ;
73109: LD_ADDR_OWVAR 28
73113: PUSH
73114: LD_INT 21
73116: ST_TO_ADDR
// hc_gallery :=  ;
73117: LD_ADDR_OWVAR 33
73121: PUSH
73122: LD_STRING 
73124: ST_TO_ADDR
// animal := CreateHuman ;
73125: LD_ADDR_VAR 0 12
73129: PUSH
73130: CALL_OW 44
73134: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73135: LD_VAR 0 12
73139: PPUSH
73140: LD_VAR 0 8
73144: PPUSH
73145: LD_INT 0
73147: PPUSH
73148: CALL 75213 0 3
// end ;
73152: GO 73106
73154: POP
73155: POP
// if birds then
73156: LD_VAR 0 1
73160: IFFALSE 73227
// for i = 1 to birds do
73162: LD_ADDR_VAR 0 11
73166: PUSH
73167: DOUBLE
73168: LD_INT 1
73170: DEC
73171: ST_TO_ADDR
73172: LD_VAR 0 1
73176: PUSH
73177: FOR_TO
73178: IFFALSE 73225
// begin hc_class = 18 ;
73180: LD_ADDR_OWVAR 28
73184: PUSH
73185: LD_INT 18
73187: ST_TO_ADDR
// hc_gallery =  ;
73188: LD_ADDR_OWVAR 33
73192: PUSH
73193: LD_STRING 
73195: ST_TO_ADDR
// animal := CreateHuman ;
73196: LD_ADDR_VAR 0 12
73200: PUSH
73201: CALL_OW 44
73205: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73206: LD_VAR 0 12
73210: PPUSH
73211: LD_VAR 0 8
73215: PPUSH
73216: LD_INT 0
73218: PPUSH
73219: CALL 75213 0 3
// end ;
73223: GO 73177
73225: POP
73226: POP
// if tigers then
73227: LD_VAR 0 2
73231: IFFALSE 73315
// for i = 1 to tigers do
73233: LD_ADDR_VAR 0 11
73237: PUSH
73238: DOUBLE
73239: LD_INT 1
73241: DEC
73242: ST_TO_ADDR
73243: LD_VAR 0 2
73247: PUSH
73248: FOR_TO
73249: IFFALSE 73313
// begin hc_class = class_tiger ;
73251: LD_ADDR_OWVAR 28
73255: PUSH
73256: LD_INT 14
73258: ST_TO_ADDR
// hc_gallery =  ;
73259: LD_ADDR_OWVAR 33
73263: PUSH
73264: LD_STRING 
73266: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73267: LD_ADDR_OWVAR 35
73271: PUSH
73272: LD_INT 7
73274: NEG
73275: PPUSH
73276: LD_INT 7
73278: PPUSH
73279: CALL_OW 12
73283: ST_TO_ADDR
// animal := CreateHuman ;
73284: LD_ADDR_VAR 0 12
73288: PUSH
73289: CALL_OW 44
73293: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73294: LD_VAR 0 12
73298: PPUSH
73299: LD_VAR 0 8
73303: PPUSH
73304: LD_INT 0
73306: PPUSH
73307: CALL 75213 0 3
// end ;
73311: GO 73248
73313: POP
73314: POP
// if apemans then
73315: LD_VAR 0 3
73319: IFFALSE 73442
// for i = 1 to apemans do
73321: LD_ADDR_VAR 0 11
73325: PUSH
73326: DOUBLE
73327: LD_INT 1
73329: DEC
73330: ST_TO_ADDR
73331: LD_VAR 0 3
73335: PUSH
73336: FOR_TO
73337: IFFALSE 73440
// begin hc_class = class_apeman ;
73339: LD_ADDR_OWVAR 28
73343: PUSH
73344: LD_INT 12
73346: ST_TO_ADDR
// hc_gallery =  ;
73347: LD_ADDR_OWVAR 33
73351: PUSH
73352: LD_STRING 
73354: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73355: LD_ADDR_OWVAR 35
73359: PUSH
73360: LD_INT 2
73362: NEG
73363: PPUSH
73364: LD_INT 2
73366: PPUSH
73367: CALL_OW 12
73371: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73372: LD_ADDR_OWVAR 31
73376: PUSH
73377: LD_INT 1
73379: PPUSH
73380: LD_INT 3
73382: PPUSH
73383: CALL_OW 12
73387: PUSH
73388: LD_INT 1
73390: PPUSH
73391: LD_INT 3
73393: PPUSH
73394: CALL_OW 12
73398: PUSH
73399: LD_INT 0
73401: PUSH
73402: LD_INT 0
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: LIST
73409: LIST
73410: ST_TO_ADDR
// animal := CreateHuman ;
73411: LD_ADDR_VAR 0 12
73415: PUSH
73416: CALL_OW 44
73420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73421: LD_VAR 0 12
73425: PPUSH
73426: LD_VAR 0 8
73430: PPUSH
73431: LD_INT 0
73433: PPUSH
73434: CALL 75213 0 3
// end ;
73438: GO 73336
73440: POP
73441: POP
// if enchidnas then
73442: LD_VAR 0 4
73446: IFFALSE 73513
// for i = 1 to enchidnas do
73448: LD_ADDR_VAR 0 11
73452: PUSH
73453: DOUBLE
73454: LD_INT 1
73456: DEC
73457: ST_TO_ADDR
73458: LD_VAR 0 4
73462: PUSH
73463: FOR_TO
73464: IFFALSE 73511
// begin hc_class = 13 ;
73466: LD_ADDR_OWVAR 28
73470: PUSH
73471: LD_INT 13
73473: ST_TO_ADDR
// hc_gallery =  ;
73474: LD_ADDR_OWVAR 33
73478: PUSH
73479: LD_STRING 
73481: ST_TO_ADDR
// animal := CreateHuman ;
73482: LD_ADDR_VAR 0 12
73486: PUSH
73487: CALL_OW 44
73491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73492: LD_VAR 0 12
73496: PPUSH
73497: LD_VAR 0 8
73501: PPUSH
73502: LD_INT 0
73504: PPUSH
73505: CALL 75213 0 3
// end ;
73509: GO 73463
73511: POP
73512: POP
// if fishes then
73513: LD_VAR 0 7
73517: IFFALSE 73584
// for i = 1 to fishes do
73519: LD_ADDR_VAR 0 11
73523: PUSH
73524: DOUBLE
73525: LD_INT 1
73527: DEC
73528: ST_TO_ADDR
73529: LD_VAR 0 7
73533: PUSH
73534: FOR_TO
73535: IFFALSE 73582
// begin hc_class = 20 ;
73537: LD_ADDR_OWVAR 28
73541: PUSH
73542: LD_INT 20
73544: ST_TO_ADDR
// hc_gallery =  ;
73545: LD_ADDR_OWVAR 33
73549: PUSH
73550: LD_STRING 
73552: ST_TO_ADDR
// animal := CreateHuman ;
73553: LD_ADDR_VAR 0 12
73557: PUSH
73558: CALL_OW 44
73562: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73563: LD_VAR 0 12
73567: PPUSH
73568: LD_VAR 0 9
73572: PPUSH
73573: LD_INT 0
73575: PPUSH
73576: CALL 75213 0 3
// end ;
73580: GO 73534
73582: POP
73583: POP
// end ;
73584: LD_VAR 0 10
73588: RET
// export function WantHeal ( sci , unit ) ; begin
73589: LD_INT 0
73591: PPUSH
// if GetTaskList ( sci ) > 0 then
73592: LD_VAR 0 1
73596: PPUSH
73597: CALL_OW 437
73601: PUSH
73602: LD_INT 0
73604: GREATER
73605: IFFALSE 73675
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73607: LD_VAR 0 1
73611: PPUSH
73612: CALL_OW 437
73616: PUSH
73617: LD_INT 1
73619: ARRAY
73620: PUSH
73621: LD_INT 1
73623: ARRAY
73624: PUSH
73625: LD_STRING l
73627: EQUAL
73628: PUSH
73629: LD_VAR 0 1
73633: PPUSH
73634: CALL_OW 437
73638: PUSH
73639: LD_INT 1
73641: ARRAY
73642: PUSH
73643: LD_INT 4
73645: ARRAY
73646: PUSH
73647: LD_VAR 0 2
73651: EQUAL
73652: AND
73653: IFFALSE 73665
// result := true else
73655: LD_ADDR_VAR 0 3
73659: PUSH
73660: LD_INT 1
73662: ST_TO_ADDR
73663: GO 73673
// result := false ;
73665: LD_ADDR_VAR 0 3
73669: PUSH
73670: LD_INT 0
73672: ST_TO_ADDR
// end else
73673: GO 73683
// result := false ;
73675: LD_ADDR_VAR 0 3
73679: PUSH
73680: LD_INT 0
73682: ST_TO_ADDR
// end ;
73683: LD_VAR 0 3
73687: RET
// export function HealTarget ( sci ) ; begin
73688: LD_INT 0
73690: PPUSH
// if not sci then
73691: LD_VAR 0 1
73695: NOT
73696: IFFALSE 73700
// exit ;
73698: GO 73765
// result := 0 ;
73700: LD_ADDR_VAR 0 2
73704: PUSH
73705: LD_INT 0
73707: ST_TO_ADDR
// if GetTaskList ( sci ) then
73708: LD_VAR 0 1
73712: PPUSH
73713: CALL_OW 437
73717: IFFALSE 73765
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73719: LD_VAR 0 1
73723: PPUSH
73724: CALL_OW 437
73728: PUSH
73729: LD_INT 1
73731: ARRAY
73732: PUSH
73733: LD_INT 1
73735: ARRAY
73736: PUSH
73737: LD_STRING l
73739: EQUAL
73740: IFFALSE 73765
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73742: LD_ADDR_VAR 0 2
73746: PUSH
73747: LD_VAR 0 1
73751: PPUSH
73752: CALL_OW 437
73756: PUSH
73757: LD_INT 1
73759: ARRAY
73760: PUSH
73761: LD_INT 4
73763: ARRAY
73764: ST_TO_ADDR
// end ;
73765: LD_VAR 0 2
73769: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73770: LD_INT 0
73772: PPUSH
73773: PPUSH
73774: PPUSH
73775: PPUSH
// if not base_units then
73776: LD_VAR 0 1
73780: NOT
73781: IFFALSE 73785
// exit ;
73783: GO 73872
// result := false ;
73785: LD_ADDR_VAR 0 2
73789: PUSH
73790: LD_INT 0
73792: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73793: LD_ADDR_VAR 0 5
73797: PUSH
73798: LD_VAR 0 1
73802: PPUSH
73803: LD_INT 21
73805: PUSH
73806: LD_INT 3
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: PPUSH
73813: CALL_OW 72
73817: ST_TO_ADDR
// if not tmp then
73818: LD_VAR 0 5
73822: NOT
73823: IFFALSE 73827
// exit ;
73825: GO 73872
// for i in tmp do
73827: LD_ADDR_VAR 0 3
73831: PUSH
73832: LD_VAR 0 5
73836: PUSH
73837: FOR_IN
73838: IFFALSE 73870
// begin result := EnemyInRange ( i , 22 ) ;
73840: LD_ADDR_VAR 0 2
73844: PUSH
73845: LD_VAR 0 3
73849: PPUSH
73850: LD_INT 22
73852: PPUSH
73853: CALL 71459 0 2
73857: ST_TO_ADDR
// if result then
73858: LD_VAR 0 2
73862: IFFALSE 73868
// exit ;
73864: POP
73865: POP
73866: GO 73872
// end ;
73868: GO 73837
73870: POP
73871: POP
// end ;
73872: LD_VAR 0 2
73876: RET
// export function FilterByTag ( units , tag ) ; begin
73877: LD_INT 0
73879: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73880: LD_ADDR_VAR 0 3
73884: PUSH
73885: LD_VAR 0 1
73889: PPUSH
73890: LD_INT 120
73892: PUSH
73893: LD_VAR 0 2
73897: PUSH
73898: EMPTY
73899: LIST
73900: LIST
73901: PPUSH
73902: CALL_OW 72
73906: ST_TO_ADDR
// end ;
73907: LD_VAR 0 3
73911: RET
// export function IsDriver ( un ) ; begin
73912: LD_INT 0
73914: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73915: LD_ADDR_VAR 0 2
73919: PUSH
73920: LD_VAR 0 1
73924: PUSH
73925: LD_INT 55
73927: PUSH
73928: EMPTY
73929: LIST
73930: PPUSH
73931: CALL_OW 69
73935: IN
73936: ST_TO_ADDR
// end ;
73937: LD_VAR 0 2
73941: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73942: LD_INT 0
73944: PPUSH
73945: PPUSH
// list := [ ] ;
73946: LD_ADDR_VAR 0 5
73950: PUSH
73951: EMPTY
73952: ST_TO_ADDR
// case d of 0 :
73953: LD_VAR 0 3
73957: PUSH
73958: LD_INT 0
73960: DOUBLE
73961: EQUAL
73962: IFTRUE 73966
73964: GO 74099
73966: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73967: LD_ADDR_VAR 0 5
73971: PUSH
73972: LD_VAR 0 1
73976: PUSH
73977: LD_INT 4
73979: MINUS
73980: PUSH
73981: LD_VAR 0 2
73985: PUSH
73986: LD_INT 4
73988: MINUS
73989: PUSH
73990: LD_INT 2
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: LIST
73997: PUSH
73998: LD_VAR 0 1
74002: PUSH
74003: LD_INT 3
74005: MINUS
74006: PUSH
74007: LD_VAR 0 2
74011: PUSH
74012: LD_INT 1
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: LIST
74019: PUSH
74020: LD_VAR 0 1
74024: PUSH
74025: LD_INT 4
74027: PLUS
74028: PUSH
74029: LD_VAR 0 2
74033: PUSH
74034: LD_INT 4
74036: PUSH
74037: EMPTY
74038: LIST
74039: LIST
74040: LIST
74041: PUSH
74042: LD_VAR 0 1
74046: PUSH
74047: LD_INT 3
74049: PLUS
74050: PUSH
74051: LD_VAR 0 2
74055: PUSH
74056: LD_INT 3
74058: PLUS
74059: PUSH
74060: LD_INT 5
74062: PUSH
74063: EMPTY
74064: LIST
74065: LIST
74066: LIST
74067: PUSH
74068: LD_VAR 0 1
74072: PUSH
74073: LD_VAR 0 2
74077: PUSH
74078: LD_INT 4
74080: PLUS
74081: PUSH
74082: LD_INT 0
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: LIST
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: ST_TO_ADDR
// end ; 1 :
74097: GO 74797
74099: LD_INT 1
74101: DOUBLE
74102: EQUAL
74103: IFTRUE 74107
74105: GO 74240
74107: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74108: LD_ADDR_VAR 0 5
74112: PUSH
74113: LD_VAR 0 1
74117: PUSH
74118: LD_VAR 0 2
74122: PUSH
74123: LD_INT 4
74125: MINUS
74126: PUSH
74127: LD_INT 3
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: LIST
74134: PUSH
74135: LD_VAR 0 1
74139: PUSH
74140: LD_INT 3
74142: MINUS
74143: PUSH
74144: LD_VAR 0 2
74148: PUSH
74149: LD_INT 3
74151: MINUS
74152: PUSH
74153: LD_INT 2
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: LIST
74160: PUSH
74161: LD_VAR 0 1
74165: PUSH
74166: LD_INT 4
74168: MINUS
74169: PUSH
74170: LD_VAR 0 2
74174: PUSH
74175: LD_INT 1
74177: PUSH
74178: EMPTY
74179: LIST
74180: LIST
74181: LIST
74182: PUSH
74183: LD_VAR 0 1
74187: PUSH
74188: LD_VAR 0 2
74192: PUSH
74193: LD_INT 3
74195: PLUS
74196: PUSH
74197: LD_INT 0
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: LIST
74204: PUSH
74205: LD_VAR 0 1
74209: PUSH
74210: LD_INT 4
74212: PLUS
74213: PUSH
74214: LD_VAR 0 2
74218: PUSH
74219: LD_INT 4
74221: PLUS
74222: PUSH
74223: LD_INT 5
74225: PUSH
74226: EMPTY
74227: LIST
74228: LIST
74229: LIST
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: ST_TO_ADDR
// end ; 2 :
74238: GO 74797
74240: LD_INT 2
74242: DOUBLE
74243: EQUAL
74244: IFTRUE 74248
74246: GO 74377
74248: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74249: LD_ADDR_VAR 0 5
74253: PUSH
74254: LD_VAR 0 1
74258: PUSH
74259: LD_VAR 0 2
74263: PUSH
74264: LD_INT 3
74266: MINUS
74267: PUSH
74268: LD_INT 3
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: LIST
74275: PUSH
74276: LD_VAR 0 1
74280: PUSH
74281: LD_INT 4
74283: PLUS
74284: PUSH
74285: LD_VAR 0 2
74289: PUSH
74290: LD_INT 4
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: LIST
74297: PUSH
74298: LD_VAR 0 1
74302: PUSH
74303: LD_VAR 0 2
74307: PUSH
74308: LD_INT 4
74310: PLUS
74311: PUSH
74312: LD_INT 0
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: LIST
74319: PUSH
74320: LD_VAR 0 1
74324: PUSH
74325: LD_INT 3
74327: MINUS
74328: PUSH
74329: LD_VAR 0 2
74333: PUSH
74334: LD_INT 1
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: LIST
74341: PUSH
74342: LD_VAR 0 1
74346: PUSH
74347: LD_INT 4
74349: MINUS
74350: PUSH
74351: LD_VAR 0 2
74355: PUSH
74356: LD_INT 4
74358: MINUS
74359: PUSH
74360: LD_INT 2
74362: PUSH
74363: EMPTY
74364: LIST
74365: LIST
74366: LIST
74367: PUSH
74368: EMPTY
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: ST_TO_ADDR
// end ; 3 :
74375: GO 74797
74377: LD_INT 3
74379: DOUBLE
74380: EQUAL
74381: IFTRUE 74385
74383: GO 74518
74385: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74386: LD_ADDR_VAR 0 5
74390: PUSH
74391: LD_VAR 0 1
74395: PUSH
74396: LD_INT 3
74398: PLUS
74399: PUSH
74400: LD_VAR 0 2
74404: PUSH
74405: LD_INT 4
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: LIST
74412: PUSH
74413: LD_VAR 0 1
74417: PUSH
74418: LD_INT 4
74420: PLUS
74421: PUSH
74422: LD_VAR 0 2
74426: PUSH
74427: LD_INT 4
74429: PLUS
74430: PUSH
74431: LD_INT 5
74433: PUSH
74434: EMPTY
74435: LIST
74436: LIST
74437: LIST
74438: PUSH
74439: LD_VAR 0 1
74443: PUSH
74444: LD_INT 4
74446: MINUS
74447: PUSH
74448: LD_VAR 0 2
74452: PUSH
74453: LD_INT 1
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: LIST
74460: PUSH
74461: LD_VAR 0 1
74465: PUSH
74466: LD_VAR 0 2
74470: PUSH
74471: LD_INT 4
74473: MINUS
74474: PUSH
74475: LD_INT 3
74477: PUSH
74478: EMPTY
74479: LIST
74480: LIST
74481: LIST
74482: PUSH
74483: LD_VAR 0 1
74487: PUSH
74488: LD_INT 3
74490: MINUS
74491: PUSH
74492: LD_VAR 0 2
74496: PUSH
74497: LD_INT 3
74499: MINUS
74500: PUSH
74501: LD_INT 2
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: LIST
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: LIST
74513: LIST
74514: LIST
74515: ST_TO_ADDR
// end ; 4 :
74516: GO 74797
74518: LD_INT 4
74520: DOUBLE
74521: EQUAL
74522: IFTRUE 74526
74524: GO 74659
74526: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74527: LD_ADDR_VAR 0 5
74531: PUSH
74532: LD_VAR 0 1
74536: PUSH
74537: LD_VAR 0 2
74541: PUSH
74542: LD_INT 4
74544: PLUS
74545: PUSH
74546: LD_INT 0
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: LIST
74553: PUSH
74554: LD_VAR 0 1
74558: PUSH
74559: LD_INT 3
74561: PLUS
74562: PUSH
74563: LD_VAR 0 2
74567: PUSH
74568: LD_INT 3
74570: PLUS
74571: PUSH
74572: LD_INT 5
74574: PUSH
74575: EMPTY
74576: LIST
74577: LIST
74578: LIST
74579: PUSH
74580: LD_VAR 0 1
74584: PUSH
74585: LD_INT 4
74587: PLUS
74588: PUSH
74589: LD_VAR 0 2
74593: PUSH
74594: LD_INT 4
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: LIST
74601: PUSH
74602: LD_VAR 0 1
74606: PUSH
74607: LD_VAR 0 2
74611: PUSH
74612: LD_INT 3
74614: MINUS
74615: PUSH
74616: LD_INT 3
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: LIST
74623: PUSH
74624: LD_VAR 0 1
74628: PUSH
74629: LD_INT 4
74631: MINUS
74632: PUSH
74633: LD_VAR 0 2
74637: PUSH
74638: LD_INT 4
74640: MINUS
74641: PUSH
74642: LD_INT 2
74644: PUSH
74645: EMPTY
74646: LIST
74647: LIST
74648: LIST
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: LIST
74654: LIST
74655: LIST
74656: ST_TO_ADDR
// end ; 5 :
74657: GO 74797
74659: LD_INT 5
74661: DOUBLE
74662: EQUAL
74663: IFTRUE 74667
74665: GO 74796
74667: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74668: LD_ADDR_VAR 0 5
74672: PUSH
74673: LD_VAR 0 1
74677: PUSH
74678: LD_INT 4
74680: MINUS
74681: PUSH
74682: LD_VAR 0 2
74686: PUSH
74687: LD_INT 1
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: LIST
74694: PUSH
74695: LD_VAR 0 1
74699: PUSH
74700: LD_VAR 0 2
74704: PUSH
74705: LD_INT 4
74707: MINUS
74708: PUSH
74709: LD_INT 3
74711: PUSH
74712: EMPTY
74713: LIST
74714: LIST
74715: LIST
74716: PUSH
74717: LD_VAR 0 1
74721: PUSH
74722: LD_INT 4
74724: PLUS
74725: PUSH
74726: LD_VAR 0 2
74730: PUSH
74731: LD_INT 4
74733: PLUS
74734: PUSH
74735: LD_INT 5
74737: PUSH
74738: EMPTY
74739: LIST
74740: LIST
74741: LIST
74742: PUSH
74743: LD_VAR 0 1
74747: PUSH
74748: LD_INT 3
74750: PLUS
74751: PUSH
74752: LD_VAR 0 2
74756: PUSH
74757: LD_INT 4
74759: PUSH
74760: EMPTY
74761: LIST
74762: LIST
74763: LIST
74764: PUSH
74765: LD_VAR 0 1
74769: PUSH
74770: LD_VAR 0 2
74774: PUSH
74775: LD_INT 3
74777: PLUS
74778: PUSH
74779: LD_INT 0
74781: PUSH
74782: EMPTY
74783: LIST
74784: LIST
74785: LIST
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: ST_TO_ADDR
// end ; end ;
74794: GO 74797
74796: POP
// result := list ;
74797: LD_ADDR_VAR 0 4
74801: PUSH
74802: LD_VAR 0 5
74806: ST_TO_ADDR
// end ;
74807: LD_VAR 0 4
74811: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74812: LD_INT 0
74814: PPUSH
74815: PPUSH
74816: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74817: LD_VAR 0 1
74821: NOT
74822: PUSH
74823: LD_VAR 0 2
74827: PUSH
74828: LD_INT 1
74830: PUSH
74831: LD_INT 2
74833: PUSH
74834: LD_INT 3
74836: PUSH
74837: LD_INT 4
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: IN
74846: NOT
74847: OR
74848: IFFALSE 74852
// exit ;
74850: GO 74935
// tmp := [ ] ;
74852: LD_ADDR_VAR 0 5
74856: PUSH
74857: EMPTY
74858: ST_TO_ADDR
// for i in units do
74859: LD_ADDR_VAR 0 4
74863: PUSH
74864: LD_VAR 0 1
74868: PUSH
74869: FOR_IN
74870: IFFALSE 74904
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74872: LD_ADDR_VAR 0 5
74876: PUSH
74877: LD_VAR 0 5
74881: PPUSH
74882: LD_VAR 0 4
74886: PPUSH
74887: LD_VAR 0 2
74891: PPUSH
74892: CALL_OW 259
74896: PPUSH
74897: CALL 76296 0 2
74901: ST_TO_ADDR
74902: GO 74869
74904: POP
74905: POP
// if not tmp then
74906: LD_VAR 0 5
74910: NOT
74911: IFFALSE 74915
// exit ;
74913: GO 74935
// result := SortListByListDesc ( units , tmp ) ;
74915: LD_ADDR_VAR 0 3
74919: PUSH
74920: LD_VAR 0 1
74924: PPUSH
74925: LD_VAR 0 5
74929: PPUSH
74930: CALL_OW 77
74934: ST_TO_ADDR
// end ;
74935: LD_VAR 0 3
74939: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74940: LD_INT 0
74942: PPUSH
74943: PPUSH
74944: PPUSH
// result := false ;
74945: LD_ADDR_VAR 0 3
74949: PUSH
74950: LD_INT 0
74952: ST_TO_ADDR
// if not building then
74953: LD_VAR 0 2
74957: NOT
74958: IFFALSE 74962
// exit ;
74960: GO 75100
// x := GetX ( building ) ;
74962: LD_ADDR_VAR 0 4
74966: PUSH
74967: LD_VAR 0 2
74971: PPUSH
74972: CALL_OW 250
74976: ST_TO_ADDR
// y := GetY ( building ) ;
74977: LD_ADDR_VAR 0 5
74981: PUSH
74982: LD_VAR 0 2
74986: PPUSH
74987: CALL_OW 251
74991: ST_TO_ADDR
// if not x or not y then
74992: LD_VAR 0 4
74996: NOT
74997: PUSH
74998: LD_VAR 0 5
75002: NOT
75003: OR
75004: IFFALSE 75008
// exit ;
75006: GO 75100
// if GetTaskList ( unit ) then
75008: LD_VAR 0 1
75012: PPUSH
75013: CALL_OW 437
75017: IFFALSE 75100
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75019: LD_STRING e
75021: PUSH
75022: LD_VAR 0 1
75026: PPUSH
75027: CALL_OW 437
75031: PUSH
75032: LD_INT 1
75034: ARRAY
75035: PUSH
75036: LD_INT 1
75038: ARRAY
75039: EQUAL
75040: PUSH
75041: LD_VAR 0 4
75045: PUSH
75046: LD_VAR 0 1
75050: PPUSH
75051: CALL_OW 437
75055: PUSH
75056: LD_INT 1
75058: ARRAY
75059: PUSH
75060: LD_INT 2
75062: ARRAY
75063: EQUAL
75064: AND
75065: PUSH
75066: LD_VAR 0 5
75070: PUSH
75071: LD_VAR 0 1
75075: PPUSH
75076: CALL_OW 437
75080: PUSH
75081: LD_INT 1
75083: ARRAY
75084: PUSH
75085: LD_INT 3
75087: ARRAY
75088: EQUAL
75089: AND
75090: IFFALSE 75100
// result := true end ;
75092: LD_ADDR_VAR 0 3
75096: PUSH
75097: LD_INT 1
75099: ST_TO_ADDR
// end ;
75100: LD_VAR 0 3
75104: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75105: LD_INT 0
75107: PPUSH
// result := false ;
75108: LD_ADDR_VAR 0 4
75112: PUSH
75113: LD_INT 0
75115: ST_TO_ADDR
// if GetTaskList ( unit ) then
75116: LD_VAR 0 1
75120: PPUSH
75121: CALL_OW 437
75125: IFFALSE 75208
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75127: LD_STRING M
75129: PUSH
75130: LD_VAR 0 1
75134: PPUSH
75135: CALL_OW 437
75139: PUSH
75140: LD_INT 1
75142: ARRAY
75143: PUSH
75144: LD_INT 1
75146: ARRAY
75147: EQUAL
75148: PUSH
75149: LD_VAR 0 2
75153: PUSH
75154: LD_VAR 0 1
75158: PPUSH
75159: CALL_OW 437
75163: PUSH
75164: LD_INT 1
75166: ARRAY
75167: PUSH
75168: LD_INT 2
75170: ARRAY
75171: EQUAL
75172: AND
75173: PUSH
75174: LD_VAR 0 3
75178: PUSH
75179: LD_VAR 0 1
75183: PPUSH
75184: CALL_OW 437
75188: PUSH
75189: LD_INT 1
75191: ARRAY
75192: PUSH
75193: LD_INT 3
75195: ARRAY
75196: EQUAL
75197: AND
75198: IFFALSE 75208
// result := true ;
75200: LD_ADDR_VAR 0 4
75204: PUSH
75205: LD_INT 1
75207: ST_TO_ADDR
// end ; end ;
75208: LD_VAR 0 4
75212: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75213: LD_INT 0
75215: PPUSH
75216: PPUSH
75217: PPUSH
75218: PPUSH
// if not unit or not area then
75219: LD_VAR 0 1
75223: NOT
75224: PUSH
75225: LD_VAR 0 2
75229: NOT
75230: OR
75231: IFFALSE 75235
// exit ;
75233: GO 75399
// tmp := AreaToList ( area , i ) ;
75235: LD_ADDR_VAR 0 6
75239: PUSH
75240: LD_VAR 0 2
75244: PPUSH
75245: LD_VAR 0 5
75249: PPUSH
75250: CALL_OW 517
75254: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75255: LD_ADDR_VAR 0 5
75259: PUSH
75260: DOUBLE
75261: LD_INT 1
75263: DEC
75264: ST_TO_ADDR
75265: LD_VAR 0 6
75269: PUSH
75270: LD_INT 1
75272: ARRAY
75273: PUSH
75274: FOR_TO
75275: IFFALSE 75397
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75277: LD_ADDR_VAR 0 7
75281: PUSH
75282: LD_VAR 0 6
75286: PUSH
75287: LD_INT 1
75289: ARRAY
75290: PUSH
75291: LD_VAR 0 5
75295: ARRAY
75296: PUSH
75297: LD_VAR 0 6
75301: PUSH
75302: LD_INT 2
75304: ARRAY
75305: PUSH
75306: LD_VAR 0 5
75310: ARRAY
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75316: LD_VAR 0 7
75320: PUSH
75321: LD_INT 1
75323: ARRAY
75324: PPUSH
75325: LD_VAR 0 7
75329: PUSH
75330: LD_INT 2
75332: ARRAY
75333: PPUSH
75334: CALL_OW 428
75338: PUSH
75339: LD_INT 0
75341: EQUAL
75342: IFFALSE 75395
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75344: LD_VAR 0 1
75348: PPUSH
75349: LD_VAR 0 7
75353: PUSH
75354: LD_INT 1
75356: ARRAY
75357: PPUSH
75358: LD_VAR 0 7
75362: PUSH
75363: LD_INT 2
75365: ARRAY
75366: PPUSH
75367: LD_VAR 0 3
75371: PPUSH
75372: CALL_OW 48
// result := IsPlaced ( unit ) ;
75376: LD_ADDR_VAR 0 4
75380: PUSH
75381: LD_VAR 0 1
75385: PPUSH
75386: CALL_OW 305
75390: ST_TO_ADDR
// exit ;
75391: POP
75392: POP
75393: GO 75399
// end ; end ;
75395: GO 75274
75397: POP
75398: POP
// end ;
75399: LD_VAR 0 4
75403: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75404: LD_INT 0
75406: PPUSH
75407: PPUSH
75408: PPUSH
// if not side or side > 8 then
75409: LD_VAR 0 1
75413: NOT
75414: PUSH
75415: LD_VAR 0 1
75419: PUSH
75420: LD_INT 8
75422: GREATER
75423: OR
75424: IFFALSE 75428
// exit ;
75426: GO 75615
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75428: LD_ADDR_VAR 0 4
75432: PUSH
75433: LD_INT 22
75435: PUSH
75436: LD_VAR 0 1
75440: PUSH
75441: EMPTY
75442: LIST
75443: LIST
75444: PUSH
75445: LD_INT 21
75447: PUSH
75448: LD_INT 3
75450: PUSH
75451: EMPTY
75452: LIST
75453: LIST
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: PPUSH
75459: CALL_OW 69
75463: ST_TO_ADDR
// if not tmp then
75464: LD_VAR 0 4
75468: NOT
75469: IFFALSE 75473
// exit ;
75471: GO 75615
// enable_addtolog := true ;
75473: LD_ADDR_OWVAR 81
75477: PUSH
75478: LD_INT 1
75480: ST_TO_ADDR
// AddToLog ( [ ) ;
75481: LD_STRING [
75483: PPUSH
75484: CALL_OW 561
// for i in tmp do
75488: LD_ADDR_VAR 0 3
75492: PUSH
75493: LD_VAR 0 4
75497: PUSH
75498: FOR_IN
75499: IFFALSE 75606
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75501: LD_STRING [
75503: PUSH
75504: LD_VAR 0 3
75508: PPUSH
75509: CALL_OW 266
75513: STR
75514: PUSH
75515: LD_STRING , 
75517: STR
75518: PUSH
75519: LD_VAR 0 3
75523: PPUSH
75524: CALL_OW 250
75528: STR
75529: PUSH
75530: LD_STRING , 
75532: STR
75533: PUSH
75534: LD_VAR 0 3
75538: PPUSH
75539: CALL_OW 251
75543: STR
75544: PUSH
75545: LD_STRING , 
75547: STR
75548: PUSH
75549: LD_VAR 0 3
75553: PPUSH
75554: CALL_OW 254
75558: STR
75559: PUSH
75560: LD_STRING , 
75562: STR
75563: PUSH
75564: LD_VAR 0 3
75568: PPUSH
75569: LD_INT 1
75571: PPUSH
75572: CALL_OW 268
75576: STR
75577: PUSH
75578: LD_STRING , 
75580: STR
75581: PUSH
75582: LD_VAR 0 3
75586: PPUSH
75587: LD_INT 2
75589: PPUSH
75590: CALL_OW 268
75594: STR
75595: PUSH
75596: LD_STRING ],
75598: STR
75599: PPUSH
75600: CALL_OW 561
// end ;
75604: GO 75498
75606: POP
75607: POP
// AddToLog ( ]; ) ;
75608: LD_STRING ];
75610: PPUSH
75611: CALL_OW 561
// end ;
75615: LD_VAR 0 2
75619: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75620: LD_INT 0
75622: PPUSH
75623: PPUSH
75624: PPUSH
75625: PPUSH
75626: PPUSH
// if not area or not rate or not max then
75627: LD_VAR 0 1
75631: NOT
75632: PUSH
75633: LD_VAR 0 2
75637: NOT
75638: OR
75639: PUSH
75640: LD_VAR 0 4
75644: NOT
75645: OR
75646: IFFALSE 75650
// exit ;
75648: GO 75839
// while 1 do
75650: LD_INT 1
75652: IFFALSE 75839
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75654: LD_ADDR_VAR 0 9
75658: PUSH
75659: LD_VAR 0 1
75663: PPUSH
75664: LD_INT 1
75666: PPUSH
75667: CALL_OW 287
75671: PUSH
75672: LD_INT 10
75674: MUL
75675: ST_TO_ADDR
// r := rate / 10 ;
75676: LD_ADDR_VAR 0 7
75680: PUSH
75681: LD_VAR 0 2
75685: PUSH
75686: LD_INT 10
75688: DIVREAL
75689: ST_TO_ADDR
// time := 1 1$00 ;
75690: LD_ADDR_VAR 0 8
75694: PUSH
75695: LD_INT 2100
75697: ST_TO_ADDR
// if amount < min then
75698: LD_VAR 0 9
75702: PUSH
75703: LD_VAR 0 3
75707: LESS
75708: IFFALSE 75726
// r := r * 2 else
75710: LD_ADDR_VAR 0 7
75714: PUSH
75715: LD_VAR 0 7
75719: PUSH
75720: LD_INT 2
75722: MUL
75723: ST_TO_ADDR
75724: GO 75752
// if amount > max then
75726: LD_VAR 0 9
75730: PUSH
75731: LD_VAR 0 4
75735: GREATER
75736: IFFALSE 75752
// r := r / 2 ;
75738: LD_ADDR_VAR 0 7
75742: PUSH
75743: LD_VAR 0 7
75747: PUSH
75748: LD_INT 2
75750: DIVREAL
75751: ST_TO_ADDR
// time := time / r ;
75752: LD_ADDR_VAR 0 8
75756: PUSH
75757: LD_VAR 0 8
75761: PUSH
75762: LD_VAR 0 7
75766: DIVREAL
75767: ST_TO_ADDR
// if time < 0 then
75768: LD_VAR 0 8
75772: PUSH
75773: LD_INT 0
75775: LESS
75776: IFFALSE 75793
// time := time * - 1 ;
75778: LD_ADDR_VAR 0 8
75782: PUSH
75783: LD_VAR 0 8
75787: PUSH
75788: LD_INT 1
75790: NEG
75791: MUL
75792: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75793: LD_VAR 0 8
75797: PUSH
75798: LD_INT 35
75800: PPUSH
75801: LD_INT 875
75803: PPUSH
75804: CALL_OW 12
75808: PLUS
75809: PPUSH
75810: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75814: LD_INT 1
75816: PPUSH
75817: LD_INT 5
75819: PPUSH
75820: CALL_OW 12
75824: PPUSH
75825: LD_VAR 0 1
75829: PPUSH
75830: LD_INT 1
75832: PPUSH
75833: CALL_OW 55
// end ;
75837: GO 75650
// end ;
75839: LD_VAR 0 5
75843: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75844: LD_INT 0
75846: PPUSH
75847: PPUSH
75848: PPUSH
75849: PPUSH
75850: PPUSH
75851: PPUSH
75852: PPUSH
75853: PPUSH
// if not turrets or not factories then
75854: LD_VAR 0 1
75858: NOT
75859: PUSH
75860: LD_VAR 0 2
75864: NOT
75865: OR
75866: IFFALSE 75870
// exit ;
75868: GO 76177
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75870: LD_ADDR_VAR 0 10
75874: PUSH
75875: LD_INT 5
75877: PUSH
75878: LD_INT 6
75880: PUSH
75881: EMPTY
75882: LIST
75883: LIST
75884: PUSH
75885: LD_INT 2
75887: PUSH
75888: LD_INT 4
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: LD_INT 3
75897: PUSH
75898: LD_INT 5
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: PUSH
75905: EMPTY
75906: LIST
75907: LIST
75908: LIST
75909: PUSH
75910: LD_INT 24
75912: PUSH
75913: LD_INT 25
75915: PUSH
75916: EMPTY
75917: LIST
75918: LIST
75919: PUSH
75920: LD_INT 23
75922: PUSH
75923: LD_INT 27
75925: PUSH
75926: EMPTY
75927: LIST
75928: LIST
75929: PUSH
75930: EMPTY
75931: LIST
75932: LIST
75933: PUSH
75934: LD_INT 42
75936: PUSH
75937: LD_INT 43
75939: PUSH
75940: EMPTY
75941: LIST
75942: LIST
75943: PUSH
75944: LD_INT 44
75946: PUSH
75947: LD_INT 46
75949: PUSH
75950: EMPTY
75951: LIST
75952: LIST
75953: PUSH
75954: LD_INT 45
75956: PUSH
75957: LD_INT 47
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: LIST
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: LIST
75973: ST_TO_ADDR
// result := [ ] ;
75974: LD_ADDR_VAR 0 3
75978: PUSH
75979: EMPTY
75980: ST_TO_ADDR
// for i in turrets do
75981: LD_ADDR_VAR 0 4
75985: PUSH
75986: LD_VAR 0 1
75990: PUSH
75991: FOR_IN
75992: IFFALSE 76175
// begin nat := GetNation ( i ) ;
75994: LD_ADDR_VAR 0 7
75998: PUSH
75999: LD_VAR 0 4
76003: PPUSH
76004: CALL_OW 248
76008: ST_TO_ADDR
// weapon := 0 ;
76009: LD_ADDR_VAR 0 8
76013: PUSH
76014: LD_INT 0
76016: ST_TO_ADDR
// if not nat then
76017: LD_VAR 0 7
76021: NOT
76022: IFFALSE 76026
// continue ;
76024: GO 75991
// for j in list [ nat ] do
76026: LD_ADDR_VAR 0 5
76030: PUSH
76031: LD_VAR 0 10
76035: PUSH
76036: LD_VAR 0 7
76040: ARRAY
76041: PUSH
76042: FOR_IN
76043: IFFALSE 76084
// if GetBWeapon ( i ) = j [ 1 ] then
76045: LD_VAR 0 4
76049: PPUSH
76050: CALL_OW 269
76054: PUSH
76055: LD_VAR 0 5
76059: PUSH
76060: LD_INT 1
76062: ARRAY
76063: EQUAL
76064: IFFALSE 76082
// begin weapon := j [ 2 ] ;
76066: LD_ADDR_VAR 0 8
76070: PUSH
76071: LD_VAR 0 5
76075: PUSH
76076: LD_INT 2
76078: ARRAY
76079: ST_TO_ADDR
// break ;
76080: GO 76084
// end ;
76082: GO 76042
76084: POP
76085: POP
// if not weapon then
76086: LD_VAR 0 8
76090: NOT
76091: IFFALSE 76095
// continue ;
76093: GO 75991
// for k in factories do
76095: LD_ADDR_VAR 0 6
76099: PUSH
76100: LD_VAR 0 2
76104: PUSH
76105: FOR_IN
76106: IFFALSE 76171
// begin weapons := AvailableWeaponList ( k ) ;
76108: LD_ADDR_VAR 0 9
76112: PUSH
76113: LD_VAR 0 6
76117: PPUSH
76118: CALL_OW 478
76122: ST_TO_ADDR
// if not weapons then
76123: LD_VAR 0 9
76127: NOT
76128: IFFALSE 76132
// continue ;
76130: GO 76105
// if weapon in weapons then
76132: LD_VAR 0 8
76136: PUSH
76137: LD_VAR 0 9
76141: IN
76142: IFFALSE 76169
// begin result := [ i , weapon ] ;
76144: LD_ADDR_VAR 0 3
76148: PUSH
76149: LD_VAR 0 4
76153: PUSH
76154: LD_VAR 0 8
76158: PUSH
76159: EMPTY
76160: LIST
76161: LIST
76162: ST_TO_ADDR
// exit ;
76163: POP
76164: POP
76165: POP
76166: POP
76167: GO 76177
// end ; end ;
76169: GO 76105
76171: POP
76172: POP
// end ;
76173: GO 75991
76175: POP
76176: POP
// end ;
76177: LD_VAR 0 3
76181: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76182: LD_INT 0
76184: PPUSH
// if not side or side > 8 then
76185: LD_VAR 0 3
76189: NOT
76190: PUSH
76191: LD_VAR 0 3
76195: PUSH
76196: LD_INT 8
76198: GREATER
76199: OR
76200: IFFALSE 76204
// exit ;
76202: GO 76263
// if not range then
76204: LD_VAR 0 4
76208: NOT
76209: IFFALSE 76220
// range := - 12 ;
76211: LD_ADDR_VAR 0 4
76215: PUSH
76216: LD_INT 12
76218: NEG
76219: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76220: LD_VAR 0 1
76224: PPUSH
76225: LD_VAR 0 2
76229: PPUSH
76230: LD_VAR 0 3
76234: PPUSH
76235: LD_VAR 0 4
76239: PPUSH
76240: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76244: LD_VAR 0 1
76248: PPUSH
76249: LD_VAR 0 2
76253: PPUSH
76254: LD_VAR 0 3
76258: PPUSH
76259: CALL_OW 331
// end ;
76263: LD_VAR 0 5
76267: RET
// export function Video ( mode ) ; begin
76268: LD_INT 0
76270: PPUSH
// ingame_video = mode ;
76271: LD_ADDR_OWVAR 52
76275: PUSH
76276: LD_VAR 0 1
76280: ST_TO_ADDR
// interface_hidden = mode ;
76281: LD_ADDR_OWVAR 54
76285: PUSH
76286: LD_VAR 0 1
76290: ST_TO_ADDR
// end ;
76291: LD_VAR 0 2
76295: RET
// export function Join ( array , element ) ; begin
76296: LD_INT 0
76298: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76299: LD_ADDR_VAR 0 3
76303: PUSH
76304: LD_VAR 0 1
76308: PPUSH
76309: LD_VAR 0 1
76313: PUSH
76314: LD_INT 1
76316: PLUS
76317: PPUSH
76318: LD_VAR 0 2
76322: PPUSH
76323: CALL_OW 1
76327: ST_TO_ADDR
// end ;
76328: LD_VAR 0 3
76332: RET
// export function JoinUnion ( array , element ) ; begin
76333: LD_INT 0
76335: PPUSH
// result := array union element ;
76336: LD_ADDR_VAR 0 3
76340: PUSH
76341: LD_VAR 0 1
76345: PUSH
76346: LD_VAR 0 2
76350: UNION
76351: ST_TO_ADDR
// end ;
76352: LD_VAR 0 3
76356: RET
// export function GetBehemoths ( side ) ; begin
76357: LD_INT 0
76359: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76360: LD_ADDR_VAR 0 2
76364: PUSH
76365: LD_INT 22
76367: PUSH
76368: LD_VAR 0 1
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: PUSH
76377: LD_INT 31
76379: PUSH
76380: LD_INT 25
76382: PUSH
76383: EMPTY
76384: LIST
76385: LIST
76386: PUSH
76387: EMPTY
76388: LIST
76389: LIST
76390: PPUSH
76391: CALL_OW 69
76395: ST_TO_ADDR
// end ;
76396: LD_VAR 0 2
76400: RET
// export function Shuffle ( array ) ; var i , index ; begin
76401: LD_INT 0
76403: PPUSH
76404: PPUSH
76405: PPUSH
// result := [ ] ;
76406: LD_ADDR_VAR 0 2
76410: PUSH
76411: EMPTY
76412: ST_TO_ADDR
// if not array then
76413: LD_VAR 0 1
76417: NOT
76418: IFFALSE 76422
// exit ;
76420: GO 76521
// Randomize ;
76422: CALL_OW 10
// for i = array downto 1 do
76426: LD_ADDR_VAR 0 3
76430: PUSH
76431: DOUBLE
76432: LD_VAR 0 1
76436: INC
76437: ST_TO_ADDR
76438: LD_INT 1
76440: PUSH
76441: FOR_DOWNTO
76442: IFFALSE 76519
// begin index := rand ( 1 , array ) ;
76444: LD_ADDR_VAR 0 4
76448: PUSH
76449: LD_INT 1
76451: PPUSH
76452: LD_VAR 0 1
76456: PPUSH
76457: CALL_OW 12
76461: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76462: LD_ADDR_VAR 0 2
76466: PUSH
76467: LD_VAR 0 2
76471: PPUSH
76472: LD_VAR 0 2
76476: PUSH
76477: LD_INT 1
76479: PLUS
76480: PPUSH
76481: LD_VAR 0 1
76485: PUSH
76486: LD_VAR 0 4
76490: ARRAY
76491: PPUSH
76492: CALL_OW 2
76496: ST_TO_ADDR
// array := Delete ( array , index ) ;
76497: LD_ADDR_VAR 0 1
76501: PUSH
76502: LD_VAR 0 1
76506: PPUSH
76507: LD_VAR 0 4
76511: PPUSH
76512: CALL_OW 3
76516: ST_TO_ADDR
// end ;
76517: GO 76441
76519: POP
76520: POP
// end ;
76521: LD_VAR 0 2
76525: RET
// export function GetBaseMaterials ( base ) ; begin
76526: LD_INT 0
76528: PPUSH
// result := [ 0 , 0 , 0 ] ;
76529: LD_ADDR_VAR 0 2
76533: PUSH
76534: LD_INT 0
76536: PUSH
76537: LD_INT 0
76539: PUSH
76540: LD_INT 0
76542: PUSH
76543: EMPTY
76544: LIST
76545: LIST
76546: LIST
76547: ST_TO_ADDR
// if not base then
76548: LD_VAR 0 1
76552: NOT
76553: IFFALSE 76557
// exit ;
76555: GO 76606
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76557: LD_ADDR_VAR 0 2
76561: PUSH
76562: LD_VAR 0 1
76566: PPUSH
76567: LD_INT 1
76569: PPUSH
76570: CALL_OW 275
76574: PUSH
76575: LD_VAR 0 1
76579: PPUSH
76580: LD_INT 2
76582: PPUSH
76583: CALL_OW 275
76587: PUSH
76588: LD_VAR 0 1
76592: PPUSH
76593: LD_INT 3
76595: PPUSH
76596: CALL_OW 275
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: LIST
76605: ST_TO_ADDR
// end ;
76606: LD_VAR 0 2
76610: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76611: LD_INT 0
76613: PPUSH
76614: PPUSH
// result := array ;
76615: LD_ADDR_VAR 0 3
76619: PUSH
76620: LD_VAR 0 1
76624: ST_TO_ADDR
// if size >= result then
76625: LD_VAR 0 2
76629: PUSH
76630: LD_VAR 0 3
76634: GREATEREQUAL
76635: IFFALSE 76639
// exit ;
76637: GO 76689
// if size then
76639: LD_VAR 0 2
76643: IFFALSE 76689
// for i := array downto size do
76645: LD_ADDR_VAR 0 4
76649: PUSH
76650: DOUBLE
76651: LD_VAR 0 1
76655: INC
76656: ST_TO_ADDR
76657: LD_VAR 0 2
76661: PUSH
76662: FOR_DOWNTO
76663: IFFALSE 76687
// result := Delete ( result , result ) ;
76665: LD_ADDR_VAR 0 3
76669: PUSH
76670: LD_VAR 0 3
76674: PPUSH
76675: LD_VAR 0 3
76679: PPUSH
76680: CALL_OW 3
76684: ST_TO_ADDR
76685: GO 76662
76687: POP
76688: POP
// end ;
76689: LD_VAR 0 3
76693: RET
// export function ComExit ( unit ) ; var tmp ; begin
76694: LD_INT 0
76696: PPUSH
76697: PPUSH
// if not IsInUnit ( unit ) then
76698: LD_VAR 0 1
76702: PPUSH
76703: CALL_OW 310
76707: NOT
76708: IFFALSE 76712
// exit ;
76710: GO 76772
// tmp := IsInUnit ( unit ) ;
76712: LD_ADDR_VAR 0 3
76716: PUSH
76717: LD_VAR 0 1
76721: PPUSH
76722: CALL_OW 310
76726: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76727: LD_VAR 0 3
76731: PPUSH
76732: CALL_OW 247
76736: PUSH
76737: LD_INT 2
76739: EQUAL
76740: IFFALSE 76753
// ComExitVehicle ( unit ) else
76742: LD_VAR 0 1
76746: PPUSH
76747: CALL_OW 121
76751: GO 76762
// ComExitBuilding ( unit ) ;
76753: LD_VAR 0 1
76757: PPUSH
76758: CALL_OW 122
// result := tmp ;
76762: LD_ADDR_VAR 0 2
76766: PUSH
76767: LD_VAR 0 3
76771: ST_TO_ADDR
// end ;
76772: LD_VAR 0 2
76776: RET
// export function ComExitAll ( units ) ; var i ; begin
76777: LD_INT 0
76779: PPUSH
76780: PPUSH
// if not units then
76781: LD_VAR 0 1
76785: NOT
76786: IFFALSE 76790
// exit ;
76788: GO 76816
// for i in units do
76790: LD_ADDR_VAR 0 3
76794: PUSH
76795: LD_VAR 0 1
76799: PUSH
76800: FOR_IN
76801: IFFALSE 76814
// ComExit ( i ) ;
76803: LD_VAR 0 3
76807: PPUSH
76808: CALL 76694 0 1
76812: GO 76800
76814: POP
76815: POP
// end ;
76816: LD_VAR 0 2
76820: RET
// export function ResetHc ; begin
76821: LD_INT 0
76823: PPUSH
// InitHc ;
76824: CALL_OW 19
// hc_importance := 0 ;
76828: LD_ADDR_OWVAR 32
76832: PUSH
76833: LD_INT 0
76835: ST_TO_ADDR
// end ;
76836: LD_VAR 0 1
76840: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76841: LD_INT 0
76843: PPUSH
76844: PPUSH
76845: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76846: LD_ADDR_VAR 0 6
76850: PUSH
76851: LD_VAR 0 1
76855: PUSH
76856: LD_VAR 0 3
76860: PLUS
76861: PUSH
76862: LD_INT 2
76864: DIV
76865: ST_TO_ADDR
// if _x < 0 then
76866: LD_VAR 0 6
76870: PUSH
76871: LD_INT 0
76873: LESS
76874: IFFALSE 76891
// _x := _x * - 1 ;
76876: LD_ADDR_VAR 0 6
76880: PUSH
76881: LD_VAR 0 6
76885: PUSH
76886: LD_INT 1
76888: NEG
76889: MUL
76890: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76891: LD_ADDR_VAR 0 7
76895: PUSH
76896: LD_VAR 0 2
76900: PUSH
76901: LD_VAR 0 4
76905: PLUS
76906: PUSH
76907: LD_INT 2
76909: DIV
76910: ST_TO_ADDR
// if _y < 0 then
76911: LD_VAR 0 7
76915: PUSH
76916: LD_INT 0
76918: LESS
76919: IFFALSE 76936
// _y := _y * - 1 ;
76921: LD_ADDR_VAR 0 7
76925: PUSH
76926: LD_VAR 0 7
76930: PUSH
76931: LD_INT 1
76933: NEG
76934: MUL
76935: ST_TO_ADDR
// result := [ _x , _y ] ;
76936: LD_ADDR_VAR 0 5
76940: PUSH
76941: LD_VAR 0 6
76945: PUSH
76946: LD_VAR 0 7
76950: PUSH
76951: EMPTY
76952: LIST
76953: LIST
76954: ST_TO_ADDR
// end ;
76955: LD_VAR 0 5
76959: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76960: LD_INT 0
76962: PPUSH
76963: PPUSH
76964: PPUSH
76965: PPUSH
// task := GetTaskList ( unit ) ;
76966: LD_ADDR_VAR 0 7
76970: PUSH
76971: LD_VAR 0 1
76975: PPUSH
76976: CALL_OW 437
76980: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76981: LD_VAR 0 7
76985: NOT
76986: PUSH
76987: LD_VAR 0 1
76991: PPUSH
76992: LD_VAR 0 2
76996: PPUSH
76997: CALL_OW 308
77001: NOT
77002: AND
77003: IFFALSE 77007
// exit ;
77005: GO 77125
// if IsInArea ( unit , area ) then
77007: LD_VAR 0 1
77011: PPUSH
77012: LD_VAR 0 2
77016: PPUSH
77017: CALL_OW 308
77021: IFFALSE 77039
// begin ComMoveToArea ( unit , goAway ) ;
77023: LD_VAR 0 1
77027: PPUSH
77028: LD_VAR 0 3
77032: PPUSH
77033: CALL_OW 113
// exit ;
77037: GO 77125
// end ; if task [ 1 ] [ 1 ] <> M then
77039: LD_VAR 0 7
77043: PUSH
77044: LD_INT 1
77046: ARRAY
77047: PUSH
77048: LD_INT 1
77050: ARRAY
77051: PUSH
77052: LD_STRING M
77054: NONEQUAL
77055: IFFALSE 77059
// exit ;
77057: GO 77125
// x := task [ 1 ] [ 2 ] ;
77059: LD_ADDR_VAR 0 5
77063: PUSH
77064: LD_VAR 0 7
77068: PUSH
77069: LD_INT 1
77071: ARRAY
77072: PUSH
77073: LD_INT 2
77075: ARRAY
77076: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77077: LD_ADDR_VAR 0 6
77081: PUSH
77082: LD_VAR 0 7
77086: PUSH
77087: LD_INT 1
77089: ARRAY
77090: PUSH
77091: LD_INT 3
77093: ARRAY
77094: ST_TO_ADDR
// if InArea ( x , y , area ) then
77095: LD_VAR 0 5
77099: PPUSH
77100: LD_VAR 0 6
77104: PPUSH
77105: LD_VAR 0 2
77109: PPUSH
77110: CALL_OW 309
77114: IFFALSE 77125
// ComStop ( unit ) ;
77116: LD_VAR 0 1
77120: PPUSH
77121: CALL_OW 141
// end ;
77125: LD_VAR 0 4
77129: RET
// export function Abs ( value ) ; begin
77130: LD_INT 0
77132: PPUSH
// result := value ;
77133: LD_ADDR_VAR 0 2
77137: PUSH
77138: LD_VAR 0 1
77142: ST_TO_ADDR
// if value < 0 then
77143: LD_VAR 0 1
77147: PUSH
77148: LD_INT 0
77150: LESS
77151: IFFALSE 77168
// result := value * - 1 ;
77153: LD_ADDR_VAR 0 2
77157: PUSH
77158: LD_VAR 0 1
77162: PUSH
77163: LD_INT 1
77165: NEG
77166: MUL
77167: ST_TO_ADDR
// end ;
77168: LD_VAR 0 2
77172: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77173: LD_INT 0
77175: PPUSH
77176: PPUSH
77177: PPUSH
77178: PPUSH
77179: PPUSH
77180: PPUSH
77181: PPUSH
77182: PPUSH
// if not unit or not building then
77183: LD_VAR 0 1
77187: NOT
77188: PUSH
77189: LD_VAR 0 2
77193: NOT
77194: OR
77195: IFFALSE 77199
// exit ;
77197: GO 77425
// x := GetX ( building ) ;
77199: LD_ADDR_VAR 0 4
77203: PUSH
77204: LD_VAR 0 2
77208: PPUSH
77209: CALL_OW 250
77213: ST_TO_ADDR
// y := GetY ( building ) ;
77214: LD_ADDR_VAR 0 6
77218: PUSH
77219: LD_VAR 0 2
77223: PPUSH
77224: CALL_OW 251
77228: ST_TO_ADDR
// d := GetDir ( building ) ;
77229: LD_ADDR_VAR 0 8
77233: PUSH
77234: LD_VAR 0 2
77238: PPUSH
77239: CALL_OW 254
77243: ST_TO_ADDR
// r := 4 ;
77244: LD_ADDR_VAR 0 9
77248: PUSH
77249: LD_INT 4
77251: ST_TO_ADDR
// for i := 1 to 5 do
77252: LD_ADDR_VAR 0 10
77256: PUSH
77257: DOUBLE
77258: LD_INT 1
77260: DEC
77261: ST_TO_ADDR
77262: LD_INT 5
77264: PUSH
77265: FOR_TO
77266: IFFALSE 77423
// begin _x := ShiftX ( x , d , r + i ) ;
77268: LD_ADDR_VAR 0 5
77272: PUSH
77273: LD_VAR 0 4
77277: PPUSH
77278: LD_VAR 0 8
77282: PPUSH
77283: LD_VAR 0 9
77287: PUSH
77288: LD_VAR 0 10
77292: PLUS
77293: PPUSH
77294: CALL_OW 272
77298: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77299: LD_ADDR_VAR 0 7
77303: PUSH
77304: LD_VAR 0 6
77308: PPUSH
77309: LD_VAR 0 8
77313: PPUSH
77314: LD_VAR 0 9
77318: PUSH
77319: LD_VAR 0 10
77323: PLUS
77324: PPUSH
77325: CALL_OW 273
77329: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77330: LD_VAR 0 5
77334: PPUSH
77335: LD_VAR 0 7
77339: PPUSH
77340: CALL_OW 488
77344: PUSH
77345: LD_VAR 0 5
77349: PPUSH
77350: LD_VAR 0 7
77354: PPUSH
77355: CALL_OW 428
77359: PPUSH
77360: CALL_OW 247
77364: PUSH
77365: LD_INT 3
77367: PUSH
77368: LD_INT 2
77370: PUSH
77371: EMPTY
77372: LIST
77373: LIST
77374: IN
77375: NOT
77376: AND
77377: IFFALSE 77421
// begin ComMoveXY ( unit , _x , _y ) ;
77379: LD_VAR 0 1
77383: PPUSH
77384: LD_VAR 0 5
77388: PPUSH
77389: LD_VAR 0 7
77393: PPUSH
77394: CALL_OW 111
// result := [ _x , _y ] ;
77398: LD_ADDR_VAR 0 3
77402: PUSH
77403: LD_VAR 0 5
77407: PUSH
77408: LD_VAR 0 7
77412: PUSH
77413: EMPTY
77414: LIST
77415: LIST
77416: ST_TO_ADDR
// exit ;
77417: POP
77418: POP
77419: GO 77425
// end ; end ;
77421: GO 77265
77423: POP
77424: POP
// end ;
77425: LD_VAR 0 3
77429: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77430: LD_INT 0
77432: PPUSH
77433: PPUSH
77434: PPUSH
// result := 0 ;
77435: LD_ADDR_VAR 0 3
77439: PUSH
77440: LD_INT 0
77442: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77443: LD_VAR 0 1
77447: PUSH
77448: LD_INT 0
77450: LESS
77451: PUSH
77452: LD_VAR 0 1
77456: PUSH
77457: LD_INT 8
77459: GREATER
77460: OR
77461: PUSH
77462: LD_VAR 0 2
77466: PUSH
77467: LD_INT 0
77469: LESS
77470: OR
77471: PUSH
77472: LD_VAR 0 2
77476: PUSH
77477: LD_INT 8
77479: GREATER
77480: OR
77481: IFFALSE 77485
// exit ;
77483: GO 77560
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77485: LD_ADDR_VAR 0 4
77489: PUSH
77490: LD_INT 22
77492: PUSH
77493: LD_VAR 0 2
77497: PUSH
77498: EMPTY
77499: LIST
77500: LIST
77501: PPUSH
77502: CALL_OW 69
77506: PUSH
77507: FOR_IN
77508: IFFALSE 77558
// begin un := UnitShoot ( i ) ;
77510: LD_ADDR_VAR 0 5
77514: PUSH
77515: LD_VAR 0 4
77519: PPUSH
77520: CALL_OW 504
77524: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77525: LD_VAR 0 5
77529: PPUSH
77530: CALL_OW 255
77534: PUSH
77535: LD_VAR 0 1
77539: EQUAL
77540: IFFALSE 77556
// begin result := un ;
77542: LD_ADDR_VAR 0 3
77546: PUSH
77547: LD_VAR 0 5
77551: ST_TO_ADDR
// exit ;
77552: POP
77553: POP
77554: GO 77560
// end ; end ;
77556: GO 77507
77558: POP
77559: POP
// end ;
77560: LD_VAR 0 3
77564: RET
// export function GetCargoBay ( units ) ; begin
77565: LD_INT 0
77567: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77568: LD_ADDR_VAR 0 2
77572: PUSH
77573: LD_VAR 0 1
77577: PPUSH
77578: LD_INT 2
77580: PUSH
77581: LD_INT 34
77583: PUSH
77584: LD_INT 12
77586: PUSH
77587: EMPTY
77588: LIST
77589: LIST
77590: PUSH
77591: LD_INT 34
77593: PUSH
77594: LD_INT 51
77596: PUSH
77597: EMPTY
77598: LIST
77599: LIST
77600: PUSH
77601: LD_INT 34
77603: PUSH
77604: LD_INT 32
77606: PUSH
77607: EMPTY
77608: LIST
77609: LIST
77610: PUSH
77611: LD_INT 34
77613: PUSH
77614: LD_INT 89
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: PUSH
77621: EMPTY
77622: LIST
77623: LIST
77624: LIST
77625: LIST
77626: LIST
77627: PPUSH
77628: CALL_OW 72
77632: ST_TO_ADDR
// end ;
77633: LD_VAR 0 2
77637: RET
// export function Negate ( value ) ; begin
77638: LD_INT 0
77640: PPUSH
// result := not value ;
77641: LD_ADDR_VAR 0 2
77645: PUSH
77646: LD_VAR 0 1
77650: NOT
77651: ST_TO_ADDR
// end ;
77652: LD_VAR 0 2
77656: RET
// export function Inc ( value ) ; begin
77657: LD_INT 0
77659: PPUSH
// result := value + 1 ;
77660: LD_ADDR_VAR 0 2
77664: PUSH
77665: LD_VAR 0 1
77669: PUSH
77670: LD_INT 1
77672: PLUS
77673: ST_TO_ADDR
// end ;
77674: LD_VAR 0 2
77678: RET
// export function Dec ( value ) ; begin
77679: LD_INT 0
77681: PPUSH
// result := value - 1 ;
77682: LD_ADDR_VAR 0 2
77686: PUSH
77687: LD_VAR 0 1
77691: PUSH
77692: LD_INT 1
77694: MINUS
77695: ST_TO_ADDR
// end ;
77696: LD_VAR 0 2
77700: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77701: LD_INT 0
77703: PPUSH
77704: PPUSH
77705: PPUSH
77706: PPUSH
77707: PPUSH
77708: PPUSH
77709: PPUSH
77710: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77711: LD_VAR 0 1
77715: PPUSH
77716: LD_VAR 0 2
77720: PPUSH
77721: CALL_OW 488
77725: NOT
77726: PUSH
77727: LD_VAR 0 3
77731: PPUSH
77732: LD_VAR 0 4
77736: PPUSH
77737: CALL_OW 488
77741: NOT
77742: OR
77743: IFFALSE 77756
// begin result := - 1 ;
77745: LD_ADDR_VAR 0 5
77749: PUSH
77750: LD_INT 1
77752: NEG
77753: ST_TO_ADDR
// exit ;
77754: GO 77991
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77756: LD_ADDR_VAR 0 12
77760: PUSH
77761: LD_VAR 0 1
77765: PPUSH
77766: LD_VAR 0 2
77770: PPUSH
77771: LD_VAR 0 3
77775: PPUSH
77776: LD_VAR 0 4
77780: PPUSH
77781: CALL 76841 0 4
77785: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77786: LD_ADDR_VAR 0 11
77790: PUSH
77791: LD_VAR 0 1
77795: PPUSH
77796: LD_VAR 0 2
77800: PPUSH
77801: LD_VAR 0 12
77805: PUSH
77806: LD_INT 1
77808: ARRAY
77809: PPUSH
77810: LD_VAR 0 12
77814: PUSH
77815: LD_INT 2
77817: ARRAY
77818: PPUSH
77819: CALL_OW 298
77823: ST_TO_ADDR
// distance := 9999 ;
77824: LD_ADDR_VAR 0 10
77828: PUSH
77829: LD_INT 9999
77831: ST_TO_ADDR
// for i := 0 to 5 do
77832: LD_ADDR_VAR 0 6
77836: PUSH
77837: DOUBLE
77838: LD_INT 0
77840: DEC
77841: ST_TO_ADDR
77842: LD_INT 5
77844: PUSH
77845: FOR_TO
77846: IFFALSE 77989
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77848: LD_ADDR_VAR 0 7
77852: PUSH
77853: LD_VAR 0 1
77857: PPUSH
77858: LD_VAR 0 6
77862: PPUSH
77863: LD_VAR 0 11
77867: PPUSH
77868: CALL_OW 272
77872: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77873: LD_ADDR_VAR 0 8
77877: PUSH
77878: LD_VAR 0 2
77882: PPUSH
77883: LD_VAR 0 6
77887: PPUSH
77888: LD_VAR 0 11
77892: PPUSH
77893: CALL_OW 273
77897: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77898: LD_VAR 0 7
77902: PPUSH
77903: LD_VAR 0 8
77907: PPUSH
77908: CALL_OW 488
77912: NOT
77913: IFFALSE 77917
// continue ;
77915: GO 77845
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77917: LD_ADDR_VAR 0 9
77921: PUSH
77922: LD_VAR 0 12
77926: PUSH
77927: LD_INT 1
77929: ARRAY
77930: PPUSH
77931: LD_VAR 0 12
77935: PUSH
77936: LD_INT 2
77938: ARRAY
77939: PPUSH
77940: LD_VAR 0 7
77944: PPUSH
77945: LD_VAR 0 8
77949: PPUSH
77950: CALL_OW 298
77954: ST_TO_ADDR
// if tmp < distance then
77955: LD_VAR 0 9
77959: PUSH
77960: LD_VAR 0 10
77964: LESS
77965: IFFALSE 77987
// begin result := i ;
77967: LD_ADDR_VAR 0 5
77971: PUSH
77972: LD_VAR 0 6
77976: ST_TO_ADDR
// distance := tmp ;
77977: LD_ADDR_VAR 0 10
77981: PUSH
77982: LD_VAR 0 9
77986: ST_TO_ADDR
// end ; end ;
77987: GO 77845
77989: POP
77990: POP
// end ;
77991: LD_VAR 0 5
77995: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77996: LD_INT 0
77998: PPUSH
77999: PPUSH
// if not driver or not IsInUnit ( driver ) then
78000: LD_VAR 0 1
78004: NOT
78005: PUSH
78006: LD_VAR 0 1
78010: PPUSH
78011: CALL_OW 310
78015: NOT
78016: OR
78017: IFFALSE 78021
// exit ;
78019: GO 78111
// vehicle := IsInUnit ( driver ) ;
78021: LD_ADDR_VAR 0 3
78025: PUSH
78026: LD_VAR 0 1
78030: PPUSH
78031: CALL_OW 310
78035: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78036: LD_VAR 0 1
78040: PPUSH
78041: LD_STRING \
78043: PUSH
78044: LD_INT 0
78046: PUSH
78047: LD_INT 0
78049: PUSH
78050: LD_INT 0
78052: PUSH
78053: LD_INT 0
78055: PUSH
78056: LD_INT 0
78058: PUSH
78059: LD_INT 0
78061: PUSH
78062: EMPTY
78063: LIST
78064: LIST
78065: LIST
78066: LIST
78067: LIST
78068: LIST
78069: LIST
78070: PUSH
78071: LD_STRING E
78073: PUSH
78074: LD_INT 0
78076: PUSH
78077: LD_INT 0
78079: PUSH
78080: LD_VAR 0 3
78084: PUSH
78085: LD_INT 0
78087: PUSH
78088: LD_INT 0
78090: PUSH
78091: LD_INT 0
78093: PUSH
78094: EMPTY
78095: LIST
78096: LIST
78097: LIST
78098: LIST
78099: LIST
78100: LIST
78101: LIST
78102: PUSH
78103: EMPTY
78104: LIST
78105: LIST
78106: PPUSH
78107: CALL_OW 446
// end ;
78111: LD_VAR 0 2
78115: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78116: LD_INT 0
78118: PPUSH
78119: PPUSH
// if not driver or not IsInUnit ( driver ) then
78120: LD_VAR 0 1
78124: NOT
78125: PUSH
78126: LD_VAR 0 1
78130: PPUSH
78131: CALL_OW 310
78135: NOT
78136: OR
78137: IFFALSE 78141
// exit ;
78139: GO 78231
// vehicle := IsInUnit ( driver ) ;
78141: LD_ADDR_VAR 0 3
78145: PUSH
78146: LD_VAR 0 1
78150: PPUSH
78151: CALL_OW 310
78155: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78156: LD_VAR 0 1
78160: PPUSH
78161: LD_STRING \
78163: PUSH
78164: LD_INT 0
78166: PUSH
78167: LD_INT 0
78169: PUSH
78170: LD_INT 0
78172: PUSH
78173: LD_INT 0
78175: PUSH
78176: LD_INT 0
78178: PUSH
78179: LD_INT 0
78181: PUSH
78182: EMPTY
78183: LIST
78184: LIST
78185: LIST
78186: LIST
78187: LIST
78188: LIST
78189: LIST
78190: PUSH
78191: LD_STRING E
78193: PUSH
78194: LD_INT 0
78196: PUSH
78197: LD_INT 0
78199: PUSH
78200: LD_VAR 0 3
78204: PUSH
78205: LD_INT 0
78207: PUSH
78208: LD_INT 0
78210: PUSH
78211: LD_INT 0
78213: PUSH
78214: EMPTY
78215: LIST
78216: LIST
78217: LIST
78218: LIST
78219: LIST
78220: LIST
78221: LIST
78222: PUSH
78223: EMPTY
78224: LIST
78225: LIST
78226: PPUSH
78227: CALL_OW 447
// end ;
78231: LD_VAR 0 2
78235: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78236: LD_INT 0
78238: PPUSH
78239: PPUSH
78240: PPUSH
// tmp := [ ] ;
78241: LD_ADDR_VAR 0 5
78245: PUSH
78246: EMPTY
78247: ST_TO_ADDR
// for i in units do
78248: LD_ADDR_VAR 0 4
78252: PUSH
78253: LD_VAR 0 1
78257: PUSH
78258: FOR_IN
78259: IFFALSE 78297
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78261: LD_ADDR_VAR 0 5
78265: PUSH
78266: LD_VAR 0 5
78270: PPUSH
78271: LD_VAR 0 5
78275: PUSH
78276: LD_INT 1
78278: PLUS
78279: PPUSH
78280: LD_VAR 0 4
78284: PPUSH
78285: CALL_OW 256
78289: PPUSH
78290: CALL_OW 2
78294: ST_TO_ADDR
78295: GO 78258
78297: POP
78298: POP
// if not tmp then
78299: LD_VAR 0 5
78303: NOT
78304: IFFALSE 78308
// exit ;
78306: GO 78356
// if asc then
78308: LD_VAR 0 2
78312: IFFALSE 78336
// result := SortListByListAsc ( units , tmp ) else
78314: LD_ADDR_VAR 0 3
78318: PUSH
78319: LD_VAR 0 1
78323: PPUSH
78324: LD_VAR 0 5
78328: PPUSH
78329: CALL_OW 76
78333: ST_TO_ADDR
78334: GO 78356
// result := SortListByListDesc ( units , tmp ) ;
78336: LD_ADDR_VAR 0 3
78340: PUSH
78341: LD_VAR 0 1
78345: PPUSH
78346: LD_VAR 0 5
78350: PPUSH
78351: CALL_OW 77
78355: ST_TO_ADDR
// end ;
78356: LD_VAR 0 3
78360: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78361: LD_INT 0
78363: PPUSH
78364: PPUSH
// task := GetTaskList ( mech ) ;
78365: LD_ADDR_VAR 0 4
78369: PUSH
78370: LD_VAR 0 1
78374: PPUSH
78375: CALL_OW 437
78379: ST_TO_ADDR
// if not task then
78380: LD_VAR 0 4
78384: NOT
78385: IFFALSE 78389
// exit ;
78387: GO 78431
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78389: LD_ADDR_VAR 0 3
78393: PUSH
78394: LD_VAR 0 4
78398: PUSH
78399: LD_INT 1
78401: ARRAY
78402: PUSH
78403: LD_INT 1
78405: ARRAY
78406: PUSH
78407: LD_STRING r
78409: EQUAL
78410: PUSH
78411: LD_VAR 0 4
78415: PUSH
78416: LD_INT 1
78418: ARRAY
78419: PUSH
78420: LD_INT 4
78422: ARRAY
78423: PUSH
78424: LD_VAR 0 2
78428: EQUAL
78429: AND
78430: ST_TO_ADDR
// end ;
78431: LD_VAR 0 3
78435: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78436: LD_INT 0
78438: PPUSH
// SetDir ( unit , d ) ;
78439: LD_VAR 0 1
78443: PPUSH
78444: LD_VAR 0 4
78448: PPUSH
78449: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78453: LD_VAR 0 1
78457: PPUSH
78458: LD_VAR 0 2
78462: PPUSH
78463: LD_VAR 0 3
78467: PPUSH
78468: LD_VAR 0 5
78472: PPUSH
78473: CALL_OW 48
// end ;
78477: LD_VAR 0 6
78481: RET
// export function ToNaturalNumber ( number ) ; begin
78482: LD_INT 0
78484: PPUSH
// result := number div 1 ;
78485: LD_ADDR_VAR 0 2
78489: PUSH
78490: LD_VAR 0 1
78494: PUSH
78495: LD_INT 1
78497: DIV
78498: ST_TO_ADDR
// if number < 0 then
78499: LD_VAR 0 1
78503: PUSH
78504: LD_INT 0
78506: LESS
78507: IFFALSE 78517
// result := 0 ;
78509: LD_ADDR_VAR 0 2
78513: PUSH
78514: LD_INT 0
78516: ST_TO_ADDR
// end ;
78517: LD_VAR 0 2
78521: RET
// export function SortByClass ( units , class ) ; var un ; begin
78522: LD_INT 0
78524: PPUSH
78525: PPUSH
// if not units or not class then
78526: LD_VAR 0 1
78530: NOT
78531: PUSH
78532: LD_VAR 0 2
78536: NOT
78537: OR
78538: IFFALSE 78542
// exit ;
78540: GO 78637
// result := [ ] ;
78542: LD_ADDR_VAR 0 3
78546: PUSH
78547: EMPTY
78548: ST_TO_ADDR
// for un in units do
78549: LD_ADDR_VAR 0 4
78553: PUSH
78554: LD_VAR 0 1
78558: PUSH
78559: FOR_IN
78560: IFFALSE 78635
// if GetClass ( un ) = class then
78562: LD_VAR 0 4
78566: PPUSH
78567: CALL_OW 257
78571: PUSH
78572: LD_VAR 0 2
78576: EQUAL
78577: IFFALSE 78604
// result := Insert ( result , 1 , un ) else
78579: LD_ADDR_VAR 0 3
78583: PUSH
78584: LD_VAR 0 3
78588: PPUSH
78589: LD_INT 1
78591: PPUSH
78592: LD_VAR 0 4
78596: PPUSH
78597: CALL_OW 2
78601: ST_TO_ADDR
78602: GO 78633
// result := Replace ( result , result + 1 , un ) ;
78604: LD_ADDR_VAR 0 3
78608: PUSH
78609: LD_VAR 0 3
78613: PPUSH
78614: LD_VAR 0 3
78618: PUSH
78619: LD_INT 1
78621: PLUS
78622: PPUSH
78623: LD_VAR 0 4
78627: PPUSH
78628: CALL_OW 1
78632: ST_TO_ADDR
78633: GO 78559
78635: POP
78636: POP
// end ;
78637: LD_VAR 0 3
78641: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78642: LD_INT 0
78644: PPUSH
78645: PPUSH
78646: PPUSH
78647: PPUSH
78648: PPUSH
78649: PPUSH
78650: PPUSH
// result := [ ] ;
78651: LD_ADDR_VAR 0 4
78655: PUSH
78656: EMPTY
78657: ST_TO_ADDR
// if x - r < 0 then
78658: LD_VAR 0 1
78662: PUSH
78663: LD_VAR 0 3
78667: MINUS
78668: PUSH
78669: LD_INT 0
78671: LESS
78672: IFFALSE 78684
// min_x := 0 else
78674: LD_ADDR_VAR 0 8
78678: PUSH
78679: LD_INT 0
78681: ST_TO_ADDR
78682: GO 78700
// min_x := x - r ;
78684: LD_ADDR_VAR 0 8
78688: PUSH
78689: LD_VAR 0 1
78693: PUSH
78694: LD_VAR 0 3
78698: MINUS
78699: ST_TO_ADDR
// if y - r < 0 then
78700: LD_VAR 0 2
78704: PUSH
78705: LD_VAR 0 3
78709: MINUS
78710: PUSH
78711: LD_INT 0
78713: LESS
78714: IFFALSE 78726
// min_y := 0 else
78716: LD_ADDR_VAR 0 7
78720: PUSH
78721: LD_INT 0
78723: ST_TO_ADDR
78724: GO 78742
// min_y := y - r ;
78726: LD_ADDR_VAR 0 7
78730: PUSH
78731: LD_VAR 0 2
78735: PUSH
78736: LD_VAR 0 3
78740: MINUS
78741: ST_TO_ADDR
// max_x := x + r ;
78742: LD_ADDR_VAR 0 9
78746: PUSH
78747: LD_VAR 0 1
78751: PUSH
78752: LD_VAR 0 3
78756: PLUS
78757: ST_TO_ADDR
// max_y := y + r ;
78758: LD_ADDR_VAR 0 10
78762: PUSH
78763: LD_VAR 0 2
78767: PUSH
78768: LD_VAR 0 3
78772: PLUS
78773: ST_TO_ADDR
// for _x = min_x to max_x do
78774: LD_ADDR_VAR 0 5
78778: PUSH
78779: DOUBLE
78780: LD_VAR 0 8
78784: DEC
78785: ST_TO_ADDR
78786: LD_VAR 0 9
78790: PUSH
78791: FOR_TO
78792: IFFALSE 78893
// for _y = min_y to max_y do
78794: LD_ADDR_VAR 0 6
78798: PUSH
78799: DOUBLE
78800: LD_VAR 0 7
78804: DEC
78805: ST_TO_ADDR
78806: LD_VAR 0 10
78810: PUSH
78811: FOR_TO
78812: IFFALSE 78889
// begin if not ValidHex ( _x , _y ) then
78814: LD_VAR 0 5
78818: PPUSH
78819: LD_VAR 0 6
78823: PPUSH
78824: CALL_OW 488
78828: NOT
78829: IFFALSE 78833
// continue ;
78831: GO 78811
// if GetResourceTypeXY ( _x , _y ) then
78833: LD_VAR 0 5
78837: PPUSH
78838: LD_VAR 0 6
78842: PPUSH
78843: CALL_OW 283
78847: IFFALSE 78887
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78849: LD_ADDR_VAR 0 4
78853: PUSH
78854: LD_VAR 0 4
78858: PPUSH
78859: LD_VAR 0 4
78863: PUSH
78864: LD_INT 1
78866: PLUS
78867: PPUSH
78868: LD_VAR 0 5
78872: PUSH
78873: LD_VAR 0 6
78877: PUSH
78878: EMPTY
78879: LIST
78880: LIST
78881: PPUSH
78882: CALL_OW 1
78886: ST_TO_ADDR
// end ;
78887: GO 78811
78889: POP
78890: POP
78891: GO 78791
78893: POP
78894: POP
// end ;
78895: LD_VAR 0 4
78899: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78900: LD_INT 0
78902: PPUSH
78903: PPUSH
78904: PPUSH
78905: PPUSH
78906: PPUSH
78907: PPUSH
78908: PPUSH
78909: PPUSH
// if not units then
78910: LD_VAR 0 1
78914: NOT
78915: IFFALSE 78919
// exit ;
78917: GO 79443
// result := UnitFilter ( units , [ f_ok ] ) ;
78919: LD_ADDR_VAR 0 3
78923: PUSH
78924: LD_VAR 0 1
78928: PPUSH
78929: LD_INT 50
78931: PUSH
78932: EMPTY
78933: LIST
78934: PPUSH
78935: CALL_OW 72
78939: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78940: LD_ADDR_VAR 0 8
78944: PUSH
78945: LD_VAR 0 1
78949: PUSH
78950: LD_INT 1
78952: ARRAY
78953: PPUSH
78954: CALL_OW 255
78958: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78959: LD_ADDR_VAR 0 10
78963: PUSH
78964: LD_INT 29
78966: PUSH
78967: LD_INT 91
78969: PUSH
78970: LD_INT 49
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: LIST
78977: ST_TO_ADDR
// if not result then
78978: LD_VAR 0 3
78982: NOT
78983: IFFALSE 78987
// exit ;
78985: GO 79443
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78987: LD_ADDR_VAR 0 5
78991: PUSH
78992: LD_INT 81
78994: PUSH
78995: LD_VAR 0 8
78999: PUSH
79000: EMPTY
79001: LIST
79002: LIST
79003: PPUSH
79004: CALL_OW 69
79008: ST_TO_ADDR
// for i in result do
79009: LD_ADDR_VAR 0 4
79013: PUSH
79014: LD_VAR 0 3
79018: PUSH
79019: FOR_IN
79020: IFFALSE 79441
// begin tag := GetTag ( i ) + 1 ;
79022: LD_ADDR_VAR 0 9
79026: PUSH
79027: LD_VAR 0 4
79031: PPUSH
79032: CALL_OW 110
79036: PUSH
79037: LD_INT 1
79039: PLUS
79040: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79041: LD_ADDR_VAR 0 7
79045: PUSH
79046: LD_VAR 0 4
79050: PPUSH
79051: CALL_OW 250
79055: PPUSH
79056: LD_VAR 0 4
79060: PPUSH
79061: CALL_OW 251
79065: PPUSH
79066: LD_INT 6
79068: PPUSH
79069: CALL 78642 0 3
79073: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79074: LD_VAR 0 4
79078: PPUSH
79079: CALL_OW 247
79083: PUSH
79084: LD_INT 2
79086: EQUAL
79087: PUSH
79088: LD_VAR 0 7
79092: AND
79093: PUSH
79094: LD_VAR 0 4
79098: PPUSH
79099: CALL_OW 264
79103: PUSH
79104: LD_VAR 0 10
79108: IN
79109: NOT
79110: AND
79111: IFFALSE 79150
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79113: LD_VAR 0 4
79117: PPUSH
79118: LD_VAR 0 7
79122: PUSH
79123: LD_INT 1
79125: ARRAY
79126: PUSH
79127: LD_INT 1
79129: ARRAY
79130: PPUSH
79131: LD_VAR 0 7
79135: PUSH
79136: LD_INT 1
79138: ARRAY
79139: PUSH
79140: LD_INT 2
79142: ARRAY
79143: PPUSH
79144: CALL_OW 116
79148: GO 79439
// if path > tag then
79150: LD_VAR 0 2
79154: PUSH
79155: LD_VAR 0 9
79159: GREATER
79160: IFFALSE 79368
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79162: LD_ADDR_VAR 0 6
79166: PUSH
79167: LD_VAR 0 5
79171: PPUSH
79172: LD_INT 91
79174: PUSH
79175: LD_VAR 0 4
79179: PUSH
79180: LD_INT 8
79182: PUSH
79183: EMPTY
79184: LIST
79185: LIST
79186: LIST
79187: PPUSH
79188: CALL_OW 72
79192: ST_TO_ADDR
// if nearEnemy then
79193: LD_VAR 0 6
79197: IFFALSE 79266
// begin if GetWeapon ( i ) = ru_time_lapser then
79199: LD_VAR 0 4
79203: PPUSH
79204: CALL_OW 264
79208: PUSH
79209: LD_INT 49
79211: EQUAL
79212: IFFALSE 79240
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79214: LD_VAR 0 4
79218: PPUSH
79219: LD_VAR 0 6
79223: PPUSH
79224: LD_VAR 0 4
79228: PPUSH
79229: CALL_OW 74
79233: PPUSH
79234: CALL_OW 112
79238: GO 79264
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79240: LD_VAR 0 4
79244: PPUSH
79245: LD_VAR 0 6
79249: PPUSH
79250: LD_VAR 0 4
79254: PPUSH
79255: CALL_OW 74
79259: PPUSH
79260: CALL_OW 115
// end else
79264: GO 79366
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79266: LD_VAR 0 4
79270: PPUSH
79271: LD_VAR 0 2
79275: PUSH
79276: LD_VAR 0 9
79280: ARRAY
79281: PUSH
79282: LD_INT 1
79284: ARRAY
79285: PPUSH
79286: LD_VAR 0 2
79290: PUSH
79291: LD_VAR 0 9
79295: ARRAY
79296: PUSH
79297: LD_INT 2
79299: ARRAY
79300: PPUSH
79301: CALL_OW 297
79305: PUSH
79306: LD_INT 6
79308: GREATER
79309: IFFALSE 79352
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79311: LD_VAR 0 4
79315: PPUSH
79316: LD_VAR 0 2
79320: PUSH
79321: LD_VAR 0 9
79325: ARRAY
79326: PUSH
79327: LD_INT 1
79329: ARRAY
79330: PPUSH
79331: LD_VAR 0 2
79335: PUSH
79336: LD_VAR 0 9
79340: ARRAY
79341: PUSH
79342: LD_INT 2
79344: ARRAY
79345: PPUSH
79346: CALL_OW 114
79350: GO 79366
// SetTag ( i , tag ) ;
79352: LD_VAR 0 4
79356: PPUSH
79357: LD_VAR 0 9
79361: PPUSH
79362: CALL_OW 109
// end else
79366: GO 79439
// if enemy then
79368: LD_VAR 0 5
79372: IFFALSE 79439
// begin if GetWeapon ( i ) = ru_time_lapser then
79374: LD_VAR 0 4
79378: PPUSH
79379: CALL_OW 264
79383: PUSH
79384: LD_INT 49
79386: EQUAL
79387: IFFALSE 79415
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79389: LD_VAR 0 4
79393: PPUSH
79394: LD_VAR 0 5
79398: PPUSH
79399: LD_VAR 0 4
79403: PPUSH
79404: CALL_OW 74
79408: PPUSH
79409: CALL_OW 112
79413: GO 79439
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79415: LD_VAR 0 4
79419: PPUSH
79420: LD_VAR 0 5
79424: PPUSH
79425: LD_VAR 0 4
79429: PPUSH
79430: CALL_OW 74
79434: PPUSH
79435: CALL_OW 115
// end ; end ;
79439: GO 79019
79441: POP
79442: POP
// end ;
79443: LD_VAR 0 3
79447: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79448: LD_INT 0
79450: PPUSH
79451: PPUSH
79452: PPUSH
// if not unit or IsInUnit ( unit ) then
79453: LD_VAR 0 1
79457: NOT
79458: PUSH
79459: LD_VAR 0 1
79463: PPUSH
79464: CALL_OW 310
79468: OR
79469: IFFALSE 79473
// exit ;
79471: GO 79564
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79473: LD_ADDR_VAR 0 4
79477: PUSH
79478: LD_VAR 0 1
79482: PPUSH
79483: CALL_OW 250
79487: PPUSH
79488: LD_VAR 0 2
79492: PPUSH
79493: LD_INT 1
79495: PPUSH
79496: CALL_OW 272
79500: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79501: LD_ADDR_VAR 0 5
79505: PUSH
79506: LD_VAR 0 1
79510: PPUSH
79511: CALL_OW 251
79515: PPUSH
79516: LD_VAR 0 2
79520: PPUSH
79521: LD_INT 1
79523: PPUSH
79524: CALL_OW 273
79528: ST_TO_ADDR
// if ValidHex ( x , y ) then
79529: LD_VAR 0 4
79533: PPUSH
79534: LD_VAR 0 5
79538: PPUSH
79539: CALL_OW 488
79543: IFFALSE 79564
// ComTurnXY ( unit , x , y ) ;
79545: LD_VAR 0 1
79549: PPUSH
79550: LD_VAR 0 4
79554: PPUSH
79555: LD_VAR 0 5
79559: PPUSH
79560: CALL_OW 118
// end ;
79564: LD_VAR 0 3
79568: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79569: LD_INT 0
79571: PPUSH
79572: PPUSH
// result := false ;
79573: LD_ADDR_VAR 0 3
79577: PUSH
79578: LD_INT 0
79580: ST_TO_ADDR
// if not units then
79581: LD_VAR 0 2
79585: NOT
79586: IFFALSE 79590
// exit ;
79588: GO 79635
// for i in units do
79590: LD_ADDR_VAR 0 4
79594: PUSH
79595: LD_VAR 0 2
79599: PUSH
79600: FOR_IN
79601: IFFALSE 79633
// if See ( side , i ) then
79603: LD_VAR 0 1
79607: PPUSH
79608: LD_VAR 0 4
79612: PPUSH
79613: CALL_OW 292
79617: IFFALSE 79631
// begin result := true ;
79619: LD_ADDR_VAR 0 3
79623: PUSH
79624: LD_INT 1
79626: ST_TO_ADDR
// exit ;
79627: POP
79628: POP
79629: GO 79635
// end ;
79631: GO 79600
79633: POP
79634: POP
// end ;
79635: LD_VAR 0 3
79639: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79640: LD_INT 0
79642: PPUSH
79643: PPUSH
79644: PPUSH
79645: PPUSH
// if not unit or not points then
79646: LD_VAR 0 1
79650: NOT
79651: PUSH
79652: LD_VAR 0 2
79656: NOT
79657: OR
79658: IFFALSE 79662
// exit ;
79660: GO 79752
// dist := 99999 ;
79662: LD_ADDR_VAR 0 5
79666: PUSH
79667: LD_INT 99999
79669: ST_TO_ADDR
// for i in points do
79670: LD_ADDR_VAR 0 4
79674: PUSH
79675: LD_VAR 0 2
79679: PUSH
79680: FOR_IN
79681: IFFALSE 79750
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79683: LD_ADDR_VAR 0 6
79687: PUSH
79688: LD_VAR 0 1
79692: PPUSH
79693: LD_VAR 0 4
79697: PUSH
79698: LD_INT 1
79700: ARRAY
79701: PPUSH
79702: LD_VAR 0 4
79706: PUSH
79707: LD_INT 2
79709: ARRAY
79710: PPUSH
79711: CALL_OW 297
79715: ST_TO_ADDR
// if tmpDist < dist then
79716: LD_VAR 0 6
79720: PUSH
79721: LD_VAR 0 5
79725: LESS
79726: IFFALSE 79748
// begin result := i ;
79728: LD_ADDR_VAR 0 3
79732: PUSH
79733: LD_VAR 0 4
79737: ST_TO_ADDR
// dist := tmpDist ;
79738: LD_ADDR_VAR 0 5
79742: PUSH
79743: LD_VAR 0 6
79747: ST_TO_ADDR
// end ; end ;
79748: GO 79680
79750: POP
79751: POP
// end ;
79752: LD_VAR 0 3
79756: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79757: LD_INT 0
79759: PPUSH
// uc_side := side ;
79760: LD_ADDR_OWVAR 20
79764: PUSH
79765: LD_VAR 0 1
79769: ST_TO_ADDR
// uc_nation := 3 ;
79770: LD_ADDR_OWVAR 21
79774: PUSH
79775: LD_INT 3
79777: ST_TO_ADDR
// vc_chassis := 25 ;
79778: LD_ADDR_OWVAR 37
79782: PUSH
79783: LD_INT 25
79785: ST_TO_ADDR
// vc_engine := engine_siberite ;
79786: LD_ADDR_OWVAR 39
79790: PUSH
79791: LD_INT 3
79793: ST_TO_ADDR
// vc_control := control_computer ;
79794: LD_ADDR_OWVAR 38
79798: PUSH
79799: LD_INT 3
79801: ST_TO_ADDR
// vc_weapon := 59 ;
79802: LD_ADDR_OWVAR 40
79806: PUSH
79807: LD_INT 59
79809: ST_TO_ADDR
// result := CreateVehicle ;
79810: LD_ADDR_VAR 0 5
79814: PUSH
79815: CALL_OW 45
79819: ST_TO_ADDR
// SetDir ( result , d ) ;
79820: LD_VAR 0 5
79824: PPUSH
79825: LD_VAR 0 4
79829: PPUSH
79830: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79834: LD_VAR 0 5
79838: PPUSH
79839: LD_VAR 0 2
79843: PPUSH
79844: LD_VAR 0 3
79848: PPUSH
79849: LD_INT 0
79851: PPUSH
79852: CALL_OW 48
// end ;
79856: LD_VAR 0 5
79860: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79861: LD_INT 0
79863: PPUSH
79864: PPUSH
79865: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79866: LD_ADDR_VAR 0 2
79870: PUSH
79871: LD_INT 0
79873: PUSH
79874: LD_INT 0
79876: PUSH
79877: LD_INT 0
79879: PUSH
79880: LD_INT 0
79882: PUSH
79883: EMPTY
79884: LIST
79885: LIST
79886: LIST
79887: LIST
79888: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79889: LD_VAR 0 1
79893: NOT
79894: PUSH
79895: LD_VAR 0 1
79899: PPUSH
79900: CALL_OW 264
79904: PUSH
79905: LD_INT 12
79907: PUSH
79908: LD_INT 51
79910: PUSH
79911: LD_INT 32
79913: PUSH
79914: LD_INT 89
79916: PUSH
79917: EMPTY
79918: LIST
79919: LIST
79920: LIST
79921: LIST
79922: IN
79923: NOT
79924: OR
79925: IFFALSE 79929
// exit ;
79927: GO 80027
// for i := 1 to 3 do
79929: LD_ADDR_VAR 0 3
79933: PUSH
79934: DOUBLE
79935: LD_INT 1
79937: DEC
79938: ST_TO_ADDR
79939: LD_INT 3
79941: PUSH
79942: FOR_TO
79943: IFFALSE 80025
// begin tmp := GetCargo ( cargo , i ) ;
79945: LD_ADDR_VAR 0 4
79949: PUSH
79950: LD_VAR 0 1
79954: PPUSH
79955: LD_VAR 0 3
79959: PPUSH
79960: CALL_OW 289
79964: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79965: LD_ADDR_VAR 0 2
79969: PUSH
79970: LD_VAR 0 2
79974: PPUSH
79975: LD_VAR 0 3
79979: PPUSH
79980: LD_VAR 0 4
79984: PPUSH
79985: CALL_OW 1
79989: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79990: LD_ADDR_VAR 0 2
79994: PUSH
79995: LD_VAR 0 2
79999: PPUSH
80000: LD_INT 4
80002: PPUSH
80003: LD_VAR 0 2
80007: PUSH
80008: LD_INT 4
80010: ARRAY
80011: PUSH
80012: LD_VAR 0 4
80016: PLUS
80017: PPUSH
80018: CALL_OW 1
80022: ST_TO_ADDR
// end ;
80023: GO 79942
80025: POP
80026: POP
// end ;
80027: LD_VAR 0 2
80031: RET
// export function Length ( array ) ; begin
80032: LD_INT 0
80034: PPUSH
// result := array + 0 ;
80035: LD_ADDR_VAR 0 2
80039: PUSH
80040: LD_VAR 0 1
80044: PUSH
80045: LD_INT 0
80047: PLUS
80048: ST_TO_ADDR
// end ;
80049: LD_VAR 0 2
80053: RET
// export function PrepareArray ( array ) ; begin
80054: LD_INT 0
80056: PPUSH
// result := array diff 0 ;
80057: LD_ADDR_VAR 0 2
80061: PUSH
80062: LD_VAR 0 1
80066: PUSH
80067: LD_INT 0
80069: DIFF
80070: ST_TO_ADDR
// if not result [ 1 ] then
80071: LD_VAR 0 2
80075: PUSH
80076: LD_INT 1
80078: ARRAY
80079: NOT
80080: IFFALSE 80100
// result := Delete ( result , 1 ) ;
80082: LD_ADDR_VAR 0 2
80086: PUSH
80087: LD_VAR 0 2
80091: PPUSH
80092: LD_INT 1
80094: PPUSH
80095: CALL_OW 3
80099: ST_TO_ADDR
// end ;
80100: LD_VAR 0 2
80104: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80105: LD_INT 0
80107: PPUSH
80108: PPUSH
80109: PPUSH
80110: PPUSH
// sibRocketRange := 25 ;
80111: LD_ADDR_VAR 0 6
80115: PUSH
80116: LD_INT 25
80118: ST_TO_ADDR
// result := false ;
80119: LD_ADDR_VAR 0 4
80123: PUSH
80124: LD_INT 0
80126: ST_TO_ADDR
// for i := 0 to 5 do
80127: LD_ADDR_VAR 0 5
80131: PUSH
80132: DOUBLE
80133: LD_INT 0
80135: DEC
80136: ST_TO_ADDR
80137: LD_INT 5
80139: PUSH
80140: FOR_TO
80141: IFFALSE 80208
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80143: LD_VAR 0 1
80147: PPUSH
80148: LD_VAR 0 5
80152: PPUSH
80153: LD_VAR 0 6
80157: PPUSH
80158: CALL_OW 272
80162: PPUSH
80163: LD_VAR 0 2
80167: PPUSH
80168: LD_VAR 0 5
80172: PPUSH
80173: LD_VAR 0 6
80177: PPUSH
80178: CALL_OW 273
80182: PPUSH
80183: LD_VAR 0 3
80187: PPUSH
80188: CALL_OW 309
80192: IFFALSE 80206
// begin result := true ;
80194: LD_ADDR_VAR 0 4
80198: PUSH
80199: LD_INT 1
80201: ST_TO_ADDR
// exit ;
80202: POP
80203: POP
80204: GO 80210
// end ;
80206: GO 80140
80208: POP
80209: POP
// end ;
80210: LD_VAR 0 4
80214: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80215: LD_INT 0
80217: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80218: LD_VAR 0 1
80222: PPUSH
80223: LD_VAR 0 2
80227: PPUSH
80228: LD_INT 0
80230: PPUSH
80231: LD_INT 0
80233: PPUSH
80234: LD_INT 1
80236: PPUSH
80237: LD_INT 0
80239: PPUSH
80240: CALL_OW 587
// end ; end_of_file
80244: LD_VAR 0 3
80248: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80249: LD_VAR 0 1
80253: PUSH
80254: LD_INT 200
80256: DOUBLE
80257: GREATEREQUAL
80258: IFFALSE 80266
80260: LD_INT 299
80262: DOUBLE
80263: LESSEQUAL
80264: IFTRUE 80268
80266: GO 80300
80268: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80269: LD_VAR 0 1
80273: PPUSH
80274: LD_VAR 0 2
80278: PPUSH
80279: LD_VAR 0 3
80283: PPUSH
80284: LD_VAR 0 4
80288: PPUSH
80289: LD_VAR 0 5
80293: PPUSH
80294: CALL 34915 0 5
80298: GO 80377
80300: LD_INT 300
80302: DOUBLE
80303: GREATEREQUAL
80304: IFFALSE 80312
80306: LD_INT 399
80308: DOUBLE
80309: LESSEQUAL
80310: IFTRUE 80314
80312: GO 80376
80314: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80315: LD_VAR 0 1
80319: PPUSH
80320: LD_VAR 0 2
80324: PPUSH
80325: LD_VAR 0 3
80329: PPUSH
80330: LD_VAR 0 4
80334: PPUSH
80335: LD_VAR 0 5
80339: PPUSH
80340: LD_VAR 0 6
80344: PPUSH
80345: LD_VAR 0 7
80349: PPUSH
80350: LD_VAR 0 8
80354: PPUSH
80355: LD_VAR 0 9
80359: PPUSH
80360: LD_VAR 0 10
80364: PPUSH
80365: LD_VAR 0 11
80369: PPUSH
80370: CALL 31248 0 11
80374: GO 80377
80376: POP
// end ;
80377: PPOPN 11
80379: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80380: LD_VAR 0 1
80384: PPUSH
80385: LD_VAR 0 2
80389: PPUSH
80390: LD_VAR 0 3
80394: PPUSH
80395: LD_VAR 0 4
80399: PPUSH
80400: LD_VAR 0 5
80404: PPUSH
80405: CALL 34651 0 5
// end ; end_of_file
80409: PPOPN 5
80411: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80412: LD_VAR 0 1
80416: PPUSH
80417: LD_VAR 0 2
80421: PPUSH
80422: LD_VAR 0 3
80426: PPUSH
80427: LD_VAR 0 4
80431: PPUSH
80432: LD_VAR 0 5
80436: PPUSH
80437: LD_VAR 0 6
80441: PPUSH
80442: CALL 18900 0 6
// end ;
80446: PPOPN 6
80448: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80449: LD_INT 0
80451: PPUSH
// begin if not units then
80452: LD_VAR 0 1
80456: NOT
80457: IFFALSE 80461
// exit ;
80459: GO 80461
// end ;
80461: PPOPN 7
80463: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80464: CALL 18804 0 0
// end ;
80468: PPOPN 1
80470: END
