// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10108 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10238 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11645 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13874 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 1200 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 1200
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8327 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6376 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6376 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6376 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6376 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6376 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: PUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 3
1052: PPUSH
1053: CALL 6227 0 2
1057: AND
1058: IFFALSE 1094
1060: GO 1062
1062: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1063: LD_INT 3
1065: PPUSH
1066: LD_INT 3
1068: PPUSH
1069: CALL 6227 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_INT 24
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: LD_INT 48
1089: PPUSH
1090: CALL 8100 0 5
1094: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1095: LD_OWVAR 67
1099: PUSH
1100: LD_INT 3
1102: EQUAL
1103: PUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: CALL 6227 0 2
1114: AND
1115: IFFALSE 1151
1117: GO 1119
1119: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1120: LD_INT 3
1122: PPUSH
1123: LD_INT 3
1125: PPUSH
1126: CALL 6227 0 2
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_INT 24
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_INT 48
1146: PPUSH
1147: CALL 8100 0 5
1151: END
// every 0 0$01 trigger ru_protector do var i ;
1152: LD_EXP 17
1156: IFFALSE 1327
1158: GO 1160
1160: DISABLE
1161: LD_INT 0
1163: PPUSH
// begin enable ;
1164: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1165: LD_INT 14
1167: PPUSH
1168: LD_INT 81
1170: PUSH
1171: LD_INT 3
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: PPUSH
1178: CALL_OW 70
1182: IFFALSE 1257
// begin for i = 1 to ru_protector do
1184: LD_ADDR_VAR 0 1
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_EXP 17
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1253
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1202: LD_EXP 17
1206: PUSH
1207: LD_VAR 0 1
1211: ARRAY
1212: PPUSH
1213: LD_INT 14
1215: PPUSH
1216: LD_INT 81
1218: PUSH
1219: LD_INT 3
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PPUSH
1226: CALL_OW 70
1230: PPUSH
1231: LD_EXP 17
1235: PUSH
1236: LD_VAR 0 1
1240: ARRAY
1241: PPUSH
1242: CALL_OW 74
1246: PPUSH
1247: CALL_OW 115
1251: GO 1199
1253: POP
1254: POP
// end else
1255: GO 1327
// for i = 1 to ru_protector do
1257: LD_ADDR_VAR 0 1
1261: PUSH
1262: DOUBLE
1263: LD_INT 1
1265: DEC
1266: ST_TO_ADDR
1267: LD_EXP 17
1271: PUSH
1272: FOR_TO
1273: IFFALSE 1325
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1275: LD_EXP 17
1279: PUSH
1280: LD_VAR 0 1
1284: ARRAY
1285: PPUSH
1286: LD_INT 49
1288: PPUSH
1289: LD_INT 39
1291: PPUSH
1292: CALL_OW 297
1296: PUSH
1297: LD_INT 10
1299: GREATER
1300: IFFALSE 1323
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1302: LD_EXP 17
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 49
1315: PPUSH
1316: LD_INT 39
1318: PPUSH
1319: CALL_OW 111
1323: GO 1272
1325: POP
1326: POP
// end ;
1327: PPOPN 1
1329: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1330: LD_OWVAR 1
1334: PUSH
1335: LD_INT 4200
1337: PUSH
1338: LD_INT 2100
1340: PUSH
1341: LD_INT 1050
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: GREATER
1355: IFFALSE 1368
1357: GO 1359
1359: DISABLE
// need_buldozer := true ;
1360: LD_ADDR_EXP 18
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
1368: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1369: GO 1371
1371: DISABLE
// begin enable ;
1372: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1373: LD_ADDR_EXP 20
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 25
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: CALL_OW 69
1406: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1407: LD_ADDR_EXP 21
1411: PUSH
1412: LD_INT 22
1414: PUSH
1415: LD_INT 3
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 25
1424: PUSH
1425: LD_INT 2
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PPUSH
1436: CALL_OW 69
1440: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1441: LD_ADDR_EXP 22
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 25
1458: PUSH
1459: LD_INT 3
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PPUSH
1470: CALL_OW 69
1474: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1475: LD_ADDR_EXP 23
1479: PUSH
1480: LD_INT 22
1482: PUSH
1483: LD_INT 3
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 25
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PPUSH
1504: CALL_OW 69
1508: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1509: LD_ADDR_EXP 24
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 25
1526: PUSH
1527: LD_INT 9
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PPUSH
1538: CALL_OW 69
1542: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1543: LD_ADDR_EXP 25
1547: PUSH
1548: LD_INT 2
1550: PPUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 3
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 21
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1580: LD_ADDR_EXP 26
1584: PUSH
1585: LD_INT 34
1587: PUSH
1588: LD_INT 53
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1600: LD_ADDR_EXP 27
1604: PUSH
1605: LD_INT 34
1607: PUSH
1608: LD_INT 52
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1620: LD_ADDR_EXP 28
1624: PUSH
1625: LD_INT 34
1627: PUSH
1628: LD_INT 51
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PPUSH
1635: CALL_OW 69
1639: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1640: LD_ADDR_EXP 14
1644: PUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 1
1650: NEG
1651: PPUSH
1652: CALL 10626 0 2
1656: ST_TO_ADDR
// end ;
1657: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1658: LD_INT 22
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PPUSH
1668: CALL_OW 69
1672: PUSH
1673: LD_EXP 29
1677: AND
1678: PUSH
1679: LD_EXP 1
1683: OR
1684: IFFALSE 5251
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
1696: PPUSH
1697: PPUSH
1698: PPUSH
1699: PPUSH
1700: PPUSH
// begin enable ;
1701: ENABLE
// for i = 1 to ru_eng do
1702: LD_ADDR_VAR 0 1
1706: PUSH
1707: DOUBLE
1708: LD_INT 1
1710: DEC
1711: ST_TO_ADDR
1712: LD_EXP 21
1716: PUSH
1717: FOR_TO
1718: IFFALSE 1781
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1720: LD_EXP 21
1724: PUSH
1725: LD_VAR 0 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 314
1735: NOT
1736: PUSH
1737: LD_EXP 21
1741: PUSH
1742: LD_VAR 0 1
1746: ARRAY
1747: PPUSH
1748: CALL_OW 310
1752: NOT
1753: AND
1754: IFFALSE 1779
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1756: LD_EXP 21
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_INT 3
1769: PPUSH
1770: CALL 6136 0 1
1774: PPUSH
1775: CALL_OW 120
1779: GO 1717
1781: POP
1782: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1783: LD_INT 2
1785: PPUSH
1786: LD_INT 22
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 21
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: LD_INT 24
1811: PUSH
1812: LD_INT 1000
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PPUSH
1828: CALL_OW 70
1832: IFFALSE 1999
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 24
1867: PUSH
1868: LD_INT 1000
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 70
1888: ST_TO_ADDR
// for i = 1 to ru_eng do
1889: LD_ADDR_VAR 0 1
1893: PUSH
1894: DOUBLE
1895: LD_INT 1
1897: DEC
1898: ST_TO_ADDR
1899: LD_EXP 21
1903: PUSH
1904: FOR_TO
1905: IFFALSE 1997
// begin if IsInUnit ( ru_eng [ i ] ) then
1907: LD_EXP 21
1911: PUSH
1912: LD_VAR 0 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 310
1922: IFFALSE 1941
// ComExitBuilding ( ru_eng [ i ] ) else
1924: LD_EXP 21
1928: PUSH
1929: LD_VAR 0 1
1933: ARRAY
1934: PPUSH
1935: CALL_OW 122
1939: GO 1995
// if not WantRepair ( ru_eng [ i ] ) then
1941: LD_EXP 21
1945: PUSH
1946: LD_VAR 0 1
1950: ARRAY
1951: PPUSH
1952: CALL 10552 0 1
1956: NOT
1957: IFFALSE 1995
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1959: LD_EXP 21
1963: PUSH
1964: LD_VAR 0 1
1968: ARRAY
1969: PPUSH
1970: LD_VAR 0 4
1974: PPUSH
1975: LD_EXP 21
1979: PUSH
1980: LD_VAR 0 1
1984: ARRAY
1985: PPUSH
1986: CALL_OW 74
1990: PPUSH
1991: CALL_OW 130
// end ;
1995: GO 1904
1997: POP
1998: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
1999: LD_OWVAR 2
2003: PPUSH
2004: LD_INT 38
2006: PPUSH
2007: LD_INT 26
2009: PPUSH
2010: CALL 5469 0 3
2014: PUSH
2015: LD_INT 0
2017: EQUAL
2018: PUSH
2019: LD_OWVAR 2
2023: PPUSH
2024: LD_INT 29
2026: PPUSH
2027: LD_INT 37
2029: PPUSH
2030: CALL 5469 0 3
2034: PUSH
2035: LD_INT 0
2037: EQUAL
2038: AND
2039: IFFALSE 2176
// begin if ru_blist > 0 then
2041: LD_EXP 13
2045: PUSH
2046: LD_INT 0
2048: GREATER
2049: IFFALSE 2176
// begin for i = 1 to ru_eng do
2051: LD_ADDR_VAR 0 1
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 21
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2174
// if IsInUnit ( ru_eng [ i ] ) then
2069: LD_EXP 21
2073: PUSH
2074: LD_VAR 0 1
2078: ARRAY
2079: PPUSH
2080: CALL_OW 310
2084: IFFALSE 2103
// ComExitBuilding ( ru_eng [ i ] ) else
2086: LD_EXP 21
2090: PUSH
2091: LD_VAR 0 1
2095: ARRAY
2096: PPUSH
2097: CALL_OW 122
2101: GO 2172
// if not HasTask ( ru_eng [ i ] ) then
2103: LD_EXP 21
2107: PUSH
2108: LD_VAR 0 1
2112: ARRAY
2113: PPUSH
2114: CALL_OW 314
2118: NOT
2119: IFFALSE 2172
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2121: LD_EXP 21
2125: PUSH
2126: LD_VAR 0 1
2130: ARRAY
2131: PPUSH
2132: LD_EXP 13
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: LD_EXP 13
2145: PUSH
2146: LD_INT 2
2148: ARRAY
2149: PPUSH
2150: LD_EXP 13
2154: PUSH
2155: LD_INT 3
2157: ARRAY
2158: PPUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PPUSH
2168: CALL_OW 145
2172: GO 2066
2174: POP
2175: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2176: LD_ADDR_EXP 12
2180: PUSH
2181: LD_INT 3
2183: PPUSH
2184: LD_EXP 12
2188: PPUSH
2189: LD_EXP 15
2193: PPUSH
2194: CALL 9143 0 3
2198: ST_TO_ADDR
// if debug then
2199: LD_EXP 1
2203: IFFALSE 2215
// display_strings := ru_heal_list ;
2205: LD_ADDR_OWVAR 47
2209: PUSH
2210: LD_EXP 12
2214: ST_TO_ADDR
// for i = 1 to ru_sci do
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_EXP 23
2229: PUSH
2230: FOR_TO
2231: IFFALSE 2563
// begin if ru_heal_list then
2233: LD_EXP 12
2237: IFFALSE 2476
// begin list := ru_heal_list ;
2239: LD_ADDR_VAR 0 9
2243: PUSH
2244: LD_EXP 12
2248: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2249: LD_EXP 23
2253: PUSH
2254: LD_VAR 0 1
2258: ARRAY
2259: PPUSH
2260: CALL_OW 310
2264: IFFALSE 2281
// ComExitBuilding ( ru_sci [ i ] ) ;
2266: LD_EXP 23
2270: PUSH
2271: LD_VAR 0 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 122
// for p = 1 to list do
2281: LD_ADDR_VAR 0 5
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_VAR 0 9
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2472
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2299: LD_VAR 0 9
2303: PUSH
2304: LD_VAR 0 5
2308: ARRAY
2309: PPUSH
2310: CALL_OW 110
2314: PUSH
2315: LD_INT 100
2317: EQUAL
2318: PUSH
2319: LD_EXP 23
2323: PUSH
2324: LD_VAR 0 1
2328: ARRAY
2329: PPUSH
2330: LD_INT 100
2332: PPUSH
2333: CALL 69215 0 2
2337: NOT
2338: AND
2339: IFFALSE 2367
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2341: LD_EXP 23
2345: PUSH
2346: LD_VAR 0 1
2350: ARRAY
2351: PPUSH
2352: LD_VAR 0 9
2356: PUSH
2357: LD_VAR 0 5
2361: ARRAY
2362: PPUSH
2363: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2367: LD_VAR 0 9
2371: PUSH
2372: LD_VAR 0 5
2376: ARRAY
2377: PPUSH
2378: CALL_OW 110
2382: PUSH
2383: LD_INT 100
2385: GREATER
2386: IFFALSE 2414
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2388: LD_EXP 23
2392: PUSH
2393: LD_VAR 0 1
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 9
2403: PUSH
2404: LD_VAR 0 5
2408: ARRAY
2409: PPUSH
2410: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2414: LD_VAR 0 9
2418: PUSH
2419: LD_VAR 0 5
2423: ARRAY
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 308
2432: NOT
2433: IFFALSE 2455
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2435: LD_VAR 0 9
2439: PUSH
2440: LD_VAR 0 5
2444: ARRAY
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: CALL_OW 113
2453: GO 2470
// ComHold ( list [ p ] ) ;
2455: LD_VAR 0 9
2459: PUSH
2460: LD_VAR 0 5
2464: ARRAY
2465: PPUSH
2466: CALL_OW 140
// end ;
2470: GO 2296
2472: POP
2473: POP
// end else
2474: GO 2561
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2476: LD_EXP 23
2480: PUSH
2481: LD_VAR 0 1
2485: ARRAY
2486: PPUSH
2487: CALL_OW 314
2491: NOT
2492: PUSH
2493: LD_EXP 23
2497: PUSH
2498: LD_VAR 0 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 310
2508: NOT
2509: AND
2510: PUSH
2511: LD_EXP 12
2515: PUSH
2516: LD_INT 0
2518: EQUAL
2519: AND
2520: IFFALSE 2561
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2522: LD_EXP 23
2526: PUSH
2527: LD_VAR 0 1
2531: ARRAY
2532: PPUSH
2533: LD_INT 3
2535: PPUSH
2536: CALL 6376 0 1
2540: PPUSH
2541: LD_EXP 23
2545: PUSH
2546: LD_VAR 0 1
2550: ARRAY
2551: PPUSH
2552: CALL_OW 74
2556: PPUSH
2557: CALL_OW 120
// end ;
2561: GO 2230
2563: POP
2564: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2565: LD_INT 3
2567: PPUSH
2568: LD_EXP 6
2572: PPUSH
2573: CALL 6517 0 2
2577: IFFALSE 2591
// ResearchTechList ( 3 , ru_tech_list ) ;
2579: LD_INT 3
2581: PPUSH
2582: LD_EXP 6
2586: PPUSH
2587: CALL 6592 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2591: LD_EXP 21
2595: PPUSH
2596: LD_EXP 11
2600: PPUSH
2601: CALL 8499 0 2
// lab := GetLabs ( 3 ) ;
2605: LD_ADDR_VAR 0 8
2609: PUSH
2610: LD_INT 3
2612: PPUSH
2613: CALL 6376 0 1
2617: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2618: LD_VAR 0 8
2622: PUSH
2623: LD_EXP 12
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: AND
2632: IFFALSE 2759
// for i = 1 to lab do
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_VAR 0 8
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2757
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2652: LD_VAR 0 8
2656: PUSH
2657: LD_VAR 0 1
2661: ARRAY
2662: PPUSH
2663: CALL_OW 461
2667: PUSH
2668: LD_INT 6
2670: EQUAL
2671: IFFALSE 2755
// begin for p = 1 to ru_sci do
2673: LD_ADDR_VAR 0 5
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_EXP 23
2687: PUSH
2688: FOR_TO
2689: IFFALSE 2753
// if IsInUnit ( ru_sci [ p ] ) then
2691: LD_EXP 23
2695: PUSH
2696: LD_VAR 0 5
2700: ARRAY
2701: PPUSH
2702: CALL_OW 310
2706: IFFALSE 2725
// ComExitBuilding ( ru_sci [ p ] ) else
2708: LD_EXP 23
2712: PUSH
2713: LD_VAR 0 5
2717: ARRAY
2718: PPUSH
2719: CALL_OW 122
2723: GO 2751
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2725: LD_EXP 23
2729: PUSH
2730: LD_VAR 0 5
2734: ARRAY
2735: PPUSH
2736: LD_VAR 0 8
2740: PUSH
2741: LD_VAR 0 1
2745: ARRAY
2746: PPUSH
2747: CALL_OW 120
2751: GO 2688
2753: POP
2754: POP
// end ;
2755: GO 2649
2757: POP
2758: POP
// if GetTowers ( 3 ) < 5 then
2759: LD_INT 3
2761: PPUSH
2762: CALL 6931 0 1
2766: PUSH
2767: LD_INT 5
2769: LESS
2770: IFFALSE 2788
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2772: LD_EXP 21
2776: PPUSH
2777: LD_EXP 7
2781: PPUSH
2782: CALL 7539 0 2
2786: GO 2800
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2788: LD_INT 3
2790: PPUSH
2791: LD_EXP 8
2795: PPUSH
2796: CALL 7830 0 2
// if GetBuilding ( 3 , b_factory ) then
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL 6227 0 2
2810: IFFALSE 3080
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: CALL 6227 0 2
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: CALL_OW 461
2831: PUSH
2832: LD_INT 2
2834: EQUAL
2835: IFFALSE 3080
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2837: LD_ADDR_VAR 0 7
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: CALL 6227 0 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2857: LD_INT 3
2859: PPUSH
2860: LD_INT 24
2862: PPUSH
2863: LD_INT 53
2865: PPUSH
2866: CALL 7978 0 3
2870: PUSH
2871: LD_INT 0
2873: EQUAL
2874: PUSH
2875: LD_EXP 18
2879: AND
2880: IFFALSE 2903
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2882: LD_VAR 0 7
2886: PPUSH
2887: LD_INT 24
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 53
2898: PPUSH
2899: CALL 8100 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 22
2908: PPUSH
2909: LD_INT 52
2911: PPUSH
2912: CALL 7978 0 3
2916: PUSH
2917: LD_INT 0
2919: EQUAL
2920: PUSH
2921: LD_EXP 19
2925: AND
2926: IFFALSE 2949
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2928: LD_VAR 0 7
2932: PPUSH
2933: LD_INT 22
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 3
2941: PPUSH
2942: LD_INT 52
2944: PPUSH
2945: CALL 8100 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 22
2954: PPUSH
2955: LD_INT 49
2957: PPUSH
2958: CALL 7978 0 3
2962: PUSH
2963: LD_INT 4
2965: LESS
2966: PUSH
2967: LD_INT 31
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: CALL_OW 321
2977: PUSH
2978: LD_INT 2
2980: EQUAL
2981: AND
2982: IFFALSE 3005
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
2984: LD_VAR 0 7
2988: PPUSH
2989: LD_INT 22
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_INT 49
3000: PPUSH
3001: CALL 8100 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3005: LD_EXP 9
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: LESS
3030: IFFALSE 3080
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 24
3039: PPUSH
3040: LD_INT 1
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 46
3048: PUSH
3049: LD_INT 45
3051: PUSH
3052: LD_INT 47
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 12
3074: ARRAY
3075: PPUSH
3076: CALL 8100 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3080: LD_INT 3
3082: PPUSH
3083: CALL 6136 0 1
3087: PPUSH
3088: CALL 5828 0 1
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: PUSH
3097: LD_INT 250
3099: GREATER
3100: PUSH
3101: LD_INT 3
3103: PPUSH
3104: CALL 6136 0 1
3108: PPUSH
3109: CALL 5828 0 1
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PUSH
3118: LD_INT 50
3120: GREATER
3121: AND
3122: PUSH
3123: LD_INT 23
3125: PPUSH
3126: LD_INT 3
3128: PPUSH
3129: CALL_OW 321
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: AND
3138: PUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL 11350 0 1
3146: PUSH
3147: LD_INT 0
3149: EQUAL
3150: AND
3151: PUSH
3152: LD_INT 22
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 34
3164: PUSH
3165: LD_INT 49
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: PUSH
3181: LD_INT 3
3183: GREATER
3184: AND
3185: PUSH
3186: LD_OWVAR 2
3190: PPUSH
3191: LD_INT 51
3193: PPUSH
3194: LD_INT 42
3196: PPUSH
3197: CALL 5469 0 3
3201: PUSH
3202: LD_INT 0
3204: EQUAL
3205: AND
3206: IFFALSE 3291
// begin for i = 1 to ru_mech do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 22
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3289
// begin if IsInUnit ( ru_mech [ i ] ) then
3226: LD_EXP 22
3230: PUSH
3231: LD_VAR 0 1
3235: ARRAY
3236: PPUSH
3237: CALL_OW 310
3241: IFFALSE 3260
// ComExitBuilding ( ru_mech [ i ] ) else
3243: LD_EXP 22
3247: PUSH
3248: LD_VAR 0 1
3252: ARRAY
3253: PPUSH
3254: CALL_OW 122
3258: GO 3287
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3260: LD_EXP 22
3264: PUSH
3265: LD_VAR 0 1
3269: ARRAY
3270: PPUSH
3271: LD_INT 37
3273: PPUSH
3274: LD_INT 51
3276: PPUSH
3277: LD_INT 43
3279: PPUSH
3280: LD_INT 0
3282: PPUSH
3283: CALL_OW 170
// end ;
3287: GO 3223
3289: POP
3290: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3291: LD_OWVAR 1
3295: PUSH
3296: LD_INT 94500
3298: PUSH
3299: LD_INT 84000
3301: PUSH
3302: LD_INT 71400
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_OWVAR 67
3314: ARRAY
3315: GREATEREQUAL
3316: IFFALSE 3372
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3318: LD_OWVAR 1
3322: PUSH
3323: LD_INT 18900
3325: PUSH
3326: LD_INT 16800
3328: PUSH
3329: LD_INT 14700
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: LD_OWVAR 67
3341: ARRAY
3342: MOD
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3372
// if ru_reserve then
3349: LD_EXP 9
3353: IFFALSE 3372
// begin ru_attack_list := ru_reserve ;
3355: LD_ADDR_EXP 10
3359: PUSH
3360: LD_EXP 9
3364: ST_TO_ADDR
// ru_reserve := [ ] ;
3365: LD_ADDR_EXP 9
3369: PUSH
3370: EMPTY
3371: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3372: LD_EXP 10
3376: IFFALSE 3498
// begin for i = 1 to ru_attack_list do
3378: LD_ADDR_VAR 0 1
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_EXP 10
3392: PUSH
3393: FOR_TO
3394: IFFALSE 3496
// if GetLives ( ru_attack_list [ i ] ) >= 250 and not HasTask ( ru_attack_list [ i ] ) then
3396: LD_EXP 10
3400: PUSH
3401: LD_VAR 0 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 256
3411: PUSH
3412: LD_INT 250
3414: GREATEREQUAL
3415: PUSH
3416: LD_EXP 10
3420: PUSH
3421: LD_VAR 0 1
3425: ARRAY
3426: PPUSH
3427: CALL_OW 314
3431: NOT
3432: AND
3433: IFFALSE 3494
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3435: LD_EXP 10
3439: PUSH
3440: LD_VAR 0 1
3444: ARRAY
3445: PPUSH
3446: LD_INT 81
3448: PUSH
3449: LD_EXP 10
3453: PUSH
3454: LD_VAR 0 1
3458: ARRAY
3459: PPUSH
3460: CALL_OW 255
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 69
3473: PPUSH
3474: LD_EXP 10
3478: PUSH
3479: LD_VAR 0 1
3483: ARRAY
3484: PPUSH
3485: CALL_OW 74
3489: PPUSH
3490: CALL_OW 115
3494: GO 3393
3496: POP
3497: POP
// end ; if GetBehemoth ( 3 ) then
3498: LD_INT 3
3500: PPUSH
3501: CALL 11350 0 1
3505: IFFALSE 3877
// begin if ru_mech >= 4 then
3507: LD_EXP 22
3511: PUSH
3512: LD_INT 4
3514: GREATEREQUAL
3515: IFFALSE 3566
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3517: LD_ADDR_EXP 15
3521: PUSH
3522: LD_EXP 22
3526: PUSH
3527: LD_INT 1
3529: ARRAY
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_INT 2
3538: ARRAY
3539: PUSH
3540: LD_EXP 22
3544: PUSH
3545: LD_INT 3
3547: ARRAY
3548: PUSH
3549: LD_EXP 22
3553: PUSH
3554: LD_INT 4
3556: ARRAY
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: ST_TO_ADDR
3564: GO 3576
// ru_behemoth_mechanic := ru_mech ;
3566: LD_ADDR_EXP 15
3570: PUSH
3571: LD_EXP 22
3575: ST_TO_ADDR
// for i = 1 to ru_mech do
3576: LD_ADDR_VAR 0 1
3580: PUSH
3581: DOUBLE
3582: LD_INT 1
3584: DEC
3585: ST_TO_ADDR
3586: LD_EXP 22
3590: PUSH
3591: FOR_TO
3592: IFFALSE 3646
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3594: LD_EXP 22
3598: PUSH
3599: LD_VAR 0 1
3603: ARRAY
3604: PPUSH
3605: CALL_OW 310
3609: PUSH
3610: LD_EXP 22
3614: PUSH
3615: LD_VAR 0 1
3619: ARRAY
3620: PUSH
3621: LD_EXP 15
3625: IN
3626: AND
3627: IFFALSE 3644
// ComExitBuilding ( ru_mech [ i ] ) ;
3629: LD_EXP 22
3633: PUSH
3634: LD_VAR 0 1
3638: ARRAY
3639: PPUSH
3640: CALL_OW 122
3644: GO 3591
3646: POP
3647: POP
// if UnitsInside ( ru_fac ) = 0 then
3648: LD_INT 14
3650: PPUSH
3651: CALL_OW 313
3655: PUSH
3656: LD_INT 0
3658: EQUAL
3659: IFFALSE 3726
// begin InitHc_All ;
3661: CALL_OW 584
// for i := 1 to 5 do
3665: LD_ADDR_VAR 0 1
3669: PUSH
3670: DOUBLE
3671: LD_INT 1
3673: DEC
3674: ST_TO_ADDR
3675: LD_INT 5
3677: PUSH
3678: FOR_TO
3679: IFFALSE 3724
// begin uc_side := 3 ;
3681: LD_ADDR_OWVAR 20
3685: PUSH
3686: LD_INT 3
3688: ST_TO_ADDR
// uc_nation := 3 ;
3689: LD_ADDR_OWVAR 21
3693: PUSH
3694: LD_INT 3
3696: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3697: LD_INT 0
3699: PPUSH
3700: LD_INT 3
3702: PPUSH
3703: LD_INT 7
3705: PPUSH
3706: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3710: CALL_OW 44
3714: PPUSH
3715: LD_INT 14
3717: PPUSH
3718: CALL_OW 52
// end ;
3722: GO 3678
3724: POP
3725: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3726: LD_INT 12
3728: PPUSH
3729: LD_INT 22
3731: PUSH
3732: LD_INT 1
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PUSH
3739: LD_INT 21
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PPUSH
3753: CALL_OW 70
3757: PUSH
3758: LD_INT 0
3760: GREATER
3761: IFFALSE 3821
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3763: LD_INT 3
3765: PPUSH
3766: CALL 11350 0 1
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: PPUSH
3775: LD_INT 21
3777: PUSH
3778: LD_INT 2
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: LD_INT 34
3787: PUSH
3788: LD_INT 49
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PPUSH
3799: CALL_OW 69
3803: PPUSH
3804: LD_EXP 15
3808: PPUSH
3809: LD_INT 97
3811: PPUSH
3812: LD_INT 9
3814: PPUSH
3815: CALL 10847 0 5
3819: GO 3877
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3821: LD_INT 3
3823: PPUSH
3824: CALL 11350 0 1
3828: PUSH
3829: LD_INT 1
3831: ARRAY
3832: PPUSH
3833: LD_INT 21
3835: PUSH
3836: LD_INT 2
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 34
3845: PUSH
3846: LD_INT 49
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 69
3861: PPUSH
3862: LD_EXP 15
3866: PPUSH
3867: LD_INT 153
3869: PPUSH
3870: LD_INT 102
3872: PPUSH
3873: CALL 10847 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3877: LD_EXP 24
3881: PUSH
3882: LD_INT 0
3884: EQUAL
3885: PUSH
3886: LD_INT 44
3888: PPUSH
3889: LD_INT 3
3891: PPUSH
3892: CALL_OW 321
3896: PUSH
3897: LD_INT 2
3899: EQUAL
3900: AND
3901: IFFALSE 3912
// ComChangeClassToBazooker ( ru_sold ) ;
3903: LD_EXP 20
3907: PPUSH
3908: CALL 9784 0 1
// if ru_bazz then
3912: LD_EXP 24
3916: IFFALSE 3930
// IntBazooka ( ru_bazz , 1 ) ;
3918: LD_EXP 24
3922: PPUSH
3923: LD_INT 1
3925: PPUSH
3926: CALL 9503 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3930: LD_INT 67
3932: PPUSH
3933: LD_INT 39
3935: PPUSH
3936: LD_INT 3
3938: PPUSH
3939: CALL_OW 440
3943: PUSH
3944: LD_INT 0
3946: EQUAL
3947: PUSH
3948: LD_INT 20
3950: PPUSH
3951: LD_INT 3
3953: PPUSH
3954: CALL_OW 321
3958: PUSH
3959: LD_INT 2
3961: EQUAL
3962: AND
3963: IFFALSE 3984
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3965: LD_EXP 23
3969: PUSH
3970: LD_INT 1
3972: ARRAY
3973: PPUSH
3974: LD_INT 67
3976: PPUSH
3977: LD_INT 39
3979: PPUSH
3980: CALL 9082 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
3984: LD_INT 89
3986: PPUSH
3987: LD_INT 66
3989: PPUSH
3990: LD_INT 3
3992: PPUSH
3993: CALL_OW 440
3997: PUSH
3998: LD_INT 0
4000: EQUAL
4001: IFFALSE 4022
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
4003: LD_EXP 23
4007: PUSH
4008: LD_INT 1
4010: ARRAY
4011: PPUSH
4012: LD_INT 87
4014: PPUSH
4015: LD_INT 60
4017: PPUSH
4018: CALL 9082 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4022: LD_INT 104
4024: PPUSH
4025: LD_INT 94
4027: PPUSH
4028: LD_INT 3
4030: PPUSH
4031: CALL_OW 440
4035: PUSH
4036: LD_INT 0
4038: EQUAL
4039: PUSH
4040: LD_INT 20
4042: PPUSH
4043: LD_INT 3
4045: PPUSH
4046: CALL_OW 321
4050: PUSH
4051: LD_INT 2
4053: EQUAL
4054: AND
4055: IFFALSE 4076
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4057: LD_EXP 23
4061: PUSH
4062: LD_INT 1
4064: ARRAY
4065: PPUSH
4066: LD_INT 104
4068: PPUSH
4069: LD_INT 94
4071: PPUSH
4072: CALL 9082 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4076: LD_INT 3
4078: PPUSH
4079: LD_INT 24
4081: PPUSH
4082: LD_INT 53
4084: PPUSH
4085: CALL 7978 0 3
4089: PUSH
4090: LD_INT 1
4092: EQUAL
4093: PUSH
4094: LD_EXP 18
4098: AND
4099: IFFALSE 4240
// begin need_buldozer := false ;
4101: LD_ADDR_EXP 18
4105: PUSH
4106: LD_INT 0
4108: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4109: LD_INT 3
4111: PPUSH
4112: LD_INT 24
4114: PPUSH
4115: LD_INT 53
4117: PPUSH
4118: CALL 7978 0 3
4122: PUSH
4123: LD_INT 1
4125: ARRAY
4126: PPUSH
4127: LD_INT 67
4129: PPUSH
4130: LD_INT 39
4132: PPUSH
4133: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4137: LD_INT 3
4139: PPUSH
4140: LD_INT 24
4142: PPUSH
4143: LD_INT 53
4145: PPUSH
4146: CALL 7978 0 3
4150: PUSH
4151: LD_INT 1
4153: ARRAY
4154: PPUSH
4155: LD_INT 71
4157: PPUSH
4158: LD_INT 10
4160: PPUSH
4161: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4165: LD_INT 3
4167: PPUSH
4168: LD_INT 24
4170: PPUSH
4171: LD_INT 53
4173: PPUSH
4174: CALL 7978 0 3
4178: PUSH
4179: LD_INT 1
4181: ARRAY
4182: PPUSH
4183: LD_INT 15
4185: PPUSH
4186: CALL 5569 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 24
4195: PPUSH
4196: LD_INT 53
4198: PPUSH
4199: CALL 7978 0 3
4203: PUSH
4204: LD_INT 1
4206: ARRAY
4207: PPUSH
4208: LD_INT 350
4210: PPUSH
4211: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4215: LD_INT 3
4217: PPUSH
4218: LD_INT 24
4220: PPUSH
4221: LD_INT 53
4223: PPUSH
4224: CALL 7978 0 3
4228: PUSH
4229: LD_INT 1
4231: ARRAY
4232: PPUSH
4233: LD_INT 14
4235: PPUSH
4236: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4240: LD_INT 67
4242: PPUSH
4243: LD_INT 39
4245: PPUSH
4246: LD_INT 3
4248: PPUSH
4249: CALL_OW 440
4253: PUSH
4254: LD_INT 67
4256: PPUSH
4257: LD_INT 39
4259: PPUSH
4260: CALL_OW 428
4264: PUSH
4265: LD_INT 0
4267: EQUAL
4268: AND
4269: PUSH
4270: LD_INT 79
4272: PPUSH
4273: LD_INT 45
4275: PPUSH
4276: CALL_OW 428
4280: PPUSH
4281: CALL_OW 266
4285: PUSH
4286: LD_INT 0
4288: EQUAL
4289: AND
4290: PUSH
4291: LD_INT 1
4293: PPUSH
4294: LD_INT 79
4296: PPUSH
4297: LD_INT 45
4299: PPUSH
4300: CALL 5469 0 3
4304: PUSH
4305: LD_INT 0
4307: EQUAL
4308: AND
4309: IFFALSE 4412
// begin for i = 1 to ru_eng do
4311: LD_ADDR_VAR 0 1
4315: PUSH
4316: DOUBLE
4317: LD_INT 1
4319: DEC
4320: ST_TO_ADDR
4321: LD_EXP 21
4325: PUSH
4326: FOR_TO
4327: IFFALSE 4410
// if IsInUnit ( ru_eng [ i ] ) then
4329: LD_EXP 21
4333: PUSH
4334: LD_VAR 0 1
4338: ARRAY
4339: PPUSH
4340: CALL_OW 310
4344: IFFALSE 4363
// ComExitBuilding ( ru_eng [ i ] ) else
4346: LD_EXP 21
4350: PUSH
4351: LD_VAR 0 1
4355: ARRAY
4356: PPUSH
4357: CALL_OW 122
4361: GO 4408
// if not HasTask ( ru_eng [ i ] ) then
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: CALL_OW 314
4378: NOT
4379: IFFALSE 4408
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4381: LD_EXP 21
4385: PUSH
4386: LD_VAR 0 1
4390: ARRAY
4391: PPUSH
4392: LD_INT 30
4394: PPUSH
4395: LD_INT 67
4397: PPUSH
4398: LD_INT 39
4400: PPUSH
4401: LD_INT 3
4403: PPUSH
4404: CALL_OW 145
4408: GO 4326
4410: POP
4411: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4412: LD_INT 1
4414: PPUSH
4415: LD_INT 79
4417: PPUSH
4418: LD_INT 45
4420: PPUSH
4421: CALL 5469 0 3
4425: PUSH
4426: LD_INT 0
4428: EQUAL
4429: IFFALSE 4625
// begin if HexInfo ( 79 , 45 ) = 0 then
4431: LD_INT 79
4433: PPUSH
4434: LD_INT 45
4436: PPUSH
4437: CALL_OW 428
4441: PUSH
4442: LD_INT 0
4444: EQUAL
4445: IFFALSE 4467
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4447: LD_EXP 21
4451: PPUSH
4452: LD_INT 79
4454: PPUSH
4455: LD_INT 45
4457: PPUSH
4458: LD_INT 3
4460: PPUSH
4461: CALL 6993 0 4
4465: GO 4625
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4467: LD_INT 89
4469: PPUSH
4470: LD_INT 66
4472: PPUSH
4473: CALL_OW 428
4477: PUSH
4478: LD_INT 0
4480: EQUAL
4481: PUSH
4482: LD_INT 89
4484: PPUSH
4485: LD_INT 66
4487: PPUSH
4488: LD_INT 3
4490: PPUSH
4491: CALL_OW 440
4495: AND
4496: IFFALSE 4625
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4498: LD_INT 79
4500: PPUSH
4501: LD_INT 45
4503: PPUSH
4504: CALL_OW 428
4508: PPUSH
4509: CALL_OW 274
4513: PPUSH
4514: LD_INT 1
4516: PPUSH
4517: LD_INT 100
4519: PPUSH
4520: CALL_OW 277
// for i = 1 to ru_eng do
4524: LD_ADDR_VAR 0 1
4528: PUSH
4529: DOUBLE
4530: LD_INT 1
4532: DEC
4533: ST_TO_ADDR
4534: LD_EXP 21
4538: PUSH
4539: FOR_TO
4540: IFFALSE 4623
// if IsInUnit ( ru_eng [ i ] ) then
4542: LD_EXP 21
4546: PUSH
4547: LD_VAR 0 1
4551: ARRAY
4552: PPUSH
4553: CALL_OW 310
4557: IFFALSE 4576
// ComExitBuilding ( ru_eng [ i ] ) else
4559: LD_EXP 21
4563: PUSH
4564: LD_VAR 0 1
4568: ARRAY
4569: PPUSH
4570: CALL_OW 122
4574: GO 4621
// if not HasTask ( ru_eng [ i ] ) then
4576: LD_EXP 21
4580: PUSH
4581: LD_VAR 0 1
4585: ARRAY
4586: PPUSH
4587: CALL_OW 314
4591: NOT
4592: IFFALSE 4621
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4594: LD_EXP 21
4598: PUSH
4599: LD_VAR 0 1
4603: ARRAY
4604: PPUSH
4605: LD_INT 29
4607: PPUSH
4608: LD_INT 89
4610: PPUSH
4611: LD_INT 66
4613: PPUSH
4614: LD_INT 3
4616: PPUSH
4617: CALL_OW 145
4621: GO 4539
4623: POP
4624: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4625: LD_INT 3
4627: PPUSH
4628: LD_INT 29
4630: PPUSH
4631: CALL 6227 0 2
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: PUSH
4640: LD_INT 1
4642: PPUSH
4643: LD_INT 36
4645: PPUSH
4646: LD_INT 6
4648: PPUSH
4649: CALL 5469 0 3
4653: PUSH
4654: LD_INT 0
4656: EQUAL
4657: AND
4658: PUSH
4659: LD_INT 3
4661: PPUSH
4662: CALL 6136 0 1
4666: PPUSH
4667: LD_INT 29
4669: PPUSH
4670: CALL 5712 0 2
4674: AND
4675: IFFALSE 4778
// begin for i = 1 to ru_eng do
4677: LD_ADDR_VAR 0 1
4681: PUSH
4682: DOUBLE
4683: LD_INT 1
4685: DEC
4686: ST_TO_ADDR
4687: LD_EXP 21
4691: PUSH
4692: FOR_TO
4693: IFFALSE 4776
// begin if IsInUnit ( ru_eng [ i ] ) then
4695: LD_EXP 21
4699: PUSH
4700: LD_VAR 0 1
4704: ARRAY
4705: PPUSH
4706: CALL_OW 310
4710: IFFALSE 4729
// ComExitBuilding ( ru_eng [ i ] ) else
4712: LD_EXP 21
4716: PUSH
4717: LD_VAR 0 1
4721: ARRAY
4722: PPUSH
4723: CALL_OW 122
4727: GO 4774
// if not HasTask ( ru_eng [ i ] ) then
4729: LD_EXP 21
4733: PUSH
4734: LD_VAR 0 1
4738: ARRAY
4739: PPUSH
4740: CALL_OW 314
4744: NOT
4745: IFFALSE 4774
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4747: LD_EXP 21
4751: PUSH
4752: LD_VAR 0 1
4756: ARRAY
4757: PPUSH
4758: LD_INT 29
4760: PPUSH
4761: LD_INT 33
4763: PPUSH
4764: LD_INT 4
4766: PPUSH
4767: LD_INT 0
4769: PPUSH
4770: CALL_OW 205
// end ; end ;
4774: GO 4692
4776: POP
4777: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4778: LD_EXP 21
4782: PUSH
4783: LD_INT 79
4785: PPUSH
4786: LD_INT 45
4788: PPUSH
4789: CALL_OW 428
4793: PUSH
4794: LD_INT 0
4796: GREATER
4797: AND
4798: PUSH
4799: LD_INT 79
4801: PPUSH
4802: LD_INT 45
4804: PPUSH
4805: CALL_OW 428
4809: PPUSH
4810: CALL_OW 266
4814: PUSH
4815: LD_INT 0
4817: EQUAL
4818: AND
4819: IFFALSE 4979
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4821: LD_INT 79
4823: PPUSH
4824: LD_INT 45
4826: PPUSH
4827: CALL_OW 428
4831: PPUSH
4832: CALL_OW 255
4836: PUSH
4837: LD_INT 3
4839: EQUAL
4840: PUSH
4841: LD_INT 1
4843: PPUSH
4844: LD_INT 79
4846: PPUSH
4847: LD_INT 45
4849: PPUSH
4850: CALL 5469 0 3
4854: PUSH
4855: LD_INT 0
4857: EQUAL
4858: AND
4859: PUSH
4860: LD_INT 79
4862: PPUSH
4863: LD_INT 45
4865: PPUSH
4866: CALL_OW 428
4870: PPUSH
4871: CALL_OW 274
4875: PPUSH
4876: LD_INT 3
4878: PPUSH
4879: CALL_OW 275
4883: PUSH
4884: LD_INT 10
4886: GREATEREQUAL
4887: AND
4888: IFFALSE 4979
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4890: LD_EXP 21
4894: PUSH
4895: LD_INT 1
4897: ARRAY
4898: PPUSH
4899: CALL_OW 310
4903: IFFALSE 4920
// ComExitBuilding ( ru_eng [ 1 ] ) else
4905: LD_EXP 21
4909: PUSH
4910: LD_INT 1
4912: ARRAY
4913: PPUSH
4914: CALL_OW 122
4918: GO 4979
// if not HasTask ( ru_eng [ 1 ] ) then
4920: LD_EXP 21
4924: PUSH
4925: LD_INT 1
4927: ARRAY
4928: PPUSH
4929: CALL_OW 314
4933: NOT
4934: IFFALSE 4979
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4936: LD_EXP 21
4940: PUSH
4941: LD_INT 1
4943: ARRAY
4944: PPUSH
4945: LD_INT 79
4947: PPUSH
4948: LD_INT 45
4950: PPUSH
4951: CALL_OW 428
4955: PPUSH
4956: LD_INT 3
4958: PPUSH
4959: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
4963: LD_EXP 21
4967: PUSH
4968: LD_INT 1
4970: ARRAY
4971: PPUSH
4972: LD_INT 2
4974: PPUSH
4975: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4979: LD_EXP 21
4983: PUSH
4984: LD_INT 2
4986: GREATER
4987: PUSH
4988: LD_INT 79
4990: PPUSH
4991: LD_INT 45
4993: PPUSH
4994: CALL_OW 428
4998: PUSH
4999: LD_INT 0
5001: GREATER
5002: AND
5003: PUSH
5004: LD_INT 79
5006: PPUSH
5007: LD_INT 45
5009: PPUSH
5010: CALL_OW 428
5014: PPUSH
5015: CALL_OW 266
5019: PUSH
5020: LD_INT 0
5022: EQUAL
5023: AND
5024: IFFALSE 5184
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5026: LD_INT 79
5028: PPUSH
5029: LD_INT 45
5031: PPUSH
5032: CALL_OW 428
5036: PPUSH
5037: CALL_OW 255
5041: PUSH
5042: LD_INT 3
5044: EQUAL
5045: PUSH
5046: LD_INT 1
5048: PPUSH
5049: LD_INT 79
5051: PPUSH
5052: LD_INT 45
5054: PPUSH
5055: CALL 5469 0 3
5059: PUSH
5060: LD_INT 0
5062: EQUAL
5063: AND
5064: PUSH
5065: LD_INT 79
5067: PPUSH
5068: LD_INT 45
5070: PPUSH
5071: CALL_OW 428
5075: PPUSH
5076: CALL_OW 274
5080: PPUSH
5081: LD_INT 1
5083: PPUSH
5084: CALL_OW 275
5088: PUSH
5089: LD_INT 20
5091: GREATER
5092: AND
5093: IFFALSE 5184
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5095: LD_EXP 21
5099: PUSH
5100: LD_INT 2
5102: ARRAY
5103: PPUSH
5104: CALL_OW 310
5108: IFFALSE 5125
// ComExitBuilding ( ru_eng [ 2 ] ) else
5110: LD_EXP 21
5114: PUSH
5115: LD_INT 2
5117: ARRAY
5118: PPUSH
5119: CALL_OW 122
5123: GO 5184
// if not HasTask ( ru_eng [ 2 ] ) then
5125: LD_EXP 21
5129: PUSH
5130: LD_INT 2
5132: ARRAY
5133: PPUSH
5134: CALL_OW 314
5138: NOT
5139: IFFALSE 5184
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5141: LD_EXP 21
5145: PUSH
5146: LD_INT 2
5148: ARRAY
5149: PPUSH
5150: LD_INT 79
5152: PPUSH
5153: LD_INT 45
5155: PPUSH
5156: CALL_OW 428
5160: PPUSH
5161: LD_INT 1
5163: PPUSH
5164: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5168: LD_EXP 21
5172: PUSH
5173: LD_INT 2
5175: ARRAY
5176: PPUSH
5177: LD_INT 2
5179: PPUSH
5180: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5184: LD_INT 1
5186: PPUSH
5187: LD_INT 59
5189: PPUSH
5190: LD_INT 60
5192: PPUSH
5193: CALL 5469 0 3
5197: PUSH
5198: LD_INT 0
5200: EQUAL
5201: PUSH
5202: LD_INT 1
5204: PPUSH
5205: LD_INT 67
5207: PPUSH
5208: LD_INT 76
5210: PPUSH
5211: CALL 5469 0 3
5215: PUSH
5216: LD_INT 0
5218: EQUAL
5219: AND
5220: PUSH
5221: LD_INT 1
5223: PPUSH
5224: LD_INT 79
5226: PPUSH
5227: LD_INT 100
5229: PPUSH
5230: CALL 5469 0 3
5234: PUSH
5235: LD_INT 0
5237: EQUAL
5238: AND
5239: IFFALSE 5251
// CollectCrates ( 3 , west_crates ) ;
5241: LD_INT 3
5243: PPUSH
5244: LD_INT 13
5246: PPUSH
5247: CALL 11394 0 2
// end ;
5251: PPOPN 10
5253: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5254: LD_OWVAR 1
5258: PUSH
5259: LD_INT 111300
5261: LESSEQUAL
5262: PUSH
5263: LD_EXP 30
5267: NOT
5268: OR
5269: IFFALSE 5466
5271: GO 5273
5273: DISABLE
5274: LD_INT 0
5276: PPUSH
// begin enable ;
5277: ENABLE
// uc_nation := 3 ;
5278: LD_ADDR_OWVAR 21
5282: PUSH
5283: LD_INT 3
5285: ST_TO_ADDR
// uc_side := 3 ;
5286: LD_ADDR_OWVAR 20
5290: PUSH
5291: LD_INT 3
5293: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5294: LD_ADDR_OWVAR 37
5298: PUSH
5299: LD_INT 22
5301: ST_TO_ADDR
// vc_engine := engine_siberite ;
5302: LD_ADDR_OWVAR 39
5306: PUSH
5307: LD_INT 3
5309: ST_TO_ADDR
// vc_control := control_computer ;
5310: LD_ADDR_OWVAR 38
5314: PUSH
5315: LD_INT 3
5317: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5318: LD_ADDR_OWVAR 40
5322: PUSH
5323: LD_INT 51
5325: ST_TO_ADDR
// veh := CreateVehicle ;
5326: LD_ADDR_VAR 0 1
5330: PUSH
5331: CALL_OW 45
5335: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5336: LD_VAR 0 1
5340: PPUSH
5341: LD_INT 4
5343: PPUSH
5344: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 10
5355: PPUSH
5356: LD_INT 0
5358: PPUSH
5359: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5363: LD_VAR 0 1
5367: PPUSH
5368: LD_INT 1
5370: PUSH
5371: LD_INT 2
5373: PUSH
5374: LD_INT 3
5376: PUSH
5377: LD_INT 2
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 1
5388: PPUSH
5389: LD_INT 4
5391: PPUSH
5392: CALL_OW 12
5396: ARRAY
5397: PPUSH
5398: LD_INT 100
5400: PPUSH
5401: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5405: LD_VAR 0 1
5409: PPUSH
5410: LD_INT 2
5412: PPUSH
5413: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5417: LD_VAR 0 1
5421: PPUSH
5422: LD_INT 10
5424: PPUSH
5425: CALL_OW 173
// Wait ( 0 0$10 ) ;
5429: LD_INT 350
5431: PPUSH
5432: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5436: LD_INT 35
5438: PPUSH
5439: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5443: LD_VAR 0 1
5447: PPUSH
5448: LD_INT 10
5450: PPUSH
5451: CALL_OW 308
5455: IFFALSE 5436
// RemoveUnit ( veh ) ;
5457: LD_VAR 0 1
5461: PPUSH
5462: CALL_OW 64
// end ; end_of_file
5466: PPOPN 1
5468: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5469: LD_INT 0
5471: PPUSH
5472: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5473: LD_ADDR_VAR 0 5
5477: PUSH
5478: LD_INT 22
5480: PUSH
5481: LD_VAR 0 1
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: PPUSH
5490: CALL_OW 69
5494: PPUSH
5495: LD_VAR 0 2
5499: PPUSH
5500: LD_VAR 0 3
5504: PPUSH
5505: CALL_OW 73
5509: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5510: LD_ADDR_VAR 0 4
5514: PUSH
5515: LD_VAR 0 5
5519: PPUSH
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_VAR 0 3
5529: PPUSH
5530: CALL_OW 297
5534: PUSH
5535: LD_INT 15
5537: LESS
5538: PUSH
5539: LD_INT 2
5541: PPUSH
5542: LD_INT 22
5544: PUSH
5545: LD_VAR 0 1
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PPUSH
5554: CALL_OW 70
5558: PUSH
5559: LD_INT 0
5561: GREATER
5562: OR
5563: ST_TO_ADDR
// end ;
5564: LD_VAR 0 4
5568: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5569: LD_INT 0
5571: PPUSH
5572: PPUSH
// area = ListEnvironmentArea ( area ) ;
5573: LD_ADDR_VAR 0 2
5577: PUSH
5578: LD_VAR 0 2
5582: PPUSH
5583: CALL_OW 353
5587: ST_TO_ADDR
// if bulldozer > 0 then
5588: LD_VAR 0 1
5592: PUSH
5593: LD_INT 0
5595: GREATER
5596: IFFALSE 5707
// for i = 1 to area do
5598: LD_ADDR_VAR 0 4
5602: PUSH
5603: DOUBLE
5604: LD_INT 1
5606: DEC
5607: ST_TO_ADDR
5608: LD_VAR 0 2
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5705
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5616: LD_VAR 0 2
5620: PUSH
5621: LD_VAR 0 4
5625: ARRAY
5626: PUSH
5627: LD_INT 1
5629: ARRAY
5630: PPUSH
5631: LD_VAR 0 2
5635: PUSH
5636: LD_VAR 0 4
5640: ARRAY
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: CALL_OW 351
5650: IFFALSE 5703
// if not HasTask ( bulldozer ) then
5652: LD_VAR 0 1
5656: PPUSH
5657: CALL_OW 314
5661: NOT
5662: IFFALSE 5703
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5664: LD_VAR 0 1
5668: PPUSH
5669: LD_VAR 0 2
5673: PUSH
5674: LD_VAR 0 4
5678: ARRAY
5679: PUSH
5680: LD_INT 1
5682: ARRAY
5683: PPUSH
5684: LD_VAR 0 2
5688: PUSH
5689: LD_VAR 0 4
5693: ARRAY
5694: PUSH
5695: LD_INT 2
5697: ARRAY
5698: PPUSH
5699: CALL_OW 171
5703: GO 5613
5705: POP
5706: POP
// end ;
5707: LD_VAR 0 3
5711: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5712: LD_INT 0
5714: PPUSH
5715: PPUSH
5716: PPUSH
// pom := GetBase ( bdepot ) ;
5717: LD_ADDR_VAR 0 4
5721: PUSH
5722: LD_VAR 0 1
5726: PPUSH
5727: CALL_OW 274
5731: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5732: LD_ADDR_VAR 0 5
5736: PUSH
5737: LD_VAR 0 2
5741: PPUSH
5742: LD_VAR 0 1
5746: PPUSH
5747: CALL_OW 248
5751: PPUSH
5752: CALL_OW 450
5756: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5757: LD_VAR 0 4
5761: PPUSH
5762: LD_INT 1
5764: PPUSH
5765: CALL_OW 275
5769: PUSH
5770: LD_VAR 0 5
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: GREATEREQUAL
5779: PUSH
5780: LD_VAR 0 4
5784: PPUSH
5785: LD_INT 3
5787: PPUSH
5788: CALL_OW 275
5792: PUSH
5793: LD_VAR 0 5
5797: PUSH
5798: LD_INT 3
5800: ARRAY
5801: GREATEREQUAL
5802: AND
5803: IFFALSE 5815
// result := true else
5805: LD_ADDR_VAR 0 3
5809: PUSH
5810: LD_INT 1
5812: ST_TO_ADDR
5813: GO 5823
// result := false ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_INT 0
5822: ST_TO_ADDR
// end ;
5823: LD_VAR 0 3
5827: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5828: LD_INT 0
5830: PPUSH
5831: PPUSH
5832: PPUSH
// pom := GetBase ( bdepot ) ;
5833: LD_ADDR_VAR 0 3
5837: PUSH
5838: LD_VAR 0 1
5842: PPUSH
5843: CALL_OW 274
5847: ST_TO_ADDR
// sor := [ ] ;
5848: LD_ADDR_VAR 0 4
5852: PUSH
5853: EMPTY
5854: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5855: LD_ADDR_VAR 0 4
5859: PUSH
5860: LD_VAR 0 4
5864: PUSH
5865: LD_VAR 0 3
5869: PPUSH
5870: LD_INT 1
5872: PPUSH
5873: CALL_OW 275
5877: ADD
5878: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5879: LD_ADDR_VAR 0 4
5883: PUSH
5884: LD_VAR 0 4
5888: PUSH
5889: LD_VAR 0 3
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: CALL_OW 275
5901: ADD
5902: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5903: LD_ADDR_VAR 0 4
5907: PUSH
5908: LD_VAR 0 4
5912: PUSH
5913: LD_VAR 0 3
5917: PPUSH
5918: LD_INT 3
5920: PPUSH
5921: CALL_OW 275
5925: ADD
5926: ST_TO_ADDR
// result := sor ;
5927: LD_ADDR_VAR 0 2
5931: PUSH
5932: LD_VAR 0 4
5936: ST_TO_ADDR
// end ;
5937: LD_VAR 0 2
5941: RET
// export function Hex ( x , y ) ; begin
5942: LD_INT 0
5944: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
5945: LD_VAR 0 1
5949: PPUSH
5950: LD_VAR 0 2
5954: PPUSH
5955: CALL_OW 488
5959: PUSH
5960: LD_VAR 0 1
5964: PPUSH
5965: LD_VAR 0 2
5969: PPUSH
5970: CALL_OW 428
5974: PUSH
5975: LD_INT 0
5977: EQUAL
5978: AND
5979: IFFALSE 5991
// result := true else
5981: LD_ADDR_VAR 0 3
5985: PUSH
5986: LD_INT 1
5988: ST_TO_ADDR
5989: GO 5999
// result := false ;
5991: LD_ADDR_VAR 0 3
5995: PUSH
5996: LD_INT 0
5998: ST_TO_ADDR
// end ;
5999: LD_VAR 0 3
6003: RET
// export function NeedBuilding ( side , btype ) ; begin
6004: LD_INT 0
6006: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
6007: LD_INT 22
6009: PUSH
6010: LD_VAR 0 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 30
6021: PUSH
6022: LD_VAR 0 2
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: LD_INT 3
6033: PUSH
6034: LD_INT 57
6036: PUSH
6037: EMPTY
6038: LIST
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: PPUSH
6049: CALL_OW 69
6053: PUSH
6054: LD_INT 0
6056: EQUAL
6057: IFFALSE 6069
// result := true else
6059: LD_ADDR_VAR 0 3
6063: PUSH
6064: LD_INT 1
6066: ST_TO_ADDR
6067: GO 6077
// result := false ;
6069: LD_ADDR_VAR 0 3
6073: PUSH
6074: LD_INT 0
6076: ST_TO_ADDR
// end ;
6077: LD_VAR 0 3
6081: RET
// export function NeedBase ( side ) ; begin
6082: LD_INT 0
6084: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6085: LD_VAR 0 1
6089: PPUSH
6090: LD_INT 0
6092: PPUSH
6093: CALL 6004 0 2
6097: PUSH
6098: LD_VAR 0 1
6102: PPUSH
6103: LD_INT 1
6105: PPUSH
6106: CALL 6004 0 2
6110: AND
6111: IFFALSE 6123
// result := true else
6113: LD_ADDR_VAR 0 2
6117: PUSH
6118: LD_INT 1
6120: ST_TO_ADDR
6121: GO 6131
// result := false ;
6123: LD_ADDR_VAR 0 2
6127: PUSH
6128: LD_INT 0
6130: ST_TO_ADDR
// end ;
6131: LD_VAR 0 2
6135: RET
// export function MyBase ( side ) ; begin
6136: LD_INT 0
6138: PPUSH
// if not NeedBase ( side ) then
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL 6082 0 1
6148: NOT
6149: IFFALSE 6214
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6151: LD_ADDR_VAR 0 2
6155: PUSH
6156: LD_INT 22
6158: PUSH
6159: LD_VAR 0 1
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 2
6170: PUSH
6171: LD_INT 30
6173: PUSH
6174: LD_INT 0
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 30
6183: PUSH
6184: LD_INT 1
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: PPUSH
6203: CALL_OW 69
6207: PUSH
6208: LD_INT 1
6210: ARRAY
6211: ST_TO_ADDR
6212: GO 6222
// result := false ;
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: LD_INT 0
6221: ST_TO_ADDR
// end ;
6222: LD_VAR 0 2
6226: RET
// export function GetBuilding ( side , btype ) ; begin
6227: LD_INT 0
6229: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6230: LD_INT 22
6232: PUSH
6233: LD_VAR 0 1
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 30
6244: PUSH
6245: LD_VAR 0 2
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PPUSH
6258: CALL_OW 69
6262: PUSH
6263: LD_INT 0
6265: GREATER
6266: IFFALSE 6308
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6268: LD_ADDR_VAR 0 3
6272: PUSH
6273: LD_INT 22
6275: PUSH
6276: LD_VAR 0 1
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: LD_INT 30
6287: PUSH
6288: LD_VAR 0 2
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PPUSH
6301: CALL_OW 69
6305: ST_TO_ADDR
6306: GO 6316
// result := false ;
6308: LD_ADDR_VAR 0 3
6312: PUSH
6313: LD_INT 0
6315: ST_TO_ADDR
// end ;
6316: LD_VAR 0 3
6320: RET
// export function GetCrates ( side ) ; begin
6321: LD_INT 0
6323: PPUSH
// result := 0 ;
6324: LD_ADDR_VAR 0 2
6328: PUSH
6329: LD_INT 0
6331: ST_TO_ADDR
// if MyBase ( side ) then
6332: LD_VAR 0 1
6336: PPUSH
6337: CALL 6136 0 1
6341: IFFALSE 6371
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6343: LD_ADDR_VAR 0 2
6347: PUSH
6348: LD_VAR 0 1
6352: PPUSH
6353: CALL 6136 0 1
6357: PPUSH
6358: CALL_OW 274
6362: PPUSH
6363: LD_INT 1
6365: PPUSH
6366: CALL_OW 275
6370: ST_TO_ADDR
// end ;
6371: LD_VAR 0 2
6375: RET
// export function GetLabs ( side ) ; begin
6376: LD_INT 0
6378: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6379: LD_ADDR_VAR 0 2
6383: PUSH
6384: LD_INT 22
6386: PUSH
6387: LD_VAR 0 1
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 2
6398: PUSH
6399: LD_INT 30
6401: PUSH
6402: LD_INT 6
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 30
6411: PUSH
6412: LD_INT 8
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 30
6421: PUSH
6422: LD_INT 7
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PUSH
6439: EMPTY
6440: LIST
6441: PPUSH
6442: CALL_OW 69
6446: ST_TO_ADDR
// end ;
6447: LD_VAR 0 2
6451: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6452: LD_INT 0
6454: PPUSH
6455: PPUSH
6456: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6457: LD_ADDR_VAR 0 3
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_INT 1
6469: PPUSH
6470: CALL_OW 268
6474: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6475: LD_ADDR_VAR 0 4
6479: PUSH
6480: LD_VAR 0 1
6484: PPUSH
6485: LD_INT 2
6487: PPUSH
6488: CALL_OW 268
6492: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6493: LD_ADDR_VAR 0 2
6497: PUSH
6498: LD_VAR 0 3
6502: PUSH
6503: LD_VAR 0 4
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: ST_TO_ADDR
// end ;
6512: LD_VAR 0 2
6516: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6517: LD_INT 0
6519: PPUSH
6520: PPUSH
// result := false ;
6521: LD_ADDR_VAR 0 3
6525: PUSH
6526: LD_INT 0
6528: ST_TO_ADDR
// for i = 1 to tlist do
6529: LD_ADDR_VAR 0 4
6533: PUSH
6534: DOUBLE
6535: LD_INT 1
6537: DEC
6538: ST_TO_ADDR
6539: LD_VAR 0 2
6543: PUSH
6544: FOR_TO
6545: IFFALSE 6585
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6547: LD_VAR 0 2
6551: PUSH
6552: LD_VAR 0 4
6556: ARRAY
6557: PPUSH
6558: LD_VAR 0 1
6562: PPUSH
6563: CALL_OW 321
6567: PUSH
6568: LD_INT 2
6570: NONEQUAL
6571: IFFALSE 6583
// begin result := true ;
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_INT 1
6580: ST_TO_ADDR
// break ;
6581: GO 6585
// end ;
6583: GO 6544
6585: POP
6586: POP
// end ;
6587: LD_VAR 0 3
6591: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6592: LD_INT 0
6594: PPUSH
6595: PPUSH
6596: PPUSH
6597: PPUSH
6598: PPUSH
6599: PPUSH
6600: PPUSH
6601: PPUSH
// lab := GetLabs ( side ) ;
6602: LD_ADDR_VAR 0 5
6606: PUSH
6607: LD_VAR 0 1
6611: PPUSH
6612: CALL 6376 0 1
6616: ST_TO_ADDR
// tmp := 0 ;
6617: LD_ADDR_VAR 0 7
6621: PUSH
6622: LD_INT 0
6624: ST_TO_ADDR
// list := [ ] ;
6625: LD_ADDR_VAR 0 8
6629: PUSH
6630: EMPTY
6631: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6632: LD_ADDR_VAR 0 10
6636: PUSH
6637: LD_INT 35
6639: PUSH
6640: LD_INT 45
6642: PUSH
6643: LD_INT 46
6645: PUSH
6646: LD_INT 47
6648: PUSH
6649: LD_INT 1
6651: PUSH
6652: LD_INT 2
6654: PUSH
6655: LD_INT 48
6657: PUSH
6658: LD_INT 49
6660: PUSH
6661: LD_INT 50
6663: PUSH
6664: LD_INT 20
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: ST_TO_ADDR
// for i = 1 to tlist do
6679: LD_ADDR_VAR 0 4
6683: PUSH
6684: DOUBLE
6685: LD_INT 1
6687: DEC
6688: ST_TO_ADDR
6689: LD_VAR 0 2
6693: PUSH
6694: FOR_TO
6695: IFFALSE 6747
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6697: LD_VAR 0 2
6701: PUSH
6702: LD_VAR 0 4
6706: ARRAY
6707: PPUSH
6708: LD_VAR 0 1
6712: PPUSH
6713: CALL_OW 321
6717: PUSH
6718: LD_INT 2
6720: NONEQUAL
6721: IFFALSE 6745
// list := list ^ tlist [ i ] ;
6723: LD_ADDR_VAR 0 8
6727: PUSH
6728: LD_VAR 0 8
6732: PUSH
6733: LD_VAR 0 2
6737: PUSH
6738: LD_VAR 0 4
6742: ARRAY
6743: ADD
6744: ST_TO_ADDR
6745: GO 6694
6747: POP
6748: POP
// if list then
6749: LD_VAR 0 8
6753: IFFALSE 6918
// begin for i = 1 to lab do
6755: LD_ADDR_VAR 0 4
6759: PUSH
6760: DOUBLE
6761: LD_INT 1
6763: DEC
6764: ST_TO_ADDR
6765: LD_VAR 0 5
6769: PUSH
6770: FOR_TO
6771: IFFALSE 6841
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6773: LD_VAR 0 8
6777: PUSH
6778: LD_INT 1
6780: ARRAY
6781: PUSH
6782: LD_VAR 0 10
6786: IN
6787: PUSH
6788: LD_VAR 0 8
6792: PUSH
6793: LD_INT 1
6795: ARRAY
6796: PPUSH
6797: CALL_OW 481
6801: PUSH
6802: LD_VAR 0 5
6806: PUSH
6807: LD_VAR 0 4
6811: ARRAY
6812: PPUSH
6813: CALL 6452 0 1
6817: IN
6818: OR
6819: IFFALSE 6839
// begin mylab := lab [ i ] ;
6821: LD_ADDR_VAR 0 9
6825: PUSH
6826: LD_VAR 0 5
6830: PUSH
6831: LD_VAR 0 4
6835: ARRAY
6836: ST_TO_ADDR
// break ;
6837: GO 6841
// end ;
6839: GO 6770
6841: POP
6842: POP
// if mylab then
6843: LD_VAR 0 9
6847: IFFALSE 6908
// begin if BuildingStatus ( mylab ) = bs_idle then
6849: LD_VAR 0 9
6853: PPUSH
6854: CALL_OW 461
6858: PUSH
6859: LD_INT 2
6861: EQUAL
6862: IFFALSE 6906
// for i = 1 to list do
6864: LD_ADDR_VAR 0 4
6868: PUSH
6869: DOUBLE
6870: LD_INT 1
6872: DEC
6873: ST_TO_ADDR
6874: LD_VAR 0 8
6878: PUSH
6879: FOR_TO
6880: IFFALSE 6904
// AddComResearch ( mylab , list [ i ] ) ;
6882: LD_VAR 0 9
6886: PPUSH
6887: LD_VAR 0 8
6891: PUSH
6892: LD_VAR 0 4
6896: ARRAY
6897: PPUSH
6898: CALL_OW 184
6902: GO 6879
6904: POP
6905: POP
// end else
6906: GO 6916
// result := false ;
6908: LD_ADDR_VAR 0 3
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// end else
6916: GO 6926
// result := false ;
6918: LD_ADDR_VAR 0 3
6922: PUSH
6923: LD_INT 0
6925: ST_TO_ADDR
// end ;
6926: LD_VAR 0 3
6930: RET
// export function GetTowers ( side ) ; begin
6931: LD_INT 0
6933: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
6934: LD_ADDR_VAR 0 2
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_VAR 0 1
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 2
6953: PUSH
6954: LD_INT 30
6956: PUSH
6957: LD_INT 32
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: LD_INT 30
6966: PUSH
6967: LD_INT 33
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PPUSH
6983: CALL_OW 69
6987: ST_TO_ADDR
// end ;
6988: LD_VAR 0 2
6992: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
6993: LD_INT 0
6995: PPUSH
6996: PPUSH
// if Hex ( x , y ) then
6997: LD_VAR 0 2
7001: PPUSH
7002: LD_VAR 0 3
7006: PPUSH
7007: CALL 5942 0 2
7011: IFFALSE 7086
// for i = 1 to plist do
7013: LD_ADDR_VAR 0 6
7017: PUSH
7018: DOUBLE
7019: LD_INT 1
7021: DEC
7022: ST_TO_ADDR
7023: LD_VAR 0 1
7027: PUSH
7028: FOR_TO
7029: IFFALSE 7084
// if not HasTask ( plist [ i ] ) then
7031: LD_VAR 0 1
7035: PUSH
7036: LD_VAR 0 6
7040: ARRAY
7041: PPUSH
7042: CALL_OW 314
7046: NOT
7047: IFFALSE 7082
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7049: LD_VAR 0 1
7053: PUSH
7054: LD_VAR 0 6
7058: ARRAY
7059: PPUSH
7060: LD_INT 0
7062: PPUSH
7063: LD_VAR 0 2
7067: PPUSH
7068: LD_VAR 0 3
7072: PPUSH
7073: LD_VAR 0 4
7077: PPUSH
7078: CALL_OW 145
7082: GO 7028
7084: POP
7085: POP
// end ;
7086: LD_VAR 0 5
7090: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7091: LD_INT 0
7093: PPUSH
7094: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL_OW 266
7104: PUSH
7105: LD_INT 0
7107: EQUAL
7108: PUSH
7109: LD_VAR 0 2
7113: PPUSH
7114: LD_INT 1
7116: PPUSH
7117: CALL 5712 0 2
7121: AND
7122: PUSH
7123: LD_VAR 0 1
7127: PUSH
7128: LD_INT 1
7130: ARRAY
7131: PPUSH
7132: CALL_OW 255
7136: PPUSH
7137: CALL_OW 345
7141: NOT
7142: AND
7143: IFFALSE 7239
// begin ComUpgrade ( bident ) ;
7145: LD_VAR 0 2
7149: PPUSH
7150: CALL_OW 146
// for i = 1 to plist do
7154: LD_ADDR_VAR 0 4
7158: PUSH
7159: DOUBLE
7160: LD_INT 1
7162: DEC
7163: ST_TO_ADDR
7164: LD_VAR 0 1
7168: PUSH
7169: FOR_TO
7170: IFFALSE 7227
// if not HasTask ( plist [ i ] ) then
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PPUSH
7183: CALL_OW 314
7187: NOT
7188: IFFALSE 7225
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7190: LD_VAR 0 1
7194: PUSH
7195: LD_VAR 0 4
7199: ARRAY
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: CALL_OW 250
7210: PPUSH
7211: LD_VAR 0 2
7215: PPUSH
7216: CALL_OW 251
7220: PPUSH
7221: CALL_OW 111
7225: GO 7169
7227: POP
7228: POP
// result := true ;
7229: LD_ADDR_VAR 0 3
7233: PUSH
7234: LD_INT 1
7236: ST_TO_ADDR
// end else
7237: GO 7247
// result := false ;
7239: LD_ADDR_VAR 0 3
7243: PUSH
7244: LD_INT 0
7246: ST_TO_ADDR
// end ;
7247: LD_VAR 0 3
7251: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7252: LD_INT 0
7254: PPUSH
7255: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7256: LD_VAR 0 1
7260: PUSH
7261: LD_INT 1
7263: ARRAY
7264: PPUSH
7265: CALL_OW 255
7269: PPUSH
7270: CALL 6321 0 1
7274: PUSH
7275: LD_INT 20
7277: GREATEREQUAL
7278: PUSH
7279: LD_VAR 0 2
7283: PPUSH
7284: LD_VAR 0 3
7288: PPUSH
7289: CALL 5942 0 2
7293: AND
7294: IFFALSE 7379
// begin for i = 1 to plist do
7296: LD_ADDR_VAR 0 6
7300: PUSH
7301: DOUBLE
7302: LD_INT 1
7304: DEC
7305: ST_TO_ADDR
7306: LD_VAR 0 1
7310: PUSH
7311: FOR_TO
7312: IFFALSE 7367
// if not HasTask ( plist [ i ] ) then
7314: LD_VAR 0 1
7318: PUSH
7319: LD_VAR 0 6
7323: ARRAY
7324: PPUSH
7325: CALL_OW 314
7329: NOT
7330: IFFALSE 7365
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7332: LD_VAR 0 1
7336: PUSH
7337: LD_VAR 0 6
7341: ARRAY
7342: PPUSH
7343: LD_INT 6
7345: PPUSH
7346: LD_VAR 0 2
7350: PPUSH
7351: LD_VAR 0 3
7355: PPUSH
7356: LD_VAR 0 4
7360: PPUSH
7361: CALL_OW 145
7365: GO 7311
7367: POP
7368: POP
// result := true ;
7369: LD_ADDR_VAR 0 5
7373: PUSH
7374: LD_INT 1
7376: ST_TO_ADDR
// end else
7377: GO 7387
// result := false ;
7379: LD_ADDR_VAR 0 5
7383: PUSH
7384: LD_INT 0
7386: ST_TO_ADDR
// end ;
7387: LD_VAR 0 5
7391: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7392: LD_INT 0
7394: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7395: LD_VAR 0 1
7399: PPUSH
7400: LD_INT 1
7402: PPUSH
7403: CALL_OW 268
7407: PUSH
7408: LD_INT 9
7410: EQUAL
7411: PUSH
7412: LD_VAR 0 1
7416: PPUSH
7417: LD_INT 2
7419: PPUSH
7420: CALL_OW 268
7424: PUSH
7425: LD_INT 9
7427: EQUAL
7428: AND
7429: IFFALSE 7526
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7431: LD_VAR 0 1
7435: PPUSH
7436: LD_VAR 0 2
7440: PPUSH
7441: CALL 5712 0 2
7445: PUSH
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_VAR 0 3
7455: PPUSH
7456: CALL 5712 0 2
7460: AND
7461: PUSH
7462: LD_VAR 0 1
7466: PPUSH
7467: CALL_OW 461
7471: PUSH
7472: LD_INT 2
7474: EQUAL
7475: AND
7476: IFFALSE 7516
// begin ComUpgradeLab ( lab , bkind1 ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: LD_VAR 0 2
7487: PPUSH
7488: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7492: LD_VAR 0 1
7496: PPUSH
7497: LD_VAR 0 3
7501: PPUSH
7502: CALL_OW 207
// result := true ;
7506: LD_ADDR_VAR 0 4
7510: PUSH
7511: LD_INT 1
7513: ST_TO_ADDR
// end else
7514: GO 7524
// result := false ;
7516: LD_ADDR_VAR 0 4
7520: PUSH
7521: LD_INT 0
7523: ST_TO_ADDR
// end else
7524: GO 7534
// result := false ;
7526: LD_ADDR_VAR 0 4
7530: PUSH
7531: LD_INT 0
7533: ST_TO_ADDR
// end ;
7534: LD_VAR 0 4
7538: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7539: LD_INT 0
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
7545: PPUSH
// p := 1 ;
7546: LD_ADDR_VAR 0 6
7550: PUSH
7551: LD_INT 1
7553: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7554: LD_ADDR_VAR 0 4
7558: PUSH
7559: DOUBLE
7560: LD_INT 1
7562: DEC
7563: ST_TO_ADDR
7564: LD_VAR 0 2
7568: PUSH
7569: LD_INT 4
7571: DIVREAL
7572: PUSH
7573: FOR_TO
7574: IFFALSE 7823
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7576: LD_VAR 0 2
7580: PUSH
7581: LD_VAR 0 6
7585: PUSH
7586: LD_INT 1
7588: PLUS
7589: ARRAY
7590: PPUSH
7591: LD_VAR 0 2
7595: PUSH
7596: LD_VAR 0 6
7600: PUSH
7601: LD_INT 2
7603: PLUS
7604: ARRAY
7605: PPUSH
7606: CALL_OW 428
7610: PUSH
7611: LD_INT 0
7613: EQUAL
7614: PUSH
7615: LD_VAR 0 2
7619: PUSH
7620: LD_VAR 0 6
7624: PUSH
7625: LD_INT 1
7627: PLUS
7628: ARRAY
7629: PPUSH
7630: LD_VAR 0 2
7634: PUSH
7635: LD_VAR 0 6
7639: PUSH
7640: LD_INT 2
7642: PLUS
7643: ARRAY
7644: PPUSH
7645: CALL 5942 0 2
7649: AND
7650: PUSH
7651: LD_VAR 0 1
7655: PUSH
7656: LD_INT 1
7658: ARRAY
7659: PPUSH
7660: CALL_OW 255
7664: PPUSH
7665: CALL 6321 0 1
7669: PUSH
7670: LD_INT 20
7672: GREATEREQUAL
7673: AND
7674: IFFALSE 7791
// begin for c = 1 to plist do
7676: LD_ADDR_VAR 0 7
7680: PUSH
7681: DOUBLE
7682: LD_INT 1
7684: DEC
7685: ST_TO_ADDR
7686: LD_VAR 0 1
7690: PUSH
7691: FOR_TO
7692: IFFALSE 7785
// if not HasTask ( plist [ c ] ) then
7694: LD_VAR 0 1
7698: PUSH
7699: LD_VAR 0 7
7703: ARRAY
7704: PPUSH
7705: CALL_OW 314
7709: NOT
7710: IFFALSE 7783
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7712: LD_VAR 0 1
7716: PUSH
7717: LD_VAR 0 7
7721: ARRAY
7722: PPUSH
7723: LD_VAR 0 2
7727: PUSH
7728: LD_VAR 0 6
7732: ARRAY
7733: PPUSH
7734: LD_VAR 0 2
7738: PUSH
7739: LD_VAR 0 6
7743: PUSH
7744: LD_INT 1
7746: PLUS
7747: ARRAY
7748: PPUSH
7749: LD_VAR 0 2
7753: PUSH
7754: LD_VAR 0 6
7758: PUSH
7759: LD_INT 2
7761: PLUS
7762: ARRAY
7763: PPUSH
7764: LD_VAR 0 2
7768: PUSH
7769: LD_VAR 0 6
7773: PUSH
7774: LD_INT 3
7776: PLUS
7777: ARRAY
7778: PPUSH
7779: CALL_OW 145
7783: GO 7691
7785: POP
7786: POP
// break ;
7787: GO 7823
// end else
7789: GO 7821
// if ( p + 4 < tlist ) then
7791: LD_VAR 0 6
7795: PUSH
7796: LD_INT 4
7798: PLUS
7799: PUSH
7800: LD_VAR 0 2
7804: LESS
7805: IFFALSE 7821
// p := p + 4 ;
7807: LD_ADDR_VAR 0 6
7811: PUSH
7812: LD_VAR 0 6
7816: PUSH
7817: LD_INT 4
7819: PLUS
7820: ST_TO_ADDR
// end ;
7821: GO 7573
7823: POP
7824: POP
// end ;
7825: LD_VAR 0 3
7829: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7830: LD_INT 0
7832: PPUSH
7833: PPUSH
7834: PPUSH
7835: PPUSH
// tmp := GetTowers ( side ) ;
7836: LD_ADDR_VAR 0 5
7840: PUSH
7841: LD_VAR 0 1
7845: PPUSH
7846: CALL 6931 0 1
7850: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7851: LD_ADDR_VAR 0 6
7855: PUSH
7856: LD_VAR 0 1
7860: PPUSH
7861: LD_INT 3
7863: PPUSH
7864: CALL 6227 0 2
7868: PUSH
7869: LD_INT 1
7871: ARRAY
7872: ST_TO_ADDR
// if fac then
7873: LD_VAR 0 6
7877: IFFALSE 7973
// for i = 1 to tmp do
7879: LD_ADDR_VAR 0 4
7883: PUSH
7884: DOUBLE
7885: LD_INT 1
7887: DEC
7888: ST_TO_ADDR
7889: LD_VAR 0 5
7893: PUSH
7894: FOR_TO
7895: IFFALSE 7971
// if GetBWeapon ( tmp [ i ] ) = 0 then
7897: LD_VAR 0 5
7901: PUSH
7902: LD_VAR 0 4
7906: ARRAY
7907: PPUSH
7908: CALL_OW 269
7912: PUSH
7913: LD_INT 0
7915: EQUAL
7916: IFFALSE 7969
// begin if BuildingStatus ( fac ) = bs_idle then
7918: LD_VAR 0 6
7922: PPUSH
7923: CALL_OW 461
7927: PUSH
7928: LD_INT 2
7930: EQUAL
7931: IFFALSE 7967
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
7933: LD_VAR 0 5
7937: PUSH
7938: LD_VAR 0 4
7942: ARRAY
7943: PPUSH
7944: LD_VAR 0 2
7948: PUSH
7949: LD_INT 1
7951: PPUSH
7952: LD_VAR 0 2
7956: PPUSH
7957: CALL_OW 12
7961: ARRAY
7962: PPUSH
7963: CALL_OW 148
// break ;
7967: GO 7971
// end ;
7969: GO 7894
7971: POP
7972: POP
// end ;
7973: LD_VAR 0 3
7977: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
7978: LD_INT 0
7980: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
7981: LD_INT 22
7983: PUSH
7984: LD_VAR 0 1
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PUSH
7993: LD_INT 34
7995: PUSH
7996: LD_VAR 0 3
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 31
8007: PUSH
8008: LD_VAR 0 2
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: PUSH
8022: EMPTY
8023: LIST
8024: PPUSH
8025: CALL_OW 69
8029: IFFALSE 8087
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8031: LD_ADDR_VAR 0 4
8035: PUSH
8036: LD_INT 22
8038: PUSH
8039: LD_VAR 0 1
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 34
8050: PUSH
8051: LD_VAR 0 3
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 31
8062: PUSH
8063: LD_VAR 0 2
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: PPUSH
8080: CALL_OW 69
8084: ST_TO_ADDR
8085: GO 8095
// result := false ;
8087: LD_ADDR_VAR 0 4
8091: PUSH
8092: LD_INT 0
8094: ST_TO_ADDR
// end ;
8095: LD_VAR 0 4
8099: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8100: LD_INT 0
8102: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8103: LD_VAR 0 1
8107: PPUSH
8108: LD_VAR 0 2
8112: PPUSH
8113: LD_VAR 0 3
8117: PPUSH
8118: LD_VAR 0 4
8122: PPUSH
8123: LD_VAR 0 5
8127: PPUSH
8128: CALL_OW 448
8132: PUSH
8133: LD_VAR 0 2
8137: PPUSH
8138: LD_VAR 0 3
8142: PPUSH
8143: LD_VAR 0 4
8147: PPUSH
8148: LD_VAR 0 5
8152: PPUSH
8153: CALL_OW 449
8157: PUSH
8158: LD_INT 1
8160: ARRAY
8161: PUSH
8162: LD_VAR 0 1
8166: PPUSH
8167: CALL 5828 0 1
8171: PUSH
8172: LD_INT 1
8174: ARRAY
8175: LESSEQUAL
8176: AND
8177: PUSH
8178: LD_VAR 0 2
8182: PPUSH
8183: LD_VAR 0 3
8187: PPUSH
8188: LD_VAR 0 4
8192: PPUSH
8193: LD_VAR 0 5
8197: PPUSH
8198: CALL_OW 449
8202: PUSH
8203: LD_INT 2
8205: ARRAY
8206: PUSH
8207: LD_VAR 0 1
8211: PPUSH
8212: CALL 5828 0 1
8216: PUSH
8217: LD_INT 2
8219: ARRAY
8220: LESSEQUAL
8221: AND
8222: PUSH
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_VAR 0 3
8232: PPUSH
8233: LD_VAR 0 4
8237: PPUSH
8238: LD_VAR 0 5
8242: PPUSH
8243: CALL_OW 449
8247: PUSH
8248: LD_INT 3
8250: ARRAY
8251: PUSH
8252: LD_VAR 0 1
8256: PPUSH
8257: CALL 5828 0 1
8261: PUSH
8262: LD_INT 3
8264: ARRAY
8265: LESSEQUAL
8266: AND
8267: IFFALSE 8314
// begin if debug then
8269: LD_EXP 1
8273: IFFALSE 8283
// display_strings := Factory work! ;
8275: LD_ADDR_OWVAR 47
8279: PUSH
8280: LD_STRING Factory work!
8282: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8283: LD_VAR 0 1
8287: PPUSH
8288: LD_VAR 0 2
8292: PPUSH
8293: LD_VAR 0 3
8297: PPUSH
8298: LD_VAR 0 4
8302: PPUSH
8303: LD_VAR 0 5
8307: PPUSH
8308: CALL_OW 125
// end else
8312: GO 8322
// result := false ;
8314: LD_ADDR_VAR 0 6
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// end ;
8322: LD_VAR 0 6
8326: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8327: LD_INT 0
8329: PPUSH
8330: PPUSH
8331: PPUSH
8332: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8333: LD_ADDR_VAR 0 6
8337: PUSH
8338: LD_INT 22
8340: PUSH
8341: LD_VAR 0 1
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: LD_INT 30
8352: PUSH
8353: LD_VAR 0 2
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PPUSH
8366: CALL_OW 69
8370: ST_TO_ADDR
// tmp := [ ] ;
8371: LD_ADDR_VAR 0 5
8375: PUSH
8376: EMPTY
8377: ST_TO_ADDR
// for i = 1 to filter do
8378: LD_ADDR_VAR 0 4
8382: PUSH
8383: DOUBLE
8384: LD_INT 1
8386: DEC
8387: ST_TO_ADDR
8388: LD_VAR 0 6
8392: PUSH
8393: FOR_TO
8394: IFFALSE 8482
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8396: LD_ADDR_VAR 0 5
8400: PUSH
8401: LD_VAR 0 5
8405: PUSH
8406: LD_VAR 0 6
8410: PUSH
8411: LD_VAR 0 4
8415: ARRAY
8416: PPUSH
8417: CALL_OW 266
8421: PUSH
8422: LD_VAR 0 6
8426: PUSH
8427: LD_VAR 0 4
8431: ARRAY
8432: PPUSH
8433: CALL_OW 250
8437: PUSH
8438: LD_VAR 0 6
8442: PUSH
8443: LD_VAR 0 4
8447: ARRAY
8448: PPUSH
8449: CALL_OW 251
8453: PUSH
8454: LD_VAR 0 6
8458: PUSH
8459: LD_VAR 0 4
8463: ARRAY
8464: PPUSH
8465: CALL_OW 254
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: PUSH
8476: EMPTY
8477: LIST
8478: ADD
8479: ST_TO_ADDR
// end ;
8480: GO 8393
8482: POP
8483: POP
// result := tmp ;
8484: LD_ADDR_VAR 0 3
8488: PUSH
8489: LD_VAR 0 5
8493: ST_TO_ADDR
// end ;
8494: LD_VAR 0 3
8498: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8499: LD_INT 0
8501: PPUSH
8502: PPUSH
8503: PPUSH
// for i = 1 to list do
8504: LD_ADDR_VAR 0 4
8508: PUSH
8509: DOUBLE
8510: LD_INT 1
8512: DEC
8513: ST_TO_ADDR
8514: LD_VAR 0 2
8518: PUSH
8519: FOR_TO
8520: IFFALSE 9075
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8522: LD_VAR 0 2
8526: PUSH
8527: LD_VAR 0 4
8531: ARRAY
8532: PUSH
8533: LD_INT 1
8535: ARRAY
8536: PPUSH
8537: LD_VAR 0 2
8541: PUSH
8542: LD_VAR 0 4
8546: ARRAY
8547: PUSH
8548: LD_INT 2
8550: ARRAY
8551: PPUSH
8552: CALL_OW 428
8556: PUSH
8557: LD_INT 0
8559: GREATER
8560: IFFALSE 8846
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8562: LD_VAR 0 2
8566: PUSH
8567: LD_VAR 0 4
8571: ARRAY
8572: PUSH
8573: LD_INT 1
8575: ARRAY
8576: PPUSH
8577: LD_VAR 0 2
8581: PUSH
8582: LD_VAR 0 4
8586: ARRAY
8587: PUSH
8588: LD_INT 2
8590: ARRAY
8591: PPUSH
8592: CALL_OW 428
8596: PPUSH
8597: CALL_OW 248
8601: PUSH
8602: LD_INT 3
8604: EQUAL
8605: IFFALSE 8731
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8607: LD_VAR 0 2
8611: PUSH
8612: LD_VAR 0 4
8616: ARRAY
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: PPUSH
8622: LD_VAR 0 2
8626: PUSH
8627: LD_VAR 0 4
8631: ARRAY
8632: PUSH
8633: LD_INT 2
8635: ARRAY
8636: PPUSH
8637: CALL_OW 428
8641: PPUSH
8642: CALL_OW 274
8646: PPUSH
8647: LD_INT 3
8649: PPUSH
8650: CALL_OW 275
8654: PUSH
8655: LD_INT 15
8657: GREATEREQUAL
8658: IFFALSE 8729
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8660: LD_VAR 0 2
8664: PUSH
8665: LD_VAR 0 4
8669: ARRAY
8670: PUSH
8671: LD_INT 1
8673: ARRAY
8674: PPUSH
8675: LD_VAR 0 2
8679: PUSH
8680: LD_VAR 0 4
8684: ARRAY
8685: PUSH
8686: LD_INT 2
8688: ARRAY
8689: PPUSH
8690: CALL_OW 428
8694: PPUSH
8695: LD_VAR 0 2
8699: PUSH
8700: LD_VAR 0 4
8704: ARRAY
8705: PUSH
8706: LD_INT 4
8708: ARRAY
8709: PPUSH
8710: LD_VAR 0 2
8714: PUSH
8715: LD_VAR 0 4
8719: ARRAY
8720: PUSH
8721: LD_INT 5
8723: ARRAY
8724: PPUSH
8725: CALL 7392 0 3
// end else
8729: GO 8800
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8731: LD_VAR 0 2
8735: PUSH
8736: LD_VAR 0 4
8740: ARRAY
8741: PUSH
8742: LD_INT 1
8744: ARRAY
8745: PPUSH
8746: LD_VAR 0 2
8750: PUSH
8751: LD_VAR 0 4
8755: ARRAY
8756: PUSH
8757: LD_INT 2
8759: ARRAY
8760: PPUSH
8761: CALL_OW 428
8765: PPUSH
8766: LD_VAR 0 2
8770: PUSH
8771: LD_VAR 0 4
8775: ARRAY
8776: PUSH
8777: LD_INT 4
8779: ARRAY
8780: PPUSH
8781: LD_VAR 0 2
8785: PUSH
8786: LD_VAR 0 4
8790: ARRAY
8791: PUSH
8792: LD_INT 5
8794: ARRAY
8795: PPUSH
8796: CALL 7392 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8800: LD_VAR 0 1
8804: PPUSH
8805: LD_VAR 0 2
8809: PUSH
8810: LD_VAR 0 4
8814: ARRAY
8815: PUSH
8816: LD_INT 1
8818: ARRAY
8819: PPUSH
8820: LD_VAR 0 2
8824: PUSH
8825: LD_VAR 0 4
8829: ARRAY
8830: PUSH
8831: LD_INT 2
8833: ARRAY
8834: PPUSH
8835: CALL_OW 428
8839: PPUSH
8840: CALL 10344 0 2
// end else
8844: GO 9073
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8846: LD_VAR 0 1
8850: PUSH
8851: LD_INT 1
8853: ARRAY
8854: PPUSH
8855: CALL_OW 255
8859: PPUSH
8860: CALL 6136 0 1
8864: PPUSH
8865: LD_INT 6
8867: PPUSH
8868: CALL 5712 0 2
8872: PUSH
8873: LD_VAR 0 1
8877: PUSH
8878: LD_INT 1
8880: ARRAY
8881: PPUSH
8882: CALL_OW 255
8886: PPUSH
8887: CALL 6136 0 1
8891: PPUSH
8892: LD_VAR 0 2
8896: PUSH
8897: LD_VAR 0 4
8901: ARRAY
8902: PUSH
8903: LD_INT 4
8905: ARRAY
8906: PPUSH
8907: CALL 5712 0 2
8911: AND
8912: PUSH
8913: LD_VAR 0 1
8917: PUSH
8918: LD_INT 1
8920: ARRAY
8921: PPUSH
8922: CALL_OW 255
8926: PPUSH
8927: CALL 6136 0 1
8931: PPUSH
8932: LD_VAR 0 2
8936: PUSH
8937: LD_VAR 0 4
8941: ARRAY
8942: PUSH
8943: LD_INT 5
8945: ARRAY
8946: PPUSH
8947: CALL 5712 0 2
8951: AND
8952: IFFALSE 9073
// for p = 1 to plist do
8954: LD_ADDR_VAR 0 5
8958: PUSH
8959: DOUBLE
8960: LD_INT 1
8962: DEC
8963: ST_TO_ADDR
8964: LD_VAR 0 1
8968: PUSH
8969: FOR_TO
8970: IFFALSE 9071
// if IsInUnit ( plist [ p ] ) then
8972: LD_VAR 0 1
8976: PUSH
8977: LD_VAR 0 5
8981: ARRAY
8982: PPUSH
8983: CALL_OW 310
8987: IFFALSE 9006
// ComExitBuilding ( plist [ p ] ) else
8989: LD_VAR 0 1
8993: PUSH
8994: LD_VAR 0 5
8998: ARRAY
8999: PPUSH
9000: CALL_OW 122
9004: GO 9069
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
9006: LD_VAR 0 1
9010: PUSH
9011: LD_VAR 0 5
9015: ARRAY
9016: PPUSH
9017: LD_INT 6
9019: PPUSH
9020: LD_VAR 0 2
9024: PUSH
9025: LD_VAR 0 4
9029: ARRAY
9030: PUSH
9031: LD_INT 1
9033: ARRAY
9034: PPUSH
9035: LD_VAR 0 2
9039: PUSH
9040: LD_VAR 0 4
9044: ARRAY
9045: PUSH
9046: LD_INT 2
9048: ARRAY
9049: PPUSH
9050: LD_VAR 0 2
9054: PUSH
9055: LD_VAR 0 4
9059: ARRAY
9060: PUSH
9061: LD_INT 3
9063: ARRAY
9064: PPUSH
9065: CALL_OW 145
9069: GO 8969
9071: POP
9072: POP
// end ;
9073: GO 8519
9075: POP
9076: POP
// end ;
9077: LD_VAR 0 3
9081: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9082: LD_INT 0
9084: PPUSH
// if IsInUnit ( sci ) then
9085: LD_VAR 0 1
9089: PPUSH
9090: CALL_OW 310
9094: IFFALSE 9107
// ComExitBuilding ( sci ) else
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 122
9105: GO 9138
// if not HasTask ( sci ) then
9107: LD_VAR 0 1
9111: PPUSH
9112: CALL_OW 314
9116: NOT
9117: IFFALSE 9138
// begin ComMoveXY ( sci , x , y ) ;
9119: LD_VAR 0 1
9123: PPUSH
9124: LD_VAR 0 2
9128: PPUSH
9129: LD_VAR 0 3
9133: PPUSH
9134: CALL_OW 111
// end ; end ;
9138: LD_VAR 0 4
9142: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9143: LD_INT 0
9145: PPUSH
9146: PPUSH
9147: PPUSH
9148: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9149: LD_ADDR_VAR 0 6
9153: PUSH
9154: LD_INT 22
9156: PUSH
9157: LD_VAR 0 1
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PUSH
9166: LD_INT 21
9168: PUSH
9169: LD_INT 1
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PPUSH
9180: CALL_OW 69
9184: PUSH
9185: LD_VAR 0 3
9189: DIFF
9190: ST_TO_ADDR
// tmp := tag_list ;
9191: LD_ADDR_VAR 0 7
9195: PUSH
9196: LD_VAR 0 2
9200: ST_TO_ADDR
// for i = 1 to filter do
9201: LD_ADDR_VAR 0 5
9205: PUSH
9206: DOUBLE
9207: LD_INT 1
9209: DEC
9210: ST_TO_ADDR
9211: LD_VAR 0 6
9215: PUSH
9216: FOR_TO
9217: IFFALSE 9486
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9219: LD_VAR 0 6
9223: PUSH
9224: LD_VAR 0 5
9228: ARRAY
9229: PPUSH
9230: CALL_OW 256
9234: PUSH
9235: LD_INT 1000
9237: EQUAL
9238: PUSH
9239: LD_VAR 0 6
9243: PUSH
9244: LD_VAR 0 5
9248: ARRAY
9249: PPUSH
9250: CALL_OW 110
9254: PUSH
9255: LD_INT 100
9257: GREATEREQUAL
9258: AND
9259: IFFALSE 9301
// begin SetTag ( filter [ i ] , 0 ) ;
9261: LD_VAR 0 6
9265: PUSH
9266: LD_VAR 0 5
9270: ARRAY
9271: PPUSH
9272: LD_INT 0
9274: PPUSH
9275: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9279: LD_ADDR_VAR 0 7
9283: PUSH
9284: LD_VAR 0 7
9288: PUSH
9289: LD_VAR 0 6
9293: PUSH
9294: LD_VAR 0 5
9298: ARRAY
9299: DIFF
9300: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9301: LD_VAR 0 6
9305: PUSH
9306: LD_VAR 0 5
9310: ARRAY
9311: PPUSH
9312: CALL_OW 256
9316: PUSH
9317: LD_INT 1000
9319: LESS
9320: IFFALSE 9484
// begin if not filter [ i ] in tmp then
9322: LD_VAR 0 6
9326: PUSH
9327: LD_VAR 0 5
9331: ARRAY
9332: PUSH
9333: LD_VAR 0 7
9337: IN
9338: NOT
9339: IFFALSE 9363
// tmp := tmp ^ filter [ i ] ;
9341: LD_ADDR_VAR 0 7
9345: PUSH
9346: LD_VAR 0 7
9350: PUSH
9351: LD_VAR 0 6
9355: PUSH
9356: LD_VAR 0 5
9360: ARRAY
9361: ADD
9362: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9363: LD_VAR 0 6
9367: PUSH
9368: LD_VAR 0 5
9372: ARRAY
9373: PPUSH
9374: CALL_OW 256
9378: PUSH
9379: LD_INT 250
9381: LESS
9382: IFFALSE 9404
// SetTag ( filter [ i ] , 100 ) else
9384: LD_VAR 0 6
9388: PUSH
9389: LD_VAR 0 5
9393: ARRAY
9394: PPUSH
9395: LD_INT 100
9397: PPUSH
9398: CALL_OW 109
9402: GO 9484
// if GetLives ( filter [ i ] ) < 500 then
9404: LD_VAR 0 6
9408: PUSH
9409: LD_VAR 0 5
9413: ARRAY
9414: PPUSH
9415: CALL_OW 256
9419: PUSH
9420: LD_INT 500
9422: LESS
9423: IFFALSE 9445
// SetTag ( filter [ i ] , 101 ) else
9425: LD_VAR 0 6
9429: PUSH
9430: LD_VAR 0 5
9434: ARRAY
9435: PPUSH
9436: LD_INT 101
9438: PPUSH
9439: CALL_OW 109
9443: GO 9484
// if GetLives ( filter [ i ] ) < 1000 then
9445: LD_VAR 0 6
9449: PUSH
9450: LD_VAR 0 5
9454: ARRAY
9455: PPUSH
9456: CALL_OW 256
9460: PUSH
9461: LD_INT 1000
9463: LESS
9464: IFFALSE 9484
// SetTag ( filter [ i ] , 102 ) ;
9466: LD_VAR 0 6
9470: PUSH
9471: LD_VAR 0 5
9475: ARRAY
9476: PPUSH
9477: LD_INT 102
9479: PPUSH
9480: CALL_OW 109
// end ; end ;
9484: GO 9216
9486: POP
9487: POP
// result := tmp ;
9488: LD_ADDR_VAR 0 4
9492: PUSH
9493: LD_VAR 0 7
9497: ST_TO_ADDR
// end ;
9498: LD_VAR 0 4
9502: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9503: LD_INT 0
9505: PPUSH
9506: PPUSH
9507: PPUSH
9508: PPUSH
9509: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9510: LD_ADDR_VAR 0 7
9514: PUSH
9515: LD_INT 22
9517: PUSH
9518: LD_VAR 0 2
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: LD_INT 3
9529: PUSH
9530: LD_INT 21
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PPUSH
9548: CALL_OW 69
9552: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9553: LD_ADDR_VAR 0 5
9557: PUSH
9558: LD_INT 1
9560: PPUSH
9561: LD_INT 3
9563: PPUSH
9564: CALL_OW 12
9568: ST_TO_ADDR
// if filter > 0 then
9569: LD_VAR 0 7
9573: PUSH
9574: LD_INT 0
9576: GREATER
9577: IFFALSE 9779
// for i = 1 to list do
9579: LD_ADDR_VAR 0 6
9583: PUSH
9584: DOUBLE
9585: LD_INT 1
9587: DEC
9588: ST_TO_ADDR
9589: LD_VAR 0 1
9593: PUSH
9594: FOR_TO
9595: IFFALSE 9777
// for ta in filter do
9597: LD_ADDR_VAR 0 4
9601: PUSH
9602: LD_VAR 0 7
9606: PUSH
9607: FOR_IN
9608: IFFALSE 9773
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9610: LD_VAR 0 1
9614: PUSH
9615: LD_VAR 0 6
9619: ARRAY
9620: PPUSH
9621: LD_VAR 0 4
9625: PPUSH
9626: CALL_OW 296
9630: PUSH
9631: LD_INT 13
9633: LESSEQUAL
9634: IFFALSE 9771
// begin case c of 1 :
9636: LD_VAR 0 5
9640: PUSH
9641: LD_INT 1
9643: DOUBLE
9644: EQUAL
9645: IFTRUE 9649
9647: GO 9687
9649: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9650: LD_VAR 0 1
9654: PUSH
9655: LD_VAR 0 6
9659: ARRAY
9660: PPUSH
9661: LD_VAR 0 4
9665: PPUSH
9666: CALL_OW 250
9670: PPUSH
9671: LD_VAR 0 4
9675: PPUSH
9676: CALL_OW 251
9680: PPUSH
9681: CALL_OW 154
9685: GO 9771
9687: LD_INT 2
9689: DOUBLE
9690: EQUAL
9691: IFTRUE 9695
9693: GO 9759
9695: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9696: LD_VAR 0 1
9700: PUSH
9701: LD_VAR 0 6
9705: ARRAY
9706: PPUSH
9707: LD_VAR 0 4
9711: PPUSH
9712: CALL_OW 250
9716: PUSH
9717: LD_INT 1
9719: NEG
9720: PPUSH
9721: LD_INT 1
9723: PPUSH
9724: CALL_OW 12
9728: PLUS
9729: PPUSH
9730: LD_VAR 0 4
9734: PPUSH
9735: CALL_OW 251
9739: PUSH
9740: LD_INT 1
9742: NEG
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: CALL_OW 12
9751: PLUS
9752: PPUSH
9753: CALL_OW 153
9757: GO 9771
9759: LD_INT 3
9761: DOUBLE
9762: EQUAL
9763: IFTRUE 9767
9765: GO 9770
9767: POP
// ; end ;
9768: GO 9771
9770: POP
// end ; end ;
9771: GO 9607
9773: POP
9774: POP
9775: GO 9594
9777: POP
9778: POP
// end ;
9779: LD_VAR 0 3
9783: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9784: LD_INT 0
9786: PPUSH
9787: PPUSH
// for i = 1 to plist do
9788: LD_ADDR_VAR 0 3
9792: PUSH
9793: DOUBLE
9794: LD_INT 1
9796: DEC
9797: ST_TO_ADDR
9798: LD_VAR 0 1
9802: PUSH
9803: FOR_TO
9804: IFFALSE 10006
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9806: LD_VAR 0 1
9810: PUSH
9811: LD_VAR 0 3
9815: ARRAY
9816: PPUSH
9817: CALL_OW 310
9821: PUSH
9822: LD_INT 30
9824: PUSH
9825: LD_INT 5
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: EMPTY
9833: LIST
9834: PPUSH
9835: CALL_OW 69
9839: IN
9840: NOT
9841: IFFALSE 9986
// begin if IsInUnit ( plist [ i ] ) then
9843: LD_VAR 0 1
9847: PUSH
9848: LD_VAR 0 3
9852: ARRAY
9853: PPUSH
9854: CALL_OW 310
9858: IFFALSE 9877
// ComExitBuilding ( plist [ i ] ) else
9860: LD_VAR 0 1
9864: PUSH
9865: LD_VAR 0 3
9869: ARRAY
9870: PPUSH
9871: CALL_OW 122
9875: GO 9984
// if not HasTask ( plist [ i ] ) then
9877: LD_VAR 0 1
9881: PUSH
9882: LD_VAR 0 3
9886: ARRAY
9887: PPUSH
9888: CALL_OW 314
9892: NOT
9893: IFFALSE 9984
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9895: LD_VAR 0 1
9899: PUSH
9900: LD_VAR 0 3
9904: ARRAY
9905: PPUSH
9906: LD_INT 22
9908: PUSH
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 1
9916: ARRAY
9917: PPUSH
9918: CALL_OW 255
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 30
9929: PUSH
9930: LD_INT 5
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PPUSH
9941: CALL_OW 69
9945: PPUSH
9946: LD_VAR 0 1
9950: PUSH
9951: LD_VAR 0 3
9955: ARRAY
9956: PPUSH
9957: CALL_OW 74
9961: PPUSH
9962: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
9966: LD_VAR 0 1
9970: PUSH
9971: LD_VAR 0 3
9975: ARRAY
9976: PPUSH
9977: LD_INT 9
9979: PPUSH
9980: CALL_OW 183
// end ; end else
9984: GO 10004
// ComChangeProfession ( plist [ i ] , 9 ) ;
9986: LD_VAR 0 1
9990: PUSH
9991: LD_VAR 0 3
9995: ARRAY
9996: PPUSH
9997: LD_INT 9
9999: PPUSH
10000: CALL_OW 123
10004: GO 9803
10006: POP
10007: POP
// end ;
10008: LD_VAR 0 2
10012: RET
// export function GetHuman ( side ) ; begin
10013: LD_INT 0
10015: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
10016: LD_ADDR_VAR 0 2
10020: PUSH
10021: LD_INT 22
10023: PUSH
10024: LD_VAR 0 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 21
10035: PUSH
10036: LD_INT 1
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 2
10045: PUSH
10046: LD_INT 25
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 25
10058: PUSH
10059: LD_INT 2
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 25
10068: PUSH
10069: LD_INT 3
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 25
10078: PUSH
10079: LD_INT 4
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: LIST
10097: PPUSH
10098: CALL_OW 69
10102: ST_TO_ADDR
// end ;
10103: LD_VAR 0 2
10107: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10108: LD_INT 0
10110: PPUSH
10111: PPUSH
10112: PPUSH
// uc_side := 0 ;
10113: LD_ADDR_OWVAR 20
10117: PUSH
10118: LD_INT 0
10120: ST_TO_ADDR
// uc_nation := 0 ;
10121: LD_ADDR_OWVAR 21
10125: PUSH
10126: LD_INT 0
10128: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10129: LD_ADDR_VAR 0 4
10133: PUSH
10134: DOUBLE
10135: LD_INT 1
10137: DEC
10138: ST_TO_ADDR
10139: LD_INT 4
10141: PUSH
10142: LD_INT 5
10144: PUSH
10145: LD_INT 6
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: PUSH
10153: LD_OWVAR 67
10157: ARRAY
10158: PUSH
10159: FOR_TO
10160: IFFALSE 10231
// begin hc_class = class_tiger ;
10162: LD_ADDR_OWVAR 28
10166: PUSH
10167: LD_INT 14
10169: ST_TO_ADDR
// hc_gallery = sandnature ;
10170: LD_ADDR_OWVAR 33
10174: PUSH
10175: LD_STRING sandnature
10177: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10178: LD_ADDR_OWVAR 35
10182: PUSH
10183: LD_INT 0
10185: PPUSH
10186: LD_INT 50
10188: PPUSH
10189: CALL_OW 12
10193: ST_TO_ADDR
// hc_face_number = 3 ;
10194: LD_ADDR_OWVAR 34
10198: PUSH
10199: LD_INT 3
10201: ST_TO_ADDR
// tiger := CreateHuman ;
10202: LD_ADDR_VAR 0 3
10206: PUSH
10207: CALL_OW 44
10211: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10212: LD_VAR 0 3
10216: PPUSH
10217: LD_VAR 0 1
10221: PPUSH
10222: LD_INT 0
10224: PPUSH
10225: CALL_OW 49
// end ;
10229: GO 10159
10231: POP
10232: POP
// end ;
10233: LD_VAR 0 2
10237: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10238: LD_INT 0
10240: PPUSH
10241: PPUSH
10242: PPUSH
// uc_side := 0 ;
10243: LD_ADDR_OWVAR 20
10247: PUSH
10248: LD_INT 0
10250: ST_TO_ADDR
// uc_nation := 0 ;
10251: LD_ADDR_OWVAR 21
10255: PUSH
10256: LD_INT 0
10258: ST_TO_ADDR
// for i = 1 to 8 do
10259: LD_ADDR_VAR 0 4
10263: PUSH
10264: DOUBLE
10265: LD_INT 1
10267: DEC
10268: ST_TO_ADDR
10269: LD_INT 8
10271: PUSH
10272: FOR_TO
10273: IFFALSE 10337
// begin hc_class = class_apeman ;
10275: LD_ADDR_OWVAR 28
10279: PUSH
10280: LD_INT 12
10282: ST_TO_ADDR
// hc_gallery =  ;
10283: LD_ADDR_OWVAR 33
10287: PUSH
10288: LD_STRING 
10290: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 20 ) ;
10291: LD_ADDR_OWVAR 35
10295: PUSH
10296: LD_INT 5
10298: NEG
10299: PPUSH
10300: LD_INT 20
10302: PPUSH
10303: CALL_OW 12
10307: ST_TO_ADDR
// ape := CreateHuman ;
10308: LD_ADDR_VAR 0 3
10312: PUSH
10313: CALL_OW 44
10317: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10318: LD_VAR 0 3
10322: PPUSH
10323: LD_VAR 0 1
10327: PPUSH
10328: LD_INT 0
10330: PPUSH
10331: CALL_OW 49
// end ;
10335: GO 10272
10337: POP
10338: POP
// end ;
10339: LD_VAR 0 2
10343: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10344: LD_INT 0
10346: PPUSH
10347: PPUSH
// if BuildingStatus ( b ) = bs_build then
10348: LD_VAR 0 2
10352: PPUSH
10353: CALL_OW 461
10357: PUSH
10358: LD_INT 1
10360: EQUAL
10361: IFFALSE 10547
// for i = 1 to plist do
10363: LD_ADDR_VAR 0 4
10367: PUSH
10368: DOUBLE
10369: LD_INT 1
10371: DEC
10372: ST_TO_ADDR
10373: LD_VAR 0 1
10377: PUSH
10378: FOR_TO
10379: IFFALSE 10545
// if IsInUnit ( plist [ i ] ) then
10381: LD_VAR 0 1
10385: PUSH
10386: LD_VAR 0 4
10390: ARRAY
10391: PPUSH
10392: CALL_OW 310
10396: IFFALSE 10479
// begin ComExitBuilding ( plist [ i ] ) ;
10398: LD_VAR 0 1
10402: PUSH
10403: LD_VAR 0 4
10407: ARRAY
10408: PPUSH
10409: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10413: LD_VAR 0 1
10417: PUSH
10418: LD_VAR 0 4
10422: ARRAY
10423: PPUSH
10424: LD_STRING h
10426: PUSH
10427: LD_VAR 0 2
10431: PPUSH
10432: CALL_OW 250
10436: PUSH
10437: LD_VAR 0 2
10441: PPUSH
10442: CALL_OW 251
10446: PUSH
10447: LD_VAR 0 2
10451: PUSH
10452: LD_INT 0
10454: PUSH
10455: LD_INT 0
10457: PUSH
10458: LD_INT 0
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: PPUSH
10473: CALL_OW 447
// end else
10477: GO 10543
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10479: LD_VAR 0 1
10483: PUSH
10484: LD_VAR 0 4
10488: ARRAY
10489: PPUSH
10490: LD_STRING h
10492: PUSH
10493: LD_VAR 0 2
10497: PPUSH
10498: CALL_OW 250
10502: PUSH
10503: LD_VAR 0 2
10507: PPUSH
10508: CALL_OW 251
10512: PUSH
10513: LD_VAR 0 2
10517: PUSH
10518: LD_INT 0
10520: PUSH
10521: LD_INT 0
10523: PUSH
10524: LD_INT 0
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: PUSH
10536: EMPTY
10537: LIST
10538: PPUSH
10539: CALL_OW 446
10543: GO 10378
10545: POP
10546: POP
// end ;
10547: LD_VAR 0 3
10551: RET
// export function WantRepair ( eng ) ; begin
10552: LD_INT 0
10554: PPUSH
// if GetTaskList ( eng ) > 0 then
10555: LD_VAR 0 1
10559: PPUSH
10560: CALL_OW 437
10564: PUSH
10565: LD_INT 0
10567: GREATER
10568: IFFALSE 10613
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10570: LD_VAR 0 1
10574: PPUSH
10575: CALL_OW 437
10579: PUSH
10580: LD_INT 1
10582: ARRAY
10583: PUSH
10584: LD_INT 1
10586: ARRAY
10587: PUSH
10588: LD_STRING o
10590: EQUAL
10591: IFFALSE 10603
// result := true else
10593: LD_ADDR_VAR 0 2
10597: PUSH
10598: LD_INT 1
10600: ST_TO_ADDR
10601: GO 10611
// result := false ;
10603: LD_ADDR_VAR 0 2
10607: PUSH
10608: LD_INT 0
10610: ST_TO_ADDR
// end else
10611: GO 10621
// result := false ;
10613: LD_ADDR_VAR 0 2
10617: PUSH
10618: LD_INT 0
10620: ST_TO_ADDR
// end ;
10621: LD_VAR 0 2
10625: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10626: LD_INT 0
10628: PPUSH
10629: PPUSH
10630: PPUSH
10631: PPUSH
// if btype = - 1 then
10632: LD_VAR 0 2
10636: PUSH
10637: LD_INT 1
10639: NEG
10640: EQUAL
10641: IFFALSE 10681
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10643: LD_ADDR_VAR 0 5
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_VAR 0 1
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 21
10662: PUSH
10663: LD_INT 3
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PPUSH
10674: CALL_OW 69
10678: ST_TO_ADDR
10679: GO 10719
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10681: LD_ADDR_VAR 0 5
10685: PUSH
10686: LD_INT 22
10688: PUSH
10689: LD_VAR 0 1
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 30
10700: PUSH
10701: LD_VAR 0 2
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PPUSH
10714: CALL_OW 69
10718: ST_TO_ADDR
// list := [ ] ;
10719: LD_ADDR_VAR 0 6
10723: PUSH
10724: EMPTY
10725: ST_TO_ADDR
// for i = 1 to tmp do
10726: LD_ADDR_VAR 0 4
10730: PUSH
10731: DOUBLE
10732: LD_INT 1
10734: DEC
10735: ST_TO_ADDR
10736: LD_VAR 0 5
10740: PUSH
10741: FOR_TO
10742: IFFALSE 10830
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10744: LD_ADDR_VAR 0 6
10748: PUSH
10749: LD_VAR 0 6
10753: PUSH
10754: LD_VAR 0 5
10758: PUSH
10759: LD_VAR 0 4
10763: ARRAY
10764: PPUSH
10765: CALL_OW 266
10769: PUSH
10770: LD_VAR 0 5
10774: PUSH
10775: LD_VAR 0 4
10779: ARRAY
10780: PPUSH
10781: CALL_OW 250
10785: PUSH
10786: LD_VAR 0 5
10790: PUSH
10791: LD_VAR 0 4
10795: ARRAY
10796: PPUSH
10797: CALL_OW 251
10801: PUSH
10802: LD_VAR 0 5
10806: PUSH
10807: LD_VAR 0 4
10811: ARRAY
10812: PPUSH
10813: CALL_OW 254
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: PUSH
10824: EMPTY
10825: LIST
10826: ADD
10827: ST_TO_ADDR
10828: GO 10741
10830: POP
10831: POP
// result = list ;
10832: LD_ADDR_VAR 0 3
10836: PUSH
10837: LD_VAR 0 6
10841: ST_TO_ADDR
// end ;
10842: LD_VAR 0 3
10846: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10847: LD_INT 0
10849: PPUSH
10850: PPUSH
10851: PPUSH
10852: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10853: LD_VAR 0 1
10857: PPUSH
10858: LD_INT 81
10860: PUSH
10861: LD_VAR 0 1
10865: PPUSH
10866: CALL_OW 255
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PPUSH
10875: CALL_OW 69
10879: PPUSH
10880: LD_VAR 0 1
10884: PPUSH
10885: CALL_OW 74
10889: PPUSH
10890: CALL_OW 296
10894: PUSH
10895: LD_INT 18
10897: LESS
10898: IFFALSE 10943
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
10900: LD_VAR 0 1
10904: PPUSH
10905: LD_INT 81
10907: PUSH
10908: LD_VAR 0 1
10912: PPUSH
10913: CALL_OW 255
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PPUSH
10922: CALL_OW 69
10926: PPUSH
10927: LD_VAR 0 1
10931: PPUSH
10932: CALL_OW 74
10936: PPUSH
10937: CALL_OW 115
10941: GO 10962
// ComMoveXY ( behemoth , x , y ) ;
10943: LD_VAR 0 1
10947: PPUSH
10948: LD_VAR 0 4
10952: PPUSH
10953: LD_VAR 0 5
10957: PPUSH
10958: CALL_OW 111
// if time_lapsers_list > 0 then
10962: LD_VAR 0 2
10966: PUSH
10967: LD_INT 0
10969: GREATER
10970: IFFALSE 11160
// begin for i = 1 to time_lapsers_list do
10972: LD_ADDR_VAR 0 7
10976: PUSH
10977: DOUBLE
10978: LD_INT 1
10980: DEC
10981: ST_TO_ADDR
10982: LD_VAR 0 2
10986: PUSH
10987: FOR_TO
10988: IFFALSE 11158
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
10990: LD_VAR 0 2
10994: PUSH
10995: LD_VAR 0 7
10999: ARRAY
11000: PPUSH
11001: CALL_OW 256
11005: PUSH
11006: LD_INT 250
11008: GREATEREQUAL
11009: PUSH
11010: LD_VAR 0 2
11014: PUSH
11015: LD_VAR 0 7
11019: ARRAY
11020: PPUSH
11021: LD_VAR 0 1
11025: PPUSH
11026: CALL_OW 296
11030: PUSH
11031: LD_INT 9
11033: GREATER
11034: AND
11035: IFFALSE 11072
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11037: LD_VAR 0 2
11041: PUSH
11042: LD_VAR 0 7
11046: ARRAY
11047: PPUSH
11048: LD_VAR 0 1
11052: PPUSH
11053: CALL_OW 250
11057: PPUSH
11058: LD_VAR 0 1
11062: PPUSH
11063: CALL_OW 251
11067: PPUSH
11068: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11072: LD_VAR 0 2
11076: PUSH
11077: LD_VAR 0 7
11081: ARRAY
11082: PPUSH
11083: CALL_OW 256
11087: PUSH
11088: LD_INT 500
11090: LESS
11091: PUSH
11092: LD_VAR 0 1
11096: PPUSH
11097: CALL_OW 256
11101: PUSH
11102: LD_INT 700
11104: GREATER
11105: AND
11106: IFFALSE 11156
// for p = 1 to mechanic_list do
11108: LD_ADDR_VAR 0 8
11112: PUSH
11113: DOUBLE
11114: LD_INT 1
11116: DEC
11117: ST_TO_ADDR
11118: LD_VAR 0 3
11122: PUSH
11123: FOR_TO
11124: IFFALSE 11154
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11126: LD_VAR 0 3
11130: PUSH
11131: LD_VAR 0 8
11135: ARRAY
11136: PPUSH
11137: LD_VAR 0 2
11141: PUSH
11142: LD_VAR 0 7
11146: ARRAY
11147: PPUSH
11148: CALL_OW 129
11152: GO 11123
11154: POP
11155: POP
// end ;
11156: GO 10987
11158: POP
11159: POP
// end ; if mechanic_list then
11160: LD_VAR 0 3
11164: IFFALSE 11345
// begin for i = 1 to mechanic_list do
11166: LD_ADDR_VAR 0 7
11170: PUSH
11171: DOUBLE
11172: LD_INT 1
11174: DEC
11175: ST_TO_ADDR
11176: LD_VAR 0 3
11180: PUSH
11181: FOR_TO
11182: IFFALSE 11343
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11184: LD_VAR 0 3
11188: PUSH
11189: LD_VAR 0 7
11193: ARRAY
11194: PPUSH
11195: CALL_OW 256
11199: PUSH
11200: LD_INT 333
11202: LESS
11203: IFFALSE 11227
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11205: LD_ADDR_EXP 15
11209: PUSH
11210: LD_EXP 15
11214: PUSH
11215: LD_VAR 0 3
11219: PUSH
11220: LD_VAR 0 7
11224: ARRAY
11225: DIFF
11226: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11227: LD_VAR 0 3
11231: PUSH
11232: LD_VAR 0 7
11236: ARRAY
11237: PPUSH
11238: LD_VAR 0 1
11242: PPUSH
11243: CALL_OW 296
11247: PUSH
11248: LD_INT 9
11250: GREATER
11251: PUSH
11252: LD_VAR 0 3
11256: PUSH
11257: LD_VAR 0 7
11261: ARRAY
11262: PPUSH
11263: CALL_OW 314
11267: NOT
11268: AND
11269: IFFALSE 11306
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11271: LD_VAR 0 3
11275: PUSH
11276: LD_VAR 0 7
11280: ARRAY
11281: PPUSH
11282: LD_VAR 0 1
11286: PPUSH
11287: CALL_OW 250
11291: PPUSH
11292: LD_VAR 0 1
11296: PPUSH
11297: CALL_OW 251
11301: PPUSH
11302: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11306: LD_VAR 0 1
11310: PPUSH
11311: CALL_OW 256
11315: PUSH
11316: LD_INT 700
11318: LESS
11319: IFFALSE 11341
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11321: LD_VAR 0 3
11325: PUSH
11326: LD_VAR 0 7
11330: ARRAY
11331: PPUSH
11332: LD_VAR 0 1
11336: PPUSH
11337: CALL_OW 129
// end ;
11341: GO 11181
11343: POP
11344: POP
// end ; end ;
11345: LD_VAR 0 6
11349: RET
// export function GetBehemoth ( side ) ; begin
11350: LD_INT 0
11352: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11353: LD_ADDR_VAR 0 2
11357: PUSH
11358: LD_INT 22
11360: PUSH
11361: LD_VAR 0 1
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 31
11372: PUSH
11373: LD_INT 25
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: PPUSH
11384: CALL_OW 69
11388: ST_TO_ADDR
// end ;
11389: LD_VAR 0 2
11393: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11394: LD_INT 0
11396: PPUSH
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11402: LD_ADDR_VAR 0 6
11406: PUSH
11407: LD_VAR 0 2
11411: PPUSH
11412: CALL_OW 435
11416: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11417: LD_ADDR_VAR 0 5
11421: PUSH
11422: LD_INT 22
11424: PUSH
11425: LD_VAR 0 1
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: LD_INT 2
11436: PUSH
11437: LD_INT 25
11439: PUSH
11440: LD_INT 2
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 25
11449: PUSH
11450: LD_INT 16
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PPUSH
11466: CALL_OW 69
11470: ST_TO_ADDR
// if skr then
11471: LD_VAR 0 6
11475: IFFALSE 11640
// begin if engs then
11477: LD_VAR 0 5
11481: IFFALSE 11640
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11483: LD_ADDR_VAR 0 8
11487: PUSH
11488: LD_VAR 0 6
11492: PUSH
11493: LD_INT 1
11495: ARRAY
11496: PPUSH
11497: LD_VAR 0 6
11501: PUSH
11502: LD_INT 2
11504: ARRAY
11505: PPUSH
11506: CALL_OW 284
11510: ST_TO_ADDR
// if am > engs then
11511: LD_VAR 0 8
11515: PUSH
11516: LD_VAR 0 5
11520: GREATER
11521: IFFALSE 11533
// am := engs ;
11523: LD_ADDR_VAR 0 8
11527: PUSH
11528: LD_VAR 0 5
11532: ST_TO_ADDR
// for i = 1 to am do
11533: LD_ADDR_VAR 0 7
11537: PUSH
11538: DOUBLE
11539: LD_INT 1
11541: DEC
11542: ST_TO_ADDR
11543: LD_VAR 0 8
11547: PUSH
11548: FOR_TO
11549: IFFALSE 11638
// begin if IsInUnit ( engs [ i ] ) then
11551: LD_VAR 0 5
11555: PUSH
11556: LD_VAR 0 7
11560: ARRAY
11561: PPUSH
11562: CALL_OW 310
11566: IFFALSE 11585
// ComExitBuilding ( engs [ i ] ) else
11568: LD_VAR 0 5
11572: PUSH
11573: LD_VAR 0 7
11577: ARRAY
11578: PPUSH
11579: CALL_OW 122
11583: GO 11636
// if not HasTask ( engs [ i ] ) then
11585: LD_VAR 0 5
11589: PUSH
11590: LD_VAR 0 7
11594: ARRAY
11595: PPUSH
11596: CALL_OW 314
11600: NOT
11601: IFFALSE 11636
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11603: LD_VAR 0 5
11607: PUSH
11608: LD_VAR 0 7
11612: ARRAY
11613: PPUSH
11614: LD_VAR 0 6
11618: PUSH
11619: LD_INT 1
11621: ARRAY
11622: PPUSH
11623: LD_VAR 0 6
11627: PUSH
11628: LD_INT 2
11630: ARRAY
11631: PPUSH
11632: CALL_OW 117
// end ;
11636: GO 11548
11638: POP
11639: POP
// end ; end ; end ; end_of_file
11640: LD_VAR 0 3
11644: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11645: LD_INT 0
11647: PPUSH
11648: PPUSH
// uc_side := 1 ;
11649: LD_ADDR_OWVAR 20
11653: PUSH
11654: LD_INT 1
11656: ST_TO_ADDR
// uc_nation := 1 ;
11657: LD_ADDR_OWVAR 21
11661: PUSH
11662: LD_INT 1
11664: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11665: LD_ADDR_VAR 0 2
11669: PUSH
11670: LD_INT 6
11672: PUSH
11673: LD_INT 5
11675: PUSH
11676: LD_INT 4
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: LIST
11683: PUSH
11684: LD_OWVAR 67
11688: ARRAY
11689: ST_TO_ADDR
// game_status := false ;
11690: LD_ADDR_EXP 29
11694: PUSH
11695: LD_INT 0
11697: ST_TO_ADDR
// helps_arrive := false ;
11698: LD_ADDR_EXP 30
11702: PUSH
11703: LD_INT 0
11705: ST_TO_ADDR
// helps_can_arrive := false ;
11706: LD_ADDR_EXP 31
11710: PUSH
11711: LD_INT 0
11713: ST_TO_ADDR
// beta_come := false ;
11714: LD_ADDR_EXP 32
11718: PUSH
11719: LD_INT 0
11721: ST_TO_ADDR
// gamma_come := false ;
11722: LD_ADDR_EXP 33
11726: PUSH
11727: LD_INT 0
11729: ST_TO_ADDR
// zeta_come := false ;
11730: LD_ADDR_EXP 34
11734: PUSH
11735: LD_INT 0
11737: ST_TO_ADDR
// mine_ck := false ;
11738: LD_ADDR_EXP 35
11742: PUSH
11743: LD_INT 0
11745: ST_TO_ADDR
// sib_bomb_constructed := false ;
11746: LD_ADDR_EXP 36
11750: PUSH
11751: LD_INT 0
11753: ST_TO_ADDR
// mine_constructed := false ;
11754: LD_ADDR_EXP 37
11758: PUSH
11759: LD_INT 0
11761: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11762: LD_INT 35
11764: PPUSH
11765: CALL_OW 274
11769: PPUSH
11770: LD_INT 1
11772: PPUSH
11773: LD_INT 200
11775: PUSH
11776: LD_INT 100
11778: PUSH
11779: LD_INT 70
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: PUSH
11787: LD_OWVAR 67
11791: ARRAY
11792: PPUSH
11793: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11797: LD_INT 35
11799: PPUSH
11800: LD_INT 4
11802: PPUSH
11803: CALL_OW 235
// hc_importance := 100 ;
11807: LD_ADDR_OWVAR 32
11811: PUSH
11812: LD_INT 100
11814: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11815: LD_INT 1
11817: PPUSH
11818: LD_INT 2
11820: PPUSH
11821: LD_VAR 0 2
11825: PUSH
11826: LD_INT 1
11828: PLUS
11829: PPUSH
11830: CALL_OW 380
// hc_gallery := hardch ;
11834: LD_ADDR_OWVAR 33
11838: PUSH
11839: LD_STRING hardch
11841: ST_TO_ADDR
// hc_face_number := 1 ;
11842: LD_ADDR_OWVAR 34
11846: PUSH
11847: LD_INT 1
11849: ST_TO_ADDR
// guyA := CreateHuman ;
11850: LD_ADDR_EXP 38
11854: PUSH
11855: CALL_OW 44
11859: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11860: LD_INT 1
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: LD_VAR 0 2
11870: PPUSH
11871: CALL_OW 380
// hc_face_number := 2 ;
11875: LD_ADDR_OWVAR 34
11879: PUSH
11880: LD_INT 2
11882: ST_TO_ADDR
// guyB := CreateHuman ;
11883: LD_ADDR_EXP 39
11887: PUSH
11888: CALL_OW 44
11892: ST_TO_ADDR
// hc_importance := 0 ;
11893: LD_ADDR_OWVAR 32
11897: PUSH
11898: LD_INT 0
11900: ST_TO_ADDR
// hc_gallery :=  ;
11901: LD_ADDR_OWVAR 33
11905: PUSH
11906: LD_STRING 
11908: ST_TO_ADDR
// end ;
11909: LD_VAR 0 1
11913: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
11914: LD_INT 0
11916: PPUSH
11917: PPUSH
11918: PPUSH
11919: PPUSH
11920: PPUSH
11921: PPUSH
11922: PPUSH
11923: PPUSH
11924: PPUSH
// uc_side := 4 ;
11925: LD_ADDR_OWVAR 20
11929: PUSH
11930: LD_INT 4
11932: ST_TO_ADDR
// uc_nation := 1 ;
11933: LD_ADDR_OWVAR 21
11937: PUSH
11938: LD_INT 1
11940: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11941: LD_ADDR_VAR 0 10
11945: PUSH
11946: LD_INT 6
11948: PUSH
11949: LD_INT 5
11951: PUSH
11952: LD_INT 4
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: PUSH
11960: LD_OWVAR 67
11964: ARRAY
11965: ST_TO_ADDR
// Beta_Squad := [ ] ;
11966: LD_ADDR_EXP 40
11970: PUSH
11971: EMPTY
11972: ST_TO_ADDR
// case num of 1 :
11973: LD_VAR 0 1
11977: PUSH
11978: LD_INT 1
11980: DOUBLE
11981: EQUAL
11982: IFTRUE 11986
11984: GO 12029
11986: POP
// begin sold := 2 ;
11987: LD_ADDR_VAR 0 5
11991: PUSH
11992: LD_INT 2
11994: ST_TO_ADDR
// sci := 1 ;
11995: LD_ADDR_VAR 0 6
11999: PUSH
12000: LD_INT 1
12002: ST_TO_ADDR
// mech := 2 ;
12003: LD_ADDR_VAR 0 7
12007: PUSH
12008: LD_INT 2
12010: ST_TO_ADDR
// tank := 1 ;
12011: LD_ADDR_VAR 0 8
12015: PUSH
12016: LD_INT 1
12018: ST_TO_ADDR
// cargo := 1 ;
12019: LD_ADDR_VAR 0 9
12023: PUSH
12024: LD_INT 1
12026: ST_TO_ADDR
// end ; 2 :
12027: GO 12132
12029: LD_INT 2
12031: DOUBLE
12032: EQUAL
12033: IFTRUE 12037
12035: GO 12080
12037: POP
// begin sold := 2 ;
12038: LD_ADDR_VAR 0 5
12042: PUSH
12043: LD_INT 2
12045: ST_TO_ADDR
// sci := 1 ;
12046: LD_ADDR_VAR 0 6
12050: PUSH
12051: LD_INT 1
12053: ST_TO_ADDR
// mech := 1 ;
12054: LD_ADDR_VAR 0 7
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// tank := 1 ;
12062: LD_ADDR_VAR 0 8
12066: PUSH
12067: LD_INT 1
12069: ST_TO_ADDR
// cargo := 0 ;
12070: LD_ADDR_VAR 0 9
12074: PUSH
12075: LD_INT 0
12077: ST_TO_ADDR
// end ; 3 :
12078: GO 12132
12080: LD_INT 3
12082: DOUBLE
12083: EQUAL
12084: IFTRUE 12088
12086: GO 12131
12088: POP
// begin sold := 1 ;
12089: LD_ADDR_VAR 0 5
12093: PUSH
12094: LD_INT 1
12096: ST_TO_ADDR
// sci := 1 ;
12097: LD_ADDR_VAR 0 6
12101: PUSH
12102: LD_INT 1
12104: ST_TO_ADDR
// mech := 1 ;
12105: LD_ADDR_VAR 0 7
12109: PUSH
12110: LD_INT 1
12112: ST_TO_ADDR
// tank := 1 ;
12113: LD_ADDR_VAR 0 8
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// cargo := 0 ;
12121: LD_ADDR_VAR 0 9
12125: PUSH
12126: LD_INT 0
12128: ST_TO_ADDR
// end ; end ;
12129: GO 12132
12131: POP
// for i = 1 to sold do
12132: LD_ADDR_VAR 0 3
12136: PUSH
12137: DOUBLE
12138: LD_INT 1
12140: DEC
12141: ST_TO_ADDR
12142: LD_VAR 0 5
12146: PUSH
12147: FOR_TO
12148: IFFALSE 12220
// begin if i = 1 then
12150: LD_VAR 0 3
12154: PUSH
12155: LD_INT 1
12157: EQUAL
12158: IFFALSE 12177
// PrepareHuman ( sex_male , 1 , skill ) else
12160: LD_INT 1
12162: PPUSH
12163: LD_INT 1
12165: PPUSH
12166: LD_VAR 0 10
12170: PPUSH
12171: CALL_OW 380
12175: GO 12192
// PrepareHuman ( false , 1 , skill ) ;
12177: LD_INT 0
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_VAR 0 10
12187: PPUSH
12188: CALL_OW 380
// un := CreateHuman ;
12192: LD_ADDR_VAR 0 4
12196: PUSH
12197: CALL_OW 44
12201: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12202: LD_ADDR_EXP 40
12206: PUSH
12207: LD_EXP 40
12211: PUSH
12212: LD_VAR 0 4
12216: ADD
12217: ST_TO_ADDR
// end ;
12218: GO 12147
12220: POP
12221: POP
// for i = 1 to mech do
12222: LD_ADDR_VAR 0 3
12226: PUSH
12227: DOUBLE
12228: LD_INT 1
12230: DEC
12231: ST_TO_ADDR
12232: LD_VAR 0 7
12236: PUSH
12237: FOR_TO
12238: IFFALSE 12295
// begin PrepareHuman ( false , 3 , skill ) ;
12240: LD_INT 0
12242: PPUSH
12243: LD_INT 3
12245: PPUSH
12246: LD_VAR 0 10
12250: PPUSH
12251: CALL_OW 380
// un := CreateHuman ;
12255: LD_ADDR_VAR 0 4
12259: PUSH
12260: CALL_OW 44
12264: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12265: LD_VAR 0 4
12269: PPUSH
12270: LD_INT 3
12272: PPUSH
12273: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12277: LD_ADDR_EXP 40
12281: PUSH
12282: LD_EXP 40
12286: PUSH
12287: LD_VAR 0 4
12291: ADD
12292: ST_TO_ADDR
// end ;
12293: GO 12237
12295: POP
12296: POP
// for i = 1 to sci do
12297: LD_ADDR_VAR 0 3
12301: PUSH
12302: DOUBLE
12303: LD_INT 1
12305: DEC
12306: ST_TO_ADDR
12307: LD_VAR 0 6
12311: PUSH
12312: FOR_TO
12313: IFFALSE 12358
// begin PrepareHuman ( false , 4 , skill ) ;
12315: LD_INT 0
12317: PPUSH
12318: LD_INT 4
12320: PPUSH
12321: LD_VAR 0 10
12325: PPUSH
12326: CALL_OW 380
// un := CreateHuman ;
12330: LD_ADDR_VAR 0 4
12334: PUSH
12335: CALL_OW 44
12339: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12340: LD_ADDR_EXP 40
12344: PUSH
12345: LD_EXP 40
12349: PUSH
12350: LD_VAR 0 4
12354: ADD
12355: ST_TO_ADDR
// end ;
12356: GO 12312
12358: POP
12359: POP
// for i = 1 to tank do
12360: LD_ADDR_VAR 0 3
12364: PUSH
12365: DOUBLE
12366: LD_INT 1
12368: DEC
12369: ST_TO_ADDR
12370: LD_VAR 0 8
12374: PUSH
12375: FOR_TO
12376: IFFALSE 12489
// begin Randomize ;
12378: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12382: LD_ADDR_OWVAR 37
12386: PUSH
12387: LD_INT 3
12389: ST_TO_ADDR
// vc_engine := engine_solar ;
12390: LD_ADDR_OWVAR 39
12394: PUSH
12395: LD_INT 2
12397: ST_TO_ADDR
// vc_control := control_manual ;
12398: LD_ADDR_OWVAR 38
12402: PUSH
12403: LD_INT 1
12405: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12406: LD_ADDR_OWVAR 40
12410: PUSH
12411: LD_INT 4
12413: PUSH
12414: LD_INT 5
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 1
12423: PPUSH
12424: LD_INT 2
12426: PPUSH
12427: CALL_OW 12
12431: ARRAY
12432: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12433: LD_ADDR_OWVAR 41
12437: PUSH
12438: LD_INT 35
12440: PPUSH
12441: LD_INT 55
12443: PPUSH
12444: CALL_OW 12
12448: ST_TO_ADDR
// un := CreateVehicle ;
12449: LD_ADDR_VAR 0 4
12453: PUSH
12454: CALL_OW 45
12458: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12459: LD_VAR 0 4
12463: PPUSH
12464: LD_INT 5
12466: PPUSH
12467: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12471: LD_ADDR_EXP 40
12475: PUSH
12476: LD_EXP 40
12480: PUSH
12481: LD_VAR 0 4
12485: ADD
12486: ST_TO_ADDR
// end ;
12487: GO 12375
12489: POP
12490: POP
// if cargo then
12491: LD_VAR 0 9
12495: IFFALSE 12598
// begin vc_chassis := us_medium_tracked ;
12497: LD_ADDR_OWVAR 37
12501: PUSH
12502: LD_INT 3
12504: ST_TO_ADDR
// vc_engine := engine_solar ;
12505: LD_ADDR_OWVAR 39
12509: PUSH
12510: LD_INT 2
12512: ST_TO_ADDR
// vc_control := control_manual ;
12513: LD_ADDR_OWVAR 38
12517: PUSH
12518: LD_INT 1
12520: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12521: LD_ADDR_OWVAR 40
12525: PUSH
12526: LD_INT 12
12528: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12529: LD_ADDR_OWVAR 41
12533: PUSH
12534: LD_INT 35
12536: PPUSH
12537: LD_INT 55
12539: PPUSH
12540: CALL_OW 12
12544: ST_TO_ADDR
// un := CreateVehicle ;
12545: LD_ADDR_VAR 0 4
12549: PUSH
12550: CALL_OW 45
12554: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12555: LD_VAR 0 4
12559: PPUSH
12560: LD_INT 5
12562: PPUSH
12563: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12567: LD_ADDR_EXP 40
12571: PUSH
12572: LD_EXP 40
12576: PUSH
12577: LD_VAR 0 4
12581: ADD
12582: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12583: LD_VAR 0 4
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: LD_INT 60
12593: PPUSH
12594: CALL_OW 290
// end ; end ;
12598: LD_VAR 0 2
12602: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12603: LD_INT 0
12605: PPUSH
12606: PPUSH
12607: PPUSH
12608: PPUSH
12609: PPUSH
12610: PPUSH
12611: PPUSH
12612: PPUSH
12613: PPUSH
12614: PPUSH
// uc_side := 4 ;
12615: LD_ADDR_OWVAR 20
12619: PUSH
12620: LD_INT 4
12622: ST_TO_ADDR
// uc_nation := 1 ;
12623: LD_ADDR_OWVAR 21
12627: PUSH
12628: LD_INT 1
12630: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12631: LD_ADDR_VAR 0 11
12635: PUSH
12636: LD_INT 6
12638: PUSH
12639: LD_INT 5
12641: PUSH
12642: LD_INT 4
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: LIST
12649: PUSH
12650: LD_OWVAR 67
12654: ARRAY
12655: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12656: LD_ADDR_EXP 41
12660: PUSH
12661: EMPTY
12662: ST_TO_ADDR
// case num of 1 :
12663: LD_VAR 0 1
12667: PUSH
12668: LD_INT 1
12670: DOUBLE
12671: EQUAL
12672: IFTRUE 12676
12674: GO 12727
12676: POP
// begin sold := 2 ;
12677: LD_ADDR_VAR 0 5
12681: PUSH
12682: LD_INT 2
12684: ST_TO_ADDR
// eng := 2 ;
12685: LD_ADDR_VAR 0 6
12689: PUSH
12690: LD_INT 2
12692: ST_TO_ADDR
// sci := 0 ;
12693: LD_ADDR_VAR 0 7
12697: PUSH
12698: LD_INT 0
12700: ST_TO_ADDR
// mech := 1 ;
12701: LD_ADDR_VAR 0 8
12705: PUSH
12706: LD_INT 1
12708: ST_TO_ADDR
// tank := 0 ;
12709: LD_ADDR_VAR 0 9
12713: PUSH
12714: LD_INT 0
12716: ST_TO_ADDR
// cargo := 1 ;
12717: LD_ADDR_VAR 0 10
12721: PUSH
12722: LD_INT 1
12724: ST_TO_ADDR
// end ; 2 :
12725: GO 12846
12727: LD_INT 2
12729: DOUBLE
12730: EQUAL
12731: IFTRUE 12735
12733: GO 12786
12735: POP
// begin sold := 1 ;
12736: LD_ADDR_VAR 0 5
12740: PUSH
12741: LD_INT 1
12743: ST_TO_ADDR
// eng := 2 ;
12744: LD_ADDR_VAR 0 6
12748: PUSH
12749: LD_INT 2
12751: ST_TO_ADDR
// sci := 0 ;
12752: LD_ADDR_VAR 0 7
12756: PUSH
12757: LD_INT 0
12759: ST_TO_ADDR
// mech := 1 ;
12760: LD_ADDR_VAR 0 8
12764: PUSH
12765: LD_INT 1
12767: ST_TO_ADDR
// tank := 0 ;
12768: LD_ADDR_VAR 0 9
12772: PUSH
12773: LD_INT 0
12775: ST_TO_ADDR
// cargo := 1 ;
12776: LD_ADDR_VAR 0 10
12780: PUSH
12781: LD_INT 1
12783: ST_TO_ADDR
// end ; 3 :
12784: GO 12846
12786: LD_INT 3
12788: DOUBLE
12789: EQUAL
12790: IFTRUE 12794
12792: GO 12845
12794: POP
// begin sold := 1 ;
12795: LD_ADDR_VAR 0 5
12799: PUSH
12800: LD_INT 1
12802: ST_TO_ADDR
// eng := 1 ;
12803: LD_ADDR_VAR 0 6
12807: PUSH
12808: LD_INT 1
12810: ST_TO_ADDR
// sci := 0 ;
12811: LD_ADDR_VAR 0 7
12815: PUSH
12816: LD_INT 0
12818: ST_TO_ADDR
// mech := 1 ;
12819: LD_ADDR_VAR 0 8
12823: PUSH
12824: LD_INT 1
12826: ST_TO_ADDR
// tank := 0 ;
12827: LD_ADDR_VAR 0 9
12831: PUSH
12832: LD_INT 0
12834: ST_TO_ADDR
// cargo := 1 ;
12835: LD_ADDR_VAR 0 10
12839: PUSH
12840: LD_INT 1
12842: ST_TO_ADDR
// end ; end ;
12843: GO 12846
12845: POP
// for i = 1 to sold do
12846: LD_ADDR_VAR 0 3
12850: PUSH
12851: DOUBLE
12852: LD_INT 1
12854: DEC
12855: ST_TO_ADDR
12856: LD_VAR 0 5
12860: PUSH
12861: FOR_TO
12862: IFFALSE 12934
// begin if i = 1 then
12864: LD_VAR 0 3
12868: PUSH
12869: LD_INT 1
12871: EQUAL
12872: IFFALSE 12891
// PrepareHuman ( sex_male , 1 , skill ) else
12874: LD_INT 1
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: LD_VAR 0 11
12884: PPUSH
12885: CALL_OW 380
12889: GO 12906
// PrepareHuman ( false , 1 , skill ) ;
12891: LD_INT 0
12893: PPUSH
12894: LD_INT 1
12896: PPUSH
12897: LD_VAR 0 11
12901: PPUSH
12902: CALL_OW 380
// un := CreateHuman ;
12906: LD_ADDR_VAR 0 4
12910: PUSH
12911: CALL_OW 44
12915: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
12916: LD_ADDR_EXP 41
12920: PUSH
12921: LD_EXP 41
12925: PUSH
12926: LD_VAR 0 4
12930: ADD
12931: ST_TO_ADDR
// end ;
12932: GO 12861
12934: POP
12935: POP
// for i = 1 to mech do
12936: LD_ADDR_VAR 0 3
12940: PUSH
12941: DOUBLE
12942: LD_INT 1
12944: DEC
12945: ST_TO_ADDR
12946: LD_VAR 0 8
12950: PUSH
12951: FOR_TO
12952: IFFALSE 13009
// begin PrepareHuman ( false , 3 , skill ) ;
12954: LD_INT 0
12956: PPUSH
12957: LD_INT 3
12959: PPUSH
12960: LD_VAR 0 11
12964: PPUSH
12965: CALL_OW 380
// un := CreateHuman ;
12969: LD_ADDR_VAR 0 4
12973: PUSH
12974: CALL_OW 44
12978: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12979: LD_VAR 0 4
12983: PPUSH
12984: LD_INT 3
12986: PPUSH
12987: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
12991: LD_ADDR_EXP 41
12995: PUSH
12996: LD_EXP 41
13000: PUSH
13001: LD_VAR 0 4
13005: ADD
13006: ST_TO_ADDR
// end ;
13007: GO 12951
13009: POP
13010: POP
// for i = 1 to eng do
13011: LD_ADDR_VAR 0 3
13015: PUSH
13016: DOUBLE
13017: LD_INT 1
13019: DEC
13020: ST_TO_ADDR
13021: LD_VAR 0 6
13025: PUSH
13026: FOR_TO
13027: IFFALSE 13072
// begin PrepareHuman ( false , 2 , skill ) ;
13029: LD_INT 0
13031: PPUSH
13032: LD_INT 2
13034: PPUSH
13035: LD_VAR 0 11
13039: PPUSH
13040: CALL_OW 380
// un := CreateHuman ;
13044: LD_ADDR_VAR 0 4
13048: PUSH
13049: CALL_OW 44
13053: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13054: LD_ADDR_EXP 41
13058: PUSH
13059: LD_EXP 41
13063: PUSH
13064: LD_VAR 0 4
13068: ADD
13069: ST_TO_ADDR
// end ;
13070: GO 13026
13072: POP
13073: POP
// for i = 1 to tank do
13074: LD_ADDR_VAR 0 3
13078: PUSH
13079: DOUBLE
13080: LD_INT 1
13082: DEC
13083: ST_TO_ADDR
13084: LD_VAR 0 9
13088: PUSH
13089: FOR_TO
13090: IFFALSE 13203
// begin Randomize ;
13092: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13096: LD_ADDR_OWVAR 37
13100: PUSH
13101: LD_INT 2
13103: ST_TO_ADDR
// vc_engine := engine_siberite ;
13104: LD_ADDR_OWVAR 39
13108: PUSH
13109: LD_INT 3
13111: ST_TO_ADDR
// vc_control := control_manual ;
13112: LD_ADDR_OWVAR 38
13116: PUSH
13117: LD_INT 1
13119: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13120: LD_ADDR_OWVAR 40
13124: PUSH
13125: LD_INT 7
13127: PUSH
13128: LD_INT 9
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 1
13137: PPUSH
13138: LD_INT 2
13140: PPUSH
13141: CALL_OW 12
13145: ARRAY
13146: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13147: LD_ADDR_OWVAR 41
13151: PUSH
13152: LD_INT 35
13154: PPUSH
13155: LD_INT 55
13157: PPUSH
13158: CALL_OW 12
13162: ST_TO_ADDR
// un := CreateVehicle ;
13163: LD_ADDR_VAR 0 4
13167: PUSH
13168: CALL_OW 45
13172: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13173: LD_VAR 0 4
13177: PPUSH
13178: LD_INT 5
13180: PPUSH
13181: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13185: LD_ADDR_EXP 41
13189: PUSH
13190: LD_EXP 41
13194: PUSH
13195: LD_VAR 0 4
13199: ADD
13200: ST_TO_ADDR
// end ;
13201: GO 13089
13203: POP
13204: POP
// if cargo then
13205: LD_VAR 0 10
13209: IFFALSE 13327
// begin vc_chassis := us_medium_tracked ;
13211: LD_ADDR_OWVAR 37
13215: PUSH
13216: LD_INT 3
13218: ST_TO_ADDR
// vc_engine := engine_combustion ;
13219: LD_ADDR_OWVAR 39
13223: PUSH
13224: LD_INT 1
13226: ST_TO_ADDR
// vc_control := control_manual ;
13227: LD_ADDR_OWVAR 38
13231: PUSH
13232: LD_INT 1
13234: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13235: LD_ADDR_OWVAR 40
13239: PUSH
13240: LD_INT 12
13242: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13243: LD_ADDR_OWVAR 41
13247: PUSH
13248: LD_INT 35
13250: PPUSH
13251: LD_INT 55
13253: PPUSH
13254: CALL_OW 12
13258: ST_TO_ADDR
// un := CreateVehicle ;
13259: LD_ADDR_VAR 0 4
13263: PUSH
13264: CALL_OW 45
13268: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13269: LD_VAR 0 4
13273: PPUSH
13274: LD_INT 5
13276: PPUSH
13277: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13281: LD_ADDR_EXP 41
13285: PUSH
13286: LD_EXP 41
13290: PUSH
13291: LD_VAR 0 4
13295: ADD
13296: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13297: LD_VAR 0 4
13301: PPUSH
13302: LD_INT 3
13304: PPUSH
13305: LD_INT 30
13307: PPUSH
13308: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13312: LD_VAR 0 4
13316: PPUSH
13317: LD_INT 1
13319: PPUSH
13320: LD_INT 40
13322: PPUSH
13323: CALL_OW 290
// end ; end ;
13327: LD_VAR 0 2
13331: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13332: LD_INT 0
13334: PPUSH
13335: PPUSH
13336: PPUSH
13337: PPUSH
13338: PPUSH
13339: PPUSH
13340: PPUSH
13341: PPUSH
13342: PPUSH
13343: PPUSH
// uc_side := 4 ;
13344: LD_ADDR_OWVAR 20
13348: PUSH
13349: LD_INT 4
13351: ST_TO_ADDR
// uc_nation := 1 ;
13352: LD_ADDR_OWVAR 21
13356: PUSH
13357: LD_INT 1
13359: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13360: LD_ADDR_VAR 0 10
13364: PUSH
13365: LD_INT 6
13367: PUSH
13368: LD_INT 5
13370: PUSH
13371: LD_INT 4
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: LIST
13378: PUSH
13379: LD_OWVAR 67
13383: ARRAY
13384: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13385: LD_ADDR_EXP 42
13389: PUSH
13390: EMPTY
13391: ST_TO_ADDR
// sold := 1 ;
13392: LD_ADDR_VAR 0 4
13396: PUSH
13397: LD_INT 1
13399: ST_TO_ADDR
// eng := 0 ;
13400: LD_ADDR_VAR 0 5
13404: PUSH
13405: LD_INT 0
13407: ST_TO_ADDR
// sci := 0 ;
13408: LD_ADDR_VAR 0 6
13412: PUSH
13413: LD_INT 0
13415: ST_TO_ADDR
// mech := 3 ;
13416: LD_ADDR_VAR 0 7
13420: PUSH
13421: LD_INT 3
13423: ST_TO_ADDR
// tank := 3 ;
13424: LD_ADDR_VAR 0 8
13428: PUSH
13429: LD_INT 3
13431: ST_TO_ADDR
// cargo := 0 ;
13432: LD_ADDR_VAR 0 9
13436: PUSH
13437: LD_INT 0
13439: ST_TO_ADDR
// for i = 1 to sold do
13440: LD_ADDR_VAR 0 2
13444: PUSH
13445: DOUBLE
13446: LD_INT 1
13448: DEC
13449: ST_TO_ADDR
13450: LD_VAR 0 4
13454: PUSH
13455: FOR_TO
13456: IFFALSE 13528
// begin if i = 1 then
13458: LD_VAR 0 2
13462: PUSH
13463: LD_INT 1
13465: EQUAL
13466: IFFALSE 13485
// PrepareHuman ( sex_male , 1 , skill ) else
13468: LD_INT 1
13470: PPUSH
13471: LD_INT 1
13473: PPUSH
13474: LD_VAR 0 10
13478: PPUSH
13479: CALL_OW 380
13483: GO 13500
// PrepareHuman ( false , 1 , skill ) ;
13485: LD_INT 0
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: LD_VAR 0 10
13495: PPUSH
13496: CALL_OW 380
// un := CreateHuman ;
13500: LD_ADDR_VAR 0 3
13504: PUSH
13505: CALL_OW 44
13509: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13510: LD_ADDR_EXP 42
13514: PUSH
13515: LD_EXP 42
13519: PUSH
13520: LD_VAR 0 3
13524: ADD
13525: ST_TO_ADDR
// end ;
13526: GO 13455
13528: POP
13529: POP
// for i = 1 to mech do
13530: LD_ADDR_VAR 0 2
13534: PUSH
13535: DOUBLE
13536: LD_INT 1
13538: DEC
13539: ST_TO_ADDR
13540: LD_VAR 0 7
13544: PUSH
13545: FOR_TO
13546: IFFALSE 13603
// begin PrepareHuman ( false , 3 , skill ) ;
13548: LD_INT 0
13550: PPUSH
13551: LD_INT 3
13553: PPUSH
13554: LD_VAR 0 10
13558: PPUSH
13559: CALL_OW 380
// un := CreateHuman ;
13563: LD_ADDR_VAR 0 3
13567: PUSH
13568: CALL_OW 44
13572: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13573: LD_VAR 0 3
13577: PPUSH
13578: LD_INT 3
13580: PPUSH
13581: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13585: LD_ADDR_EXP 42
13589: PUSH
13590: LD_EXP 42
13594: PUSH
13595: LD_VAR 0 3
13599: ADD
13600: ST_TO_ADDR
// end ;
13601: GO 13545
13603: POP
13604: POP
// for i = 1 to tank do
13605: LD_ADDR_VAR 0 2
13609: PUSH
13610: DOUBLE
13611: LD_INT 1
13613: DEC
13614: ST_TO_ADDR
13615: LD_VAR 0 8
13619: PUSH
13620: FOR_TO
13621: IFFALSE 13867
// begin Randomize ;
13623: CALL_OW 10
// if i < 3 then
13627: LD_VAR 0 2
13631: PUSH
13632: LD_INT 3
13634: LESS
13635: IFFALSE 13744
// begin vc_chassis := us_medium_tracked ;
13637: LD_ADDR_OWVAR 37
13641: PUSH
13642: LD_INT 3
13644: ST_TO_ADDR
// vc_engine := engine_combustion ;
13645: LD_ADDR_OWVAR 39
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// vc_control := control_manual ;
13653: LD_ADDR_OWVAR 38
13657: PUSH
13658: LD_INT 1
13660: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13661: LD_ADDR_OWVAR 40
13665: PUSH
13666: LD_INT 3
13668: PUSH
13669: LD_INT 9
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 1
13678: PPUSH
13679: LD_INT 2
13681: PPUSH
13682: CALL_OW 12
13686: ARRAY
13687: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13688: LD_ADDR_OWVAR 41
13692: PUSH
13693: LD_INT 35
13695: PPUSH
13696: LD_INT 55
13698: PPUSH
13699: CALL_OW 12
13703: ST_TO_ADDR
// un := CreateVehicle ;
13704: LD_ADDR_VAR 0 3
13708: PUSH
13709: CALL_OW 45
13713: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13714: LD_VAR 0 3
13718: PPUSH
13719: LD_INT 5
13721: PPUSH
13722: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13726: LD_ADDR_EXP 42
13730: PUSH
13731: LD_EXP 42
13735: PUSH
13736: LD_VAR 0 3
13740: ADD
13741: ST_TO_ADDR
// end else
13742: GO 13865
// begin uc_nation := 3 ;
13744: LD_ADDR_OWVAR 21
13748: PUSH
13749: LD_INT 3
13751: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13752: LD_ADDR_OWVAR 37
13756: PUSH
13757: LD_INT 22
13759: ST_TO_ADDR
// vc_engine := engine_combustion ;
13760: LD_ADDR_OWVAR 39
13764: PUSH
13765: LD_INT 1
13767: ST_TO_ADDR
// vc_control := control_manual ;
13768: LD_ADDR_OWVAR 38
13772: PUSH
13773: LD_INT 1
13775: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13776: LD_ADDR_OWVAR 40
13780: PUSH
13781: LD_INT 51
13783: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13784: LD_ADDR_OWVAR 41
13788: PUSH
13789: LD_INT 35
13791: PPUSH
13792: LD_INT 55
13794: PPUSH
13795: CALL_OW 12
13799: ST_TO_ADDR
// un := CreateVehicle ;
13800: LD_ADDR_VAR 0 3
13804: PUSH
13805: CALL_OW 45
13809: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13810: LD_VAR 0 3
13814: PPUSH
13815: LD_INT 496
13817: PPUSH
13818: CALL_OW 234
// SetTag ( un , 5 ) ;
13822: LD_VAR 0 3
13826: PPUSH
13827: LD_INT 5
13829: PPUSH
13830: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13834: LD_VAR 0 3
13838: PPUSH
13839: LD_INT 2
13841: PPUSH
13842: LD_INT 100
13844: PPUSH
13845: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13849: LD_ADDR_EXP 42
13853: PUSH
13854: LD_EXP 42
13858: PUSH
13859: LD_VAR 0 3
13863: ADD
13864: ST_TO_ADDR
// end ; end ;
13865: GO 13620
13867: POP
13868: POP
// end ; end_of_file
13869: LD_VAR 0 1
13873: RET
// export function Action ; begin
13874: LD_INT 0
13876: PPUSH
// InGameOn ;
13877: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13881: LD_INT 151
13883: PPUSH
13884: LD_INT 107
13886: PPUSH
13887: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13891: LD_EXP 38
13895: PPUSH
13896: LD_INT 171
13898: PPUSH
13899: LD_INT 108
13901: PPUSH
13902: LD_INT 0
13904: PPUSH
13905: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
13909: LD_EXP 39
13913: PPUSH
13914: LD_INT 172
13916: PPUSH
13917: LD_INT 110
13919: PPUSH
13920: LD_INT 0
13922: PPUSH
13923: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
13927: LD_EXP 38
13931: PPUSH
13932: LD_INT 156
13934: PPUSH
13935: LD_INT 107
13937: PPUSH
13938: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
13942: LD_EXP 39
13946: PPUSH
13947: LD_INT 154
13949: PPUSH
13950: LD_INT 105
13952: PPUSH
13953: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
13957: LD_INT 4
13959: PPUSH
13960: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
13964: LD_EXP 38
13968: PPUSH
13969: CALL_OW 250
13973: PUSH
13974: LD_INT 156
13976: EQUAL
13977: PUSH
13978: LD_EXP 38
13982: PPUSH
13983: CALL_OW 251
13987: PUSH
13988: LD_INT 107
13990: EQUAL
13991: AND
13992: IFFALSE 13957
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
13994: LD_EXP 38
13998: PUSH
13999: LD_EXP 39
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PPUSH
14008: LD_INT 35
14010: PPUSH
14011: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
14015: LD_EXP 38
14019: PPUSH
14020: LD_STRING D1-A-1
14022: PPUSH
14023: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14027: LD_EXP 39
14031: PPUSH
14032: LD_STRING D1-B-1
14034: PPUSH
14035: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14039: LD_EXP 38
14043: PPUSH
14044: LD_STRING D1-A-2
14046: PPUSH
14047: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14051: LD_EXP 39
14055: PPUSH
14056: LD_STRING D1-B-2
14058: PPUSH
14059: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14063: LD_EXP 38
14067: PUSH
14068: LD_EXP 39
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PPUSH
14077: LD_INT 147
14079: PPUSH
14080: LD_INT 108
14082: PPUSH
14083: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14087: LD_EXP 38
14091: PPUSH
14092: LD_STRING D1-A-3
14094: PPUSH
14095: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14099: LD_INT 4
14101: PPUSH
14102: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14106: LD_EXP 38
14110: PPUSH
14111: LD_INT 35
14113: PPUSH
14114: CALL_OW 296
14118: PUSH
14119: LD_INT 8
14121: LESS
14122: IFFALSE 14099
// ComTurnUnit ( guyA , guyB ) ;
14124: LD_EXP 38
14128: PPUSH
14129: LD_EXP 39
14133: PPUSH
14134: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14138: LD_EXP 39
14142: PPUSH
14143: LD_EXP 38
14147: PPUSH
14148: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14152: LD_EXP 38
14156: PPUSH
14157: LD_STRING D1-A-10
14159: PPUSH
14160: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14164: LD_EXP 39
14168: PPUSH
14169: LD_STRING D1-B-10
14171: PPUSH
14172: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14176: LD_EXP 38
14180: PPUSH
14181: LD_STRING D1-A-11
14183: PPUSH
14184: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14188: LD_EXP 39
14192: PPUSH
14193: LD_STRING D1-B-11
14195: PPUSH
14196: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14200: LD_EXP 38
14204: PPUSH
14205: LD_STRING D1-A-12
14207: PPUSH
14208: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14212: LD_EXP 39
14216: PPUSH
14217: LD_STRING D1-B-12
14219: PPUSH
14220: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14224: LD_EXP 38
14228: PPUSH
14229: LD_STRING D1-A-13
14231: PPUSH
14232: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14236: LD_EXP 39
14240: PPUSH
14241: LD_STRING D1-B-13
14243: PPUSH
14244: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14248: LD_EXP 38
14252: PPUSH
14253: LD_STRING D1-A-14
14255: PPUSH
14256: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14260: LD_EXP 39
14264: PPUSH
14265: LD_STRING D1-B-14
14267: PPUSH
14268: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14272: LD_EXP 38
14276: PPUSH
14277: LD_STRING D1-A-15
14279: PPUSH
14280: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14284: LD_EXP 39
14288: PPUSH
14289: LD_STRING D1-B-15
14291: PPUSH
14292: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14296: LD_EXP 38
14300: PPUSH
14301: LD_STRING D1-A-16
14303: PPUSH
14304: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14308: LD_EXP 39
14312: PPUSH
14313: LD_STRING D1-B-16
14315: PPUSH
14316: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14320: LD_EXP 38
14324: PPUSH
14325: LD_STRING D1-A-17
14327: PPUSH
14328: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14332: LD_EXP 39
14336: PPUSH
14337: LD_STRING D1-B-17
14339: PPUSH
14340: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14344: LD_EXP 38
14348: PPUSH
14349: LD_STRING D1-A-18
14351: PPUSH
14352: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14356: LD_INT 35
14358: PPUSH
14359: LD_INT 1
14361: PPUSH
14362: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14366: LD_EXP 38
14370: PUSH
14371: LD_EXP 39
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PPUSH
14380: LD_INT 35
14382: PPUSH
14383: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14387: LD_INT 4
14389: PPUSH
14390: CALL_OW 67
// until IsInUnit ( guyA ) ;
14394: LD_EXP 38
14398: PPUSH
14399: CALL_OW 310
14403: IFFALSE 14387
// Wait ( 0 0$02 ) ;
14405: LD_INT 70
14407: PPUSH
14408: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14412: LD_EXP 38
14416: PPUSH
14417: LD_STRING D1-A-19
14419: PPUSH
14420: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14424: LD_EXP 39
14428: PPUSH
14429: LD_STRING D1-B-19
14431: PPUSH
14432: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14436: LD_EXP 38
14440: PPUSH
14441: LD_STRING D1-A-20
14443: PPUSH
14444: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14448: LD_INT 10
14450: PPUSH
14451: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14455: LD_EXP 39
14459: PPUSH
14460: LD_STRING D1-B-20
14462: PPUSH
14463: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14467: LD_EXP 38
14471: PPUSH
14472: LD_STRING D1-A-21
14474: PPUSH
14475: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14479: LD_EXP 39
14483: PPUSH
14484: LD_STRING D1-B-21
14486: PPUSH
14487: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14491: LD_EXP 38
14495: PPUSH
14496: LD_STRING D1-A-22
14498: PPUSH
14499: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14503: LD_EXP 39
14507: PPUSH
14508: LD_STRING D1-B-22
14510: PPUSH
14511: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14515: LD_EXP 38
14519: PPUSH
14520: LD_STRING D1-A-23
14522: PPUSH
14523: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14527: LD_EXP 39
14531: PPUSH
14532: LD_STRING D1-B-23
14534: PPUSH
14535: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14539: LD_EXP 38
14543: PPUSH
14544: LD_STRING D1-A-24
14546: PPUSH
14547: CALL_OW 88
// InGameOff ;
14551: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14555: LD_STRING M_main
14557: PPUSH
14558: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14562: LD_INT 4
14564: PPUSH
14565: LD_INT 1
14567: PPUSH
14568: CALL_OW 343
// game_status := true ;
14572: LD_ADDR_EXP 29
14576: PUSH
14577: LD_INT 1
14579: ST_TO_ADDR
// end ;
14580: LD_VAR 0 1
14584: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14585: LD_INT 1
14587: PPUSH
14588: CALL 6376 0 1
14592: PUSH
14593: LD_INT 0
14595: GREATER
14596: IFFALSE 14698
14598: GO 14600
14600: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14601: LD_INT 35
14603: PPUSH
14604: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14608: LD_INT 1
14610: PPUSH
14611: CALL 6376 0 1
14615: PUSH
14616: LD_INT 1
14618: ARRAY
14619: PPUSH
14620: CALL_OW 461
14624: PUSH
14625: LD_INT 1
14627: NONEQUAL
14628: IFFALSE 14601
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14630: LD_EXP 38
14634: PPUSH
14635: CALL_OW 300
14639: PUSH
14640: LD_EXP 39
14644: PPUSH
14645: CALL_OW 300
14649: AND
14650: PUSH
14651: LD_EXP 30
14655: NOT
14656: AND
14657: IFFALSE 14683
// begin Say ( guyA , DL-A-1 ) ;
14659: LD_EXP 38
14663: PPUSH
14664: LD_STRING DL-A-1
14666: PPUSH
14667: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14671: LD_EXP 39
14675: PPUSH
14676: LD_STRING DL-B-1
14678: PPUSH
14679: CALL_OW 88
// end ; if not helps_can_arrive then
14683: LD_EXP 31
14687: NOT
14688: IFFALSE 14698
// helps_can_arrive := true ;
14690: LD_ADDR_EXP 31
14694: PUSH
14695: LD_INT 1
14697: ST_TO_ADDR
// end ;
14698: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14699: LD_INT 1
14701: PPUSH
14702: CALL 6376 0 1
14706: PUSH
14707: LD_INT 0
14709: GREATER
14710: PUSH
14711: LD_EXP 38
14715: PPUSH
14716: CALL_OW 300
14720: AND
14721: PUSH
14722: LD_EXP 39
14726: PPUSH
14727: CALL_OW 300
14731: AND
14732: PUSH
14733: LD_INT 22
14735: PUSH
14736: LD_INT 1
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: LD_INT 25
14745: PUSH
14746: LD_INT 12
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PPUSH
14757: CALL_OW 69
14761: PUSH
14762: LD_INT 0
14764: EQUAL
14765: AND
14766: PUSH
14767: LD_INT 1
14769: PPUSH
14770: LD_INT 25
14772: PUSH
14773: LD_INT 12
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PPUSH
14780: CALL_OW 69
14784: PPUSH
14785: LD_EXP 38
14789: PPUSH
14790: CALL_OW 74
14794: PPUSH
14795: CALL_OW 292
14799: AND
14800: IFFALSE 14841
14802: GO 14804
14804: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14805: LD_EXP 38
14809: PPUSH
14810: LD_STRING DA-A-1
14812: PPUSH
14813: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14817: LD_EXP 39
14821: PPUSH
14822: LD_STRING DA-B-1
14824: PPUSH
14825: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14829: LD_EXP 38
14833: PPUSH
14834: LD_STRING DA-A-2
14836: PPUSH
14837: CALL_OW 88
// end ;
14841: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14842: LD_EXP 29
14846: PUSH
14847: LD_EXP 38
14851: PPUSH
14852: LD_INT 6
14854: PPUSH
14855: CALL_OW 299
14859: PUSH
14860: LD_INT 7
14862: LESS
14863: AND
14864: IFFALSE 14917
14866: GO 14868
14868: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14869: LD_INT 117
14871: PPUSH
14872: LD_INT 50
14874: PPUSH
14875: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
14879: LD_INT 1
14881: PPUSH
14882: CALL 10013 0 1
14886: PUSH
14887: LD_INT 2
14889: ARRAY
14890: PPUSH
14891: LD_STRING D5-A-1
14893: PPUSH
14894: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
14898: LD_INT 1
14900: PPUSH
14901: CALL 10013 0 1
14905: PUSH
14906: LD_INT 1
14908: ARRAY
14909: PPUSH
14910: LD_STRING D5-B-1
14912: PPUSH
14913: CALL_OW 88
// end ;
14917: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
14918: LD_INT 7
14920: PPUSH
14921: LD_INT 22
14923: PUSH
14924: LD_INT 1
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PPUSH
14931: CALL_OW 70
14935: PUSH
14936: LD_INT 0
14938: GREATER
14939: IFFALSE 15084
14941: GO 14943
14943: DISABLE
// begin Wait ( 0 0$03 ) ;
14944: LD_INT 105
14946: PPUSH
14947: CALL_OW 67
// DialogueOn ;
14951: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
14955: LD_INT 1
14957: PPUSH
14958: CALL 10013 0 1
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PPUSH
14967: LD_STRING D6-A-1
14969: PPUSH
14970: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
14974: LD_INT 1
14976: PPUSH
14977: CALL 10013 0 1
14981: PUSH
14982: LD_INT 2
14984: ARRAY
14985: PPUSH
14986: LD_STRING D6-B-1
14988: PPUSH
14989: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
14993: LD_INT 95
14995: PPUSH
14996: LD_INT 8
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: LD_INT 20
15004: PPUSH
15005: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
15009: LD_INT 10
15011: PPUSH
15012: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
15016: LD_INT 1
15018: PPUSH
15019: CALL 10013 0 1
15023: PUSH
15024: LD_INT 1
15026: ARRAY
15027: PPUSH
15028: LD_STRING D6-A-2
15030: PPUSH
15031: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15035: LD_INT 1
15037: PPUSH
15038: CALL 10013 0 1
15042: PUSH
15043: LD_INT 2
15045: ARRAY
15046: PPUSH
15047: LD_STRING D6-B-2
15049: PPUSH
15050: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15054: LD_INT 1
15056: PPUSH
15057: CALL 10013 0 1
15061: PUSH
15062: LD_INT 1
15064: ARRAY
15065: PPUSH
15066: LD_STRING D6-A-3
15068: PPUSH
15069: CALL_OW 88
// DialogueOff ;
15073: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15077: LD_STRING M_base
15079: PPUSH
15080: CALL_OW 337
// end ;
15084: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15085: LD_EXP 30
15089: NOT
15090: PUSH
15091: LD_INT 22
15093: PUSH
15094: LD_INT 3
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 21
15103: PUSH
15104: LD_INT 2
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PPUSH
15115: CALL_OW 69
15119: PUSH
15120: LD_INT 0
15122: GREATER
15123: AND
15124: IFFALSE 15257
15126: GO 15128
15128: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15129: LD_INT 35
15131: PPUSH
15132: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15136: LD_INT 22
15138: PUSH
15139: LD_INT 3
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 21
15148: PUSH
15149: LD_INT 2
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PPUSH
15160: CALL_OW 69
15164: PPUSH
15165: LD_INT 1
15167: PPUSH
15168: CALL 10013 0 1
15172: PUSH
15173: LD_INT 1
15175: ARRAY
15176: PPUSH
15177: CALL_OW 74
15181: PPUSH
15182: LD_INT 1
15184: PPUSH
15185: CALL 10013 0 1
15189: PUSH
15190: LD_INT 1
15192: ARRAY
15193: PPUSH
15194: CALL_OW 296
15198: PUSH
15199: LD_INT 7
15201: LESS
15202: IFFALSE 15129
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15204: LD_INT 1
15206: PPUSH
15207: CALL 10013 0 1
15211: PUSH
15212: LD_INT 1
15214: ARRAY
15215: PPUSH
15216: LD_STRING DR-A-1
15218: PPUSH
15219: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15223: LD_INT 1
15225: PPUSH
15226: CALL 10013 0 1
15230: PUSH
15231: LD_INT 2
15233: ARRAY
15234: PPUSH
15235: LD_STRING DR-B-1
15237: PPUSH
15238: CALL_OW 88
// Wait ( 3 3$00 ) ;
15242: LD_INT 6300
15244: PPUSH
15245: CALL_OW 67
// ru_spotted := true ;
15249: LD_ADDR_EXP 16
15253: PUSH
15254: LD_INT 1
15256: ST_TO_ADDR
// end ;
15257: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15258: LD_INT 35
15260: PPUSH
15261: CALL_OW 300
15265: NOT
15266: IFFALSE 15290
15268: GO 15270
15270: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15271: LD_INT 1
15273: PPUSH
15274: CALL 10013 0 1
15278: PUSH
15279: LD_INT 1
15281: ARRAY
15282: PPUSH
15283: LD_STRING DDR-A-1
15285: PPUSH
15286: CALL_OW 88
15290: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15291: LD_INT 1
15293: PPUSH
15294: LD_INT 30
15296: PPUSH
15297: CALL 6227 0 2
15301: IFFALSE 15383
15303: GO 15305
15305: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15306: LD_INT 35
15308: PPUSH
15309: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15313: LD_INT 1
15315: PPUSH
15316: LD_INT 30
15318: PPUSH
15319: CALL 6227 0 2
15323: PUSH
15324: LD_INT 1
15326: ARRAY
15327: PPUSH
15328: CALL_OW 461
15332: PUSH
15333: LD_INT 1
15335: NONEQUAL
15336: IFFALSE 15306
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15338: LD_INT 1
15340: PPUSH
15341: CALL 10013 0 1
15345: PUSH
15346: LD_INT 1
15348: ARRAY
15349: PPUSH
15350: LD_STRING D8-A-1
15352: PPUSH
15353: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15357: LD_INT 1
15359: PPUSH
15360: CALL 10013 0 1
15364: PUSH
15365: LD_INT 2
15367: ARRAY
15368: PPUSH
15369: LD_STRING D8-B-1
15371: PPUSH
15372: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15376: LD_STRING M_mineok
15378: PPUSH
15379: CALL_OW 337
// end ;
15383: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15384: LD_INT 22
15386: PUSH
15387: LD_INT 1
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 30
15396: PUSH
15397: LD_INT 0
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: LD_INT 3
15406: PUSH
15407: LD_INT 57
15409: PUSH
15410: EMPTY
15411: LIST
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: LIST
15421: PPUSH
15422: CALL_OW 69
15426: PUSH
15427: LD_INT 1
15429: GREATER
15430: PUSH
15431: LD_INT 22
15433: PUSH
15434: LD_INT 1
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 30
15443: PUSH
15444: LD_INT 0
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 3
15453: PUSH
15454: LD_INT 57
15456: PUSH
15457: EMPTY
15458: LIST
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: LIST
15468: PPUSH
15469: CALL_OW 69
15473: PUSH
15474: LD_INT 1
15476: EQUAL
15477: PUSH
15478: LD_INT 35
15480: PPUSH
15481: CALL_OW 300
15485: NOT
15486: AND
15487: OR
15488: IFFALSE 15540
15490: GO 15492
15492: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15493: LD_INT 22
15495: PUSH
15496: LD_INT 1
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 25
15505: PUSH
15506: LD_INT 2
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PPUSH
15517: CALL_OW 69
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: PPUSH
15526: LD_STRING D7-A-1
15528: PPUSH
15529: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15533: LD_STRING M_baseok
15535: PPUSH
15536: CALL_OW 337
// end ;
15540: END
// every 0 0$01 trigger mine_ck do
15541: LD_EXP 35
15545: IFFALSE 15576
15547: GO 15549
15549: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15550: LD_INT 1
15552: PPUSH
15553: CALL 10013 0 1
15557: PUSH
15558: LD_INT 1
15560: ARRAY
15561: PPUSH
15562: LD_STRING D9-A-1
15564: PPUSH
15565: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15569: LD_STRING M_minedest
15571: PPUSH
15572: CALL_OW 337
// end ;
15576: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15577: LD_EXP 29
15581: IFFALSE 16087
15583: GO 15585
15585: DISABLE
15586: LD_INT 0
15588: PPUSH
15589: PPUSH
15590: PPUSH
15591: PPUSH
15592: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15593: LD_OWVAR 67
15597: PPUSH
15598: CALL 11914 0 1
// if not helps_can_arrive then
15602: LD_EXP 31
15606: NOT
15607: IFFALSE 15635
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15609: LD_EXP 40
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PPUSH
15618: LD_STRING DB-Delay
15620: PPUSH
15621: CALL_OW 94
// time := 10 10$00 ;
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: LD_INT 21000
15632: ST_TO_ADDR
// end else
15633: GO 15643
// time := 3 3$00 ;
15635: LD_ADDR_VAR 0 1
15639: PUSH
15640: LD_INT 6300
15642: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15643: LD_ADDR_VAR 0 1
15647: PUSH
15648: LD_VAR 0 1
15652: PUSH
15653: LD_INT 35
15655: MINUS
15656: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15657: LD_INT 35
15659: PPUSH
15660: CALL_OW 67
// end until time = 0 0$00 ;
15664: LD_VAR 0 1
15668: PUSH
15669: LD_INT 0
15671: EQUAL
15672: IFFALSE 15643
// helps_arrive := true ;
15674: LD_ADDR_EXP 30
15678: PUSH
15679: LD_INT 1
15681: ST_TO_ADDR
// if IsLive ( guyA ) then
15682: LD_EXP 38
15686: PPUSH
15687: CALL_OW 300
15691: IFFALSE 15705
// r := guyA else
15693: LD_ADDR_VAR 0 4
15697: PUSH
15698: LD_EXP 38
15702: ST_TO_ADDR
15703: GO 15715
// r := guyB ;
15705: LD_ADDR_VAR 0 4
15709: PUSH
15710: LD_EXP 39
15714: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15715: LD_EXP 40
15719: PUSH
15720: LD_INT 1
15722: ARRAY
15723: PPUSH
15724: LD_STRING D2-A-1
15726: PPUSH
15727: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15731: LD_VAR 0 4
15735: PPUSH
15736: LD_STRING D2-B-1
15738: PPUSH
15739: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15743: LD_EXP 40
15747: PUSH
15748: LD_INT 1
15750: ARRAY
15751: PPUSH
15752: LD_STRING D2-A-2
15754: PPUSH
15755: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15759: LD_VAR 0 4
15763: PPUSH
15764: LD_STRING D2-B-2
15766: PPUSH
15767: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15771: LD_EXP 40
15775: PUSH
15776: LD_INT 1
15778: ARRAY
15779: PPUSH
15780: LD_STRING D2-A-3
15782: PPUSH
15783: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15787: LD_VAR 0 4
15791: PPUSH
15792: LD_STRING D2-B-3
15794: PPUSH
15795: CALL_OW 88
// to_veh := [ ] ;
15799: LD_ADDR_VAR 0 5
15803: PUSH
15804: EMPTY
15805: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15806: LD_ADDR_VAR 0 2
15810: PUSH
15811: DOUBLE
15812: LD_INT 1
15814: DEC
15815: ST_TO_ADDR
15816: LD_EXP 40
15820: PUSH
15821: FOR_TO
15822: IFFALSE 16085
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15824: LD_EXP 40
15828: PUSH
15829: LD_VAR 0 2
15833: ARRAY
15834: PPUSH
15835: CALL_OW 110
15839: PUSH
15840: LD_INT 3
15842: EQUAL
15843: IFFALSE 15869
// to_veh := to_veh ^ Beta_Squad [ i ] else
15845: LD_ADDR_VAR 0 5
15849: PUSH
15850: LD_VAR 0 5
15854: PUSH
15855: LD_EXP 40
15859: PUSH
15860: LD_VAR 0 2
15864: ARRAY
15865: ADD
15866: ST_TO_ADDR
15867: GO 15994
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15869: LD_EXP 40
15873: PUSH
15874: LD_VAR 0 2
15878: ARRAY
15879: PPUSH
15880: CALL_OW 110
15884: PUSH
15885: LD_INT 5
15887: EQUAL
15888: IFFALSE 15973
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
15890: LD_EXP 40
15894: PUSH
15895: LD_VAR 0 2
15899: ARRAY
15900: PPUSH
15901: LD_INT 4
15903: PPUSH
15904: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15908: LD_EXP 40
15912: PUSH
15913: LD_VAR 0 2
15917: ARRAY
15918: PPUSH
15919: LD_INT 5
15921: PPUSH
15922: LD_INT 0
15924: PPUSH
15925: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
15929: LD_VAR 0 5
15933: PUSH
15934: LD_INT 1
15936: ARRAY
15937: PPUSH
15938: LD_EXP 40
15942: PUSH
15943: LD_VAR 0 2
15947: ARRAY
15948: PPUSH
15949: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
15953: LD_ADDR_VAR 0 5
15957: PUSH
15958: LD_VAR 0 5
15962: PPUSH
15963: LD_INT 1
15965: PPUSH
15966: CALL_OW 3
15970: ST_TO_ADDR
// end else
15971: GO 15994
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
15973: LD_EXP 40
15977: PUSH
15978: LD_VAR 0 2
15982: ARRAY
15983: PPUSH
15984: LD_INT 5
15986: PPUSH
15987: LD_INT 0
15989: PPUSH
15990: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
15994: LD_EXP 40
15998: PUSH
15999: LD_VAR 0 2
16003: ARRAY
16004: PPUSH
16005: LD_INT 165
16007: PPUSH
16008: LD_INT 105
16010: PPUSH
16011: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16015: LD_INT 70
16017: PPUSH
16018: LD_INT 140
16020: PPUSH
16021: CALL_OW 12
16025: PPUSH
16026: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16030: LD_EXP 40
16034: PUSH
16035: LD_VAR 0 2
16039: ARRAY
16040: PPUSH
16041: LD_INT 1
16043: PPUSH
16044: CALL_OW 235
// if i = 1 then
16048: LD_VAR 0 2
16052: PUSH
16053: LD_INT 1
16055: EQUAL
16056: IFFALSE 16068
// CenterNowOnXY ( 168 , 109 ) ;
16058: LD_INT 168
16060: PPUSH
16061: LD_INT 109
16063: PPUSH
16064: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16068: LD_EXP 40
16072: PUSH
16073: LD_VAR 0 2
16077: ARRAY
16078: PPUSH
16079: CALL_OW 141
// end ;
16083: GO 15821
16085: POP
16086: POP
// end ;
16087: PPOPN 5
16089: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16090: LD_EXP 30
16094: IFFALSE 17123
16096: GO 16098
16098: DISABLE
16099: LD_INT 0
16101: PPUSH
16102: PPUSH
// begin Wait ( 5 5$00 ) ;
16103: LD_INT 10500
16105: PPUSH
16106: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16110: LD_OWVAR 67
16114: PPUSH
16115: CALL 12603 0 1
// to_veh := [ ] ;
16119: LD_ADDR_VAR 0 2
16123: PUSH
16124: EMPTY
16125: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16126: LD_ADDR_VAR 0 1
16130: PUSH
16131: DOUBLE
16132: LD_INT 1
16134: DEC
16135: ST_TO_ADDR
16136: LD_EXP 41
16140: PUSH
16141: FOR_TO
16142: IFFALSE 16370
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16144: LD_EXP 41
16148: PUSH
16149: LD_VAR 0 1
16153: ARRAY
16154: PPUSH
16155: CALL_OW 110
16159: PUSH
16160: LD_INT 3
16162: EQUAL
16163: IFFALSE 16189
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16165: LD_ADDR_VAR 0 2
16169: PUSH
16170: LD_VAR 0 2
16174: PUSH
16175: LD_EXP 41
16179: PUSH
16180: LD_VAR 0 1
16184: ARRAY
16185: ADD
16186: ST_TO_ADDR
16187: GO 16314
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16189: LD_EXP 41
16193: PUSH
16194: LD_VAR 0 1
16198: ARRAY
16199: PPUSH
16200: CALL_OW 110
16204: PUSH
16205: LD_INT 5
16207: EQUAL
16208: IFFALSE 16293
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16210: LD_EXP 41
16214: PUSH
16215: LD_VAR 0 1
16219: ARRAY
16220: PPUSH
16221: LD_INT 4
16223: PPUSH
16224: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16228: LD_EXP 41
16232: PUSH
16233: LD_VAR 0 1
16237: ARRAY
16238: PPUSH
16239: LD_INT 5
16241: PPUSH
16242: LD_INT 0
16244: PPUSH
16245: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16249: LD_VAR 0 2
16253: PUSH
16254: LD_INT 1
16256: ARRAY
16257: PPUSH
16258: LD_EXP 41
16262: PUSH
16263: LD_VAR 0 1
16267: ARRAY
16268: PPUSH
16269: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16273: LD_ADDR_VAR 0 2
16277: PUSH
16278: LD_VAR 0 2
16282: PPUSH
16283: LD_INT 1
16285: PPUSH
16286: CALL_OW 3
16290: ST_TO_ADDR
// end else
16291: GO 16314
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16293: LD_EXP 41
16297: PUSH
16298: LD_VAR 0 1
16302: ARRAY
16303: PPUSH
16304: LD_INT 5
16306: PPUSH
16307: LD_INT 0
16309: PPUSH
16310: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16314: LD_EXP 41
16318: PUSH
16319: LD_VAR 0 1
16323: ARRAY
16324: PPUSH
16325: LD_INT 164
16327: PPUSH
16328: LD_INT 104
16330: PPUSH
16331: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16335: LD_INT 70
16337: PPUSH
16338: LD_INT 140
16340: PPUSH
16341: CALL_OW 12
16345: PPUSH
16346: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16350: LD_EXP 41
16354: PUSH
16355: LD_VAR 0 1
16359: ARRAY
16360: PPUSH
16361: LD_INT 1
16363: PPUSH
16364: CALL_OW 235
// end ;
16368: GO 16141
16370: POP
16371: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16372: LD_EXP 41
16376: PUSH
16377: LD_INT 1
16379: ARRAY
16380: PPUSH
16381: LD_STRING D3-A-1
16383: PPUSH
16384: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16388: LD_INT 1
16390: PPUSH
16391: CALL 10013 0 1
16395: PUSH
16396: LD_INT 1
16398: ARRAY
16399: PPUSH
16400: LD_STRING D3-B-1
16402: PPUSH
16403: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16407: LD_EXP 41
16411: PUSH
16412: LD_INT 1
16414: ARRAY
16415: PPUSH
16416: LD_STRING D3-A-2
16418: PPUSH
16419: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16423: LD_INT 1
16425: PPUSH
16426: CALL 10013 0 1
16430: PUSH
16431: LD_INT 1
16433: ARRAY
16434: PPUSH
16435: LD_STRING D3-B-2
16437: PPUSH
16438: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16442: LD_EXP 41
16446: PUSH
16447: LD_INT 1
16449: ARRAY
16450: PPUSH
16451: LD_STRING D3-A-3
16453: PPUSH
16454: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16458: LD_INT 1
16460: PPUSH
16461: CALL 10013 0 1
16465: PUSH
16466: LD_INT 1
16468: ARRAY
16469: PPUSH
16470: LD_STRING D3-B-3
16472: PPUSH
16473: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16477: LD_EXP 41
16481: PUSH
16482: LD_INT 1
16484: ARRAY
16485: PPUSH
16486: LD_STRING D3-A-4
16488: PPUSH
16489: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16493: LD_INT 1
16495: PPUSH
16496: CALL 10013 0 1
16500: PUSH
16501: LD_INT 1
16503: ARRAY
16504: PPUSH
16505: LD_STRING D3-B-4
16507: PPUSH
16508: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16512: LD_EXP 41
16516: PUSH
16517: LD_INT 1
16519: ARRAY
16520: PPUSH
16521: LD_STRING D3-A-5
16523: PPUSH
16524: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16528: LD_INT 1
16530: PPUSH
16531: CALL 10013 0 1
16535: PUSH
16536: LD_INT 1
16538: ARRAY
16539: PPUSH
16540: LD_STRING D3-B-5
16542: PPUSH
16543: CALL_OW 88
// for i = 1 to Gamma_Squad do
16547: LD_ADDR_VAR 0 1
16551: PUSH
16552: DOUBLE
16553: LD_INT 1
16555: DEC
16556: ST_TO_ADDR
16557: LD_EXP 41
16561: PUSH
16562: FOR_TO
16563: IFFALSE 16585
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16565: LD_EXP 41
16569: PUSH
16570: LD_VAR 0 1
16574: ARRAY
16575: PPUSH
16576: LD_INT 1
16578: PPUSH
16579: CALL_OW 235
16583: GO 16562
16585: POP
16586: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16587: LD_INT 6300
16589: PUSH
16590: LD_INT 10500
16592: PUSH
16593: LD_INT 11550
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: LIST
16600: PUSH
16601: LD_OWVAR 67
16605: ARRAY
16606: PPUSH
16607: CALL_OW 67
// AddZetaSquad ;
16611: CALL 13332 0 0
// Wait ( 0 0$10 ) ;
16615: LD_INT 350
16617: PPUSH
16618: CALL_OW 67
// to_veh := [ ] ;
16622: LD_ADDR_VAR 0 2
16626: PUSH
16627: EMPTY
16628: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16629: LD_ADDR_VAR 0 1
16633: PUSH
16634: DOUBLE
16635: LD_INT 1
16637: DEC
16638: ST_TO_ADDR
16639: LD_EXP 42
16643: PUSH
16644: FOR_TO
16645: IFFALSE 16855
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16647: LD_EXP 42
16651: PUSH
16652: LD_VAR 0 1
16656: ARRAY
16657: PPUSH
16658: CALL_OW 110
16662: PUSH
16663: LD_INT 3
16665: EQUAL
16666: IFFALSE 16692
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16668: LD_ADDR_VAR 0 2
16672: PUSH
16673: LD_VAR 0 2
16677: PUSH
16678: LD_EXP 42
16682: PUSH
16683: LD_VAR 0 1
16687: ARRAY
16688: ADD
16689: ST_TO_ADDR
16690: GO 16817
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16692: LD_EXP 42
16696: PUSH
16697: LD_VAR 0 1
16701: ARRAY
16702: PPUSH
16703: CALL_OW 110
16707: PUSH
16708: LD_INT 5
16710: EQUAL
16711: IFFALSE 16796
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16713: LD_EXP 42
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_INT 4
16726: PPUSH
16727: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16731: LD_EXP 42
16735: PUSH
16736: LD_VAR 0 1
16740: ARRAY
16741: PPUSH
16742: LD_INT 5
16744: PPUSH
16745: LD_INT 0
16747: PPUSH
16748: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16752: LD_VAR 0 2
16756: PUSH
16757: LD_INT 1
16759: ARRAY
16760: PPUSH
16761: LD_EXP 42
16765: PUSH
16766: LD_VAR 0 1
16770: ARRAY
16771: PPUSH
16772: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16776: LD_ADDR_VAR 0 2
16780: PUSH
16781: LD_VAR 0 2
16785: PPUSH
16786: LD_INT 1
16788: PPUSH
16789: CALL_OW 3
16793: ST_TO_ADDR
// end else
16794: GO 16817
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16796: LD_EXP 42
16800: PUSH
16801: LD_VAR 0 1
16805: ARRAY
16806: PPUSH
16807: LD_INT 5
16809: PPUSH
16810: LD_INT 0
16812: PPUSH
16813: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16817: LD_EXP 42
16821: PUSH
16822: LD_VAR 0 1
16826: ARRAY
16827: PPUSH
16828: LD_INT 165
16830: PPUSH
16831: LD_INT 105
16833: PPUSH
16834: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16838: LD_INT 70
16840: PPUSH
16841: LD_INT 140
16843: PPUSH
16844: CALL_OW 12
16848: PPUSH
16849: CALL_OW 67
// end ;
16853: GO 16644
16855: POP
16856: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16857: LD_EXP 42
16861: PUSH
16862: LD_INT 1
16864: ARRAY
16865: PPUSH
16866: LD_STRING D4-A-1
16868: PPUSH
16869: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
16873: LD_INT 1
16875: PPUSH
16876: CALL 10013 0 1
16880: PUSH
16881: LD_INT 1
16883: ARRAY
16884: PPUSH
16885: LD_STRING D4-B-1
16887: PPUSH
16888: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
16892: LD_EXP 42
16896: PUSH
16897: LD_INT 1
16899: ARRAY
16900: PPUSH
16901: LD_STRING D4-A-2
16903: PPUSH
16904: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
16908: LD_INT 1
16910: PPUSH
16911: CALL 10013 0 1
16915: PUSH
16916: LD_INT 1
16918: ARRAY
16919: PPUSH
16920: LD_STRING D4-B-2
16922: PPUSH
16923: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
16927: LD_EXP 42
16931: PUSH
16932: LD_INT 1
16934: ARRAY
16935: PPUSH
16936: LD_STRING D4-A-3
16938: PPUSH
16939: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
16943: LD_INT 1
16945: PPUSH
16946: CALL 10013 0 1
16950: PUSH
16951: LD_INT 1
16953: ARRAY
16954: PPUSH
16955: LD_STRING D4-B-3
16957: PPUSH
16958: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
16962: LD_EXP 42
16966: PUSH
16967: LD_INT 1
16969: ARRAY
16970: PPUSH
16971: LD_STRING D4-A-4
16973: PPUSH
16974: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
16978: LD_INT 1
16980: PPUSH
16981: CALL 10013 0 1
16985: PUSH
16986: LD_INT 1
16988: ARRAY
16989: PPUSH
16990: LD_STRING D4-B-4
16992: PPUSH
16993: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
16997: LD_EXP 42
17001: PUSH
17002: LD_INT 1
17004: ARRAY
17005: PPUSH
17006: LD_STRING D4-A-5
17008: PPUSH
17009: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
17013: LD_INT 1
17015: PPUSH
17016: CALL 10013 0 1
17020: PUSH
17021: LD_INT 1
17023: ARRAY
17024: PPUSH
17025: LD_STRING D4-B-5
17027: PPUSH
17028: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17032: LD_EXP 42
17036: PUSH
17037: LD_INT 1
17039: ARRAY
17040: PPUSH
17041: LD_STRING D4-A-6
17043: PPUSH
17044: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17048: LD_INT 1
17050: PPUSH
17051: CALL 10013 0 1
17055: PUSH
17056: LD_INT 1
17058: ARRAY
17059: PPUSH
17060: LD_STRING D4-B-6
17062: PPUSH
17063: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17067: LD_EXP 42
17071: PUSH
17072: LD_INT 1
17074: ARRAY
17075: PPUSH
17076: LD_STRING D4-A-7
17078: PPUSH
17079: CALL_OW 94
// for i = 1 to Zeta_Squad do
17083: LD_ADDR_VAR 0 1
17087: PUSH
17088: DOUBLE
17089: LD_INT 1
17091: DEC
17092: ST_TO_ADDR
17093: LD_EXP 42
17097: PUSH
17098: FOR_TO
17099: IFFALSE 17121
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17101: LD_EXP 42
17105: PUSH
17106: LD_VAR 0 1
17110: ARRAY
17111: PPUSH
17112: LD_INT 1
17114: PPUSH
17115: CALL_OW 235
17119: GO 17098
17121: POP
17122: POP
// end ;
17123: PPOPN 2
17125: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17126: LD_INT 11
17128: PPUSH
17129: LD_INT 22
17131: PUSH
17132: LD_OWVAR 2
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PPUSH
17141: CALL_OW 70
17145: PUSH
17146: LD_INT 0
17148: GREATER
17149: IFFALSE 17174
17151: GO 17153
17153: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17154: LD_EXP 38
17158: PPUSH
17159: LD_STRING D10-A-1
17161: PPUSH
17162: CALL_OW 88
// ru_spotted := true ;
17166: LD_ADDR_EXP 16
17170: PUSH
17171: LD_INT 1
17173: ST_TO_ADDR
// end ;
17174: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17175: LD_EXP 38
17179: PPUSH
17180: CALL_OW 301
17184: PUSH
17185: LD_EXP 39
17189: PPUSH
17190: CALL_OW 301
17194: OR
17195: IFFALSE 17207
17197: GO 17199
17199: DISABLE
// begin YouLost ( DieP ) ;
17200: LD_STRING DieP
17202: PPUSH
17203: CALL_OW 104
// end ;
17207: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17208: LD_INT 34
17210: PUSH
17211: LD_INT 8
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PPUSH
17218: CALL_OW 69
17222: IFFALSE 17235
17224: GO 17226
17226: DISABLE
// sib_bomb_constructed := true ;
17227: LD_ADDR_EXP 36
17231: PUSH
17232: LD_INT 1
17234: ST_TO_ADDR
17235: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17236: LD_EXP 29
17240: PUSH
17241: LD_INT 22
17243: PUSH
17244: LD_INT 3
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PPUSH
17251: CALL_OW 69
17255: PUSH
17256: LD_INT 0
17258: EQUAL
17259: AND
17260: IFFALSE 17463
17262: GO 17264
17264: DISABLE
17265: LD_INT 0
17267: PPUSH
// begin game_status := false ;
17268: LD_ADDR_EXP 29
17272: PUSH
17273: LD_INT 0
17275: ST_TO_ADDR
// if not depotConstructed then
17276: LD_EXP 2
17280: NOT
17281: IFFALSE 17290
// SetAchievement ( ACH_NODEPOT ) ;
17283: LD_STRING ACH_NODEPOT
17285: PPUSH
17286: CALL_OW 543
// if Difficulty = 3 then
17290: LD_OWVAR 67
17294: PUSH
17295: LD_INT 3
17297: EQUAL
17298: IFFALSE 17307
// SetAchievement ( ACH_HARD ) ;
17300: LD_STRING ACH_HARD
17302: PPUSH
17303: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17307: LD_OWVAR 1
17311: PUSH
17312: LD_INT 35
17314: DIVREAL
17315: PUSH
17316: LD_INT 60
17318: DIVREAL
17319: PUSH
17320: LD_INT 70
17322: PUSH
17323: LD_INT 60
17325: PUSH
17326: LD_INT 50
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: PUSH
17334: LD_OWVAR 67
17338: ARRAY
17339: LESS
17340: IFFALSE 17354
// AddMedal ( play , 1 ) else
17342: LD_STRING play
17344: PPUSH
17345: LD_INT 1
17347: PPUSH
17348: CALL_OW 101
17352: GO 17365
// AddMedal ( play , - 1 ) ;
17354: LD_STRING play
17356: PPUSH
17357: LD_INT 1
17359: NEG
17360: PPUSH
17361: CALL_OW 101
// if sib_bomb_constructed then
17365: LD_EXP 36
17369: IFFALSE 17383
// AddMedal ( sibbomb , 1 ) else
17371: LD_STRING sibbomb
17373: PPUSH
17374: LD_INT 1
17376: PPUSH
17377: CALL_OW 101
17381: GO 17394
// AddMedal ( sibbomb , - 1 ) ;
17383: LD_STRING sibbomb
17385: PPUSH
17386: LD_INT 1
17388: NEG
17389: PPUSH
17390: CALL_OW 101
// if mine_constructed and not mine_ck then
17394: LD_EXP 37
17398: PUSH
17399: LD_EXP 35
17403: NOT
17404: AND
17405: IFFALSE 17417
// AddMedal ( mine , 1 ) ;
17407: LD_STRING mine
17409: PPUSH
17410: LD_INT 1
17412: PPUSH
17413: CALL_OW 101
// if mine_ck then
17417: LD_EXP 35
17421: IFFALSE 17434
// AddMedal ( mine , - 1 ) ;
17423: LD_STRING mine
17425: PPUSH
17426: LD_INT 1
17428: NEG
17429: PPUSH
17430: CALL_OW 101
// if not mine_constructed then
17434: LD_EXP 37
17438: NOT
17439: IFFALSE 17452
// AddMedal ( mine , - 2 ) ;
17441: LD_STRING mine
17443: PPUSH
17444: LD_INT 2
17446: NEG
17447: PPUSH
17448: CALL_OW 101
// GiveMedals ( Main ) ;
17452: LD_STRING Main
17454: PPUSH
17455: CALL_OW 102
// YouWin ;
17459: CALL_OW 103
// end ; end_of_file
17463: PPOPN 1
17465: END
// every 0 0$03 trigger game_status do var time ;
17466: LD_EXP 29
17470: IFFALSE 17635
17472: GO 17474
17474: DISABLE
17475: LD_INT 0
17477: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17478: LD_ADDR_VAR 0 1
17482: PUSH
17483: LD_INT 1050
17485: PUSH
17486: LD_INT 1575
17488: PUSH
17489: LD_INT 2100
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: LD_OWVAR 67
17501: ARRAY
17502: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17503: LD_VAR 0 1
17507: PUSH
17508: LD_INT 0
17510: PPUSH
17511: LD_INT 420
17513: PPUSH
17514: CALL_OW 12
17518: PLUS
17519: PPUSH
17520: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17524: LD_INT 1
17526: PPUSH
17527: LD_INT 5
17529: PPUSH
17530: CALL_OW 12
17534: PPUSH
17535: LD_INT 1
17537: PPUSH
17538: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17542: LD_INT 105
17544: PPUSH
17545: LD_INT 1050
17547: PPUSH
17548: CALL_OW 12
17552: PPUSH
17553: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17557: LD_INT 1
17559: PPUSH
17560: LD_INT 5
17562: PPUSH
17563: CALL_OW 12
17567: PPUSH
17568: LD_INT 148
17570: PPUSH
17571: LD_INT 107
17573: PPUSH
17574: LD_INT 20
17576: PPUSH
17577: LD_INT 1
17579: PPUSH
17580: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17584: LD_OWVAR 1
17588: PUSH
17589: LD_INT 44100
17591: PUSH
17592: LD_INT 37800
17594: PUSH
17595: LD_INT 33600
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: LIST
17602: PUSH
17603: LD_OWVAR 67
17607: ARRAY
17608: MOD
17609: IFFALSE 17625
// time := time + 0 0$20 ;
17611: LD_ADDR_VAR 0 1
17615: PUSH
17616: LD_VAR 0 1
17620: PUSH
17621: LD_INT 700
17623: PLUS
17624: ST_TO_ADDR
// end until game_status = false ;
17625: LD_EXP 29
17629: PUSH
17630: LD_INT 0
17632: EQUAL
17633: IFFALSE 17503
// end ;
17635: PPOPN 1
17637: END
// every 0 0$03 trigger game_status do var time ;
17638: LD_EXP 29
17642: IFFALSE 17796
17644: GO 17646
17646: DISABLE
17647: LD_INT 0
17649: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17650: LD_ADDR_VAR 0 1
17654: PUSH
17655: LD_INT 700
17657: PUSH
17658: LD_INT 875
17660: PUSH
17661: LD_INT 1400
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: PUSH
17669: LD_OWVAR 67
17673: ARRAY
17674: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17675: LD_VAR 0 1
17679: PUSH
17680: LD_INT 0
17682: PPUSH
17683: LD_INT 385
17685: PPUSH
17686: CALL_OW 12
17690: PLUS
17691: PPUSH
17692: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17696: LD_INT 1
17698: PPUSH
17699: LD_INT 5
17701: PPUSH
17702: CALL_OW 12
17706: PPUSH
17707: LD_INT 102
17709: PPUSH
17710: LD_INT 6
17712: PPUSH
17713: LD_INT 25
17715: PPUSH
17716: LD_INT 1
17718: PPUSH
17719: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17723: LD_OWVAR 1
17727: PUSH
17728: LD_INT 52500
17730: PUSH
17731: LD_INT 46200
17733: PUSH
17734: LD_INT 42000
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: LIST
17741: PUSH
17742: LD_OWVAR 67
17746: ARRAY
17747: MOD
17748: IFFALSE 17764
// time := time + 0 0$25 ;
17750: LD_ADDR_VAR 0 1
17754: PUSH
17755: LD_VAR 0 1
17759: PUSH
17760: LD_INT 875
17762: PLUS
17763: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17764: LD_OWVAR 1
17768: PUSH
17769: LD_INT 231000
17771: MOD
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: IFFALSE 17786
// time := 0 0$30 ;
17778: LD_ADDR_VAR 0 1
17782: PUSH
17783: LD_INT 1050
17785: ST_TO_ADDR
// end until game_status = false ;
17786: LD_EXP 29
17790: PUSH
17791: LD_INT 0
17793: EQUAL
17794: IFFALSE 17675
// end ;
17796: PPOPN 1
17798: END
// every 0 0$03 trigger game_status do var time ;
17799: LD_EXP 29
17803: IFFALSE 17939
17805: GO 17807
17807: DISABLE
17808: LD_INT 0
17810: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17811: LD_ADDR_VAR 0 1
17815: PUSH
17816: LD_INT 1050
17818: PUSH
17819: LD_INT 1575
17821: PUSH
17822: LD_INT 1750
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: PUSH
17830: LD_OWVAR 67
17834: ARRAY
17835: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17836: LD_VAR 0 1
17840: PUSH
17841: LD_INT 0
17843: PPUSH
17844: LD_INT 385
17846: PPUSH
17847: CALL_OW 12
17851: PLUS
17852: PPUSH
17853: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17857: LD_INT 1
17859: PPUSH
17860: LD_INT 5
17862: PPUSH
17863: CALL_OW 12
17867: PPUSH
17868: LD_INT 51
17870: PPUSH
17871: LD_INT 74
17873: PPUSH
17874: LD_INT 25
17876: PPUSH
17877: LD_INT 1
17879: PPUSH
17880: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
17884: LD_OWVAR 1
17888: PUSH
17889: LD_INT 84000
17891: PUSH
17892: LD_INT 105000
17894: PUSH
17895: LD_INT 136500
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: PUSH
17903: LD_OWVAR 67
17907: ARRAY
17908: MOD
17909: PUSH
17910: LD_INT 0
17912: EQUAL
17913: IFFALSE 17929
// time := time + 0 0$15 ;
17915: LD_ADDR_VAR 0 1
17919: PUSH
17920: LD_VAR 0 1
17924: PUSH
17925: LD_INT 525
17927: PLUS
17928: ST_TO_ADDR
// end until game_status = false ;
17929: LD_EXP 29
17933: PUSH
17934: LD_INT 0
17936: EQUAL
17937: IFFALSE 17836
// end ; end_of_file
17939: PPOPN 1
17941: END
// every 0 0$01 trigger not debug do
17942: LD_EXP 1
17946: NOT
17947: IFFALSE 17970
17949: GO 17951
17951: DISABLE
// begin enable ;
17952: ENABLE
// Display_Strings := [ #tick , tick ] ;
17953: LD_ADDR_OWVAR 47
17957: PUSH
17958: LD_STRING #tick
17960: PUSH
17961: LD_OWVAR 1
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: ST_TO_ADDR
// end ; end_of_file
17970: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
17971: LD_VAR 0 1
17975: PPUSH
17976: CALL_OW 255
17980: PUSH
17981: LD_INT 3
17983: EQUAL
17984: PUSH
17985: LD_VAR 0 1
17989: PUSH
17990: LD_INT 2
17992: PUSH
17993: LD_INT 34
17995: PUSH
17996: LD_INT 46
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 34
18005: PUSH
18006: LD_INT 47
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 34
18015: PUSH
18016: LD_INT 45
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: PUSH
18029: EMPTY
18030: LIST
18031: PPUSH
18032: CALL_OW 69
18036: IN
18037: AND
18038: IFFALSE 18056
// ru_reserve := ru_reserve ^ un ;
18040: LD_ADDR_EXP 9
18044: PUSH
18045: LD_EXP 9
18049: PUSH
18050: LD_VAR 0 1
18054: ADD
18055: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18056: LD_VAR 0 1
18060: PUSH
18061: LD_INT 22
18063: PUSH
18064: LD_INT 3
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 34
18073: PUSH
18074: LD_INT 48
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PPUSH
18085: CALL_OW 69
18089: IN
18090: IFFALSE 18143
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18092: LD_INT 12
18094: PPUSH
18095: LD_INT 22
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PPUSH
18105: CALL_OW 70
18109: IFFALSE 18128
// ComAttackPlace ( un , 98 , 10 ) else
18111: LD_VAR 0 1
18115: PPUSH
18116: LD_INT 98
18118: PPUSH
18119: LD_INT 10
18121: PPUSH
18122: CALL_OW 116
18126: GO 18143
// ComAttackPlace ( un , 134 , 99 ) ;
18128: LD_VAR 0 1
18132: PPUSH
18133: LD_INT 134
18135: PPUSH
18136: LD_INT 99
18138: PPUSH
18139: CALL_OW 116
// end ;
18143: PPOPN 2
18145: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18146: LD_VAR 0 1
18150: PPUSH
18151: CALL 32007 0 1
// if GetChassis ( un ) = 25 then
18155: LD_VAR 0 1
18159: PPUSH
18160: CALL_OW 265
18164: PUSH
18165: LD_INT 25
18167: EQUAL
18168: IFFALSE 18177
// SetAchievement ( ACH_BEH ) ;
18170: LD_STRING ACH_BEH
18172: PPUSH
18173: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18177: LD_VAR 0 1
18181: PUSH
18182: LD_INT 22
18184: PUSH
18185: LD_INT 3
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 21
18194: PUSH
18195: LD_INT 3
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PPUSH
18206: CALL_OW 69
18210: IN
18211: PUSH
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 266
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: LD_INT 29
18227: PUSH
18228: LD_INT 30
18230: PUSH
18231: LD_INT 26
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: IN
18240: NOT
18241: AND
18242: IFFALSE 18328
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18244: LD_ADDR_EXP 13
18248: PUSH
18249: LD_EXP 13
18253: PUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 266
18263: ADD
18264: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18265: LD_ADDR_EXP 13
18269: PUSH
18270: LD_EXP 13
18274: PUSH
18275: LD_VAR 0 1
18279: PPUSH
18280: CALL_OW 250
18284: ADD
18285: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18286: LD_ADDR_EXP 13
18290: PUSH
18291: LD_EXP 13
18295: PUSH
18296: LD_VAR 0 1
18300: PPUSH
18301: CALL_OW 251
18305: ADD
18306: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18307: LD_ADDR_EXP 13
18311: PUSH
18312: LD_EXP 13
18316: PUSH
18317: LD_VAR 0 1
18321: PPUSH
18322: CALL_OW 254
18326: ADD
18327: ST_TO_ADDR
// end ; if un in ru_attack_list then
18328: LD_VAR 0 1
18332: PUSH
18333: LD_EXP 10
18337: IN
18338: IFFALSE 18356
// ru_attack_list := ru_attack_list diff un ;
18340: LD_ADDR_EXP 10
18344: PUSH
18345: LD_EXP 10
18349: PUSH
18350: LD_VAR 0 1
18354: DIFF
18355: ST_TO_ADDR
// if un in ru_protector then
18356: LD_VAR 0 1
18360: PUSH
18361: LD_EXP 17
18365: IN
18366: IFFALSE 18384
// ru_protector := ru_protector diff un ;
18368: LD_ADDR_EXP 17
18372: PUSH
18373: LD_EXP 17
18377: PUSH
18378: LD_VAR 0 1
18382: DIFF
18383: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18384: LD_VAR 0 1
18388: PPUSH
18389: CALL_OW 266
18393: PUSH
18394: LD_INT 30
18396: EQUAL
18397: PUSH
18398: LD_VAR 0 1
18402: PPUSH
18403: CALL_OW 255
18407: PUSH
18408: LD_INT 1
18410: EQUAL
18411: AND
18412: IFFALSE 18422
// mine_ck := true ;
18414: LD_ADDR_EXP 35
18418: PUSH
18419: LD_INT 1
18421: ST_TO_ADDR
// end ;
18422: PPOPN 1
18424: END
// on BuildingComplete ( un ) do var i ;
18425: LD_INT 0
18427: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18428: LD_VAR 0 1
18432: PPUSH
18433: CALL_OW 255
18437: PUSH
18438: LD_INT 1
18440: EQUAL
18441: PUSH
18442: LD_VAR 0 1
18446: PPUSH
18447: CALL_OW 266
18451: PUSH
18452: LD_INT 0
18454: EQUAL
18455: AND
18456: IFFALSE 18466
// depotConstructed := true ;
18458: LD_ADDR_EXP 2
18462: PUSH
18463: LD_INT 1
18465: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18466: LD_VAR 0 1
18470: PPUSH
18471: CALL_OW 255
18475: PUSH
18476: LD_INT 1
18478: EQUAL
18479: PUSH
18480: LD_VAR 0 1
18484: PPUSH
18485: CALL_OW 266
18489: PUSH
18490: LD_INT 30
18492: EQUAL
18493: AND
18494: IFFALSE 18504
// mine_constructed := true ;
18496: LD_ADDR_EXP 37
18500: PUSH
18501: LD_INT 1
18503: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 255
18513: PUSH
18514: LD_INT 3
18516: EQUAL
18517: PUSH
18518: LD_VAR 0 1
18522: PPUSH
18523: CALL_OW 266
18527: PUSH
18528: LD_INT 0
18530: EQUAL
18531: AND
18532: IFFALSE 18589
// begin for i = 1 to 2 do
18534: LD_ADDR_VAR 0 2
18538: PUSH
18539: DOUBLE
18540: LD_INT 1
18542: DEC
18543: ST_TO_ADDR
18544: LD_INT 2
18546: PUSH
18547: FOR_TO
18548: IFFALSE 18587
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18550: LD_EXP 20
18554: PUSH
18555: LD_VAR 0 2
18559: ARRAY
18560: PPUSH
18561: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18565: LD_EXP 20
18569: PUSH
18570: LD_VAR 0 2
18574: ARRAY
18575: PPUSH
18576: LD_VAR 0 1
18580: PPUSH
18581: CALL_OW 180
// end ;
18585: GO 18547
18587: POP
18588: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18589: LD_VAR 0 1
18593: PPUSH
18594: CALL_OW 255
18598: PUSH
18599: LD_INT 3
18601: EQUAL
18602: PUSH
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 266
18612: PUSH
18613: LD_EXP 13
18617: IN
18618: AND
18619: IFFALSE 18659
// for i = 1 to 4 do
18621: LD_ADDR_VAR 0 2
18625: PUSH
18626: DOUBLE
18627: LD_INT 1
18629: DEC
18630: ST_TO_ADDR
18631: LD_INT 4
18633: PUSH
18634: FOR_TO
18635: IFFALSE 18657
// ru_blist := Delete ( ru_blist , 1 ) ;
18637: LD_ADDR_EXP 13
18641: PUSH
18642: LD_EXP 13
18646: PPUSH
18647: LD_INT 1
18649: PPUSH
18650: CALL_OW 3
18654: ST_TO_ADDR
18655: GO 18634
18657: POP
18658: POP
// end ;
18659: PPOPN 2
18661: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18662: LD_VAR 0 1
18666: PPUSH
18667: LD_VAR 0 2
18671: PPUSH
18672: LD_VAR 0 3
18676: PPUSH
18677: CALL 32105 0 3
// end ;
18681: PPOPN 3
18683: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18684: LD_VAR 0 1
18688: PPUSH
18689: CALL 32113 0 1
// end ; end_of_file
18693: PPOPN 1
18695: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
18696: LD_INT 0
18698: PPUSH
// ar_miner := 81 ;
18699: LD_ADDR_EXP 50
18703: PUSH
18704: LD_INT 81
18706: ST_TO_ADDR
// ar_crane := 88 ;
18707: LD_ADDR_EXP 49
18711: PUSH
18712: LD_INT 88
18714: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18715: LD_ADDR_EXP 44
18719: PUSH
18720: LD_INT 89
18722: ST_TO_ADDR
// us_hack := 99 ;
18723: LD_ADDR_EXP 45
18727: PUSH
18728: LD_INT 99
18730: ST_TO_ADDR
// us_artillery := 97 ;
18731: LD_ADDR_EXP 46
18735: PUSH
18736: LD_INT 97
18738: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18739: LD_ADDR_EXP 47
18743: PUSH
18744: LD_INT 91
18746: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
18747: LD_ADDR_EXP 48
18751: PUSH
18752: LD_INT 92
18754: ST_TO_ADDR
// ru_radar := 98 ;
18755: LD_ADDR_EXP 43
18759: PUSH
18760: LD_INT 98
18762: ST_TO_ADDR
// tech_Artillery := 80 ;
18763: LD_ADDR_EXP 51
18767: PUSH
18768: LD_INT 80
18770: ST_TO_ADDR
// tech_RadMat := 81 ;
18771: LD_ADDR_EXP 52
18775: PUSH
18776: LD_INT 81
18778: ST_TO_ADDR
// tech_BasicTools := 82 ;
18779: LD_ADDR_EXP 53
18783: PUSH
18784: LD_INT 82
18786: ST_TO_ADDR
// tech_Cargo := 83 ;
18787: LD_ADDR_EXP 54
18791: PUSH
18792: LD_INT 83
18794: ST_TO_ADDR
// tech_Track := 84 ;
18795: LD_ADDR_EXP 55
18799: PUSH
18800: LD_INT 84
18802: ST_TO_ADDR
// tech_Crane := 85 ;
18803: LD_ADDR_EXP 56
18807: PUSH
18808: LD_INT 85
18810: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18811: LD_ADDR_EXP 57
18815: PUSH
18816: LD_INT 86
18818: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18819: LD_ADDR_EXP 58
18823: PUSH
18824: LD_INT 87
18826: ST_TO_ADDR
// end ;
18827: LD_VAR 0 1
18831: RET
// every 1 do
18832: GO 18834
18834: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18835: CALL 18696 0 0
18839: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
18840: LD_VAR 0 2
18844: PUSH
18845: LD_INT 100
18847: EQUAL
18848: IFFALSE 19797
// begin if not StreamModeActive then
18850: LD_EXP 59
18854: NOT
18855: IFFALSE 18865
// StreamModeActive := true ;
18857: LD_ADDR_EXP 59
18861: PUSH
18862: LD_INT 1
18864: ST_TO_ADDR
// if p3 = 0 then
18865: LD_VAR 0 3
18869: PUSH
18870: LD_INT 0
18872: EQUAL
18873: IFFALSE 18879
// InitStreamMode ;
18875: CALL 19955 0 0
// if p3 = 1 then
18879: LD_VAR 0 3
18883: PUSH
18884: LD_INT 1
18886: EQUAL
18887: IFFALSE 18897
// sRocket := true ;
18889: LD_ADDR_EXP 64
18893: PUSH
18894: LD_INT 1
18896: ST_TO_ADDR
// if p3 = 2 then
18897: LD_VAR 0 3
18901: PUSH
18902: LD_INT 2
18904: EQUAL
18905: IFFALSE 18915
// sSpeed := true ;
18907: LD_ADDR_EXP 63
18911: PUSH
18912: LD_INT 1
18914: ST_TO_ADDR
// if p3 = 3 then
18915: LD_VAR 0 3
18919: PUSH
18920: LD_INT 3
18922: EQUAL
18923: IFFALSE 18933
// sEngine := true ;
18925: LD_ADDR_EXP 65
18929: PUSH
18930: LD_INT 1
18932: ST_TO_ADDR
// if p3 = 4 then
18933: LD_VAR 0 3
18937: PUSH
18938: LD_INT 4
18940: EQUAL
18941: IFFALSE 18951
// sSpec := true ;
18943: LD_ADDR_EXP 62
18947: PUSH
18948: LD_INT 1
18950: ST_TO_ADDR
// if p3 = 5 then
18951: LD_VAR 0 3
18955: PUSH
18956: LD_INT 5
18958: EQUAL
18959: IFFALSE 18969
// sLevel := true ;
18961: LD_ADDR_EXP 66
18965: PUSH
18966: LD_INT 1
18968: ST_TO_ADDR
// if p3 = 6 then
18969: LD_VAR 0 3
18973: PUSH
18974: LD_INT 6
18976: EQUAL
18977: IFFALSE 18987
// sArmoury := true ;
18979: LD_ADDR_EXP 67
18983: PUSH
18984: LD_INT 1
18986: ST_TO_ADDR
// if p3 = 7 then
18987: LD_VAR 0 3
18991: PUSH
18992: LD_INT 7
18994: EQUAL
18995: IFFALSE 19005
// sRadar := true ;
18997: LD_ADDR_EXP 68
19001: PUSH
19002: LD_INT 1
19004: ST_TO_ADDR
// if p3 = 8 then
19005: LD_VAR 0 3
19009: PUSH
19010: LD_INT 8
19012: EQUAL
19013: IFFALSE 19023
// sBunker := true ;
19015: LD_ADDR_EXP 69
19019: PUSH
19020: LD_INT 1
19022: ST_TO_ADDR
// if p3 = 9 then
19023: LD_VAR 0 3
19027: PUSH
19028: LD_INT 9
19030: EQUAL
19031: IFFALSE 19041
// sHack := true ;
19033: LD_ADDR_EXP 70
19037: PUSH
19038: LD_INT 1
19040: ST_TO_ADDR
// if p3 = 10 then
19041: LD_VAR 0 3
19045: PUSH
19046: LD_INT 10
19048: EQUAL
19049: IFFALSE 19059
// sFire := true ;
19051: LD_ADDR_EXP 71
19055: PUSH
19056: LD_INT 1
19058: ST_TO_ADDR
// if p3 = 11 then
19059: LD_VAR 0 3
19063: PUSH
19064: LD_INT 11
19066: EQUAL
19067: IFFALSE 19077
// sRefresh := true ;
19069: LD_ADDR_EXP 72
19073: PUSH
19074: LD_INT 1
19076: ST_TO_ADDR
// if p3 = 12 then
19077: LD_VAR 0 3
19081: PUSH
19082: LD_INT 12
19084: EQUAL
19085: IFFALSE 19095
// sExp := true ;
19087: LD_ADDR_EXP 73
19091: PUSH
19092: LD_INT 1
19094: ST_TO_ADDR
// if p3 = 13 then
19095: LD_VAR 0 3
19099: PUSH
19100: LD_INT 13
19102: EQUAL
19103: IFFALSE 19113
// sDepot := true ;
19105: LD_ADDR_EXP 74
19109: PUSH
19110: LD_INT 1
19112: ST_TO_ADDR
// if p3 = 14 then
19113: LD_VAR 0 3
19117: PUSH
19118: LD_INT 14
19120: EQUAL
19121: IFFALSE 19131
// sFlag := true ;
19123: LD_ADDR_EXP 75
19127: PUSH
19128: LD_INT 1
19130: ST_TO_ADDR
// if p3 = 15 then
19131: LD_VAR 0 3
19135: PUSH
19136: LD_INT 15
19138: EQUAL
19139: IFFALSE 19149
// sKamikadze := true ;
19141: LD_ADDR_EXP 83
19145: PUSH
19146: LD_INT 1
19148: ST_TO_ADDR
// if p3 = 16 then
19149: LD_VAR 0 3
19153: PUSH
19154: LD_INT 16
19156: EQUAL
19157: IFFALSE 19167
// sTroll := true ;
19159: LD_ADDR_EXP 84
19163: PUSH
19164: LD_INT 1
19166: ST_TO_ADDR
// if p3 = 17 then
19167: LD_VAR 0 3
19171: PUSH
19172: LD_INT 17
19174: EQUAL
19175: IFFALSE 19185
// sSlow := true ;
19177: LD_ADDR_EXP 85
19181: PUSH
19182: LD_INT 1
19184: ST_TO_ADDR
// if p3 = 18 then
19185: LD_VAR 0 3
19189: PUSH
19190: LD_INT 18
19192: EQUAL
19193: IFFALSE 19203
// sLack := true ;
19195: LD_ADDR_EXP 86
19199: PUSH
19200: LD_INT 1
19202: ST_TO_ADDR
// if p3 = 19 then
19203: LD_VAR 0 3
19207: PUSH
19208: LD_INT 19
19210: EQUAL
19211: IFFALSE 19221
// sTank := true ;
19213: LD_ADDR_EXP 88
19217: PUSH
19218: LD_INT 1
19220: ST_TO_ADDR
// if p3 = 20 then
19221: LD_VAR 0 3
19225: PUSH
19226: LD_INT 20
19228: EQUAL
19229: IFFALSE 19239
// sRemote := true ;
19231: LD_ADDR_EXP 89
19235: PUSH
19236: LD_INT 1
19238: ST_TO_ADDR
// if p3 = 21 then
19239: LD_VAR 0 3
19243: PUSH
19244: LD_INT 21
19246: EQUAL
19247: IFFALSE 19257
// sPowell := true ;
19249: LD_ADDR_EXP 90
19253: PUSH
19254: LD_INT 1
19256: ST_TO_ADDR
// if p3 = 22 then
19257: LD_VAR 0 3
19261: PUSH
19262: LD_INT 22
19264: EQUAL
19265: IFFALSE 19275
// sTeleport := true ;
19267: LD_ADDR_EXP 93
19271: PUSH
19272: LD_INT 1
19274: ST_TO_ADDR
// if p3 = 23 then
19275: LD_VAR 0 3
19279: PUSH
19280: LD_INT 23
19282: EQUAL
19283: IFFALSE 19293
// sOilTower := true ;
19285: LD_ADDR_EXP 95
19289: PUSH
19290: LD_INT 1
19292: ST_TO_ADDR
// if p3 = 24 then
19293: LD_VAR 0 3
19297: PUSH
19298: LD_INT 24
19300: EQUAL
19301: IFFALSE 19311
// sShovel := true ;
19303: LD_ADDR_EXP 96
19307: PUSH
19308: LD_INT 1
19310: ST_TO_ADDR
// if p3 = 25 then
19311: LD_VAR 0 3
19315: PUSH
19316: LD_INT 25
19318: EQUAL
19319: IFFALSE 19329
// sSheik := true ;
19321: LD_ADDR_EXP 97
19325: PUSH
19326: LD_INT 1
19328: ST_TO_ADDR
// if p3 = 26 then
19329: LD_VAR 0 3
19333: PUSH
19334: LD_INT 26
19336: EQUAL
19337: IFFALSE 19347
// sEarthquake := true ;
19339: LD_ADDR_EXP 99
19343: PUSH
19344: LD_INT 1
19346: ST_TO_ADDR
// if p3 = 27 then
19347: LD_VAR 0 3
19351: PUSH
19352: LD_INT 27
19354: EQUAL
19355: IFFALSE 19365
// sAI := true ;
19357: LD_ADDR_EXP 100
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// if p3 = 28 then
19365: LD_VAR 0 3
19369: PUSH
19370: LD_INT 28
19372: EQUAL
19373: IFFALSE 19383
// sCargo := true ;
19375: LD_ADDR_EXP 103
19379: PUSH
19380: LD_INT 1
19382: ST_TO_ADDR
// if p3 = 29 then
19383: LD_VAR 0 3
19387: PUSH
19388: LD_INT 29
19390: EQUAL
19391: IFFALSE 19401
// sDLaser := true ;
19393: LD_ADDR_EXP 104
19397: PUSH
19398: LD_INT 1
19400: ST_TO_ADDR
// if p3 = 30 then
19401: LD_VAR 0 3
19405: PUSH
19406: LD_INT 30
19408: EQUAL
19409: IFFALSE 19419
// sExchange := true ;
19411: LD_ADDR_EXP 105
19415: PUSH
19416: LD_INT 1
19418: ST_TO_ADDR
// if p3 = 31 then
19419: LD_VAR 0 3
19423: PUSH
19424: LD_INT 31
19426: EQUAL
19427: IFFALSE 19437
// sFac := true ;
19429: LD_ADDR_EXP 106
19433: PUSH
19434: LD_INT 1
19436: ST_TO_ADDR
// if p3 = 32 then
19437: LD_VAR 0 3
19441: PUSH
19442: LD_INT 32
19444: EQUAL
19445: IFFALSE 19455
// sPower := true ;
19447: LD_ADDR_EXP 107
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// if p3 = 33 then
19455: LD_VAR 0 3
19459: PUSH
19460: LD_INT 33
19462: EQUAL
19463: IFFALSE 19473
// sRandom := true ;
19465: LD_ADDR_EXP 108
19469: PUSH
19470: LD_INT 1
19472: ST_TO_ADDR
// if p3 = 34 then
19473: LD_VAR 0 3
19477: PUSH
19478: LD_INT 34
19480: EQUAL
19481: IFFALSE 19491
// sShield := true ;
19483: LD_ADDR_EXP 109
19487: PUSH
19488: LD_INT 1
19490: ST_TO_ADDR
// if p3 = 35 then
19491: LD_VAR 0 3
19495: PUSH
19496: LD_INT 35
19498: EQUAL
19499: IFFALSE 19509
// sTime := true ;
19501: LD_ADDR_EXP 110
19505: PUSH
19506: LD_INT 1
19508: ST_TO_ADDR
// if p3 = 36 then
19509: LD_VAR 0 3
19513: PUSH
19514: LD_INT 36
19516: EQUAL
19517: IFFALSE 19527
// sTools := true ;
19519: LD_ADDR_EXP 111
19523: PUSH
19524: LD_INT 1
19526: ST_TO_ADDR
// if p3 = 101 then
19527: LD_VAR 0 3
19531: PUSH
19532: LD_INT 101
19534: EQUAL
19535: IFFALSE 19545
// sSold := true ;
19537: LD_ADDR_EXP 76
19541: PUSH
19542: LD_INT 1
19544: ST_TO_ADDR
// if p3 = 102 then
19545: LD_VAR 0 3
19549: PUSH
19550: LD_INT 102
19552: EQUAL
19553: IFFALSE 19563
// sDiff := true ;
19555: LD_ADDR_EXP 77
19559: PUSH
19560: LD_INT 1
19562: ST_TO_ADDR
// if p3 = 103 then
19563: LD_VAR 0 3
19567: PUSH
19568: LD_INT 103
19570: EQUAL
19571: IFFALSE 19581
// sFog := true ;
19573: LD_ADDR_EXP 80
19577: PUSH
19578: LD_INT 1
19580: ST_TO_ADDR
// if p3 = 104 then
19581: LD_VAR 0 3
19585: PUSH
19586: LD_INT 104
19588: EQUAL
19589: IFFALSE 19599
// sReset := true ;
19591: LD_ADDR_EXP 81
19595: PUSH
19596: LD_INT 1
19598: ST_TO_ADDR
// if p3 = 105 then
19599: LD_VAR 0 3
19603: PUSH
19604: LD_INT 105
19606: EQUAL
19607: IFFALSE 19617
// sSun := true ;
19609: LD_ADDR_EXP 82
19613: PUSH
19614: LD_INT 1
19616: ST_TO_ADDR
// if p3 = 106 then
19617: LD_VAR 0 3
19621: PUSH
19622: LD_INT 106
19624: EQUAL
19625: IFFALSE 19635
// sTiger := true ;
19627: LD_ADDR_EXP 78
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// if p3 = 107 then
19635: LD_VAR 0 3
19639: PUSH
19640: LD_INT 107
19642: EQUAL
19643: IFFALSE 19653
// sBomb := true ;
19645: LD_ADDR_EXP 79
19649: PUSH
19650: LD_INT 1
19652: ST_TO_ADDR
// if p3 = 108 then
19653: LD_VAR 0 3
19657: PUSH
19658: LD_INT 108
19660: EQUAL
19661: IFFALSE 19671
// sWound := true ;
19663: LD_ADDR_EXP 87
19667: PUSH
19668: LD_INT 1
19670: ST_TO_ADDR
// if p3 = 109 then
19671: LD_VAR 0 3
19675: PUSH
19676: LD_INT 109
19678: EQUAL
19679: IFFALSE 19689
// sBetray := true ;
19681: LD_ADDR_EXP 91
19685: PUSH
19686: LD_INT 1
19688: ST_TO_ADDR
// if p3 = 110 then
19689: LD_VAR 0 3
19693: PUSH
19694: LD_INT 110
19696: EQUAL
19697: IFFALSE 19707
// sContamin := true ;
19699: LD_ADDR_EXP 92
19703: PUSH
19704: LD_INT 1
19706: ST_TO_ADDR
// if p3 = 111 then
19707: LD_VAR 0 3
19711: PUSH
19712: LD_INT 111
19714: EQUAL
19715: IFFALSE 19725
// sOil := true ;
19717: LD_ADDR_EXP 94
19721: PUSH
19722: LD_INT 1
19724: ST_TO_ADDR
// if p3 = 112 then
19725: LD_VAR 0 3
19729: PUSH
19730: LD_INT 112
19732: EQUAL
19733: IFFALSE 19743
// sStu := true ;
19735: LD_ADDR_EXP 98
19739: PUSH
19740: LD_INT 1
19742: ST_TO_ADDR
// if p3 = 113 then
19743: LD_VAR 0 3
19747: PUSH
19748: LD_INT 113
19750: EQUAL
19751: IFFALSE 19761
// sBazooka := true ;
19753: LD_ADDR_EXP 101
19757: PUSH
19758: LD_INT 1
19760: ST_TO_ADDR
// if p3 = 114 then
19761: LD_VAR 0 3
19765: PUSH
19766: LD_INT 114
19768: EQUAL
19769: IFFALSE 19779
// sMortar := true ;
19771: LD_ADDR_EXP 102
19775: PUSH
19776: LD_INT 1
19778: ST_TO_ADDR
// if p3 = 115 then
19779: LD_VAR 0 3
19783: PUSH
19784: LD_INT 115
19786: EQUAL
19787: IFFALSE 19797
// sRanger := true ;
19789: LD_ADDR_EXP 112
19793: PUSH
19794: LD_INT 1
19796: ST_TO_ADDR
// end ; if p2 = 101 then
19797: LD_VAR 0 2
19801: PUSH
19802: LD_INT 101
19804: EQUAL
19805: IFFALSE 19933
// begin case p3 of 1 :
19807: LD_VAR 0 3
19811: PUSH
19812: LD_INT 1
19814: DOUBLE
19815: EQUAL
19816: IFTRUE 19820
19818: GO 19827
19820: POP
// hHackUnlimitedResources ; 2 :
19821: CALL 30968 0 0
19825: GO 19933
19827: LD_INT 2
19829: DOUBLE
19830: EQUAL
19831: IFTRUE 19835
19833: GO 19842
19835: POP
// hHackSetLevel10 ; 3 :
19836: CALL 31101 0 0
19840: GO 19933
19842: LD_INT 3
19844: DOUBLE
19845: EQUAL
19846: IFTRUE 19850
19848: GO 19857
19850: POP
// hHackSetLevel10YourUnits ; 4 :
19851: CALL 31186 0 0
19855: GO 19933
19857: LD_INT 4
19859: DOUBLE
19860: EQUAL
19861: IFTRUE 19865
19863: GO 19872
19865: POP
// hHackInvincible ; 5 :
19866: CALL 31634 0 0
19870: GO 19933
19872: LD_INT 5
19874: DOUBLE
19875: EQUAL
19876: IFTRUE 19880
19878: GO 19887
19880: POP
// hHackInvisible ; 6 :
19881: CALL 31745 0 0
19885: GO 19933
19887: LD_INT 6
19889: DOUBLE
19890: EQUAL
19891: IFTRUE 19895
19893: GO 19902
19895: POP
// hHackChangeYourSide ; 7 :
19896: CALL 31802 0 0
19900: GO 19933
19902: LD_INT 7
19904: DOUBLE
19905: EQUAL
19906: IFTRUE 19910
19908: GO 19917
19910: POP
// hHackChangeUnitSide ; 8 :
19911: CALL 31844 0 0
19915: GO 19933
19917: LD_INT 8
19919: DOUBLE
19920: EQUAL
19921: IFTRUE 19925
19923: GO 19932
19925: POP
// hHackFog ; end ;
19926: CALL 31945 0 0
19930: GO 19933
19932: POP
// end ; end ;
19933: PPOPN 6
19935: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19936: GO 19938
19938: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19939: LD_STRING initStreamRollete();
19941: PPUSH
19942: CALL_OW 559
// InitStreamMode ;
19946: CALL 19955 0 0
// DefineStreamItems ( ) ;
19950: CALL 20395 0 0
// end ;
19954: END
// function InitStreamMode ; begin
19955: LD_INT 0
19957: PPUSH
// streamModeActive := false ;
19958: LD_ADDR_EXP 59
19962: PUSH
19963: LD_INT 0
19965: ST_TO_ADDR
// normalCounter := 36 ;
19966: LD_ADDR_EXP 60
19970: PUSH
19971: LD_INT 36
19973: ST_TO_ADDR
// hardcoreCounter := 16 ;
19974: LD_ADDR_EXP 61
19978: PUSH
19979: LD_INT 16
19981: ST_TO_ADDR
// sRocket := false ;
19982: LD_ADDR_EXP 64
19986: PUSH
19987: LD_INT 0
19989: ST_TO_ADDR
// sSpeed := false ;
19990: LD_ADDR_EXP 63
19994: PUSH
19995: LD_INT 0
19997: ST_TO_ADDR
// sEngine := false ;
19998: LD_ADDR_EXP 65
20002: PUSH
20003: LD_INT 0
20005: ST_TO_ADDR
// sSpec := false ;
20006: LD_ADDR_EXP 62
20010: PUSH
20011: LD_INT 0
20013: ST_TO_ADDR
// sLevel := false ;
20014: LD_ADDR_EXP 66
20018: PUSH
20019: LD_INT 0
20021: ST_TO_ADDR
// sArmoury := false ;
20022: LD_ADDR_EXP 67
20026: PUSH
20027: LD_INT 0
20029: ST_TO_ADDR
// sRadar := false ;
20030: LD_ADDR_EXP 68
20034: PUSH
20035: LD_INT 0
20037: ST_TO_ADDR
// sBunker := false ;
20038: LD_ADDR_EXP 69
20042: PUSH
20043: LD_INT 0
20045: ST_TO_ADDR
// sHack := false ;
20046: LD_ADDR_EXP 70
20050: PUSH
20051: LD_INT 0
20053: ST_TO_ADDR
// sFire := false ;
20054: LD_ADDR_EXP 71
20058: PUSH
20059: LD_INT 0
20061: ST_TO_ADDR
// sRefresh := false ;
20062: LD_ADDR_EXP 72
20066: PUSH
20067: LD_INT 0
20069: ST_TO_ADDR
// sExp := false ;
20070: LD_ADDR_EXP 73
20074: PUSH
20075: LD_INT 0
20077: ST_TO_ADDR
// sDepot := false ;
20078: LD_ADDR_EXP 74
20082: PUSH
20083: LD_INT 0
20085: ST_TO_ADDR
// sFlag := false ;
20086: LD_ADDR_EXP 75
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// sKamikadze := false ;
20094: LD_ADDR_EXP 83
20098: PUSH
20099: LD_INT 0
20101: ST_TO_ADDR
// sTroll := false ;
20102: LD_ADDR_EXP 84
20106: PUSH
20107: LD_INT 0
20109: ST_TO_ADDR
// sSlow := false ;
20110: LD_ADDR_EXP 85
20114: PUSH
20115: LD_INT 0
20117: ST_TO_ADDR
// sLack := false ;
20118: LD_ADDR_EXP 86
20122: PUSH
20123: LD_INT 0
20125: ST_TO_ADDR
// sTank := false ;
20126: LD_ADDR_EXP 88
20130: PUSH
20131: LD_INT 0
20133: ST_TO_ADDR
// sRemote := false ;
20134: LD_ADDR_EXP 89
20138: PUSH
20139: LD_INT 0
20141: ST_TO_ADDR
// sPowell := false ;
20142: LD_ADDR_EXP 90
20146: PUSH
20147: LD_INT 0
20149: ST_TO_ADDR
// sTeleport := false ;
20150: LD_ADDR_EXP 93
20154: PUSH
20155: LD_INT 0
20157: ST_TO_ADDR
// sOilTower := false ;
20158: LD_ADDR_EXP 95
20162: PUSH
20163: LD_INT 0
20165: ST_TO_ADDR
// sShovel := false ;
20166: LD_ADDR_EXP 96
20170: PUSH
20171: LD_INT 0
20173: ST_TO_ADDR
// sSheik := false ;
20174: LD_ADDR_EXP 97
20178: PUSH
20179: LD_INT 0
20181: ST_TO_ADDR
// sEarthquake := false ;
20182: LD_ADDR_EXP 99
20186: PUSH
20187: LD_INT 0
20189: ST_TO_ADDR
// sAI := false ;
20190: LD_ADDR_EXP 100
20194: PUSH
20195: LD_INT 0
20197: ST_TO_ADDR
// sCargo := false ;
20198: LD_ADDR_EXP 103
20202: PUSH
20203: LD_INT 0
20205: ST_TO_ADDR
// sDLaser := false ;
20206: LD_ADDR_EXP 104
20210: PUSH
20211: LD_INT 0
20213: ST_TO_ADDR
// sExchange := false ;
20214: LD_ADDR_EXP 105
20218: PUSH
20219: LD_INT 0
20221: ST_TO_ADDR
// sFac := false ;
20222: LD_ADDR_EXP 106
20226: PUSH
20227: LD_INT 0
20229: ST_TO_ADDR
// sPower := false ;
20230: LD_ADDR_EXP 107
20234: PUSH
20235: LD_INT 0
20237: ST_TO_ADDR
// sRandom := false ;
20238: LD_ADDR_EXP 108
20242: PUSH
20243: LD_INT 0
20245: ST_TO_ADDR
// sShield := false ;
20246: LD_ADDR_EXP 109
20250: PUSH
20251: LD_INT 0
20253: ST_TO_ADDR
// sTime := false ;
20254: LD_ADDR_EXP 110
20258: PUSH
20259: LD_INT 0
20261: ST_TO_ADDR
// sTools := false ;
20262: LD_ADDR_EXP 111
20266: PUSH
20267: LD_INT 0
20269: ST_TO_ADDR
// sSold := false ;
20270: LD_ADDR_EXP 76
20274: PUSH
20275: LD_INT 0
20277: ST_TO_ADDR
// sDiff := false ;
20278: LD_ADDR_EXP 77
20282: PUSH
20283: LD_INT 0
20285: ST_TO_ADDR
// sFog := false ;
20286: LD_ADDR_EXP 80
20290: PUSH
20291: LD_INT 0
20293: ST_TO_ADDR
// sReset := false ;
20294: LD_ADDR_EXP 81
20298: PUSH
20299: LD_INT 0
20301: ST_TO_ADDR
// sSun := false ;
20302: LD_ADDR_EXP 82
20306: PUSH
20307: LD_INT 0
20309: ST_TO_ADDR
// sTiger := false ;
20310: LD_ADDR_EXP 78
20314: PUSH
20315: LD_INT 0
20317: ST_TO_ADDR
// sBomb := false ;
20318: LD_ADDR_EXP 79
20322: PUSH
20323: LD_INT 0
20325: ST_TO_ADDR
// sWound := false ;
20326: LD_ADDR_EXP 87
20330: PUSH
20331: LD_INT 0
20333: ST_TO_ADDR
// sBetray := false ;
20334: LD_ADDR_EXP 91
20338: PUSH
20339: LD_INT 0
20341: ST_TO_ADDR
// sContamin := false ;
20342: LD_ADDR_EXP 92
20346: PUSH
20347: LD_INT 0
20349: ST_TO_ADDR
// sOil := false ;
20350: LD_ADDR_EXP 94
20354: PUSH
20355: LD_INT 0
20357: ST_TO_ADDR
// sStu := false ;
20358: LD_ADDR_EXP 98
20362: PUSH
20363: LD_INT 0
20365: ST_TO_ADDR
// sBazooka := false ;
20366: LD_ADDR_EXP 101
20370: PUSH
20371: LD_INT 0
20373: ST_TO_ADDR
// sMortar := false ;
20374: LD_ADDR_EXP 102
20378: PUSH
20379: LD_INT 0
20381: ST_TO_ADDR
// sRanger := false ;
20382: LD_ADDR_EXP 112
20386: PUSH
20387: LD_INT 0
20389: ST_TO_ADDR
// end ;
20390: LD_VAR 0 1
20394: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20395: LD_INT 0
20397: PPUSH
20398: PPUSH
20399: PPUSH
20400: PPUSH
20401: PPUSH
// result := [ ] ;
20402: LD_ADDR_VAR 0 1
20406: PUSH
20407: EMPTY
20408: ST_TO_ADDR
// if campaign_id = 1 then
20409: LD_OWVAR 69
20413: PUSH
20414: LD_INT 1
20416: EQUAL
20417: IFFALSE 23355
// begin case mission_number of 1 :
20419: LD_OWVAR 70
20423: PUSH
20424: LD_INT 1
20426: DOUBLE
20427: EQUAL
20428: IFTRUE 20432
20430: GO 20496
20432: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20433: LD_ADDR_VAR 0 1
20437: PUSH
20438: LD_INT 2
20440: PUSH
20441: LD_INT 4
20443: PUSH
20444: LD_INT 11
20446: PUSH
20447: LD_INT 12
20449: PUSH
20450: LD_INT 15
20452: PUSH
20453: LD_INT 16
20455: PUSH
20456: LD_INT 22
20458: PUSH
20459: LD_INT 23
20461: PUSH
20462: LD_INT 26
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 101
20478: PUSH
20479: LD_INT 102
20481: PUSH
20482: LD_INT 106
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: LIST
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: ST_TO_ADDR
20494: GO 23353
20496: LD_INT 2
20498: DOUBLE
20499: EQUAL
20500: IFTRUE 20504
20502: GO 20576
20504: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20505: LD_ADDR_VAR 0 1
20509: PUSH
20510: LD_INT 2
20512: PUSH
20513: LD_INT 4
20515: PUSH
20516: LD_INT 11
20518: PUSH
20519: LD_INT 12
20521: PUSH
20522: LD_INT 15
20524: PUSH
20525: LD_INT 16
20527: PUSH
20528: LD_INT 22
20530: PUSH
20531: LD_INT 23
20533: PUSH
20534: LD_INT 26
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 101
20550: PUSH
20551: LD_INT 102
20553: PUSH
20554: LD_INT 105
20556: PUSH
20557: LD_INT 106
20559: PUSH
20560: LD_INT 108
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: ST_TO_ADDR
20574: GO 23353
20576: LD_INT 3
20578: DOUBLE
20579: EQUAL
20580: IFTRUE 20584
20582: GO 20660
20584: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20585: LD_ADDR_VAR 0 1
20589: PUSH
20590: LD_INT 2
20592: PUSH
20593: LD_INT 4
20595: PUSH
20596: LD_INT 5
20598: PUSH
20599: LD_INT 11
20601: PUSH
20602: LD_INT 12
20604: PUSH
20605: LD_INT 15
20607: PUSH
20608: LD_INT 16
20610: PUSH
20611: LD_INT 22
20613: PUSH
20614: LD_INT 26
20616: PUSH
20617: LD_INT 36
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 101
20634: PUSH
20635: LD_INT 102
20637: PUSH
20638: LD_INT 105
20640: PUSH
20641: LD_INT 106
20643: PUSH
20644: LD_INT 108
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: ST_TO_ADDR
20658: GO 23353
20660: LD_INT 4
20662: DOUBLE
20663: EQUAL
20664: IFTRUE 20668
20666: GO 20752
20668: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20669: LD_ADDR_VAR 0 1
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: LD_INT 4
20679: PUSH
20680: LD_INT 5
20682: PUSH
20683: LD_INT 8
20685: PUSH
20686: LD_INT 11
20688: PUSH
20689: LD_INT 12
20691: PUSH
20692: LD_INT 15
20694: PUSH
20695: LD_INT 16
20697: PUSH
20698: LD_INT 22
20700: PUSH
20701: LD_INT 23
20703: PUSH
20704: LD_INT 26
20706: PUSH
20707: LD_INT 36
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 101
20726: PUSH
20727: LD_INT 102
20729: PUSH
20730: LD_INT 105
20732: PUSH
20733: LD_INT 106
20735: PUSH
20736: LD_INT 108
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: ST_TO_ADDR
20750: GO 23353
20752: LD_INT 5
20754: DOUBLE
20755: EQUAL
20756: IFTRUE 20760
20758: GO 20860
20760: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20761: LD_ADDR_VAR 0 1
20765: PUSH
20766: LD_INT 2
20768: PUSH
20769: LD_INT 4
20771: PUSH
20772: LD_INT 5
20774: PUSH
20775: LD_INT 6
20777: PUSH
20778: LD_INT 8
20780: PUSH
20781: LD_INT 11
20783: PUSH
20784: LD_INT 12
20786: PUSH
20787: LD_INT 15
20789: PUSH
20790: LD_INT 16
20792: PUSH
20793: LD_INT 22
20795: PUSH
20796: LD_INT 23
20798: PUSH
20799: LD_INT 25
20801: PUSH
20802: LD_INT 26
20804: PUSH
20805: LD_INT 36
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 101
20826: PUSH
20827: LD_INT 102
20829: PUSH
20830: LD_INT 105
20832: PUSH
20833: LD_INT 106
20835: PUSH
20836: LD_INT 108
20838: PUSH
20839: LD_INT 109
20841: PUSH
20842: LD_INT 112
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: ST_TO_ADDR
20858: GO 23353
20860: LD_INT 6
20862: DOUBLE
20863: EQUAL
20864: IFTRUE 20868
20866: GO 20988
20868: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20869: LD_ADDR_VAR 0 1
20873: PUSH
20874: LD_INT 2
20876: PUSH
20877: LD_INT 4
20879: PUSH
20880: LD_INT 5
20882: PUSH
20883: LD_INT 6
20885: PUSH
20886: LD_INT 8
20888: PUSH
20889: LD_INT 11
20891: PUSH
20892: LD_INT 12
20894: PUSH
20895: LD_INT 15
20897: PUSH
20898: LD_INT 16
20900: PUSH
20901: LD_INT 20
20903: PUSH
20904: LD_INT 21
20906: PUSH
20907: LD_INT 22
20909: PUSH
20910: LD_INT 23
20912: PUSH
20913: LD_INT 25
20915: PUSH
20916: LD_INT 26
20918: PUSH
20919: LD_INT 30
20921: PUSH
20922: LD_INT 31
20924: PUSH
20925: LD_INT 32
20927: PUSH
20928: LD_INT 36
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 101
20954: PUSH
20955: LD_INT 102
20957: PUSH
20958: LD_INT 105
20960: PUSH
20961: LD_INT 106
20963: PUSH
20964: LD_INT 108
20966: PUSH
20967: LD_INT 109
20969: PUSH
20970: LD_INT 112
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: ST_TO_ADDR
20986: GO 23353
20988: LD_INT 7
20990: DOUBLE
20991: EQUAL
20992: IFTRUE 20996
20994: GO 21096
20996: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20997: LD_ADDR_VAR 0 1
21001: PUSH
21002: LD_INT 2
21004: PUSH
21005: LD_INT 4
21007: PUSH
21008: LD_INT 5
21010: PUSH
21011: LD_INT 7
21013: PUSH
21014: LD_INT 11
21016: PUSH
21017: LD_INT 12
21019: PUSH
21020: LD_INT 15
21022: PUSH
21023: LD_INT 16
21025: PUSH
21026: LD_INT 20
21028: PUSH
21029: LD_INT 21
21031: PUSH
21032: LD_INT 22
21034: PUSH
21035: LD_INT 23
21037: PUSH
21038: LD_INT 25
21040: PUSH
21041: LD_INT 26
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 101
21062: PUSH
21063: LD_INT 102
21065: PUSH
21066: LD_INT 103
21068: PUSH
21069: LD_INT 105
21071: PUSH
21072: LD_INT 106
21074: PUSH
21075: LD_INT 108
21077: PUSH
21078: LD_INT 112
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: ST_TO_ADDR
21094: GO 23353
21096: LD_INT 8
21098: DOUBLE
21099: EQUAL
21100: IFTRUE 21104
21102: GO 21232
21104: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21105: LD_ADDR_VAR 0 1
21109: PUSH
21110: LD_INT 2
21112: PUSH
21113: LD_INT 4
21115: PUSH
21116: LD_INT 5
21118: PUSH
21119: LD_INT 6
21121: PUSH
21122: LD_INT 7
21124: PUSH
21125: LD_INT 8
21127: PUSH
21128: LD_INT 11
21130: PUSH
21131: LD_INT 12
21133: PUSH
21134: LD_INT 15
21136: PUSH
21137: LD_INT 16
21139: PUSH
21140: LD_INT 20
21142: PUSH
21143: LD_INT 21
21145: PUSH
21146: LD_INT 22
21148: PUSH
21149: LD_INT 23
21151: PUSH
21152: LD_INT 25
21154: PUSH
21155: LD_INT 26
21157: PUSH
21158: LD_INT 30
21160: PUSH
21161: LD_INT 31
21163: PUSH
21164: LD_INT 32
21166: PUSH
21167: LD_INT 36
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 101
21194: PUSH
21195: LD_INT 102
21197: PUSH
21198: LD_INT 103
21200: PUSH
21201: LD_INT 105
21203: PUSH
21204: LD_INT 106
21206: PUSH
21207: LD_INT 108
21209: PUSH
21210: LD_INT 109
21212: PUSH
21213: LD_INT 112
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: ST_TO_ADDR
21230: GO 23353
21232: LD_INT 9
21234: DOUBLE
21235: EQUAL
21236: IFTRUE 21240
21238: GO 21376
21240: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
21241: LD_ADDR_VAR 0 1
21245: PUSH
21246: LD_INT 2
21248: PUSH
21249: LD_INT 4
21251: PUSH
21252: LD_INT 5
21254: PUSH
21255: LD_INT 6
21257: PUSH
21258: LD_INT 7
21260: PUSH
21261: LD_INT 8
21263: PUSH
21264: LD_INT 11
21266: PUSH
21267: LD_INT 12
21269: PUSH
21270: LD_INT 15
21272: PUSH
21273: LD_INT 16
21275: PUSH
21276: LD_INT 20
21278: PUSH
21279: LD_INT 21
21281: PUSH
21282: LD_INT 22
21284: PUSH
21285: LD_INT 23
21287: PUSH
21288: LD_INT 25
21290: PUSH
21291: LD_INT 26
21293: PUSH
21294: LD_INT 28
21296: PUSH
21297: LD_INT 30
21299: PUSH
21300: LD_INT 31
21302: PUSH
21303: LD_INT 32
21305: PUSH
21306: LD_INT 36
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 101
21334: PUSH
21335: LD_INT 102
21337: PUSH
21338: LD_INT 103
21340: PUSH
21341: LD_INT 105
21343: PUSH
21344: LD_INT 106
21346: PUSH
21347: LD_INT 108
21349: PUSH
21350: LD_INT 109
21352: PUSH
21353: LD_INT 112
21355: PUSH
21356: LD_INT 114
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: ST_TO_ADDR
21374: GO 23353
21376: LD_INT 10
21378: DOUBLE
21379: EQUAL
21380: IFTRUE 21384
21382: GO 21568
21384: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21385: LD_ADDR_VAR 0 1
21389: PUSH
21390: LD_INT 2
21392: PUSH
21393: LD_INT 4
21395: PUSH
21396: LD_INT 5
21398: PUSH
21399: LD_INT 6
21401: PUSH
21402: LD_INT 7
21404: PUSH
21405: LD_INT 8
21407: PUSH
21408: LD_INT 9
21410: PUSH
21411: LD_INT 10
21413: PUSH
21414: LD_INT 11
21416: PUSH
21417: LD_INT 12
21419: PUSH
21420: LD_INT 13
21422: PUSH
21423: LD_INT 14
21425: PUSH
21426: LD_INT 15
21428: PUSH
21429: LD_INT 16
21431: PUSH
21432: LD_INT 17
21434: PUSH
21435: LD_INT 18
21437: PUSH
21438: LD_INT 19
21440: PUSH
21441: LD_INT 20
21443: PUSH
21444: LD_INT 21
21446: PUSH
21447: LD_INT 22
21449: PUSH
21450: LD_INT 23
21452: PUSH
21453: LD_INT 24
21455: PUSH
21456: LD_INT 25
21458: PUSH
21459: LD_INT 26
21461: PUSH
21462: LD_INT 28
21464: PUSH
21465: LD_INT 30
21467: PUSH
21468: LD_INT 31
21470: PUSH
21471: LD_INT 32
21473: PUSH
21474: LD_INT 36
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 101
21510: PUSH
21511: LD_INT 102
21513: PUSH
21514: LD_INT 103
21516: PUSH
21517: LD_INT 104
21519: PUSH
21520: LD_INT 105
21522: PUSH
21523: LD_INT 106
21525: PUSH
21526: LD_INT 107
21528: PUSH
21529: LD_INT 108
21531: PUSH
21532: LD_INT 109
21534: PUSH
21535: LD_INT 110
21537: PUSH
21538: LD_INT 111
21540: PUSH
21541: LD_INT 112
21543: PUSH
21544: LD_INT 114
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: ST_TO_ADDR
21566: GO 23353
21568: LD_INT 11
21570: DOUBLE
21571: EQUAL
21572: IFTRUE 21576
21574: GO 21768
21576: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21577: LD_ADDR_VAR 0 1
21581: PUSH
21582: LD_INT 2
21584: PUSH
21585: LD_INT 3
21587: PUSH
21588: LD_INT 4
21590: PUSH
21591: LD_INT 5
21593: PUSH
21594: LD_INT 6
21596: PUSH
21597: LD_INT 7
21599: PUSH
21600: LD_INT 8
21602: PUSH
21603: LD_INT 9
21605: PUSH
21606: LD_INT 10
21608: PUSH
21609: LD_INT 11
21611: PUSH
21612: LD_INT 12
21614: PUSH
21615: LD_INT 13
21617: PUSH
21618: LD_INT 14
21620: PUSH
21621: LD_INT 15
21623: PUSH
21624: LD_INT 16
21626: PUSH
21627: LD_INT 17
21629: PUSH
21630: LD_INT 18
21632: PUSH
21633: LD_INT 19
21635: PUSH
21636: LD_INT 20
21638: PUSH
21639: LD_INT 21
21641: PUSH
21642: LD_INT 22
21644: PUSH
21645: LD_INT 23
21647: PUSH
21648: LD_INT 24
21650: PUSH
21651: LD_INT 25
21653: PUSH
21654: LD_INT 26
21656: PUSH
21657: LD_INT 28
21659: PUSH
21660: LD_INT 30
21662: PUSH
21663: LD_INT 31
21665: PUSH
21666: LD_INT 32
21668: PUSH
21669: LD_INT 34
21671: PUSH
21672: LD_INT 36
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 101
21710: PUSH
21711: LD_INT 102
21713: PUSH
21714: LD_INT 103
21716: PUSH
21717: LD_INT 104
21719: PUSH
21720: LD_INT 105
21722: PUSH
21723: LD_INT 106
21725: PUSH
21726: LD_INT 107
21728: PUSH
21729: LD_INT 108
21731: PUSH
21732: LD_INT 109
21734: PUSH
21735: LD_INT 110
21737: PUSH
21738: LD_INT 111
21740: PUSH
21741: LD_INT 112
21743: PUSH
21744: LD_INT 114
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: ST_TO_ADDR
21766: GO 23353
21768: LD_INT 12
21770: DOUBLE
21771: EQUAL
21772: IFTRUE 21776
21774: GO 21984
21776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21777: LD_ADDR_VAR 0 1
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: LD_INT 3
21790: PUSH
21791: LD_INT 4
21793: PUSH
21794: LD_INT 5
21796: PUSH
21797: LD_INT 6
21799: PUSH
21800: LD_INT 7
21802: PUSH
21803: LD_INT 8
21805: PUSH
21806: LD_INT 9
21808: PUSH
21809: LD_INT 10
21811: PUSH
21812: LD_INT 11
21814: PUSH
21815: LD_INT 12
21817: PUSH
21818: LD_INT 13
21820: PUSH
21821: LD_INT 14
21823: PUSH
21824: LD_INT 15
21826: PUSH
21827: LD_INT 16
21829: PUSH
21830: LD_INT 17
21832: PUSH
21833: LD_INT 18
21835: PUSH
21836: LD_INT 19
21838: PUSH
21839: LD_INT 20
21841: PUSH
21842: LD_INT 21
21844: PUSH
21845: LD_INT 22
21847: PUSH
21848: LD_INT 23
21850: PUSH
21851: LD_INT 24
21853: PUSH
21854: LD_INT 25
21856: PUSH
21857: LD_INT 26
21859: PUSH
21860: LD_INT 27
21862: PUSH
21863: LD_INT 28
21865: PUSH
21866: LD_INT 30
21868: PUSH
21869: LD_INT 31
21871: PUSH
21872: LD_INT 32
21874: PUSH
21875: LD_INT 33
21877: PUSH
21878: LD_INT 34
21880: PUSH
21881: LD_INT 36
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 101
21922: PUSH
21923: LD_INT 102
21925: PUSH
21926: LD_INT 103
21928: PUSH
21929: LD_INT 104
21931: PUSH
21932: LD_INT 105
21934: PUSH
21935: LD_INT 106
21937: PUSH
21938: LD_INT 107
21940: PUSH
21941: LD_INT 108
21943: PUSH
21944: LD_INT 109
21946: PUSH
21947: LD_INT 110
21949: PUSH
21950: LD_INT 111
21952: PUSH
21953: LD_INT 112
21955: PUSH
21956: LD_INT 113
21958: PUSH
21959: LD_INT 114
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: ST_TO_ADDR
21982: GO 23353
21984: LD_INT 13
21986: DOUBLE
21987: EQUAL
21988: IFTRUE 21992
21990: GO 22188
21992: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21993: LD_ADDR_VAR 0 1
21997: PUSH
21998: LD_INT 1
22000: PUSH
22001: LD_INT 2
22003: PUSH
22004: LD_INT 3
22006: PUSH
22007: LD_INT 4
22009: PUSH
22010: LD_INT 5
22012: PUSH
22013: LD_INT 8
22015: PUSH
22016: LD_INT 9
22018: PUSH
22019: LD_INT 10
22021: PUSH
22022: LD_INT 11
22024: PUSH
22025: LD_INT 12
22027: PUSH
22028: LD_INT 14
22030: PUSH
22031: LD_INT 15
22033: PUSH
22034: LD_INT 16
22036: PUSH
22037: LD_INT 17
22039: PUSH
22040: LD_INT 18
22042: PUSH
22043: LD_INT 19
22045: PUSH
22046: LD_INT 20
22048: PUSH
22049: LD_INT 21
22051: PUSH
22052: LD_INT 22
22054: PUSH
22055: LD_INT 23
22057: PUSH
22058: LD_INT 24
22060: PUSH
22061: LD_INT 25
22063: PUSH
22064: LD_INT 26
22066: PUSH
22067: LD_INT 27
22069: PUSH
22070: LD_INT 28
22072: PUSH
22073: LD_INT 30
22075: PUSH
22076: LD_INT 31
22078: PUSH
22079: LD_INT 32
22081: PUSH
22082: LD_INT 33
22084: PUSH
22085: LD_INT 34
22087: PUSH
22088: LD_INT 36
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 101
22126: PUSH
22127: LD_INT 102
22129: PUSH
22130: LD_INT 103
22132: PUSH
22133: LD_INT 104
22135: PUSH
22136: LD_INT 105
22138: PUSH
22139: LD_INT 106
22141: PUSH
22142: LD_INT 107
22144: PUSH
22145: LD_INT 108
22147: PUSH
22148: LD_INT 109
22150: PUSH
22151: LD_INT 110
22153: PUSH
22154: LD_INT 111
22156: PUSH
22157: LD_INT 112
22159: PUSH
22160: LD_INT 113
22162: PUSH
22163: LD_INT 114
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: ST_TO_ADDR
22186: GO 23353
22188: LD_INT 14
22190: DOUBLE
22191: EQUAL
22192: IFTRUE 22196
22194: GO 22408
22196: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
22197: LD_ADDR_VAR 0 1
22201: PUSH
22202: LD_INT 1
22204: PUSH
22205: LD_INT 2
22207: PUSH
22208: LD_INT 3
22210: PUSH
22211: LD_INT 4
22213: PUSH
22214: LD_INT 5
22216: PUSH
22217: LD_INT 6
22219: PUSH
22220: LD_INT 7
22222: PUSH
22223: LD_INT 8
22225: PUSH
22226: LD_INT 9
22228: PUSH
22229: LD_INT 10
22231: PUSH
22232: LD_INT 11
22234: PUSH
22235: LD_INT 12
22237: PUSH
22238: LD_INT 13
22240: PUSH
22241: LD_INT 14
22243: PUSH
22244: LD_INT 15
22246: PUSH
22247: LD_INT 16
22249: PUSH
22250: LD_INT 17
22252: PUSH
22253: LD_INT 18
22255: PUSH
22256: LD_INT 19
22258: PUSH
22259: LD_INT 20
22261: PUSH
22262: LD_INT 21
22264: PUSH
22265: LD_INT 22
22267: PUSH
22268: LD_INT 23
22270: PUSH
22271: LD_INT 24
22273: PUSH
22274: LD_INT 25
22276: PUSH
22277: LD_INT 26
22279: PUSH
22280: LD_INT 27
22282: PUSH
22283: LD_INT 28
22285: PUSH
22286: LD_INT 29
22288: PUSH
22289: LD_INT 30
22291: PUSH
22292: LD_INT 31
22294: PUSH
22295: LD_INT 32
22297: PUSH
22298: LD_INT 33
22300: PUSH
22301: LD_INT 34
22303: PUSH
22304: LD_INT 36
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 101
22346: PUSH
22347: LD_INT 102
22349: PUSH
22350: LD_INT 103
22352: PUSH
22353: LD_INT 104
22355: PUSH
22356: LD_INT 105
22358: PUSH
22359: LD_INT 106
22361: PUSH
22362: LD_INT 107
22364: PUSH
22365: LD_INT 108
22367: PUSH
22368: LD_INT 109
22370: PUSH
22371: LD_INT 110
22373: PUSH
22374: LD_INT 111
22376: PUSH
22377: LD_INT 112
22379: PUSH
22380: LD_INT 113
22382: PUSH
22383: LD_INT 114
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: ST_TO_ADDR
22406: GO 23353
22408: LD_INT 15
22410: DOUBLE
22411: EQUAL
22412: IFTRUE 22416
22414: GO 22628
22416: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22417: LD_ADDR_VAR 0 1
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: LD_INT 3
22430: PUSH
22431: LD_INT 4
22433: PUSH
22434: LD_INT 5
22436: PUSH
22437: LD_INT 6
22439: PUSH
22440: LD_INT 7
22442: PUSH
22443: LD_INT 8
22445: PUSH
22446: LD_INT 9
22448: PUSH
22449: LD_INT 10
22451: PUSH
22452: LD_INT 11
22454: PUSH
22455: LD_INT 12
22457: PUSH
22458: LD_INT 13
22460: PUSH
22461: LD_INT 14
22463: PUSH
22464: LD_INT 15
22466: PUSH
22467: LD_INT 16
22469: PUSH
22470: LD_INT 17
22472: PUSH
22473: LD_INT 18
22475: PUSH
22476: LD_INT 19
22478: PUSH
22479: LD_INT 20
22481: PUSH
22482: LD_INT 21
22484: PUSH
22485: LD_INT 22
22487: PUSH
22488: LD_INT 23
22490: PUSH
22491: LD_INT 24
22493: PUSH
22494: LD_INT 25
22496: PUSH
22497: LD_INT 26
22499: PUSH
22500: LD_INT 27
22502: PUSH
22503: LD_INT 28
22505: PUSH
22506: LD_INT 29
22508: PUSH
22509: LD_INT 30
22511: PUSH
22512: LD_INT 31
22514: PUSH
22515: LD_INT 32
22517: PUSH
22518: LD_INT 33
22520: PUSH
22521: LD_INT 34
22523: PUSH
22524: LD_INT 36
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 101
22566: PUSH
22567: LD_INT 102
22569: PUSH
22570: LD_INT 103
22572: PUSH
22573: LD_INT 104
22575: PUSH
22576: LD_INT 105
22578: PUSH
22579: LD_INT 106
22581: PUSH
22582: LD_INT 107
22584: PUSH
22585: LD_INT 108
22587: PUSH
22588: LD_INT 109
22590: PUSH
22591: LD_INT 110
22593: PUSH
22594: LD_INT 111
22596: PUSH
22597: LD_INT 112
22599: PUSH
22600: LD_INT 113
22602: PUSH
22603: LD_INT 114
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: ST_TO_ADDR
22626: GO 23353
22628: LD_INT 16
22630: DOUBLE
22631: EQUAL
22632: IFTRUE 22636
22634: GO 22760
22636: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22637: LD_ADDR_VAR 0 1
22641: PUSH
22642: LD_INT 2
22644: PUSH
22645: LD_INT 4
22647: PUSH
22648: LD_INT 5
22650: PUSH
22651: LD_INT 7
22653: PUSH
22654: LD_INT 11
22656: PUSH
22657: LD_INT 12
22659: PUSH
22660: LD_INT 15
22662: PUSH
22663: LD_INT 16
22665: PUSH
22666: LD_INT 20
22668: PUSH
22669: LD_INT 21
22671: PUSH
22672: LD_INT 22
22674: PUSH
22675: LD_INT 23
22677: PUSH
22678: LD_INT 25
22680: PUSH
22681: LD_INT 26
22683: PUSH
22684: LD_INT 30
22686: PUSH
22687: LD_INT 31
22689: PUSH
22690: LD_INT 32
22692: PUSH
22693: LD_INT 33
22695: PUSH
22696: LD_INT 34
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 101
22722: PUSH
22723: LD_INT 102
22725: PUSH
22726: LD_INT 103
22728: PUSH
22729: LD_INT 106
22731: PUSH
22732: LD_INT 108
22734: PUSH
22735: LD_INT 112
22737: PUSH
22738: LD_INT 113
22740: PUSH
22741: LD_INT 114
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: ST_TO_ADDR
22758: GO 23353
22760: LD_INT 17
22762: DOUBLE
22763: EQUAL
22764: IFTRUE 22768
22766: GO 22980
22768: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22769: LD_ADDR_VAR 0 1
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: LD_INT 2
22779: PUSH
22780: LD_INT 3
22782: PUSH
22783: LD_INT 4
22785: PUSH
22786: LD_INT 5
22788: PUSH
22789: LD_INT 6
22791: PUSH
22792: LD_INT 7
22794: PUSH
22795: LD_INT 8
22797: PUSH
22798: LD_INT 9
22800: PUSH
22801: LD_INT 10
22803: PUSH
22804: LD_INT 11
22806: PUSH
22807: LD_INT 12
22809: PUSH
22810: LD_INT 13
22812: PUSH
22813: LD_INT 14
22815: PUSH
22816: LD_INT 15
22818: PUSH
22819: LD_INT 16
22821: PUSH
22822: LD_INT 17
22824: PUSH
22825: LD_INT 18
22827: PUSH
22828: LD_INT 19
22830: PUSH
22831: LD_INT 20
22833: PUSH
22834: LD_INT 21
22836: PUSH
22837: LD_INT 22
22839: PUSH
22840: LD_INT 23
22842: PUSH
22843: LD_INT 24
22845: PUSH
22846: LD_INT 25
22848: PUSH
22849: LD_INT 26
22851: PUSH
22852: LD_INT 27
22854: PUSH
22855: LD_INT 28
22857: PUSH
22858: LD_INT 29
22860: PUSH
22861: LD_INT 30
22863: PUSH
22864: LD_INT 31
22866: PUSH
22867: LD_INT 32
22869: PUSH
22870: LD_INT 33
22872: PUSH
22873: LD_INT 34
22875: PUSH
22876: LD_INT 36
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 101
22918: PUSH
22919: LD_INT 102
22921: PUSH
22922: LD_INT 103
22924: PUSH
22925: LD_INT 104
22927: PUSH
22928: LD_INT 105
22930: PUSH
22931: LD_INT 106
22933: PUSH
22934: LD_INT 107
22936: PUSH
22937: LD_INT 108
22939: PUSH
22940: LD_INT 109
22942: PUSH
22943: LD_INT 110
22945: PUSH
22946: LD_INT 111
22948: PUSH
22949: LD_INT 112
22951: PUSH
22952: LD_INT 113
22954: PUSH
22955: LD_INT 114
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: ST_TO_ADDR
22978: GO 23353
22980: LD_INT 18
22982: DOUBLE
22983: EQUAL
22984: IFTRUE 22988
22986: GO 23124
22988: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22989: LD_ADDR_VAR 0 1
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: LD_INT 4
22999: PUSH
23000: LD_INT 5
23002: PUSH
23003: LD_INT 7
23005: PUSH
23006: LD_INT 11
23008: PUSH
23009: LD_INT 12
23011: PUSH
23012: LD_INT 15
23014: PUSH
23015: LD_INT 16
23017: PUSH
23018: LD_INT 20
23020: PUSH
23021: LD_INT 21
23023: PUSH
23024: LD_INT 22
23026: PUSH
23027: LD_INT 23
23029: PUSH
23030: LD_INT 25
23032: PUSH
23033: LD_INT 26
23035: PUSH
23036: LD_INT 30
23038: PUSH
23039: LD_INT 31
23041: PUSH
23042: LD_INT 32
23044: PUSH
23045: LD_INT 33
23047: PUSH
23048: LD_INT 34
23050: PUSH
23051: LD_INT 35
23053: PUSH
23054: LD_INT 36
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 101
23082: PUSH
23083: LD_INT 102
23085: PUSH
23086: LD_INT 103
23088: PUSH
23089: LD_INT 106
23091: PUSH
23092: LD_INT 108
23094: PUSH
23095: LD_INT 112
23097: PUSH
23098: LD_INT 113
23100: PUSH
23101: LD_INT 114
23103: PUSH
23104: LD_INT 115
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: ST_TO_ADDR
23122: GO 23353
23124: LD_INT 19
23126: DOUBLE
23127: EQUAL
23128: IFTRUE 23132
23130: GO 23352
23132: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23133: LD_ADDR_VAR 0 1
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: LD_INT 2
23143: PUSH
23144: LD_INT 3
23146: PUSH
23147: LD_INT 4
23149: PUSH
23150: LD_INT 5
23152: PUSH
23153: LD_INT 6
23155: PUSH
23156: LD_INT 7
23158: PUSH
23159: LD_INT 8
23161: PUSH
23162: LD_INT 9
23164: PUSH
23165: LD_INT 10
23167: PUSH
23168: LD_INT 11
23170: PUSH
23171: LD_INT 12
23173: PUSH
23174: LD_INT 13
23176: PUSH
23177: LD_INT 14
23179: PUSH
23180: LD_INT 15
23182: PUSH
23183: LD_INT 16
23185: PUSH
23186: LD_INT 17
23188: PUSH
23189: LD_INT 18
23191: PUSH
23192: LD_INT 19
23194: PUSH
23195: LD_INT 20
23197: PUSH
23198: LD_INT 21
23200: PUSH
23201: LD_INT 22
23203: PUSH
23204: LD_INT 23
23206: PUSH
23207: LD_INT 24
23209: PUSH
23210: LD_INT 25
23212: PUSH
23213: LD_INT 26
23215: PUSH
23216: LD_INT 27
23218: PUSH
23219: LD_INT 28
23221: PUSH
23222: LD_INT 29
23224: PUSH
23225: LD_INT 30
23227: PUSH
23228: LD_INT 31
23230: PUSH
23231: LD_INT 32
23233: PUSH
23234: LD_INT 33
23236: PUSH
23237: LD_INT 34
23239: PUSH
23240: LD_INT 35
23242: PUSH
23243: LD_INT 36
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 101
23286: PUSH
23287: LD_INT 102
23289: PUSH
23290: LD_INT 103
23292: PUSH
23293: LD_INT 104
23295: PUSH
23296: LD_INT 105
23298: PUSH
23299: LD_INT 106
23301: PUSH
23302: LD_INT 107
23304: PUSH
23305: LD_INT 108
23307: PUSH
23308: LD_INT 109
23310: PUSH
23311: LD_INT 110
23313: PUSH
23314: LD_INT 111
23316: PUSH
23317: LD_INT 112
23319: PUSH
23320: LD_INT 113
23322: PUSH
23323: LD_INT 114
23325: PUSH
23326: LD_INT 115
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: ST_TO_ADDR
23350: GO 23353
23352: POP
// end else
23353: GO 23572
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23355: LD_ADDR_VAR 0 1
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: LD_INT 2
23365: PUSH
23366: LD_INT 3
23368: PUSH
23369: LD_INT 4
23371: PUSH
23372: LD_INT 5
23374: PUSH
23375: LD_INT 6
23377: PUSH
23378: LD_INT 7
23380: PUSH
23381: LD_INT 8
23383: PUSH
23384: LD_INT 9
23386: PUSH
23387: LD_INT 10
23389: PUSH
23390: LD_INT 11
23392: PUSH
23393: LD_INT 12
23395: PUSH
23396: LD_INT 13
23398: PUSH
23399: LD_INT 14
23401: PUSH
23402: LD_INT 15
23404: PUSH
23405: LD_INT 16
23407: PUSH
23408: LD_INT 17
23410: PUSH
23411: LD_INT 18
23413: PUSH
23414: LD_INT 19
23416: PUSH
23417: LD_INT 20
23419: PUSH
23420: LD_INT 21
23422: PUSH
23423: LD_INT 22
23425: PUSH
23426: LD_INT 23
23428: PUSH
23429: LD_INT 24
23431: PUSH
23432: LD_INT 25
23434: PUSH
23435: LD_INT 26
23437: PUSH
23438: LD_INT 27
23440: PUSH
23441: LD_INT 28
23443: PUSH
23444: LD_INT 29
23446: PUSH
23447: LD_INT 30
23449: PUSH
23450: LD_INT 31
23452: PUSH
23453: LD_INT 32
23455: PUSH
23456: LD_INT 33
23458: PUSH
23459: LD_INT 34
23461: PUSH
23462: LD_INT 35
23464: PUSH
23465: LD_INT 36
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 101
23508: PUSH
23509: LD_INT 102
23511: PUSH
23512: LD_INT 103
23514: PUSH
23515: LD_INT 104
23517: PUSH
23518: LD_INT 105
23520: PUSH
23521: LD_INT 106
23523: PUSH
23524: LD_INT 107
23526: PUSH
23527: LD_INT 108
23529: PUSH
23530: LD_INT 109
23532: PUSH
23533: LD_INT 110
23535: PUSH
23536: LD_INT 111
23538: PUSH
23539: LD_INT 112
23541: PUSH
23542: LD_INT 113
23544: PUSH
23545: LD_INT 114
23547: PUSH
23548: LD_INT 115
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: ST_TO_ADDR
// if result then
23572: LD_VAR 0 1
23576: IFFALSE 23865
// begin normal :=  ;
23578: LD_ADDR_VAR 0 3
23582: PUSH
23583: LD_STRING 
23585: ST_TO_ADDR
// hardcore :=  ;
23586: LD_ADDR_VAR 0 4
23590: PUSH
23591: LD_STRING 
23593: ST_TO_ADDR
// for i = 1 to normalCounter do
23594: LD_ADDR_VAR 0 5
23598: PUSH
23599: DOUBLE
23600: LD_INT 1
23602: DEC
23603: ST_TO_ADDR
23604: LD_EXP 60
23608: PUSH
23609: FOR_TO
23610: IFFALSE 23711
// begin tmp := 0 ;
23612: LD_ADDR_VAR 0 2
23616: PUSH
23617: LD_STRING 0
23619: ST_TO_ADDR
// if result [ 1 ] then
23620: LD_VAR 0 1
23624: PUSH
23625: LD_INT 1
23627: ARRAY
23628: IFFALSE 23693
// if result [ 1 ] [ 1 ] = i then
23630: LD_VAR 0 1
23634: PUSH
23635: LD_INT 1
23637: ARRAY
23638: PUSH
23639: LD_INT 1
23641: ARRAY
23642: PUSH
23643: LD_VAR 0 5
23647: EQUAL
23648: IFFALSE 23693
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23650: LD_ADDR_VAR 0 1
23654: PUSH
23655: LD_VAR 0 1
23659: PPUSH
23660: LD_INT 1
23662: PPUSH
23663: LD_VAR 0 1
23667: PUSH
23668: LD_INT 1
23670: ARRAY
23671: PPUSH
23672: LD_INT 1
23674: PPUSH
23675: CALL_OW 3
23679: PPUSH
23680: CALL_OW 1
23684: ST_TO_ADDR
// tmp := 1 ;
23685: LD_ADDR_VAR 0 2
23689: PUSH
23690: LD_STRING 1
23692: ST_TO_ADDR
// end ; normal := normal & tmp ;
23693: LD_ADDR_VAR 0 3
23697: PUSH
23698: LD_VAR 0 3
23702: PUSH
23703: LD_VAR 0 2
23707: STR
23708: ST_TO_ADDR
// end ;
23709: GO 23609
23711: POP
23712: POP
// for i = 1 to hardcoreCounter do
23713: LD_ADDR_VAR 0 5
23717: PUSH
23718: DOUBLE
23719: LD_INT 1
23721: DEC
23722: ST_TO_ADDR
23723: LD_EXP 61
23727: PUSH
23728: FOR_TO
23729: IFFALSE 23834
// begin tmp := 0 ;
23731: LD_ADDR_VAR 0 2
23735: PUSH
23736: LD_STRING 0
23738: ST_TO_ADDR
// if result [ 2 ] then
23739: LD_VAR 0 1
23743: PUSH
23744: LD_INT 2
23746: ARRAY
23747: IFFALSE 23816
// if result [ 2 ] [ 1 ] = 100 + i then
23749: LD_VAR 0 1
23753: PUSH
23754: LD_INT 2
23756: ARRAY
23757: PUSH
23758: LD_INT 1
23760: ARRAY
23761: PUSH
23762: LD_INT 100
23764: PUSH
23765: LD_VAR 0 5
23769: PLUS
23770: EQUAL
23771: IFFALSE 23816
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23773: LD_ADDR_VAR 0 1
23777: PUSH
23778: LD_VAR 0 1
23782: PPUSH
23783: LD_INT 2
23785: PPUSH
23786: LD_VAR 0 1
23790: PUSH
23791: LD_INT 2
23793: ARRAY
23794: PPUSH
23795: LD_INT 1
23797: PPUSH
23798: CALL_OW 3
23802: PPUSH
23803: CALL_OW 1
23807: ST_TO_ADDR
// tmp := 1 ;
23808: LD_ADDR_VAR 0 2
23812: PUSH
23813: LD_STRING 1
23815: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23816: LD_ADDR_VAR 0 4
23820: PUSH
23821: LD_VAR 0 4
23825: PUSH
23826: LD_VAR 0 2
23830: STR
23831: ST_TO_ADDR
// end ;
23832: GO 23728
23834: POP
23835: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23836: LD_STRING getStreamItemsFromMission("
23838: PUSH
23839: LD_VAR 0 3
23843: STR
23844: PUSH
23845: LD_STRING ","
23847: STR
23848: PUSH
23849: LD_VAR 0 4
23853: STR
23854: PUSH
23855: LD_STRING ")
23857: STR
23858: PPUSH
23859: CALL_OW 559
// end else
23863: GO 23872
// ToLua ( getStreamItemsFromMission("","") ) ;
23865: LD_STRING getStreamItemsFromMission("","")
23867: PPUSH
23868: CALL_OW 559
// end ;
23872: LD_VAR 0 1
23876: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23877: LD_EXP 59
23881: PUSH
23882: LD_EXP 64
23886: AND
23887: IFFALSE 24011
23889: GO 23891
23891: DISABLE
23892: LD_INT 0
23894: PPUSH
23895: PPUSH
// begin enable ;
23896: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23897: LD_ADDR_VAR 0 2
23901: PUSH
23902: LD_INT 22
23904: PUSH
23905: LD_OWVAR 2
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: LD_INT 34
23919: PUSH
23920: LD_INT 7
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 34
23929: PUSH
23930: LD_INT 45
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 34
23939: PUSH
23940: LD_INT 28
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 34
23949: PUSH
23950: LD_INT 47
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PPUSH
23968: CALL_OW 69
23972: ST_TO_ADDR
// if not tmp then
23973: LD_VAR 0 2
23977: NOT
23978: IFFALSE 23982
// exit ;
23980: GO 24011
// for i in tmp do
23982: LD_ADDR_VAR 0 1
23986: PUSH
23987: LD_VAR 0 2
23991: PUSH
23992: FOR_IN
23993: IFFALSE 24009
// begin SetLives ( i , 0 ) ;
23995: LD_VAR 0 1
23999: PPUSH
24000: LD_INT 0
24002: PPUSH
24003: CALL_OW 234
// end ;
24007: GO 23992
24009: POP
24010: POP
// end ;
24011: PPOPN 2
24013: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24014: LD_EXP 59
24018: PUSH
24019: LD_EXP 65
24023: AND
24024: IFFALSE 24108
24026: GO 24028
24028: DISABLE
24029: LD_INT 0
24031: PPUSH
24032: PPUSH
// begin enable ;
24033: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24034: LD_ADDR_VAR 0 2
24038: PUSH
24039: LD_INT 22
24041: PUSH
24042: LD_OWVAR 2
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: LD_INT 32
24053: PUSH
24054: LD_INT 3
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PPUSH
24065: CALL_OW 69
24069: ST_TO_ADDR
// if not tmp then
24070: LD_VAR 0 2
24074: NOT
24075: IFFALSE 24079
// exit ;
24077: GO 24108
// for i in tmp do
24079: LD_ADDR_VAR 0 1
24083: PUSH
24084: LD_VAR 0 2
24088: PUSH
24089: FOR_IN
24090: IFFALSE 24106
// begin SetLives ( i , 0 ) ;
24092: LD_VAR 0 1
24096: PPUSH
24097: LD_INT 0
24099: PPUSH
24100: CALL_OW 234
// end ;
24104: GO 24089
24106: POP
24107: POP
// end ;
24108: PPOPN 2
24110: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24111: LD_EXP 59
24115: PUSH
24116: LD_EXP 62
24120: AND
24121: IFFALSE 24214
24123: GO 24125
24125: DISABLE
24126: LD_INT 0
24128: PPUSH
// begin enable ;
24129: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24130: LD_ADDR_VAR 0 1
24134: PUSH
24135: LD_INT 22
24137: PUSH
24138: LD_OWVAR 2
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: LD_INT 25
24152: PUSH
24153: LD_INT 5
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 25
24162: PUSH
24163: LD_INT 9
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 25
24172: PUSH
24173: LD_INT 8
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PPUSH
24190: CALL_OW 69
24194: PUSH
24195: FOR_IN
24196: IFFALSE 24212
// begin SetClass ( i , 1 ) ;
24198: LD_VAR 0 1
24202: PPUSH
24203: LD_INT 1
24205: PPUSH
24206: CALL_OW 336
// end ;
24210: GO 24195
24212: POP
24213: POP
// end ;
24214: PPOPN 1
24216: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24217: LD_EXP 59
24221: PUSH
24222: LD_EXP 63
24226: AND
24227: PUSH
24228: LD_OWVAR 65
24232: PUSH
24233: LD_INT 7
24235: LESS
24236: AND
24237: IFFALSE 24251
24239: GO 24241
24241: DISABLE
// begin enable ;
24242: ENABLE
// game_speed := 7 ;
24243: LD_ADDR_OWVAR 65
24247: PUSH
24248: LD_INT 7
24250: ST_TO_ADDR
// end ;
24251: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24252: LD_EXP 59
24256: PUSH
24257: LD_EXP 66
24261: AND
24262: IFFALSE 24464
24264: GO 24266
24266: DISABLE
24267: LD_INT 0
24269: PPUSH
24270: PPUSH
24271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24272: LD_ADDR_VAR 0 3
24276: PUSH
24277: LD_INT 81
24279: PUSH
24280: LD_OWVAR 2
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 21
24291: PUSH
24292: LD_INT 1
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PPUSH
24303: CALL_OW 69
24307: ST_TO_ADDR
// if not tmp then
24308: LD_VAR 0 3
24312: NOT
24313: IFFALSE 24317
// exit ;
24315: GO 24464
// if tmp > 5 then
24317: LD_VAR 0 3
24321: PUSH
24322: LD_INT 5
24324: GREATER
24325: IFFALSE 24337
// k := 5 else
24327: LD_ADDR_VAR 0 2
24331: PUSH
24332: LD_INT 5
24334: ST_TO_ADDR
24335: GO 24347
// k := tmp ;
24337: LD_ADDR_VAR 0 2
24341: PUSH
24342: LD_VAR 0 3
24346: ST_TO_ADDR
// for i := 1 to k do
24347: LD_ADDR_VAR 0 1
24351: PUSH
24352: DOUBLE
24353: LD_INT 1
24355: DEC
24356: ST_TO_ADDR
24357: LD_VAR 0 2
24361: PUSH
24362: FOR_TO
24363: IFFALSE 24462
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24365: LD_VAR 0 3
24369: PUSH
24370: LD_VAR 0 1
24374: ARRAY
24375: PPUSH
24376: LD_VAR 0 1
24380: PUSH
24381: LD_INT 4
24383: MOD
24384: PUSH
24385: LD_INT 1
24387: PLUS
24388: PPUSH
24389: CALL_OW 259
24393: PUSH
24394: LD_INT 10
24396: LESS
24397: IFFALSE 24460
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24399: LD_VAR 0 3
24403: PUSH
24404: LD_VAR 0 1
24408: ARRAY
24409: PPUSH
24410: LD_VAR 0 1
24414: PUSH
24415: LD_INT 4
24417: MOD
24418: PUSH
24419: LD_INT 1
24421: PLUS
24422: PPUSH
24423: LD_VAR 0 3
24427: PUSH
24428: LD_VAR 0 1
24432: ARRAY
24433: PPUSH
24434: LD_VAR 0 1
24438: PUSH
24439: LD_INT 4
24441: MOD
24442: PUSH
24443: LD_INT 1
24445: PLUS
24446: PPUSH
24447: CALL_OW 259
24451: PUSH
24452: LD_INT 1
24454: PLUS
24455: PPUSH
24456: CALL_OW 237
24460: GO 24362
24462: POP
24463: POP
// end ;
24464: PPOPN 3
24466: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24467: LD_EXP 59
24471: PUSH
24472: LD_EXP 67
24476: AND
24477: IFFALSE 24497
24479: GO 24481
24481: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24482: LD_INT 4
24484: PPUSH
24485: LD_OWVAR 2
24489: PPUSH
24490: LD_INT 0
24492: PPUSH
24493: CALL_OW 324
24497: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24498: LD_EXP 59
24502: PUSH
24503: LD_EXP 96
24507: AND
24508: IFFALSE 24528
24510: GO 24512
24512: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24513: LD_INT 19
24515: PPUSH
24516: LD_OWVAR 2
24520: PPUSH
24521: LD_INT 0
24523: PPUSH
24524: CALL_OW 324
24528: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24529: LD_EXP 59
24533: PUSH
24534: LD_EXP 68
24538: AND
24539: IFFALSE 24641
24541: GO 24543
24543: DISABLE
24544: LD_INT 0
24546: PPUSH
24547: PPUSH
// begin enable ;
24548: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24549: LD_ADDR_VAR 0 2
24553: PUSH
24554: LD_INT 22
24556: PUSH
24557: LD_OWVAR 2
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 2
24568: PUSH
24569: LD_INT 34
24571: PUSH
24572: LD_INT 11
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 34
24581: PUSH
24582: LD_INT 30
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: LIST
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PPUSH
24598: CALL_OW 69
24602: ST_TO_ADDR
// if not tmp then
24603: LD_VAR 0 2
24607: NOT
24608: IFFALSE 24612
// exit ;
24610: GO 24641
// for i in tmp do
24612: LD_ADDR_VAR 0 1
24616: PUSH
24617: LD_VAR 0 2
24621: PUSH
24622: FOR_IN
24623: IFFALSE 24639
// begin SetLives ( i , 0 ) ;
24625: LD_VAR 0 1
24629: PPUSH
24630: LD_INT 0
24632: PPUSH
24633: CALL_OW 234
// end ;
24637: GO 24622
24639: POP
24640: POP
// end ;
24641: PPOPN 2
24643: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24644: LD_EXP 59
24648: PUSH
24649: LD_EXP 69
24653: AND
24654: IFFALSE 24674
24656: GO 24658
24658: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24659: LD_INT 32
24661: PPUSH
24662: LD_OWVAR 2
24666: PPUSH
24667: LD_INT 0
24669: PPUSH
24670: CALL_OW 324
24674: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24675: LD_EXP 59
24679: PUSH
24680: LD_EXP 70
24684: AND
24685: IFFALSE 24866
24687: GO 24689
24689: DISABLE
24690: LD_INT 0
24692: PPUSH
24693: PPUSH
24694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24695: LD_ADDR_VAR 0 2
24699: PUSH
24700: LD_INT 22
24702: PUSH
24703: LD_OWVAR 2
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 33
24714: PUSH
24715: LD_INT 3
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PPUSH
24726: CALL_OW 69
24730: ST_TO_ADDR
// if not tmp then
24731: LD_VAR 0 2
24735: NOT
24736: IFFALSE 24740
// exit ;
24738: GO 24866
// side := 0 ;
24740: LD_ADDR_VAR 0 3
24744: PUSH
24745: LD_INT 0
24747: ST_TO_ADDR
// for i := 1 to 8 do
24748: LD_ADDR_VAR 0 1
24752: PUSH
24753: DOUBLE
24754: LD_INT 1
24756: DEC
24757: ST_TO_ADDR
24758: LD_INT 8
24760: PUSH
24761: FOR_TO
24762: IFFALSE 24810
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24764: LD_OWVAR 2
24768: PUSH
24769: LD_VAR 0 1
24773: NONEQUAL
24774: PUSH
24775: LD_OWVAR 2
24779: PPUSH
24780: LD_VAR 0 1
24784: PPUSH
24785: CALL_OW 81
24789: PUSH
24790: LD_INT 2
24792: EQUAL
24793: AND
24794: IFFALSE 24808
// begin side := i ;
24796: LD_ADDR_VAR 0 3
24800: PUSH
24801: LD_VAR 0 1
24805: ST_TO_ADDR
// break ;
24806: GO 24810
// end ;
24808: GO 24761
24810: POP
24811: POP
// if not side then
24812: LD_VAR 0 3
24816: NOT
24817: IFFALSE 24821
// exit ;
24819: GO 24866
// for i := 1 to tmp do
24821: LD_ADDR_VAR 0 1
24825: PUSH
24826: DOUBLE
24827: LD_INT 1
24829: DEC
24830: ST_TO_ADDR
24831: LD_VAR 0 2
24835: PUSH
24836: FOR_TO
24837: IFFALSE 24864
// if Prob ( 60 ) then
24839: LD_INT 60
24841: PPUSH
24842: CALL_OW 13
24846: IFFALSE 24862
// SetSide ( i , side ) ;
24848: LD_VAR 0 1
24852: PPUSH
24853: LD_VAR 0 3
24857: PPUSH
24858: CALL_OW 235
24862: GO 24836
24864: POP
24865: POP
// end ;
24866: PPOPN 3
24868: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24869: LD_EXP 59
24873: PUSH
24874: LD_EXP 72
24878: AND
24879: IFFALSE 24998
24881: GO 24883
24883: DISABLE
24884: LD_INT 0
24886: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24887: LD_ADDR_VAR 0 1
24891: PUSH
24892: LD_INT 22
24894: PUSH
24895: LD_OWVAR 2
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 21
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 3
24916: PUSH
24917: LD_INT 23
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: LIST
24935: PPUSH
24936: CALL_OW 69
24940: PUSH
24941: FOR_IN
24942: IFFALSE 24996
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24944: LD_VAR 0 1
24948: PPUSH
24949: CALL_OW 257
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: LD_INT 2
24959: PUSH
24960: LD_INT 3
24962: PUSH
24963: LD_INT 4
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: IN
24972: IFFALSE 24994
// SetClass ( un , rand ( 1 , 4 ) ) ;
24974: LD_VAR 0 1
24978: PPUSH
24979: LD_INT 1
24981: PPUSH
24982: LD_INT 4
24984: PPUSH
24985: CALL_OW 12
24989: PPUSH
24990: CALL_OW 336
24994: GO 24941
24996: POP
24997: POP
// end ;
24998: PPOPN 1
25000: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25001: LD_EXP 59
25005: PUSH
25006: LD_EXP 71
25010: AND
25011: IFFALSE 25090
25013: GO 25015
25015: DISABLE
25016: LD_INT 0
25018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25019: LD_ADDR_VAR 0 1
25023: PUSH
25024: LD_INT 22
25026: PUSH
25027: LD_OWVAR 2
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 21
25038: PUSH
25039: LD_INT 3
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PPUSH
25050: CALL_OW 69
25054: ST_TO_ADDR
// if not tmp then
25055: LD_VAR 0 1
25059: NOT
25060: IFFALSE 25064
// exit ;
25062: GO 25090
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25064: LD_VAR 0 1
25068: PUSH
25069: LD_INT 1
25071: PPUSH
25072: LD_VAR 0 1
25076: PPUSH
25077: CALL_OW 12
25081: ARRAY
25082: PPUSH
25083: LD_INT 100
25085: PPUSH
25086: CALL_OW 234
// end ;
25090: PPOPN 1
25092: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25093: LD_EXP 59
25097: PUSH
25098: LD_EXP 73
25102: AND
25103: IFFALSE 25201
25105: GO 25107
25107: DISABLE
25108: LD_INT 0
25110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25111: LD_ADDR_VAR 0 1
25115: PUSH
25116: LD_INT 22
25118: PUSH
25119: LD_OWVAR 2
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 21
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PPUSH
25142: CALL_OW 69
25146: ST_TO_ADDR
// if not tmp then
25147: LD_VAR 0 1
25151: NOT
25152: IFFALSE 25156
// exit ;
25154: GO 25201
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25156: LD_VAR 0 1
25160: PUSH
25161: LD_INT 1
25163: PPUSH
25164: LD_VAR 0 1
25168: PPUSH
25169: CALL_OW 12
25173: ARRAY
25174: PPUSH
25175: LD_INT 1
25177: PPUSH
25178: LD_INT 4
25180: PPUSH
25181: CALL_OW 12
25185: PPUSH
25186: LD_INT 3000
25188: PPUSH
25189: LD_INT 9000
25191: PPUSH
25192: CALL_OW 12
25196: PPUSH
25197: CALL_OW 492
// end ;
25201: PPOPN 1
25203: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25204: LD_EXP 59
25208: PUSH
25209: LD_EXP 74
25213: AND
25214: IFFALSE 25234
25216: GO 25218
25218: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25219: LD_INT 1
25221: PPUSH
25222: LD_OWVAR 2
25226: PPUSH
25227: LD_INT 0
25229: PPUSH
25230: CALL_OW 324
25234: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25235: LD_EXP 59
25239: PUSH
25240: LD_EXP 75
25244: AND
25245: IFFALSE 25328
25247: GO 25249
25249: DISABLE
25250: LD_INT 0
25252: PPUSH
25253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25254: LD_ADDR_VAR 0 2
25258: PUSH
25259: LD_INT 22
25261: PUSH
25262: LD_OWVAR 2
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 21
25273: PUSH
25274: LD_INT 3
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PPUSH
25285: CALL_OW 69
25289: ST_TO_ADDR
// if not tmp then
25290: LD_VAR 0 2
25294: NOT
25295: IFFALSE 25299
// exit ;
25297: GO 25328
// for i in tmp do
25299: LD_ADDR_VAR 0 1
25303: PUSH
25304: LD_VAR 0 2
25308: PUSH
25309: FOR_IN
25310: IFFALSE 25326
// SetBLevel ( i , 10 ) ;
25312: LD_VAR 0 1
25316: PPUSH
25317: LD_INT 10
25319: PPUSH
25320: CALL_OW 241
25324: GO 25309
25326: POP
25327: POP
// end ;
25328: PPOPN 2
25330: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25331: LD_EXP 59
25335: PUSH
25336: LD_EXP 76
25340: AND
25341: IFFALSE 25452
25343: GO 25345
25345: DISABLE
25346: LD_INT 0
25348: PPUSH
25349: PPUSH
25350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25351: LD_ADDR_VAR 0 3
25355: PUSH
25356: LD_INT 22
25358: PUSH
25359: LD_OWVAR 2
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 25
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PPUSH
25382: CALL_OW 69
25386: ST_TO_ADDR
// if not tmp then
25387: LD_VAR 0 3
25391: NOT
25392: IFFALSE 25396
// exit ;
25394: GO 25452
// un := tmp [ rand ( 1 , tmp ) ] ;
25396: LD_ADDR_VAR 0 2
25400: PUSH
25401: LD_VAR 0 3
25405: PUSH
25406: LD_INT 1
25408: PPUSH
25409: LD_VAR 0 3
25413: PPUSH
25414: CALL_OW 12
25418: ARRAY
25419: ST_TO_ADDR
// if Crawls ( un ) then
25420: LD_VAR 0 2
25424: PPUSH
25425: CALL_OW 318
25429: IFFALSE 25440
// ComWalk ( un ) ;
25431: LD_VAR 0 2
25435: PPUSH
25436: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25440: LD_VAR 0 2
25444: PPUSH
25445: LD_INT 5
25447: PPUSH
25448: CALL_OW 336
// end ;
25452: PPOPN 3
25454: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
25455: LD_EXP 59
25459: PUSH
25460: LD_EXP 77
25464: AND
25465: PUSH
25466: LD_OWVAR 67
25470: PUSH
25471: LD_INT 3
25473: LESS
25474: AND
25475: IFFALSE 25494
25477: GO 25479
25479: DISABLE
// Difficulty := Difficulty + 1 ;
25480: LD_ADDR_OWVAR 67
25484: PUSH
25485: LD_OWVAR 67
25489: PUSH
25490: LD_INT 1
25492: PLUS
25493: ST_TO_ADDR
25494: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25495: LD_EXP 59
25499: PUSH
25500: LD_EXP 78
25504: AND
25505: IFFALSE 25608
25507: GO 25509
25509: DISABLE
25510: LD_INT 0
25512: PPUSH
// begin for i := 1 to 5 do
25513: LD_ADDR_VAR 0 1
25517: PUSH
25518: DOUBLE
25519: LD_INT 1
25521: DEC
25522: ST_TO_ADDR
25523: LD_INT 5
25525: PUSH
25526: FOR_TO
25527: IFFALSE 25606
// begin uc_nation := nation_nature ;
25529: LD_ADDR_OWVAR 21
25533: PUSH
25534: LD_INT 0
25536: ST_TO_ADDR
// uc_side := 0 ;
25537: LD_ADDR_OWVAR 20
25541: PUSH
25542: LD_INT 0
25544: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25545: LD_ADDR_OWVAR 29
25549: PUSH
25550: LD_INT 12
25552: PUSH
25553: LD_INT 12
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: ST_TO_ADDR
// hc_agressivity := 20 ;
25560: LD_ADDR_OWVAR 35
25564: PUSH
25565: LD_INT 20
25567: ST_TO_ADDR
// hc_class := class_tiger ;
25568: LD_ADDR_OWVAR 28
25572: PUSH
25573: LD_INT 14
25575: ST_TO_ADDR
// hc_gallery :=  ;
25576: LD_ADDR_OWVAR 33
25580: PUSH
25581: LD_STRING 
25583: ST_TO_ADDR
// hc_name :=  ;
25584: LD_ADDR_OWVAR 26
25588: PUSH
25589: LD_STRING 
25591: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25592: CALL_OW 44
25596: PPUSH
25597: LD_INT 0
25599: PPUSH
25600: CALL_OW 51
// end ;
25604: GO 25526
25606: POP
25607: POP
// end ;
25608: PPOPN 1
25610: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25611: LD_EXP 59
25615: PUSH
25616: LD_EXP 79
25620: AND
25621: IFFALSE 25630
25623: GO 25625
25625: DISABLE
// StreamSibBomb ;
25626: CALL 25631 0 0
25630: END
// export function StreamSibBomb ; var i , x , y ; begin
25631: LD_INT 0
25633: PPUSH
25634: PPUSH
25635: PPUSH
25636: PPUSH
// result := false ;
25637: LD_ADDR_VAR 0 1
25641: PUSH
25642: LD_INT 0
25644: ST_TO_ADDR
// for i := 1 to 16 do
25645: LD_ADDR_VAR 0 2
25649: PUSH
25650: DOUBLE
25651: LD_INT 1
25653: DEC
25654: ST_TO_ADDR
25655: LD_INT 16
25657: PUSH
25658: FOR_TO
25659: IFFALSE 25858
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25661: LD_ADDR_VAR 0 3
25665: PUSH
25666: LD_INT 10
25668: PUSH
25669: LD_INT 20
25671: PUSH
25672: LD_INT 30
25674: PUSH
25675: LD_INT 40
25677: PUSH
25678: LD_INT 50
25680: PUSH
25681: LD_INT 60
25683: PUSH
25684: LD_INT 70
25686: PUSH
25687: LD_INT 80
25689: PUSH
25690: LD_INT 90
25692: PUSH
25693: LD_INT 100
25695: PUSH
25696: LD_INT 110
25698: PUSH
25699: LD_INT 120
25701: PUSH
25702: LD_INT 130
25704: PUSH
25705: LD_INT 140
25707: PUSH
25708: LD_INT 150
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 1
25730: PPUSH
25731: LD_INT 15
25733: PPUSH
25734: CALL_OW 12
25738: ARRAY
25739: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25740: LD_ADDR_VAR 0 4
25744: PUSH
25745: LD_INT 10
25747: PUSH
25748: LD_INT 20
25750: PUSH
25751: LD_INT 30
25753: PUSH
25754: LD_INT 40
25756: PUSH
25757: LD_INT 50
25759: PUSH
25760: LD_INT 60
25762: PUSH
25763: LD_INT 70
25765: PUSH
25766: LD_INT 80
25768: PUSH
25769: LD_INT 90
25771: PUSH
25772: LD_INT 100
25774: PUSH
25775: LD_INT 110
25777: PUSH
25778: LD_INT 120
25780: PUSH
25781: LD_INT 130
25783: PUSH
25784: LD_INT 140
25786: PUSH
25787: LD_INT 150
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 1
25809: PPUSH
25810: LD_INT 15
25812: PPUSH
25813: CALL_OW 12
25817: ARRAY
25818: ST_TO_ADDR
// if ValidHex ( x , y ) then
25819: LD_VAR 0 3
25823: PPUSH
25824: LD_VAR 0 4
25828: PPUSH
25829: CALL_OW 488
25833: IFFALSE 25856
// begin result := [ x , y ] ;
25835: LD_ADDR_VAR 0 1
25839: PUSH
25840: LD_VAR 0 3
25844: PUSH
25845: LD_VAR 0 4
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: ST_TO_ADDR
// break ;
25854: GO 25858
// end ; end ;
25856: GO 25658
25858: POP
25859: POP
// if result then
25860: LD_VAR 0 1
25864: IFFALSE 25924
// begin ToLua ( playSibBomb() ) ;
25866: LD_STRING playSibBomb()
25868: PPUSH
25869: CALL_OW 559
// wait ( 0 0$14 ) ;
25873: LD_INT 490
25875: PPUSH
25876: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25880: LD_VAR 0 1
25884: PUSH
25885: LD_INT 1
25887: ARRAY
25888: PPUSH
25889: LD_VAR 0 1
25893: PUSH
25894: LD_INT 2
25896: ARRAY
25897: PPUSH
25898: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25902: LD_VAR 0 1
25906: PUSH
25907: LD_INT 1
25909: ARRAY
25910: PPUSH
25911: LD_VAR 0 1
25915: PUSH
25916: LD_INT 2
25918: ARRAY
25919: PPUSH
25920: CALL_OW 429
// end ; end ;
25924: LD_VAR 0 1
25928: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25929: LD_EXP 59
25933: PUSH
25934: LD_EXP 81
25938: AND
25939: IFFALSE 25951
25941: GO 25943
25943: DISABLE
// YouLost (  ) ;
25944: LD_STRING 
25946: PPUSH
25947: CALL_OW 104
25951: END
// every 0 0$1 trigger StreamModeActive and sFog do
25952: LD_EXP 59
25956: PUSH
25957: LD_EXP 80
25961: AND
25962: IFFALSE 25976
25964: GO 25966
25966: DISABLE
// FogOff ( your_side ) ;
25967: LD_OWVAR 2
25971: PPUSH
25972: CALL_OW 344
25976: END
// every 0 0$1 trigger StreamModeActive and sSun do
25977: LD_EXP 59
25981: PUSH
25982: LD_EXP 82
25986: AND
25987: IFFALSE 26015
25989: GO 25991
25991: DISABLE
// begin solar_recharge_percent := 0 ;
25992: LD_ADDR_OWVAR 79
25996: PUSH
25997: LD_INT 0
25999: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26000: LD_INT 10500
26002: PPUSH
26003: CALL_OW 67
// solar_recharge_percent := 100 ;
26007: LD_ADDR_OWVAR 79
26011: PUSH
26012: LD_INT 100
26014: ST_TO_ADDR
// end ;
26015: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26016: LD_EXP 59
26020: PUSH
26021: LD_EXP 83
26025: AND
26026: IFFALSE 26265
26028: GO 26030
26030: DISABLE
26031: LD_INT 0
26033: PPUSH
26034: PPUSH
26035: PPUSH
// begin tmp := [ ] ;
26036: LD_ADDR_VAR 0 3
26040: PUSH
26041: EMPTY
26042: ST_TO_ADDR
// for i := 1 to 6 do
26043: LD_ADDR_VAR 0 1
26047: PUSH
26048: DOUBLE
26049: LD_INT 1
26051: DEC
26052: ST_TO_ADDR
26053: LD_INT 6
26055: PUSH
26056: FOR_TO
26057: IFFALSE 26162
// begin uc_nation := nation_nature ;
26059: LD_ADDR_OWVAR 21
26063: PUSH
26064: LD_INT 0
26066: ST_TO_ADDR
// uc_side := 0 ;
26067: LD_ADDR_OWVAR 20
26071: PUSH
26072: LD_INT 0
26074: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26075: LD_ADDR_OWVAR 29
26079: PUSH
26080: LD_INT 12
26082: PUSH
26083: LD_INT 12
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: ST_TO_ADDR
// hc_agressivity := 20 ;
26090: LD_ADDR_OWVAR 35
26094: PUSH
26095: LD_INT 20
26097: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26098: LD_ADDR_OWVAR 28
26102: PUSH
26103: LD_INT 17
26105: ST_TO_ADDR
// hc_gallery :=  ;
26106: LD_ADDR_OWVAR 33
26110: PUSH
26111: LD_STRING 
26113: ST_TO_ADDR
// hc_name :=  ;
26114: LD_ADDR_OWVAR 26
26118: PUSH
26119: LD_STRING 
26121: ST_TO_ADDR
// un := CreateHuman ;
26122: LD_ADDR_VAR 0 2
26126: PUSH
26127: CALL_OW 44
26131: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26132: LD_VAR 0 2
26136: PPUSH
26137: LD_INT 1
26139: PPUSH
26140: CALL_OW 51
// tmp := tmp ^ un ;
26144: LD_ADDR_VAR 0 3
26148: PUSH
26149: LD_VAR 0 3
26153: PUSH
26154: LD_VAR 0 2
26158: ADD
26159: ST_TO_ADDR
// end ;
26160: GO 26056
26162: POP
26163: POP
// repeat wait ( 0 0$1 ) ;
26164: LD_INT 35
26166: PPUSH
26167: CALL_OW 67
// for un in tmp do
26171: LD_ADDR_VAR 0 2
26175: PUSH
26176: LD_VAR 0 3
26180: PUSH
26181: FOR_IN
26182: IFFALSE 26256
// begin if IsDead ( un ) then
26184: LD_VAR 0 2
26188: PPUSH
26189: CALL_OW 301
26193: IFFALSE 26213
// begin tmp := tmp diff un ;
26195: LD_ADDR_VAR 0 3
26199: PUSH
26200: LD_VAR 0 3
26204: PUSH
26205: LD_VAR 0 2
26209: DIFF
26210: ST_TO_ADDR
// continue ;
26211: GO 26181
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26213: LD_VAR 0 2
26217: PPUSH
26218: LD_INT 3
26220: PUSH
26221: LD_INT 22
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PPUSH
26235: CALL_OW 69
26239: PPUSH
26240: LD_VAR 0 2
26244: PPUSH
26245: CALL_OW 74
26249: PPUSH
26250: CALL_OW 115
// end ;
26254: GO 26181
26256: POP
26257: POP
// until not tmp ;
26258: LD_VAR 0 3
26262: NOT
26263: IFFALSE 26164
// end ;
26265: PPOPN 3
26267: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26268: LD_EXP 59
26272: PUSH
26273: LD_EXP 84
26277: AND
26278: IFFALSE 26332
26280: GO 26282
26282: DISABLE
// begin ToLua ( displayTroll(); ) ;
26283: LD_STRING displayTroll();
26285: PPUSH
26286: CALL_OW 559
// wait ( 3 3$00 ) ;
26290: LD_INT 6300
26292: PPUSH
26293: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26297: LD_STRING hideTroll();
26299: PPUSH
26300: CALL_OW 559
// wait ( 1 1$00 ) ;
26304: LD_INT 2100
26306: PPUSH
26307: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26311: LD_STRING displayTroll();
26313: PPUSH
26314: CALL_OW 559
// wait ( 1 1$00 ) ;
26318: LD_INT 2100
26320: PPUSH
26321: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26325: LD_STRING hideTroll();
26327: PPUSH
26328: CALL_OW 559
// end ;
26332: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26333: LD_EXP 59
26337: PUSH
26338: LD_EXP 85
26342: AND
26343: IFFALSE 26406
26345: GO 26347
26347: DISABLE
26348: LD_INT 0
26350: PPUSH
// begin p := 0 ;
26351: LD_ADDR_VAR 0 1
26355: PUSH
26356: LD_INT 0
26358: ST_TO_ADDR
// repeat game_speed := 1 ;
26359: LD_ADDR_OWVAR 65
26363: PUSH
26364: LD_INT 1
26366: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26367: LD_INT 35
26369: PPUSH
26370: CALL_OW 67
// p := p + 1 ;
26374: LD_ADDR_VAR 0 1
26378: PUSH
26379: LD_VAR 0 1
26383: PUSH
26384: LD_INT 1
26386: PLUS
26387: ST_TO_ADDR
// until p >= 60 ;
26388: LD_VAR 0 1
26392: PUSH
26393: LD_INT 60
26395: GREATEREQUAL
26396: IFFALSE 26359
// game_speed := 4 ;
26398: LD_ADDR_OWVAR 65
26402: PUSH
26403: LD_INT 4
26405: ST_TO_ADDR
// end ;
26406: PPOPN 1
26408: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26409: LD_EXP 59
26413: PUSH
26414: LD_EXP 86
26418: AND
26419: IFFALSE 26565
26421: GO 26423
26423: DISABLE
26424: LD_INT 0
26426: PPUSH
26427: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26428: LD_ADDR_VAR 0 1
26432: PUSH
26433: LD_INT 22
26435: PUSH
26436: LD_OWVAR 2
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 2
26447: PUSH
26448: LD_INT 30
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 30
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: LIST
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PPUSH
26477: CALL_OW 69
26481: ST_TO_ADDR
// if not depot then
26482: LD_VAR 0 1
26486: NOT
26487: IFFALSE 26491
// exit ;
26489: GO 26565
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26491: LD_ADDR_VAR 0 2
26495: PUSH
26496: LD_VAR 0 1
26500: PUSH
26501: LD_INT 1
26503: PPUSH
26504: LD_VAR 0 1
26508: PPUSH
26509: CALL_OW 12
26513: ARRAY
26514: PPUSH
26515: CALL_OW 274
26519: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26520: LD_VAR 0 2
26524: PPUSH
26525: LD_INT 1
26527: PPUSH
26528: LD_INT 0
26530: PPUSH
26531: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26535: LD_VAR 0 2
26539: PPUSH
26540: LD_INT 2
26542: PPUSH
26543: LD_INT 0
26545: PPUSH
26546: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26550: LD_VAR 0 2
26554: PPUSH
26555: LD_INT 3
26557: PPUSH
26558: LD_INT 0
26560: PPUSH
26561: CALL_OW 277
// end ;
26565: PPOPN 2
26567: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26568: LD_EXP 59
26572: PUSH
26573: LD_EXP 87
26577: AND
26578: IFFALSE 26675
26580: GO 26582
26582: DISABLE
26583: LD_INT 0
26585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26586: LD_ADDR_VAR 0 1
26590: PUSH
26591: LD_INT 22
26593: PUSH
26594: LD_OWVAR 2
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 21
26605: PUSH
26606: LD_INT 1
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 3
26615: PUSH
26616: LD_INT 23
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: LIST
26634: PPUSH
26635: CALL_OW 69
26639: ST_TO_ADDR
// if not tmp then
26640: LD_VAR 0 1
26644: NOT
26645: IFFALSE 26649
// exit ;
26647: GO 26675
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26649: LD_VAR 0 1
26653: PUSH
26654: LD_INT 1
26656: PPUSH
26657: LD_VAR 0 1
26661: PPUSH
26662: CALL_OW 12
26666: ARRAY
26667: PPUSH
26668: LD_INT 200
26670: PPUSH
26671: CALL_OW 234
// end ;
26675: PPOPN 1
26677: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26678: LD_EXP 59
26682: PUSH
26683: LD_EXP 88
26687: AND
26688: IFFALSE 26767
26690: GO 26692
26692: DISABLE
26693: LD_INT 0
26695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26696: LD_ADDR_VAR 0 1
26700: PUSH
26701: LD_INT 22
26703: PUSH
26704: LD_OWVAR 2
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 21
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PPUSH
26727: CALL_OW 69
26731: ST_TO_ADDR
// if not tmp then
26732: LD_VAR 0 1
26736: NOT
26737: IFFALSE 26741
// exit ;
26739: GO 26767
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26741: LD_VAR 0 1
26745: PUSH
26746: LD_INT 1
26748: PPUSH
26749: LD_VAR 0 1
26753: PPUSH
26754: CALL_OW 12
26758: ARRAY
26759: PPUSH
26760: LD_INT 60
26762: PPUSH
26763: CALL_OW 234
// end ;
26767: PPOPN 1
26769: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26770: LD_EXP 59
26774: PUSH
26775: LD_EXP 89
26779: AND
26780: IFFALSE 26879
26782: GO 26784
26784: DISABLE
26785: LD_INT 0
26787: PPUSH
26788: PPUSH
// begin enable ;
26789: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26790: LD_ADDR_VAR 0 1
26794: PUSH
26795: LD_INT 22
26797: PUSH
26798: LD_OWVAR 2
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 61
26809: PUSH
26810: EMPTY
26811: LIST
26812: PUSH
26813: LD_INT 33
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: LIST
26827: PPUSH
26828: CALL_OW 69
26832: ST_TO_ADDR
// if not tmp then
26833: LD_VAR 0 1
26837: NOT
26838: IFFALSE 26842
// exit ;
26840: GO 26879
// for i in tmp do
26842: LD_ADDR_VAR 0 2
26846: PUSH
26847: LD_VAR 0 1
26851: PUSH
26852: FOR_IN
26853: IFFALSE 26877
// if IsControledBy ( i ) then
26855: LD_VAR 0 2
26859: PPUSH
26860: CALL_OW 312
26864: IFFALSE 26875
// ComUnlink ( i ) ;
26866: LD_VAR 0 2
26870: PPUSH
26871: CALL_OW 136
26875: GO 26852
26877: POP
26878: POP
// end ;
26879: PPOPN 2
26881: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26882: LD_EXP 59
26886: PUSH
26887: LD_EXP 90
26891: AND
26892: IFFALSE 27032
26894: GO 26896
26896: DISABLE
26897: LD_INT 0
26899: PPUSH
26900: PPUSH
// begin ToLua ( displayPowell(); ) ;
26901: LD_STRING displayPowell();
26903: PPUSH
26904: CALL_OW 559
// uc_side := 0 ;
26908: LD_ADDR_OWVAR 20
26912: PUSH
26913: LD_INT 0
26915: ST_TO_ADDR
// uc_nation := 2 ;
26916: LD_ADDR_OWVAR 21
26920: PUSH
26921: LD_INT 2
26923: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26924: LD_ADDR_OWVAR 37
26928: PUSH
26929: LD_INT 14
26931: ST_TO_ADDR
// vc_engine := engine_siberite ;
26932: LD_ADDR_OWVAR 39
26936: PUSH
26937: LD_INT 3
26939: ST_TO_ADDR
// vc_control := control_apeman ;
26940: LD_ADDR_OWVAR 38
26944: PUSH
26945: LD_INT 5
26947: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26948: LD_ADDR_OWVAR 40
26952: PUSH
26953: LD_INT 29
26955: ST_TO_ADDR
// un := CreateVehicle ;
26956: LD_ADDR_VAR 0 2
26960: PUSH
26961: CALL_OW 45
26965: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26966: LD_VAR 0 2
26970: PPUSH
26971: LD_INT 1
26973: PPUSH
26974: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26978: LD_INT 35
26980: PPUSH
26981: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26985: LD_VAR 0 2
26989: PPUSH
26990: LD_INT 22
26992: PUSH
26993: LD_OWVAR 2
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PPUSH
27002: CALL_OW 69
27006: PPUSH
27007: LD_VAR 0 2
27011: PPUSH
27012: CALL_OW 74
27016: PPUSH
27017: CALL_OW 115
// until IsDead ( un ) ;
27021: LD_VAR 0 2
27025: PPUSH
27026: CALL_OW 301
27030: IFFALSE 26978
// end ;
27032: PPOPN 2
27034: END
// every 0 0$1 trigger StreamModeActive and sStu do
27035: LD_EXP 59
27039: PUSH
27040: LD_EXP 98
27044: AND
27045: IFFALSE 27061
27047: GO 27049
27049: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27050: LD_STRING displayStucuk();
27052: PPUSH
27053: CALL_OW 559
// ResetFog ;
27057: CALL_OW 335
// end ;
27061: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27062: LD_EXP 59
27066: PUSH
27067: LD_EXP 91
27071: AND
27072: IFFALSE 27213
27074: GO 27076
27076: DISABLE
27077: LD_INT 0
27079: PPUSH
27080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27081: LD_ADDR_VAR 0 2
27085: PUSH
27086: LD_INT 22
27088: PUSH
27089: LD_OWVAR 2
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 21
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PPUSH
27112: CALL_OW 69
27116: ST_TO_ADDR
// if not tmp then
27117: LD_VAR 0 2
27121: NOT
27122: IFFALSE 27126
// exit ;
27124: GO 27213
// un := tmp [ rand ( 1 , tmp ) ] ;
27126: LD_ADDR_VAR 0 1
27130: PUSH
27131: LD_VAR 0 2
27135: PUSH
27136: LD_INT 1
27138: PPUSH
27139: LD_VAR 0 2
27143: PPUSH
27144: CALL_OW 12
27148: ARRAY
27149: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27150: LD_VAR 0 1
27154: PPUSH
27155: LD_INT 0
27157: PPUSH
27158: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27162: LD_VAR 0 1
27166: PPUSH
27167: LD_OWVAR 3
27171: PUSH
27172: LD_VAR 0 1
27176: DIFF
27177: PPUSH
27178: LD_VAR 0 1
27182: PPUSH
27183: CALL_OW 74
27187: PPUSH
27188: CALL_OW 115
// wait ( 0 0$20 ) ;
27192: LD_INT 700
27194: PPUSH
27195: CALL_OW 67
// SetSide ( un , your_side ) ;
27199: LD_VAR 0 1
27203: PPUSH
27204: LD_OWVAR 2
27208: PPUSH
27209: CALL_OW 235
// end ;
27213: PPOPN 2
27215: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27216: LD_EXP 59
27220: PUSH
27221: LD_EXP 92
27225: AND
27226: IFFALSE 27332
27228: GO 27230
27230: DISABLE
27231: LD_INT 0
27233: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27234: LD_ADDR_VAR 0 1
27238: PUSH
27239: LD_INT 22
27241: PUSH
27242: LD_OWVAR 2
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 2
27253: PUSH
27254: LD_INT 30
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 30
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PPUSH
27283: CALL_OW 69
27287: ST_TO_ADDR
// if not depot then
27288: LD_VAR 0 1
27292: NOT
27293: IFFALSE 27297
// exit ;
27295: GO 27332
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27297: LD_VAR 0 1
27301: PUSH
27302: LD_INT 1
27304: ARRAY
27305: PPUSH
27306: CALL_OW 250
27310: PPUSH
27311: LD_VAR 0 1
27315: PUSH
27316: LD_INT 1
27318: ARRAY
27319: PPUSH
27320: CALL_OW 251
27324: PPUSH
27325: LD_INT 70
27327: PPUSH
27328: CALL_OW 495
// end ;
27332: PPOPN 1
27334: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27335: LD_EXP 59
27339: PUSH
27340: LD_EXP 93
27344: AND
27345: IFFALSE 27556
27347: GO 27349
27349: DISABLE
27350: LD_INT 0
27352: PPUSH
27353: PPUSH
27354: PPUSH
27355: PPUSH
27356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27357: LD_ADDR_VAR 0 5
27361: PUSH
27362: LD_INT 22
27364: PUSH
27365: LD_OWVAR 2
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 21
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PPUSH
27388: CALL_OW 69
27392: ST_TO_ADDR
// if not tmp then
27393: LD_VAR 0 5
27397: NOT
27398: IFFALSE 27402
// exit ;
27400: GO 27556
// for i in tmp do
27402: LD_ADDR_VAR 0 1
27406: PUSH
27407: LD_VAR 0 5
27411: PUSH
27412: FOR_IN
27413: IFFALSE 27554
// begin d := rand ( 0 , 5 ) ;
27415: LD_ADDR_VAR 0 4
27419: PUSH
27420: LD_INT 0
27422: PPUSH
27423: LD_INT 5
27425: PPUSH
27426: CALL_OW 12
27430: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27431: LD_ADDR_VAR 0 2
27435: PUSH
27436: LD_VAR 0 1
27440: PPUSH
27441: CALL_OW 250
27445: PPUSH
27446: LD_VAR 0 4
27450: PPUSH
27451: LD_INT 3
27453: PPUSH
27454: LD_INT 12
27456: PPUSH
27457: CALL_OW 12
27461: PPUSH
27462: CALL_OW 272
27466: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27467: LD_ADDR_VAR 0 3
27471: PUSH
27472: LD_VAR 0 1
27476: PPUSH
27477: CALL_OW 251
27481: PPUSH
27482: LD_VAR 0 4
27486: PPUSH
27487: LD_INT 3
27489: PPUSH
27490: LD_INT 12
27492: PPUSH
27493: CALL_OW 12
27497: PPUSH
27498: CALL_OW 273
27502: ST_TO_ADDR
// if ValidHex ( x , y ) then
27503: LD_VAR 0 2
27507: PPUSH
27508: LD_VAR 0 3
27512: PPUSH
27513: CALL_OW 488
27517: IFFALSE 27552
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27519: LD_VAR 0 1
27523: PPUSH
27524: LD_VAR 0 2
27528: PPUSH
27529: LD_VAR 0 3
27533: PPUSH
27534: LD_INT 3
27536: PPUSH
27537: LD_INT 6
27539: PPUSH
27540: CALL_OW 12
27544: PPUSH
27545: LD_INT 1
27547: PPUSH
27548: CALL_OW 483
// end ;
27552: GO 27412
27554: POP
27555: POP
// end ;
27556: PPOPN 5
27558: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27559: LD_EXP 59
27563: PUSH
27564: LD_EXP 94
27568: AND
27569: IFFALSE 27663
27571: GO 27573
27573: DISABLE
27574: LD_INT 0
27576: PPUSH
27577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27578: LD_ADDR_VAR 0 2
27582: PUSH
27583: LD_INT 22
27585: PUSH
27586: LD_OWVAR 2
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 32
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 21
27607: PUSH
27608: LD_INT 2
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: LIST
27619: PPUSH
27620: CALL_OW 69
27624: ST_TO_ADDR
// if not tmp then
27625: LD_VAR 0 2
27629: NOT
27630: IFFALSE 27634
// exit ;
27632: GO 27663
// for i in tmp do
27634: LD_ADDR_VAR 0 1
27638: PUSH
27639: LD_VAR 0 2
27643: PUSH
27644: FOR_IN
27645: IFFALSE 27661
// SetFuel ( i , 0 ) ;
27647: LD_VAR 0 1
27651: PPUSH
27652: LD_INT 0
27654: PPUSH
27655: CALL_OW 240
27659: GO 27644
27661: POP
27662: POP
// end ;
27663: PPOPN 2
27665: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27666: LD_EXP 59
27670: PUSH
27671: LD_EXP 95
27675: AND
27676: IFFALSE 27742
27678: GO 27680
27680: DISABLE
27681: LD_INT 0
27683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27684: LD_ADDR_VAR 0 1
27688: PUSH
27689: LD_INT 22
27691: PUSH
27692: LD_OWVAR 2
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 30
27703: PUSH
27704: LD_INT 29
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PPUSH
27715: CALL_OW 69
27719: ST_TO_ADDR
// if not tmp then
27720: LD_VAR 0 1
27724: NOT
27725: IFFALSE 27729
// exit ;
27727: GO 27742
// DestroyUnit ( tmp [ 1 ] ) ;
27729: LD_VAR 0 1
27733: PUSH
27734: LD_INT 1
27736: ARRAY
27737: PPUSH
27738: CALL_OW 65
// end ;
27742: PPOPN 1
27744: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27745: LD_EXP 59
27749: PUSH
27750: LD_EXP 97
27754: AND
27755: IFFALSE 27884
27757: GO 27759
27759: DISABLE
27760: LD_INT 0
27762: PPUSH
// begin uc_side := 0 ;
27763: LD_ADDR_OWVAR 20
27767: PUSH
27768: LD_INT 0
27770: ST_TO_ADDR
// uc_nation := nation_arabian ;
27771: LD_ADDR_OWVAR 21
27775: PUSH
27776: LD_INT 2
27778: ST_TO_ADDR
// hc_gallery :=  ;
27779: LD_ADDR_OWVAR 33
27783: PUSH
27784: LD_STRING 
27786: ST_TO_ADDR
// hc_name :=  ;
27787: LD_ADDR_OWVAR 26
27791: PUSH
27792: LD_STRING 
27794: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27795: LD_INT 1
27797: PPUSH
27798: LD_INT 11
27800: PPUSH
27801: LD_INT 10
27803: PPUSH
27804: CALL_OW 380
// un := CreateHuman ;
27808: LD_ADDR_VAR 0 1
27812: PUSH
27813: CALL_OW 44
27817: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27818: LD_VAR 0 1
27822: PPUSH
27823: LD_INT 1
27825: PPUSH
27826: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27830: LD_INT 35
27832: PPUSH
27833: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27837: LD_VAR 0 1
27841: PPUSH
27842: LD_INT 22
27844: PUSH
27845: LD_OWVAR 2
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PPUSH
27854: CALL_OW 69
27858: PPUSH
27859: LD_VAR 0 1
27863: PPUSH
27864: CALL_OW 74
27868: PPUSH
27869: CALL_OW 115
// until IsDead ( un ) ;
27873: LD_VAR 0 1
27877: PPUSH
27878: CALL_OW 301
27882: IFFALSE 27830
// end ;
27884: PPOPN 1
27886: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27887: LD_EXP 59
27891: PUSH
27892: LD_EXP 99
27896: AND
27897: IFFALSE 27909
27899: GO 27901
27901: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27902: LD_STRING earthquake(getX(game), 0, 32)
27904: PPUSH
27905: CALL_OW 559
27909: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27910: LD_EXP 59
27914: PUSH
27915: LD_EXP 100
27919: AND
27920: IFFALSE 28011
27922: GO 27924
27924: DISABLE
27925: LD_INT 0
27927: PPUSH
// begin enable ;
27928: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27929: LD_ADDR_VAR 0 1
27933: PUSH
27934: LD_INT 22
27936: PUSH
27937: LD_OWVAR 2
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 21
27948: PUSH
27949: LD_INT 2
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 33
27958: PUSH
27959: LD_INT 3
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: LIST
27970: PPUSH
27971: CALL_OW 69
27975: ST_TO_ADDR
// if not tmp then
27976: LD_VAR 0 1
27980: NOT
27981: IFFALSE 27985
// exit ;
27983: GO 28011
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27985: LD_VAR 0 1
27989: PUSH
27990: LD_INT 1
27992: PPUSH
27993: LD_VAR 0 1
27997: PPUSH
27998: CALL_OW 12
28002: ARRAY
28003: PPUSH
28004: LD_INT 1
28006: PPUSH
28007: CALL_OW 234
// end ;
28011: PPOPN 1
28013: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28014: LD_EXP 59
28018: PUSH
28019: LD_EXP 101
28023: AND
28024: IFFALSE 28165
28026: GO 28028
28028: DISABLE
28029: LD_INT 0
28031: PPUSH
28032: PPUSH
28033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28034: LD_ADDR_VAR 0 3
28038: PUSH
28039: LD_INT 22
28041: PUSH
28042: LD_OWVAR 2
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 25
28053: PUSH
28054: LD_INT 1
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PPUSH
28065: CALL_OW 69
28069: ST_TO_ADDR
// if not tmp then
28070: LD_VAR 0 3
28074: NOT
28075: IFFALSE 28079
// exit ;
28077: GO 28165
// un := tmp [ rand ( 1 , tmp ) ] ;
28079: LD_ADDR_VAR 0 2
28083: PUSH
28084: LD_VAR 0 3
28088: PUSH
28089: LD_INT 1
28091: PPUSH
28092: LD_VAR 0 3
28096: PPUSH
28097: CALL_OW 12
28101: ARRAY
28102: ST_TO_ADDR
// if Crawls ( un ) then
28103: LD_VAR 0 2
28107: PPUSH
28108: CALL_OW 318
28112: IFFALSE 28123
// ComWalk ( un ) ;
28114: LD_VAR 0 2
28118: PPUSH
28119: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28123: LD_VAR 0 2
28127: PPUSH
28128: LD_INT 9
28130: PPUSH
28131: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28135: LD_INT 28
28137: PPUSH
28138: LD_OWVAR 2
28142: PPUSH
28143: LD_INT 2
28145: PPUSH
28146: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28150: LD_INT 29
28152: PPUSH
28153: LD_OWVAR 2
28157: PPUSH
28158: LD_INT 2
28160: PPUSH
28161: CALL_OW 322
// end ;
28165: PPOPN 3
28167: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28168: LD_EXP 59
28172: PUSH
28173: LD_EXP 102
28177: AND
28178: IFFALSE 28289
28180: GO 28182
28182: DISABLE
28183: LD_INT 0
28185: PPUSH
28186: PPUSH
28187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28188: LD_ADDR_VAR 0 3
28192: PUSH
28193: LD_INT 22
28195: PUSH
28196: LD_OWVAR 2
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 25
28207: PUSH
28208: LD_INT 1
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PPUSH
28219: CALL_OW 69
28223: ST_TO_ADDR
// if not tmp then
28224: LD_VAR 0 3
28228: NOT
28229: IFFALSE 28233
// exit ;
28231: GO 28289
// un := tmp [ rand ( 1 , tmp ) ] ;
28233: LD_ADDR_VAR 0 2
28237: PUSH
28238: LD_VAR 0 3
28242: PUSH
28243: LD_INT 1
28245: PPUSH
28246: LD_VAR 0 3
28250: PPUSH
28251: CALL_OW 12
28255: ARRAY
28256: ST_TO_ADDR
// if Crawls ( un ) then
28257: LD_VAR 0 2
28261: PPUSH
28262: CALL_OW 318
28266: IFFALSE 28277
// ComWalk ( un ) ;
28268: LD_VAR 0 2
28272: PPUSH
28273: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28277: LD_VAR 0 2
28281: PPUSH
28282: LD_INT 8
28284: PPUSH
28285: CALL_OW 336
// end ;
28289: PPOPN 3
28291: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28292: LD_EXP 59
28296: PUSH
28297: LD_EXP 103
28301: AND
28302: IFFALSE 28446
28304: GO 28306
28306: DISABLE
28307: LD_INT 0
28309: PPUSH
28310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28311: LD_ADDR_VAR 0 2
28315: PUSH
28316: LD_INT 22
28318: PUSH
28319: LD_OWVAR 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 21
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 2
28340: PUSH
28341: LD_INT 34
28343: PUSH
28344: LD_INT 12
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 34
28353: PUSH
28354: LD_INT 51
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 34
28363: PUSH
28364: LD_INT 32
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: LIST
28381: PPUSH
28382: CALL_OW 69
28386: ST_TO_ADDR
// if not tmp then
28387: LD_VAR 0 2
28391: NOT
28392: IFFALSE 28396
// exit ;
28394: GO 28446
// for i in tmp do
28396: LD_ADDR_VAR 0 1
28400: PUSH
28401: LD_VAR 0 2
28405: PUSH
28406: FOR_IN
28407: IFFALSE 28444
// if GetCargo ( i , mat_artifact ) = 0 then
28409: LD_VAR 0 1
28413: PPUSH
28414: LD_INT 4
28416: PPUSH
28417: CALL_OW 289
28421: PUSH
28422: LD_INT 0
28424: EQUAL
28425: IFFALSE 28442
// SetCargo ( i , mat_siberit , 100 ) ;
28427: LD_VAR 0 1
28431: PPUSH
28432: LD_INT 3
28434: PPUSH
28435: LD_INT 100
28437: PPUSH
28438: CALL_OW 290
28442: GO 28406
28444: POP
28445: POP
// end ;
28446: PPOPN 2
28448: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28449: LD_EXP 59
28453: PUSH
28454: LD_EXP 104
28458: AND
28459: IFFALSE 28642
28461: GO 28463
28463: DISABLE
28464: LD_INT 0
28466: PPUSH
28467: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28468: LD_ADDR_VAR 0 2
28472: PUSH
28473: LD_INT 22
28475: PUSH
28476: LD_OWVAR 2
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PPUSH
28485: CALL_OW 69
28489: ST_TO_ADDR
// if not tmp then
28490: LD_VAR 0 2
28494: NOT
28495: IFFALSE 28499
// exit ;
28497: GO 28642
// for i := 1 to 2 do
28499: LD_ADDR_VAR 0 1
28503: PUSH
28504: DOUBLE
28505: LD_INT 1
28507: DEC
28508: ST_TO_ADDR
28509: LD_INT 2
28511: PUSH
28512: FOR_TO
28513: IFFALSE 28640
// begin uc_side := your_side ;
28515: LD_ADDR_OWVAR 20
28519: PUSH
28520: LD_OWVAR 2
28524: ST_TO_ADDR
// uc_nation := nation_american ;
28525: LD_ADDR_OWVAR 21
28529: PUSH
28530: LD_INT 1
28532: ST_TO_ADDR
// vc_chassis := us_morphling ;
28533: LD_ADDR_OWVAR 37
28537: PUSH
28538: LD_INT 5
28540: ST_TO_ADDR
// vc_engine := engine_siberite ;
28541: LD_ADDR_OWVAR 39
28545: PUSH
28546: LD_INT 3
28548: ST_TO_ADDR
// vc_control := control_computer ;
28549: LD_ADDR_OWVAR 38
28553: PUSH
28554: LD_INT 3
28556: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28557: LD_ADDR_OWVAR 40
28561: PUSH
28562: LD_INT 10
28564: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28565: LD_VAR 0 2
28569: PUSH
28570: LD_INT 1
28572: ARRAY
28573: PPUSH
28574: CALL_OW 310
28578: NOT
28579: IFFALSE 28626
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28581: CALL_OW 45
28585: PPUSH
28586: LD_VAR 0 2
28590: PUSH
28591: LD_INT 1
28593: ARRAY
28594: PPUSH
28595: CALL_OW 250
28599: PPUSH
28600: LD_VAR 0 2
28604: PUSH
28605: LD_INT 1
28607: ARRAY
28608: PPUSH
28609: CALL_OW 251
28613: PPUSH
28614: LD_INT 12
28616: PPUSH
28617: LD_INT 1
28619: PPUSH
28620: CALL_OW 50
28624: GO 28638
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28626: CALL_OW 45
28630: PPUSH
28631: LD_INT 1
28633: PPUSH
28634: CALL_OW 51
// end ;
28638: GO 28512
28640: POP
28641: POP
// end ;
28642: PPOPN 2
28644: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28645: LD_EXP 59
28649: PUSH
28650: LD_EXP 105
28654: AND
28655: IFFALSE 28877
28657: GO 28659
28659: DISABLE
28660: LD_INT 0
28662: PPUSH
28663: PPUSH
28664: PPUSH
28665: PPUSH
28666: PPUSH
28667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28668: LD_ADDR_VAR 0 6
28672: PUSH
28673: LD_INT 22
28675: PUSH
28676: LD_OWVAR 2
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 21
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 3
28697: PUSH
28698: LD_INT 23
28700: PUSH
28701: LD_INT 0
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: LIST
28716: PPUSH
28717: CALL_OW 69
28721: ST_TO_ADDR
// if not tmp then
28722: LD_VAR 0 6
28726: NOT
28727: IFFALSE 28731
// exit ;
28729: GO 28877
// s1 := rand ( 1 , 4 ) ;
28731: LD_ADDR_VAR 0 2
28735: PUSH
28736: LD_INT 1
28738: PPUSH
28739: LD_INT 4
28741: PPUSH
28742: CALL_OW 12
28746: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28747: LD_ADDR_VAR 0 4
28751: PUSH
28752: LD_VAR 0 6
28756: PUSH
28757: LD_INT 1
28759: ARRAY
28760: PPUSH
28761: LD_VAR 0 2
28765: PPUSH
28766: CALL_OW 259
28770: ST_TO_ADDR
// if s1 = 1 then
28771: LD_VAR 0 2
28775: PUSH
28776: LD_INT 1
28778: EQUAL
28779: IFFALSE 28799
// s2 := rand ( 2 , 4 ) else
28781: LD_ADDR_VAR 0 3
28785: PUSH
28786: LD_INT 2
28788: PPUSH
28789: LD_INT 4
28791: PPUSH
28792: CALL_OW 12
28796: ST_TO_ADDR
28797: GO 28807
// s2 := 1 ;
28799: LD_ADDR_VAR 0 3
28803: PUSH
28804: LD_INT 1
28806: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28807: LD_ADDR_VAR 0 5
28811: PUSH
28812: LD_VAR 0 6
28816: PUSH
28817: LD_INT 1
28819: ARRAY
28820: PPUSH
28821: LD_VAR 0 3
28825: PPUSH
28826: CALL_OW 259
28830: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28831: LD_VAR 0 6
28835: PUSH
28836: LD_INT 1
28838: ARRAY
28839: PPUSH
28840: LD_VAR 0 2
28844: PPUSH
28845: LD_VAR 0 5
28849: PPUSH
28850: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28854: LD_VAR 0 6
28858: PUSH
28859: LD_INT 1
28861: ARRAY
28862: PPUSH
28863: LD_VAR 0 3
28867: PPUSH
28868: LD_VAR 0 4
28872: PPUSH
28873: CALL_OW 237
// end ;
28877: PPOPN 6
28879: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28880: LD_EXP 59
28884: PUSH
28885: LD_EXP 106
28889: AND
28890: IFFALSE 28969
28892: GO 28894
28894: DISABLE
28895: LD_INT 0
28897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28898: LD_ADDR_VAR 0 1
28902: PUSH
28903: LD_INT 22
28905: PUSH
28906: LD_OWVAR 2
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 30
28917: PUSH
28918: LD_INT 3
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PPUSH
28929: CALL_OW 69
28933: ST_TO_ADDR
// if not tmp then
28934: LD_VAR 0 1
28938: NOT
28939: IFFALSE 28943
// exit ;
28941: GO 28969
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28943: LD_VAR 0 1
28947: PUSH
28948: LD_INT 1
28950: PPUSH
28951: LD_VAR 0 1
28955: PPUSH
28956: CALL_OW 12
28960: ARRAY
28961: PPUSH
28962: LD_INT 1
28964: PPUSH
28965: CALL_OW 234
// end ;
28969: PPOPN 1
28971: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28972: LD_EXP 59
28976: PUSH
28977: LD_EXP 107
28981: AND
28982: IFFALSE 29094
28984: GO 28986
28986: DISABLE
28987: LD_INT 0
28989: PPUSH
28990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28991: LD_ADDR_VAR 0 2
28995: PUSH
28996: LD_INT 22
28998: PUSH
28999: LD_OWVAR 2
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 2
29010: PUSH
29011: LD_INT 30
29013: PUSH
29014: LD_INT 27
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 30
29023: PUSH
29024: LD_INT 26
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 30
29033: PUSH
29034: LD_INT 28
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PPUSH
29051: CALL_OW 69
29055: ST_TO_ADDR
// if not tmp then
29056: LD_VAR 0 2
29060: NOT
29061: IFFALSE 29065
// exit ;
29063: GO 29094
// for i in tmp do
29065: LD_ADDR_VAR 0 1
29069: PUSH
29070: LD_VAR 0 2
29074: PUSH
29075: FOR_IN
29076: IFFALSE 29092
// SetLives ( i , 1 ) ;
29078: LD_VAR 0 1
29082: PPUSH
29083: LD_INT 1
29085: PPUSH
29086: CALL_OW 234
29090: GO 29075
29092: POP
29093: POP
// end ;
29094: PPOPN 2
29096: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29097: LD_EXP 59
29101: PUSH
29102: LD_EXP 108
29106: AND
29107: IFFALSE 29381
29109: GO 29111
29111: DISABLE
29112: LD_INT 0
29114: PPUSH
29115: PPUSH
29116: PPUSH
// begin i := rand ( 1 , 7 ) ;
29117: LD_ADDR_VAR 0 1
29121: PUSH
29122: LD_INT 1
29124: PPUSH
29125: LD_INT 7
29127: PPUSH
29128: CALL_OW 12
29132: ST_TO_ADDR
// case i of 1 :
29133: LD_VAR 0 1
29137: PUSH
29138: LD_INT 1
29140: DOUBLE
29141: EQUAL
29142: IFTRUE 29146
29144: GO 29156
29146: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29147: LD_STRING earthquake(getX(game), 0, 32)
29149: PPUSH
29150: CALL_OW 559
29154: GO 29381
29156: LD_INT 2
29158: DOUBLE
29159: EQUAL
29160: IFTRUE 29164
29162: GO 29178
29164: POP
// begin ToLua ( displayStucuk(); ) ;
29165: LD_STRING displayStucuk();
29167: PPUSH
29168: CALL_OW 559
// ResetFog ;
29172: CALL_OW 335
// end ; 3 :
29176: GO 29381
29178: LD_INT 3
29180: DOUBLE
29181: EQUAL
29182: IFTRUE 29186
29184: GO 29290
29186: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29187: LD_ADDR_VAR 0 2
29191: PUSH
29192: LD_INT 22
29194: PUSH
29195: LD_OWVAR 2
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 25
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PPUSH
29218: CALL_OW 69
29222: ST_TO_ADDR
// if not tmp then
29223: LD_VAR 0 2
29227: NOT
29228: IFFALSE 29232
// exit ;
29230: GO 29381
// un := tmp [ rand ( 1 , tmp ) ] ;
29232: LD_ADDR_VAR 0 3
29236: PUSH
29237: LD_VAR 0 2
29241: PUSH
29242: LD_INT 1
29244: PPUSH
29245: LD_VAR 0 2
29249: PPUSH
29250: CALL_OW 12
29254: ARRAY
29255: ST_TO_ADDR
// if Crawls ( un ) then
29256: LD_VAR 0 3
29260: PPUSH
29261: CALL_OW 318
29265: IFFALSE 29276
// ComWalk ( un ) ;
29267: LD_VAR 0 3
29271: PPUSH
29272: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29276: LD_VAR 0 3
29280: PPUSH
29281: LD_INT 8
29283: PPUSH
29284: CALL_OW 336
// end ; 4 :
29288: GO 29381
29290: LD_INT 4
29292: DOUBLE
29293: EQUAL
29294: IFTRUE 29298
29296: GO 29359
29298: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29299: LD_ADDR_VAR 0 2
29303: PUSH
29304: LD_INT 22
29306: PUSH
29307: LD_OWVAR 2
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 30
29318: PUSH
29319: LD_INT 29
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PPUSH
29330: CALL_OW 69
29334: ST_TO_ADDR
// if not tmp then
29335: LD_VAR 0 2
29339: NOT
29340: IFFALSE 29344
// exit ;
29342: GO 29381
// DestroyUnit ( tmp [ 1 ] ) ;
29344: LD_VAR 0 2
29348: PUSH
29349: LD_INT 1
29351: ARRAY
29352: PPUSH
29353: CALL_OW 65
// end ; 5 .. 7 :
29357: GO 29381
29359: LD_INT 5
29361: DOUBLE
29362: GREATEREQUAL
29363: IFFALSE 29371
29365: LD_INT 7
29367: DOUBLE
29368: LESSEQUAL
29369: IFTRUE 29373
29371: GO 29380
29373: POP
// StreamSibBomb ; end ;
29374: CALL 25631 0 0
29378: GO 29381
29380: POP
// end ;
29381: PPOPN 3
29383: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29384: LD_EXP 59
29388: PUSH
29389: LD_EXP 109
29393: AND
29394: IFFALSE 29550
29396: GO 29398
29398: DISABLE
29399: LD_INT 0
29401: PPUSH
29402: PPUSH
29403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29404: LD_ADDR_VAR 0 2
29408: PUSH
29409: LD_INT 81
29411: PUSH
29412: LD_OWVAR 2
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 2
29423: PUSH
29424: LD_INT 21
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 21
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: LIST
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PPUSH
29453: CALL_OW 69
29457: ST_TO_ADDR
// if not tmp then
29458: LD_VAR 0 2
29462: NOT
29463: IFFALSE 29467
// exit ;
29465: GO 29550
// p := 0 ;
29467: LD_ADDR_VAR 0 3
29471: PUSH
29472: LD_INT 0
29474: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29475: LD_INT 35
29477: PPUSH
29478: CALL_OW 67
// p := p + 1 ;
29482: LD_ADDR_VAR 0 3
29486: PUSH
29487: LD_VAR 0 3
29491: PUSH
29492: LD_INT 1
29494: PLUS
29495: ST_TO_ADDR
// for i in tmp do
29496: LD_ADDR_VAR 0 1
29500: PUSH
29501: LD_VAR 0 2
29505: PUSH
29506: FOR_IN
29507: IFFALSE 29538
// if GetLives ( i ) < 1000 then
29509: LD_VAR 0 1
29513: PPUSH
29514: CALL_OW 256
29518: PUSH
29519: LD_INT 1000
29521: LESS
29522: IFFALSE 29536
// SetLives ( i , 1000 ) ;
29524: LD_VAR 0 1
29528: PPUSH
29529: LD_INT 1000
29531: PPUSH
29532: CALL_OW 234
29536: GO 29506
29538: POP
29539: POP
// until p > 20 ;
29540: LD_VAR 0 3
29544: PUSH
29545: LD_INT 20
29547: GREATER
29548: IFFALSE 29475
// end ;
29550: PPOPN 3
29552: END
// every 0 0$1 trigger StreamModeActive and sTime do
29553: LD_EXP 59
29557: PUSH
29558: LD_EXP 110
29562: AND
29563: IFFALSE 29598
29565: GO 29567
29567: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29568: LD_INT 28
29570: PPUSH
29571: LD_OWVAR 2
29575: PPUSH
29576: LD_INT 2
29578: PPUSH
29579: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29583: LD_INT 30
29585: PPUSH
29586: LD_OWVAR 2
29590: PPUSH
29591: LD_INT 2
29593: PPUSH
29594: CALL_OW 322
// end ;
29598: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29599: LD_EXP 59
29603: PUSH
29604: LD_EXP 111
29608: AND
29609: IFFALSE 29730
29611: GO 29613
29613: DISABLE
29614: LD_INT 0
29616: PPUSH
29617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29618: LD_ADDR_VAR 0 2
29622: PUSH
29623: LD_INT 22
29625: PUSH
29626: LD_OWVAR 2
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 21
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 3
29647: PUSH
29648: LD_INT 23
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: PPUSH
29667: CALL_OW 69
29671: ST_TO_ADDR
// if not tmp then
29672: LD_VAR 0 2
29676: NOT
29677: IFFALSE 29681
// exit ;
29679: GO 29730
// for i in tmp do
29681: LD_ADDR_VAR 0 1
29685: PUSH
29686: LD_VAR 0 2
29690: PUSH
29691: FOR_IN
29692: IFFALSE 29728
// begin if Crawls ( i ) then
29694: LD_VAR 0 1
29698: PPUSH
29699: CALL_OW 318
29703: IFFALSE 29714
// ComWalk ( i ) ;
29705: LD_VAR 0 1
29709: PPUSH
29710: CALL_OW 138
// SetClass ( i , 2 ) ;
29714: LD_VAR 0 1
29718: PPUSH
29719: LD_INT 2
29721: PPUSH
29722: CALL_OW 336
// end ;
29726: GO 29691
29728: POP
29729: POP
// end ;
29730: PPOPN 2
29732: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29733: LD_EXP 59
29737: PUSH
29738: LD_EXP 112
29742: AND
29743: IFFALSE 30024
29745: GO 29747
29747: DISABLE
29748: LD_INT 0
29750: PPUSH
29751: PPUSH
29752: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29753: LD_OWVAR 2
29757: PPUSH
29758: LD_INT 9
29760: PPUSH
29761: LD_INT 1
29763: PPUSH
29764: LD_INT 1
29766: PPUSH
29767: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29771: LD_INT 9
29773: PPUSH
29774: LD_OWVAR 2
29778: PPUSH
29779: CALL_OW 343
// uc_side := 9 ;
29783: LD_ADDR_OWVAR 20
29787: PUSH
29788: LD_INT 9
29790: ST_TO_ADDR
// uc_nation := 2 ;
29791: LD_ADDR_OWVAR 21
29795: PUSH
29796: LD_INT 2
29798: ST_TO_ADDR
// hc_name := Dark Warrior ;
29799: LD_ADDR_OWVAR 26
29803: PUSH
29804: LD_STRING Dark Warrior
29806: ST_TO_ADDR
// hc_gallery :=  ;
29807: LD_ADDR_OWVAR 33
29811: PUSH
29812: LD_STRING 
29814: ST_TO_ADDR
// hc_noskilllimit := true ;
29815: LD_ADDR_OWVAR 76
29819: PUSH
29820: LD_INT 1
29822: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29823: LD_ADDR_OWVAR 31
29827: PUSH
29828: LD_INT 30
29830: PUSH
29831: LD_INT 30
29833: PUSH
29834: LD_INT 30
29836: PUSH
29837: LD_INT 30
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: ST_TO_ADDR
// un := CreateHuman ;
29846: LD_ADDR_VAR 0 3
29850: PUSH
29851: CALL_OW 44
29855: ST_TO_ADDR
// hc_noskilllimit := false ;
29856: LD_ADDR_OWVAR 76
29860: PUSH
29861: LD_INT 0
29863: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29864: LD_VAR 0 3
29868: PPUSH
29869: LD_INT 1
29871: PPUSH
29872: CALL_OW 51
// p := 0 ;
29876: LD_ADDR_VAR 0 2
29880: PUSH
29881: LD_INT 0
29883: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29884: LD_INT 35
29886: PPUSH
29887: CALL_OW 67
// p := p + 1 ;
29891: LD_ADDR_VAR 0 2
29895: PUSH
29896: LD_VAR 0 2
29900: PUSH
29901: LD_INT 1
29903: PLUS
29904: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29905: LD_VAR 0 3
29909: PPUSH
29910: CALL_OW 256
29914: PUSH
29915: LD_INT 1000
29917: LESS
29918: IFFALSE 29932
// SetLives ( un , 1000 ) ;
29920: LD_VAR 0 3
29924: PPUSH
29925: LD_INT 1000
29927: PPUSH
29928: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29932: LD_VAR 0 3
29936: PPUSH
29937: LD_INT 81
29939: PUSH
29940: LD_OWVAR 2
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 91
29951: PUSH
29952: LD_VAR 0 3
29956: PUSH
29957: LD_INT 30
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: LIST
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PPUSH
29969: CALL_OW 69
29973: PPUSH
29974: LD_VAR 0 3
29978: PPUSH
29979: CALL_OW 74
29983: PPUSH
29984: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29988: LD_VAR 0 2
29992: PUSH
29993: LD_INT 60
29995: GREATER
29996: PUSH
29997: LD_VAR 0 3
30001: PPUSH
30002: CALL_OW 301
30006: OR
30007: IFFALSE 29884
// if un then
30009: LD_VAR 0 3
30013: IFFALSE 30024
// RemoveUnit ( un ) ;
30015: LD_VAR 0 3
30019: PPUSH
30020: CALL_OW 64
// end ;
30024: PPOPN 3
30026: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30027: LD_INT 0
30029: PPUSH
// case cmd of 301 :
30030: LD_VAR 0 1
30034: PUSH
30035: LD_INT 301
30037: DOUBLE
30038: EQUAL
30039: IFTRUE 30043
30041: GO 30075
30043: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30044: LD_VAR 0 6
30048: PPUSH
30049: LD_VAR 0 7
30053: PPUSH
30054: LD_VAR 0 8
30058: PPUSH
30059: LD_VAR 0 4
30063: PPUSH
30064: LD_VAR 0 5
30068: PPUSH
30069: CALL 31276 0 5
30073: GO 30196
30075: LD_INT 302
30077: DOUBLE
30078: EQUAL
30079: IFTRUE 30083
30081: GO 30120
30083: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30084: LD_VAR 0 6
30088: PPUSH
30089: LD_VAR 0 7
30093: PPUSH
30094: LD_VAR 0 8
30098: PPUSH
30099: LD_VAR 0 9
30103: PPUSH
30104: LD_VAR 0 4
30108: PPUSH
30109: LD_VAR 0 5
30113: PPUSH
30114: CALL 31367 0 6
30118: GO 30196
30120: LD_INT 303
30122: DOUBLE
30123: EQUAL
30124: IFTRUE 30128
30126: GO 30165
30128: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30129: LD_VAR 0 6
30133: PPUSH
30134: LD_VAR 0 7
30138: PPUSH
30139: LD_VAR 0 8
30143: PPUSH
30144: LD_VAR 0 9
30148: PPUSH
30149: LD_VAR 0 4
30153: PPUSH
30154: LD_VAR 0 5
30158: PPUSH
30159: CALL 30201 0 6
30163: GO 30196
30165: LD_INT 304
30167: DOUBLE
30168: EQUAL
30169: IFTRUE 30173
30171: GO 30195
30173: POP
// hHackTeleport ( unit , x , y ) ; end ;
30174: LD_VAR 0 2
30178: PPUSH
30179: LD_VAR 0 4
30183: PPUSH
30184: LD_VAR 0 5
30188: PPUSH
30189: CALL 31960 0 3
30193: GO 30196
30195: POP
// end ;
30196: LD_VAR 0 12
30200: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30201: LD_INT 0
30203: PPUSH
30204: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30205: LD_VAR 0 1
30209: PUSH
30210: LD_INT 1
30212: LESS
30213: PUSH
30214: LD_VAR 0 1
30218: PUSH
30219: LD_INT 3
30221: GREATER
30222: OR
30223: PUSH
30224: LD_VAR 0 5
30228: PPUSH
30229: LD_VAR 0 6
30233: PPUSH
30234: CALL_OW 428
30238: OR
30239: IFFALSE 30243
// exit ;
30241: GO 30963
// uc_side := your_side ;
30243: LD_ADDR_OWVAR 20
30247: PUSH
30248: LD_OWVAR 2
30252: ST_TO_ADDR
// uc_nation := nation ;
30253: LD_ADDR_OWVAR 21
30257: PUSH
30258: LD_VAR 0 1
30262: ST_TO_ADDR
// bc_level = 1 ;
30263: LD_ADDR_OWVAR 43
30267: PUSH
30268: LD_INT 1
30270: ST_TO_ADDR
// case btype of 1 :
30271: LD_VAR 0 2
30275: PUSH
30276: LD_INT 1
30278: DOUBLE
30279: EQUAL
30280: IFTRUE 30284
30282: GO 30295
30284: POP
// bc_type := b_depot ; 2 :
30285: LD_ADDR_OWVAR 42
30289: PUSH
30290: LD_INT 0
30292: ST_TO_ADDR
30293: GO 30907
30295: LD_INT 2
30297: DOUBLE
30298: EQUAL
30299: IFTRUE 30303
30301: GO 30314
30303: POP
// bc_type := b_warehouse ; 3 :
30304: LD_ADDR_OWVAR 42
30308: PUSH
30309: LD_INT 1
30311: ST_TO_ADDR
30312: GO 30907
30314: LD_INT 3
30316: DOUBLE
30317: EQUAL
30318: IFTRUE 30322
30320: GO 30333
30322: POP
// bc_type := b_lab ; 4 .. 9 :
30323: LD_ADDR_OWVAR 42
30327: PUSH
30328: LD_INT 6
30330: ST_TO_ADDR
30331: GO 30907
30333: LD_INT 4
30335: DOUBLE
30336: GREATEREQUAL
30337: IFFALSE 30345
30339: LD_INT 9
30341: DOUBLE
30342: LESSEQUAL
30343: IFTRUE 30347
30345: GO 30399
30347: POP
// begin bc_type := b_lab_half ;
30348: LD_ADDR_OWVAR 42
30352: PUSH
30353: LD_INT 7
30355: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30356: LD_ADDR_OWVAR 44
30360: PUSH
30361: LD_INT 10
30363: PUSH
30364: LD_INT 11
30366: PUSH
30367: LD_INT 12
30369: PUSH
30370: LD_INT 15
30372: PUSH
30373: LD_INT 14
30375: PUSH
30376: LD_INT 13
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: PUSH
30387: LD_VAR 0 2
30391: PUSH
30392: LD_INT 3
30394: MINUS
30395: ARRAY
30396: ST_TO_ADDR
// end ; 10 .. 13 :
30397: GO 30907
30399: LD_INT 10
30401: DOUBLE
30402: GREATEREQUAL
30403: IFFALSE 30411
30405: LD_INT 13
30407: DOUBLE
30408: LESSEQUAL
30409: IFTRUE 30413
30411: GO 30490
30413: POP
// begin bc_type := b_lab_full ;
30414: LD_ADDR_OWVAR 42
30418: PUSH
30419: LD_INT 8
30421: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30422: LD_ADDR_OWVAR 44
30426: PUSH
30427: LD_INT 10
30429: PUSH
30430: LD_INT 12
30432: PUSH
30433: LD_INT 14
30435: PUSH
30436: LD_INT 13
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: PUSH
30445: LD_VAR 0 2
30449: PUSH
30450: LD_INT 9
30452: MINUS
30453: ARRAY
30454: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30455: LD_ADDR_OWVAR 45
30459: PUSH
30460: LD_INT 11
30462: PUSH
30463: LD_INT 15
30465: PUSH
30466: LD_INT 12
30468: PUSH
30469: LD_INT 15
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: PUSH
30478: LD_VAR 0 2
30482: PUSH
30483: LD_INT 9
30485: MINUS
30486: ARRAY
30487: ST_TO_ADDR
// end ; 14 :
30488: GO 30907
30490: LD_INT 14
30492: DOUBLE
30493: EQUAL
30494: IFTRUE 30498
30496: GO 30509
30498: POP
// bc_type := b_workshop ; 15 :
30499: LD_ADDR_OWVAR 42
30503: PUSH
30504: LD_INT 2
30506: ST_TO_ADDR
30507: GO 30907
30509: LD_INT 15
30511: DOUBLE
30512: EQUAL
30513: IFTRUE 30517
30515: GO 30528
30517: POP
// bc_type := b_factory ; 16 :
30518: LD_ADDR_OWVAR 42
30522: PUSH
30523: LD_INT 3
30525: ST_TO_ADDR
30526: GO 30907
30528: LD_INT 16
30530: DOUBLE
30531: EQUAL
30532: IFTRUE 30536
30534: GO 30547
30536: POP
// bc_type := b_ext_gun ; 17 :
30537: LD_ADDR_OWVAR 42
30541: PUSH
30542: LD_INT 17
30544: ST_TO_ADDR
30545: GO 30907
30547: LD_INT 17
30549: DOUBLE
30550: EQUAL
30551: IFTRUE 30555
30553: GO 30583
30555: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30556: LD_ADDR_OWVAR 42
30560: PUSH
30561: LD_INT 19
30563: PUSH
30564: LD_INT 23
30566: PUSH
30567: LD_INT 19
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: LIST
30574: PUSH
30575: LD_VAR 0 1
30579: ARRAY
30580: ST_TO_ADDR
30581: GO 30907
30583: LD_INT 18
30585: DOUBLE
30586: EQUAL
30587: IFTRUE 30591
30589: GO 30602
30591: POP
// bc_type := b_ext_radar ; 19 :
30592: LD_ADDR_OWVAR 42
30596: PUSH
30597: LD_INT 20
30599: ST_TO_ADDR
30600: GO 30907
30602: LD_INT 19
30604: DOUBLE
30605: EQUAL
30606: IFTRUE 30610
30608: GO 30621
30610: POP
// bc_type := b_ext_radio ; 20 :
30611: LD_ADDR_OWVAR 42
30615: PUSH
30616: LD_INT 22
30618: ST_TO_ADDR
30619: GO 30907
30621: LD_INT 20
30623: DOUBLE
30624: EQUAL
30625: IFTRUE 30629
30627: GO 30640
30629: POP
// bc_type := b_ext_siberium ; 21 :
30630: LD_ADDR_OWVAR 42
30634: PUSH
30635: LD_INT 21
30637: ST_TO_ADDR
30638: GO 30907
30640: LD_INT 21
30642: DOUBLE
30643: EQUAL
30644: IFTRUE 30648
30646: GO 30659
30648: POP
// bc_type := b_ext_computer ; 22 :
30649: LD_ADDR_OWVAR 42
30653: PUSH
30654: LD_INT 24
30656: ST_TO_ADDR
30657: GO 30907
30659: LD_INT 22
30661: DOUBLE
30662: EQUAL
30663: IFTRUE 30667
30665: GO 30678
30667: POP
// bc_type := b_ext_track ; 23 :
30668: LD_ADDR_OWVAR 42
30672: PUSH
30673: LD_INT 16
30675: ST_TO_ADDR
30676: GO 30907
30678: LD_INT 23
30680: DOUBLE
30681: EQUAL
30682: IFTRUE 30686
30684: GO 30697
30686: POP
// bc_type := b_ext_laser ; 24 :
30687: LD_ADDR_OWVAR 42
30691: PUSH
30692: LD_INT 25
30694: ST_TO_ADDR
30695: GO 30907
30697: LD_INT 24
30699: DOUBLE
30700: EQUAL
30701: IFTRUE 30705
30703: GO 30716
30705: POP
// bc_type := b_control_tower ; 25 :
30706: LD_ADDR_OWVAR 42
30710: PUSH
30711: LD_INT 36
30713: ST_TO_ADDR
30714: GO 30907
30716: LD_INT 25
30718: DOUBLE
30719: EQUAL
30720: IFTRUE 30724
30722: GO 30735
30724: POP
// bc_type := b_breastwork ; 26 :
30725: LD_ADDR_OWVAR 42
30729: PUSH
30730: LD_INT 31
30732: ST_TO_ADDR
30733: GO 30907
30735: LD_INT 26
30737: DOUBLE
30738: EQUAL
30739: IFTRUE 30743
30741: GO 30754
30743: POP
// bc_type := b_bunker ; 27 :
30744: LD_ADDR_OWVAR 42
30748: PUSH
30749: LD_INT 32
30751: ST_TO_ADDR
30752: GO 30907
30754: LD_INT 27
30756: DOUBLE
30757: EQUAL
30758: IFTRUE 30762
30760: GO 30773
30762: POP
// bc_type := b_turret ; 28 :
30763: LD_ADDR_OWVAR 42
30767: PUSH
30768: LD_INT 33
30770: ST_TO_ADDR
30771: GO 30907
30773: LD_INT 28
30775: DOUBLE
30776: EQUAL
30777: IFTRUE 30781
30779: GO 30792
30781: POP
// bc_type := b_armoury ; 29 :
30782: LD_ADDR_OWVAR 42
30786: PUSH
30787: LD_INT 4
30789: ST_TO_ADDR
30790: GO 30907
30792: LD_INT 29
30794: DOUBLE
30795: EQUAL
30796: IFTRUE 30800
30798: GO 30811
30800: POP
// bc_type := b_barracks ; 30 :
30801: LD_ADDR_OWVAR 42
30805: PUSH
30806: LD_INT 5
30808: ST_TO_ADDR
30809: GO 30907
30811: LD_INT 30
30813: DOUBLE
30814: EQUAL
30815: IFTRUE 30819
30817: GO 30830
30819: POP
// bc_type := b_solar_power ; 31 :
30820: LD_ADDR_OWVAR 42
30824: PUSH
30825: LD_INT 27
30827: ST_TO_ADDR
30828: GO 30907
30830: LD_INT 31
30832: DOUBLE
30833: EQUAL
30834: IFTRUE 30838
30836: GO 30849
30838: POP
// bc_type := b_oil_power ; 32 :
30839: LD_ADDR_OWVAR 42
30843: PUSH
30844: LD_INT 26
30846: ST_TO_ADDR
30847: GO 30907
30849: LD_INT 32
30851: DOUBLE
30852: EQUAL
30853: IFTRUE 30857
30855: GO 30868
30857: POP
// bc_type := b_siberite_power ; 33 :
30858: LD_ADDR_OWVAR 42
30862: PUSH
30863: LD_INT 28
30865: ST_TO_ADDR
30866: GO 30907
30868: LD_INT 33
30870: DOUBLE
30871: EQUAL
30872: IFTRUE 30876
30874: GO 30887
30876: POP
// bc_type := b_oil_mine ; 34 :
30877: LD_ADDR_OWVAR 42
30881: PUSH
30882: LD_INT 29
30884: ST_TO_ADDR
30885: GO 30907
30887: LD_INT 34
30889: DOUBLE
30890: EQUAL
30891: IFTRUE 30895
30893: GO 30906
30895: POP
// bc_type := b_siberite_mine ; end ;
30896: LD_ADDR_OWVAR 42
30900: PUSH
30901: LD_INT 30
30903: ST_TO_ADDR
30904: GO 30907
30906: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30907: LD_ADDR_VAR 0 8
30911: PUSH
30912: LD_VAR 0 5
30916: PPUSH
30917: LD_VAR 0 6
30921: PPUSH
30922: LD_VAR 0 3
30926: PPUSH
30927: CALL_OW 47
30931: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30932: LD_OWVAR 42
30936: PUSH
30937: LD_INT 32
30939: PUSH
30940: LD_INT 33
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: IN
30947: IFFALSE 30963
// PlaceWeaponTurret ( b , weapon ) ;
30949: LD_VAR 0 8
30953: PPUSH
30954: LD_VAR 0 4
30958: PPUSH
30959: CALL_OW 431
// end ;
30963: LD_VAR 0 7
30967: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30968: LD_INT 0
30970: PPUSH
30971: PPUSH
30972: PPUSH
30973: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30974: LD_ADDR_VAR 0 4
30978: PUSH
30979: LD_INT 22
30981: PUSH
30982: LD_OWVAR 2
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 2
30993: PUSH
30994: LD_INT 30
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 30
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: LIST
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PPUSH
31023: CALL_OW 69
31027: ST_TO_ADDR
// if not tmp then
31028: LD_VAR 0 4
31032: NOT
31033: IFFALSE 31037
// exit ;
31035: GO 31096
// for i in tmp do
31037: LD_ADDR_VAR 0 2
31041: PUSH
31042: LD_VAR 0 4
31046: PUSH
31047: FOR_IN
31048: IFFALSE 31094
// for j = 1 to 3 do
31050: LD_ADDR_VAR 0 3
31054: PUSH
31055: DOUBLE
31056: LD_INT 1
31058: DEC
31059: ST_TO_ADDR
31060: LD_INT 3
31062: PUSH
31063: FOR_TO
31064: IFFALSE 31090
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31066: LD_VAR 0 2
31070: PPUSH
31071: CALL_OW 274
31075: PPUSH
31076: LD_VAR 0 3
31080: PPUSH
31081: LD_INT 99999
31083: PPUSH
31084: CALL_OW 277
31088: GO 31063
31090: POP
31091: POP
31092: GO 31047
31094: POP
31095: POP
// end ;
31096: LD_VAR 0 1
31100: RET
// export function hHackSetLevel10 ; var i , j ; begin
31101: LD_INT 0
31103: PPUSH
31104: PPUSH
31105: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31106: LD_ADDR_VAR 0 2
31110: PUSH
31111: LD_INT 21
31113: PUSH
31114: LD_INT 1
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PPUSH
31121: CALL_OW 69
31125: PUSH
31126: FOR_IN
31127: IFFALSE 31179
// if IsSelected ( i ) then
31129: LD_VAR 0 2
31133: PPUSH
31134: CALL_OW 306
31138: IFFALSE 31177
// begin for j := 1 to 4 do
31140: LD_ADDR_VAR 0 3
31144: PUSH
31145: DOUBLE
31146: LD_INT 1
31148: DEC
31149: ST_TO_ADDR
31150: LD_INT 4
31152: PUSH
31153: FOR_TO
31154: IFFALSE 31175
// SetSkill ( i , j , 10 ) ;
31156: LD_VAR 0 2
31160: PPUSH
31161: LD_VAR 0 3
31165: PPUSH
31166: LD_INT 10
31168: PPUSH
31169: CALL_OW 237
31173: GO 31153
31175: POP
31176: POP
// end ;
31177: GO 31126
31179: POP
31180: POP
// end ;
31181: LD_VAR 0 1
31185: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31186: LD_INT 0
31188: PPUSH
31189: PPUSH
31190: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31191: LD_ADDR_VAR 0 2
31195: PUSH
31196: LD_INT 22
31198: PUSH
31199: LD_OWVAR 2
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 21
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PPUSH
31222: CALL_OW 69
31226: PUSH
31227: FOR_IN
31228: IFFALSE 31269
// begin for j := 1 to 4 do
31230: LD_ADDR_VAR 0 3
31234: PUSH
31235: DOUBLE
31236: LD_INT 1
31238: DEC
31239: ST_TO_ADDR
31240: LD_INT 4
31242: PUSH
31243: FOR_TO
31244: IFFALSE 31265
// SetSkill ( i , j , 10 ) ;
31246: LD_VAR 0 2
31250: PPUSH
31251: LD_VAR 0 3
31255: PPUSH
31256: LD_INT 10
31258: PPUSH
31259: CALL_OW 237
31263: GO 31243
31265: POP
31266: POP
// end ;
31267: GO 31227
31269: POP
31270: POP
// end ;
31271: LD_VAR 0 1
31275: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31276: LD_INT 0
31278: PPUSH
// uc_side := your_side ;
31279: LD_ADDR_OWVAR 20
31283: PUSH
31284: LD_OWVAR 2
31288: ST_TO_ADDR
// uc_nation := nation ;
31289: LD_ADDR_OWVAR 21
31293: PUSH
31294: LD_VAR 0 1
31298: ST_TO_ADDR
// InitHc ;
31299: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31303: LD_INT 0
31305: PPUSH
31306: LD_VAR 0 2
31310: PPUSH
31311: LD_VAR 0 3
31315: PPUSH
31316: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31320: LD_VAR 0 4
31324: PPUSH
31325: LD_VAR 0 5
31329: PPUSH
31330: CALL_OW 428
31334: PUSH
31335: LD_INT 0
31337: EQUAL
31338: IFFALSE 31362
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31340: CALL_OW 44
31344: PPUSH
31345: LD_VAR 0 4
31349: PPUSH
31350: LD_VAR 0 5
31354: PPUSH
31355: LD_INT 1
31357: PPUSH
31358: CALL_OW 48
// end ;
31362: LD_VAR 0 6
31366: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31367: LD_INT 0
31369: PPUSH
31370: PPUSH
// uc_side := your_side ;
31371: LD_ADDR_OWVAR 20
31375: PUSH
31376: LD_OWVAR 2
31380: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31381: LD_VAR 0 1
31385: PUSH
31386: LD_INT 1
31388: PUSH
31389: LD_INT 2
31391: PUSH
31392: LD_INT 3
31394: PUSH
31395: LD_INT 4
31397: PUSH
31398: LD_INT 5
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: IN
31408: IFFALSE 31420
// uc_nation := nation_american else
31410: LD_ADDR_OWVAR 21
31414: PUSH
31415: LD_INT 1
31417: ST_TO_ADDR
31418: GO 31463
// if chassis in [ 11 , 12 , 13 , 14 ] then
31420: LD_VAR 0 1
31424: PUSH
31425: LD_INT 11
31427: PUSH
31428: LD_INT 12
31430: PUSH
31431: LD_INT 13
31433: PUSH
31434: LD_INT 14
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: IN
31443: IFFALSE 31455
// uc_nation := nation_arabian else
31445: LD_ADDR_OWVAR 21
31449: PUSH
31450: LD_INT 2
31452: ST_TO_ADDR
31453: GO 31463
// uc_nation := nation_russian ;
31455: LD_ADDR_OWVAR 21
31459: PUSH
31460: LD_INT 3
31462: ST_TO_ADDR
// vc_chassis := chassis ;
31463: LD_ADDR_OWVAR 37
31467: PUSH
31468: LD_VAR 0 1
31472: ST_TO_ADDR
// vc_engine := engine ;
31473: LD_ADDR_OWVAR 39
31477: PUSH
31478: LD_VAR 0 2
31482: ST_TO_ADDR
// vc_control := control ;
31483: LD_ADDR_OWVAR 38
31487: PUSH
31488: LD_VAR 0 3
31492: ST_TO_ADDR
// vc_weapon := weapon ;
31493: LD_ADDR_OWVAR 40
31497: PUSH
31498: LD_VAR 0 4
31502: ST_TO_ADDR
// un := CreateVehicle ;
31503: LD_ADDR_VAR 0 8
31507: PUSH
31508: CALL_OW 45
31512: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31513: LD_VAR 0 8
31517: PPUSH
31518: LD_INT 0
31520: PPUSH
31521: LD_INT 5
31523: PPUSH
31524: CALL_OW 12
31528: PPUSH
31529: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31533: LD_VAR 0 8
31537: PPUSH
31538: LD_VAR 0 5
31542: PPUSH
31543: LD_VAR 0 6
31547: PPUSH
31548: LD_INT 1
31550: PPUSH
31551: CALL_OW 48
// end ;
31555: LD_VAR 0 7
31559: RET
// export hInvincible ; every 1 do
31560: GO 31562
31562: DISABLE
// hInvincible := [ ] ;
31563: LD_ADDR_EXP 113
31567: PUSH
31568: EMPTY
31569: ST_TO_ADDR
31570: END
// every 10 do var i ;
31571: GO 31573
31573: DISABLE
31574: LD_INT 0
31576: PPUSH
// begin enable ;
31577: ENABLE
// if not hInvincible then
31578: LD_EXP 113
31582: NOT
31583: IFFALSE 31587
// exit ;
31585: GO 31631
// for i in hInvincible do
31587: LD_ADDR_VAR 0 1
31591: PUSH
31592: LD_EXP 113
31596: PUSH
31597: FOR_IN
31598: IFFALSE 31629
// if GetLives ( i ) < 1000 then
31600: LD_VAR 0 1
31604: PPUSH
31605: CALL_OW 256
31609: PUSH
31610: LD_INT 1000
31612: LESS
31613: IFFALSE 31627
// SetLives ( i , 1000 ) ;
31615: LD_VAR 0 1
31619: PPUSH
31620: LD_INT 1000
31622: PPUSH
31623: CALL_OW 234
31627: GO 31597
31629: POP
31630: POP
// end ;
31631: PPOPN 1
31633: END
// export function hHackInvincible ; var i ; begin
31634: LD_INT 0
31636: PPUSH
31637: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31638: LD_ADDR_VAR 0 2
31642: PUSH
31643: LD_INT 2
31645: PUSH
31646: LD_INT 21
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 21
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: LIST
31670: PPUSH
31671: CALL_OW 69
31675: PUSH
31676: FOR_IN
31677: IFFALSE 31738
// if IsSelected ( i ) then
31679: LD_VAR 0 2
31683: PPUSH
31684: CALL_OW 306
31688: IFFALSE 31736
// begin if i in hInvincible then
31690: LD_VAR 0 2
31694: PUSH
31695: LD_EXP 113
31699: IN
31700: IFFALSE 31720
// hInvincible := hInvincible diff i else
31702: LD_ADDR_EXP 113
31706: PUSH
31707: LD_EXP 113
31711: PUSH
31712: LD_VAR 0 2
31716: DIFF
31717: ST_TO_ADDR
31718: GO 31736
// hInvincible := hInvincible union i ;
31720: LD_ADDR_EXP 113
31724: PUSH
31725: LD_EXP 113
31729: PUSH
31730: LD_VAR 0 2
31734: UNION
31735: ST_TO_ADDR
// end ;
31736: GO 31676
31738: POP
31739: POP
// end ;
31740: LD_VAR 0 1
31744: RET
// export function hHackInvisible ; var i , j ; begin
31745: LD_INT 0
31747: PPUSH
31748: PPUSH
31749: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31750: LD_ADDR_VAR 0 2
31754: PUSH
31755: LD_INT 21
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PPUSH
31765: CALL_OW 69
31769: PUSH
31770: FOR_IN
31771: IFFALSE 31795
// if IsSelected ( i ) then
31773: LD_VAR 0 2
31777: PPUSH
31778: CALL_OW 306
31782: IFFALSE 31793
// ComForceInvisible ( i ) ;
31784: LD_VAR 0 2
31788: PPUSH
31789: CALL_OW 496
31793: GO 31770
31795: POP
31796: POP
// end ;
31797: LD_VAR 0 1
31801: RET
// export function hHackChangeYourSide ; begin
31802: LD_INT 0
31804: PPUSH
// if your_side = 8 then
31805: LD_OWVAR 2
31809: PUSH
31810: LD_INT 8
31812: EQUAL
31813: IFFALSE 31825
// your_side := 0 else
31815: LD_ADDR_OWVAR 2
31819: PUSH
31820: LD_INT 0
31822: ST_TO_ADDR
31823: GO 31839
// your_side := your_side + 1 ;
31825: LD_ADDR_OWVAR 2
31829: PUSH
31830: LD_OWVAR 2
31834: PUSH
31835: LD_INT 1
31837: PLUS
31838: ST_TO_ADDR
// end ;
31839: LD_VAR 0 1
31843: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31844: LD_INT 0
31846: PPUSH
31847: PPUSH
31848: PPUSH
// for i in all_units do
31849: LD_ADDR_VAR 0 2
31853: PUSH
31854: LD_OWVAR 3
31858: PUSH
31859: FOR_IN
31860: IFFALSE 31938
// if IsSelected ( i ) then
31862: LD_VAR 0 2
31866: PPUSH
31867: CALL_OW 306
31871: IFFALSE 31936
// begin j := GetSide ( i ) ;
31873: LD_ADDR_VAR 0 3
31877: PUSH
31878: LD_VAR 0 2
31882: PPUSH
31883: CALL_OW 255
31887: ST_TO_ADDR
// if j = 8 then
31888: LD_VAR 0 3
31892: PUSH
31893: LD_INT 8
31895: EQUAL
31896: IFFALSE 31908
// j := 0 else
31898: LD_ADDR_VAR 0 3
31902: PUSH
31903: LD_INT 0
31905: ST_TO_ADDR
31906: GO 31922
// j := j + 1 ;
31908: LD_ADDR_VAR 0 3
31912: PUSH
31913: LD_VAR 0 3
31917: PUSH
31918: LD_INT 1
31920: PLUS
31921: ST_TO_ADDR
// SetSide ( i , j ) ;
31922: LD_VAR 0 2
31926: PPUSH
31927: LD_VAR 0 3
31931: PPUSH
31932: CALL_OW 235
// end ;
31936: GO 31859
31938: POP
31939: POP
// end ;
31940: LD_VAR 0 1
31944: RET
// export function hHackFog ; begin
31945: LD_INT 0
31947: PPUSH
// FogOff ( true ) ;
31948: LD_INT 1
31950: PPUSH
31951: CALL_OW 344
// end ;
31955: LD_VAR 0 1
31959: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31960: LD_INT 0
31962: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31963: LD_VAR 0 1
31967: PPUSH
31968: LD_VAR 0 2
31972: PPUSH
31973: LD_VAR 0 3
31977: PPUSH
31978: LD_INT 1
31980: PPUSH
31981: LD_INT 1
31983: PPUSH
31984: CALL_OW 483
// CenterOnXY ( x , y ) ;
31988: LD_VAR 0 2
31992: PPUSH
31993: LD_VAR 0 3
31997: PPUSH
31998: CALL_OW 84
// end ; end_of_file
32002: LD_VAR 0 4
32006: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32007: LD_INT 0
32009: PPUSH
32010: PPUSH
32011: PPUSH
32012: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32013: LD_VAR 0 1
32017: PPUSH
32018: CALL_OW 264
32022: PUSH
32023: LD_EXP 47
32027: EQUAL
32028: IFFALSE 32100
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32030: LD_INT 68
32032: PPUSH
32033: LD_VAR 0 1
32037: PPUSH
32038: CALL_OW 255
32042: PPUSH
32043: CALL_OW 321
32047: PUSH
32048: LD_INT 2
32050: EQUAL
32051: IFFALSE 32063
// eff := 70 else
32053: LD_ADDR_VAR 0 4
32057: PUSH
32058: LD_INT 70
32060: ST_TO_ADDR
32061: GO 32071
// eff := 30 ;
32063: LD_ADDR_VAR 0 4
32067: PUSH
32068: LD_INT 30
32070: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32071: LD_VAR 0 1
32075: PPUSH
32076: CALL_OW 250
32080: PPUSH
32081: LD_VAR 0 1
32085: PPUSH
32086: CALL_OW 251
32090: PPUSH
32091: LD_VAR 0 4
32095: PPUSH
32096: CALL_OW 495
// end ; end ;
32100: LD_VAR 0 2
32104: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32105: LD_INT 0
32107: PPUSH
// end ;
32108: LD_VAR 0 4
32112: RET
// export function SOS_Command ( cmd ) ; begin
32113: LD_INT 0
32115: PPUSH
// end ;
32116: LD_VAR 0 2
32120: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32121: LD_INT 0
32123: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32124: LD_VAR 0 1
32128: PUSH
32129: LD_INT 250
32131: EQUAL
32132: PUSH
32133: LD_VAR 0 2
32137: PPUSH
32138: CALL_OW 264
32142: PUSH
32143: LD_EXP 50
32147: EQUAL
32148: AND
32149: IFFALSE 32170
// MinerPlaceMine ( unit , x , y ) ;
32151: LD_VAR 0 2
32155: PPUSH
32156: LD_VAR 0 4
32160: PPUSH
32161: LD_VAR 0 5
32165: PPUSH
32166: CALL 34511 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32170: LD_VAR 0 1
32174: PUSH
32175: LD_INT 251
32177: EQUAL
32178: PUSH
32179: LD_VAR 0 2
32183: PPUSH
32184: CALL_OW 264
32188: PUSH
32189: LD_EXP 50
32193: EQUAL
32194: AND
32195: IFFALSE 32216
// MinerDetonateMine ( unit , x , y ) ;
32197: LD_VAR 0 2
32201: PPUSH
32202: LD_VAR 0 4
32206: PPUSH
32207: LD_VAR 0 5
32211: PPUSH
32212: CALL 34788 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32216: LD_VAR 0 1
32220: PUSH
32221: LD_INT 252
32223: EQUAL
32224: PUSH
32225: LD_VAR 0 2
32229: PPUSH
32230: CALL_OW 264
32234: PUSH
32235: LD_EXP 50
32239: EQUAL
32240: AND
32241: IFFALSE 32262
// MinerCreateMinefield ( unit , x , y ) ;
32243: LD_VAR 0 2
32247: PPUSH
32248: LD_VAR 0 4
32252: PPUSH
32253: LD_VAR 0 5
32257: PPUSH
32258: CALL 35205 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32262: LD_VAR 0 1
32266: PUSH
32267: LD_INT 253
32269: EQUAL
32270: PUSH
32271: LD_VAR 0 2
32275: PPUSH
32276: CALL_OW 257
32280: PUSH
32281: LD_INT 5
32283: EQUAL
32284: AND
32285: IFFALSE 32306
// ComBinocular ( unit , x , y ) ;
32287: LD_VAR 0 2
32291: PPUSH
32292: LD_VAR 0 4
32296: PPUSH
32297: LD_VAR 0 5
32301: PPUSH
32302: CALL 35576 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32306: LD_VAR 0 1
32310: PUSH
32311: LD_INT 254
32313: EQUAL
32314: PUSH
32315: LD_VAR 0 2
32319: PPUSH
32320: CALL_OW 264
32324: PUSH
32325: LD_EXP 45
32329: EQUAL
32330: AND
32331: PUSH
32332: LD_VAR 0 3
32336: PPUSH
32337: CALL_OW 263
32341: PUSH
32342: LD_INT 3
32344: EQUAL
32345: AND
32346: IFFALSE 32362
// HackDestroyVehicle ( unit , selectedUnit ) ;
32348: LD_VAR 0 2
32352: PPUSH
32353: LD_VAR 0 3
32357: PPUSH
32358: CALL 33871 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32362: LD_VAR 0 1
32366: PUSH
32367: LD_INT 255
32369: EQUAL
32370: PUSH
32371: LD_VAR 0 2
32375: PPUSH
32376: CALL_OW 264
32380: PUSH
32381: LD_INT 14
32383: PUSH
32384: LD_INT 53
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: IN
32391: AND
32392: PUSH
32393: LD_VAR 0 4
32397: PPUSH
32398: LD_VAR 0 5
32402: PPUSH
32403: CALL_OW 488
32407: AND
32408: IFFALSE 32432
// CutTreeXYR ( unit , x , y , 12 ) ;
32410: LD_VAR 0 2
32414: PPUSH
32415: LD_VAR 0 4
32419: PPUSH
32420: LD_VAR 0 5
32424: PPUSH
32425: LD_INT 12
32427: PPUSH
32428: CALL 32437 0 4
// end ;
32432: LD_VAR 0 6
32436: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32437: LD_INT 0
32439: PPUSH
32440: PPUSH
32441: PPUSH
32442: PPUSH
32443: PPUSH
32444: PPUSH
32445: PPUSH
32446: PPUSH
32447: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32448: LD_VAR 0 1
32452: NOT
32453: PUSH
32454: LD_VAR 0 2
32458: PPUSH
32459: LD_VAR 0 3
32463: PPUSH
32464: CALL_OW 488
32468: NOT
32469: OR
32470: PUSH
32471: LD_VAR 0 4
32475: NOT
32476: OR
32477: IFFALSE 32481
// exit ;
32479: GO 32821
// list := [ ] ;
32481: LD_ADDR_VAR 0 13
32485: PUSH
32486: EMPTY
32487: ST_TO_ADDR
// if x - r < 0 then
32488: LD_VAR 0 2
32492: PUSH
32493: LD_VAR 0 4
32497: MINUS
32498: PUSH
32499: LD_INT 0
32501: LESS
32502: IFFALSE 32514
// min_x := 0 else
32504: LD_ADDR_VAR 0 7
32508: PUSH
32509: LD_INT 0
32511: ST_TO_ADDR
32512: GO 32530
// min_x := x - r ;
32514: LD_ADDR_VAR 0 7
32518: PUSH
32519: LD_VAR 0 2
32523: PUSH
32524: LD_VAR 0 4
32528: MINUS
32529: ST_TO_ADDR
// if y - r < 0 then
32530: LD_VAR 0 3
32534: PUSH
32535: LD_VAR 0 4
32539: MINUS
32540: PUSH
32541: LD_INT 0
32543: LESS
32544: IFFALSE 32556
// min_y := 0 else
32546: LD_ADDR_VAR 0 8
32550: PUSH
32551: LD_INT 0
32553: ST_TO_ADDR
32554: GO 32572
// min_y := y - r ;
32556: LD_ADDR_VAR 0 8
32560: PUSH
32561: LD_VAR 0 3
32565: PUSH
32566: LD_VAR 0 4
32570: MINUS
32571: ST_TO_ADDR
// max_x := x + r ;
32572: LD_ADDR_VAR 0 9
32576: PUSH
32577: LD_VAR 0 2
32581: PUSH
32582: LD_VAR 0 4
32586: PLUS
32587: ST_TO_ADDR
// max_y := y + r ;
32588: LD_ADDR_VAR 0 10
32592: PUSH
32593: LD_VAR 0 3
32597: PUSH
32598: LD_VAR 0 4
32602: PLUS
32603: ST_TO_ADDR
// for _x = min_x to max_x do
32604: LD_ADDR_VAR 0 11
32608: PUSH
32609: DOUBLE
32610: LD_VAR 0 7
32614: DEC
32615: ST_TO_ADDR
32616: LD_VAR 0 9
32620: PUSH
32621: FOR_TO
32622: IFFALSE 32739
// for _y = min_y to max_y do
32624: LD_ADDR_VAR 0 12
32628: PUSH
32629: DOUBLE
32630: LD_VAR 0 8
32634: DEC
32635: ST_TO_ADDR
32636: LD_VAR 0 10
32640: PUSH
32641: FOR_TO
32642: IFFALSE 32735
// begin if not ValidHex ( _x , _y ) then
32644: LD_VAR 0 11
32648: PPUSH
32649: LD_VAR 0 12
32653: PPUSH
32654: CALL_OW 488
32658: NOT
32659: IFFALSE 32663
// continue ;
32661: GO 32641
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32663: LD_VAR 0 11
32667: PPUSH
32668: LD_VAR 0 12
32672: PPUSH
32673: CALL_OW 351
32677: PUSH
32678: LD_VAR 0 11
32682: PPUSH
32683: LD_VAR 0 12
32687: PPUSH
32688: CALL_OW 554
32692: AND
32693: IFFALSE 32733
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32695: LD_ADDR_VAR 0 13
32699: PUSH
32700: LD_VAR 0 13
32704: PPUSH
32705: LD_VAR 0 13
32709: PUSH
32710: LD_INT 1
32712: PLUS
32713: PPUSH
32714: LD_VAR 0 11
32718: PUSH
32719: LD_VAR 0 12
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PPUSH
32728: CALL_OW 2
32732: ST_TO_ADDR
// end ;
32733: GO 32641
32735: POP
32736: POP
32737: GO 32621
32739: POP
32740: POP
// if not list then
32741: LD_VAR 0 13
32745: NOT
32746: IFFALSE 32750
// exit ;
32748: GO 32821
// for i in list do
32750: LD_ADDR_VAR 0 6
32754: PUSH
32755: LD_VAR 0 13
32759: PUSH
32760: FOR_IN
32761: IFFALSE 32819
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32763: LD_VAR 0 1
32767: PPUSH
32768: LD_STRING M
32770: PUSH
32771: LD_VAR 0 6
32775: PUSH
32776: LD_INT 1
32778: ARRAY
32779: PUSH
32780: LD_VAR 0 6
32784: PUSH
32785: LD_INT 2
32787: ARRAY
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: LD_INT 0
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: PUSH
32810: EMPTY
32811: LIST
32812: PPUSH
32813: CALL_OW 447
32817: GO 32760
32819: POP
32820: POP
// end ;
32821: LD_VAR 0 5
32825: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32826: LD_EXP 114
32830: NOT
32831: IFFALSE 32881
32833: GO 32835
32835: DISABLE
// begin initHack := true ;
32836: LD_ADDR_EXP 114
32840: PUSH
32841: LD_INT 1
32843: ST_TO_ADDR
// hackTanks := [ ] ;
32844: LD_ADDR_EXP 115
32848: PUSH
32849: EMPTY
32850: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32851: LD_ADDR_EXP 116
32855: PUSH
32856: EMPTY
32857: ST_TO_ADDR
// hackLimit := 3 ;
32858: LD_ADDR_EXP 117
32862: PUSH
32863: LD_INT 3
32865: ST_TO_ADDR
// hackDist := 12 ;
32866: LD_ADDR_EXP 118
32870: PUSH
32871: LD_INT 12
32873: ST_TO_ADDR
// hackCounter := [ ] ;
32874: LD_ADDR_EXP 119
32878: PUSH
32879: EMPTY
32880: ST_TO_ADDR
// end ;
32881: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32882: LD_EXP 114
32886: PUSH
32887: LD_INT 34
32889: PUSH
32890: LD_EXP 45
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PPUSH
32899: CALL_OW 69
32903: AND
32904: IFFALSE 33159
32906: GO 32908
32908: DISABLE
32909: LD_INT 0
32911: PPUSH
32912: PPUSH
// begin enable ;
32913: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32914: LD_ADDR_VAR 0 1
32918: PUSH
32919: LD_INT 34
32921: PUSH
32922: LD_EXP 45
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PPUSH
32931: CALL_OW 69
32935: PUSH
32936: FOR_IN
32937: IFFALSE 33157
// begin if not i in hackTanks then
32939: LD_VAR 0 1
32943: PUSH
32944: LD_EXP 115
32948: IN
32949: NOT
32950: IFFALSE 33033
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32952: LD_ADDR_EXP 115
32956: PUSH
32957: LD_EXP 115
32961: PPUSH
32962: LD_EXP 115
32966: PUSH
32967: LD_INT 1
32969: PLUS
32970: PPUSH
32971: LD_VAR 0 1
32975: PPUSH
32976: CALL_OW 1
32980: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32981: LD_ADDR_EXP 116
32985: PUSH
32986: LD_EXP 116
32990: PPUSH
32991: LD_EXP 116
32995: PUSH
32996: LD_INT 1
32998: PLUS
32999: PPUSH
33000: EMPTY
33001: PPUSH
33002: CALL_OW 1
33006: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33007: LD_ADDR_EXP 119
33011: PUSH
33012: LD_EXP 119
33016: PPUSH
33017: LD_EXP 119
33021: PUSH
33022: LD_INT 1
33024: PLUS
33025: PPUSH
33026: EMPTY
33027: PPUSH
33028: CALL_OW 1
33032: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33033: LD_VAR 0 1
33037: PPUSH
33038: CALL_OW 302
33042: NOT
33043: IFFALSE 33056
// begin HackUnlinkAll ( i ) ;
33045: LD_VAR 0 1
33049: PPUSH
33050: CALL 33162 0 1
// continue ;
33054: GO 32936
// end ; HackCheckCapturedStatus ( i ) ;
33056: LD_VAR 0 1
33060: PPUSH
33061: CALL 33605 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33065: LD_ADDR_VAR 0 2
33069: PUSH
33070: LD_INT 81
33072: PUSH
33073: LD_VAR 0 1
33077: PPUSH
33078: CALL_OW 255
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 33
33089: PUSH
33090: LD_INT 3
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 91
33099: PUSH
33100: LD_VAR 0 1
33104: PUSH
33105: LD_EXP 118
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 50
33117: PUSH
33118: EMPTY
33119: LIST
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: PPUSH
33127: CALL_OW 69
33131: ST_TO_ADDR
// if not tmp then
33132: LD_VAR 0 2
33136: NOT
33137: IFFALSE 33141
// continue ;
33139: GO 32936
// HackLink ( i , tmp ) ;
33141: LD_VAR 0 1
33145: PPUSH
33146: LD_VAR 0 2
33150: PPUSH
33151: CALL 33298 0 2
// end ;
33155: GO 32936
33157: POP
33158: POP
// end ;
33159: PPOPN 2
33161: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33162: LD_INT 0
33164: PPUSH
33165: PPUSH
33166: PPUSH
// if not hack in hackTanks then
33167: LD_VAR 0 1
33171: PUSH
33172: LD_EXP 115
33176: IN
33177: NOT
33178: IFFALSE 33182
// exit ;
33180: GO 33293
// index := GetElementIndex ( hackTanks , hack ) ;
33182: LD_ADDR_VAR 0 4
33186: PUSH
33187: LD_EXP 115
33191: PPUSH
33192: LD_VAR 0 1
33196: PPUSH
33197: CALL 40727 0 2
33201: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33202: LD_EXP 116
33206: PUSH
33207: LD_VAR 0 4
33211: ARRAY
33212: IFFALSE 33293
// begin for i in hackTanksCaptured [ index ] do
33214: LD_ADDR_VAR 0 3
33218: PUSH
33219: LD_EXP 116
33223: PUSH
33224: LD_VAR 0 4
33228: ARRAY
33229: PUSH
33230: FOR_IN
33231: IFFALSE 33257
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33233: LD_VAR 0 3
33237: PUSH
33238: LD_INT 1
33240: ARRAY
33241: PPUSH
33242: LD_VAR 0 3
33246: PUSH
33247: LD_INT 2
33249: ARRAY
33250: PPUSH
33251: CALL_OW 235
33255: GO 33230
33257: POP
33258: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33259: LD_ADDR_EXP 116
33263: PUSH
33264: LD_EXP 116
33268: PPUSH
33269: LD_VAR 0 4
33273: PPUSH
33274: EMPTY
33275: PPUSH
33276: CALL_OW 1
33280: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33281: LD_VAR 0 1
33285: PPUSH
33286: LD_INT 0
33288: PPUSH
33289: CALL_OW 505
// end ; end ;
33293: LD_VAR 0 2
33297: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33298: LD_INT 0
33300: PPUSH
33301: PPUSH
33302: PPUSH
// if not hack in hackTanks or not vehicles then
33303: LD_VAR 0 1
33307: PUSH
33308: LD_EXP 115
33312: IN
33313: NOT
33314: PUSH
33315: LD_VAR 0 2
33319: NOT
33320: OR
33321: IFFALSE 33325
// exit ;
33323: GO 33600
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33325: LD_ADDR_VAR 0 2
33329: PUSH
33330: LD_VAR 0 1
33334: PPUSH
33335: LD_VAR 0 2
33339: PPUSH
33340: LD_INT 1
33342: PPUSH
33343: LD_INT 1
33345: PPUSH
33346: CALL 41377 0 4
33350: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33351: LD_ADDR_VAR 0 5
33355: PUSH
33356: LD_EXP 115
33360: PPUSH
33361: LD_VAR 0 1
33365: PPUSH
33366: CALL 40727 0 2
33370: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33371: LD_EXP 116
33375: PUSH
33376: LD_VAR 0 5
33380: ARRAY
33381: PUSH
33382: LD_EXP 117
33386: LESS
33387: IFFALSE 33576
// begin for i := 1 to vehicles do
33389: LD_ADDR_VAR 0 4
33393: PUSH
33394: DOUBLE
33395: LD_INT 1
33397: DEC
33398: ST_TO_ADDR
33399: LD_VAR 0 2
33403: PUSH
33404: FOR_TO
33405: IFFALSE 33574
// begin if hackTanksCaptured [ index ] = hackLimit then
33407: LD_EXP 116
33411: PUSH
33412: LD_VAR 0 5
33416: ARRAY
33417: PUSH
33418: LD_EXP 117
33422: EQUAL
33423: IFFALSE 33427
// break ;
33425: GO 33574
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33427: LD_ADDR_EXP 119
33431: PUSH
33432: LD_EXP 119
33436: PPUSH
33437: LD_VAR 0 5
33441: PPUSH
33442: LD_EXP 119
33446: PUSH
33447: LD_VAR 0 5
33451: ARRAY
33452: PUSH
33453: LD_INT 1
33455: PLUS
33456: PPUSH
33457: CALL_OW 1
33461: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33462: LD_ADDR_EXP 116
33466: PUSH
33467: LD_EXP 116
33471: PPUSH
33472: LD_VAR 0 5
33476: PUSH
33477: LD_EXP 116
33481: PUSH
33482: LD_VAR 0 5
33486: ARRAY
33487: PUSH
33488: LD_INT 1
33490: PLUS
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PPUSH
33496: LD_VAR 0 2
33500: PUSH
33501: LD_VAR 0 4
33505: ARRAY
33506: PUSH
33507: LD_VAR 0 2
33511: PUSH
33512: LD_VAR 0 4
33516: ARRAY
33517: PPUSH
33518: CALL_OW 255
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PPUSH
33527: CALL 40942 0 3
33531: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33532: LD_VAR 0 2
33536: PUSH
33537: LD_VAR 0 4
33541: ARRAY
33542: PPUSH
33543: LD_VAR 0 1
33547: PPUSH
33548: CALL_OW 255
33552: PPUSH
33553: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33557: LD_VAR 0 2
33561: PUSH
33562: LD_VAR 0 4
33566: ARRAY
33567: PPUSH
33568: CALL_OW 141
// end ;
33572: GO 33404
33574: POP
33575: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33576: LD_VAR 0 1
33580: PPUSH
33581: LD_EXP 116
33585: PUSH
33586: LD_VAR 0 5
33590: ARRAY
33591: PUSH
33592: LD_INT 0
33594: PLUS
33595: PPUSH
33596: CALL_OW 505
// end ;
33600: LD_VAR 0 3
33604: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33605: LD_INT 0
33607: PPUSH
33608: PPUSH
33609: PPUSH
33610: PPUSH
// if not hack in hackTanks then
33611: LD_VAR 0 1
33615: PUSH
33616: LD_EXP 115
33620: IN
33621: NOT
33622: IFFALSE 33626
// exit ;
33624: GO 33866
// index := GetElementIndex ( hackTanks , hack ) ;
33626: LD_ADDR_VAR 0 4
33630: PUSH
33631: LD_EXP 115
33635: PPUSH
33636: LD_VAR 0 1
33640: PPUSH
33641: CALL 40727 0 2
33645: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33646: LD_ADDR_VAR 0 3
33650: PUSH
33651: DOUBLE
33652: LD_EXP 116
33656: PUSH
33657: LD_VAR 0 4
33661: ARRAY
33662: INC
33663: ST_TO_ADDR
33664: LD_INT 1
33666: PUSH
33667: FOR_DOWNTO
33668: IFFALSE 33840
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33670: LD_ADDR_VAR 0 5
33674: PUSH
33675: LD_EXP 116
33679: PUSH
33680: LD_VAR 0 4
33684: ARRAY
33685: PUSH
33686: LD_VAR 0 3
33690: ARRAY
33691: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33692: LD_VAR 0 5
33696: PUSH
33697: LD_INT 1
33699: ARRAY
33700: PPUSH
33701: CALL_OW 302
33705: NOT
33706: PUSH
33707: LD_VAR 0 5
33711: PUSH
33712: LD_INT 1
33714: ARRAY
33715: PPUSH
33716: CALL_OW 255
33720: PUSH
33721: LD_VAR 0 1
33725: PPUSH
33726: CALL_OW 255
33730: NONEQUAL
33731: OR
33732: IFFALSE 33838
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33734: LD_VAR 0 5
33738: PUSH
33739: LD_INT 1
33741: ARRAY
33742: PPUSH
33743: CALL_OW 305
33747: PUSH
33748: LD_VAR 0 5
33752: PUSH
33753: LD_INT 1
33755: ARRAY
33756: PPUSH
33757: CALL_OW 255
33761: PUSH
33762: LD_VAR 0 1
33766: PPUSH
33767: CALL_OW 255
33771: EQUAL
33772: AND
33773: IFFALSE 33797
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33775: LD_VAR 0 5
33779: PUSH
33780: LD_INT 1
33782: ARRAY
33783: PPUSH
33784: LD_VAR 0 5
33788: PUSH
33789: LD_INT 2
33791: ARRAY
33792: PPUSH
33793: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33797: LD_ADDR_EXP 116
33801: PUSH
33802: LD_EXP 116
33806: PPUSH
33807: LD_VAR 0 4
33811: PPUSH
33812: LD_EXP 116
33816: PUSH
33817: LD_VAR 0 4
33821: ARRAY
33822: PPUSH
33823: LD_VAR 0 3
33827: PPUSH
33828: CALL_OW 3
33832: PPUSH
33833: CALL_OW 1
33837: ST_TO_ADDR
// end ; end ;
33838: GO 33667
33840: POP
33841: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33842: LD_VAR 0 1
33846: PPUSH
33847: LD_EXP 116
33851: PUSH
33852: LD_VAR 0 4
33856: ARRAY
33857: PUSH
33858: LD_INT 0
33860: PLUS
33861: PPUSH
33862: CALL_OW 505
// end ;
33866: LD_VAR 0 2
33870: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33871: LD_INT 0
33873: PPUSH
33874: PPUSH
33875: PPUSH
33876: PPUSH
// if not hack in hackTanks then
33877: LD_VAR 0 1
33881: PUSH
33882: LD_EXP 115
33886: IN
33887: NOT
33888: IFFALSE 33892
// exit ;
33890: GO 33977
// index := GetElementIndex ( hackTanks , hack ) ;
33892: LD_ADDR_VAR 0 5
33896: PUSH
33897: LD_EXP 115
33901: PPUSH
33902: LD_VAR 0 1
33906: PPUSH
33907: CALL 40727 0 2
33911: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33912: LD_ADDR_VAR 0 4
33916: PUSH
33917: DOUBLE
33918: LD_INT 1
33920: DEC
33921: ST_TO_ADDR
33922: LD_EXP 116
33926: PUSH
33927: LD_VAR 0 5
33931: ARRAY
33932: PUSH
33933: FOR_TO
33934: IFFALSE 33975
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33936: LD_EXP 116
33940: PUSH
33941: LD_VAR 0 5
33945: ARRAY
33946: PUSH
33947: LD_VAR 0 4
33951: ARRAY
33952: PUSH
33953: LD_INT 1
33955: ARRAY
33956: PUSH
33957: LD_VAR 0 2
33961: EQUAL
33962: IFFALSE 33973
// KillUnit ( vehicle ) ;
33964: LD_VAR 0 2
33968: PPUSH
33969: CALL_OW 66
33973: GO 33933
33975: POP
33976: POP
// end ;
33977: LD_VAR 0 3
33981: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33982: LD_EXP 120
33986: NOT
33987: IFFALSE 34022
33989: GO 33991
33991: DISABLE
// begin initMiner := true ;
33992: LD_ADDR_EXP 120
33996: PUSH
33997: LD_INT 1
33999: ST_TO_ADDR
// minersList := [ ] ;
34000: LD_ADDR_EXP 121
34004: PUSH
34005: EMPTY
34006: ST_TO_ADDR
// minerMinesList := [ ] ;
34007: LD_ADDR_EXP 122
34011: PUSH
34012: EMPTY
34013: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34014: LD_ADDR_EXP 123
34018: PUSH
34019: LD_INT 5
34021: ST_TO_ADDR
// end ;
34022: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34023: LD_EXP 120
34027: PUSH
34028: LD_INT 34
34030: PUSH
34031: LD_EXP 50
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PPUSH
34040: CALL_OW 69
34044: AND
34045: IFFALSE 34508
34047: GO 34049
34049: DISABLE
34050: LD_INT 0
34052: PPUSH
34053: PPUSH
34054: PPUSH
34055: PPUSH
// begin enable ;
34056: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34057: LD_ADDR_VAR 0 1
34061: PUSH
34062: LD_INT 34
34064: PUSH
34065: LD_EXP 50
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PPUSH
34074: CALL_OW 69
34078: PUSH
34079: FOR_IN
34080: IFFALSE 34152
// begin if not i in minersList then
34082: LD_VAR 0 1
34086: PUSH
34087: LD_EXP 121
34091: IN
34092: NOT
34093: IFFALSE 34150
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34095: LD_ADDR_EXP 121
34099: PUSH
34100: LD_EXP 121
34104: PPUSH
34105: LD_EXP 121
34109: PUSH
34110: LD_INT 1
34112: PLUS
34113: PPUSH
34114: LD_VAR 0 1
34118: PPUSH
34119: CALL_OW 1
34123: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34124: LD_ADDR_EXP 122
34128: PUSH
34129: LD_EXP 122
34133: PPUSH
34134: LD_EXP 122
34138: PUSH
34139: LD_INT 1
34141: PLUS
34142: PPUSH
34143: EMPTY
34144: PPUSH
34145: CALL_OW 1
34149: ST_TO_ADDR
// end end ;
34150: GO 34079
34152: POP
34153: POP
// for i := minerMinesList downto 1 do
34154: LD_ADDR_VAR 0 1
34158: PUSH
34159: DOUBLE
34160: LD_EXP 122
34164: INC
34165: ST_TO_ADDR
34166: LD_INT 1
34168: PUSH
34169: FOR_DOWNTO
34170: IFFALSE 34506
// begin if IsLive ( minersList [ i ] ) then
34172: LD_EXP 121
34176: PUSH
34177: LD_VAR 0 1
34181: ARRAY
34182: PPUSH
34183: CALL_OW 300
34187: IFFALSE 34215
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34189: LD_EXP 121
34193: PUSH
34194: LD_VAR 0 1
34198: ARRAY
34199: PPUSH
34200: LD_EXP 122
34204: PUSH
34205: LD_VAR 0 1
34209: ARRAY
34210: PPUSH
34211: CALL_OW 505
// if not minerMinesList [ i ] then
34215: LD_EXP 122
34219: PUSH
34220: LD_VAR 0 1
34224: ARRAY
34225: NOT
34226: IFFALSE 34230
// continue ;
34228: GO 34169
// for j := minerMinesList [ i ] downto 1 do
34230: LD_ADDR_VAR 0 2
34234: PUSH
34235: DOUBLE
34236: LD_EXP 122
34240: PUSH
34241: LD_VAR 0 1
34245: ARRAY
34246: INC
34247: ST_TO_ADDR
34248: LD_INT 1
34250: PUSH
34251: FOR_DOWNTO
34252: IFFALSE 34502
// begin side := GetSide ( minersList [ i ] ) ;
34254: LD_ADDR_VAR 0 3
34258: PUSH
34259: LD_EXP 121
34263: PUSH
34264: LD_VAR 0 1
34268: ARRAY
34269: PPUSH
34270: CALL_OW 255
34274: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34275: LD_ADDR_VAR 0 4
34279: PUSH
34280: LD_EXP 122
34284: PUSH
34285: LD_VAR 0 1
34289: ARRAY
34290: PUSH
34291: LD_VAR 0 2
34295: ARRAY
34296: PUSH
34297: LD_INT 1
34299: ARRAY
34300: PPUSH
34301: LD_EXP 122
34305: PUSH
34306: LD_VAR 0 1
34310: ARRAY
34311: PUSH
34312: LD_VAR 0 2
34316: ARRAY
34317: PUSH
34318: LD_INT 2
34320: ARRAY
34321: PPUSH
34322: CALL_OW 428
34326: ST_TO_ADDR
// if not tmp then
34327: LD_VAR 0 4
34331: NOT
34332: IFFALSE 34336
// continue ;
34334: GO 34251
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34336: LD_VAR 0 4
34340: PUSH
34341: LD_INT 81
34343: PUSH
34344: LD_VAR 0 3
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PPUSH
34353: CALL_OW 69
34357: IN
34358: PUSH
34359: LD_EXP 122
34363: PUSH
34364: LD_VAR 0 1
34368: ARRAY
34369: PUSH
34370: LD_VAR 0 2
34374: ARRAY
34375: PUSH
34376: LD_INT 1
34378: ARRAY
34379: PPUSH
34380: LD_EXP 122
34384: PUSH
34385: LD_VAR 0 1
34389: ARRAY
34390: PUSH
34391: LD_VAR 0 2
34395: ARRAY
34396: PUSH
34397: LD_INT 2
34399: ARRAY
34400: PPUSH
34401: CALL_OW 458
34405: AND
34406: IFFALSE 34500
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34408: LD_EXP 122
34412: PUSH
34413: LD_VAR 0 1
34417: ARRAY
34418: PUSH
34419: LD_VAR 0 2
34423: ARRAY
34424: PUSH
34425: LD_INT 1
34427: ARRAY
34428: PPUSH
34429: LD_EXP 122
34433: PUSH
34434: LD_VAR 0 1
34438: ARRAY
34439: PUSH
34440: LD_VAR 0 2
34444: ARRAY
34445: PUSH
34446: LD_INT 2
34448: ARRAY
34449: PPUSH
34450: LD_VAR 0 3
34454: PPUSH
34455: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34459: LD_ADDR_EXP 122
34463: PUSH
34464: LD_EXP 122
34468: PPUSH
34469: LD_VAR 0 1
34473: PPUSH
34474: LD_EXP 122
34478: PUSH
34479: LD_VAR 0 1
34483: ARRAY
34484: PPUSH
34485: LD_VAR 0 2
34489: PPUSH
34490: CALL_OW 3
34494: PPUSH
34495: CALL_OW 1
34499: ST_TO_ADDR
// end ; end ;
34500: GO 34251
34502: POP
34503: POP
// end ;
34504: GO 34169
34506: POP
34507: POP
// end ;
34508: PPOPN 4
34510: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34511: LD_INT 0
34513: PPUSH
34514: PPUSH
// result := false ;
34515: LD_ADDR_VAR 0 4
34519: PUSH
34520: LD_INT 0
34522: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34523: LD_VAR 0 1
34527: PPUSH
34528: CALL_OW 264
34532: PUSH
34533: LD_EXP 50
34537: EQUAL
34538: NOT
34539: IFFALSE 34543
// exit ;
34541: GO 34783
// index := GetElementIndex ( minersList , unit ) ;
34543: LD_ADDR_VAR 0 5
34547: PUSH
34548: LD_EXP 121
34552: PPUSH
34553: LD_VAR 0 1
34557: PPUSH
34558: CALL 40727 0 2
34562: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34563: LD_EXP 122
34567: PUSH
34568: LD_VAR 0 5
34572: ARRAY
34573: PUSH
34574: LD_EXP 123
34578: GREATEREQUAL
34579: IFFALSE 34583
// exit ;
34581: GO 34783
// ComMoveXY ( unit , x , y ) ;
34583: LD_VAR 0 1
34587: PPUSH
34588: LD_VAR 0 2
34592: PPUSH
34593: LD_VAR 0 3
34597: PPUSH
34598: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34602: LD_INT 35
34604: PPUSH
34605: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34609: LD_VAR 0 1
34613: PPUSH
34614: LD_VAR 0 2
34618: PPUSH
34619: LD_VAR 0 3
34623: PPUSH
34624: CALL 70791 0 3
34628: NOT
34629: PUSH
34630: LD_VAR 0 1
34634: PPUSH
34635: CALL_OW 314
34639: AND
34640: IFFALSE 34644
// exit ;
34642: GO 34783
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34644: LD_VAR 0 2
34648: PPUSH
34649: LD_VAR 0 3
34653: PPUSH
34654: CALL_OW 428
34658: PUSH
34659: LD_VAR 0 1
34663: EQUAL
34664: PUSH
34665: LD_VAR 0 1
34669: PPUSH
34670: CALL_OW 314
34674: NOT
34675: AND
34676: IFFALSE 34602
// PlaySoundXY ( x , y , PlantMine ) ;
34678: LD_VAR 0 2
34682: PPUSH
34683: LD_VAR 0 3
34687: PPUSH
34688: LD_STRING PlantMine
34690: PPUSH
34691: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34695: LD_VAR 0 2
34699: PPUSH
34700: LD_VAR 0 3
34704: PPUSH
34705: LD_VAR 0 1
34709: PPUSH
34710: CALL_OW 255
34714: PPUSH
34715: LD_INT 0
34717: PPUSH
34718: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34722: LD_ADDR_EXP 122
34726: PUSH
34727: LD_EXP 122
34731: PPUSH
34732: LD_VAR 0 5
34736: PUSH
34737: LD_EXP 122
34741: PUSH
34742: LD_VAR 0 5
34746: ARRAY
34747: PUSH
34748: LD_INT 1
34750: PLUS
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PPUSH
34756: LD_VAR 0 2
34760: PUSH
34761: LD_VAR 0 3
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PPUSH
34770: CALL 40942 0 3
34774: ST_TO_ADDR
// result := true ;
34775: LD_ADDR_VAR 0 4
34779: PUSH
34780: LD_INT 1
34782: ST_TO_ADDR
// end ;
34783: LD_VAR 0 4
34787: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34788: LD_INT 0
34790: PPUSH
34791: PPUSH
34792: PPUSH
// if not unit in minersList then
34793: LD_VAR 0 1
34797: PUSH
34798: LD_EXP 121
34802: IN
34803: NOT
34804: IFFALSE 34808
// exit ;
34806: GO 35200
// index := GetElementIndex ( minersList , unit ) ;
34808: LD_ADDR_VAR 0 6
34812: PUSH
34813: LD_EXP 121
34817: PPUSH
34818: LD_VAR 0 1
34822: PPUSH
34823: CALL 40727 0 2
34827: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34828: LD_ADDR_VAR 0 5
34832: PUSH
34833: DOUBLE
34834: LD_EXP 122
34838: PUSH
34839: LD_VAR 0 6
34843: ARRAY
34844: INC
34845: ST_TO_ADDR
34846: LD_INT 1
34848: PUSH
34849: FOR_DOWNTO
34850: IFFALSE 35011
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34852: LD_EXP 122
34856: PUSH
34857: LD_VAR 0 6
34861: ARRAY
34862: PUSH
34863: LD_VAR 0 5
34867: ARRAY
34868: PUSH
34869: LD_INT 1
34871: ARRAY
34872: PUSH
34873: LD_VAR 0 2
34877: EQUAL
34878: PUSH
34879: LD_EXP 122
34883: PUSH
34884: LD_VAR 0 6
34888: ARRAY
34889: PUSH
34890: LD_VAR 0 5
34894: ARRAY
34895: PUSH
34896: LD_INT 2
34898: ARRAY
34899: PUSH
34900: LD_VAR 0 3
34904: EQUAL
34905: AND
34906: IFFALSE 35009
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34908: LD_EXP 122
34912: PUSH
34913: LD_VAR 0 6
34917: ARRAY
34918: PUSH
34919: LD_VAR 0 5
34923: ARRAY
34924: PUSH
34925: LD_INT 1
34927: ARRAY
34928: PPUSH
34929: LD_EXP 122
34933: PUSH
34934: LD_VAR 0 6
34938: ARRAY
34939: PUSH
34940: LD_VAR 0 5
34944: ARRAY
34945: PUSH
34946: LD_INT 2
34948: ARRAY
34949: PPUSH
34950: LD_VAR 0 1
34954: PPUSH
34955: CALL_OW 255
34959: PPUSH
34960: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34964: LD_ADDR_EXP 122
34968: PUSH
34969: LD_EXP 122
34973: PPUSH
34974: LD_VAR 0 6
34978: PPUSH
34979: LD_EXP 122
34983: PUSH
34984: LD_VAR 0 6
34988: ARRAY
34989: PPUSH
34990: LD_VAR 0 5
34994: PPUSH
34995: CALL_OW 3
34999: PPUSH
35000: CALL_OW 1
35004: ST_TO_ADDR
// exit ;
35005: POP
35006: POP
35007: GO 35200
// end ; end ;
35009: GO 34849
35011: POP
35012: POP
// for i := minerMinesList [ index ] downto 1 do
35013: LD_ADDR_VAR 0 5
35017: PUSH
35018: DOUBLE
35019: LD_EXP 122
35023: PUSH
35024: LD_VAR 0 6
35028: ARRAY
35029: INC
35030: ST_TO_ADDR
35031: LD_INT 1
35033: PUSH
35034: FOR_DOWNTO
35035: IFFALSE 35198
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35037: LD_EXP 122
35041: PUSH
35042: LD_VAR 0 6
35046: ARRAY
35047: PUSH
35048: LD_VAR 0 5
35052: ARRAY
35053: PUSH
35054: LD_INT 1
35056: ARRAY
35057: PPUSH
35058: LD_EXP 122
35062: PUSH
35063: LD_VAR 0 6
35067: ARRAY
35068: PUSH
35069: LD_VAR 0 5
35073: ARRAY
35074: PUSH
35075: LD_INT 2
35077: ARRAY
35078: PPUSH
35079: LD_VAR 0 2
35083: PPUSH
35084: LD_VAR 0 3
35088: PPUSH
35089: CALL_OW 298
35093: PUSH
35094: LD_INT 6
35096: LESS
35097: IFFALSE 35196
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35099: LD_EXP 122
35103: PUSH
35104: LD_VAR 0 6
35108: ARRAY
35109: PUSH
35110: LD_VAR 0 5
35114: ARRAY
35115: PUSH
35116: LD_INT 1
35118: ARRAY
35119: PPUSH
35120: LD_EXP 122
35124: PUSH
35125: LD_VAR 0 6
35129: ARRAY
35130: PUSH
35131: LD_VAR 0 5
35135: ARRAY
35136: PUSH
35137: LD_INT 2
35139: ARRAY
35140: PPUSH
35141: LD_VAR 0 1
35145: PPUSH
35146: CALL_OW 255
35150: PPUSH
35151: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35155: LD_ADDR_EXP 122
35159: PUSH
35160: LD_EXP 122
35164: PPUSH
35165: LD_VAR 0 6
35169: PPUSH
35170: LD_EXP 122
35174: PUSH
35175: LD_VAR 0 6
35179: ARRAY
35180: PPUSH
35181: LD_VAR 0 5
35185: PPUSH
35186: CALL_OW 3
35190: PPUSH
35191: CALL_OW 1
35195: ST_TO_ADDR
// end ; end ;
35196: GO 35034
35198: POP
35199: POP
// end ;
35200: LD_VAR 0 4
35204: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35205: LD_INT 0
35207: PPUSH
35208: PPUSH
35209: PPUSH
35210: PPUSH
35211: PPUSH
35212: PPUSH
35213: PPUSH
35214: PPUSH
35215: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35216: LD_VAR 0 1
35220: PPUSH
35221: CALL_OW 264
35225: PUSH
35226: LD_EXP 50
35230: EQUAL
35231: NOT
35232: PUSH
35233: LD_VAR 0 1
35237: PUSH
35238: LD_EXP 121
35242: IN
35243: NOT
35244: OR
35245: IFFALSE 35249
// exit ;
35247: GO 35571
// index := GetElementIndex ( minersList , unit ) ;
35249: LD_ADDR_VAR 0 6
35253: PUSH
35254: LD_EXP 121
35258: PPUSH
35259: LD_VAR 0 1
35263: PPUSH
35264: CALL 40727 0 2
35268: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35269: LD_ADDR_VAR 0 8
35273: PUSH
35274: LD_EXP 123
35278: PUSH
35279: LD_EXP 122
35283: PUSH
35284: LD_VAR 0 6
35288: ARRAY
35289: MINUS
35290: ST_TO_ADDR
// if not minesFreeAmount then
35291: LD_VAR 0 8
35295: NOT
35296: IFFALSE 35300
// exit ;
35298: GO 35571
// tmp := [ ] ;
35300: LD_ADDR_VAR 0 7
35304: PUSH
35305: EMPTY
35306: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35307: LD_ADDR_VAR 0 5
35311: PUSH
35312: DOUBLE
35313: LD_INT 1
35315: DEC
35316: ST_TO_ADDR
35317: LD_VAR 0 8
35321: PUSH
35322: FOR_TO
35323: IFFALSE 35518
// begin _d := rand ( 0 , 5 ) ;
35325: LD_ADDR_VAR 0 11
35329: PUSH
35330: LD_INT 0
35332: PPUSH
35333: LD_INT 5
35335: PPUSH
35336: CALL_OW 12
35340: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35341: LD_ADDR_VAR 0 12
35345: PUSH
35346: LD_INT 2
35348: PPUSH
35349: LD_INT 6
35351: PPUSH
35352: CALL_OW 12
35356: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35357: LD_ADDR_VAR 0 9
35361: PUSH
35362: LD_VAR 0 2
35366: PPUSH
35367: LD_VAR 0 11
35371: PPUSH
35372: LD_VAR 0 12
35376: PPUSH
35377: CALL_OW 272
35381: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35382: LD_ADDR_VAR 0 10
35386: PUSH
35387: LD_VAR 0 3
35391: PPUSH
35392: LD_VAR 0 11
35396: PPUSH
35397: LD_VAR 0 12
35401: PPUSH
35402: CALL_OW 273
35406: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35407: LD_VAR 0 9
35411: PPUSH
35412: LD_VAR 0 10
35416: PPUSH
35417: CALL_OW 488
35421: PUSH
35422: LD_VAR 0 9
35426: PUSH
35427: LD_VAR 0 10
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_VAR 0 7
35440: IN
35441: NOT
35442: AND
35443: PUSH
35444: LD_VAR 0 9
35448: PPUSH
35449: LD_VAR 0 10
35453: PPUSH
35454: CALL_OW 458
35458: NOT
35459: AND
35460: IFFALSE 35502
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35462: LD_ADDR_VAR 0 7
35466: PUSH
35467: LD_VAR 0 7
35471: PPUSH
35472: LD_VAR 0 7
35476: PUSH
35477: LD_INT 1
35479: PLUS
35480: PPUSH
35481: LD_VAR 0 9
35485: PUSH
35486: LD_VAR 0 10
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PPUSH
35495: CALL_OW 1
35499: ST_TO_ADDR
35500: GO 35516
// i := i - 1 ;
35502: LD_ADDR_VAR 0 5
35506: PUSH
35507: LD_VAR 0 5
35511: PUSH
35512: LD_INT 1
35514: MINUS
35515: ST_TO_ADDR
// end ;
35516: GO 35322
35518: POP
35519: POP
// for i in tmp do
35520: LD_ADDR_VAR 0 5
35524: PUSH
35525: LD_VAR 0 7
35529: PUSH
35530: FOR_IN
35531: IFFALSE 35569
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35533: LD_VAR 0 1
35537: PPUSH
35538: LD_VAR 0 5
35542: PUSH
35543: LD_INT 1
35545: ARRAY
35546: PPUSH
35547: LD_VAR 0 5
35551: PUSH
35552: LD_INT 2
35554: ARRAY
35555: PPUSH
35556: CALL 34511 0 3
35560: NOT
35561: IFFALSE 35567
// exit ;
35563: POP
35564: POP
35565: GO 35571
35567: GO 35530
35569: POP
35570: POP
// end ;
35571: LD_VAR 0 4
35575: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35576: LD_INT 0
35578: PPUSH
35579: PPUSH
35580: PPUSH
35581: PPUSH
35582: PPUSH
35583: PPUSH
35584: PPUSH
// if not GetClass ( unit ) = class_sniper then
35585: LD_VAR 0 1
35589: PPUSH
35590: CALL_OW 257
35594: PUSH
35595: LD_INT 5
35597: EQUAL
35598: NOT
35599: IFFALSE 35603
// exit ;
35601: GO 35991
// dist := 8 ;
35603: LD_ADDR_VAR 0 5
35607: PUSH
35608: LD_INT 8
35610: ST_TO_ADDR
// viewRange := 12 ;
35611: LD_ADDR_VAR 0 7
35615: PUSH
35616: LD_INT 12
35618: ST_TO_ADDR
// side := GetSide ( unit ) ;
35619: LD_ADDR_VAR 0 6
35623: PUSH
35624: LD_VAR 0 1
35628: PPUSH
35629: CALL_OW 255
35633: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35634: LD_INT 61
35636: PPUSH
35637: LD_VAR 0 6
35641: PPUSH
35642: CALL_OW 321
35646: PUSH
35647: LD_INT 2
35649: EQUAL
35650: IFFALSE 35660
// viewRange := 16 ;
35652: LD_ADDR_VAR 0 7
35656: PUSH
35657: LD_INT 16
35659: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35660: LD_VAR 0 1
35664: PPUSH
35665: LD_VAR 0 2
35669: PPUSH
35670: LD_VAR 0 3
35674: PPUSH
35675: CALL_OW 297
35679: PUSH
35680: LD_VAR 0 5
35684: GREATER
35685: IFFALSE 35764
// begin ComMoveXY ( unit , x , y ) ;
35687: LD_VAR 0 1
35691: PPUSH
35692: LD_VAR 0 2
35696: PPUSH
35697: LD_VAR 0 3
35701: PPUSH
35702: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35706: LD_INT 35
35708: PPUSH
35709: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35713: LD_VAR 0 1
35717: PPUSH
35718: LD_VAR 0 2
35722: PPUSH
35723: LD_VAR 0 3
35727: PPUSH
35728: CALL 70791 0 3
35732: NOT
35733: IFFALSE 35737
// exit ;
35735: GO 35991
// until GetDistUnitXY ( unit , x , y ) < dist ;
35737: LD_VAR 0 1
35741: PPUSH
35742: LD_VAR 0 2
35746: PPUSH
35747: LD_VAR 0 3
35751: PPUSH
35752: CALL_OW 297
35756: PUSH
35757: LD_VAR 0 5
35761: LESS
35762: IFFALSE 35706
// end ; ComTurnXY ( unit , x , y ) ;
35764: LD_VAR 0 1
35768: PPUSH
35769: LD_VAR 0 2
35773: PPUSH
35774: LD_VAR 0 3
35778: PPUSH
35779: CALL_OW 118
// wait ( 5 ) ;
35783: LD_INT 5
35785: PPUSH
35786: CALL_OW 67
// _d := GetDir ( unit ) ;
35790: LD_ADDR_VAR 0 10
35794: PUSH
35795: LD_VAR 0 1
35799: PPUSH
35800: CALL_OW 254
35804: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35805: LD_ADDR_VAR 0 8
35809: PUSH
35810: LD_VAR 0 1
35814: PPUSH
35815: CALL_OW 250
35819: PPUSH
35820: LD_VAR 0 10
35824: PPUSH
35825: LD_VAR 0 5
35829: PPUSH
35830: CALL_OW 272
35834: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35835: LD_ADDR_VAR 0 9
35839: PUSH
35840: LD_VAR 0 1
35844: PPUSH
35845: CALL_OW 251
35849: PPUSH
35850: LD_VAR 0 10
35854: PPUSH
35855: LD_VAR 0 5
35859: PPUSH
35860: CALL_OW 273
35864: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35865: LD_VAR 0 8
35869: PPUSH
35870: LD_VAR 0 9
35874: PPUSH
35875: CALL_OW 488
35879: NOT
35880: IFFALSE 35884
// exit ;
35882: GO 35991
// ComAnimCustom ( unit , 1 ) ;
35884: LD_VAR 0 1
35888: PPUSH
35889: LD_INT 1
35891: PPUSH
35892: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35896: LD_VAR 0 8
35900: PPUSH
35901: LD_VAR 0 9
35905: PPUSH
35906: LD_VAR 0 6
35910: PPUSH
35911: LD_VAR 0 7
35915: PPUSH
35916: CALL_OW 330
// repeat wait ( 1 ) ;
35920: LD_INT 1
35922: PPUSH
35923: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35927: LD_VAR 0 1
35931: PPUSH
35932: CALL_OW 316
35936: PUSH
35937: LD_VAR 0 1
35941: PPUSH
35942: CALL_OW 314
35946: OR
35947: PUSH
35948: LD_VAR 0 1
35952: PPUSH
35953: CALL_OW 302
35957: NOT
35958: OR
35959: PUSH
35960: LD_VAR 0 1
35964: PPUSH
35965: CALL_OW 301
35969: OR
35970: IFFALSE 35920
// RemoveSeeing ( _x , _y , side ) ;
35972: LD_VAR 0 8
35976: PPUSH
35977: LD_VAR 0 9
35981: PPUSH
35982: LD_VAR 0 6
35986: PPUSH
35987: CALL_OW 331
// end ; end_of_file
35991: LD_VAR 0 4
35995: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35996: LD_INT 0
35998: PPUSH
35999: PPUSH
// if exist_mode then
36000: LD_VAR 0 2
36004: IFFALSE 36029
// unit := CreateCharacter ( prefix & ident ) else
36006: LD_ADDR_VAR 0 5
36010: PUSH
36011: LD_VAR 0 3
36015: PUSH
36016: LD_VAR 0 1
36020: STR
36021: PPUSH
36022: CALL_OW 34
36026: ST_TO_ADDR
36027: GO 36044
// unit := NewCharacter ( ident ) ;
36029: LD_ADDR_VAR 0 5
36033: PUSH
36034: LD_VAR 0 1
36038: PPUSH
36039: CALL_OW 25
36043: ST_TO_ADDR
// result := unit ;
36044: LD_ADDR_VAR 0 4
36048: PUSH
36049: LD_VAR 0 5
36053: ST_TO_ADDR
// end ;
36054: LD_VAR 0 4
36058: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36059: LD_INT 0
36061: PPUSH
36062: PPUSH
// if not side or not nation then
36063: LD_VAR 0 1
36067: NOT
36068: PUSH
36069: LD_VAR 0 2
36073: NOT
36074: OR
36075: IFFALSE 36079
// exit ;
36077: GO 36843
// case nation of nation_american :
36079: LD_VAR 0 2
36083: PUSH
36084: LD_INT 1
36086: DOUBLE
36087: EQUAL
36088: IFTRUE 36092
36090: GO 36306
36092: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36093: LD_ADDR_VAR 0 4
36097: PUSH
36098: LD_INT 35
36100: PUSH
36101: LD_INT 45
36103: PUSH
36104: LD_INT 46
36106: PUSH
36107: LD_INT 47
36109: PUSH
36110: LD_INT 82
36112: PUSH
36113: LD_INT 83
36115: PUSH
36116: LD_INT 84
36118: PUSH
36119: LD_INT 85
36121: PUSH
36122: LD_INT 86
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: LD_INT 6
36133: PUSH
36134: LD_INT 15
36136: PUSH
36137: LD_INT 16
36139: PUSH
36140: LD_INT 7
36142: PUSH
36143: LD_INT 12
36145: PUSH
36146: LD_INT 13
36148: PUSH
36149: LD_INT 10
36151: PUSH
36152: LD_INT 14
36154: PUSH
36155: LD_INT 20
36157: PUSH
36158: LD_INT 21
36160: PUSH
36161: LD_INT 22
36163: PUSH
36164: LD_INT 25
36166: PUSH
36167: LD_INT 32
36169: PUSH
36170: LD_INT 27
36172: PUSH
36173: LD_INT 36
36175: PUSH
36176: LD_INT 69
36178: PUSH
36179: LD_INT 39
36181: PUSH
36182: LD_INT 34
36184: PUSH
36185: LD_INT 40
36187: PUSH
36188: LD_INT 48
36190: PUSH
36191: LD_INT 49
36193: PUSH
36194: LD_INT 50
36196: PUSH
36197: LD_INT 51
36199: PUSH
36200: LD_INT 52
36202: PUSH
36203: LD_INT 53
36205: PUSH
36206: LD_INT 54
36208: PUSH
36209: LD_INT 55
36211: PUSH
36212: LD_INT 56
36214: PUSH
36215: LD_INT 57
36217: PUSH
36218: LD_INT 58
36220: PUSH
36221: LD_INT 59
36223: PUSH
36224: LD_INT 60
36226: PUSH
36227: LD_INT 61
36229: PUSH
36230: LD_INT 62
36232: PUSH
36233: LD_INT 80
36235: PUSH
36236: LD_INT 82
36238: PUSH
36239: LD_INT 83
36241: PUSH
36242: LD_INT 84
36244: PUSH
36245: LD_INT 85
36247: PUSH
36248: LD_INT 86
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: ST_TO_ADDR
36304: GO 36767
36306: LD_INT 2
36308: DOUBLE
36309: EQUAL
36310: IFTRUE 36314
36312: GO 36536
36314: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36315: LD_ADDR_VAR 0 4
36319: PUSH
36320: LD_INT 35
36322: PUSH
36323: LD_INT 45
36325: PUSH
36326: LD_INT 46
36328: PUSH
36329: LD_INT 47
36331: PUSH
36332: LD_INT 82
36334: PUSH
36335: LD_INT 83
36337: PUSH
36338: LD_INT 84
36340: PUSH
36341: LD_INT 85
36343: PUSH
36344: LD_INT 87
36346: PUSH
36347: LD_INT 70
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: LD_INT 11
36355: PUSH
36356: LD_INT 3
36358: PUSH
36359: LD_INT 4
36361: PUSH
36362: LD_INT 5
36364: PUSH
36365: LD_INT 6
36367: PUSH
36368: LD_INT 15
36370: PUSH
36371: LD_INT 18
36373: PUSH
36374: LD_INT 7
36376: PUSH
36377: LD_INT 17
36379: PUSH
36380: LD_INT 8
36382: PUSH
36383: LD_INT 20
36385: PUSH
36386: LD_INT 21
36388: PUSH
36389: LD_INT 22
36391: PUSH
36392: LD_INT 72
36394: PUSH
36395: LD_INT 26
36397: PUSH
36398: LD_INT 69
36400: PUSH
36401: LD_INT 39
36403: PUSH
36404: LD_INT 40
36406: PUSH
36407: LD_INT 41
36409: PUSH
36410: LD_INT 42
36412: PUSH
36413: LD_INT 43
36415: PUSH
36416: LD_INT 48
36418: PUSH
36419: LD_INT 49
36421: PUSH
36422: LD_INT 50
36424: PUSH
36425: LD_INT 51
36427: PUSH
36428: LD_INT 52
36430: PUSH
36431: LD_INT 53
36433: PUSH
36434: LD_INT 54
36436: PUSH
36437: LD_INT 55
36439: PUSH
36440: LD_INT 56
36442: PUSH
36443: LD_INT 60
36445: PUSH
36446: LD_INT 61
36448: PUSH
36449: LD_INT 62
36451: PUSH
36452: LD_INT 66
36454: PUSH
36455: LD_INT 67
36457: PUSH
36458: LD_INT 68
36460: PUSH
36461: LD_INT 81
36463: PUSH
36464: LD_INT 82
36466: PUSH
36467: LD_INT 83
36469: PUSH
36470: LD_INT 84
36472: PUSH
36473: LD_INT 85
36475: PUSH
36476: LD_INT 87
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: ST_TO_ADDR
36534: GO 36767
36536: LD_INT 3
36538: DOUBLE
36539: EQUAL
36540: IFTRUE 36544
36542: GO 36766
36544: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36545: LD_ADDR_VAR 0 4
36549: PUSH
36550: LD_INT 46
36552: PUSH
36553: LD_INT 47
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: LD_INT 2
36561: PUSH
36562: LD_INT 82
36564: PUSH
36565: LD_INT 83
36567: PUSH
36568: LD_INT 84
36570: PUSH
36571: LD_INT 85
36573: PUSH
36574: LD_INT 86
36576: PUSH
36577: LD_INT 11
36579: PUSH
36580: LD_INT 9
36582: PUSH
36583: LD_INT 20
36585: PUSH
36586: LD_INT 19
36588: PUSH
36589: LD_INT 21
36591: PUSH
36592: LD_INT 24
36594: PUSH
36595: LD_INT 22
36597: PUSH
36598: LD_INT 25
36600: PUSH
36601: LD_INT 28
36603: PUSH
36604: LD_INT 29
36606: PUSH
36607: LD_INT 30
36609: PUSH
36610: LD_INT 31
36612: PUSH
36613: LD_INT 37
36615: PUSH
36616: LD_INT 38
36618: PUSH
36619: LD_INT 32
36621: PUSH
36622: LD_INT 27
36624: PUSH
36625: LD_INT 33
36627: PUSH
36628: LD_INT 69
36630: PUSH
36631: LD_INT 39
36633: PUSH
36634: LD_INT 34
36636: PUSH
36637: LD_INT 40
36639: PUSH
36640: LD_INT 71
36642: PUSH
36643: LD_INT 23
36645: PUSH
36646: LD_INT 44
36648: PUSH
36649: LD_INT 48
36651: PUSH
36652: LD_INT 49
36654: PUSH
36655: LD_INT 50
36657: PUSH
36658: LD_INT 51
36660: PUSH
36661: LD_INT 52
36663: PUSH
36664: LD_INT 53
36666: PUSH
36667: LD_INT 54
36669: PUSH
36670: LD_INT 55
36672: PUSH
36673: LD_INT 56
36675: PUSH
36676: LD_INT 57
36678: PUSH
36679: LD_INT 58
36681: PUSH
36682: LD_INT 59
36684: PUSH
36685: LD_INT 63
36687: PUSH
36688: LD_INT 64
36690: PUSH
36691: LD_INT 65
36693: PUSH
36694: LD_INT 82
36696: PUSH
36697: LD_INT 83
36699: PUSH
36700: LD_INT 84
36702: PUSH
36703: LD_INT 85
36705: PUSH
36706: LD_INT 86
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: ST_TO_ADDR
36764: GO 36767
36766: POP
// if state > - 1 and state < 3 then
36767: LD_VAR 0 3
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: GREATER
36776: PUSH
36777: LD_VAR 0 3
36781: PUSH
36782: LD_INT 3
36784: LESS
36785: AND
36786: IFFALSE 36843
// for i in result do
36788: LD_ADDR_VAR 0 5
36792: PUSH
36793: LD_VAR 0 4
36797: PUSH
36798: FOR_IN
36799: IFFALSE 36841
// if GetTech ( i , side ) <> state then
36801: LD_VAR 0 5
36805: PPUSH
36806: LD_VAR 0 1
36810: PPUSH
36811: CALL_OW 321
36815: PUSH
36816: LD_VAR 0 3
36820: NONEQUAL
36821: IFFALSE 36839
// result := result diff i ;
36823: LD_ADDR_VAR 0 4
36827: PUSH
36828: LD_VAR 0 4
36832: PUSH
36833: LD_VAR 0 5
36837: DIFF
36838: ST_TO_ADDR
36839: GO 36798
36841: POP
36842: POP
// end ;
36843: LD_VAR 0 4
36847: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36848: LD_INT 0
36850: PPUSH
36851: PPUSH
36852: PPUSH
// result := true ;
36853: LD_ADDR_VAR 0 3
36857: PUSH
36858: LD_INT 1
36860: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36861: LD_ADDR_VAR 0 5
36865: PUSH
36866: LD_VAR 0 2
36870: PPUSH
36871: CALL_OW 480
36875: ST_TO_ADDR
// if not tmp then
36876: LD_VAR 0 5
36880: NOT
36881: IFFALSE 36885
// exit ;
36883: GO 36934
// for i in tmp do
36885: LD_ADDR_VAR 0 4
36889: PUSH
36890: LD_VAR 0 5
36894: PUSH
36895: FOR_IN
36896: IFFALSE 36932
// if GetTech ( i , side ) <> state_researched then
36898: LD_VAR 0 4
36902: PPUSH
36903: LD_VAR 0 1
36907: PPUSH
36908: CALL_OW 321
36912: PUSH
36913: LD_INT 2
36915: NONEQUAL
36916: IFFALSE 36930
// begin result := false ;
36918: LD_ADDR_VAR 0 3
36922: PUSH
36923: LD_INT 0
36925: ST_TO_ADDR
// exit ;
36926: POP
36927: POP
36928: GO 36934
// end ;
36930: GO 36895
36932: POP
36933: POP
// end ;
36934: LD_VAR 0 3
36938: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36939: LD_INT 0
36941: PPUSH
36942: PPUSH
36943: PPUSH
36944: PPUSH
36945: PPUSH
36946: PPUSH
36947: PPUSH
36948: PPUSH
36949: PPUSH
36950: PPUSH
36951: PPUSH
36952: PPUSH
36953: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36954: LD_VAR 0 1
36958: NOT
36959: PUSH
36960: LD_VAR 0 1
36964: PPUSH
36965: CALL_OW 257
36969: PUSH
36970: LD_INT 9
36972: NONEQUAL
36973: OR
36974: IFFALSE 36978
// exit ;
36976: GO 37551
// side := GetSide ( unit ) ;
36978: LD_ADDR_VAR 0 9
36982: PUSH
36983: LD_VAR 0 1
36987: PPUSH
36988: CALL_OW 255
36992: ST_TO_ADDR
// tech_space := tech_spacanom ;
36993: LD_ADDR_VAR 0 12
36997: PUSH
36998: LD_INT 29
37000: ST_TO_ADDR
// tech_time := tech_taurad ;
37001: LD_ADDR_VAR 0 13
37005: PUSH
37006: LD_INT 28
37008: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37009: LD_ADDR_VAR 0 11
37013: PUSH
37014: LD_VAR 0 1
37018: PPUSH
37019: CALL_OW 310
37023: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37024: LD_VAR 0 11
37028: PPUSH
37029: CALL_OW 247
37033: PUSH
37034: LD_INT 2
37036: EQUAL
37037: IFFALSE 37041
// exit ;
37039: GO 37551
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37041: LD_ADDR_VAR 0 8
37045: PUSH
37046: LD_INT 81
37048: PUSH
37049: LD_VAR 0 9
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 3
37060: PUSH
37061: LD_INT 21
37063: PUSH
37064: LD_INT 3
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PPUSH
37079: CALL_OW 69
37083: ST_TO_ADDR
// if not tmp then
37084: LD_VAR 0 8
37088: NOT
37089: IFFALSE 37093
// exit ;
37091: GO 37551
// if in_unit then
37093: LD_VAR 0 11
37097: IFFALSE 37121
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37099: LD_ADDR_VAR 0 10
37103: PUSH
37104: LD_VAR 0 8
37108: PPUSH
37109: LD_VAR 0 11
37113: PPUSH
37114: CALL_OW 74
37118: ST_TO_ADDR
37119: GO 37141
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37121: LD_ADDR_VAR 0 10
37125: PUSH
37126: LD_VAR 0 8
37130: PPUSH
37131: LD_VAR 0 1
37135: PPUSH
37136: CALL_OW 74
37140: ST_TO_ADDR
// if not enemy then
37141: LD_VAR 0 10
37145: NOT
37146: IFFALSE 37150
// exit ;
37148: GO 37551
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37150: LD_VAR 0 11
37154: PUSH
37155: LD_VAR 0 11
37159: PPUSH
37160: LD_VAR 0 10
37164: PPUSH
37165: CALL_OW 296
37169: PUSH
37170: LD_INT 13
37172: GREATER
37173: AND
37174: PUSH
37175: LD_VAR 0 1
37179: PPUSH
37180: LD_VAR 0 10
37184: PPUSH
37185: CALL_OW 296
37189: PUSH
37190: LD_INT 12
37192: GREATER
37193: OR
37194: IFFALSE 37198
// exit ;
37196: GO 37551
// missile := [ 1 ] ;
37198: LD_ADDR_VAR 0 14
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: EMPTY
37207: LIST
37208: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37209: LD_VAR 0 9
37213: PPUSH
37214: LD_VAR 0 12
37218: PPUSH
37219: CALL_OW 325
37223: IFFALSE 37252
// missile := Insert ( missile , missile + 1 , 2 ) ;
37225: LD_ADDR_VAR 0 14
37229: PUSH
37230: LD_VAR 0 14
37234: PPUSH
37235: LD_VAR 0 14
37239: PUSH
37240: LD_INT 1
37242: PLUS
37243: PPUSH
37244: LD_INT 2
37246: PPUSH
37247: CALL_OW 2
37251: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37252: LD_VAR 0 9
37256: PPUSH
37257: LD_VAR 0 13
37261: PPUSH
37262: CALL_OW 325
37266: PUSH
37267: LD_VAR 0 10
37271: PPUSH
37272: CALL_OW 255
37276: PPUSH
37277: LD_VAR 0 13
37281: PPUSH
37282: CALL_OW 325
37286: NOT
37287: AND
37288: IFFALSE 37317
// missile := Insert ( missile , missile + 1 , 3 ) ;
37290: LD_ADDR_VAR 0 14
37294: PUSH
37295: LD_VAR 0 14
37299: PPUSH
37300: LD_VAR 0 14
37304: PUSH
37305: LD_INT 1
37307: PLUS
37308: PPUSH
37309: LD_INT 3
37311: PPUSH
37312: CALL_OW 2
37316: ST_TO_ADDR
// if missile < 2 then
37317: LD_VAR 0 14
37321: PUSH
37322: LD_INT 2
37324: LESS
37325: IFFALSE 37329
// exit ;
37327: GO 37551
// x := GetX ( enemy ) ;
37329: LD_ADDR_VAR 0 4
37333: PUSH
37334: LD_VAR 0 10
37338: PPUSH
37339: CALL_OW 250
37343: ST_TO_ADDR
// y := GetY ( enemy ) ;
37344: LD_ADDR_VAR 0 5
37348: PUSH
37349: LD_VAR 0 10
37353: PPUSH
37354: CALL_OW 251
37358: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37359: LD_ADDR_VAR 0 6
37363: PUSH
37364: LD_VAR 0 4
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PPUSH
37373: LD_INT 1
37375: PPUSH
37376: CALL_OW 12
37380: PLUS
37381: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37382: LD_ADDR_VAR 0 7
37386: PUSH
37387: LD_VAR 0 5
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PPUSH
37396: LD_INT 1
37398: PPUSH
37399: CALL_OW 12
37403: PLUS
37404: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37405: LD_VAR 0 6
37409: PPUSH
37410: LD_VAR 0 7
37414: PPUSH
37415: CALL_OW 488
37419: NOT
37420: IFFALSE 37442
// begin _x := x ;
37422: LD_ADDR_VAR 0 6
37426: PUSH
37427: LD_VAR 0 4
37431: ST_TO_ADDR
// _y := y ;
37432: LD_ADDR_VAR 0 7
37436: PUSH
37437: LD_VAR 0 5
37441: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37442: LD_ADDR_VAR 0 3
37446: PUSH
37447: LD_INT 1
37449: PPUSH
37450: LD_VAR 0 14
37454: PPUSH
37455: CALL_OW 12
37459: ST_TO_ADDR
// case i of 1 :
37460: LD_VAR 0 3
37464: PUSH
37465: LD_INT 1
37467: DOUBLE
37468: EQUAL
37469: IFTRUE 37473
37471: GO 37490
37473: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37474: LD_VAR 0 1
37478: PPUSH
37479: LD_VAR 0 10
37483: PPUSH
37484: CALL_OW 115
37488: GO 37551
37490: LD_INT 2
37492: DOUBLE
37493: EQUAL
37494: IFTRUE 37498
37496: GO 37520
37498: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37499: LD_VAR 0 1
37503: PPUSH
37504: LD_VAR 0 6
37508: PPUSH
37509: LD_VAR 0 7
37513: PPUSH
37514: CALL_OW 153
37518: GO 37551
37520: LD_INT 3
37522: DOUBLE
37523: EQUAL
37524: IFTRUE 37528
37526: GO 37550
37528: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37529: LD_VAR 0 1
37533: PPUSH
37534: LD_VAR 0 6
37538: PPUSH
37539: LD_VAR 0 7
37543: PPUSH
37544: CALL_OW 154
37548: GO 37551
37550: POP
// end ;
37551: LD_VAR 0 2
37555: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37556: LD_INT 0
37558: PPUSH
37559: PPUSH
37560: PPUSH
37561: PPUSH
37562: PPUSH
37563: PPUSH
// if not unit or not building then
37564: LD_VAR 0 1
37568: NOT
37569: PUSH
37570: LD_VAR 0 2
37574: NOT
37575: OR
37576: IFFALSE 37580
// exit ;
37578: GO 37738
// x := GetX ( building ) ;
37580: LD_ADDR_VAR 0 5
37584: PUSH
37585: LD_VAR 0 2
37589: PPUSH
37590: CALL_OW 250
37594: ST_TO_ADDR
// y := GetY ( building ) ;
37595: LD_ADDR_VAR 0 6
37599: PUSH
37600: LD_VAR 0 2
37604: PPUSH
37605: CALL_OW 251
37609: ST_TO_ADDR
// for i = 0 to 5 do
37610: LD_ADDR_VAR 0 4
37614: PUSH
37615: DOUBLE
37616: LD_INT 0
37618: DEC
37619: ST_TO_ADDR
37620: LD_INT 5
37622: PUSH
37623: FOR_TO
37624: IFFALSE 37736
// begin _x := ShiftX ( x , i , 3 ) ;
37626: LD_ADDR_VAR 0 7
37630: PUSH
37631: LD_VAR 0 5
37635: PPUSH
37636: LD_VAR 0 4
37640: PPUSH
37641: LD_INT 3
37643: PPUSH
37644: CALL_OW 272
37648: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37649: LD_ADDR_VAR 0 8
37653: PUSH
37654: LD_VAR 0 6
37658: PPUSH
37659: LD_VAR 0 4
37663: PPUSH
37664: LD_INT 3
37666: PPUSH
37667: CALL_OW 273
37671: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37672: LD_VAR 0 7
37676: PPUSH
37677: LD_VAR 0 8
37681: PPUSH
37682: CALL_OW 488
37686: NOT
37687: IFFALSE 37691
// continue ;
37689: GO 37623
// if HexInfo ( _x , _y ) = 0 then
37691: LD_VAR 0 7
37695: PPUSH
37696: LD_VAR 0 8
37700: PPUSH
37701: CALL_OW 428
37705: PUSH
37706: LD_INT 0
37708: EQUAL
37709: IFFALSE 37734
// begin ComMoveXY ( unit , _x , _y ) ;
37711: LD_VAR 0 1
37715: PPUSH
37716: LD_VAR 0 7
37720: PPUSH
37721: LD_VAR 0 8
37725: PPUSH
37726: CALL_OW 111
// exit ;
37730: POP
37731: POP
37732: GO 37738
// end ; end ;
37734: GO 37623
37736: POP
37737: POP
// end ;
37738: LD_VAR 0 3
37742: RET
// export function ScanBase ( side , base_area ) ; begin
37743: LD_INT 0
37745: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37746: LD_ADDR_VAR 0 3
37750: PUSH
37751: LD_VAR 0 2
37755: PPUSH
37756: LD_INT 81
37758: PUSH
37759: LD_VAR 0 1
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PPUSH
37768: CALL_OW 70
37772: ST_TO_ADDR
// end ;
37773: LD_VAR 0 3
37777: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37778: LD_INT 0
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
// result := false ;
37784: LD_ADDR_VAR 0 2
37788: PUSH
37789: LD_INT 0
37791: ST_TO_ADDR
// side := GetSide ( unit ) ;
37792: LD_ADDR_VAR 0 3
37796: PUSH
37797: LD_VAR 0 1
37801: PPUSH
37802: CALL_OW 255
37806: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37807: LD_ADDR_VAR 0 4
37811: PUSH
37812: LD_VAR 0 1
37816: PPUSH
37817: CALL_OW 248
37821: ST_TO_ADDR
// case nat of 1 :
37822: LD_VAR 0 4
37826: PUSH
37827: LD_INT 1
37829: DOUBLE
37830: EQUAL
37831: IFTRUE 37835
37833: GO 37846
37835: POP
// tech := tech_lassight ; 2 :
37836: LD_ADDR_VAR 0 5
37840: PUSH
37841: LD_INT 12
37843: ST_TO_ADDR
37844: GO 37885
37846: LD_INT 2
37848: DOUBLE
37849: EQUAL
37850: IFTRUE 37854
37852: GO 37865
37854: POP
// tech := tech_mortar ; 3 :
37855: LD_ADDR_VAR 0 5
37859: PUSH
37860: LD_INT 41
37862: ST_TO_ADDR
37863: GO 37885
37865: LD_INT 3
37867: DOUBLE
37868: EQUAL
37869: IFTRUE 37873
37871: GO 37884
37873: POP
// tech := tech_bazooka ; end ;
37874: LD_ADDR_VAR 0 5
37878: PUSH
37879: LD_INT 44
37881: ST_TO_ADDR
37882: GO 37885
37884: POP
// if Researched ( side , tech ) then
37885: LD_VAR 0 3
37889: PPUSH
37890: LD_VAR 0 5
37894: PPUSH
37895: CALL_OW 325
37899: IFFALSE 37926
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37901: LD_ADDR_VAR 0 2
37905: PUSH
37906: LD_INT 5
37908: PUSH
37909: LD_INT 8
37911: PUSH
37912: LD_INT 9
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: LIST
37919: PUSH
37920: LD_VAR 0 4
37924: ARRAY
37925: ST_TO_ADDR
// end ;
37926: LD_VAR 0 2
37930: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37931: LD_INT 0
37933: PPUSH
37934: PPUSH
37935: PPUSH
// if not mines then
37936: LD_VAR 0 2
37940: NOT
37941: IFFALSE 37945
// exit ;
37943: GO 38089
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37945: LD_ADDR_VAR 0 5
37949: PUSH
37950: LD_INT 81
37952: PUSH
37953: LD_VAR 0 1
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 3
37964: PUSH
37965: LD_INT 21
37967: PUSH
37968: LD_INT 3
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PPUSH
37983: CALL_OW 69
37987: ST_TO_ADDR
// for i in mines do
37988: LD_ADDR_VAR 0 4
37992: PUSH
37993: LD_VAR 0 2
37997: PUSH
37998: FOR_IN
37999: IFFALSE 38087
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38001: LD_VAR 0 4
38005: PUSH
38006: LD_INT 1
38008: ARRAY
38009: PPUSH
38010: LD_VAR 0 4
38014: PUSH
38015: LD_INT 2
38017: ARRAY
38018: PPUSH
38019: CALL_OW 458
38023: NOT
38024: IFFALSE 38028
// continue ;
38026: GO 37998
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38028: LD_VAR 0 4
38032: PUSH
38033: LD_INT 1
38035: ARRAY
38036: PPUSH
38037: LD_VAR 0 4
38041: PUSH
38042: LD_INT 2
38044: ARRAY
38045: PPUSH
38046: CALL_OW 428
38050: PUSH
38051: LD_VAR 0 5
38055: IN
38056: IFFALSE 38085
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38058: LD_VAR 0 4
38062: PUSH
38063: LD_INT 1
38065: ARRAY
38066: PPUSH
38067: LD_VAR 0 4
38071: PUSH
38072: LD_INT 2
38074: ARRAY
38075: PPUSH
38076: LD_VAR 0 1
38080: PPUSH
38081: CALL_OW 456
// end ;
38085: GO 37998
38087: POP
38088: POP
// end ;
38089: LD_VAR 0 3
38093: RET
// export function Count ( array ) ; var i ; begin
38094: LD_INT 0
38096: PPUSH
38097: PPUSH
// result := 0 ;
38098: LD_ADDR_VAR 0 2
38102: PUSH
38103: LD_INT 0
38105: ST_TO_ADDR
// for i in array do
38106: LD_ADDR_VAR 0 3
38110: PUSH
38111: LD_VAR 0 1
38115: PUSH
38116: FOR_IN
38117: IFFALSE 38141
// if i then
38119: LD_VAR 0 3
38123: IFFALSE 38139
// result := result + 1 ;
38125: LD_ADDR_VAR 0 2
38129: PUSH
38130: LD_VAR 0 2
38134: PUSH
38135: LD_INT 1
38137: PLUS
38138: ST_TO_ADDR
38139: GO 38116
38141: POP
38142: POP
// end ;
38143: LD_VAR 0 2
38147: RET
// export function IsEmpty ( building ) ; begin
38148: LD_INT 0
38150: PPUSH
// if not building then
38151: LD_VAR 0 1
38155: NOT
38156: IFFALSE 38160
// exit ;
38158: GO 38203
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38160: LD_ADDR_VAR 0 2
38164: PUSH
38165: LD_VAR 0 1
38169: PUSH
38170: LD_INT 22
38172: PUSH
38173: LD_VAR 0 1
38177: PPUSH
38178: CALL_OW 255
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 58
38189: PUSH
38190: EMPTY
38191: LIST
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PPUSH
38197: CALL_OW 69
38201: IN
38202: ST_TO_ADDR
// end ;
38203: LD_VAR 0 2
38207: RET
// export function IsNotFull ( building ) ; begin
38208: LD_INT 0
38210: PPUSH
// if not building then
38211: LD_VAR 0 1
38215: NOT
38216: IFFALSE 38220
// exit ;
38218: GO 38239
// result := UnitsInside ( building ) < 6 ;
38220: LD_ADDR_VAR 0 2
38224: PUSH
38225: LD_VAR 0 1
38229: PPUSH
38230: CALL_OW 313
38234: PUSH
38235: LD_INT 6
38237: LESS
38238: ST_TO_ADDR
// end ;
38239: LD_VAR 0 2
38243: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38244: LD_INT 0
38246: PPUSH
38247: PPUSH
38248: PPUSH
38249: PPUSH
// tmp := [ ] ;
38250: LD_ADDR_VAR 0 3
38254: PUSH
38255: EMPTY
38256: ST_TO_ADDR
// list := [ ] ;
38257: LD_ADDR_VAR 0 5
38261: PUSH
38262: EMPTY
38263: ST_TO_ADDR
// for i = 16 to 25 do
38264: LD_ADDR_VAR 0 4
38268: PUSH
38269: DOUBLE
38270: LD_INT 16
38272: DEC
38273: ST_TO_ADDR
38274: LD_INT 25
38276: PUSH
38277: FOR_TO
38278: IFFALSE 38351
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38280: LD_ADDR_VAR 0 3
38284: PUSH
38285: LD_VAR 0 3
38289: PUSH
38290: LD_INT 22
38292: PUSH
38293: LD_VAR 0 1
38297: PPUSH
38298: CALL_OW 255
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 91
38309: PUSH
38310: LD_VAR 0 1
38314: PUSH
38315: LD_INT 6
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 30
38325: PUSH
38326: LD_VAR 0 4
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: LIST
38339: PUSH
38340: EMPTY
38341: LIST
38342: PPUSH
38343: CALL_OW 69
38347: ADD
38348: ST_TO_ADDR
38349: GO 38277
38351: POP
38352: POP
// for i = 1 to tmp do
38353: LD_ADDR_VAR 0 4
38357: PUSH
38358: DOUBLE
38359: LD_INT 1
38361: DEC
38362: ST_TO_ADDR
38363: LD_VAR 0 3
38367: PUSH
38368: FOR_TO
38369: IFFALSE 38457
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38371: LD_ADDR_VAR 0 5
38375: PUSH
38376: LD_VAR 0 5
38380: PUSH
38381: LD_VAR 0 3
38385: PUSH
38386: LD_VAR 0 4
38390: ARRAY
38391: PPUSH
38392: CALL_OW 266
38396: PUSH
38397: LD_VAR 0 3
38401: PUSH
38402: LD_VAR 0 4
38406: ARRAY
38407: PPUSH
38408: CALL_OW 250
38412: PUSH
38413: LD_VAR 0 3
38417: PUSH
38418: LD_VAR 0 4
38422: ARRAY
38423: PPUSH
38424: CALL_OW 251
38428: PUSH
38429: LD_VAR 0 3
38433: PUSH
38434: LD_VAR 0 4
38438: ARRAY
38439: PPUSH
38440: CALL_OW 254
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: PUSH
38451: EMPTY
38452: LIST
38453: ADD
38454: ST_TO_ADDR
38455: GO 38368
38457: POP
38458: POP
// result := list ;
38459: LD_ADDR_VAR 0 2
38463: PUSH
38464: LD_VAR 0 5
38468: ST_TO_ADDR
// end ;
38469: LD_VAR 0 2
38473: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38474: LD_INT 0
38476: PPUSH
38477: PPUSH
38478: PPUSH
38479: PPUSH
38480: PPUSH
38481: PPUSH
38482: PPUSH
// if not factory then
38483: LD_VAR 0 1
38487: NOT
38488: IFFALSE 38492
// exit ;
38490: GO 39085
// if control = control_apeman then
38492: LD_VAR 0 4
38496: PUSH
38497: LD_INT 5
38499: EQUAL
38500: IFFALSE 38609
// begin tmp := UnitsInside ( factory ) ;
38502: LD_ADDR_VAR 0 8
38506: PUSH
38507: LD_VAR 0 1
38511: PPUSH
38512: CALL_OW 313
38516: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38517: LD_VAR 0 8
38521: PPUSH
38522: LD_INT 25
38524: PUSH
38525: LD_INT 12
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PPUSH
38532: CALL_OW 72
38536: NOT
38537: IFFALSE 38547
// control := control_manual ;
38539: LD_ADDR_VAR 0 4
38543: PUSH
38544: LD_INT 1
38546: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38547: LD_ADDR_VAR 0 8
38551: PUSH
38552: LD_VAR 0 1
38556: PPUSH
38557: CALL 38244 0 1
38561: ST_TO_ADDR
// if tmp then
38562: LD_VAR 0 8
38566: IFFALSE 38609
// begin for i in tmp do
38568: LD_ADDR_VAR 0 7
38572: PUSH
38573: LD_VAR 0 8
38577: PUSH
38578: FOR_IN
38579: IFFALSE 38607
// if i [ 1 ] = b_ext_radio then
38581: LD_VAR 0 7
38585: PUSH
38586: LD_INT 1
38588: ARRAY
38589: PUSH
38590: LD_INT 22
38592: EQUAL
38593: IFFALSE 38605
// begin control := control_remote ;
38595: LD_ADDR_VAR 0 4
38599: PUSH
38600: LD_INT 2
38602: ST_TO_ADDR
// break ;
38603: GO 38607
// end ;
38605: GO 38578
38607: POP
38608: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38609: LD_VAR 0 1
38613: PPUSH
38614: LD_VAR 0 2
38618: PPUSH
38619: LD_VAR 0 3
38623: PPUSH
38624: LD_VAR 0 4
38628: PPUSH
38629: LD_VAR 0 5
38633: PPUSH
38634: CALL_OW 448
38638: IFFALSE 38673
// begin result := [ chassis , engine , control , weapon ] ;
38640: LD_ADDR_VAR 0 6
38644: PUSH
38645: LD_VAR 0 2
38649: PUSH
38650: LD_VAR 0 3
38654: PUSH
38655: LD_VAR 0 4
38659: PUSH
38660: LD_VAR 0 5
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: ST_TO_ADDR
// exit ;
38671: GO 39085
// end ; _chassis := AvailableChassisList ( factory ) ;
38673: LD_ADDR_VAR 0 9
38677: PUSH
38678: LD_VAR 0 1
38682: PPUSH
38683: CALL_OW 475
38687: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38688: LD_ADDR_VAR 0 11
38692: PUSH
38693: LD_VAR 0 1
38697: PPUSH
38698: CALL_OW 476
38702: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38703: LD_ADDR_VAR 0 12
38707: PUSH
38708: LD_VAR 0 1
38712: PPUSH
38713: CALL_OW 477
38717: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38718: LD_ADDR_VAR 0 10
38722: PUSH
38723: LD_VAR 0 1
38727: PPUSH
38728: CALL_OW 478
38732: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38733: LD_VAR 0 9
38737: NOT
38738: PUSH
38739: LD_VAR 0 11
38743: NOT
38744: OR
38745: PUSH
38746: LD_VAR 0 12
38750: NOT
38751: OR
38752: PUSH
38753: LD_VAR 0 10
38757: NOT
38758: OR
38759: IFFALSE 38794
// begin result := [ chassis , engine , control , weapon ] ;
38761: LD_ADDR_VAR 0 6
38765: PUSH
38766: LD_VAR 0 2
38770: PUSH
38771: LD_VAR 0 3
38775: PUSH
38776: LD_VAR 0 4
38780: PUSH
38781: LD_VAR 0 5
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: ST_TO_ADDR
// exit ;
38792: GO 39085
// end ; if not chassis in _chassis then
38794: LD_VAR 0 2
38798: PUSH
38799: LD_VAR 0 9
38803: IN
38804: NOT
38805: IFFALSE 38831
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38807: LD_ADDR_VAR 0 2
38811: PUSH
38812: LD_VAR 0 9
38816: PUSH
38817: LD_INT 1
38819: PPUSH
38820: LD_VAR 0 9
38824: PPUSH
38825: CALL_OW 12
38829: ARRAY
38830: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38831: LD_VAR 0 2
38835: PPUSH
38836: LD_VAR 0 3
38840: PPUSH
38841: CALL 39090 0 2
38845: NOT
38846: IFFALSE 38905
// repeat engine := _engine [ 1 ] ;
38848: LD_ADDR_VAR 0 3
38852: PUSH
38853: LD_VAR 0 11
38857: PUSH
38858: LD_INT 1
38860: ARRAY
38861: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38862: LD_ADDR_VAR 0 11
38866: PUSH
38867: LD_VAR 0 11
38871: PPUSH
38872: LD_INT 1
38874: PPUSH
38875: CALL_OW 3
38879: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38880: LD_VAR 0 2
38884: PPUSH
38885: LD_VAR 0 3
38889: PPUSH
38890: CALL 39090 0 2
38894: PUSH
38895: LD_VAR 0 11
38899: PUSH
38900: EMPTY
38901: EQUAL
38902: OR
38903: IFFALSE 38848
// if not control in _control then
38905: LD_VAR 0 4
38909: PUSH
38910: LD_VAR 0 12
38914: IN
38915: NOT
38916: IFFALSE 38942
// control := _control [ rand ( 1 , _control ) ] ;
38918: LD_ADDR_VAR 0 4
38922: PUSH
38923: LD_VAR 0 12
38927: PUSH
38928: LD_INT 1
38930: PPUSH
38931: LD_VAR 0 12
38935: PPUSH
38936: CALL_OW 12
38940: ARRAY
38941: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38942: LD_VAR 0 2
38946: PPUSH
38947: LD_VAR 0 5
38951: PPUSH
38952: CALL 39310 0 2
38956: NOT
38957: IFFALSE 39016
// repeat weapon := _weapon [ 1 ] ;
38959: LD_ADDR_VAR 0 5
38963: PUSH
38964: LD_VAR 0 10
38968: PUSH
38969: LD_INT 1
38971: ARRAY
38972: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38973: LD_ADDR_VAR 0 10
38977: PUSH
38978: LD_VAR 0 10
38982: PPUSH
38983: LD_INT 1
38985: PPUSH
38986: CALL_OW 3
38990: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38991: LD_VAR 0 2
38995: PPUSH
38996: LD_VAR 0 5
39000: PPUSH
39001: CALL 39310 0 2
39005: PUSH
39006: LD_VAR 0 10
39010: PUSH
39011: EMPTY
39012: EQUAL
39013: OR
39014: IFFALSE 38959
// result := [ ] ;
39016: LD_ADDR_VAR 0 6
39020: PUSH
39021: EMPTY
39022: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39023: LD_VAR 0 1
39027: PPUSH
39028: LD_VAR 0 2
39032: PPUSH
39033: LD_VAR 0 3
39037: PPUSH
39038: LD_VAR 0 4
39042: PPUSH
39043: LD_VAR 0 5
39047: PPUSH
39048: CALL_OW 448
39052: IFFALSE 39085
// result := [ chassis , engine , control , weapon ] ;
39054: LD_ADDR_VAR 0 6
39058: PUSH
39059: LD_VAR 0 2
39063: PUSH
39064: LD_VAR 0 3
39068: PUSH
39069: LD_VAR 0 4
39073: PUSH
39074: LD_VAR 0 5
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: ST_TO_ADDR
// end ;
39085: LD_VAR 0 6
39089: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39090: LD_INT 0
39092: PPUSH
// if not chassis or not engine then
39093: LD_VAR 0 1
39097: NOT
39098: PUSH
39099: LD_VAR 0 2
39103: NOT
39104: OR
39105: IFFALSE 39109
// exit ;
39107: GO 39305
// case engine of engine_solar :
39109: LD_VAR 0 2
39113: PUSH
39114: LD_INT 2
39116: DOUBLE
39117: EQUAL
39118: IFTRUE 39122
39120: GO 39160
39122: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39123: LD_ADDR_VAR 0 3
39127: PUSH
39128: LD_INT 11
39130: PUSH
39131: LD_INT 12
39133: PUSH
39134: LD_INT 13
39136: PUSH
39137: LD_INT 14
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: LD_INT 3
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: ST_TO_ADDR
39158: GO 39289
39160: LD_INT 1
39162: DOUBLE
39163: EQUAL
39164: IFTRUE 39168
39166: GO 39230
39168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39169: LD_ADDR_VAR 0 3
39173: PUSH
39174: LD_INT 11
39176: PUSH
39177: LD_INT 12
39179: PUSH
39180: LD_INT 13
39182: PUSH
39183: LD_INT 14
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: LD_INT 3
39194: PUSH
39195: LD_INT 4
39197: PUSH
39198: LD_INT 5
39200: PUSH
39201: LD_INT 21
39203: PUSH
39204: LD_INT 23
39206: PUSH
39207: LD_INT 22
39209: PUSH
39210: LD_INT 24
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: ST_TO_ADDR
39228: GO 39289
39230: LD_INT 3
39232: DOUBLE
39233: EQUAL
39234: IFTRUE 39238
39236: GO 39288
39238: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39239: LD_ADDR_VAR 0 3
39243: PUSH
39244: LD_INT 13
39246: PUSH
39247: LD_INT 14
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: LD_INT 3
39255: PUSH
39256: LD_INT 4
39258: PUSH
39259: LD_INT 5
39261: PUSH
39262: LD_INT 21
39264: PUSH
39265: LD_INT 22
39267: PUSH
39268: LD_INT 23
39270: PUSH
39271: LD_INT 24
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: ST_TO_ADDR
39286: GO 39289
39288: POP
// result := ( chassis in result ) ;
39289: LD_ADDR_VAR 0 3
39293: PUSH
39294: LD_VAR 0 1
39298: PUSH
39299: LD_VAR 0 3
39303: IN
39304: ST_TO_ADDR
// end ;
39305: LD_VAR 0 3
39309: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39310: LD_INT 0
39312: PPUSH
// if not chassis or not weapon then
39313: LD_VAR 0 1
39317: NOT
39318: PUSH
39319: LD_VAR 0 2
39323: NOT
39324: OR
39325: IFFALSE 39329
// exit ;
39327: GO 40355
// case weapon of us_machine_gun :
39329: LD_VAR 0 2
39333: PUSH
39334: LD_INT 2
39336: DOUBLE
39337: EQUAL
39338: IFTRUE 39342
39340: GO 39372
39342: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39343: LD_ADDR_VAR 0 3
39347: PUSH
39348: LD_INT 1
39350: PUSH
39351: LD_INT 2
39353: PUSH
39354: LD_INT 3
39356: PUSH
39357: LD_INT 4
39359: PUSH
39360: LD_INT 5
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: ST_TO_ADDR
39370: GO 40339
39372: LD_INT 3
39374: DOUBLE
39375: EQUAL
39376: IFTRUE 39380
39378: GO 39410
39380: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39381: LD_ADDR_VAR 0 3
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: LD_INT 3
39394: PUSH
39395: LD_INT 4
39397: PUSH
39398: LD_INT 5
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: ST_TO_ADDR
39408: GO 40339
39410: LD_INT 11
39412: DOUBLE
39413: EQUAL
39414: IFTRUE 39418
39416: GO 39448
39418: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39419: LD_ADDR_VAR 0 3
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: LD_INT 2
39429: PUSH
39430: LD_INT 3
39432: PUSH
39433: LD_INT 4
39435: PUSH
39436: LD_INT 5
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: ST_TO_ADDR
39446: GO 40339
39448: LD_INT 4
39450: DOUBLE
39451: EQUAL
39452: IFTRUE 39456
39454: GO 39482
39456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39457: LD_ADDR_VAR 0 3
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: LD_INT 3
39467: PUSH
39468: LD_INT 4
39470: PUSH
39471: LD_INT 5
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: ST_TO_ADDR
39480: GO 40339
39482: LD_INT 5
39484: DOUBLE
39485: EQUAL
39486: IFTRUE 39490
39488: GO 39516
39490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39491: LD_ADDR_VAR 0 3
39495: PUSH
39496: LD_INT 2
39498: PUSH
39499: LD_INT 3
39501: PUSH
39502: LD_INT 4
39504: PUSH
39505: LD_INT 5
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: ST_TO_ADDR
39514: GO 40339
39516: LD_INT 9
39518: DOUBLE
39519: EQUAL
39520: IFTRUE 39524
39522: GO 39550
39524: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39525: LD_ADDR_VAR 0 3
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: LD_INT 3
39535: PUSH
39536: LD_INT 4
39538: PUSH
39539: LD_INT 5
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: ST_TO_ADDR
39548: GO 40339
39550: LD_INT 7
39552: DOUBLE
39553: EQUAL
39554: IFTRUE 39558
39556: GO 39584
39558: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39559: LD_ADDR_VAR 0 3
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: LD_INT 3
39569: PUSH
39570: LD_INT 4
39572: PUSH
39573: LD_INT 5
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: ST_TO_ADDR
39582: GO 40339
39584: LD_INT 12
39586: DOUBLE
39587: EQUAL
39588: IFTRUE 39592
39590: GO 39618
39592: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39593: LD_ADDR_VAR 0 3
39597: PUSH
39598: LD_INT 2
39600: PUSH
39601: LD_INT 3
39603: PUSH
39604: LD_INT 4
39606: PUSH
39607: LD_INT 5
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: ST_TO_ADDR
39616: GO 40339
39618: LD_INT 13
39620: DOUBLE
39621: EQUAL
39622: IFTRUE 39626
39624: GO 39652
39626: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39627: LD_ADDR_VAR 0 3
39631: PUSH
39632: LD_INT 2
39634: PUSH
39635: LD_INT 3
39637: PUSH
39638: LD_INT 4
39640: PUSH
39641: LD_INT 5
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: ST_TO_ADDR
39650: GO 40339
39652: LD_INT 14
39654: DOUBLE
39655: EQUAL
39656: IFTRUE 39660
39658: GO 39678
39660: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39661: LD_ADDR_VAR 0 3
39665: PUSH
39666: LD_INT 4
39668: PUSH
39669: LD_INT 5
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: ST_TO_ADDR
39676: GO 40339
39678: LD_INT 6
39680: DOUBLE
39681: EQUAL
39682: IFTRUE 39686
39684: GO 39704
39686: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39687: LD_ADDR_VAR 0 3
39691: PUSH
39692: LD_INT 4
39694: PUSH
39695: LD_INT 5
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: ST_TO_ADDR
39702: GO 40339
39704: LD_INT 10
39706: DOUBLE
39707: EQUAL
39708: IFTRUE 39712
39710: GO 39730
39712: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39713: LD_ADDR_VAR 0 3
39717: PUSH
39718: LD_INT 4
39720: PUSH
39721: LD_INT 5
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: ST_TO_ADDR
39728: GO 40339
39730: LD_INT 22
39732: DOUBLE
39733: EQUAL
39734: IFTRUE 39738
39736: GO 39764
39738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39739: LD_ADDR_VAR 0 3
39743: PUSH
39744: LD_INT 11
39746: PUSH
39747: LD_INT 12
39749: PUSH
39750: LD_INT 13
39752: PUSH
39753: LD_INT 14
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: ST_TO_ADDR
39762: GO 40339
39764: LD_INT 23
39766: DOUBLE
39767: EQUAL
39768: IFTRUE 39772
39770: GO 39798
39772: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39773: LD_ADDR_VAR 0 3
39777: PUSH
39778: LD_INT 11
39780: PUSH
39781: LD_INT 12
39783: PUSH
39784: LD_INT 13
39786: PUSH
39787: LD_INT 14
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: ST_TO_ADDR
39796: GO 40339
39798: LD_INT 24
39800: DOUBLE
39801: EQUAL
39802: IFTRUE 39806
39804: GO 39832
39806: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39807: LD_ADDR_VAR 0 3
39811: PUSH
39812: LD_INT 11
39814: PUSH
39815: LD_INT 12
39817: PUSH
39818: LD_INT 13
39820: PUSH
39821: LD_INT 14
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: ST_TO_ADDR
39830: GO 40339
39832: LD_INT 30
39834: DOUBLE
39835: EQUAL
39836: IFTRUE 39840
39838: GO 39866
39840: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39841: LD_ADDR_VAR 0 3
39845: PUSH
39846: LD_INT 11
39848: PUSH
39849: LD_INT 12
39851: PUSH
39852: LD_INT 13
39854: PUSH
39855: LD_INT 14
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: ST_TO_ADDR
39864: GO 40339
39866: LD_INT 25
39868: DOUBLE
39869: EQUAL
39870: IFTRUE 39874
39872: GO 39892
39874: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39875: LD_ADDR_VAR 0 3
39879: PUSH
39880: LD_INT 13
39882: PUSH
39883: LD_INT 14
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: ST_TO_ADDR
39890: GO 40339
39892: LD_INT 27
39894: DOUBLE
39895: EQUAL
39896: IFTRUE 39900
39898: GO 39918
39900: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39901: LD_ADDR_VAR 0 3
39905: PUSH
39906: LD_INT 13
39908: PUSH
39909: LD_INT 14
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: ST_TO_ADDR
39916: GO 40339
39918: LD_INT 28
39920: DOUBLE
39921: EQUAL
39922: IFTRUE 39926
39924: GO 39944
39926: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39927: LD_ADDR_VAR 0 3
39931: PUSH
39932: LD_INT 13
39934: PUSH
39935: LD_INT 14
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: ST_TO_ADDR
39942: GO 40339
39944: LD_INT 29
39946: DOUBLE
39947: EQUAL
39948: IFTRUE 39952
39950: GO 39970
39952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39953: LD_ADDR_VAR 0 3
39957: PUSH
39958: LD_INT 13
39960: PUSH
39961: LD_INT 14
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: ST_TO_ADDR
39968: GO 40339
39970: LD_INT 31
39972: DOUBLE
39973: EQUAL
39974: IFTRUE 39978
39976: GO 39996
39978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39979: LD_ADDR_VAR 0 3
39983: PUSH
39984: LD_INT 13
39986: PUSH
39987: LD_INT 14
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: ST_TO_ADDR
39994: GO 40339
39996: LD_INT 26
39998: DOUBLE
39999: EQUAL
40000: IFTRUE 40004
40002: GO 40022
40004: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40005: LD_ADDR_VAR 0 3
40009: PUSH
40010: LD_INT 13
40012: PUSH
40013: LD_INT 14
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: ST_TO_ADDR
40020: GO 40339
40022: LD_INT 42
40024: DOUBLE
40025: EQUAL
40026: IFTRUE 40030
40028: GO 40056
40030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40031: LD_ADDR_VAR 0 3
40035: PUSH
40036: LD_INT 21
40038: PUSH
40039: LD_INT 22
40041: PUSH
40042: LD_INT 23
40044: PUSH
40045: LD_INT 24
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: ST_TO_ADDR
40054: GO 40339
40056: LD_INT 43
40058: DOUBLE
40059: EQUAL
40060: IFTRUE 40064
40062: GO 40090
40064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40065: LD_ADDR_VAR 0 3
40069: PUSH
40070: LD_INT 21
40072: PUSH
40073: LD_INT 22
40075: PUSH
40076: LD_INT 23
40078: PUSH
40079: LD_INT 24
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: ST_TO_ADDR
40088: GO 40339
40090: LD_INT 44
40092: DOUBLE
40093: EQUAL
40094: IFTRUE 40098
40096: GO 40124
40098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40099: LD_ADDR_VAR 0 3
40103: PUSH
40104: LD_INT 21
40106: PUSH
40107: LD_INT 22
40109: PUSH
40110: LD_INT 23
40112: PUSH
40113: LD_INT 24
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: ST_TO_ADDR
40122: GO 40339
40124: LD_INT 45
40126: DOUBLE
40127: EQUAL
40128: IFTRUE 40132
40130: GO 40158
40132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40133: LD_ADDR_VAR 0 3
40137: PUSH
40138: LD_INT 21
40140: PUSH
40141: LD_INT 22
40143: PUSH
40144: LD_INT 23
40146: PUSH
40147: LD_INT 24
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: ST_TO_ADDR
40156: GO 40339
40158: LD_INT 49
40160: DOUBLE
40161: EQUAL
40162: IFTRUE 40166
40164: GO 40192
40166: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40167: LD_ADDR_VAR 0 3
40171: PUSH
40172: LD_INT 21
40174: PUSH
40175: LD_INT 22
40177: PUSH
40178: LD_INT 23
40180: PUSH
40181: LD_INT 24
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: ST_TO_ADDR
40190: GO 40339
40192: LD_INT 51
40194: DOUBLE
40195: EQUAL
40196: IFTRUE 40200
40198: GO 40226
40200: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40201: LD_ADDR_VAR 0 3
40205: PUSH
40206: LD_INT 21
40208: PUSH
40209: LD_INT 22
40211: PUSH
40212: LD_INT 23
40214: PUSH
40215: LD_INT 24
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: ST_TO_ADDR
40224: GO 40339
40226: LD_INT 52
40228: DOUBLE
40229: EQUAL
40230: IFTRUE 40234
40232: GO 40260
40234: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40235: LD_ADDR_VAR 0 3
40239: PUSH
40240: LD_INT 21
40242: PUSH
40243: LD_INT 22
40245: PUSH
40246: LD_INT 23
40248: PUSH
40249: LD_INT 24
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: ST_TO_ADDR
40258: GO 40339
40260: LD_INT 53
40262: DOUBLE
40263: EQUAL
40264: IFTRUE 40268
40266: GO 40286
40268: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40269: LD_ADDR_VAR 0 3
40273: PUSH
40274: LD_INT 23
40276: PUSH
40277: LD_INT 24
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: ST_TO_ADDR
40284: GO 40339
40286: LD_INT 46
40288: DOUBLE
40289: EQUAL
40290: IFTRUE 40294
40292: GO 40312
40294: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40295: LD_ADDR_VAR 0 3
40299: PUSH
40300: LD_INT 23
40302: PUSH
40303: LD_INT 24
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: ST_TO_ADDR
40310: GO 40339
40312: LD_INT 47
40314: DOUBLE
40315: EQUAL
40316: IFTRUE 40320
40318: GO 40338
40320: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40321: LD_ADDR_VAR 0 3
40325: PUSH
40326: LD_INT 23
40328: PUSH
40329: LD_INT 24
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: ST_TO_ADDR
40336: GO 40339
40338: POP
// result := ( chassis in result ) ;
40339: LD_ADDR_VAR 0 3
40343: PUSH
40344: LD_VAR 0 1
40348: PUSH
40349: LD_VAR 0 3
40353: IN
40354: ST_TO_ADDR
// end ;
40355: LD_VAR 0 3
40359: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40360: LD_INT 0
40362: PPUSH
40363: PPUSH
40364: PPUSH
40365: PPUSH
40366: PPUSH
40367: PPUSH
40368: PPUSH
// result := array ;
40369: LD_ADDR_VAR 0 5
40373: PUSH
40374: LD_VAR 0 1
40378: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40379: LD_VAR 0 1
40383: NOT
40384: PUSH
40385: LD_VAR 0 2
40389: NOT
40390: OR
40391: PUSH
40392: LD_VAR 0 3
40396: NOT
40397: OR
40398: PUSH
40399: LD_VAR 0 2
40403: PUSH
40404: LD_VAR 0 1
40408: GREATER
40409: OR
40410: PUSH
40411: LD_VAR 0 3
40415: PUSH
40416: LD_VAR 0 1
40420: GREATER
40421: OR
40422: IFFALSE 40426
// exit ;
40424: GO 40722
// if direction then
40426: LD_VAR 0 4
40430: IFFALSE 40494
// begin d := 1 ;
40432: LD_ADDR_VAR 0 9
40436: PUSH
40437: LD_INT 1
40439: ST_TO_ADDR
// if i_from > i_to then
40440: LD_VAR 0 2
40444: PUSH
40445: LD_VAR 0 3
40449: GREATER
40450: IFFALSE 40476
// length := ( array - i_from ) + i_to else
40452: LD_ADDR_VAR 0 11
40456: PUSH
40457: LD_VAR 0 1
40461: PUSH
40462: LD_VAR 0 2
40466: MINUS
40467: PUSH
40468: LD_VAR 0 3
40472: PLUS
40473: ST_TO_ADDR
40474: GO 40492
// length := i_to - i_from ;
40476: LD_ADDR_VAR 0 11
40480: PUSH
40481: LD_VAR 0 3
40485: PUSH
40486: LD_VAR 0 2
40490: MINUS
40491: ST_TO_ADDR
// end else
40492: GO 40555
// begin d := - 1 ;
40494: LD_ADDR_VAR 0 9
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: ST_TO_ADDR
// if i_from > i_to then
40503: LD_VAR 0 2
40507: PUSH
40508: LD_VAR 0 3
40512: GREATER
40513: IFFALSE 40533
// length := i_from - i_to else
40515: LD_ADDR_VAR 0 11
40519: PUSH
40520: LD_VAR 0 2
40524: PUSH
40525: LD_VAR 0 3
40529: MINUS
40530: ST_TO_ADDR
40531: GO 40555
// length := ( array - i_to ) + i_from ;
40533: LD_ADDR_VAR 0 11
40537: PUSH
40538: LD_VAR 0 1
40542: PUSH
40543: LD_VAR 0 3
40547: MINUS
40548: PUSH
40549: LD_VAR 0 2
40553: PLUS
40554: ST_TO_ADDR
// end ; if not length then
40555: LD_VAR 0 11
40559: NOT
40560: IFFALSE 40564
// exit ;
40562: GO 40722
// tmp := array ;
40564: LD_ADDR_VAR 0 10
40568: PUSH
40569: LD_VAR 0 1
40573: ST_TO_ADDR
// for i = 1 to length do
40574: LD_ADDR_VAR 0 6
40578: PUSH
40579: DOUBLE
40580: LD_INT 1
40582: DEC
40583: ST_TO_ADDR
40584: LD_VAR 0 11
40588: PUSH
40589: FOR_TO
40590: IFFALSE 40710
// begin for j = 1 to array do
40592: LD_ADDR_VAR 0 7
40596: PUSH
40597: DOUBLE
40598: LD_INT 1
40600: DEC
40601: ST_TO_ADDR
40602: LD_VAR 0 1
40606: PUSH
40607: FOR_TO
40608: IFFALSE 40696
// begin k := j + d ;
40610: LD_ADDR_VAR 0 8
40614: PUSH
40615: LD_VAR 0 7
40619: PUSH
40620: LD_VAR 0 9
40624: PLUS
40625: ST_TO_ADDR
// if k > array then
40626: LD_VAR 0 8
40630: PUSH
40631: LD_VAR 0 1
40635: GREATER
40636: IFFALSE 40646
// k := 1 ;
40638: LD_ADDR_VAR 0 8
40642: PUSH
40643: LD_INT 1
40645: ST_TO_ADDR
// if not k then
40646: LD_VAR 0 8
40650: NOT
40651: IFFALSE 40663
// k := array ;
40653: LD_ADDR_VAR 0 8
40657: PUSH
40658: LD_VAR 0 1
40662: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40663: LD_ADDR_VAR 0 10
40667: PUSH
40668: LD_VAR 0 10
40672: PPUSH
40673: LD_VAR 0 8
40677: PPUSH
40678: LD_VAR 0 1
40682: PUSH
40683: LD_VAR 0 7
40687: ARRAY
40688: PPUSH
40689: CALL_OW 1
40693: ST_TO_ADDR
// end ;
40694: GO 40607
40696: POP
40697: POP
// array := tmp ;
40698: LD_ADDR_VAR 0 1
40702: PUSH
40703: LD_VAR 0 10
40707: ST_TO_ADDR
// end ;
40708: GO 40589
40710: POP
40711: POP
// result := array ;
40712: LD_ADDR_VAR 0 5
40716: PUSH
40717: LD_VAR 0 1
40721: ST_TO_ADDR
// end ;
40722: LD_VAR 0 5
40726: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40727: LD_INT 0
40729: PPUSH
40730: PPUSH
// result := 0 ;
40731: LD_ADDR_VAR 0 3
40735: PUSH
40736: LD_INT 0
40738: ST_TO_ADDR
// if not array or not value in array then
40739: LD_VAR 0 1
40743: NOT
40744: PUSH
40745: LD_VAR 0 2
40749: PUSH
40750: LD_VAR 0 1
40754: IN
40755: NOT
40756: OR
40757: IFFALSE 40761
// exit ;
40759: GO 40815
// for i = 1 to array do
40761: LD_ADDR_VAR 0 4
40765: PUSH
40766: DOUBLE
40767: LD_INT 1
40769: DEC
40770: ST_TO_ADDR
40771: LD_VAR 0 1
40775: PUSH
40776: FOR_TO
40777: IFFALSE 40813
// if value = array [ i ] then
40779: LD_VAR 0 2
40783: PUSH
40784: LD_VAR 0 1
40788: PUSH
40789: LD_VAR 0 4
40793: ARRAY
40794: EQUAL
40795: IFFALSE 40811
// begin result := i ;
40797: LD_ADDR_VAR 0 3
40801: PUSH
40802: LD_VAR 0 4
40806: ST_TO_ADDR
// exit ;
40807: POP
40808: POP
40809: GO 40815
// end ;
40811: GO 40776
40813: POP
40814: POP
// end ;
40815: LD_VAR 0 3
40819: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40820: LD_INT 0
40822: PPUSH
// vc_chassis := chassis ;
40823: LD_ADDR_OWVAR 37
40827: PUSH
40828: LD_VAR 0 1
40832: ST_TO_ADDR
// vc_engine := engine ;
40833: LD_ADDR_OWVAR 39
40837: PUSH
40838: LD_VAR 0 2
40842: ST_TO_ADDR
// vc_control := control ;
40843: LD_ADDR_OWVAR 38
40847: PUSH
40848: LD_VAR 0 3
40852: ST_TO_ADDR
// vc_weapon := weapon ;
40853: LD_ADDR_OWVAR 40
40857: PUSH
40858: LD_VAR 0 4
40862: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40863: LD_ADDR_OWVAR 41
40867: PUSH
40868: LD_VAR 0 5
40872: ST_TO_ADDR
// end ;
40873: LD_VAR 0 6
40877: RET
// export function WantPlant ( unit ) ; var task ; begin
40878: LD_INT 0
40880: PPUSH
40881: PPUSH
// result := false ;
40882: LD_ADDR_VAR 0 2
40886: PUSH
40887: LD_INT 0
40889: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40890: LD_ADDR_VAR 0 3
40894: PUSH
40895: LD_VAR 0 1
40899: PPUSH
40900: CALL_OW 437
40904: ST_TO_ADDR
// if task then
40905: LD_VAR 0 3
40909: IFFALSE 40937
// if task [ 1 ] [ 1 ] = p then
40911: LD_VAR 0 3
40915: PUSH
40916: LD_INT 1
40918: ARRAY
40919: PUSH
40920: LD_INT 1
40922: ARRAY
40923: PUSH
40924: LD_STRING p
40926: EQUAL
40927: IFFALSE 40937
// result := true ;
40929: LD_ADDR_VAR 0 2
40933: PUSH
40934: LD_INT 1
40936: ST_TO_ADDR
// end ;
40937: LD_VAR 0 2
40941: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40942: LD_INT 0
40944: PPUSH
40945: PPUSH
40946: PPUSH
40947: PPUSH
// if pos < 1 then
40948: LD_VAR 0 2
40952: PUSH
40953: LD_INT 1
40955: LESS
40956: IFFALSE 40960
// exit ;
40958: GO 41263
// if pos = 1 then
40960: LD_VAR 0 2
40964: PUSH
40965: LD_INT 1
40967: EQUAL
40968: IFFALSE 41001
// result := Replace ( arr , pos [ 1 ] , value ) else
40970: LD_ADDR_VAR 0 4
40974: PUSH
40975: LD_VAR 0 1
40979: PPUSH
40980: LD_VAR 0 2
40984: PUSH
40985: LD_INT 1
40987: ARRAY
40988: PPUSH
40989: LD_VAR 0 3
40993: PPUSH
40994: CALL_OW 1
40998: ST_TO_ADDR
40999: GO 41263
// begin tmp := arr ;
41001: LD_ADDR_VAR 0 6
41005: PUSH
41006: LD_VAR 0 1
41010: ST_TO_ADDR
// s_arr := [ tmp ] ;
41011: LD_ADDR_VAR 0 7
41015: PUSH
41016: LD_VAR 0 6
41020: PUSH
41021: EMPTY
41022: LIST
41023: ST_TO_ADDR
// for i = 1 to pos - 1 do
41024: LD_ADDR_VAR 0 5
41028: PUSH
41029: DOUBLE
41030: LD_INT 1
41032: DEC
41033: ST_TO_ADDR
41034: LD_VAR 0 2
41038: PUSH
41039: LD_INT 1
41041: MINUS
41042: PUSH
41043: FOR_TO
41044: IFFALSE 41089
// begin tmp := tmp [ pos [ i ] ] ;
41046: LD_ADDR_VAR 0 6
41050: PUSH
41051: LD_VAR 0 6
41055: PUSH
41056: LD_VAR 0 2
41060: PUSH
41061: LD_VAR 0 5
41065: ARRAY
41066: ARRAY
41067: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41068: LD_ADDR_VAR 0 7
41072: PUSH
41073: LD_VAR 0 7
41077: PUSH
41078: LD_VAR 0 6
41082: PUSH
41083: EMPTY
41084: LIST
41085: ADD
41086: ST_TO_ADDR
// end ;
41087: GO 41043
41089: POP
41090: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41091: LD_ADDR_VAR 0 6
41095: PUSH
41096: LD_VAR 0 6
41100: PPUSH
41101: LD_VAR 0 2
41105: PUSH
41106: LD_VAR 0 2
41110: ARRAY
41111: PPUSH
41112: LD_VAR 0 3
41116: PPUSH
41117: CALL_OW 1
41121: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41122: LD_ADDR_VAR 0 7
41126: PUSH
41127: LD_VAR 0 7
41131: PPUSH
41132: LD_VAR 0 7
41136: PPUSH
41137: LD_VAR 0 6
41141: PPUSH
41142: CALL_OW 1
41146: ST_TO_ADDR
// for i = s_arr downto 2 do
41147: LD_ADDR_VAR 0 5
41151: PUSH
41152: DOUBLE
41153: LD_VAR 0 7
41157: INC
41158: ST_TO_ADDR
41159: LD_INT 2
41161: PUSH
41162: FOR_DOWNTO
41163: IFFALSE 41247
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41165: LD_ADDR_VAR 0 6
41169: PUSH
41170: LD_VAR 0 7
41174: PUSH
41175: LD_VAR 0 5
41179: PUSH
41180: LD_INT 1
41182: MINUS
41183: ARRAY
41184: PPUSH
41185: LD_VAR 0 2
41189: PUSH
41190: LD_VAR 0 5
41194: PUSH
41195: LD_INT 1
41197: MINUS
41198: ARRAY
41199: PPUSH
41200: LD_VAR 0 7
41204: PUSH
41205: LD_VAR 0 5
41209: ARRAY
41210: PPUSH
41211: CALL_OW 1
41215: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41216: LD_ADDR_VAR 0 7
41220: PUSH
41221: LD_VAR 0 7
41225: PPUSH
41226: LD_VAR 0 5
41230: PUSH
41231: LD_INT 1
41233: MINUS
41234: PPUSH
41235: LD_VAR 0 6
41239: PPUSH
41240: CALL_OW 1
41244: ST_TO_ADDR
// end ;
41245: GO 41162
41247: POP
41248: POP
// result := s_arr [ 1 ] ;
41249: LD_ADDR_VAR 0 4
41253: PUSH
41254: LD_VAR 0 7
41258: PUSH
41259: LD_INT 1
41261: ARRAY
41262: ST_TO_ADDR
// end ; end ;
41263: LD_VAR 0 4
41267: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41268: LD_INT 0
41270: PPUSH
41271: PPUSH
// if not list then
41272: LD_VAR 0 1
41276: NOT
41277: IFFALSE 41281
// exit ;
41279: GO 41372
// i := list [ pos1 ] ;
41281: LD_ADDR_VAR 0 5
41285: PUSH
41286: LD_VAR 0 1
41290: PUSH
41291: LD_VAR 0 2
41295: ARRAY
41296: ST_TO_ADDR
// if not i then
41297: LD_VAR 0 5
41301: NOT
41302: IFFALSE 41306
// exit ;
41304: GO 41372
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41306: LD_ADDR_VAR 0 1
41310: PUSH
41311: LD_VAR 0 1
41315: PPUSH
41316: LD_VAR 0 2
41320: PPUSH
41321: LD_VAR 0 1
41325: PUSH
41326: LD_VAR 0 3
41330: ARRAY
41331: PPUSH
41332: CALL_OW 1
41336: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41337: LD_ADDR_VAR 0 1
41341: PUSH
41342: LD_VAR 0 1
41346: PPUSH
41347: LD_VAR 0 3
41351: PPUSH
41352: LD_VAR 0 5
41356: PPUSH
41357: CALL_OW 1
41361: ST_TO_ADDR
// result := list ;
41362: LD_ADDR_VAR 0 4
41366: PUSH
41367: LD_VAR 0 1
41371: ST_TO_ADDR
// end ;
41372: LD_VAR 0 4
41376: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41377: LD_INT 0
41379: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41380: LD_ADDR_VAR 0 5
41384: PUSH
41385: LD_VAR 0 1
41389: PPUSH
41390: CALL_OW 250
41394: PPUSH
41395: LD_VAR 0 1
41399: PPUSH
41400: CALL_OW 251
41404: PPUSH
41405: LD_VAR 0 2
41409: PPUSH
41410: LD_VAR 0 3
41414: PPUSH
41415: LD_VAR 0 4
41419: PPUSH
41420: CALL 41430 0 5
41424: ST_TO_ADDR
// end ;
41425: LD_VAR 0 5
41429: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41430: LD_INT 0
41432: PPUSH
41433: PPUSH
41434: PPUSH
41435: PPUSH
// if not list then
41436: LD_VAR 0 3
41440: NOT
41441: IFFALSE 41445
// exit ;
41443: GO 41833
// result := [ ] ;
41445: LD_ADDR_VAR 0 6
41449: PUSH
41450: EMPTY
41451: ST_TO_ADDR
// for i in list do
41452: LD_ADDR_VAR 0 7
41456: PUSH
41457: LD_VAR 0 3
41461: PUSH
41462: FOR_IN
41463: IFFALSE 41665
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41465: LD_ADDR_VAR 0 9
41469: PUSH
41470: LD_VAR 0 7
41474: PPUSH
41475: LD_VAR 0 1
41479: PPUSH
41480: LD_VAR 0 2
41484: PPUSH
41485: CALL_OW 297
41489: ST_TO_ADDR
// if not result then
41490: LD_VAR 0 6
41494: NOT
41495: IFFALSE 41521
// result := [ [ i , tmp ] ] else
41497: LD_ADDR_VAR 0 6
41501: PUSH
41502: LD_VAR 0 7
41506: PUSH
41507: LD_VAR 0 9
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: EMPTY
41517: LIST
41518: ST_TO_ADDR
41519: GO 41663
// begin if result [ result ] [ 2 ] < tmp then
41521: LD_VAR 0 6
41525: PUSH
41526: LD_VAR 0 6
41530: ARRAY
41531: PUSH
41532: LD_INT 2
41534: ARRAY
41535: PUSH
41536: LD_VAR 0 9
41540: LESS
41541: IFFALSE 41583
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41543: LD_ADDR_VAR 0 6
41547: PUSH
41548: LD_VAR 0 6
41552: PPUSH
41553: LD_VAR 0 6
41557: PUSH
41558: LD_INT 1
41560: PLUS
41561: PPUSH
41562: LD_VAR 0 7
41566: PUSH
41567: LD_VAR 0 9
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PPUSH
41576: CALL_OW 2
41580: ST_TO_ADDR
41581: GO 41663
// for j = 1 to result do
41583: LD_ADDR_VAR 0 8
41587: PUSH
41588: DOUBLE
41589: LD_INT 1
41591: DEC
41592: ST_TO_ADDR
41593: LD_VAR 0 6
41597: PUSH
41598: FOR_TO
41599: IFFALSE 41661
// begin if tmp < result [ j ] [ 2 ] then
41601: LD_VAR 0 9
41605: PUSH
41606: LD_VAR 0 6
41610: PUSH
41611: LD_VAR 0 8
41615: ARRAY
41616: PUSH
41617: LD_INT 2
41619: ARRAY
41620: LESS
41621: IFFALSE 41659
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41623: LD_ADDR_VAR 0 6
41627: PUSH
41628: LD_VAR 0 6
41632: PPUSH
41633: LD_VAR 0 8
41637: PPUSH
41638: LD_VAR 0 7
41642: PUSH
41643: LD_VAR 0 9
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PPUSH
41652: CALL_OW 2
41656: ST_TO_ADDR
// break ;
41657: GO 41661
// end ; end ;
41659: GO 41598
41661: POP
41662: POP
// end ; end ;
41663: GO 41462
41665: POP
41666: POP
// if result and not asc then
41667: LD_VAR 0 6
41671: PUSH
41672: LD_VAR 0 4
41676: NOT
41677: AND
41678: IFFALSE 41753
// begin tmp := result ;
41680: LD_ADDR_VAR 0 9
41684: PUSH
41685: LD_VAR 0 6
41689: ST_TO_ADDR
// for i = tmp downto 1 do
41690: LD_ADDR_VAR 0 7
41694: PUSH
41695: DOUBLE
41696: LD_VAR 0 9
41700: INC
41701: ST_TO_ADDR
41702: LD_INT 1
41704: PUSH
41705: FOR_DOWNTO
41706: IFFALSE 41751
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41708: LD_ADDR_VAR 0 6
41712: PUSH
41713: LD_VAR 0 6
41717: PPUSH
41718: LD_VAR 0 9
41722: PUSH
41723: LD_VAR 0 7
41727: MINUS
41728: PUSH
41729: LD_INT 1
41731: PLUS
41732: PPUSH
41733: LD_VAR 0 9
41737: PUSH
41738: LD_VAR 0 7
41742: ARRAY
41743: PPUSH
41744: CALL_OW 1
41748: ST_TO_ADDR
41749: GO 41705
41751: POP
41752: POP
// end ; tmp := [ ] ;
41753: LD_ADDR_VAR 0 9
41757: PUSH
41758: EMPTY
41759: ST_TO_ADDR
// if mode then
41760: LD_VAR 0 5
41764: IFFALSE 41833
// begin for i = 1 to result do
41766: LD_ADDR_VAR 0 7
41770: PUSH
41771: DOUBLE
41772: LD_INT 1
41774: DEC
41775: ST_TO_ADDR
41776: LD_VAR 0 6
41780: PUSH
41781: FOR_TO
41782: IFFALSE 41821
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41784: LD_ADDR_VAR 0 9
41788: PUSH
41789: LD_VAR 0 9
41793: PPUSH
41794: LD_VAR 0 7
41798: PPUSH
41799: LD_VAR 0 6
41803: PUSH
41804: LD_VAR 0 7
41808: ARRAY
41809: PUSH
41810: LD_INT 1
41812: ARRAY
41813: PPUSH
41814: CALL_OW 1
41818: ST_TO_ADDR
41819: GO 41781
41821: POP
41822: POP
// result := tmp ;
41823: LD_ADDR_VAR 0 6
41827: PUSH
41828: LD_VAR 0 9
41832: ST_TO_ADDR
// end ; end ;
41833: LD_VAR 0 6
41837: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41838: LD_INT 0
41840: PPUSH
41841: PPUSH
41842: PPUSH
41843: PPUSH
41844: PPUSH
41845: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41846: LD_ADDR_VAR 0 5
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: ST_TO_ADDR
// if not x or not y then
41868: LD_VAR 0 2
41872: NOT
41873: PUSH
41874: LD_VAR 0 3
41878: NOT
41879: OR
41880: IFFALSE 41884
// exit ;
41882: GO 43530
// if not range then
41884: LD_VAR 0 4
41888: NOT
41889: IFFALSE 41899
// range := 10 ;
41891: LD_ADDR_VAR 0 4
41895: PUSH
41896: LD_INT 10
41898: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41899: LD_ADDR_VAR 0 8
41903: PUSH
41904: LD_INT 81
41906: PUSH
41907: LD_VAR 0 1
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 92
41918: PUSH
41919: LD_VAR 0 2
41923: PUSH
41924: LD_VAR 0 3
41928: PUSH
41929: LD_VAR 0 4
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 3
41942: PUSH
41943: LD_INT 21
41945: PUSH
41946: LD_INT 3
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: LIST
41961: PPUSH
41962: CALL_OW 69
41966: ST_TO_ADDR
// if not tmp then
41967: LD_VAR 0 8
41971: NOT
41972: IFFALSE 41976
// exit ;
41974: GO 43530
// for i in tmp do
41976: LD_ADDR_VAR 0 6
41980: PUSH
41981: LD_VAR 0 8
41985: PUSH
41986: FOR_IN
41987: IFFALSE 43505
// begin points := [ 0 , 0 , 0 ] ;
41989: LD_ADDR_VAR 0 9
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: LIST
42007: ST_TO_ADDR
// bpoints := 1 ;
42008: LD_ADDR_VAR 0 10
42012: PUSH
42013: LD_INT 1
42015: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42016: LD_VAR 0 6
42020: PPUSH
42021: CALL_OW 247
42025: PUSH
42026: LD_INT 1
42028: DOUBLE
42029: EQUAL
42030: IFTRUE 42034
42032: GO 42612
42034: POP
// begin if GetClass ( i ) = 1 then
42035: LD_VAR 0 6
42039: PPUSH
42040: CALL_OW 257
42044: PUSH
42045: LD_INT 1
42047: EQUAL
42048: IFFALSE 42069
// points := [ 10 , 5 , 3 ] ;
42050: LD_ADDR_VAR 0 9
42054: PUSH
42055: LD_INT 10
42057: PUSH
42058: LD_INT 5
42060: PUSH
42061: LD_INT 3
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42069: LD_VAR 0 6
42073: PPUSH
42074: CALL_OW 257
42078: PUSH
42079: LD_INT 2
42081: PUSH
42082: LD_INT 3
42084: PUSH
42085: LD_INT 4
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: IN
42093: IFFALSE 42114
// points := [ 3 , 2 , 1 ] ;
42095: LD_ADDR_VAR 0 9
42099: PUSH
42100: LD_INT 3
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: LIST
42113: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42114: LD_VAR 0 6
42118: PPUSH
42119: CALL_OW 257
42123: PUSH
42124: LD_INT 5
42126: EQUAL
42127: IFFALSE 42148
// points := [ 130 , 5 , 2 ] ;
42129: LD_ADDR_VAR 0 9
42133: PUSH
42134: LD_INT 130
42136: PUSH
42137: LD_INT 5
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: LIST
42147: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42148: LD_VAR 0 6
42152: PPUSH
42153: CALL_OW 257
42157: PUSH
42158: LD_INT 8
42160: EQUAL
42161: IFFALSE 42182
// points := [ 35 , 35 , 30 ] ;
42163: LD_ADDR_VAR 0 9
42167: PUSH
42168: LD_INT 35
42170: PUSH
42171: LD_INT 35
42173: PUSH
42174: LD_INT 30
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: LIST
42181: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42182: LD_VAR 0 6
42186: PPUSH
42187: CALL_OW 257
42191: PUSH
42192: LD_INT 9
42194: EQUAL
42195: IFFALSE 42216
// points := [ 20 , 55 , 40 ] ;
42197: LD_ADDR_VAR 0 9
42201: PUSH
42202: LD_INT 20
42204: PUSH
42205: LD_INT 55
42207: PUSH
42208: LD_INT 40
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42216: LD_VAR 0 6
42220: PPUSH
42221: CALL_OW 257
42225: PUSH
42226: LD_INT 12
42228: PUSH
42229: LD_INT 16
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: IN
42236: IFFALSE 42257
// points := [ 5 , 3 , 2 ] ;
42238: LD_ADDR_VAR 0 9
42242: PUSH
42243: LD_INT 5
42245: PUSH
42246: LD_INT 3
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: LIST
42256: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42257: LD_VAR 0 6
42261: PPUSH
42262: CALL_OW 257
42266: PUSH
42267: LD_INT 17
42269: EQUAL
42270: IFFALSE 42291
// points := [ 100 , 50 , 75 ] ;
42272: LD_ADDR_VAR 0 9
42276: PUSH
42277: LD_INT 100
42279: PUSH
42280: LD_INT 50
42282: PUSH
42283: LD_INT 75
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42291: LD_VAR 0 6
42295: PPUSH
42296: CALL_OW 257
42300: PUSH
42301: LD_INT 15
42303: EQUAL
42304: IFFALSE 42325
// points := [ 10 , 5 , 3 ] ;
42306: LD_ADDR_VAR 0 9
42310: PUSH
42311: LD_INT 10
42313: PUSH
42314: LD_INT 5
42316: PUSH
42317: LD_INT 3
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: LIST
42324: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42325: LD_VAR 0 6
42329: PPUSH
42330: CALL_OW 257
42334: PUSH
42335: LD_INT 14
42337: EQUAL
42338: IFFALSE 42359
// points := [ 10 , 0 , 0 ] ;
42340: LD_ADDR_VAR 0 9
42344: PUSH
42345: LD_INT 10
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: LIST
42358: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42359: LD_VAR 0 6
42363: PPUSH
42364: CALL_OW 257
42368: PUSH
42369: LD_INT 11
42371: EQUAL
42372: IFFALSE 42393
// points := [ 30 , 10 , 5 ] ;
42374: LD_ADDR_VAR 0 9
42378: PUSH
42379: LD_INT 30
42381: PUSH
42382: LD_INT 10
42384: PUSH
42385: LD_INT 5
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: LIST
42392: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42393: LD_VAR 0 1
42397: PPUSH
42398: LD_INT 5
42400: PPUSH
42401: CALL_OW 321
42405: PUSH
42406: LD_INT 2
42408: EQUAL
42409: IFFALSE 42426
// bpoints := bpoints * 1.8 ;
42411: LD_ADDR_VAR 0 10
42415: PUSH
42416: LD_VAR 0 10
42420: PUSH
42421: LD_REAL  1.80000000000000E+0000
42424: MUL
42425: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42426: LD_VAR 0 6
42430: PPUSH
42431: CALL_OW 257
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 2
42441: PUSH
42442: LD_INT 3
42444: PUSH
42445: LD_INT 4
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: IN
42454: PUSH
42455: LD_VAR 0 1
42459: PPUSH
42460: LD_INT 51
42462: PPUSH
42463: CALL_OW 321
42467: PUSH
42468: LD_INT 2
42470: EQUAL
42471: AND
42472: IFFALSE 42489
// bpoints := bpoints * 1.2 ;
42474: LD_ADDR_VAR 0 10
42478: PUSH
42479: LD_VAR 0 10
42483: PUSH
42484: LD_REAL  1.20000000000000E+0000
42487: MUL
42488: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42489: LD_VAR 0 6
42493: PPUSH
42494: CALL_OW 257
42498: PUSH
42499: LD_INT 5
42501: PUSH
42502: LD_INT 7
42504: PUSH
42505: LD_INT 9
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: IN
42513: PUSH
42514: LD_VAR 0 1
42518: PPUSH
42519: LD_INT 52
42521: PPUSH
42522: CALL_OW 321
42526: PUSH
42527: LD_INT 2
42529: EQUAL
42530: AND
42531: IFFALSE 42548
// bpoints := bpoints * 1.5 ;
42533: LD_ADDR_VAR 0 10
42537: PUSH
42538: LD_VAR 0 10
42542: PUSH
42543: LD_REAL  1.50000000000000E+0000
42546: MUL
42547: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42548: LD_VAR 0 1
42552: PPUSH
42553: LD_INT 66
42555: PPUSH
42556: CALL_OW 321
42560: PUSH
42561: LD_INT 2
42563: EQUAL
42564: IFFALSE 42581
// bpoints := bpoints * 1.1 ;
42566: LD_ADDR_VAR 0 10
42570: PUSH
42571: LD_VAR 0 10
42575: PUSH
42576: LD_REAL  1.10000000000000E+0000
42579: MUL
42580: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42581: LD_ADDR_VAR 0 10
42585: PUSH
42586: LD_VAR 0 10
42590: PUSH
42591: LD_VAR 0 6
42595: PPUSH
42596: LD_INT 1
42598: PPUSH
42599: CALL_OW 259
42603: PUSH
42604: LD_REAL  1.15000000000000E+0000
42607: MUL
42608: MUL
42609: ST_TO_ADDR
// end ; unit_vehicle :
42610: GO 43434
42612: LD_INT 2
42614: DOUBLE
42615: EQUAL
42616: IFTRUE 42620
42618: GO 43422
42620: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42621: LD_VAR 0 6
42625: PPUSH
42626: CALL_OW 264
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: LD_INT 42
42636: PUSH
42637: LD_INT 24
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: LIST
42644: IN
42645: IFFALSE 42666
// points := [ 25 , 5 , 3 ] ;
42647: LD_ADDR_VAR 0 9
42651: PUSH
42652: LD_INT 25
42654: PUSH
42655: LD_INT 5
42657: PUSH
42658: LD_INT 3
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: LIST
42665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42666: LD_VAR 0 6
42670: PPUSH
42671: CALL_OW 264
42675: PUSH
42676: LD_INT 4
42678: PUSH
42679: LD_INT 43
42681: PUSH
42682: LD_INT 25
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: LIST
42689: IN
42690: IFFALSE 42711
// points := [ 40 , 15 , 5 ] ;
42692: LD_ADDR_VAR 0 9
42696: PUSH
42697: LD_INT 40
42699: PUSH
42700: LD_INT 15
42702: PUSH
42703: LD_INT 5
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: LIST
42710: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42711: LD_VAR 0 6
42715: PPUSH
42716: CALL_OW 264
42720: PUSH
42721: LD_INT 3
42723: PUSH
42724: LD_INT 23
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: IN
42731: IFFALSE 42752
// points := [ 7 , 25 , 8 ] ;
42733: LD_ADDR_VAR 0 9
42737: PUSH
42738: LD_INT 7
42740: PUSH
42741: LD_INT 25
42743: PUSH
42744: LD_INT 8
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: LIST
42751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42752: LD_VAR 0 6
42756: PPUSH
42757: CALL_OW 264
42761: PUSH
42762: LD_INT 5
42764: PUSH
42765: LD_INT 27
42767: PUSH
42768: LD_INT 44
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: LIST
42775: IN
42776: IFFALSE 42797
// points := [ 14 , 50 , 16 ] ;
42778: LD_ADDR_VAR 0 9
42782: PUSH
42783: LD_INT 14
42785: PUSH
42786: LD_INT 50
42788: PUSH
42789: LD_INT 16
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42797: LD_VAR 0 6
42801: PPUSH
42802: CALL_OW 264
42806: PUSH
42807: LD_INT 6
42809: PUSH
42810: LD_INT 46
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: IN
42817: IFFALSE 42838
// points := [ 32 , 120 , 70 ] ;
42819: LD_ADDR_VAR 0 9
42823: PUSH
42824: LD_INT 32
42826: PUSH
42827: LD_INT 120
42829: PUSH
42830: LD_INT 70
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: LIST
42837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
42838: LD_VAR 0 6
42842: PPUSH
42843: CALL_OW 264
42847: PUSH
42848: LD_INT 7
42850: PUSH
42851: LD_INT 28
42853: PUSH
42854: LD_INT 45
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: LIST
42861: IN
42862: IFFALSE 42883
// points := [ 35 , 20 , 45 ] ;
42864: LD_ADDR_VAR 0 9
42868: PUSH
42869: LD_INT 35
42871: PUSH
42872: LD_INT 20
42874: PUSH
42875: LD_INT 45
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: LIST
42882: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42883: LD_VAR 0 6
42887: PPUSH
42888: CALL_OW 264
42892: PUSH
42893: LD_INT 47
42895: PUSH
42896: EMPTY
42897: LIST
42898: IN
42899: IFFALSE 42920
// points := [ 67 , 45 , 75 ] ;
42901: LD_ADDR_VAR 0 9
42905: PUSH
42906: LD_INT 67
42908: PUSH
42909: LD_INT 45
42911: PUSH
42912: LD_INT 75
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42920: LD_VAR 0 6
42924: PPUSH
42925: CALL_OW 264
42929: PUSH
42930: LD_INT 26
42932: PUSH
42933: EMPTY
42934: LIST
42935: IN
42936: IFFALSE 42957
// points := [ 120 , 30 , 80 ] ;
42938: LD_ADDR_VAR 0 9
42942: PUSH
42943: LD_INT 120
42945: PUSH
42946: LD_INT 30
42948: PUSH
42949: LD_INT 80
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: LIST
42956: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42957: LD_VAR 0 6
42961: PPUSH
42962: CALL_OW 264
42966: PUSH
42967: LD_INT 22
42969: PUSH
42970: EMPTY
42971: LIST
42972: IN
42973: IFFALSE 42994
// points := [ 40 , 1 , 1 ] ;
42975: LD_ADDR_VAR 0 9
42979: PUSH
42980: LD_INT 40
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: LIST
42993: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42994: LD_VAR 0 6
42998: PPUSH
42999: CALL_OW 264
43003: PUSH
43004: LD_INT 29
43006: PUSH
43007: EMPTY
43008: LIST
43009: IN
43010: IFFALSE 43031
// points := [ 70 , 200 , 400 ] ;
43012: LD_ADDR_VAR 0 9
43016: PUSH
43017: LD_INT 70
43019: PUSH
43020: LD_INT 200
43022: PUSH
43023: LD_INT 400
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: LIST
43030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43031: LD_VAR 0 6
43035: PPUSH
43036: CALL_OW 264
43040: PUSH
43041: LD_INT 14
43043: PUSH
43044: LD_INT 53
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: IN
43051: IFFALSE 43072
// points := [ 40 , 10 , 20 ] ;
43053: LD_ADDR_VAR 0 9
43057: PUSH
43058: LD_INT 40
43060: PUSH
43061: LD_INT 10
43063: PUSH
43064: LD_INT 20
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43072: LD_VAR 0 6
43076: PPUSH
43077: CALL_OW 264
43081: PUSH
43082: LD_INT 9
43084: PUSH
43085: EMPTY
43086: LIST
43087: IN
43088: IFFALSE 43109
// points := [ 5 , 70 , 20 ] ;
43090: LD_ADDR_VAR 0 9
43094: PUSH
43095: LD_INT 5
43097: PUSH
43098: LD_INT 70
43100: PUSH
43101: LD_INT 20
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: LIST
43108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43109: LD_VAR 0 6
43113: PPUSH
43114: CALL_OW 264
43118: PUSH
43119: LD_INT 10
43121: PUSH
43122: EMPTY
43123: LIST
43124: IN
43125: IFFALSE 43146
// points := [ 35 , 110 , 70 ] ;
43127: LD_ADDR_VAR 0 9
43131: PUSH
43132: LD_INT 35
43134: PUSH
43135: LD_INT 110
43137: PUSH
43138: LD_INT 70
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: LIST
43145: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43146: LD_VAR 0 6
43150: PPUSH
43151: CALL_OW 265
43155: PUSH
43156: LD_INT 25
43158: EQUAL
43159: IFFALSE 43180
// points := [ 80 , 65 , 100 ] ;
43161: LD_ADDR_VAR 0 9
43165: PUSH
43166: LD_INT 80
43168: PUSH
43169: LD_INT 65
43171: PUSH
43172: LD_INT 100
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: LIST
43179: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43180: LD_VAR 0 6
43184: PPUSH
43185: CALL_OW 263
43189: PUSH
43190: LD_INT 1
43192: EQUAL
43193: IFFALSE 43228
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43195: LD_ADDR_VAR 0 10
43199: PUSH
43200: LD_VAR 0 10
43204: PUSH
43205: LD_VAR 0 6
43209: PPUSH
43210: CALL_OW 311
43214: PPUSH
43215: LD_INT 3
43217: PPUSH
43218: CALL_OW 259
43222: PUSH
43223: LD_INT 4
43225: MUL
43226: MUL
43227: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43228: LD_VAR 0 6
43232: PPUSH
43233: CALL_OW 263
43237: PUSH
43238: LD_INT 2
43240: EQUAL
43241: IFFALSE 43292
// begin j := IsControledBy ( i ) ;
43243: LD_ADDR_VAR 0 7
43247: PUSH
43248: LD_VAR 0 6
43252: PPUSH
43253: CALL_OW 312
43257: ST_TO_ADDR
// if j then
43258: LD_VAR 0 7
43262: IFFALSE 43292
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43264: LD_ADDR_VAR 0 10
43268: PUSH
43269: LD_VAR 0 10
43273: PUSH
43274: LD_VAR 0 7
43278: PPUSH
43279: LD_INT 3
43281: PPUSH
43282: CALL_OW 259
43286: PUSH
43287: LD_INT 3
43289: MUL
43290: MUL
43291: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43292: LD_VAR 0 6
43296: PPUSH
43297: CALL_OW 264
43301: PUSH
43302: LD_INT 5
43304: PUSH
43305: LD_INT 6
43307: PUSH
43308: LD_INT 46
43310: PUSH
43311: LD_INT 44
43313: PUSH
43314: LD_INT 47
43316: PUSH
43317: LD_INT 45
43319: PUSH
43320: LD_INT 28
43322: PUSH
43323: LD_INT 7
43325: PUSH
43326: LD_INT 27
43328: PUSH
43329: LD_INT 29
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: IN
43344: PUSH
43345: LD_VAR 0 1
43349: PPUSH
43350: LD_INT 52
43352: PPUSH
43353: CALL_OW 321
43357: PUSH
43358: LD_INT 2
43360: EQUAL
43361: AND
43362: IFFALSE 43379
// bpoints := bpoints * 1.2 ;
43364: LD_ADDR_VAR 0 10
43368: PUSH
43369: LD_VAR 0 10
43373: PUSH
43374: LD_REAL  1.20000000000000E+0000
43377: MUL
43378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43379: LD_VAR 0 6
43383: PPUSH
43384: CALL_OW 264
43388: PUSH
43389: LD_INT 6
43391: PUSH
43392: LD_INT 46
43394: PUSH
43395: LD_INT 47
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: LIST
43402: IN
43403: IFFALSE 43420
// bpoints := bpoints * 1.2 ;
43405: LD_ADDR_VAR 0 10
43409: PUSH
43410: LD_VAR 0 10
43414: PUSH
43415: LD_REAL  1.20000000000000E+0000
43418: MUL
43419: ST_TO_ADDR
// end ; unit_building :
43420: GO 43434
43422: LD_INT 3
43424: DOUBLE
43425: EQUAL
43426: IFTRUE 43430
43428: GO 43433
43430: POP
// ; end ;
43431: GO 43434
43433: POP
// for j = 1 to 3 do
43434: LD_ADDR_VAR 0 7
43438: PUSH
43439: DOUBLE
43440: LD_INT 1
43442: DEC
43443: ST_TO_ADDR
43444: LD_INT 3
43446: PUSH
43447: FOR_TO
43448: IFFALSE 43501
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43450: LD_ADDR_VAR 0 5
43454: PUSH
43455: LD_VAR 0 5
43459: PPUSH
43460: LD_VAR 0 7
43464: PPUSH
43465: LD_VAR 0 5
43469: PUSH
43470: LD_VAR 0 7
43474: ARRAY
43475: PUSH
43476: LD_VAR 0 9
43480: PUSH
43481: LD_VAR 0 7
43485: ARRAY
43486: PUSH
43487: LD_VAR 0 10
43491: MUL
43492: PLUS
43493: PPUSH
43494: CALL_OW 1
43498: ST_TO_ADDR
43499: GO 43447
43501: POP
43502: POP
// end ;
43503: GO 41986
43505: POP
43506: POP
// result := Replace ( result , 4 , tmp ) ;
43507: LD_ADDR_VAR 0 5
43511: PUSH
43512: LD_VAR 0 5
43516: PPUSH
43517: LD_INT 4
43519: PPUSH
43520: LD_VAR 0 8
43524: PPUSH
43525: CALL_OW 1
43529: ST_TO_ADDR
// end ;
43530: LD_VAR 0 5
43534: RET
// export function DangerAtRange ( unit , range ) ; begin
43535: LD_INT 0
43537: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43538: LD_ADDR_VAR 0 3
43542: PUSH
43543: LD_VAR 0 1
43547: PPUSH
43548: CALL_OW 255
43552: PPUSH
43553: LD_VAR 0 1
43557: PPUSH
43558: CALL_OW 250
43562: PPUSH
43563: LD_VAR 0 1
43567: PPUSH
43568: CALL_OW 251
43572: PPUSH
43573: LD_VAR 0 2
43577: PPUSH
43578: CALL 41838 0 4
43582: ST_TO_ADDR
// end ;
43583: LD_VAR 0 3
43587: RET
// export function DangerInArea ( side , area ) ; begin
43588: LD_INT 0
43590: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43591: LD_ADDR_VAR 0 3
43595: PUSH
43596: LD_VAR 0 2
43600: PPUSH
43601: LD_INT 81
43603: PUSH
43604: LD_VAR 0 1
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PPUSH
43613: CALL_OW 70
43617: ST_TO_ADDR
// end ;
43618: LD_VAR 0 3
43622: RET
// export function IsExtension ( b ) ; begin
43623: LD_INT 0
43625: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43626: LD_ADDR_VAR 0 2
43630: PUSH
43631: LD_VAR 0 1
43635: PUSH
43636: LD_INT 23
43638: PUSH
43639: LD_INT 20
43641: PUSH
43642: LD_INT 22
43644: PUSH
43645: LD_INT 17
43647: PUSH
43648: LD_INT 24
43650: PUSH
43651: LD_INT 21
43653: PUSH
43654: LD_INT 19
43656: PUSH
43657: LD_INT 16
43659: PUSH
43660: LD_INT 25
43662: PUSH
43663: LD_INT 18
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: IN
43678: ST_TO_ADDR
// end ;
43679: LD_VAR 0 2
43683: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
43684: LD_INT 0
43686: PPUSH
43687: PPUSH
43688: PPUSH
// result := [ ] ;
43689: LD_ADDR_VAR 0 3
43693: PUSH
43694: EMPTY
43695: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43696: LD_ADDR_VAR 0 4
43700: PUSH
43701: LD_VAR 0 2
43705: PPUSH
43706: LD_INT 21
43708: PUSH
43709: LD_INT 3
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PPUSH
43716: CALL_OW 70
43720: ST_TO_ADDR
// if not tmp then
43721: LD_VAR 0 4
43725: NOT
43726: IFFALSE 43730
// exit ;
43728: GO 43788
// for i in tmp do
43730: LD_ADDR_VAR 0 5
43734: PUSH
43735: LD_VAR 0 4
43739: PUSH
43740: FOR_IN
43741: IFFALSE 43776
// if GetBase ( i ) <> base then
43743: LD_VAR 0 5
43747: PPUSH
43748: CALL_OW 274
43752: PUSH
43753: LD_VAR 0 1
43757: NONEQUAL
43758: IFFALSE 43774
// ComLinkToBase ( base , i ) ;
43760: LD_VAR 0 1
43764: PPUSH
43765: LD_VAR 0 5
43769: PPUSH
43770: CALL_OW 169
43774: GO 43740
43776: POP
43777: POP
// result := tmp ;
43778: LD_ADDR_VAR 0 3
43782: PUSH
43783: LD_VAR 0 4
43787: ST_TO_ADDR
// end ;
43788: LD_VAR 0 3
43792: RET
// export function ComComplete ( unit , b ) ; var i ; begin
43793: LD_INT 0
43795: PPUSH
43796: PPUSH
// if BuildingStatus ( b ) = bs_build then
43797: LD_VAR 0 2
43801: PPUSH
43802: CALL_OW 461
43806: PUSH
43807: LD_INT 1
43809: EQUAL
43810: IFFALSE 43870
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43812: LD_VAR 0 1
43816: PPUSH
43817: LD_STRING h
43819: PUSH
43820: LD_VAR 0 2
43824: PPUSH
43825: CALL_OW 250
43829: PUSH
43830: LD_VAR 0 2
43834: PPUSH
43835: CALL_OW 251
43839: PUSH
43840: LD_VAR 0 2
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: PUSH
43863: EMPTY
43864: LIST
43865: PPUSH
43866: CALL_OW 446
// end ;
43870: LD_VAR 0 3
43874: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43875: LD_INT 0
43877: PPUSH
43878: PPUSH
43879: PPUSH
43880: PPUSH
43881: PPUSH
43882: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43883: LD_VAR 0 1
43887: NOT
43888: PUSH
43889: LD_VAR 0 1
43893: PPUSH
43894: CALL_OW 263
43898: PUSH
43899: LD_INT 2
43901: EQUAL
43902: NOT
43903: OR
43904: IFFALSE 43908
// exit ;
43906: GO 44224
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43908: LD_ADDR_VAR 0 6
43912: PUSH
43913: LD_INT 22
43915: PUSH
43916: LD_VAR 0 1
43920: PPUSH
43921: CALL_OW 255
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: LD_INT 30
43935: PUSH
43936: LD_INT 36
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 34
43945: PUSH
43946: LD_INT 31
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: LIST
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PPUSH
43962: CALL_OW 69
43966: ST_TO_ADDR
// if not tmp then
43967: LD_VAR 0 6
43971: NOT
43972: IFFALSE 43976
// exit ;
43974: GO 44224
// result := [ ] ;
43976: LD_ADDR_VAR 0 2
43980: PUSH
43981: EMPTY
43982: ST_TO_ADDR
// for i in tmp do
43983: LD_ADDR_VAR 0 3
43987: PUSH
43988: LD_VAR 0 6
43992: PUSH
43993: FOR_IN
43994: IFFALSE 44065
// begin t := UnitsInside ( i ) ;
43996: LD_ADDR_VAR 0 4
44000: PUSH
44001: LD_VAR 0 3
44005: PPUSH
44006: CALL_OW 313
44010: ST_TO_ADDR
// if t then
44011: LD_VAR 0 4
44015: IFFALSE 44063
// for j in t do
44017: LD_ADDR_VAR 0 7
44021: PUSH
44022: LD_VAR 0 4
44026: PUSH
44027: FOR_IN
44028: IFFALSE 44061
// result := Insert ( result , result + 1 , j ) ;
44030: LD_ADDR_VAR 0 2
44034: PUSH
44035: LD_VAR 0 2
44039: PPUSH
44040: LD_VAR 0 2
44044: PUSH
44045: LD_INT 1
44047: PLUS
44048: PPUSH
44049: LD_VAR 0 7
44053: PPUSH
44054: CALL_OW 2
44058: ST_TO_ADDR
44059: GO 44027
44061: POP
44062: POP
// end ;
44063: GO 43993
44065: POP
44066: POP
// if not result then
44067: LD_VAR 0 2
44071: NOT
44072: IFFALSE 44076
// exit ;
44074: GO 44224
// mech := result [ 1 ] ;
44076: LD_ADDR_VAR 0 5
44080: PUSH
44081: LD_VAR 0 2
44085: PUSH
44086: LD_INT 1
44088: ARRAY
44089: ST_TO_ADDR
// if result > 1 then
44090: LD_VAR 0 2
44094: PUSH
44095: LD_INT 1
44097: GREATER
44098: IFFALSE 44210
// for i = 2 to result do
44100: LD_ADDR_VAR 0 3
44104: PUSH
44105: DOUBLE
44106: LD_INT 2
44108: DEC
44109: ST_TO_ADDR
44110: LD_VAR 0 2
44114: PUSH
44115: FOR_TO
44116: IFFALSE 44208
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44118: LD_ADDR_VAR 0 4
44122: PUSH
44123: LD_VAR 0 2
44127: PUSH
44128: LD_VAR 0 3
44132: ARRAY
44133: PPUSH
44134: LD_INT 3
44136: PPUSH
44137: CALL_OW 259
44141: PUSH
44142: LD_VAR 0 2
44146: PUSH
44147: LD_VAR 0 3
44151: ARRAY
44152: PPUSH
44153: CALL_OW 432
44157: MINUS
44158: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44159: LD_VAR 0 4
44163: PUSH
44164: LD_VAR 0 5
44168: PPUSH
44169: LD_INT 3
44171: PPUSH
44172: CALL_OW 259
44176: PUSH
44177: LD_VAR 0 5
44181: PPUSH
44182: CALL_OW 432
44186: MINUS
44187: GREATEREQUAL
44188: IFFALSE 44206
// mech := result [ i ] ;
44190: LD_ADDR_VAR 0 5
44194: PUSH
44195: LD_VAR 0 2
44199: PUSH
44200: LD_VAR 0 3
44204: ARRAY
44205: ST_TO_ADDR
// end ;
44206: GO 44115
44208: POP
44209: POP
// ComLinkTo ( vehicle , mech ) ;
44210: LD_VAR 0 1
44214: PPUSH
44215: LD_VAR 0 5
44219: PPUSH
44220: CALL_OW 135
// end ;
44224: LD_VAR 0 2
44228: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44229: LD_INT 0
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
// result := [ ] ;
44244: LD_ADDR_VAR 0 7
44248: PUSH
44249: EMPTY
44250: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44251: LD_VAR 0 1
44255: PPUSH
44256: CALL_OW 266
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: IN
44271: NOT
44272: IFFALSE 44276
// exit ;
44274: GO 45907
// if name then
44276: LD_VAR 0 3
44280: IFFALSE 44296
// SetBName ( base_dep , name ) ;
44282: LD_VAR 0 1
44286: PPUSH
44287: LD_VAR 0 3
44291: PPUSH
44292: CALL_OW 500
// base := GetBase ( base_dep ) ;
44296: LD_ADDR_VAR 0 15
44300: PUSH
44301: LD_VAR 0 1
44305: PPUSH
44306: CALL_OW 274
44310: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44311: LD_ADDR_VAR 0 16
44315: PUSH
44316: LD_VAR 0 1
44320: PPUSH
44321: CALL_OW 255
44325: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44326: LD_ADDR_VAR 0 17
44330: PUSH
44331: LD_VAR 0 1
44335: PPUSH
44336: CALL_OW 248
44340: ST_TO_ADDR
// if sources then
44341: LD_VAR 0 5
44345: IFFALSE 44392
// for i = 1 to 3 do
44347: LD_ADDR_VAR 0 8
44351: PUSH
44352: DOUBLE
44353: LD_INT 1
44355: DEC
44356: ST_TO_ADDR
44357: LD_INT 3
44359: PUSH
44360: FOR_TO
44361: IFFALSE 44390
// AddResourceType ( base , i , sources [ i ] ) ;
44363: LD_VAR 0 15
44367: PPUSH
44368: LD_VAR 0 8
44372: PPUSH
44373: LD_VAR 0 5
44377: PUSH
44378: LD_VAR 0 8
44382: ARRAY
44383: PPUSH
44384: CALL_OW 276
44388: GO 44360
44390: POP
44391: POP
// buildings := GetBaseBuildings ( base , area ) ;
44392: LD_ADDR_VAR 0 18
44396: PUSH
44397: LD_VAR 0 15
44401: PPUSH
44402: LD_VAR 0 2
44406: PPUSH
44407: CALL 43684 0 2
44411: ST_TO_ADDR
// InitHc ;
44412: CALL_OW 19
// InitUc ;
44416: CALL_OW 18
// uc_side := side ;
44420: LD_ADDR_OWVAR 20
44424: PUSH
44425: LD_VAR 0 16
44429: ST_TO_ADDR
// uc_nation := nation ;
44430: LD_ADDR_OWVAR 21
44434: PUSH
44435: LD_VAR 0 17
44439: ST_TO_ADDR
// if buildings then
44440: LD_VAR 0 18
44444: IFFALSE 45766
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44446: LD_ADDR_VAR 0 19
44450: PUSH
44451: LD_VAR 0 18
44455: PPUSH
44456: LD_INT 2
44458: PUSH
44459: LD_INT 30
44461: PUSH
44462: LD_INT 29
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 30
44471: PUSH
44472: LD_INT 30
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: PPUSH
44484: CALL_OW 72
44488: ST_TO_ADDR
// if tmp then
44489: LD_VAR 0 19
44493: IFFALSE 44541
// for i in tmp do
44495: LD_ADDR_VAR 0 8
44499: PUSH
44500: LD_VAR 0 19
44504: PUSH
44505: FOR_IN
44506: IFFALSE 44539
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44508: LD_VAR 0 8
44512: PPUSH
44513: CALL_OW 250
44517: PPUSH
44518: LD_VAR 0 8
44522: PPUSH
44523: CALL_OW 251
44527: PPUSH
44528: LD_VAR 0 16
44532: PPUSH
44533: CALL_OW 441
44537: GO 44505
44539: POP
44540: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44541: LD_VAR 0 18
44545: PPUSH
44546: LD_INT 2
44548: PUSH
44549: LD_INT 30
44551: PUSH
44552: LD_INT 32
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 30
44561: PUSH
44562: LD_INT 33
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: LIST
44573: PPUSH
44574: CALL_OW 72
44578: IFFALSE 44666
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44580: LD_ADDR_VAR 0 8
44584: PUSH
44585: LD_VAR 0 18
44589: PPUSH
44590: LD_INT 2
44592: PUSH
44593: LD_INT 30
44595: PUSH
44596: LD_INT 32
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 30
44605: PUSH
44606: LD_INT 33
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: LIST
44617: PPUSH
44618: CALL_OW 72
44622: PUSH
44623: FOR_IN
44624: IFFALSE 44664
// begin if not GetBWeapon ( i ) then
44626: LD_VAR 0 8
44630: PPUSH
44631: CALL_OW 269
44635: NOT
44636: IFFALSE 44662
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44638: LD_VAR 0 8
44642: PPUSH
44643: LD_VAR 0 8
44647: PPUSH
44648: LD_VAR 0 2
44652: PPUSH
44653: CALL 45912 0 2
44657: PPUSH
44658: CALL_OW 431
// end ;
44662: GO 44623
44664: POP
44665: POP
// end ; for i = 1 to personel do
44666: LD_ADDR_VAR 0 8
44670: PUSH
44671: DOUBLE
44672: LD_INT 1
44674: DEC
44675: ST_TO_ADDR
44676: LD_VAR 0 6
44680: PUSH
44681: FOR_TO
44682: IFFALSE 45746
// begin if i > 4 then
44684: LD_VAR 0 8
44688: PUSH
44689: LD_INT 4
44691: GREATER
44692: IFFALSE 44696
// break ;
44694: GO 45746
// case i of 1 :
44696: LD_VAR 0 8
44700: PUSH
44701: LD_INT 1
44703: DOUBLE
44704: EQUAL
44705: IFTRUE 44709
44707: GO 44789
44709: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44710: LD_ADDR_VAR 0 12
44714: PUSH
44715: LD_VAR 0 18
44719: PPUSH
44720: LD_INT 22
44722: PUSH
44723: LD_VAR 0 16
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 58
44734: PUSH
44735: EMPTY
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: LD_INT 30
44743: PUSH
44744: LD_INT 32
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 30
44753: PUSH
44754: LD_INT 4
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 30
44763: PUSH
44764: LD_INT 5
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: LIST
44781: PPUSH
44782: CALL_OW 72
44786: ST_TO_ADDR
44787: GO 45011
44789: LD_INT 2
44791: DOUBLE
44792: EQUAL
44793: IFTRUE 44797
44795: GO 44859
44797: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44798: LD_ADDR_VAR 0 12
44802: PUSH
44803: LD_VAR 0 18
44807: PPUSH
44808: LD_INT 22
44810: PUSH
44811: LD_VAR 0 16
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: LD_INT 30
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 30
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: LIST
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PPUSH
44852: CALL_OW 72
44856: ST_TO_ADDR
44857: GO 45011
44859: LD_INT 3
44861: DOUBLE
44862: EQUAL
44863: IFTRUE 44867
44865: GO 44929
44867: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44868: LD_ADDR_VAR 0 12
44872: PUSH
44873: LD_VAR 0 18
44877: PPUSH
44878: LD_INT 22
44880: PUSH
44881: LD_VAR 0 16
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: LD_INT 30
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 30
44905: PUSH
44906: LD_INT 3
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: LIST
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PPUSH
44922: CALL_OW 72
44926: ST_TO_ADDR
44927: GO 45011
44929: LD_INT 4
44931: DOUBLE
44932: EQUAL
44933: IFTRUE 44937
44935: GO 45010
44937: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44938: LD_ADDR_VAR 0 12
44942: PUSH
44943: LD_VAR 0 18
44947: PPUSH
44948: LD_INT 22
44950: PUSH
44951: LD_VAR 0 16
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: LD_INT 30
44965: PUSH
44966: LD_INT 6
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 30
44975: PUSH
44976: LD_INT 7
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 30
44985: PUSH
44986: LD_INT 8
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PPUSH
45003: CALL_OW 72
45007: ST_TO_ADDR
45008: GO 45011
45010: POP
// if i = 1 then
45011: LD_VAR 0 8
45015: PUSH
45016: LD_INT 1
45018: EQUAL
45019: IFFALSE 45130
// begin tmp := [ ] ;
45021: LD_ADDR_VAR 0 19
45025: PUSH
45026: EMPTY
45027: ST_TO_ADDR
// for j in f do
45028: LD_ADDR_VAR 0 9
45032: PUSH
45033: LD_VAR 0 12
45037: PUSH
45038: FOR_IN
45039: IFFALSE 45112
// if GetBType ( j ) = b_bunker then
45041: LD_VAR 0 9
45045: PPUSH
45046: CALL_OW 266
45050: PUSH
45051: LD_INT 32
45053: EQUAL
45054: IFFALSE 45081
// tmp := Insert ( tmp , 1 , j ) else
45056: LD_ADDR_VAR 0 19
45060: PUSH
45061: LD_VAR 0 19
45065: PPUSH
45066: LD_INT 1
45068: PPUSH
45069: LD_VAR 0 9
45073: PPUSH
45074: CALL_OW 2
45078: ST_TO_ADDR
45079: GO 45110
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45081: LD_ADDR_VAR 0 19
45085: PUSH
45086: LD_VAR 0 19
45090: PPUSH
45091: LD_VAR 0 19
45095: PUSH
45096: LD_INT 1
45098: PLUS
45099: PPUSH
45100: LD_VAR 0 9
45104: PPUSH
45105: CALL_OW 2
45109: ST_TO_ADDR
45110: GO 45038
45112: POP
45113: POP
// if tmp then
45114: LD_VAR 0 19
45118: IFFALSE 45130
// f := tmp ;
45120: LD_ADDR_VAR 0 12
45124: PUSH
45125: LD_VAR 0 19
45129: ST_TO_ADDR
// end ; x := personel [ i ] ;
45130: LD_ADDR_VAR 0 13
45134: PUSH
45135: LD_VAR 0 6
45139: PUSH
45140: LD_VAR 0 8
45144: ARRAY
45145: ST_TO_ADDR
// if x = - 1 then
45146: LD_VAR 0 13
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: EQUAL
45155: IFFALSE 45364
// begin for j in f do
45157: LD_ADDR_VAR 0 9
45161: PUSH
45162: LD_VAR 0 12
45166: PUSH
45167: FOR_IN
45168: IFFALSE 45360
// repeat InitHc ;
45170: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45174: LD_VAR 0 9
45178: PPUSH
45179: CALL_OW 266
45183: PUSH
45184: LD_INT 5
45186: EQUAL
45187: IFFALSE 45257
// begin if UnitsInside ( j ) < 3 then
45189: LD_VAR 0 9
45193: PPUSH
45194: CALL_OW 313
45198: PUSH
45199: LD_INT 3
45201: LESS
45202: IFFALSE 45238
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45204: LD_INT 0
45206: PPUSH
45207: LD_INT 5
45209: PUSH
45210: LD_INT 8
45212: PUSH
45213: LD_INT 9
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: LIST
45220: PUSH
45221: LD_VAR 0 17
45225: ARRAY
45226: PPUSH
45227: LD_VAR 0 4
45231: PPUSH
45232: CALL_OW 380
45236: GO 45255
// PrepareHuman ( false , i , skill ) ;
45238: LD_INT 0
45240: PPUSH
45241: LD_VAR 0 8
45245: PPUSH
45246: LD_VAR 0 4
45250: PPUSH
45251: CALL_OW 380
// end else
45255: GO 45274
// PrepareHuman ( false , i , skill ) ;
45257: LD_INT 0
45259: PPUSH
45260: LD_VAR 0 8
45264: PPUSH
45265: LD_VAR 0 4
45269: PPUSH
45270: CALL_OW 380
// un := CreateHuman ;
45274: LD_ADDR_VAR 0 14
45278: PUSH
45279: CALL_OW 44
45283: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45284: LD_ADDR_VAR 0 7
45288: PUSH
45289: LD_VAR 0 7
45293: PPUSH
45294: LD_INT 1
45296: PPUSH
45297: LD_VAR 0 14
45301: PPUSH
45302: CALL_OW 2
45306: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45307: LD_VAR 0 14
45311: PPUSH
45312: LD_VAR 0 9
45316: PPUSH
45317: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45321: LD_VAR 0 9
45325: PPUSH
45326: CALL_OW 313
45330: PUSH
45331: LD_INT 6
45333: EQUAL
45334: PUSH
45335: LD_VAR 0 9
45339: PPUSH
45340: CALL_OW 266
45344: PUSH
45345: LD_INT 32
45347: PUSH
45348: LD_INT 31
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: IN
45355: OR
45356: IFFALSE 45170
45358: GO 45167
45360: POP
45361: POP
// end else
45362: GO 45744
// for j = 1 to x do
45364: LD_ADDR_VAR 0 9
45368: PUSH
45369: DOUBLE
45370: LD_INT 1
45372: DEC
45373: ST_TO_ADDR
45374: LD_VAR 0 13
45378: PUSH
45379: FOR_TO
45380: IFFALSE 45742
// begin InitHc ;
45382: CALL_OW 19
// if not f then
45386: LD_VAR 0 12
45390: NOT
45391: IFFALSE 45480
// begin PrepareHuman ( false , i , skill ) ;
45393: LD_INT 0
45395: PPUSH
45396: LD_VAR 0 8
45400: PPUSH
45401: LD_VAR 0 4
45405: PPUSH
45406: CALL_OW 380
// un := CreateHuman ;
45410: LD_ADDR_VAR 0 14
45414: PUSH
45415: CALL_OW 44
45419: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45420: LD_ADDR_VAR 0 7
45424: PUSH
45425: LD_VAR 0 7
45429: PPUSH
45430: LD_INT 1
45432: PPUSH
45433: LD_VAR 0 14
45437: PPUSH
45438: CALL_OW 2
45442: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45443: LD_VAR 0 14
45447: PPUSH
45448: LD_VAR 0 1
45452: PPUSH
45453: CALL_OW 250
45457: PPUSH
45458: LD_VAR 0 1
45462: PPUSH
45463: CALL_OW 251
45467: PPUSH
45468: LD_INT 10
45470: PPUSH
45471: LD_INT 0
45473: PPUSH
45474: CALL_OW 50
// continue ;
45478: GO 45379
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45480: LD_VAR 0 12
45484: PUSH
45485: LD_INT 1
45487: ARRAY
45488: PPUSH
45489: CALL_OW 313
45493: PUSH
45494: LD_VAR 0 12
45498: PUSH
45499: LD_INT 1
45501: ARRAY
45502: PPUSH
45503: CALL_OW 266
45507: PUSH
45508: LD_INT 32
45510: PUSH
45511: LD_INT 31
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: IN
45518: AND
45519: PUSH
45520: LD_VAR 0 12
45524: PUSH
45525: LD_INT 1
45527: ARRAY
45528: PPUSH
45529: CALL_OW 313
45533: PUSH
45534: LD_INT 6
45536: EQUAL
45537: OR
45538: IFFALSE 45558
// f := Delete ( f , 1 ) ;
45540: LD_ADDR_VAR 0 12
45544: PUSH
45545: LD_VAR 0 12
45549: PPUSH
45550: LD_INT 1
45552: PPUSH
45553: CALL_OW 3
45557: ST_TO_ADDR
// if not f then
45558: LD_VAR 0 12
45562: NOT
45563: IFFALSE 45581
// begin x := x + 2 ;
45565: LD_ADDR_VAR 0 13
45569: PUSH
45570: LD_VAR 0 13
45574: PUSH
45575: LD_INT 2
45577: PLUS
45578: ST_TO_ADDR
// continue ;
45579: GO 45379
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45581: LD_VAR 0 12
45585: PUSH
45586: LD_INT 1
45588: ARRAY
45589: PPUSH
45590: CALL_OW 266
45594: PUSH
45595: LD_INT 5
45597: EQUAL
45598: IFFALSE 45672
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45600: LD_VAR 0 12
45604: PUSH
45605: LD_INT 1
45607: ARRAY
45608: PPUSH
45609: CALL_OW 313
45613: PUSH
45614: LD_INT 3
45616: LESS
45617: IFFALSE 45653
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45619: LD_INT 0
45621: PPUSH
45622: LD_INT 5
45624: PUSH
45625: LD_INT 8
45627: PUSH
45628: LD_INT 9
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: PUSH
45636: LD_VAR 0 17
45640: ARRAY
45641: PPUSH
45642: LD_VAR 0 4
45646: PPUSH
45647: CALL_OW 380
45651: GO 45670
// PrepareHuman ( false , i , skill ) ;
45653: LD_INT 0
45655: PPUSH
45656: LD_VAR 0 8
45660: PPUSH
45661: LD_VAR 0 4
45665: PPUSH
45666: CALL_OW 380
// end else
45670: GO 45689
// PrepareHuman ( false , i , skill ) ;
45672: LD_INT 0
45674: PPUSH
45675: LD_VAR 0 8
45679: PPUSH
45680: LD_VAR 0 4
45684: PPUSH
45685: CALL_OW 380
// un := CreateHuman ;
45689: LD_ADDR_VAR 0 14
45693: PUSH
45694: CALL_OW 44
45698: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45699: LD_ADDR_VAR 0 7
45703: PUSH
45704: LD_VAR 0 7
45708: PPUSH
45709: LD_INT 1
45711: PPUSH
45712: LD_VAR 0 14
45716: PPUSH
45717: CALL_OW 2
45721: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45722: LD_VAR 0 14
45726: PPUSH
45727: LD_VAR 0 12
45731: PUSH
45732: LD_INT 1
45734: ARRAY
45735: PPUSH
45736: CALL_OW 52
// end ;
45740: GO 45379
45742: POP
45743: POP
// end ;
45744: GO 44681
45746: POP
45747: POP
// result := result ^ buildings ;
45748: LD_ADDR_VAR 0 7
45752: PUSH
45753: LD_VAR 0 7
45757: PUSH
45758: LD_VAR 0 18
45762: ADD
45763: ST_TO_ADDR
// end else
45764: GO 45907
// begin for i = 1 to personel do
45766: LD_ADDR_VAR 0 8
45770: PUSH
45771: DOUBLE
45772: LD_INT 1
45774: DEC
45775: ST_TO_ADDR
45776: LD_VAR 0 6
45780: PUSH
45781: FOR_TO
45782: IFFALSE 45905
// begin if i > 4 then
45784: LD_VAR 0 8
45788: PUSH
45789: LD_INT 4
45791: GREATER
45792: IFFALSE 45796
// break ;
45794: GO 45905
// x := personel [ i ] ;
45796: LD_ADDR_VAR 0 13
45800: PUSH
45801: LD_VAR 0 6
45805: PUSH
45806: LD_VAR 0 8
45810: ARRAY
45811: ST_TO_ADDR
// if x = - 1 then
45812: LD_VAR 0 13
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: EQUAL
45821: IFFALSE 45825
// continue ;
45823: GO 45781
// PrepareHuman ( false , i , skill ) ;
45825: LD_INT 0
45827: PPUSH
45828: LD_VAR 0 8
45832: PPUSH
45833: LD_VAR 0 4
45837: PPUSH
45838: CALL_OW 380
// un := CreateHuman ;
45842: LD_ADDR_VAR 0 14
45846: PUSH
45847: CALL_OW 44
45851: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45852: LD_VAR 0 14
45856: PPUSH
45857: LD_VAR 0 1
45861: PPUSH
45862: CALL_OW 250
45866: PPUSH
45867: LD_VAR 0 1
45871: PPUSH
45872: CALL_OW 251
45876: PPUSH
45877: LD_INT 10
45879: PPUSH
45880: LD_INT 0
45882: PPUSH
45883: CALL_OW 50
// result := result ^ un ;
45887: LD_ADDR_VAR 0 7
45891: PUSH
45892: LD_VAR 0 7
45896: PUSH
45897: LD_VAR 0 14
45901: ADD
45902: ST_TO_ADDR
// end ;
45903: GO 45781
45905: POP
45906: POP
// end ; end ;
45907: LD_VAR 0 7
45911: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45912: LD_INT 0
45914: PPUSH
45915: PPUSH
45916: PPUSH
45917: PPUSH
45918: PPUSH
45919: PPUSH
45920: PPUSH
45921: PPUSH
45922: PPUSH
45923: PPUSH
45924: PPUSH
45925: PPUSH
45926: PPUSH
45927: PPUSH
45928: PPUSH
45929: PPUSH
// result := false ;
45930: LD_ADDR_VAR 0 3
45934: PUSH
45935: LD_INT 0
45937: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45938: LD_VAR 0 1
45942: NOT
45943: PUSH
45944: LD_VAR 0 1
45948: PPUSH
45949: CALL_OW 266
45953: PUSH
45954: LD_INT 32
45956: PUSH
45957: LD_INT 33
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: IN
45964: NOT
45965: OR
45966: IFFALSE 45970
// exit ;
45968: GO 47106
// nat := GetNation ( tower ) ;
45970: LD_ADDR_VAR 0 12
45974: PUSH
45975: LD_VAR 0 1
45979: PPUSH
45980: CALL_OW 248
45984: ST_TO_ADDR
// side := GetSide ( tower ) ;
45985: LD_ADDR_VAR 0 16
45989: PUSH
45990: LD_VAR 0 1
45994: PPUSH
45995: CALL_OW 255
45999: ST_TO_ADDR
// x := GetX ( tower ) ;
46000: LD_ADDR_VAR 0 10
46004: PUSH
46005: LD_VAR 0 1
46009: PPUSH
46010: CALL_OW 250
46014: ST_TO_ADDR
// y := GetY ( tower ) ;
46015: LD_ADDR_VAR 0 11
46019: PUSH
46020: LD_VAR 0 1
46024: PPUSH
46025: CALL_OW 251
46029: ST_TO_ADDR
// if not x or not y then
46030: LD_VAR 0 10
46034: NOT
46035: PUSH
46036: LD_VAR 0 11
46040: NOT
46041: OR
46042: IFFALSE 46046
// exit ;
46044: GO 47106
// weapon := 0 ;
46046: LD_ADDR_VAR 0 18
46050: PUSH
46051: LD_INT 0
46053: ST_TO_ADDR
// fac_list := [ ] ;
46054: LD_ADDR_VAR 0 17
46058: PUSH
46059: EMPTY
46060: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
46061: LD_ADDR_VAR 0 6
46065: PUSH
46066: LD_VAR 0 1
46070: PPUSH
46071: CALL_OW 274
46075: PPUSH
46076: LD_VAR 0 2
46080: PPUSH
46081: CALL 43684 0 2
46085: PPUSH
46086: LD_INT 30
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PPUSH
46096: CALL_OW 72
46100: ST_TO_ADDR
// if not factories then
46101: LD_VAR 0 6
46105: NOT
46106: IFFALSE 46110
// exit ;
46108: GO 47106
// for i in factories do
46110: LD_ADDR_VAR 0 8
46114: PUSH
46115: LD_VAR 0 6
46119: PUSH
46120: FOR_IN
46121: IFFALSE 46146
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46123: LD_ADDR_VAR 0 17
46127: PUSH
46128: LD_VAR 0 17
46132: PUSH
46133: LD_VAR 0 8
46137: PPUSH
46138: CALL_OW 478
46142: UNION
46143: ST_TO_ADDR
46144: GO 46120
46146: POP
46147: POP
// if not fac_list then
46148: LD_VAR 0 17
46152: NOT
46153: IFFALSE 46157
// exit ;
46155: GO 47106
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46157: LD_ADDR_VAR 0 5
46161: PUSH
46162: LD_INT 4
46164: PUSH
46165: LD_INT 5
46167: PUSH
46168: LD_INT 9
46170: PUSH
46171: LD_INT 10
46173: PUSH
46174: LD_INT 6
46176: PUSH
46177: LD_INT 7
46179: PUSH
46180: LD_INT 11
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 27
46194: PUSH
46195: LD_INT 28
46197: PUSH
46198: LD_INT 26
46200: PUSH
46201: LD_INT 30
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 43
46212: PUSH
46213: LD_INT 44
46215: PUSH
46216: LD_INT 46
46218: PUSH
46219: LD_INT 45
46221: PUSH
46222: LD_INT 47
46224: PUSH
46225: LD_INT 49
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: PUSH
46241: LD_VAR 0 12
46245: ARRAY
46246: ST_TO_ADDR
// for i in list do
46247: LD_ADDR_VAR 0 8
46251: PUSH
46252: LD_VAR 0 5
46256: PUSH
46257: FOR_IN
46258: IFFALSE 46291
// if not i in fac_list then
46260: LD_VAR 0 8
46264: PUSH
46265: LD_VAR 0 17
46269: IN
46270: NOT
46271: IFFALSE 46289
// list := list diff i ;
46273: LD_ADDR_VAR 0 5
46277: PUSH
46278: LD_VAR 0 5
46282: PUSH
46283: LD_VAR 0 8
46287: DIFF
46288: ST_TO_ADDR
46289: GO 46257
46291: POP
46292: POP
// if not list then
46293: LD_VAR 0 5
46297: NOT
46298: IFFALSE 46302
// exit ;
46300: GO 47106
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46302: LD_VAR 0 12
46306: PUSH
46307: LD_INT 3
46309: EQUAL
46310: PUSH
46311: LD_INT 49
46313: PUSH
46314: LD_VAR 0 5
46318: IN
46319: AND
46320: PUSH
46321: LD_INT 31
46323: PPUSH
46324: LD_VAR 0 16
46328: PPUSH
46329: CALL_OW 321
46333: PUSH
46334: LD_INT 2
46336: EQUAL
46337: AND
46338: IFFALSE 46398
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46340: LD_INT 22
46342: PUSH
46343: LD_VAR 0 16
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 35
46354: PUSH
46355: LD_INT 49
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 91
46364: PUSH
46365: LD_VAR 0 1
46369: PUSH
46370: LD_INT 10
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: LIST
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: LIST
46382: PPUSH
46383: CALL_OW 69
46387: NOT
46388: IFFALSE 46398
// weapon := ru_time_lapser ;
46390: LD_ADDR_VAR 0 18
46394: PUSH
46395: LD_INT 49
46397: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46398: LD_VAR 0 12
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: IN
46413: PUSH
46414: LD_INT 11
46416: PUSH
46417: LD_VAR 0 5
46421: IN
46422: PUSH
46423: LD_INT 30
46425: PUSH
46426: LD_VAR 0 5
46430: IN
46431: OR
46432: AND
46433: PUSH
46434: LD_INT 6
46436: PPUSH
46437: LD_VAR 0 16
46441: PPUSH
46442: CALL_OW 321
46446: PUSH
46447: LD_INT 2
46449: EQUAL
46450: AND
46451: IFFALSE 46616
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46453: LD_INT 22
46455: PUSH
46456: LD_VAR 0 16
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: LD_INT 35
46470: PUSH
46471: LD_INT 11
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 35
46480: PUSH
46481: LD_INT 30
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 91
46495: PUSH
46496: LD_VAR 0 1
46500: PUSH
46501: LD_INT 18
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: LIST
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: PPUSH
46514: CALL_OW 69
46518: NOT
46519: PUSH
46520: LD_INT 22
46522: PUSH
46523: LD_VAR 0 16
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: LD_INT 30
46537: PUSH
46538: LD_INT 32
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 30
46547: PUSH
46548: LD_INT 33
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 91
46562: PUSH
46563: LD_VAR 0 1
46567: PUSH
46568: LD_INT 12
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: LIST
46580: PUSH
46581: EMPTY
46582: LIST
46583: PPUSH
46584: CALL_OW 69
46588: PUSH
46589: LD_INT 2
46591: GREATER
46592: AND
46593: IFFALSE 46616
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46595: LD_ADDR_VAR 0 18
46599: PUSH
46600: LD_INT 11
46602: PUSH
46603: LD_INT 30
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_VAR 0 12
46614: ARRAY
46615: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46616: LD_VAR 0 18
46620: NOT
46621: PUSH
46622: LD_INT 40
46624: PPUSH
46625: LD_VAR 0 16
46629: PPUSH
46630: CALL_OW 321
46634: PUSH
46635: LD_INT 2
46637: EQUAL
46638: AND
46639: PUSH
46640: LD_INT 7
46642: PUSH
46643: LD_VAR 0 5
46647: IN
46648: PUSH
46649: LD_INT 28
46651: PUSH
46652: LD_VAR 0 5
46656: IN
46657: OR
46658: PUSH
46659: LD_INT 45
46661: PUSH
46662: LD_VAR 0 5
46666: IN
46667: OR
46668: AND
46669: IFFALSE 46923
// begin hex := GetHexInfo ( x , y ) ;
46671: LD_ADDR_VAR 0 4
46675: PUSH
46676: LD_VAR 0 10
46680: PPUSH
46681: LD_VAR 0 11
46685: PPUSH
46686: CALL_OW 546
46690: ST_TO_ADDR
// if hex [ 1 ] then
46691: LD_VAR 0 4
46695: PUSH
46696: LD_INT 1
46698: ARRAY
46699: IFFALSE 46703
// exit ;
46701: GO 47106
// height := hex [ 2 ] ;
46703: LD_ADDR_VAR 0 15
46707: PUSH
46708: LD_VAR 0 4
46712: PUSH
46713: LD_INT 2
46715: ARRAY
46716: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46717: LD_ADDR_VAR 0 14
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: LD_INT 3
46730: PUSH
46731: LD_INT 5
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: ST_TO_ADDR
// for i in tmp do
46740: LD_ADDR_VAR 0 8
46744: PUSH
46745: LD_VAR 0 14
46749: PUSH
46750: FOR_IN
46751: IFFALSE 46921
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46753: LD_ADDR_VAR 0 9
46757: PUSH
46758: LD_VAR 0 10
46762: PPUSH
46763: LD_VAR 0 8
46767: PPUSH
46768: LD_INT 5
46770: PPUSH
46771: CALL_OW 272
46775: PUSH
46776: LD_VAR 0 11
46780: PPUSH
46781: LD_VAR 0 8
46785: PPUSH
46786: LD_INT 5
46788: PPUSH
46789: CALL_OW 273
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46798: LD_VAR 0 9
46802: PUSH
46803: LD_INT 1
46805: ARRAY
46806: PPUSH
46807: LD_VAR 0 9
46811: PUSH
46812: LD_INT 2
46814: ARRAY
46815: PPUSH
46816: CALL_OW 488
46820: IFFALSE 46919
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46822: LD_ADDR_VAR 0 4
46826: PUSH
46827: LD_VAR 0 9
46831: PUSH
46832: LD_INT 1
46834: ARRAY
46835: PPUSH
46836: LD_VAR 0 9
46840: PUSH
46841: LD_INT 2
46843: ARRAY
46844: PPUSH
46845: CALL_OW 546
46849: ST_TO_ADDR
// if hex [ 1 ] then
46850: LD_VAR 0 4
46854: PUSH
46855: LD_INT 1
46857: ARRAY
46858: IFFALSE 46862
// continue ;
46860: GO 46750
// h := hex [ 2 ] ;
46862: LD_ADDR_VAR 0 13
46866: PUSH
46867: LD_VAR 0 4
46871: PUSH
46872: LD_INT 2
46874: ARRAY
46875: ST_TO_ADDR
// if h + 7 < height then
46876: LD_VAR 0 13
46880: PUSH
46881: LD_INT 7
46883: PLUS
46884: PUSH
46885: LD_VAR 0 15
46889: LESS
46890: IFFALSE 46919
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46892: LD_ADDR_VAR 0 18
46896: PUSH
46897: LD_INT 7
46899: PUSH
46900: LD_INT 28
46902: PUSH
46903: LD_INT 45
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: LIST
46910: PUSH
46911: LD_VAR 0 12
46915: ARRAY
46916: ST_TO_ADDR
// break ;
46917: GO 46921
// end ; end ; end ;
46919: GO 46750
46921: POP
46922: POP
// end ; if not weapon then
46923: LD_VAR 0 18
46927: NOT
46928: IFFALSE 46988
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46930: LD_ADDR_VAR 0 5
46934: PUSH
46935: LD_VAR 0 5
46939: PUSH
46940: LD_INT 11
46942: PUSH
46943: LD_INT 30
46945: PUSH
46946: LD_INT 49
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: LIST
46953: DIFF
46954: ST_TO_ADDR
// if not list then
46955: LD_VAR 0 5
46959: NOT
46960: IFFALSE 46964
// exit ;
46962: GO 47106
// weapon := list [ rand ( 1 , list ) ] ;
46964: LD_ADDR_VAR 0 18
46968: PUSH
46969: LD_VAR 0 5
46973: PUSH
46974: LD_INT 1
46976: PPUSH
46977: LD_VAR 0 5
46981: PPUSH
46982: CALL_OW 12
46986: ARRAY
46987: ST_TO_ADDR
// end ; if weapon then
46988: LD_VAR 0 18
46992: IFFALSE 47106
// begin tmp := CostOfWeapon ( weapon ) ;
46994: LD_ADDR_VAR 0 14
46998: PUSH
46999: LD_VAR 0 18
47003: PPUSH
47004: CALL_OW 451
47008: ST_TO_ADDR
// j := GetBase ( tower ) ;
47009: LD_ADDR_VAR 0 9
47013: PUSH
47014: LD_VAR 0 1
47018: PPUSH
47019: CALL_OW 274
47023: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47024: LD_VAR 0 9
47028: PPUSH
47029: LD_INT 1
47031: PPUSH
47032: CALL_OW 275
47036: PUSH
47037: LD_VAR 0 14
47041: PUSH
47042: LD_INT 1
47044: ARRAY
47045: GREATEREQUAL
47046: PUSH
47047: LD_VAR 0 9
47051: PPUSH
47052: LD_INT 2
47054: PPUSH
47055: CALL_OW 275
47059: PUSH
47060: LD_VAR 0 14
47064: PUSH
47065: LD_INT 2
47067: ARRAY
47068: GREATEREQUAL
47069: AND
47070: PUSH
47071: LD_VAR 0 9
47075: PPUSH
47076: LD_INT 3
47078: PPUSH
47079: CALL_OW 275
47083: PUSH
47084: LD_VAR 0 14
47088: PUSH
47089: LD_INT 3
47091: ARRAY
47092: GREATEREQUAL
47093: AND
47094: IFFALSE 47106
// result := weapon ;
47096: LD_ADDR_VAR 0 3
47100: PUSH
47101: LD_VAR 0 18
47105: ST_TO_ADDR
// end ; end ;
47106: LD_VAR 0 3
47110: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47111: LD_INT 0
47113: PPUSH
47114: PPUSH
// result := true ;
47115: LD_ADDR_VAR 0 3
47119: PUSH
47120: LD_INT 1
47122: ST_TO_ADDR
// if array1 = array2 then
47123: LD_VAR 0 1
47127: PUSH
47128: LD_VAR 0 2
47132: EQUAL
47133: IFFALSE 47193
// begin for i = 1 to array1 do
47135: LD_ADDR_VAR 0 4
47139: PUSH
47140: DOUBLE
47141: LD_INT 1
47143: DEC
47144: ST_TO_ADDR
47145: LD_VAR 0 1
47149: PUSH
47150: FOR_TO
47151: IFFALSE 47189
// if array1 [ i ] <> array2 [ i ] then
47153: LD_VAR 0 1
47157: PUSH
47158: LD_VAR 0 4
47162: ARRAY
47163: PUSH
47164: LD_VAR 0 2
47168: PUSH
47169: LD_VAR 0 4
47173: ARRAY
47174: NONEQUAL
47175: IFFALSE 47187
// begin result := false ;
47177: LD_ADDR_VAR 0 3
47181: PUSH
47182: LD_INT 0
47184: ST_TO_ADDR
// break ;
47185: GO 47189
// end ;
47187: GO 47150
47189: POP
47190: POP
// end else
47191: GO 47201
// result := false ;
47193: LD_ADDR_VAR 0 3
47197: PUSH
47198: LD_INT 0
47200: ST_TO_ADDR
// end ;
47201: LD_VAR 0 3
47205: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47206: LD_INT 0
47208: PPUSH
47209: PPUSH
47210: PPUSH
// pom := GetBase ( fac ) ;
47211: LD_ADDR_VAR 0 5
47215: PUSH
47216: LD_VAR 0 1
47220: PPUSH
47221: CALL_OW 274
47225: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47226: LD_ADDR_VAR 0 4
47230: PUSH
47231: LD_VAR 0 2
47235: PUSH
47236: LD_INT 1
47238: ARRAY
47239: PPUSH
47240: LD_VAR 0 2
47244: PUSH
47245: LD_INT 2
47247: ARRAY
47248: PPUSH
47249: LD_VAR 0 2
47253: PUSH
47254: LD_INT 3
47256: ARRAY
47257: PPUSH
47258: LD_VAR 0 2
47262: PUSH
47263: LD_INT 4
47265: ARRAY
47266: PPUSH
47267: CALL_OW 449
47271: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47272: LD_ADDR_VAR 0 3
47276: PUSH
47277: LD_VAR 0 5
47281: PPUSH
47282: LD_INT 1
47284: PPUSH
47285: CALL_OW 275
47289: PUSH
47290: LD_VAR 0 4
47294: PUSH
47295: LD_INT 1
47297: ARRAY
47298: GREATEREQUAL
47299: PUSH
47300: LD_VAR 0 5
47304: PPUSH
47305: LD_INT 2
47307: PPUSH
47308: CALL_OW 275
47312: PUSH
47313: LD_VAR 0 4
47317: PUSH
47318: LD_INT 2
47320: ARRAY
47321: GREATEREQUAL
47322: AND
47323: PUSH
47324: LD_VAR 0 5
47328: PPUSH
47329: LD_INT 3
47331: PPUSH
47332: CALL_OW 275
47336: PUSH
47337: LD_VAR 0 4
47341: PUSH
47342: LD_INT 3
47344: ARRAY
47345: GREATEREQUAL
47346: AND
47347: ST_TO_ADDR
// end ;
47348: LD_VAR 0 3
47352: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47353: LD_INT 0
47355: PPUSH
47356: PPUSH
47357: PPUSH
47358: PPUSH
// pom := GetBase ( building ) ;
47359: LD_ADDR_VAR 0 3
47363: PUSH
47364: LD_VAR 0 1
47368: PPUSH
47369: CALL_OW 274
47373: ST_TO_ADDR
// if not pom then
47374: LD_VAR 0 3
47378: NOT
47379: IFFALSE 47383
// exit ;
47381: GO 47553
// btype := GetBType ( building ) ;
47383: LD_ADDR_VAR 0 5
47387: PUSH
47388: LD_VAR 0 1
47392: PPUSH
47393: CALL_OW 266
47397: ST_TO_ADDR
// if btype = b_armoury then
47398: LD_VAR 0 5
47402: PUSH
47403: LD_INT 4
47405: EQUAL
47406: IFFALSE 47416
// btype := b_barracks ;
47408: LD_ADDR_VAR 0 5
47412: PUSH
47413: LD_INT 5
47415: ST_TO_ADDR
// if btype = b_depot then
47416: LD_VAR 0 5
47420: PUSH
47421: LD_INT 0
47423: EQUAL
47424: IFFALSE 47434
// btype := b_warehouse ;
47426: LD_ADDR_VAR 0 5
47430: PUSH
47431: LD_INT 1
47433: ST_TO_ADDR
// if btype = b_workshop then
47434: LD_VAR 0 5
47438: PUSH
47439: LD_INT 2
47441: EQUAL
47442: IFFALSE 47452
// btype := b_factory ;
47444: LD_ADDR_VAR 0 5
47448: PUSH
47449: LD_INT 3
47451: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47452: LD_ADDR_VAR 0 4
47456: PUSH
47457: LD_VAR 0 5
47461: PPUSH
47462: LD_VAR 0 1
47466: PPUSH
47467: CALL_OW 248
47471: PPUSH
47472: CALL_OW 450
47476: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47477: LD_ADDR_VAR 0 2
47481: PUSH
47482: LD_VAR 0 3
47486: PPUSH
47487: LD_INT 1
47489: PPUSH
47490: CALL_OW 275
47494: PUSH
47495: LD_VAR 0 4
47499: PUSH
47500: LD_INT 1
47502: ARRAY
47503: GREATEREQUAL
47504: PUSH
47505: LD_VAR 0 3
47509: PPUSH
47510: LD_INT 2
47512: PPUSH
47513: CALL_OW 275
47517: PUSH
47518: LD_VAR 0 4
47522: PUSH
47523: LD_INT 2
47525: ARRAY
47526: GREATEREQUAL
47527: AND
47528: PUSH
47529: LD_VAR 0 3
47533: PPUSH
47534: LD_INT 3
47536: PPUSH
47537: CALL_OW 275
47541: PUSH
47542: LD_VAR 0 4
47546: PUSH
47547: LD_INT 3
47549: ARRAY
47550: GREATEREQUAL
47551: AND
47552: ST_TO_ADDR
// end ;
47553: LD_VAR 0 2
47557: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47558: LD_INT 0
47560: PPUSH
47561: PPUSH
47562: PPUSH
// pom := GetBase ( building ) ;
47563: LD_ADDR_VAR 0 4
47567: PUSH
47568: LD_VAR 0 1
47572: PPUSH
47573: CALL_OW 274
47577: ST_TO_ADDR
// if not pom then
47578: LD_VAR 0 4
47582: NOT
47583: IFFALSE 47587
// exit ;
47585: GO 47688
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47587: LD_ADDR_VAR 0 5
47591: PUSH
47592: LD_VAR 0 2
47596: PPUSH
47597: LD_VAR 0 1
47601: PPUSH
47602: CALL_OW 248
47606: PPUSH
47607: CALL_OW 450
47611: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47612: LD_ADDR_VAR 0 3
47616: PUSH
47617: LD_VAR 0 4
47621: PPUSH
47622: LD_INT 1
47624: PPUSH
47625: CALL_OW 275
47629: PUSH
47630: LD_VAR 0 5
47634: PUSH
47635: LD_INT 1
47637: ARRAY
47638: GREATEREQUAL
47639: PUSH
47640: LD_VAR 0 4
47644: PPUSH
47645: LD_INT 2
47647: PPUSH
47648: CALL_OW 275
47652: PUSH
47653: LD_VAR 0 5
47657: PUSH
47658: LD_INT 2
47660: ARRAY
47661: GREATEREQUAL
47662: AND
47663: PUSH
47664: LD_VAR 0 4
47668: PPUSH
47669: LD_INT 3
47671: PPUSH
47672: CALL_OW 275
47676: PUSH
47677: LD_VAR 0 5
47681: PUSH
47682: LD_INT 3
47684: ARRAY
47685: GREATEREQUAL
47686: AND
47687: ST_TO_ADDR
// end ;
47688: LD_VAR 0 3
47692: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
47693: LD_INT 0
47695: PPUSH
47696: PPUSH
47697: PPUSH
47698: PPUSH
47699: PPUSH
47700: PPUSH
47701: PPUSH
47702: PPUSH
47703: PPUSH
47704: PPUSH
// result := false ;
47705: LD_ADDR_VAR 0 6
47709: PUSH
47710: LD_INT 0
47712: ST_TO_ADDR
// if not base or not btype or not x or not y then
47713: LD_VAR 0 1
47717: NOT
47718: PUSH
47719: LD_VAR 0 2
47723: NOT
47724: OR
47725: PUSH
47726: LD_VAR 0 3
47730: NOT
47731: OR
47732: PUSH
47733: LD_VAR 0 4
47737: NOT
47738: OR
47739: IFFALSE 47743
// exit ;
47741: GO 48352
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
47743: LD_ADDR_VAR 0 12
47747: PUSH
47748: LD_VAR 0 2
47752: PPUSH
47753: LD_VAR 0 3
47757: PPUSH
47758: LD_VAR 0 4
47762: PPUSH
47763: LD_VAR 0 5
47767: PPUSH
47768: LD_VAR 0 1
47772: PUSH
47773: LD_INT 1
47775: ARRAY
47776: PPUSH
47777: CALL_OW 248
47781: PPUSH
47782: LD_INT 0
47784: PPUSH
47785: CALL 49189 0 6
47789: ST_TO_ADDR
// if not hexes then
47790: LD_VAR 0 12
47794: NOT
47795: IFFALSE 47799
// exit ;
47797: GO 48352
// for i = 1 to hexes do
47799: LD_ADDR_VAR 0 7
47803: PUSH
47804: DOUBLE
47805: LD_INT 1
47807: DEC
47808: ST_TO_ADDR
47809: LD_VAR 0 12
47813: PUSH
47814: FOR_TO
47815: IFFALSE 48350
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47817: LD_ADDR_VAR 0 11
47821: PUSH
47822: LD_VAR 0 12
47826: PUSH
47827: LD_VAR 0 7
47831: ARRAY
47832: PUSH
47833: LD_INT 1
47835: ARRAY
47836: PPUSH
47837: LD_VAR 0 12
47841: PUSH
47842: LD_VAR 0 7
47846: ARRAY
47847: PUSH
47848: LD_INT 2
47850: ARRAY
47851: PPUSH
47852: CALL_OW 428
47856: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47857: LD_VAR 0 12
47861: PUSH
47862: LD_VAR 0 7
47866: ARRAY
47867: PUSH
47868: LD_INT 1
47870: ARRAY
47871: PPUSH
47872: LD_VAR 0 12
47876: PUSH
47877: LD_VAR 0 7
47881: ARRAY
47882: PUSH
47883: LD_INT 2
47885: ARRAY
47886: PPUSH
47887: CALL_OW 351
47891: PUSH
47892: LD_VAR 0 12
47896: PUSH
47897: LD_VAR 0 7
47901: ARRAY
47902: PUSH
47903: LD_INT 1
47905: ARRAY
47906: PPUSH
47907: LD_VAR 0 12
47911: PUSH
47912: LD_VAR 0 7
47916: ARRAY
47917: PUSH
47918: LD_INT 2
47920: ARRAY
47921: PPUSH
47922: CALL_OW 488
47926: NOT
47927: OR
47928: PUSH
47929: LD_VAR 0 11
47933: PPUSH
47934: CALL_OW 247
47938: PUSH
47939: LD_INT 3
47941: EQUAL
47942: OR
47943: IFFALSE 47949
// exit ;
47945: POP
47946: POP
47947: GO 48352
// if not tmp or not tmp in base then
47949: LD_VAR 0 11
47953: NOT
47954: PUSH
47955: LD_VAR 0 11
47959: PUSH
47960: LD_VAR 0 1
47964: IN
47965: NOT
47966: OR
47967: IFFALSE 47971
// continue ;
47969: GO 47814
// result := true ;
47971: LD_ADDR_VAR 0 6
47975: PUSH
47976: LD_INT 1
47978: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47979: LD_ADDR_VAR 0 15
47983: PUSH
47984: LD_VAR 0 1
47988: PPUSH
47989: LD_INT 22
47991: PUSH
47992: LD_VAR 0 11
47996: PPUSH
47997: CALL_OW 255
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 30
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 30
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PPUSH
48038: CALL_OW 72
48042: ST_TO_ADDR
// if dep then
48043: LD_VAR 0 15
48047: IFFALSE 48183
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48049: LD_ADDR_VAR 0 14
48053: PUSH
48054: LD_VAR 0 15
48058: PUSH
48059: LD_INT 1
48061: ARRAY
48062: PPUSH
48063: CALL_OW 250
48067: PPUSH
48068: LD_VAR 0 15
48072: PUSH
48073: LD_INT 1
48075: ARRAY
48076: PPUSH
48077: CALL_OW 254
48081: PPUSH
48082: LD_INT 5
48084: PPUSH
48085: CALL_OW 272
48089: PUSH
48090: LD_VAR 0 15
48094: PUSH
48095: LD_INT 1
48097: ARRAY
48098: PPUSH
48099: CALL_OW 251
48103: PPUSH
48104: LD_VAR 0 15
48108: PUSH
48109: LD_INT 1
48111: ARRAY
48112: PPUSH
48113: CALL_OW 254
48117: PPUSH
48118: LD_INT 5
48120: PPUSH
48121: CALL_OW 273
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48130: LD_VAR 0 14
48134: PUSH
48135: LD_INT 1
48137: ARRAY
48138: PPUSH
48139: LD_VAR 0 14
48143: PUSH
48144: LD_INT 2
48146: ARRAY
48147: PPUSH
48148: CALL_OW 488
48152: IFFALSE 48183
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48154: LD_VAR 0 11
48158: PPUSH
48159: LD_VAR 0 14
48163: PUSH
48164: LD_INT 1
48166: ARRAY
48167: PPUSH
48168: LD_VAR 0 14
48172: PUSH
48173: LD_INT 2
48175: ARRAY
48176: PPUSH
48177: CALL_OW 111
// continue ;
48181: GO 47814
// end ; end ; r := GetDir ( tmp ) ;
48183: LD_ADDR_VAR 0 13
48187: PUSH
48188: LD_VAR 0 11
48192: PPUSH
48193: CALL_OW 254
48197: ST_TO_ADDR
// if r = 5 then
48198: LD_VAR 0 13
48202: PUSH
48203: LD_INT 5
48205: EQUAL
48206: IFFALSE 48216
// r := 0 ;
48208: LD_ADDR_VAR 0 13
48212: PUSH
48213: LD_INT 0
48215: ST_TO_ADDR
// for j = r to 5 do
48216: LD_ADDR_VAR 0 8
48220: PUSH
48221: DOUBLE
48222: LD_VAR 0 13
48226: DEC
48227: ST_TO_ADDR
48228: LD_INT 5
48230: PUSH
48231: FOR_TO
48232: IFFALSE 48346
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48234: LD_ADDR_VAR 0 9
48238: PUSH
48239: LD_VAR 0 11
48243: PPUSH
48244: CALL_OW 250
48248: PPUSH
48249: LD_VAR 0 8
48253: PPUSH
48254: LD_INT 2
48256: PPUSH
48257: CALL_OW 272
48261: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48262: LD_ADDR_VAR 0 10
48266: PUSH
48267: LD_VAR 0 11
48271: PPUSH
48272: CALL_OW 251
48276: PPUSH
48277: LD_VAR 0 8
48281: PPUSH
48282: LD_INT 2
48284: PPUSH
48285: CALL_OW 273
48289: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48290: LD_VAR 0 9
48294: PPUSH
48295: LD_VAR 0 10
48299: PPUSH
48300: CALL_OW 488
48304: PUSH
48305: LD_VAR 0 9
48309: PPUSH
48310: LD_VAR 0 10
48314: PPUSH
48315: CALL_OW 428
48319: NOT
48320: AND
48321: IFFALSE 48344
// begin ComMoveXY ( tmp , _x , _y ) ;
48323: LD_VAR 0 11
48327: PPUSH
48328: LD_VAR 0 9
48332: PPUSH
48333: LD_VAR 0 10
48337: PPUSH
48338: CALL_OW 111
// break ;
48342: GO 48346
// end ; end ;
48344: GO 48231
48346: POP
48347: POP
// end ;
48348: GO 47814
48350: POP
48351: POP
// end ;
48352: LD_VAR 0 6
48356: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48357: LD_INT 0
48359: PPUSH
48360: PPUSH
48361: PPUSH
48362: PPUSH
48363: PPUSH
48364: PPUSH
48365: PPUSH
48366: PPUSH
48367: PPUSH
48368: PPUSH
// result := false ;
48369: LD_ADDR_VAR 0 6
48373: PUSH
48374: LD_INT 0
48376: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48377: LD_VAR 0 1
48381: NOT
48382: PUSH
48383: LD_VAR 0 1
48387: PPUSH
48388: CALL_OW 266
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: IN
48403: NOT
48404: OR
48405: PUSH
48406: LD_VAR 0 2
48410: NOT
48411: OR
48412: PUSH
48413: LD_VAR 0 5
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 3
48429: PUSH
48430: LD_INT 4
48432: PUSH
48433: LD_INT 5
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: IN
48444: NOT
48445: OR
48446: PUSH
48447: LD_VAR 0 3
48451: PPUSH
48452: LD_VAR 0 4
48456: PPUSH
48457: CALL_OW 488
48461: NOT
48462: OR
48463: IFFALSE 48467
// exit ;
48465: GO 49184
// pom := GetBase ( depot ) ;
48467: LD_ADDR_VAR 0 10
48471: PUSH
48472: LD_VAR 0 1
48476: PPUSH
48477: CALL_OW 274
48481: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48482: LD_ADDR_VAR 0 11
48486: PUSH
48487: LD_VAR 0 2
48491: PPUSH
48492: LD_VAR 0 1
48496: PPUSH
48497: CALL_OW 248
48501: PPUSH
48502: CALL_OW 450
48506: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48507: LD_VAR 0 10
48511: PPUSH
48512: LD_INT 1
48514: PPUSH
48515: CALL_OW 275
48519: PUSH
48520: LD_VAR 0 11
48524: PUSH
48525: LD_INT 1
48527: ARRAY
48528: GREATEREQUAL
48529: PUSH
48530: LD_VAR 0 10
48534: PPUSH
48535: LD_INT 2
48537: PPUSH
48538: CALL_OW 275
48542: PUSH
48543: LD_VAR 0 11
48547: PUSH
48548: LD_INT 2
48550: ARRAY
48551: GREATEREQUAL
48552: AND
48553: PUSH
48554: LD_VAR 0 10
48558: PPUSH
48559: LD_INT 3
48561: PPUSH
48562: CALL_OW 275
48566: PUSH
48567: LD_VAR 0 11
48571: PUSH
48572: LD_INT 3
48574: ARRAY
48575: GREATEREQUAL
48576: AND
48577: NOT
48578: IFFALSE 48582
// exit ;
48580: GO 49184
// if GetBType ( depot ) = b_depot then
48582: LD_VAR 0 1
48586: PPUSH
48587: CALL_OW 266
48591: PUSH
48592: LD_INT 0
48594: EQUAL
48595: IFFALSE 48607
// dist := 28 else
48597: LD_ADDR_VAR 0 14
48601: PUSH
48602: LD_INT 28
48604: ST_TO_ADDR
48605: GO 48615
// dist := 36 ;
48607: LD_ADDR_VAR 0 14
48611: PUSH
48612: LD_INT 36
48614: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48615: LD_VAR 0 1
48619: PPUSH
48620: LD_VAR 0 3
48624: PPUSH
48625: LD_VAR 0 4
48629: PPUSH
48630: CALL_OW 297
48634: PUSH
48635: LD_VAR 0 14
48639: GREATER
48640: IFFALSE 48644
// exit ;
48642: GO 49184
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48644: LD_ADDR_VAR 0 12
48648: PUSH
48649: LD_VAR 0 2
48653: PPUSH
48654: LD_VAR 0 3
48658: PPUSH
48659: LD_VAR 0 4
48663: PPUSH
48664: LD_VAR 0 5
48668: PPUSH
48669: LD_VAR 0 1
48673: PPUSH
48674: CALL_OW 248
48678: PPUSH
48679: LD_INT 0
48681: PPUSH
48682: CALL 49189 0 6
48686: ST_TO_ADDR
// if not hexes then
48687: LD_VAR 0 12
48691: NOT
48692: IFFALSE 48696
// exit ;
48694: GO 49184
// hex := GetHexInfo ( x , y ) ;
48696: LD_ADDR_VAR 0 15
48700: PUSH
48701: LD_VAR 0 3
48705: PPUSH
48706: LD_VAR 0 4
48710: PPUSH
48711: CALL_OW 546
48715: ST_TO_ADDR
// if hex [ 1 ] then
48716: LD_VAR 0 15
48720: PUSH
48721: LD_INT 1
48723: ARRAY
48724: IFFALSE 48728
// exit ;
48726: GO 49184
// height := hex [ 2 ] ;
48728: LD_ADDR_VAR 0 13
48732: PUSH
48733: LD_VAR 0 15
48737: PUSH
48738: LD_INT 2
48740: ARRAY
48741: ST_TO_ADDR
// for i = 1 to hexes do
48742: LD_ADDR_VAR 0 7
48746: PUSH
48747: DOUBLE
48748: LD_INT 1
48750: DEC
48751: ST_TO_ADDR
48752: LD_VAR 0 12
48756: PUSH
48757: FOR_TO
48758: IFFALSE 49088
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48760: LD_VAR 0 12
48764: PUSH
48765: LD_VAR 0 7
48769: ARRAY
48770: PUSH
48771: LD_INT 1
48773: ARRAY
48774: PPUSH
48775: LD_VAR 0 12
48779: PUSH
48780: LD_VAR 0 7
48784: ARRAY
48785: PUSH
48786: LD_INT 2
48788: ARRAY
48789: PPUSH
48790: CALL_OW 488
48794: NOT
48795: PUSH
48796: LD_VAR 0 12
48800: PUSH
48801: LD_VAR 0 7
48805: ARRAY
48806: PUSH
48807: LD_INT 1
48809: ARRAY
48810: PPUSH
48811: LD_VAR 0 12
48815: PUSH
48816: LD_VAR 0 7
48820: ARRAY
48821: PUSH
48822: LD_INT 2
48824: ARRAY
48825: PPUSH
48826: CALL_OW 428
48830: PUSH
48831: LD_INT 0
48833: GREATER
48834: OR
48835: PUSH
48836: LD_VAR 0 12
48840: PUSH
48841: LD_VAR 0 7
48845: ARRAY
48846: PUSH
48847: LD_INT 1
48849: ARRAY
48850: PPUSH
48851: LD_VAR 0 12
48855: PUSH
48856: LD_VAR 0 7
48860: ARRAY
48861: PUSH
48862: LD_INT 2
48864: ARRAY
48865: PPUSH
48866: CALL_OW 351
48870: OR
48871: IFFALSE 48877
// exit ;
48873: POP
48874: POP
48875: GO 49184
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48877: LD_ADDR_VAR 0 8
48881: PUSH
48882: LD_VAR 0 12
48886: PUSH
48887: LD_VAR 0 7
48891: ARRAY
48892: PUSH
48893: LD_INT 1
48895: ARRAY
48896: PPUSH
48897: LD_VAR 0 12
48901: PUSH
48902: LD_VAR 0 7
48906: ARRAY
48907: PUSH
48908: LD_INT 2
48910: ARRAY
48911: PPUSH
48912: CALL_OW 546
48916: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48917: LD_VAR 0 8
48921: PUSH
48922: LD_INT 1
48924: ARRAY
48925: PUSH
48926: LD_VAR 0 8
48930: PUSH
48931: LD_INT 2
48933: ARRAY
48934: PUSH
48935: LD_VAR 0 13
48939: PUSH
48940: LD_INT 2
48942: PLUS
48943: GREATER
48944: OR
48945: PUSH
48946: LD_VAR 0 8
48950: PUSH
48951: LD_INT 2
48953: ARRAY
48954: PUSH
48955: LD_VAR 0 13
48959: PUSH
48960: LD_INT 2
48962: MINUS
48963: LESS
48964: OR
48965: PUSH
48966: LD_VAR 0 8
48970: PUSH
48971: LD_INT 3
48973: ARRAY
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 8
48980: PUSH
48981: LD_INT 9
48983: PUSH
48984: LD_INT 10
48986: PUSH
48987: LD_INT 11
48989: PUSH
48990: LD_INT 12
48992: PUSH
48993: LD_INT 13
48995: PUSH
48996: LD_INT 16
48998: PUSH
48999: LD_INT 17
49001: PUSH
49002: LD_INT 18
49004: PUSH
49005: LD_INT 19
49007: PUSH
49008: LD_INT 20
49010: PUSH
49011: LD_INT 21
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: IN
49029: NOT
49030: OR
49031: PUSH
49032: LD_VAR 0 8
49036: PUSH
49037: LD_INT 5
49039: ARRAY
49040: NOT
49041: OR
49042: PUSH
49043: LD_VAR 0 8
49047: PUSH
49048: LD_INT 6
49050: ARRAY
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: LD_INT 7
49060: PUSH
49061: LD_INT 9
49063: PUSH
49064: LD_INT 10
49066: PUSH
49067: LD_INT 11
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: IN
49078: NOT
49079: OR
49080: IFFALSE 49086
// exit ;
49082: POP
49083: POP
49084: GO 49184
// end ;
49086: GO 48757
49088: POP
49089: POP
// side := GetSide ( depot ) ;
49090: LD_ADDR_VAR 0 9
49094: PUSH
49095: LD_VAR 0 1
49099: PPUSH
49100: CALL_OW 255
49104: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49105: LD_VAR 0 9
49109: PPUSH
49110: LD_VAR 0 3
49114: PPUSH
49115: LD_VAR 0 4
49119: PPUSH
49120: LD_INT 20
49122: PPUSH
49123: CALL 41838 0 4
49127: PUSH
49128: LD_INT 4
49130: ARRAY
49131: IFFALSE 49135
// exit ;
49133: GO 49184
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49135: LD_VAR 0 2
49139: PUSH
49140: LD_INT 29
49142: PUSH
49143: LD_INT 30
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: IN
49150: PUSH
49151: LD_VAR 0 3
49155: PPUSH
49156: LD_VAR 0 4
49160: PPUSH
49161: LD_VAR 0 9
49165: PPUSH
49166: CALL_OW 440
49170: NOT
49171: AND
49172: IFFALSE 49176
// exit ;
49174: GO 49184
// result := true ;
49176: LD_ADDR_VAR 0 6
49180: PUSH
49181: LD_INT 1
49183: ST_TO_ADDR
// end ;
49184: LD_VAR 0 6
49188: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49189: LD_INT 0
49191: PPUSH
49192: PPUSH
49193: PPUSH
49194: PPUSH
49195: PPUSH
49196: PPUSH
49197: PPUSH
49198: PPUSH
49199: PPUSH
49200: PPUSH
49201: PPUSH
49202: PPUSH
49203: PPUSH
49204: PPUSH
49205: PPUSH
49206: PPUSH
49207: PPUSH
49208: PPUSH
49209: PPUSH
49210: PPUSH
49211: PPUSH
49212: PPUSH
49213: PPUSH
49214: PPUSH
49215: PPUSH
49216: PPUSH
49217: PPUSH
49218: PPUSH
49219: PPUSH
49220: PPUSH
49221: PPUSH
49222: PPUSH
49223: PPUSH
49224: PPUSH
49225: PPUSH
49226: PPUSH
49227: PPUSH
49228: PPUSH
49229: PPUSH
49230: PPUSH
49231: PPUSH
49232: PPUSH
49233: PPUSH
49234: PPUSH
49235: PPUSH
49236: PPUSH
49237: PPUSH
49238: PPUSH
49239: PPUSH
49240: PPUSH
49241: PPUSH
49242: PPUSH
49243: PPUSH
49244: PPUSH
49245: PPUSH
49246: PPUSH
49247: PPUSH
49248: PPUSH
// result = [ ] ;
49249: LD_ADDR_VAR 0 7
49253: PUSH
49254: EMPTY
49255: ST_TO_ADDR
// temp_list = [ ] ;
49256: LD_ADDR_VAR 0 9
49260: PUSH
49261: EMPTY
49262: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49263: LD_VAR 0 4
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: LD_INT 3
49279: PUSH
49280: LD_INT 4
49282: PUSH
49283: LD_INT 5
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: IN
49294: NOT
49295: PUSH
49296: LD_VAR 0 1
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: IN
49311: PUSH
49312: LD_VAR 0 5
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: LD_INT 3
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: LIST
49330: IN
49331: NOT
49332: AND
49333: OR
49334: IFFALSE 49338
// exit ;
49336: GO 67729
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49338: LD_VAR 0 1
49342: PUSH
49343: LD_INT 6
49345: PUSH
49346: LD_INT 7
49348: PUSH
49349: LD_INT 8
49351: PUSH
49352: LD_INT 13
49354: PUSH
49355: LD_INT 12
49357: PUSH
49358: LD_INT 15
49360: PUSH
49361: LD_INT 11
49363: PUSH
49364: LD_INT 14
49366: PUSH
49367: LD_INT 10
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: IN
49381: IFFALSE 49391
// btype = b_lab ;
49383: LD_ADDR_VAR 0 1
49387: PUSH
49388: LD_INT 6
49390: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49391: LD_VAR 0 6
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: LIST
49409: IN
49410: NOT
49411: PUSH
49412: LD_VAR 0 1
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: LD_INT 6
49431: PUSH
49432: LD_INT 36
49434: PUSH
49435: LD_INT 4
49437: PUSH
49438: LD_INT 5
49440: PUSH
49441: LD_INT 31
49443: PUSH
49444: LD_INT 32
49446: PUSH
49447: LD_INT 33
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: IN
49463: NOT
49464: PUSH
49465: LD_VAR 0 6
49469: PUSH
49470: LD_INT 1
49472: EQUAL
49473: AND
49474: OR
49475: PUSH
49476: LD_VAR 0 1
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 3
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: IN
49491: NOT
49492: PUSH
49493: LD_VAR 0 6
49497: PUSH
49498: LD_INT 2
49500: EQUAL
49501: AND
49502: OR
49503: IFFALSE 49513
// mode = 0 ;
49505: LD_ADDR_VAR 0 6
49509: PUSH
49510: LD_INT 0
49512: ST_TO_ADDR
// case mode of 0 :
49513: LD_VAR 0 6
49517: PUSH
49518: LD_INT 0
49520: DOUBLE
49521: EQUAL
49522: IFTRUE 49526
49524: GO 60979
49526: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49527: LD_ADDR_VAR 0 11
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: LD_INT 3
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 3
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49720: LD_ADDR_VAR 0 12
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 3
49877: NEG
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 3
49888: NEG
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49916: LD_ADDR_VAR 0 13
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 2
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: LD_INT 2
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: LD_INT 3
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 3
50075: NEG
50076: PUSH
50077: LD_INT 2
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 3
50087: NEG
50088: PUSH
50089: LD_INT 3
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50115: LD_ADDR_VAR 0 14
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 3
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50311: LD_ADDR_VAR 0 15
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 3
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 3
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50504: LD_ADDR_VAR 0 16
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 2
50627: NEG
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 2
50639: NEG
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 3
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 3
50661: PUSH
50662: LD_INT 3
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: LD_INT 3
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50697: LD_ADDR_VAR 0 17
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: LD_INT 2
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50927: LD_ADDR_VAR 0 18
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: LD_INT 2
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51157: LD_ADDR_VAR 0 19
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 2
51344: NEG
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 2
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51387: LD_ADDR_VAR 0 20
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51617: LD_ADDR_VAR 0 21
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: LD_INT 1
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51847: LD_ADDR_VAR 0 22
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 2
52023: NEG
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52077: LD_ADDR_VAR 0 23
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 2
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: NEG
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: LD_INT 3
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 3
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 2
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52357: LD_ADDR_VAR 0 24
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: NEG
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 2
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 3
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 3
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52633: LD_ADDR_VAR 0 25
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 2
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 2
52832: NEG
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 3
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 3
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: LD_INT 3
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 3
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52907: LD_ADDR_VAR 0 26
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: NEG
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: LD_INT 2
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: LD_INT 3
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: LD_INT 3
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: LD_INT 2
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 2
53149: NEG
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53183: LD_ADDR_VAR 0 27
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 2
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 2
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 2
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 3
53416: NEG
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 3
53428: NEG
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53463: LD_ADDR_VAR 0 28
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: LD_INT 1
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: LD_INT 2
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: LD_INT 3
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 3
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 3
53698: NEG
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 3
53710: NEG
53711: PUSH
53712: LD_INT 2
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53745: LD_ADDR_VAR 0 29
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: LD_INT 2
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 2
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: LD_INT 2
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 3
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: LD_INT 3
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 3
53989: NEG
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54024: LD_ADDR_VAR 0 30
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 2
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 2
54190: NEG
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: LD_INT 3
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 3
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: LD_INT 3
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 2
54256: NEG
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 3
54267: NEG
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54302: LD_ADDR_VAR 0 31
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 2
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: LD_INT 3
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 3
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 3
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 3
54545: NEG
54546: PUSH
54547: LD_INT 2
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54580: LD_ADDR_VAR 0 32
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 1
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: LD_INT 2
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: NEG
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: LD_INT 3
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: LD_INT 2
54784: NEG
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 3
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 3
54823: NEG
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54858: LD_ADDR_VAR 0 33
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: NEG
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: LD_INT 3
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 3
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: LD_INT 3
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 3
55102: NEG
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55137: LD_ADDR_VAR 0 34
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 2
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: LD_INT 2
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 2
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: LD_INT 2
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 3
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 3
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: PUSH
55362: LD_INT 3
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 3
55382: NEG
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55417: LD_ADDR_VAR 0 35
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55529: LD_ADDR_VAR 0 36
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55641: LD_ADDR_VAR 0 37
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55753: LD_ADDR_VAR 0 38
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55865: LD_ADDR_VAR 0 39
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: LD_INT 2
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55977: LD_ADDR_VAR 0 40
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56089: LD_ADDR_VAR 0 41
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: LD_INT 2
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: LD_INT 3
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 3
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 3
56332: PUSH
56333: LD_INT 3
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: LD_INT 3
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 3
56363: NEG
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 3
56374: NEG
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: NEG
56387: PUSH
56388: LD_INT 2
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 3
56398: NEG
56399: PUSH
56400: LD_INT 3
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56439: LD_ADDR_VAR 0 42
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: NEG
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: LD_INT 2
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: LD_INT 1
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: LD_INT 2
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: LD_INT 3
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 3
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: LD_INT 3
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: LD_INT 3
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: LD_INT 3
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 3
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 3
56736: NEG
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 3
56748: NEG
56749: PUSH
56750: LD_INT 3
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56789: LD_ADDR_VAR 0 43
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: NEG
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: LD_INT 3
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: LD_INT 3
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 2
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 3
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 3
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: LD_INT 3
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: LD_INT 3
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: NEG
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 2
57074: NEG
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 3
57085: NEG
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 3
57096: NEG
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57137: LD_ADDR_VAR 0 44
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 2
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: PUSH
57262: LD_INT 2
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 2
57303: NEG
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 2
57315: NEG
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 2
57327: NEG
57328: PUSH
57329: LD_INT 3
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 3
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 3
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 3
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 3
57380: PUSH
57381: LD_INT 3
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: LD_INT 3
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 2
57400: NEG
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 3
57422: NEG
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 3
57434: NEG
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 3
57446: NEG
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57487: LD_ADDR_VAR 0 45
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: NEG
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 2
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 2
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 2
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 2
57612: PUSH
57613: LD_INT 2
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: LD_INT 2
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: NEG
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: LD_INT 3
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: NEG
57690: PUSH
57691: LD_INT 3
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 3
57733: PUSH
57734: LD_INT 3
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: LD_INT 3
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 3
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: LD_INT 2
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 3
57796: NEG
57797: PUSH
57798: LD_INT 3
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57837: LD_ADDR_VAR 0 46
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 2
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: LD_INT 2
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: NEG
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: LD_INT 3
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 3
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: LD_INT 2
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 2
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 3
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 3
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: LD_INT 3
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: LD_INT 2
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 2
58122: NEG
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 3
58133: NEG
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 3
58144: NEG
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58185: LD_ADDR_VAR 0 47
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: NEG
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: LD_INT 2
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 2
58312: NEG
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58336: LD_ADDR_VAR 0 48
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 1
58405: NEG
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 2
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58483: LD_ADDR_VAR 0 49
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: LD_INT 1
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 2
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58627: LD_ADDR_VAR 0 50
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: LD_INT 2
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58771: LD_ADDR_VAR 0 51
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: LD_INT 2
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 2
58883: NEG
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: NEG
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58918: LD_ADDR_VAR 0 52
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: LD_INT 0
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 1
58999: NEG
59000: PUSH
59001: LD_INT 2
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: NEG
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59069: LD_ADDR_VAR 0 53
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 1
59138: NEG
59139: PUSH
59140: LD_INT 1
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: LD_INT 2
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 2
59184: PUSH
59185: LD_INT 0
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 2
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: LD_INT 2
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: PUSH
59215: LD_INT 2
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 2
59245: NEG
59246: PUSH
59247: LD_INT 0
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 2
59256: NEG
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 2
59268: NEG
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59299: LD_ADDR_VAR 0 54
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: LD_INT 0
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: LD_INT 2
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: LD_INT 2
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 2
59475: NEG
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59529: LD_ADDR_VAR 0 55
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: LD_INT 1
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 2
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 2
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 2
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59759: LD_ADDR_VAR 0 56
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 2
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 2
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: LD_INT 2
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 2
59946: NEG
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: LD_INT 2
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59989: LD_ADDR_VAR 0 57
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: LD_INT 1
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: LD_INT 2
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60219: LD_ADDR_VAR 0 58
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: LD_INT 1
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 1
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: LD_INT 1
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 2
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 1
60384: NEG
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 2
60406: NEG
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 2
60418: NEG
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60449: LD_ADDR_VAR 0 59
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60537: LD_ADDR_VAR 0 60
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: NEG
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60625: LD_ADDR_VAR 0 61
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 1
60683: NEG
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60713: LD_ADDR_VAR 0 62
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60801: LD_ADDR_VAR 0 63
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: LD_INT 1
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 1
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: LD_INT 1
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: NEG
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60889: LD_ADDR_VAR 0 64
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: LD_INT 0
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: LD_INT 1
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: ST_TO_ADDR
// end ; 1 :
60977: GO 66874
60979: LD_INT 1
60981: DOUBLE
60982: EQUAL
60983: IFTRUE 60987
60985: GO 63610
60987: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60988: LD_ADDR_VAR 0 11
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: LD_INT 3
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: LD_INT 3
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: LIST
61031: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61032: LD_ADDR_VAR 0 12
61036: PUSH
61037: LD_INT 2
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 3
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 3
61060: PUSH
61061: LD_INT 1
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: LIST
61072: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61073: LD_ADDR_VAR 0 13
61077: PUSH
61078: LD_INT 3
61080: PUSH
61081: LD_INT 2
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 3
61090: PUSH
61091: LD_INT 3
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 2
61100: PUSH
61101: LD_INT 3
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: LIST
61112: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61113: LD_ADDR_VAR 0 14
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: LD_INT 3
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: LD_INT 3
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: LIST
61153: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61154: LD_ADDR_VAR 0 15
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 3
61172: NEG
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 3
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: LIST
61197: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61198: LD_ADDR_VAR 0 16
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: LD_INT 3
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 3
61217: NEG
61218: PUSH
61219: LD_INT 2
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 3
61229: NEG
61230: PUSH
61231: LD_INT 3
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: LIST
61243: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61244: LD_ADDR_VAR 0 17
61248: PUSH
61249: LD_INT 1
61251: NEG
61252: PUSH
61253: LD_INT 3
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 3
61266: NEG
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: LD_INT 2
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: LIST
61287: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61288: LD_ADDR_VAR 0 18
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: LIST
61328: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61329: LD_ADDR_VAR 0 19
61333: PUSH
61334: LD_INT 3
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 3
61346: PUSH
61347: LD_INT 3
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: LD_INT 3
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: LIST
61368: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61369: LD_ADDR_VAR 0 20
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: LD_INT 3
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: LD_INT 3
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: LIST
61409: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61410: LD_ADDR_VAR 0 21
61414: PUSH
61415: LD_INT 2
61417: NEG
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 3
61439: NEG
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: LIST
61453: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61454: LD_ADDR_VAR 0 22
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: LD_INT 3
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 3
61485: NEG
61486: PUSH
61487: LD_INT 3
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: LIST
61499: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61500: LD_ADDR_VAR 0 23
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: LD_INT 3
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: LD_INT 4
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: LD_INT 3
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: LIST
61543: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61544: LD_ADDR_VAR 0 24
61548: PUSH
61549: LD_INT 3
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 3
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 4
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: LIST
61584: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61585: LD_ADDR_VAR 0 25
61589: PUSH
61590: LD_INT 3
61592: PUSH
61593: LD_INT 3
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 4
61602: PUSH
61603: LD_INT 3
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 3
61612: PUSH
61613: LD_INT 4
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: LIST
61624: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61625: LD_ADDR_VAR 0 26
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: LD_INT 3
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: LD_INT 4
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 1
61652: NEG
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: LIST
61665: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61666: LD_ADDR_VAR 0 27
61670: PUSH
61671: LD_INT 3
61673: NEG
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 3
61684: NEG
61685: PUSH
61686: LD_INT 1
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 4
61695: NEG
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: LIST
61709: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61710: LD_ADDR_VAR 0 28
61714: PUSH
61715: LD_INT 3
61717: NEG
61718: PUSH
61719: LD_INT 3
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: LD_INT 4
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 4
61741: NEG
61742: PUSH
61743: LD_INT 3
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: LIST
61755: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61756: LD_ADDR_VAR 0 29
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: LD_INT 3
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: LD_INT 3
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: LD_INT 2
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 4
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: LD_INT 4
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: PUSH
61821: LD_INT 3
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: LD_INT 5
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: LD_INT 5
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: LD_INT 4
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: LD_INT 6
61869: NEG
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: LD_INT 6
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: LD_INT 5
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61911: LD_ADDR_VAR 0 30
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 3
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 3
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 3
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 4
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 4
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 4
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 5
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 5
62001: PUSH
62002: LD_INT 1
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 5
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 6
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 6
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62054: LD_ADDR_VAR 0 31
62058: PUSH
62059: LD_INT 3
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 3
62071: PUSH
62072: LD_INT 3
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 2
62081: PUSH
62082: LD_INT 3
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 4
62091: PUSH
62092: LD_INT 3
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 4
62101: PUSH
62102: LD_INT 4
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 3
62111: PUSH
62112: LD_INT 4
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 5
62121: PUSH
62122: LD_INT 4
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 5
62131: PUSH
62132: LD_INT 5
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 4
62141: PUSH
62142: LD_INT 5
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 6
62151: PUSH
62152: LD_INT 5
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 6
62161: PUSH
62162: LD_INT 6
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 5
62171: PUSH
62172: LD_INT 6
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62193: LD_ADDR_VAR 0 32
62197: PUSH
62198: LD_INT 1
62200: PUSH
62201: LD_INT 3
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: LD_INT 3
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: LD_INT 4
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: LD_INT 4
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 1
62251: NEG
62252: PUSH
62253: LD_INT 3
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: LD_INT 5
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: LD_INT 5
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: LD_INT 4
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: LD_INT 6
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 6
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: LD_INT 5
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62336: LD_ADDR_VAR 0 33
62340: PUSH
62341: LD_INT 2
62343: NEG
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 3
62354: NEG
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 3
62365: NEG
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 3
62377: NEG
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 4
62388: NEG
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 4
62399: NEG
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 4
62411: NEG
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 5
62422: NEG
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 5
62433: NEG
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 5
62445: NEG
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 6
62456: NEG
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 6
62467: NEG
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62491: LD_ADDR_VAR 0 34
62495: PUSH
62496: LD_INT 2
62498: NEG
62499: PUSH
62500: LD_INT 3
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: LD_INT 2
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 3
62522: NEG
62523: PUSH
62524: LD_INT 3
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 3
62534: NEG
62535: PUSH
62536: LD_INT 4
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 4
62546: NEG
62547: PUSH
62548: LD_INT 3
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 4
62558: NEG
62559: PUSH
62560: LD_INT 4
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 4
62570: NEG
62571: PUSH
62572: LD_INT 5
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 5
62582: NEG
62583: PUSH
62584: LD_INT 4
62586: NEG
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 5
62594: NEG
62595: PUSH
62596: LD_INT 5
62598: NEG
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 5
62606: NEG
62607: PUSH
62608: LD_INT 6
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 6
62618: NEG
62619: PUSH
62620: LD_INT 5
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 6
62630: NEG
62631: PUSH
62632: LD_INT 6
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62654: LD_ADDR_VAR 0 41
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: LD_INT 3
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: LIST
62697: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62698: LD_ADDR_VAR 0 42
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 3
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: LIST
62738: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62739: LD_ADDR_VAR 0 43
62743: PUSH
62744: LD_INT 2
62746: PUSH
62747: LD_INT 2
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 3
62756: PUSH
62757: LD_INT 2
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 2
62766: PUSH
62767: LD_INT 3
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: LIST
62778: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62779: LD_ADDR_VAR 0 44
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: LD_INT 2
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 1
62796: PUSH
62797: LD_INT 3
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: LD_INT 2
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: LIST
62819: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62820: LD_ADDR_VAR 0 45
62824: PUSH
62825: LD_INT 2
62827: NEG
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 2
62838: NEG
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 3
62849: NEG
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: LIST
62863: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62864: LD_ADDR_VAR 0 46
62868: PUSH
62869: LD_INT 2
62871: NEG
62872: PUSH
62873: LD_INT 2
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 2
62883: NEG
62884: PUSH
62885: LD_INT 3
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 3
62895: NEG
62896: PUSH
62897: LD_INT 2
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: LIST
62909: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62910: LD_ADDR_VAR 0 47
62914: PUSH
62915: LD_INT 2
62917: NEG
62918: PUSH
62919: LD_INT 3
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: NEG
62930: PUSH
62931: LD_INT 3
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62943: LD_ADDR_VAR 0 48
62947: PUSH
62948: LD_INT 1
62950: PUSH
62951: LD_INT 2
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: LD_INT 1
62964: NEG
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62974: LD_ADDR_VAR 0 49
62978: PUSH
62979: LD_INT 3
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 3
62991: PUSH
62992: LD_INT 2
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63003: LD_ADDR_VAR 0 50
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: LD_INT 3
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 1
63020: PUSH
63021: LD_INT 3
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63032: LD_ADDR_VAR 0 51
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: LD_INT 2
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 2
63050: NEG
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63063: LD_ADDR_VAR 0 52
63067: PUSH
63068: LD_INT 3
63070: NEG
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 3
63082: NEG
63083: PUSH
63084: LD_INT 2
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63096: LD_ADDR_VAR 0 53
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: LD_INT 3
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 3
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: LD_INT 2
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: LIST
63139: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63140: LD_ADDR_VAR 0 54
63144: PUSH
63145: LD_INT 2
63147: PUSH
63148: LD_INT 1
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 3
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 3
63168: PUSH
63169: LD_INT 1
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: LIST
63180: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63181: LD_ADDR_VAR 0 55
63185: PUSH
63186: LD_INT 3
63188: PUSH
63189: LD_INT 2
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 3
63198: PUSH
63199: LD_INT 3
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 2
63208: PUSH
63209: LD_INT 3
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: LIST
63220: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63221: LD_ADDR_VAR 0 56
63225: PUSH
63226: LD_INT 1
63228: PUSH
63229: LD_INT 3
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: LD_INT 3
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: LD_INT 2
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: LIST
63261: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63262: LD_ADDR_VAR 0 57
63266: PUSH
63267: LD_INT 2
63269: NEG
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 3
63280: NEG
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 3
63291: NEG
63292: PUSH
63293: LD_INT 1
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: LIST
63305: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63306: LD_ADDR_VAR 0 58
63310: PUSH
63311: LD_INT 2
63313: NEG
63314: PUSH
63315: LD_INT 3
63317: NEG
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 3
63325: NEG
63326: PUSH
63327: LD_INT 2
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 3
63337: NEG
63338: PUSH
63339: LD_INT 3
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: LIST
63351: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63352: LD_ADDR_VAR 0 59
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: LD_INT 2
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: LD_INT 2
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: LD_INT 1
63385: NEG
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: LIST
63395: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63396: LD_ADDR_VAR 0 60
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 2
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 2
63424: PUSH
63425: LD_INT 1
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: LIST
63436: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63437: LD_ADDR_VAR 0 61
63441: PUSH
63442: LD_INT 2
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: LIST
63476: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63477: LD_ADDR_VAR 0 62
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: LD_INT 2
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 1
63504: NEG
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: LIST
63517: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63518: LD_ADDR_VAR 0 63
63522: PUSH
63523: LD_INT 1
63525: NEG
63526: PUSH
63527: LD_INT 1
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 2
63536: NEG
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 2
63547: NEG
63548: PUSH
63549: LD_INT 1
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: LIST
63561: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63562: LD_ADDR_VAR 0 64
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: LD_INT 2
63573: NEG
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 2
63581: NEG
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: NEG
63594: PUSH
63595: LD_INT 2
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: ST_TO_ADDR
// end ; 2 :
63608: GO 66874
63610: LD_INT 2
63612: DOUBLE
63613: EQUAL
63614: IFTRUE 63618
63616: GO 66873
63618: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63619: LD_ADDR_VAR 0 29
63623: PUSH
63624: LD_INT 4
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 4
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 5
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 5
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 4
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 3
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 3
63687: PUSH
63688: LD_INT 1
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 3
63698: PUSH
63699: LD_INT 2
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 5
63709: PUSH
63710: LD_INT 2
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 3
63719: PUSH
63720: LD_INT 3
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 3
63729: PUSH
63730: LD_INT 2
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 4
63739: PUSH
63740: LD_INT 3
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 4
63749: PUSH
63750: LD_INT 4
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 3
63759: PUSH
63760: LD_INT 4
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: LD_INT 3
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 2
63779: PUSH
63780: LD_INT 2
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 4
63789: PUSH
63790: LD_INT 2
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 2
63799: PUSH
63800: LD_INT 4
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: LD_INT 4
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 0
63819: PUSH
63820: LD_INT 3
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 1
63829: PUSH
63830: LD_INT 4
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: PUSH
63840: LD_INT 5
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: LD_INT 5
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 1
63859: NEG
63860: PUSH
63861: LD_INT 4
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 1
63870: NEG
63871: PUSH
63872: LD_INT 3
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 2
63881: PUSH
63882: LD_INT 5
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 2
63891: NEG
63892: PUSH
63893: LD_INT 3
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 3
63902: NEG
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 3
63913: NEG
63914: PUSH
63915: LD_INT 1
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 2
63925: NEG
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 2
63936: NEG
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 3
63947: NEG
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 4
63958: NEG
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 4
63969: NEG
63970: PUSH
63971: LD_INT 1
63973: NEG
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 4
63981: NEG
63982: PUSH
63983: LD_INT 2
63985: NEG
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 2
63993: NEG
63994: PUSH
63995: LD_INT 2
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 4
64004: NEG
64005: PUSH
64006: LD_INT 4
64008: NEG
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 4
64016: NEG
64017: PUSH
64018: LD_INT 5
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 3
64028: NEG
64029: PUSH
64030: LD_INT 4
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 3
64040: NEG
64041: PUSH
64042: LD_INT 3
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 4
64052: NEG
64053: PUSH
64054: LD_INT 3
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 5
64064: NEG
64065: PUSH
64066: LD_INT 4
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 5
64076: NEG
64077: PUSH
64078: LD_INT 5
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 3
64088: NEG
64089: PUSH
64090: LD_INT 5
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 5
64100: NEG
64101: PUSH
64102: LD_INT 3
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64157: LD_ADDR_VAR 0 30
64161: PUSH
64162: LD_INT 4
64164: PUSH
64165: LD_INT 4
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 4
64174: PUSH
64175: LD_INT 3
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 5
64184: PUSH
64185: LD_INT 4
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 5
64194: PUSH
64195: LD_INT 5
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 4
64204: PUSH
64205: LD_INT 5
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 3
64214: PUSH
64215: LD_INT 4
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 3
64224: PUSH
64225: LD_INT 3
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 5
64234: PUSH
64235: LD_INT 3
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 3
64244: PUSH
64245: LD_INT 5
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: LD_INT 3
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: LD_INT 2
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 1
64274: PUSH
64275: LD_INT 3
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: LD_INT 4
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: LD_INT 4
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 1
64304: NEG
64305: PUSH
64306: LD_INT 3
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 1
64315: NEG
64316: PUSH
64317: LD_INT 2
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: LD_INT 4
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 2
64336: NEG
64337: PUSH
64338: LD_INT 2
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 4
64347: NEG
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 4
64358: NEG
64359: PUSH
64360: LD_INT 1
64362: NEG
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 3
64370: NEG
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 3
64381: NEG
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 4
64392: NEG
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 5
64403: NEG
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 5
64414: NEG
64415: PUSH
64416: LD_INT 1
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 5
64426: NEG
64427: PUSH
64428: LD_INT 2
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 3
64438: NEG
64439: PUSH
64440: LD_INT 2
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 3
64449: NEG
64450: PUSH
64451: LD_INT 3
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 3
64461: NEG
64462: PUSH
64463: LD_INT 4
64465: NEG
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 2
64473: NEG
64474: PUSH
64475: LD_INT 3
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 2
64485: NEG
64486: PUSH
64487: LD_INT 2
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 3
64497: NEG
64498: PUSH
64499: LD_INT 2
64501: NEG
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 4
64509: NEG
64510: PUSH
64511: LD_INT 3
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 4
64521: NEG
64522: PUSH
64523: LD_INT 4
64525: NEG
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 2
64533: NEG
64534: PUSH
64535: LD_INT 4
64537: NEG
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 4
64545: NEG
64546: PUSH
64547: LD_INT 2
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: LD_INT 4
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: LD_INT 5
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: PUSH
64580: LD_INT 4
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: LD_INT 3
64593: NEG
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 0
64601: PUSH
64602: LD_INT 3
64604: NEG
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 1
64612: NEG
64613: PUSH
64614: LD_INT 4
64616: NEG
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: LD_INT 5
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 2
64636: PUSH
64637: LD_INT 3
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 2
64647: NEG
64648: PUSH
64649: LD_INT 5
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64704: LD_ADDR_VAR 0 31
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: LD_INT 4
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: LD_INT 3
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: LD_INT 4
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 1
64741: PUSH
64742: LD_INT 5
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 0
64751: PUSH
64752: LD_INT 5
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 1
64761: NEG
64762: PUSH
64763: LD_INT 4
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: PUSH
64774: LD_INT 3
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 2
64783: PUSH
64784: LD_INT 5
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 2
64793: NEG
64794: PUSH
64795: LD_INT 3
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 3
64804: NEG
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 3
64815: NEG
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 2
64827: NEG
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 2
64838: NEG
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 3
64849: NEG
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 4
64860: NEG
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 4
64871: NEG
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 4
64883: NEG
64884: PUSH
64885: LD_INT 2
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 2
64895: NEG
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 4
64906: NEG
64907: PUSH
64908: LD_INT 4
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 4
64918: NEG
64919: PUSH
64920: LD_INT 5
64922: NEG
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 3
64930: NEG
64931: PUSH
64932: LD_INT 4
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 3
64942: NEG
64943: PUSH
64944: LD_INT 3
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 4
64954: NEG
64955: PUSH
64956: LD_INT 3
64958: NEG
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 5
64966: NEG
64967: PUSH
64968: LD_INT 4
64970: NEG
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 5
64978: NEG
64979: PUSH
64980: LD_INT 5
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 3
64990: NEG
64991: PUSH
64992: LD_INT 5
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 5
65002: NEG
65003: PUSH
65004: LD_INT 3
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: LD_INT 3
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: LD_INT 4
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: PUSH
65037: LD_INT 3
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: PUSH
65048: LD_INT 2
65050: NEG
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 0
65058: PUSH
65059: LD_INT 2
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 1
65069: NEG
65070: PUSH
65071: LD_INT 3
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 1
65081: NEG
65082: PUSH
65083: LD_INT 4
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: LD_INT 2
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 2
65104: NEG
65105: PUSH
65106: LD_INT 4
65108: NEG
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 4
65116: PUSH
65117: LD_INT 0
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 4
65126: PUSH
65127: LD_INT 1
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 5
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 5
65147: PUSH
65148: LD_INT 1
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 4
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 3
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 3
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 3
65188: PUSH
65189: LD_INT 2
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 5
65199: PUSH
65200: LD_INT 2
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65254: LD_ADDR_VAR 0 32
65258: PUSH
65259: LD_INT 4
65261: NEG
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 4
65272: NEG
65273: PUSH
65274: LD_INT 1
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 3
65284: NEG
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 3
65295: NEG
65296: PUSH
65297: LD_INT 1
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 4
65306: NEG
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 5
65317: NEG
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 5
65328: NEG
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 5
65340: NEG
65341: PUSH
65342: LD_INT 2
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 3
65352: NEG
65353: PUSH
65354: LD_INT 2
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 3
65363: NEG
65364: PUSH
65365: LD_INT 3
65367: NEG
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 3
65375: NEG
65376: PUSH
65377: LD_INT 4
65379: NEG
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 2
65387: NEG
65388: PUSH
65389: LD_INT 3
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 2
65399: NEG
65400: PUSH
65401: LD_INT 2
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 3
65411: NEG
65412: PUSH
65413: LD_INT 2
65415: NEG
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 4
65423: NEG
65424: PUSH
65425: LD_INT 3
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 4
65435: NEG
65436: PUSH
65437: LD_INT 4
65439: NEG
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 2
65447: NEG
65448: PUSH
65449: LD_INT 4
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 4
65459: NEG
65460: PUSH
65461: LD_INT 2
65463: NEG
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: LD_INT 4
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: LD_INT 5
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 1
65493: PUSH
65494: LD_INT 4
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: LD_INT 3
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: LD_INT 3
65518: NEG
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: LD_INT 4
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 1
65538: NEG
65539: PUSH
65540: LD_INT 5
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 2
65550: PUSH
65551: LD_INT 3
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 2
65561: NEG
65562: PUSH
65563: LD_INT 5
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 3
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 3
65583: PUSH
65584: LD_INT 1
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 4
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 4
65604: PUSH
65605: LD_INT 1
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 3
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 2
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 2
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 2
65645: PUSH
65646: LD_INT 2
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 4
65656: PUSH
65657: LD_INT 2
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 4
65666: PUSH
65667: LD_INT 4
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 4
65676: PUSH
65677: LD_INT 3
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 5
65686: PUSH
65687: LD_INT 4
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 5
65696: PUSH
65697: LD_INT 5
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 4
65706: PUSH
65707: LD_INT 5
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: LD_INT 4
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 3
65726: PUSH
65727: LD_INT 3
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 5
65736: PUSH
65737: LD_INT 3
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 3
65746: PUSH
65747: LD_INT 5
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65801: LD_ADDR_VAR 0 33
65805: PUSH
65806: LD_INT 4
65808: NEG
65809: PUSH
65810: LD_INT 4
65812: NEG
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 4
65820: NEG
65821: PUSH
65822: LD_INT 5
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 3
65832: NEG
65833: PUSH
65834: LD_INT 4
65836: NEG
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 3
65844: NEG
65845: PUSH
65846: LD_INT 3
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 4
65856: NEG
65857: PUSH
65858: LD_INT 3
65860: NEG
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 5
65868: NEG
65869: PUSH
65870: LD_INT 4
65872: NEG
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 5
65880: NEG
65881: PUSH
65882: LD_INT 5
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 3
65892: NEG
65893: PUSH
65894: LD_INT 5
65896: NEG
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 5
65904: NEG
65905: PUSH
65906: LD_INT 3
65908: NEG
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 0
65916: PUSH
65917: LD_INT 3
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: LD_INT 4
65930: NEG
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: LD_INT 3
65941: NEG
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 1
65949: PUSH
65950: LD_INT 2
65952: NEG
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: LD_INT 2
65963: NEG
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 1
65971: NEG
65972: PUSH
65973: LD_INT 3
65975: NEG
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 1
65983: NEG
65984: PUSH
65985: LD_INT 4
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 2
65995: PUSH
65996: LD_INT 2
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 2
66006: NEG
66007: PUSH
66008: LD_INT 4
66010: NEG
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 4
66018: PUSH
66019: LD_INT 0
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 4
66028: PUSH
66029: LD_INT 1
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 5
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 5
66049: PUSH
66050: LD_INT 1
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 4
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 3
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 3
66079: PUSH
66080: LD_INT 1
66082: NEG
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 3
66090: PUSH
66091: LD_INT 2
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 5
66101: PUSH
66102: LD_INT 2
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 3
66111: PUSH
66112: LD_INT 3
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 3
66121: PUSH
66122: LD_INT 2
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 4
66131: PUSH
66132: LD_INT 3
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 4
66141: PUSH
66142: LD_INT 4
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 3
66151: PUSH
66152: LD_INT 4
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 2
66161: PUSH
66162: LD_INT 3
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 2
66171: PUSH
66172: LD_INT 2
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 4
66181: PUSH
66182: LD_INT 2
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 2
66191: PUSH
66192: LD_INT 4
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 0
66201: PUSH
66202: LD_INT 4
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: LD_INT 3
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: LD_INT 4
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 1
66231: PUSH
66232: LD_INT 5
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 0
66241: PUSH
66242: LD_INT 5
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 1
66251: NEG
66252: PUSH
66253: LD_INT 4
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: NEG
66263: PUSH
66264: LD_INT 3
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 2
66273: PUSH
66274: LD_INT 5
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 2
66283: NEG
66284: PUSH
66285: LD_INT 3
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66339: LD_ADDR_VAR 0 34
66343: PUSH
66344: LD_INT 0
66346: PUSH
66347: LD_INT 4
66349: NEG
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: LD_INT 5
66360: NEG
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 1
66368: PUSH
66369: LD_INT 4
66371: NEG
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: LD_INT 3
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 0
66390: PUSH
66391: LD_INT 3
66393: NEG
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 1
66401: NEG
66402: PUSH
66403: LD_INT 4
66405: NEG
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 1
66413: NEG
66414: PUSH
66415: LD_INT 5
66417: NEG
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 2
66425: PUSH
66426: LD_INT 3
66428: NEG
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 2
66436: NEG
66437: PUSH
66438: LD_INT 5
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 3
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 3
66458: PUSH
66459: LD_INT 1
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 4
66469: PUSH
66470: LD_INT 0
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 4
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 3
66489: PUSH
66490: LD_INT 1
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 2
66499: PUSH
66500: LD_INT 0
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 2
66509: PUSH
66510: LD_INT 1
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 2
66520: PUSH
66521: LD_INT 2
66523: NEG
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 4
66531: PUSH
66532: LD_INT 2
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 4
66541: PUSH
66542: LD_INT 4
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 4
66551: PUSH
66552: LD_INT 3
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 5
66561: PUSH
66562: LD_INT 4
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 5
66571: PUSH
66572: LD_INT 5
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 4
66581: PUSH
66582: LD_INT 5
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 3
66591: PUSH
66592: LD_INT 4
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 3
66601: PUSH
66602: LD_INT 3
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 5
66611: PUSH
66612: LD_INT 3
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 3
66621: PUSH
66622: LD_INT 5
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 0
66631: PUSH
66632: LD_INT 3
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: LD_INT 2
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 1
66651: PUSH
66652: LD_INT 3
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: LD_INT 4
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: LD_INT 4
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 1
66681: NEG
66682: PUSH
66683: LD_INT 3
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 1
66692: NEG
66693: PUSH
66694: LD_INT 2
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 2
66703: PUSH
66704: LD_INT 4
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 2
66713: NEG
66714: PUSH
66715: LD_INT 2
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 4
66724: NEG
66725: PUSH
66726: LD_INT 0
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 4
66735: NEG
66736: PUSH
66737: LD_INT 1
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 3
66747: NEG
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 3
66758: NEG
66759: PUSH
66760: LD_INT 1
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 4
66769: NEG
66770: PUSH
66771: LD_INT 1
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 5
66780: NEG
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 5
66791: NEG
66792: PUSH
66793: LD_INT 1
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 5
66803: NEG
66804: PUSH
66805: LD_INT 2
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 3
66815: NEG
66816: PUSH
66817: LD_INT 2
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: ST_TO_ADDR
// end ; end ;
66871: GO 66874
66873: POP
// case btype of b_depot , b_warehouse :
66874: LD_VAR 0 1
66878: PUSH
66879: LD_INT 0
66881: DOUBLE
66882: EQUAL
66883: IFTRUE 66893
66885: LD_INT 1
66887: DOUBLE
66888: EQUAL
66889: IFTRUE 66893
66891: GO 67094
66893: POP
// case nation of nation_american :
66894: LD_VAR 0 5
66898: PUSH
66899: LD_INT 1
66901: DOUBLE
66902: EQUAL
66903: IFTRUE 66907
66905: GO 66963
66907: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66908: LD_ADDR_VAR 0 9
66912: PUSH
66913: LD_VAR 0 11
66917: PUSH
66918: LD_VAR 0 12
66922: PUSH
66923: LD_VAR 0 13
66927: PUSH
66928: LD_VAR 0 14
66932: PUSH
66933: LD_VAR 0 15
66937: PUSH
66938: LD_VAR 0 16
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: PUSH
66951: LD_VAR 0 4
66955: PUSH
66956: LD_INT 1
66958: PLUS
66959: ARRAY
66960: ST_TO_ADDR
66961: GO 67092
66963: LD_INT 2
66965: DOUBLE
66966: EQUAL
66967: IFTRUE 66971
66969: GO 67027
66971: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66972: LD_ADDR_VAR 0 9
66976: PUSH
66977: LD_VAR 0 17
66981: PUSH
66982: LD_VAR 0 18
66986: PUSH
66987: LD_VAR 0 19
66991: PUSH
66992: LD_VAR 0 20
66996: PUSH
66997: LD_VAR 0 21
67001: PUSH
67002: LD_VAR 0 22
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: PUSH
67015: LD_VAR 0 4
67019: PUSH
67020: LD_INT 1
67022: PLUS
67023: ARRAY
67024: ST_TO_ADDR
67025: GO 67092
67027: LD_INT 3
67029: DOUBLE
67030: EQUAL
67031: IFTRUE 67035
67033: GO 67091
67035: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67036: LD_ADDR_VAR 0 9
67040: PUSH
67041: LD_VAR 0 23
67045: PUSH
67046: LD_VAR 0 24
67050: PUSH
67051: LD_VAR 0 25
67055: PUSH
67056: LD_VAR 0 26
67060: PUSH
67061: LD_VAR 0 27
67065: PUSH
67066: LD_VAR 0 28
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: PUSH
67079: LD_VAR 0 4
67083: PUSH
67084: LD_INT 1
67086: PLUS
67087: ARRAY
67088: ST_TO_ADDR
67089: GO 67092
67091: POP
67092: GO 67647
67094: LD_INT 2
67096: DOUBLE
67097: EQUAL
67098: IFTRUE 67108
67100: LD_INT 3
67102: DOUBLE
67103: EQUAL
67104: IFTRUE 67108
67106: GO 67164
67108: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67109: LD_ADDR_VAR 0 9
67113: PUSH
67114: LD_VAR 0 29
67118: PUSH
67119: LD_VAR 0 30
67123: PUSH
67124: LD_VAR 0 31
67128: PUSH
67129: LD_VAR 0 32
67133: PUSH
67134: LD_VAR 0 33
67138: PUSH
67139: LD_VAR 0 34
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: PUSH
67152: LD_VAR 0 4
67156: PUSH
67157: LD_INT 1
67159: PLUS
67160: ARRAY
67161: ST_TO_ADDR
67162: GO 67647
67164: LD_INT 16
67166: DOUBLE
67167: EQUAL
67168: IFTRUE 67226
67170: LD_INT 17
67172: DOUBLE
67173: EQUAL
67174: IFTRUE 67226
67176: LD_INT 18
67178: DOUBLE
67179: EQUAL
67180: IFTRUE 67226
67182: LD_INT 19
67184: DOUBLE
67185: EQUAL
67186: IFTRUE 67226
67188: LD_INT 22
67190: DOUBLE
67191: EQUAL
67192: IFTRUE 67226
67194: LD_INT 20
67196: DOUBLE
67197: EQUAL
67198: IFTRUE 67226
67200: LD_INT 21
67202: DOUBLE
67203: EQUAL
67204: IFTRUE 67226
67206: LD_INT 23
67208: DOUBLE
67209: EQUAL
67210: IFTRUE 67226
67212: LD_INT 24
67214: DOUBLE
67215: EQUAL
67216: IFTRUE 67226
67218: LD_INT 25
67220: DOUBLE
67221: EQUAL
67222: IFTRUE 67226
67224: GO 67282
67226: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67227: LD_ADDR_VAR 0 9
67231: PUSH
67232: LD_VAR 0 35
67236: PUSH
67237: LD_VAR 0 36
67241: PUSH
67242: LD_VAR 0 37
67246: PUSH
67247: LD_VAR 0 38
67251: PUSH
67252: LD_VAR 0 39
67256: PUSH
67257: LD_VAR 0 40
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: PUSH
67270: LD_VAR 0 4
67274: PUSH
67275: LD_INT 1
67277: PLUS
67278: ARRAY
67279: ST_TO_ADDR
67280: GO 67647
67282: LD_INT 6
67284: DOUBLE
67285: EQUAL
67286: IFTRUE 67338
67288: LD_INT 7
67290: DOUBLE
67291: EQUAL
67292: IFTRUE 67338
67294: LD_INT 8
67296: DOUBLE
67297: EQUAL
67298: IFTRUE 67338
67300: LD_INT 13
67302: DOUBLE
67303: EQUAL
67304: IFTRUE 67338
67306: LD_INT 12
67308: DOUBLE
67309: EQUAL
67310: IFTRUE 67338
67312: LD_INT 15
67314: DOUBLE
67315: EQUAL
67316: IFTRUE 67338
67318: LD_INT 11
67320: DOUBLE
67321: EQUAL
67322: IFTRUE 67338
67324: LD_INT 14
67326: DOUBLE
67327: EQUAL
67328: IFTRUE 67338
67330: LD_INT 10
67332: DOUBLE
67333: EQUAL
67334: IFTRUE 67338
67336: GO 67394
67338: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67339: LD_ADDR_VAR 0 9
67343: PUSH
67344: LD_VAR 0 41
67348: PUSH
67349: LD_VAR 0 42
67353: PUSH
67354: LD_VAR 0 43
67358: PUSH
67359: LD_VAR 0 44
67363: PUSH
67364: LD_VAR 0 45
67368: PUSH
67369: LD_VAR 0 46
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: PUSH
67382: LD_VAR 0 4
67386: PUSH
67387: LD_INT 1
67389: PLUS
67390: ARRAY
67391: ST_TO_ADDR
67392: GO 67647
67394: LD_INT 36
67396: DOUBLE
67397: EQUAL
67398: IFTRUE 67402
67400: GO 67458
67402: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67403: LD_ADDR_VAR 0 9
67407: PUSH
67408: LD_VAR 0 47
67412: PUSH
67413: LD_VAR 0 48
67417: PUSH
67418: LD_VAR 0 49
67422: PUSH
67423: LD_VAR 0 50
67427: PUSH
67428: LD_VAR 0 51
67432: PUSH
67433: LD_VAR 0 52
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: PUSH
67446: LD_VAR 0 4
67450: PUSH
67451: LD_INT 1
67453: PLUS
67454: ARRAY
67455: ST_TO_ADDR
67456: GO 67647
67458: LD_INT 4
67460: DOUBLE
67461: EQUAL
67462: IFTRUE 67484
67464: LD_INT 5
67466: DOUBLE
67467: EQUAL
67468: IFTRUE 67484
67470: LD_INT 34
67472: DOUBLE
67473: EQUAL
67474: IFTRUE 67484
67476: LD_INT 37
67478: DOUBLE
67479: EQUAL
67480: IFTRUE 67484
67482: GO 67540
67484: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67485: LD_ADDR_VAR 0 9
67489: PUSH
67490: LD_VAR 0 53
67494: PUSH
67495: LD_VAR 0 54
67499: PUSH
67500: LD_VAR 0 55
67504: PUSH
67505: LD_VAR 0 56
67509: PUSH
67510: LD_VAR 0 57
67514: PUSH
67515: LD_VAR 0 58
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: PUSH
67528: LD_VAR 0 4
67532: PUSH
67533: LD_INT 1
67535: PLUS
67536: ARRAY
67537: ST_TO_ADDR
67538: GO 67647
67540: LD_INT 31
67542: DOUBLE
67543: EQUAL
67544: IFTRUE 67590
67546: LD_INT 32
67548: DOUBLE
67549: EQUAL
67550: IFTRUE 67590
67552: LD_INT 33
67554: DOUBLE
67555: EQUAL
67556: IFTRUE 67590
67558: LD_INT 27
67560: DOUBLE
67561: EQUAL
67562: IFTRUE 67590
67564: LD_INT 26
67566: DOUBLE
67567: EQUAL
67568: IFTRUE 67590
67570: LD_INT 28
67572: DOUBLE
67573: EQUAL
67574: IFTRUE 67590
67576: LD_INT 29
67578: DOUBLE
67579: EQUAL
67580: IFTRUE 67590
67582: LD_INT 30
67584: DOUBLE
67585: EQUAL
67586: IFTRUE 67590
67588: GO 67646
67590: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67591: LD_ADDR_VAR 0 9
67595: PUSH
67596: LD_VAR 0 59
67600: PUSH
67601: LD_VAR 0 60
67605: PUSH
67606: LD_VAR 0 61
67610: PUSH
67611: LD_VAR 0 62
67615: PUSH
67616: LD_VAR 0 63
67620: PUSH
67621: LD_VAR 0 64
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: PUSH
67634: LD_VAR 0 4
67638: PUSH
67639: LD_INT 1
67641: PLUS
67642: ARRAY
67643: ST_TO_ADDR
67644: GO 67647
67646: POP
// temp_list2 = [ ] ;
67647: LD_ADDR_VAR 0 10
67651: PUSH
67652: EMPTY
67653: ST_TO_ADDR
// for i in temp_list do
67654: LD_ADDR_VAR 0 8
67658: PUSH
67659: LD_VAR 0 9
67663: PUSH
67664: FOR_IN
67665: IFFALSE 67717
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67667: LD_ADDR_VAR 0 10
67671: PUSH
67672: LD_VAR 0 10
67676: PUSH
67677: LD_VAR 0 8
67681: PUSH
67682: LD_INT 1
67684: ARRAY
67685: PUSH
67686: LD_VAR 0 2
67690: PLUS
67691: PUSH
67692: LD_VAR 0 8
67696: PUSH
67697: LD_INT 2
67699: ARRAY
67700: PUSH
67701: LD_VAR 0 3
67705: PLUS
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: EMPTY
67712: LIST
67713: ADD
67714: ST_TO_ADDR
67715: GO 67664
67717: POP
67718: POP
// result = temp_list2 ;
67719: LD_ADDR_VAR 0 7
67723: PUSH
67724: LD_VAR 0 10
67728: ST_TO_ADDR
// end ;
67729: LD_VAR 0 7
67733: RET
// export function EnemyInRange ( unit , dist ) ; begin
67734: LD_INT 0
67736: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67737: LD_ADDR_VAR 0 3
67741: PUSH
67742: LD_VAR 0 1
67746: PPUSH
67747: CALL_OW 255
67751: PPUSH
67752: LD_VAR 0 1
67756: PPUSH
67757: CALL_OW 250
67761: PPUSH
67762: LD_VAR 0 1
67766: PPUSH
67767: CALL_OW 251
67771: PPUSH
67772: LD_VAR 0 2
67776: PPUSH
67777: CALL 41838 0 4
67781: PUSH
67782: LD_INT 4
67784: ARRAY
67785: ST_TO_ADDR
// end ;
67786: LD_VAR 0 3
67790: RET
// export function PlayerSeeMe ( unit ) ; begin
67791: LD_INT 0
67793: PPUSH
// result := See ( your_side , unit ) ;
67794: LD_ADDR_VAR 0 2
67798: PUSH
67799: LD_OWVAR 2
67803: PPUSH
67804: LD_VAR 0 1
67808: PPUSH
67809: CALL_OW 292
67813: ST_TO_ADDR
// end ;
67814: LD_VAR 0 2
67818: RET
// export function ReverseDir ( unit ) ; begin
67819: LD_INT 0
67821: PPUSH
// if not unit then
67822: LD_VAR 0 1
67826: NOT
67827: IFFALSE 67831
// exit ;
67829: GO 67854
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67831: LD_ADDR_VAR 0 2
67835: PUSH
67836: LD_VAR 0 1
67840: PPUSH
67841: CALL_OW 254
67845: PUSH
67846: LD_INT 3
67848: PLUS
67849: PUSH
67850: LD_INT 6
67852: MOD
67853: ST_TO_ADDR
// end ;
67854: LD_VAR 0 2
67858: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67859: LD_INT 0
67861: PPUSH
67862: PPUSH
67863: PPUSH
67864: PPUSH
67865: PPUSH
// if not hexes then
67866: LD_VAR 0 2
67870: NOT
67871: IFFALSE 67875
// exit ;
67873: GO 68023
// dist := 9999 ;
67875: LD_ADDR_VAR 0 5
67879: PUSH
67880: LD_INT 9999
67882: ST_TO_ADDR
// for i = 1 to hexes do
67883: LD_ADDR_VAR 0 4
67887: PUSH
67888: DOUBLE
67889: LD_INT 1
67891: DEC
67892: ST_TO_ADDR
67893: LD_VAR 0 2
67897: PUSH
67898: FOR_TO
67899: IFFALSE 68011
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67901: LD_VAR 0 1
67905: PPUSH
67906: LD_VAR 0 2
67910: PUSH
67911: LD_VAR 0 4
67915: ARRAY
67916: PUSH
67917: LD_INT 1
67919: ARRAY
67920: PPUSH
67921: LD_VAR 0 2
67925: PUSH
67926: LD_VAR 0 4
67930: ARRAY
67931: PUSH
67932: LD_INT 2
67934: ARRAY
67935: PPUSH
67936: CALL_OW 297
67940: PUSH
67941: LD_VAR 0 5
67945: LESS
67946: IFFALSE 68009
// begin hex := hexes [ i ] ;
67948: LD_ADDR_VAR 0 7
67952: PUSH
67953: LD_VAR 0 2
67957: PUSH
67958: LD_VAR 0 4
67962: ARRAY
67963: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67964: LD_ADDR_VAR 0 5
67968: PUSH
67969: LD_VAR 0 1
67973: PPUSH
67974: LD_VAR 0 2
67978: PUSH
67979: LD_VAR 0 4
67983: ARRAY
67984: PUSH
67985: LD_INT 1
67987: ARRAY
67988: PPUSH
67989: LD_VAR 0 2
67993: PUSH
67994: LD_VAR 0 4
67998: ARRAY
67999: PUSH
68000: LD_INT 2
68002: ARRAY
68003: PPUSH
68004: CALL_OW 297
68008: ST_TO_ADDR
// end ; end ;
68009: GO 67898
68011: POP
68012: POP
// result := hex ;
68013: LD_ADDR_VAR 0 3
68017: PUSH
68018: LD_VAR 0 7
68022: ST_TO_ADDR
// end ;
68023: LD_VAR 0 3
68027: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68028: LD_INT 0
68030: PPUSH
68031: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68032: LD_VAR 0 1
68036: NOT
68037: PUSH
68038: LD_VAR 0 1
68042: PUSH
68043: LD_INT 21
68045: PUSH
68046: LD_INT 2
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 23
68055: PUSH
68056: LD_INT 2
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PPUSH
68067: CALL_OW 69
68071: IN
68072: NOT
68073: OR
68074: IFFALSE 68078
// exit ;
68076: GO 68125
// for i = 1 to 3 do
68078: LD_ADDR_VAR 0 3
68082: PUSH
68083: DOUBLE
68084: LD_INT 1
68086: DEC
68087: ST_TO_ADDR
68088: LD_INT 3
68090: PUSH
68091: FOR_TO
68092: IFFALSE 68123
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68094: LD_VAR 0 1
68098: PPUSH
68099: CALL_OW 250
68103: PPUSH
68104: LD_VAR 0 1
68108: PPUSH
68109: CALL_OW 251
68113: PPUSH
68114: LD_INT 1
68116: PPUSH
68117: CALL_OW 453
68121: GO 68091
68123: POP
68124: POP
// end ;
68125: LD_VAR 0 2
68129: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68130: LD_INT 0
68132: PPUSH
68133: PPUSH
68134: PPUSH
68135: PPUSH
68136: PPUSH
68137: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68138: LD_VAR 0 1
68142: NOT
68143: PUSH
68144: LD_VAR 0 2
68148: NOT
68149: OR
68150: PUSH
68151: LD_VAR 0 1
68155: PPUSH
68156: CALL_OW 314
68160: OR
68161: IFFALSE 68165
// exit ;
68163: GO 68606
// x := GetX ( enemy_unit ) ;
68165: LD_ADDR_VAR 0 7
68169: PUSH
68170: LD_VAR 0 2
68174: PPUSH
68175: CALL_OW 250
68179: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68180: LD_ADDR_VAR 0 8
68184: PUSH
68185: LD_VAR 0 2
68189: PPUSH
68190: CALL_OW 251
68194: ST_TO_ADDR
// if not x or not y then
68195: LD_VAR 0 7
68199: NOT
68200: PUSH
68201: LD_VAR 0 8
68205: NOT
68206: OR
68207: IFFALSE 68211
// exit ;
68209: GO 68606
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68211: LD_ADDR_VAR 0 6
68215: PUSH
68216: LD_VAR 0 7
68220: PPUSH
68221: LD_INT 0
68223: PPUSH
68224: LD_INT 4
68226: PPUSH
68227: CALL_OW 272
68231: PUSH
68232: LD_VAR 0 8
68236: PPUSH
68237: LD_INT 0
68239: PPUSH
68240: LD_INT 4
68242: PPUSH
68243: CALL_OW 273
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_VAR 0 7
68256: PPUSH
68257: LD_INT 1
68259: PPUSH
68260: LD_INT 4
68262: PPUSH
68263: CALL_OW 272
68267: PUSH
68268: LD_VAR 0 8
68272: PPUSH
68273: LD_INT 1
68275: PPUSH
68276: LD_INT 4
68278: PPUSH
68279: CALL_OW 273
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_VAR 0 7
68292: PPUSH
68293: LD_INT 2
68295: PPUSH
68296: LD_INT 4
68298: PPUSH
68299: CALL_OW 272
68303: PUSH
68304: LD_VAR 0 8
68308: PPUSH
68309: LD_INT 2
68311: PPUSH
68312: LD_INT 4
68314: PPUSH
68315: CALL_OW 273
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_VAR 0 7
68328: PPUSH
68329: LD_INT 3
68331: PPUSH
68332: LD_INT 4
68334: PPUSH
68335: CALL_OW 272
68339: PUSH
68340: LD_VAR 0 8
68344: PPUSH
68345: LD_INT 3
68347: PPUSH
68348: LD_INT 4
68350: PPUSH
68351: CALL_OW 273
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_VAR 0 7
68364: PPUSH
68365: LD_INT 4
68367: PPUSH
68368: LD_INT 4
68370: PPUSH
68371: CALL_OW 272
68375: PUSH
68376: LD_VAR 0 8
68380: PPUSH
68381: LD_INT 4
68383: PPUSH
68384: LD_INT 4
68386: PPUSH
68387: CALL_OW 273
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_VAR 0 7
68400: PPUSH
68401: LD_INT 5
68403: PPUSH
68404: LD_INT 4
68406: PPUSH
68407: CALL_OW 272
68411: PUSH
68412: LD_VAR 0 8
68416: PPUSH
68417: LD_INT 5
68419: PPUSH
68420: LD_INT 4
68422: PPUSH
68423: CALL_OW 273
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: ST_TO_ADDR
// for i = tmp downto 1 do
68440: LD_ADDR_VAR 0 4
68444: PUSH
68445: DOUBLE
68446: LD_VAR 0 6
68450: INC
68451: ST_TO_ADDR
68452: LD_INT 1
68454: PUSH
68455: FOR_DOWNTO
68456: IFFALSE 68557
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68458: LD_VAR 0 6
68462: PUSH
68463: LD_VAR 0 4
68467: ARRAY
68468: PUSH
68469: LD_INT 1
68471: ARRAY
68472: PPUSH
68473: LD_VAR 0 6
68477: PUSH
68478: LD_VAR 0 4
68482: ARRAY
68483: PUSH
68484: LD_INT 2
68486: ARRAY
68487: PPUSH
68488: CALL_OW 488
68492: NOT
68493: PUSH
68494: LD_VAR 0 6
68498: PUSH
68499: LD_VAR 0 4
68503: ARRAY
68504: PUSH
68505: LD_INT 1
68507: ARRAY
68508: PPUSH
68509: LD_VAR 0 6
68513: PUSH
68514: LD_VAR 0 4
68518: ARRAY
68519: PUSH
68520: LD_INT 2
68522: ARRAY
68523: PPUSH
68524: CALL_OW 428
68528: PUSH
68529: LD_INT 0
68531: NONEQUAL
68532: OR
68533: IFFALSE 68555
// tmp := Delete ( tmp , i ) ;
68535: LD_ADDR_VAR 0 6
68539: PUSH
68540: LD_VAR 0 6
68544: PPUSH
68545: LD_VAR 0 4
68549: PPUSH
68550: CALL_OW 3
68554: ST_TO_ADDR
68555: GO 68455
68557: POP
68558: POP
// j := GetClosestHex ( unit , tmp ) ;
68559: LD_ADDR_VAR 0 5
68563: PUSH
68564: LD_VAR 0 1
68568: PPUSH
68569: LD_VAR 0 6
68573: PPUSH
68574: CALL 67859 0 2
68578: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68579: LD_VAR 0 1
68583: PPUSH
68584: LD_VAR 0 5
68588: PUSH
68589: LD_INT 1
68591: ARRAY
68592: PPUSH
68593: LD_VAR 0 5
68597: PUSH
68598: LD_INT 2
68600: ARRAY
68601: PPUSH
68602: CALL_OW 111
// end ;
68606: LD_VAR 0 3
68610: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68611: LD_INT 0
68613: PPUSH
68614: PPUSH
68615: PPUSH
// uc_side = 0 ;
68616: LD_ADDR_OWVAR 20
68620: PUSH
68621: LD_INT 0
68623: ST_TO_ADDR
// uc_nation = 0 ;
68624: LD_ADDR_OWVAR 21
68628: PUSH
68629: LD_INT 0
68631: ST_TO_ADDR
// InitHc_All ( ) ;
68632: CALL_OW 584
// InitVc ;
68636: CALL_OW 20
// if mastodonts then
68640: LD_VAR 0 6
68644: IFFALSE 68711
// for i = 1 to mastodonts do
68646: LD_ADDR_VAR 0 11
68650: PUSH
68651: DOUBLE
68652: LD_INT 1
68654: DEC
68655: ST_TO_ADDR
68656: LD_VAR 0 6
68660: PUSH
68661: FOR_TO
68662: IFFALSE 68709
// begin vc_chassis := 31 ;
68664: LD_ADDR_OWVAR 37
68668: PUSH
68669: LD_INT 31
68671: ST_TO_ADDR
// vc_control := control_rider ;
68672: LD_ADDR_OWVAR 38
68676: PUSH
68677: LD_INT 4
68679: ST_TO_ADDR
// animal := CreateVehicle ;
68680: LD_ADDR_VAR 0 12
68684: PUSH
68685: CALL_OW 45
68689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68690: LD_VAR 0 12
68694: PPUSH
68695: LD_VAR 0 8
68699: PPUSH
68700: LD_INT 0
68702: PPUSH
68703: CALL 70899 0 3
// end ;
68707: GO 68661
68709: POP
68710: POP
// if horses then
68711: LD_VAR 0 5
68715: IFFALSE 68782
// for i = 1 to horses do
68717: LD_ADDR_VAR 0 11
68721: PUSH
68722: DOUBLE
68723: LD_INT 1
68725: DEC
68726: ST_TO_ADDR
68727: LD_VAR 0 5
68731: PUSH
68732: FOR_TO
68733: IFFALSE 68780
// begin hc_class := 21 ;
68735: LD_ADDR_OWVAR 28
68739: PUSH
68740: LD_INT 21
68742: ST_TO_ADDR
// hc_gallery :=  ;
68743: LD_ADDR_OWVAR 33
68747: PUSH
68748: LD_STRING 
68750: ST_TO_ADDR
// animal := CreateHuman ;
68751: LD_ADDR_VAR 0 12
68755: PUSH
68756: CALL_OW 44
68760: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68761: LD_VAR 0 12
68765: PPUSH
68766: LD_VAR 0 8
68770: PPUSH
68771: LD_INT 0
68773: PPUSH
68774: CALL 70899 0 3
// end ;
68778: GO 68732
68780: POP
68781: POP
// if birds then
68782: LD_VAR 0 1
68786: IFFALSE 68853
// for i = 1 to birds do
68788: LD_ADDR_VAR 0 11
68792: PUSH
68793: DOUBLE
68794: LD_INT 1
68796: DEC
68797: ST_TO_ADDR
68798: LD_VAR 0 1
68802: PUSH
68803: FOR_TO
68804: IFFALSE 68851
// begin hc_class = 18 ;
68806: LD_ADDR_OWVAR 28
68810: PUSH
68811: LD_INT 18
68813: ST_TO_ADDR
// hc_gallery =  ;
68814: LD_ADDR_OWVAR 33
68818: PUSH
68819: LD_STRING 
68821: ST_TO_ADDR
// animal := CreateHuman ;
68822: LD_ADDR_VAR 0 12
68826: PUSH
68827: CALL_OW 44
68831: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68832: LD_VAR 0 12
68836: PPUSH
68837: LD_VAR 0 8
68841: PPUSH
68842: LD_INT 0
68844: PPUSH
68845: CALL 70899 0 3
// end ;
68849: GO 68803
68851: POP
68852: POP
// if tigers then
68853: LD_VAR 0 2
68857: IFFALSE 68941
// for i = 1 to tigers do
68859: LD_ADDR_VAR 0 11
68863: PUSH
68864: DOUBLE
68865: LD_INT 1
68867: DEC
68868: ST_TO_ADDR
68869: LD_VAR 0 2
68873: PUSH
68874: FOR_TO
68875: IFFALSE 68939
// begin hc_class = class_tiger ;
68877: LD_ADDR_OWVAR 28
68881: PUSH
68882: LD_INT 14
68884: ST_TO_ADDR
// hc_gallery =  ;
68885: LD_ADDR_OWVAR 33
68889: PUSH
68890: LD_STRING 
68892: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68893: LD_ADDR_OWVAR 35
68897: PUSH
68898: LD_INT 7
68900: NEG
68901: PPUSH
68902: LD_INT 7
68904: PPUSH
68905: CALL_OW 12
68909: ST_TO_ADDR
// animal := CreateHuman ;
68910: LD_ADDR_VAR 0 12
68914: PUSH
68915: CALL_OW 44
68919: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68920: LD_VAR 0 12
68924: PPUSH
68925: LD_VAR 0 8
68929: PPUSH
68930: LD_INT 0
68932: PPUSH
68933: CALL 70899 0 3
// end ;
68937: GO 68874
68939: POP
68940: POP
// if apemans then
68941: LD_VAR 0 3
68945: IFFALSE 69068
// for i = 1 to apemans do
68947: LD_ADDR_VAR 0 11
68951: PUSH
68952: DOUBLE
68953: LD_INT 1
68955: DEC
68956: ST_TO_ADDR
68957: LD_VAR 0 3
68961: PUSH
68962: FOR_TO
68963: IFFALSE 69066
// begin hc_class = class_apeman ;
68965: LD_ADDR_OWVAR 28
68969: PUSH
68970: LD_INT 12
68972: ST_TO_ADDR
// hc_gallery =  ;
68973: LD_ADDR_OWVAR 33
68977: PUSH
68978: LD_STRING 
68980: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
68981: LD_ADDR_OWVAR 35
68985: PUSH
68986: LD_INT 5
68988: NEG
68989: PPUSH
68990: LD_INT 5
68992: PPUSH
68993: CALL_OW 12
68997: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68998: LD_ADDR_OWVAR 31
69002: PUSH
69003: LD_INT 1
69005: PPUSH
69006: LD_INT 3
69008: PPUSH
69009: CALL_OW 12
69013: PUSH
69014: LD_INT 1
69016: PPUSH
69017: LD_INT 3
69019: PPUSH
69020: CALL_OW 12
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: LD_INT 0
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: ST_TO_ADDR
// animal := CreateHuman ;
69037: LD_ADDR_VAR 0 12
69041: PUSH
69042: CALL_OW 44
69046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69047: LD_VAR 0 12
69051: PPUSH
69052: LD_VAR 0 8
69056: PPUSH
69057: LD_INT 0
69059: PPUSH
69060: CALL 70899 0 3
// end ;
69064: GO 68962
69066: POP
69067: POP
// if enchidnas then
69068: LD_VAR 0 4
69072: IFFALSE 69139
// for i = 1 to enchidnas do
69074: LD_ADDR_VAR 0 11
69078: PUSH
69079: DOUBLE
69080: LD_INT 1
69082: DEC
69083: ST_TO_ADDR
69084: LD_VAR 0 4
69088: PUSH
69089: FOR_TO
69090: IFFALSE 69137
// begin hc_class = 13 ;
69092: LD_ADDR_OWVAR 28
69096: PUSH
69097: LD_INT 13
69099: ST_TO_ADDR
// hc_gallery =  ;
69100: LD_ADDR_OWVAR 33
69104: PUSH
69105: LD_STRING 
69107: ST_TO_ADDR
// animal := CreateHuman ;
69108: LD_ADDR_VAR 0 12
69112: PUSH
69113: CALL_OW 44
69117: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69118: LD_VAR 0 12
69122: PPUSH
69123: LD_VAR 0 8
69127: PPUSH
69128: LD_INT 0
69130: PPUSH
69131: CALL 70899 0 3
// end ;
69135: GO 69089
69137: POP
69138: POP
// if fishes then
69139: LD_VAR 0 7
69143: IFFALSE 69210
// for i = 1 to fishes do
69145: LD_ADDR_VAR 0 11
69149: PUSH
69150: DOUBLE
69151: LD_INT 1
69153: DEC
69154: ST_TO_ADDR
69155: LD_VAR 0 7
69159: PUSH
69160: FOR_TO
69161: IFFALSE 69208
// begin hc_class = 20 ;
69163: LD_ADDR_OWVAR 28
69167: PUSH
69168: LD_INT 20
69170: ST_TO_ADDR
// hc_gallery =  ;
69171: LD_ADDR_OWVAR 33
69175: PUSH
69176: LD_STRING 
69178: ST_TO_ADDR
// animal := CreateHuman ;
69179: LD_ADDR_VAR 0 12
69183: PUSH
69184: CALL_OW 44
69188: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69189: LD_VAR 0 12
69193: PPUSH
69194: LD_VAR 0 9
69198: PPUSH
69199: LD_INT 0
69201: PPUSH
69202: CALL 70899 0 3
// end ;
69206: GO 69160
69208: POP
69209: POP
// end ;
69210: LD_VAR 0 10
69214: RET
// export function WantHeal ( sci , unit ) ; begin
69215: LD_INT 0
69217: PPUSH
// if GetTaskList ( sci ) > 0 then
69218: LD_VAR 0 1
69222: PPUSH
69223: CALL_OW 437
69227: PUSH
69228: LD_INT 0
69230: GREATER
69231: IFFALSE 69301
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69233: LD_VAR 0 1
69237: PPUSH
69238: CALL_OW 437
69242: PUSH
69243: LD_INT 1
69245: ARRAY
69246: PUSH
69247: LD_INT 1
69249: ARRAY
69250: PUSH
69251: LD_STRING l
69253: EQUAL
69254: PUSH
69255: LD_VAR 0 1
69259: PPUSH
69260: CALL_OW 437
69264: PUSH
69265: LD_INT 1
69267: ARRAY
69268: PUSH
69269: LD_INT 4
69271: ARRAY
69272: PUSH
69273: LD_VAR 0 2
69277: EQUAL
69278: AND
69279: IFFALSE 69291
// result := true else
69281: LD_ADDR_VAR 0 3
69285: PUSH
69286: LD_INT 1
69288: ST_TO_ADDR
69289: GO 69299
// result := false ;
69291: LD_ADDR_VAR 0 3
69295: PUSH
69296: LD_INT 0
69298: ST_TO_ADDR
// end else
69299: GO 69309
// result := false ;
69301: LD_ADDR_VAR 0 3
69305: PUSH
69306: LD_INT 0
69308: ST_TO_ADDR
// end ;
69309: LD_VAR 0 3
69313: RET
// export function HealTarget ( sci ) ; begin
69314: LD_INT 0
69316: PPUSH
// if not sci then
69317: LD_VAR 0 1
69321: NOT
69322: IFFALSE 69326
// exit ;
69324: GO 69391
// result := 0 ;
69326: LD_ADDR_VAR 0 2
69330: PUSH
69331: LD_INT 0
69333: ST_TO_ADDR
// if GetTaskList ( sci ) then
69334: LD_VAR 0 1
69338: PPUSH
69339: CALL_OW 437
69343: IFFALSE 69391
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69345: LD_VAR 0 1
69349: PPUSH
69350: CALL_OW 437
69354: PUSH
69355: LD_INT 1
69357: ARRAY
69358: PUSH
69359: LD_INT 1
69361: ARRAY
69362: PUSH
69363: LD_STRING l
69365: EQUAL
69366: IFFALSE 69391
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69368: LD_ADDR_VAR 0 2
69372: PUSH
69373: LD_VAR 0 1
69377: PPUSH
69378: CALL_OW 437
69382: PUSH
69383: LD_INT 1
69385: ARRAY
69386: PUSH
69387: LD_INT 4
69389: ARRAY
69390: ST_TO_ADDR
// end ;
69391: LD_VAR 0 2
69395: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69396: LD_INT 0
69398: PPUSH
69399: PPUSH
69400: PPUSH
69401: PPUSH
// if not base_units then
69402: LD_VAR 0 1
69406: NOT
69407: IFFALSE 69411
// exit ;
69409: GO 69498
// result := false ;
69411: LD_ADDR_VAR 0 2
69415: PUSH
69416: LD_INT 0
69418: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69419: LD_ADDR_VAR 0 5
69423: PUSH
69424: LD_VAR 0 1
69428: PPUSH
69429: LD_INT 21
69431: PUSH
69432: LD_INT 3
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PPUSH
69439: CALL_OW 72
69443: ST_TO_ADDR
// if not tmp then
69444: LD_VAR 0 5
69448: NOT
69449: IFFALSE 69453
// exit ;
69451: GO 69498
// for i in tmp do
69453: LD_ADDR_VAR 0 3
69457: PUSH
69458: LD_VAR 0 5
69462: PUSH
69463: FOR_IN
69464: IFFALSE 69496
// begin result := EnemyInRange ( i , 22 ) ;
69466: LD_ADDR_VAR 0 2
69470: PUSH
69471: LD_VAR 0 3
69475: PPUSH
69476: LD_INT 22
69478: PPUSH
69479: CALL 67734 0 2
69483: ST_TO_ADDR
// if result then
69484: LD_VAR 0 2
69488: IFFALSE 69494
// exit ;
69490: POP
69491: POP
69492: GO 69498
// end ;
69494: GO 69463
69496: POP
69497: POP
// end ;
69498: LD_VAR 0 2
69502: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69503: LD_INT 0
69505: PPUSH
69506: PPUSH
// if not units then
69507: LD_VAR 0 1
69511: NOT
69512: IFFALSE 69516
// exit ;
69514: GO 69586
// result := [ ] ;
69516: LD_ADDR_VAR 0 3
69520: PUSH
69521: EMPTY
69522: ST_TO_ADDR
// for i in units do
69523: LD_ADDR_VAR 0 4
69527: PUSH
69528: LD_VAR 0 1
69532: PUSH
69533: FOR_IN
69534: IFFALSE 69584
// if GetTag ( i ) = tag then
69536: LD_VAR 0 4
69540: PPUSH
69541: CALL_OW 110
69545: PUSH
69546: LD_VAR 0 2
69550: EQUAL
69551: IFFALSE 69582
// result := Insert ( result , result + 1 , i ) ;
69553: LD_ADDR_VAR 0 3
69557: PUSH
69558: LD_VAR 0 3
69562: PPUSH
69563: LD_VAR 0 3
69567: PUSH
69568: LD_INT 1
69570: PLUS
69571: PPUSH
69572: LD_VAR 0 4
69576: PPUSH
69577: CALL_OW 2
69581: ST_TO_ADDR
69582: GO 69533
69584: POP
69585: POP
// end ;
69586: LD_VAR 0 3
69590: RET
// export function IsDriver ( un ) ; begin
69591: LD_INT 0
69593: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69594: LD_ADDR_VAR 0 2
69598: PUSH
69599: LD_VAR 0 1
69603: PUSH
69604: LD_INT 55
69606: PUSH
69607: EMPTY
69608: LIST
69609: PPUSH
69610: CALL_OW 69
69614: IN
69615: ST_TO_ADDR
// end ;
69616: LD_VAR 0 2
69620: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69621: LD_INT 0
69623: PPUSH
69624: PPUSH
// list := [ ] ;
69625: LD_ADDR_VAR 0 5
69629: PUSH
69630: EMPTY
69631: ST_TO_ADDR
// case d of 0 :
69632: LD_VAR 0 3
69636: PUSH
69637: LD_INT 0
69639: DOUBLE
69640: EQUAL
69641: IFTRUE 69645
69643: GO 69778
69645: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69646: LD_ADDR_VAR 0 5
69650: PUSH
69651: LD_VAR 0 1
69655: PUSH
69656: LD_INT 4
69658: MINUS
69659: PUSH
69660: LD_VAR 0 2
69664: PUSH
69665: LD_INT 4
69667: MINUS
69668: PUSH
69669: LD_INT 2
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: LIST
69676: PUSH
69677: LD_VAR 0 1
69681: PUSH
69682: LD_INT 3
69684: MINUS
69685: PUSH
69686: LD_VAR 0 2
69690: PUSH
69691: LD_INT 1
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: LIST
69698: PUSH
69699: LD_VAR 0 1
69703: PUSH
69704: LD_INT 4
69706: PLUS
69707: PUSH
69708: LD_VAR 0 2
69712: PUSH
69713: LD_INT 4
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: LIST
69720: PUSH
69721: LD_VAR 0 1
69725: PUSH
69726: LD_INT 3
69728: PLUS
69729: PUSH
69730: LD_VAR 0 2
69734: PUSH
69735: LD_INT 3
69737: PLUS
69738: PUSH
69739: LD_INT 5
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: PUSH
69747: LD_VAR 0 1
69751: PUSH
69752: LD_VAR 0 2
69756: PUSH
69757: LD_INT 4
69759: PLUS
69760: PUSH
69761: LD_INT 0
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: LIST
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: ST_TO_ADDR
// end ; 1 :
69776: GO 70476
69778: LD_INT 1
69780: DOUBLE
69781: EQUAL
69782: IFTRUE 69786
69784: GO 69919
69786: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69787: LD_ADDR_VAR 0 5
69791: PUSH
69792: LD_VAR 0 1
69796: PUSH
69797: LD_VAR 0 2
69801: PUSH
69802: LD_INT 4
69804: MINUS
69805: PUSH
69806: LD_INT 3
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: LIST
69813: PUSH
69814: LD_VAR 0 1
69818: PUSH
69819: LD_INT 3
69821: MINUS
69822: PUSH
69823: LD_VAR 0 2
69827: PUSH
69828: LD_INT 3
69830: MINUS
69831: PUSH
69832: LD_INT 2
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: LIST
69839: PUSH
69840: LD_VAR 0 1
69844: PUSH
69845: LD_INT 4
69847: MINUS
69848: PUSH
69849: LD_VAR 0 2
69853: PUSH
69854: LD_INT 1
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: LIST
69861: PUSH
69862: LD_VAR 0 1
69866: PUSH
69867: LD_VAR 0 2
69871: PUSH
69872: LD_INT 3
69874: PLUS
69875: PUSH
69876: LD_INT 0
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: LIST
69883: PUSH
69884: LD_VAR 0 1
69888: PUSH
69889: LD_INT 4
69891: PLUS
69892: PUSH
69893: LD_VAR 0 2
69897: PUSH
69898: LD_INT 4
69900: PLUS
69901: PUSH
69902: LD_INT 5
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: LIST
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: ST_TO_ADDR
// end ; 2 :
69917: GO 70476
69919: LD_INT 2
69921: DOUBLE
69922: EQUAL
69923: IFTRUE 69927
69925: GO 70056
69927: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69928: LD_ADDR_VAR 0 5
69932: PUSH
69933: LD_VAR 0 1
69937: PUSH
69938: LD_VAR 0 2
69942: PUSH
69943: LD_INT 3
69945: MINUS
69946: PUSH
69947: LD_INT 3
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: LIST
69954: PUSH
69955: LD_VAR 0 1
69959: PUSH
69960: LD_INT 4
69962: PLUS
69963: PUSH
69964: LD_VAR 0 2
69968: PUSH
69969: LD_INT 4
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: LIST
69976: PUSH
69977: LD_VAR 0 1
69981: PUSH
69982: LD_VAR 0 2
69986: PUSH
69987: LD_INT 4
69989: PLUS
69990: PUSH
69991: LD_INT 0
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: LIST
69998: PUSH
69999: LD_VAR 0 1
70003: PUSH
70004: LD_INT 3
70006: MINUS
70007: PUSH
70008: LD_VAR 0 2
70012: PUSH
70013: LD_INT 1
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: LIST
70020: PUSH
70021: LD_VAR 0 1
70025: PUSH
70026: LD_INT 4
70028: MINUS
70029: PUSH
70030: LD_VAR 0 2
70034: PUSH
70035: LD_INT 4
70037: MINUS
70038: PUSH
70039: LD_INT 2
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: LIST
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: ST_TO_ADDR
// end ; 3 :
70054: GO 70476
70056: LD_INT 3
70058: DOUBLE
70059: EQUAL
70060: IFTRUE 70064
70062: GO 70197
70064: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70065: LD_ADDR_VAR 0 5
70069: PUSH
70070: LD_VAR 0 1
70074: PUSH
70075: LD_INT 3
70077: PLUS
70078: PUSH
70079: LD_VAR 0 2
70083: PUSH
70084: LD_INT 4
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: LIST
70091: PUSH
70092: LD_VAR 0 1
70096: PUSH
70097: LD_INT 4
70099: PLUS
70100: PUSH
70101: LD_VAR 0 2
70105: PUSH
70106: LD_INT 4
70108: PLUS
70109: PUSH
70110: LD_INT 5
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: LIST
70117: PUSH
70118: LD_VAR 0 1
70122: PUSH
70123: LD_INT 4
70125: MINUS
70126: PUSH
70127: LD_VAR 0 2
70131: PUSH
70132: LD_INT 1
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: LIST
70139: PUSH
70140: LD_VAR 0 1
70144: PUSH
70145: LD_VAR 0 2
70149: PUSH
70150: LD_INT 4
70152: MINUS
70153: PUSH
70154: LD_INT 3
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: LIST
70161: PUSH
70162: LD_VAR 0 1
70166: PUSH
70167: LD_INT 3
70169: MINUS
70170: PUSH
70171: LD_VAR 0 2
70175: PUSH
70176: LD_INT 3
70178: MINUS
70179: PUSH
70180: LD_INT 2
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: LIST
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: ST_TO_ADDR
// end ; 4 :
70195: GO 70476
70197: LD_INT 4
70199: DOUBLE
70200: EQUAL
70201: IFTRUE 70205
70203: GO 70338
70205: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70206: LD_ADDR_VAR 0 5
70210: PUSH
70211: LD_VAR 0 1
70215: PUSH
70216: LD_VAR 0 2
70220: PUSH
70221: LD_INT 4
70223: PLUS
70224: PUSH
70225: LD_INT 0
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: LIST
70232: PUSH
70233: LD_VAR 0 1
70237: PUSH
70238: LD_INT 3
70240: PLUS
70241: PUSH
70242: LD_VAR 0 2
70246: PUSH
70247: LD_INT 3
70249: PLUS
70250: PUSH
70251: LD_INT 5
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: LIST
70258: PUSH
70259: LD_VAR 0 1
70263: PUSH
70264: LD_INT 4
70266: PLUS
70267: PUSH
70268: LD_VAR 0 2
70272: PUSH
70273: LD_INT 4
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: LIST
70280: PUSH
70281: LD_VAR 0 1
70285: PUSH
70286: LD_VAR 0 2
70290: PUSH
70291: LD_INT 3
70293: MINUS
70294: PUSH
70295: LD_INT 3
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: LIST
70302: PUSH
70303: LD_VAR 0 1
70307: PUSH
70308: LD_INT 4
70310: MINUS
70311: PUSH
70312: LD_VAR 0 2
70316: PUSH
70317: LD_INT 4
70319: MINUS
70320: PUSH
70321: LD_INT 2
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: LIST
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: ST_TO_ADDR
// end ; 5 :
70336: GO 70476
70338: LD_INT 5
70340: DOUBLE
70341: EQUAL
70342: IFTRUE 70346
70344: GO 70475
70346: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70347: LD_ADDR_VAR 0 5
70351: PUSH
70352: LD_VAR 0 1
70356: PUSH
70357: LD_INT 4
70359: MINUS
70360: PUSH
70361: LD_VAR 0 2
70365: PUSH
70366: LD_INT 1
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: LIST
70373: PUSH
70374: LD_VAR 0 1
70378: PUSH
70379: LD_VAR 0 2
70383: PUSH
70384: LD_INT 4
70386: MINUS
70387: PUSH
70388: LD_INT 3
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: LIST
70395: PUSH
70396: LD_VAR 0 1
70400: PUSH
70401: LD_INT 4
70403: PLUS
70404: PUSH
70405: LD_VAR 0 2
70409: PUSH
70410: LD_INT 4
70412: PLUS
70413: PUSH
70414: LD_INT 5
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: LIST
70421: PUSH
70422: LD_VAR 0 1
70426: PUSH
70427: LD_INT 3
70429: PLUS
70430: PUSH
70431: LD_VAR 0 2
70435: PUSH
70436: LD_INT 4
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: LIST
70443: PUSH
70444: LD_VAR 0 1
70448: PUSH
70449: LD_VAR 0 2
70453: PUSH
70454: LD_INT 3
70456: PLUS
70457: PUSH
70458: LD_INT 0
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: LIST
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: ST_TO_ADDR
// end ; end ;
70473: GO 70476
70475: POP
// result := list ;
70476: LD_ADDR_VAR 0 4
70480: PUSH
70481: LD_VAR 0 5
70485: ST_TO_ADDR
// end ;
70486: LD_VAR 0 4
70490: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70491: LD_INT 0
70493: PPUSH
70494: PPUSH
70495: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70496: LD_VAR 0 1
70500: NOT
70501: PUSH
70502: LD_VAR 0 2
70506: PUSH
70507: LD_INT 1
70509: PUSH
70510: LD_INT 2
70512: PUSH
70513: LD_INT 3
70515: PUSH
70516: LD_INT 4
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: IN
70525: NOT
70526: OR
70527: IFFALSE 70531
// exit ;
70529: GO 70623
// tmp := [ ] ;
70531: LD_ADDR_VAR 0 5
70535: PUSH
70536: EMPTY
70537: ST_TO_ADDR
// for i in units do
70538: LD_ADDR_VAR 0 4
70542: PUSH
70543: LD_VAR 0 1
70547: PUSH
70548: FOR_IN
70549: IFFALSE 70592
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70551: LD_ADDR_VAR 0 5
70555: PUSH
70556: LD_VAR 0 5
70560: PPUSH
70561: LD_VAR 0 5
70565: PUSH
70566: LD_INT 1
70568: PLUS
70569: PPUSH
70570: LD_VAR 0 4
70574: PPUSH
70575: LD_VAR 0 2
70579: PPUSH
70580: CALL_OW 259
70584: PPUSH
70585: CALL_OW 2
70589: ST_TO_ADDR
70590: GO 70548
70592: POP
70593: POP
// if not tmp then
70594: LD_VAR 0 5
70598: NOT
70599: IFFALSE 70603
// exit ;
70601: GO 70623
// result := SortListByListDesc ( units , tmp ) ;
70603: LD_ADDR_VAR 0 3
70607: PUSH
70608: LD_VAR 0 1
70612: PPUSH
70613: LD_VAR 0 5
70617: PPUSH
70618: CALL_OW 77
70622: ST_TO_ADDR
// end ;
70623: LD_VAR 0 3
70627: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70628: LD_INT 0
70630: PPUSH
70631: PPUSH
70632: PPUSH
// result := false ;
70633: LD_ADDR_VAR 0 3
70637: PUSH
70638: LD_INT 0
70640: ST_TO_ADDR
// x := GetX ( building ) ;
70641: LD_ADDR_VAR 0 4
70645: PUSH
70646: LD_VAR 0 2
70650: PPUSH
70651: CALL_OW 250
70655: ST_TO_ADDR
// y := GetY ( building ) ;
70656: LD_ADDR_VAR 0 5
70660: PUSH
70661: LD_VAR 0 2
70665: PPUSH
70666: CALL_OW 251
70670: ST_TO_ADDR
// if not building or not x or not y then
70671: LD_VAR 0 2
70675: NOT
70676: PUSH
70677: LD_VAR 0 4
70681: NOT
70682: OR
70683: PUSH
70684: LD_VAR 0 5
70688: NOT
70689: OR
70690: IFFALSE 70694
// exit ;
70692: GO 70786
// if GetTaskList ( unit ) then
70694: LD_VAR 0 1
70698: PPUSH
70699: CALL_OW 437
70703: IFFALSE 70786
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70705: LD_STRING e
70707: PUSH
70708: LD_VAR 0 1
70712: PPUSH
70713: CALL_OW 437
70717: PUSH
70718: LD_INT 1
70720: ARRAY
70721: PUSH
70722: LD_INT 1
70724: ARRAY
70725: EQUAL
70726: PUSH
70727: LD_VAR 0 4
70731: PUSH
70732: LD_VAR 0 1
70736: PPUSH
70737: CALL_OW 437
70741: PUSH
70742: LD_INT 1
70744: ARRAY
70745: PUSH
70746: LD_INT 2
70748: ARRAY
70749: EQUAL
70750: AND
70751: PUSH
70752: LD_VAR 0 5
70756: PUSH
70757: LD_VAR 0 1
70761: PPUSH
70762: CALL_OW 437
70766: PUSH
70767: LD_INT 1
70769: ARRAY
70770: PUSH
70771: LD_INT 3
70773: ARRAY
70774: EQUAL
70775: AND
70776: IFFALSE 70786
// result := true end ;
70778: LD_ADDR_VAR 0 3
70782: PUSH
70783: LD_INT 1
70785: ST_TO_ADDR
// end ;
70786: LD_VAR 0 3
70790: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70791: LD_INT 0
70793: PPUSH
// result := false ;
70794: LD_ADDR_VAR 0 4
70798: PUSH
70799: LD_INT 0
70801: ST_TO_ADDR
// if GetTaskList ( unit ) then
70802: LD_VAR 0 1
70806: PPUSH
70807: CALL_OW 437
70811: IFFALSE 70894
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70813: LD_STRING M
70815: PUSH
70816: LD_VAR 0 1
70820: PPUSH
70821: CALL_OW 437
70825: PUSH
70826: LD_INT 1
70828: ARRAY
70829: PUSH
70830: LD_INT 1
70832: ARRAY
70833: EQUAL
70834: PUSH
70835: LD_VAR 0 2
70839: PUSH
70840: LD_VAR 0 1
70844: PPUSH
70845: CALL_OW 437
70849: PUSH
70850: LD_INT 1
70852: ARRAY
70853: PUSH
70854: LD_INT 2
70856: ARRAY
70857: EQUAL
70858: AND
70859: PUSH
70860: LD_VAR 0 3
70864: PUSH
70865: LD_VAR 0 1
70869: PPUSH
70870: CALL_OW 437
70874: PUSH
70875: LD_INT 1
70877: ARRAY
70878: PUSH
70879: LD_INT 3
70881: ARRAY
70882: EQUAL
70883: AND
70884: IFFALSE 70894
// result := true ;
70886: LD_ADDR_VAR 0 4
70890: PUSH
70891: LD_INT 1
70893: ST_TO_ADDR
// end ; end ;
70894: LD_VAR 0 4
70898: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70899: LD_INT 0
70901: PPUSH
70902: PPUSH
70903: PPUSH
70904: PPUSH
// if not unit or not area then
70905: LD_VAR 0 1
70909: NOT
70910: PUSH
70911: LD_VAR 0 2
70915: NOT
70916: OR
70917: IFFALSE 70921
// exit ;
70919: GO 71085
// tmp := AreaToList ( area , i ) ;
70921: LD_ADDR_VAR 0 6
70925: PUSH
70926: LD_VAR 0 2
70930: PPUSH
70931: LD_VAR 0 5
70935: PPUSH
70936: CALL_OW 517
70940: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70941: LD_ADDR_VAR 0 5
70945: PUSH
70946: DOUBLE
70947: LD_INT 1
70949: DEC
70950: ST_TO_ADDR
70951: LD_VAR 0 6
70955: PUSH
70956: LD_INT 1
70958: ARRAY
70959: PUSH
70960: FOR_TO
70961: IFFALSE 71083
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70963: LD_ADDR_VAR 0 7
70967: PUSH
70968: LD_VAR 0 6
70972: PUSH
70973: LD_INT 1
70975: ARRAY
70976: PUSH
70977: LD_VAR 0 5
70981: ARRAY
70982: PUSH
70983: LD_VAR 0 6
70987: PUSH
70988: LD_INT 2
70990: ARRAY
70991: PUSH
70992: LD_VAR 0 5
70996: ARRAY
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71002: LD_VAR 0 7
71006: PUSH
71007: LD_INT 1
71009: ARRAY
71010: PPUSH
71011: LD_VAR 0 7
71015: PUSH
71016: LD_INT 2
71018: ARRAY
71019: PPUSH
71020: CALL_OW 428
71024: PUSH
71025: LD_INT 0
71027: EQUAL
71028: IFFALSE 71081
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71030: LD_VAR 0 1
71034: PPUSH
71035: LD_VAR 0 7
71039: PUSH
71040: LD_INT 1
71042: ARRAY
71043: PPUSH
71044: LD_VAR 0 7
71048: PUSH
71049: LD_INT 2
71051: ARRAY
71052: PPUSH
71053: LD_VAR 0 3
71057: PPUSH
71058: CALL_OW 48
// result := IsPlaced ( unit ) ;
71062: LD_ADDR_VAR 0 4
71066: PUSH
71067: LD_VAR 0 1
71071: PPUSH
71072: CALL_OW 305
71076: ST_TO_ADDR
// exit ;
71077: POP
71078: POP
71079: GO 71085
// end ; end ;
71081: GO 70960
71083: POP
71084: POP
// end ;
71085: LD_VAR 0 4
71089: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71090: LD_INT 0
71092: PPUSH
71093: PPUSH
71094: PPUSH
// if not side or side > 8 then
71095: LD_VAR 0 1
71099: NOT
71100: PUSH
71101: LD_VAR 0 1
71105: PUSH
71106: LD_INT 8
71108: GREATER
71109: OR
71110: IFFALSE 71114
// exit ;
71112: GO 71301
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71114: LD_ADDR_VAR 0 4
71118: PUSH
71119: LD_INT 22
71121: PUSH
71122: LD_VAR 0 1
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 21
71133: PUSH
71134: LD_INT 3
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PPUSH
71145: CALL_OW 69
71149: ST_TO_ADDR
// if not tmp then
71150: LD_VAR 0 4
71154: NOT
71155: IFFALSE 71159
// exit ;
71157: GO 71301
// enable_addtolog := true ;
71159: LD_ADDR_OWVAR 81
71163: PUSH
71164: LD_INT 1
71166: ST_TO_ADDR
// AddToLog ( [ ) ;
71167: LD_STRING [
71169: PPUSH
71170: CALL_OW 561
// for i in tmp do
71174: LD_ADDR_VAR 0 3
71178: PUSH
71179: LD_VAR 0 4
71183: PUSH
71184: FOR_IN
71185: IFFALSE 71292
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71187: LD_STRING [
71189: PUSH
71190: LD_VAR 0 3
71194: PPUSH
71195: CALL_OW 266
71199: STR
71200: PUSH
71201: LD_STRING , 
71203: STR
71204: PUSH
71205: LD_VAR 0 3
71209: PPUSH
71210: CALL_OW 250
71214: STR
71215: PUSH
71216: LD_STRING , 
71218: STR
71219: PUSH
71220: LD_VAR 0 3
71224: PPUSH
71225: CALL_OW 251
71229: STR
71230: PUSH
71231: LD_STRING , 
71233: STR
71234: PUSH
71235: LD_VAR 0 3
71239: PPUSH
71240: CALL_OW 254
71244: STR
71245: PUSH
71246: LD_STRING , 
71248: STR
71249: PUSH
71250: LD_VAR 0 3
71254: PPUSH
71255: LD_INT 1
71257: PPUSH
71258: CALL_OW 268
71262: STR
71263: PUSH
71264: LD_STRING , 
71266: STR
71267: PUSH
71268: LD_VAR 0 3
71272: PPUSH
71273: LD_INT 2
71275: PPUSH
71276: CALL_OW 268
71280: STR
71281: PUSH
71282: LD_STRING ],
71284: STR
71285: PPUSH
71286: CALL_OW 561
// end ;
71290: GO 71184
71292: POP
71293: POP
// AddToLog ( ]; ) ;
71294: LD_STRING ];
71296: PPUSH
71297: CALL_OW 561
// end ;
71301: LD_VAR 0 2
71305: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71306: LD_INT 0
71308: PPUSH
71309: PPUSH
71310: PPUSH
71311: PPUSH
71312: PPUSH
// if not area or not rate or not max then
71313: LD_VAR 0 1
71317: NOT
71318: PUSH
71319: LD_VAR 0 2
71323: NOT
71324: OR
71325: PUSH
71326: LD_VAR 0 4
71330: NOT
71331: OR
71332: IFFALSE 71336
// exit ;
71334: GO 71528
// while 1 do
71336: LD_INT 1
71338: IFFALSE 71528
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71340: LD_ADDR_VAR 0 9
71344: PUSH
71345: LD_VAR 0 1
71349: PPUSH
71350: LD_INT 1
71352: PPUSH
71353: CALL_OW 287
71357: PUSH
71358: LD_INT 10
71360: MUL
71361: ST_TO_ADDR
// r := rate / 10 ;
71362: LD_ADDR_VAR 0 7
71366: PUSH
71367: LD_VAR 0 2
71371: PUSH
71372: LD_INT 10
71374: DIVREAL
71375: ST_TO_ADDR
// time := 1 1$00 ;
71376: LD_ADDR_VAR 0 8
71380: PUSH
71381: LD_INT 2100
71383: ST_TO_ADDR
// if amount < min then
71384: LD_VAR 0 9
71388: PUSH
71389: LD_VAR 0 3
71393: LESS
71394: IFFALSE 71412
// r := r * 2 else
71396: LD_ADDR_VAR 0 7
71400: PUSH
71401: LD_VAR 0 7
71405: PUSH
71406: LD_INT 2
71408: MUL
71409: ST_TO_ADDR
71410: GO 71438
// if amount > max then
71412: LD_VAR 0 9
71416: PUSH
71417: LD_VAR 0 4
71421: GREATER
71422: IFFALSE 71438
// r := r / 2 ;
71424: LD_ADDR_VAR 0 7
71428: PUSH
71429: LD_VAR 0 7
71433: PUSH
71434: LD_INT 2
71436: DIVREAL
71437: ST_TO_ADDR
// time := time / r ;
71438: LD_ADDR_VAR 0 8
71442: PUSH
71443: LD_VAR 0 8
71447: PUSH
71448: LD_VAR 0 7
71452: DIVREAL
71453: ST_TO_ADDR
// if time < 0 then
71454: LD_VAR 0 8
71458: PUSH
71459: LD_INT 0
71461: LESS
71462: IFFALSE 71479
// time := time * - 1 ;
71464: LD_ADDR_VAR 0 8
71468: PUSH
71469: LD_VAR 0 8
71473: PUSH
71474: LD_INT 1
71476: NEG
71477: MUL
71478: ST_TO_ADDR
// wait ( time ) ;
71479: LD_VAR 0 8
71483: PPUSH
71484: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71488: LD_INT 35
71490: PPUSH
71491: LD_INT 875
71493: PPUSH
71494: CALL_OW 12
71498: PPUSH
71499: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71503: LD_INT 1
71505: PPUSH
71506: LD_INT 5
71508: PPUSH
71509: CALL_OW 12
71513: PPUSH
71514: LD_VAR 0 1
71518: PPUSH
71519: LD_INT 1
71521: PPUSH
71522: CALL_OW 55
// end ;
71526: GO 71336
// end ;
71528: LD_VAR 0 5
71532: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71533: LD_INT 0
71535: PPUSH
71536: PPUSH
71537: PPUSH
71538: PPUSH
71539: PPUSH
71540: PPUSH
71541: PPUSH
71542: PPUSH
// if not turrets or not factories then
71543: LD_VAR 0 1
71547: NOT
71548: PUSH
71549: LD_VAR 0 2
71553: NOT
71554: OR
71555: IFFALSE 71559
// exit ;
71557: GO 71866
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71559: LD_ADDR_VAR 0 10
71563: PUSH
71564: LD_INT 5
71566: PUSH
71567: LD_INT 6
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: PUSH
71574: LD_INT 2
71576: PUSH
71577: LD_INT 4
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 3
71586: PUSH
71587: LD_INT 5
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 24
71601: PUSH
71602: LD_INT 25
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 23
71611: PUSH
71612: LD_INT 27
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 42
71625: PUSH
71626: LD_INT 43
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 44
71635: PUSH
71636: LD_INT 46
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 45
71645: PUSH
71646: LD_INT 47
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: LIST
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: LIST
71662: ST_TO_ADDR
// result := [ ] ;
71663: LD_ADDR_VAR 0 3
71667: PUSH
71668: EMPTY
71669: ST_TO_ADDR
// for i in turrets do
71670: LD_ADDR_VAR 0 4
71674: PUSH
71675: LD_VAR 0 1
71679: PUSH
71680: FOR_IN
71681: IFFALSE 71864
// begin nat := GetNation ( i ) ;
71683: LD_ADDR_VAR 0 7
71687: PUSH
71688: LD_VAR 0 4
71692: PPUSH
71693: CALL_OW 248
71697: ST_TO_ADDR
// weapon := 0 ;
71698: LD_ADDR_VAR 0 8
71702: PUSH
71703: LD_INT 0
71705: ST_TO_ADDR
// if not nat then
71706: LD_VAR 0 7
71710: NOT
71711: IFFALSE 71715
// continue ;
71713: GO 71680
// for j in list [ nat ] do
71715: LD_ADDR_VAR 0 5
71719: PUSH
71720: LD_VAR 0 10
71724: PUSH
71725: LD_VAR 0 7
71729: ARRAY
71730: PUSH
71731: FOR_IN
71732: IFFALSE 71773
// if GetBWeapon ( i ) = j [ 1 ] then
71734: LD_VAR 0 4
71738: PPUSH
71739: CALL_OW 269
71743: PUSH
71744: LD_VAR 0 5
71748: PUSH
71749: LD_INT 1
71751: ARRAY
71752: EQUAL
71753: IFFALSE 71771
// begin weapon := j [ 2 ] ;
71755: LD_ADDR_VAR 0 8
71759: PUSH
71760: LD_VAR 0 5
71764: PUSH
71765: LD_INT 2
71767: ARRAY
71768: ST_TO_ADDR
// break ;
71769: GO 71773
// end ;
71771: GO 71731
71773: POP
71774: POP
// if not weapon then
71775: LD_VAR 0 8
71779: NOT
71780: IFFALSE 71784
// continue ;
71782: GO 71680
// for k in factories do
71784: LD_ADDR_VAR 0 6
71788: PUSH
71789: LD_VAR 0 2
71793: PUSH
71794: FOR_IN
71795: IFFALSE 71860
// begin weapons := AvailableWeaponList ( k ) ;
71797: LD_ADDR_VAR 0 9
71801: PUSH
71802: LD_VAR 0 6
71806: PPUSH
71807: CALL_OW 478
71811: ST_TO_ADDR
// if not weapons then
71812: LD_VAR 0 9
71816: NOT
71817: IFFALSE 71821
// continue ;
71819: GO 71794
// if weapon in weapons then
71821: LD_VAR 0 8
71825: PUSH
71826: LD_VAR 0 9
71830: IN
71831: IFFALSE 71858
// begin result := [ i , weapon ] ;
71833: LD_ADDR_VAR 0 3
71837: PUSH
71838: LD_VAR 0 4
71842: PUSH
71843: LD_VAR 0 8
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: ST_TO_ADDR
// exit ;
71852: POP
71853: POP
71854: POP
71855: POP
71856: GO 71866
// end ; end ;
71858: GO 71794
71860: POP
71861: POP
// end ;
71862: GO 71680
71864: POP
71865: POP
// end ;
71866: LD_VAR 0 3
71870: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71871: LD_INT 0
71873: PPUSH
// if not side or side > 8 then
71874: LD_VAR 0 3
71878: NOT
71879: PUSH
71880: LD_VAR 0 3
71884: PUSH
71885: LD_INT 8
71887: GREATER
71888: OR
71889: IFFALSE 71893
// exit ;
71891: GO 71952
// if not range then
71893: LD_VAR 0 4
71897: NOT
71898: IFFALSE 71909
// range := - 12 ;
71900: LD_ADDR_VAR 0 4
71904: PUSH
71905: LD_INT 12
71907: NEG
71908: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71909: LD_VAR 0 1
71913: PPUSH
71914: LD_VAR 0 2
71918: PPUSH
71919: LD_VAR 0 3
71923: PPUSH
71924: LD_VAR 0 4
71928: PPUSH
71929: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71933: LD_VAR 0 1
71937: PPUSH
71938: LD_VAR 0 2
71942: PPUSH
71943: LD_VAR 0 3
71947: PPUSH
71948: CALL_OW 331
// end ;
71952: LD_VAR 0 5
71956: RET
// export function Video ( mode ) ; begin
71957: LD_INT 0
71959: PPUSH
// ingame_video = mode ;
71960: LD_ADDR_OWVAR 52
71964: PUSH
71965: LD_VAR 0 1
71969: ST_TO_ADDR
// interface_hidden = mode ;
71970: LD_ADDR_OWVAR 54
71974: PUSH
71975: LD_VAR 0 1
71979: ST_TO_ADDR
// end ;
71980: LD_VAR 0 2
71984: RET
// export function Join ( array , element ) ; begin
71985: LD_INT 0
71987: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71988: LD_ADDR_VAR 0 3
71992: PUSH
71993: LD_VAR 0 1
71997: PPUSH
71998: LD_VAR 0 1
72002: PUSH
72003: LD_INT 1
72005: PLUS
72006: PPUSH
72007: LD_VAR 0 2
72011: PPUSH
72012: CALL_OW 1
72016: ST_TO_ADDR
// end ;
72017: LD_VAR 0 3
72021: RET
// export function JoinUnion ( array , element ) ; begin
72022: LD_INT 0
72024: PPUSH
// result := array union element ;
72025: LD_ADDR_VAR 0 3
72029: PUSH
72030: LD_VAR 0 1
72034: PUSH
72035: LD_VAR 0 2
72039: UNION
72040: ST_TO_ADDR
// end ;
72041: LD_VAR 0 3
72045: RET
// export function GetBehemoths ( side ) ; begin
72046: LD_INT 0
72048: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72049: LD_ADDR_VAR 0 2
72053: PUSH
72054: LD_INT 22
72056: PUSH
72057: LD_VAR 0 1
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: PUSH
72066: LD_INT 31
72068: PUSH
72069: LD_INT 25
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PPUSH
72080: CALL_OW 69
72084: ST_TO_ADDR
// end ;
72085: LD_VAR 0 2
72089: RET
// export function Shuffle ( array ) ; var i , index ; begin
72090: LD_INT 0
72092: PPUSH
72093: PPUSH
72094: PPUSH
// result := [ ] ;
72095: LD_ADDR_VAR 0 2
72099: PUSH
72100: EMPTY
72101: ST_TO_ADDR
// if not array then
72102: LD_VAR 0 1
72106: NOT
72107: IFFALSE 72111
// exit ;
72109: GO 72210
// Randomize ;
72111: CALL_OW 10
// for i = array downto 1 do
72115: LD_ADDR_VAR 0 3
72119: PUSH
72120: DOUBLE
72121: LD_VAR 0 1
72125: INC
72126: ST_TO_ADDR
72127: LD_INT 1
72129: PUSH
72130: FOR_DOWNTO
72131: IFFALSE 72208
// begin index := rand ( 1 , array ) ;
72133: LD_ADDR_VAR 0 4
72137: PUSH
72138: LD_INT 1
72140: PPUSH
72141: LD_VAR 0 1
72145: PPUSH
72146: CALL_OW 12
72150: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72151: LD_ADDR_VAR 0 2
72155: PUSH
72156: LD_VAR 0 2
72160: PPUSH
72161: LD_VAR 0 2
72165: PUSH
72166: LD_INT 1
72168: PLUS
72169: PPUSH
72170: LD_VAR 0 1
72174: PUSH
72175: LD_VAR 0 4
72179: ARRAY
72180: PPUSH
72181: CALL_OW 2
72185: ST_TO_ADDR
// array := Delete ( array , index ) ;
72186: LD_ADDR_VAR 0 1
72190: PUSH
72191: LD_VAR 0 1
72195: PPUSH
72196: LD_VAR 0 4
72200: PPUSH
72201: CALL_OW 3
72205: ST_TO_ADDR
// end ;
72206: GO 72130
72208: POP
72209: POP
// end ;
72210: LD_VAR 0 2
72214: RET
// export function GetBaseMaterials ( base ) ; begin
72215: LD_INT 0
72217: PPUSH
// result := [ 0 , 0 , 0 ] ;
72218: LD_ADDR_VAR 0 2
72222: PUSH
72223: LD_INT 0
72225: PUSH
72226: LD_INT 0
72228: PUSH
72229: LD_INT 0
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: LIST
72236: ST_TO_ADDR
// if not base then
72237: LD_VAR 0 1
72241: NOT
72242: IFFALSE 72246
// exit ;
72244: GO 72295
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72246: LD_ADDR_VAR 0 2
72250: PUSH
72251: LD_VAR 0 1
72255: PPUSH
72256: LD_INT 1
72258: PPUSH
72259: CALL_OW 275
72263: PUSH
72264: LD_VAR 0 1
72268: PPUSH
72269: LD_INT 2
72271: PPUSH
72272: CALL_OW 275
72276: PUSH
72277: LD_VAR 0 1
72281: PPUSH
72282: LD_INT 3
72284: PPUSH
72285: CALL_OW 275
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: LIST
72294: ST_TO_ADDR
// end ;
72295: LD_VAR 0 2
72299: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72300: LD_INT 0
72302: PPUSH
72303: PPUSH
// result := array ;
72304: LD_ADDR_VAR 0 3
72308: PUSH
72309: LD_VAR 0 1
72313: ST_TO_ADDR
// if size > 0 then
72314: LD_VAR 0 2
72318: PUSH
72319: LD_INT 0
72321: GREATER
72322: IFFALSE 72368
// for i := array downto size do
72324: LD_ADDR_VAR 0 4
72328: PUSH
72329: DOUBLE
72330: LD_VAR 0 1
72334: INC
72335: ST_TO_ADDR
72336: LD_VAR 0 2
72340: PUSH
72341: FOR_DOWNTO
72342: IFFALSE 72366
// result := Delete ( result , result ) ;
72344: LD_ADDR_VAR 0 3
72348: PUSH
72349: LD_VAR 0 3
72353: PPUSH
72354: LD_VAR 0 3
72358: PPUSH
72359: CALL_OW 3
72363: ST_TO_ADDR
72364: GO 72341
72366: POP
72367: POP
// end ;
72368: LD_VAR 0 3
72372: RET
// export function ComExit ( unit ) ; var tmp ; begin
72373: LD_INT 0
72375: PPUSH
72376: PPUSH
// if not IsInUnit ( unit ) then
72377: LD_VAR 0 1
72381: PPUSH
72382: CALL_OW 310
72386: NOT
72387: IFFALSE 72391
// exit ;
72389: GO 72451
// tmp := IsInUnit ( unit ) ;
72391: LD_ADDR_VAR 0 3
72395: PUSH
72396: LD_VAR 0 1
72400: PPUSH
72401: CALL_OW 310
72405: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72406: LD_VAR 0 3
72410: PPUSH
72411: CALL_OW 247
72415: PUSH
72416: LD_INT 2
72418: EQUAL
72419: IFFALSE 72432
// ComExitVehicle ( unit ) else
72421: LD_VAR 0 1
72425: PPUSH
72426: CALL_OW 121
72430: GO 72441
// ComExitBuilding ( unit ) ;
72432: LD_VAR 0 1
72436: PPUSH
72437: CALL_OW 122
// result := tmp ;
72441: LD_ADDR_VAR 0 2
72445: PUSH
72446: LD_VAR 0 3
72450: ST_TO_ADDR
// end ;
72451: LD_VAR 0 2
72455: RET
// export function ResetHc ; begin
72456: LD_INT 0
72458: PPUSH
// InitHc ;
72459: CALL_OW 19
// hc_importance := 0 ;
72463: LD_ADDR_OWVAR 32
72467: PUSH
72468: LD_INT 0
72470: ST_TO_ADDR
// end ;
72471: LD_VAR 0 1
72475: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72476: LD_INT 0
72478: PPUSH
72479: PPUSH
72480: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72481: LD_ADDR_VAR 0 6
72485: PUSH
72486: LD_VAR 0 1
72490: PUSH
72491: LD_VAR 0 3
72495: PLUS
72496: PUSH
72497: LD_INT 2
72499: DIV
72500: ST_TO_ADDR
// if _x < 0 then
72501: LD_VAR 0 6
72505: PUSH
72506: LD_INT 0
72508: LESS
72509: IFFALSE 72526
// _x := _x * - 1 ;
72511: LD_ADDR_VAR 0 6
72515: PUSH
72516: LD_VAR 0 6
72520: PUSH
72521: LD_INT 1
72523: NEG
72524: MUL
72525: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72526: LD_ADDR_VAR 0 7
72530: PUSH
72531: LD_VAR 0 2
72535: PUSH
72536: LD_VAR 0 4
72540: PLUS
72541: PUSH
72542: LD_INT 2
72544: DIV
72545: ST_TO_ADDR
// if _y < 0 then
72546: LD_VAR 0 7
72550: PUSH
72551: LD_INT 0
72553: LESS
72554: IFFALSE 72571
// _y := _y * - 1 ;
72556: LD_ADDR_VAR 0 7
72560: PUSH
72561: LD_VAR 0 7
72565: PUSH
72566: LD_INT 1
72568: NEG
72569: MUL
72570: ST_TO_ADDR
// result := [ _x , _y ] ;
72571: LD_ADDR_VAR 0 5
72575: PUSH
72576: LD_VAR 0 6
72580: PUSH
72581: LD_VAR 0 7
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: ST_TO_ADDR
// end ;
72590: LD_VAR 0 5
72594: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72595: LD_INT 0
72597: PPUSH
72598: PPUSH
72599: PPUSH
72600: PPUSH
// task := GetTaskList ( unit ) ;
72601: LD_ADDR_VAR 0 7
72605: PUSH
72606: LD_VAR 0 1
72610: PPUSH
72611: CALL_OW 437
72615: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72616: LD_VAR 0 7
72620: NOT
72621: PUSH
72622: LD_VAR 0 1
72626: PPUSH
72627: LD_VAR 0 2
72631: PPUSH
72632: CALL_OW 308
72636: NOT
72637: AND
72638: IFFALSE 72642
// exit ;
72640: GO 72760
// if IsInArea ( unit , area ) then
72642: LD_VAR 0 1
72646: PPUSH
72647: LD_VAR 0 2
72651: PPUSH
72652: CALL_OW 308
72656: IFFALSE 72674
// begin ComMoveToArea ( unit , goAway ) ;
72658: LD_VAR 0 1
72662: PPUSH
72663: LD_VAR 0 3
72667: PPUSH
72668: CALL_OW 113
// exit ;
72672: GO 72760
// end ; if task [ 1 ] [ 1 ] <> M then
72674: LD_VAR 0 7
72678: PUSH
72679: LD_INT 1
72681: ARRAY
72682: PUSH
72683: LD_INT 1
72685: ARRAY
72686: PUSH
72687: LD_STRING M
72689: NONEQUAL
72690: IFFALSE 72694
// exit ;
72692: GO 72760
// x := task [ 1 ] [ 2 ] ;
72694: LD_ADDR_VAR 0 5
72698: PUSH
72699: LD_VAR 0 7
72703: PUSH
72704: LD_INT 1
72706: ARRAY
72707: PUSH
72708: LD_INT 2
72710: ARRAY
72711: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72712: LD_ADDR_VAR 0 6
72716: PUSH
72717: LD_VAR 0 7
72721: PUSH
72722: LD_INT 1
72724: ARRAY
72725: PUSH
72726: LD_INT 3
72728: ARRAY
72729: ST_TO_ADDR
// if InArea ( x , y , area ) then
72730: LD_VAR 0 5
72734: PPUSH
72735: LD_VAR 0 6
72739: PPUSH
72740: LD_VAR 0 2
72744: PPUSH
72745: CALL_OW 309
72749: IFFALSE 72760
// ComStop ( unit ) ;
72751: LD_VAR 0 1
72755: PPUSH
72756: CALL_OW 141
// end ;
72760: LD_VAR 0 4
72764: RET
// export function Abs ( value ) ; begin
72765: LD_INT 0
72767: PPUSH
// result := value ;
72768: LD_ADDR_VAR 0 2
72772: PUSH
72773: LD_VAR 0 1
72777: ST_TO_ADDR
// if value < 0 then
72778: LD_VAR 0 1
72782: PUSH
72783: LD_INT 0
72785: LESS
72786: IFFALSE 72803
// result := value * - 1 ;
72788: LD_ADDR_VAR 0 2
72792: PUSH
72793: LD_VAR 0 1
72797: PUSH
72798: LD_INT 1
72800: NEG
72801: MUL
72802: ST_TO_ADDR
// end ;
72803: LD_VAR 0 2
72807: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72808: LD_INT 0
72810: PPUSH
72811: PPUSH
72812: PPUSH
72813: PPUSH
72814: PPUSH
72815: PPUSH
72816: PPUSH
72817: PPUSH
// if not unit or not building then
72818: LD_VAR 0 1
72822: NOT
72823: PUSH
72824: LD_VAR 0 2
72828: NOT
72829: OR
72830: IFFALSE 72834
// exit ;
72832: GO 73060
// x := GetX ( building ) ;
72834: LD_ADDR_VAR 0 4
72838: PUSH
72839: LD_VAR 0 2
72843: PPUSH
72844: CALL_OW 250
72848: ST_TO_ADDR
// y := GetY ( building ) ;
72849: LD_ADDR_VAR 0 6
72853: PUSH
72854: LD_VAR 0 2
72858: PPUSH
72859: CALL_OW 251
72863: ST_TO_ADDR
// d := GetDir ( building ) ;
72864: LD_ADDR_VAR 0 8
72868: PUSH
72869: LD_VAR 0 2
72873: PPUSH
72874: CALL_OW 254
72878: ST_TO_ADDR
// r := 4 ;
72879: LD_ADDR_VAR 0 9
72883: PUSH
72884: LD_INT 4
72886: ST_TO_ADDR
// for i := 1 to 5 do
72887: LD_ADDR_VAR 0 10
72891: PUSH
72892: DOUBLE
72893: LD_INT 1
72895: DEC
72896: ST_TO_ADDR
72897: LD_INT 5
72899: PUSH
72900: FOR_TO
72901: IFFALSE 73058
// begin _x := ShiftX ( x , d , r + i ) ;
72903: LD_ADDR_VAR 0 5
72907: PUSH
72908: LD_VAR 0 4
72912: PPUSH
72913: LD_VAR 0 8
72917: PPUSH
72918: LD_VAR 0 9
72922: PUSH
72923: LD_VAR 0 10
72927: PLUS
72928: PPUSH
72929: CALL_OW 272
72933: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72934: LD_ADDR_VAR 0 7
72938: PUSH
72939: LD_VAR 0 6
72943: PPUSH
72944: LD_VAR 0 8
72948: PPUSH
72949: LD_VAR 0 9
72953: PUSH
72954: LD_VAR 0 10
72958: PLUS
72959: PPUSH
72960: CALL_OW 273
72964: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72965: LD_VAR 0 5
72969: PPUSH
72970: LD_VAR 0 7
72974: PPUSH
72975: CALL_OW 488
72979: PUSH
72980: LD_VAR 0 5
72984: PPUSH
72985: LD_VAR 0 7
72989: PPUSH
72990: CALL_OW 428
72994: PPUSH
72995: CALL_OW 247
72999: PUSH
73000: LD_INT 3
73002: PUSH
73003: LD_INT 2
73005: PUSH
73006: EMPTY
73007: LIST
73008: LIST
73009: IN
73010: NOT
73011: AND
73012: IFFALSE 73056
// begin ComMoveXY ( unit , _x , _y ) ;
73014: LD_VAR 0 1
73018: PPUSH
73019: LD_VAR 0 5
73023: PPUSH
73024: LD_VAR 0 7
73028: PPUSH
73029: CALL_OW 111
// result := [ _x , _y ] ;
73033: LD_ADDR_VAR 0 3
73037: PUSH
73038: LD_VAR 0 5
73042: PUSH
73043: LD_VAR 0 7
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: ST_TO_ADDR
// exit ;
73052: POP
73053: POP
73054: GO 73060
// end ; end ;
73056: GO 72900
73058: POP
73059: POP
// end ;
73060: LD_VAR 0 3
73064: RET
