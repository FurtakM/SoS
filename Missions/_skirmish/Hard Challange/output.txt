// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 0 , 0 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: CALL_OW 86
// AnimateTrees ( true ) ;
  14: LD_INT 1
  16: PPUSH
  17: CALL_OW 573
// debug := 0 ;
  21: LD_ADDR_EXP 1
  25: PUSH
  26: LD_INT 0
  28: ST_TO_ADDR
// if debug then
  29: LD_EXP 1
  33: IFFALSE 55
// begin display_strings := Debug mode active! ;
  35: LD_ADDR_OWVAR 47
  39: PUSH
  40: LD_STRING Debug mode active!
  42: ST_TO_ADDR
// Your_Side := 1 ;
  43: LD_ADDR_OWVAR 2
  47: PUSH
  48: LD_INT 1
  50: ST_TO_ADDR
// TurnFogOff ;
  51: CALL_OW 537
// end ; Difficulty := GetMultiplayerSetting ( 0 ) ;
  55: LD_ADDR_OWVAR 67
  59: PUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 426
  67: ST_TO_ADDR
// if not Difficulty then
  68: LD_OWVAR 67
  72: NOT
  73: IFFALSE 83
// Difficulty := 2 ;
  75: LD_ADDR_OWVAR 67
  79: PUSH
  80: LD_INT 2
  82: ST_TO_ADDR
// depotConstructed := false ;
  83: LD_ADDR_EXP 2
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// PrepareTigers ( tiger_area ) ;
  91: LD_INT 8
  93: PPUSH
  94: CALL 10208 0 1
// PrepareApemans ( apeman_area ) ;
  98: LD_INT 9
 100: PPUSH
 101: CALL 10338 0 1
// PrepareRussian ;
 105: CALL 125 0 0
// PrepareAmerican ;
 109: CALL 11751 0 0
// if not debug then
 113: LD_EXP 1
 117: NOT
 118: IFFALSE 124
// Action ;
 120: CALL 13980 0 0
// end ;
 124: END
// export debug , depotConstructed ; end_of_file export ru_force , ru_group1 , ru_group2 , ru_tech_list , ru_towers_list , ru_weapon_list , ru_reserve , ru_attack_list ; export ru_lab_list , ru_heal_list , ru_blist , ru_buildings , ru_behemoth_mechanic , ru_spotted , ru_protector ; export need_buldozer , need_crane ; export function PrepareRussian ; var skill , i , un ; begin
 125: LD_INT 0
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// uc_side := 3 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 3
 138: ST_TO_ADDR
// uc_nation := nation_russian ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
 147: LD_ADDR_VAR 0 2
 151: PUSH
 152: LD_INT 6
 154: PUSH
 155: LD_INT 7
 157: PUSH
 158: LD_INT 8
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , 2000 ) ;
 172: LD_INT 2
 174: PPUSH
 175: CALL_OW 274
 179: PPUSH
 180: LD_INT 1
 182: PPUSH
 183: LD_INT 2000
 185: PPUSH
 186: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , 600 ) ;
 190: LD_INT 2
 192: PPUSH
 193: CALL_OW 274
 197: PPUSH
 198: LD_INT 2
 200: PPUSH
 201: LD_INT 600
 203: PPUSH
 204: CALL_OW 277
// SetResourceVisibility ( 33 , 4 , 3 ) ;
 208: LD_INT 33
 210: PPUSH
 211: LD_INT 4
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: CALL_OW 441
// SetResourceVisibility ( 37 , 3 , 3 ) ;
 221: LD_INT 37
 223: PPUSH
 224: LD_INT 3
 226: PPUSH
 227: LD_INT 3
 229: PPUSH
 230: CALL_OW 441
// ru_force := [ ] ;
 234: LD_ADDR_EXP 3
 238: PUSH
 239: EMPTY
 240: ST_TO_ADDR
// ru_group1 := [ ] ;
 241: LD_ADDR_EXP 4
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// ru_group2 := [ ] ;
 248: LD_ADDR_EXP 5
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// ru_reserve := [ ] ;
 255: LD_ADDR_EXP 9
 259: PUSH
 260: EMPTY
 261: ST_TO_ADDR
// ru_attack_list := [ ] ;
 262: LD_ADDR_EXP 10
 266: PUSH
 267: EMPTY
 268: ST_TO_ADDR
// ru_protector := [ ] ;
 269: LD_ADDR_EXP 17
 273: PUSH
 274: EMPTY
 275: ST_TO_ADDR
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
 276: LD_ADDR_EXP 6
 280: PUSH
 281: LD_INT 48
 283: PUSH
 284: LD_INT 49
 286: PUSH
 287: LD_INT 50
 289: PUSH
 290: LD_INT 20
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 51
 298: PUSH
 299: LD_INT 52
 301: PUSH
 302: LD_INT 69
 304: PUSH
 305: LD_INT 39
 307: PUSH
 308: LD_INT 34
 310: PUSH
 311: LD_INT 40
 313: PUSH
 314: LD_INT 53
 316: PUSH
 317: LD_INT 71
 319: PUSH
 320: LD_INT 57
 322: PUSH
 323: LD_INT 58
 325: PUSH
 326: LD_INT 44
 328: PUSH
 329: LD_INT 32
 331: PUSH
 332: LD_INT 27
 334: PUSH
 335: LD_INT 23
 337: PUSH
 338: LD_INT 33
 340: PUSH
 341: LD_INT 59
 343: PUSH
 344: LD_INT 54
 346: PUSH
 347: LD_INT 55
 349: PUSH
 350: LD_INT 56
 352: PUSH
 353: LD_INT 63
 355: PUSH
 356: LD_INT 64
 358: PUSH
 359: LD_INT 65
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 31
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 22
 373: PUSH
 374: LD_INT 25
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: ST_TO_ADDR
// ru_towers_list := GetBuildingList ( 3 , b_turret ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 3
 418: PPUSH
 419: LD_INT 33
 421: PPUSH
 422: CALL 8421 0 2
 426: ST_TO_ADDR
// ru_weapon_list := [ ru_heavy_gun , ru_rocket_launcher , ru_rocket ] ;
 427: LD_ADDR_EXP 8
 431: PUSH
 432: LD_INT 46
 434: PUSH
 435: LD_INT 45
 437: PUSH
 438: LD_INT 47
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: ST_TO_ADDR
// ru_blist := [ b_turret , 36 , 8 , 3 ] ;
 446: LD_ADDR_EXP 13
 450: PUSH
 451: LD_INT 33
 453: PUSH
 454: LD_INT 36
 456: PUSH
 457: LD_INT 8
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: ST_TO_ADDR
// ru_buildings := [ ] ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: EMPTY
 475: ST_TO_ADDR
// ru_lab_list := [ [ GetX ( GetLabs ( 3 ) [ 1 ] ) , GetY ( GetLabs ( 3 ) [ 1 ] ) , GetDir ( GetLabs ( 3 ) [ 1 ] ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 1 ) , GetLabKind ( GetLabs ( 3 ) [ 1 ] , 2 ) ] , [ 12 , 13 , 1 , b_lab_siberium , b_lab_spacetime ] ] ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 3
 483: PPUSH
 484: CALL 6446 0 1
 488: PUSH
 489: LD_INT 1
 491: ARRAY
 492: PPUSH
 493: CALL_OW 250
 497: PUSH
 498: LD_INT 3
 500: PPUSH
 501: CALL 6446 0 1
 505: PUSH
 506: LD_INT 1
 508: ARRAY
 509: PPUSH
 510: CALL_OW 251
 514: PUSH
 515: LD_INT 3
 517: PPUSH
 518: CALL 6446 0 1
 522: PUSH
 523: LD_INT 1
 525: ARRAY
 526: PPUSH
 527: CALL_OW 254
 531: PUSH
 532: LD_INT 3
 534: PPUSH
 535: CALL 6446 0 1
 539: PUSH
 540: LD_INT 1
 542: ARRAY
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 268
 551: PUSH
 552: LD_INT 3
 554: PPUSH
 555: CALL 6446 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PPUSH
 564: LD_INT 2
 566: PPUSH
 567: CALL_OW 268
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 12
 581: PUSH
 582: LD_INT 13
 584: PUSH
 585: LD_INT 1
 587: PUSH
 588: LD_INT 11
 590: PUSH
 591: LD_INT 14
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// ru_heal_list := [ ] ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: EMPTY
 611: ST_TO_ADDR
// need_buldozer := false ;
 612: LD_ADDR_EXP 18
 616: PUSH
 617: LD_INT 0
 619: ST_TO_ADDR
// need_crane := true ;
 620: LD_ADDR_EXP 19
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// ru_spotted := false ;
 628: LD_ADDR_EXP 16
 632: PUSH
 633: LD_INT 0
 635: ST_TO_ADDR
// for i = 1 to 6 do
 636: LD_ADDR_VAR 0 3
 640: PUSH
 641: DOUBLE
 642: LD_INT 1
 644: DEC
 645: ST_TO_ADDR
 646: LD_INT 6
 648: PUSH
 649: FOR_TO
 650: IFFALSE 691
// begin PrepareHuman ( false , 4 , skill ) ;
 652: LD_INT 0
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 380
// un := CreateHuman ;
 667: LD_ADDR_VAR 0 4
 671: PUSH
 672: CALL_OW 44
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
 677: LD_VAR 0 4
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 52
// end ;
 689: GO 649
 691: POP
 692: POP
// for i = 1 to 6 do
 693: LD_ADDR_VAR 0 3
 697: PUSH
 698: DOUBLE
 699: LD_INT 1
 701: DEC
 702: ST_TO_ADDR
 703: LD_INT 6
 705: PUSH
 706: FOR_TO
 707: IFFALSE 748
// begin PrepareHuman ( false , 3 , skill ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_VAR 0 2
 719: PPUSH
 720: CALL_OW 380
// un := CreateHuman ;
 724: LD_ADDR_VAR 0 4
 728: PUSH
 729: CALL_OW 44
 733: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
 734: LD_VAR 0 4
 738: PPUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 52
// end ;
 746: GO 706
 748: POP
 749: POP
// for i = 1 to 6 do
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: DOUBLE
 756: LD_INT 1
 758: DEC
 759: ST_TO_ADDR
 760: LD_INT 6
 762: PUSH
 763: FOR_TO
 764: IFFALSE 808
// begin PrepareHuman ( false , 2 , skill ) ;
 766: LD_INT 0
 768: PPUSH
 769: LD_INT 2
 771: PPUSH
 772: LD_VAR 0 2
 776: PPUSH
 777: CALL_OW 380
// un := CreateHuman ;
 781: LD_ADDR_VAR 0 4
 785: PUSH
 786: CALL_OW 44
 790: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 791: LD_VAR 0 4
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end ;
 806: GO 763
 808: POP
 809: POP
// for i = 1 to 6 do
 810: LD_ADDR_VAR 0 3
 814: PUSH
 815: DOUBLE
 816: LD_INT 1
 818: DEC
 819: ST_TO_ADDR
 820: LD_INT 6
 822: PUSH
 823: FOR_TO
 824: IFFALSE 902
// begin PrepareHuman ( false , 1 , skill ) ;
 826: LD_INT 0
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_VAR 0 2
 836: PPUSH
 837: CALL_OW 380
// un := CreateHuman ;
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: CALL_OW 44
 850: ST_TO_ADDR
// PlaceUnitArea ( un , ru_spawn , false ) ;
 851: LD_VAR 0 4
 855: PPUSH
 856: LD_INT 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// ComEnterUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_barracks ] ) , un ) ) ;
 866: LD_VAR 0 4
 870: PPUSH
 871: LD_INT 30
 873: PUSH
 874: LD_INT 5
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PPUSH
 881: CALL_OW 69
 885: PPUSH
 886: LD_VAR 0 4
 890: PPUSH
 891: CALL_OW 74
 895: PPUSH
 896: CALL_OW 120
// end ;
 900: GO 823
 902: POP
 903: POP
// for i = 1 to Difficulty do
 904: LD_ADDR_VAR 0 3
 908: PUSH
 909: DOUBLE
 910: LD_INT 1
 912: DEC
 913: ST_TO_ADDR
 914: LD_OWVAR 67
 918: PUSH
 919: FOR_TO
 920: IFFALSE 1031
// begin vc_chassis := ru_medium_tracked ;
 922: LD_ADDR_OWVAR 37
 926: PUSH
 927: LD_INT 22
 929: ST_TO_ADDR
// vc_engine := engine_siberite ;
 930: LD_ADDR_OWVAR 39
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// vc_control := control_computer ;
 938: LD_ADDR_OWVAR 38
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_rocket_launcher ] [ i mod 2 + 1 ] ;
 946: LD_ADDR_OWVAR 40
 950: PUSH
 951: LD_INT 43
 953: PUSH
 954: LD_INT 45
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 2
 968: MOD
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// un := CreateVehicle ;
 975: LD_ADDR_VAR 0 4
 979: PUSH
 980: CALL_OW 45
 984: ST_TO_ADDR
// PlaceUnitXYR ( un , 52 , 42 , 6 , false ) ;
 985: LD_VAR 0 4
 989: PPUSH
 990: LD_INT 52
 992: PPUSH
 993: LD_INT 42
 995: PPUSH
 996: LD_INT 6
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 50
// ru_protector := Insert ( ru_protector , 1 , un ) ;
1006: LD_ADDR_EXP 17
1010: PUSH
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 1
1018: PPUSH
1019: LD_VAR 0 4
1023: PPUSH
1024: CALL_OW 2
1028: ST_TO_ADDR
// end ;
1029: GO 919
1031: POP
1032: POP
// end ;
1033: LD_VAR 0 1
1037: RET
// every 120 120$00 trigger Difficulty = 2 and GetBuilding ( 3 , b_factory ) do
1038: LD_OWVAR 67
1042: PUSH
1043: LD_INT 2
1045: EQUAL
1046: IFFALSE 1060
1048: PUSH
1049: LD_INT 3
1051: PPUSH
1052: LD_INT 3
1054: PPUSH
1055: CALL 6297 0 2
1059: AND
1060: IFFALSE 1096
1062: GO 1064
1064: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1065: LD_INT 3
1067: PPUSH
1068: LD_INT 3
1070: PPUSH
1071: CALL 6297 0 2
1075: PUSH
1076: LD_INT 1
1078: ARRAY
1079: PPUSH
1080: LD_INT 24
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: LD_INT 3
1088: PPUSH
1089: LD_INT 48
1091: PPUSH
1092: CALL 8188 0 5
1096: END
// every 100 100$00 trigger Difficulty = 3 and GetBuilding ( 3 , b_factory ) do
1097: LD_OWVAR 67
1101: PUSH
1102: LD_INT 3
1104: EQUAL
1105: IFFALSE 1119
1107: PUSH
1108: LD_INT 3
1110: PPUSH
1111: LD_INT 3
1113: PPUSH
1114: CALL 6297 0 2
1118: AND
1119: IFFALSE 1155
1121: GO 1123
1123: DISABLE
// ComProduce ( GetBuilding ( 3 , b_factory ) [ 1 ] , ru_heavy_tracked , engine_combustion , control_computer , ru_siberium_rocket ) ;
1124: LD_INT 3
1126: PPUSH
1127: LD_INT 3
1129: PPUSH
1130: CALL 6297 0 2
1134: PUSH
1135: LD_INT 1
1137: ARRAY
1138: PPUSH
1139: LD_INT 24
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 3
1147: PPUSH
1148: LD_INT 48
1150: PPUSH
1151: CALL 8188 0 5
1155: END
// every 0 0$01 trigger ru_protector do var i ;
1156: LD_EXP 17
1160: IFFALSE 1331
1162: GO 1164
1164: DISABLE
1165: LD_INT 0
1167: PPUSH
// begin enable ;
1168: ENABLE
// if FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) then
1169: LD_INT 14
1171: PPUSH
1172: LD_INT 81
1174: PUSH
1175: LD_INT 3
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: PPUSH
1182: CALL_OW 70
1186: IFFALSE 1261
// begin for i = 1 to ru_protector do
1188: LD_ADDR_VAR 0 1
1192: PUSH
1193: DOUBLE
1194: LD_INT 1
1196: DEC
1197: ST_TO_ADDR
1198: LD_EXP 17
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1257
// ComAttackUnit ( ru_protector [ i ] , NearestUnitToUnit ( FilterUnitsInArea ( ru_protect_area , [ f_enemy , 3 ] ) , ru_protector [ i ] ) ) ;
1206: LD_EXP 17
1210: PUSH
1211: LD_VAR 0 1
1215: ARRAY
1216: PPUSH
1217: LD_INT 14
1219: PPUSH
1220: LD_INT 81
1222: PUSH
1223: LD_INT 3
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PPUSH
1230: CALL_OW 70
1234: PPUSH
1235: LD_EXP 17
1239: PUSH
1240: LD_VAR 0 1
1244: ARRAY
1245: PPUSH
1246: CALL_OW 74
1250: PPUSH
1251: CALL_OW 115
1255: GO 1203
1257: POP
1258: POP
// end else
1259: GO 1331
// for i = 1 to ru_protector do
1261: LD_ADDR_VAR 0 1
1265: PUSH
1266: DOUBLE
1267: LD_INT 1
1269: DEC
1270: ST_TO_ADDR
1271: LD_EXP 17
1275: PUSH
1276: FOR_TO
1277: IFFALSE 1329
// if GetDistUnitXY ( ru_protector [ i ] , 49 , 39 ) > 10 then
1279: LD_EXP 17
1283: PUSH
1284: LD_VAR 0 1
1288: ARRAY
1289: PPUSH
1290: LD_INT 49
1292: PPUSH
1293: LD_INT 39
1295: PPUSH
1296: CALL_OW 297
1300: PUSH
1301: LD_INT 10
1303: GREATER
1304: IFFALSE 1327
// ComMoveXY ( ru_protector [ i ] , 49 , 39 ) ;
1306: LD_EXP 17
1310: PUSH
1311: LD_VAR 0 1
1315: ARRAY
1316: PPUSH
1317: LD_INT 49
1319: PPUSH
1320: LD_INT 39
1322: PPUSH
1323: CALL_OW 111
1327: GO 1276
1329: POP
1330: POP
// end ;
1331: PPOPN 1
1333: END
// every 0 0$01 trigger tick > [ 2 2$00 , 1 1$00 , 0 0$30 ] [ Difficulty ] do
1334: LD_OWVAR 1
1338: PUSH
1339: LD_INT 4200
1341: PUSH
1342: LD_INT 2100
1344: PUSH
1345: LD_INT 1050
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: PUSH
1353: LD_OWVAR 67
1357: ARRAY
1358: GREATER
1359: IFFALSE 1372
1361: GO 1363
1363: DISABLE
// need_buldozer := true ;
1364: LD_ADDR_EXP 18
1368: PUSH
1369: LD_INT 1
1371: ST_TO_ADDR
1372: END
// export ru_sold , ru_eng , ru_mech , ru_sci , ru_bazz , ru_base_personel , ru_bulldozers , ru_crans , ru_cargos ; every 0 0$01 do
1373: GO 1375
1375: DISABLE
// begin enable ;
1376: ENABLE
// ru_sold := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
1377: LD_ADDR_EXP 20
1381: PUSH
1382: LD_INT 22
1384: PUSH
1385: LD_INT 3
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 25
1394: PUSH
1395: LD_INT 1
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PPUSH
1406: CALL_OW 69
1410: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
1411: LD_ADDR_EXP 21
1415: PUSH
1416: LD_INT 22
1418: PUSH
1419: LD_INT 3
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: PUSH
1426: LD_INT 25
1428: PUSH
1429: LD_INT 2
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PPUSH
1440: CALL_OW 69
1444: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
1445: LD_ADDR_EXP 22
1449: PUSH
1450: LD_INT 22
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 25
1462: PUSH
1463: LD_INT 3
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PPUSH
1474: CALL_OW 69
1478: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
1479: LD_ADDR_EXP 23
1483: PUSH
1484: LD_INT 22
1486: PUSH
1487: LD_INT 3
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 25
1496: PUSH
1497: LD_INT 4
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PPUSH
1508: CALL_OW 69
1512: ST_TO_ADDR
// ru_bazz := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
1513: LD_ADDR_EXP 24
1517: PUSH
1518: LD_INT 22
1520: PUSH
1521: LD_INT 3
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: PUSH
1528: LD_INT 25
1530: PUSH
1531: LD_INT 9
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: PPUSH
1542: CALL_OW 69
1546: ST_TO_ADDR
// ru_base_personel := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
1547: LD_ADDR_EXP 25
1551: PUSH
1552: LD_INT 2
1554: PPUSH
1555: LD_INT 22
1557: PUSH
1558: LD_INT 3
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 1
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PPUSH
1579: CALL_OW 70
1583: ST_TO_ADDR
// ru_bulldozers := FilterAllUnits ( [ f_weapon , ru_bulldozer ] ) ;
1584: LD_ADDR_EXP 26
1588: PUSH
1589: LD_INT 34
1591: PUSH
1592: LD_INT 53
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PPUSH
1599: CALL_OW 69
1603: ST_TO_ADDR
// ru_crans := FilterAllUnits ( [ f_weapon , ru_crane ] ) ;
1604: LD_ADDR_EXP 27
1608: PUSH
1609: LD_INT 34
1611: PUSH
1612: LD_INT 52
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: ST_TO_ADDR
// ru_cargos := FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) ;
1624: LD_ADDR_EXP 28
1628: PUSH
1629: LD_INT 34
1631: PUSH
1632: LD_INT 51
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: PPUSH
1639: CALL_OW 69
1643: ST_TO_ADDR
// ru_buildings := GetBuildingsList ( 3 , - 1 ) ;
1644: LD_ADDR_EXP 14
1648: PUSH
1649: LD_INT 3
1651: PPUSH
1652: LD_INT 1
1654: NEG
1655: PPUSH
1656: CALL 10726 0 2
1660: ST_TO_ADDR
// end ;
1661: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 3 ] ) and game_status or debug do var i , j , un , b , p , l , fac , lab , list , c ;
1662: LD_INT 22
1664: PUSH
1665: LD_INT 3
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL_OW 69
1676: IFFALSE 1684
1678: PUSH
1679: LD_EXP 29
1683: AND
1684: IFTRUE 1692
1686: PUSH
1687: LD_EXP 1
1691: OR
1692: IFFALSE 5311
1694: GO 1696
1696: DISABLE
1697: LD_INT 0
1699: PPUSH
1700: PPUSH
1701: PPUSH
1702: PPUSH
1703: PPUSH
1704: PPUSH
1705: PPUSH
1706: PPUSH
1707: PPUSH
1708: PPUSH
// begin enable ;
1709: ENABLE
// for i = 1 to ru_eng do
1710: LD_ADDR_VAR 0 1
1714: PUSH
1715: DOUBLE
1716: LD_INT 1
1718: DEC
1719: ST_TO_ADDR
1720: LD_EXP 21
1724: PUSH
1725: FOR_TO
1726: IFFALSE 1791
// if not HasTask ( ru_eng [ i ] ) and not IsInUnit ( ru_eng [ i ] ) then
1728: LD_EXP 21
1732: PUSH
1733: LD_VAR 0 1
1737: ARRAY
1738: PPUSH
1739: CALL_OW 314
1743: NOT
1744: IFFALSE 1764
1746: PUSH
1747: LD_EXP 21
1751: PUSH
1752: LD_VAR 0 1
1756: ARRAY
1757: PPUSH
1758: CALL_OW 310
1762: NOT
1763: AND
1764: IFFALSE 1789
// ComEnterUnit ( ru_eng [ i ] , MyBase ( 3 ) ) ;
1766: LD_EXP 21
1770: PUSH
1771: LD_VAR 0 1
1775: ARRAY
1776: PPUSH
1777: LD_INT 3
1779: PPUSH
1780: CALL 6206 0 1
1784: PPUSH
1785: CALL_OW 120
1789: GO 1725
1791: POP
1792: POP
// if FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
1793: LD_INT 2
1795: PPUSH
1796: LD_INT 22
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 21
1808: PUSH
1809: LD_INT 3
1811: PUSH
1812: EMPTY
1813: LIST
1814: LIST
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: LD_INT 24
1821: PUSH
1822: LD_INT 1000
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 70
1842: IFFALSE 2009
// begin b := FilterUnitsInArea ( ru_base_area , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1844: LD_ADDR_VAR 0 4
1848: PUSH
1849: LD_INT 2
1851: PPUSH
1852: LD_INT 22
1854: PUSH
1855: LD_INT 3
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 21
1864: PUSH
1865: LD_INT 3
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 3
1874: PUSH
1875: LD_INT 24
1877: PUSH
1878: LD_INT 1000
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: LIST
1893: PPUSH
1894: CALL_OW 70
1898: ST_TO_ADDR
// for i = 1 to ru_eng do
1899: LD_ADDR_VAR 0 1
1903: PUSH
1904: DOUBLE
1905: LD_INT 1
1907: DEC
1908: ST_TO_ADDR
1909: LD_EXP 21
1913: PUSH
1914: FOR_TO
1915: IFFALSE 2007
// begin if IsInUnit ( ru_eng [ i ] ) then
1917: LD_EXP 21
1921: PUSH
1922: LD_VAR 0 1
1926: ARRAY
1927: PPUSH
1928: CALL_OW 310
1932: IFFALSE 1951
// ComExitBuilding ( ru_eng [ i ] ) else
1934: LD_EXP 21
1938: PUSH
1939: LD_VAR 0 1
1943: ARRAY
1944: PPUSH
1945: CALL_OW 122
1949: GO 2005
// if not WantRepair ( ru_eng [ i ] ) then
1951: LD_EXP 21
1955: PUSH
1956: LD_VAR 0 1
1960: ARRAY
1961: PPUSH
1962: CALL 10652 0 1
1966: NOT
1967: IFFALSE 2005
// ComRepairBuilding ( ru_eng [ i ] , NearestUnitToUnit ( b , ru_eng [ i ] ) ) ;
1969: LD_EXP 21
1973: PUSH
1974: LD_VAR 0 1
1978: ARRAY
1979: PPUSH
1980: LD_VAR 0 4
1984: PPUSH
1985: LD_EXP 21
1989: PUSH
1990: LD_VAR 0 1
1994: ARRAY
1995: PPUSH
1996: CALL_OW 74
2000: PPUSH
2001: CALL_OW 130
// end ;
2005: GO 1914
2007: POP
2008: POP
// end ; if EnemyNearbyBase ( your_side , 38 , 26 ) = false and EnemyNearbyBase ( your_side , 29 , 37 ) = false then
2009: LD_OWVAR 2
2013: PPUSH
2014: LD_INT 38
2016: PPUSH
2017: LD_INT 26
2019: PPUSH
2020: CALL 5531 0 3
2024: PUSH
2025: LD_INT 0
2027: EQUAL
2028: IFFALSE 2051
2030: PUSH
2031: LD_OWVAR 2
2035: PPUSH
2036: LD_INT 29
2038: PPUSH
2039: LD_INT 37
2041: PPUSH
2042: CALL 5531 0 3
2046: PUSH
2047: LD_INT 0
2049: EQUAL
2050: AND
2051: IFFALSE 2188
// begin if ru_blist > 0 then
2053: LD_EXP 13
2057: PUSH
2058: LD_INT 0
2060: GREATER
2061: IFFALSE 2188
// begin for i = 1 to ru_eng do
2063: LD_ADDR_VAR 0 1
2067: PUSH
2068: DOUBLE
2069: LD_INT 1
2071: DEC
2072: ST_TO_ADDR
2073: LD_EXP 21
2077: PUSH
2078: FOR_TO
2079: IFFALSE 2186
// if IsInUnit ( ru_eng [ i ] ) then
2081: LD_EXP 21
2085: PUSH
2086: LD_VAR 0 1
2090: ARRAY
2091: PPUSH
2092: CALL_OW 310
2096: IFFALSE 2115
// ComExitBuilding ( ru_eng [ i ] ) else
2098: LD_EXP 21
2102: PUSH
2103: LD_VAR 0 1
2107: ARRAY
2108: PPUSH
2109: CALL_OW 122
2113: GO 2184
// if not HasTask ( ru_eng [ i ] ) then
2115: LD_EXP 21
2119: PUSH
2120: LD_VAR 0 1
2124: ARRAY
2125: PPUSH
2126: CALL_OW 314
2130: NOT
2131: IFFALSE 2184
// ComBuild ( ru_eng [ i ] , ru_blist [ 1 ] , ru_blist [ 2 ] , ru_blist [ 3 ] , ru_blist [ 4 ] ) ;
2133: LD_EXP 21
2137: PUSH
2138: LD_VAR 0 1
2142: ARRAY
2143: PPUSH
2144: LD_EXP 13
2148: PUSH
2149: LD_INT 1
2151: ARRAY
2152: PPUSH
2153: LD_EXP 13
2157: PUSH
2158: LD_INT 2
2160: ARRAY
2161: PPUSH
2162: LD_EXP 13
2166: PUSH
2167: LD_INT 3
2169: ARRAY
2170: PPUSH
2171: LD_EXP 13
2175: PUSH
2176: LD_INT 4
2178: ARRAY
2179: PPUSH
2180: CALL_OW 145
2184: GO 2078
2186: POP
2187: POP
// end ; end ; ru_heal_list := NeedHeal ( 3 , ru_heal_list , ru_behemoth_mechanic ) ;
2188: LD_ADDR_EXP 12
2192: PUSH
2193: LD_INT 3
2195: PPUSH
2196: LD_EXP 12
2200: PPUSH
2201: LD_EXP 15
2205: PPUSH
2206: CALL 9241 0 3
2210: ST_TO_ADDR
// if debug then
2211: LD_EXP 1
2215: IFFALSE 2227
// display_strings := ru_heal_list ;
2217: LD_ADDR_OWVAR 47
2221: PUSH
2222: LD_EXP 12
2226: ST_TO_ADDR
// for i = 1 to ru_sci do
2227: LD_ADDR_VAR 0 1
2231: PUSH
2232: DOUBLE
2233: LD_INT 1
2235: DEC
2236: ST_TO_ADDR
2237: LD_EXP 23
2241: PUSH
2242: FOR_TO
2243: IFFALSE 2581
// begin if ru_heal_list then
2245: LD_EXP 12
2249: IFFALSE 2490
// begin list := ru_heal_list ;
2251: LD_ADDR_VAR 0 9
2255: PUSH
2256: LD_EXP 12
2260: ST_TO_ADDR
// if IsInUnit ( ru_sci [ i ] ) then
2261: LD_EXP 23
2265: PUSH
2266: LD_VAR 0 1
2270: ARRAY
2271: PPUSH
2272: CALL_OW 310
2276: IFFALSE 2293
// ComExitBuilding ( ru_sci [ i ] ) ;
2278: LD_EXP 23
2282: PUSH
2283: LD_VAR 0 1
2287: ARRAY
2288: PPUSH
2289: CALL_OW 122
// for p = 1 to list do
2293: LD_ADDR_VAR 0 5
2297: PUSH
2298: DOUBLE
2299: LD_INT 1
2301: DEC
2302: ST_TO_ADDR
2303: LD_VAR 0 9
2307: PUSH
2308: FOR_TO
2309: IFFALSE 2486
// begin if GetTag ( list [ p ] ) = 100 and not WantHeal ( ru_sci [ i ] , 100 ) then
2311: LD_VAR 0 9
2315: PUSH
2316: LD_VAR 0 5
2320: ARRAY
2321: PPUSH
2322: CALL_OW 110
2326: PUSH
2327: LD_INT 100
2329: EQUAL
2330: IFFALSE 2353
2332: PUSH
2333: LD_EXP 23
2337: PUSH
2338: LD_VAR 0 1
2342: ARRAY
2343: PPUSH
2344: LD_INT 100
2346: PPUSH
2347: CALL 76928 0 2
2351: NOT
2352: AND
2353: IFFALSE 2381
// ComHeal ( ru_sci [ i ] , list [ p ] ) ;
2355: LD_EXP 23
2359: PUSH
2360: LD_VAR 0 1
2364: ARRAY
2365: PPUSH
2366: LD_VAR 0 9
2370: PUSH
2371: LD_VAR 0 5
2375: ARRAY
2376: PPUSH
2377: CALL_OW 128
// if GetTag ( list [ p ] ) > 100 then
2381: LD_VAR 0 9
2385: PUSH
2386: LD_VAR 0 5
2390: ARRAY
2391: PPUSH
2392: CALL_OW 110
2396: PUSH
2397: LD_INT 100
2399: GREATER
2400: IFFALSE 2428
// AddComHeal ( ru_sci [ i ] , list [ p ] ) ;
2402: LD_EXP 23
2406: PUSH
2407: LD_VAR 0 1
2411: ARRAY
2412: PPUSH
2413: LD_VAR 0 9
2417: PUSH
2418: LD_VAR 0 5
2422: ARRAY
2423: PPUSH
2424: CALL_OW 188
// if not IsInArea ( list [ p ] , ru_heal_area ) then
2428: LD_VAR 0 9
2432: PUSH
2433: LD_VAR 0 5
2437: ARRAY
2438: PPUSH
2439: LD_INT 4
2441: PPUSH
2442: CALL_OW 308
2446: NOT
2447: IFFALSE 2469
// ComMoveToArea ( list [ p ] , ru_heal_area ) else
2449: LD_VAR 0 9
2453: PUSH
2454: LD_VAR 0 5
2458: ARRAY
2459: PPUSH
2460: LD_INT 4
2462: PPUSH
2463: CALL_OW 113
2467: GO 2484
// ComHold ( list [ p ] ) ;
2469: LD_VAR 0 9
2473: PUSH
2474: LD_VAR 0 5
2478: ARRAY
2479: PPUSH
2480: CALL_OW 140
// end ;
2484: GO 2308
2486: POP
2487: POP
// end else
2488: GO 2579
// if not HasTask ( ru_sci [ i ] ) and not IsInUnit ( ru_sci [ i ] ) and ru_heal_list = 0 then
2490: LD_EXP 23
2494: PUSH
2495: LD_VAR 0 1
2499: ARRAY
2500: PPUSH
2501: CALL_OW 314
2505: NOT
2506: IFFALSE 2526
2508: PUSH
2509: LD_EXP 23
2513: PUSH
2514: LD_VAR 0 1
2518: ARRAY
2519: PPUSH
2520: CALL_OW 310
2524: NOT
2525: AND
2526: IFFALSE 2538
2528: PUSH
2529: LD_EXP 12
2533: PUSH
2534: LD_INT 0
2536: EQUAL
2537: AND
2538: IFFALSE 2579
// ComEnterUnit ( ru_sci [ i ] , NearestUnitToUnit ( GetLabs ( 3 ) , ru_sci [ i ] ) ) ;
2540: LD_EXP 23
2544: PUSH
2545: LD_VAR 0 1
2549: ARRAY
2550: PPUSH
2551: LD_INT 3
2553: PPUSH
2554: CALL 6446 0 1
2558: PPUSH
2559: LD_EXP 23
2563: PUSH
2564: LD_VAR 0 1
2568: ARRAY
2569: PPUSH
2570: CALL_OW 74
2574: PPUSH
2575: CALL_OW 120
// end ;
2579: GO 2242
2581: POP
2582: POP
// if CheckTechList ( 3 , ru_tech_list ) then
2583: LD_INT 3
2585: PPUSH
2586: LD_EXP 6
2590: PPUSH
2591: CALL 6587 0 2
2595: IFFALSE 2609
// ResearchTechList ( 3 , ru_tech_list ) ;
2597: LD_INT 3
2599: PPUSH
2600: LD_EXP 6
2604: PPUSH
2605: CALL 6662 0 2
// ComBuildLabList ( ru_eng , ru_lab_list ) ;
2609: LD_EXP 21
2613: PPUSH
2614: LD_EXP 11
2618: PPUSH
2619: CALL 8593 0 2
// lab := GetLabs ( 3 ) ;
2623: LD_ADDR_VAR 0 8
2627: PUSH
2628: LD_INT 3
2630: PPUSH
2631: CALL 6446 0 1
2635: ST_TO_ADDR
// if lab and ru_heal_list = 0 then
2636: LD_VAR 0 8
2640: IFFALSE 2652
2642: PUSH
2643: LD_EXP 12
2647: PUSH
2648: LD_INT 0
2650: EQUAL
2651: AND
2652: IFFALSE 2779
// for i = 1 to lab do
2654: LD_ADDR_VAR 0 1
2658: PUSH
2659: DOUBLE
2660: LD_INT 1
2662: DEC
2663: ST_TO_ADDR
2664: LD_VAR 0 8
2668: PUSH
2669: FOR_TO
2670: IFFALSE 2777
// if BuildingStatus ( lab [ i ] ) = bs_need_people then
2672: LD_VAR 0 8
2676: PUSH
2677: LD_VAR 0 1
2681: ARRAY
2682: PPUSH
2683: CALL_OW 461
2687: PUSH
2688: LD_INT 6
2690: EQUAL
2691: IFFALSE 2775
// begin for p = 1 to ru_sci do
2693: LD_ADDR_VAR 0 5
2697: PUSH
2698: DOUBLE
2699: LD_INT 1
2701: DEC
2702: ST_TO_ADDR
2703: LD_EXP 23
2707: PUSH
2708: FOR_TO
2709: IFFALSE 2773
// if IsInUnit ( ru_sci [ p ] ) then
2711: LD_EXP 23
2715: PUSH
2716: LD_VAR 0 5
2720: ARRAY
2721: PPUSH
2722: CALL_OW 310
2726: IFFALSE 2745
// ComExitBuilding ( ru_sci [ p ] ) else
2728: LD_EXP 23
2732: PUSH
2733: LD_VAR 0 5
2737: ARRAY
2738: PPUSH
2739: CALL_OW 122
2743: GO 2771
// ComEnterUnit ( ru_sci [ p ] , lab [ i ] ) ;
2745: LD_EXP 23
2749: PUSH
2750: LD_VAR 0 5
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 8
2760: PUSH
2761: LD_VAR 0 1
2765: ARRAY
2766: PPUSH
2767: CALL_OW 120
2771: GO 2708
2773: POP
2774: POP
// end ;
2775: GO 2669
2777: POP
2778: POP
// if GetTowers ( 3 ) < 5 then
2779: LD_INT 3
2781: PPUSH
2782: CALL 7003 0 1
2786: PUSH
2787: LD_INT 5
2789: LESS
2790: IFFALSE 2808
// CheckTowersStatus ( ru_eng , ru_towers_list ) else
2792: LD_EXP 21
2796: PPUSH
2797: LD_EXP 7
2801: PPUSH
2802: CALL 7623 0 2
2806: GO 2820
// CheckWeaponOnTowers ( 3 , ru_weapon_list ) ;
2808: LD_INT 3
2810: PPUSH
2811: LD_EXP 8
2815: PPUSH
2816: CALL 7918 0 2
// if GetBuilding ( 3 , b_factory ) then
2820: LD_INT 3
2822: PPUSH
2823: LD_INT 3
2825: PPUSH
2826: CALL 6297 0 2
2830: IFFALSE 3106
// if BuildingStatus ( GetBuilding ( 3 , b_factory ) [ 1 ] ) = bs_idle then
2832: LD_INT 3
2834: PPUSH
2835: LD_INT 3
2837: PPUSH
2838: CALL 6297 0 2
2842: PUSH
2843: LD_INT 1
2845: ARRAY
2846: PPUSH
2847: CALL_OW 461
2851: PUSH
2852: LD_INT 2
2854: EQUAL
2855: IFFALSE 3106
// begin fac := GetBuilding ( 3 , b_factory ) [ 1 ] ;
2857: LD_ADDR_VAR 0 7
2861: PUSH
2862: LD_INT 3
2864: PPUSH
2865: LD_INT 3
2867: PPUSH
2868: CALL 6297 0 2
2872: PUSH
2873: LD_INT 1
2875: ARRAY
2876: ST_TO_ADDR
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 0 and need_buldozer then
2877: LD_INT 3
2879: PPUSH
2880: LD_INT 24
2882: PPUSH
2883: LD_INT 53
2885: PPUSH
2886: CALL 8066 0 3
2890: PUSH
2891: LD_INT 0
2893: EQUAL
2894: IFFALSE 2902
2896: PUSH
2897: LD_EXP 18
2901: AND
2902: IFFALSE 2925
// ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_manual , ru_bulldozer ) ;
2904: LD_VAR 0 7
2908: PPUSH
2909: LD_INT 24
2911: PPUSH
2912: LD_INT 1
2914: PPUSH
2915: LD_INT 1
2917: PPUSH
2918: LD_INT 53
2920: PPUSH
2921: CALL 8188 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_crane ) = 0 and need_crane then
2925: LD_INT 3
2927: PPUSH
2928: LD_INT 22
2930: PPUSH
2931: LD_INT 52
2933: PPUSH
2934: CALL 8066 0 3
2938: PUSH
2939: LD_INT 0
2941: EQUAL
2942: IFFALSE 2950
2944: PUSH
2945: LD_EXP 19
2949: AND
2950: IFFALSE 2973
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_crane ) ;
2952: LD_VAR 0 7
2956: PPUSH
2957: LD_INT 22
2959: PPUSH
2960: LD_INT 1
2962: PPUSH
2963: LD_INT 3
2965: PPUSH
2966: LD_INT 52
2968: PPUSH
2969: CALL 8188 0 5
// if GetVehicle ( 3 , ru_medium_tracked , ru_time_lapser ) < 4 and GetTech ( tech_lapser , 3 ) = state_researched then
2973: LD_INT 3
2975: PPUSH
2976: LD_INT 22
2978: PPUSH
2979: LD_INT 49
2981: PPUSH
2982: CALL 8066 0 3
2986: PUSH
2987: LD_INT 4
2989: LESS
2990: IFFALSE 3008
2992: PUSH
2993: LD_INT 31
2995: PPUSH
2996: LD_INT 3
2998: PPUSH
2999: CALL_OW 321
3003: PUSH
3004: LD_INT 2
3006: EQUAL
3007: AND
3008: IFFALSE 3031
// ComProduce ( fac , ru_medium_tracked , engine_combustion , control_computer , ru_time_lapser ) ;
3010: LD_VAR 0 7
3014: PPUSH
3015: LD_INT 22
3017: PPUSH
3018: LD_INT 1
3020: PPUSH
3021: LD_INT 3
3023: PPUSH
3024: LD_INT 49
3026: PPUSH
3027: CALL 8188 0 5
// if ru_reserve < [ 5 , 6 , 7 ] [ Difficulty ] then
3031: LD_EXP 9
3035: PUSH
3036: LD_INT 5
3038: PUSH
3039: LD_INT 6
3041: PUSH
3042: LD_INT 7
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: LIST
3049: PUSH
3050: LD_OWVAR 67
3054: ARRAY
3055: LESS
3056: IFFALSE 3106
// begin ComProduce ( fac , ru_heavy_tracked , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_heavy_gun ] [ Rand ( 1 , 4 ) ] ) ;
3058: LD_VAR 0 7
3062: PPUSH
3063: LD_INT 24
3065: PPUSH
3066: LD_INT 1
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 46
3074: PUSH
3075: LD_INT 45
3077: PUSH
3078: LD_INT 47
3080: PUSH
3081: LD_INT 46
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: PUSH
3090: LD_INT 1
3092: PPUSH
3093: LD_INT 4
3095: PPUSH
3096: CALL_OW 12
3100: ARRAY
3101: PPUSH
3102: CALL 8188 0 5
// end ; end ; if GetBaseSource ( MyBase ( 3 ) ) [ 1 ] > 250 and GetBaseSource ( MyBase ( 3 ) ) [ 3 ] > 50 and GetTech ( tech_behemoth , 3 ) = state_researched and GetBehemoth ( 3 ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_time_lapser ] ] ) > 3 and EnemyNearbyBase ( your_side , 51 , 42 ) = false then
3106: LD_INT 3
3108: PPUSH
3109: CALL 6206 0 1
3113: PPUSH
3114: CALL 5894 0 1
3118: PUSH
3119: LD_INT 1
3121: ARRAY
3122: PUSH
3123: LD_INT 250
3125: GREATER
3126: IFFALSE 3150
3128: PUSH
3129: LD_INT 3
3131: PPUSH
3132: CALL 6206 0 1
3136: PPUSH
3137: CALL 5894 0 1
3141: PUSH
3142: LD_INT 3
3144: ARRAY
3145: PUSH
3146: LD_INT 50
3148: GREATER
3149: AND
3150: IFFALSE 3168
3152: PUSH
3153: LD_INT 23
3155: PPUSH
3156: LD_INT 3
3158: PPUSH
3159: CALL_OW 321
3163: PUSH
3164: LD_INT 2
3166: EQUAL
3167: AND
3168: IFFALSE 3183
3170: PUSH
3171: LD_INT 3
3173: PPUSH
3174: CALL 11456 0 1
3178: PUSH
3179: LD_INT 0
3181: EQUAL
3182: AND
3183: IFFALSE 3219
3185: PUSH
3186: LD_INT 22
3188: PUSH
3189: LD_INT 3
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: PUSH
3196: LD_INT 34
3198: PUSH
3199: LD_INT 49
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PPUSH
3210: CALL_OW 69
3214: PUSH
3215: LD_INT 3
3217: GREATER
3218: AND
3219: IFFALSE 3242
3221: PUSH
3222: LD_OWVAR 2
3226: PPUSH
3227: LD_INT 51
3229: PPUSH
3230: LD_INT 42
3232: PPUSH
3233: CALL 5531 0 3
3237: PUSH
3238: LD_INT 0
3240: EQUAL
3241: AND
3242: IFFALSE 3327
// begin for i = 1 to ru_mech do
3244: LD_ADDR_VAR 0 1
3248: PUSH
3249: DOUBLE
3250: LD_INT 1
3252: DEC
3253: ST_TO_ADDR
3254: LD_EXP 22
3258: PUSH
3259: FOR_TO
3260: IFFALSE 3325
// begin if IsInUnit ( ru_mech [ i ] ) then
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: CALL_OW 310
3277: IFFALSE 3296
// ComExitBuilding ( ru_mech [ i ] ) else
3279: LD_EXP 22
3283: PUSH
3284: LD_VAR 0 1
3288: ARRAY
3289: PPUSH
3290: CALL_OW 122
3294: GO 3323
// ComBuildBehemoth ( ru_mech [ i ] , b_behemoth , 51 , 43 , 0 ) ;
3296: LD_EXP 22
3300: PUSH
3301: LD_VAR 0 1
3305: ARRAY
3306: PPUSH
3307: LD_INT 37
3309: PPUSH
3310: LD_INT 51
3312: PPUSH
3313: LD_INT 43
3315: PPUSH
3316: LD_INT 0
3318: PPUSH
3319: CALL_OW 170
// end ;
3323: GO 3259
3325: POP
3326: POP
// end ; if tick >= [ 45 45$00 , 40 40$00 , 34 34$00 ] [ Difficulty ] then
3327: LD_OWVAR 1
3331: PUSH
3332: LD_INT 94500
3334: PUSH
3335: LD_INT 84000
3337: PUSH
3338: LD_INT 71400
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: LIST
3345: PUSH
3346: LD_OWVAR 67
3350: ARRAY
3351: GREATEREQUAL
3352: IFFALSE 3408
// begin if tick mod [ 9 9$00 , 8 8$00 , 7 7$00 ] [ Difficulty ] = 0 then
3354: LD_OWVAR 1
3358: PUSH
3359: LD_INT 18900
3361: PUSH
3362: LD_INT 16800
3364: PUSH
3365: LD_INT 14700
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: LIST
3372: PUSH
3373: LD_OWVAR 67
3377: ARRAY
3378: MOD
3379: PUSH
3380: LD_INT 0
3382: EQUAL
3383: IFFALSE 3408
// if ru_reserve then
3385: LD_EXP 9
3389: IFFALSE 3408
// begin ru_attack_list := ru_reserve ;
3391: LD_ADDR_EXP 10
3395: PUSH
3396: LD_EXP 9
3400: ST_TO_ADDR
// ru_reserve := [ ] ;
3401: LD_ADDR_EXP 9
3405: PUSH
3406: EMPTY
3407: ST_TO_ADDR
// end ; end ; if ru_attack_list then
3408: LD_EXP 10
3412: IFFALSE 3516
// begin for i = 1 to ru_attack_list do
3414: LD_ADDR_VAR 0 1
3418: PUSH
3419: DOUBLE
3420: LD_INT 1
3422: DEC
3423: ST_TO_ADDR
3424: LD_EXP 10
3428: PUSH
3429: FOR_TO
3430: IFFALSE 3514
// if GetLives ( ru_attack_list [ i ] ) >= 250 then
3432: LD_EXP 10
3436: PUSH
3437: LD_VAR 0 1
3441: ARRAY
3442: PPUSH
3443: CALL_OW 256
3447: PUSH
3448: LD_INT 250
3450: GREATEREQUAL
3451: IFFALSE 3512
// ComAttackUnit ( ru_attack_list [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( ru_attack_list [ i ] ) ] ) , ru_attack_list [ i ] ) ) ;
3453: LD_EXP 10
3457: PUSH
3458: LD_VAR 0 1
3462: ARRAY
3463: PPUSH
3464: LD_INT 81
3466: PUSH
3467: LD_EXP 10
3471: PUSH
3472: LD_VAR 0 1
3476: ARRAY
3477: PPUSH
3478: CALL_OW 255
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PPUSH
3487: CALL_OW 69
3491: PPUSH
3492: LD_EXP 10
3496: PUSH
3497: LD_VAR 0 1
3501: ARRAY
3502: PPUSH
3503: CALL_OW 74
3507: PPUSH
3508: CALL_OW 115
3512: GO 3429
3514: POP
3515: POP
// end ; if GetBehemoth ( 3 ) then
3516: LD_INT 3
3518: PPUSH
3519: CALL 11456 0 1
3523: IFFALSE 3897
// begin if ru_mech >= 4 then
3525: LD_EXP 22
3529: PUSH
3530: LD_INT 4
3532: GREATEREQUAL
3533: IFFALSE 3584
// ru_behemoth_mechanic := [ ru_mech [ 1 ] , ru_mech [ 2 ] , ru_mech [ 3 ] , ru_mech [ 4 ] ] else
3535: LD_ADDR_EXP 15
3539: PUSH
3540: LD_EXP 22
3544: PUSH
3545: LD_INT 1
3547: ARRAY
3548: PUSH
3549: LD_EXP 22
3553: PUSH
3554: LD_INT 2
3556: ARRAY
3557: PUSH
3558: LD_EXP 22
3562: PUSH
3563: LD_INT 3
3565: ARRAY
3566: PUSH
3567: LD_EXP 22
3571: PUSH
3572: LD_INT 4
3574: ARRAY
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: ST_TO_ADDR
3582: GO 3594
// ru_behemoth_mechanic := ru_mech ;
3584: LD_ADDR_EXP 15
3588: PUSH
3589: LD_EXP 22
3593: ST_TO_ADDR
// for i = 1 to ru_mech do
3594: LD_ADDR_VAR 0 1
3598: PUSH
3599: DOUBLE
3600: LD_INT 1
3602: DEC
3603: ST_TO_ADDR
3604: LD_EXP 22
3608: PUSH
3609: FOR_TO
3610: IFFALSE 3666
// if IsInUnit ( ru_mech [ i ] ) and ru_mech [ i ] in ru_behemoth_mechanic then
3612: LD_EXP 22
3616: PUSH
3617: LD_VAR 0 1
3621: ARRAY
3622: PPUSH
3623: CALL_OW 310
3627: IFFALSE 3647
3629: PUSH
3630: LD_EXP 22
3634: PUSH
3635: LD_VAR 0 1
3639: ARRAY
3640: PUSH
3641: LD_EXP 15
3645: IN
3646: AND
3647: IFFALSE 3664
// ComExitBuilding ( ru_mech [ i ] ) ;
3649: LD_EXP 22
3653: PUSH
3654: LD_VAR 0 1
3658: ARRAY
3659: PPUSH
3660: CALL_OW 122
3664: GO 3609
3666: POP
3667: POP
// if UnitsInside ( ru_fac ) = 0 then
3668: LD_INT 14
3670: PPUSH
3671: CALL_OW 313
3675: PUSH
3676: LD_INT 0
3678: EQUAL
3679: IFFALSE 3746
// begin InitHc_All ;
3681: CALL_OW 584
// for i := 1 to 5 do
3685: LD_ADDR_VAR 0 1
3689: PUSH
3690: DOUBLE
3691: LD_INT 1
3693: DEC
3694: ST_TO_ADDR
3695: LD_INT 5
3697: PUSH
3698: FOR_TO
3699: IFFALSE 3744
// begin uc_side := 3 ;
3701: LD_ADDR_OWVAR 20
3705: PUSH
3706: LD_INT 3
3708: ST_TO_ADDR
// uc_nation := 3 ;
3709: LD_ADDR_OWVAR 21
3713: PUSH
3714: LD_INT 3
3716: ST_TO_ADDR
// PrepareHuman ( false , 3 , 7 ) ;
3717: LD_INT 0
3719: PPUSH
3720: LD_INT 3
3722: PPUSH
3723: LD_INT 7
3725: PPUSH
3726: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_fac ) ;
3730: CALL_OW 44
3734: PPUSH
3735: LD_INT 14
3737: PPUSH
3738: CALL_OW 52
// end ;
3742: GO 3698
3744: POP
3745: POP
// end ; if FilterUnitsInArea ( alt_base , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 then
3746: LD_INT 12
3748: PPUSH
3749: LD_INT 22
3751: PUSH
3752: LD_INT 1
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: PUSH
3759: LD_INT 21
3761: PUSH
3762: LD_INT 3
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PPUSH
3773: CALL_OW 70
3777: PUSH
3778: LD_INT 0
3780: GREATER
3781: IFFALSE 3841
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 97 , 9 ) else
3783: LD_INT 3
3785: PPUSH
3786: CALL 11456 0 1
3790: PUSH
3791: LD_INT 1
3793: ARRAY
3794: PPUSH
3795: LD_INT 21
3797: PUSH
3798: LD_INT 2
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 34
3807: PUSH
3808: LD_INT 49
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: PPUSH
3819: CALL_OW 69
3823: PPUSH
3824: LD_EXP 15
3828: PPUSH
3829: LD_INT 97
3831: PPUSH
3832: LD_INT 9
3834: PPUSH
3835: CALL 10947 0 5
3839: GO 3897
// BehemothAttack ( GetBehemoth ( 3 ) [ 1 ] , FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_weapon , ru_time_lapser ] ] ) , ru_behemoth_mechanic , 153 , 102 ) ;
3841: LD_INT 3
3843: PPUSH
3844: CALL 11456 0 1
3848: PUSH
3849: LD_INT 1
3851: ARRAY
3852: PPUSH
3853: LD_INT 21
3855: PUSH
3856: LD_INT 2
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: PUSH
3863: LD_INT 34
3865: PUSH
3866: LD_INT 49
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 69
3881: PPUSH
3882: LD_EXP 15
3886: PPUSH
3887: LD_INT 153
3889: PPUSH
3890: LD_INT 102
3892: PPUSH
3893: CALL 10947 0 5
// end ; if ru_bazz = 0 and GetTech ( tech_bazooka , 3 ) = state_researched then
3897: LD_EXP 24
3901: PUSH
3902: LD_INT 0
3904: EQUAL
3905: IFFALSE 3923
3907: PUSH
3908: LD_INT 44
3910: PPUSH
3911: LD_INT 3
3913: PPUSH
3914: CALL_OW 321
3918: PUSH
3919: LD_INT 2
3921: EQUAL
3922: AND
3923: IFFALSE 3934
// ComChangeClassToBazooker ( ru_sold ) ;
3925: LD_EXP 20
3929: PPUSH
3930: CALL 9884 0 1
// if ru_bazz then
3934: LD_EXP 24
3938: IFFALSE 3952
// IntBazooka ( ru_bazz , 1 ) ;
3940: LD_EXP 24
3944: PPUSH
3945: LD_INT 1
3947: PPUSH
3948: CALL 9603 0 2
// if GetResourceVisibility ( 67 , 39 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
3952: LD_INT 67
3954: PPUSH
3955: LD_INT 39
3957: PPUSH
3958: LD_INT 3
3960: PPUSH
3961: CALL_OW 440
3965: PUSH
3966: LD_INT 0
3968: EQUAL
3969: IFFALSE 3987
3971: PUSH
3972: LD_INT 20
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 321
3982: PUSH
3983: LD_INT 2
3985: EQUAL
3986: AND
3987: IFFALSE 4008
// ComFindDeposit ( ru_sci [ 1 ] , 67 , 39 ) ;
3989: LD_EXP 23
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: LD_INT 67
4000: PPUSH
4001: LD_INT 39
4003: PPUSH
4004: CALL 9180 0 3
// if GetResourceVisibility ( 89 , 66 , 3 ) = false then
4008: LD_INT 89
4010: PPUSH
4011: LD_INT 66
4013: PPUSH
4014: LD_INT 3
4016: PPUSH
4017: CALL_OW 440
4021: PUSH
4022: LD_INT 0
4024: EQUAL
4025: IFFALSE 4046
// ComFindDeposit ( ru_sci [ 1 ] , 87 , 60 ) ;
4027: LD_EXP 23
4031: PUSH
4032: LD_INT 1
4034: ARRAY
4035: PPUSH
4036: LD_INT 87
4038: PPUSH
4039: LD_INT 60
4041: PPUSH
4042: CALL 9180 0 3
// if GetResourceVisibility ( 104 , 94 , 3 ) = false and GetTech ( tech_SibDet , 3 ) = state_researched then
4046: LD_INT 104
4048: PPUSH
4049: LD_INT 94
4051: PPUSH
4052: LD_INT 3
4054: PPUSH
4055: CALL_OW 440
4059: PUSH
4060: LD_INT 0
4062: EQUAL
4063: IFFALSE 4081
4065: PUSH
4066: LD_INT 20
4068: PPUSH
4069: LD_INT 3
4071: PPUSH
4072: CALL_OW 321
4076: PUSH
4077: LD_INT 2
4079: EQUAL
4080: AND
4081: IFFALSE 4102
// ComFindDeposit ( ru_sci [ 1 ] , 104 , 94 ) ;
4083: LD_EXP 23
4087: PUSH
4088: LD_INT 1
4090: ARRAY
4091: PPUSH
4092: LD_INT 104
4094: PPUSH
4095: LD_INT 94
4097: PPUSH
4098: CALL 9180 0 3
// if GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) = 1 and need_buldozer then
4102: LD_INT 3
4104: PPUSH
4105: LD_INT 24
4107: PPUSH
4108: LD_INT 53
4110: PPUSH
4111: CALL 8066 0 3
4115: PUSH
4116: LD_INT 1
4118: EQUAL
4119: IFFALSE 4127
4121: PUSH
4122: LD_EXP 18
4126: AND
4127: IFFALSE 4268
// begin need_buldozer := false ;
4129: LD_ADDR_EXP 18
4133: PUSH
4134: LD_INT 0
4136: ST_TO_ADDR
// ComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 67 , 39 ) ;
4137: LD_INT 3
4139: PPUSH
4140: LD_INT 24
4142: PPUSH
4143: LD_INT 53
4145: PPUSH
4146: CALL 8066 0 3
4150: PUSH
4151: LD_INT 1
4153: ARRAY
4154: PPUSH
4155: LD_INT 67
4157: PPUSH
4158: LD_INT 39
4160: PPUSH
4161: CALL_OW 111
// AddComMoveXY ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 71 , 10 ) ;
4165: LD_INT 3
4167: PPUSH
4168: LD_INT 24
4170: PPUSH
4171: LD_INT 53
4173: PPUSH
4174: CALL 8066 0 3
4178: PUSH
4179: LD_INT 1
4181: ARRAY
4182: PPUSH
4183: LD_INT 71
4185: PPUSH
4186: LD_INT 10
4188: PPUSH
4189: CALL_OW 171
// CutTreeInArea ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , cut_area ) ;
4193: LD_INT 3
4195: PPUSH
4196: LD_INT 24
4198: PPUSH
4199: LD_INT 53
4201: PPUSH
4202: CALL 8066 0 3
4206: PUSH
4207: LD_INT 1
4209: ARRAY
4210: PPUSH
4211: LD_INT 15
4213: PPUSH
4214: CALL 5633 0 2
// AddComWait ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , 0 0$10 ) ;
4218: LD_INT 3
4220: PPUSH
4221: LD_INT 24
4223: PPUSH
4224: LD_INT 53
4226: PPUSH
4227: CALL 8066 0 3
4231: PUSH
4232: LD_INT 1
4234: ARRAY
4235: PPUSH
4236: LD_INT 350
4238: PPUSH
4239: CALL_OW 202
// AddComRecycle ( GetVehicle ( 3 , ru_heavy_tracked , ru_bulldozer ) [ 1 ] , ru_fac ) ;
4243: LD_INT 3
4245: PPUSH
4246: LD_INT 24
4248: PPUSH
4249: LD_INT 53
4251: PPUSH
4252: CALL 8066 0 3
4256: PUSH
4257: LD_INT 1
4259: ARRAY
4260: PPUSH
4261: LD_INT 14
4263: PPUSH
4264: CALL_OW 228
// end ; if GetResourceVisibility ( 67 , 39 , 3 ) and HexInfo ( 67 , 39 ) = 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot and EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4268: LD_INT 67
4270: PPUSH
4271: LD_INT 39
4273: PPUSH
4274: LD_INT 3
4276: PPUSH
4277: CALL_OW 440
4281: IFFALSE 4299
4283: PUSH
4284: LD_INT 67
4286: PPUSH
4287: LD_INT 39
4289: PPUSH
4290: CALL_OW 428
4294: PUSH
4295: LD_INT 0
4297: EQUAL
4298: AND
4299: IFFALSE 4322
4301: PUSH
4302: LD_INT 79
4304: PPUSH
4305: LD_INT 45
4307: PPUSH
4308: CALL_OW 428
4312: PPUSH
4313: CALL_OW 266
4317: PUSH
4318: LD_INT 0
4320: EQUAL
4321: AND
4322: IFFALSE 4343
4324: PUSH
4325: LD_INT 1
4327: PPUSH
4328: LD_INT 79
4330: PPUSH
4331: LD_INT 45
4333: PPUSH
4334: CALL 5531 0 3
4338: PUSH
4339: LD_INT 0
4341: EQUAL
4342: AND
4343: IFFALSE 4446
// begin for i = 1 to ru_eng do
4345: LD_ADDR_VAR 0 1
4349: PUSH
4350: DOUBLE
4351: LD_INT 1
4353: DEC
4354: ST_TO_ADDR
4355: LD_EXP 21
4359: PUSH
4360: FOR_TO
4361: IFFALSE 4444
// if IsInUnit ( ru_eng [ i ] ) then
4363: LD_EXP 21
4367: PUSH
4368: LD_VAR 0 1
4372: ARRAY
4373: PPUSH
4374: CALL_OW 310
4378: IFFALSE 4397
// ComExitBuilding ( ru_eng [ i ] ) else
4380: LD_EXP 21
4384: PUSH
4385: LD_VAR 0 1
4389: ARRAY
4390: PPUSH
4391: CALL_OW 122
4395: GO 4442
// if not HasTask ( ru_eng [ i ] ) then
4397: LD_EXP 21
4401: PUSH
4402: LD_VAR 0 1
4406: ARRAY
4407: PPUSH
4408: CALL_OW 314
4412: NOT
4413: IFFALSE 4442
// ComBuild ( ru_eng [ i ] , b_siberite_mine , 67 , 39 , 3 ) ;
4415: LD_EXP 21
4419: PUSH
4420: LD_VAR 0 1
4424: ARRAY
4425: PPUSH
4426: LD_INT 30
4428: PPUSH
4429: LD_INT 67
4431: PPUSH
4432: LD_INT 39
4434: PPUSH
4435: LD_INT 3
4437: PPUSH
4438: CALL_OW 145
4442: GO 4360
4444: POP
4445: POP
// end ; if EnemyNearbyBase ( 1 , 79 , 45 ) = false then
4446: LD_INT 1
4448: PPUSH
4449: LD_INT 79
4451: PPUSH
4452: LD_INT 45
4454: PPUSH
4455: CALL 5531 0 3
4459: PUSH
4460: LD_INT 0
4462: EQUAL
4463: IFFALSE 4661
// begin if HexInfo ( 79 , 45 ) = 0 then
4465: LD_INT 79
4467: PPUSH
4468: LD_INT 45
4470: PPUSH
4471: CALL_OW 428
4475: PUSH
4476: LD_INT 0
4478: EQUAL
4479: IFFALSE 4501
// ComBuildDepot ( ru_eng , 79 , 45 , 3 ) else
4481: LD_EXP 21
4485: PPUSH
4486: LD_INT 79
4488: PPUSH
4489: LD_INT 45
4491: PPUSH
4492: LD_INT 3
4494: PPUSH
4495: CALL 7065 0 4
4499: GO 4661
// if HexInfo ( 89 , 66 ) = 0 and GetResourceVisibility ( 89 , 66 , 3 ) then
4501: LD_INT 89
4503: PPUSH
4504: LD_INT 66
4506: PPUSH
4507: CALL_OW 428
4511: PUSH
4512: LD_INT 0
4514: EQUAL
4515: IFFALSE 4532
4517: PUSH
4518: LD_INT 89
4520: PPUSH
4521: LD_INT 66
4523: PPUSH
4524: LD_INT 3
4526: PPUSH
4527: CALL_OW 440
4531: AND
4532: IFFALSE 4661
// begin SetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , mat_cans , 100 ) ;
4534: LD_INT 79
4536: PPUSH
4537: LD_INT 45
4539: PPUSH
4540: CALL_OW 428
4544: PPUSH
4545: CALL_OW 274
4549: PPUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_INT 100
4555: PPUSH
4556: CALL_OW 277
// for i = 1 to ru_eng do
4560: LD_ADDR_VAR 0 1
4564: PUSH
4565: DOUBLE
4566: LD_INT 1
4568: DEC
4569: ST_TO_ADDR
4570: LD_EXP 21
4574: PUSH
4575: FOR_TO
4576: IFFALSE 4659
// if IsInUnit ( ru_eng [ i ] ) then
4578: LD_EXP 21
4582: PUSH
4583: LD_VAR 0 1
4587: ARRAY
4588: PPUSH
4589: CALL_OW 310
4593: IFFALSE 4612
// ComExitBuilding ( ru_eng [ i ] ) else
4595: LD_EXP 21
4599: PUSH
4600: LD_VAR 0 1
4604: ARRAY
4605: PPUSH
4606: CALL_OW 122
4610: GO 4657
// if not HasTask ( ru_eng [ i ] ) then
4612: LD_EXP 21
4616: PUSH
4617: LD_VAR 0 1
4621: ARRAY
4622: PPUSH
4623: CALL_OW 314
4627: NOT
4628: IFFALSE 4657
// ComBuild ( ru_eng [ i ] , b_oil_mine , 89 , 66 , 3 ) ;
4630: LD_EXP 21
4634: PUSH
4635: LD_VAR 0 1
4639: ARRAY
4640: PPUSH
4641: LD_INT 29
4643: PPUSH
4644: LD_INT 89
4646: PPUSH
4647: LD_INT 66
4649: PPUSH
4650: LD_INT 3
4652: PPUSH
4653: CALL_OW 145
4657: GO 4575
4659: POP
4660: POP
// end ; end ; if GetBuilding ( 3 , b_oil_mine ) = 0 and EnemyNearbyBase ( 1 , 36 , 6 ) = false and Cost ( MyBase ( 3 ) , b_oil_mine ) then
4661: LD_INT 3
4663: PPUSH
4664: LD_INT 29
4666: PPUSH
4667: CALL 6297 0 2
4671: PUSH
4672: LD_INT 0
4674: EQUAL
4675: IFFALSE 4696
4677: PUSH
4678: LD_INT 1
4680: PPUSH
4681: LD_INT 36
4683: PPUSH
4684: LD_INT 6
4686: PPUSH
4687: CALL 5531 0 3
4691: PUSH
4692: LD_INT 0
4694: EQUAL
4695: AND
4696: IFFALSE 4715
4698: PUSH
4699: LD_INT 3
4701: PPUSH
4702: CALL 6206 0 1
4706: PPUSH
4707: LD_INT 29
4709: PPUSH
4710: CALL 5776 0 2
4714: AND
4715: IFFALSE 4818
// begin for i = 1 to ru_eng do
4717: LD_ADDR_VAR 0 1
4721: PUSH
4722: DOUBLE
4723: LD_INT 1
4725: DEC
4726: ST_TO_ADDR
4727: LD_EXP 21
4731: PUSH
4732: FOR_TO
4733: IFFALSE 4816
// begin if IsInUnit ( ru_eng [ i ] ) then
4735: LD_EXP 21
4739: PUSH
4740: LD_VAR 0 1
4744: ARRAY
4745: PPUSH
4746: CALL_OW 310
4750: IFFALSE 4769
// ComExitBuilding ( ru_eng [ i ] ) else
4752: LD_EXP 21
4756: PUSH
4757: LD_VAR 0 1
4761: ARRAY
4762: PPUSH
4763: CALL_OW 122
4767: GO 4814
// if not HasTask ( ru_eng [ i ] ) then
4769: LD_EXP 21
4773: PUSH
4774: LD_VAR 0 1
4778: ARRAY
4779: PPUSH
4780: CALL_OW 314
4784: NOT
4785: IFFALSE 4814
// begin AddComBuild ( ru_eng [ i ] , b_oil_mine , 33 , 4 , 0 ) ;
4787: LD_EXP 21
4791: PUSH
4792: LD_VAR 0 1
4796: ARRAY
4797: PPUSH
4798: LD_INT 29
4800: PPUSH
4801: LD_INT 33
4803: PPUSH
4804: LD_INT 4
4806: PPUSH
4807: LD_INT 0
4809: PPUSH
4810: CALL_OW 205
// end ; end ;
4814: GO 4732
4816: POP
4817: POP
// end ; if ru_eng and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
4818: LD_EXP 21
4822: IFFALSE 4840
4824: PUSH
4825: LD_INT 79
4827: PPUSH
4828: LD_INT 45
4830: PPUSH
4831: CALL_OW 428
4835: PUSH
4836: LD_INT 0
4838: GREATER
4839: AND
4840: IFFALSE 4863
4842: PUSH
4843: LD_INT 79
4845: PPUSH
4846: LD_INT 45
4848: PPUSH
4849: CALL_OW 428
4853: PPUSH
4854: CALL_OW 266
4858: PUSH
4859: LD_INT 0
4861: EQUAL
4862: AND
4863: IFFALSE 5027
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 3 ) >= 10 then
4865: LD_INT 79
4867: PPUSH
4868: LD_INT 45
4870: PPUSH
4871: CALL_OW 428
4875: PPUSH
4876: CALL_OW 255
4880: PUSH
4881: LD_INT 3
4883: EQUAL
4884: IFFALSE 4905
4886: PUSH
4887: LD_INT 1
4889: PPUSH
4890: LD_INT 79
4892: PPUSH
4893: LD_INT 45
4895: PPUSH
4896: CALL 5531 0 3
4900: PUSH
4901: LD_INT 0
4903: EQUAL
4904: AND
4905: IFFALSE 4936
4907: PUSH
4908: LD_INT 79
4910: PPUSH
4911: LD_INT 45
4913: PPUSH
4914: CALL_OW 428
4918: PPUSH
4919: CALL_OW 274
4923: PPUSH
4924: LD_INT 3
4926: PPUSH
4927: CALL_OW 275
4931: PUSH
4932: LD_INT 10
4934: GREATEREQUAL
4935: AND
4936: IFFALSE 5027
// begin if IsInUnit ( ru_eng [ 1 ] ) then
4938: LD_EXP 21
4942: PUSH
4943: LD_INT 1
4945: ARRAY
4946: PPUSH
4947: CALL_OW 310
4951: IFFALSE 4968
// ComExitBuilding ( ru_eng [ 1 ] ) else
4953: LD_EXP 21
4957: PUSH
4958: LD_INT 1
4960: ARRAY
4961: PPUSH
4962: CALL_OW 122
4966: GO 5027
// if not HasTask ( ru_eng [ 1 ] ) then
4968: LD_EXP 21
4972: PUSH
4973: LD_INT 1
4975: ARRAY
4976: PPUSH
4977: CALL_OW 314
4981: NOT
4982: IFFALSE 5027
// begin ComTransport ( ru_eng [ 1 ] , HexInfo ( 79 , 45 ) , 3 ) ;
4984: LD_EXP 21
4988: PUSH
4989: LD_INT 1
4991: ARRAY
4992: PPUSH
4993: LD_INT 79
4995: PPUSH
4996: LD_INT 45
4998: PPUSH
4999: CALL_OW 428
5003: PPUSH
5004: LD_INT 3
5006: PPUSH
5007: CALL_OW 151
// AddComGive ( ru_eng [ 1 ] , ru_depot ) ;
5011: LD_EXP 21
5015: PUSH
5016: LD_INT 1
5018: ARRAY
5019: PPUSH
5020: LD_INT 2
5022: PPUSH
5023: CALL_OW 221
// end ; end ; if ru_eng > 2 and HexInfo ( 79 , 45 ) > 0 and GetBType ( HexInfo ( 79 , 45 ) ) = b_depot then
5027: LD_EXP 21
5031: PUSH
5032: LD_INT 2
5034: GREATER
5035: IFFALSE 5053
5037: PUSH
5038: LD_INT 79
5040: PPUSH
5041: LD_INT 45
5043: PPUSH
5044: CALL_OW 428
5048: PUSH
5049: LD_INT 0
5051: GREATER
5052: AND
5053: IFFALSE 5076
5055: PUSH
5056: LD_INT 79
5058: PPUSH
5059: LD_INT 45
5061: PPUSH
5062: CALL_OW 428
5066: PPUSH
5067: CALL_OW 266
5071: PUSH
5072: LD_INT 0
5074: EQUAL
5075: AND
5076: IFFALSE 5240
// if GetSide ( HexInfo ( 79 , 45 ) ) = 3 and EnemyNearbyBase ( 1 , 79 , 45 ) = false and GetResourceType ( GetBase ( HexInfo ( 79 , 45 ) ) , 1 ) > 20 then
5078: LD_INT 79
5080: PPUSH
5081: LD_INT 45
5083: PPUSH
5084: CALL_OW 428
5088: PPUSH
5089: CALL_OW 255
5093: PUSH
5094: LD_INT 3
5096: EQUAL
5097: IFFALSE 5118
5099: PUSH
5100: LD_INT 1
5102: PPUSH
5103: LD_INT 79
5105: PPUSH
5106: LD_INT 45
5108: PPUSH
5109: CALL 5531 0 3
5113: PUSH
5114: LD_INT 0
5116: EQUAL
5117: AND
5118: IFFALSE 5149
5120: PUSH
5121: LD_INT 79
5123: PPUSH
5124: LD_INT 45
5126: PPUSH
5127: CALL_OW 428
5131: PPUSH
5132: CALL_OW 274
5136: PPUSH
5137: LD_INT 1
5139: PPUSH
5140: CALL_OW 275
5144: PUSH
5145: LD_INT 20
5147: GREATER
5148: AND
5149: IFFALSE 5240
// begin if IsInUnit ( ru_eng [ 2 ] ) then
5151: LD_EXP 21
5155: PUSH
5156: LD_INT 2
5158: ARRAY
5159: PPUSH
5160: CALL_OW 310
5164: IFFALSE 5181
// ComExitBuilding ( ru_eng [ 2 ] ) else
5166: LD_EXP 21
5170: PUSH
5171: LD_INT 2
5173: ARRAY
5174: PPUSH
5175: CALL_OW 122
5179: GO 5240
// if not HasTask ( ru_eng [ 2 ] ) then
5181: LD_EXP 21
5185: PUSH
5186: LD_INT 2
5188: ARRAY
5189: PPUSH
5190: CALL_OW 314
5194: NOT
5195: IFFALSE 5240
// begin ComTransport ( ru_eng [ 2 ] , HexInfo ( 79 , 45 ) , 1 ) ;
5197: LD_EXP 21
5201: PUSH
5202: LD_INT 2
5204: ARRAY
5205: PPUSH
5206: LD_INT 79
5208: PPUSH
5209: LD_INT 45
5211: PPUSH
5212: CALL_OW 428
5216: PPUSH
5217: LD_INT 1
5219: PPUSH
5220: CALL_OW 151
// AddComGive ( ru_eng [ 2 ] , ru_depot ) ;
5224: LD_EXP 21
5228: PUSH
5229: LD_INT 2
5231: ARRAY
5232: PPUSH
5233: LD_INT 2
5235: PPUSH
5236: CALL_OW 221
// end ; end ; if EnemyNearbyBase ( 1 , 59 , 60 ) = false and EnemyNearbyBase ( 1 , 67 , 76 ) = false and EnemyNearbyBase ( 1 , 79 , 100 ) = false then
5240: LD_INT 1
5242: PPUSH
5243: LD_INT 59
5245: PPUSH
5246: LD_INT 60
5248: PPUSH
5249: CALL 5531 0 3
5253: PUSH
5254: LD_INT 0
5256: EQUAL
5257: IFFALSE 5278
5259: PUSH
5260: LD_INT 1
5262: PPUSH
5263: LD_INT 67
5265: PPUSH
5266: LD_INT 76
5268: PPUSH
5269: CALL 5531 0 3
5273: PUSH
5274: LD_INT 0
5276: EQUAL
5277: AND
5278: IFFALSE 5299
5280: PUSH
5281: LD_INT 1
5283: PPUSH
5284: LD_INT 79
5286: PPUSH
5287: LD_INT 100
5289: PPUSH
5290: CALL 5531 0 3
5294: PUSH
5295: LD_INT 0
5297: EQUAL
5298: AND
5299: IFFALSE 5311
// CollectCrates ( 3 , west_crates ) ;
5301: LD_INT 3
5303: PPUSH
5304: LD_INT 13
5306: PPUSH
5307: CALL 11500 0 2
// end ;
5311: PPOPN 10
5313: END
// every 4 4$00 + 2 2$00 trigger tick <= 53 53$00 or not helps_arrive do var veh ;
5314: LD_OWVAR 1
5318: PUSH
5319: LD_INT 111300
5321: LESSEQUAL
5322: IFTRUE 5331
5324: PUSH
5325: LD_EXP 30
5329: NOT
5330: OR
5331: IFFALSE 5528
5333: GO 5335
5335: DISABLE
5336: LD_INT 0
5338: PPUSH
// begin enable ;
5339: ENABLE
// uc_nation := 3 ;
5340: LD_ADDR_OWVAR 21
5344: PUSH
5345: LD_INT 3
5347: ST_TO_ADDR
// uc_side := 3 ;
5348: LD_ADDR_OWVAR 20
5352: PUSH
5353: LD_INT 3
5355: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
5356: LD_ADDR_OWVAR 37
5360: PUSH
5361: LD_INT 22
5363: ST_TO_ADDR
// vc_engine := engine_siberite ;
5364: LD_ADDR_OWVAR 39
5368: PUSH
5369: LD_INT 3
5371: ST_TO_ADDR
// vc_control := control_computer ;
5372: LD_ADDR_OWVAR 38
5376: PUSH
5377: LD_INT 3
5379: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
5380: LD_ADDR_OWVAR 40
5384: PUSH
5385: LD_INT 51
5387: ST_TO_ADDR
// veh := CreateVehicle ;
5388: LD_ADDR_VAR 0 1
5392: PUSH
5393: CALL_OW 45
5397: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5398: LD_VAR 0 1
5402: PPUSH
5403: LD_INT 4
5405: PPUSH
5406: CALL_OW 233
// PlaceUnitArea ( veh , upper_road_area , false ) ;
5410: LD_VAR 0 1
5414: PPUSH
5415: LD_INT 10
5417: PPUSH
5418: LD_INT 0
5420: PPUSH
5421: CALL_OW 49
// SetCargo ( veh , [ 1 , 2 , 3 , 2 ] [ Rand ( 1 , 4 ) ] , 100 ) ;
5425: LD_VAR 0 1
5429: PPUSH
5430: LD_INT 1
5432: PUSH
5433: LD_INT 2
5435: PUSH
5436: LD_INT 3
5438: PUSH
5439: LD_INT 2
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 1
5450: PPUSH
5451: LD_INT 4
5453: PPUSH
5454: CALL_OW 12
5458: ARRAY
5459: PPUSH
5460: LD_INT 100
5462: PPUSH
5463: CALL_OW 290
// ComGive ( veh , ru_depot ) ;
5467: LD_VAR 0 1
5471: PPUSH
5472: LD_INT 2
5474: PPUSH
5475: CALL_OW 161
// AddComMoveToArea ( veh , upper_road_area ) ;
5479: LD_VAR 0 1
5483: PPUSH
5484: LD_INT 10
5486: PPUSH
5487: CALL_OW 173
// Wait ( 0 0$10 ) ;
5491: LD_INT 350
5493: PPUSH
5494: CALL_OW 67
// repeat Wait ( 0 0$01 ) ;
5498: LD_INT 35
5500: PPUSH
5501: CALL_OW 67
// until IsInArea ( veh , upper_road_area ) ;
5505: LD_VAR 0 1
5509: PPUSH
5510: LD_INT 10
5512: PPUSH
5513: CALL_OW 308
5517: IFFALSE 5498
// RemoveUnit ( veh ) ;
5519: LD_VAR 0 1
5523: PPUSH
5524: CALL_OW 64
// end ; end_of_file
5528: PPOPN 1
5530: END
// export function EnemyNearbyBase ( side , x , y ) ; var i ; begin
5531: LD_INT 0
5533: PPUSH
5534: PPUSH
// i := NearestUnitToXY ( FilterAllUnits ( [ f_side , side ] ) , x , y ) ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_INT 22
5542: PUSH
5543: LD_VAR 0 1
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: PPUSH
5552: CALL_OW 69
5556: PPUSH
5557: LD_VAR 0 2
5561: PPUSH
5562: LD_VAR 0 3
5566: PPUSH
5567: CALL_OW 73
5571: ST_TO_ADDR
// result := GetDistUnitXY ( i , x , y ) < 15 or FilterUnitsInArea ( ru_base_area , [ f_side , side ] ) > 0 ;
5572: LD_ADDR_VAR 0 4
5576: PUSH
5577: LD_VAR 0 5
5581: PPUSH
5582: LD_VAR 0 2
5586: PPUSH
5587: LD_VAR 0 3
5591: PPUSH
5592: CALL_OW 297
5596: PUSH
5597: LD_INT 15
5599: LESS
5600: IFTRUE 5627
5602: PUSH
5603: LD_INT 2
5605: PPUSH
5606: LD_INT 22
5608: PUSH
5609: LD_VAR 0 1
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PPUSH
5618: CALL_OW 70
5622: PUSH
5623: LD_INT 0
5625: GREATER
5626: OR
5627: ST_TO_ADDR
// end ;
5628: LD_VAR 0 4
5632: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
5633: LD_INT 0
5635: PPUSH
5636: PPUSH
// area = ListEnvironmentArea ( area ) ;
5637: LD_ADDR_VAR 0 2
5641: PUSH
5642: LD_VAR 0 2
5646: PPUSH
5647: CALL_OW 353
5651: ST_TO_ADDR
// if bulldozer > 0 then
5652: LD_VAR 0 1
5656: PUSH
5657: LD_INT 0
5659: GREATER
5660: IFFALSE 5771
// for i = 1 to area do
5662: LD_ADDR_VAR 0 4
5666: PUSH
5667: DOUBLE
5668: LD_INT 1
5670: DEC
5671: ST_TO_ADDR
5672: LD_VAR 0 2
5676: PUSH
5677: FOR_TO
5678: IFFALSE 5769
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 4
5689: ARRAY
5690: PUSH
5691: LD_INT 1
5693: ARRAY
5694: PPUSH
5695: LD_VAR 0 2
5699: PUSH
5700: LD_VAR 0 4
5704: ARRAY
5705: PUSH
5706: LD_INT 2
5708: ARRAY
5709: PPUSH
5710: CALL_OW 351
5714: IFFALSE 5767
// if not HasTask ( bulldozer ) then
5716: LD_VAR 0 1
5720: PPUSH
5721: CALL_OW 314
5725: NOT
5726: IFFALSE 5767
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
5728: LD_VAR 0 1
5732: PPUSH
5733: LD_VAR 0 2
5737: PUSH
5738: LD_VAR 0 4
5742: ARRAY
5743: PUSH
5744: LD_INT 1
5746: ARRAY
5747: PPUSH
5748: LD_VAR 0 2
5752: PUSH
5753: LD_VAR 0 4
5757: ARRAY
5758: PUSH
5759: LD_INT 2
5761: ARRAY
5762: PPUSH
5763: CALL_OW 171
5767: GO 5677
5769: POP
5770: POP
// end ;
5771: LD_VAR 0 3
5775: RET
// export function Cost ( bdepot , btype ) ; var pom , cost ; begin
5776: LD_INT 0
5778: PPUSH
5779: PPUSH
5780: PPUSH
// pom := GetBase ( bdepot ) ;
5781: LD_ADDR_VAR 0 4
5785: PUSH
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 274
5795: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
5796: LD_ADDR_VAR 0 5
5800: PUSH
5801: LD_VAR 0 2
5805: PPUSH
5806: LD_VAR 0 1
5810: PPUSH
5811: CALL_OW 248
5815: PPUSH
5816: CALL_OW 450
5820: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
5821: LD_VAR 0 4
5825: PPUSH
5826: LD_INT 1
5828: PPUSH
5829: CALL_OW 275
5833: PUSH
5834: LD_VAR 0 5
5838: PUSH
5839: LD_INT 1
5841: ARRAY
5842: GREATEREQUAL
5843: IFFALSE 5869
5845: PUSH
5846: LD_VAR 0 4
5850: PPUSH
5851: LD_INT 3
5853: PPUSH
5854: CALL_OW 275
5858: PUSH
5859: LD_VAR 0 5
5863: PUSH
5864: LD_INT 3
5866: ARRAY
5867: GREATEREQUAL
5868: AND
5869: IFFALSE 5881
// result := true else
5871: LD_ADDR_VAR 0 3
5875: PUSH
5876: LD_INT 1
5878: ST_TO_ADDR
5879: GO 5889
// result := false ;
5881: LD_ADDR_VAR 0 3
5885: PUSH
5886: LD_INT 0
5888: ST_TO_ADDR
// end ;
5889: LD_VAR 0 3
5893: RET
// export function GetBaseSource ( bdepot ) ; var pom , sor ; begin
5894: LD_INT 0
5896: PPUSH
5897: PPUSH
5898: PPUSH
// pom := GetBase ( bdepot ) ;
5899: LD_ADDR_VAR 0 3
5903: PUSH
5904: LD_VAR 0 1
5908: PPUSH
5909: CALL_OW 274
5913: ST_TO_ADDR
// sor := [ ] ;
5914: LD_ADDR_VAR 0 4
5918: PUSH
5919: EMPTY
5920: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_cans ) ;
5921: LD_ADDR_VAR 0 4
5925: PUSH
5926: LD_VAR 0 4
5930: PUSH
5931: LD_VAR 0 3
5935: PPUSH
5936: LD_INT 1
5938: PPUSH
5939: CALL_OW 275
5943: ADD
5944: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_oil ) ;
5945: LD_ADDR_VAR 0 4
5949: PUSH
5950: LD_VAR 0 4
5954: PUSH
5955: LD_VAR 0 3
5959: PPUSH
5960: LD_INT 2
5962: PPUSH
5963: CALL_OW 275
5967: ADD
5968: ST_TO_ADDR
// sor := sor ^ GetResourceType ( pom , mat_siberit ) ;
5969: LD_ADDR_VAR 0 4
5973: PUSH
5974: LD_VAR 0 4
5978: PUSH
5979: LD_VAR 0 3
5983: PPUSH
5984: LD_INT 3
5986: PPUSH
5987: CALL_OW 275
5991: ADD
5992: ST_TO_ADDR
// result := sor ;
5993: LD_ADDR_VAR 0 2
5997: PUSH
5998: LD_VAR 0 4
6002: ST_TO_ADDR
// end ;
6003: LD_VAR 0 2
6007: RET
// export function Hex ( x , y ) ; begin
6008: LD_INT 0
6010: PPUSH
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
6011: LD_VAR 0 1
6015: PPUSH
6016: LD_VAR 0 2
6020: PPUSH
6021: CALL_OW 488
6025: IFFALSE 6047
6027: PUSH
6028: LD_VAR 0 1
6032: PPUSH
6033: LD_VAR 0 2
6037: PPUSH
6038: CALL_OW 428
6042: PUSH
6043: LD_INT 0
6045: EQUAL
6046: AND
6047: IFFALSE 6059
// result := true else
6049: LD_ADDR_VAR 0 3
6053: PUSH
6054: LD_INT 1
6056: ST_TO_ADDR
6057: GO 6067
// result := false ;
6059: LD_ADDR_VAR 0 3
6063: PUSH
6064: LD_INT 0
6066: ST_TO_ADDR
// end ;
6067: LD_VAR 0 3
6071: RET
// export function NeedBuilding ( side , btype ) ; begin
6072: LD_INT 0
6074: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] , [ f_not , [ f_constructed ] ] ] ) = 0 then
6075: LD_INT 22
6077: PUSH
6078: LD_VAR 0 1
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 30
6089: PUSH
6090: LD_VAR 0 2
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 3
6101: PUSH
6102: LD_INT 57
6104: PUSH
6105: EMPTY
6106: LIST
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: LIST
6116: PPUSH
6117: CALL_OW 69
6121: PUSH
6122: LD_INT 0
6124: EQUAL
6125: IFFALSE 6137
// result := true else
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: LD_INT 1
6134: ST_TO_ADDR
6135: GO 6145
// result := false ;
6137: LD_ADDR_VAR 0 3
6141: PUSH
6142: LD_INT 0
6144: ST_TO_ADDR
// end ;
6145: LD_VAR 0 3
6149: RET
// export function NeedBase ( side ) ; begin
6150: LD_INT 0
6152: PPUSH
// if NeedBuilding ( side , b_depot ) and NeedBuilding ( side , b_warehouse ) then
6153: LD_VAR 0 1
6157: PPUSH
6158: LD_INT 0
6160: PPUSH
6161: CALL 6072 0 2
6165: IFFALSE 6181
6167: PUSH
6168: LD_VAR 0 1
6172: PPUSH
6173: LD_INT 1
6175: PPUSH
6176: CALL 6072 0 2
6180: AND
6181: IFFALSE 6193
// result := true else
6183: LD_ADDR_VAR 0 2
6187: PUSH
6188: LD_INT 1
6190: ST_TO_ADDR
6191: GO 6201
// result := false ;
6193: LD_ADDR_VAR 0 2
6197: PUSH
6198: LD_INT 0
6200: ST_TO_ADDR
// end ;
6201: LD_VAR 0 2
6205: RET
// export function MyBase ( side ) ; begin
6206: LD_INT 0
6208: PPUSH
// if not NeedBase ( side ) then
6209: LD_VAR 0 1
6213: PPUSH
6214: CALL 6150 0 1
6218: NOT
6219: IFFALSE 6284
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ] ) [ 1 ] else
6221: LD_ADDR_VAR 0 2
6225: PUSH
6226: LD_INT 22
6228: PUSH
6229: LD_VAR 0 1
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: LD_INT 2
6240: PUSH
6241: LD_INT 30
6243: PUSH
6244: LD_INT 0
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 30
6253: PUSH
6254: LD_INT 1
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PUSH
6270: EMPTY
6271: LIST
6272: PPUSH
6273: CALL_OW 69
6277: PUSH
6278: LD_INT 1
6280: ARRAY
6281: ST_TO_ADDR
6282: GO 6292
// result := false ;
6284: LD_ADDR_VAR 0 2
6288: PUSH
6289: LD_INT 0
6291: ST_TO_ADDR
// end ;
6292: LD_VAR 0 2
6296: RET
// export function GetBuilding ( side , btype ) ; begin
6297: LD_INT 0
6299: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) > 0 then
6300: LD_INT 22
6302: PUSH
6303: LD_VAR 0 1
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PUSH
6312: LD_INT 30
6314: PUSH
6315: LD_VAR 0 2
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PPUSH
6328: CALL_OW 69
6332: PUSH
6333: LD_INT 0
6335: GREATER
6336: IFFALSE 6378
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) else
6338: LD_ADDR_VAR 0 3
6342: PUSH
6343: LD_INT 22
6345: PUSH
6346: LD_VAR 0 1
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: PUSH
6355: LD_INT 30
6357: PUSH
6358: LD_VAR 0 2
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PPUSH
6371: CALL_OW 69
6375: ST_TO_ADDR
6376: GO 6386
// result := false ;
6378: LD_ADDR_VAR 0 3
6382: PUSH
6383: LD_INT 0
6385: ST_TO_ADDR
// end ;
6386: LD_VAR 0 3
6390: RET
// export function GetCrates ( side ) ; begin
6391: LD_INT 0
6393: PPUSH
// result := 0 ;
6394: LD_ADDR_VAR 0 2
6398: PUSH
6399: LD_INT 0
6401: ST_TO_ADDR
// if MyBase ( side ) then
6402: LD_VAR 0 1
6406: PPUSH
6407: CALL 6206 0 1
6411: IFFALSE 6441
// result := GetResourceType ( GetBase ( MyBase ( side ) ) , mat_cans ) ;
6413: LD_ADDR_VAR 0 2
6417: PUSH
6418: LD_VAR 0 1
6422: PPUSH
6423: CALL 6206 0 1
6427: PPUSH
6428: CALL_OW 274
6432: PPUSH
6433: LD_INT 1
6435: PPUSH
6436: CALL_OW 275
6440: ST_TO_ADDR
// end ;
6441: LD_VAR 0 2
6445: RET
// export function GetLabs ( side ) ; begin
6446: LD_INT 0
6448: PPUSH
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ] ) ;
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: LD_INT 22
6456: PUSH
6457: LD_VAR 0 1
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: LD_INT 2
6468: PUSH
6469: LD_INT 30
6471: PUSH
6472: LD_INT 6
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 30
6481: PUSH
6482: LD_INT 8
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PUSH
6489: LD_INT 30
6491: PUSH
6492: LD_INT 7
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: EMPTY
6510: LIST
6511: PPUSH
6512: CALL_OW 69
6516: ST_TO_ADDR
// end ;
6517: LD_VAR 0 2
6521: RET
// export function GetLabKinds ( lab ) ; var kind1 , kind2 ; begin
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
6526: PPUSH
// kind1 := GetLabKind ( lab , 1 ) ;
6527: LD_ADDR_VAR 0 3
6531: PUSH
6532: LD_VAR 0 1
6536: PPUSH
6537: LD_INT 1
6539: PPUSH
6540: CALL_OW 268
6544: ST_TO_ADDR
// kind2 := GetLabKind ( lab , 2 ) ;
6545: LD_ADDR_VAR 0 4
6549: PUSH
6550: LD_VAR 0 1
6554: PPUSH
6555: LD_INT 2
6557: PPUSH
6558: CALL_OW 268
6562: ST_TO_ADDR
// result := [ kind1 , kind2 ] ;
6563: LD_ADDR_VAR 0 2
6567: PUSH
6568: LD_VAR 0 3
6572: PUSH
6573: LD_VAR 0 4
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: ST_TO_ADDR
// end ;
6582: LD_VAR 0 2
6586: RET
// export function CheckTechList ( side , tlist ) ; var i ; begin
6587: LD_INT 0
6589: PPUSH
6590: PPUSH
// result := false ;
6591: LD_ADDR_VAR 0 3
6595: PUSH
6596: LD_INT 0
6598: ST_TO_ADDR
// for i = 1 to tlist do
6599: LD_ADDR_VAR 0 4
6603: PUSH
6604: DOUBLE
6605: LD_INT 1
6607: DEC
6608: ST_TO_ADDR
6609: LD_VAR 0 2
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6655
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6617: LD_VAR 0 2
6621: PUSH
6622: LD_VAR 0 4
6626: ARRAY
6627: PPUSH
6628: LD_VAR 0 1
6632: PPUSH
6633: CALL_OW 321
6637: PUSH
6638: LD_INT 2
6640: NONEQUAL
6641: IFFALSE 6653
// begin result := true ;
6643: LD_ADDR_VAR 0 3
6647: PUSH
6648: LD_INT 1
6650: ST_TO_ADDR
// break ;
6651: GO 6655
// end ;
6653: GO 6614
6655: POP
6656: POP
// end ;
6657: LD_VAR 0 3
6661: RET
// export function ResearchTechList ( side , tlist ) ; var i , lab , pom , tmp , list , mylab , basic_tech ; begin
6662: LD_INT 0
6664: PPUSH
6665: PPUSH
6666: PPUSH
6667: PPUSH
6668: PPUSH
6669: PPUSH
6670: PPUSH
6671: PPUSH
// lab := GetLabs ( side ) ;
6672: LD_ADDR_VAR 0 5
6676: PUSH
6677: LD_VAR 0 1
6681: PPUSH
6682: CALL 6446 0 1
6686: ST_TO_ADDR
// tmp := 0 ;
6687: LD_ADDR_VAR 0 7
6691: PUSH
6692: LD_INT 0
6694: ST_TO_ADDR
// list := [ ] ;
6695: LD_ADDR_VAR 0 8
6699: PUSH
6700: EMPTY
6701: ST_TO_ADDR
// basic_tech := [ 35 , 45 , 46 , 47 , 1 , 2 , 48 , 49 , 50 , 20 ] ;
6702: LD_ADDR_VAR 0 10
6706: PUSH
6707: LD_INT 35
6709: PUSH
6710: LD_INT 45
6712: PUSH
6713: LD_INT 46
6715: PUSH
6716: LD_INT 47
6718: PUSH
6719: LD_INT 1
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: LD_INT 48
6727: PUSH
6728: LD_INT 49
6730: PUSH
6731: LD_INT 50
6733: PUSH
6734: LD_INT 20
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: ST_TO_ADDR
// for i = 1 to tlist do
6749: LD_ADDR_VAR 0 4
6753: PUSH
6754: DOUBLE
6755: LD_INT 1
6757: DEC
6758: ST_TO_ADDR
6759: LD_VAR 0 2
6763: PUSH
6764: FOR_TO
6765: IFFALSE 6817
// if GetTech ( tlist [ i ] , side ) <> state_researched then
6767: LD_VAR 0 2
6771: PUSH
6772: LD_VAR 0 4
6776: ARRAY
6777: PPUSH
6778: LD_VAR 0 1
6782: PPUSH
6783: CALL_OW 321
6787: PUSH
6788: LD_INT 2
6790: NONEQUAL
6791: IFFALSE 6815
// list := list ^ tlist [ i ] ;
6793: LD_ADDR_VAR 0 8
6797: PUSH
6798: LD_VAR 0 8
6802: PUSH
6803: LD_VAR 0 2
6807: PUSH
6808: LD_VAR 0 4
6812: ARRAY
6813: ADD
6814: ST_TO_ADDR
6815: GO 6764
6817: POP
6818: POP
// if list then
6819: LD_VAR 0 8
6823: IFFALSE 6990
// begin for i = 1 to lab do
6825: LD_ADDR_VAR 0 4
6829: PUSH
6830: DOUBLE
6831: LD_INT 1
6833: DEC
6834: ST_TO_ADDR
6835: LD_VAR 0 5
6839: PUSH
6840: FOR_TO
6841: IFFALSE 6913
// if ( list [ 1 ] in basic_tech ) or ( GetTechLab ( list [ 1 ] ) in GetLabKinds ( lab [ i ] ) ) then
6843: LD_VAR 0 8
6847: PUSH
6848: LD_INT 1
6850: ARRAY
6851: PUSH
6852: LD_VAR 0 10
6856: IN
6857: IFTRUE 6891
6859: PUSH
6860: LD_VAR 0 8
6864: PUSH
6865: LD_INT 1
6867: ARRAY
6868: PPUSH
6869: CALL_OW 481
6873: PUSH
6874: LD_VAR 0 5
6878: PUSH
6879: LD_VAR 0 4
6883: ARRAY
6884: PPUSH
6885: CALL 6522 0 1
6889: IN
6890: OR
6891: IFFALSE 6911
// begin mylab := lab [ i ] ;
6893: LD_ADDR_VAR 0 9
6897: PUSH
6898: LD_VAR 0 5
6902: PUSH
6903: LD_VAR 0 4
6907: ARRAY
6908: ST_TO_ADDR
// break ;
6909: GO 6913
// end ;
6911: GO 6840
6913: POP
6914: POP
// if mylab then
6915: LD_VAR 0 9
6919: IFFALSE 6980
// begin if BuildingStatus ( mylab ) = bs_idle then
6921: LD_VAR 0 9
6925: PPUSH
6926: CALL_OW 461
6930: PUSH
6931: LD_INT 2
6933: EQUAL
6934: IFFALSE 6978
// for i = 1 to list do
6936: LD_ADDR_VAR 0 4
6940: PUSH
6941: DOUBLE
6942: LD_INT 1
6944: DEC
6945: ST_TO_ADDR
6946: LD_VAR 0 8
6950: PUSH
6951: FOR_TO
6952: IFFALSE 6976
// AddComResearch ( mylab , list [ i ] ) ;
6954: LD_VAR 0 9
6958: PPUSH
6959: LD_VAR 0 8
6963: PUSH
6964: LD_VAR 0 4
6968: ARRAY
6969: PPUSH
6970: CALL_OW 184
6974: GO 6951
6976: POP
6977: POP
// end else
6978: GO 6988
// result := false ;
6980: LD_ADDR_VAR 0 3
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// end else
6988: GO 6998
// result := false ;
6990: LD_ADDR_VAR 0 3
6994: PUSH
6995: LD_INT 0
6997: ST_TO_ADDR
// end ;
6998: LD_VAR 0 3
7002: RET
// export function GetTowers ( side ) ; begin
7003: LD_INT 0
7005: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
7006: LD_ADDR_VAR 0 2
7010: PUSH
7011: LD_INT 22
7013: PUSH
7014: LD_VAR 0 1
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 2
7025: PUSH
7026: LD_INT 30
7028: PUSH
7029: LD_INT 32
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: LD_INT 33
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PPUSH
7055: CALL_OW 69
7059: ST_TO_ADDR
// end ;
7060: LD_VAR 0 2
7064: RET
// export function ComBuildDepot ( plist , x , y , d ) ; var i ; begin
7065: LD_INT 0
7067: PPUSH
7068: PPUSH
// if Hex ( x , y ) then
7069: LD_VAR 0 2
7073: PPUSH
7074: LD_VAR 0 3
7078: PPUSH
7079: CALL 6008 0 2
7083: IFFALSE 7158
// for i = 1 to plist do
7085: LD_ADDR_VAR 0 6
7089: PUSH
7090: DOUBLE
7091: LD_INT 1
7093: DEC
7094: ST_TO_ADDR
7095: LD_VAR 0 1
7099: PUSH
7100: FOR_TO
7101: IFFALSE 7156
// if not HasTask ( plist [ i ] ) then
7103: LD_VAR 0 1
7107: PUSH
7108: LD_VAR 0 6
7112: ARRAY
7113: PPUSH
7114: CALL_OW 314
7118: NOT
7119: IFFALSE 7154
// ComBuild ( plist [ i ] , b_depot , x , y , d ) ;
7121: LD_VAR 0 1
7125: PUSH
7126: LD_VAR 0 6
7130: ARRAY
7131: PPUSH
7132: LD_INT 0
7134: PPUSH
7135: LD_VAR 0 2
7139: PPUSH
7140: LD_VAR 0 3
7144: PPUSH
7145: LD_VAR 0 4
7149: PPUSH
7150: CALL_OW 145
7154: GO 7100
7156: POP
7157: POP
// end ;
7158: LD_VAR 0 5
7162: RET
// export function ComBuildWarehouse ( plist , bident ) ; var i ; begin
7163: LD_INT 0
7165: PPUSH
7166: PPUSH
// if GetBType ( bident ) = b_depot and Cost ( bident , b_warehouse ) and not BuildingsInProgress ( GetSide ( plist [ 1 ] ) ) then
7167: LD_VAR 0 2
7171: PPUSH
7172: CALL_OW 266
7176: PUSH
7177: LD_INT 0
7179: EQUAL
7180: IFFALSE 7196
7182: PUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: LD_INT 1
7190: PPUSH
7191: CALL 5776 0 2
7195: AND
7196: IFFALSE 7219
7198: PUSH
7199: LD_VAR 0 1
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PPUSH
7208: CALL_OW 255
7212: PPUSH
7213: CALL_OW 345
7217: NOT
7218: AND
7219: IFFALSE 7315
// begin ComUpgrade ( bident ) ;
7221: LD_VAR 0 2
7225: PPUSH
7226: CALL_OW 146
// for i = 1 to plist do
7230: LD_ADDR_VAR 0 4
7234: PUSH
7235: DOUBLE
7236: LD_INT 1
7238: DEC
7239: ST_TO_ADDR
7240: LD_VAR 0 1
7244: PUSH
7245: FOR_TO
7246: IFFALSE 7303
// if not HasTask ( plist [ i ] ) then
7248: LD_VAR 0 1
7252: PUSH
7253: LD_VAR 0 4
7257: ARRAY
7258: PPUSH
7259: CALL_OW 314
7263: NOT
7264: IFFALSE 7301
// ComMoveXY ( plist [ i ] , GetX ( bident ) , GetY ( bident ) ) ;
7266: LD_VAR 0 1
7270: PUSH
7271: LD_VAR 0 4
7275: ARRAY
7276: PPUSH
7277: LD_VAR 0 2
7281: PPUSH
7282: CALL_OW 250
7286: PPUSH
7287: LD_VAR 0 2
7291: PPUSH
7292: CALL_OW 251
7296: PPUSH
7297: CALL_OW 111
7301: GO 7245
7303: POP
7304: POP
// result := true ;
7305: LD_ADDR_VAR 0 3
7309: PUSH
7310: LD_INT 1
7312: ST_TO_ADDR
// end else
7313: GO 7323
// result := false ;
7315: LD_ADDR_VAR 0 3
7319: PUSH
7320: LD_INT 0
7322: ST_TO_ADDR
// end ;
7323: LD_VAR 0 3
7327: RET
// export function ComBuildLab ( plist , x , y , d ) ; var i ; begin
7328: LD_INT 0
7330: PPUSH
7331: PPUSH
// if GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 and Hex ( x , y ) then
7332: LD_VAR 0 1
7336: PUSH
7337: LD_INT 1
7339: ARRAY
7340: PPUSH
7341: CALL_OW 255
7345: PPUSH
7346: CALL 6391 0 1
7350: PUSH
7351: LD_INT 20
7353: GREATEREQUAL
7354: IFFALSE 7372
7356: PUSH
7357: LD_VAR 0 2
7361: PPUSH
7362: LD_VAR 0 3
7366: PPUSH
7367: CALL 6008 0 2
7371: AND
7372: IFFALSE 7457
// begin for i = 1 to plist do
7374: LD_ADDR_VAR 0 6
7378: PUSH
7379: DOUBLE
7380: LD_INT 1
7382: DEC
7383: ST_TO_ADDR
7384: LD_VAR 0 1
7388: PUSH
7389: FOR_TO
7390: IFFALSE 7445
// if not HasTask ( plist [ i ] ) then
7392: LD_VAR 0 1
7396: PUSH
7397: LD_VAR 0 6
7401: ARRAY
7402: PPUSH
7403: CALL_OW 314
7407: NOT
7408: IFFALSE 7443
// ComBuild ( plist [ i ] , b_lab , x , y , d ) ;
7410: LD_VAR 0 1
7414: PUSH
7415: LD_VAR 0 6
7419: ARRAY
7420: PPUSH
7421: LD_INT 6
7423: PPUSH
7424: LD_VAR 0 2
7428: PPUSH
7429: LD_VAR 0 3
7433: PPUSH
7434: LD_VAR 0 4
7438: PPUSH
7439: CALL_OW 145
7443: GO 7389
7445: POP
7446: POP
// result := true ;
7447: LD_ADDR_VAR 0 5
7451: PUSH
7452: LD_INT 1
7454: ST_TO_ADDR
// end else
7455: GO 7465
// result := false ;
7457: LD_ADDR_VAR 0 5
7461: PUSH
7462: LD_INT 0
7464: ST_TO_ADDR
// end ;
7465: LD_VAR 0 5
7469: RET
// export function ComBuildLabKind ( lab , bkind1 , bkind2 ) ; begin
7470: LD_INT 0
7472: PPUSH
// if GetLabKind ( lab , 1 ) = b_lab_basic and GetLabKind ( lab , 2 ) = b_lab_basic then
7473: LD_VAR 0 1
7477: PPUSH
7478: LD_INT 1
7480: PPUSH
7481: CALL_OW 268
7485: PUSH
7486: LD_INT 9
7488: EQUAL
7489: IFFALSE 7509
7491: PUSH
7492: LD_VAR 0 1
7496: PPUSH
7497: LD_INT 2
7499: PPUSH
7500: CALL_OW 268
7504: PUSH
7505: LD_INT 9
7507: EQUAL
7508: AND
7509: IFFALSE 7610
// begin if Cost ( lab , bkind1 ) and Cost ( lab , bkind2 ) and BuildingStatus ( lab ) = bs_idle then
7511: LD_VAR 0 1
7515: PPUSH
7516: LD_VAR 0 2
7520: PPUSH
7521: CALL 5776 0 2
7525: IFFALSE 7543
7527: PUSH
7528: LD_VAR 0 1
7532: PPUSH
7533: LD_VAR 0 3
7537: PPUSH
7538: CALL 5776 0 2
7542: AND
7543: IFFALSE 7560
7545: PUSH
7546: LD_VAR 0 1
7550: PPUSH
7551: CALL_OW 461
7555: PUSH
7556: LD_INT 2
7558: EQUAL
7559: AND
7560: IFFALSE 7600
// begin ComUpgradeLab ( lab , bkind1 ) ;
7562: LD_VAR 0 1
7566: PPUSH
7567: LD_VAR 0 2
7571: PPUSH
7572: CALL_OW 147
// AddComUpgradeLab ( lab , bkind2 ) ;
7576: LD_VAR 0 1
7580: PPUSH
7581: LD_VAR 0 3
7585: PPUSH
7586: CALL_OW 207
// result := true ;
7590: LD_ADDR_VAR 0 4
7594: PUSH
7595: LD_INT 1
7597: ST_TO_ADDR
// end else
7598: GO 7608
// result := false ;
7600: LD_ADDR_VAR 0 4
7604: PUSH
7605: LD_INT 0
7607: ST_TO_ADDR
// end else
7608: GO 7618
// result := false ;
7610: LD_ADDR_VAR 0 4
7614: PUSH
7615: LD_INT 0
7617: ST_TO_ADDR
// end ;
7618: LD_VAR 0 4
7622: RET
// export function CheckTowersStatus ( plist , tlist ) ; var i , tmp , p , c ; begin
7623: LD_INT 0
7625: PPUSH
7626: PPUSH
7627: PPUSH
7628: PPUSH
7629: PPUSH
// p := 1 ;
7630: LD_ADDR_VAR 0 6
7634: PUSH
7635: LD_INT 1
7637: ST_TO_ADDR
// for i = 1 to ( tlist / 4 ) do
7638: LD_ADDR_VAR 0 4
7642: PUSH
7643: DOUBLE
7644: LD_INT 1
7646: DEC
7647: ST_TO_ADDR
7648: LD_VAR 0 2
7652: PUSH
7653: LD_INT 4
7655: DIVREAL
7656: PUSH
7657: FOR_TO
7658: IFFALSE 7911
// begin if HexInfo ( tlist [ p + 1 ] , tlist [ p + 2 ] ) = 0 and Hex ( tlist [ p + 1 ] , tlist [ p + 2 ] ) and GetCrates ( GetSide ( plist [ 1 ] ) ) >= 20 then
7660: LD_VAR 0 2
7664: PUSH
7665: LD_VAR 0 6
7669: PUSH
7670: LD_INT 1
7672: PLUS
7673: ARRAY
7674: PPUSH
7675: LD_VAR 0 2
7679: PUSH
7680: LD_VAR 0 6
7684: PUSH
7685: LD_INT 2
7687: PLUS
7688: ARRAY
7689: PPUSH
7690: CALL_OW 428
7694: PUSH
7695: LD_INT 0
7697: EQUAL
7698: IFFALSE 7736
7700: PUSH
7701: LD_VAR 0 2
7705: PUSH
7706: LD_VAR 0 6
7710: PUSH
7711: LD_INT 1
7713: PLUS
7714: ARRAY
7715: PPUSH
7716: LD_VAR 0 2
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 2
7728: PLUS
7729: ARRAY
7730: PPUSH
7731: CALL 6008 0 2
7735: AND
7736: IFFALSE 7762
7738: PUSH
7739: LD_VAR 0 1
7743: PUSH
7744: LD_INT 1
7746: ARRAY
7747: PPUSH
7748: CALL_OW 255
7752: PPUSH
7753: CALL 6391 0 1
7757: PUSH
7758: LD_INT 20
7760: GREATEREQUAL
7761: AND
7762: IFFALSE 7879
// begin for c = 1 to plist do
7764: LD_ADDR_VAR 0 7
7768: PUSH
7769: DOUBLE
7770: LD_INT 1
7772: DEC
7773: ST_TO_ADDR
7774: LD_VAR 0 1
7778: PUSH
7779: FOR_TO
7780: IFFALSE 7873
// if not HasTask ( plist [ c ] ) then
7782: LD_VAR 0 1
7786: PUSH
7787: LD_VAR 0 7
7791: ARRAY
7792: PPUSH
7793: CALL_OW 314
7797: NOT
7798: IFFALSE 7871
// ComBuild ( plist [ c ] , tlist [ p ] , tlist [ p + 1 ] , tlist [ p + 2 ] , tlist [ p + 3 ] ) ;
7800: LD_VAR 0 1
7804: PUSH
7805: LD_VAR 0 7
7809: ARRAY
7810: PPUSH
7811: LD_VAR 0 2
7815: PUSH
7816: LD_VAR 0 6
7820: ARRAY
7821: PPUSH
7822: LD_VAR 0 2
7826: PUSH
7827: LD_VAR 0 6
7831: PUSH
7832: LD_INT 1
7834: PLUS
7835: ARRAY
7836: PPUSH
7837: LD_VAR 0 2
7841: PUSH
7842: LD_VAR 0 6
7846: PUSH
7847: LD_INT 2
7849: PLUS
7850: ARRAY
7851: PPUSH
7852: LD_VAR 0 2
7856: PUSH
7857: LD_VAR 0 6
7861: PUSH
7862: LD_INT 3
7864: PLUS
7865: ARRAY
7866: PPUSH
7867: CALL_OW 145
7871: GO 7779
7873: POP
7874: POP
// break ;
7875: GO 7911
// end else
7877: GO 7909
// if ( p + 4 < tlist ) then
7879: LD_VAR 0 6
7883: PUSH
7884: LD_INT 4
7886: PLUS
7887: PUSH
7888: LD_VAR 0 2
7892: LESS
7893: IFFALSE 7909
// p := p + 4 ;
7895: LD_ADDR_VAR 0 6
7899: PUSH
7900: LD_VAR 0 6
7904: PUSH
7905: LD_INT 4
7907: PLUS
7908: ST_TO_ADDR
// end ;
7909: GO 7657
7911: POP
7912: POP
// end ;
7913: LD_VAR 0 3
7917: RET
// export function CheckWeaponOnTowers ( side , wlist ) ; var i , tmp , fac ; begin
7918: LD_INT 0
7920: PPUSH
7921: PPUSH
7922: PPUSH
7923: PPUSH
// tmp := GetTowers ( side ) ;
7924: LD_ADDR_VAR 0 5
7928: PUSH
7929: LD_VAR 0 1
7933: PPUSH
7934: CALL 7003 0 1
7938: ST_TO_ADDR
// fac := GetBuilding ( side , b_factory ) [ 1 ] ;
7939: LD_ADDR_VAR 0 6
7943: PUSH
7944: LD_VAR 0 1
7948: PPUSH
7949: LD_INT 3
7951: PPUSH
7952: CALL 6297 0 2
7956: PUSH
7957: LD_INT 1
7959: ARRAY
7960: ST_TO_ADDR
// if fac then
7961: LD_VAR 0 6
7965: IFFALSE 8061
// for i = 1 to tmp do
7967: LD_ADDR_VAR 0 4
7971: PUSH
7972: DOUBLE
7973: LD_INT 1
7975: DEC
7976: ST_TO_ADDR
7977: LD_VAR 0 5
7981: PUSH
7982: FOR_TO
7983: IFFALSE 8059
// if GetBWeapon ( tmp [ i ] ) = 0 then
7985: LD_VAR 0 5
7989: PUSH
7990: LD_VAR 0 4
7994: ARRAY
7995: PPUSH
7996: CALL_OW 269
8000: PUSH
8001: LD_INT 0
8003: EQUAL
8004: IFFALSE 8057
// begin if BuildingStatus ( fac ) = bs_idle then
8006: LD_VAR 0 6
8010: PPUSH
8011: CALL_OW 461
8015: PUSH
8016: LD_INT 2
8018: EQUAL
8019: IFFALSE 8055
// ComPlaceWeapon ( tmp [ i ] , wlist [ Rand ( 1 , wlist ) ] ) ;
8021: LD_VAR 0 5
8025: PUSH
8026: LD_VAR 0 4
8030: ARRAY
8031: PPUSH
8032: LD_VAR 0 2
8036: PUSH
8037: LD_INT 1
8039: PPUSH
8040: LD_VAR 0 2
8044: PPUSH
8045: CALL_OW 12
8049: ARRAY
8050: PPUSH
8051: CALL_OW 148
// break ;
8055: GO 8059
// end ;
8057: GO 7982
8059: POP
8060: POP
// end ;
8061: LD_VAR 0 3
8065: RET
// export function GetVehicle ( side , chassis , weapon ) ; begin
8066: LD_INT 0
8068: PPUSH
// if FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) then
8069: LD_INT 22
8071: PUSH
8072: LD_VAR 0 1
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PUSH
8081: LD_INT 34
8083: PUSH
8084: LD_VAR 0 3
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 31
8095: PUSH
8096: LD_VAR 0 2
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: LIST
8109: PUSH
8110: EMPTY
8111: LIST
8112: PPUSH
8113: CALL_OW 69
8117: IFFALSE 8175
// result := FilterAllUnits ( [ [ [ f_side , side ] , [ f_weapon , weapon ] , [ f_chassis , chassis ] ] ] ) else
8119: LD_ADDR_VAR 0 4
8123: PUSH
8124: LD_INT 22
8126: PUSH
8127: LD_VAR 0 1
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PUSH
8136: LD_INT 34
8138: PUSH
8139: LD_VAR 0 3
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_INT 31
8150: PUSH
8151: LD_VAR 0 2
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: PUSH
8165: EMPTY
8166: LIST
8167: PPUSH
8168: CALL_OW 69
8172: ST_TO_ADDR
8173: GO 8183
// result := false ;
8175: LD_ADDR_VAR 0 4
8179: PUSH
8180: LD_INT 0
8182: ST_TO_ADDR
// end ;
8183: LD_VAR 0 4
8187: RET
// export function ComProduce ( factory , chassis , engine , control , weapon ) ; begin
8188: LD_INT 0
8190: PPUSH
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) and CostOfVehicle ( chassis , engine , control , weapon ) [ 1 ] <= GetBaseSource ( factory ) [ 1 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 2 ] <= GetBaseSource ( factory ) [ 2 ] and CostOfVehicle ( chassis , engine , control , weapon ) [ 3 ] <= GetBaseSource ( factory ) [ 3 ] then
8191: LD_VAR 0 1
8195: PPUSH
8196: LD_VAR 0 2
8200: PPUSH
8201: LD_VAR 0 3
8205: PPUSH
8206: LD_VAR 0 4
8210: PPUSH
8211: LD_VAR 0 5
8215: PPUSH
8216: CALL_OW 448
8220: IFFALSE 8267
8222: PUSH
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_VAR 0 3
8232: PPUSH
8233: LD_VAR 0 4
8237: PPUSH
8238: LD_VAR 0 5
8242: PPUSH
8243: CALL_OW 449
8247: PUSH
8248: LD_INT 1
8250: ARRAY
8251: PUSH
8252: LD_VAR 0 1
8256: PPUSH
8257: CALL 5894 0 1
8261: PUSH
8262: LD_INT 1
8264: ARRAY
8265: LESSEQUAL
8266: AND
8267: IFFALSE 8314
8269: PUSH
8270: LD_VAR 0 2
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: LD_VAR 0 4
8284: PPUSH
8285: LD_VAR 0 5
8289: PPUSH
8290: CALL_OW 449
8294: PUSH
8295: LD_INT 2
8297: ARRAY
8298: PUSH
8299: LD_VAR 0 1
8303: PPUSH
8304: CALL 5894 0 1
8308: PUSH
8309: LD_INT 2
8311: ARRAY
8312: LESSEQUAL
8313: AND
8314: IFFALSE 8361
8316: PUSH
8317: LD_VAR 0 2
8321: PPUSH
8322: LD_VAR 0 3
8326: PPUSH
8327: LD_VAR 0 4
8331: PPUSH
8332: LD_VAR 0 5
8336: PPUSH
8337: CALL_OW 449
8341: PUSH
8342: LD_INT 3
8344: ARRAY
8345: PUSH
8346: LD_VAR 0 1
8350: PPUSH
8351: CALL 5894 0 1
8355: PUSH
8356: LD_INT 3
8358: ARRAY
8359: LESSEQUAL
8360: AND
8361: IFFALSE 8408
// begin if debug then
8363: LD_EXP 1
8367: IFFALSE 8377
// display_strings := Factory work! ;
8369: LD_ADDR_OWVAR 47
8373: PUSH
8374: LD_STRING Factory work!
8376: ST_TO_ADDR
// ComConstruct ( factory , chassis , engine , control , weapon ) ;
8377: LD_VAR 0 1
8381: PPUSH
8382: LD_VAR 0 2
8386: PPUSH
8387: LD_VAR 0 3
8391: PPUSH
8392: LD_VAR 0 4
8396: PPUSH
8397: LD_VAR 0 5
8401: PPUSH
8402: CALL_OW 125
// end else
8406: GO 8416
// result := false ;
8408: LD_ADDR_VAR 0 6
8412: PUSH
8413: LD_INT 0
8415: ST_TO_ADDR
// end ;
8416: LD_VAR 0 6
8420: RET
// export function GetBuildingList ( side , type ) ; var i , tmp , filter ; begin
8421: LD_INT 0
8423: PPUSH
8424: PPUSH
8425: PPUSH
8426: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , type ] ] ) ;
8427: LD_ADDR_VAR 0 6
8431: PUSH
8432: LD_INT 22
8434: PUSH
8435: LD_VAR 0 1
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 30
8446: PUSH
8447: LD_VAR 0 2
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PPUSH
8460: CALL_OW 69
8464: ST_TO_ADDR
// tmp := [ ] ;
8465: LD_ADDR_VAR 0 5
8469: PUSH
8470: EMPTY
8471: ST_TO_ADDR
// for i = 1 to filter do
8472: LD_ADDR_VAR 0 4
8476: PUSH
8477: DOUBLE
8478: LD_INT 1
8480: DEC
8481: ST_TO_ADDR
8482: LD_VAR 0 6
8486: PUSH
8487: FOR_TO
8488: IFFALSE 8576
// begin tmp := tmp ^ [ [ GetBType ( filter [ i ] ) , GetX ( filter [ i ] ) , GetY ( filter [ i ] ) , GetDir ( filter [ i ] ) ] ] ;
8490: LD_ADDR_VAR 0 5
8494: PUSH
8495: LD_VAR 0 5
8499: PUSH
8500: LD_VAR 0 6
8504: PUSH
8505: LD_VAR 0 4
8509: ARRAY
8510: PPUSH
8511: CALL_OW 266
8515: PUSH
8516: LD_VAR 0 6
8520: PUSH
8521: LD_VAR 0 4
8525: ARRAY
8526: PPUSH
8527: CALL_OW 250
8531: PUSH
8532: LD_VAR 0 6
8536: PUSH
8537: LD_VAR 0 4
8541: ARRAY
8542: PPUSH
8543: CALL_OW 251
8547: PUSH
8548: LD_VAR 0 6
8552: PUSH
8553: LD_VAR 0 4
8557: ARRAY
8558: PPUSH
8559: CALL_OW 254
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: PUSH
8570: EMPTY
8571: LIST
8572: ADD
8573: ST_TO_ADDR
// end ;
8574: GO 8487
8576: POP
8577: POP
// result := tmp ;
8578: LD_ADDR_VAR 0 3
8582: PUSH
8583: LD_VAR 0 5
8587: ST_TO_ADDR
// end ;
8588: LD_VAR 0 3
8592: RET
// export function ComBuildLabList ( plist , list ) ; var i , p ; begin
8593: LD_INT 0
8595: PPUSH
8596: PPUSH
8597: PPUSH
// for i = 1 to list do
8598: LD_ADDR_VAR 0 4
8602: PUSH
8603: DOUBLE
8604: LD_INT 1
8606: DEC
8607: ST_TO_ADDR
8608: LD_VAR 0 2
8612: PUSH
8613: FOR_TO
8614: IFFALSE 9173
// begin if HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) > 0 then
8616: LD_VAR 0 2
8620: PUSH
8621: LD_VAR 0 4
8625: ARRAY
8626: PUSH
8627: LD_INT 1
8629: ARRAY
8630: PPUSH
8631: LD_VAR 0 2
8635: PUSH
8636: LD_VAR 0 4
8640: ARRAY
8641: PUSH
8642: LD_INT 2
8644: ARRAY
8645: PPUSH
8646: CALL_OW 428
8650: PUSH
8651: LD_INT 0
8653: GREATER
8654: IFFALSE 8940
// begin if GetNation ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) = nation_russian then
8656: LD_VAR 0 2
8660: PUSH
8661: LD_VAR 0 4
8665: ARRAY
8666: PUSH
8667: LD_INT 1
8669: ARRAY
8670: PPUSH
8671: LD_VAR 0 2
8675: PUSH
8676: LD_VAR 0 4
8680: ARRAY
8681: PUSH
8682: LD_INT 2
8684: ARRAY
8685: PPUSH
8686: CALL_OW 428
8690: PPUSH
8691: CALL_OW 248
8695: PUSH
8696: LD_INT 3
8698: EQUAL
8699: IFFALSE 8825
// begin if GetResourceType ( GetBase ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) , 3 ) >= 15 then
8701: LD_VAR 0 2
8705: PUSH
8706: LD_VAR 0 4
8710: ARRAY
8711: PUSH
8712: LD_INT 1
8714: ARRAY
8715: PPUSH
8716: LD_VAR 0 2
8720: PUSH
8721: LD_VAR 0 4
8725: ARRAY
8726: PUSH
8727: LD_INT 2
8729: ARRAY
8730: PPUSH
8731: CALL_OW 428
8735: PPUSH
8736: CALL_OW 274
8740: PPUSH
8741: LD_INT 3
8743: PPUSH
8744: CALL_OW 275
8748: PUSH
8749: LD_INT 15
8751: GREATEREQUAL
8752: IFFALSE 8823
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8754: LD_VAR 0 2
8758: PUSH
8759: LD_VAR 0 4
8763: ARRAY
8764: PUSH
8765: LD_INT 1
8767: ARRAY
8768: PPUSH
8769: LD_VAR 0 2
8773: PUSH
8774: LD_VAR 0 4
8778: ARRAY
8779: PUSH
8780: LD_INT 2
8782: ARRAY
8783: PPUSH
8784: CALL_OW 428
8788: PPUSH
8789: LD_VAR 0 2
8793: PUSH
8794: LD_VAR 0 4
8798: ARRAY
8799: PUSH
8800: LD_INT 4
8802: ARRAY
8803: PPUSH
8804: LD_VAR 0 2
8808: PUSH
8809: LD_VAR 0 4
8813: ARRAY
8814: PUSH
8815: LD_INT 5
8817: ARRAY
8818: PPUSH
8819: CALL 7470 0 3
// end else
8823: GO 8894
// ComBuildLabKind ( HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) , list [ i ] [ 4 ] , list [ i ] [ 5 ] ) ;
8825: LD_VAR 0 2
8829: PUSH
8830: LD_VAR 0 4
8834: ARRAY
8835: PUSH
8836: LD_INT 1
8838: ARRAY
8839: PPUSH
8840: LD_VAR 0 2
8844: PUSH
8845: LD_VAR 0 4
8849: ARRAY
8850: PUSH
8851: LD_INT 2
8853: ARRAY
8854: PPUSH
8855: CALL_OW 428
8859: PPUSH
8860: LD_VAR 0 2
8864: PUSH
8865: LD_VAR 0 4
8869: ARRAY
8870: PUSH
8871: LD_INT 4
8873: ARRAY
8874: PPUSH
8875: LD_VAR 0 2
8879: PUSH
8880: LD_VAR 0 4
8884: ARRAY
8885: PUSH
8886: LD_INT 5
8888: ARRAY
8889: PPUSH
8890: CALL 7470 0 3
// ComCompleteUpgrade ( plist , HexInfo ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ) ;
8894: LD_VAR 0 1
8898: PPUSH
8899: LD_VAR 0 2
8903: PUSH
8904: LD_VAR 0 4
8908: ARRAY
8909: PUSH
8910: LD_INT 1
8912: ARRAY
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: ARRAY
8924: PUSH
8925: LD_INT 2
8927: ARRAY
8928: PPUSH
8929: CALL_OW 428
8933: PPUSH
8934: CALL 10444 0 2
// end else
8938: GO 9171
// if Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , b_lab ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 4 ] ) and Cost ( MyBase ( GetSide ( plist [ 1 ] ) ) , list [ i ] [ 5 ] ) then
8940: LD_VAR 0 1
8944: PUSH
8945: LD_INT 1
8947: ARRAY
8948: PPUSH
8949: CALL_OW 255
8953: PPUSH
8954: CALL 6206 0 1
8958: PPUSH
8959: LD_INT 6
8961: PPUSH
8962: CALL 5776 0 2
8966: IFFALSE 9008
8968: PUSH
8969: LD_VAR 0 1
8973: PUSH
8974: LD_INT 1
8976: ARRAY
8977: PPUSH
8978: CALL_OW 255
8982: PPUSH
8983: CALL 6206 0 1
8987: PPUSH
8988: LD_VAR 0 2
8992: PUSH
8993: LD_VAR 0 4
8997: ARRAY
8998: PUSH
8999: LD_INT 4
9001: ARRAY
9002: PPUSH
9003: CALL 5776 0 2
9007: AND
9008: IFFALSE 9050
9010: PUSH
9011: LD_VAR 0 1
9015: PUSH
9016: LD_INT 1
9018: ARRAY
9019: PPUSH
9020: CALL_OW 255
9024: PPUSH
9025: CALL 6206 0 1
9029: PPUSH
9030: LD_VAR 0 2
9034: PUSH
9035: LD_VAR 0 4
9039: ARRAY
9040: PUSH
9041: LD_INT 5
9043: ARRAY
9044: PPUSH
9045: CALL 5776 0 2
9049: AND
9050: IFFALSE 9171
// for p = 1 to plist do
9052: LD_ADDR_VAR 0 5
9056: PUSH
9057: DOUBLE
9058: LD_INT 1
9060: DEC
9061: ST_TO_ADDR
9062: LD_VAR 0 1
9066: PUSH
9067: FOR_TO
9068: IFFALSE 9169
// if IsInUnit ( plist [ p ] ) then
9070: LD_VAR 0 1
9074: PUSH
9075: LD_VAR 0 5
9079: ARRAY
9080: PPUSH
9081: CALL_OW 310
9085: IFFALSE 9104
// ComExitBuilding ( plist [ p ] ) else
9087: LD_VAR 0 1
9091: PUSH
9092: LD_VAR 0 5
9096: ARRAY
9097: PPUSH
9098: CALL_OW 122
9102: GO 9167
// ComBuild ( plist [ p ] , b_lab , list [ i ] [ 1 ] , list [ i ] [ 2 ] , list [ i ] [ 3 ] ) ;
9104: LD_VAR 0 1
9108: PUSH
9109: LD_VAR 0 5
9113: ARRAY
9114: PPUSH
9115: LD_INT 6
9117: PPUSH
9118: LD_VAR 0 2
9122: PUSH
9123: LD_VAR 0 4
9127: ARRAY
9128: PUSH
9129: LD_INT 1
9131: ARRAY
9132: PPUSH
9133: LD_VAR 0 2
9137: PUSH
9138: LD_VAR 0 4
9142: ARRAY
9143: PUSH
9144: LD_INT 2
9146: ARRAY
9147: PPUSH
9148: LD_VAR 0 2
9152: PUSH
9153: LD_VAR 0 4
9157: ARRAY
9158: PUSH
9159: LD_INT 3
9161: ARRAY
9162: PPUSH
9163: CALL_OW 145
9167: GO 9067
9169: POP
9170: POP
// end ;
9171: GO 8613
9173: POP
9174: POP
// end ;
9175: LD_VAR 0 3
9179: RET
// export function ComFindDeposit ( sci , x , y ) ; begin
9180: LD_INT 0
9182: PPUSH
// if IsInUnit ( sci ) then
9183: LD_VAR 0 1
9187: PPUSH
9188: CALL_OW 310
9192: IFFALSE 9205
// ComExitBuilding ( sci ) else
9194: LD_VAR 0 1
9198: PPUSH
9199: CALL_OW 122
9203: GO 9236
// if not HasTask ( sci ) then
9205: LD_VAR 0 1
9209: PPUSH
9210: CALL_OW 314
9214: NOT
9215: IFFALSE 9236
// begin ComMoveXY ( sci , x , y ) ;
9217: LD_VAR 0 1
9221: PPUSH
9222: LD_VAR 0 2
9226: PPUSH
9227: LD_VAR 0 3
9231: PPUSH
9232: CALL_OW 111
// end ; end ;
9236: LD_VAR 0 4
9240: RET
// export function NeedHeal ( side , tag_list , list ) ; var i , filter , tmp ; begin
9241: LD_INT 0
9243: PPUSH
9244: PPUSH
9245: PPUSH
9246: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) diff list ;
9247: LD_ADDR_VAR 0 6
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_VAR 0 1
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 21
9266: PUSH
9267: LD_INT 1
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PPUSH
9278: CALL_OW 69
9282: PUSH
9283: LD_VAR 0 3
9287: DIFF
9288: ST_TO_ADDR
// tmp := tag_list ;
9289: LD_ADDR_VAR 0 7
9293: PUSH
9294: LD_VAR 0 2
9298: ST_TO_ADDR
// for i = 1 to filter do
9299: LD_ADDR_VAR 0 5
9303: PUSH
9304: DOUBLE
9305: LD_INT 1
9307: DEC
9308: ST_TO_ADDR
9309: LD_VAR 0 6
9313: PUSH
9314: FOR_TO
9315: IFFALSE 9586
// begin if GetLives ( filter [ i ] ) = 1000 and GetTag ( filter [ i ] ) >= 100 then
9317: LD_VAR 0 6
9321: PUSH
9322: LD_VAR 0 5
9326: ARRAY
9327: PPUSH
9328: CALL_OW 256
9332: PUSH
9333: LD_INT 1000
9335: EQUAL
9336: IFFALSE 9359
9338: PUSH
9339: LD_VAR 0 6
9343: PUSH
9344: LD_VAR 0 5
9348: ARRAY
9349: PPUSH
9350: CALL_OW 110
9354: PUSH
9355: LD_INT 100
9357: GREATEREQUAL
9358: AND
9359: IFFALSE 9401
// begin SetTag ( filter [ i ] , 0 ) ;
9361: LD_VAR 0 6
9365: PUSH
9366: LD_VAR 0 5
9370: ARRAY
9371: PPUSH
9372: LD_INT 0
9374: PPUSH
9375: CALL_OW 109
// tmp := tmp diff filter [ i ] ;
9379: LD_ADDR_VAR 0 7
9383: PUSH
9384: LD_VAR 0 7
9388: PUSH
9389: LD_VAR 0 6
9393: PUSH
9394: LD_VAR 0 5
9398: ARRAY
9399: DIFF
9400: ST_TO_ADDR
// end ; if GetLives ( filter [ i ] ) < 1000 then
9401: LD_VAR 0 6
9405: PUSH
9406: LD_VAR 0 5
9410: ARRAY
9411: PPUSH
9412: CALL_OW 256
9416: PUSH
9417: LD_INT 1000
9419: LESS
9420: IFFALSE 9584
// begin if not filter [ i ] in tmp then
9422: LD_VAR 0 6
9426: PUSH
9427: LD_VAR 0 5
9431: ARRAY
9432: PUSH
9433: LD_VAR 0 7
9437: IN
9438: NOT
9439: IFFALSE 9463
// tmp := tmp ^ filter [ i ] ;
9441: LD_ADDR_VAR 0 7
9445: PUSH
9446: LD_VAR 0 7
9450: PUSH
9451: LD_VAR 0 6
9455: PUSH
9456: LD_VAR 0 5
9460: ARRAY
9461: ADD
9462: ST_TO_ADDR
// if GetLives ( filter [ i ] ) < 250 then
9463: LD_VAR 0 6
9467: PUSH
9468: LD_VAR 0 5
9472: ARRAY
9473: PPUSH
9474: CALL_OW 256
9478: PUSH
9479: LD_INT 250
9481: LESS
9482: IFFALSE 9504
// SetTag ( filter [ i ] , 100 ) else
9484: LD_VAR 0 6
9488: PUSH
9489: LD_VAR 0 5
9493: ARRAY
9494: PPUSH
9495: LD_INT 100
9497: PPUSH
9498: CALL_OW 109
9502: GO 9584
// if GetLives ( filter [ i ] ) < 500 then
9504: LD_VAR 0 6
9508: PUSH
9509: LD_VAR 0 5
9513: ARRAY
9514: PPUSH
9515: CALL_OW 256
9519: PUSH
9520: LD_INT 500
9522: LESS
9523: IFFALSE 9545
// SetTag ( filter [ i ] , 101 ) else
9525: LD_VAR 0 6
9529: PUSH
9530: LD_VAR 0 5
9534: ARRAY
9535: PPUSH
9536: LD_INT 101
9538: PPUSH
9539: CALL_OW 109
9543: GO 9584
// if GetLives ( filter [ i ] ) < 1000 then
9545: LD_VAR 0 6
9549: PUSH
9550: LD_VAR 0 5
9554: ARRAY
9555: PPUSH
9556: CALL_OW 256
9560: PUSH
9561: LD_INT 1000
9563: LESS
9564: IFFALSE 9584
// SetTag ( filter [ i ] , 102 ) ;
9566: LD_VAR 0 6
9570: PUSH
9571: LD_VAR 0 5
9575: ARRAY
9576: PPUSH
9577: LD_INT 102
9579: PPUSH
9580: CALL_OW 109
// end ; end ;
9584: GO 9314
9586: POP
9587: POP
// result := tmp ;
9588: LD_ADDR_VAR 0 4
9592: PUSH
9593: LD_VAR 0 7
9597: ST_TO_ADDR
// end ;
9598: LD_VAR 0 4
9602: RET
// export function IntBazooka ( list , side ) ; var ta , c , i , filter ; begin
9603: LD_INT 0
9605: PPUSH
9606: PPUSH
9607: PPUSH
9608: PPUSH
9609: PPUSH
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9610: LD_ADDR_VAR 0 7
9614: PUSH
9615: LD_INT 22
9617: PUSH
9618: LD_VAR 0 2
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 3
9629: PUSH
9630: LD_INT 21
9632: PUSH
9633: LD_INT 3
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 69
9652: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
9653: LD_ADDR_VAR 0 5
9657: PUSH
9658: LD_INT 1
9660: PPUSH
9661: LD_INT 3
9663: PPUSH
9664: CALL_OW 12
9668: ST_TO_ADDR
// if filter > 0 then
9669: LD_VAR 0 7
9673: PUSH
9674: LD_INT 0
9676: GREATER
9677: IFFALSE 9879
// for i = 1 to list do
9679: LD_ADDR_VAR 0 6
9683: PUSH
9684: DOUBLE
9685: LD_INT 1
9687: DEC
9688: ST_TO_ADDR
9689: LD_VAR 0 1
9693: PUSH
9694: FOR_TO
9695: IFFALSE 9877
// for ta in filter do
9697: LD_ADDR_VAR 0 4
9701: PUSH
9702: LD_VAR 0 7
9706: PUSH
9707: FOR_IN
9708: IFFALSE 9873
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
9710: LD_VAR 0 1
9714: PUSH
9715: LD_VAR 0 6
9719: ARRAY
9720: PPUSH
9721: LD_VAR 0 4
9725: PPUSH
9726: CALL_OW 296
9730: PUSH
9731: LD_INT 13
9733: LESSEQUAL
9734: IFFALSE 9871
// begin case c of 1 :
9736: LD_VAR 0 5
9740: PUSH
9741: LD_INT 1
9743: DOUBLE
9744: EQUAL
9745: IFTRUE 9749
9747: GO 9787
9749: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
9750: LD_VAR 0 1
9754: PUSH
9755: LD_VAR 0 6
9759: ARRAY
9760: PPUSH
9761: LD_VAR 0 4
9765: PPUSH
9766: CALL_OW 250
9770: PPUSH
9771: LD_VAR 0 4
9775: PPUSH
9776: CALL_OW 251
9780: PPUSH
9781: CALL_OW 154
9785: GO 9871
9787: LD_INT 2
9789: DOUBLE
9790: EQUAL
9791: IFTRUE 9795
9793: GO 9859
9795: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
9796: LD_VAR 0 1
9800: PUSH
9801: LD_VAR 0 6
9805: ARRAY
9806: PPUSH
9807: LD_VAR 0 4
9811: PPUSH
9812: CALL_OW 250
9816: PUSH
9817: LD_INT 1
9819: NEG
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 12
9828: PLUS
9829: PPUSH
9830: LD_VAR 0 4
9834: PPUSH
9835: CALL_OW 251
9839: PUSH
9840: LD_INT 1
9842: NEG
9843: PPUSH
9844: LD_INT 1
9846: PPUSH
9847: CALL_OW 12
9851: PLUS
9852: PPUSH
9853: CALL_OW 153
9857: GO 9871
9859: LD_INT 3
9861: DOUBLE
9862: EQUAL
9863: IFTRUE 9867
9865: GO 9870
9867: POP
// ; end ;
9868: GO 9871
9870: POP
// end ; end ;
9871: GO 9707
9873: POP
9874: POP
9875: GO 9694
9877: POP
9878: POP
// end ;
9879: LD_VAR 0 3
9883: RET
// export function ComChangeClassToBazooker ( plist ) ; var i ; begin
9884: LD_INT 0
9886: PPUSH
9887: PPUSH
// for i = 1 to plist do
9888: LD_ADDR_VAR 0 3
9892: PUSH
9893: DOUBLE
9894: LD_INT 1
9896: DEC
9897: ST_TO_ADDR
9898: LD_VAR 0 1
9902: PUSH
9903: FOR_TO
9904: IFFALSE 10106
// if not IsInUnit ( plist [ i ] ) in FilterAllUnits ( [ [ f_btype , b_barracks ] ] ) then
9906: LD_VAR 0 1
9910: PUSH
9911: LD_VAR 0 3
9915: ARRAY
9916: PPUSH
9917: CALL_OW 310
9921: PUSH
9922: LD_INT 30
9924: PUSH
9925: LD_INT 5
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: PPUSH
9935: CALL_OW 69
9939: IN
9940: NOT
9941: IFFALSE 10086
// begin if IsInUnit ( plist [ i ] ) then
9943: LD_VAR 0 1
9947: PUSH
9948: LD_VAR 0 3
9952: ARRAY
9953: PPUSH
9954: CALL_OW 310
9958: IFFALSE 9977
// ComExitBuilding ( plist [ i ] ) else
9960: LD_VAR 0 1
9964: PUSH
9965: LD_VAR 0 3
9969: ARRAY
9970: PPUSH
9971: CALL_OW 122
9975: GO 10084
// if not HasTask ( plist [ i ] ) then
9977: LD_VAR 0 1
9981: PUSH
9982: LD_VAR 0 3
9986: ARRAY
9987: PPUSH
9988: CALL_OW 314
9992: NOT
9993: IFFALSE 10084
// begin ComEnterUnit ( plist [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , GetSide ( plist [ 1 ] ) ] , [ f_btype , b_barracks ] ] ) , plist [ i ] ) ) ;
9995: LD_VAR 0 1
9999: PUSH
10000: LD_VAR 0 3
10004: ARRAY
10005: PPUSH
10006: LD_INT 22
10008: PUSH
10009: LD_VAR 0 1
10013: PUSH
10014: LD_INT 1
10016: ARRAY
10017: PPUSH
10018: CALL_OW 255
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 30
10029: PUSH
10030: LD_INT 5
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PPUSH
10041: CALL_OW 69
10045: PPUSH
10046: LD_VAR 0 1
10050: PUSH
10051: LD_VAR 0 3
10055: ARRAY
10056: PPUSH
10057: CALL_OW 74
10061: PPUSH
10062: CALL_OW 120
// AddComChangeProfession ( plist [ i ] , 9 ) ;
10066: LD_VAR 0 1
10070: PUSH
10071: LD_VAR 0 3
10075: ARRAY
10076: PPUSH
10077: LD_INT 9
10079: PPUSH
10080: CALL_OW 183
// end ; end else
10084: GO 10104
// ComChangeProfession ( plist [ i ] , 9 ) ;
10086: LD_VAR 0 1
10090: PUSH
10091: LD_VAR 0 3
10095: ARRAY
10096: PPUSH
10097: LD_INT 9
10099: PPUSH
10100: CALL_OW 123
10104: GO 9903
10106: POP
10107: POP
// end ;
10108: LD_VAR 0 2
10112: RET
// export function GetHuman ( side ) ; begin
10113: LD_INT 0
10115: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
10116: LD_ADDR_VAR 0 2
10120: PUSH
10121: LD_INT 22
10123: PUSH
10124: LD_VAR 0 1
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: LD_INT 21
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 2
10145: PUSH
10146: LD_INT 25
10148: PUSH
10149: LD_INT 1
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 25
10158: PUSH
10159: LD_INT 2
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: LD_INT 25
10168: PUSH
10169: LD_INT 3
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 25
10178: PUSH
10179: LD_INT 4
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: PPUSH
10198: CALL_OW 69
10202: ST_TO_ADDR
// end ;
10203: LD_VAR 0 2
10207: RET
// export function PrepareTigers ( area ) ; var tiger , i ; begin
10208: LD_INT 0
10210: PPUSH
10211: PPUSH
10212: PPUSH
// uc_side := 0 ;
10213: LD_ADDR_OWVAR 20
10217: PUSH
10218: LD_INT 0
10220: ST_TO_ADDR
// uc_nation := 0 ;
10221: LD_ADDR_OWVAR 21
10225: PUSH
10226: LD_INT 0
10228: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
10229: LD_ADDR_VAR 0 4
10233: PUSH
10234: DOUBLE
10235: LD_INT 1
10237: DEC
10238: ST_TO_ADDR
10239: LD_INT 4
10241: PUSH
10242: LD_INT 5
10244: PUSH
10245: LD_INT 6
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: LIST
10252: PUSH
10253: LD_OWVAR 67
10257: ARRAY
10258: PUSH
10259: FOR_TO
10260: IFFALSE 10331
// begin hc_class = class_tiger ;
10262: LD_ADDR_OWVAR 28
10266: PUSH
10267: LD_INT 14
10269: ST_TO_ADDR
// hc_gallery = sandnature ;
10270: LD_ADDR_OWVAR 33
10274: PUSH
10275: LD_STRING sandnature
10277: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
10278: LD_ADDR_OWVAR 35
10282: PUSH
10283: LD_INT 0
10285: PPUSH
10286: LD_INT 50
10288: PPUSH
10289: CALL_OW 12
10293: ST_TO_ADDR
// hc_face_number = 3 ;
10294: LD_ADDR_OWVAR 34
10298: PUSH
10299: LD_INT 3
10301: ST_TO_ADDR
// tiger := CreateHuman ;
10302: LD_ADDR_VAR 0 3
10306: PUSH
10307: CALL_OW 44
10311: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10312: LD_VAR 0 3
10316: PPUSH
10317: LD_VAR 0 1
10321: PPUSH
10322: LD_INT 0
10324: PPUSH
10325: CALL_OW 49
// end ;
10329: GO 10259
10331: POP
10332: POP
// end ;
10333: LD_VAR 0 2
10337: RET
// export function PrepareApemans ( area ) ; var ape , i ; begin
10338: LD_INT 0
10340: PPUSH
10341: PPUSH
10342: PPUSH
// uc_side := 0 ;
10343: LD_ADDR_OWVAR 20
10347: PUSH
10348: LD_INT 0
10350: ST_TO_ADDR
// uc_nation := 0 ;
10351: LD_ADDR_OWVAR 21
10355: PUSH
10356: LD_INT 0
10358: ST_TO_ADDR
// for i = 1 to 8 do
10359: LD_ADDR_VAR 0 4
10363: PUSH
10364: DOUBLE
10365: LD_INT 1
10367: DEC
10368: ST_TO_ADDR
10369: LD_INT 8
10371: PUSH
10372: FOR_TO
10373: IFFALSE 10437
// begin hc_class = class_apeman ;
10375: LD_ADDR_OWVAR 28
10379: PUSH
10380: LD_INT 12
10382: ST_TO_ADDR
// hc_gallery =  ;
10383: LD_ADDR_OWVAR 33
10387: PUSH
10388: LD_STRING 
10390: ST_TO_ADDR
// hc_agressivity = Rand ( - 2 , 2 ) ;
10391: LD_ADDR_OWVAR 35
10395: PUSH
10396: LD_INT 2
10398: NEG
10399: PPUSH
10400: LD_INT 2
10402: PPUSH
10403: CALL_OW 12
10407: ST_TO_ADDR
// ape := CreateHuman ;
10408: LD_ADDR_VAR 0 3
10412: PUSH
10413: CALL_OW 44
10417: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10418: LD_VAR 0 3
10422: PPUSH
10423: LD_VAR 0 1
10427: PPUSH
10428: LD_INT 0
10430: PPUSH
10431: CALL_OW 49
// end ;
10435: GO 10372
10437: POP
10438: POP
// end ;
10439: LD_VAR 0 2
10443: RET
// export function ComCompleteUpgrade ( plist , b ) ; var i ; begin
10444: LD_INT 0
10446: PPUSH
10447: PPUSH
// if BuildingStatus ( b ) = bs_build then
10448: LD_VAR 0 2
10452: PPUSH
10453: CALL_OW 461
10457: PUSH
10458: LD_INT 1
10460: EQUAL
10461: IFFALSE 10647
// for i = 1 to plist do
10463: LD_ADDR_VAR 0 4
10467: PUSH
10468: DOUBLE
10469: LD_INT 1
10471: DEC
10472: ST_TO_ADDR
10473: LD_VAR 0 1
10477: PUSH
10478: FOR_TO
10479: IFFALSE 10645
// if IsInUnit ( plist [ i ] ) then
10481: LD_VAR 0 1
10485: PUSH
10486: LD_VAR 0 4
10490: ARRAY
10491: PPUSH
10492: CALL_OW 310
10496: IFFALSE 10579
// begin ComExitBuilding ( plist [ i ] ) ;
10498: LD_VAR 0 1
10502: PUSH
10503: LD_VAR 0 4
10507: ARRAY
10508: PPUSH
10509: CALL_OW 122
// AddTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10513: LD_VAR 0 1
10517: PUSH
10518: LD_VAR 0 4
10522: ARRAY
10523: PPUSH
10524: LD_STRING h
10526: PUSH
10527: LD_VAR 0 2
10531: PPUSH
10532: CALL_OW 250
10536: PUSH
10537: LD_VAR 0 2
10541: PPUSH
10542: CALL_OW 251
10546: PUSH
10547: LD_VAR 0 2
10551: PUSH
10552: LD_INT 0
10554: PUSH
10555: LD_INT 0
10557: PUSH
10558: LD_INT 0
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: PUSH
10570: EMPTY
10571: LIST
10572: PPUSH
10573: CALL_OW 447
// end else
10577: GO 10643
// SetTaskList ( plist [ i ] , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10579: LD_VAR 0 1
10583: PUSH
10584: LD_VAR 0 4
10588: ARRAY
10589: PPUSH
10590: LD_STRING h
10592: PUSH
10593: LD_VAR 0 2
10597: PPUSH
10598: CALL_OW 250
10602: PUSH
10603: LD_VAR 0 2
10607: PPUSH
10608: CALL_OW 251
10612: PUSH
10613: LD_VAR 0 2
10617: PUSH
10618: LD_INT 0
10620: PUSH
10621: LD_INT 0
10623: PUSH
10624: LD_INT 0
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: PUSH
10636: EMPTY
10637: LIST
10638: PPUSH
10639: CALL_OW 446
10643: GO 10478
10645: POP
10646: POP
// end ;
10647: LD_VAR 0 3
10651: RET
// export function WantRepair ( eng ) ; begin
10652: LD_INT 0
10654: PPUSH
// if GetTaskList ( eng ) > 0 then
10655: LD_VAR 0 1
10659: PPUSH
10660: CALL_OW 437
10664: PUSH
10665: LD_INT 0
10667: GREATER
10668: IFFALSE 10713
// begin if GetTaskList ( eng ) [ 1 ] [ 1 ] = o then
10670: LD_VAR 0 1
10674: PPUSH
10675: CALL_OW 437
10679: PUSH
10680: LD_INT 1
10682: ARRAY
10683: PUSH
10684: LD_INT 1
10686: ARRAY
10687: PUSH
10688: LD_STRING o
10690: EQUAL
10691: IFFALSE 10703
// result := true else
10693: LD_ADDR_VAR 0 2
10697: PUSH
10698: LD_INT 1
10700: ST_TO_ADDR
10701: GO 10711
// result := false ;
10703: LD_ADDR_VAR 0 2
10707: PUSH
10708: LD_INT 0
10710: ST_TO_ADDR
// end else
10711: GO 10721
// result := false ;
10713: LD_ADDR_VAR 0 2
10717: PUSH
10718: LD_INT 0
10720: ST_TO_ADDR
// end ;
10721: LD_VAR 0 2
10725: RET
// export function GetBuildingsList ( side , btype ) ; var i , tmp , list ; begin
10726: LD_INT 0
10728: PPUSH
10729: PPUSH
10730: PPUSH
10731: PPUSH
// if btype = - 1 then
10732: LD_VAR 0 2
10736: PUSH
10737: LD_INT 1
10739: NEG
10740: EQUAL
10741: IFFALSE 10781
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) else
10743: LD_ADDR_VAR 0 5
10747: PUSH
10748: LD_INT 22
10750: PUSH
10751: LD_VAR 0 1
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 21
10762: PUSH
10763: LD_INT 3
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PPUSH
10774: CALL_OW 69
10778: ST_TO_ADDR
10779: GO 10819
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
10781: LD_ADDR_VAR 0 5
10785: PUSH
10786: LD_INT 22
10788: PUSH
10789: LD_VAR 0 1
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: LD_INT 30
10800: PUSH
10801: LD_VAR 0 2
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PPUSH
10814: CALL_OW 69
10818: ST_TO_ADDR
// list := [ ] ;
10819: LD_ADDR_VAR 0 6
10823: PUSH
10824: EMPTY
10825: ST_TO_ADDR
// for i = 1 to tmp do
10826: LD_ADDR_VAR 0 4
10830: PUSH
10831: DOUBLE
10832: LD_INT 1
10834: DEC
10835: ST_TO_ADDR
10836: LD_VAR 0 5
10840: PUSH
10841: FOR_TO
10842: IFFALSE 10930
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10844: LD_ADDR_VAR 0 6
10848: PUSH
10849: LD_VAR 0 6
10853: PUSH
10854: LD_VAR 0 5
10858: PUSH
10859: LD_VAR 0 4
10863: ARRAY
10864: PPUSH
10865: CALL_OW 266
10869: PUSH
10870: LD_VAR 0 5
10874: PUSH
10875: LD_VAR 0 4
10879: ARRAY
10880: PPUSH
10881: CALL_OW 250
10885: PUSH
10886: LD_VAR 0 5
10890: PUSH
10891: LD_VAR 0 4
10895: ARRAY
10896: PPUSH
10897: CALL_OW 251
10901: PUSH
10902: LD_VAR 0 5
10906: PUSH
10907: LD_VAR 0 4
10911: ARRAY
10912: PPUSH
10913: CALL_OW 254
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: ADD
10927: ST_TO_ADDR
10928: GO 10841
10930: POP
10931: POP
// result = list ;
10932: LD_ADDR_VAR 0 3
10936: PUSH
10937: LD_VAR 0 6
10941: ST_TO_ADDR
// end ;
10942: LD_VAR 0 3
10946: RET
// export function BehemothAttack ( behemoth , time_lapsers_list , mechanic_list , x , y ) ; var i , p , dist ; begin
10947: LD_INT 0
10949: PPUSH
10950: PPUSH
10951: PPUSH
10952: PPUSH
// if GetDistUnits ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) < 18 then
10953: LD_VAR 0 1
10957: PPUSH
10958: LD_INT 81
10960: PUSH
10961: LD_VAR 0 1
10965: PPUSH
10966: CALL_OW 255
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PPUSH
10975: CALL_OW 69
10979: PPUSH
10980: LD_VAR 0 1
10984: PPUSH
10985: CALL_OW 74
10989: PPUSH
10990: CALL_OW 296
10994: PUSH
10995: LD_INT 18
10997: LESS
10998: IFFALSE 11043
// ComAttackUnit ( behemoth , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( behemoth ) ] ) , behemoth ) ) else
11000: LD_VAR 0 1
11004: PPUSH
11005: LD_INT 81
11007: PUSH
11008: LD_VAR 0 1
11012: PPUSH
11013: CALL_OW 255
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PPUSH
11022: CALL_OW 69
11026: PPUSH
11027: LD_VAR 0 1
11031: PPUSH
11032: CALL_OW 74
11036: PPUSH
11037: CALL_OW 115
11041: GO 11062
// ComMoveXY ( behemoth , x , y ) ;
11043: LD_VAR 0 1
11047: PPUSH
11048: LD_VAR 0 4
11052: PPUSH
11053: LD_VAR 0 5
11057: PPUSH
11058: CALL_OW 111
// if time_lapsers_list > 0 then
11062: LD_VAR 0 2
11066: PUSH
11067: LD_INT 0
11069: GREATER
11070: IFFALSE 11264
// begin for i = 1 to time_lapsers_list do
11072: LD_ADDR_VAR 0 7
11076: PUSH
11077: DOUBLE
11078: LD_INT 1
11080: DEC
11081: ST_TO_ADDR
11082: LD_VAR 0 2
11086: PUSH
11087: FOR_TO
11088: IFFALSE 11262
// begin if GetLives ( time_lapsers_list [ i ] ) >= 250 and GetDistUnits ( time_lapsers_list [ i ] , behemoth ) > 9 then
11090: LD_VAR 0 2
11094: PUSH
11095: LD_VAR 0 7
11099: ARRAY
11100: PPUSH
11101: CALL_OW 256
11105: PUSH
11106: LD_INT 250
11108: GREATEREQUAL
11109: IFFALSE 11137
11111: PUSH
11112: LD_VAR 0 2
11116: PUSH
11117: LD_VAR 0 7
11121: ARRAY
11122: PPUSH
11123: LD_VAR 0 1
11127: PPUSH
11128: CALL_OW 296
11132: PUSH
11133: LD_INT 9
11135: GREATER
11136: AND
11137: IFFALSE 11174
// ComMoveXY ( time_lapsers_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11139: LD_VAR 0 2
11143: PUSH
11144: LD_VAR 0 7
11148: ARRAY
11149: PPUSH
11150: LD_VAR 0 1
11154: PPUSH
11155: CALL_OW 250
11159: PPUSH
11160: LD_VAR 0 1
11164: PPUSH
11165: CALL_OW 251
11169: PPUSH
11170: CALL_OW 111
// if GetLives ( time_lapsers_list [ i ] ) < 500 and GetLives ( behemoth ) > 700 then
11174: LD_VAR 0 2
11178: PUSH
11179: LD_VAR 0 7
11183: ARRAY
11184: PPUSH
11185: CALL_OW 256
11189: PUSH
11190: LD_INT 500
11192: LESS
11193: IFFALSE 11210
11195: PUSH
11196: LD_VAR 0 1
11200: PPUSH
11201: CALL_OW 256
11205: PUSH
11206: LD_INT 700
11208: GREATER
11209: AND
11210: IFFALSE 11260
// for p = 1 to mechanic_list do
11212: LD_ADDR_VAR 0 8
11216: PUSH
11217: DOUBLE
11218: LD_INT 1
11220: DEC
11221: ST_TO_ADDR
11222: LD_VAR 0 3
11226: PUSH
11227: FOR_TO
11228: IFFALSE 11258
// ComRepairVehicle ( mechanic_list [ p ] , time_lapsers_list [ i ] ) ;
11230: LD_VAR 0 3
11234: PUSH
11235: LD_VAR 0 8
11239: ARRAY
11240: PPUSH
11241: LD_VAR 0 2
11245: PUSH
11246: LD_VAR 0 7
11250: ARRAY
11251: PPUSH
11252: CALL_OW 129
11256: GO 11227
11258: POP
11259: POP
// end ;
11260: GO 11087
11262: POP
11263: POP
// end ; if mechanic_list then
11264: LD_VAR 0 3
11268: IFFALSE 11451
// begin for i = 1 to mechanic_list do
11270: LD_ADDR_VAR 0 7
11274: PUSH
11275: DOUBLE
11276: LD_INT 1
11278: DEC
11279: ST_TO_ADDR
11280: LD_VAR 0 3
11284: PUSH
11285: FOR_TO
11286: IFFALSE 11449
// begin if GetLives ( mechanic_list [ i ] ) < 333 then
11288: LD_VAR 0 3
11292: PUSH
11293: LD_VAR 0 7
11297: ARRAY
11298: PPUSH
11299: CALL_OW 256
11303: PUSH
11304: LD_INT 333
11306: LESS
11307: IFFALSE 11331
// ru_behemoth_mechanic := ru_behemoth_mechanic diff mechanic_list [ i ] ;
11309: LD_ADDR_EXP 15
11313: PUSH
11314: LD_EXP 15
11318: PUSH
11319: LD_VAR 0 3
11323: PUSH
11324: LD_VAR 0 7
11328: ARRAY
11329: DIFF
11330: ST_TO_ADDR
// if GetDistUnits ( mechanic_list [ i ] , behemoth ) > 9 and not HasTask ( mechanic_list [ i ] ) then
11331: LD_VAR 0 3
11335: PUSH
11336: LD_VAR 0 7
11340: ARRAY
11341: PPUSH
11342: LD_VAR 0 1
11346: PPUSH
11347: CALL_OW 296
11351: PUSH
11352: LD_INT 9
11354: GREATER
11355: IFFALSE 11375
11357: PUSH
11358: LD_VAR 0 3
11362: PUSH
11363: LD_VAR 0 7
11367: ARRAY
11368: PPUSH
11369: CALL_OW 314
11373: NOT
11374: AND
11375: IFFALSE 11412
// ComMoveXY ( mechanic_list [ i ] , GetX ( behemoth ) , GetY ( behemoth ) ) ;
11377: LD_VAR 0 3
11381: PUSH
11382: LD_VAR 0 7
11386: ARRAY
11387: PPUSH
11388: LD_VAR 0 1
11392: PPUSH
11393: CALL_OW 250
11397: PPUSH
11398: LD_VAR 0 1
11402: PPUSH
11403: CALL_OW 251
11407: PPUSH
11408: CALL_OW 111
// if GetLives ( behemoth ) < 700 then
11412: LD_VAR 0 1
11416: PPUSH
11417: CALL_OW 256
11421: PUSH
11422: LD_INT 700
11424: LESS
11425: IFFALSE 11447
// ComRepairVehicle ( mechanic_list [ i ] , behemoth ) ;
11427: LD_VAR 0 3
11431: PUSH
11432: LD_VAR 0 7
11436: ARRAY
11437: PPUSH
11438: LD_VAR 0 1
11442: PPUSH
11443: CALL_OW 129
// end ;
11447: GO 11285
11449: POP
11450: POP
// end ; end ;
11451: LD_VAR 0 6
11455: RET
// export function GetBehemoth ( side ) ; begin
11456: LD_INT 0
11458: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
11459: LD_ADDR_VAR 0 2
11463: PUSH
11464: LD_INT 22
11466: PUSH
11467: LD_VAR 0 1
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 31
11478: PUSH
11479: LD_INT 25
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PPUSH
11490: CALL_OW 69
11494: ST_TO_ADDR
// end ;
11495: LD_VAR 0 2
11499: RET
// export function CollectCrates ( side , area ) ; var cargo , engs , skr , i , am ; begin
11500: LD_INT 0
11502: PPUSH
11503: PPUSH
11504: PPUSH
11505: PPUSH
11506: PPUSH
11507: PPUSH
// skr = GetListOfCratesInArea ( area ) ;
11508: LD_ADDR_VAR 0 6
11512: PUSH
11513: LD_VAR 0 2
11517: PPUSH
11518: CALL_OW 435
11522: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
11523: LD_ADDR_VAR 0 5
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: LD_VAR 0 1
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 2
11542: PUSH
11543: LD_INT 25
11545: PUSH
11546: LD_INT 2
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 25
11555: PUSH
11556: LD_INT 16
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: LIST
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PPUSH
11572: CALL_OW 69
11576: ST_TO_ADDR
// if skr then
11577: LD_VAR 0 6
11581: IFFALSE 11746
// begin if engs then
11583: LD_VAR 0 5
11587: IFFALSE 11746
// begin am := GetResourceAmountXY ( skr [ 1 ] , skr [ 2 ] ) ;
11589: LD_ADDR_VAR 0 8
11593: PUSH
11594: LD_VAR 0 6
11598: PUSH
11599: LD_INT 1
11601: ARRAY
11602: PPUSH
11603: LD_VAR 0 6
11607: PUSH
11608: LD_INT 2
11610: ARRAY
11611: PPUSH
11612: CALL_OW 284
11616: ST_TO_ADDR
// if am > engs then
11617: LD_VAR 0 8
11621: PUSH
11622: LD_VAR 0 5
11626: GREATER
11627: IFFALSE 11639
// am := engs ;
11629: LD_ADDR_VAR 0 8
11633: PUSH
11634: LD_VAR 0 5
11638: ST_TO_ADDR
// for i = 1 to am do
11639: LD_ADDR_VAR 0 7
11643: PUSH
11644: DOUBLE
11645: LD_INT 1
11647: DEC
11648: ST_TO_ADDR
11649: LD_VAR 0 8
11653: PUSH
11654: FOR_TO
11655: IFFALSE 11744
// begin if IsInUnit ( engs [ i ] ) then
11657: LD_VAR 0 5
11661: PUSH
11662: LD_VAR 0 7
11666: ARRAY
11667: PPUSH
11668: CALL_OW 310
11672: IFFALSE 11691
// ComExitBuilding ( engs [ i ] ) else
11674: LD_VAR 0 5
11678: PUSH
11679: LD_VAR 0 7
11683: ARRAY
11684: PPUSH
11685: CALL_OW 122
11689: GO 11742
// if not HasTask ( engs [ i ] ) then
11691: LD_VAR 0 5
11695: PUSH
11696: LD_VAR 0 7
11700: ARRAY
11701: PPUSH
11702: CALL_OW 314
11706: NOT
11707: IFFALSE 11742
// ComCollect ( engs [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
11709: LD_VAR 0 5
11713: PUSH
11714: LD_VAR 0 7
11718: ARRAY
11719: PPUSH
11720: LD_VAR 0 6
11724: PUSH
11725: LD_INT 1
11727: ARRAY
11728: PPUSH
11729: LD_VAR 0 6
11733: PUSH
11734: LD_INT 2
11736: ARRAY
11737: PPUSH
11738: CALL_OW 117
// end ;
11742: GO 11654
11744: POP
11745: POP
// end ; end ; end ; end_of_file
11746: LD_VAR 0 3
11750: RET
// export game_status ; export helps_arrive , helps_can_arrive ; export beta_come , gamma_come , zeta_come , mine_ck , sib_bomb_constructed , mine_constructed ; export guyA , guyB ; export function PrepareAmerican ; var skill ; begin
11751: LD_INT 0
11753: PPUSH
11754: PPUSH
// uc_side := 1 ;
11755: LD_ADDR_OWVAR 20
11759: PUSH
11760: LD_INT 1
11762: ST_TO_ADDR
// uc_nation := 1 ;
11763: LD_ADDR_OWVAR 21
11767: PUSH
11768: LD_INT 1
11770: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
11771: LD_ADDR_VAR 0 2
11775: PUSH
11776: LD_INT 6
11778: PUSH
11779: LD_INT 5
11781: PUSH
11782: LD_INT 4
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: PUSH
11790: LD_OWVAR 67
11794: ARRAY
11795: ST_TO_ADDR
// game_status := false ;
11796: LD_ADDR_EXP 29
11800: PUSH
11801: LD_INT 0
11803: ST_TO_ADDR
// helps_arrive := false ;
11804: LD_ADDR_EXP 30
11808: PUSH
11809: LD_INT 0
11811: ST_TO_ADDR
// helps_can_arrive := false ;
11812: LD_ADDR_EXP 31
11816: PUSH
11817: LD_INT 0
11819: ST_TO_ADDR
// beta_come := false ;
11820: LD_ADDR_EXP 32
11824: PUSH
11825: LD_INT 0
11827: ST_TO_ADDR
// gamma_come := false ;
11828: LD_ADDR_EXP 33
11832: PUSH
11833: LD_INT 0
11835: ST_TO_ADDR
// zeta_come := false ;
11836: LD_ADDR_EXP 34
11840: PUSH
11841: LD_INT 0
11843: ST_TO_ADDR
// mine_ck := false ;
11844: LD_ADDR_EXP 35
11848: PUSH
11849: LD_INT 0
11851: ST_TO_ADDR
// sib_bomb_constructed := false ;
11852: LD_ADDR_EXP 36
11856: PUSH
11857: LD_INT 0
11859: ST_TO_ADDR
// mine_constructed := false ;
11860: LD_ADDR_EXP 37
11864: PUSH
11865: LD_INT 0
11867: ST_TO_ADDR
// SetResourceType ( GetBase ( us_dep1 ) , mat_cans , [ 200 , 100 , 70 ] [ Difficulty ] ) ;
11868: LD_INT 35
11870: PPUSH
11871: CALL_OW 274
11875: PPUSH
11876: LD_INT 1
11878: PPUSH
11879: LD_INT 200
11881: PUSH
11882: LD_INT 100
11884: PUSH
11885: LD_INT 70
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: LIST
11892: PUSH
11893: LD_OWVAR 67
11897: ARRAY
11898: PPUSH
11899: CALL_OW 277
// SetSide ( us_dep1 , 4 ) ;
11903: LD_INT 35
11905: PPUSH
11906: LD_INT 4
11908: PPUSH
11909: CALL_OW 235
// hc_importance := 100 ;
11913: LD_ADDR_OWVAR 32
11917: PUSH
11918: LD_INT 100
11920: ST_TO_ADDR
// PrepareHuman ( sex_male , 2 , skill + 1 ) ;
11921: LD_INT 1
11923: PPUSH
11924: LD_INT 2
11926: PPUSH
11927: LD_VAR 0 2
11931: PUSH
11932: LD_INT 1
11934: PLUS
11935: PPUSH
11936: CALL_OW 380
// hc_gallery := hardch ;
11940: LD_ADDR_OWVAR 33
11944: PUSH
11945: LD_STRING hardch
11947: ST_TO_ADDR
// hc_face_number := 1 ;
11948: LD_ADDR_OWVAR 34
11952: PUSH
11953: LD_INT 1
11955: ST_TO_ADDR
// guyA := CreateHuman ;
11956: LD_ADDR_EXP 38
11960: PUSH
11961: CALL_OW 44
11965: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
11966: LD_INT 1
11968: PPUSH
11969: LD_INT 1
11971: PPUSH
11972: LD_VAR 0 2
11976: PPUSH
11977: CALL_OW 380
// hc_face_number := 2 ;
11981: LD_ADDR_OWVAR 34
11985: PUSH
11986: LD_INT 2
11988: ST_TO_ADDR
// guyB := CreateHuman ;
11989: LD_ADDR_EXP 39
11993: PUSH
11994: CALL_OW 44
11998: ST_TO_ADDR
// hc_importance := 0 ;
11999: LD_ADDR_OWVAR 32
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// hc_gallery :=  ;
12007: LD_ADDR_OWVAR 33
12011: PUSH
12012: LD_STRING 
12014: ST_TO_ADDR
// end ;
12015: LD_VAR 0 1
12019: RET
// export Beta_Squad ; export function AddBetaSquad ( num ) ; var i , un , sold , sci , mech , tank , cargo , skill ; begin
12020: LD_INT 0
12022: PPUSH
12023: PPUSH
12024: PPUSH
12025: PPUSH
12026: PPUSH
12027: PPUSH
12028: PPUSH
12029: PPUSH
12030: PPUSH
// uc_side := 4 ;
12031: LD_ADDR_OWVAR 20
12035: PUSH
12036: LD_INT 4
12038: ST_TO_ADDR
// uc_nation := 1 ;
12039: LD_ADDR_OWVAR 21
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12047: LD_ADDR_VAR 0 10
12051: PUSH
12052: LD_INT 6
12054: PUSH
12055: LD_INT 5
12057: PUSH
12058: LD_INT 4
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: PUSH
12066: LD_OWVAR 67
12070: ARRAY
12071: ST_TO_ADDR
// Beta_Squad := [ ] ;
12072: LD_ADDR_EXP 40
12076: PUSH
12077: EMPTY
12078: ST_TO_ADDR
// case num of 1 :
12079: LD_VAR 0 1
12083: PUSH
12084: LD_INT 1
12086: DOUBLE
12087: EQUAL
12088: IFTRUE 12092
12090: GO 12135
12092: POP
// begin sold := 2 ;
12093: LD_ADDR_VAR 0 5
12097: PUSH
12098: LD_INT 2
12100: ST_TO_ADDR
// sci := 1 ;
12101: LD_ADDR_VAR 0 6
12105: PUSH
12106: LD_INT 1
12108: ST_TO_ADDR
// mech := 2 ;
12109: LD_ADDR_VAR 0 7
12113: PUSH
12114: LD_INT 2
12116: ST_TO_ADDR
// tank := 1 ;
12117: LD_ADDR_VAR 0 8
12121: PUSH
12122: LD_INT 1
12124: ST_TO_ADDR
// cargo := 1 ;
12125: LD_ADDR_VAR 0 9
12129: PUSH
12130: LD_INT 1
12132: ST_TO_ADDR
// end ; 2 :
12133: GO 12238
12135: LD_INT 2
12137: DOUBLE
12138: EQUAL
12139: IFTRUE 12143
12141: GO 12186
12143: POP
// begin sold := 2 ;
12144: LD_ADDR_VAR 0 5
12148: PUSH
12149: LD_INT 2
12151: ST_TO_ADDR
// sci := 1 ;
12152: LD_ADDR_VAR 0 6
12156: PUSH
12157: LD_INT 1
12159: ST_TO_ADDR
// mech := 1 ;
12160: LD_ADDR_VAR 0 7
12164: PUSH
12165: LD_INT 1
12167: ST_TO_ADDR
// tank := 1 ;
12168: LD_ADDR_VAR 0 8
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// cargo := 0 ;
12176: LD_ADDR_VAR 0 9
12180: PUSH
12181: LD_INT 0
12183: ST_TO_ADDR
// end ; 3 :
12184: GO 12238
12186: LD_INT 3
12188: DOUBLE
12189: EQUAL
12190: IFTRUE 12194
12192: GO 12237
12194: POP
// begin sold := 1 ;
12195: LD_ADDR_VAR 0 5
12199: PUSH
12200: LD_INT 1
12202: ST_TO_ADDR
// sci := 1 ;
12203: LD_ADDR_VAR 0 6
12207: PUSH
12208: LD_INT 1
12210: ST_TO_ADDR
// mech := 1 ;
12211: LD_ADDR_VAR 0 7
12215: PUSH
12216: LD_INT 1
12218: ST_TO_ADDR
// tank := 1 ;
12219: LD_ADDR_VAR 0 8
12223: PUSH
12224: LD_INT 1
12226: ST_TO_ADDR
// cargo := 0 ;
12227: LD_ADDR_VAR 0 9
12231: PUSH
12232: LD_INT 0
12234: ST_TO_ADDR
// end ; end ;
12235: GO 12238
12237: POP
// for i = 1 to sold do
12238: LD_ADDR_VAR 0 3
12242: PUSH
12243: DOUBLE
12244: LD_INT 1
12246: DEC
12247: ST_TO_ADDR
12248: LD_VAR 0 5
12252: PUSH
12253: FOR_TO
12254: IFFALSE 12326
// begin if i = 1 then
12256: LD_VAR 0 3
12260: PUSH
12261: LD_INT 1
12263: EQUAL
12264: IFFALSE 12283
// PrepareHuman ( sex_male , 1 , skill ) else
12266: LD_INT 1
12268: PPUSH
12269: LD_INT 1
12271: PPUSH
12272: LD_VAR 0 10
12276: PPUSH
12277: CALL_OW 380
12281: GO 12298
// PrepareHuman ( false , 1 , skill ) ;
12283: LD_INT 0
12285: PPUSH
12286: LD_INT 1
12288: PPUSH
12289: LD_VAR 0 10
12293: PPUSH
12294: CALL_OW 380
// un := CreateHuman ;
12298: LD_ADDR_VAR 0 4
12302: PUSH
12303: CALL_OW 44
12307: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12308: LD_ADDR_EXP 40
12312: PUSH
12313: LD_EXP 40
12317: PUSH
12318: LD_VAR 0 4
12322: ADD
12323: ST_TO_ADDR
// end ;
12324: GO 12253
12326: POP
12327: POP
// for i = 1 to mech do
12328: LD_ADDR_VAR 0 3
12332: PUSH
12333: DOUBLE
12334: LD_INT 1
12336: DEC
12337: ST_TO_ADDR
12338: LD_VAR 0 7
12342: PUSH
12343: FOR_TO
12344: IFFALSE 12401
// begin PrepareHuman ( false , 3 , skill ) ;
12346: LD_INT 0
12348: PPUSH
12349: LD_INT 3
12351: PPUSH
12352: LD_VAR 0 10
12356: PPUSH
12357: CALL_OW 380
// un := CreateHuman ;
12361: LD_ADDR_VAR 0 4
12365: PUSH
12366: CALL_OW 44
12370: ST_TO_ADDR
// SetTag ( un , 3 ) ;
12371: LD_VAR 0 4
12375: PPUSH
12376: LD_INT 3
12378: PPUSH
12379: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12383: LD_ADDR_EXP 40
12387: PUSH
12388: LD_EXP 40
12392: PUSH
12393: LD_VAR 0 4
12397: ADD
12398: ST_TO_ADDR
// end ;
12399: GO 12343
12401: POP
12402: POP
// for i = 1 to sci do
12403: LD_ADDR_VAR 0 3
12407: PUSH
12408: DOUBLE
12409: LD_INT 1
12411: DEC
12412: ST_TO_ADDR
12413: LD_VAR 0 6
12417: PUSH
12418: FOR_TO
12419: IFFALSE 12464
// begin PrepareHuman ( false , 4 , skill ) ;
12421: LD_INT 0
12423: PPUSH
12424: LD_INT 4
12426: PPUSH
12427: LD_VAR 0 10
12431: PPUSH
12432: CALL_OW 380
// un := CreateHuman ;
12436: LD_ADDR_VAR 0 4
12440: PUSH
12441: CALL_OW 44
12445: ST_TO_ADDR
// Beta_Squad := Beta_Squad ^ un ;
12446: LD_ADDR_EXP 40
12450: PUSH
12451: LD_EXP 40
12455: PUSH
12456: LD_VAR 0 4
12460: ADD
12461: ST_TO_ADDR
// end ;
12462: GO 12418
12464: POP
12465: POP
// for i = 1 to tank do
12466: LD_ADDR_VAR 0 3
12470: PUSH
12471: DOUBLE
12472: LD_INT 1
12474: DEC
12475: ST_TO_ADDR
12476: LD_VAR 0 8
12480: PUSH
12481: FOR_TO
12482: IFFALSE 12595
// begin Randomize ;
12484: CALL_OW 10
// vc_chassis := us_medium_tracked ;
12488: LD_ADDR_OWVAR 37
12492: PUSH
12493: LD_INT 3
12495: ST_TO_ADDR
// vc_engine := engine_solar ;
12496: LD_ADDR_OWVAR 39
12500: PUSH
12501: LD_INT 2
12503: ST_TO_ADDR
// vc_control := control_manual ;
12504: LD_ADDR_OWVAR 38
12508: PUSH
12509: LD_INT 1
12511: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ;
12512: LD_ADDR_OWVAR 40
12516: PUSH
12517: LD_INT 4
12519: PUSH
12520: LD_INT 5
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 1
12529: PPUSH
12530: LD_INT 2
12532: PPUSH
12533: CALL_OW 12
12537: ARRAY
12538: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12539: LD_ADDR_OWVAR 41
12543: PUSH
12544: LD_INT 35
12546: PPUSH
12547: LD_INT 55
12549: PPUSH
12550: CALL_OW 12
12554: ST_TO_ADDR
// un := CreateVehicle ;
12555: LD_ADDR_VAR 0 4
12559: PUSH
12560: CALL_OW 45
12564: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12565: LD_VAR 0 4
12569: PPUSH
12570: LD_INT 5
12572: PPUSH
12573: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12577: LD_ADDR_EXP 40
12581: PUSH
12582: LD_EXP 40
12586: PUSH
12587: LD_VAR 0 4
12591: ADD
12592: ST_TO_ADDR
// end ;
12593: GO 12481
12595: POP
12596: POP
// if cargo then
12597: LD_VAR 0 9
12601: IFFALSE 12704
// begin vc_chassis := us_medium_tracked ;
12603: LD_ADDR_OWVAR 37
12607: PUSH
12608: LD_INT 3
12610: ST_TO_ADDR
// vc_engine := engine_solar ;
12611: LD_ADDR_OWVAR 39
12615: PUSH
12616: LD_INT 2
12618: ST_TO_ADDR
// vc_control := control_manual ;
12619: LD_ADDR_OWVAR 38
12623: PUSH
12624: LD_INT 1
12626: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
12627: LD_ADDR_OWVAR 40
12631: PUSH
12632: LD_INT 12
12634: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
12635: LD_ADDR_OWVAR 41
12639: PUSH
12640: LD_INT 35
12642: PPUSH
12643: LD_INT 55
12645: PPUSH
12646: CALL_OW 12
12650: ST_TO_ADDR
// un := CreateVehicle ;
12651: LD_ADDR_VAR 0 4
12655: PUSH
12656: CALL_OW 45
12660: ST_TO_ADDR
// SetTag ( un , 5 ) ;
12661: LD_VAR 0 4
12665: PPUSH
12666: LD_INT 5
12668: PPUSH
12669: CALL_OW 109
// Beta_Squad := Beta_Squad ^ un ;
12673: LD_ADDR_EXP 40
12677: PUSH
12678: LD_EXP 40
12682: PUSH
12683: LD_VAR 0 4
12687: ADD
12688: ST_TO_ADDR
// SetCargo ( un , mat_cans , 60 ) ;
12689: LD_VAR 0 4
12693: PPUSH
12694: LD_INT 1
12696: PPUSH
12697: LD_INT 60
12699: PPUSH
12700: CALL_OW 290
// end ; end ;
12704: LD_VAR 0 2
12708: RET
// export Gamma_Squad ; export function AddGammaSquad ( num ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
12709: LD_INT 0
12711: PPUSH
12712: PPUSH
12713: PPUSH
12714: PPUSH
12715: PPUSH
12716: PPUSH
12717: PPUSH
12718: PPUSH
12719: PPUSH
12720: PPUSH
// uc_side := 4 ;
12721: LD_ADDR_OWVAR 20
12725: PUSH
12726: LD_INT 4
12728: ST_TO_ADDR
// uc_nation := 1 ;
12729: LD_ADDR_OWVAR 21
12733: PUSH
12734: LD_INT 1
12736: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
12737: LD_ADDR_VAR 0 11
12741: PUSH
12742: LD_INT 6
12744: PUSH
12745: LD_INT 5
12747: PUSH
12748: LD_INT 4
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: PUSH
12756: LD_OWVAR 67
12760: ARRAY
12761: ST_TO_ADDR
// Gamma_Squad := [ ] ;
12762: LD_ADDR_EXP 41
12766: PUSH
12767: EMPTY
12768: ST_TO_ADDR
// case num of 1 :
12769: LD_VAR 0 1
12773: PUSH
12774: LD_INT 1
12776: DOUBLE
12777: EQUAL
12778: IFTRUE 12782
12780: GO 12833
12782: POP
// begin sold := 2 ;
12783: LD_ADDR_VAR 0 5
12787: PUSH
12788: LD_INT 2
12790: ST_TO_ADDR
// eng := 2 ;
12791: LD_ADDR_VAR 0 6
12795: PUSH
12796: LD_INT 2
12798: ST_TO_ADDR
// sci := 0 ;
12799: LD_ADDR_VAR 0 7
12803: PUSH
12804: LD_INT 0
12806: ST_TO_ADDR
// mech := 1 ;
12807: LD_ADDR_VAR 0 8
12811: PUSH
12812: LD_INT 1
12814: ST_TO_ADDR
// tank := 0 ;
12815: LD_ADDR_VAR 0 9
12819: PUSH
12820: LD_INT 0
12822: ST_TO_ADDR
// cargo := 1 ;
12823: LD_ADDR_VAR 0 10
12827: PUSH
12828: LD_INT 1
12830: ST_TO_ADDR
// end ; 2 :
12831: GO 12952
12833: LD_INT 2
12835: DOUBLE
12836: EQUAL
12837: IFTRUE 12841
12839: GO 12892
12841: POP
// begin sold := 1 ;
12842: LD_ADDR_VAR 0 5
12846: PUSH
12847: LD_INT 1
12849: ST_TO_ADDR
// eng := 2 ;
12850: LD_ADDR_VAR 0 6
12854: PUSH
12855: LD_INT 2
12857: ST_TO_ADDR
// sci := 0 ;
12858: LD_ADDR_VAR 0 7
12862: PUSH
12863: LD_INT 0
12865: ST_TO_ADDR
// mech := 1 ;
12866: LD_ADDR_VAR 0 8
12870: PUSH
12871: LD_INT 1
12873: ST_TO_ADDR
// tank := 0 ;
12874: LD_ADDR_VAR 0 9
12878: PUSH
12879: LD_INT 0
12881: ST_TO_ADDR
// cargo := 1 ;
12882: LD_ADDR_VAR 0 10
12886: PUSH
12887: LD_INT 1
12889: ST_TO_ADDR
// end ; 3 :
12890: GO 12952
12892: LD_INT 3
12894: DOUBLE
12895: EQUAL
12896: IFTRUE 12900
12898: GO 12951
12900: POP
// begin sold := 1 ;
12901: LD_ADDR_VAR 0 5
12905: PUSH
12906: LD_INT 1
12908: ST_TO_ADDR
// eng := 1 ;
12909: LD_ADDR_VAR 0 6
12913: PUSH
12914: LD_INT 1
12916: ST_TO_ADDR
// sci := 0 ;
12917: LD_ADDR_VAR 0 7
12921: PUSH
12922: LD_INT 0
12924: ST_TO_ADDR
// mech := 1 ;
12925: LD_ADDR_VAR 0 8
12929: PUSH
12930: LD_INT 1
12932: ST_TO_ADDR
// tank := 0 ;
12933: LD_ADDR_VAR 0 9
12937: PUSH
12938: LD_INT 0
12940: ST_TO_ADDR
// cargo := 1 ;
12941: LD_ADDR_VAR 0 10
12945: PUSH
12946: LD_INT 1
12948: ST_TO_ADDR
// end ; end ;
12949: GO 12952
12951: POP
// for i = 1 to sold do
12952: LD_ADDR_VAR 0 3
12956: PUSH
12957: DOUBLE
12958: LD_INT 1
12960: DEC
12961: ST_TO_ADDR
12962: LD_VAR 0 5
12966: PUSH
12967: FOR_TO
12968: IFFALSE 13040
// begin if i = 1 then
12970: LD_VAR 0 3
12974: PUSH
12975: LD_INT 1
12977: EQUAL
12978: IFFALSE 12997
// PrepareHuman ( sex_male , 1 , skill ) else
12980: LD_INT 1
12982: PPUSH
12983: LD_INT 1
12985: PPUSH
12986: LD_VAR 0 11
12990: PPUSH
12991: CALL_OW 380
12995: GO 13012
// PrepareHuman ( false , 1 , skill ) ;
12997: LD_INT 0
12999: PPUSH
13000: LD_INT 1
13002: PPUSH
13003: LD_VAR 0 11
13007: PPUSH
13008: CALL_OW 380
// un := CreateHuman ;
13012: LD_ADDR_VAR 0 4
13016: PUSH
13017: CALL_OW 44
13021: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13022: LD_ADDR_EXP 41
13026: PUSH
13027: LD_EXP 41
13031: PUSH
13032: LD_VAR 0 4
13036: ADD
13037: ST_TO_ADDR
// end ;
13038: GO 12967
13040: POP
13041: POP
// for i = 1 to mech do
13042: LD_ADDR_VAR 0 3
13046: PUSH
13047: DOUBLE
13048: LD_INT 1
13050: DEC
13051: ST_TO_ADDR
13052: LD_VAR 0 8
13056: PUSH
13057: FOR_TO
13058: IFFALSE 13115
// begin PrepareHuman ( false , 3 , skill ) ;
13060: LD_INT 0
13062: PPUSH
13063: LD_INT 3
13065: PPUSH
13066: LD_VAR 0 11
13070: PPUSH
13071: CALL_OW 380
// un := CreateHuman ;
13075: LD_ADDR_VAR 0 4
13079: PUSH
13080: CALL_OW 44
13084: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13085: LD_VAR 0 4
13089: PPUSH
13090: LD_INT 3
13092: PPUSH
13093: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13097: LD_ADDR_EXP 41
13101: PUSH
13102: LD_EXP 41
13106: PUSH
13107: LD_VAR 0 4
13111: ADD
13112: ST_TO_ADDR
// end ;
13113: GO 13057
13115: POP
13116: POP
// for i = 1 to eng do
13117: LD_ADDR_VAR 0 3
13121: PUSH
13122: DOUBLE
13123: LD_INT 1
13125: DEC
13126: ST_TO_ADDR
13127: LD_VAR 0 6
13131: PUSH
13132: FOR_TO
13133: IFFALSE 13178
// begin PrepareHuman ( false , 2 , skill ) ;
13135: LD_INT 0
13137: PPUSH
13138: LD_INT 2
13140: PPUSH
13141: LD_VAR 0 11
13145: PPUSH
13146: CALL_OW 380
// un := CreateHuman ;
13150: LD_ADDR_VAR 0 4
13154: PUSH
13155: CALL_OW 44
13159: ST_TO_ADDR
// Gamma_Squad := Gamma_Squad ^ un ;
13160: LD_ADDR_EXP 41
13164: PUSH
13165: LD_EXP 41
13169: PUSH
13170: LD_VAR 0 4
13174: ADD
13175: ST_TO_ADDR
// end ;
13176: GO 13132
13178: POP
13179: POP
// for i = 1 to tank do
13180: LD_ADDR_VAR 0 3
13184: PUSH
13185: DOUBLE
13186: LD_INT 1
13188: DEC
13189: ST_TO_ADDR
13190: LD_VAR 0 9
13194: PUSH
13195: FOR_TO
13196: IFFALSE 13309
// begin Randomize ;
13198: CALL_OW 10
// vc_chassis := us_medium_wheeled ;
13202: LD_ADDR_OWVAR 37
13206: PUSH
13207: LD_INT 2
13209: ST_TO_ADDR
// vc_engine := engine_siberite ;
13210: LD_ADDR_OWVAR 39
13214: PUSH
13215: LD_INT 3
13217: ST_TO_ADDR
// vc_control := control_manual ;
13218: LD_ADDR_OWVAR 38
13222: PUSH
13223: LD_INT 1
13225: ST_TO_ADDR
// vc_weapon := [ us_rocket_launcher , us_laser ] [ Rand ( 1 , 2 ) ] ;
13226: LD_ADDR_OWVAR 40
13230: PUSH
13231: LD_INT 7
13233: PUSH
13234: LD_INT 9
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 1
13243: PPUSH
13244: LD_INT 2
13246: PPUSH
13247: CALL_OW 12
13251: ARRAY
13252: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13253: LD_ADDR_OWVAR 41
13257: PUSH
13258: LD_INT 35
13260: PPUSH
13261: LD_INT 55
13263: PPUSH
13264: CALL_OW 12
13268: ST_TO_ADDR
// un := CreateVehicle ;
13269: LD_ADDR_VAR 0 4
13273: PUSH
13274: CALL_OW 45
13278: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_INT 5
13286: PPUSH
13287: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13291: LD_ADDR_EXP 41
13295: PUSH
13296: LD_EXP 41
13300: PUSH
13301: LD_VAR 0 4
13305: ADD
13306: ST_TO_ADDR
// end ;
13307: GO 13195
13309: POP
13310: POP
// if cargo then
13311: LD_VAR 0 10
13315: IFFALSE 13433
// begin vc_chassis := us_medium_tracked ;
13317: LD_ADDR_OWVAR 37
13321: PUSH
13322: LD_INT 3
13324: ST_TO_ADDR
// vc_engine := engine_combustion ;
13325: LD_ADDR_OWVAR 39
13329: PUSH
13330: LD_INT 1
13332: ST_TO_ADDR
// vc_control := control_manual ;
13333: LD_ADDR_OWVAR 38
13337: PUSH
13338: LD_INT 1
13340: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
13341: LD_ADDR_OWVAR 40
13345: PUSH
13346: LD_INT 12
13348: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13349: LD_ADDR_OWVAR 41
13353: PUSH
13354: LD_INT 35
13356: PPUSH
13357: LD_INT 55
13359: PPUSH
13360: CALL_OW 12
13364: ST_TO_ADDR
// un := CreateVehicle ;
13365: LD_ADDR_VAR 0 4
13369: PUSH
13370: CALL_OW 45
13374: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13375: LD_VAR 0 4
13379: PPUSH
13380: LD_INT 5
13382: PPUSH
13383: CALL_OW 109
// Gamma_Squad := Gamma_Squad ^ un ;
13387: LD_ADDR_EXP 41
13391: PUSH
13392: LD_EXP 41
13396: PUSH
13397: LD_VAR 0 4
13401: ADD
13402: ST_TO_ADDR
// SetCargo ( un , 3 , 30 ) ;
13403: LD_VAR 0 4
13407: PPUSH
13408: LD_INT 3
13410: PPUSH
13411: LD_INT 30
13413: PPUSH
13414: CALL_OW 290
// SetCargo ( un , 1 , 40 ) ;
13418: LD_VAR 0 4
13422: PPUSH
13423: LD_INT 1
13425: PPUSH
13426: LD_INT 40
13428: PPUSH
13429: CALL_OW 290
// end ; end ;
13433: LD_VAR 0 2
13437: RET
// export Zeta_Squad ; export function AddZetaSquad ( ) ; var i , un , sold , eng , sci , mech , tank , cargo , skill ; begin
13438: LD_INT 0
13440: PPUSH
13441: PPUSH
13442: PPUSH
13443: PPUSH
13444: PPUSH
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
13449: PPUSH
// uc_side := 4 ;
13450: LD_ADDR_OWVAR 20
13454: PUSH
13455: LD_INT 4
13457: ST_TO_ADDR
// uc_nation := 1 ;
13458: LD_ADDR_OWVAR 21
13462: PUSH
13463: LD_INT 1
13465: ST_TO_ADDR
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
13466: LD_ADDR_VAR 0 10
13470: PUSH
13471: LD_INT 6
13473: PUSH
13474: LD_INT 5
13476: PUSH
13477: LD_INT 4
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: LIST
13484: PUSH
13485: LD_OWVAR 67
13489: ARRAY
13490: ST_TO_ADDR
// Zeta_Squad := [ ] ;
13491: LD_ADDR_EXP 42
13495: PUSH
13496: EMPTY
13497: ST_TO_ADDR
// sold := 1 ;
13498: LD_ADDR_VAR 0 4
13502: PUSH
13503: LD_INT 1
13505: ST_TO_ADDR
// eng := 0 ;
13506: LD_ADDR_VAR 0 5
13510: PUSH
13511: LD_INT 0
13513: ST_TO_ADDR
// sci := 0 ;
13514: LD_ADDR_VAR 0 6
13518: PUSH
13519: LD_INT 0
13521: ST_TO_ADDR
// mech := 3 ;
13522: LD_ADDR_VAR 0 7
13526: PUSH
13527: LD_INT 3
13529: ST_TO_ADDR
// tank := 3 ;
13530: LD_ADDR_VAR 0 8
13534: PUSH
13535: LD_INT 3
13537: ST_TO_ADDR
// cargo := 0 ;
13538: LD_ADDR_VAR 0 9
13542: PUSH
13543: LD_INT 0
13545: ST_TO_ADDR
// for i = 1 to sold do
13546: LD_ADDR_VAR 0 2
13550: PUSH
13551: DOUBLE
13552: LD_INT 1
13554: DEC
13555: ST_TO_ADDR
13556: LD_VAR 0 4
13560: PUSH
13561: FOR_TO
13562: IFFALSE 13634
// begin if i = 1 then
13564: LD_VAR 0 2
13568: PUSH
13569: LD_INT 1
13571: EQUAL
13572: IFFALSE 13591
// PrepareHuman ( sex_male , 1 , skill ) else
13574: LD_INT 1
13576: PPUSH
13577: LD_INT 1
13579: PPUSH
13580: LD_VAR 0 10
13584: PPUSH
13585: CALL_OW 380
13589: GO 13606
// PrepareHuman ( false , 1 , skill ) ;
13591: LD_INT 0
13593: PPUSH
13594: LD_INT 1
13596: PPUSH
13597: LD_VAR 0 10
13601: PPUSH
13602: CALL_OW 380
// un := CreateHuman ;
13606: LD_ADDR_VAR 0 3
13610: PUSH
13611: CALL_OW 44
13615: ST_TO_ADDR
// Zeta_Squad := Zeta_Squad ^ un ;
13616: LD_ADDR_EXP 42
13620: PUSH
13621: LD_EXP 42
13625: PUSH
13626: LD_VAR 0 3
13630: ADD
13631: ST_TO_ADDR
// end ;
13632: GO 13561
13634: POP
13635: POP
// for i = 1 to mech do
13636: LD_ADDR_VAR 0 2
13640: PUSH
13641: DOUBLE
13642: LD_INT 1
13644: DEC
13645: ST_TO_ADDR
13646: LD_VAR 0 7
13650: PUSH
13651: FOR_TO
13652: IFFALSE 13709
// begin PrepareHuman ( false , 3 , skill ) ;
13654: LD_INT 0
13656: PPUSH
13657: LD_INT 3
13659: PPUSH
13660: LD_VAR 0 10
13664: PPUSH
13665: CALL_OW 380
// un := CreateHuman ;
13669: LD_ADDR_VAR 0 3
13673: PUSH
13674: CALL_OW 44
13678: ST_TO_ADDR
// SetTag ( un , 3 ) ;
13679: LD_VAR 0 3
13683: PPUSH
13684: LD_INT 3
13686: PPUSH
13687: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13691: LD_ADDR_EXP 42
13695: PUSH
13696: LD_EXP 42
13700: PUSH
13701: LD_VAR 0 3
13705: ADD
13706: ST_TO_ADDR
// end ;
13707: GO 13651
13709: POP
13710: POP
// for i = 1 to tank do
13711: LD_ADDR_VAR 0 2
13715: PUSH
13716: DOUBLE
13717: LD_INT 1
13719: DEC
13720: ST_TO_ADDR
13721: LD_VAR 0 8
13725: PUSH
13726: FOR_TO
13727: IFFALSE 13973
// begin Randomize ;
13729: CALL_OW 10
// if i < 3 then
13733: LD_VAR 0 2
13737: PUSH
13738: LD_INT 3
13740: LESS
13741: IFFALSE 13850
// begin vc_chassis := us_medium_tracked ;
13743: LD_ADDR_OWVAR 37
13747: PUSH
13748: LD_INT 3
13750: ST_TO_ADDR
// vc_engine := engine_combustion ;
13751: LD_ADDR_OWVAR 39
13755: PUSH
13756: LD_INT 1
13758: ST_TO_ADDR
// vc_control := control_manual ;
13759: LD_ADDR_OWVAR 38
13763: PUSH
13764: LD_INT 1
13766: ST_TO_ADDR
// vc_weapon := [ us_light_gun , us_laser ] [ Rand ( 1 , 2 ) ] ;
13767: LD_ADDR_OWVAR 40
13771: PUSH
13772: LD_INT 3
13774: PUSH
13775: LD_INT 9
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: LD_INT 1
13784: PPUSH
13785: LD_INT 2
13787: PPUSH
13788: CALL_OW 12
13792: ARRAY
13793: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13794: LD_ADDR_OWVAR 41
13798: PUSH
13799: LD_INT 35
13801: PPUSH
13802: LD_INT 55
13804: PPUSH
13805: CALL_OW 12
13809: ST_TO_ADDR
// un := CreateVehicle ;
13810: LD_ADDR_VAR 0 3
13814: PUSH
13815: CALL_OW 45
13819: ST_TO_ADDR
// SetTag ( un , 5 ) ;
13820: LD_VAR 0 3
13824: PPUSH
13825: LD_INT 5
13827: PPUSH
13828: CALL_OW 109
// Zeta_Squad := Zeta_Squad ^ un ;
13832: LD_ADDR_EXP 42
13836: PUSH
13837: LD_EXP 42
13841: PUSH
13842: LD_VAR 0 3
13846: ADD
13847: ST_TO_ADDR
// end else
13848: GO 13971
// begin uc_nation := 3 ;
13850: LD_ADDR_OWVAR 21
13854: PUSH
13855: LD_INT 3
13857: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
13858: LD_ADDR_OWVAR 37
13862: PUSH
13863: LD_INT 22
13865: ST_TO_ADDR
// vc_engine := engine_combustion ;
13866: LD_ADDR_OWVAR 39
13870: PUSH
13871: LD_INT 1
13873: ST_TO_ADDR
// vc_control := control_manual ;
13874: LD_ADDR_OWVAR 38
13878: PUSH
13879: LD_INT 1
13881: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
13882: LD_ADDR_OWVAR 40
13886: PUSH
13887: LD_INT 51
13889: ST_TO_ADDR
// vc_fuel_battery := Rand ( 35 , 55 ) ;
13890: LD_ADDR_OWVAR 41
13894: PUSH
13895: LD_INT 35
13897: PPUSH
13898: LD_INT 55
13900: PPUSH
13901: CALL_OW 12
13905: ST_TO_ADDR
// un := CreateVehicle ;
13906: LD_ADDR_VAR 0 3
13910: PUSH
13911: CALL_OW 45
13915: ST_TO_ADDR
// SetLives ( un , 496 ) ;
13916: LD_VAR 0 3
13920: PPUSH
13921: LD_INT 496
13923: PPUSH
13924: CALL_OW 234
// SetTag ( un , 5 ) ;
13928: LD_VAR 0 3
13932: PPUSH
13933: LD_INT 5
13935: PPUSH
13936: CALL_OW 109
// SetCargo ( un , mat_oil , 100 ) ;
13940: LD_VAR 0 3
13944: PPUSH
13945: LD_INT 2
13947: PPUSH
13948: LD_INT 100
13950: PPUSH
13951: CALL_OW 290
// Zeta_Squad := Zeta_Squad ^ un ;
13955: LD_ADDR_EXP 42
13959: PUSH
13960: LD_EXP 42
13964: PUSH
13965: LD_VAR 0 3
13969: ADD
13970: ST_TO_ADDR
// end ; end ;
13971: GO 13726
13973: POP
13974: POP
// end ; end_of_file
13975: LD_VAR 0 1
13979: RET
// export function Action ; begin
13980: LD_INT 0
13982: PPUSH
// InGameOn ;
13983: CALL_OW 8
// CenterNowOnXY ( 151 , 107 ) ;
13987: LD_INT 151
13989: PPUSH
13990: LD_INT 107
13992: PPUSH
13993: CALL_OW 86
// PlaceUnitXY ( guyA , 171 , 108 , false ) ;
13997: LD_EXP 38
14001: PPUSH
14002: LD_INT 171
14004: PPUSH
14005: LD_INT 108
14007: PPUSH
14008: LD_INT 0
14010: PPUSH
14011: CALL_OW 48
// PlaceUnitXY ( guyB , 172 , 110 , false ) ;
14015: LD_EXP 39
14019: PPUSH
14020: LD_INT 172
14022: PPUSH
14023: LD_INT 110
14025: PPUSH
14026: LD_INT 0
14028: PPUSH
14029: CALL_OW 48
// ComMoveXY ( guyA , 156 , 107 ) ;
14033: LD_EXP 38
14037: PPUSH
14038: LD_INT 156
14040: PPUSH
14041: LD_INT 107
14043: PPUSH
14044: CALL_OW 111
// ComMoveXY ( guyB , 154 , 105 ) ;
14048: LD_EXP 39
14052: PPUSH
14053: LD_INT 154
14055: PPUSH
14056: LD_INT 105
14058: PPUSH
14059: CALL_OW 111
// repeat Wait ( 0 0$0.1 ) ;
14063: LD_INT 4
14065: PPUSH
14066: CALL_OW 67
// until GetX ( guyA ) = 156 and GetY ( guyA ) = 107 ;
14070: LD_EXP 38
14074: PPUSH
14075: CALL_OW 250
14079: PUSH
14080: LD_INT 156
14082: EQUAL
14083: IFFALSE 14100
14085: PUSH
14086: LD_EXP 38
14090: PPUSH
14091: CALL_OW 251
14095: PUSH
14096: LD_INT 107
14098: EQUAL
14099: AND
14100: IFFALSE 14063
// ComTurnUnit ( [ guyA , guyB ] , us_dep1 ) ;
14102: LD_EXP 38
14106: PUSH
14107: LD_EXP 39
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PPUSH
14116: LD_INT 35
14118: PPUSH
14119: CALL_OW 119
// Say ( guyA , D1-A-1 ) ;
14123: LD_EXP 38
14127: PPUSH
14128: LD_STRING D1-A-1
14130: PPUSH
14131: CALL_OW 88
// Say ( guyB , D1-B-1 ) ;
14135: LD_EXP 39
14139: PPUSH
14140: LD_STRING D1-B-1
14142: PPUSH
14143: CALL_OW 88
// Say ( guyA , D1-A-2 ) ;
14147: LD_EXP 38
14151: PPUSH
14152: LD_STRING D1-A-2
14154: PPUSH
14155: CALL_OW 88
// Say ( guyB , D1-B-2 ) ;
14159: LD_EXP 39
14163: PPUSH
14164: LD_STRING D1-B-2
14166: PPUSH
14167: CALL_OW 88
// ComMoveXY ( [ guyA , guyB ] , 147 , 108 ) ;
14171: LD_EXP 38
14175: PUSH
14176: LD_EXP 39
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PPUSH
14185: LD_INT 147
14187: PPUSH
14188: LD_INT 108
14190: PPUSH
14191: CALL_OW 111
// Say ( guyA , D1-A-3 ) ;
14195: LD_EXP 38
14199: PPUSH
14200: LD_STRING D1-A-3
14202: PPUSH
14203: CALL_OW 88
// repeat Wait ( 0 0$0.1 ) ;
14207: LD_INT 4
14209: PPUSH
14210: CALL_OW 67
// until GetDistUnits ( guyA , us_dep1 ) < 8 ;
14214: LD_EXP 38
14218: PPUSH
14219: LD_INT 35
14221: PPUSH
14222: CALL_OW 296
14226: PUSH
14227: LD_INT 8
14229: LESS
14230: IFFALSE 14207
// ComTurnUnit ( guyA , guyB ) ;
14232: LD_EXP 38
14236: PPUSH
14237: LD_EXP 39
14241: PPUSH
14242: CALL_OW 119
// ComTurnUnit ( guyB , guyA ) ;
14246: LD_EXP 39
14250: PPUSH
14251: LD_EXP 38
14255: PPUSH
14256: CALL_OW 119
// Say ( guyA , D1-A-10 ) ;
14260: LD_EXP 38
14264: PPUSH
14265: LD_STRING D1-A-10
14267: PPUSH
14268: CALL_OW 88
// Say ( guyB , D1-B-10 ) ;
14272: LD_EXP 39
14276: PPUSH
14277: LD_STRING D1-B-10
14279: PPUSH
14280: CALL_OW 88
// Say ( guyA , D1-A-11 ) ;
14284: LD_EXP 38
14288: PPUSH
14289: LD_STRING D1-A-11
14291: PPUSH
14292: CALL_OW 88
// Say ( guyB , D1-B-11 ) ;
14296: LD_EXP 39
14300: PPUSH
14301: LD_STRING D1-B-11
14303: PPUSH
14304: CALL_OW 88
// Say ( guyA , D1-A-12 ) ;
14308: LD_EXP 38
14312: PPUSH
14313: LD_STRING D1-A-12
14315: PPUSH
14316: CALL_OW 88
// Say ( guyB , D1-B-12 ) ;
14320: LD_EXP 39
14324: PPUSH
14325: LD_STRING D1-B-12
14327: PPUSH
14328: CALL_OW 88
// Say ( guyA , D1-A-13 ) ;
14332: LD_EXP 38
14336: PPUSH
14337: LD_STRING D1-A-13
14339: PPUSH
14340: CALL_OW 88
// Say ( guyB , D1-B-13 ) ;
14344: LD_EXP 39
14348: PPUSH
14349: LD_STRING D1-B-13
14351: PPUSH
14352: CALL_OW 88
// Say ( guyA , D1-A-14 ) ;
14356: LD_EXP 38
14360: PPUSH
14361: LD_STRING D1-A-14
14363: PPUSH
14364: CALL_OW 88
// Say ( guyB , D1-B-14 ) ;
14368: LD_EXP 39
14372: PPUSH
14373: LD_STRING D1-B-14
14375: PPUSH
14376: CALL_OW 88
// Say ( guyA , D1-A-15 ) ;
14380: LD_EXP 38
14384: PPUSH
14385: LD_STRING D1-A-15
14387: PPUSH
14388: CALL_OW 88
// Say ( guyB , D1-B-15 ) ;
14392: LD_EXP 39
14396: PPUSH
14397: LD_STRING D1-B-15
14399: PPUSH
14400: CALL_OW 88
// Say ( guyA , D1-A-16 ) ;
14404: LD_EXP 38
14408: PPUSH
14409: LD_STRING D1-A-16
14411: PPUSH
14412: CALL_OW 88
// Say ( guyB , D1-B-16 ) ;
14416: LD_EXP 39
14420: PPUSH
14421: LD_STRING D1-B-16
14423: PPUSH
14424: CALL_OW 88
// Say ( guyA , D1-A-17 ) ;
14428: LD_EXP 38
14432: PPUSH
14433: LD_STRING D1-A-17
14435: PPUSH
14436: CALL_OW 88
// Say ( guyB , D1-B-17 ) ;
14440: LD_EXP 39
14444: PPUSH
14445: LD_STRING D1-B-17
14447: PPUSH
14448: CALL_OW 88
// Say ( guyA , D1-A-18 ) ;
14452: LD_EXP 38
14456: PPUSH
14457: LD_STRING D1-A-18
14459: PPUSH
14460: CALL_OW 88
// SetSide ( us_dep1 , 1 ) ;
14464: LD_INT 35
14466: PPUSH
14467: LD_INT 1
14469: PPUSH
14470: CALL_OW 235
// ComEnterUnit ( [ guyA , guyB ] , us_dep1 ) ;
14474: LD_EXP 38
14478: PUSH
14479: LD_EXP 39
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PPUSH
14488: LD_INT 35
14490: PPUSH
14491: CALL_OW 120
// repeat Wait ( 0 0$0.1 ) ;
14495: LD_INT 4
14497: PPUSH
14498: CALL_OW 67
// until IsInUnit ( guyA ) ;
14502: LD_EXP 38
14506: PPUSH
14507: CALL_OW 310
14511: IFFALSE 14495
// Wait ( 0 0$02 ) ;
14513: LD_INT 70
14515: PPUSH
14516: CALL_OW 67
// Say ( guyA , D1-A-19 ) ;
14520: LD_EXP 38
14524: PPUSH
14525: LD_STRING D1-A-19
14527: PPUSH
14528: CALL_OW 88
// Say ( guyB , D1-B-19 ) ;
14532: LD_EXP 39
14536: PPUSH
14537: LD_STRING D1-B-19
14539: PPUSH
14540: CALL_OW 88
// Say ( guyA , D1-A-20 ) ;
14544: LD_EXP 38
14548: PPUSH
14549: LD_STRING D1-A-20
14551: PPUSH
14552: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
14556: LD_INT 10
14558: PPUSH
14559: CALL_OW 67
// Say ( guyB , D1-B-20 ) ;
14563: LD_EXP 39
14567: PPUSH
14568: LD_STRING D1-B-20
14570: PPUSH
14571: CALL_OW 88
// Say ( guyA , D1-A-21 ) ;
14575: LD_EXP 38
14579: PPUSH
14580: LD_STRING D1-A-21
14582: PPUSH
14583: CALL_OW 88
// Say ( guyB , D1-B-21 ) ;
14587: LD_EXP 39
14591: PPUSH
14592: LD_STRING D1-B-21
14594: PPUSH
14595: CALL_OW 88
// Say ( guyA , D1-A-22 ) ;
14599: LD_EXP 38
14603: PPUSH
14604: LD_STRING D1-A-22
14606: PPUSH
14607: CALL_OW 88
// Say ( guyB , D1-B-22 ) ;
14611: LD_EXP 39
14615: PPUSH
14616: LD_STRING D1-B-22
14618: PPUSH
14619: CALL_OW 88
// Say ( guyA , D1-A-23 ) ;
14623: LD_EXP 38
14627: PPUSH
14628: LD_STRING D1-A-23
14630: PPUSH
14631: CALL_OW 88
// Say ( guyB , D1-B-23 ) ;
14635: LD_EXP 39
14639: PPUSH
14640: LD_STRING D1-B-23
14642: PPUSH
14643: CALL_OW 88
// Say ( guyA , D1-A-24 ) ;
14647: LD_EXP 38
14651: PPUSH
14652: LD_STRING D1-A-24
14654: PPUSH
14655: CALL_OW 88
// InGameOff ;
14659: CALL_OW 9
// ChangeMissionObjectives ( M_main ) ;
14663: LD_STRING M_main
14665: PPUSH
14666: CALL_OW 337
// ChangeSideFog ( 4 , 1 ) ;
14670: LD_INT 4
14672: PPUSH
14673: LD_INT 1
14675: PPUSH
14676: CALL_OW 343
// game_status := true ;
14680: LD_ADDR_EXP 29
14684: PUSH
14685: LD_INT 1
14687: ST_TO_ADDR
// end ;
14688: LD_VAR 0 1
14692: RET
// every 0 0$01 trigger GetLabs ( 1 ) > 0 do
14693: LD_INT 1
14695: PPUSH
14696: CALL 6446 0 1
14700: PUSH
14701: LD_INT 0
14703: GREATER
14704: IFFALSE 14810
14706: GO 14708
14708: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
14709: LD_INT 35
14711: PPUSH
14712: CALL_OW 67
// until BuildingStatus ( GetLabs ( 1 ) [ 1 ] ) <> bs_build ;
14716: LD_INT 1
14718: PPUSH
14719: CALL 6446 0 1
14723: PUSH
14724: LD_INT 1
14726: ARRAY
14727: PPUSH
14728: CALL_OW 461
14732: PUSH
14733: LD_INT 1
14735: NONEQUAL
14736: IFFALSE 14709
// if IsLive ( guyA ) and IsLive ( guyB ) and not helps_arrive then
14738: LD_EXP 38
14742: PPUSH
14743: CALL_OW 300
14747: IFFALSE 14760
14749: PUSH
14750: LD_EXP 39
14754: PPUSH
14755: CALL_OW 300
14759: AND
14760: IFFALSE 14769
14762: PUSH
14763: LD_EXP 30
14767: NOT
14768: AND
14769: IFFALSE 14795
// begin Say ( guyA , DL-A-1 ) ;
14771: LD_EXP 38
14775: PPUSH
14776: LD_STRING DL-A-1
14778: PPUSH
14779: CALL_OW 88
// Say ( guyB , DL-B-1 ) ;
14783: LD_EXP 39
14787: PPUSH
14788: LD_STRING DL-B-1
14790: PPUSH
14791: CALL_OW 88
// end ; if not helps_can_arrive then
14795: LD_EXP 31
14799: NOT
14800: IFFALSE 14810
// helps_can_arrive := true ;
14802: LD_ADDR_EXP 31
14806: PUSH
14807: LD_INT 1
14809: ST_TO_ADDR
// end ;
14810: END
// every 0 0$01 trigger GetLabs ( 1 ) > 0 and IsLive ( guyA ) and IsLive ( guyB ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] ] ) = 0 and See ( 1 , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , guyA ) ) do
14811: LD_INT 1
14813: PPUSH
14814: CALL 6446 0 1
14818: PUSH
14819: LD_INT 0
14821: GREATER
14822: IFFALSE 14835
14824: PUSH
14825: LD_EXP 38
14829: PPUSH
14830: CALL_OW 300
14834: AND
14835: IFFALSE 14848
14837: PUSH
14838: LD_EXP 39
14842: PPUSH
14843: CALL_OW 300
14847: AND
14848: IFFALSE 14884
14850: PUSH
14851: LD_INT 22
14853: PUSH
14854: LD_INT 1
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 25
14863: PUSH
14864: LD_INT 12
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PPUSH
14875: CALL_OW 69
14879: PUSH
14880: LD_INT 0
14882: EQUAL
14883: AND
14884: IFFALSE 14920
14886: PUSH
14887: LD_INT 1
14889: PPUSH
14890: LD_INT 25
14892: PUSH
14893: LD_INT 12
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PPUSH
14900: CALL_OW 69
14904: PPUSH
14905: LD_EXP 38
14909: PPUSH
14910: CALL_OW 74
14914: PPUSH
14915: CALL_OW 292
14919: AND
14920: IFFALSE 14961
14922: GO 14924
14924: DISABLE
// begin Say ( guyA , DA-A-1 ) ;
14925: LD_EXP 38
14929: PPUSH
14930: LD_STRING DA-A-1
14932: PPUSH
14933: CALL_OW 88
// Say ( guyB , DA-B-1 ) ;
14937: LD_EXP 39
14941: PPUSH
14942: LD_STRING DA-B-1
14944: PPUSH
14945: CALL_OW 88
// Say ( guyA , DA-A-2 ) ;
14949: LD_EXP 38
14953: PPUSH
14954: LD_STRING DA-A-2
14956: PPUSH
14957: CALL_OW 88
// end ;
14961: END
// every 0 0$01 trigger game_status and GetDistUnitArea ( guyA , forest_path ) < 7 do
14962: LD_EXP 29
14966: IFFALSE 14986
14968: PUSH
14969: LD_EXP 38
14973: PPUSH
14974: LD_INT 6
14976: PPUSH
14977: CALL_OW 299
14981: PUSH
14982: LD_INT 7
14984: LESS
14985: AND
14986: IFFALSE 15039
14988: GO 14990
14990: DISABLE
// begin CenterNowOnXY ( 117 , 50 ) ;
14991: LD_INT 117
14993: PPUSH
14994: LD_INT 50
14996: PPUSH
14997: CALL_OW 86
// Say ( GetHuman ( 1 ) [ 2 ] , D5-A-1 ) ;
15001: LD_INT 1
15003: PPUSH
15004: CALL 10113 0 1
15008: PUSH
15009: LD_INT 2
15011: ARRAY
15012: PPUSH
15013: LD_STRING D5-A-1
15015: PPUSH
15016: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D5-B-1 ) ;
15020: LD_INT 1
15022: PPUSH
15023: CALL 10113 0 1
15027: PUSH
15028: LD_INT 1
15030: ARRAY
15031: PPUSH
15032: LD_STRING D5-B-1
15034: PPUSH
15035: CALL_OW 88
// end ;
15039: END
// every 0 0$01 trigger FilterUnitsInArea ( river , [ f_side , 1 ] ) > 0 do
15040: LD_INT 7
15042: PPUSH
15043: LD_INT 22
15045: PUSH
15046: LD_INT 1
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PPUSH
15053: CALL_OW 70
15057: PUSH
15058: LD_INT 0
15060: GREATER
15061: IFFALSE 15206
15063: GO 15065
15065: DISABLE
// begin Wait ( 0 0$03 ) ;
15066: LD_INT 105
15068: PPUSH
15069: CALL_OW 67
// DialogueOn ;
15073: CALL_OW 6
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-1 ) ;
15077: LD_INT 1
15079: PPUSH
15080: CALL 10113 0 1
15084: PUSH
15085: LD_INT 1
15087: ARRAY
15088: PPUSH
15089: LD_STRING D6-A-1
15091: PPUSH
15092: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-1 ) ;
15096: LD_INT 1
15098: PPUSH
15099: CALL 10113 0 1
15103: PUSH
15104: LD_INT 2
15106: ARRAY
15107: PPUSH
15108: LD_STRING D6-B-1
15110: PPUSH
15111: CALL_OW 88
// PlaceSeeing ( 95 , 8 , 1 , 20 ) ;
15115: LD_INT 95
15117: PPUSH
15118: LD_INT 8
15120: PPUSH
15121: LD_INT 1
15123: PPUSH
15124: LD_INT 20
15126: PPUSH
15127: CALL_OW 330
// DWait ( 0 0$0.3 ) ;
15131: LD_INT 10
15133: PPUSH
15134: CALL_OW 68
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-2 ) ;
15138: LD_INT 1
15140: PPUSH
15141: CALL 10113 0 1
15145: PUSH
15146: LD_INT 1
15148: ARRAY
15149: PPUSH
15150: LD_STRING D6-A-2
15152: PPUSH
15153: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D6-B-2 ) ;
15157: LD_INT 1
15159: PPUSH
15160: CALL 10113 0 1
15164: PUSH
15165: LD_INT 2
15167: ARRAY
15168: PPUSH
15169: LD_STRING D6-B-2
15171: PPUSH
15172: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 1 ] , D6-A-3 ) ;
15176: LD_INT 1
15178: PPUSH
15179: CALL 10113 0 1
15183: PUSH
15184: LD_INT 1
15186: ARRAY
15187: PPUSH
15188: LD_STRING D6-A-3
15190: PPUSH
15191: CALL_OW 88
// DialogueOff ;
15195: CALL_OW 7
// ChangeMissionObjectives ( M_base ) ;
15199: LD_STRING M_base
15201: PPUSH
15202: CALL_OW 337
// end ;
15206: END
// every 0 0$01 trigger not helps_arrive and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) > 0 do
15207: LD_EXP 30
15211: NOT
15212: IFFALSE 15248
15214: PUSH
15215: LD_INT 22
15217: PUSH
15218: LD_INT 3
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: LD_INT 21
15227: PUSH
15228: LD_INT 2
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PPUSH
15239: CALL_OW 69
15243: PUSH
15244: LD_INT 0
15246: GREATER
15247: AND
15248: IFFALSE 15381
15250: GO 15252
15252: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15253: LD_INT 35
15255: PPUSH
15256: CALL_OW 67
// until GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , GetHuman ( 1 ) [ 1 ] ) , GetHuman ( 1 ) [ 1 ] ) < 7 ;
15260: LD_INT 22
15262: PUSH
15263: LD_INT 3
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 21
15272: PUSH
15273: LD_INT 2
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PPUSH
15284: CALL_OW 69
15288: PPUSH
15289: LD_INT 1
15291: PPUSH
15292: CALL 10113 0 1
15296: PUSH
15297: LD_INT 1
15299: ARRAY
15300: PPUSH
15301: CALL_OW 74
15305: PPUSH
15306: LD_INT 1
15308: PPUSH
15309: CALL 10113 0 1
15313: PUSH
15314: LD_INT 1
15316: ARRAY
15317: PPUSH
15318: CALL_OW 296
15322: PUSH
15323: LD_INT 7
15325: LESS
15326: IFFALSE 15253
// Say ( GetHuman ( 1 ) [ 1 ] , DR-A-1 ) ;
15328: LD_INT 1
15330: PPUSH
15331: CALL 10113 0 1
15335: PUSH
15336: LD_INT 1
15338: ARRAY
15339: PPUSH
15340: LD_STRING DR-A-1
15342: PPUSH
15343: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , DR-B-1 ) ;
15347: LD_INT 1
15349: PPUSH
15350: CALL 10113 0 1
15354: PUSH
15355: LD_INT 2
15357: ARRAY
15358: PPUSH
15359: LD_STRING DR-B-1
15361: PPUSH
15362: CALL_OW 88
// Wait ( 3 3$00 ) ;
15366: LD_INT 6300
15368: PPUSH
15369: CALL_OW 67
// ru_spotted := true ;
15373: LD_ADDR_EXP 16
15377: PUSH
15378: LD_INT 1
15380: ST_TO_ADDR
// end ;
15381: END
// every 0 0$01 trigger not IsLive ( us_dep1 ) do
15382: LD_INT 35
15384: PPUSH
15385: CALL_OW 300
15389: NOT
15390: IFFALSE 15414
15392: GO 15394
15394: DISABLE
// Say ( GetHuman ( 1 ) [ 1 ] , DDR-A-1 ) ;
15395: LD_INT 1
15397: PPUSH
15398: CALL 10113 0 1
15402: PUSH
15403: LD_INT 1
15405: ARRAY
15406: PPUSH
15407: LD_STRING DDR-A-1
15409: PPUSH
15410: CALL_OW 88
15414: END
// every 0 0$05 trigger GetBuilding ( 1 , b_siberite_mine ) do
15415: LD_INT 1
15417: PPUSH
15418: LD_INT 30
15420: PPUSH
15421: CALL 6297 0 2
15425: IFFALSE 15507
15427: GO 15429
15429: DISABLE
// begin repeat Wait ( 0 0$01 ) ;
15430: LD_INT 35
15432: PPUSH
15433: CALL_OW 67
// until BuildingStatus ( GetBuilding ( 1 , b_siberite_mine ) [ 1 ] ) <> bs_build ;
15437: LD_INT 1
15439: PPUSH
15440: LD_INT 30
15442: PPUSH
15443: CALL 6297 0 2
15447: PUSH
15448: LD_INT 1
15450: ARRAY
15451: PPUSH
15452: CALL_OW 461
15456: PUSH
15457: LD_INT 1
15459: NONEQUAL
15460: IFFALSE 15430
// Say ( GetHuman ( 1 ) [ 1 ] , D8-A-1 ) ;
15462: LD_INT 1
15464: PPUSH
15465: CALL 10113 0 1
15469: PUSH
15470: LD_INT 1
15472: ARRAY
15473: PPUSH
15474: LD_STRING D8-A-1
15476: PPUSH
15477: CALL_OW 88
// Say ( GetHuman ( 1 ) [ 2 ] , D8-B-1 ) ;
15481: LD_INT 1
15483: PPUSH
15484: CALL 10113 0 1
15488: PUSH
15489: LD_INT 2
15491: ARRAY
15492: PPUSH
15493: LD_STRING D8-B-1
15495: PPUSH
15496: CALL_OW 88
// ChangeMissionObjectives ( M_mineok ) ;
15500: LD_STRING M_mineok
15502: PPUSH
15503: CALL_OW 337
// end ;
15507: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) > 1 or ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] , [ f_not , [ f_constructed ] ] ] ) = 1 and not IsLive ( us_dep1 ) ) do
15508: LD_INT 22
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 30
15520: PUSH
15521: LD_INT 0
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: LD_INT 57
15533: PUSH
15534: EMPTY
15535: LIST
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: LIST
15545: PPUSH
15546: CALL_OW 69
15550: PUSH
15551: LD_INT 1
15553: GREATER
15554: IFTRUE 15616
15556: PUSH
15557: LD_INT 22
15559: PUSH
15560: LD_INT 1
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 30
15569: PUSH
15570: LD_INT 0
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 3
15579: PUSH
15580: LD_INT 57
15582: PUSH
15583: EMPTY
15584: LIST
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: LIST
15594: PPUSH
15595: CALL_OW 69
15599: PUSH
15600: LD_INT 1
15602: EQUAL
15603: IFFALSE 15615
15605: PUSH
15606: LD_INT 35
15608: PPUSH
15609: CALL_OW 300
15613: NOT
15614: AND
15615: OR
15616: IFFALSE 15668
15618: GO 15620
15620: DISABLE
// begin Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , D7-A-1 ) ;
15621: LD_INT 22
15623: PUSH
15624: LD_INT 1
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 25
15633: PUSH
15634: LD_INT 2
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PPUSH
15645: CALL_OW 69
15649: PUSH
15650: LD_INT 1
15652: ARRAY
15653: PPUSH
15654: LD_STRING D7-A-1
15656: PPUSH
15657: CALL_OW 88
// ChangeMissionObjectives ( M_baseok ) ;
15661: LD_STRING M_baseok
15663: PPUSH
15664: CALL_OW 337
// end ;
15668: END
// every 0 0$01 trigger mine_ck do
15669: LD_EXP 35
15673: IFFALSE 15704
15675: GO 15677
15677: DISABLE
// begin Say ( GetHuman ( 1 ) [ 1 ] , D9-A-1 ) ;
15678: LD_INT 1
15680: PPUSH
15681: CALL 10113 0 1
15685: PUSH
15686: LD_INT 1
15688: ARRAY
15689: PPUSH
15690: LD_STRING D9-A-1
15692: PPUSH
15693: CALL_OW 88
// ChangeMissionObjectives ( M_minedest ) ;
15697: LD_STRING M_minedest
15699: PPUSH
15700: CALL_OW 337
// end ;
15704: END
// every 7 7$00 trigger game_status do var time , i , un , r , to_veh ;
15705: LD_EXP 29
15709: IFFALSE 16215
15711: GO 15713
15713: DISABLE
15714: LD_INT 0
15716: PPUSH
15717: PPUSH
15718: PPUSH
15719: PPUSH
15720: PPUSH
// begin AddBetaSquad ( Difficulty ) ;
15721: LD_OWVAR 67
15725: PPUSH
15726: CALL 12020 0 1
// if not helps_can_arrive then
15730: LD_EXP 31
15734: NOT
15735: IFFALSE 15763
// begin SayRadio ( Beta_Squad [ 1 ] , DB-Delay ) ;
15737: LD_EXP 40
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PPUSH
15746: LD_STRING DB-Delay
15748: PPUSH
15749: CALL_OW 94
// time := 10 10$00 ;
15753: LD_ADDR_VAR 0 1
15757: PUSH
15758: LD_INT 21000
15760: ST_TO_ADDR
// end else
15761: GO 15771
// time := 3 3$00 ;
15763: LD_ADDR_VAR 0 1
15767: PUSH
15768: LD_INT 6300
15770: ST_TO_ADDR
// repeat begin time := time - 0 0$01 ;
15771: LD_ADDR_VAR 0 1
15775: PUSH
15776: LD_VAR 0 1
15780: PUSH
15781: LD_INT 35
15783: MINUS
15784: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
15785: LD_INT 35
15787: PPUSH
15788: CALL_OW 67
// end until time = 0 0$00 ;
15792: LD_VAR 0 1
15796: PUSH
15797: LD_INT 0
15799: EQUAL
15800: IFFALSE 15771
// helps_arrive := true ;
15802: LD_ADDR_EXP 30
15806: PUSH
15807: LD_INT 1
15809: ST_TO_ADDR
// if IsLive ( guyA ) then
15810: LD_EXP 38
15814: PPUSH
15815: CALL_OW 300
15819: IFFALSE 15833
// r := guyA else
15821: LD_ADDR_VAR 0 4
15825: PUSH
15826: LD_EXP 38
15830: ST_TO_ADDR
15831: GO 15843
// r := guyB ;
15833: LD_ADDR_VAR 0 4
15837: PUSH
15838: LD_EXP 39
15842: ST_TO_ADDR
// SayRadio ( Beta_Squad [ 1 ] , D2-A-1 ) ;
15843: LD_EXP 40
15847: PUSH
15848: LD_INT 1
15850: ARRAY
15851: PPUSH
15852: LD_STRING D2-A-1
15854: PPUSH
15855: CALL_OW 94
// Say ( r , D2-B-1 ) ;
15859: LD_VAR 0 4
15863: PPUSH
15864: LD_STRING D2-B-1
15866: PPUSH
15867: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-2 ) ;
15871: LD_EXP 40
15875: PUSH
15876: LD_INT 1
15878: ARRAY
15879: PPUSH
15880: LD_STRING D2-A-2
15882: PPUSH
15883: CALL_OW 94
// Say ( r , D2-B-2 ) ;
15887: LD_VAR 0 4
15891: PPUSH
15892: LD_STRING D2-B-2
15894: PPUSH
15895: CALL_OW 88
// SayRadio ( Beta_Squad [ 1 ] , D2-A-3 ) ;
15899: LD_EXP 40
15903: PUSH
15904: LD_INT 1
15906: ARRAY
15907: PPUSH
15908: LD_STRING D2-A-3
15910: PPUSH
15911: CALL_OW 94
// Say ( r , D2-B-3 ) ;
15915: LD_VAR 0 4
15919: PPUSH
15920: LD_STRING D2-B-3
15922: PPUSH
15923: CALL_OW 88
// to_veh := [ ] ;
15927: LD_ADDR_VAR 0 5
15931: PUSH
15932: EMPTY
15933: ST_TO_ADDR
// for i = 1 to Beta_Squad do
15934: LD_ADDR_VAR 0 2
15938: PUSH
15939: DOUBLE
15940: LD_INT 1
15942: DEC
15943: ST_TO_ADDR
15944: LD_EXP 40
15948: PUSH
15949: FOR_TO
15950: IFFALSE 16213
// begin if GetTag ( Beta_Squad [ i ] ) = 3 then
15952: LD_EXP 40
15956: PUSH
15957: LD_VAR 0 2
15961: ARRAY
15962: PPUSH
15963: CALL_OW 110
15967: PUSH
15968: LD_INT 3
15970: EQUAL
15971: IFFALSE 15997
// to_veh := to_veh ^ Beta_Squad [ i ] else
15973: LD_ADDR_VAR 0 5
15977: PUSH
15978: LD_VAR 0 5
15982: PUSH
15983: LD_EXP 40
15987: PUSH
15988: LD_VAR 0 2
15992: ARRAY
15993: ADD
15994: ST_TO_ADDR
15995: GO 16122
// if GetTag ( Beta_Squad [ i ] ) = 5 then
15997: LD_EXP 40
16001: PUSH
16002: LD_VAR 0 2
16006: ARRAY
16007: PPUSH
16008: CALL_OW 110
16012: PUSH
16013: LD_INT 5
16015: EQUAL
16016: IFFALSE 16101
// begin SetDir ( Beta_Squad [ i ] , 4 ) ;
16018: LD_EXP 40
16022: PUSH
16023: LD_VAR 0 2
16027: ARRAY
16028: PPUSH
16029: LD_INT 4
16031: PPUSH
16032: CALL_OW 233
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
16036: LD_EXP 40
16040: PUSH
16041: LD_VAR 0 2
16045: ARRAY
16046: PPUSH
16047: LD_INT 5
16049: PPUSH
16050: LD_INT 0
16052: PPUSH
16053: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Beta_Squad [ i ] ) ;
16057: LD_VAR 0 5
16061: PUSH
16062: LD_INT 1
16064: ARRAY
16065: PPUSH
16066: LD_EXP 40
16070: PUSH
16071: LD_VAR 0 2
16075: ARRAY
16076: PPUSH
16077: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16081: LD_ADDR_VAR 0 5
16085: PUSH
16086: LD_VAR 0 5
16090: PPUSH
16091: LD_INT 1
16093: PPUSH
16094: CALL_OW 3
16098: ST_TO_ADDR
// end else
16099: GO 16122
// PlaceUnitArea ( Beta_Squad [ i ] , road_vehicle , false ) ;
16101: LD_EXP 40
16105: PUSH
16106: LD_VAR 0 2
16110: ARRAY
16111: PPUSH
16112: LD_INT 5
16114: PPUSH
16115: LD_INT 0
16117: PPUSH
16118: CALL_OW 49
// ComMoveXY ( Beta_Squad [ i ] , 165 , 105 ) ;
16122: LD_EXP 40
16126: PUSH
16127: LD_VAR 0 2
16131: ARRAY
16132: PPUSH
16133: LD_INT 165
16135: PPUSH
16136: LD_INT 105
16138: PPUSH
16139: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16143: LD_INT 70
16145: PPUSH
16146: LD_INT 140
16148: PPUSH
16149: CALL_OW 12
16153: PPUSH
16154: CALL_OW 67
// SetSide ( Beta_Squad [ i ] , 1 ) ;
16158: LD_EXP 40
16162: PUSH
16163: LD_VAR 0 2
16167: ARRAY
16168: PPUSH
16169: LD_INT 1
16171: PPUSH
16172: CALL_OW 235
// if i = 1 then
16176: LD_VAR 0 2
16180: PUSH
16181: LD_INT 1
16183: EQUAL
16184: IFFALSE 16196
// CenterNowOnXY ( 168 , 109 ) ;
16186: LD_INT 168
16188: PPUSH
16189: LD_INT 109
16191: PPUSH
16192: CALL_OW 86
// ComStop ( Beta_Squad [ i ] ) ;
16196: LD_EXP 40
16200: PUSH
16201: LD_VAR 0 2
16205: ARRAY
16206: PPUSH
16207: CALL_OW 141
// end ;
16211: GO 15949
16213: POP
16214: POP
// end ;
16215: PPOPN 5
16217: END
// every 0 0$10 trigger helps_arrive do var i , to_veh ;
16218: LD_EXP 30
16222: IFFALSE 17251
16224: GO 16226
16226: DISABLE
16227: LD_INT 0
16229: PPUSH
16230: PPUSH
// begin Wait ( 5 5$00 ) ;
16231: LD_INT 10500
16233: PPUSH
16234: CALL_OW 67
// AddGammaSquad ( Difficulty ) ;
16238: LD_OWVAR 67
16242: PPUSH
16243: CALL 12709 0 1
// to_veh := [ ] ;
16247: LD_ADDR_VAR 0 2
16251: PUSH
16252: EMPTY
16253: ST_TO_ADDR
// for i = 1 to Gamma_Squad do
16254: LD_ADDR_VAR 0 1
16258: PUSH
16259: DOUBLE
16260: LD_INT 1
16262: DEC
16263: ST_TO_ADDR
16264: LD_EXP 41
16268: PUSH
16269: FOR_TO
16270: IFFALSE 16498
// begin if GetTag ( Gamma_Squad [ i ] ) = 3 then
16272: LD_EXP 41
16276: PUSH
16277: LD_VAR 0 1
16281: ARRAY
16282: PPUSH
16283: CALL_OW 110
16287: PUSH
16288: LD_INT 3
16290: EQUAL
16291: IFFALSE 16317
// to_veh := to_veh ^ Gamma_Squad [ i ] else
16293: LD_ADDR_VAR 0 2
16297: PUSH
16298: LD_VAR 0 2
16302: PUSH
16303: LD_EXP 41
16307: PUSH
16308: LD_VAR 0 1
16312: ARRAY
16313: ADD
16314: ST_TO_ADDR
16315: GO 16442
// if GetTag ( Gamma_Squad [ i ] ) = 5 then
16317: LD_EXP 41
16321: PUSH
16322: LD_VAR 0 1
16326: ARRAY
16327: PPUSH
16328: CALL_OW 110
16332: PUSH
16333: LD_INT 5
16335: EQUAL
16336: IFFALSE 16421
// begin SetDir ( Gamma_Squad [ i ] , 4 ) ;
16338: LD_EXP 41
16342: PUSH
16343: LD_VAR 0 1
16347: ARRAY
16348: PPUSH
16349: LD_INT 4
16351: PPUSH
16352: CALL_OW 233
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16356: LD_EXP 41
16360: PUSH
16361: LD_VAR 0 1
16365: ARRAY
16366: PPUSH
16367: LD_INT 5
16369: PPUSH
16370: LD_INT 0
16372: PPUSH
16373: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Gamma_Squad [ i ] ) ;
16377: LD_VAR 0 2
16381: PUSH
16382: LD_INT 1
16384: ARRAY
16385: PPUSH
16386: LD_EXP 41
16390: PUSH
16391: LD_VAR 0 1
16395: ARRAY
16396: PPUSH
16397: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16401: LD_ADDR_VAR 0 2
16405: PUSH
16406: LD_VAR 0 2
16410: PPUSH
16411: LD_INT 1
16413: PPUSH
16414: CALL_OW 3
16418: ST_TO_ADDR
// end else
16419: GO 16442
// PlaceUnitArea ( Gamma_Squad [ i ] , road_vehicle , false ) ;
16421: LD_EXP 41
16425: PUSH
16426: LD_VAR 0 1
16430: ARRAY
16431: PPUSH
16432: LD_INT 5
16434: PPUSH
16435: LD_INT 0
16437: PPUSH
16438: CALL_OW 49
// ComMoveXY ( Gamma_Squad [ i ] , 164 , 104 ) ;
16442: LD_EXP 41
16446: PUSH
16447: LD_VAR 0 1
16451: ARRAY
16452: PPUSH
16453: LD_INT 164
16455: PPUSH
16456: LD_INT 104
16458: PPUSH
16459: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16463: LD_INT 70
16465: PPUSH
16466: LD_INT 140
16468: PPUSH
16469: CALL_OW 12
16473: PPUSH
16474: CALL_OW 67
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16478: LD_EXP 41
16482: PUSH
16483: LD_VAR 0 1
16487: ARRAY
16488: PPUSH
16489: LD_INT 1
16491: PPUSH
16492: CALL_OW 235
// end ;
16496: GO 16269
16498: POP
16499: POP
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-1 ) ;
16500: LD_EXP 41
16504: PUSH
16505: LD_INT 1
16507: ARRAY
16508: PPUSH
16509: LD_STRING D3-A-1
16511: PPUSH
16512: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-1 ) ;
16516: LD_INT 1
16518: PPUSH
16519: CALL 10113 0 1
16523: PUSH
16524: LD_INT 1
16526: ARRAY
16527: PPUSH
16528: LD_STRING D3-B-1
16530: PPUSH
16531: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-2 ) ;
16535: LD_EXP 41
16539: PUSH
16540: LD_INT 1
16542: ARRAY
16543: PPUSH
16544: LD_STRING D3-A-2
16546: PPUSH
16547: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-2 ) ;
16551: LD_INT 1
16553: PPUSH
16554: CALL 10113 0 1
16558: PUSH
16559: LD_INT 1
16561: ARRAY
16562: PPUSH
16563: LD_STRING D3-B-2
16565: PPUSH
16566: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-3 ) ;
16570: LD_EXP 41
16574: PUSH
16575: LD_INT 1
16577: ARRAY
16578: PPUSH
16579: LD_STRING D3-A-3
16581: PPUSH
16582: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-3 ) ;
16586: LD_INT 1
16588: PPUSH
16589: CALL 10113 0 1
16593: PUSH
16594: LD_INT 1
16596: ARRAY
16597: PPUSH
16598: LD_STRING D3-B-3
16600: PPUSH
16601: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-4 ) ;
16605: LD_EXP 41
16609: PUSH
16610: LD_INT 1
16612: ARRAY
16613: PPUSH
16614: LD_STRING D3-A-4
16616: PPUSH
16617: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-4 ) ;
16621: LD_INT 1
16623: PPUSH
16624: CALL 10113 0 1
16628: PUSH
16629: LD_INT 1
16631: ARRAY
16632: PPUSH
16633: LD_STRING D3-B-4
16635: PPUSH
16636: CALL_OW 88
// SayRadio ( Gamma_Squad [ 1 ] , D3-A-5 ) ;
16640: LD_EXP 41
16644: PUSH
16645: LD_INT 1
16647: ARRAY
16648: PPUSH
16649: LD_STRING D3-A-5
16651: PPUSH
16652: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D3-B-5 ) ;
16656: LD_INT 1
16658: PPUSH
16659: CALL 10113 0 1
16663: PUSH
16664: LD_INT 1
16666: ARRAY
16667: PPUSH
16668: LD_STRING D3-B-5
16670: PPUSH
16671: CALL_OW 88
// for i = 1 to Gamma_Squad do
16675: LD_ADDR_VAR 0 1
16679: PUSH
16680: DOUBLE
16681: LD_INT 1
16683: DEC
16684: ST_TO_ADDR
16685: LD_EXP 41
16689: PUSH
16690: FOR_TO
16691: IFFALSE 16713
// SetSide ( Gamma_Squad [ i ] , 1 ) ;
16693: LD_EXP 41
16697: PUSH
16698: LD_VAR 0 1
16702: ARRAY
16703: PPUSH
16704: LD_INT 1
16706: PPUSH
16707: CALL_OW 235
16711: GO 16690
16713: POP
16714: POP
// Wait ( [ 3 3$00 , 5 5$00 , 5 5$30 ] [ Difficulty ] ) ;
16715: LD_INT 6300
16717: PUSH
16718: LD_INT 10500
16720: PUSH
16721: LD_INT 11550
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: PUSH
16729: LD_OWVAR 67
16733: ARRAY
16734: PPUSH
16735: CALL_OW 67
// AddZetaSquad ;
16739: CALL 13438 0 0
// Wait ( 0 0$10 ) ;
16743: LD_INT 350
16745: PPUSH
16746: CALL_OW 67
// to_veh := [ ] ;
16750: LD_ADDR_VAR 0 2
16754: PUSH
16755: EMPTY
16756: ST_TO_ADDR
// for i = 1 to Zeta_Squad do
16757: LD_ADDR_VAR 0 1
16761: PUSH
16762: DOUBLE
16763: LD_INT 1
16765: DEC
16766: ST_TO_ADDR
16767: LD_EXP 42
16771: PUSH
16772: FOR_TO
16773: IFFALSE 16983
// begin if GetTag ( Zeta_Squad [ i ] ) = 3 then
16775: LD_EXP 42
16779: PUSH
16780: LD_VAR 0 1
16784: ARRAY
16785: PPUSH
16786: CALL_OW 110
16790: PUSH
16791: LD_INT 3
16793: EQUAL
16794: IFFALSE 16820
// to_veh := to_veh ^ Zeta_Squad [ i ] else
16796: LD_ADDR_VAR 0 2
16800: PUSH
16801: LD_VAR 0 2
16805: PUSH
16806: LD_EXP 42
16810: PUSH
16811: LD_VAR 0 1
16815: ARRAY
16816: ADD
16817: ST_TO_ADDR
16818: GO 16945
// if GetTag ( Zeta_Squad [ i ] ) = 5 then
16820: LD_EXP 42
16824: PUSH
16825: LD_VAR 0 1
16829: ARRAY
16830: PPUSH
16831: CALL_OW 110
16835: PUSH
16836: LD_INT 5
16838: EQUAL
16839: IFFALSE 16924
// begin SetDir ( Zeta_Squad [ i ] , 4 ) ;
16841: LD_EXP 42
16845: PUSH
16846: LD_VAR 0 1
16850: ARRAY
16851: PPUSH
16852: LD_INT 4
16854: PPUSH
16855: CALL_OW 233
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16859: LD_EXP 42
16863: PUSH
16864: LD_VAR 0 1
16868: ARRAY
16869: PPUSH
16870: LD_INT 5
16872: PPUSH
16873: LD_INT 0
16875: PPUSH
16876: CALL_OW 49
// PlaceHumanInUnit ( to_veh [ 1 ] , Zeta_Squad [ i ] ) ;
16880: LD_VAR 0 2
16884: PUSH
16885: LD_INT 1
16887: ARRAY
16888: PPUSH
16889: LD_EXP 42
16893: PUSH
16894: LD_VAR 0 1
16898: ARRAY
16899: PPUSH
16900: CALL_OW 52
// to_veh := Delete ( to_veh , 1 ) ;
16904: LD_ADDR_VAR 0 2
16908: PUSH
16909: LD_VAR 0 2
16913: PPUSH
16914: LD_INT 1
16916: PPUSH
16917: CALL_OW 3
16921: ST_TO_ADDR
// end else
16922: GO 16945
// PlaceUnitArea ( Zeta_Squad [ i ] , road_vehicle , false ) ;
16924: LD_EXP 42
16928: PUSH
16929: LD_VAR 0 1
16933: ARRAY
16934: PPUSH
16935: LD_INT 5
16937: PPUSH
16938: LD_INT 0
16940: PPUSH
16941: CALL_OW 49
// ComMoveXY ( Zeta_Squad [ i ] , 165 , 105 ) ;
16945: LD_EXP 42
16949: PUSH
16950: LD_VAR 0 1
16954: ARRAY
16955: PPUSH
16956: LD_INT 165
16958: PPUSH
16959: LD_INT 105
16961: PPUSH
16962: CALL_OW 111
// Wait ( Rand ( 0 0$02 , 0 0$04 ) ) ;
16966: LD_INT 70
16968: PPUSH
16969: LD_INT 140
16971: PPUSH
16972: CALL_OW 12
16976: PPUSH
16977: CALL_OW 67
// end ;
16981: GO 16772
16983: POP
16984: POP
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-1 ) ;
16985: LD_EXP 42
16989: PUSH
16990: LD_INT 1
16992: ARRAY
16993: PPUSH
16994: LD_STRING D4-A-1
16996: PPUSH
16997: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-1 ) ;
17001: LD_INT 1
17003: PPUSH
17004: CALL 10113 0 1
17008: PUSH
17009: LD_INT 1
17011: ARRAY
17012: PPUSH
17013: LD_STRING D4-B-1
17015: PPUSH
17016: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-2 ) ;
17020: LD_EXP 42
17024: PUSH
17025: LD_INT 1
17027: ARRAY
17028: PPUSH
17029: LD_STRING D4-A-2
17031: PPUSH
17032: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-2 ) ;
17036: LD_INT 1
17038: PPUSH
17039: CALL 10113 0 1
17043: PUSH
17044: LD_INT 1
17046: ARRAY
17047: PPUSH
17048: LD_STRING D4-B-2
17050: PPUSH
17051: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-3 ) ;
17055: LD_EXP 42
17059: PUSH
17060: LD_INT 1
17062: ARRAY
17063: PPUSH
17064: LD_STRING D4-A-3
17066: PPUSH
17067: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-3 ) ;
17071: LD_INT 1
17073: PPUSH
17074: CALL 10113 0 1
17078: PUSH
17079: LD_INT 1
17081: ARRAY
17082: PPUSH
17083: LD_STRING D4-B-3
17085: PPUSH
17086: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-4 ) ;
17090: LD_EXP 42
17094: PUSH
17095: LD_INT 1
17097: ARRAY
17098: PPUSH
17099: LD_STRING D4-A-4
17101: PPUSH
17102: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-4 ) ;
17106: LD_INT 1
17108: PPUSH
17109: CALL 10113 0 1
17113: PUSH
17114: LD_INT 1
17116: ARRAY
17117: PPUSH
17118: LD_STRING D4-B-4
17120: PPUSH
17121: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-5 ) ;
17125: LD_EXP 42
17129: PUSH
17130: LD_INT 1
17132: ARRAY
17133: PPUSH
17134: LD_STRING D4-A-5
17136: PPUSH
17137: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-5 ) ;
17141: LD_INT 1
17143: PPUSH
17144: CALL 10113 0 1
17148: PUSH
17149: LD_INT 1
17151: ARRAY
17152: PPUSH
17153: LD_STRING D4-B-5
17155: PPUSH
17156: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-6 ) ;
17160: LD_EXP 42
17164: PUSH
17165: LD_INT 1
17167: ARRAY
17168: PPUSH
17169: LD_STRING D4-A-6
17171: PPUSH
17172: CALL_OW 94
// Say ( GetHuman ( 1 ) [ 1 ] , D4-B-6 ) ;
17176: LD_INT 1
17178: PPUSH
17179: CALL 10113 0 1
17183: PUSH
17184: LD_INT 1
17186: ARRAY
17187: PPUSH
17188: LD_STRING D4-B-6
17190: PPUSH
17191: CALL_OW 88
// SayRadio ( Zeta_Squad [ 1 ] , D4-A-7 ) ;
17195: LD_EXP 42
17199: PUSH
17200: LD_INT 1
17202: ARRAY
17203: PPUSH
17204: LD_STRING D4-A-7
17206: PPUSH
17207: CALL_OW 94
// for i = 1 to Zeta_Squad do
17211: LD_ADDR_VAR 0 1
17215: PUSH
17216: DOUBLE
17217: LD_INT 1
17219: DEC
17220: ST_TO_ADDR
17221: LD_EXP 42
17225: PUSH
17226: FOR_TO
17227: IFFALSE 17249
// SetSide ( Zeta_Squad [ i ] , 1 ) ;
17229: LD_EXP 42
17233: PUSH
17234: LD_VAR 0 1
17238: ARRAY
17239: PPUSH
17240: LD_INT 1
17242: PPUSH
17243: CALL_OW 235
17247: GO 17226
17249: POP
17250: POP
// end ;
17251: PPOPN 2
17253: END
// every 0 0$01 trigger FilterUnitsInArea ( rus_spot , [ f_side , your_side ] ) > 0 do
17254: LD_INT 11
17256: PPUSH
17257: LD_INT 22
17259: PUSH
17260: LD_OWVAR 2
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PPUSH
17269: CALL_OW 70
17273: PUSH
17274: LD_INT 0
17276: GREATER
17277: IFFALSE 17302
17279: GO 17281
17281: DISABLE
// begin Say ( guyA , D10-A-1 ) ;
17282: LD_EXP 38
17286: PPUSH
17287: LD_STRING D10-A-1
17289: PPUSH
17290: CALL_OW 88
// ru_spotted := true ;
17294: LD_ADDR_EXP 16
17298: PUSH
17299: LD_INT 1
17301: ST_TO_ADDR
// end ;
17302: END
// every 0 0$01 trigger IsDead ( guyA ) or IsDead ( guyB ) do
17303: LD_EXP 38
17307: PPUSH
17308: CALL_OW 301
17312: IFTRUE 17325
17314: PUSH
17315: LD_EXP 39
17319: PPUSH
17320: CALL_OW 301
17324: OR
17325: IFFALSE 17337
17327: GO 17329
17329: DISABLE
// begin YouLost ( DieP ) ;
17330: LD_STRING DieP
17332: PPUSH
17333: CALL_OW 104
// end ;
17337: END
// every 0 0$01 trigger FilterAllUnits ( [ f_weapon , us_siberium_rocket ] ) do
17338: LD_INT 34
17340: PUSH
17341: LD_INT 8
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PPUSH
17348: CALL_OW 69
17352: IFFALSE 17365
17354: GO 17356
17356: DISABLE
// sib_bomb_constructed := true ;
17357: LD_ADDR_EXP 36
17361: PUSH
17362: LD_INT 1
17364: ST_TO_ADDR
17365: END
// every 0 0$01 trigger game_status and FilterAllUnits ( [ f_side , 3 ] ) = 0 do var i ;
17366: LD_EXP 29
17370: IFFALSE 17392
17372: PUSH
17373: LD_INT 22
17375: PUSH
17376: LD_INT 3
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PPUSH
17383: CALL_OW 69
17387: PUSH
17388: LD_INT 0
17390: EQUAL
17391: AND
17392: IFFALSE 17597
17394: GO 17396
17396: DISABLE
17397: LD_INT 0
17399: PPUSH
// begin game_status := false ;
17400: LD_ADDR_EXP 29
17404: PUSH
17405: LD_INT 0
17407: ST_TO_ADDR
// if not depotConstructed then
17408: LD_EXP 2
17412: NOT
17413: IFFALSE 17422
// SetAchievement ( ACH_NODEPOT ) ;
17415: LD_STRING ACH_NODEPOT
17417: PPUSH
17418: CALL_OW 543
// if Difficulty = 3 then
17422: LD_OWVAR 67
17426: PUSH
17427: LD_INT 3
17429: EQUAL
17430: IFFALSE 17439
// SetAchievement ( ACH_HARD ) ;
17432: LD_STRING ACH_HARD
17434: PPUSH
17435: CALL_OW 543
// if ( ( tick / 35 ) / 60 ) < [ 70 , 60 , 50 ] [ Difficulty ] then
17439: LD_OWVAR 1
17443: PUSH
17444: LD_INT 35
17446: DIVREAL
17447: PUSH
17448: LD_INT 60
17450: DIVREAL
17451: PUSH
17452: LD_INT 70
17454: PUSH
17455: LD_INT 60
17457: PUSH
17458: LD_INT 50
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: PUSH
17466: LD_OWVAR 67
17470: ARRAY
17471: LESS
17472: IFFALSE 17486
// AddMedal ( play , 1 ) else
17474: LD_STRING play
17476: PPUSH
17477: LD_INT 1
17479: PPUSH
17480: CALL_OW 101
17484: GO 17497
// AddMedal ( play , - 1 ) ;
17486: LD_STRING play
17488: PPUSH
17489: LD_INT 1
17491: NEG
17492: PPUSH
17493: CALL_OW 101
// if sib_bomb_constructed then
17497: LD_EXP 36
17501: IFFALSE 17515
// AddMedal ( sibbomb , 1 ) else
17503: LD_STRING sibbomb
17505: PPUSH
17506: LD_INT 1
17508: PPUSH
17509: CALL_OW 101
17513: GO 17526
// AddMedal ( sibbomb , - 1 ) ;
17515: LD_STRING sibbomb
17517: PPUSH
17518: LD_INT 1
17520: NEG
17521: PPUSH
17522: CALL_OW 101
// if mine_constructed and not mine_ck then
17526: LD_EXP 37
17530: IFFALSE 17539
17532: PUSH
17533: LD_EXP 35
17537: NOT
17538: AND
17539: IFFALSE 17551
// AddMedal ( mine , 1 ) ;
17541: LD_STRING mine
17543: PPUSH
17544: LD_INT 1
17546: PPUSH
17547: CALL_OW 101
// if mine_ck then
17551: LD_EXP 35
17555: IFFALSE 17568
// AddMedal ( mine , - 1 ) ;
17557: LD_STRING mine
17559: PPUSH
17560: LD_INT 1
17562: NEG
17563: PPUSH
17564: CALL_OW 101
// if not mine_constructed then
17568: LD_EXP 37
17572: NOT
17573: IFFALSE 17586
// AddMedal ( mine , - 2 ) ;
17575: LD_STRING mine
17577: PPUSH
17578: LD_INT 2
17580: NEG
17581: PPUSH
17582: CALL_OW 101
// GiveMedals ( Main ) ;
17586: LD_STRING Main
17588: PPUSH
17589: CALL_OW 102
// YouWin ;
17593: CALL_OW 103
// end ; end_of_file
17597: PPOPN 1
17599: END
// every 0 0$03 trigger game_status do var time ;
17600: LD_EXP 29
17604: IFFALSE 17769
17606: GO 17608
17608: DISABLE
17609: LD_INT 0
17611: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 1 1$00 ] [ Difficulty ] ;
17612: LD_ADDR_VAR 0 1
17616: PUSH
17617: LD_INT 1050
17619: PUSH
17620: LD_INT 1575
17622: PUSH
17623: LD_INT 2100
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: PUSH
17631: LD_OWVAR 67
17635: ARRAY
17636: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$12 ) ) ;
17637: LD_VAR 0 1
17641: PUSH
17642: LD_INT 0
17644: PPUSH
17645: LD_INT 420
17647: PPUSH
17648: CALL_OW 12
17652: PLUS
17653: PPUSH
17654: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
17658: LD_INT 1
17660: PPUSH
17661: LD_INT 5
17663: PPUSH
17664: CALL_OW 12
17668: PPUSH
17669: LD_INT 1
17671: PPUSH
17672: CALL_OW 57
// Wait ( Rand ( 0 0$03 , 0 0$30 ) ) ;
17676: LD_INT 105
17678: PPUSH
17679: LD_INT 1050
17681: PPUSH
17682: CALL_OW 12
17686: PPUSH
17687: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 148 , 107 , 20 , true ) ;
17691: LD_INT 1
17693: PPUSH
17694: LD_INT 5
17696: PPUSH
17697: CALL_OW 12
17701: PPUSH
17702: LD_INT 148
17704: PPUSH
17705: LD_INT 107
17707: PPUSH
17708: LD_INT 20
17710: PPUSH
17711: LD_INT 1
17713: PPUSH
17714: CALL_OW 56
// if tick mod [ 21 21$00 , 18 18$00 , 16 16$00 ] [ Difficulty ] then
17718: LD_OWVAR 1
17722: PUSH
17723: LD_INT 44100
17725: PUSH
17726: LD_INT 37800
17728: PUSH
17729: LD_INT 33600
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: LIST
17736: PUSH
17737: LD_OWVAR 67
17741: ARRAY
17742: MOD
17743: IFFALSE 17759
// time := time + 0 0$20 ;
17745: LD_ADDR_VAR 0 1
17749: PUSH
17750: LD_VAR 0 1
17754: PUSH
17755: LD_INT 700
17757: PLUS
17758: ST_TO_ADDR
// end until game_status = false ;
17759: LD_EXP 29
17763: PUSH
17764: LD_INT 0
17766: EQUAL
17767: IFFALSE 17637
// end ;
17769: PPOPN 1
17771: END
// every 0 0$03 trigger game_status do var time ;
17772: LD_EXP 29
17776: IFFALSE 17930
17778: GO 17780
17780: DISABLE
17781: LD_INT 0
17783: PPUSH
// begin time := [ 0 0$20 , 0 0$25 , 0 0$40 ] [ Difficulty ] ;
17784: LD_ADDR_VAR 0 1
17788: PUSH
17789: LD_INT 700
17791: PUSH
17792: LD_INT 875
17794: PUSH
17795: LD_INT 1400
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: LIST
17802: PUSH
17803: LD_OWVAR 67
17807: ARRAY
17808: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17809: LD_VAR 0 1
17813: PUSH
17814: LD_INT 0
17816: PPUSH
17817: LD_INT 385
17819: PPUSH
17820: CALL_OW 12
17824: PLUS
17825: PPUSH
17826: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 102 , 6 , 25 , true ) ;
17830: LD_INT 1
17832: PPUSH
17833: LD_INT 5
17835: PPUSH
17836: CALL_OW 12
17840: PPUSH
17841: LD_INT 102
17843: PPUSH
17844: LD_INT 6
17846: PPUSH
17847: LD_INT 25
17849: PPUSH
17850: LD_INT 1
17852: PPUSH
17853: CALL_OW 56
// if tick mod [ 25 25$00 , 22 22$00 , 20 20$00 ] [ Difficulty ] then
17857: LD_OWVAR 1
17861: PUSH
17862: LD_INT 52500
17864: PUSH
17865: LD_INT 46200
17867: PUSH
17868: LD_INT 42000
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: LIST
17875: PUSH
17876: LD_OWVAR 67
17880: ARRAY
17881: MOD
17882: IFFALSE 17898
// time := time + 0 0$25 ;
17884: LD_ADDR_VAR 0 1
17888: PUSH
17889: LD_VAR 0 1
17893: PUSH
17894: LD_INT 875
17896: PLUS
17897: ST_TO_ADDR
// if tick mod 110 110$00 = 0 then
17898: LD_OWVAR 1
17902: PUSH
17903: LD_INT 231000
17905: MOD
17906: PUSH
17907: LD_INT 0
17909: EQUAL
17910: IFFALSE 17920
// time := 0 0$30 ;
17912: LD_ADDR_VAR 0 1
17916: PUSH
17917: LD_INT 1050
17919: ST_TO_ADDR
// end until game_status = false ;
17920: LD_EXP 29
17924: PUSH
17925: LD_INT 0
17927: EQUAL
17928: IFFALSE 17809
// end ;
17930: PPOPN 1
17932: END
// every 0 0$03 trigger game_status do var time ;
17933: LD_EXP 29
17937: IFFALSE 18073
17939: GO 17941
17941: DISABLE
17942: LD_INT 0
17944: PPUSH
// begin time := [ 0 0$30 , 0 0$45 , 0 0$50 ] [ Difficulty ] ;
17945: LD_ADDR_VAR 0 1
17949: PUSH
17950: LD_INT 1050
17952: PUSH
17953: LD_INT 1575
17955: PUSH
17956: LD_INT 1750
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: LIST
17963: PUSH
17964: LD_OWVAR 67
17968: ARRAY
17969: ST_TO_ADDR
// repeat begin Wait ( time + Rand ( 0 0$00 , 0 0$11 ) ) ;
17970: LD_VAR 0 1
17974: PUSH
17975: LD_INT 0
17977: PPUSH
17978: LD_INT 385
17980: PPUSH
17981: CALL_OW 12
17985: PLUS
17986: PPUSH
17987: CALL_OW 67
// CreateCratesXYR ( Rand ( 1 , 5 ) , 51 , 74 , 25 , true ) ;
17991: LD_INT 1
17993: PPUSH
17994: LD_INT 5
17996: PPUSH
17997: CALL_OW 12
18001: PPUSH
18002: LD_INT 51
18004: PPUSH
18005: LD_INT 74
18007: PPUSH
18008: LD_INT 25
18010: PPUSH
18011: LD_INT 1
18013: PPUSH
18014: CALL_OW 56
// if tick mod [ 40 40$00 , 50 50$00 , 65 65$00 ] [ Difficulty ] = 0 then
18018: LD_OWVAR 1
18022: PUSH
18023: LD_INT 84000
18025: PUSH
18026: LD_INT 105000
18028: PUSH
18029: LD_INT 136500
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: PUSH
18037: LD_OWVAR 67
18041: ARRAY
18042: MOD
18043: PUSH
18044: LD_INT 0
18046: EQUAL
18047: IFFALSE 18063
// time := time + 0 0$15 ;
18049: LD_ADDR_VAR 0 1
18053: PUSH
18054: LD_VAR 0 1
18058: PUSH
18059: LD_INT 525
18061: PLUS
18062: ST_TO_ADDR
// end until game_status = false ;
18063: LD_EXP 29
18067: PUSH
18068: LD_INT 0
18070: EQUAL
18071: IFFALSE 17970
// end ; end_of_file
18073: PPOPN 1
18075: END
// every 0 0$01 trigger not debug do
18076: LD_EXP 1
18080: NOT
18081: IFFALSE 18104
18083: GO 18085
18085: DISABLE
// begin enable ;
18086: ENABLE
// Display_Strings := [ #tick , tick ] ;
18087: LD_ADDR_OWVAR 47
18091: PUSH
18092: LD_STRING #tick
18094: PUSH
18095: LD_OWVAR 1
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: ST_TO_ADDR
// end ; end_of_file
18104: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
18105: LD_VAR 0 1
18109: PPUSH
18110: LD_VAR 0 2
18114: PPUSH
18115: CALL 35057 0 2
// if GetSide ( un ) = 3 and un in FilterAllUnits ( [ [ f_or , [ f_weapon , ru_heavy_gun ] , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ] ) then
18119: LD_VAR 0 1
18123: PPUSH
18124: CALL_OW 255
18128: PUSH
18129: LD_INT 3
18131: EQUAL
18132: IFFALSE 18188
18134: PUSH
18135: LD_VAR 0 1
18139: PUSH
18140: LD_INT 2
18142: PUSH
18143: LD_INT 34
18145: PUSH
18146: LD_INT 46
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 34
18155: PUSH
18156: LD_INT 47
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 34
18165: PUSH
18166: LD_INT 45
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: PUSH
18179: EMPTY
18180: LIST
18181: PPUSH
18182: CALL_OW 69
18186: IN
18187: AND
18188: IFFALSE 18206
// ru_reserve := ru_reserve ^ un ;
18190: LD_ADDR_EXP 9
18194: PUSH
18195: LD_EXP 9
18199: PUSH
18200: LD_VAR 0 1
18204: ADD
18205: ST_TO_ADDR
// if GetSide ( un ) = 3 and not GetWeapon ( un ) in [ ru_siberium_rocket , ru_crane ] then
18206: LD_VAR 0 1
18210: PPUSH
18211: CALL_OW 255
18215: PUSH
18216: LD_INT 3
18218: EQUAL
18219: IFFALSE 18244
18221: PUSH
18222: LD_VAR 0 1
18226: PPUSH
18227: CALL_OW 264
18231: PUSH
18232: LD_INT 48
18234: PUSH
18235: LD_INT 52
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: IN
18242: NOT
18243: AND
18244: IFFALSE 18261
// ComMoveXY ( un , 65 , 60 ) ;
18246: LD_VAR 0 1
18250: PPUSH
18251: LD_INT 65
18253: PPUSH
18254: LD_INT 60
18256: PPUSH
18257: CALL_OW 111
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) then
18261: LD_VAR 0 1
18265: PUSH
18266: LD_INT 22
18268: PUSH
18269: LD_INT 3
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 34
18278: PUSH
18279: LD_INT 48
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PPUSH
18290: CALL_OW 69
18294: IN
18295: IFFALSE 18348
// if FilterUnitsInArea ( alt_base , [ f_side , 1 ] ) then
18297: LD_INT 12
18299: PPUSH
18300: LD_INT 22
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PPUSH
18310: CALL_OW 70
18314: IFFALSE 18333
// ComAttackPlace ( un , 98 , 10 ) else
18316: LD_VAR 0 1
18320: PPUSH
18321: LD_INT 98
18323: PPUSH
18324: LD_INT 10
18326: PPUSH
18327: CALL_OW 116
18331: GO 18348
// ComAttackPlace ( un , 134 , 99 ) ;
18333: LD_VAR 0 1
18337: PPUSH
18338: LD_INT 134
18340: PPUSH
18341: LD_INT 99
18343: PPUSH
18344: CALL_OW 116
// end ;
18348: PPOPN 2
18350: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL 34999 0 1
// if GetChassis ( un ) = 25 then
18360: LD_VAR 0 1
18364: PPUSH
18365: CALL_OW 265
18369: PUSH
18370: LD_INT 25
18372: EQUAL
18373: IFFALSE 18382
// SetAchievement ( ACH_BEH ) ;
18375: LD_STRING ACH_BEH
18377: PPUSH
18378: CALL_OW 543
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not GetBType ( un ) in [ b_depot , b_oil_mine , b_siberite_mine , b_oil_power ] then
18382: LD_VAR 0 1
18386: PUSH
18387: LD_INT 22
18389: PUSH
18390: LD_INT 3
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 21
18399: PUSH
18400: LD_INT 3
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PPUSH
18411: CALL_OW 69
18415: IN
18416: IFFALSE 18449
18418: PUSH
18419: LD_VAR 0 1
18423: PPUSH
18424: CALL_OW 266
18428: PUSH
18429: LD_INT 0
18431: PUSH
18432: LD_INT 29
18434: PUSH
18435: LD_INT 30
18437: PUSH
18438: LD_INT 26
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: IN
18447: NOT
18448: AND
18449: IFFALSE 18535
// begin ru_blist := ru_blist ^ GetBType ( un ) ;
18451: LD_ADDR_EXP 13
18455: PUSH
18456: LD_EXP 13
18460: PUSH
18461: LD_VAR 0 1
18465: PPUSH
18466: CALL_OW 266
18470: ADD
18471: ST_TO_ADDR
// ru_blist := ru_blist ^ GetX ( un ) ;
18472: LD_ADDR_EXP 13
18476: PUSH
18477: LD_EXP 13
18481: PUSH
18482: LD_VAR 0 1
18486: PPUSH
18487: CALL_OW 250
18491: ADD
18492: ST_TO_ADDR
// ru_blist := ru_blist ^ GetY ( un ) ;
18493: LD_ADDR_EXP 13
18497: PUSH
18498: LD_EXP 13
18502: PUSH
18503: LD_VAR 0 1
18507: PPUSH
18508: CALL_OW 251
18512: ADD
18513: ST_TO_ADDR
// ru_blist := ru_blist ^ GetDir ( un ) ;
18514: LD_ADDR_EXP 13
18518: PUSH
18519: LD_EXP 13
18523: PUSH
18524: LD_VAR 0 1
18528: PPUSH
18529: CALL_OW 254
18533: ADD
18534: ST_TO_ADDR
// end ; if un in ru_attack_list then
18535: LD_VAR 0 1
18539: PUSH
18540: LD_EXP 10
18544: IN
18545: IFFALSE 18563
// ru_attack_list := ru_attack_list diff un ;
18547: LD_ADDR_EXP 10
18551: PUSH
18552: LD_EXP 10
18556: PUSH
18557: LD_VAR 0 1
18561: DIFF
18562: ST_TO_ADDR
// if un in ru_protector then
18563: LD_VAR 0 1
18567: PUSH
18568: LD_EXP 17
18572: IN
18573: IFFALSE 18591
// ru_protector := ru_protector diff un ;
18575: LD_ADDR_EXP 17
18579: PUSH
18580: LD_EXP 17
18584: PUSH
18585: LD_VAR 0 1
18589: DIFF
18590: ST_TO_ADDR
// if GetBType ( un ) = b_siberite_mine and GetSide ( un ) = 1 then
18591: LD_VAR 0 1
18595: PPUSH
18596: CALL_OW 266
18600: PUSH
18601: LD_INT 30
18603: EQUAL
18604: IFFALSE 18621
18606: PUSH
18607: LD_VAR 0 1
18611: PPUSH
18612: CALL_OW 255
18616: PUSH
18617: LD_INT 1
18619: EQUAL
18620: AND
18621: IFFALSE 18631
// mine_ck := true ;
18623: LD_ADDR_EXP 35
18627: PUSH
18628: LD_INT 1
18630: ST_TO_ADDR
// end ;
18631: PPOPN 1
18633: END
// on BuildingComplete ( un ) do var i ;
18634: LD_INT 0
18636: PPUSH
// begin if GetSide ( un ) = 1 and GetBType ( un ) = b_depot then
18637: LD_VAR 0 1
18641: PPUSH
18642: CALL_OW 255
18646: PUSH
18647: LD_INT 1
18649: EQUAL
18650: IFFALSE 18667
18652: PUSH
18653: LD_VAR 0 1
18657: PPUSH
18658: CALL_OW 266
18662: PUSH
18663: LD_INT 0
18665: EQUAL
18666: AND
18667: IFFALSE 18677
// depotConstructed := true ;
18669: LD_ADDR_EXP 2
18673: PUSH
18674: LD_INT 1
18676: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) = b_siberite_mine then
18677: LD_VAR 0 1
18681: PPUSH
18682: CALL_OW 255
18686: PUSH
18687: LD_INT 1
18689: EQUAL
18690: IFFALSE 18707
18692: PUSH
18693: LD_VAR 0 1
18697: PPUSH
18698: CALL_OW 266
18702: PUSH
18703: LD_INT 30
18705: EQUAL
18706: AND
18707: IFFALSE 18717
// mine_constructed := true ;
18709: LD_ADDR_EXP 37
18713: PUSH
18714: LD_INT 1
18716: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetBType ( un ) = b_depot then
18717: LD_VAR 0 1
18721: PPUSH
18722: CALL_OW 255
18726: PUSH
18727: LD_INT 3
18729: EQUAL
18730: IFFALSE 18747
18732: PUSH
18733: LD_VAR 0 1
18737: PPUSH
18738: CALL_OW 266
18742: PUSH
18743: LD_INT 0
18745: EQUAL
18746: AND
18747: IFFALSE 18804
// begin for i = 1 to 2 do
18749: LD_ADDR_VAR 0 2
18753: PUSH
18754: DOUBLE
18755: LD_INT 1
18757: DEC
18758: ST_TO_ADDR
18759: LD_INT 2
18761: PUSH
18762: FOR_TO
18763: IFFALSE 18802
// begin ComExitBuilding ( ru_sold [ i ] ) ;
18765: LD_EXP 20
18769: PUSH
18770: LD_VAR 0 2
18774: ARRAY
18775: PPUSH
18776: CALL_OW 122
// AddComEnterUnit ( ru_sold [ i ] , un ) ;
18780: LD_EXP 20
18784: PUSH
18785: LD_VAR 0 2
18789: ARRAY
18790: PPUSH
18791: LD_VAR 0 1
18795: PPUSH
18796: CALL_OW 180
// end ;
18800: GO 18762
18802: POP
18803: POP
// end ; if GetSide ( un ) = 3 and GetBType ( un ) in ru_blist then
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL_OW 255
18813: PUSH
18814: LD_INT 3
18816: EQUAL
18817: IFFALSE 18836
18819: PUSH
18820: LD_VAR 0 1
18824: PPUSH
18825: CALL_OW 266
18829: PUSH
18830: LD_EXP 13
18834: IN
18835: AND
18836: IFFALSE 18876
// for i = 1 to 4 do
18838: LD_ADDR_VAR 0 2
18842: PUSH
18843: DOUBLE
18844: LD_INT 1
18846: DEC
18847: ST_TO_ADDR
18848: LD_INT 4
18850: PUSH
18851: FOR_TO
18852: IFFALSE 18874
// ru_blist := Delete ( ru_blist , 1 ) ;
18854: LD_ADDR_EXP 13
18858: PUSH
18859: LD_EXP 13
18863: PPUSH
18864: LD_INT 1
18866: PPUSH
18867: CALL_OW 3
18871: ST_TO_ADDR
18872: GO 18851
18874: POP
18875: POP
// end ;
18876: PPOPN 2
18878: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
18879: LD_VAR 0 1
18883: PPUSH
18884: LD_VAR 0 2
18888: PPUSH
18889: LD_VAR 0 3
18893: PPUSH
18894: CALL 35033 0 3
// end ;
18898: PPOPN 3
18900: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL 35041 0 1
// end ; end_of_file end_of_file
18910: PPOPN 1
18912: END
// export globalGameSaveCounter ; every 0 0$1 do
18913: GO 18915
18915: DISABLE
// begin enable ;
18916: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18917: LD_STRING updateTimer(
18919: PUSH
18920: LD_OWVAR 1
18924: STR
18925: PUSH
18926: LD_STRING );
18928: STR
18929: PPUSH
18930: CALL_OW 559
// end ;
18934: END
// every 0 0$1 do
18935: GO 18937
18937: DISABLE
// begin globalGameSaveCounter := 0 ;
18938: LD_ADDR_EXP 43
18942: PUSH
18943: LD_INT 0
18945: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
18946: LD_STRING setGameSaveCounter(0)
18948: PPUSH
18949: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
18953: LD_STRING initStreamRollete();
18955: PPUSH
18956: CALL_OW 559
// InitStreamMode ;
18960: CALL 20312 0 0
// DefineStreamItems ( false ) ;
18964: LD_INT 0
18966: PPUSH
18967: CALL 20776 0 1
// end ;
18971: END
// export function SOS_MapStart ( ) ; begin
18972: LD_INT 0
18974: PPUSH
// if streamModeActive then
18975: LD_EXP 44
18979: IFFALSE 18988
// DefineStreamItems ( true ) ;
18981: LD_INT 1
18983: PPUSH
18984: CALL 20776 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
18988: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
18990: PPUSH
18991: CALL_OW 559
// UpdateLuaVariables ( ) ;
18995: CALL 19012 0 0
// UpdateFactoryWaypoints ( ) ;
18999: CALL 33898 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19003: CALL 34150 0 0
// end ;
19007: LD_VAR 0 1
19011: RET
// function UpdateLuaVariables ( ) ; begin
19012: LD_INT 0
19014: PPUSH
// if globalGameSaveCounter then
19015: LD_EXP 43
19019: IFFALSE 19053
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19021: LD_ADDR_EXP 43
19025: PUSH
19026: LD_EXP 43
19030: PPUSH
19031: CALL 81046 0 1
19035: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19036: LD_STRING setGameSaveCounter(
19038: PUSH
19039: LD_EXP 43
19043: STR
19044: PUSH
19045: LD_STRING )
19047: STR
19048: PPUSH
19049: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19053: LD_STRING setGameDifficulty(
19055: PUSH
19056: LD_OWVAR 67
19060: STR
19061: PUSH
19062: LD_STRING )
19064: STR
19065: PPUSH
19066: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19070: LD_STRING displayDifficulty(
19072: PUSH
19073: LD_OWVAR 67
19077: STR
19078: PUSH
19079: LD_STRING )
19081: STR
19082: PPUSH
19083: CALL_OW 559
// end ;
19087: LD_VAR 0 1
19091: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19092: LD_INT 0
19094: PPUSH
// if p2 = stream_mode then
19095: LD_VAR 0 2
19099: PUSH
19100: LD_INT 100
19102: EQUAL
19103: IFFALSE 20106
// begin if not StreamModeActive then
19105: LD_EXP 44
19109: NOT
19110: IFFALSE 19120
// StreamModeActive := true ;
19112: LD_ADDR_EXP 44
19116: PUSH
19117: LD_INT 1
19119: ST_TO_ADDR
// if p3 = 0 then
19120: LD_VAR 0 3
19124: PUSH
19125: LD_INT 0
19127: EQUAL
19128: IFFALSE 19134
// InitStreamMode ;
19130: CALL 20312 0 0
// if p3 = 1 then
19134: LD_VAR 0 3
19138: PUSH
19139: LD_INT 1
19141: EQUAL
19142: IFFALSE 19152
// sRocket := true ;
19144: LD_ADDR_EXP 49
19148: PUSH
19149: LD_INT 1
19151: ST_TO_ADDR
// if p3 = 2 then
19152: LD_VAR 0 3
19156: PUSH
19157: LD_INT 2
19159: EQUAL
19160: IFFALSE 19170
// sSpeed := true ;
19162: LD_ADDR_EXP 48
19166: PUSH
19167: LD_INT 1
19169: ST_TO_ADDR
// if p3 = 3 then
19170: LD_VAR 0 3
19174: PUSH
19175: LD_INT 3
19177: EQUAL
19178: IFFALSE 19188
// sEngine := true ;
19180: LD_ADDR_EXP 50
19184: PUSH
19185: LD_INT 1
19187: ST_TO_ADDR
// if p3 = 4 then
19188: LD_VAR 0 3
19192: PUSH
19193: LD_INT 4
19195: EQUAL
19196: IFFALSE 19206
// sSpec := true ;
19198: LD_ADDR_EXP 47
19202: PUSH
19203: LD_INT 1
19205: ST_TO_ADDR
// if p3 = 5 then
19206: LD_VAR 0 3
19210: PUSH
19211: LD_INT 5
19213: EQUAL
19214: IFFALSE 19224
// sLevel := true ;
19216: LD_ADDR_EXP 51
19220: PUSH
19221: LD_INT 1
19223: ST_TO_ADDR
// if p3 = 6 then
19224: LD_VAR 0 3
19228: PUSH
19229: LD_INT 6
19231: EQUAL
19232: IFFALSE 19242
// sArmoury := true ;
19234: LD_ADDR_EXP 52
19238: PUSH
19239: LD_INT 1
19241: ST_TO_ADDR
// if p3 = 7 then
19242: LD_VAR 0 3
19246: PUSH
19247: LD_INT 7
19249: EQUAL
19250: IFFALSE 19260
// sRadar := true ;
19252: LD_ADDR_EXP 53
19256: PUSH
19257: LD_INT 1
19259: ST_TO_ADDR
// if p3 = 8 then
19260: LD_VAR 0 3
19264: PUSH
19265: LD_INT 8
19267: EQUAL
19268: IFFALSE 19278
// sBunker := true ;
19270: LD_ADDR_EXP 54
19274: PUSH
19275: LD_INT 1
19277: ST_TO_ADDR
// if p3 = 9 then
19278: LD_VAR 0 3
19282: PUSH
19283: LD_INT 9
19285: EQUAL
19286: IFFALSE 19296
// sHack := true ;
19288: LD_ADDR_EXP 55
19292: PUSH
19293: LD_INT 1
19295: ST_TO_ADDR
// if p3 = 10 then
19296: LD_VAR 0 3
19300: PUSH
19301: LD_INT 10
19303: EQUAL
19304: IFFALSE 19314
// sFire := true ;
19306: LD_ADDR_EXP 56
19310: PUSH
19311: LD_INT 1
19313: ST_TO_ADDR
// if p3 = 11 then
19314: LD_VAR 0 3
19318: PUSH
19319: LD_INT 11
19321: EQUAL
19322: IFFALSE 19332
// sRefresh := true ;
19324: LD_ADDR_EXP 57
19328: PUSH
19329: LD_INT 1
19331: ST_TO_ADDR
// if p3 = 12 then
19332: LD_VAR 0 3
19336: PUSH
19337: LD_INT 12
19339: EQUAL
19340: IFFALSE 19350
// sExp := true ;
19342: LD_ADDR_EXP 58
19346: PUSH
19347: LD_INT 1
19349: ST_TO_ADDR
// if p3 = 13 then
19350: LD_VAR 0 3
19354: PUSH
19355: LD_INT 13
19357: EQUAL
19358: IFFALSE 19368
// sDepot := true ;
19360: LD_ADDR_EXP 59
19364: PUSH
19365: LD_INT 1
19367: ST_TO_ADDR
// if p3 = 14 then
19368: LD_VAR 0 3
19372: PUSH
19373: LD_INT 14
19375: EQUAL
19376: IFFALSE 19386
// sFlag := true ;
19378: LD_ADDR_EXP 60
19382: PUSH
19383: LD_INT 1
19385: ST_TO_ADDR
// if p3 = 15 then
19386: LD_VAR 0 3
19390: PUSH
19391: LD_INT 15
19393: EQUAL
19394: IFFALSE 19404
// sKamikadze := true ;
19396: LD_ADDR_EXP 68
19400: PUSH
19401: LD_INT 1
19403: ST_TO_ADDR
// if p3 = 16 then
19404: LD_VAR 0 3
19408: PUSH
19409: LD_INT 16
19411: EQUAL
19412: IFFALSE 19422
// sTroll := true ;
19414: LD_ADDR_EXP 69
19418: PUSH
19419: LD_INT 1
19421: ST_TO_ADDR
// if p3 = 17 then
19422: LD_VAR 0 3
19426: PUSH
19427: LD_INT 17
19429: EQUAL
19430: IFFALSE 19440
// sSlow := true ;
19432: LD_ADDR_EXP 70
19436: PUSH
19437: LD_INT 1
19439: ST_TO_ADDR
// if p3 = 18 then
19440: LD_VAR 0 3
19444: PUSH
19445: LD_INT 18
19447: EQUAL
19448: IFFALSE 19458
// sLack := true ;
19450: LD_ADDR_EXP 71
19454: PUSH
19455: LD_INT 1
19457: ST_TO_ADDR
// if p3 = 19 then
19458: LD_VAR 0 3
19462: PUSH
19463: LD_INT 19
19465: EQUAL
19466: IFFALSE 19476
// sTank := true ;
19468: LD_ADDR_EXP 73
19472: PUSH
19473: LD_INT 1
19475: ST_TO_ADDR
// if p3 = 20 then
19476: LD_VAR 0 3
19480: PUSH
19481: LD_INT 20
19483: EQUAL
19484: IFFALSE 19494
// sRemote := true ;
19486: LD_ADDR_EXP 74
19490: PUSH
19491: LD_INT 1
19493: ST_TO_ADDR
// if p3 = 21 then
19494: LD_VAR 0 3
19498: PUSH
19499: LD_INT 21
19501: EQUAL
19502: IFFALSE 19512
// sPowell := true ;
19504: LD_ADDR_EXP 75
19508: PUSH
19509: LD_INT 1
19511: ST_TO_ADDR
// if p3 = 22 then
19512: LD_VAR 0 3
19516: PUSH
19517: LD_INT 22
19519: EQUAL
19520: IFFALSE 19530
// sTeleport := true ;
19522: LD_ADDR_EXP 78
19526: PUSH
19527: LD_INT 1
19529: ST_TO_ADDR
// if p3 = 23 then
19530: LD_VAR 0 3
19534: PUSH
19535: LD_INT 23
19537: EQUAL
19538: IFFALSE 19548
// sOilTower := true ;
19540: LD_ADDR_EXP 80
19544: PUSH
19545: LD_INT 1
19547: ST_TO_ADDR
// if p3 = 24 then
19548: LD_VAR 0 3
19552: PUSH
19553: LD_INT 24
19555: EQUAL
19556: IFFALSE 19566
// sShovel := true ;
19558: LD_ADDR_EXP 81
19562: PUSH
19563: LD_INT 1
19565: ST_TO_ADDR
// if p3 = 25 then
19566: LD_VAR 0 3
19570: PUSH
19571: LD_INT 25
19573: EQUAL
19574: IFFALSE 19584
// sSheik := true ;
19576: LD_ADDR_EXP 82
19580: PUSH
19581: LD_INT 1
19583: ST_TO_ADDR
// if p3 = 26 then
19584: LD_VAR 0 3
19588: PUSH
19589: LD_INT 26
19591: EQUAL
19592: IFFALSE 19602
// sEarthquake := true ;
19594: LD_ADDR_EXP 84
19598: PUSH
19599: LD_INT 1
19601: ST_TO_ADDR
// if p3 = 27 then
19602: LD_VAR 0 3
19606: PUSH
19607: LD_INT 27
19609: EQUAL
19610: IFFALSE 19620
// sAI := true ;
19612: LD_ADDR_EXP 85
19616: PUSH
19617: LD_INT 1
19619: ST_TO_ADDR
// if p3 = 28 then
19620: LD_VAR 0 3
19624: PUSH
19625: LD_INT 28
19627: EQUAL
19628: IFFALSE 19638
// sCargo := true ;
19630: LD_ADDR_EXP 88
19634: PUSH
19635: LD_INT 1
19637: ST_TO_ADDR
// if p3 = 29 then
19638: LD_VAR 0 3
19642: PUSH
19643: LD_INT 29
19645: EQUAL
19646: IFFALSE 19656
// sDLaser := true ;
19648: LD_ADDR_EXP 89
19652: PUSH
19653: LD_INT 1
19655: ST_TO_ADDR
// if p3 = 30 then
19656: LD_VAR 0 3
19660: PUSH
19661: LD_INT 30
19663: EQUAL
19664: IFFALSE 19674
// sExchange := true ;
19666: LD_ADDR_EXP 90
19670: PUSH
19671: LD_INT 1
19673: ST_TO_ADDR
// if p3 = 31 then
19674: LD_VAR 0 3
19678: PUSH
19679: LD_INT 31
19681: EQUAL
19682: IFFALSE 19692
// sFac := true ;
19684: LD_ADDR_EXP 91
19688: PUSH
19689: LD_INT 1
19691: ST_TO_ADDR
// if p3 = 32 then
19692: LD_VAR 0 3
19696: PUSH
19697: LD_INT 32
19699: EQUAL
19700: IFFALSE 19710
// sPower := true ;
19702: LD_ADDR_EXP 92
19706: PUSH
19707: LD_INT 1
19709: ST_TO_ADDR
// if p3 = 33 then
19710: LD_VAR 0 3
19714: PUSH
19715: LD_INT 33
19717: EQUAL
19718: IFFALSE 19728
// sRandom := true ;
19720: LD_ADDR_EXP 93
19724: PUSH
19725: LD_INT 1
19727: ST_TO_ADDR
// if p3 = 34 then
19728: LD_VAR 0 3
19732: PUSH
19733: LD_INT 34
19735: EQUAL
19736: IFFALSE 19746
// sShield := true ;
19738: LD_ADDR_EXP 94
19742: PUSH
19743: LD_INT 1
19745: ST_TO_ADDR
// if p3 = 35 then
19746: LD_VAR 0 3
19750: PUSH
19751: LD_INT 35
19753: EQUAL
19754: IFFALSE 19764
// sTime := true ;
19756: LD_ADDR_EXP 95
19760: PUSH
19761: LD_INT 1
19763: ST_TO_ADDR
// if p3 = 36 then
19764: LD_VAR 0 3
19768: PUSH
19769: LD_INT 36
19771: EQUAL
19772: IFFALSE 19782
// sTools := true ;
19774: LD_ADDR_EXP 96
19778: PUSH
19779: LD_INT 1
19781: ST_TO_ADDR
// if p3 = 101 then
19782: LD_VAR 0 3
19786: PUSH
19787: LD_INT 101
19789: EQUAL
19790: IFFALSE 19800
// sSold := true ;
19792: LD_ADDR_EXP 61
19796: PUSH
19797: LD_INT 1
19799: ST_TO_ADDR
// if p3 = 102 then
19800: LD_VAR 0 3
19804: PUSH
19805: LD_INT 102
19807: EQUAL
19808: IFFALSE 19818
// sDiff := true ;
19810: LD_ADDR_EXP 62
19814: PUSH
19815: LD_INT 1
19817: ST_TO_ADDR
// if p3 = 103 then
19818: LD_VAR 0 3
19822: PUSH
19823: LD_INT 103
19825: EQUAL
19826: IFFALSE 19836
// sFog := true ;
19828: LD_ADDR_EXP 65
19832: PUSH
19833: LD_INT 1
19835: ST_TO_ADDR
// if p3 = 104 then
19836: LD_VAR 0 3
19840: PUSH
19841: LD_INT 104
19843: EQUAL
19844: IFFALSE 19854
// sReset := true ;
19846: LD_ADDR_EXP 66
19850: PUSH
19851: LD_INT 1
19853: ST_TO_ADDR
// if p3 = 105 then
19854: LD_VAR 0 3
19858: PUSH
19859: LD_INT 105
19861: EQUAL
19862: IFFALSE 19872
// sSun := true ;
19864: LD_ADDR_EXP 67
19868: PUSH
19869: LD_INT 1
19871: ST_TO_ADDR
// if p3 = 106 then
19872: LD_VAR 0 3
19876: PUSH
19877: LD_INT 106
19879: EQUAL
19880: IFFALSE 19890
// sTiger := true ;
19882: LD_ADDR_EXP 63
19886: PUSH
19887: LD_INT 1
19889: ST_TO_ADDR
// if p3 = 107 then
19890: LD_VAR 0 3
19894: PUSH
19895: LD_INT 107
19897: EQUAL
19898: IFFALSE 19908
// sBomb := true ;
19900: LD_ADDR_EXP 64
19904: PUSH
19905: LD_INT 1
19907: ST_TO_ADDR
// if p3 = 108 then
19908: LD_VAR 0 3
19912: PUSH
19913: LD_INT 108
19915: EQUAL
19916: IFFALSE 19926
// sWound := true ;
19918: LD_ADDR_EXP 72
19922: PUSH
19923: LD_INT 1
19925: ST_TO_ADDR
// if p3 = 109 then
19926: LD_VAR 0 3
19930: PUSH
19931: LD_INT 109
19933: EQUAL
19934: IFFALSE 19944
// sBetray := true ;
19936: LD_ADDR_EXP 76
19940: PUSH
19941: LD_INT 1
19943: ST_TO_ADDR
// if p3 = 110 then
19944: LD_VAR 0 3
19948: PUSH
19949: LD_INT 110
19951: EQUAL
19952: IFFALSE 19962
// sContamin := true ;
19954: LD_ADDR_EXP 77
19958: PUSH
19959: LD_INT 1
19961: ST_TO_ADDR
// if p3 = 111 then
19962: LD_VAR 0 3
19966: PUSH
19967: LD_INT 111
19969: EQUAL
19970: IFFALSE 19980
// sOil := true ;
19972: LD_ADDR_EXP 79
19976: PUSH
19977: LD_INT 1
19979: ST_TO_ADDR
// if p3 = 112 then
19980: LD_VAR 0 3
19984: PUSH
19985: LD_INT 112
19987: EQUAL
19988: IFFALSE 19998
// sStu := true ;
19990: LD_ADDR_EXP 83
19994: PUSH
19995: LD_INT 1
19997: ST_TO_ADDR
// if p3 = 113 then
19998: LD_VAR 0 3
20002: PUSH
20003: LD_INT 113
20005: EQUAL
20006: IFFALSE 20016
// sBazooka := true ;
20008: LD_ADDR_EXP 86
20012: PUSH
20013: LD_INT 1
20015: ST_TO_ADDR
// if p3 = 114 then
20016: LD_VAR 0 3
20020: PUSH
20021: LD_INT 114
20023: EQUAL
20024: IFFALSE 20034
// sMortar := true ;
20026: LD_ADDR_EXP 87
20030: PUSH
20031: LD_INT 1
20033: ST_TO_ADDR
// if p3 = 115 then
20034: LD_VAR 0 3
20038: PUSH
20039: LD_INT 115
20041: EQUAL
20042: IFFALSE 20052
// sRanger := true ;
20044: LD_ADDR_EXP 97
20048: PUSH
20049: LD_INT 1
20051: ST_TO_ADDR
// if p3 = 116 then
20052: LD_VAR 0 3
20056: PUSH
20057: LD_INT 116
20059: EQUAL
20060: IFFALSE 20070
// sComputer := true ;
20062: LD_ADDR_EXP 98
20066: PUSH
20067: LD_INT 1
20069: ST_TO_ADDR
// if p3 = 117 then
20070: LD_VAR 0 3
20074: PUSH
20075: LD_INT 117
20077: EQUAL
20078: IFFALSE 20088
// s30 := true ;
20080: LD_ADDR_EXP 99
20084: PUSH
20085: LD_INT 1
20087: ST_TO_ADDR
// if p3 = 118 then
20088: LD_VAR 0 3
20092: PUSH
20093: LD_INT 118
20095: EQUAL
20096: IFFALSE 20106
// s60 := true ;
20098: LD_ADDR_EXP 100
20102: PUSH
20103: LD_INT 1
20105: ST_TO_ADDR
// end ; if p2 = hack_mode then
20106: LD_VAR 0 2
20110: PUSH
20111: LD_INT 101
20113: EQUAL
20114: IFFALSE 20242
// begin case p3 of 1 :
20116: LD_VAR 0 3
20120: PUSH
20121: LD_INT 1
20123: DOUBLE
20124: EQUAL
20125: IFTRUE 20129
20127: GO 20136
20129: POP
// hHackUnlimitedResources ; 2 :
20130: CALL 32505 0 0
20134: GO 20242
20136: LD_INT 2
20138: DOUBLE
20139: EQUAL
20140: IFTRUE 20144
20142: GO 20151
20144: POP
// hHackSetLevel10 ; 3 :
20145: CALL 32638 0 0
20149: GO 20242
20151: LD_INT 3
20153: DOUBLE
20154: EQUAL
20155: IFTRUE 20159
20157: GO 20166
20159: POP
// hHackSetLevel10YourUnits ; 4 :
20160: CALL 32723 0 0
20164: GO 20242
20166: LD_INT 4
20168: DOUBLE
20169: EQUAL
20170: IFTRUE 20174
20172: GO 20181
20174: POP
// hHackInvincible ; 5 :
20175: CALL 33171 0 0
20179: GO 20242
20181: LD_INT 5
20183: DOUBLE
20184: EQUAL
20185: IFTRUE 20189
20187: GO 20196
20189: POP
// hHackInvisible ; 6 :
20190: CALL 33282 0 0
20194: GO 20242
20196: LD_INT 6
20198: DOUBLE
20199: EQUAL
20200: IFTRUE 20204
20202: GO 20211
20204: POP
// hHackChangeYourSide ; 7 :
20205: CALL 33339 0 0
20209: GO 20242
20211: LD_INT 7
20213: DOUBLE
20214: EQUAL
20215: IFTRUE 20219
20217: GO 20226
20219: POP
// hHackChangeUnitSide ; 8 :
20220: CALL 33381 0 0
20224: GO 20242
20226: LD_INT 8
20228: DOUBLE
20229: EQUAL
20230: IFTRUE 20234
20232: GO 20241
20234: POP
// hHackFog ; end ;
20235: CALL 33482 0 0
20239: GO 20242
20241: POP
// end ; if p2 = game_save_mode then
20242: LD_VAR 0 2
20246: PUSH
20247: LD_INT 102
20249: EQUAL
20250: IFFALSE 20307
// begin if p3 = 1 then
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 1
20259: EQUAL
20260: IFFALSE 20272
// globalGameSaveCounter := p4 ;
20262: LD_ADDR_EXP 43
20266: PUSH
20267: LD_VAR 0 4
20271: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20272: LD_VAR 0 3
20276: PUSH
20277: LD_INT 2
20279: EQUAL
20280: IFFALSE 20288
20282: PUSH
20283: LD_EXP 43
20287: AND
20288: IFFALSE 20307
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20290: LD_STRING setGameSaveCounter(
20292: PUSH
20293: LD_EXP 43
20297: STR
20298: PUSH
20299: LD_STRING )
20301: STR
20302: PPUSH
20303: CALL_OW 559
// end ; end ;
20307: LD_VAR 0 7
20311: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20312: LD_INT 0
20314: PPUSH
// streamModeActive := false ;
20315: LD_ADDR_EXP 44
20319: PUSH
20320: LD_INT 0
20322: ST_TO_ADDR
// normalCounter := 36 ;
20323: LD_ADDR_EXP 45
20327: PUSH
20328: LD_INT 36
20330: ST_TO_ADDR
// hardcoreCounter := 18 ;
20331: LD_ADDR_EXP 46
20335: PUSH
20336: LD_INT 18
20338: ST_TO_ADDR
// sRocket := false ;
20339: LD_ADDR_EXP 49
20343: PUSH
20344: LD_INT 0
20346: ST_TO_ADDR
// sSpeed := false ;
20347: LD_ADDR_EXP 48
20351: PUSH
20352: LD_INT 0
20354: ST_TO_ADDR
// sEngine := false ;
20355: LD_ADDR_EXP 50
20359: PUSH
20360: LD_INT 0
20362: ST_TO_ADDR
// sSpec := false ;
20363: LD_ADDR_EXP 47
20367: PUSH
20368: LD_INT 0
20370: ST_TO_ADDR
// sLevel := false ;
20371: LD_ADDR_EXP 51
20375: PUSH
20376: LD_INT 0
20378: ST_TO_ADDR
// sArmoury := false ;
20379: LD_ADDR_EXP 52
20383: PUSH
20384: LD_INT 0
20386: ST_TO_ADDR
// sRadar := false ;
20387: LD_ADDR_EXP 53
20391: PUSH
20392: LD_INT 0
20394: ST_TO_ADDR
// sBunker := false ;
20395: LD_ADDR_EXP 54
20399: PUSH
20400: LD_INT 0
20402: ST_TO_ADDR
// sHack := false ;
20403: LD_ADDR_EXP 55
20407: PUSH
20408: LD_INT 0
20410: ST_TO_ADDR
// sFire := false ;
20411: LD_ADDR_EXP 56
20415: PUSH
20416: LD_INT 0
20418: ST_TO_ADDR
// sRefresh := false ;
20419: LD_ADDR_EXP 57
20423: PUSH
20424: LD_INT 0
20426: ST_TO_ADDR
// sExp := false ;
20427: LD_ADDR_EXP 58
20431: PUSH
20432: LD_INT 0
20434: ST_TO_ADDR
// sDepot := false ;
20435: LD_ADDR_EXP 59
20439: PUSH
20440: LD_INT 0
20442: ST_TO_ADDR
// sFlag := false ;
20443: LD_ADDR_EXP 60
20447: PUSH
20448: LD_INT 0
20450: ST_TO_ADDR
// sKamikadze := false ;
20451: LD_ADDR_EXP 68
20455: PUSH
20456: LD_INT 0
20458: ST_TO_ADDR
// sTroll := false ;
20459: LD_ADDR_EXP 69
20463: PUSH
20464: LD_INT 0
20466: ST_TO_ADDR
// sSlow := false ;
20467: LD_ADDR_EXP 70
20471: PUSH
20472: LD_INT 0
20474: ST_TO_ADDR
// sLack := false ;
20475: LD_ADDR_EXP 71
20479: PUSH
20480: LD_INT 0
20482: ST_TO_ADDR
// sTank := false ;
20483: LD_ADDR_EXP 73
20487: PUSH
20488: LD_INT 0
20490: ST_TO_ADDR
// sRemote := false ;
20491: LD_ADDR_EXP 74
20495: PUSH
20496: LD_INT 0
20498: ST_TO_ADDR
// sPowell := false ;
20499: LD_ADDR_EXP 75
20503: PUSH
20504: LD_INT 0
20506: ST_TO_ADDR
// sTeleport := false ;
20507: LD_ADDR_EXP 78
20511: PUSH
20512: LD_INT 0
20514: ST_TO_ADDR
// sOilTower := false ;
20515: LD_ADDR_EXP 80
20519: PUSH
20520: LD_INT 0
20522: ST_TO_ADDR
// sShovel := false ;
20523: LD_ADDR_EXP 81
20527: PUSH
20528: LD_INT 0
20530: ST_TO_ADDR
// sSheik := false ;
20531: LD_ADDR_EXP 82
20535: PUSH
20536: LD_INT 0
20538: ST_TO_ADDR
// sEarthquake := false ;
20539: LD_ADDR_EXP 84
20543: PUSH
20544: LD_INT 0
20546: ST_TO_ADDR
// sAI := false ;
20547: LD_ADDR_EXP 85
20551: PUSH
20552: LD_INT 0
20554: ST_TO_ADDR
// sCargo := false ;
20555: LD_ADDR_EXP 88
20559: PUSH
20560: LD_INT 0
20562: ST_TO_ADDR
// sDLaser := false ;
20563: LD_ADDR_EXP 89
20567: PUSH
20568: LD_INT 0
20570: ST_TO_ADDR
// sExchange := false ;
20571: LD_ADDR_EXP 90
20575: PUSH
20576: LD_INT 0
20578: ST_TO_ADDR
// sFac := false ;
20579: LD_ADDR_EXP 91
20583: PUSH
20584: LD_INT 0
20586: ST_TO_ADDR
// sPower := false ;
20587: LD_ADDR_EXP 92
20591: PUSH
20592: LD_INT 0
20594: ST_TO_ADDR
// sRandom := false ;
20595: LD_ADDR_EXP 93
20599: PUSH
20600: LD_INT 0
20602: ST_TO_ADDR
// sShield := false ;
20603: LD_ADDR_EXP 94
20607: PUSH
20608: LD_INT 0
20610: ST_TO_ADDR
// sTime := false ;
20611: LD_ADDR_EXP 95
20615: PUSH
20616: LD_INT 0
20618: ST_TO_ADDR
// sTools := false ;
20619: LD_ADDR_EXP 96
20623: PUSH
20624: LD_INT 0
20626: ST_TO_ADDR
// sSold := false ;
20627: LD_ADDR_EXP 61
20631: PUSH
20632: LD_INT 0
20634: ST_TO_ADDR
// sDiff := false ;
20635: LD_ADDR_EXP 62
20639: PUSH
20640: LD_INT 0
20642: ST_TO_ADDR
// sFog := false ;
20643: LD_ADDR_EXP 65
20647: PUSH
20648: LD_INT 0
20650: ST_TO_ADDR
// sReset := false ;
20651: LD_ADDR_EXP 66
20655: PUSH
20656: LD_INT 0
20658: ST_TO_ADDR
// sSun := false ;
20659: LD_ADDR_EXP 67
20663: PUSH
20664: LD_INT 0
20666: ST_TO_ADDR
// sTiger := false ;
20667: LD_ADDR_EXP 63
20671: PUSH
20672: LD_INT 0
20674: ST_TO_ADDR
// sBomb := false ;
20675: LD_ADDR_EXP 64
20679: PUSH
20680: LD_INT 0
20682: ST_TO_ADDR
// sWound := false ;
20683: LD_ADDR_EXP 72
20687: PUSH
20688: LD_INT 0
20690: ST_TO_ADDR
// sBetray := false ;
20691: LD_ADDR_EXP 76
20695: PUSH
20696: LD_INT 0
20698: ST_TO_ADDR
// sContamin := false ;
20699: LD_ADDR_EXP 77
20703: PUSH
20704: LD_INT 0
20706: ST_TO_ADDR
// sOil := false ;
20707: LD_ADDR_EXP 79
20711: PUSH
20712: LD_INT 0
20714: ST_TO_ADDR
// sStu := false ;
20715: LD_ADDR_EXP 83
20719: PUSH
20720: LD_INT 0
20722: ST_TO_ADDR
// sBazooka := false ;
20723: LD_ADDR_EXP 86
20727: PUSH
20728: LD_INT 0
20730: ST_TO_ADDR
// sMortar := false ;
20731: LD_ADDR_EXP 87
20735: PUSH
20736: LD_INT 0
20738: ST_TO_ADDR
// sRanger := false ;
20739: LD_ADDR_EXP 97
20743: PUSH
20744: LD_INT 0
20746: ST_TO_ADDR
// sComputer := false ;
20747: LD_ADDR_EXP 98
20751: PUSH
20752: LD_INT 0
20754: ST_TO_ADDR
// s30 := false ;
20755: LD_ADDR_EXP 99
20759: PUSH
20760: LD_INT 0
20762: ST_TO_ADDR
// s60 := false ;
20763: LD_ADDR_EXP 100
20767: PUSH
20768: LD_INT 0
20770: ST_TO_ADDR
// end ;
20771: LD_VAR 0 1
20775: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20776: LD_INT 0
20778: PPUSH
20779: PPUSH
20780: PPUSH
20781: PPUSH
20782: PPUSH
20783: PPUSH
20784: PPUSH
// result := [ ] ;
20785: LD_ADDR_VAR 0 2
20789: PUSH
20790: EMPTY
20791: ST_TO_ADDR
// if campaign_id = 1 then
20792: LD_OWVAR 69
20796: PUSH
20797: LD_INT 1
20799: EQUAL
20800: IFFALSE 23966
// begin case mission_number of 1 :
20802: LD_OWVAR 70
20806: PUSH
20807: LD_INT 1
20809: DOUBLE
20810: EQUAL
20811: IFTRUE 20815
20813: GO 20891
20815: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20816: LD_ADDR_VAR 0 2
20820: PUSH
20821: LD_INT 2
20823: PUSH
20824: LD_INT 4
20826: PUSH
20827: LD_INT 11
20829: PUSH
20830: LD_INT 12
20832: PUSH
20833: LD_INT 15
20835: PUSH
20836: LD_INT 16
20838: PUSH
20839: LD_INT 22
20841: PUSH
20842: LD_INT 23
20844: PUSH
20845: LD_INT 26
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 101
20861: PUSH
20862: LD_INT 102
20864: PUSH
20865: LD_INT 106
20867: PUSH
20868: LD_INT 116
20870: PUSH
20871: LD_INT 117
20873: PUSH
20874: LD_INT 118
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: ST_TO_ADDR
20889: GO 23964
20891: LD_INT 2
20893: DOUBLE
20894: EQUAL
20895: IFTRUE 20899
20897: GO 20983
20899: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20900: LD_ADDR_VAR 0 2
20904: PUSH
20905: LD_INT 2
20907: PUSH
20908: LD_INT 4
20910: PUSH
20911: LD_INT 11
20913: PUSH
20914: LD_INT 12
20916: PUSH
20917: LD_INT 15
20919: PUSH
20920: LD_INT 16
20922: PUSH
20923: LD_INT 22
20925: PUSH
20926: LD_INT 23
20928: PUSH
20929: LD_INT 26
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 101
20945: PUSH
20946: LD_INT 102
20948: PUSH
20949: LD_INT 105
20951: PUSH
20952: LD_INT 106
20954: PUSH
20955: LD_INT 108
20957: PUSH
20958: LD_INT 116
20960: PUSH
20961: LD_INT 117
20963: PUSH
20964: LD_INT 118
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: ST_TO_ADDR
20981: GO 23964
20983: LD_INT 3
20985: DOUBLE
20986: EQUAL
20987: IFTRUE 20991
20989: GO 21079
20991: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20992: LD_ADDR_VAR 0 2
20996: PUSH
20997: LD_INT 2
20999: PUSH
21000: LD_INT 4
21002: PUSH
21003: LD_INT 5
21005: PUSH
21006: LD_INT 11
21008: PUSH
21009: LD_INT 12
21011: PUSH
21012: LD_INT 15
21014: PUSH
21015: LD_INT 16
21017: PUSH
21018: LD_INT 22
21020: PUSH
21021: LD_INT 26
21023: PUSH
21024: LD_INT 36
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 101
21041: PUSH
21042: LD_INT 102
21044: PUSH
21045: LD_INT 105
21047: PUSH
21048: LD_INT 106
21050: PUSH
21051: LD_INT 108
21053: PUSH
21054: LD_INT 116
21056: PUSH
21057: LD_INT 117
21059: PUSH
21060: LD_INT 118
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: ST_TO_ADDR
21077: GO 23964
21079: LD_INT 4
21081: DOUBLE
21082: EQUAL
21083: IFTRUE 21087
21085: GO 21183
21087: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21088: LD_ADDR_VAR 0 2
21092: PUSH
21093: LD_INT 2
21095: PUSH
21096: LD_INT 4
21098: PUSH
21099: LD_INT 5
21101: PUSH
21102: LD_INT 8
21104: PUSH
21105: LD_INT 11
21107: PUSH
21108: LD_INT 12
21110: PUSH
21111: LD_INT 15
21113: PUSH
21114: LD_INT 16
21116: PUSH
21117: LD_INT 22
21119: PUSH
21120: LD_INT 23
21122: PUSH
21123: LD_INT 26
21125: PUSH
21126: LD_INT 36
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 101
21145: PUSH
21146: LD_INT 102
21148: PUSH
21149: LD_INT 105
21151: PUSH
21152: LD_INT 106
21154: PUSH
21155: LD_INT 108
21157: PUSH
21158: LD_INT 116
21160: PUSH
21161: LD_INT 117
21163: PUSH
21164: LD_INT 118
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: ST_TO_ADDR
21181: GO 23964
21183: LD_INT 5
21185: DOUBLE
21186: EQUAL
21187: IFTRUE 21191
21189: GO 21303
21191: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21192: LD_ADDR_VAR 0 2
21196: PUSH
21197: LD_INT 2
21199: PUSH
21200: LD_INT 4
21202: PUSH
21203: LD_INT 5
21205: PUSH
21206: LD_INT 6
21208: PUSH
21209: LD_INT 8
21211: PUSH
21212: LD_INT 11
21214: PUSH
21215: LD_INT 12
21217: PUSH
21218: LD_INT 15
21220: PUSH
21221: LD_INT 16
21223: PUSH
21224: LD_INT 22
21226: PUSH
21227: LD_INT 23
21229: PUSH
21230: LD_INT 25
21232: PUSH
21233: LD_INT 26
21235: PUSH
21236: LD_INT 36
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 101
21257: PUSH
21258: LD_INT 102
21260: PUSH
21261: LD_INT 105
21263: PUSH
21264: LD_INT 106
21266: PUSH
21267: LD_INT 108
21269: PUSH
21270: LD_INT 109
21272: PUSH
21273: LD_INT 112
21275: PUSH
21276: LD_INT 116
21278: PUSH
21279: LD_INT 117
21281: PUSH
21282: LD_INT 118
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: ST_TO_ADDR
21301: GO 23964
21303: LD_INT 6
21305: DOUBLE
21306: EQUAL
21307: IFTRUE 21311
21309: GO 21443
21311: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21312: LD_ADDR_VAR 0 2
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: LD_INT 4
21322: PUSH
21323: LD_INT 5
21325: PUSH
21326: LD_INT 6
21328: PUSH
21329: LD_INT 8
21331: PUSH
21332: LD_INT 11
21334: PUSH
21335: LD_INT 12
21337: PUSH
21338: LD_INT 15
21340: PUSH
21341: LD_INT 16
21343: PUSH
21344: LD_INT 20
21346: PUSH
21347: LD_INT 21
21349: PUSH
21350: LD_INT 22
21352: PUSH
21353: LD_INT 23
21355: PUSH
21356: LD_INT 25
21358: PUSH
21359: LD_INT 26
21361: PUSH
21362: LD_INT 30
21364: PUSH
21365: LD_INT 31
21367: PUSH
21368: LD_INT 32
21370: PUSH
21371: LD_INT 36
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 101
21397: PUSH
21398: LD_INT 102
21400: PUSH
21401: LD_INT 105
21403: PUSH
21404: LD_INT 106
21406: PUSH
21407: LD_INT 108
21409: PUSH
21410: LD_INT 109
21412: PUSH
21413: LD_INT 112
21415: PUSH
21416: LD_INT 116
21418: PUSH
21419: LD_INT 117
21421: PUSH
21422: LD_INT 118
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: ST_TO_ADDR
21441: GO 23964
21443: LD_INT 7
21445: DOUBLE
21446: EQUAL
21447: IFTRUE 21451
21449: GO 21563
21451: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21452: LD_ADDR_VAR 0 2
21456: PUSH
21457: LD_INT 2
21459: PUSH
21460: LD_INT 4
21462: PUSH
21463: LD_INT 5
21465: PUSH
21466: LD_INT 7
21468: PUSH
21469: LD_INT 11
21471: PUSH
21472: LD_INT 12
21474: PUSH
21475: LD_INT 15
21477: PUSH
21478: LD_INT 16
21480: PUSH
21481: LD_INT 20
21483: PUSH
21484: LD_INT 21
21486: PUSH
21487: LD_INT 22
21489: PUSH
21490: LD_INT 23
21492: PUSH
21493: LD_INT 25
21495: PUSH
21496: LD_INT 26
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 101
21517: PUSH
21518: LD_INT 102
21520: PUSH
21521: LD_INT 103
21523: PUSH
21524: LD_INT 105
21526: PUSH
21527: LD_INT 106
21529: PUSH
21530: LD_INT 108
21532: PUSH
21533: LD_INT 112
21535: PUSH
21536: LD_INT 116
21538: PUSH
21539: LD_INT 117
21541: PUSH
21542: LD_INT 118
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: ST_TO_ADDR
21561: GO 23964
21563: LD_INT 8
21565: DOUBLE
21566: EQUAL
21567: IFTRUE 21571
21569: GO 21711
21571: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21572: LD_ADDR_VAR 0 2
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: LD_INT 4
21582: PUSH
21583: LD_INT 5
21585: PUSH
21586: LD_INT 6
21588: PUSH
21589: LD_INT 7
21591: PUSH
21592: LD_INT 8
21594: PUSH
21595: LD_INT 11
21597: PUSH
21598: LD_INT 12
21600: PUSH
21601: LD_INT 15
21603: PUSH
21604: LD_INT 16
21606: PUSH
21607: LD_INT 20
21609: PUSH
21610: LD_INT 21
21612: PUSH
21613: LD_INT 22
21615: PUSH
21616: LD_INT 23
21618: PUSH
21619: LD_INT 25
21621: PUSH
21622: LD_INT 26
21624: PUSH
21625: LD_INT 30
21627: PUSH
21628: LD_INT 31
21630: PUSH
21631: LD_INT 32
21633: PUSH
21634: LD_INT 36
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 101
21661: PUSH
21662: LD_INT 102
21664: PUSH
21665: LD_INT 103
21667: PUSH
21668: LD_INT 105
21670: PUSH
21671: LD_INT 106
21673: PUSH
21674: LD_INT 108
21676: PUSH
21677: LD_INT 109
21679: PUSH
21680: LD_INT 112
21682: PUSH
21683: LD_INT 116
21685: PUSH
21686: LD_INT 117
21688: PUSH
21689: LD_INT 118
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: ST_TO_ADDR
21709: GO 23964
21711: LD_INT 9
21713: DOUBLE
21714: EQUAL
21715: IFTRUE 21719
21717: GO 21867
21719: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21720: LD_ADDR_VAR 0 2
21724: PUSH
21725: LD_INT 2
21727: PUSH
21728: LD_INT 4
21730: PUSH
21731: LD_INT 5
21733: PUSH
21734: LD_INT 6
21736: PUSH
21737: LD_INT 7
21739: PUSH
21740: LD_INT 8
21742: PUSH
21743: LD_INT 11
21745: PUSH
21746: LD_INT 12
21748: PUSH
21749: LD_INT 15
21751: PUSH
21752: LD_INT 16
21754: PUSH
21755: LD_INT 20
21757: PUSH
21758: LD_INT 21
21760: PUSH
21761: LD_INT 22
21763: PUSH
21764: LD_INT 23
21766: PUSH
21767: LD_INT 25
21769: PUSH
21770: LD_INT 26
21772: PUSH
21773: LD_INT 28
21775: PUSH
21776: LD_INT 30
21778: PUSH
21779: LD_INT 31
21781: PUSH
21782: LD_INT 32
21784: PUSH
21785: LD_INT 36
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 101
21813: PUSH
21814: LD_INT 102
21816: PUSH
21817: LD_INT 103
21819: PUSH
21820: LD_INT 105
21822: PUSH
21823: LD_INT 106
21825: PUSH
21826: LD_INT 108
21828: PUSH
21829: LD_INT 109
21831: PUSH
21832: LD_INT 112
21834: PUSH
21835: LD_INT 114
21837: PUSH
21838: LD_INT 116
21840: PUSH
21841: LD_INT 117
21843: PUSH
21844: LD_INT 118
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: ST_TO_ADDR
21865: GO 23964
21867: LD_INT 10
21869: DOUBLE
21870: EQUAL
21871: IFTRUE 21875
21873: GO 22071
21875: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21876: LD_ADDR_VAR 0 2
21880: PUSH
21881: LD_INT 2
21883: PUSH
21884: LD_INT 4
21886: PUSH
21887: LD_INT 5
21889: PUSH
21890: LD_INT 6
21892: PUSH
21893: LD_INT 7
21895: PUSH
21896: LD_INT 8
21898: PUSH
21899: LD_INT 9
21901: PUSH
21902: LD_INT 10
21904: PUSH
21905: LD_INT 11
21907: PUSH
21908: LD_INT 12
21910: PUSH
21911: LD_INT 13
21913: PUSH
21914: LD_INT 14
21916: PUSH
21917: LD_INT 15
21919: PUSH
21920: LD_INT 16
21922: PUSH
21923: LD_INT 17
21925: PUSH
21926: LD_INT 18
21928: PUSH
21929: LD_INT 19
21931: PUSH
21932: LD_INT 20
21934: PUSH
21935: LD_INT 21
21937: PUSH
21938: LD_INT 22
21940: PUSH
21941: LD_INT 23
21943: PUSH
21944: LD_INT 24
21946: PUSH
21947: LD_INT 25
21949: PUSH
21950: LD_INT 26
21952: PUSH
21953: LD_INT 28
21955: PUSH
21956: LD_INT 30
21958: PUSH
21959: LD_INT 31
21961: PUSH
21962: LD_INT 32
21964: PUSH
21965: LD_INT 36
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 101
22001: PUSH
22002: LD_INT 102
22004: PUSH
22005: LD_INT 103
22007: PUSH
22008: LD_INT 104
22010: PUSH
22011: LD_INT 105
22013: PUSH
22014: LD_INT 106
22016: PUSH
22017: LD_INT 107
22019: PUSH
22020: LD_INT 108
22022: PUSH
22023: LD_INT 109
22025: PUSH
22026: LD_INT 110
22028: PUSH
22029: LD_INT 111
22031: PUSH
22032: LD_INT 112
22034: PUSH
22035: LD_INT 114
22037: PUSH
22038: LD_INT 116
22040: PUSH
22041: LD_INT 117
22043: PUSH
22044: LD_INT 118
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: ST_TO_ADDR
22069: GO 23964
22071: LD_INT 11
22073: DOUBLE
22074: EQUAL
22075: IFTRUE 22079
22077: GO 22283
22079: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22080: LD_ADDR_VAR 0 2
22084: PUSH
22085: LD_INT 2
22087: PUSH
22088: LD_INT 3
22090: PUSH
22091: LD_INT 4
22093: PUSH
22094: LD_INT 5
22096: PUSH
22097: LD_INT 6
22099: PUSH
22100: LD_INT 7
22102: PUSH
22103: LD_INT 8
22105: PUSH
22106: LD_INT 9
22108: PUSH
22109: LD_INT 10
22111: PUSH
22112: LD_INT 11
22114: PUSH
22115: LD_INT 12
22117: PUSH
22118: LD_INT 13
22120: PUSH
22121: LD_INT 14
22123: PUSH
22124: LD_INT 15
22126: PUSH
22127: LD_INT 16
22129: PUSH
22130: LD_INT 17
22132: PUSH
22133: LD_INT 18
22135: PUSH
22136: LD_INT 19
22138: PUSH
22139: LD_INT 20
22141: PUSH
22142: LD_INT 21
22144: PUSH
22145: LD_INT 22
22147: PUSH
22148: LD_INT 23
22150: PUSH
22151: LD_INT 24
22153: PUSH
22154: LD_INT 25
22156: PUSH
22157: LD_INT 26
22159: PUSH
22160: LD_INT 28
22162: PUSH
22163: LD_INT 30
22165: PUSH
22166: LD_INT 31
22168: PUSH
22169: LD_INT 32
22171: PUSH
22172: LD_INT 34
22174: PUSH
22175: LD_INT 36
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 101
22213: PUSH
22214: LD_INT 102
22216: PUSH
22217: LD_INT 103
22219: PUSH
22220: LD_INT 104
22222: PUSH
22223: LD_INT 105
22225: PUSH
22226: LD_INT 106
22228: PUSH
22229: LD_INT 107
22231: PUSH
22232: LD_INT 108
22234: PUSH
22235: LD_INT 109
22237: PUSH
22238: LD_INT 110
22240: PUSH
22241: LD_INT 111
22243: PUSH
22244: LD_INT 112
22246: PUSH
22247: LD_INT 114
22249: PUSH
22250: LD_INT 116
22252: PUSH
22253: LD_INT 117
22255: PUSH
22256: LD_INT 118
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: ST_TO_ADDR
22281: GO 23964
22283: LD_INT 12
22285: DOUBLE
22286: EQUAL
22287: IFTRUE 22291
22289: GO 22511
22291: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22292: LD_ADDR_VAR 0 2
22296: PUSH
22297: LD_INT 1
22299: PUSH
22300: LD_INT 2
22302: PUSH
22303: LD_INT 3
22305: PUSH
22306: LD_INT 4
22308: PUSH
22309: LD_INT 5
22311: PUSH
22312: LD_INT 6
22314: PUSH
22315: LD_INT 7
22317: PUSH
22318: LD_INT 8
22320: PUSH
22321: LD_INT 9
22323: PUSH
22324: LD_INT 10
22326: PUSH
22327: LD_INT 11
22329: PUSH
22330: LD_INT 12
22332: PUSH
22333: LD_INT 13
22335: PUSH
22336: LD_INT 14
22338: PUSH
22339: LD_INT 15
22341: PUSH
22342: LD_INT 16
22344: PUSH
22345: LD_INT 17
22347: PUSH
22348: LD_INT 18
22350: PUSH
22351: LD_INT 19
22353: PUSH
22354: LD_INT 20
22356: PUSH
22357: LD_INT 21
22359: PUSH
22360: LD_INT 22
22362: PUSH
22363: LD_INT 23
22365: PUSH
22366: LD_INT 24
22368: PUSH
22369: LD_INT 25
22371: PUSH
22372: LD_INT 26
22374: PUSH
22375: LD_INT 27
22377: PUSH
22378: LD_INT 28
22380: PUSH
22381: LD_INT 30
22383: PUSH
22384: LD_INT 31
22386: PUSH
22387: LD_INT 32
22389: PUSH
22390: LD_INT 33
22392: PUSH
22393: LD_INT 34
22395: PUSH
22396: LD_INT 36
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 101
22437: PUSH
22438: LD_INT 102
22440: PUSH
22441: LD_INT 103
22443: PUSH
22444: LD_INT 104
22446: PUSH
22447: LD_INT 105
22449: PUSH
22450: LD_INT 106
22452: PUSH
22453: LD_INT 107
22455: PUSH
22456: LD_INT 108
22458: PUSH
22459: LD_INT 109
22461: PUSH
22462: LD_INT 110
22464: PUSH
22465: LD_INT 111
22467: PUSH
22468: LD_INT 112
22470: PUSH
22471: LD_INT 113
22473: PUSH
22474: LD_INT 114
22476: PUSH
22477: LD_INT 116
22479: PUSH
22480: LD_INT 117
22482: PUSH
22483: LD_INT 118
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: ST_TO_ADDR
22509: GO 23964
22511: LD_INT 13
22513: DOUBLE
22514: EQUAL
22515: IFTRUE 22519
22517: GO 22727
22519: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22520: LD_ADDR_VAR 0 2
22524: PUSH
22525: LD_INT 1
22527: PUSH
22528: LD_INT 2
22530: PUSH
22531: LD_INT 3
22533: PUSH
22534: LD_INT 4
22536: PUSH
22537: LD_INT 5
22539: PUSH
22540: LD_INT 8
22542: PUSH
22543: LD_INT 9
22545: PUSH
22546: LD_INT 10
22548: PUSH
22549: LD_INT 11
22551: PUSH
22552: LD_INT 12
22554: PUSH
22555: LD_INT 14
22557: PUSH
22558: LD_INT 15
22560: PUSH
22561: LD_INT 16
22563: PUSH
22564: LD_INT 17
22566: PUSH
22567: LD_INT 18
22569: PUSH
22570: LD_INT 19
22572: PUSH
22573: LD_INT 20
22575: PUSH
22576: LD_INT 21
22578: PUSH
22579: LD_INT 22
22581: PUSH
22582: LD_INT 23
22584: PUSH
22585: LD_INT 24
22587: PUSH
22588: LD_INT 25
22590: PUSH
22591: LD_INT 26
22593: PUSH
22594: LD_INT 27
22596: PUSH
22597: LD_INT 28
22599: PUSH
22600: LD_INT 30
22602: PUSH
22603: LD_INT 31
22605: PUSH
22606: LD_INT 32
22608: PUSH
22609: LD_INT 33
22611: PUSH
22612: LD_INT 34
22614: PUSH
22615: LD_INT 36
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 101
22653: PUSH
22654: LD_INT 102
22656: PUSH
22657: LD_INT 103
22659: PUSH
22660: LD_INT 104
22662: PUSH
22663: LD_INT 105
22665: PUSH
22666: LD_INT 106
22668: PUSH
22669: LD_INT 107
22671: PUSH
22672: LD_INT 108
22674: PUSH
22675: LD_INT 109
22677: PUSH
22678: LD_INT 110
22680: PUSH
22681: LD_INT 111
22683: PUSH
22684: LD_INT 112
22686: PUSH
22687: LD_INT 113
22689: PUSH
22690: LD_INT 114
22692: PUSH
22693: LD_INT 116
22695: PUSH
22696: LD_INT 117
22698: PUSH
22699: LD_INT 118
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: ST_TO_ADDR
22725: GO 23964
22727: LD_INT 14
22729: DOUBLE
22730: EQUAL
22731: IFTRUE 22735
22733: GO 22959
22735: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22736: LD_ADDR_VAR 0 2
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: LD_INT 2
22746: PUSH
22747: LD_INT 3
22749: PUSH
22750: LD_INT 4
22752: PUSH
22753: LD_INT 5
22755: PUSH
22756: LD_INT 6
22758: PUSH
22759: LD_INT 7
22761: PUSH
22762: LD_INT 8
22764: PUSH
22765: LD_INT 9
22767: PUSH
22768: LD_INT 10
22770: PUSH
22771: LD_INT 11
22773: PUSH
22774: LD_INT 12
22776: PUSH
22777: LD_INT 13
22779: PUSH
22780: LD_INT 14
22782: PUSH
22783: LD_INT 15
22785: PUSH
22786: LD_INT 16
22788: PUSH
22789: LD_INT 17
22791: PUSH
22792: LD_INT 18
22794: PUSH
22795: LD_INT 19
22797: PUSH
22798: LD_INT 20
22800: PUSH
22801: LD_INT 21
22803: PUSH
22804: LD_INT 22
22806: PUSH
22807: LD_INT 23
22809: PUSH
22810: LD_INT 24
22812: PUSH
22813: LD_INT 25
22815: PUSH
22816: LD_INT 26
22818: PUSH
22819: LD_INT 27
22821: PUSH
22822: LD_INT 28
22824: PUSH
22825: LD_INT 29
22827: PUSH
22828: LD_INT 30
22830: PUSH
22831: LD_INT 31
22833: PUSH
22834: LD_INT 32
22836: PUSH
22837: LD_INT 33
22839: PUSH
22840: LD_INT 34
22842: PUSH
22843: LD_INT 36
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 101
22885: PUSH
22886: LD_INT 102
22888: PUSH
22889: LD_INT 103
22891: PUSH
22892: LD_INT 104
22894: PUSH
22895: LD_INT 105
22897: PUSH
22898: LD_INT 106
22900: PUSH
22901: LD_INT 107
22903: PUSH
22904: LD_INT 108
22906: PUSH
22907: LD_INT 109
22909: PUSH
22910: LD_INT 110
22912: PUSH
22913: LD_INT 111
22915: PUSH
22916: LD_INT 112
22918: PUSH
22919: LD_INT 113
22921: PUSH
22922: LD_INT 114
22924: PUSH
22925: LD_INT 116
22927: PUSH
22928: LD_INT 117
22930: PUSH
22931: LD_INT 118
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: ST_TO_ADDR
22957: GO 23964
22959: LD_INT 15
22961: DOUBLE
22962: EQUAL
22963: IFTRUE 22967
22965: GO 23191
22967: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22968: LD_ADDR_VAR 0 2
22972: PUSH
22973: LD_INT 1
22975: PUSH
22976: LD_INT 2
22978: PUSH
22979: LD_INT 3
22981: PUSH
22982: LD_INT 4
22984: PUSH
22985: LD_INT 5
22987: PUSH
22988: LD_INT 6
22990: PUSH
22991: LD_INT 7
22993: PUSH
22994: LD_INT 8
22996: PUSH
22997: LD_INT 9
22999: PUSH
23000: LD_INT 10
23002: PUSH
23003: LD_INT 11
23005: PUSH
23006: LD_INT 12
23008: PUSH
23009: LD_INT 13
23011: PUSH
23012: LD_INT 14
23014: PUSH
23015: LD_INT 15
23017: PUSH
23018: LD_INT 16
23020: PUSH
23021: LD_INT 17
23023: PUSH
23024: LD_INT 18
23026: PUSH
23027: LD_INT 19
23029: PUSH
23030: LD_INT 20
23032: PUSH
23033: LD_INT 21
23035: PUSH
23036: LD_INT 22
23038: PUSH
23039: LD_INT 23
23041: PUSH
23042: LD_INT 24
23044: PUSH
23045: LD_INT 25
23047: PUSH
23048: LD_INT 26
23050: PUSH
23051: LD_INT 27
23053: PUSH
23054: LD_INT 28
23056: PUSH
23057: LD_INT 29
23059: PUSH
23060: LD_INT 30
23062: PUSH
23063: LD_INT 31
23065: PUSH
23066: LD_INT 32
23068: PUSH
23069: LD_INT 33
23071: PUSH
23072: LD_INT 34
23074: PUSH
23075: LD_INT 36
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 101
23117: PUSH
23118: LD_INT 102
23120: PUSH
23121: LD_INT 103
23123: PUSH
23124: LD_INT 104
23126: PUSH
23127: LD_INT 105
23129: PUSH
23130: LD_INT 106
23132: PUSH
23133: LD_INT 107
23135: PUSH
23136: LD_INT 108
23138: PUSH
23139: LD_INT 109
23141: PUSH
23142: LD_INT 110
23144: PUSH
23145: LD_INT 111
23147: PUSH
23148: LD_INT 112
23150: PUSH
23151: LD_INT 113
23153: PUSH
23154: LD_INT 114
23156: PUSH
23157: LD_INT 116
23159: PUSH
23160: LD_INT 117
23162: PUSH
23163: LD_INT 118
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: ST_TO_ADDR
23189: GO 23964
23191: LD_INT 16
23193: DOUBLE
23194: EQUAL
23195: IFTRUE 23199
23197: GO 23335
23199: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23200: LD_ADDR_VAR 0 2
23204: PUSH
23205: LD_INT 2
23207: PUSH
23208: LD_INT 4
23210: PUSH
23211: LD_INT 5
23213: PUSH
23214: LD_INT 7
23216: PUSH
23217: LD_INT 11
23219: PUSH
23220: LD_INT 12
23222: PUSH
23223: LD_INT 15
23225: PUSH
23226: LD_INT 16
23228: PUSH
23229: LD_INT 20
23231: PUSH
23232: LD_INT 21
23234: PUSH
23235: LD_INT 22
23237: PUSH
23238: LD_INT 23
23240: PUSH
23241: LD_INT 25
23243: PUSH
23244: LD_INT 26
23246: PUSH
23247: LD_INT 30
23249: PUSH
23250: LD_INT 31
23252: PUSH
23253: LD_INT 32
23255: PUSH
23256: LD_INT 33
23258: PUSH
23259: LD_INT 34
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 101
23285: PUSH
23286: LD_INT 102
23288: PUSH
23289: LD_INT 103
23291: PUSH
23292: LD_INT 106
23294: PUSH
23295: LD_INT 108
23297: PUSH
23298: LD_INT 112
23300: PUSH
23301: LD_INT 113
23303: PUSH
23304: LD_INT 114
23306: PUSH
23307: LD_INT 116
23309: PUSH
23310: LD_INT 117
23312: PUSH
23313: LD_INT 118
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: ST_TO_ADDR
23333: GO 23964
23335: LD_INT 17
23337: DOUBLE
23338: EQUAL
23339: IFTRUE 23343
23341: GO 23567
23343: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23344: LD_ADDR_VAR 0 2
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: LD_INT 2
23354: PUSH
23355: LD_INT 3
23357: PUSH
23358: LD_INT 4
23360: PUSH
23361: LD_INT 5
23363: PUSH
23364: LD_INT 6
23366: PUSH
23367: LD_INT 7
23369: PUSH
23370: LD_INT 8
23372: PUSH
23373: LD_INT 9
23375: PUSH
23376: LD_INT 10
23378: PUSH
23379: LD_INT 11
23381: PUSH
23382: LD_INT 12
23384: PUSH
23385: LD_INT 13
23387: PUSH
23388: LD_INT 14
23390: PUSH
23391: LD_INT 15
23393: PUSH
23394: LD_INT 16
23396: PUSH
23397: LD_INT 17
23399: PUSH
23400: LD_INT 18
23402: PUSH
23403: LD_INT 19
23405: PUSH
23406: LD_INT 20
23408: PUSH
23409: LD_INT 21
23411: PUSH
23412: LD_INT 22
23414: PUSH
23415: LD_INT 23
23417: PUSH
23418: LD_INT 24
23420: PUSH
23421: LD_INT 25
23423: PUSH
23424: LD_INT 26
23426: PUSH
23427: LD_INT 27
23429: PUSH
23430: LD_INT 28
23432: PUSH
23433: LD_INT 29
23435: PUSH
23436: LD_INT 30
23438: PUSH
23439: LD_INT 31
23441: PUSH
23442: LD_INT 32
23444: PUSH
23445: LD_INT 33
23447: PUSH
23448: LD_INT 34
23450: PUSH
23451: LD_INT 36
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 101
23493: PUSH
23494: LD_INT 102
23496: PUSH
23497: LD_INT 103
23499: PUSH
23500: LD_INT 104
23502: PUSH
23503: LD_INT 105
23505: PUSH
23506: LD_INT 106
23508: PUSH
23509: LD_INT 107
23511: PUSH
23512: LD_INT 108
23514: PUSH
23515: LD_INT 109
23517: PUSH
23518: LD_INT 110
23520: PUSH
23521: LD_INT 111
23523: PUSH
23524: LD_INT 112
23526: PUSH
23527: LD_INT 113
23529: PUSH
23530: LD_INT 114
23532: PUSH
23533: LD_INT 116
23535: PUSH
23536: LD_INT 117
23538: PUSH
23539: LD_INT 118
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: ST_TO_ADDR
23565: GO 23964
23567: LD_INT 18
23569: DOUBLE
23570: EQUAL
23571: IFTRUE 23575
23573: GO 23723
23575: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23576: LD_ADDR_VAR 0 2
23580: PUSH
23581: LD_INT 2
23583: PUSH
23584: LD_INT 4
23586: PUSH
23587: LD_INT 5
23589: PUSH
23590: LD_INT 7
23592: PUSH
23593: LD_INT 11
23595: PUSH
23596: LD_INT 12
23598: PUSH
23599: LD_INT 15
23601: PUSH
23602: LD_INT 16
23604: PUSH
23605: LD_INT 20
23607: PUSH
23608: LD_INT 21
23610: PUSH
23611: LD_INT 22
23613: PUSH
23614: LD_INT 23
23616: PUSH
23617: LD_INT 25
23619: PUSH
23620: LD_INT 26
23622: PUSH
23623: LD_INT 30
23625: PUSH
23626: LD_INT 31
23628: PUSH
23629: LD_INT 32
23631: PUSH
23632: LD_INT 33
23634: PUSH
23635: LD_INT 34
23637: PUSH
23638: LD_INT 35
23640: PUSH
23641: LD_INT 36
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 101
23669: PUSH
23670: LD_INT 102
23672: PUSH
23673: LD_INT 103
23675: PUSH
23676: LD_INT 106
23678: PUSH
23679: LD_INT 108
23681: PUSH
23682: LD_INT 112
23684: PUSH
23685: LD_INT 113
23687: PUSH
23688: LD_INT 114
23690: PUSH
23691: LD_INT 115
23693: PUSH
23694: LD_INT 116
23696: PUSH
23697: LD_INT 117
23699: PUSH
23700: LD_INT 118
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: ST_TO_ADDR
23721: GO 23964
23723: LD_INT 19
23725: DOUBLE
23726: EQUAL
23727: IFTRUE 23731
23729: GO 23963
23731: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23732: LD_ADDR_VAR 0 2
23736: PUSH
23737: LD_INT 1
23739: PUSH
23740: LD_INT 2
23742: PUSH
23743: LD_INT 3
23745: PUSH
23746: LD_INT 4
23748: PUSH
23749: LD_INT 5
23751: PUSH
23752: LD_INT 6
23754: PUSH
23755: LD_INT 7
23757: PUSH
23758: LD_INT 8
23760: PUSH
23761: LD_INT 9
23763: PUSH
23764: LD_INT 10
23766: PUSH
23767: LD_INT 11
23769: PUSH
23770: LD_INT 12
23772: PUSH
23773: LD_INT 13
23775: PUSH
23776: LD_INT 14
23778: PUSH
23779: LD_INT 15
23781: PUSH
23782: LD_INT 16
23784: PUSH
23785: LD_INT 17
23787: PUSH
23788: LD_INT 18
23790: PUSH
23791: LD_INT 19
23793: PUSH
23794: LD_INT 20
23796: PUSH
23797: LD_INT 21
23799: PUSH
23800: LD_INT 22
23802: PUSH
23803: LD_INT 23
23805: PUSH
23806: LD_INT 24
23808: PUSH
23809: LD_INT 25
23811: PUSH
23812: LD_INT 26
23814: PUSH
23815: LD_INT 27
23817: PUSH
23818: LD_INT 28
23820: PUSH
23821: LD_INT 29
23823: PUSH
23824: LD_INT 30
23826: PUSH
23827: LD_INT 31
23829: PUSH
23830: LD_INT 32
23832: PUSH
23833: LD_INT 33
23835: PUSH
23836: LD_INT 34
23838: PUSH
23839: LD_INT 35
23841: PUSH
23842: LD_INT 36
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 101
23885: PUSH
23886: LD_INT 102
23888: PUSH
23889: LD_INT 103
23891: PUSH
23892: LD_INT 104
23894: PUSH
23895: LD_INT 105
23897: PUSH
23898: LD_INT 106
23900: PUSH
23901: LD_INT 107
23903: PUSH
23904: LD_INT 108
23906: PUSH
23907: LD_INT 109
23909: PUSH
23910: LD_INT 110
23912: PUSH
23913: LD_INT 111
23915: PUSH
23916: LD_INT 112
23918: PUSH
23919: LD_INT 113
23921: PUSH
23922: LD_INT 114
23924: PUSH
23925: LD_INT 115
23927: PUSH
23928: LD_INT 116
23930: PUSH
23931: LD_INT 117
23933: PUSH
23934: LD_INT 118
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: ST_TO_ADDR
23961: GO 23964
23963: POP
// end else
23964: GO 24195
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23966: LD_ADDR_VAR 0 2
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: LD_INT 2
23976: PUSH
23977: LD_INT 3
23979: PUSH
23980: LD_INT 4
23982: PUSH
23983: LD_INT 5
23985: PUSH
23986: LD_INT 6
23988: PUSH
23989: LD_INT 7
23991: PUSH
23992: LD_INT 8
23994: PUSH
23995: LD_INT 9
23997: PUSH
23998: LD_INT 10
24000: PUSH
24001: LD_INT 11
24003: PUSH
24004: LD_INT 12
24006: PUSH
24007: LD_INT 13
24009: PUSH
24010: LD_INT 14
24012: PUSH
24013: LD_INT 15
24015: PUSH
24016: LD_INT 16
24018: PUSH
24019: LD_INT 17
24021: PUSH
24022: LD_INT 18
24024: PUSH
24025: LD_INT 19
24027: PUSH
24028: LD_INT 20
24030: PUSH
24031: LD_INT 21
24033: PUSH
24034: LD_INT 22
24036: PUSH
24037: LD_INT 23
24039: PUSH
24040: LD_INT 24
24042: PUSH
24043: LD_INT 25
24045: PUSH
24046: LD_INT 26
24048: PUSH
24049: LD_INT 27
24051: PUSH
24052: LD_INT 28
24054: PUSH
24055: LD_INT 29
24057: PUSH
24058: LD_INT 30
24060: PUSH
24061: LD_INT 31
24063: PUSH
24064: LD_INT 32
24066: PUSH
24067: LD_INT 33
24069: PUSH
24070: LD_INT 34
24072: PUSH
24073: LD_INT 35
24075: PUSH
24076: LD_INT 36
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 101
24119: PUSH
24120: LD_INT 102
24122: PUSH
24123: LD_INT 103
24125: PUSH
24126: LD_INT 104
24128: PUSH
24129: LD_INT 105
24131: PUSH
24132: LD_INT 106
24134: PUSH
24135: LD_INT 107
24137: PUSH
24138: LD_INT 108
24140: PUSH
24141: LD_INT 109
24143: PUSH
24144: LD_INT 110
24146: PUSH
24147: LD_INT 111
24149: PUSH
24150: LD_INT 112
24152: PUSH
24153: LD_INT 113
24155: PUSH
24156: LD_INT 114
24158: PUSH
24159: LD_INT 115
24161: PUSH
24162: LD_INT 116
24164: PUSH
24165: LD_INT 117
24167: PUSH
24168: LD_INT 118
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: ST_TO_ADDR
// if result then
24195: LD_VAR 0 2
24199: IFFALSE 24985
// begin normal :=  ;
24201: LD_ADDR_VAR 0 5
24205: PUSH
24206: LD_STRING 
24208: ST_TO_ADDR
// hardcore :=  ;
24209: LD_ADDR_VAR 0 6
24213: PUSH
24214: LD_STRING 
24216: ST_TO_ADDR
// active :=  ;
24217: LD_ADDR_VAR 0 7
24221: PUSH
24222: LD_STRING 
24224: ST_TO_ADDR
// for i = 1 to normalCounter do
24225: LD_ADDR_VAR 0 8
24229: PUSH
24230: DOUBLE
24231: LD_INT 1
24233: DEC
24234: ST_TO_ADDR
24235: LD_EXP 45
24239: PUSH
24240: FOR_TO
24241: IFFALSE 24342
// begin tmp := 0 ;
24243: LD_ADDR_VAR 0 3
24247: PUSH
24248: LD_STRING 0
24250: ST_TO_ADDR
// if result [ 1 ] then
24251: LD_VAR 0 2
24255: PUSH
24256: LD_INT 1
24258: ARRAY
24259: IFFALSE 24324
// if result [ 1 ] [ 1 ] = i then
24261: LD_VAR 0 2
24265: PUSH
24266: LD_INT 1
24268: ARRAY
24269: PUSH
24270: LD_INT 1
24272: ARRAY
24273: PUSH
24274: LD_VAR 0 8
24278: EQUAL
24279: IFFALSE 24324
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24281: LD_ADDR_VAR 0 2
24285: PUSH
24286: LD_VAR 0 2
24290: PPUSH
24291: LD_INT 1
24293: PPUSH
24294: LD_VAR 0 2
24298: PUSH
24299: LD_INT 1
24301: ARRAY
24302: PPUSH
24303: LD_INT 1
24305: PPUSH
24306: CALL_OW 3
24310: PPUSH
24311: CALL_OW 1
24315: ST_TO_ADDR
// tmp := 1 ;
24316: LD_ADDR_VAR 0 3
24320: PUSH
24321: LD_STRING 1
24323: ST_TO_ADDR
// end ; normal := normal & tmp ;
24324: LD_ADDR_VAR 0 5
24328: PUSH
24329: LD_VAR 0 5
24333: PUSH
24334: LD_VAR 0 3
24338: STR
24339: ST_TO_ADDR
// end ;
24340: GO 24240
24342: POP
24343: POP
// for i = 1 to hardcoreCounter do
24344: LD_ADDR_VAR 0 8
24348: PUSH
24349: DOUBLE
24350: LD_INT 1
24352: DEC
24353: ST_TO_ADDR
24354: LD_EXP 46
24358: PUSH
24359: FOR_TO
24360: IFFALSE 24465
// begin tmp := 0 ;
24362: LD_ADDR_VAR 0 3
24366: PUSH
24367: LD_STRING 0
24369: ST_TO_ADDR
// if result [ 2 ] then
24370: LD_VAR 0 2
24374: PUSH
24375: LD_INT 2
24377: ARRAY
24378: IFFALSE 24447
// if result [ 2 ] [ 1 ] = 100 + i then
24380: LD_VAR 0 2
24384: PUSH
24385: LD_INT 2
24387: ARRAY
24388: PUSH
24389: LD_INT 1
24391: ARRAY
24392: PUSH
24393: LD_INT 100
24395: PUSH
24396: LD_VAR 0 8
24400: PLUS
24401: EQUAL
24402: IFFALSE 24447
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24404: LD_ADDR_VAR 0 2
24408: PUSH
24409: LD_VAR 0 2
24413: PPUSH
24414: LD_INT 2
24416: PPUSH
24417: LD_VAR 0 2
24421: PUSH
24422: LD_INT 2
24424: ARRAY
24425: PPUSH
24426: LD_INT 1
24428: PPUSH
24429: CALL_OW 3
24433: PPUSH
24434: CALL_OW 1
24438: ST_TO_ADDR
// tmp := 1 ;
24439: LD_ADDR_VAR 0 3
24443: PUSH
24444: LD_STRING 1
24446: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24447: LD_ADDR_VAR 0 6
24451: PUSH
24452: LD_VAR 0 6
24456: PUSH
24457: LD_VAR 0 3
24461: STR
24462: ST_TO_ADDR
// end ;
24463: GO 24359
24465: POP
24466: POP
// if isGameLoad then
24467: LD_VAR 0 1
24471: IFFALSE 24946
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24473: LD_ADDR_VAR 0 4
24477: PUSH
24478: LD_EXP 49
24482: PUSH
24483: LD_EXP 48
24487: PUSH
24488: LD_EXP 50
24492: PUSH
24493: LD_EXP 47
24497: PUSH
24498: LD_EXP 51
24502: PUSH
24503: LD_EXP 52
24507: PUSH
24508: LD_EXP 53
24512: PUSH
24513: LD_EXP 54
24517: PUSH
24518: LD_EXP 55
24522: PUSH
24523: LD_EXP 56
24527: PUSH
24528: LD_EXP 57
24532: PUSH
24533: LD_EXP 58
24537: PUSH
24538: LD_EXP 59
24542: PUSH
24543: LD_EXP 60
24547: PUSH
24548: LD_EXP 68
24552: PUSH
24553: LD_EXP 69
24557: PUSH
24558: LD_EXP 70
24562: PUSH
24563: LD_EXP 71
24567: PUSH
24568: LD_EXP 73
24572: PUSH
24573: LD_EXP 74
24577: PUSH
24578: LD_EXP 75
24582: PUSH
24583: LD_EXP 78
24587: PUSH
24588: LD_EXP 80
24592: PUSH
24593: LD_EXP 81
24597: PUSH
24598: LD_EXP 82
24602: PUSH
24603: LD_EXP 84
24607: PUSH
24608: LD_EXP 85
24612: PUSH
24613: LD_EXP 88
24617: PUSH
24618: LD_EXP 89
24622: PUSH
24623: LD_EXP 90
24627: PUSH
24628: LD_EXP 91
24632: PUSH
24633: LD_EXP 92
24637: PUSH
24638: LD_EXP 93
24642: PUSH
24643: LD_EXP 94
24647: PUSH
24648: LD_EXP 95
24652: PUSH
24653: LD_EXP 96
24657: PUSH
24658: LD_EXP 61
24662: PUSH
24663: LD_EXP 62
24667: PUSH
24668: LD_EXP 65
24672: PUSH
24673: LD_EXP 66
24677: PUSH
24678: LD_EXP 67
24682: PUSH
24683: LD_EXP 63
24687: PUSH
24688: LD_EXP 64
24692: PUSH
24693: LD_EXP 72
24697: PUSH
24698: LD_EXP 76
24702: PUSH
24703: LD_EXP 77
24707: PUSH
24708: LD_EXP 79
24712: PUSH
24713: LD_EXP 83
24717: PUSH
24718: LD_EXP 86
24722: PUSH
24723: LD_EXP 87
24727: PUSH
24728: LD_EXP 97
24732: PUSH
24733: LD_EXP 98
24737: PUSH
24738: LD_EXP 99
24742: PUSH
24743: LD_EXP 100
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: ST_TO_ADDR
// tmp :=  ;
24804: LD_ADDR_VAR 0 3
24808: PUSH
24809: LD_STRING 
24811: ST_TO_ADDR
// for i = 1 to normalCounter do
24812: LD_ADDR_VAR 0 8
24816: PUSH
24817: DOUBLE
24818: LD_INT 1
24820: DEC
24821: ST_TO_ADDR
24822: LD_EXP 45
24826: PUSH
24827: FOR_TO
24828: IFFALSE 24864
// begin if flags [ i ] then
24830: LD_VAR 0 4
24834: PUSH
24835: LD_VAR 0 8
24839: ARRAY
24840: IFFALSE 24862
// tmp := tmp & i & ; ;
24842: LD_ADDR_VAR 0 3
24846: PUSH
24847: LD_VAR 0 3
24851: PUSH
24852: LD_VAR 0 8
24856: STR
24857: PUSH
24858: LD_STRING ;
24860: STR
24861: ST_TO_ADDR
// end ;
24862: GO 24827
24864: POP
24865: POP
// for i = 1 to hardcoreCounter do
24866: LD_ADDR_VAR 0 8
24870: PUSH
24871: DOUBLE
24872: LD_INT 1
24874: DEC
24875: ST_TO_ADDR
24876: LD_EXP 46
24880: PUSH
24881: FOR_TO
24882: IFFALSE 24928
// begin if flags [ normalCounter + i ] then
24884: LD_VAR 0 4
24888: PUSH
24889: LD_EXP 45
24893: PUSH
24894: LD_VAR 0 8
24898: PLUS
24899: ARRAY
24900: IFFALSE 24926
// tmp := tmp & ( 100 + i ) & ; ;
24902: LD_ADDR_VAR 0 3
24906: PUSH
24907: LD_VAR 0 3
24911: PUSH
24912: LD_INT 100
24914: PUSH
24915: LD_VAR 0 8
24919: PLUS
24920: STR
24921: PUSH
24922: LD_STRING ;
24924: STR
24925: ST_TO_ADDR
// end ;
24926: GO 24881
24928: POP
24929: POP
// if tmp then
24930: LD_VAR 0 3
24934: IFFALSE 24946
// active := tmp ;
24936: LD_ADDR_VAR 0 7
24940: PUSH
24941: LD_VAR 0 3
24945: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24946: LD_STRING getStreamItemsFromMission("
24948: PUSH
24949: LD_VAR 0 5
24953: STR
24954: PUSH
24955: LD_STRING ","
24957: STR
24958: PUSH
24959: LD_VAR 0 6
24963: STR
24964: PUSH
24965: LD_STRING ","
24967: STR
24968: PUSH
24969: LD_VAR 0 7
24973: STR
24974: PUSH
24975: LD_STRING ")
24977: STR
24978: PPUSH
24979: CALL_OW 559
// end else
24983: GO 24992
// ToLua ( getStreamItemsFromMission("","","") ) ;
24985: LD_STRING getStreamItemsFromMission("","","")
24987: PPUSH
24988: CALL_OW 559
// end ;
24992: LD_VAR 0 2
24996: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24997: LD_EXP 44
25001: IFFALSE 25009
25003: PUSH
25004: LD_EXP 49
25008: AND
25009: IFFALSE 25133
25011: GO 25013
25013: DISABLE
25014: LD_INT 0
25016: PPUSH
25017: PPUSH
// begin enable ;
25018: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25019: LD_ADDR_VAR 0 2
25023: PUSH
25024: LD_INT 22
25026: PUSH
25027: LD_OWVAR 2
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 2
25038: PUSH
25039: LD_INT 34
25041: PUSH
25042: LD_INT 7
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 34
25051: PUSH
25052: LD_INT 45
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 34
25061: PUSH
25062: LD_INT 28
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 34
25071: PUSH
25072: LD_INT 47
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PPUSH
25090: CALL_OW 69
25094: ST_TO_ADDR
// if not tmp then
25095: LD_VAR 0 2
25099: NOT
25100: IFFALSE 25104
// exit ;
25102: GO 25133
// for i in tmp do
25104: LD_ADDR_VAR 0 1
25108: PUSH
25109: LD_VAR 0 2
25113: PUSH
25114: FOR_IN
25115: IFFALSE 25131
// begin SetLives ( i , 0 ) ;
25117: LD_VAR 0 1
25121: PPUSH
25122: LD_INT 0
25124: PPUSH
25125: CALL_OW 234
// end ;
25129: GO 25114
25131: POP
25132: POP
// end ;
25133: PPOPN 2
25135: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25136: LD_EXP 44
25140: IFFALSE 25148
25142: PUSH
25143: LD_EXP 50
25147: AND
25148: IFFALSE 25232
25150: GO 25152
25152: DISABLE
25153: LD_INT 0
25155: PPUSH
25156: PPUSH
// begin enable ;
25157: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25158: LD_ADDR_VAR 0 2
25162: PUSH
25163: LD_INT 22
25165: PUSH
25166: LD_OWVAR 2
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 32
25177: PUSH
25178: LD_INT 3
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PPUSH
25189: CALL_OW 69
25193: ST_TO_ADDR
// if not tmp then
25194: LD_VAR 0 2
25198: NOT
25199: IFFALSE 25203
// exit ;
25201: GO 25232
// for i in tmp do
25203: LD_ADDR_VAR 0 1
25207: PUSH
25208: LD_VAR 0 2
25212: PUSH
25213: FOR_IN
25214: IFFALSE 25230
// begin SetLives ( i , 0 ) ;
25216: LD_VAR 0 1
25220: PPUSH
25221: LD_INT 0
25223: PPUSH
25224: CALL_OW 234
// end ;
25228: GO 25213
25230: POP
25231: POP
// end ;
25232: PPOPN 2
25234: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25235: LD_EXP 44
25239: IFFALSE 25247
25241: PUSH
25242: LD_EXP 47
25246: AND
25247: IFFALSE 25340
25249: GO 25251
25251: DISABLE
25252: LD_INT 0
25254: PPUSH
// begin enable ;
25255: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25256: LD_ADDR_VAR 0 1
25260: PUSH
25261: LD_INT 22
25263: PUSH
25264: LD_OWVAR 2
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: LD_INT 25
25278: PUSH
25279: LD_INT 5
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 25
25288: PUSH
25289: LD_INT 9
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 25
25298: PUSH
25299: LD_INT 8
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PPUSH
25316: CALL_OW 69
25320: PUSH
25321: FOR_IN
25322: IFFALSE 25338
// begin SetClass ( i , 1 ) ;
25324: LD_VAR 0 1
25328: PPUSH
25329: LD_INT 1
25331: PPUSH
25332: CALL_OW 336
// end ;
25336: GO 25321
25338: POP
25339: POP
// end ;
25340: PPOPN 1
25342: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25343: LD_EXP 44
25347: IFFALSE 25355
25349: PUSH
25350: LD_EXP 48
25354: AND
25355: IFFALSE 25367
25357: PUSH
25358: LD_OWVAR 65
25362: PUSH
25363: LD_INT 7
25365: LESS
25366: AND
25367: IFFALSE 25381
25369: GO 25371
25371: DISABLE
// begin enable ;
25372: ENABLE
// game_speed := 7 ;
25373: LD_ADDR_OWVAR 65
25377: PUSH
25378: LD_INT 7
25380: ST_TO_ADDR
// end ;
25381: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25382: LD_EXP 44
25386: IFFALSE 25394
25388: PUSH
25389: LD_EXP 51
25393: AND
25394: IFFALSE 25596
25396: GO 25398
25398: DISABLE
25399: LD_INT 0
25401: PPUSH
25402: PPUSH
25403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25404: LD_ADDR_VAR 0 3
25408: PUSH
25409: LD_INT 81
25411: PUSH
25412: LD_OWVAR 2
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 21
25423: PUSH
25424: LD_INT 1
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PPUSH
25435: CALL_OW 69
25439: ST_TO_ADDR
// if not tmp then
25440: LD_VAR 0 3
25444: NOT
25445: IFFALSE 25449
// exit ;
25447: GO 25596
// if tmp > 5 then
25449: LD_VAR 0 3
25453: PUSH
25454: LD_INT 5
25456: GREATER
25457: IFFALSE 25469
// k := 5 else
25459: LD_ADDR_VAR 0 2
25463: PUSH
25464: LD_INT 5
25466: ST_TO_ADDR
25467: GO 25479
// k := tmp ;
25469: LD_ADDR_VAR 0 2
25473: PUSH
25474: LD_VAR 0 3
25478: ST_TO_ADDR
// for i := 1 to k do
25479: LD_ADDR_VAR 0 1
25483: PUSH
25484: DOUBLE
25485: LD_INT 1
25487: DEC
25488: ST_TO_ADDR
25489: LD_VAR 0 2
25493: PUSH
25494: FOR_TO
25495: IFFALSE 25594
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25497: LD_VAR 0 3
25501: PUSH
25502: LD_VAR 0 1
25506: ARRAY
25507: PPUSH
25508: LD_VAR 0 1
25512: PUSH
25513: LD_INT 4
25515: MOD
25516: PUSH
25517: LD_INT 1
25519: PLUS
25520: PPUSH
25521: CALL_OW 259
25525: PUSH
25526: LD_INT 10
25528: LESS
25529: IFFALSE 25592
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25531: LD_VAR 0 3
25535: PUSH
25536: LD_VAR 0 1
25540: ARRAY
25541: PPUSH
25542: LD_VAR 0 1
25546: PUSH
25547: LD_INT 4
25549: MOD
25550: PUSH
25551: LD_INT 1
25553: PLUS
25554: PPUSH
25555: LD_VAR 0 3
25559: PUSH
25560: LD_VAR 0 1
25564: ARRAY
25565: PPUSH
25566: LD_VAR 0 1
25570: PUSH
25571: LD_INT 4
25573: MOD
25574: PUSH
25575: LD_INT 1
25577: PLUS
25578: PPUSH
25579: CALL_OW 259
25583: PUSH
25584: LD_INT 1
25586: PLUS
25587: PPUSH
25588: CALL_OW 237
25592: GO 25494
25594: POP
25595: POP
// end ;
25596: PPOPN 3
25598: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25599: LD_EXP 44
25603: IFFALSE 25611
25605: PUSH
25606: LD_EXP 52
25610: AND
25611: IFFALSE 25631
25613: GO 25615
25615: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25616: LD_INT 4
25618: PPUSH
25619: LD_OWVAR 2
25623: PPUSH
25624: LD_INT 0
25626: PPUSH
25627: CALL_OW 324
25631: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25632: LD_EXP 44
25636: IFFALSE 25644
25638: PUSH
25639: LD_EXP 81
25643: AND
25644: IFFALSE 25664
25646: GO 25648
25648: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25649: LD_INT 19
25651: PPUSH
25652: LD_OWVAR 2
25656: PPUSH
25657: LD_INT 0
25659: PPUSH
25660: CALL_OW 324
25664: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25665: LD_EXP 44
25669: IFFALSE 25677
25671: PUSH
25672: LD_EXP 53
25676: AND
25677: IFFALSE 25779
25679: GO 25681
25681: DISABLE
25682: LD_INT 0
25684: PPUSH
25685: PPUSH
// begin enable ;
25686: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25687: LD_ADDR_VAR 0 2
25691: PUSH
25692: LD_INT 22
25694: PUSH
25695: LD_OWVAR 2
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 2
25706: PUSH
25707: LD_INT 34
25709: PUSH
25710: LD_INT 11
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 34
25719: PUSH
25720: LD_INT 30
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: LIST
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PPUSH
25736: CALL_OW 69
25740: ST_TO_ADDR
// if not tmp then
25741: LD_VAR 0 2
25745: NOT
25746: IFFALSE 25750
// exit ;
25748: GO 25779
// for i in tmp do
25750: LD_ADDR_VAR 0 1
25754: PUSH
25755: LD_VAR 0 2
25759: PUSH
25760: FOR_IN
25761: IFFALSE 25777
// begin SetLives ( i , 0 ) ;
25763: LD_VAR 0 1
25767: PPUSH
25768: LD_INT 0
25770: PPUSH
25771: CALL_OW 234
// end ;
25775: GO 25760
25777: POP
25778: POP
// end ;
25779: PPOPN 2
25781: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25782: LD_EXP 44
25786: IFFALSE 25794
25788: PUSH
25789: LD_EXP 54
25793: AND
25794: IFFALSE 25814
25796: GO 25798
25798: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25799: LD_INT 32
25801: PPUSH
25802: LD_OWVAR 2
25806: PPUSH
25807: LD_INT 0
25809: PPUSH
25810: CALL_OW 324
25814: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25815: LD_EXP 44
25819: IFFALSE 25827
25821: PUSH
25822: LD_EXP 55
25826: AND
25827: IFFALSE 26010
25829: GO 25831
25831: DISABLE
25832: LD_INT 0
25834: PPUSH
25835: PPUSH
25836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25837: LD_ADDR_VAR 0 2
25841: PUSH
25842: LD_INT 22
25844: PUSH
25845: LD_OWVAR 2
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 33
25856: PUSH
25857: LD_INT 3
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PPUSH
25868: CALL_OW 69
25872: ST_TO_ADDR
// if not tmp then
25873: LD_VAR 0 2
25877: NOT
25878: IFFALSE 25882
// exit ;
25880: GO 26010
// side := 0 ;
25882: LD_ADDR_VAR 0 3
25886: PUSH
25887: LD_INT 0
25889: ST_TO_ADDR
// for i := 1 to 8 do
25890: LD_ADDR_VAR 0 1
25894: PUSH
25895: DOUBLE
25896: LD_INT 1
25898: DEC
25899: ST_TO_ADDR
25900: LD_INT 8
25902: PUSH
25903: FOR_TO
25904: IFFALSE 25954
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25906: LD_OWVAR 2
25910: PUSH
25911: LD_VAR 0 1
25915: NONEQUAL
25916: IFFALSE 25938
25918: PUSH
25919: LD_OWVAR 2
25923: PPUSH
25924: LD_VAR 0 1
25928: PPUSH
25929: CALL_OW 81
25933: PUSH
25934: LD_INT 2
25936: EQUAL
25937: AND
25938: IFFALSE 25952
// begin side := i ;
25940: LD_ADDR_VAR 0 3
25944: PUSH
25945: LD_VAR 0 1
25949: ST_TO_ADDR
// break ;
25950: GO 25954
// end ;
25952: GO 25903
25954: POP
25955: POP
// if not side then
25956: LD_VAR 0 3
25960: NOT
25961: IFFALSE 25965
// exit ;
25963: GO 26010
// for i := 1 to tmp do
25965: LD_ADDR_VAR 0 1
25969: PUSH
25970: DOUBLE
25971: LD_INT 1
25973: DEC
25974: ST_TO_ADDR
25975: LD_VAR 0 2
25979: PUSH
25980: FOR_TO
25981: IFFALSE 26008
// if Prob ( 60 ) then
25983: LD_INT 60
25985: PPUSH
25986: CALL_OW 13
25990: IFFALSE 26006
// SetSide ( i , side ) ;
25992: LD_VAR 0 1
25996: PPUSH
25997: LD_VAR 0 3
26001: PPUSH
26002: CALL_OW 235
26006: GO 25980
26008: POP
26009: POP
// end ;
26010: PPOPN 3
26012: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26013: LD_EXP 44
26017: IFFALSE 26025
26019: PUSH
26020: LD_EXP 57
26024: AND
26025: IFFALSE 26144
26027: GO 26029
26029: DISABLE
26030: LD_INT 0
26032: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26033: LD_ADDR_VAR 0 1
26037: PUSH
26038: LD_INT 22
26040: PUSH
26041: LD_OWVAR 2
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 21
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 3
26062: PUSH
26063: LD_INT 23
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: LIST
26081: PPUSH
26082: CALL_OW 69
26086: PUSH
26087: FOR_IN
26088: IFFALSE 26142
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26090: LD_VAR 0 1
26094: PPUSH
26095: CALL_OW 257
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: LD_INT 3
26108: PUSH
26109: LD_INT 4
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: IN
26118: IFFALSE 26140
// SetClass ( un , rand ( 1 , 4 ) ) ;
26120: LD_VAR 0 1
26124: PPUSH
26125: LD_INT 1
26127: PPUSH
26128: LD_INT 4
26130: PPUSH
26131: CALL_OW 12
26135: PPUSH
26136: CALL_OW 336
26140: GO 26087
26142: POP
26143: POP
// end ;
26144: PPOPN 1
26146: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26147: LD_EXP 44
26151: IFFALSE 26159
26153: PUSH
26154: LD_EXP 56
26158: AND
26159: IFFALSE 26238
26161: GO 26163
26163: DISABLE
26164: LD_INT 0
26166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26167: LD_ADDR_VAR 0 1
26171: PUSH
26172: LD_INT 22
26174: PUSH
26175: LD_OWVAR 2
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 21
26186: PUSH
26187: LD_INT 3
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PPUSH
26198: CALL_OW 69
26202: ST_TO_ADDR
// if not tmp then
26203: LD_VAR 0 1
26207: NOT
26208: IFFALSE 26212
// exit ;
26210: GO 26238
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26212: LD_VAR 0 1
26216: PUSH
26217: LD_INT 1
26219: PPUSH
26220: LD_VAR 0 1
26224: PPUSH
26225: CALL_OW 12
26229: ARRAY
26230: PPUSH
26231: LD_INT 100
26233: PPUSH
26234: CALL_OW 234
// end ;
26238: PPOPN 1
26240: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26241: LD_EXP 44
26245: IFFALSE 26253
26247: PUSH
26248: LD_EXP 58
26252: AND
26253: IFFALSE 26351
26255: GO 26257
26257: DISABLE
26258: LD_INT 0
26260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26261: LD_ADDR_VAR 0 1
26265: PUSH
26266: LD_INT 22
26268: PUSH
26269: LD_OWVAR 2
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 21
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PPUSH
26292: CALL_OW 69
26296: ST_TO_ADDR
// if not tmp then
26297: LD_VAR 0 1
26301: NOT
26302: IFFALSE 26306
// exit ;
26304: GO 26351
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26306: LD_VAR 0 1
26310: PUSH
26311: LD_INT 1
26313: PPUSH
26314: LD_VAR 0 1
26318: PPUSH
26319: CALL_OW 12
26323: ARRAY
26324: PPUSH
26325: LD_INT 1
26327: PPUSH
26328: LD_INT 4
26330: PPUSH
26331: CALL_OW 12
26335: PPUSH
26336: LD_INT 3000
26338: PPUSH
26339: LD_INT 9000
26341: PPUSH
26342: CALL_OW 12
26346: PPUSH
26347: CALL_OW 492
// end ;
26351: PPOPN 1
26353: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26354: LD_EXP 44
26358: IFFALSE 26366
26360: PUSH
26361: LD_EXP 59
26365: AND
26366: IFFALSE 26386
26368: GO 26370
26370: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26371: LD_INT 1
26373: PPUSH
26374: LD_OWVAR 2
26378: PPUSH
26379: LD_INT 0
26381: PPUSH
26382: CALL_OW 324
26386: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26387: LD_EXP 44
26391: IFFALSE 26399
26393: PUSH
26394: LD_EXP 60
26398: AND
26399: IFFALSE 26482
26401: GO 26403
26403: DISABLE
26404: LD_INT 0
26406: PPUSH
26407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26408: LD_ADDR_VAR 0 2
26412: PUSH
26413: LD_INT 22
26415: PUSH
26416: LD_OWVAR 2
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 21
26427: PUSH
26428: LD_INT 3
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PPUSH
26439: CALL_OW 69
26443: ST_TO_ADDR
// if not tmp then
26444: LD_VAR 0 2
26448: NOT
26449: IFFALSE 26453
// exit ;
26451: GO 26482
// for i in tmp do
26453: LD_ADDR_VAR 0 1
26457: PUSH
26458: LD_VAR 0 2
26462: PUSH
26463: FOR_IN
26464: IFFALSE 26480
// SetBLevel ( i , 10 ) ;
26466: LD_VAR 0 1
26470: PPUSH
26471: LD_INT 10
26473: PPUSH
26474: CALL_OW 241
26478: GO 26463
26480: POP
26481: POP
// end ;
26482: PPOPN 2
26484: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26485: LD_EXP 44
26489: IFFALSE 26497
26491: PUSH
26492: LD_EXP 61
26496: AND
26497: IFFALSE 26608
26499: GO 26501
26501: DISABLE
26502: LD_INT 0
26504: PPUSH
26505: PPUSH
26506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26507: LD_ADDR_VAR 0 3
26511: PUSH
26512: LD_INT 22
26514: PUSH
26515: LD_OWVAR 2
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 25
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PPUSH
26538: CALL_OW 69
26542: ST_TO_ADDR
// if not tmp then
26543: LD_VAR 0 3
26547: NOT
26548: IFFALSE 26552
// exit ;
26550: GO 26608
// un := tmp [ rand ( 1 , tmp ) ] ;
26552: LD_ADDR_VAR 0 2
26556: PUSH
26557: LD_VAR 0 3
26561: PUSH
26562: LD_INT 1
26564: PPUSH
26565: LD_VAR 0 3
26569: PPUSH
26570: CALL_OW 12
26574: ARRAY
26575: ST_TO_ADDR
// if Crawls ( un ) then
26576: LD_VAR 0 2
26580: PPUSH
26581: CALL_OW 318
26585: IFFALSE 26596
// ComWalk ( un ) ;
26587: LD_VAR 0 2
26591: PPUSH
26592: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26596: LD_VAR 0 2
26600: PPUSH
26601: LD_INT 5
26603: PPUSH
26604: CALL_OW 336
// end ;
26608: PPOPN 3
26610: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26611: LD_EXP 44
26615: IFFALSE 26623
26617: PUSH
26618: LD_EXP 62
26622: AND
26623: IFFALSE 26635
26625: PUSH
26626: LD_OWVAR 67
26630: PUSH
26631: LD_INT 4
26633: LESS
26634: AND
26635: IFFALSE 26654
26637: GO 26639
26639: DISABLE
// begin Difficulty := Difficulty + 1 ;
26640: LD_ADDR_OWVAR 67
26644: PUSH
26645: LD_OWVAR 67
26649: PUSH
26650: LD_INT 1
26652: PLUS
26653: ST_TO_ADDR
// end ;
26654: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26655: LD_EXP 44
26659: IFFALSE 26667
26661: PUSH
26662: LD_EXP 63
26666: AND
26667: IFFALSE 26770
26669: GO 26671
26671: DISABLE
26672: LD_INT 0
26674: PPUSH
// begin for i := 1 to 5 do
26675: LD_ADDR_VAR 0 1
26679: PUSH
26680: DOUBLE
26681: LD_INT 1
26683: DEC
26684: ST_TO_ADDR
26685: LD_INT 5
26687: PUSH
26688: FOR_TO
26689: IFFALSE 26768
// begin uc_nation := nation_nature ;
26691: LD_ADDR_OWVAR 21
26695: PUSH
26696: LD_INT 0
26698: ST_TO_ADDR
// uc_side := 0 ;
26699: LD_ADDR_OWVAR 20
26703: PUSH
26704: LD_INT 0
26706: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26707: LD_ADDR_OWVAR 29
26711: PUSH
26712: LD_INT 12
26714: PUSH
26715: LD_INT 12
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: ST_TO_ADDR
// hc_agressivity := 20 ;
26722: LD_ADDR_OWVAR 35
26726: PUSH
26727: LD_INT 20
26729: ST_TO_ADDR
// hc_class := class_tiger ;
26730: LD_ADDR_OWVAR 28
26734: PUSH
26735: LD_INT 14
26737: ST_TO_ADDR
// hc_gallery :=  ;
26738: LD_ADDR_OWVAR 33
26742: PUSH
26743: LD_STRING 
26745: ST_TO_ADDR
// hc_name :=  ;
26746: LD_ADDR_OWVAR 26
26750: PUSH
26751: LD_STRING 
26753: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26754: CALL_OW 44
26758: PPUSH
26759: LD_INT 0
26761: PPUSH
26762: CALL_OW 51
// end ;
26766: GO 26688
26768: POP
26769: POP
// end ;
26770: PPOPN 1
26772: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26773: LD_EXP 44
26777: IFFALSE 26785
26779: PUSH
26780: LD_EXP 64
26784: AND
26785: IFFALSE 26794
26787: GO 26789
26789: DISABLE
// StreamSibBomb ;
26790: CALL 26795 0 0
26794: END
// export function StreamSibBomb ; var i , x , y ; begin
26795: LD_INT 0
26797: PPUSH
26798: PPUSH
26799: PPUSH
26800: PPUSH
// result := false ;
26801: LD_ADDR_VAR 0 1
26805: PUSH
26806: LD_INT 0
26808: ST_TO_ADDR
// for i := 1 to 16 do
26809: LD_ADDR_VAR 0 2
26813: PUSH
26814: DOUBLE
26815: LD_INT 1
26817: DEC
26818: ST_TO_ADDR
26819: LD_INT 16
26821: PUSH
26822: FOR_TO
26823: IFFALSE 27022
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26825: LD_ADDR_VAR 0 3
26829: PUSH
26830: LD_INT 10
26832: PUSH
26833: LD_INT 20
26835: PUSH
26836: LD_INT 30
26838: PUSH
26839: LD_INT 40
26841: PUSH
26842: LD_INT 50
26844: PUSH
26845: LD_INT 60
26847: PUSH
26848: LD_INT 70
26850: PUSH
26851: LD_INT 80
26853: PUSH
26854: LD_INT 90
26856: PUSH
26857: LD_INT 100
26859: PUSH
26860: LD_INT 110
26862: PUSH
26863: LD_INT 120
26865: PUSH
26866: LD_INT 130
26868: PUSH
26869: LD_INT 140
26871: PUSH
26872: LD_INT 150
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: PPUSH
26895: LD_INT 15
26897: PPUSH
26898: CALL_OW 12
26902: ARRAY
26903: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26904: LD_ADDR_VAR 0 4
26908: PUSH
26909: LD_INT 10
26911: PUSH
26912: LD_INT 20
26914: PUSH
26915: LD_INT 30
26917: PUSH
26918: LD_INT 40
26920: PUSH
26921: LD_INT 50
26923: PUSH
26924: LD_INT 60
26926: PUSH
26927: LD_INT 70
26929: PUSH
26930: LD_INT 80
26932: PUSH
26933: LD_INT 90
26935: PUSH
26936: LD_INT 100
26938: PUSH
26939: LD_INT 110
26941: PUSH
26942: LD_INT 120
26944: PUSH
26945: LD_INT 130
26947: PUSH
26948: LD_INT 140
26950: PUSH
26951: LD_INT 150
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 1
26973: PPUSH
26974: LD_INT 15
26976: PPUSH
26977: CALL_OW 12
26981: ARRAY
26982: ST_TO_ADDR
// if ValidHex ( x , y ) then
26983: LD_VAR 0 3
26987: PPUSH
26988: LD_VAR 0 4
26992: PPUSH
26993: CALL_OW 488
26997: IFFALSE 27020
// begin result := [ x , y ] ;
26999: LD_ADDR_VAR 0 1
27003: PUSH
27004: LD_VAR 0 3
27008: PUSH
27009: LD_VAR 0 4
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: ST_TO_ADDR
// break ;
27018: GO 27022
// end ; end ;
27020: GO 26822
27022: POP
27023: POP
// if result then
27024: LD_VAR 0 1
27028: IFFALSE 27088
// begin ToLua ( playSibBomb() ) ;
27030: LD_STRING playSibBomb()
27032: PPUSH
27033: CALL_OW 559
// wait ( 0 0$14 ) ;
27037: LD_INT 490
27039: PPUSH
27040: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27044: LD_VAR 0 1
27048: PUSH
27049: LD_INT 1
27051: ARRAY
27052: PPUSH
27053: LD_VAR 0 1
27057: PUSH
27058: LD_INT 2
27060: ARRAY
27061: PPUSH
27062: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27066: LD_VAR 0 1
27070: PUSH
27071: LD_INT 1
27073: ARRAY
27074: PPUSH
27075: LD_VAR 0 1
27079: PUSH
27080: LD_INT 2
27082: ARRAY
27083: PPUSH
27084: CALL_OW 429
// end ; end ;
27088: LD_VAR 0 1
27092: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27093: LD_EXP 44
27097: IFFALSE 27105
27099: PUSH
27100: LD_EXP 66
27104: AND
27105: IFFALSE 27117
27107: GO 27109
27109: DISABLE
// YouLost (  ) ;
27110: LD_STRING 
27112: PPUSH
27113: CALL_OW 104
27117: END
// every 0 0$1 trigger StreamModeActive and sFog do
27118: LD_EXP 44
27122: IFFALSE 27130
27124: PUSH
27125: LD_EXP 65
27129: AND
27130: IFFALSE 27144
27132: GO 27134
27134: DISABLE
// FogOff ( your_side ) ;
27135: LD_OWVAR 2
27139: PPUSH
27140: CALL_OW 344
27144: END
// every 0 0$1 trigger StreamModeActive and sSun do
27145: LD_EXP 44
27149: IFFALSE 27157
27151: PUSH
27152: LD_EXP 67
27156: AND
27157: IFFALSE 27185
27159: GO 27161
27161: DISABLE
// begin solar_recharge_percent := 0 ;
27162: LD_ADDR_OWVAR 79
27166: PUSH
27167: LD_INT 0
27169: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27170: LD_INT 10500
27172: PPUSH
27173: CALL_OW 67
// solar_recharge_percent := 100 ;
27177: LD_ADDR_OWVAR 79
27181: PUSH
27182: LD_INT 100
27184: ST_TO_ADDR
// end ;
27185: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27186: LD_EXP 44
27190: IFFALSE 27198
27192: PUSH
27193: LD_EXP 68
27197: AND
27198: IFFALSE 27437
27200: GO 27202
27202: DISABLE
27203: LD_INT 0
27205: PPUSH
27206: PPUSH
27207: PPUSH
// begin tmp := [ ] ;
27208: LD_ADDR_VAR 0 3
27212: PUSH
27213: EMPTY
27214: ST_TO_ADDR
// for i := 1 to 6 do
27215: LD_ADDR_VAR 0 1
27219: PUSH
27220: DOUBLE
27221: LD_INT 1
27223: DEC
27224: ST_TO_ADDR
27225: LD_INT 6
27227: PUSH
27228: FOR_TO
27229: IFFALSE 27334
// begin uc_nation := nation_nature ;
27231: LD_ADDR_OWVAR 21
27235: PUSH
27236: LD_INT 0
27238: ST_TO_ADDR
// uc_side := 0 ;
27239: LD_ADDR_OWVAR 20
27243: PUSH
27244: LD_INT 0
27246: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27247: LD_ADDR_OWVAR 29
27251: PUSH
27252: LD_INT 12
27254: PUSH
27255: LD_INT 12
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: ST_TO_ADDR
// hc_agressivity := 20 ;
27262: LD_ADDR_OWVAR 35
27266: PUSH
27267: LD_INT 20
27269: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27270: LD_ADDR_OWVAR 28
27274: PUSH
27275: LD_INT 17
27277: ST_TO_ADDR
// hc_gallery :=  ;
27278: LD_ADDR_OWVAR 33
27282: PUSH
27283: LD_STRING 
27285: ST_TO_ADDR
// hc_name :=  ;
27286: LD_ADDR_OWVAR 26
27290: PUSH
27291: LD_STRING 
27293: ST_TO_ADDR
// un := CreateHuman ;
27294: LD_ADDR_VAR 0 2
27298: PUSH
27299: CALL_OW 44
27303: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27304: LD_VAR 0 2
27308: PPUSH
27309: LD_INT 1
27311: PPUSH
27312: CALL_OW 51
// tmp := tmp ^ un ;
27316: LD_ADDR_VAR 0 3
27320: PUSH
27321: LD_VAR 0 3
27325: PUSH
27326: LD_VAR 0 2
27330: ADD
27331: ST_TO_ADDR
// end ;
27332: GO 27228
27334: POP
27335: POP
// repeat wait ( 0 0$1 ) ;
27336: LD_INT 35
27338: PPUSH
27339: CALL_OW 67
// for un in tmp do
27343: LD_ADDR_VAR 0 2
27347: PUSH
27348: LD_VAR 0 3
27352: PUSH
27353: FOR_IN
27354: IFFALSE 27428
// begin if IsDead ( un ) then
27356: LD_VAR 0 2
27360: PPUSH
27361: CALL_OW 301
27365: IFFALSE 27385
// begin tmp := tmp diff un ;
27367: LD_ADDR_VAR 0 3
27371: PUSH
27372: LD_VAR 0 3
27376: PUSH
27377: LD_VAR 0 2
27381: DIFF
27382: ST_TO_ADDR
// continue ;
27383: GO 27353
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27385: LD_VAR 0 2
27389: PPUSH
27390: LD_INT 3
27392: PUSH
27393: LD_INT 22
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PPUSH
27407: CALL_OW 69
27411: PPUSH
27412: LD_VAR 0 2
27416: PPUSH
27417: CALL_OW 74
27421: PPUSH
27422: CALL_OW 115
// end ;
27426: GO 27353
27428: POP
27429: POP
// until not tmp ;
27430: LD_VAR 0 3
27434: NOT
27435: IFFALSE 27336
// end ;
27437: PPOPN 3
27439: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27440: LD_EXP 44
27444: IFFALSE 27452
27446: PUSH
27447: LD_EXP 69
27451: AND
27452: IFFALSE 27506
27454: GO 27456
27456: DISABLE
// begin ToLua ( displayTroll(); ) ;
27457: LD_STRING displayTroll();
27459: PPUSH
27460: CALL_OW 559
// wait ( 3 3$00 ) ;
27464: LD_INT 6300
27466: PPUSH
27467: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27471: LD_STRING hideTroll();
27473: PPUSH
27474: CALL_OW 559
// wait ( 1 1$00 ) ;
27478: LD_INT 2100
27480: PPUSH
27481: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27485: LD_STRING displayTroll();
27487: PPUSH
27488: CALL_OW 559
// wait ( 1 1$00 ) ;
27492: LD_INT 2100
27494: PPUSH
27495: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27499: LD_STRING hideTroll();
27501: PPUSH
27502: CALL_OW 559
// end ;
27506: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27507: LD_EXP 44
27511: IFFALSE 27519
27513: PUSH
27514: LD_EXP 70
27518: AND
27519: IFFALSE 27582
27521: GO 27523
27523: DISABLE
27524: LD_INT 0
27526: PPUSH
// begin p := 0 ;
27527: LD_ADDR_VAR 0 1
27531: PUSH
27532: LD_INT 0
27534: ST_TO_ADDR
// repeat game_speed := 1 ;
27535: LD_ADDR_OWVAR 65
27539: PUSH
27540: LD_INT 1
27542: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27543: LD_INT 35
27545: PPUSH
27546: CALL_OW 67
// p := p + 1 ;
27550: LD_ADDR_VAR 0 1
27554: PUSH
27555: LD_VAR 0 1
27559: PUSH
27560: LD_INT 1
27562: PLUS
27563: ST_TO_ADDR
// until p >= 60 ;
27564: LD_VAR 0 1
27568: PUSH
27569: LD_INT 60
27571: GREATEREQUAL
27572: IFFALSE 27535
// game_speed := 4 ;
27574: LD_ADDR_OWVAR 65
27578: PUSH
27579: LD_INT 4
27581: ST_TO_ADDR
// end ;
27582: PPOPN 1
27584: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27585: LD_EXP 44
27589: IFFALSE 27597
27591: PUSH
27592: LD_EXP 71
27596: AND
27597: IFFALSE 27743
27599: GO 27601
27601: DISABLE
27602: LD_INT 0
27604: PPUSH
27605: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27606: LD_ADDR_VAR 0 1
27610: PUSH
27611: LD_INT 22
27613: PUSH
27614: LD_OWVAR 2
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 2
27625: PUSH
27626: LD_INT 30
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 30
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: LIST
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PPUSH
27655: CALL_OW 69
27659: ST_TO_ADDR
// if not depot then
27660: LD_VAR 0 1
27664: NOT
27665: IFFALSE 27669
// exit ;
27667: GO 27743
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27669: LD_ADDR_VAR 0 2
27673: PUSH
27674: LD_VAR 0 1
27678: PUSH
27679: LD_INT 1
27681: PPUSH
27682: LD_VAR 0 1
27686: PPUSH
27687: CALL_OW 12
27691: ARRAY
27692: PPUSH
27693: CALL_OW 274
27697: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27698: LD_VAR 0 2
27702: PPUSH
27703: LD_INT 1
27705: PPUSH
27706: LD_INT 0
27708: PPUSH
27709: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27713: LD_VAR 0 2
27717: PPUSH
27718: LD_INT 2
27720: PPUSH
27721: LD_INT 0
27723: PPUSH
27724: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27728: LD_VAR 0 2
27732: PPUSH
27733: LD_INT 3
27735: PPUSH
27736: LD_INT 0
27738: PPUSH
27739: CALL_OW 277
// end ;
27743: PPOPN 2
27745: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27746: LD_EXP 44
27750: IFFALSE 27758
27752: PUSH
27753: LD_EXP 72
27757: AND
27758: IFFALSE 27855
27760: GO 27762
27762: DISABLE
27763: LD_INT 0
27765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27766: LD_ADDR_VAR 0 1
27770: PUSH
27771: LD_INT 22
27773: PUSH
27774: LD_OWVAR 2
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 21
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 3
27795: PUSH
27796: LD_INT 23
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: LIST
27814: PPUSH
27815: CALL_OW 69
27819: ST_TO_ADDR
// if not tmp then
27820: LD_VAR 0 1
27824: NOT
27825: IFFALSE 27829
// exit ;
27827: GO 27855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27829: LD_VAR 0 1
27833: PUSH
27834: LD_INT 1
27836: PPUSH
27837: LD_VAR 0 1
27841: PPUSH
27842: CALL_OW 12
27846: ARRAY
27847: PPUSH
27848: LD_INT 200
27850: PPUSH
27851: CALL_OW 234
// end ;
27855: PPOPN 1
27857: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27858: LD_EXP 44
27862: IFFALSE 27870
27864: PUSH
27865: LD_EXP 73
27869: AND
27870: IFFALSE 27949
27872: GO 27874
27874: DISABLE
27875: LD_INT 0
27877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27878: LD_ADDR_VAR 0 1
27882: PUSH
27883: LD_INT 22
27885: PUSH
27886: LD_OWVAR 2
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 21
27897: PUSH
27898: LD_INT 2
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PPUSH
27909: CALL_OW 69
27913: ST_TO_ADDR
// if not tmp then
27914: LD_VAR 0 1
27918: NOT
27919: IFFALSE 27923
// exit ;
27921: GO 27949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27923: LD_VAR 0 1
27927: PUSH
27928: LD_INT 1
27930: PPUSH
27931: LD_VAR 0 1
27935: PPUSH
27936: CALL_OW 12
27940: ARRAY
27941: PPUSH
27942: LD_INT 60
27944: PPUSH
27945: CALL_OW 234
// end ;
27949: PPOPN 1
27951: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27952: LD_EXP 44
27956: IFFALSE 27964
27958: PUSH
27959: LD_EXP 74
27963: AND
27964: IFFALSE 28063
27966: GO 27968
27968: DISABLE
27969: LD_INT 0
27971: PPUSH
27972: PPUSH
// begin enable ;
27973: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27974: LD_ADDR_VAR 0 1
27978: PUSH
27979: LD_INT 22
27981: PUSH
27982: LD_OWVAR 2
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 61
27993: PUSH
27994: EMPTY
27995: LIST
27996: PUSH
27997: LD_INT 33
27999: PUSH
28000: LD_INT 2
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: LIST
28011: PPUSH
28012: CALL_OW 69
28016: ST_TO_ADDR
// if not tmp then
28017: LD_VAR 0 1
28021: NOT
28022: IFFALSE 28026
// exit ;
28024: GO 28063
// for i in tmp do
28026: LD_ADDR_VAR 0 2
28030: PUSH
28031: LD_VAR 0 1
28035: PUSH
28036: FOR_IN
28037: IFFALSE 28061
// if IsControledBy ( i ) then
28039: LD_VAR 0 2
28043: PPUSH
28044: CALL_OW 312
28048: IFFALSE 28059
// ComUnlink ( i ) ;
28050: LD_VAR 0 2
28054: PPUSH
28055: CALL_OW 136
28059: GO 28036
28061: POP
28062: POP
// end ;
28063: PPOPN 2
28065: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28066: LD_EXP 44
28070: IFFALSE 28078
28072: PUSH
28073: LD_EXP 75
28077: AND
28078: IFFALSE 28218
28080: GO 28082
28082: DISABLE
28083: LD_INT 0
28085: PPUSH
28086: PPUSH
// begin ToLua ( displayPowell(); ) ;
28087: LD_STRING displayPowell();
28089: PPUSH
28090: CALL_OW 559
// uc_side := 0 ;
28094: LD_ADDR_OWVAR 20
28098: PUSH
28099: LD_INT 0
28101: ST_TO_ADDR
// uc_nation := 2 ;
28102: LD_ADDR_OWVAR 21
28106: PUSH
28107: LD_INT 2
28109: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28110: LD_ADDR_OWVAR 37
28114: PUSH
28115: LD_INT 14
28117: ST_TO_ADDR
// vc_engine := engine_siberite ;
28118: LD_ADDR_OWVAR 39
28122: PUSH
28123: LD_INT 3
28125: ST_TO_ADDR
// vc_control := control_apeman ;
28126: LD_ADDR_OWVAR 38
28130: PUSH
28131: LD_INT 5
28133: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28134: LD_ADDR_OWVAR 40
28138: PUSH
28139: LD_INT 29
28141: ST_TO_ADDR
// un := CreateVehicle ;
28142: LD_ADDR_VAR 0 2
28146: PUSH
28147: CALL_OW 45
28151: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28152: LD_VAR 0 2
28156: PPUSH
28157: LD_INT 1
28159: PPUSH
28160: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28164: LD_INT 35
28166: PPUSH
28167: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28171: LD_VAR 0 2
28175: PPUSH
28176: LD_INT 22
28178: PUSH
28179: LD_OWVAR 2
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PPUSH
28188: CALL_OW 69
28192: PPUSH
28193: LD_VAR 0 2
28197: PPUSH
28198: CALL_OW 74
28202: PPUSH
28203: CALL_OW 115
// until IsDead ( un ) ;
28207: LD_VAR 0 2
28211: PPUSH
28212: CALL_OW 301
28216: IFFALSE 28164
// end ;
28218: PPOPN 2
28220: END
// every 0 0$1 trigger StreamModeActive and sStu do
28221: LD_EXP 44
28225: IFFALSE 28233
28227: PUSH
28228: LD_EXP 83
28232: AND
28233: IFFALSE 28249
28235: GO 28237
28237: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28238: LD_STRING displayStucuk();
28240: PPUSH
28241: CALL_OW 559
// ResetFog ;
28245: CALL_OW 335
// end ;
28249: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28250: LD_EXP 44
28254: IFFALSE 28262
28256: PUSH
28257: LD_EXP 76
28261: AND
28262: IFFALSE 28403
28264: GO 28266
28266: DISABLE
28267: LD_INT 0
28269: PPUSH
28270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28271: LD_ADDR_VAR 0 2
28275: PUSH
28276: LD_INT 22
28278: PUSH
28279: LD_OWVAR 2
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 21
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PPUSH
28302: CALL_OW 69
28306: ST_TO_ADDR
// if not tmp then
28307: LD_VAR 0 2
28311: NOT
28312: IFFALSE 28316
// exit ;
28314: GO 28403
// un := tmp [ rand ( 1 , tmp ) ] ;
28316: LD_ADDR_VAR 0 1
28320: PUSH
28321: LD_VAR 0 2
28325: PUSH
28326: LD_INT 1
28328: PPUSH
28329: LD_VAR 0 2
28333: PPUSH
28334: CALL_OW 12
28338: ARRAY
28339: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28340: LD_VAR 0 1
28344: PPUSH
28345: LD_INT 0
28347: PPUSH
28348: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28352: LD_VAR 0 1
28356: PPUSH
28357: LD_OWVAR 3
28361: PUSH
28362: LD_VAR 0 1
28366: DIFF
28367: PPUSH
28368: LD_VAR 0 1
28372: PPUSH
28373: CALL_OW 74
28377: PPUSH
28378: CALL_OW 115
// wait ( 0 0$20 ) ;
28382: LD_INT 700
28384: PPUSH
28385: CALL_OW 67
// SetSide ( un , your_side ) ;
28389: LD_VAR 0 1
28393: PPUSH
28394: LD_OWVAR 2
28398: PPUSH
28399: CALL_OW 235
// end ;
28403: PPOPN 2
28405: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28406: LD_EXP 44
28410: IFFALSE 28418
28412: PUSH
28413: LD_EXP 77
28417: AND
28418: IFFALSE 28524
28420: GO 28422
28422: DISABLE
28423: LD_INT 0
28425: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28426: LD_ADDR_VAR 0 1
28430: PUSH
28431: LD_INT 22
28433: PUSH
28434: LD_OWVAR 2
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: LD_INT 30
28448: PUSH
28449: LD_INT 0
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 30
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: LIST
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PPUSH
28475: CALL_OW 69
28479: ST_TO_ADDR
// if not depot then
28480: LD_VAR 0 1
28484: NOT
28485: IFFALSE 28489
// exit ;
28487: GO 28524
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28489: LD_VAR 0 1
28493: PUSH
28494: LD_INT 1
28496: ARRAY
28497: PPUSH
28498: CALL_OW 250
28502: PPUSH
28503: LD_VAR 0 1
28507: PUSH
28508: LD_INT 1
28510: ARRAY
28511: PPUSH
28512: CALL_OW 251
28516: PPUSH
28517: LD_INT 70
28519: PPUSH
28520: CALL_OW 495
// end ;
28524: PPOPN 1
28526: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28527: LD_EXP 44
28531: IFFALSE 28539
28533: PUSH
28534: LD_EXP 78
28538: AND
28539: IFFALSE 28750
28541: GO 28543
28543: DISABLE
28544: LD_INT 0
28546: PPUSH
28547: PPUSH
28548: PPUSH
28549: PPUSH
28550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28551: LD_ADDR_VAR 0 5
28555: PUSH
28556: LD_INT 22
28558: PUSH
28559: LD_OWVAR 2
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 21
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PPUSH
28582: CALL_OW 69
28586: ST_TO_ADDR
// if not tmp then
28587: LD_VAR 0 5
28591: NOT
28592: IFFALSE 28596
// exit ;
28594: GO 28750
// for i in tmp do
28596: LD_ADDR_VAR 0 1
28600: PUSH
28601: LD_VAR 0 5
28605: PUSH
28606: FOR_IN
28607: IFFALSE 28748
// begin d := rand ( 0 , 5 ) ;
28609: LD_ADDR_VAR 0 4
28613: PUSH
28614: LD_INT 0
28616: PPUSH
28617: LD_INT 5
28619: PPUSH
28620: CALL_OW 12
28624: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28625: LD_ADDR_VAR 0 2
28629: PUSH
28630: LD_VAR 0 1
28634: PPUSH
28635: CALL_OW 250
28639: PPUSH
28640: LD_VAR 0 4
28644: PPUSH
28645: LD_INT 3
28647: PPUSH
28648: LD_INT 12
28650: PPUSH
28651: CALL_OW 12
28655: PPUSH
28656: CALL_OW 272
28660: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28661: LD_ADDR_VAR 0 3
28665: PUSH
28666: LD_VAR 0 1
28670: PPUSH
28671: CALL_OW 251
28675: PPUSH
28676: LD_VAR 0 4
28680: PPUSH
28681: LD_INT 3
28683: PPUSH
28684: LD_INT 12
28686: PPUSH
28687: CALL_OW 12
28691: PPUSH
28692: CALL_OW 273
28696: ST_TO_ADDR
// if ValidHex ( x , y ) then
28697: LD_VAR 0 2
28701: PPUSH
28702: LD_VAR 0 3
28706: PPUSH
28707: CALL_OW 488
28711: IFFALSE 28746
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28713: LD_VAR 0 1
28717: PPUSH
28718: LD_VAR 0 2
28722: PPUSH
28723: LD_VAR 0 3
28727: PPUSH
28728: LD_INT 3
28730: PPUSH
28731: LD_INT 6
28733: PPUSH
28734: CALL_OW 12
28738: PPUSH
28739: LD_INT 1
28741: PPUSH
28742: CALL_OW 483
// end ;
28746: GO 28606
28748: POP
28749: POP
// end ;
28750: PPOPN 5
28752: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28753: LD_EXP 44
28757: IFFALSE 28765
28759: PUSH
28760: LD_EXP 79
28764: AND
28765: IFFALSE 28859
28767: GO 28769
28769: DISABLE
28770: LD_INT 0
28772: PPUSH
28773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28774: LD_ADDR_VAR 0 2
28778: PUSH
28779: LD_INT 22
28781: PUSH
28782: LD_OWVAR 2
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 32
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 21
28803: PUSH
28804: LD_INT 2
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: PPUSH
28816: CALL_OW 69
28820: ST_TO_ADDR
// if not tmp then
28821: LD_VAR 0 2
28825: NOT
28826: IFFALSE 28830
// exit ;
28828: GO 28859
// for i in tmp do
28830: LD_ADDR_VAR 0 1
28834: PUSH
28835: LD_VAR 0 2
28839: PUSH
28840: FOR_IN
28841: IFFALSE 28857
// SetFuel ( i , 0 ) ;
28843: LD_VAR 0 1
28847: PPUSH
28848: LD_INT 0
28850: PPUSH
28851: CALL_OW 240
28855: GO 28840
28857: POP
28858: POP
// end ;
28859: PPOPN 2
28861: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28862: LD_EXP 44
28866: IFFALSE 28874
28868: PUSH
28869: LD_EXP 80
28873: AND
28874: IFFALSE 28940
28876: GO 28878
28878: DISABLE
28879: LD_INT 0
28881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28882: LD_ADDR_VAR 0 1
28886: PUSH
28887: LD_INT 22
28889: PUSH
28890: LD_OWVAR 2
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 30
28901: PUSH
28902: LD_INT 29
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PPUSH
28913: CALL_OW 69
28917: ST_TO_ADDR
// if not tmp then
28918: LD_VAR 0 1
28922: NOT
28923: IFFALSE 28927
// exit ;
28925: GO 28940
// DestroyUnit ( tmp [ 1 ] ) ;
28927: LD_VAR 0 1
28931: PUSH
28932: LD_INT 1
28934: ARRAY
28935: PPUSH
28936: CALL_OW 65
// end ;
28940: PPOPN 1
28942: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28943: LD_EXP 44
28947: IFFALSE 28955
28949: PUSH
28950: LD_EXP 82
28954: AND
28955: IFFALSE 29084
28957: GO 28959
28959: DISABLE
28960: LD_INT 0
28962: PPUSH
// begin uc_side := 0 ;
28963: LD_ADDR_OWVAR 20
28967: PUSH
28968: LD_INT 0
28970: ST_TO_ADDR
// uc_nation := nation_arabian ;
28971: LD_ADDR_OWVAR 21
28975: PUSH
28976: LD_INT 2
28978: ST_TO_ADDR
// hc_gallery :=  ;
28979: LD_ADDR_OWVAR 33
28983: PUSH
28984: LD_STRING 
28986: ST_TO_ADDR
// hc_name :=  ;
28987: LD_ADDR_OWVAR 26
28991: PUSH
28992: LD_STRING 
28994: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28995: LD_INT 1
28997: PPUSH
28998: LD_INT 11
29000: PPUSH
29001: LD_INT 10
29003: PPUSH
29004: CALL_OW 380
// un := CreateHuman ;
29008: LD_ADDR_VAR 0 1
29012: PUSH
29013: CALL_OW 44
29017: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29018: LD_VAR 0 1
29022: PPUSH
29023: LD_INT 1
29025: PPUSH
29026: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29030: LD_INT 35
29032: PPUSH
29033: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29037: LD_VAR 0 1
29041: PPUSH
29042: LD_INT 22
29044: PUSH
29045: LD_OWVAR 2
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PPUSH
29054: CALL_OW 69
29058: PPUSH
29059: LD_VAR 0 1
29063: PPUSH
29064: CALL_OW 74
29068: PPUSH
29069: CALL_OW 115
// until IsDead ( un ) ;
29073: LD_VAR 0 1
29077: PPUSH
29078: CALL_OW 301
29082: IFFALSE 29030
// end ;
29084: PPOPN 1
29086: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29087: LD_EXP 44
29091: IFFALSE 29099
29093: PUSH
29094: LD_EXP 84
29098: AND
29099: IFFALSE 29111
29101: GO 29103
29103: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29104: LD_STRING earthquake(getX(game), 0, 32)
29106: PPUSH
29107: CALL_OW 559
29111: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29112: LD_EXP 44
29116: IFFALSE 29124
29118: PUSH
29119: LD_EXP 85
29123: AND
29124: IFFALSE 29215
29126: GO 29128
29128: DISABLE
29129: LD_INT 0
29131: PPUSH
// begin enable ;
29132: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29133: LD_ADDR_VAR 0 1
29137: PUSH
29138: LD_INT 22
29140: PUSH
29141: LD_OWVAR 2
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 21
29152: PUSH
29153: LD_INT 2
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 33
29162: PUSH
29163: LD_INT 3
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: LIST
29174: PPUSH
29175: CALL_OW 69
29179: ST_TO_ADDR
// if not tmp then
29180: LD_VAR 0 1
29184: NOT
29185: IFFALSE 29189
// exit ;
29187: GO 29215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29189: LD_VAR 0 1
29193: PUSH
29194: LD_INT 1
29196: PPUSH
29197: LD_VAR 0 1
29201: PPUSH
29202: CALL_OW 12
29206: ARRAY
29207: PPUSH
29208: LD_INT 1
29210: PPUSH
29211: CALL_OW 234
// end ;
29215: PPOPN 1
29217: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29218: LD_EXP 44
29222: IFFALSE 29230
29224: PUSH
29225: LD_EXP 86
29229: AND
29230: IFFALSE 29371
29232: GO 29234
29234: DISABLE
29235: LD_INT 0
29237: PPUSH
29238: PPUSH
29239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29240: LD_ADDR_VAR 0 3
29244: PUSH
29245: LD_INT 22
29247: PUSH
29248: LD_OWVAR 2
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 25
29259: PUSH
29260: LD_INT 1
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PPUSH
29271: CALL_OW 69
29275: ST_TO_ADDR
// if not tmp then
29276: LD_VAR 0 3
29280: NOT
29281: IFFALSE 29285
// exit ;
29283: GO 29371
// un := tmp [ rand ( 1 , tmp ) ] ;
29285: LD_ADDR_VAR 0 2
29289: PUSH
29290: LD_VAR 0 3
29294: PUSH
29295: LD_INT 1
29297: PPUSH
29298: LD_VAR 0 3
29302: PPUSH
29303: CALL_OW 12
29307: ARRAY
29308: ST_TO_ADDR
// if Crawls ( un ) then
29309: LD_VAR 0 2
29313: PPUSH
29314: CALL_OW 318
29318: IFFALSE 29329
// ComWalk ( un ) ;
29320: LD_VAR 0 2
29324: PPUSH
29325: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29329: LD_VAR 0 2
29333: PPUSH
29334: LD_INT 9
29336: PPUSH
29337: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29341: LD_INT 28
29343: PPUSH
29344: LD_OWVAR 2
29348: PPUSH
29349: LD_INT 2
29351: PPUSH
29352: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29356: LD_INT 29
29358: PPUSH
29359: LD_OWVAR 2
29363: PPUSH
29364: LD_INT 2
29366: PPUSH
29367: CALL_OW 322
// end ;
29371: PPOPN 3
29373: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29374: LD_EXP 44
29378: IFFALSE 29386
29380: PUSH
29381: LD_EXP 87
29385: AND
29386: IFFALSE 29497
29388: GO 29390
29390: DISABLE
29391: LD_INT 0
29393: PPUSH
29394: PPUSH
29395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29396: LD_ADDR_VAR 0 3
29400: PUSH
29401: LD_INT 22
29403: PUSH
29404: LD_OWVAR 2
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 25
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PPUSH
29427: CALL_OW 69
29431: ST_TO_ADDR
// if not tmp then
29432: LD_VAR 0 3
29436: NOT
29437: IFFALSE 29441
// exit ;
29439: GO 29497
// un := tmp [ rand ( 1 , tmp ) ] ;
29441: LD_ADDR_VAR 0 2
29445: PUSH
29446: LD_VAR 0 3
29450: PUSH
29451: LD_INT 1
29453: PPUSH
29454: LD_VAR 0 3
29458: PPUSH
29459: CALL_OW 12
29463: ARRAY
29464: ST_TO_ADDR
// if Crawls ( un ) then
29465: LD_VAR 0 2
29469: PPUSH
29470: CALL_OW 318
29474: IFFALSE 29485
// ComWalk ( un ) ;
29476: LD_VAR 0 2
29480: PPUSH
29481: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29485: LD_VAR 0 2
29489: PPUSH
29490: LD_INT 8
29492: PPUSH
29493: CALL_OW 336
// end ;
29497: PPOPN 3
29499: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29500: LD_EXP 44
29504: IFFALSE 29512
29506: PUSH
29507: LD_EXP 88
29511: AND
29512: IFFALSE 29656
29514: GO 29516
29516: DISABLE
29517: LD_INT 0
29519: PPUSH
29520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29521: LD_ADDR_VAR 0 2
29525: PUSH
29526: LD_INT 22
29528: PUSH
29529: LD_OWVAR 2
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 21
29540: PUSH
29541: LD_INT 2
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 2
29550: PUSH
29551: LD_INT 34
29553: PUSH
29554: LD_INT 12
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 34
29563: PUSH
29564: LD_INT 51
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 34
29573: PUSH
29574: LD_INT 32
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: LIST
29591: PPUSH
29592: CALL_OW 69
29596: ST_TO_ADDR
// if not tmp then
29597: LD_VAR 0 2
29601: NOT
29602: IFFALSE 29606
// exit ;
29604: GO 29656
// for i in tmp do
29606: LD_ADDR_VAR 0 1
29610: PUSH
29611: LD_VAR 0 2
29615: PUSH
29616: FOR_IN
29617: IFFALSE 29654
// if GetCargo ( i , mat_artifact ) = 0 then
29619: LD_VAR 0 1
29623: PPUSH
29624: LD_INT 4
29626: PPUSH
29627: CALL_OW 289
29631: PUSH
29632: LD_INT 0
29634: EQUAL
29635: IFFALSE 29652
// SetCargo ( i , mat_siberit , 100 ) ;
29637: LD_VAR 0 1
29641: PPUSH
29642: LD_INT 3
29644: PPUSH
29645: LD_INT 100
29647: PPUSH
29648: CALL_OW 290
29652: GO 29616
29654: POP
29655: POP
// end ;
29656: PPOPN 2
29658: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29659: LD_EXP 44
29663: IFFALSE 29671
29665: PUSH
29666: LD_EXP 89
29670: AND
29671: IFFALSE 29854
29673: GO 29675
29675: DISABLE
29676: LD_INT 0
29678: PPUSH
29679: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29680: LD_ADDR_VAR 0 2
29684: PUSH
29685: LD_INT 22
29687: PUSH
29688: LD_OWVAR 2
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PPUSH
29697: CALL_OW 69
29701: ST_TO_ADDR
// if not tmp then
29702: LD_VAR 0 2
29706: NOT
29707: IFFALSE 29711
// exit ;
29709: GO 29854
// for i := 1 to 2 do
29711: LD_ADDR_VAR 0 1
29715: PUSH
29716: DOUBLE
29717: LD_INT 1
29719: DEC
29720: ST_TO_ADDR
29721: LD_INT 2
29723: PUSH
29724: FOR_TO
29725: IFFALSE 29852
// begin uc_side := your_side ;
29727: LD_ADDR_OWVAR 20
29731: PUSH
29732: LD_OWVAR 2
29736: ST_TO_ADDR
// uc_nation := nation_american ;
29737: LD_ADDR_OWVAR 21
29741: PUSH
29742: LD_INT 1
29744: ST_TO_ADDR
// vc_chassis := us_morphling ;
29745: LD_ADDR_OWVAR 37
29749: PUSH
29750: LD_INT 5
29752: ST_TO_ADDR
// vc_engine := engine_siberite ;
29753: LD_ADDR_OWVAR 39
29757: PUSH
29758: LD_INT 3
29760: ST_TO_ADDR
// vc_control := control_computer ;
29761: LD_ADDR_OWVAR 38
29765: PUSH
29766: LD_INT 3
29768: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29769: LD_ADDR_OWVAR 40
29773: PUSH
29774: LD_INT 10
29776: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29777: LD_VAR 0 2
29781: PUSH
29782: LD_INT 1
29784: ARRAY
29785: PPUSH
29786: CALL_OW 310
29790: NOT
29791: IFFALSE 29838
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29793: CALL_OW 45
29797: PPUSH
29798: LD_VAR 0 2
29802: PUSH
29803: LD_INT 1
29805: ARRAY
29806: PPUSH
29807: CALL_OW 250
29811: PPUSH
29812: LD_VAR 0 2
29816: PUSH
29817: LD_INT 1
29819: ARRAY
29820: PPUSH
29821: CALL_OW 251
29825: PPUSH
29826: LD_INT 12
29828: PPUSH
29829: LD_INT 1
29831: PPUSH
29832: CALL_OW 50
29836: GO 29850
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29838: CALL_OW 45
29842: PPUSH
29843: LD_INT 1
29845: PPUSH
29846: CALL_OW 51
// end ;
29850: GO 29724
29852: POP
29853: POP
// end ;
29854: PPOPN 2
29856: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29857: LD_EXP 44
29861: IFFALSE 29869
29863: PUSH
29864: LD_EXP 90
29868: AND
29869: IFFALSE 30091
29871: GO 29873
29873: DISABLE
29874: LD_INT 0
29876: PPUSH
29877: PPUSH
29878: PPUSH
29879: PPUSH
29880: PPUSH
29881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29882: LD_ADDR_VAR 0 6
29886: PUSH
29887: LD_INT 22
29889: PUSH
29890: LD_OWVAR 2
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 21
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 3
29911: PUSH
29912: LD_INT 23
29914: PUSH
29915: LD_INT 0
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: LIST
29930: PPUSH
29931: CALL_OW 69
29935: ST_TO_ADDR
// if not tmp then
29936: LD_VAR 0 6
29940: NOT
29941: IFFALSE 29945
// exit ;
29943: GO 30091
// s1 := rand ( 1 , 4 ) ;
29945: LD_ADDR_VAR 0 2
29949: PUSH
29950: LD_INT 1
29952: PPUSH
29953: LD_INT 4
29955: PPUSH
29956: CALL_OW 12
29960: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29961: LD_ADDR_VAR 0 4
29965: PUSH
29966: LD_VAR 0 6
29970: PUSH
29971: LD_INT 1
29973: ARRAY
29974: PPUSH
29975: LD_VAR 0 2
29979: PPUSH
29980: CALL_OW 259
29984: ST_TO_ADDR
// if s1 = 1 then
29985: LD_VAR 0 2
29989: PUSH
29990: LD_INT 1
29992: EQUAL
29993: IFFALSE 30013
// s2 := rand ( 2 , 4 ) else
29995: LD_ADDR_VAR 0 3
29999: PUSH
30000: LD_INT 2
30002: PPUSH
30003: LD_INT 4
30005: PPUSH
30006: CALL_OW 12
30010: ST_TO_ADDR
30011: GO 30021
// s2 := 1 ;
30013: LD_ADDR_VAR 0 3
30017: PUSH
30018: LD_INT 1
30020: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30021: LD_ADDR_VAR 0 5
30025: PUSH
30026: LD_VAR 0 6
30030: PUSH
30031: LD_INT 1
30033: ARRAY
30034: PPUSH
30035: LD_VAR 0 3
30039: PPUSH
30040: CALL_OW 259
30044: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30045: LD_VAR 0 6
30049: PUSH
30050: LD_INT 1
30052: ARRAY
30053: PPUSH
30054: LD_VAR 0 2
30058: PPUSH
30059: LD_VAR 0 5
30063: PPUSH
30064: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30068: LD_VAR 0 6
30072: PUSH
30073: LD_INT 1
30075: ARRAY
30076: PPUSH
30077: LD_VAR 0 3
30081: PPUSH
30082: LD_VAR 0 4
30086: PPUSH
30087: CALL_OW 237
// end ;
30091: PPOPN 6
30093: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30094: LD_EXP 44
30098: IFFALSE 30106
30100: PUSH
30101: LD_EXP 91
30105: AND
30106: IFFALSE 30185
30108: GO 30110
30110: DISABLE
30111: LD_INT 0
30113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30114: LD_ADDR_VAR 0 1
30118: PUSH
30119: LD_INT 22
30121: PUSH
30122: LD_OWVAR 2
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 30
30133: PUSH
30134: LD_INT 3
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PPUSH
30145: CALL_OW 69
30149: ST_TO_ADDR
// if not tmp then
30150: LD_VAR 0 1
30154: NOT
30155: IFFALSE 30159
// exit ;
30157: GO 30185
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30159: LD_VAR 0 1
30163: PUSH
30164: LD_INT 1
30166: PPUSH
30167: LD_VAR 0 1
30171: PPUSH
30172: CALL_OW 12
30176: ARRAY
30177: PPUSH
30178: LD_INT 1
30180: PPUSH
30181: CALL_OW 234
// end ;
30185: PPOPN 1
30187: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30188: LD_EXP 44
30192: IFFALSE 30200
30194: PUSH
30195: LD_EXP 92
30199: AND
30200: IFFALSE 30312
30202: GO 30204
30204: DISABLE
30205: LD_INT 0
30207: PPUSH
30208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30209: LD_ADDR_VAR 0 2
30213: PUSH
30214: LD_INT 22
30216: PUSH
30217: LD_OWVAR 2
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: LD_INT 30
30231: PUSH
30232: LD_INT 27
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 30
30241: PUSH
30242: LD_INT 26
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 30
30251: PUSH
30252: LD_INT 28
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PPUSH
30269: CALL_OW 69
30273: ST_TO_ADDR
// if not tmp then
30274: LD_VAR 0 2
30278: NOT
30279: IFFALSE 30283
// exit ;
30281: GO 30312
// for i in tmp do
30283: LD_ADDR_VAR 0 1
30287: PUSH
30288: LD_VAR 0 2
30292: PUSH
30293: FOR_IN
30294: IFFALSE 30310
// SetLives ( i , 1 ) ;
30296: LD_VAR 0 1
30300: PPUSH
30301: LD_INT 1
30303: PPUSH
30304: CALL_OW 234
30308: GO 30293
30310: POP
30311: POP
// end ;
30312: PPOPN 2
30314: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30315: LD_EXP 44
30319: IFFALSE 30327
30321: PUSH
30322: LD_EXP 93
30326: AND
30327: IFFALSE 30614
30329: GO 30331
30331: DISABLE
30332: LD_INT 0
30334: PPUSH
30335: PPUSH
30336: PPUSH
// begin i := rand ( 1 , 7 ) ;
30337: LD_ADDR_VAR 0 1
30341: PUSH
30342: LD_INT 1
30344: PPUSH
30345: LD_INT 7
30347: PPUSH
30348: CALL_OW 12
30352: ST_TO_ADDR
// case i of 1 :
30353: LD_VAR 0 1
30357: PUSH
30358: LD_INT 1
30360: DOUBLE
30361: EQUAL
30362: IFTRUE 30366
30364: GO 30376
30366: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30367: LD_STRING earthquake(getX(game), 0, 32)
30369: PPUSH
30370: CALL_OW 559
30374: GO 30614
30376: LD_INT 2
30378: DOUBLE
30379: EQUAL
30380: IFTRUE 30384
30382: GO 30398
30384: POP
// begin ToLua ( displayStucuk(); ) ;
30385: LD_STRING displayStucuk();
30387: PPUSH
30388: CALL_OW 559
// ResetFog ;
30392: CALL_OW 335
// end ; 3 :
30396: GO 30614
30398: LD_INT 3
30400: DOUBLE
30401: EQUAL
30402: IFTRUE 30406
30404: GO 30510
30406: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30407: LD_ADDR_VAR 0 2
30411: PUSH
30412: LD_INT 22
30414: PUSH
30415: LD_OWVAR 2
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 25
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PPUSH
30438: CALL_OW 69
30442: ST_TO_ADDR
// if not tmp then
30443: LD_VAR 0 2
30447: NOT
30448: IFFALSE 30452
// exit ;
30450: GO 30614
// un := tmp [ rand ( 1 , tmp ) ] ;
30452: LD_ADDR_VAR 0 3
30456: PUSH
30457: LD_VAR 0 2
30461: PUSH
30462: LD_INT 1
30464: PPUSH
30465: LD_VAR 0 2
30469: PPUSH
30470: CALL_OW 12
30474: ARRAY
30475: ST_TO_ADDR
// if Crawls ( un ) then
30476: LD_VAR 0 3
30480: PPUSH
30481: CALL_OW 318
30485: IFFALSE 30496
// ComWalk ( un ) ;
30487: LD_VAR 0 3
30491: PPUSH
30492: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30496: LD_VAR 0 3
30500: PPUSH
30501: LD_INT 8
30503: PPUSH
30504: CALL_OW 336
// end ; 4 :
30508: GO 30614
30510: LD_INT 4
30512: DOUBLE
30513: EQUAL
30514: IFTRUE 30518
30516: GO 30592
30518: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30519: LD_ADDR_VAR 0 2
30523: PUSH
30524: LD_INT 22
30526: PUSH
30527: LD_OWVAR 2
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 30
30538: PUSH
30539: LD_INT 29
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PPUSH
30550: CALL_OW 69
30554: ST_TO_ADDR
// if not tmp then
30555: LD_VAR 0 2
30559: NOT
30560: IFFALSE 30564
// exit ;
30562: GO 30614
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30564: LD_VAR 0 2
30568: PUSH
30569: LD_INT 1
30571: ARRAY
30572: PPUSH
30573: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30577: LD_VAR 0 2
30581: PUSH
30582: LD_INT 1
30584: ARRAY
30585: PPUSH
30586: CALL_OW 65
// end ; 5 .. 7 :
30590: GO 30614
30592: LD_INT 5
30594: DOUBLE
30595: GREATEREQUAL
30596: IFFALSE 30604
30598: LD_INT 7
30600: DOUBLE
30601: LESSEQUAL
30602: IFTRUE 30606
30604: GO 30613
30606: POP
// StreamSibBomb ; end ;
30607: CALL 26795 0 0
30611: GO 30614
30613: POP
// end ;
30614: PPOPN 3
30616: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30617: LD_EXP 44
30621: IFFALSE 30629
30623: PUSH
30624: LD_EXP 94
30628: AND
30629: IFFALSE 30785
30631: GO 30633
30633: DISABLE
30634: LD_INT 0
30636: PPUSH
30637: PPUSH
30638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30639: LD_ADDR_VAR 0 2
30643: PUSH
30644: LD_INT 81
30646: PUSH
30647: LD_OWVAR 2
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 2
30658: PUSH
30659: LD_INT 21
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 21
30671: PUSH
30672: LD_INT 2
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: LIST
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PPUSH
30688: CALL_OW 69
30692: ST_TO_ADDR
// if not tmp then
30693: LD_VAR 0 2
30697: NOT
30698: IFFALSE 30702
// exit ;
30700: GO 30785
// p := 0 ;
30702: LD_ADDR_VAR 0 3
30706: PUSH
30707: LD_INT 0
30709: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30710: LD_INT 35
30712: PPUSH
30713: CALL_OW 67
// p := p + 1 ;
30717: LD_ADDR_VAR 0 3
30721: PUSH
30722: LD_VAR 0 3
30726: PUSH
30727: LD_INT 1
30729: PLUS
30730: ST_TO_ADDR
// for i in tmp do
30731: LD_ADDR_VAR 0 1
30735: PUSH
30736: LD_VAR 0 2
30740: PUSH
30741: FOR_IN
30742: IFFALSE 30773
// if GetLives ( i ) < 1000 then
30744: LD_VAR 0 1
30748: PPUSH
30749: CALL_OW 256
30753: PUSH
30754: LD_INT 1000
30756: LESS
30757: IFFALSE 30771
// SetLives ( i , 1000 ) ;
30759: LD_VAR 0 1
30763: PPUSH
30764: LD_INT 1000
30766: PPUSH
30767: CALL_OW 234
30771: GO 30741
30773: POP
30774: POP
// until p > 20 ;
30775: LD_VAR 0 3
30779: PUSH
30780: LD_INT 20
30782: GREATER
30783: IFFALSE 30710
// end ;
30785: PPOPN 3
30787: END
// every 0 0$1 trigger StreamModeActive and sTime do
30788: LD_EXP 44
30792: IFFALSE 30800
30794: PUSH
30795: LD_EXP 95
30799: AND
30800: IFFALSE 30835
30802: GO 30804
30804: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30805: LD_INT 28
30807: PPUSH
30808: LD_OWVAR 2
30812: PPUSH
30813: LD_INT 2
30815: PPUSH
30816: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30820: LD_INT 30
30822: PPUSH
30823: LD_OWVAR 2
30827: PPUSH
30828: LD_INT 2
30830: PPUSH
30831: CALL_OW 322
// end ;
30835: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30836: LD_EXP 44
30840: IFFALSE 30848
30842: PUSH
30843: LD_EXP 96
30847: AND
30848: IFFALSE 30969
30850: GO 30852
30852: DISABLE
30853: LD_INT 0
30855: PPUSH
30856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30857: LD_ADDR_VAR 0 2
30861: PUSH
30862: LD_INT 22
30864: PUSH
30865: LD_OWVAR 2
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 21
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 3
30886: PUSH
30887: LD_INT 23
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: PPUSH
30906: CALL_OW 69
30910: ST_TO_ADDR
// if not tmp then
30911: LD_VAR 0 2
30915: NOT
30916: IFFALSE 30920
// exit ;
30918: GO 30969
// for i in tmp do
30920: LD_ADDR_VAR 0 1
30924: PUSH
30925: LD_VAR 0 2
30929: PUSH
30930: FOR_IN
30931: IFFALSE 30967
// begin if Crawls ( i ) then
30933: LD_VAR 0 1
30937: PPUSH
30938: CALL_OW 318
30942: IFFALSE 30953
// ComWalk ( i ) ;
30944: LD_VAR 0 1
30948: PPUSH
30949: CALL_OW 138
// SetClass ( i , 2 ) ;
30953: LD_VAR 0 1
30957: PPUSH
30958: LD_INT 2
30960: PPUSH
30961: CALL_OW 336
// end ;
30965: GO 30930
30967: POP
30968: POP
// end ;
30969: PPOPN 2
30971: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30972: LD_EXP 44
30976: IFFALSE 30984
30978: PUSH
30979: LD_EXP 97
30983: AND
30984: IFFALSE 31274
30986: GO 30988
30988: DISABLE
30989: LD_INT 0
30991: PPUSH
30992: PPUSH
30993: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30994: LD_OWVAR 2
30998: PPUSH
30999: LD_INT 9
31001: PPUSH
31002: LD_INT 1
31004: PPUSH
31005: LD_INT 1
31007: PPUSH
31008: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31012: LD_INT 9
31014: PPUSH
31015: LD_OWVAR 2
31019: PPUSH
31020: CALL_OW 343
// uc_side := 9 ;
31024: LD_ADDR_OWVAR 20
31028: PUSH
31029: LD_INT 9
31031: ST_TO_ADDR
// uc_nation := 2 ;
31032: LD_ADDR_OWVAR 21
31036: PUSH
31037: LD_INT 2
31039: ST_TO_ADDR
// hc_name := Dark Warrior ;
31040: LD_ADDR_OWVAR 26
31044: PUSH
31045: LD_STRING Dark Warrior
31047: ST_TO_ADDR
// hc_gallery :=  ;
31048: LD_ADDR_OWVAR 33
31052: PUSH
31053: LD_STRING 
31055: ST_TO_ADDR
// hc_noskilllimit := true ;
31056: LD_ADDR_OWVAR 76
31060: PUSH
31061: LD_INT 1
31063: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31064: LD_ADDR_OWVAR 31
31068: PUSH
31069: LD_INT 30
31071: PUSH
31072: LD_INT 30
31074: PUSH
31075: LD_INT 30
31077: PUSH
31078: LD_INT 30
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: ST_TO_ADDR
// un := CreateHuman ;
31087: LD_ADDR_VAR 0 3
31091: PUSH
31092: CALL_OW 44
31096: ST_TO_ADDR
// hc_noskilllimit := false ;
31097: LD_ADDR_OWVAR 76
31101: PUSH
31102: LD_INT 0
31104: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31105: LD_VAR 0 3
31109: PPUSH
31110: LD_INT 1
31112: PPUSH
31113: CALL_OW 51
// ToLua ( playRanger() ) ;
31117: LD_STRING playRanger()
31119: PPUSH
31120: CALL_OW 559
// p := 0 ;
31124: LD_ADDR_VAR 0 2
31128: PUSH
31129: LD_INT 0
31131: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31132: LD_INT 35
31134: PPUSH
31135: CALL_OW 67
// p := p + 1 ;
31139: LD_ADDR_VAR 0 2
31143: PUSH
31144: LD_VAR 0 2
31148: PUSH
31149: LD_INT 1
31151: PLUS
31152: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31153: LD_VAR 0 3
31157: PPUSH
31158: CALL_OW 256
31162: PUSH
31163: LD_INT 1000
31165: LESS
31166: IFFALSE 31180
// SetLives ( un , 1000 ) ;
31168: LD_VAR 0 3
31172: PPUSH
31173: LD_INT 1000
31175: PPUSH
31176: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31180: LD_VAR 0 3
31184: PPUSH
31185: LD_INT 81
31187: PUSH
31188: LD_OWVAR 2
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 91
31199: PUSH
31200: LD_VAR 0 3
31204: PUSH
31205: LD_INT 30
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: LIST
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PPUSH
31217: CALL_OW 69
31221: PPUSH
31222: LD_VAR 0 3
31226: PPUSH
31227: CALL_OW 74
31231: PPUSH
31232: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31236: LD_VAR 0 2
31240: PUSH
31241: LD_INT 80
31243: GREATER
31244: IFTRUE 31257
31246: PUSH
31247: LD_VAR 0 3
31251: PPUSH
31252: CALL_OW 301
31256: OR
31257: IFFALSE 31132
// if un then
31259: LD_VAR 0 3
31263: IFFALSE 31274
// RemoveUnit ( un ) ;
31265: LD_VAR 0 3
31269: PPUSH
31270: CALL_OW 64
// end ;
31274: PPOPN 3
31276: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31277: LD_EXP 98
31281: IFFALSE 31397
31283: GO 31285
31285: DISABLE
31286: LD_INT 0
31288: PPUSH
31289: PPUSH
31290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31291: LD_ADDR_VAR 0 2
31295: PUSH
31296: LD_INT 81
31298: PUSH
31299: LD_OWVAR 2
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 21
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PPUSH
31322: CALL_OW 69
31326: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31327: LD_STRING playComputer()
31329: PPUSH
31330: CALL_OW 559
// if not tmp then
31334: LD_VAR 0 2
31338: NOT
31339: IFFALSE 31343
// exit ;
31341: GO 31397
// for i in tmp do
31343: LD_ADDR_VAR 0 1
31347: PUSH
31348: LD_VAR 0 2
31352: PUSH
31353: FOR_IN
31354: IFFALSE 31395
// for j := 1 to 4 do
31356: LD_ADDR_VAR 0 3
31360: PUSH
31361: DOUBLE
31362: LD_INT 1
31364: DEC
31365: ST_TO_ADDR
31366: LD_INT 4
31368: PUSH
31369: FOR_TO
31370: IFFALSE 31391
// SetSkill ( i , j , 10 ) ;
31372: LD_VAR 0 1
31376: PPUSH
31377: LD_VAR 0 3
31381: PPUSH
31382: LD_INT 10
31384: PPUSH
31385: CALL_OW 237
31389: GO 31369
31391: POP
31392: POP
31393: GO 31353
31395: POP
31396: POP
// end ;
31397: PPOPN 3
31399: END
// every 0 0$1 trigger s30 do var i , tmp ;
31400: LD_EXP 99
31404: IFFALSE 31473
31406: GO 31408
31408: DISABLE
31409: LD_INT 0
31411: PPUSH
31412: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31413: LD_ADDR_VAR 0 2
31417: PUSH
31418: LD_INT 22
31420: PUSH
31421: LD_OWVAR 2
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PPUSH
31430: CALL_OW 69
31434: ST_TO_ADDR
// if not tmp then
31435: LD_VAR 0 2
31439: NOT
31440: IFFALSE 31444
// exit ;
31442: GO 31473
// for i in tmp do
31444: LD_ADDR_VAR 0 1
31448: PUSH
31449: LD_VAR 0 2
31453: PUSH
31454: FOR_IN
31455: IFFALSE 31471
// SetLives ( i , 300 ) ;
31457: LD_VAR 0 1
31461: PPUSH
31462: LD_INT 300
31464: PPUSH
31465: CALL_OW 234
31469: GO 31454
31471: POP
31472: POP
// end ;
31473: PPOPN 2
31475: END
// every 0 0$1 trigger s60 do var i , tmp ;
31476: LD_EXP 100
31480: IFFALSE 31549
31482: GO 31484
31484: DISABLE
31485: LD_INT 0
31487: PPUSH
31488: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31489: LD_ADDR_VAR 0 2
31493: PUSH
31494: LD_INT 22
31496: PUSH
31497: LD_OWVAR 2
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PPUSH
31506: CALL_OW 69
31510: ST_TO_ADDR
// if not tmp then
31511: LD_VAR 0 2
31515: NOT
31516: IFFALSE 31520
// exit ;
31518: GO 31549
// for i in tmp do
31520: LD_ADDR_VAR 0 1
31524: PUSH
31525: LD_VAR 0 2
31529: PUSH
31530: FOR_IN
31531: IFFALSE 31547
// SetLives ( i , 600 ) ;
31533: LD_VAR 0 1
31537: PPUSH
31538: LD_INT 600
31540: PPUSH
31541: CALL_OW 234
31545: GO 31530
31547: POP
31548: POP
// end ;
31549: PPOPN 2
31551: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31552: LD_INT 0
31554: PPUSH
// case cmd of 301 :
31555: LD_VAR 0 1
31559: PUSH
31560: LD_INT 301
31562: DOUBLE
31563: EQUAL
31564: IFTRUE 31568
31566: GO 31600
31568: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31569: LD_VAR 0 6
31573: PPUSH
31574: LD_VAR 0 7
31578: PPUSH
31579: LD_VAR 0 8
31583: PPUSH
31584: LD_VAR 0 4
31588: PPUSH
31589: LD_VAR 0 5
31593: PPUSH
31594: CALL 32813 0 5
31598: GO 31721
31600: LD_INT 302
31602: DOUBLE
31603: EQUAL
31604: IFTRUE 31608
31606: GO 31645
31608: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31609: LD_VAR 0 6
31613: PPUSH
31614: LD_VAR 0 7
31618: PPUSH
31619: LD_VAR 0 8
31623: PPUSH
31624: LD_VAR 0 9
31628: PPUSH
31629: LD_VAR 0 4
31633: PPUSH
31634: LD_VAR 0 5
31638: PPUSH
31639: CALL 32904 0 6
31643: GO 31721
31645: LD_INT 303
31647: DOUBLE
31648: EQUAL
31649: IFTRUE 31653
31651: GO 31690
31653: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31654: LD_VAR 0 6
31658: PPUSH
31659: LD_VAR 0 7
31663: PPUSH
31664: LD_VAR 0 8
31668: PPUSH
31669: LD_VAR 0 9
31673: PPUSH
31674: LD_VAR 0 4
31678: PPUSH
31679: LD_VAR 0 5
31683: PPUSH
31684: CALL 31726 0 6
31688: GO 31721
31690: LD_INT 304
31692: DOUBLE
31693: EQUAL
31694: IFTRUE 31698
31696: GO 31720
31698: POP
// hHackTeleport ( unit , x , y ) ; end ;
31699: LD_VAR 0 2
31703: PPUSH
31704: LD_VAR 0 4
31708: PPUSH
31709: LD_VAR 0 5
31713: PPUSH
31714: CALL 33497 0 3
31718: GO 31721
31720: POP
// end ;
31721: LD_VAR 0 12
31725: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31726: LD_INT 0
31728: PPUSH
31729: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31730: LD_VAR 0 1
31734: PUSH
31735: LD_INT 1
31737: LESS
31738: IFTRUE 31750
31740: PUSH
31741: LD_VAR 0 1
31745: PUSH
31746: LD_INT 3
31748: GREATER
31749: OR
31750: IFTRUE 31768
31752: PUSH
31753: LD_VAR 0 5
31757: PPUSH
31758: LD_VAR 0 6
31762: PPUSH
31763: CALL_OW 428
31767: OR
31768: IFFALSE 31772
// exit ;
31770: GO 32500
// uc_side := your_side ;
31772: LD_ADDR_OWVAR 20
31776: PUSH
31777: LD_OWVAR 2
31781: ST_TO_ADDR
// uc_nation := nation ;
31782: LD_ADDR_OWVAR 21
31786: PUSH
31787: LD_VAR 0 1
31791: ST_TO_ADDR
// bc_level = 1 ;
31792: LD_ADDR_OWVAR 43
31796: PUSH
31797: LD_INT 1
31799: ST_TO_ADDR
// case btype of 1 :
31800: LD_VAR 0 2
31804: PUSH
31805: LD_INT 1
31807: DOUBLE
31808: EQUAL
31809: IFTRUE 31813
31811: GO 31824
31813: POP
// bc_type := b_depot ; 2 :
31814: LD_ADDR_OWVAR 42
31818: PUSH
31819: LD_INT 0
31821: ST_TO_ADDR
31822: GO 32444
31824: LD_INT 2
31826: DOUBLE
31827: EQUAL
31828: IFTRUE 31832
31830: GO 31843
31832: POP
// bc_type := b_warehouse ; 3 :
31833: LD_ADDR_OWVAR 42
31837: PUSH
31838: LD_INT 1
31840: ST_TO_ADDR
31841: GO 32444
31843: LD_INT 3
31845: DOUBLE
31846: EQUAL
31847: IFTRUE 31851
31849: GO 31862
31851: POP
// bc_type := b_lab ; 4 .. 9 :
31852: LD_ADDR_OWVAR 42
31856: PUSH
31857: LD_INT 6
31859: ST_TO_ADDR
31860: GO 32444
31862: LD_INT 4
31864: DOUBLE
31865: GREATEREQUAL
31866: IFFALSE 31874
31868: LD_INT 9
31870: DOUBLE
31871: LESSEQUAL
31872: IFTRUE 31876
31874: GO 31936
31876: POP
// begin bc_type := b_lab_half ;
31877: LD_ADDR_OWVAR 42
31881: PUSH
31882: LD_INT 7
31884: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31885: LD_ADDR_OWVAR 44
31889: PUSH
31890: LD_INT 10
31892: PUSH
31893: LD_INT 11
31895: PUSH
31896: LD_INT 12
31898: PUSH
31899: LD_INT 15
31901: PUSH
31902: LD_INT 14
31904: PUSH
31905: LD_INT 13
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: PUSH
31916: LD_VAR 0 2
31920: PUSH
31921: LD_INT 3
31923: MINUS
31924: ARRAY
31925: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
31926: LD_ADDR_OWVAR 45
31930: PUSH
31931: LD_INT 9
31933: ST_TO_ADDR
// end ; 10 .. 13 :
31934: GO 32444
31936: LD_INT 10
31938: DOUBLE
31939: GREATEREQUAL
31940: IFFALSE 31948
31942: LD_INT 13
31944: DOUBLE
31945: LESSEQUAL
31946: IFTRUE 31950
31948: GO 32027
31950: POP
// begin bc_type := b_lab_full ;
31951: LD_ADDR_OWVAR 42
31955: PUSH
31956: LD_INT 8
31958: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31959: LD_ADDR_OWVAR 44
31963: PUSH
31964: LD_INT 10
31966: PUSH
31967: LD_INT 12
31969: PUSH
31970: LD_INT 14
31972: PUSH
31973: LD_INT 13
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: PUSH
31982: LD_VAR 0 2
31986: PUSH
31987: LD_INT 9
31989: MINUS
31990: ARRAY
31991: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31992: LD_ADDR_OWVAR 45
31996: PUSH
31997: LD_INT 11
31999: PUSH
32000: LD_INT 15
32002: PUSH
32003: LD_INT 12
32005: PUSH
32006: LD_INT 15
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: PUSH
32015: LD_VAR 0 2
32019: PUSH
32020: LD_INT 9
32022: MINUS
32023: ARRAY
32024: ST_TO_ADDR
// end ; 14 :
32025: GO 32444
32027: LD_INT 14
32029: DOUBLE
32030: EQUAL
32031: IFTRUE 32035
32033: GO 32046
32035: POP
// bc_type := b_workshop ; 15 :
32036: LD_ADDR_OWVAR 42
32040: PUSH
32041: LD_INT 2
32043: ST_TO_ADDR
32044: GO 32444
32046: LD_INT 15
32048: DOUBLE
32049: EQUAL
32050: IFTRUE 32054
32052: GO 32065
32054: POP
// bc_type := b_factory ; 16 :
32055: LD_ADDR_OWVAR 42
32059: PUSH
32060: LD_INT 3
32062: ST_TO_ADDR
32063: GO 32444
32065: LD_INT 16
32067: DOUBLE
32068: EQUAL
32069: IFTRUE 32073
32071: GO 32084
32073: POP
// bc_type := b_ext_gun ; 17 :
32074: LD_ADDR_OWVAR 42
32078: PUSH
32079: LD_INT 17
32081: ST_TO_ADDR
32082: GO 32444
32084: LD_INT 17
32086: DOUBLE
32087: EQUAL
32088: IFTRUE 32092
32090: GO 32120
32092: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32093: LD_ADDR_OWVAR 42
32097: PUSH
32098: LD_INT 19
32100: PUSH
32101: LD_INT 23
32103: PUSH
32104: LD_INT 19
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: LIST
32111: PUSH
32112: LD_VAR 0 1
32116: ARRAY
32117: ST_TO_ADDR
32118: GO 32444
32120: LD_INT 18
32122: DOUBLE
32123: EQUAL
32124: IFTRUE 32128
32126: GO 32139
32128: POP
// bc_type := b_ext_radar ; 19 :
32129: LD_ADDR_OWVAR 42
32133: PUSH
32134: LD_INT 20
32136: ST_TO_ADDR
32137: GO 32444
32139: LD_INT 19
32141: DOUBLE
32142: EQUAL
32143: IFTRUE 32147
32145: GO 32158
32147: POP
// bc_type := b_ext_radio ; 20 :
32148: LD_ADDR_OWVAR 42
32152: PUSH
32153: LD_INT 22
32155: ST_TO_ADDR
32156: GO 32444
32158: LD_INT 20
32160: DOUBLE
32161: EQUAL
32162: IFTRUE 32166
32164: GO 32177
32166: POP
// bc_type := b_ext_siberium ; 21 :
32167: LD_ADDR_OWVAR 42
32171: PUSH
32172: LD_INT 21
32174: ST_TO_ADDR
32175: GO 32444
32177: LD_INT 21
32179: DOUBLE
32180: EQUAL
32181: IFTRUE 32185
32183: GO 32196
32185: POP
// bc_type := b_ext_computer ; 22 :
32186: LD_ADDR_OWVAR 42
32190: PUSH
32191: LD_INT 24
32193: ST_TO_ADDR
32194: GO 32444
32196: LD_INT 22
32198: DOUBLE
32199: EQUAL
32200: IFTRUE 32204
32202: GO 32215
32204: POP
// bc_type := b_ext_track ; 23 :
32205: LD_ADDR_OWVAR 42
32209: PUSH
32210: LD_INT 16
32212: ST_TO_ADDR
32213: GO 32444
32215: LD_INT 23
32217: DOUBLE
32218: EQUAL
32219: IFTRUE 32223
32221: GO 32234
32223: POP
// bc_type := b_ext_laser ; 24 :
32224: LD_ADDR_OWVAR 42
32228: PUSH
32229: LD_INT 25
32231: ST_TO_ADDR
32232: GO 32444
32234: LD_INT 24
32236: DOUBLE
32237: EQUAL
32238: IFTRUE 32242
32240: GO 32253
32242: POP
// bc_type := b_control_tower ; 25 :
32243: LD_ADDR_OWVAR 42
32247: PUSH
32248: LD_INT 36
32250: ST_TO_ADDR
32251: GO 32444
32253: LD_INT 25
32255: DOUBLE
32256: EQUAL
32257: IFTRUE 32261
32259: GO 32272
32261: POP
// bc_type := b_breastwork ; 26 :
32262: LD_ADDR_OWVAR 42
32266: PUSH
32267: LD_INT 31
32269: ST_TO_ADDR
32270: GO 32444
32272: LD_INT 26
32274: DOUBLE
32275: EQUAL
32276: IFTRUE 32280
32278: GO 32291
32280: POP
// bc_type := b_bunker ; 27 :
32281: LD_ADDR_OWVAR 42
32285: PUSH
32286: LD_INT 32
32288: ST_TO_ADDR
32289: GO 32444
32291: LD_INT 27
32293: DOUBLE
32294: EQUAL
32295: IFTRUE 32299
32297: GO 32310
32299: POP
// bc_type := b_turret ; 28 :
32300: LD_ADDR_OWVAR 42
32304: PUSH
32305: LD_INT 33
32307: ST_TO_ADDR
32308: GO 32444
32310: LD_INT 28
32312: DOUBLE
32313: EQUAL
32314: IFTRUE 32318
32316: GO 32329
32318: POP
// bc_type := b_armoury ; 29 :
32319: LD_ADDR_OWVAR 42
32323: PUSH
32324: LD_INT 4
32326: ST_TO_ADDR
32327: GO 32444
32329: LD_INT 29
32331: DOUBLE
32332: EQUAL
32333: IFTRUE 32337
32335: GO 32348
32337: POP
// bc_type := b_barracks ; 30 :
32338: LD_ADDR_OWVAR 42
32342: PUSH
32343: LD_INT 5
32345: ST_TO_ADDR
32346: GO 32444
32348: LD_INT 30
32350: DOUBLE
32351: EQUAL
32352: IFTRUE 32356
32354: GO 32367
32356: POP
// bc_type := b_solar_power ; 31 :
32357: LD_ADDR_OWVAR 42
32361: PUSH
32362: LD_INT 27
32364: ST_TO_ADDR
32365: GO 32444
32367: LD_INT 31
32369: DOUBLE
32370: EQUAL
32371: IFTRUE 32375
32373: GO 32386
32375: POP
// bc_type := b_oil_power ; 32 :
32376: LD_ADDR_OWVAR 42
32380: PUSH
32381: LD_INT 26
32383: ST_TO_ADDR
32384: GO 32444
32386: LD_INT 32
32388: DOUBLE
32389: EQUAL
32390: IFTRUE 32394
32392: GO 32405
32394: POP
// bc_type := b_siberite_power ; 33 :
32395: LD_ADDR_OWVAR 42
32399: PUSH
32400: LD_INT 28
32402: ST_TO_ADDR
32403: GO 32444
32405: LD_INT 33
32407: DOUBLE
32408: EQUAL
32409: IFTRUE 32413
32411: GO 32424
32413: POP
// bc_type := b_oil_mine ; 34 :
32414: LD_ADDR_OWVAR 42
32418: PUSH
32419: LD_INT 29
32421: ST_TO_ADDR
32422: GO 32444
32424: LD_INT 34
32426: DOUBLE
32427: EQUAL
32428: IFTRUE 32432
32430: GO 32443
32432: POP
// bc_type := b_siberite_mine ; end ;
32433: LD_ADDR_OWVAR 42
32437: PUSH
32438: LD_INT 30
32440: ST_TO_ADDR
32441: GO 32444
32443: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32444: LD_ADDR_VAR 0 8
32448: PUSH
32449: LD_VAR 0 5
32453: PPUSH
32454: LD_VAR 0 6
32458: PPUSH
32459: LD_VAR 0 3
32463: PPUSH
32464: CALL_OW 47
32468: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32469: LD_OWVAR 42
32473: PUSH
32474: LD_INT 32
32476: PUSH
32477: LD_INT 33
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: IN
32484: IFFALSE 32500
// PlaceWeaponTurret ( b , weapon ) ;
32486: LD_VAR 0 8
32490: PPUSH
32491: LD_VAR 0 4
32495: PPUSH
32496: CALL_OW 431
// end ;
32500: LD_VAR 0 7
32504: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32505: LD_INT 0
32507: PPUSH
32508: PPUSH
32509: PPUSH
32510: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32511: LD_ADDR_VAR 0 4
32515: PUSH
32516: LD_INT 22
32518: PUSH
32519: LD_OWVAR 2
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 2
32530: PUSH
32531: LD_INT 30
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 30
32543: PUSH
32544: LD_INT 1
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: LIST
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PPUSH
32560: CALL_OW 69
32564: ST_TO_ADDR
// if not tmp then
32565: LD_VAR 0 4
32569: NOT
32570: IFFALSE 32574
// exit ;
32572: GO 32633
// for i in tmp do
32574: LD_ADDR_VAR 0 2
32578: PUSH
32579: LD_VAR 0 4
32583: PUSH
32584: FOR_IN
32585: IFFALSE 32631
// for j = 1 to 3 do
32587: LD_ADDR_VAR 0 3
32591: PUSH
32592: DOUBLE
32593: LD_INT 1
32595: DEC
32596: ST_TO_ADDR
32597: LD_INT 3
32599: PUSH
32600: FOR_TO
32601: IFFALSE 32627
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32603: LD_VAR 0 2
32607: PPUSH
32608: CALL_OW 274
32612: PPUSH
32613: LD_VAR 0 3
32617: PPUSH
32618: LD_INT 99999
32620: PPUSH
32621: CALL_OW 277
32625: GO 32600
32627: POP
32628: POP
32629: GO 32584
32631: POP
32632: POP
// end ;
32633: LD_VAR 0 1
32637: RET
// export function hHackSetLevel10 ; var i , j ; begin
32638: LD_INT 0
32640: PPUSH
32641: PPUSH
32642: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32643: LD_ADDR_VAR 0 2
32647: PUSH
32648: LD_INT 21
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PPUSH
32658: CALL_OW 69
32662: PUSH
32663: FOR_IN
32664: IFFALSE 32716
// if IsSelected ( i ) then
32666: LD_VAR 0 2
32670: PPUSH
32671: CALL_OW 306
32675: IFFALSE 32714
// begin for j := 1 to 4 do
32677: LD_ADDR_VAR 0 3
32681: PUSH
32682: DOUBLE
32683: LD_INT 1
32685: DEC
32686: ST_TO_ADDR
32687: LD_INT 4
32689: PUSH
32690: FOR_TO
32691: IFFALSE 32712
// SetSkill ( i , j , 10 ) ;
32693: LD_VAR 0 2
32697: PPUSH
32698: LD_VAR 0 3
32702: PPUSH
32703: LD_INT 10
32705: PPUSH
32706: CALL_OW 237
32710: GO 32690
32712: POP
32713: POP
// end ;
32714: GO 32663
32716: POP
32717: POP
// end ;
32718: LD_VAR 0 1
32722: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32723: LD_INT 0
32725: PPUSH
32726: PPUSH
32727: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32728: LD_ADDR_VAR 0 2
32732: PUSH
32733: LD_INT 22
32735: PUSH
32736: LD_OWVAR 2
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 21
32747: PUSH
32748: LD_INT 1
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PPUSH
32759: CALL_OW 69
32763: PUSH
32764: FOR_IN
32765: IFFALSE 32806
// begin for j := 1 to 4 do
32767: LD_ADDR_VAR 0 3
32771: PUSH
32772: DOUBLE
32773: LD_INT 1
32775: DEC
32776: ST_TO_ADDR
32777: LD_INT 4
32779: PUSH
32780: FOR_TO
32781: IFFALSE 32802
// SetSkill ( i , j , 10 ) ;
32783: LD_VAR 0 2
32787: PPUSH
32788: LD_VAR 0 3
32792: PPUSH
32793: LD_INT 10
32795: PPUSH
32796: CALL_OW 237
32800: GO 32780
32802: POP
32803: POP
// end ;
32804: GO 32764
32806: POP
32807: POP
// end ;
32808: LD_VAR 0 1
32812: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32813: LD_INT 0
32815: PPUSH
// uc_side := your_side ;
32816: LD_ADDR_OWVAR 20
32820: PUSH
32821: LD_OWVAR 2
32825: ST_TO_ADDR
// uc_nation := nation ;
32826: LD_ADDR_OWVAR 21
32830: PUSH
32831: LD_VAR 0 1
32835: ST_TO_ADDR
// InitHc ;
32836: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32840: LD_INT 0
32842: PPUSH
32843: LD_VAR 0 2
32847: PPUSH
32848: LD_VAR 0 3
32852: PPUSH
32853: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32857: LD_VAR 0 4
32861: PPUSH
32862: LD_VAR 0 5
32866: PPUSH
32867: CALL_OW 428
32871: PUSH
32872: LD_INT 0
32874: EQUAL
32875: IFFALSE 32899
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32877: CALL_OW 44
32881: PPUSH
32882: LD_VAR 0 4
32886: PPUSH
32887: LD_VAR 0 5
32891: PPUSH
32892: LD_INT 1
32894: PPUSH
32895: CALL_OW 48
// end ;
32899: LD_VAR 0 6
32903: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32904: LD_INT 0
32906: PPUSH
32907: PPUSH
// uc_side := your_side ;
32908: LD_ADDR_OWVAR 20
32912: PUSH
32913: LD_OWVAR 2
32917: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32918: LD_VAR 0 1
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 2
32928: PUSH
32929: LD_INT 3
32931: PUSH
32932: LD_INT 4
32934: PUSH
32935: LD_INT 5
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: IN
32945: IFFALSE 32957
// uc_nation := nation_american else
32947: LD_ADDR_OWVAR 21
32951: PUSH
32952: LD_INT 1
32954: ST_TO_ADDR
32955: GO 33000
// if chassis in [ 11 , 12 , 13 , 14 ] then
32957: LD_VAR 0 1
32961: PUSH
32962: LD_INT 11
32964: PUSH
32965: LD_INT 12
32967: PUSH
32968: LD_INT 13
32970: PUSH
32971: LD_INT 14
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: IN
32980: IFFALSE 32992
// uc_nation := nation_arabian else
32982: LD_ADDR_OWVAR 21
32986: PUSH
32987: LD_INT 2
32989: ST_TO_ADDR
32990: GO 33000
// uc_nation := nation_russian ;
32992: LD_ADDR_OWVAR 21
32996: PUSH
32997: LD_INT 3
32999: ST_TO_ADDR
// vc_chassis := chassis ;
33000: LD_ADDR_OWVAR 37
33004: PUSH
33005: LD_VAR 0 1
33009: ST_TO_ADDR
// vc_engine := engine ;
33010: LD_ADDR_OWVAR 39
33014: PUSH
33015: LD_VAR 0 2
33019: ST_TO_ADDR
// vc_control := control ;
33020: LD_ADDR_OWVAR 38
33024: PUSH
33025: LD_VAR 0 3
33029: ST_TO_ADDR
// vc_weapon := weapon ;
33030: LD_ADDR_OWVAR 40
33034: PUSH
33035: LD_VAR 0 4
33039: ST_TO_ADDR
// un := CreateVehicle ;
33040: LD_ADDR_VAR 0 8
33044: PUSH
33045: CALL_OW 45
33049: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33050: LD_VAR 0 8
33054: PPUSH
33055: LD_INT 0
33057: PPUSH
33058: LD_INT 5
33060: PPUSH
33061: CALL_OW 12
33065: PPUSH
33066: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33070: LD_VAR 0 8
33074: PPUSH
33075: LD_VAR 0 5
33079: PPUSH
33080: LD_VAR 0 6
33084: PPUSH
33085: LD_INT 1
33087: PPUSH
33088: CALL_OW 48
// end ;
33092: LD_VAR 0 7
33096: RET
// export hInvincible ; every 1 do
33097: GO 33099
33099: DISABLE
// hInvincible := [ ] ;
33100: LD_ADDR_EXP 101
33104: PUSH
33105: EMPTY
33106: ST_TO_ADDR
33107: END
// every 10 do var i ;
33108: GO 33110
33110: DISABLE
33111: LD_INT 0
33113: PPUSH
// begin enable ;
33114: ENABLE
// if not hInvincible then
33115: LD_EXP 101
33119: NOT
33120: IFFALSE 33124
// exit ;
33122: GO 33168
// for i in hInvincible do
33124: LD_ADDR_VAR 0 1
33128: PUSH
33129: LD_EXP 101
33133: PUSH
33134: FOR_IN
33135: IFFALSE 33166
// if GetLives ( i ) < 1000 then
33137: LD_VAR 0 1
33141: PPUSH
33142: CALL_OW 256
33146: PUSH
33147: LD_INT 1000
33149: LESS
33150: IFFALSE 33164
// SetLives ( i , 1000 ) ;
33152: LD_VAR 0 1
33156: PPUSH
33157: LD_INT 1000
33159: PPUSH
33160: CALL_OW 234
33164: GO 33134
33166: POP
33167: POP
// end ;
33168: PPOPN 1
33170: END
// export function hHackInvincible ; var i ; begin
33171: LD_INT 0
33173: PPUSH
33174: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33175: LD_ADDR_VAR 0 2
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: LD_INT 21
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 21
33195: PUSH
33196: LD_INT 2
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: LIST
33207: PPUSH
33208: CALL_OW 69
33212: PUSH
33213: FOR_IN
33214: IFFALSE 33275
// if IsSelected ( i ) then
33216: LD_VAR 0 2
33220: PPUSH
33221: CALL_OW 306
33225: IFFALSE 33273
// begin if i in hInvincible then
33227: LD_VAR 0 2
33231: PUSH
33232: LD_EXP 101
33236: IN
33237: IFFALSE 33257
// hInvincible := hInvincible diff i else
33239: LD_ADDR_EXP 101
33243: PUSH
33244: LD_EXP 101
33248: PUSH
33249: LD_VAR 0 2
33253: DIFF
33254: ST_TO_ADDR
33255: GO 33273
// hInvincible := hInvincible union i ;
33257: LD_ADDR_EXP 101
33261: PUSH
33262: LD_EXP 101
33266: PUSH
33267: LD_VAR 0 2
33271: UNION
33272: ST_TO_ADDR
// end ;
33273: GO 33213
33275: POP
33276: POP
// end ;
33277: LD_VAR 0 1
33281: RET
// export function hHackInvisible ; var i , j ; begin
33282: LD_INT 0
33284: PPUSH
33285: PPUSH
33286: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33287: LD_ADDR_VAR 0 2
33291: PUSH
33292: LD_INT 21
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PPUSH
33302: CALL_OW 69
33306: PUSH
33307: FOR_IN
33308: IFFALSE 33332
// if IsSelected ( i ) then
33310: LD_VAR 0 2
33314: PPUSH
33315: CALL_OW 306
33319: IFFALSE 33330
// ComForceInvisible ( i ) ;
33321: LD_VAR 0 2
33325: PPUSH
33326: CALL_OW 496
33330: GO 33307
33332: POP
33333: POP
// end ;
33334: LD_VAR 0 1
33338: RET
// export function hHackChangeYourSide ; begin
33339: LD_INT 0
33341: PPUSH
// if your_side = 8 then
33342: LD_OWVAR 2
33346: PUSH
33347: LD_INT 8
33349: EQUAL
33350: IFFALSE 33362
// your_side := 0 else
33352: LD_ADDR_OWVAR 2
33356: PUSH
33357: LD_INT 0
33359: ST_TO_ADDR
33360: GO 33376
// your_side := your_side + 1 ;
33362: LD_ADDR_OWVAR 2
33366: PUSH
33367: LD_OWVAR 2
33371: PUSH
33372: LD_INT 1
33374: PLUS
33375: ST_TO_ADDR
// end ;
33376: LD_VAR 0 1
33380: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33381: LD_INT 0
33383: PPUSH
33384: PPUSH
33385: PPUSH
// for i in all_units do
33386: LD_ADDR_VAR 0 2
33390: PUSH
33391: LD_OWVAR 3
33395: PUSH
33396: FOR_IN
33397: IFFALSE 33475
// if IsSelected ( i ) then
33399: LD_VAR 0 2
33403: PPUSH
33404: CALL_OW 306
33408: IFFALSE 33473
// begin j := GetSide ( i ) ;
33410: LD_ADDR_VAR 0 3
33414: PUSH
33415: LD_VAR 0 2
33419: PPUSH
33420: CALL_OW 255
33424: ST_TO_ADDR
// if j = 8 then
33425: LD_VAR 0 3
33429: PUSH
33430: LD_INT 8
33432: EQUAL
33433: IFFALSE 33445
// j := 0 else
33435: LD_ADDR_VAR 0 3
33439: PUSH
33440: LD_INT 0
33442: ST_TO_ADDR
33443: GO 33459
// j := j + 1 ;
33445: LD_ADDR_VAR 0 3
33449: PUSH
33450: LD_VAR 0 3
33454: PUSH
33455: LD_INT 1
33457: PLUS
33458: ST_TO_ADDR
// SetSide ( i , j ) ;
33459: LD_VAR 0 2
33463: PPUSH
33464: LD_VAR 0 3
33468: PPUSH
33469: CALL_OW 235
// end ;
33473: GO 33396
33475: POP
33476: POP
// end ;
33477: LD_VAR 0 1
33481: RET
// export function hHackFog ; begin
33482: LD_INT 0
33484: PPUSH
// FogOff ( true ) ;
33485: LD_INT 1
33487: PPUSH
33488: CALL_OW 344
// end ;
33492: LD_VAR 0 1
33496: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33497: LD_INT 0
33499: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33500: LD_VAR 0 1
33504: PPUSH
33505: LD_VAR 0 2
33509: PPUSH
33510: LD_VAR 0 3
33514: PPUSH
33515: LD_INT 1
33517: PPUSH
33518: LD_INT 1
33520: PPUSH
33521: CALL_OW 483
// CenterOnXY ( x , y ) ;
33525: LD_VAR 0 2
33529: PPUSH
33530: LD_VAR 0 3
33534: PPUSH
33535: CALL_OW 84
// end ;
33539: LD_VAR 0 4
33543: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33544: LD_INT 0
33546: PPUSH
33547: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33548: LD_VAR 0 1
33552: NOT
33553: IFTRUE 33572
33555: PUSH
33556: LD_VAR 0 2
33560: PPUSH
33561: LD_VAR 0 3
33565: PPUSH
33566: CALL_OW 488
33570: NOT
33571: OR
33572: IFTRUE 33607
33574: PUSH
33575: LD_VAR 0 1
33579: PPUSH
33580: CALL_OW 266
33584: PUSH
33585: LD_INT 3
33587: NONEQUAL
33588: IFFALSE 33606
33590: PUSH
33591: LD_VAR 0 1
33595: PPUSH
33596: CALL_OW 247
33600: PUSH
33601: LD_INT 1
33603: EQUAL
33604: NOT
33605: AND
33606: OR
33607: IFFALSE 33611
// exit ;
33609: GO 33893
// if GetType ( factory ) = unit_human then
33611: LD_VAR 0 1
33615: PPUSH
33616: CALL_OW 247
33620: PUSH
33621: LD_INT 1
33623: EQUAL
33624: IFFALSE 33641
// factory := IsInUnit ( factory ) ;
33626: LD_ADDR_VAR 0 1
33630: PUSH
33631: LD_VAR 0 1
33635: PPUSH
33636: CALL_OW 310
33640: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33641: LD_VAR 0 1
33645: PPUSH
33646: CALL_OW 266
33650: PUSH
33651: LD_INT 3
33653: NONEQUAL
33654: IFFALSE 33658
// exit ;
33656: GO 33893
// for i := 1 to Count ( factoryWaypoints ) do
33658: LD_ADDR_VAR 0 5
33662: PUSH
33663: DOUBLE
33664: LD_INT 1
33666: DEC
33667: ST_TO_ADDR
33668: LD_EXP 102
33672: PPUSH
33673: CALL 43697 0 1
33677: PUSH
33678: FOR_TO
33679: IFFALSE 33841
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
33681: LD_VAR 0 2
33685: PPUSH
33686: LD_VAR 0 3
33690: PPUSH
33691: CALL_OW 428
33695: PUSH
33696: LD_EXP 102
33700: PUSH
33701: LD_VAR 0 5
33705: ARRAY
33706: PUSH
33707: LD_INT 2
33709: ARRAY
33710: EQUAL
33711: IFFALSE 33743
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
33713: LD_ADDR_EXP 102
33717: PUSH
33718: LD_EXP 102
33722: PPUSH
33723: LD_VAR 0 5
33727: PPUSH
33728: CALL_OW 3
33732: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33733: CALL 33898 0 0
// exit ;
33737: POP
33738: POP
33739: GO 33893
// end else
33741: GO 33839
// if factory = factoryWaypoints [ i ] [ 2 ] then
33743: LD_VAR 0 1
33747: PUSH
33748: LD_EXP 102
33752: PUSH
33753: LD_VAR 0 5
33757: ARRAY
33758: PUSH
33759: LD_INT 2
33761: ARRAY
33762: EQUAL
33763: IFFALSE 33839
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
33765: LD_ADDR_EXP 102
33769: PUSH
33770: LD_EXP 102
33774: PPUSH
33775: LD_VAR 0 5
33779: PPUSH
33780: CALL_OW 3
33784: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
33785: LD_ADDR_EXP 102
33789: PUSH
33790: LD_EXP 102
33794: PPUSH
33795: LD_VAR 0 1
33799: PPUSH
33800: CALL_OW 255
33804: PUSH
33805: LD_VAR 0 1
33809: PUSH
33810: LD_VAR 0 2
33814: PUSH
33815: LD_VAR 0 3
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: PPUSH
33826: CALL 79673 0 2
33830: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33831: CALL 33898 0 0
// exit ;
33835: POP
33836: POP
33837: GO 33893
// end ; end ;
33839: GO 33678
33841: POP
33842: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
33843: LD_ADDR_EXP 102
33847: PUSH
33848: LD_EXP 102
33852: PPUSH
33853: LD_VAR 0 1
33857: PPUSH
33858: CALL_OW 255
33862: PUSH
33863: LD_VAR 0 1
33867: PUSH
33868: LD_VAR 0 2
33872: PUSH
33873: LD_VAR 0 3
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: PPUSH
33884: CALL 79673 0 2
33888: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33889: CALL 33898 0 0
// end ;
33893: LD_VAR 0 4
33897: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33898: LD_INT 0
33900: PPUSH
33901: PPUSH
33902: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33903: LD_STRING resetFactoryWaypoint();
33905: PPUSH
33906: CALL_OW 559
// if factoryWaypoints then
33910: LD_EXP 102
33914: IFFALSE 34035
// begin list := factoryWaypoints ;
33916: LD_ADDR_VAR 0 3
33920: PUSH
33921: LD_EXP 102
33925: ST_TO_ADDR
// for i := 1 to list do
33926: LD_ADDR_VAR 0 2
33930: PUSH
33931: DOUBLE
33932: LD_INT 1
33934: DEC
33935: ST_TO_ADDR
33936: LD_VAR 0 3
33940: PUSH
33941: FOR_TO
33942: IFFALSE 34033
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33944: LD_STRING setFactoryWaypointXY(
33946: PUSH
33947: LD_VAR 0 3
33951: PUSH
33952: LD_VAR 0 2
33956: ARRAY
33957: PUSH
33958: LD_INT 1
33960: ARRAY
33961: STR
33962: PUSH
33963: LD_STRING ,
33965: STR
33966: PUSH
33967: LD_VAR 0 3
33971: PUSH
33972: LD_VAR 0 2
33976: ARRAY
33977: PUSH
33978: LD_INT 2
33980: ARRAY
33981: STR
33982: PUSH
33983: LD_STRING ,
33985: STR
33986: PUSH
33987: LD_VAR 0 3
33991: PUSH
33992: LD_VAR 0 2
33996: ARRAY
33997: PUSH
33998: LD_INT 3
34000: ARRAY
34001: STR
34002: PUSH
34003: LD_STRING ,
34005: STR
34006: PUSH
34007: LD_VAR 0 3
34011: PUSH
34012: LD_VAR 0 2
34016: ARRAY
34017: PUSH
34018: LD_INT 4
34020: ARRAY
34021: STR
34022: PUSH
34023: LD_STRING )
34025: STR
34026: PPUSH
34027: CALL_OW 559
34031: GO 33941
34033: POP
34034: POP
// end ; end ;
34035: LD_VAR 0 1
34039: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34040: LD_INT 0
34042: PPUSH
// if HexInfo ( x , y ) = warehouse then
34043: LD_VAR 0 2
34047: PPUSH
34048: LD_VAR 0 3
34052: PPUSH
34053: CALL_OW 428
34057: PUSH
34058: LD_VAR 0 1
34062: EQUAL
34063: IFFALSE 34090
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34065: LD_ADDR_EXP 104
34069: PUSH
34070: LD_EXP 104
34074: PPUSH
34075: LD_VAR 0 1
34079: PPUSH
34080: LD_INT 0
34082: PPUSH
34083: CALL_OW 1
34087: ST_TO_ADDR
34088: GO 34141
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34090: LD_ADDR_EXP 104
34094: PUSH
34095: LD_EXP 104
34099: PPUSH
34100: LD_VAR 0 1
34104: PPUSH
34105: LD_VAR 0 1
34109: PPUSH
34110: CALL_OW 255
34114: PUSH
34115: LD_VAR 0 1
34119: PUSH
34120: LD_VAR 0 2
34124: PUSH
34125: LD_VAR 0 3
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: PPUSH
34136: CALL_OW 1
34140: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34141: CALL 34150 0 0
// end ;
34145: LD_VAR 0 4
34149: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34150: LD_INT 0
34152: PPUSH
34153: PPUSH
34154: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34155: LD_STRING resetWarehouseGatheringPoints();
34157: PPUSH
34158: CALL_OW 559
// if warehouseGatheringPoints then
34162: LD_EXP 104
34166: IFFALSE 34292
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34168: LD_ADDR_VAR 0 3
34172: PUSH
34173: LD_EXP 104
34177: PPUSH
34178: CALL 83607 0 1
34182: ST_TO_ADDR
// for i := 1 to list do
34183: LD_ADDR_VAR 0 2
34187: PUSH
34188: DOUBLE
34189: LD_INT 1
34191: DEC
34192: ST_TO_ADDR
34193: LD_VAR 0 3
34197: PUSH
34198: FOR_TO
34199: IFFALSE 34290
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34201: LD_STRING setWarehouseGatheringPointXY(
34203: PUSH
34204: LD_VAR 0 3
34208: PUSH
34209: LD_VAR 0 2
34213: ARRAY
34214: PUSH
34215: LD_INT 1
34217: ARRAY
34218: STR
34219: PUSH
34220: LD_STRING ,
34222: STR
34223: PUSH
34224: LD_VAR 0 3
34228: PUSH
34229: LD_VAR 0 2
34233: ARRAY
34234: PUSH
34235: LD_INT 2
34237: ARRAY
34238: STR
34239: PUSH
34240: LD_STRING ,
34242: STR
34243: PUSH
34244: LD_VAR 0 3
34248: PUSH
34249: LD_VAR 0 2
34253: ARRAY
34254: PUSH
34255: LD_INT 3
34257: ARRAY
34258: STR
34259: PUSH
34260: LD_STRING ,
34262: STR
34263: PUSH
34264: LD_VAR 0 3
34268: PUSH
34269: LD_VAR 0 2
34273: ARRAY
34274: PUSH
34275: LD_INT 4
34277: ARRAY
34278: STR
34279: PUSH
34280: LD_STRING )
34282: STR
34283: PPUSH
34284: CALL_OW 559
34288: GO 34198
34290: POP
34291: POP
// end ; end ;
34292: LD_VAR 0 1
34296: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34297: LD_EXP 104
34301: IFFALSE 34996
34303: GO 34305
34305: DISABLE
34306: LD_INT 0
34308: PPUSH
34309: PPUSH
34310: PPUSH
34311: PPUSH
34312: PPUSH
34313: PPUSH
34314: PPUSH
34315: PPUSH
34316: PPUSH
// begin enable ;
34317: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34318: LD_ADDR_VAR 0 3
34322: PUSH
34323: LD_EXP 104
34327: PPUSH
34328: CALL 83607 0 1
34332: ST_TO_ADDR
// if not list then
34333: LD_VAR 0 3
34337: NOT
34338: IFFALSE 34342
// exit ;
34340: GO 34996
// for i := 1 to list do
34342: LD_ADDR_VAR 0 1
34346: PUSH
34347: DOUBLE
34348: LD_INT 1
34350: DEC
34351: ST_TO_ADDR
34352: LD_VAR 0 3
34356: PUSH
34357: FOR_TO
34358: IFFALSE 34994
// begin depot := list [ i ] [ 2 ] ;
34360: LD_ADDR_VAR 0 8
34364: PUSH
34365: LD_VAR 0 3
34369: PUSH
34370: LD_VAR 0 1
34374: ARRAY
34375: PUSH
34376: LD_INT 2
34378: ARRAY
34379: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34380: LD_ADDR_VAR 0 5
34384: PUSH
34385: LD_VAR 0 3
34389: PUSH
34390: LD_VAR 0 1
34394: ARRAY
34395: PUSH
34396: LD_INT 1
34398: ARRAY
34399: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34400: LD_VAR 0 8
34404: PPUSH
34405: CALL_OW 301
34409: IFTRUE 34428
34411: PUSH
34412: LD_VAR 0 5
34416: PUSH
34417: LD_VAR 0 8
34421: PPUSH
34422: CALL_OW 255
34426: NONEQUAL
34427: OR
34428: IFFALSE 34457
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34430: LD_ADDR_EXP 104
34434: PUSH
34435: LD_EXP 104
34439: PPUSH
34440: LD_VAR 0 8
34444: PPUSH
34445: LD_INT 0
34447: PPUSH
34448: CALL_OW 1
34452: ST_TO_ADDR
// exit ;
34453: POP
34454: POP
34455: GO 34996
// end ; x := list [ i ] [ 3 ] ;
34457: LD_ADDR_VAR 0 6
34461: PUSH
34462: LD_VAR 0 3
34466: PUSH
34467: LD_VAR 0 1
34471: ARRAY
34472: PUSH
34473: LD_INT 3
34475: ARRAY
34476: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34477: LD_ADDR_VAR 0 7
34481: PUSH
34482: LD_VAR 0 3
34486: PUSH
34487: LD_VAR 0 1
34491: ARRAY
34492: PUSH
34493: LD_INT 4
34495: ARRAY
34496: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34497: LD_ADDR_VAR 0 9
34501: PUSH
34502: LD_VAR 0 6
34506: PPUSH
34507: LD_VAR 0 7
34511: PPUSH
34512: LD_INT 16
34514: PPUSH
34515: CALL 82181 0 3
34519: ST_TO_ADDR
// if not cratesNearbyPoint then
34520: LD_VAR 0 9
34524: NOT
34525: IFFALSE 34531
// exit ;
34527: POP
34528: POP
34529: GO 34996
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34531: LD_ADDR_VAR 0 4
34535: PUSH
34536: LD_INT 22
34538: PUSH
34539: LD_VAR 0 5
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 3
34550: PUSH
34551: LD_INT 60
34553: PUSH
34554: EMPTY
34555: LIST
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 91
34563: PUSH
34564: LD_VAR 0 8
34568: PUSH
34569: LD_INT 6
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 2
34579: PUSH
34580: LD_INT 25
34582: PUSH
34583: LD_INT 2
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 25
34592: PUSH
34593: LD_INT 16
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: LIST
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: PPUSH
34611: CALL_OW 69
34615: PUSH
34616: LD_VAR 0 8
34620: PPUSH
34621: CALL_OW 313
34625: PPUSH
34626: LD_INT 3
34628: PUSH
34629: LD_INT 60
34631: PUSH
34632: EMPTY
34633: LIST
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: PUSH
34642: LD_INT 25
34644: PUSH
34645: LD_INT 2
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 25
34654: PUSH
34655: LD_INT 16
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PPUSH
34671: CALL_OW 72
34675: UNION
34676: ST_TO_ADDR
// if tmp then
34677: LD_VAR 0 4
34681: IFFALSE 34761
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34683: LD_ADDR_VAR 0 4
34687: PUSH
34688: LD_VAR 0 4
34692: PPUSH
34693: LD_INT 3
34695: PPUSH
34696: CALL 79988 0 2
34700: ST_TO_ADDR
// for j in tmp do
34701: LD_ADDR_VAR 0 2
34705: PUSH
34706: LD_VAR 0 4
34710: PUSH
34711: FOR_IN
34712: IFFALSE 34755
// begin if IsInUnit ( j ) then
34714: LD_VAR 0 2
34718: PPUSH
34719: CALL_OW 310
34723: IFFALSE 34734
// ComExit ( j ) ;
34725: LD_VAR 0 2
34729: PPUSH
34730: CALL 80071 0 1
// AddComCollect ( j , x , y ) ;
34734: LD_VAR 0 2
34738: PPUSH
34739: LD_VAR 0 6
34743: PPUSH
34744: LD_VAR 0 7
34748: PPUSH
34749: CALL_OW 177
// end ;
34753: GO 34711
34755: POP
34756: POP
// exit ;
34757: POP
34758: POP
34759: GO 34996
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34761: LD_ADDR_VAR 0 4
34765: PUSH
34766: LD_INT 22
34768: PUSH
34769: LD_VAR 0 5
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 91
34780: PUSH
34781: LD_VAR 0 8
34785: PUSH
34786: LD_INT 8
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 2
34796: PUSH
34797: LD_INT 34
34799: PUSH
34800: LD_INT 12
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 34
34809: PUSH
34810: LD_INT 51
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 34
34819: PUSH
34820: LD_INT 32
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 34
34829: PUSH
34830: LD_INT 89
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: LIST
34848: PPUSH
34849: CALL_OW 69
34853: ST_TO_ADDR
// if tmp then
34854: LD_VAR 0 4
34858: IFFALSE 34992
// begin for j in tmp do
34860: LD_ADDR_VAR 0 2
34864: PUSH
34865: LD_VAR 0 4
34869: PUSH
34870: FOR_IN
34871: IFFALSE 34990
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34873: LD_VAR 0 2
34877: PPUSH
34878: CALL_OW 262
34882: PUSH
34883: LD_INT 3
34885: EQUAL
34886: IFTRUE 34903
34888: PUSH
34889: LD_VAR 0 2
34893: PPUSH
34894: CALL_OW 261
34898: PUSH
34899: LD_INT 20
34901: GREATER
34902: OR
34903: IFFALSE 34917
34905: PUSH
34906: LD_VAR 0 2
34910: PPUSH
34911: CALL_OW 314
34915: NOT
34916: AND
34917: IFFALSE 34947
34919: PUSH
34920: LD_VAR 0 2
34924: PPUSH
34925: CALL_OW 263
34929: PUSH
34930: LD_INT 1
34932: NONEQUAL
34933: IFTRUE 34946
34935: PUSH
34936: LD_VAR 0 2
34940: PPUSH
34941: CALL_OW 311
34945: OR
34946: AND
34947: IFFALSE 34988
// begin ComCollect ( j , x , y ) ;
34949: LD_VAR 0 2
34953: PPUSH
34954: LD_VAR 0 6
34958: PPUSH
34959: LD_VAR 0 7
34963: PPUSH
34964: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34968: LD_VAR 0 2
34972: PPUSH
34973: LD_VAR 0 8
34977: PPUSH
34978: CALL_OW 172
// exit ;
34982: POP
34983: POP
34984: POP
34985: POP
34986: GO 34996
// end ;
34988: GO 34870
34990: POP
34991: POP
// end ; end ;
34992: GO 34357
34994: POP
34995: POP
// end ; end_of_file
34996: PPOPN 9
34998: END
// export function SOS_UnitDestroyed ( un ) ; begin
34999: LD_INT 0
35001: PPUSH
// ComRadiation ( un ) ;
35002: LD_VAR 0 1
35006: PPUSH
35007: CALL 36169 0 1
// end ;
35011: LD_VAR 0 2
35015: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35016: LD_INT 0
35018: PPUSH
// ComRadiation ( un ) ;
35019: LD_VAR 0 1
35023: PPUSH
35024: CALL 36169 0 1
// end ;
35028: LD_VAR 0 2
35032: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35033: LD_INT 0
35035: PPUSH
// end ;
35036: LD_VAR 0 4
35040: RET
// export function SOS_Command ( cmd ) ; begin
35041: LD_INT 0
35043: PPUSH
// end ;
35044: LD_VAR 0 2
35048: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35049: LD_INT 0
35051: PPUSH
// end ;
35052: LD_VAR 0 6
35056: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
35057: LD_INT 0
35059: PPUSH
35060: PPUSH
35061: PPUSH
35062: PPUSH
35063: PPUSH
// if not vehicle or not factory then
35064: LD_VAR 0 1
35068: NOT
35069: IFTRUE 35078
35071: PUSH
35072: LD_VAR 0 2
35076: NOT
35077: OR
35078: IFFALSE 35082
// exit ;
35080: GO 35744
// weapon := GetWeapon ( vehicle ) ;
35082: LD_ADDR_VAR 0 7
35086: PUSH
35087: LD_VAR 0 1
35091: PPUSH
35092: CALL_OW 264
35096: ST_TO_ADDR
// if weapon = ar_miner then
35097: LD_VAR 0 7
35101: PUSH
35102: LD_INT 81
35104: EQUAL
35105: IFFALSE 35162
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
35107: LD_ADDR_EXP 113
35111: PUSH
35112: LD_EXP 113
35116: PPUSH
35117: LD_EXP 113
35121: PUSH
35122: LD_INT 1
35124: PLUS
35125: PPUSH
35126: LD_VAR 0 1
35130: PPUSH
35131: CALL_OW 1
35135: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35136: LD_ADDR_EXP 114
35140: PUSH
35141: LD_EXP 114
35145: PPUSH
35146: LD_EXP 114
35150: PUSH
35151: LD_INT 1
35153: PLUS
35154: PPUSH
35155: EMPTY
35156: PPUSH
35157: CALL_OW 1
35161: ST_TO_ADDR
// end ; if not factoryWaypoints then
35162: LD_EXP 102
35166: NOT
35167: IFFALSE 35171
// exit ;
35169: GO 35744
// for i := 1 to Count ( factoryWaypoints ) do
35171: LD_ADDR_VAR 0 4
35175: PUSH
35176: DOUBLE
35177: LD_INT 1
35179: DEC
35180: ST_TO_ADDR
35181: LD_EXP 102
35185: PPUSH
35186: CALL 43697 0 1
35190: PUSH
35191: FOR_TO
35192: IFFALSE 35742
// if factoryWaypoints [ i ] [ 2 ] = factory then
35194: LD_EXP 102
35198: PUSH
35199: LD_VAR 0 4
35203: ARRAY
35204: PUSH
35205: LD_INT 2
35207: ARRAY
35208: PUSH
35209: LD_VAR 0 2
35213: EQUAL
35214: IFFALSE 35740
// begin if GetControl ( vehicle ) = control_manual then
35216: LD_VAR 0 1
35220: PPUSH
35221: CALL_OW 263
35225: PUSH
35226: LD_INT 1
35228: EQUAL
35229: IFFALSE 35593
// begin driver := IsDrivenBy ( vehicle ) ;
35231: LD_ADDR_VAR 0 5
35235: PUSH
35236: LD_VAR 0 1
35240: PPUSH
35241: CALL_OW 311
35245: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
35246: LD_VAR 0 5
35250: PUSH
35251: LD_EXP 103
35255: IN
35256: IFTRUE 35270
35258: PUSH
35259: LD_VAR 0 1
35263: PUSH
35264: LD_EXP 103
35268: IN
35269: OR
35270: IFFALSE 35276
// exit ;
35272: POP
35273: POP
35274: GO 35744
// if not HasTask ( driver ) then
35276: LD_VAR 0 5
35280: PPUSH
35281: CALL_OW 314
35285: NOT
35286: IFFALSE 35591
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
35288: LD_ADDR_EXP 103
35292: PUSH
35293: LD_EXP 103
35297: PPUSH
35298: LD_VAR 0 5
35302: PPUSH
35303: CALL 79673 0 2
35307: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
35308: LD_ADDR_EXP 103
35312: PUSH
35313: LD_EXP 103
35317: PPUSH
35318: LD_VAR 0 1
35322: PPUSH
35323: CALL 79673 0 2
35327: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35328: LD_ADDR_VAR 0 6
35332: PUSH
35333: LD_EXP 102
35337: PUSH
35338: LD_VAR 0 4
35342: ARRAY
35343: PUSH
35344: LD_INT 3
35346: ARRAY
35347: PPUSH
35348: LD_EXP 102
35352: PUSH
35353: LD_VAR 0 4
35357: ARRAY
35358: PUSH
35359: LD_INT 4
35361: ARRAY
35362: PPUSH
35363: CALL_OW 428
35367: ST_TO_ADDR
// if hex then
35368: LD_VAR 0 6
35372: IFFALSE 35390
// ComMoveUnit ( driver , hex ) else
35374: LD_VAR 0 5
35378: PPUSH
35379: LD_VAR 0 6
35383: PPUSH
35384: CALL_OW 112
35388: GO 35474
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
35390: LD_VAR 0 1
35394: PPUSH
35395: LD_EXP 102
35399: PUSH
35400: LD_VAR 0 4
35404: ARRAY
35405: PUSH
35406: LD_INT 3
35408: ARRAY
35409: PPUSH
35410: LD_EXP 102
35414: PUSH
35415: LD_VAR 0 4
35419: ARRAY
35420: PUSH
35421: LD_INT 4
35423: ARRAY
35424: PPUSH
35425: CALL_OW 297
35429: PUSH
35430: LD_INT 0
35432: GREATER
35433: IFFALSE 35474
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35435: LD_VAR 0 5
35439: PPUSH
35440: LD_EXP 102
35444: PUSH
35445: LD_VAR 0 4
35449: ARRAY
35450: PUSH
35451: LD_INT 3
35453: ARRAY
35454: PPUSH
35455: LD_EXP 102
35459: PUSH
35460: LD_VAR 0 4
35464: ARRAY
35465: PUSH
35466: LD_INT 4
35468: ARRAY
35469: PPUSH
35470: CALL_OW 111
// AddComExitVehicle ( driver ) ;
35474: LD_VAR 0 5
35478: PPUSH
35479: CALL_OW 181
// if Multiplayer then
35483: LD_OWVAR 4
35487: IFFALSE 35536
// begin repeat wait ( 10 ) ;
35489: LD_INT 10
35491: PPUSH
35492: CALL_OW 67
// until not IsInUnit ( driver ) ;
35496: LD_VAR 0 5
35500: PPUSH
35501: CALL_OW 310
35505: NOT
35506: IFFALSE 35489
// if not HasTask ( driver ) then
35508: LD_VAR 0 5
35512: PPUSH
35513: CALL_OW 314
35517: NOT
35518: IFFALSE 35534
// ComEnterUnit ( driver , factory ) ;
35520: LD_VAR 0 5
35524: PPUSH
35525: LD_VAR 0 2
35529: PPUSH
35530: CALL_OW 120
// end else
35534: GO 35550
// AddComEnterUnit ( driver , factory ) ;
35536: LD_VAR 0 5
35540: PPUSH
35541: LD_VAR 0 2
35545: PPUSH
35546: CALL_OW 180
// wait ( 0 0$1 ) ;
35550: LD_INT 35
35552: PPUSH
35553: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
35557: LD_ADDR_EXP 103
35561: PUSH
35562: LD_EXP 103
35566: PUSH
35567: LD_VAR 0 5
35571: DIFF
35572: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
35573: LD_ADDR_EXP 103
35577: PUSH
35578: LD_EXP 103
35582: PUSH
35583: LD_VAR 0 1
35587: DIFF
35588: ST_TO_ADDR
// break ;
35589: GO 35742
// end ; end else
35591: GO 35740
// if GetControl ( vehicle ) = control_remote then
35593: LD_VAR 0 1
35597: PPUSH
35598: CALL_OW 263
35602: PUSH
35603: LD_INT 2
35605: EQUAL
35606: IFFALSE 35692
// begin wait ( 0 0$2 ) ;
35608: LD_INT 70
35610: PPUSH
35611: CALL_OW 67
// repeat wait ( 10 ) ;
35615: LD_INT 10
35617: PPUSH
35618: CALL_OW 67
// Connect ( vehicle ) ;
35622: LD_VAR 0 1
35626: PPUSH
35627: CALL 49975 0 1
// until IsControledBy ( vehicle ) ;
35631: LD_VAR 0 1
35635: PPUSH
35636: CALL_OW 312
35640: IFFALSE 35615
// wait ( 10 ) ;
35642: LD_INT 10
35644: PPUSH
35645: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35649: LD_VAR 0 1
35653: PPUSH
35654: LD_EXP 102
35658: PUSH
35659: LD_VAR 0 4
35663: ARRAY
35664: PUSH
35665: LD_INT 3
35667: ARRAY
35668: PPUSH
35669: LD_EXP 102
35673: PUSH
35674: LD_VAR 0 4
35678: ARRAY
35679: PUSH
35680: LD_INT 4
35682: ARRAY
35683: PPUSH
35684: CALL_OW 111
// break ;
35688: GO 35742
// end else
35690: GO 35740
// begin wait ( 0 0$3 ) ;
35692: LD_INT 105
35694: PPUSH
35695: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35699: LD_VAR 0 1
35703: PPUSH
35704: LD_EXP 102
35708: PUSH
35709: LD_VAR 0 4
35713: ARRAY
35714: PUSH
35715: LD_INT 3
35717: ARRAY
35718: PPUSH
35719: LD_EXP 102
35723: PUSH
35724: LD_VAR 0 4
35728: ARRAY
35729: PUSH
35730: LD_INT 4
35732: ARRAY
35733: PPUSH
35734: CALL_OW 111
// break ;
35738: GO 35742
// end ; end ;
35740: GO 35191
35742: POP
35743: POP
// end ;
35744: LD_VAR 0 3
35748: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35749: LD_INT 0
35751: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35752: LD_VAR 0 1
35756: PUSH
35757: LD_INT 250
35759: EQUAL
35760: IFFALSE 35777
35762: PUSH
35763: LD_VAR 0 2
35767: PPUSH
35768: CALL_OW 264
35772: PUSH
35773: LD_INT 81
35775: EQUAL
35776: AND
35777: IFFALSE 35798
// MinerPlaceMine ( unit , x , y ) ;
35779: LD_VAR 0 2
35783: PPUSH
35784: LD_VAR 0 4
35788: PPUSH
35789: LD_VAR 0 5
35793: PPUSH
35794: CALL 39144 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35798: LD_VAR 0 1
35802: PUSH
35803: LD_INT 251
35805: EQUAL
35806: IFFALSE 35823
35808: PUSH
35809: LD_VAR 0 2
35813: PPUSH
35814: CALL_OW 264
35818: PUSH
35819: LD_INT 81
35821: EQUAL
35822: AND
35823: IFFALSE 35844
// MinerDetonateMine ( unit , x , y ) ;
35825: LD_VAR 0 2
35829: PPUSH
35830: LD_VAR 0 4
35834: PPUSH
35835: LD_VAR 0 5
35839: PPUSH
35840: CALL 39551 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35844: LD_VAR 0 1
35848: PUSH
35849: LD_INT 252
35851: EQUAL
35852: IFFALSE 35869
35854: PUSH
35855: LD_VAR 0 2
35859: PPUSH
35860: CALL_OW 264
35864: PUSH
35865: LD_INT 81
35867: EQUAL
35868: AND
35869: IFFALSE 35890
// MinerCreateMinefield ( unit , x , y ) ;
35871: LD_VAR 0 2
35875: PPUSH
35876: LD_VAR 0 4
35880: PPUSH
35881: LD_VAR 0 5
35885: PPUSH
35886: CALL 39783 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35890: LD_VAR 0 1
35894: PUSH
35895: LD_INT 253
35897: EQUAL
35898: IFFALSE 35915
35900: PUSH
35901: LD_VAR 0 2
35905: PPUSH
35906: CALL_OW 257
35910: PUSH
35911: LD_INT 5
35913: EQUAL
35914: AND
35915: IFFALSE 35936
// ComBinocular ( unit , x , y ) ;
35917: LD_VAR 0 2
35921: PPUSH
35922: LD_VAR 0 4
35926: PPUSH
35927: LD_VAR 0 5
35931: PPUSH
35932: CALL 40158 0 3
// if selectedUnit then
35936: LD_VAR 0 3
35940: IFFALSE 36000
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35942: LD_VAR 0 1
35946: PUSH
35947: LD_INT 254
35949: EQUAL
35950: IFFALSE 35967
35952: PUSH
35953: LD_VAR 0 2
35957: PPUSH
35958: CALL_OW 264
35962: PUSH
35963: LD_INT 99
35965: EQUAL
35966: AND
35967: IFFALSE 35984
35969: PUSH
35970: LD_VAR 0 3
35974: PPUSH
35975: CALL_OW 263
35979: PUSH
35980: LD_INT 3
35982: EQUAL
35983: AND
35984: IFFALSE 36000
// HackDestroyVehicle ( unit , selectedUnit ) ;
35986: LD_VAR 0 2
35990: PPUSH
35991: LD_VAR 0 3
35995: PPUSH
35996: CALL 38334 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36000: LD_VAR 0 1
36004: PUSH
36005: LD_INT 255
36007: EQUAL
36008: IFFALSE 36032
36010: PUSH
36011: LD_VAR 0 2
36015: PPUSH
36016: CALL_OW 264
36020: PUSH
36021: LD_INT 14
36023: PUSH
36024: LD_INT 53
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: IN
36031: AND
36032: IFFALSE 36050
36034: PUSH
36035: LD_VAR 0 4
36039: PPUSH
36040: LD_VAR 0 5
36044: PPUSH
36045: CALL_OW 488
36049: AND
36050: IFFALSE 36074
// CutTreeXYR ( unit , x , y , 12 ) ;
36052: LD_VAR 0 2
36056: PPUSH
36057: LD_VAR 0 4
36061: PPUSH
36062: LD_VAR 0 5
36066: PPUSH
36067: LD_INT 12
36069: PPUSH
36070: CALL 36265 0 4
// if cmd = 256 then
36074: LD_VAR 0 1
36078: PUSH
36079: LD_INT 256
36081: EQUAL
36082: IFFALSE 36103
// SetFactoryWaypoint ( unit , x , y ) ;
36084: LD_VAR 0 2
36088: PPUSH
36089: LD_VAR 0 4
36093: PPUSH
36094: LD_VAR 0 5
36098: PPUSH
36099: CALL 33544 0 3
// if cmd = 257 then
36103: LD_VAR 0 1
36107: PUSH
36108: LD_INT 257
36110: EQUAL
36111: IFFALSE 36132
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36113: LD_VAR 0 2
36117: PPUSH
36118: LD_VAR 0 4
36122: PPUSH
36123: LD_VAR 0 5
36127: PPUSH
36128: CALL 34040 0 3
// if cmd = 258 then
36132: LD_VAR 0 1
36136: PUSH
36137: LD_INT 258
36139: EQUAL
36140: IFFALSE 36164
// BurnTreeXYR ( unit , x , y , 8 ) ;
36142: LD_VAR 0 2
36146: PPUSH
36147: LD_VAR 0 4
36151: PPUSH
36152: LD_VAR 0 5
36156: PPUSH
36157: LD_INT 8
36159: PPUSH
36160: CALL 36687 0 4
// end ;
36164: LD_VAR 0 6
36168: RET
// export function ComRadiation ( un ) ; var eff ; begin
36169: LD_INT 0
36171: PPUSH
36172: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36173: LD_VAR 0 1
36177: PPUSH
36178: CALL_OW 264
36182: PUSH
36183: LD_INT 91
36185: NONEQUAL
36186: IFFALSE 36190
// exit ;
36188: GO 36260
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36190: LD_INT 68
36192: PPUSH
36193: LD_VAR 0 1
36197: PPUSH
36198: CALL_OW 255
36202: PPUSH
36203: CALL_OW 321
36207: PUSH
36208: LD_INT 2
36210: EQUAL
36211: IFFALSE 36223
// eff := 50 else
36213: LD_ADDR_VAR 0 3
36217: PUSH
36218: LD_INT 50
36220: ST_TO_ADDR
36221: GO 36231
// eff := 25 ;
36223: LD_ADDR_VAR 0 3
36227: PUSH
36228: LD_INT 25
36230: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36231: LD_VAR 0 1
36235: PPUSH
36236: CALL_OW 250
36240: PPUSH
36241: LD_VAR 0 1
36245: PPUSH
36246: CALL_OW 251
36250: PPUSH
36251: LD_VAR 0 3
36255: PPUSH
36256: CALL_OW 495
// end ;
36260: LD_VAR 0 2
36264: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36265: LD_INT 0
36267: PPUSH
36268: PPUSH
36269: PPUSH
36270: PPUSH
36271: PPUSH
36272: PPUSH
36273: PPUSH
36274: PPUSH
36275: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36276: LD_VAR 0 1
36280: PPUSH
36281: CALL_OW 302
36285: NOT
36286: IFTRUE 36305
36288: PUSH
36289: LD_VAR 0 2
36293: PPUSH
36294: LD_VAR 0 3
36298: PPUSH
36299: CALL_OW 488
36303: NOT
36304: OR
36305: IFTRUE 36314
36307: PUSH
36308: LD_VAR 0 4
36312: NOT
36313: OR
36314: IFFALSE 36318
// exit ;
36316: GO 36682
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
36318: LD_VAR 0 1
36322: PPUSH
36323: CALL_OW 437
36327: PPUSH
36328: CALL 43697 0 1
36332: PUSH
36333: LD_INT 10
36335: GREATER
36336: IFFALSE 36340
// exit ;
36338: GO 36682
// list := [ ] ;
36340: LD_ADDR_VAR 0 13
36344: PUSH
36345: EMPTY
36346: ST_TO_ADDR
// if x - r < 0 then
36347: LD_VAR 0 2
36351: PUSH
36352: LD_VAR 0 4
36356: MINUS
36357: PUSH
36358: LD_INT 0
36360: LESS
36361: IFFALSE 36373
// min_x := 0 else
36363: LD_ADDR_VAR 0 7
36367: PUSH
36368: LD_INT 0
36370: ST_TO_ADDR
36371: GO 36389
// min_x := x - r ;
36373: LD_ADDR_VAR 0 7
36377: PUSH
36378: LD_VAR 0 2
36382: PUSH
36383: LD_VAR 0 4
36387: MINUS
36388: ST_TO_ADDR
// if y - r < 0 then
36389: LD_VAR 0 3
36393: PUSH
36394: LD_VAR 0 4
36398: MINUS
36399: PUSH
36400: LD_INT 0
36402: LESS
36403: IFFALSE 36415
// min_y := 0 else
36405: LD_ADDR_VAR 0 8
36409: PUSH
36410: LD_INT 0
36412: ST_TO_ADDR
36413: GO 36431
// min_y := y - r ;
36415: LD_ADDR_VAR 0 8
36419: PUSH
36420: LD_VAR 0 3
36424: PUSH
36425: LD_VAR 0 4
36429: MINUS
36430: ST_TO_ADDR
// max_x := x + r ;
36431: LD_ADDR_VAR 0 9
36435: PUSH
36436: LD_VAR 0 2
36440: PUSH
36441: LD_VAR 0 4
36445: PLUS
36446: ST_TO_ADDR
// max_y := y + r ;
36447: LD_ADDR_VAR 0 10
36451: PUSH
36452: LD_VAR 0 3
36456: PUSH
36457: LD_VAR 0 4
36461: PLUS
36462: ST_TO_ADDR
// for _x = min_x to max_x do
36463: LD_ADDR_VAR 0 11
36467: PUSH
36468: DOUBLE
36469: LD_VAR 0 7
36473: DEC
36474: ST_TO_ADDR
36475: LD_VAR 0 9
36479: PUSH
36480: FOR_TO
36481: IFFALSE 36600
// for _y = min_y to max_y do
36483: LD_ADDR_VAR 0 12
36487: PUSH
36488: DOUBLE
36489: LD_VAR 0 8
36493: DEC
36494: ST_TO_ADDR
36495: LD_VAR 0 10
36499: PUSH
36500: FOR_TO
36501: IFFALSE 36596
// begin if not ValidHex ( _x , _y ) then
36503: LD_VAR 0 11
36507: PPUSH
36508: LD_VAR 0 12
36512: PPUSH
36513: CALL_OW 488
36517: NOT
36518: IFFALSE 36522
// continue ;
36520: GO 36500
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36522: LD_VAR 0 11
36526: PPUSH
36527: LD_VAR 0 12
36531: PPUSH
36532: CALL_OW 351
36536: IFFALSE 36554
36538: PUSH
36539: LD_VAR 0 11
36543: PPUSH
36544: LD_VAR 0 12
36548: PPUSH
36549: CALL_OW 554
36553: AND
36554: IFFALSE 36594
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36556: LD_ADDR_VAR 0 13
36560: PUSH
36561: LD_VAR 0 13
36565: PPUSH
36566: LD_VAR 0 13
36570: PUSH
36571: LD_INT 1
36573: PLUS
36574: PPUSH
36575: LD_VAR 0 11
36579: PUSH
36580: LD_VAR 0 12
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PPUSH
36589: CALL_OW 2
36593: ST_TO_ADDR
// end ;
36594: GO 36500
36596: POP
36597: POP
36598: GO 36480
36600: POP
36601: POP
// if not list then
36602: LD_VAR 0 13
36606: NOT
36607: IFFALSE 36611
// exit ;
36609: GO 36682
// for i in list do
36611: LD_ADDR_VAR 0 6
36615: PUSH
36616: LD_VAR 0 13
36620: PUSH
36621: FOR_IN
36622: IFFALSE 36680
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36624: LD_VAR 0 1
36628: PPUSH
36629: LD_STRING M
36631: PUSH
36632: LD_VAR 0 6
36636: PUSH
36637: LD_INT 1
36639: ARRAY
36640: PUSH
36641: LD_VAR 0 6
36645: PUSH
36646: LD_INT 2
36648: ARRAY
36649: PUSH
36650: LD_INT 0
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: PUSH
36671: EMPTY
36672: LIST
36673: PPUSH
36674: CALL_OW 447
36678: GO 36621
36680: POP
36681: POP
// end ;
36682: LD_VAR 0 5
36686: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36687: LD_INT 0
36689: PPUSH
36690: PPUSH
36691: PPUSH
36692: PPUSH
36693: PPUSH
36694: PPUSH
36695: PPUSH
36696: PPUSH
36697: PPUSH
36698: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36699: LD_VAR 0 1
36703: PPUSH
36704: CALL_OW 302
36708: NOT
36709: IFTRUE 36728
36711: PUSH
36712: LD_VAR 0 2
36716: PPUSH
36717: LD_VAR 0 3
36721: PPUSH
36722: CALL_OW 488
36726: NOT
36727: OR
36728: IFTRUE 36737
36730: PUSH
36731: LD_VAR 0 4
36735: NOT
36736: OR
36737: IFFALSE 36741
// exit ;
36739: GO 37280
// if Count ( GetTaskList ( flame ) ) > 10 then
36741: LD_VAR 0 1
36745: PPUSH
36746: CALL_OW 437
36750: PPUSH
36751: CALL 43697 0 1
36755: PUSH
36756: LD_INT 10
36758: GREATER
36759: IFFALSE 36763
// exit ;
36761: GO 37280
// list := [ ] ;
36763: LD_ADDR_VAR 0 13
36767: PUSH
36768: EMPTY
36769: ST_TO_ADDR
// if x - r < 0 then
36770: LD_VAR 0 2
36774: PUSH
36775: LD_VAR 0 4
36779: MINUS
36780: PUSH
36781: LD_INT 0
36783: LESS
36784: IFFALSE 36796
// min_x := 0 else
36786: LD_ADDR_VAR 0 7
36790: PUSH
36791: LD_INT 0
36793: ST_TO_ADDR
36794: GO 36812
// min_x := x - r ;
36796: LD_ADDR_VAR 0 7
36800: PUSH
36801: LD_VAR 0 2
36805: PUSH
36806: LD_VAR 0 4
36810: MINUS
36811: ST_TO_ADDR
// if y - r < 0 then
36812: LD_VAR 0 3
36816: PUSH
36817: LD_VAR 0 4
36821: MINUS
36822: PUSH
36823: LD_INT 0
36825: LESS
36826: IFFALSE 36838
// min_y := 0 else
36828: LD_ADDR_VAR 0 8
36832: PUSH
36833: LD_INT 0
36835: ST_TO_ADDR
36836: GO 36854
// min_y := y - r ;
36838: LD_ADDR_VAR 0 8
36842: PUSH
36843: LD_VAR 0 3
36847: PUSH
36848: LD_VAR 0 4
36852: MINUS
36853: ST_TO_ADDR
// max_x := x + r ;
36854: LD_ADDR_VAR 0 9
36858: PUSH
36859: LD_VAR 0 2
36863: PUSH
36864: LD_VAR 0 4
36868: PLUS
36869: ST_TO_ADDR
// max_y := y + r ;
36870: LD_ADDR_VAR 0 10
36874: PUSH
36875: LD_VAR 0 3
36879: PUSH
36880: LD_VAR 0 4
36884: PLUS
36885: ST_TO_ADDR
// for _x = min_x to max_x do
36886: LD_ADDR_VAR 0 11
36890: PUSH
36891: DOUBLE
36892: LD_VAR 0 7
36896: DEC
36897: ST_TO_ADDR
36898: LD_VAR 0 9
36902: PUSH
36903: FOR_TO
36904: IFFALSE 37023
// for _y = min_y to max_y do
36906: LD_ADDR_VAR 0 12
36910: PUSH
36911: DOUBLE
36912: LD_VAR 0 8
36916: DEC
36917: ST_TO_ADDR
36918: LD_VAR 0 10
36922: PUSH
36923: FOR_TO
36924: IFFALSE 37019
// begin if not ValidHex ( _x , _y ) then
36926: LD_VAR 0 11
36930: PPUSH
36931: LD_VAR 0 12
36935: PPUSH
36936: CALL_OW 488
36940: NOT
36941: IFFALSE 36945
// continue ;
36943: GO 36923
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36945: LD_VAR 0 11
36949: PPUSH
36950: LD_VAR 0 12
36954: PPUSH
36955: CALL_OW 351
36959: IFFALSE 36977
36961: PUSH
36962: LD_VAR 0 11
36966: PPUSH
36967: LD_VAR 0 12
36971: PPUSH
36972: CALL_OW 554
36976: AND
36977: IFFALSE 37017
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36979: LD_ADDR_VAR 0 13
36983: PUSH
36984: LD_VAR 0 13
36988: PPUSH
36989: LD_VAR 0 13
36993: PUSH
36994: LD_INT 1
36996: PLUS
36997: PPUSH
36998: LD_VAR 0 11
37002: PUSH
37003: LD_VAR 0 12
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PPUSH
37012: CALL_OW 2
37016: ST_TO_ADDR
// end ;
37017: GO 36923
37019: POP
37020: POP
37021: GO 36903
37023: POP
37024: POP
// if not list then
37025: LD_VAR 0 13
37029: NOT
37030: IFFALSE 37034
// exit ;
37032: GO 37280
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37034: LD_ADDR_VAR 0 13
37038: PUSH
37039: LD_VAR 0 1
37043: PPUSH
37044: LD_VAR 0 13
37048: PPUSH
37049: LD_INT 1
37051: PPUSH
37052: LD_INT 1
37054: PPUSH
37055: CALL 47103 0 4
37059: ST_TO_ADDR
// ComStop ( flame ) ;
37060: LD_VAR 0 1
37064: PPUSH
37065: CALL_OW 141
// for i in list do
37069: LD_ADDR_VAR 0 6
37073: PUSH
37074: LD_VAR 0 13
37078: PUSH
37079: FOR_IN
37080: IFFALSE 37111
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37082: LD_VAR 0 1
37086: PPUSH
37087: LD_VAR 0 6
37091: PUSH
37092: LD_INT 1
37094: ARRAY
37095: PPUSH
37096: LD_VAR 0 6
37100: PUSH
37101: LD_INT 2
37103: ARRAY
37104: PPUSH
37105: CALL_OW 176
37109: GO 37079
37111: POP
37112: POP
// repeat wait ( 0 0$1 ) ;
37113: LD_INT 35
37115: PPUSH
37116: CALL_OW 67
// task := GetTaskList ( flame ) ;
37120: LD_ADDR_VAR 0 14
37124: PUSH
37125: LD_VAR 0 1
37129: PPUSH
37130: CALL_OW 437
37134: ST_TO_ADDR
// if not task then
37135: LD_VAR 0 14
37139: NOT
37140: IFFALSE 37144
// exit ;
37142: GO 37280
// if task [ 1 ] [ 1 ] <> | then
37144: LD_VAR 0 14
37148: PUSH
37149: LD_INT 1
37151: ARRAY
37152: PUSH
37153: LD_INT 1
37155: ARRAY
37156: PUSH
37157: LD_STRING |
37159: NONEQUAL
37160: IFFALSE 37164
// exit ;
37162: GO 37280
// _x := task [ 1 ] [ 2 ] ;
37164: LD_ADDR_VAR 0 11
37168: PUSH
37169: LD_VAR 0 14
37173: PUSH
37174: LD_INT 1
37176: ARRAY
37177: PUSH
37178: LD_INT 2
37180: ARRAY
37181: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37182: LD_ADDR_VAR 0 12
37186: PUSH
37187: LD_VAR 0 14
37191: PUSH
37192: LD_INT 1
37194: ARRAY
37195: PUSH
37196: LD_INT 3
37198: ARRAY
37199: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37200: LD_VAR 0 11
37204: PPUSH
37205: LD_VAR 0 12
37209: PPUSH
37210: CALL_OW 351
37214: NOT
37215: IFTRUE 37234
37217: PUSH
37218: LD_VAR 0 11
37222: PPUSH
37223: LD_VAR 0 12
37227: PPUSH
37228: CALL_OW 554
37232: NOT
37233: OR
37234: IFFALSE 37268
// begin task := Delete ( task , 1 ) ;
37236: LD_ADDR_VAR 0 14
37240: PUSH
37241: LD_VAR 0 14
37245: PPUSH
37246: LD_INT 1
37248: PPUSH
37249: CALL_OW 3
37253: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37254: LD_VAR 0 1
37258: PPUSH
37259: LD_VAR 0 14
37263: PPUSH
37264: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37268: LD_VAR 0 1
37272: PPUSH
37273: CALL_OW 314
37277: NOT
37278: IFFALSE 37113
// end ;
37280: LD_VAR 0 5
37284: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37285: LD_EXP 106
37289: NOT
37290: IFFALSE 37340
37292: GO 37294
37294: DISABLE
// begin initHack := true ;
37295: LD_ADDR_EXP 106
37299: PUSH
37300: LD_INT 1
37302: ST_TO_ADDR
// hackTanks := [ ] ;
37303: LD_ADDR_EXP 107
37307: PUSH
37308: EMPTY
37309: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37310: LD_ADDR_EXP 108
37314: PUSH
37315: EMPTY
37316: ST_TO_ADDR
// hackLimit := 3 ;
37317: LD_ADDR_EXP 109
37321: PUSH
37322: LD_INT 3
37324: ST_TO_ADDR
// hackDist := 12 ;
37325: LD_ADDR_EXP 110
37329: PUSH
37330: LD_INT 12
37332: ST_TO_ADDR
// hackCounter := [ ] ;
37333: LD_ADDR_EXP 111
37337: PUSH
37338: EMPTY
37339: ST_TO_ADDR
// end ;
37340: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37341: LD_EXP 106
37345: IFFALSE 37363
37347: PUSH
37348: LD_INT 34
37350: PUSH
37351: LD_INT 99
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PPUSH
37358: CALL_OW 69
37362: AND
37363: IFFALSE 37616
37365: GO 37367
37367: DISABLE
37368: LD_INT 0
37370: PPUSH
37371: PPUSH
// begin enable ;
37372: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37373: LD_ADDR_VAR 0 1
37377: PUSH
37378: LD_INT 34
37380: PUSH
37381: LD_INT 99
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PPUSH
37388: CALL_OW 69
37392: PUSH
37393: FOR_IN
37394: IFFALSE 37614
// begin if not i in hackTanks then
37396: LD_VAR 0 1
37400: PUSH
37401: LD_EXP 107
37405: IN
37406: NOT
37407: IFFALSE 37490
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37409: LD_ADDR_EXP 107
37413: PUSH
37414: LD_EXP 107
37418: PPUSH
37419: LD_EXP 107
37423: PUSH
37424: LD_INT 1
37426: PLUS
37427: PPUSH
37428: LD_VAR 0 1
37432: PPUSH
37433: CALL_OW 1
37437: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37438: LD_ADDR_EXP 108
37442: PUSH
37443: LD_EXP 108
37447: PPUSH
37448: LD_EXP 108
37452: PUSH
37453: LD_INT 1
37455: PLUS
37456: PPUSH
37457: EMPTY
37458: PPUSH
37459: CALL_OW 1
37463: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37464: LD_ADDR_EXP 111
37468: PUSH
37469: LD_EXP 111
37473: PPUSH
37474: LD_EXP 111
37478: PUSH
37479: LD_INT 1
37481: PLUS
37482: PPUSH
37483: EMPTY
37484: PPUSH
37485: CALL_OW 1
37489: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37490: LD_VAR 0 1
37494: PPUSH
37495: CALL_OW 302
37499: NOT
37500: IFFALSE 37513
// begin HackUnlinkAll ( i ) ;
37502: LD_VAR 0 1
37506: PPUSH
37507: CALL 37619 0 1
// continue ;
37511: GO 37393
// end ; HackCheckCapturedStatus ( i ) ;
37513: LD_VAR 0 1
37517: PPUSH
37518: CALL 38064 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37522: LD_ADDR_VAR 0 2
37526: PUSH
37527: LD_INT 81
37529: PUSH
37530: LD_VAR 0 1
37534: PPUSH
37535: CALL_OW 255
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 33
37546: PUSH
37547: LD_INT 3
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 91
37556: PUSH
37557: LD_VAR 0 1
37561: PUSH
37562: LD_EXP 110
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 50
37574: PUSH
37575: EMPTY
37576: LIST
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: PPUSH
37584: CALL_OW 69
37588: ST_TO_ADDR
// if not tmp then
37589: LD_VAR 0 2
37593: NOT
37594: IFFALSE 37598
// continue ;
37596: GO 37393
// HackLink ( i , tmp ) ;
37598: LD_VAR 0 1
37602: PPUSH
37603: LD_VAR 0 2
37607: PPUSH
37608: CALL 37755 0 2
// end ;
37612: GO 37393
37614: POP
37615: POP
// end ;
37616: PPOPN 2
37618: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37619: LD_INT 0
37621: PPUSH
37622: PPUSH
37623: PPUSH
// if not hack in hackTanks then
37624: LD_VAR 0 1
37628: PUSH
37629: LD_EXP 107
37633: IN
37634: NOT
37635: IFFALSE 37639
// exit ;
37637: GO 37750
// index := GetElementIndex ( hackTanks , hack ) ;
37639: LD_ADDR_VAR 0 4
37643: PUSH
37644: LD_EXP 107
37648: PPUSH
37649: LD_VAR 0 1
37653: PPUSH
37654: CALL 46398 0 2
37658: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37659: LD_EXP 108
37663: PUSH
37664: LD_VAR 0 4
37668: ARRAY
37669: IFFALSE 37750
// begin for i in hackTanksCaptured [ index ] do
37671: LD_ADDR_VAR 0 3
37675: PUSH
37676: LD_EXP 108
37680: PUSH
37681: LD_VAR 0 4
37685: ARRAY
37686: PUSH
37687: FOR_IN
37688: IFFALSE 37714
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37690: LD_VAR 0 3
37694: PUSH
37695: LD_INT 1
37697: ARRAY
37698: PPUSH
37699: LD_VAR 0 3
37703: PUSH
37704: LD_INT 2
37706: ARRAY
37707: PPUSH
37708: CALL_OW 235
37712: GO 37687
37714: POP
37715: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37716: LD_ADDR_EXP 108
37720: PUSH
37721: LD_EXP 108
37725: PPUSH
37726: LD_VAR 0 4
37730: PPUSH
37731: EMPTY
37732: PPUSH
37733: CALL_OW 1
37737: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37738: LD_VAR 0 1
37742: PPUSH
37743: LD_INT 0
37745: PPUSH
37746: CALL_OW 505
// end ; end ;
37750: LD_VAR 0 2
37754: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37755: LD_INT 0
37757: PPUSH
37758: PPUSH
37759: PPUSH
// if not hack in hackTanks or not vehicles then
37760: LD_VAR 0 1
37764: PUSH
37765: LD_EXP 107
37769: IN
37770: NOT
37771: IFTRUE 37780
37773: PUSH
37774: LD_VAR 0 2
37778: NOT
37779: OR
37780: IFFALSE 37784
// exit ;
37782: GO 38059
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37784: LD_ADDR_VAR 0 2
37788: PUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: LD_VAR 0 2
37798: PPUSH
37799: LD_INT 1
37801: PPUSH
37802: LD_INT 1
37804: PPUSH
37805: CALL 47050 0 4
37809: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37810: LD_ADDR_VAR 0 5
37814: PUSH
37815: LD_EXP 107
37819: PPUSH
37820: LD_VAR 0 1
37824: PPUSH
37825: CALL 46398 0 2
37829: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37830: LD_EXP 108
37834: PUSH
37835: LD_VAR 0 5
37839: ARRAY
37840: PUSH
37841: LD_EXP 109
37845: LESS
37846: IFFALSE 38035
// begin for i := 1 to vehicles do
37848: LD_ADDR_VAR 0 4
37852: PUSH
37853: DOUBLE
37854: LD_INT 1
37856: DEC
37857: ST_TO_ADDR
37858: LD_VAR 0 2
37862: PUSH
37863: FOR_TO
37864: IFFALSE 38033
// begin if hackTanksCaptured [ index ] = hackLimit then
37866: LD_EXP 108
37870: PUSH
37871: LD_VAR 0 5
37875: ARRAY
37876: PUSH
37877: LD_EXP 109
37881: EQUAL
37882: IFFALSE 37886
// break ;
37884: GO 38033
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37886: LD_ADDR_EXP 111
37890: PUSH
37891: LD_EXP 111
37895: PPUSH
37896: LD_VAR 0 5
37900: PPUSH
37901: LD_EXP 111
37905: PUSH
37906: LD_VAR 0 5
37910: ARRAY
37911: PUSH
37912: LD_INT 1
37914: PLUS
37915: PPUSH
37916: CALL_OW 1
37920: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37921: LD_ADDR_EXP 108
37925: PUSH
37926: LD_EXP 108
37930: PPUSH
37931: LD_VAR 0 5
37935: PUSH
37936: LD_EXP 108
37940: PUSH
37941: LD_VAR 0 5
37945: ARRAY
37946: PUSH
37947: LD_INT 1
37949: PLUS
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PPUSH
37955: LD_VAR 0 2
37959: PUSH
37960: LD_VAR 0 4
37964: ARRAY
37965: PUSH
37966: LD_VAR 0 2
37970: PUSH
37971: LD_VAR 0 4
37975: ARRAY
37976: PPUSH
37977: CALL_OW 255
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PPUSH
37986: CALL 46615 0 3
37990: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37991: LD_VAR 0 2
37995: PUSH
37996: LD_VAR 0 4
38000: ARRAY
38001: PPUSH
38002: LD_VAR 0 1
38006: PPUSH
38007: CALL_OW 255
38011: PPUSH
38012: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38016: LD_VAR 0 2
38020: PUSH
38021: LD_VAR 0 4
38025: ARRAY
38026: PPUSH
38027: CALL_OW 141
// end ;
38031: GO 37863
38033: POP
38034: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38035: LD_VAR 0 1
38039: PPUSH
38040: LD_EXP 108
38044: PUSH
38045: LD_VAR 0 5
38049: ARRAY
38050: PUSH
38051: LD_INT 0
38053: PLUS
38054: PPUSH
38055: CALL_OW 505
// end ;
38059: LD_VAR 0 3
38063: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38064: LD_INT 0
38066: PPUSH
38067: PPUSH
38068: PPUSH
38069: PPUSH
// if not hack in hackTanks then
38070: LD_VAR 0 1
38074: PUSH
38075: LD_EXP 107
38079: IN
38080: NOT
38081: IFFALSE 38085
// exit ;
38083: GO 38329
// index := GetElementIndex ( hackTanks , hack ) ;
38085: LD_ADDR_VAR 0 4
38089: PUSH
38090: LD_EXP 107
38094: PPUSH
38095: LD_VAR 0 1
38099: PPUSH
38100: CALL 46398 0 2
38104: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38105: LD_ADDR_VAR 0 3
38109: PUSH
38110: DOUBLE
38111: LD_EXP 108
38115: PUSH
38116: LD_VAR 0 4
38120: ARRAY
38121: INC
38122: ST_TO_ADDR
38123: LD_INT 1
38125: PUSH
38126: FOR_DOWNTO
38127: IFFALSE 38303
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38129: LD_ADDR_VAR 0 5
38133: PUSH
38134: LD_EXP 108
38138: PUSH
38139: LD_VAR 0 4
38143: ARRAY
38144: PUSH
38145: LD_VAR 0 3
38149: ARRAY
38150: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38151: LD_VAR 0 5
38155: PUSH
38156: LD_INT 1
38158: ARRAY
38159: PPUSH
38160: CALL_OW 302
38164: NOT
38165: IFTRUE 38193
38167: PUSH
38168: LD_VAR 0 5
38172: PUSH
38173: LD_INT 1
38175: ARRAY
38176: PPUSH
38177: CALL_OW 255
38181: PUSH
38182: LD_VAR 0 1
38186: PPUSH
38187: CALL_OW 255
38191: NONEQUAL
38192: OR
38193: IFFALSE 38301
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38195: LD_VAR 0 5
38199: PUSH
38200: LD_INT 1
38202: ARRAY
38203: PPUSH
38204: CALL_OW 305
38208: IFFALSE 38236
38210: PUSH
38211: LD_VAR 0 5
38215: PUSH
38216: LD_INT 1
38218: ARRAY
38219: PPUSH
38220: CALL_OW 255
38224: PUSH
38225: LD_VAR 0 1
38229: PPUSH
38230: CALL_OW 255
38234: EQUAL
38235: AND
38236: IFFALSE 38260
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38238: LD_VAR 0 5
38242: PUSH
38243: LD_INT 1
38245: ARRAY
38246: PPUSH
38247: LD_VAR 0 5
38251: PUSH
38252: LD_INT 2
38254: ARRAY
38255: PPUSH
38256: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38260: LD_ADDR_EXP 108
38264: PUSH
38265: LD_EXP 108
38269: PPUSH
38270: LD_VAR 0 4
38274: PPUSH
38275: LD_EXP 108
38279: PUSH
38280: LD_VAR 0 4
38284: ARRAY
38285: PPUSH
38286: LD_VAR 0 3
38290: PPUSH
38291: CALL_OW 3
38295: PPUSH
38296: CALL_OW 1
38300: ST_TO_ADDR
// end ; end ;
38301: GO 38126
38303: POP
38304: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38305: LD_VAR 0 1
38309: PPUSH
38310: LD_EXP 108
38314: PUSH
38315: LD_VAR 0 4
38319: ARRAY
38320: PUSH
38321: LD_INT 0
38323: PLUS
38324: PPUSH
38325: CALL_OW 505
// end ;
38329: LD_VAR 0 2
38333: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38334: LD_INT 0
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
// if not hack in hackTanks then
38340: LD_VAR 0 1
38344: PUSH
38345: LD_EXP 107
38349: IN
38350: NOT
38351: IFFALSE 38355
// exit ;
38353: GO 38440
// index := GetElementIndex ( hackTanks , hack ) ;
38355: LD_ADDR_VAR 0 5
38359: PUSH
38360: LD_EXP 107
38364: PPUSH
38365: LD_VAR 0 1
38369: PPUSH
38370: CALL 46398 0 2
38374: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38375: LD_ADDR_VAR 0 4
38379: PUSH
38380: DOUBLE
38381: LD_INT 1
38383: DEC
38384: ST_TO_ADDR
38385: LD_EXP 108
38389: PUSH
38390: LD_VAR 0 5
38394: ARRAY
38395: PUSH
38396: FOR_TO
38397: IFFALSE 38438
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38399: LD_EXP 108
38403: PUSH
38404: LD_VAR 0 5
38408: ARRAY
38409: PUSH
38410: LD_VAR 0 4
38414: ARRAY
38415: PUSH
38416: LD_INT 1
38418: ARRAY
38419: PUSH
38420: LD_VAR 0 2
38424: EQUAL
38425: IFFALSE 38436
// KillUnit ( vehicle ) ;
38427: LD_VAR 0 2
38431: PPUSH
38432: CALL_OW 66
38436: GO 38396
38438: POP
38439: POP
// end ;
38440: LD_VAR 0 3
38444: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
38445: LD_EXP 112
38449: NOT
38450: IFFALSE 38583
38452: GO 38454
38454: DISABLE
38455: LD_INT 0
38457: PPUSH
// begin initMiner := true ;
38458: LD_ADDR_EXP 112
38462: PUSH
38463: LD_INT 1
38465: ST_TO_ADDR
// minersList := [ ] ;
38466: LD_ADDR_EXP 113
38470: PUSH
38471: EMPTY
38472: ST_TO_ADDR
// minerMinesList := [ ] ;
38473: LD_ADDR_EXP 114
38477: PUSH
38478: EMPTY
38479: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
38480: LD_ADDR_EXP 115
38484: PUSH
38485: LD_INT 10
38487: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38488: LD_ADDR_VAR 0 1
38492: PUSH
38493: LD_INT 34
38495: PUSH
38496: LD_INT 81
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PPUSH
38503: CALL_OW 69
38507: PUSH
38508: FOR_IN
38509: IFFALSE 38581
// begin if not i in minersList then
38511: LD_VAR 0 1
38515: PUSH
38516: LD_EXP 113
38520: IN
38521: NOT
38522: IFFALSE 38579
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38524: LD_ADDR_EXP 113
38528: PUSH
38529: LD_EXP 113
38533: PPUSH
38534: LD_EXP 113
38538: PUSH
38539: LD_INT 1
38541: PLUS
38542: PPUSH
38543: LD_VAR 0 1
38547: PPUSH
38548: CALL_OW 1
38552: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38553: LD_ADDR_EXP 114
38557: PUSH
38558: LD_EXP 114
38562: PPUSH
38563: LD_EXP 114
38567: PUSH
38568: LD_INT 1
38570: PLUS
38571: PPUSH
38572: EMPTY
38573: PPUSH
38574: CALL_OW 1
38578: ST_TO_ADDR
// end end ;
38579: GO 38508
38581: POP
38582: POP
// end ;
38583: PPOPN 1
38585: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
38586: LD_EXP 112
38590: IFFALSE 38621
38592: PUSH
38593: LD_EXP 114
38597: PPUSH
38598: CALL 43697 0 1
38602: IFTRUE 38620
38604: PUSH
38605: LD_INT 34
38607: PUSH
38608: LD_INT 81
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PPUSH
38615: CALL_OW 69
38619: OR
38620: AND
38621: IFFALSE 39141
38623: GO 38625
38625: DISABLE
38626: LD_INT 0
38628: PPUSH
38629: PPUSH
38630: PPUSH
38631: PPUSH
// begin enable ;
38632: ENABLE
// for i := minerMinesList downto 1 do
38633: LD_ADDR_VAR 0 1
38637: PUSH
38638: DOUBLE
38639: LD_EXP 114
38643: INC
38644: ST_TO_ADDR
38645: LD_INT 1
38647: PUSH
38648: FOR_DOWNTO
38649: IFFALSE 39139
// begin side := GetSide ( minersList [ i ] ) ;
38651: LD_ADDR_VAR 0 3
38655: PUSH
38656: LD_EXP 113
38660: PUSH
38661: LD_VAR 0 1
38665: ARRAY
38666: PPUSH
38667: CALL_OW 255
38671: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
38672: LD_EXP 113
38676: PUSH
38677: LD_VAR 0 1
38681: ARRAY
38682: PPUSH
38683: CALL_OW 300
38687: IFFALSE 38708
38689: PUSH
38690: LD_VAR 0 3
38694: PUSH
38695: LD_OWVAR 2
38699: PUSH
38700: LD_INT 9
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: IN
38707: AND
38708: IFFALSE 38741
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
38710: LD_EXP 113
38714: PUSH
38715: LD_VAR 0 1
38719: ARRAY
38720: PPUSH
38721: LD_EXP 114
38725: PUSH
38726: LD_VAR 0 1
38730: ARRAY
38731: PPUSH
38732: CALL 43697 0 1
38736: PPUSH
38737: CALL_OW 505
// if not minerMinesList [ i ] then
38741: LD_EXP 114
38745: PUSH
38746: LD_VAR 0 1
38750: ARRAY
38751: NOT
38752: IFFALSE 38756
// continue ;
38754: GO 38648
// for j := minerMinesList [ i ] downto 1 do
38756: LD_ADDR_VAR 0 2
38760: PUSH
38761: DOUBLE
38762: LD_EXP 114
38766: PUSH
38767: LD_VAR 0 1
38771: ARRAY
38772: INC
38773: ST_TO_ADDR
38774: LD_INT 1
38776: PUSH
38777: FOR_DOWNTO
38778: IFFALSE 39135
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
38780: LD_EXP 113
38784: PUSH
38785: LD_VAR 0 1
38789: ARRAY
38790: PPUSH
38791: CALL_OW 301
38795: IFTRUE 38815
38797: PUSH
38798: LD_EXP 113
38802: PUSH
38803: LD_VAR 0 1
38807: ARRAY
38808: PPUSH
38809: CALL_OW 305
38813: NOT
38814: OR
38815: IFFALSE 38906
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38817: LD_EXP 114
38821: PUSH
38822: LD_VAR 0 1
38826: ARRAY
38827: PUSH
38828: LD_VAR 0 2
38832: ARRAY
38833: PUSH
38834: LD_INT 1
38836: ARRAY
38837: PPUSH
38838: LD_EXP 114
38842: PUSH
38843: LD_VAR 0 1
38847: ARRAY
38848: PUSH
38849: LD_VAR 0 2
38853: ARRAY
38854: PUSH
38855: LD_INT 2
38857: ARRAY
38858: PPUSH
38859: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38863: LD_ADDR_EXP 114
38867: PUSH
38868: LD_EXP 114
38872: PPUSH
38873: LD_VAR 0 1
38877: PPUSH
38878: LD_EXP 114
38882: PUSH
38883: LD_VAR 0 1
38887: ARRAY
38888: PPUSH
38889: LD_VAR 0 2
38893: PPUSH
38894: CALL_OW 3
38898: PPUSH
38899: CALL_OW 1
38903: ST_TO_ADDR
// continue ;
38904: GO 38777
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38906: LD_ADDR_VAR 0 4
38910: PUSH
38911: LD_EXP 114
38915: PUSH
38916: LD_VAR 0 1
38920: ARRAY
38921: PUSH
38922: LD_VAR 0 2
38926: ARRAY
38927: PUSH
38928: LD_INT 1
38930: ARRAY
38931: PPUSH
38932: LD_EXP 114
38936: PUSH
38937: LD_VAR 0 1
38941: ARRAY
38942: PUSH
38943: LD_VAR 0 2
38947: ARRAY
38948: PUSH
38949: LD_INT 2
38951: ARRAY
38952: PPUSH
38953: CALL_OW 428
38957: ST_TO_ADDR
// if not tmp then
38958: LD_VAR 0 4
38962: NOT
38963: IFFALSE 38967
// continue ;
38965: GO 38777
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38967: LD_VAR 0 4
38971: PUSH
38972: LD_INT 81
38974: PUSH
38975: LD_VAR 0 3
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PPUSH
38984: CALL_OW 69
38988: IN
38989: IFFALSE 39039
38991: PUSH
38992: LD_EXP 114
38996: PUSH
38997: LD_VAR 0 1
39001: ARRAY
39002: PUSH
39003: LD_VAR 0 2
39007: ARRAY
39008: PUSH
39009: LD_INT 1
39011: ARRAY
39012: PPUSH
39013: LD_EXP 114
39017: PUSH
39018: LD_VAR 0 1
39022: ARRAY
39023: PUSH
39024: LD_VAR 0 2
39028: ARRAY
39029: PUSH
39030: LD_INT 2
39032: ARRAY
39033: PPUSH
39034: CALL_OW 458
39038: AND
39039: IFFALSE 39133
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39041: LD_EXP 114
39045: PUSH
39046: LD_VAR 0 1
39050: ARRAY
39051: PUSH
39052: LD_VAR 0 2
39056: ARRAY
39057: PUSH
39058: LD_INT 1
39060: ARRAY
39061: PPUSH
39062: LD_EXP 114
39066: PUSH
39067: LD_VAR 0 1
39071: ARRAY
39072: PUSH
39073: LD_VAR 0 2
39077: ARRAY
39078: PUSH
39079: LD_INT 2
39081: ARRAY
39082: PPUSH
39083: LD_VAR 0 3
39087: PPUSH
39088: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39092: LD_ADDR_EXP 114
39096: PUSH
39097: LD_EXP 114
39101: PPUSH
39102: LD_VAR 0 1
39106: PPUSH
39107: LD_EXP 114
39111: PUSH
39112: LD_VAR 0 1
39116: ARRAY
39117: PPUSH
39118: LD_VAR 0 2
39122: PPUSH
39123: CALL_OW 3
39127: PPUSH
39128: CALL_OW 1
39132: ST_TO_ADDR
// end ; end ;
39133: GO 38777
39135: POP
39136: POP
// end ;
39137: GO 38648
39139: POP
39140: POP
// end ;
39141: PPOPN 4
39143: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
39144: LD_INT 0
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
// result := false ;
39150: LD_ADDR_VAR 0 4
39154: PUSH
39155: LD_INT 0
39157: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39158: LD_VAR 0 1
39162: PPUSH
39163: CALL_OW 264
39167: PUSH
39168: LD_INT 81
39170: EQUAL
39171: NOT
39172: IFFALSE 39176
// exit ;
39174: GO 39546
// side := GetSide ( unit ) ;
39176: LD_ADDR_VAR 0 6
39180: PUSH
39181: LD_VAR 0 1
39185: PPUSH
39186: CALL_OW 255
39190: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
39191: LD_ADDR_VAR 0 5
39195: PUSH
39196: LD_EXP 113
39200: PPUSH
39201: LD_VAR 0 1
39205: PPUSH
39206: CALL 46398 0 2
39210: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39211: LD_EXP 114
39215: PUSH
39216: LD_VAR 0 5
39220: ARRAY
39221: PUSH
39222: LD_EXP 115
39226: GREATEREQUAL
39227: IFFALSE 39231
// exit ;
39229: GO 39546
// ComMoveXY ( unit , x , y ) ;
39231: LD_VAR 0 1
39235: PPUSH
39236: LD_VAR 0 2
39240: PPUSH
39241: LD_VAR 0 3
39245: PPUSH
39246: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39250: LD_INT 35
39252: PPUSH
39253: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39257: LD_VAR 0 1
39261: PPUSH
39262: LD_VAR 0 2
39266: PPUSH
39267: LD_VAR 0 3
39271: PPUSH
39272: CALL 78454 0 3
39276: NOT
39277: IFFALSE 39290
39279: PUSH
39280: LD_VAR 0 1
39284: PPUSH
39285: CALL_OW 314
39289: AND
39290: IFFALSE 39294
// exit ;
39292: GO 39546
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39294: LD_VAR 0 2
39298: PPUSH
39299: LD_VAR 0 3
39303: PPUSH
39304: CALL_OW 428
39308: PUSH
39309: LD_VAR 0 1
39313: EQUAL
39314: IFFALSE 39328
39316: PUSH
39317: LD_VAR 0 1
39321: PPUSH
39322: CALL_OW 314
39326: NOT
39327: AND
39328: IFFALSE 39250
// if MineAtPos ( x , y ) then
39330: LD_VAR 0 2
39334: PPUSH
39335: LD_VAR 0 3
39339: PPUSH
39340: CALL_OW 458
39344: IFFALSE 39348
// exit ;
39346: GO 39546
// if your_side = side then
39348: LD_OWVAR 2
39352: PUSH
39353: LD_VAR 0 6
39357: EQUAL
39358: IFFALSE 39377
// PlaySoundXY ( x , y , PlantMine ) ;
39360: LD_VAR 0 2
39364: PPUSH
39365: LD_VAR 0 3
39369: PPUSH
39370: LD_STRING PlantMine
39372: PPUSH
39373: CALL_OW 366
// repeat wait ( 1 ) ;
39377: LD_INT 1
39379: PPUSH
39380: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
39384: LD_VAR 0 2
39388: PPUSH
39389: LD_VAR 0 3
39393: PPUSH
39394: LD_VAR 0 6
39398: PPUSH
39399: LD_INT 0
39401: PPUSH
39402: CALL_OW 454
39406: IFFALSE 39377
// if MineAtPos ( x , y ) then
39408: LD_VAR 0 2
39412: PPUSH
39413: LD_VAR 0 3
39417: PPUSH
39418: CALL_OW 458
39422: IFFALSE 39538
// begin for i in minerMinesList [ index ] do
39424: LD_ADDR_VAR 0 7
39428: PUSH
39429: LD_EXP 114
39433: PUSH
39434: LD_VAR 0 5
39438: ARRAY
39439: PUSH
39440: FOR_IN
39441: IFFALSE 39483
// if i [ 1 ] = x and i [ 2 ] = y then
39443: LD_VAR 0 7
39447: PUSH
39448: LD_INT 1
39450: ARRAY
39451: PUSH
39452: LD_VAR 0 2
39456: EQUAL
39457: IFFALSE 39475
39459: PUSH
39460: LD_VAR 0 7
39464: PUSH
39465: LD_INT 2
39467: ARRAY
39468: PUSH
39469: LD_VAR 0 3
39473: EQUAL
39474: AND
39475: IFFALSE 39481
// exit ;
39477: POP
39478: POP
39479: GO 39546
39481: GO 39440
39483: POP
39484: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39485: LD_ADDR_EXP 114
39489: PUSH
39490: LD_EXP 114
39494: PPUSH
39495: LD_VAR 0 5
39499: PUSH
39500: LD_EXP 114
39504: PUSH
39505: LD_VAR 0 5
39509: ARRAY
39510: PUSH
39511: LD_INT 1
39513: PLUS
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PPUSH
39519: LD_VAR 0 2
39523: PUSH
39524: LD_VAR 0 3
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PPUSH
39533: CALL 46615 0 3
39537: ST_TO_ADDR
// end ; result := true ;
39538: LD_ADDR_VAR 0 4
39542: PUSH
39543: LD_INT 1
39545: ST_TO_ADDR
// end ;
39546: LD_VAR 0 4
39550: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39551: LD_INT 0
39553: PPUSH
39554: PPUSH
39555: PPUSH
// if not unit in minersList then
39556: LD_VAR 0 1
39560: PUSH
39561: LD_EXP 113
39565: IN
39566: NOT
39567: IFFALSE 39571
// exit ;
39569: GO 39778
// index := GetElementIndex ( minersList , unit ) ;
39571: LD_ADDR_VAR 0 6
39575: PUSH
39576: LD_EXP 113
39580: PPUSH
39581: LD_VAR 0 1
39585: PPUSH
39586: CALL 46398 0 2
39590: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39591: LD_ADDR_VAR 0 5
39595: PUSH
39596: DOUBLE
39597: LD_EXP 114
39601: PUSH
39602: LD_VAR 0 6
39606: ARRAY
39607: INC
39608: ST_TO_ADDR
39609: LD_INT 1
39611: PUSH
39612: FOR_DOWNTO
39613: IFFALSE 39776
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39615: LD_EXP 114
39619: PUSH
39620: LD_VAR 0 6
39624: ARRAY
39625: PUSH
39626: LD_VAR 0 5
39630: ARRAY
39631: PUSH
39632: LD_INT 1
39634: ARRAY
39635: PPUSH
39636: LD_EXP 114
39640: PUSH
39641: LD_VAR 0 6
39645: ARRAY
39646: PUSH
39647: LD_VAR 0 5
39651: ARRAY
39652: PUSH
39653: LD_INT 2
39655: ARRAY
39656: PPUSH
39657: LD_VAR 0 2
39661: PPUSH
39662: LD_VAR 0 3
39666: PPUSH
39667: CALL_OW 298
39671: PUSH
39672: LD_INT 6
39674: LESS
39675: IFFALSE 39774
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39677: LD_EXP 114
39681: PUSH
39682: LD_VAR 0 6
39686: ARRAY
39687: PUSH
39688: LD_VAR 0 5
39692: ARRAY
39693: PUSH
39694: LD_INT 1
39696: ARRAY
39697: PPUSH
39698: LD_EXP 114
39702: PUSH
39703: LD_VAR 0 6
39707: ARRAY
39708: PUSH
39709: LD_VAR 0 5
39713: ARRAY
39714: PUSH
39715: LD_INT 2
39717: ARRAY
39718: PPUSH
39719: LD_VAR 0 1
39723: PPUSH
39724: CALL_OW 255
39728: PPUSH
39729: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39733: LD_ADDR_EXP 114
39737: PUSH
39738: LD_EXP 114
39742: PPUSH
39743: LD_VAR 0 6
39747: PPUSH
39748: LD_EXP 114
39752: PUSH
39753: LD_VAR 0 6
39757: ARRAY
39758: PPUSH
39759: LD_VAR 0 5
39763: PPUSH
39764: CALL_OW 3
39768: PPUSH
39769: CALL_OW 1
39773: ST_TO_ADDR
// end ; end ;
39774: GO 39612
39776: POP
39777: POP
// end ;
39778: LD_VAR 0 4
39782: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39783: LD_INT 0
39785: PPUSH
39786: PPUSH
39787: PPUSH
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39794: LD_VAR 0 1
39798: PPUSH
39799: CALL_OW 264
39803: PUSH
39804: LD_INT 81
39806: EQUAL
39807: NOT
39808: IFTRUE 39823
39810: PUSH
39811: LD_VAR 0 1
39815: PUSH
39816: LD_EXP 113
39820: IN
39821: NOT
39822: OR
39823: IFFALSE 39827
// exit ;
39825: GO 40153
// index := GetElementIndex ( minersList , unit ) ;
39827: LD_ADDR_VAR 0 6
39831: PUSH
39832: LD_EXP 113
39836: PPUSH
39837: LD_VAR 0 1
39841: PPUSH
39842: CALL 46398 0 2
39846: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39847: LD_ADDR_VAR 0 8
39851: PUSH
39852: LD_EXP 115
39856: PUSH
39857: LD_EXP 114
39861: PUSH
39862: LD_VAR 0 6
39866: ARRAY
39867: MINUS
39868: ST_TO_ADDR
// if not minesFreeAmount then
39869: LD_VAR 0 8
39873: NOT
39874: IFFALSE 39878
// exit ;
39876: GO 40153
// tmp := [ ] ;
39878: LD_ADDR_VAR 0 7
39882: PUSH
39883: EMPTY
39884: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39885: LD_ADDR_VAR 0 5
39889: PUSH
39890: DOUBLE
39891: LD_INT 1
39893: DEC
39894: ST_TO_ADDR
39895: LD_VAR 0 8
39899: PUSH
39900: FOR_TO
39901: IFFALSE 40100
// begin _d := rand ( 0 , 5 ) ;
39903: LD_ADDR_VAR 0 11
39907: PUSH
39908: LD_INT 0
39910: PPUSH
39911: LD_INT 5
39913: PPUSH
39914: CALL_OW 12
39918: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39919: LD_ADDR_VAR 0 12
39923: PUSH
39924: LD_INT 2
39926: PPUSH
39927: LD_INT 6
39929: PPUSH
39930: CALL_OW 12
39934: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39935: LD_ADDR_VAR 0 9
39939: PUSH
39940: LD_VAR 0 2
39944: PPUSH
39945: LD_VAR 0 11
39949: PPUSH
39950: LD_VAR 0 12
39954: PPUSH
39955: CALL_OW 272
39959: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39960: LD_ADDR_VAR 0 10
39964: PUSH
39965: LD_VAR 0 3
39969: PPUSH
39970: LD_VAR 0 11
39974: PPUSH
39975: LD_VAR 0 12
39979: PPUSH
39980: CALL_OW 273
39984: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39985: LD_VAR 0 9
39989: PPUSH
39990: LD_VAR 0 10
39994: PPUSH
39995: CALL_OW 488
39999: IFFALSE 40023
40001: PUSH
40002: LD_VAR 0 9
40006: PUSH
40007: LD_VAR 0 10
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_VAR 0 7
40020: IN
40021: NOT
40022: AND
40023: IFFALSE 40042
40025: PUSH
40026: LD_VAR 0 9
40030: PPUSH
40031: LD_VAR 0 10
40035: PPUSH
40036: CALL_OW 458
40040: NOT
40041: AND
40042: IFFALSE 40084
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40044: LD_ADDR_VAR 0 7
40048: PUSH
40049: LD_VAR 0 7
40053: PPUSH
40054: LD_VAR 0 7
40058: PUSH
40059: LD_INT 1
40061: PLUS
40062: PPUSH
40063: LD_VAR 0 9
40067: PUSH
40068: LD_VAR 0 10
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PPUSH
40077: CALL_OW 1
40081: ST_TO_ADDR
40082: GO 40098
// i := i - 1 ;
40084: LD_ADDR_VAR 0 5
40088: PUSH
40089: LD_VAR 0 5
40093: PUSH
40094: LD_INT 1
40096: MINUS
40097: ST_TO_ADDR
// end ;
40098: GO 39900
40100: POP
40101: POP
// for i in tmp do
40102: LD_ADDR_VAR 0 5
40106: PUSH
40107: LD_VAR 0 7
40111: PUSH
40112: FOR_IN
40113: IFFALSE 40151
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40115: LD_VAR 0 1
40119: PPUSH
40120: LD_VAR 0 5
40124: PUSH
40125: LD_INT 1
40127: ARRAY
40128: PPUSH
40129: LD_VAR 0 5
40133: PUSH
40134: LD_INT 2
40136: ARRAY
40137: PPUSH
40138: CALL 39144 0 3
40142: NOT
40143: IFFALSE 40149
// exit ;
40145: POP
40146: POP
40147: GO 40153
40149: GO 40112
40151: POP
40152: POP
// end ;
40153: LD_VAR 0 4
40157: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40158: LD_INT 0
40160: PPUSH
40161: PPUSH
40162: PPUSH
40163: PPUSH
40164: PPUSH
40165: PPUSH
40166: PPUSH
40167: PPUSH
40168: PPUSH
// if GetClass ( unit ) <> class_sniper then
40169: LD_VAR 0 1
40173: PPUSH
40174: CALL_OW 257
40178: PUSH
40179: LD_INT 5
40181: NONEQUAL
40182: IFFALSE 40186
// exit ;
40184: GO 40656
// dist := 8 ;
40186: LD_ADDR_VAR 0 5
40190: PUSH
40191: LD_INT 8
40193: ST_TO_ADDR
// viewRange := 12 ;
40194: LD_ADDR_VAR 0 8
40198: PUSH
40199: LD_INT 12
40201: ST_TO_ADDR
// side := GetSide ( unit ) ;
40202: LD_ADDR_VAR 0 6
40206: PUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: CALL_OW 255
40216: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40217: LD_INT 61
40219: PPUSH
40220: LD_VAR 0 6
40224: PPUSH
40225: CALL_OW 321
40229: PUSH
40230: LD_INT 2
40232: EQUAL
40233: IFFALSE 40243
// viewRange := 16 ;
40235: LD_ADDR_VAR 0 8
40239: PUSH
40240: LD_INT 16
40242: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40243: LD_VAR 0 1
40247: PPUSH
40248: LD_VAR 0 2
40252: PPUSH
40253: LD_VAR 0 3
40257: PPUSH
40258: CALL_OW 297
40262: PUSH
40263: LD_VAR 0 5
40267: GREATER
40268: IFFALSE 40347
// begin ComMoveXY ( unit , x , y ) ;
40270: LD_VAR 0 1
40274: PPUSH
40275: LD_VAR 0 2
40279: PPUSH
40280: LD_VAR 0 3
40284: PPUSH
40285: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40289: LD_INT 35
40291: PPUSH
40292: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40296: LD_VAR 0 1
40300: PPUSH
40301: LD_VAR 0 2
40305: PPUSH
40306: LD_VAR 0 3
40310: PPUSH
40311: CALL 78454 0 3
40315: NOT
40316: IFFALSE 40320
// exit ;
40318: GO 40656
// until GetDistUnitXY ( unit , x , y ) < dist ;
40320: LD_VAR 0 1
40324: PPUSH
40325: LD_VAR 0 2
40329: PPUSH
40330: LD_VAR 0 3
40334: PPUSH
40335: CALL_OW 297
40339: PUSH
40340: LD_VAR 0 5
40344: LESS
40345: IFFALSE 40289
// end ; ComTurnXY ( unit , x , y ) ;
40347: LD_VAR 0 1
40351: PPUSH
40352: LD_VAR 0 2
40356: PPUSH
40357: LD_VAR 0 3
40361: PPUSH
40362: CALL_OW 118
// repeat if Multiplayer then
40366: LD_OWVAR 4
40370: IFFALSE 40381
// wait ( 35 ) else
40372: LD_INT 35
40374: PPUSH
40375: CALL_OW 67
40379: GO 40388
// wait ( 5 ) ;
40381: LD_INT 5
40383: PPUSH
40384: CALL_OW 67
// _d := GetDir ( unit ) ;
40388: LD_ADDR_VAR 0 11
40392: PUSH
40393: LD_VAR 0 1
40397: PPUSH
40398: CALL_OW 254
40402: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
40403: LD_ADDR_VAR 0 7
40407: PUSH
40408: LD_VAR 0 1
40412: PPUSH
40413: CALL_OW 250
40417: PPUSH
40418: LD_VAR 0 1
40422: PPUSH
40423: CALL_OW 251
40427: PPUSH
40428: LD_VAR 0 2
40432: PPUSH
40433: LD_VAR 0 3
40437: PPUSH
40438: CALL 81090 0 4
40442: ST_TO_ADDR
// until dir = _d ;
40443: LD_VAR 0 7
40447: PUSH
40448: LD_VAR 0 11
40452: EQUAL
40453: IFFALSE 40366
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
40455: LD_ADDR_VAR 0 9
40459: PUSH
40460: LD_VAR 0 1
40464: PPUSH
40465: CALL_OW 250
40469: PPUSH
40470: LD_VAR 0 7
40474: PPUSH
40475: LD_VAR 0 5
40479: PPUSH
40480: CALL_OW 272
40484: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
40485: LD_ADDR_VAR 0 10
40489: PUSH
40490: LD_VAR 0 1
40494: PPUSH
40495: CALL_OW 251
40499: PPUSH
40500: LD_VAR 0 7
40504: PPUSH
40505: LD_VAR 0 5
40509: PPUSH
40510: CALL_OW 273
40514: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40515: LD_VAR 0 9
40519: PPUSH
40520: LD_VAR 0 10
40524: PPUSH
40525: CALL_OW 488
40529: NOT
40530: IFFALSE 40534
// exit ;
40532: GO 40656
// ComAnimCustom ( unit , 1 ) ;
40534: LD_VAR 0 1
40538: PPUSH
40539: LD_INT 1
40541: PPUSH
40542: CALL_OW 592
// p := 0 ;
40546: LD_ADDR_VAR 0 12
40550: PUSH
40551: LD_INT 0
40553: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40554: LD_VAR 0 9
40558: PPUSH
40559: LD_VAR 0 10
40563: PPUSH
40564: LD_VAR 0 6
40568: PPUSH
40569: LD_VAR 0 8
40573: PPUSH
40574: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
40578: LD_INT 35
40580: PPUSH
40581: CALL_OW 67
// p := Inc ( p ) ;
40585: LD_ADDR_VAR 0 12
40589: PUSH
40590: LD_VAR 0 12
40594: PPUSH
40595: CALL 81046 0 1
40599: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
40600: LD_VAR 0 12
40604: PUSH
40605: LD_INT 3
40607: EQUAL
40608: IFTRUE 40622
40610: PUSH
40611: LD_VAR 0 1
40615: PPUSH
40616: CALL_OW 302
40620: NOT
40621: OR
40622: IFTRUE 40635
40624: PUSH
40625: LD_VAR 0 1
40629: PPUSH
40630: CALL_OW 301
40634: OR
40635: IFFALSE 40578
// RemoveSeeing ( _x , _y , side ) ;
40637: LD_VAR 0 9
40641: PPUSH
40642: LD_VAR 0 10
40646: PPUSH
40647: LD_VAR 0 6
40651: PPUSH
40652: CALL_OW 331
// end ;
40656: LD_VAR 0 4
40660: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
40661: LD_INT 0
40663: PPUSH
40664: PPUSH
40665: PPUSH
40666: PPUSH
40667: PPUSH
40668: PPUSH
40669: PPUSH
40670: PPUSH
40671: PPUSH
40672: PPUSH
40673: PPUSH
// if not unit then
40674: LD_VAR 0 1
40678: NOT
40679: IFFALSE 40683
// exit ;
40681: GO 40954
// side := GetSide ( unit ) ;
40683: LD_ADDR_VAR 0 3
40687: PUSH
40688: LD_VAR 0 1
40692: PPUSH
40693: CALL_OW 255
40697: ST_TO_ADDR
// x := GetX ( unit ) ;
40698: LD_ADDR_VAR 0 5
40702: PUSH
40703: LD_VAR 0 1
40707: PPUSH
40708: CALL_OW 250
40712: ST_TO_ADDR
// y := GetY ( unit ) ;
40713: LD_ADDR_VAR 0 6
40717: PUSH
40718: LD_VAR 0 1
40722: PPUSH
40723: CALL_OW 251
40727: ST_TO_ADDR
// r := 8 ;
40728: LD_ADDR_VAR 0 4
40732: PUSH
40733: LD_INT 8
40735: ST_TO_ADDR
// if x - r < 0 then
40736: LD_VAR 0 5
40740: PUSH
40741: LD_VAR 0 4
40745: MINUS
40746: PUSH
40747: LD_INT 0
40749: LESS
40750: IFFALSE 40762
// min_x := 0 else
40752: LD_ADDR_VAR 0 7
40756: PUSH
40757: LD_INT 0
40759: ST_TO_ADDR
40760: GO 40778
// min_x := x - r ;
40762: LD_ADDR_VAR 0 7
40766: PUSH
40767: LD_VAR 0 5
40771: PUSH
40772: LD_VAR 0 4
40776: MINUS
40777: ST_TO_ADDR
// if y - r < 0 then
40778: LD_VAR 0 6
40782: PUSH
40783: LD_VAR 0 4
40787: MINUS
40788: PUSH
40789: LD_INT 0
40791: LESS
40792: IFFALSE 40804
// min_y := 0 else
40794: LD_ADDR_VAR 0 8
40798: PUSH
40799: LD_INT 0
40801: ST_TO_ADDR
40802: GO 40820
// min_y := y - r ;
40804: LD_ADDR_VAR 0 8
40808: PUSH
40809: LD_VAR 0 6
40813: PUSH
40814: LD_VAR 0 4
40818: MINUS
40819: ST_TO_ADDR
// max_x := x + r ;
40820: LD_ADDR_VAR 0 9
40824: PUSH
40825: LD_VAR 0 5
40829: PUSH
40830: LD_VAR 0 4
40834: PLUS
40835: ST_TO_ADDR
// max_y := y + r ;
40836: LD_ADDR_VAR 0 10
40840: PUSH
40841: LD_VAR 0 6
40845: PUSH
40846: LD_VAR 0 4
40850: PLUS
40851: ST_TO_ADDR
// for _x = min_x to max_x do
40852: LD_ADDR_VAR 0 11
40856: PUSH
40857: DOUBLE
40858: LD_VAR 0 7
40862: DEC
40863: ST_TO_ADDR
40864: LD_VAR 0 9
40868: PUSH
40869: FOR_TO
40870: IFFALSE 40952
// for _y = min_y to max_y do
40872: LD_ADDR_VAR 0 12
40876: PUSH
40877: DOUBLE
40878: LD_VAR 0 8
40882: DEC
40883: ST_TO_ADDR
40884: LD_VAR 0 10
40888: PUSH
40889: FOR_TO
40890: IFFALSE 40948
// begin if not ValidHex ( _x , _y ) then
40892: LD_VAR 0 11
40896: PPUSH
40897: LD_VAR 0 12
40901: PPUSH
40902: CALL_OW 488
40906: NOT
40907: IFFALSE 40911
// continue ;
40909: GO 40889
// if MineAtPos ( _x , _y ) then
40911: LD_VAR 0 11
40915: PPUSH
40916: LD_VAR 0 12
40920: PPUSH
40921: CALL_OW 458
40925: IFFALSE 40946
// ViewMineAtPos ( _x , _y , side ) ;
40927: LD_VAR 0 11
40931: PPUSH
40932: LD_VAR 0 12
40936: PPUSH
40937: LD_VAR 0 3
40941: PPUSH
40942: CALL_OW 457
// end ;
40946: GO 40889
40948: POP
40949: POP
40950: GO 40869
40952: POP
40953: POP
// end ;
40954: LD_VAR 0 2
40958: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
40959: LD_INT 0
40961: PPUSH
40962: PPUSH
40963: PPUSH
40964: PPUSH
40965: PPUSH
40966: PPUSH
40967: PPUSH
// if not units then
40968: LD_VAR 0 1
40972: NOT
40973: IFFALSE 40977
// exit ;
40975: GO 41441
// scaners := [ ] ;
40977: LD_ADDR_VAR 0 6
40981: PUSH
40982: EMPTY
40983: ST_TO_ADDR
// for i in units do
40984: LD_ADDR_VAR 0 3
40988: PUSH
40989: LD_VAR 0 1
40993: PUSH
40994: FOR_IN
40995: IFFALSE 41152
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
40997: LD_VAR 0 3
41001: PPUSH
41002: CALL_OW 264
41006: PUSH
41007: LD_INT 11
41009: NONEQUAL
41010: IFTRUE 41024
41012: PUSH
41013: LD_VAR 0 3
41017: PPUSH
41018: CALL_OW 302
41022: NOT
41023: OR
41024: IFTRUE 41041
41026: PUSH
41027: LD_VAR 0 3
41031: PPUSH
41032: CALL_OW 110
41036: PUSH
41037: LD_INT 502
41039: EQUAL
41040: OR
41041: IFFALSE 41045
// continue ;
41043: GO 40994
// ComStop ( i ) ;
41045: LD_VAR 0 3
41049: PPUSH
41050: CALL_OW 141
// x := GetX ( i ) ;
41054: LD_ADDR_VAR 0 4
41058: PUSH
41059: LD_VAR 0 3
41063: PPUSH
41064: CALL_OW 250
41068: ST_TO_ADDR
// y := GetY ( i ) ;
41069: LD_ADDR_VAR 0 5
41073: PUSH
41074: LD_VAR 0 3
41078: PPUSH
41079: CALL_OW 251
41083: ST_TO_ADDR
// if GetSide ( i ) = your_side then
41084: LD_VAR 0 3
41088: PPUSH
41089: CALL_OW 255
41093: PUSH
41094: LD_OWVAR 2
41098: EQUAL
41099: IFFALSE 41118
// PlaySoundXY ( x , y , mineDetector ) ;
41101: LD_VAR 0 4
41105: PPUSH
41106: LD_VAR 0 5
41110: PPUSH
41111: LD_STRING mineDetector
41113: PPUSH
41114: CALL_OW 366
// scaners := Join ( scaners , i ) ;
41118: LD_ADDR_VAR 0 6
41122: PUSH
41123: LD_VAR 0 6
41127: PPUSH
41128: LD_VAR 0 3
41132: PPUSH
41133: CALL 79673 0 2
41137: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
41138: LD_VAR 0 3
41142: PPUSH
41143: LD_INT 502
41145: PPUSH
41146: CALL_OW 109
// end ;
41150: GO 40994
41152: POP
41153: POP
// if not scaners then
41154: LD_VAR 0 6
41158: NOT
41159: IFFALSE 41163
// exit ;
41161: GO 41441
// wait ( 3 ) ;
41163: LD_INT 3
41165: PPUSH
41166: CALL_OW 67
// timer := 6 ;
41170: LD_ADDR_VAR 0 7
41174: PUSH
41175: LD_INT 6
41177: ST_TO_ADDR
// repeat for i in scaners do
41178: LD_ADDR_VAR 0 3
41182: PUSH
41183: LD_VAR 0 6
41187: PUSH
41188: FOR_IN
41189: IFFALSE 41339
// begin side := GetSide ( i ) ;
41191: LD_ADDR_VAR 0 8
41195: PUSH
41196: LD_VAR 0 3
41200: PPUSH
41201: CALL_OW 255
41205: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
41206: LD_VAR 0 3
41210: PPUSH
41211: CALL_OW 302
41215: NOT
41216: IFTRUE 41229
41218: PUSH
41219: LD_VAR 0 3
41223: PPUSH
41224: CALL_OW 314
41228: OR
41229: IFTRUE 41260
41231: PUSH
41232: LD_VAR 0 3
41236: PPUSH
41237: CALL_OW 263
41241: PUSH
41242: LD_INT 1
41244: EQUAL
41245: IFFALSE 41259
41247: PUSH
41248: LD_VAR 0 3
41252: PPUSH
41253: CALL_OW 311
41257: NOT
41258: AND
41259: OR
41260: IFFALSE 41304
// begin SetUnitDisplayNumber ( i , 0 ) ;
41262: LD_VAR 0 3
41266: PPUSH
41267: LD_INT 0
41269: PPUSH
41270: CALL_OW 505
// SetTag ( i , 0 ) ;
41274: LD_VAR 0 3
41278: PPUSH
41279: LD_INT 0
41281: PPUSH
41282: CALL_OW 109
// scaners := scaners diff i ;
41286: LD_ADDR_VAR 0 6
41290: PUSH
41291: LD_VAR 0 6
41295: PUSH
41296: LD_VAR 0 3
41300: DIFF
41301: ST_TO_ADDR
// continue ;
41302: GO 41188
// end ; if side in [ your_side , 9 ] then
41304: LD_VAR 0 8
41308: PUSH
41309: LD_OWVAR 2
41313: PUSH
41314: LD_INT 9
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: IN
41321: IFFALSE 41337
// SetUnitDisplayNumber ( i , timer ) ;
41323: LD_VAR 0 3
41327: PPUSH
41328: LD_VAR 0 7
41332: PPUSH
41333: CALL_OW 505
// end ;
41337: GO 41188
41339: POP
41340: POP
// if not scaners then
41341: LD_VAR 0 6
41345: NOT
41346: IFFALSE 41350
// exit ;
41348: GO 41441
// timer := Dec ( timer ) ;
41350: LD_ADDR_VAR 0 7
41354: PUSH
41355: LD_VAR 0 7
41359: PPUSH
41360: CALL 81068 0 1
41364: ST_TO_ADDR
// wait ( 0 0$1 ) ;
41365: LD_INT 35
41367: PPUSH
41368: CALL_OW 67
// until timer = 0 ;
41372: LD_VAR 0 7
41376: PUSH
41377: LD_INT 0
41379: EQUAL
41380: IFFALSE 41178
// if not scaners then
41382: LD_VAR 0 6
41386: NOT
41387: IFFALSE 41391
// exit ;
41389: GO 41441
// for i in scaners do
41391: LD_ADDR_VAR 0 3
41395: PUSH
41396: LD_VAR 0 6
41400: PUSH
41401: FOR_IN
41402: IFFALSE 41439
// begin SetUnitDisplayNumber ( i , 0 ) ;
41404: LD_VAR 0 3
41408: PPUSH
41409: LD_INT 0
41411: PPUSH
41412: CALL_OW 505
// SetTag ( i , 0 ) ;
41416: LD_VAR 0 3
41420: PPUSH
41421: LD_INT 0
41423: PPUSH
41424: CALL_OW 109
// RevealDetectorMine ( i ) ;
41428: LD_VAR 0 3
41432: PPUSH
41433: CALL 40661 0 1
// end ;
41437: GO 41401
41439: POP
41440: POP
// end ;
41441: LD_VAR 0 2
41445: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
41446: LD_INT 0
41448: PPUSH
// if p1 = mine_detector_mode then
41449: LD_VAR 0 2
41453: PUSH
41454: LD_INT 103
41456: EQUAL
41457: IFFALSE 41468
// DetectMine ( units ) ;
41459: LD_VAR 0 1
41463: PPUSH
41464: CALL 40959 0 1
// end ; end_of_file
41468: LD_VAR 0 7
41472: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41473: LD_INT 0
41475: PPUSH
41476: PPUSH
// if exist_mode then
41477: LD_VAR 0 2
41481: IFFALSE 41527
// begin unit := CreateCharacter ( prefix & ident ) ;
41483: LD_ADDR_VAR 0 5
41487: PUSH
41488: LD_VAR 0 3
41492: PUSH
41493: LD_VAR 0 1
41497: STR
41498: PPUSH
41499: CALL_OW 34
41503: ST_TO_ADDR
// if unit then
41504: LD_VAR 0 5
41508: IFFALSE 41525
// DeleteCharacters ( prefix & ident ) ;
41510: LD_VAR 0 3
41514: PUSH
41515: LD_VAR 0 1
41519: STR
41520: PPUSH
41521: CALL_OW 40
// end else
41525: GO 41542
// unit := NewCharacter ( ident ) ;
41527: LD_ADDR_VAR 0 5
41531: PUSH
41532: LD_VAR 0 1
41536: PPUSH
41537: CALL_OW 25
41541: ST_TO_ADDR
// result := unit ;
41542: LD_ADDR_VAR 0 4
41546: PUSH
41547: LD_VAR 0 5
41551: ST_TO_ADDR
// end ;
41552: LD_VAR 0 4
41556: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
41557: LD_INT 0
41559: PPUSH
41560: PPUSH
// if exist_mode then
41561: LD_VAR 0 2
41565: IFFALSE 41590
// unit := CreateCharacter ( prefix & ident ) else
41567: LD_ADDR_VAR 0 5
41571: PUSH
41572: LD_VAR 0 3
41576: PUSH
41577: LD_VAR 0 1
41581: STR
41582: PPUSH
41583: CALL_OW 34
41587: ST_TO_ADDR
41588: GO 41605
// unit := NewCharacter ( ident ) ;
41590: LD_ADDR_VAR 0 5
41594: PUSH
41595: LD_VAR 0 1
41599: PPUSH
41600: CALL_OW 25
41604: ST_TO_ADDR
// result := unit ;
41605: LD_ADDR_VAR 0 4
41609: PUSH
41610: LD_VAR 0 5
41614: ST_TO_ADDR
// end ;
41615: LD_VAR 0 4
41619: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41620: LD_INT 0
41622: PPUSH
41623: PPUSH
// if not side or not nation then
41624: LD_VAR 0 1
41628: NOT
41629: IFTRUE 41638
41631: PUSH
41632: LD_VAR 0 2
41636: NOT
41637: OR
41638: IFFALSE 41642
// exit ;
41640: GO 42436
// case nation of nation_american :
41642: LD_VAR 0 2
41646: PUSH
41647: LD_INT 1
41649: DOUBLE
41650: EQUAL
41651: IFTRUE 41655
41653: GO 41877
41655: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
41656: LD_ADDR_VAR 0 4
41660: PUSH
41661: LD_INT 35
41663: PUSH
41664: LD_INT 45
41666: PUSH
41667: LD_INT 46
41669: PUSH
41670: LD_INT 47
41672: PUSH
41673: LD_INT 82
41675: PUSH
41676: LD_INT 83
41678: PUSH
41679: LD_INT 84
41681: PUSH
41682: LD_INT 85
41684: PUSH
41685: LD_INT 86
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: LD_INT 6
41696: PUSH
41697: LD_INT 15
41699: PUSH
41700: LD_INT 16
41702: PUSH
41703: LD_INT 7
41705: PUSH
41706: LD_INT 12
41708: PUSH
41709: LD_INT 13
41711: PUSH
41712: LD_INT 10
41714: PUSH
41715: LD_INT 14
41717: PUSH
41718: LD_INT 20
41720: PUSH
41721: LD_INT 21
41723: PUSH
41724: LD_INT 22
41726: PUSH
41727: LD_INT 25
41729: PUSH
41730: LD_INT 32
41732: PUSH
41733: LD_INT 27
41735: PUSH
41736: LD_INT 36
41738: PUSH
41739: LD_INT 69
41741: PUSH
41742: LD_INT 39
41744: PUSH
41745: LD_INT 34
41747: PUSH
41748: LD_INT 40
41750: PUSH
41751: LD_INT 48
41753: PUSH
41754: LD_INT 49
41756: PUSH
41757: LD_INT 50
41759: PUSH
41760: LD_INT 51
41762: PUSH
41763: LD_INT 52
41765: PUSH
41766: LD_INT 53
41768: PUSH
41769: LD_INT 54
41771: PUSH
41772: LD_INT 55
41774: PUSH
41775: LD_INT 56
41777: PUSH
41778: LD_INT 57
41780: PUSH
41781: LD_INT 58
41783: PUSH
41784: LD_INT 59
41786: PUSH
41787: LD_INT 60
41789: PUSH
41790: LD_INT 61
41792: PUSH
41793: LD_INT 62
41795: PUSH
41796: LD_INT 80
41798: PUSH
41799: LD_INT 82
41801: PUSH
41802: LD_INT 83
41804: PUSH
41805: LD_INT 84
41807: PUSH
41808: LD_INT 85
41810: PUSH
41811: LD_INT 86
41813: PUSH
41814: LD_INT 90
41816: PUSH
41817: LD_INT 93
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: ST_TO_ADDR
41875: GO 42358
41877: LD_INT 2
41879: DOUBLE
41880: EQUAL
41881: IFTRUE 41885
41883: GO 42119
41885: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
41886: LD_ADDR_VAR 0 4
41890: PUSH
41891: LD_INT 35
41893: PUSH
41894: LD_INT 45
41896: PUSH
41897: LD_INT 46
41899: PUSH
41900: LD_INT 47
41902: PUSH
41903: LD_INT 82
41905: PUSH
41906: LD_INT 83
41908: PUSH
41909: LD_INT 84
41911: PUSH
41912: LD_INT 85
41914: PUSH
41915: LD_INT 87
41917: PUSH
41918: LD_INT 70
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 11
41926: PUSH
41927: LD_INT 3
41929: PUSH
41930: LD_INT 4
41932: PUSH
41933: LD_INT 5
41935: PUSH
41936: LD_INT 6
41938: PUSH
41939: LD_INT 15
41941: PUSH
41942: LD_INT 18
41944: PUSH
41945: LD_INT 7
41947: PUSH
41948: LD_INT 17
41950: PUSH
41951: LD_INT 8
41953: PUSH
41954: LD_INT 20
41956: PUSH
41957: LD_INT 21
41959: PUSH
41960: LD_INT 22
41962: PUSH
41963: LD_INT 72
41965: PUSH
41966: LD_INT 26
41968: PUSH
41969: LD_INT 69
41971: PUSH
41972: LD_INT 39
41974: PUSH
41975: LD_INT 40
41977: PUSH
41978: LD_INT 41
41980: PUSH
41981: LD_INT 42
41983: PUSH
41984: LD_INT 43
41986: PUSH
41987: LD_INT 48
41989: PUSH
41990: LD_INT 49
41992: PUSH
41993: LD_INT 50
41995: PUSH
41996: LD_INT 51
41998: PUSH
41999: LD_INT 52
42001: PUSH
42002: LD_INT 53
42004: PUSH
42005: LD_INT 54
42007: PUSH
42008: LD_INT 55
42010: PUSH
42011: LD_INT 56
42013: PUSH
42014: LD_INT 60
42016: PUSH
42017: LD_INT 61
42019: PUSH
42020: LD_INT 62
42022: PUSH
42023: LD_INT 66
42025: PUSH
42026: LD_INT 67
42028: PUSH
42029: LD_INT 68
42031: PUSH
42032: LD_INT 81
42034: PUSH
42035: LD_INT 82
42037: PUSH
42038: LD_INT 83
42040: PUSH
42041: LD_INT 84
42043: PUSH
42044: LD_INT 85
42046: PUSH
42047: LD_INT 87
42049: PUSH
42050: LD_INT 88
42052: PUSH
42053: LD_INT 92
42055: PUSH
42056: LD_INT 94
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: ST_TO_ADDR
42117: GO 42358
42119: LD_INT 3
42121: DOUBLE
42122: EQUAL
42123: IFTRUE 42127
42125: GO 42357
42127: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
42128: LD_ADDR_VAR 0 4
42132: PUSH
42133: LD_INT 46
42135: PUSH
42136: LD_INT 47
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 2
42144: PUSH
42145: LD_INT 82
42147: PUSH
42148: LD_INT 83
42150: PUSH
42151: LD_INT 84
42153: PUSH
42154: LD_INT 85
42156: PUSH
42157: LD_INT 86
42159: PUSH
42160: LD_INT 11
42162: PUSH
42163: LD_INT 9
42165: PUSH
42166: LD_INT 20
42168: PUSH
42169: LD_INT 19
42171: PUSH
42172: LD_INT 21
42174: PUSH
42175: LD_INT 24
42177: PUSH
42178: LD_INT 22
42180: PUSH
42181: LD_INT 25
42183: PUSH
42184: LD_INT 28
42186: PUSH
42187: LD_INT 29
42189: PUSH
42190: LD_INT 30
42192: PUSH
42193: LD_INT 31
42195: PUSH
42196: LD_INT 37
42198: PUSH
42199: LD_INT 38
42201: PUSH
42202: LD_INT 32
42204: PUSH
42205: LD_INT 27
42207: PUSH
42208: LD_INT 33
42210: PUSH
42211: LD_INT 69
42213: PUSH
42214: LD_INT 39
42216: PUSH
42217: LD_INT 34
42219: PUSH
42220: LD_INT 40
42222: PUSH
42223: LD_INT 71
42225: PUSH
42226: LD_INT 23
42228: PUSH
42229: LD_INT 44
42231: PUSH
42232: LD_INT 48
42234: PUSH
42235: LD_INT 49
42237: PUSH
42238: LD_INT 50
42240: PUSH
42241: LD_INT 51
42243: PUSH
42244: LD_INT 52
42246: PUSH
42247: LD_INT 53
42249: PUSH
42250: LD_INT 54
42252: PUSH
42253: LD_INT 55
42255: PUSH
42256: LD_INT 56
42258: PUSH
42259: LD_INT 57
42261: PUSH
42262: LD_INT 58
42264: PUSH
42265: LD_INT 59
42267: PUSH
42268: LD_INT 63
42270: PUSH
42271: LD_INT 64
42273: PUSH
42274: LD_INT 65
42276: PUSH
42277: LD_INT 82
42279: PUSH
42280: LD_INT 83
42282: PUSH
42283: LD_INT 84
42285: PUSH
42286: LD_INT 85
42288: PUSH
42289: LD_INT 86
42291: PUSH
42292: LD_INT 89
42294: PUSH
42295: LD_INT 91
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: ST_TO_ADDR
42355: GO 42358
42357: POP
// if state > - 1 and state < 3 then
42358: LD_VAR 0 3
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: GREATER
42367: IFFALSE 42379
42369: PUSH
42370: LD_VAR 0 3
42374: PUSH
42375: LD_INT 3
42377: LESS
42378: AND
42379: IFFALSE 42436
// for i in result do
42381: LD_ADDR_VAR 0 5
42385: PUSH
42386: LD_VAR 0 4
42390: PUSH
42391: FOR_IN
42392: IFFALSE 42434
// if GetTech ( i , side ) <> state then
42394: LD_VAR 0 5
42398: PPUSH
42399: LD_VAR 0 1
42403: PPUSH
42404: CALL_OW 321
42408: PUSH
42409: LD_VAR 0 3
42413: NONEQUAL
42414: IFFALSE 42432
// result := result diff i ;
42416: LD_ADDR_VAR 0 4
42420: PUSH
42421: LD_VAR 0 4
42425: PUSH
42426: LD_VAR 0 5
42430: DIFF
42431: ST_TO_ADDR
42432: GO 42391
42434: POP
42435: POP
// end ;
42436: LD_VAR 0 4
42440: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42441: LD_INT 0
42443: PPUSH
42444: PPUSH
42445: PPUSH
// result := true ;
42446: LD_ADDR_VAR 0 3
42450: PUSH
42451: LD_INT 1
42453: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42454: LD_ADDR_VAR 0 5
42458: PUSH
42459: LD_VAR 0 2
42463: PPUSH
42464: CALL_OW 480
42468: ST_TO_ADDR
// if not tmp then
42469: LD_VAR 0 5
42473: NOT
42474: IFFALSE 42478
// exit ;
42476: GO 42527
// for i in tmp do
42478: LD_ADDR_VAR 0 4
42482: PUSH
42483: LD_VAR 0 5
42487: PUSH
42488: FOR_IN
42489: IFFALSE 42525
// if GetTech ( i , side ) <> state_researched then
42491: LD_VAR 0 4
42495: PPUSH
42496: LD_VAR 0 1
42500: PPUSH
42501: CALL_OW 321
42505: PUSH
42506: LD_INT 2
42508: NONEQUAL
42509: IFFALSE 42523
// begin result := false ;
42511: LD_ADDR_VAR 0 3
42515: PUSH
42516: LD_INT 0
42518: ST_TO_ADDR
// exit ;
42519: POP
42520: POP
42521: GO 42527
// end ;
42523: GO 42488
42525: POP
42526: POP
// end ;
42527: LD_VAR 0 3
42531: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42532: LD_INT 0
42534: PPUSH
42535: PPUSH
42536: PPUSH
42537: PPUSH
42538: PPUSH
42539: PPUSH
42540: PPUSH
42541: PPUSH
42542: PPUSH
42543: PPUSH
42544: PPUSH
42545: PPUSH
42546: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42547: LD_VAR 0 1
42551: NOT
42552: IFTRUE 42569
42554: PUSH
42555: LD_VAR 0 1
42559: PPUSH
42560: CALL_OW 257
42564: PUSH
42565: LD_INT 9
42567: NONEQUAL
42568: OR
42569: IFFALSE 42573
// exit ;
42571: GO 43152
// side := GetSide ( unit ) ;
42573: LD_ADDR_VAR 0 9
42577: PUSH
42578: LD_VAR 0 1
42582: PPUSH
42583: CALL_OW 255
42587: ST_TO_ADDR
// tech_space := tech_spacanom ;
42588: LD_ADDR_VAR 0 12
42592: PUSH
42593: LD_INT 29
42595: ST_TO_ADDR
// tech_time := tech_taurad ;
42596: LD_ADDR_VAR 0 13
42600: PUSH
42601: LD_INT 28
42603: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42604: LD_ADDR_VAR 0 11
42608: PUSH
42609: LD_VAR 0 1
42613: PPUSH
42614: CALL_OW 310
42618: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42619: LD_VAR 0 11
42623: PPUSH
42624: CALL_OW 247
42628: PUSH
42629: LD_INT 2
42631: EQUAL
42632: IFFALSE 42636
// exit ;
42634: GO 43152
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42636: LD_ADDR_VAR 0 8
42640: PUSH
42641: LD_INT 81
42643: PUSH
42644: LD_VAR 0 9
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: LD_INT 21
42658: PUSH
42659: LD_INT 3
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PPUSH
42674: CALL_OW 69
42678: ST_TO_ADDR
// if not tmp then
42679: LD_VAR 0 8
42683: NOT
42684: IFFALSE 42688
// exit ;
42686: GO 43152
// if in_unit then
42688: LD_VAR 0 11
42692: IFFALSE 42716
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42694: LD_ADDR_VAR 0 10
42698: PUSH
42699: LD_VAR 0 8
42703: PPUSH
42704: LD_VAR 0 11
42708: PPUSH
42709: CALL_OW 74
42713: ST_TO_ADDR
42714: GO 42736
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42716: LD_ADDR_VAR 0 10
42720: PUSH
42721: LD_VAR 0 8
42725: PPUSH
42726: LD_VAR 0 1
42730: PPUSH
42731: CALL_OW 74
42735: ST_TO_ADDR
// if not enemy then
42736: LD_VAR 0 10
42740: NOT
42741: IFFALSE 42745
// exit ;
42743: GO 43152
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42745: LD_VAR 0 11
42749: IFFALSE 42771
42751: PUSH
42752: LD_VAR 0 11
42756: PPUSH
42757: LD_VAR 0 10
42761: PPUSH
42762: CALL_OW 296
42766: PUSH
42767: LD_INT 13
42769: GREATER
42770: AND
42771: IFTRUE 42793
42773: PUSH
42774: LD_VAR 0 1
42778: PPUSH
42779: LD_VAR 0 10
42783: PPUSH
42784: CALL_OW 296
42788: PUSH
42789: LD_INT 12
42791: GREATER
42792: OR
42793: IFFALSE 42797
// exit ;
42795: GO 43152
// missile := [ 1 ] ;
42797: LD_ADDR_VAR 0 14
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: EMPTY
42806: LIST
42807: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42808: LD_VAR 0 9
42812: PPUSH
42813: LD_VAR 0 12
42817: PPUSH
42818: CALL_OW 325
42822: IFFALSE 42851
// missile := Replace ( missile , missile + 1 , 2 ) ;
42824: LD_ADDR_VAR 0 14
42828: PUSH
42829: LD_VAR 0 14
42833: PPUSH
42834: LD_VAR 0 14
42838: PUSH
42839: LD_INT 1
42841: PLUS
42842: PPUSH
42843: LD_INT 2
42845: PPUSH
42846: CALL_OW 1
42850: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42851: LD_VAR 0 9
42855: PPUSH
42856: LD_VAR 0 13
42860: PPUSH
42861: CALL_OW 325
42865: IFFALSE 42889
42867: PUSH
42868: LD_VAR 0 10
42872: PPUSH
42873: CALL_OW 255
42877: PPUSH
42878: LD_VAR 0 13
42882: PPUSH
42883: CALL_OW 325
42887: NOT
42888: AND
42889: IFFALSE 42918
// missile := Replace ( missile , missile + 1 , 3 ) ;
42891: LD_ADDR_VAR 0 14
42895: PUSH
42896: LD_VAR 0 14
42900: PPUSH
42901: LD_VAR 0 14
42905: PUSH
42906: LD_INT 1
42908: PLUS
42909: PPUSH
42910: LD_INT 3
42912: PPUSH
42913: CALL_OW 1
42917: ST_TO_ADDR
// if missile < 2 then
42918: LD_VAR 0 14
42922: PUSH
42923: LD_INT 2
42925: LESS
42926: IFFALSE 42930
// exit ;
42928: GO 43152
// x := GetX ( enemy ) ;
42930: LD_ADDR_VAR 0 4
42934: PUSH
42935: LD_VAR 0 10
42939: PPUSH
42940: CALL_OW 250
42944: ST_TO_ADDR
// y := GetY ( enemy ) ;
42945: LD_ADDR_VAR 0 5
42949: PUSH
42950: LD_VAR 0 10
42954: PPUSH
42955: CALL_OW 251
42959: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42960: LD_ADDR_VAR 0 6
42964: PUSH
42965: LD_VAR 0 4
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PPUSH
42974: LD_INT 1
42976: PPUSH
42977: CALL_OW 12
42981: PLUS
42982: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42983: LD_ADDR_VAR 0 7
42987: PUSH
42988: LD_VAR 0 5
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PPUSH
42997: LD_INT 1
42999: PPUSH
43000: CALL_OW 12
43004: PLUS
43005: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43006: LD_VAR 0 6
43010: PPUSH
43011: LD_VAR 0 7
43015: PPUSH
43016: CALL_OW 488
43020: NOT
43021: IFFALSE 43043
// begin _x := x ;
43023: LD_ADDR_VAR 0 6
43027: PUSH
43028: LD_VAR 0 4
43032: ST_TO_ADDR
// _y := y ;
43033: LD_ADDR_VAR 0 7
43037: PUSH
43038: LD_VAR 0 5
43042: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43043: LD_ADDR_VAR 0 3
43047: PUSH
43048: LD_INT 1
43050: PPUSH
43051: LD_VAR 0 14
43055: PPUSH
43056: CALL_OW 12
43060: ST_TO_ADDR
// case i of 1 :
43061: LD_VAR 0 3
43065: PUSH
43066: LD_INT 1
43068: DOUBLE
43069: EQUAL
43070: IFTRUE 43074
43072: GO 43091
43074: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43075: LD_VAR 0 1
43079: PPUSH
43080: LD_VAR 0 10
43084: PPUSH
43085: CALL_OW 115
43089: GO 43152
43091: LD_INT 2
43093: DOUBLE
43094: EQUAL
43095: IFTRUE 43099
43097: GO 43121
43099: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43100: LD_VAR 0 1
43104: PPUSH
43105: LD_VAR 0 6
43109: PPUSH
43110: LD_VAR 0 7
43114: PPUSH
43115: CALL_OW 153
43119: GO 43152
43121: LD_INT 3
43123: DOUBLE
43124: EQUAL
43125: IFTRUE 43129
43127: GO 43151
43129: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43130: LD_VAR 0 1
43134: PPUSH
43135: LD_VAR 0 6
43139: PPUSH
43140: LD_VAR 0 7
43144: PPUSH
43145: CALL_OW 154
43149: GO 43152
43151: POP
// end ;
43152: LD_VAR 0 2
43156: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43157: LD_INT 0
43159: PPUSH
43160: PPUSH
43161: PPUSH
43162: PPUSH
43163: PPUSH
43164: PPUSH
// if not unit or not building then
43165: LD_VAR 0 1
43169: NOT
43170: IFTRUE 43179
43172: PUSH
43173: LD_VAR 0 2
43177: NOT
43178: OR
43179: IFFALSE 43183
// exit ;
43181: GO 43341
// x := GetX ( building ) ;
43183: LD_ADDR_VAR 0 5
43187: PUSH
43188: LD_VAR 0 2
43192: PPUSH
43193: CALL_OW 250
43197: ST_TO_ADDR
// y := GetY ( building ) ;
43198: LD_ADDR_VAR 0 6
43202: PUSH
43203: LD_VAR 0 2
43207: PPUSH
43208: CALL_OW 251
43212: ST_TO_ADDR
// for i := 0 to 5 do
43213: LD_ADDR_VAR 0 4
43217: PUSH
43218: DOUBLE
43219: LD_INT 0
43221: DEC
43222: ST_TO_ADDR
43223: LD_INT 5
43225: PUSH
43226: FOR_TO
43227: IFFALSE 43339
// begin _x := ShiftX ( x , i , 3 ) ;
43229: LD_ADDR_VAR 0 7
43233: PUSH
43234: LD_VAR 0 5
43238: PPUSH
43239: LD_VAR 0 4
43243: PPUSH
43244: LD_INT 3
43246: PPUSH
43247: CALL_OW 272
43251: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43252: LD_ADDR_VAR 0 8
43256: PUSH
43257: LD_VAR 0 6
43261: PPUSH
43262: LD_VAR 0 4
43266: PPUSH
43267: LD_INT 3
43269: PPUSH
43270: CALL_OW 273
43274: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43275: LD_VAR 0 7
43279: PPUSH
43280: LD_VAR 0 8
43284: PPUSH
43285: CALL_OW 488
43289: NOT
43290: IFFALSE 43294
// continue ;
43292: GO 43226
// if HexInfo ( _x , _y ) = 0 then
43294: LD_VAR 0 7
43298: PPUSH
43299: LD_VAR 0 8
43303: PPUSH
43304: CALL_OW 428
43308: PUSH
43309: LD_INT 0
43311: EQUAL
43312: IFFALSE 43337
// begin ComMoveXY ( unit , _x , _y ) ;
43314: LD_VAR 0 1
43318: PPUSH
43319: LD_VAR 0 7
43323: PPUSH
43324: LD_VAR 0 8
43328: PPUSH
43329: CALL_OW 111
// exit ;
43333: POP
43334: POP
43335: GO 43341
// end ; end ;
43337: GO 43226
43339: POP
43340: POP
// end ;
43341: LD_VAR 0 3
43345: RET
// export function ScanBase ( side , base_area ) ; begin
43346: LD_INT 0
43348: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43349: LD_ADDR_VAR 0 3
43353: PUSH
43354: LD_VAR 0 2
43358: PPUSH
43359: LD_INT 81
43361: PUSH
43362: LD_VAR 0 1
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PPUSH
43371: CALL_OW 70
43375: ST_TO_ADDR
// end ;
43376: LD_VAR 0 3
43380: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43381: LD_INT 0
43383: PPUSH
43384: PPUSH
43385: PPUSH
43386: PPUSH
// result := false ;
43387: LD_ADDR_VAR 0 2
43391: PUSH
43392: LD_INT 0
43394: ST_TO_ADDR
// side := GetSide ( unit ) ;
43395: LD_ADDR_VAR 0 3
43399: PUSH
43400: LD_VAR 0 1
43404: PPUSH
43405: CALL_OW 255
43409: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43410: LD_ADDR_VAR 0 4
43414: PUSH
43415: LD_VAR 0 1
43419: PPUSH
43420: CALL_OW 248
43424: ST_TO_ADDR
// case nat of 1 :
43425: LD_VAR 0 4
43429: PUSH
43430: LD_INT 1
43432: DOUBLE
43433: EQUAL
43434: IFTRUE 43438
43436: GO 43449
43438: POP
// tech := tech_lassight ; 2 :
43439: LD_ADDR_VAR 0 5
43443: PUSH
43444: LD_INT 12
43446: ST_TO_ADDR
43447: GO 43488
43449: LD_INT 2
43451: DOUBLE
43452: EQUAL
43453: IFTRUE 43457
43455: GO 43468
43457: POP
// tech := tech_mortar ; 3 :
43458: LD_ADDR_VAR 0 5
43462: PUSH
43463: LD_INT 41
43465: ST_TO_ADDR
43466: GO 43488
43468: LD_INT 3
43470: DOUBLE
43471: EQUAL
43472: IFTRUE 43476
43474: GO 43487
43476: POP
// tech := tech_bazooka ; end ;
43477: LD_ADDR_VAR 0 5
43481: PUSH
43482: LD_INT 44
43484: ST_TO_ADDR
43485: GO 43488
43487: POP
// if Researched ( side , tech ) then
43488: LD_VAR 0 3
43492: PPUSH
43493: LD_VAR 0 5
43497: PPUSH
43498: CALL_OW 325
43502: IFFALSE 43529
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43504: LD_ADDR_VAR 0 2
43508: PUSH
43509: LD_INT 5
43511: PUSH
43512: LD_INT 8
43514: PUSH
43515: LD_INT 9
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: LIST
43522: PUSH
43523: LD_VAR 0 4
43527: ARRAY
43528: ST_TO_ADDR
// end ;
43529: LD_VAR 0 2
43533: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43534: LD_INT 0
43536: PPUSH
43537: PPUSH
43538: PPUSH
// if not mines then
43539: LD_VAR 0 2
43543: NOT
43544: IFFALSE 43548
// exit ;
43546: GO 43692
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43548: LD_ADDR_VAR 0 5
43552: PUSH
43553: LD_INT 81
43555: PUSH
43556: LD_VAR 0 1
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 3
43567: PUSH
43568: LD_INT 21
43570: PUSH
43571: LD_INT 3
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PPUSH
43586: CALL_OW 69
43590: ST_TO_ADDR
// for i in mines do
43591: LD_ADDR_VAR 0 4
43595: PUSH
43596: LD_VAR 0 2
43600: PUSH
43601: FOR_IN
43602: IFFALSE 43690
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43604: LD_VAR 0 4
43608: PUSH
43609: LD_INT 1
43611: ARRAY
43612: PPUSH
43613: LD_VAR 0 4
43617: PUSH
43618: LD_INT 2
43620: ARRAY
43621: PPUSH
43622: CALL_OW 458
43626: NOT
43627: IFFALSE 43631
// continue ;
43629: GO 43601
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43631: LD_VAR 0 4
43635: PUSH
43636: LD_INT 1
43638: ARRAY
43639: PPUSH
43640: LD_VAR 0 4
43644: PUSH
43645: LD_INT 2
43647: ARRAY
43648: PPUSH
43649: CALL_OW 428
43653: PUSH
43654: LD_VAR 0 5
43658: IN
43659: IFFALSE 43688
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43661: LD_VAR 0 4
43665: PUSH
43666: LD_INT 1
43668: ARRAY
43669: PPUSH
43670: LD_VAR 0 4
43674: PUSH
43675: LD_INT 2
43677: ARRAY
43678: PPUSH
43679: LD_VAR 0 1
43683: PPUSH
43684: CALL_OW 456
// end ;
43688: GO 43601
43690: POP
43691: POP
// end ;
43692: LD_VAR 0 3
43696: RET
// export function Count ( array ) ; begin
43697: LD_INT 0
43699: PPUSH
// result := array + 0 ;
43700: LD_ADDR_VAR 0 2
43704: PUSH
43705: LD_VAR 0 1
43709: PUSH
43710: LD_INT 0
43712: PLUS
43713: ST_TO_ADDR
// end ;
43714: LD_VAR 0 2
43718: RET
// export function IsEmpty ( building ) ; begin
43719: LD_INT 0
43721: PPUSH
// if not building then
43722: LD_VAR 0 1
43726: NOT
43727: IFFALSE 43731
// exit ;
43729: GO 43774
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43731: LD_ADDR_VAR 0 2
43735: PUSH
43736: LD_VAR 0 1
43740: PUSH
43741: LD_INT 22
43743: PUSH
43744: LD_VAR 0 1
43748: PPUSH
43749: CALL_OW 255
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 58
43760: PUSH
43761: EMPTY
43762: LIST
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PPUSH
43768: CALL_OW 69
43772: IN
43773: ST_TO_ADDR
// end ;
43774: LD_VAR 0 2
43778: RET
// export function IsNotFull ( building ) ; var places ; begin
43779: LD_INT 0
43781: PPUSH
43782: PPUSH
// if not building then
43783: LD_VAR 0 1
43787: NOT
43788: IFFALSE 43792
// exit ;
43790: GO 43820
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43792: LD_ADDR_VAR 0 2
43796: PUSH
43797: LD_VAR 0 1
43801: PPUSH
43802: LD_INT 3
43804: PUSH
43805: LD_INT 62
43807: PUSH
43808: EMPTY
43809: LIST
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PPUSH
43815: CALL_OW 72
43819: ST_TO_ADDR
// end ;
43820: LD_VAR 0 2
43824: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43825: LD_INT 0
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
// tmp := [ ] ;
43831: LD_ADDR_VAR 0 3
43835: PUSH
43836: EMPTY
43837: ST_TO_ADDR
// list := [ ] ;
43838: LD_ADDR_VAR 0 5
43842: PUSH
43843: EMPTY
43844: ST_TO_ADDR
// for i = 16 to 25 do
43845: LD_ADDR_VAR 0 4
43849: PUSH
43850: DOUBLE
43851: LD_INT 16
43853: DEC
43854: ST_TO_ADDR
43855: LD_INT 25
43857: PUSH
43858: FOR_TO
43859: IFFALSE 43932
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43861: LD_ADDR_VAR 0 3
43865: PUSH
43866: LD_VAR 0 3
43870: PUSH
43871: LD_INT 22
43873: PUSH
43874: LD_VAR 0 1
43878: PPUSH
43879: CALL_OW 255
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 91
43890: PUSH
43891: LD_VAR 0 1
43895: PUSH
43896: LD_INT 6
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 30
43906: PUSH
43907: LD_VAR 0 4
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: PUSH
43921: EMPTY
43922: LIST
43923: PPUSH
43924: CALL_OW 69
43928: ADD
43929: ST_TO_ADDR
43930: GO 43858
43932: POP
43933: POP
// for i = 1 to tmp do
43934: LD_ADDR_VAR 0 4
43938: PUSH
43939: DOUBLE
43940: LD_INT 1
43942: DEC
43943: ST_TO_ADDR
43944: LD_VAR 0 3
43948: PUSH
43949: FOR_TO
43950: IFFALSE 44038
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43952: LD_ADDR_VAR 0 5
43956: PUSH
43957: LD_VAR 0 5
43961: PUSH
43962: LD_VAR 0 3
43966: PUSH
43967: LD_VAR 0 4
43971: ARRAY
43972: PPUSH
43973: CALL_OW 266
43977: PUSH
43978: LD_VAR 0 3
43982: PUSH
43983: LD_VAR 0 4
43987: ARRAY
43988: PPUSH
43989: CALL_OW 250
43993: PUSH
43994: LD_VAR 0 3
43998: PUSH
43999: LD_VAR 0 4
44003: ARRAY
44004: PPUSH
44005: CALL_OW 251
44009: PUSH
44010: LD_VAR 0 3
44014: PUSH
44015: LD_VAR 0 4
44019: ARRAY
44020: PPUSH
44021: CALL_OW 254
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: PUSH
44032: EMPTY
44033: LIST
44034: ADD
44035: ST_TO_ADDR
44036: GO 43949
44038: POP
44039: POP
// result := list ;
44040: LD_ADDR_VAR 0 2
44044: PUSH
44045: LD_VAR 0 5
44049: ST_TO_ADDR
// end ;
44050: LD_VAR 0 2
44054: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44055: LD_INT 0
44057: PPUSH
44058: PPUSH
44059: PPUSH
44060: PPUSH
44061: PPUSH
44062: PPUSH
44063: PPUSH
// if not factory then
44064: LD_VAR 0 1
44068: NOT
44069: IFFALSE 44073
// exit ;
44071: GO 44676
// if control = control_apeman then
44073: LD_VAR 0 4
44077: PUSH
44078: LD_INT 5
44080: EQUAL
44081: IFFALSE 44190
// begin tmp := UnitsInside ( factory ) ;
44083: LD_ADDR_VAR 0 8
44087: PUSH
44088: LD_VAR 0 1
44092: PPUSH
44093: CALL_OW 313
44097: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44098: LD_VAR 0 8
44102: PPUSH
44103: LD_INT 25
44105: PUSH
44106: LD_INT 12
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PPUSH
44113: CALL_OW 72
44117: NOT
44118: IFFALSE 44128
// control := control_manual ;
44120: LD_ADDR_VAR 0 4
44124: PUSH
44125: LD_INT 1
44127: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44128: LD_ADDR_VAR 0 8
44132: PUSH
44133: LD_VAR 0 1
44137: PPUSH
44138: CALL 43825 0 1
44142: ST_TO_ADDR
// if tmp then
44143: LD_VAR 0 8
44147: IFFALSE 44190
// begin for i in tmp do
44149: LD_ADDR_VAR 0 7
44153: PUSH
44154: LD_VAR 0 8
44158: PUSH
44159: FOR_IN
44160: IFFALSE 44188
// if i [ 1 ] = b_ext_radio then
44162: LD_VAR 0 7
44166: PUSH
44167: LD_INT 1
44169: ARRAY
44170: PUSH
44171: LD_INT 22
44173: EQUAL
44174: IFFALSE 44186
// begin control := control_remote ;
44176: LD_ADDR_VAR 0 4
44180: PUSH
44181: LD_INT 2
44183: ST_TO_ADDR
// break ;
44184: GO 44188
// end ;
44186: GO 44159
44188: POP
44189: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44190: LD_VAR 0 1
44194: PPUSH
44195: LD_VAR 0 2
44199: PPUSH
44200: LD_VAR 0 3
44204: PPUSH
44205: LD_VAR 0 4
44209: PPUSH
44210: LD_VAR 0 5
44214: PPUSH
44215: CALL_OW 448
44219: IFFALSE 44254
// begin result := [ chassis , engine , control , weapon ] ;
44221: LD_ADDR_VAR 0 6
44225: PUSH
44226: LD_VAR 0 2
44230: PUSH
44231: LD_VAR 0 3
44235: PUSH
44236: LD_VAR 0 4
44240: PUSH
44241: LD_VAR 0 5
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: ST_TO_ADDR
// exit ;
44252: GO 44676
// end ; _chassis := AvailableChassisList ( factory ) ;
44254: LD_ADDR_VAR 0 9
44258: PUSH
44259: LD_VAR 0 1
44263: PPUSH
44264: CALL_OW 475
44268: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44269: LD_ADDR_VAR 0 11
44273: PUSH
44274: LD_VAR 0 1
44278: PPUSH
44279: CALL_OW 476
44283: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44284: LD_ADDR_VAR 0 12
44288: PUSH
44289: LD_VAR 0 1
44293: PPUSH
44294: CALL_OW 477
44298: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44299: LD_ADDR_VAR 0 10
44303: PUSH
44304: LD_VAR 0 1
44308: PPUSH
44309: CALL_OW 478
44313: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44314: LD_VAR 0 9
44318: NOT
44319: IFTRUE 44328
44321: PUSH
44322: LD_VAR 0 11
44326: NOT
44327: OR
44328: IFTRUE 44337
44330: PUSH
44331: LD_VAR 0 12
44335: NOT
44336: OR
44337: IFTRUE 44346
44339: PUSH
44340: LD_VAR 0 10
44344: NOT
44345: OR
44346: IFFALSE 44381
// begin result := [ chassis , engine , control , weapon ] ;
44348: LD_ADDR_VAR 0 6
44352: PUSH
44353: LD_VAR 0 2
44357: PUSH
44358: LD_VAR 0 3
44362: PUSH
44363: LD_VAR 0 4
44367: PUSH
44368: LD_VAR 0 5
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: ST_TO_ADDR
// exit ;
44379: GO 44676
// end ; if not chassis in _chassis then
44381: LD_VAR 0 2
44385: PUSH
44386: LD_VAR 0 9
44390: IN
44391: NOT
44392: IFFALSE 44418
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44394: LD_ADDR_VAR 0 2
44398: PUSH
44399: LD_VAR 0 9
44403: PUSH
44404: LD_INT 1
44406: PPUSH
44407: LD_VAR 0 9
44411: PPUSH
44412: CALL_OW 12
44416: ARRAY
44417: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44418: LD_VAR 0 2
44422: PPUSH
44423: LD_VAR 0 3
44427: PPUSH
44428: CALL 44681 0 2
44432: NOT
44433: IFFALSE 44494
// repeat engine := _engine [ 1 ] ;
44435: LD_ADDR_VAR 0 3
44439: PUSH
44440: LD_VAR 0 11
44444: PUSH
44445: LD_INT 1
44447: ARRAY
44448: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44449: LD_ADDR_VAR 0 11
44453: PUSH
44454: LD_VAR 0 11
44458: PPUSH
44459: LD_INT 1
44461: PPUSH
44462: CALL_OW 3
44466: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44467: LD_VAR 0 2
44471: PPUSH
44472: LD_VAR 0 3
44476: PPUSH
44477: CALL 44681 0 2
44481: IFTRUE 44492
44483: PUSH
44484: LD_VAR 0 11
44488: PUSH
44489: EMPTY
44490: EQUAL
44491: OR
44492: IFFALSE 44435
// if not control in _control then
44494: LD_VAR 0 4
44498: PUSH
44499: LD_VAR 0 12
44503: IN
44504: NOT
44505: IFFALSE 44531
// control := _control [ rand ( 1 , _control ) ] ;
44507: LD_ADDR_VAR 0 4
44511: PUSH
44512: LD_VAR 0 12
44516: PUSH
44517: LD_INT 1
44519: PPUSH
44520: LD_VAR 0 12
44524: PPUSH
44525: CALL_OW 12
44529: ARRAY
44530: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44531: LD_VAR 0 2
44535: PPUSH
44536: LD_VAR 0 5
44540: PPUSH
44541: CALL 44903 0 2
44545: NOT
44546: IFFALSE 44607
// repeat weapon := _weapon [ 1 ] ;
44548: LD_ADDR_VAR 0 5
44552: PUSH
44553: LD_VAR 0 10
44557: PUSH
44558: LD_INT 1
44560: ARRAY
44561: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44562: LD_ADDR_VAR 0 10
44566: PUSH
44567: LD_VAR 0 10
44571: PPUSH
44572: LD_INT 1
44574: PPUSH
44575: CALL_OW 3
44579: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44580: LD_VAR 0 2
44584: PPUSH
44585: LD_VAR 0 5
44589: PPUSH
44590: CALL 44903 0 2
44594: IFTRUE 44605
44596: PUSH
44597: LD_VAR 0 10
44601: PUSH
44602: EMPTY
44603: EQUAL
44604: OR
44605: IFFALSE 44548
// result := [ ] ;
44607: LD_ADDR_VAR 0 6
44611: PUSH
44612: EMPTY
44613: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44614: LD_VAR 0 1
44618: PPUSH
44619: LD_VAR 0 2
44623: PPUSH
44624: LD_VAR 0 3
44628: PPUSH
44629: LD_VAR 0 4
44633: PPUSH
44634: LD_VAR 0 5
44638: PPUSH
44639: CALL_OW 448
44643: IFFALSE 44676
// result := [ chassis , engine , control , weapon ] ;
44645: LD_ADDR_VAR 0 6
44649: PUSH
44650: LD_VAR 0 2
44654: PUSH
44655: LD_VAR 0 3
44659: PUSH
44660: LD_VAR 0 4
44664: PUSH
44665: LD_VAR 0 5
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: ST_TO_ADDR
// end ;
44676: LD_VAR 0 6
44680: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44681: LD_INT 0
44683: PPUSH
// if not chassis or not engine then
44684: LD_VAR 0 1
44688: NOT
44689: IFTRUE 44698
44691: PUSH
44692: LD_VAR 0 2
44696: NOT
44697: OR
44698: IFFALSE 44702
// exit ;
44700: GO 44898
// case engine of engine_solar :
44702: LD_VAR 0 2
44706: PUSH
44707: LD_INT 2
44709: DOUBLE
44710: EQUAL
44711: IFTRUE 44715
44713: GO 44753
44715: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44716: LD_ADDR_VAR 0 3
44720: PUSH
44721: LD_INT 11
44723: PUSH
44724: LD_INT 12
44726: PUSH
44727: LD_INT 13
44729: PUSH
44730: LD_INT 14
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: LD_INT 3
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: ST_TO_ADDR
44751: GO 44882
44753: LD_INT 1
44755: DOUBLE
44756: EQUAL
44757: IFTRUE 44761
44759: GO 44823
44761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44762: LD_ADDR_VAR 0 3
44766: PUSH
44767: LD_INT 11
44769: PUSH
44770: LD_INT 12
44772: PUSH
44773: LD_INT 13
44775: PUSH
44776: LD_INT 14
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: LD_INT 2
44784: PUSH
44785: LD_INT 3
44787: PUSH
44788: LD_INT 4
44790: PUSH
44791: LD_INT 5
44793: PUSH
44794: LD_INT 21
44796: PUSH
44797: LD_INT 23
44799: PUSH
44800: LD_INT 22
44802: PUSH
44803: LD_INT 24
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: ST_TO_ADDR
44821: GO 44882
44823: LD_INT 3
44825: DOUBLE
44826: EQUAL
44827: IFTRUE 44831
44829: GO 44881
44831: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44832: LD_ADDR_VAR 0 3
44836: PUSH
44837: LD_INT 13
44839: PUSH
44840: LD_INT 14
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 3
44848: PUSH
44849: LD_INT 4
44851: PUSH
44852: LD_INT 5
44854: PUSH
44855: LD_INT 21
44857: PUSH
44858: LD_INT 22
44860: PUSH
44861: LD_INT 23
44863: PUSH
44864: LD_INT 24
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: ST_TO_ADDR
44879: GO 44882
44881: POP
// result := ( chassis in result ) ;
44882: LD_ADDR_VAR 0 3
44886: PUSH
44887: LD_VAR 0 1
44891: PUSH
44892: LD_VAR 0 3
44896: IN
44897: ST_TO_ADDR
// end ;
44898: LD_VAR 0 3
44902: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44903: LD_INT 0
44905: PPUSH
// if not chassis or not weapon then
44906: LD_VAR 0 1
44910: NOT
44911: IFTRUE 44920
44913: PUSH
44914: LD_VAR 0 2
44918: NOT
44919: OR
44920: IFFALSE 44924
// exit ;
44922: GO 46018
// case weapon of us_machine_gun :
44924: LD_VAR 0 2
44928: PUSH
44929: LD_INT 2
44931: DOUBLE
44932: EQUAL
44933: IFTRUE 44937
44935: GO 44967
44937: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44938: LD_ADDR_VAR 0 3
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: LD_INT 3
44951: PUSH
44952: LD_INT 4
44954: PUSH
44955: LD_INT 5
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: ST_TO_ADDR
44965: GO 46002
44967: LD_INT 3
44969: DOUBLE
44970: EQUAL
44971: IFTRUE 44975
44973: GO 45005
44975: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44976: LD_ADDR_VAR 0 3
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: LD_INT 3
44989: PUSH
44990: LD_INT 4
44992: PUSH
44993: LD_INT 5
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: ST_TO_ADDR
45003: GO 46002
45005: LD_INT 11
45007: DOUBLE
45008: EQUAL
45009: IFTRUE 45013
45011: GO 45043
45013: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45014: LD_ADDR_VAR 0 3
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: LD_INT 3
45027: PUSH
45028: LD_INT 4
45030: PUSH
45031: LD_INT 5
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: ST_TO_ADDR
45041: GO 46002
45043: LD_INT 4
45045: DOUBLE
45046: EQUAL
45047: IFTRUE 45051
45049: GO 45077
45051: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45052: LD_ADDR_VAR 0 3
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: LD_INT 3
45062: PUSH
45063: LD_INT 4
45065: PUSH
45066: LD_INT 5
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: ST_TO_ADDR
45075: GO 46002
45077: LD_INT 5
45079: DOUBLE
45080: EQUAL
45081: IFTRUE 45085
45083: GO 45111
45085: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45086: LD_ADDR_VAR 0 3
45090: PUSH
45091: LD_INT 2
45093: PUSH
45094: LD_INT 3
45096: PUSH
45097: LD_INT 4
45099: PUSH
45100: LD_INT 5
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: ST_TO_ADDR
45109: GO 46002
45111: LD_INT 9
45113: DOUBLE
45114: EQUAL
45115: IFTRUE 45119
45117: GO 45145
45119: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45120: LD_ADDR_VAR 0 3
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: LD_INT 3
45130: PUSH
45131: LD_INT 4
45133: PUSH
45134: LD_INT 5
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: ST_TO_ADDR
45143: GO 46002
45145: LD_INT 7
45147: DOUBLE
45148: EQUAL
45149: IFTRUE 45153
45151: GO 45179
45153: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45154: LD_ADDR_VAR 0 3
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: LD_INT 3
45164: PUSH
45165: LD_INT 4
45167: PUSH
45168: LD_INT 5
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: ST_TO_ADDR
45177: GO 46002
45179: LD_INT 12
45181: DOUBLE
45182: EQUAL
45183: IFTRUE 45187
45185: GO 45213
45187: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45188: LD_ADDR_VAR 0 3
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: LD_INT 3
45198: PUSH
45199: LD_INT 4
45201: PUSH
45202: LD_INT 5
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: ST_TO_ADDR
45211: GO 46002
45213: LD_INT 13
45215: DOUBLE
45216: EQUAL
45217: IFTRUE 45221
45219: GO 45247
45221: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45222: LD_ADDR_VAR 0 3
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: LD_INT 3
45232: PUSH
45233: LD_INT 4
45235: PUSH
45236: LD_INT 5
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: ST_TO_ADDR
45245: GO 46002
45247: LD_INT 14
45249: DOUBLE
45250: EQUAL
45251: IFTRUE 45255
45253: GO 45273
45255: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45256: LD_ADDR_VAR 0 3
45260: PUSH
45261: LD_INT 4
45263: PUSH
45264: LD_INT 5
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: ST_TO_ADDR
45271: GO 46002
45273: LD_INT 6
45275: DOUBLE
45276: EQUAL
45277: IFTRUE 45281
45279: GO 45299
45281: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45282: LD_ADDR_VAR 0 3
45286: PUSH
45287: LD_INT 4
45289: PUSH
45290: LD_INT 5
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: ST_TO_ADDR
45297: GO 46002
45299: LD_INT 10
45301: DOUBLE
45302: EQUAL
45303: IFTRUE 45307
45305: GO 45325
45307: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45308: LD_ADDR_VAR 0 3
45312: PUSH
45313: LD_INT 4
45315: PUSH
45316: LD_INT 5
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: ST_TO_ADDR
45323: GO 46002
45325: LD_INT 22
45327: DOUBLE
45328: EQUAL
45329: IFTRUE 45333
45331: GO 45359
45333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45334: LD_ADDR_VAR 0 3
45338: PUSH
45339: LD_INT 11
45341: PUSH
45342: LD_INT 12
45344: PUSH
45345: LD_INT 13
45347: PUSH
45348: LD_INT 14
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: ST_TO_ADDR
45357: GO 46002
45359: LD_INT 23
45361: DOUBLE
45362: EQUAL
45363: IFTRUE 45367
45365: GO 45393
45367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45368: LD_ADDR_VAR 0 3
45372: PUSH
45373: LD_INT 11
45375: PUSH
45376: LD_INT 12
45378: PUSH
45379: LD_INT 13
45381: PUSH
45382: LD_INT 14
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: ST_TO_ADDR
45391: GO 46002
45393: LD_INT 24
45395: DOUBLE
45396: EQUAL
45397: IFTRUE 45401
45399: GO 45427
45401: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45402: LD_ADDR_VAR 0 3
45406: PUSH
45407: LD_INT 11
45409: PUSH
45410: LD_INT 12
45412: PUSH
45413: LD_INT 13
45415: PUSH
45416: LD_INT 14
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: ST_TO_ADDR
45425: GO 46002
45427: LD_INT 30
45429: DOUBLE
45430: EQUAL
45431: IFTRUE 45435
45433: GO 45461
45435: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45436: LD_ADDR_VAR 0 3
45440: PUSH
45441: LD_INT 11
45443: PUSH
45444: LD_INT 12
45446: PUSH
45447: LD_INT 13
45449: PUSH
45450: LD_INT 14
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: ST_TO_ADDR
45459: GO 46002
45461: LD_INT 25
45463: DOUBLE
45464: EQUAL
45465: IFTRUE 45469
45467: GO 45487
45469: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45470: LD_ADDR_VAR 0 3
45474: PUSH
45475: LD_INT 13
45477: PUSH
45478: LD_INT 14
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: ST_TO_ADDR
45485: GO 46002
45487: LD_INT 27
45489: DOUBLE
45490: EQUAL
45491: IFTRUE 45495
45493: GO 45513
45495: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45496: LD_ADDR_VAR 0 3
45500: PUSH
45501: LD_INT 13
45503: PUSH
45504: LD_INT 14
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: ST_TO_ADDR
45511: GO 46002
45513: LD_INT 92
45515: DOUBLE
45516: EQUAL
45517: IFTRUE 45521
45519: GO 45547
45521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45522: LD_ADDR_VAR 0 3
45526: PUSH
45527: LD_INT 11
45529: PUSH
45530: LD_INT 12
45532: PUSH
45533: LD_INT 13
45535: PUSH
45536: LD_INT 14
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: ST_TO_ADDR
45545: GO 46002
45547: LD_INT 28
45549: DOUBLE
45550: EQUAL
45551: IFTRUE 45555
45553: GO 45573
45555: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45556: LD_ADDR_VAR 0 3
45560: PUSH
45561: LD_INT 13
45563: PUSH
45564: LD_INT 14
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: ST_TO_ADDR
45571: GO 46002
45573: LD_INT 29
45575: DOUBLE
45576: EQUAL
45577: IFTRUE 45581
45579: GO 45599
45581: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45582: LD_ADDR_VAR 0 3
45586: PUSH
45587: LD_INT 13
45589: PUSH
45590: LD_INT 14
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: ST_TO_ADDR
45597: GO 46002
45599: LD_INT 31
45601: DOUBLE
45602: EQUAL
45603: IFTRUE 45607
45605: GO 45625
45607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45608: LD_ADDR_VAR 0 3
45612: PUSH
45613: LD_INT 13
45615: PUSH
45616: LD_INT 14
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: ST_TO_ADDR
45623: GO 46002
45625: LD_INT 26
45627: DOUBLE
45628: EQUAL
45629: IFTRUE 45633
45631: GO 45651
45633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45634: LD_ADDR_VAR 0 3
45638: PUSH
45639: LD_INT 13
45641: PUSH
45642: LD_INT 14
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: ST_TO_ADDR
45649: GO 46002
45651: LD_INT 42
45653: DOUBLE
45654: EQUAL
45655: IFTRUE 45659
45657: GO 45685
45659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45660: LD_ADDR_VAR 0 3
45664: PUSH
45665: LD_INT 21
45667: PUSH
45668: LD_INT 22
45670: PUSH
45671: LD_INT 23
45673: PUSH
45674: LD_INT 24
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: ST_TO_ADDR
45683: GO 46002
45685: LD_INT 43
45687: DOUBLE
45688: EQUAL
45689: IFTRUE 45693
45691: GO 45719
45693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45694: LD_ADDR_VAR 0 3
45698: PUSH
45699: LD_INT 21
45701: PUSH
45702: LD_INT 22
45704: PUSH
45705: LD_INT 23
45707: PUSH
45708: LD_INT 24
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: ST_TO_ADDR
45717: GO 46002
45719: LD_INT 44
45721: DOUBLE
45722: EQUAL
45723: IFTRUE 45727
45725: GO 45753
45727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45728: LD_ADDR_VAR 0 3
45732: PUSH
45733: LD_INT 21
45735: PUSH
45736: LD_INT 22
45738: PUSH
45739: LD_INT 23
45741: PUSH
45742: LD_INT 24
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: ST_TO_ADDR
45751: GO 46002
45753: LD_INT 45
45755: DOUBLE
45756: EQUAL
45757: IFTRUE 45761
45759: GO 45787
45761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45762: LD_ADDR_VAR 0 3
45766: PUSH
45767: LD_INT 21
45769: PUSH
45770: LD_INT 22
45772: PUSH
45773: LD_INT 23
45775: PUSH
45776: LD_INT 24
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: ST_TO_ADDR
45785: GO 46002
45787: LD_INT 49
45789: DOUBLE
45790: EQUAL
45791: IFTRUE 45795
45793: GO 45821
45795: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45796: LD_ADDR_VAR 0 3
45800: PUSH
45801: LD_INT 21
45803: PUSH
45804: LD_INT 22
45806: PUSH
45807: LD_INT 23
45809: PUSH
45810: LD_INT 24
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: ST_TO_ADDR
45819: GO 46002
45821: LD_INT 51
45823: DOUBLE
45824: EQUAL
45825: IFTRUE 45829
45827: GO 45855
45829: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45830: LD_ADDR_VAR 0 3
45834: PUSH
45835: LD_INT 21
45837: PUSH
45838: LD_INT 22
45840: PUSH
45841: LD_INT 23
45843: PUSH
45844: LD_INT 24
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: ST_TO_ADDR
45853: GO 46002
45855: LD_INT 52
45857: DOUBLE
45858: EQUAL
45859: IFTRUE 45863
45861: GO 45889
45863: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45864: LD_ADDR_VAR 0 3
45868: PUSH
45869: LD_INT 21
45871: PUSH
45872: LD_INT 22
45874: PUSH
45875: LD_INT 23
45877: PUSH
45878: LD_INT 24
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: ST_TO_ADDR
45887: GO 46002
45889: LD_INT 53
45891: DOUBLE
45892: EQUAL
45893: IFTRUE 45897
45895: GO 45915
45897: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45898: LD_ADDR_VAR 0 3
45902: PUSH
45903: LD_INT 23
45905: PUSH
45906: LD_INT 24
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: ST_TO_ADDR
45913: GO 46002
45915: LD_INT 46
45917: DOUBLE
45918: EQUAL
45919: IFTRUE 45923
45921: GO 45941
45923: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45924: LD_ADDR_VAR 0 3
45928: PUSH
45929: LD_INT 23
45931: PUSH
45932: LD_INT 24
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: ST_TO_ADDR
45939: GO 46002
45941: LD_INT 47
45943: DOUBLE
45944: EQUAL
45945: IFTRUE 45949
45947: GO 45967
45949: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
45950: LD_ADDR_VAR 0 3
45954: PUSH
45955: LD_INT 23
45957: PUSH
45958: LD_INT 24
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: ST_TO_ADDR
45965: GO 46002
45967: LD_INT 98
45969: DOUBLE
45970: EQUAL
45971: IFTRUE 45975
45973: GO 46001
45975: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45976: LD_ADDR_VAR 0 3
45980: PUSH
45981: LD_INT 21
45983: PUSH
45984: LD_INT 22
45986: PUSH
45987: LD_INT 23
45989: PUSH
45990: LD_INT 24
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: ST_TO_ADDR
45999: GO 46002
46001: POP
// result := ( chassis in result ) ;
46002: LD_ADDR_VAR 0 3
46006: PUSH
46007: LD_VAR 0 1
46011: PUSH
46012: LD_VAR 0 3
46016: IN
46017: ST_TO_ADDR
// end ;
46018: LD_VAR 0 3
46022: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46023: LD_INT 0
46025: PPUSH
46026: PPUSH
46027: PPUSH
46028: PPUSH
46029: PPUSH
46030: PPUSH
46031: PPUSH
// result := array ;
46032: LD_ADDR_VAR 0 5
46036: PUSH
46037: LD_VAR 0 1
46041: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46042: LD_VAR 0 1
46046: NOT
46047: IFTRUE 46056
46049: PUSH
46050: LD_VAR 0 2
46054: NOT
46055: OR
46056: IFTRUE 46065
46058: PUSH
46059: LD_VAR 0 3
46063: NOT
46064: OR
46065: IFTRUE 46079
46067: PUSH
46068: LD_VAR 0 2
46072: PUSH
46073: LD_VAR 0 1
46077: GREATER
46078: OR
46079: IFTRUE 46093
46081: PUSH
46082: LD_VAR 0 3
46086: PUSH
46087: LD_VAR 0 1
46091: GREATER
46092: OR
46093: IFFALSE 46097
// exit ;
46095: GO 46393
// if direction then
46097: LD_VAR 0 4
46101: IFFALSE 46165
// begin d := 1 ;
46103: LD_ADDR_VAR 0 9
46107: PUSH
46108: LD_INT 1
46110: ST_TO_ADDR
// if i_from > i_to then
46111: LD_VAR 0 2
46115: PUSH
46116: LD_VAR 0 3
46120: GREATER
46121: IFFALSE 46147
// length := ( array - i_from ) + i_to else
46123: LD_ADDR_VAR 0 11
46127: PUSH
46128: LD_VAR 0 1
46132: PUSH
46133: LD_VAR 0 2
46137: MINUS
46138: PUSH
46139: LD_VAR 0 3
46143: PLUS
46144: ST_TO_ADDR
46145: GO 46163
// length := i_to - i_from ;
46147: LD_ADDR_VAR 0 11
46151: PUSH
46152: LD_VAR 0 3
46156: PUSH
46157: LD_VAR 0 2
46161: MINUS
46162: ST_TO_ADDR
// end else
46163: GO 46226
// begin d := - 1 ;
46165: LD_ADDR_VAR 0 9
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: ST_TO_ADDR
// if i_from > i_to then
46174: LD_VAR 0 2
46178: PUSH
46179: LD_VAR 0 3
46183: GREATER
46184: IFFALSE 46204
// length := i_from - i_to else
46186: LD_ADDR_VAR 0 11
46190: PUSH
46191: LD_VAR 0 2
46195: PUSH
46196: LD_VAR 0 3
46200: MINUS
46201: ST_TO_ADDR
46202: GO 46226
// length := ( array - i_to ) + i_from ;
46204: LD_ADDR_VAR 0 11
46208: PUSH
46209: LD_VAR 0 1
46213: PUSH
46214: LD_VAR 0 3
46218: MINUS
46219: PUSH
46220: LD_VAR 0 2
46224: PLUS
46225: ST_TO_ADDR
// end ; if not length then
46226: LD_VAR 0 11
46230: NOT
46231: IFFALSE 46235
// exit ;
46233: GO 46393
// tmp := array ;
46235: LD_ADDR_VAR 0 10
46239: PUSH
46240: LD_VAR 0 1
46244: ST_TO_ADDR
// for i = 1 to length do
46245: LD_ADDR_VAR 0 6
46249: PUSH
46250: DOUBLE
46251: LD_INT 1
46253: DEC
46254: ST_TO_ADDR
46255: LD_VAR 0 11
46259: PUSH
46260: FOR_TO
46261: IFFALSE 46381
// begin for j = 1 to array do
46263: LD_ADDR_VAR 0 7
46267: PUSH
46268: DOUBLE
46269: LD_INT 1
46271: DEC
46272: ST_TO_ADDR
46273: LD_VAR 0 1
46277: PUSH
46278: FOR_TO
46279: IFFALSE 46367
// begin k := j + d ;
46281: LD_ADDR_VAR 0 8
46285: PUSH
46286: LD_VAR 0 7
46290: PUSH
46291: LD_VAR 0 9
46295: PLUS
46296: ST_TO_ADDR
// if k > array then
46297: LD_VAR 0 8
46301: PUSH
46302: LD_VAR 0 1
46306: GREATER
46307: IFFALSE 46317
// k := 1 ;
46309: LD_ADDR_VAR 0 8
46313: PUSH
46314: LD_INT 1
46316: ST_TO_ADDR
// if not k then
46317: LD_VAR 0 8
46321: NOT
46322: IFFALSE 46334
// k := array ;
46324: LD_ADDR_VAR 0 8
46328: PUSH
46329: LD_VAR 0 1
46333: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46334: LD_ADDR_VAR 0 10
46338: PUSH
46339: LD_VAR 0 10
46343: PPUSH
46344: LD_VAR 0 8
46348: PPUSH
46349: LD_VAR 0 1
46353: PUSH
46354: LD_VAR 0 7
46358: ARRAY
46359: PPUSH
46360: CALL_OW 1
46364: ST_TO_ADDR
// end ;
46365: GO 46278
46367: POP
46368: POP
// array := tmp ;
46369: LD_ADDR_VAR 0 1
46373: PUSH
46374: LD_VAR 0 10
46378: ST_TO_ADDR
// end ;
46379: GO 46260
46381: POP
46382: POP
// result := array ;
46383: LD_ADDR_VAR 0 5
46387: PUSH
46388: LD_VAR 0 1
46392: ST_TO_ADDR
// end ;
46393: LD_VAR 0 5
46397: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46398: LD_INT 0
46400: PPUSH
46401: PPUSH
// result := 0 ;
46402: LD_ADDR_VAR 0 3
46406: PUSH
46407: LD_INT 0
46409: ST_TO_ADDR
// if not array or not value in array then
46410: LD_VAR 0 1
46414: NOT
46415: IFTRUE 46430
46417: PUSH
46418: LD_VAR 0 2
46422: PUSH
46423: LD_VAR 0 1
46427: IN
46428: NOT
46429: OR
46430: IFFALSE 46434
// exit ;
46432: GO 46488
// for i = 1 to array do
46434: LD_ADDR_VAR 0 4
46438: PUSH
46439: DOUBLE
46440: LD_INT 1
46442: DEC
46443: ST_TO_ADDR
46444: LD_VAR 0 1
46448: PUSH
46449: FOR_TO
46450: IFFALSE 46486
// if value = array [ i ] then
46452: LD_VAR 0 2
46456: PUSH
46457: LD_VAR 0 1
46461: PUSH
46462: LD_VAR 0 4
46466: ARRAY
46467: EQUAL
46468: IFFALSE 46484
// begin result := i ;
46470: LD_ADDR_VAR 0 3
46474: PUSH
46475: LD_VAR 0 4
46479: ST_TO_ADDR
// exit ;
46480: POP
46481: POP
46482: GO 46488
// end ;
46484: GO 46449
46486: POP
46487: POP
// end ;
46488: LD_VAR 0 3
46492: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46493: LD_INT 0
46495: PPUSH
// vc_chassis := chassis ;
46496: LD_ADDR_OWVAR 37
46500: PUSH
46501: LD_VAR 0 1
46505: ST_TO_ADDR
// vc_engine := engine ;
46506: LD_ADDR_OWVAR 39
46510: PUSH
46511: LD_VAR 0 2
46515: ST_TO_ADDR
// vc_control := control ;
46516: LD_ADDR_OWVAR 38
46520: PUSH
46521: LD_VAR 0 3
46525: ST_TO_ADDR
// vc_weapon := weapon ;
46526: LD_ADDR_OWVAR 40
46530: PUSH
46531: LD_VAR 0 4
46535: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46536: LD_ADDR_OWVAR 41
46540: PUSH
46541: LD_VAR 0 5
46545: ST_TO_ADDR
// end ;
46546: LD_VAR 0 6
46550: RET
// export function WantPlant ( unit ) ; var task ; begin
46551: LD_INT 0
46553: PPUSH
46554: PPUSH
// result := false ;
46555: LD_ADDR_VAR 0 2
46559: PUSH
46560: LD_INT 0
46562: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46563: LD_ADDR_VAR 0 3
46567: PUSH
46568: LD_VAR 0 1
46572: PPUSH
46573: CALL_OW 437
46577: ST_TO_ADDR
// if task then
46578: LD_VAR 0 3
46582: IFFALSE 46610
// if task [ 1 ] [ 1 ] = p then
46584: LD_VAR 0 3
46588: PUSH
46589: LD_INT 1
46591: ARRAY
46592: PUSH
46593: LD_INT 1
46595: ARRAY
46596: PUSH
46597: LD_STRING p
46599: EQUAL
46600: IFFALSE 46610
// result := true ;
46602: LD_ADDR_VAR 0 2
46606: PUSH
46607: LD_INT 1
46609: ST_TO_ADDR
// end ;
46610: LD_VAR 0 2
46614: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46615: LD_INT 0
46617: PPUSH
46618: PPUSH
46619: PPUSH
46620: PPUSH
// if pos < 1 then
46621: LD_VAR 0 2
46625: PUSH
46626: LD_INT 1
46628: LESS
46629: IFFALSE 46633
// exit ;
46631: GO 46936
// if pos = 1 then
46633: LD_VAR 0 2
46637: PUSH
46638: LD_INT 1
46640: EQUAL
46641: IFFALSE 46674
// result := Replace ( arr , pos [ 1 ] , value ) else
46643: LD_ADDR_VAR 0 4
46647: PUSH
46648: LD_VAR 0 1
46652: PPUSH
46653: LD_VAR 0 2
46657: PUSH
46658: LD_INT 1
46660: ARRAY
46661: PPUSH
46662: LD_VAR 0 3
46666: PPUSH
46667: CALL_OW 1
46671: ST_TO_ADDR
46672: GO 46936
// begin tmp := arr ;
46674: LD_ADDR_VAR 0 6
46678: PUSH
46679: LD_VAR 0 1
46683: ST_TO_ADDR
// s_arr := [ tmp ] ;
46684: LD_ADDR_VAR 0 7
46688: PUSH
46689: LD_VAR 0 6
46693: PUSH
46694: EMPTY
46695: LIST
46696: ST_TO_ADDR
// for i = 1 to pos - 1 do
46697: LD_ADDR_VAR 0 5
46701: PUSH
46702: DOUBLE
46703: LD_INT 1
46705: DEC
46706: ST_TO_ADDR
46707: LD_VAR 0 2
46711: PUSH
46712: LD_INT 1
46714: MINUS
46715: PUSH
46716: FOR_TO
46717: IFFALSE 46762
// begin tmp := tmp [ pos [ i ] ] ;
46719: LD_ADDR_VAR 0 6
46723: PUSH
46724: LD_VAR 0 6
46728: PUSH
46729: LD_VAR 0 2
46733: PUSH
46734: LD_VAR 0 5
46738: ARRAY
46739: ARRAY
46740: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46741: LD_ADDR_VAR 0 7
46745: PUSH
46746: LD_VAR 0 7
46750: PUSH
46751: LD_VAR 0 6
46755: PUSH
46756: EMPTY
46757: LIST
46758: ADD
46759: ST_TO_ADDR
// end ;
46760: GO 46716
46762: POP
46763: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46764: LD_ADDR_VAR 0 6
46768: PUSH
46769: LD_VAR 0 6
46773: PPUSH
46774: LD_VAR 0 2
46778: PUSH
46779: LD_VAR 0 2
46783: ARRAY
46784: PPUSH
46785: LD_VAR 0 3
46789: PPUSH
46790: CALL_OW 1
46794: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46795: LD_ADDR_VAR 0 7
46799: PUSH
46800: LD_VAR 0 7
46804: PPUSH
46805: LD_VAR 0 7
46809: PPUSH
46810: LD_VAR 0 6
46814: PPUSH
46815: CALL_OW 1
46819: ST_TO_ADDR
// for i = s_arr downto 2 do
46820: LD_ADDR_VAR 0 5
46824: PUSH
46825: DOUBLE
46826: LD_VAR 0 7
46830: INC
46831: ST_TO_ADDR
46832: LD_INT 2
46834: PUSH
46835: FOR_DOWNTO
46836: IFFALSE 46920
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46838: LD_ADDR_VAR 0 6
46842: PUSH
46843: LD_VAR 0 7
46847: PUSH
46848: LD_VAR 0 5
46852: PUSH
46853: LD_INT 1
46855: MINUS
46856: ARRAY
46857: PPUSH
46858: LD_VAR 0 2
46862: PUSH
46863: LD_VAR 0 5
46867: PUSH
46868: LD_INT 1
46870: MINUS
46871: ARRAY
46872: PPUSH
46873: LD_VAR 0 7
46877: PUSH
46878: LD_VAR 0 5
46882: ARRAY
46883: PPUSH
46884: CALL_OW 1
46888: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46889: LD_ADDR_VAR 0 7
46893: PUSH
46894: LD_VAR 0 7
46898: PPUSH
46899: LD_VAR 0 5
46903: PUSH
46904: LD_INT 1
46906: MINUS
46907: PPUSH
46908: LD_VAR 0 6
46912: PPUSH
46913: CALL_OW 1
46917: ST_TO_ADDR
// end ;
46918: GO 46835
46920: POP
46921: POP
// result := s_arr [ 1 ] ;
46922: LD_ADDR_VAR 0 4
46926: PUSH
46927: LD_VAR 0 7
46931: PUSH
46932: LD_INT 1
46934: ARRAY
46935: ST_TO_ADDR
// end ; end ;
46936: LD_VAR 0 4
46940: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46941: LD_INT 0
46943: PPUSH
46944: PPUSH
// if not list then
46945: LD_VAR 0 1
46949: NOT
46950: IFFALSE 46954
// exit ;
46952: GO 47045
// i := list [ pos1 ] ;
46954: LD_ADDR_VAR 0 5
46958: PUSH
46959: LD_VAR 0 1
46963: PUSH
46964: LD_VAR 0 2
46968: ARRAY
46969: ST_TO_ADDR
// if not i then
46970: LD_VAR 0 5
46974: NOT
46975: IFFALSE 46979
// exit ;
46977: GO 47045
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46979: LD_ADDR_VAR 0 1
46983: PUSH
46984: LD_VAR 0 1
46988: PPUSH
46989: LD_VAR 0 2
46993: PPUSH
46994: LD_VAR 0 1
46998: PUSH
46999: LD_VAR 0 3
47003: ARRAY
47004: PPUSH
47005: CALL_OW 1
47009: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47010: LD_ADDR_VAR 0 1
47014: PUSH
47015: LD_VAR 0 1
47019: PPUSH
47020: LD_VAR 0 3
47024: PPUSH
47025: LD_VAR 0 5
47029: PPUSH
47030: CALL_OW 1
47034: ST_TO_ADDR
// result := list ;
47035: LD_ADDR_VAR 0 4
47039: PUSH
47040: LD_VAR 0 1
47044: ST_TO_ADDR
// end ;
47045: LD_VAR 0 4
47049: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47050: LD_INT 0
47052: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47053: LD_ADDR_VAR 0 5
47057: PUSH
47058: LD_VAR 0 1
47062: PPUSH
47063: CALL_OW 250
47067: PPUSH
47068: LD_VAR 0 1
47072: PPUSH
47073: CALL_OW 251
47077: PPUSH
47078: LD_VAR 0 2
47082: PPUSH
47083: LD_VAR 0 3
47087: PPUSH
47088: LD_VAR 0 4
47092: PPUSH
47093: CALL 47475 0 5
47097: ST_TO_ADDR
// end ;
47098: LD_VAR 0 5
47102: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47103: LD_INT 0
47105: PPUSH
47106: PPUSH
47107: PPUSH
47108: PPUSH
// if not list or not unit then
47109: LD_VAR 0 2
47113: NOT
47114: IFTRUE 47123
47116: PUSH
47117: LD_VAR 0 1
47121: NOT
47122: OR
47123: IFFALSE 47127
// exit ;
47125: GO 47470
// result := [ ] ;
47127: LD_ADDR_VAR 0 5
47131: PUSH
47132: EMPTY
47133: ST_TO_ADDR
// for i in list do
47134: LD_ADDR_VAR 0 6
47138: PUSH
47139: LD_VAR 0 2
47143: PUSH
47144: FOR_IN
47145: IFFALSE 47363
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47147: LD_ADDR_VAR 0 8
47151: PUSH
47152: LD_VAR 0 1
47156: PPUSH
47157: LD_VAR 0 6
47161: PUSH
47162: LD_INT 1
47164: ARRAY
47165: PPUSH
47166: LD_VAR 0 6
47170: PUSH
47171: LD_INT 2
47173: ARRAY
47174: PPUSH
47175: CALL_OW 297
47179: ST_TO_ADDR
// if not Count ( result ) then
47180: LD_VAR 0 5
47184: PPUSH
47185: CALL 43697 0 1
47189: NOT
47190: IFFALSE 47223
// begin result := Join ( result , [ i , tmp ] ) ;
47192: LD_ADDR_VAR 0 5
47196: PUSH
47197: LD_VAR 0 5
47201: PPUSH
47202: LD_VAR 0 6
47206: PUSH
47207: LD_VAR 0 8
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PPUSH
47216: CALL 79673 0 2
47220: ST_TO_ADDR
// continue ;
47221: GO 47144
// end ; if result [ result ] [ 2 ] <= tmp then
47223: LD_VAR 0 5
47227: PUSH
47228: LD_VAR 0 5
47232: ARRAY
47233: PUSH
47234: LD_INT 2
47236: ARRAY
47237: PUSH
47238: LD_VAR 0 8
47242: LESSEQUAL
47243: IFFALSE 47276
// result := Join ( result , [ i , tmp ] ) else
47245: LD_ADDR_VAR 0 5
47249: PUSH
47250: LD_VAR 0 5
47254: PPUSH
47255: LD_VAR 0 6
47259: PUSH
47260: LD_VAR 0 8
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PPUSH
47269: CALL 79673 0 2
47273: ST_TO_ADDR
47274: GO 47361
// begin for j := 1 to Count ( result ) do
47276: LD_ADDR_VAR 0 7
47280: PUSH
47281: DOUBLE
47282: LD_INT 1
47284: DEC
47285: ST_TO_ADDR
47286: LD_VAR 0 5
47290: PPUSH
47291: CALL 43697 0 1
47295: PUSH
47296: FOR_TO
47297: IFFALSE 47359
// begin if tmp < result [ j ] [ 2 ] then
47299: LD_VAR 0 8
47303: PUSH
47304: LD_VAR 0 5
47308: PUSH
47309: LD_VAR 0 7
47313: ARRAY
47314: PUSH
47315: LD_INT 2
47317: ARRAY
47318: LESS
47319: IFFALSE 47357
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47321: LD_ADDR_VAR 0 5
47325: PUSH
47326: LD_VAR 0 5
47330: PPUSH
47331: LD_VAR 0 7
47335: PPUSH
47336: LD_VAR 0 6
47340: PUSH
47341: LD_VAR 0 8
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PPUSH
47350: CALL_OW 2
47354: ST_TO_ADDR
// break ;
47355: GO 47359
// end ; end ;
47357: GO 47296
47359: POP
47360: POP
// end ; end ;
47361: GO 47144
47363: POP
47364: POP
// if result and not asc then
47365: LD_VAR 0 5
47369: IFFALSE 47378
47371: PUSH
47372: LD_VAR 0 3
47376: NOT
47377: AND
47378: IFFALSE 47395
// result := ReverseArray ( result ) ;
47380: LD_ADDR_VAR 0 5
47384: PUSH
47385: LD_VAR 0 5
47389: PPUSH
47390: CALL 74753 0 1
47394: ST_TO_ADDR
// tmp := [ ] ;
47395: LD_ADDR_VAR 0 8
47399: PUSH
47400: EMPTY
47401: ST_TO_ADDR
// if mode then
47402: LD_VAR 0 4
47406: IFFALSE 47470
// begin for i := 1 to result do
47408: LD_ADDR_VAR 0 6
47412: PUSH
47413: DOUBLE
47414: LD_INT 1
47416: DEC
47417: ST_TO_ADDR
47418: LD_VAR 0 5
47422: PUSH
47423: FOR_TO
47424: IFFALSE 47458
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47426: LD_ADDR_VAR 0 8
47430: PUSH
47431: LD_VAR 0 8
47435: PPUSH
47436: LD_VAR 0 5
47440: PUSH
47441: LD_VAR 0 6
47445: ARRAY
47446: PUSH
47447: LD_INT 1
47449: ARRAY
47450: PPUSH
47451: CALL 79673 0 2
47455: ST_TO_ADDR
47456: GO 47423
47458: POP
47459: POP
// result := tmp ;
47460: LD_ADDR_VAR 0 5
47464: PUSH
47465: LD_VAR 0 8
47469: ST_TO_ADDR
// end ; end ;
47470: LD_VAR 0 5
47474: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47475: LD_INT 0
47477: PPUSH
47478: PPUSH
47479: PPUSH
47480: PPUSH
// if not list then
47481: LD_VAR 0 3
47485: NOT
47486: IFFALSE 47490
// exit ;
47488: GO 47880
// result := [ ] ;
47490: LD_ADDR_VAR 0 6
47494: PUSH
47495: EMPTY
47496: ST_TO_ADDR
// for i in list do
47497: LD_ADDR_VAR 0 7
47501: PUSH
47502: LD_VAR 0 3
47506: PUSH
47507: FOR_IN
47508: IFFALSE 47710
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47510: LD_ADDR_VAR 0 9
47514: PUSH
47515: LD_VAR 0 7
47519: PPUSH
47520: LD_VAR 0 1
47524: PPUSH
47525: LD_VAR 0 2
47529: PPUSH
47530: CALL_OW 297
47534: ST_TO_ADDR
// if not result then
47535: LD_VAR 0 6
47539: NOT
47540: IFFALSE 47566
// result := [ [ i , tmp ] ] else
47542: LD_ADDR_VAR 0 6
47546: PUSH
47547: LD_VAR 0 7
47551: PUSH
47552: LD_VAR 0 9
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: EMPTY
47562: LIST
47563: ST_TO_ADDR
47564: GO 47708
// begin if result [ result ] [ 2 ] <= tmp then
47566: LD_VAR 0 6
47570: PUSH
47571: LD_VAR 0 6
47575: ARRAY
47576: PUSH
47577: LD_INT 2
47579: ARRAY
47580: PUSH
47581: LD_VAR 0 9
47585: LESSEQUAL
47586: IFFALSE 47628
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47588: LD_ADDR_VAR 0 6
47592: PUSH
47593: LD_VAR 0 6
47597: PPUSH
47598: LD_VAR 0 6
47602: PUSH
47603: LD_INT 1
47605: PLUS
47606: PPUSH
47607: LD_VAR 0 7
47611: PUSH
47612: LD_VAR 0 9
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PPUSH
47621: CALL_OW 2
47625: ST_TO_ADDR
47626: GO 47708
// for j := 1 to result do
47628: LD_ADDR_VAR 0 8
47632: PUSH
47633: DOUBLE
47634: LD_INT 1
47636: DEC
47637: ST_TO_ADDR
47638: LD_VAR 0 6
47642: PUSH
47643: FOR_TO
47644: IFFALSE 47706
// begin if tmp < result [ j ] [ 2 ] then
47646: LD_VAR 0 9
47650: PUSH
47651: LD_VAR 0 6
47655: PUSH
47656: LD_VAR 0 8
47660: ARRAY
47661: PUSH
47662: LD_INT 2
47664: ARRAY
47665: LESS
47666: IFFALSE 47704
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47668: LD_ADDR_VAR 0 6
47672: PUSH
47673: LD_VAR 0 6
47677: PPUSH
47678: LD_VAR 0 8
47682: PPUSH
47683: LD_VAR 0 7
47687: PUSH
47688: LD_VAR 0 9
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PPUSH
47697: CALL_OW 2
47701: ST_TO_ADDR
// break ;
47702: GO 47706
// end ; end ;
47704: GO 47643
47706: POP
47707: POP
// end ; end ;
47708: GO 47507
47710: POP
47711: POP
// if result and not asc then
47712: LD_VAR 0 6
47716: IFFALSE 47725
47718: PUSH
47719: LD_VAR 0 4
47723: NOT
47724: AND
47725: IFFALSE 47800
// begin tmp := result ;
47727: LD_ADDR_VAR 0 9
47731: PUSH
47732: LD_VAR 0 6
47736: ST_TO_ADDR
// for i = tmp downto 1 do
47737: LD_ADDR_VAR 0 7
47741: PUSH
47742: DOUBLE
47743: LD_VAR 0 9
47747: INC
47748: ST_TO_ADDR
47749: LD_INT 1
47751: PUSH
47752: FOR_DOWNTO
47753: IFFALSE 47798
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47755: LD_ADDR_VAR 0 6
47759: PUSH
47760: LD_VAR 0 6
47764: PPUSH
47765: LD_VAR 0 9
47769: PUSH
47770: LD_VAR 0 7
47774: MINUS
47775: PUSH
47776: LD_INT 1
47778: PLUS
47779: PPUSH
47780: LD_VAR 0 9
47784: PUSH
47785: LD_VAR 0 7
47789: ARRAY
47790: PPUSH
47791: CALL_OW 1
47795: ST_TO_ADDR
47796: GO 47752
47798: POP
47799: POP
// end ; tmp := [ ] ;
47800: LD_ADDR_VAR 0 9
47804: PUSH
47805: EMPTY
47806: ST_TO_ADDR
// if mode then
47807: LD_VAR 0 5
47811: IFFALSE 47880
// begin for i = 1 to result do
47813: LD_ADDR_VAR 0 7
47817: PUSH
47818: DOUBLE
47819: LD_INT 1
47821: DEC
47822: ST_TO_ADDR
47823: LD_VAR 0 6
47827: PUSH
47828: FOR_TO
47829: IFFALSE 47868
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47831: LD_ADDR_VAR 0 9
47835: PUSH
47836: LD_VAR 0 9
47840: PPUSH
47841: LD_VAR 0 7
47845: PPUSH
47846: LD_VAR 0 6
47850: PUSH
47851: LD_VAR 0 7
47855: ARRAY
47856: PUSH
47857: LD_INT 1
47859: ARRAY
47860: PPUSH
47861: CALL_OW 1
47865: ST_TO_ADDR
47866: GO 47828
47868: POP
47869: POP
// result := tmp ;
47870: LD_ADDR_VAR 0 6
47874: PUSH
47875: LD_VAR 0 9
47879: ST_TO_ADDR
// end ; end ;
47880: LD_VAR 0 6
47884: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47885: LD_INT 0
47887: PPUSH
47888: PPUSH
47889: PPUSH
47890: PPUSH
47891: PPUSH
47892: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47893: LD_ADDR_VAR 0 5
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: ST_TO_ADDR
// if not x or not y then
47915: LD_VAR 0 2
47919: NOT
47920: IFTRUE 47929
47922: PUSH
47923: LD_VAR 0 3
47927: NOT
47928: OR
47929: IFFALSE 47933
// exit ;
47931: GO 49589
// if not range then
47933: LD_VAR 0 4
47937: NOT
47938: IFFALSE 47948
// range := 10 ;
47940: LD_ADDR_VAR 0 4
47944: PUSH
47945: LD_INT 10
47947: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47948: LD_ADDR_VAR 0 8
47952: PUSH
47953: LD_INT 81
47955: PUSH
47956: LD_VAR 0 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 92
47967: PUSH
47968: LD_VAR 0 2
47972: PUSH
47973: LD_VAR 0 3
47977: PUSH
47978: LD_VAR 0 4
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 3
47991: PUSH
47992: LD_INT 21
47994: PUSH
47995: LD_INT 3
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: LIST
48010: PPUSH
48011: CALL_OW 69
48015: ST_TO_ADDR
// if not tmp then
48016: LD_VAR 0 8
48020: NOT
48021: IFFALSE 48025
// exit ;
48023: GO 49589
// for i in tmp do
48025: LD_ADDR_VAR 0 6
48029: PUSH
48030: LD_VAR 0 8
48034: PUSH
48035: FOR_IN
48036: IFFALSE 49564
// begin points := [ 0 , 0 , 0 ] ;
48038: LD_ADDR_VAR 0 9
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: LIST
48056: ST_TO_ADDR
// bpoints := 1 ;
48057: LD_ADDR_VAR 0 10
48061: PUSH
48062: LD_INT 1
48064: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48065: LD_VAR 0 6
48069: PPUSH
48070: CALL_OW 247
48074: PUSH
48075: LD_INT 1
48077: DOUBLE
48078: EQUAL
48079: IFTRUE 48083
48081: GO 48665
48083: POP
// begin if GetClass ( i ) = 1 then
48084: LD_VAR 0 6
48088: PPUSH
48089: CALL_OW 257
48093: PUSH
48094: LD_INT 1
48096: EQUAL
48097: IFFALSE 48118
// points := [ 10 , 5 , 3 ] ;
48099: LD_ADDR_VAR 0 9
48103: PUSH
48104: LD_INT 10
48106: PUSH
48107: LD_INT 5
48109: PUSH
48110: LD_INT 3
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48118: LD_VAR 0 6
48122: PPUSH
48123: CALL_OW 257
48127: PUSH
48128: LD_INT 2
48130: PUSH
48131: LD_INT 3
48133: PUSH
48134: LD_INT 4
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: LIST
48141: IN
48142: IFFALSE 48163
// points := [ 3 , 2 , 1 ] ;
48144: LD_ADDR_VAR 0 9
48148: PUSH
48149: LD_INT 3
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: LIST
48162: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48163: LD_VAR 0 6
48167: PPUSH
48168: CALL_OW 257
48172: PUSH
48173: LD_INT 5
48175: EQUAL
48176: IFFALSE 48197
// points := [ 130 , 5 , 2 ] ;
48178: LD_ADDR_VAR 0 9
48182: PUSH
48183: LD_INT 130
48185: PUSH
48186: LD_INT 5
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: LIST
48196: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48197: LD_VAR 0 6
48201: PPUSH
48202: CALL_OW 257
48206: PUSH
48207: LD_INT 8
48209: EQUAL
48210: IFFALSE 48231
// points := [ 35 , 35 , 30 ] ;
48212: LD_ADDR_VAR 0 9
48216: PUSH
48217: LD_INT 35
48219: PUSH
48220: LD_INT 35
48222: PUSH
48223: LD_INT 30
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: LIST
48230: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48231: LD_VAR 0 6
48235: PPUSH
48236: CALL_OW 257
48240: PUSH
48241: LD_INT 9
48243: EQUAL
48244: IFFALSE 48265
// points := [ 20 , 55 , 40 ] ;
48246: LD_ADDR_VAR 0 9
48250: PUSH
48251: LD_INT 20
48253: PUSH
48254: LD_INT 55
48256: PUSH
48257: LD_INT 40
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: LIST
48264: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48265: LD_VAR 0 6
48269: PPUSH
48270: CALL_OW 257
48274: PUSH
48275: LD_INT 12
48277: PUSH
48278: LD_INT 16
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: IN
48285: IFFALSE 48306
// points := [ 5 , 3 , 2 ] ;
48287: LD_ADDR_VAR 0 9
48291: PUSH
48292: LD_INT 5
48294: PUSH
48295: LD_INT 3
48297: PUSH
48298: LD_INT 2
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48306: LD_VAR 0 6
48310: PPUSH
48311: CALL_OW 257
48315: PUSH
48316: LD_INT 17
48318: EQUAL
48319: IFFALSE 48340
// points := [ 100 , 50 , 75 ] ;
48321: LD_ADDR_VAR 0 9
48325: PUSH
48326: LD_INT 100
48328: PUSH
48329: LD_INT 50
48331: PUSH
48332: LD_INT 75
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: LIST
48339: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48340: LD_VAR 0 6
48344: PPUSH
48345: CALL_OW 257
48349: PUSH
48350: LD_INT 15
48352: EQUAL
48353: IFFALSE 48374
// points := [ 10 , 5 , 3 ] ;
48355: LD_ADDR_VAR 0 9
48359: PUSH
48360: LD_INT 10
48362: PUSH
48363: LD_INT 5
48365: PUSH
48366: LD_INT 3
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: LIST
48373: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48374: LD_VAR 0 6
48378: PPUSH
48379: CALL_OW 257
48383: PUSH
48384: LD_INT 14
48386: EQUAL
48387: IFFALSE 48408
// points := [ 10 , 0 , 0 ] ;
48389: LD_ADDR_VAR 0 9
48393: PUSH
48394: LD_INT 10
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48408: LD_VAR 0 6
48412: PPUSH
48413: CALL_OW 257
48417: PUSH
48418: LD_INT 11
48420: EQUAL
48421: IFFALSE 48442
// points := [ 30 , 10 , 5 ] ;
48423: LD_ADDR_VAR 0 9
48427: PUSH
48428: LD_INT 30
48430: PUSH
48431: LD_INT 10
48433: PUSH
48434: LD_INT 5
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: LIST
48441: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48442: LD_VAR 0 1
48446: PPUSH
48447: LD_INT 5
48449: PPUSH
48450: CALL_OW 321
48454: PUSH
48455: LD_INT 2
48457: EQUAL
48458: IFFALSE 48475
// bpoints := bpoints * 1.8 ;
48460: LD_ADDR_VAR 0 10
48464: PUSH
48465: LD_VAR 0 10
48469: PUSH
48470: LD_REAL  1.80000000000000E+0000
48473: MUL
48474: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48475: LD_VAR 0 6
48479: PPUSH
48480: CALL_OW 257
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: LD_INT 3
48493: PUSH
48494: LD_INT 4
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: IN
48503: IFFALSE 48523
48505: PUSH
48506: LD_VAR 0 1
48510: PPUSH
48511: LD_INT 51
48513: PPUSH
48514: CALL_OW 321
48518: PUSH
48519: LD_INT 2
48521: EQUAL
48522: AND
48523: IFFALSE 48540
// bpoints := bpoints * 1.2 ;
48525: LD_ADDR_VAR 0 10
48529: PUSH
48530: LD_VAR 0 10
48534: PUSH
48535: LD_REAL  1.20000000000000E+0000
48538: MUL
48539: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48540: LD_VAR 0 6
48544: PPUSH
48545: CALL_OW 257
48549: PUSH
48550: LD_INT 5
48552: PUSH
48553: LD_INT 7
48555: PUSH
48556: LD_INT 9
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: LIST
48563: IN
48564: IFFALSE 48584
48566: PUSH
48567: LD_VAR 0 1
48571: PPUSH
48572: LD_INT 52
48574: PPUSH
48575: CALL_OW 321
48579: PUSH
48580: LD_INT 2
48582: EQUAL
48583: AND
48584: IFFALSE 48601
// bpoints := bpoints * 1.5 ;
48586: LD_ADDR_VAR 0 10
48590: PUSH
48591: LD_VAR 0 10
48595: PUSH
48596: LD_REAL  1.50000000000000E+0000
48599: MUL
48600: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48601: LD_VAR 0 1
48605: PPUSH
48606: LD_INT 66
48608: PPUSH
48609: CALL_OW 321
48613: PUSH
48614: LD_INT 2
48616: EQUAL
48617: IFFALSE 48634
// bpoints := bpoints * 1.1 ;
48619: LD_ADDR_VAR 0 10
48623: PUSH
48624: LD_VAR 0 10
48628: PUSH
48629: LD_REAL  1.10000000000000E+0000
48632: MUL
48633: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48634: LD_ADDR_VAR 0 10
48638: PUSH
48639: LD_VAR 0 10
48643: PUSH
48644: LD_VAR 0 6
48648: PPUSH
48649: LD_INT 1
48651: PPUSH
48652: CALL_OW 259
48656: PUSH
48657: LD_REAL  1.15000000000000E+0000
48660: MUL
48661: MUL
48662: ST_TO_ADDR
// end ; unit_vehicle :
48663: GO 49493
48665: LD_INT 2
48667: DOUBLE
48668: EQUAL
48669: IFTRUE 48673
48671: GO 49481
48673: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48674: LD_VAR 0 6
48678: PPUSH
48679: CALL_OW 264
48683: PUSH
48684: LD_INT 2
48686: PUSH
48687: LD_INT 42
48689: PUSH
48690: LD_INT 24
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: LIST
48697: IN
48698: IFFALSE 48719
// points := [ 25 , 5 , 3 ] ;
48700: LD_ADDR_VAR 0 9
48704: PUSH
48705: LD_INT 25
48707: PUSH
48708: LD_INT 5
48710: PUSH
48711: LD_INT 3
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: LIST
48718: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48719: LD_VAR 0 6
48723: PPUSH
48724: CALL_OW 264
48728: PUSH
48729: LD_INT 4
48731: PUSH
48732: LD_INT 43
48734: PUSH
48735: LD_INT 25
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: LIST
48742: IN
48743: IFFALSE 48764
// points := [ 40 , 15 , 5 ] ;
48745: LD_ADDR_VAR 0 9
48749: PUSH
48750: LD_INT 40
48752: PUSH
48753: LD_INT 15
48755: PUSH
48756: LD_INT 5
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: LIST
48763: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48764: LD_VAR 0 6
48768: PPUSH
48769: CALL_OW 264
48773: PUSH
48774: LD_INT 3
48776: PUSH
48777: LD_INT 23
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: IN
48784: IFFALSE 48805
// points := [ 7 , 25 , 8 ] ;
48786: LD_ADDR_VAR 0 9
48790: PUSH
48791: LD_INT 7
48793: PUSH
48794: LD_INT 25
48796: PUSH
48797: LD_INT 8
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: LIST
48804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48805: LD_VAR 0 6
48809: PPUSH
48810: CALL_OW 264
48814: PUSH
48815: LD_INT 5
48817: PUSH
48818: LD_INT 27
48820: PUSH
48821: LD_INT 44
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: LIST
48828: IN
48829: IFFALSE 48850
// points := [ 14 , 50 , 16 ] ;
48831: LD_ADDR_VAR 0 9
48835: PUSH
48836: LD_INT 14
48838: PUSH
48839: LD_INT 50
48841: PUSH
48842: LD_INT 16
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: LIST
48849: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48850: LD_VAR 0 6
48854: PPUSH
48855: CALL_OW 264
48859: PUSH
48860: LD_INT 6
48862: PUSH
48863: LD_INT 46
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: IN
48870: IFFALSE 48891
// points := [ 32 , 120 , 70 ] ;
48872: LD_ADDR_VAR 0 9
48876: PUSH
48877: LD_INT 32
48879: PUSH
48880: LD_INT 120
48882: PUSH
48883: LD_INT 70
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: LIST
48890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48891: LD_VAR 0 6
48895: PPUSH
48896: CALL_OW 264
48900: PUSH
48901: LD_INT 7
48903: PUSH
48904: LD_INT 28
48906: PUSH
48907: LD_INT 45
48909: PUSH
48910: LD_INT 92
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: IN
48919: IFFALSE 48940
// points := [ 35 , 20 , 45 ] ;
48921: LD_ADDR_VAR 0 9
48925: PUSH
48926: LD_INT 35
48928: PUSH
48929: LD_INT 20
48931: PUSH
48932: LD_INT 45
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: LIST
48939: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48940: LD_VAR 0 6
48944: PPUSH
48945: CALL_OW 264
48949: PUSH
48950: LD_INT 47
48952: PUSH
48953: EMPTY
48954: LIST
48955: IN
48956: IFFALSE 48977
// points := [ 67 , 45 , 75 ] ;
48958: LD_ADDR_VAR 0 9
48962: PUSH
48963: LD_INT 67
48965: PUSH
48966: LD_INT 45
48968: PUSH
48969: LD_INT 75
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: LIST
48976: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48977: LD_VAR 0 6
48981: PPUSH
48982: CALL_OW 264
48986: PUSH
48987: LD_INT 26
48989: PUSH
48990: EMPTY
48991: LIST
48992: IN
48993: IFFALSE 49014
// points := [ 120 , 30 , 80 ] ;
48995: LD_ADDR_VAR 0 9
48999: PUSH
49000: LD_INT 120
49002: PUSH
49003: LD_INT 30
49005: PUSH
49006: LD_INT 80
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: LIST
49013: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49014: LD_VAR 0 6
49018: PPUSH
49019: CALL_OW 264
49023: PUSH
49024: LD_INT 22
49026: PUSH
49027: EMPTY
49028: LIST
49029: IN
49030: IFFALSE 49051
// points := [ 40 , 1 , 1 ] ;
49032: LD_ADDR_VAR 0 9
49036: PUSH
49037: LD_INT 40
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: LIST
49050: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49051: LD_VAR 0 6
49055: PPUSH
49056: CALL_OW 264
49060: PUSH
49061: LD_INT 29
49063: PUSH
49064: EMPTY
49065: LIST
49066: IN
49067: IFFALSE 49088
// points := [ 70 , 200 , 400 ] ;
49069: LD_ADDR_VAR 0 9
49073: PUSH
49074: LD_INT 70
49076: PUSH
49077: LD_INT 200
49079: PUSH
49080: LD_INT 400
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: LIST
49087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49088: LD_VAR 0 6
49092: PPUSH
49093: CALL_OW 264
49097: PUSH
49098: LD_INT 14
49100: PUSH
49101: LD_INT 53
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: IN
49108: IFFALSE 49129
// points := [ 40 , 10 , 20 ] ;
49110: LD_ADDR_VAR 0 9
49114: PUSH
49115: LD_INT 40
49117: PUSH
49118: LD_INT 10
49120: PUSH
49121: LD_INT 20
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: LIST
49128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49129: LD_VAR 0 6
49133: PPUSH
49134: CALL_OW 264
49138: PUSH
49139: LD_INT 9
49141: PUSH
49142: EMPTY
49143: LIST
49144: IN
49145: IFFALSE 49166
// points := [ 5 , 70 , 20 ] ;
49147: LD_ADDR_VAR 0 9
49151: PUSH
49152: LD_INT 5
49154: PUSH
49155: LD_INT 70
49157: PUSH
49158: LD_INT 20
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: LIST
49165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49166: LD_VAR 0 6
49170: PPUSH
49171: CALL_OW 264
49175: PUSH
49176: LD_INT 10
49178: PUSH
49179: EMPTY
49180: LIST
49181: IN
49182: IFFALSE 49203
// points := [ 35 , 110 , 70 ] ;
49184: LD_ADDR_VAR 0 9
49188: PUSH
49189: LD_INT 35
49191: PUSH
49192: LD_INT 110
49194: PUSH
49195: LD_INT 70
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: LIST
49202: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49203: LD_VAR 0 6
49207: PPUSH
49208: CALL_OW 265
49212: PUSH
49213: LD_INT 25
49215: EQUAL
49216: IFFALSE 49237
// points := [ 80 , 65 , 100 ] ;
49218: LD_ADDR_VAR 0 9
49222: PUSH
49223: LD_INT 80
49225: PUSH
49226: LD_INT 65
49228: PUSH
49229: LD_INT 100
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: LIST
49236: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49237: LD_VAR 0 6
49241: PPUSH
49242: CALL_OW 263
49246: PUSH
49247: LD_INT 1
49249: EQUAL
49250: IFFALSE 49285
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49252: LD_ADDR_VAR 0 10
49256: PUSH
49257: LD_VAR 0 10
49261: PUSH
49262: LD_VAR 0 6
49266: PPUSH
49267: CALL_OW 311
49271: PPUSH
49272: LD_INT 3
49274: PPUSH
49275: CALL_OW 259
49279: PUSH
49280: LD_INT 4
49282: MUL
49283: MUL
49284: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49285: LD_VAR 0 6
49289: PPUSH
49290: CALL_OW 263
49294: PUSH
49295: LD_INT 2
49297: EQUAL
49298: IFFALSE 49349
// begin j := IsControledBy ( i ) ;
49300: LD_ADDR_VAR 0 7
49304: PUSH
49305: LD_VAR 0 6
49309: PPUSH
49310: CALL_OW 312
49314: ST_TO_ADDR
// if j then
49315: LD_VAR 0 7
49319: IFFALSE 49349
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49321: LD_ADDR_VAR 0 10
49325: PUSH
49326: LD_VAR 0 10
49330: PUSH
49331: LD_VAR 0 7
49335: PPUSH
49336: LD_INT 3
49338: PPUSH
49339: CALL_OW 259
49343: PUSH
49344: LD_INT 3
49346: MUL
49347: MUL
49348: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49349: LD_VAR 0 6
49353: PPUSH
49354: CALL_OW 264
49358: PUSH
49359: LD_INT 5
49361: PUSH
49362: LD_INT 6
49364: PUSH
49365: LD_INT 46
49367: PUSH
49368: LD_INT 44
49370: PUSH
49371: LD_INT 47
49373: PUSH
49374: LD_INT 45
49376: PUSH
49377: LD_INT 28
49379: PUSH
49380: LD_INT 7
49382: PUSH
49383: LD_INT 27
49385: PUSH
49386: LD_INT 29
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: IN
49401: IFFALSE 49421
49403: PUSH
49404: LD_VAR 0 1
49408: PPUSH
49409: LD_INT 52
49411: PPUSH
49412: CALL_OW 321
49416: PUSH
49417: LD_INT 2
49419: EQUAL
49420: AND
49421: IFFALSE 49438
// bpoints := bpoints * 1.2 ;
49423: LD_ADDR_VAR 0 10
49427: PUSH
49428: LD_VAR 0 10
49432: PUSH
49433: LD_REAL  1.20000000000000E+0000
49436: MUL
49437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49438: LD_VAR 0 6
49442: PPUSH
49443: CALL_OW 264
49447: PUSH
49448: LD_INT 6
49450: PUSH
49451: LD_INT 46
49453: PUSH
49454: LD_INT 47
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: LIST
49461: IN
49462: IFFALSE 49479
// bpoints := bpoints * 1.2 ;
49464: LD_ADDR_VAR 0 10
49468: PUSH
49469: LD_VAR 0 10
49473: PUSH
49474: LD_REAL  1.20000000000000E+0000
49477: MUL
49478: ST_TO_ADDR
// end ; unit_building :
49479: GO 49493
49481: LD_INT 3
49483: DOUBLE
49484: EQUAL
49485: IFTRUE 49489
49487: GO 49492
49489: POP
// ; end ;
49490: GO 49493
49492: POP
// for j = 1 to 3 do
49493: LD_ADDR_VAR 0 7
49497: PUSH
49498: DOUBLE
49499: LD_INT 1
49501: DEC
49502: ST_TO_ADDR
49503: LD_INT 3
49505: PUSH
49506: FOR_TO
49507: IFFALSE 49560
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49509: LD_ADDR_VAR 0 5
49513: PUSH
49514: LD_VAR 0 5
49518: PPUSH
49519: LD_VAR 0 7
49523: PPUSH
49524: LD_VAR 0 5
49528: PUSH
49529: LD_VAR 0 7
49533: ARRAY
49534: PUSH
49535: LD_VAR 0 9
49539: PUSH
49540: LD_VAR 0 7
49544: ARRAY
49545: PUSH
49546: LD_VAR 0 10
49550: MUL
49551: PLUS
49552: PPUSH
49553: CALL_OW 1
49557: ST_TO_ADDR
49558: GO 49506
49560: POP
49561: POP
// end ;
49562: GO 48035
49564: POP
49565: POP
// result := Replace ( result , 4 , tmp ) ;
49566: LD_ADDR_VAR 0 5
49570: PUSH
49571: LD_VAR 0 5
49575: PPUSH
49576: LD_INT 4
49578: PPUSH
49579: LD_VAR 0 8
49583: PPUSH
49584: CALL_OW 1
49588: ST_TO_ADDR
// end ;
49589: LD_VAR 0 5
49593: RET
// export function DangerAtRange ( unit , range ) ; begin
49594: LD_INT 0
49596: PPUSH
// if not unit then
49597: LD_VAR 0 1
49601: NOT
49602: IFFALSE 49606
// exit ;
49604: GO 49651
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49606: LD_ADDR_VAR 0 3
49610: PUSH
49611: LD_VAR 0 1
49615: PPUSH
49616: CALL_OW 255
49620: PPUSH
49621: LD_VAR 0 1
49625: PPUSH
49626: CALL_OW 250
49630: PPUSH
49631: LD_VAR 0 1
49635: PPUSH
49636: CALL_OW 251
49640: PPUSH
49641: LD_VAR 0 2
49645: PPUSH
49646: CALL 47885 0 4
49650: ST_TO_ADDR
// end ;
49651: LD_VAR 0 3
49655: RET
// export function DangerInArea ( side , area ) ; begin
49656: LD_INT 0
49658: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49659: LD_ADDR_VAR 0 3
49663: PUSH
49664: LD_VAR 0 2
49668: PPUSH
49669: LD_INT 81
49671: PUSH
49672: LD_VAR 0 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PPUSH
49681: CALL_OW 70
49685: ST_TO_ADDR
// end ;
49686: LD_VAR 0 3
49690: RET
// export function IsExtension ( b ) ; begin
49691: LD_INT 0
49693: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49694: LD_ADDR_VAR 0 2
49698: PUSH
49699: LD_VAR 0 1
49703: PUSH
49704: LD_INT 23
49706: PUSH
49707: LD_INT 20
49709: PUSH
49710: LD_INT 22
49712: PUSH
49713: LD_INT 17
49715: PUSH
49716: LD_INT 24
49718: PUSH
49719: LD_INT 21
49721: PUSH
49722: LD_INT 19
49724: PUSH
49725: LD_INT 16
49727: PUSH
49728: LD_INT 25
49730: PUSH
49731: LD_INT 18
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: IN
49746: ST_TO_ADDR
// end ;
49747: LD_VAR 0 2
49751: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49752: LD_INT 0
49754: PPUSH
49755: PPUSH
49756: PPUSH
// result := [ ] ;
49757: LD_ADDR_VAR 0 4
49761: PUSH
49762: EMPTY
49763: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49764: LD_ADDR_VAR 0 5
49768: PUSH
49769: LD_VAR 0 2
49773: PPUSH
49774: LD_INT 21
49776: PUSH
49777: LD_INT 3
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PPUSH
49784: CALL_OW 70
49788: ST_TO_ADDR
// if not tmp then
49789: LD_VAR 0 5
49793: NOT
49794: IFFALSE 49798
// exit ;
49796: GO 49862
// if checkLink then
49798: LD_VAR 0 3
49802: IFFALSE 49852
// begin for i in tmp do
49804: LD_ADDR_VAR 0 6
49808: PUSH
49809: LD_VAR 0 5
49813: PUSH
49814: FOR_IN
49815: IFFALSE 49850
// if GetBase ( i ) <> base then
49817: LD_VAR 0 6
49821: PPUSH
49822: CALL_OW 274
49826: PUSH
49827: LD_VAR 0 1
49831: NONEQUAL
49832: IFFALSE 49848
// ComLinkToBase ( base , i ) ;
49834: LD_VAR 0 1
49838: PPUSH
49839: LD_VAR 0 6
49843: PPUSH
49844: CALL_OW 169
49848: GO 49814
49850: POP
49851: POP
// end ; result := tmp ;
49852: LD_ADDR_VAR 0 4
49856: PUSH
49857: LD_VAR 0 5
49861: ST_TO_ADDR
// end ;
49862: LD_VAR 0 4
49866: RET
// export function ComComplete ( units , b ) ; var i ; begin
49867: LD_INT 0
49869: PPUSH
49870: PPUSH
// if not units then
49871: LD_VAR 0 1
49875: NOT
49876: IFFALSE 49880
// exit ;
49878: GO 49970
// for i in units do
49880: LD_ADDR_VAR 0 4
49884: PUSH
49885: LD_VAR 0 1
49889: PUSH
49890: FOR_IN
49891: IFFALSE 49968
// if BuildingStatus ( b ) = bs_build then
49893: LD_VAR 0 2
49897: PPUSH
49898: CALL_OW 461
49902: PUSH
49903: LD_INT 1
49905: EQUAL
49906: IFFALSE 49966
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49908: LD_VAR 0 4
49912: PPUSH
49913: LD_STRING h
49915: PUSH
49916: LD_VAR 0 2
49920: PPUSH
49921: CALL_OW 250
49925: PUSH
49926: LD_VAR 0 2
49930: PPUSH
49931: CALL_OW 251
49935: PUSH
49936: LD_VAR 0 2
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: PUSH
49959: EMPTY
49960: LIST
49961: PPUSH
49962: CALL_OW 446
49966: GO 49890
49968: POP
49969: POP
// end ;
49970: LD_VAR 0 3
49974: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49975: LD_INT 0
49977: PPUSH
49978: PPUSH
49979: PPUSH
49980: PPUSH
49981: PPUSH
49982: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49983: LD_VAR 0 1
49987: NOT
49988: IFTRUE 50005
49990: PUSH
49991: LD_VAR 0 1
49995: PPUSH
49996: CALL_OW 263
50000: PUSH
50001: LD_INT 2
50003: NONEQUAL
50004: OR
50005: IFFALSE 50009
// exit ;
50007: GO 50325
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50009: LD_ADDR_VAR 0 6
50013: PUSH
50014: LD_INT 22
50016: PUSH
50017: LD_VAR 0 1
50021: PPUSH
50022: CALL_OW 255
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: LD_INT 30
50036: PUSH
50037: LD_INT 36
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 34
50046: PUSH
50047: LD_INT 31
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: LIST
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PPUSH
50063: CALL_OW 69
50067: ST_TO_ADDR
// if not tmp then
50068: LD_VAR 0 6
50072: NOT
50073: IFFALSE 50077
// exit ;
50075: GO 50325
// result := [ ] ;
50077: LD_ADDR_VAR 0 2
50081: PUSH
50082: EMPTY
50083: ST_TO_ADDR
// for i in tmp do
50084: LD_ADDR_VAR 0 3
50088: PUSH
50089: LD_VAR 0 6
50093: PUSH
50094: FOR_IN
50095: IFFALSE 50166
// begin t := UnitsInside ( i ) ;
50097: LD_ADDR_VAR 0 4
50101: PUSH
50102: LD_VAR 0 3
50106: PPUSH
50107: CALL_OW 313
50111: ST_TO_ADDR
// if t then
50112: LD_VAR 0 4
50116: IFFALSE 50164
// for j in t do
50118: LD_ADDR_VAR 0 7
50122: PUSH
50123: LD_VAR 0 4
50127: PUSH
50128: FOR_IN
50129: IFFALSE 50162
// result := Replace ( result , result + 1 , j ) ;
50131: LD_ADDR_VAR 0 2
50135: PUSH
50136: LD_VAR 0 2
50140: PPUSH
50141: LD_VAR 0 2
50145: PUSH
50146: LD_INT 1
50148: PLUS
50149: PPUSH
50150: LD_VAR 0 7
50154: PPUSH
50155: CALL_OW 1
50159: ST_TO_ADDR
50160: GO 50128
50162: POP
50163: POP
// end ;
50164: GO 50094
50166: POP
50167: POP
// if not result then
50168: LD_VAR 0 2
50172: NOT
50173: IFFALSE 50177
// exit ;
50175: GO 50325
// mech := result [ 1 ] ;
50177: LD_ADDR_VAR 0 5
50181: PUSH
50182: LD_VAR 0 2
50186: PUSH
50187: LD_INT 1
50189: ARRAY
50190: ST_TO_ADDR
// if result > 1 then
50191: LD_VAR 0 2
50195: PUSH
50196: LD_INT 1
50198: GREATER
50199: IFFALSE 50311
// begin for i = 2 to result do
50201: LD_ADDR_VAR 0 3
50205: PUSH
50206: DOUBLE
50207: LD_INT 2
50209: DEC
50210: ST_TO_ADDR
50211: LD_VAR 0 2
50215: PUSH
50216: FOR_TO
50217: IFFALSE 50309
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50219: LD_ADDR_VAR 0 4
50223: PUSH
50224: LD_VAR 0 2
50228: PUSH
50229: LD_VAR 0 3
50233: ARRAY
50234: PPUSH
50235: LD_INT 3
50237: PPUSH
50238: CALL_OW 259
50242: PUSH
50243: LD_VAR 0 2
50247: PUSH
50248: LD_VAR 0 3
50252: ARRAY
50253: PPUSH
50254: CALL_OW 432
50258: MINUS
50259: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50260: LD_VAR 0 4
50264: PUSH
50265: LD_VAR 0 5
50269: PPUSH
50270: LD_INT 3
50272: PPUSH
50273: CALL_OW 259
50277: PUSH
50278: LD_VAR 0 5
50282: PPUSH
50283: CALL_OW 432
50287: MINUS
50288: GREATEREQUAL
50289: IFFALSE 50307
// mech := result [ i ] ;
50291: LD_ADDR_VAR 0 5
50295: PUSH
50296: LD_VAR 0 2
50300: PUSH
50301: LD_VAR 0 3
50305: ARRAY
50306: ST_TO_ADDR
// end ;
50307: GO 50216
50309: POP
50310: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50311: LD_VAR 0 1
50315: PPUSH
50316: LD_VAR 0 5
50320: PPUSH
50321: CALL_OW 135
// end ;
50325: LD_VAR 0 2
50329: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50330: LD_INT 0
50332: PPUSH
50333: PPUSH
50334: PPUSH
50335: PPUSH
50336: PPUSH
50337: PPUSH
50338: PPUSH
50339: PPUSH
50340: PPUSH
50341: PPUSH
50342: PPUSH
50343: PPUSH
50344: PPUSH
// result := [ ] ;
50345: LD_ADDR_VAR 0 7
50349: PUSH
50350: EMPTY
50351: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50352: LD_VAR 0 1
50356: PPUSH
50357: CALL_OW 266
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: IN
50372: NOT
50373: IFFALSE 50377
// exit ;
50375: GO 52017
// if name then
50377: LD_VAR 0 3
50381: IFFALSE 50397
// SetBName ( base_dep , name ) ;
50383: LD_VAR 0 1
50387: PPUSH
50388: LD_VAR 0 3
50392: PPUSH
50393: CALL_OW 500
// base := GetBase ( base_dep ) ;
50397: LD_ADDR_VAR 0 15
50401: PUSH
50402: LD_VAR 0 1
50406: PPUSH
50407: CALL_OW 274
50411: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50412: LD_ADDR_VAR 0 16
50416: PUSH
50417: LD_VAR 0 1
50421: PPUSH
50422: CALL_OW 255
50426: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50427: LD_ADDR_VAR 0 17
50431: PUSH
50432: LD_VAR 0 1
50436: PPUSH
50437: CALL_OW 248
50441: ST_TO_ADDR
// if sources then
50442: LD_VAR 0 5
50446: IFFALSE 50493
// for i = 1 to 3 do
50448: LD_ADDR_VAR 0 8
50452: PUSH
50453: DOUBLE
50454: LD_INT 1
50456: DEC
50457: ST_TO_ADDR
50458: LD_INT 3
50460: PUSH
50461: FOR_TO
50462: IFFALSE 50491
// AddResourceType ( base , i , sources [ i ] ) ;
50464: LD_VAR 0 15
50468: PPUSH
50469: LD_VAR 0 8
50473: PPUSH
50474: LD_VAR 0 5
50478: PUSH
50479: LD_VAR 0 8
50483: ARRAY
50484: PPUSH
50485: CALL_OW 276
50489: GO 50461
50491: POP
50492: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50493: LD_ADDR_VAR 0 18
50497: PUSH
50498: LD_VAR 0 15
50502: PPUSH
50503: LD_VAR 0 2
50507: PPUSH
50508: LD_INT 1
50510: PPUSH
50511: CALL 49752 0 3
50515: ST_TO_ADDR
// InitHc ;
50516: CALL_OW 19
// InitUc ;
50520: CALL_OW 18
// uc_side := side ;
50524: LD_ADDR_OWVAR 20
50528: PUSH
50529: LD_VAR 0 16
50533: ST_TO_ADDR
// uc_nation := nation ;
50534: LD_ADDR_OWVAR 21
50538: PUSH
50539: LD_VAR 0 17
50543: ST_TO_ADDR
// if buildings then
50544: LD_VAR 0 18
50548: IFFALSE 51876
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50550: LD_ADDR_VAR 0 19
50554: PUSH
50555: LD_VAR 0 18
50559: PPUSH
50560: LD_INT 2
50562: PUSH
50563: LD_INT 30
50565: PUSH
50566: LD_INT 29
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 30
50575: PUSH
50576: LD_INT 30
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: PPUSH
50588: CALL_OW 72
50592: ST_TO_ADDR
// if tmp then
50593: LD_VAR 0 19
50597: IFFALSE 50645
// for i in tmp do
50599: LD_ADDR_VAR 0 8
50603: PUSH
50604: LD_VAR 0 19
50608: PUSH
50609: FOR_IN
50610: IFFALSE 50643
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50612: LD_VAR 0 8
50616: PPUSH
50617: CALL_OW 250
50621: PPUSH
50622: LD_VAR 0 8
50626: PPUSH
50627: CALL_OW 251
50631: PPUSH
50632: LD_VAR 0 16
50636: PPUSH
50637: CALL_OW 441
50641: GO 50609
50643: POP
50644: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50645: LD_VAR 0 18
50649: PPUSH
50650: LD_INT 2
50652: PUSH
50653: LD_INT 30
50655: PUSH
50656: LD_INT 32
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 30
50665: PUSH
50666: LD_INT 33
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: LIST
50677: PPUSH
50678: CALL_OW 72
50682: IFFALSE 50770
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50684: LD_ADDR_VAR 0 8
50688: PUSH
50689: LD_VAR 0 18
50693: PPUSH
50694: LD_INT 2
50696: PUSH
50697: LD_INT 30
50699: PUSH
50700: LD_INT 32
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 30
50709: PUSH
50710: LD_INT 33
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: PPUSH
50722: CALL_OW 72
50726: PUSH
50727: FOR_IN
50728: IFFALSE 50768
// begin if not GetBWeapon ( i ) then
50730: LD_VAR 0 8
50734: PPUSH
50735: CALL_OW 269
50739: NOT
50740: IFFALSE 50766
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50742: LD_VAR 0 8
50746: PPUSH
50747: LD_VAR 0 8
50751: PPUSH
50752: LD_VAR 0 2
50756: PPUSH
50757: CALL 52022 0 2
50761: PPUSH
50762: CALL_OW 431
// end ;
50766: GO 50727
50768: POP
50769: POP
// end ; for i = 1 to personel do
50770: LD_ADDR_VAR 0 8
50774: PUSH
50775: DOUBLE
50776: LD_INT 1
50778: DEC
50779: ST_TO_ADDR
50780: LD_VAR 0 6
50784: PUSH
50785: FOR_TO
50786: IFFALSE 51856
// begin if i > 4 then
50788: LD_VAR 0 8
50792: PUSH
50793: LD_INT 4
50795: GREATER
50796: IFFALSE 50800
// break ;
50798: GO 51856
// case i of 1 :
50800: LD_VAR 0 8
50804: PUSH
50805: LD_INT 1
50807: DOUBLE
50808: EQUAL
50809: IFTRUE 50813
50811: GO 50893
50813: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50814: LD_ADDR_VAR 0 12
50818: PUSH
50819: LD_VAR 0 18
50823: PPUSH
50824: LD_INT 22
50826: PUSH
50827: LD_VAR 0 16
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 58
50838: PUSH
50839: EMPTY
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: LD_INT 30
50847: PUSH
50848: LD_INT 32
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 30
50857: PUSH
50858: LD_INT 4
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 30
50867: PUSH
50868: LD_INT 5
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: LIST
50885: PPUSH
50886: CALL_OW 72
50890: ST_TO_ADDR
50891: GO 51115
50893: LD_INT 2
50895: DOUBLE
50896: EQUAL
50897: IFTRUE 50901
50899: GO 50963
50901: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50902: LD_ADDR_VAR 0 12
50906: PUSH
50907: LD_VAR 0 18
50911: PPUSH
50912: LD_INT 22
50914: PUSH
50915: LD_VAR 0 16
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: LD_INT 30
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 30
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: LIST
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PPUSH
50956: CALL_OW 72
50960: ST_TO_ADDR
50961: GO 51115
50963: LD_INT 3
50965: DOUBLE
50966: EQUAL
50967: IFTRUE 50971
50969: GO 51033
50971: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50972: LD_ADDR_VAR 0 12
50976: PUSH
50977: LD_VAR 0 18
50981: PPUSH
50982: LD_INT 22
50984: PUSH
50985: LD_VAR 0 16
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: LD_INT 30
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 30
51009: PUSH
51010: LD_INT 3
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: LIST
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PPUSH
51026: CALL_OW 72
51030: ST_TO_ADDR
51031: GO 51115
51033: LD_INT 4
51035: DOUBLE
51036: EQUAL
51037: IFTRUE 51041
51039: GO 51114
51041: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51042: LD_ADDR_VAR 0 12
51046: PUSH
51047: LD_VAR 0 18
51051: PPUSH
51052: LD_INT 22
51054: PUSH
51055: LD_VAR 0 16
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: LD_INT 30
51069: PUSH
51070: LD_INT 6
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 30
51079: PUSH
51080: LD_INT 7
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 30
51089: PUSH
51090: LD_INT 8
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PPUSH
51107: CALL_OW 72
51111: ST_TO_ADDR
51112: GO 51115
51114: POP
// if i = 1 then
51115: LD_VAR 0 8
51119: PUSH
51120: LD_INT 1
51122: EQUAL
51123: IFFALSE 51234
// begin tmp := [ ] ;
51125: LD_ADDR_VAR 0 19
51129: PUSH
51130: EMPTY
51131: ST_TO_ADDR
// for j in f do
51132: LD_ADDR_VAR 0 9
51136: PUSH
51137: LD_VAR 0 12
51141: PUSH
51142: FOR_IN
51143: IFFALSE 51216
// if GetBType ( j ) = b_bunker then
51145: LD_VAR 0 9
51149: PPUSH
51150: CALL_OW 266
51154: PUSH
51155: LD_INT 32
51157: EQUAL
51158: IFFALSE 51185
// tmp := Insert ( tmp , 1 , j ) else
51160: LD_ADDR_VAR 0 19
51164: PUSH
51165: LD_VAR 0 19
51169: PPUSH
51170: LD_INT 1
51172: PPUSH
51173: LD_VAR 0 9
51177: PPUSH
51178: CALL_OW 2
51182: ST_TO_ADDR
51183: GO 51214
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51185: LD_ADDR_VAR 0 19
51189: PUSH
51190: LD_VAR 0 19
51194: PPUSH
51195: LD_VAR 0 19
51199: PUSH
51200: LD_INT 1
51202: PLUS
51203: PPUSH
51204: LD_VAR 0 9
51208: PPUSH
51209: CALL_OW 2
51213: ST_TO_ADDR
51214: GO 51142
51216: POP
51217: POP
// if tmp then
51218: LD_VAR 0 19
51222: IFFALSE 51234
// f := tmp ;
51224: LD_ADDR_VAR 0 12
51228: PUSH
51229: LD_VAR 0 19
51233: ST_TO_ADDR
// end ; x := personel [ i ] ;
51234: LD_ADDR_VAR 0 13
51238: PUSH
51239: LD_VAR 0 6
51243: PUSH
51244: LD_VAR 0 8
51248: ARRAY
51249: ST_TO_ADDR
// if x = - 1 then
51250: LD_VAR 0 13
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: EQUAL
51259: IFFALSE 51470
// begin for j in f do
51261: LD_ADDR_VAR 0 9
51265: PUSH
51266: LD_VAR 0 12
51270: PUSH
51271: FOR_IN
51272: IFFALSE 51466
// repeat InitHc ;
51274: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51278: LD_VAR 0 9
51282: PPUSH
51283: CALL_OW 266
51287: PUSH
51288: LD_INT 5
51290: EQUAL
51291: IFFALSE 51361
// begin if UnitsInside ( j ) < 3 then
51293: LD_VAR 0 9
51297: PPUSH
51298: CALL_OW 313
51302: PUSH
51303: LD_INT 3
51305: LESS
51306: IFFALSE 51342
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51308: LD_INT 0
51310: PPUSH
51311: LD_INT 5
51313: PUSH
51314: LD_INT 8
51316: PUSH
51317: LD_INT 9
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: PUSH
51325: LD_VAR 0 17
51329: ARRAY
51330: PPUSH
51331: LD_VAR 0 4
51335: PPUSH
51336: CALL_OW 380
51340: GO 51359
// PrepareHuman ( false , i , skill ) ;
51342: LD_INT 0
51344: PPUSH
51345: LD_VAR 0 8
51349: PPUSH
51350: LD_VAR 0 4
51354: PPUSH
51355: CALL_OW 380
// end else
51359: GO 51378
// PrepareHuman ( false , i , skill ) ;
51361: LD_INT 0
51363: PPUSH
51364: LD_VAR 0 8
51368: PPUSH
51369: LD_VAR 0 4
51373: PPUSH
51374: CALL_OW 380
// un := CreateHuman ;
51378: LD_ADDR_VAR 0 14
51382: PUSH
51383: CALL_OW 44
51387: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51388: LD_ADDR_VAR 0 7
51392: PUSH
51393: LD_VAR 0 7
51397: PPUSH
51398: LD_INT 1
51400: PPUSH
51401: LD_VAR 0 14
51405: PPUSH
51406: CALL_OW 2
51410: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51411: LD_VAR 0 14
51415: PPUSH
51416: LD_VAR 0 9
51420: PPUSH
51421: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51425: LD_VAR 0 9
51429: PPUSH
51430: CALL_OW 313
51434: PUSH
51435: LD_INT 6
51437: EQUAL
51438: IFTRUE 51462
51440: PUSH
51441: LD_VAR 0 9
51445: PPUSH
51446: CALL_OW 266
51450: PUSH
51451: LD_INT 32
51453: PUSH
51454: LD_INT 31
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: IN
51461: OR
51462: IFFALSE 51274
51464: GO 51271
51466: POP
51467: POP
// end else
51468: GO 51854
// for j = 1 to x do
51470: LD_ADDR_VAR 0 9
51474: PUSH
51475: DOUBLE
51476: LD_INT 1
51478: DEC
51479: ST_TO_ADDR
51480: LD_VAR 0 13
51484: PUSH
51485: FOR_TO
51486: IFFALSE 51852
// begin InitHc ;
51488: CALL_OW 19
// if not f then
51492: LD_VAR 0 12
51496: NOT
51497: IFFALSE 51586
// begin PrepareHuman ( false , i , skill ) ;
51499: LD_INT 0
51501: PPUSH
51502: LD_VAR 0 8
51506: PPUSH
51507: LD_VAR 0 4
51511: PPUSH
51512: CALL_OW 380
// un := CreateHuman ;
51516: LD_ADDR_VAR 0 14
51520: PUSH
51521: CALL_OW 44
51525: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51526: LD_ADDR_VAR 0 7
51530: PUSH
51531: LD_VAR 0 7
51535: PPUSH
51536: LD_INT 1
51538: PPUSH
51539: LD_VAR 0 14
51543: PPUSH
51544: CALL_OW 2
51548: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51549: LD_VAR 0 14
51553: PPUSH
51554: LD_VAR 0 1
51558: PPUSH
51559: CALL_OW 250
51563: PPUSH
51564: LD_VAR 0 1
51568: PPUSH
51569: CALL_OW 251
51573: PPUSH
51574: LD_INT 10
51576: PPUSH
51577: LD_INT 0
51579: PPUSH
51580: CALL_OW 50
// continue ;
51584: GO 51485
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51586: LD_VAR 0 12
51590: PUSH
51591: LD_INT 1
51593: ARRAY
51594: PPUSH
51595: CALL_OW 313
51599: IFFALSE 51627
51601: PUSH
51602: LD_VAR 0 12
51606: PUSH
51607: LD_INT 1
51609: ARRAY
51610: PPUSH
51611: CALL_OW 266
51615: PUSH
51616: LD_INT 32
51618: PUSH
51619: LD_INT 31
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: IN
51626: AND
51627: IFTRUE 51648
51629: PUSH
51630: LD_VAR 0 12
51634: PUSH
51635: LD_INT 1
51637: ARRAY
51638: PPUSH
51639: CALL_OW 313
51643: PUSH
51644: LD_INT 6
51646: EQUAL
51647: OR
51648: IFFALSE 51668
// f := Delete ( f , 1 ) ;
51650: LD_ADDR_VAR 0 12
51654: PUSH
51655: LD_VAR 0 12
51659: PPUSH
51660: LD_INT 1
51662: PPUSH
51663: CALL_OW 3
51667: ST_TO_ADDR
// if not f then
51668: LD_VAR 0 12
51672: NOT
51673: IFFALSE 51691
// begin x := x + 2 ;
51675: LD_ADDR_VAR 0 13
51679: PUSH
51680: LD_VAR 0 13
51684: PUSH
51685: LD_INT 2
51687: PLUS
51688: ST_TO_ADDR
// continue ;
51689: GO 51485
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51691: LD_VAR 0 12
51695: PUSH
51696: LD_INT 1
51698: ARRAY
51699: PPUSH
51700: CALL_OW 266
51704: PUSH
51705: LD_INT 5
51707: EQUAL
51708: IFFALSE 51782
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51710: LD_VAR 0 12
51714: PUSH
51715: LD_INT 1
51717: ARRAY
51718: PPUSH
51719: CALL_OW 313
51723: PUSH
51724: LD_INT 3
51726: LESS
51727: IFFALSE 51763
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51729: LD_INT 0
51731: PPUSH
51732: LD_INT 5
51734: PUSH
51735: LD_INT 8
51737: PUSH
51738: LD_INT 9
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: PUSH
51746: LD_VAR 0 17
51750: ARRAY
51751: PPUSH
51752: LD_VAR 0 4
51756: PPUSH
51757: CALL_OW 380
51761: GO 51780
// PrepareHuman ( false , i , skill ) ;
51763: LD_INT 0
51765: PPUSH
51766: LD_VAR 0 8
51770: PPUSH
51771: LD_VAR 0 4
51775: PPUSH
51776: CALL_OW 380
// end else
51780: GO 51799
// PrepareHuman ( false , i , skill ) ;
51782: LD_INT 0
51784: PPUSH
51785: LD_VAR 0 8
51789: PPUSH
51790: LD_VAR 0 4
51794: PPUSH
51795: CALL_OW 380
// un := CreateHuman ;
51799: LD_ADDR_VAR 0 14
51803: PUSH
51804: CALL_OW 44
51808: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51809: LD_ADDR_VAR 0 7
51813: PUSH
51814: LD_VAR 0 7
51818: PPUSH
51819: LD_INT 1
51821: PPUSH
51822: LD_VAR 0 14
51826: PPUSH
51827: CALL_OW 2
51831: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51832: LD_VAR 0 14
51836: PPUSH
51837: LD_VAR 0 12
51841: PUSH
51842: LD_INT 1
51844: ARRAY
51845: PPUSH
51846: CALL_OW 52
// end ;
51850: GO 51485
51852: POP
51853: POP
// end ;
51854: GO 50785
51856: POP
51857: POP
// result := result ^ buildings ;
51858: LD_ADDR_VAR 0 7
51862: PUSH
51863: LD_VAR 0 7
51867: PUSH
51868: LD_VAR 0 18
51872: ADD
51873: ST_TO_ADDR
// end else
51874: GO 52017
// begin for i = 1 to personel do
51876: LD_ADDR_VAR 0 8
51880: PUSH
51881: DOUBLE
51882: LD_INT 1
51884: DEC
51885: ST_TO_ADDR
51886: LD_VAR 0 6
51890: PUSH
51891: FOR_TO
51892: IFFALSE 52015
// begin if i > 4 then
51894: LD_VAR 0 8
51898: PUSH
51899: LD_INT 4
51901: GREATER
51902: IFFALSE 51906
// break ;
51904: GO 52015
// x := personel [ i ] ;
51906: LD_ADDR_VAR 0 13
51910: PUSH
51911: LD_VAR 0 6
51915: PUSH
51916: LD_VAR 0 8
51920: ARRAY
51921: ST_TO_ADDR
// if x = - 1 then
51922: LD_VAR 0 13
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: EQUAL
51931: IFFALSE 51935
// continue ;
51933: GO 51891
// PrepareHuman ( false , i , skill ) ;
51935: LD_INT 0
51937: PPUSH
51938: LD_VAR 0 8
51942: PPUSH
51943: LD_VAR 0 4
51947: PPUSH
51948: CALL_OW 380
// un := CreateHuman ;
51952: LD_ADDR_VAR 0 14
51956: PUSH
51957: CALL_OW 44
51961: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51962: LD_VAR 0 14
51966: PPUSH
51967: LD_VAR 0 1
51971: PPUSH
51972: CALL_OW 250
51976: PPUSH
51977: LD_VAR 0 1
51981: PPUSH
51982: CALL_OW 251
51986: PPUSH
51987: LD_INT 10
51989: PPUSH
51990: LD_INT 0
51992: PPUSH
51993: CALL_OW 50
// result := result ^ un ;
51997: LD_ADDR_VAR 0 7
52001: PUSH
52002: LD_VAR 0 7
52006: PUSH
52007: LD_VAR 0 14
52011: ADD
52012: ST_TO_ADDR
// end ;
52013: GO 51891
52015: POP
52016: POP
// end ; end ;
52017: LD_VAR 0 7
52021: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52022: LD_INT 0
52024: PPUSH
52025: PPUSH
52026: PPUSH
52027: PPUSH
52028: PPUSH
52029: PPUSH
52030: PPUSH
52031: PPUSH
52032: PPUSH
52033: PPUSH
52034: PPUSH
52035: PPUSH
52036: PPUSH
52037: PPUSH
52038: PPUSH
52039: PPUSH
// result := false ;
52040: LD_ADDR_VAR 0 3
52044: PUSH
52045: LD_INT 0
52047: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52048: LD_VAR 0 1
52052: NOT
52053: IFTRUE 52078
52055: PUSH
52056: LD_VAR 0 1
52060: PPUSH
52061: CALL_OW 266
52065: PUSH
52066: LD_INT 32
52068: PUSH
52069: LD_INT 33
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: IN
52076: NOT
52077: OR
52078: IFFALSE 52082
// exit ;
52080: GO 53217
// nat := GetNation ( tower ) ;
52082: LD_ADDR_VAR 0 12
52086: PUSH
52087: LD_VAR 0 1
52091: PPUSH
52092: CALL_OW 248
52096: ST_TO_ADDR
// side := GetSide ( tower ) ;
52097: LD_ADDR_VAR 0 16
52101: PUSH
52102: LD_VAR 0 1
52106: PPUSH
52107: CALL_OW 255
52111: ST_TO_ADDR
// x := GetX ( tower ) ;
52112: LD_ADDR_VAR 0 10
52116: PUSH
52117: LD_VAR 0 1
52121: PPUSH
52122: CALL_OW 250
52126: ST_TO_ADDR
// y := GetY ( tower ) ;
52127: LD_ADDR_VAR 0 11
52131: PUSH
52132: LD_VAR 0 1
52136: PPUSH
52137: CALL_OW 251
52141: ST_TO_ADDR
// if not x or not y then
52142: LD_VAR 0 10
52146: NOT
52147: IFTRUE 52156
52149: PUSH
52150: LD_VAR 0 11
52154: NOT
52155: OR
52156: IFFALSE 52160
// exit ;
52158: GO 53217
// weapon := 0 ;
52160: LD_ADDR_VAR 0 18
52164: PUSH
52165: LD_INT 0
52167: ST_TO_ADDR
// fac_list := [ ] ;
52168: LD_ADDR_VAR 0 17
52172: PUSH
52173: EMPTY
52174: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52175: LD_ADDR_VAR 0 6
52179: PUSH
52180: LD_VAR 0 1
52184: PPUSH
52185: CALL_OW 274
52189: PPUSH
52190: LD_VAR 0 2
52194: PPUSH
52195: LD_INT 0
52197: PPUSH
52198: CALL 49752 0 3
52202: PPUSH
52203: LD_INT 30
52205: PUSH
52206: LD_INT 3
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PPUSH
52213: CALL_OW 72
52217: ST_TO_ADDR
// if not factories then
52218: LD_VAR 0 6
52222: NOT
52223: IFFALSE 52227
// exit ;
52225: GO 53217
// for i in factories do
52227: LD_ADDR_VAR 0 8
52231: PUSH
52232: LD_VAR 0 6
52236: PUSH
52237: FOR_IN
52238: IFFALSE 52263
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52240: LD_ADDR_VAR 0 17
52244: PUSH
52245: LD_VAR 0 17
52249: PUSH
52250: LD_VAR 0 8
52254: PPUSH
52255: CALL_OW 478
52259: UNION
52260: ST_TO_ADDR
52261: GO 52237
52263: POP
52264: POP
// if not fac_list then
52265: LD_VAR 0 17
52269: NOT
52270: IFFALSE 52274
// exit ;
52272: GO 53217
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52274: LD_ADDR_VAR 0 5
52278: PUSH
52279: LD_INT 4
52281: PUSH
52282: LD_INT 5
52284: PUSH
52285: LD_INT 9
52287: PUSH
52288: LD_INT 10
52290: PUSH
52291: LD_INT 6
52293: PUSH
52294: LD_INT 7
52296: PUSH
52297: LD_INT 11
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 27
52311: PUSH
52312: LD_INT 28
52314: PUSH
52315: LD_INT 26
52317: PUSH
52318: LD_INT 30
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 43
52329: PUSH
52330: LD_INT 44
52332: PUSH
52333: LD_INT 46
52335: PUSH
52336: LD_INT 45
52338: PUSH
52339: LD_INT 47
52341: PUSH
52342: LD_INT 49
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: PUSH
52358: LD_VAR 0 12
52362: ARRAY
52363: ST_TO_ADDR
// list := list isect fac_list ;
52364: LD_ADDR_VAR 0 5
52368: PUSH
52369: LD_VAR 0 5
52373: PUSH
52374: LD_VAR 0 17
52378: ISECT
52379: ST_TO_ADDR
// if not list then
52380: LD_VAR 0 5
52384: NOT
52385: IFFALSE 52389
// exit ;
52387: GO 53217
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52389: LD_VAR 0 12
52393: PUSH
52394: LD_INT 3
52396: EQUAL
52397: IFFALSE 52409
52399: PUSH
52400: LD_INT 49
52402: PUSH
52403: LD_VAR 0 5
52407: IN
52408: AND
52409: IFFALSE 52429
52411: PUSH
52412: LD_INT 31
52414: PPUSH
52415: LD_VAR 0 16
52419: PPUSH
52420: CALL_OW 321
52424: PUSH
52425: LD_INT 2
52427: EQUAL
52428: AND
52429: IFFALSE 52489
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52431: LD_INT 22
52433: PUSH
52434: LD_VAR 0 16
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 35
52445: PUSH
52446: LD_INT 49
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 91
52455: PUSH
52456: LD_VAR 0 1
52460: PUSH
52461: LD_INT 10
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: LIST
52473: PPUSH
52474: CALL_OW 69
52478: NOT
52479: IFFALSE 52489
// weapon := ru_time_lapser ;
52481: LD_ADDR_VAR 0 18
52485: PUSH
52486: LD_INT 49
52488: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52489: LD_VAR 0 12
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: IN
52504: IFFALSE 52528
52506: PUSH
52507: LD_INT 11
52509: PUSH
52510: LD_VAR 0 5
52514: IN
52515: IFTRUE 52527
52517: PUSH
52518: LD_INT 30
52520: PUSH
52521: LD_VAR 0 5
52525: IN
52526: OR
52527: AND
52528: IFFALSE 52548
52530: PUSH
52531: LD_INT 6
52533: PPUSH
52534: LD_VAR 0 16
52538: PPUSH
52539: CALL_OW 321
52543: PUSH
52544: LD_INT 2
52546: EQUAL
52547: AND
52548: IFFALSE 52715
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52550: LD_INT 22
52552: PUSH
52553: LD_VAR 0 16
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: LD_INT 35
52567: PUSH
52568: LD_INT 11
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 35
52577: PUSH
52578: LD_INT 30
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 91
52592: PUSH
52593: LD_VAR 0 1
52597: PUSH
52598: LD_INT 18
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: LIST
52610: PPUSH
52611: CALL_OW 69
52615: NOT
52616: IFFALSE 52692
52618: PUSH
52619: LD_INT 22
52621: PUSH
52622: LD_VAR 0 16
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: LD_INT 30
52636: PUSH
52637: LD_INT 32
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 30
52646: PUSH
52647: LD_INT 33
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 91
52661: PUSH
52662: LD_VAR 0 1
52666: PUSH
52667: LD_INT 12
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: LIST
52679: PUSH
52680: EMPTY
52681: LIST
52682: PPUSH
52683: CALL_OW 69
52687: PUSH
52688: LD_INT 2
52690: GREATER
52691: AND
52692: IFFALSE 52715
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52694: LD_ADDR_VAR 0 18
52698: PUSH
52699: LD_INT 11
52701: PUSH
52702: LD_INT 30
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_VAR 0 12
52713: ARRAY
52714: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52715: LD_VAR 0 18
52719: NOT
52720: IFFALSE 52740
52722: PUSH
52723: LD_INT 40
52725: PPUSH
52726: LD_VAR 0 16
52730: PPUSH
52731: CALL_OW 321
52735: PUSH
52736: LD_INT 2
52738: EQUAL
52739: AND
52740: IFFALSE 52776
52742: PUSH
52743: LD_INT 7
52745: PUSH
52746: LD_VAR 0 5
52750: IN
52751: IFTRUE 52763
52753: PUSH
52754: LD_INT 28
52756: PUSH
52757: LD_VAR 0 5
52761: IN
52762: OR
52763: IFTRUE 52775
52765: PUSH
52766: LD_INT 45
52768: PUSH
52769: LD_VAR 0 5
52773: IN
52774: OR
52775: AND
52776: IFFALSE 53030
// begin hex := GetHexInfo ( x , y ) ;
52778: LD_ADDR_VAR 0 4
52782: PUSH
52783: LD_VAR 0 10
52787: PPUSH
52788: LD_VAR 0 11
52792: PPUSH
52793: CALL_OW 546
52797: ST_TO_ADDR
// if hex [ 1 ] then
52798: LD_VAR 0 4
52802: PUSH
52803: LD_INT 1
52805: ARRAY
52806: IFFALSE 52810
// exit ;
52808: GO 53217
// height := hex [ 2 ] ;
52810: LD_ADDR_VAR 0 15
52814: PUSH
52815: LD_VAR 0 4
52819: PUSH
52820: LD_INT 2
52822: ARRAY
52823: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52824: LD_ADDR_VAR 0 14
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 3
52837: PUSH
52838: LD_INT 5
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: ST_TO_ADDR
// for i in tmp do
52847: LD_ADDR_VAR 0 8
52851: PUSH
52852: LD_VAR 0 14
52856: PUSH
52857: FOR_IN
52858: IFFALSE 53028
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52860: LD_ADDR_VAR 0 9
52864: PUSH
52865: LD_VAR 0 10
52869: PPUSH
52870: LD_VAR 0 8
52874: PPUSH
52875: LD_INT 5
52877: PPUSH
52878: CALL_OW 272
52882: PUSH
52883: LD_VAR 0 11
52887: PPUSH
52888: LD_VAR 0 8
52892: PPUSH
52893: LD_INT 5
52895: PPUSH
52896: CALL_OW 273
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52905: LD_VAR 0 9
52909: PUSH
52910: LD_INT 1
52912: ARRAY
52913: PPUSH
52914: LD_VAR 0 9
52918: PUSH
52919: LD_INT 2
52921: ARRAY
52922: PPUSH
52923: CALL_OW 488
52927: IFFALSE 53026
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52929: LD_ADDR_VAR 0 4
52933: PUSH
52934: LD_VAR 0 9
52938: PUSH
52939: LD_INT 1
52941: ARRAY
52942: PPUSH
52943: LD_VAR 0 9
52947: PUSH
52948: LD_INT 2
52950: ARRAY
52951: PPUSH
52952: CALL_OW 546
52956: ST_TO_ADDR
// if hex [ 1 ] then
52957: LD_VAR 0 4
52961: PUSH
52962: LD_INT 1
52964: ARRAY
52965: IFFALSE 52969
// continue ;
52967: GO 52857
// h := hex [ 2 ] ;
52969: LD_ADDR_VAR 0 13
52973: PUSH
52974: LD_VAR 0 4
52978: PUSH
52979: LD_INT 2
52981: ARRAY
52982: ST_TO_ADDR
// if h + 7 < height then
52983: LD_VAR 0 13
52987: PUSH
52988: LD_INT 7
52990: PLUS
52991: PUSH
52992: LD_VAR 0 15
52996: LESS
52997: IFFALSE 53026
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52999: LD_ADDR_VAR 0 18
53003: PUSH
53004: LD_INT 7
53006: PUSH
53007: LD_INT 28
53009: PUSH
53010: LD_INT 45
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: PUSH
53018: LD_VAR 0 12
53022: ARRAY
53023: ST_TO_ADDR
// break ;
53024: GO 53028
// end ; end ; end ;
53026: GO 52857
53028: POP
53029: POP
// end ; if not weapon then
53030: LD_VAR 0 18
53034: NOT
53035: IFFALSE 53095
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53037: LD_ADDR_VAR 0 5
53041: PUSH
53042: LD_VAR 0 5
53046: PUSH
53047: LD_INT 11
53049: PUSH
53050: LD_INT 30
53052: PUSH
53053: LD_INT 49
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: LIST
53060: DIFF
53061: ST_TO_ADDR
// if not list then
53062: LD_VAR 0 5
53066: NOT
53067: IFFALSE 53071
// exit ;
53069: GO 53217
// weapon := list [ rand ( 1 , list ) ] ;
53071: LD_ADDR_VAR 0 18
53075: PUSH
53076: LD_VAR 0 5
53080: PUSH
53081: LD_INT 1
53083: PPUSH
53084: LD_VAR 0 5
53088: PPUSH
53089: CALL_OW 12
53093: ARRAY
53094: ST_TO_ADDR
// end ; if weapon then
53095: LD_VAR 0 18
53099: IFFALSE 53217
// begin tmp := CostOfWeapon ( weapon ) ;
53101: LD_ADDR_VAR 0 14
53105: PUSH
53106: LD_VAR 0 18
53110: PPUSH
53111: CALL_OW 451
53115: ST_TO_ADDR
// j := GetBase ( tower ) ;
53116: LD_ADDR_VAR 0 9
53120: PUSH
53121: LD_VAR 0 1
53125: PPUSH
53126: CALL_OW 274
53130: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53131: LD_VAR 0 9
53135: PPUSH
53136: LD_INT 1
53138: PPUSH
53139: CALL_OW 275
53143: PUSH
53144: LD_VAR 0 14
53148: PUSH
53149: LD_INT 1
53151: ARRAY
53152: GREATEREQUAL
53153: IFFALSE 53179
53155: PUSH
53156: LD_VAR 0 9
53160: PPUSH
53161: LD_INT 2
53163: PPUSH
53164: CALL_OW 275
53168: PUSH
53169: LD_VAR 0 14
53173: PUSH
53174: LD_INT 2
53176: ARRAY
53177: GREATEREQUAL
53178: AND
53179: IFFALSE 53205
53181: PUSH
53182: LD_VAR 0 9
53186: PPUSH
53187: LD_INT 3
53189: PPUSH
53190: CALL_OW 275
53194: PUSH
53195: LD_VAR 0 14
53199: PUSH
53200: LD_INT 3
53202: ARRAY
53203: GREATEREQUAL
53204: AND
53205: IFFALSE 53217
// result := weapon ;
53207: LD_ADDR_VAR 0 3
53211: PUSH
53212: LD_VAR 0 18
53216: ST_TO_ADDR
// end ; end ;
53217: LD_VAR 0 3
53221: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53222: LD_INT 0
53224: PPUSH
53225: PPUSH
// result := true ;
53226: LD_ADDR_VAR 0 3
53230: PUSH
53231: LD_INT 1
53233: ST_TO_ADDR
// if array1 = array2 then
53234: LD_VAR 0 1
53238: PUSH
53239: LD_VAR 0 2
53243: EQUAL
53244: IFFALSE 53304
// begin for i = 1 to array1 do
53246: LD_ADDR_VAR 0 4
53250: PUSH
53251: DOUBLE
53252: LD_INT 1
53254: DEC
53255: ST_TO_ADDR
53256: LD_VAR 0 1
53260: PUSH
53261: FOR_TO
53262: IFFALSE 53300
// if array1 [ i ] <> array2 [ i ] then
53264: LD_VAR 0 1
53268: PUSH
53269: LD_VAR 0 4
53273: ARRAY
53274: PUSH
53275: LD_VAR 0 2
53279: PUSH
53280: LD_VAR 0 4
53284: ARRAY
53285: NONEQUAL
53286: IFFALSE 53298
// begin result := false ;
53288: LD_ADDR_VAR 0 3
53292: PUSH
53293: LD_INT 0
53295: ST_TO_ADDR
// break ;
53296: GO 53300
// end ;
53298: GO 53261
53300: POP
53301: POP
// end else
53302: GO 53312
// result := false ;
53304: LD_ADDR_VAR 0 3
53308: PUSH
53309: LD_INT 0
53311: ST_TO_ADDR
// end ;
53312: LD_VAR 0 3
53316: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53317: LD_INT 0
53319: PPUSH
53320: PPUSH
// if not array1 or not array2 then
53321: LD_VAR 0 1
53325: NOT
53326: IFTRUE 53335
53328: PUSH
53329: LD_VAR 0 2
53333: NOT
53334: OR
53335: IFFALSE 53339
// exit ;
53337: GO 53403
// result := true ;
53339: LD_ADDR_VAR 0 3
53343: PUSH
53344: LD_INT 1
53346: ST_TO_ADDR
// for i = 1 to array1 do
53347: LD_ADDR_VAR 0 4
53351: PUSH
53352: DOUBLE
53353: LD_INT 1
53355: DEC
53356: ST_TO_ADDR
53357: LD_VAR 0 1
53361: PUSH
53362: FOR_TO
53363: IFFALSE 53401
// if array1 [ i ] <> array2 [ i ] then
53365: LD_VAR 0 1
53369: PUSH
53370: LD_VAR 0 4
53374: ARRAY
53375: PUSH
53376: LD_VAR 0 2
53380: PUSH
53381: LD_VAR 0 4
53385: ARRAY
53386: NONEQUAL
53387: IFFALSE 53399
// begin result := false ;
53389: LD_ADDR_VAR 0 3
53393: PUSH
53394: LD_INT 0
53396: ST_TO_ADDR
// break ;
53397: GO 53401
// end ;
53399: GO 53362
53401: POP
53402: POP
// end ;
53403: LD_VAR 0 3
53407: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53408: LD_INT 0
53410: PPUSH
53411: PPUSH
53412: PPUSH
// pom := GetBase ( fac ) ;
53413: LD_ADDR_VAR 0 5
53417: PUSH
53418: LD_VAR 0 1
53422: PPUSH
53423: CALL_OW 274
53427: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53428: LD_ADDR_VAR 0 4
53432: PUSH
53433: LD_VAR 0 2
53437: PUSH
53438: LD_INT 1
53440: ARRAY
53441: PPUSH
53442: LD_VAR 0 2
53446: PUSH
53447: LD_INT 2
53449: ARRAY
53450: PPUSH
53451: LD_VAR 0 2
53455: PUSH
53456: LD_INT 3
53458: ARRAY
53459: PPUSH
53460: LD_VAR 0 2
53464: PUSH
53465: LD_INT 4
53467: ARRAY
53468: PPUSH
53469: CALL_OW 449
53473: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53474: LD_ADDR_VAR 0 3
53478: PUSH
53479: LD_VAR 0 5
53483: PPUSH
53484: LD_INT 1
53486: PPUSH
53487: CALL_OW 275
53491: PUSH
53492: LD_VAR 0 4
53496: PUSH
53497: LD_INT 1
53499: ARRAY
53500: GREATEREQUAL
53501: IFFALSE 53527
53503: PUSH
53504: LD_VAR 0 5
53508: PPUSH
53509: LD_INT 2
53511: PPUSH
53512: CALL_OW 275
53516: PUSH
53517: LD_VAR 0 4
53521: PUSH
53522: LD_INT 2
53524: ARRAY
53525: GREATEREQUAL
53526: AND
53527: IFFALSE 53553
53529: PUSH
53530: LD_VAR 0 5
53534: PPUSH
53535: LD_INT 3
53537: PPUSH
53538: CALL_OW 275
53542: PUSH
53543: LD_VAR 0 4
53547: PUSH
53548: LD_INT 3
53550: ARRAY
53551: GREATEREQUAL
53552: AND
53553: ST_TO_ADDR
// end ;
53554: LD_VAR 0 3
53558: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53559: LD_INT 0
53561: PPUSH
53562: PPUSH
53563: PPUSH
53564: PPUSH
// pom := GetBase ( building ) ;
53565: LD_ADDR_VAR 0 3
53569: PUSH
53570: LD_VAR 0 1
53574: PPUSH
53575: CALL_OW 274
53579: ST_TO_ADDR
// if not pom then
53580: LD_VAR 0 3
53584: NOT
53585: IFFALSE 53589
// exit ;
53587: GO 53763
// btype := GetBType ( building ) ;
53589: LD_ADDR_VAR 0 5
53593: PUSH
53594: LD_VAR 0 1
53598: PPUSH
53599: CALL_OW 266
53603: ST_TO_ADDR
// if btype = b_armoury then
53604: LD_VAR 0 5
53608: PUSH
53609: LD_INT 4
53611: EQUAL
53612: IFFALSE 53622
// btype := b_barracks ;
53614: LD_ADDR_VAR 0 5
53618: PUSH
53619: LD_INT 5
53621: ST_TO_ADDR
// if btype = b_depot then
53622: LD_VAR 0 5
53626: PUSH
53627: LD_INT 0
53629: EQUAL
53630: IFFALSE 53640
// btype := b_warehouse ;
53632: LD_ADDR_VAR 0 5
53636: PUSH
53637: LD_INT 1
53639: ST_TO_ADDR
// if btype = b_workshop then
53640: LD_VAR 0 5
53644: PUSH
53645: LD_INT 2
53647: EQUAL
53648: IFFALSE 53658
// btype := b_factory ;
53650: LD_ADDR_VAR 0 5
53654: PUSH
53655: LD_INT 3
53657: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53658: LD_ADDR_VAR 0 4
53662: PUSH
53663: LD_VAR 0 5
53667: PPUSH
53668: LD_VAR 0 1
53672: PPUSH
53673: CALL_OW 248
53677: PPUSH
53678: CALL_OW 450
53682: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53683: LD_ADDR_VAR 0 2
53687: PUSH
53688: LD_VAR 0 3
53692: PPUSH
53693: LD_INT 1
53695: PPUSH
53696: CALL_OW 275
53700: PUSH
53701: LD_VAR 0 4
53705: PUSH
53706: LD_INT 1
53708: ARRAY
53709: GREATEREQUAL
53710: IFFALSE 53736
53712: PUSH
53713: LD_VAR 0 3
53717: PPUSH
53718: LD_INT 2
53720: PPUSH
53721: CALL_OW 275
53725: PUSH
53726: LD_VAR 0 4
53730: PUSH
53731: LD_INT 2
53733: ARRAY
53734: GREATEREQUAL
53735: AND
53736: IFFALSE 53762
53738: PUSH
53739: LD_VAR 0 3
53743: PPUSH
53744: LD_INT 3
53746: PPUSH
53747: CALL_OW 275
53751: PUSH
53752: LD_VAR 0 4
53756: PUSH
53757: LD_INT 3
53759: ARRAY
53760: GREATEREQUAL
53761: AND
53762: ST_TO_ADDR
// end ;
53763: LD_VAR 0 2
53767: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53768: LD_INT 0
53770: PPUSH
53771: PPUSH
53772: PPUSH
// pom := GetBase ( building ) ;
53773: LD_ADDR_VAR 0 4
53777: PUSH
53778: LD_VAR 0 1
53782: PPUSH
53783: CALL_OW 274
53787: ST_TO_ADDR
// if not pom then
53788: LD_VAR 0 4
53792: NOT
53793: IFFALSE 53797
// exit ;
53795: GO 53902
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53797: LD_ADDR_VAR 0 5
53801: PUSH
53802: LD_VAR 0 2
53806: PPUSH
53807: LD_VAR 0 1
53811: PPUSH
53812: CALL_OW 248
53816: PPUSH
53817: CALL_OW 450
53821: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53822: LD_ADDR_VAR 0 3
53826: PUSH
53827: LD_VAR 0 4
53831: PPUSH
53832: LD_INT 1
53834: PPUSH
53835: CALL_OW 275
53839: PUSH
53840: LD_VAR 0 5
53844: PUSH
53845: LD_INT 1
53847: ARRAY
53848: GREATEREQUAL
53849: IFFALSE 53875
53851: PUSH
53852: LD_VAR 0 4
53856: PPUSH
53857: LD_INT 2
53859: PPUSH
53860: CALL_OW 275
53864: PUSH
53865: LD_VAR 0 5
53869: PUSH
53870: LD_INT 2
53872: ARRAY
53873: GREATEREQUAL
53874: AND
53875: IFFALSE 53901
53877: PUSH
53878: LD_VAR 0 4
53882: PPUSH
53883: LD_INT 3
53885: PPUSH
53886: CALL_OW 275
53890: PUSH
53891: LD_VAR 0 5
53895: PUSH
53896: LD_INT 3
53898: ARRAY
53899: GREATEREQUAL
53900: AND
53901: ST_TO_ADDR
// end ;
53902: LD_VAR 0 3
53906: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53907: LD_INT 0
53909: PPUSH
53910: PPUSH
53911: PPUSH
53912: PPUSH
53913: PPUSH
53914: PPUSH
53915: PPUSH
53916: PPUSH
53917: PPUSH
53918: PPUSH
53919: PPUSH
// result := false ;
53920: LD_ADDR_VAR 0 8
53924: PUSH
53925: LD_INT 0
53927: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53928: LD_VAR 0 5
53932: NOT
53933: IFTRUE 53942
53935: PUSH
53936: LD_VAR 0 1
53940: NOT
53941: OR
53942: IFTRUE 53951
53944: PUSH
53945: LD_VAR 0 2
53949: NOT
53950: OR
53951: IFTRUE 53960
53953: PUSH
53954: LD_VAR 0 3
53958: NOT
53959: OR
53960: IFFALSE 53964
// exit ;
53962: GO 54790
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53964: LD_ADDR_VAR 0 14
53968: PUSH
53969: LD_VAR 0 1
53973: PPUSH
53974: LD_VAR 0 2
53978: PPUSH
53979: LD_VAR 0 3
53983: PPUSH
53984: LD_VAR 0 4
53988: PPUSH
53989: LD_VAR 0 5
53993: PUSH
53994: LD_INT 1
53996: ARRAY
53997: PPUSH
53998: CALL_OW 248
54002: PPUSH
54003: LD_INT 0
54005: PPUSH
54006: CALL 56071 0 6
54010: ST_TO_ADDR
// if not hexes then
54011: LD_VAR 0 14
54015: NOT
54016: IFFALSE 54020
// exit ;
54018: GO 54790
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54020: LD_ADDR_VAR 0 17
54024: PUSH
54025: LD_VAR 0 5
54029: PPUSH
54030: LD_INT 22
54032: PUSH
54033: LD_VAR 0 13
54037: PPUSH
54038: CALL_OW 255
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: LD_INT 30
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 30
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PPUSH
54079: CALL_OW 72
54083: ST_TO_ADDR
// for i = 1 to hexes do
54084: LD_ADDR_VAR 0 9
54088: PUSH
54089: DOUBLE
54090: LD_INT 1
54092: DEC
54093: ST_TO_ADDR
54094: LD_VAR 0 14
54098: PUSH
54099: FOR_TO
54100: IFFALSE 54788
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54102: LD_ADDR_VAR 0 13
54106: PUSH
54107: LD_VAR 0 14
54111: PUSH
54112: LD_VAR 0 9
54116: ARRAY
54117: PUSH
54118: LD_INT 1
54120: ARRAY
54121: PPUSH
54122: LD_VAR 0 14
54126: PUSH
54127: LD_VAR 0 9
54131: ARRAY
54132: PUSH
54133: LD_INT 2
54135: ARRAY
54136: PPUSH
54137: CALL_OW 428
54141: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54142: LD_VAR 0 14
54146: PUSH
54147: LD_VAR 0 9
54151: ARRAY
54152: PUSH
54153: LD_INT 1
54155: ARRAY
54156: PPUSH
54157: LD_VAR 0 14
54161: PUSH
54162: LD_VAR 0 9
54166: ARRAY
54167: PUSH
54168: LD_INT 2
54170: ARRAY
54171: PPUSH
54172: CALL_OW 351
54176: IFTRUE 54215
54178: PUSH
54179: LD_VAR 0 14
54183: PUSH
54184: LD_VAR 0 9
54188: ARRAY
54189: PUSH
54190: LD_INT 1
54192: ARRAY
54193: PPUSH
54194: LD_VAR 0 14
54198: PUSH
54199: LD_VAR 0 9
54203: ARRAY
54204: PUSH
54205: LD_INT 2
54207: ARRAY
54208: PPUSH
54209: CALL_OW 488
54213: NOT
54214: OR
54215: IFTRUE 54232
54217: PUSH
54218: LD_VAR 0 13
54222: PPUSH
54223: CALL_OW 247
54227: PUSH
54228: LD_INT 3
54230: EQUAL
54231: OR
54232: IFFALSE 54238
// exit ;
54234: POP
54235: POP
54236: GO 54790
// if not tmp then
54238: LD_VAR 0 13
54242: NOT
54243: IFFALSE 54247
// continue ;
54245: GO 54099
// result := true ;
54247: LD_ADDR_VAR 0 8
54251: PUSH
54252: LD_INT 1
54254: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54255: LD_VAR 0 6
54259: IFFALSE 54276
54261: PUSH
54262: LD_VAR 0 13
54266: PPUSH
54267: CALL_OW 247
54271: PUSH
54272: LD_INT 2
54274: EQUAL
54275: AND
54276: IFFALSE 54293
54278: PUSH
54279: LD_VAR 0 13
54283: PPUSH
54284: CALL_OW 263
54288: PUSH
54289: LD_INT 1
54291: EQUAL
54292: AND
54293: IFFALSE 54457
// begin if IsDrivenBy ( tmp ) then
54295: LD_VAR 0 13
54299: PPUSH
54300: CALL_OW 311
54304: IFFALSE 54308
// continue ;
54306: GO 54099
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54308: LD_VAR 0 6
54312: PPUSH
54313: LD_INT 3
54315: PUSH
54316: LD_INT 60
54318: PUSH
54319: EMPTY
54320: LIST
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: LD_INT 55
54331: PUSH
54332: EMPTY
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PPUSH
54343: CALL_OW 72
54347: IFFALSE 54455
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54349: LD_ADDR_VAR 0 18
54353: PUSH
54354: LD_VAR 0 6
54358: PPUSH
54359: LD_INT 3
54361: PUSH
54362: LD_INT 60
54364: PUSH
54365: EMPTY
54366: LIST
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 3
54374: PUSH
54375: LD_INT 55
54377: PUSH
54378: EMPTY
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PPUSH
54389: CALL_OW 72
54393: PUSH
54394: LD_INT 1
54396: ARRAY
54397: ST_TO_ADDR
// if IsInUnit ( driver ) then
54398: LD_VAR 0 18
54402: PPUSH
54403: CALL_OW 310
54407: IFFALSE 54418
// ComExit ( driver ) ;
54409: LD_VAR 0 18
54413: PPUSH
54414: CALL 80071 0 1
// AddComEnterUnit ( driver , tmp ) ;
54418: LD_VAR 0 18
54422: PPUSH
54423: LD_VAR 0 13
54427: PPUSH
54428: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54432: LD_VAR 0 18
54436: PPUSH
54437: LD_VAR 0 7
54441: PPUSH
54442: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54446: LD_VAR 0 18
54450: PPUSH
54451: CALL_OW 181
// end ; continue ;
54455: GO 54099
// end ; if not cleaners or not tmp in cleaners then
54457: LD_VAR 0 6
54461: NOT
54462: IFTRUE 54477
54464: PUSH
54465: LD_VAR 0 13
54469: PUSH
54470: LD_VAR 0 6
54474: IN
54475: NOT
54476: OR
54477: IFFALSE 54786
// begin if dep then
54479: LD_VAR 0 17
54483: IFFALSE 54619
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54485: LD_ADDR_VAR 0 16
54489: PUSH
54490: LD_VAR 0 17
54494: PUSH
54495: LD_INT 1
54497: ARRAY
54498: PPUSH
54499: CALL_OW 250
54503: PPUSH
54504: LD_VAR 0 17
54508: PUSH
54509: LD_INT 1
54511: ARRAY
54512: PPUSH
54513: CALL_OW 254
54517: PPUSH
54518: LD_INT 5
54520: PPUSH
54521: CALL_OW 272
54525: PUSH
54526: LD_VAR 0 17
54530: PUSH
54531: LD_INT 1
54533: ARRAY
54534: PPUSH
54535: CALL_OW 251
54539: PPUSH
54540: LD_VAR 0 17
54544: PUSH
54545: LD_INT 1
54547: ARRAY
54548: PPUSH
54549: CALL_OW 254
54553: PPUSH
54554: LD_INT 5
54556: PPUSH
54557: CALL_OW 273
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54566: LD_VAR 0 16
54570: PUSH
54571: LD_INT 1
54573: ARRAY
54574: PPUSH
54575: LD_VAR 0 16
54579: PUSH
54580: LD_INT 2
54582: ARRAY
54583: PPUSH
54584: CALL_OW 488
54588: IFFALSE 54619
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54590: LD_VAR 0 13
54594: PPUSH
54595: LD_VAR 0 16
54599: PUSH
54600: LD_INT 1
54602: ARRAY
54603: PPUSH
54604: LD_VAR 0 16
54608: PUSH
54609: LD_INT 2
54611: ARRAY
54612: PPUSH
54613: CALL_OW 111
// continue ;
54617: GO 54099
// end ; end ; r := GetDir ( tmp ) ;
54619: LD_ADDR_VAR 0 15
54623: PUSH
54624: LD_VAR 0 13
54628: PPUSH
54629: CALL_OW 254
54633: ST_TO_ADDR
// if r = 5 then
54634: LD_VAR 0 15
54638: PUSH
54639: LD_INT 5
54641: EQUAL
54642: IFFALSE 54652
// r := 0 ;
54644: LD_ADDR_VAR 0 15
54648: PUSH
54649: LD_INT 0
54651: ST_TO_ADDR
// for j = r to 5 do
54652: LD_ADDR_VAR 0 10
54656: PUSH
54657: DOUBLE
54658: LD_VAR 0 15
54662: DEC
54663: ST_TO_ADDR
54664: LD_INT 5
54666: PUSH
54667: FOR_TO
54668: IFFALSE 54784
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54670: LD_ADDR_VAR 0 11
54674: PUSH
54675: LD_VAR 0 13
54679: PPUSH
54680: CALL_OW 250
54684: PPUSH
54685: LD_VAR 0 10
54689: PPUSH
54690: LD_INT 2
54692: PPUSH
54693: CALL_OW 272
54697: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54698: LD_ADDR_VAR 0 12
54702: PUSH
54703: LD_VAR 0 13
54707: PPUSH
54708: CALL_OW 251
54712: PPUSH
54713: LD_VAR 0 10
54717: PPUSH
54718: LD_INT 2
54720: PPUSH
54721: CALL_OW 273
54725: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54726: LD_VAR 0 11
54730: PPUSH
54731: LD_VAR 0 12
54735: PPUSH
54736: CALL_OW 488
54740: IFFALSE 54759
54742: PUSH
54743: LD_VAR 0 11
54747: PPUSH
54748: LD_VAR 0 12
54752: PPUSH
54753: CALL_OW 428
54757: NOT
54758: AND
54759: IFFALSE 54782
// begin ComMoveXY ( tmp , _x , _y ) ;
54761: LD_VAR 0 13
54765: PPUSH
54766: LD_VAR 0 11
54770: PPUSH
54771: LD_VAR 0 12
54775: PPUSH
54776: CALL_OW 111
// break ;
54780: GO 54784
// end ; end ;
54782: GO 54667
54784: POP
54785: POP
// end ; end ;
54786: GO 54099
54788: POP
54789: POP
// end ;
54790: LD_VAR 0 8
54794: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54795: LD_INT 0
54797: PPUSH
// result := true ;
54798: LD_ADDR_VAR 0 3
54802: PUSH
54803: LD_INT 1
54805: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54806: LD_VAR 0 2
54810: PUSH
54811: LD_INT 24
54813: DOUBLE
54814: EQUAL
54815: IFTRUE 54825
54817: LD_INT 33
54819: DOUBLE
54820: EQUAL
54821: IFTRUE 54825
54823: GO 54850
54825: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54826: LD_ADDR_VAR 0 3
54830: PUSH
54831: LD_INT 32
54833: PPUSH
54834: LD_VAR 0 1
54838: PPUSH
54839: CALL_OW 321
54843: PUSH
54844: LD_INT 2
54846: EQUAL
54847: ST_TO_ADDR
54848: GO 55166
54850: LD_INT 20
54852: DOUBLE
54853: EQUAL
54854: IFTRUE 54858
54856: GO 54883
54858: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54859: LD_ADDR_VAR 0 3
54863: PUSH
54864: LD_INT 6
54866: PPUSH
54867: LD_VAR 0 1
54871: PPUSH
54872: CALL_OW 321
54876: PUSH
54877: LD_INT 2
54879: EQUAL
54880: ST_TO_ADDR
54881: GO 55166
54883: LD_INT 22
54885: DOUBLE
54886: EQUAL
54887: IFTRUE 54897
54889: LD_INT 36
54891: DOUBLE
54892: EQUAL
54893: IFTRUE 54897
54895: GO 54922
54897: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54898: LD_ADDR_VAR 0 3
54902: PUSH
54903: LD_INT 15
54905: PPUSH
54906: LD_VAR 0 1
54910: PPUSH
54911: CALL_OW 321
54915: PUSH
54916: LD_INT 2
54918: EQUAL
54919: ST_TO_ADDR
54920: GO 55166
54922: LD_INT 30
54924: DOUBLE
54925: EQUAL
54926: IFTRUE 54930
54928: GO 54955
54930: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54931: LD_ADDR_VAR 0 3
54935: PUSH
54936: LD_INT 20
54938: PPUSH
54939: LD_VAR 0 1
54943: PPUSH
54944: CALL_OW 321
54948: PUSH
54949: LD_INT 2
54951: EQUAL
54952: ST_TO_ADDR
54953: GO 55166
54955: LD_INT 28
54957: DOUBLE
54958: EQUAL
54959: IFTRUE 54969
54961: LD_INT 21
54963: DOUBLE
54964: EQUAL
54965: IFTRUE 54969
54967: GO 54994
54969: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54970: LD_ADDR_VAR 0 3
54974: PUSH
54975: LD_INT 21
54977: PPUSH
54978: LD_VAR 0 1
54982: PPUSH
54983: CALL_OW 321
54987: PUSH
54988: LD_INT 2
54990: EQUAL
54991: ST_TO_ADDR
54992: GO 55166
54994: LD_INT 16
54996: DOUBLE
54997: EQUAL
54998: IFTRUE 55002
55000: GO 55027
55002: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55003: LD_ADDR_VAR 0 3
55007: PUSH
55008: LD_INT 84
55010: PPUSH
55011: LD_VAR 0 1
55015: PPUSH
55016: CALL_OW 321
55020: PUSH
55021: LD_INT 2
55023: EQUAL
55024: ST_TO_ADDR
55025: GO 55166
55027: LD_INT 19
55029: DOUBLE
55030: EQUAL
55031: IFTRUE 55041
55033: LD_INT 23
55035: DOUBLE
55036: EQUAL
55037: IFTRUE 55041
55039: GO 55066
55041: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55042: LD_ADDR_VAR 0 3
55046: PUSH
55047: LD_INT 83
55049: PPUSH
55050: LD_VAR 0 1
55054: PPUSH
55055: CALL_OW 321
55059: PUSH
55060: LD_INT 2
55062: EQUAL
55063: ST_TO_ADDR
55064: GO 55166
55066: LD_INT 17
55068: DOUBLE
55069: EQUAL
55070: IFTRUE 55074
55072: GO 55099
55074: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55075: LD_ADDR_VAR 0 3
55079: PUSH
55080: LD_INT 39
55082: PPUSH
55083: LD_VAR 0 1
55087: PPUSH
55088: CALL_OW 321
55092: PUSH
55093: LD_INT 2
55095: EQUAL
55096: ST_TO_ADDR
55097: GO 55166
55099: LD_INT 18
55101: DOUBLE
55102: EQUAL
55103: IFTRUE 55107
55105: GO 55132
55107: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55108: LD_ADDR_VAR 0 3
55112: PUSH
55113: LD_INT 40
55115: PPUSH
55116: LD_VAR 0 1
55120: PPUSH
55121: CALL_OW 321
55125: PUSH
55126: LD_INT 2
55128: EQUAL
55129: ST_TO_ADDR
55130: GO 55166
55132: LD_INT 27
55134: DOUBLE
55135: EQUAL
55136: IFTRUE 55140
55138: GO 55165
55140: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55141: LD_ADDR_VAR 0 3
55145: PUSH
55146: LD_INT 35
55148: PPUSH
55149: LD_VAR 0 1
55153: PPUSH
55154: CALL_OW 321
55158: PUSH
55159: LD_INT 2
55161: EQUAL
55162: ST_TO_ADDR
55163: GO 55166
55165: POP
// end ;
55166: LD_VAR 0 3
55170: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55171: LD_INT 0
55173: PPUSH
55174: PPUSH
55175: PPUSH
55176: PPUSH
55177: PPUSH
55178: PPUSH
55179: PPUSH
55180: PPUSH
55181: PPUSH
55182: PPUSH
55183: PPUSH
// result := false ;
55184: LD_ADDR_VAR 0 6
55188: PUSH
55189: LD_INT 0
55191: ST_TO_ADDR
// if btype = b_depot then
55192: LD_VAR 0 2
55196: PUSH
55197: LD_INT 0
55199: EQUAL
55200: IFFALSE 55212
// begin result := true ;
55202: LD_ADDR_VAR 0 6
55206: PUSH
55207: LD_INT 1
55209: ST_TO_ADDR
// exit ;
55210: GO 56066
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55212: LD_VAR 0 1
55216: NOT
55217: IFTRUE 55242
55219: PUSH
55220: LD_VAR 0 1
55224: PPUSH
55225: CALL_OW 266
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: IN
55240: NOT
55241: OR
55242: IFTRUE 55251
55244: PUSH
55245: LD_VAR 0 2
55249: NOT
55250: OR
55251: IFTRUE 55287
55253: PUSH
55254: LD_VAR 0 5
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: LD_INT 3
55270: PUSH
55271: LD_INT 4
55273: PUSH
55274: LD_INT 5
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: IN
55285: NOT
55286: OR
55287: IFTRUE 55306
55289: PUSH
55290: LD_VAR 0 3
55294: PPUSH
55295: LD_VAR 0 4
55299: PPUSH
55300: CALL_OW 488
55304: NOT
55305: OR
55306: IFFALSE 55310
// exit ;
55308: GO 56066
// side := GetSide ( depot ) ;
55310: LD_ADDR_VAR 0 9
55314: PUSH
55315: LD_VAR 0 1
55319: PPUSH
55320: CALL_OW 255
55324: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55325: LD_VAR 0 9
55329: PPUSH
55330: LD_VAR 0 2
55334: PPUSH
55335: CALL 54795 0 2
55339: NOT
55340: IFFALSE 55344
// exit ;
55342: GO 56066
// pom := GetBase ( depot ) ;
55344: LD_ADDR_VAR 0 10
55348: PUSH
55349: LD_VAR 0 1
55353: PPUSH
55354: CALL_OW 274
55358: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55359: LD_ADDR_VAR 0 11
55363: PUSH
55364: LD_VAR 0 2
55368: PPUSH
55369: LD_VAR 0 1
55373: PPUSH
55374: CALL_OW 248
55378: PPUSH
55379: CALL_OW 450
55383: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55384: LD_VAR 0 10
55388: PPUSH
55389: LD_INT 1
55391: PPUSH
55392: CALL_OW 275
55396: PUSH
55397: LD_VAR 0 11
55401: PUSH
55402: LD_INT 1
55404: ARRAY
55405: GREATEREQUAL
55406: IFFALSE 55432
55408: PUSH
55409: LD_VAR 0 10
55413: PPUSH
55414: LD_INT 2
55416: PPUSH
55417: CALL_OW 275
55421: PUSH
55422: LD_VAR 0 11
55426: PUSH
55427: LD_INT 2
55429: ARRAY
55430: GREATEREQUAL
55431: AND
55432: IFFALSE 55458
55434: PUSH
55435: LD_VAR 0 10
55439: PPUSH
55440: LD_INT 3
55442: PPUSH
55443: CALL_OW 275
55447: PUSH
55448: LD_VAR 0 11
55452: PUSH
55453: LD_INT 3
55455: ARRAY
55456: GREATEREQUAL
55457: AND
55458: NOT
55459: IFFALSE 55463
// exit ;
55461: GO 56066
// if GetBType ( depot ) = b_depot then
55463: LD_VAR 0 1
55467: PPUSH
55468: CALL_OW 266
55472: PUSH
55473: LD_INT 0
55475: EQUAL
55476: IFFALSE 55488
// dist := 28 else
55478: LD_ADDR_VAR 0 14
55482: PUSH
55483: LD_INT 28
55485: ST_TO_ADDR
55486: GO 55496
// dist := 36 ;
55488: LD_ADDR_VAR 0 14
55492: PUSH
55493: LD_INT 36
55495: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55496: LD_VAR 0 1
55500: PPUSH
55501: LD_VAR 0 3
55505: PPUSH
55506: LD_VAR 0 4
55510: PPUSH
55511: CALL_OW 297
55515: PUSH
55516: LD_VAR 0 14
55520: GREATER
55521: IFFALSE 55525
// exit ;
55523: GO 56066
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55525: LD_ADDR_VAR 0 12
55529: PUSH
55530: LD_VAR 0 2
55534: PPUSH
55535: LD_VAR 0 3
55539: PPUSH
55540: LD_VAR 0 4
55544: PPUSH
55545: LD_VAR 0 5
55549: PPUSH
55550: LD_VAR 0 1
55554: PPUSH
55555: CALL_OW 248
55559: PPUSH
55560: LD_INT 0
55562: PPUSH
55563: CALL 56071 0 6
55567: ST_TO_ADDR
// if not hexes then
55568: LD_VAR 0 12
55572: NOT
55573: IFFALSE 55577
// exit ;
55575: GO 56066
// hex := GetHexInfo ( x , y ) ;
55577: LD_ADDR_VAR 0 15
55581: PUSH
55582: LD_VAR 0 3
55586: PPUSH
55587: LD_VAR 0 4
55591: PPUSH
55592: CALL_OW 546
55596: ST_TO_ADDR
// if hex [ 1 ] then
55597: LD_VAR 0 15
55601: PUSH
55602: LD_INT 1
55604: ARRAY
55605: IFFALSE 55609
// exit ;
55607: GO 56066
// height := hex [ 2 ] ;
55609: LD_ADDR_VAR 0 13
55613: PUSH
55614: LD_VAR 0 15
55618: PUSH
55619: LD_INT 2
55621: ARRAY
55622: ST_TO_ADDR
// for i = 1 to hexes do
55623: LD_ADDR_VAR 0 7
55627: PUSH
55628: DOUBLE
55629: LD_INT 1
55631: DEC
55632: ST_TO_ADDR
55633: LD_VAR 0 12
55637: PUSH
55638: FOR_TO
55639: IFFALSE 55983
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55641: LD_VAR 0 12
55645: PUSH
55646: LD_VAR 0 7
55650: ARRAY
55651: PUSH
55652: LD_INT 1
55654: ARRAY
55655: PPUSH
55656: LD_VAR 0 12
55660: PUSH
55661: LD_VAR 0 7
55665: ARRAY
55666: PUSH
55667: LD_INT 2
55669: ARRAY
55670: PPUSH
55671: CALL_OW 488
55675: NOT
55676: IFTRUE 55718
55678: PUSH
55679: LD_VAR 0 12
55683: PUSH
55684: LD_VAR 0 7
55688: ARRAY
55689: PUSH
55690: LD_INT 1
55692: ARRAY
55693: PPUSH
55694: LD_VAR 0 12
55698: PUSH
55699: LD_VAR 0 7
55703: ARRAY
55704: PUSH
55705: LD_INT 2
55707: ARRAY
55708: PPUSH
55709: CALL_OW 428
55713: PUSH
55714: LD_INT 0
55716: GREATER
55717: OR
55718: IFTRUE 55756
55720: PUSH
55721: LD_VAR 0 12
55725: PUSH
55726: LD_VAR 0 7
55730: ARRAY
55731: PUSH
55732: LD_INT 1
55734: ARRAY
55735: PPUSH
55736: LD_VAR 0 12
55740: PUSH
55741: LD_VAR 0 7
55745: ARRAY
55746: PUSH
55747: LD_INT 2
55749: ARRAY
55750: PPUSH
55751: CALL_OW 351
55755: OR
55756: IFFALSE 55762
// exit ;
55758: POP
55759: POP
55760: GO 56066
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55762: LD_ADDR_VAR 0 8
55766: PUSH
55767: LD_VAR 0 12
55771: PUSH
55772: LD_VAR 0 7
55776: ARRAY
55777: PUSH
55778: LD_INT 1
55780: ARRAY
55781: PPUSH
55782: LD_VAR 0 12
55786: PUSH
55787: LD_VAR 0 7
55791: ARRAY
55792: PUSH
55793: LD_INT 2
55795: ARRAY
55796: PPUSH
55797: CALL_OW 546
55801: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55802: LD_VAR 0 8
55806: PUSH
55807: LD_INT 1
55809: ARRAY
55810: IFTRUE 55832
55812: PUSH
55813: LD_VAR 0 8
55817: PUSH
55818: LD_INT 2
55820: ARRAY
55821: PUSH
55822: LD_VAR 0 13
55826: PUSH
55827: LD_INT 2
55829: PLUS
55830: GREATER
55831: OR
55832: IFTRUE 55854
55834: PUSH
55835: LD_VAR 0 8
55839: PUSH
55840: LD_INT 2
55842: ARRAY
55843: PUSH
55844: LD_VAR 0 13
55848: PUSH
55849: LD_INT 2
55851: MINUS
55852: LESS
55853: OR
55854: IFTRUE 55922
55856: PUSH
55857: LD_VAR 0 8
55861: PUSH
55862: LD_INT 3
55864: ARRAY
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 8
55871: PUSH
55872: LD_INT 9
55874: PUSH
55875: LD_INT 10
55877: PUSH
55878: LD_INT 11
55880: PUSH
55881: LD_INT 12
55883: PUSH
55884: LD_INT 13
55886: PUSH
55887: LD_INT 16
55889: PUSH
55890: LD_INT 17
55892: PUSH
55893: LD_INT 18
55895: PUSH
55896: LD_INT 19
55898: PUSH
55899: LD_INT 20
55901: PUSH
55902: LD_INT 21
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: IN
55920: NOT
55921: OR
55922: IFTRUE 55935
55924: PUSH
55925: LD_VAR 0 8
55929: PUSH
55930: LD_INT 5
55932: ARRAY
55933: NOT
55934: OR
55935: IFTRUE 55975
55937: PUSH
55938: LD_VAR 0 8
55942: PUSH
55943: LD_INT 6
55945: ARRAY
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: LD_INT 7
55955: PUSH
55956: LD_INT 9
55958: PUSH
55959: LD_INT 10
55961: PUSH
55962: LD_INT 11
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: IN
55973: NOT
55974: OR
55975: IFFALSE 55981
// exit ;
55977: POP
55978: POP
55979: GO 56066
// end ;
55981: GO 55638
55983: POP
55984: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55985: LD_VAR 0 9
55989: PPUSH
55990: LD_VAR 0 3
55994: PPUSH
55995: LD_VAR 0 4
55999: PPUSH
56000: LD_INT 20
56002: PPUSH
56003: CALL 47885 0 4
56007: PUSH
56008: LD_INT 4
56010: ARRAY
56011: IFFALSE 56015
// exit ;
56013: GO 56066
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56015: LD_VAR 0 2
56019: PUSH
56020: LD_INT 29
56022: PUSH
56023: LD_INT 30
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: IN
56030: IFFALSE 56054
56032: PUSH
56033: LD_VAR 0 3
56037: PPUSH
56038: LD_VAR 0 4
56042: PPUSH
56043: LD_VAR 0 9
56047: PPUSH
56048: CALL_OW 440
56052: NOT
56053: AND
56054: IFFALSE 56058
// exit ;
56056: GO 56066
// result := true ;
56058: LD_ADDR_VAR 0 6
56062: PUSH
56063: LD_INT 1
56065: ST_TO_ADDR
// end ;
56066: LD_VAR 0 6
56070: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56071: LD_INT 0
56073: PPUSH
56074: PPUSH
56075: PPUSH
56076: PPUSH
56077: PPUSH
56078: PPUSH
56079: PPUSH
56080: PPUSH
56081: PPUSH
56082: PPUSH
56083: PPUSH
56084: PPUSH
56085: PPUSH
56086: PPUSH
56087: PPUSH
56088: PPUSH
56089: PPUSH
56090: PPUSH
56091: PPUSH
56092: PPUSH
56093: PPUSH
56094: PPUSH
56095: PPUSH
56096: PPUSH
56097: PPUSH
56098: PPUSH
56099: PPUSH
56100: PPUSH
56101: PPUSH
56102: PPUSH
56103: PPUSH
56104: PPUSH
56105: PPUSH
56106: PPUSH
56107: PPUSH
56108: PPUSH
56109: PPUSH
56110: PPUSH
56111: PPUSH
56112: PPUSH
56113: PPUSH
56114: PPUSH
56115: PPUSH
56116: PPUSH
56117: PPUSH
56118: PPUSH
56119: PPUSH
56120: PPUSH
56121: PPUSH
56122: PPUSH
56123: PPUSH
56124: PPUSH
56125: PPUSH
56126: PPUSH
56127: PPUSH
56128: PPUSH
56129: PPUSH
56130: PPUSH
// result = [ ] ;
56131: LD_ADDR_VAR 0 7
56135: PUSH
56136: EMPTY
56137: ST_TO_ADDR
// temp_list = [ ] ;
56138: LD_ADDR_VAR 0 9
56142: PUSH
56143: EMPTY
56144: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56145: LD_VAR 0 4
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: LD_INT 3
56161: PUSH
56162: LD_INT 4
56164: PUSH
56165: LD_INT 5
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: IN
56176: NOT
56177: IFTRUE 56220
56179: PUSH
56180: LD_VAR 0 1
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: IN
56195: IFFALSE 56219
56197: PUSH
56198: LD_VAR 0 5
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: LD_INT 2
56208: PUSH
56209: LD_INT 3
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: LIST
56216: IN
56217: NOT
56218: AND
56219: OR
56220: IFFALSE 56224
// exit ;
56222: GO 74623
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56224: LD_VAR 0 1
56228: PUSH
56229: LD_INT 6
56231: PUSH
56232: LD_INT 7
56234: PUSH
56235: LD_INT 8
56237: PUSH
56238: LD_INT 13
56240: PUSH
56241: LD_INT 12
56243: PUSH
56244: LD_INT 15
56246: PUSH
56247: LD_INT 11
56249: PUSH
56250: LD_INT 14
56252: PUSH
56253: LD_INT 10
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: IN
56267: IFFALSE 56277
// btype = b_lab ;
56269: LD_ADDR_VAR 0 1
56273: PUSH
56274: LD_INT 6
56276: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56277: LD_VAR 0 6
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: LIST
56295: IN
56296: NOT
56297: IFTRUE 56365
56299: PUSH
56300: LD_VAR 0 1
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: LD_INT 3
56316: PUSH
56317: LD_INT 6
56319: PUSH
56320: LD_INT 36
56322: PUSH
56323: LD_INT 4
56325: PUSH
56326: LD_INT 5
56328: PUSH
56329: LD_INT 31
56331: PUSH
56332: LD_INT 32
56334: PUSH
56335: LD_INT 33
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: IN
56351: NOT
56352: IFFALSE 56364
56354: PUSH
56355: LD_VAR 0 6
56359: PUSH
56360: LD_INT 1
56362: EQUAL
56363: AND
56364: OR
56365: IFTRUE 56397
56367: PUSH
56368: LD_VAR 0 1
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: IN
56383: NOT
56384: IFFALSE 56396
56386: PUSH
56387: LD_VAR 0 6
56391: PUSH
56392: LD_INT 2
56394: EQUAL
56395: AND
56396: OR
56397: IFFALSE 56407
// mode = 0 ;
56399: LD_ADDR_VAR 0 6
56403: PUSH
56404: LD_INT 0
56406: ST_TO_ADDR
// case mode of 0 :
56407: LD_VAR 0 6
56411: PUSH
56412: LD_INT 0
56414: DOUBLE
56415: EQUAL
56416: IFTRUE 56420
56418: GO 67873
56420: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56421: LD_ADDR_VAR 0 11
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 3
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56614: LD_ADDR_VAR 0 12
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 3
56771: NEG
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56810: LD_ADDR_VAR 0 13
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: LD_INT 2
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 2
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: LD_INT 2
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: LD_INT 3
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 3
56969: NEG
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 3
56981: NEG
56982: PUSH
56983: LD_INT 3
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57009: LD_ADDR_VAR 0 14
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 2
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: LD_INT 3
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57205: LD_ADDR_VAR 0 15
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: NEG
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 2
57339: NEG
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 3
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 3
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57398: LD_ADDR_VAR 0 16
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: LD_INT 2
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 3
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 2
57565: PUSH
57566: LD_INT 3
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57591: LD_ADDR_VAR 0 17
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: LD_INT 2
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 2
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57821: LD_ADDR_VAR 0 18
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 2
57906: NEG
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 2
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: LD_INT 2
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58051: LD_ADDR_VAR 0 19
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 1
58109: NEG
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: LD_INT 2
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 2
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 2
58227: NEG
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 2
58250: NEG
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58281: LD_ADDR_VAR 0 20
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 0
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: LD_INT 2
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 0
58374: PUSH
58375: LD_INT 2
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 2
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 2
58457: NEG
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: NEG
58481: PUSH
58482: LD_INT 2
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58511: LD_ADDR_VAR 0 21
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: LD_INT 1
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 0
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: LD_INT 2
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: LD_INT 2
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: LD_INT 2
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58741: LD_ADDR_VAR 0 22
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 2
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 2
58928: NEG
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 2
58940: NEG
58941: PUSH
58942: LD_INT 2
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58971: LD_ADDR_VAR 0 23
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: NEG
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 2
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 2
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: NEG
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 2
59158: NEG
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: LD_INT 3
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59251: LD_ADDR_VAR 0 24
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 1
59309: NEG
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: LD_INT 1
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: LD_INT 2
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_INT 2
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 2
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 2
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 2
59450: NEG
59451: PUSH
59452: LD_INT 2
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 3
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 3
59494: PUSH
59495: LD_INT 2
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59527: LD_ADDR_VAR 0 25
59531: PUSH
59532: LD_INT 0
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 2
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 2
59662: PUSH
59663: LD_INT 2
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 2
59703: NEG
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: LD_INT 2
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 3
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 3
59748: PUSH
59749: LD_INT 2
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 2
59758: PUSH
59759: LD_INT 3
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: LD_INT 3
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59801: LD_ADDR_VAR 0 26
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 1
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: LD_INT 2
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: LD_INT 2
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: LD_INT 2
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 2
59977: NEG
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 2
59988: NEG
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 2
60000: NEG
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: LD_INT 3
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: LD_INT 3
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60077: LD_ADDR_VAR 0 27
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: LD_INT 0
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: LD_INT 2
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: LD_INT 1
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: NEG
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: NEG
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: NEG
60265: PUSH
60266: LD_INT 1
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: NEG
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 2
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 2
60299: NEG
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 3
60310: NEG
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 3
60322: NEG
60323: PUSH
60324: LD_INT 2
60326: NEG
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60357: LD_ADDR_VAR 0 28
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: LD_INT 1
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: LD_INT 0
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: LD_INT 1
60430: NEG
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 2
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 1
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: LD_INT 0
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 2
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 2
60492: PUSH
60493: LD_INT 2
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: PUSH
60503: LD_INT 2
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: LD_INT 2
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 2
60544: NEG
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: NEG
60557: PUSH
60558: LD_INT 2
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: LD_INT 3
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 3
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 3
60592: NEG
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 3
60604: NEG
60605: PUSH
60606: LD_INT 2
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60639: LD_ADDR_VAR 0 29
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: LD_INT 1
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: NEG
60698: PUSH
60699: LD_INT 0
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: NEG
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: LD_INT 1
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 2
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 1
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 1
60794: NEG
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 2
60817: NEG
60818: PUSH
60819: LD_INT 2
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 2
60829: NEG
60830: PUSH
60831: LD_INT 3
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 3
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: LD_INT 3
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 3
60883: NEG
60884: PUSH
60885: LD_INT 2
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60918: LD_ADDR_VAR 0 30
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: LD_INT 1
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: LD_INT 2
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 2
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 2
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: PUSH
61064: LD_INT 2
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 2
61095: NEG
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 1
61107: NEG
61108: PUSH
61109: LD_INT 3
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: LD_INT 2
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 3
61130: PUSH
61131: LD_INT 2
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 2
61140: PUSH
61141: LD_INT 3
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 3
61161: NEG
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61196: LD_ADDR_VAR 0 31
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: LD_INT 1
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: NEG
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: LD_INT 1
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 2
61320: PUSH
61321: LD_INT 2
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: LD_INT 2
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: LD_INT 2
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 2
61361: NEG
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: NEG
61374: PUSH
61375: LD_INT 2
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 2
61385: NEG
61386: PUSH
61387: LD_INT 3
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 2
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 3
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: LD_INT 3
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: LD_INT 2
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 3
61439: NEG
61440: PUSH
61441: LD_INT 2
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61474: LD_ADDR_VAR 0 32
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: LD_INT 2
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: LD_INT 2
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 2
61599: PUSH
61600: LD_INT 2
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: LD_INT 2
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: LD_INT 2
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: LD_INT 1
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 2
61640: NEG
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 2
61651: NEG
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: NEG
61664: PUSH
61665: LD_INT 3
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: LD_INT 2
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 3
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 2
61696: PUSH
61697: LD_INT 3
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 2
61706: NEG
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 3
61717: NEG
61718: PUSH
61719: LD_INT 1
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61752: LD_ADDR_VAR 0 33
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: LD_INT 2
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: LD_INT 2
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 2
61907: NEG
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 2
61918: NEG
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: LD_INT 2
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 2
61942: NEG
61943: PUSH
61944: LD_INT 3
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 3
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: LD_INT 3
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: NEG
61986: PUSH
61987: LD_INT 2
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 3
61996: NEG
61997: PUSH
61998: LD_INT 2
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62031: LD_ADDR_VAR 0 34
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: NEG
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: LD_INT 2
62116: NEG
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: LD_INT 2
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: PUSH
62136: LD_INT 1
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 2
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 2
62156: PUSH
62157: LD_INT 2
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: LD_INT 2
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 1
62176: NEG
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 2
62187: NEG
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 2
62198: NEG
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 2
62210: NEG
62211: PUSH
62212: LD_INT 2
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: LD_INT 3
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: PUSH
62235: LD_INT 2
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 3
62245: PUSH
62246: LD_INT 2
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 2
62255: PUSH
62256: LD_INT 3
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 3
62276: NEG
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62311: LD_ADDR_VAR 0 35
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: LD_INT 1
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 2
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 2
62402: NEG
62403: PUSH
62404: LD_INT 1
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62423: LD_ADDR_VAR 0 36
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: PUSH
62462: LD_INT 1
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: LD_INT 2
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 1
62516: PUSH
62517: LD_INT 2
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62535: LD_ADDR_VAR 0 37
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: NEG
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: NEG
62628: PUSH
62629: LD_INT 1
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62647: LD_ADDR_VAR 0 38
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 1
62685: PUSH
62686: LD_INT 1
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 1
62716: NEG
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 2
62738: NEG
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62759: LD_ADDR_VAR 0 39
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: LD_INT 1
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 1
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 1
62797: PUSH
62798: LD_INT 1
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 0
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 1
62817: NEG
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 1
62828: NEG
62829: PUSH
62830: LD_INT 1
62832: NEG
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: LD_INT 2
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: LD_INT 2
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62871: LD_ADDR_VAR 0 40
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: LD_INT 1
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: NEG
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: NEG
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62983: LD_ADDR_VAR 0 41
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: LD_INT 0
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: LD_INT 1
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: LD_INT 1
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: NEG
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: NEG
63065: PUSH
63066: LD_INT 2
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 2
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 2
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 2
63107: PUSH
63108: LD_INT 2
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: LD_INT 2
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: LD_INT 1
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 2
63138: NEG
63139: PUSH
63140: LD_INT 0
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 2
63149: NEG
63150: PUSH
63151: LD_INT 1
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 2
63161: NEG
63162: PUSH
63163: LD_INT 2
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PUSH
63175: LD_INT 3
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 2
63185: PUSH
63186: LD_INT 1
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 3
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 3
63206: PUSH
63207: LD_INT 1
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 3
63216: PUSH
63217: LD_INT 2
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 3
63226: PUSH
63227: LD_INT 3
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 2
63236: PUSH
63237: LD_INT 3
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 2
63246: NEG
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 3
63257: NEG
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 3
63268: NEG
63269: PUSH
63270: LD_INT 1
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 3
63280: NEG
63281: PUSH
63282: LD_INT 2
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 3
63292: NEG
63293: PUSH
63294: LD_INT 3
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63333: LD_ADDR_VAR 0 42
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: LD_INT 1
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: LD_INT 2
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 2
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 2
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 2
63458: PUSH
63459: LD_INT 2
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: LD_INT 2
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: LD_INT 2
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 1
63488: NEG
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 2
63499: NEG
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 2
63511: NEG
63512: PUSH
63513: LD_INT 2
63515: NEG
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 2
63523: NEG
63524: PUSH
63525: LD_INT 3
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 1
63535: NEG
63536: PUSH
63537: LD_INT 3
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: LD_INT 3
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: LD_INT 2
63561: NEG
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 3
63569: PUSH
63570: LD_INT 2
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 3
63579: PUSH
63580: LD_INT 3
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 2
63589: PUSH
63590: LD_INT 3
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: LD_INT 3
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: LD_INT 3
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 1
63619: NEG
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 3
63630: NEG
63631: PUSH
63632: LD_INT 2
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 3
63642: NEG
63643: PUSH
63644: LD_INT 3
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63683: LD_ADDR_VAR 0 43
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: LD_INT 2
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: LD_INT 2
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 1
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 2
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 1
63818: PUSH
63819: LD_INT 2
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 0
63828: PUSH
63829: LD_INT 2
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: LD_INT 1
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 2
63849: NEG
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 2
63860: NEG
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: LD_INT 3
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: LD_INT 3
63887: NEG
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 1
63895: PUSH
63896: LD_INT 2
63898: NEG
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 2
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 3
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 3
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: LD_INT 3
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 3
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: LD_INT 2
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 2
63968: NEG
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 3
63979: NEG
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 3
63990: NEG
63991: PUSH
63992: LD_INT 1
63994: NEG
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64031: LD_ADDR_VAR 0 44
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 1
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: PUSH
64070: LD_INT 1
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 1
64089: NEG
64090: PUSH
64091: LD_INT 0
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: NEG
64113: PUSH
64114: LD_INT 2
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 2
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 2
64145: PUSH
64146: LD_INT 1
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 2
64155: PUSH
64156: LD_INT 2
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: PUSH
64166: LD_INT 2
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: LD_INT 1
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 2
64186: NEG
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 2
64197: NEG
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 2
64209: NEG
64210: PUSH
64211: LD_INT 2
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 2
64221: NEG
64222: PUSH
64223: LD_INT 3
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 2
64233: PUSH
64234: LD_INT 1
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 3
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 3
64254: PUSH
64255: LD_INT 1
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 3
64264: PUSH
64265: LD_INT 2
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 3
64274: PUSH
64275: LD_INT 3
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 2
64284: PUSH
64285: LD_INT 3
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 2
64294: NEG
64295: PUSH
64296: LD_INT 1
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 3
64305: NEG
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 3
64328: NEG
64329: PUSH
64330: LD_INT 2
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 3
64340: NEG
64341: PUSH
64342: LD_INT 3
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64381: LD_ADDR_VAR 0 45
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: LD_INT 1
64401: NEG
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 1
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 1
64439: NEG
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: LD_INT 1
64454: NEG
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 1
64462: NEG
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: LD_INT 2
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 1
64485: PUSH
64486: LD_INT 1
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 2
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 2
64506: PUSH
64507: LD_INT 2
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 1
64516: PUSH
64517: LD_INT 2
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 0
64526: PUSH
64527: LD_INT 2
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 2
64547: NEG
64548: PUSH
64549: LD_INT 1
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 2
64559: NEG
64560: PUSH
64561: LD_INT 2
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 2
64571: NEG
64572: PUSH
64573: LD_INT 3
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: LD_INT 3
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: LD_INT 3
64598: NEG
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 1
64606: PUSH
64607: LD_INT 2
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 3
64617: PUSH
64618: LD_INT 2
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 3
64627: PUSH
64628: LD_INT 3
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 2
64637: PUSH
64638: LD_INT 3
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 1
64647: PUSH
64648: LD_INT 3
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: LD_INT 3
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: LD_INT 2
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 3
64678: NEG
64679: PUSH
64680: LD_INT 2
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 3
64690: NEG
64691: PUSH
64692: LD_INT 3
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64731: LD_ADDR_VAR 0 46
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 0
64748: PUSH
64749: LD_INT 1
64751: NEG
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 1
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: LD_INT 1
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: LD_INT 1
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 1
64789: NEG
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: NEG
64813: PUSH
64814: LD_INT 2
64816: NEG
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 0
64824: PUSH
64825: LD_INT 2
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 2
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 2
64856: PUSH
64857: LD_INT 1
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 1
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 0
64876: PUSH
64877: LD_INT 2
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 1
64886: NEG
64887: PUSH
64888: LD_INT 1
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 2
64897: NEG
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 2
64908: NEG
64909: PUSH
64910: LD_INT 1
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: LD_INT 3
64924: NEG
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: LD_INT 3
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: LD_INT 2
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 2
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 3
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 3
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: LD_INT 3
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: LD_INT 3
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 2
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 2
65016: NEG
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 3
65027: NEG
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 3
65038: NEG
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65079: LD_ADDR_VAR 0 47
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: LD_INT 1
65099: NEG
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: LD_INT 1
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 1
65137: NEG
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 1
65148: NEG
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 1
65160: NEG
65161: PUSH
65162: LD_INT 2
65164: NEG
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: LD_INT 2
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: LD_INT 1
65186: NEG
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 2
65194: NEG
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 2
65206: NEG
65207: PUSH
65208: LD_INT 2
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65230: LD_ADDR_VAR 0 48
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: LD_INT 1
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 1
65268: PUSH
65269: LD_INT 1
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: LD_INT 1
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 1
65288: NEG
65289: PUSH
65290: LD_INT 0
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 1
65299: NEG
65300: PUSH
65301: LD_INT 1
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: NEG
65312: PUSH
65313: LD_INT 2
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: LD_INT 2
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 1
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 2
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 2
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65377: LD_ADDR_VAR 0 49
65381: PUSH
65382: LD_INT 0
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 1
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: LD_INT 0
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: LD_INT 1
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 0
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: NEG
65436: PUSH
65437: LD_INT 0
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 1
65446: NEG
65447: PUSH
65448: LD_INT 1
65450: NEG
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 1
65458: PUSH
65459: LD_INT 1
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 2
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 2
65479: PUSH
65480: LD_INT 1
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 2
65489: PUSH
65490: LD_INT 2
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 1
65499: PUSH
65500: LD_INT 2
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65521: LD_ADDR_VAR 0 50
65525: PUSH
65526: LD_INT 0
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: PUSH
65550: LD_INT 0
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PUSH
65557: LD_INT 1
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 0
65569: PUSH
65570: LD_INT 1
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 1
65579: NEG
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: LD_INT 1
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 2
65602: PUSH
65603: LD_INT 1
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 2
65612: PUSH
65613: LD_INT 2
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 1
65622: PUSH
65623: LD_INT 2
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 0
65632: PUSH
65633: LD_INT 2
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 1
65642: NEG
65643: PUSH
65644: LD_INT 1
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65665: LD_ADDR_VAR 0 51
65669: PUSH
65670: LD_INT 0
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: LD_INT 1
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 1
65693: PUSH
65694: LD_INT 0
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 1
65703: PUSH
65704: LD_INT 1
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 0
65713: PUSH
65714: LD_INT 1
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 1
65723: NEG
65724: PUSH
65725: LD_INT 0
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 1
65734: NEG
65735: PUSH
65736: LD_INT 1
65738: NEG
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 1
65746: PUSH
65747: LD_INT 2
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 0
65756: PUSH
65757: LD_INT 2
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 1
65766: NEG
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 2
65777: NEG
65778: PUSH
65779: LD_INT 0
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 2
65788: NEG
65789: PUSH
65790: LD_INT 1
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65812: LD_ADDR_VAR 0 52
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 0
65829: PUSH
65830: LD_INT 1
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 1
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: LD_INT 1
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 1
65870: NEG
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 1
65881: NEG
65882: PUSH
65883: LD_INT 1
65885: NEG
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 1
65893: NEG
65894: PUSH
65895: LD_INT 2
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 1
65905: NEG
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 2
65916: NEG
65917: PUSH
65918: LD_INT 0
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 2
65927: NEG
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 2
65939: NEG
65940: PUSH
65941: LD_INT 2
65943: NEG
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65963: LD_ADDR_VAR 0 53
65967: PUSH
65968: LD_INT 0
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: LD_INT 1
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 1
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 1
66001: PUSH
66002: LD_INT 1
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: LD_INT 1
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 1
66021: NEG
66022: PUSH
66023: LD_INT 0
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 1
66032: NEG
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 1
66044: NEG
66045: PUSH
66046: LD_INT 2
66048: NEG
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 0
66056: PUSH
66057: LD_INT 2
66059: NEG
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 1
66067: PUSH
66068: LD_INT 1
66070: NEG
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 2
66078: PUSH
66079: LD_INT 0
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 2
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 2
66098: PUSH
66099: LD_INT 2
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 1
66108: PUSH
66109: LD_INT 2
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 0
66118: PUSH
66119: LD_INT 2
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 1
66128: NEG
66129: PUSH
66130: LD_INT 1
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 2
66139: NEG
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 2
66150: NEG
66151: PUSH
66152: LD_INT 1
66154: NEG
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 2
66162: NEG
66163: PUSH
66164: LD_INT 2
66166: NEG
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66193: LD_ADDR_VAR 0 54
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: LD_INT 0
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 0
66210: PUSH
66211: LD_INT 1
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: LD_INT 0
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 1
66231: PUSH
66232: LD_INT 1
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 0
66241: PUSH
66242: LD_INT 1
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 1
66251: NEG
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: NEG
66263: PUSH
66264: LD_INT 1
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 1
66274: NEG
66275: PUSH
66276: LD_INT 2
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: LD_INT 2
66289: NEG
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 1
66297: PUSH
66298: LD_INT 1
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 2
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 2
66318: PUSH
66319: LD_INT 1
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 2
66328: PUSH
66329: LD_INT 2
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 1
66338: PUSH
66339: LD_INT 2
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: LD_INT 2
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: LD_INT 1
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 2
66369: NEG
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 2
66380: NEG
66381: PUSH
66382: LD_INT 1
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 2
66392: NEG
66393: PUSH
66394: LD_INT 2
66396: NEG
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66423: LD_ADDR_VAR 0 55
66427: PUSH
66428: LD_INT 0
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 0
66440: PUSH
66441: LD_INT 1
66443: NEG
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 1
66451: PUSH
66452: LD_INT 0
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 1
66461: PUSH
66462: LD_INT 1
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: LD_INT 1
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 1
66481: NEG
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 1
66492: NEG
66493: PUSH
66494: LD_INT 1
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 1
66504: NEG
66505: PUSH
66506: LD_INT 2
66508: NEG
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: LD_INT 2
66519: NEG
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 1
66527: PUSH
66528: LD_INT 1
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 2
66538: PUSH
66539: LD_INT 0
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 2
66548: PUSH
66549: LD_INT 1
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 2
66558: PUSH
66559: LD_INT 2
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 1
66568: PUSH
66569: LD_INT 2
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: LD_INT 2
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 1
66588: NEG
66589: PUSH
66590: LD_INT 1
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 2
66599: NEG
66600: PUSH
66601: LD_INT 0
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 2
66610: NEG
66611: PUSH
66612: LD_INT 1
66614: NEG
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 2
66622: NEG
66623: PUSH
66624: LD_INT 2
66626: NEG
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66653: LD_ADDR_VAR 0 56
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: LD_INT 1
66673: NEG
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 1
66681: PUSH
66682: LD_INT 0
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 1
66691: PUSH
66692: LD_INT 1
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 0
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 1
66711: NEG
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 1
66722: NEG
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 1
66734: NEG
66735: PUSH
66736: LD_INT 2
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 0
66746: PUSH
66747: LD_INT 2
66749: NEG
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 1
66757: PUSH
66758: LD_INT 1
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 2
66768: PUSH
66769: LD_INT 0
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 2
66778: PUSH
66779: LD_INT 1
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 2
66788: PUSH
66789: LD_INT 2
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 1
66798: PUSH
66799: LD_INT 2
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: LD_INT 2
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 1
66818: NEG
66819: PUSH
66820: LD_INT 1
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 2
66829: NEG
66830: PUSH
66831: LD_INT 0
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 2
66840: NEG
66841: PUSH
66842: LD_INT 1
66844: NEG
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 2
66852: NEG
66853: PUSH
66854: LD_INT 2
66856: NEG
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66883: LD_ADDR_VAR 0 57
66887: PUSH
66888: LD_INT 0
66890: PUSH
66891: LD_INT 0
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 0
66900: PUSH
66901: LD_INT 1
66903: NEG
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 1
66911: PUSH
66912: LD_INT 0
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 1
66921: PUSH
66922: LD_INT 1
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 0
66931: PUSH
66932: LD_INT 1
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 1
66941: NEG
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: PUSH
66954: LD_INT 1
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 1
66964: NEG
66965: PUSH
66966: LD_INT 2
66968: NEG
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 0
66976: PUSH
66977: LD_INT 2
66979: NEG
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 1
66987: PUSH
66988: LD_INT 1
66990: NEG
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 2
66998: PUSH
66999: LD_INT 0
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 2
67008: PUSH
67009: LD_INT 1
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 2
67018: PUSH
67019: LD_INT 2
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 1
67028: PUSH
67029: LD_INT 2
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 0
67038: PUSH
67039: LD_INT 2
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 1
67048: NEG
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 2
67059: NEG
67060: PUSH
67061: LD_INT 0
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 2
67070: NEG
67071: PUSH
67072: LD_INT 1
67074: NEG
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 2
67082: NEG
67083: PUSH
67084: LD_INT 2
67086: NEG
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67113: LD_ADDR_VAR 0 58
67117: PUSH
67118: LD_INT 0
67120: PUSH
67121: LD_INT 0
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: LD_INT 1
67133: NEG
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 1
67141: PUSH
67142: LD_INT 0
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 1
67151: PUSH
67152: LD_INT 1
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 0
67161: PUSH
67162: LD_INT 1
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 1
67171: NEG
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: LD_INT 1
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 1
67194: NEG
67195: PUSH
67196: LD_INT 2
67198: NEG
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 0
67206: PUSH
67207: LD_INT 2
67209: NEG
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 1
67217: PUSH
67218: LD_INT 1
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 2
67228: PUSH
67229: LD_INT 0
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 2
67238: PUSH
67239: LD_INT 1
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 2
67248: PUSH
67249: LD_INT 2
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 1
67258: PUSH
67259: LD_INT 2
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: LD_INT 2
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 1
67278: NEG
67279: PUSH
67280: LD_INT 1
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 2
67289: NEG
67290: PUSH
67291: LD_INT 0
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 2
67300: NEG
67301: PUSH
67302: LD_INT 1
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 2
67312: NEG
67313: PUSH
67314: LD_INT 2
67316: NEG
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67343: LD_ADDR_VAR 0 59
67347: PUSH
67348: LD_INT 0
67350: PUSH
67351: LD_INT 0
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 0
67360: PUSH
67361: LD_INT 1
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 1
67381: PUSH
67382: LD_INT 1
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 0
67391: PUSH
67392: LD_INT 1
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 1
67401: NEG
67402: PUSH
67403: LD_INT 0
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: LD_INT 1
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67431: LD_ADDR_VAR 0 60
67435: PUSH
67436: LD_INT 0
67438: PUSH
67439: LD_INT 0
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: LD_INT 1
67451: NEG
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 1
67459: PUSH
67460: LD_INT 0
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 1
67469: PUSH
67470: LD_INT 1
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 0
67479: PUSH
67480: LD_INT 1
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 1
67489: NEG
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 1
67500: NEG
67501: PUSH
67502: LD_INT 1
67504: NEG
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67519: LD_ADDR_VAR 0 61
67523: PUSH
67524: LD_INT 0
67526: PUSH
67527: LD_INT 0
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 0
67536: PUSH
67537: LD_INT 1
67539: NEG
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 1
67547: PUSH
67548: LD_INT 0
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 1
67557: PUSH
67558: LD_INT 1
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 0
67567: PUSH
67568: LD_INT 1
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 1
67577: NEG
67578: PUSH
67579: LD_INT 0
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 1
67588: NEG
67589: PUSH
67590: LD_INT 1
67592: NEG
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67607: LD_ADDR_VAR 0 62
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 0
67624: PUSH
67625: LD_INT 1
67627: NEG
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 1
67635: PUSH
67636: LD_INT 0
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 1
67645: PUSH
67646: LD_INT 1
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 0
67655: PUSH
67656: LD_INT 1
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 1
67665: NEG
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 1
67676: NEG
67677: PUSH
67678: LD_INT 1
67680: NEG
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67695: LD_ADDR_VAR 0 63
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 0
67712: PUSH
67713: LD_INT 1
67715: NEG
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 1
67723: PUSH
67724: LD_INT 0
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 1
67733: PUSH
67734: LD_INT 1
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 0
67743: PUSH
67744: LD_INT 1
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 1
67753: NEG
67754: PUSH
67755: LD_INT 0
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 1
67764: NEG
67765: PUSH
67766: LD_INT 1
67768: NEG
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67783: LD_ADDR_VAR 0 64
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 0
67800: PUSH
67801: LD_INT 1
67803: NEG
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 1
67811: PUSH
67812: LD_INT 0
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 1
67821: PUSH
67822: LD_INT 1
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 0
67831: PUSH
67832: LD_INT 1
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 1
67841: NEG
67842: PUSH
67843: LD_INT 0
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 1
67852: NEG
67853: PUSH
67854: LD_INT 1
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: ST_TO_ADDR
// end ; 1 :
67871: GO 73768
67873: LD_INT 1
67875: DOUBLE
67876: EQUAL
67877: IFTRUE 67881
67879: GO 70504
67881: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67882: LD_ADDR_VAR 0 11
67886: PUSH
67887: LD_INT 1
67889: NEG
67890: PUSH
67891: LD_INT 3
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 0
67901: PUSH
67902: LD_INT 3
67904: NEG
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 1
67912: PUSH
67913: LD_INT 2
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: LIST
67925: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67926: LD_ADDR_VAR 0 12
67930: PUSH
67931: LD_INT 2
67933: PUSH
67934: LD_INT 1
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 3
67944: PUSH
67945: LD_INT 0
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 3
67954: PUSH
67955: LD_INT 1
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: LIST
67966: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67967: LD_ADDR_VAR 0 13
67971: PUSH
67972: LD_INT 3
67974: PUSH
67975: LD_INT 2
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 3
67984: PUSH
67985: LD_INT 3
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 2
67994: PUSH
67995: LD_INT 3
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: LIST
68006: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68007: LD_ADDR_VAR 0 14
68011: PUSH
68012: LD_INT 1
68014: PUSH
68015: LD_INT 3
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 0
68024: PUSH
68025: LD_INT 3
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 1
68034: NEG
68035: PUSH
68036: LD_INT 2
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: LIST
68047: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68048: LD_ADDR_VAR 0 15
68052: PUSH
68053: LD_INT 2
68055: NEG
68056: PUSH
68057: LD_INT 1
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 3
68066: NEG
68067: PUSH
68068: LD_INT 0
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 3
68077: NEG
68078: PUSH
68079: LD_INT 1
68081: NEG
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: LIST
68091: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68092: LD_ADDR_VAR 0 16
68096: PUSH
68097: LD_INT 2
68099: NEG
68100: PUSH
68101: LD_INT 3
68103: NEG
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 3
68111: NEG
68112: PUSH
68113: LD_INT 2
68115: NEG
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 3
68123: NEG
68124: PUSH
68125: LD_INT 3
68127: NEG
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: LIST
68137: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68138: LD_ADDR_VAR 0 17
68142: PUSH
68143: LD_INT 1
68145: NEG
68146: PUSH
68147: LD_INT 3
68149: NEG
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 0
68157: PUSH
68158: LD_INT 3
68160: NEG
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 1
68168: PUSH
68169: LD_INT 2
68171: NEG
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: LIST
68181: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68182: LD_ADDR_VAR 0 18
68186: PUSH
68187: LD_INT 2
68189: PUSH
68190: LD_INT 1
68192: NEG
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 3
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 3
68210: PUSH
68211: LD_INT 1
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: LIST
68222: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68223: LD_ADDR_VAR 0 19
68227: PUSH
68228: LD_INT 3
68230: PUSH
68231: LD_INT 2
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 3
68240: PUSH
68241: LD_INT 3
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 2
68250: PUSH
68251: LD_INT 3
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: LIST
68262: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68263: LD_ADDR_VAR 0 20
68267: PUSH
68268: LD_INT 1
68270: PUSH
68271: LD_INT 3
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 0
68280: PUSH
68281: LD_INT 3
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 1
68290: NEG
68291: PUSH
68292: LD_INT 2
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: LIST
68303: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68304: LD_ADDR_VAR 0 21
68308: PUSH
68309: LD_INT 2
68311: NEG
68312: PUSH
68313: LD_INT 1
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 3
68322: NEG
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 3
68333: NEG
68334: PUSH
68335: LD_INT 1
68337: NEG
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: LIST
68347: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68348: LD_ADDR_VAR 0 22
68352: PUSH
68353: LD_INT 2
68355: NEG
68356: PUSH
68357: LD_INT 3
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 3
68367: NEG
68368: PUSH
68369: LD_INT 2
68371: NEG
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 3
68379: NEG
68380: PUSH
68381: LD_INT 3
68383: NEG
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: LIST
68393: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68394: LD_ADDR_VAR 0 23
68398: PUSH
68399: LD_INT 0
68401: PUSH
68402: LD_INT 3
68404: NEG
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 1
68412: NEG
68413: PUSH
68414: LD_INT 4
68416: NEG
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: PUSH
68422: LD_INT 1
68424: PUSH
68425: LD_INT 3
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: LIST
68437: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68438: LD_ADDR_VAR 0 24
68442: PUSH
68443: LD_INT 3
68445: PUSH
68446: LD_INT 0
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 3
68455: PUSH
68456: LD_INT 1
68458: NEG
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 4
68466: PUSH
68467: LD_INT 1
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: LIST
68478: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68479: LD_ADDR_VAR 0 25
68483: PUSH
68484: LD_INT 3
68486: PUSH
68487: LD_INT 3
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 4
68496: PUSH
68497: LD_INT 3
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 3
68506: PUSH
68507: LD_INT 4
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: LIST
68518: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68519: LD_ADDR_VAR 0 26
68523: PUSH
68524: LD_INT 0
68526: PUSH
68527: LD_INT 3
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 1
68536: PUSH
68537: LD_INT 4
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 1
68546: NEG
68547: PUSH
68548: LD_INT 3
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: LIST
68559: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68560: LD_ADDR_VAR 0 27
68564: PUSH
68565: LD_INT 3
68567: NEG
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 3
68578: NEG
68579: PUSH
68580: LD_INT 1
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 4
68589: NEG
68590: PUSH
68591: LD_INT 1
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: LIST
68603: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68604: LD_ADDR_VAR 0 28
68608: PUSH
68609: LD_INT 3
68611: NEG
68612: PUSH
68613: LD_INT 3
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 3
68623: NEG
68624: PUSH
68625: LD_INT 4
68627: NEG
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 4
68635: NEG
68636: PUSH
68637: LD_INT 3
68639: NEG
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: LIST
68649: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68650: LD_ADDR_VAR 0 29
68654: PUSH
68655: LD_INT 1
68657: NEG
68658: PUSH
68659: LD_INT 3
68661: NEG
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: PUSH
68667: LD_INT 0
68669: PUSH
68670: LD_INT 3
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 1
68680: PUSH
68681: LD_INT 2
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 1
68691: NEG
68692: PUSH
68693: LD_INT 4
68695: NEG
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 0
68703: PUSH
68704: LD_INT 4
68706: NEG
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 1
68714: PUSH
68715: LD_INT 3
68717: NEG
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 1
68725: NEG
68726: PUSH
68727: LD_INT 5
68729: NEG
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 0
68737: PUSH
68738: LD_INT 5
68740: NEG
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 1
68748: PUSH
68749: LD_INT 4
68751: NEG
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 1
68759: NEG
68760: PUSH
68761: LD_INT 6
68763: NEG
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 0
68771: PUSH
68772: LD_INT 6
68774: NEG
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: LD_INT 5
68785: NEG
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68805: LD_ADDR_VAR 0 30
68809: PUSH
68810: LD_INT 2
68812: PUSH
68813: LD_INT 1
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 3
68823: PUSH
68824: LD_INT 0
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 3
68833: PUSH
68834: LD_INT 1
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 3
68843: PUSH
68844: LD_INT 1
68846: NEG
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 4
68854: PUSH
68855: LD_INT 0
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 4
68864: PUSH
68865: LD_INT 1
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 4
68874: PUSH
68875: LD_INT 1
68877: NEG
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 5
68885: PUSH
68886: LD_INT 0
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 5
68895: PUSH
68896: LD_INT 1
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 5
68905: PUSH
68906: LD_INT 1
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 6
68916: PUSH
68917: LD_INT 0
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 6
68926: PUSH
68927: LD_INT 1
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68948: LD_ADDR_VAR 0 31
68952: PUSH
68953: LD_INT 3
68955: PUSH
68956: LD_INT 2
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 3
68965: PUSH
68966: LD_INT 3
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 2
68975: PUSH
68976: LD_INT 3
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 4
68985: PUSH
68986: LD_INT 3
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 4
68995: PUSH
68996: LD_INT 4
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 3
69005: PUSH
69006: LD_INT 4
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 5
69015: PUSH
69016: LD_INT 4
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 5
69025: PUSH
69026: LD_INT 5
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 4
69035: PUSH
69036: LD_INT 5
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 6
69045: PUSH
69046: LD_INT 5
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 6
69055: PUSH
69056: LD_INT 6
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 5
69065: PUSH
69066: LD_INT 6
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69087: LD_ADDR_VAR 0 32
69091: PUSH
69092: LD_INT 1
69094: PUSH
69095: LD_INT 3
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 0
69104: PUSH
69105: LD_INT 3
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 1
69114: NEG
69115: PUSH
69116: LD_INT 2
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 1
69125: PUSH
69126: LD_INT 4
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 0
69135: PUSH
69136: LD_INT 4
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 1
69145: NEG
69146: PUSH
69147: LD_INT 3
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 1
69156: PUSH
69157: LD_INT 5
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 0
69166: PUSH
69167: LD_INT 5
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 1
69176: NEG
69177: PUSH
69178: LD_INT 4
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 1
69187: PUSH
69188: LD_INT 6
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 0
69197: PUSH
69198: LD_INT 6
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 1
69207: NEG
69208: PUSH
69209: LD_INT 5
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69230: LD_ADDR_VAR 0 33
69234: PUSH
69235: LD_INT 2
69237: NEG
69238: PUSH
69239: LD_INT 1
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 3
69248: NEG
69249: PUSH
69250: LD_INT 0
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 3
69259: NEG
69260: PUSH
69261: LD_INT 1
69263: NEG
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 3
69271: NEG
69272: PUSH
69273: LD_INT 1
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 4
69282: NEG
69283: PUSH
69284: LD_INT 0
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 4
69293: NEG
69294: PUSH
69295: LD_INT 1
69297: NEG
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 4
69305: NEG
69306: PUSH
69307: LD_INT 1
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 5
69316: NEG
69317: PUSH
69318: LD_INT 0
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 5
69327: NEG
69328: PUSH
69329: LD_INT 1
69331: NEG
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 5
69339: NEG
69340: PUSH
69341: LD_INT 1
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 6
69350: NEG
69351: PUSH
69352: LD_INT 0
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 6
69361: NEG
69362: PUSH
69363: LD_INT 1
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69385: LD_ADDR_VAR 0 34
69389: PUSH
69390: LD_INT 2
69392: NEG
69393: PUSH
69394: LD_INT 3
69396: NEG
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 3
69404: NEG
69405: PUSH
69406: LD_INT 2
69408: NEG
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 3
69416: NEG
69417: PUSH
69418: LD_INT 3
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 3
69428: NEG
69429: PUSH
69430: LD_INT 4
69432: NEG
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 4
69440: NEG
69441: PUSH
69442: LD_INT 3
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 4
69452: NEG
69453: PUSH
69454: LD_INT 4
69456: NEG
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 4
69464: NEG
69465: PUSH
69466: LD_INT 5
69468: NEG
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 5
69476: NEG
69477: PUSH
69478: LD_INT 4
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 5
69488: NEG
69489: PUSH
69490: LD_INT 5
69492: NEG
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 5
69500: NEG
69501: PUSH
69502: LD_INT 6
69504: NEG
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 6
69512: NEG
69513: PUSH
69514: LD_INT 5
69516: NEG
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 6
69524: NEG
69525: PUSH
69526: LD_INT 6
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69548: LD_ADDR_VAR 0 41
69552: PUSH
69553: LD_INT 0
69555: PUSH
69556: LD_INT 2
69558: NEG
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 1
69566: NEG
69567: PUSH
69568: LD_INT 3
69570: NEG
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 1
69578: PUSH
69579: LD_INT 2
69581: NEG
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: LIST
69591: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69592: LD_ADDR_VAR 0 42
69596: PUSH
69597: LD_INT 2
69599: PUSH
69600: LD_INT 0
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 2
69609: PUSH
69610: LD_INT 1
69612: NEG
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 3
69620: PUSH
69621: LD_INT 1
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: LIST
69632: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69633: LD_ADDR_VAR 0 43
69637: PUSH
69638: LD_INT 2
69640: PUSH
69641: LD_INT 2
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 3
69650: PUSH
69651: LD_INT 2
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 2
69660: PUSH
69661: LD_INT 3
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: LIST
69672: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69673: LD_ADDR_VAR 0 44
69677: PUSH
69678: LD_INT 0
69680: PUSH
69681: LD_INT 2
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 1
69690: PUSH
69691: LD_INT 3
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 1
69700: NEG
69701: PUSH
69702: LD_INT 2
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: LIST
69713: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69714: LD_ADDR_VAR 0 45
69718: PUSH
69719: LD_INT 2
69721: NEG
69722: PUSH
69723: LD_INT 0
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 2
69732: NEG
69733: PUSH
69734: LD_INT 1
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 3
69743: NEG
69744: PUSH
69745: LD_INT 1
69747: NEG
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: LIST
69757: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69758: LD_ADDR_VAR 0 46
69762: PUSH
69763: LD_INT 2
69765: NEG
69766: PUSH
69767: LD_INT 2
69769: NEG
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_INT 2
69777: NEG
69778: PUSH
69779: LD_INT 3
69781: NEG
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 3
69789: NEG
69790: PUSH
69791: LD_INT 2
69793: NEG
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: LIST
69803: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69804: LD_ADDR_VAR 0 47
69808: PUSH
69809: LD_INT 2
69811: NEG
69812: PUSH
69813: LD_INT 3
69815: NEG
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 1
69823: NEG
69824: PUSH
69825: LD_INT 3
69827: NEG
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69837: LD_ADDR_VAR 0 48
69841: PUSH
69842: LD_INT 1
69844: PUSH
69845: LD_INT 2
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 2
69855: PUSH
69856: LD_INT 1
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69868: LD_ADDR_VAR 0 49
69872: PUSH
69873: LD_INT 3
69875: PUSH
69876: LD_INT 1
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 3
69885: PUSH
69886: LD_INT 2
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69897: LD_ADDR_VAR 0 50
69901: PUSH
69902: LD_INT 2
69904: PUSH
69905: LD_INT 3
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 1
69914: PUSH
69915: LD_INT 3
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69926: LD_ADDR_VAR 0 51
69930: PUSH
69931: LD_INT 1
69933: NEG
69934: PUSH
69935: LD_INT 2
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 2
69944: NEG
69945: PUSH
69946: LD_INT 1
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69957: LD_ADDR_VAR 0 52
69961: PUSH
69962: LD_INT 3
69964: NEG
69965: PUSH
69966: LD_INT 1
69968: NEG
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 3
69976: NEG
69977: PUSH
69978: LD_INT 2
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69990: LD_ADDR_VAR 0 53
69994: PUSH
69995: LD_INT 1
69997: NEG
69998: PUSH
69999: LD_INT 3
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 0
70009: PUSH
70010: LD_INT 3
70012: NEG
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 1
70020: PUSH
70021: LD_INT 2
70023: NEG
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: LIST
70033: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70034: LD_ADDR_VAR 0 54
70038: PUSH
70039: LD_INT 2
70041: PUSH
70042: LD_INT 1
70044: NEG
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 3
70052: PUSH
70053: LD_INT 0
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 3
70062: PUSH
70063: LD_INT 1
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: LIST
70074: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70075: LD_ADDR_VAR 0 55
70079: PUSH
70080: LD_INT 3
70082: PUSH
70083: LD_INT 2
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 3
70092: PUSH
70093: LD_INT 3
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 2
70102: PUSH
70103: LD_INT 3
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: LIST
70114: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70115: LD_ADDR_VAR 0 56
70119: PUSH
70120: LD_INT 1
70122: PUSH
70123: LD_INT 3
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 0
70132: PUSH
70133: LD_INT 3
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 1
70142: NEG
70143: PUSH
70144: LD_INT 2
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: LIST
70155: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70156: LD_ADDR_VAR 0 57
70160: PUSH
70161: LD_INT 2
70163: NEG
70164: PUSH
70165: LD_INT 1
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 3
70174: NEG
70175: PUSH
70176: LD_INT 0
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 3
70185: NEG
70186: PUSH
70187: LD_INT 1
70189: NEG
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: LIST
70199: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70200: LD_ADDR_VAR 0 58
70204: PUSH
70205: LD_INT 2
70207: NEG
70208: PUSH
70209: LD_INT 3
70211: NEG
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 3
70219: NEG
70220: PUSH
70221: LD_INT 2
70223: NEG
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 3
70231: NEG
70232: PUSH
70233: LD_INT 3
70235: NEG
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: LIST
70245: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70246: LD_ADDR_VAR 0 59
70250: PUSH
70251: LD_INT 1
70253: NEG
70254: PUSH
70255: LD_INT 2
70257: NEG
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: LD_INT 2
70268: NEG
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 1
70276: PUSH
70277: LD_INT 1
70279: NEG
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: LIST
70289: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70290: LD_ADDR_VAR 0 60
70294: PUSH
70295: LD_INT 1
70297: PUSH
70298: LD_INT 1
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 2
70308: PUSH
70309: LD_INT 0
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 2
70318: PUSH
70319: LD_INT 1
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: LIST
70330: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70331: LD_ADDR_VAR 0 61
70335: PUSH
70336: LD_INT 2
70338: PUSH
70339: LD_INT 1
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 2
70348: PUSH
70349: LD_INT 2
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 1
70358: PUSH
70359: LD_INT 2
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: LIST
70370: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70371: LD_ADDR_VAR 0 62
70375: PUSH
70376: LD_INT 1
70378: PUSH
70379: LD_INT 2
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 0
70388: PUSH
70389: LD_INT 2
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 1
70398: NEG
70399: PUSH
70400: LD_INT 1
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: LIST
70411: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70412: LD_ADDR_VAR 0 63
70416: PUSH
70417: LD_INT 1
70419: NEG
70420: PUSH
70421: LD_INT 1
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 2
70430: NEG
70431: PUSH
70432: LD_INT 0
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 2
70441: NEG
70442: PUSH
70443: LD_INT 1
70445: NEG
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: LIST
70455: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70456: LD_ADDR_VAR 0 64
70460: PUSH
70461: LD_INT 1
70463: NEG
70464: PUSH
70465: LD_INT 2
70467: NEG
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 2
70475: NEG
70476: PUSH
70477: LD_INT 1
70479: NEG
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 2
70487: NEG
70488: PUSH
70489: LD_INT 2
70491: NEG
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: LIST
70501: ST_TO_ADDR
// end ; 2 :
70502: GO 73768
70504: LD_INT 2
70506: DOUBLE
70507: EQUAL
70508: IFTRUE 70512
70510: GO 73767
70512: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70513: LD_ADDR_VAR 0 29
70517: PUSH
70518: LD_INT 4
70520: PUSH
70521: LD_INT 0
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 4
70530: PUSH
70531: LD_INT 1
70533: NEG
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 5
70541: PUSH
70542: LD_INT 0
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 5
70551: PUSH
70552: LD_INT 1
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 4
70561: PUSH
70562: LD_INT 1
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: LD_INT 3
70571: PUSH
70572: LD_INT 0
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 3
70581: PUSH
70582: LD_INT 1
70584: NEG
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 3
70592: PUSH
70593: LD_INT 2
70595: NEG
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 5
70603: PUSH
70604: LD_INT 2
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 3
70613: PUSH
70614: LD_INT 3
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 3
70623: PUSH
70624: LD_INT 2
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 4
70633: PUSH
70634: LD_INT 3
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 4
70643: PUSH
70644: LD_INT 4
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 3
70653: PUSH
70654: LD_INT 4
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 2
70663: PUSH
70664: LD_INT 3
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 2
70673: PUSH
70674: LD_INT 2
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 4
70683: PUSH
70684: LD_INT 2
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 2
70693: PUSH
70694: LD_INT 4
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 0
70703: PUSH
70704: LD_INT 4
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: LD_INT 3
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 1
70723: PUSH
70724: LD_INT 4
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 1
70733: PUSH
70734: LD_INT 5
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 0
70743: PUSH
70744: LD_INT 5
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 1
70753: NEG
70754: PUSH
70755: LD_INT 4
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 1
70764: NEG
70765: PUSH
70766: LD_INT 3
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 2
70775: PUSH
70776: LD_INT 5
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 2
70785: NEG
70786: PUSH
70787: LD_INT 3
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 3
70796: NEG
70797: PUSH
70798: LD_INT 0
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 3
70807: NEG
70808: PUSH
70809: LD_INT 1
70811: NEG
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 2
70819: NEG
70820: PUSH
70821: LD_INT 0
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: PUSH
70828: LD_INT 2
70830: NEG
70831: PUSH
70832: LD_INT 1
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 3
70841: NEG
70842: PUSH
70843: LD_INT 1
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 4
70852: NEG
70853: PUSH
70854: LD_INT 0
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 4
70863: NEG
70864: PUSH
70865: LD_INT 1
70867: NEG
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 4
70875: NEG
70876: PUSH
70877: LD_INT 2
70879: NEG
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 2
70887: NEG
70888: PUSH
70889: LD_INT 2
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 4
70898: NEG
70899: PUSH
70900: LD_INT 4
70902: NEG
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 4
70910: NEG
70911: PUSH
70912: LD_INT 5
70914: NEG
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 3
70922: NEG
70923: PUSH
70924: LD_INT 4
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 3
70934: NEG
70935: PUSH
70936: LD_INT 3
70938: NEG
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 4
70946: NEG
70947: PUSH
70948: LD_INT 3
70950: NEG
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 5
70958: NEG
70959: PUSH
70960: LD_INT 4
70962: NEG
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 5
70970: NEG
70971: PUSH
70972: LD_INT 5
70974: NEG
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 3
70982: NEG
70983: PUSH
70984: LD_INT 5
70986: NEG
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 5
70994: NEG
70995: PUSH
70996: LD_INT 3
70998: NEG
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71051: LD_ADDR_VAR 0 30
71055: PUSH
71056: LD_INT 4
71058: PUSH
71059: LD_INT 4
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 4
71068: PUSH
71069: LD_INT 3
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 5
71078: PUSH
71079: LD_INT 4
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 5
71088: PUSH
71089: LD_INT 5
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: LD_INT 4
71098: PUSH
71099: LD_INT 5
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 3
71108: PUSH
71109: LD_INT 4
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 3
71118: PUSH
71119: LD_INT 3
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 5
71128: PUSH
71129: LD_INT 3
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 3
71138: PUSH
71139: LD_INT 5
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 0
71148: PUSH
71149: LD_INT 3
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: LD_INT 0
71158: PUSH
71159: LD_INT 2
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 1
71168: PUSH
71169: LD_INT 3
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 1
71178: PUSH
71179: LD_INT 4
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 0
71188: PUSH
71189: LD_INT 4
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 1
71198: NEG
71199: PUSH
71200: LD_INT 3
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 1
71209: NEG
71210: PUSH
71211: LD_INT 2
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: LD_INT 2
71220: PUSH
71221: LD_INT 4
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 2
71230: NEG
71231: PUSH
71232: LD_INT 2
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 4
71241: NEG
71242: PUSH
71243: LD_INT 0
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PUSH
71250: LD_INT 4
71252: NEG
71253: PUSH
71254: LD_INT 1
71256: NEG
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 3
71264: NEG
71265: PUSH
71266: LD_INT 0
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: PUSH
71273: LD_INT 3
71275: NEG
71276: PUSH
71277: LD_INT 1
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 4
71286: NEG
71287: PUSH
71288: LD_INT 1
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 5
71297: NEG
71298: PUSH
71299: LD_INT 0
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 5
71308: NEG
71309: PUSH
71310: LD_INT 1
71312: NEG
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 5
71320: NEG
71321: PUSH
71322: LD_INT 2
71324: NEG
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 3
71332: NEG
71333: PUSH
71334: LD_INT 2
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: LD_INT 3
71343: NEG
71344: PUSH
71345: LD_INT 3
71347: NEG
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 3
71355: NEG
71356: PUSH
71357: LD_INT 4
71359: NEG
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 2
71367: NEG
71368: PUSH
71369: LD_INT 3
71371: NEG
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 2
71379: NEG
71380: PUSH
71381: LD_INT 2
71383: NEG
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 3
71391: NEG
71392: PUSH
71393: LD_INT 2
71395: NEG
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 4
71403: NEG
71404: PUSH
71405: LD_INT 3
71407: NEG
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 4
71415: NEG
71416: PUSH
71417: LD_INT 4
71419: NEG
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: LD_INT 2
71427: NEG
71428: PUSH
71429: LD_INT 4
71431: NEG
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 4
71439: NEG
71440: PUSH
71441: LD_INT 2
71443: NEG
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 0
71451: PUSH
71452: LD_INT 4
71454: NEG
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 0
71462: PUSH
71463: LD_INT 5
71465: NEG
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 1
71473: PUSH
71474: LD_INT 4
71476: NEG
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 1
71484: PUSH
71485: LD_INT 3
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 0
71495: PUSH
71496: LD_INT 3
71498: NEG
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 1
71506: NEG
71507: PUSH
71508: LD_INT 4
71510: NEG
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 1
71518: NEG
71519: PUSH
71520: LD_INT 5
71522: NEG
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 2
71530: PUSH
71531: LD_INT 3
71533: NEG
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 2
71541: NEG
71542: PUSH
71543: LD_INT 5
71545: NEG
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71598: LD_ADDR_VAR 0 31
71602: PUSH
71603: LD_INT 0
71605: PUSH
71606: LD_INT 4
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_INT 0
71615: PUSH
71616: LD_INT 3
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 1
71625: PUSH
71626: LD_INT 4
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 1
71635: PUSH
71636: LD_INT 5
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 0
71645: PUSH
71646: LD_INT 5
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 1
71655: NEG
71656: PUSH
71657: LD_INT 4
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 1
71666: NEG
71667: PUSH
71668: LD_INT 3
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 2
71677: PUSH
71678: LD_INT 5
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 2
71687: NEG
71688: PUSH
71689: LD_INT 3
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 3
71698: NEG
71699: PUSH
71700: LD_INT 0
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 3
71709: NEG
71710: PUSH
71711: LD_INT 1
71713: NEG
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 2
71721: NEG
71722: PUSH
71723: LD_INT 0
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 2
71732: NEG
71733: PUSH
71734: LD_INT 1
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: PUSH
71741: LD_INT 3
71743: NEG
71744: PUSH
71745: LD_INT 1
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 4
71754: NEG
71755: PUSH
71756: LD_INT 0
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 4
71765: NEG
71766: PUSH
71767: LD_INT 1
71769: NEG
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 4
71777: NEG
71778: PUSH
71779: LD_INT 2
71781: NEG
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 2
71789: NEG
71790: PUSH
71791: LD_INT 2
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 4
71800: NEG
71801: PUSH
71802: LD_INT 4
71804: NEG
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 4
71812: NEG
71813: PUSH
71814: LD_INT 5
71816: NEG
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 3
71824: NEG
71825: PUSH
71826: LD_INT 4
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 3
71836: NEG
71837: PUSH
71838: LD_INT 3
71840: NEG
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 4
71848: NEG
71849: PUSH
71850: LD_INT 3
71852: NEG
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 5
71860: NEG
71861: PUSH
71862: LD_INT 4
71864: NEG
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: LD_INT 5
71872: NEG
71873: PUSH
71874: LD_INT 5
71876: NEG
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: PUSH
71882: LD_INT 3
71884: NEG
71885: PUSH
71886: LD_INT 5
71888: NEG
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 5
71896: NEG
71897: PUSH
71898: LD_INT 3
71900: NEG
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: LD_INT 0
71908: PUSH
71909: LD_INT 3
71911: NEG
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: PUSH
71917: LD_INT 0
71919: PUSH
71920: LD_INT 4
71922: NEG
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 1
71930: PUSH
71931: LD_INT 3
71933: NEG
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 1
71941: PUSH
71942: LD_INT 2
71944: NEG
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 0
71952: PUSH
71953: LD_INT 2
71955: NEG
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 1
71963: NEG
71964: PUSH
71965: LD_INT 3
71967: NEG
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: LD_INT 1
71975: NEG
71976: PUSH
71977: LD_INT 4
71979: NEG
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 2
71987: PUSH
71988: LD_INT 2
71990: NEG
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PUSH
71996: LD_INT 2
71998: NEG
71999: PUSH
72000: LD_INT 4
72002: NEG
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: LD_INT 4
72010: PUSH
72011: LD_INT 0
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: PUSH
72018: LD_INT 4
72020: PUSH
72021: LD_INT 1
72023: NEG
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_INT 5
72031: PUSH
72032: LD_INT 0
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 5
72041: PUSH
72042: LD_INT 1
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 4
72051: PUSH
72052: LD_INT 1
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 3
72061: PUSH
72062: LD_INT 0
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 3
72071: PUSH
72072: LD_INT 1
72074: NEG
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PUSH
72080: LD_INT 3
72082: PUSH
72083: LD_INT 2
72085: NEG
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 5
72093: PUSH
72094: LD_INT 2
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72148: LD_ADDR_VAR 0 32
72152: PUSH
72153: LD_INT 4
72155: NEG
72156: PUSH
72157: LD_INT 0
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 4
72166: NEG
72167: PUSH
72168: LD_INT 1
72170: NEG
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 3
72178: NEG
72179: PUSH
72180: LD_INT 0
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: LD_INT 3
72189: NEG
72190: PUSH
72191: LD_INT 1
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 4
72200: NEG
72201: PUSH
72202: LD_INT 1
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 5
72211: NEG
72212: PUSH
72213: LD_INT 0
72215: PUSH
72216: EMPTY
72217: LIST
72218: LIST
72219: PUSH
72220: LD_INT 5
72222: NEG
72223: PUSH
72224: LD_INT 1
72226: NEG
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: LD_INT 5
72234: NEG
72235: PUSH
72236: LD_INT 2
72238: NEG
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 3
72246: NEG
72247: PUSH
72248: LD_INT 2
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 3
72257: NEG
72258: PUSH
72259: LD_INT 3
72261: NEG
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 3
72269: NEG
72270: PUSH
72271: LD_INT 4
72273: NEG
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 2
72281: NEG
72282: PUSH
72283: LD_INT 3
72285: NEG
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 2
72293: NEG
72294: PUSH
72295: LD_INT 2
72297: NEG
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 3
72305: NEG
72306: PUSH
72307: LD_INT 2
72309: NEG
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 4
72317: NEG
72318: PUSH
72319: LD_INT 3
72321: NEG
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_INT 4
72329: NEG
72330: PUSH
72331: LD_INT 4
72333: NEG
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 2
72341: NEG
72342: PUSH
72343: LD_INT 4
72345: NEG
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 4
72353: NEG
72354: PUSH
72355: LD_INT 2
72357: NEG
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 0
72365: PUSH
72366: LD_INT 4
72368: NEG
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 0
72376: PUSH
72377: LD_INT 5
72379: NEG
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 1
72387: PUSH
72388: LD_INT 4
72390: NEG
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 1
72398: PUSH
72399: LD_INT 3
72401: NEG
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 0
72409: PUSH
72410: LD_INT 3
72412: NEG
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 1
72420: NEG
72421: PUSH
72422: LD_INT 4
72424: NEG
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 1
72432: NEG
72433: PUSH
72434: LD_INT 5
72436: NEG
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 2
72444: PUSH
72445: LD_INT 3
72447: NEG
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 2
72455: NEG
72456: PUSH
72457: LD_INT 5
72459: NEG
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_INT 3
72467: PUSH
72468: LD_INT 0
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PUSH
72475: LD_INT 3
72477: PUSH
72478: LD_INT 1
72480: NEG
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 4
72488: PUSH
72489: LD_INT 0
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: PUSH
72496: LD_INT 4
72498: PUSH
72499: LD_INT 1
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PUSH
72506: LD_INT 3
72508: PUSH
72509: LD_INT 1
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: PUSH
72516: LD_INT 2
72518: PUSH
72519: LD_INT 0
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: LD_INT 2
72528: PUSH
72529: LD_INT 1
72531: NEG
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: PUSH
72537: LD_INT 2
72539: PUSH
72540: LD_INT 2
72542: NEG
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 4
72550: PUSH
72551: LD_INT 2
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: PUSH
72558: LD_INT 4
72560: PUSH
72561: LD_INT 4
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: PUSH
72568: LD_INT 4
72570: PUSH
72571: LD_INT 3
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: PUSH
72578: LD_INT 5
72580: PUSH
72581: LD_INT 4
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: LD_INT 5
72590: PUSH
72591: LD_INT 5
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 4
72600: PUSH
72601: LD_INT 5
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 3
72610: PUSH
72611: LD_INT 4
72613: PUSH
72614: EMPTY
72615: LIST
72616: LIST
72617: PUSH
72618: LD_INT 3
72620: PUSH
72621: LD_INT 3
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 5
72630: PUSH
72631: LD_INT 3
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 3
72640: PUSH
72641: LD_INT 5
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72695: LD_ADDR_VAR 0 33
72699: PUSH
72700: LD_INT 4
72702: NEG
72703: PUSH
72704: LD_INT 4
72706: NEG
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PUSH
72712: LD_INT 4
72714: NEG
72715: PUSH
72716: LD_INT 5
72718: NEG
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 3
72726: NEG
72727: PUSH
72728: LD_INT 4
72730: NEG
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: LD_INT 3
72738: NEG
72739: PUSH
72740: LD_INT 3
72742: NEG
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 4
72750: NEG
72751: PUSH
72752: LD_INT 3
72754: NEG
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: PUSH
72760: LD_INT 5
72762: NEG
72763: PUSH
72764: LD_INT 4
72766: NEG
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: PUSH
72772: LD_INT 5
72774: NEG
72775: PUSH
72776: LD_INT 5
72778: NEG
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 3
72786: NEG
72787: PUSH
72788: LD_INT 5
72790: NEG
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 5
72798: NEG
72799: PUSH
72800: LD_INT 3
72802: NEG
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 0
72810: PUSH
72811: LD_INT 3
72813: NEG
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_INT 0
72821: PUSH
72822: LD_INT 4
72824: NEG
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 1
72832: PUSH
72833: LD_INT 3
72835: NEG
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: LD_INT 1
72843: PUSH
72844: LD_INT 2
72846: NEG
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 0
72854: PUSH
72855: LD_INT 2
72857: NEG
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: LD_INT 1
72865: NEG
72866: PUSH
72867: LD_INT 3
72869: NEG
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 1
72877: NEG
72878: PUSH
72879: LD_INT 4
72881: NEG
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 2
72889: PUSH
72890: LD_INT 2
72892: NEG
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: PUSH
72898: LD_INT 2
72900: NEG
72901: PUSH
72902: LD_INT 4
72904: NEG
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: LD_INT 4
72912: PUSH
72913: LD_INT 0
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: PUSH
72920: LD_INT 4
72922: PUSH
72923: LD_INT 1
72925: NEG
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 5
72933: PUSH
72934: LD_INT 0
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: LD_INT 5
72943: PUSH
72944: LD_INT 1
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 4
72953: PUSH
72954: LD_INT 1
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 3
72963: PUSH
72964: LD_INT 0
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 3
72973: PUSH
72974: LD_INT 1
72976: NEG
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 3
72984: PUSH
72985: LD_INT 2
72987: NEG
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: LD_INT 5
72995: PUSH
72996: LD_INT 2
72998: PUSH
72999: EMPTY
73000: LIST
73001: LIST
73002: PUSH
73003: LD_INT 3
73005: PUSH
73006: LD_INT 3
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: PUSH
73013: LD_INT 3
73015: PUSH
73016: LD_INT 2
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PUSH
73023: LD_INT 4
73025: PUSH
73026: LD_INT 3
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: PUSH
73033: LD_INT 4
73035: PUSH
73036: LD_INT 4
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: LD_INT 3
73045: PUSH
73046: LD_INT 4
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: PUSH
73053: LD_INT 2
73055: PUSH
73056: LD_INT 3
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 2
73065: PUSH
73066: LD_INT 2
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: LD_INT 4
73075: PUSH
73076: LD_INT 2
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: LD_INT 2
73085: PUSH
73086: LD_INT 4
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: PUSH
73093: LD_INT 0
73095: PUSH
73096: LD_INT 4
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: PUSH
73103: LD_INT 0
73105: PUSH
73106: LD_INT 3
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: PUSH
73113: LD_INT 1
73115: PUSH
73116: LD_INT 4
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 1
73125: PUSH
73126: LD_INT 5
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 0
73135: PUSH
73136: LD_INT 5
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PUSH
73143: LD_INT 1
73145: NEG
73146: PUSH
73147: LD_INT 4
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: PUSH
73154: LD_INT 1
73156: NEG
73157: PUSH
73158: LD_INT 3
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PUSH
73165: LD_INT 2
73167: PUSH
73168: LD_INT 5
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: PUSH
73175: LD_INT 2
73177: NEG
73178: PUSH
73179: LD_INT 3
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73233: LD_ADDR_VAR 0 34
73237: PUSH
73238: LD_INT 0
73240: PUSH
73241: LD_INT 4
73243: NEG
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: PUSH
73249: LD_INT 0
73251: PUSH
73252: LD_INT 5
73254: NEG
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 1
73262: PUSH
73263: LD_INT 4
73265: NEG
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 1
73273: PUSH
73274: LD_INT 3
73276: NEG
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 0
73284: PUSH
73285: LD_INT 3
73287: NEG
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_INT 1
73295: NEG
73296: PUSH
73297: LD_INT 4
73299: NEG
73300: PUSH
73301: EMPTY
73302: LIST
73303: LIST
73304: PUSH
73305: LD_INT 1
73307: NEG
73308: PUSH
73309: LD_INT 5
73311: NEG
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: LD_INT 2
73319: PUSH
73320: LD_INT 3
73322: NEG
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 2
73330: NEG
73331: PUSH
73332: LD_INT 5
73334: NEG
73335: PUSH
73336: EMPTY
73337: LIST
73338: LIST
73339: PUSH
73340: LD_INT 3
73342: PUSH
73343: LD_INT 0
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: PUSH
73350: LD_INT 3
73352: PUSH
73353: LD_INT 1
73355: NEG
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: PUSH
73361: LD_INT 4
73363: PUSH
73364: LD_INT 0
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: LD_INT 4
73373: PUSH
73374: LD_INT 1
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: LD_INT 3
73383: PUSH
73384: LD_INT 1
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PUSH
73391: LD_INT 2
73393: PUSH
73394: LD_INT 0
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 2
73403: PUSH
73404: LD_INT 1
73406: NEG
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PUSH
73412: LD_INT 2
73414: PUSH
73415: LD_INT 2
73417: NEG
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 4
73425: PUSH
73426: LD_INT 2
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: PUSH
73433: LD_INT 4
73435: PUSH
73436: LD_INT 4
73438: PUSH
73439: EMPTY
73440: LIST
73441: LIST
73442: PUSH
73443: LD_INT 4
73445: PUSH
73446: LD_INT 3
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: PUSH
73453: LD_INT 5
73455: PUSH
73456: LD_INT 4
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: PUSH
73463: LD_INT 5
73465: PUSH
73466: LD_INT 5
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: LD_INT 4
73475: PUSH
73476: LD_INT 5
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 3
73485: PUSH
73486: LD_INT 4
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 3
73495: PUSH
73496: LD_INT 3
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PUSH
73503: LD_INT 5
73505: PUSH
73506: LD_INT 3
73508: PUSH
73509: EMPTY
73510: LIST
73511: LIST
73512: PUSH
73513: LD_INT 3
73515: PUSH
73516: LD_INT 5
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: PUSH
73523: LD_INT 0
73525: PUSH
73526: LD_INT 3
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: PUSH
73533: LD_INT 0
73535: PUSH
73536: LD_INT 2
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: PUSH
73543: LD_INT 1
73545: PUSH
73546: LD_INT 3
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: PUSH
73553: LD_INT 1
73555: PUSH
73556: LD_INT 4
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: PUSH
73563: LD_INT 0
73565: PUSH
73566: LD_INT 4
73568: PUSH
73569: EMPTY
73570: LIST
73571: LIST
73572: PUSH
73573: LD_INT 1
73575: NEG
73576: PUSH
73577: LD_INT 3
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: LD_INT 1
73586: NEG
73587: PUSH
73588: LD_INT 2
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 2
73597: PUSH
73598: LD_INT 4
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: PUSH
73605: LD_INT 2
73607: NEG
73608: PUSH
73609: LD_INT 2
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PUSH
73616: LD_INT 4
73618: NEG
73619: PUSH
73620: LD_INT 0
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: LD_INT 4
73629: NEG
73630: PUSH
73631: LD_INT 1
73633: NEG
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: PUSH
73639: LD_INT 3
73641: NEG
73642: PUSH
73643: LD_INT 0
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_INT 3
73652: NEG
73653: PUSH
73654: LD_INT 1
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: PUSH
73661: LD_INT 4
73663: NEG
73664: PUSH
73665: LD_INT 1
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PUSH
73672: LD_INT 5
73674: NEG
73675: PUSH
73676: LD_INT 0
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: LD_INT 5
73685: NEG
73686: PUSH
73687: LD_INT 1
73689: NEG
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: LD_INT 5
73697: NEG
73698: PUSH
73699: LD_INT 2
73701: NEG
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PUSH
73707: LD_INT 3
73709: NEG
73710: PUSH
73711: LD_INT 2
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: ST_TO_ADDR
// end ; end ;
73765: GO 73768
73767: POP
// case btype of b_depot , b_warehouse :
73768: LD_VAR 0 1
73772: PUSH
73773: LD_INT 0
73775: DOUBLE
73776: EQUAL
73777: IFTRUE 73787
73779: LD_INT 1
73781: DOUBLE
73782: EQUAL
73783: IFTRUE 73787
73785: GO 73988
73787: POP
// case nation of nation_american :
73788: LD_VAR 0 5
73792: PUSH
73793: LD_INT 1
73795: DOUBLE
73796: EQUAL
73797: IFTRUE 73801
73799: GO 73857
73801: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73802: LD_ADDR_VAR 0 9
73806: PUSH
73807: LD_VAR 0 11
73811: PUSH
73812: LD_VAR 0 12
73816: PUSH
73817: LD_VAR 0 13
73821: PUSH
73822: LD_VAR 0 14
73826: PUSH
73827: LD_VAR 0 15
73831: PUSH
73832: LD_VAR 0 16
73836: PUSH
73837: EMPTY
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: PUSH
73845: LD_VAR 0 4
73849: PUSH
73850: LD_INT 1
73852: PLUS
73853: ARRAY
73854: ST_TO_ADDR
73855: GO 73986
73857: LD_INT 2
73859: DOUBLE
73860: EQUAL
73861: IFTRUE 73865
73863: GO 73921
73865: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73866: LD_ADDR_VAR 0 9
73870: PUSH
73871: LD_VAR 0 17
73875: PUSH
73876: LD_VAR 0 18
73880: PUSH
73881: LD_VAR 0 19
73885: PUSH
73886: LD_VAR 0 20
73890: PUSH
73891: LD_VAR 0 21
73895: PUSH
73896: LD_VAR 0 22
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: LIST
73905: LIST
73906: LIST
73907: LIST
73908: PUSH
73909: LD_VAR 0 4
73913: PUSH
73914: LD_INT 1
73916: PLUS
73917: ARRAY
73918: ST_TO_ADDR
73919: GO 73986
73921: LD_INT 3
73923: DOUBLE
73924: EQUAL
73925: IFTRUE 73929
73927: GO 73985
73929: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73930: LD_ADDR_VAR 0 9
73934: PUSH
73935: LD_VAR 0 23
73939: PUSH
73940: LD_VAR 0 24
73944: PUSH
73945: LD_VAR 0 25
73949: PUSH
73950: LD_VAR 0 26
73954: PUSH
73955: LD_VAR 0 27
73959: PUSH
73960: LD_VAR 0 28
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: LIST
73969: LIST
73970: LIST
73971: LIST
73972: PUSH
73973: LD_VAR 0 4
73977: PUSH
73978: LD_INT 1
73980: PLUS
73981: ARRAY
73982: ST_TO_ADDR
73983: GO 73986
73985: POP
73986: GO 74541
73988: LD_INT 2
73990: DOUBLE
73991: EQUAL
73992: IFTRUE 74002
73994: LD_INT 3
73996: DOUBLE
73997: EQUAL
73998: IFTRUE 74002
74000: GO 74058
74002: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74003: LD_ADDR_VAR 0 9
74007: PUSH
74008: LD_VAR 0 29
74012: PUSH
74013: LD_VAR 0 30
74017: PUSH
74018: LD_VAR 0 31
74022: PUSH
74023: LD_VAR 0 32
74027: PUSH
74028: LD_VAR 0 33
74032: PUSH
74033: LD_VAR 0 34
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: LIST
74042: LIST
74043: LIST
74044: LIST
74045: PUSH
74046: LD_VAR 0 4
74050: PUSH
74051: LD_INT 1
74053: PLUS
74054: ARRAY
74055: ST_TO_ADDR
74056: GO 74541
74058: LD_INT 16
74060: DOUBLE
74061: EQUAL
74062: IFTRUE 74120
74064: LD_INT 17
74066: DOUBLE
74067: EQUAL
74068: IFTRUE 74120
74070: LD_INT 18
74072: DOUBLE
74073: EQUAL
74074: IFTRUE 74120
74076: LD_INT 19
74078: DOUBLE
74079: EQUAL
74080: IFTRUE 74120
74082: LD_INT 22
74084: DOUBLE
74085: EQUAL
74086: IFTRUE 74120
74088: LD_INT 20
74090: DOUBLE
74091: EQUAL
74092: IFTRUE 74120
74094: LD_INT 21
74096: DOUBLE
74097: EQUAL
74098: IFTRUE 74120
74100: LD_INT 23
74102: DOUBLE
74103: EQUAL
74104: IFTRUE 74120
74106: LD_INT 24
74108: DOUBLE
74109: EQUAL
74110: IFTRUE 74120
74112: LD_INT 25
74114: DOUBLE
74115: EQUAL
74116: IFTRUE 74120
74118: GO 74176
74120: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74121: LD_ADDR_VAR 0 9
74125: PUSH
74126: LD_VAR 0 35
74130: PUSH
74131: LD_VAR 0 36
74135: PUSH
74136: LD_VAR 0 37
74140: PUSH
74141: LD_VAR 0 38
74145: PUSH
74146: LD_VAR 0 39
74150: PUSH
74151: LD_VAR 0 40
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: LIST
74160: LIST
74161: LIST
74162: LIST
74163: PUSH
74164: LD_VAR 0 4
74168: PUSH
74169: LD_INT 1
74171: PLUS
74172: ARRAY
74173: ST_TO_ADDR
74174: GO 74541
74176: LD_INT 6
74178: DOUBLE
74179: EQUAL
74180: IFTRUE 74232
74182: LD_INT 7
74184: DOUBLE
74185: EQUAL
74186: IFTRUE 74232
74188: LD_INT 8
74190: DOUBLE
74191: EQUAL
74192: IFTRUE 74232
74194: LD_INT 13
74196: DOUBLE
74197: EQUAL
74198: IFTRUE 74232
74200: LD_INT 12
74202: DOUBLE
74203: EQUAL
74204: IFTRUE 74232
74206: LD_INT 15
74208: DOUBLE
74209: EQUAL
74210: IFTRUE 74232
74212: LD_INT 11
74214: DOUBLE
74215: EQUAL
74216: IFTRUE 74232
74218: LD_INT 14
74220: DOUBLE
74221: EQUAL
74222: IFTRUE 74232
74224: LD_INT 10
74226: DOUBLE
74227: EQUAL
74228: IFTRUE 74232
74230: GO 74288
74232: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74233: LD_ADDR_VAR 0 9
74237: PUSH
74238: LD_VAR 0 41
74242: PUSH
74243: LD_VAR 0 42
74247: PUSH
74248: LD_VAR 0 43
74252: PUSH
74253: LD_VAR 0 44
74257: PUSH
74258: LD_VAR 0 45
74262: PUSH
74263: LD_VAR 0 46
74267: PUSH
74268: EMPTY
74269: LIST
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: PUSH
74276: LD_VAR 0 4
74280: PUSH
74281: LD_INT 1
74283: PLUS
74284: ARRAY
74285: ST_TO_ADDR
74286: GO 74541
74288: LD_INT 36
74290: DOUBLE
74291: EQUAL
74292: IFTRUE 74296
74294: GO 74352
74296: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74297: LD_ADDR_VAR 0 9
74301: PUSH
74302: LD_VAR 0 47
74306: PUSH
74307: LD_VAR 0 48
74311: PUSH
74312: LD_VAR 0 49
74316: PUSH
74317: LD_VAR 0 50
74321: PUSH
74322: LD_VAR 0 51
74326: PUSH
74327: LD_VAR 0 52
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: PUSH
74340: LD_VAR 0 4
74344: PUSH
74345: LD_INT 1
74347: PLUS
74348: ARRAY
74349: ST_TO_ADDR
74350: GO 74541
74352: LD_INT 4
74354: DOUBLE
74355: EQUAL
74356: IFTRUE 74378
74358: LD_INT 5
74360: DOUBLE
74361: EQUAL
74362: IFTRUE 74378
74364: LD_INT 34
74366: DOUBLE
74367: EQUAL
74368: IFTRUE 74378
74370: LD_INT 37
74372: DOUBLE
74373: EQUAL
74374: IFTRUE 74378
74376: GO 74434
74378: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74379: LD_ADDR_VAR 0 9
74383: PUSH
74384: LD_VAR 0 53
74388: PUSH
74389: LD_VAR 0 54
74393: PUSH
74394: LD_VAR 0 55
74398: PUSH
74399: LD_VAR 0 56
74403: PUSH
74404: LD_VAR 0 57
74408: PUSH
74409: LD_VAR 0 58
74413: PUSH
74414: EMPTY
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: PUSH
74422: LD_VAR 0 4
74426: PUSH
74427: LD_INT 1
74429: PLUS
74430: ARRAY
74431: ST_TO_ADDR
74432: GO 74541
74434: LD_INT 31
74436: DOUBLE
74437: EQUAL
74438: IFTRUE 74484
74440: LD_INT 32
74442: DOUBLE
74443: EQUAL
74444: IFTRUE 74484
74446: LD_INT 33
74448: DOUBLE
74449: EQUAL
74450: IFTRUE 74484
74452: LD_INT 27
74454: DOUBLE
74455: EQUAL
74456: IFTRUE 74484
74458: LD_INT 26
74460: DOUBLE
74461: EQUAL
74462: IFTRUE 74484
74464: LD_INT 28
74466: DOUBLE
74467: EQUAL
74468: IFTRUE 74484
74470: LD_INT 29
74472: DOUBLE
74473: EQUAL
74474: IFTRUE 74484
74476: LD_INT 30
74478: DOUBLE
74479: EQUAL
74480: IFTRUE 74484
74482: GO 74540
74484: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74485: LD_ADDR_VAR 0 9
74489: PUSH
74490: LD_VAR 0 59
74494: PUSH
74495: LD_VAR 0 60
74499: PUSH
74500: LD_VAR 0 61
74504: PUSH
74505: LD_VAR 0 62
74509: PUSH
74510: LD_VAR 0 63
74514: PUSH
74515: LD_VAR 0 64
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: LIST
74524: LIST
74525: LIST
74526: LIST
74527: PUSH
74528: LD_VAR 0 4
74532: PUSH
74533: LD_INT 1
74535: PLUS
74536: ARRAY
74537: ST_TO_ADDR
74538: GO 74541
74540: POP
// temp_list2 = [ ] ;
74541: LD_ADDR_VAR 0 10
74545: PUSH
74546: EMPTY
74547: ST_TO_ADDR
// for i in temp_list do
74548: LD_ADDR_VAR 0 8
74552: PUSH
74553: LD_VAR 0 9
74557: PUSH
74558: FOR_IN
74559: IFFALSE 74611
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74561: LD_ADDR_VAR 0 10
74565: PUSH
74566: LD_VAR 0 10
74570: PUSH
74571: LD_VAR 0 8
74575: PUSH
74576: LD_INT 1
74578: ARRAY
74579: PUSH
74580: LD_VAR 0 2
74584: PLUS
74585: PUSH
74586: LD_VAR 0 8
74590: PUSH
74591: LD_INT 2
74593: ARRAY
74594: PUSH
74595: LD_VAR 0 3
74599: PLUS
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: PUSH
74605: EMPTY
74606: LIST
74607: ADD
74608: ST_TO_ADDR
74609: GO 74558
74611: POP
74612: POP
// result = temp_list2 ;
74613: LD_ADDR_VAR 0 7
74617: PUSH
74618: LD_VAR 0 10
74622: ST_TO_ADDR
// end ;
74623: LD_VAR 0 7
74627: RET
// export function EnemyInRange ( unit , dist ) ; begin
74628: LD_INT 0
74630: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74631: LD_ADDR_VAR 0 3
74635: PUSH
74636: LD_VAR 0 1
74640: PPUSH
74641: CALL_OW 255
74645: PPUSH
74646: LD_VAR 0 1
74650: PPUSH
74651: CALL_OW 250
74655: PPUSH
74656: LD_VAR 0 1
74660: PPUSH
74661: CALL_OW 251
74665: PPUSH
74666: LD_VAR 0 2
74670: PPUSH
74671: CALL 47885 0 4
74675: PUSH
74676: LD_INT 4
74678: ARRAY
74679: ST_TO_ADDR
// end ;
74680: LD_VAR 0 3
74684: RET
// export function PlayerSeeMe ( unit ) ; begin
74685: LD_INT 0
74687: PPUSH
// result := See ( your_side , unit ) ;
74688: LD_ADDR_VAR 0 2
74692: PUSH
74693: LD_OWVAR 2
74697: PPUSH
74698: LD_VAR 0 1
74702: PPUSH
74703: CALL_OW 292
74707: ST_TO_ADDR
// end ;
74708: LD_VAR 0 2
74712: RET
// export function ReverseDir ( unit ) ; begin
74713: LD_INT 0
74715: PPUSH
// if not unit then
74716: LD_VAR 0 1
74720: NOT
74721: IFFALSE 74725
// exit ;
74723: GO 74748
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74725: LD_ADDR_VAR 0 2
74729: PUSH
74730: LD_VAR 0 1
74734: PPUSH
74735: CALL_OW 254
74739: PUSH
74740: LD_INT 3
74742: PLUS
74743: PUSH
74744: LD_INT 6
74746: MOD
74747: ST_TO_ADDR
// end ;
74748: LD_VAR 0 2
74752: RET
// export function ReverseArray ( array ) ; var i ; begin
74753: LD_INT 0
74755: PPUSH
74756: PPUSH
// if not array then
74757: LD_VAR 0 1
74761: NOT
74762: IFFALSE 74766
// exit ;
74764: GO 74821
// result := [ ] ;
74766: LD_ADDR_VAR 0 2
74770: PUSH
74771: EMPTY
74772: ST_TO_ADDR
// for i := array downto 1 do
74773: LD_ADDR_VAR 0 3
74777: PUSH
74778: DOUBLE
74779: LD_VAR 0 1
74783: INC
74784: ST_TO_ADDR
74785: LD_INT 1
74787: PUSH
74788: FOR_DOWNTO
74789: IFFALSE 74819
// result := Join ( result , array [ i ] ) ;
74791: LD_ADDR_VAR 0 2
74795: PUSH
74796: LD_VAR 0 2
74800: PPUSH
74801: LD_VAR 0 1
74805: PUSH
74806: LD_VAR 0 3
74810: ARRAY
74811: PPUSH
74812: CALL 79673 0 2
74816: ST_TO_ADDR
74817: GO 74788
74819: POP
74820: POP
// end ;
74821: LD_VAR 0 2
74825: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74826: LD_INT 0
74828: PPUSH
74829: PPUSH
74830: PPUSH
74831: PPUSH
74832: PPUSH
74833: PPUSH
// if not unit or not hexes then
74834: LD_VAR 0 1
74838: NOT
74839: IFTRUE 74848
74841: PUSH
74842: LD_VAR 0 2
74846: NOT
74847: OR
74848: IFFALSE 74852
// exit ;
74850: GO 74975
// dist := 9999 ;
74852: LD_ADDR_VAR 0 5
74856: PUSH
74857: LD_INT 9999
74859: ST_TO_ADDR
// for i = 1 to hexes do
74860: LD_ADDR_VAR 0 4
74864: PUSH
74865: DOUBLE
74866: LD_INT 1
74868: DEC
74869: ST_TO_ADDR
74870: LD_VAR 0 2
74874: PUSH
74875: FOR_TO
74876: IFFALSE 74963
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74878: LD_ADDR_VAR 0 6
74882: PUSH
74883: LD_VAR 0 1
74887: PPUSH
74888: LD_VAR 0 2
74892: PUSH
74893: LD_VAR 0 4
74897: ARRAY
74898: PUSH
74899: LD_INT 1
74901: ARRAY
74902: PPUSH
74903: LD_VAR 0 2
74907: PUSH
74908: LD_VAR 0 4
74912: ARRAY
74913: PUSH
74914: LD_INT 2
74916: ARRAY
74917: PPUSH
74918: CALL_OW 297
74922: ST_TO_ADDR
// if tdist < dist then
74923: LD_VAR 0 6
74927: PUSH
74928: LD_VAR 0 5
74932: LESS
74933: IFFALSE 74961
// begin hex := hexes [ i ] ;
74935: LD_ADDR_VAR 0 8
74939: PUSH
74940: LD_VAR 0 2
74944: PUSH
74945: LD_VAR 0 4
74949: ARRAY
74950: ST_TO_ADDR
// dist := tdist ;
74951: LD_ADDR_VAR 0 5
74955: PUSH
74956: LD_VAR 0 6
74960: ST_TO_ADDR
// end ; end ;
74961: GO 74875
74963: POP
74964: POP
// result := hex ;
74965: LD_ADDR_VAR 0 3
74969: PUSH
74970: LD_VAR 0 8
74974: ST_TO_ADDR
// end ;
74975: LD_VAR 0 3
74979: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74980: LD_INT 0
74982: PPUSH
74983: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74984: LD_VAR 0 1
74988: NOT
74989: IFTRUE 75028
74991: PUSH
74992: LD_VAR 0 1
74996: PUSH
74997: LD_INT 21
74999: PUSH
75000: LD_INT 2
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: PUSH
75007: LD_INT 23
75009: PUSH
75010: LD_INT 2
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: PPUSH
75021: CALL_OW 69
75025: IN
75026: NOT
75027: OR
75028: IFFALSE 75032
// exit ;
75030: GO 75079
// for i = 1 to 3 do
75032: LD_ADDR_VAR 0 3
75036: PUSH
75037: DOUBLE
75038: LD_INT 1
75040: DEC
75041: ST_TO_ADDR
75042: LD_INT 3
75044: PUSH
75045: FOR_TO
75046: IFFALSE 75077
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75048: LD_VAR 0 1
75052: PPUSH
75053: CALL_OW 250
75057: PPUSH
75058: LD_VAR 0 1
75062: PPUSH
75063: CALL_OW 251
75067: PPUSH
75068: LD_INT 1
75070: PPUSH
75071: CALL_OW 453
75075: GO 75045
75077: POP
75078: POP
// end ;
75079: LD_VAR 0 2
75083: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75084: LD_INT 0
75086: PPUSH
75087: PPUSH
75088: PPUSH
75089: PPUSH
75090: PPUSH
75091: PPUSH
// if not unit or not enemy_unit then
75092: LD_VAR 0 1
75096: NOT
75097: IFTRUE 75106
75099: PUSH
75100: LD_VAR 0 2
75104: NOT
75105: OR
75106: IFFALSE 75110
// exit ;
75108: GO 75591
// if GetLives ( i ) < 250 then
75110: LD_VAR 0 4
75114: PPUSH
75115: CALL_OW 256
75119: PUSH
75120: LD_INT 250
75122: LESS
75123: IFFALSE 75136
// begin ComAutodestruct ( i ) ;
75125: LD_VAR 0 4
75129: PPUSH
75130: CALL 74980 0 1
// exit ;
75134: GO 75591
// end ; x := GetX ( enemy_unit ) ;
75136: LD_ADDR_VAR 0 7
75140: PUSH
75141: LD_VAR 0 2
75145: PPUSH
75146: CALL_OW 250
75150: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75151: LD_ADDR_VAR 0 8
75155: PUSH
75156: LD_VAR 0 2
75160: PPUSH
75161: CALL_OW 251
75165: ST_TO_ADDR
// if not x or not y then
75166: LD_VAR 0 7
75170: NOT
75171: IFTRUE 75180
75173: PUSH
75174: LD_VAR 0 8
75178: NOT
75179: OR
75180: IFFALSE 75184
// exit ;
75182: GO 75591
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75184: LD_ADDR_VAR 0 6
75188: PUSH
75189: LD_VAR 0 7
75193: PPUSH
75194: LD_INT 0
75196: PPUSH
75197: LD_INT 4
75199: PPUSH
75200: CALL_OW 272
75204: PUSH
75205: LD_VAR 0 8
75209: PPUSH
75210: LD_INT 0
75212: PPUSH
75213: LD_INT 4
75215: PPUSH
75216: CALL_OW 273
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: PUSH
75225: LD_VAR 0 7
75229: PPUSH
75230: LD_INT 1
75232: PPUSH
75233: LD_INT 4
75235: PPUSH
75236: CALL_OW 272
75240: PUSH
75241: LD_VAR 0 8
75245: PPUSH
75246: LD_INT 1
75248: PPUSH
75249: LD_INT 4
75251: PPUSH
75252: CALL_OW 273
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: PUSH
75261: LD_VAR 0 7
75265: PPUSH
75266: LD_INT 2
75268: PPUSH
75269: LD_INT 4
75271: PPUSH
75272: CALL_OW 272
75276: PUSH
75277: LD_VAR 0 8
75281: PPUSH
75282: LD_INT 2
75284: PPUSH
75285: LD_INT 4
75287: PPUSH
75288: CALL_OW 273
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: PUSH
75297: LD_VAR 0 7
75301: PPUSH
75302: LD_INT 3
75304: PPUSH
75305: LD_INT 4
75307: PPUSH
75308: CALL_OW 272
75312: PUSH
75313: LD_VAR 0 8
75317: PPUSH
75318: LD_INT 3
75320: PPUSH
75321: LD_INT 4
75323: PPUSH
75324: CALL_OW 273
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: PUSH
75333: LD_VAR 0 7
75337: PPUSH
75338: LD_INT 4
75340: PPUSH
75341: LD_INT 4
75343: PPUSH
75344: CALL_OW 272
75348: PUSH
75349: LD_VAR 0 8
75353: PPUSH
75354: LD_INT 4
75356: PPUSH
75357: LD_INT 4
75359: PPUSH
75360: CALL_OW 273
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: PUSH
75369: LD_VAR 0 7
75373: PPUSH
75374: LD_INT 5
75376: PPUSH
75377: LD_INT 4
75379: PPUSH
75380: CALL_OW 272
75384: PUSH
75385: LD_VAR 0 8
75389: PPUSH
75390: LD_INT 5
75392: PPUSH
75393: LD_INT 4
75395: PPUSH
75396: CALL_OW 273
75400: PUSH
75401: EMPTY
75402: LIST
75403: LIST
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: LIST
75409: LIST
75410: LIST
75411: LIST
75412: ST_TO_ADDR
// for i = tmp downto 1 do
75413: LD_ADDR_VAR 0 4
75417: PUSH
75418: DOUBLE
75419: LD_VAR 0 6
75423: INC
75424: ST_TO_ADDR
75425: LD_INT 1
75427: PUSH
75428: FOR_DOWNTO
75429: IFFALSE 75532
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75431: LD_VAR 0 6
75435: PUSH
75436: LD_VAR 0 4
75440: ARRAY
75441: PUSH
75442: LD_INT 1
75444: ARRAY
75445: PPUSH
75446: LD_VAR 0 6
75450: PUSH
75451: LD_VAR 0 4
75455: ARRAY
75456: PUSH
75457: LD_INT 2
75459: ARRAY
75460: PPUSH
75461: CALL_OW 488
75465: NOT
75466: IFTRUE 75508
75468: PUSH
75469: LD_VAR 0 6
75473: PUSH
75474: LD_VAR 0 4
75478: ARRAY
75479: PUSH
75480: LD_INT 1
75482: ARRAY
75483: PPUSH
75484: LD_VAR 0 6
75488: PUSH
75489: LD_VAR 0 4
75493: ARRAY
75494: PUSH
75495: LD_INT 2
75497: ARRAY
75498: PPUSH
75499: CALL_OW 428
75503: PUSH
75504: LD_INT 0
75506: NONEQUAL
75507: OR
75508: IFFALSE 75530
// tmp := Delete ( tmp , i ) ;
75510: LD_ADDR_VAR 0 6
75514: PUSH
75515: LD_VAR 0 6
75519: PPUSH
75520: LD_VAR 0 4
75524: PPUSH
75525: CALL_OW 3
75529: ST_TO_ADDR
75530: GO 75428
75532: POP
75533: POP
// j := GetClosestHex ( unit , tmp ) ;
75534: LD_ADDR_VAR 0 5
75538: PUSH
75539: LD_VAR 0 1
75543: PPUSH
75544: LD_VAR 0 6
75548: PPUSH
75549: CALL 74826 0 2
75553: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75554: LD_VAR 0 1
75558: PPUSH
75559: LD_VAR 0 5
75563: PUSH
75564: LD_INT 1
75566: ARRAY
75567: PPUSH
75568: LD_VAR 0 5
75572: PUSH
75573: LD_INT 2
75575: ARRAY
75576: PPUSH
75577: CALL_OW 111
// result := j ;
75581: LD_ADDR_VAR 0 3
75585: PUSH
75586: LD_VAR 0 5
75590: ST_TO_ADDR
// end ;
75591: LD_VAR 0 3
75595: RET
// export function PrepareApemanSoldier ( ) ; begin
75596: LD_INT 0
75598: PPUSH
// uc_nation := 0 ;
75599: LD_ADDR_OWVAR 21
75603: PUSH
75604: LD_INT 0
75606: ST_TO_ADDR
// hc_sex := sex_male ;
75607: LD_ADDR_OWVAR 27
75611: PUSH
75612: LD_INT 1
75614: ST_TO_ADDR
// hc_name :=  ;
75615: LD_ADDR_OWVAR 26
75619: PUSH
75620: LD_STRING 
75622: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75623: LD_ADDR_OWVAR 28
75627: PUSH
75628: LD_INT 15
75630: ST_TO_ADDR
// hc_gallery :=  ;
75631: LD_ADDR_OWVAR 33
75635: PUSH
75636: LD_STRING 
75638: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75639: LD_ADDR_OWVAR 31
75643: PUSH
75644: LD_INT 0
75646: PPUSH
75647: LD_INT 3
75649: PPUSH
75650: CALL_OW 12
75654: PUSH
75655: LD_INT 0
75657: PPUSH
75658: LD_INT 3
75660: PPUSH
75661: CALL_OW 12
75665: PUSH
75666: LD_INT 0
75668: PUSH
75669: LD_INT 0
75671: PUSH
75672: EMPTY
75673: LIST
75674: LIST
75675: LIST
75676: LIST
75677: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
75678: LD_ADDR_OWVAR 29
75682: PUSH
75683: LD_INT 10
75685: PUSH
75686: LD_INT 12
75688: PUSH
75689: EMPTY
75690: LIST
75691: LIST
75692: ST_TO_ADDR
// end ;
75693: LD_VAR 0 1
75697: RET
// export function PrepareApemanEngineer ( ) ; begin
75698: LD_INT 0
75700: PPUSH
// uc_nation := 0 ;
75701: LD_ADDR_OWVAR 21
75705: PUSH
75706: LD_INT 0
75708: ST_TO_ADDR
// hc_sex := sex_male ;
75709: LD_ADDR_OWVAR 27
75713: PUSH
75714: LD_INT 1
75716: ST_TO_ADDR
// hc_name :=  ;
75717: LD_ADDR_OWVAR 26
75721: PUSH
75722: LD_STRING 
75724: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75725: LD_ADDR_OWVAR 28
75729: PUSH
75730: LD_INT 16
75732: ST_TO_ADDR
// hc_gallery :=  ;
75733: LD_ADDR_OWVAR 33
75737: PUSH
75738: LD_STRING 
75740: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75741: LD_ADDR_OWVAR 31
75745: PUSH
75746: LD_INT 0
75748: PPUSH
75749: LD_INT 3
75751: PPUSH
75752: CALL_OW 12
75756: PUSH
75757: LD_INT 0
75759: PPUSH
75760: LD_INT 3
75762: PPUSH
75763: CALL_OW 12
75767: PUSH
75768: LD_INT 0
75770: PUSH
75771: LD_INT 0
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: LIST
75778: LIST
75779: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
75780: LD_ADDR_OWVAR 29
75784: PUSH
75785: LD_INT 10
75787: PUSH
75788: LD_INT 12
75790: PUSH
75791: EMPTY
75792: LIST
75793: LIST
75794: ST_TO_ADDR
// end ;
75795: LD_VAR 0 1
75799: RET
// export function PrepareApeman ( agressivity ) ; begin
75800: LD_INT 0
75802: PPUSH
// uc_side := 0 ;
75803: LD_ADDR_OWVAR 20
75807: PUSH
75808: LD_INT 0
75810: ST_TO_ADDR
// uc_nation := 0 ;
75811: LD_ADDR_OWVAR 21
75815: PUSH
75816: LD_INT 0
75818: ST_TO_ADDR
// hc_sex := sex_male ;
75819: LD_ADDR_OWVAR 27
75823: PUSH
75824: LD_INT 1
75826: ST_TO_ADDR
// hc_class := class_apeman ;
75827: LD_ADDR_OWVAR 28
75831: PUSH
75832: LD_INT 12
75834: ST_TO_ADDR
// hc_gallery :=  ;
75835: LD_ADDR_OWVAR 33
75839: PUSH
75840: LD_STRING 
75842: ST_TO_ADDR
// hc_name :=  ;
75843: LD_ADDR_OWVAR 26
75847: PUSH
75848: LD_STRING 
75850: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
75851: LD_ADDR_OWVAR 29
75855: PUSH
75856: LD_INT 10
75858: PUSH
75859: LD_INT 12
75861: PUSH
75862: EMPTY
75863: LIST
75864: LIST
75865: ST_TO_ADDR
// if agressivity = 0 then
75866: LD_VAR 0 1
75870: PUSH
75871: LD_INT 0
75873: EQUAL
75874: IFFALSE 75886
// hc_agressivity := 0 else
75876: LD_ADDR_OWVAR 35
75880: PUSH
75881: LD_INT 0
75883: ST_TO_ADDR
75884: GO 75907
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75886: LD_ADDR_OWVAR 35
75890: PUSH
75891: LD_VAR 0 1
75895: NEG
75896: PPUSH
75897: LD_VAR 0 1
75901: PPUSH
75902: CALL_OW 12
75906: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75907: LD_ADDR_OWVAR 31
75911: PUSH
75912: LD_INT 0
75914: PPUSH
75915: LD_INT 3
75917: PPUSH
75918: CALL_OW 12
75922: PUSH
75923: LD_INT 0
75925: PPUSH
75926: LD_INT 3
75928: PPUSH
75929: CALL_OW 12
75933: PUSH
75934: LD_INT 0
75936: PUSH
75937: LD_INT 0
75939: PUSH
75940: EMPTY
75941: LIST
75942: LIST
75943: LIST
75944: LIST
75945: ST_TO_ADDR
// end ;
75946: LD_VAR 0 2
75950: RET
// export function PrepareTiger ( agressivity ) ; begin
75951: LD_INT 0
75953: PPUSH
// uc_side := 0 ;
75954: LD_ADDR_OWVAR 20
75958: PUSH
75959: LD_INT 0
75961: ST_TO_ADDR
// uc_nation := 0 ;
75962: LD_ADDR_OWVAR 21
75966: PUSH
75967: LD_INT 0
75969: ST_TO_ADDR
// InitHc ;
75970: CALL_OW 19
// hc_class := class_tiger ;
75974: LD_ADDR_OWVAR 28
75978: PUSH
75979: LD_INT 14
75981: ST_TO_ADDR
// hc_gallery :=  ;
75982: LD_ADDR_OWVAR 33
75986: PUSH
75987: LD_STRING 
75989: ST_TO_ADDR
// hc_name :=  ;
75990: LD_ADDR_OWVAR 26
75994: PUSH
75995: LD_STRING 
75997: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75998: LD_ADDR_OWVAR 35
76002: PUSH
76003: LD_VAR 0 1
76007: NEG
76008: PPUSH
76009: LD_VAR 0 1
76013: PPUSH
76014: CALL_OW 12
76018: ST_TO_ADDR
// end ;
76019: LD_VAR 0 2
76023: RET
// export function PrepareEnchidna ( ) ; begin
76024: LD_INT 0
76026: PPUSH
// uc_side := 0 ;
76027: LD_ADDR_OWVAR 20
76031: PUSH
76032: LD_INT 0
76034: ST_TO_ADDR
// uc_nation := 0 ;
76035: LD_ADDR_OWVAR 21
76039: PUSH
76040: LD_INT 0
76042: ST_TO_ADDR
// InitHc ;
76043: CALL_OW 19
// hc_class := class_baggie ;
76047: LD_ADDR_OWVAR 28
76051: PUSH
76052: LD_INT 13
76054: ST_TO_ADDR
// hc_gallery :=  ;
76055: LD_ADDR_OWVAR 33
76059: PUSH
76060: LD_STRING 
76062: ST_TO_ADDR
// hc_name :=  ;
76063: LD_ADDR_OWVAR 26
76067: PUSH
76068: LD_STRING 
76070: ST_TO_ADDR
// end ;
76071: LD_VAR 0 1
76075: RET
// export function PrepareFrog ( ) ; begin
76076: LD_INT 0
76078: PPUSH
// uc_side := 0 ;
76079: LD_ADDR_OWVAR 20
76083: PUSH
76084: LD_INT 0
76086: ST_TO_ADDR
// uc_nation := 0 ;
76087: LD_ADDR_OWVAR 21
76091: PUSH
76092: LD_INT 0
76094: ST_TO_ADDR
// InitHc ;
76095: CALL_OW 19
// hc_class := class_frog ;
76099: LD_ADDR_OWVAR 28
76103: PUSH
76104: LD_INT 19
76106: ST_TO_ADDR
// hc_gallery :=  ;
76107: LD_ADDR_OWVAR 33
76111: PUSH
76112: LD_STRING 
76114: ST_TO_ADDR
// hc_name :=  ;
76115: LD_ADDR_OWVAR 26
76119: PUSH
76120: LD_STRING 
76122: ST_TO_ADDR
// end ;
76123: LD_VAR 0 1
76127: RET
// export function PrepareFish ( ) ; begin
76128: LD_INT 0
76130: PPUSH
// uc_side := 0 ;
76131: LD_ADDR_OWVAR 20
76135: PUSH
76136: LD_INT 0
76138: ST_TO_ADDR
// uc_nation := 0 ;
76139: LD_ADDR_OWVAR 21
76143: PUSH
76144: LD_INT 0
76146: ST_TO_ADDR
// InitHc ;
76147: CALL_OW 19
// hc_class := class_fish ;
76151: LD_ADDR_OWVAR 28
76155: PUSH
76156: LD_INT 20
76158: ST_TO_ADDR
// hc_gallery :=  ;
76159: LD_ADDR_OWVAR 33
76163: PUSH
76164: LD_STRING 
76166: ST_TO_ADDR
// hc_name :=  ;
76167: LD_ADDR_OWVAR 26
76171: PUSH
76172: LD_STRING 
76174: ST_TO_ADDR
// end ;
76175: LD_VAR 0 1
76179: RET
// export function PrepareBird ( ) ; begin
76180: LD_INT 0
76182: PPUSH
// uc_side := 0 ;
76183: LD_ADDR_OWVAR 20
76187: PUSH
76188: LD_INT 0
76190: ST_TO_ADDR
// uc_nation := 0 ;
76191: LD_ADDR_OWVAR 21
76195: PUSH
76196: LD_INT 0
76198: ST_TO_ADDR
// InitHc ;
76199: CALL_OW 19
// hc_class := class_phororhacos ;
76203: LD_ADDR_OWVAR 28
76207: PUSH
76208: LD_INT 18
76210: ST_TO_ADDR
// hc_gallery :=  ;
76211: LD_ADDR_OWVAR 33
76215: PUSH
76216: LD_STRING 
76218: ST_TO_ADDR
// hc_name :=  ;
76219: LD_ADDR_OWVAR 26
76223: PUSH
76224: LD_STRING 
76226: ST_TO_ADDR
// end ;
76227: LD_VAR 0 1
76231: RET
// export function PrepareHorse ( ) ; begin
76232: LD_INT 0
76234: PPUSH
// uc_side := 0 ;
76235: LD_ADDR_OWVAR 20
76239: PUSH
76240: LD_INT 0
76242: ST_TO_ADDR
// uc_nation := 0 ;
76243: LD_ADDR_OWVAR 21
76247: PUSH
76248: LD_INT 0
76250: ST_TO_ADDR
// InitHc ;
76251: CALL_OW 19
// hc_class := class_horse ;
76255: LD_ADDR_OWVAR 28
76259: PUSH
76260: LD_INT 21
76262: ST_TO_ADDR
// hc_gallery :=  ;
76263: LD_ADDR_OWVAR 33
76267: PUSH
76268: LD_STRING 
76270: ST_TO_ADDR
// hc_name :=  ;
76271: LD_ADDR_OWVAR 26
76275: PUSH
76276: LD_STRING 
76278: ST_TO_ADDR
// end ;
76279: LD_VAR 0 1
76283: RET
// export function PrepareMastodont ( ) ; begin
76284: LD_INT 0
76286: PPUSH
// uc_side := 0 ;
76287: LD_ADDR_OWVAR 20
76291: PUSH
76292: LD_INT 0
76294: ST_TO_ADDR
// uc_nation := 0 ;
76295: LD_ADDR_OWVAR 21
76299: PUSH
76300: LD_INT 0
76302: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76303: LD_ADDR_OWVAR 37
76307: PUSH
76308: LD_INT 31
76310: ST_TO_ADDR
// vc_control := control_rider ;
76311: LD_ADDR_OWVAR 38
76315: PUSH
76316: LD_INT 4
76318: ST_TO_ADDR
// end ;
76319: LD_VAR 0 1
76323: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76324: LD_INT 0
76326: PPUSH
76327: PPUSH
76328: PPUSH
// uc_side = 0 ;
76329: LD_ADDR_OWVAR 20
76333: PUSH
76334: LD_INT 0
76336: ST_TO_ADDR
// uc_nation = 0 ;
76337: LD_ADDR_OWVAR 21
76341: PUSH
76342: LD_INT 0
76344: ST_TO_ADDR
// InitHc_All ( ) ;
76345: CALL_OW 584
// InitVc ;
76349: CALL_OW 20
// if mastodonts then
76353: LD_VAR 0 6
76357: IFFALSE 76424
// for i = 1 to mastodonts do
76359: LD_ADDR_VAR 0 11
76363: PUSH
76364: DOUBLE
76365: LD_INT 1
76367: DEC
76368: ST_TO_ADDR
76369: LD_VAR 0 6
76373: PUSH
76374: FOR_TO
76375: IFFALSE 76422
// begin vc_chassis := 31 ;
76377: LD_ADDR_OWVAR 37
76381: PUSH
76382: LD_INT 31
76384: ST_TO_ADDR
// vc_control := control_rider ;
76385: LD_ADDR_OWVAR 38
76389: PUSH
76390: LD_INT 4
76392: ST_TO_ADDR
// animal := CreateVehicle ;
76393: LD_ADDR_VAR 0 12
76397: PUSH
76398: CALL_OW 45
76402: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76403: LD_VAR 0 12
76407: PPUSH
76408: LD_VAR 0 8
76412: PPUSH
76413: LD_INT 0
76415: PPUSH
76416: CALL 78566 0 3
// end ;
76420: GO 76374
76422: POP
76423: POP
// if horses then
76424: LD_VAR 0 5
76428: IFFALSE 76495
// for i = 1 to horses do
76430: LD_ADDR_VAR 0 11
76434: PUSH
76435: DOUBLE
76436: LD_INT 1
76438: DEC
76439: ST_TO_ADDR
76440: LD_VAR 0 5
76444: PUSH
76445: FOR_TO
76446: IFFALSE 76493
// begin hc_class := 21 ;
76448: LD_ADDR_OWVAR 28
76452: PUSH
76453: LD_INT 21
76455: ST_TO_ADDR
// hc_gallery :=  ;
76456: LD_ADDR_OWVAR 33
76460: PUSH
76461: LD_STRING 
76463: ST_TO_ADDR
// animal := CreateHuman ;
76464: LD_ADDR_VAR 0 12
76468: PUSH
76469: CALL_OW 44
76473: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76474: LD_VAR 0 12
76478: PPUSH
76479: LD_VAR 0 8
76483: PPUSH
76484: LD_INT 0
76486: PPUSH
76487: CALL 78566 0 3
// end ;
76491: GO 76445
76493: POP
76494: POP
// if birds then
76495: LD_VAR 0 1
76499: IFFALSE 76566
// for i = 1 to birds do
76501: LD_ADDR_VAR 0 11
76505: PUSH
76506: DOUBLE
76507: LD_INT 1
76509: DEC
76510: ST_TO_ADDR
76511: LD_VAR 0 1
76515: PUSH
76516: FOR_TO
76517: IFFALSE 76564
// begin hc_class := 18 ;
76519: LD_ADDR_OWVAR 28
76523: PUSH
76524: LD_INT 18
76526: ST_TO_ADDR
// hc_gallery =  ;
76527: LD_ADDR_OWVAR 33
76531: PUSH
76532: LD_STRING 
76534: ST_TO_ADDR
// animal := CreateHuman ;
76535: LD_ADDR_VAR 0 12
76539: PUSH
76540: CALL_OW 44
76544: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76545: LD_VAR 0 12
76549: PPUSH
76550: LD_VAR 0 8
76554: PPUSH
76555: LD_INT 0
76557: PPUSH
76558: CALL 78566 0 3
// end ;
76562: GO 76516
76564: POP
76565: POP
// if tigers then
76566: LD_VAR 0 2
76570: IFFALSE 76654
// for i = 1 to tigers do
76572: LD_ADDR_VAR 0 11
76576: PUSH
76577: DOUBLE
76578: LD_INT 1
76580: DEC
76581: ST_TO_ADDR
76582: LD_VAR 0 2
76586: PUSH
76587: FOR_TO
76588: IFFALSE 76652
// begin hc_class = class_tiger ;
76590: LD_ADDR_OWVAR 28
76594: PUSH
76595: LD_INT 14
76597: ST_TO_ADDR
// hc_gallery =  ;
76598: LD_ADDR_OWVAR 33
76602: PUSH
76603: LD_STRING 
76605: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76606: LD_ADDR_OWVAR 35
76610: PUSH
76611: LD_INT 7
76613: NEG
76614: PPUSH
76615: LD_INT 7
76617: PPUSH
76618: CALL_OW 12
76622: ST_TO_ADDR
// animal := CreateHuman ;
76623: LD_ADDR_VAR 0 12
76627: PUSH
76628: CALL_OW 44
76632: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76633: LD_VAR 0 12
76637: PPUSH
76638: LD_VAR 0 8
76642: PPUSH
76643: LD_INT 0
76645: PPUSH
76646: CALL 78566 0 3
// end ;
76650: GO 76587
76652: POP
76653: POP
// if apemans then
76654: LD_VAR 0 3
76658: IFFALSE 76781
// for i = 1 to apemans do
76660: LD_ADDR_VAR 0 11
76664: PUSH
76665: DOUBLE
76666: LD_INT 1
76668: DEC
76669: ST_TO_ADDR
76670: LD_VAR 0 3
76674: PUSH
76675: FOR_TO
76676: IFFALSE 76779
// begin hc_class = class_apeman ;
76678: LD_ADDR_OWVAR 28
76682: PUSH
76683: LD_INT 12
76685: ST_TO_ADDR
// hc_gallery =  ;
76686: LD_ADDR_OWVAR 33
76690: PUSH
76691: LD_STRING 
76693: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76694: LD_ADDR_OWVAR 35
76698: PUSH
76699: LD_INT 2
76701: NEG
76702: PPUSH
76703: LD_INT 2
76705: PPUSH
76706: CALL_OW 12
76710: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76711: LD_ADDR_OWVAR 31
76715: PUSH
76716: LD_INT 1
76718: PPUSH
76719: LD_INT 3
76721: PPUSH
76722: CALL_OW 12
76726: PUSH
76727: LD_INT 1
76729: PPUSH
76730: LD_INT 3
76732: PPUSH
76733: CALL_OW 12
76737: PUSH
76738: LD_INT 0
76740: PUSH
76741: LD_INT 0
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: LIST
76748: LIST
76749: ST_TO_ADDR
// animal := CreateHuman ;
76750: LD_ADDR_VAR 0 12
76754: PUSH
76755: CALL_OW 44
76759: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76760: LD_VAR 0 12
76764: PPUSH
76765: LD_VAR 0 8
76769: PPUSH
76770: LD_INT 0
76772: PPUSH
76773: CALL 78566 0 3
// end ;
76777: GO 76675
76779: POP
76780: POP
// if enchidnas then
76781: LD_VAR 0 4
76785: IFFALSE 76852
// for i = 1 to enchidnas do
76787: LD_ADDR_VAR 0 11
76791: PUSH
76792: DOUBLE
76793: LD_INT 1
76795: DEC
76796: ST_TO_ADDR
76797: LD_VAR 0 4
76801: PUSH
76802: FOR_TO
76803: IFFALSE 76850
// begin hc_class = 13 ;
76805: LD_ADDR_OWVAR 28
76809: PUSH
76810: LD_INT 13
76812: ST_TO_ADDR
// hc_gallery =  ;
76813: LD_ADDR_OWVAR 33
76817: PUSH
76818: LD_STRING 
76820: ST_TO_ADDR
// animal := CreateHuman ;
76821: LD_ADDR_VAR 0 12
76825: PUSH
76826: CALL_OW 44
76830: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76831: LD_VAR 0 12
76835: PPUSH
76836: LD_VAR 0 8
76840: PPUSH
76841: LD_INT 0
76843: PPUSH
76844: CALL 78566 0 3
// end ;
76848: GO 76802
76850: POP
76851: POP
// if fishes then
76852: LD_VAR 0 7
76856: IFFALSE 76923
// for i = 1 to fishes do
76858: LD_ADDR_VAR 0 11
76862: PUSH
76863: DOUBLE
76864: LD_INT 1
76866: DEC
76867: ST_TO_ADDR
76868: LD_VAR 0 7
76872: PUSH
76873: FOR_TO
76874: IFFALSE 76921
// begin hc_class = 20 ;
76876: LD_ADDR_OWVAR 28
76880: PUSH
76881: LD_INT 20
76883: ST_TO_ADDR
// hc_gallery =  ;
76884: LD_ADDR_OWVAR 33
76888: PUSH
76889: LD_STRING 
76891: ST_TO_ADDR
// animal := CreateHuman ;
76892: LD_ADDR_VAR 0 12
76896: PUSH
76897: CALL_OW 44
76901: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76902: LD_VAR 0 12
76906: PPUSH
76907: LD_VAR 0 9
76911: PPUSH
76912: LD_INT 0
76914: PPUSH
76915: CALL 78566 0 3
// end ;
76919: GO 76873
76921: POP
76922: POP
// end ;
76923: LD_VAR 0 10
76927: RET
// export function WantHeal ( sci , unit ) ; begin
76928: LD_INT 0
76930: PPUSH
// if GetTaskList ( sci ) > 0 then
76931: LD_VAR 0 1
76935: PPUSH
76936: CALL_OW 437
76940: PUSH
76941: LD_INT 0
76943: GREATER
76944: IFFALSE 77016
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76946: LD_VAR 0 1
76950: PPUSH
76951: CALL_OW 437
76955: PUSH
76956: LD_INT 1
76958: ARRAY
76959: PUSH
76960: LD_INT 1
76962: ARRAY
76963: PUSH
76964: LD_STRING l
76966: EQUAL
76967: IFFALSE 76994
76969: PUSH
76970: LD_VAR 0 1
76974: PPUSH
76975: CALL_OW 437
76979: PUSH
76980: LD_INT 1
76982: ARRAY
76983: PUSH
76984: LD_INT 4
76986: ARRAY
76987: PUSH
76988: LD_VAR 0 2
76992: EQUAL
76993: AND
76994: IFFALSE 77006
// result := true else
76996: LD_ADDR_VAR 0 3
77000: PUSH
77001: LD_INT 1
77003: ST_TO_ADDR
77004: GO 77014
// result := false ;
77006: LD_ADDR_VAR 0 3
77010: PUSH
77011: LD_INT 0
77013: ST_TO_ADDR
// end else
77014: GO 77024
// result := false ;
77016: LD_ADDR_VAR 0 3
77020: PUSH
77021: LD_INT 0
77023: ST_TO_ADDR
// end ;
77024: LD_VAR 0 3
77028: RET
// export function HealTarget ( sci ) ; begin
77029: LD_INT 0
77031: PPUSH
// if not sci then
77032: LD_VAR 0 1
77036: NOT
77037: IFFALSE 77041
// exit ;
77039: GO 77106
// result := 0 ;
77041: LD_ADDR_VAR 0 2
77045: PUSH
77046: LD_INT 0
77048: ST_TO_ADDR
// if GetTaskList ( sci ) then
77049: LD_VAR 0 1
77053: PPUSH
77054: CALL_OW 437
77058: IFFALSE 77106
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77060: LD_VAR 0 1
77064: PPUSH
77065: CALL_OW 437
77069: PUSH
77070: LD_INT 1
77072: ARRAY
77073: PUSH
77074: LD_INT 1
77076: ARRAY
77077: PUSH
77078: LD_STRING l
77080: EQUAL
77081: IFFALSE 77106
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77083: LD_ADDR_VAR 0 2
77087: PUSH
77088: LD_VAR 0 1
77092: PPUSH
77093: CALL_OW 437
77097: PUSH
77098: LD_INT 1
77100: ARRAY
77101: PUSH
77102: LD_INT 4
77104: ARRAY
77105: ST_TO_ADDR
// end ;
77106: LD_VAR 0 2
77110: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77111: LD_INT 0
77113: PPUSH
77114: PPUSH
77115: PPUSH
77116: PPUSH
// if not base_units then
77117: LD_VAR 0 1
77121: NOT
77122: IFFALSE 77126
// exit ;
77124: GO 77213
// result := false ;
77126: LD_ADDR_VAR 0 2
77130: PUSH
77131: LD_INT 0
77133: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77134: LD_ADDR_VAR 0 5
77138: PUSH
77139: LD_VAR 0 1
77143: PPUSH
77144: LD_INT 21
77146: PUSH
77147: LD_INT 3
77149: PUSH
77150: EMPTY
77151: LIST
77152: LIST
77153: PPUSH
77154: CALL_OW 72
77158: ST_TO_ADDR
// if not tmp then
77159: LD_VAR 0 5
77163: NOT
77164: IFFALSE 77168
// exit ;
77166: GO 77213
// for i in tmp do
77168: LD_ADDR_VAR 0 3
77172: PUSH
77173: LD_VAR 0 5
77177: PUSH
77178: FOR_IN
77179: IFFALSE 77211
// begin result := EnemyInRange ( i , 22 ) ;
77181: LD_ADDR_VAR 0 2
77185: PUSH
77186: LD_VAR 0 3
77190: PPUSH
77191: LD_INT 22
77193: PPUSH
77194: CALL 74628 0 2
77198: ST_TO_ADDR
// if result then
77199: LD_VAR 0 2
77203: IFFALSE 77209
// exit ;
77205: POP
77206: POP
77207: GO 77213
// end ;
77209: GO 77178
77211: POP
77212: POP
// end ;
77213: LD_VAR 0 2
77217: RET
// export function FilterByTag ( units , tag ) ; begin
77218: LD_INT 0
77220: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77221: LD_ADDR_VAR 0 3
77225: PUSH
77226: LD_VAR 0 1
77230: PPUSH
77231: LD_INT 120
77233: PUSH
77234: LD_VAR 0 2
77238: PUSH
77239: EMPTY
77240: LIST
77241: LIST
77242: PPUSH
77243: CALL_OW 72
77247: ST_TO_ADDR
// end ;
77248: LD_VAR 0 3
77252: RET
// export function IsDriver ( un ) ; begin
77253: LD_INT 0
77255: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77256: LD_ADDR_VAR 0 2
77260: PUSH
77261: LD_VAR 0 1
77265: PUSH
77266: LD_INT 55
77268: PUSH
77269: EMPTY
77270: LIST
77271: PPUSH
77272: CALL_OW 69
77276: IN
77277: ST_TO_ADDR
// end ;
77278: LD_VAR 0 2
77282: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77283: LD_INT 0
77285: PPUSH
77286: PPUSH
// list := [ ] ;
77287: LD_ADDR_VAR 0 5
77291: PUSH
77292: EMPTY
77293: ST_TO_ADDR
// case d of 0 :
77294: LD_VAR 0 3
77298: PUSH
77299: LD_INT 0
77301: DOUBLE
77302: EQUAL
77303: IFTRUE 77307
77305: GO 77440
77307: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77308: LD_ADDR_VAR 0 5
77312: PUSH
77313: LD_VAR 0 1
77317: PUSH
77318: LD_INT 4
77320: MINUS
77321: PUSH
77322: LD_VAR 0 2
77326: PUSH
77327: LD_INT 4
77329: MINUS
77330: PUSH
77331: LD_INT 2
77333: PUSH
77334: EMPTY
77335: LIST
77336: LIST
77337: LIST
77338: PUSH
77339: LD_VAR 0 1
77343: PUSH
77344: LD_INT 3
77346: MINUS
77347: PUSH
77348: LD_VAR 0 2
77352: PUSH
77353: LD_INT 1
77355: PUSH
77356: EMPTY
77357: LIST
77358: LIST
77359: LIST
77360: PUSH
77361: LD_VAR 0 1
77365: PUSH
77366: LD_INT 4
77368: PLUS
77369: PUSH
77370: LD_VAR 0 2
77374: PUSH
77375: LD_INT 4
77377: PUSH
77378: EMPTY
77379: LIST
77380: LIST
77381: LIST
77382: PUSH
77383: LD_VAR 0 1
77387: PUSH
77388: LD_INT 3
77390: PLUS
77391: PUSH
77392: LD_VAR 0 2
77396: PUSH
77397: LD_INT 3
77399: PLUS
77400: PUSH
77401: LD_INT 5
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: LIST
77408: PUSH
77409: LD_VAR 0 1
77413: PUSH
77414: LD_VAR 0 2
77418: PUSH
77419: LD_INT 4
77421: PLUS
77422: PUSH
77423: LD_INT 0
77425: PUSH
77426: EMPTY
77427: LIST
77428: LIST
77429: LIST
77430: PUSH
77431: EMPTY
77432: LIST
77433: LIST
77434: LIST
77435: LIST
77436: LIST
77437: ST_TO_ADDR
// end ; 1 :
77438: GO 78138
77440: LD_INT 1
77442: DOUBLE
77443: EQUAL
77444: IFTRUE 77448
77446: GO 77581
77448: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77449: LD_ADDR_VAR 0 5
77453: PUSH
77454: LD_VAR 0 1
77458: PUSH
77459: LD_VAR 0 2
77463: PUSH
77464: LD_INT 4
77466: MINUS
77467: PUSH
77468: LD_INT 3
77470: PUSH
77471: EMPTY
77472: LIST
77473: LIST
77474: LIST
77475: PUSH
77476: LD_VAR 0 1
77480: PUSH
77481: LD_INT 3
77483: MINUS
77484: PUSH
77485: LD_VAR 0 2
77489: PUSH
77490: LD_INT 3
77492: MINUS
77493: PUSH
77494: LD_INT 2
77496: PUSH
77497: EMPTY
77498: LIST
77499: LIST
77500: LIST
77501: PUSH
77502: LD_VAR 0 1
77506: PUSH
77507: LD_INT 4
77509: MINUS
77510: PUSH
77511: LD_VAR 0 2
77515: PUSH
77516: LD_INT 1
77518: PUSH
77519: EMPTY
77520: LIST
77521: LIST
77522: LIST
77523: PUSH
77524: LD_VAR 0 1
77528: PUSH
77529: LD_VAR 0 2
77533: PUSH
77534: LD_INT 3
77536: PLUS
77537: PUSH
77538: LD_INT 0
77540: PUSH
77541: EMPTY
77542: LIST
77543: LIST
77544: LIST
77545: PUSH
77546: LD_VAR 0 1
77550: PUSH
77551: LD_INT 4
77553: PLUS
77554: PUSH
77555: LD_VAR 0 2
77559: PUSH
77560: LD_INT 4
77562: PLUS
77563: PUSH
77564: LD_INT 5
77566: PUSH
77567: EMPTY
77568: LIST
77569: LIST
77570: LIST
77571: PUSH
77572: EMPTY
77573: LIST
77574: LIST
77575: LIST
77576: LIST
77577: LIST
77578: ST_TO_ADDR
// end ; 2 :
77579: GO 78138
77581: LD_INT 2
77583: DOUBLE
77584: EQUAL
77585: IFTRUE 77589
77587: GO 77718
77589: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77590: LD_ADDR_VAR 0 5
77594: PUSH
77595: LD_VAR 0 1
77599: PUSH
77600: LD_VAR 0 2
77604: PUSH
77605: LD_INT 3
77607: MINUS
77608: PUSH
77609: LD_INT 3
77611: PUSH
77612: EMPTY
77613: LIST
77614: LIST
77615: LIST
77616: PUSH
77617: LD_VAR 0 1
77621: PUSH
77622: LD_INT 4
77624: PLUS
77625: PUSH
77626: LD_VAR 0 2
77630: PUSH
77631: LD_INT 4
77633: PUSH
77634: EMPTY
77635: LIST
77636: LIST
77637: LIST
77638: PUSH
77639: LD_VAR 0 1
77643: PUSH
77644: LD_VAR 0 2
77648: PUSH
77649: LD_INT 4
77651: PLUS
77652: PUSH
77653: LD_INT 0
77655: PUSH
77656: EMPTY
77657: LIST
77658: LIST
77659: LIST
77660: PUSH
77661: LD_VAR 0 1
77665: PUSH
77666: LD_INT 3
77668: MINUS
77669: PUSH
77670: LD_VAR 0 2
77674: PUSH
77675: LD_INT 1
77677: PUSH
77678: EMPTY
77679: LIST
77680: LIST
77681: LIST
77682: PUSH
77683: LD_VAR 0 1
77687: PUSH
77688: LD_INT 4
77690: MINUS
77691: PUSH
77692: LD_VAR 0 2
77696: PUSH
77697: LD_INT 4
77699: MINUS
77700: PUSH
77701: LD_INT 2
77703: PUSH
77704: EMPTY
77705: LIST
77706: LIST
77707: LIST
77708: PUSH
77709: EMPTY
77710: LIST
77711: LIST
77712: LIST
77713: LIST
77714: LIST
77715: ST_TO_ADDR
// end ; 3 :
77716: GO 78138
77718: LD_INT 3
77720: DOUBLE
77721: EQUAL
77722: IFTRUE 77726
77724: GO 77859
77726: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77727: LD_ADDR_VAR 0 5
77731: PUSH
77732: LD_VAR 0 1
77736: PUSH
77737: LD_INT 3
77739: PLUS
77740: PUSH
77741: LD_VAR 0 2
77745: PUSH
77746: LD_INT 4
77748: PUSH
77749: EMPTY
77750: LIST
77751: LIST
77752: LIST
77753: PUSH
77754: LD_VAR 0 1
77758: PUSH
77759: LD_INT 4
77761: PLUS
77762: PUSH
77763: LD_VAR 0 2
77767: PUSH
77768: LD_INT 4
77770: PLUS
77771: PUSH
77772: LD_INT 5
77774: PUSH
77775: EMPTY
77776: LIST
77777: LIST
77778: LIST
77779: PUSH
77780: LD_VAR 0 1
77784: PUSH
77785: LD_INT 4
77787: MINUS
77788: PUSH
77789: LD_VAR 0 2
77793: PUSH
77794: LD_INT 1
77796: PUSH
77797: EMPTY
77798: LIST
77799: LIST
77800: LIST
77801: PUSH
77802: LD_VAR 0 1
77806: PUSH
77807: LD_VAR 0 2
77811: PUSH
77812: LD_INT 4
77814: MINUS
77815: PUSH
77816: LD_INT 3
77818: PUSH
77819: EMPTY
77820: LIST
77821: LIST
77822: LIST
77823: PUSH
77824: LD_VAR 0 1
77828: PUSH
77829: LD_INT 3
77831: MINUS
77832: PUSH
77833: LD_VAR 0 2
77837: PUSH
77838: LD_INT 3
77840: MINUS
77841: PUSH
77842: LD_INT 2
77844: PUSH
77845: EMPTY
77846: LIST
77847: LIST
77848: LIST
77849: PUSH
77850: EMPTY
77851: LIST
77852: LIST
77853: LIST
77854: LIST
77855: LIST
77856: ST_TO_ADDR
// end ; 4 :
77857: GO 78138
77859: LD_INT 4
77861: DOUBLE
77862: EQUAL
77863: IFTRUE 77867
77865: GO 78000
77867: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77868: LD_ADDR_VAR 0 5
77872: PUSH
77873: LD_VAR 0 1
77877: PUSH
77878: LD_VAR 0 2
77882: PUSH
77883: LD_INT 4
77885: PLUS
77886: PUSH
77887: LD_INT 0
77889: PUSH
77890: EMPTY
77891: LIST
77892: LIST
77893: LIST
77894: PUSH
77895: LD_VAR 0 1
77899: PUSH
77900: LD_INT 3
77902: PLUS
77903: PUSH
77904: LD_VAR 0 2
77908: PUSH
77909: LD_INT 3
77911: PLUS
77912: PUSH
77913: LD_INT 5
77915: PUSH
77916: EMPTY
77917: LIST
77918: LIST
77919: LIST
77920: PUSH
77921: LD_VAR 0 1
77925: PUSH
77926: LD_INT 4
77928: PLUS
77929: PUSH
77930: LD_VAR 0 2
77934: PUSH
77935: LD_INT 4
77937: PUSH
77938: EMPTY
77939: LIST
77940: LIST
77941: LIST
77942: PUSH
77943: LD_VAR 0 1
77947: PUSH
77948: LD_VAR 0 2
77952: PUSH
77953: LD_INT 3
77955: MINUS
77956: PUSH
77957: LD_INT 3
77959: PUSH
77960: EMPTY
77961: LIST
77962: LIST
77963: LIST
77964: PUSH
77965: LD_VAR 0 1
77969: PUSH
77970: LD_INT 4
77972: MINUS
77973: PUSH
77974: LD_VAR 0 2
77978: PUSH
77979: LD_INT 4
77981: MINUS
77982: PUSH
77983: LD_INT 2
77985: PUSH
77986: EMPTY
77987: LIST
77988: LIST
77989: LIST
77990: PUSH
77991: EMPTY
77992: LIST
77993: LIST
77994: LIST
77995: LIST
77996: LIST
77997: ST_TO_ADDR
// end ; 5 :
77998: GO 78138
78000: LD_INT 5
78002: DOUBLE
78003: EQUAL
78004: IFTRUE 78008
78006: GO 78137
78008: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78009: LD_ADDR_VAR 0 5
78013: PUSH
78014: LD_VAR 0 1
78018: PUSH
78019: LD_INT 4
78021: MINUS
78022: PUSH
78023: LD_VAR 0 2
78027: PUSH
78028: LD_INT 1
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: LIST
78035: PUSH
78036: LD_VAR 0 1
78040: PUSH
78041: LD_VAR 0 2
78045: PUSH
78046: LD_INT 4
78048: MINUS
78049: PUSH
78050: LD_INT 3
78052: PUSH
78053: EMPTY
78054: LIST
78055: LIST
78056: LIST
78057: PUSH
78058: LD_VAR 0 1
78062: PUSH
78063: LD_INT 4
78065: PLUS
78066: PUSH
78067: LD_VAR 0 2
78071: PUSH
78072: LD_INT 4
78074: PLUS
78075: PUSH
78076: LD_INT 5
78078: PUSH
78079: EMPTY
78080: LIST
78081: LIST
78082: LIST
78083: PUSH
78084: LD_VAR 0 1
78088: PUSH
78089: LD_INT 3
78091: PLUS
78092: PUSH
78093: LD_VAR 0 2
78097: PUSH
78098: LD_INT 4
78100: PUSH
78101: EMPTY
78102: LIST
78103: LIST
78104: LIST
78105: PUSH
78106: LD_VAR 0 1
78110: PUSH
78111: LD_VAR 0 2
78115: PUSH
78116: LD_INT 3
78118: PLUS
78119: PUSH
78120: LD_INT 0
78122: PUSH
78123: EMPTY
78124: LIST
78125: LIST
78126: LIST
78127: PUSH
78128: EMPTY
78129: LIST
78130: LIST
78131: LIST
78132: LIST
78133: LIST
78134: ST_TO_ADDR
// end ; end ;
78135: GO 78138
78137: POP
// result := list ;
78138: LD_ADDR_VAR 0 4
78142: PUSH
78143: LD_VAR 0 5
78147: ST_TO_ADDR
// end ;
78148: LD_VAR 0 4
78152: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78153: LD_INT 0
78155: PPUSH
78156: PPUSH
78157: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78158: LD_VAR 0 1
78162: NOT
78163: IFTRUE 78191
78165: PUSH
78166: LD_VAR 0 2
78170: PUSH
78171: LD_INT 1
78173: PUSH
78174: LD_INT 2
78176: PUSH
78177: LD_INT 3
78179: PUSH
78180: LD_INT 4
78182: PUSH
78183: EMPTY
78184: LIST
78185: LIST
78186: LIST
78187: LIST
78188: IN
78189: NOT
78190: OR
78191: IFFALSE 78195
// exit ;
78193: GO 78278
// tmp := [ ] ;
78195: LD_ADDR_VAR 0 5
78199: PUSH
78200: EMPTY
78201: ST_TO_ADDR
// for i in units do
78202: LD_ADDR_VAR 0 4
78206: PUSH
78207: LD_VAR 0 1
78211: PUSH
78212: FOR_IN
78213: IFFALSE 78247
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78215: LD_ADDR_VAR 0 5
78219: PUSH
78220: LD_VAR 0 5
78224: PPUSH
78225: LD_VAR 0 4
78229: PPUSH
78230: LD_VAR 0 2
78234: PPUSH
78235: CALL_OW 259
78239: PPUSH
78240: CALL 79673 0 2
78244: ST_TO_ADDR
78245: GO 78212
78247: POP
78248: POP
// if not tmp then
78249: LD_VAR 0 5
78253: NOT
78254: IFFALSE 78258
// exit ;
78256: GO 78278
// result := SortListByListDesc ( units , tmp ) ;
78258: LD_ADDR_VAR 0 3
78262: PUSH
78263: LD_VAR 0 1
78267: PPUSH
78268: LD_VAR 0 5
78272: PPUSH
78273: CALL_OW 77
78277: ST_TO_ADDR
// end ;
78278: LD_VAR 0 3
78282: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78283: LD_INT 0
78285: PPUSH
78286: PPUSH
78287: PPUSH
// result := false ;
78288: LD_ADDR_VAR 0 3
78292: PUSH
78293: LD_INT 0
78295: ST_TO_ADDR
// if not building then
78296: LD_VAR 0 2
78300: NOT
78301: IFFALSE 78305
// exit ;
78303: GO 78449
// x := GetX ( building ) ;
78305: LD_ADDR_VAR 0 4
78309: PUSH
78310: LD_VAR 0 2
78314: PPUSH
78315: CALL_OW 250
78319: ST_TO_ADDR
// y := GetY ( building ) ;
78320: LD_ADDR_VAR 0 5
78324: PUSH
78325: LD_VAR 0 2
78329: PPUSH
78330: CALL_OW 251
78334: ST_TO_ADDR
// if not x or not y then
78335: LD_VAR 0 4
78339: NOT
78340: IFTRUE 78349
78342: PUSH
78343: LD_VAR 0 5
78347: NOT
78348: OR
78349: IFFALSE 78353
// exit ;
78351: GO 78449
// if GetTaskList ( unit ) then
78353: LD_VAR 0 1
78357: PPUSH
78358: CALL_OW 437
78362: IFFALSE 78449
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78364: LD_STRING e
78366: PUSH
78367: LD_VAR 0 1
78371: PPUSH
78372: CALL_OW 437
78376: PUSH
78377: LD_INT 1
78379: ARRAY
78380: PUSH
78381: LD_INT 1
78383: ARRAY
78384: EQUAL
78385: IFFALSE 78412
78387: PUSH
78388: LD_VAR 0 4
78392: PUSH
78393: LD_VAR 0 1
78397: PPUSH
78398: CALL_OW 437
78402: PUSH
78403: LD_INT 1
78405: ARRAY
78406: PUSH
78407: LD_INT 2
78409: ARRAY
78410: EQUAL
78411: AND
78412: IFFALSE 78439
78414: PUSH
78415: LD_VAR 0 5
78419: PUSH
78420: LD_VAR 0 1
78424: PPUSH
78425: CALL_OW 437
78429: PUSH
78430: LD_INT 1
78432: ARRAY
78433: PUSH
78434: LD_INT 3
78436: ARRAY
78437: EQUAL
78438: AND
78439: IFFALSE 78449
// result := true end ;
78441: LD_ADDR_VAR 0 3
78445: PUSH
78446: LD_INT 1
78448: ST_TO_ADDR
// end ;
78449: LD_VAR 0 3
78453: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78454: LD_INT 0
78456: PPUSH
// result := false ;
78457: LD_ADDR_VAR 0 4
78461: PUSH
78462: LD_INT 0
78464: ST_TO_ADDR
// if GetTaskList ( unit ) then
78465: LD_VAR 0 1
78469: PPUSH
78470: CALL_OW 437
78474: IFFALSE 78561
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78476: LD_STRING M
78478: PUSH
78479: LD_VAR 0 1
78483: PPUSH
78484: CALL_OW 437
78488: PUSH
78489: LD_INT 1
78491: ARRAY
78492: PUSH
78493: LD_INT 1
78495: ARRAY
78496: EQUAL
78497: IFFALSE 78524
78499: PUSH
78500: LD_VAR 0 2
78504: PUSH
78505: LD_VAR 0 1
78509: PPUSH
78510: CALL_OW 437
78514: PUSH
78515: LD_INT 1
78517: ARRAY
78518: PUSH
78519: LD_INT 2
78521: ARRAY
78522: EQUAL
78523: AND
78524: IFFALSE 78551
78526: PUSH
78527: LD_VAR 0 3
78531: PUSH
78532: LD_VAR 0 1
78536: PPUSH
78537: CALL_OW 437
78541: PUSH
78542: LD_INT 1
78544: ARRAY
78545: PUSH
78546: LD_INT 3
78548: ARRAY
78549: EQUAL
78550: AND
78551: IFFALSE 78561
// result := true ;
78553: LD_ADDR_VAR 0 4
78557: PUSH
78558: LD_INT 1
78560: ST_TO_ADDR
// end ; end ;
78561: LD_VAR 0 4
78565: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78566: LD_INT 0
78568: PPUSH
78569: PPUSH
78570: PPUSH
78571: PPUSH
// if not unit or not area then
78572: LD_VAR 0 1
78576: NOT
78577: IFTRUE 78586
78579: PUSH
78580: LD_VAR 0 2
78584: NOT
78585: OR
78586: IFFALSE 78590
// exit ;
78588: GO 78766
// tmp := AreaToList ( area , i ) ;
78590: LD_ADDR_VAR 0 6
78594: PUSH
78595: LD_VAR 0 2
78599: PPUSH
78600: LD_VAR 0 5
78604: PPUSH
78605: CALL_OW 517
78609: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78610: LD_ADDR_VAR 0 5
78614: PUSH
78615: DOUBLE
78616: LD_INT 1
78618: DEC
78619: ST_TO_ADDR
78620: LD_VAR 0 6
78624: PUSH
78625: LD_INT 1
78627: ARRAY
78628: PUSH
78629: FOR_TO
78630: IFFALSE 78764
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78632: LD_ADDR_VAR 0 7
78636: PUSH
78637: LD_VAR 0 6
78641: PUSH
78642: LD_INT 1
78644: ARRAY
78645: PUSH
78646: LD_VAR 0 5
78650: ARRAY
78651: PUSH
78652: LD_VAR 0 6
78656: PUSH
78657: LD_INT 2
78659: ARRAY
78660: PUSH
78661: LD_VAR 0 5
78665: ARRAY
78666: PUSH
78667: EMPTY
78668: LIST
78669: LIST
78670: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78671: LD_INT 92
78673: PUSH
78674: LD_VAR 0 7
78678: PUSH
78679: LD_INT 1
78681: ARRAY
78682: PUSH
78683: LD_VAR 0 7
78687: PUSH
78688: LD_INT 2
78690: ARRAY
78691: PUSH
78692: LD_INT 2
78694: PUSH
78695: EMPTY
78696: LIST
78697: LIST
78698: LIST
78699: LIST
78700: PPUSH
78701: CALL_OW 69
78705: PUSH
78706: LD_INT 0
78708: EQUAL
78709: IFFALSE 78762
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78711: LD_VAR 0 1
78715: PPUSH
78716: LD_VAR 0 7
78720: PUSH
78721: LD_INT 1
78723: ARRAY
78724: PPUSH
78725: LD_VAR 0 7
78729: PUSH
78730: LD_INT 2
78732: ARRAY
78733: PPUSH
78734: LD_VAR 0 3
78738: PPUSH
78739: CALL_OW 48
// result := IsPlaced ( unit ) ;
78743: LD_ADDR_VAR 0 4
78747: PUSH
78748: LD_VAR 0 1
78752: PPUSH
78753: CALL_OW 305
78757: ST_TO_ADDR
// exit ;
78758: POP
78759: POP
78760: GO 78766
// end ; end ;
78762: GO 78629
78764: POP
78765: POP
// end ;
78766: LD_VAR 0 4
78770: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78771: LD_INT 0
78773: PPUSH
78774: PPUSH
78775: PPUSH
// if not side or side > 8 then
78776: LD_VAR 0 1
78780: NOT
78781: IFTRUE 78793
78783: PUSH
78784: LD_VAR 0 1
78788: PUSH
78789: LD_INT 8
78791: GREATER
78792: OR
78793: IFFALSE 78797
// exit ;
78795: GO 78984
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78797: LD_ADDR_VAR 0 4
78801: PUSH
78802: LD_INT 22
78804: PUSH
78805: LD_VAR 0 1
78809: PUSH
78810: EMPTY
78811: LIST
78812: LIST
78813: PUSH
78814: LD_INT 21
78816: PUSH
78817: LD_INT 3
78819: PUSH
78820: EMPTY
78821: LIST
78822: LIST
78823: PUSH
78824: EMPTY
78825: LIST
78826: LIST
78827: PPUSH
78828: CALL_OW 69
78832: ST_TO_ADDR
// if not tmp then
78833: LD_VAR 0 4
78837: NOT
78838: IFFALSE 78842
// exit ;
78840: GO 78984
// enable_addtolog := true ;
78842: LD_ADDR_OWVAR 81
78846: PUSH
78847: LD_INT 1
78849: ST_TO_ADDR
// AddToLog ( [ ) ;
78850: LD_STRING [
78852: PPUSH
78853: CALL_OW 561
// for i in tmp do
78857: LD_ADDR_VAR 0 3
78861: PUSH
78862: LD_VAR 0 4
78866: PUSH
78867: FOR_IN
78868: IFFALSE 78975
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78870: LD_STRING [
78872: PUSH
78873: LD_VAR 0 3
78877: PPUSH
78878: CALL_OW 266
78882: STR
78883: PUSH
78884: LD_STRING , 
78886: STR
78887: PUSH
78888: LD_VAR 0 3
78892: PPUSH
78893: CALL_OW 250
78897: STR
78898: PUSH
78899: LD_STRING , 
78901: STR
78902: PUSH
78903: LD_VAR 0 3
78907: PPUSH
78908: CALL_OW 251
78912: STR
78913: PUSH
78914: LD_STRING , 
78916: STR
78917: PUSH
78918: LD_VAR 0 3
78922: PPUSH
78923: CALL_OW 254
78927: STR
78928: PUSH
78929: LD_STRING , 
78931: STR
78932: PUSH
78933: LD_VAR 0 3
78937: PPUSH
78938: LD_INT 1
78940: PPUSH
78941: CALL_OW 268
78945: STR
78946: PUSH
78947: LD_STRING , 
78949: STR
78950: PUSH
78951: LD_VAR 0 3
78955: PPUSH
78956: LD_INT 2
78958: PPUSH
78959: CALL_OW 268
78963: STR
78964: PUSH
78965: LD_STRING ],
78967: STR
78968: PPUSH
78969: CALL_OW 561
// end ;
78973: GO 78867
78975: POP
78976: POP
// AddToLog ( ]; ) ;
78977: LD_STRING ];
78979: PPUSH
78980: CALL_OW 561
// end ;
78984: LD_VAR 0 2
78988: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78989: LD_INT 0
78991: PPUSH
78992: PPUSH
78993: PPUSH
78994: PPUSH
78995: PPUSH
// if not area or not rate or not max then
78996: LD_VAR 0 1
79000: NOT
79001: IFTRUE 79010
79003: PUSH
79004: LD_VAR 0 2
79008: NOT
79009: OR
79010: IFTRUE 79019
79012: PUSH
79013: LD_VAR 0 4
79017: NOT
79018: OR
79019: IFFALSE 79023
// exit ;
79021: GO 79212
// while 1 do
79023: LD_INT 1
79025: IFFALSE 79212
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79027: LD_ADDR_VAR 0 9
79031: PUSH
79032: LD_VAR 0 1
79036: PPUSH
79037: LD_INT 1
79039: PPUSH
79040: CALL_OW 287
79044: PUSH
79045: LD_INT 10
79047: MUL
79048: ST_TO_ADDR
// r := rate / 10 ;
79049: LD_ADDR_VAR 0 7
79053: PUSH
79054: LD_VAR 0 2
79058: PUSH
79059: LD_INT 10
79061: DIVREAL
79062: ST_TO_ADDR
// time := 1 1$00 ;
79063: LD_ADDR_VAR 0 8
79067: PUSH
79068: LD_INT 2100
79070: ST_TO_ADDR
// if amount < min then
79071: LD_VAR 0 9
79075: PUSH
79076: LD_VAR 0 3
79080: LESS
79081: IFFALSE 79099
// r := r * 2 else
79083: LD_ADDR_VAR 0 7
79087: PUSH
79088: LD_VAR 0 7
79092: PUSH
79093: LD_INT 2
79095: MUL
79096: ST_TO_ADDR
79097: GO 79125
// if amount > max then
79099: LD_VAR 0 9
79103: PUSH
79104: LD_VAR 0 4
79108: GREATER
79109: IFFALSE 79125
// r := r / 2 ;
79111: LD_ADDR_VAR 0 7
79115: PUSH
79116: LD_VAR 0 7
79120: PUSH
79121: LD_INT 2
79123: DIVREAL
79124: ST_TO_ADDR
// time := time / r ;
79125: LD_ADDR_VAR 0 8
79129: PUSH
79130: LD_VAR 0 8
79134: PUSH
79135: LD_VAR 0 7
79139: DIVREAL
79140: ST_TO_ADDR
// if time < 0 then
79141: LD_VAR 0 8
79145: PUSH
79146: LD_INT 0
79148: LESS
79149: IFFALSE 79166
// time := time * - 1 ;
79151: LD_ADDR_VAR 0 8
79155: PUSH
79156: LD_VAR 0 8
79160: PUSH
79161: LD_INT 1
79163: NEG
79164: MUL
79165: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79166: LD_VAR 0 8
79170: PUSH
79171: LD_INT 35
79173: PPUSH
79174: LD_INT 875
79176: PPUSH
79177: CALL_OW 12
79181: PLUS
79182: PPUSH
79183: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79187: LD_INT 1
79189: PPUSH
79190: LD_INT 5
79192: PPUSH
79193: CALL_OW 12
79197: PPUSH
79198: LD_VAR 0 1
79202: PPUSH
79203: LD_INT 1
79205: PPUSH
79206: CALL_OW 55
// end ;
79210: GO 79023
// end ;
79212: LD_VAR 0 5
79216: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79217: LD_INT 0
79219: PPUSH
79220: PPUSH
79221: PPUSH
79222: PPUSH
79223: PPUSH
79224: PPUSH
79225: PPUSH
79226: PPUSH
// if not turrets or not factories then
79227: LD_VAR 0 1
79231: NOT
79232: IFTRUE 79241
79234: PUSH
79235: LD_VAR 0 2
79239: NOT
79240: OR
79241: IFFALSE 79245
// exit ;
79243: GO 79552
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79245: LD_ADDR_VAR 0 10
79249: PUSH
79250: LD_INT 5
79252: PUSH
79253: LD_INT 6
79255: PUSH
79256: EMPTY
79257: LIST
79258: LIST
79259: PUSH
79260: LD_INT 2
79262: PUSH
79263: LD_INT 4
79265: PUSH
79266: EMPTY
79267: LIST
79268: LIST
79269: PUSH
79270: LD_INT 3
79272: PUSH
79273: LD_INT 5
79275: PUSH
79276: EMPTY
79277: LIST
79278: LIST
79279: PUSH
79280: EMPTY
79281: LIST
79282: LIST
79283: LIST
79284: PUSH
79285: LD_INT 24
79287: PUSH
79288: LD_INT 25
79290: PUSH
79291: EMPTY
79292: LIST
79293: LIST
79294: PUSH
79295: LD_INT 23
79297: PUSH
79298: LD_INT 27
79300: PUSH
79301: EMPTY
79302: LIST
79303: LIST
79304: PUSH
79305: EMPTY
79306: LIST
79307: LIST
79308: PUSH
79309: LD_INT 42
79311: PUSH
79312: LD_INT 43
79314: PUSH
79315: EMPTY
79316: LIST
79317: LIST
79318: PUSH
79319: LD_INT 44
79321: PUSH
79322: LD_INT 46
79324: PUSH
79325: EMPTY
79326: LIST
79327: LIST
79328: PUSH
79329: LD_INT 45
79331: PUSH
79332: LD_INT 47
79334: PUSH
79335: EMPTY
79336: LIST
79337: LIST
79338: PUSH
79339: EMPTY
79340: LIST
79341: LIST
79342: LIST
79343: PUSH
79344: EMPTY
79345: LIST
79346: LIST
79347: LIST
79348: ST_TO_ADDR
// result := [ ] ;
79349: LD_ADDR_VAR 0 3
79353: PUSH
79354: EMPTY
79355: ST_TO_ADDR
// for i in turrets do
79356: LD_ADDR_VAR 0 4
79360: PUSH
79361: LD_VAR 0 1
79365: PUSH
79366: FOR_IN
79367: IFFALSE 79550
// begin nat := GetNation ( i ) ;
79369: LD_ADDR_VAR 0 7
79373: PUSH
79374: LD_VAR 0 4
79378: PPUSH
79379: CALL_OW 248
79383: ST_TO_ADDR
// weapon := 0 ;
79384: LD_ADDR_VAR 0 8
79388: PUSH
79389: LD_INT 0
79391: ST_TO_ADDR
// if not nat then
79392: LD_VAR 0 7
79396: NOT
79397: IFFALSE 79401
// continue ;
79399: GO 79366
// for j in list [ nat ] do
79401: LD_ADDR_VAR 0 5
79405: PUSH
79406: LD_VAR 0 10
79410: PUSH
79411: LD_VAR 0 7
79415: ARRAY
79416: PUSH
79417: FOR_IN
79418: IFFALSE 79459
// if GetBWeapon ( i ) = j [ 1 ] then
79420: LD_VAR 0 4
79424: PPUSH
79425: CALL_OW 269
79429: PUSH
79430: LD_VAR 0 5
79434: PUSH
79435: LD_INT 1
79437: ARRAY
79438: EQUAL
79439: IFFALSE 79457
// begin weapon := j [ 2 ] ;
79441: LD_ADDR_VAR 0 8
79445: PUSH
79446: LD_VAR 0 5
79450: PUSH
79451: LD_INT 2
79453: ARRAY
79454: ST_TO_ADDR
// break ;
79455: GO 79459
// end ;
79457: GO 79417
79459: POP
79460: POP
// if not weapon then
79461: LD_VAR 0 8
79465: NOT
79466: IFFALSE 79470
// continue ;
79468: GO 79366
// for k in factories do
79470: LD_ADDR_VAR 0 6
79474: PUSH
79475: LD_VAR 0 2
79479: PUSH
79480: FOR_IN
79481: IFFALSE 79546
// begin weapons := AvailableWeaponList ( k ) ;
79483: LD_ADDR_VAR 0 9
79487: PUSH
79488: LD_VAR 0 6
79492: PPUSH
79493: CALL_OW 478
79497: ST_TO_ADDR
// if not weapons then
79498: LD_VAR 0 9
79502: NOT
79503: IFFALSE 79507
// continue ;
79505: GO 79480
// if weapon in weapons then
79507: LD_VAR 0 8
79511: PUSH
79512: LD_VAR 0 9
79516: IN
79517: IFFALSE 79544
// begin result := [ i , weapon ] ;
79519: LD_ADDR_VAR 0 3
79523: PUSH
79524: LD_VAR 0 4
79528: PUSH
79529: LD_VAR 0 8
79533: PUSH
79534: EMPTY
79535: LIST
79536: LIST
79537: ST_TO_ADDR
// exit ;
79538: POP
79539: POP
79540: POP
79541: POP
79542: GO 79552
// end ; end ;
79544: GO 79480
79546: POP
79547: POP
// end ;
79548: GO 79366
79550: POP
79551: POP
// end ;
79552: LD_VAR 0 3
79556: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79557: LD_INT 0
79559: PPUSH
// if not side or side > 8 then
79560: LD_VAR 0 3
79564: NOT
79565: IFTRUE 79577
79567: PUSH
79568: LD_VAR 0 3
79572: PUSH
79573: LD_INT 8
79575: GREATER
79576: OR
79577: IFFALSE 79581
// exit ;
79579: GO 79640
// if not range then
79581: LD_VAR 0 4
79585: NOT
79586: IFFALSE 79597
// range := - 12 ;
79588: LD_ADDR_VAR 0 4
79592: PUSH
79593: LD_INT 12
79595: NEG
79596: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79597: LD_VAR 0 1
79601: PPUSH
79602: LD_VAR 0 2
79606: PPUSH
79607: LD_VAR 0 3
79611: PPUSH
79612: LD_VAR 0 4
79616: PPUSH
79617: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79621: LD_VAR 0 1
79625: PPUSH
79626: LD_VAR 0 2
79630: PPUSH
79631: LD_VAR 0 3
79635: PPUSH
79636: CALL_OW 331
// end ;
79640: LD_VAR 0 5
79644: RET
// export function Video ( mode ) ; begin
79645: LD_INT 0
79647: PPUSH
// ingame_video = mode ;
79648: LD_ADDR_OWVAR 52
79652: PUSH
79653: LD_VAR 0 1
79657: ST_TO_ADDR
// interface_hidden = mode ;
79658: LD_ADDR_OWVAR 54
79662: PUSH
79663: LD_VAR 0 1
79667: ST_TO_ADDR
// end ;
79668: LD_VAR 0 2
79672: RET
// export function Join ( array , element ) ; begin
79673: LD_INT 0
79675: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79676: LD_ADDR_VAR 0 3
79680: PUSH
79681: LD_VAR 0 1
79685: PPUSH
79686: LD_VAR 0 1
79690: PUSH
79691: LD_INT 1
79693: PLUS
79694: PPUSH
79695: LD_VAR 0 2
79699: PPUSH
79700: CALL_OW 1
79704: ST_TO_ADDR
// end ;
79705: LD_VAR 0 3
79709: RET
// export function JoinUnion ( array , element ) ; begin
79710: LD_INT 0
79712: PPUSH
// result := array union element ;
79713: LD_ADDR_VAR 0 3
79717: PUSH
79718: LD_VAR 0 1
79722: PUSH
79723: LD_VAR 0 2
79727: UNION
79728: ST_TO_ADDR
// end ;
79729: LD_VAR 0 3
79733: RET
// export function GetBehemoths ( side ) ; begin
79734: LD_INT 0
79736: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79737: LD_ADDR_VAR 0 2
79741: PUSH
79742: LD_INT 22
79744: PUSH
79745: LD_VAR 0 1
79749: PUSH
79750: EMPTY
79751: LIST
79752: LIST
79753: PUSH
79754: LD_INT 31
79756: PUSH
79757: LD_INT 25
79759: PUSH
79760: EMPTY
79761: LIST
79762: LIST
79763: PUSH
79764: EMPTY
79765: LIST
79766: LIST
79767: PPUSH
79768: CALL_OW 69
79772: ST_TO_ADDR
// end ;
79773: LD_VAR 0 2
79777: RET
// export function Shuffle ( array ) ; var i , index ; begin
79778: LD_INT 0
79780: PPUSH
79781: PPUSH
79782: PPUSH
// result := [ ] ;
79783: LD_ADDR_VAR 0 2
79787: PUSH
79788: EMPTY
79789: ST_TO_ADDR
// if not array then
79790: LD_VAR 0 1
79794: NOT
79795: IFFALSE 79799
// exit ;
79797: GO 79898
// Randomize ;
79799: CALL_OW 10
// for i = array downto 1 do
79803: LD_ADDR_VAR 0 3
79807: PUSH
79808: DOUBLE
79809: LD_VAR 0 1
79813: INC
79814: ST_TO_ADDR
79815: LD_INT 1
79817: PUSH
79818: FOR_DOWNTO
79819: IFFALSE 79896
// begin index := rand ( 1 , array ) ;
79821: LD_ADDR_VAR 0 4
79825: PUSH
79826: LD_INT 1
79828: PPUSH
79829: LD_VAR 0 1
79833: PPUSH
79834: CALL_OW 12
79838: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79839: LD_ADDR_VAR 0 2
79843: PUSH
79844: LD_VAR 0 2
79848: PPUSH
79849: LD_VAR 0 2
79853: PUSH
79854: LD_INT 1
79856: PLUS
79857: PPUSH
79858: LD_VAR 0 1
79862: PUSH
79863: LD_VAR 0 4
79867: ARRAY
79868: PPUSH
79869: CALL_OW 2
79873: ST_TO_ADDR
// array := Delete ( array , index ) ;
79874: LD_ADDR_VAR 0 1
79878: PUSH
79879: LD_VAR 0 1
79883: PPUSH
79884: LD_VAR 0 4
79888: PPUSH
79889: CALL_OW 3
79893: ST_TO_ADDR
// end ;
79894: GO 79818
79896: POP
79897: POP
// end ;
79898: LD_VAR 0 2
79902: RET
// export function GetBaseMaterials ( base ) ; begin
79903: LD_INT 0
79905: PPUSH
// result := [ 0 , 0 , 0 ] ;
79906: LD_ADDR_VAR 0 2
79910: PUSH
79911: LD_INT 0
79913: PUSH
79914: LD_INT 0
79916: PUSH
79917: LD_INT 0
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: LIST
79924: ST_TO_ADDR
// if not base then
79925: LD_VAR 0 1
79929: NOT
79930: IFFALSE 79934
// exit ;
79932: GO 79983
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79934: LD_ADDR_VAR 0 2
79938: PUSH
79939: LD_VAR 0 1
79943: PPUSH
79944: LD_INT 1
79946: PPUSH
79947: CALL_OW 275
79951: PUSH
79952: LD_VAR 0 1
79956: PPUSH
79957: LD_INT 2
79959: PPUSH
79960: CALL_OW 275
79964: PUSH
79965: LD_VAR 0 1
79969: PPUSH
79970: LD_INT 3
79972: PPUSH
79973: CALL_OW 275
79977: PUSH
79978: EMPTY
79979: LIST
79980: LIST
79981: LIST
79982: ST_TO_ADDR
// end ;
79983: LD_VAR 0 2
79987: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79988: LD_INT 0
79990: PPUSH
79991: PPUSH
// result := array ;
79992: LD_ADDR_VAR 0 3
79996: PUSH
79997: LD_VAR 0 1
80001: ST_TO_ADDR
// if size >= result then
80002: LD_VAR 0 2
80006: PUSH
80007: LD_VAR 0 3
80011: GREATEREQUAL
80012: IFFALSE 80016
// exit ;
80014: GO 80066
// if size then
80016: LD_VAR 0 2
80020: IFFALSE 80066
// for i := array downto size do
80022: LD_ADDR_VAR 0 4
80026: PUSH
80027: DOUBLE
80028: LD_VAR 0 1
80032: INC
80033: ST_TO_ADDR
80034: LD_VAR 0 2
80038: PUSH
80039: FOR_DOWNTO
80040: IFFALSE 80064
// result := Delete ( result , result ) ;
80042: LD_ADDR_VAR 0 3
80046: PUSH
80047: LD_VAR 0 3
80051: PPUSH
80052: LD_VAR 0 3
80056: PPUSH
80057: CALL_OW 3
80061: ST_TO_ADDR
80062: GO 80039
80064: POP
80065: POP
// end ;
80066: LD_VAR 0 3
80070: RET
// export function ComExit ( unit ) ; var tmp ; begin
80071: LD_INT 0
80073: PPUSH
80074: PPUSH
// if not IsInUnit ( unit ) then
80075: LD_VAR 0 1
80079: PPUSH
80080: CALL_OW 310
80084: NOT
80085: IFFALSE 80089
// exit ;
80087: GO 80149
// tmp := IsInUnit ( unit ) ;
80089: LD_ADDR_VAR 0 3
80093: PUSH
80094: LD_VAR 0 1
80098: PPUSH
80099: CALL_OW 310
80103: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80104: LD_VAR 0 3
80108: PPUSH
80109: CALL_OW 247
80113: PUSH
80114: LD_INT 2
80116: EQUAL
80117: IFFALSE 80130
// ComExitVehicle ( unit ) else
80119: LD_VAR 0 1
80123: PPUSH
80124: CALL_OW 121
80128: GO 80139
// ComExitBuilding ( unit ) ;
80130: LD_VAR 0 1
80134: PPUSH
80135: CALL_OW 122
// result := tmp ;
80139: LD_ADDR_VAR 0 2
80143: PUSH
80144: LD_VAR 0 3
80148: ST_TO_ADDR
// end ;
80149: LD_VAR 0 2
80153: RET
// export function ComExitAll ( units ) ; var i ; begin
80154: LD_INT 0
80156: PPUSH
80157: PPUSH
// if not units then
80158: LD_VAR 0 1
80162: NOT
80163: IFFALSE 80167
// exit ;
80165: GO 80193
// for i in units do
80167: LD_ADDR_VAR 0 3
80171: PUSH
80172: LD_VAR 0 1
80176: PUSH
80177: FOR_IN
80178: IFFALSE 80191
// ComExit ( i ) ;
80180: LD_VAR 0 3
80184: PPUSH
80185: CALL 80071 0 1
80189: GO 80177
80191: POP
80192: POP
// end ;
80193: LD_VAR 0 2
80197: RET
// export function ResetHc ; begin
80198: LD_INT 0
80200: PPUSH
// InitHc ;
80201: CALL_OW 19
// hc_importance := 0 ;
80205: LD_ADDR_OWVAR 32
80209: PUSH
80210: LD_INT 0
80212: ST_TO_ADDR
// end ;
80213: LD_VAR 0 1
80217: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80218: LD_INT 0
80220: PPUSH
80221: PPUSH
80222: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80223: LD_ADDR_VAR 0 6
80227: PUSH
80228: LD_VAR 0 1
80232: PUSH
80233: LD_VAR 0 3
80237: PLUS
80238: PUSH
80239: LD_INT 2
80241: DIV
80242: ST_TO_ADDR
// if _x < 0 then
80243: LD_VAR 0 6
80247: PUSH
80248: LD_INT 0
80250: LESS
80251: IFFALSE 80268
// _x := _x * - 1 ;
80253: LD_ADDR_VAR 0 6
80257: PUSH
80258: LD_VAR 0 6
80262: PUSH
80263: LD_INT 1
80265: NEG
80266: MUL
80267: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80268: LD_ADDR_VAR 0 7
80272: PUSH
80273: LD_VAR 0 2
80277: PUSH
80278: LD_VAR 0 4
80282: PLUS
80283: PUSH
80284: LD_INT 2
80286: DIV
80287: ST_TO_ADDR
// if _y < 0 then
80288: LD_VAR 0 7
80292: PUSH
80293: LD_INT 0
80295: LESS
80296: IFFALSE 80313
// _y := _y * - 1 ;
80298: LD_ADDR_VAR 0 7
80302: PUSH
80303: LD_VAR 0 7
80307: PUSH
80308: LD_INT 1
80310: NEG
80311: MUL
80312: ST_TO_ADDR
// result := [ _x , _y ] ;
80313: LD_ADDR_VAR 0 5
80317: PUSH
80318: LD_VAR 0 6
80322: PUSH
80323: LD_VAR 0 7
80327: PUSH
80328: EMPTY
80329: LIST
80330: LIST
80331: ST_TO_ADDR
// end ;
80332: LD_VAR 0 5
80336: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80337: LD_INT 0
80339: PPUSH
80340: PPUSH
80341: PPUSH
80342: PPUSH
// task := GetTaskList ( unit ) ;
80343: LD_ADDR_VAR 0 7
80347: PUSH
80348: LD_VAR 0 1
80352: PPUSH
80353: CALL_OW 437
80357: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80358: LD_VAR 0 7
80362: NOT
80363: IFFALSE 80382
80365: PUSH
80366: LD_VAR 0 1
80370: PPUSH
80371: LD_VAR 0 2
80375: PPUSH
80376: CALL_OW 308
80380: NOT
80381: AND
80382: IFFALSE 80386
// exit ;
80384: GO 80504
// if IsInArea ( unit , area ) then
80386: LD_VAR 0 1
80390: PPUSH
80391: LD_VAR 0 2
80395: PPUSH
80396: CALL_OW 308
80400: IFFALSE 80418
// begin ComMoveToArea ( unit , goAway ) ;
80402: LD_VAR 0 1
80406: PPUSH
80407: LD_VAR 0 3
80411: PPUSH
80412: CALL_OW 113
// exit ;
80416: GO 80504
// end ; if task [ 1 ] [ 1 ] <> M then
80418: LD_VAR 0 7
80422: PUSH
80423: LD_INT 1
80425: ARRAY
80426: PUSH
80427: LD_INT 1
80429: ARRAY
80430: PUSH
80431: LD_STRING M
80433: NONEQUAL
80434: IFFALSE 80438
// exit ;
80436: GO 80504
// x := task [ 1 ] [ 2 ] ;
80438: LD_ADDR_VAR 0 5
80442: PUSH
80443: LD_VAR 0 7
80447: PUSH
80448: LD_INT 1
80450: ARRAY
80451: PUSH
80452: LD_INT 2
80454: ARRAY
80455: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80456: LD_ADDR_VAR 0 6
80460: PUSH
80461: LD_VAR 0 7
80465: PUSH
80466: LD_INT 1
80468: ARRAY
80469: PUSH
80470: LD_INT 3
80472: ARRAY
80473: ST_TO_ADDR
// if InArea ( x , y , area ) then
80474: LD_VAR 0 5
80478: PPUSH
80479: LD_VAR 0 6
80483: PPUSH
80484: LD_VAR 0 2
80488: PPUSH
80489: CALL_OW 309
80493: IFFALSE 80504
// ComStop ( unit ) ;
80495: LD_VAR 0 1
80499: PPUSH
80500: CALL_OW 141
// end ;
80504: LD_VAR 0 4
80508: RET
// export function Abs ( value ) ; begin
80509: LD_INT 0
80511: PPUSH
// result := value ;
80512: LD_ADDR_VAR 0 2
80516: PUSH
80517: LD_VAR 0 1
80521: ST_TO_ADDR
// if value < 0 then
80522: LD_VAR 0 1
80526: PUSH
80527: LD_INT 0
80529: LESS
80530: IFFALSE 80547
// result := value * - 1 ;
80532: LD_ADDR_VAR 0 2
80536: PUSH
80537: LD_VAR 0 1
80541: PUSH
80542: LD_INT 1
80544: NEG
80545: MUL
80546: ST_TO_ADDR
// end ;
80547: LD_VAR 0 2
80551: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80552: LD_INT 0
80554: PPUSH
80555: PPUSH
80556: PPUSH
80557: PPUSH
80558: PPUSH
80559: PPUSH
80560: PPUSH
80561: PPUSH
// if not unit or not building then
80562: LD_VAR 0 1
80566: NOT
80567: IFTRUE 80576
80569: PUSH
80570: LD_VAR 0 2
80574: NOT
80575: OR
80576: IFFALSE 80580
// exit ;
80578: GO 80808
// x := GetX ( building ) ;
80580: LD_ADDR_VAR 0 4
80584: PUSH
80585: LD_VAR 0 2
80589: PPUSH
80590: CALL_OW 250
80594: ST_TO_ADDR
// y := GetY ( building ) ;
80595: LD_ADDR_VAR 0 6
80599: PUSH
80600: LD_VAR 0 2
80604: PPUSH
80605: CALL_OW 251
80609: ST_TO_ADDR
// d := GetDir ( building ) ;
80610: LD_ADDR_VAR 0 8
80614: PUSH
80615: LD_VAR 0 2
80619: PPUSH
80620: CALL_OW 254
80624: ST_TO_ADDR
// r := 4 ;
80625: LD_ADDR_VAR 0 9
80629: PUSH
80630: LD_INT 4
80632: ST_TO_ADDR
// for i := 1 to 5 do
80633: LD_ADDR_VAR 0 10
80637: PUSH
80638: DOUBLE
80639: LD_INT 1
80641: DEC
80642: ST_TO_ADDR
80643: LD_INT 5
80645: PUSH
80646: FOR_TO
80647: IFFALSE 80806
// begin _x := ShiftX ( x , d , r + i ) ;
80649: LD_ADDR_VAR 0 5
80653: PUSH
80654: LD_VAR 0 4
80658: PPUSH
80659: LD_VAR 0 8
80663: PPUSH
80664: LD_VAR 0 9
80668: PUSH
80669: LD_VAR 0 10
80673: PLUS
80674: PPUSH
80675: CALL_OW 272
80679: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80680: LD_ADDR_VAR 0 7
80684: PUSH
80685: LD_VAR 0 6
80689: PPUSH
80690: LD_VAR 0 8
80694: PPUSH
80695: LD_VAR 0 9
80699: PUSH
80700: LD_VAR 0 10
80704: PLUS
80705: PPUSH
80706: CALL_OW 273
80710: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80711: LD_VAR 0 5
80715: PPUSH
80716: LD_VAR 0 7
80720: PPUSH
80721: CALL_OW 488
80725: IFFALSE 80760
80727: PUSH
80728: LD_VAR 0 5
80732: PPUSH
80733: LD_VAR 0 7
80737: PPUSH
80738: CALL_OW 428
80742: PPUSH
80743: CALL_OW 247
80747: PUSH
80748: LD_INT 3
80750: PUSH
80751: LD_INT 2
80753: PUSH
80754: EMPTY
80755: LIST
80756: LIST
80757: IN
80758: NOT
80759: AND
80760: IFFALSE 80804
// begin ComMoveXY ( unit , _x , _y ) ;
80762: LD_VAR 0 1
80766: PPUSH
80767: LD_VAR 0 5
80771: PPUSH
80772: LD_VAR 0 7
80776: PPUSH
80777: CALL_OW 111
// result := [ _x , _y ] ;
80781: LD_ADDR_VAR 0 3
80785: PUSH
80786: LD_VAR 0 5
80790: PUSH
80791: LD_VAR 0 7
80795: PUSH
80796: EMPTY
80797: LIST
80798: LIST
80799: ST_TO_ADDR
// exit ;
80800: POP
80801: POP
80802: GO 80808
// end ; end ;
80804: GO 80646
80806: POP
80807: POP
// end ;
80808: LD_VAR 0 3
80812: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80813: LD_INT 0
80815: PPUSH
80816: PPUSH
80817: PPUSH
// result := 0 ;
80818: LD_ADDR_VAR 0 3
80822: PUSH
80823: LD_INT 0
80825: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80826: LD_VAR 0 1
80830: PUSH
80831: LD_INT 0
80833: LESS
80834: IFTRUE 80846
80836: PUSH
80837: LD_VAR 0 1
80841: PUSH
80842: LD_INT 8
80844: GREATER
80845: OR
80846: IFTRUE 80858
80848: PUSH
80849: LD_VAR 0 2
80853: PUSH
80854: LD_INT 0
80856: LESS
80857: OR
80858: IFTRUE 80870
80860: PUSH
80861: LD_VAR 0 2
80865: PUSH
80866: LD_INT 8
80868: GREATER
80869: OR
80870: IFFALSE 80874
// exit ;
80872: GO 80949
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80874: LD_ADDR_VAR 0 4
80878: PUSH
80879: LD_INT 22
80881: PUSH
80882: LD_VAR 0 2
80886: PUSH
80887: EMPTY
80888: LIST
80889: LIST
80890: PPUSH
80891: CALL_OW 69
80895: PUSH
80896: FOR_IN
80897: IFFALSE 80947
// begin un := UnitShoot ( i ) ;
80899: LD_ADDR_VAR 0 5
80903: PUSH
80904: LD_VAR 0 4
80908: PPUSH
80909: CALL_OW 504
80913: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80914: LD_VAR 0 5
80918: PPUSH
80919: CALL_OW 255
80923: PUSH
80924: LD_VAR 0 1
80928: EQUAL
80929: IFFALSE 80945
// begin result := un ;
80931: LD_ADDR_VAR 0 3
80935: PUSH
80936: LD_VAR 0 5
80940: ST_TO_ADDR
// exit ;
80941: POP
80942: POP
80943: GO 80949
// end ; end ;
80945: GO 80896
80947: POP
80948: POP
// end ;
80949: LD_VAR 0 3
80953: RET
// export function GetCargoBay ( units ) ; begin
80954: LD_INT 0
80956: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80957: LD_ADDR_VAR 0 2
80961: PUSH
80962: LD_VAR 0 1
80966: PPUSH
80967: LD_INT 2
80969: PUSH
80970: LD_INT 34
80972: PUSH
80973: LD_INT 12
80975: PUSH
80976: EMPTY
80977: LIST
80978: LIST
80979: PUSH
80980: LD_INT 34
80982: PUSH
80983: LD_INT 51
80985: PUSH
80986: EMPTY
80987: LIST
80988: LIST
80989: PUSH
80990: LD_INT 34
80992: PUSH
80993: LD_INT 32
80995: PUSH
80996: EMPTY
80997: LIST
80998: LIST
80999: PUSH
81000: LD_INT 34
81002: PUSH
81003: LD_INT 89
81005: PUSH
81006: EMPTY
81007: LIST
81008: LIST
81009: PUSH
81010: EMPTY
81011: LIST
81012: LIST
81013: LIST
81014: LIST
81015: LIST
81016: PPUSH
81017: CALL_OW 72
81021: ST_TO_ADDR
// end ;
81022: LD_VAR 0 2
81026: RET
// export function Negate ( value ) ; begin
81027: LD_INT 0
81029: PPUSH
// result := not value ;
81030: LD_ADDR_VAR 0 2
81034: PUSH
81035: LD_VAR 0 1
81039: NOT
81040: ST_TO_ADDR
// end ;
81041: LD_VAR 0 2
81045: RET
// export function Inc ( value ) ; begin
81046: LD_INT 0
81048: PPUSH
// result := value + 1 ;
81049: LD_ADDR_VAR 0 2
81053: PUSH
81054: LD_VAR 0 1
81058: PUSH
81059: LD_INT 1
81061: PLUS
81062: ST_TO_ADDR
// end ;
81063: LD_VAR 0 2
81067: RET
// export function Dec ( value ) ; begin
81068: LD_INT 0
81070: PPUSH
// result := value - 1 ;
81071: LD_ADDR_VAR 0 2
81075: PUSH
81076: LD_VAR 0 1
81080: PUSH
81081: LD_INT 1
81083: MINUS
81084: ST_TO_ADDR
// end ;
81085: LD_VAR 0 2
81089: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81090: LD_INT 0
81092: PPUSH
81093: PPUSH
81094: PPUSH
81095: PPUSH
81096: PPUSH
81097: PPUSH
81098: PPUSH
81099: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81100: LD_VAR 0 1
81104: PPUSH
81105: LD_VAR 0 2
81109: PPUSH
81110: CALL_OW 488
81114: NOT
81115: IFTRUE 81134
81117: PUSH
81118: LD_VAR 0 3
81122: PPUSH
81123: LD_VAR 0 4
81127: PPUSH
81128: CALL_OW 488
81132: NOT
81133: OR
81134: IFFALSE 81147
// begin result := - 1 ;
81136: LD_ADDR_VAR 0 5
81140: PUSH
81141: LD_INT 1
81143: NEG
81144: ST_TO_ADDR
// exit ;
81145: GO 81382
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81147: LD_ADDR_VAR 0 12
81151: PUSH
81152: LD_VAR 0 1
81156: PPUSH
81157: LD_VAR 0 2
81161: PPUSH
81162: LD_VAR 0 3
81166: PPUSH
81167: LD_VAR 0 4
81171: PPUSH
81172: CALL 80218 0 4
81176: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81177: LD_ADDR_VAR 0 11
81181: PUSH
81182: LD_VAR 0 1
81186: PPUSH
81187: LD_VAR 0 2
81191: PPUSH
81192: LD_VAR 0 12
81196: PUSH
81197: LD_INT 1
81199: ARRAY
81200: PPUSH
81201: LD_VAR 0 12
81205: PUSH
81206: LD_INT 2
81208: ARRAY
81209: PPUSH
81210: CALL_OW 298
81214: ST_TO_ADDR
// distance := 9999 ;
81215: LD_ADDR_VAR 0 10
81219: PUSH
81220: LD_INT 9999
81222: ST_TO_ADDR
// for i := 0 to 5 do
81223: LD_ADDR_VAR 0 6
81227: PUSH
81228: DOUBLE
81229: LD_INT 0
81231: DEC
81232: ST_TO_ADDR
81233: LD_INT 5
81235: PUSH
81236: FOR_TO
81237: IFFALSE 81380
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81239: LD_ADDR_VAR 0 7
81243: PUSH
81244: LD_VAR 0 1
81248: PPUSH
81249: LD_VAR 0 6
81253: PPUSH
81254: LD_VAR 0 11
81258: PPUSH
81259: CALL_OW 272
81263: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81264: LD_ADDR_VAR 0 8
81268: PUSH
81269: LD_VAR 0 2
81273: PPUSH
81274: LD_VAR 0 6
81278: PPUSH
81279: LD_VAR 0 11
81283: PPUSH
81284: CALL_OW 273
81288: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81289: LD_VAR 0 7
81293: PPUSH
81294: LD_VAR 0 8
81298: PPUSH
81299: CALL_OW 488
81303: NOT
81304: IFFALSE 81308
// continue ;
81306: GO 81236
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81308: LD_ADDR_VAR 0 9
81312: PUSH
81313: LD_VAR 0 12
81317: PUSH
81318: LD_INT 1
81320: ARRAY
81321: PPUSH
81322: LD_VAR 0 12
81326: PUSH
81327: LD_INT 2
81329: ARRAY
81330: PPUSH
81331: LD_VAR 0 7
81335: PPUSH
81336: LD_VAR 0 8
81340: PPUSH
81341: CALL_OW 298
81345: ST_TO_ADDR
// if tmp < distance then
81346: LD_VAR 0 9
81350: PUSH
81351: LD_VAR 0 10
81355: LESS
81356: IFFALSE 81378
// begin result := i ;
81358: LD_ADDR_VAR 0 5
81362: PUSH
81363: LD_VAR 0 6
81367: ST_TO_ADDR
// distance := tmp ;
81368: LD_ADDR_VAR 0 10
81372: PUSH
81373: LD_VAR 0 9
81377: ST_TO_ADDR
// end ; end ;
81378: GO 81236
81380: POP
81381: POP
// end ;
81382: LD_VAR 0 5
81386: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81387: LD_INT 0
81389: PPUSH
81390: PPUSH
// if not driver or not IsInUnit ( driver ) then
81391: LD_VAR 0 1
81395: NOT
81396: IFTRUE 81410
81398: PUSH
81399: LD_VAR 0 1
81403: PPUSH
81404: CALL_OW 310
81408: NOT
81409: OR
81410: IFFALSE 81414
// exit ;
81412: GO 81504
// vehicle := IsInUnit ( driver ) ;
81414: LD_ADDR_VAR 0 3
81418: PUSH
81419: LD_VAR 0 1
81423: PPUSH
81424: CALL_OW 310
81428: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81429: LD_VAR 0 1
81433: PPUSH
81434: LD_STRING \
81436: PUSH
81437: LD_INT 0
81439: PUSH
81440: LD_INT 0
81442: PUSH
81443: LD_INT 0
81445: PUSH
81446: LD_INT 0
81448: PUSH
81449: LD_INT 0
81451: PUSH
81452: LD_INT 0
81454: PUSH
81455: EMPTY
81456: LIST
81457: LIST
81458: LIST
81459: LIST
81460: LIST
81461: LIST
81462: LIST
81463: PUSH
81464: LD_STRING E
81466: PUSH
81467: LD_INT 0
81469: PUSH
81470: LD_INT 0
81472: PUSH
81473: LD_VAR 0 3
81477: PUSH
81478: LD_INT 0
81480: PUSH
81481: LD_INT 0
81483: PUSH
81484: LD_INT 0
81486: PUSH
81487: EMPTY
81488: LIST
81489: LIST
81490: LIST
81491: LIST
81492: LIST
81493: LIST
81494: LIST
81495: PUSH
81496: EMPTY
81497: LIST
81498: LIST
81499: PPUSH
81500: CALL_OW 446
// end ;
81504: LD_VAR 0 2
81508: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81509: LD_INT 0
81511: PPUSH
81512: PPUSH
// if not driver or not IsInUnit ( driver ) then
81513: LD_VAR 0 1
81517: NOT
81518: IFTRUE 81532
81520: PUSH
81521: LD_VAR 0 1
81525: PPUSH
81526: CALL_OW 310
81530: NOT
81531: OR
81532: IFFALSE 81536
// exit ;
81534: GO 81626
// vehicle := IsInUnit ( driver ) ;
81536: LD_ADDR_VAR 0 3
81540: PUSH
81541: LD_VAR 0 1
81545: PPUSH
81546: CALL_OW 310
81550: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81551: LD_VAR 0 1
81555: PPUSH
81556: LD_STRING \
81558: PUSH
81559: LD_INT 0
81561: PUSH
81562: LD_INT 0
81564: PUSH
81565: LD_INT 0
81567: PUSH
81568: LD_INT 0
81570: PUSH
81571: LD_INT 0
81573: PUSH
81574: LD_INT 0
81576: PUSH
81577: EMPTY
81578: LIST
81579: LIST
81580: LIST
81581: LIST
81582: LIST
81583: LIST
81584: LIST
81585: PUSH
81586: LD_STRING E
81588: PUSH
81589: LD_INT 0
81591: PUSH
81592: LD_INT 0
81594: PUSH
81595: LD_VAR 0 3
81599: PUSH
81600: LD_INT 0
81602: PUSH
81603: LD_INT 0
81605: PUSH
81606: LD_INT 0
81608: PUSH
81609: EMPTY
81610: LIST
81611: LIST
81612: LIST
81613: LIST
81614: LIST
81615: LIST
81616: LIST
81617: PUSH
81618: EMPTY
81619: LIST
81620: LIST
81621: PPUSH
81622: CALL_OW 447
// end ;
81626: LD_VAR 0 2
81630: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81631: LD_INT 0
81633: PPUSH
81634: PPUSH
81635: PPUSH
// tmp := [ ] ;
81636: LD_ADDR_VAR 0 5
81640: PUSH
81641: EMPTY
81642: ST_TO_ADDR
// for i in units do
81643: LD_ADDR_VAR 0 4
81647: PUSH
81648: LD_VAR 0 1
81652: PUSH
81653: FOR_IN
81654: IFFALSE 81692
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81656: LD_ADDR_VAR 0 5
81660: PUSH
81661: LD_VAR 0 5
81665: PPUSH
81666: LD_VAR 0 5
81670: PUSH
81671: LD_INT 1
81673: PLUS
81674: PPUSH
81675: LD_VAR 0 4
81679: PPUSH
81680: CALL_OW 256
81684: PPUSH
81685: CALL_OW 2
81689: ST_TO_ADDR
81690: GO 81653
81692: POP
81693: POP
// if not tmp then
81694: LD_VAR 0 5
81698: NOT
81699: IFFALSE 81703
// exit ;
81701: GO 81751
// if asc then
81703: LD_VAR 0 2
81707: IFFALSE 81731
// result := SortListByListAsc ( units , tmp ) else
81709: LD_ADDR_VAR 0 3
81713: PUSH
81714: LD_VAR 0 1
81718: PPUSH
81719: LD_VAR 0 5
81723: PPUSH
81724: CALL_OW 76
81728: ST_TO_ADDR
81729: GO 81751
// result := SortListByListDesc ( units , tmp ) ;
81731: LD_ADDR_VAR 0 3
81735: PUSH
81736: LD_VAR 0 1
81740: PPUSH
81741: LD_VAR 0 5
81745: PPUSH
81746: CALL_OW 77
81750: ST_TO_ADDR
// end ;
81751: LD_VAR 0 3
81755: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81756: LD_INT 0
81758: PPUSH
81759: PPUSH
// task := GetTaskList ( mech ) ;
81760: LD_ADDR_VAR 0 4
81764: PUSH
81765: LD_VAR 0 1
81769: PPUSH
81770: CALL_OW 437
81774: ST_TO_ADDR
// if not task then
81775: LD_VAR 0 4
81779: NOT
81780: IFFALSE 81784
// exit ;
81782: GO 81828
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81784: LD_ADDR_VAR 0 3
81788: PUSH
81789: LD_VAR 0 4
81793: PUSH
81794: LD_INT 1
81796: ARRAY
81797: PUSH
81798: LD_INT 1
81800: ARRAY
81801: PUSH
81802: LD_STRING r
81804: EQUAL
81805: IFFALSE 81827
81807: PUSH
81808: LD_VAR 0 4
81812: PUSH
81813: LD_INT 1
81815: ARRAY
81816: PUSH
81817: LD_INT 4
81819: ARRAY
81820: PUSH
81821: LD_VAR 0 2
81825: EQUAL
81826: AND
81827: ST_TO_ADDR
// end ;
81828: LD_VAR 0 3
81832: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81833: LD_INT 0
81835: PPUSH
// SetDir ( unit , d ) ;
81836: LD_VAR 0 1
81840: PPUSH
81841: LD_VAR 0 4
81845: PPUSH
81846: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
81850: LD_ADDR_VAR 0 6
81854: PUSH
81855: LD_VAR 0 1
81859: PPUSH
81860: LD_VAR 0 2
81864: PPUSH
81865: LD_VAR 0 3
81869: PPUSH
81870: LD_VAR 0 5
81874: PPUSH
81875: CALL_OW 48
81879: ST_TO_ADDR
// end ;
81880: LD_VAR 0 6
81884: RET
// export function ToNaturalNumber ( number ) ; begin
81885: LD_INT 0
81887: PPUSH
// result := number div 1 ;
81888: LD_ADDR_VAR 0 2
81892: PUSH
81893: LD_VAR 0 1
81897: PUSH
81898: LD_INT 1
81900: DIV
81901: ST_TO_ADDR
// if number < 0 then
81902: LD_VAR 0 1
81906: PUSH
81907: LD_INT 0
81909: LESS
81910: IFFALSE 81920
// result := 0 ;
81912: LD_ADDR_VAR 0 2
81916: PUSH
81917: LD_INT 0
81919: ST_TO_ADDR
// end ;
81920: LD_VAR 0 2
81924: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
81925: LD_INT 0
81927: PPUSH
81928: PPUSH
81929: PPUSH
// if not buildings then
81930: LD_VAR 0 1
81934: NOT
81935: IFFALSE 81939
// exit ;
81937: GO 82054
// tmp := [ ] ;
81939: LD_ADDR_VAR 0 5
81943: PUSH
81944: EMPTY
81945: ST_TO_ADDR
// for b in buildings do
81946: LD_ADDR_VAR 0 4
81950: PUSH
81951: LD_VAR 0 1
81955: PUSH
81956: FOR_IN
81957: IFFALSE 81995
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
81959: LD_ADDR_VAR 0 5
81963: PUSH
81964: LD_VAR 0 5
81968: PPUSH
81969: LD_VAR 0 5
81973: PUSH
81974: LD_INT 1
81976: PLUS
81977: PPUSH
81978: LD_VAR 0 4
81982: PPUSH
81983: CALL_OW 266
81987: PPUSH
81988: CALL_OW 1
81992: ST_TO_ADDR
81993: GO 81956
81995: POP
81996: POP
// if not tmp then
81997: LD_VAR 0 5
82001: NOT
82002: IFFALSE 82006
// exit ;
82004: GO 82054
// if asc then
82006: LD_VAR 0 2
82010: IFFALSE 82034
// result := SortListByListAsc ( buildings , tmp ) else
82012: LD_ADDR_VAR 0 3
82016: PUSH
82017: LD_VAR 0 1
82021: PPUSH
82022: LD_VAR 0 5
82026: PPUSH
82027: CALL_OW 76
82031: ST_TO_ADDR
82032: GO 82054
// result := SortListByListDesc ( buildings , tmp ) ;
82034: LD_ADDR_VAR 0 3
82038: PUSH
82039: LD_VAR 0 1
82043: PPUSH
82044: LD_VAR 0 5
82048: PPUSH
82049: CALL_OW 77
82053: ST_TO_ADDR
// end ;
82054: LD_VAR 0 3
82058: RET
// export function SortByClass ( units , class ) ; var un ; begin
82059: LD_INT 0
82061: PPUSH
82062: PPUSH
// if not units or not class then
82063: LD_VAR 0 1
82067: NOT
82068: IFTRUE 82077
82070: PUSH
82071: LD_VAR 0 2
82075: NOT
82076: OR
82077: IFFALSE 82081
// exit ;
82079: GO 82176
// result := [ ] ;
82081: LD_ADDR_VAR 0 3
82085: PUSH
82086: EMPTY
82087: ST_TO_ADDR
// for un in units do
82088: LD_ADDR_VAR 0 4
82092: PUSH
82093: LD_VAR 0 1
82097: PUSH
82098: FOR_IN
82099: IFFALSE 82174
// if GetClass ( un ) = class then
82101: LD_VAR 0 4
82105: PPUSH
82106: CALL_OW 257
82110: PUSH
82111: LD_VAR 0 2
82115: EQUAL
82116: IFFALSE 82143
// result := Insert ( result , 1 , un ) else
82118: LD_ADDR_VAR 0 3
82122: PUSH
82123: LD_VAR 0 3
82127: PPUSH
82128: LD_INT 1
82130: PPUSH
82131: LD_VAR 0 4
82135: PPUSH
82136: CALL_OW 2
82140: ST_TO_ADDR
82141: GO 82172
// result := Replace ( result , result + 1 , un ) ;
82143: LD_ADDR_VAR 0 3
82147: PUSH
82148: LD_VAR 0 3
82152: PPUSH
82153: LD_VAR 0 3
82157: PUSH
82158: LD_INT 1
82160: PLUS
82161: PPUSH
82162: LD_VAR 0 4
82166: PPUSH
82167: CALL_OW 1
82171: ST_TO_ADDR
82172: GO 82098
82174: POP
82175: POP
// end ;
82176: LD_VAR 0 3
82180: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82181: LD_INT 0
82183: PPUSH
82184: PPUSH
82185: PPUSH
82186: PPUSH
82187: PPUSH
82188: PPUSH
82189: PPUSH
// result := [ ] ;
82190: LD_ADDR_VAR 0 4
82194: PUSH
82195: EMPTY
82196: ST_TO_ADDR
// if x - r < 0 then
82197: LD_VAR 0 1
82201: PUSH
82202: LD_VAR 0 3
82206: MINUS
82207: PUSH
82208: LD_INT 0
82210: LESS
82211: IFFALSE 82223
// min_x := 0 else
82213: LD_ADDR_VAR 0 8
82217: PUSH
82218: LD_INT 0
82220: ST_TO_ADDR
82221: GO 82239
// min_x := x - r ;
82223: LD_ADDR_VAR 0 8
82227: PUSH
82228: LD_VAR 0 1
82232: PUSH
82233: LD_VAR 0 3
82237: MINUS
82238: ST_TO_ADDR
// if y - r < 0 then
82239: LD_VAR 0 2
82243: PUSH
82244: LD_VAR 0 3
82248: MINUS
82249: PUSH
82250: LD_INT 0
82252: LESS
82253: IFFALSE 82265
// min_y := 0 else
82255: LD_ADDR_VAR 0 7
82259: PUSH
82260: LD_INT 0
82262: ST_TO_ADDR
82263: GO 82281
// min_y := y - r ;
82265: LD_ADDR_VAR 0 7
82269: PUSH
82270: LD_VAR 0 2
82274: PUSH
82275: LD_VAR 0 3
82279: MINUS
82280: ST_TO_ADDR
// max_x := x + r ;
82281: LD_ADDR_VAR 0 9
82285: PUSH
82286: LD_VAR 0 1
82290: PUSH
82291: LD_VAR 0 3
82295: PLUS
82296: ST_TO_ADDR
// max_y := y + r ;
82297: LD_ADDR_VAR 0 10
82301: PUSH
82302: LD_VAR 0 2
82306: PUSH
82307: LD_VAR 0 3
82311: PLUS
82312: ST_TO_ADDR
// for _x = min_x to max_x do
82313: LD_ADDR_VAR 0 5
82317: PUSH
82318: DOUBLE
82319: LD_VAR 0 8
82323: DEC
82324: ST_TO_ADDR
82325: LD_VAR 0 9
82329: PUSH
82330: FOR_TO
82331: IFFALSE 82432
// for _y = min_y to max_y do
82333: LD_ADDR_VAR 0 6
82337: PUSH
82338: DOUBLE
82339: LD_VAR 0 7
82343: DEC
82344: ST_TO_ADDR
82345: LD_VAR 0 10
82349: PUSH
82350: FOR_TO
82351: IFFALSE 82428
// begin if not ValidHex ( _x , _y ) then
82353: LD_VAR 0 5
82357: PPUSH
82358: LD_VAR 0 6
82362: PPUSH
82363: CALL_OW 488
82367: NOT
82368: IFFALSE 82372
// continue ;
82370: GO 82350
// if GetResourceTypeXY ( _x , _y ) then
82372: LD_VAR 0 5
82376: PPUSH
82377: LD_VAR 0 6
82381: PPUSH
82382: CALL_OW 283
82386: IFFALSE 82426
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82388: LD_ADDR_VAR 0 4
82392: PUSH
82393: LD_VAR 0 4
82397: PPUSH
82398: LD_VAR 0 4
82402: PUSH
82403: LD_INT 1
82405: PLUS
82406: PPUSH
82407: LD_VAR 0 5
82411: PUSH
82412: LD_VAR 0 6
82416: PUSH
82417: EMPTY
82418: LIST
82419: LIST
82420: PPUSH
82421: CALL_OW 1
82425: ST_TO_ADDR
// end ;
82426: GO 82350
82428: POP
82429: POP
82430: GO 82330
82432: POP
82433: POP
// end ;
82434: LD_VAR 0 4
82438: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82439: LD_INT 0
82441: PPUSH
82442: PPUSH
82443: PPUSH
82444: PPUSH
82445: PPUSH
82446: PPUSH
82447: PPUSH
82448: PPUSH
// if not units then
82449: LD_VAR 0 1
82453: NOT
82454: IFFALSE 82458
// exit ;
82456: GO 82990
// result := UnitFilter ( units , [ f_ok ] ) ;
82458: LD_ADDR_VAR 0 3
82462: PUSH
82463: LD_VAR 0 1
82467: PPUSH
82468: LD_INT 50
82470: PUSH
82471: EMPTY
82472: LIST
82473: PPUSH
82474: CALL_OW 72
82478: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82479: LD_ADDR_VAR 0 8
82483: PUSH
82484: LD_VAR 0 1
82488: PUSH
82489: LD_INT 1
82491: ARRAY
82492: PPUSH
82493: CALL_OW 255
82497: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82498: LD_ADDR_VAR 0 10
82502: PUSH
82503: LD_INT 29
82505: PUSH
82506: LD_INT 91
82508: PUSH
82509: LD_INT 49
82511: PUSH
82512: EMPTY
82513: LIST
82514: LIST
82515: LIST
82516: ST_TO_ADDR
// if not result then
82517: LD_VAR 0 3
82521: NOT
82522: IFFALSE 82526
// exit ;
82524: GO 82990
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82526: LD_ADDR_VAR 0 5
82530: PUSH
82531: LD_INT 81
82533: PUSH
82534: LD_VAR 0 8
82538: PUSH
82539: EMPTY
82540: LIST
82541: LIST
82542: PPUSH
82543: CALL_OW 69
82547: ST_TO_ADDR
// for i in result do
82548: LD_ADDR_VAR 0 4
82552: PUSH
82553: LD_VAR 0 3
82557: PUSH
82558: FOR_IN
82559: IFFALSE 82988
// begin tag := GetTag ( i ) + 1 ;
82561: LD_ADDR_VAR 0 9
82565: PUSH
82566: LD_VAR 0 4
82570: PPUSH
82571: CALL_OW 110
82575: PUSH
82576: LD_INT 1
82578: PLUS
82579: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
82580: LD_ADDR_VAR 0 7
82584: PUSH
82585: LD_VAR 0 4
82589: PPUSH
82590: CALL_OW 250
82594: PPUSH
82595: LD_VAR 0 4
82599: PPUSH
82600: CALL_OW 251
82604: PPUSH
82605: LD_INT 4
82607: PPUSH
82608: CALL 82181 0 3
82612: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
82613: LD_VAR 0 4
82617: PPUSH
82618: CALL_OW 247
82622: PUSH
82623: LD_INT 2
82625: EQUAL
82626: IFFALSE 82638
82628: PUSH
82629: LD_VAR 0 7
82633: PUSH
82634: LD_INT 2
82636: GREATER
82637: AND
82638: IFFALSE 82658
82640: PUSH
82641: LD_VAR 0 4
82645: PPUSH
82646: CALL_OW 264
82650: PUSH
82651: LD_VAR 0 10
82655: IN
82656: NOT
82657: AND
82658: IFFALSE 82697
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82660: LD_VAR 0 4
82664: PPUSH
82665: LD_VAR 0 7
82669: PUSH
82670: LD_INT 1
82672: ARRAY
82673: PUSH
82674: LD_INT 1
82676: ARRAY
82677: PPUSH
82678: LD_VAR 0 7
82682: PUSH
82683: LD_INT 1
82685: ARRAY
82686: PUSH
82687: LD_INT 2
82689: ARRAY
82690: PPUSH
82691: CALL_OW 116
82695: GO 82986
// if path > tag then
82697: LD_VAR 0 2
82701: PUSH
82702: LD_VAR 0 9
82706: GREATER
82707: IFFALSE 82915
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82709: LD_ADDR_VAR 0 6
82713: PUSH
82714: LD_VAR 0 5
82718: PPUSH
82719: LD_INT 91
82721: PUSH
82722: LD_VAR 0 4
82726: PUSH
82727: LD_INT 8
82729: PUSH
82730: EMPTY
82731: LIST
82732: LIST
82733: LIST
82734: PPUSH
82735: CALL_OW 72
82739: ST_TO_ADDR
// if nearEnemy then
82740: LD_VAR 0 6
82744: IFFALSE 82813
// begin if GetWeapon ( i ) = ru_time_lapser then
82746: LD_VAR 0 4
82750: PPUSH
82751: CALL_OW 264
82755: PUSH
82756: LD_INT 49
82758: EQUAL
82759: IFFALSE 82787
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82761: LD_VAR 0 4
82765: PPUSH
82766: LD_VAR 0 6
82770: PPUSH
82771: LD_VAR 0 4
82775: PPUSH
82776: CALL_OW 74
82780: PPUSH
82781: CALL_OW 112
82785: GO 82811
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82787: LD_VAR 0 4
82791: PPUSH
82792: LD_VAR 0 6
82796: PPUSH
82797: LD_VAR 0 4
82801: PPUSH
82802: CALL_OW 74
82806: PPUSH
82807: CALL 84071 0 2
// end else
82811: GO 82913
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82813: LD_VAR 0 4
82817: PPUSH
82818: LD_VAR 0 2
82822: PUSH
82823: LD_VAR 0 9
82827: ARRAY
82828: PUSH
82829: LD_INT 1
82831: ARRAY
82832: PPUSH
82833: LD_VAR 0 2
82837: PUSH
82838: LD_VAR 0 9
82842: ARRAY
82843: PUSH
82844: LD_INT 2
82846: ARRAY
82847: PPUSH
82848: CALL_OW 297
82852: PUSH
82853: LD_INT 6
82855: GREATER
82856: IFFALSE 82899
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82858: LD_VAR 0 4
82862: PPUSH
82863: LD_VAR 0 2
82867: PUSH
82868: LD_VAR 0 9
82872: ARRAY
82873: PUSH
82874: LD_INT 1
82876: ARRAY
82877: PPUSH
82878: LD_VAR 0 2
82882: PUSH
82883: LD_VAR 0 9
82887: ARRAY
82888: PUSH
82889: LD_INT 2
82891: ARRAY
82892: PPUSH
82893: CALL_OW 114
82897: GO 82913
// SetTag ( i , tag ) ;
82899: LD_VAR 0 4
82903: PPUSH
82904: LD_VAR 0 9
82908: PPUSH
82909: CALL_OW 109
// end else
82913: GO 82986
// if enemy then
82915: LD_VAR 0 5
82919: IFFALSE 82986
// begin if GetWeapon ( i ) = ru_time_lapser then
82921: LD_VAR 0 4
82925: PPUSH
82926: CALL_OW 264
82930: PUSH
82931: LD_INT 49
82933: EQUAL
82934: IFFALSE 82962
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82936: LD_VAR 0 4
82940: PPUSH
82941: LD_VAR 0 5
82945: PPUSH
82946: LD_VAR 0 4
82950: PPUSH
82951: CALL_OW 74
82955: PPUSH
82956: CALL_OW 112
82960: GO 82986
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82962: LD_VAR 0 4
82966: PPUSH
82967: LD_VAR 0 5
82971: PPUSH
82972: LD_VAR 0 4
82976: PPUSH
82977: CALL_OW 74
82981: PPUSH
82982: CALL 84071 0 2
// end ; end ;
82986: GO 82558
82988: POP
82989: POP
// end ;
82990: LD_VAR 0 3
82994: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82995: LD_INT 0
82997: PPUSH
82998: PPUSH
82999: PPUSH
// if not unit or IsInUnit ( unit ) then
83000: LD_VAR 0 1
83004: NOT
83005: IFTRUE 83018
83007: PUSH
83008: LD_VAR 0 1
83012: PPUSH
83013: CALL_OW 310
83017: OR
83018: IFFALSE 83022
// exit ;
83020: GO 83113
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83022: LD_ADDR_VAR 0 4
83026: PUSH
83027: LD_VAR 0 1
83031: PPUSH
83032: CALL_OW 250
83036: PPUSH
83037: LD_VAR 0 2
83041: PPUSH
83042: LD_INT 1
83044: PPUSH
83045: CALL_OW 272
83049: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83050: LD_ADDR_VAR 0 5
83054: PUSH
83055: LD_VAR 0 1
83059: PPUSH
83060: CALL_OW 251
83064: PPUSH
83065: LD_VAR 0 2
83069: PPUSH
83070: LD_INT 1
83072: PPUSH
83073: CALL_OW 273
83077: ST_TO_ADDR
// if ValidHex ( x , y ) then
83078: LD_VAR 0 4
83082: PPUSH
83083: LD_VAR 0 5
83087: PPUSH
83088: CALL_OW 488
83092: IFFALSE 83113
// ComTurnXY ( unit , x , y ) ;
83094: LD_VAR 0 1
83098: PPUSH
83099: LD_VAR 0 4
83103: PPUSH
83104: LD_VAR 0 5
83108: PPUSH
83109: CALL_OW 118
// end ;
83113: LD_VAR 0 3
83117: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83118: LD_INT 0
83120: PPUSH
83121: PPUSH
// result := false ;
83122: LD_ADDR_VAR 0 3
83126: PUSH
83127: LD_INT 0
83129: ST_TO_ADDR
// if not units then
83130: LD_VAR 0 2
83134: NOT
83135: IFFALSE 83139
// exit ;
83137: GO 83184
// for i in units do
83139: LD_ADDR_VAR 0 4
83143: PUSH
83144: LD_VAR 0 2
83148: PUSH
83149: FOR_IN
83150: IFFALSE 83182
// if See ( side , i ) then
83152: LD_VAR 0 1
83156: PPUSH
83157: LD_VAR 0 4
83161: PPUSH
83162: CALL_OW 292
83166: IFFALSE 83180
// begin result := true ;
83168: LD_ADDR_VAR 0 3
83172: PUSH
83173: LD_INT 1
83175: ST_TO_ADDR
// exit ;
83176: POP
83177: POP
83178: GO 83184
// end ;
83180: GO 83149
83182: POP
83183: POP
// end ;
83184: LD_VAR 0 3
83188: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83189: LD_INT 0
83191: PPUSH
83192: PPUSH
83193: PPUSH
83194: PPUSH
// if not unit or not points then
83195: LD_VAR 0 1
83199: NOT
83200: IFTRUE 83209
83202: PUSH
83203: LD_VAR 0 2
83207: NOT
83208: OR
83209: IFFALSE 83213
// exit ;
83211: GO 83303
// dist := 99999 ;
83213: LD_ADDR_VAR 0 5
83217: PUSH
83218: LD_INT 99999
83220: ST_TO_ADDR
// for i in points do
83221: LD_ADDR_VAR 0 4
83225: PUSH
83226: LD_VAR 0 2
83230: PUSH
83231: FOR_IN
83232: IFFALSE 83301
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83234: LD_ADDR_VAR 0 6
83238: PUSH
83239: LD_VAR 0 1
83243: PPUSH
83244: LD_VAR 0 4
83248: PUSH
83249: LD_INT 1
83251: ARRAY
83252: PPUSH
83253: LD_VAR 0 4
83257: PUSH
83258: LD_INT 2
83260: ARRAY
83261: PPUSH
83262: CALL_OW 297
83266: ST_TO_ADDR
// if tmpDist < dist then
83267: LD_VAR 0 6
83271: PUSH
83272: LD_VAR 0 5
83276: LESS
83277: IFFALSE 83299
// begin result := i ;
83279: LD_ADDR_VAR 0 3
83283: PUSH
83284: LD_VAR 0 4
83288: ST_TO_ADDR
// dist := tmpDist ;
83289: LD_ADDR_VAR 0 5
83293: PUSH
83294: LD_VAR 0 6
83298: ST_TO_ADDR
// end ; end ;
83299: GO 83231
83301: POP
83302: POP
// end ;
83303: LD_VAR 0 3
83307: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83308: LD_INT 0
83310: PPUSH
// uc_side := side ;
83311: LD_ADDR_OWVAR 20
83315: PUSH
83316: LD_VAR 0 1
83320: ST_TO_ADDR
// uc_nation := 3 ;
83321: LD_ADDR_OWVAR 21
83325: PUSH
83326: LD_INT 3
83328: ST_TO_ADDR
// vc_chassis := 25 ;
83329: LD_ADDR_OWVAR 37
83333: PUSH
83334: LD_INT 25
83336: ST_TO_ADDR
// vc_engine := engine_siberite ;
83337: LD_ADDR_OWVAR 39
83341: PUSH
83342: LD_INT 3
83344: ST_TO_ADDR
// vc_control := control_computer ;
83345: LD_ADDR_OWVAR 38
83349: PUSH
83350: LD_INT 3
83352: ST_TO_ADDR
// vc_weapon := 59 ;
83353: LD_ADDR_OWVAR 40
83357: PUSH
83358: LD_INT 59
83360: ST_TO_ADDR
// result := CreateVehicle ;
83361: LD_ADDR_VAR 0 5
83365: PUSH
83366: CALL_OW 45
83370: ST_TO_ADDR
// SetDir ( result , d ) ;
83371: LD_VAR 0 5
83375: PPUSH
83376: LD_VAR 0 4
83380: PPUSH
83381: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83385: LD_VAR 0 5
83389: PPUSH
83390: LD_VAR 0 2
83394: PPUSH
83395: LD_VAR 0 3
83399: PPUSH
83400: LD_INT 0
83402: PPUSH
83403: CALL_OW 48
// end ;
83407: LD_VAR 0 5
83411: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83412: LD_INT 0
83414: PPUSH
83415: PPUSH
83416: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83417: LD_ADDR_VAR 0 2
83421: PUSH
83422: LD_INT 0
83424: PUSH
83425: LD_INT 0
83427: PUSH
83428: LD_INT 0
83430: PUSH
83431: LD_INT 0
83433: PUSH
83434: EMPTY
83435: LIST
83436: LIST
83437: LIST
83438: LIST
83439: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83440: LD_VAR 0 1
83444: NOT
83445: IFTRUE 83478
83447: PUSH
83448: LD_VAR 0 1
83452: PPUSH
83453: CALL_OW 264
83457: PUSH
83458: LD_INT 12
83460: PUSH
83461: LD_INT 51
83463: PUSH
83464: LD_INT 32
83466: PUSH
83467: LD_INT 89
83469: PUSH
83470: EMPTY
83471: LIST
83472: LIST
83473: LIST
83474: LIST
83475: IN
83476: NOT
83477: OR
83478: IFFALSE 83482
// exit ;
83480: GO 83580
// for i := 1 to 3 do
83482: LD_ADDR_VAR 0 3
83486: PUSH
83487: DOUBLE
83488: LD_INT 1
83490: DEC
83491: ST_TO_ADDR
83492: LD_INT 3
83494: PUSH
83495: FOR_TO
83496: IFFALSE 83578
// begin tmp := GetCargo ( cargo , i ) ;
83498: LD_ADDR_VAR 0 4
83502: PUSH
83503: LD_VAR 0 1
83507: PPUSH
83508: LD_VAR 0 3
83512: PPUSH
83513: CALL_OW 289
83517: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83518: LD_ADDR_VAR 0 2
83522: PUSH
83523: LD_VAR 0 2
83527: PPUSH
83528: LD_VAR 0 3
83532: PPUSH
83533: LD_VAR 0 4
83537: PPUSH
83538: CALL_OW 1
83542: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83543: LD_ADDR_VAR 0 2
83547: PUSH
83548: LD_VAR 0 2
83552: PPUSH
83553: LD_INT 4
83555: PPUSH
83556: LD_VAR 0 2
83560: PUSH
83561: LD_INT 4
83563: ARRAY
83564: PUSH
83565: LD_VAR 0 4
83569: PLUS
83570: PPUSH
83571: CALL_OW 1
83575: ST_TO_ADDR
// end ;
83576: GO 83495
83578: POP
83579: POP
// end ;
83580: LD_VAR 0 2
83584: RET
// export function Length ( array ) ; begin
83585: LD_INT 0
83587: PPUSH
// result := array + 0 ;
83588: LD_ADDR_VAR 0 2
83592: PUSH
83593: LD_VAR 0 1
83597: PUSH
83598: LD_INT 0
83600: PLUS
83601: ST_TO_ADDR
// end ;
83602: LD_VAR 0 2
83606: RET
// export function PrepareArray ( array ) ; begin
83607: LD_INT 0
83609: PPUSH
// result := array diff 0 ;
83610: LD_ADDR_VAR 0 2
83614: PUSH
83615: LD_VAR 0 1
83619: PUSH
83620: LD_INT 0
83622: DIFF
83623: ST_TO_ADDR
// if not result [ 1 ] then
83624: LD_VAR 0 2
83628: PUSH
83629: LD_INT 1
83631: ARRAY
83632: NOT
83633: IFFALSE 83653
// result := Delete ( result , 1 ) ;
83635: LD_ADDR_VAR 0 2
83639: PUSH
83640: LD_VAR 0 2
83644: PPUSH
83645: LD_INT 1
83647: PPUSH
83648: CALL_OW 3
83652: ST_TO_ADDR
// end ;
83653: LD_VAR 0 2
83657: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83658: LD_INT 0
83660: PPUSH
83661: PPUSH
83662: PPUSH
83663: PPUSH
// sibRocketRange := 25 ;
83664: LD_ADDR_VAR 0 6
83668: PUSH
83669: LD_INT 25
83671: ST_TO_ADDR
// result := false ;
83672: LD_ADDR_VAR 0 4
83676: PUSH
83677: LD_INT 0
83679: ST_TO_ADDR
// for i := 0 to 5 do
83680: LD_ADDR_VAR 0 5
83684: PUSH
83685: DOUBLE
83686: LD_INT 0
83688: DEC
83689: ST_TO_ADDR
83690: LD_INT 5
83692: PUSH
83693: FOR_TO
83694: IFFALSE 83761
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83696: LD_VAR 0 1
83700: PPUSH
83701: LD_VAR 0 5
83705: PPUSH
83706: LD_VAR 0 6
83710: PPUSH
83711: CALL_OW 272
83715: PPUSH
83716: LD_VAR 0 2
83720: PPUSH
83721: LD_VAR 0 5
83725: PPUSH
83726: LD_VAR 0 6
83730: PPUSH
83731: CALL_OW 273
83735: PPUSH
83736: LD_VAR 0 3
83740: PPUSH
83741: CALL_OW 309
83745: IFFALSE 83759
// begin result := true ;
83747: LD_ADDR_VAR 0 4
83751: PUSH
83752: LD_INT 1
83754: ST_TO_ADDR
// exit ;
83755: POP
83756: POP
83757: GO 83763
// end ;
83759: GO 83693
83761: POP
83762: POP
// end ;
83763: LD_VAR 0 4
83767: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83768: LD_INT 0
83770: PPUSH
83771: PPUSH
83772: PPUSH
// if btype = b_depot then
83773: LD_VAR 0 2
83777: PUSH
83778: LD_INT 0
83780: EQUAL
83781: IFFALSE 83793
// begin result := true ;
83783: LD_ADDR_VAR 0 3
83787: PUSH
83788: LD_INT 1
83790: ST_TO_ADDR
// exit ;
83791: GO 83913
// end ; pom := GetBase ( depot ) ;
83793: LD_ADDR_VAR 0 4
83797: PUSH
83798: LD_VAR 0 1
83802: PPUSH
83803: CALL_OW 274
83807: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83808: LD_ADDR_VAR 0 5
83812: PUSH
83813: LD_VAR 0 2
83817: PPUSH
83818: LD_VAR 0 1
83822: PPUSH
83823: CALL_OW 248
83827: PPUSH
83828: CALL_OW 450
83832: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83833: LD_ADDR_VAR 0 3
83837: PUSH
83838: LD_VAR 0 4
83842: PPUSH
83843: LD_INT 1
83845: PPUSH
83846: CALL_OW 275
83850: PUSH
83851: LD_VAR 0 5
83855: PUSH
83856: LD_INT 1
83858: ARRAY
83859: GREATEREQUAL
83860: IFFALSE 83886
83862: PUSH
83863: LD_VAR 0 4
83867: PPUSH
83868: LD_INT 2
83870: PPUSH
83871: CALL_OW 275
83875: PUSH
83876: LD_VAR 0 5
83880: PUSH
83881: LD_INT 2
83883: ARRAY
83884: GREATEREQUAL
83885: AND
83886: IFFALSE 83912
83888: PUSH
83889: LD_VAR 0 4
83893: PPUSH
83894: LD_INT 3
83896: PPUSH
83897: CALL_OW 275
83901: PUSH
83902: LD_VAR 0 5
83906: PUSH
83907: LD_INT 3
83909: ARRAY
83910: GREATEREQUAL
83911: AND
83912: ST_TO_ADDR
// end ;
83913: LD_VAR 0 3
83917: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83918: LD_INT 0
83920: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83921: LD_VAR 0 1
83925: PPUSH
83926: LD_VAR 0 2
83930: PPUSH
83931: LD_INT 0
83933: PPUSH
83934: LD_INT 0
83936: PPUSH
83937: LD_INT 1
83939: PPUSH
83940: LD_INT 0
83942: PPUSH
83943: CALL_OW 587
// end ;
83947: LD_VAR 0 3
83951: RET
// export function CenterOnNow ( unit ) ; begin
83952: LD_INT 0
83954: PPUSH
// result := IsInUnit ( unit ) ;
83955: LD_ADDR_VAR 0 2
83959: PUSH
83960: LD_VAR 0 1
83964: PPUSH
83965: CALL_OW 310
83969: ST_TO_ADDR
// if not result then
83970: LD_VAR 0 2
83974: NOT
83975: IFFALSE 83987
// result := unit ;
83977: LD_ADDR_VAR 0 2
83981: PUSH
83982: LD_VAR 0 1
83986: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83987: LD_VAR 0 1
83991: PPUSH
83992: CALL_OW 87
// end ;
83996: LD_VAR 0 2
84000: RET
// export function ComMoveHex ( unit , hex ) ; begin
84001: LD_INT 0
84003: PPUSH
// if not hex then
84004: LD_VAR 0 2
84008: NOT
84009: IFFALSE 84013
// exit ;
84011: GO 84066
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84013: LD_VAR 0 2
84017: PUSH
84018: LD_INT 1
84020: ARRAY
84021: PPUSH
84022: LD_VAR 0 2
84026: PUSH
84027: LD_INT 2
84029: ARRAY
84030: PPUSH
84031: CALL_OW 428
84035: IFFALSE 84039
// exit ;
84037: GO 84066
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84039: LD_VAR 0 1
84043: PPUSH
84044: LD_VAR 0 2
84048: PUSH
84049: LD_INT 1
84051: ARRAY
84052: PPUSH
84053: LD_VAR 0 2
84057: PUSH
84058: LD_INT 2
84060: ARRAY
84061: PPUSH
84062: CALL_OW 111
// end ;
84066: LD_VAR 0 3
84070: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84071: LD_INT 0
84073: PPUSH
84074: PPUSH
84075: PPUSH
// if not unit or not enemy then
84076: LD_VAR 0 1
84080: NOT
84081: IFTRUE 84090
84083: PUSH
84084: LD_VAR 0 2
84088: NOT
84089: OR
84090: IFFALSE 84094
// exit ;
84092: GO 84220
// x := GetX ( enemy ) ;
84094: LD_ADDR_VAR 0 4
84098: PUSH
84099: LD_VAR 0 2
84103: PPUSH
84104: CALL_OW 250
84108: ST_TO_ADDR
// y := GetY ( enemy ) ;
84109: LD_ADDR_VAR 0 5
84113: PUSH
84114: LD_VAR 0 2
84118: PPUSH
84119: CALL_OW 251
84123: ST_TO_ADDR
// if ValidHex ( x , y ) then
84124: LD_VAR 0 4
84128: PPUSH
84129: LD_VAR 0 5
84133: PPUSH
84134: CALL_OW 488
84138: IFFALSE 84220
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
84140: LD_VAR 0 2
84144: PPUSH
84145: CALL_OW 247
84149: PUSH
84150: LD_INT 3
84152: PUSH
84153: LD_INT 2
84155: PUSH
84156: EMPTY
84157: LIST
84158: LIST
84159: IN
84160: IFTRUE 84183
84162: PUSH
84163: LD_VAR 0 1
84167: PPUSH
84168: CALL_OW 255
84172: PPUSH
84173: LD_VAR 0 2
84177: PPUSH
84178: CALL_OW 292
84182: OR
84183: IFFALSE 84201
// ComAttackUnit ( unit , enemy ) else
84185: LD_VAR 0 1
84189: PPUSH
84190: LD_VAR 0 2
84194: PPUSH
84195: CALL_OW 115
84199: GO 84220
// ComAgressiveMove ( unit , x , y ) ;
84201: LD_VAR 0 1
84205: PPUSH
84206: LD_VAR 0 4
84210: PPUSH
84211: LD_VAR 0 5
84215: PPUSH
84216: CALL_OW 114
// end ;
84220: LD_VAR 0 3
84224: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84225: LD_INT 0
84227: PPUSH
84228: PPUSH
84229: PPUSH
// list := AreaToList ( area , 0 ) ;
84230: LD_ADDR_VAR 0 5
84234: PUSH
84235: LD_VAR 0 1
84239: PPUSH
84240: LD_INT 0
84242: PPUSH
84243: CALL_OW 517
84247: ST_TO_ADDR
// if not list then
84248: LD_VAR 0 5
84252: NOT
84253: IFFALSE 84257
// exit ;
84255: GO 84387
// if all then
84257: LD_VAR 0 2
84261: IFFALSE 84349
// begin for i := 1 to list [ 1 ] do
84263: LD_ADDR_VAR 0 4
84267: PUSH
84268: DOUBLE
84269: LD_INT 1
84271: DEC
84272: ST_TO_ADDR
84273: LD_VAR 0 5
84277: PUSH
84278: LD_INT 1
84280: ARRAY
84281: PUSH
84282: FOR_TO
84283: IFFALSE 84345
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84285: LD_ADDR_VAR 0 3
84289: PUSH
84290: LD_VAR 0 3
84294: PPUSH
84295: LD_VAR 0 3
84299: PUSH
84300: LD_INT 1
84302: PLUS
84303: PPUSH
84304: LD_VAR 0 5
84308: PUSH
84309: LD_INT 1
84311: ARRAY
84312: PUSH
84313: LD_VAR 0 4
84317: ARRAY
84318: PUSH
84319: LD_VAR 0 5
84323: PUSH
84324: LD_INT 2
84326: ARRAY
84327: PUSH
84328: LD_VAR 0 4
84332: ARRAY
84333: PUSH
84334: EMPTY
84335: LIST
84336: LIST
84337: PPUSH
84338: CALL_OW 1
84342: ST_TO_ADDR
84343: GO 84282
84345: POP
84346: POP
// exit ;
84347: GO 84387
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84349: LD_ADDR_VAR 0 3
84353: PUSH
84354: LD_VAR 0 5
84358: PUSH
84359: LD_INT 1
84361: ARRAY
84362: PUSH
84363: LD_INT 1
84365: ARRAY
84366: PUSH
84367: LD_VAR 0 5
84371: PUSH
84372: LD_INT 2
84374: ARRAY
84375: PUSH
84376: LD_INT 1
84378: ARRAY
84379: PUSH
84380: EMPTY
84381: LIST
84382: LIST
84383: PUSH
84384: EMPTY
84385: LIST
84386: ST_TO_ADDR
// end ;
84387: LD_VAR 0 3
84391: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84392: LD_INT 0
84394: PPUSH
84395: PPUSH
// list := AreaToList ( area , 0 ) ;
84396: LD_ADDR_VAR 0 4
84400: PUSH
84401: LD_VAR 0 1
84405: PPUSH
84406: LD_INT 0
84408: PPUSH
84409: CALL_OW 517
84413: ST_TO_ADDR
// if not list then
84414: LD_VAR 0 4
84418: NOT
84419: IFFALSE 84423
// exit ;
84421: GO 84464
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84423: LD_ADDR_VAR 0 3
84427: PUSH
84428: LD_VAR 0 4
84432: PUSH
84433: LD_INT 1
84435: ARRAY
84436: PUSH
84437: LD_INT 1
84439: ARRAY
84440: PUSH
84441: LD_VAR 0 4
84445: PUSH
84446: LD_INT 2
84448: ARRAY
84449: PUSH
84450: LD_INT 1
84452: ARRAY
84453: PUSH
84454: LD_VAR 0 2
84458: PUSH
84459: EMPTY
84460: LIST
84461: LIST
84462: LIST
84463: ST_TO_ADDR
// end ;
84464: LD_VAR 0 3
84468: RET
// export function First ( array ) ; begin
84469: LD_INT 0
84471: PPUSH
// if not array then
84472: LD_VAR 0 1
84476: NOT
84477: IFFALSE 84481
// exit ;
84479: GO 84495
// result := array [ 1 ] ;
84481: LD_ADDR_VAR 0 2
84485: PUSH
84486: LD_VAR 0 1
84490: PUSH
84491: LD_INT 1
84493: ARRAY
84494: ST_TO_ADDR
// end ;
84495: LD_VAR 0 2
84499: RET
// export function Last ( array ) ; begin
84500: LD_INT 0
84502: PPUSH
// if not array then
84503: LD_VAR 0 1
84507: NOT
84508: IFFALSE 84512
// exit ;
84510: GO 84528
// result := array [ array ] ;
84512: LD_ADDR_VAR 0 2
84516: PUSH
84517: LD_VAR 0 1
84521: PUSH
84522: LD_VAR 0 1
84526: ARRAY
84527: ST_TO_ADDR
// end ;
84528: LD_VAR 0 2
84532: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84533: LD_INT 0
84535: PPUSH
84536: PPUSH
// result := [ ] ;
84537: LD_ADDR_VAR 0 5
84541: PUSH
84542: EMPTY
84543: ST_TO_ADDR
// if not array then
84544: LD_VAR 0 1
84548: NOT
84549: IFFALSE 84553
// exit ;
84551: GO 84665
// for i := 1 to array do
84553: LD_ADDR_VAR 0 6
84557: PUSH
84558: DOUBLE
84559: LD_INT 1
84561: DEC
84562: ST_TO_ADDR
84563: LD_VAR 0 1
84567: PUSH
84568: FOR_TO
84569: IFFALSE 84663
// if array [ i ] [ index ] = value then
84571: LD_VAR 0 1
84575: PUSH
84576: LD_VAR 0 6
84580: ARRAY
84581: PUSH
84582: LD_VAR 0 2
84586: ARRAY
84587: PUSH
84588: LD_VAR 0 3
84592: EQUAL
84593: IFFALSE 84661
// begin if indexColumn then
84595: LD_VAR 0 4
84599: IFFALSE 84635
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84601: LD_ADDR_VAR 0 5
84605: PUSH
84606: LD_VAR 0 5
84610: PPUSH
84611: LD_VAR 0 1
84615: PUSH
84616: LD_VAR 0 6
84620: ARRAY
84621: PUSH
84622: LD_VAR 0 4
84626: ARRAY
84627: PPUSH
84628: CALL 79673 0 2
84632: ST_TO_ADDR
84633: GO 84661
// result := Join ( result , array [ i ] ) ;
84635: LD_ADDR_VAR 0 5
84639: PUSH
84640: LD_VAR 0 5
84644: PPUSH
84645: LD_VAR 0 1
84649: PUSH
84650: LD_VAR 0 6
84654: ARRAY
84655: PPUSH
84656: CALL 79673 0 2
84660: ST_TO_ADDR
// end ;
84661: GO 84568
84663: POP
84664: POP
// end ;
84665: LD_VAR 0 5
84669: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84670: LD_INT 0
84672: PPUSH
// if not vehicles or not parkingPoint then
84673: LD_VAR 0 1
84677: NOT
84678: IFTRUE 84687
84680: PUSH
84681: LD_VAR 0 2
84685: NOT
84686: OR
84687: IFFALSE 84691
// exit ;
84689: GO 84789
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84691: LD_ADDR_VAR 0 1
84695: PUSH
84696: LD_VAR 0 1
84700: PPUSH
84701: LD_INT 50
84703: PUSH
84704: EMPTY
84705: LIST
84706: PUSH
84707: LD_INT 3
84709: PUSH
84710: LD_INT 92
84712: PUSH
84713: LD_VAR 0 2
84717: PUSH
84718: LD_INT 1
84720: ARRAY
84721: PUSH
84722: LD_VAR 0 2
84726: PUSH
84727: LD_INT 2
84729: ARRAY
84730: PUSH
84731: LD_INT 8
84733: PUSH
84734: EMPTY
84735: LIST
84736: LIST
84737: LIST
84738: LIST
84739: PUSH
84740: EMPTY
84741: LIST
84742: LIST
84743: PUSH
84744: EMPTY
84745: LIST
84746: LIST
84747: PPUSH
84748: CALL_OW 72
84752: ST_TO_ADDR
// if not vehicles then
84753: LD_VAR 0 1
84757: NOT
84758: IFFALSE 84762
// exit ;
84760: GO 84789
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84762: LD_VAR 0 1
84766: PPUSH
84767: LD_VAR 0 2
84771: PUSH
84772: LD_INT 1
84774: ARRAY
84775: PPUSH
84776: LD_VAR 0 2
84780: PUSH
84781: LD_INT 2
84783: ARRAY
84784: PPUSH
84785: CALL_OW 111
// end ;
84789: LD_VAR 0 3
84793: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84794: LD_INT 0
84796: PPUSH
84797: PPUSH
84798: PPUSH
// if not side or not area then
84799: LD_VAR 0 1
84803: NOT
84804: IFTRUE 84813
84806: PUSH
84807: LD_VAR 0 2
84811: NOT
84812: OR
84813: IFFALSE 84817
// exit ;
84815: GO 84936
// tmp := AreaToList ( area , 0 ) ;
84817: LD_ADDR_VAR 0 5
84821: PUSH
84822: LD_VAR 0 2
84826: PPUSH
84827: LD_INT 0
84829: PPUSH
84830: CALL_OW 517
84834: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84835: LD_ADDR_VAR 0 4
84839: PUSH
84840: DOUBLE
84841: LD_INT 1
84843: DEC
84844: ST_TO_ADDR
84845: LD_VAR 0 5
84849: PUSH
84850: LD_INT 1
84852: ARRAY
84853: PUSH
84854: FOR_TO
84855: IFFALSE 84934
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84857: LD_VAR 0 5
84861: PUSH
84862: LD_INT 1
84864: ARRAY
84865: PUSH
84866: LD_VAR 0 4
84870: ARRAY
84871: PPUSH
84872: LD_VAR 0 5
84876: PUSH
84877: LD_INT 2
84879: ARRAY
84880: PUSH
84881: LD_VAR 0 4
84885: ARRAY
84886: PPUSH
84887: CALL_OW 351
84891: IFFALSE 84932
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84893: LD_VAR 0 5
84897: PUSH
84898: LD_INT 1
84900: ARRAY
84901: PUSH
84902: LD_VAR 0 4
84906: ARRAY
84907: PPUSH
84908: LD_VAR 0 5
84912: PUSH
84913: LD_INT 2
84915: ARRAY
84916: PUSH
84917: LD_VAR 0 4
84921: ARRAY
84922: PPUSH
84923: LD_VAR 0 1
84927: PPUSH
84928: CALL_OW 244
// end ;
84932: GO 84854
84934: POP
84935: POP
// end ;
84936: LD_VAR 0 3
84940: RET
// export function UniqueArray ( array ) ; var i ; begin
84941: LD_INT 0
84943: PPUSH
84944: PPUSH
// result := [ ] ;
84945: LD_ADDR_VAR 0 2
84949: PUSH
84950: EMPTY
84951: ST_TO_ADDR
// if not array then
84952: LD_VAR 0 1
84956: NOT
84957: IFFALSE 84961
// exit ;
84959: GO 85022
// for i := 1 to array do
84961: LD_ADDR_VAR 0 3
84965: PUSH
84966: DOUBLE
84967: LD_INT 1
84969: DEC
84970: ST_TO_ADDR
84971: LD_VAR 0 1
84975: PUSH
84976: FOR_TO
84977: IFFALSE 85020
// if not array [ i ] in result then
84979: LD_VAR 0 1
84983: PUSH
84984: LD_VAR 0 3
84988: ARRAY
84989: PUSH
84990: LD_VAR 0 2
84994: IN
84995: NOT
84996: IFFALSE 85018
// result := Join ( result , i ) ;
84998: LD_ADDR_VAR 0 2
85002: PUSH
85003: LD_VAR 0 2
85007: PPUSH
85008: LD_VAR 0 3
85012: PPUSH
85013: CALL 79673 0 2
85017: ST_TO_ADDR
85018: GO 84976
85020: POP
85021: POP
// end ; end_of_file
85022: LD_VAR 0 2
85026: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85027: LD_VAR 0 1
85031: PUSH
85032: LD_INT 200
85034: DOUBLE
85035: GREATEREQUAL
85036: IFFALSE 85044
85038: LD_INT 299
85040: DOUBLE
85041: LESSEQUAL
85042: IFTRUE 85046
85044: GO 85078
85046: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85047: LD_VAR 0 1
85051: PPUSH
85052: LD_VAR 0 2
85056: PPUSH
85057: LD_VAR 0 3
85061: PPUSH
85062: LD_VAR 0 4
85066: PPUSH
85067: LD_VAR 0 5
85071: PPUSH
85072: CALL 35749 0 5
85076: GO 85155
85078: LD_INT 300
85080: DOUBLE
85081: GREATEREQUAL
85082: IFFALSE 85090
85084: LD_INT 399
85086: DOUBLE
85087: LESSEQUAL
85088: IFTRUE 85092
85090: GO 85154
85092: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85093: LD_VAR 0 1
85097: PPUSH
85098: LD_VAR 0 2
85102: PPUSH
85103: LD_VAR 0 3
85107: PPUSH
85108: LD_VAR 0 4
85112: PPUSH
85113: LD_VAR 0 5
85117: PPUSH
85118: LD_VAR 0 6
85122: PPUSH
85123: LD_VAR 0 7
85127: PPUSH
85128: LD_VAR 0 8
85132: PPUSH
85133: LD_VAR 0 9
85137: PPUSH
85138: LD_VAR 0 10
85142: PPUSH
85143: LD_VAR 0 11
85147: PPUSH
85148: CALL 31552 0 11
85152: GO 85155
85154: POP
// end ;
85155: PPOPN 11
85157: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85158: LD_VAR 0 1
85162: PPUSH
85163: LD_VAR 0 2
85167: PPUSH
85168: LD_VAR 0 3
85172: PPUSH
85173: LD_VAR 0 4
85177: PPUSH
85178: LD_VAR 0 5
85182: PPUSH
85183: CALL 35049 0 5
// end ; end_of_file
85187: PPOPN 5
85189: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85190: LD_VAR 0 1
85194: PPUSH
85195: LD_VAR 0 2
85199: PPUSH
85200: LD_VAR 0 3
85204: PPUSH
85205: LD_VAR 0 4
85209: PPUSH
85210: LD_VAR 0 5
85214: PPUSH
85215: LD_VAR 0 6
85219: PPUSH
85220: CALL 19092 0 6
// end ;
85224: PPOPN 6
85226: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85227: LD_INT 0
85229: PPUSH
// begin if not units then
85230: LD_VAR 0 1
85234: NOT
85235: IFFALSE 85239
// exit ;
85237: GO 85273
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
85239: LD_VAR 0 1
85243: PPUSH
85244: LD_VAR 0 2
85248: PPUSH
85249: LD_VAR 0 3
85253: PPUSH
85254: LD_VAR 0 4
85258: PPUSH
85259: LD_VAR 0 5
85263: PPUSH
85264: LD_VAR 0 6
85268: PPUSH
85269: CALL 41446 0 6
// end ;
85273: PPOPN 7
85275: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85276: CALL 18972 0 0
// end ;
85280: PPOPN 1
85282: END
